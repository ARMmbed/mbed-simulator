// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendFsk($0, $1, $2, $3, $4, $5); },
 function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendLoRa($0, $1, $2, $3, $4, $5); },
 function() { console.log('receive', Date.now()); },
 function() { return Date.now(); },
 function() { return Math.random() * 0x8000000 | 0; },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function() { console.log('rx_frame', Date.now()); },
 function($0) { window.MbedJSHal.lora.init($0); },
 function($0, $1) { MbedJSHal.gpio.init_in($0, $1, 3); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); },
 function($0, $1, $2) { MbedJSHal.gpio.init_out($0, $1, $2); },
 function($0, $1, $2, $3, $4) { MbedJSHal.gpio.init_inout($0, $1, $2, $3, $4); },
 function($0, $1) { MbedJSHal.gpio.irq_init($0, $1); },
 function($0, $1) { MbedJSHal.gpio.irq_free($0); },
 function($0, $1, $2) { MbedJSHal.gpio.irq_set($0, $1, $2); },
 function($0) { window.MbedJSHal.timers.ticker_detach($0); },
 function($0, $1) { window.MbedJSHal.timers.ticker_setup($0, $1); },
 function($0, $1, $2) { window.MbedJSHal.sht31.init($0, $1, $2); },
 function($0) { return window.MbedJSHal.sht31.read_temperature($0); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiiiiii(code, a0, a1, a2, a3, a4, a5) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 25536;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } });


memoryInitializer = "lorawan.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



   

  var _llvm_ceil_f64=Math_ceil;

  var _llvm_floor_f64=Math_floor;

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

  function _pthread_cond_init() { return 0; }

  function _pthread_cond_signal() { return 0; }

  function _pthread_cond_timedwait() { return 0; }

  function _pthread_cond_wait() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_i = ["0", "_ccm_ctx_alloc", "_gcm_ctx_alloc", "_aes_ctx_alloc", "_us_ticker_read", "_us_ticker_get_info", "0", "0"];
var debug_table_ii = ["0", "__ZN16SX1276_LoRaRadio6randomEv", "__ZN16SX1276_LoRaRadio10get_statusEv", "__ZN16LoRaWANInterface7connectEv", "__ZN16LoRaWANInterface10disconnectEv", "__ZN16LoRaWANInterface22add_link_check_requestEv", "__ZN16LoRaWANInterface24enable_adaptive_datarateEv", "__ZN16LoRaWANInterface25disable_adaptive_datarateEv", "__ZN16LoRaWANInterface19remove_channel_planEv", "___stdio_close", "__ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE", "0", "0", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN16SX1276_LoRaRadio18check_rf_frequencyEj", "__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE", "__ZN16LoRaWANInterface7connectERK15lorawan_connect", "__ZN16LoRaWANInterface12set_datarateEh", "__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh", "__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan", "__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan", "__ZN16LoRaWANInterface14remove_channelEh", "__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t", "__ZN16LoRaWANInterface16set_device_classE14device_class_t", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s", "__ZN7LoRaPHY16get_alternate_DREh", "__ZN7LoRaPHY14remove_channelEh", "0"];
var debug_table_iiii = ["0", "__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t", "__ZN7LoRaPHY25accept_tx_param_setup_reqEhh", "__ZN7LoRaPHY18dl_channel_requestEhj", "__ZN7LoRaPHY11add_channelEPK16channel_params_th", "__ZN7LoRaPHY15apply_DR_offsetEaa", "__ZNK7LoRaPHY25verify_frequency_for_bandEjh", "_ccm_aes_setkey_wrap", "_gcm_aes_setkey_wrap", "_aes_setkey_enc_wrap", "_aes_setkey_dec_wrap", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "_get_pkcs_padding", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiiii = ["0", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj", "_aes_crypt_ecb_wrap", "0"];
var debug_table_iiiiii = ["0", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj", "__ZN16LoRaWANInterface4sendEhPKhti", "__ZN16LoRaWANInterface7receiveEhPhti", "__ZN16LoRaWANInterface7receiveEPhtRhRi", "__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_", "0", "0"];
var debug_table_iiiiiii = ["0", "__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_", "_aes_crypt_cbc_wrap", "0"];
var debug_table_iiiiiiii = ["0", "_aes_crypt_ctr_wrap"];
var debug_table_v = ["0", "___cxa_pure_virtual", "_us_ticker_init", "_us_ticker_disable_interrupt", "_us_ticker_clear_interrupt", "_us_ticker_fire_interrupt", "__ZL25default_terminate_handlerv", "__ZL12send_messagev", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_vi = ["0", "__ZN16SX1276_LoRaRadio11radio_resetEv", "__ZN16SX1276_LoRaRadio5sleepEv", "__ZN16SX1276_LoRaRadio7standbyEv", "__ZN16SX1276_LoRaRadio9start_cadEv", "__ZN16SX1276_LoRaRadio4lockEv", "__ZN16SX1276_LoRaRadio6unlockEv", "__ZN16SX1276_LoRaRadioD2Ev", "__ZN16SX1276_LoRaRadioD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv", "__ZN4mbed11InterruptInD2Ev", "__ZN4mbed11InterruptInD0Ev", "__ZN4mbed7TimeoutD2Ev", "__ZN4mbed7TimeoutD0Ev", "__ZN4mbed7Timeout7handlerEv", "__ZN4mbed10TimerEventD2Ev", "__ZN4mbed10TimerEventD0Ev", "_mbed_trace_default_print", "__ZN16LoRaWANInterface25remove_link_check_requestEv", "__ZN16LoRaWANInterfaceD2Ev", "__ZN16LoRaWANInterfaceD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPv", "__ZN4mbed8CallbackIFvPKhtsaEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPv", "__ZN4mbed8CallbackIFvbEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPv", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv", "__ZN7LoRaPHYD2Ev", "__ZN7LoRaPHYD0Ev", "__ZN7LoRaPHY24restore_default_channelsEv", "__ZN12LoRaPHYEU868D2Ev", "__ZN12LoRaPHYEU868D0Ev", "_ccm_ctx_free", "_gcm_ctx_free", "_aes_ctx_free", "_us_ticker_set_interrupt", "__ZN4mbed6TickerD2Ev", "__ZN4mbed6TickerD0Ev", "__ZN4mbed6Ticker7handlerEv", "__ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb", "__ZN16SX1276_LoRaRadio4sendEPhh__async_cb", "__ZN16SX1276_LoRaRadio11rx_done_irqEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_311", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_312", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_313", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_314", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_315", "__ZN16SX1276_LoRaRadio6randomEv__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_157", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_153", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_154", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_156", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_155", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_152", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_297", "__ZN16SX1276_LoRaRadioD2Ev__async_cb", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_85", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_79", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_84", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_80", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_83", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_81", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_82", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_91", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_90", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_89", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_88", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_87", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_86", "__ZN16SX1276_LoRaRadioD0Ev__async_cb", "__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_369", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_370", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_371", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_372", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb", "__ZN16SX1276_LoRaRadio11tx_done_irqEv", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_390", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_391", "__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_275", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_274", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_273", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb_344", "__ZN4mbed11InterruptInD0Ev__async_cb", "__ZN4mbed11InterruptInD0Ev__async_cb_320", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_201", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_224", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_225", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_226", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_227", "__ZN4mbed7TimeoutD2Ev__async_cb", "__ZN4mbed7TimeoutD2Ev__async_cb_259", "__ZN4mbed7TimeoutD0Ev__async_cb", "__ZN4mbed7TimeoutD0Ev__async_cb_161", "__ZN4mbed7Timeout7handlerEv__async_cb", "__ZN4mbed7Timeout7handlerEv__async_cb_176", "__ZN4mbed7Timeout7handlerEv__async_cb_174", "__ZN4mbed7Timeout7handlerEv__async_cb_175", "__ZN4mbed5TimerC2Ev__async_cb", "__ZN4mbed5Timer5startEv__async_cb", "__ZN4mbed5Timer7read_msEv__async_cb", "__ZN4mbed10TimerEventD2Ev__async_cb", "__ZN4mbed10TimerEvent3irqEj", "__ZN4mbed10TimerEventC2Ev__async_cb", "__ZN4mbed10TimerEvent3irqEj__async_cb", "__ZN6events10EventQueue8dispatchEi__async_cb", "__ZN6events10EventQueue6cancelEi__async_cb", "_equeue_alloc__async_cb", "_equeue_dealloc__async_cb", "_equeue_post__async_cb", "_equeue_enqueue__async_cb", "_equeue_cancel__async_cb", "_equeue_dispatch__async_cb", "_equeue_dispatch__async_cb_281", "_equeue_dispatch__async_cb_279", "_equeue_dispatch__async_cb_280", "_equeue_dispatch__async_cb_282", "_mbed_trace_default_print__async_cb", "_mbed_tracef__async_cb", "_mbed_vtracef__async_cb", "_mbed_vtracef__async_cb_42", "_mbed_vtracef__async_cb_32", "_mbed_vtracef__async_cb_33", "_mbed_vtracef__async_cb_34", "_mbed_vtracef__async_cb_41", "_mbed_vtracef__async_cb_35", "_mbed_vtracef__async_cb_40", "_mbed_vtracef__async_cb_36", "_mbed_vtracef__async_cb_37", "_mbed_vtracef__async_cb_38", "_mbed_vtracef__async_cb_39", "__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE__async_cb", "__ZN16LoRaWANInterface7connectEv__async_cb", "__ZN16LoRaWANInterface7connectERK15lorawan_connect__async_cb", "__ZN16LoRaWANInterface10disconnectEv__async_cb", "__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan__async_cb", "__ZN16LoRaWANInterface19remove_channel_planEv__async_cb", "__ZN16LoRaWANInterface14remove_channelEh__async_cb", "__ZN16LoRaWANInterface4sendEhPKhti__async_cb", "__ZN16LoRaWANInterface7receiveEhPhti__async_cb", "__ZN16LoRaWANInterface7receiveEPhtRhRi__async_cb", "__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t__async_cb", "__ZN16LoRaWANInterface16set_device_classE14device_class_t__async_cb", "__ZN16LoRaWANInterfaceD2Ev__async_cb", "__ZN16LoRaWANInterfaceD0Ev__async_cb", "__ZN12LoRaWANStackD2Ev__async_cb", "__ZN12LoRaWANStackD2Ev__async_cb_148", "__ZN12LoRaWANStackD2Ev__async_cb_149", "__ZN12LoRaWANStackD2Ev__async_cb_151", "__ZN12LoRaWANStackD2Ev__async_cb_150", "__ZN12radio_eventsD2Ev__async_cb", "__ZN12radio_eventsD2Ev__async_cb_165", "__ZN12radio_eventsD2Ev__async_cb_166", "__ZN12radio_eventsD2Ev__async_cb_167", "__ZN12radio_eventsD2Ev__async_cb_168", "__ZN12radio_eventsD2Ev__async_cb_169", "__ZN12radio_eventsD2Ev__async_cb_170", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb", "__ZN12LoRaWANStack20tx_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_131", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_132", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_133", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_134", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_135", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_136", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_137", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_138", "__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_139", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_140", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_141", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_142", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_143", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_144", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_145", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_146", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_147", "__ZN12LoRaWANStack20process_transmissionEv", "__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb_123", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_125", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_126", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_92", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_93", "__ZN12LoRaWANStack28process_transmission_timeoutEv", "__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb_96", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_1", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_2", "__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb", "__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_52", "__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_51", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_412", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_417", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_413", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_416", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_414", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_415", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb_377", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb__async_cb", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_366", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_365", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_367", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_364", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_368", "__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_319", "__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_318", "__ZN12LoRaWANStack26process_status_check_stateEv__async_cb", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_307", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_300", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_310", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_301", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_306", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_302", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_309", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_303", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_305", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_304", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_308", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_328", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_321", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_331", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_322", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_327", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_323", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_330", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_324", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_326", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_325", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_329", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_289", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_294", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_290", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_293", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_291", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_292", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_288", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb", "__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb_272", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_278", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_277", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_276", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_241", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa__async_cb", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_197", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_200", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_199", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_198", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_196", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_177", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_182", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_178", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_181", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_179", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_180", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb_124", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_120", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_118", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_122", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_119", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_121", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_98", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_97", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_99", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_72", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_77", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_73", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_76", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_74", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_75", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb_56", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb_55", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb_57", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_419", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv__async_cb", "__ZN12LoRaWANStack20process_transmissionEv__async_cb", "__ZN12LoRaWANStack20process_transmissionEv__async_cb_376", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb", "__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_358", "__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb", "__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_357", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_347", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_346", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_348", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_345", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_349", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_335", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_336", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_337", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_338", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_339", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_340", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_342", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_341", "__ZN12LoRaWANStack7connectEv__async_cb", "__ZN12LoRaWANStack7connectERK15lorawan_connect__async_cb", "__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb", "__ZN12LoRaWANStack16remove_a_channelEh__async_cb", "__ZN12LoRaWANStack17drop_channel_listEv__async_cb", "__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb_283", "__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb", "__ZN12LoRaWANStack9handle_rxEPhtRhRib__async_cb", "__ZN12LoRaWANStack8shutdownEv__async_cb", "__ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb", "__ZN7LoRaMacD2Ev__async_cb", "__ZN7LoRaMacD2Ev__async_cb_350", "__ZN7LoRaMacD2Ev__async_cb_351", "__ZN7LoRaMacD2Ev__async_cb_352", "__ZN7LoRaMacD2Ev__async_cb_353", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_23", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_25", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_24", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_22", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_21", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_20", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb", "__ZN7LoRaMac15open_rx2_windowEv__async_cb_54", "__ZN7LoRaMac15open_rx2_windowEv__async_cb_53", "__ZN7LoRaMac15open_rx2_windowEv__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_94", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_95", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_116", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_115", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_114", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb", "__ZN7LoRaMac21handle_retransmissionEv__async_cb", "__ZN7LoRaMac21handle_retransmissionEv__async_cb_130", "__ZN7LoRaMac21handle_retransmissionEv__async_cb_129", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_160", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_158", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_159", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb", "__ZN7LoRaMac11schedule_txEv__async_cb", "__ZN7LoRaMac11schedule_txEv__async_cb_173", "__ZN7LoRaMac11schedule_txEv__async_cb_172", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_195", "__ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1___async_cb", "__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_223", "__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_233", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_240", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_232", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_239", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_231", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_238", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_230", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_237", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_229", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_228", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_236", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_235", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_234", "__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb", "__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_243", "__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_242", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_256", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_255", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_254", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_252", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_250", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_251", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_253", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_257", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_249", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_271", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_270", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_269", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_268", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_267", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_266", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_284", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_287", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_286", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_285", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb", "__ZN7LoRaMac24continue_joining_processEv__async_cb", "__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb", "__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb_296", "__ZN7LoRaMac15open_rx1_windowEv__async_cb_334", "__ZN7LoRaMac15open_rx1_windowEv__async_cb_332", "__ZN7LoRaMac15open_rx1_windowEv__async_cb_333", "__ZN7LoRaMac15open_rx1_windowEv__async_cb", "__ZN7LoRaMac18prepare_ongoing_txEhPKhthh__async_cb", "__ZN7LoRaMac24get_max_possible_tx_sizeEh__async_cb", "__ZN7LoRaMac15send_ongoing_txEv__async_cb", "__ZN7LoRaMac15send_ongoing_txEv__async_cb_418", "__ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_405", "__ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_404", "__ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_407", "__ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_406", "__ZN7LoRaMac16set_device_classERK14device_class_t__async_cb", "__ZN7LoRaMac4joinEb__async_cb", "__ZN7LoRaMac4joinEb__async_cb_30", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_107", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_109", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_110", "__ZN7LoRaMac23on_backoff_timer_expiryEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_106", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb", "__ZN7LoRaMac15open_rx1_windowEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_105", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_100", "__ZN7LoRaMac15open_rx2_windowEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_104", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_101", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_103", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_102", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_108", "__ZN7LoRaMac10disconnectEv__async_cb_71", "__ZN7LoRaMac10disconnectEv__async_cb_70", "__ZN7LoRaMac10disconnectEv__async_cb_69", "__ZN7LoRaMac10disconnectEv__async_cb_68", "__ZN7LoRaMac10disconnectEv__async_cb", "__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb", "__ZN7LoRaMac19remove_channel_planEv__async_cb", "__ZN7LoRaMac21remove_single_channelEh__async_cb", "__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_258", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_247", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_359", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_360", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_361", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_362", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_363", "__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb", "__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_410", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_397", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_396", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_394", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_395", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_398", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_28", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_27", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_26", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_29", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_127", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_128", "__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb", "__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_162", "__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_163", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_183", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_184", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_185", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_186", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_187", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_188", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_189", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_190", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_260", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_261", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_262", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_263", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_264", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_265", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb", "__ZN7LoRaPHY18dl_channel_requestEhj__async_cb", "__ZN7LoRaPHY18dl_channel_requestEhj__async_cb_295", "__ZN7LoRaPHY11add_channelEPK16channel_params_th__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_316", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_317", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_408", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_409", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_392", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_393", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_384", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_385", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_111", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_112", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_113", "__ZN7LoRaPHY13get_radio_rngEv__async_cb", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_66", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_67", "__ZN7LoRaPHY11handle_sendEPhh__async_cb", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_64", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_65", "__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_387", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_402", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_399", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_401", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_400", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_403", "__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb", "_mbedtls_ccm_setkey__async_cb_50", "_mbedtls_ccm_setkey__async_cb_49", "_mbedtls_ccm_setkey__async_cb", "_mbedtls_ccm_free__async_cb", "_mbedtls_cipher_free__async_cb", "_mbedtls_cipher_setup__async_cb", "_mbedtls_cipher_setkey__async_cb", "_mbedtls_cipher_setkey__async_cb_171", "_mbedtls_cipher_update__async_cb", "_mbedtls_cipher_update__async_cb_194", "_mbedtls_cipher_update__async_cb_191", "_mbedtls_cipher_update__async_cb_192", "_mbedtls_cipher_update__async_cb_193", "_ccm_aes_setkey_wrap__async_cb", "_ccm_ctx_free__async_cb", "_gcm_aes_setkey_wrap__async_cb", "_gcm_ctx_free__async_cb", "_mbedtls_cipher_cmac_starts__async_cb", "_mbedtls_cipher_cmac_update__async_cb_383", "_mbedtls_cipher_cmac_update__async_cb_382", "_mbedtls_cipher_cmac_update__async_cb", "_mbedtls_cipher_cmac_finish__async_cb_421", "_mbedtls_cipher_cmac_finish__async_cb", "_mbedtls_gcm_setkey__async_cb_356", "_mbedtls_gcm_setkey__async_cb_355", "_mbedtls_gcm_setkey__async_cb_354", "_mbedtls_gcm_setkey__async_cb", "_mbedtls_gcm_update__async_cb", "_mbedtls_gcm_free__async_cb", "_ticker_set_handler__async_cb", "_initialize__async_cb", "_initialize__async_cb_58", "_initialize__async_cb_63", "_initialize__async_cb_62", "_initialize__async_cb_59", "_initialize__async_cb_60", "_initialize__async_cb_61", "_schedule_interrupt__async_cb", "_schedule_interrupt__async_cb_43", "_schedule_interrupt__async_cb_44", "_schedule_interrupt__async_cb_45", "_schedule_interrupt__async_cb_46", "_schedule_interrupt__async_cb_47", "_schedule_interrupt__async_cb_48", "_ticker_remove_event__async_cb", "_ticker_read_us__async_cb_78", "_ticker_read_us__async_cb", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_216", "_mbed_die__async_cb_215", "_mbed_die__async_cb_214", "_mbed_die__async_cb_213", "_mbed_die__async_cb_212", "_mbed_die__async_cb_211", "_mbed_die__async_cb_210", "_mbed_die__async_cb_209", "_mbed_die__async_cb_208", "_mbed_die__async_cb_207", "_mbed_die__async_cb_206", "_mbed_die__async_cb_205", "_mbed_die__async_cb_204", "_mbed_die__async_cb_203", "_mbed_die__async_cb_202", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_vfprintf__async_cb", "_mbed_error_vfprintf__async_cb_246", "_mbed_error_vfprintf__async_cb_245", "_handle_interrupt_in__async_cb", "_serial_putc__async_cb_299", "_serial_putc__async_cb", "__ZN4mbed6TickerD2Ev__async_cb", "__ZN4mbed6TickerD2Ev__async_cb_420", "__ZN4mbed6TickerD0Ev__async_cb", "__ZN4mbed6TickerD0Ev__async_cb_381", "__ZN4mbed6Ticker7handlerEv__async_cb", "_invoke_ticker__async_cb_373", "_invoke_ticker__async_cb", "_wait_ms__async_cb", "__GLOBAL__sub_I_main_cpp__async_cb", "_main__async_cb_11", "_main__async_cb_10", "_main__async_cb_9", "_main__async_cb_15", "__ZN6events5EventIFvvEE10event_dtorIPS1_EEvPNS2_5eventE", "_main__async_cb_14", "_main__async_cb", "_main__async_cb_3", "_main__async_cb_13", "__ZL18lora_event_handler11lora_events", "_main__async_cb_4", "_main__async_cb_5", "_main__async_cb_6", "_main__async_cb_8", "_main__async_cb_7", "_main__async_cb_12", "__ZL12send_messagev__async_cb", "__ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE__async_cb_248", "__ZN6events10EventQueue13function_dtorINS0_9context00IPFvvEEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context00IPFvvEEEEEvPv", "__ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE__async_cb", "__ZL18lora_event_handler11lora_events__async_cb_221", "__ZL18lora_event_handler11lora_events__async_cb_220", "__ZL18lora_event_handler11lora_events__async_cb_219", "__ZL18lora_event_handler11lora_events__async_cb_218", "__ZL18lora_event_handler11lora_events__async_cb", "__ZL18lora_event_handler11lora_events__async_cb_217", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb", "__ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv__async_cb_164", "__ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv__async_cb_343", "__ZN6events10EventQueue13function_callINS0_9context00IPFvvEEEEEvPv__async_cb", "_putc__async_cb_31", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_379", "_fflush__async_cb_378", "_fflush__async_cb_380", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_389", "_vfprintf__async_cb", "_snprintf__async_cb", "_vsnprintf__async_cb", "_sprintf__async_cb", "_vsprintf__async_cb", "_printf__async_cb", "_putchar__async_cb", "_fputc__async_cb_375", "_fputc__async_cb", "_puts__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_388", "_abort_message__async_cb", "_abort_message__async_cb_117", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_298", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_222", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_244", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_411", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_19", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_18", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_17", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_16", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_386", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb
var debug_table_vii = ["0", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events", "__ZN16SX1276_LoRaRadio7receiveEj", "__ZN16SX1276_LoRaRadio11set_channelEj", "__ZN16SX1276_LoRaRadio18set_public_networkEb", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvPKhtsaEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPvPKv", "__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb", "__ZN4mbed8CallbackIFvbEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveIN6events5EventIS1_EEEEvPvPKv", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event", "__ZN12LoRaWANStack25process_reception_timeoutEb"];
var debug_table_viii = ["0", "__ZN16SX1276_LoRaRadio4sendEPhh", "__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh", "__ZN7LoRaPHY13apply_cf_listEPKhh", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj", "_add_pkcs_padding", "0", "0"];
var debug_table_viiii = ["0", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat", "__ZN7LoRaPHY16set_last_tx_doneEhbj", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0"];
var debug_table_viiiii = ["0", "__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa", "__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa", "__ZN12LoRaWANStack17process_receptionEPKhtsa"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
var debug_table_viiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj"];
var debug_table_viiiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb"];
function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14) {
  try {
    Module["dynCall_viiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiiiiiiiiii": invoke_viiiiiiiiiiiiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "_emscripten_asm_const_iiiiiii": _emscripten_asm_const_iiiiiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_gettimeofday": _gettimeofday, "_llvm_ceil_f64": _llvm_ceil_f64, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_trap": _llvm_trap, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_cond_timedwait": _pthread_cond_timedwait, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_asm_const_iiiiii=env._emscripten_asm_const_iiiiii;
  var _emscripten_asm_const_iiiiiii=env._emscripten_asm_const_iiiiiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _gettimeofday=env._gettimeofday;
  var _llvm_ceil_f64=env._llvm_ceil_f64;
  var _llvm_floor_f64=env._llvm_floor_f64;
  var _llvm_trap=env._llvm_trap;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_cond_timedwait=env._pthread_cond_timedwait;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i = 0, $$0107$be = 0, $$0109129 = 0, $$1$lcssa = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $121 = 0, $132 = 0, $133 = 0, $14 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $211 = 0, $214 = 0, $219 = 0, $22 = 0, $220 = 0, $226 = 0, $230 = 0, $233 = 0, $24 = 0, $240 = 0, $241 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $337 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $4 = 0, $40 = 0, $403 = 0, $404 = 0, $418 = 0, $42 = 0, $439 = 0, $44 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $507 = 0, $511 = 0, $515 = 0, $52 = 0, $520 = 0, $521 = 0, $525 = 0, $529 = 0, $531 = 0, $533 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $604 = 0, $617 = 0, $62 = 0, $624 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $689 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15570
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15572
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15574
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15576
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15578
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15580
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15582
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15584
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15586
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15588
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15590
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 15592
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 15594
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 15596
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 15598
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 15600
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 15602
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 15604
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 15606
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 15608
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 15610
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 15612
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 15614
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 15616
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 15618
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 15620
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 15622
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 15624
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 15626
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 15628
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 15630
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 15632
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 15634
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 15636
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 15638
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 15640
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 15642
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 15644
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 15646
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 15648
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 15650
 $82 = HEAP8[$0 + 164 >> 0] | 0; //@line 15652
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 15654
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 15656
 $88 = HEAP8[$0 + 176 >> 0] | 0; //@line 15658
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 15660
 $92 = HEAP8[$0 + 184 >> 0] | 0; //@line 15662
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 15664
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 15666
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 15668
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 15670
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 15672
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 15674
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 15676
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 15678
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 15680
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 15682
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 15684
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 15686
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 15688
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 15690
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$30 >> 0] = HEAP8[$118 >> 0] | 0; //@line 15695
  HEAP8[$44 >> 0] = HEAP8[$28 >> 0] | 0; //@line 15697
  HEAP8[$52 >> 0] = HEAP8[$18 >> 0] | 0; //@line 15699
 }
 $211 = HEAP8[$10 >> 0] | 0; //@line 15701
 if (($211 & 255) > 4) {
  $div = ($211 & 255) / 5 | 0; //@line 15704
  $214 = 128 - (HEAPU8[$90 >> 0] | 0) | 0; //@line 15708
  $$0109129 = 0; //@line 15709
  $220 = HEAP8[$60 >> 0] | 0; //@line 15709
  while (1) {
   $219 = $220 & 255; //@line 15711
   if (($214 - $219 | 0) > 1) {
    $226 = $220 + 2 << 24 >> 24; //@line 15718
    HEAP8[$74 + 4 + $219 >> 0] = 3; //@line 15720
    HEAP8[$60 >> 0] = $226; //@line 15721
    HEAP8[($220 + 1 & 255) + ($74 + 4) >> 0] = $AsyncRetVal; //@line 15722
    HEAP8[$106 >> 0] = 1; //@line 15723
    $$0$i = 0; //@line 15724
    $689 = $226; //@line 15724
   } else {
    $$0$i = -1010; //@line 15726
    $689 = $220; //@line 15726
   }
   $$0109129 = $$0109129 + 1 << 24 >> 24; //@line 15728
   if (($$0109129 & 255) >= ($div & 255)) {
    $$1$lcssa = $$0$i; //@line 15733
    break;
   } else {
    $220 = $689; //@line 15731
   }
  }
 } else {
  $$1$lcssa = $86; //@line 15738
 }
 $$0$be = $78 + 255 + ($211 & 255) & 255; //@line 15744
 $$0107$be = $$1$lcssa; //@line 15744
 L13 : while (1) {
  if (($$0$be & 255) >= ($88 & 255)) {
   label = 38; //@line 15748
   break;
  }
  $121 = $$0$be + 1 << 24 >> 24; //@line 15752
  switch (HEAP8[$84 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 15757
    break L13;
    break;
   }
  case 5:
   {
    label = 17; //@line 15762
    break L13;
    break;
   }
  case 7:
   {
    label = 26; //@line 15767
    break L13;
    break;
   }
  case 9:
   {
    label = 32; //@line 15772
    break L13;
    break;
   }
  case 10:
   {
    label = 35; //@line 15777
    break L13;
    break;
   }
  case 2:
   {
    HEAP32[$48 >> 2] = 0; //@line 15782
    HEAP8[$64 >> 0] = HEAP8[$84 + ($121 & 255) >> 0] | 0; //@line 15787
    HEAP8[$58 >> 0] = HEAP8[$84 + ($$0$be + 2 & 255) >> 0] | 0; //@line 15792
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 15793
    continue L13;
    break;
   }
  case 4:
   {
    $230 = $$0$be + 2 << 24 >> 24; //@line 15798
    $233 = HEAP8[$84 + ($121 & 255) >> 0] | 0; //@line 15801
    HEAP8[$112 >> 0] = $233; //@line 15802
    HEAP16[$96 >> 1] = 1 << ($233 & 255); //@line 15806
    $240 = HEAP8[$60 >> 0] | 0; //@line 15810
    $241 = $240 & 255; //@line 15811
    if ((128 - (HEAPU8[$90 >> 0] | 0) | 0) <= ($241 | 0)) {
     $$0$be = $230; //@line 15814
     $$0107$be = -1010; //@line 15814
     continue L13;
    }
    HEAP8[$60 >> 0] = $240 + 1 << 24 >> 24; //@line 15819
    HEAP8[$74 + 4 + $241 >> 0] = 4; //@line 15820
    HEAP8[$106 >> 0] = 1; //@line 15821
    $$0$be = $230; //@line 15822
    $$0107$be = 0; //@line 15822
    continue L13;
    break;
   }
  case 6:
   {
    $337 = HEAP32[$70 >> 2] | 0; //@line 15827
    if ($337 | 0) {
     label = 21; //@line 15830
     break L13;
    }
    $403 = HEAP8[$60 >> 0] | 0; //@line 15836
    $404 = $403 & 255; //@line 15837
    if ((128 - (HEAPU8[$90 >> 0] | 0) - $404 | 0) <= 2) {
     $$0$be = $121; //@line 15841
     $$0107$be = -1010; //@line 15841
     continue L13;
    }
    HEAP8[$74 + 4 + $404 >> 0] = 6; //@line 15846
    HEAP8[($403 + 1 & 255) + ($74 + 4) >> 0] = -1; //@line 15850
    HEAP8[$60 >> 0] = $403 + 3 << 24 >> 24; //@line 15852
    HEAP8[($403 + 2 & 255) + ($74 + 4) >> 0] = $82; //@line 15855
    HEAP8[$106 >> 0] = 1; //@line 15856
    $$0$be = $121; //@line 15857
    $$0107$be = 0; //@line 15857
    continue L13;
    break;
   }
  case 8:
   {
    $507 = $$0$be + 2 << 24 >> 24; //@line 15862
    $511 = HEAP8[$84 + ($121 & 255) >> 0] & 15; //@line 15866
    $515 = ($511 + ($511 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 15871
    HEAP32[$38 >> 2] = $515; //@line 15872
    HEAP32[$6 >> 2] = $515 + 1e3; //@line 15874
    $520 = HEAP8[$60 >> 0] | 0; //@line 15878
    $521 = $520 & 255; //@line 15879
    if ((128 - (HEAPU8[$90 >> 0] | 0) | 0) <= ($521 | 0)) {
     $$0$be = $507; //@line 15882
     $$0107$be = -1010; //@line 15882
     continue L13;
    }
    HEAP8[$60 >> 0] = $520 + 1 << 24 >> 24; //@line 15887
    HEAP8[$74 + 4 + $521 >> 0] = 8; //@line 15888
    HEAP8[$42 >> 0] = 1; //@line 15889
    HEAP8[$106 >> 0] = 1; //@line 15890
    $$0$be = $507; //@line 15891
    $$0107$be = 0; //@line 15891
    continue L13;
    break;
   }
  default:
   {
    $$0$be = $121; //@line 15896
    $$0107$be = -1013; //@line 15896
    continue L13;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$118 >> 0] = 0; //@line 15902
  HEAP8[$28 >> 0] = 0; //@line 15903
  HEAP8[$18 >> 0] = 0; //@line 15904
  HEAP8[$10 >> 0] = 0; //@line 15905
  $132 = $121 & 255; //@line 15906
  $133 = $132 + -1 | 0; //@line 15907
  HEAP32[$72 >> 2] = $84 + $133; //@line 15909
  HEAP8[$104 >> 0] = $46 - $133; //@line 15912
  HEAP8[$110 >> 0] = HEAP8[$94 >> 0] | 0; //@line 15914
  HEAP8[$8 >> 0] = HEAP8[$16 >> 0] | 0; //@line 15916
  HEAP8[$20 >> 0] = HEAP8[$30 >> 0] | 0; //@line 15918
  HEAP8[$34 >> 0] = HEAP8[$44 >> 0] | 0; //@line 15920
  HEAP8[$68 >> 0] = HEAP8[$52 >> 0] | 0; //@line 15922
  $144 = HEAP32[(HEAP32[$76 >> 2] | 0) + 36 >> 2] | 0; //@line 15925
  $ReallocAsyncCtx = _emscripten_realloc_async_context(240) | 0; //@line 15926
  $145 = FUNCTION_TABLE_iiiiiii[$144 & 3]($62, $114, $118, $28, $18, $10) | 0; //@line 15927
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 15930
   $146 = $ReallocAsyncCtx + 4 | 0; //@line 15931
   HEAP32[$146 >> 2] = $2; //@line 15932
   $147 = $ReallocAsyncCtx + 8 | 0; //@line 15933
   HEAP32[$147 >> 2] = $4; //@line 15934
   $148 = $ReallocAsyncCtx + 12 | 0; //@line 15935
   HEAP32[$148 >> 2] = $6; //@line 15936
   $149 = $ReallocAsyncCtx + 16 | 0; //@line 15937
   HEAP32[$149 >> 2] = $8; //@line 15938
   $150 = $ReallocAsyncCtx + 20 | 0; //@line 15939
   HEAP32[$150 >> 2] = $10; //@line 15940
   $151 = $ReallocAsyncCtx + 24 | 0; //@line 15941
   HEAP32[$151 >> 2] = $12; //@line 15942
   $152 = $ReallocAsyncCtx + 28 | 0; //@line 15943
   HEAP32[$152 >> 2] = $14; //@line 15944
   $153 = $ReallocAsyncCtx + 32 | 0; //@line 15945
   HEAP32[$153 >> 2] = $16; //@line 15946
   $154 = $ReallocAsyncCtx + 36 | 0; //@line 15947
   HEAP32[$154 >> 2] = $18; //@line 15948
   $155 = $ReallocAsyncCtx + 40 | 0; //@line 15949
   HEAP32[$155 >> 2] = $20; //@line 15950
   $156 = $ReallocAsyncCtx + 44 | 0; //@line 15951
   HEAP32[$156 >> 2] = $22; //@line 15952
   $157 = $ReallocAsyncCtx + 48 | 0; //@line 15953
   HEAP32[$157 >> 2] = $24; //@line 15954
   $158 = $ReallocAsyncCtx + 52 | 0; //@line 15955
   HEAP32[$158 >> 2] = $26; //@line 15956
   $159 = $ReallocAsyncCtx + 56 | 0; //@line 15957
   HEAP32[$159 >> 2] = $28; //@line 15958
   $160 = $ReallocAsyncCtx + 60 | 0; //@line 15959
   HEAP32[$160 >> 2] = $30; //@line 15960
   $161 = $ReallocAsyncCtx + 64 | 0; //@line 15961
   HEAP32[$161 >> 2] = $32; //@line 15962
   $162 = $ReallocAsyncCtx + 68 | 0; //@line 15963
   HEAP32[$162 >> 2] = $34; //@line 15964
   $163 = $ReallocAsyncCtx + 72 | 0; //@line 15965
   HEAP32[$163 >> 2] = $36; //@line 15966
   $164 = $ReallocAsyncCtx + 76 | 0; //@line 15967
   HEAP32[$164 >> 2] = $38; //@line 15968
   $165 = $ReallocAsyncCtx + 80 | 0; //@line 15969
   HEAP32[$165 >> 2] = $40; //@line 15970
   $166 = $ReallocAsyncCtx + 84 | 0; //@line 15971
   HEAP32[$166 >> 2] = $42; //@line 15972
   $167 = $ReallocAsyncCtx + 88 | 0; //@line 15973
   HEAP32[$167 >> 2] = $44; //@line 15974
   $168 = $ReallocAsyncCtx + 92 | 0; //@line 15975
   HEAP32[$168 >> 2] = $46; //@line 15976
   $169 = $ReallocAsyncCtx + 96 | 0; //@line 15977
   HEAP32[$169 >> 2] = $48; //@line 15978
   $170 = $ReallocAsyncCtx + 100 | 0; //@line 15979
   HEAP32[$170 >> 2] = $50; //@line 15980
   $171 = $ReallocAsyncCtx + 104 | 0; //@line 15981
   HEAP32[$171 >> 2] = $52; //@line 15982
   $172 = $ReallocAsyncCtx + 108 | 0; //@line 15983
   HEAP32[$172 >> 2] = $54; //@line 15984
   $173 = $ReallocAsyncCtx + 112 | 0; //@line 15985
   HEAP32[$173 >> 2] = $56; //@line 15986
   $174 = $ReallocAsyncCtx + 116 | 0; //@line 15987
   HEAP32[$174 >> 2] = $58; //@line 15988
   $175 = $ReallocAsyncCtx + 120 | 0; //@line 15989
   HEAP32[$175 >> 2] = $60; //@line 15990
   $176 = $ReallocAsyncCtx + 124 | 0; //@line 15991
   HEAP32[$176 >> 2] = $62; //@line 15992
   $177 = $ReallocAsyncCtx + 128 | 0; //@line 15993
   HEAP32[$177 >> 2] = $64; //@line 15994
   $178 = $ReallocAsyncCtx + 132 | 0; //@line 15995
   HEAP32[$178 >> 2] = $66; //@line 15996
   $179 = $ReallocAsyncCtx + 136 | 0; //@line 15997
   HEAP32[$179 >> 2] = $68; //@line 15998
   $180 = $ReallocAsyncCtx + 140 | 0; //@line 15999
   HEAP32[$180 >> 2] = $70; //@line 16000
   $181 = $ReallocAsyncCtx + 144 | 0; //@line 16001
   HEAP32[$181 >> 2] = $72; //@line 16002
   $182 = $ReallocAsyncCtx + 148 | 0; //@line 16003
   HEAP32[$182 >> 2] = $74; //@line 16004
   $183 = $ReallocAsyncCtx + 152 | 0; //@line 16005
   HEAP32[$183 >> 2] = $76; //@line 16006
   $184 = $ReallocAsyncCtx + 156 | 0; //@line 16007
   HEAP32[$184 >> 2] = $132; //@line 16008
   $185 = $ReallocAsyncCtx + 160 | 0; //@line 16009
   HEAP32[$185 >> 2] = $80; //@line 16010
   $186 = $ReallocAsyncCtx + 164 | 0; //@line 16011
   HEAP8[$186 >> 0] = $82; //@line 16012
   $187 = $ReallocAsyncCtx + 168 | 0; //@line 16013
   HEAP32[$187 >> 2] = $84; //@line 16014
   $188 = $ReallocAsyncCtx + 172 | 0; //@line 16015
   HEAP32[$188 >> 2] = $$0107$be; //@line 16016
   $189 = $ReallocAsyncCtx + 176 | 0; //@line 16017
   HEAP8[$189 >> 0] = $88; //@line 16018
   $190 = $ReallocAsyncCtx + 180 | 0; //@line 16019
   HEAP32[$190 >> 2] = $90; //@line 16020
   $191 = $ReallocAsyncCtx + 184 | 0; //@line 16021
   HEAP8[$191 >> 0] = $92; //@line 16022
   $192 = $ReallocAsyncCtx + 188 | 0; //@line 16023
   HEAP32[$192 >> 2] = $94; //@line 16024
   $193 = $ReallocAsyncCtx + 192 | 0; //@line 16025
   HEAP32[$193 >> 2] = $96; //@line 16026
   $194 = $ReallocAsyncCtx + 196 | 0; //@line 16027
   HEAP32[$194 >> 2] = $98; //@line 16028
   $195 = $ReallocAsyncCtx + 200 | 0; //@line 16029
   HEAP32[$195 >> 2] = $100; //@line 16030
   $196 = $ReallocAsyncCtx + 204 | 0; //@line 16031
   HEAP32[$196 >> 2] = $102; //@line 16032
   $197 = $ReallocAsyncCtx + 208 | 0; //@line 16033
   HEAP32[$197 >> 2] = $104; //@line 16034
   $198 = $ReallocAsyncCtx + 212 | 0; //@line 16035
   HEAP32[$198 >> 2] = $106; //@line 16036
   $199 = $ReallocAsyncCtx + 216 | 0; //@line 16037
   HEAP32[$199 >> 2] = $108; //@line 16038
   $200 = $ReallocAsyncCtx + 220 | 0; //@line 16039
   HEAP32[$200 >> 2] = $110; //@line 16040
   $201 = $ReallocAsyncCtx + 224 | 0; //@line 16041
   HEAP32[$201 >> 2] = $112; //@line 16042
   $202 = $ReallocAsyncCtx + 228 | 0; //@line 16043
   HEAP32[$202 >> 2] = $114; //@line 16044
   $203 = $ReallocAsyncCtx + 232 | 0; //@line 16045
   HEAP32[$203 >> 2] = $116; //@line 16046
   $204 = $ReallocAsyncCtx + 236 | 0; //@line 16047
   HEAP32[$204 >> 2] = $118; //@line 16048
   sp = STACKTOP; //@line 16049
   return;
  }
  HEAP8[___async_retval >> 0] = $145; //@line 16053
  ___async_unwind = 0; //@line 16054
  HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 16055
  $146 = $ReallocAsyncCtx + 4 | 0; //@line 16056
  HEAP32[$146 >> 2] = $2; //@line 16057
  $147 = $ReallocAsyncCtx + 8 | 0; //@line 16058
  HEAP32[$147 >> 2] = $4; //@line 16059
  $148 = $ReallocAsyncCtx + 12 | 0; //@line 16060
  HEAP32[$148 >> 2] = $6; //@line 16061
  $149 = $ReallocAsyncCtx + 16 | 0; //@line 16062
  HEAP32[$149 >> 2] = $8; //@line 16063
  $150 = $ReallocAsyncCtx + 20 | 0; //@line 16064
  HEAP32[$150 >> 2] = $10; //@line 16065
  $151 = $ReallocAsyncCtx + 24 | 0; //@line 16066
  HEAP32[$151 >> 2] = $12; //@line 16067
  $152 = $ReallocAsyncCtx + 28 | 0; //@line 16068
  HEAP32[$152 >> 2] = $14; //@line 16069
  $153 = $ReallocAsyncCtx + 32 | 0; //@line 16070
  HEAP32[$153 >> 2] = $16; //@line 16071
  $154 = $ReallocAsyncCtx + 36 | 0; //@line 16072
  HEAP32[$154 >> 2] = $18; //@line 16073
  $155 = $ReallocAsyncCtx + 40 | 0; //@line 16074
  HEAP32[$155 >> 2] = $20; //@line 16075
  $156 = $ReallocAsyncCtx + 44 | 0; //@line 16076
  HEAP32[$156 >> 2] = $22; //@line 16077
  $157 = $ReallocAsyncCtx + 48 | 0; //@line 16078
  HEAP32[$157 >> 2] = $24; //@line 16079
  $158 = $ReallocAsyncCtx + 52 | 0; //@line 16080
  HEAP32[$158 >> 2] = $26; //@line 16081
  $159 = $ReallocAsyncCtx + 56 | 0; //@line 16082
  HEAP32[$159 >> 2] = $28; //@line 16083
  $160 = $ReallocAsyncCtx + 60 | 0; //@line 16084
  HEAP32[$160 >> 2] = $30; //@line 16085
  $161 = $ReallocAsyncCtx + 64 | 0; //@line 16086
  HEAP32[$161 >> 2] = $32; //@line 16087
  $162 = $ReallocAsyncCtx + 68 | 0; //@line 16088
  HEAP32[$162 >> 2] = $34; //@line 16089
  $163 = $ReallocAsyncCtx + 72 | 0; //@line 16090
  HEAP32[$163 >> 2] = $36; //@line 16091
  $164 = $ReallocAsyncCtx + 76 | 0; //@line 16092
  HEAP32[$164 >> 2] = $38; //@line 16093
  $165 = $ReallocAsyncCtx + 80 | 0; //@line 16094
  HEAP32[$165 >> 2] = $40; //@line 16095
  $166 = $ReallocAsyncCtx + 84 | 0; //@line 16096
  HEAP32[$166 >> 2] = $42; //@line 16097
  $167 = $ReallocAsyncCtx + 88 | 0; //@line 16098
  HEAP32[$167 >> 2] = $44; //@line 16099
  $168 = $ReallocAsyncCtx + 92 | 0; //@line 16100
  HEAP32[$168 >> 2] = $46; //@line 16101
  $169 = $ReallocAsyncCtx + 96 | 0; //@line 16102
  HEAP32[$169 >> 2] = $48; //@line 16103
  $170 = $ReallocAsyncCtx + 100 | 0; //@line 16104
  HEAP32[$170 >> 2] = $50; //@line 16105
  $171 = $ReallocAsyncCtx + 104 | 0; //@line 16106
  HEAP32[$171 >> 2] = $52; //@line 16107
  $172 = $ReallocAsyncCtx + 108 | 0; //@line 16108
  HEAP32[$172 >> 2] = $54; //@line 16109
  $173 = $ReallocAsyncCtx + 112 | 0; //@line 16110
  HEAP32[$173 >> 2] = $56; //@line 16111
  $174 = $ReallocAsyncCtx + 116 | 0; //@line 16112
  HEAP32[$174 >> 2] = $58; //@line 16113
  $175 = $ReallocAsyncCtx + 120 | 0; //@line 16114
  HEAP32[$175 >> 2] = $60; //@line 16115
  $176 = $ReallocAsyncCtx + 124 | 0; //@line 16116
  HEAP32[$176 >> 2] = $62; //@line 16117
  $177 = $ReallocAsyncCtx + 128 | 0; //@line 16118
  HEAP32[$177 >> 2] = $64; //@line 16119
  $178 = $ReallocAsyncCtx + 132 | 0; //@line 16120
  HEAP32[$178 >> 2] = $66; //@line 16121
  $179 = $ReallocAsyncCtx + 136 | 0; //@line 16122
  HEAP32[$179 >> 2] = $68; //@line 16123
  $180 = $ReallocAsyncCtx + 140 | 0; //@line 16124
  HEAP32[$180 >> 2] = $70; //@line 16125
  $181 = $ReallocAsyncCtx + 144 | 0; //@line 16126
  HEAP32[$181 >> 2] = $72; //@line 16127
  $182 = $ReallocAsyncCtx + 148 | 0; //@line 16128
  HEAP32[$182 >> 2] = $74; //@line 16129
  $183 = $ReallocAsyncCtx + 152 | 0; //@line 16130
  HEAP32[$183 >> 2] = $76; //@line 16131
  $184 = $ReallocAsyncCtx + 156 | 0; //@line 16132
  HEAP32[$184 >> 2] = $132; //@line 16133
  $185 = $ReallocAsyncCtx + 160 | 0; //@line 16134
  HEAP32[$185 >> 2] = $80; //@line 16135
  $186 = $ReallocAsyncCtx + 164 | 0; //@line 16136
  HEAP8[$186 >> 0] = $82; //@line 16137
  $187 = $ReallocAsyncCtx + 168 | 0; //@line 16138
  HEAP32[$187 >> 2] = $84; //@line 16139
  $188 = $ReallocAsyncCtx + 172 | 0; //@line 16140
  HEAP32[$188 >> 2] = $$0107$be; //@line 16141
  $189 = $ReallocAsyncCtx + 176 | 0; //@line 16142
  HEAP8[$189 >> 0] = $88; //@line 16143
  $190 = $ReallocAsyncCtx + 180 | 0; //@line 16144
  HEAP32[$190 >> 2] = $90; //@line 16145
  $191 = $ReallocAsyncCtx + 184 | 0; //@line 16146
  HEAP8[$191 >> 0] = $92; //@line 16147
  $192 = $ReallocAsyncCtx + 188 | 0; //@line 16148
  HEAP32[$192 >> 2] = $94; //@line 16149
  $193 = $ReallocAsyncCtx + 192 | 0; //@line 16150
  HEAP32[$193 >> 2] = $96; //@line 16151
  $194 = $ReallocAsyncCtx + 196 | 0; //@line 16152
  HEAP32[$194 >> 2] = $98; //@line 16153
  $195 = $ReallocAsyncCtx + 200 | 0; //@line 16154
  HEAP32[$195 >> 2] = $100; //@line 16155
  $196 = $ReallocAsyncCtx + 204 | 0; //@line 16156
  HEAP32[$196 >> 2] = $102; //@line 16157
  $197 = $ReallocAsyncCtx + 208 | 0; //@line 16158
  HEAP32[$197 >> 2] = $104; //@line 16159
  $198 = $ReallocAsyncCtx + 212 | 0; //@line 16160
  HEAP32[$198 >> 2] = $106; //@line 16161
  $199 = $ReallocAsyncCtx + 216 | 0; //@line 16162
  HEAP32[$199 >> 2] = $108; //@line 16163
  $200 = $ReallocAsyncCtx + 220 | 0; //@line 16164
  HEAP32[$200 >> 2] = $110; //@line 16165
  $201 = $ReallocAsyncCtx + 224 | 0; //@line 16166
  HEAP32[$201 >> 2] = $112; //@line 16167
  $202 = $ReallocAsyncCtx + 228 | 0; //@line 16168
  HEAP32[$202 >> 2] = $114; //@line 16169
  $203 = $ReallocAsyncCtx + 232 | 0; //@line 16170
  HEAP32[$203 >> 2] = $116; //@line 16171
  $204 = $ReallocAsyncCtx + 236 | 0; //@line 16172
  HEAP32[$204 >> 2] = $118; //@line 16173
  sp = STACKTOP; //@line 16174
  return;
 } else if ((label | 0) == 17) {
  $247 = HEAP8[$84 + ($121 & 255) >> 0] | 0; //@line 16180
  HEAP8[$26 >> 0] = ($247 & 255) >>> 4 & 7; //@line 16185
  HEAP8[$102 >> 0] = $247 & 15; //@line 16187
  $266 = $$0$be + 5 << 24 >> 24; //@line 16201
  HEAP32[$32 >> 2] = (HEAPU8[$84 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$84 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$84 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 16209
  $276 = HEAP32[(HEAP32[$2 >> 2] | 0) + 40 >> 2] | 0; //@line 16212
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(236) | 0; //@line 16213
  $277 = FUNCTION_TABLE_iii[$276 & 15]($62, $12) | 0; //@line 16214
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 16217
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 16218
   HEAP32[$278 >> 2] = $2; //@line 16219
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 16220
   HEAP32[$279 >> 2] = $4; //@line 16221
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 16222
   HEAP32[$280 >> 2] = $6; //@line 16223
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 16224
   HEAP32[$281 >> 2] = $8; //@line 16225
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 16226
   HEAP32[$282 >> 2] = $10; //@line 16227
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 16228
   HEAP32[$283 >> 2] = $12; //@line 16229
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 16230
   HEAP32[$284 >> 2] = $14; //@line 16231
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 16232
   HEAP32[$285 >> 2] = $16; //@line 16233
   $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 16234
   HEAP32[$286 >> 2] = $18; //@line 16235
   $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 16236
   HEAP32[$287 >> 2] = $20; //@line 16237
   $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 16238
   HEAP32[$288 >> 2] = $22; //@line 16239
   $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 16240
   HEAP32[$289 >> 2] = $24; //@line 16241
   $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 16242
   HEAP32[$290 >> 2] = $26; //@line 16243
   $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 16244
   HEAP32[$291 >> 2] = $28; //@line 16245
   $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 16246
   HEAP32[$292 >> 2] = $30; //@line 16247
   $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 16248
   HEAP32[$293 >> 2] = $32; //@line 16249
   $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 16250
   HEAP32[$294 >> 2] = $34; //@line 16251
   $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 16252
   HEAP32[$295 >> 2] = $36; //@line 16253
   $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 16254
   HEAP32[$296 >> 2] = $38; //@line 16255
   $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 16256
   HEAP32[$297 >> 2] = $40; //@line 16257
   $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 16258
   HEAP32[$298 >> 2] = $42; //@line 16259
   $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 16260
   HEAP32[$299 >> 2] = $44; //@line 16261
   $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 16262
   HEAP32[$300 >> 2] = $46; //@line 16263
   $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 16264
   HEAP32[$301 >> 2] = $48; //@line 16265
   $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 16266
   HEAP32[$302 >> 2] = $50; //@line 16267
   $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 16268
   HEAP32[$303 >> 2] = $52; //@line 16269
   $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 16270
   HEAP32[$304 >> 2] = $54; //@line 16271
   $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 16272
   HEAP32[$305 >> 2] = $56; //@line 16273
   $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 16274
   HEAP32[$306 >> 2] = $58; //@line 16275
   $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 16276
   HEAP32[$307 >> 2] = $60; //@line 16277
   $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 16278
   HEAP32[$308 >> 2] = $62; //@line 16279
   $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 16280
   HEAP32[$309 >> 2] = $64; //@line 16281
   $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 16282
   HEAP32[$310 >> 2] = $66; //@line 16283
   $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 16284
   HEAP32[$311 >> 2] = $68; //@line 16285
   $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 16286
   HEAP32[$312 >> 2] = $70; //@line 16287
   $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 16288
   HEAP32[$313 >> 2] = $72; //@line 16289
   $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 16290
   HEAP32[$314 >> 2] = $74; //@line 16291
   $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 16292
   HEAP32[$315 >> 2] = $76; //@line 16293
   $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 16294
   HEAP32[$316 >> 2] = $80; //@line 16295
   $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 16296
   HEAP8[$317 >> 0] = $82; //@line 16297
   $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 16298
   HEAP32[$318 >> 2] = $84; //@line 16299
   $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 16300
   HEAP8[$319 >> 0] = $88; //@line 16301
   $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 16302
   HEAP32[$320 >> 2] = $90; //@line 16303
   $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 16304
   HEAP8[$321 >> 0] = $92; //@line 16305
   $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 16306
   HEAP32[$322 >> 2] = $94; //@line 16307
   $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 16308
   HEAP32[$323 >> 2] = $96; //@line 16309
   $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 16310
   HEAP32[$324 >> 2] = $98; //@line 16311
   $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 16312
   HEAP32[$325 >> 2] = $100; //@line 16313
   $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 16314
   HEAP32[$326 >> 2] = $102; //@line 16315
   $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 16316
   HEAP32[$327 >> 2] = $104; //@line 16317
   $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 16318
   HEAP32[$328 >> 2] = $106; //@line 16319
   $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 16320
   HEAP32[$329 >> 2] = $108; //@line 16321
   $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 16322
   HEAP32[$330 >> 2] = $110; //@line 16323
   $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 16324
   HEAP32[$331 >> 2] = $112; //@line 16325
   $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 16326
   HEAP32[$332 >> 2] = $114; //@line 16327
   $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 16328
   HEAP32[$333 >> 2] = $116; //@line 16329
   $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 16330
   HEAP8[$334 >> 0] = $266; //@line 16331
   $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 16332
   HEAP32[$335 >> 2] = $118; //@line 16333
   sp = STACKTOP; //@line 16334
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 16338
  ___async_unwind = 0; //@line 16339
  HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 16340
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 16341
  HEAP32[$278 >> 2] = $2; //@line 16342
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 16343
  HEAP32[$279 >> 2] = $4; //@line 16344
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 16345
  HEAP32[$280 >> 2] = $6; //@line 16346
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 16347
  HEAP32[$281 >> 2] = $8; //@line 16348
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 16349
  HEAP32[$282 >> 2] = $10; //@line 16350
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 16351
  HEAP32[$283 >> 2] = $12; //@line 16352
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 16353
  HEAP32[$284 >> 2] = $14; //@line 16354
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 16355
  HEAP32[$285 >> 2] = $16; //@line 16356
  $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 16357
  HEAP32[$286 >> 2] = $18; //@line 16358
  $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 16359
  HEAP32[$287 >> 2] = $20; //@line 16360
  $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 16361
  HEAP32[$288 >> 2] = $22; //@line 16362
  $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 16363
  HEAP32[$289 >> 2] = $24; //@line 16364
  $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 16365
  HEAP32[$290 >> 2] = $26; //@line 16366
  $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 16367
  HEAP32[$291 >> 2] = $28; //@line 16368
  $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 16369
  HEAP32[$292 >> 2] = $30; //@line 16370
  $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 16371
  HEAP32[$293 >> 2] = $32; //@line 16372
  $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 16373
  HEAP32[$294 >> 2] = $34; //@line 16374
  $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 16375
  HEAP32[$295 >> 2] = $36; //@line 16376
  $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 16377
  HEAP32[$296 >> 2] = $38; //@line 16378
  $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 16379
  HEAP32[$297 >> 2] = $40; //@line 16380
  $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 16381
  HEAP32[$298 >> 2] = $42; //@line 16382
  $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 16383
  HEAP32[$299 >> 2] = $44; //@line 16384
  $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 16385
  HEAP32[$300 >> 2] = $46; //@line 16386
  $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 16387
  HEAP32[$301 >> 2] = $48; //@line 16388
  $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 16389
  HEAP32[$302 >> 2] = $50; //@line 16390
  $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 16391
  HEAP32[$303 >> 2] = $52; //@line 16392
  $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 16393
  HEAP32[$304 >> 2] = $54; //@line 16394
  $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 16395
  HEAP32[$305 >> 2] = $56; //@line 16396
  $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 16397
  HEAP32[$306 >> 2] = $58; //@line 16398
  $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 16399
  HEAP32[$307 >> 2] = $60; //@line 16400
  $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 16401
  HEAP32[$308 >> 2] = $62; //@line 16402
  $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 16403
  HEAP32[$309 >> 2] = $64; //@line 16404
  $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 16405
  HEAP32[$310 >> 2] = $66; //@line 16406
  $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 16407
  HEAP32[$311 >> 2] = $68; //@line 16408
  $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 16409
  HEAP32[$312 >> 2] = $70; //@line 16410
  $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 16411
  HEAP32[$313 >> 2] = $72; //@line 16412
  $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 16413
  HEAP32[$314 >> 2] = $74; //@line 16414
  $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 16415
  HEAP32[$315 >> 2] = $76; //@line 16416
  $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 16417
  HEAP32[$316 >> 2] = $80; //@line 16418
  $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 16419
  HEAP8[$317 >> 0] = $82; //@line 16420
  $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 16421
  HEAP32[$318 >> 2] = $84; //@line 16422
  $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 16423
  HEAP8[$319 >> 0] = $88; //@line 16424
  $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 16425
  HEAP32[$320 >> 2] = $90; //@line 16426
  $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 16427
  HEAP8[$321 >> 0] = $92; //@line 16428
  $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 16429
  HEAP32[$322 >> 2] = $94; //@line 16430
  $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 16431
  HEAP32[$323 >> 2] = $96; //@line 16432
  $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 16433
  HEAP32[$324 >> 2] = $98; //@line 16434
  $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 16435
  HEAP32[$325 >> 2] = $100; //@line 16436
  $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 16437
  HEAP32[$326 >> 2] = $102; //@line 16438
  $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 16439
  HEAP32[$327 >> 2] = $104; //@line 16440
  $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 16441
  HEAP32[$328 >> 2] = $106; //@line 16442
  $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 16443
  HEAP32[$329 >> 2] = $108; //@line 16444
  $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 16445
  HEAP32[$330 >> 2] = $110; //@line 16446
  $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 16447
  HEAP32[$331 >> 2] = $112; //@line 16448
  $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 16449
  HEAP32[$332 >> 2] = $114; //@line 16450
  $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 16451
  HEAP32[$333 >> 2] = $116; //@line 16452
  $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 16453
  HEAP8[$334 >> 0] = $266; //@line 16454
  $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 16455
  HEAP32[$335 >> 2] = $118; //@line 16456
  sp = STACKTOP; //@line 16457
  return;
 } else if ((label | 0) == 21) {
  $339 = HEAP32[$337 >> 2] | 0; //@line 16461
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(236) | 0; //@line 16462
  $340 = FUNCTION_TABLE_ii[$339 & 15]($66) | 0; //@line 16463
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 16466
   $341 = $ReallocAsyncCtx3 + 4 | 0; //@line 16467
   HEAP32[$341 >> 2] = $2; //@line 16468
   $342 = $ReallocAsyncCtx3 + 8 | 0; //@line 16469
   HEAP32[$342 >> 2] = $4; //@line 16470
   $343 = $ReallocAsyncCtx3 + 12 | 0; //@line 16471
   HEAP32[$343 >> 2] = $6; //@line 16472
   $344 = $ReallocAsyncCtx3 + 16 | 0; //@line 16473
   HEAP32[$344 >> 2] = $8; //@line 16474
   $345 = $ReallocAsyncCtx3 + 20 | 0; //@line 16475
   HEAP32[$345 >> 2] = $10; //@line 16476
   $346 = $ReallocAsyncCtx3 + 24 | 0; //@line 16477
   HEAP32[$346 >> 2] = $12; //@line 16478
   $347 = $ReallocAsyncCtx3 + 28 | 0; //@line 16479
   HEAP32[$347 >> 2] = $14; //@line 16480
   $348 = $ReallocAsyncCtx3 + 32 | 0; //@line 16481
   HEAP32[$348 >> 2] = $16; //@line 16482
   $349 = $ReallocAsyncCtx3 + 36 | 0; //@line 16483
   HEAP32[$349 >> 2] = $18; //@line 16484
   $350 = $ReallocAsyncCtx3 + 40 | 0; //@line 16485
   HEAP32[$350 >> 2] = $20; //@line 16486
   $351 = $ReallocAsyncCtx3 + 44 | 0; //@line 16487
   HEAP32[$351 >> 2] = $22; //@line 16488
   $352 = $ReallocAsyncCtx3 + 48 | 0; //@line 16489
   HEAP32[$352 >> 2] = $24; //@line 16490
   $353 = $ReallocAsyncCtx3 + 52 | 0; //@line 16491
   HEAP32[$353 >> 2] = $26; //@line 16492
   $354 = $ReallocAsyncCtx3 + 56 | 0; //@line 16493
   HEAP32[$354 >> 2] = $28; //@line 16494
   $355 = $ReallocAsyncCtx3 + 60 | 0; //@line 16495
   HEAP32[$355 >> 2] = $30; //@line 16496
   $356 = $ReallocAsyncCtx3 + 64 | 0; //@line 16497
   HEAP32[$356 >> 2] = $32; //@line 16498
   $357 = $ReallocAsyncCtx3 + 68 | 0; //@line 16499
   HEAP32[$357 >> 2] = $34; //@line 16500
   $358 = $ReallocAsyncCtx3 + 72 | 0; //@line 16501
   HEAP32[$358 >> 2] = $36; //@line 16502
   $359 = $ReallocAsyncCtx3 + 76 | 0; //@line 16503
   HEAP32[$359 >> 2] = $38; //@line 16504
   $360 = $ReallocAsyncCtx3 + 80 | 0; //@line 16505
   HEAP32[$360 >> 2] = $40; //@line 16506
   $361 = $ReallocAsyncCtx3 + 84 | 0; //@line 16507
   HEAP32[$361 >> 2] = $42; //@line 16508
   $362 = $ReallocAsyncCtx3 + 88 | 0; //@line 16509
   HEAP32[$362 >> 2] = $44; //@line 16510
   $363 = $ReallocAsyncCtx3 + 92 | 0; //@line 16511
   HEAP32[$363 >> 2] = $46; //@line 16512
   $364 = $ReallocAsyncCtx3 + 96 | 0; //@line 16513
   HEAP32[$364 >> 2] = $48; //@line 16514
   $365 = $ReallocAsyncCtx3 + 100 | 0; //@line 16515
   HEAP32[$365 >> 2] = $50; //@line 16516
   $366 = $ReallocAsyncCtx3 + 104 | 0; //@line 16517
   HEAP32[$366 >> 2] = $52; //@line 16518
   $367 = $ReallocAsyncCtx3 + 108 | 0; //@line 16519
   HEAP32[$367 >> 2] = $54; //@line 16520
   $368 = $ReallocAsyncCtx3 + 112 | 0; //@line 16521
   HEAP32[$368 >> 2] = $56; //@line 16522
   $369 = $ReallocAsyncCtx3 + 116 | 0; //@line 16523
   HEAP32[$369 >> 2] = $58; //@line 16524
   $370 = $ReallocAsyncCtx3 + 120 | 0; //@line 16525
   HEAP32[$370 >> 2] = $60; //@line 16526
   $371 = $ReallocAsyncCtx3 + 124 | 0; //@line 16527
   HEAP32[$371 >> 2] = $62; //@line 16528
   $372 = $ReallocAsyncCtx3 + 128 | 0; //@line 16529
   HEAP32[$372 >> 2] = $64; //@line 16530
   $373 = $ReallocAsyncCtx3 + 132 | 0; //@line 16531
   HEAP32[$373 >> 2] = $66; //@line 16532
   $374 = $ReallocAsyncCtx3 + 136 | 0; //@line 16533
   HEAP32[$374 >> 2] = $68; //@line 16534
   $375 = $ReallocAsyncCtx3 + 140 | 0; //@line 16535
   HEAP32[$375 >> 2] = $70; //@line 16536
   $376 = $ReallocAsyncCtx3 + 144 | 0; //@line 16537
   HEAP32[$376 >> 2] = $72; //@line 16538
   $377 = $ReallocAsyncCtx3 + 148 | 0; //@line 16539
   HEAP32[$377 >> 2] = $74; //@line 16540
   $378 = $ReallocAsyncCtx3 + 152 | 0; //@line 16541
   HEAP32[$378 >> 2] = $76; //@line 16542
   $379 = $ReallocAsyncCtx3 + 156 | 0; //@line 16543
   HEAP32[$379 >> 2] = $80; //@line 16544
   $380 = $ReallocAsyncCtx3 + 160 | 0; //@line 16545
   HEAP8[$380 >> 0] = $82; //@line 16546
   $381 = $ReallocAsyncCtx3 + 164 | 0; //@line 16547
   HEAP32[$381 >> 2] = $84; //@line 16548
   $382 = $ReallocAsyncCtx3 + 168 | 0; //@line 16549
   HEAP8[$382 >> 0] = $88; //@line 16550
   $383 = $ReallocAsyncCtx3 + 172 | 0; //@line 16551
   HEAP32[$383 >> 2] = $90; //@line 16552
   $384 = $ReallocAsyncCtx3 + 176 | 0; //@line 16553
   HEAP8[$384 >> 0] = $92; //@line 16554
   $385 = $ReallocAsyncCtx3 + 180 | 0; //@line 16555
   HEAP32[$385 >> 2] = $94; //@line 16556
   $386 = $ReallocAsyncCtx3 + 184 | 0; //@line 16557
   HEAP32[$386 >> 2] = $96; //@line 16558
   $387 = $ReallocAsyncCtx3 + 188 | 0; //@line 16559
   HEAP32[$387 >> 2] = $98; //@line 16560
   $388 = $ReallocAsyncCtx3 + 192 | 0; //@line 16561
   HEAP32[$388 >> 2] = $100; //@line 16562
   $389 = $ReallocAsyncCtx3 + 196 | 0; //@line 16563
   HEAP32[$389 >> 2] = $102; //@line 16564
   $390 = $ReallocAsyncCtx3 + 200 | 0; //@line 16565
   HEAP32[$390 >> 2] = $104; //@line 16566
   $391 = $ReallocAsyncCtx3 + 204 | 0; //@line 16567
   HEAP32[$391 >> 2] = $106; //@line 16568
   $392 = $ReallocAsyncCtx3 + 208 | 0; //@line 16569
   HEAP8[$392 >> 0] = $121; //@line 16570
   $393 = $ReallocAsyncCtx3 + 212 | 0; //@line 16571
   HEAP32[$393 >> 2] = $108; //@line 16572
   $394 = $ReallocAsyncCtx3 + 216 | 0; //@line 16573
   HEAP32[$394 >> 2] = $110; //@line 16574
   $395 = $ReallocAsyncCtx3 + 220 | 0; //@line 16575
   HEAP32[$395 >> 2] = $112; //@line 16576
   $396 = $ReallocAsyncCtx3 + 224 | 0; //@line 16577
   HEAP32[$396 >> 2] = $114; //@line 16578
   $397 = $ReallocAsyncCtx3 + 228 | 0; //@line 16579
   HEAP32[$397 >> 2] = $116; //@line 16580
   $398 = $ReallocAsyncCtx3 + 232 | 0; //@line 16581
   HEAP32[$398 >> 2] = $118; //@line 16582
   sp = STACKTOP; //@line 16583
   return;
  }
  HEAP8[___async_retval >> 0] = $340; //@line 16587
  ___async_unwind = 0; //@line 16588
  HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 16589
  $341 = $ReallocAsyncCtx3 + 4 | 0; //@line 16590
  HEAP32[$341 >> 2] = $2; //@line 16591
  $342 = $ReallocAsyncCtx3 + 8 | 0; //@line 16592
  HEAP32[$342 >> 2] = $4; //@line 16593
  $343 = $ReallocAsyncCtx3 + 12 | 0; //@line 16594
  HEAP32[$343 >> 2] = $6; //@line 16595
  $344 = $ReallocAsyncCtx3 + 16 | 0; //@line 16596
  HEAP32[$344 >> 2] = $8; //@line 16597
  $345 = $ReallocAsyncCtx3 + 20 | 0; //@line 16598
  HEAP32[$345 >> 2] = $10; //@line 16599
  $346 = $ReallocAsyncCtx3 + 24 | 0; //@line 16600
  HEAP32[$346 >> 2] = $12; //@line 16601
  $347 = $ReallocAsyncCtx3 + 28 | 0; //@line 16602
  HEAP32[$347 >> 2] = $14; //@line 16603
  $348 = $ReallocAsyncCtx3 + 32 | 0; //@line 16604
  HEAP32[$348 >> 2] = $16; //@line 16605
  $349 = $ReallocAsyncCtx3 + 36 | 0; //@line 16606
  HEAP32[$349 >> 2] = $18; //@line 16607
  $350 = $ReallocAsyncCtx3 + 40 | 0; //@line 16608
  HEAP32[$350 >> 2] = $20; //@line 16609
  $351 = $ReallocAsyncCtx3 + 44 | 0; //@line 16610
  HEAP32[$351 >> 2] = $22; //@line 16611
  $352 = $ReallocAsyncCtx3 + 48 | 0; //@line 16612
  HEAP32[$352 >> 2] = $24; //@line 16613
  $353 = $ReallocAsyncCtx3 + 52 | 0; //@line 16614
  HEAP32[$353 >> 2] = $26; //@line 16615
  $354 = $ReallocAsyncCtx3 + 56 | 0; //@line 16616
  HEAP32[$354 >> 2] = $28; //@line 16617
  $355 = $ReallocAsyncCtx3 + 60 | 0; //@line 16618
  HEAP32[$355 >> 2] = $30; //@line 16619
  $356 = $ReallocAsyncCtx3 + 64 | 0; //@line 16620
  HEAP32[$356 >> 2] = $32; //@line 16621
  $357 = $ReallocAsyncCtx3 + 68 | 0; //@line 16622
  HEAP32[$357 >> 2] = $34; //@line 16623
  $358 = $ReallocAsyncCtx3 + 72 | 0; //@line 16624
  HEAP32[$358 >> 2] = $36; //@line 16625
  $359 = $ReallocAsyncCtx3 + 76 | 0; //@line 16626
  HEAP32[$359 >> 2] = $38; //@line 16627
  $360 = $ReallocAsyncCtx3 + 80 | 0; //@line 16628
  HEAP32[$360 >> 2] = $40; //@line 16629
  $361 = $ReallocAsyncCtx3 + 84 | 0; //@line 16630
  HEAP32[$361 >> 2] = $42; //@line 16631
  $362 = $ReallocAsyncCtx3 + 88 | 0; //@line 16632
  HEAP32[$362 >> 2] = $44; //@line 16633
  $363 = $ReallocAsyncCtx3 + 92 | 0; //@line 16634
  HEAP32[$363 >> 2] = $46; //@line 16635
  $364 = $ReallocAsyncCtx3 + 96 | 0; //@line 16636
  HEAP32[$364 >> 2] = $48; //@line 16637
  $365 = $ReallocAsyncCtx3 + 100 | 0; //@line 16638
  HEAP32[$365 >> 2] = $50; //@line 16639
  $366 = $ReallocAsyncCtx3 + 104 | 0; //@line 16640
  HEAP32[$366 >> 2] = $52; //@line 16641
  $367 = $ReallocAsyncCtx3 + 108 | 0; //@line 16642
  HEAP32[$367 >> 2] = $54; //@line 16643
  $368 = $ReallocAsyncCtx3 + 112 | 0; //@line 16644
  HEAP32[$368 >> 2] = $56; //@line 16645
  $369 = $ReallocAsyncCtx3 + 116 | 0; //@line 16646
  HEAP32[$369 >> 2] = $58; //@line 16647
  $370 = $ReallocAsyncCtx3 + 120 | 0; //@line 16648
  HEAP32[$370 >> 2] = $60; //@line 16649
  $371 = $ReallocAsyncCtx3 + 124 | 0; //@line 16650
  HEAP32[$371 >> 2] = $62; //@line 16651
  $372 = $ReallocAsyncCtx3 + 128 | 0; //@line 16652
  HEAP32[$372 >> 2] = $64; //@line 16653
  $373 = $ReallocAsyncCtx3 + 132 | 0; //@line 16654
  HEAP32[$373 >> 2] = $66; //@line 16655
  $374 = $ReallocAsyncCtx3 + 136 | 0; //@line 16656
  HEAP32[$374 >> 2] = $68; //@line 16657
  $375 = $ReallocAsyncCtx3 + 140 | 0; //@line 16658
  HEAP32[$375 >> 2] = $70; //@line 16659
  $376 = $ReallocAsyncCtx3 + 144 | 0; //@line 16660
  HEAP32[$376 >> 2] = $72; //@line 16661
  $377 = $ReallocAsyncCtx3 + 148 | 0; //@line 16662
  HEAP32[$377 >> 2] = $74; //@line 16663
  $378 = $ReallocAsyncCtx3 + 152 | 0; //@line 16664
  HEAP32[$378 >> 2] = $76; //@line 16665
  $379 = $ReallocAsyncCtx3 + 156 | 0; //@line 16666
  HEAP32[$379 >> 2] = $80; //@line 16667
  $380 = $ReallocAsyncCtx3 + 160 | 0; //@line 16668
  HEAP8[$380 >> 0] = $82; //@line 16669
  $381 = $ReallocAsyncCtx3 + 164 | 0; //@line 16670
  HEAP32[$381 >> 2] = $84; //@line 16671
  $382 = $ReallocAsyncCtx3 + 168 | 0; //@line 16672
  HEAP8[$382 >> 0] = $88; //@line 16673
  $383 = $ReallocAsyncCtx3 + 172 | 0; //@line 16674
  HEAP32[$383 >> 2] = $90; //@line 16675
  $384 = $ReallocAsyncCtx3 + 176 | 0; //@line 16676
  HEAP8[$384 >> 0] = $92; //@line 16677
  $385 = $ReallocAsyncCtx3 + 180 | 0; //@line 16678
  HEAP32[$385 >> 2] = $94; //@line 16679
  $386 = $ReallocAsyncCtx3 + 184 | 0; //@line 16680
  HEAP32[$386 >> 2] = $96; //@line 16681
  $387 = $ReallocAsyncCtx3 + 188 | 0; //@line 16682
  HEAP32[$387 >> 2] = $98; //@line 16683
  $388 = $ReallocAsyncCtx3 + 192 | 0; //@line 16684
  HEAP32[$388 >> 2] = $100; //@line 16685
  $389 = $ReallocAsyncCtx3 + 196 | 0; //@line 16686
  HEAP32[$389 >> 2] = $102; //@line 16687
  $390 = $ReallocAsyncCtx3 + 200 | 0; //@line 16688
  HEAP32[$390 >> 2] = $104; //@line 16689
  $391 = $ReallocAsyncCtx3 + 204 | 0; //@line 16690
  HEAP32[$391 >> 2] = $106; //@line 16691
  $392 = $ReallocAsyncCtx3 + 208 | 0; //@line 16692
  HEAP8[$392 >> 0] = $121; //@line 16693
  $393 = $ReallocAsyncCtx3 + 212 | 0; //@line 16694
  HEAP32[$393 >> 2] = $108; //@line 16695
  $394 = $ReallocAsyncCtx3 + 216 | 0; //@line 16696
  HEAP32[$394 >> 2] = $110; //@line 16697
  $395 = $ReallocAsyncCtx3 + 220 | 0; //@line 16698
  HEAP32[$395 >> 2] = $112; //@line 16699
  $396 = $ReallocAsyncCtx3 + 224 | 0; //@line 16700
  HEAP32[$396 >> 2] = $114; //@line 16701
  $397 = $ReallocAsyncCtx3 + 228 | 0; //@line 16702
  HEAP32[$397 >> 2] = $116; //@line 16703
  $398 = $ReallocAsyncCtx3 + 232 | 0; //@line 16704
  HEAP32[$398 >> 2] = $118; //@line 16705
  sp = STACKTOP; //@line 16706
  return;
 } else if ((label | 0) == 26) {
  $418 = HEAP8[$84 + ($121 & 255) >> 0] | 0; //@line 16713
  HEAP32[$116 >> 2] = (HEAPU8[$84 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$84 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$84 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 16734
  HEAP32[$98 >> 2] = 0; //@line 16735
  $439 = $$0$be + 6 << 24 >> 24; //@line 16736
  HEAP8[$100 >> 0] = HEAP8[$84 + ($$0$be + 5 & 255) >> 0] | 0; //@line 16740
  $445 = HEAP32[(HEAP32[$22 >> 2] | 0) + 8 >> 2] | 0; //@line 16743
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(236) | 0; //@line 16744
  $446 = FUNCTION_TABLE_iiii[$445 & 31]($62, $418, $4) | 0; //@line 16745
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 16748
   $447 = $ReallocAsyncCtx4 + 4 | 0; //@line 16749
   HEAP32[$447 >> 2] = $2; //@line 16750
   $448 = $ReallocAsyncCtx4 + 8 | 0; //@line 16751
   HEAP32[$448 >> 2] = $4; //@line 16752
   $449 = $ReallocAsyncCtx4 + 12 | 0; //@line 16753
   HEAP32[$449 >> 2] = $6; //@line 16754
   $450 = $ReallocAsyncCtx4 + 16 | 0; //@line 16755
   HEAP32[$450 >> 2] = $8; //@line 16756
   $451 = $ReallocAsyncCtx4 + 20 | 0; //@line 16757
   HEAP32[$451 >> 2] = $10; //@line 16758
   $452 = $ReallocAsyncCtx4 + 24 | 0; //@line 16759
   HEAP32[$452 >> 2] = $12; //@line 16760
   $453 = $ReallocAsyncCtx4 + 28 | 0; //@line 16761
   HEAP32[$453 >> 2] = $14; //@line 16762
   $454 = $ReallocAsyncCtx4 + 32 | 0; //@line 16763
   HEAP32[$454 >> 2] = $16; //@line 16764
   $455 = $ReallocAsyncCtx4 + 36 | 0; //@line 16765
   HEAP32[$455 >> 2] = $18; //@line 16766
   $456 = $ReallocAsyncCtx4 + 40 | 0; //@line 16767
   HEAP32[$456 >> 2] = $20; //@line 16768
   $457 = $ReallocAsyncCtx4 + 44 | 0; //@line 16769
   HEAP32[$457 >> 2] = $22; //@line 16770
   $458 = $ReallocAsyncCtx4 + 48 | 0; //@line 16771
   HEAP32[$458 >> 2] = $24; //@line 16772
   $459 = $ReallocAsyncCtx4 + 52 | 0; //@line 16773
   HEAP32[$459 >> 2] = $26; //@line 16774
   $460 = $ReallocAsyncCtx4 + 56 | 0; //@line 16775
   HEAP32[$460 >> 2] = $28; //@line 16776
   $461 = $ReallocAsyncCtx4 + 60 | 0; //@line 16777
   HEAP32[$461 >> 2] = $30; //@line 16778
   $462 = $ReallocAsyncCtx4 + 64 | 0; //@line 16779
   HEAP32[$462 >> 2] = $32; //@line 16780
   $463 = $ReallocAsyncCtx4 + 68 | 0; //@line 16781
   HEAP32[$463 >> 2] = $34; //@line 16782
   $464 = $ReallocAsyncCtx4 + 72 | 0; //@line 16783
   HEAP32[$464 >> 2] = $36; //@line 16784
   $465 = $ReallocAsyncCtx4 + 76 | 0; //@line 16785
   HEAP32[$465 >> 2] = $38; //@line 16786
   $466 = $ReallocAsyncCtx4 + 80 | 0; //@line 16787
   HEAP32[$466 >> 2] = $40; //@line 16788
   $467 = $ReallocAsyncCtx4 + 84 | 0; //@line 16789
   HEAP32[$467 >> 2] = $42; //@line 16790
   $468 = $ReallocAsyncCtx4 + 88 | 0; //@line 16791
   HEAP32[$468 >> 2] = $44; //@line 16792
   $469 = $ReallocAsyncCtx4 + 92 | 0; //@line 16793
   HEAP32[$469 >> 2] = $46; //@line 16794
   $470 = $ReallocAsyncCtx4 + 96 | 0; //@line 16795
   HEAP32[$470 >> 2] = $48; //@line 16796
   $471 = $ReallocAsyncCtx4 + 100 | 0; //@line 16797
   HEAP32[$471 >> 2] = $50; //@line 16798
   $472 = $ReallocAsyncCtx4 + 104 | 0; //@line 16799
   HEAP32[$472 >> 2] = $52; //@line 16800
   $473 = $ReallocAsyncCtx4 + 108 | 0; //@line 16801
   HEAP32[$473 >> 2] = $54; //@line 16802
   $474 = $ReallocAsyncCtx4 + 112 | 0; //@line 16803
   HEAP32[$474 >> 2] = $56; //@line 16804
   $475 = $ReallocAsyncCtx4 + 116 | 0; //@line 16805
   HEAP32[$475 >> 2] = $58; //@line 16806
   $476 = $ReallocAsyncCtx4 + 120 | 0; //@line 16807
   HEAP32[$476 >> 2] = $60; //@line 16808
   $477 = $ReallocAsyncCtx4 + 124 | 0; //@line 16809
   HEAP32[$477 >> 2] = $62; //@line 16810
   $478 = $ReallocAsyncCtx4 + 128 | 0; //@line 16811
   HEAP32[$478 >> 2] = $64; //@line 16812
   $479 = $ReallocAsyncCtx4 + 132 | 0; //@line 16813
   HEAP32[$479 >> 2] = $66; //@line 16814
   $480 = $ReallocAsyncCtx4 + 136 | 0; //@line 16815
   HEAP32[$480 >> 2] = $68; //@line 16816
   $481 = $ReallocAsyncCtx4 + 140 | 0; //@line 16817
   HEAP32[$481 >> 2] = $70; //@line 16818
   $482 = $ReallocAsyncCtx4 + 144 | 0; //@line 16819
   HEAP32[$482 >> 2] = $72; //@line 16820
   $483 = $ReallocAsyncCtx4 + 148 | 0; //@line 16821
   HEAP32[$483 >> 2] = $74; //@line 16822
   $484 = $ReallocAsyncCtx4 + 152 | 0; //@line 16823
   HEAP32[$484 >> 2] = $76; //@line 16824
   $485 = $ReallocAsyncCtx4 + 156 | 0; //@line 16825
   HEAP32[$485 >> 2] = $80; //@line 16826
   $486 = $ReallocAsyncCtx4 + 160 | 0; //@line 16827
   HEAP8[$486 >> 0] = $82; //@line 16828
   $487 = $ReallocAsyncCtx4 + 164 | 0; //@line 16829
   HEAP32[$487 >> 2] = $84; //@line 16830
   $488 = $ReallocAsyncCtx4 + 168 | 0; //@line 16831
   HEAP8[$488 >> 0] = $88; //@line 16832
   $489 = $ReallocAsyncCtx4 + 172 | 0; //@line 16833
   HEAP32[$489 >> 2] = $90; //@line 16834
   $490 = $ReallocAsyncCtx4 + 176 | 0; //@line 16835
   HEAP8[$490 >> 0] = $92; //@line 16836
   $491 = $ReallocAsyncCtx4 + 180 | 0; //@line 16837
   HEAP32[$491 >> 2] = $94; //@line 16838
   $492 = $ReallocAsyncCtx4 + 184 | 0; //@line 16839
   HEAP32[$492 >> 2] = $96; //@line 16840
   $493 = $ReallocAsyncCtx4 + 188 | 0; //@line 16841
   HEAP32[$493 >> 2] = $98; //@line 16842
   $494 = $ReallocAsyncCtx4 + 192 | 0; //@line 16843
   HEAP32[$494 >> 2] = $100; //@line 16844
   $495 = $ReallocAsyncCtx4 + 196 | 0; //@line 16845
   HEAP32[$495 >> 2] = $102; //@line 16846
   $496 = $ReallocAsyncCtx4 + 200 | 0; //@line 16847
   HEAP32[$496 >> 2] = $104; //@line 16848
   $497 = $ReallocAsyncCtx4 + 204 | 0; //@line 16849
   HEAP8[$497 >> 0] = $439; //@line 16850
   $498 = $ReallocAsyncCtx4 + 208 | 0; //@line 16851
   HEAP32[$498 >> 2] = $106; //@line 16852
   $499 = $ReallocAsyncCtx4 + 212 | 0; //@line 16853
   HEAP32[$499 >> 2] = $108; //@line 16854
   $500 = $ReallocAsyncCtx4 + 216 | 0; //@line 16855
   HEAP32[$500 >> 2] = $110; //@line 16856
   $501 = $ReallocAsyncCtx4 + 220 | 0; //@line 16857
   HEAP32[$501 >> 2] = $112; //@line 16858
   $502 = $ReallocAsyncCtx4 + 224 | 0; //@line 16859
   HEAP32[$502 >> 2] = $114; //@line 16860
   $503 = $ReallocAsyncCtx4 + 228 | 0; //@line 16861
   HEAP32[$503 >> 2] = $116; //@line 16862
   $504 = $ReallocAsyncCtx4 + 232 | 0; //@line 16863
   HEAP32[$504 >> 2] = $118; //@line 16864
   sp = STACKTOP; //@line 16865
   return;
  }
  HEAP8[___async_retval >> 0] = $446; //@line 16869
  ___async_unwind = 0; //@line 16870
  HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 16871
  $447 = $ReallocAsyncCtx4 + 4 | 0; //@line 16872
  HEAP32[$447 >> 2] = $2; //@line 16873
  $448 = $ReallocAsyncCtx4 + 8 | 0; //@line 16874
  HEAP32[$448 >> 2] = $4; //@line 16875
  $449 = $ReallocAsyncCtx4 + 12 | 0; //@line 16876
  HEAP32[$449 >> 2] = $6; //@line 16877
  $450 = $ReallocAsyncCtx4 + 16 | 0; //@line 16878
  HEAP32[$450 >> 2] = $8; //@line 16879
  $451 = $ReallocAsyncCtx4 + 20 | 0; //@line 16880
  HEAP32[$451 >> 2] = $10; //@line 16881
  $452 = $ReallocAsyncCtx4 + 24 | 0; //@line 16882
  HEAP32[$452 >> 2] = $12; //@line 16883
  $453 = $ReallocAsyncCtx4 + 28 | 0; //@line 16884
  HEAP32[$453 >> 2] = $14; //@line 16885
  $454 = $ReallocAsyncCtx4 + 32 | 0; //@line 16886
  HEAP32[$454 >> 2] = $16; //@line 16887
  $455 = $ReallocAsyncCtx4 + 36 | 0; //@line 16888
  HEAP32[$455 >> 2] = $18; //@line 16889
  $456 = $ReallocAsyncCtx4 + 40 | 0; //@line 16890
  HEAP32[$456 >> 2] = $20; //@line 16891
  $457 = $ReallocAsyncCtx4 + 44 | 0; //@line 16892
  HEAP32[$457 >> 2] = $22; //@line 16893
  $458 = $ReallocAsyncCtx4 + 48 | 0; //@line 16894
  HEAP32[$458 >> 2] = $24; //@line 16895
  $459 = $ReallocAsyncCtx4 + 52 | 0; //@line 16896
  HEAP32[$459 >> 2] = $26; //@line 16897
  $460 = $ReallocAsyncCtx4 + 56 | 0; //@line 16898
  HEAP32[$460 >> 2] = $28; //@line 16899
  $461 = $ReallocAsyncCtx4 + 60 | 0; //@line 16900
  HEAP32[$461 >> 2] = $30; //@line 16901
  $462 = $ReallocAsyncCtx4 + 64 | 0; //@line 16902
  HEAP32[$462 >> 2] = $32; //@line 16903
  $463 = $ReallocAsyncCtx4 + 68 | 0; //@line 16904
  HEAP32[$463 >> 2] = $34; //@line 16905
  $464 = $ReallocAsyncCtx4 + 72 | 0; //@line 16906
  HEAP32[$464 >> 2] = $36; //@line 16907
  $465 = $ReallocAsyncCtx4 + 76 | 0; //@line 16908
  HEAP32[$465 >> 2] = $38; //@line 16909
  $466 = $ReallocAsyncCtx4 + 80 | 0; //@line 16910
  HEAP32[$466 >> 2] = $40; //@line 16911
  $467 = $ReallocAsyncCtx4 + 84 | 0; //@line 16912
  HEAP32[$467 >> 2] = $42; //@line 16913
  $468 = $ReallocAsyncCtx4 + 88 | 0; //@line 16914
  HEAP32[$468 >> 2] = $44; //@line 16915
  $469 = $ReallocAsyncCtx4 + 92 | 0; //@line 16916
  HEAP32[$469 >> 2] = $46; //@line 16917
  $470 = $ReallocAsyncCtx4 + 96 | 0; //@line 16918
  HEAP32[$470 >> 2] = $48; //@line 16919
  $471 = $ReallocAsyncCtx4 + 100 | 0; //@line 16920
  HEAP32[$471 >> 2] = $50; //@line 16921
  $472 = $ReallocAsyncCtx4 + 104 | 0; //@line 16922
  HEAP32[$472 >> 2] = $52; //@line 16923
  $473 = $ReallocAsyncCtx4 + 108 | 0; //@line 16924
  HEAP32[$473 >> 2] = $54; //@line 16925
  $474 = $ReallocAsyncCtx4 + 112 | 0; //@line 16926
  HEAP32[$474 >> 2] = $56; //@line 16927
  $475 = $ReallocAsyncCtx4 + 116 | 0; //@line 16928
  HEAP32[$475 >> 2] = $58; //@line 16929
  $476 = $ReallocAsyncCtx4 + 120 | 0; //@line 16930
  HEAP32[$476 >> 2] = $60; //@line 16931
  $477 = $ReallocAsyncCtx4 + 124 | 0; //@line 16932
  HEAP32[$477 >> 2] = $62; //@line 16933
  $478 = $ReallocAsyncCtx4 + 128 | 0; //@line 16934
  HEAP32[$478 >> 2] = $64; //@line 16935
  $479 = $ReallocAsyncCtx4 + 132 | 0; //@line 16936
  HEAP32[$479 >> 2] = $66; //@line 16937
  $480 = $ReallocAsyncCtx4 + 136 | 0; //@line 16938
  HEAP32[$480 >> 2] = $68; //@line 16939
  $481 = $ReallocAsyncCtx4 + 140 | 0; //@line 16940
  HEAP32[$481 >> 2] = $70; //@line 16941
  $482 = $ReallocAsyncCtx4 + 144 | 0; //@line 16942
  HEAP32[$482 >> 2] = $72; //@line 16943
  $483 = $ReallocAsyncCtx4 + 148 | 0; //@line 16944
  HEAP32[$483 >> 2] = $74; //@line 16945
  $484 = $ReallocAsyncCtx4 + 152 | 0; //@line 16946
  HEAP32[$484 >> 2] = $76; //@line 16947
  $485 = $ReallocAsyncCtx4 + 156 | 0; //@line 16948
  HEAP32[$485 >> 2] = $80; //@line 16949
  $486 = $ReallocAsyncCtx4 + 160 | 0; //@line 16950
  HEAP8[$486 >> 0] = $82; //@line 16951
  $487 = $ReallocAsyncCtx4 + 164 | 0; //@line 16952
  HEAP32[$487 >> 2] = $84; //@line 16953
  $488 = $ReallocAsyncCtx4 + 168 | 0; //@line 16954
  HEAP8[$488 >> 0] = $88; //@line 16955
  $489 = $ReallocAsyncCtx4 + 172 | 0; //@line 16956
  HEAP32[$489 >> 2] = $90; //@line 16957
  $490 = $ReallocAsyncCtx4 + 176 | 0; //@line 16958
  HEAP8[$490 >> 0] = $92; //@line 16959
  $491 = $ReallocAsyncCtx4 + 180 | 0; //@line 16960
  HEAP32[$491 >> 2] = $94; //@line 16961
  $492 = $ReallocAsyncCtx4 + 184 | 0; //@line 16962
  HEAP32[$492 >> 2] = $96; //@line 16963
  $493 = $ReallocAsyncCtx4 + 188 | 0; //@line 16964
  HEAP32[$493 >> 2] = $98; //@line 16965
  $494 = $ReallocAsyncCtx4 + 192 | 0; //@line 16966
  HEAP32[$494 >> 2] = $100; //@line 16967
  $495 = $ReallocAsyncCtx4 + 196 | 0; //@line 16968
  HEAP32[$495 >> 2] = $102; //@line 16969
  $496 = $ReallocAsyncCtx4 + 200 | 0; //@line 16970
  HEAP32[$496 >> 2] = $104; //@line 16971
  $497 = $ReallocAsyncCtx4 + 204 | 0; //@line 16972
  HEAP8[$497 >> 0] = $439; //@line 16973
  $498 = $ReallocAsyncCtx4 + 208 | 0; //@line 16974
  HEAP32[$498 >> 2] = $106; //@line 16975
  $499 = $ReallocAsyncCtx4 + 212 | 0; //@line 16976
  HEAP32[$499 >> 2] = $108; //@line 16977
  $500 = $ReallocAsyncCtx4 + 216 | 0; //@line 16978
  HEAP32[$500 >> 2] = $110; //@line 16979
  $501 = $ReallocAsyncCtx4 + 220 | 0; //@line 16980
  HEAP32[$501 >> 2] = $112; //@line 16981
  $502 = $ReallocAsyncCtx4 + 224 | 0; //@line 16982
  HEAP32[$502 >> 2] = $114; //@line 16983
  $503 = $ReallocAsyncCtx4 + 228 | 0; //@line 16984
  HEAP32[$503 >> 2] = $116; //@line 16985
  $504 = $ReallocAsyncCtx4 + 232 | 0; //@line 16986
  HEAP32[$504 >> 2] = $118; //@line 16987
  sp = STACKTOP; //@line 16988
  return;
 } else if ((label | 0) == 32) {
  $525 = $$0$be + 2 << 24 >> 24; //@line 16992
  $529 = HEAPU8[$84 + ($121 & 255) >> 0] | 0; //@line 16996
  $531 = $529 >>> 5 & 1; //@line 16999
  $533 = $529 >>> 4 & 1; //@line 17002
  $536 = HEAP32[(HEAP32[$24 >> 2] | 0) + 44 >> 2] | 0; //@line 17005
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(252) | 0; //@line 17006
  $537 = FUNCTION_TABLE_iiii[$536 & 31]($62, $533, $531) | 0; //@line 17007
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 17010
   $538 = $ReallocAsyncCtx5 + 4 | 0; //@line 17011
   HEAP32[$538 >> 2] = $2; //@line 17012
   $539 = $ReallocAsyncCtx5 + 8 | 0; //@line 17013
   HEAP32[$539 >> 2] = $4; //@line 17014
   $540 = $ReallocAsyncCtx5 + 12 | 0; //@line 17015
   HEAP32[$540 >> 2] = $6; //@line 17016
   $541 = $ReallocAsyncCtx5 + 16 | 0; //@line 17017
   HEAP32[$541 >> 2] = $8; //@line 17018
   $542 = $ReallocAsyncCtx5 + 20 | 0; //@line 17019
   HEAP32[$542 >> 2] = $10; //@line 17020
   $543 = $ReallocAsyncCtx5 + 24 | 0; //@line 17021
   HEAP32[$543 >> 2] = $12; //@line 17022
   $544 = $ReallocAsyncCtx5 + 28 | 0; //@line 17023
   HEAP32[$544 >> 2] = $14; //@line 17024
   $545 = $ReallocAsyncCtx5 + 32 | 0; //@line 17025
   HEAP32[$545 >> 2] = $16; //@line 17026
   $546 = $ReallocAsyncCtx5 + 36 | 0; //@line 17027
   HEAP32[$546 >> 2] = $18; //@line 17028
   $547 = $ReallocAsyncCtx5 + 40 | 0; //@line 17029
   HEAP32[$547 >> 2] = $20; //@line 17030
   $548 = $ReallocAsyncCtx5 + 44 | 0; //@line 17031
   HEAP32[$548 >> 2] = $22; //@line 17032
   $549 = $ReallocAsyncCtx5 + 48 | 0; //@line 17033
   HEAP32[$549 >> 2] = $24; //@line 17034
   $550 = $ReallocAsyncCtx5 + 52 | 0; //@line 17035
   HEAP32[$550 >> 2] = $26; //@line 17036
   $551 = $ReallocAsyncCtx5 + 56 | 0; //@line 17037
   HEAP8[$551 >> 0] = $533; //@line 17038
   $552 = $ReallocAsyncCtx5 + 60 | 0; //@line 17039
   HEAP32[$552 >> 2] = $28; //@line 17040
   $553 = $ReallocAsyncCtx5 + 64 | 0; //@line 17041
   HEAP32[$553 >> 2] = $30; //@line 17042
   $554 = $ReallocAsyncCtx5 + 68 | 0; //@line 17043
   HEAP32[$554 >> 2] = $32; //@line 17044
   $555 = $ReallocAsyncCtx5 + 72 | 0; //@line 17045
   HEAP32[$555 >> 2] = $34; //@line 17046
   $556 = $ReallocAsyncCtx5 + 76 | 0; //@line 17047
   HEAP32[$556 >> 2] = $36; //@line 17048
   $557 = $ReallocAsyncCtx5 + 80 | 0; //@line 17049
   HEAP32[$557 >> 2] = $38; //@line 17050
   $558 = $ReallocAsyncCtx5 + 84 | 0; //@line 17051
   HEAP32[$558 >> 2] = $40; //@line 17052
   $559 = $ReallocAsyncCtx5 + 88 | 0; //@line 17053
   HEAP32[$559 >> 2] = $42; //@line 17054
   $560 = $ReallocAsyncCtx5 + 92 | 0; //@line 17055
   HEAP32[$560 >> 2] = $44; //@line 17056
   $561 = $ReallocAsyncCtx5 + 96 | 0; //@line 17057
   HEAP32[$561 >> 2] = $46; //@line 17058
   $562 = $ReallocAsyncCtx5 + 100 | 0; //@line 17059
   HEAP32[$562 >> 2] = $529; //@line 17060
   $563 = $ReallocAsyncCtx5 + 104 | 0; //@line 17061
   HEAP32[$563 >> 2] = $48; //@line 17062
   $564 = $ReallocAsyncCtx5 + 108 | 0; //@line 17063
   HEAP32[$564 >> 2] = $50; //@line 17064
   $565 = $ReallocAsyncCtx5 + 112 | 0; //@line 17065
   HEAP32[$565 >> 2] = $52; //@line 17066
   $566 = $ReallocAsyncCtx5 + 116 | 0; //@line 17067
   HEAP32[$566 >> 2] = $54; //@line 17068
   $567 = $ReallocAsyncCtx5 + 120 | 0; //@line 17069
   HEAP32[$567 >> 2] = $56; //@line 17070
   $568 = $ReallocAsyncCtx5 + 124 | 0; //@line 17071
   HEAP32[$568 >> 2] = $58; //@line 17072
   $569 = $ReallocAsyncCtx5 + 128 | 0; //@line 17073
   HEAP32[$569 >> 2] = $60; //@line 17074
   $570 = $ReallocAsyncCtx5 + 132 | 0; //@line 17075
   HEAP32[$570 >> 2] = $62; //@line 17076
   $571 = $ReallocAsyncCtx5 + 136 | 0; //@line 17077
   HEAP32[$571 >> 2] = $64; //@line 17078
   $572 = $ReallocAsyncCtx5 + 140 | 0; //@line 17079
   HEAP8[$572 >> 0] = $531; //@line 17080
   $573 = $ReallocAsyncCtx5 + 144 | 0; //@line 17081
   HEAP32[$573 >> 2] = $66; //@line 17082
   $574 = $ReallocAsyncCtx5 + 148 | 0; //@line 17083
   HEAP32[$574 >> 2] = $68; //@line 17084
   $575 = $ReallocAsyncCtx5 + 152 | 0; //@line 17085
   HEAP32[$575 >> 2] = $70; //@line 17086
   $576 = $ReallocAsyncCtx5 + 156 | 0; //@line 17087
   HEAP32[$576 >> 2] = $72; //@line 17088
   $577 = $ReallocAsyncCtx5 + 160 | 0; //@line 17089
   HEAP32[$577 >> 2] = $74; //@line 17090
   $578 = $ReallocAsyncCtx5 + 164 | 0; //@line 17091
   HEAP32[$578 >> 2] = $76; //@line 17092
   $579 = $ReallocAsyncCtx5 + 168 | 0; //@line 17093
   HEAP32[$579 >> 2] = $80; //@line 17094
   $580 = $ReallocAsyncCtx5 + 172 | 0; //@line 17095
   HEAP8[$580 >> 0] = $82; //@line 17096
   $581 = $ReallocAsyncCtx5 + 176 | 0; //@line 17097
   HEAP32[$581 >> 2] = $84; //@line 17098
   $582 = $ReallocAsyncCtx5 + 180 | 0; //@line 17099
   HEAP8[$582 >> 0] = $88; //@line 17100
   $583 = $ReallocAsyncCtx5 + 184 | 0; //@line 17101
   HEAP32[$583 >> 2] = $90; //@line 17102
   $584 = $ReallocAsyncCtx5 + 188 | 0; //@line 17103
   HEAP8[$584 >> 0] = $92; //@line 17104
   $585 = $ReallocAsyncCtx5 + 192 | 0; //@line 17105
   HEAP32[$585 >> 2] = $$0107$be; //@line 17106
   $586 = $ReallocAsyncCtx5 + 196 | 0; //@line 17107
   HEAP32[$586 >> 2] = $94; //@line 17108
   $587 = $ReallocAsyncCtx5 + 200 | 0; //@line 17109
   HEAP32[$587 >> 2] = $96; //@line 17110
   $588 = $ReallocAsyncCtx5 + 204 | 0; //@line 17111
   HEAP32[$588 >> 2] = $98; //@line 17112
   $589 = $ReallocAsyncCtx5 + 208 | 0; //@line 17113
   HEAP32[$589 >> 2] = $100; //@line 17114
   $590 = $ReallocAsyncCtx5 + 212 | 0; //@line 17115
   HEAP32[$590 >> 2] = $102; //@line 17116
   $591 = $ReallocAsyncCtx5 + 216 | 0; //@line 17117
   HEAP32[$591 >> 2] = $104; //@line 17118
   $592 = $ReallocAsyncCtx5 + 220 | 0; //@line 17119
   HEAP8[$592 >> 0] = $525; //@line 17120
   $593 = $ReallocAsyncCtx5 + 224 | 0; //@line 17121
   HEAP32[$593 >> 2] = $106; //@line 17122
   $594 = $ReallocAsyncCtx5 + 228 | 0; //@line 17123
   HEAP32[$594 >> 2] = $108; //@line 17124
   $595 = $ReallocAsyncCtx5 + 232 | 0; //@line 17125
   HEAP32[$595 >> 2] = $110; //@line 17126
   $596 = $ReallocAsyncCtx5 + 236 | 0; //@line 17127
   HEAP32[$596 >> 2] = $112; //@line 17128
   $597 = $ReallocAsyncCtx5 + 240 | 0; //@line 17129
   HEAP32[$597 >> 2] = $114; //@line 17130
   $598 = $ReallocAsyncCtx5 + 244 | 0; //@line 17131
   HEAP32[$598 >> 2] = $116; //@line 17132
   $599 = $ReallocAsyncCtx5 + 248 | 0; //@line 17133
   HEAP32[$599 >> 2] = $118; //@line 17134
   sp = STACKTOP; //@line 17135
   return;
  }
  HEAP8[___async_retval >> 0] = $537 & 1; //@line 17140
  ___async_unwind = 0; //@line 17141
  HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 17142
  $538 = $ReallocAsyncCtx5 + 4 | 0; //@line 17143
  HEAP32[$538 >> 2] = $2; //@line 17144
  $539 = $ReallocAsyncCtx5 + 8 | 0; //@line 17145
  HEAP32[$539 >> 2] = $4; //@line 17146
  $540 = $ReallocAsyncCtx5 + 12 | 0; //@line 17147
  HEAP32[$540 >> 2] = $6; //@line 17148
  $541 = $ReallocAsyncCtx5 + 16 | 0; //@line 17149
  HEAP32[$541 >> 2] = $8; //@line 17150
  $542 = $ReallocAsyncCtx5 + 20 | 0; //@line 17151
  HEAP32[$542 >> 2] = $10; //@line 17152
  $543 = $ReallocAsyncCtx5 + 24 | 0; //@line 17153
  HEAP32[$543 >> 2] = $12; //@line 17154
  $544 = $ReallocAsyncCtx5 + 28 | 0; //@line 17155
  HEAP32[$544 >> 2] = $14; //@line 17156
  $545 = $ReallocAsyncCtx5 + 32 | 0; //@line 17157
  HEAP32[$545 >> 2] = $16; //@line 17158
  $546 = $ReallocAsyncCtx5 + 36 | 0; //@line 17159
  HEAP32[$546 >> 2] = $18; //@line 17160
  $547 = $ReallocAsyncCtx5 + 40 | 0; //@line 17161
  HEAP32[$547 >> 2] = $20; //@line 17162
  $548 = $ReallocAsyncCtx5 + 44 | 0; //@line 17163
  HEAP32[$548 >> 2] = $22; //@line 17164
  $549 = $ReallocAsyncCtx5 + 48 | 0; //@line 17165
  HEAP32[$549 >> 2] = $24; //@line 17166
  $550 = $ReallocAsyncCtx5 + 52 | 0; //@line 17167
  HEAP32[$550 >> 2] = $26; //@line 17168
  $551 = $ReallocAsyncCtx5 + 56 | 0; //@line 17169
  HEAP8[$551 >> 0] = $533; //@line 17170
  $552 = $ReallocAsyncCtx5 + 60 | 0; //@line 17171
  HEAP32[$552 >> 2] = $28; //@line 17172
  $553 = $ReallocAsyncCtx5 + 64 | 0; //@line 17173
  HEAP32[$553 >> 2] = $30; //@line 17174
  $554 = $ReallocAsyncCtx5 + 68 | 0; //@line 17175
  HEAP32[$554 >> 2] = $32; //@line 17176
  $555 = $ReallocAsyncCtx5 + 72 | 0; //@line 17177
  HEAP32[$555 >> 2] = $34; //@line 17178
  $556 = $ReallocAsyncCtx5 + 76 | 0; //@line 17179
  HEAP32[$556 >> 2] = $36; //@line 17180
  $557 = $ReallocAsyncCtx5 + 80 | 0; //@line 17181
  HEAP32[$557 >> 2] = $38; //@line 17182
  $558 = $ReallocAsyncCtx5 + 84 | 0; //@line 17183
  HEAP32[$558 >> 2] = $40; //@line 17184
  $559 = $ReallocAsyncCtx5 + 88 | 0; //@line 17185
  HEAP32[$559 >> 2] = $42; //@line 17186
  $560 = $ReallocAsyncCtx5 + 92 | 0; //@line 17187
  HEAP32[$560 >> 2] = $44; //@line 17188
  $561 = $ReallocAsyncCtx5 + 96 | 0; //@line 17189
  HEAP32[$561 >> 2] = $46; //@line 17190
  $562 = $ReallocAsyncCtx5 + 100 | 0; //@line 17191
  HEAP32[$562 >> 2] = $529; //@line 17192
  $563 = $ReallocAsyncCtx5 + 104 | 0; //@line 17193
  HEAP32[$563 >> 2] = $48; //@line 17194
  $564 = $ReallocAsyncCtx5 + 108 | 0; //@line 17195
  HEAP32[$564 >> 2] = $50; //@line 17196
  $565 = $ReallocAsyncCtx5 + 112 | 0; //@line 17197
  HEAP32[$565 >> 2] = $52; //@line 17198
  $566 = $ReallocAsyncCtx5 + 116 | 0; //@line 17199
  HEAP32[$566 >> 2] = $54; //@line 17200
  $567 = $ReallocAsyncCtx5 + 120 | 0; //@line 17201
  HEAP32[$567 >> 2] = $56; //@line 17202
  $568 = $ReallocAsyncCtx5 + 124 | 0; //@line 17203
  HEAP32[$568 >> 2] = $58; //@line 17204
  $569 = $ReallocAsyncCtx5 + 128 | 0; //@line 17205
  HEAP32[$569 >> 2] = $60; //@line 17206
  $570 = $ReallocAsyncCtx5 + 132 | 0; //@line 17207
  HEAP32[$570 >> 2] = $62; //@line 17208
  $571 = $ReallocAsyncCtx5 + 136 | 0; //@line 17209
  HEAP32[$571 >> 2] = $64; //@line 17210
  $572 = $ReallocAsyncCtx5 + 140 | 0; //@line 17211
  HEAP8[$572 >> 0] = $531; //@line 17212
  $573 = $ReallocAsyncCtx5 + 144 | 0; //@line 17213
  HEAP32[$573 >> 2] = $66; //@line 17214
  $574 = $ReallocAsyncCtx5 + 148 | 0; //@line 17215
  HEAP32[$574 >> 2] = $68; //@line 17216
  $575 = $ReallocAsyncCtx5 + 152 | 0; //@line 17217
  HEAP32[$575 >> 2] = $70; //@line 17218
  $576 = $ReallocAsyncCtx5 + 156 | 0; //@line 17219
  HEAP32[$576 >> 2] = $72; //@line 17220
  $577 = $ReallocAsyncCtx5 + 160 | 0; //@line 17221
  HEAP32[$577 >> 2] = $74; //@line 17222
  $578 = $ReallocAsyncCtx5 + 164 | 0; //@line 17223
  HEAP32[$578 >> 2] = $76; //@line 17224
  $579 = $ReallocAsyncCtx5 + 168 | 0; //@line 17225
  HEAP32[$579 >> 2] = $80; //@line 17226
  $580 = $ReallocAsyncCtx5 + 172 | 0; //@line 17227
  HEAP8[$580 >> 0] = $82; //@line 17228
  $581 = $ReallocAsyncCtx5 + 176 | 0; //@line 17229
  HEAP32[$581 >> 2] = $84; //@line 17230
  $582 = $ReallocAsyncCtx5 + 180 | 0; //@line 17231
  HEAP8[$582 >> 0] = $88; //@line 17232
  $583 = $ReallocAsyncCtx5 + 184 | 0; //@line 17233
  HEAP32[$583 >> 2] = $90; //@line 17234
  $584 = $ReallocAsyncCtx5 + 188 | 0; //@line 17235
  HEAP8[$584 >> 0] = $92; //@line 17236
  $585 = $ReallocAsyncCtx5 + 192 | 0; //@line 17237
  HEAP32[$585 >> 2] = $$0107$be; //@line 17238
  $586 = $ReallocAsyncCtx5 + 196 | 0; //@line 17239
  HEAP32[$586 >> 2] = $94; //@line 17240
  $587 = $ReallocAsyncCtx5 + 200 | 0; //@line 17241
  HEAP32[$587 >> 2] = $96; //@line 17242
  $588 = $ReallocAsyncCtx5 + 204 | 0; //@line 17243
  HEAP32[$588 >> 2] = $98; //@line 17244
  $589 = $ReallocAsyncCtx5 + 208 | 0; //@line 17245
  HEAP32[$589 >> 2] = $100; //@line 17246
  $590 = $ReallocAsyncCtx5 + 212 | 0; //@line 17247
  HEAP32[$590 >> 2] = $102; //@line 17248
  $591 = $ReallocAsyncCtx5 + 216 | 0; //@line 17249
  HEAP32[$591 >> 2] = $104; //@line 17250
  $592 = $ReallocAsyncCtx5 + 220 | 0; //@line 17251
  HEAP8[$592 >> 0] = $525; //@line 17252
  $593 = $ReallocAsyncCtx5 + 224 | 0; //@line 17253
  HEAP32[$593 >> 2] = $106; //@line 17254
  $594 = $ReallocAsyncCtx5 + 228 | 0; //@line 17255
  HEAP32[$594 >> 2] = $108; //@line 17256
  $595 = $ReallocAsyncCtx5 + 232 | 0; //@line 17257
  HEAP32[$595 >> 2] = $110; //@line 17258
  $596 = $ReallocAsyncCtx5 + 236 | 0; //@line 17259
  HEAP32[$596 >> 2] = $112; //@line 17260
  $597 = $ReallocAsyncCtx5 + 240 | 0; //@line 17261
  HEAP32[$597 >> 2] = $114; //@line 17262
  $598 = $ReallocAsyncCtx5 + 244 | 0; //@line 17263
  HEAP32[$598 >> 2] = $116; //@line 17264
  $599 = $ReallocAsyncCtx5 + 248 | 0; //@line 17265
  HEAP32[$599 >> 2] = $118; //@line 17266
  sp = STACKTOP; //@line 17267
  return;
 } else if ((label | 0) == 35) {
  $604 = HEAP8[$84 + ($121 & 255) >> 0] | 0; //@line 17274
  $617 = $$0$be + 5 << 24 >> 24; //@line 17287
  $624 = (HEAPU8[$84 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$84 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$84 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 17294
  $627 = HEAP32[(HEAP32[$40 >> 2] | 0) + 48 >> 2] | 0; //@line 17297
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(236) | 0; //@line 17298
  $628 = FUNCTION_TABLE_iiii[$627 & 31]($62, $604, $624) | 0; //@line 17299
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 495; //@line 17302
   $629 = $ReallocAsyncCtx6 + 4 | 0; //@line 17303
   HEAP32[$629 >> 2] = $2; //@line 17304
   $630 = $ReallocAsyncCtx6 + 8 | 0; //@line 17305
   HEAP32[$630 >> 2] = $4; //@line 17306
   $631 = $ReallocAsyncCtx6 + 12 | 0; //@line 17307
   HEAP32[$631 >> 2] = $6; //@line 17308
   $632 = $ReallocAsyncCtx6 + 16 | 0; //@line 17309
   HEAP32[$632 >> 2] = $8; //@line 17310
   $633 = $ReallocAsyncCtx6 + 20 | 0; //@line 17311
   HEAP32[$633 >> 2] = $10; //@line 17312
   $634 = $ReallocAsyncCtx6 + 24 | 0; //@line 17313
   HEAP32[$634 >> 2] = $12; //@line 17314
   $635 = $ReallocAsyncCtx6 + 28 | 0; //@line 17315
   HEAP32[$635 >> 2] = $14; //@line 17316
   $636 = $ReallocAsyncCtx6 + 32 | 0; //@line 17317
   HEAP32[$636 >> 2] = $16; //@line 17318
   $637 = $ReallocAsyncCtx6 + 36 | 0; //@line 17319
   HEAP32[$637 >> 2] = $18; //@line 17320
   $638 = $ReallocAsyncCtx6 + 40 | 0; //@line 17321
   HEAP32[$638 >> 2] = $20; //@line 17322
   $639 = $ReallocAsyncCtx6 + 44 | 0; //@line 17323
   HEAP32[$639 >> 2] = $22; //@line 17324
   $640 = $ReallocAsyncCtx6 + 48 | 0; //@line 17325
   HEAP32[$640 >> 2] = $24; //@line 17326
   $641 = $ReallocAsyncCtx6 + 52 | 0; //@line 17327
   HEAP32[$641 >> 2] = $26; //@line 17328
   $642 = $ReallocAsyncCtx6 + 56 | 0; //@line 17329
   HEAP32[$642 >> 2] = $28; //@line 17330
   $643 = $ReallocAsyncCtx6 + 60 | 0; //@line 17331
   HEAP32[$643 >> 2] = $30; //@line 17332
   $644 = $ReallocAsyncCtx6 + 64 | 0; //@line 17333
   HEAP32[$644 >> 2] = $32; //@line 17334
   $645 = $ReallocAsyncCtx6 + 68 | 0; //@line 17335
   HEAP32[$645 >> 2] = $34; //@line 17336
   $646 = $ReallocAsyncCtx6 + 72 | 0; //@line 17337
   HEAP32[$646 >> 2] = $36; //@line 17338
   $647 = $ReallocAsyncCtx6 + 76 | 0; //@line 17339
   HEAP32[$647 >> 2] = $38; //@line 17340
   $648 = $ReallocAsyncCtx6 + 80 | 0; //@line 17341
   HEAP32[$648 >> 2] = $40; //@line 17342
   $649 = $ReallocAsyncCtx6 + 84 | 0; //@line 17343
   HEAP32[$649 >> 2] = $42; //@line 17344
   $650 = $ReallocAsyncCtx6 + 88 | 0; //@line 17345
   HEAP32[$650 >> 2] = $44; //@line 17346
   $651 = $ReallocAsyncCtx6 + 92 | 0; //@line 17347
   HEAP32[$651 >> 2] = $46; //@line 17348
   $652 = $ReallocAsyncCtx6 + 96 | 0; //@line 17349
   HEAP32[$652 >> 2] = $48; //@line 17350
   $653 = $ReallocAsyncCtx6 + 100 | 0; //@line 17351
   HEAP32[$653 >> 2] = $50; //@line 17352
   $654 = $ReallocAsyncCtx6 + 104 | 0; //@line 17353
   HEAP32[$654 >> 2] = $52; //@line 17354
   $655 = $ReallocAsyncCtx6 + 108 | 0; //@line 17355
   HEAP32[$655 >> 2] = $54; //@line 17356
   $656 = $ReallocAsyncCtx6 + 112 | 0; //@line 17357
   HEAP32[$656 >> 2] = $56; //@line 17358
   $657 = $ReallocAsyncCtx6 + 116 | 0; //@line 17359
   HEAP32[$657 >> 2] = $58; //@line 17360
   $658 = $ReallocAsyncCtx6 + 120 | 0; //@line 17361
   HEAP8[$658 >> 0] = $617; //@line 17362
   $659 = $ReallocAsyncCtx6 + 124 | 0; //@line 17363
   HEAP32[$659 >> 2] = $60; //@line 17364
   $660 = $ReallocAsyncCtx6 + 128 | 0; //@line 17365
   HEAP32[$660 >> 2] = $62; //@line 17366
   $661 = $ReallocAsyncCtx6 + 132 | 0; //@line 17367
   HEAP32[$661 >> 2] = $64; //@line 17368
   $662 = $ReallocAsyncCtx6 + 136 | 0; //@line 17369
   HEAP32[$662 >> 2] = $66; //@line 17370
   $663 = $ReallocAsyncCtx6 + 140 | 0; //@line 17371
   HEAP32[$663 >> 2] = $68; //@line 17372
   $664 = $ReallocAsyncCtx6 + 144 | 0; //@line 17373
   HEAP32[$664 >> 2] = $70; //@line 17374
   $665 = $ReallocAsyncCtx6 + 148 | 0; //@line 17375
   HEAP32[$665 >> 2] = $72; //@line 17376
   $666 = $ReallocAsyncCtx6 + 152 | 0; //@line 17377
   HEAP32[$666 >> 2] = $74; //@line 17378
   $667 = $ReallocAsyncCtx6 + 156 | 0; //@line 17379
   HEAP32[$667 >> 2] = $76; //@line 17380
   $668 = $ReallocAsyncCtx6 + 160 | 0; //@line 17381
   HEAP32[$668 >> 2] = $80; //@line 17382
   $669 = $ReallocAsyncCtx6 + 164 | 0; //@line 17383
   HEAP8[$669 >> 0] = $82; //@line 17384
   $670 = $ReallocAsyncCtx6 + 168 | 0; //@line 17385
   HEAP32[$670 >> 2] = $84; //@line 17386
   $671 = $ReallocAsyncCtx6 + 172 | 0; //@line 17387
   HEAP8[$671 >> 0] = $88; //@line 17388
   $672 = $ReallocAsyncCtx6 + 176 | 0; //@line 17389
   HEAP32[$672 >> 2] = $90; //@line 17390
   $673 = $ReallocAsyncCtx6 + 180 | 0; //@line 17391
   HEAP8[$673 >> 0] = $92; //@line 17392
   $674 = $ReallocAsyncCtx6 + 184 | 0; //@line 17393
   HEAP32[$674 >> 2] = $94; //@line 17394
   $675 = $ReallocAsyncCtx6 + 188 | 0; //@line 17395
   HEAP32[$675 >> 2] = $96; //@line 17396
   $676 = $ReallocAsyncCtx6 + 192 | 0; //@line 17397
   HEAP32[$676 >> 2] = $98; //@line 17398
   $677 = $ReallocAsyncCtx6 + 196 | 0; //@line 17399
   HEAP32[$677 >> 2] = $100; //@line 17400
   $678 = $ReallocAsyncCtx6 + 200 | 0; //@line 17401
   HEAP32[$678 >> 2] = $102; //@line 17402
   $679 = $ReallocAsyncCtx6 + 204 | 0; //@line 17403
   HEAP32[$679 >> 2] = $104; //@line 17404
   $680 = $ReallocAsyncCtx6 + 208 | 0; //@line 17405
   HEAP32[$680 >> 2] = $106; //@line 17406
   $681 = $ReallocAsyncCtx6 + 212 | 0; //@line 17407
   HEAP32[$681 >> 2] = $108; //@line 17408
   $682 = $ReallocAsyncCtx6 + 216 | 0; //@line 17409
   HEAP32[$682 >> 2] = $110; //@line 17410
   $683 = $ReallocAsyncCtx6 + 220 | 0; //@line 17411
   HEAP32[$683 >> 2] = $112; //@line 17412
   $684 = $ReallocAsyncCtx6 + 224 | 0; //@line 17413
   HEAP32[$684 >> 2] = $114; //@line 17414
   $685 = $ReallocAsyncCtx6 + 228 | 0; //@line 17415
   HEAP32[$685 >> 2] = $116; //@line 17416
   $686 = $ReallocAsyncCtx6 + 232 | 0; //@line 17417
   HEAP32[$686 >> 2] = $118; //@line 17418
   sp = STACKTOP; //@line 17419
   return;
  }
  HEAP8[___async_retval >> 0] = $628; //@line 17423
  ___async_unwind = 0; //@line 17424
  HEAP32[$ReallocAsyncCtx6 >> 2] = 495; //@line 17425
  $629 = $ReallocAsyncCtx6 + 4 | 0; //@line 17426
  HEAP32[$629 >> 2] = $2; //@line 17427
  $630 = $ReallocAsyncCtx6 + 8 | 0; //@line 17428
  HEAP32[$630 >> 2] = $4; //@line 17429
  $631 = $ReallocAsyncCtx6 + 12 | 0; //@line 17430
  HEAP32[$631 >> 2] = $6; //@line 17431
  $632 = $ReallocAsyncCtx6 + 16 | 0; //@line 17432
  HEAP32[$632 >> 2] = $8; //@line 17433
  $633 = $ReallocAsyncCtx6 + 20 | 0; //@line 17434
  HEAP32[$633 >> 2] = $10; //@line 17435
  $634 = $ReallocAsyncCtx6 + 24 | 0; //@line 17436
  HEAP32[$634 >> 2] = $12; //@line 17437
  $635 = $ReallocAsyncCtx6 + 28 | 0; //@line 17438
  HEAP32[$635 >> 2] = $14; //@line 17439
  $636 = $ReallocAsyncCtx6 + 32 | 0; //@line 17440
  HEAP32[$636 >> 2] = $16; //@line 17441
  $637 = $ReallocAsyncCtx6 + 36 | 0; //@line 17442
  HEAP32[$637 >> 2] = $18; //@line 17443
  $638 = $ReallocAsyncCtx6 + 40 | 0; //@line 17444
  HEAP32[$638 >> 2] = $20; //@line 17445
  $639 = $ReallocAsyncCtx6 + 44 | 0; //@line 17446
  HEAP32[$639 >> 2] = $22; //@line 17447
  $640 = $ReallocAsyncCtx6 + 48 | 0; //@line 17448
  HEAP32[$640 >> 2] = $24; //@line 17449
  $641 = $ReallocAsyncCtx6 + 52 | 0; //@line 17450
  HEAP32[$641 >> 2] = $26; //@line 17451
  $642 = $ReallocAsyncCtx6 + 56 | 0; //@line 17452
  HEAP32[$642 >> 2] = $28; //@line 17453
  $643 = $ReallocAsyncCtx6 + 60 | 0; //@line 17454
  HEAP32[$643 >> 2] = $30; //@line 17455
  $644 = $ReallocAsyncCtx6 + 64 | 0; //@line 17456
  HEAP32[$644 >> 2] = $32; //@line 17457
  $645 = $ReallocAsyncCtx6 + 68 | 0; //@line 17458
  HEAP32[$645 >> 2] = $34; //@line 17459
  $646 = $ReallocAsyncCtx6 + 72 | 0; //@line 17460
  HEAP32[$646 >> 2] = $36; //@line 17461
  $647 = $ReallocAsyncCtx6 + 76 | 0; //@line 17462
  HEAP32[$647 >> 2] = $38; //@line 17463
  $648 = $ReallocAsyncCtx6 + 80 | 0; //@line 17464
  HEAP32[$648 >> 2] = $40; //@line 17465
  $649 = $ReallocAsyncCtx6 + 84 | 0; //@line 17466
  HEAP32[$649 >> 2] = $42; //@line 17467
  $650 = $ReallocAsyncCtx6 + 88 | 0; //@line 17468
  HEAP32[$650 >> 2] = $44; //@line 17469
  $651 = $ReallocAsyncCtx6 + 92 | 0; //@line 17470
  HEAP32[$651 >> 2] = $46; //@line 17471
  $652 = $ReallocAsyncCtx6 + 96 | 0; //@line 17472
  HEAP32[$652 >> 2] = $48; //@line 17473
  $653 = $ReallocAsyncCtx6 + 100 | 0; //@line 17474
  HEAP32[$653 >> 2] = $50; //@line 17475
  $654 = $ReallocAsyncCtx6 + 104 | 0; //@line 17476
  HEAP32[$654 >> 2] = $52; //@line 17477
  $655 = $ReallocAsyncCtx6 + 108 | 0; //@line 17478
  HEAP32[$655 >> 2] = $54; //@line 17479
  $656 = $ReallocAsyncCtx6 + 112 | 0; //@line 17480
  HEAP32[$656 >> 2] = $56; //@line 17481
  $657 = $ReallocAsyncCtx6 + 116 | 0; //@line 17482
  HEAP32[$657 >> 2] = $58; //@line 17483
  $658 = $ReallocAsyncCtx6 + 120 | 0; //@line 17484
  HEAP8[$658 >> 0] = $617; //@line 17485
  $659 = $ReallocAsyncCtx6 + 124 | 0; //@line 17486
  HEAP32[$659 >> 2] = $60; //@line 17487
  $660 = $ReallocAsyncCtx6 + 128 | 0; //@line 17488
  HEAP32[$660 >> 2] = $62; //@line 17489
  $661 = $ReallocAsyncCtx6 + 132 | 0; //@line 17490
  HEAP32[$661 >> 2] = $64; //@line 17491
  $662 = $ReallocAsyncCtx6 + 136 | 0; //@line 17492
  HEAP32[$662 >> 2] = $66; //@line 17493
  $663 = $ReallocAsyncCtx6 + 140 | 0; //@line 17494
  HEAP32[$663 >> 2] = $68; //@line 17495
  $664 = $ReallocAsyncCtx6 + 144 | 0; //@line 17496
  HEAP32[$664 >> 2] = $70; //@line 17497
  $665 = $ReallocAsyncCtx6 + 148 | 0; //@line 17498
  HEAP32[$665 >> 2] = $72; //@line 17499
  $666 = $ReallocAsyncCtx6 + 152 | 0; //@line 17500
  HEAP32[$666 >> 2] = $74; //@line 17501
  $667 = $ReallocAsyncCtx6 + 156 | 0; //@line 17502
  HEAP32[$667 >> 2] = $76; //@line 17503
  $668 = $ReallocAsyncCtx6 + 160 | 0; //@line 17504
  HEAP32[$668 >> 2] = $80; //@line 17505
  $669 = $ReallocAsyncCtx6 + 164 | 0; //@line 17506
  HEAP8[$669 >> 0] = $82; //@line 17507
  $670 = $ReallocAsyncCtx6 + 168 | 0; //@line 17508
  HEAP32[$670 >> 2] = $84; //@line 17509
  $671 = $ReallocAsyncCtx6 + 172 | 0; //@line 17510
  HEAP8[$671 >> 0] = $88; //@line 17511
  $672 = $ReallocAsyncCtx6 + 176 | 0; //@line 17512
  HEAP32[$672 >> 2] = $90; //@line 17513
  $673 = $ReallocAsyncCtx6 + 180 | 0; //@line 17514
  HEAP8[$673 >> 0] = $92; //@line 17515
  $674 = $ReallocAsyncCtx6 + 184 | 0; //@line 17516
  HEAP32[$674 >> 2] = $94; //@line 17517
  $675 = $ReallocAsyncCtx6 + 188 | 0; //@line 17518
  HEAP32[$675 >> 2] = $96; //@line 17519
  $676 = $ReallocAsyncCtx6 + 192 | 0; //@line 17520
  HEAP32[$676 >> 2] = $98; //@line 17521
  $677 = $ReallocAsyncCtx6 + 196 | 0; //@line 17522
  HEAP32[$677 >> 2] = $100; //@line 17523
  $678 = $ReallocAsyncCtx6 + 200 | 0; //@line 17524
  HEAP32[$678 >> 2] = $102; //@line 17525
  $679 = $ReallocAsyncCtx6 + 204 | 0; //@line 17526
  HEAP32[$679 >> 2] = $104; //@line 17527
  $680 = $ReallocAsyncCtx6 + 208 | 0; //@line 17528
  HEAP32[$680 >> 2] = $106; //@line 17529
  $681 = $ReallocAsyncCtx6 + 212 | 0; //@line 17530
  HEAP32[$681 >> 2] = $108; //@line 17531
  $682 = $ReallocAsyncCtx6 + 216 | 0; //@line 17532
  HEAP32[$682 >> 2] = $110; //@line 17533
  $683 = $ReallocAsyncCtx6 + 220 | 0; //@line 17534
  HEAP32[$683 >> 2] = $112; //@line 17535
  $684 = $ReallocAsyncCtx6 + 224 | 0; //@line 17536
  HEAP32[$684 >> 2] = $114; //@line 17537
  $685 = $ReallocAsyncCtx6 + 228 | 0; //@line 17538
  HEAP32[$685 >> 2] = $116; //@line 17539
  $686 = $ReallocAsyncCtx6 + 232 | 0; //@line 17540
  HEAP32[$686 >> 2] = $118; //@line 17541
  sp = STACKTOP; //@line 17542
  return;
 } else if ((label | 0) == 38) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 17547
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_362($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $127 = 0, $138 = 0, $139 = 0, $14 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $212 = 0, $215 = 0, $22 = 0, $222 = 0, $223 = 0, $229 = 0, $24 = 0, $248 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $319 = 0, $32 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $385 = 0, $386 = 0, $4 = 0, $40 = 0, $400 = 0, $42 = 0, $421 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $489 = 0, $493 = 0, $497 = 0, $502 = 0, $503 = 0, $507 = 0, $511 = 0, $513 = 0, $515 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $583 = 0, $590 = 0, $591 = 0, $598 = 0, $6 = 0, $60 = 0, $611 = 0, $618 = 0, $62 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 23536
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23538
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23540
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23542
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23544
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23546
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23548
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23550
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23552
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23554
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23556
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23558
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23560
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 23562
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 23566
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 23568
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 23570
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 23572
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 23574
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 23576
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 23578
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 23580
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 23582
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 23584
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 23588
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 23590
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 23592
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 23594
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 23596
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 23598
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 23600
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 23602
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 23604
 $70 = HEAP8[$0 + 140 >> 0] | 0; //@line 23606
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 23608
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 23610
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 23612
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 23614
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 23616
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 23618
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 23620
 $86 = HEAP8[$0 + 172 >> 0] | 0; //@line 23622
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 23624
 $90 = HEAP8[$0 + 180 >> 0] | 0; //@line 23626
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 23628
 $94 = HEAP8[$0 + 188 >> 0] | 0; //@line 23630
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 23632
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 23634
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 23636
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 23638
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 23640
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 23642
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 23644
 $110 = HEAP8[$0 + 220 >> 0] | 0; //@line 23646
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 23648
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 23650
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 23652
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 23654
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 23656
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 23658
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 23660
 if (HEAP8[___async_retval >> 0] & 1) {
  $583 = HEAP32[$0 + 100 >> 2] & 15; //@line 23665
  HEAP8[$16 >> 0] = HEAP8[$0 + 56 >> 0] | 0; //@line 23666
  HEAP8[$54 >> 0] = $70; //@line 23667
  HEAPF32[$60 >> 2] = +(HEAPU8[13579 + $583 >> 0] | 0); //@line 23671
  $590 = HEAP8[$64 >> 0] | 0; //@line 23675
  $591 = $590 & 255; //@line 23676
  if ((128 - (HEAPU8[$92 >> 0] | 0) | 0) > ($591 | 0)) {
   HEAP8[$64 >> 0] = $590 + 1 << 24 >> 24; //@line 23681
   HEAP8[$80 + 4 + $591 >> 0] = 9; //@line 23682
   HEAP8[$112 >> 0] = 1; //@line 23683
   $$0$be = $110; //@line 23684
   $$0107$be = 0; //@line 23684
  } else {
   $$0$be = $110; //@line 23686
   $$0107$be = -1010; //@line 23686
  }
 } else {
  $$0$be = $110; //@line 23689
  $$0107$be = $96; //@line 23689
 }
 L5 : while (1) {
  if (($$0$be & 255) >= ($90 & 255)) {
   label = 33; //@line 23694
   break;
  }
  $127 = $$0$be + 1 << 24 >> 24; //@line 23698
  switch (HEAP8[$88 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 23703
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 23708
    break L5;
    break;
   }
  case 7:
   {
    label = 18; //@line 23713
    break L5;
    break;
   }
  case 9:
   {
    label = 24; //@line 23718
    break L5;
    break;
   }
  case 10:
   {
    label = 30; //@line 23723
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$52 >> 2] = 0; //@line 23728
    HEAP8[$68 >> 0] = HEAP8[$88 + ($127 & 255) >> 0] | 0; //@line 23733
    HEAP8[$62 >> 0] = HEAP8[$88 + ($$0$be + 2 & 255) >> 0] | 0; //@line 23738
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 23739
    continue L5;
    break;
   }
  case 4:
   {
    $212 = $$0$be + 2 << 24 >> 24; //@line 23744
    $215 = HEAP8[$88 + ($127 & 255) >> 0] | 0; //@line 23747
    HEAP8[$118 >> 0] = $215; //@line 23748
    HEAP16[$100 >> 1] = 1 << ($215 & 255); //@line 23752
    $222 = HEAP8[$64 >> 0] | 0; //@line 23756
    $223 = $222 & 255; //@line 23757
    if ((128 - (HEAPU8[$92 >> 0] | 0) | 0) <= ($223 | 0)) {
     $$0$be = $212; //@line 23760
     $$0107$be = -1010; //@line 23760
     continue L5;
    }
    HEAP8[$64 >> 0] = $222 + 1 << 24 >> 24; //@line 23765
    HEAP8[$80 + 4 + $223 >> 0] = 4; //@line 23766
    HEAP8[$112 >> 0] = 1; //@line 23767
    $$0$be = $212; //@line 23768
    $$0107$be = 0; //@line 23768
    continue L5;
    break;
   }
  case 6:
   {
    $319 = HEAP32[$76 >> 2] | 0; //@line 23773
    if ($319 | 0) {
     label = 13; //@line 23776
     break L5;
    }
    $385 = HEAP8[$64 >> 0] | 0; //@line 23782
    $386 = $385 & 255; //@line 23783
    if ((128 - (HEAPU8[$92 >> 0] | 0) - $386 | 0) <= 2) {
     $$0$be = $127; //@line 23787
     $$0107$be = -1010; //@line 23787
     continue L5;
    }
    HEAP8[$80 + 4 + $386 >> 0] = 6; //@line 23792
    HEAP8[($385 + 1 & 255) + ($80 + 4) >> 0] = -1; //@line 23796
    HEAP8[$64 >> 0] = $385 + 3 << 24 >> 24; //@line 23798
    HEAP8[($385 + 2 & 255) + ($80 + 4) >> 0] = $86; //@line 23801
    HEAP8[$112 >> 0] = 1; //@line 23802
    $$0$be = $127; //@line 23803
    $$0107$be = 0; //@line 23803
    continue L5;
    break;
   }
  case 8:
   {
    $489 = $$0$be + 2 << 24 >> 24; //@line 23808
    $493 = HEAP8[$88 + ($127 & 255) >> 0] & 15; //@line 23812
    $497 = ($493 + ($493 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 23817
    HEAP32[$40 >> 2] = $497; //@line 23818
    HEAP32[$6 >> 2] = $497 + 1e3; //@line 23820
    $502 = HEAP8[$64 >> 0] | 0; //@line 23824
    $503 = $502 & 255; //@line 23825
    if ((128 - (HEAPU8[$92 >> 0] | 0) | 0) <= ($503 | 0)) {
     $$0$be = $489; //@line 23828
     $$0107$be = -1010; //@line 23828
     continue L5;
    }
    HEAP8[$64 >> 0] = $502 + 1 << 24 >> 24; //@line 23833
    HEAP8[$80 + 4 + $503 >> 0] = 8; //@line 23834
    HEAP8[$44 >> 0] = 1; //@line 23835
    HEAP8[$112 >> 0] = 1; //@line 23836
    $$0$be = $489; //@line 23837
    $$0107$be = 0; //@line 23837
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $127; //@line 23842
    $$0107$be = -1013; //@line 23842
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$124 >> 0] = 0; //@line 23848
  HEAP8[$30 >> 0] = 0; //@line 23849
  HEAP8[$18 >> 0] = 0; //@line 23850
  HEAP8[$10 >> 0] = 0; //@line 23851
  $138 = $127 & 255; //@line 23852
  $139 = $138 + -1 | 0; //@line 23853
  HEAP32[$78 >> 2] = $88 + $139; //@line 23855
  HEAP8[$108 >> 0] = $48 - $139; //@line 23858
  HEAP8[$116 >> 0] = HEAP8[$98 >> 0] | 0; //@line 23860
  HEAP8[$8 >> 0] = HEAP8[$16 >> 0] | 0; //@line 23862
  HEAP8[$20 >> 0] = HEAP8[$32 >> 0] | 0; //@line 23864
  HEAP8[$36 >> 0] = HEAP8[$46 >> 0] | 0; //@line 23866
  HEAP8[$74 >> 0] = HEAP8[$56 >> 0] | 0; //@line 23868
  $150 = HEAP32[(HEAP32[$82 >> 2] | 0) + 36 >> 2] | 0; //@line 23871
  $ReallocAsyncCtx = _emscripten_realloc_async_context(240) | 0; //@line 23872
  $151 = FUNCTION_TABLE_iiiiiii[$150 & 3]($66, $120, $124, $30, $18, $10) | 0; //@line 23873
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 23876
   $152 = $ReallocAsyncCtx + 4 | 0; //@line 23877
   HEAP32[$152 >> 2] = $2; //@line 23878
   $153 = $ReallocAsyncCtx + 8 | 0; //@line 23879
   HEAP32[$153 >> 2] = $4; //@line 23880
   $154 = $ReallocAsyncCtx + 12 | 0; //@line 23881
   HEAP32[$154 >> 2] = $6; //@line 23882
   $155 = $ReallocAsyncCtx + 16 | 0; //@line 23883
   HEAP32[$155 >> 2] = $8; //@line 23884
   $156 = $ReallocAsyncCtx + 20 | 0; //@line 23885
   HEAP32[$156 >> 2] = $10; //@line 23886
   $157 = $ReallocAsyncCtx + 24 | 0; //@line 23887
   HEAP32[$157 >> 2] = $12; //@line 23888
   $158 = $ReallocAsyncCtx + 28 | 0; //@line 23889
   HEAP32[$158 >> 2] = $14; //@line 23890
   $159 = $ReallocAsyncCtx + 32 | 0; //@line 23891
   HEAP32[$159 >> 2] = $16; //@line 23892
   $160 = $ReallocAsyncCtx + 36 | 0; //@line 23893
   HEAP32[$160 >> 2] = $18; //@line 23894
   $161 = $ReallocAsyncCtx + 40 | 0; //@line 23895
   HEAP32[$161 >> 2] = $20; //@line 23896
   $162 = $ReallocAsyncCtx + 44 | 0; //@line 23897
   HEAP32[$162 >> 2] = $22; //@line 23898
   $163 = $ReallocAsyncCtx + 48 | 0; //@line 23899
   HEAP32[$163 >> 2] = $24; //@line 23900
   $164 = $ReallocAsyncCtx + 52 | 0; //@line 23901
   HEAP32[$164 >> 2] = $26; //@line 23902
   $165 = $ReallocAsyncCtx + 56 | 0; //@line 23903
   HEAP32[$165 >> 2] = $30; //@line 23904
   $166 = $ReallocAsyncCtx + 60 | 0; //@line 23905
   HEAP32[$166 >> 2] = $32; //@line 23906
   $167 = $ReallocAsyncCtx + 64 | 0; //@line 23907
   HEAP32[$167 >> 2] = $34; //@line 23908
   $168 = $ReallocAsyncCtx + 68 | 0; //@line 23909
   HEAP32[$168 >> 2] = $36; //@line 23910
   $169 = $ReallocAsyncCtx + 72 | 0; //@line 23911
   HEAP32[$169 >> 2] = $38; //@line 23912
   $170 = $ReallocAsyncCtx + 76 | 0; //@line 23913
   HEAP32[$170 >> 2] = $40; //@line 23914
   $171 = $ReallocAsyncCtx + 80 | 0; //@line 23915
   HEAP32[$171 >> 2] = $42; //@line 23916
   $172 = $ReallocAsyncCtx + 84 | 0; //@line 23917
   HEAP32[$172 >> 2] = $44; //@line 23918
   $173 = $ReallocAsyncCtx + 88 | 0; //@line 23919
   HEAP32[$173 >> 2] = $46; //@line 23920
   $174 = $ReallocAsyncCtx + 92 | 0; //@line 23921
   HEAP32[$174 >> 2] = $48; //@line 23922
   $175 = $ReallocAsyncCtx + 96 | 0; //@line 23923
   HEAP32[$175 >> 2] = $52; //@line 23924
   $176 = $ReallocAsyncCtx + 100 | 0; //@line 23925
   HEAP32[$176 >> 2] = $54; //@line 23926
   $177 = $ReallocAsyncCtx + 104 | 0; //@line 23927
   HEAP32[$177 >> 2] = $56; //@line 23928
   $178 = $ReallocAsyncCtx + 108 | 0; //@line 23929
   HEAP32[$178 >> 2] = $58; //@line 23930
   $179 = $ReallocAsyncCtx + 112 | 0; //@line 23931
   HEAP32[$179 >> 2] = $60; //@line 23932
   $180 = $ReallocAsyncCtx + 116 | 0; //@line 23933
   HEAP32[$180 >> 2] = $62; //@line 23934
   $181 = $ReallocAsyncCtx + 120 | 0; //@line 23935
   HEAP32[$181 >> 2] = $64; //@line 23936
   $182 = $ReallocAsyncCtx + 124 | 0; //@line 23937
   HEAP32[$182 >> 2] = $66; //@line 23938
   $183 = $ReallocAsyncCtx + 128 | 0; //@line 23939
   HEAP32[$183 >> 2] = $68; //@line 23940
   $184 = $ReallocAsyncCtx + 132 | 0; //@line 23941
   HEAP32[$184 >> 2] = $72; //@line 23942
   $185 = $ReallocAsyncCtx + 136 | 0; //@line 23943
   HEAP32[$185 >> 2] = $74; //@line 23944
   $186 = $ReallocAsyncCtx + 140 | 0; //@line 23945
   HEAP32[$186 >> 2] = $76; //@line 23946
   $187 = $ReallocAsyncCtx + 144 | 0; //@line 23947
   HEAP32[$187 >> 2] = $78; //@line 23948
   $188 = $ReallocAsyncCtx + 148 | 0; //@line 23949
   HEAP32[$188 >> 2] = $80; //@line 23950
   $189 = $ReallocAsyncCtx + 152 | 0; //@line 23951
   HEAP32[$189 >> 2] = $82; //@line 23952
   $190 = $ReallocAsyncCtx + 156 | 0; //@line 23953
   HEAP32[$190 >> 2] = $138; //@line 23954
   $191 = $ReallocAsyncCtx + 160 | 0; //@line 23955
   HEAP32[$191 >> 2] = $84; //@line 23956
   $192 = $ReallocAsyncCtx + 164 | 0; //@line 23957
   HEAP8[$192 >> 0] = $86; //@line 23958
   $193 = $ReallocAsyncCtx + 168 | 0; //@line 23959
   HEAP32[$193 >> 2] = $88; //@line 23960
   $194 = $ReallocAsyncCtx + 172 | 0; //@line 23961
   HEAP32[$194 >> 2] = $$0107$be; //@line 23962
   $195 = $ReallocAsyncCtx + 176 | 0; //@line 23963
   HEAP8[$195 >> 0] = $90; //@line 23964
   $196 = $ReallocAsyncCtx + 180 | 0; //@line 23965
   HEAP32[$196 >> 2] = $92; //@line 23966
   $197 = $ReallocAsyncCtx + 184 | 0; //@line 23967
   HEAP8[$197 >> 0] = $94; //@line 23968
   $198 = $ReallocAsyncCtx + 188 | 0; //@line 23969
   HEAP32[$198 >> 2] = $98; //@line 23970
   $199 = $ReallocAsyncCtx + 192 | 0; //@line 23971
   HEAP32[$199 >> 2] = $100; //@line 23972
   $200 = $ReallocAsyncCtx + 196 | 0; //@line 23973
   HEAP32[$200 >> 2] = $102; //@line 23974
   $201 = $ReallocAsyncCtx + 200 | 0; //@line 23975
   HEAP32[$201 >> 2] = $104; //@line 23976
   $202 = $ReallocAsyncCtx + 204 | 0; //@line 23977
   HEAP32[$202 >> 2] = $106; //@line 23978
   $203 = $ReallocAsyncCtx + 208 | 0; //@line 23979
   HEAP32[$203 >> 2] = $108; //@line 23980
   $204 = $ReallocAsyncCtx + 212 | 0; //@line 23981
   HEAP32[$204 >> 2] = $112; //@line 23982
   $205 = $ReallocAsyncCtx + 216 | 0; //@line 23983
   HEAP32[$205 >> 2] = $114; //@line 23984
   $206 = $ReallocAsyncCtx + 220 | 0; //@line 23985
   HEAP32[$206 >> 2] = $116; //@line 23986
   $207 = $ReallocAsyncCtx + 224 | 0; //@line 23987
   HEAP32[$207 >> 2] = $118; //@line 23988
   $208 = $ReallocAsyncCtx + 228 | 0; //@line 23989
   HEAP32[$208 >> 2] = $120; //@line 23990
   $209 = $ReallocAsyncCtx + 232 | 0; //@line 23991
   HEAP32[$209 >> 2] = $122; //@line 23992
   $210 = $ReallocAsyncCtx + 236 | 0; //@line 23993
   HEAP32[$210 >> 2] = $124; //@line 23994
   sp = STACKTOP; //@line 23995
   return;
  }
  HEAP8[___async_retval >> 0] = $151; //@line 23999
  ___async_unwind = 0; //@line 24000
  HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 24001
  $152 = $ReallocAsyncCtx + 4 | 0; //@line 24002
  HEAP32[$152 >> 2] = $2; //@line 24003
  $153 = $ReallocAsyncCtx + 8 | 0; //@line 24004
  HEAP32[$153 >> 2] = $4; //@line 24005
  $154 = $ReallocAsyncCtx + 12 | 0; //@line 24006
  HEAP32[$154 >> 2] = $6; //@line 24007
  $155 = $ReallocAsyncCtx + 16 | 0; //@line 24008
  HEAP32[$155 >> 2] = $8; //@line 24009
  $156 = $ReallocAsyncCtx + 20 | 0; //@line 24010
  HEAP32[$156 >> 2] = $10; //@line 24011
  $157 = $ReallocAsyncCtx + 24 | 0; //@line 24012
  HEAP32[$157 >> 2] = $12; //@line 24013
  $158 = $ReallocAsyncCtx + 28 | 0; //@line 24014
  HEAP32[$158 >> 2] = $14; //@line 24015
  $159 = $ReallocAsyncCtx + 32 | 0; //@line 24016
  HEAP32[$159 >> 2] = $16; //@line 24017
  $160 = $ReallocAsyncCtx + 36 | 0; //@line 24018
  HEAP32[$160 >> 2] = $18; //@line 24019
  $161 = $ReallocAsyncCtx + 40 | 0; //@line 24020
  HEAP32[$161 >> 2] = $20; //@line 24021
  $162 = $ReallocAsyncCtx + 44 | 0; //@line 24022
  HEAP32[$162 >> 2] = $22; //@line 24023
  $163 = $ReallocAsyncCtx + 48 | 0; //@line 24024
  HEAP32[$163 >> 2] = $24; //@line 24025
  $164 = $ReallocAsyncCtx + 52 | 0; //@line 24026
  HEAP32[$164 >> 2] = $26; //@line 24027
  $165 = $ReallocAsyncCtx + 56 | 0; //@line 24028
  HEAP32[$165 >> 2] = $30; //@line 24029
  $166 = $ReallocAsyncCtx + 60 | 0; //@line 24030
  HEAP32[$166 >> 2] = $32; //@line 24031
  $167 = $ReallocAsyncCtx + 64 | 0; //@line 24032
  HEAP32[$167 >> 2] = $34; //@line 24033
  $168 = $ReallocAsyncCtx + 68 | 0; //@line 24034
  HEAP32[$168 >> 2] = $36; //@line 24035
  $169 = $ReallocAsyncCtx + 72 | 0; //@line 24036
  HEAP32[$169 >> 2] = $38; //@line 24037
  $170 = $ReallocAsyncCtx + 76 | 0; //@line 24038
  HEAP32[$170 >> 2] = $40; //@line 24039
  $171 = $ReallocAsyncCtx + 80 | 0; //@line 24040
  HEAP32[$171 >> 2] = $42; //@line 24041
  $172 = $ReallocAsyncCtx + 84 | 0; //@line 24042
  HEAP32[$172 >> 2] = $44; //@line 24043
  $173 = $ReallocAsyncCtx + 88 | 0; //@line 24044
  HEAP32[$173 >> 2] = $46; //@line 24045
  $174 = $ReallocAsyncCtx + 92 | 0; //@line 24046
  HEAP32[$174 >> 2] = $48; //@line 24047
  $175 = $ReallocAsyncCtx + 96 | 0; //@line 24048
  HEAP32[$175 >> 2] = $52; //@line 24049
  $176 = $ReallocAsyncCtx + 100 | 0; //@line 24050
  HEAP32[$176 >> 2] = $54; //@line 24051
  $177 = $ReallocAsyncCtx + 104 | 0; //@line 24052
  HEAP32[$177 >> 2] = $56; //@line 24053
  $178 = $ReallocAsyncCtx + 108 | 0; //@line 24054
  HEAP32[$178 >> 2] = $58; //@line 24055
  $179 = $ReallocAsyncCtx + 112 | 0; //@line 24056
  HEAP32[$179 >> 2] = $60; //@line 24057
  $180 = $ReallocAsyncCtx + 116 | 0; //@line 24058
  HEAP32[$180 >> 2] = $62; //@line 24059
  $181 = $ReallocAsyncCtx + 120 | 0; //@line 24060
  HEAP32[$181 >> 2] = $64; //@line 24061
  $182 = $ReallocAsyncCtx + 124 | 0; //@line 24062
  HEAP32[$182 >> 2] = $66; //@line 24063
  $183 = $ReallocAsyncCtx + 128 | 0; //@line 24064
  HEAP32[$183 >> 2] = $68; //@line 24065
  $184 = $ReallocAsyncCtx + 132 | 0; //@line 24066
  HEAP32[$184 >> 2] = $72; //@line 24067
  $185 = $ReallocAsyncCtx + 136 | 0; //@line 24068
  HEAP32[$185 >> 2] = $74; //@line 24069
  $186 = $ReallocAsyncCtx + 140 | 0; //@line 24070
  HEAP32[$186 >> 2] = $76; //@line 24071
  $187 = $ReallocAsyncCtx + 144 | 0; //@line 24072
  HEAP32[$187 >> 2] = $78; //@line 24073
  $188 = $ReallocAsyncCtx + 148 | 0; //@line 24074
  HEAP32[$188 >> 2] = $80; //@line 24075
  $189 = $ReallocAsyncCtx + 152 | 0; //@line 24076
  HEAP32[$189 >> 2] = $82; //@line 24077
  $190 = $ReallocAsyncCtx + 156 | 0; //@line 24078
  HEAP32[$190 >> 2] = $138; //@line 24079
  $191 = $ReallocAsyncCtx + 160 | 0; //@line 24080
  HEAP32[$191 >> 2] = $84; //@line 24081
  $192 = $ReallocAsyncCtx + 164 | 0; //@line 24082
  HEAP8[$192 >> 0] = $86; //@line 24083
  $193 = $ReallocAsyncCtx + 168 | 0; //@line 24084
  HEAP32[$193 >> 2] = $88; //@line 24085
  $194 = $ReallocAsyncCtx + 172 | 0; //@line 24086
  HEAP32[$194 >> 2] = $$0107$be; //@line 24087
  $195 = $ReallocAsyncCtx + 176 | 0; //@line 24088
  HEAP8[$195 >> 0] = $90; //@line 24089
  $196 = $ReallocAsyncCtx + 180 | 0; //@line 24090
  HEAP32[$196 >> 2] = $92; //@line 24091
  $197 = $ReallocAsyncCtx + 184 | 0; //@line 24092
  HEAP8[$197 >> 0] = $94; //@line 24093
  $198 = $ReallocAsyncCtx + 188 | 0; //@line 24094
  HEAP32[$198 >> 2] = $98; //@line 24095
  $199 = $ReallocAsyncCtx + 192 | 0; //@line 24096
  HEAP32[$199 >> 2] = $100; //@line 24097
  $200 = $ReallocAsyncCtx + 196 | 0; //@line 24098
  HEAP32[$200 >> 2] = $102; //@line 24099
  $201 = $ReallocAsyncCtx + 200 | 0; //@line 24100
  HEAP32[$201 >> 2] = $104; //@line 24101
  $202 = $ReallocAsyncCtx + 204 | 0; //@line 24102
  HEAP32[$202 >> 2] = $106; //@line 24103
  $203 = $ReallocAsyncCtx + 208 | 0; //@line 24104
  HEAP32[$203 >> 2] = $108; //@line 24105
  $204 = $ReallocAsyncCtx + 212 | 0; //@line 24106
  HEAP32[$204 >> 2] = $112; //@line 24107
  $205 = $ReallocAsyncCtx + 216 | 0; //@line 24108
  HEAP32[$205 >> 2] = $114; //@line 24109
  $206 = $ReallocAsyncCtx + 220 | 0; //@line 24110
  HEAP32[$206 >> 2] = $116; //@line 24111
  $207 = $ReallocAsyncCtx + 224 | 0; //@line 24112
  HEAP32[$207 >> 2] = $118; //@line 24113
  $208 = $ReallocAsyncCtx + 228 | 0; //@line 24114
  HEAP32[$208 >> 2] = $120; //@line 24115
  $209 = $ReallocAsyncCtx + 232 | 0; //@line 24116
  HEAP32[$209 >> 2] = $122; //@line 24117
  $210 = $ReallocAsyncCtx + 236 | 0; //@line 24118
  HEAP32[$210 >> 2] = $124; //@line 24119
  sp = STACKTOP; //@line 24120
  return;
 } else if ((label | 0) == 9) {
  $229 = HEAP8[$88 + ($127 & 255) >> 0] | 0; //@line 24126
  HEAP8[$26 >> 0] = ($229 & 255) >>> 4 & 7; //@line 24131
  HEAP8[$106 >> 0] = $229 & 15; //@line 24133
  $248 = $$0$be + 5 << 24 >> 24; //@line 24147
  HEAP32[$34 >> 2] = (HEAPU8[$88 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$88 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$88 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 24155
  $258 = HEAP32[(HEAP32[$2 >> 2] | 0) + 40 >> 2] | 0; //@line 24158
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(236) | 0; //@line 24159
  $259 = FUNCTION_TABLE_iii[$258 & 15]($66, $12) | 0; //@line 24160
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 24163
   $260 = $ReallocAsyncCtx2 + 4 | 0; //@line 24164
   HEAP32[$260 >> 2] = $2; //@line 24165
   $261 = $ReallocAsyncCtx2 + 8 | 0; //@line 24166
   HEAP32[$261 >> 2] = $4; //@line 24167
   $262 = $ReallocAsyncCtx2 + 12 | 0; //@line 24168
   HEAP32[$262 >> 2] = $6; //@line 24169
   $263 = $ReallocAsyncCtx2 + 16 | 0; //@line 24170
   HEAP32[$263 >> 2] = $8; //@line 24171
   $264 = $ReallocAsyncCtx2 + 20 | 0; //@line 24172
   HEAP32[$264 >> 2] = $10; //@line 24173
   $265 = $ReallocAsyncCtx2 + 24 | 0; //@line 24174
   HEAP32[$265 >> 2] = $12; //@line 24175
   $266 = $ReallocAsyncCtx2 + 28 | 0; //@line 24176
   HEAP32[$266 >> 2] = $14; //@line 24177
   $267 = $ReallocAsyncCtx2 + 32 | 0; //@line 24178
   HEAP32[$267 >> 2] = $16; //@line 24179
   $268 = $ReallocAsyncCtx2 + 36 | 0; //@line 24180
   HEAP32[$268 >> 2] = $18; //@line 24181
   $269 = $ReallocAsyncCtx2 + 40 | 0; //@line 24182
   HEAP32[$269 >> 2] = $20; //@line 24183
   $270 = $ReallocAsyncCtx2 + 44 | 0; //@line 24184
   HEAP32[$270 >> 2] = $22; //@line 24185
   $271 = $ReallocAsyncCtx2 + 48 | 0; //@line 24186
   HEAP32[$271 >> 2] = $24; //@line 24187
   $272 = $ReallocAsyncCtx2 + 52 | 0; //@line 24188
   HEAP32[$272 >> 2] = $26; //@line 24189
   $273 = $ReallocAsyncCtx2 + 56 | 0; //@line 24190
   HEAP32[$273 >> 2] = $30; //@line 24191
   $274 = $ReallocAsyncCtx2 + 60 | 0; //@line 24192
   HEAP32[$274 >> 2] = $32; //@line 24193
   $275 = $ReallocAsyncCtx2 + 64 | 0; //@line 24194
   HEAP32[$275 >> 2] = $34; //@line 24195
   $276 = $ReallocAsyncCtx2 + 68 | 0; //@line 24196
   HEAP32[$276 >> 2] = $36; //@line 24197
   $277 = $ReallocAsyncCtx2 + 72 | 0; //@line 24198
   HEAP32[$277 >> 2] = $38; //@line 24199
   $278 = $ReallocAsyncCtx2 + 76 | 0; //@line 24200
   HEAP32[$278 >> 2] = $40; //@line 24201
   $279 = $ReallocAsyncCtx2 + 80 | 0; //@line 24202
   HEAP32[$279 >> 2] = $42; //@line 24203
   $280 = $ReallocAsyncCtx2 + 84 | 0; //@line 24204
   HEAP32[$280 >> 2] = $44; //@line 24205
   $281 = $ReallocAsyncCtx2 + 88 | 0; //@line 24206
   HEAP32[$281 >> 2] = $46; //@line 24207
   $282 = $ReallocAsyncCtx2 + 92 | 0; //@line 24208
   HEAP32[$282 >> 2] = $48; //@line 24209
   $283 = $ReallocAsyncCtx2 + 96 | 0; //@line 24210
   HEAP32[$283 >> 2] = $52; //@line 24211
   $284 = $ReallocAsyncCtx2 + 100 | 0; //@line 24212
   HEAP32[$284 >> 2] = $54; //@line 24213
   $285 = $ReallocAsyncCtx2 + 104 | 0; //@line 24214
   HEAP32[$285 >> 2] = $56; //@line 24215
   $286 = $ReallocAsyncCtx2 + 108 | 0; //@line 24216
   HEAP32[$286 >> 2] = $58; //@line 24217
   $287 = $ReallocAsyncCtx2 + 112 | 0; //@line 24218
   HEAP32[$287 >> 2] = $60; //@line 24219
   $288 = $ReallocAsyncCtx2 + 116 | 0; //@line 24220
   HEAP32[$288 >> 2] = $62; //@line 24221
   $289 = $ReallocAsyncCtx2 + 120 | 0; //@line 24222
   HEAP32[$289 >> 2] = $64; //@line 24223
   $290 = $ReallocAsyncCtx2 + 124 | 0; //@line 24224
   HEAP32[$290 >> 2] = $66; //@line 24225
   $291 = $ReallocAsyncCtx2 + 128 | 0; //@line 24226
   HEAP32[$291 >> 2] = $68; //@line 24227
   $292 = $ReallocAsyncCtx2 + 132 | 0; //@line 24228
   HEAP32[$292 >> 2] = $72; //@line 24229
   $293 = $ReallocAsyncCtx2 + 136 | 0; //@line 24230
   HEAP32[$293 >> 2] = $74; //@line 24231
   $294 = $ReallocAsyncCtx2 + 140 | 0; //@line 24232
   HEAP32[$294 >> 2] = $76; //@line 24233
   $295 = $ReallocAsyncCtx2 + 144 | 0; //@line 24234
   HEAP32[$295 >> 2] = $78; //@line 24235
   $296 = $ReallocAsyncCtx2 + 148 | 0; //@line 24236
   HEAP32[$296 >> 2] = $80; //@line 24237
   $297 = $ReallocAsyncCtx2 + 152 | 0; //@line 24238
   HEAP32[$297 >> 2] = $82; //@line 24239
   $298 = $ReallocAsyncCtx2 + 156 | 0; //@line 24240
   HEAP32[$298 >> 2] = $84; //@line 24241
   $299 = $ReallocAsyncCtx2 + 160 | 0; //@line 24242
   HEAP8[$299 >> 0] = $86; //@line 24243
   $300 = $ReallocAsyncCtx2 + 164 | 0; //@line 24244
   HEAP32[$300 >> 2] = $88; //@line 24245
   $301 = $ReallocAsyncCtx2 + 168 | 0; //@line 24246
   HEAP8[$301 >> 0] = $90; //@line 24247
   $302 = $ReallocAsyncCtx2 + 172 | 0; //@line 24248
   HEAP32[$302 >> 2] = $92; //@line 24249
   $303 = $ReallocAsyncCtx2 + 176 | 0; //@line 24250
   HEAP8[$303 >> 0] = $94; //@line 24251
   $304 = $ReallocAsyncCtx2 + 180 | 0; //@line 24252
   HEAP32[$304 >> 2] = $98; //@line 24253
   $305 = $ReallocAsyncCtx2 + 184 | 0; //@line 24254
   HEAP32[$305 >> 2] = $100; //@line 24255
   $306 = $ReallocAsyncCtx2 + 188 | 0; //@line 24256
   HEAP32[$306 >> 2] = $102; //@line 24257
   $307 = $ReallocAsyncCtx2 + 192 | 0; //@line 24258
   HEAP32[$307 >> 2] = $104; //@line 24259
   $308 = $ReallocAsyncCtx2 + 196 | 0; //@line 24260
   HEAP32[$308 >> 2] = $106; //@line 24261
   $309 = $ReallocAsyncCtx2 + 200 | 0; //@line 24262
   HEAP32[$309 >> 2] = $108; //@line 24263
   $310 = $ReallocAsyncCtx2 + 204 | 0; //@line 24264
   HEAP32[$310 >> 2] = $112; //@line 24265
   $311 = $ReallocAsyncCtx2 + 208 | 0; //@line 24266
   HEAP32[$311 >> 2] = $114; //@line 24267
   $312 = $ReallocAsyncCtx2 + 212 | 0; //@line 24268
   HEAP32[$312 >> 2] = $116; //@line 24269
   $313 = $ReallocAsyncCtx2 + 216 | 0; //@line 24270
   HEAP32[$313 >> 2] = $118; //@line 24271
   $314 = $ReallocAsyncCtx2 + 220 | 0; //@line 24272
   HEAP32[$314 >> 2] = $120; //@line 24273
   $315 = $ReallocAsyncCtx2 + 224 | 0; //@line 24274
   HEAP32[$315 >> 2] = $122; //@line 24275
   $316 = $ReallocAsyncCtx2 + 228 | 0; //@line 24276
   HEAP8[$316 >> 0] = $248; //@line 24277
   $317 = $ReallocAsyncCtx2 + 232 | 0; //@line 24278
   HEAP32[$317 >> 2] = $124; //@line 24279
   sp = STACKTOP; //@line 24280
   return;
  }
  HEAP8[___async_retval >> 0] = $259; //@line 24284
  ___async_unwind = 0; //@line 24285
  HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 24286
  $260 = $ReallocAsyncCtx2 + 4 | 0; //@line 24287
  HEAP32[$260 >> 2] = $2; //@line 24288
  $261 = $ReallocAsyncCtx2 + 8 | 0; //@line 24289
  HEAP32[$261 >> 2] = $4; //@line 24290
  $262 = $ReallocAsyncCtx2 + 12 | 0; //@line 24291
  HEAP32[$262 >> 2] = $6; //@line 24292
  $263 = $ReallocAsyncCtx2 + 16 | 0; //@line 24293
  HEAP32[$263 >> 2] = $8; //@line 24294
  $264 = $ReallocAsyncCtx2 + 20 | 0; //@line 24295
  HEAP32[$264 >> 2] = $10; //@line 24296
  $265 = $ReallocAsyncCtx2 + 24 | 0; //@line 24297
  HEAP32[$265 >> 2] = $12; //@line 24298
  $266 = $ReallocAsyncCtx2 + 28 | 0; //@line 24299
  HEAP32[$266 >> 2] = $14; //@line 24300
  $267 = $ReallocAsyncCtx2 + 32 | 0; //@line 24301
  HEAP32[$267 >> 2] = $16; //@line 24302
  $268 = $ReallocAsyncCtx2 + 36 | 0; //@line 24303
  HEAP32[$268 >> 2] = $18; //@line 24304
  $269 = $ReallocAsyncCtx2 + 40 | 0; //@line 24305
  HEAP32[$269 >> 2] = $20; //@line 24306
  $270 = $ReallocAsyncCtx2 + 44 | 0; //@line 24307
  HEAP32[$270 >> 2] = $22; //@line 24308
  $271 = $ReallocAsyncCtx2 + 48 | 0; //@line 24309
  HEAP32[$271 >> 2] = $24; //@line 24310
  $272 = $ReallocAsyncCtx2 + 52 | 0; //@line 24311
  HEAP32[$272 >> 2] = $26; //@line 24312
  $273 = $ReallocAsyncCtx2 + 56 | 0; //@line 24313
  HEAP32[$273 >> 2] = $30; //@line 24314
  $274 = $ReallocAsyncCtx2 + 60 | 0; //@line 24315
  HEAP32[$274 >> 2] = $32; //@line 24316
  $275 = $ReallocAsyncCtx2 + 64 | 0; //@line 24317
  HEAP32[$275 >> 2] = $34; //@line 24318
  $276 = $ReallocAsyncCtx2 + 68 | 0; //@line 24319
  HEAP32[$276 >> 2] = $36; //@line 24320
  $277 = $ReallocAsyncCtx2 + 72 | 0; //@line 24321
  HEAP32[$277 >> 2] = $38; //@line 24322
  $278 = $ReallocAsyncCtx2 + 76 | 0; //@line 24323
  HEAP32[$278 >> 2] = $40; //@line 24324
  $279 = $ReallocAsyncCtx2 + 80 | 0; //@line 24325
  HEAP32[$279 >> 2] = $42; //@line 24326
  $280 = $ReallocAsyncCtx2 + 84 | 0; //@line 24327
  HEAP32[$280 >> 2] = $44; //@line 24328
  $281 = $ReallocAsyncCtx2 + 88 | 0; //@line 24329
  HEAP32[$281 >> 2] = $46; //@line 24330
  $282 = $ReallocAsyncCtx2 + 92 | 0; //@line 24331
  HEAP32[$282 >> 2] = $48; //@line 24332
  $283 = $ReallocAsyncCtx2 + 96 | 0; //@line 24333
  HEAP32[$283 >> 2] = $52; //@line 24334
  $284 = $ReallocAsyncCtx2 + 100 | 0; //@line 24335
  HEAP32[$284 >> 2] = $54; //@line 24336
  $285 = $ReallocAsyncCtx2 + 104 | 0; //@line 24337
  HEAP32[$285 >> 2] = $56; //@line 24338
  $286 = $ReallocAsyncCtx2 + 108 | 0; //@line 24339
  HEAP32[$286 >> 2] = $58; //@line 24340
  $287 = $ReallocAsyncCtx2 + 112 | 0; //@line 24341
  HEAP32[$287 >> 2] = $60; //@line 24342
  $288 = $ReallocAsyncCtx2 + 116 | 0; //@line 24343
  HEAP32[$288 >> 2] = $62; //@line 24344
  $289 = $ReallocAsyncCtx2 + 120 | 0; //@line 24345
  HEAP32[$289 >> 2] = $64; //@line 24346
  $290 = $ReallocAsyncCtx2 + 124 | 0; //@line 24347
  HEAP32[$290 >> 2] = $66; //@line 24348
  $291 = $ReallocAsyncCtx2 + 128 | 0; //@line 24349
  HEAP32[$291 >> 2] = $68; //@line 24350
  $292 = $ReallocAsyncCtx2 + 132 | 0; //@line 24351
  HEAP32[$292 >> 2] = $72; //@line 24352
  $293 = $ReallocAsyncCtx2 + 136 | 0; //@line 24353
  HEAP32[$293 >> 2] = $74; //@line 24354
  $294 = $ReallocAsyncCtx2 + 140 | 0; //@line 24355
  HEAP32[$294 >> 2] = $76; //@line 24356
  $295 = $ReallocAsyncCtx2 + 144 | 0; //@line 24357
  HEAP32[$295 >> 2] = $78; //@line 24358
  $296 = $ReallocAsyncCtx2 + 148 | 0; //@line 24359
  HEAP32[$296 >> 2] = $80; //@line 24360
  $297 = $ReallocAsyncCtx2 + 152 | 0; //@line 24361
  HEAP32[$297 >> 2] = $82; //@line 24362
  $298 = $ReallocAsyncCtx2 + 156 | 0; //@line 24363
  HEAP32[$298 >> 2] = $84; //@line 24364
  $299 = $ReallocAsyncCtx2 + 160 | 0; //@line 24365
  HEAP8[$299 >> 0] = $86; //@line 24366
  $300 = $ReallocAsyncCtx2 + 164 | 0; //@line 24367
  HEAP32[$300 >> 2] = $88; //@line 24368
  $301 = $ReallocAsyncCtx2 + 168 | 0; //@line 24369
  HEAP8[$301 >> 0] = $90; //@line 24370
  $302 = $ReallocAsyncCtx2 + 172 | 0; //@line 24371
  HEAP32[$302 >> 2] = $92; //@line 24372
  $303 = $ReallocAsyncCtx2 + 176 | 0; //@line 24373
  HEAP8[$303 >> 0] = $94; //@line 24374
  $304 = $ReallocAsyncCtx2 + 180 | 0; //@line 24375
  HEAP32[$304 >> 2] = $98; //@line 24376
  $305 = $ReallocAsyncCtx2 + 184 | 0; //@line 24377
  HEAP32[$305 >> 2] = $100; //@line 24378
  $306 = $ReallocAsyncCtx2 + 188 | 0; //@line 24379
  HEAP32[$306 >> 2] = $102; //@line 24380
  $307 = $ReallocAsyncCtx2 + 192 | 0; //@line 24381
  HEAP32[$307 >> 2] = $104; //@line 24382
  $308 = $ReallocAsyncCtx2 + 196 | 0; //@line 24383
  HEAP32[$308 >> 2] = $106; //@line 24384
  $309 = $ReallocAsyncCtx2 + 200 | 0; //@line 24385
  HEAP32[$309 >> 2] = $108; //@line 24386
  $310 = $ReallocAsyncCtx2 + 204 | 0; //@line 24387
  HEAP32[$310 >> 2] = $112; //@line 24388
  $311 = $ReallocAsyncCtx2 + 208 | 0; //@line 24389
  HEAP32[$311 >> 2] = $114; //@line 24390
  $312 = $ReallocAsyncCtx2 + 212 | 0; //@line 24391
  HEAP32[$312 >> 2] = $116; //@line 24392
  $313 = $ReallocAsyncCtx2 + 216 | 0; //@line 24393
  HEAP32[$313 >> 2] = $118; //@line 24394
  $314 = $ReallocAsyncCtx2 + 220 | 0; //@line 24395
  HEAP32[$314 >> 2] = $120; //@line 24396
  $315 = $ReallocAsyncCtx2 + 224 | 0; //@line 24397
  HEAP32[$315 >> 2] = $122; //@line 24398
  $316 = $ReallocAsyncCtx2 + 228 | 0; //@line 24399
  HEAP8[$316 >> 0] = $248; //@line 24400
  $317 = $ReallocAsyncCtx2 + 232 | 0; //@line 24401
  HEAP32[$317 >> 2] = $124; //@line 24402
  sp = STACKTOP; //@line 24403
  return;
 } else if ((label | 0) == 13) {
  $321 = HEAP32[$319 >> 2] | 0; //@line 24407
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(236) | 0; //@line 24408
  $322 = FUNCTION_TABLE_ii[$321 & 15]($72) | 0; //@line 24409
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 24412
   $323 = $ReallocAsyncCtx3 + 4 | 0; //@line 24413
   HEAP32[$323 >> 2] = $2; //@line 24414
   $324 = $ReallocAsyncCtx3 + 8 | 0; //@line 24415
   HEAP32[$324 >> 2] = $4; //@line 24416
   $325 = $ReallocAsyncCtx3 + 12 | 0; //@line 24417
   HEAP32[$325 >> 2] = $6; //@line 24418
   $326 = $ReallocAsyncCtx3 + 16 | 0; //@line 24419
   HEAP32[$326 >> 2] = $8; //@line 24420
   $327 = $ReallocAsyncCtx3 + 20 | 0; //@line 24421
   HEAP32[$327 >> 2] = $10; //@line 24422
   $328 = $ReallocAsyncCtx3 + 24 | 0; //@line 24423
   HEAP32[$328 >> 2] = $12; //@line 24424
   $329 = $ReallocAsyncCtx3 + 28 | 0; //@line 24425
   HEAP32[$329 >> 2] = $14; //@line 24426
   $330 = $ReallocAsyncCtx3 + 32 | 0; //@line 24427
   HEAP32[$330 >> 2] = $16; //@line 24428
   $331 = $ReallocAsyncCtx3 + 36 | 0; //@line 24429
   HEAP32[$331 >> 2] = $18; //@line 24430
   $332 = $ReallocAsyncCtx3 + 40 | 0; //@line 24431
   HEAP32[$332 >> 2] = $20; //@line 24432
   $333 = $ReallocAsyncCtx3 + 44 | 0; //@line 24433
   HEAP32[$333 >> 2] = $22; //@line 24434
   $334 = $ReallocAsyncCtx3 + 48 | 0; //@line 24435
   HEAP32[$334 >> 2] = $24; //@line 24436
   $335 = $ReallocAsyncCtx3 + 52 | 0; //@line 24437
   HEAP32[$335 >> 2] = $26; //@line 24438
   $336 = $ReallocAsyncCtx3 + 56 | 0; //@line 24439
   HEAP32[$336 >> 2] = $30; //@line 24440
   $337 = $ReallocAsyncCtx3 + 60 | 0; //@line 24441
   HEAP32[$337 >> 2] = $32; //@line 24442
   $338 = $ReallocAsyncCtx3 + 64 | 0; //@line 24443
   HEAP32[$338 >> 2] = $34; //@line 24444
   $339 = $ReallocAsyncCtx3 + 68 | 0; //@line 24445
   HEAP32[$339 >> 2] = $36; //@line 24446
   $340 = $ReallocAsyncCtx3 + 72 | 0; //@line 24447
   HEAP32[$340 >> 2] = $38; //@line 24448
   $341 = $ReallocAsyncCtx3 + 76 | 0; //@line 24449
   HEAP32[$341 >> 2] = $40; //@line 24450
   $342 = $ReallocAsyncCtx3 + 80 | 0; //@line 24451
   HEAP32[$342 >> 2] = $42; //@line 24452
   $343 = $ReallocAsyncCtx3 + 84 | 0; //@line 24453
   HEAP32[$343 >> 2] = $44; //@line 24454
   $344 = $ReallocAsyncCtx3 + 88 | 0; //@line 24455
   HEAP32[$344 >> 2] = $46; //@line 24456
   $345 = $ReallocAsyncCtx3 + 92 | 0; //@line 24457
   HEAP32[$345 >> 2] = $48; //@line 24458
   $346 = $ReallocAsyncCtx3 + 96 | 0; //@line 24459
   HEAP32[$346 >> 2] = $52; //@line 24460
   $347 = $ReallocAsyncCtx3 + 100 | 0; //@line 24461
   HEAP32[$347 >> 2] = $54; //@line 24462
   $348 = $ReallocAsyncCtx3 + 104 | 0; //@line 24463
   HEAP32[$348 >> 2] = $56; //@line 24464
   $349 = $ReallocAsyncCtx3 + 108 | 0; //@line 24465
   HEAP32[$349 >> 2] = $58; //@line 24466
   $350 = $ReallocAsyncCtx3 + 112 | 0; //@line 24467
   HEAP32[$350 >> 2] = $60; //@line 24468
   $351 = $ReallocAsyncCtx3 + 116 | 0; //@line 24469
   HEAP32[$351 >> 2] = $62; //@line 24470
   $352 = $ReallocAsyncCtx3 + 120 | 0; //@line 24471
   HEAP32[$352 >> 2] = $64; //@line 24472
   $353 = $ReallocAsyncCtx3 + 124 | 0; //@line 24473
   HEAP32[$353 >> 2] = $66; //@line 24474
   $354 = $ReallocAsyncCtx3 + 128 | 0; //@line 24475
   HEAP32[$354 >> 2] = $68; //@line 24476
   $355 = $ReallocAsyncCtx3 + 132 | 0; //@line 24477
   HEAP32[$355 >> 2] = $72; //@line 24478
   $356 = $ReallocAsyncCtx3 + 136 | 0; //@line 24479
   HEAP32[$356 >> 2] = $74; //@line 24480
   $357 = $ReallocAsyncCtx3 + 140 | 0; //@line 24481
   HEAP32[$357 >> 2] = $76; //@line 24482
   $358 = $ReallocAsyncCtx3 + 144 | 0; //@line 24483
   HEAP32[$358 >> 2] = $78; //@line 24484
   $359 = $ReallocAsyncCtx3 + 148 | 0; //@line 24485
   HEAP32[$359 >> 2] = $80; //@line 24486
   $360 = $ReallocAsyncCtx3 + 152 | 0; //@line 24487
   HEAP32[$360 >> 2] = $82; //@line 24488
   $361 = $ReallocAsyncCtx3 + 156 | 0; //@line 24489
   HEAP32[$361 >> 2] = $84; //@line 24490
   $362 = $ReallocAsyncCtx3 + 160 | 0; //@line 24491
   HEAP8[$362 >> 0] = $86; //@line 24492
   $363 = $ReallocAsyncCtx3 + 164 | 0; //@line 24493
   HEAP32[$363 >> 2] = $88; //@line 24494
   $364 = $ReallocAsyncCtx3 + 168 | 0; //@line 24495
   HEAP8[$364 >> 0] = $90; //@line 24496
   $365 = $ReallocAsyncCtx3 + 172 | 0; //@line 24497
   HEAP32[$365 >> 2] = $92; //@line 24498
   $366 = $ReallocAsyncCtx3 + 176 | 0; //@line 24499
   HEAP8[$366 >> 0] = $94; //@line 24500
   $367 = $ReallocAsyncCtx3 + 180 | 0; //@line 24501
   HEAP32[$367 >> 2] = $98; //@line 24502
   $368 = $ReallocAsyncCtx3 + 184 | 0; //@line 24503
   HEAP32[$368 >> 2] = $100; //@line 24504
   $369 = $ReallocAsyncCtx3 + 188 | 0; //@line 24505
   HEAP32[$369 >> 2] = $102; //@line 24506
   $370 = $ReallocAsyncCtx3 + 192 | 0; //@line 24507
   HEAP32[$370 >> 2] = $104; //@line 24508
   $371 = $ReallocAsyncCtx3 + 196 | 0; //@line 24509
   HEAP32[$371 >> 2] = $106; //@line 24510
   $372 = $ReallocAsyncCtx3 + 200 | 0; //@line 24511
   HEAP32[$372 >> 2] = $108; //@line 24512
   $373 = $ReallocAsyncCtx3 + 204 | 0; //@line 24513
   HEAP32[$373 >> 2] = $112; //@line 24514
   $374 = $ReallocAsyncCtx3 + 208 | 0; //@line 24515
   HEAP8[$374 >> 0] = $127; //@line 24516
   $375 = $ReallocAsyncCtx3 + 212 | 0; //@line 24517
   HEAP32[$375 >> 2] = $114; //@line 24518
   $376 = $ReallocAsyncCtx3 + 216 | 0; //@line 24519
   HEAP32[$376 >> 2] = $116; //@line 24520
   $377 = $ReallocAsyncCtx3 + 220 | 0; //@line 24521
   HEAP32[$377 >> 2] = $118; //@line 24522
   $378 = $ReallocAsyncCtx3 + 224 | 0; //@line 24523
   HEAP32[$378 >> 2] = $120; //@line 24524
   $379 = $ReallocAsyncCtx3 + 228 | 0; //@line 24525
   HEAP32[$379 >> 2] = $122; //@line 24526
   $380 = $ReallocAsyncCtx3 + 232 | 0; //@line 24527
   HEAP32[$380 >> 2] = $124; //@line 24528
   sp = STACKTOP; //@line 24529
   return;
  }
  HEAP8[___async_retval >> 0] = $322; //@line 24533
  ___async_unwind = 0; //@line 24534
  HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 24535
  $323 = $ReallocAsyncCtx3 + 4 | 0; //@line 24536
  HEAP32[$323 >> 2] = $2; //@line 24537
  $324 = $ReallocAsyncCtx3 + 8 | 0; //@line 24538
  HEAP32[$324 >> 2] = $4; //@line 24539
  $325 = $ReallocAsyncCtx3 + 12 | 0; //@line 24540
  HEAP32[$325 >> 2] = $6; //@line 24541
  $326 = $ReallocAsyncCtx3 + 16 | 0; //@line 24542
  HEAP32[$326 >> 2] = $8; //@line 24543
  $327 = $ReallocAsyncCtx3 + 20 | 0; //@line 24544
  HEAP32[$327 >> 2] = $10; //@line 24545
  $328 = $ReallocAsyncCtx3 + 24 | 0; //@line 24546
  HEAP32[$328 >> 2] = $12; //@line 24547
  $329 = $ReallocAsyncCtx3 + 28 | 0; //@line 24548
  HEAP32[$329 >> 2] = $14; //@line 24549
  $330 = $ReallocAsyncCtx3 + 32 | 0; //@line 24550
  HEAP32[$330 >> 2] = $16; //@line 24551
  $331 = $ReallocAsyncCtx3 + 36 | 0; //@line 24552
  HEAP32[$331 >> 2] = $18; //@line 24553
  $332 = $ReallocAsyncCtx3 + 40 | 0; //@line 24554
  HEAP32[$332 >> 2] = $20; //@line 24555
  $333 = $ReallocAsyncCtx3 + 44 | 0; //@line 24556
  HEAP32[$333 >> 2] = $22; //@line 24557
  $334 = $ReallocAsyncCtx3 + 48 | 0; //@line 24558
  HEAP32[$334 >> 2] = $24; //@line 24559
  $335 = $ReallocAsyncCtx3 + 52 | 0; //@line 24560
  HEAP32[$335 >> 2] = $26; //@line 24561
  $336 = $ReallocAsyncCtx3 + 56 | 0; //@line 24562
  HEAP32[$336 >> 2] = $30; //@line 24563
  $337 = $ReallocAsyncCtx3 + 60 | 0; //@line 24564
  HEAP32[$337 >> 2] = $32; //@line 24565
  $338 = $ReallocAsyncCtx3 + 64 | 0; //@line 24566
  HEAP32[$338 >> 2] = $34; //@line 24567
  $339 = $ReallocAsyncCtx3 + 68 | 0; //@line 24568
  HEAP32[$339 >> 2] = $36; //@line 24569
  $340 = $ReallocAsyncCtx3 + 72 | 0; //@line 24570
  HEAP32[$340 >> 2] = $38; //@line 24571
  $341 = $ReallocAsyncCtx3 + 76 | 0; //@line 24572
  HEAP32[$341 >> 2] = $40; //@line 24573
  $342 = $ReallocAsyncCtx3 + 80 | 0; //@line 24574
  HEAP32[$342 >> 2] = $42; //@line 24575
  $343 = $ReallocAsyncCtx3 + 84 | 0; //@line 24576
  HEAP32[$343 >> 2] = $44; //@line 24577
  $344 = $ReallocAsyncCtx3 + 88 | 0; //@line 24578
  HEAP32[$344 >> 2] = $46; //@line 24579
  $345 = $ReallocAsyncCtx3 + 92 | 0; //@line 24580
  HEAP32[$345 >> 2] = $48; //@line 24581
  $346 = $ReallocAsyncCtx3 + 96 | 0; //@line 24582
  HEAP32[$346 >> 2] = $52; //@line 24583
  $347 = $ReallocAsyncCtx3 + 100 | 0; //@line 24584
  HEAP32[$347 >> 2] = $54; //@line 24585
  $348 = $ReallocAsyncCtx3 + 104 | 0; //@line 24586
  HEAP32[$348 >> 2] = $56; //@line 24587
  $349 = $ReallocAsyncCtx3 + 108 | 0; //@line 24588
  HEAP32[$349 >> 2] = $58; //@line 24589
  $350 = $ReallocAsyncCtx3 + 112 | 0; //@line 24590
  HEAP32[$350 >> 2] = $60; //@line 24591
  $351 = $ReallocAsyncCtx3 + 116 | 0; //@line 24592
  HEAP32[$351 >> 2] = $62; //@line 24593
  $352 = $ReallocAsyncCtx3 + 120 | 0; //@line 24594
  HEAP32[$352 >> 2] = $64; //@line 24595
  $353 = $ReallocAsyncCtx3 + 124 | 0; //@line 24596
  HEAP32[$353 >> 2] = $66; //@line 24597
  $354 = $ReallocAsyncCtx3 + 128 | 0; //@line 24598
  HEAP32[$354 >> 2] = $68; //@line 24599
  $355 = $ReallocAsyncCtx3 + 132 | 0; //@line 24600
  HEAP32[$355 >> 2] = $72; //@line 24601
  $356 = $ReallocAsyncCtx3 + 136 | 0; //@line 24602
  HEAP32[$356 >> 2] = $74; //@line 24603
  $357 = $ReallocAsyncCtx3 + 140 | 0; //@line 24604
  HEAP32[$357 >> 2] = $76; //@line 24605
  $358 = $ReallocAsyncCtx3 + 144 | 0; //@line 24606
  HEAP32[$358 >> 2] = $78; //@line 24607
  $359 = $ReallocAsyncCtx3 + 148 | 0; //@line 24608
  HEAP32[$359 >> 2] = $80; //@line 24609
  $360 = $ReallocAsyncCtx3 + 152 | 0; //@line 24610
  HEAP32[$360 >> 2] = $82; //@line 24611
  $361 = $ReallocAsyncCtx3 + 156 | 0; //@line 24612
  HEAP32[$361 >> 2] = $84; //@line 24613
  $362 = $ReallocAsyncCtx3 + 160 | 0; //@line 24614
  HEAP8[$362 >> 0] = $86; //@line 24615
  $363 = $ReallocAsyncCtx3 + 164 | 0; //@line 24616
  HEAP32[$363 >> 2] = $88; //@line 24617
  $364 = $ReallocAsyncCtx3 + 168 | 0; //@line 24618
  HEAP8[$364 >> 0] = $90; //@line 24619
  $365 = $ReallocAsyncCtx3 + 172 | 0; //@line 24620
  HEAP32[$365 >> 2] = $92; //@line 24621
  $366 = $ReallocAsyncCtx3 + 176 | 0; //@line 24622
  HEAP8[$366 >> 0] = $94; //@line 24623
  $367 = $ReallocAsyncCtx3 + 180 | 0; //@line 24624
  HEAP32[$367 >> 2] = $98; //@line 24625
  $368 = $ReallocAsyncCtx3 + 184 | 0; //@line 24626
  HEAP32[$368 >> 2] = $100; //@line 24627
  $369 = $ReallocAsyncCtx3 + 188 | 0; //@line 24628
  HEAP32[$369 >> 2] = $102; //@line 24629
  $370 = $ReallocAsyncCtx3 + 192 | 0; //@line 24630
  HEAP32[$370 >> 2] = $104; //@line 24631
  $371 = $ReallocAsyncCtx3 + 196 | 0; //@line 24632
  HEAP32[$371 >> 2] = $106; //@line 24633
  $372 = $ReallocAsyncCtx3 + 200 | 0; //@line 24634
  HEAP32[$372 >> 2] = $108; //@line 24635
  $373 = $ReallocAsyncCtx3 + 204 | 0; //@line 24636
  HEAP32[$373 >> 2] = $112; //@line 24637
  $374 = $ReallocAsyncCtx3 + 208 | 0; //@line 24638
  HEAP8[$374 >> 0] = $127; //@line 24639
  $375 = $ReallocAsyncCtx3 + 212 | 0; //@line 24640
  HEAP32[$375 >> 2] = $114; //@line 24641
  $376 = $ReallocAsyncCtx3 + 216 | 0; //@line 24642
  HEAP32[$376 >> 2] = $116; //@line 24643
  $377 = $ReallocAsyncCtx3 + 220 | 0; //@line 24644
  HEAP32[$377 >> 2] = $118; //@line 24645
  $378 = $ReallocAsyncCtx3 + 224 | 0; //@line 24646
  HEAP32[$378 >> 2] = $120; //@line 24647
  $379 = $ReallocAsyncCtx3 + 228 | 0; //@line 24648
  HEAP32[$379 >> 2] = $122; //@line 24649
  $380 = $ReallocAsyncCtx3 + 232 | 0; //@line 24650
  HEAP32[$380 >> 2] = $124; //@line 24651
  sp = STACKTOP; //@line 24652
  return;
 } else if ((label | 0) == 18) {
  $400 = HEAP8[$88 + ($127 & 255) >> 0] | 0; //@line 24659
  HEAP32[$122 >> 2] = (HEAPU8[$88 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$88 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$88 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 24680
  HEAP32[$102 >> 2] = 0; //@line 24681
  $421 = $$0$be + 6 << 24 >> 24; //@line 24682
  HEAP8[$104 >> 0] = HEAP8[$88 + ($$0$be + 5 & 255) >> 0] | 0; //@line 24686
  $427 = HEAP32[(HEAP32[$22 >> 2] | 0) + 8 >> 2] | 0; //@line 24689
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(236) | 0; //@line 24690
  $428 = FUNCTION_TABLE_iiii[$427 & 31]($66, $400, $4) | 0; //@line 24691
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 24694
   $429 = $ReallocAsyncCtx4 + 4 | 0; //@line 24695
   HEAP32[$429 >> 2] = $2; //@line 24696
   $430 = $ReallocAsyncCtx4 + 8 | 0; //@line 24697
   HEAP32[$430 >> 2] = $4; //@line 24698
   $431 = $ReallocAsyncCtx4 + 12 | 0; //@line 24699
   HEAP32[$431 >> 2] = $6; //@line 24700
   $432 = $ReallocAsyncCtx4 + 16 | 0; //@line 24701
   HEAP32[$432 >> 2] = $8; //@line 24702
   $433 = $ReallocAsyncCtx4 + 20 | 0; //@line 24703
   HEAP32[$433 >> 2] = $10; //@line 24704
   $434 = $ReallocAsyncCtx4 + 24 | 0; //@line 24705
   HEAP32[$434 >> 2] = $12; //@line 24706
   $435 = $ReallocAsyncCtx4 + 28 | 0; //@line 24707
   HEAP32[$435 >> 2] = $14; //@line 24708
   $436 = $ReallocAsyncCtx4 + 32 | 0; //@line 24709
   HEAP32[$436 >> 2] = $16; //@line 24710
   $437 = $ReallocAsyncCtx4 + 36 | 0; //@line 24711
   HEAP32[$437 >> 2] = $18; //@line 24712
   $438 = $ReallocAsyncCtx4 + 40 | 0; //@line 24713
   HEAP32[$438 >> 2] = $20; //@line 24714
   $439 = $ReallocAsyncCtx4 + 44 | 0; //@line 24715
   HEAP32[$439 >> 2] = $22; //@line 24716
   $440 = $ReallocAsyncCtx4 + 48 | 0; //@line 24717
   HEAP32[$440 >> 2] = $24; //@line 24718
   $441 = $ReallocAsyncCtx4 + 52 | 0; //@line 24719
   HEAP32[$441 >> 2] = $26; //@line 24720
   $442 = $ReallocAsyncCtx4 + 56 | 0; //@line 24721
   HEAP32[$442 >> 2] = $30; //@line 24722
   $443 = $ReallocAsyncCtx4 + 60 | 0; //@line 24723
   HEAP32[$443 >> 2] = $32; //@line 24724
   $444 = $ReallocAsyncCtx4 + 64 | 0; //@line 24725
   HEAP32[$444 >> 2] = $34; //@line 24726
   $445 = $ReallocAsyncCtx4 + 68 | 0; //@line 24727
   HEAP32[$445 >> 2] = $36; //@line 24728
   $446 = $ReallocAsyncCtx4 + 72 | 0; //@line 24729
   HEAP32[$446 >> 2] = $38; //@line 24730
   $447 = $ReallocAsyncCtx4 + 76 | 0; //@line 24731
   HEAP32[$447 >> 2] = $40; //@line 24732
   $448 = $ReallocAsyncCtx4 + 80 | 0; //@line 24733
   HEAP32[$448 >> 2] = $42; //@line 24734
   $449 = $ReallocAsyncCtx4 + 84 | 0; //@line 24735
   HEAP32[$449 >> 2] = $44; //@line 24736
   $450 = $ReallocAsyncCtx4 + 88 | 0; //@line 24737
   HEAP32[$450 >> 2] = $46; //@line 24738
   $451 = $ReallocAsyncCtx4 + 92 | 0; //@line 24739
   HEAP32[$451 >> 2] = $48; //@line 24740
   $452 = $ReallocAsyncCtx4 + 96 | 0; //@line 24741
   HEAP32[$452 >> 2] = $52; //@line 24742
   $453 = $ReallocAsyncCtx4 + 100 | 0; //@line 24743
   HEAP32[$453 >> 2] = $54; //@line 24744
   $454 = $ReallocAsyncCtx4 + 104 | 0; //@line 24745
   HEAP32[$454 >> 2] = $56; //@line 24746
   $455 = $ReallocAsyncCtx4 + 108 | 0; //@line 24747
   HEAP32[$455 >> 2] = $58; //@line 24748
   $456 = $ReallocAsyncCtx4 + 112 | 0; //@line 24749
   HEAP32[$456 >> 2] = $60; //@line 24750
   $457 = $ReallocAsyncCtx4 + 116 | 0; //@line 24751
   HEAP32[$457 >> 2] = $62; //@line 24752
   $458 = $ReallocAsyncCtx4 + 120 | 0; //@line 24753
   HEAP32[$458 >> 2] = $64; //@line 24754
   $459 = $ReallocAsyncCtx4 + 124 | 0; //@line 24755
   HEAP32[$459 >> 2] = $66; //@line 24756
   $460 = $ReallocAsyncCtx4 + 128 | 0; //@line 24757
   HEAP32[$460 >> 2] = $68; //@line 24758
   $461 = $ReallocAsyncCtx4 + 132 | 0; //@line 24759
   HEAP32[$461 >> 2] = $72; //@line 24760
   $462 = $ReallocAsyncCtx4 + 136 | 0; //@line 24761
   HEAP32[$462 >> 2] = $74; //@line 24762
   $463 = $ReallocAsyncCtx4 + 140 | 0; //@line 24763
   HEAP32[$463 >> 2] = $76; //@line 24764
   $464 = $ReallocAsyncCtx4 + 144 | 0; //@line 24765
   HEAP32[$464 >> 2] = $78; //@line 24766
   $465 = $ReallocAsyncCtx4 + 148 | 0; //@line 24767
   HEAP32[$465 >> 2] = $80; //@line 24768
   $466 = $ReallocAsyncCtx4 + 152 | 0; //@line 24769
   HEAP32[$466 >> 2] = $82; //@line 24770
   $467 = $ReallocAsyncCtx4 + 156 | 0; //@line 24771
   HEAP32[$467 >> 2] = $84; //@line 24772
   $468 = $ReallocAsyncCtx4 + 160 | 0; //@line 24773
   HEAP8[$468 >> 0] = $86; //@line 24774
   $469 = $ReallocAsyncCtx4 + 164 | 0; //@line 24775
   HEAP32[$469 >> 2] = $88; //@line 24776
   $470 = $ReallocAsyncCtx4 + 168 | 0; //@line 24777
   HEAP8[$470 >> 0] = $90; //@line 24778
   $471 = $ReallocAsyncCtx4 + 172 | 0; //@line 24779
   HEAP32[$471 >> 2] = $92; //@line 24780
   $472 = $ReallocAsyncCtx4 + 176 | 0; //@line 24781
   HEAP8[$472 >> 0] = $94; //@line 24782
   $473 = $ReallocAsyncCtx4 + 180 | 0; //@line 24783
   HEAP32[$473 >> 2] = $98; //@line 24784
   $474 = $ReallocAsyncCtx4 + 184 | 0; //@line 24785
   HEAP32[$474 >> 2] = $100; //@line 24786
   $475 = $ReallocAsyncCtx4 + 188 | 0; //@line 24787
   HEAP32[$475 >> 2] = $102; //@line 24788
   $476 = $ReallocAsyncCtx4 + 192 | 0; //@line 24789
   HEAP32[$476 >> 2] = $104; //@line 24790
   $477 = $ReallocAsyncCtx4 + 196 | 0; //@line 24791
   HEAP32[$477 >> 2] = $106; //@line 24792
   $478 = $ReallocAsyncCtx4 + 200 | 0; //@line 24793
   HEAP32[$478 >> 2] = $108; //@line 24794
   $479 = $ReallocAsyncCtx4 + 204 | 0; //@line 24795
   HEAP8[$479 >> 0] = $421; //@line 24796
   $480 = $ReallocAsyncCtx4 + 208 | 0; //@line 24797
   HEAP32[$480 >> 2] = $112; //@line 24798
   $481 = $ReallocAsyncCtx4 + 212 | 0; //@line 24799
   HEAP32[$481 >> 2] = $114; //@line 24800
   $482 = $ReallocAsyncCtx4 + 216 | 0; //@line 24801
   HEAP32[$482 >> 2] = $116; //@line 24802
   $483 = $ReallocAsyncCtx4 + 220 | 0; //@line 24803
   HEAP32[$483 >> 2] = $118; //@line 24804
   $484 = $ReallocAsyncCtx4 + 224 | 0; //@line 24805
   HEAP32[$484 >> 2] = $120; //@line 24806
   $485 = $ReallocAsyncCtx4 + 228 | 0; //@line 24807
   HEAP32[$485 >> 2] = $122; //@line 24808
   $486 = $ReallocAsyncCtx4 + 232 | 0; //@line 24809
   HEAP32[$486 >> 2] = $124; //@line 24810
   sp = STACKTOP; //@line 24811
   return;
  }
  HEAP8[___async_retval >> 0] = $428; //@line 24815
  ___async_unwind = 0; //@line 24816
  HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 24817
  $429 = $ReallocAsyncCtx4 + 4 | 0; //@line 24818
  HEAP32[$429 >> 2] = $2; //@line 24819
  $430 = $ReallocAsyncCtx4 + 8 | 0; //@line 24820
  HEAP32[$430 >> 2] = $4; //@line 24821
  $431 = $ReallocAsyncCtx4 + 12 | 0; //@line 24822
  HEAP32[$431 >> 2] = $6; //@line 24823
  $432 = $ReallocAsyncCtx4 + 16 | 0; //@line 24824
  HEAP32[$432 >> 2] = $8; //@line 24825
  $433 = $ReallocAsyncCtx4 + 20 | 0; //@line 24826
  HEAP32[$433 >> 2] = $10; //@line 24827
  $434 = $ReallocAsyncCtx4 + 24 | 0; //@line 24828
  HEAP32[$434 >> 2] = $12; //@line 24829
  $435 = $ReallocAsyncCtx4 + 28 | 0; //@line 24830
  HEAP32[$435 >> 2] = $14; //@line 24831
  $436 = $ReallocAsyncCtx4 + 32 | 0; //@line 24832
  HEAP32[$436 >> 2] = $16; //@line 24833
  $437 = $ReallocAsyncCtx4 + 36 | 0; //@line 24834
  HEAP32[$437 >> 2] = $18; //@line 24835
  $438 = $ReallocAsyncCtx4 + 40 | 0; //@line 24836
  HEAP32[$438 >> 2] = $20; //@line 24837
  $439 = $ReallocAsyncCtx4 + 44 | 0; //@line 24838
  HEAP32[$439 >> 2] = $22; //@line 24839
  $440 = $ReallocAsyncCtx4 + 48 | 0; //@line 24840
  HEAP32[$440 >> 2] = $24; //@line 24841
  $441 = $ReallocAsyncCtx4 + 52 | 0; //@line 24842
  HEAP32[$441 >> 2] = $26; //@line 24843
  $442 = $ReallocAsyncCtx4 + 56 | 0; //@line 24844
  HEAP32[$442 >> 2] = $30; //@line 24845
  $443 = $ReallocAsyncCtx4 + 60 | 0; //@line 24846
  HEAP32[$443 >> 2] = $32; //@line 24847
  $444 = $ReallocAsyncCtx4 + 64 | 0; //@line 24848
  HEAP32[$444 >> 2] = $34; //@line 24849
  $445 = $ReallocAsyncCtx4 + 68 | 0; //@line 24850
  HEAP32[$445 >> 2] = $36; //@line 24851
  $446 = $ReallocAsyncCtx4 + 72 | 0; //@line 24852
  HEAP32[$446 >> 2] = $38; //@line 24853
  $447 = $ReallocAsyncCtx4 + 76 | 0; //@line 24854
  HEAP32[$447 >> 2] = $40; //@line 24855
  $448 = $ReallocAsyncCtx4 + 80 | 0; //@line 24856
  HEAP32[$448 >> 2] = $42; //@line 24857
  $449 = $ReallocAsyncCtx4 + 84 | 0; //@line 24858
  HEAP32[$449 >> 2] = $44; //@line 24859
  $450 = $ReallocAsyncCtx4 + 88 | 0; //@line 24860
  HEAP32[$450 >> 2] = $46; //@line 24861
  $451 = $ReallocAsyncCtx4 + 92 | 0; //@line 24862
  HEAP32[$451 >> 2] = $48; //@line 24863
  $452 = $ReallocAsyncCtx4 + 96 | 0; //@line 24864
  HEAP32[$452 >> 2] = $52; //@line 24865
  $453 = $ReallocAsyncCtx4 + 100 | 0; //@line 24866
  HEAP32[$453 >> 2] = $54; //@line 24867
  $454 = $ReallocAsyncCtx4 + 104 | 0; //@line 24868
  HEAP32[$454 >> 2] = $56; //@line 24869
  $455 = $ReallocAsyncCtx4 + 108 | 0; //@line 24870
  HEAP32[$455 >> 2] = $58; //@line 24871
  $456 = $ReallocAsyncCtx4 + 112 | 0; //@line 24872
  HEAP32[$456 >> 2] = $60; //@line 24873
  $457 = $ReallocAsyncCtx4 + 116 | 0; //@line 24874
  HEAP32[$457 >> 2] = $62; //@line 24875
  $458 = $ReallocAsyncCtx4 + 120 | 0; //@line 24876
  HEAP32[$458 >> 2] = $64; //@line 24877
  $459 = $ReallocAsyncCtx4 + 124 | 0; //@line 24878
  HEAP32[$459 >> 2] = $66; //@line 24879
  $460 = $ReallocAsyncCtx4 + 128 | 0; //@line 24880
  HEAP32[$460 >> 2] = $68; //@line 24881
  $461 = $ReallocAsyncCtx4 + 132 | 0; //@line 24882
  HEAP32[$461 >> 2] = $72; //@line 24883
  $462 = $ReallocAsyncCtx4 + 136 | 0; //@line 24884
  HEAP32[$462 >> 2] = $74; //@line 24885
  $463 = $ReallocAsyncCtx4 + 140 | 0; //@line 24886
  HEAP32[$463 >> 2] = $76; //@line 24887
  $464 = $ReallocAsyncCtx4 + 144 | 0; //@line 24888
  HEAP32[$464 >> 2] = $78; //@line 24889
  $465 = $ReallocAsyncCtx4 + 148 | 0; //@line 24890
  HEAP32[$465 >> 2] = $80; //@line 24891
  $466 = $ReallocAsyncCtx4 + 152 | 0; //@line 24892
  HEAP32[$466 >> 2] = $82; //@line 24893
  $467 = $ReallocAsyncCtx4 + 156 | 0; //@line 24894
  HEAP32[$467 >> 2] = $84; //@line 24895
  $468 = $ReallocAsyncCtx4 + 160 | 0; //@line 24896
  HEAP8[$468 >> 0] = $86; //@line 24897
  $469 = $ReallocAsyncCtx4 + 164 | 0; //@line 24898
  HEAP32[$469 >> 2] = $88; //@line 24899
  $470 = $ReallocAsyncCtx4 + 168 | 0; //@line 24900
  HEAP8[$470 >> 0] = $90; //@line 24901
  $471 = $ReallocAsyncCtx4 + 172 | 0; //@line 24902
  HEAP32[$471 >> 2] = $92; //@line 24903
  $472 = $ReallocAsyncCtx4 + 176 | 0; //@line 24904
  HEAP8[$472 >> 0] = $94; //@line 24905
  $473 = $ReallocAsyncCtx4 + 180 | 0; //@line 24906
  HEAP32[$473 >> 2] = $98; //@line 24907
  $474 = $ReallocAsyncCtx4 + 184 | 0; //@line 24908
  HEAP32[$474 >> 2] = $100; //@line 24909
  $475 = $ReallocAsyncCtx4 + 188 | 0; //@line 24910
  HEAP32[$475 >> 2] = $102; //@line 24911
  $476 = $ReallocAsyncCtx4 + 192 | 0; //@line 24912
  HEAP32[$476 >> 2] = $104; //@line 24913
  $477 = $ReallocAsyncCtx4 + 196 | 0; //@line 24914
  HEAP32[$477 >> 2] = $106; //@line 24915
  $478 = $ReallocAsyncCtx4 + 200 | 0; //@line 24916
  HEAP32[$478 >> 2] = $108; //@line 24917
  $479 = $ReallocAsyncCtx4 + 204 | 0; //@line 24918
  HEAP8[$479 >> 0] = $421; //@line 24919
  $480 = $ReallocAsyncCtx4 + 208 | 0; //@line 24920
  HEAP32[$480 >> 2] = $112; //@line 24921
  $481 = $ReallocAsyncCtx4 + 212 | 0; //@line 24922
  HEAP32[$481 >> 2] = $114; //@line 24923
  $482 = $ReallocAsyncCtx4 + 216 | 0; //@line 24924
  HEAP32[$482 >> 2] = $116; //@line 24925
  $483 = $ReallocAsyncCtx4 + 220 | 0; //@line 24926
  HEAP32[$483 >> 2] = $118; //@line 24927
  $484 = $ReallocAsyncCtx4 + 224 | 0; //@line 24928
  HEAP32[$484 >> 2] = $120; //@line 24929
  $485 = $ReallocAsyncCtx4 + 228 | 0; //@line 24930
  HEAP32[$485 >> 2] = $122; //@line 24931
  $486 = $ReallocAsyncCtx4 + 232 | 0; //@line 24932
  HEAP32[$486 >> 2] = $124; //@line 24933
  sp = STACKTOP; //@line 24934
  return;
 } else if ((label | 0) == 24) {
  $507 = $$0$be + 2 << 24 >> 24; //@line 24938
  $511 = HEAPU8[$88 + ($127 & 255) >> 0] | 0; //@line 24942
  $513 = $511 >>> 5 & 1; //@line 24945
  $515 = $511 >>> 4 & 1; //@line 24948
  $518 = HEAP32[(HEAP32[$24 >> 2] | 0) + 44 >> 2] | 0; //@line 24951
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(252) | 0; //@line 24952
  $519 = FUNCTION_TABLE_iiii[$518 & 31]($66, $515, $513) | 0; //@line 24953
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 24956
   $520 = $ReallocAsyncCtx5 + 4 | 0; //@line 24957
   HEAP32[$520 >> 2] = $2; //@line 24958
   $521 = $ReallocAsyncCtx5 + 8 | 0; //@line 24959
   HEAP32[$521 >> 2] = $4; //@line 24960
   $522 = $ReallocAsyncCtx5 + 12 | 0; //@line 24961
   HEAP32[$522 >> 2] = $6; //@line 24962
   $523 = $ReallocAsyncCtx5 + 16 | 0; //@line 24963
   HEAP32[$523 >> 2] = $8; //@line 24964
   $524 = $ReallocAsyncCtx5 + 20 | 0; //@line 24965
   HEAP32[$524 >> 2] = $10; //@line 24966
   $525 = $ReallocAsyncCtx5 + 24 | 0; //@line 24967
   HEAP32[$525 >> 2] = $12; //@line 24968
   $526 = $ReallocAsyncCtx5 + 28 | 0; //@line 24969
   HEAP32[$526 >> 2] = $14; //@line 24970
   $527 = $ReallocAsyncCtx5 + 32 | 0; //@line 24971
   HEAP32[$527 >> 2] = $16; //@line 24972
   $528 = $ReallocAsyncCtx5 + 36 | 0; //@line 24973
   HEAP32[$528 >> 2] = $18; //@line 24974
   $529 = $ReallocAsyncCtx5 + 40 | 0; //@line 24975
   HEAP32[$529 >> 2] = $20; //@line 24976
   $530 = $ReallocAsyncCtx5 + 44 | 0; //@line 24977
   HEAP32[$530 >> 2] = $22; //@line 24978
   $531 = $ReallocAsyncCtx5 + 48 | 0; //@line 24979
   HEAP32[$531 >> 2] = $24; //@line 24980
   $532 = $ReallocAsyncCtx5 + 52 | 0; //@line 24981
   HEAP32[$532 >> 2] = $26; //@line 24982
   $533 = $ReallocAsyncCtx5 + 56 | 0; //@line 24983
   HEAP8[$533 >> 0] = $515; //@line 24984
   $534 = $ReallocAsyncCtx5 + 60 | 0; //@line 24985
   HEAP32[$534 >> 2] = $30; //@line 24986
   $535 = $ReallocAsyncCtx5 + 64 | 0; //@line 24987
   HEAP32[$535 >> 2] = $32; //@line 24988
   $536 = $ReallocAsyncCtx5 + 68 | 0; //@line 24989
   HEAP32[$536 >> 2] = $34; //@line 24990
   $537 = $ReallocAsyncCtx5 + 72 | 0; //@line 24991
   HEAP32[$537 >> 2] = $36; //@line 24992
   $538 = $ReallocAsyncCtx5 + 76 | 0; //@line 24993
   HEAP32[$538 >> 2] = $38; //@line 24994
   $539 = $ReallocAsyncCtx5 + 80 | 0; //@line 24995
   HEAP32[$539 >> 2] = $40; //@line 24996
   $540 = $ReallocAsyncCtx5 + 84 | 0; //@line 24997
   HEAP32[$540 >> 2] = $42; //@line 24998
   $541 = $ReallocAsyncCtx5 + 88 | 0; //@line 24999
   HEAP32[$541 >> 2] = $44; //@line 25000
   $542 = $ReallocAsyncCtx5 + 92 | 0; //@line 25001
   HEAP32[$542 >> 2] = $46; //@line 25002
   $543 = $ReallocAsyncCtx5 + 96 | 0; //@line 25003
   HEAP32[$543 >> 2] = $48; //@line 25004
   $544 = $ReallocAsyncCtx5 + 100 | 0; //@line 25005
   HEAP32[$544 >> 2] = $511; //@line 25006
   $545 = $ReallocAsyncCtx5 + 104 | 0; //@line 25007
   HEAP32[$545 >> 2] = $52; //@line 25008
   $546 = $ReallocAsyncCtx5 + 108 | 0; //@line 25009
   HEAP32[$546 >> 2] = $54; //@line 25010
   $547 = $ReallocAsyncCtx5 + 112 | 0; //@line 25011
   HEAP32[$547 >> 2] = $56; //@line 25012
   $548 = $ReallocAsyncCtx5 + 116 | 0; //@line 25013
   HEAP32[$548 >> 2] = $58; //@line 25014
   $549 = $ReallocAsyncCtx5 + 120 | 0; //@line 25015
   HEAP32[$549 >> 2] = $60; //@line 25016
   $550 = $ReallocAsyncCtx5 + 124 | 0; //@line 25017
   HEAP32[$550 >> 2] = $62; //@line 25018
   $551 = $ReallocAsyncCtx5 + 128 | 0; //@line 25019
   HEAP32[$551 >> 2] = $64; //@line 25020
   $552 = $ReallocAsyncCtx5 + 132 | 0; //@line 25021
   HEAP32[$552 >> 2] = $66; //@line 25022
   $553 = $ReallocAsyncCtx5 + 136 | 0; //@line 25023
   HEAP32[$553 >> 2] = $68; //@line 25024
   $554 = $ReallocAsyncCtx5 + 140 | 0; //@line 25025
   HEAP8[$554 >> 0] = $513; //@line 25026
   $555 = $ReallocAsyncCtx5 + 144 | 0; //@line 25027
   HEAP32[$555 >> 2] = $72; //@line 25028
   $556 = $ReallocAsyncCtx5 + 148 | 0; //@line 25029
   HEAP32[$556 >> 2] = $74; //@line 25030
   $557 = $ReallocAsyncCtx5 + 152 | 0; //@line 25031
   HEAP32[$557 >> 2] = $76; //@line 25032
   $558 = $ReallocAsyncCtx5 + 156 | 0; //@line 25033
   HEAP32[$558 >> 2] = $78; //@line 25034
   $559 = $ReallocAsyncCtx5 + 160 | 0; //@line 25035
   HEAP32[$559 >> 2] = $80; //@line 25036
   $560 = $ReallocAsyncCtx5 + 164 | 0; //@line 25037
   HEAP32[$560 >> 2] = $82; //@line 25038
   $561 = $ReallocAsyncCtx5 + 168 | 0; //@line 25039
   HEAP32[$561 >> 2] = $84; //@line 25040
   $562 = $ReallocAsyncCtx5 + 172 | 0; //@line 25041
   HEAP8[$562 >> 0] = $86; //@line 25042
   $563 = $ReallocAsyncCtx5 + 176 | 0; //@line 25043
   HEAP32[$563 >> 2] = $88; //@line 25044
   $564 = $ReallocAsyncCtx5 + 180 | 0; //@line 25045
   HEAP8[$564 >> 0] = $90; //@line 25046
   $565 = $ReallocAsyncCtx5 + 184 | 0; //@line 25047
   HEAP32[$565 >> 2] = $92; //@line 25048
   $566 = $ReallocAsyncCtx5 + 188 | 0; //@line 25049
   HEAP8[$566 >> 0] = $94; //@line 25050
   $567 = $ReallocAsyncCtx5 + 192 | 0; //@line 25051
   HEAP32[$567 >> 2] = $$0107$be; //@line 25052
   $568 = $ReallocAsyncCtx5 + 196 | 0; //@line 25053
   HEAP32[$568 >> 2] = $98; //@line 25054
   $569 = $ReallocAsyncCtx5 + 200 | 0; //@line 25055
   HEAP32[$569 >> 2] = $100; //@line 25056
   $570 = $ReallocAsyncCtx5 + 204 | 0; //@line 25057
   HEAP32[$570 >> 2] = $102; //@line 25058
   $571 = $ReallocAsyncCtx5 + 208 | 0; //@line 25059
   HEAP32[$571 >> 2] = $104; //@line 25060
   $572 = $ReallocAsyncCtx5 + 212 | 0; //@line 25061
   HEAP32[$572 >> 2] = $106; //@line 25062
   $573 = $ReallocAsyncCtx5 + 216 | 0; //@line 25063
   HEAP32[$573 >> 2] = $108; //@line 25064
   $574 = $ReallocAsyncCtx5 + 220 | 0; //@line 25065
   HEAP8[$574 >> 0] = $507; //@line 25066
   $575 = $ReallocAsyncCtx5 + 224 | 0; //@line 25067
   HEAP32[$575 >> 2] = $112; //@line 25068
   $576 = $ReallocAsyncCtx5 + 228 | 0; //@line 25069
   HEAP32[$576 >> 2] = $114; //@line 25070
   $577 = $ReallocAsyncCtx5 + 232 | 0; //@line 25071
   HEAP32[$577 >> 2] = $116; //@line 25072
   $578 = $ReallocAsyncCtx5 + 236 | 0; //@line 25073
   HEAP32[$578 >> 2] = $118; //@line 25074
   $579 = $ReallocAsyncCtx5 + 240 | 0; //@line 25075
   HEAP32[$579 >> 2] = $120; //@line 25076
   $580 = $ReallocAsyncCtx5 + 244 | 0; //@line 25077
   HEAP32[$580 >> 2] = $122; //@line 25078
   $581 = $ReallocAsyncCtx5 + 248 | 0; //@line 25079
   HEAP32[$581 >> 2] = $124; //@line 25080
   sp = STACKTOP; //@line 25081
   return;
  }
  HEAP8[___async_retval >> 0] = $519 & 1; //@line 25086
  ___async_unwind = 0; //@line 25087
  HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 25088
  $520 = $ReallocAsyncCtx5 + 4 | 0; //@line 25089
  HEAP32[$520 >> 2] = $2; //@line 25090
  $521 = $ReallocAsyncCtx5 + 8 | 0; //@line 25091
  HEAP32[$521 >> 2] = $4; //@line 25092
  $522 = $ReallocAsyncCtx5 + 12 | 0; //@line 25093
  HEAP32[$522 >> 2] = $6; //@line 25094
  $523 = $ReallocAsyncCtx5 + 16 | 0; //@line 25095
  HEAP32[$523 >> 2] = $8; //@line 25096
  $524 = $ReallocAsyncCtx5 + 20 | 0; //@line 25097
  HEAP32[$524 >> 2] = $10; //@line 25098
  $525 = $ReallocAsyncCtx5 + 24 | 0; //@line 25099
  HEAP32[$525 >> 2] = $12; //@line 25100
  $526 = $ReallocAsyncCtx5 + 28 | 0; //@line 25101
  HEAP32[$526 >> 2] = $14; //@line 25102
  $527 = $ReallocAsyncCtx5 + 32 | 0; //@line 25103
  HEAP32[$527 >> 2] = $16; //@line 25104
  $528 = $ReallocAsyncCtx5 + 36 | 0; //@line 25105
  HEAP32[$528 >> 2] = $18; //@line 25106
  $529 = $ReallocAsyncCtx5 + 40 | 0; //@line 25107
  HEAP32[$529 >> 2] = $20; //@line 25108
  $530 = $ReallocAsyncCtx5 + 44 | 0; //@line 25109
  HEAP32[$530 >> 2] = $22; //@line 25110
  $531 = $ReallocAsyncCtx5 + 48 | 0; //@line 25111
  HEAP32[$531 >> 2] = $24; //@line 25112
  $532 = $ReallocAsyncCtx5 + 52 | 0; //@line 25113
  HEAP32[$532 >> 2] = $26; //@line 25114
  $533 = $ReallocAsyncCtx5 + 56 | 0; //@line 25115
  HEAP8[$533 >> 0] = $515; //@line 25116
  $534 = $ReallocAsyncCtx5 + 60 | 0; //@line 25117
  HEAP32[$534 >> 2] = $30; //@line 25118
  $535 = $ReallocAsyncCtx5 + 64 | 0; //@line 25119
  HEAP32[$535 >> 2] = $32; //@line 25120
  $536 = $ReallocAsyncCtx5 + 68 | 0; //@line 25121
  HEAP32[$536 >> 2] = $34; //@line 25122
  $537 = $ReallocAsyncCtx5 + 72 | 0; //@line 25123
  HEAP32[$537 >> 2] = $36; //@line 25124
  $538 = $ReallocAsyncCtx5 + 76 | 0; //@line 25125
  HEAP32[$538 >> 2] = $38; //@line 25126
  $539 = $ReallocAsyncCtx5 + 80 | 0; //@line 25127
  HEAP32[$539 >> 2] = $40; //@line 25128
  $540 = $ReallocAsyncCtx5 + 84 | 0; //@line 25129
  HEAP32[$540 >> 2] = $42; //@line 25130
  $541 = $ReallocAsyncCtx5 + 88 | 0; //@line 25131
  HEAP32[$541 >> 2] = $44; //@line 25132
  $542 = $ReallocAsyncCtx5 + 92 | 0; //@line 25133
  HEAP32[$542 >> 2] = $46; //@line 25134
  $543 = $ReallocAsyncCtx5 + 96 | 0; //@line 25135
  HEAP32[$543 >> 2] = $48; //@line 25136
  $544 = $ReallocAsyncCtx5 + 100 | 0; //@line 25137
  HEAP32[$544 >> 2] = $511; //@line 25138
  $545 = $ReallocAsyncCtx5 + 104 | 0; //@line 25139
  HEAP32[$545 >> 2] = $52; //@line 25140
  $546 = $ReallocAsyncCtx5 + 108 | 0; //@line 25141
  HEAP32[$546 >> 2] = $54; //@line 25142
  $547 = $ReallocAsyncCtx5 + 112 | 0; //@line 25143
  HEAP32[$547 >> 2] = $56; //@line 25144
  $548 = $ReallocAsyncCtx5 + 116 | 0; //@line 25145
  HEAP32[$548 >> 2] = $58; //@line 25146
  $549 = $ReallocAsyncCtx5 + 120 | 0; //@line 25147
  HEAP32[$549 >> 2] = $60; //@line 25148
  $550 = $ReallocAsyncCtx5 + 124 | 0; //@line 25149
  HEAP32[$550 >> 2] = $62; //@line 25150
  $551 = $ReallocAsyncCtx5 + 128 | 0; //@line 25151
  HEAP32[$551 >> 2] = $64; //@line 25152
  $552 = $ReallocAsyncCtx5 + 132 | 0; //@line 25153
  HEAP32[$552 >> 2] = $66; //@line 25154
  $553 = $ReallocAsyncCtx5 + 136 | 0; //@line 25155
  HEAP32[$553 >> 2] = $68; //@line 25156
  $554 = $ReallocAsyncCtx5 + 140 | 0; //@line 25157
  HEAP8[$554 >> 0] = $513; //@line 25158
  $555 = $ReallocAsyncCtx5 + 144 | 0; //@line 25159
  HEAP32[$555 >> 2] = $72; //@line 25160
  $556 = $ReallocAsyncCtx5 + 148 | 0; //@line 25161
  HEAP32[$556 >> 2] = $74; //@line 25162
  $557 = $ReallocAsyncCtx5 + 152 | 0; //@line 25163
  HEAP32[$557 >> 2] = $76; //@line 25164
  $558 = $ReallocAsyncCtx5 + 156 | 0; //@line 25165
  HEAP32[$558 >> 2] = $78; //@line 25166
  $559 = $ReallocAsyncCtx5 + 160 | 0; //@line 25167
  HEAP32[$559 >> 2] = $80; //@line 25168
  $560 = $ReallocAsyncCtx5 + 164 | 0; //@line 25169
  HEAP32[$560 >> 2] = $82; //@line 25170
  $561 = $ReallocAsyncCtx5 + 168 | 0; //@line 25171
  HEAP32[$561 >> 2] = $84; //@line 25172
  $562 = $ReallocAsyncCtx5 + 172 | 0; //@line 25173
  HEAP8[$562 >> 0] = $86; //@line 25174
  $563 = $ReallocAsyncCtx5 + 176 | 0; //@line 25175
  HEAP32[$563 >> 2] = $88; //@line 25176
  $564 = $ReallocAsyncCtx5 + 180 | 0; //@line 25177
  HEAP8[$564 >> 0] = $90; //@line 25178
  $565 = $ReallocAsyncCtx5 + 184 | 0; //@line 25179
  HEAP32[$565 >> 2] = $92; //@line 25180
  $566 = $ReallocAsyncCtx5 + 188 | 0; //@line 25181
  HEAP8[$566 >> 0] = $94; //@line 25182
  $567 = $ReallocAsyncCtx5 + 192 | 0; //@line 25183
  HEAP32[$567 >> 2] = $$0107$be; //@line 25184
  $568 = $ReallocAsyncCtx5 + 196 | 0; //@line 25185
  HEAP32[$568 >> 2] = $98; //@line 25186
  $569 = $ReallocAsyncCtx5 + 200 | 0; //@line 25187
  HEAP32[$569 >> 2] = $100; //@line 25188
  $570 = $ReallocAsyncCtx5 + 204 | 0; //@line 25189
  HEAP32[$570 >> 2] = $102; //@line 25190
  $571 = $ReallocAsyncCtx5 + 208 | 0; //@line 25191
  HEAP32[$571 >> 2] = $104; //@line 25192
  $572 = $ReallocAsyncCtx5 + 212 | 0; //@line 25193
  HEAP32[$572 >> 2] = $106; //@line 25194
  $573 = $ReallocAsyncCtx5 + 216 | 0; //@line 25195
  HEAP32[$573 >> 2] = $108; //@line 25196
  $574 = $ReallocAsyncCtx5 + 220 | 0; //@line 25197
  HEAP8[$574 >> 0] = $507; //@line 25198
  $575 = $ReallocAsyncCtx5 + 224 | 0; //@line 25199
  HEAP32[$575 >> 2] = $112; //@line 25200
  $576 = $ReallocAsyncCtx5 + 228 | 0; //@line 25201
  HEAP32[$576 >> 2] = $114; //@line 25202
  $577 = $ReallocAsyncCtx5 + 232 | 0; //@line 25203
  HEAP32[$577 >> 2] = $116; //@line 25204
  $578 = $ReallocAsyncCtx5 + 236 | 0; //@line 25205
  HEAP32[$578 >> 2] = $118; //@line 25206
  $579 = $ReallocAsyncCtx5 + 240 | 0; //@line 25207
  HEAP32[$579 >> 2] = $120; //@line 25208
  $580 = $ReallocAsyncCtx5 + 244 | 0; //@line 25209
  HEAP32[$580 >> 2] = $122; //@line 25210
  $581 = $ReallocAsyncCtx5 + 248 | 0; //@line 25211
  HEAP32[$581 >> 2] = $124; //@line 25212
  sp = STACKTOP; //@line 25213
  return;
 } else if ((label | 0) == 30) {
  $598 = HEAP8[$88 + ($127 & 255) >> 0] | 0; //@line 25220
  $611 = $$0$be + 5 << 24 >> 24; //@line 25233
  $618 = (HEAPU8[$88 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$88 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$88 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 25240
  $621 = HEAP32[(HEAP32[$42 >> 2] | 0) + 48 >> 2] | 0; //@line 25243
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(236) | 0; //@line 25244
  $622 = FUNCTION_TABLE_iiii[$621 & 31]($66, $598, $618) | 0; //@line 25245
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 495; //@line 25248
   $623 = $ReallocAsyncCtx6 + 4 | 0; //@line 25249
   HEAP32[$623 >> 2] = $2; //@line 25250
   $624 = $ReallocAsyncCtx6 + 8 | 0; //@line 25251
   HEAP32[$624 >> 2] = $4; //@line 25252
   $625 = $ReallocAsyncCtx6 + 12 | 0; //@line 25253
   HEAP32[$625 >> 2] = $6; //@line 25254
   $626 = $ReallocAsyncCtx6 + 16 | 0; //@line 25255
   HEAP32[$626 >> 2] = $8; //@line 25256
   $627 = $ReallocAsyncCtx6 + 20 | 0; //@line 25257
   HEAP32[$627 >> 2] = $10; //@line 25258
   $628 = $ReallocAsyncCtx6 + 24 | 0; //@line 25259
   HEAP32[$628 >> 2] = $12; //@line 25260
   $629 = $ReallocAsyncCtx6 + 28 | 0; //@line 25261
   HEAP32[$629 >> 2] = $14; //@line 25262
   $630 = $ReallocAsyncCtx6 + 32 | 0; //@line 25263
   HEAP32[$630 >> 2] = $16; //@line 25264
   $631 = $ReallocAsyncCtx6 + 36 | 0; //@line 25265
   HEAP32[$631 >> 2] = $18; //@line 25266
   $632 = $ReallocAsyncCtx6 + 40 | 0; //@line 25267
   HEAP32[$632 >> 2] = $20; //@line 25268
   $633 = $ReallocAsyncCtx6 + 44 | 0; //@line 25269
   HEAP32[$633 >> 2] = $22; //@line 25270
   $634 = $ReallocAsyncCtx6 + 48 | 0; //@line 25271
   HEAP32[$634 >> 2] = $24; //@line 25272
   $635 = $ReallocAsyncCtx6 + 52 | 0; //@line 25273
   HEAP32[$635 >> 2] = $26; //@line 25274
   $636 = $ReallocAsyncCtx6 + 56 | 0; //@line 25275
   HEAP32[$636 >> 2] = $30; //@line 25276
   $637 = $ReallocAsyncCtx6 + 60 | 0; //@line 25277
   HEAP32[$637 >> 2] = $32; //@line 25278
   $638 = $ReallocAsyncCtx6 + 64 | 0; //@line 25279
   HEAP32[$638 >> 2] = $34; //@line 25280
   $639 = $ReallocAsyncCtx6 + 68 | 0; //@line 25281
   HEAP32[$639 >> 2] = $36; //@line 25282
   $640 = $ReallocAsyncCtx6 + 72 | 0; //@line 25283
   HEAP32[$640 >> 2] = $38; //@line 25284
   $641 = $ReallocAsyncCtx6 + 76 | 0; //@line 25285
   HEAP32[$641 >> 2] = $40; //@line 25286
   $642 = $ReallocAsyncCtx6 + 80 | 0; //@line 25287
   HEAP32[$642 >> 2] = $42; //@line 25288
   $643 = $ReallocAsyncCtx6 + 84 | 0; //@line 25289
   HEAP32[$643 >> 2] = $44; //@line 25290
   $644 = $ReallocAsyncCtx6 + 88 | 0; //@line 25291
   HEAP32[$644 >> 2] = $46; //@line 25292
   $645 = $ReallocAsyncCtx6 + 92 | 0; //@line 25293
   HEAP32[$645 >> 2] = $48; //@line 25294
   $646 = $ReallocAsyncCtx6 + 96 | 0; //@line 25295
   HEAP32[$646 >> 2] = $52; //@line 25296
   $647 = $ReallocAsyncCtx6 + 100 | 0; //@line 25297
   HEAP32[$647 >> 2] = $54; //@line 25298
   $648 = $ReallocAsyncCtx6 + 104 | 0; //@line 25299
   HEAP32[$648 >> 2] = $56; //@line 25300
   $649 = $ReallocAsyncCtx6 + 108 | 0; //@line 25301
   HEAP32[$649 >> 2] = $58; //@line 25302
   $650 = $ReallocAsyncCtx6 + 112 | 0; //@line 25303
   HEAP32[$650 >> 2] = $60; //@line 25304
   $651 = $ReallocAsyncCtx6 + 116 | 0; //@line 25305
   HEAP32[$651 >> 2] = $62; //@line 25306
   $652 = $ReallocAsyncCtx6 + 120 | 0; //@line 25307
   HEAP8[$652 >> 0] = $611; //@line 25308
   $653 = $ReallocAsyncCtx6 + 124 | 0; //@line 25309
   HEAP32[$653 >> 2] = $64; //@line 25310
   $654 = $ReallocAsyncCtx6 + 128 | 0; //@line 25311
   HEAP32[$654 >> 2] = $66; //@line 25312
   $655 = $ReallocAsyncCtx6 + 132 | 0; //@line 25313
   HEAP32[$655 >> 2] = $68; //@line 25314
   $656 = $ReallocAsyncCtx6 + 136 | 0; //@line 25315
   HEAP32[$656 >> 2] = $72; //@line 25316
   $657 = $ReallocAsyncCtx6 + 140 | 0; //@line 25317
   HEAP32[$657 >> 2] = $74; //@line 25318
   $658 = $ReallocAsyncCtx6 + 144 | 0; //@line 25319
   HEAP32[$658 >> 2] = $76; //@line 25320
   $659 = $ReallocAsyncCtx6 + 148 | 0; //@line 25321
   HEAP32[$659 >> 2] = $78; //@line 25322
   $660 = $ReallocAsyncCtx6 + 152 | 0; //@line 25323
   HEAP32[$660 >> 2] = $80; //@line 25324
   $661 = $ReallocAsyncCtx6 + 156 | 0; //@line 25325
   HEAP32[$661 >> 2] = $82; //@line 25326
   $662 = $ReallocAsyncCtx6 + 160 | 0; //@line 25327
   HEAP32[$662 >> 2] = $84; //@line 25328
   $663 = $ReallocAsyncCtx6 + 164 | 0; //@line 25329
   HEAP8[$663 >> 0] = $86; //@line 25330
   $664 = $ReallocAsyncCtx6 + 168 | 0; //@line 25331
   HEAP32[$664 >> 2] = $88; //@line 25332
   $665 = $ReallocAsyncCtx6 + 172 | 0; //@line 25333
   HEAP8[$665 >> 0] = $90; //@line 25334
   $666 = $ReallocAsyncCtx6 + 176 | 0; //@line 25335
   HEAP32[$666 >> 2] = $92; //@line 25336
   $667 = $ReallocAsyncCtx6 + 180 | 0; //@line 25337
   HEAP8[$667 >> 0] = $94; //@line 25338
   $668 = $ReallocAsyncCtx6 + 184 | 0; //@line 25339
   HEAP32[$668 >> 2] = $98; //@line 25340
   $669 = $ReallocAsyncCtx6 + 188 | 0; //@line 25341
   HEAP32[$669 >> 2] = $100; //@line 25342
   $670 = $ReallocAsyncCtx6 + 192 | 0; //@line 25343
   HEAP32[$670 >> 2] = $102; //@line 25344
   $671 = $ReallocAsyncCtx6 + 196 | 0; //@line 25345
   HEAP32[$671 >> 2] = $104; //@line 25346
   $672 = $ReallocAsyncCtx6 + 200 | 0; //@line 25347
   HEAP32[$672 >> 2] = $106; //@line 25348
   $673 = $ReallocAsyncCtx6 + 204 | 0; //@line 25349
   HEAP32[$673 >> 2] = $108; //@line 25350
   $674 = $ReallocAsyncCtx6 + 208 | 0; //@line 25351
   HEAP32[$674 >> 2] = $112; //@line 25352
   $675 = $ReallocAsyncCtx6 + 212 | 0; //@line 25353
   HEAP32[$675 >> 2] = $114; //@line 25354
   $676 = $ReallocAsyncCtx6 + 216 | 0; //@line 25355
   HEAP32[$676 >> 2] = $116; //@line 25356
   $677 = $ReallocAsyncCtx6 + 220 | 0; //@line 25357
   HEAP32[$677 >> 2] = $118; //@line 25358
   $678 = $ReallocAsyncCtx6 + 224 | 0; //@line 25359
   HEAP32[$678 >> 2] = $120; //@line 25360
   $679 = $ReallocAsyncCtx6 + 228 | 0; //@line 25361
   HEAP32[$679 >> 2] = $122; //@line 25362
   $680 = $ReallocAsyncCtx6 + 232 | 0; //@line 25363
   HEAP32[$680 >> 2] = $124; //@line 25364
   sp = STACKTOP; //@line 25365
   return;
  }
  HEAP8[___async_retval >> 0] = $622; //@line 25369
  ___async_unwind = 0; //@line 25370
  HEAP32[$ReallocAsyncCtx6 >> 2] = 495; //@line 25371
  $623 = $ReallocAsyncCtx6 + 4 | 0; //@line 25372
  HEAP32[$623 >> 2] = $2; //@line 25373
  $624 = $ReallocAsyncCtx6 + 8 | 0; //@line 25374
  HEAP32[$624 >> 2] = $4; //@line 25375
  $625 = $ReallocAsyncCtx6 + 12 | 0; //@line 25376
  HEAP32[$625 >> 2] = $6; //@line 25377
  $626 = $ReallocAsyncCtx6 + 16 | 0; //@line 25378
  HEAP32[$626 >> 2] = $8; //@line 25379
  $627 = $ReallocAsyncCtx6 + 20 | 0; //@line 25380
  HEAP32[$627 >> 2] = $10; //@line 25381
  $628 = $ReallocAsyncCtx6 + 24 | 0; //@line 25382
  HEAP32[$628 >> 2] = $12; //@line 25383
  $629 = $ReallocAsyncCtx6 + 28 | 0; //@line 25384
  HEAP32[$629 >> 2] = $14; //@line 25385
  $630 = $ReallocAsyncCtx6 + 32 | 0; //@line 25386
  HEAP32[$630 >> 2] = $16; //@line 25387
  $631 = $ReallocAsyncCtx6 + 36 | 0; //@line 25388
  HEAP32[$631 >> 2] = $18; //@line 25389
  $632 = $ReallocAsyncCtx6 + 40 | 0; //@line 25390
  HEAP32[$632 >> 2] = $20; //@line 25391
  $633 = $ReallocAsyncCtx6 + 44 | 0; //@line 25392
  HEAP32[$633 >> 2] = $22; //@line 25393
  $634 = $ReallocAsyncCtx6 + 48 | 0; //@line 25394
  HEAP32[$634 >> 2] = $24; //@line 25395
  $635 = $ReallocAsyncCtx6 + 52 | 0; //@line 25396
  HEAP32[$635 >> 2] = $26; //@line 25397
  $636 = $ReallocAsyncCtx6 + 56 | 0; //@line 25398
  HEAP32[$636 >> 2] = $30; //@line 25399
  $637 = $ReallocAsyncCtx6 + 60 | 0; //@line 25400
  HEAP32[$637 >> 2] = $32; //@line 25401
  $638 = $ReallocAsyncCtx6 + 64 | 0; //@line 25402
  HEAP32[$638 >> 2] = $34; //@line 25403
  $639 = $ReallocAsyncCtx6 + 68 | 0; //@line 25404
  HEAP32[$639 >> 2] = $36; //@line 25405
  $640 = $ReallocAsyncCtx6 + 72 | 0; //@line 25406
  HEAP32[$640 >> 2] = $38; //@line 25407
  $641 = $ReallocAsyncCtx6 + 76 | 0; //@line 25408
  HEAP32[$641 >> 2] = $40; //@line 25409
  $642 = $ReallocAsyncCtx6 + 80 | 0; //@line 25410
  HEAP32[$642 >> 2] = $42; //@line 25411
  $643 = $ReallocAsyncCtx6 + 84 | 0; //@line 25412
  HEAP32[$643 >> 2] = $44; //@line 25413
  $644 = $ReallocAsyncCtx6 + 88 | 0; //@line 25414
  HEAP32[$644 >> 2] = $46; //@line 25415
  $645 = $ReallocAsyncCtx6 + 92 | 0; //@line 25416
  HEAP32[$645 >> 2] = $48; //@line 25417
  $646 = $ReallocAsyncCtx6 + 96 | 0; //@line 25418
  HEAP32[$646 >> 2] = $52; //@line 25419
  $647 = $ReallocAsyncCtx6 + 100 | 0; //@line 25420
  HEAP32[$647 >> 2] = $54; //@line 25421
  $648 = $ReallocAsyncCtx6 + 104 | 0; //@line 25422
  HEAP32[$648 >> 2] = $56; //@line 25423
  $649 = $ReallocAsyncCtx6 + 108 | 0; //@line 25424
  HEAP32[$649 >> 2] = $58; //@line 25425
  $650 = $ReallocAsyncCtx6 + 112 | 0; //@line 25426
  HEAP32[$650 >> 2] = $60; //@line 25427
  $651 = $ReallocAsyncCtx6 + 116 | 0; //@line 25428
  HEAP32[$651 >> 2] = $62; //@line 25429
  $652 = $ReallocAsyncCtx6 + 120 | 0; //@line 25430
  HEAP8[$652 >> 0] = $611; //@line 25431
  $653 = $ReallocAsyncCtx6 + 124 | 0; //@line 25432
  HEAP32[$653 >> 2] = $64; //@line 25433
  $654 = $ReallocAsyncCtx6 + 128 | 0; //@line 25434
  HEAP32[$654 >> 2] = $66; //@line 25435
  $655 = $ReallocAsyncCtx6 + 132 | 0; //@line 25436
  HEAP32[$655 >> 2] = $68; //@line 25437
  $656 = $ReallocAsyncCtx6 + 136 | 0; //@line 25438
  HEAP32[$656 >> 2] = $72; //@line 25439
  $657 = $ReallocAsyncCtx6 + 140 | 0; //@line 25440
  HEAP32[$657 >> 2] = $74; //@line 25441
  $658 = $ReallocAsyncCtx6 + 144 | 0; //@line 25442
  HEAP32[$658 >> 2] = $76; //@line 25443
  $659 = $ReallocAsyncCtx6 + 148 | 0; //@line 25444
  HEAP32[$659 >> 2] = $78; //@line 25445
  $660 = $ReallocAsyncCtx6 + 152 | 0; //@line 25446
  HEAP32[$660 >> 2] = $80; //@line 25447
  $661 = $ReallocAsyncCtx6 + 156 | 0; //@line 25448
  HEAP32[$661 >> 2] = $82; //@line 25449
  $662 = $ReallocAsyncCtx6 + 160 | 0; //@line 25450
  HEAP32[$662 >> 2] = $84; //@line 25451
  $663 = $ReallocAsyncCtx6 + 164 | 0; //@line 25452
  HEAP8[$663 >> 0] = $86; //@line 25453
  $664 = $ReallocAsyncCtx6 + 168 | 0; //@line 25454
  HEAP32[$664 >> 2] = $88; //@line 25455
  $665 = $ReallocAsyncCtx6 + 172 | 0; //@line 25456
  HEAP8[$665 >> 0] = $90; //@line 25457
  $666 = $ReallocAsyncCtx6 + 176 | 0; //@line 25458
  HEAP32[$666 >> 2] = $92; //@line 25459
  $667 = $ReallocAsyncCtx6 + 180 | 0; //@line 25460
  HEAP8[$667 >> 0] = $94; //@line 25461
  $668 = $ReallocAsyncCtx6 + 184 | 0; //@line 25462
  HEAP32[$668 >> 2] = $98; //@line 25463
  $669 = $ReallocAsyncCtx6 + 188 | 0; //@line 25464
  HEAP32[$669 >> 2] = $100; //@line 25465
  $670 = $ReallocAsyncCtx6 + 192 | 0; //@line 25466
  HEAP32[$670 >> 2] = $102; //@line 25467
  $671 = $ReallocAsyncCtx6 + 196 | 0; //@line 25468
  HEAP32[$671 >> 2] = $104; //@line 25469
  $672 = $ReallocAsyncCtx6 + 200 | 0; //@line 25470
  HEAP32[$672 >> 2] = $106; //@line 25471
  $673 = $ReallocAsyncCtx6 + 204 | 0; //@line 25472
  HEAP32[$673 >> 2] = $108; //@line 25473
  $674 = $ReallocAsyncCtx6 + 208 | 0; //@line 25474
  HEAP32[$674 >> 2] = $112; //@line 25475
  $675 = $ReallocAsyncCtx6 + 212 | 0; //@line 25476
  HEAP32[$675 >> 2] = $114; //@line 25477
  $676 = $ReallocAsyncCtx6 + 216 | 0; //@line 25478
  HEAP32[$676 >> 2] = $116; //@line 25479
  $677 = $ReallocAsyncCtx6 + 220 | 0; //@line 25480
  HEAP32[$677 >> 2] = $118; //@line 25481
  $678 = $ReallocAsyncCtx6 + 224 | 0; //@line 25482
  HEAP32[$678 >> 2] = $120; //@line 25483
  $679 = $ReallocAsyncCtx6 + 228 | 0; //@line 25484
  HEAP32[$679 >> 2] = $122; //@line 25485
  $680 = $ReallocAsyncCtx6 + 232 | 0; //@line 25486
  HEAP32[$680 >> 2] = $124; //@line 25487
  sp = STACKTOP; //@line 25488
  return;
 } else if ((label | 0) == 33) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 25493
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_359($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i116 = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $319 = 0, $32 = 0, $320 = 0, $328 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $394 = 0, $395 = 0, $4 = 0, $40 = 0, $409 = 0, $42 = 0, $430 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $498 = 0, $50 = 0, $502 = 0, $506 = 0, $511 = 0, $512 = 0, $516 = 0, $52 = 0, $520 = 0, $522 = 0, $524 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $595 = 0, $6 = 0, $60 = 0, $608 = 0, $615 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17589
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17591
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17593
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17595
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17597
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17599
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17601
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17603
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17605
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17607
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17609
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17611
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 17613
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 17615
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 17617
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 17619
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 17621
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 17623
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 17625
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 17627
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 17629
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 17631
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 17633
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 17635
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 17637
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 17639
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 17641
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 17643
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 17645
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 17647
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 17649
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 17651
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 17653
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 17655
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 17657
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 17659
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 17661
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 17663
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 17665
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 17667
 $80 = HEAP8[$0 + 160 >> 0] | 0; //@line 17669
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 17671
 $84 = HEAP8[$0 + 168 >> 0] | 0; //@line 17673
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 17675
 $88 = HEAP8[$0 + 176 >> 0] | 0; //@line 17677
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 17679
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 17681
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 17683
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 17685
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 17687
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 17689
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 17691
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 17693
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 17695
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 17697
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 17699
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 17701
 $114 = HEAP8[$0 + 228 >> 0] | 0; //@line 17703
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 17705
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 17707
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$14 >> 0] = HEAP8[$98 >> 0] | 0; //@line 17712
  HEAP32[$54 >> 2] = HEAP32[$32 >> 2]; //@line 17714
  HEAP8[$36 >> 0] = HEAP8[$26 >> 0] | 0; //@line 17716
 }
 $319 = HEAP8[$60 >> 0] | 0; //@line 17721
 $320 = $319 & 255; //@line 17722
 if ((128 - (HEAPU8[$86 >> 0] | 0) - $320 | 0) > 1) {
  HEAP8[$74 + 4 + $320 >> 0] = 5; //@line 17728
  HEAP8[$60 >> 0] = $319 + 2 << 24 >> 24; //@line 17730
  HEAP8[($319 + 1 & 255) + ($74 + 4) >> 0] = $AsyncRetVal; //@line 17733
  HEAP8[$42 >> 0] = 1; //@line 17734
  HEAP8[$102 >> 0] = 1; //@line 17735
  $$0$i116 = 0; //@line 17736
 } else {
  $$0$i116 = -1010; //@line 17738
 }
 $$0$be = $114; //@line 17740
 $$0107$be = $$0$i116; //@line 17740
 L8 : while (1) {
  if (($$0$be & 255) >= ($84 & 255)) {
   label = 35; //@line 17744
   break;
  }
  $119 = $$0$be + 1 << 24 >> 24; //@line 17748
  switch (HEAP8[$82 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 17753
    break L8;
    break;
   }
  case 5:
   {
    label = 9; //@line 17758
    break L8;
    break;
   }
  case 7:
   {
    label = 23; //@line 17763
    break L8;
    break;
   }
  case 9:
   {
    label = 29; //@line 17768
    break L8;
    break;
   }
  case 10:
   {
    label = 32; //@line 17773
    break L8;
    break;
   }
  case 2:
   {
    HEAP32[$48 >> 2] = 0; //@line 17778
    HEAP8[$64 >> 0] = HEAP8[$82 + ($119 & 255) >> 0] | 0; //@line 17783
    HEAP8[$58 >> 0] = HEAP8[$82 + ($$0$be + 2 & 255) >> 0] | 0; //@line 17788
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 17789
    continue L8;
    break;
   }
  case 4:
   {
    $204 = $$0$be + 2 << 24 >> 24; //@line 17794
    $207 = HEAP8[$82 + ($119 & 255) >> 0] | 0; //@line 17797
    HEAP8[$108 >> 0] = $207; //@line 17798
    HEAP16[$92 >> 1] = 1 << ($207 & 255); //@line 17802
    $214 = HEAP8[$60 >> 0] | 0; //@line 17806
    $215 = $214 & 255; //@line 17807
    if ((128 - (HEAPU8[$86 >> 0] | 0) | 0) <= ($215 | 0)) {
     $$0$be = $204; //@line 17810
     $$0107$be = -1010; //@line 17810
     continue L8;
    }
    HEAP8[$60 >> 0] = $214 + 1 << 24 >> 24; //@line 17815
    HEAP8[$74 + 4 + $215 >> 0] = 4; //@line 17816
    HEAP8[$102 >> 0] = 1; //@line 17817
    $$0$be = $204; //@line 17818
    $$0107$be = 0; //@line 17818
    continue L8;
    break;
   }
  case 6:
   {
    $328 = HEAP32[$70 >> 2] | 0; //@line 17823
    if ($328 | 0) {
     label = 18; //@line 17826
     break L8;
    }
    $394 = HEAP8[$60 >> 0] | 0; //@line 17832
    $395 = $394 & 255; //@line 17833
    if ((128 - (HEAPU8[$86 >> 0] | 0) - $395 | 0) <= 2) {
     $$0$be = $119; //@line 17837
     $$0107$be = -1010; //@line 17837
     continue L8;
    }
    HEAP8[$74 + 4 + $395 >> 0] = 6; //@line 17842
    HEAP8[($394 + 1 & 255) + ($74 + 4) >> 0] = -1; //@line 17846
    HEAP8[$60 >> 0] = $394 + 3 << 24 >> 24; //@line 17848
    HEAP8[($394 + 2 & 255) + ($74 + 4) >> 0] = $80; //@line 17851
    HEAP8[$102 >> 0] = 1; //@line 17852
    $$0$be = $119; //@line 17853
    $$0107$be = 0; //@line 17853
    continue L8;
    break;
   }
  case 8:
   {
    $498 = $$0$be + 2 << 24 >> 24; //@line 17858
    $502 = HEAP8[$82 + ($119 & 255) >> 0] & 15; //@line 17862
    $506 = ($502 + ($502 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 17867
    HEAP32[$38 >> 2] = $506; //@line 17868
    HEAP32[$6 >> 2] = $506 + 1e3; //@line 17870
    $511 = HEAP8[$60 >> 0] | 0; //@line 17874
    $512 = $511 & 255; //@line 17875
    if ((128 - (HEAPU8[$86 >> 0] | 0) | 0) <= ($512 | 0)) {
     $$0$be = $498; //@line 17878
     $$0107$be = -1010; //@line 17878
     continue L8;
    }
    HEAP8[$60 >> 0] = $511 + 1 << 24 >> 24; //@line 17883
    HEAP8[$74 + 4 + $512 >> 0] = 8; //@line 17884
    HEAP8[$42 >> 0] = 1; //@line 17885
    HEAP8[$102 >> 0] = 1; //@line 17886
    $$0$be = $498; //@line 17887
    $$0107$be = 0; //@line 17887
    continue L8;
    break;
   }
  default:
   {
    $$0$be = $119; //@line 17892
    $$0107$be = -1013; //@line 17892
    continue L8;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$116 >> 0] = 0; //@line 17898
  HEAP8[$28 >> 0] = 0; //@line 17899
  HEAP8[$18 >> 0] = 0; //@line 17900
  HEAP8[$10 >> 0] = 0; //@line 17901
  $130 = $119 & 255; //@line 17902
  $131 = $130 + -1 | 0; //@line 17903
  HEAP32[$72 >> 2] = $82 + $131; //@line 17905
  HEAP8[$100 >> 0] = $46 - $131; //@line 17908
  HEAP8[$106 >> 0] = HEAP8[$90 >> 0] | 0; //@line 17910
  HEAP8[$8 >> 0] = HEAP8[$16 >> 0] | 0; //@line 17912
  HEAP8[$20 >> 0] = HEAP8[$30 >> 0] | 0; //@line 17914
  HEAP8[$34 >> 0] = HEAP8[$44 >> 0] | 0; //@line 17916
  HEAP8[$68 >> 0] = HEAP8[$52 >> 0] | 0; //@line 17918
  $142 = HEAP32[(HEAP32[$76 >> 2] | 0) + 36 >> 2] | 0; //@line 17921
  $ReallocAsyncCtx = _emscripten_realloc_async_context(240) | 0; //@line 17922
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($62, $110, $116, $28, $18, $10) | 0; //@line 17923
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 17926
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 17927
   HEAP32[$144 >> 2] = $2; //@line 17928
   $145 = $ReallocAsyncCtx + 8 | 0; //@line 17929
   HEAP32[$145 >> 2] = $4; //@line 17930
   $146 = $ReallocAsyncCtx + 12 | 0; //@line 17931
   HEAP32[$146 >> 2] = $6; //@line 17932
   $147 = $ReallocAsyncCtx + 16 | 0; //@line 17933
   HEAP32[$147 >> 2] = $8; //@line 17934
   $148 = $ReallocAsyncCtx + 20 | 0; //@line 17935
   HEAP32[$148 >> 2] = $10; //@line 17936
   $149 = $ReallocAsyncCtx + 24 | 0; //@line 17937
   HEAP32[$149 >> 2] = $12; //@line 17938
   $150 = $ReallocAsyncCtx + 28 | 0; //@line 17939
   HEAP32[$150 >> 2] = $14; //@line 17940
   $151 = $ReallocAsyncCtx + 32 | 0; //@line 17941
   HEAP32[$151 >> 2] = $16; //@line 17942
   $152 = $ReallocAsyncCtx + 36 | 0; //@line 17943
   HEAP32[$152 >> 2] = $18; //@line 17944
   $153 = $ReallocAsyncCtx + 40 | 0; //@line 17945
   HEAP32[$153 >> 2] = $20; //@line 17946
   $154 = $ReallocAsyncCtx + 44 | 0; //@line 17947
   HEAP32[$154 >> 2] = $22; //@line 17948
   $155 = $ReallocAsyncCtx + 48 | 0; //@line 17949
   HEAP32[$155 >> 2] = $24; //@line 17950
   $156 = $ReallocAsyncCtx + 52 | 0; //@line 17951
   HEAP32[$156 >> 2] = $26; //@line 17952
   $157 = $ReallocAsyncCtx + 56 | 0; //@line 17953
   HEAP32[$157 >> 2] = $28; //@line 17954
   $158 = $ReallocAsyncCtx + 60 | 0; //@line 17955
   HEAP32[$158 >> 2] = $30; //@line 17956
   $159 = $ReallocAsyncCtx + 64 | 0; //@line 17957
   HEAP32[$159 >> 2] = $32; //@line 17958
   $160 = $ReallocAsyncCtx + 68 | 0; //@line 17959
   HEAP32[$160 >> 2] = $34; //@line 17960
   $161 = $ReallocAsyncCtx + 72 | 0; //@line 17961
   HEAP32[$161 >> 2] = $36; //@line 17962
   $162 = $ReallocAsyncCtx + 76 | 0; //@line 17963
   HEAP32[$162 >> 2] = $38; //@line 17964
   $163 = $ReallocAsyncCtx + 80 | 0; //@line 17965
   HEAP32[$163 >> 2] = $40; //@line 17966
   $164 = $ReallocAsyncCtx + 84 | 0; //@line 17967
   HEAP32[$164 >> 2] = $42; //@line 17968
   $165 = $ReallocAsyncCtx + 88 | 0; //@line 17969
   HEAP32[$165 >> 2] = $44; //@line 17970
   $166 = $ReallocAsyncCtx + 92 | 0; //@line 17971
   HEAP32[$166 >> 2] = $46; //@line 17972
   $167 = $ReallocAsyncCtx + 96 | 0; //@line 17973
   HEAP32[$167 >> 2] = $48; //@line 17974
   $168 = $ReallocAsyncCtx + 100 | 0; //@line 17975
   HEAP32[$168 >> 2] = $50; //@line 17976
   $169 = $ReallocAsyncCtx + 104 | 0; //@line 17977
   HEAP32[$169 >> 2] = $52; //@line 17978
   $170 = $ReallocAsyncCtx + 108 | 0; //@line 17979
   HEAP32[$170 >> 2] = $54; //@line 17980
   $171 = $ReallocAsyncCtx + 112 | 0; //@line 17981
   HEAP32[$171 >> 2] = $56; //@line 17982
   $172 = $ReallocAsyncCtx + 116 | 0; //@line 17983
   HEAP32[$172 >> 2] = $58; //@line 17984
   $173 = $ReallocAsyncCtx + 120 | 0; //@line 17985
   HEAP32[$173 >> 2] = $60; //@line 17986
   $174 = $ReallocAsyncCtx + 124 | 0; //@line 17987
   HEAP32[$174 >> 2] = $62; //@line 17988
   $175 = $ReallocAsyncCtx + 128 | 0; //@line 17989
   HEAP32[$175 >> 2] = $64; //@line 17990
   $176 = $ReallocAsyncCtx + 132 | 0; //@line 17991
   HEAP32[$176 >> 2] = $66; //@line 17992
   $177 = $ReallocAsyncCtx + 136 | 0; //@line 17993
   HEAP32[$177 >> 2] = $68; //@line 17994
   $178 = $ReallocAsyncCtx + 140 | 0; //@line 17995
   HEAP32[$178 >> 2] = $70; //@line 17996
   $179 = $ReallocAsyncCtx + 144 | 0; //@line 17997
   HEAP32[$179 >> 2] = $72; //@line 17998
   $180 = $ReallocAsyncCtx + 148 | 0; //@line 17999
   HEAP32[$180 >> 2] = $74; //@line 18000
   $181 = $ReallocAsyncCtx + 152 | 0; //@line 18001
   HEAP32[$181 >> 2] = $76; //@line 18002
   $182 = $ReallocAsyncCtx + 156 | 0; //@line 18003
   HEAP32[$182 >> 2] = $130; //@line 18004
   $183 = $ReallocAsyncCtx + 160 | 0; //@line 18005
   HEAP32[$183 >> 2] = $78; //@line 18006
   $184 = $ReallocAsyncCtx + 164 | 0; //@line 18007
   HEAP8[$184 >> 0] = $80; //@line 18008
   $185 = $ReallocAsyncCtx + 168 | 0; //@line 18009
   HEAP32[$185 >> 2] = $82; //@line 18010
   $186 = $ReallocAsyncCtx + 172 | 0; //@line 18011
   HEAP32[$186 >> 2] = $$0107$be; //@line 18012
   $187 = $ReallocAsyncCtx + 176 | 0; //@line 18013
   HEAP8[$187 >> 0] = $84; //@line 18014
   $188 = $ReallocAsyncCtx + 180 | 0; //@line 18015
   HEAP32[$188 >> 2] = $86; //@line 18016
   $189 = $ReallocAsyncCtx + 184 | 0; //@line 18017
   HEAP8[$189 >> 0] = $88; //@line 18018
   $190 = $ReallocAsyncCtx + 188 | 0; //@line 18019
   HEAP32[$190 >> 2] = $90; //@line 18020
   $191 = $ReallocAsyncCtx + 192 | 0; //@line 18021
   HEAP32[$191 >> 2] = $92; //@line 18022
   $192 = $ReallocAsyncCtx + 196 | 0; //@line 18023
   HEAP32[$192 >> 2] = $94; //@line 18024
   $193 = $ReallocAsyncCtx + 200 | 0; //@line 18025
   HEAP32[$193 >> 2] = $96; //@line 18026
   $194 = $ReallocAsyncCtx + 204 | 0; //@line 18027
   HEAP32[$194 >> 2] = $98; //@line 18028
   $195 = $ReallocAsyncCtx + 208 | 0; //@line 18029
   HEAP32[$195 >> 2] = $100; //@line 18030
   $196 = $ReallocAsyncCtx + 212 | 0; //@line 18031
   HEAP32[$196 >> 2] = $102; //@line 18032
   $197 = $ReallocAsyncCtx + 216 | 0; //@line 18033
   HEAP32[$197 >> 2] = $104; //@line 18034
   $198 = $ReallocAsyncCtx + 220 | 0; //@line 18035
   HEAP32[$198 >> 2] = $106; //@line 18036
   $199 = $ReallocAsyncCtx + 224 | 0; //@line 18037
   HEAP32[$199 >> 2] = $108; //@line 18038
   $200 = $ReallocAsyncCtx + 228 | 0; //@line 18039
   HEAP32[$200 >> 2] = $110; //@line 18040
   $201 = $ReallocAsyncCtx + 232 | 0; //@line 18041
   HEAP32[$201 >> 2] = $112; //@line 18042
   $202 = $ReallocAsyncCtx + 236 | 0; //@line 18043
   HEAP32[$202 >> 2] = $116; //@line 18044
   sp = STACKTOP; //@line 18045
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 18049
  ___async_unwind = 0; //@line 18050
  HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 18051
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 18052
  HEAP32[$144 >> 2] = $2; //@line 18053
  $145 = $ReallocAsyncCtx + 8 | 0; //@line 18054
  HEAP32[$145 >> 2] = $4; //@line 18055
  $146 = $ReallocAsyncCtx + 12 | 0; //@line 18056
  HEAP32[$146 >> 2] = $6; //@line 18057
  $147 = $ReallocAsyncCtx + 16 | 0; //@line 18058
  HEAP32[$147 >> 2] = $8; //@line 18059
  $148 = $ReallocAsyncCtx + 20 | 0; //@line 18060
  HEAP32[$148 >> 2] = $10; //@line 18061
  $149 = $ReallocAsyncCtx + 24 | 0; //@line 18062
  HEAP32[$149 >> 2] = $12; //@line 18063
  $150 = $ReallocAsyncCtx + 28 | 0; //@line 18064
  HEAP32[$150 >> 2] = $14; //@line 18065
  $151 = $ReallocAsyncCtx + 32 | 0; //@line 18066
  HEAP32[$151 >> 2] = $16; //@line 18067
  $152 = $ReallocAsyncCtx + 36 | 0; //@line 18068
  HEAP32[$152 >> 2] = $18; //@line 18069
  $153 = $ReallocAsyncCtx + 40 | 0; //@line 18070
  HEAP32[$153 >> 2] = $20; //@line 18071
  $154 = $ReallocAsyncCtx + 44 | 0; //@line 18072
  HEAP32[$154 >> 2] = $22; //@line 18073
  $155 = $ReallocAsyncCtx + 48 | 0; //@line 18074
  HEAP32[$155 >> 2] = $24; //@line 18075
  $156 = $ReallocAsyncCtx + 52 | 0; //@line 18076
  HEAP32[$156 >> 2] = $26; //@line 18077
  $157 = $ReallocAsyncCtx + 56 | 0; //@line 18078
  HEAP32[$157 >> 2] = $28; //@line 18079
  $158 = $ReallocAsyncCtx + 60 | 0; //@line 18080
  HEAP32[$158 >> 2] = $30; //@line 18081
  $159 = $ReallocAsyncCtx + 64 | 0; //@line 18082
  HEAP32[$159 >> 2] = $32; //@line 18083
  $160 = $ReallocAsyncCtx + 68 | 0; //@line 18084
  HEAP32[$160 >> 2] = $34; //@line 18085
  $161 = $ReallocAsyncCtx + 72 | 0; //@line 18086
  HEAP32[$161 >> 2] = $36; //@line 18087
  $162 = $ReallocAsyncCtx + 76 | 0; //@line 18088
  HEAP32[$162 >> 2] = $38; //@line 18089
  $163 = $ReallocAsyncCtx + 80 | 0; //@line 18090
  HEAP32[$163 >> 2] = $40; //@line 18091
  $164 = $ReallocAsyncCtx + 84 | 0; //@line 18092
  HEAP32[$164 >> 2] = $42; //@line 18093
  $165 = $ReallocAsyncCtx + 88 | 0; //@line 18094
  HEAP32[$165 >> 2] = $44; //@line 18095
  $166 = $ReallocAsyncCtx + 92 | 0; //@line 18096
  HEAP32[$166 >> 2] = $46; //@line 18097
  $167 = $ReallocAsyncCtx + 96 | 0; //@line 18098
  HEAP32[$167 >> 2] = $48; //@line 18099
  $168 = $ReallocAsyncCtx + 100 | 0; //@line 18100
  HEAP32[$168 >> 2] = $50; //@line 18101
  $169 = $ReallocAsyncCtx + 104 | 0; //@line 18102
  HEAP32[$169 >> 2] = $52; //@line 18103
  $170 = $ReallocAsyncCtx + 108 | 0; //@line 18104
  HEAP32[$170 >> 2] = $54; //@line 18105
  $171 = $ReallocAsyncCtx + 112 | 0; //@line 18106
  HEAP32[$171 >> 2] = $56; //@line 18107
  $172 = $ReallocAsyncCtx + 116 | 0; //@line 18108
  HEAP32[$172 >> 2] = $58; //@line 18109
  $173 = $ReallocAsyncCtx + 120 | 0; //@line 18110
  HEAP32[$173 >> 2] = $60; //@line 18111
  $174 = $ReallocAsyncCtx + 124 | 0; //@line 18112
  HEAP32[$174 >> 2] = $62; //@line 18113
  $175 = $ReallocAsyncCtx + 128 | 0; //@line 18114
  HEAP32[$175 >> 2] = $64; //@line 18115
  $176 = $ReallocAsyncCtx + 132 | 0; //@line 18116
  HEAP32[$176 >> 2] = $66; //@line 18117
  $177 = $ReallocAsyncCtx + 136 | 0; //@line 18118
  HEAP32[$177 >> 2] = $68; //@line 18119
  $178 = $ReallocAsyncCtx + 140 | 0; //@line 18120
  HEAP32[$178 >> 2] = $70; //@line 18121
  $179 = $ReallocAsyncCtx + 144 | 0; //@line 18122
  HEAP32[$179 >> 2] = $72; //@line 18123
  $180 = $ReallocAsyncCtx + 148 | 0; //@line 18124
  HEAP32[$180 >> 2] = $74; //@line 18125
  $181 = $ReallocAsyncCtx + 152 | 0; //@line 18126
  HEAP32[$181 >> 2] = $76; //@line 18127
  $182 = $ReallocAsyncCtx + 156 | 0; //@line 18128
  HEAP32[$182 >> 2] = $130; //@line 18129
  $183 = $ReallocAsyncCtx + 160 | 0; //@line 18130
  HEAP32[$183 >> 2] = $78; //@line 18131
  $184 = $ReallocAsyncCtx + 164 | 0; //@line 18132
  HEAP8[$184 >> 0] = $80; //@line 18133
  $185 = $ReallocAsyncCtx + 168 | 0; //@line 18134
  HEAP32[$185 >> 2] = $82; //@line 18135
  $186 = $ReallocAsyncCtx + 172 | 0; //@line 18136
  HEAP32[$186 >> 2] = $$0107$be; //@line 18137
  $187 = $ReallocAsyncCtx + 176 | 0; //@line 18138
  HEAP8[$187 >> 0] = $84; //@line 18139
  $188 = $ReallocAsyncCtx + 180 | 0; //@line 18140
  HEAP32[$188 >> 2] = $86; //@line 18141
  $189 = $ReallocAsyncCtx + 184 | 0; //@line 18142
  HEAP8[$189 >> 0] = $88; //@line 18143
  $190 = $ReallocAsyncCtx + 188 | 0; //@line 18144
  HEAP32[$190 >> 2] = $90; //@line 18145
  $191 = $ReallocAsyncCtx + 192 | 0; //@line 18146
  HEAP32[$191 >> 2] = $92; //@line 18147
  $192 = $ReallocAsyncCtx + 196 | 0; //@line 18148
  HEAP32[$192 >> 2] = $94; //@line 18149
  $193 = $ReallocAsyncCtx + 200 | 0; //@line 18150
  HEAP32[$193 >> 2] = $96; //@line 18151
  $194 = $ReallocAsyncCtx + 204 | 0; //@line 18152
  HEAP32[$194 >> 2] = $98; //@line 18153
  $195 = $ReallocAsyncCtx + 208 | 0; //@line 18154
  HEAP32[$195 >> 2] = $100; //@line 18155
  $196 = $ReallocAsyncCtx + 212 | 0; //@line 18156
  HEAP32[$196 >> 2] = $102; //@line 18157
  $197 = $ReallocAsyncCtx + 216 | 0; //@line 18158
  HEAP32[$197 >> 2] = $104; //@line 18159
  $198 = $ReallocAsyncCtx + 220 | 0; //@line 18160
  HEAP32[$198 >> 2] = $106; //@line 18161
  $199 = $ReallocAsyncCtx + 224 | 0; //@line 18162
  HEAP32[$199 >> 2] = $108; //@line 18163
  $200 = $ReallocAsyncCtx + 228 | 0; //@line 18164
  HEAP32[$200 >> 2] = $110; //@line 18165
  $201 = $ReallocAsyncCtx + 232 | 0; //@line 18166
  HEAP32[$201 >> 2] = $112; //@line 18167
  $202 = $ReallocAsyncCtx + 236 | 0; //@line 18168
  HEAP32[$202 >> 2] = $116; //@line 18169
  sp = STACKTOP; //@line 18170
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$82 + ($119 & 255) >> 0] | 0; //@line 18176
  HEAP8[$26 >> 0] = ($221 & 255) >>> 4 & 7; //@line 18181
  HEAP8[$98 >> 0] = $221 & 15; //@line 18183
  $240 = $$0$be + 5 << 24 >> 24; //@line 18197
  HEAP32[$32 >> 2] = (HEAPU8[$82 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$82 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$82 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 18205
  $250 = HEAP32[(HEAP32[$2 >> 2] | 0) + 40 >> 2] | 0; //@line 18208
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(236) | 0; //@line 18209
  $251 = FUNCTION_TABLE_iii[$250 & 15]($62, $12) | 0; //@line 18210
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 18213
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 18214
   HEAP32[$252 >> 2] = $2; //@line 18215
   $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 18216
   HEAP32[$253 >> 2] = $4; //@line 18217
   $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 18218
   HEAP32[$254 >> 2] = $6; //@line 18219
   $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 18220
   HEAP32[$255 >> 2] = $8; //@line 18221
   $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 18222
   HEAP32[$256 >> 2] = $10; //@line 18223
   $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 18224
   HEAP32[$257 >> 2] = $12; //@line 18225
   $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 18226
   HEAP32[$258 >> 2] = $14; //@line 18227
   $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 18228
   HEAP32[$259 >> 2] = $16; //@line 18229
   $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 18230
   HEAP32[$260 >> 2] = $18; //@line 18231
   $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 18232
   HEAP32[$261 >> 2] = $20; //@line 18233
   $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 18234
   HEAP32[$262 >> 2] = $22; //@line 18235
   $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 18236
   HEAP32[$263 >> 2] = $24; //@line 18237
   $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 18238
   HEAP32[$264 >> 2] = $26; //@line 18239
   $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 18240
   HEAP32[$265 >> 2] = $28; //@line 18241
   $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 18242
   HEAP32[$266 >> 2] = $30; //@line 18243
   $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 18244
   HEAP32[$267 >> 2] = $32; //@line 18245
   $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 18246
   HEAP32[$268 >> 2] = $34; //@line 18247
   $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 18248
   HEAP32[$269 >> 2] = $36; //@line 18249
   $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 18250
   HEAP32[$270 >> 2] = $38; //@line 18251
   $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 18252
   HEAP32[$271 >> 2] = $40; //@line 18253
   $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 18254
   HEAP32[$272 >> 2] = $42; //@line 18255
   $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 18256
   HEAP32[$273 >> 2] = $44; //@line 18257
   $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 18258
   HEAP32[$274 >> 2] = $46; //@line 18259
   $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 18260
   HEAP32[$275 >> 2] = $48; //@line 18261
   $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 18262
   HEAP32[$276 >> 2] = $50; //@line 18263
   $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 18264
   HEAP32[$277 >> 2] = $52; //@line 18265
   $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 18266
   HEAP32[$278 >> 2] = $54; //@line 18267
   $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 18268
   HEAP32[$279 >> 2] = $56; //@line 18269
   $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 18270
   HEAP32[$280 >> 2] = $58; //@line 18271
   $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 18272
   HEAP32[$281 >> 2] = $60; //@line 18273
   $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 18274
   HEAP32[$282 >> 2] = $62; //@line 18275
   $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 18276
   HEAP32[$283 >> 2] = $64; //@line 18277
   $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 18278
   HEAP32[$284 >> 2] = $66; //@line 18279
   $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 18280
   HEAP32[$285 >> 2] = $68; //@line 18281
   $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 18282
   HEAP32[$286 >> 2] = $70; //@line 18283
   $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 18284
   HEAP32[$287 >> 2] = $72; //@line 18285
   $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 18286
   HEAP32[$288 >> 2] = $74; //@line 18287
   $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 18288
   HEAP32[$289 >> 2] = $76; //@line 18289
   $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 18290
   HEAP32[$290 >> 2] = $78; //@line 18291
   $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 18292
   HEAP8[$291 >> 0] = $80; //@line 18293
   $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 18294
   HEAP32[$292 >> 2] = $82; //@line 18295
   $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 18296
   HEAP8[$293 >> 0] = $84; //@line 18297
   $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 18298
   HEAP32[$294 >> 2] = $86; //@line 18299
   $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 18300
   HEAP8[$295 >> 0] = $88; //@line 18301
   $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 18302
   HEAP32[$296 >> 2] = $90; //@line 18303
   $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 18304
   HEAP32[$297 >> 2] = $92; //@line 18305
   $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 18306
   HEAP32[$298 >> 2] = $94; //@line 18307
   $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 18308
   HEAP32[$299 >> 2] = $96; //@line 18309
   $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 18310
   HEAP32[$300 >> 2] = $98; //@line 18311
   $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 18312
   HEAP32[$301 >> 2] = $100; //@line 18313
   $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 18314
   HEAP32[$302 >> 2] = $102; //@line 18315
   $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 18316
   HEAP32[$303 >> 2] = $104; //@line 18317
   $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 18318
   HEAP32[$304 >> 2] = $106; //@line 18319
   $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 18320
   HEAP32[$305 >> 2] = $108; //@line 18321
   $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 18322
   HEAP32[$306 >> 2] = $110; //@line 18323
   $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 18324
   HEAP32[$307 >> 2] = $112; //@line 18325
   $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 18326
   HEAP8[$308 >> 0] = $240; //@line 18327
   $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 18328
   HEAP32[$309 >> 2] = $116; //@line 18329
   sp = STACKTOP; //@line 18330
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 18334
  ___async_unwind = 0; //@line 18335
  HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 18336
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 18337
  HEAP32[$252 >> 2] = $2; //@line 18338
  $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 18339
  HEAP32[$253 >> 2] = $4; //@line 18340
  $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 18341
  HEAP32[$254 >> 2] = $6; //@line 18342
  $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 18343
  HEAP32[$255 >> 2] = $8; //@line 18344
  $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 18345
  HEAP32[$256 >> 2] = $10; //@line 18346
  $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 18347
  HEAP32[$257 >> 2] = $12; //@line 18348
  $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 18349
  HEAP32[$258 >> 2] = $14; //@line 18350
  $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 18351
  HEAP32[$259 >> 2] = $16; //@line 18352
  $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 18353
  HEAP32[$260 >> 2] = $18; //@line 18354
  $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 18355
  HEAP32[$261 >> 2] = $20; //@line 18356
  $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 18357
  HEAP32[$262 >> 2] = $22; //@line 18358
  $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 18359
  HEAP32[$263 >> 2] = $24; //@line 18360
  $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 18361
  HEAP32[$264 >> 2] = $26; //@line 18362
  $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 18363
  HEAP32[$265 >> 2] = $28; //@line 18364
  $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 18365
  HEAP32[$266 >> 2] = $30; //@line 18366
  $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 18367
  HEAP32[$267 >> 2] = $32; //@line 18368
  $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 18369
  HEAP32[$268 >> 2] = $34; //@line 18370
  $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 18371
  HEAP32[$269 >> 2] = $36; //@line 18372
  $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 18373
  HEAP32[$270 >> 2] = $38; //@line 18374
  $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 18375
  HEAP32[$271 >> 2] = $40; //@line 18376
  $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 18377
  HEAP32[$272 >> 2] = $42; //@line 18378
  $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 18379
  HEAP32[$273 >> 2] = $44; //@line 18380
  $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 18381
  HEAP32[$274 >> 2] = $46; //@line 18382
  $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 18383
  HEAP32[$275 >> 2] = $48; //@line 18384
  $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 18385
  HEAP32[$276 >> 2] = $50; //@line 18386
  $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 18387
  HEAP32[$277 >> 2] = $52; //@line 18388
  $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 18389
  HEAP32[$278 >> 2] = $54; //@line 18390
  $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 18391
  HEAP32[$279 >> 2] = $56; //@line 18392
  $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 18393
  HEAP32[$280 >> 2] = $58; //@line 18394
  $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 18395
  HEAP32[$281 >> 2] = $60; //@line 18396
  $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 18397
  HEAP32[$282 >> 2] = $62; //@line 18398
  $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 18399
  HEAP32[$283 >> 2] = $64; //@line 18400
  $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 18401
  HEAP32[$284 >> 2] = $66; //@line 18402
  $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 18403
  HEAP32[$285 >> 2] = $68; //@line 18404
  $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 18405
  HEAP32[$286 >> 2] = $70; //@line 18406
  $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 18407
  HEAP32[$287 >> 2] = $72; //@line 18408
  $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 18409
  HEAP32[$288 >> 2] = $74; //@line 18410
  $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 18411
  HEAP32[$289 >> 2] = $76; //@line 18412
  $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 18413
  HEAP32[$290 >> 2] = $78; //@line 18414
  $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 18415
  HEAP8[$291 >> 0] = $80; //@line 18416
  $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 18417
  HEAP32[$292 >> 2] = $82; //@line 18418
  $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 18419
  HEAP8[$293 >> 0] = $84; //@line 18420
  $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 18421
  HEAP32[$294 >> 2] = $86; //@line 18422
  $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 18423
  HEAP8[$295 >> 0] = $88; //@line 18424
  $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 18425
  HEAP32[$296 >> 2] = $90; //@line 18426
  $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 18427
  HEAP32[$297 >> 2] = $92; //@line 18428
  $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 18429
  HEAP32[$298 >> 2] = $94; //@line 18430
  $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 18431
  HEAP32[$299 >> 2] = $96; //@line 18432
  $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 18433
  HEAP32[$300 >> 2] = $98; //@line 18434
  $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 18435
  HEAP32[$301 >> 2] = $100; //@line 18436
  $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 18437
  HEAP32[$302 >> 2] = $102; //@line 18438
  $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 18439
  HEAP32[$303 >> 2] = $104; //@line 18440
  $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 18441
  HEAP32[$304 >> 2] = $106; //@line 18442
  $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 18443
  HEAP32[$305 >> 2] = $108; //@line 18444
  $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 18445
  HEAP32[$306 >> 2] = $110; //@line 18446
  $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 18447
  HEAP32[$307 >> 2] = $112; //@line 18448
  $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 18449
  HEAP8[$308 >> 0] = $240; //@line 18450
  $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 18451
  HEAP32[$309 >> 2] = $116; //@line 18452
  sp = STACKTOP; //@line 18453
  return;
 } else if ((label | 0) == 18) {
  $330 = HEAP32[$328 >> 2] | 0; //@line 18457
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(236) | 0; //@line 18458
  $331 = FUNCTION_TABLE_ii[$330 & 15]($66) | 0; //@line 18459
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 18462
   $332 = $ReallocAsyncCtx3 + 4 | 0; //@line 18463
   HEAP32[$332 >> 2] = $2; //@line 18464
   $333 = $ReallocAsyncCtx3 + 8 | 0; //@line 18465
   HEAP32[$333 >> 2] = $4; //@line 18466
   $334 = $ReallocAsyncCtx3 + 12 | 0; //@line 18467
   HEAP32[$334 >> 2] = $6; //@line 18468
   $335 = $ReallocAsyncCtx3 + 16 | 0; //@line 18469
   HEAP32[$335 >> 2] = $8; //@line 18470
   $336 = $ReallocAsyncCtx3 + 20 | 0; //@line 18471
   HEAP32[$336 >> 2] = $10; //@line 18472
   $337 = $ReallocAsyncCtx3 + 24 | 0; //@line 18473
   HEAP32[$337 >> 2] = $12; //@line 18474
   $338 = $ReallocAsyncCtx3 + 28 | 0; //@line 18475
   HEAP32[$338 >> 2] = $14; //@line 18476
   $339 = $ReallocAsyncCtx3 + 32 | 0; //@line 18477
   HEAP32[$339 >> 2] = $16; //@line 18478
   $340 = $ReallocAsyncCtx3 + 36 | 0; //@line 18479
   HEAP32[$340 >> 2] = $18; //@line 18480
   $341 = $ReallocAsyncCtx3 + 40 | 0; //@line 18481
   HEAP32[$341 >> 2] = $20; //@line 18482
   $342 = $ReallocAsyncCtx3 + 44 | 0; //@line 18483
   HEAP32[$342 >> 2] = $22; //@line 18484
   $343 = $ReallocAsyncCtx3 + 48 | 0; //@line 18485
   HEAP32[$343 >> 2] = $24; //@line 18486
   $344 = $ReallocAsyncCtx3 + 52 | 0; //@line 18487
   HEAP32[$344 >> 2] = $26; //@line 18488
   $345 = $ReallocAsyncCtx3 + 56 | 0; //@line 18489
   HEAP32[$345 >> 2] = $28; //@line 18490
   $346 = $ReallocAsyncCtx3 + 60 | 0; //@line 18491
   HEAP32[$346 >> 2] = $30; //@line 18492
   $347 = $ReallocAsyncCtx3 + 64 | 0; //@line 18493
   HEAP32[$347 >> 2] = $32; //@line 18494
   $348 = $ReallocAsyncCtx3 + 68 | 0; //@line 18495
   HEAP32[$348 >> 2] = $34; //@line 18496
   $349 = $ReallocAsyncCtx3 + 72 | 0; //@line 18497
   HEAP32[$349 >> 2] = $36; //@line 18498
   $350 = $ReallocAsyncCtx3 + 76 | 0; //@line 18499
   HEAP32[$350 >> 2] = $38; //@line 18500
   $351 = $ReallocAsyncCtx3 + 80 | 0; //@line 18501
   HEAP32[$351 >> 2] = $40; //@line 18502
   $352 = $ReallocAsyncCtx3 + 84 | 0; //@line 18503
   HEAP32[$352 >> 2] = $42; //@line 18504
   $353 = $ReallocAsyncCtx3 + 88 | 0; //@line 18505
   HEAP32[$353 >> 2] = $44; //@line 18506
   $354 = $ReallocAsyncCtx3 + 92 | 0; //@line 18507
   HEAP32[$354 >> 2] = $46; //@line 18508
   $355 = $ReallocAsyncCtx3 + 96 | 0; //@line 18509
   HEAP32[$355 >> 2] = $48; //@line 18510
   $356 = $ReallocAsyncCtx3 + 100 | 0; //@line 18511
   HEAP32[$356 >> 2] = $50; //@line 18512
   $357 = $ReallocAsyncCtx3 + 104 | 0; //@line 18513
   HEAP32[$357 >> 2] = $52; //@line 18514
   $358 = $ReallocAsyncCtx3 + 108 | 0; //@line 18515
   HEAP32[$358 >> 2] = $54; //@line 18516
   $359 = $ReallocAsyncCtx3 + 112 | 0; //@line 18517
   HEAP32[$359 >> 2] = $56; //@line 18518
   $360 = $ReallocAsyncCtx3 + 116 | 0; //@line 18519
   HEAP32[$360 >> 2] = $58; //@line 18520
   $361 = $ReallocAsyncCtx3 + 120 | 0; //@line 18521
   HEAP32[$361 >> 2] = $60; //@line 18522
   $362 = $ReallocAsyncCtx3 + 124 | 0; //@line 18523
   HEAP32[$362 >> 2] = $62; //@line 18524
   $363 = $ReallocAsyncCtx3 + 128 | 0; //@line 18525
   HEAP32[$363 >> 2] = $64; //@line 18526
   $364 = $ReallocAsyncCtx3 + 132 | 0; //@line 18527
   HEAP32[$364 >> 2] = $66; //@line 18528
   $365 = $ReallocAsyncCtx3 + 136 | 0; //@line 18529
   HEAP32[$365 >> 2] = $68; //@line 18530
   $366 = $ReallocAsyncCtx3 + 140 | 0; //@line 18531
   HEAP32[$366 >> 2] = $70; //@line 18532
   $367 = $ReallocAsyncCtx3 + 144 | 0; //@line 18533
   HEAP32[$367 >> 2] = $72; //@line 18534
   $368 = $ReallocAsyncCtx3 + 148 | 0; //@line 18535
   HEAP32[$368 >> 2] = $74; //@line 18536
   $369 = $ReallocAsyncCtx3 + 152 | 0; //@line 18537
   HEAP32[$369 >> 2] = $76; //@line 18538
   $370 = $ReallocAsyncCtx3 + 156 | 0; //@line 18539
   HEAP32[$370 >> 2] = $78; //@line 18540
   $371 = $ReallocAsyncCtx3 + 160 | 0; //@line 18541
   HEAP8[$371 >> 0] = $80; //@line 18542
   $372 = $ReallocAsyncCtx3 + 164 | 0; //@line 18543
   HEAP32[$372 >> 2] = $82; //@line 18544
   $373 = $ReallocAsyncCtx3 + 168 | 0; //@line 18545
   HEAP8[$373 >> 0] = $84; //@line 18546
   $374 = $ReallocAsyncCtx3 + 172 | 0; //@line 18547
   HEAP32[$374 >> 2] = $86; //@line 18548
   $375 = $ReallocAsyncCtx3 + 176 | 0; //@line 18549
   HEAP8[$375 >> 0] = $88; //@line 18550
   $376 = $ReallocAsyncCtx3 + 180 | 0; //@line 18551
   HEAP32[$376 >> 2] = $90; //@line 18552
   $377 = $ReallocAsyncCtx3 + 184 | 0; //@line 18553
   HEAP32[$377 >> 2] = $92; //@line 18554
   $378 = $ReallocAsyncCtx3 + 188 | 0; //@line 18555
   HEAP32[$378 >> 2] = $94; //@line 18556
   $379 = $ReallocAsyncCtx3 + 192 | 0; //@line 18557
   HEAP32[$379 >> 2] = $96; //@line 18558
   $380 = $ReallocAsyncCtx3 + 196 | 0; //@line 18559
   HEAP32[$380 >> 2] = $98; //@line 18560
   $381 = $ReallocAsyncCtx3 + 200 | 0; //@line 18561
   HEAP32[$381 >> 2] = $100; //@line 18562
   $382 = $ReallocAsyncCtx3 + 204 | 0; //@line 18563
   HEAP32[$382 >> 2] = $102; //@line 18564
   $383 = $ReallocAsyncCtx3 + 208 | 0; //@line 18565
   HEAP8[$383 >> 0] = $119; //@line 18566
   $384 = $ReallocAsyncCtx3 + 212 | 0; //@line 18567
   HEAP32[$384 >> 2] = $104; //@line 18568
   $385 = $ReallocAsyncCtx3 + 216 | 0; //@line 18569
   HEAP32[$385 >> 2] = $106; //@line 18570
   $386 = $ReallocAsyncCtx3 + 220 | 0; //@line 18571
   HEAP32[$386 >> 2] = $108; //@line 18572
   $387 = $ReallocAsyncCtx3 + 224 | 0; //@line 18573
   HEAP32[$387 >> 2] = $110; //@line 18574
   $388 = $ReallocAsyncCtx3 + 228 | 0; //@line 18575
   HEAP32[$388 >> 2] = $112; //@line 18576
   $389 = $ReallocAsyncCtx3 + 232 | 0; //@line 18577
   HEAP32[$389 >> 2] = $116; //@line 18578
   sp = STACKTOP; //@line 18579
   return;
  }
  HEAP8[___async_retval >> 0] = $331; //@line 18583
  ___async_unwind = 0; //@line 18584
  HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 18585
  $332 = $ReallocAsyncCtx3 + 4 | 0; //@line 18586
  HEAP32[$332 >> 2] = $2; //@line 18587
  $333 = $ReallocAsyncCtx3 + 8 | 0; //@line 18588
  HEAP32[$333 >> 2] = $4; //@line 18589
  $334 = $ReallocAsyncCtx3 + 12 | 0; //@line 18590
  HEAP32[$334 >> 2] = $6; //@line 18591
  $335 = $ReallocAsyncCtx3 + 16 | 0; //@line 18592
  HEAP32[$335 >> 2] = $8; //@line 18593
  $336 = $ReallocAsyncCtx3 + 20 | 0; //@line 18594
  HEAP32[$336 >> 2] = $10; //@line 18595
  $337 = $ReallocAsyncCtx3 + 24 | 0; //@line 18596
  HEAP32[$337 >> 2] = $12; //@line 18597
  $338 = $ReallocAsyncCtx3 + 28 | 0; //@line 18598
  HEAP32[$338 >> 2] = $14; //@line 18599
  $339 = $ReallocAsyncCtx3 + 32 | 0; //@line 18600
  HEAP32[$339 >> 2] = $16; //@line 18601
  $340 = $ReallocAsyncCtx3 + 36 | 0; //@line 18602
  HEAP32[$340 >> 2] = $18; //@line 18603
  $341 = $ReallocAsyncCtx3 + 40 | 0; //@line 18604
  HEAP32[$341 >> 2] = $20; //@line 18605
  $342 = $ReallocAsyncCtx3 + 44 | 0; //@line 18606
  HEAP32[$342 >> 2] = $22; //@line 18607
  $343 = $ReallocAsyncCtx3 + 48 | 0; //@line 18608
  HEAP32[$343 >> 2] = $24; //@line 18609
  $344 = $ReallocAsyncCtx3 + 52 | 0; //@line 18610
  HEAP32[$344 >> 2] = $26; //@line 18611
  $345 = $ReallocAsyncCtx3 + 56 | 0; //@line 18612
  HEAP32[$345 >> 2] = $28; //@line 18613
  $346 = $ReallocAsyncCtx3 + 60 | 0; //@line 18614
  HEAP32[$346 >> 2] = $30; //@line 18615
  $347 = $ReallocAsyncCtx3 + 64 | 0; //@line 18616
  HEAP32[$347 >> 2] = $32; //@line 18617
  $348 = $ReallocAsyncCtx3 + 68 | 0; //@line 18618
  HEAP32[$348 >> 2] = $34; //@line 18619
  $349 = $ReallocAsyncCtx3 + 72 | 0; //@line 18620
  HEAP32[$349 >> 2] = $36; //@line 18621
  $350 = $ReallocAsyncCtx3 + 76 | 0; //@line 18622
  HEAP32[$350 >> 2] = $38; //@line 18623
  $351 = $ReallocAsyncCtx3 + 80 | 0; //@line 18624
  HEAP32[$351 >> 2] = $40; //@line 18625
  $352 = $ReallocAsyncCtx3 + 84 | 0; //@line 18626
  HEAP32[$352 >> 2] = $42; //@line 18627
  $353 = $ReallocAsyncCtx3 + 88 | 0; //@line 18628
  HEAP32[$353 >> 2] = $44; //@line 18629
  $354 = $ReallocAsyncCtx3 + 92 | 0; //@line 18630
  HEAP32[$354 >> 2] = $46; //@line 18631
  $355 = $ReallocAsyncCtx3 + 96 | 0; //@line 18632
  HEAP32[$355 >> 2] = $48; //@line 18633
  $356 = $ReallocAsyncCtx3 + 100 | 0; //@line 18634
  HEAP32[$356 >> 2] = $50; //@line 18635
  $357 = $ReallocAsyncCtx3 + 104 | 0; //@line 18636
  HEAP32[$357 >> 2] = $52; //@line 18637
  $358 = $ReallocAsyncCtx3 + 108 | 0; //@line 18638
  HEAP32[$358 >> 2] = $54; //@line 18639
  $359 = $ReallocAsyncCtx3 + 112 | 0; //@line 18640
  HEAP32[$359 >> 2] = $56; //@line 18641
  $360 = $ReallocAsyncCtx3 + 116 | 0; //@line 18642
  HEAP32[$360 >> 2] = $58; //@line 18643
  $361 = $ReallocAsyncCtx3 + 120 | 0; //@line 18644
  HEAP32[$361 >> 2] = $60; //@line 18645
  $362 = $ReallocAsyncCtx3 + 124 | 0; //@line 18646
  HEAP32[$362 >> 2] = $62; //@line 18647
  $363 = $ReallocAsyncCtx3 + 128 | 0; //@line 18648
  HEAP32[$363 >> 2] = $64; //@line 18649
  $364 = $ReallocAsyncCtx3 + 132 | 0; //@line 18650
  HEAP32[$364 >> 2] = $66; //@line 18651
  $365 = $ReallocAsyncCtx3 + 136 | 0; //@line 18652
  HEAP32[$365 >> 2] = $68; //@line 18653
  $366 = $ReallocAsyncCtx3 + 140 | 0; //@line 18654
  HEAP32[$366 >> 2] = $70; //@line 18655
  $367 = $ReallocAsyncCtx3 + 144 | 0; //@line 18656
  HEAP32[$367 >> 2] = $72; //@line 18657
  $368 = $ReallocAsyncCtx3 + 148 | 0; //@line 18658
  HEAP32[$368 >> 2] = $74; //@line 18659
  $369 = $ReallocAsyncCtx3 + 152 | 0; //@line 18660
  HEAP32[$369 >> 2] = $76; //@line 18661
  $370 = $ReallocAsyncCtx3 + 156 | 0; //@line 18662
  HEAP32[$370 >> 2] = $78; //@line 18663
  $371 = $ReallocAsyncCtx3 + 160 | 0; //@line 18664
  HEAP8[$371 >> 0] = $80; //@line 18665
  $372 = $ReallocAsyncCtx3 + 164 | 0; //@line 18666
  HEAP32[$372 >> 2] = $82; //@line 18667
  $373 = $ReallocAsyncCtx3 + 168 | 0; //@line 18668
  HEAP8[$373 >> 0] = $84; //@line 18669
  $374 = $ReallocAsyncCtx3 + 172 | 0; //@line 18670
  HEAP32[$374 >> 2] = $86; //@line 18671
  $375 = $ReallocAsyncCtx3 + 176 | 0; //@line 18672
  HEAP8[$375 >> 0] = $88; //@line 18673
  $376 = $ReallocAsyncCtx3 + 180 | 0; //@line 18674
  HEAP32[$376 >> 2] = $90; //@line 18675
  $377 = $ReallocAsyncCtx3 + 184 | 0; //@line 18676
  HEAP32[$377 >> 2] = $92; //@line 18677
  $378 = $ReallocAsyncCtx3 + 188 | 0; //@line 18678
  HEAP32[$378 >> 2] = $94; //@line 18679
  $379 = $ReallocAsyncCtx3 + 192 | 0; //@line 18680
  HEAP32[$379 >> 2] = $96; //@line 18681
  $380 = $ReallocAsyncCtx3 + 196 | 0; //@line 18682
  HEAP32[$380 >> 2] = $98; //@line 18683
  $381 = $ReallocAsyncCtx3 + 200 | 0; //@line 18684
  HEAP32[$381 >> 2] = $100; //@line 18685
  $382 = $ReallocAsyncCtx3 + 204 | 0; //@line 18686
  HEAP32[$382 >> 2] = $102; //@line 18687
  $383 = $ReallocAsyncCtx3 + 208 | 0; //@line 18688
  HEAP8[$383 >> 0] = $119; //@line 18689
  $384 = $ReallocAsyncCtx3 + 212 | 0; //@line 18690
  HEAP32[$384 >> 2] = $104; //@line 18691
  $385 = $ReallocAsyncCtx3 + 216 | 0; //@line 18692
  HEAP32[$385 >> 2] = $106; //@line 18693
  $386 = $ReallocAsyncCtx3 + 220 | 0; //@line 18694
  HEAP32[$386 >> 2] = $108; //@line 18695
  $387 = $ReallocAsyncCtx3 + 224 | 0; //@line 18696
  HEAP32[$387 >> 2] = $110; //@line 18697
  $388 = $ReallocAsyncCtx3 + 228 | 0; //@line 18698
  HEAP32[$388 >> 2] = $112; //@line 18699
  $389 = $ReallocAsyncCtx3 + 232 | 0; //@line 18700
  HEAP32[$389 >> 2] = $116; //@line 18701
  sp = STACKTOP; //@line 18702
  return;
 } else if ((label | 0) == 23) {
  $409 = HEAP8[$82 + ($119 & 255) >> 0] | 0; //@line 18709
  HEAP32[$112 >> 2] = (HEAPU8[$82 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$82 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$82 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 18730
  HEAP32[$94 >> 2] = 0; //@line 18731
  $430 = $$0$be + 6 << 24 >> 24; //@line 18732
  HEAP8[$96 >> 0] = HEAP8[$82 + ($$0$be + 5 & 255) >> 0] | 0; //@line 18736
  $436 = HEAP32[(HEAP32[$22 >> 2] | 0) + 8 >> 2] | 0; //@line 18739
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(236) | 0; //@line 18740
  $437 = FUNCTION_TABLE_iiii[$436 & 31]($62, $409, $4) | 0; //@line 18741
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 18744
   $438 = $ReallocAsyncCtx4 + 4 | 0; //@line 18745
   HEAP32[$438 >> 2] = $2; //@line 18746
   $439 = $ReallocAsyncCtx4 + 8 | 0; //@line 18747
   HEAP32[$439 >> 2] = $4; //@line 18748
   $440 = $ReallocAsyncCtx4 + 12 | 0; //@line 18749
   HEAP32[$440 >> 2] = $6; //@line 18750
   $441 = $ReallocAsyncCtx4 + 16 | 0; //@line 18751
   HEAP32[$441 >> 2] = $8; //@line 18752
   $442 = $ReallocAsyncCtx4 + 20 | 0; //@line 18753
   HEAP32[$442 >> 2] = $10; //@line 18754
   $443 = $ReallocAsyncCtx4 + 24 | 0; //@line 18755
   HEAP32[$443 >> 2] = $12; //@line 18756
   $444 = $ReallocAsyncCtx4 + 28 | 0; //@line 18757
   HEAP32[$444 >> 2] = $14; //@line 18758
   $445 = $ReallocAsyncCtx4 + 32 | 0; //@line 18759
   HEAP32[$445 >> 2] = $16; //@line 18760
   $446 = $ReallocAsyncCtx4 + 36 | 0; //@line 18761
   HEAP32[$446 >> 2] = $18; //@line 18762
   $447 = $ReallocAsyncCtx4 + 40 | 0; //@line 18763
   HEAP32[$447 >> 2] = $20; //@line 18764
   $448 = $ReallocAsyncCtx4 + 44 | 0; //@line 18765
   HEAP32[$448 >> 2] = $22; //@line 18766
   $449 = $ReallocAsyncCtx4 + 48 | 0; //@line 18767
   HEAP32[$449 >> 2] = $24; //@line 18768
   $450 = $ReallocAsyncCtx4 + 52 | 0; //@line 18769
   HEAP32[$450 >> 2] = $26; //@line 18770
   $451 = $ReallocAsyncCtx4 + 56 | 0; //@line 18771
   HEAP32[$451 >> 2] = $28; //@line 18772
   $452 = $ReallocAsyncCtx4 + 60 | 0; //@line 18773
   HEAP32[$452 >> 2] = $30; //@line 18774
   $453 = $ReallocAsyncCtx4 + 64 | 0; //@line 18775
   HEAP32[$453 >> 2] = $32; //@line 18776
   $454 = $ReallocAsyncCtx4 + 68 | 0; //@line 18777
   HEAP32[$454 >> 2] = $34; //@line 18778
   $455 = $ReallocAsyncCtx4 + 72 | 0; //@line 18779
   HEAP32[$455 >> 2] = $36; //@line 18780
   $456 = $ReallocAsyncCtx4 + 76 | 0; //@line 18781
   HEAP32[$456 >> 2] = $38; //@line 18782
   $457 = $ReallocAsyncCtx4 + 80 | 0; //@line 18783
   HEAP32[$457 >> 2] = $40; //@line 18784
   $458 = $ReallocAsyncCtx4 + 84 | 0; //@line 18785
   HEAP32[$458 >> 2] = $42; //@line 18786
   $459 = $ReallocAsyncCtx4 + 88 | 0; //@line 18787
   HEAP32[$459 >> 2] = $44; //@line 18788
   $460 = $ReallocAsyncCtx4 + 92 | 0; //@line 18789
   HEAP32[$460 >> 2] = $46; //@line 18790
   $461 = $ReallocAsyncCtx4 + 96 | 0; //@line 18791
   HEAP32[$461 >> 2] = $48; //@line 18792
   $462 = $ReallocAsyncCtx4 + 100 | 0; //@line 18793
   HEAP32[$462 >> 2] = $50; //@line 18794
   $463 = $ReallocAsyncCtx4 + 104 | 0; //@line 18795
   HEAP32[$463 >> 2] = $52; //@line 18796
   $464 = $ReallocAsyncCtx4 + 108 | 0; //@line 18797
   HEAP32[$464 >> 2] = $54; //@line 18798
   $465 = $ReallocAsyncCtx4 + 112 | 0; //@line 18799
   HEAP32[$465 >> 2] = $56; //@line 18800
   $466 = $ReallocAsyncCtx4 + 116 | 0; //@line 18801
   HEAP32[$466 >> 2] = $58; //@line 18802
   $467 = $ReallocAsyncCtx4 + 120 | 0; //@line 18803
   HEAP32[$467 >> 2] = $60; //@line 18804
   $468 = $ReallocAsyncCtx4 + 124 | 0; //@line 18805
   HEAP32[$468 >> 2] = $62; //@line 18806
   $469 = $ReallocAsyncCtx4 + 128 | 0; //@line 18807
   HEAP32[$469 >> 2] = $64; //@line 18808
   $470 = $ReallocAsyncCtx4 + 132 | 0; //@line 18809
   HEAP32[$470 >> 2] = $66; //@line 18810
   $471 = $ReallocAsyncCtx4 + 136 | 0; //@line 18811
   HEAP32[$471 >> 2] = $68; //@line 18812
   $472 = $ReallocAsyncCtx4 + 140 | 0; //@line 18813
   HEAP32[$472 >> 2] = $70; //@line 18814
   $473 = $ReallocAsyncCtx4 + 144 | 0; //@line 18815
   HEAP32[$473 >> 2] = $72; //@line 18816
   $474 = $ReallocAsyncCtx4 + 148 | 0; //@line 18817
   HEAP32[$474 >> 2] = $74; //@line 18818
   $475 = $ReallocAsyncCtx4 + 152 | 0; //@line 18819
   HEAP32[$475 >> 2] = $76; //@line 18820
   $476 = $ReallocAsyncCtx4 + 156 | 0; //@line 18821
   HEAP32[$476 >> 2] = $78; //@line 18822
   $477 = $ReallocAsyncCtx4 + 160 | 0; //@line 18823
   HEAP8[$477 >> 0] = $80; //@line 18824
   $478 = $ReallocAsyncCtx4 + 164 | 0; //@line 18825
   HEAP32[$478 >> 2] = $82; //@line 18826
   $479 = $ReallocAsyncCtx4 + 168 | 0; //@line 18827
   HEAP8[$479 >> 0] = $84; //@line 18828
   $480 = $ReallocAsyncCtx4 + 172 | 0; //@line 18829
   HEAP32[$480 >> 2] = $86; //@line 18830
   $481 = $ReallocAsyncCtx4 + 176 | 0; //@line 18831
   HEAP8[$481 >> 0] = $88; //@line 18832
   $482 = $ReallocAsyncCtx4 + 180 | 0; //@line 18833
   HEAP32[$482 >> 2] = $90; //@line 18834
   $483 = $ReallocAsyncCtx4 + 184 | 0; //@line 18835
   HEAP32[$483 >> 2] = $92; //@line 18836
   $484 = $ReallocAsyncCtx4 + 188 | 0; //@line 18837
   HEAP32[$484 >> 2] = $94; //@line 18838
   $485 = $ReallocAsyncCtx4 + 192 | 0; //@line 18839
   HEAP32[$485 >> 2] = $96; //@line 18840
   $486 = $ReallocAsyncCtx4 + 196 | 0; //@line 18841
   HEAP32[$486 >> 2] = $98; //@line 18842
   $487 = $ReallocAsyncCtx4 + 200 | 0; //@line 18843
   HEAP32[$487 >> 2] = $100; //@line 18844
   $488 = $ReallocAsyncCtx4 + 204 | 0; //@line 18845
   HEAP8[$488 >> 0] = $430; //@line 18846
   $489 = $ReallocAsyncCtx4 + 208 | 0; //@line 18847
   HEAP32[$489 >> 2] = $102; //@line 18848
   $490 = $ReallocAsyncCtx4 + 212 | 0; //@line 18849
   HEAP32[$490 >> 2] = $104; //@line 18850
   $491 = $ReallocAsyncCtx4 + 216 | 0; //@line 18851
   HEAP32[$491 >> 2] = $106; //@line 18852
   $492 = $ReallocAsyncCtx4 + 220 | 0; //@line 18853
   HEAP32[$492 >> 2] = $108; //@line 18854
   $493 = $ReallocAsyncCtx4 + 224 | 0; //@line 18855
   HEAP32[$493 >> 2] = $110; //@line 18856
   $494 = $ReallocAsyncCtx4 + 228 | 0; //@line 18857
   HEAP32[$494 >> 2] = $112; //@line 18858
   $495 = $ReallocAsyncCtx4 + 232 | 0; //@line 18859
   HEAP32[$495 >> 2] = $116; //@line 18860
   sp = STACKTOP; //@line 18861
   return;
  }
  HEAP8[___async_retval >> 0] = $437; //@line 18865
  ___async_unwind = 0; //@line 18866
  HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 18867
  $438 = $ReallocAsyncCtx4 + 4 | 0; //@line 18868
  HEAP32[$438 >> 2] = $2; //@line 18869
  $439 = $ReallocAsyncCtx4 + 8 | 0; //@line 18870
  HEAP32[$439 >> 2] = $4; //@line 18871
  $440 = $ReallocAsyncCtx4 + 12 | 0; //@line 18872
  HEAP32[$440 >> 2] = $6; //@line 18873
  $441 = $ReallocAsyncCtx4 + 16 | 0; //@line 18874
  HEAP32[$441 >> 2] = $8; //@line 18875
  $442 = $ReallocAsyncCtx4 + 20 | 0; //@line 18876
  HEAP32[$442 >> 2] = $10; //@line 18877
  $443 = $ReallocAsyncCtx4 + 24 | 0; //@line 18878
  HEAP32[$443 >> 2] = $12; //@line 18879
  $444 = $ReallocAsyncCtx4 + 28 | 0; //@line 18880
  HEAP32[$444 >> 2] = $14; //@line 18881
  $445 = $ReallocAsyncCtx4 + 32 | 0; //@line 18882
  HEAP32[$445 >> 2] = $16; //@line 18883
  $446 = $ReallocAsyncCtx4 + 36 | 0; //@line 18884
  HEAP32[$446 >> 2] = $18; //@line 18885
  $447 = $ReallocAsyncCtx4 + 40 | 0; //@line 18886
  HEAP32[$447 >> 2] = $20; //@line 18887
  $448 = $ReallocAsyncCtx4 + 44 | 0; //@line 18888
  HEAP32[$448 >> 2] = $22; //@line 18889
  $449 = $ReallocAsyncCtx4 + 48 | 0; //@line 18890
  HEAP32[$449 >> 2] = $24; //@line 18891
  $450 = $ReallocAsyncCtx4 + 52 | 0; //@line 18892
  HEAP32[$450 >> 2] = $26; //@line 18893
  $451 = $ReallocAsyncCtx4 + 56 | 0; //@line 18894
  HEAP32[$451 >> 2] = $28; //@line 18895
  $452 = $ReallocAsyncCtx4 + 60 | 0; //@line 18896
  HEAP32[$452 >> 2] = $30; //@line 18897
  $453 = $ReallocAsyncCtx4 + 64 | 0; //@line 18898
  HEAP32[$453 >> 2] = $32; //@line 18899
  $454 = $ReallocAsyncCtx4 + 68 | 0; //@line 18900
  HEAP32[$454 >> 2] = $34; //@line 18901
  $455 = $ReallocAsyncCtx4 + 72 | 0; //@line 18902
  HEAP32[$455 >> 2] = $36; //@line 18903
  $456 = $ReallocAsyncCtx4 + 76 | 0; //@line 18904
  HEAP32[$456 >> 2] = $38; //@line 18905
  $457 = $ReallocAsyncCtx4 + 80 | 0; //@line 18906
  HEAP32[$457 >> 2] = $40; //@line 18907
  $458 = $ReallocAsyncCtx4 + 84 | 0; //@line 18908
  HEAP32[$458 >> 2] = $42; //@line 18909
  $459 = $ReallocAsyncCtx4 + 88 | 0; //@line 18910
  HEAP32[$459 >> 2] = $44; //@line 18911
  $460 = $ReallocAsyncCtx4 + 92 | 0; //@line 18912
  HEAP32[$460 >> 2] = $46; //@line 18913
  $461 = $ReallocAsyncCtx4 + 96 | 0; //@line 18914
  HEAP32[$461 >> 2] = $48; //@line 18915
  $462 = $ReallocAsyncCtx4 + 100 | 0; //@line 18916
  HEAP32[$462 >> 2] = $50; //@line 18917
  $463 = $ReallocAsyncCtx4 + 104 | 0; //@line 18918
  HEAP32[$463 >> 2] = $52; //@line 18919
  $464 = $ReallocAsyncCtx4 + 108 | 0; //@line 18920
  HEAP32[$464 >> 2] = $54; //@line 18921
  $465 = $ReallocAsyncCtx4 + 112 | 0; //@line 18922
  HEAP32[$465 >> 2] = $56; //@line 18923
  $466 = $ReallocAsyncCtx4 + 116 | 0; //@line 18924
  HEAP32[$466 >> 2] = $58; //@line 18925
  $467 = $ReallocAsyncCtx4 + 120 | 0; //@line 18926
  HEAP32[$467 >> 2] = $60; //@line 18927
  $468 = $ReallocAsyncCtx4 + 124 | 0; //@line 18928
  HEAP32[$468 >> 2] = $62; //@line 18929
  $469 = $ReallocAsyncCtx4 + 128 | 0; //@line 18930
  HEAP32[$469 >> 2] = $64; //@line 18931
  $470 = $ReallocAsyncCtx4 + 132 | 0; //@line 18932
  HEAP32[$470 >> 2] = $66; //@line 18933
  $471 = $ReallocAsyncCtx4 + 136 | 0; //@line 18934
  HEAP32[$471 >> 2] = $68; //@line 18935
  $472 = $ReallocAsyncCtx4 + 140 | 0; //@line 18936
  HEAP32[$472 >> 2] = $70; //@line 18937
  $473 = $ReallocAsyncCtx4 + 144 | 0; //@line 18938
  HEAP32[$473 >> 2] = $72; //@line 18939
  $474 = $ReallocAsyncCtx4 + 148 | 0; //@line 18940
  HEAP32[$474 >> 2] = $74; //@line 18941
  $475 = $ReallocAsyncCtx4 + 152 | 0; //@line 18942
  HEAP32[$475 >> 2] = $76; //@line 18943
  $476 = $ReallocAsyncCtx4 + 156 | 0; //@line 18944
  HEAP32[$476 >> 2] = $78; //@line 18945
  $477 = $ReallocAsyncCtx4 + 160 | 0; //@line 18946
  HEAP8[$477 >> 0] = $80; //@line 18947
  $478 = $ReallocAsyncCtx4 + 164 | 0; //@line 18948
  HEAP32[$478 >> 2] = $82; //@line 18949
  $479 = $ReallocAsyncCtx4 + 168 | 0; //@line 18950
  HEAP8[$479 >> 0] = $84; //@line 18951
  $480 = $ReallocAsyncCtx4 + 172 | 0; //@line 18952
  HEAP32[$480 >> 2] = $86; //@line 18953
  $481 = $ReallocAsyncCtx4 + 176 | 0; //@line 18954
  HEAP8[$481 >> 0] = $88; //@line 18955
  $482 = $ReallocAsyncCtx4 + 180 | 0; //@line 18956
  HEAP32[$482 >> 2] = $90; //@line 18957
  $483 = $ReallocAsyncCtx4 + 184 | 0; //@line 18958
  HEAP32[$483 >> 2] = $92; //@line 18959
  $484 = $ReallocAsyncCtx4 + 188 | 0; //@line 18960
  HEAP32[$484 >> 2] = $94; //@line 18961
  $485 = $ReallocAsyncCtx4 + 192 | 0; //@line 18962
  HEAP32[$485 >> 2] = $96; //@line 18963
  $486 = $ReallocAsyncCtx4 + 196 | 0; //@line 18964
  HEAP32[$486 >> 2] = $98; //@line 18965
  $487 = $ReallocAsyncCtx4 + 200 | 0; //@line 18966
  HEAP32[$487 >> 2] = $100; //@line 18967
  $488 = $ReallocAsyncCtx4 + 204 | 0; //@line 18968
  HEAP8[$488 >> 0] = $430; //@line 18969
  $489 = $ReallocAsyncCtx4 + 208 | 0; //@line 18970
  HEAP32[$489 >> 2] = $102; //@line 18971
  $490 = $ReallocAsyncCtx4 + 212 | 0; //@line 18972
  HEAP32[$490 >> 2] = $104; //@line 18973
  $491 = $ReallocAsyncCtx4 + 216 | 0; //@line 18974
  HEAP32[$491 >> 2] = $106; //@line 18975
  $492 = $ReallocAsyncCtx4 + 220 | 0; //@line 18976
  HEAP32[$492 >> 2] = $108; //@line 18977
  $493 = $ReallocAsyncCtx4 + 224 | 0; //@line 18978
  HEAP32[$493 >> 2] = $110; //@line 18979
  $494 = $ReallocAsyncCtx4 + 228 | 0; //@line 18980
  HEAP32[$494 >> 2] = $112; //@line 18981
  $495 = $ReallocAsyncCtx4 + 232 | 0; //@line 18982
  HEAP32[$495 >> 2] = $116; //@line 18983
  sp = STACKTOP; //@line 18984
  return;
 } else if ((label | 0) == 29) {
  $516 = $$0$be + 2 << 24 >> 24; //@line 18988
  $520 = HEAPU8[$82 + ($119 & 255) >> 0] | 0; //@line 18992
  $522 = $520 >>> 5 & 1; //@line 18995
  $524 = $520 >>> 4 & 1; //@line 18998
  $527 = HEAP32[(HEAP32[$24 >> 2] | 0) + 44 >> 2] | 0; //@line 19001
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(252) | 0; //@line 19002
  $528 = FUNCTION_TABLE_iiii[$527 & 31]($62, $524, $522) | 0; //@line 19003
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 19006
   $529 = $ReallocAsyncCtx5 + 4 | 0; //@line 19007
   HEAP32[$529 >> 2] = $2; //@line 19008
   $530 = $ReallocAsyncCtx5 + 8 | 0; //@line 19009
   HEAP32[$530 >> 2] = $4; //@line 19010
   $531 = $ReallocAsyncCtx5 + 12 | 0; //@line 19011
   HEAP32[$531 >> 2] = $6; //@line 19012
   $532 = $ReallocAsyncCtx5 + 16 | 0; //@line 19013
   HEAP32[$532 >> 2] = $8; //@line 19014
   $533 = $ReallocAsyncCtx5 + 20 | 0; //@line 19015
   HEAP32[$533 >> 2] = $10; //@line 19016
   $534 = $ReallocAsyncCtx5 + 24 | 0; //@line 19017
   HEAP32[$534 >> 2] = $12; //@line 19018
   $535 = $ReallocAsyncCtx5 + 28 | 0; //@line 19019
   HEAP32[$535 >> 2] = $14; //@line 19020
   $536 = $ReallocAsyncCtx5 + 32 | 0; //@line 19021
   HEAP32[$536 >> 2] = $16; //@line 19022
   $537 = $ReallocAsyncCtx5 + 36 | 0; //@line 19023
   HEAP32[$537 >> 2] = $18; //@line 19024
   $538 = $ReallocAsyncCtx5 + 40 | 0; //@line 19025
   HEAP32[$538 >> 2] = $20; //@line 19026
   $539 = $ReallocAsyncCtx5 + 44 | 0; //@line 19027
   HEAP32[$539 >> 2] = $22; //@line 19028
   $540 = $ReallocAsyncCtx5 + 48 | 0; //@line 19029
   HEAP32[$540 >> 2] = $24; //@line 19030
   $541 = $ReallocAsyncCtx5 + 52 | 0; //@line 19031
   HEAP32[$541 >> 2] = $26; //@line 19032
   $542 = $ReallocAsyncCtx5 + 56 | 0; //@line 19033
   HEAP8[$542 >> 0] = $524; //@line 19034
   $543 = $ReallocAsyncCtx5 + 60 | 0; //@line 19035
   HEAP32[$543 >> 2] = $28; //@line 19036
   $544 = $ReallocAsyncCtx5 + 64 | 0; //@line 19037
   HEAP32[$544 >> 2] = $30; //@line 19038
   $545 = $ReallocAsyncCtx5 + 68 | 0; //@line 19039
   HEAP32[$545 >> 2] = $32; //@line 19040
   $546 = $ReallocAsyncCtx5 + 72 | 0; //@line 19041
   HEAP32[$546 >> 2] = $34; //@line 19042
   $547 = $ReallocAsyncCtx5 + 76 | 0; //@line 19043
   HEAP32[$547 >> 2] = $36; //@line 19044
   $548 = $ReallocAsyncCtx5 + 80 | 0; //@line 19045
   HEAP32[$548 >> 2] = $38; //@line 19046
   $549 = $ReallocAsyncCtx5 + 84 | 0; //@line 19047
   HEAP32[$549 >> 2] = $40; //@line 19048
   $550 = $ReallocAsyncCtx5 + 88 | 0; //@line 19049
   HEAP32[$550 >> 2] = $42; //@line 19050
   $551 = $ReallocAsyncCtx5 + 92 | 0; //@line 19051
   HEAP32[$551 >> 2] = $44; //@line 19052
   $552 = $ReallocAsyncCtx5 + 96 | 0; //@line 19053
   HEAP32[$552 >> 2] = $46; //@line 19054
   $553 = $ReallocAsyncCtx5 + 100 | 0; //@line 19055
   HEAP32[$553 >> 2] = $520; //@line 19056
   $554 = $ReallocAsyncCtx5 + 104 | 0; //@line 19057
   HEAP32[$554 >> 2] = $48; //@line 19058
   $555 = $ReallocAsyncCtx5 + 108 | 0; //@line 19059
   HEAP32[$555 >> 2] = $50; //@line 19060
   $556 = $ReallocAsyncCtx5 + 112 | 0; //@line 19061
   HEAP32[$556 >> 2] = $52; //@line 19062
   $557 = $ReallocAsyncCtx5 + 116 | 0; //@line 19063
   HEAP32[$557 >> 2] = $54; //@line 19064
   $558 = $ReallocAsyncCtx5 + 120 | 0; //@line 19065
   HEAP32[$558 >> 2] = $56; //@line 19066
   $559 = $ReallocAsyncCtx5 + 124 | 0; //@line 19067
   HEAP32[$559 >> 2] = $58; //@line 19068
   $560 = $ReallocAsyncCtx5 + 128 | 0; //@line 19069
   HEAP32[$560 >> 2] = $60; //@line 19070
   $561 = $ReallocAsyncCtx5 + 132 | 0; //@line 19071
   HEAP32[$561 >> 2] = $62; //@line 19072
   $562 = $ReallocAsyncCtx5 + 136 | 0; //@line 19073
   HEAP32[$562 >> 2] = $64; //@line 19074
   $563 = $ReallocAsyncCtx5 + 140 | 0; //@line 19075
   HEAP8[$563 >> 0] = $522; //@line 19076
   $564 = $ReallocAsyncCtx5 + 144 | 0; //@line 19077
   HEAP32[$564 >> 2] = $66; //@line 19078
   $565 = $ReallocAsyncCtx5 + 148 | 0; //@line 19079
   HEAP32[$565 >> 2] = $68; //@line 19080
   $566 = $ReallocAsyncCtx5 + 152 | 0; //@line 19081
   HEAP32[$566 >> 2] = $70; //@line 19082
   $567 = $ReallocAsyncCtx5 + 156 | 0; //@line 19083
   HEAP32[$567 >> 2] = $72; //@line 19084
   $568 = $ReallocAsyncCtx5 + 160 | 0; //@line 19085
   HEAP32[$568 >> 2] = $74; //@line 19086
   $569 = $ReallocAsyncCtx5 + 164 | 0; //@line 19087
   HEAP32[$569 >> 2] = $76; //@line 19088
   $570 = $ReallocAsyncCtx5 + 168 | 0; //@line 19089
   HEAP32[$570 >> 2] = $78; //@line 19090
   $571 = $ReallocAsyncCtx5 + 172 | 0; //@line 19091
   HEAP8[$571 >> 0] = $80; //@line 19092
   $572 = $ReallocAsyncCtx5 + 176 | 0; //@line 19093
   HEAP32[$572 >> 2] = $82; //@line 19094
   $573 = $ReallocAsyncCtx5 + 180 | 0; //@line 19095
   HEAP8[$573 >> 0] = $84; //@line 19096
   $574 = $ReallocAsyncCtx5 + 184 | 0; //@line 19097
   HEAP32[$574 >> 2] = $86; //@line 19098
   $575 = $ReallocAsyncCtx5 + 188 | 0; //@line 19099
   HEAP8[$575 >> 0] = $88; //@line 19100
   $576 = $ReallocAsyncCtx5 + 192 | 0; //@line 19101
   HEAP32[$576 >> 2] = $$0107$be; //@line 19102
   $577 = $ReallocAsyncCtx5 + 196 | 0; //@line 19103
   HEAP32[$577 >> 2] = $90; //@line 19104
   $578 = $ReallocAsyncCtx5 + 200 | 0; //@line 19105
   HEAP32[$578 >> 2] = $92; //@line 19106
   $579 = $ReallocAsyncCtx5 + 204 | 0; //@line 19107
   HEAP32[$579 >> 2] = $94; //@line 19108
   $580 = $ReallocAsyncCtx5 + 208 | 0; //@line 19109
   HEAP32[$580 >> 2] = $96; //@line 19110
   $581 = $ReallocAsyncCtx5 + 212 | 0; //@line 19111
   HEAP32[$581 >> 2] = $98; //@line 19112
   $582 = $ReallocAsyncCtx5 + 216 | 0; //@line 19113
   HEAP32[$582 >> 2] = $100; //@line 19114
   $583 = $ReallocAsyncCtx5 + 220 | 0; //@line 19115
   HEAP8[$583 >> 0] = $516; //@line 19116
   $584 = $ReallocAsyncCtx5 + 224 | 0; //@line 19117
   HEAP32[$584 >> 2] = $102; //@line 19118
   $585 = $ReallocAsyncCtx5 + 228 | 0; //@line 19119
   HEAP32[$585 >> 2] = $104; //@line 19120
   $586 = $ReallocAsyncCtx5 + 232 | 0; //@line 19121
   HEAP32[$586 >> 2] = $106; //@line 19122
   $587 = $ReallocAsyncCtx5 + 236 | 0; //@line 19123
   HEAP32[$587 >> 2] = $108; //@line 19124
   $588 = $ReallocAsyncCtx5 + 240 | 0; //@line 19125
   HEAP32[$588 >> 2] = $110; //@line 19126
   $589 = $ReallocAsyncCtx5 + 244 | 0; //@line 19127
   HEAP32[$589 >> 2] = $112; //@line 19128
   $590 = $ReallocAsyncCtx5 + 248 | 0; //@line 19129
   HEAP32[$590 >> 2] = $116; //@line 19130
   sp = STACKTOP; //@line 19131
   return;
  }
  HEAP8[___async_retval >> 0] = $528 & 1; //@line 19136
  ___async_unwind = 0; //@line 19137
  HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 19138
  $529 = $ReallocAsyncCtx5 + 4 | 0; //@line 19139
  HEAP32[$529 >> 2] = $2; //@line 19140
  $530 = $ReallocAsyncCtx5 + 8 | 0; //@line 19141
  HEAP32[$530 >> 2] = $4; //@line 19142
  $531 = $ReallocAsyncCtx5 + 12 | 0; //@line 19143
  HEAP32[$531 >> 2] = $6; //@line 19144
  $532 = $ReallocAsyncCtx5 + 16 | 0; //@line 19145
  HEAP32[$532 >> 2] = $8; //@line 19146
  $533 = $ReallocAsyncCtx5 + 20 | 0; //@line 19147
  HEAP32[$533 >> 2] = $10; //@line 19148
  $534 = $ReallocAsyncCtx5 + 24 | 0; //@line 19149
  HEAP32[$534 >> 2] = $12; //@line 19150
  $535 = $ReallocAsyncCtx5 + 28 | 0; //@line 19151
  HEAP32[$535 >> 2] = $14; //@line 19152
  $536 = $ReallocAsyncCtx5 + 32 | 0; //@line 19153
  HEAP32[$536 >> 2] = $16; //@line 19154
  $537 = $ReallocAsyncCtx5 + 36 | 0; //@line 19155
  HEAP32[$537 >> 2] = $18; //@line 19156
  $538 = $ReallocAsyncCtx5 + 40 | 0; //@line 19157
  HEAP32[$538 >> 2] = $20; //@line 19158
  $539 = $ReallocAsyncCtx5 + 44 | 0; //@line 19159
  HEAP32[$539 >> 2] = $22; //@line 19160
  $540 = $ReallocAsyncCtx5 + 48 | 0; //@line 19161
  HEAP32[$540 >> 2] = $24; //@line 19162
  $541 = $ReallocAsyncCtx5 + 52 | 0; //@line 19163
  HEAP32[$541 >> 2] = $26; //@line 19164
  $542 = $ReallocAsyncCtx5 + 56 | 0; //@line 19165
  HEAP8[$542 >> 0] = $524; //@line 19166
  $543 = $ReallocAsyncCtx5 + 60 | 0; //@line 19167
  HEAP32[$543 >> 2] = $28; //@line 19168
  $544 = $ReallocAsyncCtx5 + 64 | 0; //@line 19169
  HEAP32[$544 >> 2] = $30; //@line 19170
  $545 = $ReallocAsyncCtx5 + 68 | 0; //@line 19171
  HEAP32[$545 >> 2] = $32; //@line 19172
  $546 = $ReallocAsyncCtx5 + 72 | 0; //@line 19173
  HEAP32[$546 >> 2] = $34; //@line 19174
  $547 = $ReallocAsyncCtx5 + 76 | 0; //@line 19175
  HEAP32[$547 >> 2] = $36; //@line 19176
  $548 = $ReallocAsyncCtx5 + 80 | 0; //@line 19177
  HEAP32[$548 >> 2] = $38; //@line 19178
  $549 = $ReallocAsyncCtx5 + 84 | 0; //@line 19179
  HEAP32[$549 >> 2] = $40; //@line 19180
  $550 = $ReallocAsyncCtx5 + 88 | 0; //@line 19181
  HEAP32[$550 >> 2] = $42; //@line 19182
  $551 = $ReallocAsyncCtx5 + 92 | 0; //@line 19183
  HEAP32[$551 >> 2] = $44; //@line 19184
  $552 = $ReallocAsyncCtx5 + 96 | 0; //@line 19185
  HEAP32[$552 >> 2] = $46; //@line 19186
  $553 = $ReallocAsyncCtx5 + 100 | 0; //@line 19187
  HEAP32[$553 >> 2] = $520; //@line 19188
  $554 = $ReallocAsyncCtx5 + 104 | 0; //@line 19189
  HEAP32[$554 >> 2] = $48; //@line 19190
  $555 = $ReallocAsyncCtx5 + 108 | 0; //@line 19191
  HEAP32[$555 >> 2] = $50; //@line 19192
  $556 = $ReallocAsyncCtx5 + 112 | 0; //@line 19193
  HEAP32[$556 >> 2] = $52; //@line 19194
  $557 = $ReallocAsyncCtx5 + 116 | 0; //@line 19195
  HEAP32[$557 >> 2] = $54; //@line 19196
  $558 = $ReallocAsyncCtx5 + 120 | 0; //@line 19197
  HEAP32[$558 >> 2] = $56; //@line 19198
  $559 = $ReallocAsyncCtx5 + 124 | 0; //@line 19199
  HEAP32[$559 >> 2] = $58; //@line 19200
  $560 = $ReallocAsyncCtx5 + 128 | 0; //@line 19201
  HEAP32[$560 >> 2] = $60; //@line 19202
  $561 = $ReallocAsyncCtx5 + 132 | 0; //@line 19203
  HEAP32[$561 >> 2] = $62; //@line 19204
  $562 = $ReallocAsyncCtx5 + 136 | 0; //@line 19205
  HEAP32[$562 >> 2] = $64; //@line 19206
  $563 = $ReallocAsyncCtx5 + 140 | 0; //@line 19207
  HEAP8[$563 >> 0] = $522; //@line 19208
  $564 = $ReallocAsyncCtx5 + 144 | 0; //@line 19209
  HEAP32[$564 >> 2] = $66; //@line 19210
  $565 = $ReallocAsyncCtx5 + 148 | 0; //@line 19211
  HEAP32[$565 >> 2] = $68; //@line 19212
  $566 = $ReallocAsyncCtx5 + 152 | 0; //@line 19213
  HEAP32[$566 >> 2] = $70; //@line 19214
  $567 = $ReallocAsyncCtx5 + 156 | 0; //@line 19215
  HEAP32[$567 >> 2] = $72; //@line 19216
  $568 = $ReallocAsyncCtx5 + 160 | 0; //@line 19217
  HEAP32[$568 >> 2] = $74; //@line 19218
  $569 = $ReallocAsyncCtx5 + 164 | 0; //@line 19219
  HEAP32[$569 >> 2] = $76; //@line 19220
  $570 = $ReallocAsyncCtx5 + 168 | 0; //@line 19221
  HEAP32[$570 >> 2] = $78; //@line 19222
  $571 = $ReallocAsyncCtx5 + 172 | 0; //@line 19223
  HEAP8[$571 >> 0] = $80; //@line 19224
  $572 = $ReallocAsyncCtx5 + 176 | 0; //@line 19225
  HEAP32[$572 >> 2] = $82; //@line 19226
  $573 = $ReallocAsyncCtx5 + 180 | 0; //@line 19227
  HEAP8[$573 >> 0] = $84; //@line 19228
  $574 = $ReallocAsyncCtx5 + 184 | 0; //@line 19229
  HEAP32[$574 >> 2] = $86; //@line 19230
  $575 = $ReallocAsyncCtx5 + 188 | 0; //@line 19231
  HEAP8[$575 >> 0] = $88; //@line 19232
  $576 = $ReallocAsyncCtx5 + 192 | 0; //@line 19233
  HEAP32[$576 >> 2] = $$0107$be; //@line 19234
  $577 = $ReallocAsyncCtx5 + 196 | 0; //@line 19235
  HEAP32[$577 >> 2] = $90; //@line 19236
  $578 = $ReallocAsyncCtx5 + 200 | 0; //@line 19237
  HEAP32[$578 >> 2] = $92; //@line 19238
  $579 = $ReallocAsyncCtx5 + 204 | 0; //@line 19239
  HEAP32[$579 >> 2] = $94; //@line 19240
  $580 = $ReallocAsyncCtx5 + 208 | 0; //@line 19241
  HEAP32[$580 >> 2] = $96; //@line 19242
  $581 = $ReallocAsyncCtx5 + 212 | 0; //@line 19243
  HEAP32[$581 >> 2] = $98; //@line 19244
  $582 = $ReallocAsyncCtx5 + 216 | 0; //@line 19245
  HEAP32[$582 >> 2] = $100; //@line 19246
  $583 = $ReallocAsyncCtx5 + 220 | 0; //@line 19247
  HEAP8[$583 >> 0] = $516; //@line 19248
  $584 = $ReallocAsyncCtx5 + 224 | 0; //@line 19249
  HEAP32[$584 >> 2] = $102; //@line 19250
  $585 = $ReallocAsyncCtx5 + 228 | 0; //@line 19251
  HEAP32[$585 >> 2] = $104; //@line 19252
  $586 = $ReallocAsyncCtx5 + 232 | 0; //@line 19253
  HEAP32[$586 >> 2] = $106; //@line 19254
  $587 = $ReallocAsyncCtx5 + 236 | 0; //@line 19255
  HEAP32[$587 >> 2] = $108; //@line 19256
  $588 = $ReallocAsyncCtx5 + 240 | 0; //@line 19257
  HEAP32[$588 >> 2] = $110; //@line 19258
  $589 = $ReallocAsyncCtx5 + 244 | 0; //@line 19259
  HEAP32[$589 >> 2] = $112; //@line 19260
  $590 = $ReallocAsyncCtx5 + 248 | 0; //@line 19261
  HEAP32[$590 >> 2] = $116; //@line 19262
  sp = STACKTOP; //@line 19263
  return;
 } else if ((label | 0) == 32) {
  $595 = HEAP8[$82 + ($119 & 255) >> 0] | 0; //@line 19270
  $608 = $$0$be + 5 << 24 >> 24; //@line 19283
  $615 = (HEAPU8[$82 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$82 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$82 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 19290
  $618 = HEAP32[(HEAP32[$40 >> 2] | 0) + 48 >> 2] | 0; //@line 19293
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(236) | 0; //@line 19294
  $619 = FUNCTION_TABLE_iiii[$618 & 31]($62, $595, $615) | 0; //@line 19295
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 495; //@line 19298
   $620 = $ReallocAsyncCtx6 + 4 | 0; //@line 19299
   HEAP32[$620 >> 2] = $2; //@line 19300
   $621 = $ReallocAsyncCtx6 + 8 | 0; //@line 19301
   HEAP32[$621 >> 2] = $4; //@line 19302
   $622 = $ReallocAsyncCtx6 + 12 | 0; //@line 19303
   HEAP32[$622 >> 2] = $6; //@line 19304
   $623 = $ReallocAsyncCtx6 + 16 | 0; //@line 19305
   HEAP32[$623 >> 2] = $8; //@line 19306
   $624 = $ReallocAsyncCtx6 + 20 | 0; //@line 19307
   HEAP32[$624 >> 2] = $10; //@line 19308
   $625 = $ReallocAsyncCtx6 + 24 | 0; //@line 19309
   HEAP32[$625 >> 2] = $12; //@line 19310
   $626 = $ReallocAsyncCtx6 + 28 | 0; //@line 19311
   HEAP32[$626 >> 2] = $14; //@line 19312
   $627 = $ReallocAsyncCtx6 + 32 | 0; //@line 19313
   HEAP32[$627 >> 2] = $16; //@line 19314
   $628 = $ReallocAsyncCtx6 + 36 | 0; //@line 19315
   HEAP32[$628 >> 2] = $18; //@line 19316
   $629 = $ReallocAsyncCtx6 + 40 | 0; //@line 19317
   HEAP32[$629 >> 2] = $20; //@line 19318
   $630 = $ReallocAsyncCtx6 + 44 | 0; //@line 19319
   HEAP32[$630 >> 2] = $22; //@line 19320
   $631 = $ReallocAsyncCtx6 + 48 | 0; //@line 19321
   HEAP32[$631 >> 2] = $24; //@line 19322
   $632 = $ReallocAsyncCtx6 + 52 | 0; //@line 19323
   HEAP32[$632 >> 2] = $26; //@line 19324
   $633 = $ReallocAsyncCtx6 + 56 | 0; //@line 19325
   HEAP32[$633 >> 2] = $28; //@line 19326
   $634 = $ReallocAsyncCtx6 + 60 | 0; //@line 19327
   HEAP32[$634 >> 2] = $30; //@line 19328
   $635 = $ReallocAsyncCtx6 + 64 | 0; //@line 19329
   HEAP32[$635 >> 2] = $32; //@line 19330
   $636 = $ReallocAsyncCtx6 + 68 | 0; //@line 19331
   HEAP32[$636 >> 2] = $34; //@line 19332
   $637 = $ReallocAsyncCtx6 + 72 | 0; //@line 19333
   HEAP32[$637 >> 2] = $36; //@line 19334
   $638 = $ReallocAsyncCtx6 + 76 | 0; //@line 19335
   HEAP32[$638 >> 2] = $38; //@line 19336
   $639 = $ReallocAsyncCtx6 + 80 | 0; //@line 19337
   HEAP32[$639 >> 2] = $40; //@line 19338
   $640 = $ReallocAsyncCtx6 + 84 | 0; //@line 19339
   HEAP32[$640 >> 2] = $42; //@line 19340
   $641 = $ReallocAsyncCtx6 + 88 | 0; //@line 19341
   HEAP32[$641 >> 2] = $44; //@line 19342
   $642 = $ReallocAsyncCtx6 + 92 | 0; //@line 19343
   HEAP32[$642 >> 2] = $46; //@line 19344
   $643 = $ReallocAsyncCtx6 + 96 | 0; //@line 19345
   HEAP32[$643 >> 2] = $48; //@line 19346
   $644 = $ReallocAsyncCtx6 + 100 | 0; //@line 19347
   HEAP32[$644 >> 2] = $50; //@line 19348
   $645 = $ReallocAsyncCtx6 + 104 | 0; //@line 19349
   HEAP32[$645 >> 2] = $52; //@line 19350
   $646 = $ReallocAsyncCtx6 + 108 | 0; //@line 19351
   HEAP32[$646 >> 2] = $54; //@line 19352
   $647 = $ReallocAsyncCtx6 + 112 | 0; //@line 19353
   HEAP32[$647 >> 2] = $56; //@line 19354
   $648 = $ReallocAsyncCtx6 + 116 | 0; //@line 19355
   HEAP32[$648 >> 2] = $58; //@line 19356
   $649 = $ReallocAsyncCtx6 + 120 | 0; //@line 19357
   HEAP8[$649 >> 0] = $608; //@line 19358
   $650 = $ReallocAsyncCtx6 + 124 | 0; //@line 19359
   HEAP32[$650 >> 2] = $60; //@line 19360
   $651 = $ReallocAsyncCtx6 + 128 | 0; //@line 19361
   HEAP32[$651 >> 2] = $62; //@line 19362
   $652 = $ReallocAsyncCtx6 + 132 | 0; //@line 19363
   HEAP32[$652 >> 2] = $64; //@line 19364
   $653 = $ReallocAsyncCtx6 + 136 | 0; //@line 19365
   HEAP32[$653 >> 2] = $66; //@line 19366
   $654 = $ReallocAsyncCtx6 + 140 | 0; //@line 19367
   HEAP32[$654 >> 2] = $68; //@line 19368
   $655 = $ReallocAsyncCtx6 + 144 | 0; //@line 19369
   HEAP32[$655 >> 2] = $70; //@line 19370
   $656 = $ReallocAsyncCtx6 + 148 | 0; //@line 19371
   HEAP32[$656 >> 2] = $72; //@line 19372
   $657 = $ReallocAsyncCtx6 + 152 | 0; //@line 19373
   HEAP32[$657 >> 2] = $74; //@line 19374
   $658 = $ReallocAsyncCtx6 + 156 | 0; //@line 19375
   HEAP32[$658 >> 2] = $76; //@line 19376
   $659 = $ReallocAsyncCtx6 + 160 | 0; //@line 19377
   HEAP32[$659 >> 2] = $78; //@line 19378
   $660 = $ReallocAsyncCtx6 + 164 | 0; //@line 19379
   HEAP8[$660 >> 0] = $80; //@line 19380
   $661 = $ReallocAsyncCtx6 + 168 | 0; //@line 19381
   HEAP32[$661 >> 2] = $82; //@line 19382
   $662 = $ReallocAsyncCtx6 + 172 | 0; //@line 19383
   HEAP8[$662 >> 0] = $84; //@line 19384
   $663 = $ReallocAsyncCtx6 + 176 | 0; //@line 19385
   HEAP32[$663 >> 2] = $86; //@line 19386
   $664 = $ReallocAsyncCtx6 + 180 | 0; //@line 19387
   HEAP8[$664 >> 0] = $88; //@line 19388
   $665 = $ReallocAsyncCtx6 + 184 | 0; //@line 19389
   HEAP32[$665 >> 2] = $90; //@line 19390
   $666 = $ReallocAsyncCtx6 + 188 | 0; //@line 19391
   HEAP32[$666 >> 2] = $92; //@line 19392
   $667 = $ReallocAsyncCtx6 + 192 | 0; //@line 19393
   HEAP32[$667 >> 2] = $94; //@line 19394
   $668 = $ReallocAsyncCtx6 + 196 | 0; //@line 19395
   HEAP32[$668 >> 2] = $96; //@line 19396
   $669 = $ReallocAsyncCtx6 + 200 | 0; //@line 19397
   HEAP32[$669 >> 2] = $98; //@line 19398
   $670 = $ReallocAsyncCtx6 + 204 | 0; //@line 19399
   HEAP32[$670 >> 2] = $100; //@line 19400
   $671 = $ReallocAsyncCtx6 + 208 | 0; //@line 19401
   HEAP32[$671 >> 2] = $102; //@line 19402
   $672 = $ReallocAsyncCtx6 + 212 | 0; //@line 19403
   HEAP32[$672 >> 2] = $104; //@line 19404
   $673 = $ReallocAsyncCtx6 + 216 | 0; //@line 19405
   HEAP32[$673 >> 2] = $106; //@line 19406
   $674 = $ReallocAsyncCtx6 + 220 | 0; //@line 19407
   HEAP32[$674 >> 2] = $108; //@line 19408
   $675 = $ReallocAsyncCtx6 + 224 | 0; //@line 19409
   HEAP32[$675 >> 2] = $110; //@line 19410
   $676 = $ReallocAsyncCtx6 + 228 | 0; //@line 19411
   HEAP32[$676 >> 2] = $112; //@line 19412
   $677 = $ReallocAsyncCtx6 + 232 | 0; //@line 19413
   HEAP32[$677 >> 2] = $116; //@line 19414
   sp = STACKTOP; //@line 19415
   return;
  }
  HEAP8[___async_retval >> 0] = $619; //@line 19419
  ___async_unwind = 0; //@line 19420
  HEAP32[$ReallocAsyncCtx6 >> 2] = 495; //@line 19421
  $620 = $ReallocAsyncCtx6 + 4 | 0; //@line 19422
  HEAP32[$620 >> 2] = $2; //@line 19423
  $621 = $ReallocAsyncCtx6 + 8 | 0; //@line 19424
  HEAP32[$621 >> 2] = $4; //@line 19425
  $622 = $ReallocAsyncCtx6 + 12 | 0; //@line 19426
  HEAP32[$622 >> 2] = $6; //@line 19427
  $623 = $ReallocAsyncCtx6 + 16 | 0; //@line 19428
  HEAP32[$623 >> 2] = $8; //@line 19429
  $624 = $ReallocAsyncCtx6 + 20 | 0; //@line 19430
  HEAP32[$624 >> 2] = $10; //@line 19431
  $625 = $ReallocAsyncCtx6 + 24 | 0; //@line 19432
  HEAP32[$625 >> 2] = $12; //@line 19433
  $626 = $ReallocAsyncCtx6 + 28 | 0; //@line 19434
  HEAP32[$626 >> 2] = $14; //@line 19435
  $627 = $ReallocAsyncCtx6 + 32 | 0; //@line 19436
  HEAP32[$627 >> 2] = $16; //@line 19437
  $628 = $ReallocAsyncCtx6 + 36 | 0; //@line 19438
  HEAP32[$628 >> 2] = $18; //@line 19439
  $629 = $ReallocAsyncCtx6 + 40 | 0; //@line 19440
  HEAP32[$629 >> 2] = $20; //@line 19441
  $630 = $ReallocAsyncCtx6 + 44 | 0; //@line 19442
  HEAP32[$630 >> 2] = $22; //@line 19443
  $631 = $ReallocAsyncCtx6 + 48 | 0; //@line 19444
  HEAP32[$631 >> 2] = $24; //@line 19445
  $632 = $ReallocAsyncCtx6 + 52 | 0; //@line 19446
  HEAP32[$632 >> 2] = $26; //@line 19447
  $633 = $ReallocAsyncCtx6 + 56 | 0; //@line 19448
  HEAP32[$633 >> 2] = $28; //@line 19449
  $634 = $ReallocAsyncCtx6 + 60 | 0; //@line 19450
  HEAP32[$634 >> 2] = $30; //@line 19451
  $635 = $ReallocAsyncCtx6 + 64 | 0; //@line 19452
  HEAP32[$635 >> 2] = $32; //@line 19453
  $636 = $ReallocAsyncCtx6 + 68 | 0; //@line 19454
  HEAP32[$636 >> 2] = $34; //@line 19455
  $637 = $ReallocAsyncCtx6 + 72 | 0; //@line 19456
  HEAP32[$637 >> 2] = $36; //@line 19457
  $638 = $ReallocAsyncCtx6 + 76 | 0; //@line 19458
  HEAP32[$638 >> 2] = $38; //@line 19459
  $639 = $ReallocAsyncCtx6 + 80 | 0; //@line 19460
  HEAP32[$639 >> 2] = $40; //@line 19461
  $640 = $ReallocAsyncCtx6 + 84 | 0; //@line 19462
  HEAP32[$640 >> 2] = $42; //@line 19463
  $641 = $ReallocAsyncCtx6 + 88 | 0; //@line 19464
  HEAP32[$641 >> 2] = $44; //@line 19465
  $642 = $ReallocAsyncCtx6 + 92 | 0; //@line 19466
  HEAP32[$642 >> 2] = $46; //@line 19467
  $643 = $ReallocAsyncCtx6 + 96 | 0; //@line 19468
  HEAP32[$643 >> 2] = $48; //@line 19469
  $644 = $ReallocAsyncCtx6 + 100 | 0; //@line 19470
  HEAP32[$644 >> 2] = $50; //@line 19471
  $645 = $ReallocAsyncCtx6 + 104 | 0; //@line 19472
  HEAP32[$645 >> 2] = $52; //@line 19473
  $646 = $ReallocAsyncCtx6 + 108 | 0; //@line 19474
  HEAP32[$646 >> 2] = $54; //@line 19475
  $647 = $ReallocAsyncCtx6 + 112 | 0; //@line 19476
  HEAP32[$647 >> 2] = $56; //@line 19477
  $648 = $ReallocAsyncCtx6 + 116 | 0; //@line 19478
  HEAP32[$648 >> 2] = $58; //@line 19479
  $649 = $ReallocAsyncCtx6 + 120 | 0; //@line 19480
  HEAP8[$649 >> 0] = $608; //@line 19481
  $650 = $ReallocAsyncCtx6 + 124 | 0; //@line 19482
  HEAP32[$650 >> 2] = $60; //@line 19483
  $651 = $ReallocAsyncCtx6 + 128 | 0; //@line 19484
  HEAP32[$651 >> 2] = $62; //@line 19485
  $652 = $ReallocAsyncCtx6 + 132 | 0; //@line 19486
  HEAP32[$652 >> 2] = $64; //@line 19487
  $653 = $ReallocAsyncCtx6 + 136 | 0; //@line 19488
  HEAP32[$653 >> 2] = $66; //@line 19489
  $654 = $ReallocAsyncCtx6 + 140 | 0; //@line 19490
  HEAP32[$654 >> 2] = $68; //@line 19491
  $655 = $ReallocAsyncCtx6 + 144 | 0; //@line 19492
  HEAP32[$655 >> 2] = $70; //@line 19493
  $656 = $ReallocAsyncCtx6 + 148 | 0; //@line 19494
  HEAP32[$656 >> 2] = $72; //@line 19495
  $657 = $ReallocAsyncCtx6 + 152 | 0; //@line 19496
  HEAP32[$657 >> 2] = $74; //@line 19497
  $658 = $ReallocAsyncCtx6 + 156 | 0; //@line 19498
  HEAP32[$658 >> 2] = $76; //@line 19499
  $659 = $ReallocAsyncCtx6 + 160 | 0; //@line 19500
  HEAP32[$659 >> 2] = $78; //@line 19501
  $660 = $ReallocAsyncCtx6 + 164 | 0; //@line 19502
  HEAP8[$660 >> 0] = $80; //@line 19503
  $661 = $ReallocAsyncCtx6 + 168 | 0; //@line 19504
  HEAP32[$661 >> 2] = $82; //@line 19505
  $662 = $ReallocAsyncCtx6 + 172 | 0; //@line 19506
  HEAP8[$662 >> 0] = $84; //@line 19507
  $663 = $ReallocAsyncCtx6 + 176 | 0; //@line 19508
  HEAP32[$663 >> 2] = $86; //@line 19509
  $664 = $ReallocAsyncCtx6 + 180 | 0; //@line 19510
  HEAP8[$664 >> 0] = $88; //@line 19511
  $665 = $ReallocAsyncCtx6 + 184 | 0; //@line 19512
  HEAP32[$665 >> 2] = $90; //@line 19513
  $666 = $ReallocAsyncCtx6 + 188 | 0; //@line 19514
  HEAP32[$666 >> 2] = $92; //@line 19515
  $667 = $ReallocAsyncCtx6 + 192 | 0; //@line 19516
  HEAP32[$667 >> 2] = $94; //@line 19517
  $668 = $ReallocAsyncCtx6 + 196 | 0; //@line 19518
  HEAP32[$668 >> 2] = $96; //@line 19519
  $669 = $ReallocAsyncCtx6 + 200 | 0; //@line 19520
  HEAP32[$669 >> 2] = $98; //@line 19521
  $670 = $ReallocAsyncCtx6 + 204 | 0; //@line 19522
  HEAP32[$670 >> 2] = $100; //@line 19523
  $671 = $ReallocAsyncCtx6 + 208 | 0; //@line 19524
  HEAP32[$671 >> 2] = $102; //@line 19525
  $672 = $ReallocAsyncCtx6 + 212 | 0; //@line 19526
  HEAP32[$672 >> 2] = $104; //@line 19527
  $673 = $ReallocAsyncCtx6 + 216 | 0; //@line 19528
  HEAP32[$673 >> 2] = $106; //@line 19529
  $674 = $ReallocAsyncCtx6 + 220 | 0; //@line 19530
  HEAP32[$674 >> 2] = $108; //@line 19531
  $675 = $ReallocAsyncCtx6 + 224 | 0; //@line 19532
  HEAP32[$675 >> 2] = $110; //@line 19533
  $676 = $ReallocAsyncCtx6 + 228 | 0; //@line 19534
  HEAP32[$676 >> 2] = $112; //@line 19535
  $677 = $ReallocAsyncCtx6 + 232 | 0; //@line 19536
  HEAP32[$677 >> 2] = $116; //@line 19537
  sp = STACKTOP; //@line 19538
  return;
 } else if ((label | 0) == 35) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 19543
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_363($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $377 = 0, $378 = 0, $38 = 0, $392 = 0, $4 = 0, $40 = 0, $413 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $48 = 0, $481 = 0, $485 = 0, $489 = 0, $494 = 0, $495 = 0, $499 = 0, $50 = 0, $503 = 0, $505 = 0, $507 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $578 = 0, $58 = 0, $591 = 0, $598 = 0, $6 = 0, $60 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $665 = 0, $666 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25534
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25536
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25538
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25540
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25542
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25544
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25546
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25548
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25550
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25552
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25554
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 25556
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 25558
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 25560
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 25562
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 25564
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 25566
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 25568
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 25570
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 25572
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 25574
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 25576
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 25578
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 25580
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 25582
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 25584
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 25586
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 25588
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 25590
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 25592
 $60 = HEAP8[$0 + 120 >> 0] | 0; //@line 25594
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 25596
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 25598
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 25600
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 25602
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 25604
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 25606
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 25608
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 25610
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 25612
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 25614
 $82 = HEAP8[$0 + 164 >> 0] | 0; //@line 25616
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 25618
 $86 = HEAP8[$0 + 172 >> 0] | 0; //@line 25620
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 25622
 $90 = HEAP8[$0 + 180 >> 0] | 0; //@line 25624
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 25626
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 25628
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 25630
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 25632
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 25634
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 25636
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 25638
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 25640
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 25642
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 25644
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 25646
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 25648
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 25650
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 25652
 $665 = HEAP8[$62 >> 0] | 0; //@line 25656
 $666 = $665 & 255; //@line 25657
 if ((128 - (HEAPU8[$88 >> 0] | 0) | 0) > ($666 | 0)) {
  HEAP8[$76 + 4 + $666 >> 0] = 10; //@line 25662
  HEAP8[$62 >> 0] = $665 + 2 << 24 >> 24; //@line 25664
  HEAP8[($665 + 1 & 255) + ($76 + 4) >> 0] = $AsyncRetVal; //@line 25667
  HEAP8[$42 >> 0] = 1; //@line 25668
  HEAP8[$104 >> 0] = 1; //@line 25669
  $$0$be = $60; //@line 25670
  $$0107$be = 0; //@line 25670
 } else {
  $$0$be = $60; //@line 25672
  $$0107$be = -1010; //@line 25672
 }
 L4 : while (1) {
  if (($$0$be & 255) >= ($86 & 255)) {
   label = 32; //@line 25677
   break;
  }
  $119 = $$0$be + 1 << 24 >> 24; //@line 25681
  switch (HEAP8[$84 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 25686
    break L4;
    break;
   }
  case 5:
   {
    label = 9; //@line 25691
    break L4;
    break;
   }
  case 7:
   {
    label = 18; //@line 25696
    break L4;
    break;
   }
  case 9:
   {
    label = 24; //@line 25701
    break L4;
    break;
   }
  case 10:
   {
    label = 27; //@line 25706
    break L4;
    break;
   }
  case 2:
   {
    HEAP32[$48 >> 2] = 0; //@line 25711
    HEAP8[$66 >> 0] = HEAP8[$84 + ($119 & 255) >> 0] | 0; //@line 25716
    HEAP8[$58 >> 0] = HEAP8[$84 + ($$0$be + 2 & 255) >> 0] | 0; //@line 25721
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 25722
    continue L4;
    break;
   }
  case 4:
   {
    $204 = $$0$be + 2 << 24 >> 24; //@line 25727
    $207 = HEAP8[$84 + ($119 & 255) >> 0] | 0; //@line 25730
    HEAP8[$110 >> 0] = $207; //@line 25731
    HEAP16[$94 >> 1] = 1 << ($207 & 255); //@line 25735
    $214 = HEAP8[$62 >> 0] | 0; //@line 25739
    $215 = $214 & 255; //@line 25740
    if ((128 - (HEAPU8[$88 >> 0] | 0) | 0) <= ($215 | 0)) {
     $$0$be = $204; //@line 25743
     $$0107$be = -1010; //@line 25743
     continue L4;
    }
    HEAP8[$62 >> 0] = $214 + 1 << 24 >> 24; //@line 25748
    HEAP8[$76 + 4 + $215 >> 0] = 4; //@line 25749
    HEAP8[$104 >> 0] = 1; //@line 25750
    $$0$be = $204; //@line 25751
    $$0107$be = 0; //@line 25751
    continue L4;
    break;
   }
  case 6:
   {
    $311 = HEAP32[$72 >> 2] | 0; //@line 25756
    if ($311 | 0) {
     label = 13; //@line 25759
     break L4;
    }
    $377 = HEAP8[$62 >> 0] | 0; //@line 25765
    $378 = $377 & 255; //@line 25766
    if ((128 - (HEAPU8[$88 >> 0] | 0) - $378 | 0) <= 2) {
     $$0$be = $119; //@line 25770
     $$0107$be = -1010; //@line 25770
     continue L4;
    }
    HEAP8[$76 + 4 + $378 >> 0] = 6; //@line 25775
    HEAP8[($377 + 1 & 255) + ($76 + 4) >> 0] = -1; //@line 25779
    HEAP8[$62 >> 0] = $377 + 3 << 24 >> 24; //@line 25781
    HEAP8[($377 + 2 & 255) + ($76 + 4) >> 0] = $82; //@line 25784
    HEAP8[$104 >> 0] = 1; //@line 25785
    $$0$be = $119; //@line 25786
    $$0107$be = 0; //@line 25786
    continue L4;
    break;
   }
  case 8:
   {
    $481 = $$0$be + 2 << 24 >> 24; //@line 25791
    $485 = HEAP8[$84 + ($119 & 255) >> 0] & 15; //@line 25795
    $489 = ($485 + ($485 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 25800
    HEAP32[$38 >> 2] = $489; //@line 25801
    HEAP32[$6 >> 2] = $489 + 1e3; //@line 25803
    $494 = HEAP8[$62 >> 0] | 0; //@line 25807
    $495 = $494 & 255; //@line 25808
    if ((128 - (HEAPU8[$88 >> 0] | 0) | 0) <= ($495 | 0)) {
     $$0$be = $481; //@line 25811
     $$0107$be = -1010; //@line 25811
     continue L4;
    }
    HEAP8[$62 >> 0] = $494 + 1 << 24 >> 24; //@line 25816
    HEAP8[$76 + 4 + $495 >> 0] = 8; //@line 25817
    HEAP8[$42 >> 0] = 1; //@line 25818
    HEAP8[$104 >> 0] = 1; //@line 25819
    $$0$be = $481; //@line 25820
    $$0107$be = 0; //@line 25820
    continue L4;
    break;
   }
  default:
   {
    $$0$be = $119; //@line 25825
    $$0107$be = -1013; //@line 25825
    continue L4;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$116 >> 0] = 0; //@line 25831
  HEAP8[$28 >> 0] = 0; //@line 25832
  HEAP8[$18 >> 0] = 0; //@line 25833
  HEAP8[$10 >> 0] = 0; //@line 25834
  $130 = $119 & 255; //@line 25835
  $131 = $130 + -1 | 0; //@line 25836
  HEAP32[$74 >> 2] = $84 + $131; //@line 25838
  HEAP8[$102 >> 0] = $46 - $131; //@line 25841
  HEAP8[$108 >> 0] = HEAP8[$92 >> 0] | 0; //@line 25843
  HEAP8[$8 >> 0] = HEAP8[$16 >> 0] | 0; //@line 25845
  HEAP8[$20 >> 0] = HEAP8[$30 >> 0] | 0; //@line 25847
  HEAP8[$34 >> 0] = HEAP8[$44 >> 0] | 0; //@line 25849
  HEAP8[$70 >> 0] = HEAP8[$52 >> 0] | 0; //@line 25851
  $142 = HEAP32[(HEAP32[$78 >> 2] | 0) + 36 >> 2] | 0; //@line 25854
  $ReallocAsyncCtx = _emscripten_realloc_async_context(240) | 0; //@line 25855
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($64, $112, $116, $28, $18, $10) | 0; //@line 25856
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 25859
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 25860
   HEAP32[$144 >> 2] = $2; //@line 25861
   $145 = $ReallocAsyncCtx + 8 | 0; //@line 25862
   HEAP32[$145 >> 2] = $4; //@line 25863
   $146 = $ReallocAsyncCtx + 12 | 0; //@line 25864
   HEAP32[$146 >> 2] = $6; //@line 25865
   $147 = $ReallocAsyncCtx + 16 | 0; //@line 25866
   HEAP32[$147 >> 2] = $8; //@line 25867
   $148 = $ReallocAsyncCtx + 20 | 0; //@line 25868
   HEAP32[$148 >> 2] = $10; //@line 25869
   $149 = $ReallocAsyncCtx + 24 | 0; //@line 25870
   HEAP32[$149 >> 2] = $12; //@line 25871
   $150 = $ReallocAsyncCtx + 28 | 0; //@line 25872
   HEAP32[$150 >> 2] = $14; //@line 25873
   $151 = $ReallocAsyncCtx + 32 | 0; //@line 25874
   HEAP32[$151 >> 2] = $16; //@line 25875
   $152 = $ReallocAsyncCtx + 36 | 0; //@line 25876
   HEAP32[$152 >> 2] = $18; //@line 25877
   $153 = $ReallocAsyncCtx + 40 | 0; //@line 25878
   HEAP32[$153 >> 2] = $20; //@line 25879
   $154 = $ReallocAsyncCtx + 44 | 0; //@line 25880
   HEAP32[$154 >> 2] = $22; //@line 25881
   $155 = $ReallocAsyncCtx + 48 | 0; //@line 25882
   HEAP32[$155 >> 2] = $24; //@line 25883
   $156 = $ReallocAsyncCtx + 52 | 0; //@line 25884
   HEAP32[$156 >> 2] = $26; //@line 25885
   $157 = $ReallocAsyncCtx + 56 | 0; //@line 25886
   HEAP32[$157 >> 2] = $28; //@line 25887
   $158 = $ReallocAsyncCtx + 60 | 0; //@line 25888
   HEAP32[$158 >> 2] = $30; //@line 25889
   $159 = $ReallocAsyncCtx + 64 | 0; //@line 25890
   HEAP32[$159 >> 2] = $32; //@line 25891
   $160 = $ReallocAsyncCtx + 68 | 0; //@line 25892
   HEAP32[$160 >> 2] = $34; //@line 25893
   $161 = $ReallocAsyncCtx + 72 | 0; //@line 25894
   HEAP32[$161 >> 2] = $36; //@line 25895
   $162 = $ReallocAsyncCtx + 76 | 0; //@line 25896
   HEAP32[$162 >> 2] = $38; //@line 25897
   $163 = $ReallocAsyncCtx + 80 | 0; //@line 25898
   HEAP32[$163 >> 2] = $40; //@line 25899
   $164 = $ReallocAsyncCtx + 84 | 0; //@line 25900
   HEAP32[$164 >> 2] = $42; //@line 25901
   $165 = $ReallocAsyncCtx + 88 | 0; //@line 25902
   HEAP32[$165 >> 2] = $44; //@line 25903
   $166 = $ReallocAsyncCtx + 92 | 0; //@line 25904
   HEAP32[$166 >> 2] = $46; //@line 25905
   $167 = $ReallocAsyncCtx + 96 | 0; //@line 25906
   HEAP32[$167 >> 2] = $48; //@line 25907
   $168 = $ReallocAsyncCtx + 100 | 0; //@line 25908
   HEAP32[$168 >> 2] = $50; //@line 25909
   $169 = $ReallocAsyncCtx + 104 | 0; //@line 25910
   HEAP32[$169 >> 2] = $52; //@line 25911
   $170 = $ReallocAsyncCtx + 108 | 0; //@line 25912
   HEAP32[$170 >> 2] = $54; //@line 25913
   $171 = $ReallocAsyncCtx + 112 | 0; //@line 25914
   HEAP32[$171 >> 2] = $56; //@line 25915
   $172 = $ReallocAsyncCtx + 116 | 0; //@line 25916
   HEAP32[$172 >> 2] = $58; //@line 25917
   $173 = $ReallocAsyncCtx + 120 | 0; //@line 25918
   HEAP32[$173 >> 2] = $62; //@line 25919
   $174 = $ReallocAsyncCtx + 124 | 0; //@line 25920
   HEAP32[$174 >> 2] = $64; //@line 25921
   $175 = $ReallocAsyncCtx + 128 | 0; //@line 25922
   HEAP32[$175 >> 2] = $66; //@line 25923
   $176 = $ReallocAsyncCtx + 132 | 0; //@line 25924
   HEAP32[$176 >> 2] = $68; //@line 25925
   $177 = $ReallocAsyncCtx + 136 | 0; //@line 25926
   HEAP32[$177 >> 2] = $70; //@line 25927
   $178 = $ReallocAsyncCtx + 140 | 0; //@line 25928
   HEAP32[$178 >> 2] = $72; //@line 25929
   $179 = $ReallocAsyncCtx + 144 | 0; //@line 25930
   HEAP32[$179 >> 2] = $74; //@line 25931
   $180 = $ReallocAsyncCtx + 148 | 0; //@line 25932
   HEAP32[$180 >> 2] = $76; //@line 25933
   $181 = $ReallocAsyncCtx + 152 | 0; //@line 25934
   HEAP32[$181 >> 2] = $78; //@line 25935
   $182 = $ReallocAsyncCtx + 156 | 0; //@line 25936
   HEAP32[$182 >> 2] = $130; //@line 25937
   $183 = $ReallocAsyncCtx + 160 | 0; //@line 25938
   HEAP32[$183 >> 2] = $80; //@line 25939
   $184 = $ReallocAsyncCtx + 164 | 0; //@line 25940
   HEAP8[$184 >> 0] = $82; //@line 25941
   $185 = $ReallocAsyncCtx + 168 | 0; //@line 25942
   HEAP32[$185 >> 2] = $84; //@line 25943
   $186 = $ReallocAsyncCtx + 172 | 0; //@line 25944
   HEAP32[$186 >> 2] = $$0107$be; //@line 25945
   $187 = $ReallocAsyncCtx + 176 | 0; //@line 25946
   HEAP8[$187 >> 0] = $86; //@line 25947
   $188 = $ReallocAsyncCtx + 180 | 0; //@line 25948
   HEAP32[$188 >> 2] = $88; //@line 25949
   $189 = $ReallocAsyncCtx + 184 | 0; //@line 25950
   HEAP8[$189 >> 0] = $90; //@line 25951
   $190 = $ReallocAsyncCtx + 188 | 0; //@line 25952
   HEAP32[$190 >> 2] = $92; //@line 25953
   $191 = $ReallocAsyncCtx + 192 | 0; //@line 25954
   HEAP32[$191 >> 2] = $94; //@line 25955
   $192 = $ReallocAsyncCtx + 196 | 0; //@line 25956
   HEAP32[$192 >> 2] = $96; //@line 25957
   $193 = $ReallocAsyncCtx + 200 | 0; //@line 25958
   HEAP32[$193 >> 2] = $98; //@line 25959
   $194 = $ReallocAsyncCtx + 204 | 0; //@line 25960
   HEAP32[$194 >> 2] = $100; //@line 25961
   $195 = $ReallocAsyncCtx + 208 | 0; //@line 25962
   HEAP32[$195 >> 2] = $102; //@line 25963
   $196 = $ReallocAsyncCtx + 212 | 0; //@line 25964
   HEAP32[$196 >> 2] = $104; //@line 25965
   $197 = $ReallocAsyncCtx + 216 | 0; //@line 25966
   HEAP32[$197 >> 2] = $106; //@line 25967
   $198 = $ReallocAsyncCtx + 220 | 0; //@line 25968
   HEAP32[$198 >> 2] = $108; //@line 25969
   $199 = $ReallocAsyncCtx + 224 | 0; //@line 25970
   HEAP32[$199 >> 2] = $110; //@line 25971
   $200 = $ReallocAsyncCtx + 228 | 0; //@line 25972
   HEAP32[$200 >> 2] = $112; //@line 25973
   $201 = $ReallocAsyncCtx + 232 | 0; //@line 25974
   HEAP32[$201 >> 2] = $114; //@line 25975
   $202 = $ReallocAsyncCtx + 236 | 0; //@line 25976
   HEAP32[$202 >> 2] = $116; //@line 25977
   sp = STACKTOP; //@line 25978
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 25982
  ___async_unwind = 0; //@line 25983
  HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 25984
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 25985
  HEAP32[$144 >> 2] = $2; //@line 25986
  $145 = $ReallocAsyncCtx + 8 | 0; //@line 25987
  HEAP32[$145 >> 2] = $4; //@line 25988
  $146 = $ReallocAsyncCtx + 12 | 0; //@line 25989
  HEAP32[$146 >> 2] = $6; //@line 25990
  $147 = $ReallocAsyncCtx + 16 | 0; //@line 25991
  HEAP32[$147 >> 2] = $8; //@line 25992
  $148 = $ReallocAsyncCtx + 20 | 0; //@line 25993
  HEAP32[$148 >> 2] = $10; //@line 25994
  $149 = $ReallocAsyncCtx + 24 | 0; //@line 25995
  HEAP32[$149 >> 2] = $12; //@line 25996
  $150 = $ReallocAsyncCtx + 28 | 0; //@line 25997
  HEAP32[$150 >> 2] = $14; //@line 25998
  $151 = $ReallocAsyncCtx + 32 | 0; //@line 25999
  HEAP32[$151 >> 2] = $16; //@line 26000
  $152 = $ReallocAsyncCtx + 36 | 0; //@line 26001
  HEAP32[$152 >> 2] = $18; //@line 26002
  $153 = $ReallocAsyncCtx + 40 | 0; //@line 26003
  HEAP32[$153 >> 2] = $20; //@line 26004
  $154 = $ReallocAsyncCtx + 44 | 0; //@line 26005
  HEAP32[$154 >> 2] = $22; //@line 26006
  $155 = $ReallocAsyncCtx + 48 | 0; //@line 26007
  HEAP32[$155 >> 2] = $24; //@line 26008
  $156 = $ReallocAsyncCtx + 52 | 0; //@line 26009
  HEAP32[$156 >> 2] = $26; //@line 26010
  $157 = $ReallocAsyncCtx + 56 | 0; //@line 26011
  HEAP32[$157 >> 2] = $28; //@line 26012
  $158 = $ReallocAsyncCtx + 60 | 0; //@line 26013
  HEAP32[$158 >> 2] = $30; //@line 26014
  $159 = $ReallocAsyncCtx + 64 | 0; //@line 26015
  HEAP32[$159 >> 2] = $32; //@line 26016
  $160 = $ReallocAsyncCtx + 68 | 0; //@line 26017
  HEAP32[$160 >> 2] = $34; //@line 26018
  $161 = $ReallocAsyncCtx + 72 | 0; //@line 26019
  HEAP32[$161 >> 2] = $36; //@line 26020
  $162 = $ReallocAsyncCtx + 76 | 0; //@line 26021
  HEAP32[$162 >> 2] = $38; //@line 26022
  $163 = $ReallocAsyncCtx + 80 | 0; //@line 26023
  HEAP32[$163 >> 2] = $40; //@line 26024
  $164 = $ReallocAsyncCtx + 84 | 0; //@line 26025
  HEAP32[$164 >> 2] = $42; //@line 26026
  $165 = $ReallocAsyncCtx + 88 | 0; //@line 26027
  HEAP32[$165 >> 2] = $44; //@line 26028
  $166 = $ReallocAsyncCtx + 92 | 0; //@line 26029
  HEAP32[$166 >> 2] = $46; //@line 26030
  $167 = $ReallocAsyncCtx + 96 | 0; //@line 26031
  HEAP32[$167 >> 2] = $48; //@line 26032
  $168 = $ReallocAsyncCtx + 100 | 0; //@line 26033
  HEAP32[$168 >> 2] = $50; //@line 26034
  $169 = $ReallocAsyncCtx + 104 | 0; //@line 26035
  HEAP32[$169 >> 2] = $52; //@line 26036
  $170 = $ReallocAsyncCtx + 108 | 0; //@line 26037
  HEAP32[$170 >> 2] = $54; //@line 26038
  $171 = $ReallocAsyncCtx + 112 | 0; //@line 26039
  HEAP32[$171 >> 2] = $56; //@line 26040
  $172 = $ReallocAsyncCtx + 116 | 0; //@line 26041
  HEAP32[$172 >> 2] = $58; //@line 26042
  $173 = $ReallocAsyncCtx + 120 | 0; //@line 26043
  HEAP32[$173 >> 2] = $62; //@line 26044
  $174 = $ReallocAsyncCtx + 124 | 0; //@line 26045
  HEAP32[$174 >> 2] = $64; //@line 26046
  $175 = $ReallocAsyncCtx + 128 | 0; //@line 26047
  HEAP32[$175 >> 2] = $66; //@line 26048
  $176 = $ReallocAsyncCtx + 132 | 0; //@line 26049
  HEAP32[$176 >> 2] = $68; //@line 26050
  $177 = $ReallocAsyncCtx + 136 | 0; //@line 26051
  HEAP32[$177 >> 2] = $70; //@line 26052
  $178 = $ReallocAsyncCtx + 140 | 0; //@line 26053
  HEAP32[$178 >> 2] = $72; //@line 26054
  $179 = $ReallocAsyncCtx + 144 | 0; //@line 26055
  HEAP32[$179 >> 2] = $74; //@line 26056
  $180 = $ReallocAsyncCtx + 148 | 0; //@line 26057
  HEAP32[$180 >> 2] = $76; //@line 26058
  $181 = $ReallocAsyncCtx + 152 | 0; //@line 26059
  HEAP32[$181 >> 2] = $78; //@line 26060
  $182 = $ReallocAsyncCtx + 156 | 0; //@line 26061
  HEAP32[$182 >> 2] = $130; //@line 26062
  $183 = $ReallocAsyncCtx + 160 | 0; //@line 26063
  HEAP32[$183 >> 2] = $80; //@line 26064
  $184 = $ReallocAsyncCtx + 164 | 0; //@line 26065
  HEAP8[$184 >> 0] = $82; //@line 26066
  $185 = $ReallocAsyncCtx + 168 | 0; //@line 26067
  HEAP32[$185 >> 2] = $84; //@line 26068
  $186 = $ReallocAsyncCtx + 172 | 0; //@line 26069
  HEAP32[$186 >> 2] = $$0107$be; //@line 26070
  $187 = $ReallocAsyncCtx + 176 | 0; //@line 26071
  HEAP8[$187 >> 0] = $86; //@line 26072
  $188 = $ReallocAsyncCtx + 180 | 0; //@line 26073
  HEAP32[$188 >> 2] = $88; //@line 26074
  $189 = $ReallocAsyncCtx + 184 | 0; //@line 26075
  HEAP8[$189 >> 0] = $90; //@line 26076
  $190 = $ReallocAsyncCtx + 188 | 0; //@line 26077
  HEAP32[$190 >> 2] = $92; //@line 26078
  $191 = $ReallocAsyncCtx + 192 | 0; //@line 26079
  HEAP32[$191 >> 2] = $94; //@line 26080
  $192 = $ReallocAsyncCtx + 196 | 0; //@line 26081
  HEAP32[$192 >> 2] = $96; //@line 26082
  $193 = $ReallocAsyncCtx + 200 | 0; //@line 26083
  HEAP32[$193 >> 2] = $98; //@line 26084
  $194 = $ReallocAsyncCtx + 204 | 0; //@line 26085
  HEAP32[$194 >> 2] = $100; //@line 26086
  $195 = $ReallocAsyncCtx + 208 | 0; //@line 26087
  HEAP32[$195 >> 2] = $102; //@line 26088
  $196 = $ReallocAsyncCtx + 212 | 0; //@line 26089
  HEAP32[$196 >> 2] = $104; //@line 26090
  $197 = $ReallocAsyncCtx + 216 | 0; //@line 26091
  HEAP32[$197 >> 2] = $106; //@line 26092
  $198 = $ReallocAsyncCtx + 220 | 0; //@line 26093
  HEAP32[$198 >> 2] = $108; //@line 26094
  $199 = $ReallocAsyncCtx + 224 | 0; //@line 26095
  HEAP32[$199 >> 2] = $110; //@line 26096
  $200 = $ReallocAsyncCtx + 228 | 0; //@line 26097
  HEAP32[$200 >> 2] = $112; //@line 26098
  $201 = $ReallocAsyncCtx + 232 | 0; //@line 26099
  HEAP32[$201 >> 2] = $114; //@line 26100
  $202 = $ReallocAsyncCtx + 236 | 0; //@line 26101
  HEAP32[$202 >> 2] = $116; //@line 26102
  sp = STACKTOP; //@line 26103
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$84 + ($119 & 255) >> 0] | 0; //@line 26109
  HEAP8[$26 >> 0] = ($221 & 255) >>> 4 & 7; //@line 26114
  HEAP8[$100 >> 0] = $221 & 15; //@line 26116
  $240 = $$0$be + 5 << 24 >> 24; //@line 26130
  HEAP32[$32 >> 2] = (HEAPU8[$84 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$84 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$84 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 26138
  $250 = HEAP32[(HEAP32[$2 >> 2] | 0) + 40 >> 2] | 0; //@line 26141
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(236) | 0; //@line 26142
  $251 = FUNCTION_TABLE_iii[$250 & 15]($64, $12) | 0; //@line 26143
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 26146
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 26147
   HEAP32[$252 >> 2] = $2; //@line 26148
   $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 26149
   HEAP32[$253 >> 2] = $4; //@line 26150
   $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 26151
   HEAP32[$254 >> 2] = $6; //@line 26152
   $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 26153
   HEAP32[$255 >> 2] = $8; //@line 26154
   $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 26155
   HEAP32[$256 >> 2] = $10; //@line 26156
   $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 26157
   HEAP32[$257 >> 2] = $12; //@line 26158
   $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 26159
   HEAP32[$258 >> 2] = $14; //@line 26160
   $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 26161
   HEAP32[$259 >> 2] = $16; //@line 26162
   $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 26163
   HEAP32[$260 >> 2] = $18; //@line 26164
   $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 26165
   HEAP32[$261 >> 2] = $20; //@line 26166
   $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 26167
   HEAP32[$262 >> 2] = $22; //@line 26168
   $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 26169
   HEAP32[$263 >> 2] = $24; //@line 26170
   $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 26171
   HEAP32[$264 >> 2] = $26; //@line 26172
   $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 26173
   HEAP32[$265 >> 2] = $28; //@line 26174
   $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 26175
   HEAP32[$266 >> 2] = $30; //@line 26176
   $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 26177
   HEAP32[$267 >> 2] = $32; //@line 26178
   $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 26179
   HEAP32[$268 >> 2] = $34; //@line 26180
   $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 26181
   HEAP32[$269 >> 2] = $36; //@line 26182
   $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 26183
   HEAP32[$270 >> 2] = $38; //@line 26184
   $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 26185
   HEAP32[$271 >> 2] = $40; //@line 26186
   $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 26187
   HEAP32[$272 >> 2] = $42; //@line 26188
   $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 26189
   HEAP32[$273 >> 2] = $44; //@line 26190
   $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 26191
   HEAP32[$274 >> 2] = $46; //@line 26192
   $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 26193
   HEAP32[$275 >> 2] = $48; //@line 26194
   $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 26195
   HEAP32[$276 >> 2] = $50; //@line 26196
   $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 26197
   HEAP32[$277 >> 2] = $52; //@line 26198
   $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 26199
   HEAP32[$278 >> 2] = $54; //@line 26200
   $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 26201
   HEAP32[$279 >> 2] = $56; //@line 26202
   $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 26203
   HEAP32[$280 >> 2] = $58; //@line 26204
   $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 26205
   HEAP32[$281 >> 2] = $62; //@line 26206
   $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 26207
   HEAP32[$282 >> 2] = $64; //@line 26208
   $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 26209
   HEAP32[$283 >> 2] = $66; //@line 26210
   $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 26211
   HEAP32[$284 >> 2] = $68; //@line 26212
   $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 26213
   HEAP32[$285 >> 2] = $70; //@line 26214
   $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 26215
   HEAP32[$286 >> 2] = $72; //@line 26216
   $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 26217
   HEAP32[$287 >> 2] = $74; //@line 26218
   $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 26219
   HEAP32[$288 >> 2] = $76; //@line 26220
   $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 26221
   HEAP32[$289 >> 2] = $78; //@line 26222
   $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 26223
   HEAP32[$290 >> 2] = $80; //@line 26224
   $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 26225
   HEAP8[$291 >> 0] = $82; //@line 26226
   $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 26227
   HEAP32[$292 >> 2] = $84; //@line 26228
   $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 26229
   HEAP8[$293 >> 0] = $86; //@line 26230
   $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 26231
   HEAP32[$294 >> 2] = $88; //@line 26232
   $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 26233
   HEAP8[$295 >> 0] = $90; //@line 26234
   $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 26235
   HEAP32[$296 >> 2] = $92; //@line 26236
   $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 26237
   HEAP32[$297 >> 2] = $94; //@line 26238
   $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 26239
   HEAP32[$298 >> 2] = $96; //@line 26240
   $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 26241
   HEAP32[$299 >> 2] = $98; //@line 26242
   $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 26243
   HEAP32[$300 >> 2] = $100; //@line 26244
   $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 26245
   HEAP32[$301 >> 2] = $102; //@line 26246
   $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 26247
   HEAP32[$302 >> 2] = $104; //@line 26248
   $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 26249
   HEAP32[$303 >> 2] = $106; //@line 26250
   $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 26251
   HEAP32[$304 >> 2] = $108; //@line 26252
   $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 26253
   HEAP32[$305 >> 2] = $110; //@line 26254
   $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 26255
   HEAP32[$306 >> 2] = $112; //@line 26256
   $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 26257
   HEAP32[$307 >> 2] = $114; //@line 26258
   $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 26259
   HEAP8[$308 >> 0] = $240; //@line 26260
   $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 26261
   HEAP32[$309 >> 2] = $116; //@line 26262
   sp = STACKTOP; //@line 26263
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 26267
  ___async_unwind = 0; //@line 26268
  HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 26269
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 26270
  HEAP32[$252 >> 2] = $2; //@line 26271
  $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 26272
  HEAP32[$253 >> 2] = $4; //@line 26273
  $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 26274
  HEAP32[$254 >> 2] = $6; //@line 26275
  $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 26276
  HEAP32[$255 >> 2] = $8; //@line 26277
  $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 26278
  HEAP32[$256 >> 2] = $10; //@line 26279
  $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 26280
  HEAP32[$257 >> 2] = $12; //@line 26281
  $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 26282
  HEAP32[$258 >> 2] = $14; //@line 26283
  $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 26284
  HEAP32[$259 >> 2] = $16; //@line 26285
  $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 26286
  HEAP32[$260 >> 2] = $18; //@line 26287
  $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 26288
  HEAP32[$261 >> 2] = $20; //@line 26289
  $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 26290
  HEAP32[$262 >> 2] = $22; //@line 26291
  $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 26292
  HEAP32[$263 >> 2] = $24; //@line 26293
  $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 26294
  HEAP32[$264 >> 2] = $26; //@line 26295
  $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 26296
  HEAP32[$265 >> 2] = $28; //@line 26297
  $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 26298
  HEAP32[$266 >> 2] = $30; //@line 26299
  $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 26300
  HEAP32[$267 >> 2] = $32; //@line 26301
  $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 26302
  HEAP32[$268 >> 2] = $34; //@line 26303
  $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 26304
  HEAP32[$269 >> 2] = $36; //@line 26305
  $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 26306
  HEAP32[$270 >> 2] = $38; //@line 26307
  $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 26308
  HEAP32[$271 >> 2] = $40; //@line 26309
  $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 26310
  HEAP32[$272 >> 2] = $42; //@line 26311
  $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 26312
  HEAP32[$273 >> 2] = $44; //@line 26313
  $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 26314
  HEAP32[$274 >> 2] = $46; //@line 26315
  $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 26316
  HEAP32[$275 >> 2] = $48; //@line 26317
  $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 26318
  HEAP32[$276 >> 2] = $50; //@line 26319
  $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 26320
  HEAP32[$277 >> 2] = $52; //@line 26321
  $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 26322
  HEAP32[$278 >> 2] = $54; //@line 26323
  $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 26324
  HEAP32[$279 >> 2] = $56; //@line 26325
  $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 26326
  HEAP32[$280 >> 2] = $58; //@line 26327
  $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 26328
  HEAP32[$281 >> 2] = $62; //@line 26329
  $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 26330
  HEAP32[$282 >> 2] = $64; //@line 26331
  $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 26332
  HEAP32[$283 >> 2] = $66; //@line 26333
  $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 26334
  HEAP32[$284 >> 2] = $68; //@line 26335
  $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 26336
  HEAP32[$285 >> 2] = $70; //@line 26337
  $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 26338
  HEAP32[$286 >> 2] = $72; //@line 26339
  $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 26340
  HEAP32[$287 >> 2] = $74; //@line 26341
  $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 26342
  HEAP32[$288 >> 2] = $76; //@line 26343
  $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 26344
  HEAP32[$289 >> 2] = $78; //@line 26345
  $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 26346
  HEAP32[$290 >> 2] = $80; //@line 26347
  $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 26348
  HEAP8[$291 >> 0] = $82; //@line 26349
  $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 26350
  HEAP32[$292 >> 2] = $84; //@line 26351
  $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 26352
  HEAP8[$293 >> 0] = $86; //@line 26353
  $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 26354
  HEAP32[$294 >> 2] = $88; //@line 26355
  $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 26356
  HEAP8[$295 >> 0] = $90; //@line 26357
  $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 26358
  HEAP32[$296 >> 2] = $92; //@line 26359
  $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 26360
  HEAP32[$297 >> 2] = $94; //@line 26361
  $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 26362
  HEAP32[$298 >> 2] = $96; //@line 26363
  $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 26364
  HEAP32[$299 >> 2] = $98; //@line 26365
  $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 26366
  HEAP32[$300 >> 2] = $100; //@line 26367
  $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 26368
  HEAP32[$301 >> 2] = $102; //@line 26369
  $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 26370
  HEAP32[$302 >> 2] = $104; //@line 26371
  $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 26372
  HEAP32[$303 >> 2] = $106; //@line 26373
  $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 26374
  HEAP32[$304 >> 2] = $108; //@line 26375
  $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 26376
  HEAP32[$305 >> 2] = $110; //@line 26377
  $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 26378
  HEAP32[$306 >> 2] = $112; //@line 26379
  $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 26380
  HEAP32[$307 >> 2] = $114; //@line 26381
  $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 26382
  HEAP8[$308 >> 0] = $240; //@line 26383
  $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 26384
  HEAP32[$309 >> 2] = $116; //@line 26385
  sp = STACKTOP; //@line 26386
  return;
 } else if ((label | 0) == 13) {
  $313 = HEAP32[$311 >> 2] | 0; //@line 26390
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(236) | 0; //@line 26391
  $314 = FUNCTION_TABLE_ii[$313 & 15]($68) | 0; //@line 26392
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 26395
   $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 26396
   HEAP32[$315 >> 2] = $2; //@line 26397
   $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 26398
   HEAP32[$316 >> 2] = $4; //@line 26399
   $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 26400
   HEAP32[$317 >> 2] = $6; //@line 26401
   $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 26402
   HEAP32[$318 >> 2] = $8; //@line 26403
   $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 26404
   HEAP32[$319 >> 2] = $10; //@line 26405
   $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 26406
   HEAP32[$320 >> 2] = $12; //@line 26407
   $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 26408
   HEAP32[$321 >> 2] = $14; //@line 26409
   $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 26410
   HEAP32[$322 >> 2] = $16; //@line 26411
   $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 26412
   HEAP32[$323 >> 2] = $18; //@line 26413
   $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 26414
   HEAP32[$324 >> 2] = $20; //@line 26415
   $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 26416
   HEAP32[$325 >> 2] = $22; //@line 26417
   $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 26418
   HEAP32[$326 >> 2] = $24; //@line 26419
   $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 26420
   HEAP32[$327 >> 2] = $26; //@line 26421
   $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 26422
   HEAP32[$328 >> 2] = $28; //@line 26423
   $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 26424
   HEAP32[$329 >> 2] = $30; //@line 26425
   $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 26426
   HEAP32[$330 >> 2] = $32; //@line 26427
   $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 26428
   HEAP32[$331 >> 2] = $34; //@line 26429
   $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 26430
   HEAP32[$332 >> 2] = $36; //@line 26431
   $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 26432
   HEAP32[$333 >> 2] = $38; //@line 26433
   $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 26434
   HEAP32[$334 >> 2] = $40; //@line 26435
   $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 26436
   HEAP32[$335 >> 2] = $42; //@line 26437
   $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 26438
   HEAP32[$336 >> 2] = $44; //@line 26439
   $337 = $ReallocAsyncCtx3 + 92 | 0; //@line 26440
   HEAP32[$337 >> 2] = $46; //@line 26441
   $338 = $ReallocAsyncCtx3 + 96 | 0; //@line 26442
   HEAP32[$338 >> 2] = $48; //@line 26443
   $339 = $ReallocAsyncCtx3 + 100 | 0; //@line 26444
   HEAP32[$339 >> 2] = $50; //@line 26445
   $340 = $ReallocAsyncCtx3 + 104 | 0; //@line 26446
   HEAP32[$340 >> 2] = $52; //@line 26447
   $341 = $ReallocAsyncCtx3 + 108 | 0; //@line 26448
   HEAP32[$341 >> 2] = $54; //@line 26449
   $342 = $ReallocAsyncCtx3 + 112 | 0; //@line 26450
   HEAP32[$342 >> 2] = $56; //@line 26451
   $343 = $ReallocAsyncCtx3 + 116 | 0; //@line 26452
   HEAP32[$343 >> 2] = $58; //@line 26453
   $344 = $ReallocAsyncCtx3 + 120 | 0; //@line 26454
   HEAP32[$344 >> 2] = $62; //@line 26455
   $345 = $ReallocAsyncCtx3 + 124 | 0; //@line 26456
   HEAP32[$345 >> 2] = $64; //@line 26457
   $346 = $ReallocAsyncCtx3 + 128 | 0; //@line 26458
   HEAP32[$346 >> 2] = $66; //@line 26459
   $347 = $ReallocAsyncCtx3 + 132 | 0; //@line 26460
   HEAP32[$347 >> 2] = $68; //@line 26461
   $348 = $ReallocAsyncCtx3 + 136 | 0; //@line 26462
   HEAP32[$348 >> 2] = $70; //@line 26463
   $349 = $ReallocAsyncCtx3 + 140 | 0; //@line 26464
   HEAP32[$349 >> 2] = $72; //@line 26465
   $350 = $ReallocAsyncCtx3 + 144 | 0; //@line 26466
   HEAP32[$350 >> 2] = $74; //@line 26467
   $351 = $ReallocAsyncCtx3 + 148 | 0; //@line 26468
   HEAP32[$351 >> 2] = $76; //@line 26469
   $352 = $ReallocAsyncCtx3 + 152 | 0; //@line 26470
   HEAP32[$352 >> 2] = $78; //@line 26471
   $353 = $ReallocAsyncCtx3 + 156 | 0; //@line 26472
   HEAP32[$353 >> 2] = $80; //@line 26473
   $354 = $ReallocAsyncCtx3 + 160 | 0; //@line 26474
   HEAP8[$354 >> 0] = $82; //@line 26475
   $355 = $ReallocAsyncCtx3 + 164 | 0; //@line 26476
   HEAP32[$355 >> 2] = $84; //@line 26477
   $356 = $ReallocAsyncCtx3 + 168 | 0; //@line 26478
   HEAP8[$356 >> 0] = $86; //@line 26479
   $357 = $ReallocAsyncCtx3 + 172 | 0; //@line 26480
   HEAP32[$357 >> 2] = $88; //@line 26481
   $358 = $ReallocAsyncCtx3 + 176 | 0; //@line 26482
   HEAP8[$358 >> 0] = $90; //@line 26483
   $359 = $ReallocAsyncCtx3 + 180 | 0; //@line 26484
   HEAP32[$359 >> 2] = $92; //@line 26485
   $360 = $ReallocAsyncCtx3 + 184 | 0; //@line 26486
   HEAP32[$360 >> 2] = $94; //@line 26487
   $361 = $ReallocAsyncCtx3 + 188 | 0; //@line 26488
   HEAP32[$361 >> 2] = $96; //@line 26489
   $362 = $ReallocAsyncCtx3 + 192 | 0; //@line 26490
   HEAP32[$362 >> 2] = $98; //@line 26491
   $363 = $ReallocAsyncCtx3 + 196 | 0; //@line 26492
   HEAP32[$363 >> 2] = $100; //@line 26493
   $364 = $ReallocAsyncCtx3 + 200 | 0; //@line 26494
   HEAP32[$364 >> 2] = $102; //@line 26495
   $365 = $ReallocAsyncCtx3 + 204 | 0; //@line 26496
   HEAP32[$365 >> 2] = $104; //@line 26497
   $366 = $ReallocAsyncCtx3 + 208 | 0; //@line 26498
   HEAP8[$366 >> 0] = $119; //@line 26499
   $367 = $ReallocAsyncCtx3 + 212 | 0; //@line 26500
   HEAP32[$367 >> 2] = $106; //@line 26501
   $368 = $ReallocAsyncCtx3 + 216 | 0; //@line 26502
   HEAP32[$368 >> 2] = $108; //@line 26503
   $369 = $ReallocAsyncCtx3 + 220 | 0; //@line 26504
   HEAP32[$369 >> 2] = $110; //@line 26505
   $370 = $ReallocAsyncCtx3 + 224 | 0; //@line 26506
   HEAP32[$370 >> 2] = $112; //@line 26507
   $371 = $ReallocAsyncCtx3 + 228 | 0; //@line 26508
   HEAP32[$371 >> 2] = $114; //@line 26509
   $372 = $ReallocAsyncCtx3 + 232 | 0; //@line 26510
   HEAP32[$372 >> 2] = $116; //@line 26511
   sp = STACKTOP; //@line 26512
   return;
  }
  HEAP8[___async_retval >> 0] = $314; //@line 26516
  ___async_unwind = 0; //@line 26517
  HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 26518
  $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 26519
  HEAP32[$315 >> 2] = $2; //@line 26520
  $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 26521
  HEAP32[$316 >> 2] = $4; //@line 26522
  $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 26523
  HEAP32[$317 >> 2] = $6; //@line 26524
  $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 26525
  HEAP32[$318 >> 2] = $8; //@line 26526
  $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 26527
  HEAP32[$319 >> 2] = $10; //@line 26528
  $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 26529
  HEAP32[$320 >> 2] = $12; //@line 26530
  $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 26531
  HEAP32[$321 >> 2] = $14; //@line 26532
  $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 26533
  HEAP32[$322 >> 2] = $16; //@line 26534
  $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 26535
  HEAP32[$323 >> 2] = $18; //@line 26536
  $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 26537
  HEAP32[$324 >> 2] = $20; //@line 26538
  $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 26539
  HEAP32[$325 >> 2] = $22; //@line 26540
  $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 26541
  HEAP32[$326 >> 2] = $24; //@line 26542
  $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 26543
  HEAP32[$327 >> 2] = $26; //@line 26544
  $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 26545
  HEAP32[$328 >> 2] = $28; //@line 26546
  $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 26547
  HEAP32[$329 >> 2] = $30; //@line 26548
  $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 26549
  HEAP32[$330 >> 2] = $32; //@line 26550
  $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 26551
  HEAP32[$331 >> 2] = $34; //@line 26552
  $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 26553
  HEAP32[$332 >> 2] = $36; //@line 26554
  $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 26555
  HEAP32[$333 >> 2] = $38; //@line 26556
  $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 26557
  HEAP32[$334 >> 2] = $40; //@line 26558
  $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 26559
  HEAP32[$335 >> 2] = $42; //@line 26560
  $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 26561
  HEAP32[$336 >> 2] = $44; //@line 26562
  $337 = $ReallocAsyncCtx3 + 92 | 0; //@line 26563
  HEAP32[$337 >> 2] = $46; //@line 26564
  $338 = $ReallocAsyncCtx3 + 96 | 0; //@line 26565
  HEAP32[$338 >> 2] = $48; //@line 26566
  $339 = $ReallocAsyncCtx3 + 100 | 0; //@line 26567
  HEAP32[$339 >> 2] = $50; //@line 26568
  $340 = $ReallocAsyncCtx3 + 104 | 0; //@line 26569
  HEAP32[$340 >> 2] = $52; //@line 26570
  $341 = $ReallocAsyncCtx3 + 108 | 0; //@line 26571
  HEAP32[$341 >> 2] = $54; //@line 26572
  $342 = $ReallocAsyncCtx3 + 112 | 0; //@line 26573
  HEAP32[$342 >> 2] = $56; //@line 26574
  $343 = $ReallocAsyncCtx3 + 116 | 0; //@line 26575
  HEAP32[$343 >> 2] = $58; //@line 26576
  $344 = $ReallocAsyncCtx3 + 120 | 0; //@line 26577
  HEAP32[$344 >> 2] = $62; //@line 26578
  $345 = $ReallocAsyncCtx3 + 124 | 0; //@line 26579
  HEAP32[$345 >> 2] = $64; //@line 26580
  $346 = $ReallocAsyncCtx3 + 128 | 0; //@line 26581
  HEAP32[$346 >> 2] = $66; //@line 26582
  $347 = $ReallocAsyncCtx3 + 132 | 0; //@line 26583
  HEAP32[$347 >> 2] = $68; //@line 26584
  $348 = $ReallocAsyncCtx3 + 136 | 0; //@line 26585
  HEAP32[$348 >> 2] = $70; //@line 26586
  $349 = $ReallocAsyncCtx3 + 140 | 0; //@line 26587
  HEAP32[$349 >> 2] = $72; //@line 26588
  $350 = $ReallocAsyncCtx3 + 144 | 0; //@line 26589
  HEAP32[$350 >> 2] = $74; //@line 26590
  $351 = $ReallocAsyncCtx3 + 148 | 0; //@line 26591
  HEAP32[$351 >> 2] = $76; //@line 26592
  $352 = $ReallocAsyncCtx3 + 152 | 0; //@line 26593
  HEAP32[$352 >> 2] = $78; //@line 26594
  $353 = $ReallocAsyncCtx3 + 156 | 0; //@line 26595
  HEAP32[$353 >> 2] = $80; //@line 26596
  $354 = $ReallocAsyncCtx3 + 160 | 0; //@line 26597
  HEAP8[$354 >> 0] = $82; //@line 26598
  $355 = $ReallocAsyncCtx3 + 164 | 0; //@line 26599
  HEAP32[$355 >> 2] = $84; //@line 26600
  $356 = $ReallocAsyncCtx3 + 168 | 0; //@line 26601
  HEAP8[$356 >> 0] = $86; //@line 26602
  $357 = $ReallocAsyncCtx3 + 172 | 0; //@line 26603
  HEAP32[$357 >> 2] = $88; //@line 26604
  $358 = $ReallocAsyncCtx3 + 176 | 0; //@line 26605
  HEAP8[$358 >> 0] = $90; //@line 26606
  $359 = $ReallocAsyncCtx3 + 180 | 0; //@line 26607
  HEAP32[$359 >> 2] = $92; //@line 26608
  $360 = $ReallocAsyncCtx3 + 184 | 0; //@line 26609
  HEAP32[$360 >> 2] = $94; //@line 26610
  $361 = $ReallocAsyncCtx3 + 188 | 0; //@line 26611
  HEAP32[$361 >> 2] = $96; //@line 26612
  $362 = $ReallocAsyncCtx3 + 192 | 0; //@line 26613
  HEAP32[$362 >> 2] = $98; //@line 26614
  $363 = $ReallocAsyncCtx3 + 196 | 0; //@line 26615
  HEAP32[$363 >> 2] = $100; //@line 26616
  $364 = $ReallocAsyncCtx3 + 200 | 0; //@line 26617
  HEAP32[$364 >> 2] = $102; //@line 26618
  $365 = $ReallocAsyncCtx3 + 204 | 0; //@line 26619
  HEAP32[$365 >> 2] = $104; //@line 26620
  $366 = $ReallocAsyncCtx3 + 208 | 0; //@line 26621
  HEAP8[$366 >> 0] = $119; //@line 26622
  $367 = $ReallocAsyncCtx3 + 212 | 0; //@line 26623
  HEAP32[$367 >> 2] = $106; //@line 26624
  $368 = $ReallocAsyncCtx3 + 216 | 0; //@line 26625
  HEAP32[$368 >> 2] = $108; //@line 26626
  $369 = $ReallocAsyncCtx3 + 220 | 0; //@line 26627
  HEAP32[$369 >> 2] = $110; //@line 26628
  $370 = $ReallocAsyncCtx3 + 224 | 0; //@line 26629
  HEAP32[$370 >> 2] = $112; //@line 26630
  $371 = $ReallocAsyncCtx3 + 228 | 0; //@line 26631
  HEAP32[$371 >> 2] = $114; //@line 26632
  $372 = $ReallocAsyncCtx3 + 232 | 0; //@line 26633
  HEAP32[$372 >> 2] = $116; //@line 26634
  sp = STACKTOP; //@line 26635
  return;
 } else if ((label | 0) == 18) {
  $392 = HEAP8[$84 + ($119 & 255) >> 0] | 0; //@line 26642
  HEAP32[$114 >> 2] = (HEAPU8[$84 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$84 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$84 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 26663
  HEAP32[$96 >> 2] = 0; //@line 26664
  $413 = $$0$be + 6 << 24 >> 24; //@line 26665
  HEAP8[$98 >> 0] = HEAP8[$84 + ($$0$be + 5 & 255) >> 0] | 0; //@line 26669
  $419 = HEAP32[(HEAP32[$22 >> 2] | 0) + 8 >> 2] | 0; //@line 26672
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(236) | 0; //@line 26673
  $420 = FUNCTION_TABLE_iiii[$419 & 31]($64, $392, $4) | 0; //@line 26674
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 26677
   $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 26678
   HEAP32[$421 >> 2] = $2; //@line 26679
   $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 26680
   HEAP32[$422 >> 2] = $4; //@line 26681
   $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 26682
   HEAP32[$423 >> 2] = $6; //@line 26683
   $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 26684
   HEAP32[$424 >> 2] = $8; //@line 26685
   $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 26686
   HEAP32[$425 >> 2] = $10; //@line 26687
   $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 26688
   HEAP32[$426 >> 2] = $12; //@line 26689
   $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 26690
   HEAP32[$427 >> 2] = $14; //@line 26691
   $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 26692
   HEAP32[$428 >> 2] = $16; //@line 26693
   $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 26694
   HEAP32[$429 >> 2] = $18; //@line 26695
   $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 26696
   HEAP32[$430 >> 2] = $20; //@line 26697
   $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 26698
   HEAP32[$431 >> 2] = $22; //@line 26699
   $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 26700
   HEAP32[$432 >> 2] = $24; //@line 26701
   $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 26702
   HEAP32[$433 >> 2] = $26; //@line 26703
   $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 26704
   HEAP32[$434 >> 2] = $28; //@line 26705
   $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 26706
   HEAP32[$435 >> 2] = $30; //@line 26707
   $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 26708
   HEAP32[$436 >> 2] = $32; //@line 26709
   $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 26710
   HEAP32[$437 >> 2] = $34; //@line 26711
   $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 26712
   HEAP32[$438 >> 2] = $36; //@line 26713
   $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 26714
   HEAP32[$439 >> 2] = $38; //@line 26715
   $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 26716
   HEAP32[$440 >> 2] = $40; //@line 26717
   $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 26718
   HEAP32[$441 >> 2] = $42; //@line 26719
   $442 = $ReallocAsyncCtx4 + 88 | 0; //@line 26720
   HEAP32[$442 >> 2] = $44; //@line 26721
   $443 = $ReallocAsyncCtx4 + 92 | 0; //@line 26722
   HEAP32[$443 >> 2] = $46; //@line 26723
   $444 = $ReallocAsyncCtx4 + 96 | 0; //@line 26724
   HEAP32[$444 >> 2] = $48; //@line 26725
   $445 = $ReallocAsyncCtx4 + 100 | 0; //@line 26726
   HEAP32[$445 >> 2] = $50; //@line 26727
   $446 = $ReallocAsyncCtx4 + 104 | 0; //@line 26728
   HEAP32[$446 >> 2] = $52; //@line 26729
   $447 = $ReallocAsyncCtx4 + 108 | 0; //@line 26730
   HEAP32[$447 >> 2] = $54; //@line 26731
   $448 = $ReallocAsyncCtx4 + 112 | 0; //@line 26732
   HEAP32[$448 >> 2] = $56; //@line 26733
   $449 = $ReallocAsyncCtx4 + 116 | 0; //@line 26734
   HEAP32[$449 >> 2] = $58; //@line 26735
   $450 = $ReallocAsyncCtx4 + 120 | 0; //@line 26736
   HEAP32[$450 >> 2] = $62; //@line 26737
   $451 = $ReallocAsyncCtx4 + 124 | 0; //@line 26738
   HEAP32[$451 >> 2] = $64; //@line 26739
   $452 = $ReallocAsyncCtx4 + 128 | 0; //@line 26740
   HEAP32[$452 >> 2] = $66; //@line 26741
   $453 = $ReallocAsyncCtx4 + 132 | 0; //@line 26742
   HEAP32[$453 >> 2] = $68; //@line 26743
   $454 = $ReallocAsyncCtx4 + 136 | 0; //@line 26744
   HEAP32[$454 >> 2] = $70; //@line 26745
   $455 = $ReallocAsyncCtx4 + 140 | 0; //@line 26746
   HEAP32[$455 >> 2] = $72; //@line 26747
   $456 = $ReallocAsyncCtx4 + 144 | 0; //@line 26748
   HEAP32[$456 >> 2] = $74; //@line 26749
   $457 = $ReallocAsyncCtx4 + 148 | 0; //@line 26750
   HEAP32[$457 >> 2] = $76; //@line 26751
   $458 = $ReallocAsyncCtx4 + 152 | 0; //@line 26752
   HEAP32[$458 >> 2] = $78; //@line 26753
   $459 = $ReallocAsyncCtx4 + 156 | 0; //@line 26754
   HEAP32[$459 >> 2] = $80; //@line 26755
   $460 = $ReallocAsyncCtx4 + 160 | 0; //@line 26756
   HEAP8[$460 >> 0] = $82; //@line 26757
   $461 = $ReallocAsyncCtx4 + 164 | 0; //@line 26758
   HEAP32[$461 >> 2] = $84; //@line 26759
   $462 = $ReallocAsyncCtx4 + 168 | 0; //@line 26760
   HEAP8[$462 >> 0] = $86; //@line 26761
   $463 = $ReallocAsyncCtx4 + 172 | 0; //@line 26762
   HEAP32[$463 >> 2] = $88; //@line 26763
   $464 = $ReallocAsyncCtx4 + 176 | 0; //@line 26764
   HEAP8[$464 >> 0] = $90; //@line 26765
   $465 = $ReallocAsyncCtx4 + 180 | 0; //@line 26766
   HEAP32[$465 >> 2] = $92; //@line 26767
   $466 = $ReallocAsyncCtx4 + 184 | 0; //@line 26768
   HEAP32[$466 >> 2] = $94; //@line 26769
   $467 = $ReallocAsyncCtx4 + 188 | 0; //@line 26770
   HEAP32[$467 >> 2] = $96; //@line 26771
   $468 = $ReallocAsyncCtx4 + 192 | 0; //@line 26772
   HEAP32[$468 >> 2] = $98; //@line 26773
   $469 = $ReallocAsyncCtx4 + 196 | 0; //@line 26774
   HEAP32[$469 >> 2] = $100; //@line 26775
   $470 = $ReallocAsyncCtx4 + 200 | 0; //@line 26776
   HEAP32[$470 >> 2] = $102; //@line 26777
   $471 = $ReallocAsyncCtx4 + 204 | 0; //@line 26778
   HEAP8[$471 >> 0] = $413; //@line 26779
   $472 = $ReallocAsyncCtx4 + 208 | 0; //@line 26780
   HEAP32[$472 >> 2] = $104; //@line 26781
   $473 = $ReallocAsyncCtx4 + 212 | 0; //@line 26782
   HEAP32[$473 >> 2] = $106; //@line 26783
   $474 = $ReallocAsyncCtx4 + 216 | 0; //@line 26784
   HEAP32[$474 >> 2] = $108; //@line 26785
   $475 = $ReallocAsyncCtx4 + 220 | 0; //@line 26786
   HEAP32[$475 >> 2] = $110; //@line 26787
   $476 = $ReallocAsyncCtx4 + 224 | 0; //@line 26788
   HEAP32[$476 >> 2] = $112; //@line 26789
   $477 = $ReallocAsyncCtx4 + 228 | 0; //@line 26790
   HEAP32[$477 >> 2] = $114; //@line 26791
   $478 = $ReallocAsyncCtx4 + 232 | 0; //@line 26792
   HEAP32[$478 >> 2] = $116; //@line 26793
   sp = STACKTOP; //@line 26794
   return;
  }
  HEAP8[___async_retval >> 0] = $420; //@line 26798
  ___async_unwind = 0; //@line 26799
  HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 26800
  $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 26801
  HEAP32[$421 >> 2] = $2; //@line 26802
  $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 26803
  HEAP32[$422 >> 2] = $4; //@line 26804
  $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 26805
  HEAP32[$423 >> 2] = $6; //@line 26806
  $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 26807
  HEAP32[$424 >> 2] = $8; //@line 26808
  $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 26809
  HEAP32[$425 >> 2] = $10; //@line 26810
  $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 26811
  HEAP32[$426 >> 2] = $12; //@line 26812
  $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 26813
  HEAP32[$427 >> 2] = $14; //@line 26814
  $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 26815
  HEAP32[$428 >> 2] = $16; //@line 26816
  $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 26817
  HEAP32[$429 >> 2] = $18; //@line 26818
  $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 26819
  HEAP32[$430 >> 2] = $20; //@line 26820
  $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 26821
  HEAP32[$431 >> 2] = $22; //@line 26822
  $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 26823
  HEAP32[$432 >> 2] = $24; //@line 26824
  $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 26825
  HEAP32[$433 >> 2] = $26; //@line 26826
  $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 26827
  HEAP32[$434 >> 2] = $28; //@line 26828
  $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 26829
  HEAP32[$435 >> 2] = $30; //@line 26830
  $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 26831
  HEAP32[$436 >> 2] = $32; //@line 26832
  $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 26833
  HEAP32[$437 >> 2] = $34; //@line 26834
  $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 26835
  HEAP32[$438 >> 2] = $36; //@line 26836
  $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 26837
  HEAP32[$439 >> 2] = $38; //@line 26838
  $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 26839
  HEAP32[$440 >> 2] = $40; //@line 26840
  $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 26841
  HEAP32[$441 >> 2] = $42; //@line 26842
  $442 = $ReallocAsyncCtx4 + 88 | 0; //@line 26843
  HEAP32[$442 >> 2] = $44; //@line 26844
  $443 = $ReallocAsyncCtx4 + 92 | 0; //@line 26845
  HEAP32[$443 >> 2] = $46; //@line 26846
  $444 = $ReallocAsyncCtx4 + 96 | 0; //@line 26847
  HEAP32[$444 >> 2] = $48; //@line 26848
  $445 = $ReallocAsyncCtx4 + 100 | 0; //@line 26849
  HEAP32[$445 >> 2] = $50; //@line 26850
  $446 = $ReallocAsyncCtx4 + 104 | 0; //@line 26851
  HEAP32[$446 >> 2] = $52; //@line 26852
  $447 = $ReallocAsyncCtx4 + 108 | 0; //@line 26853
  HEAP32[$447 >> 2] = $54; //@line 26854
  $448 = $ReallocAsyncCtx4 + 112 | 0; //@line 26855
  HEAP32[$448 >> 2] = $56; //@line 26856
  $449 = $ReallocAsyncCtx4 + 116 | 0; //@line 26857
  HEAP32[$449 >> 2] = $58; //@line 26858
  $450 = $ReallocAsyncCtx4 + 120 | 0; //@line 26859
  HEAP32[$450 >> 2] = $62; //@line 26860
  $451 = $ReallocAsyncCtx4 + 124 | 0; //@line 26861
  HEAP32[$451 >> 2] = $64; //@line 26862
  $452 = $ReallocAsyncCtx4 + 128 | 0; //@line 26863
  HEAP32[$452 >> 2] = $66; //@line 26864
  $453 = $ReallocAsyncCtx4 + 132 | 0; //@line 26865
  HEAP32[$453 >> 2] = $68; //@line 26866
  $454 = $ReallocAsyncCtx4 + 136 | 0; //@line 26867
  HEAP32[$454 >> 2] = $70; //@line 26868
  $455 = $ReallocAsyncCtx4 + 140 | 0; //@line 26869
  HEAP32[$455 >> 2] = $72; //@line 26870
  $456 = $ReallocAsyncCtx4 + 144 | 0; //@line 26871
  HEAP32[$456 >> 2] = $74; //@line 26872
  $457 = $ReallocAsyncCtx4 + 148 | 0; //@line 26873
  HEAP32[$457 >> 2] = $76; //@line 26874
  $458 = $ReallocAsyncCtx4 + 152 | 0; //@line 26875
  HEAP32[$458 >> 2] = $78; //@line 26876
  $459 = $ReallocAsyncCtx4 + 156 | 0; //@line 26877
  HEAP32[$459 >> 2] = $80; //@line 26878
  $460 = $ReallocAsyncCtx4 + 160 | 0; //@line 26879
  HEAP8[$460 >> 0] = $82; //@line 26880
  $461 = $ReallocAsyncCtx4 + 164 | 0; //@line 26881
  HEAP32[$461 >> 2] = $84; //@line 26882
  $462 = $ReallocAsyncCtx4 + 168 | 0; //@line 26883
  HEAP8[$462 >> 0] = $86; //@line 26884
  $463 = $ReallocAsyncCtx4 + 172 | 0; //@line 26885
  HEAP32[$463 >> 2] = $88; //@line 26886
  $464 = $ReallocAsyncCtx4 + 176 | 0; //@line 26887
  HEAP8[$464 >> 0] = $90; //@line 26888
  $465 = $ReallocAsyncCtx4 + 180 | 0; //@line 26889
  HEAP32[$465 >> 2] = $92; //@line 26890
  $466 = $ReallocAsyncCtx4 + 184 | 0; //@line 26891
  HEAP32[$466 >> 2] = $94; //@line 26892
  $467 = $ReallocAsyncCtx4 + 188 | 0; //@line 26893
  HEAP32[$467 >> 2] = $96; //@line 26894
  $468 = $ReallocAsyncCtx4 + 192 | 0; //@line 26895
  HEAP32[$468 >> 2] = $98; //@line 26896
  $469 = $ReallocAsyncCtx4 + 196 | 0; //@line 26897
  HEAP32[$469 >> 2] = $100; //@line 26898
  $470 = $ReallocAsyncCtx4 + 200 | 0; //@line 26899
  HEAP32[$470 >> 2] = $102; //@line 26900
  $471 = $ReallocAsyncCtx4 + 204 | 0; //@line 26901
  HEAP8[$471 >> 0] = $413; //@line 26902
  $472 = $ReallocAsyncCtx4 + 208 | 0; //@line 26903
  HEAP32[$472 >> 2] = $104; //@line 26904
  $473 = $ReallocAsyncCtx4 + 212 | 0; //@line 26905
  HEAP32[$473 >> 2] = $106; //@line 26906
  $474 = $ReallocAsyncCtx4 + 216 | 0; //@line 26907
  HEAP32[$474 >> 2] = $108; //@line 26908
  $475 = $ReallocAsyncCtx4 + 220 | 0; //@line 26909
  HEAP32[$475 >> 2] = $110; //@line 26910
  $476 = $ReallocAsyncCtx4 + 224 | 0; //@line 26911
  HEAP32[$476 >> 2] = $112; //@line 26912
  $477 = $ReallocAsyncCtx4 + 228 | 0; //@line 26913
  HEAP32[$477 >> 2] = $114; //@line 26914
  $478 = $ReallocAsyncCtx4 + 232 | 0; //@line 26915
  HEAP32[$478 >> 2] = $116; //@line 26916
  sp = STACKTOP; //@line 26917
  return;
 } else if ((label | 0) == 24) {
  $499 = $$0$be + 2 << 24 >> 24; //@line 26921
  $503 = HEAPU8[$84 + ($119 & 255) >> 0] | 0; //@line 26925
  $505 = $503 >>> 5 & 1; //@line 26928
  $507 = $503 >>> 4 & 1; //@line 26931
  $510 = HEAP32[(HEAP32[$24 >> 2] | 0) + 44 >> 2] | 0; //@line 26934
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(252) | 0; //@line 26935
  $511 = FUNCTION_TABLE_iiii[$510 & 31]($64, $507, $505) | 0; //@line 26936
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 26939
   $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 26940
   HEAP32[$512 >> 2] = $2; //@line 26941
   $513 = $ReallocAsyncCtx5 + 8 | 0; //@line 26942
   HEAP32[$513 >> 2] = $4; //@line 26943
   $514 = $ReallocAsyncCtx5 + 12 | 0; //@line 26944
   HEAP32[$514 >> 2] = $6; //@line 26945
   $515 = $ReallocAsyncCtx5 + 16 | 0; //@line 26946
   HEAP32[$515 >> 2] = $8; //@line 26947
   $516 = $ReallocAsyncCtx5 + 20 | 0; //@line 26948
   HEAP32[$516 >> 2] = $10; //@line 26949
   $517 = $ReallocAsyncCtx5 + 24 | 0; //@line 26950
   HEAP32[$517 >> 2] = $12; //@line 26951
   $518 = $ReallocAsyncCtx5 + 28 | 0; //@line 26952
   HEAP32[$518 >> 2] = $14; //@line 26953
   $519 = $ReallocAsyncCtx5 + 32 | 0; //@line 26954
   HEAP32[$519 >> 2] = $16; //@line 26955
   $520 = $ReallocAsyncCtx5 + 36 | 0; //@line 26956
   HEAP32[$520 >> 2] = $18; //@line 26957
   $521 = $ReallocAsyncCtx5 + 40 | 0; //@line 26958
   HEAP32[$521 >> 2] = $20; //@line 26959
   $522 = $ReallocAsyncCtx5 + 44 | 0; //@line 26960
   HEAP32[$522 >> 2] = $22; //@line 26961
   $523 = $ReallocAsyncCtx5 + 48 | 0; //@line 26962
   HEAP32[$523 >> 2] = $24; //@line 26963
   $524 = $ReallocAsyncCtx5 + 52 | 0; //@line 26964
   HEAP32[$524 >> 2] = $26; //@line 26965
   $525 = $ReallocAsyncCtx5 + 56 | 0; //@line 26966
   HEAP8[$525 >> 0] = $507; //@line 26967
   $526 = $ReallocAsyncCtx5 + 60 | 0; //@line 26968
   HEAP32[$526 >> 2] = $28; //@line 26969
   $527 = $ReallocAsyncCtx5 + 64 | 0; //@line 26970
   HEAP32[$527 >> 2] = $30; //@line 26971
   $528 = $ReallocAsyncCtx5 + 68 | 0; //@line 26972
   HEAP32[$528 >> 2] = $32; //@line 26973
   $529 = $ReallocAsyncCtx5 + 72 | 0; //@line 26974
   HEAP32[$529 >> 2] = $34; //@line 26975
   $530 = $ReallocAsyncCtx5 + 76 | 0; //@line 26976
   HEAP32[$530 >> 2] = $36; //@line 26977
   $531 = $ReallocAsyncCtx5 + 80 | 0; //@line 26978
   HEAP32[$531 >> 2] = $38; //@line 26979
   $532 = $ReallocAsyncCtx5 + 84 | 0; //@line 26980
   HEAP32[$532 >> 2] = $40; //@line 26981
   $533 = $ReallocAsyncCtx5 + 88 | 0; //@line 26982
   HEAP32[$533 >> 2] = $42; //@line 26983
   $534 = $ReallocAsyncCtx5 + 92 | 0; //@line 26984
   HEAP32[$534 >> 2] = $44; //@line 26985
   $535 = $ReallocAsyncCtx5 + 96 | 0; //@line 26986
   HEAP32[$535 >> 2] = $46; //@line 26987
   $536 = $ReallocAsyncCtx5 + 100 | 0; //@line 26988
   HEAP32[$536 >> 2] = $503; //@line 26989
   $537 = $ReallocAsyncCtx5 + 104 | 0; //@line 26990
   HEAP32[$537 >> 2] = $48; //@line 26991
   $538 = $ReallocAsyncCtx5 + 108 | 0; //@line 26992
   HEAP32[$538 >> 2] = $50; //@line 26993
   $539 = $ReallocAsyncCtx5 + 112 | 0; //@line 26994
   HEAP32[$539 >> 2] = $52; //@line 26995
   $540 = $ReallocAsyncCtx5 + 116 | 0; //@line 26996
   HEAP32[$540 >> 2] = $54; //@line 26997
   $541 = $ReallocAsyncCtx5 + 120 | 0; //@line 26998
   HEAP32[$541 >> 2] = $56; //@line 26999
   $542 = $ReallocAsyncCtx5 + 124 | 0; //@line 27000
   HEAP32[$542 >> 2] = $58; //@line 27001
   $543 = $ReallocAsyncCtx5 + 128 | 0; //@line 27002
   HEAP32[$543 >> 2] = $62; //@line 27003
   $544 = $ReallocAsyncCtx5 + 132 | 0; //@line 27004
   HEAP32[$544 >> 2] = $64; //@line 27005
   $545 = $ReallocAsyncCtx5 + 136 | 0; //@line 27006
   HEAP32[$545 >> 2] = $66; //@line 27007
   $546 = $ReallocAsyncCtx5 + 140 | 0; //@line 27008
   HEAP8[$546 >> 0] = $505; //@line 27009
   $547 = $ReallocAsyncCtx5 + 144 | 0; //@line 27010
   HEAP32[$547 >> 2] = $68; //@line 27011
   $548 = $ReallocAsyncCtx5 + 148 | 0; //@line 27012
   HEAP32[$548 >> 2] = $70; //@line 27013
   $549 = $ReallocAsyncCtx5 + 152 | 0; //@line 27014
   HEAP32[$549 >> 2] = $72; //@line 27015
   $550 = $ReallocAsyncCtx5 + 156 | 0; //@line 27016
   HEAP32[$550 >> 2] = $74; //@line 27017
   $551 = $ReallocAsyncCtx5 + 160 | 0; //@line 27018
   HEAP32[$551 >> 2] = $76; //@line 27019
   $552 = $ReallocAsyncCtx5 + 164 | 0; //@line 27020
   HEAP32[$552 >> 2] = $78; //@line 27021
   $553 = $ReallocAsyncCtx5 + 168 | 0; //@line 27022
   HEAP32[$553 >> 2] = $80; //@line 27023
   $554 = $ReallocAsyncCtx5 + 172 | 0; //@line 27024
   HEAP8[$554 >> 0] = $82; //@line 27025
   $555 = $ReallocAsyncCtx5 + 176 | 0; //@line 27026
   HEAP32[$555 >> 2] = $84; //@line 27027
   $556 = $ReallocAsyncCtx5 + 180 | 0; //@line 27028
   HEAP8[$556 >> 0] = $86; //@line 27029
   $557 = $ReallocAsyncCtx5 + 184 | 0; //@line 27030
   HEAP32[$557 >> 2] = $88; //@line 27031
   $558 = $ReallocAsyncCtx5 + 188 | 0; //@line 27032
   HEAP8[$558 >> 0] = $90; //@line 27033
   $559 = $ReallocAsyncCtx5 + 192 | 0; //@line 27034
   HEAP32[$559 >> 2] = $$0107$be; //@line 27035
   $560 = $ReallocAsyncCtx5 + 196 | 0; //@line 27036
   HEAP32[$560 >> 2] = $92; //@line 27037
   $561 = $ReallocAsyncCtx5 + 200 | 0; //@line 27038
   HEAP32[$561 >> 2] = $94; //@line 27039
   $562 = $ReallocAsyncCtx5 + 204 | 0; //@line 27040
   HEAP32[$562 >> 2] = $96; //@line 27041
   $563 = $ReallocAsyncCtx5 + 208 | 0; //@line 27042
   HEAP32[$563 >> 2] = $98; //@line 27043
   $564 = $ReallocAsyncCtx5 + 212 | 0; //@line 27044
   HEAP32[$564 >> 2] = $100; //@line 27045
   $565 = $ReallocAsyncCtx5 + 216 | 0; //@line 27046
   HEAP32[$565 >> 2] = $102; //@line 27047
   $566 = $ReallocAsyncCtx5 + 220 | 0; //@line 27048
   HEAP8[$566 >> 0] = $499; //@line 27049
   $567 = $ReallocAsyncCtx5 + 224 | 0; //@line 27050
   HEAP32[$567 >> 2] = $104; //@line 27051
   $568 = $ReallocAsyncCtx5 + 228 | 0; //@line 27052
   HEAP32[$568 >> 2] = $106; //@line 27053
   $569 = $ReallocAsyncCtx5 + 232 | 0; //@line 27054
   HEAP32[$569 >> 2] = $108; //@line 27055
   $570 = $ReallocAsyncCtx5 + 236 | 0; //@line 27056
   HEAP32[$570 >> 2] = $110; //@line 27057
   $571 = $ReallocAsyncCtx5 + 240 | 0; //@line 27058
   HEAP32[$571 >> 2] = $112; //@line 27059
   $572 = $ReallocAsyncCtx5 + 244 | 0; //@line 27060
   HEAP32[$572 >> 2] = $114; //@line 27061
   $573 = $ReallocAsyncCtx5 + 248 | 0; //@line 27062
   HEAP32[$573 >> 2] = $116; //@line 27063
   sp = STACKTOP; //@line 27064
   return;
  }
  HEAP8[___async_retval >> 0] = $511 & 1; //@line 27069
  ___async_unwind = 0; //@line 27070
  HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 27071
  $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 27072
  HEAP32[$512 >> 2] = $2; //@line 27073
  $513 = $ReallocAsyncCtx5 + 8 | 0; //@line 27074
  HEAP32[$513 >> 2] = $4; //@line 27075
  $514 = $ReallocAsyncCtx5 + 12 | 0; //@line 27076
  HEAP32[$514 >> 2] = $6; //@line 27077
  $515 = $ReallocAsyncCtx5 + 16 | 0; //@line 27078
  HEAP32[$515 >> 2] = $8; //@line 27079
  $516 = $ReallocAsyncCtx5 + 20 | 0; //@line 27080
  HEAP32[$516 >> 2] = $10; //@line 27081
  $517 = $ReallocAsyncCtx5 + 24 | 0; //@line 27082
  HEAP32[$517 >> 2] = $12; //@line 27083
  $518 = $ReallocAsyncCtx5 + 28 | 0; //@line 27084
  HEAP32[$518 >> 2] = $14; //@line 27085
  $519 = $ReallocAsyncCtx5 + 32 | 0; //@line 27086
  HEAP32[$519 >> 2] = $16; //@line 27087
  $520 = $ReallocAsyncCtx5 + 36 | 0; //@line 27088
  HEAP32[$520 >> 2] = $18; //@line 27089
  $521 = $ReallocAsyncCtx5 + 40 | 0; //@line 27090
  HEAP32[$521 >> 2] = $20; //@line 27091
  $522 = $ReallocAsyncCtx5 + 44 | 0; //@line 27092
  HEAP32[$522 >> 2] = $22; //@line 27093
  $523 = $ReallocAsyncCtx5 + 48 | 0; //@line 27094
  HEAP32[$523 >> 2] = $24; //@line 27095
  $524 = $ReallocAsyncCtx5 + 52 | 0; //@line 27096
  HEAP32[$524 >> 2] = $26; //@line 27097
  $525 = $ReallocAsyncCtx5 + 56 | 0; //@line 27098
  HEAP8[$525 >> 0] = $507; //@line 27099
  $526 = $ReallocAsyncCtx5 + 60 | 0; //@line 27100
  HEAP32[$526 >> 2] = $28; //@line 27101
  $527 = $ReallocAsyncCtx5 + 64 | 0; //@line 27102
  HEAP32[$527 >> 2] = $30; //@line 27103
  $528 = $ReallocAsyncCtx5 + 68 | 0; //@line 27104
  HEAP32[$528 >> 2] = $32; //@line 27105
  $529 = $ReallocAsyncCtx5 + 72 | 0; //@line 27106
  HEAP32[$529 >> 2] = $34; //@line 27107
  $530 = $ReallocAsyncCtx5 + 76 | 0; //@line 27108
  HEAP32[$530 >> 2] = $36; //@line 27109
  $531 = $ReallocAsyncCtx5 + 80 | 0; //@line 27110
  HEAP32[$531 >> 2] = $38; //@line 27111
  $532 = $ReallocAsyncCtx5 + 84 | 0; //@line 27112
  HEAP32[$532 >> 2] = $40; //@line 27113
  $533 = $ReallocAsyncCtx5 + 88 | 0; //@line 27114
  HEAP32[$533 >> 2] = $42; //@line 27115
  $534 = $ReallocAsyncCtx5 + 92 | 0; //@line 27116
  HEAP32[$534 >> 2] = $44; //@line 27117
  $535 = $ReallocAsyncCtx5 + 96 | 0; //@line 27118
  HEAP32[$535 >> 2] = $46; //@line 27119
  $536 = $ReallocAsyncCtx5 + 100 | 0; //@line 27120
  HEAP32[$536 >> 2] = $503; //@line 27121
  $537 = $ReallocAsyncCtx5 + 104 | 0; //@line 27122
  HEAP32[$537 >> 2] = $48; //@line 27123
  $538 = $ReallocAsyncCtx5 + 108 | 0; //@line 27124
  HEAP32[$538 >> 2] = $50; //@line 27125
  $539 = $ReallocAsyncCtx5 + 112 | 0; //@line 27126
  HEAP32[$539 >> 2] = $52; //@line 27127
  $540 = $ReallocAsyncCtx5 + 116 | 0; //@line 27128
  HEAP32[$540 >> 2] = $54; //@line 27129
  $541 = $ReallocAsyncCtx5 + 120 | 0; //@line 27130
  HEAP32[$541 >> 2] = $56; //@line 27131
  $542 = $ReallocAsyncCtx5 + 124 | 0; //@line 27132
  HEAP32[$542 >> 2] = $58; //@line 27133
  $543 = $ReallocAsyncCtx5 + 128 | 0; //@line 27134
  HEAP32[$543 >> 2] = $62; //@line 27135
  $544 = $ReallocAsyncCtx5 + 132 | 0; //@line 27136
  HEAP32[$544 >> 2] = $64; //@line 27137
  $545 = $ReallocAsyncCtx5 + 136 | 0; //@line 27138
  HEAP32[$545 >> 2] = $66; //@line 27139
  $546 = $ReallocAsyncCtx5 + 140 | 0; //@line 27140
  HEAP8[$546 >> 0] = $505; //@line 27141
  $547 = $ReallocAsyncCtx5 + 144 | 0; //@line 27142
  HEAP32[$547 >> 2] = $68; //@line 27143
  $548 = $ReallocAsyncCtx5 + 148 | 0; //@line 27144
  HEAP32[$548 >> 2] = $70; //@line 27145
  $549 = $ReallocAsyncCtx5 + 152 | 0; //@line 27146
  HEAP32[$549 >> 2] = $72; //@line 27147
  $550 = $ReallocAsyncCtx5 + 156 | 0; //@line 27148
  HEAP32[$550 >> 2] = $74; //@line 27149
  $551 = $ReallocAsyncCtx5 + 160 | 0; //@line 27150
  HEAP32[$551 >> 2] = $76; //@line 27151
  $552 = $ReallocAsyncCtx5 + 164 | 0; //@line 27152
  HEAP32[$552 >> 2] = $78; //@line 27153
  $553 = $ReallocAsyncCtx5 + 168 | 0; //@line 27154
  HEAP32[$553 >> 2] = $80; //@line 27155
  $554 = $ReallocAsyncCtx5 + 172 | 0; //@line 27156
  HEAP8[$554 >> 0] = $82; //@line 27157
  $555 = $ReallocAsyncCtx5 + 176 | 0; //@line 27158
  HEAP32[$555 >> 2] = $84; //@line 27159
  $556 = $ReallocAsyncCtx5 + 180 | 0; //@line 27160
  HEAP8[$556 >> 0] = $86; //@line 27161
  $557 = $ReallocAsyncCtx5 + 184 | 0; //@line 27162
  HEAP32[$557 >> 2] = $88; //@line 27163
  $558 = $ReallocAsyncCtx5 + 188 | 0; //@line 27164
  HEAP8[$558 >> 0] = $90; //@line 27165
  $559 = $ReallocAsyncCtx5 + 192 | 0; //@line 27166
  HEAP32[$559 >> 2] = $$0107$be; //@line 27167
  $560 = $ReallocAsyncCtx5 + 196 | 0; //@line 27168
  HEAP32[$560 >> 2] = $92; //@line 27169
  $561 = $ReallocAsyncCtx5 + 200 | 0; //@line 27170
  HEAP32[$561 >> 2] = $94; //@line 27171
  $562 = $ReallocAsyncCtx5 + 204 | 0; //@line 27172
  HEAP32[$562 >> 2] = $96; //@line 27173
  $563 = $ReallocAsyncCtx5 + 208 | 0; //@line 27174
  HEAP32[$563 >> 2] = $98; //@line 27175
  $564 = $ReallocAsyncCtx5 + 212 | 0; //@line 27176
  HEAP32[$564 >> 2] = $100; //@line 27177
  $565 = $ReallocAsyncCtx5 + 216 | 0; //@line 27178
  HEAP32[$565 >> 2] = $102; //@line 27179
  $566 = $ReallocAsyncCtx5 + 220 | 0; //@line 27180
  HEAP8[$566 >> 0] = $499; //@line 27181
  $567 = $ReallocAsyncCtx5 + 224 | 0; //@line 27182
  HEAP32[$567 >> 2] = $104; //@line 27183
  $568 = $ReallocAsyncCtx5 + 228 | 0; //@line 27184
  HEAP32[$568 >> 2] = $106; //@line 27185
  $569 = $ReallocAsyncCtx5 + 232 | 0; //@line 27186
  HEAP32[$569 >> 2] = $108; //@line 27187
  $570 = $ReallocAsyncCtx5 + 236 | 0; //@line 27188
  HEAP32[$570 >> 2] = $110; //@line 27189
  $571 = $ReallocAsyncCtx5 + 240 | 0; //@line 27190
  HEAP32[$571 >> 2] = $112; //@line 27191
  $572 = $ReallocAsyncCtx5 + 244 | 0; //@line 27192
  HEAP32[$572 >> 2] = $114; //@line 27193
  $573 = $ReallocAsyncCtx5 + 248 | 0; //@line 27194
  HEAP32[$573 >> 2] = $116; //@line 27195
  sp = STACKTOP; //@line 27196
  return;
 } else if ((label | 0) == 27) {
  $578 = HEAP8[$84 + ($119 & 255) >> 0] | 0; //@line 27203
  $591 = $$0$be + 5 << 24 >> 24; //@line 27216
  $598 = (HEAPU8[$84 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$84 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$84 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 27223
  $601 = HEAP32[(HEAP32[$40 >> 2] | 0) + 48 >> 2] | 0; //@line 27226
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(236) | 0; //@line 27227
  $602 = FUNCTION_TABLE_iiii[$601 & 31]($64, $578, $598) | 0; //@line 27228
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 495; //@line 27231
   $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 27232
   HEAP32[$603 >> 2] = $2; //@line 27233
   $604 = $ReallocAsyncCtx6 + 8 | 0; //@line 27234
   HEAP32[$604 >> 2] = $4; //@line 27235
   $605 = $ReallocAsyncCtx6 + 12 | 0; //@line 27236
   HEAP32[$605 >> 2] = $6; //@line 27237
   $606 = $ReallocAsyncCtx6 + 16 | 0; //@line 27238
   HEAP32[$606 >> 2] = $8; //@line 27239
   $607 = $ReallocAsyncCtx6 + 20 | 0; //@line 27240
   HEAP32[$607 >> 2] = $10; //@line 27241
   $608 = $ReallocAsyncCtx6 + 24 | 0; //@line 27242
   HEAP32[$608 >> 2] = $12; //@line 27243
   $609 = $ReallocAsyncCtx6 + 28 | 0; //@line 27244
   HEAP32[$609 >> 2] = $14; //@line 27245
   $610 = $ReallocAsyncCtx6 + 32 | 0; //@line 27246
   HEAP32[$610 >> 2] = $16; //@line 27247
   $611 = $ReallocAsyncCtx6 + 36 | 0; //@line 27248
   HEAP32[$611 >> 2] = $18; //@line 27249
   $612 = $ReallocAsyncCtx6 + 40 | 0; //@line 27250
   HEAP32[$612 >> 2] = $20; //@line 27251
   $613 = $ReallocAsyncCtx6 + 44 | 0; //@line 27252
   HEAP32[$613 >> 2] = $22; //@line 27253
   $614 = $ReallocAsyncCtx6 + 48 | 0; //@line 27254
   HEAP32[$614 >> 2] = $24; //@line 27255
   $615 = $ReallocAsyncCtx6 + 52 | 0; //@line 27256
   HEAP32[$615 >> 2] = $26; //@line 27257
   $616 = $ReallocAsyncCtx6 + 56 | 0; //@line 27258
   HEAP32[$616 >> 2] = $28; //@line 27259
   $617 = $ReallocAsyncCtx6 + 60 | 0; //@line 27260
   HEAP32[$617 >> 2] = $30; //@line 27261
   $618 = $ReallocAsyncCtx6 + 64 | 0; //@line 27262
   HEAP32[$618 >> 2] = $32; //@line 27263
   $619 = $ReallocAsyncCtx6 + 68 | 0; //@line 27264
   HEAP32[$619 >> 2] = $34; //@line 27265
   $620 = $ReallocAsyncCtx6 + 72 | 0; //@line 27266
   HEAP32[$620 >> 2] = $36; //@line 27267
   $621 = $ReallocAsyncCtx6 + 76 | 0; //@line 27268
   HEAP32[$621 >> 2] = $38; //@line 27269
   $622 = $ReallocAsyncCtx6 + 80 | 0; //@line 27270
   HEAP32[$622 >> 2] = $40; //@line 27271
   $623 = $ReallocAsyncCtx6 + 84 | 0; //@line 27272
   HEAP32[$623 >> 2] = $42; //@line 27273
   $624 = $ReallocAsyncCtx6 + 88 | 0; //@line 27274
   HEAP32[$624 >> 2] = $44; //@line 27275
   $625 = $ReallocAsyncCtx6 + 92 | 0; //@line 27276
   HEAP32[$625 >> 2] = $46; //@line 27277
   $626 = $ReallocAsyncCtx6 + 96 | 0; //@line 27278
   HEAP32[$626 >> 2] = $48; //@line 27279
   $627 = $ReallocAsyncCtx6 + 100 | 0; //@line 27280
   HEAP32[$627 >> 2] = $50; //@line 27281
   $628 = $ReallocAsyncCtx6 + 104 | 0; //@line 27282
   HEAP32[$628 >> 2] = $52; //@line 27283
   $629 = $ReallocAsyncCtx6 + 108 | 0; //@line 27284
   HEAP32[$629 >> 2] = $54; //@line 27285
   $630 = $ReallocAsyncCtx6 + 112 | 0; //@line 27286
   HEAP32[$630 >> 2] = $56; //@line 27287
   $631 = $ReallocAsyncCtx6 + 116 | 0; //@line 27288
   HEAP32[$631 >> 2] = $58; //@line 27289
   $632 = $ReallocAsyncCtx6 + 120 | 0; //@line 27290
   HEAP8[$632 >> 0] = $591; //@line 27291
   $633 = $ReallocAsyncCtx6 + 124 | 0; //@line 27292
   HEAP32[$633 >> 2] = $62; //@line 27293
   $634 = $ReallocAsyncCtx6 + 128 | 0; //@line 27294
   HEAP32[$634 >> 2] = $64; //@line 27295
   $635 = $ReallocAsyncCtx6 + 132 | 0; //@line 27296
   HEAP32[$635 >> 2] = $66; //@line 27297
   $636 = $ReallocAsyncCtx6 + 136 | 0; //@line 27298
   HEAP32[$636 >> 2] = $68; //@line 27299
   $637 = $ReallocAsyncCtx6 + 140 | 0; //@line 27300
   HEAP32[$637 >> 2] = $70; //@line 27301
   $638 = $ReallocAsyncCtx6 + 144 | 0; //@line 27302
   HEAP32[$638 >> 2] = $72; //@line 27303
   $639 = $ReallocAsyncCtx6 + 148 | 0; //@line 27304
   HEAP32[$639 >> 2] = $74; //@line 27305
   $640 = $ReallocAsyncCtx6 + 152 | 0; //@line 27306
   HEAP32[$640 >> 2] = $76; //@line 27307
   $641 = $ReallocAsyncCtx6 + 156 | 0; //@line 27308
   HEAP32[$641 >> 2] = $78; //@line 27309
   $642 = $ReallocAsyncCtx6 + 160 | 0; //@line 27310
   HEAP32[$642 >> 2] = $80; //@line 27311
   $643 = $ReallocAsyncCtx6 + 164 | 0; //@line 27312
   HEAP8[$643 >> 0] = $82; //@line 27313
   $644 = $ReallocAsyncCtx6 + 168 | 0; //@line 27314
   HEAP32[$644 >> 2] = $84; //@line 27315
   $645 = $ReallocAsyncCtx6 + 172 | 0; //@line 27316
   HEAP8[$645 >> 0] = $86; //@line 27317
   $646 = $ReallocAsyncCtx6 + 176 | 0; //@line 27318
   HEAP32[$646 >> 2] = $88; //@line 27319
   $647 = $ReallocAsyncCtx6 + 180 | 0; //@line 27320
   HEAP8[$647 >> 0] = $90; //@line 27321
   $648 = $ReallocAsyncCtx6 + 184 | 0; //@line 27322
   HEAP32[$648 >> 2] = $92; //@line 27323
   $649 = $ReallocAsyncCtx6 + 188 | 0; //@line 27324
   HEAP32[$649 >> 2] = $94; //@line 27325
   $650 = $ReallocAsyncCtx6 + 192 | 0; //@line 27326
   HEAP32[$650 >> 2] = $96; //@line 27327
   $651 = $ReallocAsyncCtx6 + 196 | 0; //@line 27328
   HEAP32[$651 >> 2] = $98; //@line 27329
   $652 = $ReallocAsyncCtx6 + 200 | 0; //@line 27330
   HEAP32[$652 >> 2] = $100; //@line 27331
   $653 = $ReallocAsyncCtx6 + 204 | 0; //@line 27332
   HEAP32[$653 >> 2] = $102; //@line 27333
   $654 = $ReallocAsyncCtx6 + 208 | 0; //@line 27334
   HEAP32[$654 >> 2] = $104; //@line 27335
   $655 = $ReallocAsyncCtx6 + 212 | 0; //@line 27336
   HEAP32[$655 >> 2] = $106; //@line 27337
   $656 = $ReallocAsyncCtx6 + 216 | 0; //@line 27338
   HEAP32[$656 >> 2] = $108; //@line 27339
   $657 = $ReallocAsyncCtx6 + 220 | 0; //@line 27340
   HEAP32[$657 >> 2] = $110; //@line 27341
   $658 = $ReallocAsyncCtx6 + 224 | 0; //@line 27342
   HEAP32[$658 >> 2] = $112; //@line 27343
   $659 = $ReallocAsyncCtx6 + 228 | 0; //@line 27344
   HEAP32[$659 >> 2] = $114; //@line 27345
   $660 = $ReallocAsyncCtx6 + 232 | 0; //@line 27346
   HEAP32[$660 >> 2] = $116; //@line 27347
   sp = STACKTOP; //@line 27348
   return;
  }
  HEAP8[___async_retval >> 0] = $602; //@line 27352
  ___async_unwind = 0; //@line 27353
  HEAP32[$ReallocAsyncCtx6 >> 2] = 495; //@line 27354
  $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 27355
  HEAP32[$603 >> 2] = $2; //@line 27356
  $604 = $ReallocAsyncCtx6 + 8 | 0; //@line 27357
  HEAP32[$604 >> 2] = $4; //@line 27358
  $605 = $ReallocAsyncCtx6 + 12 | 0; //@line 27359
  HEAP32[$605 >> 2] = $6; //@line 27360
  $606 = $ReallocAsyncCtx6 + 16 | 0; //@line 27361
  HEAP32[$606 >> 2] = $8; //@line 27362
  $607 = $ReallocAsyncCtx6 + 20 | 0; //@line 27363
  HEAP32[$607 >> 2] = $10; //@line 27364
  $608 = $ReallocAsyncCtx6 + 24 | 0; //@line 27365
  HEAP32[$608 >> 2] = $12; //@line 27366
  $609 = $ReallocAsyncCtx6 + 28 | 0; //@line 27367
  HEAP32[$609 >> 2] = $14; //@line 27368
  $610 = $ReallocAsyncCtx6 + 32 | 0; //@line 27369
  HEAP32[$610 >> 2] = $16; //@line 27370
  $611 = $ReallocAsyncCtx6 + 36 | 0; //@line 27371
  HEAP32[$611 >> 2] = $18; //@line 27372
  $612 = $ReallocAsyncCtx6 + 40 | 0; //@line 27373
  HEAP32[$612 >> 2] = $20; //@line 27374
  $613 = $ReallocAsyncCtx6 + 44 | 0; //@line 27375
  HEAP32[$613 >> 2] = $22; //@line 27376
  $614 = $ReallocAsyncCtx6 + 48 | 0; //@line 27377
  HEAP32[$614 >> 2] = $24; //@line 27378
  $615 = $ReallocAsyncCtx6 + 52 | 0; //@line 27379
  HEAP32[$615 >> 2] = $26; //@line 27380
  $616 = $ReallocAsyncCtx6 + 56 | 0; //@line 27381
  HEAP32[$616 >> 2] = $28; //@line 27382
  $617 = $ReallocAsyncCtx6 + 60 | 0; //@line 27383
  HEAP32[$617 >> 2] = $30; //@line 27384
  $618 = $ReallocAsyncCtx6 + 64 | 0; //@line 27385
  HEAP32[$618 >> 2] = $32; //@line 27386
  $619 = $ReallocAsyncCtx6 + 68 | 0; //@line 27387
  HEAP32[$619 >> 2] = $34; //@line 27388
  $620 = $ReallocAsyncCtx6 + 72 | 0; //@line 27389
  HEAP32[$620 >> 2] = $36; //@line 27390
  $621 = $ReallocAsyncCtx6 + 76 | 0; //@line 27391
  HEAP32[$621 >> 2] = $38; //@line 27392
  $622 = $ReallocAsyncCtx6 + 80 | 0; //@line 27393
  HEAP32[$622 >> 2] = $40; //@line 27394
  $623 = $ReallocAsyncCtx6 + 84 | 0; //@line 27395
  HEAP32[$623 >> 2] = $42; //@line 27396
  $624 = $ReallocAsyncCtx6 + 88 | 0; //@line 27397
  HEAP32[$624 >> 2] = $44; //@line 27398
  $625 = $ReallocAsyncCtx6 + 92 | 0; //@line 27399
  HEAP32[$625 >> 2] = $46; //@line 27400
  $626 = $ReallocAsyncCtx6 + 96 | 0; //@line 27401
  HEAP32[$626 >> 2] = $48; //@line 27402
  $627 = $ReallocAsyncCtx6 + 100 | 0; //@line 27403
  HEAP32[$627 >> 2] = $50; //@line 27404
  $628 = $ReallocAsyncCtx6 + 104 | 0; //@line 27405
  HEAP32[$628 >> 2] = $52; //@line 27406
  $629 = $ReallocAsyncCtx6 + 108 | 0; //@line 27407
  HEAP32[$629 >> 2] = $54; //@line 27408
  $630 = $ReallocAsyncCtx6 + 112 | 0; //@line 27409
  HEAP32[$630 >> 2] = $56; //@line 27410
  $631 = $ReallocAsyncCtx6 + 116 | 0; //@line 27411
  HEAP32[$631 >> 2] = $58; //@line 27412
  $632 = $ReallocAsyncCtx6 + 120 | 0; //@line 27413
  HEAP8[$632 >> 0] = $591; //@line 27414
  $633 = $ReallocAsyncCtx6 + 124 | 0; //@line 27415
  HEAP32[$633 >> 2] = $62; //@line 27416
  $634 = $ReallocAsyncCtx6 + 128 | 0; //@line 27417
  HEAP32[$634 >> 2] = $64; //@line 27418
  $635 = $ReallocAsyncCtx6 + 132 | 0; //@line 27419
  HEAP32[$635 >> 2] = $66; //@line 27420
  $636 = $ReallocAsyncCtx6 + 136 | 0; //@line 27421
  HEAP32[$636 >> 2] = $68; //@line 27422
  $637 = $ReallocAsyncCtx6 + 140 | 0; //@line 27423
  HEAP32[$637 >> 2] = $70; //@line 27424
  $638 = $ReallocAsyncCtx6 + 144 | 0; //@line 27425
  HEAP32[$638 >> 2] = $72; //@line 27426
  $639 = $ReallocAsyncCtx6 + 148 | 0; //@line 27427
  HEAP32[$639 >> 2] = $74; //@line 27428
  $640 = $ReallocAsyncCtx6 + 152 | 0; //@line 27429
  HEAP32[$640 >> 2] = $76; //@line 27430
  $641 = $ReallocAsyncCtx6 + 156 | 0; //@line 27431
  HEAP32[$641 >> 2] = $78; //@line 27432
  $642 = $ReallocAsyncCtx6 + 160 | 0; //@line 27433
  HEAP32[$642 >> 2] = $80; //@line 27434
  $643 = $ReallocAsyncCtx6 + 164 | 0; //@line 27435
  HEAP8[$643 >> 0] = $82; //@line 27436
  $644 = $ReallocAsyncCtx6 + 168 | 0; //@line 27437
  HEAP32[$644 >> 2] = $84; //@line 27438
  $645 = $ReallocAsyncCtx6 + 172 | 0; //@line 27439
  HEAP8[$645 >> 0] = $86; //@line 27440
  $646 = $ReallocAsyncCtx6 + 176 | 0; //@line 27441
  HEAP32[$646 >> 2] = $88; //@line 27442
  $647 = $ReallocAsyncCtx6 + 180 | 0; //@line 27443
  HEAP8[$647 >> 0] = $90; //@line 27444
  $648 = $ReallocAsyncCtx6 + 184 | 0; //@line 27445
  HEAP32[$648 >> 2] = $92; //@line 27446
  $649 = $ReallocAsyncCtx6 + 188 | 0; //@line 27447
  HEAP32[$649 >> 2] = $94; //@line 27448
  $650 = $ReallocAsyncCtx6 + 192 | 0; //@line 27449
  HEAP32[$650 >> 2] = $96; //@line 27450
  $651 = $ReallocAsyncCtx6 + 196 | 0; //@line 27451
  HEAP32[$651 >> 2] = $98; //@line 27452
  $652 = $ReallocAsyncCtx6 + 200 | 0; //@line 27453
  HEAP32[$652 >> 2] = $100; //@line 27454
  $653 = $ReallocAsyncCtx6 + 204 | 0; //@line 27455
  HEAP32[$653 >> 2] = $102; //@line 27456
  $654 = $ReallocAsyncCtx6 + 208 | 0; //@line 27457
  HEAP32[$654 >> 2] = $104; //@line 27458
  $655 = $ReallocAsyncCtx6 + 212 | 0; //@line 27459
  HEAP32[$655 >> 2] = $106; //@line 27460
  $656 = $ReallocAsyncCtx6 + 216 | 0; //@line 27461
  HEAP32[$656 >> 2] = $108; //@line 27462
  $657 = $ReallocAsyncCtx6 + 220 | 0; //@line 27463
  HEAP32[$657 >> 2] = $110; //@line 27464
  $658 = $ReallocAsyncCtx6 + 224 | 0; //@line 27465
  HEAP32[$658 >> 2] = $112; //@line 27466
  $659 = $ReallocAsyncCtx6 + 228 | 0; //@line 27467
  HEAP32[$659 >> 2] = $114; //@line 27468
  $660 = $ReallocAsyncCtx6 + 232 | 0; //@line 27469
  HEAP32[$660 >> 2] = $116; //@line 27470
  sp = STACKTOP; //@line 27471
  return;
 } else if ((label | 0) == 32) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 27476
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_361($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i118 = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $377 = 0, $378 = 0, $38 = 0, $392 = 0, $4 = 0, $40 = 0, $413 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $48 = 0, $483 = 0, $484 = 0, $493 = 0, $497 = 0, $50 = 0, $501 = 0, $506 = 0, $507 = 0, $511 = 0, $515 = 0, $517 = 0, $519 = 0, $52 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $590 = 0, $6 = 0, $60 = 0, $603 = 0, $610 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21551
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21553
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21555
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21557
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21559
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21561
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21563
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21565
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21567
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21569
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21571
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21573
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21575
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21577
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21579
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21581
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 21583
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 21585
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 21587
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 21589
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 21591
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 21593
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 21595
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 21597
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 21599
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 21601
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 21603
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 21605
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 21607
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 21609
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 21611
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 21613
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 21615
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 21617
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 21619
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 21621
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 21623
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 21625
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 21627
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 21629
 $80 = HEAP8[$0 + 160 >> 0] | 0; //@line 21631
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 21633
 $84 = HEAP8[$0 + 168 >> 0] | 0; //@line 21635
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 21637
 $88 = HEAP8[$0 + 176 >> 0] | 0; //@line 21639
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 21641
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 21643
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 21645
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 21647
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 21649
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 21651
 $102 = HEAP8[$0 + 204 >> 0] | 0; //@line 21653
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 21655
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 21657
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 21659
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 21661
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 21663
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 21665
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 21667
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 21669
 $483 = HEAP8[$60 >> 0] | 0; //@line 21673
 $484 = $483 & 255; //@line 21674
 if ((128 - (HEAPU8[$86 >> 0] | 0) - $484 | 0) > 1) {
  HEAP8[$74 + 4 + $484 >> 0] = 7; //@line 21683
  HEAP8[$60 >> 0] = $483 + 2 << 24 >> 24; //@line 21684
  HEAP8[($483 + 1 & 255) + ($74 + 4) >> 0] = $AsyncRetVal; //@line 21685
  HEAP8[$104 >> 0] = 1; //@line 21686
  $$0$i118 = 0; //@line 21687
 } else {
  $$0$i118 = -1010; //@line 21689
 }
 $$0$be = $102; //@line 21691
 $$0107$be = $$0$i118; //@line 21691
 L5 : while (1) {
  if (($$0$be & 255) >= ($84 & 255)) {
   label = 33; //@line 21695
   break;
  }
  $119 = $$0$be + 1 << 24 >> 24; //@line 21699
  switch (HEAP8[$82 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 21704
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 21709
    break L5;
    break;
   }
  case 7:
   {
    label = 18; //@line 21714
    break L5;
    break;
   }
  case 9:
   {
    label = 27; //@line 21719
    break L5;
    break;
   }
  case 10:
   {
    label = 30; //@line 21724
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$48 >> 2] = 0; //@line 21729
    HEAP8[$64 >> 0] = HEAP8[$82 + ($119 & 255) >> 0] | 0; //@line 21734
    HEAP8[$58 >> 0] = HEAP8[$82 + ($$0$be + 2 & 255) >> 0] | 0; //@line 21739
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 21740
    continue L5;
    break;
   }
  case 4:
   {
    $204 = $$0$be + 2 << 24 >> 24; //@line 21745
    $207 = HEAP8[$82 + ($119 & 255) >> 0] | 0; //@line 21748
    HEAP8[$110 >> 0] = $207; //@line 21749
    HEAP16[$92 >> 1] = 1 << ($207 & 255); //@line 21753
    $214 = HEAP8[$60 >> 0] | 0; //@line 21757
    $215 = $214 & 255; //@line 21758
    if ((128 - (HEAPU8[$86 >> 0] | 0) | 0) <= ($215 | 0)) {
     $$0$be = $204; //@line 21761
     $$0107$be = -1010; //@line 21761
     continue L5;
    }
    HEAP8[$60 >> 0] = $214 + 1 << 24 >> 24; //@line 21766
    HEAP8[$74 + 4 + $215 >> 0] = 4; //@line 21767
    HEAP8[$104 >> 0] = 1; //@line 21768
    $$0$be = $204; //@line 21769
    $$0107$be = 0; //@line 21769
    continue L5;
    break;
   }
  case 6:
   {
    $311 = HEAP32[$70 >> 2] | 0; //@line 21774
    if ($311 | 0) {
     label = 13; //@line 21777
     break L5;
    }
    $377 = HEAP8[$60 >> 0] | 0; //@line 21783
    $378 = $377 & 255; //@line 21784
    if ((128 - (HEAPU8[$86 >> 0] | 0) - $378 | 0) <= 2) {
     $$0$be = $119; //@line 21788
     $$0107$be = -1010; //@line 21788
     continue L5;
    }
    HEAP8[$74 + 4 + $378 >> 0] = 6; //@line 21793
    HEAP8[($377 + 1 & 255) + ($74 + 4) >> 0] = -1; //@line 21797
    HEAP8[$60 >> 0] = $377 + 3 << 24 >> 24; //@line 21799
    HEAP8[($377 + 2 & 255) + ($74 + 4) >> 0] = $80; //@line 21802
    HEAP8[$104 >> 0] = 1; //@line 21803
    $$0$be = $119; //@line 21804
    $$0107$be = 0; //@line 21804
    continue L5;
    break;
   }
  case 8:
   {
    $493 = $$0$be + 2 << 24 >> 24; //@line 21809
    $497 = HEAP8[$82 + ($119 & 255) >> 0] & 15; //@line 21813
    $501 = ($497 + ($497 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 21818
    HEAP32[$38 >> 2] = $501; //@line 21819
    HEAP32[$6 >> 2] = $501 + 1e3; //@line 21821
    $506 = HEAP8[$60 >> 0] | 0; //@line 21825
    $507 = $506 & 255; //@line 21826
    if ((128 - (HEAPU8[$86 >> 0] | 0) | 0) <= ($507 | 0)) {
     $$0$be = $493; //@line 21829
     $$0107$be = -1010; //@line 21829
     continue L5;
    }
    HEAP8[$60 >> 0] = $506 + 1 << 24 >> 24; //@line 21834
    HEAP8[$74 + 4 + $507 >> 0] = 8; //@line 21835
    HEAP8[$42 >> 0] = 1; //@line 21836
    HEAP8[$104 >> 0] = 1; //@line 21837
    $$0$be = $493; //@line 21838
    $$0107$be = 0; //@line 21838
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $119; //@line 21843
    $$0107$be = -1013; //@line 21843
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$116 >> 0] = 0; //@line 21849
  HEAP8[$28 >> 0] = 0; //@line 21850
  HEAP8[$18 >> 0] = 0; //@line 21851
  HEAP8[$10 >> 0] = 0; //@line 21852
  $130 = $119 & 255; //@line 21853
  $131 = $130 + -1 | 0; //@line 21854
  HEAP32[$72 >> 2] = $82 + $131; //@line 21856
  HEAP8[$100 >> 0] = $46 - $131; //@line 21859
  HEAP8[$108 >> 0] = HEAP8[$90 >> 0] | 0; //@line 21861
  HEAP8[$8 >> 0] = HEAP8[$16 >> 0] | 0; //@line 21863
  HEAP8[$20 >> 0] = HEAP8[$30 >> 0] | 0; //@line 21865
  HEAP8[$34 >> 0] = HEAP8[$44 >> 0] | 0; //@line 21867
  HEAP8[$68 >> 0] = HEAP8[$52 >> 0] | 0; //@line 21869
  $142 = HEAP32[(HEAP32[$76 >> 2] | 0) + 36 >> 2] | 0; //@line 21872
  $ReallocAsyncCtx = _emscripten_realloc_async_context(240) | 0; //@line 21873
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($62, $112, $116, $28, $18, $10) | 0; //@line 21874
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 21877
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 21878
   HEAP32[$144 >> 2] = $2; //@line 21879
   $145 = $ReallocAsyncCtx + 8 | 0; //@line 21880
   HEAP32[$145 >> 2] = $4; //@line 21881
   $146 = $ReallocAsyncCtx + 12 | 0; //@line 21882
   HEAP32[$146 >> 2] = $6; //@line 21883
   $147 = $ReallocAsyncCtx + 16 | 0; //@line 21884
   HEAP32[$147 >> 2] = $8; //@line 21885
   $148 = $ReallocAsyncCtx + 20 | 0; //@line 21886
   HEAP32[$148 >> 2] = $10; //@line 21887
   $149 = $ReallocAsyncCtx + 24 | 0; //@line 21888
   HEAP32[$149 >> 2] = $12; //@line 21889
   $150 = $ReallocAsyncCtx + 28 | 0; //@line 21890
   HEAP32[$150 >> 2] = $14; //@line 21891
   $151 = $ReallocAsyncCtx + 32 | 0; //@line 21892
   HEAP32[$151 >> 2] = $16; //@line 21893
   $152 = $ReallocAsyncCtx + 36 | 0; //@line 21894
   HEAP32[$152 >> 2] = $18; //@line 21895
   $153 = $ReallocAsyncCtx + 40 | 0; //@line 21896
   HEAP32[$153 >> 2] = $20; //@line 21897
   $154 = $ReallocAsyncCtx + 44 | 0; //@line 21898
   HEAP32[$154 >> 2] = $22; //@line 21899
   $155 = $ReallocAsyncCtx + 48 | 0; //@line 21900
   HEAP32[$155 >> 2] = $24; //@line 21901
   $156 = $ReallocAsyncCtx + 52 | 0; //@line 21902
   HEAP32[$156 >> 2] = $26; //@line 21903
   $157 = $ReallocAsyncCtx + 56 | 0; //@line 21904
   HEAP32[$157 >> 2] = $28; //@line 21905
   $158 = $ReallocAsyncCtx + 60 | 0; //@line 21906
   HEAP32[$158 >> 2] = $30; //@line 21907
   $159 = $ReallocAsyncCtx + 64 | 0; //@line 21908
   HEAP32[$159 >> 2] = $32; //@line 21909
   $160 = $ReallocAsyncCtx + 68 | 0; //@line 21910
   HEAP32[$160 >> 2] = $34; //@line 21911
   $161 = $ReallocAsyncCtx + 72 | 0; //@line 21912
   HEAP32[$161 >> 2] = $36; //@line 21913
   $162 = $ReallocAsyncCtx + 76 | 0; //@line 21914
   HEAP32[$162 >> 2] = $38; //@line 21915
   $163 = $ReallocAsyncCtx + 80 | 0; //@line 21916
   HEAP32[$163 >> 2] = $40; //@line 21917
   $164 = $ReallocAsyncCtx + 84 | 0; //@line 21918
   HEAP32[$164 >> 2] = $42; //@line 21919
   $165 = $ReallocAsyncCtx + 88 | 0; //@line 21920
   HEAP32[$165 >> 2] = $44; //@line 21921
   $166 = $ReallocAsyncCtx + 92 | 0; //@line 21922
   HEAP32[$166 >> 2] = $46; //@line 21923
   $167 = $ReallocAsyncCtx + 96 | 0; //@line 21924
   HEAP32[$167 >> 2] = $48; //@line 21925
   $168 = $ReallocAsyncCtx + 100 | 0; //@line 21926
   HEAP32[$168 >> 2] = $50; //@line 21927
   $169 = $ReallocAsyncCtx + 104 | 0; //@line 21928
   HEAP32[$169 >> 2] = $52; //@line 21929
   $170 = $ReallocAsyncCtx + 108 | 0; //@line 21930
   HEAP32[$170 >> 2] = $54; //@line 21931
   $171 = $ReallocAsyncCtx + 112 | 0; //@line 21932
   HEAP32[$171 >> 2] = $56; //@line 21933
   $172 = $ReallocAsyncCtx + 116 | 0; //@line 21934
   HEAP32[$172 >> 2] = $58; //@line 21935
   $173 = $ReallocAsyncCtx + 120 | 0; //@line 21936
   HEAP32[$173 >> 2] = $60; //@line 21937
   $174 = $ReallocAsyncCtx + 124 | 0; //@line 21938
   HEAP32[$174 >> 2] = $62; //@line 21939
   $175 = $ReallocAsyncCtx + 128 | 0; //@line 21940
   HEAP32[$175 >> 2] = $64; //@line 21941
   $176 = $ReallocAsyncCtx + 132 | 0; //@line 21942
   HEAP32[$176 >> 2] = $66; //@line 21943
   $177 = $ReallocAsyncCtx + 136 | 0; //@line 21944
   HEAP32[$177 >> 2] = $68; //@line 21945
   $178 = $ReallocAsyncCtx + 140 | 0; //@line 21946
   HEAP32[$178 >> 2] = $70; //@line 21947
   $179 = $ReallocAsyncCtx + 144 | 0; //@line 21948
   HEAP32[$179 >> 2] = $72; //@line 21949
   $180 = $ReallocAsyncCtx + 148 | 0; //@line 21950
   HEAP32[$180 >> 2] = $74; //@line 21951
   $181 = $ReallocAsyncCtx + 152 | 0; //@line 21952
   HEAP32[$181 >> 2] = $76; //@line 21953
   $182 = $ReallocAsyncCtx + 156 | 0; //@line 21954
   HEAP32[$182 >> 2] = $130; //@line 21955
   $183 = $ReallocAsyncCtx + 160 | 0; //@line 21956
   HEAP32[$183 >> 2] = $78; //@line 21957
   $184 = $ReallocAsyncCtx + 164 | 0; //@line 21958
   HEAP8[$184 >> 0] = $80; //@line 21959
   $185 = $ReallocAsyncCtx + 168 | 0; //@line 21960
   HEAP32[$185 >> 2] = $82; //@line 21961
   $186 = $ReallocAsyncCtx + 172 | 0; //@line 21962
   HEAP32[$186 >> 2] = $$0107$be; //@line 21963
   $187 = $ReallocAsyncCtx + 176 | 0; //@line 21964
   HEAP8[$187 >> 0] = $84; //@line 21965
   $188 = $ReallocAsyncCtx + 180 | 0; //@line 21966
   HEAP32[$188 >> 2] = $86; //@line 21967
   $189 = $ReallocAsyncCtx + 184 | 0; //@line 21968
   HEAP8[$189 >> 0] = $88; //@line 21969
   $190 = $ReallocAsyncCtx + 188 | 0; //@line 21970
   HEAP32[$190 >> 2] = $90; //@line 21971
   $191 = $ReallocAsyncCtx + 192 | 0; //@line 21972
   HEAP32[$191 >> 2] = $92; //@line 21973
   $192 = $ReallocAsyncCtx + 196 | 0; //@line 21974
   HEAP32[$192 >> 2] = $94; //@line 21975
   $193 = $ReallocAsyncCtx + 200 | 0; //@line 21976
   HEAP32[$193 >> 2] = $96; //@line 21977
   $194 = $ReallocAsyncCtx + 204 | 0; //@line 21978
   HEAP32[$194 >> 2] = $98; //@line 21979
   $195 = $ReallocAsyncCtx + 208 | 0; //@line 21980
   HEAP32[$195 >> 2] = $100; //@line 21981
   $196 = $ReallocAsyncCtx + 212 | 0; //@line 21982
   HEAP32[$196 >> 2] = $104; //@line 21983
   $197 = $ReallocAsyncCtx + 216 | 0; //@line 21984
   HEAP32[$197 >> 2] = $106; //@line 21985
   $198 = $ReallocAsyncCtx + 220 | 0; //@line 21986
   HEAP32[$198 >> 2] = $108; //@line 21987
   $199 = $ReallocAsyncCtx + 224 | 0; //@line 21988
   HEAP32[$199 >> 2] = $110; //@line 21989
   $200 = $ReallocAsyncCtx + 228 | 0; //@line 21990
   HEAP32[$200 >> 2] = $112; //@line 21991
   $201 = $ReallocAsyncCtx + 232 | 0; //@line 21992
   HEAP32[$201 >> 2] = $114; //@line 21993
   $202 = $ReallocAsyncCtx + 236 | 0; //@line 21994
   HEAP32[$202 >> 2] = $116; //@line 21995
   sp = STACKTOP; //@line 21996
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 22000
  ___async_unwind = 0; //@line 22001
  HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 22002
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 22003
  HEAP32[$144 >> 2] = $2; //@line 22004
  $145 = $ReallocAsyncCtx + 8 | 0; //@line 22005
  HEAP32[$145 >> 2] = $4; //@line 22006
  $146 = $ReallocAsyncCtx + 12 | 0; //@line 22007
  HEAP32[$146 >> 2] = $6; //@line 22008
  $147 = $ReallocAsyncCtx + 16 | 0; //@line 22009
  HEAP32[$147 >> 2] = $8; //@line 22010
  $148 = $ReallocAsyncCtx + 20 | 0; //@line 22011
  HEAP32[$148 >> 2] = $10; //@line 22012
  $149 = $ReallocAsyncCtx + 24 | 0; //@line 22013
  HEAP32[$149 >> 2] = $12; //@line 22014
  $150 = $ReallocAsyncCtx + 28 | 0; //@line 22015
  HEAP32[$150 >> 2] = $14; //@line 22016
  $151 = $ReallocAsyncCtx + 32 | 0; //@line 22017
  HEAP32[$151 >> 2] = $16; //@line 22018
  $152 = $ReallocAsyncCtx + 36 | 0; //@line 22019
  HEAP32[$152 >> 2] = $18; //@line 22020
  $153 = $ReallocAsyncCtx + 40 | 0; //@line 22021
  HEAP32[$153 >> 2] = $20; //@line 22022
  $154 = $ReallocAsyncCtx + 44 | 0; //@line 22023
  HEAP32[$154 >> 2] = $22; //@line 22024
  $155 = $ReallocAsyncCtx + 48 | 0; //@line 22025
  HEAP32[$155 >> 2] = $24; //@line 22026
  $156 = $ReallocAsyncCtx + 52 | 0; //@line 22027
  HEAP32[$156 >> 2] = $26; //@line 22028
  $157 = $ReallocAsyncCtx + 56 | 0; //@line 22029
  HEAP32[$157 >> 2] = $28; //@line 22030
  $158 = $ReallocAsyncCtx + 60 | 0; //@line 22031
  HEAP32[$158 >> 2] = $30; //@line 22032
  $159 = $ReallocAsyncCtx + 64 | 0; //@line 22033
  HEAP32[$159 >> 2] = $32; //@line 22034
  $160 = $ReallocAsyncCtx + 68 | 0; //@line 22035
  HEAP32[$160 >> 2] = $34; //@line 22036
  $161 = $ReallocAsyncCtx + 72 | 0; //@line 22037
  HEAP32[$161 >> 2] = $36; //@line 22038
  $162 = $ReallocAsyncCtx + 76 | 0; //@line 22039
  HEAP32[$162 >> 2] = $38; //@line 22040
  $163 = $ReallocAsyncCtx + 80 | 0; //@line 22041
  HEAP32[$163 >> 2] = $40; //@line 22042
  $164 = $ReallocAsyncCtx + 84 | 0; //@line 22043
  HEAP32[$164 >> 2] = $42; //@line 22044
  $165 = $ReallocAsyncCtx + 88 | 0; //@line 22045
  HEAP32[$165 >> 2] = $44; //@line 22046
  $166 = $ReallocAsyncCtx + 92 | 0; //@line 22047
  HEAP32[$166 >> 2] = $46; //@line 22048
  $167 = $ReallocAsyncCtx + 96 | 0; //@line 22049
  HEAP32[$167 >> 2] = $48; //@line 22050
  $168 = $ReallocAsyncCtx + 100 | 0; //@line 22051
  HEAP32[$168 >> 2] = $50; //@line 22052
  $169 = $ReallocAsyncCtx + 104 | 0; //@line 22053
  HEAP32[$169 >> 2] = $52; //@line 22054
  $170 = $ReallocAsyncCtx + 108 | 0; //@line 22055
  HEAP32[$170 >> 2] = $54; //@line 22056
  $171 = $ReallocAsyncCtx + 112 | 0; //@line 22057
  HEAP32[$171 >> 2] = $56; //@line 22058
  $172 = $ReallocAsyncCtx + 116 | 0; //@line 22059
  HEAP32[$172 >> 2] = $58; //@line 22060
  $173 = $ReallocAsyncCtx + 120 | 0; //@line 22061
  HEAP32[$173 >> 2] = $60; //@line 22062
  $174 = $ReallocAsyncCtx + 124 | 0; //@line 22063
  HEAP32[$174 >> 2] = $62; //@line 22064
  $175 = $ReallocAsyncCtx + 128 | 0; //@line 22065
  HEAP32[$175 >> 2] = $64; //@line 22066
  $176 = $ReallocAsyncCtx + 132 | 0; //@line 22067
  HEAP32[$176 >> 2] = $66; //@line 22068
  $177 = $ReallocAsyncCtx + 136 | 0; //@line 22069
  HEAP32[$177 >> 2] = $68; //@line 22070
  $178 = $ReallocAsyncCtx + 140 | 0; //@line 22071
  HEAP32[$178 >> 2] = $70; //@line 22072
  $179 = $ReallocAsyncCtx + 144 | 0; //@line 22073
  HEAP32[$179 >> 2] = $72; //@line 22074
  $180 = $ReallocAsyncCtx + 148 | 0; //@line 22075
  HEAP32[$180 >> 2] = $74; //@line 22076
  $181 = $ReallocAsyncCtx + 152 | 0; //@line 22077
  HEAP32[$181 >> 2] = $76; //@line 22078
  $182 = $ReallocAsyncCtx + 156 | 0; //@line 22079
  HEAP32[$182 >> 2] = $130; //@line 22080
  $183 = $ReallocAsyncCtx + 160 | 0; //@line 22081
  HEAP32[$183 >> 2] = $78; //@line 22082
  $184 = $ReallocAsyncCtx + 164 | 0; //@line 22083
  HEAP8[$184 >> 0] = $80; //@line 22084
  $185 = $ReallocAsyncCtx + 168 | 0; //@line 22085
  HEAP32[$185 >> 2] = $82; //@line 22086
  $186 = $ReallocAsyncCtx + 172 | 0; //@line 22087
  HEAP32[$186 >> 2] = $$0107$be; //@line 22088
  $187 = $ReallocAsyncCtx + 176 | 0; //@line 22089
  HEAP8[$187 >> 0] = $84; //@line 22090
  $188 = $ReallocAsyncCtx + 180 | 0; //@line 22091
  HEAP32[$188 >> 2] = $86; //@line 22092
  $189 = $ReallocAsyncCtx + 184 | 0; //@line 22093
  HEAP8[$189 >> 0] = $88; //@line 22094
  $190 = $ReallocAsyncCtx + 188 | 0; //@line 22095
  HEAP32[$190 >> 2] = $90; //@line 22096
  $191 = $ReallocAsyncCtx + 192 | 0; //@line 22097
  HEAP32[$191 >> 2] = $92; //@line 22098
  $192 = $ReallocAsyncCtx + 196 | 0; //@line 22099
  HEAP32[$192 >> 2] = $94; //@line 22100
  $193 = $ReallocAsyncCtx + 200 | 0; //@line 22101
  HEAP32[$193 >> 2] = $96; //@line 22102
  $194 = $ReallocAsyncCtx + 204 | 0; //@line 22103
  HEAP32[$194 >> 2] = $98; //@line 22104
  $195 = $ReallocAsyncCtx + 208 | 0; //@line 22105
  HEAP32[$195 >> 2] = $100; //@line 22106
  $196 = $ReallocAsyncCtx + 212 | 0; //@line 22107
  HEAP32[$196 >> 2] = $104; //@line 22108
  $197 = $ReallocAsyncCtx + 216 | 0; //@line 22109
  HEAP32[$197 >> 2] = $106; //@line 22110
  $198 = $ReallocAsyncCtx + 220 | 0; //@line 22111
  HEAP32[$198 >> 2] = $108; //@line 22112
  $199 = $ReallocAsyncCtx + 224 | 0; //@line 22113
  HEAP32[$199 >> 2] = $110; //@line 22114
  $200 = $ReallocAsyncCtx + 228 | 0; //@line 22115
  HEAP32[$200 >> 2] = $112; //@line 22116
  $201 = $ReallocAsyncCtx + 232 | 0; //@line 22117
  HEAP32[$201 >> 2] = $114; //@line 22118
  $202 = $ReallocAsyncCtx + 236 | 0; //@line 22119
  HEAP32[$202 >> 2] = $116; //@line 22120
  sp = STACKTOP; //@line 22121
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$82 + ($119 & 255) >> 0] | 0; //@line 22127
  HEAP8[$26 >> 0] = ($221 & 255) >>> 4 & 7; //@line 22132
  HEAP8[$98 >> 0] = $221 & 15; //@line 22134
  $240 = $$0$be + 5 << 24 >> 24; //@line 22148
  HEAP32[$32 >> 2] = (HEAPU8[$82 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$82 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$82 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 22156
  $250 = HEAP32[(HEAP32[$2 >> 2] | 0) + 40 >> 2] | 0; //@line 22159
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(236) | 0; //@line 22160
  $251 = FUNCTION_TABLE_iii[$250 & 15]($62, $12) | 0; //@line 22161
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 22164
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 22165
   HEAP32[$252 >> 2] = $2; //@line 22166
   $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 22167
   HEAP32[$253 >> 2] = $4; //@line 22168
   $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 22169
   HEAP32[$254 >> 2] = $6; //@line 22170
   $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 22171
   HEAP32[$255 >> 2] = $8; //@line 22172
   $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 22173
   HEAP32[$256 >> 2] = $10; //@line 22174
   $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 22175
   HEAP32[$257 >> 2] = $12; //@line 22176
   $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 22177
   HEAP32[$258 >> 2] = $14; //@line 22178
   $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 22179
   HEAP32[$259 >> 2] = $16; //@line 22180
   $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 22181
   HEAP32[$260 >> 2] = $18; //@line 22182
   $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 22183
   HEAP32[$261 >> 2] = $20; //@line 22184
   $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 22185
   HEAP32[$262 >> 2] = $22; //@line 22186
   $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 22187
   HEAP32[$263 >> 2] = $24; //@line 22188
   $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 22189
   HEAP32[$264 >> 2] = $26; //@line 22190
   $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 22191
   HEAP32[$265 >> 2] = $28; //@line 22192
   $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 22193
   HEAP32[$266 >> 2] = $30; //@line 22194
   $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 22195
   HEAP32[$267 >> 2] = $32; //@line 22196
   $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 22197
   HEAP32[$268 >> 2] = $34; //@line 22198
   $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 22199
   HEAP32[$269 >> 2] = $36; //@line 22200
   $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 22201
   HEAP32[$270 >> 2] = $38; //@line 22202
   $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 22203
   HEAP32[$271 >> 2] = $40; //@line 22204
   $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 22205
   HEAP32[$272 >> 2] = $42; //@line 22206
   $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 22207
   HEAP32[$273 >> 2] = $44; //@line 22208
   $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 22209
   HEAP32[$274 >> 2] = $46; //@line 22210
   $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 22211
   HEAP32[$275 >> 2] = $48; //@line 22212
   $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 22213
   HEAP32[$276 >> 2] = $50; //@line 22214
   $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 22215
   HEAP32[$277 >> 2] = $52; //@line 22216
   $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 22217
   HEAP32[$278 >> 2] = $54; //@line 22218
   $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 22219
   HEAP32[$279 >> 2] = $56; //@line 22220
   $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 22221
   HEAP32[$280 >> 2] = $58; //@line 22222
   $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 22223
   HEAP32[$281 >> 2] = $60; //@line 22224
   $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 22225
   HEAP32[$282 >> 2] = $62; //@line 22226
   $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 22227
   HEAP32[$283 >> 2] = $64; //@line 22228
   $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 22229
   HEAP32[$284 >> 2] = $66; //@line 22230
   $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 22231
   HEAP32[$285 >> 2] = $68; //@line 22232
   $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 22233
   HEAP32[$286 >> 2] = $70; //@line 22234
   $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 22235
   HEAP32[$287 >> 2] = $72; //@line 22236
   $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 22237
   HEAP32[$288 >> 2] = $74; //@line 22238
   $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 22239
   HEAP32[$289 >> 2] = $76; //@line 22240
   $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 22241
   HEAP32[$290 >> 2] = $78; //@line 22242
   $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 22243
   HEAP8[$291 >> 0] = $80; //@line 22244
   $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 22245
   HEAP32[$292 >> 2] = $82; //@line 22246
   $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 22247
   HEAP8[$293 >> 0] = $84; //@line 22248
   $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 22249
   HEAP32[$294 >> 2] = $86; //@line 22250
   $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 22251
   HEAP8[$295 >> 0] = $88; //@line 22252
   $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 22253
   HEAP32[$296 >> 2] = $90; //@line 22254
   $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 22255
   HEAP32[$297 >> 2] = $92; //@line 22256
   $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 22257
   HEAP32[$298 >> 2] = $94; //@line 22258
   $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 22259
   HEAP32[$299 >> 2] = $96; //@line 22260
   $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 22261
   HEAP32[$300 >> 2] = $98; //@line 22262
   $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 22263
   HEAP32[$301 >> 2] = $100; //@line 22264
   $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 22265
   HEAP32[$302 >> 2] = $104; //@line 22266
   $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 22267
   HEAP32[$303 >> 2] = $106; //@line 22268
   $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 22269
   HEAP32[$304 >> 2] = $108; //@line 22270
   $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 22271
   HEAP32[$305 >> 2] = $110; //@line 22272
   $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 22273
   HEAP32[$306 >> 2] = $112; //@line 22274
   $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 22275
   HEAP32[$307 >> 2] = $114; //@line 22276
   $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 22277
   HEAP8[$308 >> 0] = $240; //@line 22278
   $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 22279
   HEAP32[$309 >> 2] = $116; //@line 22280
   sp = STACKTOP; //@line 22281
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 22285
  ___async_unwind = 0; //@line 22286
  HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 22287
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 22288
  HEAP32[$252 >> 2] = $2; //@line 22289
  $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 22290
  HEAP32[$253 >> 2] = $4; //@line 22291
  $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 22292
  HEAP32[$254 >> 2] = $6; //@line 22293
  $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 22294
  HEAP32[$255 >> 2] = $8; //@line 22295
  $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 22296
  HEAP32[$256 >> 2] = $10; //@line 22297
  $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 22298
  HEAP32[$257 >> 2] = $12; //@line 22299
  $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 22300
  HEAP32[$258 >> 2] = $14; //@line 22301
  $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 22302
  HEAP32[$259 >> 2] = $16; //@line 22303
  $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 22304
  HEAP32[$260 >> 2] = $18; //@line 22305
  $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 22306
  HEAP32[$261 >> 2] = $20; //@line 22307
  $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 22308
  HEAP32[$262 >> 2] = $22; //@line 22309
  $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 22310
  HEAP32[$263 >> 2] = $24; //@line 22311
  $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 22312
  HEAP32[$264 >> 2] = $26; //@line 22313
  $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 22314
  HEAP32[$265 >> 2] = $28; //@line 22315
  $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 22316
  HEAP32[$266 >> 2] = $30; //@line 22317
  $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 22318
  HEAP32[$267 >> 2] = $32; //@line 22319
  $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 22320
  HEAP32[$268 >> 2] = $34; //@line 22321
  $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 22322
  HEAP32[$269 >> 2] = $36; //@line 22323
  $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 22324
  HEAP32[$270 >> 2] = $38; //@line 22325
  $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 22326
  HEAP32[$271 >> 2] = $40; //@line 22327
  $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 22328
  HEAP32[$272 >> 2] = $42; //@line 22329
  $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 22330
  HEAP32[$273 >> 2] = $44; //@line 22331
  $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 22332
  HEAP32[$274 >> 2] = $46; //@line 22333
  $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 22334
  HEAP32[$275 >> 2] = $48; //@line 22335
  $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 22336
  HEAP32[$276 >> 2] = $50; //@line 22337
  $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 22338
  HEAP32[$277 >> 2] = $52; //@line 22339
  $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 22340
  HEAP32[$278 >> 2] = $54; //@line 22341
  $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 22342
  HEAP32[$279 >> 2] = $56; //@line 22343
  $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 22344
  HEAP32[$280 >> 2] = $58; //@line 22345
  $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 22346
  HEAP32[$281 >> 2] = $60; //@line 22347
  $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 22348
  HEAP32[$282 >> 2] = $62; //@line 22349
  $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 22350
  HEAP32[$283 >> 2] = $64; //@line 22351
  $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 22352
  HEAP32[$284 >> 2] = $66; //@line 22353
  $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 22354
  HEAP32[$285 >> 2] = $68; //@line 22355
  $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 22356
  HEAP32[$286 >> 2] = $70; //@line 22357
  $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 22358
  HEAP32[$287 >> 2] = $72; //@line 22359
  $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 22360
  HEAP32[$288 >> 2] = $74; //@line 22361
  $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 22362
  HEAP32[$289 >> 2] = $76; //@line 22363
  $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 22364
  HEAP32[$290 >> 2] = $78; //@line 22365
  $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 22366
  HEAP8[$291 >> 0] = $80; //@line 22367
  $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 22368
  HEAP32[$292 >> 2] = $82; //@line 22369
  $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 22370
  HEAP8[$293 >> 0] = $84; //@line 22371
  $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 22372
  HEAP32[$294 >> 2] = $86; //@line 22373
  $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 22374
  HEAP8[$295 >> 0] = $88; //@line 22375
  $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 22376
  HEAP32[$296 >> 2] = $90; //@line 22377
  $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 22378
  HEAP32[$297 >> 2] = $92; //@line 22379
  $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 22380
  HEAP32[$298 >> 2] = $94; //@line 22381
  $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 22382
  HEAP32[$299 >> 2] = $96; //@line 22383
  $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 22384
  HEAP32[$300 >> 2] = $98; //@line 22385
  $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 22386
  HEAP32[$301 >> 2] = $100; //@line 22387
  $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 22388
  HEAP32[$302 >> 2] = $104; //@line 22389
  $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 22390
  HEAP32[$303 >> 2] = $106; //@line 22391
  $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 22392
  HEAP32[$304 >> 2] = $108; //@line 22393
  $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 22394
  HEAP32[$305 >> 2] = $110; //@line 22395
  $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 22396
  HEAP32[$306 >> 2] = $112; //@line 22397
  $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 22398
  HEAP32[$307 >> 2] = $114; //@line 22399
  $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 22400
  HEAP8[$308 >> 0] = $240; //@line 22401
  $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 22402
  HEAP32[$309 >> 2] = $116; //@line 22403
  sp = STACKTOP; //@line 22404
  return;
 } else if ((label | 0) == 13) {
  $313 = HEAP32[$311 >> 2] | 0; //@line 22408
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(236) | 0; //@line 22409
  $314 = FUNCTION_TABLE_ii[$313 & 15]($66) | 0; //@line 22410
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 22413
   $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 22414
   HEAP32[$315 >> 2] = $2; //@line 22415
   $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 22416
   HEAP32[$316 >> 2] = $4; //@line 22417
   $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 22418
   HEAP32[$317 >> 2] = $6; //@line 22419
   $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 22420
   HEAP32[$318 >> 2] = $8; //@line 22421
   $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 22422
   HEAP32[$319 >> 2] = $10; //@line 22423
   $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 22424
   HEAP32[$320 >> 2] = $12; //@line 22425
   $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 22426
   HEAP32[$321 >> 2] = $14; //@line 22427
   $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 22428
   HEAP32[$322 >> 2] = $16; //@line 22429
   $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 22430
   HEAP32[$323 >> 2] = $18; //@line 22431
   $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 22432
   HEAP32[$324 >> 2] = $20; //@line 22433
   $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 22434
   HEAP32[$325 >> 2] = $22; //@line 22435
   $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 22436
   HEAP32[$326 >> 2] = $24; //@line 22437
   $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 22438
   HEAP32[$327 >> 2] = $26; //@line 22439
   $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 22440
   HEAP32[$328 >> 2] = $28; //@line 22441
   $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 22442
   HEAP32[$329 >> 2] = $30; //@line 22443
   $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 22444
   HEAP32[$330 >> 2] = $32; //@line 22445
   $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 22446
   HEAP32[$331 >> 2] = $34; //@line 22447
   $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 22448
   HEAP32[$332 >> 2] = $36; //@line 22449
   $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 22450
   HEAP32[$333 >> 2] = $38; //@line 22451
   $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 22452
   HEAP32[$334 >> 2] = $40; //@line 22453
   $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 22454
   HEAP32[$335 >> 2] = $42; //@line 22455
   $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 22456
   HEAP32[$336 >> 2] = $44; //@line 22457
   $337 = $ReallocAsyncCtx3 + 92 | 0; //@line 22458
   HEAP32[$337 >> 2] = $46; //@line 22459
   $338 = $ReallocAsyncCtx3 + 96 | 0; //@line 22460
   HEAP32[$338 >> 2] = $48; //@line 22461
   $339 = $ReallocAsyncCtx3 + 100 | 0; //@line 22462
   HEAP32[$339 >> 2] = $50; //@line 22463
   $340 = $ReallocAsyncCtx3 + 104 | 0; //@line 22464
   HEAP32[$340 >> 2] = $52; //@line 22465
   $341 = $ReallocAsyncCtx3 + 108 | 0; //@line 22466
   HEAP32[$341 >> 2] = $54; //@line 22467
   $342 = $ReallocAsyncCtx3 + 112 | 0; //@line 22468
   HEAP32[$342 >> 2] = $56; //@line 22469
   $343 = $ReallocAsyncCtx3 + 116 | 0; //@line 22470
   HEAP32[$343 >> 2] = $58; //@line 22471
   $344 = $ReallocAsyncCtx3 + 120 | 0; //@line 22472
   HEAP32[$344 >> 2] = $60; //@line 22473
   $345 = $ReallocAsyncCtx3 + 124 | 0; //@line 22474
   HEAP32[$345 >> 2] = $62; //@line 22475
   $346 = $ReallocAsyncCtx3 + 128 | 0; //@line 22476
   HEAP32[$346 >> 2] = $64; //@line 22477
   $347 = $ReallocAsyncCtx3 + 132 | 0; //@line 22478
   HEAP32[$347 >> 2] = $66; //@line 22479
   $348 = $ReallocAsyncCtx3 + 136 | 0; //@line 22480
   HEAP32[$348 >> 2] = $68; //@line 22481
   $349 = $ReallocAsyncCtx3 + 140 | 0; //@line 22482
   HEAP32[$349 >> 2] = $70; //@line 22483
   $350 = $ReallocAsyncCtx3 + 144 | 0; //@line 22484
   HEAP32[$350 >> 2] = $72; //@line 22485
   $351 = $ReallocAsyncCtx3 + 148 | 0; //@line 22486
   HEAP32[$351 >> 2] = $74; //@line 22487
   $352 = $ReallocAsyncCtx3 + 152 | 0; //@line 22488
   HEAP32[$352 >> 2] = $76; //@line 22489
   $353 = $ReallocAsyncCtx3 + 156 | 0; //@line 22490
   HEAP32[$353 >> 2] = $78; //@line 22491
   $354 = $ReallocAsyncCtx3 + 160 | 0; //@line 22492
   HEAP8[$354 >> 0] = $80; //@line 22493
   $355 = $ReallocAsyncCtx3 + 164 | 0; //@line 22494
   HEAP32[$355 >> 2] = $82; //@line 22495
   $356 = $ReallocAsyncCtx3 + 168 | 0; //@line 22496
   HEAP8[$356 >> 0] = $84; //@line 22497
   $357 = $ReallocAsyncCtx3 + 172 | 0; //@line 22498
   HEAP32[$357 >> 2] = $86; //@line 22499
   $358 = $ReallocAsyncCtx3 + 176 | 0; //@line 22500
   HEAP8[$358 >> 0] = $88; //@line 22501
   $359 = $ReallocAsyncCtx3 + 180 | 0; //@line 22502
   HEAP32[$359 >> 2] = $90; //@line 22503
   $360 = $ReallocAsyncCtx3 + 184 | 0; //@line 22504
   HEAP32[$360 >> 2] = $92; //@line 22505
   $361 = $ReallocAsyncCtx3 + 188 | 0; //@line 22506
   HEAP32[$361 >> 2] = $94; //@line 22507
   $362 = $ReallocAsyncCtx3 + 192 | 0; //@line 22508
   HEAP32[$362 >> 2] = $96; //@line 22509
   $363 = $ReallocAsyncCtx3 + 196 | 0; //@line 22510
   HEAP32[$363 >> 2] = $98; //@line 22511
   $364 = $ReallocAsyncCtx3 + 200 | 0; //@line 22512
   HEAP32[$364 >> 2] = $100; //@line 22513
   $365 = $ReallocAsyncCtx3 + 204 | 0; //@line 22514
   HEAP32[$365 >> 2] = $104; //@line 22515
   $366 = $ReallocAsyncCtx3 + 208 | 0; //@line 22516
   HEAP8[$366 >> 0] = $119; //@line 22517
   $367 = $ReallocAsyncCtx3 + 212 | 0; //@line 22518
   HEAP32[$367 >> 2] = $106; //@line 22519
   $368 = $ReallocAsyncCtx3 + 216 | 0; //@line 22520
   HEAP32[$368 >> 2] = $108; //@line 22521
   $369 = $ReallocAsyncCtx3 + 220 | 0; //@line 22522
   HEAP32[$369 >> 2] = $110; //@line 22523
   $370 = $ReallocAsyncCtx3 + 224 | 0; //@line 22524
   HEAP32[$370 >> 2] = $112; //@line 22525
   $371 = $ReallocAsyncCtx3 + 228 | 0; //@line 22526
   HEAP32[$371 >> 2] = $114; //@line 22527
   $372 = $ReallocAsyncCtx3 + 232 | 0; //@line 22528
   HEAP32[$372 >> 2] = $116; //@line 22529
   sp = STACKTOP; //@line 22530
   return;
  }
  HEAP8[___async_retval >> 0] = $314; //@line 22534
  ___async_unwind = 0; //@line 22535
  HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 22536
  $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 22537
  HEAP32[$315 >> 2] = $2; //@line 22538
  $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 22539
  HEAP32[$316 >> 2] = $4; //@line 22540
  $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 22541
  HEAP32[$317 >> 2] = $6; //@line 22542
  $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 22543
  HEAP32[$318 >> 2] = $8; //@line 22544
  $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 22545
  HEAP32[$319 >> 2] = $10; //@line 22546
  $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 22547
  HEAP32[$320 >> 2] = $12; //@line 22548
  $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 22549
  HEAP32[$321 >> 2] = $14; //@line 22550
  $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 22551
  HEAP32[$322 >> 2] = $16; //@line 22552
  $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 22553
  HEAP32[$323 >> 2] = $18; //@line 22554
  $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 22555
  HEAP32[$324 >> 2] = $20; //@line 22556
  $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 22557
  HEAP32[$325 >> 2] = $22; //@line 22558
  $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 22559
  HEAP32[$326 >> 2] = $24; //@line 22560
  $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 22561
  HEAP32[$327 >> 2] = $26; //@line 22562
  $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 22563
  HEAP32[$328 >> 2] = $28; //@line 22564
  $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 22565
  HEAP32[$329 >> 2] = $30; //@line 22566
  $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 22567
  HEAP32[$330 >> 2] = $32; //@line 22568
  $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 22569
  HEAP32[$331 >> 2] = $34; //@line 22570
  $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 22571
  HEAP32[$332 >> 2] = $36; //@line 22572
  $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 22573
  HEAP32[$333 >> 2] = $38; //@line 22574
  $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 22575
  HEAP32[$334 >> 2] = $40; //@line 22576
  $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 22577
  HEAP32[$335 >> 2] = $42; //@line 22578
  $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 22579
  HEAP32[$336 >> 2] = $44; //@line 22580
  $337 = $ReallocAsyncCtx3 + 92 | 0; //@line 22581
  HEAP32[$337 >> 2] = $46; //@line 22582
  $338 = $ReallocAsyncCtx3 + 96 | 0; //@line 22583
  HEAP32[$338 >> 2] = $48; //@line 22584
  $339 = $ReallocAsyncCtx3 + 100 | 0; //@line 22585
  HEAP32[$339 >> 2] = $50; //@line 22586
  $340 = $ReallocAsyncCtx3 + 104 | 0; //@line 22587
  HEAP32[$340 >> 2] = $52; //@line 22588
  $341 = $ReallocAsyncCtx3 + 108 | 0; //@line 22589
  HEAP32[$341 >> 2] = $54; //@line 22590
  $342 = $ReallocAsyncCtx3 + 112 | 0; //@line 22591
  HEAP32[$342 >> 2] = $56; //@line 22592
  $343 = $ReallocAsyncCtx3 + 116 | 0; //@line 22593
  HEAP32[$343 >> 2] = $58; //@line 22594
  $344 = $ReallocAsyncCtx3 + 120 | 0; //@line 22595
  HEAP32[$344 >> 2] = $60; //@line 22596
  $345 = $ReallocAsyncCtx3 + 124 | 0; //@line 22597
  HEAP32[$345 >> 2] = $62; //@line 22598
  $346 = $ReallocAsyncCtx3 + 128 | 0; //@line 22599
  HEAP32[$346 >> 2] = $64; //@line 22600
  $347 = $ReallocAsyncCtx3 + 132 | 0; //@line 22601
  HEAP32[$347 >> 2] = $66; //@line 22602
  $348 = $ReallocAsyncCtx3 + 136 | 0; //@line 22603
  HEAP32[$348 >> 2] = $68; //@line 22604
  $349 = $ReallocAsyncCtx3 + 140 | 0; //@line 22605
  HEAP32[$349 >> 2] = $70; //@line 22606
  $350 = $ReallocAsyncCtx3 + 144 | 0; //@line 22607
  HEAP32[$350 >> 2] = $72; //@line 22608
  $351 = $ReallocAsyncCtx3 + 148 | 0; //@line 22609
  HEAP32[$351 >> 2] = $74; //@line 22610
  $352 = $ReallocAsyncCtx3 + 152 | 0; //@line 22611
  HEAP32[$352 >> 2] = $76; //@line 22612
  $353 = $ReallocAsyncCtx3 + 156 | 0; //@line 22613
  HEAP32[$353 >> 2] = $78; //@line 22614
  $354 = $ReallocAsyncCtx3 + 160 | 0; //@line 22615
  HEAP8[$354 >> 0] = $80; //@line 22616
  $355 = $ReallocAsyncCtx3 + 164 | 0; //@line 22617
  HEAP32[$355 >> 2] = $82; //@line 22618
  $356 = $ReallocAsyncCtx3 + 168 | 0; //@line 22619
  HEAP8[$356 >> 0] = $84; //@line 22620
  $357 = $ReallocAsyncCtx3 + 172 | 0; //@line 22621
  HEAP32[$357 >> 2] = $86; //@line 22622
  $358 = $ReallocAsyncCtx3 + 176 | 0; //@line 22623
  HEAP8[$358 >> 0] = $88; //@line 22624
  $359 = $ReallocAsyncCtx3 + 180 | 0; //@line 22625
  HEAP32[$359 >> 2] = $90; //@line 22626
  $360 = $ReallocAsyncCtx3 + 184 | 0; //@line 22627
  HEAP32[$360 >> 2] = $92; //@line 22628
  $361 = $ReallocAsyncCtx3 + 188 | 0; //@line 22629
  HEAP32[$361 >> 2] = $94; //@line 22630
  $362 = $ReallocAsyncCtx3 + 192 | 0; //@line 22631
  HEAP32[$362 >> 2] = $96; //@line 22632
  $363 = $ReallocAsyncCtx3 + 196 | 0; //@line 22633
  HEAP32[$363 >> 2] = $98; //@line 22634
  $364 = $ReallocAsyncCtx3 + 200 | 0; //@line 22635
  HEAP32[$364 >> 2] = $100; //@line 22636
  $365 = $ReallocAsyncCtx3 + 204 | 0; //@line 22637
  HEAP32[$365 >> 2] = $104; //@line 22638
  $366 = $ReallocAsyncCtx3 + 208 | 0; //@line 22639
  HEAP8[$366 >> 0] = $119; //@line 22640
  $367 = $ReallocAsyncCtx3 + 212 | 0; //@line 22641
  HEAP32[$367 >> 2] = $106; //@line 22642
  $368 = $ReallocAsyncCtx3 + 216 | 0; //@line 22643
  HEAP32[$368 >> 2] = $108; //@line 22644
  $369 = $ReallocAsyncCtx3 + 220 | 0; //@line 22645
  HEAP32[$369 >> 2] = $110; //@line 22646
  $370 = $ReallocAsyncCtx3 + 224 | 0; //@line 22647
  HEAP32[$370 >> 2] = $112; //@line 22648
  $371 = $ReallocAsyncCtx3 + 228 | 0; //@line 22649
  HEAP32[$371 >> 2] = $114; //@line 22650
  $372 = $ReallocAsyncCtx3 + 232 | 0; //@line 22651
  HEAP32[$372 >> 2] = $116; //@line 22652
  sp = STACKTOP; //@line 22653
  return;
 } else if ((label | 0) == 18) {
  $392 = HEAP8[$82 + ($119 & 255) >> 0] | 0; //@line 22660
  HEAP32[$114 >> 2] = (HEAPU8[$82 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$82 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$82 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 22681
  HEAP32[$94 >> 2] = 0; //@line 22682
  $413 = $$0$be + 6 << 24 >> 24; //@line 22683
  HEAP8[$96 >> 0] = HEAP8[$82 + ($$0$be + 5 & 255) >> 0] | 0; //@line 22687
  $419 = HEAP32[(HEAP32[$22 >> 2] | 0) + 8 >> 2] | 0; //@line 22690
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(236) | 0; //@line 22691
  $420 = FUNCTION_TABLE_iiii[$419 & 31]($62, $392, $4) | 0; //@line 22692
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 22695
   $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 22696
   HEAP32[$421 >> 2] = $2; //@line 22697
   $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 22698
   HEAP32[$422 >> 2] = $4; //@line 22699
   $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 22700
   HEAP32[$423 >> 2] = $6; //@line 22701
   $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 22702
   HEAP32[$424 >> 2] = $8; //@line 22703
   $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 22704
   HEAP32[$425 >> 2] = $10; //@line 22705
   $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 22706
   HEAP32[$426 >> 2] = $12; //@line 22707
   $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 22708
   HEAP32[$427 >> 2] = $14; //@line 22709
   $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 22710
   HEAP32[$428 >> 2] = $16; //@line 22711
   $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 22712
   HEAP32[$429 >> 2] = $18; //@line 22713
   $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 22714
   HEAP32[$430 >> 2] = $20; //@line 22715
   $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 22716
   HEAP32[$431 >> 2] = $22; //@line 22717
   $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 22718
   HEAP32[$432 >> 2] = $24; //@line 22719
   $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 22720
   HEAP32[$433 >> 2] = $26; //@line 22721
   $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 22722
   HEAP32[$434 >> 2] = $28; //@line 22723
   $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 22724
   HEAP32[$435 >> 2] = $30; //@line 22725
   $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 22726
   HEAP32[$436 >> 2] = $32; //@line 22727
   $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 22728
   HEAP32[$437 >> 2] = $34; //@line 22729
   $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 22730
   HEAP32[$438 >> 2] = $36; //@line 22731
   $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 22732
   HEAP32[$439 >> 2] = $38; //@line 22733
   $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 22734
   HEAP32[$440 >> 2] = $40; //@line 22735
   $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 22736
   HEAP32[$441 >> 2] = $42; //@line 22737
   $442 = $ReallocAsyncCtx4 + 88 | 0; //@line 22738
   HEAP32[$442 >> 2] = $44; //@line 22739
   $443 = $ReallocAsyncCtx4 + 92 | 0; //@line 22740
   HEAP32[$443 >> 2] = $46; //@line 22741
   $444 = $ReallocAsyncCtx4 + 96 | 0; //@line 22742
   HEAP32[$444 >> 2] = $48; //@line 22743
   $445 = $ReallocAsyncCtx4 + 100 | 0; //@line 22744
   HEAP32[$445 >> 2] = $50; //@line 22745
   $446 = $ReallocAsyncCtx4 + 104 | 0; //@line 22746
   HEAP32[$446 >> 2] = $52; //@line 22747
   $447 = $ReallocAsyncCtx4 + 108 | 0; //@line 22748
   HEAP32[$447 >> 2] = $54; //@line 22749
   $448 = $ReallocAsyncCtx4 + 112 | 0; //@line 22750
   HEAP32[$448 >> 2] = $56; //@line 22751
   $449 = $ReallocAsyncCtx4 + 116 | 0; //@line 22752
   HEAP32[$449 >> 2] = $58; //@line 22753
   $450 = $ReallocAsyncCtx4 + 120 | 0; //@line 22754
   HEAP32[$450 >> 2] = $60; //@line 22755
   $451 = $ReallocAsyncCtx4 + 124 | 0; //@line 22756
   HEAP32[$451 >> 2] = $62; //@line 22757
   $452 = $ReallocAsyncCtx4 + 128 | 0; //@line 22758
   HEAP32[$452 >> 2] = $64; //@line 22759
   $453 = $ReallocAsyncCtx4 + 132 | 0; //@line 22760
   HEAP32[$453 >> 2] = $66; //@line 22761
   $454 = $ReallocAsyncCtx4 + 136 | 0; //@line 22762
   HEAP32[$454 >> 2] = $68; //@line 22763
   $455 = $ReallocAsyncCtx4 + 140 | 0; //@line 22764
   HEAP32[$455 >> 2] = $70; //@line 22765
   $456 = $ReallocAsyncCtx4 + 144 | 0; //@line 22766
   HEAP32[$456 >> 2] = $72; //@line 22767
   $457 = $ReallocAsyncCtx4 + 148 | 0; //@line 22768
   HEAP32[$457 >> 2] = $74; //@line 22769
   $458 = $ReallocAsyncCtx4 + 152 | 0; //@line 22770
   HEAP32[$458 >> 2] = $76; //@line 22771
   $459 = $ReallocAsyncCtx4 + 156 | 0; //@line 22772
   HEAP32[$459 >> 2] = $78; //@line 22773
   $460 = $ReallocAsyncCtx4 + 160 | 0; //@line 22774
   HEAP8[$460 >> 0] = $80; //@line 22775
   $461 = $ReallocAsyncCtx4 + 164 | 0; //@line 22776
   HEAP32[$461 >> 2] = $82; //@line 22777
   $462 = $ReallocAsyncCtx4 + 168 | 0; //@line 22778
   HEAP8[$462 >> 0] = $84; //@line 22779
   $463 = $ReallocAsyncCtx4 + 172 | 0; //@line 22780
   HEAP32[$463 >> 2] = $86; //@line 22781
   $464 = $ReallocAsyncCtx4 + 176 | 0; //@line 22782
   HEAP8[$464 >> 0] = $88; //@line 22783
   $465 = $ReallocAsyncCtx4 + 180 | 0; //@line 22784
   HEAP32[$465 >> 2] = $90; //@line 22785
   $466 = $ReallocAsyncCtx4 + 184 | 0; //@line 22786
   HEAP32[$466 >> 2] = $92; //@line 22787
   $467 = $ReallocAsyncCtx4 + 188 | 0; //@line 22788
   HEAP32[$467 >> 2] = $94; //@line 22789
   $468 = $ReallocAsyncCtx4 + 192 | 0; //@line 22790
   HEAP32[$468 >> 2] = $96; //@line 22791
   $469 = $ReallocAsyncCtx4 + 196 | 0; //@line 22792
   HEAP32[$469 >> 2] = $98; //@line 22793
   $470 = $ReallocAsyncCtx4 + 200 | 0; //@line 22794
   HEAP32[$470 >> 2] = $100; //@line 22795
   $471 = $ReallocAsyncCtx4 + 204 | 0; //@line 22796
   HEAP8[$471 >> 0] = $413; //@line 22797
   $472 = $ReallocAsyncCtx4 + 208 | 0; //@line 22798
   HEAP32[$472 >> 2] = $104; //@line 22799
   $473 = $ReallocAsyncCtx4 + 212 | 0; //@line 22800
   HEAP32[$473 >> 2] = $106; //@line 22801
   $474 = $ReallocAsyncCtx4 + 216 | 0; //@line 22802
   HEAP32[$474 >> 2] = $108; //@line 22803
   $475 = $ReallocAsyncCtx4 + 220 | 0; //@line 22804
   HEAP32[$475 >> 2] = $110; //@line 22805
   $476 = $ReallocAsyncCtx4 + 224 | 0; //@line 22806
   HEAP32[$476 >> 2] = $112; //@line 22807
   $477 = $ReallocAsyncCtx4 + 228 | 0; //@line 22808
   HEAP32[$477 >> 2] = $114; //@line 22809
   $478 = $ReallocAsyncCtx4 + 232 | 0; //@line 22810
   HEAP32[$478 >> 2] = $116; //@line 22811
   sp = STACKTOP; //@line 22812
   return;
  }
  HEAP8[___async_retval >> 0] = $420; //@line 22816
  ___async_unwind = 0; //@line 22817
  HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 22818
  $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 22819
  HEAP32[$421 >> 2] = $2; //@line 22820
  $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 22821
  HEAP32[$422 >> 2] = $4; //@line 22822
  $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 22823
  HEAP32[$423 >> 2] = $6; //@line 22824
  $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 22825
  HEAP32[$424 >> 2] = $8; //@line 22826
  $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 22827
  HEAP32[$425 >> 2] = $10; //@line 22828
  $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 22829
  HEAP32[$426 >> 2] = $12; //@line 22830
  $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 22831
  HEAP32[$427 >> 2] = $14; //@line 22832
  $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 22833
  HEAP32[$428 >> 2] = $16; //@line 22834
  $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 22835
  HEAP32[$429 >> 2] = $18; //@line 22836
  $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 22837
  HEAP32[$430 >> 2] = $20; //@line 22838
  $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 22839
  HEAP32[$431 >> 2] = $22; //@line 22840
  $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 22841
  HEAP32[$432 >> 2] = $24; //@line 22842
  $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 22843
  HEAP32[$433 >> 2] = $26; //@line 22844
  $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 22845
  HEAP32[$434 >> 2] = $28; //@line 22846
  $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 22847
  HEAP32[$435 >> 2] = $30; //@line 22848
  $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 22849
  HEAP32[$436 >> 2] = $32; //@line 22850
  $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 22851
  HEAP32[$437 >> 2] = $34; //@line 22852
  $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 22853
  HEAP32[$438 >> 2] = $36; //@line 22854
  $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 22855
  HEAP32[$439 >> 2] = $38; //@line 22856
  $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 22857
  HEAP32[$440 >> 2] = $40; //@line 22858
  $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 22859
  HEAP32[$441 >> 2] = $42; //@line 22860
  $442 = $ReallocAsyncCtx4 + 88 | 0; //@line 22861
  HEAP32[$442 >> 2] = $44; //@line 22862
  $443 = $ReallocAsyncCtx4 + 92 | 0; //@line 22863
  HEAP32[$443 >> 2] = $46; //@line 22864
  $444 = $ReallocAsyncCtx4 + 96 | 0; //@line 22865
  HEAP32[$444 >> 2] = $48; //@line 22866
  $445 = $ReallocAsyncCtx4 + 100 | 0; //@line 22867
  HEAP32[$445 >> 2] = $50; //@line 22868
  $446 = $ReallocAsyncCtx4 + 104 | 0; //@line 22869
  HEAP32[$446 >> 2] = $52; //@line 22870
  $447 = $ReallocAsyncCtx4 + 108 | 0; //@line 22871
  HEAP32[$447 >> 2] = $54; //@line 22872
  $448 = $ReallocAsyncCtx4 + 112 | 0; //@line 22873
  HEAP32[$448 >> 2] = $56; //@line 22874
  $449 = $ReallocAsyncCtx4 + 116 | 0; //@line 22875
  HEAP32[$449 >> 2] = $58; //@line 22876
  $450 = $ReallocAsyncCtx4 + 120 | 0; //@line 22877
  HEAP32[$450 >> 2] = $60; //@line 22878
  $451 = $ReallocAsyncCtx4 + 124 | 0; //@line 22879
  HEAP32[$451 >> 2] = $62; //@line 22880
  $452 = $ReallocAsyncCtx4 + 128 | 0; //@line 22881
  HEAP32[$452 >> 2] = $64; //@line 22882
  $453 = $ReallocAsyncCtx4 + 132 | 0; //@line 22883
  HEAP32[$453 >> 2] = $66; //@line 22884
  $454 = $ReallocAsyncCtx4 + 136 | 0; //@line 22885
  HEAP32[$454 >> 2] = $68; //@line 22886
  $455 = $ReallocAsyncCtx4 + 140 | 0; //@line 22887
  HEAP32[$455 >> 2] = $70; //@line 22888
  $456 = $ReallocAsyncCtx4 + 144 | 0; //@line 22889
  HEAP32[$456 >> 2] = $72; //@line 22890
  $457 = $ReallocAsyncCtx4 + 148 | 0; //@line 22891
  HEAP32[$457 >> 2] = $74; //@line 22892
  $458 = $ReallocAsyncCtx4 + 152 | 0; //@line 22893
  HEAP32[$458 >> 2] = $76; //@line 22894
  $459 = $ReallocAsyncCtx4 + 156 | 0; //@line 22895
  HEAP32[$459 >> 2] = $78; //@line 22896
  $460 = $ReallocAsyncCtx4 + 160 | 0; //@line 22897
  HEAP8[$460 >> 0] = $80; //@line 22898
  $461 = $ReallocAsyncCtx4 + 164 | 0; //@line 22899
  HEAP32[$461 >> 2] = $82; //@line 22900
  $462 = $ReallocAsyncCtx4 + 168 | 0; //@line 22901
  HEAP8[$462 >> 0] = $84; //@line 22902
  $463 = $ReallocAsyncCtx4 + 172 | 0; //@line 22903
  HEAP32[$463 >> 2] = $86; //@line 22904
  $464 = $ReallocAsyncCtx4 + 176 | 0; //@line 22905
  HEAP8[$464 >> 0] = $88; //@line 22906
  $465 = $ReallocAsyncCtx4 + 180 | 0; //@line 22907
  HEAP32[$465 >> 2] = $90; //@line 22908
  $466 = $ReallocAsyncCtx4 + 184 | 0; //@line 22909
  HEAP32[$466 >> 2] = $92; //@line 22910
  $467 = $ReallocAsyncCtx4 + 188 | 0; //@line 22911
  HEAP32[$467 >> 2] = $94; //@line 22912
  $468 = $ReallocAsyncCtx4 + 192 | 0; //@line 22913
  HEAP32[$468 >> 2] = $96; //@line 22914
  $469 = $ReallocAsyncCtx4 + 196 | 0; //@line 22915
  HEAP32[$469 >> 2] = $98; //@line 22916
  $470 = $ReallocAsyncCtx4 + 200 | 0; //@line 22917
  HEAP32[$470 >> 2] = $100; //@line 22918
  $471 = $ReallocAsyncCtx4 + 204 | 0; //@line 22919
  HEAP8[$471 >> 0] = $413; //@line 22920
  $472 = $ReallocAsyncCtx4 + 208 | 0; //@line 22921
  HEAP32[$472 >> 2] = $104; //@line 22922
  $473 = $ReallocAsyncCtx4 + 212 | 0; //@line 22923
  HEAP32[$473 >> 2] = $106; //@line 22924
  $474 = $ReallocAsyncCtx4 + 216 | 0; //@line 22925
  HEAP32[$474 >> 2] = $108; //@line 22926
  $475 = $ReallocAsyncCtx4 + 220 | 0; //@line 22927
  HEAP32[$475 >> 2] = $110; //@line 22928
  $476 = $ReallocAsyncCtx4 + 224 | 0; //@line 22929
  HEAP32[$476 >> 2] = $112; //@line 22930
  $477 = $ReallocAsyncCtx4 + 228 | 0; //@line 22931
  HEAP32[$477 >> 2] = $114; //@line 22932
  $478 = $ReallocAsyncCtx4 + 232 | 0; //@line 22933
  HEAP32[$478 >> 2] = $116; //@line 22934
  sp = STACKTOP; //@line 22935
  return;
 } else if ((label | 0) == 27) {
  $511 = $$0$be + 2 << 24 >> 24; //@line 22939
  $515 = HEAPU8[$82 + ($119 & 255) >> 0] | 0; //@line 22943
  $517 = $515 >>> 5 & 1; //@line 22946
  $519 = $515 >>> 4 & 1; //@line 22949
  $522 = HEAP32[(HEAP32[$24 >> 2] | 0) + 44 >> 2] | 0; //@line 22952
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(252) | 0; //@line 22953
  $523 = FUNCTION_TABLE_iiii[$522 & 31]($62, $519, $517) | 0; //@line 22954
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 22957
   $524 = $ReallocAsyncCtx5 + 4 | 0; //@line 22958
   HEAP32[$524 >> 2] = $2; //@line 22959
   $525 = $ReallocAsyncCtx5 + 8 | 0; //@line 22960
   HEAP32[$525 >> 2] = $4; //@line 22961
   $526 = $ReallocAsyncCtx5 + 12 | 0; //@line 22962
   HEAP32[$526 >> 2] = $6; //@line 22963
   $527 = $ReallocAsyncCtx5 + 16 | 0; //@line 22964
   HEAP32[$527 >> 2] = $8; //@line 22965
   $528 = $ReallocAsyncCtx5 + 20 | 0; //@line 22966
   HEAP32[$528 >> 2] = $10; //@line 22967
   $529 = $ReallocAsyncCtx5 + 24 | 0; //@line 22968
   HEAP32[$529 >> 2] = $12; //@line 22969
   $530 = $ReallocAsyncCtx5 + 28 | 0; //@line 22970
   HEAP32[$530 >> 2] = $14; //@line 22971
   $531 = $ReallocAsyncCtx5 + 32 | 0; //@line 22972
   HEAP32[$531 >> 2] = $16; //@line 22973
   $532 = $ReallocAsyncCtx5 + 36 | 0; //@line 22974
   HEAP32[$532 >> 2] = $18; //@line 22975
   $533 = $ReallocAsyncCtx5 + 40 | 0; //@line 22976
   HEAP32[$533 >> 2] = $20; //@line 22977
   $534 = $ReallocAsyncCtx5 + 44 | 0; //@line 22978
   HEAP32[$534 >> 2] = $22; //@line 22979
   $535 = $ReallocAsyncCtx5 + 48 | 0; //@line 22980
   HEAP32[$535 >> 2] = $24; //@line 22981
   $536 = $ReallocAsyncCtx5 + 52 | 0; //@line 22982
   HEAP32[$536 >> 2] = $26; //@line 22983
   $537 = $ReallocAsyncCtx5 + 56 | 0; //@line 22984
   HEAP8[$537 >> 0] = $519; //@line 22985
   $538 = $ReallocAsyncCtx5 + 60 | 0; //@line 22986
   HEAP32[$538 >> 2] = $28; //@line 22987
   $539 = $ReallocAsyncCtx5 + 64 | 0; //@line 22988
   HEAP32[$539 >> 2] = $30; //@line 22989
   $540 = $ReallocAsyncCtx5 + 68 | 0; //@line 22990
   HEAP32[$540 >> 2] = $32; //@line 22991
   $541 = $ReallocAsyncCtx5 + 72 | 0; //@line 22992
   HEAP32[$541 >> 2] = $34; //@line 22993
   $542 = $ReallocAsyncCtx5 + 76 | 0; //@line 22994
   HEAP32[$542 >> 2] = $36; //@line 22995
   $543 = $ReallocAsyncCtx5 + 80 | 0; //@line 22996
   HEAP32[$543 >> 2] = $38; //@line 22997
   $544 = $ReallocAsyncCtx5 + 84 | 0; //@line 22998
   HEAP32[$544 >> 2] = $40; //@line 22999
   $545 = $ReallocAsyncCtx5 + 88 | 0; //@line 23000
   HEAP32[$545 >> 2] = $42; //@line 23001
   $546 = $ReallocAsyncCtx5 + 92 | 0; //@line 23002
   HEAP32[$546 >> 2] = $44; //@line 23003
   $547 = $ReallocAsyncCtx5 + 96 | 0; //@line 23004
   HEAP32[$547 >> 2] = $46; //@line 23005
   $548 = $ReallocAsyncCtx5 + 100 | 0; //@line 23006
   HEAP32[$548 >> 2] = $515; //@line 23007
   $549 = $ReallocAsyncCtx5 + 104 | 0; //@line 23008
   HEAP32[$549 >> 2] = $48; //@line 23009
   $550 = $ReallocAsyncCtx5 + 108 | 0; //@line 23010
   HEAP32[$550 >> 2] = $50; //@line 23011
   $551 = $ReallocAsyncCtx5 + 112 | 0; //@line 23012
   HEAP32[$551 >> 2] = $52; //@line 23013
   $552 = $ReallocAsyncCtx5 + 116 | 0; //@line 23014
   HEAP32[$552 >> 2] = $54; //@line 23015
   $553 = $ReallocAsyncCtx5 + 120 | 0; //@line 23016
   HEAP32[$553 >> 2] = $56; //@line 23017
   $554 = $ReallocAsyncCtx5 + 124 | 0; //@line 23018
   HEAP32[$554 >> 2] = $58; //@line 23019
   $555 = $ReallocAsyncCtx5 + 128 | 0; //@line 23020
   HEAP32[$555 >> 2] = $60; //@line 23021
   $556 = $ReallocAsyncCtx5 + 132 | 0; //@line 23022
   HEAP32[$556 >> 2] = $62; //@line 23023
   $557 = $ReallocAsyncCtx5 + 136 | 0; //@line 23024
   HEAP32[$557 >> 2] = $64; //@line 23025
   $558 = $ReallocAsyncCtx5 + 140 | 0; //@line 23026
   HEAP8[$558 >> 0] = $517; //@line 23027
   $559 = $ReallocAsyncCtx5 + 144 | 0; //@line 23028
   HEAP32[$559 >> 2] = $66; //@line 23029
   $560 = $ReallocAsyncCtx5 + 148 | 0; //@line 23030
   HEAP32[$560 >> 2] = $68; //@line 23031
   $561 = $ReallocAsyncCtx5 + 152 | 0; //@line 23032
   HEAP32[$561 >> 2] = $70; //@line 23033
   $562 = $ReallocAsyncCtx5 + 156 | 0; //@line 23034
   HEAP32[$562 >> 2] = $72; //@line 23035
   $563 = $ReallocAsyncCtx5 + 160 | 0; //@line 23036
   HEAP32[$563 >> 2] = $74; //@line 23037
   $564 = $ReallocAsyncCtx5 + 164 | 0; //@line 23038
   HEAP32[$564 >> 2] = $76; //@line 23039
   $565 = $ReallocAsyncCtx5 + 168 | 0; //@line 23040
   HEAP32[$565 >> 2] = $78; //@line 23041
   $566 = $ReallocAsyncCtx5 + 172 | 0; //@line 23042
   HEAP8[$566 >> 0] = $80; //@line 23043
   $567 = $ReallocAsyncCtx5 + 176 | 0; //@line 23044
   HEAP32[$567 >> 2] = $82; //@line 23045
   $568 = $ReallocAsyncCtx5 + 180 | 0; //@line 23046
   HEAP8[$568 >> 0] = $84; //@line 23047
   $569 = $ReallocAsyncCtx5 + 184 | 0; //@line 23048
   HEAP32[$569 >> 2] = $86; //@line 23049
   $570 = $ReallocAsyncCtx5 + 188 | 0; //@line 23050
   HEAP8[$570 >> 0] = $88; //@line 23051
   $571 = $ReallocAsyncCtx5 + 192 | 0; //@line 23052
   HEAP32[$571 >> 2] = $$0107$be; //@line 23053
   $572 = $ReallocAsyncCtx5 + 196 | 0; //@line 23054
   HEAP32[$572 >> 2] = $90; //@line 23055
   $573 = $ReallocAsyncCtx5 + 200 | 0; //@line 23056
   HEAP32[$573 >> 2] = $92; //@line 23057
   $574 = $ReallocAsyncCtx5 + 204 | 0; //@line 23058
   HEAP32[$574 >> 2] = $94; //@line 23059
   $575 = $ReallocAsyncCtx5 + 208 | 0; //@line 23060
   HEAP32[$575 >> 2] = $96; //@line 23061
   $576 = $ReallocAsyncCtx5 + 212 | 0; //@line 23062
   HEAP32[$576 >> 2] = $98; //@line 23063
   $577 = $ReallocAsyncCtx5 + 216 | 0; //@line 23064
   HEAP32[$577 >> 2] = $100; //@line 23065
   $578 = $ReallocAsyncCtx5 + 220 | 0; //@line 23066
   HEAP8[$578 >> 0] = $511; //@line 23067
   $579 = $ReallocAsyncCtx5 + 224 | 0; //@line 23068
   HEAP32[$579 >> 2] = $104; //@line 23069
   $580 = $ReallocAsyncCtx5 + 228 | 0; //@line 23070
   HEAP32[$580 >> 2] = $106; //@line 23071
   $581 = $ReallocAsyncCtx5 + 232 | 0; //@line 23072
   HEAP32[$581 >> 2] = $108; //@line 23073
   $582 = $ReallocAsyncCtx5 + 236 | 0; //@line 23074
   HEAP32[$582 >> 2] = $110; //@line 23075
   $583 = $ReallocAsyncCtx5 + 240 | 0; //@line 23076
   HEAP32[$583 >> 2] = $112; //@line 23077
   $584 = $ReallocAsyncCtx5 + 244 | 0; //@line 23078
   HEAP32[$584 >> 2] = $114; //@line 23079
   $585 = $ReallocAsyncCtx5 + 248 | 0; //@line 23080
   HEAP32[$585 >> 2] = $116; //@line 23081
   sp = STACKTOP; //@line 23082
   return;
  }
  HEAP8[___async_retval >> 0] = $523 & 1; //@line 23087
  ___async_unwind = 0; //@line 23088
  HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 23089
  $524 = $ReallocAsyncCtx5 + 4 | 0; //@line 23090
  HEAP32[$524 >> 2] = $2; //@line 23091
  $525 = $ReallocAsyncCtx5 + 8 | 0; //@line 23092
  HEAP32[$525 >> 2] = $4; //@line 23093
  $526 = $ReallocAsyncCtx5 + 12 | 0; //@line 23094
  HEAP32[$526 >> 2] = $6; //@line 23095
  $527 = $ReallocAsyncCtx5 + 16 | 0; //@line 23096
  HEAP32[$527 >> 2] = $8; //@line 23097
  $528 = $ReallocAsyncCtx5 + 20 | 0; //@line 23098
  HEAP32[$528 >> 2] = $10; //@line 23099
  $529 = $ReallocAsyncCtx5 + 24 | 0; //@line 23100
  HEAP32[$529 >> 2] = $12; //@line 23101
  $530 = $ReallocAsyncCtx5 + 28 | 0; //@line 23102
  HEAP32[$530 >> 2] = $14; //@line 23103
  $531 = $ReallocAsyncCtx5 + 32 | 0; //@line 23104
  HEAP32[$531 >> 2] = $16; //@line 23105
  $532 = $ReallocAsyncCtx5 + 36 | 0; //@line 23106
  HEAP32[$532 >> 2] = $18; //@line 23107
  $533 = $ReallocAsyncCtx5 + 40 | 0; //@line 23108
  HEAP32[$533 >> 2] = $20; //@line 23109
  $534 = $ReallocAsyncCtx5 + 44 | 0; //@line 23110
  HEAP32[$534 >> 2] = $22; //@line 23111
  $535 = $ReallocAsyncCtx5 + 48 | 0; //@line 23112
  HEAP32[$535 >> 2] = $24; //@line 23113
  $536 = $ReallocAsyncCtx5 + 52 | 0; //@line 23114
  HEAP32[$536 >> 2] = $26; //@line 23115
  $537 = $ReallocAsyncCtx5 + 56 | 0; //@line 23116
  HEAP8[$537 >> 0] = $519; //@line 23117
  $538 = $ReallocAsyncCtx5 + 60 | 0; //@line 23118
  HEAP32[$538 >> 2] = $28; //@line 23119
  $539 = $ReallocAsyncCtx5 + 64 | 0; //@line 23120
  HEAP32[$539 >> 2] = $30; //@line 23121
  $540 = $ReallocAsyncCtx5 + 68 | 0; //@line 23122
  HEAP32[$540 >> 2] = $32; //@line 23123
  $541 = $ReallocAsyncCtx5 + 72 | 0; //@line 23124
  HEAP32[$541 >> 2] = $34; //@line 23125
  $542 = $ReallocAsyncCtx5 + 76 | 0; //@line 23126
  HEAP32[$542 >> 2] = $36; //@line 23127
  $543 = $ReallocAsyncCtx5 + 80 | 0; //@line 23128
  HEAP32[$543 >> 2] = $38; //@line 23129
  $544 = $ReallocAsyncCtx5 + 84 | 0; //@line 23130
  HEAP32[$544 >> 2] = $40; //@line 23131
  $545 = $ReallocAsyncCtx5 + 88 | 0; //@line 23132
  HEAP32[$545 >> 2] = $42; //@line 23133
  $546 = $ReallocAsyncCtx5 + 92 | 0; //@line 23134
  HEAP32[$546 >> 2] = $44; //@line 23135
  $547 = $ReallocAsyncCtx5 + 96 | 0; //@line 23136
  HEAP32[$547 >> 2] = $46; //@line 23137
  $548 = $ReallocAsyncCtx5 + 100 | 0; //@line 23138
  HEAP32[$548 >> 2] = $515; //@line 23139
  $549 = $ReallocAsyncCtx5 + 104 | 0; //@line 23140
  HEAP32[$549 >> 2] = $48; //@line 23141
  $550 = $ReallocAsyncCtx5 + 108 | 0; //@line 23142
  HEAP32[$550 >> 2] = $50; //@line 23143
  $551 = $ReallocAsyncCtx5 + 112 | 0; //@line 23144
  HEAP32[$551 >> 2] = $52; //@line 23145
  $552 = $ReallocAsyncCtx5 + 116 | 0; //@line 23146
  HEAP32[$552 >> 2] = $54; //@line 23147
  $553 = $ReallocAsyncCtx5 + 120 | 0; //@line 23148
  HEAP32[$553 >> 2] = $56; //@line 23149
  $554 = $ReallocAsyncCtx5 + 124 | 0; //@line 23150
  HEAP32[$554 >> 2] = $58; //@line 23151
  $555 = $ReallocAsyncCtx5 + 128 | 0; //@line 23152
  HEAP32[$555 >> 2] = $60; //@line 23153
  $556 = $ReallocAsyncCtx5 + 132 | 0; //@line 23154
  HEAP32[$556 >> 2] = $62; //@line 23155
  $557 = $ReallocAsyncCtx5 + 136 | 0; //@line 23156
  HEAP32[$557 >> 2] = $64; //@line 23157
  $558 = $ReallocAsyncCtx5 + 140 | 0; //@line 23158
  HEAP8[$558 >> 0] = $517; //@line 23159
  $559 = $ReallocAsyncCtx5 + 144 | 0; //@line 23160
  HEAP32[$559 >> 2] = $66; //@line 23161
  $560 = $ReallocAsyncCtx5 + 148 | 0; //@line 23162
  HEAP32[$560 >> 2] = $68; //@line 23163
  $561 = $ReallocAsyncCtx5 + 152 | 0; //@line 23164
  HEAP32[$561 >> 2] = $70; //@line 23165
  $562 = $ReallocAsyncCtx5 + 156 | 0; //@line 23166
  HEAP32[$562 >> 2] = $72; //@line 23167
  $563 = $ReallocAsyncCtx5 + 160 | 0; //@line 23168
  HEAP32[$563 >> 2] = $74; //@line 23169
  $564 = $ReallocAsyncCtx5 + 164 | 0; //@line 23170
  HEAP32[$564 >> 2] = $76; //@line 23171
  $565 = $ReallocAsyncCtx5 + 168 | 0; //@line 23172
  HEAP32[$565 >> 2] = $78; //@line 23173
  $566 = $ReallocAsyncCtx5 + 172 | 0; //@line 23174
  HEAP8[$566 >> 0] = $80; //@line 23175
  $567 = $ReallocAsyncCtx5 + 176 | 0; //@line 23176
  HEAP32[$567 >> 2] = $82; //@line 23177
  $568 = $ReallocAsyncCtx5 + 180 | 0; //@line 23178
  HEAP8[$568 >> 0] = $84; //@line 23179
  $569 = $ReallocAsyncCtx5 + 184 | 0; //@line 23180
  HEAP32[$569 >> 2] = $86; //@line 23181
  $570 = $ReallocAsyncCtx5 + 188 | 0; //@line 23182
  HEAP8[$570 >> 0] = $88; //@line 23183
  $571 = $ReallocAsyncCtx5 + 192 | 0; //@line 23184
  HEAP32[$571 >> 2] = $$0107$be; //@line 23185
  $572 = $ReallocAsyncCtx5 + 196 | 0; //@line 23186
  HEAP32[$572 >> 2] = $90; //@line 23187
  $573 = $ReallocAsyncCtx5 + 200 | 0; //@line 23188
  HEAP32[$573 >> 2] = $92; //@line 23189
  $574 = $ReallocAsyncCtx5 + 204 | 0; //@line 23190
  HEAP32[$574 >> 2] = $94; //@line 23191
  $575 = $ReallocAsyncCtx5 + 208 | 0; //@line 23192
  HEAP32[$575 >> 2] = $96; //@line 23193
  $576 = $ReallocAsyncCtx5 + 212 | 0; //@line 23194
  HEAP32[$576 >> 2] = $98; //@line 23195
  $577 = $ReallocAsyncCtx5 + 216 | 0; //@line 23196
  HEAP32[$577 >> 2] = $100; //@line 23197
  $578 = $ReallocAsyncCtx5 + 220 | 0; //@line 23198
  HEAP8[$578 >> 0] = $511; //@line 23199
  $579 = $ReallocAsyncCtx5 + 224 | 0; //@line 23200
  HEAP32[$579 >> 2] = $104; //@line 23201
  $580 = $ReallocAsyncCtx5 + 228 | 0; //@line 23202
  HEAP32[$580 >> 2] = $106; //@line 23203
  $581 = $ReallocAsyncCtx5 + 232 | 0; //@line 23204
  HEAP32[$581 >> 2] = $108; //@line 23205
  $582 = $ReallocAsyncCtx5 + 236 | 0; //@line 23206
  HEAP32[$582 >> 2] = $110; //@line 23207
  $583 = $ReallocAsyncCtx5 + 240 | 0; //@line 23208
  HEAP32[$583 >> 2] = $112; //@line 23209
  $584 = $ReallocAsyncCtx5 + 244 | 0; //@line 23210
  HEAP32[$584 >> 2] = $114; //@line 23211
  $585 = $ReallocAsyncCtx5 + 248 | 0; //@line 23212
  HEAP32[$585 >> 2] = $116; //@line 23213
  sp = STACKTOP; //@line 23214
  return;
 } else if ((label | 0) == 30) {
  $590 = HEAP8[$82 + ($119 & 255) >> 0] | 0; //@line 23221
  $603 = $$0$be + 5 << 24 >> 24; //@line 23234
  $610 = (HEAPU8[$82 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$82 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$82 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 23241
  $613 = HEAP32[(HEAP32[$40 >> 2] | 0) + 48 >> 2] | 0; //@line 23244
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(236) | 0; //@line 23245
  $614 = FUNCTION_TABLE_iiii[$613 & 31]($62, $590, $610) | 0; //@line 23246
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 495; //@line 23249
   $615 = $ReallocAsyncCtx6 + 4 | 0; //@line 23250
   HEAP32[$615 >> 2] = $2; //@line 23251
   $616 = $ReallocAsyncCtx6 + 8 | 0; //@line 23252
   HEAP32[$616 >> 2] = $4; //@line 23253
   $617 = $ReallocAsyncCtx6 + 12 | 0; //@line 23254
   HEAP32[$617 >> 2] = $6; //@line 23255
   $618 = $ReallocAsyncCtx6 + 16 | 0; //@line 23256
   HEAP32[$618 >> 2] = $8; //@line 23257
   $619 = $ReallocAsyncCtx6 + 20 | 0; //@line 23258
   HEAP32[$619 >> 2] = $10; //@line 23259
   $620 = $ReallocAsyncCtx6 + 24 | 0; //@line 23260
   HEAP32[$620 >> 2] = $12; //@line 23261
   $621 = $ReallocAsyncCtx6 + 28 | 0; //@line 23262
   HEAP32[$621 >> 2] = $14; //@line 23263
   $622 = $ReallocAsyncCtx6 + 32 | 0; //@line 23264
   HEAP32[$622 >> 2] = $16; //@line 23265
   $623 = $ReallocAsyncCtx6 + 36 | 0; //@line 23266
   HEAP32[$623 >> 2] = $18; //@line 23267
   $624 = $ReallocAsyncCtx6 + 40 | 0; //@line 23268
   HEAP32[$624 >> 2] = $20; //@line 23269
   $625 = $ReallocAsyncCtx6 + 44 | 0; //@line 23270
   HEAP32[$625 >> 2] = $22; //@line 23271
   $626 = $ReallocAsyncCtx6 + 48 | 0; //@line 23272
   HEAP32[$626 >> 2] = $24; //@line 23273
   $627 = $ReallocAsyncCtx6 + 52 | 0; //@line 23274
   HEAP32[$627 >> 2] = $26; //@line 23275
   $628 = $ReallocAsyncCtx6 + 56 | 0; //@line 23276
   HEAP32[$628 >> 2] = $28; //@line 23277
   $629 = $ReallocAsyncCtx6 + 60 | 0; //@line 23278
   HEAP32[$629 >> 2] = $30; //@line 23279
   $630 = $ReallocAsyncCtx6 + 64 | 0; //@line 23280
   HEAP32[$630 >> 2] = $32; //@line 23281
   $631 = $ReallocAsyncCtx6 + 68 | 0; //@line 23282
   HEAP32[$631 >> 2] = $34; //@line 23283
   $632 = $ReallocAsyncCtx6 + 72 | 0; //@line 23284
   HEAP32[$632 >> 2] = $36; //@line 23285
   $633 = $ReallocAsyncCtx6 + 76 | 0; //@line 23286
   HEAP32[$633 >> 2] = $38; //@line 23287
   $634 = $ReallocAsyncCtx6 + 80 | 0; //@line 23288
   HEAP32[$634 >> 2] = $40; //@line 23289
   $635 = $ReallocAsyncCtx6 + 84 | 0; //@line 23290
   HEAP32[$635 >> 2] = $42; //@line 23291
   $636 = $ReallocAsyncCtx6 + 88 | 0; //@line 23292
   HEAP32[$636 >> 2] = $44; //@line 23293
   $637 = $ReallocAsyncCtx6 + 92 | 0; //@line 23294
   HEAP32[$637 >> 2] = $46; //@line 23295
   $638 = $ReallocAsyncCtx6 + 96 | 0; //@line 23296
   HEAP32[$638 >> 2] = $48; //@line 23297
   $639 = $ReallocAsyncCtx6 + 100 | 0; //@line 23298
   HEAP32[$639 >> 2] = $50; //@line 23299
   $640 = $ReallocAsyncCtx6 + 104 | 0; //@line 23300
   HEAP32[$640 >> 2] = $52; //@line 23301
   $641 = $ReallocAsyncCtx6 + 108 | 0; //@line 23302
   HEAP32[$641 >> 2] = $54; //@line 23303
   $642 = $ReallocAsyncCtx6 + 112 | 0; //@line 23304
   HEAP32[$642 >> 2] = $56; //@line 23305
   $643 = $ReallocAsyncCtx6 + 116 | 0; //@line 23306
   HEAP32[$643 >> 2] = $58; //@line 23307
   $644 = $ReallocAsyncCtx6 + 120 | 0; //@line 23308
   HEAP8[$644 >> 0] = $603; //@line 23309
   $645 = $ReallocAsyncCtx6 + 124 | 0; //@line 23310
   HEAP32[$645 >> 2] = $60; //@line 23311
   $646 = $ReallocAsyncCtx6 + 128 | 0; //@line 23312
   HEAP32[$646 >> 2] = $62; //@line 23313
   $647 = $ReallocAsyncCtx6 + 132 | 0; //@line 23314
   HEAP32[$647 >> 2] = $64; //@line 23315
   $648 = $ReallocAsyncCtx6 + 136 | 0; //@line 23316
   HEAP32[$648 >> 2] = $66; //@line 23317
   $649 = $ReallocAsyncCtx6 + 140 | 0; //@line 23318
   HEAP32[$649 >> 2] = $68; //@line 23319
   $650 = $ReallocAsyncCtx6 + 144 | 0; //@line 23320
   HEAP32[$650 >> 2] = $70; //@line 23321
   $651 = $ReallocAsyncCtx6 + 148 | 0; //@line 23322
   HEAP32[$651 >> 2] = $72; //@line 23323
   $652 = $ReallocAsyncCtx6 + 152 | 0; //@line 23324
   HEAP32[$652 >> 2] = $74; //@line 23325
   $653 = $ReallocAsyncCtx6 + 156 | 0; //@line 23326
   HEAP32[$653 >> 2] = $76; //@line 23327
   $654 = $ReallocAsyncCtx6 + 160 | 0; //@line 23328
   HEAP32[$654 >> 2] = $78; //@line 23329
   $655 = $ReallocAsyncCtx6 + 164 | 0; //@line 23330
   HEAP8[$655 >> 0] = $80; //@line 23331
   $656 = $ReallocAsyncCtx6 + 168 | 0; //@line 23332
   HEAP32[$656 >> 2] = $82; //@line 23333
   $657 = $ReallocAsyncCtx6 + 172 | 0; //@line 23334
   HEAP8[$657 >> 0] = $84; //@line 23335
   $658 = $ReallocAsyncCtx6 + 176 | 0; //@line 23336
   HEAP32[$658 >> 2] = $86; //@line 23337
   $659 = $ReallocAsyncCtx6 + 180 | 0; //@line 23338
   HEAP8[$659 >> 0] = $88; //@line 23339
   $660 = $ReallocAsyncCtx6 + 184 | 0; //@line 23340
   HEAP32[$660 >> 2] = $90; //@line 23341
   $661 = $ReallocAsyncCtx6 + 188 | 0; //@line 23342
   HEAP32[$661 >> 2] = $92; //@line 23343
   $662 = $ReallocAsyncCtx6 + 192 | 0; //@line 23344
   HEAP32[$662 >> 2] = $94; //@line 23345
   $663 = $ReallocAsyncCtx6 + 196 | 0; //@line 23346
   HEAP32[$663 >> 2] = $96; //@line 23347
   $664 = $ReallocAsyncCtx6 + 200 | 0; //@line 23348
   HEAP32[$664 >> 2] = $98; //@line 23349
   $665 = $ReallocAsyncCtx6 + 204 | 0; //@line 23350
   HEAP32[$665 >> 2] = $100; //@line 23351
   $666 = $ReallocAsyncCtx6 + 208 | 0; //@line 23352
   HEAP32[$666 >> 2] = $104; //@line 23353
   $667 = $ReallocAsyncCtx6 + 212 | 0; //@line 23354
   HEAP32[$667 >> 2] = $106; //@line 23355
   $668 = $ReallocAsyncCtx6 + 216 | 0; //@line 23356
   HEAP32[$668 >> 2] = $108; //@line 23357
   $669 = $ReallocAsyncCtx6 + 220 | 0; //@line 23358
   HEAP32[$669 >> 2] = $110; //@line 23359
   $670 = $ReallocAsyncCtx6 + 224 | 0; //@line 23360
   HEAP32[$670 >> 2] = $112; //@line 23361
   $671 = $ReallocAsyncCtx6 + 228 | 0; //@line 23362
   HEAP32[$671 >> 2] = $114; //@line 23363
   $672 = $ReallocAsyncCtx6 + 232 | 0; //@line 23364
   HEAP32[$672 >> 2] = $116; //@line 23365
   sp = STACKTOP; //@line 23366
   return;
  }
  HEAP8[___async_retval >> 0] = $614; //@line 23370
  ___async_unwind = 0; //@line 23371
  HEAP32[$ReallocAsyncCtx6 >> 2] = 495; //@line 23372
  $615 = $ReallocAsyncCtx6 + 4 | 0; //@line 23373
  HEAP32[$615 >> 2] = $2; //@line 23374
  $616 = $ReallocAsyncCtx6 + 8 | 0; //@line 23375
  HEAP32[$616 >> 2] = $4; //@line 23376
  $617 = $ReallocAsyncCtx6 + 12 | 0; //@line 23377
  HEAP32[$617 >> 2] = $6; //@line 23378
  $618 = $ReallocAsyncCtx6 + 16 | 0; //@line 23379
  HEAP32[$618 >> 2] = $8; //@line 23380
  $619 = $ReallocAsyncCtx6 + 20 | 0; //@line 23381
  HEAP32[$619 >> 2] = $10; //@line 23382
  $620 = $ReallocAsyncCtx6 + 24 | 0; //@line 23383
  HEAP32[$620 >> 2] = $12; //@line 23384
  $621 = $ReallocAsyncCtx6 + 28 | 0; //@line 23385
  HEAP32[$621 >> 2] = $14; //@line 23386
  $622 = $ReallocAsyncCtx6 + 32 | 0; //@line 23387
  HEAP32[$622 >> 2] = $16; //@line 23388
  $623 = $ReallocAsyncCtx6 + 36 | 0; //@line 23389
  HEAP32[$623 >> 2] = $18; //@line 23390
  $624 = $ReallocAsyncCtx6 + 40 | 0; //@line 23391
  HEAP32[$624 >> 2] = $20; //@line 23392
  $625 = $ReallocAsyncCtx6 + 44 | 0; //@line 23393
  HEAP32[$625 >> 2] = $22; //@line 23394
  $626 = $ReallocAsyncCtx6 + 48 | 0; //@line 23395
  HEAP32[$626 >> 2] = $24; //@line 23396
  $627 = $ReallocAsyncCtx6 + 52 | 0; //@line 23397
  HEAP32[$627 >> 2] = $26; //@line 23398
  $628 = $ReallocAsyncCtx6 + 56 | 0; //@line 23399
  HEAP32[$628 >> 2] = $28; //@line 23400
  $629 = $ReallocAsyncCtx6 + 60 | 0; //@line 23401
  HEAP32[$629 >> 2] = $30; //@line 23402
  $630 = $ReallocAsyncCtx6 + 64 | 0; //@line 23403
  HEAP32[$630 >> 2] = $32; //@line 23404
  $631 = $ReallocAsyncCtx6 + 68 | 0; //@line 23405
  HEAP32[$631 >> 2] = $34; //@line 23406
  $632 = $ReallocAsyncCtx6 + 72 | 0; //@line 23407
  HEAP32[$632 >> 2] = $36; //@line 23408
  $633 = $ReallocAsyncCtx6 + 76 | 0; //@line 23409
  HEAP32[$633 >> 2] = $38; //@line 23410
  $634 = $ReallocAsyncCtx6 + 80 | 0; //@line 23411
  HEAP32[$634 >> 2] = $40; //@line 23412
  $635 = $ReallocAsyncCtx6 + 84 | 0; //@line 23413
  HEAP32[$635 >> 2] = $42; //@line 23414
  $636 = $ReallocAsyncCtx6 + 88 | 0; //@line 23415
  HEAP32[$636 >> 2] = $44; //@line 23416
  $637 = $ReallocAsyncCtx6 + 92 | 0; //@line 23417
  HEAP32[$637 >> 2] = $46; //@line 23418
  $638 = $ReallocAsyncCtx6 + 96 | 0; //@line 23419
  HEAP32[$638 >> 2] = $48; //@line 23420
  $639 = $ReallocAsyncCtx6 + 100 | 0; //@line 23421
  HEAP32[$639 >> 2] = $50; //@line 23422
  $640 = $ReallocAsyncCtx6 + 104 | 0; //@line 23423
  HEAP32[$640 >> 2] = $52; //@line 23424
  $641 = $ReallocAsyncCtx6 + 108 | 0; //@line 23425
  HEAP32[$641 >> 2] = $54; //@line 23426
  $642 = $ReallocAsyncCtx6 + 112 | 0; //@line 23427
  HEAP32[$642 >> 2] = $56; //@line 23428
  $643 = $ReallocAsyncCtx6 + 116 | 0; //@line 23429
  HEAP32[$643 >> 2] = $58; //@line 23430
  $644 = $ReallocAsyncCtx6 + 120 | 0; //@line 23431
  HEAP8[$644 >> 0] = $603; //@line 23432
  $645 = $ReallocAsyncCtx6 + 124 | 0; //@line 23433
  HEAP32[$645 >> 2] = $60; //@line 23434
  $646 = $ReallocAsyncCtx6 + 128 | 0; //@line 23435
  HEAP32[$646 >> 2] = $62; //@line 23436
  $647 = $ReallocAsyncCtx6 + 132 | 0; //@line 23437
  HEAP32[$647 >> 2] = $64; //@line 23438
  $648 = $ReallocAsyncCtx6 + 136 | 0; //@line 23439
  HEAP32[$648 >> 2] = $66; //@line 23440
  $649 = $ReallocAsyncCtx6 + 140 | 0; //@line 23441
  HEAP32[$649 >> 2] = $68; //@line 23442
  $650 = $ReallocAsyncCtx6 + 144 | 0; //@line 23443
  HEAP32[$650 >> 2] = $70; //@line 23444
  $651 = $ReallocAsyncCtx6 + 148 | 0; //@line 23445
  HEAP32[$651 >> 2] = $72; //@line 23446
  $652 = $ReallocAsyncCtx6 + 152 | 0; //@line 23447
  HEAP32[$652 >> 2] = $74; //@line 23448
  $653 = $ReallocAsyncCtx6 + 156 | 0; //@line 23449
  HEAP32[$653 >> 2] = $76; //@line 23450
  $654 = $ReallocAsyncCtx6 + 160 | 0; //@line 23451
  HEAP32[$654 >> 2] = $78; //@line 23452
  $655 = $ReallocAsyncCtx6 + 164 | 0; //@line 23453
  HEAP8[$655 >> 0] = $80; //@line 23454
  $656 = $ReallocAsyncCtx6 + 168 | 0; //@line 23455
  HEAP32[$656 >> 2] = $82; //@line 23456
  $657 = $ReallocAsyncCtx6 + 172 | 0; //@line 23457
  HEAP8[$657 >> 0] = $84; //@line 23458
  $658 = $ReallocAsyncCtx6 + 176 | 0; //@line 23459
  HEAP32[$658 >> 2] = $86; //@line 23460
  $659 = $ReallocAsyncCtx6 + 180 | 0; //@line 23461
  HEAP8[$659 >> 0] = $88; //@line 23462
  $660 = $ReallocAsyncCtx6 + 184 | 0; //@line 23463
  HEAP32[$660 >> 2] = $90; //@line 23464
  $661 = $ReallocAsyncCtx6 + 188 | 0; //@line 23465
  HEAP32[$661 >> 2] = $92; //@line 23466
  $662 = $ReallocAsyncCtx6 + 192 | 0; //@line 23467
  HEAP32[$662 >> 2] = $94; //@line 23468
  $663 = $ReallocAsyncCtx6 + 196 | 0; //@line 23469
  HEAP32[$663 >> 2] = $96; //@line 23470
  $664 = $ReallocAsyncCtx6 + 200 | 0; //@line 23471
  HEAP32[$664 >> 2] = $98; //@line 23472
  $665 = $ReallocAsyncCtx6 + 204 | 0; //@line 23473
  HEAP32[$665 >> 2] = $100; //@line 23474
  $666 = $ReallocAsyncCtx6 + 208 | 0; //@line 23475
  HEAP32[$666 >> 2] = $104; //@line 23476
  $667 = $ReallocAsyncCtx6 + 212 | 0; //@line 23477
  HEAP32[$667 >> 2] = $106; //@line 23478
  $668 = $ReallocAsyncCtx6 + 216 | 0; //@line 23479
  HEAP32[$668 >> 2] = $108; //@line 23480
  $669 = $ReallocAsyncCtx6 + 220 | 0; //@line 23481
  HEAP32[$669 >> 2] = $110; //@line 23482
  $670 = $ReallocAsyncCtx6 + 224 | 0; //@line 23483
  HEAP32[$670 >> 2] = $112; //@line 23484
  $671 = $ReallocAsyncCtx6 + 228 | 0; //@line 23485
  HEAP32[$671 >> 2] = $114; //@line 23486
  $672 = $ReallocAsyncCtx6 + 232 | 0; //@line 23487
  HEAP32[$672 >> 2] = $116; //@line 23488
  sp = STACKTOP; //@line 23489
  return;
 } else if ((label | 0) == 33) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 23494
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_360($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0107$be = 0, $$0111 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $102 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $377 = 0, $378 = 0, $38 = 0, $392 = 0, $4 = 0, $40 = 0, $413 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $48 = 0, $481 = 0, $485 = 0, $489 = 0, $494 = 0, $495 = 0, $499 = 0, $50 = 0, $503 = 0, $505 = 0, $507 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $578 = 0, $58 = 0, $591 = 0, $598 = 0, $6 = 0, $60 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19584
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19586
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19588
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19590
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19592
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19594
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19596
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19598
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19600
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19602
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19604
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19606
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19608
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19610
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19612
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 19614
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 19616
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 19618
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 19620
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 19622
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 19624
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 19626
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 19628
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 19630
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 19632
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 19634
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 19636
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 19638
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 19640
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 19642
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 19644
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 19646
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 19648
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 19650
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 19652
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 19654
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 19656
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 19658
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 19660
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 19662
 $80 = HEAP8[$0 + 160 >> 0] | 0; //@line 19664
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 19666
 $84 = HEAP8[$0 + 168 >> 0] | 0; //@line 19668
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 19670
 $88 = HEAP8[$0 + 176 >> 0] | 0; //@line 19672
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 19674
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 19676
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 19678
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 19680
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 19682
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 19684
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 19686
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 19690
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 19692
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 19694
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 19696
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 19698
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 19700
 $$0111 = HEAP8[___async_retval >> 0] | 0; //@line 19703
 $$reg2mem$0 = HEAP8[$0 + 208 >> 0] | 0; //@line 19703
 L2 : while (1) {
  $377 = HEAP8[$60 >> 0] | 0; //@line 19708
  $378 = $377 & 255; //@line 19709
  if ((128 - (HEAPU8[$86 >> 0] | 0) - $378 | 0) > 2) {
   HEAP8[$74 + 4 + $378 >> 0] = 6; //@line 19715
   HEAP8[($377 + 1 & 255) + ($74 + 4) >> 0] = $$0111; //@line 19719
   HEAP8[$60 >> 0] = $377 + 3 << 24 >> 24; //@line 19721
   HEAP8[($377 + 2 & 255) + ($74 + 4) >> 0] = $80; //@line 19724
   HEAP8[$102 >> 0] = 1; //@line 19725
   $$0$be = $$reg2mem$0; //@line 19726
   $$0107$be = 0; //@line 19726
  } else {
   $$0$be = $$reg2mem$0; //@line 19728
   $$0107$be = -1010; //@line 19728
  }
  L6 : while (1) {
   if (($$0$be & 255) >= ($84 & 255)) {
    label = 31; //@line 19733
    break L2;
   }
   $119 = $$0$be + 1 << 24 >> 24; //@line 19737
   switch (HEAP8[$82 + ($$0$be & 255) >> 0] | 0) {
   case 3:
    {
     label = 4; //@line 19742
     break L2;
     break;
    }
   case 5:
    {
     label = 9; //@line 19747
     break L2;
     break;
    }
   case 7:
    {
     label = 19; //@line 19752
     break L2;
     break;
    }
   case 9:
    {
     label = 25; //@line 19757
     break L2;
     break;
    }
   case 10:
    {
     label = 28; //@line 19762
     break L2;
     break;
    }
   case 6:
    {
     break L6;
     break;
    }
   case 2:
    {
     HEAP32[$48 >> 2] = 0; //@line 19771
     HEAP8[$64 >> 0] = HEAP8[$82 + ($119 & 255) >> 0] | 0; //@line 19776
     HEAP8[$58 >> 0] = HEAP8[$82 + ($$0$be + 2 & 255) >> 0] | 0; //@line 19781
     $$0$be = $$0$be + 3 << 24 >> 24; //@line 19782
     continue L6;
     break;
    }
   case 4:
    {
     $204 = $$0$be + 2 << 24 >> 24; //@line 19787
     $207 = HEAP8[$82 + ($119 & 255) >> 0] | 0; //@line 19790
     HEAP8[$110 >> 0] = $207; //@line 19791
     HEAP16[$92 >> 1] = 1 << ($207 & 255); //@line 19795
     $214 = HEAP8[$60 >> 0] | 0; //@line 19799
     $215 = $214 & 255; //@line 19800
     if ((128 - (HEAPU8[$86 >> 0] | 0) | 0) <= ($215 | 0)) {
      $$0$be = $204; //@line 19803
      $$0107$be = -1010; //@line 19803
      continue L6;
     }
     HEAP8[$60 >> 0] = $214 + 1 << 24 >> 24; //@line 19808
     HEAP8[$74 + 4 + $215 >> 0] = 4; //@line 19809
     HEAP8[$102 >> 0] = 1; //@line 19810
     $$0$be = $204; //@line 19811
     $$0107$be = 0; //@line 19811
     continue L6;
     break;
    }
   case 8:
    {
     $481 = $$0$be + 2 << 24 >> 24; //@line 19816
     $485 = HEAP8[$82 + ($119 & 255) >> 0] & 15; //@line 19820
     $489 = ($485 + ($485 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 19825
     HEAP32[$38 >> 2] = $489; //@line 19826
     HEAP32[$6 >> 2] = $489 + 1e3; //@line 19828
     $494 = HEAP8[$60 >> 0] | 0; //@line 19832
     $495 = $494 & 255; //@line 19833
     if ((128 - (HEAPU8[$86 >> 0] | 0) | 0) <= ($495 | 0)) {
      $$0$be = $481; //@line 19836
      $$0107$be = -1010; //@line 19836
      continue L6;
     }
     HEAP8[$60 >> 0] = $494 + 1 << 24 >> 24; //@line 19841
     HEAP8[$74 + 4 + $495 >> 0] = 8; //@line 19842
     HEAP8[$42 >> 0] = 1; //@line 19843
     HEAP8[$102 >> 0] = 1; //@line 19844
     $$0$be = $481; //@line 19845
     $$0107$be = 0; //@line 19845
     continue L6;
     break;
    }
   default:
    {
     $$0$be = $119; //@line 19850
     $$0107$be = -1013; //@line 19850
     continue L6;
    }
   }
  }
  $311 = HEAP32[$70 >> 2] | 0; //@line 19855
  if (!$311) {
   $$0111 = -1; //@line 19858
   $$reg2mem$0 = $119; //@line 19858
  } else {
   label = 13; //@line 19860
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$116 >> 0] = 0; //@line 19865
  HEAP8[$28 >> 0] = 0; //@line 19866
  HEAP8[$18 >> 0] = 0; //@line 19867
  HEAP8[$10 >> 0] = 0; //@line 19868
  $130 = $119 & 255; //@line 19869
  $131 = $130 + -1 | 0; //@line 19870
  HEAP32[$72 >> 2] = $82 + $131; //@line 19872
  HEAP8[$100 >> 0] = $46 - $131; //@line 19875
  HEAP8[$108 >> 0] = HEAP8[$90 >> 0] | 0; //@line 19877
  HEAP8[$8 >> 0] = HEAP8[$16 >> 0] | 0; //@line 19879
  HEAP8[$20 >> 0] = HEAP8[$30 >> 0] | 0; //@line 19881
  HEAP8[$34 >> 0] = HEAP8[$44 >> 0] | 0; //@line 19883
  HEAP8[$68 >> 0] = HEAP8[$52 >> 0] | 0; //@line 19885
  $142 = HEAP32[(HEAP32[$76 >> 2] | 0) + 36 >> 2] | 0; //@line 19888
  $ReallocAsyncCtx = _emscripten_realloc_async_context(240) | 0; //@line 19889
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($62, $112, $116, $28, $18, $10) | 0; //@line 19890
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 19893
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 19894
   HEAP32[$144 >> 2] = $2; //@line 19895
   $145 = $ReallocAsyncCtx + 8 | 0; //@line 19896
   HEAP32[$145 >> 2] = $4; //@line 19897
   $146 = $ReallocAsyncCtx + 12 | 0; //@line 19898
   HEAP32[$146 >> 2] = $6; //@line 19899
   $147 = $ReallocAsyncCtx + 16 | 0; //@line 19900
   HEAP32[$147 >> 2] = $8; //@line 19901
   $148 = $ReallocAsyncCtx + 20 | 0; //@line 19902
   HEAP32[$148 >> 2] = $10; //@line 19903
   $149 = $ReallocAsyncCtx + 24 | 0; //@line 19904
   HEAP32[$149 >> 2] = $12; //@line 19905
   $150 = $ReallocAsyncCtx + 28 | 0; //@line 19906
   HEAP32[$150 >> 2] = $14; //@line 19907
   $151 = $ReallocAsyncCtx + 32 | 0; //@line 19908
   HEAP32[$151 >> 2] = $16; //@line 19909
   $152 = $ReallocAsyncCtx + 36 | 0; //@line 19910
   HEAP32[$152 >> 2] = $18; //@line 19911
   $153 = $ReallocAsyncCtx + 40 | 0; //@line 19912
   HEAP32[$153 >> 2] = $20; //@line 19913
   $154 = $ReallocAsyncCtx + 44 | 0; //@line 19914
   HEAP32[$154 >> 2] = $22; //@line 19915
   $155 = $ReallocAsyncCtx + 48 | 0; //@line 19916
   HEAP32[$155 >> 2] = $24; //@line 19917
   $156 = $ReallocAsyncCtx + 52 | 0; //@line 19918
   HEAP32[$156 >> 2] = $26; //@line 19919
   $157 = $ReallocAsyncCtx + 56 | 0; //@line 19920
   HEAP32[$157 >> 2] = $28; //@line 19921
   $158 = $ReallocAsyncCtx + 60 | 0; //@line 19922
   HEAP32[$158 >> 2] = $30; //@line 19923
   $159 = $ReallocAsyncCtx + 64 | 0; //@line 19924
   HEAP32[$159 >> 2] = $32; //@line 19925
   $160 = $ReallocAsyncCtx + 68 | 0; //@line 19926
   HEAP32[$160 >> 2] = $34; //@line 19927
   $161 = $ReallocAsyncCtx + 72 | 0; //@line 19928
   HEAP32[$161 >> 2] = $36; //@line 19929
   $162 = $ReallocAsyncCtx + 76 | 0; //@line 19930
   HEAP32[$162 >> 2] = $38; //@line 19931
   $163 = $ReallocAsyncCtx + 80 | 0; //@line 19932
   HEAP32[$163 >> 2] = $40; //@line 19933
   $164 = $ReallocAsyncCtx + 84 | 0; //@line 19934
   HEAP32[$164 >> 2] = $42; //@line 19935
   $165 = $ReallocAsyncCtx + 88 | 0; //@line 19936
   HEAP32[$165 >> 2] = $44; //@line 19937
   $166 = $ReallocAsyncCtx + 92 | 0; //@line 19938
   HEAP32[$166 >> 2] = $46; //@line 19939
   $167 = $ReallocAsyncCtx + 96 | 0; //@line 19940
   HEAP32[$167 >> 2] = $48; //@line 19941
   $168 = $ReallocAsyncCtx + 100 | 0; //@line 19942
   HEAP32[$168 >> 2] = $50; //@line 19943
   $169 = $ReallocAsyncCtx + 104 | 0; //@line 19944
   HEAP32[$169 >> 2] = $52; //@line 19945
   $170 = $ReallocAsyncCtx + 108 | 0; //@line 19946
   HEAP32[$170 >> 2] = $54; //@line 19947
   $171 = $ReallocAsyncCtx + 112 | 0; //@line 19948
   HEAP32[$171 >> 2] = $56; //@line 19949
   $172 = $ReallocAsyncCtx + 116 | 0; //@line 19950
   HEAP32[$172 >> 2] = $58; //@line 19951
   $173 = $ReallocAsyncCtx + 120 | 0; //@line 19952
   HEAP32[$173 >> 2] = $60; //@line 19953
   $174 = $ReallocAsyncCtx + 124 | 0; //@line 19954
   HEAP32[$174 >> 2] = $62; //@line 19955
   $175 = $ReallocAsyncCtx + 128 | 0; //@line 19956
   HEAP32[$175 >> 2] = $64; //@line 19957
   $176 = $ReallocAsyncCtx + 132 | 0; //@line 19958
   HEAP32[$176 >> 2] = $66; //@line 19959
   $177 = $ReallocAsyncCtx + 136 | 0; //@line 19960
   HEAP32[$177 >> 2] = $68; //@line 19961
   $178 = $ReallocAsyncCtx + 140 | 0; //@line 19962
   HEAP32[$178 >> 2] = $70; //@line 19963
   $179 = $ReallocAsyncCtx + 144 | 0; //@line 19964
   HEAP32[$179 >> 2] = $72; //@line 19965
   $180 = $ReallocAsyncCtx + 148 | 0; //@line 19966
   HEAP32[$180 >> 2] = $74; //@line 19967
   $181 = $ReallocAsyncCtx + 152 | 0; //@line 19968
   HEAP32[$181 >> 2] = $76; //@line 19969
   $182 = $ReallocAsyncCtx + 156 | 0; //@line 19970
   HEAP32[$182 >> 2] = $130; //@line 19971
   $183 = $ReallocAsyncCtx + 160 | 0; //@line 19972
   HEAP32[$183 >> 2] = $78; //@line 19973
   $184 = $ReallocAsyncCtx + 164 | 0; //@line 19974
   HEAP8[$184 >> 0] = $80; //@line 19975
   $185 = $ReallocAsyncCtx + 168 | 0; //@line 19976
   HEAP32[$185 >> 2] = $82; //@line 19977
   $186 = $ReallocAsyncCtx + 172 | 0; //@line 19978
   HEAP32[$186 >> 2] = $$0107$be; //@line 19979
   $187 = $ReallocAsyncCtx + 176 | 0; //@line 19980
   HEAP8[$187 >> 0] = $84; //@line 19981
   $188 = $ReallocAsyncCtx + 180 | 0; //@line 19982
   HEAP32[$188 >> 2] = $86; //@line 19983
   $189 = $ReallocAsyncCtx + 184 | 0; //@line 19984
   HEAP8[$189 >> 0] = $88; //@line 19985
   $190 = $ReallocAsyncCtx + 188 | 0; //@line 19986
   HEAP32[$190 >> 2] = $90; //@line 19987
   $191 = $ReallocAsyncCtx + 192 | 0; //@line 19988
   HEAP32[$191 >> 2] = $92; //@line 19989
   $192 = $ReallocAsyncCtx + 196 | 0; //@line 19990
   HEAP32[$192 >> 2] = $94; //@line 19991
   $193 = $ReallocAsyncCtx + 200 | 0; //@line 19992
   HEAP32[$193 >> 2] = $96; //@line 19993
   $194 = $ReallocAsyncCtx + 204 | 0; //@line 19994
   HEAP32[$194 >> 2] = $98; //@line 19995
   $195 = $ReallocAsyncCtx + 208 | 0; //@line 19996
   HEAP32[$195 >> 2] = $100; //@line 19997
   $196 = $ReallocAsyncCtx + 212 | 0; //@line 19998
   HEAP32[$196 >> 2] = $102; //@line 19999
   $197 = $ReallocAsyncCtx + 216 | 0; //@line 20000
   HEAP32[$197 >> 2] = $106; //@line 20001
   $198 = $ReallocAsyncCtx + 220 | 0; //@line 20002
   HEAP32[$198 >> 2] = $108; //@line 20003
   $199 = $ReallocAsyncCtx + 224 | 0; //@line 20004
   HEAP32[$199 >> 2] = $110; //@line 20005
   $200 = $ReallocAsyncCtx + 228 | 0; //@line 20006
   HEAP32[$200 >> 2] = $112; //@line 20007
   $201 = $ReallocAsyncCtx + 232 | 0; //@line 20008
   HEAP32[$201 >> 2] = $114; //@line 20009
   $202 = $ReallocAsyncCtx + 236 | 0; //@line 20010
   HEAP32[$202 >> 2] = $116; //@line 20011
   sp = STACKTOP; //@line 20012
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 20016
  ___async_unwind = 0; //@line 20017
  HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 20018
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 20019
  HEAP32[$144 >> 2] = $2; //@line 20020
  $145 = $ReallocAsyncCtx + 8 | 0; //@line 20021
  HEAP32[$145 >> 2] = $4; //@line 20022
  $146 = $ReallocAsyncCtx + 12 | 0; //@line 20023
  HEAP32[$146 >> 2] = $6; //@line 20024
  $147 = $ReallocAsyncCtx + 16 | 0; //@line 20025
  HEAP32[$147 >> 2] = $8; //@line 20026
  $148 = $ReallocAsyncCtx + 20 | 0; //@line 20027
  HEAP32[$148 >> 2] = $10; //@line 20028
  $149 = $ReallocAsyncCtx + 24 | 0; //@line 20029
  HEAP32[$149 >> 2] = $12; //@line 20030
  $150 = $ReallocAsyncCtx + 28 | 0; //@line 20031
  HEAP32[$150 >> 2] = $14; //@line 20032
  $151 = $ReallocAsyncCtx + 32 | 0; //@line 20033
  HEAP32[$151 >> 2] = $16; //@line 20034
  $152 = $ReallocAsyncCtx + 36 | 0; //@line 20035
  HEAP32[$152 >> 2] = $18; //@line 20036
  $153 = $ReallocAsyncCtx + 40 | 0; //@line 20037
  HEAP32[$153 >> 2] = $20; //@line 20038
  $154 = $ReallocAsyncCtx + 44 | 0; //@line 20039
  HEAP32[$154 >> 2] = $22; //@line 20040
  $155 = $ReallocAsyncCtx + 48 | 0; //@line 20041
  HEAP32[$155 >> 2] = $24; //@line 20042
  $156 = $ReallocAsyncCtx + 52 | 0; //@line 20043
  HEAP32[$156 >> 2] = $26; //@line 20044
  $157 = $ReallocAsyncCtx + 56 | 0; //@line 20045
  HEAP32[$157 >> 2] = $28; //@line 20046
  $158 = $ReallocAsyncCtx + 60 | 0; //@line 20047
  HEAP32[$158 >> 2] = $30; //@line 20048
  $159 = $ReallocAsyncCtx + 64 | 0; //@line 20049
  HEAP32[$159 >> 2] = $32; //@line 20050
  $160 = $ReallocAsyncCtx + 68 | 0; //@line 20051
  HEAP32[$160 >> 2] = $34; //@line 20052
  $161 = $ReallocAsyncCtx + 72 | 0; //@line 20053
  HEAP32[$161 >> 2] = $36; //@line 20054
  $162 = $ReallocAsyncCtx + 76 | 0; //@line 20055
  HEAP32[$162 >> 2] = $38; //@line 20056
  $163 = $ReallocAsyncCtx + 80 | 0; //@line 20057
  HEAP32[$163 >> 2] = $40; //@line 20058
  $164 = $ReallocAsyncCtx + 84 | 0; //@line 20059
  HEAP32[$164 >> 2] = $42; //@line 20060
  $165 = $ReallocAsyncCtx + 88 | 0; //@line 20061
  HEAP32[$165 >> 2] = $44; //@line 20062
  $166 = $ReallocAsyncCtx + 92 | 0; //@line 20063
  HEAP32[$166 >> 2] = $46; //@line 20064
  $167 = $ReallocAsyncCtx + 96 | 0; //@line 20065
  HEAP32[$167 >> 2] = $48; //@line 20066
  $168 = $ReallocAsyncCtx + 100 | 0; //@line 20067
  HEAP32[$168 >> 2] = $50; //@line 20068
  $169 = $ReallocAsyncCtx + 104 | 0; //@line 20069
  HEAP32[$169 >> 2] = $52; //@line 20070
  $170 = $ReallocAsyncCtx + 108 | 0; //@line 20071
  HEAP32[$170 >> 2] = $54; //@line 20072
  $171 = $ReallocAsyncCtx + 112 | 0; //@line 20073
  HEAP32[$171 >> 2] = $56; //@line 20074
  $172 = $ReallocAsyncCtx + 116 | 0; //@line 20075
  HEAP32[$172 >> 2] = $58; //@line 20076
  $173 = $ReallocAsyncCtx + 120 | 0; //@line 20077
  HEAP32[$173 >> 2] = $60; //@line 20078
  $174 = $ReallocAsyncCtx + 124 | 0; //@line 20079
  HEAP32[$174 >> 2] = $62; //@line 20080
  $175 = $ReallocAsyncCtx + 128 | 0; //@line 20081
  HEAP32[$175 >> 2] = $64; //@line 20082
  $176 = $ReallocAsyncCtx + 132 | 0; //@line 20083
  HEAP32[$176 >> 2] = $66; //@line 20084
  $177 = $ReallocAsyncCtx + 136 | 0; //@line 20085
  HEAP32[$177 >> 2] = $68; //@line 20086
  $178 = $ReallocAsyncCtx + 140 | 0; //@line 20087
  HEAP32[$178 >> 2] = $70; //@line 20088
  $179 = $ReallocAsyncCtx + 144 | 0; //@line 20089
  HEAP32[$179 >> 2] = $72; //@line 20090
  $180 = $ReallocAsyncCtx + 148 | 0; //@line 20091
  HEAP32[$180 >> 2] = $74; //@line 20092
  $181 = $ReallocAsyncCtx + 152 | 0; //@line 20093
  HEAP32[$181 >> 2] = $76; //@line 20094
  $182 = $ReallocAsyncCtx + 156 | 0; //@line 20095
  HEAP32[$182 >> 2] = $130; //@line 20096
  $183 = $ReallocAsyncCtx + 160 | 0; //@line 20097
  HEAP32[$183 >> 2] = $78; //@line 20098
  $184 = $ReallocAsyncCtx + 164 | 0; //@line 20099
  HEAP8[$184 >> 0] = $80; //@line 20100
  $185 = $ReallocAsyncCtx + 168 | 0; //@line 20101
  HEAP32[$185 >> 2] = $82; //@line 20102
  $186 = $ReallocAsyncCtx + 172 | 0; //@line 20103
  HEAP32[$186 >> 2] = $$0107$be; //@line 20104
  $187 = $ReallocAsyncCtx + 176 | 0; //@line 20105
  HEAP8[$187 >> 0] = $84; //@line 20106
  $188 = $ReallocAsyncCtx + 180 | 0; //@line 20107
  HEAP32[$188 >> 2] = $86; //@line 20108
  $189 = $ReallocAsyncCtx + 184 | 0; //@line 20109
  HEAP8[$189 >> 0] = $88; //@line 20110
  $190 = $ReallocAsyncCtx + 188 | 0; //@line 20111
  HEAP32[$190 >> 2] = $90; //@line 20112
  $191 = $ReallocAsyncCtx + 192 | 0; //@line 20113
  HEAP32[$191 >> 2] = $92; //@line 20114
  $192 = $ReallocAsyncCtx + 196 | 0; //@line 20115
  HEAP32[$192 >> 2] = $94; //@line 20116
  $193 = $ReallocAsyncCtx + 200 | 0; //@line 20117
  HEAP32[$193 >> 2] = $96; //@line 20118
  $194 = $ReallocAsyncCtx + 204 | 0; //@line 20119
  HEAP32[$194 >> 2] = $98; //@line 20120
  $195 = $ReallocAsyncCtx + 208 | 0; //@line 20121
  HEAP32[$195 >> 2] = $100; //@line 20122
  $196 = $ReallocAsyncCtx + 212 | 0; //@line 20123
  HEAP32[$196 >> 2] = $102; //@line 20124
  $197 = $ReallocAsyncCtx + 216 | 0; //@line 20125
  HEAP32[$197 >> 2] = $106; //@line 20126
  $198 = $ReallocAsyncCtx + 220 | 0; //@line 20127
  HEAP32[$198 >> 2] = $108; //@line 20128
  $199 = $ReallocAsyncCtx + 224 | 0; //@line 20129
  HEAP32[$199 >> 2] = $110; //@line 20130
  $200 = $ReallocAsyncCtx + 228 | 0; //@line 20131
  HEAP32[$200 >> 2] = $112; //@line 20132
  $201 = $ReallocAsyncCtx + 232 | 0; //@line 20133
  HEAP32[$201 >> 2] = $114; //@line 20134
  $202 = $ReallocAsyncCtx + 236 | 0; //@line 20135
  HEAP32[$202 >> 2] = $116; //@line 20136
  sp = STACKTOP; //@line 20137
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$82 + ($119 & 255) >> 0] | 0; //@line 20143
  HEAP8[$26 >> 0] = ($221 & 255) >>> 4 & 7; //@line 20148
  HEAP8[$98 >> 0] = $221 & 15; //@line 20150
  $240 = $$0$be + 5 << 24 >> 24; //@line 20164
  HEAP32[$32 >> 2] = (HEAPU8[$82 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$82 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$82 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 20172
  $250 = HEAP32[(HEAP32[$2 >> 2] | 0) + 40 >> 2] | 0; //@line 20175
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(236) | 0; //@line 20176
  $251 = FUNCTION_TABLE_iii[$250 & 15]($62, $12) | 0; //@line 20177
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 20180
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 20181
   HEAP32[$252 >> 2] = $2; //@line 20182
   $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 20183
   HEAP32[$253 >> 2] = $4; //@line 20184
   $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 20185
   HEAP32[$254 >> 2] = $6; //@line 20186
   $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 20187
   HEAP32[$255 >> 2] = $8; //@line 20188
   $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 20189
   HEAP32[$256 >> 2] = $10; //@line 20190
   $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 20191
   HEAP32[$257 >> 2] = $12; //@line 20192
   $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 20193
   HEAP32[$258 >> 2] = $14; //@line 20194
   $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 20195
   HEAP32[$259 >> 2] = $16; //@line 20196
   $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 20197
   HEAP32[$260 >> 2] = $18; //@line 20198
   $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 20199
   HEAP32[$261 >> 2] = $20; //@line 20200
   $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 20201
   HEAP32[$262 >> 2] = $22; //@line 20202
   $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 20203
   HEAP32[$263 >> 2] = $24; //@line 20204
   $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 20205
   HEAP32[$264 >> 2] = $26; //@line 20206
   $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 20207
   HEAP32[$265 >> 2] = $28; //@line 20208
   $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 20209
   HEAP32[$266 >> 2] = $30; //@line 20210
   $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 20211
   HEAP32[$267 >> 2] = $32; //@line 20212
   $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 20213
   HEAP32[$268 >> 2] = $34; //@line 20214
   $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 20215
   HEAP32[$269 >> 2] = $36; //@line 20216
   $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 20217
   HEAP32[$270 >> 2] = $38; //@line 20218
   $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 20219
   HEAP32[$271 >> 2] = $40; //@line 20220
   $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 20221
   HEAP32[$272 >> 2] = $42; //@line 20222
   $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 20223
   HEAP32[$273 >> 2] = $44; //@line 20224
   $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 20225
   HEAP32[$274 >> 2] = $46; //@line 20226
   $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 20227
   HEAP32[$275 >> 2] = $48; //@line 20228
   $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 20229
   HEAP32[$276 >> 2] = $50; //@line 20230
   $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 20231
   HEAP32[$277 >> 2] = $52; //@line 20232
   $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 20233
   HEAP32[$278 >> 2] = $54; //@line 20234
   $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 20235
   HEAP32[$279 >> 2] = $56; //@line 20236
   $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 20237
   HEAP32[$280 >> 2] = $58; //@line 20238
   $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 20239
   HEAP32[$281 >> 2] = $60; //@line 20240
   $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 20241
   HEAP32[$282 >> 2] = $62; //@line 20242
   $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 20243
   HEAP32[$283 >> 2] = $64; //@line 20244
   $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 20245
   HEAP32[$284 >> 2] = $66; //@line 20246
   $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 20247
   HEAP32[$285 >> 2] = $68; //@line 20248
   $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 20249
   HEAP32[$286 >> 2] = $70; //@line 20250
   $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 20251
   HEAP32[$287 >> 2] = $72; //@line 20252
   $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 20253
   HEAP32[$288 >> 2] = $74; //@line 20254
   $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 20255
   HEAP32[$289 >> 2] = $76; //@line 20256
   $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 20257
   HEAP32[$290 >> 2] = $78; //@line 20258
   $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 20259
   HEAP8[$291 >> 0] = $80; //@line 20260
   $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 20261
   HEAP32[$292 >> 2] = $82; //@line 20262
   $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 20263
   HEAP8[$293 >> 0] = $84; //@line 20264
   $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 20265
   HEAP32[$294 >> 2] = $86; //@line 20266
   $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 20267
   HEAP8[$295 >> 0] = $88; //@line 20268
   $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 20269
   HEAP32[$296 >> 2] = $90; //@line 20270
   $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 20271
   HEAP32[$297 >> 2] = $92; //@line 20272
   $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 20273
   HEAP32[$298 >> 2] = $94; //@line 20274
   $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 20275
   HEAP32[$299 >> 2] = $96; //@line 20276
   $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 20277
   HEAP32[$300 >> 2] = $98; //@line 20278
   $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 20279
   HEAP32[$301 >> 2] = $100; //@line 20280
   $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 20281
   HEAP32[$302 >> 2] = $102; //@line 20282
   $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 20283
   HEAP32[$303 >> 2] = $106; //@line 20284
   $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 20285
   HEAP32[$304 >> 2] = $108; //@line 20286
   $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 20287
   HEAP32[$305 >> 2] = $110; //@line 20288
   $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 20289
   HEAP32[$306 >> 2] = $112; //@line 20290
   $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 20291
   HEAP32[$307 >> 2] = $114; //@line 20292
   $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 20293
   HEAP8[$308 >> 0] = $240; //@line 20294
   $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 20295
   HEAP32[$309 >> 2] = $116; //@line 20296
   sp = STACKTOP; //@line 20297
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 20301
  ___async_unwind = 0; //@line 20302
  HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 20303
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 20304
  HEAP32[$252 >> 2] = $2; //@line 20305
  $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 20306
  HEAP32[$253 >> 2] = $4; //@line 20307
  $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 20308
  HEAP32[$254 >> 2] = $6; //@line 20309
  $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 20310
  HEAP32[$255 >> 2] = $8; //@line 20311
  $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 20312
  HEAP32[$256 >> 2] = $10; //@line 20313
  $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 20314
  HEAP32[$257 >> 2] = $12; //@line 20315
  $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 20316
  HEAP32[$258 >> 2] = $14; //@line 20317
  $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 20318
  HEAP32[$259 >> 2] = $16; //@line 20319
  $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 20320
  HEAP32[$260 >> 2] = $18; //@line 20321
  $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 20322
  HEAP32[$261 >> 2] = $20; //@line 20323
  $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 20324
  HEAP32[$262 >> 2] = $22; //@line 20325
  $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 20326
  HEAP32[$263 >> 2] = $24; //@line 20327
  $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 20328
  HEAP32[$264 >> 2] = $26; //@line 20329
  $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 20330
  HEAP32[$265 >> 2] = $28; //@line 20331
  $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 20332
  HEAP32[$266 >> 2] = $30; //@line 20333
  $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 20334
  HEAP32[$267 >> 2] = $32; //@line 20335
  $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 20336
  HEAP32[$268 >> 2] = $34; //@line 20337
  $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 20338
  HEAP32[$269 >> 2] = $36; //@line 20339
  $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 20340
  HEAP32[$270 >> 2] = $38; //@line 20341
  $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 20342
  HEAP32[$271 >> 2] = $40; //@line 20343
  $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 20344
  HEAP32[$272 >> 2] = $42; //@line 20345
  $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 20346
  HEAP32[$273 >> 2] = $44; //@line 20347
  $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 20348
  HEAP32[$274 >> 2] = $46; //@line 20349
  $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 20350
  HEAP32[$275 >> 2] = $48; //@line 20351
  $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 20352
  HEAP32[$276 >> 2] = $50; //@line 20353
  $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 20354
  HEAP32[$277 >> 2] = $52; //@line 20355
  $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 20356
  HEAP32[$278 >> 2] = $54; //@line 20357
  $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 20358
  HEAP32[$279 >> 2] = $56; //@line 20359
  $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 20360
  HEAP32[$280 >> 2] = $58; //@line 20361
  $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 20362
  HEAP32[$281 >> 2] = $60; //@line 20363
  $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 20364
  HEAP32[$282 >> 2] = $62; //@line 20365
  $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 20366
  HEAP32[$283 >> 2] = $64; //@line 20367
  $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 20368
  HEAP32[$284 >> 2] = $66; //@line 20369
  $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 20370
  HEAP32[$285 >> 2] = $68; //@line 20371
  $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 20372
  HEAP32[$286 >> 2] = $70; //@line 20373
  $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 20374
  HEAP32[$287 >> 2] = $72; //@line 20375
  $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 20376
  HEAP32[$288 >> 2] = $74; //@line 20377
  $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 20378
  HEAP32[$289 >> 2] = $76; //@line 20379
  $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 20380
  HEAP32[$290 >> 2] = $78; //@line 20381
  $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 20382
  HEAP8[$291 >> 0] = $80; //@line 20383
  $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 20384
  HEAP32[$292 >> 2] = $82; //@line 20385
  $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 20386
  HEAP8[$293 >> 0] = $84; //@line 20387
  $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 20388
  HEAP32[$294 >> 2] = $86; //@line 20389
  $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 20390
  HEAP8[$295 >> 0] = $88; //@line 20391
  $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 20392
  HEAP32[$296 >> 2] = $90; //@line 20393
  $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 20394
  HEAP32[$297 >> 2] = $92; //@line 20395
  $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 20396
  HEAP32[$298 >> 2] = $94; //@line 20397
  $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 20398
  HEAP32[$299 >> 2] = $96; //@line 20399
  $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 20400
  HEAP32[$300 >> 2] = $98; //@line 20401
  $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 20402
  HEAP32[$301 >> 2] = $100; //@line 20403
  $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 20404
  HEAP32[$302 >> 2] = $102; //@line 20405
  $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 20406
  HEAP32[$303 >> 2] = $106; //@line 20407
  $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 20408
  HEAP32[$304 >> 2] = $108; //@line 20409
  $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 20410
  HEAP32[$305 >> 2] = $110; //@line 20411
  $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 20412
  HEAP32[$306 >> 2] = $112; //@line 20413
  $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 20414
  HEAP32[$307 >> 2] = $114; //@line 20415
  $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 20416
  HEAP8[$308 >> 0] = $240; //@line 20417
  $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 20418
  HEAP32[$309 >> 2] = $116; //@line 20419
  sp = STACKTOP; //@line 20420
  return;
 } else if ((label | 0) == 13) {
  $313 = HEAP32[$311 >> 2] | 0; //@line 20424
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(236) | 0; //@line 20425
  $314 = FUNCTION_TABLE_ii[$313 & 15]($66) | 0; //@line 20426
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 20429
   $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 20430
   HEAP32[$315 >> 2] = $2; //@line 20431
   $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 20432
   HEAP32[$316 >> 2] = $4; //@line 20433
   $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 20434
   HEAP32[$317 >> 2] = $6; //@line 20435
   $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 20436
   HEAP32[$318 >> 2] = $8; //@line 20437
   $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 20438
   HEAP32[$319 >> 2] = $10; //@line 20439
   $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 20440
   HEAP32[$320 >> 2] = $12; //@line 20441
   $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 20442
   HEAP32[$321 >> 2] = $14; //@line 20443
   $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 20444
   HEAP32[$322 >> 2] = $16; //@line 20445
   $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 20446
   HEAP32[$323 >> 2] = $18; //@line 20447
   $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 20448
   HEAP32[$324 >> 2] = $20; //@line 20449
   $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 20450
   HEAP32[$325 >> 2] = $22; //@line 20451
   $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 20452
   HEAP32[$326 >> 2] = $24; //@line 20453
   $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 20454
   HEAP32[$327 >> 2] = $26; //@line 20455
   $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 20456
   HEAP32[$328 >> 2] = $28; //@line 20457
   $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 20458
   HEAP32[$329 >> 2] = $30; //@line 20459
   $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 20460
   HEAP32[$330 >> 2] = $32; //@line 20461
   $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 20462
   HEAP32[$331 >> 2] = $34; //@line 20463
   $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 20464
   HEAP32[$332 >> 2] = $36; //@line 20465
   $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 20466
   HEAP32[$333 >> 2] = $38; //@line 20467
   $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 20468
   HEAP32[$334 >> 2] = $40; //@line 20469
   $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 20470
   HEAP32[$335 >> 2] = $42; //@line 20471
   $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 20472
   HEAP32[$336 >> 2] = $44; //@line 20473
   $337 = $ReallocAsyncCtx3 + 92 | 0; //@line 20474
   HEAP32[$337 >> 2] = $46; //@line 20475
   $338 = $ReallocAsyncCtx3 + 96 | 0; //@line 20476
   HEAP32[$338 >> 2] = $48; //@line 20477
   $339 = $ReallocAsyncCtx3 + 100 | 0; //@line 20478
   HEAP32[$339 >> 2] = $50; //@line 20479
   $340 = $ReallocAsyncCtx3 + 104 | 0; //@line 20480
   HEAP32[$340 >> 2] = $52; //@line 20481
   $341 = $ReallocAsyncCtx3 + 108 | 0; //@line 20482
   HEAP32[$341 >> 2] = $54; //@line 20483
   $342 = $ReallocAsyncCtx3 + 112 | 0; //@line 20484
   HEAP32[$342 >> 2] = $56; //@line 20485
   $343 = $ReallocAsyncCtx3 + 116 | 0; //@line 20486
   HEAP32[$343 >> 2] = $58; //@line 20487
   $344 = $ReallocAsyncCtx3 + 120 | 0; //@line 20488
   HEAP32[$344 >> 2] = $60; //@line 20489
   $345 = $ReallocAsyncCtx3 + 124 | 0; //@line 20490
   HEAP32[$345 >> 2] = $62; //@line 20491
   $346 = $ReallocAsyncCtx3 + 128 | 0; //@line 20492
   HEAP32[$346 >> 2] = $64; //@line 20493
   $347 = $ReallocAsyncCtx3 + 132 | 0; //@line 20494
   HEAP32[$347 >> 2] = $66; //@line 20495
   $348 = $ReallocAsyncCtx3 + 136 | 0; //@line 20496
   HEAP32[$348 >> 2] = $68; //@line 20497
   $349 = $ReallocAsyncCtx3 + 140 | 0; //@line 20498
   HEAP32[$349 >> 2] = $70; //@line 20499
   $350 = $ReallocAsyncCtx3 + 144 | 0; //@line 20500
   HEAP32[$350 >> 2] = $72; //@line 20501
   $351 = $ReallocAsyncCtx3 + 148 | 0; //@line 20502
   HEAP32[$351 >> 2] = $74; //@line 20503
   $352 = $ReallocAsyncCtx3 + 152 | 0; //@line 20504
   HEAP32[$352 >> 2] = $76; //@line 20505
   $353 = $ReallocAsyncCtx3 + 156 | 0; //@line 20506
   HEAP32[$353 >> 2] = $78; //@line 20507
   $354 = $ReallocAsyncCtx3 + 160 | 0; //@line 20508
   HEAP8[$354 >> 0] = $80; //@line 20509
   $355 = $ReallocAsyncCtx3 + 164 | 0; //@line 20510
   HEAP32[$355 >> 2] = $82; //@line 20511
   $356 = $ReallocAsyncCtx3 + 168 | 0; //@line 20512
   HEAP8[$356 >> 0] = $84; //@line 20513
   $357 = $ReallocAsyncCtx3 + 172 | 0; //@line 20514
   HEAP32[$357 >> 2] = $86; //@line 20515
   $358 = $ReallocAsyncCtx3 + 176 | 0; //@line 20516
   HEAP8[$358 >> 0] = $88; //@line 20517
   $359 = $ReallocAsyncCtx3 + 180 | 0; //@line 20518
   HEAP32[$359 >> 2] = $90; //@line 20519
   $360 = $ReallocAsyncCtx3 + 184 | 0; //@line 20520
   HEAP32[$360 >> 2] = $92; //@line 20521
   $361 = $ReallocAsyncCtx3 + 188 | 0; //@line 20522
   HEAP32[$361 >> 2] = $94; //@line 20523
   $362 = $ReallocAsyncCtx3 + 192 | 0; //@line 20524
   HEAP32[$362 >> 2] = $96; //@line 20525
   $363 = $ReallocAsyncCtx3 + 196 | 0; //@line 20526
   HEAP32[$363 >> 2] = $98; //@line 20527
   $364 = $ReallocAsyncCtx3 + 200 | 0; //@line 20528
   HEAP32[$364 >> 2] = $100; //@line 20529
   $365 = $ReallocAsyncCtx3 + 204 | 0; //@line 20530
   HEAP32[$365 >> 2] = $102; //@line 20531
   $366 = $ReallocAsyncCtx3 + 208 | 0; //@line 20532
   HEAP8[$366 >> 0] = $119; //@line 20533
   $367 = $ReallocAsyncCtx3 + 212 | 0; //@line 20534
   HEAP32[$367 >> 2] = $106; //@line 20535
   $368 = $ReallocAsyncCtx3 + 216 | 0; //@line 20536
   HEAP32[$368 >> 2] = $108; //@line 20537
   $369 = $ReallocAsyncCtx3 + 220 | 0; //@line 20538
   HEAP32[$369 >> 2] = $110; //@line 20539
   $370 = $ReallocAsyncCtx3 + 224 | 0; //@line 20540
   HEAP32[$370 >> 2] = $112; //@line 20541
   $371 = $ReallocAsyncCtx3 + 228 | 0; //@line 20542
   HEAP32[$371 >> 2] = $114; //@line 20543
   $372 = $ReallocAsyncCtx3 + 232 | 0; //@line 20544
   HEAP32[$372 >> 2] = $116; //@line 20545
   sp = STACKTOP; //@line 20546
   return;
  }
  HEAP8[___async_retval >> 0] = $314; //@line 20550
  ___async_unwind = 0; //@line 20551
  HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 20552
  $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 20553
  HEAP32[$315 >> 2] = $2; //@line 20554
  $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 20555
  HEAP32[$316 >> 2] = $4; //@line 20556
  $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 20557
  HEAP32[$317 >> 2] = $6; //@line 20558
  $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 20559
  HEAP32[$318 >> 2] = $8; //@line 20560
  $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 20561
  HEAP32[$319 >> 2] = $10; //@line 20562
  $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 20563
  HEAP32[$320 >> 2] = $12; //@line 20564
  $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 20565
  HEAP32[$321 >> 2] = $14; //@line 20566
  $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 20567
  HEAP32[$322 >> 2] = $16; //@line 20568
  $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 20569
  HEAP32[$323 >> 2] = $18; //@line 20570
  $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 20571
  HEAP32[$324 >> 2] = $20; //@line 20572
  $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 20573
  HEAP32[$325 >> 2] = $22; //@line 20574
  $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 20575
  HEAP32[$326 >> 2] = $24; //@line 20576
  $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 20577
  HEAP32[$327 >> 2] = $26; //@line 20578
  $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 20579
  HEAP32[$328 >> 2] = $28; //@line 20580
  $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 20581
  HEAP32[$329 >> 2] = $30; //@line 20582
  $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 20583
  HEAP32[$330 >> 2] = $32; //@line 20584
  $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 20585
  HEAP32[$331 >> 2] = $34; //@line 20586
  $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 20587
  HEAP32[$332 >> 2] = $36; //@line 20588
  $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 20589
  HEAP32[$333 >> 2] = $38; //@line 20590
  $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 20591
  HEAP32[$334 >> 2] = $40; //@line 20592
  $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 20593
  HEAP32[$335 >> 2] = $42; //@line 20594
  $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 20595
  HEAP32[$336 >> 2] = $44; //@line 20596
  $337 = $ReallocAsyncCtx3 + 92 | 0; //@line 20597
  HEAP32[$337 >> 2] = $46; //@line 20598
  $338 = $ReallocAsyncCtx3 + 96 | 0; //@line 20599
  HEAP32[$338 >> 2] = $48; //@line 20600
  $339 = $ReallocAsyncCtx3 + 100 | 0; //@line 20601
  HEAP32[$339 >> 2] = $50; //@line 20602
  $340 = $ReallocAsyncCtx3 + 104 | 0; //@line 20603
  HEAP32[$340 >> 2] = $52; //@line 20604
  $341 = $ReallocAsyncCtx3 + 108 | 0; //@line 20605
  HEAP32[$341 >> 2] = $54; //@line 20606
  $342 = $ReallocAsyncCtx3 + 112 | 0; //@line 20607
  HEAP32[$342 >> 2] = $56; //@line 20608
  $343 = $ReallocAsyncCtx3 + 116 | 0; //@line 20609
  HEAP32[$343 >> 2] = $58; //@line 20610
  $344 = $ReallocAsyncCtx3 + 120 | 0; //@line 20611
  HEAP32[$344 >> 2] = $60; //@line 20612
  $345 = $ReallocAsyncCtx3 + 124 | 0; //@line 20613
  HEAP32[$345 >> 2] = $62; //@line 20614
  $346 = $ReallocAsyncCtx3 + 128 | 0; //@line 20615
  HEAP32[$346 >> 2] = $64; //@line 20616
  $347 = $ReallocAsyncCtx3 + 132 | 0; //@line 20617
  HEAP32[$347 >> 2] = $66; //@line 20618
  $348 = $ReallocAsyncCtx3 + 136 | 0; //@line 20619
  HEAP32[$348 >> 2] = $68; //@line 20620
  $349 = $ReallocAsyncCtx3 + 140 | 0; //@line 20621
  HEAP32[$349 >> 2] = $70; //@line 20622
  $350 = $ReallocAsyncCtx3 + 144 | 0; //@line 20623
  HEAP32[$350 >> 2] = $72; //@line 20624
  $351 = $ReallocAsyncCtx3 + 148 | 0; //@line 20625
  HEAP32[$351 >> 2] = $74; //@line 20626
  $352 = $ReallocAsyncCtx3 + 152 | 0; //@line 20627
  HEAP32[$352 >> 2] = $76; //@line 20628
  $353 = $ReallocAsyncCtx3 + 156 | 0; //@line 20629
  HEAP32[$353 >> 2] = $78; //@line 20630
  $354 = $ReallocAsyncCtx3 + 160 | 0; //@line 20631
  HEAP8[$354 >> 0] = $80; //@line 20632
  $355 = $ReallocAsyncCtx3 + 164 | 0; //@line 20633
  HEAP32[$355 >> 2] = $82; //@line 20634
  $356 = $ReallocAsyncCtx3 + 168 | 0; //@line 20635
  HEAP8[$356 >> 0] = $84; //@line 20636
  $357 = $ReallocAsyncCtx3 + 172 | 0; //@line 20637
  HEAP32[$357 >> 2] = $86; //@line 20638
  $358 = $ReallocAsyncCtx3 + 176 | 0; //@line 20639
  HEAP8[$358 >> 0] = $88; //@line 20640
  $359 = $ReallocAsyncCtx3 + 180 | 0; //@line 20641
  HEAP32[$359 >> 2] = $90; //@line 20642
  $360 = $ReallocAsyncCtx3 + 184 | 0; //@line 20643
  HEAP32[$360 >> 2] = $92; //@line 20644
  $361 = $ReallocAsyncCtx3 + 188 | 0; //@line 20645
  HEAP32[$361 >> 2] = $94; //@line 20646
  $362 = $ReallocAsyncCtx3 + 192 | 0; //@line 20647
  HEAP32[$362 >> 2] = $96; //@line 20648
  $363 = $ReallocAsyncCtx3 + 196 | 0; //@line 20649
  HEAP32[$363 >> 2] = $98; //@line 20650
  $364 = $ReallocAsyncCtx3 + 200 | 0; //@line 20651
  HEAP32[$364 >> 2] = $100; //@line 20652
  $365 = $ReallocAsyncCtx3 + 204 | 0; //@line 20653
  HEAP32[$365 >> 2] = $102; //@line 20654
  $366 = $ReallocAsyncCtx3 + 208 | 0; //@line 20655
  HEAP8[$366 >> 0] = $119; //@line 20656
  $367 = $ReallocAsyncCtx3 + 212 | 0; //@line 20657
  HEAP32[$367 >> 2] = $106; //@line 20658
  $368 = $ReallocAsyncCtx3 + 216 | 0; //@line 20659
  HEAP32[$368 >> 2] = $108; //@line 20660
  $369 = $ReallocAsyncCtx3 + 220 | 0; //@line 20661
  HEAP32[$369 >> 2] = $110; //@line 20662
  $370 = $ReallocAsyncCtx3 + 224 | 0; //@line 20663
  HEAP32[$370 >> 2] = $112; //@line 20664
  $371 = $ReallocAsyncCtx3 + 228 | 0; //@line 20665
  HEAP32[$371 >> 2] = $114; //@line 20666
  $372 = $ReallocAsyncCtx3 + 232 | 0; //@line 20667
  HEAP32[$372 >> 2] = $116; //@line 20668
  sp = STACKTOP; //@line 20669
  return;
 } else if ((label | 0) == 19) {
  $392 = HEAP8[$82 + ($119 & 255) >> 0] | 0; //@line 20676
  HEAP32[$114 >> 2] = (HEAPU8[$82 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$82 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$82 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 20697
  HEAP32[$94 >> 2] = 0; //@line 20698
  $413 = $$0$be + 6 << 24 >> 24; //@line 20699
  HEAP8[$96 >> 0] = HEAP8[$82 + ($$0$be + 5 & 255) >> 0] | 0; //@line 20703
  $419 = HEAP32[(HEAP32[$22 >> 2] | 0) + 8 >> 2] | 0; //@line 20706
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(236) | 0; //@line 20707
  $420 = FUNCTION_TABLE_iiii[$419 & 31]($62, $392, $4) | 0; //@line 20708
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 20711
   $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 20712
   HEAP32[$421 >> 2] = $2; //@line 20713
   $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 20714
   HEAP32[$422 >> 2] = $4; //@line 20715
   $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 20716
   HEAP32[$423 >> 2] = $6; //@line 20717
   $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 20718
   HEAP32[$424 >> 2] = $8; //@line 20719
   $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 20720
   HEAP32[$425 >> 2] = $10; //@line 20721
   $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 20722
   HEAP32[$426 >> 2] = $12; //@line 20723
   $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 20724
   HEAP32[$427 >> 2] = $14; //@line 20725
   $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 20726
   HEAP32[$428 >> 2] = $16; //@line 20727
   $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 20728
   HEAP32[$429 >> 2] = $18; //@line 20729
   $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 20730
   HEAP32[$430 >> 2] = $20; //@line 20731
   $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 20732
   HEAP32[$431 >> 2] = $22; //@line 20733
   $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 20734
   HEAP32[$432 >> 2] = $24; //@line 20735
   $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 20736
   HEAP32[$433 >> 2] = $26; //@line 20737
   $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 20738
   HEAP32[$434 >> 2] = $28; //@line 20739
   $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 20740
   HEAP32[$435 >> 2] = $30; //@line 20741
   $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 20742
   HEAP32[$436 >> 2] = $32; //@line 20743
   $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 20744
   HEAP32[$437 >> 2] = $34; //@line 20745
   $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 20746
   HEAP32[$438 >> 2] = $36; //@line 20747
   $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 20748
   HEAP32[$439 >> 2] = $38; //@line 20749
   $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 20750
   HEAP32[$440 >> 2] = $40; //@line 20751
   $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 20752
   HEAP32[$441 >> 2] = $42; //@line 20753
   $442 = $ReallocAsyncCtx4 + 88 | 0; //@line 20754
   HEAP32[$442 >> 2] = $44; //@line 20755
   $443 = $ReallocAsyncCtx4 + 92 | 0; //@line 20756
   HEAP32[$443 >> 2] = $46; //@line 20757
   $444 = $ReallocAsyncCtx4 + 96 | 0; //@line 20758
   HEAP32[$444 >> 2] = $48; //@line 20759
   $445 = $ReallocAsyncCtx4 + 100 | 0; //@line 20760
   HEAP32[$445 >> 2] = $50; //@line 20761
   $446 = $ReallocAsyncCtx4 + 104 | 0; //@line 20762
   HEAP32[$446 >> 2] = $52; //@line 20763
   $447 = $ReallocAsyncCtx4 + 108 | 0; //@line 20764
   HEAP32[$447 >> 2] = $54; //@line 20765
   $448 = $ReallocAsyncCtx4 + 112 | 0; //@line 20766
   HEAP32[$448 >> 2] = $56; //@line 20767
   $449 = $ReallocAsyncCtx4 + 116 | 0; //@line 20768
   HEAP32[$449 >> 2] = $58; //@line 20769
   $450 = $ReallocAsyncCtx4 + 120 | 0; //@line 20770
   HEAP32[$450 >> 2] = $60; //@line 20771
   $451 = $ReallocAsyncCtx4 + 124 | 0; //@line 20772
   HEAP32[$451 >> 2] = $62; //@line 20773
   $452 = $ReallocAsyncCtx4 + 128 | 0; //@line 20774
   HEAP32[$452 >> 2] = $64; //@line 20775
   $453 = $ReallocAsyncCtx4 + 132 | 0; //@line 20776
   HEAP32[$453 >> 2] = $66; //@line 20777
   $454 = $ReallocAsyncCtx4 + 136 | 0; //@line 20778
   HEAP32[$454 >> 2] = $68; //@line 20779
   $455 = $ReallocAsyncCtx4 + 140 | 0; //@line 20780
   HEAP32[$455 >> 2] = $70; //@line 20781
   $456 = $ReallocAsyncCtx4 + 144 | 0; //@line 20782
   HEAP32[$456 >> 2] = $72; //@line 20783
   $457 = $ReallocAsyncCtx4 + 148 | 0; //@line 20784
   HEAP32[$457 >> 2] = $74; //@line 20785
   $458 = $ReallocAsyncCtx4 + 152 | 0; //@line 20786
   HEAP32[$458 >> 2] = $76; //@line 20787
   $459 = $ReallocAsyncCtx4 + 156 | 0; //@line 20788
   HEAP32[$459 >> 2] = $78; //@line 20789
   $460 = $ReallocAsyncCtx4 + 160 | 0; //@line 20790
   HEAP8[$460 >> 0] = $80; //@line 20791
   $461 = $ReallocAsyncCtx4 + 164 | 0; //@line 20792
   HEAP32[$461 >> 2] = $82; //@line 20793
   $462 = $ReallocAsyncCtx4 + 168 | 0; //@line 20794
   HEAP8[$462 >> 0] = $84; //@line 20795
   $463 = $ReallocAsyncCtx4 + 172 | 0; //@line 20796
   HEAP32[$463 >> 2] = $86; //@line 20797
   $464 = $ReallocAsyncCtx4 + 176 | 0; //@line 20798
   HEAP8[$464 >> 0] = $88; //@line 20799
   $465 = $ReallocAsyncCtx4 + 180 | 0; //@line 20800
   HEAP32[$465 >> 2] = $90; //@line 20801
   $466 = $ReallocAsyncCtx4 + 184 | 0; //@line 20802
   HEAP32[$466 >> 2] = $92; //@line 20803
   $467 = $ReallocAsyncCtx4 + 188 | 0; //@line 20804
   HEAP32[$467 >> 2] = $94; //@line 20805
   $468 = $ReallocAsyncCtx4 + 192 | 0; //@line 20806
   HEAP32[$468 >> 2] = $96; //@line 20807
   $469 = $ReallocAsyncCtx4 + 196 | 0; //@line 20808
   HEAP32[$469 >> 2] = $98; //@line 20809
   $470 = $ReallocAsyncCtx4 + 200 | 0; //@line 20810
   HEAP32[$470 >> 2] = $100; //@line 20811
   $471 = $ReallocAsyncCtx4 + 204 | 0; //@line 20812
   HEAP8[$471 >> 0] = $413; //@line 20813
   $472 = $ReallocAsyncCtx4 + 208 | 0; //@line 20814
   HEAP32[$472 >> 2] = $102; //@line 20815
   $473 = $ReallocAsyncCtx4 + 212 | 0; //@line 20816
   HEAP32[$473 >> 2] = $106; //@line 20817
   $474 = $ReallocAsyncCtx4 + 216 | 0; //@line 20818
   HEAP32[$474 >> 2] = $108; //@line 20819
   $475 = $ReallocAsyncCtx4 + 220 | 0; //@line 20820
   HEAP32[$475 >> 2] = $110; //@line 20821
   $476 = $ReallocAsyncCtx4 + 224 | 0; //@line 20822
   HEAP32[$476 >> 2] = $112; //@line 20823
   $477 = $ReallocAsyncCtx4 + 228 | 0; //@line 20824
   HEAP32[$477 >> 2] = $114; //@line 20825
   $478 = $ReallocAsyncCtx4 + 232 | 0; //@line 20826
   HEAP32[$478 >> 2] = $116; //@line 20827
   sp = STACKTOP; //@line 20828
   return;
  }
  HEAP8[___async_retval >> 0] = $420; //@line 20832
  ___async_unwind = 0; //@line 20833
  HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 20834
  $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 20835
  HEAP32[$421 >> 2] = $2; //@line 20836
  $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 20837
  HEAP32[$422 >> 2] = $4; //@line 20838
  $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 20839
  HEAP32[$423 >> 2] = $6; //@line 20840
  $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 20841
  HEAP32[$424 >> 2] = $8; //@line 20842
  $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 20843
  HEAP32[$425 >> 2] = $10; //@line 20844
  $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 20845
  HEAP32[$426 >> 2] = $12; //@line 20846
  $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 20847
  HEAP32[$427 >> 2] = $14; //@line 20848
  $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 20849
  HEAP32[$428 >> 2] = $16; //@line 20850
  $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 20851
  HEAP32[$429 >> 2] = $18; //@line 20852
  $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 20853
  HEAP32[$430 >> 2] = $20; //@line 20854
  $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 20855
  HEAP32[$431 >> 2] = $22; //@line 20856
  $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 20857
  HEAP32[$432 >> 2] = $24; //@line 20858
  $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 20859
  HEAP32[$433 >> 2] = $26; //@line 20860
  $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 20861
  HEAP32[$434 >> 2] = $28; //@line 20862
  $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 20863
  HEAP32[$435 >> 2] = $30; //@line 20864
  $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 20865
  HEAP32[$436 >> 2] = $32; //@line 20866
  $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 20867
  HEAP32[$437 >> 2] = $34; //@line 20868
  $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 20869
  HEAP32[$438 >> 2] = $36; //@line 20870
  $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 20871
  HEAP32[$439 >> 2] = $38; //@line 20872
  $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 20873
  HEAP32[$440 >> 2] = $40; //@line 20874
  $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 20875
  HEAP32[$441 >> 2] = $42; //@line 20876
  $442 = $ReallocAsyncCtx4 + 88 | 0; //@line 20877
  HEAP32[$442 >> 2] = $44; //@line 20878
  $443 = $ReallocAsyncCtx4 + 92 | 0; //@line 20879
  HEAP32[$443 >> 2] = $46; //@line 20880
  $444 = $ReallocAsyncCtx4 + 96 | 0; //@line 20881
  HEAP32[$444 >> 2] = $48; //@line 20882
  $445 = $ReallocAsyncCtx4 + 100 | 0; //@line 20883
  HEAP32[$445 >> 2] = $50; //@line 20884
  $446 = $ReallocAsyncCtx4 + 104 | 0; //@line 20885
  HEAP32[$446 >> 2] = $52; //@line 20886
  $447 = $ReallocAsyncCtx4 + 108 | 0; //@line 20887
  HEAP32[$447 >> 2] = $54; //@line 20888
  $448 = $ReallocAsyncCtx4 + 112 | 0; //@line 20889
  HEAP32[$448 >> 2] = $56; //@line 20890
  $449 = $ReallocAsyncCtx4 + 116 | 0; //@line 20891
  HEAP32[$449 >> 2] = $58; //@line 20892
  $450 = $ReallocAsyncCtx4 + 120 | 0; //@line 20893
  HEAP32[$450 >> 2] = $60; //@line 20894
  $451 = $ReallocAsyncCtx4 + 124 | 0; //@line 20895
  HEAP32[$451 >> 2] = $62; //@line 20896
  $452 = $ReallocAsyncCtx4 + 128 | 0; //@line 20897
  HEAP32[$452 >> 2] = $64; //@line 20898
  $453 = $ReallocAsyncCtx4 + 132 | 0; //@line 20899
  HEAP32[$453 >> 2] = $66; //@line 20900
  $454 = $ReallocAsyncCtx4 + 136 | 0; //@line 20901
  HEAP32[$454 >> 2] = $68; //@line 20902
  $455 = $ReallocAsyncCtx4 + 140 | 0; //@line 20903
  HEAP32[$455 >> 2] = $70; //@line 20904
  $456 = $ReallocAsyncCtx4 + 144 | 0; //@line 20905
  HEAP32[$456 >> 2] = $72; //@line 20906
  $457 = $ReallocAsyncCtx4 + 148 | 0; //@line 20907
  HEAP32[$457 >> 2] = $74; //@line 20908
  $458 = $ReallocAsyncCtx4 + 152 | 0; //@line 20909
  HEAP32[$458 >> 2] = $76; //@line 20910
  $459 = $ReallocAsyncCtx4 + 156 | 0; //@line 20911
  HEAP32[$459 >> 2] = $78; //@line 20912
  $460 = $ReallocAsyncCtx4 + 160 | 0; //@line 20913
  HEAP8[$460 >> 0] = $80; //@line 20914
  $461 = $ReallocAsyncCtx4 + 164 | 0; //@line 20915
  HEAP32[$461 >> 2] = $82; //@line 20916
  $462 = $ReallocAsyncCtx4 + 168 | 0; //@line 20917
  HEAP8[$462 >> 0] = $84; //@line 20918
  $463 = $ReallocAsyncCtx4 + 172 | 0; //@line 20919
  HEAP32[$463 >> 2] = $86; //@line 20920
  $464 = $ReallocAsyncCtx4 + 176 | 0; //@line 20921
  HEAP8[$464 >> 0] = $88; //@line 20922
  $465 = $ReallocAsyncCtx4 + 180 | 0; //@line 20923
  HEAP32[$465 >> 2] = $90; //@line 20924
  $466 = $ReallocAsyncCtx4 + 184 | 0; //@line 20925
  HEAP32[$466 >> 2] = $92; //@line 20926
  $467 = $ReallocAsyncCtx4 + 188 | 0; //@line 20927
  HEAP32[$467 >> 2] = $94; //@line 20928
  $468 = $ReallocAsyncCtx4 + 192 | 0; //@line 20929
  HEAP32[$468 >> 2] = $96; //@line 20930
  $469 = $ReallocAsyncCtx4 + 196 | 0; //@line 20931
  HEAP32[$469 >> 2] = $98; //@line 20932
  $470 = $ReallocAsyncCtx4 + 200 | 0; //@line 20933
  HEAP32[$470 >> 2] = $100; //@line 20934
  $471 = $ReallocAsyncCtx4 + 204 | 0; //@line 20935
  HEAP8[$471 >> 0] = $413; //@line 20936
  $472 = $ReallocAsyncCtx4 + 208 | 0; //@line 20937
  HEAP32[$472 >> 2] = $102; //@line 20938
  $473 = $ReallocAsyncCtx4 + 212 | 0; //@line 20939
  HEAP32[$473 >> 2] = $106; //@line 20940
  $474 = $ReallocAsyncCtx4 + 216 | 0; //@line 20941
  HEAP32[$474 >> 2] = $108; //@line 20942
  $475 = $ReallocAsyncCtx4 + 220 | 0; //@line 20943
  HEAP32[$475 >> 2] = $110; //@line 20944
  $476 = $ReallocAsyncCtx4 + 224 | 0; //@line 20945
  HEAP32[$476 >> 2] = $112; //@line 20946
  $477 = $ReallocAsyncCtx4 + 228 | 0; //@line 20947
  HEAP32[$477 >> 2] = $114; //@line 20948
  $478 = $ReallocAsyncCtx4 + 232 | 0; //@line 20949
  HEAP32[$478 >> 2] = $116; //@line 20950
  sp = STACKTOP; //@line 20951
  return;
 } else if ((label | 0) == 25) {
  $499 = $$0$be + 2 << 24 >> 24; //@line 20955
  $503 = HEAPU8[$82 + ($119 & 255) >> 0] | 0; //@line 20959
  $505 = $503 >>> 5 & 1; //@line 20962
  $507 = $503 >>> 4 & 1; //@line 20965
  $510 = HEAP32[(HEAP32[$24 >> 2] | 0) + 44 >> 2] | 0; //@line 20968
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(252) | 0; //@line 20969
  $511 = FUNCTION_TABLE_iiii[$510 & 31]($62, $507, $505) | 0; //@line 20970
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 20973
   $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 20974
   HEAP32[$512 >> 2] = $2; //@line 20975
   $513 = $ReallocAsyncCtx5 + 8 | 0; //@line 20976
   HEAP32[$513 >> 2] = $4; //@line 20977
   $514 = $ReallocAsyncCtx5 + 12 | 0; //@line 20978
   HEAP32[$514 >> 2] = $6; //@line 20979
   $515 = $ReallocAsyncCtx5 + 16 | 0; //@line 20980
   HEAP32[$515 >> 2] = $8; //@line 20981
   $516 = $ReallocAsyncCtx5 + 20 | 0; //@line 20982
   HEAP32[$516 >> 2] = $10; //@line 20983
   $517 = $ReallocAsyncCtx5 + 24 | 0; //@line 20984
   HEAP32[$517 >> 2] = $12; //@line 20985
   $518 = $ReallocAsyncCtx5 + 28 | 0; //@line 20986
   HEAP32[$518 >> 2] = $14; //@line 20987
   $519 = $ReallocAsyncCtx5 + 32 | 0; //@line 20988
   HEAP32[$519 >> 2] = $16; //@line 20989
   $520 = $ReallocAsyncCtx5 + 36 | 0; //@line 20990
   HEAP32[$520 >> 2] = $18; //@line 20991
   $521 = $ReallocAsyncCtx5 + 40 | 0; //@line 20992
   HEAP32[$521 >> 2] = $20; //@line 20993
   $522 = $ReallocAsyncCtx5 + 44 | 0; //@line 20994
   HEAP32[$522 >> 2] = $22; //@line 20995
   $523 = $ReallocAsyncCtx5 + 48 | 0; //@line 20996
   HEAP32[$523 >> 2] = $24; //@line 20997
   $524 = $ReallocAsyncCtx5 + 52 | 0; //@line 20998
   HEAP32[$524 >> 2] = $26; //@line 20999
   $525 = $ReallocAsyncCtx5 + 56 | 0; //@line 21000
   HEAP8[$525 >> 0] = $507; //@line 21001
   $526 = $ReallocAsyncCtx5 + 60 | 0; //@line 21002
   HEAP32[$526 >> 2] = $28; //@line 21003
   $527 = $ReallocAsyncCtx5 + 64 | 0; //@line 21004
   HEAP32[$527 >> 2] = $30; //@line 21005
   $528 = $ReallocAsyncCtx5 + 68 | 0; //@line 21006
   HEAP32[$528 >> 2] = $32; //@line 21007
   $529 = $ReallocAsyncCtx5 + 72 | 0; //@line 21008
   HEAP32[$529 >> 2] = $34; //@line 21009
   $530 = $ReallocAsyncCtx5 + 76 | 0; //@line 21010
   HEAP32[$530 >> 2] = $36; //@line 21011
   $531 = $ReallocAsyncCtx5 + 80 | 0; //@line 21012
   HEAP32[$531 >> 2] = $38; //@line 21013
   $532 = $ReallocAsyncCtx5 + 84 | 0; //@line 21014
   HEAP32[$532 >> 2] = $40; //@line 21015
   $533 = $ReallocAsyncCtx5 + 88 | 0; //@line 21016
   HEAP32[$533 >> 2] = $42; //@line 21017
   $534 = $ReallocAsyncCtx5 + 92 | 0; //@line 21018
   HEAP32[$534 >> 2] = $44; //@line 21019
   $535 = $ReallocAsyncCtx5 + 96 | 0; //@line 21020
   HEAP32[$535 >> 2] = $46; //@line 21021
   $536 = $ReallocAsyncCtx5 + 100 | 0; //@line 21022
   HEAP32[$536 >> 2] = $503; //@line 21023
   $537 = $ReallocAsyncCtx5 + 104 | 0; //@line 21024
   HEAP32[$537 >> 2] = $48; //@line 21025
   $538 = $ReallocAsyncCtx5 + 108 | 0; //@line 21026
   HEAP32[$538 >> 2] = $50; //@line 21027
   $539 = $ReallocAsyncCtx5 + 112 | 0; //@line 21028
   HEAP32[$539 >> 2] = $52; //@line 21029
   $540 = $ReallocAsyncCtx5 + 116 | 0; //@line 21030
   HEAP32[$540 >> 2] = $54; //@line 21031
   $541 = $ReallocAsyncCtx5 + 120 | 0; //@line 21032
   HEAP32[$541 >> 2] = $56; //@line 21033
   $542 = $ReallocAsyncCtx5 + 124 | 0; //@line 21034
   HEAP32[$542 >> 2] = $58; //@line 21035
   $543 = $ReallocAsyncCtx5 + 128 | 0; //@line 21036
   HEAP32[$543 >> 2] = $60; //@line 21037
   $544 = $ReallocAsyncCtx5 + 132 | 0; //@line 21038
   HEAP32[$544 >> 2] = $62; //@line 21039
   $545 = $ReallocAsyncCtx5 + 136 | 0; //@line 21040
   HEAP32[$545 >> 2] = $64; //@line 21041
   $546 = $ReallocAsyncCtx5 + 140 | 0; //@line 21042
   HEAP8[$546 >> 0] = $505; //@line 21043
   $547 = $ReallocAsyncCtx5 + 144 | 0; //@line 21044
   HEAP32[$547 >> 2] = $66; //@line 21045
   $548 = $ReallocAsyncCtx5 + 148 | 0; //@line 21046
   HEAP32[$548 >> 2] = $68; //@line 21047
   $549 = $ReallocAsyncCtx5 + 152 | 0; //@line 21048
   HEAP32[$549 >> 2] = $70; //@line 21049
   $550 = $ReallocAsyncCtx5 + 156 | 0; //@line 21050
   HEAP32[$550 >> 2] = $72; //@line 21051
   $551 = $ReallocAsyncCtx5 + 160 | 0; //@line 21052
   HEAP32[$551 >> 2] = $74; //@line 21053
   $552 = $ReallocAsyncCtx5 + 164 | 0; //@line 21054
   HEAP32[$552 >> 2] = $76; //@line 21055
   $553 = $ReallocAsyncCtx5 + 168 | 0; //@line 21056
   HEAP32[$553 >> 2] = $78; //@line 21057
   $554 = $ReallocAsyncCtx5 + 172 | 0; //@line 21058
   HEAP8[$554 >> 0] = $80; //@line 21059
   $555 = $ReallocAsyncCtx5 + 176 | 0; //@line 21060
   HEAP32[$555 >> 2] = $82; //@line 21061
   $556 = $ReallocAsyncCtx5 + 180 | 0; //@line 21062
   HEAP8[$556 >> 0] = $84; //@line 21063
   $557 = $ReallocAsyncCtx5 + 184 | 0; //@line 21064
   HEAP32[$557 >> 2] = $86; //@line 21065
   $558 = $ReallocAsyncCtx5 + 188 | 0; //@line 21066
   HEAP8[$558 >> 0] = $88; //@line 21067
   $559 = $ReallocAsyncCtx5 + 192 | 0; //@line 21068
   HEAP32[$559 >> 2] = $$0107$be; //@line 21069
   $560 = $ReallocAsyncCtx5 + 196 | 0; //@line 21070
   HEAP32[$560 >> 2] = $90; //@line 21071
   $561 = $ReallocAsyncCtx5 + 200 | 0; //@line 21072
   HEAP32[$561 >> 2] = $92; //@line 21073
   $562 = $ReallocAsyncCtx5 + 204 | 0; //@line 21074
   HEAP32[$562 >> 2] = $94; //@line 21075
   $563 = $ReallocAsyncCtx5 + 208 | 0; //@line 21076
   HEAP32[$563 >> 2] = $96; //@line 21077
   $564 = $ReallocAsyncCtx5 + 212 | 0; //@line 21078
   HEAP32[$564 >> 2] = $98; //@line 21079
   $565 = $ReallocAsyncCtx5 + 216 | 0; //@line 21080
   HEAP32[$565 >> 2] = $100; //@line 21081
   $566 = $ReallocAsyncCtx5 + 220 | 0; //@line 21082
   HEAP8[$566 >> 0] = $499; //@line 21083
   $567 = $ReallocAsyncCtx5 + 224 | 0; //@line 21084
   HEAP32[$567 >> 2] = $102; //@line 21085
   $568 = $ReallocAsyncCtx5 + 228 | 0; //@line 21086
   HEAP32[$568 >> 2] = $106; //@line 21087
   $569 = $ReallocAsyncCtx5 + 232 | 0; //@line 21088
   HEAP32[$569 >> 2] = $108; //@line 21089
   $570 = $ReallocAsyncCtx5 + 236 | 0; //@line 21090
   HEAP32[$570 >> 2] = $110; //@line 21091
   $571 = $ReallocAsyncCtx5 + 240 | 0; //@line 21092
   HEAP32[$571 >> 2] = $112; //@line 21093
   $572 = $ReallocAsyncCtx5 + 244 | 0; //@line 21094
   HEAP32[$572 >> 2] = $114; //@line 21095
   $573 = $ReallocAsyncCtx5 + 248 | 0; //@line 21096
   HEAP32[$573 >> 2] = $116; //@line 21097
   sp = STACKTOP; //@line 21098
   return;
  }
  HEAP8[___async_retval >> 0] = $511 & 1; //@line 21103
  ___async_unwind = 0; //@line 21104
  HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 21105
  $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 21106
  HEAP32[$512 >> 2] = $2; //@line 21107
  $513 = $ReallocAsyncCtx5 + 8 | 0; //@line 21108
  HEAP32[$513 >> 2] = $4; //@line 21109
  $514 = $ReallocAsyncCtx5 + 12 | 0; //@line 21110
  HEAP32[$514 >> 2] = $6; //@line 21111
  $515 = $ReallocAsyncCtx5 + 16 | 0; //@line 21112
  HEAP32[$515 >> 2] = $8; //@line 21113
  $516 = $ReallocAsyncCtx5 + 20 | 0; //@line 21114
  HEAP32[$516 >> 2] = $10; //@line 21115
  $517 = $ReallocAsyncCtx5 + 24 | 0; //@line 21116
  HEAP32[$517 >> 2] = $12; //@line 21117
  $518 = $ReallocAsyncCtx5 + 28 | 0; //@line 21118
  HEAP32[$518 >> 2] = $14; //@line 21119
  $519 = $ReallocAsyncCtx5 + 32 | 0; //@line 21120
  HEAP32[$519 >> 2] = $16; //@line 21121
  $520 = $ReallocAsyncCtx5 + 36 | 0; //@line 21122
  HEAP32[$520 >> 2] = $18; //@line 21123
  $521 = $ReallocAsyncCtx5 + 40 | 0; //@line 21124
  HEAP32[$521 >> 2] = $20; //@line 21125
  $522 = $ReallocAsyncCtx5 + 44 | 0; //@line 21126
  HEAP32[$522 >> 2] = $22; //@line 21127
  $523 = $ReallocAsyncCtx5 + 48 | 0; //@line 21128
  HEAP32[$523 >> 2] = $24; //@line 21129
  $524 = $ReallocAsyncCtx5 + 52 | 0; //@line 21130
  HEAP32[$524 >> 2] = $26; //@line 21131
  $525 = $ReallocAsyncCtx5 + 56 | 0; //@line 21132
  HEAP8[$525 >> 0] = $507; //@line 21133
  $526 = $ReallocAsyncCtx5 + 60 | 0; //@line 21134
  HEAP32[$526 >> 2] = $28; //@line 21135
  $527 = $ReallocAsyncCtx5 + 64 | 0; //@line 21136
  HEAP32[$527 >> 2] = $30; //@line 21137
  $528 = $ReallocAsyncCtx5 + 68 | 0; //@line 21138
  HEAP32[$528 >> 2] = $32; //@line 21139
  $529 = $ReallocAsyncCtx5 + 72 | 0; //@line 21140
  HEAP32[$529 >> 2] = $34; //@line 21141
  $530 = $ReallocAsyncCtx5 + 76 | 0; //@line 21142
  HEAP32[$530 >> 2] = $36; //@line 21143
  $531 = $ReallocAsyncCtx5 + 80 | 0; //@line 21144
  HEAP32[$531 >> 2] = $38; //@line 21145
  $532 = $ReallocAsyncCtx5 + 84 | 0; //@line 21146
  HEAP32[$532 >> 2] = $40; //@line 21147
  $533 = $ReallocAsyncCtx5 + 88 | 0; //@line 21148
  HEAP32[$533 >> 2] = $42; //@line 21149
  $534 = $ReallocAsyncCtx5 + 92 | 0; //@line 21150
  HEAP32[$534 >> 2] = $44; //@line 21151
  $535 = $ReallocAsyncCtx5 + 96 | 0; //@line 21152
  HEAP32[$535 >> 2] = $46; //@line 21153
  $536 = $ReallocAsyncCtx5 + 100 | 0; //@line 21154
  HEAP32[$536 >> 2] = $503; //@line 21155
  $537 = $ReallocAsyncCtx5 + 104 | 0; //@line 21156
  HEAP32[$537 >> 2] = $48; //@line 21157
  $538 = $ReallocAsyncCtx5 + 108 | 0; //@line 21158
  HEAP32[$538 >> 2] = $50; //@line 21159
  $539 = $ReallocAsyncCtx5 + 112 | 0; //@line 21160
  HEAP32[$539 >> 2] = $52; //@line 21161
  $540 = $ReallocAsyncCtx5 + 116 | 0; //@line 21162
  HEAP32[$540 >> 2] = $54; //@line 21163
  $541 = $ReallocAsyncCtx5 + 120 | 0; //@line 21164
  HEAP32[$541 >> 2] = $56; //@line 21165
  $542 = $ReallocAsyncCtx5 + 124 | 0; //@line 21166
  HEAP32[$542 >> 2] = $58; //@line 21167
  $543 = $ReallocAsyncCtx5 + 128 | 0; //@line 21168
  HEAP32[$543 >> 2] = $60; //@line 21169
  $544 = $ReallocAsyncCtx5 + 132 | 0; //@line 21170
  HEAP32[$544 >> 2] = $62; //@line 21171
  $545 = $ReallocAsyncCtx5 + 136 | 0; //@line 21172
  HEAP32[$545 >> 2] = $64; //@line 21173
  $546 = $ReallocAsyncCtx5 + 140 | 0; //@line 21174
  HEAP8[$546 >> 0] = $505; //@line 21175
  $547 = $ReallocAsyncCtx5 + 144 | 0; //@line 21176
  HEAP32[$547 >> 2] = $66; //@line 21177
  $548 = $ReallocAsyncCtx5 + 148 | 0; //@line 21178
  HEAP32[$548 >> 2] = $68; //@line 21179
  $549 = $ReallocAsyncCtx5 + 152 | 0; //@line 21180
  HEAP32[$549 >> 2] = $70; //@line 21181
  $550 = $ReallocAsyncCtx5 + 156 | 0; //@line 21182
  HEAP32[$550 >> 2] = $72; //@line 21183
  $551 = $ReallocAsyncCtx5 + 160 | 0; //@line 21184
  HEAP32[$551 >> 2] = $74; //@line 21185
  $552 = $ReallocAsyncCtx5 + 164 | 0; //@line 21186
  HEAP32[$552 >> 2] = $76; //@line 21187
  $553 = $ReallocAsyncCtx5 + 168 | 0; //@line 21188
  HEAP32[$553 >> 2] = $78; //@line 21189
  $554 = $ReallocAsyncCtx5 + 172 | 0; //@line 21190
  HEAP8[$554 >> 0] = $80; //@line 21191
  $555 = $ReallocAsyncCtx5 + 176 | 0; //@line 21192
  HEAP32[$555 >> 2] = $82; //@line 21193
  $556 = $ReallocAsyncCtx5 + 180 | 0; //@line 21194
  HEAP8[$556 >> 0] = $84; //@line 21195
  $557 = $ReallocAsyncCtx5 + 184 | 0; //@line 21196
  HEAP32[$557 >> 2] = $86; //@line 21197
  $558 = $ReallocAsyncCtx5 + 188 | 0; //@line 21198
  HEAP8[$558 >> 0] = $88; //@line 21199
  $559 = $ReallocAsyncCtx5 + 192 | 0; //@line 21200
  HEAP32[$559 >> 2] = $$0107$be; //@line 21201
  $560 = $ReallocAsyncCtx5 + 196 | 0; //@line 21202
  HEAP32[$560 >> 2] = $90; //@line 21203
  $561 = $ReallocAsyncCtx5 + 200 | 0; //@line 21204
  HEAP32[$561 >> 2] = $92; //@line 21205
  $562 = $ReallocAsyncCtx5 + 204 | 0; //@line 21206
  HEAP32[$562 >> 2] = $94; //@line 21207
  $563 = $ReallocAsyncCtx5 + 208 | 0; //@line 21208
  HEAP32[$563 >> 2] = $96; //@line 21209
  $564 = $ReallocAsyncCtx5 + 212 | 0; //@line 21210
  HEAP32[$564 >> 2] = $98; //@line 21211
  $565 = $ReallocAsyncCtx5 + 216 | 0; //@line 21212
  HEAP32[$565 >> 2] = $100; //@line 21213
  $566 = $ReallocAsyncCtx5 + 220 | 0; //@line 21214
  HEAP8[$566 >> 0] = $499; //@line 21215
  $567 = $ReallocAsyncCtx5 + 224 | 0; //@line 21216
  HEAP32[$567 >> 2] = $102; //@line 21217
  $568 = $ReallocAsyncCtx5 + 228 | 0; //@line 21218
  HEAP32[$568 >> 2] = $106; //@line 21219
  $569 = $ReallocAsyncCtx5 + 232 | 0; //@line 21220
  HEAP32[$569 >> 2] = $108; //@line 21221
  $570 = $ReallocAsyncCtx5 + 236 | 0; //@line 21222
  HEAP32[$570 >> 2] = $110; //@line 21223
  $571 = $ReallocAsyncCtx5 + 240 | 0; //@line 21224
  HEAP32[$571 >> 2] = $112; //@line 21225
  $572 = $ReallocAsyncCtx5 + 244 | 0; //@line 21226
  HEAP32[$572 >> 2] = $114; //@line 21227
  $573 = $ReallocAsyncCtx5 + 248 | 0; //@line 21228
  HEAP32[$573 >> 2] = $116; //@line 21229
  sp = STACKTOP; //@line 21230
  return;
 } else if ((label | 0) == 28) {
  $578 = HEAP8[$82 + ($119 & 255) >> 0] | 0; //@line 21237
  $591 = $$0$be + 5 << 24 >> 24; //@line 21250
  $598 = (HEAPU8[$82 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$82 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$82 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 21257
  $601 = HEAP32[(HEAP32[$40 >> 2] | 0) + 48 >> 2] | 0; //@line 21260
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(236) | 0; //@line 21261
  $602 = FUNCTION_TABLE_iiii[$601 & 31]($62, $578, $598) | 0; //@line 21262
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 495; //@line 21265
   $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 21266
   HEAP32[$603 >> 2] = $2; //@line 21267
   $604 = $ReallocAsyncCtx6 + 8 | 0; //@line 21268
   HEAP32[$604 >> 2] = $4; //@line 21269
   $605 = $ReallocAsyncCtx6 + 12 | 0; //@line 21270
   HEAP32[$605 >> 2] = $6; //@line 21271
   $606 = $ReallocAsyncCtx6 + 16 | 0; //@line 21272
   HEAP32[$606 >> 2] = $8; //@line 21273
   $607 = $ReallocAsyncCtx6 + 20 | 0; //@line 21274
   HEAP32[$607 >> 2] = $10; //@line 21275
   $608 = $ReallocAsyncCtx6 + 24 | 0; //@line 21276
   HEAP32[$608 >> 2] = $12; //@line 21277
   $609 = $ReallocAsyncCtx6 + 28 | 0; //@line 21278
   HEAP32[$609 >> 2] = $14; //@line 21279
   $610 = $ReallocAsyncCtx6 + 32 | 0; //@line 21280
   HEAP32[$610 >> 2] = $16; //@line 21281
   $611 = $ReallocAsyncCtx6 + 36 | 0; //@line 21282
   HEAP32[$611 >> 2] = $18; //@line 21283
   $612 = $ReallocAsyncCtx6 + 40 | 0; //@line 21284
   HEAP32[$612 >> 2] = $20; //@line 21285
   $613 = $ReallocAsyncCtx6 + 44 | 0; //@line 21286
   HEAP32[$613 >> 2] = $22; //@line 21287
   $614 = $ReallocAsyncCtx6 + 48 | 0; //@line 21288
   HEAP32[$614 >> 2] = $24; //@line 21289
   $615 = $ReallocAsyncCtx6 + 52 | 0; //@line 21290
   HEAP32[$615 >> 2] = $26; //@line 21291
   $616 = $ReallocAsyncCtx6 + 56 | 0; //@line 21292
   HEAP32[$616 >> 2] = $28; //@line 21293
   $617 = $ReallocAsyncCtx6 + 60 | 0; //@line 21294
   HEAP32[$617 >> 2] = $30; //@line 21295
   $618 = $ReallocAsyncCtx6 + 64 | 0; //@line 21296
   HEAP32[$618 >> 2] = $32; //@line 21297
   $619 = $ReallocAsyncCtx6 + 68 | 0; //@line 21298
   HEAP32[$619 >> 2] = $34; //@line 21299
   $620 = $ReallocAsyncCtx6 + 72 | 0; //@line 21300
   HEAP32[$620 >> 2] = $36; //@line 21301
   $621 = $ReallocAsyncCtx6 + 76 | 0; //@line 21302
   HEAP32[$621 >> 2] = $38; //@line 21303
   $622 = $ReallocAsyncCtx6 + 80 | 0; //@line 21304
   HEAP32[$622 >> 2] = $40; //@line 21305
   $623 = $ReallocAsyncCtx6 + 84 | 0; //@line 21306
   HEAP32[$623 >> 2] = $42; //@line 21307
   $624 = $ReallocAsyncCtx6 + 88 | 0; //@line 21308
   HEAP32[$624 >> 2] = $44; //@line 21309
   $625 = $ReallocAsyncCtx6 + 92 | 0; //@line 21310
   HEAP32[$625 >> 2] = $46; //@line 21311
   $626 = $ReallocAsyncCtx6 + 96 | 0; //@line 21312
   HEAP32[$626 >> 2] = $48; //@line 21313
   $627 = $ReallocAsyncCtx6 + 100 | 0; //@line 21314
   HEAP32[$627 >> 2] = $50; //@line 21315
   $628 = $ReallocAsyncCtx6 + 104 | 0; //@line 21316
   HEAP32[$628 >> 2] = $52; //@line 21317
   $629 = $ReallocAsyncCtx6 + 108 | 0; //@line 21318
   HEAP32[$629 >> 2] = $54; //@line 21319
   $630 = $ReallocAsyncCtx6 + 112 | 0; //@line 21320
   HEAP32[$630 >> 2] = $56; //@line 21321
   $631 = $ReallocAsyncCtx6 + 116 | 0; //@line 21322
   HEAP32[$631 >> 2] = $58; //@line 21323
   $632 = $ReallocAsyncCtx6 + 120 | 0; //@line 21324
   HEAP8[$632 >> 0] = $591; //@line 21325
   $633 = $ReallocAsyncCtx6 + 124 | 0; //@line 21326
   HEAP32[$633 >> 2] = $60; //@line 21327
   $634 = $ReallocAsyncCtx6 + 128 | 0; //@line 21328
   HEAP32[$634 >> 2] = $62; //@line 21329
   $635 = $ReallocAsyncCtx6 + 132 | 0; //@line 21330
   HEAP32[$635 >> 2] = $64; //@line 21331
   $636 = $ReallocAsyncCtx6 + 136 | 0; //@line 21332
   HEAP32[$636 >> 2] = $66; //@line 21333
   $637 = $ReallocAsyncCtx6 + 140 | 0; //@line 21334
   HEAP32[$637 >> 2] = $68; //@line 21335
   $638 = $ReallocAsyncCtx6 + 144 | 0; //@line 21336
   HEAP32[$638 >> 2] = $70; //@line 21337
   $639 = $ReallocAsyncCtx6 + 148 | 0; //@line 21338
   HEAP32[$639 >> 2] = $72; //@line 21339
   $640 = $ReallocAsyncCtx6 + 152 | 0; //@line 21340
   HEAP32[$640 >> 2] = $74; //@line 21341
   $641 = $ReallocAsyncCtx6 + 156 | 0; //@line 21342
   HEAP32[$641 >> 2] = $76; //@line 21343
   $642 = $ReallocAsyncCtx6 + 160 | 0; //@line 21344
   HEAP32[$642 >> 2] = $78; //@line 21345
   $643 = $ReallocAsyncCtx6 + 164 | 0; //@line 21346
   HEAP8[$643 >> 0] = $80; //@line 21347
   $644 = $ReallocAsyncCtx6 + 168 | 0; //@line 21348
   HEAP32[$644 >> 2] = $82; //@line 21349
   $645 = $ReallocAsyncCtx6 + 172 | 0; //@line 21350
   HEAP8[$645 >> 0] = $84; //@line 21351
   $646 = $ReallocAsyncCtx6 + 176 | 0; //@line 21352
   HEAP32[$646 >> 2] = $86; //@line 21353
   $647 = $ReallocAsyncCtx6 + 180 | 0; //@line 21354
   HEAP8[$647 >> 0] = $88; //@line 21355
   $648 = $ReallocAsyncCtx6 + 184 | 0; //@line 21356
   HEAP32[$648 >> 2] = $90; //@line 21357
   $649 = $ReallocAsyncCtx6 + 188 | 0; //@line 21358
   HEAP32[$649 >> 2] = $92; //@line 21359
   $650 = $ReallocAsyncCtx6 + 192 | 0; //@line 21360
   HEAP32[$650 >> 2] = $94; //@line 21361
   $651 = $ReallocAsyncCtx6 + 196 | 0; //@line 21362
   HEAP32[$651 >> 2] = $96; //@line 21363
   $652 = $ReallocAsyncCtx6 + 200 | 0; //@line 21364
   HEAP32[$652 >> 2] = $98; //@line 21365
   $653 = $ReallocAsyncCtx6 + 204 | 0; //@line 21366
   HEAP32[$653 >> 2] = $100; //@line 21367
   $654 = $ReallocAsyncCtx6 + 208 | 0; //@line 21368
   HEAP32[$654 >> 2] = $102; //@line 21369
   $655 = $ReallocAsyncCtx6 + 212 | 0; //@line 21370
   HEAP32[$655 >> 2] = $106; //@line 21371
   $656 = $ReallocAsyncCtx6 + 216 | 0; //@line 21372
   HEAP32[$656 >> 2] = $108; //@line 21373
   $657 = $ReallocAsyncCtx6 + 220 | 0; //@line 21374
   HEAP32[$657 >> 2] = $110; //@line 21375
   $658 = $ReallocAsyncCtx6 + 224 | 0; //@line 21376
   HEAP32[$658 >> 2] = $112; //@line 21377
   $659 = $ReallocAsyncCtx6 + 228 | 0; //@line 21378
   HEAP32[$659 >> 2] = $114; //@line 21379
   $660 = $ReallocAsyncCtx6 + 232 | 0; //@line 21380
   HEAP32[$660 >> 2] = $116; //@line 21381
   sp = STACKTOP; //@line 21382
   return;
  }
  HEAP8[___async_retval >> 0] = $602; //@line 21386
  ___async_unwind = 0; //@line 21387
  HEAP32[$ReallocAsyncCtx6 >> 2] = 495; //@line 21388
  $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 21389
  HEAP32[$603 >> 2] = $2; //@line 21390
  $604 = $ReallocAsyncCtx6 + 8 | 0; //@line 21391
  HEAP32[$604 >> 2] = $4; //@line 21392
  $605 = $ReallocAsyncCtx6 + 12 | 0; //@line 21393
  HEAP32[$605 >> 2] = $6; //@line 21394
  $606 = $ReallocAsyncCtx6 + 16 | 0; //@line 21395
  HEAP32[$606 >> 2] = $8; //@line 21396
  $607 = $ReallocAsyncCtx6 + 20 | 0; //@line 21397
  HEAP32[$607 >> 2] = $10; //@line 21398
  $608 = $ReallocAsyncCtx6 + 24 | 0; //@line 21399
  HEAP32[$608 >> 2] = $12; //@line 21400
  $609 = $ReallocAsyncCtx6 + 28 | 0; //@line 21401
  HEAP32[$609 >> 2] = $14; //@line 21402
  $610 = $ReallocAsyncCtx6 + 32 | 0; //@line 21403
  HEAP32[$610 >> 2] = $16; //@line 21404
  $611 = $ReallocAsyncCtx6 + 36 | 0; //@line 21405
  HEAP32[$611 >> 2] = $18; //@line 21406
  $612 = $ReallocAsyncCtx6 + 40 | 0; //@line 21407
  HEAP32[$612 >> 2] = $20; //@line 21408
  $613 = $ReallocAsyncCtx6 + 44 | 0; //@line 21409
  HEAP32[$613 >> 2] = $22; //@line 21410
  $614 = $ReallocAsyncCtx6 + 48 | 0; //@line 21411
  HEAP32[$614 >> 2] = $24; //@line 21412
  $615 = $ReallocAsyncCtx6 + 52 | 0; //@line 21413
  HEAP32[$615 >> 2] = $26; //@line 21414
  $616 = $ReallocAsyncCtx6 + 56 | 0; //@line 21415
  HEAP32[$616 >> 2] = $28; //@line 21416
  $617 = $ReallocAsyncCtx6 + 60 | 0; //@line 21417
  HEAP32[$617 >> 2] = $30; //@line 21418
  $618 = $ReallocAsyncCtx6 + 64 | 0; //@line 21419
  HEAP32[$618 >> 2] = $32; //@line 21420
  $619 = $ReallocAsyncCtx6 + 68 | 0; //@line 21421
  HEAP32[$619 >> 2] = $34; //@line 21422
  $620 = $ReallocAsyncCtx6 + 72 | 0; //@line 21423
  HEAP32[$620 >> 2] = $36; //@line 21424
  $621 = $ReallocAsyncCtx6 + 76 | 0; //@line 21425
  HEAP32[$621 >> 2] = $38; //@line 21426
  $622 = $ReallocAsyncCtx6 + 80 | 0; //@line 21427
  HEAP32[$622 >> 2] = $40; //@line 21428
  $623 = $ReallocAsyncCtx6 + 84 | 0; //@line 21429
  HEAP32[$623 >> 2] = $42; //@line 21430
  $624 = $ReallocAsyncCtx6 + 88 | 0; //@line 21431
  HEAP32[$624 >> 2] = $44; //@line 21432
  $625 = $ReallocAsyncCtx6 + 92 | 0; //@line 21433
  HEAP32[$625 >> 2] = $46; //@line 21434
  $626 = $ReallocAsyncCtx6 + 96 | 0; //@line 21435
  HEAP32[$626 >> 2] = $48; //@line 21436
  $627 = $ReallocAsyncCtx6 + 100 | 0; //@line 21437
  HEAP32[$627 >> 2] = $50; //@line 21438
  $628 = $ReallocAsyncCtx6 + 104 | 0; //@line 21439
  HEAP32[$628 >> 2] = $52; //@line 21440
  $629 = $ReallocAsyncCtx6 + 108 | 0; //@line 21441
  HEAP32[$629 >> 2] = $54; //@line 21442
  $630 = $ReallocAsyncCtx6 + 112 | 0; //@line 21443
  HEAP32[$630 >> 2] = $56; //@line 21444
  $631 = $ReallocAsyncCtx6 + 116 | 0; //@line 21445
  HEAP32[$631 >> 2] = $58; //@line 21446
  $632 = $ReallocAsyncCtx6 + 120 | 0; //@line 21447
  HEAP8[$632 >> 0] = $591; //@line 21448
  $633 = $ReallocAsyncCtx6 + 124 | 0; //@line 21449
  HEAP32[$633 >> 2] = $60; //@line 21450
  $634 = $ReallocAsyncCtx6 + 128 | 0; //@line 21451
  HEAP32[$634 >> 2] = $62; //@line 21452
  $635 = $ReallocAsyncCtx6 + 132 | 0; //@line 21453
  HEAP32[$635 >> 2] = $64; //@line 21454
  $636 = $ReallocAsyncCtx6 + 136 | 0; //@line 21455
  HEAP32[$636 >> 2] = $66; //@line 21456
  $637 = $ReallocAsyncCtx6 + 140 | 0; //@line 21457
  HEAP32[$637 >> 2] = $68; //@line 21458
  $638 = $ReallocAsyncCtx6 + 144 | 0; //@line 21459
  HEAP32[$638 >> 2] = $70; //@line 21460
  $639 = $ReallocAsyncCtx6 + 148 | 0; //@line 21461
  HEAP32[$639 >> 2] = $72; //@line 21462
  $640 = $ReallocAsyncCtx6 + 152 | 0; //@line 21463
  HEAP32[$640 >> 2] = $74; //@line 21464
  $641 = $ReallocAsyncCtx6 + 156 | 0; //@line 21465
  HEAP32[$641 >> 2] = $76; //@line 21466
  $642 = $ReallocAsyncCtx6 + 160 | 0; //@line 21467
  HEAP32[$642 >> 2] = $78; //@line 21468
  $643 = $ReallocAsyncCtx6 + 164 | 0; //@line 21469
  HEAP8[$643 >> 0] = $80; //@line 21470
  $644 = $ReallocAsyncCtx6 + 168 | 0; //@line 21471
  HEAP32[$644 >> 2] = $82; //@line 21472
  $645 = $ReallocAsyncCtx6 + 172 | 0; //@line 21473
  HEAP8[$645 >> 0] = $84; //@line 21474
  $646 = $ReallocAsyncCtx6 + 176 | 0; //@line 21475
  HEAP32[$646 >> 2] = $86; //@line 21476
  $647 = $ReallocAsyncCtx6 + 180 | 0; //@line 21477
  HEAP8[$647 >> 0] = $88; //@line 21478
  $648 = $ReallocAsyncCtx6 + 184 | 0; //@line 21479
  HEAP32[$648 >> 2] = $90; //@line 21480
  $649 = $ReallocAsyncCtx6 + 188 | 0; //@line 21481
  HEAP32[$649 >> 2] = $92; //@line 21482
  $650 = $ReallocAsyncCtx6 + 192 | 0; //@line 21483
  HEAP32[$650 >> 2] = $94; //@line 21484
  $651 = $ReallocAsyncCtx6 + 196 | 0; //@line 21485
  HEAP32[$651 >> 2] = $96; //@line 21486
  $652 = $ReallocAsyncCtx6 + 200 | 0; //@line 21487
  HEAP32[$652 >> 2] = $98; //@line 21488
  $653 = $ReallocAsyncCtx6 + 204 | 0; //@line 21489
  HEAP32[$653 >> 2] = $100; //@line 21490
  $654 = $ReallocAsyncCtx6 + 208 | 0; //@line 21491
  HEAP32[$654 >> 2] = $102; //@line 21492
  $655 = $ReallocAsyncCtx6 + 212 | 0; //@line 21493
  HEAP32[$655 >> 2] = $106; //@line 21494
  $656 = $ReallocAsyncCtx6 + 216 | 0; //@line 21495
  HEAP32[$656 >> 2] = $108; //@line 21496
  $657 = $ReallocAsyncCtx6 + 220 | 0; //@line 21497
  HEAP32[$657 >> 2] = $110; //@line 21498
  $658 = $ReallocAsyncCtx6 + 224 | 0; //@line 21499
  HEAP32[$658 >> 2] = $112; //@line 21500
  $659 = $ReallocAsyncCtx6 + 228 | 0; //@line 21501
  HEAP32[$659 >> 2] = $114; //@line 21502
  $660 = $ReallocAsyncCtx6 + 232 | 0; //@line 21503
  HEAP32[$660 >> 2] = $116; //@line 21504
  sp = STACKTOP; //@line 21505
  return;
 } else if ((label | 0) == 31) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 21510
  return;
 }
}
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 8045
 STACKTOP = STACKTOP + 16 | 0; //@line 8046
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8046
 $1 = sp; //@line 8047
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 8054
   $7 = $6 >>> 3; //@line 8055
   $8 = HEAP32[5969] | 0; //@line 8056
   $9 = $8 >>> $7; //@line 8057
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 8063
    $16 = 23916 + ($14 << 1 << 2) | 0; //@line 8065
    $17 = $16 + 8 | 0; //@line 8066
    $18 = HEAP32[$17 >> 2] | 0; //@line 8067
    $19 = $18 + 8 | 0; //@line 8068
    $20 = HEAP32[$19 >> 2] | 0; //@line 8069
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[5969] = $8 & ~(1 << $14); //@line 8076
     } else {
      if ((HEAP32[5973] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 8081
      }
      $27 = $20 + 12 | 0; //@line 8084
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 8088
       HEAP32[$17 >> 2] = $20; //@line 8089
       break;
      } else {
       _abort(); //@line 8092
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 8097
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 8100
    $34 = $18 + $30 + 4 | 0; //@line 8102
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 8105
    $$0 = $19; //@line 8106
    STACKTOP = sp; //@line 8107
    return $$0 | 0; //@line 8107
   }
   $37 = HEAP32[5971] | 0; //@line 8109
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 8115
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 8118
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 8121
     $49 = $47 >>> 12 & 16; //@line 8123
     $50 = $47 >>> $49; //@line 8124
     $52 = $50 >>> 5 & 8; //@line 8126
     $54 = $50 >>> $52; //@line 8128
     $56 = $54 >>> 2 & 4; //@line 8130
     $58 = $54 >>> $56; //@line 8132
     $60 = $58 >>> 1 & 2; //@line 8134
     $62 = $58 >>> $60; //@line 8136
     $64 = $62 >>> 1 & 1; //@line 8138
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 8141
     $69 = 23916 + ($67 << 1 << 2) | 0; //@line 8143
     $70 = $69 + 8 | 0; //@line 8144
     $71 = HEAP32[$70 >> 2] | 0; //@line 8145
     $72 = $71 + 8 | 0; //@line 8146
     $73 = HEAP32[$72 >> 2] | 0; //@line 8147
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 8153
       HEAP32[5969] = $77; //@line 8154
       $98 = $77; //@line 8155
      } else {
       if ((HEAP32[5973] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 8160
       }
       $80 = $73 + 12 | 0; //@line 8163
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 8167
        HEAP32[$70 >> 2] = $73; //@line 8168
        $98 = $8; //@line 8169
        break;
       } else {
        _abort(); //@line 8172
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 8177
     $84 = $83 - $6 | 0; //@line 8178
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 8181
     $87 = $71 + $6 | 0; //@line 8182
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 8185
     HEAP32[$71 + $83 >> 2] = $84; //@line 8187
     if ($37 | 0) {
      $92 = HEAP32[5974] | 0; //@line 8190
      $93 = $37 >>> 3; //@line 8191
      $95 = 23916 + ($93 << 1 << 2) | 0; //@line 8193
      $96 = 1 << $93; //@line 8194
      if (!($98 & $96)) {
       HEAP32[5969] = $98 | $96; //@line 8199
       $$0199 = $95; //@line 8201
       $$pre$phiZ2D = $95 + 8 | 0; //@line 8201
      } else {
       $101 = $95 + 8 | 0; //@line 8203
       $102 = HEAP32[$101 >> 2] | 0; //@line 8204
       if ((HEAP32[5973] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 8208
       } else {
        $$0199 = $102; //@line 8211
        $$pre$phiZ2D = $101; //@line 8211
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 8214
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 8216
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 8218
      HEAP32[$92 + 12 >> 2] = $95; //@line 8220
     }
     HEAP32[5971] = $84; //@line 8222
     HEAP32[5974] = $87; //@line 8223
     $$0 = $72; //@line 8224
     STACKTOP = sp; //@line 8225
     return $$0 | 0; //@line 8225
    }
    $108 = HEAP32[5970] | 0; //@line 8227
    if (!$108) {
     $$0197 = $6; //@line 8230
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 8234
     $114 = $112 >>> 12 & 16; //@line 8236
     $115 = $112 >>> $114; //@line 8237
     $117 = $115 >>> 5 & 8; //@line 8239
     $119 = $115 >>> $117; //@line 8241
     $121 = $119 >>> 2 & 4; //@line 8243
     $123 = $119 >>> $121; //@line 8245
     $125 = $123 >>> 1 & 2; //@line 8247
     $127 = $123 >>> $125; //@line 8249
     $129 = $127 >>> 1 & 1; //@line 8251
     $134 = HEAP32[24180 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 8256
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 8260
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 8266
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 8269
      $$0193$lcssa$i = $138; //@line 8269
     } else {
      $$01926$i = $134; //@line 8271
      $$01935$i = $138; //@line 8271
      $146 = $143; //@line 8271
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 8276
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 8277
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 8278
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 8279
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 8285
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 8288
        $$0193$lcssa$i = $$$0193$i; //@line 8288
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 8291
        $$01935$i = $$$0193$i; //@line 8291
       }
      }
     }
     $157 = HEAP32[5973] | 0; //@line 8295
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 8298
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 8301
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 8304
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 8308
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 8310
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 8314
       $176 = HEAP32[$175 >> 2] | 0; //@line 8315
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 8318
        $179 = HEAP32[$178 >> 2] | 0; //@line 8319
        if (!$179) {
         $$3$i = 0; //@line 8322
         break;
        } else {
         $$1196$i = $179; //@line 8325
         $$1198$i = $178; //@line 8325
        }
       } else {
        $$1196$i = $176; //@line 8328
        $$1198$i = $175; //@line 8328
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 8331
        $182 = HEAP32[$181 >> 2] | 0; //@line 8332
        if ($182 | 0) {
         $$1196$i = $182; //@line 8335
         $$1198$i = $181; //@line 8335
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 8338
        $185 = HEAP32[$184 >> 2] | 0; //@line 8339
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 8344
         $$1198$i = $184; //@line 8344
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 8349
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 8352
        $$3$i = $$1196$i; //@line 8353
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 8358
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 8361
       }
       $169 = $167 + 12 | 0; //@line 8364
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 8368
       }
       $172 = $164 + 8 | 0; //@line 8371
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 8375
        HEAP32[$172 >> 2] = $167; //@line 8376
        $$3$i = $164; //@line 8377
        break;
       } else {
        _abort(); //@line 8380
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 8389
       $191 = 24180 + ($190 << 2) | 0; //@line 8390
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 8395
         if (!$$3$i) {
          HEAP32[5970] = $108 & ~(1 << $190); //@line 8401
          break L73;
         }
        } else {
         if ((HEAP32[5973] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 8408
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 8416
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[5973] | 0; //@line 8426
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 8429
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 8433
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 8435
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 8441
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 8445
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 8447
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 8453
       if ($214 | 0) {
        if ((HEAP32[5973] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 8459
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 8463
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 8465
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 8473
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 8476
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 8478
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 8481
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 8485
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 8488
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 8490
      if ($37 | 0) {
       $234 = HEAP32[5974] | 0; //@line 8493
       $235 = $37 >>> 3; //@line 8494
       $237 = 23916 + ($235 << 1 << 2) | 0; //@line 8496
       $238 = 1 << $235; //@line 8497
       if (!($8 & $238)) {
        HEAP32[5969] = $8 | $238; //@line 8502
        $$0189$i = $237; //@line 8504
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 8504
       } else {
        $242 = $237 + 8 | 0; //@line 8506
        $243 = HEAP32[$242 >> 2] | 0; //@line 8507
        if ((HEAP32[5973] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 8511
        } else {
         $$0189$i = $243; //@line 8514
         $$pre$phi$iZ2D = $242; //@line 8514
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 8517
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 8519
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 8521
       HEAP32[$234 + 12 >> 2] = $237; //@line 8523
      }
      HEAP32[5971] = $$0193$lcssa$i; //@line 8525
      HEAP32[5974] = $159; //@line 8526
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 8529
     STACKTOP = sp; //@line 8530
     return $$0 | 0; //@line 8530
    }
   } else {
    $$0197 = $6; //@line 8533
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 8538
   } else {
    $251 = $0 + 11 | 0; //@line 8540
    $252 = $251 & -8; //@line 8541
    $253 = HEAP32[5970] | 0; //@line 8542
    if (!$253) {
     $$0197 = $252; //@line 8545
    } else {
     $255 = 0 - $252 | 0; //@line 8547
     $256 = $251 >>> 8; //@line 8548
     if (!$256) {
      $$0358$i = 0; //@line 8551
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 8555
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 8559
       $262 = $256 << $261; //@line 8560
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 8563
       $267 = $262 << $265; //@line 8565
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 8568
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 8573
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 8579
      }
     }
     $282 = HEAP32[24180 + ($$0358$i << 2) >> 2] | 0; //@line 8583
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 8587
       $$3$i203 = 0; //@line 8587
       $$3350$i = $255; //@line 8587
       label = 81; //@line 8588
      } else {
       $$0342$i = 0; //@line 8595
       $$0347$i = $255; //@line 8595
       $$0353$i = $282; //@line 8595
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 8595
       $$0362$i = 0; //@line 8595
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 8600
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 8605
          $$435113$i = 0; //@line 8605
          $$435712$i = $$0353$i; //@line 8605
          label = 85; //@line 8606
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 8609
          $$1348$i = $292; //@line 8609
         }
        } else {
         $$1343$i = $$0342$i; //@line 8612
         $$1348$i = $$0347$i; //@line 8612
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 8615
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 8618
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 8622
        $302 = ($$0353$i | 0) == 0; //@line 8623
        if ($302) {
         $$2355$i = $$1363$i; //@line 8628
         $$3$i203 = $$1343$i; //@line 8628
         $$3350$i = $$1348$i; //@line 8628
         label = 81; //@line 8629
         break;
        } else {
         $$0342$i = $$1343$i; //@line 8632
         $$0347$i = $$1348$i; //@line 8632
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 8632
         $$0362$i = $$1363$i; //@line 8632
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 8642
       $309 = $253 & ($306 | 0 - $306); //@line 8645
       if (!$309) {
        $$0197 = $252; //@line 8648
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 8653
       $315 = $313 >>> 12 & 16; //@line 8655
       $316 = $313 >>> $315; //@line 8656
       $318 = $316 >>> 5 & 8; //@line 8658
       $320 = $316 >>> $318; //@line 8660
       $322 = $320 >>> 2 & 4; //@line 8662
       $324 = $320 >>> $322; //@line 8664
       $326 = $324 >>> 1 & 2; //@line 8666
       $328 = $324 >>> $326; //@line 8668
       $330 = $328 >>> 1 & 1; //@line 8670
       $$4$ph$i = 0; //@line 8676
       $$4357$ph$i = HEAP32[24180 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 8676
      } else {
       $$4$ph$i = $$3$i203; //@line 8678
       $$4357$ph$i = $$2355$i; //@line 8678
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 8682
       $$4351$lcssa$i = $$3350$i; //@line 8682
      } else {
       $$414$i = $$4$ph$i; //@line 8684
       $$435113$i = $$3350$i; //@line 8684
       $$435712$i = $$4357$ph$i; //@line 8684
       label = 85; //@line 8685
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 8690
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 8694
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 8695
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 8696
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 8697
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 8703
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 8706
        $$4351$lcssa$i = $$$4351$i; //@line 8706
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 8709
        $$435113$i = $$$4351$i; //@line 8709
        label = 85; //@line 8710
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 8716
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[5971] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[5973] | 0; //@line 8722
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 8725
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 8728
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 8731
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 8735
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 8737
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 8741
         $371 = HEAP32[$370 >> 2] | 0; //@line 8742
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 8745
          $374 = HEAP32[$373 >> 2] | 0; //@line 8746
          if (!$374) {
           $$3372$i = 0; //@line 8749
           break;
          } else {
           $$1370$i = $374; //@line 8752
           $$1374$i = $373; //@line 8752
          }
         } else {
          $$1370$i = $371; //@line 8755
          $$1374$i = $370; //@line 8755
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 8758
          $377 = HEAP32[$376 >> 2] | 0; //@line 8759
          if ($377 | 0) {
           $$1370$i = $377; //@line 8762
           $$1374$i = $376; //@line 8762
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 8765
          $380 = HEAP32[$379 >> 2] | 0; //@line 8766
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 8771
           $$1374$i = $379; //@line 8771
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 8776
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 8779
          $$3372$i = $$1370$i; //@line 8780
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 8785
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 8788
         }
         $364 = $362 + 12 | 0; //@line 8791
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 8795
         }
         $367 = $359 + 8 | 0; //@line 8798
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 8802
          HEAP32[$367 >> 2] = $362; //@line 8803
          $$3372$i = $359; //@line 8804
          break;
         } else {
          _abort(); //@line 8807
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 8815
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 8818
         $386 = 24180 + ($385 << 2) | 0; //@line 8819
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 8824
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 8829
            HEAP32[5970] = $391; //@line 8830
            $475 = $391; //@line 8831
            break L164;
           }
          } else {
           if ((HEAP32[5973] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 8838
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 8846
            if (!$$3372$i) {
             $475 = $253; //@line 8849
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[5973] | 0; //@line 8857
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 8860
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 8864
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 8866
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 8872
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 8876
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 8878
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 8884
         if (!$409) {
          $475 = $253; //@line 8887
         } else {
          if ((HEAP32[5973] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 8892
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 8896
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 8898
           $475 = $253; //@line 8899
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 8908
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 8911
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 8913
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 8916
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 8920
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 8923
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 8925
         $428 = $$4351$lcssa$i >>> 3; //@line 8926
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 23916 + ($428 << 1 << 2) | 0; //@line 8930
          $432 = HEAP32[5969] | 0; //@line 8931
          $433 = 1 << $428; //@line 8932
          if (!($432 & $433)) {
           HEAP32[5969] = $432 | $433; //@line 8937
           $$0368$i = $431; //@line 8939
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 8939
          } else {
           $437 = $431 + 8 | 0; //@line 8941
           $438 = HEAP32[$437 >> 2] | 0; //@line 8942
           if ((HEAP32[5973] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 8946
           } else {
            $$0368$i = $438; //@line 8949
            $$pre$phi$i211Z2D = $437; //@line 8949
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 8952
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 8954
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 8956
          HEAP32[$354 + 12 >> 2] = $431; //@line 8958
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 8961
         if (!$444) {
          $$0361$i = 0; //@line 8964
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 8968
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 8972
           $450 = $444 << $449; //@line 8973
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 8976
           $455 = $450 << $453; //@line 8978
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 8981
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 8986
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 8992
          }
         }
         $469 = 24180 + ($$0361$i << 2) | 0; //@line 8995
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 8997
         $471 = $354 + 16 | 0; //@line 8998
         HEAP32[$471 + 4 >> 2] = 0; //@line 9000
         HEAP32[$471 >> 2] = 0; //@line 9001
         $473 = 1 << $$0361$i; //@line 9002
         if (!($475 & $473)) {
          HEAP32[5970] = $475 | $473; //@line 9007
          HEAP32[$469 >> 2] = $354; //@line 9008
          HEAP32[$354 + 24 >> 2] = $469; //@line 9010
          HEAP32[$354 + 12 >> 2] = $354; //@line 9012
          HEAP32[$354 + 8 >> 2] = $354; //@line 9014
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 9023
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 9023
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 9030
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 9034
          $494 = HEAP32[$492 >> 2] | 0; //@line 9036
          if (!$494) {
           label = 136; //@line 9039
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 9042
           $$0345$i = $494; //@line 9042
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[5973] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 9049
          } else {
           HEAP32[$492 >> 2] = $354; //@line 9052
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 9054
           HEAP32[$354 + 12 >> 2] = $354; //@line 9056
           HEAP32[$354 + 8 >> 2] = $354; //@line 9058
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 9063
          $502 = HEAP32[$501 >> 2] | 0; //@line 9064
          $503 = HEAP32[5973] | 0; //@line 9065
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 9071
           HEAP32[$501 >> 2] = $354; //@line 9072
           HEAP32[$354 + 8 >> 2] = $502; //@line 9074
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 9076
           HEAP32[$354 + 24 >> 2] = 0; //@line 9078
           break;
          } else {
           _abort(); //@line 9081
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 9088
       STACKTOP = sp; //@line 9089
       return $$0 | 0; //@line 9089
      } else {
       $$0197 = $252; //@line 9091
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[5971] | 0; //@line 9098
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 9101
  $515 = HEAP32[5974] | 0; //@line 9102
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 9105
   HEAP32[5974] = $517; //@line 9106
   HEAP32[5971] = $514; //@line 9107
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 9110
   HEAP32[$515 + $512 >> 2] = $514; //@line 9112
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 9115
  } else {
   HEAP32[5971] = 0; //@line 9117
   HEAP32[5974] = 0; //@line 9118
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 9121
   $526 = $515 + $512 + 4 | 0; //@line 9123
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 9126
  }
  $$0 = $515 + 8 | 0; //@line 9129
  STACKTOP = sp; //@line 9130
  return $$0 | 0; //@line 9130
 }
 $530 = HEAP32[5972] | 0; //@line 9132
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 9135
  HEAP32[5972] = $532; //@line 9136
  $533 = HEAP32[5975] | 0; //@line 9137
  $534 = $533 + $$0197 | 0; //@line 9138
  HEAP32[5975] = $534; //@line 9139
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 9142
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 9145
  $$0 = $533 + 8 | 0; //@line 9147
  STACKTOP = sp; //@line 9148
  return $$0 | 0; //@line 9148
 }
 if (!(HEAP32[6087] | 0)) {
  HEAP32[6089] = 4096; //@line 9153
  HEAP32[6088] = 4096; //@line 9154
  HEAP32[6090] = -1; //@line 9155
  HEAP32[6091] = -1; //@line 9156
  HEAP32[6092] = 0; //@line 9157
  HEAP32[6080] = 0; //@line 9158
  HEAP32[6087] = $1 & -16 ^ 1431655768; //@line 9162
  $548 = 4096; //@line 9163
 } else {
  $548 = HEAP32[6089] | 0; //@line 9166
 }
 $545 = $$0197 + 48 | 0; //@line 9168
 $546 = $$0197 + 47 | 0; //@line 9169
 $547 = $548 + $546 | 0; //@line 9170
 $549 = 0 - $548 | 0; //@line 9171
 $550 = $547 & $549; //@line 9172
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 9175
  STACKTOP = sp; //@line 9176
  return $$0 | 0; //@line 9176
 }
 $552 = HEAP32[6079] | 0; //@line 9178
 if ($552 | 0) {
  $554 = HEAP32[6077] | 0; //@line 9181
  $555 = $554 + $550 | 0; //@line 9182
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 9187
   STACKTOP = sp; //@line 9188
   return $$0 | 0; //@line 9188
  }
 }
 L244 : do {
  if (!(HEAP32[6080] & 4)) {
   $561 = HEAP32[5975] | 0; //@line 9196
   L246 : do {
    if (!$561) {
     label = 163; //@line 9200
    } else {
     $$0$i$i = 24324; //@line 9202
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 9204
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 9207
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 9216
      if (!$570) {
       label = 163; //@line 9219
       break L246;
      } else {
       $$0$i$i = $570; //@line 9222
      }
     }
     $595 = $547 - $530 & $549; //@line 9226
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 9229
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 9237
       } else {
        $$723947$i = $595; //@line 9239
        $$748$i = $597; //@line 9239
        label = 180; //@line 9240
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 9244
       $$2253$ph$i = $595; //@line 9244
       label = 171; //@line 9245
      }
     } else {
      $$2234243136$i = 0; //@line 9248
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 9254
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 9257
     } else {
      $574 = $572; //@line 9259
      $575 = HEAP32[6088] | 0; //@line 9260
      $576 = $575 + -1 | 0; //@line 9261
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 9269
      $584 = HEAP32[6077] | 0; //@line 9270
      $585 = $$$i + $584 | 0; //@line 9271
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[6079] | 0; //@line 9276
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 9283
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 9287
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 9290
        $$748$i = $572; //@line 9290
        label = 180; //@line 9291
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 9294
        $$2253$ph$i = $$$i; //@line 9294
        label = 171; //@line 9295
       }
      } else {
       $$2234243136$i = 0; //@line 9298
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 9305
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 9314
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 9317
       $$748$i = $$2247$ph$i; //@line 9317
       label = 180; //@line 9318
       break L244;
      }
     }
     $607 = HEAP32[6089] | 0; //@line 9322
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 9326
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 9329
      $$748$i = $$2247$ph$i; //@line 9329
      label = 180; //@line 9330
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 9336
      $$2234243136$i = 0; //@line 9337
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 9341
      $$748$i = $$2247$ph$i; //@line 9341
      label = 180; //@line 9342
      break L244;
     }
    }
   } while (0);
   HEAP32[6080] = HEAP32[6080] | 4; //@line 9349
   $$4236$i = $$2234243136$i; //@line 9350
   label = 178; //@line 9351
  } else {
   $$4236$i = 0; //@line 9353
   label = 178; //@line 9354
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 9360
   $621 = _sbrk(0) | 0; //@line 9361
   $627 = $621 - $620 | 0; //@line 9369
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 9371
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 9379
    $$748$i = $620; //@line 9379
    label = 180; //@line 9380
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[6077] | 0) + $$723947$i | 0; //@line 9386
  HEAP32[6077] = $633; //@line 9387
  if ($633 >>> 0 > (HEAP32[6078] | 0) >>> 0) {
   HEAP32[6078] = $633; //@line 9391
  }
  $636 = HEAP32[5975] | 0; //@line 9393
  do {
   if (!$636) {
    $638 = HEAP32[5973] | 0; //@line 9397
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[5973] = $$748$i; //@line 9402
    }
    HEAP32[6081] = $$748$i; //@line 9404
    HEAP32[6082] = $$723947$i; //@line 9405
    HEAP32[6084] = 0; //@line 9406
    HEAP32[5978] = HEAP32[6087]; //@line 9408
    HEAP32[5977] = -1; //@line 9409
    HEAP32[5982] = 23916; //@line 9410
    HEAP32[5981] = 23916; //@line 9411
    HEAP32[5984] = 23924; //@line 9412
    HEAP32[5983] = 23924; //@line 9413
    HEAP32[5986] = 23932; //@line 9414
    HEAP32[5985] = 23932; //@line 9415
    HEAP32[5988] = 23940; //@line 9416
    HEAP32[5987] = 23940; //@line 9417
    HEAP32[5990] = 23948; //@line 9418
    HEAP32[5989] = 23948; //@line 9419
    HEAP32[5992] = 23956; //@line 9420
    HEAP32[5991] = 23956; //@line 9421
    HEAP32[5994] = 23964; //@line 9422
    HEAP32[5993] = 23964; //@line 9423
    HEAP32[5996] = 23972; //@line 9424
    HEAP32[5995] = 23972; //@line 9425
    HEAP32[5998] = 23980; //@line 9426
    HEAP32[5997] = 23980; //@line 9427
    HEAP32[6e3] = 23988; //@line 9428
    HEAP32[5999] = 23988; //@line 9429
    HEAP32[6002] = 23996; //@line 9430
    HEAP32[6001] = 23996; //@line 9431
    HEAP32[6004] = 24004; //@line 9432
    HEAP32[6003] = 24004; //@line 9433
    HEAP32[6006] = 24012; //@line 9434
    HEAP32[6005] = 24012; //@line 9435
    HEAP32[6008] = 24020; //@line 9436
    HEAP32[6007] = 24020; //@line 9437
    HEAP32[6010] = 24028; //@line 9438
    HEAP32[6009] = 24028; //@line 9439
    HEAP32[6012] = 24036; //@line 9440
    HEAP32[6011] = 24036; //@line 9441
    HEAP32[6014] = 24044; //@line 9442
    HEAP32[6013] = 24044; //@line 9443
    HEAP32[6016] = 24052; //@line 9444
    HEAP32[6015] = 24052; //@line 9445
    HEAP32[6018] = 24060; //@line 9446
    HEAP32[6017] = 24060; //@line 9447
    HEAP32[6020] = 24068; //@line 9448
    HEAP32[6019] = 24068; //@line 9449
    HEAP32[6022] = 24076; //@line 9450
    HEAP32[6021] = 24076; //@line 9451
    HEAP32[6024] = 24084; //@line 9452
    HEAP32[6023] = 24084; //@line 9453
    HEAP32[6026] = 24092; //@line 9454
    HEAP32[6025] = 24092; //@line 9455
    HEAP32[6028] = 24100; //@line 9456
    HEAP32[6027] = 24100; //@line 9457
    HEAP32[6030] = 24108; //@line 9458
    HEAP32[6029] = 24108; //@line 9459
    HEAP32[6032] = 24116; //@line 9460
    HEAP32[6031] = 24116; //@line 9461
    HEAP32[6034] = 24124; //@line 9462
    HEAP32[6033] = 24124; //@line 9463
    HEAP32[6036] = 24132; //@line 9464
    HEAP32[6035] = 24132; //@line 9465
    HEAP32[6038] = 24140; //@line 9466
    HEAP32[6037] = 24140; //@line 9467
    HEAP32[6040] = 24148; //@line 9468
    HEAP32[6039] = 24148; //@line 9469
    HEAP32[6042] = 24156; //@line 9470
    HEAP32[6041] = 24156; //@line 9471
    HEAP32[6044] = 24164; //@line 9472
    HEAP32[6043] = 24164; //@line 9473
    $642 = $$723947$i + -40 | 0; //@line 9474
    $644 = $$748$i + 8 | 0; //@line 9476
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 9481
    $650 = $$748$i + $649 | 0; //@line 9482
    $651 = $642 - $649 | 0; //@line 9483
    HEAP32[5975] = $650; //@line 9484
    HEAP32[5972] = $651; //@line 9485
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 9488
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 9491
    HEAP32[5976] = HEAP32[6091]; //@line 9493
   } else {
    $$024367$i = 24324; //@line 9495
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 9497
     $658 = $$024367$i + 4 | 0; //@line 9498
     $659 = HEAP32[$658 >> 2] | 0; //@line 9499
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 9503
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 9507
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 9512
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 9526
       $673 = (HEAP32[5972] | 0) + $$723947$i | 0; //@line 9528
       $675 = $636 + 8 | 0; //@line 9530
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 9535
       $681 = $636 + $680 | 0; //@line 9536
       $682 = $673 - $680 | 0; //@line 9537
       HEAP32[5975] = $681; //@line 9538
       HEAP32[5972] = $682; //@line 9539
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 9542
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 9545
       HEAP32[5976] = HEAP32[6091]; //@line 9547
       break;
      }
     }
    }
    $688 = HEAP32[5973] | 0; //@line 9552
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[5973] = $$748$i; //@line 9555
     $753 = $$748$i; //@line 9556
    } else {
     $753 = $688; //@line 9558
    }
    $690 = $$748$i + $$723947$i | 0; //@line 9560
    $$124466$i = 24324; //@line 9561
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 9566
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 9570
     if (!$694) {
      $$0$i$i$i = 24324; //@line 9573
      break;
     } else {
      $$124466$i = $694; //@line 9576
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 9585
      $700 = $$124466$i + 4 | 0; //@line 9586
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 9589
      $704 = $$748$i + 8 | 0; //@line 9591
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 9597
      $712 = $690 + 8 | 0; //@line 9599
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 9605
      $722 = $710 + $$0197 | 0; //@line 9609
      $723 = $718 - $710 - $$0197 | 0; //@line 9610
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 9613
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[5972] | 0) + $723 | 0; //@line 9618
        HEAP32[5972] = $728; //@line 9619
        HEAP32[5975] = $722; //@line 9620
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 9623
       } else {
        if ((HEAP32[5974] | 0) == ($718 | 0)) {
         $734 = (HEAP32[5971] | 0) + $723 | 0; //@line 9629
         HEAP32[5971] = $734; //@line 9630
         HEAP32[5974] = $722; //@line 9631
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 9634
         HEAP32[$722 + $734 >> 2] = $734; //@line 9636
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 9640
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 9644
         $743 = $739 >>> 3; //@line 9645
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 9650
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 9652
           $750 = 23916 + ($743 << 1 << 2) | 0; //@line 9654
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 9660
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 9669
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[5969] = HEAP32[5969] & ~(1 << $743); //@line 9679
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 9686
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 9690
             }
             $764 = $748 + 8 | 0; //@line 9693
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 9697
              break;
             }
             _abort(); //@line 9700
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 9705
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 9706
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 9709
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 9711
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 9715
             $783 = $782 + 4 | 0; //@line 9716
             $784 = HEAP32[$783 >> 2] | 0; //@line 9717
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 9720
              if (!$786) {
               $$3$i$i = 0; //@line 9723
               break;
              } else {
               $$1291$i$i = $786; //@line 9726
               $$1293$i$i = $782; //@line 9726
              }
             } else {
              $$1291$i$i = $784; //@line 9729
              $$1293$i$i = $783; //@line 9729
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 9732
              $789 = HEAP32[$788 >> 2] | 0; //@line 9733
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 9736
               $$1293$i$i = $788; //@line 9736
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 9739
              $792 = HEAP32[$791 >> 2] | 0; //@line 9740
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 9745
               $$1293$i$i = $791; //@line 9745
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 9750
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 9753
              $$3$i$i = $$1291$i$i; //@line 9754
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 9759
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 9762
             }
             $776 = $774 + 12 | 0; //@line 9765
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 9769
             }
             $779 = $771 + 8 | 0; //@line 9772
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 9776
              HEAP32[$779 >> 2] = $774; //@line 9777
              $$3$i$i = $771; //@line 9778
              break;
             } else {
              _abort(); //@line 9781
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 9791
           $798 = 24180 + ($797 << 2) | 0; //@line 9792
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 9797
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[5970] = HEAP32[5970] & ~(1 << $797); //@line 9806
             break L311;
            } else {
             if ((HEAP32[5973] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 9812
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 9820
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[5973] | 0; //@line 9830
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 9833
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 9837
           $815 = $718 + 16 | 0; //@line 9838
           $816 = HEAP32[$815 >> 2] | 0; //@line 9839
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 9845
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 9849
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 9851
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 9857
           if (!$822) {
            break;
           }
           if ((HEAP32[5973] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 9865
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 9869
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 9871
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 9878
         $$0287$i$i = $742 + $723 | 0; //@line 9878
        } else {
         $$0$i17$i = $718; //@line 9880
         $$0287$i$i = $723; //@line 9880
        }
        $830 = $$0$i17$i + 4 | 0; //@line 9882
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 9885
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 9888
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 9890
        $836 = $$0287$i$i >>> 3; //@line 9891
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 23916 + ($836 << 1 << 2) | 0; //@line 9895
         $840 = HEAP32[5969] | 0; //@line 9896
         $841 = 1 << $836; //@line 9897
         do {
          if (!($840 & $841)) {
           HEAP32[5969] = $840 | $841; //@line 9903
           $$0295$i$i = $839; //@line 9905
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 9905
          } else {
           $845 = $839 + 8 | 0; //@line 9907
           $846 = HEAP32[$845 >> 2] | 0; //@line 9908
           if ((HEAP32[5973] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 9912
            $$pre$phi$i19$iZ2D = $845; //@line 9912
            break;
           }
           _abort(); //@line 9915
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 9919
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 9921
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 9923
         HEAP32[$722 + 12 >> 2] = $839; //@line 9925
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 9928
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 9932
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 9936
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 9941
          $858 = $852 << $857; //@line 9942
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 9945
          $863 = $858 << $861; //@line 9947
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 9950
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 9955
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 9961
         }
        } while (0);
        $877 = 24180 + ($$0296$i$i << 2) | 0; //@line 9964
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 9966
        $879 = $722 + 16 | 0; //@line 9967
        HEAP32[$879 + 4 >> 2] = 0; //@line 9969
        HEAP32[$879 >> 2] = 0; //@line 9970
        $881 = HEAP32[5970] | 0; //@line 9971
        $882 = 1 << $$0296$i$i; //@line 9972
        if (!($881 & $882)) {
         HEAP32[5970] = $881 | $882; //@line 9977
         HEAP32[$877 >> 2] = $722; //@line 9978
         HEAP32[$722 + 24 >> 2] = $877; //@line 9980
         HEAP32[$722 + 12 >> 2] = $722; //@line 9982
         HEAP32[$722 + 8 >> 2] = $722; //@line 9984
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 9993
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 9993
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 10000
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 10004
         $902 = HEAP32[$900 >> 2] | 0; //@line 10006
         if (!$902) {
          label = 260; //@line 10009
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 10012
          $$0289$i$i = $902; //@line 10012
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[5973] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 10019
         } else {
          HEAP32[$900 >> 2] = $722; //@line 10022
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 10024
          HEAP32[$722 + 12 >> 2] = $722; //@line 10026
          HEAP32[$722 + 8 >> 2] = $722; //@line 10028
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 10033
         $910 = HEAP32[$909 >> 2] | 0; //@line 10034
         $911 = HEAP32[5973] | 0; //@line 10035
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 10041
          HEAP32[$909 >> 2] = $722; //@line 10042
          HEAP32[$722 + 8 >> 2] = $910; //@line 10044
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 10046
          HEAP32[$722 + 24 >> 2] = 0; //@line 10048
          break;
         } else {
          _abort(); //@line 10051
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 10058
      STACKTOP = sp; //@line 10059
      return $$0 | 0; //@line 10059
     } else {
      $$0$i$i$i = 24324; //@line 10061
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 10065
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 10070
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 10078
    }
    $927 = $923 + -47 | 0; //@line 10080
    $929 = $927 + 8 | 0; //@line 10082
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 10088
    $936 = $636 + 16 | 0; //@line 10089
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 10091
    $939 = $938 + 8 | 0; //@line 10092
    $940 = $938 + 24 | 0; //@line 10093
    $941 = $$723947$i + -40 | 0; //@line 10094
    $943 = $$748$i + 8 | 0; //@line 10096
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 10101
    $949 = $$748$i + $948 | 0; //@line 10102
    $950 = $941 - $948 | 0; //@line 10103
    HEAP32[5975] = $949; //@line 10104
    HEAP32[5972] = $950; //@line 10105
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 10108
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 10111
    HEAP32[5976] = HEAP32[6091]; //@line 10113
    $956 = $938 + 4 | 0; //@line 10114
    HEAP32[$956 >> 2] = 27; //@line 10115
    HEAP32[$939 >> 2] = HEAP32[6081]; //@line 10116
    HEAP32[$939 + 4 >> 2] = HEAP32[6082]; //@line 10116
    HEAP32[$939 + 8 >> 2] = HEAP32[6083]; //@line 10116
    HEAP32[$939 + 12 >> 2] = HEAP32[6084]; //@line 10116
    HEAP32[6081] = $$748$i; //@line 10117
    HEAP32[6082] = $$723947$i; //@line 10118
    HEAP32[6084] = 0; //@line 10119
    HEAP32[6083] = $939; //@line 10120
    $958 = $940; //@line 10121
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 10123
     HEAP32[$958 >> 2] = 7; //@line 10124
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 10137
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 10140
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 10143
     HEAP32[$938 >> 2] = $964; //@line 10144
     $969 = $964 >>> 3; //@line 10145
     if ($964 >>> 0 < 256) {
      $972 = 23916 + ($969 << 1 << 2) | 0; //@line 10149
      $973 = HEAP32[5969] | 0; //@line 10150
      $974 = 1 << $969; //@line 10151
      if (!($973 & $974)) {
       HEAP32[5969] = $973 | $974; //@line 10156
       $$0211$i$i = $972; //@line 10158
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 10158
      } else {
       $978 = $972 + 8 | 0; //@line 10160
       $979 = HEAP32[$978 >> 2] | 0; //@line 10161
       if ((HEAP32[5973] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 10165
       } else {
        $$0211$i$i = $979; //@line 10168
        $$pre$phi$i$iZ2D = $978; //@line 10168
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 10171
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 10173
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 10175
      HEAP32[$636 + 12 >> 2] = $972; //@line 10177
      break;
     }
     $985 = $964 >>> 8; //@line 10180
     if (!$985) {
      $$0212$i$i = 0; //@line 10183
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 10187
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 10191
       $991 = $985 << $990; //@line 10192
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 10195
       $996 = $991 << $994; //@line 10197
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 10200
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 10205
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 10211
      }
     }
     $1010 = 24180 + ($$0212$i$i << 2) | 0; //@line 10214
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 10216
     HEAP32[$636 + 20 >> 2] = 0; //@line 10218
     HEAP32[$936 >> 2] = 0; //@line 10219
     $1013 = HEAP32[5970] | 0; //@line 10220
     $1014 = 1 << $$0212$i$i; //@line 10221
     if (!($1013 & $1014)) {
      HEAP32[5970] = $1013 | $1014; //@line 10226
      HEAP32[$1010 >> 2] = $636; //@line 10227
      HEAP32[$636 + 24 >> 2] = $1010; //@line 10229
      HEAP32[$636 + 12 >> 2] = $636; //@line 10231
      HEAP32[$636 + 8 >> 2] = $636; //@line 10233
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 10242
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 10242
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 10249
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 10253
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 10255
      if (!$1034) {
       label = 286; //@line 10258
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 10261
       $$0207$i$i = $1034; //@line 10261
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[5973] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 10268
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 10271
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 10273
       HEAP32[$636 + 12 >> 2] = $636; //@line 10275
       HEAP32[$636 + 8 >> 2] = $636; //@line 10277
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 10282
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 10283
      $1043 = HEAP32[5973] | 0; //@line 10284
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 10290
       HEAP32[$1041 >> 2] = $636; //@line 10291
       HEAP32[$636 + 8 >> 2] = $1042; //@line 10293
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 10295
       HEAP32[$636 + 24 >> 2] = 0; //@line 10297
       break;
      } else {
       _abort(); //@line 10300
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[5972] | 0; //@line 10307
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 10310
   HEAP32[5972] = $1054; //@line 10311
   $1055 = HEAP32[5975] | 0; //@line 10312
   $1056 = $1055 + $$0197 | 0; //@line 10313
   HEAP32[5975] = $1056; //@line 10314
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 10317
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 10320
   $$0 = $1055 + 8 | 0; //@line 10322
   STACKTOP = sp; //@line 10323
   return $$0 | 0; //@line 10323
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 10327
 $$0 = 0; //@line 10328
 STACKTOP = sp; //@line 10329
 return $$0 | 0; //@line 10329
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0$be = 0, $$0$i = 0, $$0$i116 = 0, $$0$i118 = 0, $$0107$be = 0, $$0107$lcssa = 0, $$0107131 = 0, $$0109129 = 0, $$0111 = 0, $$0132 = 0, $$1$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $137 = 0, $140 = 0, $145 = 0, $146 = 0, $15 = 0, $152 = 0, $156 = 0, $159 = 0, $16 = 0, $166 = 0, $167 = 0, $17 = 0, $173 = 0, $18 = 0, $19 = 0, $192 = 0, $20 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $270 = 0, $271 = 0, $279 = 0, $28 = 0, $281 = 0, $282 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $344 = 0, $345 = 0, $35 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $380 = 0, $386 = 0, $387 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $449 = 0, $45 = 0, $450 = 0, $459 = 0, $46 = 0, $463 = 0, $467 = 0, $472 = 0, $473 = 0, $477 = 0, $48 = 0, $481 = 0, $483 = 0, $485 = 0, $488 = 0, $489 = 0, $559 = 0, $560 = 0, $567 = 0, $580 = 0, $587 = 0, $59 = 0, $590 = 0, $591 = 0, $60 = 0, $653 = 0, $654 = 0, $661 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17549
 STACKTOP = STACKTOP + 16 | 0; //@line 17550
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17550
 $8 = sp; //@line 17551
 $9 = sp + 15 | 0; //@line 17552
 $10 = sp + 14 | 0; //@line 17553
 $11 = sp + 13 | 0; //@line 17554
 $12 = sp + 12 | 0; //@line 17555
 $13 = $3 & 255; //@line 17556
 if (($2 & 255) >= ($3 & 255)) {
  $$0107$lcssa = 0; //@line 17559
  STACKTOP = sp; //@line 17560
  return $$0107$lcssa | 0; //@line 17560
 }
 $15 = $5 + 8 | 0; //@line 17562
 $16 = $5 + 16 | 0; //@line 17563
 $17 = $5 + 17 | 0; //@line 17564
 $18 = $8 + 4 | 0; //@line 17565
 $19 = $6 + 60 | 0; //@line 17566
 $20 = $8 + 6 | 0; //@line 17567
 $21 = $6 + 44 | 0; //@line 17568
 $22 = $8 + 5 | 0; //@line 17569
 $23 = $6 + 1 | 0; //@line 17570
 $24 = $8 + 7 | 0; //@line 17571
 $25 = $8 + 8 | 0; //@line 17572
 $26 = $6 + 32 | 0; //@line 17573
 $27 = $8 + 9 | 0; //@line 17574
 $28 = $0 + 3 | 0; //@line 17575
 $29 = $0 + 2 | 0; //@line 17576
 $30 = $6 + 56 | 0; //@line 17577
 $31 = $6 + 58 | 0; //@line 17578
 $32 = $8 + 1 | 0; //@line 17579
 $33 = $8 + 4 | 0; //@line 17580
 $34 = $6 + 40 | 0; //@line 17581
 $35 = $6 + 36 | 0; //@line 17582
 $36 = $6 + 33 | 0; //@line 17583
 $37 = $0 + 1 | 0; //@line 17584
 $38 = $0 + 272 | 0; //@line 17585
 $39 = $4 & 63; //@line 17586
 $40 = $0 + 260 | 0; //@line 17587
 $41 = $8 + 4 | 0; //@line 17588
 $42 = $8 + 8 | 0; //@line 17589
 $43 = $6 + 16 | 0; //@line 17590
 $44 = $6 + 20 | 0; //@line 17591
 $45 = $6 + 45 | 0; //@line 17592
 $46 = $6 + 48 | 0; //@line 17593
 $$0107131 = 0; //@line 17594
 $$0132 = $2; //@line 17594
 L4 : while (1) {
  $48 = $$0132 + 1 << 24 >> 24; //@line 17597
  switch (HEAP8[$1 + ($$0132 & 255) >> 0] | 0) {
  case 2:
   {
    HEAP32[$15 >> 2] = 0; //@line 17602
    HEAP8[$16 >> 0] = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 17607
    HEAP8[$17 >> 0] = HEAP8[$1 + ($$0132 + 2 & 255) >> 0] | 0; //@line 17612
    $$0$be = $$0132 + 3 << 24 >> 24; //@line 17613
    $$0107$be = $$0107131; //@line 17613
    break;
   }
  case 3:
   {
    HEAP8[$9 >> 0] = 0; //@line 17617
    HEAP8[$10 >> 0] = 0; //@line 17618
    HEAP8[$11 >> 0] = 0; //@line 17619
    HEAP8[$12 >> 0] = 0; //@line 17620
    $59 = $48 & 255; //@line 17621
    $60 = $59 + -1 | 0; //@line 17622
    HEAP32[$8 >> 2] = $1 + $60; //@line 17624
    HEAP8[$18 >> 0] = $13 - $60; //@line 17627
    HEAP8[$20 >> 0] = HEAP8[$19 >> 0] | 0; //@line 17629
    HEAP8[$22 >> 0] = HEAP8[$21 >> 0] | 0; //@line 17631
    HEAP8[$24 >> 0] = HEAP8[$23 >> 0] | 0; //@line 17633
    HEAP8[$25 >> 0] = HEAP8[$6 >> 0] | 0; //@line 17635
    HEAP8[$27 >> 0] = HEAP8[$26 >> 0] | 0; //@line 17637
    $71 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 17640
    $AsyncCtx = _emscripten_alloc_async_context(240, sp) | 0; //@line 17641
    $72 = FUNCTION_TABLE_iiiiiii[$71 & 3]($7, $8, $9, $10, $11, $12) | 0; //@line 17642
    if (___async) {
     label = 6; //@line 17645
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17648
    if (($72 & 7) == 7) {
     HEAP8[$23 >> 0] = HEAP8[$9 >> 0] | 0; //@line 17653
     HEAP8[$6 >> 0] = HEAP8[$10 >> 0] | 0; //@line 17655
     HEAP8[$26 >> 0] = HEAP8[$11 >> 0] | 0; //@line 17657
    }
    $137 = HEAP8[$12 >> 0] | 0; //@line 17659
    if (($137 & 255) > 4) {
     $div = ($137 & 255) / 5 | 0; //@line 17662
     $140 = 128 - (HEAPU8[$28 >> 0] | 0) | 0; //@line 17666
     $$0109129 = 0; //@line 17667
     $146 = HEAP8[$29 >> 0] | 0; //@line 17667
     while (1) {
      $145 = $146 & 255; //@line 17669
      if (($140 - $145 | 0) > 1) {
       $152 = $146 + 2 << 24 >> 24; //@line 17676
       HEAP8[$0 + 4 + $145 >> 0] = 3; //@line 17678
       HEAP8[$29 >> 0] = $152; //@line 17679
       HEAP8[($146 + 1 & 255) + ($0 + 4) >> 0] = $72; //@line 17680
       HEAP8[$0 >> 0] = 1; //@line 17681
       $$0$i = 0; //@line 17682
       $661 = $152; //@line 17682
      } else {
       $$0$i = -1010; //@line 17684
       $661 = $146; //@line 17684
      }
      $$0109129 = $$0109129 + 1 << 24 >> 24; //@line 17686
      if (($$0109129 & 255) >= ($div & 255)) {
       $$1$lcssa = $$0$i; //@line 17691
       break;
      } else {
       $146 = $661; //@line 17689
      }
     }
    } else {
     $$1$lcssa = $$0107131; //@line 17696
    }
    $$0$be = $59 + 255 + ($137 & 255) & 255; //@line 17702
    $$0107$be = $$1$lcssa; //@line 17702
    break;
   }
  case 4:
   {
    $156 = $$0132 + 2 << 24 >> 24; //@line 17706
    $159 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 17709
    HEAP8[$30 >> 0] = $159; //@line 17710
    HEAP16[$31 >> 1] = 1 << ($159 & 255); //@line 17714
    $166 = HEAP8[$29 >> 0] | 0; //@line 17718
    $167 = $166 & 255; //@line 17719
    if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($167 | 0)) {
     HEAP8[$29 >> 0] = $166 + 1 << 24 >> 24; //@line 17724
     HEAP8[$0 + 4 + $167 >> 0] = 4; //@line 17725
     HEAP8[$0 >> 0] = 1; //@line 17726
     $$0$be = $156; //@line 17727
     $$0107$be = 0; //@line 17727
    } else {
     $$0$be = $156; //@line 17729
     $$0107$be = -1010; //@line 17729
    }
    break;
   }
  case 5:
   {
    $173 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 17736
    HEAP8[$32 >> 0] = ($173 & 255) >>> 4 & 7; //@line 17741
    HEAP8[$8 >> 0] = $173 & 15; //@line 17743
    $192 = $$0132 + 5 << 24 >> 24; //@line 17757
    HEAP32[$33 >> 2] = (HEAPU8[$1 + ($$0132 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0132 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0132 + 2 & 255) >> 0])) * 100; //@line 17765
    $202 = HEAP32[(HEAP32[$7 >> 2] | 0) + 40 >> 2] | 0; //@line 17768
    $AsyncCtx3 = _emscripten_alloc_async_context(236, sp) | 0; //@line 17769
    $203 = FUNCTION_TABLE_iii[$202 & 15]($7, $8) | 0; //@line 17770
    if (___async) {
     label = 18; //@line 17773
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17776
    if (($203 & 7) == 7) {
     HEAP8[$34 >> 0] = HEAP8[$8 >> 0] | 0; //@line 17781
     HEAP32[$35 >> 2] = HEAP32[$33 >> 2]; //@line 17783
     HEAP8[$36 >> 0] = HEAP8[$32 >> 0] | 0; //@line 17785
    }
    $270 = HEAP8[$29 >> 0] | 0; //@line 17790
    $271 = $270 & 255; //@line 17791
    if ((128 - (HEAPU8[$28 >> 0] | 0) - $271 | 0) > 1) {
     HEAP8[$0 + 4 + $271 >> 0] = 5; //@line 17797
     HEAP8[$29 >> 0] = $270 + 2 << 24 >> 24; //@line 17799
     HEAP8[($270 + 1 & 255) + ($0 + 4) >> 0] = $203; //@line 17802
     HEAP8[$37 >> 0] = 1; //@line 17803
     HEAP8[$0 >> 0] = 1; //@line 17804
     $$0$i116 = 0; //@line 17805
    } else {
     $$0$i116 = -1010; //@line 17807
    }
    $$0$be = $192; //@line 17809
    $$0107$be = $$0$i116; //@line 17809
    break;
   }
  case 6:
   {
    $279 = HEAP32[$38 >> 2] | 0; //@line 17813
    if (!$279) {
     $$0111 = -1; //@line 17816
    } else {
     $281 = HEAP32[$279 >> 2] | 0; //@line 17818
     $AsyncCtx6 = _emscripten_alloc_async_context(236, sp) | 0; //@line 17819
     $282 = FUNCTION_TABLE_ii[$281 & 15]($40) | 0; //@line 17820
     if (___async) {
      label = 26; //@line 17823
      break L4;
     }
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 17826
     $$0111 = $282; //@line 17827
    }
    $344 = HEAP8[$29 >> 0] | 0; //@line 17832
    $345 = $344 & 255; //@line 17833
    if ((128 - (HEAPU8[$28 >> 0] | 0) - $345 | 0) > 2) {
     HEAP8[$0 + 4 + $345 >> 0] = 6; //@line 17839
     HEAP8[($344 + 1 & 255) + ($0 + 4) >> 0] = $$0111; //@line 17843
     HEAP8[$29 >> 0] = $344 + 3 << 24 >> 24; //@line 17845
     HEAP8[($344 + 2 & 255) + ($0 + 4) >> 0] = $39; //@line 17848
     HEAP8[$0 >> 0] = 1; //@line 17849
     $$0$be = $48; //@line 17850
     $$0107$be = 0; //@line 17850
    } else {
     $$0$be = $48; //@line 17852
     $$0107$be = -1010; //@line 17852
    }
    break;
   }
  case 7:
   {
    $359 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 17860
    HEAP32[$8 >> 2] = (HEAPU8[$1 + ($$0132 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0132 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0132 + 2 & 255) >> 0])) * 100; //@line 17881
    HEAP32[$41 >> 2] = 0; //@line 17882
    $380 = $$0132 + 6 << 24 >> 24; //@line 17883
    HEAP8[$42 >> 0] = HEAP8[$1 + ($$0132 + 5 & 255) >> 0] | 0; //@line 17887
    $386 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 17890
    $AsyncCtx10 = _emscripten_alloc_async_context(236, sp) | 0; //@line 17891
    $387 = FUNCTION_TABLE_iiii[$386 & 31]($7, $359, $8) | 0; //@line 17892
    if (___async) {
     label = 31; //@line 17895
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 17898
    $449 = HEAP8[$29 >> 0] | 0; //@line 17902
    $450 = $449 & 255; //@line 17903
    if ((128 - (HEAPU8[$28 >> 0] | 0) - $450 | 0) > 1) {
     HEAP8[$0 + 4 + $450 >> 0] = 7; //@line 17912
     HEAP8[$29 >> 0] = $449 + 2 << 24 >> 24; //@line 17913
     HEAP8[($449 + 1 & 255) + ($0 + 4) >> 0] = $387; //@line 17914
     HEAP8[$0 >> 0] = 1; //@line 17915
     $$0$i118 = 0; //@line 17916
    } else {
     $$0$i118 = -1010; //@line 17918
    }
    $$0$be = $380; //@line 17920
    $$0107$be = $$0$i118; //@line 17920
    break;
   }
  case 8:
   {
    $459 = $$0132 + 2 << 24 >> 24; //@line 17924
    $463 = HEAP8[$1 + ($48 & 255) >> 0] & 15; //@line 17928
    $467 = ($463 + ($463 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 17933
    HEAP32[$43 >> 2] = $467; //@line 17934
    HEAP32[$44 >> 2] = $467 + 1e3; //@line 17936
    $472 = HEAP8[$29 >> 0] | 0; //@line 17940
    $473 = $472 & 255; //@line 17941
    if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($473 | 0)) {
     HEAP8[$29 >> 0] = $472 + 1 << 24 >> 24; //@line 17946
     HEAP8[$0 + 4 + $473 >> 0] = 8; //@line 17947
     HEAP8[$37 >> 0] = 1; //@line 17948
     HEAP8[$0 >> 0] = 1; //@line 17949
     $$0$be = $459; //@line 17950
     $$0107$be = 0; //@line 17950
    } else {
     $$0$be = $459; //@line 17952
     $$0107$be = -1010; //@line 17952
    }
    break;
   }
  case 9:
   {
    $477 = $$0132 + 2 << 24 >> 24; //@line 17957
    $481 = HEAPU8[$1 + ($48 & 255) >> 0] | 0; //@line 17961
    $483 = $481 >>> 5 & 1; //@line 17964
    $485 = $481 >>> 4 & 1; //@line 17967
    $488 = HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] | 0; //@line 17970
    $AsyncCtx14 = _emscripten_alloc_async_context(252, sp) | 0; //@line 17971
    $489 = FUNCTION_TABLE_iiii[$488 & 31]($7, $485, $483) | 0; //@line 17972
    if (___async) {
     label = 39; //@line 17975
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 17978
    if ($489) {
     HEAP8[$21 >> 0] = $485; //@line 17981
     HEAP8[$45 >> 0] = $483; //@line 17982
     HEAPF32[$46 >> 2] = +(HEAPU8[13579 + ($481 & 15) >> 0] | 0); //@line 17986
     $559 = HEAP8[$29 >> 0] | 0; //@line 17990
     $560 = $559 & 255; //@line 17991
     if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($560 | 0)) {
      HEAP8[$29 >> 0] = $559 + 1 << 24 >> 24; //@line 17996
      HEAP8[$0 + 4 + $560 >> 0] = 9; //@line 17997
      HEAP8[$0 >> 0] = 1; //@line 17998
      $$0$be = $477; //@line 17999
      $$0107$be = 0; //@line 17999
     } else {
      $$0$be = $477; //@line 18001
      $$0107$be = -1010; //@line 18001
     }
    } else {
     $$0$be = $477; //@line 18004
     $$0107$be = $$0107131; //@line 18004
    }
    break;
   }
  case 10:
   {
    $567 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 18012
    $580 = $$0132 + 5 << 24 >> 24; //@line 18025
    $587 = (HEAPU8[$1 + ($$0132 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0132 + 2 & 255) >> 0] | HEAPU8[$1 + ($$0132 + 4 & 255) >> 0] << 16) * 100 | 0; //@line 18032
    $590 = HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] | 0; //@line 18035
    $AsyncCtx18 = _emscripten_alloc_async_context(236, sp) | 0; //@line 18036
    $591 = FUNCTION_TABLE_iiii[$590 & 31]($7, $567, $587) | 0; //@line 18037
    if (___async) {
     label = 44; //@line 18040
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx18 | 0); //@line 18043
    $653 = HEAP8[$29 >> 0] | 0; //@line 18047
    $654 = $653 & 255; //@line 18048
    if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($654 | 0)) {
     HEAP8[$0 + 4 + $654 >> 0] = 10; //@line 18053
     HEAP8[$29 >> 0] = $653 + 2 << 24 >> 24; //@line 18055
     HEAP8[($653 + 1 & 255) + ($0 + 4) >> 0] = $591; //@line 18058
     HEAP8[$37 >> 0] = 1; //@line 18059
     HEAP8[$0 >> 0] = 1; //@line 18060
     $$0$be = $580; //@line 18061
     $$0107$be = 0; //@line 18061
    } else {
     $$0$be = $580; //@line 18063
     $$0107$be = -1010; //@line 18063
    }
    break;
   }
  default:
   {
    $$0$be = $48; //@line 18068
    $$0107$be = -1013; //@line 18068
   }
  }
  if (($$0$be & 255) < ($3 & 255)) {
   $$0107131 = $$0107$be; //@line 18073
   $$0132 = $$0$be; //@line 18073
  } else {
   $$0107$lcssa = $$0107$be; //@line 18075
   label = 47; //@line 18076
   break;
  }
 }
 if ((label | 0) == 6) {
  HEAP32[$AsyncCtx >> 2] = 490; //@line 18081
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 18083
  HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 18085
  HEAP32[$AsyncCtx + 12 >> 2] = $44; //@line 18087
  HEAP32[$AsyncCtx + 16 >> 2] = $22; //@line 18089
  HEAP32[$AsyncCtx + 20 >> 2] = $12; //@line 18091
  HEAP32[$AsyncCtx + 24 >> 2] = $8; //@line 18093
  HEAP32[$AsyncCtx + 28 >> 2] = $34; //@line 18095
  HEAP32[$AsyncCtx + 32 >> 2] = $21; //@line 18097
  HEAP32[$AsyncCtx + 36 >> 2] = $11; //@line 18099
  HEAP32[$AsyncCtx + 40 >> 2] = $24; //@line 18101
  HEAP32[$AsyncCtx + 44 >> 2] = $7; //@line 18103
  HEAP32[$AsyncCtx + 48 >> 2] = $7; //@line 18105
  HEAP32[$AsyncCtx + 52 >> 2] = $32; //@line 18107
  HEAP32[$AsyncCtx + 56 >> 2] = $10; //@line 18109
  HEAP32[$AsyncCtx + 60 >> 2] = $23; //@line 18111
  HEAP32[$AsyncCtx + 64 >> 2] = $33; //@line 18113
  HEAP32[$AsyncCtx + 68 >> 2] = $25; //@line 18115
  HEAP32[$AsyncCtx + 72 >> 2] = $36; //@line 18117
  HEAP32[$AsyncCtx + 76 >> 2] = $43; //@line 18119
  HEAP32[$AsyncCtx + 80 >> 2] = $7; //@line 18121
  HEAP32[$AsyncCtx + 84 >> 2] = $37; //@line 18123
  HEAP32[$AsyncCtx + 88 >> 2] = $6; //@line 18125
  HEAP32[$AsyncCtx + 92 >> 2] = $13; //@line 18127
  HEAP32[$AsyncCtx + 96 >> 2] = $15; //@line 18129
  HEAP32[$AsyncCtx + 100 >> 2] = $45; //@line 18131
  HEAP32[$AsyncCtx + 104 >> 2] = $26; //@line 18133
  HEAP32[$AsyncCtx + 108 >> 2] = $35; //@line 18135
  HEAP32[$AsyncCtx + 112 >> 2] = $46; //@line 18137
  HEAP32[$AsyncCtx + 116 >> 2] = $17; //@line 18139
  HEAP32[$AsyncCtx + 120 >> 2] = $29; //@line 18141
  HEAP32[$AsyncCtx + 124 >> 2] = $7; //@line 18143
  HEAP32[$AsyncCtx + 128 >> 2] = $16; //@line 18145
  HEAP32[$AsyncCtx + 132 >> 2] = $40; //@line 18147
  HEAP32[$AsyncCtx + 136 >> 2] = $27; //@line 18149
  HEAP32[$AsyncCtx + 140 >> 2] = $38; //@line 18151
  HEAP32[$AsyncCtx + 144 >> 2] = $8; //@line 18153
  HEAP32[$AsyncCtx + 148 >> 2] = $0; //@line 18155
  HEAP32[$AsyncCtx + 152 >> 2] = $7; //@line 18157
  HEAP32[$AsyncCtx + 156 >> 2] = $59; //@line 18159
  HEAP32[$AsyncCtx + 160 >> 2] = $8; //@line 18161
  HEAP8[$AsyncCtx + 164 >> 0] = $39; //@line 18163
  HEAP32[$AsyncCtx + 168 >> 2] = $1; //@line 18165
  HEAP32[$AsyncCtx + 172 >> 2] = $$0107131; //@line 18167
  HEAP8[$AsyncCtx + 176 >> 0] = $3; //@line 18169
  HEAP32[$AsyncCtx + 180 >> 2] = $28; //@line 18171
  HEAP8[$AsyncCtx + 184 >> 0] = $2; //@line 18173
  HEAP32[$AsyncCtx + 188 >> 2] = $19; //@line 18175
  HEAP32[$AsyncCtx + 192 >> 2] = $31; //@line 18177
  HEAP32[$AsyncCtx + 196 >> 2] = $41; //@line 18179
  HEAP32[$AsyncCtx + 200 >> 2] = $42; //@line 18181
  HEAP32[$AsyncCtx + 204 >> 2] = $8; //@line 18183
  HEAP32[$AsyncCtx + 208 >> 2] = $18; //@line 18185
  HEAP32[$AsyncCtx + 212 >> 2] = $0; //@line 18187
  HEAP32[$AsyncCtx + 216 >> 2] = $8; //@line 18189
  HEAP32[$AsyncCtx + 220 >> 2] = $20; //@line 18191
  HEAP32[$AsyncCtx + 224 >> 2] = $30; //@line 18193
  HEAP32[$AsyncCtx + 228 >> 2] = $8; //@line 18195
  HEAP32[$AsyncCtx + 232 >> 2] = $8; //@line 18197
  HEAP32[$AsyncCtx + 236 >> 2] = $9; //@line 18199
  sp = STACKTOP; //@line 18200
  STACKTOP = sp; //@line 18201
  return 0; //@line 18201
 } else if ((label | 0) == 18) {
  HEAP32[$AsyncCtx3 >> 2] = 491; //@line 18204
  HEAP32[$AsyncCtx3 + 4 >> 2] = $7; //@line 18206
  HEAP32[$AsyncCtx3 + 8 >> 2] = $8; //@line 18208
  HEAP32[$AsyncCtx3 + 12 >> 2] = $44; //@line 18210
  HEAP32[$AsyncCtx3 + 16 >> 2] = $22; //@line 18212
  HEAP32[$AsyncCtx3 + 20 >> 2] = $12; //@line 18214
  HEAP32[$AsyncCtx3 + 24 >> 2] = $8; //@line 18216
  HEAP32[$AsyncCtx3 + 28 >> 2] = $34; //@line 18218
  HEAP32[$AsyncCtx3 + 32 >> 2] = $21; //@line 18220
  HEAP32[$AsyncCtx3 + 36 >> 2] = $11; //@line 18222
  HEAP32[$AsyncCtx3 + 40 >> 2] = $24; //@line 18224
  HEAP32[$AsyncCtx3 + 44 >> 2] = $7; //@line 18226
  HEAP32[$AsyncCtx3 + 48 >> 2] = $7; //@line 18228
  HEAP32[$AsyncCtx3 + 52 >> 2] = $32; //@line 18230
  HEAP32[$AsyncCtx3 + 56 >> 2] = $10; //@line 18232
  HEAP32[$AsyncCtx3 + 60 >> 2] = $23; //@line 18234
  HEAP32[$AsyncCtx3 + 64 >> 2] = $33; //@line 18236
  HEAP32[$AsyncCtx3 + 68 >> 2] = $25; //@line 18238
  HEAP32[$AsyncCtx3 + 72 >> 2] = $36; //@line 18240
  HEAP32[$AsyncCtx3 + 76 >> 2] = $43; //@line 18242
  HEAP32[$AsyncCtx3 + 80 >> 2] = $7; //@line 18244
  HEAP32[$AsyncCtx3 + 84 >> 2] = $37; //@line 18246
  HEAP32[$AsyncCtx3 + 88 >> 2] = $6; //@line 18248
  HEAP32[$AsyncCtx3 + 92 >> 2] = $13; //@line 18250
  HEAP32[$AsyncCtx3 + 96 >> 2] = $15; //@line 18252
  HEAP32[$AsyncCtx3 + 100 >> 2] = $45; //@line 18254
  HEAP32[$AsyncCtx3 + 104 >> 2] = $26; //@line 18256
  HEAP32[$AsyncCtx3 + 108 >> 2] = $35; //@line 18258
  HEAP32[$AsyncCtx3 + 112 >> 2] = $46; //@line 18260
  HEAP32[$AsyncCtx3 + 116 >> 2] = $17; //@line 18262
  HEAP32[$AsyncCtx3 + 120 >> 2] = $29; //@line 18264
  HEAP32[$AsyncCtx3 + 124 >> 2] = $7; //@line 18266
  HEAP32[$AsyncCtx3 + 128 >> 2] = $16; //@line 18268
  HEAP32[$AsyncCtx3 + 132 >> 2] = $40; //@line 18270
  HEAP32[$AsyncCtx3 + 136 >> 2] = $27; //@line 18272
  HEAP32[$AsyncCtx3 + 140 >> 2] = $38; //@line 18274
  HEAP32[$AsyncCtx3 + 144 >> 2] = $8; //@line 18276
  HEAP32[$AsyncCtx3 + 148 >> 2] = $0; //@line 18278
  HEAP32[$AsyncCtx3 + 152 >> 2] = $7; //@line 18280
  HEAP32[$AsyncCtx3 + 156 >> 2] = $8; //@line 18282
  HEAP8[$AsyncCtx3 + 160 >> 0] = $39; //@line 18284
  HEAP32[$AsyncCtx3 + 164 >> 2] = $1; //@line 18286
  HEAP8[$AsyncCtx3 + 168 >> 0] = $3; //@line 18288
  HEAP32[$AsyncCtx3 + 172 >> 2] = $28; //@line 18290
  HEAP8[$AsyncCtx3 + 176 >> 0] = $2; //@line 18292
  HEAP32[$AsyncCtx3 + 180 >> 2] = $19; //@line 18294
  HEAP32[$AsyncCtx3 + 184 >> 2] = $31; //@line 18296
  HEAP32[$AsyncCtx3 + 188 >> 2] = $41; //@line 18298
  HEAP32[$AsyncCtx3 + 192 >> 2] = $42; //@line 18300
  HEAP32[$AsyncCtx3 + 196 >> 2] = $8; //@line 18302
  HEAP32[$AsyncCtx3 + 200 >> 2] = $18; //@line 18304
  HEAP32[$AsyncCtx3 + 204 >> 2] = $0; //@line 18306
  HEAP32[$AsyncCtx3 + 208 >> 2] = $8; //@line 18308
  HEAP32[$AsyncCtx3 + 212 >> 2] = $20; //@line 18310
  HEAP32[$AsyncCtx3 + 216 >> 2] = $30; //@line 18312
  HEAP32[$AsyncCtx3 + 220 >> 2] = $8; //@line 18314
  HEAP32[$AsyncCtx3 + 224 >> 2] = $8; //@line 18316
  HEAP8[$AsyncCtx3 + 228 >> 0] = $192; //@line 18318
  HEAP32[$AsyncCtx3 + 232 >> 2] = $9; //@line 18320
  sp = STACKTOP; //@line 18321
  STACKTOP = sp; //@line 18322
  return 0; //@line 18322
 } else if ((label | 0) == 26) {
  HEAP32[$AsyncCtx6 >> 2] = 492; //@line 18325
  HEAP32[$AsyncCtx6 + 4 >> 2] = $7; //@line 18327
  HEAP32[$AsyncCtx6 + 8 >> 2] = $8; //@line 18329
  HEAP32[$AsyncCtx6 + 12 >> 2] = $44; //@line 18331
  HEAP32[$AsyncCtx6 + 16 >> 2] = $22; //@line 18333
  HEAP32[$AsyncCtx6 + 20 >> 2] = $12; //@line 18335
  HEAP32[$AsyncCtx6 + 24 >> 2] = $8; //@line 18337
  HEAP32[$AsyncCtx6 + 28 >> 2] = $34; //@line 18339
  HEAP32[$AsyncCtx6 + 32 >> 2] = $21; //@line 18341
  HEAP32[$AsyncCtx6 + 36 >> 2] = $11; //@line 18343
  HEAP32[$AsyncCtx6 + 40 >> 2] = $24; //@line 18345
  HEAP32[$AsyncCtx6 + 44 >> 2] = $7; //@line 18347
  HEAP32[$AsyncCtx6 + 48 >> 2] = $7; //@line 18349
  HEAP32[$AsyncCtx6 + 52 >> 2] = $32; //@line 18351
  HEAP32[$AsyncCtx6 + 56 >> 2] = $10; //@line 18353
  HEAP32[$AsyncCtx6 + 60 >> 2] = $23; //@line 18355
  HEAP32[$AsyncCtx6 + 64 >> 2] = $33; //@line 18357
  HEAP32[$AsyncCtx6 + 68 >> 2] = $25; //@line 18359
  HEAP32[$AsyncCtx6 + 72 >> 2] = $36; //@line 18361
  HEAP32[$AsyncCtx6 + 76 >> 2] = $43; //@line 18363
  HEAP32[$AsyncCtx6 + 80 >> 2] = $7; //@line 18365
  HEAP32[$AsyncCtx6 + 84 >> 2] = $37; //@line 18367
  HEAP32[$AsyncCtx6 + 88 >> 2] = $6; //@line 18369
  HEAP32[$AsyncCtx6 + 92 >> 2] = $13; //@line 18371
  HEAP32[$AsyncCtx6 + 96 >> 2] = $15; //@line 18373
  HEAP32[$AsyncCtx6 + 100 >> 2] = $45; //@line 18375
  HEAP32[$AsyncCtx6 + 104 >> 2] = $26; //@line 18377
  HEAP32[$AsyncCtx6 + 108 >> 2] = $35; //@line 18379
  HEAP32[$AsyncCtx6 + 112 >> 2] = $46; //@line 18381
  HEAP32[$AsyncCtx6 + 116 >> 2] = $17; //@line 18383
  HEAP32[$AsyncCtx6 + 120 >> 2] = $29; //@line 18385
  HEAP32[$AsyncCtx6 + 124 >> 2] = $7; //@line 18387
  HEAP32[$AsyncCtx6 + 128 >> 2] = $16; //@line 18389
  HEAP32[$AsyncCtx6 + 132 >> 2] = $40; //@line 18391
  HEAP32[$AsyncCtx6 + 136 >> 2] = $27; //@line 18393
  HEAP32[$AsyncCtx6 + 140 >> 2] = $38; //@line 18395
  HEAP32[$AsyncCtx6 + 144 >> 2] = $8; //@line 18397
  HEAP32[$AsyncCtx6 + 148 >> 2] = $0; //@line 18399
  HEAP32[$AsyncCtx6 + 152 >> 2] = $7; //@line 18401
  HEAP32[$AsyncCtx6 + 156 >> 2] = $8; //@line 18403
  HEAP8[$AsyncCtx6 + 160 >> 0] = $39; //@line 18405
  HEAP32[$AsyncCtx6 + 164 >> 2] = $1; //@line 18407
  HEAP8[$AsyncCtx6 + 168 >> 0] = $3; //@line 18409
  HEAP32[$AsyncCtx6 + 172 >> 2] = $28; //@line 18411
  HEAP8[$AsyncCtx6 + 176 >> 0] = $2; //@line 18413
  HEAP32[$AsyncCtx6 + 180 >> 2] = $19; //@line 18415
  HEAP32[$AsyncCtx6 + 184 >> 2] = $31; //@line 18417
  HEAP32[$AsyncCtx6 + 188 >> 2] = $41; //@line 18419
  HEAP32[$AsyncCtx6 + 192 >> 2] = $42; //@line 18421
  HEAP32[$AsyncCtx6 + 196 >> 2] = $8; //@line 18423
  HEAP32[$AsyncCtx6 + 200 >> 2] = $18; //@line 18425
  HEAP32[$AsyncCtx6 + 204 >> 2] = $0; //@line 18427
  HEAP8[$AsyncCtx6 + 208 >> 0] = $48; //@line 18429
  HEAP32[$AsyncCtx6 + 212 >> 2] = $8; //@line 18431
  HEAP32[$AsyncCtx6 + 216 >> 2] = $20; //@line 18433
  HEAP32[$AsyncCtx6 + 220 >> 2] = $30; //@line 18435
  HEAP32[$AsyncCtx6 + 224 >> 2] = $8; //@line 18437
  HEAP32[$AsyncCtx6 + 228 >> 2] = $8; //@line 18439
  HEAP32[$AsyncCtx6 + 232 >> 2] = $9; //@line 18441
  sp = STACKTOP; //@line 18442
  STACKTOP = sp; //@line 18443
  return 0; //@line 18443
 } else if ((label | 0) == 31) {
  HEAP32[$AsyncCtx10 >> 2] = 493; //@line 18446
  HEAP32[$AsyncCtx10 + 4 >> 2] = $7; //@line 18448
  HEAP32[$AsyncCtx10 + 8 >> 2] = $8; //@line 18450
  HEAP32[$AsyncCtx10 + 12 >> 2] = $44; //@line 18452
  HEAP32[$AsyncCtx10 + 16 >> 2] = $22; //@line 18454
  HEAP32[$AsyncCtx10 + 20 >> 2] = $12; //@line 18456
  HEAP32[$AsyncCtx10 + 24 >> 2] = $8; //@line 18458
  HEAP32[$AsyncCtx10 + 28 >> 2] = $34; //@line 18460
  HEAP32[$AsyncCtx10 + 32 >> 2] = $21; //@line 18462
  HEAP32[$AsyncCtx10 + 36 >> 2] = $11; //@line 18464
  HEAP32[$AsyncCtx10 + 40 >> 2] = $24; //@line 18466
  HEAP32[$AsyncCtx10 + 44 >> 2] = $7; //@line 18468
  HEAP32[$AsyncCtx10 + 48 >> 2] = $7; //@line 18470
  HEAP32[$AsyncCtx10 + 52 >> 2] = $32; //@line 18472
  HEAP32[$AsyncCtx10 + 56 >> 2] = $10; //@line 18474
  HEAP32[$AsyncCtx10 + 60 >> 2] = $23; //@line 18476
  HEAP32[$AsyncCtx10 + 64 >> 2] = $33; //@line 18478
  HEAP32[$AsyncCtx10 + 68 >> 2] = $25; //@line 18480
  HEAP32[$AsyncCtx10 + 72 >> 2] = $36; //@line 18482
  HEAP32[$AsyncCtx10 + 76 >> 2] = $43; //@line 18484
  HEAP32[$AsyncCtx10 + 80 >> 2] = $7; //@line 18486
  HEAP32[$AsyncCtx10 + 84 >> 2] = $37; //@line 18488
  HEAP32[$AsyncCtx10 + 88 >> 2] = $6; //@line 18490
  HEAP32[$AsyncCtx10 + 92 >> 2] = $13; //@line 18492
  HEAP32[$AsyncCtx10 + 96 >> 2] = $15; //@line 18494
  HEAP32[$AsyncCtx10 + 100 >> 2] = $45; //@line 18496
  HEAP32[$AsyncCtx10 + 104 >> 2] = $26; //@line 18498
  HEAP32[$AsyncCtx10 + 108 >> 2] = $35; //@line 18500
  HEAP32[$AsyncCtx10 + 112 >> 2] = $46; //@line 18502
  HEAP32[$AsyncCtx10 + 116 >> 2] = $17; //@line 18504
  HEAP32[$AsyncCtx10 + 120 >> 2] = $29; //@line 18506
  HEAP32[$AsyncCtx10 + 124 >> 2] = $7; //@line 18508
  HEAP32[$AsyncCtx10 + 128 >> 2] = $16; //@line 18510
  HEAP32[$AsyncCtx10 + 132 >> 2] = $40; //@line 18512
  HEAP32[$AsyncCtx10 + 136 >> 2] = $27; //@line 18514
  HEAP32[$AsyncCtx10 + 140 >> 2] = $38; //@line 18516
  HEAP32[$AsyncCtx10 + 144 >> 2] = $8; //@line 18518
  HEAP32[$AsyncCtx10 + 148 >> 2] = $0; //@line 18520
  HEAP32[$AsyncCtx10 + 152 >> 2] = $7; //@line 18522
  HEAP32[$AsyncCtx10 + 156 >> 2] = $8; //@line 18524
  HEAP8[$AsyncCtx10 + 160 >> 0] = $39; //@line 18526
  HEAP32[$AsyncCtx10 + 164 >> 2] = $1; //@line 18528
  HEAP8[$AsyncCtx10 + 168 >> 0] = $3; //@line 18530
  HEAP32[$AsyncCtx10 + 172 >> 2] = $28; //@line 18532
  HEAP8[$AsyncCtx10 + 176 >> 0] = $2; //@line 18534
  HEAP32[$AsyncCtx10 + 180 >> 2] = $19; //@line 18536
  HEAP32[$AsyncCtx10 + 184 >> 2] = $31; //@line 18538
  HEAP32[$AsyncCtx10 + 188 >> 2] = $41; //@line 18540
  HEAP32[$AsyncCtx10 + 192 >> 2] = $42; //@line 18542
  HEAP32[$AsyncCtx10 + 196 >> 2] = $8; //@line 18544
  HEAP32[$AsyncCtx10 + 200 >> 2] = $18; //@line 18546
  HEAP8[$AsyncCtx10 + 204 >> 0] = $380; //@line 18548
  HEAP32[$AsyncCtx10 + 208 >> 2] = $0; //@line 18550
  HEAP32[$AsyncCtx10 + 212 >> 2] = $8; //@line 18552
  HEAP32[$AsyncCtx10 + 216 >> 2] = $20; //@line 18554
  HEAP32[$AsyncCtx10 + 220 >> 2] = $30; //@line 18556
  HEAP32[$AsyncCtx10 + 224 >> 2] = $8; //@line 18558
  HEAP32[$AsyncCtx10 + 228 >> 2] = $8; //@line 18560
  HEAP32[$AsyncCtx10 + 232 >> 2] = $9; //@line 18562
  sp = STACKTOP; //@line 18563
  STACKTOP = sp; //@line 18564
  return 0; //@line 18564
 } else if ((label | 0) == 39) {
  HEAP32[$AsyncCtx14 >> 2] = 494; //@line 18567
  HEAP32[$AsyncCtx14 + 4 >> 2] = $7; //@line 18569
  HEAP32[$AsyncCtx14 + 8 >> 2] = $8; //@line 18571
  HEAP32[$AsyncCtx14 + 12 >> 2] = $44; //@line 18573
  HEAP32[$AsyncCtx14 + 16 >> 2] = $22; //@line 18575
  HEAP32[$AsyncCtx14 + 20 >> 2] = $12; //@line 18577
  HEAP32[$AsyncCtx14 + 24 >> 2] = $8; //@line 18579
  HEAP32[$AsyncCtx14 + 28 >> 2] = $34; //@line 18581
  HEAP32[$AsyncCtx14 + 32 >> 2] = $21; //@line 18583
  HEAP32[$AsyncCtx14 + 36 >> 2] = $11; //@line 18585
  HEAP32[$AsyncCtx14 + 40 >> 2] = $24; //@line 18587
  HEAP32[$AsyncCtx14 + 44 >> 2] = $7; //@line 18589
  HEAP32[$AsyncCtx14 + 48 >> 2] = $7; //@line 18591
  HEAP32[$AsyncCtx14 + 52 >> 2] = $32; //@line 18593
  HEAP8[$AsyncCtx14 + 56 >> 0] = $485; //@line 18595
  HEAP32[$AsyncCtx14 + 60 >> 2] = $10; //@line 18597
  HEAP32[$AsyncCtx14 + 64 >> 2] = $23; //@line 18599
  HEAP32[$AsyncCtx14 + 68 >> 2] = $33; //@line 18601
  HEAP32[$AsyncCtx14 + 72 >> 2] = $25; //@line 18603
  HEAP32[$AsyncCtx14 + 76 >> 2] = $36; //@line 18605
  HEAP32[$AsyncCtx14 + 80 >> 2] = $43; //@line 18607
  HEAP32[$AsyncCtx14 + 84 >> 2] = $7; //@line 18609
  HEAP32[$AsyncCtx14 + 88 >> 2] = $37; //@line 18611
  HEAP32[$AsyncCtx14 + 92 >> 2] = $6; //@line 18613
  HEAP32[$AsyncCtx14 + 96 >> 2] = $13; //@line 18615
  HEAP32[$AsyncCtx14 + 100 >> 2] = $481; //@line 18617
  HEAP32[$AsyncCtx14 + 104 >> 2] = $15; //@line 18619
  HEAP32[$AsyncCtx14 + 108 >> 2] = $45; //@line 18621
  HEAP32[$AsyncCtx14 + 112 >> 2] = $26; //@line 18623
  HEAP32[$AsyncCtx14 + 116 >> 2] = $35; //@line 18625
  HEAP32[$AsyncCtx14 + 120 >> 2] = $46; //@line 18627
  HEAP32[$AsyncCtx14 + 124 >> 2] = $17; //@line 18629
  HEAP32[$AsyncCtx14 + 128 >> 2] = $29; //@line 18631
  HEAP32[$AsyncCtx14 + 132 >> 2] = $7; //@line 18633
  HEAP32[$AsyncCtx14 + 136 >> 2] = $16; //@line 18635
  HEAP8[$AsyncCtx14 + 140 >> 0] = $483; //@line 18637
  HEAP32[$AsyncCtx14 + 144 >> 2] = $40; //@line 18639
  HEAP32[$AsyncCtx14 + 148 >> 2] = $27; //@line 18641
  HEAP32[$AsyncCtx14 + 152 >> 2] = $38; //@line 18643
  HEAP32[$AsyncCtx14 + 156 >> 2] = $8; //@line 18645
  HEAP32[$AsyncCtx14 + 160 >> 2] = $0; //@line 18647
  HEAP32[$AsyncCtx14 + 164 >> 2] = $7; //@line 18649
  HEAP32[$AsyncCtx14 + 168 >> 2] = $8; //@line 18651
  HEAP8[$AsyncCtx14 + 172 >> 0] = $39; //@line 18653
  HEAP32[$AsyncCtx14 + 176 >> 2] = $1; //@line 18655
  HEAP8[$AsyncCtx14 + 180 >> 0] = $3; //@line 18657
  HEAP32[$AsyncCtx14 + 184 >> 2] = $28; //@line 18659
  HEAP8[$AsyncCtx14 + 188 >> 0] = $2; //@line 18661
  HEAP32[$AsyncCtx14 + 192 >> 2] = $$0107131; //@line 18663
  HEAP32[$AsyncCtx14 + 196 >> 2] = $19; //@line 18665
  HEAP32[$AsyncCtx14 + 200 >> 2] = $31; //@line 18667
  HEAP32[$AsyncCtx14 + 204 >> 2] = $41; //@line 18669
  HEAP32[$AsyncCtx14 + 208 >> 2] = $42; //@line 18671
  HEAP32[$AsyncCtx14 + 212 >> 2] = $8; //@line 18673
  HEAP32[$AsyncCtx14 + 216 >> 2] = $18; //@line 18675
  HEAP8[$AsyncCtx14 + 220 >> 0] = $477; //@line 18677
  HEAP32[$AsyncCtx14 + 224 >> 2] = $0; //@line 18679
  HEAP32[$AsyncCtx14 + 228 >> 2] = $8; //@line 18681
  HEAP32[$AsyncCtx14 + 232 >> 2] = $20; //@line 18683
  HEAP32[$AsyncCtx14 + 236 >> 2] = $30; //@line 18685
  HEAP32[$AsyncCtx14 + 240 >> 2] = $8; //@line 18687
  HEAP32[$AsyncCtx14 + 244 >> 2] = $8; //@line 18689
  HEAP32[$AsyncCtx14 + 248 >> 2] = $9; //@line 18691
  sp = STACKTOP; //@line 18692
  STACKTOP = sp; //@line 18693
  return 0; //@line 18693
 } else if ((label | 0) == 44) {
  HEAP32[$AsyncCtx18 >> 2] = 495; //@line 18696
  HEAP32[$AsyncCtx18 + 4 >> 2] = $7; //@line 18698
  HEAP32[$AsyncCtx18 + 8 >> 2] = $8; //@line 18700
  HEAP32[$AsyncCtx18 + 12 >> 2] = $44; //@line 18702
  HEAP32[$AsyncCtx18 + 16 >> 2] = $22; //@line 18704
  HEAP32[$AsyncCtx18 + 20 >> 2] = $12; //@line 18706
  HEAP32[$AsyncCtx18 + 24 >> 2] = $8; //@line 18708
  HEAP32[$AsyncCtx18 + 28 >> 2] = $34; //@line 18710
  HEAP32[$AsyncCtx18 + 32 >> 2] = $21; //@line 18712
  HEAP32[$AsyncCtx18 + 36 >> 2] = $11; //@line 18714
  HEAP32[$AsyncCtx18 + 40 >> 2] = $24; //@line 18716
  HEAP32[$AsyncCtx18 + 44 >> 2] = $7; //@line 18718
  HEAP32[$AsyncCtx18 + 48 >> 2] = $7; //@line 18720
  HEAP32[$AsyncCtx18 + 52 >> 2] = $32; //@line 18722
  HEAP32[$AsyncCtx18 + 56 >> 2] = $10; //@line 18724
  HEAP32[$AsyncCtx18 + 60 >> 2] = $23; //@line 18726
  HEAP32[$AsyncCtx18 + 64 >> 2] = $33; //@line 18728
  HEAP32[$AsyncCtx18 + 68 >> 2] = $25; //@line 18730
  HEAP32[$AsyncCtx18 + 72 >> 2] = $36; //@line 18732
  HEAP32[$AsyncCtx18 + 76 >> 2] = $43; //@line 18734
  HEAP32[$AsyncCtx18 + 80 >> 2] = $7; //@line 18736
  HEAP32[$AsyncCtx18 + 84 >> 2] = $37; //@line 18738
  HEAP32[$AsyncCtx18 + 88 >> 2] = $6; //@line 18740
  HEAP32[$AsyncCtx18 + 92 >> 2] = $13; //@line 18742
  HEAP32[$AsyncCtx18 + 96 >> 2] = $15; //@line 18744
  HEAP32[$AsyncCtx18 + 100 >> 2] = $45; //@line 18746
  HEAP32[$AsyncCtx18 + 104 >> 2] = $26; //@line 18748
  HEAP32[$AsyncCtx18 + 108 >> 2] = $35; //@line 18750
  HEAP32[$AsyncCtx18 + 112 >> 2] = $46; //@line 18752
  HEAP32[$AsyncCtx18 + 116 >> 2] = $17; //@line 18754
  HEAP8[$AsyncCtx18 + 120 >> 0] = $580; //@line 18756
  HEAP32[$AsyncCtx18 + 124 >> 2] = $29; //@line 18758
  HEAP32[$AsyncCtx18 + 128 >> 2] = $7; //@line 18760
  HEAP32[$AsyncCtx18 + 132 >> 2] = $16; //@line 18762
  HEAP32[$AsyncCtx18 + 136 >> 2] = $40; //@line 18764
  HEAP32[$AsyncCtx18 + 140 >> 2] = $27; //@line 18766
  HEAP32[$AsyncCtx18 + 144 >> 2] = $38; //@line 18768
  HEAP32[$AsyncCtx18 + 148 >> 2] = $8; //@line 18770
  HEAP32[$AsyncCtx18 + 152 >> 2] = $0; //@line 18772
  HEAP32[$AsyncCtx18 + 156 >> 2] = $7; //@line 18774
  HEAP32[$AsyncCtx18 + 160 >> 2] = $8; //@line 18776
  HEAP8[$AsyncCtx18 + 164 >> 0] = $39; //@line 18778
  HEAP32[$AsyncCtx18 + 168 >> 2] = $1; //@line 18780
  HEAP8[$AsyncCtx18 + 172 >> 0] = $3; //@line 18782
  HEAP32[$AsyncCtx18 + 176 >> 2] = $28; //@line 18784
  HEAP8[$AsyncCtx18 + 180 >> 0] = $2; //@line 18786
  HEAP32[$AsyncCtx18 + 184 >> 2] = $19; //@line 18788
  HEAP32[$AsyncCtx18 + 188 >> 2] = $31; //@line 18790
  HEAP32[$AsyncCtx18 + 192 >> 2] = $41; //@line 18792
  HEAP32[$AsyncCtx18 + 196 >> 2] = $42; //@line 18794
  HEAP32[$AsyncCtx18 + 200 >> 2] = $8; //@line 18796
  HEAP32[$AsyncCtx18 + 204 >> 2] = $18; //@line 18798
  HEAP32[$AsyncCtx18 + 208 >> 2] = $0; //@line 18800
  HEAP32[$AsyncCtx18 + 212 >> 2] = $8; //@line 18802
  HEAP32[$AsyncCtx18 + 216 >> 2] = $20; //@line 18804
  HEAP32[$AsyncCtx18 + 220 >> 2] = $30; //@line 18806
  HEAP32[$AsyncCtx18 + 224 >> 2] = $8; //@line 18808
  HEAP32[$AsyncCtx18 + 228 >> 2] = $8; //@line 18810
  HEAP32[$AsyncCtx18 + 232 >> 2] = $9; //@line 18812
  sp = STACKTOP; //@line 18813
  STACKTOP = sp; //@line 18814
  return 0; //@line 18814
 } else if ((label | 0) == 47) {
  STACKTOP = sp; //@line 18817
  return $$0107$lcssa | 0; //@line 18817
 }
 return 0; //@line 18819
}
function _equeue_dispatch__async_cb_282($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$03956$i = 0, $$03956$i$phi = 0, $$04055$i = 0, $$0405571$i = 0, $$04063$i = 0, $$04159$i = 0, $$04258$i = 0, $$057$i = 0, $$067 = 0, $$06992 = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val13 = 0, $$expand_i1_val9 = 0, $$sink$in$i$i = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $127 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $16 = 0, $165 = 0, $166 = 0, $168 = 0, $171 = 0, $173 = 0, $176 = 0, $179 = 0, $18 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $190 = 0, $193 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $44 = 0, $45 = 0, $48 = 0, $54 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $69 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $93 = 0, $95 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0, $$04159$i$looptemp = 0, $$04258$i$looptemp = 0;
 sp = STACKTOP; //@line 8963
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8965
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8967
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8969
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8971
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8973
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8975
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8977
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8979
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8981
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8983
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 8985
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8987
 $26 = HEAP8[$0 + 52 >> 0] & 1; //@line 8990
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 8992
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 8994
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 8996
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 8998
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 9000
 _equeue_mutex_lock($4); //@line 9001
 HEAP8[$30 >> 0] = (HEAPU8[$30 >> 0] | 0) + 1; //@line 9006
 if (((HEAP32[$28 >> 2] | 0) - $36 | 0) < 1) {
  HEAP32[$28 >> 2] = $36; //@line 9011
 }
 $44 = HEAP32[$32 >> 2] | 0; //@line 9013
 HEAP32[$34 >> 2] = $44; //@line 9014
 $45 = $44; //@line 9015
 L6 : do {
  if (!$44) {
   $$04055$i = $12; //@line 9019
   $54 = $45; //@line 9019
   label = 8; //@line 9020
  } else {
   $$04063$i = $12; //@line 9022
   $48 = $45; //@line 9022
   do {
    if (((HEAP32[$48 + 20 >> 2] | 0) - $36 | 0) >= 1) {
     $$04055$i = $$04063$i; //@line 9029
     $54 = $48; //@line 9029
     label = 8; //@line 9030
     break L6;
    }
    $$04063$i = $48 + 8 | 0; //@line 9033
    $48 = HEAP32[$$04063$i >> 2] | 0; //@line 9034
   } while (($48 | 0) != 0);
   HEAP32[$2 >> 2] = 0; //@line 9042
   $$0405571$i = $$04063$i; //@line 9043
  }
 } while (0);
 if ((label | 0) == 8) {
  HEAP32[$2 >> 2] = $54; //@line 9047
  if (!$54) {
   $$0405571$i = $$04055$i; //@line 9050
  } else {
   HEAP32[$54 + 16 >> 2] = $2; //@line 9053
   $$0405571$i = $$04055$i; //@line 9054
  }
 }
 HEAP32[$$0405571$i >> 2] = 0; //@line 9057
 _equeue_mutex_unlock($4); //@line 9058
 $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74 = HEAP32[$12 >> 2] | 0; //@line 9059
 L15 : do {
  if (!$$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74) {} else {
   $$04159$i = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74; //@line 9064
   $$04258$i = $12; //@line 9064
   do {
    $$04258$i$looptemp = $$04258$i;
    $$04258$i = $$04159$i + 8 | 0; //@line 9066
    $$04159$i$looptemp = $$04159$i;
    $$04159$i = HEAP32[$$04258$i >> 2] | 0; //@line 9067
    $$03956$i = 0; //@line 9068
    $$057$i = $$04159$i$looptemp; //@line 9068
    while (1) {
     HEAP32[$$057$i + 8 >> 2] = $$03956$i; //@line 9071
     $63 = HEAP32[$$057$i + 12 >> 2] | 0; //@line 9073
     if (!$63) {
      break;
     } else {
      $$03956$i$phi = $$057$i; //@line 9078
      $$057$i = $63; //@line 9078
      $$03956$i = $$03956$i$phi; //@line 9078
     }
    }
    HEAP32[$$04258$i$looptemp >> 2] = $$057$i; //@line 9081
   } while (($$04159$i | 0) != 0);
   $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 = HEAP32[$12 >> 2] | 0; //@line 9089
   if ($$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 | 0) {
    $$06992 = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75; //@line 9092
    while (1) {
     $66 = $$06992 + 8 | 0; //@line 9094
     $67 = HEAP32[$66 >> 2] | 0; //@line 9095
     $69 = HEAP32[$$06992 + 32 >> 2] | 0; //@line 9097
     if ($69 | 0) {
      label = 17; //@line 9100
      break;
     }
     $93 = HEAP32[$$06992 + 24 >> 2] | 0; //@line 9104
     if (($93 | 0) > -1) {
      label = 21; //@line 9107
      break;
     }
     $117 = $$06992 + 4 | 0; //@line 9111
     $118 = HEAP8[$117 >> 0] | 0; //@line 9112
     HEAP8[$117 >> 0] = (($118 + 1 & 255) << HEAP32[$18 >> 2] | 0) == 0 ? 1 : ($118 & 255) + 1 & 255; //@line 9121
     $127 = HEAP32[$$06992 + 28 >> 2] | 0; //@line 9123
     if ($127 | 0) {
      label = 25; //@line 9126
      break;
     }
     _equeue_mutex_lock($22); //@line 9129
     $150 = HEAP32[$20 >> 2] | 0; //@line 9130
     L28 : do {
      if (!$150) {
       $$02329$i$i = $20; //@line 9134
       label = 34; //@line 9135
      } else {
       $152 = HEAP32[$$06992 >> 2] | 0; //@line 9137
       $$025$i$i = $20; //@line 9138
       $154 = $150; //@line 9138
       while (1) {
        $153 = HEAP32[$154 >> 2] | 0; //@line 9140
        if ($153 >>> 0 >= $152 >>> 0) {
         break;
        }
        $156 = $154 + 8 | 0; //@line 9145
        $157 = HEAP32[$156 >> 2] | 0; //@line 9146
        if (!$157) {
         $$02329$i$i = $156; //@line 9149
         label = 34; //@line 9150
         break L28;
        } else {
         $$025$i$i = $156; //@line 9153
         $154 = $157; //@line 9153
        }
       }
       if (($153 | 0) == ($152 | 0)) {
        HEAP32[$$06992 + 12 >> 2] = $154; //@line 9159
        $$02330$i$i = $$025$i$i; //@line 9162
        $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 9162
       } else {
        $$02329$i$i = $$025$i$i; //@line 9164
        label = 34; //@line 9165
       }
      }
     } while (0);
     if ((label | 0) == 34) {
      label = 0; //@line 9170
      HEAP32[$$06992 + 12 >> 2] = 0; //@line 9172
      $$02330$i$i = $$02329$i$i; //@line 9173
      $$sink$in$i$i = $$02329$i$i; //@line 9173
     }
     HEAP32[$66 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 9176
     HEAP32[$$02330$i$i >> 2] = $$06992; //@line 9177
     _equeue_mutex_unlock($22); //@line 9178
     if (!$67) {
      break L15;
     } else {
      $$06992 = $67; //@line 9183
     }
    }
    if ((label | 0) == 17) {
     $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 9188
     FUNCTION_TABLE_vi[$69 & 1023]($$06992 + 36 | 0); //@line 9189
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 9192
      $72 = $ReallocAsyncCtx + 4 | 0; //@line 9193
      HEAP32[$72 >> 2] = $2; //@line 9194
      $73 = $ReallocAsyncCtx + 8 | 0; //@line 9195
      HEAP32[$73 >> 2] = $4; //@line 9196
      $74 = $ReallocAsyncCtx + 12 | 0; //@line 9197
      HEAP32[$74 >> 2] = $6; //@line 9198
      $75 = $ReallocAsyncCtx + 16 | 0; //@line 9199
      HEAP32[$75 >> 2] = $8; //@line 9200
      $76 = $ReallocAsyncCtx + 20 | 0; //@line 9201
      HEAP32[$76 >> 2] = $12; //@line 9202
      $77 = $ReallocAsyncCtx + 24 | 0; //@line 9203
      HEAP32[$77 >> 2] = $14; //@line 9204
      $78 = $ReallocAsyncCtx + 28 | 0; //@line 9205
      HEAP32[$78 >> 2] = $67; //@line 9206
      $79 = $ReallocAsyncCtx + 32 | 0; //@line 9207
      HEAP32[$79 >> 2] = $$06992; //@line 9208
      $80 = $ReallocAsyncCtx + 36 | 0; //@line 9209
      HEAP32[$80 >> 2] = $16; //@line 9210
      $81 = $ReallocAsyncCtx + 40 | 0; //@line 9211
      HEAP32[$81 >> 2] = $18; //@line 9212
      $82 = $ReallocAsyncCtx + 44 | 0; //@line 9213
      HEAP32[$82 >> 2] = $20; //@line 9214
      $83 = $ReallocAsyncCtx + 48 | 0; //@line 9215
      HEAP32[$83 >> 2] = $22; //@line 9216
      $84 = $ReallocAsyncCtx + 52 | 0; //@line 9217
      HEAP32[$84 >> 2] = $66; //@line 9218
      $85 = $ReallocAsyncCtx + 56 | 0; //@line 9219
      HEAP32[$85 >> 2] = $24; //@line 9220
      $86 = $ReallocAsyncCtx + 60 | 0; //@line 9221
      $$expand_i1_val = $26 & 1; //@line 9222
      HEAP8[$86 >> 0] = $$expand_i1_val; //@line 9223
      $87 = $ReallocAsyncCtx + 64 | 0; //@line 9224
      HEAP32[$87 >> 2] = $28; //@line 9225
      $88 = $ReallocAsyncCtx + 68 | 0; //@line 9226
      HEAP32[$88 >> 2] = $30; //@line 9227
      $89 = $ReallocAsyncCtx + 72 | 0; //@line 9228
      HEAP32[$89 >> 2] = $10; //@line 9229
      $90 = $ReallocAsyncCtx + 76 | 0; //@line 9230
      HEAP32[$90 >> 2] = $32; //@line 9231
      $91 = $ReallocAsyncCtx + 80 | 0; //@line 9232
      HEAP32[$91 >> 2] = $34; //@line 9233
      sp = STACKTOP; //@line 9234
      return;
     }
     ___async_unwind = 0; //@line 9237
     HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 9238
     $72 = $ReallocAsyncCtx + 4 | 0; //@line 9239
     HEAP32[$72 >> 2] = $2; //@line 9240
     $73 = $ReallocAsyncCtx + 8 | 0; //@line 9241
     HEAP32[$73 >> 2] = $4; //@line 9242
     $74 = $ReallocAsyncCtx + 12 | 0; //@line 9243
     HEAP32[$74 >> 2] = $6; //@line 9244
     $75 = $ReallocAsyncCtx + 16 | 0; //@line 9245
     HEAP32[$75 >> 2] = $8; //@line 9246
     $76 = $ReallocAsyncCtx + 20 | 0; //@line 9247
     HEAP32[$76 >> 2] = $12; //@line 9248
     $77 = $ReallocAsyncCtx + 24 | 0; //@line 9249
     HEAP32[$77 >> 2] = $14; //@line 9250
     $78 = $ReallocAsyncCtx + 28 | 0; //@line 9251
     HEAP32[$78 >> 2] = $67; //@line 9252
     $79 = $ReallocAsyncCtx + 32 | 0; //@line 9253
     HEAP32[$79 >> 2] = $$06992; //@line 9254
     $80 = $ReallocAsyncCtx + 36 | 0; //@line 9255
     HEAP32[$80 >> 2] = $16; //@line 9256
     $81 = $ReallocAsyncCtx + 40 | 0; //@line 9257
     HEAP32[$81 >> 2] = $18; //@line 9258
     $82 = $ReallocAsyncCtx + 44 | 0; //@line 9259
     HEAP32[$82 >> 2] = $20; //@line 9260
     $83 = $ReallocAsyncCtx + 48 | 0; //@line 9261
     HEAP32[$83 >> 2] = $22; //@line 9262
     $84 = $ReallocAsyncCtx + 52 | 0; //@line 9263
     HEAP32[$84 >> 2] = $66; //@line 9264
     $85 = $ReallocAsyncCtx + 56 | 0; //@line 9265
     HEAP32[$85 >> 2] = $24; //@line 9266
     $86 = $ReallocAsyncCtx + 60 | 0; //@line 9267
     $$expand_i1_val = $26 & 1; //@line 9268
     HEAP8[$86 >> 0] = $$expand_i1_val; //@line 9269
     $87 = $ReallocAsyncCtx + 64 | 0; //@line 9270
     HEAP32[$87 >> 2] = $28; //@line 9271
     $88 = $ReallocAsyncCtx + 68 | 0; //@line 9272
     HEAP32[$88 >> 2] = $30; //@line 9273
     $89 = $ReallocAsyncCtx + 72 | 0; //@line 9274
     HEAP32[$89 >> 2] = $10; //@line 9275
     $90 = $ReallocAsyncCtx + 76 | 0; //@line 9276
     HEAP32[$90 >> 2] = $32; //@line 9277
     $91 = $ReallocAsyncCtx + 80 | 0; //@line 9278
     HEAP32[$91 >> 2] = $34; //@line 9279
     sp = STACKTOP; //@line 9280
     return;
    } else if ((label | 0) == 21) {
     $95 = $$06992 + 20 | 0; //@line 9284
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $93; //@line 9287
     $98 = _equeue_tick() | 0; //@line 9288
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 9289
     _equeue_enqueue($16, $$06992, $98) | 0; //@line 9290
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 9293
      $99 = $ReallocAsyncCtx4 + 4 | 0; //@line 9294
      HEAP32[$99 >> 2] = $2; //@line 9295
      $100 = $ReallocAsyncCtx4 + 8 | 0; //@line 9296
      HEAP32[$100 >> 2] = $4; //@line 9297
      $101 = $ReallocAsyncCtx4 + 12 | 0; //@line 9298
      HEAP32[$101 >> 2] = $6; //@line 9299
      $102 = $ReallocAsyncCtx4 + 16 | 0; //@line 9300
      HEAP32[$102 >> 2] = $8; //@line 9301
      $103 = $ReallocAsyncCtx4 + 20 | 0; //@line 9302
      HEAP32[$103 >> 2] = $10; //@line 9303
      $104 = $ReallocAsyncCtx4 + 24 | 0; //@line 9304
      HEAP32[$104 >> 2] = $12; //@line 9305
      $105 = $ReallocAsyncCtx4 + 28 | 0; //@line 9306
      HEAP32[$105 >> 2] = $14; //@line 9307
      $106 = $ReallocAsyncCtx4 + 32 | 0; //@line 9308
      HEAP32[$106 >> 2] = $67; //@line 9309
      $107 = $ReallocAsyncCtx4 + 36 | 0; //@line 9310
      HEAP32[$107 >> 2] = $16; //@line 9311
      $108 = $ReallocAsyncCtx4 + 40 | 0; //@line 9312
      HEAP32[$108 >> 2] = $18; //@line 9313
      $109 = $ReallocAsyncCtx4 + 44 | 0; //@line 9314
      HEAP32[$109 >> 2] = $20; //@line 9315
      $110 = $ReallocAsyncCtx4 + 48 | 0; //@line 9316
      HEAP32[$110 >> 2] = $22; //@line 9317
      $111 = $ReallocAsyncCtx4 + 52 | 0; //@line 9318
      HEAP32[$111 >> 2] = $24; //@line 9319
      $112 = $ReallocAsyncCtx4 + 56 | 0; //@line 9320
      $$expand_i1_val9 = $26 & 1; //@line 9321
      HEAP8[$112 >> 0] = $$expand_i1_val9; //@line 9322
      $113 = $ReallocAsyncCtx4 + 60 | 0; //@line 9323
      HEAP32[$113 >> 2] = $28; //@line 9324
      $114 = $ReallocAsyncCtx4 + 64 | 0; //@line 9325
      HEAP32[$114 >> 2] = $30; //@line 9326
      $115 = $ReallocAsyncCtx4 + 68 | 0; //@line 9327
      HEAP32[$115 >> 2] = $32; //@line 9328
      $116 = $ReallocAsyncCtx4 + 72 | 0; //@line 9329
      HEAP32[$116 >> 2] = $34; //@line 9330
      sp = STACKTOP; //@line 9331
      return;
     }
     ___async_unwind = 0; //@line 9334
     HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 9335
     $99 = $ReallocAsyncCtx4 + 4 | 0; //@line 9336
     HEAP32[$99 >> 2] = $2; //@line 9337
     $100 = $ReallocAsyncCtx4 + 8 | 0; //@line 9338
     HEAP32[$100 >> 2] = $4; //@line 9339
     $101 = $ReallocAsyncCtx4 + 12 | 0; //@line 9340
     HEAP32[$101 >> 2] = $6; //@line 9341
     $102 = $ReallocAsyncCtx4 + 16 | 0; //@line 9342
     HEAP32[$102 >> 2] = $8; //@line 9343
     $103 = $ReallocAsyncCtx4 + 20 | 0; //@line 9344
     HEAP32[$103 >> 2] = $10; //@line 9345
     $104 = $ReallocAsyncCtx4 + 24 | 0; //@line 9346
     HEAP32[$104 >> 2] = $12; //@line 9347
     $105 = $ReallocAsyncCtx4 + 28 | 0; //@line 9348
     HEAP32[$105 >> 2] = $14; //@line 9349
     $106 = $ReallocAsyncCtx4 + 32 | 0; //@line 9350
     HEAP32[$106 >> 2] = $67; //@line 9351
     $107 = $ReallocAsyncCtx4 + 36 | 0; //@line 9352
     HEAP32[$107 >> 2] = $16; //@line 9353
     $108 = $ReallocAsyncCtx4 + 40 | 0; //@line 9354
     HEAP32[$108 >> 2] = $18; //@line 9355
     $109 = $ReallocAsyncCtx4 + 44 | 0; //@line 9356
     HEAP32[$109 >> 2] = $20; //@line 9357
     $110 = $ReallocAsyncCtx4 + 48 | 0; //@line 9358
     HEAP32[$110 >> 2] = $22; //@line 9359
     $111 = $ReallocAsyncCtx4 + 52 | 0; //@line 9360
     HEAP32[$111 >> 2] = $24; //@line 9361
     $112 = $ReallocAsyncCtx4 + 56 | 0; //@line 9362
     $$expand_i1_val9 = $26 & 1; //@line 9363
     HEAP8[$112 >> 0] = $$expand_i1_val9; //@line 9364
     $113 = $ReallocAsyncCtx4 + 60 | 0; //@line 9365
     HEAP32[$113 >> 2] = $28; //@line 9366
     $114 = $ReallocAsyncCtx4 + 64 | 0; //@line 9367
     HEAP32[$114 >> 2] = $30; //@line 9368
     $115 = $ReallocAsyncCtx4 + 68 | 0; //@line 9369
     HEAP32[$115 >> 2] = $32; //@line 9370
     $116 = $ReallocAsyncCtx4 + 72 | 0; //@line 9371
     HEAP32[$116 >> 2] = $34; //@line 9372
     sp = STACKTOP; //@line 9373
     return;
    } else if ((label | 0) == 25) {
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 9378
     FUNCTION_TABLE_vi[$127 & 1023]($$06992 + 36 | 0); //@line 9379
     if (___async) {
      HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 9382
      $130 = $ReallocAsyncCtx2 + 4 | 0; //@line 9383
      HEAP32[$130 >> 2] = $2; //@line 9384
      $131 = $ReallocAsyncCtx2 + 8 | 0; //@line 9385
      HEAP32[$131 >> 2] = $4; //@line 9386
      $132 = $ReallocAsyncCtx2 + 12 | 0; //@line 9387
      HEAP32[$132 >> 2] = $6; //@line 9388
      $133 = $ReallocAsyncCtx2 + 16 | 0; //@line 9389
      HEAP32[$133 >> 2] = $8; //@line 9390
      $134 = $ReallocAsyncCtx2 + 20 | 0; //@line 9391
      HEAP32[$134 >> 2] = $12; //@line 9392
      $135 = $ReallocAsyncCtx2 + 24 | 0; //@line 9393
      HEAP32[$135 >> 2] = $14; //@line 9394
      $136 = $ReallocAsyncCtx2 + 28 | 0; //@line 9395
      HEAP32[$136 >> 2] = $67; //@line 9396
      $137 = $ReallocAsyncCtx2 + 32 | 0; //@line 9397
      HEAP32[$137 >> 2] = $16; //@line 9398
      $138 = $ReallocAsyncCtx2 + 36 | 0; //@line 9399
      HEAP32[$138 >> 2] = $18; //@line 9400
      $139 = $ReallocAsyncCtx2 + 40 | 0; //@line 9401
      HEAP32[$139 >> 2] = $20; //@line 9402
      $140 = $ReallocAsyncCtx2 + 44 | 0; //@line 9403
      HEAP32[$140 >> 2] = $22; //@line 9404
      $141 = $ReallocAsyncCtx2 + 48 | 0; //@line 9405
      HEAP32[$141 >> 2] = $24; //@line 9406
      $142 = $ReallocAsyncCtx2 + 52 | 0; //@line 9407
      $$expand_i1_val11 = $26 & 1; //@line 9408
      HEAP8[$142 >> 0] = $$expand_i1_val11; //@line 9409
      $143 = $ReallocAsyncCtx2 + 56 | 0; //@line 9410
      HEAP32[$143 >> 2] = $28; //@line 9411
      $144 = $ReallocAsyncCtx2 + 60 | 0; //@line 9412
      HEAP32[$144 >> 2] = $30; //@line 9413
      $145 = $ReallocAsyncCtx2 + 64 | 0; //@line 9414
      HEAP32[$145 >> 2] = $10; //@line 9415
      $146 = $ReallocAsyncCtx2 + 68 | 0; //@line 9416
      HEAP32[$146 >> 2] = $32; //@line 9417
      $147 = $ReallocAsyncCtx2 + 72 | 0; //@line 9418
      HEAP32[$147 >> 2] = $34; //@line 9419
      $148 = $ReallocAsyncCtx2 + 76 | 0; //@line 9420
      HEAP32[$148 >> 2] = $$06992; //@line 9421
      $149 = $ReallocAsyncCtx2 + 80 | 0; //@line 9422
      HEAP32[$149 >> 2] = $66; //@line 9423
      sp = STACKTOP; //@line 9424
      return;
     }
     ___async_unwind = 0; //@line 9427
     HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 9428
     $130 = $ReallocAsyncCtx2 + 4 | 0; //@line 9429
     HEAP32[$130 >> 2] = $2; //@line 9430
     $131 = $ReallocAsyncCtx2 + 8 | 0; //@line 9431
     HEAP32[$131 >> 2] = $4; //@line 9432
     $132 = $ReallocAsyncCtx2 + 12 | 0; //@line 9433
     HEAP32[$132 >> 2] = $6; //@line 9434
     $133 = $ReallocAsyncCtx2 + 16 | 0; //@line 9435
     HEAP32[$133 >> 2] = $8; //@line 9436
     $134 = $ReallocAsyncCtx2 + 20 | 0; //@line 9437
     HEAP32[$134 >> 2] = $12; //@line 9438
     $135 = $ReallocAsyncCtx2 + 24 | 0; //@line 9439
     HEAP32[$135 >> 2] = $14; //@line 9440
     $136 = $ReallocAsyncCtx2 + 28 | 0; //@line 9441
     HEAP32[$136 >> 2] = $67; //@line 9442
     $137 = $ReallocAsyncCtx2 + 32 | 0; //@line 9443
     HEAP32[$137 >> 2] = $16; //@line 9444
     $138 = $ReallocAsyncCtx2 + 36 | 0; //@line 9445
     HEAP32[$138 >> 2] = $18; //@line 9446
     $139 = $ReallocAsyncCtx2 + 40 | 0; //@line 9447
     HEAP32[$139 >> 2] = $20; //@line 9448
     $140 = $ReallocAsyncCtx2 + 44 | 0; //@line 9449
     HEAP32[$140 >> 2] = $22; //@line 9450
     $141 = $ReallocAsyncCtx2 + 48 | 0; //@line 9451
     HEAP32[$141 >> 2] = $24; //@line 9452
     $142 = $ReallocAsyncCtx2 + 52 | 0; //@line 9453
     $$expand_i1_val11 = $26 & 1; //@line 9454
     HEAP8[$142 >> 0] = $$expand_i1_val11; //@line 9455
     $143 = $ReallocAsyncCtx2 + 56 | 0; //@line 9456
     HEAP32[$143 >> 2] = $28; //@line 9457
     $144 = $ReallocAsyncCtx2 + 60 | 0; //@line 9458
     HEAP32[$144 >> 2] = $30; //@line 9459
     $145 = $ReallocAsyncCtx2 + 64 | 0; //@line 9460
     HEAP32[$145 >> 2] = $10; //@line 9461
     $146 = $ReallocAsyncCtx2 + 68 | 0; //@line 9462
     HEAP32[$146 >> 2] = $32; //@line 9463
     $147 = $ReallocAsyncCtx2 + 72 | 0; //@line 9464
     HEAP32[$147 >> 2] = $34; //@line 9465
     $148 = $ReallocAsyncCtx2 + 76 | 0; //@line 9466
     HEAP32[$148 >> 2] = $$06992; //@line 9467
     $149 = $ReallocAsyncCtx2 + 80 | 0; //@line 9468
     HEAP32[$149 >> 2] = $66; //@line 9469
     sp = STACKTOP; //@line 9470
     return;
    }
   }
  }
 } while (0);
 $165 = _equeue_tick() | 0; //@line 9476
 if ($26) {
  $166 = $24 - $165 | 0; //@line 9478
  if (($166 | 0) < 1) {
   $168 = $16 + 40 | 0; //@line 9481
   if (HEAP32[$168 >> 2] | 0) {
    _equeue_mutex_lock($4); //@line 9485
    $171 = HEAP32[$168 >> 2] | 0; //@line 9486
    if ($171 | 0) {
     $173 = HEAP32[$2 >> 2] | 0; //@line 9489
     if ($173 | 0) {
      $176 = HEAP32[$16 + 44 >> 2] | 0; //@line 9493
      $179 = (HEAP32[$173 + 20 >> 2] | 0) - $165 | 0; //@line 9496
      $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 9500
      FUNCTION_TABLE_vii[$171 & 15]($176, $179 & ~($179 >> 31)); //@line 9501
      if (___async) {
       HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 9504
       $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 9505
       HEAP32[$183 >> 2] = $10; //@line 9506
       $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 9507
       HEAP32[$184 >> 2] = $4; //@line 9508
       $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 9509
       HEAP32[$185 >> 2] = $8; //@line 9510
       sp = STACKTOP; //@line 9511
       return;
      }
      ___async_unwind = 0; //@line 9514
      HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 9515
      $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 9516
      HEAP32[$183 >> 2] = $10; //@line 9517
      $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 9518
      HEAP32[$184 >> 2] = $4; //@line 9519
      $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 9520
      HEAP32[$185 >> 2] = $8; //@line 9521
      sp = STACKTOP; //@line 9522
      return;
     }
    }
    HEAP8[$10 >> 0] = 1; //@line 9526
    _equeue_mutex_unlock($4); //@line 9527
   }
   HEAP8[$8 >> 0] = 0; //@line 9529
   return;
  } else {
   $$067 = $166; //@line 9532
  }
 } else {
  $$067 = -1; //@line 9535
 }
 _equeue_mutex_lock($4); //@line 9537
 $186 = HEAP32[$2 >> 2] | 0; //@line 9538
 if (!$186) {
  $$2 = $$067; //@line 9541
 } else {
  $190 = (HEAP32[$186 + 20 >> 2] | 0) - $165 | 0; //@line 9545
  $193 = $190 & ~($190 >> 31); //@line 9548
  $$2 = $193 >>> 0 < $$067 >>> 0 ? $193 : $$067; //@line 9551
 }
 _equeue_mutex_unlock($4); //@line 9553
 _equeue_sema_wait($6, $$2) | 0; //@line 9554
 do {
  if (HEAP8[$8 >> 0] | 0) {
   _equeue_mutex_lock($4); //@line 9559
   if (!(HEAP8[$8 >> 0] | 0)) {
    _equeue_mutex_unlock($4); //@line 9563
    break;
   }
   HEAP8[$8 >> 0] = 0; //@line 9566
   _equeue_mutex_unlock($4); //@line 9567
   return;
  }
 } while (0);
 $199 = _equeue_tick() | 0; //@line 9571
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 9572
 _wait_ms(20); //@line 9573
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 9576
  $200 = $ReallocAsyncCtx5 + 4 | 0; //@line 9577
  HEAP32[$200 >> 2] = $2; //@line 9578
  $201 = $ReallocAsyncCtx5 + 8 | 0; //@line 9579
  HEAP32[$201 >> 2] = $4; //@line 9580
  $202 = $ReallocAsyncCtx5 + 12 | 0; //@line 9581
  HEAP32[$202 >> 2] = $6; //@line 9582
  $203 = $ReallocAsyncCtx5 + 16 | 0; //@line 9583
  HEAP32[$203 >> 2] = $8; //@line 9584
  $204 = $ReallocAsyncCtx5 + 20 | 0; //@line 9585
  HEAP32[$204 >> 2] = $10; //@line 9586
  $205 = $ReallocAsyncCtx5 + 24 | 0; //@line 9587
  HEAP32[$205 >> 2] = $12; //@line 9588
  $206 = $ReallocAsyncCtx5 + 28 | 0; //@line 9589
  HEAP32[$206 >> 2] = $14; //@line 9590
  $207 = $ReallocAsyncCtx5 + 32 | 0; //@line 9591
  HEAP32[$207 >> 2] = $16; //@line 9592
  $208 = $ReallocAsyncCtx5 + 36 | 0; //@line 9593
  HEAP32[$208 >> 2] = $18; //@line 9594
  $209 = $ReallocAsyncCtx5 + 40 | 0; //@line 9595
  HEAP32[$209 >> 2] = $20; //@line 9596
  $210 = $ReallocAsyncCtx5 + 44 | 0; //@line 9597
  HEAP32[$210 >> 2] = $22; //@line 9598
  $211 = $ReallocAsyncCtx5 + 48 | 0; //@line 9599
  HEAP32[$211 >> 2] = $24; //@line 9600
  $212 = $ReallocAsyncCtx5 + 52 | 0; //@line 9601
  $$expand_i1_val13 = $26 & 1; //@line 9602
  HEAP8[$212 >> 0] = $$expand_i1_val13; //@line 9603
  $213 = $ReallocAsyncCtx5 + 56 | 0; //@line 9604
  HEAP32[$213 >> 2] = $28; //@line 9605
  $214 = $ReallocAsyncCtx5 + 60 | 0; //@line 9606
  HEAP32[$214 >> 2] = $30; //@line 9607
  $215 = $ReallocAsyncCtx5 + 64 | 0; //@line 9608
  HEAP32[$215 >> 2] = $32; //@line 9609
  $216 = $ReallocAsyncCtx5 + 68 | 0; //@line 9610
  HEAP32[$216 >> 2] = $34; //@line 9611
  $217 = $ReallocAsyncCtx5 + 72 | 0; //@line 9612
  HEAP32[$217 >> 2] = $199; //@line 9613
  sp = STACKTOP; //@line 9614
  return;
 }
 ___async_unwind = 0; //@line 9617
 HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 9618
 $200 = $ReallocAsyncCtx5 + 4 | 0; //@line 9619
 HEAP32[$200 >> 2] = $2; //@line 9620
 $201 = $ReallocAsyncCtx5 + 8 | 0; //@line 9621
 HEAP32[$201 >> 2] = $4; //@line 9622
 $202 = $ReallocAsyncCtx5 + 12 | 0; //@line 9623
 HEAP32[$202 >> 2] = $6; //@line 9624
 $203 = $ReallocAsyncCtx5 + 16 | 0; //@line 9625
 HEAP32[$203 >> 2] = $8; //@line 9626
 $204 = $ReallocAsyncCtx5 + 20 | 0; //@line 9627
 HEAP32[$204 >> 2] = $10; //@line 9628
 $205 = $ReallocAsyncCtx5 + 24 | 0; //@line 9629
 HEAP32[$205 >> 2] = $12; //@line 9630
 $206 = $ReallocAsyncCtx5 + 28 | 0; //@line 9631
 HEAP32[$206 >> 2] = $14; //@line 9632
 $207 = $ReallocAsyncCtx5 + 32 | 0; //@line 9633
 HEAP32[$207 >> 2] = $16; //@line 9634
 $208 = $ReallocAsyncCtx5 + 36 | 0; //@line 9635
 HEAP32[$208 >> 2] = $18; //@line 9636
 $209 = $ReallocAsyncCtx5 + 40 | 0; //@line 9637
 HEAP32[$209 >> 2] = $20; //@line 9638
 $210 = $ReallocAsyncCtx5 + 44 | 0; //@line 9639
 HEAP32[$210 >> 2] = $22; //@line 9640
 $211 = $ReallocAsyncCtx5 + 48 | 0; //@line 9641
 HEAP32[$211 >> 2] = $24; //@line 9642
 $212 = $ReallocAsyncCtx5 + 52 | 0; //@line 9643
 $$expand_i1_val13 = $26 & 1; //@line 9644
 HEAP8[$212 >> 0] = $$expand_i1_val13; //@line 9645
 $213 = $ReallocAsyncCtx5 + 56 | 0; //@line 9646
 HEAP32[$213 >> 2] = $28; //@line 9647
 $214 = $ReallocAsyncCtx5 + 60 | 0; //@line 9648
 HEAP32[$214 >> 2] = $30; //@line 9649
 $215 = $ReallocAsyncCtx5 + 64 | 0; //@line 9650
 HEAP32[$215 >> 2] = $32; //@line 9651
 $216 = $ReallocAsyncCtx5 + 68 | 0; //@line 9652
 HEAP32[$216 >> 2] = $34; //@line 9653
 $217 = $ReallocAsyncCtx5 + 72 | 0; //@line 9654
 HEAP32[$217 >> 2] = $199; //@line 9655
 sp = STACKTOP; //@line 9656
 return;
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14087
 STACKTOP = STACKTOP + 560 | 0; //@line 14088
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 14088
 $6 = sp + 8 | 0; //@line 14089
 $7 = sp; //@line 14090
 $8 = sp + 524 | 0; //@line 14091
 $9 = $8; //@line 14092
 $10 = sp + 512 | 0; //@line 14093
 HEAP32[$7 >> 2] = 0; //@line 14094
 $11 = $10 + 12 | 0; //@line 14095
 ___DOUBLE_BITS_677($1) | 0; //@line 14096
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 14101
  $$0520 = 1; //@line 14101
  $$0521 = 16481; //@line 14101
 } else {
  $$0471 = $1; //@line 14112
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 14112
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 16482 : 16487 : 16484; //@line 14112
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 14114
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 14123
   $31 = $$0520 + 3 | 0; //@line 14128
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 14130
   _out_670($0, $$0521, $$0520); //@line 14131
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 16508 : 16512 : $27 ? 16500 : 16504, 3); //@line 14132
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 14134
   $$sink560 = $31; //@line 14135
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 14138
   $36 = $35 != 0.0; //@line 14139
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 14143
   }
   $39 = $5 | 32; //@line 14145
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 14148
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 14151
    $44 = $$0520 | 2; //@line 14152
    $46 = 12 - $3 | 0; //@line 14154
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 14159
     } else {
      $$0509585 = 8.0; //@line 14161
      $$1508586 = $46; //@line 14161
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 14163
       $$0509585 = $$0509585 * 16.0; //@line 14164
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 14179
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 14184
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 14189
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 14192
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 14195
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 14198
     HEAP8[$68 >> 0] = 48; //@line 14199
     $$0511 = $68; //@line 14200
    } else {
     $$0511 = $66; //@line 14202
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 14209
    $76 = $$0511 + -2 | 0; //@line 14212
    HEAP8[$76 >> 0] = $5 + 15; //@line 14213
    $77 = ($3 | 0) < 1; //@line 14214
    $79 = ($4 & 8 | 0) == 0; //@line 14216
    $$0523 = $8; //@line 14217
    $$2473 = $$1472; //@line 14217
    while (1) {
     $80 = ~~$$2473; //@line 14219
     $86 = $$0523 + 1 | 0; //@line 14225
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[16516 + $80 >> 0]; //@line 14226
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 14229
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 14238
      } else {
       HEAP8[$86 >> 0] = 46; //@line 14241
       $$1524 = $$0523 + 2 | 0; //@line 14242
      }
     } else {
      $$1524 = $86; //@line 14245
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 14249
     }
    }
    $$pre693 = $$1524; //@line 14255
    if (!$3) {
     label = 24; //@line 14257
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 14265
      $$sink = $3 + 2 | 0; //@line 14265
     } else {
      label = 24; //@line 14267
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 14271
     $$pre$phi691Z2D = $101; //@line 14272
     $$sink = $101; //@line 14272
    }
    $104 = $11 - $76 | 0; //@line 14276
    $106 = $104 + $44 + $$sink | 0; //@line 14278
    _pad_676($0, 32, $2, $106, $4); //@line 14279
    _out_670($0, $$0521$, $44); //@line 14280
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 14282
    _out_670($0, $8, $$pre$phi691Z2D); //@line 14283
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 14285
    _out_670($0, $76, $104); //@line 14286
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 14288
    $$sink560 = $106; //@line 14289
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 14293
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 14297
    HEAP32[$7 >> 2] = $113; //@line 14298
    $$3 = $35 * 268435456.0; //@line 14299
    $$pr = $113; //@line 14299
   } else {
    $$3 = $35; //@line 14302
    $$pr = HEAP32[$7 >> 2] | 0; //@line 14302
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 14306
   $$0498 = $$561; //@line 14307
   $$4 = $$3; //@line 14307
   do {
    $116 = ~~$$4 >>> 0; //@line 14309
    HEAP32[$$0498 >> 2] = $116; //@line 14310
    $$0498 = $$0498 + 4 | 0; //@line 14311
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 14314
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 14324
    $$1499662 = $$0498; //@line 14324
    $124 = $$pr; //@line 14324
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 14327
     $$0488655 = $$1499662 + -4 | 0; //@line 14328
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 14331
     } else {
      $$0488657 = $$0488655; //@line 14333
      $$0497656 = 0; //@line 14333
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 14336
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 14338
       $131 = tempRet0; //@line 14339
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 14340
       HEAP32[$$0488657 >> 2] = $132; //@line 14342
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 14343
       $$0488657 = $$0488657 + -4 | 0; //@line 14345
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 14355
      } else {
       $138 = $$1482663 + -4 | 0; //@line 14357
       HEAP32[$138 >> 2] = $$0497656; //@line 14358
       $$2483$ph = $138; //@line 14359
      }
     }
     $$2500 = $$1499662; //@line 14362
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 14368
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 14372
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 14378
     HEAP32[$7 >> 2] = $144; //@line 14379
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 14382
      $$1499662 = $$2500; //@line 14382
      $124 = $144; //@line 14382
     } else {
      $$1482$lcssa = $$2483$ph; //@line 14384
      $$1499$lcssa = $$2500; //@line 14384
      $$pr566 = $144; //@line 14384
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 14389
    $$1499$lcssa = $$0498; //@line 14389
    $$pr566 = $$pr; //@line 14389
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 14395
    $150 = ($39 | 0) == 102; //@line 14396
    $$3484650 = $$1482$lcssa; //@line 14397
    $$3501649 = $$1499$lcssa; //@line 14397
    $152 = $$pr566; //@line 14397
    while (1) {
     $151 = 0 - $152 | 0; //@line 14399
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 14401
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 14405
      $161 = 1e9 >>> $154; //@line 14406
      $$0487644 = 0; //@line 14407
      $$1489643 = $$3484650; //@line 14407
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 14409
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 14413
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 14414
       $$1489643 = $$1489643 + 4 | 0; //@line 14415
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 14426
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 14429
       $$4502 = $$3501649; //@line 14429
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 14432
       $$$3484700 = $$$3484; //@line 14433
       $$4502 = $$3501649 + 4 | 0; //@line 14433
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 14440
      $$4502 = $$3501649; //@line 14440
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 14442
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 14449
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 14451
     HEAP32[$7 >> 2] = $152; //@line 14452
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 14457
      $$3501$lcssa = $$$4502; //@line 14457
      break;
     } else {
      $$3484650 = $$$3484700; //@line 14455
      $$3501649 = $$$4502; //@line 14455
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 14462
    $$3501$lcssa = $$1499$lcssa; //@line 14462
   }
   $185 = $$561; //@line 14465
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 14470
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 14471
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 14474
    } else {
     $$0514639 = $189; //@line 14476
     $$0530638 = 10; //@line 14476
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 14478
      $193 = $$0514639 + 1 | 0; //@line 14479
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 14482
       break;
      } else {
       $$0514639 = $193; //@line 14485
      }
     }
    }
   } else {
    $$1515 = 0; //@line 14490
   }
   $198 = ($39 | 0) == 103; //@line 14495
   $199 = ($$540 | 0) != 0; //@line 14496
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 14499
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 14508
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 14511
    $213 = ($209 | 0) % 9 | 0; //@line 14512
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 14515
     $$1531632 = 10; //@line 14515
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 14518
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 14521
       $$1531632 = $215; //@line 14521
      } else {
       $$1531$lcssa = $215; //@line 14523
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 14528
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 14530
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 14531
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 14534
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 14537
     $$4518 = $$1515; //@line 14537
     $$8 = $$3484$lcssa; //@line 14537
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 14542
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 14543
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 14548
     if (!$$0520) {
      $$1467 = $$$564; //@line 14551
      $$1469 = $$543; //@line 14551
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 14554
      $$1467 = $230 ? -$$$564 : $$$564; //@line 14559
      $$1469 = $230 ? -$$543 : $$543; //@line 14559
     }
     $233 = $217 - $218 | 0; //@line 14561
     HEAP32[$212 >> 2] = $233; //@line 14562
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 14566
      HEAP32[$212 >> 2] = $236; //@line 14567
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 14570
       $$sink547625 = $212; //@line 14570
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 14572
        HEAP32[$$sink547625 >> 2] = 0; //@line 14573
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 14576
         HEAP32[$240 >> 2] = 0; //@line 14577
         $$6 = $240; //@line 14578
        } else {
         $$6 = $$5486626; //@line 14580
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 14583
        HEAP32[$238 >> 2] = $242; //@line 14584
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 14587
         $$sink547625 = $238; //@line 14587
        } else {
         $$5486$lcssa = $$6; //@line 14589
         $$sink547$lcssa = $238; //@line 14589
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 14594
       $$sink547$lcssa = $212; //@line 14594
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 14599
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 14600
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 14603
       $$4518 = $247; //@line 14603
       $$8 = $$5486$lcssa; //@line 14603
      } else {
       $$2516621 = $247; //@line 14605
       $$2532620 = 10; //@line 14605
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 14607
        $251 = $$2516621 + 1 | 0; //@line 14608
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 14611
         $$4518 = $251; //@line 14611
         $$8 = $$5486$lcssa; //@line 14611
         break;
        } else {
         $$2516621 = $251; //@line 14614
        }
       }
      }
     } else {
      $$4492 = $212; //@line 14619
      $$4518 = $$1515; //@line 14619
      $$8 = $$3484$lcssa; //@line 14619
     }
    }
    $253 = $$4492 + 4 | 0; //@line 14622
    $$5519$ph = $$4518; //@line 14625
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 14625
    $$9$ph = $$8; //@line 14625
   } else {
    $$5519$ph = $$1515; //@line 14627
    $$7505$ph = $$3501$lcssa; //@line 14627
    $$9$ph = $$3484$lcssa; //@line 14627
   }
   $$7505 = $$7505$ph; //@line 14629
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 14633
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 14636
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 14640
    } else {
     $$lcssa675 = 1; //@line 14642
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 14646
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 14651
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 14659
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 14659
     } else {
      $$0479 = $5 + -2 | 0; //@line 14663
      $$2476 = $$540$ + -1 | 0; //@line 14663
     }
     $267 = $4 & 8; //@line 14665
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 14670
       if (!$270) {
        $$2529 = 9; //@line 14673
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 14678
         $$3533616 = 10; //@line 14678
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 14680
          $275 = $$1528617 + 1 | 0; //@line 14681
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 14687
           break;
          } else {
           $$1528617 = $275; //@line 14685
          }
         }
        } else {
         $$2529 = 0; //@line 14692
        }
       }
      } else {
       $$2529 = 9; //@line 14696
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 14704
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 14706
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 14708
       $$1480 = $$0479; //@line 14711
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 14711
       $$pre$phi698Z2D = 0; //@line 14711
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 14715
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 14717
       $$1480 = $$0479; //@line 14720
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 14720
       $$pre$phi698Z2D = 0; //@line 14720
       break;
      }
     } else {
      $$1480 = $$0479; //@line 14724
      $$3477 = $$2476; //@line 14724
      $$pre$phi698Z2D = $267; //@line 14724
     }
    } else {
     $$1480 = $5; //@line 14728
     $$3477 = $$540; //@line 14728
     $$pre$phi698Z2D = $4 & 8; //@line 14728
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 14731
   $294 = ($292 | 0) != 0 & 1; //@line 14733
   $296 = ($$1480 | 32 | 0) == 102; //@line 14735
   if ($296) {
    $$2513 = 0; //@line 14739
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 14739
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 14742
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 14745
    $304 = $11; //@line 14746
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 14751
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 14753
      HEAP8[$308 >> 0] = 48; //@line 14754
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 14759
      } else {
       $$1512$lcssa = $308; //@line 14761
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 14766
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 14773
    $318 = $$1512$lcssa + -2 | 0; //@line 14775
    HEAP8[$318 >> 0] = $$1480; //@line 14776
    $$2513 = $318; //@line 14779
    $$pn = $304 - $318 | 0; //@line 14779
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 14784
   _pad_676($0, 32, $2, $323, $4); //@line 14785
   _out_670($0, $$0521, $$0520); //@line 14786
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 14788
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 14791
    $326 = $8 + 9 | 0; //@line 14792
    $327 = $326; //@line 14793
    $328 = $8 + 8 | 0; //@line 14794
    $$5493600 = $$0496$$9; //@line 14795
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 14798
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 14803
       $$1465 = $328; //@line 14804
      } else {
       $$1465 = $330; //@line 14806
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 14813
       $$0464597 = $330; //@line 14814
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 14816
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 14819
        } else {
         $$1465 = $335; //@line 14821
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 14826
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 14831
     $$5493600 = $$5493600 + 4 | 0; //@line 14832
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 16532, 1); //@line 14842
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 14848
     $$6494592 = $$5493600; //@line 14848
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 14851
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 14856
       $$0463587 = $347; //@line 14857
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 14859
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 14862
        } else {
         $$0463$lcssa = $351; //@line 14864
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 14869
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 14873
      $$6494592 = $$6494592 + 4 | 0; //@line 14874
      $356 = $$4478593 + -9 | 0; //@line 14875
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 14882
       break;
      } else {
       $$4478593 = $356; //@line 14880
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 14887
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 14890
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 14893
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 14896
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 14897
     $365 = $363; //@line 14898
     $366 = 0 - $9 | 0; //@line 14899
     $367 = $8 + 8 | 0; //@line 14900
     $$5605 = $$3477; //@line 14901
     $$7495604 = $$9$ph; //@line 14901
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 14904
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 14907
       $$0 = $367; //@line 14908
      } else {
       $$0 = $369; //@line 14910
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 14915
        _out_670($0, $$0, 1); //@line 14916
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 14920
         break;
        }
        _out_670($0, 16532, 1); //@line 14923
        $$2 = $375; //@line 14924
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 14928
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 14933
        $$1601 = $$0; //@line 14934
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 14936
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 14939
         } else {
          $$2 = $373; //@line 14941
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 14948
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 14951
      $381 = $$5605 - $378 | 0; //@line 14952
      $$7495604 = $$7495604 + 4 | 0; //@line 14953
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 14960
       break;
      } else {
       $$5605 = $381; //@line 14958
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 14965
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 14968
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 14972
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 14975
   $$sink560 = $323; //@line 14976
  }
 } while (0);
 STACKTOP = sp; //@line 14981
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 14981
}
function _equeue_dispatch__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$067 = 0, $$06992$reg2mem$0 = 0, $$06992$reg2mem$0$phi = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val31 = 0, $$expand_i1_val33 = 0, $$expand_i1_val35 = 0, $$reg2mem$0 = 0, $$reg2mem24$0 = 0, $$sink$in$i$i = 0, $10 = 0, $102 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $140 = 0, $141 = 0, $143 = 0, $146 = 0, $148 = 0, $151 = 0, $154 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $165 = 0, $168 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7084
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7086
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7088
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7090
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7092
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7094
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7096
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7102
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7104
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 7106
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 7108
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 7112
 $30 = HEAP8[$0 + 60 >> 0] & 1; //@line 7115
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 7117
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 7119
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 7121
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 7123
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 7125
 $$06992$reg2mem$0 = HEAP32[$0 + 32 >> 2] | 0; //@line 7126
 $$reg2mem$0 = HEAP32[$0 + 28 >> 2] | 0; //@line 7126
 $$reg2mem24$0 = HEAP32[$0 + 52 >> 2] | 0; //@line 7126
 while (1) {
  $68 = HEAP32[$$06992$reg2mem$0 + 24 >> 2] | 0; //@line 7129
  if (($68 | 0) > -1) {
   label = 8; //@line 7132
   break;
  }
  $92 = $$06992$reg2mem$0 + 4 | 0; //@line 7136
  $93 = HEAP8[$92 >> 0] | 0; //@line 7137
  HEAP8[$92 >> 0] = (($93 + 1 & 255) << HEAP32[$20 >> 2] | 0) == 0 ? 1 : ($93 & 255) + 1 & 255; //@line 7146
  $102 = HEAP32[$$06992$reg2mem$0 + 28 >> 2] | 0; //@line 7148
  if ($102 | 0) {
   label = 12; //@line 7151
   break;
  }
  _equeue_mutex_lock($24); //@line 7154
  $125 = HEAP32[$22 >> 2] | 0; //@line 7155
  L6 : do {
   if (!$125) {
    $$02329$i$i = $22; //@line 7159
    label = 21; //@line 7160
   } else {
    $127 = HEAP32[$$06992$reg2mem$0 >> 2] | 0; //@line 7162
    $$025$i$i = $22; //@line 7163
    $129 = $125; //@line 7163
    while (1) {
     $128 = HEAP32[$129 >> 2] | 0; //@line 7165
     if ($128 >>> 0 >= $127 >>> 0) {
      break;
     }
     $131 = $129 + 8 | 0; //@line 7170
     $132 = HEAP32[$131 >> 2] | 0; //@line 7171
     if (!$132) {
      $$02329$i$i = $131; //@line 7174
      label = 21; //@line 7175
      break L6;
     } else {
      $$025$i$i = $131; //@line 7178
      $129 = $132; //@line 7178
     }
    }
    if (($128 | 0) == ($127 | 0)) {
     HEAP32[$$06992$reg2mem$0 + 12 >> 2] = $129; //@line 7184
     $$02330$i$i = $$025$i$i; //@line 7187
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 7187
    } else {
     $$02329$i$i = $$025$i$i; //@line 7189
     label = 21; //@line 7190
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 7195
   HEAP32[$$06992$reg2mem$0 + 12 >> 2] = 0; //@line 7197
   $$02330$i$i = $$02329$i$i; //@line 7198
   $$sink$in$i$i = $$02329$i$i; //@line 7198
  }
  HEAP32[$$reg2mem24$0 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 7201
  HEAP32[$$02330$i$i >> 2] = $$06992$reg2mem$0; //@line 7202
  _equeue_mutex_unlock($24); //@line 7203
  if (!$$reg2mem$0) {
   label = 24; //@line 7206
   break;
  }
  $41 = $$reg2mem$0 + 8 | 0; //@line 7209
  $42 = HEAP32[$41 >> 2] | 0; //@line 7210
  $44 = HEAP32[$$reg2mem$0 + 32 >> 2] | 0; //@line 7212
  if (!$44) {
   $$06992$reg2mem$0$phi = $$reg2mem$0; //@line 7215
   $$reg2mem$0 = $42; //@line 7215
   $$reg2mem24$0 = $41; //@line 7215
   $$06992$reg2mem$0 = $$06992$reg2mem$0$phi; //@line 7215
  } else {
   label = 3; //@line 7217
   break;
  }
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 7223
  FUNCTION_TABLE_vi[$44 & 1023]($$reg2mem$0 + 36 | 0); //@line 7224
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 7227
   $47 = $ReallocAsyncCtx + 4 | 0; //@line 7228
   HEAP32[$47 >> 2] = $2; //@line 7229
   $48 = $ReallocAsyncCtx + 8 | 0; //@line 7230
   HEAP32[$48 >> 2] = $4; //@line 7231
   $49 = $ReallocAsyncCtx + 12 | 0; //@line 7232
   HEAP32[$49 >> 2] = $6; //@line 7233
   $50 = $ReallocAsyncCtx + 16 | 0; //@line 7234
   HEAP32[$50 >> 2] = $8; //@line 7235
   $51 = $ReallocAsyncCtx + 20 | 0; //@line 7236
   HEAP32[$51 >> 2] = $10; //@line 7237
   $52 = $ReallocAsyncCtx + 24 | 0; //@line 7238
   HEAP32[$52 >> 2] = $12; //@line 7239
   $53 = $ReallocAsyncCtx + 28 | 0; //@line 7240
   HEAP32[$53 >> 2] = $42; //@line 7241
   $54 = $ReallocAsyncCtx + 32 | 0; //@line 7242
   HEAP32[$54 >> 2] = $$reg2mem$0; //@line 7243
   $55 = $ReallocAsyncCtx + 36 | 0; //@line 7244
   HEAP32[$55 >> 2] = $18; //@line 7245
   $56 = $ReallocAsyncCtx + 40 | 0; //@line 7246
   HEAP32[$56 >> 2] = $20; //@line 7247
   $57 = $ReallocAsyncCtx + 44 | 0; //@line 7248
   HEAP32[$57 >> 2] = $22; //@line 7249
   $58 = $ReallocAsyncCtx + 48 | 0; //@line 7250
   HEAP32[$58 >> 2] = $24; //@line 7251
   $59 = $ReallocAsyncCtx + 52 | 0; //@line 7252
   HEAP32[$59 >> 2] = $41; //@line 7253
   $60 = $ReallocAsyncCtx + 56 | 0; //@line 7254
   HEAP32[$60 >> 2] = $28; //@line 7255
   $61 = $ReallocAsyncCtx + 60 | 0; //@line 7256
   $$expand_i1_val = $30 & 1; //@line 7257
   HEAP8[$61 >> 0] = $$expand_i1_val; //@line 7258
   $62 = $ReallocAsyncCtx + 64 | 0; //@line 7259
   HEAP32[$62 >> 2] = $32; //@line 7260
   $63 = $ReallocAsyncCtx + 68 | 0; //@line 7261
   HEAP32[$63 >> 2] = $34; //@line 7262
   $64 = $ReallocAsyncCtx + 72 | 0; //@line 7263
   HEAP32[$64 >> 2] = $36; //@line 7264
   $65 = $ReallocAsyncCtx + 76 | 0; //@line 7265
   HEAP32[$65 >> 2] = $38; //@line 7266
   $66 = $ReallocAsyncCtx + 80 | 0; //@line 7267
   HEAP32[$66 >> 2] = $40; //@line 7268
   sp = STACKTOP; //@line 7269
   return;
  }
  ___async_unwind = 0; //@line 7272
  HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 7273
  $47 = $ReallocAsyncCtx + 4 | 0; //@line 7274
  HEAP32[$47 >> 2] = $2; //@line 7275
  $48 = $ReallocAsyncCtx + 8 | 0; //@line 7276
  HEAP32[$48 >> 2] = $4; //@line 7277
  $49 = $ReallocAsyncCtx + 12 | 0; //@line 7278
  HEAP32[$49 >> 2] = $6; //@line 7279
  $50 = $ReallocAsyncCtx + 16 | 0; //@line 7280
  HEAP32[$50 >> 2] = $8; //@line 7281
  $51 = $ReallocAsyncCtx + 20 | 0; //@line 7282
  HEAP32[$51 >> 2] = $10; //@line 7283
  $52 = $ReallocAsyncCtx + 24 | 0; //@line 7284
  HEAP32[$52 >> 2] = $12; //@line 7285
  $53 = $ReallocAsyncCtx + 28 | 0; //@line 7286
  HEAP32[$53 >> 2] = $42; //@line 7287
  $54 = $ReallocAsyncCtx + 32 | 0; //@line 7288
  HEAP32[$54 >> 2] = $$reg2mem$0; //@line 7289
  $55 = $ReallocAsyncCtx + 36 | 0; //@line 7290
  HEAP32[$55 >> 2] = $18; //@line 7291
  $56 = $ReallocAsyncCtx + 40 | 0; //@line 7292
  HEAP32[$56 >> 2] = $20; //@line 7293
  $57 = $ReallocAsyncCtx + 44 | 0; //@line 7294
  HEAP32[$57 >> 2] = $22; //@line 7295
  $58 = $ReallocAsyncCtx + 48 | 0; //@line 7296
  HEAP32[$58 >> 2] = $24; //@line 7297
  $59 = $ReallocAsyncCtx + 52 | 0; //@line 7298
  HEAP32[$59 >> 2] = $41; //@line 7299
  $60 = $ReallocAsyncCtx + 56 | 0; //@line 7300
  HEAP32[$60 >> 2] = $28; //@line 7301
  $61 = $ReallocAsyncCtx + 60 | 0; //@line 7302
  $$expand_i1_val = $30 & 1; //@line 7303
  HEAP8[$61 >> 0] = $$expand_i1_val; //@line 7304
  $62 = $ReallocAsyncCtx + 64 | 0; //@line 7305
  HEAP32[$62 >> 2] = $32; //@line 7306
  $63 = $ReallocAsyncCtx + 68 | 0; //@line 7307
  HEAP32[$63 >> 2] = $34; //@line 7308
  $64 = $ReallocAsyncCtx + 72 | 0; //@line 7309
  HEAP32[$64 >> 2] = $36; //@line 7310
  $65 = $ReallocAsyncCtx + 76 | 0; //@line 7311
  HEAP32[$65 >> 2] = $38; //@line 7312
  $66 = $ReallocAsyncCtx + 80 | 0; //@line 7313
  HEAP32[$66 >> 2] = $40; //@line 7314
  sp = STACKTOP; //@line 7315
  return;
 } else if ((label | 0) == 8) {
  $70 = $$06992$reg2mem$0 + 20 | 0; //@line 7319
  HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + $68; //@line 7322
  $73 = _equeue_tick() | 0; //@line 7323
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 7324
  _equeue_enqueue($18, $$06992$reg2mem$0, $73) | 0; //@line 7325
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 7328
   $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 7329
   HEAP32[$74 >> 2] = $2; //@line 7330
   $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 7331
   HEAP32[$75 >> 2] = $4; //@line 7332
   $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 7333
   HEAP32[$76 >> 2] = $6; //@line 7334
   $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 7335
   HEAP32[$77 >> 2] = $8; //@line 7336
   $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 7337
   HEAP32[$78 >> 2] = $36; //@line 7338
   $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 7339
   HEAP32[$79 >> 2] = $10; //@line 7340
   $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 7341
   HEAP32[$80 >> 2] = $12; //@line 7342
   $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 7343
   HEAP32[$81 >> 2] = $$reg2mem$0; //@line 7344
   $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 7345
   HEAP32[$82 >> 2] = $18; //@line 7346
   $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 7347
   HEAP32[$83 >> 2] = $20; //@line 7348
   $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 7349
   HEAP32[$84 >> 2] = $22; //@line 7350
   $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 7351
   HEAP32[$85 >> 2] = $24; //@line 7352
   $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 7353
   HEAP32[$86 >> 2] = $28; //@line 7354
   $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 7355
   $$expand_i1_val31 = $30 & 1; //@line 7356
   HEAP8[$87 >> 0] = $$expand_i1_val31; //@line 7357
   $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 7358
   HEAP32[$88 >> 2] = $32; //@line 7359
   $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 7360
   HEAP32[$89 >> 2] = $34; //@line 7361
   $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 7362
   HEAP32[$90 >> 2] = $38; //@line 7363
   $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 7364
   HEAP32[$91 >> 2] = $40; //@line 7365
   sp = STACKTOP; //@line 7366
   return;
  }
  ___async_unwind = 0; //@line 7369
  HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 7370
  $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 7371
  HEAP32[$74 >> 2] = $2; //@line 7372
  $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 7373
  HEAP32[$75 >> 2] = $4; //@line 7374
  $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 7375
  HEAP32[$76 >> 2] = $6; //@line 7376
  $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 7377
  HEAP32[$77 >> 2] = $8; //@line 7378
  $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 7379
  HEAP32[$78 >> 2] = $36; //@line 7380
  $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 7381
  HEAP32[$79 >> 2] = $10; //@line 7382
  $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 7383
  HEAP32[$80 >> 2] = $12; //@line 7384
  $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 7385
  HEAP32[$81 >> 2] = $$reg2mem$0; //@line 7386
  $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 7387
  HEAP32[$82 >> 2] = $18; //@line 7388
  $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 7389
  HEAP32[$83 >> 2] = $20; //@line 7390
  $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 7391
  HEAP32[$84 >> 2] = $22; //@line 7392
  $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 7393
  HEAP32[$85 >> 2] = $24; //@line 7394
  $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 7395
  HEAP32[$86 >> 2] = $28; //@line 7396
  $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 7397
  $$expand_i1_val31 = $30 & 1; //@line 7398
  HEAP8[$87 >> 0] = $$expand_i1_val31; //@line 7399
  $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 7400
  HEAP32[$88 >> 2] = $32; //@line 7401
  $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 7402
  HEAP32[$89 >> 2] = $34; //@line 7403
  $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 7404
  HEAP32[$90 >> 2] = $38; //@line 7405
  $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 7406
  HEAP32[$91 >> 2] = $40; //@line 7407
  sp = STACKTOP; //@line 7408
  return;
 } else if ((label | 0) == 12) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 7413
  FUNCTION_TABLE_vi[$102 & 1023]($$06992$reg2mem$0 + 36 | 0); //@line 7414
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 7417
   $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 7418
   HEAP32[$105 >> 2] = $2; //@line 7419
   $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 7420
   HEAP32[$106 >> 2] = $4; //@line 7421
   $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 7422
   HEAP32[$107 >> 2] = $6; //@line 7423
   $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 7424
   HEAP32[$108 >> 2] = $8; //@line 7425
   $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 7426
   HEAP32[$109 >> 2] = $10; //@line 7427
   $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 7428
   HEAP32[$110 >> 2] = $12; //@line 7429
   $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 7430
   HEAP32[$111 >> 2] = $$reg2mem$0; //@line 7431
   $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 7432
   HEAP32[$112 >> 2] = $18; //@line 7433
   $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 7434
   HEAP32[$113 >> 2] = $20; //@line 7435
   $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 7436
   HEAP32[$114 >> 2] = $22; //@line 7437
   $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 7438
   HEAP32[$115 >> 2] = $24; //@line 7439
   $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 7440
   HEAP32[$116 >> 2] = $28; //@line 7441
   $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 7442
   $$expand_i1_val33 = $30 & 1; //@line 7443
   HEAP8[$117 >> 0] = $$expand_i1_val33; //@line 7444
   $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 7445
   HEAP32[$118 >> 2] = $32; //@line 7446
   $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 7447
   HEAP32[$119 >> 2] = $34; //@line 7448
   $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 7449
   HEAP32[$120 >> 2] = $36; //@line 7450
   $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 7451
   HEAP32[$121 >> 2] = $38; //@line 7452
   $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 7453
   HEAP32[$122 >> 2] = $40; //@line 7454
   $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 7455
   HEAP32[$123 >> 2] = $$06992$reg2mem$0; //@line 7456
   $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 7457
   HEAP32[$124 >> 2] = $$reg2mem24$0; //@line 7458
   sp = STACKTOP; //@line 7459
   return;
  }
  ___async_unwind = 0; //@line 7462
  HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 7463
  $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 7464
  HEAP32[$105 >> 2] = $2; //@line 7465
  $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 7466
  HEAP32[$106 >> 2] = $4; //@line 7467
  $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 7468
  HEAP32[$107 >> 2] = $6; //@line 7469
  $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 7470
  HEAP32[$108 >> 2] = $8; //@line 7471
  $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 7472
  HEAP32[$109 >> 2] = $10; //@line 7473
  $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 7474
  HEAP32[$110 >> 2] = $12; //@line 7475
  $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 7476
  HEAP32[$111 >> 2] = $$reg2mem$0; //@line 7477
  $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 7478
  HEAP32[$112 >> 2] = $18; //@line 7479
  $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 7480
  HEAP32[$113 >> 2] = $20; //@line 7481
  $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 7482
  HEAP32[$114 >> 2] = $22; //@line 7483
  $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 7484
  HEAP32[$115 >> 2] = $24; //@line 7485
  $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 7486
  HEAP32[$116 >> 2] = $28; //@line 7487
  $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 7488
  $$expand_i1_val33 = $30 & 1; //@line 7489
  HEAP8[$117 >> 0] = $$expand_i1_val33; //@line 7490
  $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 7491
  HEAP32[$118 >> 2] = $32; //@line 7492
  $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 7493
  HEAP32[$119 >> 2] = $34; //@line 7494
  $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 7495
  HEAP32[$120 >> 2] = $36; //@line 7496
  $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 7497
  HEAP32[$121 >> 2] = $38; //@line 7498
  $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 7499
  HEAP32[$122 >> 2] = $40; //@line 7500
  $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 7501
  HEAP32[$123 >> 2] = $$06992$reg2mem$0; //@line 7502
  $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 7503
  HEAP32[$124 >> 2] = $$reg2mem24$0; //@line 7504
  sp = STACKTOP; //@line 7505
  return;
 } else if ((label | 0) == 24) {
  $140 = _equeue_tick() | 0; //@line 7509
  if ($30) {
   $141 = $28 - $140 | 0; //@line 7511
   if (($141 | 0) < 1) {
    $143 = $18 + 40 | 0; //@line 7514
    if (HEAP32[$143 >> 2] | 0) {
     _equeue_mutex_lock($4); //@line 7518
     $146 = HEAP32[$143 >> 2] | 0; //@line 7519
     if ($146 | 0) {
      $148 = HEAP32[$2 >> 2] | 0; //@line 7522
      if ($148 | 0) {
       $151 = HEAP32[$18 + 44 >> 2] | 0; //@line 7526
       $154 = (HEAP32[$148 + 20 >> 2] | 0) - $140 | 0; //@line 7529
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 7533
       FUNCTION_TABLE_vii[$146 & 15]($151, $154 & ~($154 >> 31)); //@line 7534
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 7537
        $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 7538
        HEAP32[$158 >> 2] = $36; //@line 7539
        $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 7540
        HEAP32[$159 >> 2] = $4; //@line 7541
        $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 7542
        HEAP32[$160 >> 2] = $8; //@line 7543
        sp = STACKTOP; //@line 7544
        return;
       }
       ___async_unwind = 0; //@line 7547
       HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 7548
       $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 7549
       HEAP32[$158 >> 2] = $36; //@line 7550
       $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 7551
       HEAP32[$159 >> 2] = $4; //@line 7552
       $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 7553
       HEAP32[$160 >> 2] = $8; //@line 7554
       sp = STACKTOP; //@line 7555
       return;
      }
     }
     HEAP8[$36 >> 0] = 1; //@line 7559
     _equeue_mutex_unlock($4); //@line 7560
    }
    HEAP8[$8 >> 0] = 0; //@line 7562
    return;
   } else {
    $$067 = $141; //@line 7565
   }
  } else {
   $$067 = -1; //@line 7568
  }
  _equeue_mutex_lock($4); //@line 7570
  $161 = HEAP32[$2 >> 2] | 0; //@line 7571
  if (!$161) {
   $$2 = $$067; //@line 7574
  } else {
   $165 = (HEAP32[$161 + 20 >> 2] | 0) - $140 | 0; //@line 7578
   $168 = $165 & ~($165 >> 31); //@line 7581
   $$2 = $168 >>> 0 < $$067 >>> 0 ? $168 : $$067; //@line 7584
  }
  _equeue_mutex_unlock($4); //@line 7586
  _equeue_sema_wait($6, $$2) | 0; //@line 7587
  do {
   if (HEAP8[$8 >> 0] | 0) {
    _equeue_mutex_lock($4); //@line 7592
    if (!(HEAP8[$8 >> 0] | 0)) {
     _equeue_mutex_unlock($4); //@line 7596
     break;
    }
    HEAP8[$8 >> 0] = 0; //@line 7599
    _equeue_mutex_unlock($4); //@line 7600
    return;
   }
  } while (0);
  $174 = _equeue_tick() | 0; //@line 7604
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 7605
  _wait_ms(20); //@line 7606
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 7609
   $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 7610
   HEAP32[$175 >> 2] = $2; //@line 7611
   $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 7612
   HEAP32[$176 >> 2] = $4; //@line 7613
   $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 7614
   HEAP32[$177 >> 2] = $6; //@line 7615
   $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 7616
   HEAP32[$178 >> 2] = $8; //@line 7617
   $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 7618
   HEAP32[$179 >> 2] = $36; //@line 7619
   $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 7620
   HEAP32[$180 >> 2] = $10; //@line 7621
   $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 7622
   HEAP32[$181 >> 2] = $12; //@line 7623
   $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 7624
   HEAP32[$182 >> 2] = $18; //@line 7625
   $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 7626
   HEAP32[$183 >> 2] = $20; //@line 7627
   $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 7628
   HEAP32[$184 >> 2] = $22; //@line 7629
   $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 7630
   HEAP32[$185 >> 2] = $24; //@line 7631
   $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 7632
   HEAP32[$186 >> 2] = $28; //@line 7633
   $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 7634
   $$expand_i1_val35 = $30 & 1; //@line 7635
   HEAP8[$187 >> 0] = $$expand_i1_val35; //@line 7636
   $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 7637
   HEAP32[$188 >> 2] = $32; //@line 7638
   $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 7639
   HEAP32[$189 >> 2] = $34; //@line 7640
   $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 7641
   HEAP32[$190 >> 2] = $38; //@line 7642
   $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 7643
   HEAP32[$191 >> 2] = $40; //@line 7644
   $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 7645
   HEAP32[$192 >> 2] = $174; //@line 7646
   sp = STACKTOP; //@line 7647
   return;
  }
  ___async_unwind = 0; //@line 7650
  HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 7651
  $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 7652
  HEAP32[$175 >> 2] = $2; //@line 7653
  $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 7654
  HEAP32[$176 >> 2] = $4; //@line 7655
  $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 7656
  HEAP32[$177 >> 2] = $6; //@line 7657
  $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 7658
  HEAP32[$178 >> 2] = $8; //@line 7659
  $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 7660
  HEAP32[$179 >> 2] = $36; //@line 7661
  $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 7662
  HEAP32[$180 >> 2] = $10; //@line 7663
  $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 7664
  HEAP32[$181 >> 2] = $12; //@line 7665
  $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 7666
  HEAP32[$182 >> 2] = $18; //@line 7667
  $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 7668
  HEAP32[$183 >> 2] = $20; //@line 7669
  $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 7670
  HEAP32[$184 >> 2] = $22; //@line 7671
  $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 7672
  HEAP32[$185 >> 2] = $24; //@line 7673
  $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 7674
  HEAP32[$186 >> 2] = $28; //@line 7675
  $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 7676
  $$expand_i1_val35 = $30 & 1; //@line 7677
  HEAP8[$187 >> 0] = $$expand_i1_val35; //@line 7678
  $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 7679
  HEAP32[$188 >> 2] = $32; //@line 7680
  $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 7681
  HEAP32[$189 >> 2] = $34; //@line 7682
  $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 7683
  HEAP32[$190 >> 2] = $38; //@line 7684
  $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 7685
  HEAP32[$191 >> 2] = $40; //@line 7686
  $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 7687
  HEAP32[$192 >> 2] = $174; //@line 7688
  sp = STACKTOP; //@line 7689
  return;
 }
}
function _equeue_dispatch__async_cb_279($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$067 = 0, $$06992$reg2mem$0 = 0, $$06992$reg2mem$0$phi = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val31 = 0, $$expand_i1_val33 = 0, $$expand_i1_val35 = 0, $$reg2mem$0 = 0, $$reg2mem24$0 = 0, $$sink$in$i$i = 0, $10 = 0, $102 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $140 = 0, $141 = 0, $143 = 0, $146 = 0, $148 = 0, $151 = 0, $154 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $165 = 0, $168 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7707
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7709
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7711
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7713
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7715
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7717
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7719
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7723
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7725
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7727
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 7729
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 7731
 $26 = HEAP8[$0 + 52 >> 0] & 1; //@line 7734
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 7736
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 7738
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 7740
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 7742
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 7744
 $$06992$reg2mem$0 = HEAP32[$0 + 76 >> 2] | 0; //@line 7749
 $$reg2mem$0 = HEAP32[$0 + 28 >> 2] | 0; //@line 7749
 $$reg2mem24$0 = HEAP32[$0 + 80 >> 2] | 0; //@line 7749
 while (1) {
  _equeue_mutex_lock($22); //@line 7751
  $125 = HEAP32[$20 >> 2] | 0; //@line 7752
  L4 : do {
   if (!$125) {
    $$02329$i$i = $20; //@line 7756
    label = 21; //@line 7757
   } else {
    $127 = HEAP32[$$06992$reg2mem$0 >> 2] | 0; //@line 7759
    $$025$i$i = $20; //@line 7760
    $129 = $125; //@line 7760
    while (1) {
     $128 = HEAP32[$129 >> 2] | 0; //@line 7762
     if ($128 >>> 0 >= $127 >>> 0) {
      break;
     }
     $131 = $129 + 8 | 0; //@line 7767
     $132 = HEAP32[$131 >> 2] | 0; //@line 7768
     if (!$132) {
      $$02329$i$i = $131; //@line 7771
      label = 21; //@line 7772
      break L4;
     } else {
      $$025$i$i = $131; //@line 7775
      $129 = $132; //@line 7775
     }
    }
    if (($128 | 0) == ($127 | 0)) {
     HEAP32[$$06992$reg2mem$0 + 12 >> 2] = $129; //@line 7781
     $$02330$i$i = $$025$i$i; //@line 7784
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 7784
    } else {
     $$02329$i$i = $$025$i$i; //@line 7786
     label = 21; //@line 7787
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 7792
   HEAP32[$$06992$reg2mem$0 + 12 >> 2] = 0; //@line 7794
   $$02330$i$i = $$02329$i$i; //@line 7795
   $$sink$in$i$i = $$02329$i$i; //@line 7795
  }
  HEAP32[$$reg2mem24$0 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 7798
  HEAP32[$$02330$i$i >> 2] = $$06992$reg2mem$0; //@line 7799
  _equeue_mutex_unlock($22); //@line 7800
  if (!$$reg2mem$0) {
   label = 24; //@line 7803
   break;
  }
  $$reg2mem24$0 = $$reg2mem$0 + 8 | 0; //@line 7806
  $42 = HEAP32[$$reg2mem24$0 >> 2] | 0; //@line 7807
  $44 = HEAP32[$$reg2mem$0 + 32 >> 2] | 0; //@line 7809
  if ($44 | 0) {
   label = 3; //@line 7812
   break;
  }
  $68 = HEAP32[$$reg2mem$0 + 24 >> 2] | 0; //@line 7816
  if (($68 | 0) > -1) {
   label = 7; //@line 7819
   break;
  }
  $92 = $$reg2mem$0 + 4 | 0; //@line 7823
  $93 = HEAP8[$92 >> 0] | 0; //@line 7824
  HEAP8[$92 >> 0] = (($93 + 1 & 255) << HEAP32[$18 >> 2] | 0) == 0 ? 1 : ($93 & 255) + 1 & 255; //@line 7833
  $102 = HEAP32[$$reg2mem$0 + 28 >> 2] | 0; //@line 7835
  if ($102 | 0) {
   label = 11; //@line 7840
   break;
  } else {
   $$06992$reg2mem$0$phi = $$reg2mem$0; //@line 7838
   $$reg2mem$0 = $42; //@line 7838
   $$06992$reg2mem$0 = $$06992$reg2mem$0$phi; //@line 7838
  }
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 7846
  FUNCTION_TABLE_vi[$44 & 1023]($$reg2mem$0 + 36 | 0); //@line 7847
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 7850
   $47 = $ReallocAsyncCtx + 4 | 0; //@line 7851
   HEAP32[$47 >> 2] = $2; //@line 7852
   $48 = $ReallocAsyncCtx + 8 | 0; //@line 7853
   HEAP32[$48 >> 2] = $4; //@line 7854
   $49 = $ReallocAsyncCtx + 12 | 0; //@line 7855
   HEAP32[$49 >> 2] = $6; //@line 7856
   $50 = $ReallocAsyncCtx + 16 | 0; //@line 7857
   HEAP32[$50 >> 2] = $8; //@line 7858
   $51 = $ReallocAsyncCtx + 20 | 0; //@line 7859
   HEAP32[$51 >> 2] = $10; //@line 7860
   $52 = $ReallocAsyncCtx + 24 | 0; //@line 7861
   HEAP32[$52 >> 2] = $12; //@line 7862
   $53 = $ReallocAsyncCtx + 28 | 0; //@line 7863
   HEAP32[$53 >> 2] = $42; //@line 7864
   $54 = $ReallocAsyncCtx + 32 | 0; //@line 7865
   HEAP32[$54 >> 2] = $$reg2mem$0; //@line 7866
   $55 = $ReallocAsyncCtx + 36 | 0; //@line 7867
   HEAP32[$55 >> 2] = $16; //@line 7868
   $56 = $ReallocAsyncCtx + 40 | 0; //@line 7869
   HEAP32[$56 >> 2] = $18; //@line 7870
   $57 = $ReallocAsyncCtx + 44 | 0; //@line 7871
   HEAP32[$57 >> 2] = $20; //@line 7872
   $58 = $ReallocAsyncCtx + 48 | 0; //@line 7873
   HEAP32[$58 >> 2] = $22; //@line 7874
   $59 = $ReallocAsyncCtx + 52 | 0; //@line 7875
   HEAP32[$59 >> 2] = $$reg2mem24$0; //@line 7876
   $60 = $ReallocAsyncCtx + 56 | 0; //@line 7877
   HEAP32[$60 >> 2] = $24; //@line 7878
   $61 = $ReallocAsyncCtx + 60 | 0; //@line 7879
   $$expand_i1_val = $26 & 1; //@line 7880
   HEAP8[$61 >> 0] = $$expand_i1_val; //@line 7881
   $62 = $ReallocAsyncCtx + 64 | 0; //@line 7882
   HEAP32[$62 >> 2] = $28; //@line 7883
   $63 = $ReallocAsyncCtx + 68 | 0; //@line 7884
   HEAP32[$63 >> 2] = $30; //@line 7885
   $64 = $ReallocAsyncCtx + 72 | 0; //@line 7886
   HEAP32[$64 >> 2] = $32; //@line 7887
   $65 = $ReallocAsyncCtx + 76 | 0; //@line 7888
   HEAP32[$65 >> 2] = $34; //@line 7889
   $66 = $ReallocAsyncCtx + 80 | 0; //@line 7890
   HEAP32[$66 >> 2] = $36; //@line 7891
   sp = STACKTOP; //@line 7892
   return;
  }
  ___async_unwind = 0; //@line 7895
  HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 7896
  $47 = $ReallocAsyncCtx + 4 | 0; //@line 7897
  HEAP32[$47 >> 2] = $2; //@line 7898
  $48 = $ReallocAsyncCtx + 8 | 0; //@line 7899
  HEAP32[$48 >> 2] = $4; //@line 7900
  $49 = $ReallocAsyncCtx + 12 | 0; //@line 7901
  HEAP32[$49 >> 2] = $6; //@line 7902
  $50 = $ReallocAsyncCtx + 16 | 0; //@line 7903
  HEAP32[$50 >> 2] = $8; //@line 7904
  $51 = $ReallocAsyncCtx + 20 | 0; //@line 7905
  HEAP32[$51 >> 2] = $10; //@line 7906
  $52 = $ReallocAsyncCtx + 24 | 0; //@line 7907
  HEAP32[$52 >> 2] = $12; //@line 7908
  $53 = $ReallocAsyncCtx + 28 | 0; //@line 7909
  HEAP32[$53 >> 2] = $42; //@line 7910
  $54 = $ReallocAsyncCtx + 32 | 0; //@line 7911
  HEAP32[$54 >> 2] = $$reg2mem$0; //@line 7912
  $55 = $ReallocAsyncCtx + 36 | 0; //@line 7913
  HEAP32[$55 >> 2] = $16; //@line 7914
  $56 = $ReallocAsyncCtx + 40 | 0; //@line 7915
  HEAP32[$56 >> 2] = $18; //@line 7916
  $57 = $ReallocAsyncCtx + 44 | 0; //@line 7917
  HEAP32[$57 >> 2] = $20; //@line 7918
  $58 = $ReallocAsyncCtx + 48 | 0; //@line 7919
  HEAP32[$58 >> 2] = $22; //@line 7920
  $59 = $ReallocAsyncCtx + 52 | 0; //@line 7921
  HEAP32[$59 >> 2] = $$reg2mem24$0; //@line 7922
  $60 = $ReallocAsyncCtx + 56 | 0; //@line 7923
  HEAP32[$60 >> 2] = $24; //@line 7924
  $61 = $ReallocAsyncCtx + 60 | 0; //@line 7925
  $$expand_i1_val = $26 & 1; //@line 7926
  HEAP8[$61 >> 0] = $$expand_i1_val; //@line 7927
  $62 = $ReallocAsyncCtx + 64 | 0; //@line 7928
  HEAP32[$62 >> 2] = $28; //@line 7929
  $63 = $ReallocAsyncCtx + 68 | 0; //@line 7930
  HEAP32[$63 >> 2] = $30; //@line 7931
  $64 = $ReallocAsyncCtx + 72 | 0; //@line 7932
  HEAP32[$64 >> 2] = $32; //@line 7933
  $65 = $ReallocAsyncCtx + 76 | 0; //@line 7934
  HEAP32[$65 >> 2] = $34; //@line 7935
  $66 = $ReallocAsyncCtx + 80 | 0; //@line 7936
  HEAP32[$66 >> 2] = $36; //@line 7937
  sp = STACKTOP; //@line 7938
  return;
 } else if ((label | 0) == 7) {
  $70 = $$reg2mem$0 + 20 | 0; //@line 7942
  HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + $68; //@line 7945
  $73 = _equeue_tick() | 0; //@line 7946
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 7947
  _equeue_enqueue($16, $$reg2mem$0, $73) | 0; //@line 7948
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 7951
   $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 7952
   HEAP32[$74 >> 2] = $2; //@line 7953
   $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 7954
   HEAP32[$75 >> 2] = $4; //@line 7955
   $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 7956
   HEAP32[$76 >> 2] = $6; //@line 7957
   $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 7958
   HEAP32[$77 >> 2] = $8; //@line 7959
   $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 7960
   HEAP32[$78 >> 2] = $32; //@line 7961
   $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 7962
   HEAP32[$79 >> 2] = $10; //@line 7963
   $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 7964
   HEAP32[$80 >> 2] = $12; //@line 7965
   $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 7966
   HEAP32[$81 >> 2] = $42; //@line 7967
   $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 7968
   HEAP32[$82 >> 2] = $16; //@line 7969
   $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 7970
   HEAP32[$83 >> 2] = $18; //@line 7971
   $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 7972
   HEAP32[$84 >> 2] = $20; //@line 7973
   $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 7974
   HEAP32[$85 >> 2] = $22; //@line 7975
   $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 7976
   HEAP32[$86 >> 2] = $24; //@line 7977
   $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 7978
   $$expand_i1_val31 = $26 & 1; //@line 7979
   HEAP8[$87 >> 0] = $$expand_i1_val31; //@line 7980
   $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 7981
   HEAP32[$88 >> 2] = $28; //@line 7982
   $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 7983
   HEAP32[$89 >> 2] = $30; //@line 7984
   $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 7985
   HEAP32[$90 >> 2] = $34; //@line 7986
   $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 7987
   HEAP32[$91 >> 2] = $36; //@line 7988
   sp = STACKTOP; //@line 7989
   return;
  }
  ___async_unwind = 0; //@line 7992
  HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 7993
  $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 7994
  HEAP32[$74 >> 2] = $2; //@line 7995
  $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 7996
  HEAP32[$75 >> 2] = $4; //@line 7997
  $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 7998
  HEAP32[$76 >> 2] = $6; //@line 7999
  $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 8000
  HEAP32[$77 >> 2] = $8; //@line 8001
  $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 8002
  HEAP32[$78 >> 2] = $32; //@line 8003
  $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 8004
  HEAP32[$79 >> 2] = $10; //@line 8005
  $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 8006
  HEAP32[$80 >> 2] = $12; //@line 8007
  $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 8008
  HEAP32[$81 >> 2] = $42; //@line 8009
  $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 8010
  HEAP32[$82 >> 2] = $16; //@line 8011
  $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 8012
  HEAP32[$83 >> 2] = $18; //@line 8013
  $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 8014
  HEAP32[$84 >> 2] = $20; //@line 8015
  $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 8016
  HEAP32[$85 >> 2] = $22; //@line 8017
  $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 8018
  HEAP32[$86 >> 2] = $24; //@line 8019
  $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 8020
  $$expand_i1_val31 = $26 & 1; //@line 8021
  HEAP8[$87 >> 0] = $$expand_i1_val31; //@line 8022
  $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 8023
  HEAP32[$88 >> 2] = $28; //@line 8024
  $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 8025
  HEAP32[$89 >> 2] = $30; //@line 8026
  $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 8027
  HEAP32[$90 >> 2] = $34; //@line 8028
  $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 8029
  HEAP32[$91 >> 2] = $36; //@line 8030
  sp = STACKTOP; //@line 8031
  return;
 } else if ((label | 0) == 11) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 8036
  FUNCTION_TABLE_vi[$102 & 1023]($$reg2mem$0 + 36 | 0); //@line 8037
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 8040
   $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 8041
   HEAP32[$105 >> 2] = $2; //@line 8042
   $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 8043
   HEAP32[$106 >> 2] = $4; //@line 8044
   $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 8045
   HEAP32[$107 >> 2] = $6; //@line 8046
   $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 8047
   HEAP32[$108 >> 2] = $8; //@line 8048
   $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 8049
   HEAP32[$109 >> 2] = $10; //@line 8050
   $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 8051
   HEAP32[$110 >> 2] = $12; //@line 8052
   $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 8053
   HEAP32[$111 >> 2] = $42; //@line 8054
   $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 8055
   HEAP32[$112 >> 2] = $16; //@line 8056
   $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 8057
   HEAP32[$113 >> 2] = $18; //@line 8058
   $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 8059
   HEAP32[$114 >> 2] = $20; //@line 8060
   $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 8061
   HEAP32[$115 >> 2] = $22; //@line 8062
   $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 8063
   HEAP32[$116 >> 2] = $24; //@line 8064
   $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 8065
   $$expand_i1_val33 = $26 & 1; //@line 8066
   HEAP8[$117 >> 0] = $$expand_i1_val33; //@line 8067
   $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 8068
   HEAP32[$118 >> 2] = $28; //@line 8069
   $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 8070
   HEAP32[$119 >> 2] = $30; //@line 8071
   $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 8072
   HEAP32[$120 >> 2] = $32; //@line 8073
   $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 8074
   HEAP32[$121 >> 2] = $34; //@line 8075
   $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 8076
   HEAP32[$122 >> 2] = $36; //@line 8077
   $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 8078
   HEAP32[$123 >> 2] = $$reg2mem$0; //@line 8079
   $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 8080
   HEAP32[$124 >> 2] = $$reg2mem24$0; //@line 8081
   sp = STACKTOP; //@line 8082
   return;
  }
  ___async_unwind = 0; //@line 8085
  HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 8086
  $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 8087
  HEAP32[$105 >> 2] = $2; //@line 8088
  $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 8089
  HEAP32[$106 >> 2] = $4; //@line 8090
  $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 8091
  HEAP32[$107 >> 2] = $6; //@line 8092
  $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 8093
  HEAP32[$108 >> 2] = $8; //@line 8094
  $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 8095
  HEAP32[$109 >> 2] = $10; //@line 8096
  $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 8097
  HEAP32[$110 >> 2] = $12; //@line 8098
  $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 8099
  HEAP32[$111 >> 2] = $42; //@line 8100
  $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 8101
  HEAP32[$112 >> 2] = $16; //@line 8102
  $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 8103
  HEAP32[$113 >> 2] = $18; //@line 8104
  $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 8105
  HEAP32[$114 >> 2] = $20; //@line 8106
  $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 8107
  HEAP32[$115 >> 2] = $22; //@line 8108
  $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 8109
  HEAP32[$116 >> 2] = $24; //@line 8110
  $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 8111
  $$expand_i1_val33 = $26 & 1; //@line 8112
  HEAP8[$117 >> 0] = $$expand_i1_val33; //@line 8113
  $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 8114
  HEAP32[$118 >> 2] = $28; //@line 8115
  $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 8116
  HEAP32[$119 >> 2] = $30; //@line 8117
  $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 8118
  HEAP32[$120 >> 2] = $32; //@line 8119
  $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 8120
  HEAP32[$121 >> 2] = $34; //@line 8121
  $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 8122
  HEAP32[$122 >> 2] = $36; //@line 8123
  $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 8124
  HEAP32[$123 >> 2] = $$reg2mem$0; //@line 8125
  $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 8126
  HEAP32[$124 >> 2] = $$reg2mem24$0; //@line 8127
  sp = STACKTOP; //@line 8128
  return;
 } else if ((label | 0) == 24) {
  $140 = _equeue_tick() | 0; //@line 8132
  if ($26) {
   $141 = $24 - $140 | 0; //@line 8134
   if (($141 | 0) < 1) {
    $143 = $16 + 40 | 0; //@line 8137
    if (HEAP32[$143 >> 2] | 0) {
     _equeue_mutex_lock($4); //@line 8141
     $146 = HEAP32[$143 >> 2] | 0; //@line 8142
     if ($146 | 0) {
      $148 = HEAP32[$2 >> 2] | 0; //@line 8145
      if ($148 | 0) {
       $151 = HEAP32[$16 + 44 >> 2] | 0; //@line 8149
       $154 = (HEAP32[$148 + 20 >> 2] | 0) - $140 | 0; //@line 8152
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 8156
       FUNCTION_TABLE_vii[$146 & 15]($151, $154 & ~($154 >> 31)); //@line 8157
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 8160
        $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 8161
        HEAP32[$158 >> 2] = $32; //@line 8162
        $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 8163
        HEAP32[$159 >> 2] = $4; //@line 8164
        $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 8165
        HEAP32[$160 >> 2] = $8; //@line 8166
        sp = STACKTOP; //@line 8167
        return;
       }
       ___async_unwind = 0; //@line 8170
       HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 8171
       $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 8172
       HEAP32[$158 >> 2] = $32; //@line 8173
       $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 8174
       HEAP32[$159 >> 2] = $4; //@line 8175
       $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 8176
       HEAP32[$160 >> 2] = $8; //@line 8177
       sp = STACKTOP; //@line 8178
       return;
      }
     }
     HEAP8[$32 >> 0] = 1; //@line 8182
     _equeue_mutex_unlock($4); //@line 8183
    }
    HEAP8[$8 >> 0] = 0; //@line 8185
    return;
   } else {
    $$067 = $141; //@line 8188
   }
  } else {
   $$067 = -1; //@line 8191
  }
  _equeue_mutex_lock($4); //@line 8193
  $161 = HEAP32[$2 >> 2] | 0; //@line 8194
  if (!$161) {
   $$2 = $$067; //@line 8197
  } else {
   $165 = (HEAP32[$161 + 20 >> 2] | 0) - $140 | 0; //@line 8201
   $168 = $165 & ~($165 >> 31); //@line 8204
   $$2 = $168 >>> 0 < $$067 >>> 0 ? $168 : $$067; //@line 8207
  }
  _equeue_mutex_unlock($4); //@line 8209
  _equeue_sema_wait($6, $$2) | 0; //@line 8210
  do {
   if (HEAP8[$8 >> 0] | 0) {
    _equeue_mutex_lock($4); //@line 8215
    if (!(HEAP8[$8 >> 0] | 0)) {
     _equeue_mutex_unlock($4); //@line 8219
     break;
    }
    HEAP8[$8 >> 0] = 0; //@line 8222
    _equeue_mutex_unlock($4); //@line 8223
    return;
   }
  } while (0);
  $174 = _equeue_tick() | 0; //@line 8227
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 8228
  _wait_ms(20); //@line 8229
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 8232
   $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 8233
   HEAP32[$175 >> 2] = $2; //@line 8234
   $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 8235
   HEAP32[$176 >> 2] = $4; //@line 8236
   $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 8237
   HEAP32[$177 >> 2] = $6; //@line 8238
   $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 8239
   HEAP32[$178 >> 2] = $8; //@line 8240
   $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 8241
   HEAP32[$179 >> 2] = $32; //@line 8242
   $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 8243
   HEAP32[$180 >> 2] = $10; //@line 8244
   $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 8245
   HEAP32[$181 >> 2] = $12; //@line 8246
   $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 8247
   HEAP32[$182 >> 2] = $16; //@line 8248
   $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 8249
   HEAP32[$183 >> 2] = $18; //@line 8250
   $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 8251
   HEAP32[$184 >> 2] = $20; //@line 8252
   $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 8253
   HEAP32[$185 >> 2] = $22; //@line 8254
   $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 8255
   HEAP32[$186 >> 2] = $24; //@line 8256
   $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 8257
   $$expand_i1_val35 = $26 & 1; //@line 8258
   HEAP8[$187 >> 0] = $$expand_i1_val35; //@line 8259
   $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 8260
   HEAP32[$188 >> 2] = $28; //@line 8261
   $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 8262
   HEAP32[$189 >> 2] = $30; //@line 8263
   $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 8264
   HEAP32[$190 >> 2] = $34; //@line 8265
   $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 8266
   HEAP32[$191 >> 2] = $36; //@line 8267
   $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 8268
   HEAP32[$192 >> 2] = $174; //@line 8269
   sp = STACKTOP; //@line 8270
   return;
  }
  ___async_unwind = 0; //@line 8273
  HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 8274
  $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 8275
  HEAP32[$175 >> 2] = $2; //@line 8276
  $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 8277
  HEAP32[$176 >> 2] = $4; //@line 8278
  $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 8279
  HEAP32[$177 >> 2] = $6; //@line 8280
  $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 8281
  HEAP32[$178 >> 2] = $8; //@line 8282
  $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 8283
  HEAP32[$179 >> 2] = $32; //@line 8284
  $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 8285
  HEAP32[$180 >> 2] = $10; //@line 8286
  $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 8287
  HEAP32[$181 >> 2] = $12; //@line 8288
  $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 8289
  HEAP32[$182 >> 2] = $16; //@line 8290
  $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 8291
  HEAP32[$183 >> 2] = $18; //@line 8292
  $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 8293
  HEAP32[$184 >> 2] = $20; //@line 8294
  $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 8295
  HEAP32[$185 >> 2] = $22; //@line 8296
  $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 8297
  HEAP32[$186 >> 2] = $24; //@line 8298
  $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 8299
  $$expand_i1_val35 = $26 & 1; //@line 8300
  HEAP8[$187 >> 0] = $$expand_i1_val35; //@line 8301
  $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 8302
  HEAP32[$188 >> 2] = $28; //@line 8303
  $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 8304
  HEAP32[$189 >> 2] = $30; //@line 8305
  $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 8306
  HEAP32[$190 >> 2] = $34; //@line 8307
  $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 8308
  HEAP32[$191 >> 2] = $36; //@line 8309
  $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 8310
  HEAP32[$192 >> 2] = $174; //@line 8311
  sp = STACKTOP; //@line 8312
  return;
 }
}
function _equeue_dispatch__async_cb_281($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$067 = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val16 = 0, $$reg2mem$0 = 0, $$sink$in$i$i = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $142 = 0, $144 = 0, $147 = 0, $150 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $161 = 0, $164 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $66 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8344
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8346
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8348
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8350
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8352
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8354
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8356
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8358
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8362
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8364
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 8366
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8368
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 8370
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 8373
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 8375
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 8377
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 8379
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 8381
 $$reg2mem$0 = HEAP32[$0 + 32 >> 2] | 0; //@line 8382
 while (1) {
  if (!$$reg2mem$0) {
   label = 24; //@line 8386
   break;
  }
  $37 = $$reg2mem$0 + 8 | 0; //@line 8389
  $38 = HEAP32[$37 >> 2] | 0; //@line 8390
  $40 = HEAP32[$$reg2mem$0 + 32 >> 2] | 0; //@line 8392
  if ($40 | 0) {
   label = 3; //@line 8395
   break;
  }
  $64 = HEAP32[$$reg2mem$0 + 24 >> 2] | 0; //@line 8399
  if (($64 | 0) > -1) {
   label = 7; //@line 8402
   break;
  }
  $88 = $$reg2mem$0 + 4 | 0; //@line 8406
  $89 = HEAP8[$88 >> 0] | 0; //@line 8407
  HEAP8[$88 >> 0] = (($89 + 1 & 255) << HEAP32[$20 >> 2] | 0) == 0 ? 1 : ($89 & 255) + 1 & 255; //@line 8416
  $98 = HEAP32[$$reg2mem$0 + 28 >> 2] | 0; //@line 8418
  if ($98 | 0) {
   label = 12; //@line 8421
   break;
  }
  _equeue_mutex_lock($24); //@line 8424
  $121 = HEAP32[$22 >> 2] | 0; //@line 8425
  L8 : do {
   if (!$121) {
    $$02329$i$i = $22; //@line 8429
    label = 21; //@line 8430
   } else {
    $123 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 8432
    $$025$i$i = $22; //@line 8433
    $125 = $121; //@line 8433
    while (1) {
     $124 = HEAP32[$125 >> 2] | 0; //@line 8435
     if ($124 >>> 0 >= $123 >>> 0) {
      break;
     }
     $127 = $125 + 8 | 0; //@line 8440
     $128 = HEAP32[$127 >> 2] | 0; //@line 8441
     if (!$128) {
      $$02329$i$i = $127; //@line 8444
      label = 21; //@line 8445
      break L8;
     } else {
      $$025$i$i = $127; //@line 8448
      $125 = $128; //@line 8448
     }
    }
    if (($124 | 0) == ($123 | 0)) {
     HEAP32[$$reg2mem$0 + 12 >> 2] = $125; //@line 8454
     $$02330$i$i = $$025$i$i; //@line 8457
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 8457
    } else {
     $$02329$i$i = $$025$i$i; //@line 8459
     label = 21; //@line 8460
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 8465
   HEAP32[$$reg2mem$0 + 12 >> 2] = 0; //@line 8467
   $$02330$i$i = $$02329$i$i; //@line 8468
   $$sink$in$i$i = $$02329$i$i; //@line 8468
  }
  HEAP32[$37 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 8471
  HEAP32[$$02330$i$i >> 2] = $$reg2mem$0; //@line 8472
  _equeue_mutex_unlock($24); //@line 8473
  $$reg2mem$0 = $38; //@line 8474
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 8478
  FUNCTION_TABLE_vi[$40 & 1023]($$reg2mem$0 + 36 | 0); //@line 8479
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 8482
   $43 = $ReallocAsyncCtx + 4 | 0; //@line 8483
   HEAP32[$43 >> 2] = $2; //@line 8484
   $44 = $ReallocAsyncCtx + 8 | 0; //@line 8485
   HEAP32[$44 >> 2] = $4; //@line 8486
   $45 = $ReallocAsyncCtx + 12 | 0; //@line 8487
   HEAP32[$45 >> 2] = $6; //@line 8488
   $46 = $ReallocAsyncCtx + 16 | 0; //@line 8489
   HEAP32[$46 >> 2] = $8; //@line 8490
   $47 = $ReallocAsyncCtx + 20 | 0; //@line 8491
   HEAP32[$47 >> 2] = $12; //@line 8492
   $48 = $ReallocAsyncCtx + 24 | 0; //@line 8493
   HEAP32[$48 >> 2] = $14; //@line 8494
   $49 = $ReallocAsyncCtx + 28 | 0; //@line 8495
   HEAP32[$49 >> 2] = $38; //@line 8496
   $50 = $ReallocAsyncCtx + 32 | 0; //@line 8497
   HEAP32[$50 >> 2] = $$reg2mem$0; //@line 8498
   $51 = $ReallocAsyncCtx + 36 | 0; //@line 8499
   HEAP32[$51 >> 2] = $18; //@line 8500
   $52 = $ReallocAsyncCtx + 40 | 0; //@line 8501
   HEAP32[$52 >> 2] = $20; //@line 8502
   $53 = $ReallocAsyncCtx + 44 | 0; //@line 8503
   HEAP32[$53 >> 2] = $22; //@line 8504
   $54 = $ReallocAsyncCtx + 48 | 0; //@line 8505
   HEAP32[$54 >> 2] = $24; //@line 8506
   $55 = $ReallocAsyncCtx + 52 | 0; //@line 8507
   HEAP32[$55 >> 2] = $37; //@line 8508
   $56 = $ReallocAsyncCtx + 56 | 0; //@line 8509
   HEAP32[$56 >> 2] = $26; //@line 8510
   $57 = $ReallocAsyncCtx + 60 | 0; //@line 8511
   $$expand_i1_val = $28 & 1; //@line 8512
   HEAP8[$57 >> 0] = $$expand_i1_val; //@line 8513
   $58 = $ReallocAsyncCtx + 64 | 0; //@line 8514
   HEAP32[$58 >> 2] = $30; //@line 8515
   $59 = $ReallocAsyncCtx + 68 | 0; //@line 8516
   HEAP32[$59 >> 2] = $32; //@line 8517
   $60 = $ReallocAsyncCtx + 72 | 0; //@line 8518
   HEAP32[$60 >> 2] = $10; //@line 8519
   $61 = $ReallocAsyncCtx + 76 | 0; //@line 8520
   HEAP32[$61 >> 2] = $34; //@line 8521
   $62 = $ReallocAsyncCtx + 80 | 0; //@line 8522
   HEAP32[$62 >> 2] = $36; //@line 8523
   sp = STACKTOP; //@line 8524
   return;
  }
  ___async_unwind = 0; //@line 8527
  HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 8528
  $43 = $ReallocAsyncCtx + 4 | 0; //@line 8529
  HEAP32[$43 >> 2] = $2; //@line 8530
  $44 = $ReallocAsyncCtx + 8 | 0; //@line 8531
  HEAP32[$44 >> 2] = $4; //@line 8532
  $45 = $ReallocAsyncCtx + 12 | 0; //@line 8533
  HEAP32[$45 >> 2] = $6; //@line 8534
  $46 = $ReallocAsyncCtx + 16 | 0; //@line 8535
  HEAP32[$46 >> 2] = $8; //@line 8536
  $47 = $ReallocAsyncCtx + 20 | 0; //@line 8537
  HEAP32[$47 >> 2] = $12; //@line 8538
  $48 = $ReallocAsyncCtx + 24 | 0; //@line 8539
  HEAP32[$48 >> 2] = $14; //@line 8540
  $49 = $ReallocAsyncCtx + 28 | 0; //@line 8541
  HEAP32[$49 >> 2] = $38; //@line 8542
  $50 = $ReallocAsyncCtx + 32 | 0; //@line 8543
  HEAP32[$50 >> 2] = $$reg2mem$0; //@line 8544
  $51 = $ReallocAsyncCtx + 36 | 0; //@line 8545
  HEAP32[$51 >> 2] = $18; //@line 8546
  $52 = $ReallocAsyncCtx + 40 | 0; //@line 8547
  HEAP32[$52 >> 2] = $20; //@line 8548
  $53 = $ReallocAsyncCtx + 44 | 0; //@line 8549
  HEAP32[$53 >> 2] = $22; //@line 8550
  $54 = $ReallocAsyncCtx + 48 | 0; //@line 8551
  HEAP32[$54 >> 2] = $24; //@line 8552
  $55 = $ReallocAsyncCtx + 52 | 0; //@line 8553
  HEAP32[$55 >> 2] = $37; //@line 8554
  $56 = $ReallocAsyncCtx + 56 | 0; //@line 8555
  HEAP32[$56 >> 2] = $26; //@line 8556
  $57 = $ReallocAsyncCtx + 60 | 0; //@line 8557
  $$expand_i1_val = $28 & 1; //@line 8558
  HEAP8[$57 >> 0] = $$expand_i1_val; //@line 8559
  $58 = $ReallocAsyncCtx + 64 | 0; //@line 8560
  HEAP32[$58 >> 2] = $30; //@line 8561
  $59 = $ReallocAsyncCtx + 68 | 0; //@line 8562
  HEAP32[$59 >> 2] = $32; //@line 8563
  $60 = $ReallocAsyncCtx + 72 | 0; //@line 8564
  HEAP32[$60 >> 2] = $10; //@line 8565
  $61 = $ReallocAsyncCtx + 76 | 0; //@line 8566
  HEAP32[$61 >> 2] = $34; //@line 8567
  $62 = $ReallocAsyncCtx + 80 | 0; //@line 8568
  HEAP32[$62 >> 2] = $36; //@line 8569
  sp = STACKTOP; //@line 8570
  return;
 } else if ((label | 0) == 7) {
  $66 = $$reg2mem$0 + 20 | 0; //@line 8574
  HEAP32[$66 >> 2] = (HEAP32[$66 >> 2] | 0) + $64; //@line 8577
  $69 = _equeue_tick() | 0; //@line 8578
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 8579
  _equeue_enqueue($18, $$reg2mem$0, $69) | 0; //@line 8580
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 8583
   $70 = $ReallocAsyncCtx4 + 4 | 0; //@line 8584
   HEAP32[$70 >> 2] = $2; //@line 8585
   $71 = $ReallocAsyncCtx4 + 8 | 0; //@line 8586
   HEAP32[$71 >> 2] = $4; //@line 8587
   $72 = $ReallocAsyncCtx4 + 12 | 0; //@line 8588
   HEAP32[$72 >> 2] = $6; //@line 8589
   $73 = $ReallocAsyncCtx4 + 16 | 0; //@line 8590
   HEAP32[$73 >> 2] = $8; //@line 8591
   $74 = $ReallocAsyncCtx4 + 20 | 0; //@line 8592
   HEAP32[$74 >> 2] = $10; //@line 8593
   $75 = $ReallocAsyncCtx4 + 24 | 0; //@line 8594
   HEAP32[$75 >> 2] = $12; //@line 8595
   $76 = $ReallocAsyncCtx4 + 28 | 0; //@line 8596
   HEAP32[$76 >> 2] = $14; //@line 8597
   $77 = $ReallocAsyncCtx4 + 32 | 0; //@line 8598
   HEAP32[$77 >> 2] = $38; //@line 8599
   $78 = $ReallocAsyncCtx4 + 36 | 0; //@line 8600
   HEAP32[$78 >> 2] = $18; //@line 8601
   $79 = $ReallocAsyncCtx4 + 40 | 0; //@line 8602
   HEAP32[$79 >> 2] = $20; //@line 8603
   $80 = $ReallocAsyncCtx4 + 44 | 0; //@line 8604
   HEAP32[$80 >> 2] = $22; //@line 8605
   $81 = $ReallocAsyncCtx4 + 48 | 0; //@line 8606
   HEAP32[$81 >> 2] = $24; //@line 8607
   $82 = $ReallocAsyncCtx4 + 52 | 0; //@line 8608
   HEAP32[$82 >> 2] = $26; //@line 8609
   $83 = $ReallocAsyncCtx4 + 56 | 0; //@line 8610
   $$expand_i1_val12 = $28 & 1; //@line 8611
   HEAP8[$83 >> 0] = $$expand_i1_val12; //@line 8612
   $84 = $ReallocAsyncCtx4 + 60 | 0; //@line 8613
   HEAP32[$84 >> 2] = $30; //@line 8614
   $85 = $ReallocAsyncCtx4 + 64 | 0; //@line 8615
   HEAP32[$85 >> 2] = $32; //@line 8616
   $86 = $ReallocAsyncCtx4 + 68 | 0; //@line 8617
   HEAP32[$86 >> 2] = $34; //@line 8618
   $87 = $ReallocAsyncCtx4 + 72 | 0; //@line 8619
   HEAP32[$87 >> 2] = $36; //@line 8620
   sp = STACKTOP; //@line 8621
   return;
  }
  ___async_unwind = 0; //@line 8624
  HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 8625
  $70 = $ReallocAsyncCtx4 + 4 | 0; //@line 8626
  HEAP32[$70 >> 2] = $2; //@line 8627
  $71 = $ReallocAsyncCtx4 + 8 | 0; //@line 8628
  HEAP32[$71 >> 2] = $4; //@line 8629
  $72 = $ReallocAsyncCtx4 + 12 | 0; //@line 8630
  HEAP32[$72 >> 2] = $6; //@line 8631
  $73 = $ReallocAsyncCtx4 + 16 | 0; //@line 8632
  HEAP32[$73 >> 2] = $8; //@line 8633
  $74 = $ReallocAsyncCtx4 + 20 | 0; //@line 8634
  HEAP32[$74 >> 2] = $10; //@line 8635
  $75 = $ReallocAsyncCtx4 + 24 | 0; //@line 8636
  HEAP32[$75 >> 2] = $12; //@line 8637
  $76 = $ReallocAsyncCtx4 + 28 | 0; //@line 8638
  HEAP32[$76 >> 2] = $14; //@line 8639
  $77 = $ReallocAsyncCtx4 + 32 | 0; //@line 8640
  HEAP32[$77 >> 2] = $38; //@line 8641
  $78 = $ReallocAsyncCtx4 + 36 | 0; //@line 8642
  HEAP32[$78 >> 2] = $18; //@line 8643
  $79 = $ReallocAsyncCtx4 + 40 | 0; //@line 8644
  HEAP32[$79 >> 2] = $20; //@line 8645
  $80 = $ReallocAsyncCtx4 + 44 | 0; //@line 8646
  HEAP32[$80 >> 2] = $22; //@line 8647
  $81 = $ReallocAsyncCtx4 + 48 | 0; //@line 8648
  HEAP32[$81 >> 2] = $24; //@line 8649
  $82 = $ReallocAsyncCtx4 + 52 | 0; //@line 8650
  HEAP32[$82 >> 2] = $26; //@line 8651
  $83 = $ReallocAsyncCtx4 + 56 | 0; //@line 8652
  $$expand_i1_val12 = $28 & 1; //@line 8653
  HEAP8[$83 >> 0] = $$expand_i1_val12; //@line 8654
  $84 = $ReallocAsyncCtx4 + 60 | 0; //@line 8655
  HEAP32[$84 >> 2] = $30; //@line 8656
  $85 = $ReallocAsyncCtx4 + 64 | 0; //@line 8657
  HEAP32[$85 >> 2] = $32; //@line 8658
  $86 = $ReallocAsyncCtx4 + 68 | 0; //@line 8659
  HEAP32[$86 >> 2] = $34; //@line 8660
  $87 = $ReallocAsyncCtx4 + 72 | 0; //@line 8661
  HEAP32[$87 >> 2] = $36; //@line 8662
  sp = STACKTOP; //@line 8663
  return;
 } else if ((label | 0) == 12) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 8668
  FUNCTION_TABLE_vi[$98 & 1023]($$reg2mem$0 + 36 | 0); //@line 8669
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 8672
   $101 = $ReallocAsyncCtx2 + 4 | 0; //@line 8673
   HEAP32[$101 >> 2] = $2; //@line 8674
   $102 = $ReallocAsyncCtx2 + 8 | 0; //@line 8675
   HEAP32[$102 >> 2] = $4; //@line 8676
   $103 = $ReallocAsyncCtx2 + 12 | 0; //@line 8677
   HEAP32[$103 >> 2] = $6; //@line 8678
   $104 = $ReallocAsyncCtx2 + 16 | 0; //@line 8679
   HEAP32[$104 >> 2] = $8; //@line 8680
   $105 = $ReallocAsyncCtx2 + 20 | 0; //@line 8681
   HEAP32[$105 >> 2] = $12; //@line 8682
   $106 = $ReallocAsyncCtx2 + 24 | 0; //@line 8683
   HEAP32[$106 >> 2] = $14; //@line 8684
   $107 = $ReallocAsyncCtx2 + 28 | 0; //@line 8685
   HEAP32[$107 >> 2] = $38; //@line 8686
   $108 = $ReallocAsyncCtx2 + 32 | 0; //@line 8687
   HEAP32[$108 >> 2] = $18; //@line 8688
   $109 = $ReallocAsyncCtx2 + 36 | 0; //@line 8689
   HEAP32[$109 >> 2] = $20; //@line 8690
   $110 = $ReallocAsyncCtx2 + 40 | 0; //@line 8691
   HEAP32[$110 >> 2] = $22; //@line 8692
   $111 = $ReallocAsyncCtx2 + 44 | 0; //@line 8693
   HEAP32[$111 >> 2] = $24; //@line 8694
   $112 = $ReallocAsyncCtx2 + 48 | 0; //@line 8695
   HEAP32[$112 >> 2] = $26; //@line 8696
   $113 = $ReallocAsyncCtx2 + 52 | 0; //@line 8697
   $$expand_i1_val14 = $28 & 1; //@line 8698
   HEAP8[$113 >> 0] = $$expand_i1_val14; //@line 8699
   $114 = $ReallocAsyncCtx2 + 56 | 0; //@line 8700
   HEAP32[$114 >> 2] = $30; //@line 8701
   $115 = $ReallocAsyncCtx2 + 60 | 0; //@line 8702
   HEAP32[$115 >> 2] = $32; //@line 8703
   $116 = $ReallocAsyncCtx2 + 64 | 0; //@line 8704
   HEAP32[$116 >> 2] = $10; //@line 8705
   $117 = $ReallocAsyncCtx2 + 68 | 0; //@line 8706
   HEAP32[$117 >> 2] = $34; //@line 8707
   $118 = $ReallocAsyncCtx2 + 72 | 0; //@line 8708
   HEAP32[$118 >> 2] = $36; //@line 8709
   $119 = $ReallocAsyncCtx2 + 76 | 0; //@line 8710
   HEAP32[$119 >> 2] = $$reg2mem$0; //@line 8711
   $120 = $ReallocAsyncCtx2 + 80 | 0; //@line 8712
   HEAP32[$120 >> 2] = $37; //@line 8713
   sp = STACKTOP; //@line 8714
   return;
  }
  ___async_unwind = 0; //@line 8717
  HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 8718
  $101 = $ReallocAsyncCtx2 + 4 | 0; //@line 8719
  HEAP32[$101 >> 2] = $2; //@line 8720
  $102 = $ReallocAsyncCtx2 + 8 | 0; //@line 8721
  HEAP32[$102 >> 2] = $4; //@line 8722
  $103 = $ReallocAsyncCtx2 + 12 | 0; //@line 8723
  HEAP32[$103 >> 2] = $6; //@line 8724
  $104 = $ReallocAsyncCtx2 + 16 | 0; //@line 8725
  HEAP32[$104 >> 2] = $8; //@line 8726
  $105 = $ReallocAsyncCtx2 + 20 | 0; //@line 8727
  HEAP32[$105 >> 2] = $12; //@line 8728
  $106 = $ReallocAsyncCtx2 + 24 | 0; //@line 8729
  HEAP32[$106 >> 2] = $14; //@line 8730
  $107 = $ReallocAsyncCtx2 + 28 | 0; //@line 8731
  HEAP32[$107 >> 2] = $38; //@line 8732
  $108 = $ReallocAsyncCtx2 + 32 | 0; //@line 8733
  HEAP32[$108 >> 2] = $18; //@line 8734
  $109 = $ReallocAsyncCtx2 + 36 | 0; //@line 8735
  HEAP32[$109 >> 2] = $20; //@line 8736
  $110 = $ReallocAsyncCtx2 + 40 | 0; //@line 8737
  HEAP32[$110 >> 2] = $22; //@line 8738
  $111 = $ReallocAsyncCtx2 + 44 | 0; //@line 8739
  HEAP32[$111 >> 2] = $24; //@line 8740
  $112 = $ReallocAsyncCtx2 + 48 | 0; //@line 8741
  HEAP32[$112 >> 2] = $26; //@line 8742
  $113 = $ReallocAsyncCtx2 + 52 | 0; //@line 8743
  $$expand_i1_val14 = $28 & 1; //@line 8744
  HEAP8[$113 >> 0] = $$expand_i1_val14; //@line 8745
  $114 = $ReallocAsyncCtx2 + 56 | 0; //@line 8746
  HEAP32[$114 >> 2] = $30; //@line 8747
  $115 = $ReallocAsyncCtx2 + 60 | 0; //@line 8748
  HEAP32[$115 >> 2] = $32; //@line 8749
  $116 = $ReallocAsyncCtx2 + 64 | 0; //@line 8750
  HEAP32[$116 >> 2] = $10; //@line 8751
  $117 = $ReallocAsyncCtx2 + 68 | 0; //@line 8752
  HEAP32[$117 >> 2] = $34; //@line 8753
  $118 = $ReallocAsyncCtx2 + 72 | 0; //@line 8754
  HEAP32[$118 >> 2] = $36; //@line 8755
  $119 = $ReallocAsyncCtx2 + 76 | 0; //@line 8756
  HEAP32[$119 >> 2] = $$reg2mem$0; //@line 8757
  $120 = $ReallocAsyncCtx2 + 80 | 0; //@line 8758
  HEAP32[$120 >> 2] = $37; //@line 8759
  sp = STACKTOP; //@line 8760
  return;
 } else if ((label | 0) == 24) {
  $136 = _equeue_tick() | 0; //@line 8764
  if ($28) {
   $137 = $26 - $136 | 0; //@line 8766
   if (($137 | 0) < 1) {
    $139 = $18 + 40 | 0; //@line 8769
    if (HEAP32[$139 >> 2] | 0) {
     _equeue_mutex_lock($4); //@line 8773
     $142 = HEAP32[$139 >> 2] | 0; //@line 8774
     if ($142 | 0) {
      $144 = HEAP32[$2 >> 2] | 0; //@line 8777
      if ($144 | 0) {
       $147 = HEAP32[$18 + 44 >> 2] | 0; //@line 8781
       $150 = (HEAP32[$144 + 20 >> 2] | 0) - $136 | 0; //@line 8784
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 8788
       FUNCTION_TABLE_vii[$142 & 15]($147, $150 & ~($150 >> 31)); //@line 8789
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 8792
        $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 8793
        HEAP32[$154 >> 2] = $10; //@line 8794
        $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 8795
        HEAP32[$155 >> 2] = $4; //@line 8796
        $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 8797
        HEAP32[$156 >> 2] = $8; //@line 8798
        sp = STACKTOP; //@line 8799
        return;
       }
       ___async_unwind = 0; //@line 8802
       HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 8803
       $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 8804
       HEAP32[$154 >> 2] = $10; //@line 8805
       $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 8806
       HEAP32[$155 >> 2] = $4; //@line 8807
       $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 8808
       HEAP32[$156 >> 2] = $8; //@line 8809
       sp = STACKTOP; //@line 8810
       return;
      }
     }
     HEAP8[$10 >> 0] = 1; //@line 8814
     _equeue_mutex_unlock($4); //@line 8815
    }
    HEAP8[$8 >> 0] = 0; //@line 8817
    return;
   } else {
    $$067 = $137; //@line 8820
   }
  } else {
   $$067 = -1; //@line 8823
  }
  _equeue_mutex_lock($4); //@line 8825
  $157 = HEAP32[$2 >> 2] | 0; //@line 8826
  if (!$157) {
   $$2 = $$067; //@line 8829
  } else {
   $161 = (HEAP32[$157 + 20 >> 2] | 0) - $136 | 0; //@line 8833
   $164 = $161 & ~($161 >> 31); //@line 8836
   $$2 = $164 >>> 0 < $$067 >>> 0 ? $164 : $$067; //@line 8839
  }
  _equeue_mutex_unlock($4); //@line 8841
  _equeue_sema_wait($6, $$2) | 0; //@line 8842
  do {
   if (HEAP8[$8 >> 0] | 0) {
    _equeue_mutex_lock($4); //@line 8847
    if (!(HEAP8[$8 >> 0] | 0)) {
     _equeue_mutex_unlock($4); //@line 8851
     break;
    }
    HEAP8[$8 >> 0] = 0; //@line 8854
    _equeue_mutex_unlock($4); //@line 8855
    return;
   }
  } while (0);
  $170 = _equeue_tick() | 0; //@line 8859
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 8860
  _wait_ms(20); //@line 8861
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 8864
   $171 = $ReallocAsyncCtx5 + 4 | 0; //@line 8865
   HEAP32[$171 >> 2] = $2; //@line 8866
   $172 = $ReallocAsyncCtx5 + 8 | 0; //@line 8867
   HEAP32[$172 >> 2] = $4; //@line 8868
   $173 = $ReallocAsyncCtx5 + 12 | 0; //@line 8869
   HEAP32[$173 >> 2] = $6; //@line 8870
   $174 = $ReallocAsyncCtx5 + 16 | 0; //@line 8871
   HEAP32[$174 >> 2] = $8; //@line 8872
   $175 = $ReallocAsyncCtx5 + 20 | 0; //@line 8873
   HEAP32[$175 >> 2] = $10; //@line 8874
   $176 = $ReallocAsyncCtx5 + 24 | 0; //@line 8875
   HEAP32[$176 >> 2] = $12; //@line 8876
   $177 = $ReallocAsyncCtx5 + 28 | 0; //@line 8877
   HEAP32[$177 >> 2] = $14; //@line 8878
   $178 = $ReallocAsyncCtx5 + 32 | 0; //@line 8879
   HEAP32[$178 >> 2] = $18; //@line 8880
   $179 = $ReallocAsyncCtx5 + 36 | 0; //@line 8881
   HEAP32[$179 >> 2] = $20; //@line 8882
   $180 = $ReallocAsyncCtx5 + 40 | 0; //@line 8883
   HEAP32[$180 >> 2] = $22; //@line 8884
   $181 = $ReallocAsyncCtx5 + 44 | 0; //@line 8885
   HEAP32[$181 >> 2] = $24; //@line 8886
   $182 = $ReallocAsyncCtx5 + 48 | 0; //@line 8887
   HEAP32[$182 >> 2] = $26; //@line 8888
   $183 = $ReallocAsyncCtx5 + 52 | 0; //@line 8889
   $$expand_i1_val16 = $28 & 1; //@line 8890
   HEAP8[$183 >> 0] = $$expand_i1_val16; //@line 8891
   $184 = $ReallocAsyncCtx5 + 56 | 0; //@line 8892
   HEAP32[$184 >> 2] = $30; //@line 8893
   $185 = $ReallocAsyncCtx5 + 60 | 0; //@line 8894
   HEAP32[$185 >> 2] = $32; //@line 8895
   $186 = $ReallocAsyncCtx5 + 64 | 0; //@line 8896
   HEAP32[$186 >> 2] = $34; //@line 8897
   $187 = $ReallocAsyncCtx5 + 68 | 0; //@line 8898
   HEAP32[$187 >> 2] = $36; //@line 8899
   $188 = $ReallocAsyncCtx5 + 72 | 0; //@line 8900
   HEAP32[$188 >> 2] = $170; //@line 8901
   sp = STACKTOP; //@line 8902
   return;
  }
  ___async_unwind = 0; //@line 8905
  HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 8906
  $171 = $ReallocAsyncCtx5 + 4 | 0; //@line 8907
  HEAP32[$171 >> 2] = $2; //@line 8908
  $172 = $ReallocAsyncCtx5 + 8 | 0; //@line 8909
  HEAP32[$172 >> 2] = $4; //@line 8910
  $173 = $ReallocAsyncCtx5 + 12 | 0; //@line 8911
  HEAP32[$173 >> 2] = $6; //@line 8912
  $174 = $ReallocAsyncCtx5 + 16 | 0; //@line 8913
  HEAP32[$174 >> 2] = $8; //@line 8914
  $175 = $ReallocAsyncCtx5 + 20 | 0; //@line 8915
  HEAP32[$175 >> 2] = $10; //@line 8916
  $176 = $ReallocAsyncCtx5 + 24 | 0; //@line 8917
  HEAP32[$176 >> 2] = $12; //@line 8918
  $177 = $ReallocAsyncCtx5 + 28 | 0; //@line 8919
  HEAP32[$177 >> 2] = $14; //@line 8920
  $178 = $ReallocAsyncCtx5 + 32 | 0; //@line 8921
  HEAP32[$178 >> 2] = $18; //@line 8922
  $179 = $ReallocAsyncCtx5 + 36 | 0; //@line 8923
  HEAP32[$179 >> 2] = $20; //@line 8924
  $180 = $ReallocAsyncCtx5 + 40 | 0; //@line 8925
  HEAP32[$180 >> 2] = $22; //@line 8926
  $181 = $ReallocAsyncCtx5 + 44 | 0; //@line 8927
  HEAP32[$181 >> 2] = $24; //@line 8928
  $182 = $ReallocAsyncCtx5 + 48 | 0; //@line 8929
  HEAP32[$182 >> 2] = $26; //@line 8930
  $183 = $ReallocAsyncCtx5 + 52 | 0; //@line 8931
  $$expand_i1_val16 = $28 & 1; //@line 8932
  HEAP8[$183 >> 0] = $$expand_i1_val16; //@line 8933
  $184 = $ReallocAsyncCtx5 + 56 | 0; //@line 8934
  HEAP32[$184 >> 2] = $30; //@line 8935
  $185 = $ReallocAsyncCtx5 + 60 | 0; //@line 8936
  HEAP32[$185 >> 2] = $32; //@line 8937
  $186 = $ReallocAsyncCtx5 + 64 | 0; //@line 8938
  HEAP32[$186 >> 2] = $34; //@line 8939
  $187 = $ReallocAsyncCtx5 + 68 | 0; //@line 8940
  HEAP32[$187 >> 2] = $36; //@line 8941
  $188 = $ReallocAsyncCtx5 + 72 | 0; //@line 8942
  HEAP32[$188 >> 2] = $170; //@line 8943
  sp = STACKTOP; //@line 8944
  return;
 }
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 12659
 STACKTOP = STACKTOP + 64 | 0; //@line 12660
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 12660
 $5 = sp + 16 | 0; //@line 12661
 $6 = sp; //@line 12662
 $7 = sp + 24 | 0; //@line 12663
 $8 = sp + 8 | 0; //@line 12664
 $9 = sp + 20 | 0; //@line 12665
 HEAP32[$5 >> 2] = $1; //@line 12666
 $10 = ($0 | 0) != 0; //@line 12667
 $11 = $7 + 40 | 0; //@line 12668
 $12 = $11; //@line 12669
 $13 = $7 + 39 | 0; //@line 12670
 $14 = $8 + 4 | 0; //@line 12671
 $$0243 = 0; //@line 12672
 $$0247 = 0; //@line 12672
 $$0269 = 0; //@line 12672
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 12681
     $$1248 = -1; //@line 12682
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 12686
     break;
    }
   } else {
    $$1248 = $$0247; //@line 12690
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 12693
  $21 = HEAP8[$20 >> 0] | 0; //@line 12694
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 12697
   break;
  } else {
   $23 = $21; //@line 12700
   $25 = $20; //@line 12700
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 12705
     $27 = $25; //@line 12705
     label = 9; //@line 12706
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 12711
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 12718
   HEAP32[$5 >> 2] = $24; //@line 12719
   $23 = HEAP8[$24 >> 0] | 0; //@line 12721
   $25 = $24; //@line 12721
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 12726
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 12731
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 12734
     $27 = $27 + 2 | 0; //@line 12735
     HEAP32[$5 >> 2] = $27; //@line 12736
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 12743
      break;
     } else {
      $$0249303 = $30; //@line 12740
      label = 9; //@line 12741
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 12751
  if ($10) {
   _out_670($0, $20, $36); //@line 12753
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 12757
   $$0247 = $$1248; //@line 12757
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 12765
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 12766
  if ($43) {
   $$0253 = -1; //@line 12768
   $$1270 = $$0269; //@line 12768
   $$sink = 1; //@line 12768
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 12778
    $$1270 = 1; //@line 12778
    $$sink = 3; //@line 12778
   } else {
    $$0253 = -1; //@line 12780
    $$1270 = $$0269; //@line 12780
    $$sink = 1; //@line 12780
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 12783
  HEAP32[$5 >> 2] = $51; //@line 12784
  $52 = HEAP8[$51 >> 0] | 0; //@line 12785
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 12787
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 12794
   $$lcssa291 = $52; //@line 12794
   $$lcssa292 = $51; //@line 12794
  } else {
   $$0262309 = 0; //@line 12796
   $60 = $52; //@line 12796
   $65 = $51; //@line 12796
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 12801
    $64 = $65 + 1 | 0; //@line 12802
    HEAP32[$5 >> 2] = $64; //@line 12803
    $66 = HEAP8[$64 >> 0] | 0; //@line 12804
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 12806
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 12813
     $$lcssa291 = $66; //@line 12813
     $$lcssa292 = $64; //@line 12813
     break;
    } else {
     $$0262309 = $63; //@line 12816
     $60 = $66; //@line 12816
     $65 = $64; //@line 12816
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 12828
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 12830
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 12835
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 12840
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 12852
     $$2271 = 1; //@line 12852
     $storemerge274 = $79 + 3 | 0; //@line 12852
    } else {
     label = 23; //@line 12854
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 12858
    if ($$1270 | 0) {
     $$0 = -1; //@line 12861
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12876
     $106 = HEAP32[$105 >> 2] | 0; //@line 12877
     HEAP32[$2 >> 2] = $105 + 4; //@line 12879
     $363 = $106; //@line 12880
    } else {
     $363 = 0; //@line 12882
    }
    $$0259 = $363; //@line 12886
    $$2271 = 0; //@line 12886
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 12886
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 12888
   $109 = ($$0259 | 0) < 0; //@line 12889
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 12894
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 12894
   $$3272 = $$2271; //@line 12894
   $115 = $storemerge274; //@line 12894
  } else {
   $112 = _getint_671($5) | 0; //@line 12896
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 12899
    break;
   }
   $$1260 = $112; //@line 12903
   $$1263 = $$0262$lcssa; //@line 12903
   $$3272 = $$1270; //@line 12903
   $115 = HEAP32[$5 >> 2] | 0; //@line 12903
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 12914
     $156 = _getint_671($5) | 0; //@line 12915
     $$0254 = $156; //@line 12917
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 12917
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 12926
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 12931
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 12936
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 12943
      $144 = $125 + 4 | 0; //@line 12947
      HEAP32[$5 >> 2] = $144; //@line 12948
      $$0254 = $140; //@line 12949
      $$pre345 = $144; //@line 12949
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 12955
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12970
     $152 = HEAP32[$151 >> 2] | 0; //@line 12971
     HEAP32[$2 >> 2] = $151 + 4; //@line 12973
     $364 = $152; //@line 12974
    } else {
     $364 = 0; //@line 12976
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 12979
    HEAP32[$5 >> 2] = $154; //@line 12980
    $$0254 = $364; //@line 12981
    $$pre345 = $154; //@line 12981
   } else {
    $$0254 = -1; //@line 12983
    $$pre345 = $115; //@line 12983
   }
  } while (0);
  $$0252 = 0; //@line 12986
  $158 = $$pre345; //@line 12986
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 12993
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 12996
   HEAP32[$5 >> 2] = $158; //@line 12997
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (16e3 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 13002
   $168 = $167 & 255; //@line 13003
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 13007
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 13014
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 13018
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 13022
     break L1;
    } else {
     label = 50; //@line 13025
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 13030
     $176 = $3 + ($$0253 << 3) | 0; //@line 13032
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 13037
     $182 = $6; //@line 13038
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 13040
     HEAP32[$182 + 4 >> 2] = $181; //@line 13043
     label = 50; //@line 13044
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 13048
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 13051
    $187 = HEAP32[$5 >> 2] | 0; //@line 13053
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 13057
   if ($10) {
    $187 = $158; //@line 13059
   } else {
    $$0243 = 0; //@line 13061
    $$0247 = $$1248; //@line 13061
    $$0269 = $$3272; //@line 13061
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 13067
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 13073
  $196 = $$1263 & -65537; //@line 13076
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 13077
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 13085
       $$0243 = 0; //@line 13086
       $$0247 = $$1248; //@line 13086
       $$0269 = $$3272; //@line 13086
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 13092
       $$0243 = 0; //@line 13093
       $$0247 = $$1248; //@line 13093
       $$0269 = $$3272; //@line 13093
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 13101
       HEAP32[$208 >> 2] = $$1248; //@line 13103
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 13106
       $$0243 = 0; //@line 13107
       $$0247 = $$1248; //@line 13107
       $$0269 = $$3272; //@line 13107
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 13114
       $$0243 = 0; //@line 13115
       $$0247 = $$1248; //@line 13115
       $$0269 = $$3272; //@line 13115
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 13122
       $$0243 = 0; //@line 13123
       $$0247 = $$1248; //@line 13123
       $$0269 = $$3272; //@line 13123
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 13129
       $$0243 = 0; //@line 13130
       $$0247 = $$1248; //@line 13130
       $$0269 = $$3272; //@line 13130
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 13138
       HEAP32[$220 >> 2] = $$1248; //@line 13140
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 13143
       $$0243 = 0; //@line 13144
       $$0247 = $$1248; //@line 13144
       $$0269 = $$3272; //@line 13144
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 13149
       $$0247 = $$1248; //@line 13149
       $$0269 = $$3272; //@line 13149
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 13159
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 13159
     $$3265 = $$1263$ | 8; //@line 13159
     label = 62; //@line 13160
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 13164
     $$1255 = $$0254; //@line 13164
     $$3265 = $$1263$; //@line 13164
     label = 62; //@line 13165
     break;
    }
   case 111:
    {
     $242 = $6; //@line 13169
     $244 = HEAP32[$242 >> 2] | 0; //@line 13171
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 13174
     $248 = _fmt_o($244, $247, $11) | 0; //@line 13175
     $252 = $12 - $248 | 0; //@line 13179
     $$0228 = $248; //@line 13184
     $$1233 = 0; //@line 13184
     $$1238 = 16464; //@line 13184
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 13184
     $$4266 = $$1263$; //@line 13184
     $281 = $244; //@line 13184
     $283 = $247; //@line 13184
     label = 68; //@line 13185
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 13189
     $258 = HEAP32[$256 >> 2] | 0; //@line 13191
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 13194
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 13197
      $264 = tempRet0; //@line 13198
      $265 = $6; //@line 13199
      HEAP32[$265 >> 2] = $263; //@line 13201
      HEAP32[$265 + 4 >> 2] = $264; //@line 13204
      $$0232 = 1; //@line 13205
      $$0237 = 16464; //@line 13205
      $275 = $263; //@line 13205
      $276 = $264; //@line 13205
      label = 67; //@line 13206
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 13218
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 16464 : 16466 : 16465; //@line 13218
      $275 = $258; //@line 13218
      $276 = $261; //@line 13218
      label = 67; //@line 13219
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 13225
     $$0232 = 0; //@line 13231
     $$0237 = 16464; //@line 13231
     $275 = HEAP32[$197 >> 2] | 0; //@line 13231
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 13231
     label = 67; //@line 13232
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 13243
     $$2 = $13; //@line 13244
     $$2234 = 0; //@line 13244
     $$2239 = 16464; //@line 13244
     $$2251 = $11; //@line 13244
     $$5 = 1; //@line 13244
     $$6268 = $196; //@line 13244
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 13251
     label = 72; //@line 13252
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 13256
     $$1 = $302 | 0 ? $302 : 16474; //@line 13259
     label = 72; //@line 13260
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 13270
     HEAP32[$14 >> 2] = 0; //@line 13271
     HEAP32[$6 >> 2] = $8; //@line 13272
     $$4258354 = -1; //@line 13273
     $365 = $8; //@line 13273
     label = 76; //@line 13274
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 13278
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 13281
      $$0240$lcssa356 = 0; //@line 13282
      label = 85; //@line 13283
     } else {
      $$4258354 = $$0254; //@line 13285
      $365 = $$pre348; //@line 13285
      label = 76; //@line 13286
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 13293
     $$0247 = $$1248; //@line 13293
     $$0269 = $$3272; //@line 13293
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 13298
     $$2234 = 0; //@line 13298
     $$2239 = 16464; //@line 13298
     $$2251 = $11; //@line 13298
     $$5 = $$0254; //@line 13298
     $$6268 = $$1263$; //@line 13298
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 13304
    $227 = $6; //@line 13305
    $229 = HEAP32[$227 >> 2] | 0; //@line 13307
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 13310
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 13312
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 13318
    $$0228 = $234; //@line 13323
    $$1233 = $or$cond278 ? 0 : 2; //@line 13323
    $$1238 = $or$cond278 ? 16464 : 16464 + ($$1236 >> 4) | 0; //@line 13323
    $$2256 = $$1255; //@line 13323
    $$4266 = $$3265; //@line 13323
    $281 = $229; //@line 13323
    $283 = $232; //@line 13323
    label = 68; //@line 13324
   } else if ((label | 0) == 67) {
    label = 0; //@line 13327
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 13329
    $$1233 = $$0232; //@line 13329
    $$1238 = $$0237; //@line 13329
    $$2256 = $$0254; //@line 13329
    $$4266 = $$1263$; //@line 13329
    $281 = $275; //@line 13329
    $283 = $276; //@line 13329
    label = 68; //@line 13330
   } else if ((label | 0) == 72) {
    label = 0; //@line 13333
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 13334
    $306 = ($305 | 0) == 0; //@line 13335
    $$2 = $$1; //@line 13342
    $$2234 = 0; //@line 13342
    $$2239 = 16464; //@line 13342
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 13342
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 13342
    $$6268 = $196; //@line 13342
   } else if ((label | 0) == 76) {
    label = 0; //@line 13345
    $$0229316 = $365; //@line 13346
    $$0240315 = 0; //@line 13346
    $$1244314 = 0; //@line 13346
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 13348
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 13351
      $$2245 = $$1244314; //@line 13351
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 13354
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 13360
      $$2245 = $320; //@line 13360
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 13364
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 13367
      $$0240315 = $325; //@line 13367
      $$1244314 = $320; //@line 13367
     } else {
      $$0240$lcssa = $325; //@line 13369
      $$2245 = $320; //@line 13369
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 13375
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 13378
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 13381
     label = 85; //@line 13382
    } else {
     $$1230327 = $365; //@line 13384
     $$1241326 = 0; //@line 13384
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 13386
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 13389
       label = 85; //@line 13390
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 13393
      $$1241326 = $331 + $$1241326 | 0; //@line 13394
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 13397
       label = 85; //@line 13398
       break L97;
      }
      _out_670($0, $9, $331); //@line 13402
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 13407
       label = 85; //@line 13408
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 13405
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 13416
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 13422
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 13424
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 13429
   $$2 = $or$cond ? $$0228 : $11; //@line 13434
   $$2234 = $$1233; //@line 13434
   $$2239 = $$1238; //@line 13434
   $$2251 = $11; //@line 13434
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 13434
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 13434
  } else if ((label | 0) == 85) {
   label = 0; //@line 13437
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 13439
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 13442
   $$0247 = $$1248; //@line 13442
   $$0269 = $$3272; //@line 13442
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 13447
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 13449
  $345 = $$$5 + $$2234 | 0; //@line 13450
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 13452
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 13453
  _out_670($0, $$2239, $$2234); //@line 13454
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 13456
  _pad_676($0, 48, $$$5, $343, 0); //@line 13457
  _out_670($0, $$2, $343); //@line 13458
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 13460
  $$0243 = $$2261; //@line 13461
  $$0247 = $$1248; //@line 13461
  $$0269 = $$3272; //@line 13461
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 13469
    } else {
     $$2242302 = 1; //@line 13471
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 13474
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 13477
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 13481
      $356 = $$2242302 + 1 | 0; //@line 13482
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 13485
      } else {
       $$2242$lcssa = $356; //@line 13487
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 13493
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 13499
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 13505
       } else {
        $$0 = 1; //@line 13507
        break;
       }
      }
     } else {
      $$0 = 1; //@line 13512
     }
    }
   } else {
    $$0 = $$1248; //@line 13516
   }
  }
 } while (0);
 STACKTOP = sp; //@line 13520
 return $$0 | 0; //@line 13520
}
function _mbed_vtracef($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$0199 = 0, $$1$off0 = 0, $$10 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$13 = 0, $$18 = 0, $$3 = 0, $$3147 = 0, $$3147168 = 0, $$3154 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$6 = 0, $$6150 = 0, $$9 = 0, $$lobit = 0, $$pre = 0, $$sink = 0, $125 = 0, $126 = 0, $151 = 0, $157 = 0, $168 = 0, $169 = 0, $171 = 0, $181 = 0, $182 = 0, $184 = 0, $186 = 0, $194 = 0, $201 = 0, $202 = 0, $204 = 0, $206 = 0, $209 = 0, $34 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $54 = 0, $55 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $82 = 0, $89 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $extract$t159 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4791
 STACKTOP = STACKTOP + 96 | 0; //@line 4792
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 4792
 $vararg_buffer23 = sp + 72 | 0; //@line 4793
 $vararg_buffer20 = sp + 64 | 0; //@line 4794
 $vararg_buffer18 = sp + 56 | 0; //@line 4795
 $vararg_buffer15 = sp + 48 | 0; //@line 4796
 $vararg_buffer12 = sp + 40 | 0; //@line 4797
 $vararg_buffer9 = sp + 32 | 0; //@line 4798
 $vararg_buffer6 = sp + 24 | 0; //@line 4799
 $vararg_buffer3 = sp + 16 | 0; //@line 4800
 $vararg_buffer1 = sp + 8 | 0; //@line 4801
 $vararg_buffer = sp; //@line 4802
 $4 = sp + 80 | 0; //@line 4803
 $5 = HEAP32[176] | 0; //@line 4804
 do {
  if ($5 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(104, sp) | 0; //@line 4808
   FUNCTION_TABLE_v[$5 & 15](); //@line 4809
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 141; //@line 4812
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4814
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer23; //@line 4816
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer23; //@line 4818
    HEAP8[$AsyncCtx + 16 >> 0] = $0; //@line 4820
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 4822
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 4824
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer9; //@line 4826
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer9; //@line 4828
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer12; //@line 4830
    HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer12; //@line 4832
    HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer15; //@line 4834
    HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer15; //@line 4836
    HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer18; //@line 4838
    HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer18; //@line 4840
    HEAP32[$AsyncCtx + 60 >> 2] = $4; //@line 4842
    HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer20; //@line 4844
    HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer20; //@line 4846
    HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer6; //@line 4848
    HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer6; //@line 4850
    HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer1; //@line 4852
    HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer1; //@line 4854
    HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer3; //@line 4856
    HEAP32[$AsyncCtx + 92 >> 2] = $vararg_buffer3; //@line 4858
    HEAP32[$AsyncCtx + 96 >> 2] = $vararg_buffer; //@line 4860
    HEAP32[$AsyncCtx + 100 >> 2] = $vararg_buffer; //@line 4862
    sp = STACKTOP; //@line 4863
    STACKTOP = sp; //@line 4864
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4866
    HEAP32[178] = (HEAP32[178] | 0) + 1; //@line 4869
    break;
   }
  }
 } while (0);
 $34 = HEAP32[167] | 0; //@line 4874
 do {
  if ($34 | 0) {
   HEAP8[$34 >> 0] = 0; //@line 4878
   do {
    if ($0 << 24 >> 24 > -1 & ($1 | 0) != 0) {
     $38 = HEAP32[164] | 0; //@line 4884
     if (HEAP8[$38 >> 0] | 0) {
      if (_strstr($38, $1) | 0) {
       $$0$i = 1; //@line 4891
       break;
      }
     }
     $43 = HEAP32[165] | 0; //@line 4895
     if (!(HEAP8[$43 >> 0] | 0)) {
      label = 11; //@line 4899
     } else {
      if (!(_strstr($43, $1) | 0)) {
       $$0$i = 1; //@line 4904
      } else {
       label = 11; //@line 4906
      }
     }
    } else {
     label = 11; //@line 4910
    }
   } while (0);
   if ((label | 0) == 11) {
    $$0$i = 0; //@line 4914
   }
   if (!((HEAP32[174] | 0) != 0 & ((($1 | 0) == 0 | (($2 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[171] = HEAP32[169]; //@line 4926
    break;
   }
   $54 = HEAPU8[652] | 0; //@line 4930
   $55 = $0 & 255; //@line 4931
   if ($55 & 31 & $54 | 0) {
    $59 = $54 & 64; //@line 4936
    $$lobit = $59 >>> 6; //@line 4937
    $60 = $$lobit & 255; //@line 4938
    $64 = ($54 & 32 | 0) == 0; //@line 4942
    $65 = HEAP32[168] | 0; //@line 4943
    $66 = HEAP32[167] | 0; //@line 4944
    $67 = $0 << 24 >> 24 == 1; //@line 4945
    do {
     if ($67 | ($54 & 128 | 0) != 0) {
      $AsyncCtx64 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4949
      _vsnprintf($66, $65, $2, $3) | 0; //@line 4950
      if (___async) {
       HEAP32[$AsyncCtx64 >> 2] = 142; //@line 4953
       HEAP8[$AsyncCtx64 + 4 >> 0] = $67 & 1; //@line 4956
       sp = STACKTOP; //@line 4957
       STACKTOP = sp; //@line 4958
       return;
      }
      _emscripten_free_async_context($AsyncCtx64 | 0); //@line 4960
      $69 = HEAP32[175] | 0; //@line 4961
      if (!($67 & ($69 | 0) != 0)) {
       $73 = HEAP32[174] | 0; //@line 4965
       $74 = HEAP32[167] | 0; //@line 4966
       $AsyncCtx34 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4967
       FUNCTION_TABLE_vi[$73 & 1023]($74); //@line 4968
       if (___async) {
        HEAP32[$AsyncCtx34 >> 2] = 145; //@line 4971
        sp = STACKTOP; //@line 4972
        STACKTOP = sp; //@line 4973
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx34 | 0); //@line 4975
        break;
       }
      }
      $71 = HEAP32[167] | 0; //@line 4979
      $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4980
      FUNCTION_TABLE_vi[$69 & 1023]($71); //@line 4981
      if (___async) {
       HEAP32[$AsyncCtx27 >> 2] = 143; //@line 4984
       sp = STACKTOP; //@line 4985
       STACKTOP = sp; //@line 4986
       return;
      }
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 4988
      $72 = HEAP32[175] | 0; //@line 4989
      $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4990
      FUNCTION_TABLE_vi[$72 & 1023](12260); //@line 4991
      if (___async) {
       HEAP32[$AsyncCtx30 >> 2] = 144; //@line 4994
       sp = STACKTOP; //@line 4995
       STACKTOP = sp; //@line 4996
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx30 | 0); //@line 4998
       break;
      }
     } else {
      if (!$59) {
       $$1$off0 = ($$lobit | 0) != 0; //@line 5005
       $$1143 = $66; //@line 5005
       $$1145 = $65; //@line 5005
       $$3154 = 0; //@line 5005
       label = 38; //@line 5006
      } else {
       if ($64) {
        $$0142 = $66; //@line 5009
        $$0144 = $65; //@line 5009
       } else {
        $76 = _snprintf($66, $65, 12262, $vararg_buffer) | 0; //@line 5011
        $$ = ($76 | 0) >= ($65 | 0) ? 0 : $76; //@line 5013
        $78 = ($$ | 0) > 0; //@line 5014
        $$0142 = $78 ? $66 + $$ | 0 : $66; //@line 5019
        $$0144 = $65 - ($78 ? $$ : 0) | 0; //@line 5019
       }
       if (($$0144 | 0) > 0) {
        $82 = $55 + -2 | 0; //@line 5023
        switch ($82 >>> 1 | $82 << 31 | 0) {
        case 0:
         {
          $$sink = 12280; //@line 5029
          label = 35; //@line 5030
          break;
         }
        case 1:
         {
          $$sink = 12286; //@line 5034
          label = 35; //@line 5035
          break;
         }
        case 3:
         {
          $$sink = 12274; //@line 5039
          label = 35; //@line 5040
          break;
         }
        case 7:
         {
          $$sink = 12268; //@line 5044
          label = 35; //@line 5045
          break;
         }
        default:
         {
          $$0141 = 0; //@line 5049
          $$1152 = 0; //@line 5049
         }
        }
        if ((label | 0) == 35) {
         HEAP32[$vararg_buffer1 >> 2] = $$sink; //@line 5053
         $$0141 = $60 & 1; //@line 5056
         $$1152 = _snprintf($$0142, $$0144, 12292, $vararg_buffer1) | 0; //@line 5056
        }
        $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 5059
        $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 5061
        if (($$1152$ | 0) > 0) {
         $89 = $$0141 << 24 >> 24 == 0; //@line 5063
         $$1$off0 = $extract$t159; //@line 5068
         $$1143 = $89 ? $$0142 : $$0142 + $$1152$ | 0; //@line 5068
         $$1145 = $$0144 - ($89 ? 0 : $$1152$) | 0; //@line 5068
         $$3154 = $$1152; //@line 5068
         label = 38; //@line 5069
        } else {
         $$1$off0 = $extract$t159; //@line 5071
         $$1143 = $$0142; //@line 5071
         $$1145 = $$0144; //@line 5071
         $$3154 = $$1152$; //@line 5071
         label = 38; //@line 5072
        }
       }
      }
      L54 : do {
       if ((label | 0) == 38) {
        do {
         if (($$1145 | 0) > 0 & (HEAP32[172] | 0) != 0) {
          HEAP32[$4 >> 2] = HEAP32[$3 >> 2]; //@line 5085
          $AsyncCtx60 = _emscripten_alloc_async_context(104, sp) | 0; //@line 5086
          $95 = _vsnprintf(0, 0, $2, $4) | 0; //@line 5087
          if (___async) {
           HEAP32[$AsyncCtx60 >> 2] = 146; //@line 5090
           HEAP8[$AsyncCtx60 + 4 >> 0] = $$1$off0 & 1; //@line 5093
           HEAP32[$AsyncCtx60 + 8 >> 2] = $vararg_buffer23; //@line 5095
           HEAP32[$AsyncCtx60 + 12 >> 2] = $vararg_buffer23; //@line 5097
           HEAP32[$AsyncCtx60 + 16 >> 2] = $2; //@line 5099
           HEAP32[$AsyncCtx60 + 20 >> 2] = $3; //@line 5101
           HEAP32[$AsyncCtx60 + 24 >> 2] = $vararg_buffer20; //@line 5103
           HEAP32[$AsyncCtx60 + 28 >> 2] = $vararg_buffer20; //@line 5105
           HEAP32[$AsyncCtx60 + 32 >> 2] = $vararg_buffer9; //@line 5107
           HEAP32[$AsyncCtx60 + 36 >> 2] = $1; //@line 5109
           HEAP32[$AsyncCtx60 + 40 >> 2] = $vararg_buffer9; //@line 5111
           HEAP32[$AsyncCtx60 + 44 >> 2] = $vararg_buffer12; //@line 5113
           HEAP32[$AsyncCtx60 + 48 >> 2] = $vararg_buffer12; //@line 5115
           HEAP32[$AsyncCtx60 + 52 >> 2] = $vararg_buffer15; //@line 5117
           HEAP32[$AsyncCtx60 + 56 >> 2] = $vararg_buffer15; //@line 5119
           HEAP32[$AsyncCtx60 + 60 >> 2] = $vararg_buffer18; //@line 5121
           HEAP32[$AsyncCtx60 + 64 >> 2] = $vararg_buffer18; //@line 5123
           HEAP32[$AsyncCtx60 + 68 >> 2] = $$1143; //@line 5125
           HEAP32[$AsyncCtx60 + 72 >> 2] = $$1145; //@line 5127
           HEAP32[$AsyncCtx60 + 76 >> 2] = $55; //@line 5129
           HEAP32[$AsyncCtx60 + 80 >> 2] = $vararg_buffer6; //@line 5131
           HEAP32[$AsyncCtx60 + 84 >> 2] = $vararg_buffer6; //@line 5133
           HEAP32[$AsyncCtx60 + 88 >> 2] = $vararg_buffer3; //@line 5135
           HEAP32[$AsyncCtx60 + 92 >> 2] = $vararg_buffer3; //@line 5137
           HEAP32[$AsyncCtx60 + 96 >> 2] = $4; //@line 5139
           HEAP32[$AsyncCtx60 + 100 >> 2] = $$3154; //@line 5141
           sp = STACKTOP; //@line 5142
           STACKTOP = sp; //@line 5143
           return;
          }
          _emscripten_free_async_context($AsyncCtx60 | 0); //@line 5145
          $125 = HEAP32[172] | 0; //@line 5150
          $AsyncCtx38 = _emscripten_alloc_async_context(100, sp) | 0; //@line 5151
          $126 = FUNCTION_TABLE_ii[$125 & 15](($$3154 | 0 ? 4 : 0) + $$3154 + $95 | 0) | 0; //@line 5152
          if (___async) {
           HEAP32[$AsyncCtx38 >> 2] = 147; //@line 5155
           HEAP8[$AsyncCtx38 + 4 >> 0] = $$1$off0 & 1; //@line 5158
           HEAP32[$AsyncCtx38 + 8 >> 2] = $vararg_buffer23; //@line 5160
           HEAP32[$AsyncCtx38 + 12 >> 2] = $vararg_buffer23; //@line 5162
           HEAP32[$AsyncCtx38 + 16 >> 2] = $2; //@line 5164
           HEAP32[$AsyncCtx38 + 20 >> 2] = $3; //@line 5166
           HEAP32[$AsyncCtx38 + 24 >> 2] = $vararg_buffer9; //@line 5168
           HEAP32[$AsyncCtx38 + 28 >> 2] = $1; //@line 5170
           HEAP32[$AsyncCtx38 + 32 >> 2] = $vararg_buffer9; //@line 5172
           HEAP32[$AsyncCtx38 + 36 >> 2] = $vararg_buffer12; //@line 5174
           HEAP32[$AsyncCtx38 + 40 >> 2] = $vararg_buffer12; //@line 5176
           HEAP32[$AsyncCtx38 + 44 >> 2] = $vararg_buffer15; //@line 5178
           HEAP32[$AsyncCtx38 + 48 >> 2] = $vararg_buffer15; //@line 5180
           HEAP32[$AsyncCtx38 + 52 >> 2] = $vararg_buffer18; //@line 5182
           HEAP32[$AsyncCtx38 + 56 >> 2] = $vararg_buffer18; //@line 5184
           HEAP32[$AsyncCtx38 + 60 >> 2] = $vararg_buffer20; //@line 5186
           HEAP32[$AsyncCtx38 + 64 >> 2] = $vararg_buffer20; //@line 5188
           HEAP32[$AsyncCtx38 + 68 >> 2] = $$1143; //@line 5190
           HEAP32[$AsyncCtx38 + 72 >> 2] = $$1145; //@line 5192
           HEAP32[$AsyncCtx38 + 76 >> 2] = $55; //@line 5194
           HEAP32[$AsyncCtx38 + 80 >> 2] = $vararg_buffer6; //@line 5196
           HEAP32[$AsyncCtx38 + 84 >> 2] = $vararg_buffer6; //@line 5198
           HEAP32[$AsyncCtx38 + 88 >> 2] = $vararg_buffer3; //@line 5200
           HEAP32[$AsyncCtx38 + 92 >> 2] = $vararg_buffer3; //@line 5202
           HEAP32[$AsyncCtx38 + 96 >> 2] = $4; //@line 5204
           sp = STACKTOP; //@line 5205
           STACKTOP = sp; //@line 5206
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx38 | 0); //@line 5208
           HEAP32[$vararg_buffer3 >> 2] = $126; //@line 5209
           $151 = _snprintf($$1143, $$1145, 12292, $vararg_buffer3) | 0; //@line 5210
           $$10 = ($151 | 0) >= ($$1145 | 0) ? 0 : $151; //@line 5212
           if (($$10 | 0) > 0) {
            $$3 = $$1143 + $$10 | 0; //@line 5217
            $$3147 = $$1145 - $$10 | 0; //@line 5217
            label = 44; //@line 5218
            break;
           } else {
            $$3147168 = $$1145; //@line 5221
            $$3169 = $$1143; //@line 5221
            break;
           }
          }
         } else {
          $$3 = $$1143; //@line 5226
          $$3147 = $$1145; //@line 5226
          label = 44; //@line 5227
         }
        } while (0);
        if ((label | 0) == 44) {
         if (($$3147 | 0) > 0) {
          $$3147168 = $$3147; //@line 5233
          $$3169 = $$3; //@line 5233
         } else {
          break;
         }
        }
        $157 = $55 + -2 | 0; //@line 5238
        switch ($157 >>> 1 | $157 << 31 | 0) {
        case 0:
         {
          HEAP32[$vararg_buffer6 >> 2] = $1; //@line 5244
          $$5156 = _snprintf($$3169, $$3147168, 12295, $vararg_buffer6) | 0; //@line 5246
          break;
         }
        case 1:
         {
          HEAP32[$vararg_buffer9 >> 2] = $1; //@line 5250
          $$5156 = _snprintf($$3169, $$3147168, 12310, $vararg_buffer9) | 0; //@line 5252
          break;
         }
        case 3:
         {
          HEAP32[$vararg_buffer12 >> 2] = $1; //@line 5256
          $$5156 = _snprintf($$3169, $$3147168, 12325, $vararg_buffer12) | 0; //@line 5258
          break;
         }
        case 7:
         {
          HEAP32[$vararg_buffer15 >> 2] = $1; //@line 5262
          $$5156 = _snprintf($$3169, $$3147168, 12340, $vararg_buffer15) | 0; //@line 5264
          break;
         }
        default:
         {
          $$5156 = _snprintf($$3169, $$3147168, 12355, $vararg_buffer18) | 0; //@line 5269
         }
        }
        $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 5273
        $168 = $$3169 + $$5156$ | 0; //@line 5275
        $169 = $$3147168 - $$5156$ | 0; //@line 5276
        if (($$5156$ | 0) > 0 & ($169 | 0) > 0) {
         $AsyncCtx56 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5280
         $171 = _vsnprintf($168, $169, $2, $3) | 0; //@line 5281
         if (___async) {
          HEAP32[$AsyncCtx56 >> 2] = 148; //@line 5284
          HEAP8[$AsyncCtx56 + 4 >> 0] = $$1$off0 & 1; //@line 5287
          HEAP32[$AsyncCtx56 + 8 >> 2] = $vararg_buffer23; //@line 5289
          HEAP32[$AsyncCtx56 + 12 >> 2] = $vararg_buffer23; //@line 5291
          HEAP32[$AsyncCtx56 + 16 >> 2] = $169; //@line 5293
          HEAP32[$AsyncCtx56 + 20 >> 2] = $168; //@line 5295
          HEAP32[$AsyncCtx56 + 24 >> 2] = $vararg_buffer20; //@line 5297
          HEAP32[$AsyncCtx56 + 28 >> 2] = $vararg_buffer20; //@line 5299
          sp = STACKTOP; //@line 5300
          STACKTOP = sp; //@line 5301
          return;
         }
         _emscripten_free_async_context($AsyncCtx56 | 0); //@line 5303
         $$13 = ($171 | 0) >= ($169 | 0) ? 0 : $171; //@line 5305
         $181 = $168 + $$13 | 0; //@line 5307
         $182 = $169 - $$13 | 0; //@line 5308
         if (($$13 | 0) > 0) {
          $184 = HEAP32[173] | 0; //@line 5311
          do {
           if (($182 | 0) > 0 & ($184 | 0) != 0) {
            $AsyncCtx42 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5316
            $186 = FUNCTION_TABLE_i[$184 & 7]() | 0; //@line 5317
            if (___async) {
             HEAP32[$AsyncCtx42 >> 2] = 149; //@line 5320
             HEAP32[$AsyncCtx42 + 4 >> 2] = $vararg_buffer20; //@line 5322
             HEAP32[$AsyncCtx42 + 8 >> 2] = $181; //@line 5324
             HEAP32[$AsyncCtx42 + 12 >> 2] = $182; //@line 5326
             HEAP32[$AsyncCtx42 + 16 >> 2] = $vararg_buffer20; //@line 5328
             HEAP8[$AsyncCtx42 + 20 >> 0] = $$1$off0 & 1; //@line 5331
             HEAP32[$AsyncCtx42 + 24 >> 2] = $vararg_buffer23; //@line 5333
             HEAP32[$AsyncCtx42 + 28 >> 2] = $vararg_buffer23; //@line 5335
             sp = STACKTOP; //@line 5336
             STACKTOP = sp; //@line 5337
             return;
            } else {
             _emscripten_free_async_context($AsyncCtx42 | 0); //@line 5339
             HEAP32[$vararg_buffer20 >> 2] = $186; //@line 5340
             $194 = _snprintf($181, $182, 12292, $vararg_buffer20) | 0; //@line 5341
             $$18 = ($194 | 0) >= ($182 | 0) ? 0 : $194; //@line 5343
             if (($$18 | 0) > 0) {
              $$6 = $181 + $$18 | 0; //@line 5348
              $$6150 = $182 - $$18 | 0; //@line 5348
              $$9 = $$18; //@line 5348
              break;
             } else {
              break L54;
             }
            }
           } else {
            $$6 = $181; //@line 5355
            $$6150 = $182; //@line 5355
            $$9 = $$13; //@line 5355
           }
          } while (0);
          if (!(($$9 | 0) < 1 | ($$6150 | 0) < 1 | $$1$off0 ^ 1)) {
           _snprintf($$6, $$6150, 12370, $vararg_buffer23) | 0; //@line 5364
          }
         }
        }
       }
      } while (0);
      $201 = HEAP32[174] | 0; //@line 5370
      $202 = HEAP32[167] | 0; //@line 5371
      $AsyncCtx45 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5372
      FUNCTION_TABLE_vi[$201 & 1023]($202); //@line 5373
      if (___async) {
       HEAP32[$AsyncCtx45 >> 2] = 150; //@line 5376
       sp = STACKTOP; //@line 5377
       STACKTOP = sp; //@line 5378
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx45 | 0); //@line 5380
       break;
      }
     }
    } while (0);
    HEAP32[171] = HEAP32[169]; //@line 5386
   }
  }
 } while (0);
 $204 = HEAP32[177] | 0; //@line 5390
 if (!$204) {
  STACKTOP = sp; //@line 5393
  return;
 }
 $206 = HEAP32[178] | 0; //@line 5395
 HEAP32[178] = 0; //@line 5396
 $AsyncCtx49 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5397
 FUNCTION_TABLE_v[$204 & 15](); //@line 5398
 if (___async) {
  HEAP32[$AsyncCtx49 >> 2] = 151; //@line 5401
  HEAP32[$AsyncCtx49 + 4 >> 2] = $206; //@line 5403
  sp = STACKTOP; //@line 5404
  STACKTOP = sp; //@line 5405
  return;
 }
 _emscripten_free_async_context($AsyncCtx49 | 0); //@line 5407
 if (($206 | 0) > 1) {
  $$0199 = $206; //@line 5410
 } else {
  STACKTOP = sp; //@line 5412
  return;
 }
 while (1) {
  $209 = $$0199 + -1 | 0; //@line 5415
  $$pre = HEAP32[177] | 0; //@line 5416
  $AsyncCtx52 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5417
  FUNCTION_TABLE_v[$$pre & 15](); //@line 5418
  if (___async) {
   label = 70; //@line 5421
   break;
  }
  _emscripten_free_async_context($AsyncCtx52 | 0); //@line 5424
  if (($$0199 | 0) > 2) {
   $$0199 = $209; //@line 5427
  } else {
   label = 72; //@line 5429
   break;
  }
 }
 if ((label | 0) == 70) {
  HEAP32[$AsyncCtx52 >> 2] = 152; //@line 5434
  HEAP32[$AsyncCtx52 + 4 >> 2] = $$0199; //@line 5436
  HEAP32[$AsyncCtx52 + 8 >> 2] = $209; //@line 5438
  sp = STACKTOP; //@line 5439
  STACKTOP = sp; //@line 5440
  return;
 } else if ((label | 0) == 72) {
  STACKTOP = sp; //@line 5443
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre = 0, $$pre$i$i = 0, $$pre$i$i25 = 0, $$pre$i$i38 = 0, $$pre$i$i54 = 0, $$pre$i$i70 = 0, $$pre123 = 0, $$pre124 = 0, $$pre125 = 0, $$pre126 = 0, $10 = 0, $110 = 0, $111 = 0, $123 = 0, $124 = 0, $131 = 0, $132 = 0, $134 = 0, $135 = 0, $138 = 0, $149 = 0, $150 = 0, $161 = 0, $162 = 0, $168 = 0, $169 = 0, $171 = 0, $172 = 0, $175 = 0, $185 = 0, $186 = 0, $196 = 0, $197 = 0, $2 = 0, $204 = 0, $209 = 0, $214 = 0, $23 = 0, $24 = 0, $3 = 0, $38 = 0, $39 = 0, $4 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $55 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $82 = 0, $83 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx41 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx5 = 0, $AsyncCtx50 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6113
 STACKTOP = STACKTOP + 16 | 0; //@line 6114
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6114
 $2 = sp; //@line 6115
 $3 = $2 + 12 | 0; //@line 6116
 HEAP32[$2 >> 2] = 180; //@line 6117
 HEAP32[$2 + 4 >> 2] = 0; //@line 6119
 HEAP32[$2 + 8 >> 2] = $0; //@line 6121
 HEAP32[$3 >> 2] = 808; //@line 6122
 $4 = $0 + 2368 | 0; //@line 6123
 do {
  if (($4 | 0) == ($2 | 0)) {
   $38 = 808; //@line 6127
   label = 10; //@line 6128
  } else {
   $6 = $0 + 2380 | 0; //@line 6130
   $7 = HEAP32[$6 >> 2] | 0; //@line 6131
   if (!$7) {
    $23 = 808; //@line 6134
   } else {
    $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 6137
    $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 6138
    FUNCTION_TABLE_vi[$10 & 1023]($4); //@line 6139
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 181; //@line 6142
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6144
     HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 6146
     HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 6148
     HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 6150
     HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 6152
     HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 6154
     HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 6156
     HEAP32[$AsyncCtx + 32 >> 2] = $2; //@line 6158
     HEAP32[$AsyncCtx + 36 >> 2] = $2; //@line 6160
     HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 6162
     sp = STACKTOP; //@line 6163
     STACKTOP = sp; //@line 6164
     return;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6166
    $$pre = HEAP32[$3 >> 2] | 0; //@line 6167
    if (!$$pre) {
     HEAP32[$6 >> 2] = 0; //@line 6170
     break;
    } else {
     $23 = $$pre; //@line 6173
    }
   }
   $24 = HEAP32[$23 + 4 >> 2] | 0; //@line 6177
   $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 6178
   FUNCTION_TABLE_vii[$24 & 15]($4, $2); //@line 6179
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 182; //@line 6182
    HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 6184
    HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 6186
    HEAP32[$AsyncCtx2 + 12 >> 2] = $4; //@line 6188
    HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 6190
    HEAP32[$AsyncCtx2 + 20 >> 2] = $3; //@line 6192
    HEAP32[$AsyncCtx2 + 24 >> 2] = $6; //@line 6194
    HEAP32[$AsyncCtx2 + 28 >> 2] = $2; //@line 6196
    HEAP32[$AsyncCtx2 + 32 >> 2] = $2; //@line 6198
    HEAP32[$AsyncCtx2 + 36 >> 2] = $2; //@line 6200
    HEAP32[$AsyncCtx2 + 40 >> 2] = $2; //@line 6202
    sp = STACKTOP; //@line 6203
    STACKTOP = sp; //@line 6204
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6206
    $$pre$i$i = HEAP32[$3 >> 2] | 0; //@line 6207
    HEAP32[$6 >> 2] = $$pre$i$i; //@line 6209
    if (!$$pre$i$i) {
     break;
    } else {
     $38 = $$pre$i$i; //@line 6214
     label = 10; //@line 6215
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 10) {
   $39 = HEAP32[$38 + 8 >> 2] | 0; //@line 6224
   $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 6225
   FUNCTION_TABLE_vi[$39 & 1023]($2); //@line 6226
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 183; //@line 6229
    HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 6231
    HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 6233
    HEAP32[$AsyncCtx5 + 12 >> 2] = $4; //@line 6235
    HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 6237
    HEAP32[$AsyncCtx5 + 20 >> 2] = $2; //@line 6239
    HEAP32[$AsyncCtx5 + 24 >> 2] = $2; //@line 6241
    HEAP32[$AsyncCtx5 + 28 >> 2] = $2; //@line 6243
    HEAP32[$AsyncCtx5 + 32 >> 2] = $2; //@line 6245
    sp = STACKTOP; //@line 6246
    STACKTOP = sp; //@line 6247
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6249
    break;
   }
  }
 } while (0);
 $48 = $2 + 12 | 0; //@line 6254
 HEAP32[$2 >> 2] = 6; //@line 6255
 HEAP32[$2 + 4 >> 2] = 0; //@line 6257
 HEAP32[$2 + 8 >> 2] = $0; //@line 6259
 HEAP32[$48 >> 2] = 820; //@line 6260
 $49 = $0 + 2400 | 0; //@line 6261
 do {
  if (($49 | 0) == ($2 | 0)) {
   $82 = 820; //@line 6265
   label = 22; //@line 6266
  } else {
   $51 = $0 + 2412 | 0; //@line 6268
   $52 = HEAP32[$51 >> 2] | 0; //@line 6269
   if (!$52) {
    $68 = 820; //@line 6272
   } else {
    $55 = HEAP32[$52 + 8 >> 2] | 0; //@line 6275
    $AsyncCtx8 = _emscripten_alloc_async_context(44, sp) | 0; //@line 6276
    FUNCTION_TABLE_vi[$55 & 1023]($49); //@line 6277
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 184; //@line 6280
     HEAP32[$AsyncCtx8 + 4 >> 2] = $0; //@line 6282
     HEAP32[$AsyncCtx8 + 8 >> 2] = $1; //@line 6284
     HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 6286
     HEAP32[$AsyncCtx8 + 16 >> 2] = $2; //@line 6288
     HEAP32[$AsyncCtx8 + 20 >> 2] = $51; //@line 6290
     HEAP32[$AsyncCtx8 + 24 >> 2] = $48; //@line 6292
     HEAP32[$AsyncCtx8 + 28 >> 2] = $49; //@line 6294
     HEAP32[$AsyncCtx8 + 32 >> 2] = $2; //@line 6296
     HEAP32[$AsyncCtx8 + 36 >> 2] = $2; //@line 6298
     HEAP32[$AsyncCtx8 + 40 >> 2] = $2; //@line 6300
     sp = STACKTOP; //@line 6301
     STACKTOP = sp; //@line 6302
     return;
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 6304
    $$pre123 = HEAP32[$48 >> 2] | 0; //@line 6305
    if (!$$pre123) {
     HEAP32[$51 >> 2] = 0; //@line 6308
     break;
    } else {
     $68 = $$pre123; //@line 6311
    }
   }
   $69 = HEAP32[$68 + 4 >> 2] | 0; //@line 6315
   $AsyncCtx11 = _emscripten_alloc_async_context(40, sp) | 0; //@line 6316
   FUNCTION_TABLE_vii[$69 & 15]($49, $2); //@line 6317
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 185; //@line 6320
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 6322
    HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 6324
    HEAP32[$AsyncCtx11 + 12 >> 2] = $4; //@line 6326
    HEAP32[$AsyncCtx11 + 16 >> 2] = $2; //@line 6328
    HEAP32[$AsyncCtx11 + 20 >> 2] = $48; //@line 6330
    HEAP32[$AsyncCtx11 + 24 >> 2] = $51; //@line 6332
    HEAP32[$AsyncCtx11 + 28 >> 2] = $2; //@line 6334
    HEAP32[$AsyncCtx11 + 32 >> 2] = $2; //@line 6336
    HEAP32[$AsyncCtx11 + 36 >> 2] = $2; //@line 6338
    sp = STACKTOP; //@line 6339
    STACKTOP = sp; //@line 6340
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6342
    $$pre$i$i25 = HEAP32[$48 >> 2] | 0; //@line 6343
    HEAP32[$51 >> 2] = $$pre$i$i25; //@line 6345
    if (!$$pre$i$i25) {
     break;
    } else {
     $82 = $$pre$i$i25; //@line 6350
     label = 22; //@line 6351
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 22) {
   $83 = HEAP32[$82 + 8 >> 2] | 0; //@line 6360
   $AsyncCtx14 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6361
   FUNCTION_TABLE_vi[$83 & 1023]($2); //@line 6362
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 186; //@line 6365
    HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 6367
    HEAP32[$AsyncCtx14 + 8 >> 2] = $1; //@line 6369
    HEAP32[$AsyncCtx14 + 12 >> 2] = $4; //@line 6371
    HEAP32[$AsyncCtx14 + 16 >> 2] = $2; //@line 6373
    HEAP32[$AsyncCtx14 + 20 >> 2] = $2; //@line 6375
    HEAP32[$AsyncCtx14 + 24 >> 2] = $2; //@line 6377
    HEAP32[$AsyncCtx14 + 28 >> 2] = $2; //@line 6379
    sp = STACKTOP; //@line 6380
    STACKTOP = sp; //@line 6381
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 6383
    break;
   }
  }
 } while (0);
 $91 = $2 + 12 | 0; //@line 6388
 HEAP32[$2 >> 2] = 187; //@line 6389
 HEAP32[$2 + 4 >> 2] = 0; //@line 6391
 HEAP32[$2 + 8 >> 2] = $0; //@line 6393
 HEAP32[$91 >> 2] = 808; //@line 6394
 $92 = $0 + 2432 | 0; //@line 6395
 do {
  if (($92 | 0) == ($2 | 0)) {
   $123 = 808; //@line 6399
   label = 34; //@line 6400
  } else {
   $94 = $0 + 2444 | 0; //@line 6402
   $95 = HEAP32[$94 >> 2] | 0; //@line 6403
   if (!$95) {
    $110 = 808; //@line 6406
   } else {
    $98 = HEAP32[$95 + 8 >> 2] | 0; //@line 6409
    $AsyncCtx17 = _emscripten_alloc_async_context(40, sp) | 0; //@line 6410
    FUNCTION_TABLE_vi[$98 & 1023]($92); //@line 6411
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 188; //@line 6414
     HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 6416
     HEAP32[$AsyncCtx17 + 8 >> 2] = $1; //@line 6418
     HEAP32[$AsyncCtx17 + 12 >> 2] = $4; //@line 6420
     HEAP32[$AsyncCtx17 + 16 >> 2] = $2; //@line 6422
     HEAP32[$AsyncCtx17 + 20 >> 2] = $94; //@line 6424
     HEAP32[$AsyncCtx17 + 24 >> 2] = $91; //@line 6426
     HEAP32[$AsyncCtx17 + 28 >> 2] = $92; //@line 6428
     HEAP32[$AsyncCtx17 + 32 >> 2] = $2; //@line 6430
     HEAP32[$AsyncCtx17 + 36 >> 2] = $2; //@line 6432
     sp = STACKTOP; //@line 6433
     STACKTOP = sp; //@line 6434
     return;
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 6436
    $$pre124 = HEAP32[$91 >> 2] | 0; //@line 6437
    if (!$$pre124) {
     HEAP32[$94 >> 2] = 0; //@line 6440
     break;
    } else {
     $110 = $$pre124; //@line 6443
    }
   }
   $111 = HEAP32[$110 + 4 >> 2] | 0; //@line 6447
   $AsyncCtx20 = _emscripten_alloc_async_context(36, sp) | 0; //@line 6448
   FUNCTION_TABLE_vii[$111 & 15]($92, $2); //@line 6449
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 189; //@line 6452
    HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 6454
    HEAP32[$AsyncCtx20 + 8 >> 2] = $1; //@line 6456
    HEAP32[$AsyncCtx20 + 12 >> 2] = $4; //@line 6458
    HEAP32[$AsyncCtx20 + 16 >> 2] = $2; //@line 6460
    HEAP32[$AsyncCtx20 + 20 >> 2] = $91; //@line 6462
    HEAP32[$AsyncCtx20 + 24 >> 2] = $94; //@line 6464
    HEAP32[$AsyncCtx20 + 28 >> 2] = $2; //@line 6466
    HEAP32[$AsyncCtx20 + 32 >> 2] = $2; //@line 6468
    sp = STACKTOP; //@line 6469
    STACKTOP = sp; //@line 6470
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 6472
    $$pre$i$i38 = HEAP32[$91 >> 2] | 0; //@line 6473
    HEAP32[$94 >> 2] = $$pre$i$i38; //@line 6475
    if (!$$pre$i$i38) {
     break;
    } else {
     $123 = $$pre$i$i38; //@line 6480
     label = 34; //@line 6481
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 34) {
   $124 = HEAP32[$123 + 8 >> 2] | 0; //@line 6490
   $AsyncCtx23 = _emscripten_alloc_async_context(28, sp) | 0; //@line 6491
   FUNCTION_TABLE_vi[$124 & 1023]($2); //@line 6492
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 190; //@line 6495
    HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 6497
    HEAP32[$AsyncCtx23 + 8 >> 2] = $1; //@line 6499
    HEAP32[$AsyncCtx23 + 12 >> 2] = $4; //@line 6501
    HEAP32[$AsyncCtx23 + 16 >> 2] = $2; //@line 6503
    HEAP32[$AsyncCtx23 + 20 >> 2] = $2; //@line 6505
    HEAP32[$AsyncCtx23 + 24 >> 2] = $2; //@line 6507
    sp = STACKTOP; //@line 6508
    STACKTOP = sp; //@line 6509
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6511
    break;
   }
  }
 } while (0);
 $131 = $2 + 12 | 0; //@line 6516
 HEAP32[$2 >> 2] = 191; //@line 6517
 HEAP32[$2 + 4 >> 2] = 0; //@line 6519
 HEAP32[$2 + 8 >> 2] = $0; //@line 6521
 HEAP32[$131 >> 2] = 808; //@line 6522
 $132 = $0 + 2384 | 0; //@line 6523
 do {
  if (($132 | 0) == ($2 | 0)) {
   $161 = 808; //@line 6527
   label = 46; //@line 6528
  } else {
   $134 = $0 + 2396 | 0; //@line 6530
   $135 = HEAP32[$134 >> 2] | 0; //@line 6531
   if (!$135) {
    $149 = 808; //@line 6534
   } else {
    $138 = HEAP32[$135 + 8 >> 2] | 0; //@line 6537
    $AsyncCtx26 = _emscripten_alloc_async_context(36, sp) | 0; //@line 6538
    FUNCTION_TABLE_vi[$138 & 1023]($132); //@line 6539
    if (___async) {
     HEAP32[$AsyncCtx26 >> 2] = 192; //@line 6542
     HEAP32[$AsyncCtx26 + 4 >> 2] = $0; //@line 6544
     HEAP32[$AsyncCtx26 + 8 >> 2] = $1; //@line 6546
     HEAP32[$AsyncCtx26 + 12 >> 2] = $4; //@line 6548
     HEAP32[$AsyncCtx26 + 16 >> 2] = $132; //@line 6550
     HEAP32[$AsyncCtx26 + 20 >> 2] = $2; //@line 6552
     HEAP32[$AsyncCtx26 + 24 >> 2] = $2; //@line 6554
     HEAP32[$AsyncCtx26 + 28 >> 2] = $131; //@line 6556
     HEAP32[$AsyncCtx26 + 32 >> 2] = $134; //@line 6558
     sp = STACKTOP; //@line 6559
     STACKTOP = sp; //@line 6560
     return;
    }
    _emscripten_free_async_context($AsyncCtx26 | 0); //@line 6562
    $$pre125 = HEAP32[$131 >> 2] | 0; //@line 6563
    if (!$$pre125) {
     HEAP32[$134 >> 2] = 0; //@line 6566
     break;
    } else {
     $149 = $$pre125; //@line 6569
    }
   }
   $150 = HEAP32[$149 + 4 >> 2] | 0; //@line 6573
   $AsyncCtx29 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6574
   FUNCTION_TABLE_vii[$150 & 15]($132, $2); //@line 6575
   if (___async) {
    HEAP32[$AsyncCtx29 >> 2] = 193; //@line 6578
    HEAP32[$AsyncCtx29 + 4 >> 2] = $0; //@line 6580
    HEAP32[$AsyncCtx29 + 8 >> 2] = $1; //@line 6582
    HEAP32[$AsyncCtx29 + 12 >> 2] = $4; //@line 6584
    HEAP32[$AsyncCtx29 + 16 >> 2] = $2; //@line 6586
    HEAP32[$AsyncCtx29 + 20 >> 2] = $2; //@line 6588
    HEAP32[$AsyncCtx29 + 24 >> 2] = $131; //@line 6590
    HEAP32[$AsyncCtx29 + 28 >> 2] = $134; //@line 6592
    sp = STACKTOP; //@line 6593
    STACKTOP = sp; //@line 6594
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx29 | 0); //@line 6596
    $$pre$i$i54 = HEAP32[$131 >> 2] | 0; //@line 6597
    HEAP32[$134 >> 2] = $$pre$i$i54; //@line 6599
    if (!$$pre$i$i54) {
     break;
    } else {
     $161 = $$pre$i$i54; //@line 6604
     label = 46; //@line 6605
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 46) {
   $162 = HEAP32[$161 + 8 >> 2] | 0; //@line 6614
   $AsyncCtx32 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6615
   FUNCTION_TABLE_vi[$162 & 1023]($2); //@line 6616
   if (___async) {
    HEAP32[$AsyncCtx32 >> 2] = 194; //@line 6619
    HEAP32[$AsyncCtx32 + 4 >> 2] = $0; //@line 6621
    HEAP32[$AsyncCtx32 + 8 >> 2] = $1; //@line 6623
    HEAP32[$AsyncCtx32 + 12 >> 2] = $4; //@line 6625
    HEAP32[$AsyncCtx32 + 16 >> 2] = $2; //@line 6627
    HEAP32[$AsyncCtx32 + 20 >> 2] = $2; //@line 6629
    sp = STACKTOP; //@line 6630
    STACKTOP = sp; //@line 6631
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx32 | 0); //@line 6633
    break;
   }
  }
 } while (0);
 $168 = $2 + 12 | 0; //@line 6638
 HEAP32[$2 >> 2] = 195; //@line 6639
 HEAP32[$2 + 4 >> 2] = 0; //@line 6641
 HEAP32[$2 + 8 >> 2] = $0; //@line 6643
 HEAP32[$168 >> 2] = 808; //@line 6644
 $169 = $0 + 2416 | 0; //@line 6645
 do {
  if (($169 | 0) == ($2 | 0)) {
   $196 = 808; //@line 6649
   label = 58; //@line 6650
  } else {
   $171 = $0 + 2428 | 0; //@line 6652
   $172 = HEAP32[$171 >> 2] | 0; //@line 6653
   if (!$172) {
    $185 = 808; //@line 6656
   } else {
    $175 = HEAP32[$172 + 8 >> 2] | 0; //@line 6659
    $AsyncCtx35 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6660
    FUNCTION_TABLE_vi[$175 & 1023]($169); //@line 6661
    if (___async) {
     HEAP32[$AsyncCtx35 >> 2] = 196; //@line 6664
     HEAP32[$AsyncCtx35 + 4 >> 2] = $168; //@line 6666
     HEAP32[$AsyncCtx35 + 8 >> 2] = $171; //@line 6668
     HEAP32[$AsyncCtx35 + 12 >> 2] = $169; //@line 6670
     HEAP32[$AsyncCtx35 + 16 >> 2] = $2; //@line 6672
     HEAP32[$AsyncCtx35 + 20 >> 2] = $0; //@line 6674
     HEAP32[$AsyncCtx35 + 24 >> 2] = $1; //@line 6676
     HEAP32[$AsyncCtx35 + 28 >> 2] = $4; //@line 6678
     sp = STACKTOP; //@line 6679
     STACKTOP = sp; //@line 6680
     return;
    }
    _emscripten_free_async_context($AsyncCtx35 | 0); //@line 6682
    $$pre126 = HEAP32[$168 >> 2] | 0; //@line 6683
    if (!$$pre126) {
     HEAP32[$171 >> 2] = 0; //@line 6686
     break;
    } else {
     $185 = $$pre126; //@line 6689
    }
   }
   $186 = HEAP32[$185 + 4 >> 2] | 0; //@line 6693
   $AsyncCtx38 = _emscripten_alloc_async_context(28, sp) | 0; //@line 6694
   FUNCTION_TABLE_vii[$186 & 15]($169, $2); //@line 6695
   if (___async) {
    HEAP32[$AsyncCtx38 >> 2] = 197; //@line 6698
    HEAP32[$AsyncCtx38 + 4 >> 2] = $168; //@line 6700
    HEAP32[$AsyncCtx38 + 8 >> 2] = $171; //@line 6702
    HEAP32[$AsyncCtx38 + 12 >> 2] = $2; //@line 6704
    HEAP32[$AsyncCtx38 + 16 >> 2] = $0; //@line 6706
    HEAP32[$AsyncCtx38 + 20 >> 2] = $1; //@line 6708
    HEAP32[$AsyncCtx38 + 24 >> 2] = $4; //@line 6710
    sp = STACKTOP; //@line 6711
    STACKTOP = sp; //@line 6712
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx38 | 0); //@line 6714
    $$pre$i$i70 = HEAP32[$168 >> 2] | 0; //@line 6715
    HEAP32[$171 >> 2] = $$pre$i$i70; //@line 6717
    if (!$$pre$i$i70) {
     break;
    } else {
     $196 = $$pre$i$i70; //@line 6722
     label = 58; //@line 6723
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 58) {
   $197 = HEAP32[$196 + 8 >> 2] | 0; //@line 6732
   $AsyncCtx41 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6733
   FUNCTION_TABLE_vi[$197 & 1023]($2); //@line 6734
   if (___async) {
    HEAP32[$AsyncCtx41 >> 2] = 198; //@line 6737
    HEAP32[$AsyncCtx41 + 4 >> 2] = $2; //@line 6739
    HEAP32[$AsyncCtx41 + 8 >> 2] = $0; //@line 6741
    HEAP32[$AsyncCtx41 + 12 >> 2] = $1; //@line 6743
    HEAP32[$AsyncCtx41 + 16 >> 2] = $4; //@line 6745
    sp = STACKTOP; //@line 6746
    STACKTOP = sp; //@line 6747
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx41 | 0); //@line 6749
    break;
   }
  }
 } while (0);
 __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($0, $1); //@line 6754
 $204 = HEAP32[(HEAP32[$1 >> 2] | 0) + 72 >> 2] | 0; //@line 6757
 $AsyncCtx44 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6758
 FUNCTION_TABLE_vi[$204 & 1023]($1); //@line 6759
 if (___async) {
  HEAP32[$AsyncCtx44 >> 2] = 199; //@line 6762
  HEAP32[$AsyncCtx44 + 4 >> 2] = $1; //@line 6764
  HEAP32[$AsyncCtx44 + 8 >> 2] = $4; //@line 6766
  HEAP32[$AsyncCtx44 + 12 >> 2] = $1; //@line 6768
  sp = STACKTOP; //@line 6769
  STACKTOP = sp; //@line 6770
  return;
 }
 _emscripten_free_async_context($AsyncCtx44 | 0); //@line 6772
 $209 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0; //@line 6774
 $AsyncCtx47 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6775
 FUNCTION_TABLE_vii[$209 & 15]($1, $4); //@line 6776
 if (___async) {
  HEAP32[$AsyncCtx47 >> 2] = 200; //@line 6779
  HEAP32[$AsyncCtx47 + 4 >> 2] = $1; //@line 6781
  HEAP32[$AsyncCtx47 + 8 >> 2] = $1; //@line 6783
  sp = STACKTOP; //@line 6784
  STACKTOP = sp; //@line 6785
  return;
 }
 _emscripten_free_async_context($AsyncCtx47 | 0); //@line 6787
 $214 = HEAP32[(HEAP32[$1 >> 2] | 0) + 76 >> 2] | 0; //@line 6790
 $AsyncCtx50 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6791
 FUNCTION_TABLE_vi[$214 & 1023]($1); //@line 6792
 if (___async) {
  HEAP32[$AsyncCtx50 >> 2] = 201; //@line 6795
  sp = STACKTOP; //@line 6796
  STACKTOP = sp; //@line 6797
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx50 | 0); //@line 6799
  STACKTOP = sp; //@line 6800
  return;
 }
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$063 = 0, $$06379 = 0, $$06380 = 0, $$1$off0 = 0, $$160 = 0, $$162 = 0, $$164 = 0, $$byval_copy74 = 0, $$pre$phi$sinkZ2D = 0, $10 = 0, $114 = 0, $115 = 0, $121 = 0, $122 = 0, $123 = 0, $125 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $139 = 0, $141 = 0, $142 = 0, $149 = 0, $150 = 0, $158 = 0, $159 = 0, $16 = 0, $164 = 0, $165 = 0, $17 = 0, $172 = 0, $173 = 0, $179 = 0, $203 = 0, $221 = 0, $223 = 0, $231 = 0, $233 = 0, $41 = 0, $42 = 0, $48 = 0, $66 = 0, $67 = 0, $7 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx53 = 0, $AsyncCtx57 = 0, $AsyncCtx9 = 0, $addconv = 0, $sext$i = 0, $storemerge$in = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 13976
 STACKTOP = STACKTOP + 64 | 0; //@line 13977
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 13977
 $$byval_copy74 = sp + 48 | 0; //@line 13978
 $vararg_buffer5 = sp + 24 | 0; //@line 13979
 $vararg_buffer3 = sp + 16 | 0; //@line 13980
 $vararg_buffer1 = sp + 8 | 0; //@line 13981
 $7 = sp + 40 | 0; //@line 13983
 $8 = sp + 56 | 0; //@line 13984
 $9 = sp + 32 | 0; //@line 13985
 HEAP8[$8 >> 0] = $3; //@line 13986
 $10 = $0 + 4 | 0; //@line 13987
 $16 = __ZN7LoRaPHY15get_max_payloadEhb($10, HEAP8[$0 + 2010 >> 0] | 0, (HEAP8[$0 + 1173 >> 0] | 0) != 0) | 0; //@line 13993
 $17 = $2 & 65535; //@line 13994
 $sext$i = ($17 << 16) + -851968 | 0; //@line 13996
 if (((($sext$i | 0) < 0 ? 0 : $sext$i >> 16) | 0) > ($16 & 255 | 0)) {
  _mbed_tracef(2, 13263, 13382, sp); //@line 14003
 }
 HEAP32[$9 >> 2] = 0; //@line 14005
 $41 = HEAPU8[$1 + ($3 + 1 & 255) >> 0] << 8 | HEAPU8[$1 + ($3 & 255) >> 0] | HEAPU8[$1 + ($3 + 2 & 255) >> 0] << 16; //@line 14024
 $42 = $3 + 4 << 24 >> 24; //@line 14025
 HEAP8[$8 >> 0] = $42; //@line 14026
 $48 = $41 | HEAPU8[$1 + ($3 + 3 & 255) >> 0] << 24; //@line 14032
 L4 : do {
  if (($48 | 0) == (HEAP32[$0 + 1756 >> 2] | 0)) {
   $$1$off0 = 0; //@line 14041
   $$160 = $0 + 1732 | 0; //@line 14041
   $$162 = $0 + 1716 | 0; //@line 14041
   $$164 = 0; //@line 14041
   $storemerge$in = $0 + 1764 | 0; //@line 14041
  } else {
   $$06379 = HEAP32[$0 + 1988 >> 2] | 0; //@line 14044
   L7 : do {
    if ($$06379 | 0) {
     $$06380 = $$06379; //@line 14048
     while (1) {
      if (($48 | 0) == (HEAP32[$$06380 >> 2] | 0)) {
       break;
      }
      $$063 = HEAP32[$$06380 + 40 >> 2] | 0; //@line 14056
      if (!$$063) {
       break L7;
      } else {
       $$06380 = $$063; //@line 14061
      }
     }
     $$1$off0 = 1; //@line 14067
     $$160 = $$06380 + 20 | 0; //@line 14067
     $$162 = $$06380 + 4 | 0; //@line 14067
     $$164 = $$06380; //@line 14067
     $storemerge$in = $$06380 + 36 | 0; //@line 14067
     break L4;
    }
   } while (0);
   HEAP32[$0 + 2004 >> 2] = 11; //@line 14072
   do {
    if (HEAP8[$0 + 1177 >> 0] | 0) {
     $66 = HEAP32[$0 + 1992 >> 2] | 0; //@line 14079
     HEAP32[$7 >> 2] = 404; //@line 14080
     HEAP32[$7 + 4 >> 2] = 0; //@line 14082
     $AsyncCtx29 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14083
     HEAP32[$$byval_copy74 >> 2] = HEAP32[$7 >> 2]; //@line 14084
     HEAP32[$$byval_copy74 + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 14084
     $67 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($66, $0, $$byval_copy74) | 0; //@line 14085
     if (___async) {
      HEAP32[$AsyncCtx29 >> 2] = 405; //@line 14088
      HEAP32[$AsyncCtx29 + 4 >> 2] = $7; //@line 14090
      HEAP32[$AsyncCtx29 + 8 >> 2] = $9; //@line 14092
      sp = STACKTOP; //@line 14093
      STACKTOP = sp; //@line 14094
      return;
     }
     _emscripten_free_async_context($AsyncCtx29 | 0); //@line 14096
     if (!$67) {
      $AsyncCtx57 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14099
      _mbed_assert_internal(13121, 13130, 231); //@line 14100
      if (___async) {
       HEAP32[$AsyncCtx57 >> 2] = 406; //@line 14103
       HEAP32[$AsyncCtx57 + 4 >> 2] = $7; //@line 14105
       HEAP32[$AsyncCtx57 + 8 >> 2] = $9; //@line 14107
       sp = STACKTOP; //@line 14108
       STACKTOP = sp; //@line 14109
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx57 | 0); //@line 14111
       break;
      }
     }
    }
   } while (0);
   STACKTOP = sp; //@line 14117
   return;
  }
 } while (0);
 HEAP32[$9 >> 2] = HEAP32[$storemerge$in >> 2]; //@line 14121
 HEAP8[$8 >> 0] = $3 + 5 << 24 >> 24; //@line 14123
 $79 = HEAP8[$1 + ($42 & 255) >> 0] | 0; //@line 14126
 $80 = $79 & 15; //@line 14127
 $addconv = $80 + 8 << 24 >> 24; //@line 14128
 $AsyncCtx = _emscripten_alloc_async_context(100, sp) | 0; //@line 14129
 $81 = __ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1_($0, $1, $2, $8, $48, $9, $$162) | 0; //@line 14130
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 407; //@line 14133
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14135
  HEAP32[$AsyncCtx + 8 >> 2] = $7; //@line 14137
  HEAP32[$AsyncCtx + 12 >> 2] = $$164; //@line 14139
  HEAP8[$AsyncCtx + 16 >> 0] = $$1$off0 & 1; //@line 14142
  HEAP8[$AsyncCtx + 17 >> 0] = $79; //@line 14144
  HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 14146
  HEAP16[$AsyncCtx + 24 >> 1] = $5; //@line 14148
  HEAP8[$AsyncCtx + 26 >> 0] = $6; //@line 14150
  HEAP8[$AsyncCtx + 27 >> 0] = $4; //@line 14152
  HEAP32[$AsyncCtx + 28 >> 2] = $9; //@line 14154
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer5; //@line 14156
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer5; //@line 14158
  HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer5; //@line 14160
  HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer3; //@line 14162
  HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer3; //@line 14164
  HEAP32[$AsyncCtx + 52 >> 2] = $17; //@line 14166
  HEAP8[$AsyncCtx + 56 >> 0] = $addconv; //@line 14168
  HEAP32[$AsyncCtx + 60 >> 2] = $1; //@line 14170
  HEAP32[$AsyncCtx + 64 >> 2] = $10; //@line 14172
  HEAP8[$AsyncCtx + 68 >> 0] = $80; //@line 14174
  HEAP16[$AsyncCtx + 70 >> 1] = $2; //@line 14176
  HEAP32[$AsyncCtx + 72 >> 2] = $$162; //@line 14178
  HEAP32[$AsyncCtx + 76 >> 2] = $$160; //@line 14180
  HEAP32[$AsyncCtx + 80 >> 2] = $48; //@line 14182
  HEAP32[$AsyncCtx + 84 >> 2] = $8; //@line 14184
  HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer1; //@line 14186
  HEAP32[$AsyncCtx + 92 >> 2] = $vararg_buffer1; //@line 14188
  HEAP32[$AsyncCtx + 96 >> 2] = $vararg_buffer1; //@line 14190
  sp = STACKTOP; //@line 14191
  STACKTOP = sp; //@line 14192
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14194
 if (!$81) {
  _mbed_tracef(2, 13263, 13401, $vararg_buffer1); //@line 14196
  do {
   if (HEAP8[$0 + 1177 >> 0] | 0) {
    $114 = HEAP32[$0 + 1992 >> 2] | 0; //@line 14203
    HEAP32[$vararg_buffer1 >> 2] = 404; //@line 14204
    HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 14206
    $AsyncCtx25 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14207
    HEAP32[$$byval_copy74 >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 14208
    HEAP32[$$byval_copy74 + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 14208
    $115 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($114, $0, $$byval_copy74) | 0; //@line 14209
    if (___async) {
     HEAP32[$AsyncCtx25 >> 2] = 408; //@line 14212
     HEAP32[$AsyncCtx25 + 4 >> 2] = $vararg_buffer1; //@line 14214
     HEAP32[$AsyncCtx25 + 8 >> 2] = $9; //@line 14216
     sp = STACKTOP; //@line 14217
     STACKTOP = sp; //@line 14218
     return;
    }
    _emscripten_free_async_context($AsyncCtx25 | 0); //@line 14220
    if (!$115) {
     $AsyncCtx53 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14223
     _mbed_assert_internal(13121, 13130, 231); //@line 14224
     if (___async) {
      HEAP32[$AsyncCtx53 >> 2] = 409; //@line 14227
      HEAP32[$AsyncCtx53 + 4 >> 2] = $vararg_buffer1; //@line 14229
      HEAP32[$AsyncCtx53 + 8 >> 2] = $9; //@line 14231
      sp = STACKTOP; //@line 14232
      STACKTOP = sp; //@line 14233
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx53 | 0); //@line 14235
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 14241
  return;
 }
 $121 = $0 + 2046 | 0; //@line 14243
 HEAP8[$121 >> 0] = 0; //@line 14244
 $122 = $0 + 2028 | 0; //@line 14245
 HEAP8[$122 >> 0] = 0; //@line 14246
 $123 = $0 + 1996 | 0; //@line 14247
 HEAP8[$123 >> 0] = 1; //@line 14248
 HEAP8[$0 + 2018 >> 0] = 0; //@line 14250
 $125 = $0 + 2004 | 0; //@line 14251
 HEAP32[$125 >> 2] = 0; //@line 14252
 HEAP8[$0 + 2008 >> 0] = $$1$off0 & 1; //@line 14255
 HEAP8[$0 + 2011 >> 0] = ($79 & 255) >>> 4 & 1; //@line 14259
 $131 = $0 + 2012 | 0; //@line 14260
 HEAP32[$131 >> 2] = 0; //@line 14261
 $132 = $0 + 2016 | 0; //@line 14262
 HEAP16[$132 >> 1] = 0; //@line 14263
 $133 = HEAP32[$9 >> 2] | 0; //@line 14264
 $134 = $0 + 2032 | 0; //@line 14265
 HEAP32[$134 >> 2] = $133; //@line 14266
 HEAP16[$0 + 2020 >> 1] = $5; //@line 14268
 HEAP8[$0 + 2022 >> 0] = $6; //@line 14270
 HEAP32[$0 + 2040 >> 2] = 0; //@line 14272
 HEAP32[$0 + 1768 >> 2] = 0; //@line 14274
 $139 = $0 + 476 | 0; //@line 14275
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($139); //@line 14276
 L42 : do {
  if ($$1$off0) {
   HEAP32[$0 + 2e3 >> 2] = 2; //@line 14280
   $141 = $$164 + 36 | 0; //@line 14281
   $142 = HEAP32[$141 >> 2] | 0; //@line 14282
   if (($142 | 0) == 0 | ($142 | 0) != ($133 | 0)) {
    $$pre$phi$sinkZ2D = $141; //@line 14287
   } else {
    HEAP32[$125 >> 2] = 8; //@line 14289
    HEAP32[$134 >> 2] = $133; //@line 14290
    HEAP8[$123 >> 0] = 0; //@line 14291
    do {
     if (HEAP8[$0 + 1177 >> 0] | 0) {
      $149 = HEAP32[$0 + 1992 >> 2] | 0; //@line 14298
      HEAP32[$7 >> 2] = 404; //@line 14299
      HEAP32[$7 + 4 >> 2] = 0; //@line 14301
      $AsyncCtx21 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14302
      HEAP32[$$byval_copy74 >> 2] = HEAP32[$7 >> 2]; //@line 14303
      HEAP32[$$byval_copy74 + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 14303
      $150 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($149, $0, $$byval_copy74) | 0; //@line 14304
      if (___async) {
       HEAP32[$AsyncCtx21 >> 2] = 410; //@line 14307
       HEAP32[$AsyncCtx21 + 4 >> 2] = $7; //@line 14309
       HEAP32[$AsyncCtx21 + 8 >> 2] = $9; //@line 14311
       sp = STACKTOP; //@line 14312
       STACKTOP = sp; //@line 14313
       return;
      }
      _emscripten_free_async_context($AsyncCtx21 | 0); //@line 14315
      if (!$150) {
       $AsyncCtx49 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14318
       _mbed_assert_internal(13121, 13130, 231); //@line 14319
       if (___async) {
        HEAP32[$AsyncCtx49 >> 2] = 411; //@line 14322
        HEAP32[$AsyncCtx49 + 4 >> 2] = $7; //@line 14324
        HEAP32[$AsyncCtx49 + 8 >> 2] = $9; //@line 14326
        sp = STACKTOP; //@line 14327
        STACKTOP = sp; //@line 14328
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx49 | 0); //@line 14330
        break;
       }
      }
     }
    } while (0);
    STACKTOP = sp; //@line 14336
    return;
   }
  } else {
   switch ($4 << 24 >> 24) {
   case 5:
    {
     HEAP8[$0 + 1178 >> 0] = 1; //@line 14342
     HEAP32[$0 + 2e3 >> 2] = 1; //@line 14344
     $158 = $0 + 1764 | 0; //@line 14345
     $159 = HEAP32[$158 >> 2] | 0; //@line 14346
     if (($159 | 0) == 0 | ($159 | 0) != ($133 | 0)) {
      $$pre$phi$sinkZ2D = $158; //@line 14351
      break L42;
     }
     _mbed_tracef(16, 13263, 13412, $vararg_buffer3); //@line 14354
     HEAP8[$123 >> 0] = 0; //@line 14355
     HEAP32[$125 >> 2] = 8; //@line 14356
     $$pre$phi$sinkZ2D = $158; //@line 14357
     break L42;
     break;
    }
   case 3:
    {
     HEAP8[$0 + 1178 >> 0] = 0; //@line 14363
     HEAP32[$0 + 2e3 >> 2] = 0; //@line 14365
     $164 = $0 + 1764 | 0; //@line 14366
     $165 = HEAP32[$164 >> 2] | 0; //@line 14367
     if (($165 | 0) == 0 | ($165 | 0) != ($133 | 0)) {
      $$pre$phi$sinkZ2D = $164; //@line 14372
      break L42;
     }
     _mbed_tracef(16, 13263, 13412, $vararg_buffer5); //@line 14375
     HEAP8[$123 >> 0] = 0; //@line 14376
     HEAP32[$125 >> 2] = 8; //@line 14377
     do {
      if (HEAP8[$0 + 1177 >> 0] | 0) {
       $172 = HEAP32[$0 + 1992 >> 2] | 0; //@line 14384
       HEAP32[$vararg_buffer5 >> 2] = 404; //@line 14385
       HEAP32[$vararg_buffer5 + 4 >> 2] = 0; //@line 14387
       $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14388
       HEAP32[$$byval_copy74 >> 2] = HEAP32[$vararg_buffer5 >> 2]; //@line 14389
       HEAP32[$$byval_copy74 + 4 >> 2] = HEAP32[$vararg_buffer5 + 4 >> 2]; //@line 14389
       $173 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($172, $0, $$byval_copy74) | 0; //@line 14390
       if (___async) {
        HEAP32[$AsyncCtx17 >> 2] = 412; //@line 14393
        HEAP32[$AsyncCtx17 + 4 >> 2] = $vararg_buffer5; //@line 14395
        HEAP32[$AsyncCtx17 + 8 >> 2] = $9; //@line 14397
        sp = STACKTOP; //@line 14398
        STACKTOP = sp; //@line 14399
        return;
       }
       _emscripten_free_async_context($AsyncCtx17 | 0); //@line 14401
       if (!$173) {
        $AsyncCtx45 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14404
        _mbed_assert_internal(13121, 13130, 231); //@line 14405
        if (___async) {
         HEAP32[$AsyncCtx45 >> 2] = 413; //@line 14408
         HEAP32[$AsyncCtx45 + 4 >> 2] = $vararg_buffer5; //@line 14410
         HEAP32[$AsyncCtx45 + 8 >> 2] = $9; //@line 14412
         sp = STACKTOP; //@line 14413
         STACKTOP = sp; //@line 14414
         return;
        } else {
         _emscripten_free_async_context($AsyncCtx45 | 0); //@line 14416
         break;
        }
       }
      }
     } while (0);
     STACKTOP = sp; //@line 14422
     return;
    }
   default:
    {
     $$pre$phi$sinkZ2D = $0 + 1764 | 0; //@line 14427
     break L42;
    }
   }
  }
 } while (0);
 HEAP32[$$pre$phi$sinkZ2D >> 2] = $133; //@line 14433
 $179 = $0 + 1177 | 0; //@line 14434
 if (!(HEAP8[$179 >> 0] | 0)) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($139); //@line 14438
 } else {
  if ($79 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($139); //@line 14443
   HEAP8[$121 >> 0] = 1; //@line 14444
   HEAP8[$122 >> 0] = 1; //@line 14445
  }
 }
 do {
  if (!($17 + 252 - ($addconv & 255) & 255)) {
   if ($80 << 24 >> 24) {
    $AsyncCtx9 = _emscripten_alloc_async_context(52, sp) | 0; //@line 14459
    $203 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($139, $1, 8, $addconv, $6, $0 + 2068 | 0, $0 + 1876 | 0, $10) | 0; //@line 14460
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 415; //@line 14463
     HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 14465
     HEAP32[$AsyncCtx9 + 8 >> 2] = $9; //@line 14467
     HEAP32[$AsyncCtx9 + 12 >> 2] = $125; //@line 14469
     HEAP32[$AsyncCtx9 + 16 >> 2] = $8; //@line 14471
     HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 14473
     HEAP32[$AsyncCtx9 + 24 >> 2] = $17; //@line 14475
     HEAP32[$AsyncCtx9 + 28 >> 2] = $131; //@line 14477
     HEAP32[$AsyncCtx9 + 32 >> 2] = $132; //@line 14479
     HEAP8[$AsyncCtx9 + 36 >> 0] = $4; //@line 14481
     HEAP32[$AsyncCtx9 + 40 >> 2] = $139; //@line 14483
     HEAP32[$AsyncCtx9 + 44 >> 2] = $121; //@line 14485
     HEAP32[$AsyncCtx9 + 48 >> 2] = $179; //@line 14487
     sp = STACKTOP; //@line 14488
     STACKTOP = sp; //@line 14489
     return;
    }
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 14491
    if ($203 | 0) {
     HEAP32[$125 >> 2] = 1; //@line 14494
     break;
    }
    if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($139) | 0) {
     HEAP32[$0 + 2060 >> 2] = 4; //@line 14500
     HEAP8[$0 + 2064 >> 0] = 1; //@line 14502
     __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($139); //@line 14503
    }
   }
  } else {
   $AsyncCtx13 = _emscripten_alloc_async_context(48, sp) | 0; //@line 14507
   __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa($0, $1, $2, $80, $$162, $$160, $48, $133, 0, $6); //@line 14508
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 414; //@line 14511
    HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 14513
    HEAP32[$AsyncCtx13 + 8 >> 2] = $9; //@line 14515
    HEAP32[$AsyncCtx13 + 12 >> 2] = $8; //@line 14517
    HEAP32[$AsyncCtx13 + 16 >> 2] = $1; //@line 14519
    HEAP32[$AsyncCtx13 + 20 >> 2] = $17; //@line 14521
    HEAP32[$AsyncCtx13 + 24 >> 2] = $125; //@line 14523
    HEAP32[$AsyncCtx13 + 28 >> 2] = $131; //@line 14525
    HEAP32[$AsyncCtx13 + 32 >> 2] = $132; //@line 14527
    HEAP8[$AsyncCtx13 + 36 >> 0] = $4; //@line 14529
    HEAP32[$AsyncCtx13 + 40 >> 2] = $121; //@line 14531
    HEAP32[$AsyncCtx13 + 44 >> 2] = $179; //@line 14533
    sp = STACKTOP; //@line 14534
    STACKTOP = sp; //@line 14535
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 14537
    break;
   }
  }
 } while (0);
 if ($4 << 24 >> 24 == 7) {
  $221 = $0 + 1442 | 0; //@line 14544
  $223 = HEAPU8[$8 >> 0] | 0; //@line 14546
  _memcpy($221 | 0, $1 + $223 | 0, $17 | 0) | 0; //@line 14548
  HEAP32[$0 + 2e3 >> 2] = 3; //@line 14550
  HEAP32[$125 >> 2] = 0; //@line 14551
  HEAP32[$131 >> 2] = $221; //@line 14552
  HEAP16[$132 >> 1] = $17 - $223; //@line 14555
 }
 $231 = HEAP8[$0 + 1699 >> 0] | 0; //@line 14560
 $233 = HEAP8[$0 + 1698 >> 0] | 0; //@line 14562
 if (!(HEAP8[$179 >> 0] | 0)) {
  if ((HEAP32[$0 + 2364 >> 2] | 0) != 2) {
   STACKTOP = sp; //@line 14568
   return;
  }
  $AsyncCtx41 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14571
  __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 14572
  if (___async) {
   HEAP32[$AsyncCtx41 >> 2] = 416; //@line 14575
   HEAP32[$AsyncCtx41 + 4 >> 2] = $9; //@line 14577
   sp = STACKTOP; //@line 14578
   STACKTOP = sp; //@line 14579
   return;
  }
  _emscripten_free_async_context($AsyncCtx41 | 0); //@line 14581
  STACKTOP = sp; //@line 14582
  return;
 }
 if (HEAP8[$121 >> 0] | 0) {
  $AsyncCtx37 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14588
  __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 14589
  if (___async) {
   HEAP32[$AsyncCtx37 >> 2] = 417; //@line 14592
   HEAP32[$AsyncCtx37 + 4 >> 2] = $9; //@line 14594
   sp = STACKTOP; //@line 14595
   STACKTOP = sp; //@line 14596
   return;
  }
  _emscripten_free_async_context($AsyncCtx37 | 0); //@line 14598
  STACKTOP = sp; //@line 14599
  return;
 }
 if (($231 & 255) <= ($233 & 255)) {
  STACKTOP = sp; //@line 14603
  return;
 }
 $AsyncCtx33 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14606
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 14607
 if (___async) {
  HEAP32[$AsyncCtx33 >> 2] = 418; //@line 14610
  HEAP32[$AsyncCtx33 + 4 >> 2] = $9; //@line 14612
  sp = STACKTOP; //@line 14613
  STACKTOP = sp; //@line 14614
  return;
 }
 _emscripten_free_async_context($AsyncCtx33 | 0); //@line 14616
 STACKTOP = sp; //@line 14617
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$pre$phi$sinkZ2D = 0, $10 = 0, $102 = 0, $103 = 0, $108 = 0, $109 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $121 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $160 = 0, $162 = 0, $170 = 0, $172 = 0, $177 = 0, $18 = 0, $181 = 0, $184 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $28 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $56 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $85 = 0, $87 = 0, $88 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3209
 STACKTOP = STACKTOP + 32 | 0; //@line 3210
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 3210
 $$byval_copy23 = sp + 16 | 0; //@line 3211
 $$byval_copy22 = sp + 8 | 0; //@line 3212
 $$byval_copy = sp; //@line 3213
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3215
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3217
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3219
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 3222
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 3224
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 3226
 $14 = HEAP16[$0 + 24 >> 1] | 0; //@line 3228
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 3230
 $18 = HEAP8[$0 + 27 >> 0] | 0; //@line 3232
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 3234
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 3236
 $26 = HEAP32[$0 + 40 >> 2] | 0; //@line 3240
 $28 = HEAP32[$0 + 44 >> 2] | 0; //@line 3242
 $32 = HEAP32[$0 + 52 >> 2] | 0; //@line 3246
 $34 = HEAP8[$0 + 56 >> 0] | 0; //@line 3248
 $36 = HEAP32[$0 + 60 >> 2] | 0; //@line 3250
 $38 = HEAP32[$0 + 64 >> 2] | 0; //@line 3252
 $40 = HEAP8[$0 + 68 >> 0] | 0; //@line 3254
 $42 = HEAP16[$0 + 70 >> 1] | 0; //@line 3256
 $44 = HEAP32[$0 + 72 >> 2] | 0; //@line 3258
 $46 = HEAP32[$0 + 76 >> 2] | 0; //@line 3260
 $48 = HEAP32[$0 + 80 >> 2] | 0; //@line 3262
 $50 = HEAP32[$0 + 84 >> 2] | 0; //@line 3264
 $56 = HEAP32[$0 + 96 >> 2] | 0; //@line 3270
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  _mbed_tracef(2, 13263, 13401, HEAP32[$0 + 88 >> 2] | 0); //@line 3275
  if (!(HEAP8[$2 + 1177 >> 0] | 0)) {
   STACKTOP = sp; //@line 3280
   return;
  }
  $62 = HEAP32[$2 + 1992 >> 2] | 0; //@line 3283
  HEAP32[$56 >> 2] = 404; //@line 3284
  HEAP32[$56 + 4 >> 2] = 0; //@line 3286
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 3287
  HEAP32[$$byval_copy >> 2] = HEAP32[$56 >> 2]; //@line 3288
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$56 + 4 >> 2]; //@line 3288
  $63 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($62, $2, $$byval_copy) | 0; //@line 3289
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 408; //@line 3292
   $64 = $ReallocAsyncCtx6 + 4 | 0; //@line 3293
   HEAP32[$64 >> 2] = $56; //@line 3294
   $65 = $ReallocAsyncCtx6 + 8 | 0; //@line 3295
   HEAP32[$65 >> 2] = $20; //@line 3296
   sp = STACKTOP; //@line 3297
   STACKTOP = sp; //@line 3298
   return;
  }
  HEAP32[___async_retval >> 2] = $63; //@line 3301
  ___async_unwind = 0; //@line 3302
  HEAP32[$ReallocAsyncCtx6 >> 2] = 408; //@line 3303
  $64 = $ReallocAsyncCtx6 + 4 | 0; //@line 3304
  HEAP32[$64 >> 2] = $56; //@line 3305
  $65 = $ReallocAsyncCtx6 + 8 | 0; //@line 3306
  HEAP32[$65 >> 2] = $20; //@line 3307
  sp = STACKTOP; //@line 3308
  STACKTOP = sp; //@line 3309
  return;
 }
 $67 = $2 + 2046 | 0; //@line 3311
 HEAP8[$67 >> 0] = 0; //@line 3312
 $68 = $2 + 2028 | 0; //@line 3313
 HEAP8[$68 >> 0] = 0; //@line 3314
 $69 = $2 + 1996 | 0; //@line 3315
 HEAP8[$69 >> 0] = 1; //@line 3316
 HEAP8[$2 + 2018 >> 0] = 0; //@line 3318
 $71 = $2 + 2004 | 0; //@line 3319
 HEAP32[$71 >> 2] = 0; //@line 3320
 HEAP8[$2 + 2008 >> 0] = $8 & 1; //@line 3323
 HEAP8[$2 + 2011 >> 0] = ($10 & 255) >>> 4 & 1; //@line 3327
 $77 = $2 + 2012 | 0; //@line 3328
 HEAP32[$77 >> 2] = 0; //@line 3329
 $78 = $2 + 2016 | 0; //@line 3330
 HEAP16[$78 >> 1] = 0; //@line 3331
 $79 = HEAP32[$12 >> 2] | 0; //@line 3332
 $80 = $2 + 2032 | 0; //@line 3333
 HEAP32[$80 >> 2] = $79; //@line 3334
 HEAP16[$2 + 2020 >> 1] = $14; //@line 3336
 HEAP8[$2 + 2022 >> 0] = $16; //@line 3338
 HEAP32[$2 + 2040 >> 2] = 0; //@line 3340
 HEAP32[$2 + 1768 >> 2] = 0; //@line 3342
 $85 = $2 + 476 | 0; //@line 3343
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($85); //@line 3344
 L13 : do {
  if ($8) {
   HEAP32[$2 + 2e3 >> 2] = 2; //@line 3348
   $87 = $6 + 36 | 0; //@line 3349
   $88 = HEAP32[$87 >> 2] | 0; //@line 3350
   if (($88 | 0) == 0 | ($88 | 0) != ($79 | 0)) {
    $$pre$phi$sinkZ2D = $87; //@line 3355
   } else {
    HEAP32[$71 >> 2] = 8; //@line 3357
    HEAP32[$80 >> 2] = $79; //@line 3358
    HEAP8[$69 >> 0] = 0; //@line 3359
    if (!(HEAP8[$2 + 1177 >> 0] | 0)) {
     STACKTOP = sp; //@line 3364
     return;
    }
    $95 = HEAP32[$2 + 1992 >> 2] | 0; //@line 3367
    HEAP32[$4 >> 2] = 404; //@line 3368
    HEAP32[$4 + 4 >> 2] = 0; //@line 3370
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 3371
    HEAP32[$$byval_copy22 >> 2] = HEAP32[$4 >> 2]; //@line 3372
    HEAP32[$$byval_copy22 + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 3372
    $96 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($95, $2, $$byval_copy22) | 0; //@line 3373
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 410; //@line 3376
     $97 = $ReallocAsyncCtx5 + 4 | 0; //@line 3377
     HEAP32[$97 >> 2] = $4; //@line 3378
     $98 = $ReallocAsyncCtx5 + 8 | 0; //@line 3379
     HEAP32[$98 >> 2] = $20; //@line 3380
     sp = STACKTOP; //@line 3381
     STACKTOP = sp; //@line 3382
     return;
    }
    HEAP32[___async_retval >> 2] = $96; //@line 3385
    ___async_unwind = 0; //@line 3386
    HEAP32[$ReallocAsyncCtx5 >> 2] = 410; //@line 3387
    $97 = $ReallocAsyncCtx5 + 4 | 0; //@line 3388
    HEAP32[$97 >> 2] = $4; //@line 3389
    $98 = $ReallocAsyncCtx5 + 8 | 0; //@line 3390
    HEAP32[$98 >> 2] = $20; //@line 3391
    sp = STACKTOP; //@line 3392
    STACKTOP = sp; //@line 3393
    return;
   }
  } else {
   switch ($18 << 24 >> 24) {
   case 5:
    {
     HEAP8[$2 + 1178 >> 0] = 1; //@line 3399
     HEAP32[$2 + 2e3 >> 2] = 1; //@line 3401
     $102 = $2 + 1764 | 0; //@line 3402
     $103 = HEAP32[$102 >> 2] | 0; //@line 3403
     if (($103 | 0) == 0 | ($103 | 0) != ($79 | 0)) {
      $$pre$phi$sinkZ2D = $102; //@line 3408
      break L13;
     }
     _mbed_tracef(16, 13263, 13412, $28); //@line 3411
     HEAP8[$69 >> 0] = 0; //@line 3412
     HEAP32[$71 >> 2] = 8; //@line 3413
     $$pre$phi$sinkZ2D = $102; //@line 3414
     break L13;
     break;
    }
   case 3:
    {
     HEAP8[$2 + 1178 >> 0] = 0; //@line 3420
     HEAP32[$2 + 2e3 >> 2] = 0; //@line 3422
     $108 = $2 + 1764 | 0; //@line 3423
     $109 = HEAP32[$108 >> 2] | 0; //@line 3424
     if (($109 | 0) == 0 | ($109 | 0) != ($79 | 0)) {
      $$pre$phi$sinkZ2D = $108; //@line 3429
      break L13;
     }
     _mbed_tracef(16, 13263, 13412, $22); //@line 3432
     HEAP8[$69 >> 0] = 0; //@line 3433
     HEAP32[$71 >> 2] = 8; //@line 3434
     if (!(HEAP8[$2 + 1177 >> 0] | 0)) {
      STACKTOP = sp; //@line 3439
      return;
     }
     $116 = HEAP32[$2 + 1992 >> 2] | 0; //@line 3442
     HEAP32[$26 >> 2] = 404; //@line 3443
     HEAP32[$26 + 4 >> 2] = 0; //@line 3445
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 3446
     HEAP32[$$byval_copy23 >> 2] = HEAP32[$26 >> 2]; //@line 3447
     HEAP32[$$byval_copy23 + 4 >> 2] = HEAP32[$26 + 4 >> 2]; //@line 3447
     $117 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($116, $2, $$byval_copy23) | 0; //@line 3448
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 412; //@line 3451
      $118 = $ReallocAsyncCtx4 + 4 | 0; //@line 3452
      HEAP32[$118 >> 2] = $26; //@line 3453
      $119 = $ReallocAsyncCtx4 + 8 | 0; //@line 3454
      HEAP32[$119 >> 2] = $20; //@line 3455
      sp = STACKTOP; //@line 3456
      STACKTOP = sp; //@line 3457
      return;
     }
     HEAP32[___async_retval >> 2] = $117; //@line 3460
     ___async_unwind = 0; //@line 3461
     HEAP32[$ReallocAsyncCtx4 >> 2] = 412; //@line 3462
     $118 = $ReallocAsyncCtx4 + 4 | 0; //@line 3463
     HEAP32[$118 >> 2] = $26; //@line 3464
     $119 = $ReallocAsyncCtx4 + 8 | 0; //@line 3465
     HEAP32[$119 >> 2] = $20; //@line 3466
     sp = STACKTOP; //@line 3467
     STACKTOP = sp; //@line 3468
     return;
    }
   default:
    {
     $$pre$phi$sinkZ2D = $2 + 1764 | 0; //@line 3473
     break L13;
    }
   }
  }
 } while (0);
 HEAP32[$$pre$phi$sinkZ2D >> 2] = $79; //@line 3479
 $121 = $2 + 1177 | 0; //@line 3480
 if (!(HEAP8[$121 >> 0] | 0)) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($85); //@line 3484
 } else {
  if ($10 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($85); //@line 3489
   HEAP8[$67 >> 0] = 1; //@line 3490
   HEAP8[$68 >> 0] = 1; //@line 3491
  }
 }
 if ($32 + 252 - ($34 & 255) & 255 | 0) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 3500
  __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa($2, $36, $42, $40, $44, $46, $48, $79, 0, $16); //@line 3501
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 414; //@line 3504
   $131 = $ReallocAsyncCtx3 + 4 | 0; //@line 3505
   HEAP32[$131 >> 2] = $2; //@line 3506
   $132 = $ReallocAsyncCtx3 + 8 | 0; //@line 3507
   HEAP32[$132 >> 2] = $20; //@line 3508
   $133 = $ReallocAsyncCtx3 + 12 | 0; //@line 3509
   HEAP32[$133 >> 2] = $50; //@line 3510
   $134 = $ReallocAsyncCtx3 + 16 | 0; //@line 3511
   HEAP32[$134 >> 2] = $36; //@line 3512
   $135 = $ReallocAsyncCtx3 + 20 | 0; //@line 3513
   HEAP32[$135 >> 2] = $32; //@line 3514
   $136 = $ReallocAsyncCtx3 + 24 | 0; //@line 3515
   HEAP32[$136 >> 2] = $71; //@line 3516
   $137 = $ReallocAsyncCtx3 + 28 | 0; //@line 3517
   HEAP32[$137 >> 2] = $77; //@line 3518
   $138 = $ReallocAsyncCtx3 + 32 | 0; //@line 3519
   HEAP32[$138 >> 2] = $78; //@line 3520
   $139 = $ReallocAsyncCtx3 + 36 | 0; //@line 3521
   HEAP8[$139 >> 0] = $18; //@line 3522
   $140 = $ReallocAsyncCtx3 + 40 | 0; //@line 3523
   HEAP32[$140 >> 2] = $67; //@line 3524
   $141 = $ReallocAsyncCtx3 + 44 | 0; //@line 3525
   HEAP32[$141 >> 2] = $121; //@line 3526
   sp = STACKTOP; //@line 3527
   STACKTOP = sp; //@line 3528
   return;
  }
  ___async_unwind = 0; //@line 3530
  HEAP32[$ReallocAsyncCtx3 >> 2] = 414; //@line 3531
  $131 = $ReallocAsyncCtx3 + 4 | 0; //@line 3532
  HEAP32[$131 >> 2] = $2; //@line 3533
  $132 = $ReallocAsyncCtx3 + 8 | 0; //@line 3534
  HEAP32[$132 >> 2] = $20; //@line 3535
  $133 = $ReallocAsyncCtx3 + 12 | 0; //@line 3536
  HEAP32[$133 >> 2] = $50; //@line 3537
  $134 = $ReallocAsyncCtx3 + 16 | 0; //@line 3538
  HEAP32[$134 >> 2] = $36; //@line 3539
  $135 = $ReallocAsyncCtx3 + 20 | 0; //@line 3540
  HEAP32[$135 >> 2] = $32; //@line 3541
  $136 = $ReallocAsyncCtx3 + 24 | 0; //@line 3542
  HEAP32[$136 >> 2] = $71; //@line 3543
  $137 = $ReallocAsyncCtx3 + 28 | 0; //@line 3544
  HEAP32[$137 >> 2] = $77; //@line 3545
  $138 = $ReallocAsyncCtx3 + 32 | 0; //@line 3546
  HEAP32[$138 >> 2] = $78; //@line 3547
  $139 = $ReallocAsyncCtx3 + 36 | 0; //@line 3548
  HEAP8[$139 >> 0] = $18; //@line 3549
  $140 = $ReallocAsyncCtx3 + 40 | 0; //@line 3550
  HEAP32[$140 >> 2] = $67; //@line 3551
  $141 = $ReallocAsyncCtx3 + 44 | 0; //@line 3552
  HEAP32[$141 >> 2] = $121; //@line 3553
  sp = STACKTOP; //@line 3554
  STACKTOP = sp; //@line 3555
  return;
 }
 if ($40 << 24 >> 24) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(52) | 0; //@line 3561
  $145 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($85, $36, 8, $34, $16, $2 + 2068 | 0, $2 + 1876 | 0, $38) | 0; //@line 3562
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 415; //@line 3565
   $146 = $ReallocAsyncCtx2 + 4 | 0; //@line 3566
   HEAP32[$146 >> 2] = $2; //@line 3567
   $147 = $ReallocAsyncCtx2 + 8 | 0; //@line 3568
   HEAP32[$147 >> 2] = $20; //@line 3569
   $148 = $ReallocAsyncCtx2 + 12 | 0; //@line 3570
   HEAP32[$148 >> 2] = $71; //@line 3571
   $149 = $ReallocAsyncCtx2 + 16 | 0; //@line 3572
   HEAP32[$149 >> 2] = $50; //@line 3573
   $150 = $ReallocAsyncCtx2 + 20 | 0; //@line 3574
   HEAP32[$150 >> 2] = $36; //@line 3575
   $151 = $ReallocAsyncCtx2 + 24 | 0; //@line 3576
   HEAP32[$151 >> 2] = $32; //@line 3577
   $152 = $ReallocAsyncCtx2 + 28 | 0; //@line 3578
   HEAP32[$152 >> 2] = $77; //@line 3579
   $153 = $ReallocAsyncCtx2 + 32 | 0; //@line 3580
   HEAP32[$153 >> 2] = $78; //@line 3581
   $154 = $ReallocAsyncCtx2 + 36 | 0; //@line 3582
   HEAP8[$154 >> 0] = $18; //@line 3583
   $155 = $ReallocAsyncCtx2 + 40 | 0; //@line 3584
   HEAP32[$155 >> 2] = $85; //@line 3585
   $156 = $ReallocAsyncCtx2 + 44 | 0; //@line 3586
   HEAP32[$156 >> 2] = $67; //@line 3587
   $157 = $ReallocAsyncCtx2 + 48 | 0; //@line 3588
   HEAP32[$157 >> 2] = $121; //@line 3589
   sp = STACKTOP; //@line 3590
   STACKTOP = sp; //@line 3591
   return;
  }
  HEAP32[___async_retval >> 2] = $145; //@line 3594
  ___async_unwind = 0; //@line 3595
  HEAP32[$ReallocAsyncCtx2 >> 2] = 415; //@line 3596
  $146 = $ReallocAsyncCtx2 + 4 | 0; //@line 3597
  HEAP32[$146 >> 2] = $2; //@line 3598
  $147 = $ReallocAsyncCtx2 + 8 | 0; //@line 3599
  HEAP32[$147 >> 2] = $20; //@line 3600
  $148 = $ReallocAsyncCtx2 + 12 | 0; //@line 3601
  HEAP32[$148 >> 2] = $71; //@line 3602
  $149 = $ReallocAsyncCtx2 + 16 | 0; //@line 3603
  HEAP32[$149 >> 2] = $50; //@line 3604
  $150 = $ReallocAsyncCtx2 + 20 | 0; //@line 3605
  HEAP32[$150 >> 2] = $36; //@line 3606
  $151 = $ReallocAsyncCtx2 + 24 | 0; //@line 3607
  HEAP32[$151 >> 2] = $32; //@line 3608
  $152 = $ReallocAsyncCtx2 + 28 | 0; //@line 3609
  HEAP32[$152 >> 2] = $77; //@line 3610
  $153 = $ReallocAsyncCtx2 + 32 | 0; //@line 3611
  HEAP32[$153 >> 2] = $78; //@line 3612
  $154 = $ReallocAsyncCtx2 + 36 | 0; //@line 3613
  HEAP8[$154 >> 0] = $18; //@line 3614
  $155 = $ReallocAsyncCtx2 + 40 | 0; //@line 3615
  HEAP32[$155 >> 2] = $85; //@line 3616
  $156 = $ReallocAsyncCtx2 + 44 | 0; //@line 3617
  HEAP32[$156 >> 2] = $67; //@line 3618
  $157 = $ReallocAsyncCtx2 + 48 | 0; //@line 3619
  HEAP32[$157 >> 2] = $121; //@line 3620
  sp = STACKTOP; //@line 3621
  STACKTOP = sp; //@line 3622
  return;
 }
 if ($18 << 24 >> 24 == 7) {
  $160 = $2 + 1442 | 0; //@line 3626
  $162 = HEAPU8[$50 >> 0] | 0; //@line 3628
  _memcpy($160 | 0, $36 + $162 | 0, $32 | 0) | 0; //@line 3630
  HEAP32[$2 + 2e3 >> 2] = 3; //@line 3632
  HEAP32[$71 >> 2] = 0; //@line 3633
  HEAP32[$77 >> 2] = $160; //@line 3634
  HEAP16[$78 >> 1] = $32 - $162; //@line 3637
 }
 $170 = HEAP8[$2 + 1699 >> 0] | 0; //@line 3642
 $172 = HEAP8[$2 + 1698 >> 0] | 0; //@line 3644
 if (!(HEAP8[$121 >> 0] | 0)) {
  if ((HEAP32[$2 + 2364 >> 2] | 0) != 2) {
   STACKTOP = sp; //@line 3650
   return;
  }
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 3653
  __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1856 | 0); //@line 3654
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 416; //@line 3657
   $177 = $ReallocAsyncCtx10 + 4 | 0; //@line 3658
   HEAP32[$177 >> 2] = $20; //@line 3659
   sp = STACKTOP; //@line 3660
   STACKTOP = sp; //@line 3661
   return;
  }
  ___async_unwind = 0; //@line 3663
  HEAP32[$ReallocAsyncCtx10 >> 2] = 416; //@line 3664
  $177 = $ReallocAsyncCtx10 + 4 | 0; //@line 3665
  HEAP32[$177 >> 2] = $20; //@line 3666
  sp = STACKTOP; //@line 3667
  STACKTOP = sp; //@line 3668
  return;
 }
 if (HEAP8[$67 >> 0] | 0) {
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 3674
  __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1856 | 0); //@line 3675
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 417; //@line 3678
   $181 = $ReallocAsyncCtx9 + 4 | 0; //@line 3679
   HEAP32[$181 >> 2] = $20; //@line 3680
   sp = STACKTOP; //@line 3681
   STACKTOP = sp; //@line 3682
   return;
  }
  ___async_unwind = 0; //@line 3684
  HEAP32[$ReallocAsyncCtx9 >> 2] = 417; //@line 3685
  $181 = $ReallocAsyncCtx9 + 4 | 0; //@line 3686
  HEAP32[$181 >> 2] = $20; //@line 3687
  sp = STACKTOP; //@line 3688
  STACKTOP = sp; //@line 3689
  return;
 }
 if (($170 & 255) <= ($172 & 255)) {
  STACKTOP = sp; //@line 3693
  return;
 }
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 3696
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1856 | 0); //@line 3697
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 418; //@line 3700
  $184 = $ReallocAsyncCtx8 + 4 | 0; //@line 3701
  HEAP32[$184 >> 2] = $20; //@line 3702
  sp = STACKTOP; //@line 3703
  STACKTOP = sp; //@line 3704
  return;
 }
 ___async_unwind = 0; //@line 3706
 HEAP32[$ReallocAsyncCtx8 >> 2] = 418; //@line 3707
 $184 = $ReallocAsyncCtx8 + 4 | 0; //@line 3708
 HEAP32[$184 >> 2] = $20; //@line 3709
 sp = STACKTOP; //@line 3710
 STACKTOP = sp; //@line 3711
 return;
}
function _mbedtls_cipher_cmac_finish($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$013$i = 0, $$01720$i55 = 0, $$019$i = 0, $$019$i52 = 0, $$021$i54 = 0, $$09$i = 0, $$09$i41 = 0, $$09$i45 = 0, $$sink$sink$i = 0, $12 = 0, $129 = 0, $132 = 0, $145 = 0, $148 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $170 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0, $202 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, label = 0, sp = 0, $156$looptemp = 0;
 sp = STACKTOP; //@line 3615
 STACKTOP = STACKTOP + 80 | 0; //@line 3616
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 3616
 $2 = sp + 56 | 0; //@line 3617
 $3 = sp + 4 | 0; //@line 3618
 $4 = sp + 40 | 0; //@line 3619
 $5 = sp + 24 | 0; //@line 3620
 $6 = sp + 8 | 0; //@line 3621
 $7 = sp; //@line 3622
 if (!$0) {
  $$0 = -24832; //@line 3625
  STACKTOP = sp; //@line 3626
  return $$0 | 0; //@line 3626
 }
 $9 = HEAP32[$0 >> 2] | 0; //@line 3628
 if (!$9) {
  $$0 = -24832; //@line 3631
  STACKTOP = sp; //@line 3632
  return $$0 | 0; //@line 3632
 }
 $12 = HEAP32[$0 + 64 >> 2] | 0; //@line 3635
 if (($1 | 0) == 0 | ($12 | 0) == 0) {
  $$0 = -24832; //@line 3640
  STACKTOP = sp; //@line 3641
  return $$0 | 0; //@line 3641
 }
 $16 = HEAP32[$9 + 24 >> 2] | 0; //@line 3644
 $17 = $4 + 1 | 0; //@line 3645
 HEAP8[$4 >> 0] = 0; //@line 3646
 $18 = $4 + 2 | 0; //@line 3647
 HEAP8[$17 >> 0] = 0; //@line 3648
 $19 = $4 + 3 | 0; //@line 3649
 HEAP8[$18 >> 0] = 0; //@line 3650
 $20 = $4 + 4 | 0; //@line 3651
 HEAP8[$19 >> 0] = 0; //@line 3652
 $21 = $4 + 5 | 0; //@line 3653
 HEAP8[$20 >> 0] = 0; //@line 3654
 $22 = $4 + 6 | 0; //@line 3655
 HEAP8[$21 >> 0] = 0; //@line 3656
 $23 = $4 + 7 | 0; //@line 3657
 HEAP8[$22 >> 0] = 0; //@line 3658
 $24 = $4 + 8 | 0; //@line 3659
 HEAP8[$23 >> 0] = 0; //@line 3660
 $25 = $4 + 9 | 0; //@line 3661
 HEAP8[$24 >> 0] = 0; //@line 3662
 $26 = $4 + 10 | 0; //@line 3663
 HEAP8[$25 >> 0] = 0; //@line 3664
 $27 = $4 + 11 | 0; //@line 3665
 HEAP8[$26 >> 0] = 0; //@line 3666
 $28 = $4 + 12 | 0; //@line 3667
 HEAP8[$27 >> 0] = 0; //@line 3668
 $29 = $4 + 13 | 0; //@line 3669
 HEAP8[$28 >> 0] = 0; //@line 3670
 $30 = $4 + 14 | 0; //@line 3671
 HEAP8[$29 >> 0] = 0; //@line 3672
 $31 = $4 + 15 | 0; //@line 3673
 HEAP8[$30 >> 0] = 0; //@line 3674
 HEAP8[$31 >> 0] = 0; //@line 3675
 $32 = $5 + 1 | 0; //@line 3676
 HEAP8[$5 >> 0] = 0; //@line 3677
 $33 = $5 + 2 | 0; //@line 3678
 HEAP8[$32 >> 0] = 0; //@line 3679
 $34 = $5 + 3 | 0; //@line 3680
 HEAP8[$33 >> 0] = 0; //@line 3681
 $35 = $5 + 4 | 0; //@line 3682
 HEAP8[$34 >> 0] = 0; //@line 3683
 $36 = $5 + 5 | 0; //@line 3684
 HEAP8[$35 >> 0] = 0; //@line 3685
 $37 = $5 + 6 | 0; //@line 3686
 HEAP8[$36 >> 0] = 0; //@line 3687
 $38 = $5 + 7 | 0; //@line 3688
 HEAP8[$37 >> 0] = 0; //@line 3689
 $39 = $5 + 8 | 0; //@line 3690
 HEAP8[$38 >> 0] = 0; //@line 3691
 $40 = $5 + 9 | 0; //@line 3692
 HEAP8[$39 >> 0] = 0; //@line 3693
 $41 = $5 + 10 | 0; //@line 3694
 HEAP8[$40 >> 0] = 0; //@line 3695
 $42 = $5 + 11 | 0; //@line 3696
 HEAP8[$41 >> 0] = 0; //@line 3697
 $43 = $5 + 12 | 0; //@line 3698
 HEAP8[$42 >> 0] = 0; //@line 3699
 $44 = $5 + 13 | 0; //@line 3700
 HEAP8[$43 >> 0] = 0; //@line 3701
 $45 = $5 + 14 | 0; //@line 3702
 HEAP8[$44 >> 0] = 0; //@line 3703
 $46 = $5 + 15 | 0; //@line 3704
 HEAP8[$45 >> 0] = 0; //@line 3705
 HEAP8[$46 >> 0] = 0; //@line 3706
 $47 = $2 + 1 | 0; //@line 3707
 HEAP8[$2 >> 0] = 0; //@line 3708
 $48 = $2 + 2 | 0; //@line 3709
 HEAP8[$47 >> 0] = 0; //@line 3710
 $49 = $2 + 3 | 0; //@line 3711
 HEAP8[$48 >> 0] = 0; //@line 3712
 $50 = $2 + 4 | 0; //@line 3713
 HEAP8[$49 >> 0] = 0; //@line 3714
 $51 = $2 + 5 | 0; //@line 3715
 HEAP8[$50 >> 0] = 0; //@line 3716
 $52 = $2 + 6 | 0; //@line 3717
 HEAP8[$51 >> 0] = 0; //@line 3718
 $53 = $2 + 7 | 0; //@line 3719
 HEAP8[$52 >> 0] = 0; //@line 3720
 $54 = $2 + 8 | 0; //@line 3721
 HEAP8[$53 >> 0] = 0; //@line 3722
 $55 = $2 + 9 | 0; //@line 3723
 HEAP8[$54 >> 0] = 0; //@line 3724
 $56 = $2 + 10 | 0; //@line 3725
 HEAP8[$55 >> 0] = 0; //@line 3726
 $57 = $2 + 11 | 0; //@line 3727
 HEAP8[$56 >> 0] = 0; //@line 3728
 $58 = $2 + 12 | 0; //@line 3729
 HEAP8[$57 >> 0] = 0; //@line 3730
 $59 = $2 + 13 | 0; //@line 3731
 HEAP8[$58 >> 0] = 0; //@line 3732
 $60 = $2 + 14 | 0; //@line 3733
 HEAP8[$59 >> 0] = 0; //@line 3734
 $61 = $2 + 15 | 0; //@line 3735
 HEAP8[$60 >> 0] = 0; //@line 3736
 HEAP8[$61 >> 0] = 0; //@line 3737
 $64 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 3740
 $AsyncCtx2 = _emscripten_alloc_async_context(252, sp) | 0; //@line 3741
 $65 = _mbedtls_cipher_update($0, $2, $64, $2, $3) | 0; //@line 3742
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 588; //@line 3745
  HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 3747
  HEAP32[$AsyncCtx2 + 8 >> 2] = $12; //@line 3749
  HEAP32[$AsyncCtx2 + 12 >> 2] = $35; //@line 3751
  HEAP32[$AsyncCtx2 + 16 >> 2] = $41; //@line 3753
  HEAP32[$AsyncCtx2 + 20 >> 2] = $7; //@line 3755
  HEAP32[$AsyncCtx2 + 24 >> 2] = $23; //@line 3757
  HEAP32[$AsyncCtx2 + 28 >> 2] = $26; //@line 3759
  HEAP32[$AsyncCtx2 + 32 >> 2] = $32; //@line 3761
  HEAP32[$AsyncCtx2 + 36 >> 2] = $61; //@line 3763
  HEAP32[$AsyncCtx2 + 40 >> 2] = $6; //@line 3765
  HEAP32[$AsyncCtx2 + 44 >> 2] = $1; //@line 3767
  HEAP32[$AsyncCtx2 + 48 >> 2] = $28; //@line 3769
  HEAP32[$AsyncCtx2 + 52 >> 2] = $5; //@line 3771
  HEAP32[$AsyncCtx2 + 56 >> 2] = $0; //@line 3773
  HEAP32[$AsyncCtx2 + 60 >> 2] = $52; //@line 3775
  HEAP32[$AsyncCtx2 + 64 >> 2] = $44; //@line 3777
  HEAP32[$AsyncCtx2 + 68 >> 2] = $5; //@line 3779
  HEAP32[$AsyncCtx2 + 72 >> 2] = $34; //@line 3781
  HEAP32[$AsyncCtx2 + 76 >> 2] = $49; //@line 3783
  HEAP32[$AsyncCtx2 + 80 >> 2] = $31; //@line 3785
  HEAP32[$AsyncCtx2 + 84 >> 2] = $48; //@line 3787
  HEAP32[$AsyncCtx2 + 88 >> 2] = $16; //@line 3789
  HEAP32[$AsyncCtx2 + 92 >> 2] = $54; //@line 3791
  HEAP32[$AsyncCtx2 + 96 >> 2] = $20; //@line 3793
  HEAP32[$AsyncCtx2 + 100 >> 2] = $55; //@line 3795
  HEAP32[$AsyncCtx2 + 104 >> 2] = $17; //@line 3797
  HEAP32[$AsyncCtx2 + 108 >> 2] = $45; //@line 3799
  HEAP32[$AsyncCtx2 + 112 >> 2] = $51; //@line 3801
  HEAP32[$AsyncCtx2 + 116 >> 2] = $38; //@line 3803
  HEAP32[$AsyncCtx2 + 120 >> 2] = $58; //@line 3805
  HEAP32[$AsyncCtx2 + 124 >> 2] = $27; //@line 3807
  HEAP32[$AsyncCtx2 + 128 >> 2] = $30; //@line 3809
  HEAP32[$AsyncCtx2 + 132 >> 2] = $18; //@line 3811
  HEAP32[$AsyncCtx2 + 136 >> 2] = $21; //@line 3813
  HEAP32[$AsyncCtx2 + 140 >> 2] = $24; //@line 3815
  HEAP32[$AsyncCtx2 + 144 >> 2] = $47; //@line 3817
  HEAP32[$AsyncCtx2 + 148 >> 2] = $6; //@line 3819
  HEAP32[$AsyncCtx2 + 152 >> 2] = $50; //@line 3821
  HEAP32[$AsyncCtx2 + 156 >> 2] = $59; //@line 3823
  HEAP32[$AsyncCtx2 + 160 >> 2] = $39; //@line 3825
  HEAP32[$AsyncCtx2 + 164 >> 2] = $42; //@line 3827
  HEAP32[$AsyncCtx2 + 168 >> 2] = $2; //@line 3829
  HEAP32[$AsyncCtx2 + 172 >> 2] = $37; //@line 3831
  HEAP32[$AsyncCtx2 + 176 >> 2] = $40; //@line 3833
  HEAP32[$AsyncCtx2 + 180 >> 2] = $43; //@line 3835
  HEAP32[$AsyncCtx2 + 184 >> 2] = $57; //@line 3837
  HEAP32[$AsyncCtx2 + 188 >> 2] = $2; //@line 3839
  HEAP32[$AsyncCtx2 + 192 >> 2] = $46; //@line 3841
  HEAP32[$AsyncCtx2 + 196 >> 2] = $7; //@line 3843
  HEAP32[$AsyncCtx2 + 200 >> 2] = $19; //@line 3845
  HEAP32[$AsyncCtx2 + 204 >> 2] = $25; //@line 3847
  HEAP32[$AsyncCtx2 + 208 >> 2] = $12; //@line 3849
  HEAP32[$AsyncCtx2 + 212 >> 2] = $3; //@line 3851
  HEAP32[$AsyncCtx2 + 216 >> 2] = $60; //@line 3853
  HEAP32[$AsyncCtx2 + 220 >> 2] = $29; //@line 3855
  HEAP32[$AsyncCtx2 + 224 >> 2] = $53; //@line 3857
  HEAP32[$AsyncCtx2 + 228 >> 2] = $64; //@line 3859
  HEAP32[$AsyncCtx2 + 232 >> 2] = $33; //@line 3861
  HEAP32[$AsyncCtx2 + 236 >> 2] = $36; //@line 3863
  HEAP32[$AsyncCtx2 + 240 >> 2] = $56; //@line 3865
  HEAP32[$AsyncCtx2 + 244 >> 2] = $22; //@line 3867
  HEAP32[$AsyncCtx2 + 248 >> 2] = $4; //@line 3869
  sp = STACKTOP; //@line 3870
  STACKTOP = sp; //@line 3871
  return 0; //@line 3871
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3873
 L13 : do {
  if (!$65) {
   switch ($64 | 0) {
   case 16:
    {
     $$019$i52 = 135; //@line 3879
     break;
    }
   case 8:
    {
     $$019$i52 = 27; //@line 3883
     break;
    }
   default:
    {
     break L13;
    }
   }
   $129 = $64 + -1 | 0; //@line 3890
   $$01720$i55 = 0; //@line 3891
   $$021$i54 = $129; //@line 3891
   while (1) {
    $132 = HEAPU8[$2 + $$021$i54 >> 0] | 0; //@line 3895
    HEAP8[$4 + $$021$i54 >> 0] = $132 << 1 | $$01720$i55; //@line 3900
    if (($$021$i54 | 0) > 0) {
     $$01720$i55 = $132 >>> 7; //@line 3905
     $$021$i54 = $$021$i54 + -1 | 0; //@line 3905
    } else {
     break;
    }
   }
   $145 = $4 + $129 | 0; //@line 3915
   $148 = $$019$i52 & 0 - ((HEAPU8[$2 >> 0] | 0) >>> 7) ^ (HEAPU8[$145 >> 0] | 0); //@line 3918
   HEAP8[$145 >> 0] = $148; //@line 3920
   switch ($64 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 3923
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 3927
     break;
    }
   default:
    {
     break L13;
    }
   }
   HEAP8[$5 + $129 >> 0] = $148 << 1; //@line 3937
   if (($129 | 0) > 0) {
    $156 = $148; //@line 3941
    $157 = $64 + -2 | 0; //@line 3941
    while (1) {
     $156$looptemp = $156;
     $156 = HEAPU8[$4 + $157 >> 0] | 0; //@line 3946
     HEAP8[$5 + $157 >> 0] = $156 << 1 | $156$looptemp >>> 7; //@line 3951
     if (($157 | 0) <= 0) {
      break;
     } else {
      $157 = $157 + -1 | 0; //@line 3955
     }
    }
   }
   $170 = $5 + $129 | 0; //@line 3966
   HEAP8[$170 >> 0] = $$019$i & 0 - ((HEAPU8[$4 >> 0] | 0) >>> 7) ^ (HEAPU8[$170 >> 0] | 0); //@line 3971
  }
 } while (0);
 HEAP8[$2 >> 0] = 0; //@line 3974
 HEAP8[$47 >> 0] = 0; //@line 3975
 HEAP8[$48 >> 0] = 0; //@line 3976
 HEAP8[$49 >> 0] = 0; //@line 3977
 HEAP8[$50 >> 0] = 0; //@line 3978
 HEAP8[$51 >> 0] = 0; //@line 3979
 HEAP8[$52 >> 0] = 0; //@line 3980
 HEAP8[$53 >> 0] = 0; //@line 3981
 HEAP8[$54 >> 0] = 0; //@line 3982
 HEAP8[$55 >> 0] = 0; //@line 3983
 HEAP8[$56 >> 0] = 0; //@line 3984
 HEAP8[$57 >> 0] = 0; //@line 3985
 HEAP8[$58 >> 0] = 0; //@line 3986
 HEAP8[$59 >> 0] = 0; //@line 3987
 HEAP8[$60 >> 0] = 0; //@line 3988
 HEAP8[$61 >> 0] = 0; //@line 3989
 $175 = $12 + 16 | 0; //@line 3990
 $176 = $12 + 32 | 0; //@line 3991
 $177 = HEAP32[$176 >> 2] | 0; //@line 3992
 if ($177 >>> 0 < $16 >>> 0) {
  $$013$i = 0; //@line 3995
  do {
   if ($$013$i >>> 0 < $177 >>> 0) {
    $$sink$sink$i = HEAP8[$12 + 16 + $$013$i >> 0] | 0; //@line 4001
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($177 | 0) ? -128 : 0; //@line 4005
   }
   HEAP8[$6 + $$013$i >> 0] = $$sink$sink$i; //@line 4008
   $$013$i = $$013$i + 1 | 0; //@line 4009
  } while (($$013$i | 0) != ($16 | 0));
  $$09$i45 = 0; //@line 4012
  do {
   $185 = $6 + $$09$i45 | 0; //@line 4019
   HEAP8[$185 >> 0] = HEAP8[$5 + $$09$i45 >> 0] ^ HEAP8[$185 >> 0]; //@line 4024
   $$09$i45 = $$09$i45 + 1 | 0; //@line 4025
  } while (($$09$i45 | 0) != ($16 | 0));
  label = 25; //@line 4028
 } else {
  if ($16 | 0) {
   $$09$i41 = 0; //@line 4037
   do {
    HEAP8[$6 + $$09$i41 >> 0] = HEAP8[$4 + $$09$i41 >> 0] ^ HEAP8[$12 + 16 + $$09$i41 >> 0]; //@line 4045
    $$09$i41 = $$09$i41 + 1 | 0; //@line 4046
   } while (($$09$i41 | 0) != ($16 | 0));
   label = 25; //@line 4049
  }
 }
 if ((label | 0) == 25) {
  if ($16 | 0) {
   $$09$i = 0; //@line 4060
   do {
    $202 = $12 + $$09$i | 0; //@line 4064
    HEAP8[$202 >> 0] = HEAP8[$202 >> 0] ^ HEAP8[$6 + $$09$i >> 0]; //@line 4067
    $$09$i = $$09$i + 1 | 0; //@line 4068
   } while (($$09$i | 0) != ($16 | 0));
  }
 }
 $AsyncCtx = _emscripten_alloc_async_context(164, sp) | 0; //@line 4078
 $206 = _mbedtls_cipher_update($0, $12, $16, $12, $7) | 0; //@line 4079
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 589; //@line 4082
  HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 4084
  HEAP32[$AsyncCtx + 8 >> 2] = $12; //@line 4086
  HEAP32[$AsyncCtx + 12 >> 2] = $35; //@line 4088
  HEAP32[$AsyncCtx + 16 >> 2] = $41; //@line 4090
  HEAP32[$AsyncCtx + 20 >> 2] = $23; //@line 4092
  HEAP32[$AsyncCtx + 24 >> 2] = $26; //@line 4094
  HEAP32[$AsyncCtx + 28 >> 2] = $32; //@line 4096
  HEAP32[$AsyncCtx + 32 >> 2] = $1; //@line 4098
  HEAP32[$AsyncCtx + 36 >> 2] = $28; //@line 4100
  HEAP32[$AsyncCtx + 40 >> 2] = $44; //@line 4102
  HEAP32[$AsyncCtx + 44 >> 2] = $5; //@line 4104
  HEAP32[$AsyncCtx + 48 >> 2] = $34; //@line 4106
  HEAP32[$AsyncCtx + 52 >> 2] = $31; //@line 4108
  HEAP32[$AsyncCtx + 56 >> 2] = $16; //@line 4110
  HEAP32[$AsyncCtx + 60 >> 2] = $20; //@line 4112
  HEAP32[$AsyncCtx + 64 >> 2] = $17; //@line 4114
  HEAP32[$AsyncCtx + 68 >> 2] = $45; //@line 4116
  HEAP32[$AsyncCtx + 72 >> 2] = $176; //@line 4118
  HEAP32[$AsyncCtx + 76 >> 2] = $38; //@line 4120
  HEAP32[$AsyncCtx + 80 >> 2] = $27; //@line 4122
  HEAP32[$AsyncCtx + 84 >> 2] = $30; //@line 4124
  HEAP32[$AsyncCtx + 88 >> 2] = $18; //@line 4126
  HEAP32[$AsyncCtx + 92 >> 2] = $21; //@line 4128
  HEAP32[$AsyncCtx + 96 >> 2] = $24; //@line 4130
  HEAP32[$AsyncCtx + 100 >> 2] = $6; //@line 4132
  HEAP32[$AsyncCtx + 104 >> 2] = $175; //@line 4134
  HEAP32[$AsyncCtx + 108 >> 2] = $39; //@line 4136
  HEAP32[$AsyncCtx + 112 >> 2] = $42; //@line 4138
  HEAP32[$AsyncCtx + 116 >> 2] = $37; //@line 4140
  HEAP32[$AsyncCtx + 120 >> 2] = $40; //@line 4142
  HEAP32[$AsyncCtx + 124 >> 2] = $43; //@line 4144
  HEAP32[$AsyncCtx + 128 >> 2] = $46; //@line 4146
  HEAP32[$AsyncCtx + 132 >> 2] = $7; //@line 4148
  HEAP32[$AsyncCtx + 136 >> 2] = $19; //@line 4150
  HEAP32[$AsyncCtx + 140 >> 2] = $25; //@line 4152
  HEAP32[$AsyncCtx + 144 >> 2] = $12; //@line 4154
  HEAP32[$AsyncCtx + 148 >> 2] = $29; //@line 4156
  HEAP32[$AsyncCtx + 152 >> 2] = $33; //@line 4158
  HEAP32[$AsyncCtx + 156 >> 2] = $36; //@line 4160
  HEAP32[$AsyncCtx + 160 >> 2] = $22; //@line 4162
  sp = STACKTOP; //@line 4163
  STACKTOP = sp; //@line 4164
  return 0; //@line 4164
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4166
 if (!$206) {
  _memcpy($1 | 0, $12 | 0, $16 | 0) | 0; //@line 4169
 }
 HEAP8[$4 >> 0] = 0; //@line 4171
 HEAP8[$17 >> 0] = 0; //@line 4172
 HEAP8[$18 >> 0] = 0; //@line 4173
 HEAP8[$19 >> 0] = 0; //@line 4174
 HEAP8[$20 >> 0] = 0; //@line 4175
 HEAP8[$21 >> 0] = 0; //@line 4176
 HEAP8[$22 >> 0] = 0; //@line 4177
 HEAP8[$23 >> 0] = 0; //@line 4178
 HEAP8[$24 >> 0] = 0; //@line 4179
 HEAP8[$25 >> 0] = 0; //@line 4180
 HEAP8[$26 >> 0] = 0; //@line 4181
 HEAP8[$27 >> 0] = 0; //@line 4182
 HEAP8[$28 >> 0] = 0; //@line 4183
 HEAP8[$29 >> 0] = 0; //@line 4184
 HEAP8[$30 >> 0] = 0; //@line 4185
 HEAP8[$31 >> 0] = 0; //@line 4186
 HEAP8[$5 >> 0] = 0; //@line 4187
 HEAP8[$32 >> 0] = 0; //@line 4188
 HEAP8[$33 >> 0] = 0; //@line 4189
 HEAP8[$34 >> 0] = 0; //@line 4190
 HEAP8[$35 >> 0] = 0; //@line 4191
 HEAP8[$36 >> 0] = 0; //@line 4192
 HEAP8[$37 >> 0] = 0; //@line 4193
 HEAP8[$38 >> 0] = 0; //@line 4194
 HEAP8[$39 >> 0] = 0; //@line 4195
 HEAP8[$40 >> 0] = 0; //@line 4196
 HEAP8[$41 >> 0] = 0; //@line 4197
 HEAP8[$42 >> 0] = 0; //@line 4198
 HEAP8[$43 >> 0] = 0; //@line 4199
 HEAP8[$44 >> 0] = 0; //@line 4200
 HEAP8[$45 >> 0] = 0; //@line 4201
 HEAP8[$46 >> 0] = 0; //@line 4202
 HEAP32[$176 >> 2] = 0; //@line 4203
 HEAP8[$175 >> 0] = 0; //@line 4205
 HEAP8[$12 + 17 >> 0] = 0; //@line 4207
 HEAP8[$12 + 18 >> 0] = 0; //@line 4209
 HEAP8[$12 + 19 >> 0] = 0; //@line 4211
 HEAP8[$12 + 20 >> 0] = 0; //@line 4213
 HEAP8[$12 + 21 >> 0] = 0; //@line 4215
 HEAP8[$12 + 22 >> 0] = 0; //@line 4217
 HEAP8[$12 + 23 >> 0] = 0; //@line 4219
 HEAP8[$12 + 24 >> 0] = 0; //@line 4221
 HEAP8[$12 + 25 >> 0] = 0; //@line 4223
 HEAP8[$12 + 26 >> 0] = 0; //@line 4225
 HEAP8[$12 + 27 >> 0] = 0; //@line 4227
 HEAP8[$12 + 28 >> 0] = 0; //@line 4229
 HEAP8[$12 + 29 >> 0] = 0; //@line 4231
 HEAP8[$12 + 30 >> 0] = 0; //@line 4233
 HEAP8[$12 + 31 >> 0] = 0; //@line 4234
 HEAP8[$12 >> 0] = 0; //@line 4236
 HEAP8[$12 + 1 >> 0] = 0; //@line 4238
 HEAP8[$12 + 2 >> 0] = 0; //@line 4240
 HEAP8[$12 + 3 >> 0] = 0; //@line 4242
 HEAP8[$12 + 4 >> 0] = 0; //@line 4244
 HEAP8[$12 + 5 >> 0] = 0; //@line 4246
 HEAP8[$12 + 6 >> 0] = 0; //@line 4248
 HEAP8[$12 + 7 >> 0] = 0; //@line 4250
 HEAP8[$12 + 8 >> 0] = 0; //@line 4252
 HEAP8[$12 + 9 >> 0] = 0; //@line 4254
 HEAP8[$12 + 10 >> 0] = 0; //@line 4256
 HEAP8[$12 + 11 >> 0] = 0; //@line 4258
 HEAP8[$12 + 12 >> 0] = 0; //@line 4260
 HEAP8[$12 + 13 >> 0] = 0; //@line 4262
 HEAP8[$12 + 14 >> 0] = 0; //@line 4264
 HEAP8[$12 + 15 >> 0] = 0; //@line 4265
 $$0 = $206; //@line 4266
 STACKTOP = sp; //@line 4267
 return $$0 | 0; //@line 4267
}
function _mbed_vtracef__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val18 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$3154 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $$lobit = 0, $$sink = 0, $10 = 0, $102 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $14 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $46 = 0, $48 = 0, $53 = 0, $57 = 0, $6 = 0, $62 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $extract$t159 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20518
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20520
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20522
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20524
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 20526
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20528
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20530
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20532
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20534
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20536
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20538
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20540
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20542
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20544
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20546
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20548
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20550
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20552
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20554
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20556
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 20558
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 20562
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 20564
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 20566
 HEAP32[178] = (HEAP32[178] | 0) + 1; //@line 20571
 $53 = HEAP32[167] | 0; //@line 20572
 do {
  if ($53 | 0) {
   HEAP8[$53 >> 0] = 0; //@line 20576
   do {
    if ($8 << 24 >> 24 > -1 & ($2 | 0) != 0) {
     $57 = HEAP32[164] | 0; //@line 20582
     if (HEAP8[$57 >> 0] | 0) {
      if (_strstr($57, $2) | 0) {
       $$0$i = 1; //@line 20589
       break;
      }
     }
     $62 = HEAP32[165] | 0; //@line 20593
     if (!(HEAP8[$62 >> 0] | 0)) {
      label = 9; //@line 20597
     } else {
      if (!(_strstr($62, $2) | 0)) {
       $$0$i = 1; //@line 20602
      } else {
       label = 9; //@line 20604
      }
     }
    } else {
     label = 9; //@line 20608
    }
   } while (0);
   if ((label | 0) == 9) {
    $$0$i = 0; //@line 20612
   }
   if (!((HEAP32[174] | 0) != 0 & ((($2 | 0) == 0 | (($10 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[171] = HEAP32[169]; //@line 20624
    break;
   }
   $73 = HEAPU8[652] | 0; //@line 20628
   $74 = $8 & 255; //@line 20629
   if ($74 & 31 & $73 | 0) {
    $78 = $73 & 64; //@line 20634
    $$lobit = $78 >>> 6; //@line 20635
    $79 = $$lobit & 255; //@line 20636
    $83 = ($73 & 32 | 0) == 0; //@line 20640
    $84 = HEAP32[168] | 0; //@line 20641
    $85 = HEAP32[167] | 0; //@line 20642
    $86 = $8 << 24 >> 24 == 1; //@line 20643
    if ($86 | ($73 & 128 | 0) != 0) {
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 20646
     _vsnprintf($85, $84, $10, $12) | 0; //@line 20647
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 142; //@line 20650
      $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 20651
      $$expand_i1_val = $86 & 1; //@line 20652
      HEAP8[$87 >> 0] = $$expand_i1_val; //@line 20653
      sp = STACKTOP; //@line 20654
      return;
     }
     ___async_unwind = 0; //@line 20657
     HEAP32[$ReallocAsyncCtx12 >> 2] = 142; //@line 20658
     $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 20659
     $$expand_i1_val = $86 & 1; //@line 20660
     HEAP8[$87 >> 0] = $$expand_i1_val; //@line 20661
     sp = STACKTOP; //@line 20662
     return;
    }
    if (!$78) {
     $$1$off0 = ($$lobit | 0) != 0; //@line 20668
     $$1143 = $85; //@line 20668
     $$1145 = $84; //@line 20668
     $$3154 = 0; //@line 20668
     label = 28; //@line 20669
    } else {
     if ($83) {
      $$0142 = $85; //@line 20672
      $$0144 = $84; //@line 20672
     } else {
      $89 = _snprintf($85, $84, 12262, $48) | 0; //@line 20674
      $$ = ($89 | 0) >= ($84 | 0) ? 0 : $89; //@line 20676
      $91 = ($$ | 0) > 0; //@line 20677
      $$0142 = $91 ? $85 + $$ | 0 : $85; //@line 20682
      $$0144 = $84 - ($91 ? $$ : 0) | 0; //@line 20682
     }
     if (($$0144 | 0) > 0) {
      $95 = $74 + -2 | 0; //@line 20686
      switch ($95 >>> 1 | $95 << 31 | 0) {
      case 0:
       {
        $$sink = 12280; //@line 20692
        label = 25; //@line 20693
        break;
       }
      case 1:
       {
        $$sink = 12286; //@line 20697
        label = 25; //@line 20698
        break;
       }
      case 3:
       {
        $$sink = 12274; //@line 20702
        label = 25; //@line 20703
        break;
       }
      case 7:
       {
        $$sink = 12268; //@line 20707
        label = 25; //@line 20708
        break;
       }
      default:
       {
        $$0141 = 0; //@line 20712
        $$1152 = 0; //@line 20712
       }
      }
      if ((label | 0) == 25) {
       HEAP32[$40 >> 2] = $$sink; //@line 20716
       $$0141 = $79 & 1; //@line 20719
       $$1152 = _snprintf($$0142, $$0144, 12292, $40) | 0; //@line 20719
      }
      $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 20722
      $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 20724
      if (($$1152$ | 0) > 0) {
       $102 = $$0141 << 24 >> 24 == 0; //@line 20726
       $$1$off0 = $extract$t159; //@line 20731
       $$1143 = $102 ? $$0142 : $$0142 + $$1152$ | 0; //@line 20731
       $$1145 = $$0144 - ($102 ? 0 : $$1152$) | 0; //@line 20731
       $$3154 = $$1152; //@line 20731
       label = 28; //@line 20732
      } else {
       $$1$off0 = $extract$t159; //@line 20734
       $$1143 = $$0142; //@line 20734
       $$1145 = $$0144; //@line 20734
       $$3154 = $$1152$; //@line 20734
       label = 28; //@line 20735
      }
     }
    }
    if ((label | 0) == 28) {
     if (($$1145 | 0) > 0 & (HEAP32[172] | 0) != 0) {
      HEAP32[$30 >> 2] = HEAP32[$12 >> 2]; //@line 20746
      $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 20747
      $108 = _vsnprintf(0, 0, $10, $30) | 0; //@line 20748
      if (___async) {
       HEAP32[$ReallocAsyncCtx11 >> 2] = 146; //@line 20751
       $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 20752
       $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 20753
       HEAP8[$109 >> 0] = $$1$off0$expand_i1_val; //@line 20754
       $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 20755
       HEAP32[$110 >> 2] = $4; //@line 20756
       $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 20757
       HEAP32[$111 >> 2] = $6; //@line 20758
       $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 20759
       HEAP32[$112 >> 2] = $10; //@line 20760
       $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 20761
       HEAP32[$113 >> 2] = $12; //@line 20762
       $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 20763
       HEAP32[$114 >> 2] = $32; //@line 20764
       $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 20765
       HEAP32[$115 >> 2] = $34; //@line 20766
       $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 20767
       HEAP32[$116 >> 2] = $14; //@line 20768
       $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 20769
       HEAP32[$117 >> 2] = $2; //@line 20770
       $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 20771
       HEAP32[$118 >> 2] = $16; //@line 20772
       $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 20773
       HEAP32[$119 >> 2] = $18; //@line 20774
       $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 20775
       HEAP32[$120 >> 2] = $20; //@line 20776
       $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 20777
       HEAP32[$121 >> 2] = $22; //@line 20778
       $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 20779
       HEAP32[$122 >> 2] = $24; //@line 20780
       $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 20781
       HEAP32[$123 >> 2] = $26; //@line 20782
       $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 20783
       HEAP32[$124 >> 2] = $28; //@line 20784
       $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 20785
       HEAP32[$125 >> 2] = $$1143; //@line 20786
       $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 20787
       HEAP32[$126 >> 2] = $$1145; //@line 20788
       $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 20789
       HEAP32[$127 >> 2] = $74; //@line 20790
       $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 20791
       HEAP32[$128 >> 2] = $36; //@line 20792
       $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 20793
       HEAP32[$129 >> 2] = $38; //@line 20794
       $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 20795
       HEAP32[$130 >> 2] = $44; //@line 20796
       $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 20797
       HEAP32[$131 >> 2] = $46; //@line 20798
       $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 20799
       HEAP32[$132 >> 2] = $30; //@line 20800
       $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 20801
       HEAP32[$133 >> 2] = $$3154; //@line 20802
       sp = STACKTOP; //@line 20803
       return;
      }
      HEAP32[___async_retval >> 2] = $108; //@line 20807
      ___async_unwind = 0; //@line 20808
      HEAP32[$ReallocAsyncCtx11 >> 2] = 146; //@line 20809
      $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 20810
      $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 20811
      HEAP8[$109 >> 0] = $$1$off0$expand_i1_val; //@line 20812
      $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 20813
      HEAP32[$110 >> 2] = $4; //@line 20814
      $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 20815
      HEAP32[$111 >> 2] = $6; //@line 20816
      $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 20817
      HEAP32[$112 >> 2] = $10; //@line 20818
      $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 20819
      HEAP32[$113 >> 2] = $12; //@line 20820
      $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 20821
      HEAP32[$114 >> 2] = $32; //@line 20822
      $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 20823
      HEAP32[$115 >> 2] = $34; //@line 20824
      $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 20825
      HEAP32[$116 >> 2] = $14; //@line 20826
      $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 20827
      HEAP32[$117 >> 2] = $2; //@line 20828
      $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 20829
      HEAP32[$118 >> 2] = $16; //@line 20830
      $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 20831
      HEAP32[$119 >> 2] = $18; //@line 20832
      $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 20833
      HEAP32[$120 >> 2] = $20; //@line 20834
      $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 20835
      HEAP32[$121 >> 2] = $22; //@line 20836
      $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 20837
      HEAP32[$122 >> 2] = $24; //@line 20838
      $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 20839
      HEAP32[$123 >> 2] = $26; //@line 20840
      $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 20841
      HEAP32[$124 >> 2] = $28; //@line 20842
      $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 20843
      HEAP32[$125 >> 2] = $$1143; //@line 20844
      $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 20845
      HEAP32[$126 >> 2] = $$1145; //@line 20846
      $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 20847
      HEAP32[$127 >> 2] = $74; //@line 20848
      $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 20849
      HEAP32[$128 >> 2] = $36; //@line 20850
      $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 20851
      HEAP32[$129 >> 2] = $38; //@line 20852
      $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 20853
      HEAP32[$130 >> 2] = $44; //@line 20854
      $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 20855
      HEAP32[$131 >> 2] = $46; //@line 20856
      $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 20857
      HEAP32[$132 >> 2] = $30; //@line 20858
      $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 20859
      HEAP32[$133 >> 2] = $$3154; //@line 20860
      sp = STACKTOP; //@line 20861
      return;
     }
     if (($$1145 | 0) > 0) {
      $136 = $74 + -2 | 0; //@line 20866
      switch ($136 >>> 1 | $136 << 31 | 0) {
      case 0:
       {
        HEAP32[$36 >> 2] = $2; //@line 20872
        $$5156 = _snprintf($$1143, $$1145, 12295, $36) | 0; //@line 20874
        break;
       }
      case 1:
       {
        HEAP32[$14 >> 2] = $2; //@line 20878
        $$5156 = _snprintf($$1143, $$1145, 12310, $14) | 0; //@line 20880
        break;
       }
      case 3:
       {
        HEAP32[$18 >> 2] = $2; //@line 20884
        $$5156 = _snprintf($$1143, $$1145, 12325, $18) | 0; //@line 20886
        break;
       }
      case 7:
       {
        HEAP32[$22 >> 2] = $2; //@line 20890
        $$5156 = _snprintf($$1143, $$1145, 12340, $22) | 0; //@line 20892
        break;
       }
      default:
       {
        $$5156 = _snprintf($$1143, $$1145, 12355, $26) | 0; //@line 20897
       }
      }
      $$5156$ = ($$5156 | 0) < ($$1145 | 0) ? $$5156 : 0; //@line 20901
      $147 = $$1143 + $$5156$ | 0; //@line 20903
      $148 = $$1145 - $$5156$ | 0; //@line 20904
      if (($$5156$ | 0) > 0 & ($148 | 0) > 0) {
       $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 20908
       $150 = _vsnprintf($147, $148, $10, $12) | 0; //@line 20909
       if (___async) {
        HEAP32[$ReallocAsyncCtx10 >> 2] = 148; //@line 20912
        $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 20913
        $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 20914
        HEAP8[$151 >> 0] = $$1$off0$expand_i1_val18; //@line 20915
        $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 20916
        HEAP32[$152 >> 2] = $4; //@line 20917
        $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 20918
        HEAP32[$153 >> 2] = $6; //@line 20919
        $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 20920
        HEAP32[$154 >> 2] = $148; //@line 20921
        $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 20922
        HEAP32[$155 >> 2] = $147; //@line 20923
        $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 20924
        HEAP32[$156 >> 2] = $32; //@line 20925
        $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 20926
        HEAP32[$157 >> 2] = $34; //@line 20927
        sp = STACKTOP; //@line 20928
        return;
       }
       HEAP32[___async_retval >> 2] = $150; //@line 20932
       ___async_unwind = 0; //@line 20933
       HEAP32[$ReallocAsyncCtx10 >> 2] = 148; //@line 20934
       $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 20935
       $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 20936
       HEAP8[$151 >> 0] = $$1$off0$expand_i1_val18; //@line 20937
       $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 20938
       HEAP32[$152 >> 2] = $4; //@line 20939
       $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 20940
       HEAP32[$153 >> 2] = $6; //@line 20941
       $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 20942
       HEAP32[$154 >> 2] = $148; //@line 20943
       $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 20944
       HEAP32[$155 >> 2] = $147; //@line 20945
       $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 20946
       HEAP32[$156 >> 2] = $32; //@line 20947
       $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 20948
       HEAP32[$157 >> 2] = $34; //@line 20949
       sp = STACKTOP; //@line 20950
       return;
      }
     }
    }
    $159 = HEAP32[174] | 0; //@line 20955
    $160 = HEAP32[167] | 0; //@line 20956
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 20957
    FUNCTION_TABLE_vi[$159 & 1023]($160); //@line 20958
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 20961
     sp = STACKTOP; //@line 20962
     return;
    }
    ___async_unwind = 0; //@line 20965
    HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 20966
    sp = STACKTOP; //@line 20967
    return;
   }
  }
 } while (0);
 $161 = HEAP32[177] | 0; //@line 20972
 if (!$161) {
  return;
 }
 $163 = HEAP32[178] | 0; //@line 20977
 HEAP32[178] = 0; //@line 20978
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 20979
 FUNCTION_TABLE_v[$161 & 15](); //@line 20980
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 20983
  $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 20984
  HEAP32[$164 >> 2] = $163; //@line 20985
  sp = STACKTOP; //@line 20986
  return;
 }
 ___async_unwind = 0; //@line 20989
 HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 20990
 $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 20991
 HEAP32[$164 >> 2] = $163; //@line 20992
 sp = STACKTOP; //@line 20993
 return;
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 10356
 $3 = HEAP32[5973] | 0; //@line 10357
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 10360
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 10364
 $7 = $6 & 3; //@line 10365
 if (($7 | 0) == 1) {
  _abort(); //@line 10368
 }
 $9 = $6 & -8; //@line 10371
 $10 = $2 + $9 | 0; //@line 10372
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 10377
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 10383
   $17 = $13 + $9 | 0; //@line 10384
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 10387
   }
   if ((HEAP32[5974] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 10393
    $106 = HEAP32[$105 >> 2] | 0; //@line 10394
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 10398
     $$1382 = $17; //@line 10398
     $114 = $16; //@line 10398
     break;
    }
    HEAP32[5971] = $17; //@line 10401
    HEAP32[$105 >> 2] = $106 & -2; //@line 10403
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 10406
    HEAP32[$16 + $17 >> 2] = $17; //@line 10408
    return;
   }
   $21 = $13 >>> 3; //@line 10411
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 10415
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 10417
    $28 = 23916 + ($21 << 1 << 2) | 0; //@line 10419
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 10424
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 10431
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[5969] = HEAP32[5969] & ~(1 << $21); //@line 10441
     $$1 = $16; //@line 10442
     $$1382 = $17; //@line 10442
     $114 = $16; //@line 10442
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 10448
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 10452
     }
     $41 = $26 + 8 | 0; //@line 10455
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 10459
     } else {
      _abort(); //@line 10461
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 10466
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 10467
    $$1 = $16; //@line 10468
    $$1382 = $17; //@line 10468
    $114 = $16; //@line 10468
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 10472
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 10474
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 10478
     $60 = $59 + 4 | 0; //@line 10479
     $61 = HEAP32[$60 >> 2] | 0; //@line 10480
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 10483
      if (!$63) {
       $$3 = 0; //@line 10486
       break;
      } else {
       $$1387 = $63; //@line 10489
       $$1390 = $59; //@line 10489
      }
     } else {
      $$1387 = $61; //@line 10492
      $$1390 = $60; //@line 10492
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 10495
      $66 = HEAP32[$65 >> 2] | 0; //@line 10496
      if ($66 | 0) {
       $$1387 = $66; //@line 10499
       $$1390 = $65; //@line 10499
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 10502
      $69 = HEAP32[$68 >> 2] | 0; //@line 10503
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 10508
       $$1390 = $68; //@line 10508
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 10513
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 10516
      $$3 = $$1387; //@line 10517
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 10522
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 10525
     }
     $53 = $51 + 12 | 0; //@line 10528
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 10532
     }
     $56 = $48 + 8 | 0; //@line 10535
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 10539
      HEAP32[$56 >> 2] = $51; //@line 10540
      $$3 = $48; //@line 10541
      break;
     } else {
      _abort(); //@line 10544
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 10551
    $$1382 = $17; //@line 10551
    $114 = $16; //@line 10551
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 10554
    $75 = 24180 + ($74 << 2) | 0; //@line 10555
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 10560
      if (!$$3) {
       HEAP32[5970] = HEAP32[5970] & ~(1 << $74); //@line 10567
       $$1 = $16; //@line 10568
       $$1382 = $17; //@line 10568
       $114 = $16; //@line 10568
       break L10;
      }
     } else {
      if ((HEAP32[5973] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 10575
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 10583
       if (!$$3) {
        $$1 = $16; //@line 10586
        $$1382 = $17; //@line 10586
        $114 = $16; //@line 10586
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[5973] | 0; //@line 10594
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 10597
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 10601
    $92 = $16 + 16 | 0; //@line 10602
    $93 = HEAP32[$92 >> 2] | 0; //@line 10603
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 10609
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 10613
       HEAP32[$93 + 24 >> 2] = $$3; //@line 10615
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 10621
    if (!$99) {
     $$1 = $16; //@line 10624
     $$1382 = $17; //@line 10624
     $114 = $16; //@line 10624
    } else {
     if ((HEAP32[5973] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 10629
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 10633
      HEAP32[$99 + 24 >> 2] = $$3; //@line 10635
      $$1 = $16; //@line 10636
      $$1382 = $17; //@line 10636
      $114 = $16; //@line 10636
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 10642
   $$1382 = $9; //@line 10642
   $114 = $2; //@line 10642
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 10647
 }
 $115 = $10 + 4 | 0; //@line 10650
 $116 = HEAP32[$115 >> 2] | 0; //@line 10651
 if (!($116 & 1)) {
  _abort(); //@line 10655
 }
 if (!($116 & 2)) {
  if ((HEAP32[5975] | 0) == ($10 | 0)) {
   $124 = (HEAP32[5972] | 0) + $$1382 | 0; //@line 10665
   HEAP32[5972] = $124; //@line 10666
   HEAP32[5975] = $$1; //@line 10667
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 10670
   if (($$1 | 0) != (HEAP32[5974] | 0)) {
    return;
   }
   HEAP32[5974] = 0; //@line 10676
   HEAP32[5971] = 0; //@line 10677
   return;
  }
  if ((HEAP32[5974] | 0) == ($10 | 0)) {
   $132 = (HEAP32[5971] | 0) + $$1382 | 0; //@line 10684
   HEAP32[5971] = $132; //@line 10685
   HEAP32[5974] = $114; //@line 10686
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 10689
   HEAP32[$114 + $132 >> 2] = $132; //@line 10691
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 10695
  $138 = $116 >>> 3; //@line 10696
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 10701
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 10703
    $145 = 23916 + ($138 << 1 << 2) | 0; //@line 10705
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[5973] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 10711
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 10718
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[5969] = HEAP32[5969] & ~(1 << $138); //@line 10728
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 10734
    } else {
     if ((HEAP32[5973] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 10739
     }
     $160 = $143 + 8 | 0; //@line 10742
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 10746
     } else {
      _abort(); //@line 10748
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 10753
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 10754
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 10757
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 10759
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 10763
      $180 = $179 + 4 | 0; //@line 10764
      $181 = HEAP32[$180 >> 2] | 0; //@line 10765
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 10768
       if (!$183) {
        $$3400 = 0; //@line 10771
        break;
       } else {
        $$1398 = $183; //@line 10774
        $$1402 = $179; //@line 10774
       }
      } else {
       $$1398 = $181; //@line 10777
       $$1402 = $180; //@line 10777
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 10780
       $186 = HEAP32[$185 >> 2] | 0; //@line 10781
       if ($186 | 0) {
        $$1398 = $186; //@line 10784
        $$1402 = $185; //@line 10784
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 10787
       $189 = HEAP32[$188 >> 2] | 0; //@line 10788
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 10793
        $$1402 = $188; //@line 10793
       }
      }
      if ((HEAP32[5973] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 10799
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 10802
       $$3400 = $$1398; //@line 10803
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 10808
      if ((HEAP32[5973] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 10812
      }
      $173 = $170 + 12 | 0; //@line 10815
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 10819
      }
      $176 = $167 + 8 | 0; //@line 10822
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 10826
       HEAP32[$176 >> 2] = $170; //@line 10827
       $$3400 = $167; //@line 10828
       break;
      } else {
       _abort(); //@line 10831
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 10839
     $196 = 24180 + ($195 << 2) | 0; //@line 10840
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 10845
       if (!$$3400) {
        HEAP32[5970] = HEAP32[5970] & ~(1 << $195); //@line 10852
        break L108;
       }
      } else {
       if ((HEAP32[5973] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 10859
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 10867
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[5973] | 0; //@line 10877
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 10880
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 10884
     $213 = $10 + 16 | 0; //@line 10885
     $214 = HEAP32[$213 >> 2] | 0; //@line 10886
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 10892
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 10896
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 10898
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 10904
     if ($220 | 0) {
      if ((HEAP32[5973] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 10910
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 10914
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 10916
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 10925
  HEAP32[$114 + $137 >> 2] = $137; //@line 10927
  if (($$1 | 0) == (HEAP32[5974] | 0)) {
   HEAP32[5971] = $137; //@line 10931
   return;
  } else {
   $$2 = $137; //@line 10934
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 10938
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 10941
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 10943
  $$2 = $$1382; //@line 10944
 }
 $235 = $$2 >>> 3; //@line 10946
 if ($$2 >>> 0 < 256) {
  $238 = 23916 + ($235 << 1 << 2) | 0; //@line 10950
  $239 = HEAP32[5969] | 0; //@line 10951
  $240 = 1 << $235; //@line 10952
  if (!($239 & $240)) {
   HEAP32[5969] = $239 | $240; //@line 10957
   $$0403 = $238; //@line 10959
   $$pre$phiZ2D = $238 + 8 | 0; //@line 10959
  } else {
   $244 = $238 + 8 | 0; //@line 10961
   $245 = HEAP32[$244 >> 2] | 0; //@line 10962
   if ((HEAP32[5973] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 10966
   } else {
    $$0403 = $245; //@line 10969
    $$pre$phiZ2D = $244; //@line 10969
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 10972
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 10974
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 10976
  HEAP32[$$1 + 12 >> 2] = $238; //@line 10978
  return;
 }
 $251 = $$2 >>> 8; //@line 10981
 if (!$251) {
  $$0396 = 0; //@line 10984
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 10988
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 10992
   $257 = $251 << $256; //@line 10993
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 10996
   $262 = $257 << $260; //@line 10998
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 11001
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 11006
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 11012
  }
 }
 $276 = 24180 + ($$0396 << 2) | 0; //@line 11015
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 11017
 HEAP32[$$1 + 20 >> 2] = 0; //@line 11020
 HEAP32[$$1 + 16 >> 2] = 0; //@line 11021
 $280 = HEAP32[5970] | 0; //@line 11022
 $281 = 1 << $$0396; //@line 11023
 do {
  if (!($280 & $281)) {
   HEAP32[5970] = $280 | $281; //@line 11029
   HEAP32[$276 >> 2] = $$1; //@line 11030
   HEAP32[$$1 + 24 >> 2] = $276; //@line 11032
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 11034
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 11036
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 11044
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 11044
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 11051
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 11055
    $301 = HEAP32[$299 >> 2] | 0; //@line 11057
    if (!$301) {
     label = 121; //@line 11060
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 11063
     $$0384 = $301; //@line 11063
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[5973] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 11070
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 11073
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 11075
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 11077
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 11079
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 11084
    $309 = HEAP32[$308 >> 2] | 0; //@line 11085
    $310 = HEAP32[5973] | 0; //@line 11086
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 11092
     HEAP32[$308 >> 2] = $$1; //@line 11093
     HEAP32[$$1 + 8 >> 2] = $309; //@line 11095
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 11097
     HEAP32[$$1 + 24 >> 2] = 0; //@line 11099
     break;
    } else {
     _abort(); //@line 11102
    }
   }
  }
 } while (0);
 $319 = (HEAP32[5977] | 0) + -1 | 0; //@line 11109
 HEAP32[5977] = $319; //@line 11110
 if (!$319) {
  $$0212$in$i = 24332; //@line 11113
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 11118
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 11124
  }
 }
 HEAP32[5977] = -1; //@line 11127
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_421($0) {
 $0 = $0 | 0;
 var $$013$i = 0, $$01720$i55 = 0, $$019$i = 0, $$019$i52 = 0, $$021$i54 = 0, $$09$i = 0, $$09$i41 = 0, $$09$i45 = 0, $$sink$sink$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $127 = 0, $130 = 0, $14 = 0, $143 = 0, $146 = 0, $154 = 0, $155 = 0, $16 = 0, $168 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $183 = 0, $2 = 0, $20 = 0, $200 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0, $154$looptemp = 0;
 sp = STACKTOP; //@line 31965
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31967
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31969
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31971
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31973
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31975
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31977
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31979
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31981
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31983
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31985
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31987
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 31989
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 31991
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 31993
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 31995
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 31997
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 31999
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 32001
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 32003
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 32005
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 32007
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 32009
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 32011
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 32013
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 32015
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 32017
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 32019
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 32021
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 32023
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 32025
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 32027
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 32029
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 32031
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 32033
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 32035
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 32037
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 32039
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 32041
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 32043
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 32045
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 32047
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 32049
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 32051
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 32053
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 32055
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 32057
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 32059
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 32061
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 32063
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 32065
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 32067
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 32069
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 32073
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 32075
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 32077
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 32079
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 32081
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 32083
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 32085
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 32087
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 32089
 L2 : do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   switch ($114 | 0) {
   case 16:
    {
     $$019$i52 = 135; //@line 32097
     break;
    }
   case 8:
    {
     $$019$i52 = 27; //@line 32101
     break;
    }
   default:
    {
     break L2;
    }
   }
   $127 = $114 + -1 | 0; //@line 32108
   $$01720$i55 = 0; //@line 32109
   $$021$i54 = $127; //@line 32109
   while (1) {
    $130 = HEAPU8[$94 + $$021$i54 >> 0] | 0; //@line 32113
    HEAP8[$124 + $$021$i54 >> 0] = $130 << 1 | $$01720$i55; //@line 32118
    if (($$021$i54 | 0) > 0) {
     $$01720$i55 = $130 >>> 7; //@line 32123
     $$021$i54 = $$021$i54 + -1 | 0; //@line 32123
    } else {
     break;
    }
   }
   $143 = $124 + $127 | 0; //@line 32133
   $146 = $$019$i52 & 0 - ((HEAPU8[$84 >> 0] | 0) >>> 7) ^ (HEAPU8[$143 >> 0] | 0); //@line 32136
   HEAP8[$143 >> 0] = $146; //@line 32138
   switch ($114 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 32141
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 32145
     break;
    }
   default:
    {
     break L2;
    }
   }
   HEAP8[$26 + $127 >> 0] = $146 << 1; //@line 32155
   if (($127 | 0) > 0) {
    $154 = $146; //@line 32159
    $155 = $114 + -2 | 0; //@line 32159
    while (1) {
     $154$looptemp = $154;
     $154 = HEAPU8[$124 + $155 >> 0] | 0; //@line 32164
     HEAP8[$26 + $155 >> 0] = $154 << 1 | $154$looptemp >>> 7; //@line 32169
     if (($155 | 0) <= 0) {
      break;
     } else {
      $155 = $155 + -1 | 0; //@line 32173
     }
    }
   }
   $168 = $26 + $127 | 0; //@line 32184
   HEAP8[$168 >> 0] = $$019$i & 0 - ((HEAPU8[$2 >> 0] | 0) >>> 7) ^ (HEAPU8[$168 >> 0] | 0); //@line 32189
  }
 } while (0);
 HEAP8[$84 >> 0] = 0; //@line 32192
 HEAP8[$72 >> 0] = 0; //@line 32193
 HEAP8[$42 >> 0] = 0; //@line 32194
 HEAP8[$38 >> 0] = 0; //@line 32195
 HEAP8[$76 >> 0] = 0; //@line 32196
 HEAP8[$56 >> 0] = 0; //@line 32197
 HEAP8[$30 >> 0] = 0; //@line 32198
 HEAP8[$112 >> 0] = 0; //@line 32199
 HEAP8[$46 >> 0] = 0; //@line 32200
 HEAP8[$50 >> 0] = 0; //@line 32201
 HEAP8[$120 >> 0] = 0; //@line 32202
 HEAP8[$92 >> 0] = 0; //@line 32203
 HEAP8[$60 >> 0] = 0; //@line 32204
 HEAP8[$78 >> 0] = 0; //@line 32205
 HEAP8[$108 >> 0] = 0; //@line 32206
 HEAP8[$18 >> 0] = 0; //@line 32207
 $173 = $104 + 16 | 0; //@line 32208
 $174 = $104 + 32 | 0; //@line 32209
 $175 = HEAP32[$174 >> 2] | 0; //@line 32210
 if ($175 >>> 0 < $44 >>> 0) {
  $$013$i = 0; //@line 32213
  do {
   if ($$013$i >>> 0 < $175 >>> 0) {
    $$sink$sink$i = HEAP8[$104 + 16 + $$013$i >> 0] | 0; //@line 32219
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($175 | 0) ? -128 : 0; //@line 32223
   }
   HEAP8[$20 + $$013$i >> 0] = $$sink$sink$i; //@line 32226
   $$013$i = $$013$i + 1 | 0; //@line 32227
  } while (($$013$i | 0) != ($44 | 0));
  $$09$i45 = 0; //@line 32230
  do {
   $183 = $20 + $$09$i45 | 0; //@line 32237
   HEAP8[$183 >> 0] = HEAP8[$26 + $$09$i45 >> 0] ^ HEAP8[$183 >> 0]; //@line 32242
   $$09$i45 = $$09$i45 + 1 | 0; //@line 32243
  } while (($$09$i45 | 0) != ($44 | 0));
  label = 21; //@line 32246
 } else {
  if ($44 | 0) {
   $$09$i41 = 0; //@line 32255
   do {
    HEAP8[$20 + $$09$i41 >> 0] = HEAP8[$124 + $$09$i41 >> 0] ^ HEAP8[$104 + 16 + $$09$i41 >> 0]; //@line 32263
    $$09$i41 = $$09$i41 + 1 | 0; //@line 32264
   } while (($$09$i41 | 0) != ($44 | 0));
   label = 21; //@line 32267
  }
 }
 if ((label | 0) == 21) {
  if ($44 | 0) {
   $$09$i = 0; //@line 32278
   do {
    $200 = $104 + $$09$i | 0; //@line 32282
    HEAP8[$200 >> 0] = HEAP8[$200 >> 0] ^ HEAP8[$20 + $$09$i >> 0]; //@line 32285
    $$09$i = $$09$i + 1 | 0; //@line 32286
   } while (($$09$i | 0) != ($44 | 0));
  }
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(164) | 0; //@line 32296
 $204 = _mbedtls_cipher_update($28, $4, $44, $4, $10) | 0; //@line 32297
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 589; //@line 32300
  $205 = $ReallocAsyncCtx + 4 | 0; //@line 32301
  HEAP32[$205 >> 2] = $2; //@line 32302
  $206 = $ReallocAsyncCtx + 8 | 0; //@line 32303
  HEAP32[$206 >> 2] = $4; //@line 32304
  $207 = $ReallocAsyncCtx + 12 | 0; //@line 32305
  HEAP32[$207 >> 2] = $6; //@line 32306
  $208 = $ReallocAsyncCtx + 16 | 0; //@line 32307
  HEAP32[$208 >> 2] = $8; //@line 32308
  $209 = $ReallocAsyncCtx + 20 | 0; //@line 32309
  HEAP32[$209 >> 2] = $12; //@line 32310
  $210 = $ReallocAsyncCtx + 24 | 0; //@line 32311
  HEAP32[$210 >> 2] = $14; //@line 32312
  $211 = $ReallocAsyncCtx + 28 | 0; //@line 32313
  HEAP32[$211 >> 2] = $16; //@line 32314
  $212 = $ReallocAsyncCtx + 32 | 0; //@line 32315
  HEAP32[$212 >> 2] = $22; //@line 32316
  $213 = $ReallocAsyncCtx + 36 | 0; //@line 32317
  HEAP32[$213 >> 2] = $24; //@line 32318
  $214 = $ReallocAsyncCtx + 40 | 0; //@line 32319
  HEAP32[$214 >> 2] = $32; //@line 32320
  $215 = $ReallocAsyncCtx + 44 | 0; //@line 32321
  HEAP32[$215 >> 2] = $34; //@line 32322
  $216 = $ReallocAsyncCtx + 48 | 0; //@line 32323
  HEAP32[$216 >> 2] = $36; //@line 32324
  $217 = $ReallocAsyncCtx + 52 | 0; //@line 32325
  HEAP32[$217 >> 2] = $40; //@line 32326
  $218 = $ReallocAsyncCtx + 56 | 0; //@line 32327
  HEAP32[$218 >> 2] = $44; //@line 32328
  $219 = $ReallocAsyncCtx + 60 | 0; //@line 32329
  HEAP32[$219 >> 2] = $48; //@line 32330
  $220 = $ReallocAsyncCtx + 64 | 0; //@line 32331
  HEAP32[$220 >> 2] = $52; //@line 32332
  $221 = $ReallocAsyncCtx + 68 | 0; //@line 32333
  HEAP32[$221 >> 2] = $54; //@line 32334
  $222 = $ReallocAsyncCtx + 72 | 0; //@line 32335
  HEAP32[$222 >> 2] = $174; //@line 32336
  $223 = $ReallocAsyncCtx + 76 | 0; //@line 32337
  HEAP32[$223 >> 2] = $58; //@line 32338
  $224 = $ReallocAsyncCtx + 80 | 0; //@line 32339
  HEAP32[$224 >> 2] = $62; //@line 32340
  $225 = $ReallocAsyncCtx + 84 | 0; //@line 32341
  HEAP32[$225 >> 2] = $64; //@line 32342
  $226 = $ReallocAsyncCtx + 88 | 0; //@line 32343
  HEAP32[$226 >> 2] = $66; //@line 32344
  $227 = $ReallocAsyncCtx + 92 | 0; //@line 32345
  HEAP32[$227 >> 2] = $68; //@line 32346
  $228 = $ReallocAsyncCtx + 96 | 0; //@line 32347
  HEAP32[$228 >> 2] = $70; //@line 32348
  $229 = $ReallocAsyncCtx + 100 | 0; //@line 32349
  HEAP32[$229 >> 2] = $74; //@line 32350
  $230 = $ReallocAsyncCtx + 104 | 0; //@line 32351
  HEAP32[$230 >> 2] = $173; //@line 32352
  $231 = $ReallocAsyncCtx + 108 | 0; //@line 32353
  HEAP32[$231 >> 2] = $80; //@line 32354
  $232 = $ReallocAsyncCtx + 112 | 0; //@line 32355
  HEAP32[$232 >> 2] = $82; //@line 32356
  $233 = $ReallocAsyncCtx + 116 | 0; //@line 32357
  HEAP32[$233 >> 2] = $86; //@line 32358
  $234 = $ReallocAsyncCtx + 120 | 0; //@line 32359
  HEAP32[$234 >> 2] = $88; //@line 32360
  $235 = $ReallocAsyncCtx + 124 | 0; //@line 32361
  HEAP32[$235 >> 2] = $90; //@line 32362
  $236 = $ReallocAsyncCtx + 128 | 0; //@line 32363
  HEAP32[$236 >> 2] = $96; //@line 32364
  $237 = $ReallocAsyncCtx + 132 | 0; //@line 32365
  HEAP32[$237 >> 2] = $98; //@line 32366
  $238 = $ReallocAsyncCtx + 136 | 0; //@line 32367
  HEAP32[$238 >> 2] = $100; //@line 32368
  $239 = $ReallocAsyncCtx + 140 | 0; //@line 32369
  HEAP32[$239 >> 2] = $102; //@line 32370
  $240 = $ReallocAsyncCtx + 144 | 0; //@line 32371
  HEAP32[$240 >> 2] = $104; //@line 32372
  $241 = $ReallocAsyncCtx + 148 | 0; //@line 32373
  HEAP32[$241 >> 2] = $110; //@line 32374
  $242 = $ReallocAsyncCtx + 152 | 0; //@line 32375
  HEAP32[$242 >> 2] = $116; //@line 32376
  $243 = $ReallocAsyncCtx + 156 | 0; //@line 32377
  HEAP32[$243 >> 2] = $118; //@line 32378
  $244 = $ReallocAsyncCtx + 160 | 0; //@line 32379
  HEAP32[$244 >> 2] = $122; //@line 32380
  sp = STACKTOP; //@line 32381
  return;
 }
 HEAP32[___async_retval >> 2] = $204; //@line 32385
 ___async_unwind = 0; //@line 32386
 HEAP32[$ReallocAsyncCtx >> 2] = 589; //@line 32387
 $205 = $ReallocAsyncCtx + 4 | 0; //@line 32388
 HEAP32[$205 >> 2] = $2; //@line 32389
 $206 = $ReallocAsyncCtx + 8 | 0; //@line 32390
 HEAP32[$206 >> 2] = $4; //@line 32391
 $207 = $ReallocAsyncCtx + 12 | 0; //@line 32392
 HEAP32[$207 >> 2] = $6; //@line 32393
 $208 = $ReallocAsyncCtx + 16 | 0; //@line 32394
 HEAP32[$208 >> 2] = $8; //@line 32395
 $209 = $ReallocAsyncCtx + 20 | 0; //@line 32396
 HEAP32[$209 >> 2] = $12; //@line 32397
 $210 = $ReallocAsyncCtx + 24 | 0; //@line 32398
 HEAP32[$210 >> 2] = $14; //@line 32399
 $211 = $ReallocAsyncCtx + 28 | 0; //@line 32400
 HEAP32[$211 >> 2] = $16; //@line 32401
 $212 = $ReallocAsyncCtx + 32 | 0; //@line 32402
 HEAP32[$212 >> 2] = $22; //@line 32403
 $213 = $ReallocAsyncCtx + 36 | 0; //@line 32404
 HEAP32[$213 >> 2] = $24; //@line 32405
 $214 = $ReallocAsyncCtx + 40 | 0; //@line 32406
 HEAP32[$214 >> 2] = $32; //@line 32407
 $215 = $ReallocAsyncCtx + 44 | 0; //@line 32408
 HEAP32[$215 >> 2] = $34; //@line 32409
 $216 = $ReallocAsyncCtx + 48 | 0; //@line 32410
 HEAP32[$216 >> 2] = $36; //@line 32411
 $217 = $ReallocAsyncCtx + 52 | 0; //@line 32412
 HEAP32[$217 >> 2] = $40; //@line 32413
 $218 = $ReallocAsyncCtx + 56 | 0; //@line 32414
 HEAP32[$218 >> 2] = $44; //@line 32415
 $219 = $ReallocAsyncCtx + 60 | 0; //@line 32416
 HEAP32[$219 >> 2] = $48; //@line 32417
 $220 = $ReallocAsyncCtx + 64 | 0; //@line 32418
 HEAP32[$220 >> 2] = $52; //@line 32419
 $221 = $ReallocAsyncCtx + 68 | 0; //@line 32420
 HEAP32[$221 >> 2] = $54; //@line 32421
 $222 = $ReallocAsyncCtx + 72 | 0; //@line 32422
 HEAP32[$222 >> 2] = $174; //@line 32423
 $223 = $ReallocAsyncCtx + 76 | 0; //@line 32424
 HEAP32[$223 >> 2] = $58; //@line 32425
 $224 = $ReallocAsyncCtx + 80 | 0; //@line 32426
 HEAP32[$224 >> 2] = $62; //@line 32427
 $225 = $ReallocAsyncCtx + 84 | 0; //@line 32428
 HEAP32[$225 >> 2] = $64; //@line 32429
 $226 = $ReallocAsyncCtx + 88 | 0; //@line 32430
 HEAP32[$226 >> 2] = $66; //@line 32431
 $227 = $ReallocAsyncCtx + 92 | 0; //@line 32432
 HEAP32[$227 >> 2] = $68; //@line 32433
 $228 = $ReallocAsyncCtx + 96 | 0; //@line 32434
 HEAP32[$228 >> 2] = $70; //@line 32435
 $229 = $ReallocAsyncCtx + 100 | 0; //@line 32436
 HEAP32[$229 >> 2] = $74; //@line 32437
 $230 = $ReallocAsyncCtx + 104 | 0; //@line 32438
 HEAP32[$230 >> 2] = $173; //@line 32439
 $231 = $ReallocAsyncCtx + 108 | 0; //@line 32440
 HEAP32[$231 >> 2] = $80; //@line 32441
 $232 = $ReallocAsyncCtx + 112 | 0; //@line 32442
 HEAP32[$232 >> 2] = $82; //@line 32443
 $233 = $ReallocAsyncCtx + 116 | 0; //@line 32444
 HEAP32[$233 >> 2] = $86; //@line 32445
 $234 = $ReallocAsyncCtx + 120 | 0; //@line 32446
 HEAP32[$234 >> 2] = $88; //@line 32447
 $235 = $ReallocAsyncCtx + 124 | 0; //@line 32448
 HEAP32[$235 >> 2] = $90; //@line 32449
 $236 = $ReallocAsyncCtx + 128 | 0; //@line 32450
 HEAP32[$236 >> 2] = $96; //@line 32451
 $237 = $ReallocAsyncCtx + 132 | 0; //@line 32452
 HEAP32[$237 >> 2] = $98; //@line 32453
 $238 = $ReallocAsyncCtx + 136 | 0; //@line 32454
 HEAP32[$238 >> 2] = $100; //@line 32455
 $239 = $ReallocAsyncCtx + 140 | 0; //@line 32456
 HEAP32[$239 >> 2] = $102; //@line 32457
 $240 = $ReallocAsyncCtx + 144 | 0; //@line 32458
 HEAP32[$240 >> 2] = $104; //@line 32459
 $241 = $ReallocAsyncCtx + 148 | 0; //@line 32460
 HEAP32[$241 >> 2] = $110; //@line 32461
 $242 = $ReallocAsyncCtx + 152 | 0; //@line 32462
 HEAP32[$242 >> 2] = $116; //@line 32463
 $243 = $ReallocAsyncCtx + 156 | 0; //@line 32464
 HEAP32[$243 >> 2] = $118; //@line 32465
 $244 = $ReallocAsyncCtx + 160 | 0; //@line 32466
 HEAP32[$244 >> 2] = $122; //@line 32467
 sp = STACKTOP; //@line 32468
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$ = 0, $$058 = 0, $$059 = 0, $$062 = 0, $$06272 = 0, $$06273 = 0, $$064 = 0, $$06471 = 0, $$06575 = 0, $$06874 = 0, $$1 = 0, $$163 = 0, $$166 = 0, $$16670 = 0, $$267 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $109 = 0, $11 = 0, $115 = 0, $121 = 0, $135 = 0, $149 = 0, $15 = 0, $154 = 0, $155 = 0, $168 = 0, $169 = 0, $170 = 0, $176 = 0, $177 = 0, $181 = 0, $183 = 0, $189 = 0, $190 = 0, $193 = 0, $195 = 0, $210 = 0, $223 = 0, $228 = 0, $231 = 0, $232 = 0, $233 = 0, $244 = 0, $40 = 0, $6 = 0, $64 = 0, $7 = 0, $74 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12649
 STACKTOP = STACKTOP + 16 | 0; //@line 12650
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12650
 $vararg_buffer = sp; //@line 12651
 $6 = sp + 4 | 0; //@line 12652
 HEAP32[$6 >> 2] = 0; //@line 12653
 $7 = $0 + 1440 | 0; //@line 12654
 $8 = $0 + 1177 | 0; //@line 12655
 HEAP8[$8 >> 0] = 0; //@line 12656
 $9 = ($4 | 0) == 0; //@line 12657
 $$ = $9 ? 0 : $5; //@line 12658
 HEAP16[$7 >> 1] = $$; //@line 12659
 $11 = $0 + 1185 | 0; //@line 12661
 HEAP8[$11 >> 0] = HEAP8[$1 >> 0] | 0; //@line 12662
 L1 : do {
  switch ((HEAPU8[$1 >> 0] | 0) >>> 5 & 7) {
  case 0:
   {
    HEAP16[$7 >> 1] = 1; //@line 12669
    $15 = HEAP32[$0 + 1708 >> 2] | 0; //@line 12672
    HEAP8[$0 + 1193 >> 0] = HEAP8[$15 >> 0] | 0; //@line 12677
    HEAP8[$0 + 1192 >> 0] = HEAP8[$15 + 1 >> 0] | 0; //@line 12681
    HEAP8[$0 + 1191 >> 0] = HEAP8[$15 + 2 >> 0] | 0; //@line 12685
    HEAP8[$0 + 1190 >> 0] = HEAP8[$15 + 3 >> 0] | 0; //@line 12689
    HEAP8[$0 + 1189 >> 0] = HEAP8[$15 + 4 >> 0] | 0; //@line 12693
    HEAP8[$0 + 1188 >> 0] = HEAP8[$15 + 5 >> 0] | 0; //@line 12697
    HEAP8[$0 + 1187 >> 0] = HEAP8[$15 + 6 >> 0] | 0; //@line 12700
    HEAP8[$0 + 1186 >> 0] = HEAP8[$15 + 7 >> 0] | 0; //@line 12702
    HEAP16[$7 >> 1] = 9; //@line 12703
    $40 = HEAP32[$0 + 1704 >> 2] | 0; //@line 12706
    HEAP8[$0 + 1201 >> 0] = HEAP8[$40 >> 0] | 0; //@line 12711
    HEAP8[$0 + 1200 >> 0] = HEAP8[$40 + 1 >> 0] | 0; //@line 12715
    HEAP8[$0 + 1199 >> 0] = HEAP8[$40 + 2 >> 0] | 0; //@line 12719
    HEAP8[$0 + 1198 >> 0] = HEAP8[$40 + 3 >> 0] | 0; //@line 12723
    HEAP8[$0 + 1197 >> 0] = HEAP8[$40 + 4 >> 0] | 0; //@line 12727
    HEAP8[$0 + 1196 >> 0] = HEAP8[$40 + 5 >> 0] | 0; //@line 12731
    HEAP8[$0 + 1195 >> 0] = HEAP8[$40 + 6 >> 0] | 0; //@line 12734
    HEAP8[$0 + 1194 >> 0] = HEAP8[$40 + 7 >> 0] | 0; //@line 12736
    HEAP16[$7 >> 1] = 17; //@line 12737
    $AsyncCtx11 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12739
    $64 = __ZN7LoRaPHY13get_radio_rngEv($0 + 4 | 0) | 0; //@line 12740
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 392; //@line 12743
     HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 12745
     HEAP32[$AsyncCtx11 + 8 >> 2] = $7; //@line 12747
     HEAP32[$AsyncCtx11 + 12 >> 2] = $11; //@line 12749
     HEAP32[$AsyncCtx11 + 16 >> 2] = $6; //@line 12751
     HEAP32[$AsyncCtx11 + 20 >> 2] = $6; //@line 12753
     HEAP8[$AsyncCtx11 + 24 >> 0] = $3; //@line 12755
     HEAP32[$AsyncCtx11 + 28 >> 2] = $vararg_buffer; //@line 12757
     HEAP32[$AsyncCtx11 + 32 >> 2] = $vararg_buffer; //@line 12759
     sp = STACKTOP; //@line 12760
     STACKTOP = sp; //@line 12761
     return 0; //@line 12761
    }
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12763
    $74 = $0 + 1748 | 0; //@line 12765
    HEAP16[$74 >> 1] = $64; //@line 12766
    $76 = HEAP16[$7 >> 1] | 0; //@line 12768
    HEAP16[$7 >> 1] = $76 + 1 << 16 >> 16; //@line 12770
    HEAP8[($76 & 65535) + ($0 + 1185) >> 0] = $64; //@line 12773
    $82 = (HEAPU16[$74 >> 1] | 0) >>> 8 & 255; //@line 12776
    $83 = HEAP16[$7 >> 1] | 0; //@line 12777
    HEAP16[$7 >> 1] = $83 + 1 << 16 >> 16; //@line 12779
    HEAP8[($83 & 65535) + ($0 + 1185) >> 0] = $82; //@line 12782
    $89 = HEAP16[$7 >> 1] & 255; //@line 12785
    $91 = HEAP32[$0 + 1712 >> 2] | 0; //@line 12787
    $AsyncCtx3 = _emscripten_alloc_async_context(32, sp) | 0; //@line 12788
    $92 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($0 + 756 | 0, $11, $89, $91, 128, $6) | 0; //@line 12789
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 393; //@line 12792
     HEAP32[$AsyncCtx3 + 4 >> 2] = $6; //@line 12794
     HEAP32[$AsyncCtx3 + 8 >> 2] = $7; //@line 12796
     HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 12798
     HEAP32[$AsyncCtx3 + 16 >> 2] = $6; //@line 12800
     HEAP8[$AsyncCtx3 + 20 >> 0] = $3; //@line 12802
     HEAP32[$AsyncCtx3 + 24 >> 2] = $vararg_buffer; //@line 12804
     HEAP32[$AsyncCtx3 + 28 >> 2] = $vararg_buffer; //@line 12806
     sp = STACKTOP; //@line 12807
     STACKTOP = sp; //@line 12808
     return 0; //@line 12808
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12810
    if (!$92) {
     $101 = HEAP32[$6 >> 2] | 0; //@line 12813
     $103 = HEAP16[$7 >> 1] | 0; //@line 12815
     HEAP16[$7 >> 1] = $103 + 1 << 16 >> 16; //@line 12817
     HEAP8[($103 & 65535) + ($0 + 1185) >> 0] = $101; //@line 12820
     $109 = HEAP16[$7 >> 1] | 0; //@line 12823
     HEAP16[$7 >> 1] = $109 + 1 << 16 >> 16; //@line 12825
     HEAP8[($109 & 65535) + ($0 + 1185) >> 0] = $101 >>> 8; //@line 12828
     $115 = HEAP16[$7 >> 1] | 0; //@line 12831
     HEAP16[$7 >> 1] = $115 + 1 << 16 >> 16; //@line 12833
     HEAP8[($115 & 65535) + ($0 + 1185) >> 0] = $101 >>> 16; //@line 12836
     $121 = HEAP16[$7 >> 1] | 0; //@line 12839
     HEAP16[$7 >> 1] = $121 + 1 << 16 >> 16; //@line 12841
     HEAP8[($121 & 65535) + ($0 + 1185) >> 0] = $101 >>> 24; //@line 12844
     $$163 = $3; //@line 12845
     $$3 = 0; //@line 12845
     break L1;
    } else {
     $$059 = -1014; //@line 12848
     STACKTOP = sp; //@line 12849
     return $$059 | 0; //@line 12849
    }
    break;
   }
  case 4:
   {
    HEAP8[$8 >> 0] = 1; //@line 12854
    label = 9; //@line 12855
    break;
   }
  case 2:
   {
    label = 9; //@line 12859
    break;
   }
  case 7:
   {
    if ($9 | $$ << 16 >> 16 == 0) {
     $$163 = $3; //@line 12866
     $$3 = 0; //@line 12866
    } else {
     _memcpy($0 + 1186 | 0, $4 | 0, $$ & 65535 | 0) | 0; //@line 12870
     HEAP16[$7 >> 1] = (HEAPU16[$7 >> 1] | 0) + 1; //@line 12875
     $$163 = $3; //@line 12876
     $$3 = 0; //@line 12876
    }
    break;
   }
  default:
   {
    $$163 = $3; //@line 12881
    $$3 = -1002; //@line 12881
   }
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   if (!(HEAP8[$0 + 2360 >> 0] | 0)) {
    $$059 = -1009; //@line 12891
    STACKTOP = sp; //@line 12892
    return $$059 | 0; //@line 12892
   }
   if (HEAP8[$0 + 1936 >> 0] | 0) {
    $AsyncCtx7 = _emscripten_alloc_async_context(48, sp) | 0; //@line 12902
    $135 = __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($0 + 4 | 0, 1, $0 + 1877 | 0, $0 + 1876 | 0, $0 + 1768 | 0) | 0; //@line 12903
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 394; //@line 12906
     HEAP8[$AsyncCtx7 + 4 >> 0] = $3; //@line 12908
     HEAP32[$AsyncCtx7 + 8 >> 2] = $vararg_buffer; //@line 12910
     HEAP32[$AsyncCtx7 + 12 >> 2] = $vararg_buffer; //@line 12912
     HEAP32[$AsyncCtx7 + 16 >> 2] = $6; //@line 12914
     HEAP32[$AsyncCtx7 + 20 >> 2] = $6; //@line 12916
     HEAP32[$AsyncCtx7 + 24 >> 2] = $7; //@line 12918
     HEAP32[$AsyncCtx7 + 28 >> 2] = $0; //@line 12920
     HEAP8[$AsyncCtx7 + 32 >> 0] = $9 & 1; //@line 12923
     HEAP32[$AsyncCtx7 + 36 >> 2] = $2; //@line 12925
     HEAP32[$AsyncCtx7 + 40 >> 2] = $4; //@line 12927
     HEAP32[$AsyncCtx7 + 44 >> 2] = $11; //@line 12929
     sp = STACKTOP; //@line 12930
     STACKTOP = sp; //@line 12931
     return 0; //@line 12931
    }
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12933
    if ($135) {
     HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 64; //@line 12937
    }
   }
   $149 = $0 + 1178 | 0; //@line 12940
   if (!(HEAP8[$149 >> 0] | 0)) {
    $$pre$phiZ2D = $2; //@line 12944
   } else {
    HEAP8[$149 >> 0] = 0; //@line 12946
    HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 32; //@line 12949
    $$pre$phiZ2D = $2; //@line 12950
   }
   $154 = $0 + 1756 | 0; //@line 12952
   $155 = HEAP32[$154 >> 2] | 0; //@line 12953
   HEAP8[$0 + 1186 >> 0] = $155; //@line 12956
   HEAP8[$0 + 1187 >> 0] = $155 >>> 8; //@line 12960
   HEAP8[$0 + 1188 >> 0] = $155 >>> 16; //@line 12964
   HEAP8[$0 + 1189 >> 0] = $155 >>> 24; //@line 12968
   $168 = $0 + 1190 | 0; //@line 12970
   HEAP8[$168 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 12971
   $169 = $0 + 1760 | 0; //@line 12972
   $170 = HEAP32[$169 >> 2] | 0; //@line 12973
   HEAP8[$0 + 1191 >> 0] = $170; //@line 12976
   HEAP8[$0 + 1192 >> 0] = $170 >>> 8; //@line 12980
   $176 = $0 + 476 | 0; //@line 12981
   __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($176); //@line 12982
   $177 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($176) | 0; //@line 12983
   do {
    if ($9) {
     label = 27; //@line 12986
    } else {
     if (!(HEAP16[$7 >> 1] | 0)) {
      label = 27; //@line 12991
     } else {
      if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($176) | 0)) {
       __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($176); //@line 12995
       $$06272 = $3; //@line 12996
       $$06471 = $4; //@line 12996
       $$16670 = 8; //@line 12996
       label = 31; //@line 12997
       break;
      }
      $181 = $177 & 255; //@line 13000
      if (($177 & 255) >= 16) {
       HEAP16[$7 >> 1] = $177 & 255; //@line 13004
       $$062 = 0; //@line 13006
       $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($176) | 0; //@line 13006
       $$166 = 8; //@line 13006
       label = 30; //@line 13007
       break;
      }
      $183 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 13010
      $189 = ($183 & 255) + $181 & 15 | $183 & -16; //@line 13016
      HEAP8[$$pre$phiZ2D >> 0] = $189; //@line 13017
      HEAP8[$168 >> 0] = $189; //@line 13018
      $190 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($176) | 0; //@line 13019
      if (!($177 << 24 >> 24)) {
       __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($176); //@line 13022
       $$06272 = $3; //@line 13023
       $$06471 = $4; //@line 13023
       $$16670 = 8; //@line 13023
       label = 31; //@line 13024
       break;
      } else {
       $$06575 = 8; //@line 13027
       $$06874 = 0; //@line 13027
       $193 = 0; //@line 13027
       while (1) {
        $195 = $$06575 + 1 << 24 >> 24; //@line 13031
        HEAP8[($$06575 & 255) + ($0 + 1185) >> 0] = HEAP8[$190 + $193 >> 0] | 0; //@line 13034
        $$06874 = $$06874 + 1 << 16 >> 16; //@line 13035
        $193 = $$06874 & 65535; //@line 13036
        if ($193 >>> 0 >= $181 >>> 0) {
         $$062 = $3; //@line 13041
         $$064 = $4; //@line 13041
         $$166 = $195; //@line 13041
         label = 30; //@line 13042
         break;
        } else {
         $$06575 = $195; //@line 13039
        }
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 27) {
    if (!($177 << 24 >> 24)) {
     $$062 = $3; //@line 13053
     $$064 = $4; //@line 13053
     $$166 = 8; //@line 13053
     label = 30; //@line 13054
    } else {
     if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($176) | 0) {
      HEAP16[$7 >> 1] = $177 & 255; //@line 13059
      $$062 = 0; //@line 13061
      $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($176) | 0; //@line 13061
      $$166 = 8; //@line 13061
      label = 30; //@line 13062
     } else {
      $$062 = $3; //@line 13064
      $$064 = $4; //@line 13064
      $$166 = 8; //@line 13064
      label = 30; //@line 13065
     }
    }
   }
   if ((label | 0) == 30) {
    __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($176); //@line 13070
    if (!$$064) {
     $$06273 = $$062; //@line 13073
     $$1 = 0; //@line 13073
     $$267 = $$166; //@line 13073
    } else {
     $$06272 = $$062; //@line 13075
     $$06471 = $$064; //@line 13075
     $$16670 = $$166; //@line 13075
     label = 31; //@line 13076
    }
   }
   if ((label | 0) == 31) {
    if (!(HEAP16[$7 >> 1] | 0)) {
     $$06273 = $$06272; //@line 13083
     $$1 = 0; //@line 13083
     $$267 = $$16670; //@line 13083
    } else {
     $210 = $$16670 + 1 << 24 >> 24; //@line 13085
     HEAP8[($$16670 & 255) + ($0 + 1185) >> 0] = $$06272; //@line 13088
     if (!($$06272 << 24 >> 24)) {
      __ZN14LoRaMacCommand20clear_command_bufferEv($176); //@line 13092
      $$058 = $0 + 1716 | 0; //@line 13094
     } else {
      $$058 = $0 + 1732 | 0; //@line 13096
     }
     $223 = (__ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($0 + 756 | 0, $$06471, HEAP16[$7 >> 1] | 0, $$058, 128, HEAP32[$154 >> 2] | 0, 0, HEAP32[$169 >> 2] | 0, ($210 & 255) + ($0 + 1185) | 0) | 0) == 0; //@line 13105
     $$06273 = $$06272; //@line 13107
     $$1 = $223 ? 0 : -1014; //@line 13107
     $$267 = $210; //@line 13107
    }
   }
   $228 = (HEAPU16[$7 >> 1] | 0) + ($$267 & 255) & 65535; //@line 13114
   HEAP16[$7 >> 1] = $228; //@line 13115
   $231 = HEAP32[$154 >> 2] | 0; //@line 13118
   $232 = HEAP32[$169 >> 2] | 0; //@line 13119
   $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 13120
   $233 = __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($0 + 756 | 0, $11, $228, $0 + 1716 | 0, 128, $231, 0, $232, $6) | 0; //@line 13121
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 395; //@line 13124
    HEAP32[$AsyncCtx + 4 >> 2] = $$1; //@line 13126
    HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 13128
    HEAP32[$AsyncCtx + 12 >> 2] = $7; //@line 13130
    HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 13132
    HEAP8[$AsyncCtx + 20 >> 0] = $3; //@line 13134
    HEAP8[$AsyncCtx + 21 >> 0] = $$06273; //@line 13136
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 13138
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer; //@line 13140
    HEAP32[$AsyncCtx + 32 >> 2] = $6; //@line 13142
    sp = STACKTOP; //@line 13143
    STACKTOP = sp; //@line 13144
    return 0; //@line 13144
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13146
    $244 = HEAP32[$6 >> 2] | 0; //@line 13149
    HEAP8[(HEAPU16[$7 >> 1] | 0) + ($0 + 1185) >> 0] = $244; //@line 13154
    HEAP8[(HEAPU16[$7 >> 1] | 0) + 1 + ($0 + 1185) >> 0] = $244 >>> 8; //@line 13161
    HEAP8[(HEAPU16[$7 >> 1] | 0) + 2 + ($0 + 1185) >> 0] = $244 >>> 16; //@line 13168
    HEAP8[(HEAPU16[$7 >> 1] | 0) + 3 + ($0 + 1185) >> 0] = $244 >>> 24; //@line 13175
    HEAP16[$7 >> 1] = (HEAPU16[$7 >> 1] | 0) + 4; //@line 13180
    $$163 = $$06273; //@line 13181
    $$3 = ($233 | 0) == 0 ? $$1 : -1014; //@line 13181
    break;
   }
  }
 } while (0);
 HEAP32[$vararg_buffer >> 2] = $$163 & 255; //@line 13187
 _mbed_tracef(16, 13263, 13348, $vararg_buffer); //@line 13188
 $$059 = $$3; //@line 13189
 STACKTOP = sp; //@line 13190
 return $$059 | 0; //@line 13190
}
function _equeue_dispatch($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$03956$i = 0, $$03956$i$phi = 0, $$04055$i = 0, $$0405571$i = 0, $$04063$i = 0, $$04159$i = 0, $$04258$i = 0, $$057$i = 0, $$067 = 0, $$06992 = 0, $$2 = 0, $$idx = 0, $$sink$in$i$i = 0, $$sroa$0$i = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74 = 0, $10 = 0, $106 = 0, $11 = 0, $12 = 0, $129 = 0, $13 = 0, $131 = 0, $132 = 0, $133 = 0, $135 = 0, $136 = 0, $14 = 0, $144 = 0, $145 = 0, $147 = 0, $15 = 0, $150 = 0, $152 = 0, $155 = 0, $158 = 0, $165 = 0, $169 = 0, $172 = 0, $178 = 0, $2 = 0, $23 = 0, $24 = 0, $27 = 0, $33 = 0, $42 = 0, $45 = 0, $46 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $72 = 0, $74 = 0, $77 = 0, $8 = 0, $9 = 0, $96 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$04159$i$looptemp = 0, $$04258$i$looptemp = 0;
 sp = STACKTOP; //@line 3977
 STACKTOP = STACKTOP + 16 | 0; //@line 3978
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3978
 $$sroa$0$i = sp; //@line 3979
 $2 = $0 + 184 | 0; //@line 3980
 if (!(HEAP8[$2 >> 0] | 0)) {
  HEAP8[$2 >> 0] = 1; //@line 3984
 }
 $5 = _equeue_tick() | 0; //@line 3986
 $6 = $5 + $1 | 0; //@line 3987
 $7 = $0 + 36 | 0; //@line 3988
 HEAP8[$7 >> 0] = 0; //@line 3989
 $8 = $0 + 128 | 0; //@line 3990
 $9 = $0 + 9 | 0; //@line 3991
 $10 = $0 + 4 | 0; //@line 3992
 $11 = ($1 | 0) > -1; //@line 3993
 $12 = $0 + 48 | 0; //@line 3994
 $13 = $0 + 8 | 0; //@line 3995
 $$idx = $0 + 16 | 0; //@line 3996
 $14 = $0 + 156 | 0; //@line 3997
 $15 = $0 + 24 | 0; //@line 3998
 $$0 = $5; //@line 3999
 L4 : while (1) {
  _equeue_mutex_lock($8); //@line 4001
  HEAP8[$9 >> 0] = (HEAPU8[$9 >> 0] | 0) + 1; //@line 4006
  if (((HEAP32[$10 >> 2] | 0) - $$0 | 0) < 1) {
   HEAP32[$10 >> 2] = $$0; //@line 4011
  }
  $23 = HEAP32[$0 >> 2] | 0; //@line 4013
  HEAP32[$$sroa$0$i >> 2] = $23; //@line 4014
  $24 = $23; //@line 4015
  L9 : do {
   if (!$23) {
    $$04055$i = $$sroa$0$i; //@line 4019
    $33 = $24; //@line 4019
    label = 10; //@line 4020
   } else {
    $$04063$i = $$sroa$0$i; //@line 4022
    $27 = $24; //@line 4022
    do {
     if (((HEAP32[$27 + 20 >> 2] | 0) - $$0 | 0) >= 1) {
      $$04055$i = $$04063$i; //@line 4029
      $33 = $27; //@line 4029
      label = 10; //@line 4030
      break L9;
     }
     $$04063$i = $27 + 8 | 0; //@line 4033
     $27 = HEAP32[$$04063$i >> 2] | 0; //@line 4034
    } while (($27 | 0) != 0);
    HEAP32[$0 >> 2] = 0; //@line 4042
    $$0405571$i = $$04063$i; //@line 4043
   }
  } while (0);
  if ((label | 0) == 10) {
   label = 0; //@line 4047
   HEAP32[$0 >> 2] = $33; //@line 4048
   if (!$33) {
    $$0405571$i = $$04055$i; //@line 4051
   } else {
    HEAP32[$33 + 16 >> 2] = $0; //@line 4054
    $$0405571$i = $$04055$i; //@line 4055
   }
  }
  HEAP32[$$0405571$i >> 2] = 0; //@line 4058
  _equeue_mutex_unlock($8); //@line 4059
  $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74 = HEAP32[$$sroa$0$i >> 2] | 0; //@line 4060
  if (!$$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74) {} else {
   $$04159$i = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74; //@line 4064
   $$04258$i = $$sroa$0$i; //@line 4064
   do {
    $$04258$i$looptemp = $$04258$i;
    $$04258$i = $$04159$i + 8 | 0; //@line 4066
    $$04159$i$looptemp = $$04159$i;
    $$04159$i = HEAP32[$$04258$i >> 2] | 0; //@line 4067
    $$03956$i = 0; //@line 4068
    $$057$i = $$04159$i$looptemp; //@line 4068
    while (1) {
     HEAP32[$$057$i + 8 >> 2] = $$03956$i; //@line 4071
     $42 = HEAP32[$$057$i + 12 >> 2] | 0; //@line 4073
     if (!$42) {
      break;
     } else {
      $$03956$i$phi = $$057$i; //@line 4078
      $$057$i = $42; //@line 4078
      $$03956$i = $$03956$i$phi; //@line 4078
     }
    }
    HEAP32[$$04258$i$looptemp >> 2] = $$057$i; //@line 4081
   } while (($$04159$i | 0) != 0);
   $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 = HEAP32[$$sroa$0$i >> 2] | 0; //@line 4089
   if ($$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 | 0) {
    $$06992 = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75; //@line 4092
    while (1) {
     $45 = $$06992 + 8 | 0; //@line 4094
     $46 = HEAP32[$45 >> 2] | 0; //@line 4095
     $48 = HEAP32[$$06992 + 32 >> 2] | 0; //@line 4097
     if ($48 | 0) {
      $AsyncCtx = _emscripten_alloc_async_context(84, sp) | 0; //@line 4101
      FUNCTION_TABLE_vi[$48 & 1023]($$06992 + 36 | 0); //@line 4102
      if (___async) {
       label = 20; //@line 4105
       break L4;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 4108
     }
     $72 = HEAP32[$$06992 + 24 >> 2] | 0; //@line 4111
     if (($72 | 0) > -1) {
      $74 = $$06992 + 20 | 0; //@line 4114
      HEAP32[$74 >> 2] = (HEAP32[$74 >> 2] | 0) + $72; //@line 4117
      $77 = _equeue_tick() | 0; //@line 4118
      $AsyncCtx11 = _emscripten_alloc_async_context(76, sp) | 0; //@line 4119
      _equeue_enqueue($0, $$06992, $77) | 0; //@line 4120
      if (___async) {
       label = 24; //@line 4123
       break L4;
      }
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4126
     } else {
      $96 = $$06992 + 4 | 0; //@line 4129
      $97 = HEAP8[$96 >> 0] | 0; //@line 4130
      HEAP8[$96 >> 0] = (($97 + 1 & 255) << HEAP32[$$idx >> 2] | 0) == 0 ? 1 : ($97 & 255) + 1 & 255; //@line 4139
      $106 = HEAP32[$$06992 + 28 >> 2] | 0; //@line 4141
      if ($106 | 0) {
       $AsyncCtx3 = _emscripten_alloc_async_context(84, sp) | 0; //@line 4145
       FUNCTION_TABLE_vi[$106 & 1023]($$06992 + 36 | 0); //@line 4146
       if (___async) {
        label = 28; //@line 4149
        break L4;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4152
      }
      _equeue_mutex_lock($14); //@line 4154
      $129 = HEAP32[$15 >> 2] | 0; //@line 4155
      L40 : do {
       if (!$129) {
        $$02329$i$i = $15; //@line 4159
        label = 36; //@line 4160
       } else {
        $131 = HEAP32[$$06992 >> 2] | 0; //@line 4162
        $$025$i$i = $15; //@line 4163
        $133 = $129; //@line 4163
        while (1) {
         $132 = HEAP32[$133 >> 2] | 0; //@line 4165
         if ($132 >>> 0 >= $131 >>> 0) {
          break;
         }
         $135 = $133 + 8 | 0; //@line 4170
         $136 = HEAP32[$135 >> 2] | 0; //@line 4171
         if (!$136) {
          $$02329$i$i = $135; //@line 4174
          label = 36; //@line 4175
          break L40;
         } else {
          $$025$i$i = $135; //@line 4178
          $133 = $136; //@line 4178
         }
        }
        if (($132 | 0) == ($131 | 0)) {
         HEAP32[$$06992 + 12 >> 2] = $133; //@line 4184
         $$02330$i$i = $$025$i$i; //@line 4187
         $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 4187
        } else {
         $$02329$i$i = $$025$i$i; //@line 4189
         label = 36; //@line 4190
        }
       }
      } while (0);
      if ((label | 0) == 36) {
       label = 0; //@line 4195
       HEAP32[$$06992 + 12 >> 2] = 0; //@line 4197
       $$02330$i$i = $$02329$i$i; //@line 4198
       $$sink$in$i$i = $$02329$i$i; //@line 4198
      }
      HEAP32[$45 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 4201
      HEAP32[$$02330$i$i >> 2] = $$06992; //@line 4202
      _equeue_mutex_unlock($14); //@line 4203
     }
     if (!$46) {
      break;
     } else {
      $$06992 = $46; //@line 4209
     }
    }
   }
  }
  $144 = _equeue_tick() | 0; //@line 4214
  if ($11) {
   $145 = $6 - $144 | 0; //@line 4216
   if (($145 | 0) < 1) {
    label = 41; //@line 4219
    break;
   } else {
    $$067 = $145; //@line 4222
   }
  } else {
   $$067 = -1; //@line 4225
  }
  _equeue_mutex_lock($8); //@line 4227
  $165 = HEAP32[$0 >> 2] | 0; //@line 4228
  if (!$165) {
   $$2 = $$067; //@line 4231
  } else {
   $169 = (HEAP32[$165 + 20 >> 2] | 0) - $144 | 0; //@line 4235
   $172 = $169 & ~($169 >> 31); //@line 4238
   $$2 = $172 >>> 0 < $$067 >>> 0 ? $172 : $$067; //@line 4241
  }
  _equeue_mutex_unlock($8); //@line 4243
  _equeue_sema_wait($12, $$2) | 0; //@line 4244
  if (HEAP8[$13 >> 0] | 0) {
   _equeue_mutex_lock($8); //@line 4248
   if (HEAP8[$13 >> 0] | 0) {
    label = 53; //@line 4252
    break;
   }
   _equeue_mutex_unlock($8); //@line 4255
  }
  $178 = _equeue_tick() | 0; //@line 4257
  $AsyncCtx15 = _emscripten_alloc_async_context(76, sp) | 0; //@line 4258
  _wait_ms(20); //@line 4259
  if (___async) {
   label = 56; //@line 4262
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 4265
  $$0 = $178; //@line 4266
 }
 if ((label | 0) == 20) {
  HEAP32[$AsyncCtx >> 2] = 134; //@line 4269
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4271
  HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 4273
  HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 4275
  HEAP32[$AsyncCtx + 16 >> 2] = $13; //@line 4277
  HEAP32[$AsyncCtx + 20 >> 2] = $$sroa$0$i; //@line 4279
  HEAP32[$AsyncCtx + 24 >> 2] = $$sroa$0$i; //@line 4281
  HEAP32[$AsyncCtx + 28 >> 2] = $46; //@line 4283
  HEAP32[$AsyncCtx + 32 >> 2] = $$06992; //@line 4285
  HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 4287
  HEAP32[$AsyncCtx + 40 >> 2] = $$idx; //@line 4289
  HEAP32[$AsyncCtx + 44 >> 2] = $15; //@line 4291
  HEAP32[$AsyncCtx + 48 >> 2] = $14; //@line 4293
  HEAP32[$AsyncCtx + 52 >> 2] = $45; //@line 4295
  HEAP32[$AsyncCtx + 56 >> 2] = $6; //@line 4297
  HEAP8[$AsyncCtx + 60 >> 0] = $11 & 1; //@line 4300
  HEAP32[$AsyncCtx + 64 >> 2] = $10; //@line 4302
  HEAP32[$AsyncCtx + 68 >> 2] = $9; //@line 4304
  HEAP32[$AsyncCtx + 72 >> 2] = $7; //@line 4306
  HEAP32[$AsyncCtx + 76 >> 2] = $0; //@line 4308
  HEAP32[$AsyncCtx + 80 >> 2] = $$sroa$0$i; //@line 4310
  sp = STACKTOP; //@line 4311
  STACKTOP = sp; //@line 4312
  return;
 } else if ((label | 0) == 24) {
  HEAP32[$AsyncCtx11 >> 2] = 135; //@line 4315
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 4317
  HEAP32[$AsyncCtx11 + 8 >> 2] = $8; //@line 4319
  HEAP32[$AsyncCtx11 + 12 >> 2] = $12; //@line 4321
  HEAP32[$AsyncCtx11 + 16 >> 2] = $13; //@line 4323
  HEAP32[$AsyncCtx11 + 20 >> 2] = $7; //@line 4325
  HEAP32[$AsyncCtx11 + 24 >> 2] = $$sroa$0$i; //@line 4327
  HEAP32[$AsyncCtx11 + 28 >> 2] = $$sroa$0$i; //@line 4329
  HEAP32[$AsyncCtx11 + 32 >> 2] = $46; //@line 4331
  HEAP32[$AsyncCtx11 + 36 >> 2] = $0; //@line 4333
  HEAP32[$AsyncCtx11 + 40 >> 2] = $$idx; //@line 4335
  HEAP32[$AsyncCtx11 + 44 >> 2] = $15; //@line 4337
  HEAP32[$AsyncCtx11 + 48 >> 2] = $14; //@line 4339
  HEAP32[$AsyncCtx11 + 52 >> 2] = $6; //@line 4341
  HEAP8[$AsyncCtx11 + 56 >> 0] = $11 & 1; //@line 4344
  HEAP32[$AsyncCtx11 + 60 >> 2] = $10; //@line 4346
  HEAP32[$AsyncCtx11 + 64 >> 2] = $9; //@line 4348
  HEAP32[$AsyncCtx11 + 68 >> 2] = $0; //@line 4350
  HEAP32[$AsyncCtx11 + 72 >> 2] = $$sroa$0$i; //@line 4352
  sp = STACKTOP; //@line 4353
  STACKTOP = sp; //@line 4354
  return;
 } else if ((label | 0) == 28) {
  HEAP32[$AsyncCtx3 >> 2] = 136; //@line 4357
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 4359
  HEAP32[$AsyncCtx3 + 8 >> 2] = $8; //@line 4361
  HEAP32[$AsyncCtx3 + 12 >> 2] = $12; //@line 4363
  HEAP32[$AsyncCtx3 + 16 >> 2] = $13; //@line 4365
  HEAP32[$AsyncCtx3 + 20 >> 2] = $$sroa$0$i; //@line 4367
  HEAP32[$AsyncCtx3 + 24 >> 2] = $$sroa$0$i; //@line 4369
  HEAP32[$AsyncCtx3 + 28 >> 2] = $46; //@line 4371
  HEAP32[$AsyncCtx3 + 32 >> 2] = $0; //@line 4373
  HEAP32[$AsyncCtx3 + 36 >> 2] = $$idx; //@line 4375
  HEAP32[$AsyncCtx3 + 40 >> 2] = $15; //@line 4377
  HEAP32[$AsyncCtx3 + 44 >> 2] = $14; //@line 4379
  HEAP32[$AsyncCtx3 + 48 >> 2] = $6; //@line 4381
  HEAP8[$AsyncCtx3 + 52 >> 0] = $11 & 1; //@line 4384
  HEAP32[$AsyncCtx3 + 56 >> 2] = $10; //@line 4386
  HEAP32[$AsyncCtx3 + 60 >> 2] = $9; //@line 4388
  HEAP32[$AsyncCtx3 + 64 >> 2] = $7; //@line 4390
  HEAP32[$AsyncCtx3 + 68 >> 2] = $0; //@line 4392
  HEAP32[$AsyncCtx3 + 72 >> 2] = $$sroa$0$i; //@line 4394
  HEAP32[$AsyncCtx3 + 76 >> 2] = $$06992; //@line 4396
  HEAP32[$AsyncCtx3 + 80 >> 2] = $45; //@line 4398
  sp = STACKTOP; //@line 4399
  STACKTOP = sp; //@line 4400
  return;
 } else if ((label | 0) == 41) {
  $147 = $0 + 40 | 0; //@line 4403
  if (HEAP32[$147 >> 2] | 0) {
   _equeue_mutex_lock($8); //@line 4407
   $150 = HEAP32[$147 >> 2] | 0; //@line 4408
   do {
    if ($150 | 0) {
     $152 = HEAP32[$0 >> 2] | 0; //@line 4412
     if ($152 | 0) {
      $155 = HEAP32[$0 + 44 >> 2] | 0; //@line 4416
      $158 = (HEAP32[$152 + 20 >> 2] | 0) - $144 | 0; //@line 4419
      $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 4423
      FUNCTION_TABLE_vii[$150 & 15]($155, $158 & ~($158 >> 31)); //@line 4424
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 137; //@line 4427
       HEAP32[$AsyncCtx7 + 4 >> 2] = $7; //@line 4429
       HEAP32[$AsyncCtx7 + 8 >> 2] = $8; //@line 4431
       HEAP32[$AsyncCtx7 + 12 >> 2] = $13; //@line 4433
       sp = STACKTOP; //@line 4434
       STACKTOP = sp; //@line 4435
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4437
       break;
      }
     }
    }
   } while (0);
   HEAP8[$7 >> 0] = 1; //@line 4443
   _equeue_mutex_unlock($8); //@line 4444
  }
  HEAP8[$13 >> 0] = 0; //@line 4446
  STACKTOP = sp; //@line 4447
  return;
 } else if ((label | 0) == 53) {
  HEAP8[$13 >> 0] = 0; //@line 4450
  _equeue_mutex_unlock($8); //@line 4451
  STACKTOP = sp; //@line 4452
  return;
 } else if ((label | 0) == 56) {
  HEAP32[$AsyncCtx15 >> 2] = 138; //@line 4455
  HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 4457
  HEAP32[$AsyncCtx15 + 8 >> 2] = $8; //@line 4459
  HEAP32[$AsyncCtx15 + 12 >> 2] = $12; //@line 4461
  HEAP32[$AsyncCtx15 + 16 >> 2] = $13; //@line 4463
  HEAP32[$AsyncCtx15 + 20 >> 2] = $7; //@line 4465
  HEAP32[$AsyncCtx15 + 24 >> 2] = $$sroa$0$i; //@line 4467
  HEAP32[$AsyncCtx15 + 28 >> 2] = $$sroa$0$i; //@line 4469
  HEAP32[$AsyncCtx15 + 32 >> 2] = $0; //@line 4471
  HEAP32[$AsyncCtx15 + 36 >> 2] = $$idx; //@line 4473
  HEAP32[$AsyncCtx15 + 40 >> 2] = $15; //@line 4475
  HEAP32[$AsyncCtx15 + 44 >> 2] = $14; //@line 4477
  HEAP32[$AsyncCtx15 + 48 >> 2] = $6; //@line 4479
  HEAP8[$AsyncCtx15 + 52 >> 0] = $11 & 1; //@line 4482
  HEAP32[$AsyncCtx15 + 56 >> 2] = $10; //@line 4484
  HEAP32[$AsyncCtx15 + 60 >> 2] = $9; //@line 4486
  HEAP32[$AsyncCtx15 + 64 >> 2] = $0; //@line 4488
  HEAP32[$AsyncCtx15 + 68 >> 2] = $$sroa$0$i; //@line 4490
  HEAP32[$AsyncCtx15 + 72 >> 2] = $178; //@line 4492
  sp = STACKTOP; //@line 4493
  STACKTOP = sp; //@line 4494
  return;
 }
}
function __ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_163($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $36 = 0, $4 = 0, $42 = 0, $43 = 0, $58 = 0, $59 = 0, $6 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 31279
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31281
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31283
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31285
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31287
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31289
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31291
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31293
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31295
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31297
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31299
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31301
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 31303
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 31305
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 31307
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 31309
 $36 = (HEAP8[$0 + 64 >> 0] | 0) + 1 << 24 >> 24; //@line 31314
 if (($36 & 255) >= (HEAPU8[$24 >> 0] | 0)) {
  return;
 }
 $43 = (HEAPU8[$0 + 65 >> 0] | 0) + 3 & 255; //@line 31322
 if (((HEAPU8[$30 >> 0] | 0) + (HEAPU8[$2 >> 0] | 0) | 0) >>> 0 > ($36 & 255) >>> 0) {
  $42 = $43 & 255; //@line 31331
  $58 = HEAPU8[$4 + ($42 + 2) >> 0] << 16 | (HEAPU8[$4 + ($42 + 1) >> 0] << 8 | HEAPU8[$4 + $42 >> 0]); //@line 31346
  $59 = $58 * 100 | 0; //@line 31347
  HEAP32[$6 >> 2] = $59; //@line 31348
  HEAP32[$8 >> 2] = 0; //@line 31349
  if ($58 | 0) {
   if (!(HEAP8[$16 >> 0] | 0)) {
    HEAP8[$18 >> 0] = -1; //@line 31356
    $91 = HEAP32[(HEAP32[$20 >> 2] | 0) + 60 >> 2] | 0; //@line 31359
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(68) | 0; //@line 31360
    FUNCTION_TABLE_iiii[$91 & 31]($14, $22, $36) | 0; //@line 31361
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 513; //@line 31364
     $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 31365
     HEAP32[$92 >> 2] = $2; //@line 31366
     $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 31367
     HEAP32[$93 >> 2] = $4; //@line 31368
     $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 31369
     HEAP32[$94 >> 2] = $6; //@line 31370
     $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 31371
     HEAP32[$95 >> 2] = $8; //@line 31372
     $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 31373
     HEAP32[$96 >> 2] = $10; //@line 31374
     $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 31375
     HEAP32[$97 >> 2] = $12; //@line 31376
     $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 31377
     HEAP32[$98 >> 2] = $14; //@line 31378
     $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 31379
     HEAP32[$99 >> 2] = $16; //@line 31380
     $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 31381
     HEAP32[$100 >> 2] = $18; //@line 31382
     $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 31383
     HEAP32[$101 >> 2] = $20; //@line 31384
     $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 31385
     HEAP32[$102 >> 2] = $22; //@line 31386
     $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 31387
     HEAP32[$103 >> 2] = $24; //@line 31388
     $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 31389
     HEAP32[$104 >> 2] = $26; //@line 31390
     $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 31391
     HEAP32[$105 >> 2] = $28; //@line 31392
     $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 31393
     HEAP32[$106 >> 2] = $30; //@line 31394
     $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 31395
     HEAP8[$107 >> 0] = $36; //@line 31396
     $108 = $ReallocAsyncCtx2 + 65 | 0; //@line 31397
     HEAP8[$108 >> 0] = $43; //@line 31398
     sp = STACKTOP; //@line 31399
     return;
    }
    ___async_unwind = 0; //@line 31402
    HEAP32[$ReallocAsyncCtx2 >> 2] = 513; //@line 31403
    $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 31404
    HEAP32[$92 >> 2] = $2; //@line 31405
    $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 31406
    HEAP32[$93 >> 2] = $4; //@line 31407
    $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 31408
    HEAP32[$94 >> 2] = $6; //@line 31409
    $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 31410
    HEAP32[$95 >> 2] = $8; //@line 31411
    $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 31412
    HEAP32[$96 >> 2] = $10; //@line 31413
    $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 31414
    HEAP32[$97 >> 2] = $12; //@line 31415
    $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 31416
    HEAP32[$98 >> 2] = $14; //@line 31417
    $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 31418
    HEAP32[$99 >> 2] = $16; //@line 31419
    $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 31420
    HEAP32[$100 >> 2] = $18; //@line 31421
    $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 31422
    HEAP32[$101 >> 2] = $20; //@line 31423
    $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 31424
    HEAP32[$102 >> 2] = $22; //@line 31425
    $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 31426
    HEAP32[$103 >> 2] = $24; //@line 31427
    $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 31428
    HEAP32[$104 >> 2] = $26; //@line 31429
    $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 31430
    HEAP32[$105 >> 2] = $28; //@line 31431
    $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 31432
    HEAP32[$106 >> 2] = $30; //@line 31433
    $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 31434
    HEAP8[$107 >> 0] = $36; //@line 31435
    $108 = $ReallocAsyncCtx2 + 65 | 0; //@line 31436
    HEAP8[$108 >> 0] = $43; //@line 31437
    sp = STACKTOP; //@line 31438
    return;
   } else {
    $65 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 31443
    $ReallocAsyncCtx = _emscripten_realloc_async_context(80) | 0; //@line 31445
    $67 = FUNCTION_TABLE_iiii[$65 & 31]($14, $59, 0) | 0; //@line 31446
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 512; //@line 31449
     $68 = $ReallocAsyncCtx + 4 | 0; //@line 31450
     HEAP32[$68 >> 2] = $2; //@line 31451
     $69 = $ReallocAsyncCtx + 8 | 0; //@line 31452
     HEAP32[$69 >> 2] = $4; //@line 31453
     $70 = $ReallocAsyncCtx + 12 | 0; //@line 31454
     HEAP32[$70 >> 2] = $6; //@line 31455
     $71 = $ReallocAsyncCtx + 16 | 0; //@line 31456
     HEAP32[$71 >> 2] = $8; //@line 31457
     $72 = $ReallocAsyncCtx + 20 | 0; //@line 31458
     HEAP32[$72 >> 2] = $10; //@line 31459
     $73 = $ReallocAsyncCtx + 24 | 0; //@line 31460
     HEAP32[$73 >> 2] = $12; //@line 31461
     $74 = $ReallocAsyncCtx + 28 | 0; //@line 31462
     HEAP32[$74 >> 2] = $14; //@line 31463
     $75 = $ReallocAsyncCtx + 32 | 0; //@line 31464
     HEAP32[$75 >> 2] = $59; //@line 31465
     $76 = $ReallocAsyncCtx + 36 | 0; //@line 31466
     HEAP32[$76 >> 2] = $16; //@line 31467
     $77 = $ReallocAsyncCtx + 40 | 0; //@line 31468
     HEAP32[$77 >> 2] = 0; //@line 31469
     $78 = $ReallocAsyncCtx + 44 | 0; //@line 31470
     HEAP32[$78 >> 2] = $18; //@line 31471
     $79 = $ReallocAsyncCtx + 48 | 0; //@line 31472
     HEAP32[$79 >> 2] = $20; //@line 31473
     $80 = $ReallocAsyncCtx + 52 | 0; //@line 31474
     HEAP32[$80 >> 2] = $22; //@line 31475
     $81 = $ReallocAsyncCtx + 56 | 0; //@line 31476
     HEAP8[$81 >> 0] = $36; //@line 31477
     $82 = $ReallocAsyncCtx + 60 | 0; //@line 31478
     HEAP32[$82 >> 2] = $24; //@line 31479
     $83 = $ReallocAsyncCtx + 64 | 0; //@line 31480
     HEAP32[$83 >> 2] = $26; //@line 31481
     $84 = $ReallocAsyncCtx + 68 | 0; //@line 31482
     HEAP32[$84 >> 2] = $28; //@line 31483
     $85 = $ReallocAsyncCtx + 72 | 0; //@line 31484
     HEAP8[$85 >> 0] = $43; //@line 31485
     $86 = $ReallocAsyncCtx + 76 | 0; //@line 31486
     HEAP32[$86 >> 2] = $30; //@line 31487
     sp = STACKTOP; //@line 31488
     return;
    }
    HEAP8[___async_retval >> 0] = $67 & 1; //@line 31493
    ___async_unwind = 0; //@line 31494
    HEAP32[$ReallocAsyncCtx >> 2] = 512; //@line 31495
    $68 = $ReallocAsyncCtx + 4 | 0; //@line 31496
    HEAP32[$68 >> 2] = $2; //@line 31497
    $69 = $ReallocAsyncCtx + 8 | 0; //@line 31498
    HEAP32[$69 >> 2] = $4; //@line 31499
    $70 = $ReallocAsyncCtx + 12 | 0; //@line 31500
    HEAP32[$70 >> 2] = $6; //@line 31501
    $71 = $ReallocAsyncCtx + 16 | 0; //@line 31502
    HEAP32[$71 >> 2] = $8; //@line 31503
    $72 = $ReallocAsyncCtx + 20 | 0; //@line 31504
    HEAP32[$72 >> 2] = $10; //@line 31505
    $73 = $ReallocAsyncCtx + 24 | 0; //@line 31506
    HEAP32[$73 >> 2] = $12; //@line 31507
    $74 = $ReallocAsyncCtx + 28 | 0; //@line 31508
    HEAP32[$74 >> 2] = $14; //@line 31509
    $75 = $ReallocAsyncCtx + 32 | 0; //@line 31510
    HEAP32[$75 >> 2] = $59; //@line 31511
    $76 = $ReallocAsyncCtx + 36 | 0; //@line 31512
    HEAP32[$76 >> 2] = $16; //@line 31513
    $77 = $ReallocAsyncCtx + 40 | 0; //@line 31514
    HEAP32[$77 >> 2] = 0; //@line 31515
    $78 = $ReallocAsyncCtx + 44 | 0; //@line 31516
    HEAP32[$78 >> 2] = $18; //@line 31517
    $79 = $ReallocAsyncCtx + 48 | 0; //@line 31518
    HEAP32[$79 >> 2] = $20; //@line 31519
    $80 = $ReallocAsyncCtx + 52 | 0; //@line 31520
    HEAP32[$80 >> 2] = $22; //@line 31521
    $81 = $ReallocAsyncCtx + 56 | 0; //@line 31522
    HEAP8[$81 >> 0] = $36; //@line 31523
    $82 = $ReallocAsyncCtx + 60 | 0; //@line 31524
    HEAP32[$82 >> 2] = $24; //@line 31525
    $83 = $ReallocAsyncCtx + 64 | 0; //@line 31526
    HEAP32[$83 >> 2] = $26; //@line 31527
    $84 = $ReallocAsyncCtx + 68 | 0; //@line 31528
    HEAP32[$84 >> 2] = $28; //@line 31529
    $85 = $ReallocAsyncCtx + 72 | 0; //@line 31530
    HEAP8[$85 >> 0] = $43; //@line 31531
    $86 = $ReallocAsyncCtx + 76 | 0; //@line 31532
    HEAP32[$86 >> 2] = $30; //@line 31533
    sp = STACKTOP; //@line 31534
    return;
   }
  }
 } else {
  HEAP32[$6 >> 2] = 0; //@line 31539
  HEAP8[$10 >> 0] = 0; //@line 31540
  HEAP32[$8 >> 2] = 0; //@line 31541
 }
 $111 = HEAP32[(HEAP32[$26 >> 2] | 0) + 64 >> 2] | 0; //@line 31545
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(68) | 0; //@line 31546
 FUNCTION_TABLE_iii[$111 & 15]($14, $36) | 0; //@line 31547
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 514; //@line 31550
  $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 31551
  HEAP32[$112 >> 2] = $2; //@line 31552
  $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 31553
  HEAP32[$113 >> 2] = $4; //@line 31554
  $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 31555
  HEAP32[$114 >> 2] = $6; //@line 31556
  $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 31557
  HEAP32[$115 >> 2] = $8; //@line 31558
  $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 31559
  HEAP32[$116 >> 2] = $10; //@line 31560
  $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 31561
  HEAP32[$117 >> 2] = $12; //@line 31562
  $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 31563
  HEAP32[$118 >> 2] = $14; //@line 31564
  $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 31565
  HEAP32[$119 >> 2] = $16; //@line 31566
  $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 31567
  HEAP32[$120 >> 2] = $18; //@line 31568
  $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 31569
  HEAP32[$121 >> 2] = $20; //@line 31570
  $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 31571
  HEAP32[$122 >> 2] = $22; //@line 31572
  $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 31573
  HEAP32[$123 >> 2] = $24; //@line 31574
  $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 31575
  HEAP32[$124 >> 2] = $26; //@line 31576
  $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 31577
  HEAP32[$125 >> 2] = $28; //@line 31578
  $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 31579
  HEAP32[$126 >> 2] = $30; //@line 31580
  $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 31581
  HEAP8[$127 >> 0] = $36; //@line 31582
  $128 = $ReallocAsyncCtx3 + 65 | 0; //@line 31583
  HEAP8[$128 >> 0] = $43; //@line 31584
  sp = STACKTOP; //@line 31585
  return;
 }
 ___async_unwind = 0; //@line 31588
 HEAP32[$ReallocAsyncCtx3 >> 2] = 514; //@line 31589
 $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 31590
 HEAP32[$112 >> 2] = $2; //@line 31591
 $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 31592
 HEAP32[$113 >> 2] = $4; //@line 31593
 $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 31594
 HEAP32[$114 >> 2] = $6; //@line 31595
 $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 31596
 HEAP32[$115 >> 2] = $8; //@line 31597
 $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 31598
 HEAP32[$116 >> 2] = $10; //@line 31599
 $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 31600
 HEAP32[$117 >> 2] = $12; //@line 31601
 $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 31602
 HEAP32[$118 >> 2] = $14; //@line 31603
 $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 31604
 HEAP32[$119 >> 2] = $16; //@line 31605
 $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 31606
 HEAP32[$120 >> 2] = $18; //@line 31607
 $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 31608
 HEAP32[$121 >> 2] = $20; //@line 31609
 $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 31610
 HEAP32[$122 >> 2] = $22; //@line 31611
 $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 31612
 HEAP32[$123 >> 2] = $24; //@line 31613
 $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 31614
 HEAP32[$124 >> 2] = $26; //@line 31615
 $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 31616
 HEAP32[$125 >> 2] = $28; //@line 31617
 $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 31618
 HEAP32[$126 >> 2] = $30; //@line 31619
 $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 31620
 HEAP8[$127 >> 0] = $36; //@line 31621
 $128 = $ReallocAsyncCtx3 + 65 | 0; //@line 31622
 HEAP8[$128 >> 0] = $43; //@line 31623
 sp = STACKTOP; //@line 31624
 return;
}
function __ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_162($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $36 = 0, $4 = 0, $42 = 0, $43 = 0, $58 = 0, $59 = 0, $6 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30921
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30923
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30925
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30927
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30929
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30931
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30933
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30935
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30937
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30939
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30941
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30943
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30945
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 30947
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 30949
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 30951
 $36 = (HEAP8[$0 + 64 >> 0] | 0) + 1 << 24 >> 24; //@line 30956
 if (($36 & 255) >= (HEAPU8[$24 >> 0] | 0)) {
  return;
 }
 $43 = (HEAPU8[$0 + 65 >> 0] | 0) + 3 & 255; //@line 30964
 if (((HEAPU8[$30 >> 0] | 0) + (HEAPU8[$2 >> 0] | 0) | 0) >>> 0 > ($36 & 255) >>> 0) {
  $42 = $43 & 255; //@line 30973
  $58 = HEAPU8[$4 + ($42 + 2) >> 0] << 16 | (HEAPU8[$4 + ($42 + 1) >> 0] << 8 | HEAPU8[$4 + $42 >> 0]); //@line 30988
  $59 = $58 * 100 | 0; //@line 30989
  HEAP32[$6 >> 2] = $59; //@line 30990
  HEAP32[$8 >> 2] = 0; //@line 30991
  if ($58 | 0) {
   if (!(HEAP8[$16 >> 0] | 0)) {
    HEAP8[$18 >> 0] = -1; //@line 30998
    $91 = HEAP32[(HEAP32[$20 >> 2] | 0) + 60 >> 2] | 0; //@line 31001
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(68) | 0; //@line 31002
    FUNCTION_TABLE_iiii[$91 & 31]($14, $22, $36) | 0; //@line 31003
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 513; //@line 31006
     $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 31007
     HEAP32[$92 >> 2] = $2; //@line 31008
     $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 31009
     HEAP32[$93 >> 2] = $4; //@line 31010
     $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 31011
     HEAP32[$94 >> 2] = $6; //@line 31012
     $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 31013
     HEAP32[$95 >> 2] = $8; //@line 31014
     $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 31015
     HEAP32[$96 >> 2] = $10; //@line 31016
     $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 31017
     HEAP32[$97 >> 2] = $12; //@line 31018
     $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 31019
     HEAP32[$98 >> 2] = $14; //@line 31020
     $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 31021
     HEAP32[$99 >> 2] = $16; //@line 31022
     $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 31023
     HEAP32[$100 >> 2] = $18; //@line 31024
     $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 31025
     HEAP32[$101 >> 2] = $20; //@line 31026
     $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 31027
     HEAP32[$102 >> 2] = $22; //@line 31028
     $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 31029
     HEAP32[$103 >> 2] = $24; //@line 31030
     $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 31031
     HEAP32[$104 >> 2] = $26; //@line 31032
     $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 31033
     HEAP32[$105 >> 2] = $28; //@line 31034
     $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 31035
     HEAP32[$106 >> 2] = $30; //@line 31036
     $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 31037
     HEAP8[$107 >> 0] = $36; //@line 31038
     $108 = $ReallocAsyncCtx2 + 65 | 0; //@line 31039
     HEAP8[$108 >> 0] = $43; //@line 31040
     sp = STACKTOP; //@line 31041
     return;
    }
    ___async_unwind = 0; //@line 31044
    HEAP32[$ReallocAsyncCtx2 >> 2] = 513; //@line 31045
    $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 31046
    HEAP32[$92 >> 2] = $2; //@line 31047
    $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 31048
    HEAP32[$93 >> 2] = $4; //@line 31049
    $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 31050
    HEAP32[$94 >> 2] = $6; //@line 31051
    $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 31052
    HEAP32[$95 >> 2] = $8; //@line 31053
    $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 31054
    HEAP32[$96 >> 2] = $10; //@line 31055
    $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 31056
    HEAP32[$97 >> 2] = $12; //@line 31057
    $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 31058
    HEAP32[$98 >> 2] = $14; //@line 31059
    $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 31060
    HEAP32[$99 >> 2] = $16; //@line 31061
    $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 31062
    HEAP32[$100 >> 2] = $18; //@line 31063
    $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 31064
    HEAP32[$101 >> 2] = $20; //@line 31065
    $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 31066
    HEAP32[$102 >> 2] = $22; //@line 31067
    $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 31068
    HEAP32[$103 >> 2] = $24; //@line 31069
    $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 31070
    HEAP32[$104 >> 2] = $26; //@line 31071
    $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 31072
    HEAP32[$105 >> 2] = $28; //@line 31073
    $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 31074
    HEAP32[$106 >> 2] = $30; //@line 31075
    $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 31076
    HEAP8[$107 >> 0] = $36; //@line 31077
    $108 = $ReallocAsyncCtx2 + 65 | 0; //@line 31078
    HEAP8[$108 >> 0] = $43; //@line 31079
    sp = STACKTOP; //@line 31080
    return;
   } else {
    $65 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 31085
    $ReallocAsyncCtx = _emscripten_realloc_async_context(80) | 0; //@line 31087
    $67 = FUNCTION_TABLE_iiii[$65 & 31]($14, $59, 0) | 0; //@line 31088
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 512; //@line 31091
     $68 = $ReallocAsyncCtx + 4 | 0; //@line 31092
     HEAP32[$68 >> 2] = $2; //@line 31093
     $69 = $ReallocAsyncCtx + 8 | 0; //@line 31094
     HEAP32[$69 >> 2] = $4; //@line 31095
     $70 = $ReallocAsyncCtx + 12 | 0; //@line 31096
     HEAP32[$70 >> 2] = $6; //@line 31097
     $71 = $ReallocAsyncCtx + 16 | 0; //@line 31098
     HEAP32[$71 >> 2] = $8; //@line 31099
     $72 = $ReallocAsyncCtx + 20 | 0; //@line 31100
     HEAP32[$72 >> 2] = $10; //@line 31101
     $73 = $ReallocAsyncCtx + 24 | 0; //@line 31102
     HEAP32[$73 >> 2] = $12; //@line 31103
     $74 = $ReallocAsyncCtx + 28 | 0; //@line 31104
     HEAP32[$74 >> 2] = $14; //@line 31105
     $75 = $ReallocAsyncCtx + 32 | 0; //@line 31106
     HEAP32[$75 >> 2] = $59; //@line 31107
     $76 = $ReallocAsyncCtx + 36 | 0; //@line 31108
     HEAP32[$76 >> 2] = $16; //@line 31109
     $77 = $ReallocAsyncCtx + 40 | 0; //@line 31110
     HEAP32[$77 >> 2] = 0; //@line 31111
     $78 = $ReallocAsyncCtx + 44 | 0; //@line 31112
     HEAP32[$78 >> 2] = $18; //@line 31113
     $79 = $ReallocAsyncCtx + 48 | 0; //@line 31114
     HEAP32[$79 >> 2] = $20; //@line 31115
     $80 = $ReallocAsyncCtx + 52 | 0; //@line 31116
     HEAP32[$80 >> 2] = $22; //@line 31117
     $81 = $ReallocAsyncCtx + 56 | 0; //@line 31118
     HEAP8[$81 >> 0] = $36; //@line 31119
     $82 = $ReallocAsyncCtx + 60 | 0; //@line 31120
     HEAP32[$82 >> 2] = $24; //@line 31121
     $83 = $ReallocAsyncCtx + 64 | 0; //@line 31122
     HEAP32[$83 >> 2] = $26; //@line 31123
     $84 = $ReallocAsyncCtx + 68 | 0; //@line 31124
     HEAP32[$84 >> 2] = $28; //@line 31125
     $85 = $ReallocAsyncCtx + 72 | 0; //@line 31126
     HEAP8[$85 >> 0] = $43; //@line 31127
     $86 = $ReallocAsyncCtx + 76 | 0; //@line 31128
     HEAP32[$86 >> 2] = $30; //@line 31129
     sp = STACKTOP; //@line 31130
     return;
    }
    HEAP8[___async_retval >> 0] = $67 & 1; //@line 31135
    ___async_unwind = 0; //@line 31136
    HEAP32[$ReallocAsyncCtx >> 2] = 512; //@line 31137
    $68 = $ReallocAsyncCtx + 4 | 0; //@line 31138
    HEAP32[$68 >> 2] = $2; //@line 31139
    $69 = $ReallocAsyncCtx + 8 | 0; //@line 31140
    HEAP32[$69 >> 2] = $4; //@line 31141
    $70 = $ReallocAsyncCtx + 12 | 0; //@line 31142
    HEAP32[$70 >> 2] = $6; //@line 31143
    $71 = $ReallocAsyncCtx + 16 | 0; //@line 31144
    HEAP32[$71 >> 2] = $8; //@line 31145
    $72 = $ReallocAsyncCtx + 20 | 0; //@line 31146
    HEAP32[$72 >> 2] = $10; //@line 31147
    $73 = $ReallocAsyncCtx + 24 | 0; //@line 31148
    HEAP32[$73 >> 2] = $12; //@line 31149
    $74 = $ReallocAsyncCtx + 28 | 0; //@line 31150
    HEAP32[$74 >> 2] = $14; //@line 31151
    $75 = $ReallocAsyncCtx + 32 | 0; //@line 31152
    HEAP32[$75 >> 2] = $59; //@line 31153
    $76 = $ReallocAsyncCtx + 36 | 0; //@line 31154
    HEAP32[$76 >> 2] = $16; //@line 31155
    $77 = $ReallocAsyncCtx + 40 | 0; //@line 31156
    HEAP32[$77 >> 2] = 0; //@line 31157
    $78 = $ReallocAsyncCtx + 44 | 0; //@line 31158
    HEAP32[$78 >> 2] = $18; //@line 31159
    $79 = $ReallocAsyncCtx + 48 | 0; //@line 31160
    HEAP32[$79 >> 2] = $20; //@line 31161
    $80 = $ReallocAsyncCtx + 52 | 0; //@line 31162
    HEAP32[$80 >> 2] = $22; //@line 31163
    $81 = $ReallocAsyncCtx + 56 | 0; //@line 31164
    HEAP8[$81 >> 0] = $36; //@line 31165
    $82 = $ReallocAsyncCtx + 60 | 0; //@line 31166
    HEAP32[$82 >> 2] = $24; //@line 31167
    $83 = $ReallocAsyncCtx + 64 | 0; //@line 31168
    HEAP32[$83 >> 2] = $26; //@line 31169
    $84 = $ReallocAsyncCtx + 68 | 0; //@line 31170
    HEAP32[$84 >> 2] = $28; //@line 31171
    $85 = $ReallocAsyncCtx + 72 | 0; //@line 31172
    HEAP8[$85 >> 0] = $43; //@line 31173
    $86 = $ReallocAsyncCtx + 76 | 0; //@line 31174
    HEAP32[$86 >> 2] = $30; //@line 31175
    sp = STACKTOP; //@line 31176
    return;
   }
  }
 } else {
  HEAP32[$6 >> 2] = 0; //@line 31181
  HEAP8[$10 >> 0] = 0; //@line 31182
  HEAP32[$8 >> 2] = 0; //@line 31183
 }
 $111 = HEAP32[(HEAP32[$26 >> 2] | 0) + 64 >> 2] | 0; //@line 31187
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(68) | 0; //@line 31188
 FUNCTION_TABLE_iii[$111 & 15]($14, $36) | 0; //@line 31189
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 514; //@line 31192
  $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 31193
  HEAP32[$112 >> 2] = $2; //@line 31194
  $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 31195
  HEAP32[$113 >> 2] = $4; //@line 31196
  $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 31197
  HEAP32[$114 >> 2] = $6; //@line 31198
  $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 31199
  HEAP32[$115 >> 2] = $8; //@line 31200
  $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 31201
  HEAP32[$116 >> 2] = $10; //@line 31202
  $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 31203
  HEAP32[$117 >> 2] = $12; //@line 31204
  $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 31205
  HEAP32[$118 >> 2] = $14; //@line 31206
  $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 31207
  HEAP32[$119 >> 2] = $16; //@line 31208
  $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 31209
  HEAP32[$120 >> 2] = $18; //@line 31210
  $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 31211
  HEAP32[$121 >> 2] = $20; //@line 31212
  $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 31213
  HEAP32[$122 >> 2] = $22; //@line 31214
  $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 31215
  HEAP32[$123 >> 2] = $24; //@line 31216
  $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 31217
  HEAP32[$124 >> 2] = $26; //@line 31218
  $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 31219
  HEAP32[$125 >> 2] = $28; //@line 31220
  $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 31221
  HEAP32[$126 >> 2] = $30; //@line 31222
  $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 31223
  HEAP8[$127 >> 0] = $36; //@line 31224
  $128 = $ReallocAsyncCtx3 + 65 | 0; //@line 31225
  HEAP8[$128 >> 0] = $43; //@line 31226
  sp = STACKTOP; //@line 31227
  return;
 }
 ___async_unwind = 0; //@line 31230
 HEAP32[$ReallocAsyncCtx3 >> 2] = 514; //@line 31231
 $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 31232
 HEAP32[$112 >> 2] = $2; //@line 31233
 $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 31234
 HEAP32[$113 >> 2] = $4; //@line 31235
 $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 31236
 HEAP32[$114 >> 2] = $6; //@line 31237
 $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 31238
 HEAP32[$115 >> 2] = $8; //@line 31239
 $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 31240
 HEAP32[$116 >> 2] = $10; //@line 31241
 $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 31242
 HEAP32[$117 >> 2] = $12; //@line 31243
 $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 31244
 HEAP32[$118 >> 2] = $14; //@line 31245
 $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 31246
 HEAP32[$119 >> 2] = $16; //@line 31247
 $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 31248
 HEAP32[$120 >> 2] = $18; //@line 31249
 $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 31250
 HEAP32[$121 >> 2] = $20; //@line 31251
 $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 31252
 HEAP32[$122 >> 2] = $22; //@line 31253
 $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 31254
 HEAP32[$123 >> 2] = $24; //@line 31255
 $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 31256
 HEAP32[$124 >> 2] = $26; //@line 31257
 $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 31258
 HEAP32[$125 >> 2] = $28; //@line 31259
 $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 31260
 HEAP32[$126 >> 2] = $30; //@line 31261
 $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 31262
 HEAP8[$127 >> 0] = $36; //@line 31263
 $128 = $ReallocAsyncCtx3 + 65 | 0; //@line 31264
 HEAP8[$128 >> 0] = $43; //@line 31265
 sp = STACKTOP; //@line 31266
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$05$i = 0, $$06$i = 0, $10 = 0, $100 = 0, $108 = 0, $116 = 0, $119 = 0, $126 = 0, $133 = 0, $136 = 0, $2 = 0, $29 = 0, $3 = 0, $4 = 0, $40 = 0, $48 = 0, $5 = 0, $66 = 0, $76 = 0, $79 = 0, $8 = 0, $88 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx33 = 0, $AsyncCtx36 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 16349
 STACKTOP = STACKTOP + 64 | 0; //@line 16350
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 16350
 $2 = sp + 48 | 0; //@line 16351
 $3 = sp + 32 | 0; //@line 16352
 $4 = sp + 16 | 0; //@line 16353
 $5 = sp; //@line 16354
 __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1); //@line 16355
 HEAP32[$0 + 1992 >> 2] = $1; //@line 16357
 $8 = $0 + 4 | 0; //@line 16359
 __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0 + 752 | 0, $8); //@line 16360
 HEAP32[$0 + 2364 >> 2] = 0; //@line 16362
 $10 = $0 + 1168 | 0; //@line 16363
 HEAP8[$0 + 1701 >> 0] = 0; //@line 16365
 HEAP8[$0 + 1700 >> 0] = 1; //@line 16367
 HEAP8[$0 + 1173 >> 0] = 0; //@line 16369
 HEAP32[$0 + 1780 >> 2] = 0; //@line 16371
 HEAP32[$0 + 1784 >> 2] = 0; //@line 16373
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($8, $10, 1); //@line 16374
 HEAP32[$0 + 1880 >> 2] = 10; //@line 16376
 HEAP8[$0 + 1884 >> 0] = 6; //@line 16378
 HEAP8[$0 + 1908 >> 0] = 1; //@line 16380
 HEAP8[$0 + 2360 >> 0] = 0; //@line 16382
 HEAP32[$0 + 1760 >> 2] = 0; //@line 16384
 HEAP32[$0 + 1764 >> 2] = 0; //@line 16386
 HEAP32[$0 + 1768 >> 2] = 0; //@line 16388
 HEAP8[$0 + 1184 >> 0] = 0; //@line 16390
 HEAP8[$0 + 1698 >> 0] = 1; //@line 16392
 HEAP8[$0 + 1699 >> 0] = 1; //@line 16394
 HEAP8[$0 + 1181 >> 0] = 0; //@line 16396
 HEAP8[$0 + 1932 >> 0] = 0; //@line 16398
 HEAP16[$0 + 1934 >> 1] = 1; //@line 16400
 $29 = $0 + 476 | 0; //@line 16401
 __ZN14LoRaMacCommand20clear_command_bufferEv($29); //@line 16402
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($29); //@line 16403
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($29); //@line 16404
 HEAP8[$0 + 1175 >> 0] = 1; //@line 16406
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($8, $10, 0); //@line 16407
 HEAP8[$0 + 1177 >> 0] = 0; //@line 16409
 HEAP8[$0 + 1178 >> 0] = 0; //@line 16411
 $$05$i = HEAP32[$0 + 1988 >> 2] | 0; //@line 16413
 if ($$05$i | 0) {
  $$06$i = $$05$i; //@line 16416
  do {
   HEAP32[$$06$i + 36 >> 2] = 0; //@line 16419
   $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 16421
  } while (($$06$i | 0) != 0);
 }
 HEAP8[$0 + 1182 >> 0] = 0; //@line 16431
 HEAP8[$0 + 1183 >> 0] = 0; //@line 16433
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16434
 $40 = __ZN7LoRaPHY13get_radio_rngEv($8) | 0; //@line 16435
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 462; //@line 16438
  HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 16440
  HEAP32[$AsyncCtx27 + 8 >> 2] = $4; //@line 16442
  HEAP32[$AsyncCtx27 + 12 >> 2] = $0; //@line 16444
  HEAP32[$AsyncCtx27 + 16 >> 2] = $5; //@line 16446
  HEAP32[$AsyncCtx27 + 20 >> 2] = $8; //@line 16448
  HEAP32[$AsyncCtx27 + 24 >> 2] = $3; //@line 16450
  HEAP32[$AsyncCtx27 + 28 >> 2] = $2; //@line 16452
  sp = STACKTOP; //@line 16453
  STACKTOP = sp; //@line 16454
  return 0; //@line 16454
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 16456
 _srand($40); //@line 16457
 $48 = $0 + 1172 | 0; //@line 16458
 HEAP8[$48 >> 0] = 1; //@line 16459
 $AsyncCtx33 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16460
 __ZN7LoRaPHY25setup_public_network_modeEb($8, 1); //@line 16461
 if (___async) {
  HEAP32[$AsyncCtx33 >> 2] = 463; //@line 16464
  HEAP32[$AsyncCtx33 + 4 >> 2] = $0; //@line 16466
  HEAP32[$AsyncCtx33 + 8 >> 2] = $4; //@line 16468
  HEAP32[$AsyncCtx33 + 12 >> 2] = $0; //@line 16470
  HEAP32[$AsyncCtx33 + 16 >> 2] = $5; //@line 16472
  HEAP32[$AsyncCtx33 + 20 >> 2] = $48; //@line 16474
  HEAP32[$AsyncCtx33 + 24 >> 2] = $8; //@line 16476
  HEAP32[$AsyncCtx33 + 28 >> 2] = $3; //@line 16478
  HEAP32[$AsyncCtx33 + 32 >> 2] = $2; //@line 16480
  sp = STACKTOP; //@line 16481
  STACKTOP = sp; //@line 16482
  return 0; //@line 16482
 }
 _emscripten_free_async_context($AsyncCtx33 | 0); //@line 16484
 $AsyncCtx36 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16485
 __ZN7LoRaPHY18put_radio_to_sleepEv($8); //@line 16486
 if (___async) {
  HEAP32[$AsyncCtx36 >> 2] = 464; //@line 16489
  HEAP32[$AsyncCtx36 + 4 >> 2] = $0; //@line 16491
  HEAP32[$AsyncCtx36 + 8 >> 2] = $4; //@line 16493
  HEAP32[$AsyncCtx36 + 12 >> 2] = $0; //@line 16495
  HEAP32[$AsyncCtx36 + 16 >> 2] = $5; //@line 16497
  HEAP32[$AsyncCtx36 + 20 >> 2] = $48; //@line 16499
  HEAP32[$AsyncCtx36 + 24 >> 2] = $8; //@line 16501
  HEAP32[$AsyncCtx36 + 28 >> 2] = $3; //@line 16503
  HEAP32[$AsyncCtx36 + 32 >> 2] = $2; //@line 16505
  sp = STACKTOP; //@line 16506
  STACKTOP = sp; //@line 16507
  return 0; //@line 16507
 }
 _emscripten_free_async_context($AsyncCtx36 | 0); //@line 16509
 $66 = $2 + 12 | 0; //@line 16511
 HEAP32[$2 >> 2] = 465; //@line 16512
 HEAP32[$2 + 4 >> 2] = 0; //@line 16514
 HEAP32[$2 + 8 >> 2] = $0; //@line 16516
 HEAP32[$66 >> 2] = 844; //@line 16517
 $AsyncCtx23 = _emscripten_alloc_async_context(40, sp) | 0; //@line 16518
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1796 | 0, $2); //@line 16519
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 466; //@line 16522
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 16524
  HEAP32[$AsyncCtx23 + 8 >> 2] = $4; //@line 16526
  HEAP32[$AsyncCtx23 + 12 >> 2] = $0; //@line 16528
  HEAP32[$AsyncCtx23 + 16 >> 2] = $5; //@line 16530
  HEAP32[$AsyncCtx23 + 20 >> 2] = $48; //@line 16532
  HEAP32[$AsyncCtx23 + 24 >> 2] = $8; //@line 16534
  HEAP32[$AsyncCtx23 + 28 >> 2] = $3; //@line 16536
  HEAP32[$AsyncCtx23 + 32 >> 2] = $66; //@line 16538
  HEAP32[$AsyncCtx23 + 36 >> 2] = $2; //@line 16540
  sp = STACKTOP; //@line 16541
  STACKTOP = sp; //@line 16542
  return 0; //@line 16542
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 16544
 $76 = HEAP32[$66 >> 2] | 0; //@line 16545
 do {
  if ($76 | 0) {
   $79 = HEAP32[$76 + 8 >> 2] | 0; //@line 16550
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 16551
   FUNCTION_TABLE_vi[$79 & 1023]($2); //@line 16552
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 467; //@line 16555
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16557
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 16559
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 16561
    HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 16563
    HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 16565
    HEAP32[$AsyncCtx + 24 >> 2] = $48; //@line 16567
    HEAP32[$AsyncCtx + 28 >> 2] = $8; //@line 16569
    sp = STACKTOP; //@line 16570
    STACKTOP = sp; //@line 16571
    return 0; //@line 16571
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16573
    break;
   }
  }
 } while (0);
 $88 = $3 + 12 | 0; //@line 16579
 HEAP32[$3 >> 2] = 468; //@line 16580
 HEAP32[$3 + 4 >> 2] = 0; //@line 16582
 HEAP32[$3 + 8 >> 2] = $0; //@line 16584
 HEAP32[$88 >> 2] = 844; //@line 16585
 $AsyncCtx20 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16586
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1816 | 0, $3); //@line 16587
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 469; //@line 16590
  HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 16592
  HEAP32[$AsyncCtx20 + 8 >> 2] = $4; //@line 16594
  HEAP32[$AsyncCtx20 + 12 >> 2] = $0; //@line 16596
  HEAP32[$AsyncCtx20 + 16 >> 2] = $5; //@line 16598
  HEAP32[$AsyncCtx20 + 20 >> 2] = $48; //@line 16600
  HEAP32[$AsyncCtx20 + 24 >> 2] = $8; //@line 16602
  HEAP32[$AsyncCtx20 + 28 >> 2] = $3; //@line 16604
  HEAP32[$AsyncCtx20 + 32 >> 2] = $88; //@line 16606
  sp = STACKTOP; //@line 16607
  STACKTOP = sp; //@line 16608
  return 0; //@line 16608
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 16610
 $97 = HEAP32[$88 >> 2] | 0; //@line 16611
 do {
  if ($97 | 0) {
   $100 = HEAP32[$97 + 8 >> 2] | 0; //@line 16616
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 16617
   FUNCTION_TABLE_vi[$100 & 1023]($3); //@line 16618
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 470; //@line 16621
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 16623
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 16625
    HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 16627
    HEAP32[$AsyncCtx3 + 16 >> 2] = $5; //@line 16629
    HEAP32[$AsyncCtx3 + 20 >> 2] = $48; //@line 16631
    HEAP32[$AsyncCtx3 + 24 >> 2] = $8; //@line 16633
    sp = STACKTOP; //@line 16634
    STACKTOP = sp; //@line 16635
    return 0; //@line 16635
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16637
    break;
   }
  }
 } while (0);
 $108 = $4 + 12 | 0; //@line 16643
 HEAP32[$4 >> 2] = 471; //@line 16644
 HEAP32[$4 + 4 >> 2] = 0; //@line 16646
 HEAP32[$4 + 8 >> 2] = $0; //@line 16648
 HEAP32[$108 >> 2] = 844; //@line 16649
 $AsyncCtx17 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16650
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1836 | 0, $4); //@line 16651
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 472; //@line 16654
  HEAP32[$AsyncCtx17 + 4 >> 2] = $108; //@line 16656
  HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 16658
  HEAP32[$AsyncCtx17 + 12 >> 2] = $5; //@line 16660
  HEAP32[$AsyncCtx17 + 16 >> 2] = $0; //@line 16662
  HEAP32[$AsyncCtx17 + 20 >> 2] = $4; //@line 16664
  HEAP32[$AsyncCtx17 + 24 >> 2] = $48; //@line 16666
  HEAP32[$AsyncCtx17 + 28 >> 2] = $8; //@line 16668
  sp = STACKTOP; //@line 16669
  STACKTOP = sp; //@line 16670
  return 0; //@line 16670
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 16672
 $116 = HEAP32[$108 >> 2] | 0; //@line 16673
 do {
  if ($116 | 0) {
   $119 = HEAP32[$116 + 8 >> 2] | 0; //@line 16678
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16679
   FUNCTION_TABLE_vi[$119 & 1023]($4); //@line 16680
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 473; //@line 16683
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 16685
    HEAP32[$AsyncCtx7 + 8 >> 2] = $5; //@line 16687
    HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 16689
    HEAP32[$AsyncCtx7 + 16 >> 2] = $48; //@line 16691
    HEAP32[$AsyncCtx7 + 20 >> 2] = $8; //@line 16693
    sp = STACKTOP; //@line 16694
    STACKTOP = sp; //@line 16695
    return 0; //@line 16695
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 16697
    break;
   }
  }
 } while (0);
 $126 = $5 + 12 | 0; //@line 16703
 HEAP32[$5 >> 2] = 404; //@line 16704
 HEAP32[$5 + 4 >> 2] = 0; //@line 16706
 HEAP32[$5 + 8 >> 2] = $0; //@line 16708
 HEAP32[$126 >> 2] = 844; //@line 16709
 $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 16710
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1856 | 0, $5); //@line 16711
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 474; //@line 16714
  HEAP32[$AsyncCtx14 + 4 >> 2] = $126; //@line 16716
  HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 16718
  HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 16720
  HEAP32[$AsyncCtx14 + 16 >> 2] = $48; //@line 16722
  HEAP32[$AsyncCtx14 + 20 >> 2] = $8; //@line 16724
  HEAP32[$AsyncCtx14 + 24 >> 2] = $5; //@line 16726
  sp = STACKTOP; //@line 16727
  STACKTOP = sp; //@line 16728
  return 0; //@line 16728
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 16730
 $133 = HEAP32[$126 >> 2] | 0; //@line 16731
 do {
  if ($133 | 0) {
   $136 = HEAP32[$133 + 8 >> 2] | 0; //@line 16736
   $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 16737
   FUNCTION_TABLE_vi[$136 & 1023]($5); //@line 16738
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 475; //@line 16741
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 16743
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 16745
    HEAP32[$AsyncCtx11 + 12 >> 2] = $48; //@line 16747
    HEAP32[$AsyncCtx11 + 16 >> 2] = $8; //@line 16749
    sp = STACKTOP; //@line 16750
    STACKTOP = sp; //@line 16751
    return 0; //@line 16751
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 16753
    break;
   }
  }
 } while (0);
 HEAP32[$0 + 1788 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv($0) | 0; //@line 16760
 HEAP8[$0 + 1936 >> 0] = 1; //@line 16762
 HEAP8[$48 >> 0] = 1; //@line 16763
 $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16764
 __ZN7LoRaPHY25setup_public_network_modeEb($8, 1); //@line 16765
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 476; //@line 16768
  sp = STACKTOP; //@line 16769
  STACKTOP = sp; //@line 16770
  return 0; //@line 16770
 } else {
  _emscripten_free_async_context($AsyncCtx30 | 0); //@line 16772
  STACKTOP = sp; //@line 16773
  return 0; //@line 16773
 }
 return 0; //@line 16775
}
function _main() {
 var $$0 = 0, $$1 = 0, $$pr = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $108 = 0, $119 = 0, $25 = 0, $39 = 0, $42 = 0, $51 = 0, $53 = 0, $54 = 0, $57 = 0, $66 = 0, $69 = 0, $76 = 0, $82 = 0, $86 = 0, $87 = 0, $90 = 0, $98 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx3 = 0, $AsyncCtx33 = 0, $AsyncCtx36 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7172
 STACKTOP = STACKTOP + 48 | 0; //@line 7173
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7173
 $vararg_buffer = sp; //@line 7174
 $0 = sp + 8 | 0; //@line 7175
 $1 = sp + 24 | 0; //@line 7176
 if (!((HEAP8[24462] | HEAP8[24461] | HEAP8[24463] | HEAP8[24464] | HEAP8[24465] | HEAP8[24466] | HEAP8[24467] | HEAP8[24468]) << 24 >> 24)) {
  $AsyncCtx33 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7194
  _puts(15277) | 0; //@line 7195
  if (___async) {
   HEAP32[$AsyncCtx33 >> 2] = 647; //@line 7198
   sp = STACKTOP; //@line 7199
   STACKTOP = sp; //@line 7200
   return 0; //@line 7200
  }
  _emscripten_free_async_context($AsyncCtx33 | 0); //@line 7202
  $$1 = -1; //@line 7203
  STACKTOP = sp; //@line 7204
  return $$1 | 0; //@line 7204
 }
 $AsyncCtx29 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7206
 _puts(15313) | 0; //@line 7207
 if (___async) {
  HEAP32[$AsyncCtx29 >> 2] = 648; //@line 7210
  HEAP32[$AsyncCtx29 + 4 >> 2] = $vararg_buffer; //@line 7212
  HEAP32[$AsyncCtx29 + 8 >> 2] = $vararg_buffer; //@line 7214
  HEAP32[$AsyncCtx29 + 12 >> 2] = $1; //@line 7216
  HEAP32[$AsyncCtx29 + 16 >> 2] = $1; //@line 7218
  HEAP32[$AsyncCtx29 + 20 >> 2] = $0; //@line 7220
  sp = STACKTOP; //@line 7221
  STACKTOP = sp; //@line 7222
  return 0; //@line 7222
 }
 _emscripten_free_async_context($AsyncCtx29 | 0); //@line 7224
 _mbed_trace_init() | 0; //@line 7225
 if (__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE(20684, 20480) | 0) {
  $AsyncCtx25 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7229
  _puts(15380) | 0; //@line 7230
  if (___async) {
   HEAP32[$AsyncCtx25 >> 2] = 649; //@line 7233
   sp = STACKTOP; //@line 7234
   STACKTOP = sp; //@line 7235
   return 0; //@line 7235
  }
  _emscripten_free_async_context($AsyncCtx25 | 0); //@line 7237
  $$1 = -1; //@line 7238
  STACKTOP = sp; //@line 7239
  return $$1 | 0; //@line 7239
 }
 $AsyncCtx47 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7241
 $25 = _equeue_alloc(20480, 32) | 0; //@line 7242
 if (___async) {
  HEAP32[$AsyncCtx47 >> 2] = 650; //@line 7245
  HEAP32[$AsyncCtx47 + 4 >> 2] = $vararg_buffer; //@line 7247
  HEAP32[$AsyncCtx47 + 8 >> 2] = $vararg_buffer; //@line 7249
  HEAP32[$AsyncCtx47 + 12 >> 2] = $1; //@line 7251
  HEAP32[$AsyncCtx47 + 16 >> 2] = $1; //@line 7253
  HEAP32[$AsyncCtx47 + 20 >> 2] = $0; //@line 7255
  sp = STACKTOP; //@line 7256
  STACKTOP = sp; //@line 7257
  return 0; //@line 7257
 }
 _emscripten_free_async_context($AsyncCtx47 | 0); //@line 7259
 if (!$25) {
  HEAP32[$0 >> 2] = 0; //@line 7262
  HEAP32[$0 + 4 >> 2] = 0; //@line 7262
  HEAP32[$0 + 8 >> 2] = 0; //@line 7262
  HEAP32[$0 + 12 >> 2] = 0; //@line 7262
  $51 = 1; //@line 7263
  $53 = $0; //@line 7263
 } else {
  HEAP32[$25 + 4 >> 2] = 20480; //@line 7266
  HEAP32[$25 + 8 >> 2] = 0; //@line 7268
  HEAP32[$25 + 12 >> 2] = 0; //@line 7270
  HEAP32[$25 + 16 >> 2] = -1; //@line 7272
  HEAP32[$25 + 20 >> 2] = 10; //@line 7274
  HEAP32[$25 + 24 >> 2] = 651; //@line 7276
  HEAP32[$25 + 28 >> 2] = 7; //@line 7278
  HEAP32[$25 >> 2] = 1; //@line 7279
  $39 = $0 + 4 | 0; //@line 7280
  HEAP32[$39 >> 2] = 0; //@line 7281
  HEAP32[$39 + 4 >> 2] = 0; //@line 7281
  HEAP32[$39 + 8 >> 2] = 0; //@line 7281
  HEAP32[$0 >> 2] = $25; //@line 7282
  HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 1; //@line 7285
  $51 = 0; //@line 7286
  $53 = $0; //@line 7286
 }
 $42 = $0 + 12 | 0; //@line 7288
 HEAP32[$42 >> 2] = 10244; //@line 7289
 $AsyncCtx43 = _emscripten_alloc_async_context(40, sp) | 0; //@line 7290
 __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE(20408, $0); //@line 7291
 if (___async) {
  HEAP32[$AsyncCtx43 >> 2] = 652; //@line 7294
  HEAP32[$AsyncCtx43 + 4 >> 2] = $vararg_buffer; //@line 7296
  HEAP32[$AsyncCtx43 + 8 >> 2] = $vararg_buffer; //@line 7298
  HEAP32[$AsyncCtx43 + 12 >> 2] = $1; //@line 7300
  HEAP32[$AsyncCtx43 + 16 >> 2] = $1; //@line 7302
  HEAP32[$AsyncCtx43 + 20 >> 2] = $25; //@line 7304
  HEAP32[$AsyncCtx43 + 24 >> 2] = $42; //@line 7306
  HEAP32[$AsyncCtx43 + 28 >> 2] = $25; //@line 7308
  HEAP8[$AsyncCtx43 + 32 >> 0] = $51 & 1; //@line 7311
  HEAP32[$AsyncCtx43 + 36 >> 2] = $53; //@line 7313
  sp = STACKTOP; //@line 7314
  STACKTOP = sp; //@line 7315
  return 0; //@line 7315
 }
 _emscripten_free_async_context($AsyncCtx43 | 0); //@line 7317
 $54 = HEAP32[$42 >> 2] | 0; //@line 7318
 do {
  if ($54 | 0) {
   $57 = HEAP32[$54 + 8 >> 2] | 0; //@line 7323
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 7324
   FUNCTION_TABLE_vi[$57 & 1023]($53); //@line 7325
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 653; //@line 7328
    HEAP32[$AsyncCtx + 4 >> 2] = $25; //@line 7330
    HEAP32[$AsyncCtx + 8 >> 2] = $25; //@line 7332
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 7334
    HEAP8[$AsyncCtx + 16 >> 0] = $51 & 1; //@line 7337
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 7339
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 7341
    HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 7343
    sp = STACKTOP; //@line 7344
    STACKTOP = sp; //@line 7345
    return 0; //@line 7345
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7347
    break;
   }
  }
 } while (0);
 do {
  if (!$51) {
   $66 = (HEAP32[$25 >> 2] | 0) + -1 | 0; //@line 7355
   HEAP32[$25 >> 2] = $66; //@line 7356
   if (!$66) {
    $69 = HEAP32[$25 + 24 >> 2] | 0; //@line 7360
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7361
    FUNCTION_TABLE_vi[$69 & 1023]($25); //@line 7362
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 654; //@line 7365
     HEAP32[$AsyncCtx3 + 4 >> 2] = $25; //@line 7367
     HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 7369
     HEAP32[$AsyncCtx3 + 12 >> 2] = $vararg_buffer; //@line 7371
     HEAP32[$AsyncCtx3 + 16 >> 2] = $vararg_buffer; //@line 7373
     HEAP32[$AsyncCtx3 + 20 >> 2] = $1; //@line 7375
     sp = STACKTOP; //@line 7376
     STACKTOP = sp; //@line 7377
     return 0; //@line 7377
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7379
    $76 = HEAP32[$25 + 4 >> 2] | 0; //@line 7381
    $AsyncCtx39 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7382
    _equeue_dealloc($76, $25); //@line 7383
    if (___async) {
     HEAP32[$AsyncCtx39 >> 2] = 655; //@line 7386
     HEAP32[$AsyncCtx39 + 4 >> 2] = $vararg_buffer; //@line 7388
     HEAP32[$AsyncCtx39 + 8 >> 2] = $vararg_buffer; //@line 7390
     HEAP32[$AsyncCtx39 + 12 >> 2] = $1; //@line 7392
     HEAP32[$AsyncCtx39 + 16 >> 2] = $1; //@line 7394
     sp = STACKTOP; //@line 7395
     STACKTOP = sp; //@line 7396
     return 0; //@line 7396
    } else {
     _emscripten_free_async_context($AsyncCtx39 | 0); //@line 7398
     break;
    }
   }
  }
 } while (0);
 $82 = $1 + 4 | 0; //@line 7405
 HEAP32[$82 >> 2] = 0; //@line 7407
 HEAP32[$82 + 4 >> 2] = 0; //@line 7410
 HEAP32[$1 >> 2] = 656; //@line 7411
 $86 = $1 + 12 | 0; //@line 7412
 HEAP32[$86 >> 2] = 10256; //@line 7413
 $87 = HEAP32[5960] | 0; //@line 7414
 if (!$87) {
  $98 = 10256; //@line 7417
  label = 34; //@line 7418
 } else {
  $90 = HEAP32[$87 + 8 >> 2] | 0; //@line 7421
  $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7422
  FUNCTION_TABLE_vi[$90 & 1023](23828); //@line 7423
  if (___async) {
   HEAP32[$AsyncCtx6 >> 2] = 657; //@line 7426
   HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 7428
   HEAP32[$AsyncCtx6 + 8 >> 2] = $86; //@line 7430
   HEAP32[$AsyncCtx6 + 12 >> 2] = $vararg_buffer; //@line 7432
   HEAP32[$AsyncCtx6 + 16 >> 2] = $vararg_buffer; //@line 7434
   HEAP32[$AsyncCtx6 + 20 >> 2] = $1; //@line 7436
   sp = STACKTOP; //@line 7437
   STACKTOP = sp; //@line 7438
   return 0; //@line 7438
  }
  _emscripten_free_async_context($AsyncCtx6 | 0); //@line 7440
  $$pr = HEAP32[$86 >> 2] | 0; //@line 7441
  if (!$$pr) {
   HEAP32[5960] = 0; //@line 7444
  } else {
   $98 = $$pr; //@line 7446
   label = 34; //@line 7447
  }
 }
 do {
  if ((label | 0) == 34) {
   $99 = HEAP32[$98 + 4 >> 2] | 0; //@line 7453
   $AsyncCtx9 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7454
   FUNCTION_TABLE_vii[$99 & 15](23828, $1); //@line 7455
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 658; //@line 7458
    HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 7460
    HEAP32[$AsyncCtx9 + 8 >> 2] = $86; //@line 7462
    HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer; //@line 7464
    HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer; //@line 7466
    HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 7468
    sp = STACKTOP; //@line 7469
    STACKTOP = sp; //@line 7470
    return 0; //@line 7470
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 7472
   $$pre$i$i = HEAP32[$86 >> 2] | 0; //@line 7473
   HEAP32[5960] = $$pre$i$i; //@line 7474
   if ($$pre$i$i | 0) {
    $108 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 7479
    $AsyncCtx13 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7480
    FUNCTION_TABLE_vi[$108 & 1023]($1); //@line 7481
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 659; //@line 7484
     HEAP32[$AsyncCtx13 + 4 >> 2] = $1; //@line 7486
     HEAP32[$AsyncCtx13 + 8 >> 2] = $1; //@line 7488
     HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer; //@line 7490
     HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer; //@line 7492
     sp = STACKTOP; //@line 7493
     STACKTOP = sp; //@line 7494
     return 0; //@line 7494
    } else {
     _emscripten_free_async_context($AsyncCtx13 | 0); //@line 7496
     break;
    }
   }
  }
 } while (0);
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(20684, 23828) | 0; //@line 7502
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(20684) | 0) {
  $AsyncCtx21 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7506
  _puts(15408) | 0; //@line 7507
  if (___async) {
   HEAP32[$AsyncCtx21 >> 2] = 660; //@line 7510
   sp = STACKTOP; //@line 7511
   STACKTOP = sp; //@line 7512
   return 0; //@line 7512
  }
  _emscripten_free_async_context($AsyncCtx21 | 0); //@line 7514
  $$1 = -1; //@line 7515
  STACKTOP = sp; //@line 7516
  return $$1 | 0; //@line 7516
 }
 __ZN16LoRaWANInterface12set_datarateEh(20684, 5) | 0; //@line 7518
 HEAP8[$1 >> 0] = 0; //@line 7519
 HEAP32[$1 + 4 >> 2] = 24461; //@line 7521
 HEAP32[$1 + 8 >> 2] = 24469; //@line 7523
 HEAP32[$1 + 12 >> 2] = 24477; //@line 7525
 HEAP8[$1 + 16 >> 0] = 3; //@line 7527
 $119 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(20684, $1) | 0; //@line 7528
 L67 : do {
  switch ($119 | 0) {
  case 0:
  case -1016:
   {
    $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7532
    _puts(15471) | 0; //@line 7533
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 661; //@line 7536
     HEAP32[$AsyncCtx17 + 4 >> 2] = $1; //@line 7538
     sp = STACKTOP; //@line 7539
     STACKTOP = sp; //@line 7540
     return 0; //@line 7540
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 7542
    $AsyncCtx36 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7543
    __ZN6events10EventQueue8dispatchEi(20480, -1); //@line 7544
    if (___async) {
     HEAP32[$AsyncCtx36 >> 2] = 662; //@line 7547
     HEAP32[$AsyncCtx36 + 4 >> 2] = $1; //@line 7549
     sp = STACKTOP; //@line 7550
     STACKTOP = sp; //@line 7551
     return 0; //@line 7551
    } else {
     _emscripten_free_async_context($AsyncCtx36 | 0); //@line 7553
     $$0 = 0; //@line 7554
     break L67;
    }
    break;
   }
  default:
   {
    HEAP32[$vararg_buffer >> 2] = $119; //@line 7560
    _printf(15442, $vararg_buffer) | 0; //@line 7561
    $$0 = -1; //@line 7562
   }
  }
 } while (0);
 $$1 = $$0; //@line 7566
 STACKTOP = sp; //@line 7567
 return $$1 | 0; //@line 7567
}
function _twoway_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$ph$ph$lcssa216 = 0, $$0175$ph$ph$lcssa216328 = 0, $$0175$ph$ph254 = 0, $$0179242 = 0, $$0183$ph197$ph253 = 0, $$0183$ph197248 = 0, $$0183$ph260 = 0, $$0185$ph$lcssa = 0, $$0185$ph$lcssa327 = 0, $$0185$ph259 = 0, $$0187219$ph325326 = 0, $$0187263 = 0, $$1176$$0175 = 0, $$1176$ph$ph$lcssa208 = 0, $$1176$ph$ph233 = 0, $$1180222 = 0, $$1184$ph193$ph232 = 0, $$1184$ph193227 = 0, $$1184$ph239 = 0, $$1186$$0185 = 0, $$1186$ph$lcssa = 0, $$1186$ph238 = 0, $$2181$sink = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182221 = 0, $$4 = 0, $$pr = 0, $10 = 0, $105 = 0, $111 = 0, $113 = 0, $118 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $45 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $60 = 0, $68 = 0, $70 = 0, $74 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15503
 STACKTOP = STACKTOP + 1056 | 0; //@line 15504
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056); //@line 15504
 $2 = sp + 1024 | 0; //@line 15505
 $3 = sp; //@line 15506
 HEAP32[$2 >> 2] = 0; //@line 15507
 HEAP32[$2 + 4 >> 2] = 0; //@line 15507
 HEAP32[$2 + 8 >> 2] = 0; //@line 15507
 HEAP32[$2 + 12 >> 2] = 0; //@line 15507
 HEAP32[$2 + 16 >> 2] = 0; //@line 15507
 HEAP32[$2 + 20 >> 2] = 0; //@line 15507
 HEAP32[$2 + 24 >> 2] = 0; //@line 15507
 HEAP32[$2 + 28 >> 2] = 0; //@line 15507
 $4 = HEAP8[$1 >> 0] | 0; //@line 15508
 L1 : do {
  if (!($4 << 24 >> 24)) {
   $$0175$ph$ph$lcssa216328 = 1; //@line 15512
   $$0185$ph$lcssa327 = -1; //@line 15512
   $$0187219$ph325326 = 0; //@line 15512
   $$1176$ph$ph$lcssa208 = 1; //@line 15512
   $$1186$ph$lcssa = -1; //@line 15512
   label = 26; //@line 15513
  } else {
   $$0187263 = 0; //@line 15515
   $10 = $4; //@line 15515
   do {
    if (!(HEAP8[$0 + $$0187263 >> 0] | 0)) {
     $$3 = 0; //@line 15521
     break L1;
    }
    $14 = $2 + ((($10 & 255) >>> 5 & 255) << 2) | 0; //@line 15529
    HEAP32[$14 >> 2] = HEAP32[$14 >> 2] | 1 << ($10 & 31); //@line 15532
    $$0187263 = $$0187263 + 1 | 0; //@line 15533
    HEAP32[$3 + (($10 & 255) << 2) >> 2] = $$0187263; //@line 15536
    $10 = HEAP8[$1 + $$0187263 >> 0] | 0; //@line 15538
   } while ($10 << 24 >> 24 != 0);
   $23 = $$0187263 >>> 0 > 1; //@line 15546
   if ($23) {
    $$0183$ph260 = 0; //@line 15548
    $$0185$ph259 = -1; //@line 15548
    $130 = 1; //@line 15548
    L6 : while (1) {
     $$0175$ph$ph254 = 1; //@line 15550
     $$0183$ph197$ph253 = $$0183$ph260; //@line 15550
     $131 = $130; //@line 15550
     while (1) {
      $$0183$ph197248 = $$0183$ph197$ph253; //@line 15552
      $132 = $131; //@line 15552
      L10 : while (1) {
       $$0179242 = 1; //@line 15554
       $25 = $132; //@line 15554
       while (1) {
        $32 = HEAP8[$1 + ($$0179242 + $$0185$ph259) >> 0] | 0; //@line 15558
        $34 = HEAP8[$1 + $25 >> 0] | 0; //@line 15560
        if ($32 << 24 >> 24 != $34 << 24 >> 24) {
         break L10;
        }
        if (($$0179242 | 0) == ($$0175$ph$ph254 | 0)) {
         break;
        }
        $$0179242 = $$0179242 + 1 | 0; //@line 15566
        $27 = $$0179242 + $$0183$ph197248 | 0; //@line 15570
        if ($27 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 15575
         $$0185$ph$lcssa = $$0185$ph259; //@line 15575
         break L6;
        } else {
         $25 = $27; //@line 15573
        }
       }
       $37 = $$0175$ph$ph254 + $$0183$ph197248 | 0; //@line 15579
       $132 = $37 + 1 | 0; //@line 15580
       if ($132 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 15585
        $$0185$ph$lcssa = $$0185$ph259; //@line 15585
        break L6;
       } else {
        $$0183$ph197248 = $37; //@line 15583
       }
      }
      $41 = $25 - $$0185$ph259 | 0; //@line 15590
      if (($32 & 255) <= ($34 & 255)) {
       break;
      }
      $131 = $25 + 1 | 0; //@line 15594
      if ($131 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216 = $41; //@line 15599
       $$0185$ph$lcssa = $$0185$ph259; //@line 15599
       break L6;
      } else {
       $$0175$ph$ph254 = $41; //@line 15597
       $$0183$ph197$ph253 = $25; //@line 15597
      }
     }
     $130 = $$0183$ph197248 + 2 | 0; //@line 15604
     if ($130 >>> 0 >= $$0187263 >>> 0) {
      $$0175$ph$ph$lcssa216 = 1; //@line 15609
      $$0185$ph$lcssa = $$0183$ph197248; //@line 15609
      break;
     } else {
      $$0183$ph260 = $$0183$ph197248 + 1 | 0; //@line 15607
      $$0185$ph259 = $$0183$ph197248; //@line 15607
     }
    }
    if ($23) {
     $$1184$ph239 = 0; //@line 15614
     $$1186$ph238 = -1; //@line 15614
     $133 = 1; //@line 15614
     while (1) {
      $$1176$ph$ph233 = 1; //@line 15616
      $$1184$ph193$ph232 = $$1184$ph239; //@line 15616
      $135 = $133; //@line 15616
      while (1) {
       $$1184$ph193227 = $$1184$ph193$ph232; //@line 15618
       $134 = $135; //@line 15618
       L25 : while (1) {
        $$1180222 = 1; //@line 15620
        $52 = $134; //@line 15620
        while (1) {
         $50 = HEAP8[$1 + ($$1180222 + $$1186$ph238) >> 0] | 0; //@line 15624
         $53 = HEAP8[$1 + $52 >> 0] | 0; //@line 15626
         if ($50 << 24 >> 24 != $53 << 24 >> 24) {
          break L25;
         }
         if (($$1180222 | 0) == ($$1176$ph$ph233 | 0)) {
          break;
         }
         $$1180222 = $$1180222 + 1 | 0; //@line 15632
         $45 = $$1180222 + $$1184$ph193227 | 0; //@line 15636
         if ($45 >>> 0 >= $$0187263 >>> 0) {
          $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15641
          $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15641
          $$0187219$ph325326 = $$0187263; //@line 15641
          $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 15641
          $$1186$ph$lcssa = $$1186$ph238; //@line 15641
          label = 26; //@line 15642
          break L1;
         } else {
          $52 = $45; //@line 15639
         }
        }
        $56 = $$1176$ph$ph233 + $$1184$ph193227 | 0; //@line 15646
        $134 = $56 + 1 | 0; //@line 15647
        if ($134 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15652
         $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15652
         $$0187219$ph325326 = $$0187263; //@line 15652
         $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 15652
         $$1186$ph$lcssa = $$1186$ph238; //@line 15652
         label = 26; //@line 15653
         break L1;
        } else {
         $$1184$ph193227 = $56; //@line 15650
        }
       }
       $60 = $52 - $$1186$ph238 | 0; //@line 15658
       if (($50 & 255) >= ($53 & 255)) {
        break;
       }
       $135 = $52 + 1 | 0; //@line 15662
       if ($135 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15667
        $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15667
        $$0187219$ph325326 = $$0187263; //@line 15667
        $$1176$ph$ph$lcssa208 = $60; //@line 15667
        $$1186$ph$lcssa = $$1186$ph238; //@line 15667
        label = 26; //@line 15668
        break L1;
       } else {
        $$1176$ph$ph233 = $60; //@line 15665
        $$1184$ph193$ph232 = $52; //@line 15665
       }
      }
      $133 = $$1184$ph193227 + 2 | 0; //@line 15673
      if ($133 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15678
       $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15678
       $$0187219$ph325326 = $$0187263; //@line 15678
       $$1176$ph$ph$lcssa208 = 1; //@line 15678
       $$1186$ph$lcssa = $$1184$ph193227; //@line 15678
       label = 26; //@line 15679
       break;
      } else {
       $$1184$ph239 = $$1184$ph193227 + 1 | 0; //@line 15676
       $$1186$ph238 = $$1184$ph193227; //@line 15676
      }
     }
    } else {
     $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15684
     $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15684
     $$0187219$ph325326 = $$0187263; //@line 15684
     $$1176$ph$ph$lcssa208 = 1; //@line 15684
     $$1186$ph$lcssa = -1; //@line 15684
     label = 26; //@line 15685
    }
   } else {
    $$0175$ph$ph$lcssa216328 = 1; //@line 15688
    $$0185$ph$lcssa327 = -1; //@line 15688
    $$0187219$ph325326 = $$0187263; //@line 15688
    $$1176$ph$ph$lcssa208 = 1; //@line 15688
    $$1186$ph$lcssa = -1; //@line 15688
    label = 26; //@line 15689
   }
  }
 } while (0);
 L35 : do {
  if ((label | 0) == 26) {
   $68 = ($$1186$ph$lcssa + 1 | 0) >>> 0 > ($$0185$ph$lcssa327 + 1 | 0) >>> 0; //@line 15697
   $$1176$$0175 = $68 ? $$1176$ph$ph$lcssa208 : $$0175$ph$ph$lcssa216328; //@line 15698
   $$1186$$0185 = $68 ? $$1186$ph$lcssa : $$0185$ph$lcssa327; //@line 15699
   $70 = $$1186$$0185 + 1 | 0; //@line 15701
   if (!(_memcmp($1, $1 + $$1176$$0175 | 0, $70) | 0)) {
    $$0168 = $$0187219$ph325326 - $$1176$$0175 | 0; //@line 15706
    $$3178 = $$1176$$0175; //@line 15706
   } else {
    $74 = $$0187219$ph325326 - $$1186$$0185 + -1 | 0; //@line 15709
    $$0168 = 0; //@line 15713
    $$3178 = ($$1186$$0185 >>> 0 > $74 >>> 0 ? $$1186$$0185 : $74) + 1 | 0; //@line 15713
   }
   $78 = $$0187219$ph325326 | 63; //@line 15715
   $79 = $$0187219$ph325326 + -1 | 0; //@line 15716
   $80 = ($$0168 | 0) != 0; //@line 15717
   $81 = $$0187219$ph325326 - $$3178 | 0; //@line 15718
   $$0166 = $0; //@line 15719
   $$0169 = 0; //@line 15719
   $$0170 = $0; //@line 15719
   while (1) {
    $83 = $$0166; //@line 15722
    do {
     if (($$0170 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
      $86 = _memchr($$0170, 0, $78) | 0; //@line 15727
      if (!$86) {
       $$3173 = $$0170 + $78 | 0; //@line 15731
       break;
      } else {
       if (($86 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
        $$3 = 0; //@line 15738
        break L35;
       } else {
        $$3173 = $86; //@line 15741
        break;
       }
      }
     } else {
      $$3173 = $$0170; //@line 15746
     }
    } while (0);
    $93 = HEAP8[$$0166 + $79 >> 0] | 0; //@line 15750
    L49 : do {
     if (!(1 << ($93 & 31) & HEAP32[$2 + ((($93 & 255) >>> 5 & 255) << 2) >> 2])) {
      $$0169$be = 0; //@line 15762
      $$2181$sink = $$0187219$ph325326; //@line 15762
     } else {
      $105 = $$0187219$ph325326 - (HEAP32[$3 + (($93 & 255) << 2) >> 2] | 0) | 0; //@line 15767
      if ($105 | 0) {
       $$0169$be = 0; //@line 15775
       $$2181$sink = $80 & ($$0169 | 0) != 0 & $105 >>> 0 < $$3178 >>> 0 ? $81 : $105; //@line 15775
       break;
      }
      $111 = $70 >>> 0 > $$0169 >>> 0 ? $70 : $$0169; //@line 15779
      $113 = HEAP8[$1 + $111 >> 0] | 0; //@line 15781
      L54 : do {
       if (!($113 << 24 >> 24)) {
        $$4 = $70; //@line 15785
       } else {
        $$3182221 = $111; //@line 15787
        $$pr = $113; //@line 15787
        while (1) {
         if ($$pr << 24 >> 24 != (HEAP8[$$0166 + $$3182221 >> 0] | 0)) {
          break;
         }
         $118 = $$3182221 + 1 | 0; //@line 15795
         $$pr = HEAP8[$1 + $118 >> 0] | 0; //@line 15797
         if (!($$pr << 24 >> 24)) {
          $$4 = $70; //@line 15800
          break L54;
         } else {
          $$3182221 = $118; //@line 15803
         }
        }
        $$0169$be = 0; //@line 15807
        $$2181$sink = $$3182221 - $$1186$$0185 | 0; //@line 15807
        break L49;
       }
      } while (0);
      while (1) {
       if ($$4 >>> 0 <= $$0169 >>> 0) {
        $$3 = $$0166; //@line 15814
        break L35;
       }
       $$4 = $$4 + -1 | 0; //@line 15817
       if ((HEAP8[$1 + $$4 >> 0] | 0) != (HEAP8[$$0166 + $$4 >> 0] | 0)) {
        $$0169$be = $$0168; //@line 15826
        $$2181$sink = $$3178; //@line 15826
        break;
       }
      }
     }
    } while (0);
    $$0166 = $$0166 + $$2181$sink | 0; //@line 15833
    $$0169 = $$0169$be; //@line 15833
    $$0170 = $$3173; //@line 15833
   }
  }
 } while (0);
 STACKTOP = sp; //@line 15837
 return $$3 | 0; //@line 15837
}
function _mbedtls_gcm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$i = 0, $108 = 0, $110 = 0, $115 = 0, $120 = 0, $125 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $141 = 0, $143 = 0, $148 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $166 = 0, $171 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $187 = 0, $189 = 0, $194 = 0, $198 = 0, $199 = 0, $201 = 0, $205 = 0, $206 = 0, $208 = 0, $212 = 0, $213 = 0, $215 = 0, $219 = 0, $220 = 0, $222 = 0, $226 = 0, $227 = 0, $229 = 0, $233 = 0, $234 = 0, $236 = 0, $240 = 0, $241 = 0, $243 = 0, $247 = 0, $248 = 0, $250 = 0, $257 = 0, $26 = 0, $264 = 0, $271 = 0, $278 = 0, $285 = 0, $292 = 0, $299 = 0, $306 = 0, $313 = 0, $32 = 0, $320 = 0, $327 = 0, $334 = 0, $341 = 0, $348 = 0, $4 = 0, $5 = 0, $54 = 0, $6 = 0, $72 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 4300
 STACKTOP = STACKTOP + 32 | 0; //@line 4301
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4301
 $4 = sp + 8 | 0; //@line 4302
 $5 = sp; //@line 4303
 $6 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 4304
 if (!$6) {
  $$0 = -20; //@line 4307
  STACKTOP = sp; //@line 4308
  return $$0 | 0; //@line 4308
 }
 if ((HEAP32[$6 + 24 >> 2] | 0) != 16) {
  $$0 = -20; //@line 4314
  STACKTOP = sp; //@line 4315
  return $$0 | 0; //@line 4315
 }
 $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4317
 _mbedtls_cipher_free($0); //@line 4318
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 590; //@line 4321
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 4323
  HEAP32[$AsyncCtx11 + 8 >> 2] = $6; //@line 4325
  HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 4327
  HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 4329
  HEAP32[$AsyncCtx11 + 20 >> 2] = $4; //@line 4331
  HEAP32[$AsyncCtx11 + 24 >> 2] = $5; //@line 4333
  HEAP32[$AsyncCtx11 + 28 >> 2] = $0; //@line 4335
  sp = STACKTOP; //@line 4336
  STACKTOP = sp; //@line 4337
  return 0; //@line 4337
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4339
 $AsyncCtx7 = _emscripten_alloc_async_context(28, sp) | 0; //@line 4340
 $18 = _mbedtls_cipher_setup($0, $6) | 0; //@line 4341
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 591; //@line 4344
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 4346
  HEAP32[$AsyncCtx7 + 8 >> 2] = $2; //@line 4348
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 4350
  HEAP32[$AsyncCtx7 + 16 >> 2] = $4; //@line 4352
  HEAP32[$AsyncCtx7 + 20 >> 2] = $5; //@line 4354
  HEAP32[$AsyncCtx7 + 24 >> 2] = $0; //@line 4356
  sp = STACKTOP; //@line 4357
  STACKTOP = sp; //@line 4358
  return 0; //@line 4358
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4360
 if ($18 | 0) {
  $$0 = $18; //@line 4363
  STACKTOP = sp; //@line 4364
  return $$0 | 0; //@line 4364
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4366
 $26 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 4367
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 592; //@line 4370
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 4372
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 4374
  HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 4376
  HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 4378
  sp = STACKTOP; //@line 4379
  STACKTOP = sp; //@line 4380
  return 0; //@line 4380
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4382
 if ($26 | 0) {
  $$0 = $26; //@line 4385
  STACKTOP = sp; //@line 4386
  return $$0 | 0; //@line 4386
 }
 HEAP32[$5 >> 2] = 0; //@line 4388
 dest = $4; //@line 4389
 stop = dest + 16 | 0; //@line 4389
 do {
  HEAP8[dest >> 0] = 0; //@line 4389
  dest = dest + 1 | 0; //@line 4389
 } while ((dest | 0) < (stop | 0));
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 4390
 $32 = _mbedtls_cipher_update($0, $4, 16, $4, $5) | 0; //@line 4391
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 593; //@line 4394
  HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 4396
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 4398
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 4400
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 4402
  sp = STACKTOP; //@line 4403
  STACKTOP = sp; //@line 4404
  return 0; //@line 4404
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4406
 if (!$32) {
  $54 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[$4 >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 4425
  $72 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 4443
  $90 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 4461
  $108 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 4479
  $110 = $0 + 136 | 0; //@line 4481
  HEAP32[$110 >> 2] = $108; //@line 4483
  HEAP32[$110 + 4 >> 2] = $90; //@line 4486
  $115 = $0 + 264 | 0; //@line 4488
  HEAP32[$115 >> 2] = $72; //@line 4490
  HEAP32[$115 + 4 >> 2] = $54; //@line 4493
  $120 = $0 + 200 | 0; //@line 4495
  HEAP32[$120 >> 2] = 0; //@line 4497
  HEAP32[$120 + 4 >> 2] = 0; //@line 4500
  $125 = $0 + 72 | 0; //@line 4502
  HEAP32[$125 >> 2] = 0; //@line 4504
  HEAP32[$125 + 4 >> 2] = 0; //@line 4507
  $130 = _i64Subtract(0, 0, $108 & 1 | 0, 0) | 0; //@line 4509
  $132 = _bitshift64Shl($72 | 0, 0, 63) | 0; //@line 4511
  $133 = tempRet0; //@line 4512
  $134 = _bitshift64Lshr($108 | 0, $90 | 0, 1) | 0; //@line 4513
  $136 = $134 | $132; //@line 4515
  $137 = tempRet0 | $133; //@line 4516
  $138 = _bitshift64Lshr($72 | 0, $54 | 0, 1) | 0; //@line 4517
  $139 = tempRet0; //@line 4518
  $141 = $130 & -520093696 ^ $139; //@line 4520
  $143 = $0 + 104 | 0; //@line 4522
  HEAP32[$143 >> 2] = $136; //@line 4524
  HEAP32[$143 + 4 >> 2] = $137; //@line 4527
  $148 = $0 + 232 | 0; //@line 4529
  HEAP32[$148 >> 2] = $138; //@line 4531
  HEAP32[$148 + 4 >> 2] = $141; //@line 4534
  $153 = _i64Subtract(0, 0, $134 & 1 | 0, 0) | 0; //@line 4536
  $155 = _bitshift64Shl($138 | 0, $139 | 0, 63) | 0; //@line 4538
  $156 = tempRet0; //@line 4539
  $157 = _bitshift64Lshr($136 | 0, $137 | 0, 1) | 0; //@line 4540
  $159 = $157 | $155; //@line 4542
  $160 = tempRet0 | $156; //@line 4543
  $161 = _bitshift64Lshr($138 | 0, $141 | 0, 1) | 0; //@line 4544
  $162 = tempRet0; //@line 4545
  $164 = $153 & -520093696 ^ $162; //@line 4547
  $166 = $0 + 88 | 0; //@line 4549
  HEAP32[$166 >> 2] = $159; //@line 4551
  HEAP32[$166 + 4 >> 2] = $160; //@line 4554
  $171 = $0 + 216 | 0; //@line 4556
  HEAP32[$171 >> 2] = $161; //@line 4558
  HEAP32[$171 + 4 >> 2] = $164; //@line 4561
  $176 = _i64Subtract(0, 0, $157 & 1 | 0, 0) | 0; //@line 4563
  $178 = _bitshift64Shl($161 | 0, $162 | 0, 63) | 0; //@line 4565
  $179 = tempRet0; //@line 4566
  $180 = _bitshift64Lshr($159 | 0, $160 | 0, 1) | 0; //@line 4567
  $182 = $178 | $180; //@line 4569
  $183 = $179 | tempRet0; //@line 4570
  $184 = _bitshift64Lshr($161 | 0, $164 | 0, 1) | 0; //@line 4571
  $187 = $176 & -520093696 ^ tempRet0; //@line 4574
  $189 = $0 + 80 | 0; //@line 4576
  HEAP32[$189 >> 2] = $182; //@line 4578
  HEAP32[$189 + 4 >> 2] = $183; //@line 4581
  $194 = $0 + 208 | 0; //@line 4583
  HEAP32[$194 >> 2] = $184; //@line 4585
  HEAP32[$194 + 4 >> 2] = $187; //@line 4588
  $198 = $184 ^ $161; //@line 4589
  $199 = $187 ^ $164; //@line 4590
  $201 = $0 + 224 | 0; //@line 4592
  HEAP32[$201 >> 2] = $198; //@line 4594
  HEAP32[$201 + 4 >> 2] = $199; //@line 4597
  $205 = $182 ^ $159; //@line 4598
  $206 = $183 ^ $160; //@line 4599
  $208 = $0 + 96 | 0; //@line 4601
  HEAP32[$208 >> 2] = $205; //@line 4603
  HEAP32[$208 + 4 >> 2] = $206; //@line 4606
  $212 = $184 ^ $138; //@line 4607
  $213 = $187 ^ $141; //@line 4608
  $215 = $0 + 240 | 0; //@line 4610
  HEAP32[$215 >> 2] = $212; //@line 4612
  HEAP32[$215 + 4 >> 2] = $213; //@line 4615
  $219 = $182 ^ $136; //@line 4616
  $220 = $183 ^ $137; //@line 4617
  $222 = $0 + 112 | 0; //@line 4619
  HEAP32[$222 >> 2] = $219; //@line 4621
  HEAP32[$222 + 4 >> 2] = $220; //@line 4624
  $226 = $161 ^ $138; //@line 4625
  $227 = $164 ^ $141; //@line 4626
  $229 = $0 + 248 | 0; //@line 4628
  HEAP32[$229 >> 2] = $226; //@line 4630
  HEAP32[$229 + 4 >> 2] = $227; //@line 4633
  $233 = $159 ^ $136; //@line 4634
  $234 = $160 ^ $137; //@line 4635
  $236 = $0 + 120 | 0; //@line 4637
  HEAP32[$236 >> 2] = $233; //@line 4639
  HEAP32[$236 + 4 >> 2] = $234; //@line 4642
  $240 = $198 ^ $138; //@line 4643
  $241 = $199 ^ $141; //@line 4644
  $243 = $0 + 256 | 0; //@line 4646
  HEAP32[$243 >> 2] = $240; //@line 4648
  HEAP32[$243 + 4 >> 2] = $241; //@line 4651
  $247 = $205 ^ $136; //@line 4652
  $248 = $206 ^ $137; //@line 4653
  $250 = $0 + 128 | 0; //@line 4655
  HEAP32[$250 >> 2] = $247; //@line 4657
  HEAP32[$250 + 4 >> 2] = $248; //@line 4660
  $257 = $0 + 272 | 0; //@line 4664
  HEAP32[$257 >> 2] = $184 ^ $72; //@line 4666
  HEAP32[$257 + 4 >> 2] = $187 ^ $54; //@line 4669
  $264 = $0 + 144 | 0; //@line 4673
  HEAP32[$264 >> 2] = $182 ^ $108; //@line 4675
  HEAP32[$264 + 4 >> 2] = $183 ^ $90; //@line 4678
  $271 = $0 + 280 | 0; //@line 4682
  HEAP32[$271 >> 2] = $161 ^ $72; //@line 4684
  HEAP32[$271 + 4 >> 2] = $164 ^ $54; //@line 4687
  $278 = $0 + 152 | 0; //@line 4691
  HEAP32[$278 >> 2] = $159 ^ $108; //@line 4693
  HEAP32[$278 + 4 >> 2] = $160 ^ $90; //@line 4696
  $285 = $0 + 288 | 0; //@line 4700
  HEAP32[$285 >> 2] = $198 ^ $72; //@line 4702
  HEAP32[$285 + 4 >> 2] = $199 ^ $54; //@line 4705
  $292 = $0 + 160 | 0; //@line 4709
  HEAP32[$292 >> 2] = $205 ^ $108; //@line 4711
  HEAP32[$292 + 4 >> 2] = $206 ^ $90; //@line 4714
  $299 = $0 + 296 | 0; //@line 4718
  HEAP32[$299 >> 2] = $138 ^ $72; //@line 4720
  HEAP32[$299 + 4 >> 2] = $141 ^ $54; //@line 4723
  $306 = $0 + 168 | 0; //@line 4727
  HEAP32[$306 >> 2] = $136 ^ $108; //@line 4729
  HEAP32[$306 + 4 >> 2] = $137 ^ $90; //@line 4732
  $313 = $0 + 304 | 0; //@line 4736
  HEAP32[$313 >> 2] = $212 ^ $72; //@line 4738
  HEAP32[$313 + 4 >> 2] = $213 ^ $54; //@line 4741
  $320 = $0 + 176 | 0; //@line 4745
  HEAP32[$320 >> 2] = $219 ^ $108; //@line 4747
  HEAP32[$320 + 4 >> 2] = $220 ^ $90; //@line 4750
  $327 = $0 + 312 | 0; //@line 4754
  HEAP32[$327 >> 2] = $226 ^ $72; //@line 4756
  HEAP32[$327 + 4 >> 2] = $227 ^ $54; //@line 4759
  $334 = $0 + 184 | 0; //@line 4763
  HEAP32[$334 >> 2] = $233 ^ $108; //@line 4765
  HEAP32[$334 + 4 >> 2] = $234 ^ $90; //@line 4768
  $341 = $0 + 320 | 0; //@line 4772
  HEAP32[$341 >> 2] = $240 ^ $72; //@line 4774
  HEAP32[$341 + 4 >> 2] = $241 ^ $54; //@line 4777
  $348 = $0 + 192 | 0; //@line 4781
  HEAP32[$348 >> 2] = $247 ^ $108; //@line 4783
  HEAP32[$348 + 4 >> 2] = $248 ^ $90; //@line 4786
  $$0$i = 0; //@line 4787
 } else {
  $$0$i = $32; //@line 4789
 }
 $$0 = $$0$i; //@line 4791
 STACKTOP = sp; //@line 4792
 return $$0 | 0; //@line 4792
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $103 = 0, $104 = 0, $108 = 0, $11 = 0, $110 = 0, $115 = 0, $116 = 0, $119 = 0, $122 = 0, $13 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $25 = 0, $33 = 0, $4 = 0, $41 = 0, $53 = 0, $54 = 0, $58 = 0, $6 = 0, $60 = 0, $69 = 0, $7 = 0, $70 = 0, $77 = 0, $80 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8055
 STACKTOP = STACKTOP + 64 | 0; //@line 8056
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 8056
 $vararg_buffer3 = sp + 24 | 0; //@line 8057
 $vararg_buffer1 = sp + 16 | 0; //@line 8058
 $vararg_buffer = sp; //@line 8059
 $1 = sp + 40 | 0; //@line 8060
 $2 = __ZNK7LoRaMac19get_mcps_indicationEv($0) | 0; //@line 8061
 $4 = HEAP32[$2 + 8 >> 2] | 0; //@line 8063
 if ($4 | 0) {
  HEAP32[$vararg_buffer >> 2] = $4; //@line 8066
  _mbed_tracef(2, 12506, 12511, $vararg_buffer); //@line 8067
  $6 = $0 + 2496 | 0; //@line 8068
  $7 = HEAP32[$6 >> 2] | 0; //@line 8069
  do {
   if ($7 | 0) {
    $11 = HEAP32[$0 + 3136 >> 2] | 0; //@line 8075
    $13 = HEAP32[$7 + 4 >> 2] | 0; //@line 8077
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 8078
    FUNCTION_TABLE_vii[$13 & 15]($vararg_buffer, $0 + 2484 | 0); //@line 8079
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 254; //@line 8082
     HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 8084
     HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 8086
     HEAP32[$AsyncCtx + 12 >> 2] = $11; //@line 8088
     HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 8090
     sp = STACKTOP; //@line 8091
     STACKTOP = sp; //@line 8092
     return;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 8094
    $18 = $vararg_buffer + 12 | 0; //@line 8096
    HEAP32[$18 >> 2] = HEAP32[$6 >> 2]; //@line 8097
    $AsyncCtx30 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8098
    $19 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($11, $vararg_buffer, 9) | 0; //@line 8099
    if (___async) {
     HEAP32[$AsyncCtx30 >> 2] = 255; //@line 8102
     HEAP32[$AsyncCtx30 + 4 >> 2] = $18; //@line 8104
     HEAP32[$AsyncCtx30 + 8 >> 2] = $vararg_buffer; //@line 8106
     sp = STACKTOP; //@line 8107
     STACKTOP = sp; //@line 8108
     return;
    }
    _emscripten_free_async_context($AsyncCtx30 | 0); //@line 8110
    $22 = HEAP32[$18 >> 2] | 0; //@line 8111
    do {
     if ($22 | 0) {
      $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 8116
      $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8117
      FUNCTION_TABLE_vi[$25 & 1023]($vararg_buffer); //@line 8118
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 256; //@line 8121
       HEAP32[$AsyncCtx7 + 4 >> 2] = $19; //@line 8123
       HEAP32[$AsyncCtx7 + 8 >> 2] = $vararg_buffer; //@line 8125
       sp = STACKTOP; //@line 8126
       STACKTOP = sp; //@line 8127
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx7 | 0); //@line 8129
       break;
      }
     }
    } while (0);
    if (!$19) {
     $AsyncCtx42 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8136
     _mbed_assert_internal(13121, 12408, 646); //@line 8137
     if (___async) {
      HEAP32[$AsyncCtx42 >> 2] = 257; //@line 8140
      HEAP32[$AsyncCtx42 + 4 >> 2] = $vararg_buffer; //@line 8142
      sp = STACKTOP; //@line 8143
      STACKTOP = sp; //@line 8144
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx42 | 0); //@line 8146
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 8152
  return;
 }
 HEAP32[$0 + 2540 >> 2] = HEAP32[$2 + 36 >> 2]; //@line 8157
 $33 = $2 + 13 | 0; //@line 8158
 if ((HEAP8[$33 >> 0] | 0) == -32) {
  _mbed_tracef(8, 12506, 12549, $vararg_buffer1); //@line 8162
  STACKTOP = sp; //@line 8163
  return;
 }
 if (HEAP8[$2 + 22 >> 0] | 0) {
  HEAP32[$0 + 2820 >> 2] = 2; //@line 8170
  $41 = HEAP16[$2 + 20 >> 1] | 0; //@line 8172
  HEAP16[$0 + 2844 >> 1] = $41; //@line 8174
  HEAP8[$0 + 2837 >> 0] = HEAP8[$33 >> 0] | 0; //@line 8177
  HEAP32[$0 + 2840 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 8181
  HEAP32[$0 + 2828 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 8185
  HEAP32[$vararg_buffer3 >> 2] = $41 & 65535; //@line 8187
  _mbed_tracef(16, 12506, 12575, $vararg_buffer3); //@line 8188
  HEAP8[$0 + 2816 >> 0] = 1; //@line 8190
  $53 = $0 + 2496 | 0; //@line 8191
  $54 = HEAP32[$53 >> 2] | 0; //@line 8192
  do {
   if ($54 | 0) {
    $58 = HEAP32[$0 + 3136 >> 2] | 0; //@line 8198
    $60 = HEAP32[$54 + 4 >> 2] | 0; //@line 8200
    $AsyncCtx10 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8201
    FUNCTION_TABLE_vii[$60 & 15]($vararg_buffer3, $0 + 2484 | 0); //@line 8202
    if (___async) {
     HEAP32[$AsyncCtx10 >> 2] = 258; //@line 8205
     HEAP32[$AsyncCtx10 + 4 >> 2] = $53; //@line 8207
     HEAP32[$AsyncCtx10 + 8 >> 2] = $vararg_buffer3; //@line 8209
     HEAP32[$AsyncCtx10 + 12 >> 2] = $58; //@line 8211
     HEAP32[$AsyncCtx10 + 16 >> 2] = $0; //@line 8213
     HEAP32[$AsyncCtx10 + 20 >> 2] = $1; //@line 8215
     HEAP32[$AsyncCtx10 + 24 >> 2] = $2; //@line 8217
     HEAP32[$AsyncCtx10 + 28 >> 2] = $0; //@line 8219
     HEAP32[$AsyncCtx10 + 32 >> 2] = $vararg_buffer3; //@line 8221
     sp = STACKTOP; //@line 8222
     STACKTOP = sp; //@line 8223
     return;
    }
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 8225
    $69 = $vararg_buffer3 + 12 | 0; //@line 8227
    HEAP32[$69 >> 2] = HEAP32[$53 >> 2]; //@line 8228
    $AsyncCtx27 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8229
    $70 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($58, $vararg_buffer3, 7) | 0; //@line 8230
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 259; //@line 8233
     HEAP32[$AsyncCtx27 + 4 >> 2] = $1; //@line 8235
     HEAP32[$AsyncCtx27 + 8 >> 2] = $0; //@line 8237
     HEAP32[$AsyncCtx27 + 12 >> 2] = $2; //@line 8239
     HEAP32[$AsyncCtx27 + 16 >> 2] = $0; //@line 8241
     HEAP32[$AsyncCtx27 + 20 >> 2] = $vararg_buffer3; //@line 8243
     HEAP32[$AsyncCtx27 + 24 >> 2] = $69; //@line 8245
     sp = STACKTOP; //@line 8246
     STACKTOP = sp; //@line 8247
     return;
    }
    _emscripten_free_async_context($AsyncCtx27 | 0); //@line 8249
    $77 = HEAP32[$69 >> 2] | 0; //@line 8250
    do {
     if ($77 | 0) {
      $80 = HEAP32[$77 + 8 >> 2] | 0; //@line 8255
      $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8256
      FUNCTION_TABLE_vi[$80 & 1023]($vararg_buffer3); //@line 8257
      if (___async) {
       HEAP32[$AsyncCtx14 >> 2] = 260; //@line 8260
       HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 8262
       HEAP32[$AsyncCtx14 + 8 >> 2] = $1; //@line 8264
       HEAP32[$AsyncCtx14 + 12 >> 2] = $2; //@line 8266
       HEAP32[$AsyncCtx14 + 16 >> 2] = $0; //@line 8268
       HEAP32[$AsyncCtx14 + 20 >> 2] = $vararg_buffer3; //@line 8270
       HEAP32[$AsyncCtx14 + 24 >> 2] = $70; //@line 8272
       sp = STACKTOP; //@line 8273
       STACKTOP = sp; //@line 8274
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx14 | 0); //@line 8276
       break;
      }
     }
    } while (0);
    if (!$70) {
     $AsyncCtx38 = _emscripten_alloc_async_context(24, sp) | 0; //@line 8283
     _mbed_assert_internal(13121, 12408, 646); //@line 8284
     if (___async) {
      HEAP32[$AsyncCtx38 >> 2] = 261; //@line 8287
      HEAP32[$AsyncCtx38 + 4 >> 2] = $1; //@line 8289
      HEAP32[$AsyncCtx38 + 8 >> 2] = $0; //@line 8291
      HEAP32[$AsyncCtx38 + 12 >> 2] = $2; //@line 8293
      HEAP32[$AsyncCtx38 + 16 >> 2] = $0; //@line 8295
      HEAP32[$AsyncCtx38 + 20 >> 2] = $vararg_buffer3; //@line 8297
      sp = STACKTOP; //@line 8298
      STACKTOP = sp; //@line 8299
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx38 | 0); //@line 8301
      break;
     }
    }
   }
  } while (0);
 }
 if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2) {
  label = 35; //@line 8311
 } else {
  if (!(HEAP8[$2 + 15 >> 0] | 0)) {
   label = 35; //@line 8317
  }
 }
 if ((label | 0) == 35) {
  if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) != 2) {
   STACKTOP = sp; //@line 8324
   return;
  }
  if ((HEAP32[$2 + 4 >> 2] | 0) != 1) {
   STACKTOP = sp; //@line 8330
   return;
  }
 }
 $103 = $0 + 2496 | 0; //@line 8333
 $104 = HEAP32[$103 >> 2] | 0; //@line 8334
 do {
  if ($104 | 0) {
   $108 = HEAP32[$0 + 3136 >> 2] | 0; //@line 8340
   $110 = HEAP32[$104 + 4 >> 2] | 0; //@line 8342
   $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8343
   FUNCTION_TABLE_vii[$110 & 15]($1, $0 + 2484 | 0); //@line 8344
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 262; //@line 8347
    HEAP32[$AsyncCtx17 + 4 >> 2] = $103; //@line 8349
    HEAP32[$AsyncCtx17 + 8 >> 2] = $1; //@line 8351
    HEAP32[$AsyncCtx17 + 12 >> 2] = $108; //@line 8353
    HEAP32[$AsyncCtx17 + 16 >> 2] = $1; //@line 8355
    sp = STACKTOP; //@line 8356
    STACKTOP = sp; //@line 8357
    return;
   }
   _emscripten_free_async_context($AsyncCtx17 | 0); //@line 8359
   $115 = $1 + 12 | 0; //@line 8361
   HEAP32[$115 >> 2] = HEAP32[$103 >> 2]; //@line 8362
   $AsyncCtx24 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8363
   $116 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($108, $1, 11) | 0; //@line 8364
   if (___async) {
    HEAP32[$AsyncCtx24 >> 2] = 263; //@line 8367
    HEAP32[$AsyncCtx24 + 4 >> 2] = $115; //@line 8369
    HEAP32[$AsyncCtx24 + 8 >> 2] = $1; //@line 8371
    sp = STACKTOP; //@line 8372
    STACKTOP = sp; //@line 8373
    return;
   }
   _emscripten_free_async_context($AsyncCtx24 | 0); //@line 8375
   $119 = HEAP32[$115 >> 2] | 0; //@line 8376
   do {
    if ($119 | 0) {
     $122 = HEAP32[$119 + 8 >> 2] | 0; //@line 8381
     $AsyncCtx21 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8382
     FUNCTION_TABLE_vi[$122 & 1023]($1); //@line 8383
     if (___async) {
      HEAP32[$AsyncCtx21 >> 2] = 264; //@line 8386
      HEAP32[$AsyncCtx21 + 4 >> 2] = $116; //@line 8388
      HEAP32[$AsyncCtx21 + 8 >> 2] = $1; //@line 8390
      sp = STACKTOP; //@line 8391
      STACKTOP = sp; //@line 8392
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx21 | 0); //@line 8394
      break;
     }
    }
   } while (0);
   if (!$116) {
    $AsyncCtx34 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8401
    _mbed_assert_internal(13121, 12408, 646); //@line 8402
    if (___async) {
     HEAP32[$AsyncCtx34 >> 2] = 265; //@line 8405
     HEAP32[$AsyncCtx34 + 4 >> 2] = $1; //@line 8407
     sp = STACKTOP; //@line 8408
     STACKTOP = sp; //@line 8409
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx34 | 0); //@line 8411
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 8417
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $83 = 0, $88 = 0, $89 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 1251
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1253
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1255
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1257
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1259
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1261
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1263
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1265
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1267
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1269
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 1271
 if (HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac25post_process_mlme_requestEv($2); //@line 1276
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(44) | 0; //@line 1277
  __ZN12LoRaWANStack20mlme_confirm_handlerEv($4); //@line 1278
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 291; //@line 1281
   $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 1282
   HEAP32[$24 >> 2] = $2; //@line 1283
   $25 = $ReallocAsyncCtx3 + 8 | 0; //@line 1284
   HEAP32[$25 >> 2] = $6; //@line 1285
   $26 = $ReallocAsyncCtx3 + 12 | 0; //@line 1286
   HEAP32[$26 >> 2] = $4; //@line 1287
   $27 = $ReallocAsyncCtx3 + 16 | 0; //@line 1288
   HEAP32[$27 >> 2] = $8; //@line 1289
   $28 = $ReallocAsyncCtx3 + 20 | 0; //@line 1290
   HEAP32[$28 >> 2] = $10; //@line 1291
   $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 1292
   HEAP32[$29 >> 2] = $12; //@line 1293
   $30 = $ReallocAsyncCtx3 + 28 | 0; //@line 1294
   HEAP32[$30 >> 2] = $14; //@line 1295
   $31 = $ReallocAsyncCtx3 + 32 | 0; //@line 1296
   HEAP32[$31 >> 2] = $16; //@line 1297
   $32 = $ReallocAsyncCtx3 + 36 | 0; //@line 1298
   HEAP32[$32 >> 2] = $18; //@line 1299
   $33 = $ReallocAsyncCtx3 + 40 | 0; //@line 1300
   HEAP32[$33 >> 2] = $20; //@line 1301
   sp = STACKTOP; //@line 1302
   return;
  }
  ___async_unwind = 0; //@line 1305
  HEAP32[$ReallocAsyncCtx3 >> 2] = 291; //@line 1306
  $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 1307
  HEAP32[$24 >> 2] = $2; //@line 1308
  $25 = $ReallocAsyncCtx3 + 8 | 0; //@line 1309
  HEAP32[$25 >> 2] = $6; //@line 1310
  $26 = $ReallocAsyncCtx3 + 12 | 0; //@line 1311
  HEAP32[$26 >> 2] = $4; //@line 1312
  $27 = $ReallocAsyncCtx3 + 16 | 0; //@line 1313
  HEAP32[$27 >> 2] = $8; //@line 1314
  $28 = $ReallocAsyncCtx3 + 20 | 0; //@line 1315
  HEAP32[$28 >> 2] = $10; //@line 1316
  $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 1317
  HEAP32[$29 >> 2] = $12; //@line 1318
  $30 = $ReallocAsyncCtx3 + 28 | 0; //@line 1319
  HEAP32[$30 >> 2] = $14; //@line 1320
  $31 = $ReallocAsyncCtx3 + 32 | 0; //@line 1321
  HEAP32[$31 >> 2] = $16; //@line 1322
  $32 = $ReallocAsyncCtx3 + 36 | 0; //@line 1323
  HEAP32[$32 >> 2] = $18; //@line 1324
  $33 = $ReallocAsyncCtx3 + 40 | 0; //@line 1325
  HEAP32[$33 >> 2] = $20; //@line 1326
  sp = STACKTOP; //@line 1327
  return;
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($2) | 0)) {
  $89 = $4 + 2879 | 0; //@line 1332
  HEAP8[$89 >> 0] = 1; //@line 1333
  return;
 }
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) >> 2] | 0) != 1) {
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 1340
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 16; //@line 1343
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 1344
  __ZN12LoRaWANStack26process_status_check_stateEv($4); //@line 1345
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 293; //@line 1348
   $58 = $ReallocAsyncCtx5 + 4 | 0; //@line 1349
   HEAP32[$58 >> 2] = $2; //@line 1350
   $59 = $ReallocAsyncCtx5 + 8 | 0; //@line 1351
   HEAP32[$59 >> 2] = $6; //@line 1352
   $60 = $ReallocAsyncCtx5 + 12 | 0; //@line 1353
   HEAP32[$60 >> 2] = $4; //@line 1354
   $61 = $ReallocAsyncCtx5 + 16 | 0; //@line 1355
   HEAP32[$61 >> 2] = $20; //@line 1356
   $62 = $ReallocAsyncCtx5 + 20 | 0; //@line 1357
   HEAP32[$62 >> 2] = $12; //@line 1358
   $63 = $ReallocAsyncCtx5 + 24 | 0; //@line 1359
   HEAP32[$63 >> 2] = $14; //@line 1360
   $64 = $ReallocAsyncCtx5 + 28 | 0; //@line 1361
   HEAP32[$64 >> 2] = $16; //@line 1362
   $65 = $ReallocAsyncCtx5 + 32 | 0; //@line 1363
   HEAP32[$65 >> 2] = $18; //@line 1364
   sp = STACKTOP; //@line 1365
   return;
  }
  ___async_unwind = 0; //@line 1368
  HEAP32[$ReallocAsyncCtx5 >> 2] = 293; //@line 1369
  $58 = $ReallocAsyncCtx5 + 4 | 0; //@line 1370
  HEAP32[$58 >> 2] = $2; //@line 1371
  $59 = $ReallocAsyncCtx5 + 8 | 0; //@line 1372
  HEAP32[$59 >> 2] = $6; //@line 1373
  $60 = $ReallocAsyncCtx5 + 12 | 0; //@line 1374
  HEAP32[$60 >> 2] = $4; //@line 1375
  $61 = $ReallocAsyncCtx5 + 16 | 0; //@line 1376
  HEAP32[$61 >> 2] = $20; //@line 1377
  $62 = $ReallocAsyncCtx5 + 20 | 0; //@line 1378
  HEAP32[$62 >> 2] = $12; //@line 1379
  $63 = $ReallocAsyncCtx5 + 24 | 0; //@line 1380
  HEAP32[$63 >> 2] = $14; //@line 1381
  $64 = $ReallocAsyncCtx5 + 28 | 0; //@line 1382
  HEAP32[$64 >> 2] = $16; //@line 1383
  $65 = $ReallocAsyncCtx5 + 32 | 0; //@line 1384
  HEAP32[$65 >> 2] = $18; //@line 1385
  sp = STACKTOP; //@line 1386
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 32 >> 0] | 0) {
  HEAP32[$8 >> 2] = HEAPU8[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) + 11 >> 0]; //@line 1398
  _mbed_tracef(16, 12506, 12671, $8); //@line 1399
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 1400
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 16; //@line 1403
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 1404
  __ZN12LoRaWANStack26process_status_check_stateEv($4); //@line 1405
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 292; //@line 1408
   $48 = $ReallocAsyncCtx6 + 4 | 0; //@line 1409
   HEAP32[$48 >> 2] = $2; //@line 1410
   $49 = $ReallocAsyncCtx6 + 8 | 0; //@line 1411
   HEAP32[$49 >> 2] = $6; //@line 1412
   $50 = $ReallocAsyncCtx6 + 12 | 0; //@line 1413
   HEAP32[$50 >> 2] = $4; //@line 1414
   $51 = $ReallocAsyncCtx6 + 16 | 0; //@line 1415
   HEAP32[$51 >> 2] = $20; //@line 1416
   $52 = $ReallocAsyncCtx6 + 20 | 0; //@line 1417
   HEAP32[$52 >> 2] = $12; //@line 1418
   $53 = $ReallocAsyncCtx6 + 24 | 0; //@line 1419
   HEAP32[$53 >> 2] = $14; //@line 1420
   $54 = $ReallocAsyncCtx6 + 28 | 0; //@line 1421
   HEAP32[$54 >> 2] = $16; //@line 1422
   $55 = $ReallocAsyncCtx6 + 32 | 0; //@line 1423
   HEAP32[$55 >> 2] = $18; //@line 1424
   sp = STACKTOP; //@line 1425
   return;
  }
  ___async_unwind = 0; //@line 1428
  HEAP32[$ReallocAsyncCtx6 >> 2] = 292; //@line 1429
  $48 = $ReallocAsyncCtx6 + 4 | 0; //@line 1430
  HEAP32[$48 >> 2] = $2; //@line 1431
  $49 = $ReallocAsyncCtx6 + 8 | 0; //@line 1432
  HEAP32[$49 >> 2] = $6; //@line 1433
  $50 = $ReallocAsyncCtx6 + 12 | 0; //@line 1434
  HEAP32[$50 >> 2] = $4; //@line 1435
  $51 = $ReallocAsyncCtx6 + 16 | 0; //@line 1436
  HEAP32[$51 >> 2] = $20; //@line 1437
  $52 = $ReallocAsyncCtx6 + 20 | 0; //@line 1438
  HEAP32[$52 >> 2] = $12; //@line 1439
  $53 = $ReallocAsyncCtx6 + 24 | 0; //@line 1440
  HEAP32[$53 >> 2] = $14; //@line 1441
  $54 = $ReallocAsyncCtx6 + 28 | 0; //@line 1442
  HEAP32[$54 >> 2] = $16; //@line 1443
  $55 = $ReallocAsyncCtx6 + 32 | 0; //@line 1444
  HEAP32[$55 >> 2] = $18; //@line 1445
  sp = STACKTOP; //@line 1446
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 1453
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 2; //@line 1456
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 1457
  __ZN12LoRaWANStack26process_status_check_stateEv($4); //@line 1458
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 294; //@line 1461
   $71 = $ReallocAsyncCtx4 + 4 | 0; //@line 1462
   HEAP32[$71 >> 2] = $6; //@line 1463
   $72 = $ReallocAsyncCtx4 + 8 | 0; //@line 1464
   HEAP32[$72 >> 2] = $2; //@line 1465
   $73 = $ReallocAsyncCtx4 + 12 | 0; //@line 1466
   HEAP32[$73 >> 2] = $20; //@line 1467
   $74 = $ReallocAsyncCtx4 + 16 | 0; //@line 1468
   HEAP32[$74 >> 2] = $4; //@line 1469
   $75 = $ReallocAsyncCtx4 + 20 | 0; //@line 1470
   HEAP32[$75 >> 2] = $12; //@line 1471
   $76 = $ReallocAsyncCtx4 + 24 | 0; //@line 1472
   HEAP32[$76 >> 2] = $14; //@line 1473
   $77 = $ReallocAsyncCtx4 + 28 | 0; //@line 1474
   HEAP32[$77 >> 2] = $16; //@line 1475
   $78 = $ReallocAsyncCtx4 + 32 | 0; //@line 1476
   HEAP32[$78 >> 2] = $18; //@line 1477
   sp = STACKTOP; //@line 1478
   return;
  }
  ___async_unwind = 0; //@line 1481
  HEAP32[$ReallocAsyncCtx4 >> 2] = 294; //@line 1482
  $71 = $ReallocAsyncCtx4 + 4 | 0; //@line 1483
  HEAP32[$71 >> 2] = $6; //@line 1484
  $72 = $ReallocAsyncCtx4 + 8 | 0; //@line 1485
  HEAP32[$72 >> 2] = $2; //@line 1486
  $73 = $ReallocAsyncCtx4 + 12 | 0; //@line 1487
  HEAP32[$73 >> 2] = $20; //@line 1488
  $74 = $ReallocAsyncCtx4 + 16 | 0; //@line 1489
  HEAP32[$74 >> 2] = $4; //@line 1490
  $75 = $ReallocAsyncCtx4 + 20 | 0; //@line 1491
  HEAP32[$75 >> 2] = $12; //@line 1492
  $76 = $ReallocAsyncCtx4 + 24 | 0; //@line 1493
  HEAP32[$76 >> 2] = $14; //@line 1494
  $77 = $ReallocAsyncCtx4 + 28 | 0; //@line 1495
  HEAP32[$77 >> 2] = $16; //@line 1496
  $78 = $ReallocAsyncCtx4 + 32 | 0; //@line 1497
  HEAP32[$78 >> 2] = $18; //@line 1498
  sp = STACKTOP; //@line 1499
  return;
 }
 if (!(HEAP32[$6 >> 2] & 1)) {
  $83 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 1507
  HEAP32[$20 >> 2] = $83 ? 5 : 2; //@line 1509
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  $89 = $4 + 2879 | 0; //@line 1516
  HEAP8[$89 >> 0] = 1; //@line 1517
  return;
 }
 _mbed_tracef(16, 12506, 12691, $12); //@line 1520
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 1521
 _mbed_tracef(16, 12506, 12715, $16); //@line 1522
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 1523
 __ZN12LoRaWANStack23mlme_indication_handlerEv($4); //@line 1524
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 295; //@line 1527
  $88 = $ReallocAsyncCtx2 + 4 | 0; //@line 1528
  HEAP32[$88 >> 2] = $4; //@line 1529
  sp = STACKTOP; //@line 1530
  return;
 }
 ___async_unwind = 0; //@line 1533
 HEAP32[$ReallocAsyncCtx2 >> 2] = 295; //@line 1534
 $88 = $ReallocAsyncCtx2 + 4 | 0; //@line 1535
 HEAP32[$88 >> 2] = $4; //@line 1536
 sp = STACKTOP; //@line 1537
 return;
}
function __ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$130$$$i = 0, $$026$$$026$i = 0, $$026$i = 0, $$028$i = 0, $$028$lcssa = 0, $$02864 = 0, $$029$be = 0, $$029$lcssa = 0, $$02963 = 0, $$1 = 0, $$2$i = 0, $$258 = 0, $$3 = 0, $$452 = 0, $$lcssa78 = 0, $$lcssa79 = 0, $$pre = 0, $$sroa$035$0$lcssa = 0, $$sroa$035$060 = 0, $$sroa$035$349 = 0, $$sroa$11$0$lcssa = 0, $$sroa$11$062 = 0, $$sroa$11$351 = 0, $$sroa$637$0$lcssa = 0, $$sroa$637$061 = 0, $$sroa$637$350 = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $11 = 0, $116 = 0, $12 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $131 = 0, $135 = 0, $136 = 0, $140 = 0, $17 = 0, $18 = 0, $19 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $42 = 0, $45 = 0, $52 = 0, $66 = 0, $7 = 0, $79 = 0, $81 = 0, $9 = 0, $93 = 0, $97 = 0, $99 = 0, $indvars$iv = 0, $indvars$iv$i = 0, $indvars$iv$i31 = 0, $indvars$iv82 = 0, $not$or$cond$i$i = 0, $wide$trip$count$i = 0, label = 0;
 $7 = HEAP8[$1 + 4 >> 0] | 0; //@line 20833
 L1 : do {
  if (!($7 << 24 >> 24)) {
   $$028$lcssa = 0; //@line 20837
   $$029$lcssa = 7; //@line 20837
   $$sroa$035$0$lcssa = 0; //@line 20837
   $$sroa$11$0$lcssa = 0; //@line 20837
   $$sroa$637$0$lcssa = 0; //@line 20837
   $101 = 0; //@line 20837
  } else {
   $9 = HEAP32[$1 >> 2] | 0; //@line 20839
   $10 = $0 + 20 | 0; //@line 20840
   $11 = $0 + 124 | 0; //@line 20841
   $$02864 = 0; //@line 20842
   $$02963 = 7; //@line 20842
   $$lcssa78 = 0; //@line 20842
   $$sroa$035$060 = 0; //@line 20842
   $$sroa$11$062 = 0; //@line 20842
   $$sroa$637$061 = 0; //@line 20842
   $13 = 0; //@line 20842
   while (1) {
    $12 = $9 + $13 | 0; //@line 20844
    if ((HEAP8[$12 >> 0] | 0) != 3) {
     $$028$lcssa = $$02864; //@line 20848
     $$029$lcssa = $$02963; //@line 20848
     $$sroa$035$0$lcssa = $$sroa$035$060; //@line 20848
     $$sroa$11$0$lcssa = $$sroa$11$062; //@line 20848
     $$sroa$637$0$lcssa = $$sroa$637$061; //@line 20848
     $101 = $$lcssa78; //@line 20848
     break L1;
    }
    $17 = HEAP8[$12 + 1 >> 0] | 0; //@line 20852
    $18 = $17 & 15; //@line 20853
    $19 = ($17 & 255) >>> 4; //@line 20854
    $27 = HEAPU8[$12 + 3 >> 0] << 8 | HEAPU8[$12 + 2 >> 0]; //@line 20862
    $28 = $27 & 65535; //@line 20863
    $30 = HEAP8[$12 + 4 >> 0] | 0; //@line 20865
    $32 = ($30 & 255) >>> 4; //@line 20867
    $34 = $32 & 7; //@line 20869
    $35 = $30 & 15; //@line 20870
    $36 = $13 + 5 | 0; //@line 20871
    $37 = $36 & 255; //@line 20872
    $$1 = $28 << 16 >> 16 == 0 & $34 << 24 >> 24 == 0 ? 6 : 7; //@line 20876
    L6 : do {
     switch ($32 & 7) {
     case 6:
     case 0:
      {
       $42 = HEAP8[$10 >> 0] | 0; //@line 20882
       if (!($42 << 24 >> 24)) {
        $$029$be = $$1; //@line 20885
        $$lcssa79 = $28; //@line 20885
       } else {
        $45 = $42 & 255; //@line 20888
        if ($34 << 24 >> 24 != 6) {
         $$258 = $$1; //@line 20890
         $indvars$iv = 0; //@line 20890
         while (1) {
          if (!($27 & 1 << ($indvars$iv & 15))) {
           $$3 = $$258; //@line 20897
          } else {
           $$3 = (HEAP32[(HEAP32[$11 >> 2] | 0) + ($indvars$iv * 12 | 0) >> 2] | 0) == 0 ? $$258 & -2 : $$258; //@line 20905
          }
          $indvars$iv = $indvars$iv + 1 | 0; //@line 20907
          if ($indvars$iv >>> 0 >= $45 >>> 0) {
           $$029$be = $$3; //@line 20912
           $$lcssa79 = $28; //@line 20912
           break L6;
          } else {
           $$258 = $$3; //@line 20910
          }
         }
        }
        $$pre = HEAP32[$11 >> 2] | 0; //@line 20917
        $52 = $28; //@line 20918
        $indvars$iv82 = 0; //@line 20918
        while (1) {
         if (!(HEAP32[$$pre + ($indvars$iv82 * 12 | 0) >> 2] | 0)) {
          $140 = $52; //@line 20924
         } else {
          $140 = (1 << ($indvars$iv82 & 15) | $52 & 65535) & 65535; //@line 20931
         }
         $indvars$iv82 = $indvars$iv82 + 1 | 0; //@line 20933
         if ($indvars$iv82 >>> 0 >= $45 >>> 0) {
          $$029$be = $$1; //@line 20938
          $$lcssa79 = $140; //@line 20938
          break;
         } else {
          $52 = $140; //@line 20936
         }
        }
       }
       break;
      }
     default:
      {
       $$029$be = 6; //@line 20946
       $$lcssa79 = $28; //@line 20946
      }
     }
    } while (0);
    if (($7 & 255) > ($37 & 255)) {
     $$02864 = $37; //@line 20953
     $$02963 = $$029$be; //@line 20953
     $$lcssa78 = $$lcssa79; //@line 20953
     $$sroa$035$060 = $35; //@line 20953
     $$sroa$11$062 = $18; //@line 20953
     $$sroa$637$061 = $19; //@line 20953
     $13 = $36 & 255; //@line 20953
    } else {
     $$028$lcssa = $37; //@line 20955
     $$029$lcssa = $$029$be; //@line 20955
     $$sroa$035$0$lcssa = $35; //@line 20955
     $$sroa$11$0$lcssa = $18; //@line 20955
     $$sroa$637$0$lcssa = $19; //@line 20955
     $101 = $$lcssa79; //@line 20955
     break L1;
    }
   }
  }
 } while (0);
 $66 = $$sroa$637$0$lcssa << 24 >> 24; //@line 20961
 if (($66 | 0) < (HEAPU8[$0 + 92 >> 0] | 0)) {
  if (HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $66 >> 0] | 0) {
   $79 = HEAP8[$1 + 7 >> 0] | 0; //@line 20976
   $81 = HEAP8[$1 + 8 >> 0] | 0; //@line 20978
   if (!(HEAP8[$1 + 6 >> 0] | 0)) {
    if ($$sroa$637$0$lcssa << 24 >> 24 == 15 & $$sroa$11$0$lcssa << 24 >> 24 == 15) {
     $$026$i = $81; //@line 20987
     $$028$i = $79; //@line 20987
    } else {
     $$452 = 0; //@line 20989
     $$sroa$035$349 = HEAP8[$1 + 9 >> 0] | 0; //@line 20989
     $$sroa$11$351 = $81; //@line 20989
     $$sroa$637$350 = $79; //@line 20989
     HEAP8[$2 >> 0] = $$sroa$637$350; //@line 20990
     HEAP8[$3 >> 0] = $$sroa$11$351; //@line 20991
     HEAP8[$4 >> 0] = $$sroa$035$349; //@line 20992
     HEAP8[$5 >> 0] = $$028$lcssa; //@line 20993
     return $$452 | 0; //@line 20994
    }
   } else {
    $$026$i = $$sroa$11$0$lcssa; //@line 20997
    $$028$i = $$sroa$637$0$lcssa; //@line 20997
   }
   if (!($$029$lcssa << 24 >> 24)) {
    $$452 = 0; //@line 21001
    $$sroa$035$349 = $$sroa$035$0$lcssa; //@line 21001
    $$sroa$11$351 = $$026$i; //@line 21001
    $$sroa$637$350 = $$028$i; //@line 21001
    HEAP8[$2 >> 0] = $$sroa$637$350; //@line 21002
    HEAP8[$3 >> 0] = $$sroa$11$351; //@line 21003
    HEAP8[$4 >> 0] = $$sroa$035$349; //@line 21004
    HEAP8[$5 >> 0] = $$028$lcssa; //@line 21005
    return $$452 | 0; //@line 21006
   }
   $93 = HEAP32[$0 + 124 >> 2] | 0; //@line 21013
   L33 : do {
    if ($$028$i << 24 >> 24 >= (HEAP8[$0 + 26 >> 0] | 0) ? $$028$i << 24 >> 24 <= (HEAP8[$0 + 27 >> 0] | 0) : 0) {
     $97 = HEAP8[$0 + 20 >> 0] | 0; //@line 21020
     if (!($97 << 24 >> 24)) {
      label = 26; //@line 21023
     } else {
      $99 = $97 & 255; //@line 21025
      $100 = $101 & 65535; //@line 21026
      $indvars$iv$i31 = 0; //@line 21027
      while (1) {
       if (1 << ($indvars$iv$i31 & 15) & $100 | 0) {
        $107 = HEAP8[$93 + ($indvars$iv$i31 * 12 | 0) + 8 >> 0] | 0; //@line 21035
        if (($107 & 15) <= $$028$i << 24 >> 24 ? ($107 & 255) >>> 4 << 24 >> 24 >= $$028$i << 24 >> 24 : 0) {
         $125 = $$029$lcssa; //@line 21042
         break L33;
        }
       }
       $indvars$iv$i31 = $indvars$iv$i31 + 1 | 0; //@line 21046
       if ($indvars$iv$i31 >>> 0 >= $99 >>> 0) {
        label = 26; //@line 21051
        break;
       }
      }
     }
    } else {
     label = 26; //@line 21057
    }
   } while (0);
   if ((label | 0) == 26) {
    $125 = $$029$lcssa & -3; //@line 21062
   }
   $116 = HEAP8[$0 + 22 >> 0] | 0; //@line 21065
   $not$or$cond$i$i = $$026$i << 24 >> 24 >= $116 << 24 >> 24 ? $$026$i << 24 >> 24 <= (HEAP8[$0 + 21 >> 0] | 0) : 0; //@line 21070
   $123 = ($116 & 255 | 0) > ($$026$i << 24 >> 24 | 0); //@line 21073
   $$$130$$$i = $123 | $not$or$cond$i$i ? $125 : $125 & -5; //@line 21077
   $$026$$$026$i = $not$or$cond$i$i ? $$026$i : $123 ? $116 : $$026$i; //@line 21078
   $127 = $$$130$$$i << 24 >> 24 == 7; //@line 21079
   $$2$i = $$sroa$035$0$lcssa << 24 >> 24 == 0 & $127 ? 1 : $$sroa$035$0$lcssa; //@line 21082
   if (!$127) {
    $$452 = $$$130$$$i; //@line 21084
    $$sroa$035$349 = $$2$i; //@line 21084
    $$sroa$11$351 = $$026$$$026$i; //@line 21084
    $$sroa$637$350 = $$028$i; //@line 21084
    HEAP8[$2 >> 0] = $$sroa$637$350; //@line 21085
    HEAP8[$3 >> 0] = $$sroa$11$351; //@line 21086
    HEAP8[$4 >> 0] = $$sroa$035$349; //@line 21087
    HEAP8[$5 >> 0] = $$028$lcssa; //@line 21088
    return $$452 | 0; //@line 21089
   }
   $129 = $0 + 116 | 0; //@line 21091
   $131 = $0 + 113 | 0; //@line 21093
   _memset(HEAP32[$129 >> 2] | 0, 0, HEAPU8[$131 >> 0] << 1 | 0) | 0; //@line 21097
   $135 = HEAP32[$129 >> 2] | 0; //@line 21098
   $136 = HEAP8[$131 >> 0] | 0; //@line 21099
   if (!(($135 | 0) != 0 & $136 << 24 >> 24 != 0)) {
    $$452 = 7; //@line 21104
    $$sroa$035$349 = $$2$i; //@line 21104
    $$sroa$11$351 = $$026$$$026$i; //@line 21104
    $$sroa$637$350 = $$028$i; //@line 21104
    HEAP8[$2 >> 0] = $$sroa$637$350; //@line 21105
    HEAP8[$3 >> 0] = $$sroa$11$351; //@line 21106
    HEAP8[$4 >> 0] = $$sroa$035$349; //@line 21107
    HEAP8[$5 >> 0] = $$028$lcssa; //@line 21108
    return $$452 | 0; //@line 21109
   }
   $wide$trip$count$i = $136 & 255; //@line 21111
   $indvars$iv$i = 0; //@line 21112
   do {
    HEAP16[$135 + ($indvars$iv$i << 1) >> 1] = $101; //@line 21115
    $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 21116
   } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
   $$452 = 7; //@line 21119
   $$sroa$035$349 = $$2$i; //@line 21119
   $$sroa$11$351 = $$026$$$026$i; //@line 21119
   $$sroa$637$350 = $$028$i; //@line 21119
   HEAP8[$2 >> 0] = $$sroa$637$350; //@line 21125
   HEAP8[$3 >> 0] = $$sroa$11$351; //@line 21126
   HEAP8[$4 >> 0] = $$sroa$035$349; //@line 21127
   HEAP8[$5 >> 0] = $$028$lcssa; //@line 21128
   return $$452 | 0; //@line 21129
  }
 }
 $$452 = $$029$lcssa & -3; //@line 21133
 $$sroa$035$349 = $$sroa$035$0$lcssa; //@line 21133
 $$sroa$11$351 = $$sroa$11$0$lcssa; //@line 21133
 $$sroa$637$350 = $$sroa$637$0$lcssa; //@line 21133
 HEAP8[$2 >> 0] = $$sroa$637$350; //@line 21134
 HEAP8[$3 >> 0] = $$sroa$11$351; //@line 21135
 HEAP8[$4 >> 0] = $$sroa$035$349; //@line 21136
 HEAP8[$5 >> 0] = $$028$lcssa; //@line 21137
 return $$452 | 0; //@line 21138
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 32537
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 32538
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 32539
 $d_sroa_0_0_extract_trunc = $b$0; //@line 32540
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 32541
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 32542
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 32544
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 32547
    HEAP32[$rem + 4 >> 2] = 0; //@line 32548
   }
   $_0$1 = 0; //@line 32550
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 32551
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32552
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 32555
    $_0$0 = 0; //@line 32556
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32557
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 32559
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 32560
   $_0$1 = 0; //@line 32561
   $_0$0 = 0; //@line 32562
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32563
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 32566
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 32571
     HEAP32[$rem + 4 >> 2] = 0; //@line 32572
    }
    $_0$1 = 0; //@line 32574
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 32575
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32576
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 32580
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 32581
    }
    $_0$1 = 0; //@line 32583
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 32584
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32585
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 32587
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 32590
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 32591
    }
    $_0$1 = 0; //@line 32593
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 32594
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32595
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 32598
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 32600
    $58 = 31 - $51 | 0; //@line 32601
    $sr_1_ph = $57; //@line 32602
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 32603
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 32604
    $q_sroa_0_1_ph = 0; //@line 32605
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 32606
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 32610
    $_0$0 = 0; //@line 32611
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32612
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 32614
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 32615
   $_0$1 = 0; //@line 32616
   $_0$0 = 0; //@line 32617
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32618
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 32622
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 32624
     $126 = 31 - $119 | 0; //@line 32625
     $130 = $119 - 31 >> 31; //@line 32626
     $sr_1_ph = $125; //@line 32627
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 32628
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 32629
     $q_sroa_0_1_ph = 0; //@line 32630
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 32631
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 32635
     $_0$0 = 0; //@line 32636
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32637
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 32639
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 32640
    $_0$1 = 0; //@line 32641
    $_0$0 = 0; //@line 32642
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32643
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 32645
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 32648
    $89 = 64 - $88 | 0; //@line 32649
    $91 = 32 - $88 | 0; //@line 32650
    $92 = $91 >> 31; //@line 32651
    $95 = $88 - 32 | 0; //@line 32652
    $105 = $95 >> 31; //@line 32653
    $sr_1_ph = $88; //@line 32654
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 32655
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 32656
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 32657
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 32658
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 32662
    HEAP32[$rem + 4 >> 2] = 0; //@line 32663
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 32666
    $_0$0 = $a$0 | 0 | 0; //@line 32667
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32668
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 32670
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 32671
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 32672
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32673
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 32678
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 32679
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 32680
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 32681
  $carry_0_lcssa$1 = 0; //@line 32682
  $carry_0_lcssa$0 = 0; //@line 32683
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 32685
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 32686
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 32687
  $137$1 = tempRet0; //@line 32688
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 32689
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 32690
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 32691
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 32692
  $sr_1202 = $sr_1_ph; //@line 32693
  $carry_0203 = 0; //@line 32694
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 32696
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 32697
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 32698
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 32699
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 32700
   $150$1 = tempRet0; //@line 32701
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 32702
   $carry_0203 = $151$0 & 1; //@line 32703
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 32705
   $r_sroa_1_1200 = tempRet0; //@line 32706
   $sr_1202 = $sr_1202 - 1 | 0; //@line 32707
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 32719
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 32720
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 32721
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 32722
  $carry_0_lcssa$1 = 0; //@line 32723
  $carry_0_lcssa$0 = $carry_0203; //@line 32724
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 32726
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 32727
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 32730
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 32731
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 32733
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 32734
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32735
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17428
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 17434
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 17443
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 17448
      $19 = $1 + 44 | 0; //@line 17449
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 17458
      $26 = $1 + 52 | 0; //@line 17459
      $27 = $1 + 53 | 0; //@line 17460
      $28 = $1 + 54 | 0; //@line 17461
      $29 = $0 + 8 | 0; //@line 17462
      $30 = $1 + 24 | 0; //@line 17463
      $$081$off0 = 0; //@line 17464
      $$084 = $0 + 16 | 0; //@line 17464
      $$085$off0 = 0; //@line 17464
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 17468
        label = 20; //@line 17469
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 17472
       HEAP8[$27 >> 0] = 0; //@line 17473
       $AsyncCtx15 = _emscripten_alloc_async_context(56, sp) | 0; //@line 17474
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 17475
       if (___async) {
        label = 12; //@line 17478
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 17481
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 17485
        label = 20; //@line 17486
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 17493
         $$186$off0 = $$085$off0; //@line 17493
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 17502
           label = 20; //@line 17503
           break L10;
          } else {
           $$182$off0 = 1; //@line 17506
           $$186$off0 = $$085$off0; //@line 17506
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 17513
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 17520
          break L10;
         } else {
          $$182$off0 = 1; //@line 17523
          $$186$off0 = 1; //@line 17523
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 17528
       $$084 = $$084 + 8 | 0; //@line 17528
       $$085$off0 = $$186$off0; //@line 17528
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 715; //@line 17531
       HEAP32[$AsyncCtx15 + 4 >> 2] = $19; //@line 17533
       HEAP32[$AsyncCtx15 + 8 >> 2] = $2; //@line 17535
       HEAP32[$AsyncCtx15 + 12 >> 2] = $13; //@line 17537
       HEAP32[$AsyncCtx15 + 16 >> 2] = $1; //@line 17539
       HEAP32[$AsyncCtx15 + 20 >> 2] = $28; //@line 17541
       HEAP32[$AsyncCtx15 + 24 >> 2] = $30; //@line 17543
       HEAP32[$AsyncCtx15 + 28 >> 2] = $29; //@line 17545
       HEAP8[$AsyncCtx15 + 32 >> 0] = $$085$off0 & 1; //@line 17548
       HEAP8[$AsyncCtx15 + 33 >> 0] = $$081$off0 & 1; //@line 17551
       HEAP32[$AsyncCtx15 + 36 >> 2] = $$084; //@line 17553
       HEAP32[$AsyncCtx15 + 40 >> 2] = $26; //@line 17555
       HEAP32[$AsyncCtx15 + 44 >> 2] = $27; //@line 17557
       HEAP8[$AsyncCtx15 + 48 >> 0] = $4 & 1; //@line 17560
       HEAP32[$AsyncCtx15 + 52 >> 2] = $25; //@line 17562
       sp = STACKTOP; //@line 17563
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 17569
         $61 = $1 + 40 | 0; //@line 17570
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 17573
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 17581
           if ($$283$off0) {
            label = 25; //@line 17583
            break;
           } else {
            $69 = 4; //@line 17586
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 17593
        } else {
         $69 = 4; //@line 17595
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 17600
      }
      HEAP32[$19 >> 2] = $69; //@line 17602
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 17611
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 17616
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 17617
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17618
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 17619
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 716; //@line 17622
    HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 17624
    HEAP32[$AsyncCtx11 + 8 >> 2] = $2; //@line 17626
    HEAP32[$AsyncCtx11 + 12 >> 2] = $3; //@line 17628
    HEAP8[$AsyncCtx11 + 16 >> 0] = $4 & 1; //@line 17631
    HEAP32[$AsyncCtx11 + 20 >> 2] = $0; //@line 17633
    HEAP32[$AsyncCtx11 + 24 >> 2] = $72; //@line 17635
    HEAP32[$AsyncCtx11 + 28 >> 2] = $73; //@line 17637
    sp = STACKTOP; //@line 17638
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 17641
   $81 = $0 + 24 | 0; //@line 17642
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 17646
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 17650
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 17657
       $$2 = $81; //@line 17658
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 17670
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 17671
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 17676
        $136 = $$2 + 8 | 0; //@line 17677
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 17680
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 719; //@line 17685
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 17687
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 17689
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 17691
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 17693
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 17695
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 17697
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 17699
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 17702
       sp = STACKTOP; //@line 17703
       return;
      }
      $104 = $1 + 24 | 0; //@line 17706
      $105 = $1 + 54 | 0; //@line 17707
      $$1 = $81; //@line 17708
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 17724
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 17725
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17730
       $122 = $$1 + 8 | 0; //@line 17731
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 17734
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 718; //@line 17739
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 17741
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 17743
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 17745
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 17747
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 17749
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 17751
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 17753
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 17755
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 17758
      sp = STACKTOP; //@line 17759
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 17763
    $$0 = $81; //@line 17764
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17771
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 17772
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 17777
     $100 = $$0 + 8 | 0; //@line 17778
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 17781
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 717; //@line 17786
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 17788
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 17790
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 17792
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 17794
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 17796
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 17798
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 17801
    sp = STACKTOP; //@line 17802
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 13247
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13249
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13251
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13253
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13255
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13257
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13259
 $$pre = HEAP32[$8 >> 2] | 0; //@line 13260
 if ($$pre | 0) {
  $15 = HEAP32[$$pre + 4 >> 2] | 0; //@line 13264
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 13265
  FUNCTION_TABLE_vii[$15 & 15]($10, $4); //@line 13266
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 348; //@line 13269
   $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 13270
   HEAP32[$16 >> 2] = $2; //@line 13271
   $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 13272
   HEAP32[$17 >> 2] = $4; //@line 13273
   $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 13274
   HEAP32[$18 >> 2] = $6; //@line 13275
   $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 13276
   HEAP32[$19 >> 2] = $12; //@line 13277
   $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 13278
   HEAP32[$20 >> 2] = $8; //@line 13279
   sp = STACKTOP; //@line 13280
   return;
  }
  ___async_unwind = 0; //@line 13283
  HEAP32[$ReallocAsyncCtx2 >> 2] = 348; //@line 13284
  $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 13285
  HEAP32[$16 >> 2] = $2; //@line 13286
  $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 13287
  HEAP32[$17 >> 2] = $4; //@line 13288
  $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 13289
  HEAP32[$18 >> 2] = $6; //@line 13290
  $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 13291
  HEAP32[$19 >> 2] = $12; //@line 13292
  $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 13293
  HEAP32[$20 >> 2] = $8; //@line 13294
  sp = STACKTOP; //@line 13295
  return;
 }
 HEAP32[$12 >> 2] = 0; //@line 13298
 $21 = $4 + 16 | 0; //@line 13299
 $22 = $4 + 28 | 0; //@line 13300
 $23 = HEAP32[$22 >> 2] | 0; //@line 13301
 if ($23 | 0) {
  $25 = $2 + 2500 | 0; //@line 13304
  if (($25 | 0) != ($21 | 0)) {
   $27 = $2 + 2512 | 0; //@line 13307
   $28 = HEAP32[$27 >> 2] | 0; //@line 13308
   if (!$28) {
    $40 = HEAP32[$23 + 4 >> 2] | 0; //@line 13312
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 13313
    FUNCTION_TABLE_vii[$40 & 15]($25, $21); //@line 13314
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 350; //@line 13317
     $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 13318
     HEAP32[$41 >> 2] = $2; //@line 13319
     $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 13320
     HEAP32[$42 >> 2] = $27; //@line 13321
     $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 13322
     HEAP32[$43 >> 2] = $4; //@line 13323
     $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 13324
     HEAP32[$44 >> 2] = $6; //@line 13325
     $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 13326
     HEAP32[$45 >> 2] = $22; //@line 13327
     sp = STACKTOP; //@line 13328
     return;
    }
    ___async_unwind = 0; //@line 13331
    HEAP32[$ReallocAsyncCtx4 >> 2] = 350; //@line 13332
    $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 13333
    HEAP32[$41 >> 2] = $2; //@line 13334
    $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 13335
    HEAP32[$42 >> 2] = $27; //@line 13336
    $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 13337
    HEAP32[$43 >> 2] = $4; //@line 13338
    $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 13339
    HEAP32[$44 >> 2] = $6; //@line 13340
    $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 13341
    HEAP32[$45 >> 2] = $22; //@line 13342
    sp = STACKTOP; //@line 13343
    return;
   } else {
    $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 13347
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 13348
    FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 13349
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 349; //@line 13352
     $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 13353
     HEAP32[$32 >> 2] = $2; //@line 13354
     $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 13355
     HEAP32[$33 >> 2] = $27; //@line 13356
     $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 13357
     HEAP32[$34 >> 2] = $4; //@line 13358
     $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 13359
     HEAP32[$35 >> 2] = $6; //@line 13360
     $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 13361
     HEAP32[$36 >> 2] = $22; //@line 13362
     $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 13363
     HEAP32[$37 >> 2] = $25; //@line 13364
     $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 13365
     HEAP32[$38 >> 2] = $21; //@line 13366
     sp = STACKTOP; //@line 13367
     return;
    }
    ___async_unwind = 0; //@line 13370
    HEAP32[$ReallocAsyncCtx3 >> 2] = 349; //@line 13371
    $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 13372
    HEAP32[$32 >> 2] = $2; //@line 13373
    $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 13374
    HEAP32[$33 >> 2] = $27; //@line 13375
    $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 13376
    HEAP32[$34 >> 2] = $4; //@line 13377
    $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 13378
    HEAP32[$35 >> 2] = $6; //@line 13379
    $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 13380
    HEAP32[$36 >> 2] = $22; //@line 13381
    $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 13382
    HEAP32[$37 >> 2] = $25; //@line 13383
    $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 13384
    HEAP32[$38 >> 2] = $21; //@line 13385
    sp = STACKTOP; //@line 13386
    return;
   }
  }
 }
 $46 = $4 + 32 | 0; //@line 13391
 $47 = $4 + 44 | 0; //@line 13392
 $48 = HEAP32[$47 >> 2] | 0; //@line 13393
 if (!$48) {
  HEAP32[___async_retval >> 2] = 0; //@line 13397
  return;
 }
 $50 = $2 + 2516 | 0; //@line 13400
 if (($50 | 0) == ($46 | 0)) {
  $71 = HEAP32[$48 + 4 >> 2] | 0; //@line 13404
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 13405
  FUNCTION_TABLE_vii[$71 & 15]($6, $46); //@line 13406
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 353; //@line 13409
   $72 = $ReallocAsyncCtx7 + 4 | 0; //@line 13410
   HEAP32[$72 >> 2] = $47; //@line 13411
   $73 = $ReallocAsyncCtx7 + 8 | 0; //@line 13412
   HEAP32[$73 >> 2] = $2; //@line 13413
   $74 = $ReallocAsyncCtx7 + 12 | 0; //@line 13414
   HEAP32[$74 >> 2] = $6; //@line 13415
   sp = STACKTOP; //@line 13416
   return;
  }
  ___async_unwind = 0; //@line 13419
  HEAP32[$ReallocAsyncCtx7 >> 2] = 353; //@line 13420
  $72 = $ReallocAsyncCtx7 + 4 | 0; //@line 13421
  HEAP32[$72 >> 2] = $47; //@line 13422
  $73 = $ReallocAsyncCtx7 + 8 | 0; //@line 13423
  HEAP32[$73 >> 2] = $2; //@line 13424
  $74 = $ReallocAsyncCtx7 + 12 | 0; //@line 13425
  HEAP32[$74 >> 2] = $6; //@line 13426
  sp = STACKTOP; //@line 13427
  return;
 }
 $52 = $2 + 2528 | 0; //@line 13430
 $53 = HEAP32[$52 >> 2] | 0; //@line 13431
 if (!$53) {
  $64 = HEAP32[$48 + 4 >> 2] | 0; //@line 13435
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 13436
  FUNCTION_TABLE_vii[$64 & 15]($50, $46); //@line 13437
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 352; //@line 13440
   $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 13441
   HEAP32[$65 >> 2] = $47; //@line 13442
   $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 13443
   HEAP32[$66 >> 2] = $52; //@line 13444
   $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 13445
   HEAP32[$67 >> 2] = $2; //@line 13446
   $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 13447
   HEAP32[$68 >> 2] = $6; //@line 13448
   $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 13449
   HEAP32[$69 >> 2] = $46; //@line 13450
   sp = STACKTOP; //@line 13451
   return;
  }
  ___async_unwind = 0; //@line 13454
  HEAP32[$ReallocAsyncCtx6 >> 2] = 352; //@line 13455
  $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 13456
  HEAP32[$65 >> 2] = $47; //@line 13457
  $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 13458
  HEAP32[$66 >> 2] = $52; //@line 13459
  $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 13460
  HEAP32[$67 >> 2] = $2; //@line 13461
  $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 13462
  HEAP32[$68 >> 2] = $6; //@line 13463
  $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 13464
  HEAP32[$69 >> 2] = $46; //@line 13465
  sp = STACKTOP; //@line 13466
  return;
 } else {
  $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 13470
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 13471
  FUNCTION_TABLE_vi[$56 & 1023]($50); //@line 13472
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 351; //@line 13475
   $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 13476
   HEAP32[$57 >> 2] = $47; //@line 13477
   $58 = $ReallocAsyncCtx5 + 8 | 0; //@line 13478
   HEAP32[$58 >> 2] = $52; //@line 13479
   $59 = $ReallocAsyncCtx5 + 12 | 0; //@line 13480
   HEAP32[$59 >> 2] = $2; //@line 13481
   $60 = $ReallocAsyncCtx5 + 16 | 0; //@line 13482
   HEAP32[$60 >> 2] = $50; //@line 13483
   $61 = $ReallocAsyncCtx5 + 20 | 0; //@line 13484
   HEAP32[$61 >> 2] = $46; //@line 13485
   $62 = $ReallocAsyncCtx5 + 24 | 0; //@line 13486
   HEAP32[$62 >> 2] = $6; //@line 13487
   sp = STACKTOP; //@line 13488
   return;
  }
  ___async_unwind = 0; //@line 13491
  HEAP32[$ReallocAsyncCtx5 >> 2] = 351; //@line 13492
  $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 13493
  HEAP32[$57 >> 2] = $47; //@line 13494
  $58 = $ReallocAsyncCtx5 + 8 | 0; //@line 13495
  HEAP32[$58 >> 2] = $52; //@line 13496
  $59 = $ReallocAsyncCtx5 + 12 | 0; //@line 13497
  HEAP32[$59 >> 2] = $2; //@line 13498
  $60 = $ReallocAsyncCtx5 + 16 | 0; //@line 13499
  HEAP32[$60 >> 2] = $50; //@line 13500
  $61 = $ReallocAsyncCtx5 + 20 | 0; //@line 13501
  HEAP32[$61 >> 2] = $46; //@line 13502
  $62 = $ReallocAsyncCtx5 + 24 | 0; //@line 13503
  HEAP32[$62 >> 2] = $6; //@line 13504
  sp = STACKTOP; //@line 13505
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$pr = 0, $$pre = 0, $$pre16 = 0, $$pre17 = 0, $10 = 0, $101 = 0, $13 = 0, $2 = 0, $22 = 0, $23 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $5 = 0, $50 = 0, $51 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $62 = 0, $64 = 0, $65 = 0, $68 = 0, $7 = 0, $77 = 0, $78 = 0, $84 = 0, $87 = 0, $88 = 0, $9 = 0, $91 = 0, $93 = 0, $94 = 0, $95 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10662
 STACKTOP = STACKTOP + 16 | 0; //@line 10663
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10663
 $2 = sp; //@line 10664
 if (!$1) {
  $$0 = -1003; //@line 10667
  STACKTOP = sp; //@line 10668
  return $$0 | 0; //@line 10668
 }
 $4 = $1 + 12 | 0; //@line 10670
 $5 = HEAP32[$4 >> 2] | 0; //@line 10671
 if (!$5) {
  $$0 = -1003; //@line 10674
  STACKTOP = sp; //@line 10675
  return $$0 | 0; //@line 10675
 }
 $7 = $0 + 2484 | 0; //@line 10677
 if (($7 | 0) != ($1 | 0)) {
  $9 = $0 + 2496 | 0; //@line 10680
  $10 = HEAP32[$9 >> 2] | 0; //@line 10681
  do {
   if (!$10) {
    $22 = $5; //@line 10685
    label = 8; //@line 10686
   } else {
    $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 10689
    $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 10690
    FUNCTION_TABLE_vi[$13 & 1023]($7); //@line 10691
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 347; //@line 10694
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10696
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 10698
     HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 10700
     HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 10702
     HEAP32[$AsyncCtx + 20 >> 2] = $7; //@line 10704
     HEAP32[$AsyncCtx + 24 >> 2] = $9; //@line 10706
     sp = STACKTOP; //@line 10707
     STACKTOP = sp; //@line 10708
     return 0; //@line 10708
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 10710
     $$pre = HEAP32[$4 >> 2] | 0; //@line 10711
     if (!$$pre) {
      $29 = 0; //@line 10714
      break;
     } else {
      $22 = $$pre; //@line 10717
      label = 8; //@line 10718
      break;
     }
    }
   }
  } while (0);
  do {
   if ((label | 0) == 8) {
    $23 = HEAP32[$22 + 4 >> 2] | 0; //@line 10727
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10728
    FUNCTION_TABLE_vii[$23 & 15]($7, $1); //@line 10729
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 348; //@line 10732
     HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 10734
     HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 10736
     HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 10738
     HEAP32[$AsyncCtx2 + 16 >> 2] = $9; //@line 10740
     HEAP32[$AsyncCtx2 + 20 >> 2] = $4; //@line 10742
     sp = STACKTOP; //@line 10743
     STACKTOP = sp; //@line 10744
     return 0; //@line 10744
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10746
     $29 = HEAP32[$4 >> 2] | 0; //@line 10748
     break;
    }
   }
  } while (0);
  HEAP32[$9 >> 2] = $29; //@line 10753
 }
 $30 = $1 + 16 | 0; //@line 10755
 $31 = $1 + 28 | 0; //@line 10756
 $32 = HEAP32[$31 >> 2] | 0; //@line 10757
 if ($32 | 0) {
  $34 = $0 + 2500 | 0; //@line 10760
  if (($34 | 0) != ($30 | 0)) {
   $36 = $0 + 2512 | 0; //@line 10763
   $37 = HEAP32[$36 >> 2] | 0; //@line 10764
   do {
    if (!$37) {
     $50 = $32; //@line 10768
     label = 18; //@line 10769
    } else {
     $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 10772
     $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 10773
     FUNCTION_TABLE_vi[$40 & 1023]($34); //@line 10774
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 349; //@line 10777
      HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 10779
      HEAP32[$AsyncCtx5 + 8 >> 2] = $36; //@line 10781
      HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 10783
      HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 10785
      HEAP32[$AsyncCtx5 + 20 >> 2] = $31; //@line 10787
      HEAP32[$AsyncCtx5 + 24 >> 2] = $34; //@line 10789
      HEAP32[$AsyncCtx5 + 28 >> 2] = $30; //@line 10791
      sp = STACKTOP; //@line 10792
      STACKTOP = sp; //@line 10793
      return 0; //@line 10793
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10795
      $$pre16 = HEAP32[$31 >> 2] | 0; //@line 10796
      if (!$$pre16) {
       $57 = 0; //@line 10799
       break;
      } else {
       $50 = $$pre16; //@line 10802
       label = 18; //@line 10803
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 18) {
     $51 = HEAP32[$50 + 4 >> 2] | 0; //@line 10812
     $AsyncCtx8 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10813
     FUNCTION_TABLE_vii[$51 & 15]($34, $30); //@line 10814
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 350; //@line 10817
      HEAP32[$AsyncCtx8 + 4 >> 2] = $0; //@line 10819
      HEAP32[$AsyncCtx8 + 8 >> 2] = $36; //@line 10821
      HEAP32[$AsyncCtx8 + 12 >> 2] = $1; //@line 10823
      HEAP32[$AsyncCtx8 + 16 >> 2] = $2; //@line 10825
      HEAP32[$AsyncCtx8 + 20 >> 2] = $31; //@line 10827
      sp = STACKTOP; //@line 10828
      STACKTOP = sp; //@line 10829
      return 0; //@line 10829
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 10831
      $57 = HEAP32[$31 >> 2] | 0; //@line 10833
      break;
     }
    }
   } while (0);
   HEAP32[$36 >> 2] = $57; //@line 10838
  }
 }
 $58 = $1 + 32 | 0; //@line 10841
 $59 = $1 + 44 | 0; //@line 10842
 $60 = HEAP32[$59 >> 2] | 0; //@line 10843
 if (!$60) {
  $$0 = 0; //@line 10846
  STACKTOP = sp; //@line 10847
  return $$0 | 0; //@line 10847
 }
 $62 = $0 + 2516 | 0; //@line 10849
 if (($62 | 0) == ($58 | 0)) {
  $87 = $60; //@line 10852
  $91 = $0; //@line 10852
  label = 33; //@line 10853
 } else {
  $64 = $0 + 2528 | 0; //@line 10855
  $65 = HEAP32[$64 >> 2] | 0; //@line 10856
  do {
   if (!$65) {
    $77 = $60; //@line 10860
    label = 29; //@line 10861
   } else {
    $68 = HEAP32[$65 + 8 >> 2] | 0; //@line 10864
    $AsyncCtx11 = _emscripten_alloc_async_context(28, sp) | 0; //@line 10865
    FUNCTION_TABLE_vi[$68 & 1023]($62); //@line 10866
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 351; //@line 10869
     HEAP32[$AsyncCtx11 + 4 >> 2] = $59; //@line 10871
     HEAP32[$AsyncCtx11 + 8 >> 2] = $64; //@line 10873
     HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 10875
     HEAP32[$AsyncCtx11 + 16 >> 2] = $62; //@line 10877
     HEAP32[$AsyncCtx11 + 20 >> 2] = $58; //@line 10879
     HEAP32[$AsyncCtx11 + 24 >> 2] = $2; //@line 10881
     sp = STACKTOP; //@line 10882
     STACKTOP = sp; //@line 10883
     return 0; //@line 10883
    } else {
     _emscripten_free_async_context($AsyncCtx11 | 0); //@line 10885
     $$pre17 = HEAP32[$59 >> 2] | 0; //@line 10886
     if (!$$pre17) {
      $84 = 0; //@line 10889
      break;
     } else {
      $77 = $$pre17; //@line 10892
      label = 29; //@line 10893
      break;
     }
    }
   }
  } while (0);
  do {
   if ((label | 0) == 29) {
    $78 = HEAP32[$77 + 4 >> 2] | 0; //@line 10902
    $AsyncCtx14 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10903
    FUNCTION_TABLE_vii[$78 & 15]($62, $58); //@line 10904
    if (___async) {
     HEAP32[$AsyncCtx14 >> 2] = 352; //@line 10907
     HEAP32[$AsyncCtx14 + 4 >> 2] = $59; //@line 10909
     HEAP32[$AsyncCtx14 + 8 >> 2] = $64; //@line 10911
     HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 10913
     HEAP32[$AsyncCtx14 + 16 >> 2] = $2; //@line 10915
     HEAP32[$AsyncCtx14 + 20 >> 2] = $58; //@line 10917
     sp = STACKTOP; //@line 10918
     STACKTOP = sp; //@line 10919
     return 0; //@line 10919
    } else {
     _emscripten_free_async_context($AsyncCtx14 | 0); //@line 10921
     $84 = HEAP32[$59 >> 2] | 0; //@line 10923
     break;
    }
   }
  } while (0);
  HEAP32[$64 >> 2] = $84; //@line 10928
  $$pr = HEAP32[$59 >> 2] | 0; //@line 10929
  if (!$$pr) {
   $94 = 0; //@line 10932
   $95 = $0; //@line 10932
  } else {
   $87 = $$pr; //@line 10934
   $91 = $0; //@line 10934
   label = 33; //@line 10935
  }
 }
 do {
  if ((label | 0) == 33) {
   $88 = HEAP32[$87 + 4 >> 2] | 0; //@line 10941
   $AsyncCtx17 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10942
   FUNCTION_TABLE_vii[$88 & 15]($2, $58); //@line 10943
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 353; //@line 10946
    HEAP32[$AsyncCtx17 + 4 >> 2] = $59; //@line 10948
    HEAP32[$AsyncCtx17 + 8 >> 2] = $91; //@line 10950
    HEAP32[$AsyncCtx17 + 12 >> 2] = $2; //@line 10952
    sp = STACKTOP; //@line 10953
    STACKTOP = sp; //@line 10954
    return 0; //@line 10954
   } else {
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 10956
    $94 = HEAP32[$59 >> 2] | 0; //@line 10958
    $95 = $91; //@line 10958
    break;
   }
  }
 } while (0);
 $93 = $2 + 12 | 0; //@line 10963
 HEAP32[$93 >> 2] = $94; //@line 10964
 $AsyncCtx24 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10965
 __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($95, $2); //@line 10966
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 354; //@line 10969
  HEAP32[$AsyncCtx24 + 4 >> 2] = $93; //@line 10971
  HEAP32[$AsyncCtx24 + 8 >> 2] = $2; //@line 10973
  sp = STACKTOP; //@line 10974
  STACKTOP = sp; //@line 10975
  return 0; //@line 10975
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 10977
 $98 = HEAP32[$93 >> 2] | 0; //@line 10978
 if (!$98) {
  $$0 = 0; //@line 10981
  STACKTOP = sp; //@line 10982
  return $$0 | 0; //@line 10982
 }
 $101 = HEAP32[$98 + 8 >> 2] | 0; //@line 10985
 $AsyncCtx21 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10986
 FUNCTION_TABLE_vi[$101 & 1023]($2); //@line 10987
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 355; //@line 10990
  sp = STACKTOP; //@line 10991
  STACKTOP = sp; //@line 10992
  return 0; //@line 10992
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 10994
 $$0 = 0; //@line 10995
 STACKTOP = sp; //@line 10996
 return $$0 | 0; //@line 10996
}
function __ZN16SX1276_LoRaRadio7receiveEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $100 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $3 = 0, $30 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, $54 = 0, $6 = 0, $61 = 0, $74 = 0, $77 = 0, $82 = 0, $96 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $AsyncCtx36 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 431
 STACKTOP = STACKTOP + 96 | 0; //@line 432
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 432
 $vararg_buffer17 = sp + 48 | 0; //@line 433
 $vararg_buffer14 = sp + 40 | 0; //@line 434
 $vararg_buffer11 = sp + 32 | 0; //@line 435
 $vararg_buffer8 = sp + 24 | 0; //@line 436
 $vararg_buffer5 = sp + 16 | 0; //@line 437
 $vararg_buffer2 = sp + 8 | 0; //@line 438
 $vararg_buffer = sp; //@line 439
 $2 = sp + 72 | 0; //@line 440
 $3 = sp + 56 | 0; //@line 441
 $4 = $0 + 783 | 0; //@line 442
 $6 = HEAPU8[$4 >> 0] | 0; //@line 444
 HEAP32[$vararg_buffer >> 2] = $1; //@line 445
 HEAP32[$vararg_buffer + 4 >> 2] = $6; //@line 447
 _mbed_tracef(16, 11020, 11336, $vararg_buffer); //@line 448
 _emscripten_asm_const_i(2) | 0; //@line 449
 HEAP8[$0 + 688 >> 0] = 1; //@line 451
 if (HEAP8[$4 >> 0] | 0) {
  $11 = _emscripten_asm_const_i(3) | 0; //@line 455
  $14 = $11 - (HEAP32[$0 + 784 >> 2] | 0) | 0; //@line 458
  HEAP32[$vararg_buffer2 >> 2] = $14; //@line 459
  _mbed_tracef(16, 11020, 11436, $vararg_buffer2); //@line 460
  HEAP8[$4 >> 0] = 0; //@line 461
  if ($14 >>> 0 > 500) {
   HEAP32[$vararg_buffer5 >> 2] = $14; //@line 464
   _mbed_tracef(4, 11020, 11457, $vararg_buffer5); //@line 465
   STACKTOP = sp; //@line 466
   return;
  }
  $16 = $0 + 1112 | 0; //@line 468
  $17 = $2 + 12 | 0; //@line 469
  HEAP32[$2 >> 2] = 51; //@line 470
  HEAP32[$2 + 4 >> 2] = 0; //@line 472
  HEAP32[$2 + 8 >> 2] = $0; //@line 474
  HEAP32[$17 >> 2] = 584; //@line 475
  $18 = $0 + 1152 | 0; //@line 476
  if (($18 | 0) != ($2 | 0)) {
   $20 = $0 + 1164 | 0; //@line 479
   $21 = HEAP32[$20 >> 2] | 0; //@line 480
   do {
    if ($21 | 0) {
     $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 485
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 486
     FUNCTION_TABLE_vi[$24 & 1023]($18); //@line 487
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 52; //@line 490
      HEAP32[$AsyncCtx + 4 >> 2] = $17; //@line 492
      HEAP32[$AsyncCtx + 8 >> 2] = $20; //@line 494
      HEAP32[$AsyncCtx + 12 >> 2] = $18; //@line 496
      HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 498
      HEAP32[$AsyncCtx + 20 >> 2] = $16; //@line 500
      sp = STACKTOP; //@line 501
      STACKTOP = sp; //@line 502
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 504
      break;
     }
    }
   } while (0);
   $30 = HEAP32[$17 >> 2] | 0; //@line 509
   do {
    if (!$30) {
     $38 = 0; //@line 513
    } else {
     $33 = HEAP32[$30 + 4 >> 2] | 0; //@line 516
     $AsyncCtx21 = _emscripten_alloc_async_context(20, sp) | 0; //@line 517
     FUNCTION_TABLE_vii[$33 & 15]($18, $2); //@line 518
     if (___async) {
      HEAP32[$AsyncCtx21 >> 2] = 53; //@line 521
      HEAP32[$AsyncCtx21 + 4 >> 2] = $17; //@line 523
      HEAP32[$AsyncCtx21 + 8 >> 2] = $20; //@line 525
      HEAP32[$AsyncCtx21 + 12 >> 2] = $16; //@line 527
      HEAP32[$AsyncCtx21 + 16 >> 2] = $2; //@line 529
      sp = STACKTOP; //@line 530
      STACKTOP = sp; //@line 531
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx21 | 0); //@line 533
      $38 = HEAP32[$17 >> 2] | 0; //@line 535
      break;
     }
    }
   } while (0);
   HEAP32[$20 >> 2] = $38; //@line 540
  }
  __ZN4mbed6Ticker5setupEy($16, 2e5, 0); //@line 542
  $39 = HEAP32[$17 >> 2] | 0; //@line 543
  if (!$39) {
   STACKTOP = sp; //@line 546
   return;
  }
  $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 549
  $AsyncCtx25 = _emscripten_alloc_async_context(4, sp) | 0; //@line 550
  FUNCTION_TABLE_vi[$42 & 1023]($2); //@line 551
  if (___async) {
   HEAP32[$AsyncCtx25 >> 2] = 54; //@line 554
   sp = STACKTOP; //@line 555
   STACKTOP = sp; //@line 556
   return;
  }
  _emscripten_free_async_context($AsyncCtx25 | 0); //@line 558
  STACKTOP = sp; //@line 559
  return;
 }
 do {
  if ($1 | 0) {
   $44 = $0 + 1112 | 0; //@line 564
   $45 = $3 + 12 | 0; //@line 565
   HEAP32[$3 >> 2] = 55; //@line 566
   HEAP32[$3 + 4 >> 2] = 0; //@line 568
   HEAP32[$3 + 8 >> 2] = $0; //@line 570
   HEAP32[$45 >> 2] = 584; //@line 571
   $46 = ___muldi3($1 | 0, 0, 1e3, 0) | 0; //@line 572
   $47 = tempRet0; //@line 573
   $48 = $0 + 1152 | 0; //@line 574
   if (($48 | 0) != ($3 | 0)) {
    $50 = $0 + 1164 | 0; //@line 577
    $51 = HEAP32[$50 >> 2] | 0; //@line 578
    do {
     if ($51 | 0) {
      $54 = HEAP32[$51 + 8 >> 2] | 0; //@line 583
      $AsyncCtx29 = _emscripten_alloc_async_context(72, sp) | 0; //@line 584
      FUNCTION_TABLE_vi[$54 & 1023]($48); //@line 585
      if (___async) {
       HEAP32[$AsyncCtx29 >> 2] = 56; //@line 588
       HEAP32[$AsyncCtx29 + 4 >> 2] = $45; //@line 590
       HEAP32[$AsyncCtx29 + 8 >> 2] = $50; //@line 592
       HEAP32[$AsyncCtx29 + 12 >> 2] = $48; //@line 594
       HEAP32[$AsyncCtx29 + 16 >> 2] = $3; //@line 596
       HEAP32[$AsyncCtx29 + 20 >> 2] = $44; //@line 598
       $61 = $AsyncCtx29 + 24 | 0; //@line 600
       HEAP32[$61 >> 2] = $46; //@line 602
       HEAP32[$61 + 4 >> 2] = $47; //@line 605
       HEAP32[$AsyncCtx29 + 32 >> 2] = $0; //@line 607
       HEAP32[$AsyncCtx29 + 36 >> 2] = $vararg_buffer14; //@line 609
       HEAP32[$AsyncCtx29 + 40 >> 2] = $vararg_buffer14; //@line 611
       HEAP32[$AsyncCtx29 + 44 >> 2] = $vararg_buffer17; //@line 613
       HEAP32[$AsyncCtx29 + 48 >> 2] = $vararg_buffer17; //@line 615
       HEAP32[$AsyncCtx29 + 52 >> 2] = $vararg_buffer8; //@line 617
       HEAP32[$AsyncCtx29 + 56 >> 2] = $vararg_buffer8; //@line 619
       HEAP32[$AsyncCtx29 + 60 >> 2] = $vararg_buffer11; //@line 621
       HEAP32[$AsyncCtx29 + 64 >> 2] = $vararg_buffer11; //@line 623
       sp = STACKTOP; //@line 624
       STACKTOP = sp; //@line 625
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx29 | 0); //@line 627
       break;
      }
     }
    } while (0);
    $74 = HEAP32[$45 >> 2] | 0; //@line 632
    do {
     if (!$74) {
      $96 = 0; //@line 636
     } else {
      $77 = HEAP32[$74 + 4 >> 2] | 0; //@line 639
      $AsyncCtx32 = _emscripten_alloc_async_context(64, sp) | 0; //@line 640
      FUNCTION_TABLE_vii[$77 & 15]($48, $3); //@line 641
      if (___async) {
       HEAP32[$AsyncCtx32 >> 2] = 57; //@line 644
       HEAP32[$AsyncCtx32 + 4 >> 2] = $45; //@line 646
       HEAP32[$AsyncCtx32 + 8 >> 2] = $50; //@line 648
       HEAP32[$AsyncCtx32 + 12 >> 2] = $44; //@line 650
       $82 = $AsyncCtx32 + 16 | 0; //@line 652
       HEAP32[$82 >> 2] = $46; //@line 654
       HEAP32[$82 + 4 >> 2] = $47; //@line 657
       HEAP32[$AsyncCtx32 + 24 >> 2] = $0; //@line 659
       HEAP32[$AsyncCtx32 + 28 >> 2] = $3; //@line 661
       HEAP32[$AsyncCtx32 + 32 >> 2] = $vararg_buffer14; //@line 663
       HEAP32[$AsyncCtx32 + 36 >> 2] = $vararg_buffer14; //@line 665
       HEAP32[$AsyncCtx32 + 40 >> 2] = $vararg_buffer17; //@line 667
       HEAP32[$AsyncCtx32 + 44 >> 2] = $vararg_buffer17; //@line 669
       HEAP32[$AsyncCtx32 + 48 >> 2] = $vararg_buffer8; //@line 671
       HEAP32[$AsyncCtx32 + 52 >> 2] = $vararg_buffer8; //@line 673
       HEAP32[$AsyncCtx32 + 56 >> 2] = $vararg_buffer11; //@line 675
       HEAP32[$AsyncCtx32 + 60 >> 2] = $vararg_buffer11; //@line 677
       sp = STACKTOP; //@line 678
       STACKTOP = sp; //@line 679
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx32 | 0); //@line 681
       $96 = HEAP32[$45 >> 2] | 0; //@line 683
       break;
      }
     }
    } while (0);
    HEAP32[$50 >> 2] = $96; //@line 688
   }
   __ZN4mbed6Ticker5setupEy($44, $46, $47); //@line 690
   $97 = HEAP32[$45 >> 2] | 0; //@line 691
   if ($97 | 0) {
    $100 = HEAP32[$97 + 8 >> 2] | 0; //@line 695
    $AsyncCtx36 = _emscripten_alloc_async_context(40, sp) | 0; //@line 696
    FUNCTION_TABLE_vi[$100 & 1023]($3); //@line 697
    if (___async) {
     HEAP32[$AsyncCtx36 >> 2] = 58; //@line 700
     HEAP32[$AsyncCtx36 + 4 >> 2] = $0; //@line 702
     HEAP32[$AsyncCtx36 + 8 >> 2] = $vararg_buffer14; //@line 704
     HEAP32[$AsyncCtx36 + 12 >> 2] = $vararg_buffer14; //@line 706
     HEAP32[$AsyncCtx36 + 16 >> 2] = $vararg_buffer17; //@line 708
     HEAP32[$AsyncCtx36 + 20 >> 2] = $vararg_buffer17; //@line 710
     HEAP32[$AsyncCtx36 + 24 >> 2] = $vararg_buffer8; //@line 712
     HEAP32[$AsyncCtx36 + 28 >> 2] = $vararg_buffer8; //@line 714
     HEAP32[$AsyncCtx36 + 32 >> 2] = $vararg_buffer11; //@line 716
     HEAP32[$AsyncCtx36 + 36 >> 2] = $vararg_buffer11; //@line 718
     sp = STACKTOP; //@line 719
     STACKTOP = sp; //@line 720
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx36 | 0); //@line 722
     break;
    }
   }
  }
 } while (0);
 if (!(HEAP8[$0 + 770 >> 0] | 0)) {
  HEAP32[$vararg_buffer14 >> 2] = 6; //@line 732
  _mbed_tracef(16, 11020, 11077, $vararg_buffer14); //@line 733
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 734
  HEAP32[$vararg_buffer17 >> 2] = 6; //@line 735
  _mbed_tracef(16, 11020, 11106, $vararg_buffer17); //@line 736
  STACKTOP = sp; //@line 737
  return;
 } else {
  HEAP32[$vararg_buffer8 >> 2] = 5; //@line 739
  _mbed_tracef(16, 11020, 11077, $vararg_buffer8); //@line 740
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 741
  HEAP32[$vararg_buffer11 >> 2] = 5; //@line 742
  _mbed_tracef(16, 11020, 11106, $vararg_buffer11); //@line 743
  STACKTOP = sp; //@line 744
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26912
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26914
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26916
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26918
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26920
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26922
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26924
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26926
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26928
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26930
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26932
 $$pre = HEAP32[$10 >> 2] | 0; //@line 26933
 if ($$pre | 0) {
  $23 = HEAP32[$$pre + 4 >> 2] | 0; //@line 26937
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 26938
  FUNCTION_TABLE_vii[$23 & 15]($8, $14); //@line 26939
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 182; //@line 26942
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 26943
   HEAP32[$24 >> 2] = $2; //@line 26944
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 26945
   HEAP32[$25 >> 2] = $6; //@line 26946
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 26947
   HEAP32[$26 >> 2] = $8; //@line 26948
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 26949
   HEAP32[$27 >> 2] = $12; //@line 26950
   $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 26951
   HEAP32[$28 >> 2] = $10; //@line 26952
   $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 26953
   HEAP32[$29 >> 2] = $4; //@line 26954
   $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 26955
   HEAP32[$30 >> 2] = $14; //@line 26956
   $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 26957
   HEAP32[$31 >> 2] = $16; //@line 26958
   $32 = $ReallocAsyncCtx2 + 36 | 0; //@line 26959
   HEAP32[$32 >> 2] = $18; //@line 26960
   $33 = $ReallocAsyncCtx2 + 40 | 0; //@line 26961
   HEAP32[$33 >> 2] = $20; //@line 26962
   sp = STACKTOP; //@line 26963
   return;
  }
  ___async_unwind = 0; //@line 26966
  HEAP32[$ReallocAsyncCtx2 >> 2] = 182; //@line 26967
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 26968
  HEAP32[$24 >> 2] = $2; //@line 26969
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 26970
  HEAP32[$25 >> 2] = $6; //@line 26971
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 26972
  HEAP32[$26 >> 2] = $8; //@line 26973
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 26974
  HEAP32[$27 >> 2] = $12; //@line 26975
  $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 26976
  HEAP32[$28 >> 2] = $10; //@line 26977
  $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 26978
  HEAP32[$29 >> 2] = $4; //@line 26979
  $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 26980
  HEAP32[$30 >> 2] = $14; //@line 26981
  $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 26982
  HEAP32[$31 >> 2] = $16; //@line 26983
  $32 = $ReallocAsyncCtx2 + 36 | 0; //@line 26984
  HEAP32[$32 >> 2] = $18; //@line 26985
  $33 = $ReallocAsyncCtx2 + 40 | 0; //@line 26986
  HEAP32[$33 >> 2] = $20; //@line 26987
  sp = STACKTOP; //@line 26988
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 26991
 $34 = $16 + 12 | 0; //@line 26992
 HEAP32[$16 >> 2] = 6; //@line 26993
 HEAP32[$16 + 4 >> 2] = 0; //@line 26995
 HEAP32[$16 + 8 >> 2] = $2; //@line 26997
 HEAP32[$34 >> 2] = 820; //@line 26998
 $35 = $2 + 2400 | 0; //@line 26999
 if (($35 | 0) == ($16 | 0)) {
  $64 = HEAP32[207] | 0; //@line 27003
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 27004
  FUNCTION_TABLE_vi[$64 & 1023]($16); //@line 27005
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 186; //@line 27008
   $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 27009
   HEAP32[$65 >> 2] = $2; //@line 27010
   $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 27011
   HEAP32[$66 >> 2] = $6; //@line 27012
   $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 27013
   HEAP32[$67 >> 2] = $8; //@line 27014
   $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 27015
   HEAP32[$68 >> 2] = $12; //@line 27016
   $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 27017
   HEAP32[$69 >> 2] = $16; //@line 27018
   $70 = $ReallocAsyncCtx6 + 24 | 0; //@line 27019
   HEAP32[$70 >> 2] = $18; //@line 27020
   $71 = $ReallocAsyncCtx6 + 28 | 0; //@line 27021
   HEAP32[$71 >> 2] = $20; //@line 27022
   sp = STACKTOP; //@line 27023
   return;
  }
  ___async_unwind = 0; //@line 27026
  HEAP32[$ReallocAsyncCtx6 >> 2] = 186; //@line 27027
  $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 27028
  HEAP32[$65 >> 2] = $2; //@line 27029
  $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 27030
  HEAP32[$66 >> 2] = $6; //@line 27031
  $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 27032
  HEAP32[$67 >> 2] = $8; //@line 27033
  $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 27034
  HEAP32[$68 >> 2] = $12; //@line 27035
  $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 27036
  HEAP32[$69 >> 2] = $16; //@line 27037
  $70 = $ReallocAsyncCtx6 + 24 | 0; //@line 27038
  HEAP32[$70 >> 2] = $18; //@line 27039
  $71 = $ReallocAsyncCtx6 + 28 | 0; //@line 27040
  HEAP32[$71 >> 2] = $20; //@line 27041
  sp = STACKTOP; //@line 27042
  return;
 }
 $37 = $2 + 2412 | 0; //@line 27045
 $38 = HEAP32[$37 >> 2] | 0; //@line 27046
 if (!$38) {
  $53 = HEAP32[206] | 0; //@line 27050
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 27051
  FUNCTION_TABLE_vii[$53 & 15]($35, $16); //@line 27052
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 185; //@line 27055
   $54 = $ReallocAsyncCtx5 + 4 | 0; //@line 27056
   HEAP32[$54 >> 2] = $2; //@line 27057
   $55 = $ReallocAsyncCtx5 + 8 | 0; //@line 27058
   HEAP32[$55 >> 2] = $6; //@line 27059
   $56 = $ReallocAsyncCtx5 + 12 | 0; //@line 27060
   HEAP32[$56 >> 2] = $8; //@line 27061
   $57 = $ReallocAsyncCtx5 + 16 | 0; //@line 27062
   HEAP32[$57 >> 2] = $12; //@line 27063
   $58 = $ReallocAsyncCtx5 + 20 | 0; //@line 27064
   HEAP32[$58 >> 2] = $34; //@line 27065
   $59 = $ReallocAsyncCtx5 + 24 | 0; //@line 27066
   HEAP32[$59 >> 2] = $37; //@line 27067
   $60 = $ReallocAsyncCtx5 + 28 | 0; //@line 27068
   HEAP32[$60 >> 2] = $16; //@line 27069
   $61 = $ReallocAsyncCtx5 + 32 | 0; //@line 27070
   HEAP32[$61 >> 2] = $18; //@line 27071
   $62 = $ReallocAsyncCtx5 + 36 | 0; //@line 27072
   HEAP32[$62 >> 2] = $20; //@line 27073
   sp = STACKTOP; //@line 27074
   return;
  }
  ___async_unwind = 0; //@line 27077
  HEAP32[$ReallocAsyncCtx5 >> 2] = 185; //@line 27078
  $54 = $ReallocAsyncCtx5 + 4 | 0; //@line 27079
  HEAP32[$54 >> 2] = $2; //@line 27080
  $55 = $ReallocAsyncCtx5 + 8 | 0; //@line 27081
  HEAP32[$55 >> 2] = $6; //@line 27082
  $56 = $ReallocAsyncCtx5 + 12 | 0; //@line 27083
  HEAP32[$56 >> 2] = $8; //@line 27084
  $57 = $ReallocAsyncCtx5 + 16 | 0; //@line 27085
  HEAP32[$57 >> 2] = $12; //@line 27086
  $58 = $ReallocAsyncCtx5 + 20 | 0; //@line 27087
  HEAP32[$58 >> 2] = $34; //@line 27088
  $59 = $ReallocAsyncCtx5 + 24 | 0; //@line 27089
  HEAP32[$59 >> 2] = $37; //@line 27090
  $60 = $ReallocAsyncCtx5 + 28 | 0; //@line 27091
  HEAP32[$60 >> 2] = $16; //@line 27092
  $61 = $ReallocAsyncCtx5 + 32 | 0; //@line 27093
  HEAP32[$61 >> 2] = $18; //@line 27094
  $62 = $ReallocAsyncCtx5 + 36 | 0; //@line 27095
  HEAP32[$62 >> 2] = $20; //@line 27096
  sp = STACKTOP; //@line 27097
  return;
 } else {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 27101
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 27102
  FUNCTION_TABLE_vi[$41 & 1023]($35); //@line 27103
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 184; //@line 27106
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 27107
   HEAP32[$42 >> 2] = $2; //@line 27108
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 27109
   HEAP32[$43 >> 2] = $6; //@line 27110
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 27111
   HEAP32[$44 >> 2] = $8; //@line 27112
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 27113
   HEAP32[$45 >> 2] = $12; //@line 27114
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 27115
   HEAP32[$46 >> 2] = $37; //@line 27116
   $47 = $ReallocAsyncCtx4 + 24 | 0; //@line 27117
   HEAP32[$47 >> 2] = $34; //@line 27118
   $48 = $ReallocAsyncCtx4 + 28 | 0; //@line 27119
   HEAP32[$48 >> 2] = $35; //@line 27120
   $49 = $ReallocAsyncCtx4 + 32 | 0; //@line 27121
   HEAP32[$49 >> 2] = $16; //@line 27122
   $50 = $ReallocAsyncCtx4 + 36 | 0; //@line 27123
   HEAP32[$50 >> 2] = $18; //@line 27124
   $51 = $ReallocAsyncCtx4 + 40 | 0; //@line 27125
   HEAP32[$51 >> 2] = $20; //@line 27126
   sp = STACKTOP; //@line 27127
   return;
  }
  ___async_unwind = 0; //@line 27130
  HEAP32[$ReallocAsyncCtx4 >> 2] = 184; //@line 27131
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 27132
  HEAP32[$42 >> 2] = $2; //@line 27133
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 27134
  HEAP32[$43 >> 2] = $6; //@line 27135
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 27136
  HEAP32[$44 >> 2] = $8; //@line 27137
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 27138
  HEAP32[$45 >> 2] = $12; //@line 27139
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 27140
  HEAP32[$46 >> 2] = $37; //@line 27141
  $47 = $ReallocAsyncCtx4 + 24 | 0; //@line 27142
  HEAP32[$47 >> 2] = $34; //@line 27143
  $48 = $ReallocAsyncCtx4 + 28 | 0; //@line 27144
  HEAP32[$48 >> 2] = $35; //@line 27145
  $49 = $ReallocAsyncCtx4 + 32 | 0; //@line 27146
  HEAP32[$49 >> 2] = $16; //@line 27147
  $50 = $ReallocAsyncCtx4 + 36 | 0; //@line 27148
  HEAP32[$50 >> 2] = $18; //@line 27149
  $51 = $ReallocAsyncCtx4 + 40 | 0; //@line 27150
  HEAP32[$51 >> 2] = $20; //@line 27151
  sp = STACKTOP; //@line 27152
  return;
 }
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 var $106 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $47 = 0, $49 = 0, $62 = 0, $64 = 0, $77 = 0, $79 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2167
 HEAP32[$0 >> 2] = 496; //@line 2168
 $19 = $0 + 4 | 0; //@line 2169
 HEAP32[$19 >> 2] = 0; //@line 2170
 HEAP32[$19 + 4 >> 2] = 0; //@line 2170
 HEAP32[$19 + 8 >> 2] = 0; //@line 2170
 HEAP32[$19 + 12 >> 2] = 0; //@line 2170
 HEAP32[$19 + 16 >> 2] = 0; //@line 2170
 HEAP32[$19 + 20 >> 2] = 0; //@line 2170
 _gpio_init_out_ex($19, $4, 1); //@line 2171
 $20 = $0 + 28 | 0; //@line 2172
 HEAP32[$20 >> 2] = 0; //@line 2173
 HEAP32[$20 + 4 >> 2] = 0; //@line 2173
 HEAP32[$20 + 8 >> 2] = 0; //@line 2173
 HEAP32[$20 + 12 >> 2] = 0; //@line 2173
 HEAP32[$20 + 16 >> 2] = 0; //@line 2173
 HEAP32[$20 + 20 >> 2] = 0; //@line 2173
 _gpio_init_in($20, $5); //@line 2174
 __ZN4mbed11InterruptInC2E7PinName($0 + 52 | 0, $6); //@line 2176
 __ZN4mbed11InterruptInC2E7PinName($0 + 124 | 0, $7); //@line 2178
 __ZN4mbed11InterruptInC2E7PinName($0 + 196 | 0, $8); //@line 2180
 __ZN4mbed11InterruptInC2E7PinName($0 + 268 | 0, $9); //@line 2182
 __ZN4mbed11InterruptInC2E7PinName($0 + 340 | 0, $10); //@line 2184
 __ZN4mbed11InterruptInC2E7PinName($0 + 412 | 0, $11); //@line 2186
 $27 = $0 + 484 | 0; //@line 2187
 HEAP32[$27 >> 2] = 0; //@line 2188
 HEAP32[$27 + 4 >> 2] = 0; //@line 2188
 HEAP32[$27 + 8 >> 2] = 0; //@line 2188
 HEAP32[$27 + 12 >> 2] = 0; //@line 2188
 HEAP32[$27 + 16 >> 2] = 0; //@line 2188
 HEAP32[$27 + 20 >> 2] = 0; //@line 2188
 _gpio_init_out_ex($27, $12, 0); //@line 2189
 $28 = $0 + 508 | 0; //@line 2190
 HEAP32[$28 >> 2] = 0; //@line 2191
 HEAP32[$28 + 4 >> 2] = 0; //@line 2191
 HEAP32[$28 + 8 >> 2] = 0; //@line 2191
 HEAP32[$28 + 12 >> 2] = 0; //@line 2191
 HEAP32[$28 + 16 >> 2] = 0; //@line 2191
 HEAP32[$28 + 20 >> 2] = 0; //@line 2191
 _gpio_init_out_ex($28, $13, 0); //@line 2192
 $29 = $0 + 532 | 0; //@line 2193
 HEAP32[$29 >> 2] = 0; //@line 2194
 HEAP32[$29 + 4 >> 2] = 0; //@line 2194
 HEAP32[$29 + 8 >> 2] = 0; //@line 2194
 HEAP32[$29 + 12 >> 2] = 0; //@line 2194
 HEAP32[$29 + 16 >> 2] = 0; //@line 2194
 HEAP32[$29 + 20 >> 2] = 0; //@line 2194
 _gpio_init_out_ex($29, $14, 0); //@line 2195
 $30 = $0 + 556 | 0; //@line 2196
 HEAP32[$30 >> 2] = 0; //@line 2197
 HEAP32[$30 + 4 >> 2] = 0; //@line 2197
 HEAP32[$30 + 8 >> 2] = 0; //@line 2197
 HEAP32[$30 + 12 >> 2] = 0; //@line 2197
 HEAP32[$30 + 16 >> 2] = 0; //@line 2197
 HEAP32[$30 + 20 >> 2] = 0; //@line 2197
 _gpio_init_out_ex($30, $15, 0); //@line 2198
 $31 = $0 + 580 | 0; //@line 2199
 HEAP32[$31 >> 2] = 0; //@line 2200
 HEAP32[$31 + 4 >> 2] = 0; //@line 2200
 HEAP32[$31 + 8 >> 2] = 0; //@line 2200
 HEAP32[$31 + 12 >> 2] = 0; //@line 2200
 HEAP32[$31 + 16 >> 2] = 0; //@line 2200
 HEAP32[$31 + 20 >> 2] = 0; //@line 2200
 _gpio_init_inout($31, $16, 0, 0, 0); //@line 2201
 $32 = $0 + 604 | 0; //@line 2202
 HEAP32[$32 >> 2] = 0; //@line 2203
 HEAP32[$32 + 4 >> 2] = 0; //@line 2203
 HEAP32[$32 + 8 >> 2] = 0; //@line 2203
 HEAP32[$32 + 12 >> 2] = 0; //@line 2203
 HEAP32[$32 + 16 >> 2] = 0; //@line 2203
 HEAP32[$32 + 20 >> 2] = 0; //@line 2203
 _gpio_init_out($32, $17); //@line 2204
 $33 = $0 + 628 | 0; //@line 2205
 HEAP32[$33 >> 2] = 0; //@line 2206
 HEAP32[$33 + 4 >> 2] = 0; //@line 2206
 HEAP32[$33 + 8 >> 2] = 0; //@line 2206
 HEAP32[$33 + 12 >> 2] = 0; //@line 2206
 HEAP32[$33 + 16 >> 2] = 0; //@line 2206
 HEAP32[$33 + 20 >> 2] = 0; //@line 2206
 _gpio_init_out($33, $18); //@line 2207
 $34 = $0 + 1048 | 0; //@line 2208
 $AsyncCtx11 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2209
 __ZN4mbed10TimerEventC2Ev($34); //@line 2210
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 97; //@line 2213
  HEAP32[$AsyncCtx11 + 4 >> 2] = $34; //@line 2215
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 2217
  HEAP32[$AsyncCtx11 + 12 >> 2] = $16; //@line 2219
  HEAP32[$AsyncCtx11 + 16 >> 2] = $17; //@line 2221
  HEAP32[$AsyncCtx11 + 20 >> 2] = $12; //@line 2223
  HEAP32[$AsyncCtx11 + 24 >> 2] = $13; //@line 2225
  HEAP32[$AsyncCtx11 + 28 >> 2] = $15; //@line 2227
  HEAP32[$AsyncCtx11 + 32 >> 2] = $14; //@line 2229
  HEAP32[$AsyncCtx11 + 36 >> 2] = $18; //@line 2231
  HEAP32[$AsyncCtx11 + 40 >> 2] = $10; //@line 2233
  HEAP32[$AsyncCtx11 + 44 >> 2] = $11; //@line 2235
  HEAP32[$AsyncCtx11 + 48 >> 2] = $33; //@line 2237
  sp = STACKTOP; //@line 2238
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2241
 $47 = $0 + 1088 | 0; //@line 2242
 HEAP32[$47 >> 2] = 0; //@line 2243
 HEAP32[$47 + 4 >> 2] = 0; //@line 2243
 HEAP32[$47 + 8 >> 2] = 0; //@line 2243
 HEAP32[$47 + 12 >> 2] = 0; //@line 2243
 HEAP8[$0 + 1104 >> 0] = 1; //@line 2245
 HEAP32[$34 >> 2] = 620; //@line 2246
 $49 = $0 + 1112 | 0; //@line 2247
 $AsyncCtx7 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2248
 __ZN4mbed10TimerEventC2Ev($49); //@line 2249
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 98; //@line 2252
  HEAP32[$AsyncCtx7 + 4 >> 2] = $49; //@line 2254
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 2256
  HEAP32[$AsyncCtx7 + 12 >> 2] = $16; //@line 2258
  HEAP32[$AsyncCtx7 + 16 >> 2] = $17; //@line 2260
  HEAP32[$AsyncCtx7 + 20 >> 2] = $12; //@line 2262
  HEAP32[$AsyncCtx7 + 24 >> 2] = $13; //@line 2264
  HEAP32[$AsyncCtx7 + 28 >> 2] = $15; //@line 2266
  HEAP32[$AsyncCtx7 + 32 >> 2] = $14; //@line 2268
  HEAP32[$AsyncCtx7 + 36 >> 2] = $18; //@line 2270
  HEAP32[$AsyncCtx7 + 40 >> 2] = $10; //@line 2272
  HEAP32[$AsyncCtx7 + 44 >> 2] = $11; //@line 2274
  HEAP32[$AsyncCtx7 + 48 >> 2] = $33; //@line 2276
  sp = STACKTOP; //@line 2277
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2280
 $62 = $0 + 1152 | 0; //@line 2281
 HEAP32[$62 >> 2] = 0; //@line 2282
 HEAP32[$62 + 4 >> 2] = 0; //@line 2282
 HEAP32[$62 + 8 >> 2] = 0; //@line 2282
 HEAP32[$62 + 12 >> 2] = 0; //@line 2282
 HEAP8[$0 + 1168 >> 0] = 1; //@line 2284
 HEAP32[$49 >> 2] = 620; //@line 2285
 $64 = $0 + 1176 | 0; //@line 2286
 $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2287
 __ZN4mbed10TimerEventC2Ev($64); //@line 2288
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 99; //@line 2291
  HEAP32[$AsyncCtx3 + 4 >> 2] = $64; //@line 2293
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 2295
  HEAP32[$AsyncCtx3 + 12 >> 2] = $16; //@line 2297
  HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 2299
  HEAP32[$AsyncCtx3 + 20 >> 2] = $12; //@line 2301
  HEAP32[$AsyncCtx3 + 24 >> 2] = $13; //@line 2303
  HEAP32[$AsyncCtx3 + 28 >> 2] = $15; //@line 2305
  HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 2307
  HEAP32[$AsyncCtx3 + 36 >> 2] = $18; //@line 2309
  HEAP32[$AsyncCtx3 + 40 >> 2] = $10; //@line 2311
  HEAP32[$AsyncCtx3 + 44 >> 2] = $11; //@line 2313
  HEAP32[$AsyncCtx3 + 48 >> 2] = $33; //@line 2315
  sp = STACKTOP; //@line 2316
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2319
 $77 = $0 + 1216 | 0; //@line 2320
 HEAP32[$77 >> 2] = 0; //@line 2321
 HEAP32[$77 + 4 >> 2] = 0; //@line 2321
 HEAP32[$77 + 8 >> 2] = 0; //@line 2321
 HEAP32[$77 + 12 >> 2] = 0; //@line 2321
 HEAP8[$0 + 1232 >> 0] = 1; //@line 2323
 HEAP32[$64 >> 2] = 620; //@line 2324
 $79 = $0 + 1240 | 0; //@line 2325
 $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 2326
 __ZN4mbed10TimerEventC2Ev($79); //@line 2327
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 100; //@line 2330
  HEAP32[$AsyncCtx + 4 >> 2] = $79; //@line 2332
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2334
  HEAP32[$AsyncCtx + 12 >> 2] = $16; //@line 2336
  HEAP32[$AsyncCtx + 16 >> 2] = $17; //@line 2338
  HEAP32[$AsyncCtx + 20 >> 2] = $12; //@line 2340
  HEAP32[$AsyncCtx + 24 >> 2] = $13; //@line 2342
  HEAP32[$AsyncCtx + 28 >> 2] = $15; //@line 2344
  HEAP32[$AsyncCtx + 32 >> 2] = $14; //@line 2346
  HEAP32[$AsyncCtx + 36 >> 2] = $18; //@line 2348
  HEAP32[$AsyncCtx + 40 >> 2] = $10; //@line 2350
  HEAP32[$AsyncCtx + 44 >> 2] = $11; //@line 2352
  HEAP32[$AsyncCtx + 48 >> 2] = $33; //@line 2354
  sp = STACKTOP; //@line 2355
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2358
 $92 = $0 + 1280 | 0; //@line 2359
 HEAP32[$92 >> 2] = 0; //@line 2360
 HEAP32[$92 + 4 >> 2] = 0; //@line 2360
 HEAP32[$92 + 8 >> 2] = 0; //@line 2360
 HEAP32[$92 + 12 >> 2] = 0; //@line 2360
 HEAP8[$0 + 1296 >> 0] = 1; //@line 2362
 HEAP32[$79 >> 2] = 620; //@line 2363
 HEAP32[$0 + 668 >> 2] = $16; //@line 2365
 HEAP32[$0 + 672 >> 2] = $17; //@line 2367
 HEAP32[$0 + 652 >> 2] = $12; //@line 2369
 HEAP32[$0 + 656 >> 2] = $13; //@line 2371
 HEAP32[$0 + 664 >> 2] = $15; //@line 2373
 HEAP32[$0 + 660 >> 2] = $14; //@line 2375
 HEAP32[$0 + 676 >> 2] = $18; //@line 2377
 HEAP32[$0 + 680 >> 2] = $10; //@line 2379
 HEAP32[$0 + 684 >> 2] = $11; //@line 2381
 HEAP32[$0 + 788 >> 2] = 0; //@line 2383
 if (($18 | 0) == -1) {
  $106 = _emscripten_asm_const_ii(7, $0 | 0) | 0; //@line 2386
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$33 >> 2] | 0, 1) | 0; //@line 2390
 $106 = _emscripten_asm_const_ii(7, $0 | 0) | 0; //@line 2391
 return;
}
function _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$04056 = 0, $$04255 = 0, $$044 = 0, $$04554 = 0, $$14160 = 0, $$14160$us = 0, $$14359 = 0, $$14359$us = 0, $$14658 = 0, $$14658$us = 0, $10 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $127 = 0, $13 = 0, $131 = 0, $135 = 0, $139 = 0, $14 = 0, $143 = 0, $147 = 0, $15 = 0, $151 = 0, $155 = 0, $159 = 0, $16 = 0, $163 = 0, $167 = 0, $17 = 0, $171 = 0, $175 = 0, $179 = 0, $18 = 0, $183 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 1485
 STACKTOP = STACKTOP + 16 | 0; //@line 1486
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1486
 $6 = sp; //@line 1487
 if ($2 & 15 | 0) {
  $$044 = -34; //@line 1491
  STACKTOP = sp; //@line 1492
  return $$044 | 0; //@line 1492
 }
 $10 = ($2 | 0) == 0; //@line 1495
 if (!$1) {
  if ($10) {
   $$044 = 0; //@line 1498
   STACKTOP = sp; //@line 1499
   return $$044 | 0; //@line 1499
  }
  $109 = $3 + 1 | 0; //@line 1501
  $110 = $3 + 2 | 0; //@line 1502
  $111 = $3 + 3 | 0; //@line 1503
  $112 = $3 + 4 | 0; //@line 1504
  $113 = $3 + 5 | 0; //@line 1505
  $114 = $3 + 6 | 0; //@line 1506
  $115 = $3 + 7 | 0; //@line 1507
  $116 = $3 + 8 | 0; //@line 1508
  $117 = $3 + 9 | 0; //@line 1509
  $118 = $3 + 10 | 0; //@line 1510
  $119 = $3 + 11 | 0; //@line 1511
  $120 = $3 + 12 | 0; //@line 1512
  $121 = $3 + 13 | 0; //@line 1513
  $122 = $3 + 14 | 0; //@line 1514
  $123 = $3 + 15 | 0; //@line 1515
  $$04056 = $5; //@line 1516
  $$04255 = $4; //@line 1516
  $$04554 = $2; //@line 1516
  while (1) {
   dest = $6; //@line 1518
   src = $$04255; //@line 1518
   stop = dest + 16 | 0; //@line 1518
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1518
    dest = dest + 1 | 0; //@line 1518
    src = src + 1 | 0; //@line 1518
   } while ((dest | 0) < (stop | 0));
   _mbedtls_internal_aes_decrypt($0, $$04255, $$04056) | 0; //@line 1519
   HEAP8[$$04056 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$04056 >> 0]; //@line 1523
   $127 = $$04056 + 1 | 0; //@line 1524
   HEAP8[$127 >> 0] = HEAP8[$109 >> 0] ^ HEAP8[$127 >> 0]; //@line 1528
   $131 = $$04056 + 2 | 0; //@line 1529
   HEAP8[$131 >> 0] = HEAP8[$110 >> 0] ^ HEAP8[$131 >> 0]; //@line 1533
   $135 = $$04056 + 3 | 0; //@line 1534
   HEAP8[$135 >> 0] = HEAP8[$111 >> 0] ^ HEAP8[$135 >> 0]; //@line 1538
   $139 = $$04056 + 4 | 0; //@line 1539
   HEAP8[$139 >> 0] = HEAP8[$112 >> 0] ^ HEAP8[$139 >> 0]; //@line 1543
   $143 = $$04056 + 5 | 0; //@line 1544
   HEAP8[$143 >> 0] = HEAP8[$113 >> 0] ^ HEAP8[$143 >> 0]; //@line 1548
   $147 = $$04056 + 6 | 0; //@line 1549
   HEAP8[$147 >> 0] = HEAP8[$114 >> 0] ^ HEAP8[$147 >> 0]; //@line 1553
   $151 = $$04056 + 7 | 0; //@line 1554
   HEAP8[$151 >> 0] = HEAP8[$115 >> 0] ^ HEAP8[$151 >> 0]; //@line 1558
   $155 = $$04056 + 8 | 0; //@line 1559
   HEAP8[$155 >> 0] = HEAP8[$116 >> 0] ^ HEAP8[$155 >> 0]; //@line 1563
   $159 = $$04056 + 9 | 0; //@line 1564
   HEAP8[$159 >> 0] = HEAP8[$117 >> 0] ^ HEAP8[$159 >> 0]; //@line 1568
   $163 = $$04056 + 10 | 0; //@line 1569
   HEAP8[$163 >> 0] = HEAP8[$118 >> 0] ^ HEAP8[$163 >> 0]; //@line 1573
   $167 = $$04056 + 11 | 0; //@line 1574
   HEAP8[$167 >> 0] = HEAP8[$119 >> 0] ^ HEAP8[$167 >> 0]; //@line 1578
   $171 = $$04056 + 12 | 0; //@line 1579
   HEAP8[$171 >> 0] = HEAP8[$120 >> 0] ^ HEAP8[$171 >> 0]; //@line 1583
   $175 = $$04056 + 13 | 0; //@line 1584
   HEAP8[$175 >> 0] = HEAP8[$121 >> 0] ^ HEAP8[$175 >> 0]; //@line 1588
   $179 = $$04056 + 14 | 0; //@line 1589
   HEAP8[$179 >> 0] = HEAP8[$122 >> 0] ^ HEAP8[$179 >> 0]; //@line 1593
   $183 = $$04056 + 15 | 0; //@line 1594
   HEAP8[$183 >> 0] = HEAP8[$123 >> 0] ^ HEAP8[$183 >> 0]; //@line 1598
   dest = $3; //@line 1599
   src = $6; //@line 1599
   stop = dest + 16 | 0; //@line 1599
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1599
    dest = dest + 1 | 0; //@line 1599
    src = src + 1 | 0; //@line 1599
   } while ((dest | 0) < (stop | 0));
   $$04554 = $$04554 + -16 | 0; //@line 1602
   if (!$$04554) {
    $$044 = 0; //@line 1605
    break;
   } else {
    $$04056 = $$04056 + 16 | 0; //@line 1608
    $$04255 = $$04255 + 16 | 0; //@line 1608
   }
  }
  STACKTOP = sp; //@line 1611
  return $$044 | 0; //@line 1611
 }
 if ($10) {
  $$044 = 0; //@line 1614
  STACKTOP = sp; //@line 1615
  return $$044 | 0; //@line 1615
 }
 $12 = $3 + 1 | 0; //@line 1618
 $13 = $3 + 2 | 0; //@line 1619
 $14 = $3 + 3 | 0; //@line 1620
 $15 = $3 + 4 | 0; //@line 1621
 $16 = $3 + 5 | 0; //@line 1622
 $17 = $3 + 6 | 0; //@line 1623
 $18 = $3 + 7 | 0; //@line 1624
 $19 = $3 + 8 | 0; //@line 1625
 $20 = $3 + 9 | 0; //@line 1626
 $21 = $3 + 10 | 0; //@line 1627
 $22 = $3 + 11 | 0; //@line 1628
 $23 = $3 + 12 | 0; //@line 1629
 $24 = $3 + 13 | 0; //@line 1630
 $25 = $3 + 14 | 0; //@line 1631
 $26 = $3 + 15 | 0; //@line 1632
 if (($1 | 0) == 1) {
  $$14160$us = $5; //@line 1634
  $$14359$us = $4; //@line 1634
  $$14658$us = $2; //@line 1634
  while (1) {
   HEAP8[$$14160$us >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359$us >> 0]; //@line 1639
   HEAP8[$$14160$us + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359$us + 1 >> 0]; //@line 1645
   HEAP8[$$14160$us + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359$us + 2 >> 0]; //@line 1651
   HEAP8[$$14160$us + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359$us + 3 >> 0]; //@line 1657
   HEAP8[$$14160$us + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359$us + 4 >> 0]; //@line 1663
   HEAP8[$$14160$us + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359$us + 5 >> 0]; //@line 1669
   HEAP8[$$14160$us + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359$us + 6 >> 0]; //@line 1675
   HEAP8[$$14160$us + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359$us + 7 >> 0]; //@line 1681
   HEAP8[$$14160$us + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359$us + 8 >> 0]; //@line 1687
   HEAP8[$$14160$us + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359$us + 9 >> 0]; //@line 1693
   HEAP8[$$14160$us + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359$us + 10 >> 0]; //@line 1699
   HEAP8[$$14160$us + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359$us + 11 >> 0]; //@line 1705
   HEAP8[$$14160$us + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359$us + 12 >> 0]; //@line 1711
   HEAP8[$$14160$us + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359$us + 13 >> 0]; //@line 1717
   HEAP8[$$14160$us + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359$us + 14 >> 0]; //@line 1723
   HEAP8[$$14160$us + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359$us + 15 >> 0]; //@line 1729
   _mbedtls_internal_aes_encrypt($0, $$14160$us, $$14160$us) | 0; //@line 1730
   dest = $3; //@line 1731
   src = $$14160$us; //@line 1731
   stop = dest + 16 | 0; //@line 1731
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1731
    dest = dest + 1 | 0; //@line 1731
    src = src + 1 | 0; //@line 1731
   } while ((dest | 0) < (stop | 0));
   $$14658$us = $$14658$us + -16 | 0; //@line 1734
   if (!$$14658$us) {
    $$044 = 0; //@line 1737
    break;
   } else {
    $$14160$us = $$14160$us + 16 | 0; //@line 1740
    $$14359$us = $$14359$us + 16 | 0; //@line 1740
   }
  }
  STACKTOP = sp; //@line 1743
  return $$044 | 0; //@line 1743
 } else {
  $$14160 = $5; //@line 1745
  $$14359 = $4; //@line 1745
  $$14658 = $2; //@line 1745
  while (1) {
   HEAP8[$$14160 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359 >> 0]; //@line 1750
   HEAP8[$$14160 + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359 + 1 >> 0]; //@line 1756
   HEAP8[$$14160 + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359 + 2 >> 0]; //@line 1762
   HEAP8[$$14160 + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359 + 3 >> 0]; //@line 1768
   HEAP8[$$14160 + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359 + 4 >> 0]; //@line 1774
   HEAP8[$$14160 + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359 + 5 >> 0]; //@line 1780
   HEAP8[$$14160 + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359 + 6 >> 0]; //@line 1786
   HEAP8[$$14160 + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359 + 7 >> 0]; //@line 1792
   HEAP8[$$14160 + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359 + 8 >> 0]; //@line 1798
   HEAP8[$$14160 + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359 + 9 >> 0]; //@line 1804
   HEAP8[$$14160 + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359 + 10 >> 0]; //@line 1810
   HEAP8[$$14160 + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359 + 11 >> 0]; //@line 1816
   HEAP8[$$14160 + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359 + 12 >> 0]; //@line 1822
   HEAP8[$$14160 + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359 + 13 >> 0]; //@line 1828
   HEAP8[$$14160 + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359 + 14 >> 0]; //@line 1834
   HEAP8[$$14160 + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359 + 15 >> 0]; //@line 1840
   _mbedtls_internal_aes_decrypt($0, $$14160, $$14160) | 0; //@line 1841
   dest = $3; //@line 1842
   src = $$14160; //@line 1842
   stop = dest + 16 | 0; //@line 1842
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1842
    dest = dest + 1 | 0; //@line 1842
    src = src + 1 | 0; //@line 1842
   } while ((dest | 0) < (stop | 0));
   $$14658 = $$14658 + -16 | 0; //@line 1845
   if (!$$14658) {
    $$044 = 0; //@line 1848
    break;
   } else {
    $$14160 = $$14160 + 16 | 0; //@line 1851
    $$14359 = $$14359 + 16 | 0; //@line 1851
   }
  }
  STACKTOP = sp; //@line 1854
  return $$044 | 0; //@line 1854
 }
 return 0; //@line 1856
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_131($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27163
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27165
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27167
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27169
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27171
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27177
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27179
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27181
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27183
 $$pre$i$i = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 27184
 HEAP32[HEAP32[$0 + 24 >> 2] >> 2] = $$pre$i$i; //@line 27186
 if ($$pre$i$i | 0) {
  $24 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 27190
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 27191
  FUNCTION_TABLE_vi[$24 & 1023]($14); //@line 27192
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 183; //@line 27195
   $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 27196
   HEAP32[$25 >> 2] = $2; //@line 27197
   $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 27198
   HEAP32[$26 >> 2] = $4; //@line 27199
   $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 27200
   HEAP32[$27 >> 2] = $6; //@line 27201
   $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 27202
   HEAP32[$28 >> 2] = $8; //@line 27203
   $29 = $ReallocAsyncCtx3 + 20 | 0; //@line 27204
   HEAP32[$29 >> 2] = $14; //@line 27205
   $30 = $ReallocAsyncCtx3 + 24 | 0; //@line 27206
   HEAP32[$30 >> 2] = $16; //@line 27207
   $31 = $ReallocAsyncCtx3 + 28 | 0; //@line 27208
   HEAP32[$31 >> 2] = $18; //@line 27209
   $32 = $ReallocAsyncCtx3 + 32 | 0; //@line 27210
   HEAP32[$32 >> 2] = $20; //@line 27211
   sp = STACKTOP; //@line 27212
   return;
  }
  ___async_unwind = 0; //@line 27215
  HEAP32[$ReallocAsyncCtx3 >> 2] = 183; //@line 27216
  $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 27217
  HEAP32[$25 >> 2] = $2; //@line 27218
  $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 27219
  HEAP32[$26 >> 2] = $4; //@line 27220
  $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 27221
  HEAP32[$27 >> 2] = $6; //@line 27222
  $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 27223
  HEAP32[$28 >> 2] = $8; //@line 27224
  $29 = $ReallocAsyncCtx3 + 20 | 0; //@line 27225
  HEAP32[$29 >> 2] = $14; //@line 27226
  $30 = $ReallocAsyncCtx3 + 24 | 0; //@line 27227
  HEAP32[$30 >> 2] = $16; //@line 27228
  $31 = $ReallocAsyncCtx3 + 28 | 0; //@line 27229
  HEAP32[$31 >> 2] = $18; //@line 27230
  $32 = $ReallocAsyncCtx3 + 32 | 0; //@line 27231
  HEAP32[$32 >> 2] = $20; //@line 27232
  sp = STACKTOP; //@line 27233
  return;
 }
 $33 = $16 + 12 | 0; //@line 27236
 HEAP32[$16 >> 2] = 6; //@line 27237
 HEAP32[$16 + 4 >> 2] = 0; //@line 27239
 HEAP32[$16 + 8 >> 2] = $2; //@line 27241
 HEAP32[$33 >> 2] = 820; //@line 27242
 $34 = $2 + 2400 | 0; //@line 27243
 if (($34 | 0) == ($16 | 0)) {
  $63 = HEAP32[207] | 0; //@line 27247
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 27248
  FUNCTION_TABLE_vi[$63 & 1023]($16); //@line 27249
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 186; //@line 27252
   $64 = $ReallocAsyncCtx6 + 4 | 0; //@line 27253
   HEAP32[$64 >> 2] = $2; //@line 27254
   $65 = $ReallocAsyncCtx6 + 8 | 0; //@line 27255
   HEAP32[$65 >> 2] = $4; //@line 27256
   $66 = $ReallocAsyncCtx6 + 12 | 0; //@line 27257
   HEAP32[$66 >> 2] = $6; //@line 27258
   $67 = $ReallocAsyncCtx6 + 16 | 0; //@line 27259
   HEAP32[$67 >> 2] = $8; //@line 27260
   $68 = $ReallocAsyncCtx6 + 20 | 0; //@line 27261
   HEAP32[$68 >> 2] = $16; //@line 27262
   $69 = $ReallocAsyncCtx6 + 24 | 0; //@line 27263
   HEAP32[$69 >> 2] = $18; //@line 27264
   $70 = $ReallocAsyncCtx6 + 28 | 0; //@line 27265
   HEAP32[$70 >> 2] = $20; //@line 27266
   sp = STACKTOP; //@line 27267
   return;
  }
  ___async_unwind = 0; //@line 27270
  HEAP32[$ReallocAsyncCtx6 >> 2] = 186; //@line 27271
  $64 = $ReallocAsyncCtx6 + 4 | 0; //@line 27272
  HEAP32[$64 >> 2] = $2; //@line 27273
  $65 = $ReallocAsyncCtx6 + 8 | 0; //@line 27274
  HEAP32[$65 >> 2] = $4; //@line 27275
  $66 = $ReallocAsyncCtx6 + 12 | 0; //@line 27276
  HEAP32[$66 >> 2] = $6; //@line 27277
  $67 = $ReallocAsyncCtx6 + 16 | 0; //@line 27278
  HEAP32[$67 >> 2] = $8; //@line 27279
  $68 = $ReallocAsyncCtx6 + 20 | 0; //@line 27280
  HEAP32[$68 >> 2] = $16; //@line 27281
  $69 = $ReallocAsyncCtx6 + 24 | 0; //@line 27282
  HEAP32[$69 >> 2] = $18; //@line 27283
  $70 = $ReallocAsyncCtx6 + 28 | 0; //@line 27284
  HEAP32[$70 >> 2] = $20; //@line 27285
  sp = STACKTOP; //@line 27286
  return;
 }
 $36 = $2 + 2412 | 0; //@line 27289
 $37 = HEAP32[$36 >> 2] | 0; //@line 27290
 if (!$37) {
  $52 = HEAP32[206] | 0; //@line 27294
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 27295
  FUNCTION_TABLE_vii[$52 & 15]($34, $16); //@line 27296
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 185; //@line 27299
   $53 = $ReallocAsyncCtx5 + 4 | 0; //@line 27300
   HEAP32[$53 >> 2] = $2; //@line 27301
   $54 = $ReallocAsyncCtx5 + 8 | 0; //@line 27302
   HEAP32[$54 >> 2] = $4; //@line 27303
   $55 = $ReallocAsyncCtx5 + 12 | 0; //@line 27304
   HEAP32[$55 >> 2] = $6; //@line 27305
   $56 = $ReallocAsyncCtx5 + 16 | 0; //@line 27306
   HEAP32[$56 >> 2] = $8; //@line 27307
   $57 = $ReallocAsyncCtx5 + 20 | 0; //@line 27308
   HEAP32[$57 >> 2] = $33; //@line 27309
   $58 = $ReallocAsyncCtx5 + 24 | 0; //@line 27310
   HEAP32[$58 >> 2] = $36; //@line 27311
   $59 = $ReallocAsyncCtx5 + 28 | 0; //@line 27312
   HEAP32[$59 >> 2] = $16; //@line 27313
   $60 = $ReallocAsyncCtx5 + 32 | 0; //@line 27314
   HEAP32[$60 >> 2] = $18; //@line 27315
   $61 = $ReallocAsyncCtx5 + 36 | 0; //@line 27316
   HEAP32[$61 >> 2] = $20; //@line 27317
   sp = STACKTOP; //@line 27318
   return;
  }
  ___async_unwind = 0; //@line 27321
  HEAP32[$ReallocAsyncCtx5 >> 2] = 185; //@line 27322
  $53 = $ReallocAsyncCtx5 + 4 | 0; //@line 27323
  HEAP32[$53 >> 2] = $2; //@line 27324
  $54 = $ReallocAsyncCtx5 + 8 | 0; //@line 27325
  HEAP32[$54 >> 2] = $4; //@line 27326
  $55 = $ReallocAsyncCtx5 + 12 | 0; //@line 27327
  HEAP32[$55 >> 2] = $6; //@line 27328
  $56 = $ReallocAsyncCtx5 + 16 | 0; //@line 27329
  HEAP32[$56 >> 2] = $8; //@line 27330
  $57 = $ReallocAsyncCtx5 + 20 | 0; //@line 27331
  HEAP32[$57 >> 2] = $33; //@line 27332
  $58 = $ReallocAsyncCtx5 + 24 | 0; //@line 27333
  HEAP32[$58 >> 2] = $36; //@line 27334
  $59 = $ReallocAsyncCtx5 + 28 | 0; //@line 27335
  HEAP32[$59 >> 2] = $16; //@line 27336
  $60 = $ReallocAsyncCtx5 + 32 | 0; //@line 27337
  HEAP32[$60 >> 2] = $18; //@line 27338
  $61 = $ReallocAsyncCtx5 + 36 | 0; //@line 27339
  HEAP32[$61 >> 2] = $20; //@line 27340
  sp = STACKTOP; //@line 27341
  return;
 } else {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 27345
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 27346
  FUNCTION_TABLE_vi[$40 & 1023]($34); //@line 27347
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 184; //@line 27350
   $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 27351
   HEAP32[$41 >> 2] = $2; //@line 27352
   $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 27353
   HEAP32[$42 >> 2] = $4; //@line 27354
   $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 27355
   HEAP32[$43 >> 2] = $6; //@line 27356
   $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 27357
   HEAP32[$44 >> 2] = $8; //@line 27358
   $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 27359
   HEAP32[$45 >> 2] = $36; //@line 27360
   $46 = $ReallocAsyncCtx4 + 24 | 0; //@line 27361
   HEAP32[$46 >> 2] = $33; //@line 27362
   $47 = $ReallocAsyncCtx4 + 28 | 0; //@line 27363
   HEAP32[$47 >> 2] = $34; //@line 27364
   $48 = $ReallocAsyncCtx4 + 32 | 0; //@line 27365
   HEAP32[$48 >> 2] = $16; //@line 27366
   $49 = $ReallocAsyncCtx4 + 36 | 0; //@line 27367
   HEAP32[$49 >> 2] = $18; //@line 27368
   $50 = $ReallocAsyncCtx4 + 40 | 0; //@line 27369
   HEAP32[$50 >> 2] = $20; //@line 27370
   sp = STACKTOP; //@line 27371
   return;
  }
  ___async_unwind = 0; //@line 27374
  HEAP32[$ReallocAsyncCtx4 >> 2] = 184; //@line 27375
  $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 27376
  HEAP32[$41 >> 2] = $2; //@line 27377
  $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 27378
  HEAP32[$42 >> 2] = $4; //@line 27379
  $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 27380
  HEAP32[$43 >> 2] = $6; //@line 27381
  $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 27382
  HEAP32[$44 >> 2] = $8; //@line 27383
  $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 27384
  HEAP32[$45 >> 2] = $36; //@line 27385
  $46 = $ReallocAsyncCtx4 + 24 | 0; //@line 27386
  HEAP32[$46 >> 2] = $33; //@line 27387
  $47 = $ReallocAsyncCtx4 + 28 | 0; //@line 27388
  HEAP32[$47 >> 2] = $34; //@line 27389
  $48 = $ReallocAsyncCtx4 + 32 | 0; //@line 27390
  HEAP32[$48 >> 2] = $16; //@line 27391
  $49 = $ReallocAsyncCtx4 + 36 | 0; //@line 27392
  HEAP32[$49 >> 2] = $18; //@line 27393
  $50 = $ReallocAsyncCtx4 + 40 | 0; //@line 27394
  HEAP32[$50 >> 2] = $20; //@line 27395
  sp = STACKTOP; //@line 27396
  return;
 }
}
function _initialize($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$037 = 0, $1 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $109 = 0, $115 = 0, $116 = 0, $117 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $140 = 0, $142 = 0, $148 = 0, $149 = 0, $150 = 0, $159 = 0, $160 = 0, $161 = 0, $163 = 0, $167 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $18 = 0, $25 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $52 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $70 = 0, $73 = 0, $77 = 0, $78 = 0, $85 = 0, $86 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5262
 $1 = $0 + 4 | 0; //@line 5263
 if (HEAP8[(HEAP32[$1 >> 2] | 0) + 56 >> 0] | 0) {
  return;
 }
 $7 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0; //@line 5272
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5273
 FUNCTION_TABLE_v[$7 & 15](); //@line 5274
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 597; //@line 5277
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5279
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 5281
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 5283
  sp = STACKTOP; //@line 5284
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5287
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 5290
 $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5291
 $14 = FUNCTION_TABLE_i[$13 & 7]() | 0; //@line 5292
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 598; //@line 5295
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 5297
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 5299
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 5301
  sp = STACKTOP; //@line 5302
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5305
 $18 = HEAP32[$14 >> 2] | 0; //@line 5306
 do {
  if (!$18) {
   $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5310
   _mbed_assert_internal(14489, 14491, 41); //@line 5311
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 599; //@line 5314
    HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 5316
    HEAP32[$AsyncCtx20 + 8 >> 2] = $1; //@line 5318
    HEAP32[$AsyncCtx20 + 12 >> 2] = $0; //@line 5320
    HEAP32[$AsyncCtx20 + 16 >> 2] = $14; //@line 5322
    sp = STACKTOP; //@line 5323
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 5326
    $$0 = 1e6; //@line 5327
    break;
   }
  } else {
   $$0 = $18; //@line 5331
  }
 } while (0);
 $25 = HEAP32[$14 + 4 >> 2] | 0; //@line 5335
 do {
  if (($25 + -4 | 0) >>> 0 > 28) {
   $AsyncCtx16 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5340
   _mbed_assert_internal(14489, 14491, 47); //@line 5341
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 600; //@line 5344
    HEAP32[$AsyncCtx16 + 4 >> 2] = $$0; //@line 5346
    HEAP32[$AsyncCtx16 + 8 >> 2] = $1; //@line 5348
    HEAP32[$AsyncCtx16 + 12 >> 2] = $0; //@line 5350
    HEAP32[$AsyncCtx16 + 16 >> 2] = $0; //@line 5352
    sp = STACKTOP; //@line 5353
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 5356
    $$037 = 32; //@line 5357
    break;
   }
  } else {
   $$037 = $25; //@line 5361
  }
 } while (0);
 $32 = 7 << $$037 + -4; //@line 5365
 $33 = ___muldi3($32 | 0, 0, 1e6, 0) | 0; //@line 5366
 $34 = tempRet0; //@line 5367
 $35 = _i64Add($$0 | 0, 0, -1, -1) | 0; //@line 5368
 $37 = _i64Add($35 | 0, tempRet0 | 0, $33 | 0, $34 | 0) | 0; //@line 5370
 $39 = ___udivdi3($37 | 0, tempRet0 | 0, $$0 | 0, 0) | 0; //@line 5372
 $40 = tempRet0; //@line 5373
 $41 = HEAP32[$1 >> 2] | 0; //@line 5374
 HEAP32[$41 >> 2] = 0; //@line 5375
 HEAP32[$41 + 4 >> 2] = 0; //@line 5377
 $45 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5380
 $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 5381
 $46 = FUNCTION_TABLE_i[$45 & 7]() | 0; //@line 5382
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 601; //@line 5385
  HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 5387
  HEAP32[$AsyncCtx6 + 8 >> 2] = $$0; //@line 5389
  HEAP32[$AsyncCtx6 + 12 >> 2] = $$037; //@line 5391
  HEAP32[$AsyncCtx6 + 16 >> 2] = $32; //@line 5393
  $52 = $AsyncCtx6 + 24 | 0; //@line 5395
  HEAP32[$52 >> 2] = $39; //@line 5397
  HEAP32[$52 + 4 >> 2] = $40; //@line 5400
  HEAP32[$AsyncCtx6 + 32 >> 2] = $0; //@line 5402
  HEAP32[$AsyncCtx6 + 36 >> 2] = $0; //@line 5404
  sp = STACKTOP; //@line 5405
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 5408
 $58 = HEAP32[$1 >> 2] | 0; //@line 5409
 $59 = $58 + 32 | 0; //@line 5410
 HEAP32[$59 >> 2] = $46; //@line 5411
 $60 = $58 + 40 | 0; //@line 5412
 $61 = $60; //@line 5413
 HEAP32[$61 >> 2] = 0; //@line 5415
 HEAP32[$61 + 4 >> 2] = 0; //@line 5418
 $65 = $58 + 8 | 0; //@line 5419
 HEAP32[$65 >> 2] = $$0; //@line 5420
 $66 = _bitshift64Shl(1, 0, $$037 | 0) | 0; //@line 5421
 $68 = _i64Add($66 | 0, tempRet0 | 0, -1, 0) | 0; //@line 5423
 $70 = $58 + 12 | 0; //@line 5425
 HEAP32[$70 >> 2] = $68; //@line 5426
 HEAP32[$58 + 16 >> 2] = $32; //@line 5428
 $73 = $58 + 24 | 0; //@line 5430
 HEAP32[$73 >> 2] = $39; //@line 5432
 HEAP32[$73 + 4 >> 2] = $40; //@line 5435
 $77 = $58 + 48 | 0; //@line 5436
 $78 = $77; //@line 5437
 HEAP32[$78 >> 2] = 0; //@line 5439
 HEAP32[$78 + 4 >> 2] = 0; //@line 5442
 HEAP8[$58 + 56 >> 0] = 1; //@line 5444
 $85 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5447
 $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5448
 $86 = FUNCTION_TABLE_i[$85 & 7]() | 0; //@line 5449
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 602; //@line 5452
  HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 5454
  HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 5456
  HEAP32[$AsyncCtx9 + 12 >> 2] = $59; //@line 5458
  HEAP32[$AsyncCtx9 + 16 >> 2] = $70; //@line 5460
  HEAP32[$AsyncCtx9 + 20 >> 2] = $65; //@line 5462
  HEAP32[$AsyncCtx9 + 24 >> 2] = $60; //@line 5464
  HEAP32[$AsyncCtx9 + 28 >> 2] = $77; //@line 5466
  sp = STACKTOP; //@line 5467
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 5470
 if (($86 | 0) != (HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] | 0)) {
  $101 = $86 - (HEAP32[$59 >> 2] | 0) & HEAP32[$70 >> 2]; //@line 5479
  HEAP32[$59 >> 2] = $86; //@line 5480
  $102 = HEAP32[$65 >> 2] | 0; //@line 5481
  L30 : do {
   if (($102 | 0) < 1e6) {
    switch ($102 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 22; //@line 5490
      break L30;
     }
    }
    $103 = ___muldi3($101 | 0, 0, 1e6, 0) | 0; //@line 5494
    $105 = _bitshift64Lshr($103 | 0, tempRet0 | 0, 15) | 0; //@line 5496
    $106 = tempRet0; //@line 5497
    $109 = $60; //@line 5500
    $115 = _i64Add(HEAP32[$109 >> 2] | 0, HEAP32[$109 + 4 >> 2] | 0, $101 * 1e6 & 32704 | 0, 0) | 0; //@line 5506
    $116 = tempRet0; //@line 5507
    $117 = $60; //@line 5508
    HEAP32[$117 >> 2] = $115; //@line 5510
    HEAP32[$117 + 4 >> 2] = $116; //@line 5513
    if ($116 >>> 0 < 0 | ($116 | 0) == 0 & $115 >>> 0 < 32768) {
     $173 = $105; //@line 5520
     $174 = $106; //@line 5520
    } else {
     $126 = _i64Add($105 | 0, $106 | 0, 1, 0) | 0; //@line 5522
     $127 = tempRet0; //@line 5523
     $128 = _i64Add($115 | 0, $116 | 0, -32768, -1) | 0; //@line 5524
     $130 = $60; //@line 5526
     HEAP32[$130 >> 2] = $128; //@line 5528
     HEAP32[$130 + 4 >> 2] = tempRet0; //@line 5531
     $173 = $126; //@line 5532
     $174 = $127; //@line 5532
    }
   } else {
    switch ($102 | 0) {
    case 1e6:
     {
      $173 = $101; //@line 5537
      $174 = 0; //@line 5537
      break;
     }
    default:
     {
      label = 22; //@line 5541
     }
    }
   }
  } while (0);
  if ((label | 0) == 22) {
   $134 = ___muldi3($101 | 0, 0, 1e6, 0) | 0; //@line 5547
   $135 = tempRet0; //@line 5548
   $136 = ___udivdi3($134 | 0, $135 | 0, $102 | 0, 0) | 0; //@line 5549
   $137 = tempRet0; //@line 5550
   $138 = ___muldi3($136 | 0, $137 | 0, $102 | 0, 0) | 0; //@line 5551
   $140 = _i64Subtract($134 | 0, $135 | 0, $138 | 0, tempRet0 | 0) | 0; //@line 5553
   $142 = $60; //@line 5555
   $148 = _i64Add($140 | 0, tempRet0 | 0, HEAP32[$142 >> 2] | 0, HEAP32[$142 + 4 >> 2] | 0) | 0; //@line 5561
   $149 = tempRet0; //@line 5562
   $150 = $60; //@line 5563
   HEAP32[$150 >> 2] = $148; //@line 5565
   HEAP32[$150 + 4 >> 2] = $149; //@line 5568
   if ($149 >>> 0 < 0 | ($149 | 0) == 0 & $148 >>> 0 < $102 >>> 0) {
    $173 = $136; //@line 5575
    $174 = $137; //@line 5575
   } else {
    $159 = _i64Add($136 | 0, $137 | 0, 1, 0) | 0; //@line 5577
    $160 = tempRet0; //@line 5578
    $161 = _i64Subtract($148 | 0, $149 | 0, $102 | 0, 0) | 0; //@line 5579
    $163 = $60; //@line 5581
    HEAP32[$163 >> 2] = $161; //@line 5583
    HEAP32[$163 + 4 >> 2] = tempRet0; //@line 5586
    $173 = $159; //@line 5587
    $174 = $160; //@line 5587
   }
  }
  $167 = $77; //@line 5590
  $175 = _i64Add(HEAP32[$167 >> 2] | 0, HEAP32[$167 + 4 >> 2] | 0, $173 | 0, $174 | 0) | 0; //@line 5596
  $177 = $77; //@line 5598
  HEAP32[$177 >> 2] = $175; //@line 5600
  HEAP32[$177 + 4 >> 2] = tempRet0; //@line 5603
 }
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5605
 _schedule_interrupt($0); //@line 5606
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 603; //@line 5609
  sp = STACKTOP; //@line 5610
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 5613
 return;
}
function _schedule_interrupt($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $1 = 0, $10 = 0, $104 = 0, $107 = 0, $109 = 0, $11 = 0, $112 = 0, $113 = 0, $115 = 0, $118 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $144 = 0, $146 = 0, $148 = 0, $151 = 0, $153 = 0, $160 = 0, $161 = 0, $164 = 0, $166 = 0, $168 = 0, $174 = 0, $175 = 0, $179 = 0, $187 = 0, $19 = 0, $195 = 0, $198 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $35 = 0, $36 = 0, $37 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $69 = 0, $70 = 0, $71 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $88 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5630
 $1 = $0 + 4 | 0; //@line 5631
 $2 = HEAP32[$1 >> 2] | 0; //@line 5632
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5635
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5636
 $6 = FUNCTION_TABLE_i[$5 & 7]() | 0; //@line 5637
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 604; //@line 5640
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5642
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 5644
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 5646
  sp = STACKTOP; //@line 5647
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5650
 $10 = HEAP32[$1 >> 2] | 0; //@line 5651
 $11 = $10 + 32 | 0; //@line 5652
 if (($6 | 0) != (HEAP32[$11 >> 2] | 0)) {
  $14 = $2 + 32 | 0; //@line 5656
  $19 = $6 - (HEAP32[$14 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 5661
  HEAP32[$14 >> 2] = $6; //@line 5662
  $21 = HEAP32[$2 + 8 >> 2] | 0; //@line 5664
  L6 : do {
   if (($21 | 0) < 1e6) {
    switch ($21 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 7; //@line 5673
      break L6;
     }
    }
    $22 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5677
    $24 = _bitshift64Lshr($22 | 0, tempRet0 | 0, 15) | 0; //@line 5679
    $25 = tempRet0; //@line 5680
    $28 = $2 + 40 | 0; //@line 5683
    $29 = $28; //@line 5684
    $35 = _i64Add(HEAP32[$29 >> 2] | 0, HEAP32[$29 + 4 >> 2] | 0, $19 * 1e6 & 32704 | 0, 0) | 0; //@line 5690
    $36 = tempRet0; //@line 5691
    $37 = $28; //@line 5692
    HEAP32[$37 >> 2] = $35; //@line 5694
    HEAP32[$37 + 4 >> 2] = $36; //@line 5697
    if ($36 >>> 0 < 0 | ($36 | 0) == 0 & $35 >>> 0 < 32768) {
     $95 = $24; //@line 5704
     $96 = $25; //@line 5704
    } else {
     $46 = _i64Add($24 | 0, $25 | 0, 1, 0) | 0; //@line 5706
     $47 = tempRet0; //@line 5707
     $48 = _i64Add($35 | 0, $36 | 0, -32768, -1) | 0; //@line 5708
     $50 = $28; //@line 5710
     HEAP32[$50 >> 2] = $48; //@line 5712
     HEAP32[$50 + 4 >> 2] = tempRet0; //@line 5715
     $95 = $46; //@line 5716
     $96 = $47; //@line 5716
    }
   } else {
    switch ($21 | 0) {
    case 1e6:
     {
      $95 = $19; //@line 5721
      $96 = 0; //@line 5721
      break;
     }
    default:
     {
      label = 7; //@line 5725
     }
    }
   }
  } while (0);
  if ((label | 0) == 7) {
   $54 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5731
   $55 = tempRet0; //@line 5732
   $56 = ___udivdi3($54 | 0, $55 | 0, $21 | 0, 0) | 0; //@line 5733
   $57 = tempRet0; //@line 5734
   $58 = ___muldi3($56 | 0, $57 | 0, $21 | 0, 0) | 0; //@line 5735
   $60 = _i64Subtract($54 | 0, $55 | 0, $58 | 0, tempRet0 | 0) | 0; //@line 5737
   $62 = $2 + 40 | 0; //@line 5739
   $63 = $62; //@line 5740
   $69 = _i64Add($60 | 0, tempRet0 | 0, HEAP32[$63 >> 2] | 0, HEAP32[$63 + 4 >> 2] | 0) | 0; //@line 5746
   $70 = tempRet0; //@line 5747
   $71 = $62; //@line 5748
   HEAP32[$71 >> 2] = $69; //@line 5750
   HEAP32[$71 + 4 >> 2] = $70; //@line 5753
   if ($70 >>> 0 < 0 | ($70 | 0) == 0 & $69 >>> 0 < $21 >>> 0) {
    $95 = $56; //@line 5760
    $96 = $57; //@line 5760
   } else {
    $80 = _i64Add($56 | 0, $57 | 0, 1, 0) | 0; //@line 5762
    $81 = tempRet0; //@line 5763
    $82 = _i64Subtract($69 | 0, $70 | 0, $21 | 0, 0) | 0; //@line 5764
    $84 = $62; //@line 5766
    HEAP32[$84 >> 2] = $82; //@line 5768
    HEAP32[$84 + 4 >> 2] = tempRet0; //@line 5771
    $95 = $80; //@line 5772
    $96 = $81; //@line 5772
   }
  }
  $88 = $2 + 48 | 0; //@line 5775
  $89 = $88; //@line 5776
  $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 5782
  $99 = $88; //@line 5784
  HEAP32[$99 >> 2] = $97; //@line 5786
  HEAP32[$99 + 4 >> 2] = tempRet0; //@line 5789
 }
 $104 = HEAP32[$10 + 4 >> 2] | 0; //@line 5792
 if (!$104) {
  $195 = (HEAP32[$2 + 16 >> 2] | 0) + (HEAP32[$2 + 32 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 5802
  $198 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 5805
  $AsyncCtx22 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5806
  FUNCTION_TABLE_vi[$198 & 1023]($195); //@line 5807
  if (___async) {
   HEAP32[$AsyncCtx22 >> 2] = 610; //@line 5810
   sp = STACKTOP; //@line 5811
   return;
  } else {
   _emscripten_free_async_context($AsyncCtx22 | 0); //@line 5814
   return;
  }
 }
 $107 = $10 + 48 | 0; //@line 5819
 $109 = HEAP32[$107 >> 2] | 0; //@line 5821
 $112 = HEAP32[$107 + 4 >> 2] | 0; //@line 5824
 $113 = $104; //@line 5825
 $115 = HEAP32[$113 >> 2] | 0; //@line 5827
 $118 = HEAP32[$113 + 4 >> 2] | 0; //@line 5830
 if (!($118 >>> 0 > $112 >>> 0 | ($118 | 0) == ($112 | 0) & $115 >>> 0 > $109 >>> 0)) {
  $126 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 5839
  $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5840
  FUNCTION_TABLE_v[$126 & 15](); //@line 5841
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 605; //@line 5844
   sp = STACKTOP; //@line 5845
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5848
  return;
 }
 $127 = _i64Subtract($115 | 0, $118 | 0, $109 | 0, $112 | 0) | 0; //@line 5851
 $128 = tempRet0; //@line 5852
 $130 = HEAP32[$10 + 16 >> 2] | 0; //@line 5854
 $132 = $10 + 24 | 0; //@line 5856
 $137 = HEAP32[$132 + 4 >> 2] | 0; //@line 5861
 L29 : do {
  if ($128 >>> 0 > $137 >>> 0 | (($128 | 0) == ($137 | 0) ? $127 >>> 0 > (HEAP32[$132 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $130; //@line 5869
  } else {
   $144 = HEAP32[$10 + 8 >> 2] | 0; //@line 5872
   L31 : do {
    if (($144 | 0) < 1e6) {
     switch ($144 | 0) {
     case 32768:
      {
       break;
      }
     default:
      {
       break L31;
      }
     }
     $146 = _bitshift64Shl($127 | 0, $128 | 0, 15) | 0; //@line 5884
     $148 = ___udivdi3($146 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 5886
     $$0$i = $130 >>> 0 < $148 >>> 0 ? $130 : $148; //@line 5890
     break L29;
    } else {
     switch ($144 | 0) {
     case 1e6:
      {
       break;
      }
     default:
      {
       break L31;
      }
     }
     $$0$i = $130 >>> 0 < $127 >>> 0 ? $130 : $127; //@line 5903
     break L29;
    }
   } while (0);
   $151 = ___muldi3($127 | 0, $128 | 0, $144 | 0, 0) | 0; //@line 5907
   $153 = ___udivdi3($151 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 5909
   $$0$i = $130 >>> 0 < $153 >>> 0 ? $130 : $153; //@line 5913
  }
 } while (0);
 $160 = (HEAP32[$11 >> 2] | 0) + $$0$i & HEAP32[$10 + 12 >> 2]; //@line 5920
 $161 = $2 + 32 | 0; //@line 5921
 $164 = HEAP32[$0 >> 2] | 0; //@line 5924
 if (($160 | 0) == (HEAP32[$161 >> 2] | 0)) {
  $166 = HEAP32[$164 + 20 >> 2] | 0; //@line 5927
  $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5928
  FUNCTION_TABLE_v[$166 & 15](); //@line 5929
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 606; //@line 5932
   sp = STACKTOP; //@line 5933
   return;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5936
  return;
 }
 $168 = HEAP32[$164 + 16 >> 2] | 0; //@line 5940
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5941
 FUNCTION_TABLE_vi[$168 & 1023]($160); //@line 5942
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 607; //@line 5945
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 5947
  HEAP32[$AsyncCtx11 + 8 >> 2] = $161; //@line 5949
  HEAP32[$AsyncCtx11 + 12 >> 2] = $160; //@line 5951
  sp = STACKTOP; //@line 5952
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5955
 $174 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5958
 $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5959
 $175 = FUNCTION_TABLE_i[$174 & 7]() | 0; //@line 5960
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 608; //@line 5963
  HEAP32[$AsyncCtx14 + 4 >> 2] = $161; //@line 5965
  HEAP32[$AsyncCtx14 + 8 >> 2] = $160; //@line 5967
  HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 5969
  sp = STACKTOP; //@line 5970
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 5973
 $179 = HEAP32[$161 >> 2] | 0; //@line 5974
 if ($160 >>> 0 > $179 >>> 0) {
  if (!($175 >>> 0 >= $160 >>> 0 | $175 >>> 0 < $179 >>> 0)) {
   return;
  }
 } else {
  if (!($175 >>> 0 >= $160 >>> 0 & $175 >>> 0 < $179 >>> 0)) {
   return;
  }
 }
 $187 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 5993
 $AsyncCtx18 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5994
 FUNCTION_TABLE_v[$187 & 15](); //@line 5995
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 609; //@line 5998
  sp = STACKTOP; //@line 5999
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 6002
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $15 = 0, $17 = 0, $22 = 0, $23 = 0, $26 = 0, $29 = 0, $40 = 0, $41 = 0, $45 = 0, $47 = 0, $5 = 0, $52 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $69 = 0, $71 = 0, $76 = 0, $77 = 0, $80 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx2 = 0, $AsyncCtx22 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 7763
 STACKTOP = STACKTOP + 32 | 0; //@line 7764
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 7764
 $vararg_buffer = sp; //@line 7765
 $1 = sp + 16 | 0; //@line 7766
 $5 = (HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 4 >> 2] | 0) == 0; //@line 7770
 $6 = __ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0; //@line 7771
 if ($5) {
  HEAP32[$0 + 2536 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 7776
  $10 = $0 + 2496 | 0; //@line 7777
  $11 = HEAP32[$10 >> 2] | 0; //@line 7778
  do {
   if ($11 | 0) {
    $15 = HEAP32[$0 + 3136 >> 2] | 0; //@line 7784
    $17 = HEAP32[$11 + 4 >> 2] | 0; //@line 7786
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 7787
    FUNCTION_TABLE_vii[$17 & 15]($1, $0 + 2484 | 0); //@line 7788
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 242; //@line 7791
     HEAP32[$AsyncCtx + 4 >> 2] = $10; //@line 7793
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 7795
     HEAP32[$AsyncCtx + 12 >> 2] = $15; //@line 7797
     HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 7799
     sp = STACKTOP; //@line 7800
     STACKTOP = sp; //@line 7801
     return;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7803
    $22 = $1 + 12 | 0; //@line 7805
    HEAP32[$22 >> 2] = HEAP32[$10 >> 2]; //@line 7806
    $AsyncCtx25 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7807
    $23 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($15, $1, 2) | 0; //@line 7808
    if (___async) {
     HEAP32[$AsyncCtx25 >> 2] = 243; //@line 7811
     HEAP32[$AsyncCtx25 + 4 >> 2] = $22; //@line 7813
     HEAP32[$AsyncCtx25 + 8 >> 2] = $1; //@line 7815
     sp = STACKTOP; //@line 7816
     STACKTOP = sp; //@line 7817
     return;
    }
    _emscripten_free_async_context($AsyncCtx25 | 0); //@line 7819
    $26 = HEAP32[$22 >> 2] | 0; //@line 7820
    do {
     if ($26 | 0) {
      $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 7825
      $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7826
      FUNCTION_TABLE_vi[$29 & 1023]($1); //@line 7827
      if (___async) {
       HEAP32[$AsyncCtx2 >> 2] = 244; //@line 7830
       HEAP32[$AsyncCtx2 + 4 >> 2] = $23; //@line 7832
       HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 7834
       sp = STACKTOP; //@line 7835
       STACKTOP = sp; //@line 7836
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7838
       break;
      }
     }
    } while (0);
    if (!$23) {
     $AsyncCtx37 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7845
     _mbed_assert_internal(13121, 12408, 646); //@line 7846
     if (___async) {
      HEAP32[$AsyncCtx37 >> 2] = 245; //@line 7849
      HEAP32[$AsyncCtx37 + 4 >> 2] = $1; //@line 7851
      sp = STACKTOP; //@line 7852
      STACKTOP = sp; //@line 7853
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx37 | 0); //@line 7855
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 7861
  return;
 }
 HEAP32[$vararg_buffer >> 2] = HEAP32[$6 + 4 >> 2]; //@line 7865
 _mbed_tracef(2, 12506, 12600, $vararg_buffer); //@line 7866
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 4 >> 2] | 0) == 2) {
  $40 = $0 + 2496 | 0; //@line 7872
  $41 = HEAP32[$40 >> 2] | 0; //@line 7873
  do {
   if ($41 | 0) {
    $45 = HEAP32[$0 + 3136 >> 2] | 0; //@line 7879
    $47 = HEAP32[$41 + 4 >> 2] | 0; //@line 7881
    $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7882
    FUNCTION_TABLE_vii[$47 & 15]($vararg_buffer, $0 + 2484 | 0); //@line 7883
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 246; //@line 7886
     HEAP32[$AsyncCtx5 + 4 >> 2] = $40; //@line 7888
     HEAP32[$AsyncCtx5 + 8 >> 2] = $vararg_buffer; //@line 7890
     HEAP32[$AsyncCtx5 + 12 >> 2] = $45; //@line 7892
     HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer; //@line 7894
     sp = STACKTOP; //@line 7895
     STACKTOP = sp; //@line 7896
     return;
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7898
    $52 = $vararg_buffer + 12 | 0; //@line 7900
    HEAP32[$52 >> 2] = HEAP32[$40 >> 2]; //@line 7901
    $AsyncCtx22 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7902
    $53 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($45, $vararg_buffer, 3) | 0; //@line 7903
    if (___async) {
     HEAP32[$AsyncCtx22 >> 2] = 247; //@line 7906
     HEAP32[$AsyncCtx22 + 4 >> 2] = $52; //@line 7908
     HEAP32[$AsyncCtx22 + 8 >> 2] = $vararg_buffer; //@line 7910
     sp = STACKTOP; //@line 7911
     STACKTOP = sp; //@line 7912
     return;
    }
    _emscripten_free_async_context($AsyncCtx22 | 0); //@line 7914
    $56 = HEAP32[$52 >> 2] | 0; //@line 7915
    do {
     if ($56 | 0) {
      $59 = HEAP32[$56 + 8 >> 2] | 0; //@line 7920
      $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7921
      FUNCTION_TABLE_vi[$59 & 1023]($vararg_buffer); //@line 7922
      if (___async) {
       HEAP32[$AsyncCtx9 >> 2] = 248; //@line 7925
       HEAP32[$AsyncCtx9 + 4 >> 2] = $53; //@line 7927
       HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer; //@line 7929
       sp = STACKTOP; //@line 7930
       STACKTOP = sp; //@line 7931
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx9 | 0); //@line 7933
       break;
      }
     }
    } while (0);
    if (!$53) {
     $AsyncCtx33 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7940
     _mbed_assert_internal(13121, 12408, 646); //@line 7941
     if (___async) {
      HEAP32[$AsyncCtx33 >> 2] = 249; //@line 7944
      HEAP32[$AsyncCtx33 + 4 >> 2] = $vararg_buffer; //@line 7946
      sp = STACKTOP; //@line 7947
      STACKTOP = sp; //@line 7948
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx33 | 0); //@line 7950
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 7956
  return;
 } else {
  $64 = $0 + 2496 | 0; //@line 7958
  $65 = HEAP32[$64 >> 2] | 0; //@line 7959
  do {
   if ($65 | 0) {
    $69 = HEAP32[$0 + 3136 >> 2] | 0; //@line 7965
    $71 = HEAP32[$65 + 4 >> 2] | 0; //@line 7967
    $AsyncCtx12 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7968
    FUNCTION_TABLE_vii[$71 & 15]($vararg_buffer, $0 + 2484 | 0); //@line 7969
    if (___async) {
     HEAP32[$AsyncCtx12 >> 2] = 250; //@line 7972
     HEAP32[$AsyncCtx12 + 4 >> 2] = $64; //@line 7974
     HEAP32[$AsyncCtx12 + 8 >> 2] = $vararg_buffer; //@line 7976
     HEAP32[$AsyncCtx12 + 12 >> 2] = $69; //@line 7978
     HEAP32[$AsyncCtx12 + 16 >> 2] = $vararg_buffer; //@line 7980
     sp = STACKTOP; //@line 7981
     STACKTOP = sp; //@line 7982
     return;
    }
    _emscripten_free_async_context($AsyncCtx12 | 0); //@line 7984
    $76 = $vararg_buffer + 12 | 0; //@line 7986
    HEAP32[$76 >> 2] = HEAP32[$64 >> 2]; //@line 7987
    $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7988
    $77 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($69, $vararg_buffer, 4) | 0; //@line 7989
    if (___async) {
     HEAP32[$AsyncCtx19 >> 2] = 251; //@line 7992
     HEAP32[$AsyncCtx19 + 4 >> 2] = $76; //@line 7994
     HEAP32[$AsyncCtx19 + 8 >> 2] = $vararg_buffer; //@line 7996
     sp = STACKTOP; //@line 7997
     STACKTOP = sp; //@line 7998
     return;
    }
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 8000
    $80 = HEAP32[$76 >> 2] | 0; //@line 8001
    do {
     if ($80 | 0) {
      $83 = HEAP32[$80 + 8 >> 2] | 0; //@line 8006
      $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8007
      FUNCTION_TABLE_vi[$83 & 1023]($vararg_buffer); //@line 8008
      if (___async) {
       HEAP32[$AsyncCtx16 >> 2] = 252; //@line 8011
       HEAP32[$AsyncCtx16 + 4 >> 2] = $77; //@line 8013
       HEAP32[$AsyncCtx16 + 8 >> 2] = $vararg_buffer; //@line 8015
       sp = STACKTOP; //@line 8016
       STACKTOP = sp; //@line 8017
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx16 | 0); //@line 8019
       break;
      }
     }
    } while (0);
    if (!$77) {
     $AsyncCtx29 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8026
     _mbed_assert_internal(13121, 12408, 646); //@line 8027
     if (___async) {
      HEAP32[$AsyncCtx29 >> 2] = 253; //@line 8030
      HEAP32[$AsyncCtx29 + 4 >> 2] = $vararg_buffer; //@line 8032
      sp = STACKTOP; //@line 8033
      STACKTOP = sp; //@line 8034
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx29 | 0); //@line 8036
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 8042
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_133($0) {
 $0 = $0 | 0;
 var $$pre123 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 27593
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27595
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27597
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27599
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27601
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27603
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27605
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27607
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27609
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27611
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27613
 $$pre123 = HEAP32[$12 >> 2] | 0; //@line 27614
 if ($$pre123 | 0) {
  $23 = HEAP32[$$pre123 + 4 >> 2] | 0; //@line 27618
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 27619
  FUNCTION_TABLE_vii[$23 & 15]($14, $16); //@line 27620
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 185; //@line 27623
   $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 27624
   HEAP32[$24 >> 2] = $2; //@line 27625
   $25 = $ReallocAsyncCtx5 + 8 | 0; //@line 27626
   HEAP32[$25 >> 2] = $4; //@line 27627
   $26 = $ReallocAsyncCtx5 + 12 | 0; //@line 27628
   HEAP32[$26 >> 2] = $6; //@line 27629
   $27 = $ReallocAsyncCtx5 + 16 | 0; //@line 27630
   HEAP32[$27 >> 2] = $8; //@line 27631
   $28 = $ReallocAsyncCtx5 + 20 | 0; //@line 27632
   HEAP32[$28 >> 2] = $12; //@line 27633
   $29 = $ReallocAsyncCtx5 + 24 | 0; //@line 27634
   HEAP32[$29 >> 2] = $10; //@line 27635
   $30 = $ReallocAsyncCtx5 + 28 | 0; //@line 27636
   HEAP32[$30 >> 2] = $16; //@line 27637
   $31 = $ReallocAsyncCtx5 + 32 | 0; //@line 27638
   HEAP32[$31 >> 2] = $18; //@line 27639
   $32 = $ReallocAsyncCtx5 + 36 | 0; //@line 27640
   HEAP32[$32 >> 2] = $20; //@line 27641
   sp = STACKTOP; //@line 27642
   return;
  }
  ___async_unwind = 0; //@line 27645
  HEAP32[$ReallocAsyncCtx5 >> 2] = 185; //@line 27646
  $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 27647
  HEAP32[$24 >> 2] = $2; //@line 27648
  $25 = $ReallocAsyncCtx5 + 8 | 0; //@line 27649
  HEAP32[$25 >> 2] = $4; //@line 27650
  $26 = $ReallocAsyncCtx5 + 12 | 0; //@line 27651
  HEAP32[$26 >> 2] = $6; //@line 27652
  $27 = $ReallocAsyncCtx5 + 16 | 0; //@line 27653
  HEAP32[$27 >> 2] = $8; //@line 27654
  $28 = $ReallocAsyncCtx5 + 20 | 0; //@line 27655
  HEAP32[$28 >> 2] = $12; //@line 27656
  $29 = $ReallocAsyncCtx5 + 24 | 0; //@line 27657
  HEAP32[$29 >> 2] = $10; //@line 27658
  $30 = $ReallocAsyncCtx5 + 28 | 0; //@line 27659
  HEAP32[$30 >> 2] = $16; //@line 27660
  $31 = $ReallocAsyncCtx5 + 32 | 0; //@line 27661
  HEAP32[$31 >> 2] = $18; //@line 27662
  $32 = $ReallocAsyncCtx5 + 36 | 0; //@line 27663
  HEAP32[$32 >> 2] = $20; //@line 27664
  sp = STACKTOP; //@line 27665
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 27668
 $33 = $18 + 12 | 0; //@line 27669
 HEAP32[$18 >> 2] = 187; //@line 27670
 HEAP32[$18 + 4 >> 2] = 0; //@line 27672
 HEAP32[$18 + 8 >> 2] = $2; //@line 27674
 HEAP32[$33 >> 2] = 808; //@line 27675
 $34 = $2 + 2432 | 0; //@line 27676
 if (($34 | 0) == ($18 | 0)) {
  $61 = HEAP32[204] | 0; //@line 27680
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 27681
  FUNCTION_TABLE_vi[$61 & 1023]($18); //@line 27682
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 190; //@line 27685
   $62 = $ReallocAsyncCtx9 + 4 | 0; //@line 27686
   HEAP32[$62 >> 2] = $2; //@line 27687
   $63 = $ReallocAsyncCtx9 + 8 | 0; //@line 27688
   HEAP32[$63 >> 2] = $4; //@line 27689
   $64 = $ReallocAsyncCtx9 + 12 | 0; //@line 27690
   HEAP32[$64 >> 2] = $6; //@line 27691
   $65 = $ReallocAsyncCtx9 + 16 | 0; //@line 27692
   HEAP32[$65 >> 2] = $8; //@line 27693
   $66 = $ReallocAsyncCtx9 + 20 | 0; //@line 27694
   HEAP32[$66 >> 2] = $18; //@line 27695
   $67 = $ReallocAsyncCtx9 + 24 | 0; //@line 27696
   HEAP32[$67 >> 2] = $20; //@line 27697
   sp = STACKTOP; //@line 27698
   return;
  }
  ___async_unwind = 0; //@line 27701
  HEAP32[$ReallocAsyncCtx9 >> 2] = 190; //@line 27702
  $62 = $ReallocAsyncCtx9 + 4 | 0; //@line 27703
  HEAP32[$62 >> 2] = $2; //@line 27704
  $63 = $ReallocAsyncCtx9 + 8 | 0; //@line 27705
  HEAP32[$63 >> 2] = $4; //@line 27706
  $64 = $ReallocAsyncCtx9 + 12 | 0; //@line 27707
  HEAP32[$64 >> 2] = $6; //@line 27708
  $65 = $ReallocAsyncCtx9 + 16 | 0; //@line 27709
  HEAP32[$65 >> 2] = $8; //@line 27710
  $66 = $ReallocAsyncCtx9 + 20 | 0; //@line 27711
  HEAP32[$66 >> 2] = $18; //@line 27712
  $67 = $ReallocAsyncCtx9 + 24 | 0; //@line 27713
  HEAP32[$67 >> 2] = $20; //@line 27714
  sp = STACKTOP; //@line 27715
  return;
 }
 $36 = $2 + 2444 | 0; //@line 27718
 $37 = HEAP32[$36 >> 2] | 0; //@line 27719
 if (!$37) {
  $51 = HEAP32[203] | 0; //@line 27723
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 27724
  FUNCTION_TABLE_vii[$51 & 15]($34, $18); //@line 27725
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 189; //@line 27728
   $52 = $ReallocAsyncCtx8 + 4 | 0; //@line 27729
   HEAP32[$52 >> 2] = $2; //@line 27730
   $53 = $ReallocAsyncCtx8 + 8 | 0; //@line 27731
   HEAP32[$53 >> 2] = $4; //@line 27732
   $54 = $ReallocAsyncCtx8 + 12 | 0; //@line 27733
   HEAP32[$54 >> 2] = $6; //@line 27734
   $55 = $ReallocAsyncCtx8 + 16 | 0; //@line 27735
   HEAP32[$55 >> 2] = $8; //@line 27736
   $56 = $ReallocAsyncCtx8 + 20 | 0; //@line 27737
   HEAP32[$56 >> 2] = $33; //@line 27738
   $57 = $ReallocAsyncCtx8 + 24 | 0; //@line 27739
   HEAP32[$57 >> 2] = $36; //@line 27740
   $58 = $ReallocAsyncCtx8 + 28 | 0; //@line 27741
   HEAP32[$58 >> 2] = $18; //@line 27742
   $59 = $ReallocAsyncCtx8 + 32 | 0; //@line 27743
   HEAP32[$59 >> 2] = $20; //@line 27744
   sp = STACKTOP; //@line 27745
   return;
  }
  ___async_unwind = 0; //@line 27748
  HEAP32[$ReallocAsyncCtx8 >> 2] = 189; //@line 27749
  $52 = $ReallocAsyncCtx8 + 4 | 0; //@line 27750
  HEAP32[$52 >> 2] = $2; //@line 27751
  $53 = $ReallocAsyncCtx8 + 8 | 0; //@line 27752
  HEAP32[$53 >> 2] = $4; //@line 27753
  $54 = $ReallocAsyncCtx8 + 12 | 0; //@line 27754
  HEAP32[$54 >> 2] = $6; //@line 27755
  $55 = $ReallocAsyncCtx8 + 16 | 0; //@line 27756
  HEAP32[$55 >> 2] = $8; //@line 27757
  $56 = $ReallocAsyncCtx8 + 20 | 0; //@line 27758
  HEAP32[$56 >> 2] = $33; //@line 27759
  $57 = $ReallocAsyncCtx8 + 24 | 0; //@line 27760
  HEAP32[$57 >> 2] = $36; //@line 27761
  $58 = $ReallocAsyncCtx8 + 28 | 0; //@line 27762
  HEAP32[$58 >> 2] = $18; //@line 27763
  $59 = $ReallocAsyncCtx8 + 32 | 0; //@line 27764
  HEAP32[$59 >> 2] = $20; //@line 27765
  sp = STACKTOP; //@line 27766
  return;
 } else {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 27770
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(40) | 0; //@line 27771
  FUNCTION_TABLE_vi[$40 & 1023]($34); //@line 27772
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 188; //@line 27775
   $41 = $ReallocAsyncCtx7 + 4 | 0; //@line 27776
   HEAP32[$41 >> 2] = $2; //@line 27777
   $42 = $ReallocAsyncCtx7 + 8 | 0; //@line 27778
   HEAP32[$42 >> 2] = $4; //@line 27779
   $43 = $ReallocAsyncCtx7 + 12 | 0; //@line 27780
   HEAP32[$43 >> 2] = $6; //@line 27781
   $44 = $ReallocAsyncCtx7 + 16 | 0; //@line 27782
   HEAP32[$44 >> 2] = $8; //@line 27783
   $45 = $ReallocAsyncCtx7 + 20 | 0; //@line 27784
   HEAP32[$45 >> 2] = $36; //@line 27785
   $46 = $ReallocAsyncCtx7 + 24 | 0; //@line 27786
   HEAP32[$46 >> 2] = $33; //@line 27787
   $47 = $ReallocAsyncCtx7 + 28 | 0; //@line 27788
   HEAP32[$47 >> 2] = $34; //@line 27789
   $48 = $ReallocAsyncCtx7 + 32 | 0; //@line 27790
   HEAP32[$48 >> 2] = $18; //@line 27791
   $49 = $ReallocAsyncCtx7 + 36 | 0; //@line 27792
   HEAP32[$49 >> 2] = $20; //@line 27793
   sp = STACKTOP; //@line 27794
   return;
  }
  ___async_unwind = 0; //@line 27797
  HEAP32[$ReallocAsyncCtx7 >> 2] = 188; //@line 27798
  $41 = $ReallocAsyncCtx7 + 4 | 0; //@line 27799
  HEAP32[$41 >> 2] = $2; //@line 27800
  $42 = $ReallocAsyncCtx7 + 8 | 0; //@line 27801
  HEAP32[$42 >> 2] = $4; //@line 27802
  $43 = $ReallocAsyncCtx7 + 12 | 0; //@line 27803
  HEAP32[$43 >> 2] = $6; //@line 27804
  $44 = $ReallocAsyncCtx7 + 16 | 0; //@line 27805
  HEAP32[$44 >> 2] = $8; //@line 27806
  $45 = $ReallocAsyncCtx7 + 20 | 0; //@line 27807
  HEAP32[$45 >> 2] = $36; //@line 27808
  $46 = $ReallocAsyncCtx7 + 24 | 0; //@line 27809
  HEAP32[$46 >> 2] = $33; //@line 27810
  $47 = $ReallocAsyncCtx7 + 28 | 0; //@line 27811
  HEAP32[$47 >> 2] = $34; //@line 27812
  $48 = $ReallocAsyncCtx7 + 32 | 0; //@line 27813
  HEAP32[$48 >> 2] = $18; //@line 27814
  $49 = $ReallocAsyncCtx7 + 36 | 0; //@line 27815
  HEAP32[$49 >> 2] = $20; //@line 27816
  sp = STACKTOP; //@line 27817
  return;
 }
}
function _mbedtls_cipher_update($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0121 = 0, $$0122 = 0, $$0124 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre$phi128Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $102 = 0, $103 = 0, $105 = 0, $114 = 0, $116 = 0, $12 = 0, $120 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $33 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $44 = 0, $48 = 0, $52 = 0, $53 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $65 = 0, $83 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2742
 if (!$0) {
  $$1 = -24832; //@line 2745
  return $$1 | 0; //@line 2746
 }
 $6 = HEAP32[$0 >> 2] | 0; //@line 2748
 if (($4 | 0) == 0 | ($6 | 0) == 0) {
  $$1 = -24832; //@line 2753
  return $$1 | 0; //@line 2754
 }
 HEAP32[$4 >> 2] = 0; //@line 2756
 $10 = HEAP32[$6 + 24 >> 2] | 0; //@line 2758
 $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 2760
 switch ($12 | 0) {
 case 1:
  {
   if (($10 | 0) != ($2 | 0)) {
    $$1 = -25216; //@line 2765
    return $$1 | 0; //@line 2766
   }
   HEAP32[$4 >> 2] = $2; //@line 2768
   $17 = HEAP32[(HEAP32[$6 + 28 >> 2] | 0) + 4 >> 2] | 0; //@line 2772
   $19 = HEAP32[$0 + 60 >> 2] | 0; //@line 2774
   $21 = HEAP32[$0 + 8 >> 2] | 0; //@line 2776
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2777
   $22 = FUNCTION_TABLE_iiiii[$17 & 3]($19, $21, $1, $3) | 0; //@line 2778
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 575; //@line 2781
    sp = STACKTOP; //@line 2782
    return 0; //@line 2783
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 2785
   $$1 = $22; //@line 2786
   return $$1 | 0; //@line 2787
  }
 case 6:
  {
   HEAP32[$4 >> 2] = $2; //@line 2791
   $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 2793
   $AsyncCtx15 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2794
   $25 = _mbedtls_gcm_update($24, $2, $1, $3) | 0; //@line 2795
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 576; //@line 2798
    sp = STACKTOP; //@line 2799
    return 0; //@line 2800
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 2802
   $$1 = $25; //@line 2803
   return $$1 | 0; //@line 2804
  }
 default:
  {
   if (!$10) {
    $$1 = -25472; //@line 2810
    return $$1 | 0; //@line 2811
   }
   if (($1 | 0) == ($3 | 0)) {
    if (HEAP32[$0 + 36 >> 2] | 0) {
     $$1 = -24832; //@line 2819
     return $$1 | 0; //@line 2820
    }
    if (($2 >>> 0) % ($10 >>> 0) | 0 | 0) {
     $$1 = -24832; //@line 2825
     return $$1 | 0; //@line 2826
    }
   }
   switch ($12 | 0) {
   case 2:
    {
     $33 = $0 + 8 | 0; //@line 2831
     L21 : do {
      switch (HEAP32[$33 >> 2] | 0) {
      case 0:
       {
        $38 = $0 + 36 | 0; //@line 2839
        $39 = HEAP32[$38 >> 2] | 0; //@line 2840
        $40 = $10 - $39 | 0; //@line 2841
        if (!(HEAP32[$0 + 12 >> 2] | 0)) {
         if ($40 >>> 0 > $2 >>> 0) {
          $$pre$phiZ2D = $38; //@line 2845
          $48 = $39; //@line 2845
          label = 22; //@line 2846
          break L21;
         } else {
          label = 20; //@line 2849
          break L21;
         }
        } else {
         if ($40 >>> 0 < $2 >>> 0) {
          label = 20; //@line 2855
          break L21;
         } else {
          $$pre$phiZ2D = $38; //@line 2858
          $48 = $39; //@line 2858
          label = 22; //@line 2859
          break L21;
         }
        }
        break;
       }
      case 1:
       {
        $43 = $0 + 36 | 0; //@line 2866
        $44 = HEAP32[$43 >> 2] | 0; //@line 2867
        if (($10 - $44 | 0) >>> 0 > $2 >>> 0) {
         $$pre$phiZ2D = $43; //@line 2871
         $48 = $44; //@line 2871
         label = 22; //@line 2872
        } else {
         $$pre$phi128Z2D = $43; //@line 2874
         $52 = $44; //@line 2874
        }
        break;
       }
      default:
       {
        label = 20; //@line 2879
       }
      }
     } while (0);
     if ((label | 0) == 20) {
      $$phi$trans$insert = $0 + 36 | 0; //@line 2884
      $$pre$phi128Z2D = $$phi$trans$insert; //@line 2886
      $52 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 2886
     } else if ((label | 0) == 22) {
      _memcpy($0 + 20 + $48 | 0, $1 | 0, $2 | 0) | 0; //@line 2890
      HEAP32[$$pre$phiZ2D >> 2] = (HEAP32[$$pre$phiZ2D >> 2] | 0) + $2; //@line 2893
      $$1 = 0; //@line 2894
      return $$1 | 0; //@line 2895
     }
     do {
      if (!$52) {
       $$0121 = $3; //@line 2900
       $$0122 = $2; //@line 2900
       $$0124 = $1; //@line 2900
      } else {
       $53 = $10 - $52 | 0; //@line 2902
       _memcpy($0 + 20 + $52 | 0, $1 | 0, $53 | 0) | 0; //@line 2904
       $59 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 2909
       $61 = HEAP32[$0 + 60 >> 2] | 0; //@line 2911
       $62 = HEAP32[$33 >> 2] | 0; //@line 2912
       $AsyncCtx3 = _emscripten_alloc_async_context(44, sp) | 0; //@line 2915
       $65 = FUNCTION_TABLE_iiiiiii[$59 & 3]($61, $62, $10, $0 + 40 | 0, $0 + 20 | 0, $3) | 0; //@line 2916
       if (___async) {
        HEAP32[$AsyncCtx3 >> 2] = 577; //@line 2919
        HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 2921
        HEAP32[$AsyncCtx3 + 8 >> 2] = $10; //@line 2923
        HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 2925
        HEAP32[$AsyncCtx3 + 16 >> 2] = $$pre$phi128Z2D; //@line 2927
        HEAP32[$AsyncCtx3 + 20 >> 2] = $1; //@line 2929
        HEAP32[$AsyncCtx3 + 24 >> 2] = $53; //@line 2931
        HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 2933
        HEAP32[$AsyncCtx3 + 32 >> 2] = $33; //@line 2935
        HEAP32[$AsyncCtx3 + 36 >> 2] = $0; //@line 2937
        HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 2939
        sp = STACKTOP; //@line 2940
        return 0; //@line 2941
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2943
       if (!$65) {
        HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $10; //@line 2948
        HEAP32[$$pre$phi128Z2D >> 2] = 0; //@line 2950
        $$0121 = $3 + $10 | 0; //@line 2953
        $$0122 = $2 - $53 | 0; //@line 2953
        $$0124 = $1 + $53 | 0; //@line 2953
        break;
       } else {
        $$1 = $65; //@line 2956
        return $$1 | 0; //@line 2957
       }
      }
     } while (0);
     if (!$$0122) {
      $$1 = 0; //@line 2963
      return $$1 | 0; //@line 2964
     }
     $83 = ($$0122 >>> 0) % ($10 >>> 0) | 0; //@line 2966
     if (!$83) {
      if (!(HEAP32[$33 >> 2] | 0)) {
       $$0 = (HEAP32[$0 + 12 >> 2] | 0) == 0 ? 0 : $10; //@line 2976
      } else {
       $$0 = 0; //@line 2978
      }
     } else {
      $$0 = $83; //@line 2981
     }
     $91 = $$0122 - $$0 | 0; //@line 2984
     _memcpy($0 + 20 | 0, $$0124 + $91 | 0, $$0 | 0) | 0; //@line 2986
     HEAP32[$$pre$phi128Z2D >> 2] = (HEAP32[$$pre$phi128Z2D >> 2] | 0) + $$0; //@line 2989
     if (!$91) {
      $$1 = 0; //@line 2992
      return $$1 | 0; //@line 2993
     }
     $100 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 2999
     $102 = HEAP32[$0 + 60 >> 2] | 0; //@line 3001
     $103 = HEAP32[$33 >> 2] | 0; //@line 3002
     $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3004
     $105 = FUNCTION_TABLE_iiiiiii[$100 & 3]($102, $103, $91, $0 + 40 | 0, $$0124, $$0121) | 0; //@line 3005
     if (___async) {
      HEAP32[$AsyncCtx7 >> 2] = 578; //@line 3008
      HEAP32[$AsyncCtx7 + 4 >> 2] = $4; //@line 3010
      HEAP32[$AsyncCtx7 + 8 >> 2] = $91; //@line 3012
      sp = STACKTOP; //@line 3013
      return 0; //@line 3014
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 3016
     if ($105 | 0) {
      $$1 = $105; //@line 3019
      return $$1 | 0; //@line 3020
     }
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $91; //@line 3024
     $$1 = 0; //@line 3025
     return $$1 | 0; //@line 3026
    }
   case 5:
    {
     $114 = HEAP32[(HEAP32[$6 + 28 >> 2] | 0) + 12 >> 2] | 0; //@line 3033
     $116 = HEAP32[$0 + 60 >> 2] | 0; //@line 3035
     $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3039
     $120 = FUNCTION_TABLE_iiiiiiii[$114 & 1]($116, $2, $0 + 36 | 0, $0 + 40 | 0, $0 + 20 | 0, $1, $3) | 0; //@line 3040
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 579; //@line 3043
      HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 3045
      HEAP32[$AsyncCtx11 + 8 >> 2] = $4; //@line 3047
      sp = STACKTOP; //@line 3048
      return 0; //@line 3049
     }
     _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3051
     if ($120 | 0) {
      $$1 = $120; //@line 3054
      return $$1 | 0; //@line 3055
     }
     HEAP32[$4 >> 2] = $2; //@line 3057
     $$1 = 0; //@line 3058
     return $$1 | 0; //@line 3059
    }
   default:
    {
     $$1 = -24704; //@line 3063
     return $$1 | 0; //@line 3064
    }
   }
  }
 }
 return 0; //@line 3069
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$byval_copy = 0, $14 = 0, $23 = 0, $35 = 0, $48 = 0, $5 = 0, $53 = 0, $54 = 0, $64 = 0, $66 = 0, $93 = 0, $94 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx7 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 14704
 STACKTOP = STACKTOP + 16 | 0; //@line 14705
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14705
 $$byval_copy = sp + 8 | 0; //@line 14706
 $5 = sp; //@line 14707
 $AsyncCtx31 = _emscripten_alloc_async_context(28, sp) | 0; //@line 14709
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 14710
 if (___async) {
  HEAP32[$AsyncCtx31 >> 2] = 422; //@line 14713
  HEAP32[$AsyncCtx31 + 4 >> 2] = $1; //@line 14715
  HEAP32[$AsyncCtx31 + 8 >> 2] = $0; //@line 14717
  HEAP32[$AsyncCtx31 + 12 >> 2] = $5; //@line 14719
  HEAP16[$AsyncCtx31 + 16 >> 1] = $2; //@line 14721
  HEAP16[$AsyncCtx31 + 18 >> 1] = $3; //@line 14723
  HEAP8[$AsyncCtx31 + 20 >> 0] = $4; //@line 14725
  HEAP32[$AsyncCtx31 + 24 >> 2] = $0; //@line 14727
  sp = STACKTOP; //@line 14728
  STACKTOP = sp; //@line 14729
  return;
 }
 _emscripten_free_async_context($AsyncCtx31 | 0); //@line 14731
 $14 = $0 + 1836 | 0; //@line 14732
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 14733
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $14); //@line 14734
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 423; //@line 14737
  HEAP32[$AsyncCtx27 + 4 >> 2] = $1; //@line 14739
  HEAP32[$AsyncCtx27 + 8 >> 2] = $0; //@line 14741
  HEAP32[$AsyncCtx27 + 12 >> 2] = $5; //@line 14743
  HEAP16[$AsyncCtx27 + 16 >> 1] = $2; //@line 14745
  HEAP16[$AsyncCtx27 + 18 >> 1] = $3; //@line 14747
  HEAP8[$AsyncCtx27 + 20 >> 0] = $4; //@line 14749
  HEAP32[$AsyncCtx27 + 24 >> 2] = $0; //@line 14751
  HEAP32[$AsyncCtx27 + 28 >> 2] = $14; //@line 14753
  sp = STACKTOP; //@line 14754
  STACKTOP = sp; //@line 14755
  return;
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 14757
 $23 = $0 + 2364 | 0; //@line 14758
 do {
  if ((HEAP32[$23 >> 2] | 0) == 2) {
   $AsyncCtx23 = _emscripten_alloc_async_context(28, sp) | 0; //@line 14763
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $14); //@line 14764
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 424; //@line 14767
    HEAP32[$AsyncCtx23 + 4 >> 2] = $1; //@line 14769
    HEAP32[$AsyncCtx23 + 8 >> 2] = $0; //@line 14771
    HEAP32[$AsyncCtx23 + 12 >> 2] = $5; //@line 14773
    HEAP16[$AsyncCtx23 + 16 >> 1] = $2; //@line 14775
    HEAP16[$AsyncCtx23 + 18 >> 1] = $3; //@line 14777
    HEAP8[$AsyncCtx23 + 20 >> 0] = $4; //@line 14779
    HEAP32[$AsyncCtx23 + 24 >> 2] = $23; //@line 14781
    sp = STACKTOP; //@line 14782
    STACKTOP = sp; //@line 14783
    return;
   }
   _emscripten_free_async_context($AsyncCtx23 | 0); //@line 14785
   $35 = $0 + 1964 | 0; //@line 14788
   HEAP8[$35 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 14789
   HEAP32[$0 + 1968 >> 2] = HEAP32[$0 + 1912 >> 2]; //@line 14793
   HEAP8[$0 + 1980 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 14797
   HEAP8[$0 + 1981 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 14801
   HEAP32[$0 + 1984 >> 2] = 1; //@line 14803
   $48 = $0 + 1982 | 0; //@line 14806
   HEAP8[$48 >> 0] = (HEAP32[$23 >> 2] | 0) == 2 & 1; //@line 14808
   HEAP8[$0 + 2010 >> 0] = HEAP8[$0 + 1965 >> 0] | 0; //@line 14812
   $53 = $0 + 4 | 0; //@line 14813
   $AsyncCtx15 = _emscripten_alloc_async_context(32, sp) | 0; //@line 14814
   $54 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($53, $35) | 0; //@line 14815
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 425; //@line 14818
    HEAP32[$AsyncCtx15 + 4 >> 2] = $1; //@line 14820
    HEAP32[$AsyncCtx15 + 8 >> 2] = $48; //@line 14822
    HEAP32[$AsyncCtx15 + 12 >> 2] = $0; //@line 14824
    HEAP32[$AsyncCtx15 + 16 >> 2] = $53; //@line 14826
    HEAP32[$AsyncCtx15 + 20 >> 2] = $5; //@line 14828
    HEAP16[$AsyncCtx15 + 24 >> 1] = $2; //@line 14830
    HEAP16[$AsyncCtx15 + 26 >> 1] = $3; //@line 14832
    HEAP8[$AsyncCtx15 + 28 >> 0] = $4; //@line 14834
    sp = STACKTOP; //@line 14835
    STACKTOP = sp; //@line 14836
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 14838
   if ($54) {
    $64 = (HEAP8[$48 >> 0] | 0) != 0; //@line 14841
    $66 = HEAP32[$0 + 1888 >> 2] | 0; //@line 14843
    $AsyncCtx7 = _emscripten_alloc_async_context(28, sp) | 0; //@line 14844
    __ZN7LoRaPHY15setup_rx_windowEbj($53, $64, $66); //@line 14845
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 426; //@line 14848
     HEAP32[$AsyncCtx7 + 4 >> 2] = $1; //@line 14850
     HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 14852
     HEAP32[$AsyncCtx7 + 12 >> 2] = $5; //@line 14854
     HEAP16[$AsyncCtx7 + 16 >> 1] = $2; //@line 14856
     HEAP16[$AsyncCtx7 + 18 >> 1] = $3; //@line 14858
     HEAP8[$AsyncCtx7 + 20 >> 0] = $4; //@line 14860
     HEAP32[$AsyncCtx7 + 24 >> 2] = $48; //@line 14862
     sp = STACKTOP; //@line 14863
     STACKTOP = sp; //@line 14864
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 14866
     HEAP32[$0 + 1168 >> 2] = HEAP8[$48 >> 0] | 0 ? 2 : 1; //@line 14871
     break;
    }
   }
  } else {
   $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 14877
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 14878
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 427; //@line 14881
    HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 14883
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 14885
    HEAP32[$AsyncCtx11 + 12 >> 2] = $5; //@line 14887
    HEAP16[$AsyncCtx11 + 16 >> 1] = $2; //@line 14889
    HEAP16[$AsyncCtx11 + 18 >> 1] = $3; //@line 14891
    HEAP8[$AsyncCtx11 + 20 >> 0] = $4; //@line 14893
    sp = STACKTOP; //@line 14894
    STACKTOP = sp; //@line 14895
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 14897
    break;
   }
  }
 } while (0);
 $trunc = (HEAPU8[$1 >> 0] | 0) >>> 5; //@line 14903
 switch ($trunc & 7) {
 case 1:
  {
   if (!(HEAP8[$0 + 2360 >> 0] | 0)) {
    $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14911
    __ZN7LoRaMac24handle_join_accept_frameEPKht($0, $1, $2); //@line 14912
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 430; //@line 14915
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 14917
     sp = STACKTOP; //@line 14918
     STACKTOP = sp; //@line 14919
     return;
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14921
    HEAP8[$0 + 2068 >> 0] = 1; //@line 14923
    STACKTOP = sp; //@line 14924
    return;
   }
   do {
    if (HEAP8[$0 + 1177 >> 0] | 0) {
     $93 = HEAP32[$0 + 1992 >> 2] | 0; //@line 14932
     HEAP32[$5 >> 2] = 404; //@line 14933
     HEAP32[$5 + 4 >> 2] = 0; //@line 14935
     $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14936
     HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2]; //@line 14937
     HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 14937
     $94 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($93, $0, $$byval_copy) | 0; //@line 14938
     if (___async) {
      HEAP32[$AsyncCtx19 >> 2] = 428; //@line 14941
      HEAP32[$AsyncCtx19 + 4 >> 2] = $5; //@line 14943
      HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 14945
      sp = STACKTOP; //@line 14946
      STACKTOP = sp; //@line 14947
      return;
     }
     _emscripten_free_async_context($AsyncCtx19 | 0); //@line 14949
     if (!$94) {
      $AsyncCtx35 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14952
      _mbed_assert_internal(13121, 13130, 231); //@line 14953
      if (___async) {
       HEAP32[$AsyncCtx35 >> 2] = 429; //@line 14956
       HEAP32[$AsyncCtx35 + 4 >> 2] = $5; //@line 14958
       HEAP32[$AsyncCtx35 + 8 >> 2] = $0; //@line 14960
       sp = STACKTOP; //@line 14961
       STACKTOP = sp; //@line 14962
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx35 | 0); //@line 14964
       break;
      }
     }
    }
   } while (0);
   HEAP8[$0 + 2068 >> 0] = 0; //@line 14971
   STACKTOP = sp; //@line 14972
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14976
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($0, $1, $2, 1, $trunc, $3, $4); //@line 14977
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 431; //@line 14980
    sp = STACKTOP; //@line 14981
    STACKTOP = sp; //@line 14982
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14984
   STACKTOP = sp; //@line 14985
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 14989
   return;
  }
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_134($0) {
 $0 = $0 | 0;
 var $$pre$i$i25 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 27827
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27829
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27831
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27833
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27835
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27841
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27843
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27845
 $$pre$i$i25 = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 27846
 HEAP32[HEAP32[$0 + 24 >> 2] >> 2] = $$pre$i$i25; //@line 27848
 if ($$pre$i$i25 | 0) {
  $22 = HEAP32[$$pre$i$i25 + 8 >> 2] | 0; //@line 27852
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 27853
  FUNCTION_TABLE_vi[$22 & 1023]($14); //@line 27854
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 186; //@line 27857
   $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 27858
   HEAP32[$23 >> 2] = $2; //@line 27859
   $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 27860
   HEAP32[$24 >> 2] = $4; //@line 27861
   $25 = $ReallocAsyncCtx6 + 12 | 0; //@line 27862
   HEAP32[$25 >> 2] = $6; //@line 27863
   $26 = $ReallocAsyncCtx6 + 16 | 0; //@line 27864
   HEAP32[$26 >> 2] = $8; //@line 27865
   $27 = $ReallocAsyncCtx6 + 20 | 0; //@line 27866
   HEAP32[$27 >> 2] = $14; //@line 27867
   $28 = $ReallocAsyncCtx6 + 24 | 0; //@line 27868
   HEAP32[$28 >> 2] = $16; //@line 27869
   $29 = $ReallocAsyncCtx6 + 28 | 0; //@line 27870
   HEAP32[$29 >> 2] = $18; //@line 27871
   sp = STACKTOP; //@line 27872
   return;
  }
  ___async_unwind = 0; //@line 27875
  HEAP32[$ReallocAsyncCtx6 >> 2] = 186; //@line 27876
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 27877
  HEAP32[$23 >> 2] = $2; //@line 27878
  $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 27879
  HEAP32[$24 >> 2] = $4; //@line 27880
  $25 = $ReallocAsyncCtx6 + 12 | 0; //@line 27881
  HEAP32[$25 >> 2] = $6; //@line 27882
  $26 = $ReallocAsyncCtx6 + 16 | 0; //@line 27883
  HEAP32[$26 >> 2] = $8; //@line 27884
  $27 = $ReallocAsyncCtx6 + 20 | 0; //@line 27885
  HEAP32[$27 >> 2] = $14; //@line 27886
  $28 = $ReallocAsyncCtx6 + 24 | 0; //@line 27887
  HEAP32[$28 >> 2] = $16; //@line 27888
  $29 = $ReallocAsyncCtx6 + 28 | 0; //@line 27889
  HEAP32[$29 >> 2] = $18; //@line 27890
  sp = STACKTOP; //@line 27891
  return;
 }
 $30 = $16 + 12 | 0; //@line 27894
 HEAP32[$16 >> 2] = 187; //@line 27895
 HEAP32[$16 + 4 >> 2] = 0; //@line 27897
 HEAP32[$16 + 8 >> 2] = $2; //@line 27899
 HEAP32[$30 >> 2] = 808; //@line 27900
 $31 = $2 + 2432 | 0; //@line 27901
 if (($31 | 0) == ($16 | 0)) {
  $58 = HEAP32[204] | 0; //@line 27905
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 27906
  FUNCTION_TABLE_vi[$58 & 1023]($16); //@line 27907
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 190; //@line 27910
   $59 = $ReallocAsyncCtx9 + 4 | 0; //@line 27911
   HEAP32[$59 >> 2] = $2; //@line 27912
   $60 = $ReallocAsyncCtx9 + 8 | 0; //@line 27913
   HEAP32[$60 >> 2] = $4; //@line 27914
   $61 = $ReallocAsyncCtx9 + 12 | 0; //@line 27915
   HEAP32[$61 >> 2] = $6; //@line 27916
   $62 = $ReallocAsyncCtx9 + 16 | 0; //@line 27917
   HEAP32[$62 >> 2] = $8; //@line 27918
   $63 = $ReallocAsyncCtx9 + 20 | 0; //@line 27919
   HEAP32[$63 >> 2] = $16; //@line 27920
   $64 = $ReallocAsyncCtx9 + 24 | 0; //@line 27921
   HEAP32[$64 >> 2] = $18; //@line 27922
   sp = STACKTOP; //@line 27923
   return;
  }
  ___async_unwind = 0; //@line 27926
  HEAP32[$ReallocAsyncCtx9 >> 2] = 190; //@line 27927
  $59 = $ReallocAsyncCtx9 + 4 | 0; //@line 27928
  HEAP32[$59 >> 2] = $2; //@line 27929
  $60 = $ReallocAsyncCtx9 + 8 | 0; //@line 27930
  HEAP32[$60 >> 2] = $4; //@line 27931
  $61 = $ReallocAsyncCtx9 + 12 | 0; //@line 27932
  HEAP32[$61 >> 2] = $6; //@line 27933
  $62 = $ReallocAsyncCtx9 + 16 | 0; //@line 27934
  HEAP32[$62 >> 2] = $8; //@line 27935
  $63 = $ReallocAsyncCtx9 + 20 | 0; //@line 27936
  HEAP32[$63 >> 2] = $16; //@line 27937
  $64 = $ReallocAsyncCtx9 + 24 | 0; //@line 27938
  HEAP32[$64 >> 2] = $18; //@line 27939
  sp = STACKTOP; //@line 27940
  return;
 }
 $33 = $2 + 2444 | 0; //@line 27943
 $34 = HEAP32[$33 >> 2] | 0; //@line 27944
 if (!$34) {
  $48 = HEAP32[203] | 0; //@line 27948
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 27949
  FUNCTION_TABLE_vii[$48 & 15]($31, $16); //@line 27950
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 189; //@line 27953
   $49 = $ReallocAsyncCtx8 + 4 | 0; //@line 27954
   HEAP32[$49 >> 2] = $2; //@line 27955
   $50 = $ReallocAsyncCtx8 + 8 | 0; //@line 27956
   HEAP32[$50 >> 2] = $4; //@line 27957
   $51 = $ReallocAsyncCtx8 + 12 | 0; //@line 27958
   HEAP32[$51 >> 2] = $6; //@line 27959
   $52 = $ReallocAsyncCtx8 + 16 | 0; //@line 27960
   HEAP32[$52 >> 2] = $8; //@line 27961
   $53 = $ReallocAsyncCtx8 + 20 | 0; //@line 27962
   HEAP32[$53 >> 2] = $30; //@line 27963
   $54 = $ReallocAsyncCtx8 + 24 | 0; //@line 27964
   HEAP32[$54 >> 2] = $33; //@line 27965
   $55 = $ReallocAsyncCtx8 + 28 | 0; //@line 27966
   HEAP32[$55 >> 2] = $16; //@line 27967
   $56 = $ReallocAsyncCtx8 + 32 | 0; //@line 27968
   HEAP32[$56 >> 2] = $18; //@line 27969
   sp = STACKTOP; //@line 27970
   return;
  }
  ___async_unwind = 0; //@line 27973
  HEAP32[$ReallocAsyncCtx8 >> 2] = 189; //@line 27974
  $49 = $ReallocAsyncCtx8 + 4 | 0; //@line 27975
  HEAP32[$49 >> 2] = $2; //@line 27976
  $50 = $ReallocAsyncCtx8 + 8 | 0; //@line 27977
  HEAP32[$50 >> 2] = $4; //@line 27978
  $51 = $ReallocAsyncCtx8 + 12 | 0; //@line 27979
  HEAP32[$51 >> 2] = $6; //@line 27980
  $52 = $ReallocAsyncCtx8 + 16 | 0; //@line 27981
  HEAP32[$52 >> 2] = $8; //@line 27982
  $53 = $ReallocAsyncCtx8 + 20 | 0; //@line 27983
  HEAP32[$53 >> 2] = $30; //@line 27984
  $54 = $ReallocAsyncCtx8 + 24 | 0; //@line 27985
  HEAP32[$54 >> 2] = $33; //@line 27986
  $55 = $ReallocAsyncCtx8 + 28 | 0; //@line 27987
  HEAP32[$55 >> 2] = $16; //@line 27988
  $56 = $ReallocAsyncCtx8 + 32 | 0; //@line 27989
  HEAP32[$56 >> 2] = $18; //@line 27990
  sp = STACKTOP; //@line 27991
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 27995
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(40) | 0; //@line 27996
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 27997
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 188; //@line 28000
   $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 28001
   HEAP32[$38 >> 2] = $2; //@line 28002
   $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 28003
   HEAP32[$39 >> 2] = $4; //@line 28004
   $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 28005
   HEAP32[$40 >> 2] = $6; //@line 28006
   $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 28007
   HEAP32[$41 >> 2] = $8; //@line 28008
   $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 28009
   HEAP32[$42 >> 2] = $33; //@line 28010
   $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 28011
   HEAP32[$43 >> 2] = $30; //@line 28012
   $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 28013
   HEAP32[$44 >> 2] = $31; //@line 28014
   $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 28015
   HEAP32[$45 >> 2] = $16; //@line 28016
   $46 = $ReallocAsyncCtx7 + 36 | 0; //@line 28017
   HEAP32[$46 >> 2] = $18; //@line 28018
   sp = STACKTOP; //@line 28019
   return;
  }
  ___async_unwind = 0; //@line 28022
  HEAP32[$ReallocAsyncCtx7 >> 2] = 188; //@line 28023
  $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 28024
  HEAP32[$38 >> 2] = $2; //@line 28025
  $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 28026
  HEAP32[$39 >> 2] = $4; //@line 28027
  $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 28028
  HEAP32[$40 >> 2] = $6; //@line 28029
  $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 28030
  HEAP32[$41 >> 2] = $8; //@line 28031
  $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 28032
  HEAP32[$42 >> 2] = $33; //@line 28033
  $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 28034
  HEAP32[$43 >> 2] = $30; //@line 28035
  $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 28036
  HEAP32[$44 >> 2] = $31; //@line 28037
  $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 28038
  HEAP32[$45 >> 2] = $16; //@line 28039
  $46 = $ReallocAsyncCtx7 + 36 | 0; //@line 28040
  HEAP32[$46 >> 2] = $18; //@line 28041
  sp = STACKTOP; //@line 28042
  return;
 }
}
function _schedule_interrupt__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $102 = 0, $105 = 0, $107 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $12 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $130 = 0, $135 = 0, $142 = 0, $144 = 0, $146 = 0, $149 = 0, $151 = 0, $158 = 0, $159 = 0, $162 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $177 = 0, $180 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $86 = 0, $87 = 0, $9 = 0, $93 = 0, $94 = 0, $95 = 0, $97 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21705
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21709
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21711
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21713
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21714
 $9 = $8 + 32 | 0; //@line 21715
 if (($AsyncRetVal | 0) != (HEAP32[$9 >> 2] | 0)) {
  $12 = $6 + 32 | 0; //@line 21719
  $17 = $AsyncRetVal - (HEAP32[$12 >> 2] | 0) & HEAP32[$6 + 12 >> 2]; //@line 21724
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 21725
  $19 = HEAP32[$6 + 8 >> 2] | 0; //@line 21727
  L4 : do {
   if (($19 | 0) < 1e6) {
    switch ($19 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 6; //@line 21736
      break L4;
     }
    }
    $20 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 21740
    $22 = _bitshift64Lshr($20 | 0, tempRet0 | 0, 15) | 0; //@line 21742
    $23 = tempRet0; //@line 21743
    $26 = $6 + 40 | 0; //@line 21746
    $27 = $26; //@line 21747
    $33 = _i64Add(HEAP32[$27 >> 2] | 0, HEAP32[$27 + 4 >> 2] | 0, $17 * 1e6 & 32704 | 0, 0) | 0; //@line 21753
    $34 = tempRet0; //@line 21754
    $35 = $26; //@line 21755
    HEAP32[$35 >> 2] = $33; //@line 21757
    HEAP32[$35 + 4 >> 2] = $34; //@line 21760
    if ($34 >>> 0 < 0 | ($34 | 0) == 0 & $33 >>> 0 < 32768) {
     $93 = $22; //@line 21767
     $94 = $23; //@line 21767
    } else {
     $44 = _i64Add($22 | 0, $23 | 0, 1, 0) | 0; //@line 21769
     $45 = tempRet0; //@line 21770
     $46 = _i64Add($33 | 0, $34 | 0, -32768, -1) | 0; //@line 21771
     $48 = $26; //@line 21773
     HEAP32[$48 >> 2] = $46; //@line 21775
     HEAP32[$48 + 4 >> 2] = tempRet0; //@line 21778
     $93 = $44; //@line 21779
     $94 = $45; //@line 21779
    }
   } else {
    switch ($19 | 0) {
    case 1e6:
     {
      $93 = $17; //@line 21784
      $94 = 0; //@line 21784
      break;
     }
    default:
     {
      label = 6; //@line 21788
     }
    }
   }
  } while (0);
  if ((label | 0) == 6) {
   $52 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 21794
   $53 = tempRet0; //@line 21795
   $54 = ___udivdi3($52 | 0, $53 | 0, $19 | 0, 0) | 0; //@line 21796
   $55 = tempRet0; //@line 21797
   $56 = ___muldi3($54 | 0, $55 | 0, $19 | 0, 0) | 0; //@line 21798
   $58 = _i64Subtract($52 | 0, $53 | 0, $56 | 0, tempRet0 | 0) | 0; //@line 21800
   $60 = $6 + 40 | 0; //@line 21802
   $61 = $60; //@line 21803
   $67 = _i64Add($58 | 0, tempRet0 | 0, HEAP32[$61 >> 2] | 0, HEAP32[$61 + 4 >> 2] | 0) | 0; //@line 21809
   $68 = tempRet0; //@line 21810
   $69 = $60; //@line 21811
   HEAP32[$69 >> 2] = $67; //@line 21813
   HEAP32[$69 + 4 >> 2] = $68; //@line 21816
   if ($68 >>> 0 < 0 | ($68 | 0) == 0 & $67 >>> 0 < $19 >>> 0) {
    $93 = $54; //@line 21823
    $94 = $55; //@line 21823
   } else {
    $78 = _i64Add($54 | 0, $55 | 0, 1, 0) | 0; //@line 21825
    $79 = tempRet0; //@line 21826
    $80 = _i64Subtract($67 | 0, $68 | 0, $19 | 0, 0) | 0; //@line 21827
    $82 = $60; //@line 21829
    HEAP32[$82 >> 2] = $80; //@line 21831
    HEAP32[$82 + 4 >> 2] = tempRet0; //@line 21834
    $93 = $78; //@line 21835
    $94 = $79; //@line 21835
   }
  }
  $86 = $6 + 48 | 0; //@line 21838
  $87 = $86; //@line 21839
  $95 = _i64Add(HEAP32[$87 >> 2] | 0, HEAP32[$87 + 4 >> 2] | 0, $93 | 0, $94 | 0) | 0; //@line 21845
  $97 = $86; //@line 21847
  HEAP32[$97 >> 2] = $95; //@line 21849
  HEAP32[$97 + 4 >> 2] = tempRet0; //@line 21852
 }
 $102 = HEAP32[$8 + 4 >> 2] | 0; //@line 21855
 if (!$102) {
  $177 = (HEAP32[$6 + 16 >> 2] | 0) + (HEAP32[$6 + 32 >> 2] | 0) & HEAP32[$6 + 12 >> 2]; //@line 21865
  $180 = HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0; //@line 21868
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 21869
  FUNCTION_TABLE_vi[$180 & 1023]($177); //@line 21870
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 610; //@line 21873
   sp = STACKTOP; //@line 21874
   return;
  }
  ___async_unwind = 0; //@line 21877
  HEAP32[$ReallocAsyncCtx7 >> 2] = 610; //@line 21878
  sp = STACKTOP; //@line 21879
  return;
 }
 $105 = $8 + 48 | 0; //@line 21883
 $107 = HEAP32[$105 >> 2] | 0; //@line 21885
 $110 = HEAP32[$105 + 4 >> 2] | 0; //@line 21888
 $111 = $102; //@line 21889
 $113 = HEAP32[$111 >> 2] | 0; //@line 21891
 $116 = HEAP32[$111 + 4 >> 2] | 0; //@line 21894
 if (!($116 >>> 0 > $110 >>> 0 | ($116 | 0) == ($110 | 0) & $113 >>> 0 > $107 >>> 0)) {
  $124 = HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] | 0; //@line 21903
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 21904
  FUNCTION_TABLE_v[$124 & 15](); //@line 21905
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 605; //@line 21908
   sp = STACKTOP; //@line 21909
   return;
  }
  ___async_unwind = 0; //@line 21912
  HEAP32[$ReallocAsyncCtx2 >> 2] = 605; //@line 21913
  sp = STACKTOP; //@line 21914
  return;
 }
 $125 = _i64Subtract($113 | 0, $116 | 0, $107 | 0, $110 | 0) | 0; //@line 21917
 $126 = tempRet0; //@line 21918
 $128 = HEAP32[$8 + 16 >> 2] | 0; //@line 21920
 $130 = $8 + 24 | 0; //@line 21922
 $135 = HEAP32[$130 + 4 >> 2] | 0; //@line 21927
 L28 : do {
  if ($126 >>> 0 > $135 >>> 0 | (($126 | 0) == ($135 | 0) ? $125 >>> 0 > (HEAP32[$130 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $128; //@line 21935
  } else {
   $142 = HEAP32[$8 + 8 >> 2] | 0; //@line 21938
   L30 : do {
    if (($142 | 0) < 1e6) {
     switch ($142 | 0) {
     case 32768:
      {
       break;
      }
     default:
      {
       break L30;
      }
     }
     $144 = _bitshift64Shl($125 | 0, $126 | 0, 15) | 0; //@line 21950
     $146 = ___udivdi3($144 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 21952
     $$0$i = $128 >>> 0 < $146 >>> 0 ? $128 : $146; //@line 21956
     break L28;
    } else {
     switch ($142 | 0) {
     case 1e6:
      {
       break;
      }
     default:
      {
       break L30;
      }
     }
     $$0$i = $128 >>> 0 < $125 >>> 0 ? $128 : $125; //@line 21969
     break L28;
    }
   } while (0);
   $149 = ___muldi3($125 | 0, $126 | 0, $142 | 0, 0) | 0; //@line 21973
   $151 = ___udivdi3($149 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 21975
   $$0$i = $128 >>> 0 < $151 >>> 0 ? $128 : $151; //@line 21979
  }
 } while (0);
 $158 = (HEAP32[$9 >> 2] | 0) + $$0$i & HEAP32[$8 + 12 >> 2]; //@line 21986
 $159 = $6 + 32 | 0; //@line 21987
 $162 = HEAP32[$4 >> 2] | 0; //@line 21990
 if (($158 | 0) == (HEAP32[$159 >> 2] | 0)) {
  $164 = HEAP32[$162 + 20 >> 2] | 0; //@line 21993
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 21994
  FUNCTION_TABLE_v[$164 & 15](); //@line 21995
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 606; //@line 21998
   sp = STACKTOP; //@line 21999
   return;
  }
  ___async_unwind = 0; //@line 22002
  HEAP32[$ReallocAsyncCtx3 >> 2] = 606; //@line 22003
  sp = STACKTOP; //@line 22004
  return;
 } else {
  $166 = HEAP32[$162 + 16 >> 2] | 0; //@line 22008
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 22009
  FUNCTION_TABLE_vi[$166 & 1023]($158); //@line 22010
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 607; //@line 22013
   $167 = $ReallocAsyncCtx4 + 4 | 0; //@line 22014
   HEAP32[$167 >> 2] = $4; //@line 22015
   $168 = $ReallocAsyncCtx4 + 8 | 0; //@line 22016
   HEAP32[$168 >> 2] = $159; //@line 22017
   $169 = $ReallocAsyncCtx4 + 12 | 0; //@line 22018
   HEAP32[$169 >> 2] = $158; //@line 22019
   sp = STACKTOP; //@line 22020
   return;
  }
  ___async_unwind = 0; //@line 22023
  HEAP32[$ReallocAsyncCtx4 >> 2] = 607; //@line 22024
  $167 = $ReallocAsyncCtx4 + 4 | 0; //@line 22025
  HEAP32[$167 >> 2] = $4; //@line 22026
  $168 = $ReallocAsyncCtx4 + 8 | 0; //@line 22027
  HEAP32[$168 >> 2] = $159; //@line 22028
  $169 = $ReallocAsyncCtx4 + 12 | 0; //@line 22029
  HEAP32[$169 >> 2] = $158; //@line 22030
  sp = STACKTOP; //@line 22031
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_335($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 13515
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13517
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13519
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13521
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] >> 2]; //@line 13527
 $11 = $4 + 16 | 0; //@line 13528
 $12 = $4 + 28 | 0; //@line 13529
 $13 = HEAP32[$12 >> 2] | 0; //@line 13530
 if ($13 | 0) {
  $15 = $2 + 2500 | 0; //@line 13533
  if (($15 | 0) != ($11 | 0)) {
   $17 = $2 + 2512 | 0; //@line 13536
   $18 = HEAP32[$17 >> 2] | 0; //@line 13537
   if (!$18) {
    $30 = HEAP32[$13 + 4 >> 2] | 0; //@line 13541
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 13542
    FUNCTION_TABLE_vii[$30 & 15]($15, $11); //@line 13543
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 350; //@line 13546
     $31 = $ReallocAsyncCtx4 + 4 | 0; //@line 13547
     HEAP32[$31 >> 2] = $2; //@line 13548
     $32 = $ReallocAsyncCtx4 + 8 | 0; //@line 13549
     HEAP32[$32 >> 2] = $17; //@line 13550
     $33 = $ReallocAsyncCtx4 + 12 | 0; //@line 13551
     HEAP32[$33 >> 2] = $4; //@line 13552
     $34 = $ReallocAsyncCtx4 + 16 | 0; //@line 13553
     HEAP32[$34 >> 2] = $6; //@line 13554
     $35 = $ReallocAsyncCtx4 + 20 | 0; //@line 13555
     HEAP32[$35 >> 2] = $12; //@line 13556
     sp = STACKTOP; //@line 13557
     return;
    }
    ___async_unwind = 0; //@line 13560
    HEAP32[$ReallocAsyncCtx4 >> 2] = 350; //@line 13561
    $31 = $ReallocAsyncCtx4 + 4 | 0; //@line 13562
    HEAP32[$31 >> 2] = $2; //@line 13563
    $32 = $ReallocAsyncCtx4 + 8 | 0; //@line 13564
    HEAP32[$32 >> 2] = $17; //@line 13565
    $33 = $ReallocAsyncCtx4 + 12 | 0; //@line 13566
    HEAP32[$33 >> 2] = $4; //@line 13567
    $34 = $ReallocAsyncCtx4 + 16 | 0; //@line 13568
    HEAP32[$34 >> 2] = $6; //@line 13569
    $35 = $ReallocAsyncCtx4 + 20 | 0; //@line 13570
    HEAP32[$35 >> 2] = $12; //@line 13571
    sp = STACKTOP; //@line 13572
    return;
   } else {
    $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 13576
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 13577
    FUNCTION_TABLE_vi[$21 & 1023]($15); //@line 13578
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 349; //@line 13581
     $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 13582
     HEAP32[$22 >> 2] = $2; //@line 13583
     $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 13584
     HEAP32[$23 >> 2] = $17; //@line 13585
     $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 13586
     HEAP32[$24 >> 2] = $4; //@line 13587
     $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 13588
     HEAP32[$25 >> 2] = $6; //@line 13589
     $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 13590
     HEAP32[$26 >> 2] = $12; //@line 13591
     $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 13592
     HEAP32[$27 >> 2] = $15; //@line 13593
     $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 13594
     HEAP32[$28 >> 2] = $11; //@line 13595
     sp = STACKTOP; //@line 13596
     return;
    }
    ___async_unwind = 0; //@line 13599
    HEAP32[$ReallocAsyncCtx3 >> 2] = 349; //@line 13600
    $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 13601
    HEAP32[$22 >> 2] = $2; //@line 13602
    $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 13603
    HEAP32[$23 >> 2] = $17; //@line 13604
    $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 13605
    HEAP32[$24 >> 2] = $4; //@line 13606
    $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 13607
    HEAP32[$25 >> 2] = $6; //@line 13608
    $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 13609
    HEAP32[$26 >> 2] = $12; //@line 13610
    $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 13611
    HEAP32[$27 >> 2] = $15; //@line 13612
    $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 13613
    HEAP32[$28 >> 2] = $11; //@line 13614
    sp = STACKTOP; //@line 13615
    return;
   }
  }
 }
 $36 = $4 + 32 | 0; //@line 13620
 $37 = $4 + 44 | 0; //@line 13621
 $38 = HEAP32[$37 >> 2] | 0; //@line 13622
 if (!$38) {
  HEAP32[___async_retval >> 2] = 0; //@line 13626
  return;
 }
 $40 = $2 + 2516 | 0; //@line 13629
 if (($40 | 0) == ($36 | 0)) {
  $61 = HEAP32[$38 + 4 >> 2] | 0; //@line 13633
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 13634
  FUNCTION_TABLE_vii[$61 & 15]($6, $36); //@line 13635
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 353; //@line 13638
   $62 = $ReallocAsyncCtx7 + 4 | 0; //@line 13639
   HEAP32[$62 >> 2] = $37; //@line 13640
   $63 = $ReallocAsyncCtx7 + 8 | 0; //@line 13641
   HEAP32[$63 >> 2] = $2; //@line 13642
   $64 = $ReallocAsyncCtx7 + 12 | 0; //@line 13643
   HEAP32[$64 >> 2] = $6; //@line 13644
   sp = STACKTOP; //@line 13645
   return;
  }
  ___async_unwind = 0; //@line 13648
  HEAP32[$ReallocAsyncCtx7 >> 2] = 353; //@line 13649
  $62 = $ReallocAsyncCtx7 + 4 | 0; //@line 13650
  HEAP32[$62 >> 2] = $37; //@line 13651
  $63 = $ReallocAsyncCtx7 + 8 | 0; //@line 13652
  HEAP32[$63 >> 2] = $2; //@line 13653
  $64 = $ReallocAsyncCtx7 + 12 | 0; //@line 13654
  HEAP32[$64 >> 2] = $6; //@line 13655
  sp = STACKTOP; //@line 13656
  return;
 }
 $42 = $2 + 2528 | 0; //@line 13659
 $43 = HEAP32[$42 >> 2] | 0; //@line 13660
 if (!$43) {
  $54 = HEAP32[$38 + 4 >> 2] | 0; //@line 13664
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 13665
  FUNCTION_TABLE_vii[$54 & 15]($40, $36); //@line 13666
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 352; //@line 13669
   $55 = $ReallocAsyncCtx6 + 4 | 0; //@line 13670
   HEAP32[$55 >> 2] = $37; //@line 13671
   $56 = $ReallocAsyncCtx6 + 8 | 0; //@line 13672
   HEAP32[$56 >> 2] = $42; //@line 13673
   $57 = $ReallocAsyncCtx6 + 12 | 0; //@line 13674
   HEAP32[$57 >> 2] = $2; //@line 13675
   $58 = $ReallocAsyncCtx6 + 16 | 0; //@line 13676
   HEAP32[$58 >> 2] = $6; //@line 13677
   $59 = $ReallocAsyncCtx6 + 20 | 0; //@line 13678
   HEAP32[$59 >> 2] = $36; //@line 13679
   sp = STACKTOP; //@line 13680
   return;
  }
  ___async_unwind = 0; //@line 13683
  HEAP32[$ReallocAsyncCtx6 >> 2] = 352; //@line 13684
  $55 = $ReallocAsyncCtx6 + 4 | 0; //@line 13685
  HEAP32[$55 >> 2] = $37; //@line 13686
  $56 = $ReallocAsyncCtx6 + 8 | 0; //@line 13687
  HEAP32[$56 >> 2] = $42; //@line 13688
  $57 = $ReallocAsyncCtx6 + 12 | 0; //@line 13689
  HEAP32[$57 >> 2] = $2; //@line 13690
  $58 = $ReallocAsyncCtx6 + 16 | 0; //@line 13691
  HEAP32[$58 >> 2] = $6; //@line 13692
  $59 = $ReallocAsyncCtx6 + 20 | 0; //@line 13693
  HEAP32[$59 >> 2] = $36; //@line 13694
  sp = STACKTOP; //@line 13695
  return;
 } else {
  $46 = HEAP32[$43 + 8 >> 2] | 0; //@line 13699
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 13700
  FUNCTION_TABLE_vi[$46 & 1023]($40); //@line 13701
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 351; //@line 13704
   $47 = $ReallocAsyncCtx5 + 4 | 0; //@line 13705
   HEAP32[$47 >> 2] = $37; //@line 13706
   $48 = $ReallocAsyncCtx5 + 8 | 0; //@line 13707
   HEAP32[$48 >> 2] = $42; //@line 13708
   $49 = $ReallocAsyncCtx5 + 12 | 0; //@line 13709
   HEAP32[$49 >> 2] = $2; //@line 13710
   $50 = $ReallocAsyncCtx5 + 16 | 0; //@line 13711
   HEAP32[$50 >> 2] = $40; //@line 13712
   $51 = $ReallocAsyncCtx5 + 20 | 0; //@line 13713
   HEAP32[$51 >> 2] = $36; //@line 13714
   $52 = $ReallocAsyncCtx5 + 24 | 0; //@line 13715
   HEAP32[$52 >> 2] = $6; //@line 13716
   sp = STACKTOP; //@line 13717
   return;
  }
  ___async_unwind = 0; //@line 13720
  HEAP32[$ReallocAsyncCtx5 >> 2] = 351; //@line 13721
  $47 = $ReallocAsyncCtx5 + 4 | 0; //@line 13722
  HEAP32[$47 >> 2] = $37; //@line 13723
  $48 = $ReallocAsyncCtx5 + 8 | 0; //@line 13724
  HEAP32[$48 >> 2] = $42; //@line 13725
  $49 = $ReallocAsyncCtx5 + 12 | 0; //@line 13726
  HEAP32[$49 >> 2] = $2; //@line 13727
  $50 = $ReallocAsyncCtx5 + 16 | 0; //@line 13728
  HEAP32[$50 >> 2] = $40; //@line 13729
  $51 = $ReallocAsyncCtx5 + 20 | 0; //@line 13730
  HEAP32[$51 >> 2] = $36; //@line 13731
  $52 = $ReallocAsyncCtx5 + 24 | 0; //@line 13732
  HEAP32[$52 >> 2] = $6; //@line 13733
  sp = STACKTOP; //@line 13734
  return;
 }
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$036 = 0, $$038 = 0, $10 = 0, $104 = 0, $107 = 0, $110 = 0, $114 = 0, $117 = 0, $126 = 0, $129 = 0, $132 = 0, $134 = 0, $137 = 0, $16 = 0, $19 = 0, $20 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $41 = 0, $43 = 0, $47 = 0, $5 = 0, $52 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $7 = 0, $71 = 0, $74 = 0, $87 = 0, $90 = 0, $95 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20155
 $3 = HEAP8[$1 + 1 >> 0] | 0; //@line 20157
 $5 = HEAP32[$1 + 4 >> 2] | 0; //@line 20159
 $6 = $0 + 4 | 0; //@line 20160
 $7 = HEAP32[$6 >> 2] | 0; //@line 20161
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 72 >> 2] | 0; //@line 20164
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 20165
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 20166
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 515; //@line 20169
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 20171
  HEAP8[$AsyncCtx + 8 >> 0] = $3; //@line 20173
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 20175
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 20177
  HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 20179
  sp = STACKTOP; //@line 20180
  return 0; //@line 20181
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 20183
 $16 = HEAP32[$6 >> 2] | 0; //@line 20184
 $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 40 >> 2] | 0; //@line 20187
 $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20188
 $20 = FUNCTION_TABLE_ii[$19 & 15]($16) | 0; //@line 20189
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 516; //@line 20192
  HEAP8[$AsyncCtx2 + 4 >> 0] = $3; //@line 20194
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 20196
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 20198
  HEAP32[$AsyncCtx2 + 16 >> 2] = $5; //@line 20200
  HEAP32[$AsyncCtx2 + 20 >> 2] = $6; //@line 20202
  sp = STACKTOP; //@line 20203
  return 0; //@line 20204
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 20206
 $26 = $20 << 24 >> 24 == 0; //@line 20207
 $27 = HEAP32[$6 >> 2] | 0; //@line 20208
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + 76 >> 2] | 0; //@line 20211
 $AsyncCtx5 = _emscripten_alloc_async_context(28, sp) | 0; //@line 20212
 FUNCTION_TABLE_vi[$30 & 1023]($27); //@line 20213
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 517; //@line 20216
  HEAP8[$AsyncCtx5 + 4 >> 0] = $3; //@line 20218
  HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 20220
  HEAP32[$AsyncCtx5 + 12 >> 2] = $0; //@line 20222
  HEAP32[$AsyncCtx5 + 16 >> 2] = $5; //@line 20224
  HEAP32[$AsyncCtx5 + 20 >> 2] = $6; //@line 20226
  HEAP8[$AsyncCtx5 + 24 >> 0] = $26 & 1; //@line 20229
  sp = STACKTOP; //@line 20230
  return 0; //@line 20231
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 20233
 if (!$26) {
  $$0 = 0; //@line 20235
  return $$0 | 0; //@line 20236
 }
 if (!(HEAP32[$1 + 20 >> 2] | 0)) {
  $41 = HEAP32[$0 + 124 >> 2] | 0; //@line 20243
  $43 = HEAPU8[$1 >> 0] | 0; //@line 20245
  $47 = HEAP32[$41 + ($43 * 12 | 0) + 4 >> 2] | 0; //@line 20249
  $$038 = ($47 | 0) == 0 ? HEAP32[$41 + ($43 * 12 | 0) >> 2] | 0 : $47; //@line 20252
 } else {
  $$038 = $5; //@line 20254
 }
 $52 = HEAP32[$0 + 96 >> 2] | 0; //@line 20259
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 20261
 $55 = $3 & 255; //@line 20262
 $57 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $55 >> 0] | 0; //@line 20264
 $58 = HEAP32[$6 >> 2] | 0; //@line 20265
 $61 = HEAP32[(HEAP32[$58 >> 2] | 0) + 72 >> 2] | 0; //@line 20268
 $AsyncCtx9 = _emscripten_alloc_async_context(40, sp) | 0; //@line 20269
 FUNCTION_TABLE_vi[$61 & 1023]($58); //@line 20270
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 518; //@line 20273
  HEAP32[$AsyncCtx9 + 4 >> 2] = $6; //@line 20275
  HEAP32[$AsyncCtx9 + 8 >> 2] = $$038; //@line 20277
  HEAP8[$AsyncCtx9 + 12 >> 0] = $3; //@line 20279
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 20281
  HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 20283
  HEAP8[$AsyncCtx9 + 24 >> 0] = $57; //@line 20285
  HEAP32[$AsyncCtx9 + 28 >> 2] = $52; //@line 20287
  HEAP32[$AsyncCtx9 + 32 >> 2] = $54; //@line 20289
  HEAP32[$AsyncCtx9 + 36 >> 2] = $55; //@line 20291
  sp = STACKTOP; //@line 20292
  return 0; //@line 20293
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 20295
 $71 = HEAP32[$6 >> 2] | 0; //@line 20296
 $74 = HEAP32[(HEAP32[$71 >> 2] | 0) + 32 >> 2] | 0; //@line 20299
 $AsyncCtx12 = _emscripten_alloc_async_context(36, sp) | 0; //@line 20300
 FUNCTION_TABLE_vii[$74 & 15]($71, $$038); //@line 20301
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 519; //@line 20304
  HEAP8[$AsyncCtx12 + 4 >> 0] = $3; //@line 20306
  HEAP32[$AsyncCtx12 + 8 >> 2] = $0; //@line 20308
  HEAP32[$AsyncCtx12 + 12 >> 2] = $6; //@line 20310
  HEAP32[$AsyncCtx12 + 16 >> 2] = $1; //@line 20312
  HEAP8[$AsyncCtx12 + 20 >> 0] = $57; //@line 20314
  HEAP32[$AsyncCtx12 + 24 >> 2] = $52; //@line 20316
  HEAP32[$AsyncCtx12 + 28 >> 2] = $54; //@line 20318
  HEAP32[$AsyncCtx12 + 32 >> 2] = $55; //@line 20320
  sp = STACKTOP; //@line 20321
  return 0; //@line 20322
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 20324
 do {
  if ($3 << 24 >> 24 == 7) {
   if (!(HEAP8[$0 + 14 >> 0] | 0)) {
    label = 19; //@line 20332
   } else {
    $87 = HEAP32[$6 >> 2] | 0; //@line 20334
    $90 = HEAP32[(HEAP32[$87 >> 2] | 0) + 16 >> 2] | 0; //@line 20337
    $95 = HEAP32[$1 + 8 >> 2] & 65535; //@line 20342
    $98 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 20345
    $AsyncCtx16 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20346
    FUNCTION_TABLE_viiiiiiiiiiiiiii[$90 & 1]($87, 0, 5e4, ($57 & 255) * 1e3 | 0, 0, 83333, 5, $95, 0, 0, 1, 0, 0, 0, $98); //@line 20347
    if (___async) {
     HEAP32[$AsyncCtx16 >> 2] = 520; //@line 20350
     HEAP32[$AsyncCtx16 + 4 >> 2] = $1; //@line 20352
     HEAP32[$AsyncCtx16 + 8 >> 2] = $52; //@line 20354
     HEAP32[$AsyncCtx16 + 12 >> 2] = $54; //@line 20356
     HEAP32[$AsyncCtx16 + 16 >> 2] = $55; //@line 20358
     HEAP32[$AsyncCtx16 + 20 >> 2] = $6; //@line 20360
     sp = STACKTOP; //@line 20361
     return 0; //@line 20362
    } else {
     _emscripten_free_async_context($AsyncCtx16 | 0); //@line 20364
     $$036 = 0; //@line 20365
     break;
    }
   }
  } else {
   label = 19; //@line 20370
  }
 } while (0);
 do {
  if ((label | 0) == 19) {
   $104 = HEAP32[$6 >> 2] | 0; //@line 20375
   $107 = HEAP32[(HEAP32[$104 >> 2] | 0) + 16 >> 2] | 0; //@line 20378
   $110 = HEAPU8[$1 + 2 >> 0] | 0; //@line 20381
   $114 = HEAP32[$1 + 8 >> 2] & 65535; //@line 20385
   $117 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 20388
   $AsyncCtx20 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20389
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$107 & 1]($104, 1, $110, $57 & 255, 1, 0, 8, $114, 0, 0, 0, 0, 0, 1, $117); //@line 20390
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 521; //@line 20393
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 20395
    HEAP32[$AsyncCtx20 + 8 >> 2] = $52; //@line 20397
    HEAP32[$AsyncCtx20 + 12 >> 2] = $54; //@line 20399
    HEAP32[$AsyncCtx20 + 16 >> 2] = $55; //@line 20401
    HEAP32[$AsyncCtx20 + 20 >> 2] = $6; //@line 20403
    sp = STACKTOP; //@line 20404
    return 0; //@line 20405
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 20407
    $$036 = 1; //@line 20408
    break;
   }
  }
 } while (0);
 $126 = HEAP32[$6 >> 2] | 0; //@line 20419
 $129 = HEAP32[(HEAP32[$126 >> 2] | 0) + 44 >> 2] | 0; //@line 20422
 $132 = (HEAPU8[((HEAP8[$1 + 17 >> 0] | 0) == 0 ? $52 : $54) + $55 >> 0] | 0) + 13 & 255; //@line 20425
 $AsyncCtx24 = _emscripten_alloc_async_context(8, sp) | 0; //@line 20426
 FUNCTION_TABLE_viii[$129 & 7]($126, $$036, $132); //@line 20427
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 522; //@line 20430
  HEAP32[$AsyncCtx24 + 4 >> 2] = $6; //@line 20432
  sp = STACKTOP; //@line 20433
  return 0; //@line 20434
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 20436
 $134 = HEAP32[$6 >> 2] | 0; //@line 20437
 $137 = HEAP32[(HEAP32[$134 >> 2] | 0) + 76 >> 2] | 0; //@line 20440
 $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 20441
 FUNCTION_TABLE_vi[$137 & 1023]($134); //@line 20442
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 523; //@line 20445
  sp = STACKTOP; //@line 20446
  return 0; //@line 20447
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 20449
 $$0 = 1; //@line 20450
 return $$0 | 0; //@line 20451
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6293
 STACKTOP = STACKTOP + 32 | 0; //@line 6294
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6294
 $0 = sp; //@line 6295
 _gpio_init_out($0, 50); //@line 6296
 while (1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6299
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6300
  _wait_ms(150); //@line 6301
  if (___async) {
   label = 3; //@line 6304
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 6307
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6309
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6310
  _wait_ms(150); //@line 6311
  if (___async) {
   label = 5; //@line 6314
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 6317
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6319
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6320
  _wait_ms(150); //@line 6321
  if (___async) {
   label = 7; //@line 6324
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 6327
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6329
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6330
  _wait_ms(150); //@line 6331
  if (___async) {
   label = 9; //@line 6334
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 6337
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6339
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6340
  _wait_ms(150); //@line 6341
  if (___async) {
   label = 11; //@line 6344
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 6347
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6349
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6350
  _wait_ms(150); //@line 6351
  if (___async) {
   label = 13; //@line 6354
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 6357
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6359
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6360
  _wait_ms(150); //@line 6361
  if (___async) {
   label = 15; //@line 6364
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 6367
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6369
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6370
  _wait_ms(150); //@line 6371
  if (___async) {
   label = 17; //@line 6374
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 6377
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6379
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6380
  _wait_ms(400); //@line 6381
  if (___async) {
   label = 19; //@line 6384
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6387
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6389
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6390
  _wait_ms(400); //@line 6391
  if (___async) {
   label = 21; //@line 6394
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6397
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6399
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6400
  _wait_ms(400); //@line 6401
  if (___async) {
   label = 23; //@line 6404
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 6407
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6409
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6410
  _wait_ms(400); //@line 6411
  if (___async) {
   label = 25; //@line 6414
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6417
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6419
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6420
  _wait_ms(400); //@line 6421
  if (___async) {
   label = 27; //@line 6424
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6427
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6429
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6430
  _wait_ms(400); //@line 6431
  if (___async) {
   label = 29; //@line 6434
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6437
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6439
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6440
  _wait_ms(400); //@line 6441
  if (___async) {
   label = 31; //@line 6444
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6447
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6449
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6450
  _wait_ms(400); //@line 6451
  if (___async) {
   label = 33; //@line 6454
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6457
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 615; //@line 6461
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 6463
   sp = STACKTOP; //@line 6464
   STACKTOP = sp; //@line 6465
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 616; //@line 6469
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 6471
   sp = STACKTOP; //@line 6472
   STACKTOP = sp; //@line 6473
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 617; //@line 6477
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 6479
   sp = STACKTOP; //@line 6480
   STACKTOP = sp; //@line 6481
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 618; //@line 6485
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 6487
   sp = STACKTOP; //@line 6488
   STACKTOP = sp; //@line 6489
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 619; //@line 6493
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 6495
   sp = STACKTOP; //@line 6496
   STACKTOP = sp; //@line 6497
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 620; //@line 6501
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 6503
   sp = STACKTOP; //@line 6504
   STACKTOP = sp; //@line 6505
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 621; //@line 6509
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 6511
   sp = STACKTOP; //@line 6512
   STACKTOP = sp; //@line 6513
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 622; //@line 6517
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 6519
   sp = STACKTOP; //@line 6520
   STACKTOP = sp; //@line 6521
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 623; //@line 6525
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 6527
   sp = STACKTOP; //@line 6528
   STACKTOP = sp; //@line 6529
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 624; //@line 6533
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 6535
   sp = STACKTOP; //@line 6536
   STACKTOP = sp; //@line 6537
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 625; //@line 6541
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 6543
   sp = STACKTOP; //@line 6544
   STACKTOP = sp; //@line 6545
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 626; //@line 6549
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 6551
   sp = STACKTOP; //@line 6552
   STACKTOP = sp; //@line 6553
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 627; //@line 6557
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 6559
   sp = STACKTOP; //@line 6560
   STACKTOP = sp; //@line 6561
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 628; //@line 6565
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 6567
   sp = STACKTOP; //@line 6568
   STACKTOP = sp; //@line 6569
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 629; //@line 6573
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 6575
   sp = STACKTOP; //@line 6576
   STACKTOP = sp; //@line 6577
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 630; //@line 6581
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6583
   sp = STACKTOP; //@line 6584
   STACKTOP = sp; //@line 6585
   return;
  }
 }
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_159($0) {
 $0 = $0 | 0;
 var $$058 = 0, $$062 = 0, $$06272 = 0, $$06273 = 0, $$064 = 0, $$06471 = 0, $$06575 = 0, $$06874 = 0, $$1 = 0, $$166 = 0, $$16670 = 0, $$267 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $105 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $31 = 0, $32 = 0, $4 = 0, $45 = 0, $46 = 0, $47 = 0, $53 = 0, $54 = 0, $58 = 0, $6 = 0, $60 = 0, $66 = 0, $67 = 0, $70 = 0, $72 = 0, $8 = 0, $87 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 30329
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 30331
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30333
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30335
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30337
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30339
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30341
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30343
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 30346
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30348
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30350
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30352
 if (HEAP8[___async_retval >> 0] & 1) {
  HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 64; //@line 30359
 }
 $26 = $14 + 1178 | 0; //@line 30361
 if (!(HEAP8[$26 >> 0] | 0)) {
  $$pre$phiZ2D = $18; //@line 30365
 } else {
  HEAP8[$26 >> 0] = 0; //@line 30367
  HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 32; //@line 30370
  $$pre$phiZ2D = $18; //@line 30371
 }
 $31 = $14 + 1756 | 0; //@line 30373
 $32 = HEAP32[$31 >> 2] | 0; //@line 30374
 HEAP8[$14 + 1186 >> 0] = $32; //@line 30377
 HEAP8[$14 + 1187 >> 0] = $32 >>> 8; //@line 30381
 HEAP8[$14 + 1188 >> 0] = $32 >>> 16; //@line 30385
 HEAP8[$14 + 1189 >> 0] = $32 >>> 24; //@line 30389
 $45 = $14 + 1190 | 0; //@line 30391
 HEAP8[$45 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 30392
 $46 = $14 + 1760 | 0; //@line 30393
 $47 = HEAP32[$46 >> 2] | 0; //@line 30394
 HEAP8[$14 + 1191 >> 0] = $47; //@line 30397
 HEAP8[$14 + 1192 >> 0] = $47 >>> 8; //@line 30401
 $53 = $14 + 476 | 0; //@line 30402
 __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($53); //@line 30403
 $54 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($53) | 0; //@line 30404
 do {
  if ($16) {
   label = 16; //@line 30407
  } else {
   if (!(HEAP16[$12 >> 1] | 0)) {
    label = 16; //@line 30412
   } else {
    if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($53) | 0)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($53); //@line 30416
     $$06272 = $2; //@line 30417
     $$06471 = $20; //@line 30417
     $$16670 = 8; //@line 30417
     label = 20; //@line 30418
     break;
    }
    $58 = $54 & 255; //@line 30421
    if (($54 & 255) >= 16) {
     HEAP16[$12 >> 1] = $54 & 255; //@line 30425
     $$062 = 0; //@line 30427
     $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($53) | 0; //@line 30427
     $$166 = 8; //@line 30427
     label = 19; //@line 30428
     break;
    }
    $60 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 30431
    $66 = ($60 & 255) + $58 & 15 | $60 & -16; //@line 30437
    HEAP8[$$pre$phiZ2D >> 0] = $66; //@line 30438
    HEAP8[$45 >> 0] = $66; //@line 30439
    $67 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($53) | 0; //@line 30440
    if (!($54 << 24 >> 24)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($53); //@line 30443
     $$06272 = $2; //@line 30444
     $$06471 = $20; //@line 30444
     $$16670 = 8; //@line 30444
     label = 20; //@line 30445
     break;
    } else {
     $$06575 = 8; //@line 30448
     $$06874 = 0; //@line 30448
     $70 = 0; //@line 30448
     while (1) {
      $72 = $$06575 + 1 << 24 >> 24; //@line 30452
      HEAP8[($$06575 & 255) + ($14 + 1185) >> 0] = HEAP8[$67 + $70 >> 0] | 0; //@line 30455
      $$06874 = $$06874 + 1 << 16 >> 16; //@line 30456
      $70 = $$06874 & 65535; //@line 30457
      if ($70 >>> 0 >= $58 >>> 0) {
       $$062 = $2; //@line 30462
       $$064 = $20; //@line 30462
       $$166 = $72; //@line 30462
       label = 19; //@line 30463
       break;
      } else {
       $$06575 = $72; //@line 30460
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 16) {
  if (!($54 << 24 >> 24)) {
   $$062 = $2; //@line 30474
   $$064 = $20; //@line 30474
   $$166 = 8; //@line 30474
   label = 19; //@line 30475
  } else {
   if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($53) | 0) {
    HEAP16[$12 >> 1] = $54 & 255; //@line 30480
    $$062 = 0; //@line 30482
    $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($53) | 0; //@line 30482
    $$166 = 8; //@line 30482
    label = 19; //@line 30483
   } else {
    $$062 = $2; //@line 30485
    $$064 = $20; //@line 30485
    $$166 = 8; //@line 30485
    label = 19; //@line 30486
   }
  }
 }
 if ((label | 0) == 19) {
  __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($53); //@line 30491
  if (!$$064) {
   $$06273 = $$062; //@line 30494
   $$1 = 0; //@line 30494
   $$267 = $$166; //@line 30494
  } else {
   $$06272 = $$062; //@line 30496
   $$06471 = $$064; //@line 30496
   $$16670 = $$166; //@line 30496
   label = 20; //@line 30497
  }
 }
 if ((label | 0) == 20) {
  if (!(HEAP16[$12 >> 1] | 0)) {
   $$06273 = $$06272; //@line 30504
   $$1 = 0; //@line 30504
   $$267 = $$16670; //@line 30504
  } else {
   $87 = $$16670 + 1 << 24 >> 24; //@line 30506
   HEAP8[($$16670 & 255) + ($14 + 1185) >> 0] = $$06272; //@line 30509
   if (!($$06272 << 24 >> 24)) {
    __ZN14LoRaMacCommand20clear_command_bufferEv($53); //@line 30513
    $$058 = $14 + 1716 | 0; //@line 30515
   } else {
    $$058 = $14 + 1732 | 0; //@line 30517
   }
   $100 = (__ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($14 + 756 | 0, $$06471, HEAP16[$12 >> 1] | 0, $$058, 128, HEAP32[$31 >> 2] | 0, 0, HEAP32[$46 >> 2] | 0, ($87 & 255) + ($14 + 1185) | 0) | 0) == 0; //@line 30526
   $$06273 = $$06272; //@line 30528
   $$1 = $100 ? 0 : -1014; //@line 30528
   $$267 = $87; //@line 30528
  }
 }
 $105 = (HEAPU16[$12 >> 1] | 0) + ($$267 & 255) & 65535; //@line 30535
 HEAP16[$12 >> 1] = $105; //@line 30536
 $108 = HEAP32[$31 >> 2] | 0; //@line 30539
 $109 = HEAP32[$46 >> 2] | 0; //@line 30540
 $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 30541
 $110 = __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($14 + 756 | 0, $22, $105, $14 + 1716 | 0, 128, $108, 0, $109, $10) | 0; //@line 30542
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 395; //@line 30545
  $111 = $ReallocAsyncCtx + 4 | 0; //@line 30546
  HEAP32[$111 >> 2] = $$1; //@line 30547
  $112 = $ReallocAsyncCtx + 8 | 0; //@line 30548
  HEAP32[$112 >> 2] = $10; //@line 30549
  $113 = $ReallocAsyncCtx + 12 | 0; //@line 30550
  HEAP32[$113 >> 2] = $12; //@line 30551
  $114 = $ReallocAsyncCtx + 16 | 0; //@line 30552
  HEAP32[$114 >> 2] = $14; //@line 30553
  $115 = $ReallocAsyncCtx + 20 | 0; //@line 30554
  HEAP8[$115 >> 0] = $2; //@line 30555
  $116 = $ReallocAsyncCtx + 21 | 0; //@line 30556
  HEAP8[$116 >> 0] = $$06273; //@line 30557
  $117 = $ReallocAsyncCtx + 24 | 0; //@line 30558
  HEAP32[$117 >> 2] = $4; //@line 30559
  $118 = $ReallocAsyncCtx + 28 | 0; //@line 30560
  HEAP32[$118 >> 2] = $6; //@line 30561
  $119 = $ReallocAsyncCtx + 32 | 0; //@line 30562
  HEAP32[$119 >> 2] = $8; //@line 30563
  sp = STACKTOP; //@line 30564
  return;
 }
 HEAP32[___async_retval >> 2] = $110; //@line 30568
 ___async_unwind = 0; //@line 30569
 HEAP32[$ReallocAsyncCtx >> 2] = 395; //@line 30570
 $111 = $ReallocAsyncCtx + 4 | 0; //@line 30571
 HEAP32[$111 >> 2] = $$1; //@line 30572
 $112 = $ReallocAsyncCtx + 8 | 0; //@line 30573
 HEAP32[$112 >> 2] = $10; //@line 30574
 $113 = $ReallocAsyncCtx + 12 | 0; //@line 30575
 HEAP32[$113 >> 2] = $12; //@line 30576
 $114 = $ReallocAsyncCtx + 16 | 0; //@line 30577
 HEAP32[$114 >> 2] = $14; //@line 30578
 $115 = $ReallocAsyncCtx + 20 | 0; //@line 30579
 HEAP8[$115 >> 0] = $2; //@line 30580
 $116 = $ReallocAsyncCtx + 21 | 0; //@line 30581
 HEAP8[$116 >> 0] = $$06273; //@line 30582
 $117 = $ReallocAsyncCtx + 24 | 0; //@line 30583
 HEAP32[$117 >> 2] = $4; //@line 30584
 $118 = $ReallocAsyncCtx + 28 | 0; //@line 30585
 HEAP32[$118 >> 2] = $6; //@line 30586
 $119 = $ReallocAsyncCtx + 32 | 0; //@line 30587
 HEAP32[$119 >> 2] = $8; //@line 30588
 sp = STACKTOP; //@line 30589
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_136($0) {
 $0 = $0 | 0;
 var $$pre124 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 28224
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28226
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28228
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28230
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28232
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28234
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28236
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28238
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28240
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28242
 $$pre124 = HEAP32[$12 >> 2] | 0; //@line 28243
 if ($$pre124 | 0) {
  $21 = HEAP32[$$pre124 + 4 >> 2] | 0; //@line 28247
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 28248
  FUNCTION_TABLE_vii[$21 & 15]($14, $16); //@line 28249
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 189; //@line 28252
   $22 = $ReallocAsyncCtx8 + 4 | 0; //@line 28253
   HEAP32[$22 >> 2] = $2; //@line 28254
   $23 = $ReallocAsyncCtx8 + 8 | 0; //@line 28255
   HEAP32[$23 >> 2] = $4; //@line 28256
   $24 = $ReallocAsyncCtx8 + 12 | 0; //@line 28257
   HEAP32[$24 >> 2] = $6; //@line 28258
   $25 = $ReallocAsyncCtx8 + 16 | 0; //@line 28259
   HEAP32[$25 >> 2] = $8; //@line 28260
   $26 = $ReallocAsyncCtx8 + 20 | 0; //@line 28261
   HEAP32[$26 >> 2] = $12; //@line 28262
   $27 = $ReallocAsyncCtx8 + 24 | 0; //@line 28263
   HEAP32[$27 >> 2] = $10; //@line 28264
   $28 = $ReallocAsyncCtx8 + 28 | 0; //@line 28265
   HEAP32[$28 >> 2] = $16; //@line 28266
   $29 = $ReallocAsyncCtx8 + 32 | 0; //@line 28267
   HEAP32[$29 >> 2] = $18; //@line 28268
   sp = STACKTOP; //@line 28269
   return;
  }
  ___async_unwind = 0; //@line 28272
  HEAP32[$ReallocAsyncCtx8 >> 2] = 189; //@line 28273
  $22 = $ReallocAsyncCtx8 + 4 | 0; //@line 28274
  HEAP32[$22 >> 2] = $2; //@line 28275
  $23 = $ReallocAsyncCtx8 + 8 | 0; //@line 28276
  HEAP32[$23 >> 2] = $4; //@line 28277
  $24 = $ReallocAsyncCtx8 + 12 | 0; //@line 28278
  HEAP32[$24 >> 2] = $6; //@line 28279
  $25 = $ReallocAsyncCtx8 + 16 | 0; //@line 28280
  HEAP32[$25 >> 2] = $8; //@line 28281
  $26 = $ReallocAsyncCtx8 + 20 | 0; //@line 28282
  HEAP32[$26 >> 2] = $12; //@line 28283
  $27 = $ReallocAsyncCtx8 + 24 | 0; //@line 28284
  HEAP32[$27 >> 2] = $10; //@line 28285
  $28 = $ReallocAsyncCtx8 + 28 | 0; //@line 28286
  HEAP32[$28 >> 2] = $16; //@line 28287
  $29 = $ReallocAsyncCtx8 + 32 | 0; //@line 28288
  HEAP32[$29 >> 2] = $18; //@line 28289
  sp = STACKTOP; //@line 28290
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 28293
 $30 = $18 + 12 | 0; //@line 28294
 HEAP32[$18 >> 2] = 191; //@line 28295
 HEAP32[$18 + 4 >> 2] = 0; //@line 28297
 HEAP32[$18 + 8 >> 2] = $2; //@line 28299
 HEAP32[$30 >> 2] = 808; //@line 28300
 $31 = $2 + 2384 | 0; //@line 28301
 if (($31 | 0) == ($18 | 0)) {
  $56 = HEAP32[204] | 0; //@line 28305
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 28306
  FUNCTION_TABLE_vi[$56 & 1023]($18); //@line 28307
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 194; //@line 28310
   $57 = $ReallocAsyncCtx12 + 4 | 0; //@line 28311
   HEAP32[$57 >> 2] = $2; //@line 28312
   $58 = $ReallocAsyncCtx12 + 8 | 0; //@line 28313
   HEAP32[$58 >> 2] = $4; //@line 28314
   $59 = $ReallocAsyncCtx12 + 12 | 0; //@line 28315
   HEAP32[$59 >> 2] = $6; //@line 28316
   $60 = $ReallocAsyncCtx12 + 16 | 0; //@line 28317
   HEAP32[$60 >> 2] = $18; //@line 28318
   $61 = $ReallocAsyncCtx12 + 20 | 0; //@line 28319
   HEAP32[$61 >> 2] = $8; //@line 28320
   sp = STACKTOP; //@line 28321
   return;
  }
  ___async_unwind = 0; //@line 28324
  HEAP32[$ReallocAsyncCtx12 >> 2] = 194; //@line 28325
  $57 = $ReallocAsyncCtx12 + 4 | 0; //@line 28326
  HEAP32[$57 >> 2] = $2; //@line 28327
  $58 = $ReallocAsyncCtx12 + 8 | 0; //@line 28328
  HEAP32[$58 >> 2] = $4; //@line 28329
  $59 = $ReallocAsyncCtx12 + 12 | 0; //@line 28330
  HEAP32[$59 >> 2] = $6; //@line 28331
  $60 = $ReallocAsyncCtx12 + 16 | 0; //@line 28332
  HEAP32[$60 >> 2] = $18; //@line 28333
  $61 = $ReallocAsyncCtx12 + 20 | 0; //@line 28334
  HEAP32[$61 >> 2] = $8; //@line 28335
  sp = STACKTOP; //@line 28336
  return;
 }
 $33 = $2 + 2396 | 0; //@line 28339
 $34 = HEAP32[$33 >> 2] | 0; //@line 28340
 if (!$34) {
  $47 = HEAP32[203] | 0; //@line 28344
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 28345
  FUNCTION_TABLE_vii[$47 & 15]($31, $18); //@line 28346
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 193; //@line 28349
   $48 = $ReallocAsyncCtx11 + 4 | 0; //@line 28350
   HEAP32[$48 >> 2] = $2; //@line 28351
   $49 = $ReallocAsyncCtx11 + 8 | 0; //@line 28352
   HEAP32[$49 >> 2] = $4; //@line 28353
   $50 = $ReallocAsyncCtx11 + 12 | 0; //@line 28354
   HEAP32[$50 >> 2] = $6; //@line 28355
   $51 = $ReallocAsyncCtx11 + 16 | 0; //@line 28356
   HEAP32[$51 >> 2] = $18; //@line 28357
   $52 = $ReallocAsyncCtx11 + 20 | 0; //@line 28358
   HEAP32[$52 >> 2] = $8; //@line 28359
   $53 = $ReallocAsyncCtx11 + 24 | 0; //@line 28360
   HEAP32[$53 >> 2] = $30; //@line 28361
   $54 = $ReallocAsyncCtx11 + 28 | 0; //@line 28362
   HEAP32[$54 >> 2] = $33; //@line 28363
   sp = STACKTOP; //@line 28364
   return;
  }
  ___async_unwind = 0; //@line 28367
  HEAP32[$ReallocAsyncCtx11 >> 2] = 193; //@line 28368
  $48 = $ReallocAsyncCtx11 + 4 | 0; //@line 28369
  HEAP32[$48 >> 2] = $2; //@line 28370
  $49 = $ReallocAsyncCtx11 + 8 | 0; //@line 28371
  HEAP32[$49 >> 2] = $4; //@line 28372
  $50 = $ReallocAsyncCtx11 + 12 | 0; //@line 28373
  HEAP32[$50 >> 2] = $6; //@line 28374
  $51 = $ReallocAsyncCtx11 + 16 | 0; //@line 28375
  HEAP32[$51 >> 2] = $18; //@line 28376
  $52 = $ReallocAsyncCtx11 + 20 | 0; //@line 28377
  HEAP32[$52 >> 2] = $8; //@line 28378
  $53 = $ReallocAsyncCtx11 + 24 | 0; //@line 28379
  HEAP32[$53 >> 2] = $30; //@line 28380
  $54 = $ReallocAsyncCtx11 + 28 | 0; //@line 28381
  HEAP32[$54 >> 2] = $33; //@line 28382
  sp = STACKTOP; //@line 28383
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 28387
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 28388
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 28389
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 192; //@line 28392
   $38 = $ReallocAsyncCtx10 + 4 | 0; //@line 28393
   HEAP32[$38 >> 2] = $2; //@line 28394
   $39 = $ReallocAsyncCtx10 + 8 | 0; //@line 28395
   HEAP32[$39 >> 2] = $4; //@line 28396
   $40 = $ReallocAsyncCtx10 + 12 | 0; //@line 28397
   HEAP32[$40 >> 2] = $6; //@line 28398
   $41 = $ReallocAsyncCtx10 + 16 | 0; //@line 28399
   HEAP32[$41 >> 2] = $31; //@line 28400
   $42 = $ReallocAsyncCtx10 + 20 | 0; //@line 28401
   HEAP32[$42 >> 2] = $18; //@line 28402
   $43 = $ReallocAsyncCtx10 + 24 | 0; //@line 28403
   HEAP32[$43 >> 2] = $8; //@line 28404
   $44 = $ReallocAsyncCtx10 + 28 | 0; //@line 28405
   HEAP32[$44 >> 2] = $30; //@line 28406
   $45 = $ReallocAsyncCtx10 + 32 | 0; //@line 28407
   HEAP32[$45 >> 2] = $33; //@line 28408
   sp = STACKTOP; //@line 28409
   return;
  }
  ___async_unwind = 0; //@line 28412
  HEAP32[$ReallocAsyncCtx10 >> 2] = 192; //@line 28413
  $38 = $ReallocAsyncCtx10 + 4 | 0; //@line 28414
  HEAP32[$38 >> 2] = $2; //@line 28415
  $39 = $ReallocAsyncCtx10 + 8 | 0; //@line 28416
  HEAP32[$39 >> 2] = $4; //@line 28417
  $40 = $ReallocAsyncCtx10 + 12 | 0; //@line 28418
  HEAP32[$40 >> 2] = $6; //@line 28419
  $41 = $ReallocAsyncCtx10 + 16 | 0; //@line 28420
  HEAP32[$41 >> 2] = $31; //@line 28421
  $42 = $ReallocAsyncCtx10 + 20 | 0; //@line 28422
  HEAP32[$42 >> 2] = $18; //@line 28423
  $43 = $ReallocAsyncCtx10 + 24 | 0; //@line 28424
  HEAP32[$43 >> 2] = $8; //@line 28425
  $44 = $ReallocAsyncCtx10 + 28 | 0; //@line 28426
  HEAP32[$44 >> 2] = $30; //@line 28427
  $45 = $ReallocAsyncCtx10 + 32 | 0; //@line 28428
  HEAP32[$45 >> 2] = $33; //@line 28429
  sp = STACKTOP; //@line 28430
  return;
 }
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_197($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $70 = 0, $75 = 0, $76 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 1557
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1559
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1561
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1563
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1565
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1569
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1571
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1573
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1575
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 1577
 if (!(__ZN7LoRaMac10nwk_joinedEv($2) | 0)) {
  $76 = $6 + 2879 | 0; //@line 1580
  HEAP8[$76 >> 0] = 1; //@line 1581
  return;
 }
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) >> 2] | 0) != 1) {
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 1588
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 16; //@line 1591
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 1592
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 1593
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 293; //@line 1596
   $45 = $ReallocAsyncCtx5 + 4 | 0; //@line 1597
   HEAP32[$45 >> 2] = $2; //@line 1598
   $46 = $ReallocAsyncCtx5 + 8 | 0; //@line 1599
   HEAP32[$46 >> 2] = $4; //@line 1600
   $47 = $ReallocAsyncCtx5 + 12 | 0; //@line 1601
   HEAP32[$47 >> 2] = $6; //@line 1602
   $48 = $ReallocAsyncCtx5 + 16 | 0; //@line 1603
   HEAP32[$48 >> 2] = $20; //@line 1604
   $49 = $ReallocAsyncCtx5 + 20 | 0; //@line 1605
   HEAP32[$49 >> 2] = $12; //@line 1606
   $50 = $ReallocAsyncCtx5 + 24 | 0; //@line 1607
   HEAP32[$50 >> 2] = $14; //@line 1608
   $51 = $ReallocAsyncCtx5 + 28 | 0; //@line 1609
   HEAP32[$51 >> 2] = $16; //@line 1610
   $52 = $ReallocAsyncCtx5 + 32 | 0; //@line 1611
   HEAP32[$52 >> 2] = $18; //@line 1612
   sp = STACKTOP; //@line 1613
   return;
  }
  ___async_unwind = 0; //@line 1616
  HEAP32[$ReallocAsyncCtx5 >> 2] = 293; //@line 1617
  $45 = $ReallocAsyncCtx5 + 4 | 0; //@line 1618
  HEAP32[$45 >> 2] = $2; //@line 1619
  $46 = $ReallocAsyncCtx5 + 8 | 0; //@line 1620
  HEAP32[$46 >> 2] = $4; //@line 1621
  $47 = $ReallocAsyncCtx5 + 12 | 0; //@line 1622
  HEAP32[$47 >> 2] = $6; //@line 1623
  $48 = $ReallocAsyncCtx5 + 16 | 0; //@line 1624
  HEAP32[$48 >> 2] = $20; //@line 1625
  $49 = $ReallocAsyncCtx5 + 20 | 0; //@line 1626
  HEAP32[$49 >> 2] = $12; //@line 1627
  $50 = $ReallocAsyncCtx5 + 24 | 0; //@line 1628
  HEAP32[$50 >> 2] = $14; //@line 1629
  $51 = $ReallocAsyncCtx5 + 28 | 0; //@line 1630
  HEAP32[$51 >> 2] = $16; //@line 1631
  $52 = $ReallocAsyncCtx5 + 32 | 0; //@line 1632
  HEAP32[$52 >> 2] = $18; //@line 1633
  sp = STACKTOP; //@line 1634
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 32 >> 0] | 0) {
  HEAP32[$8 >> 2] = HEAPU8[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) + 11 >> 0]; //@line 1646
  _mbed_tracef(16, 12506, 12671, $8); //@line 1647
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 1648
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 16; //@line 1651
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 1652
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 1653
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 292; //@line 1656
   $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 1657
   HEAP32[$35 >> 2] = $2; //@line 1658
   $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 1659
   HEAP32[$36 >> 2] = $4; //@line 1660
   $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 1661
   HEAP32[$37 >> 2] = $6; //@line 1662
   $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 1663
   HEAP32[$38 >> 2] = $20; //@line 1664
   $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 1665
   HEAP32[$39 >> 2] = $12; //@line 1666
   $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 1667
   HEAP32[$40 >> 2] = $14; //@line 1668
   $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 1669
   HEAP32[$41 >> 2] = $16; //@line 1670
   $42 = $ReallocAsyncCtx6 + 32 | 0; //@line 1671
   HEAP32[$42 >> 2] = $18; //@line 1672
   sp = STACKTOP; //@line 1673
   return;
  }
  ___async_unwind = 0; //@line 1676
  HEAP32[$ReallocAsyncCtx6 >> 2] = 292; //@line 1677
  $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 1678
  HEAP32[$35 >> 2] = $2; //@line 1679
  $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 1680
  HEAP32[$36 >> 2] = $4; //@line 1681
  $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 1682
  HEAP32[$37 >> 2] = $6; //@line 1683
  $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 1684
  HEAP32[$38 >> 2] = $20; //@line 1685
  $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 1686
  HEAP32[$39 >> 2] = $12; //@line 1687
  $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 1688
  HEAP32[$40 >> 2] = $14; //@line 1689
  $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 1690
  HEAP32[$41 >> 2] = $16; //@line 1691
  $42 = $ReallocAsyncCtx6 + 32 | 0; //@line 1692
  HEAP32[$42 >> 2] = $18; //@line 1693
  sp = STACKTOP; //@line 1694
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 1701
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 1704
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 1705
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 1706
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 294; //@line 1709
   $58 = $ReallocAsyncCtx4 + 4 | 0; //@line 1710
   HEAP32[$58 >> 2] = $4; //@line 1711
   $59 = $ReallocAsyncCtx4 + 8 | 0; //@line 1712
   HEAP32[$59 >> 2] = $2; //@line 1713
   $60 = $ReallocAsyncCtx4 + 12 | 0; //@line 1714
   HEAP32[$60 >> 2] = $20; //@line 1715
   $61 = $ReallocAsyncCtx4 + 16 | 0; //@line 1716
   HEAP32[$61 >> 2] = $6; //@line 1717
   $62 = $ReallocAsyncCtx4 + 20 | 0; //@line 1718
   HEAP32[$62 >> 2] = $12; //@line 1719
   $63 = $ReallocAsyncCtx4 + 24 | 0; //@line 1720
   HEAP32[$63 >> 2] = $14; //@line 1721
   $64 = $ReallocAsyncCtx4 + 28 | 0; //@line 1722
   HEAP32[$64 >> 2] = $16; //@line 1723
   $65 = $ReallocAsyncCtx4 + 32 | 0; //@line 1724
   HEAP32[$65 >> 2] = $18; //@line 1725
   sp = STACKTOP; //@line 1726
   return;
  }
  ___async_unwind = 0; //@line 1729
  HEAP32[$ReallocAsyncCtx4 >> 2] = 294; //@line 1730
  $58 = $ReallocAsyncCtx4 + 4 | 0; //@line 1731
  HEAP32[$58 >> 2] = $4; //@line 1732
  $59 = $ReallocAsyncCtx4 + 8 | 0; //@line 1733
  HEAP32[$59 >> 2] = $2; //@line 1734
  $60 = $ReallocAsyncCtx4 + 12 | 0; //@line 1735
  HEAP32[$60 >> 2] = $20; //@line 1736
  $61 = $ReallocAsyncCtx4 + 16 | 0; //@line 1737
  HEAP32[$61 >> 2] = $6; //@line 1738
  $62 = $ReallocAsyncCtx4 + 20 | 0; //@line 1739
  HEAP32[$62 >> 2] = $12; //@line 1740
  $63 = $ReallocAsyncCtx4 + 24 | 0; //@line 1741
  HEAP32[$63 >> 2] = $14; //@line 1742
  $64 = $ReallocAsyncCtx4 + 28 | 0; //@line 1743
  HEAP32[$64 >> 2] = $16; //@line 1744
  $65 = $ReallocAsyncCtx4 + 32 | 0; //@line 1745
  HEAP32[$65 >> 2] = $18; //@line 1746
  sp = STACKTOP; //@line 1747
  return;
 }
 if (!(HEAP32[$4 >> 2] & 1)) {
  $70 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 1755
  HEAP32[$20 >> 2] = $70 ? 5 : 2; //@line 1757
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  $76 = $6 + 2879 | 0; //@line 1764
  HEAP8[$76 >> 0] = 1; //@line 1765
  return;
 }
 _mbed_tracef(16, 12506, 12691, $12); //@line 1768
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 1769
 _mbed_tracef(16, 12506, 12715, $16); //@line 1770
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 1771
 __ZN12LoRaWANStack23mlme_indication_handlerEv($6); //@line 1772
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 295; //@line 1775
  $75 = $ReallocAsyncCtx2 + 4 | 0; //@line 1776
  HEAP32[$75 >> 2] = $6; //@line 1777
  sp = STACKTOP; //@line 1778
  return;
 }
 ___async_unwind = 0; //@line 1781
 HEAP32[$ReallocAsyncCtx2 >> 2] = 295; //@line 1782
 $75 = $ReallocAsyncCtx2 + 4 | 0; //@line 1783
 HEAP32[$75 >> 2] = $6; //@line 1784
 sp = STACKTOP; //@line 1785
 return;
}
function __ZN7LoRaMac11schedule_txEv($0) {
 $0 = $0 | 0;
 var $$2 = 0, $$pre$phi11Z2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $1 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $133 = 0, $138 = 0, $14 = 0, $143 = 0, $2 = 0, $20 = 0, $22 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $48 = 0, $53 = 0, $55 = 0, $6 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $8 = 0, $84 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx6 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 13203
 STACKTOP = STACKTOP + 48 | 0; //@line 13204
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 13204
 $vararg_buffer1 = sp + 8 | 0; //@line 13205
 $vararg_buffer = sp; //@line 13206
 $1 = sp + 40 | 0; //@line 13207
 $2 = sp + 28 | 0; //@line 13208
 $3 = sp + 24 | 0; //@line 13209
 HEAP32[$3 >> 2] = 0; //@line 13210
 switch (HEAP8[$0 + 1932 >> 0] | 0) {
 case 0:
  {
   $6 = $0 + 1784 | 0; //@line 13215
   HEAP32[$6 >> 2] = 0; //@line 13216
   $$pre$phi11Z2D = $6; //@line 13217
   break;
  }
 case -1:
  {
   $$2 = -1011; //@line 13221
   STACKTOP = sp; //@line 13222
   return $$2 | 0; //@line 13222
  }
 default:
  {
   $$pre$phi11Z2D = $0 + 1784 | 0; //@line 13227
  }
 }
 $8 = HEAP8[$0 + 1183 >> 0] | 0; //@line 13231
 $11 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, HEAP32[$0 + 1788 >> 2] | 0) | 0; //@line 13234
 $12 = $0 + 1179 | 0; //@line 13235
 HEAP8[$12 >> 0] = 1; //@line 13236
 $13 = $0 + 4 | 0; //@line 13237
 $14 = $0 + 2360 | 0; //@line 13238
 $20 = $0 + 1792 | 0; //@line 13244
 __ZN7LoRaPHY17calculate_backoffEbbbhjj($13, (HEAP8[$14 >> 0] | 0) != 0, (HEAP8[$0 + 1180 >> 0] | 0) != 0, 1, $8, $11, HEAP32[$20 >> 2] | 0); //@line 13246
 $22 = HEAP32[$20 >> 2] | 0; //@line 13247
 $27 = (Math_imul($22, HEAPU16[$0 + 1934 >> 1] | 0) | 0) - $22 | 0; //@line 13252
 HEAP32[$$pre$phi11Z2D >> 2] = $27; //@line 13253
 HEAP32[$2 >> 2] = $27; //@line 13254
 $28 = $0 + 1877 | 0; //@line 13255
 $30 = $2 + 8 | 0; //@line 13257
 HEAP8[$30 >> 0] = HEAP8[$28 >> 0] | 0; //@line 13258
 HEAP8[$12 >> 0] = 1; //@line 13259
 HEAP8[$2 + 10 >> 0] = 1; //@line 13261
 HEAP8[$2 + 9 >> 0] = HEAP8[$14 >> 0] | 0; //@line 13264
 HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 1780 >> 2]; //@line 13268
 $37 = $0 + 1182 | 0; //@line 13269
 $38 = __ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_($13, $2, $37, $3, $$pre$phi11Z2D) | 0; //@line 13270
 switch ($38 | 0) {
 case -1020:
  {
   $39 = HEAP32[$3 >> 2] | 0; //@line 13273
   if (!$39) {
    $$2 = 0; //@line 13276
    STACKTOP = sp; //@line 13277
    return $$2 | 0; //@line 13277
   }
   HEAP32[$vararg_buffer >> 2] = $39; //@line 13279
   _mbed_tracef(16, 13263, 13293, $vararg_buffer); //@line 13280
   $42 = HEAP32[$3 >> 2] | 0; //@line 13282
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 13283
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1796 | 0, $42); //@line 13284
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 396; //@line 13287
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 13289
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 13291
    sp = STACKTOP; //@line 13292
    STACKTOP = sp; //@line 13293
    return 0; //@line 13293
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 13295
   $$2 = 0; //@line 13296
   STACKTOP = sp; //@line 13297
   return $$2 | 0; //@line 13297
  }
 case -1022:
 case -1021:
  {
   $$2 = $38; //@line 13301
   STACKTOP = sp; //@line 13302
   return $$2 | 0; //@line 13302
  }
 default:
  {
   $48 = HEAP8[$30 >> 0] | 0; //@line 13309
   HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$37 >> 0]; //@line 13310
   HEAP32[$vararg_buffer1 + 4 >> 2] = $48; //@line 13312
   _mbed_tracef(16, 13263, 13321, $vararg_buffer1); //@line 13313
   $53 = $0 + 1884 | 0; //@line 13318
   $55 = $0 + 1880 | 0; //@line 13320
   __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($13, __ZN7LoRaPHY15apply_DR_offsetEaa($13, HEAP8[$28 >> 0] | 0, HEAP8[$0 + 1909 >> 0] | 0) | 0, HEAP8[$53 >> 0] | 0, HEAP32[$55 >> 2] | 0, $0 + 1940 | 0); //@line 13323
   __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($13, HEAP8[$0 + 1916 >> 0] | 0, HEAP8[$53 >> 0] | 0, HEAP32[$55 >> 2] | 0, $0 + 1964 | 0); //@line 13329
   do {
    if (!(HEAP8[$14 >> 0] | 0)) {
     HEAP32[$0 + 1772 >> 2] = (HEAP32[$0 + 1952 >> 2] | 0) + (HEAP32[$0 + 1900 >> 2] | 0); //@line 13340
     $$pre$phiZ2D = $0 + 1440 | 0; //@line 13343
     $$sink = $0 + 1904 | 0; //@line 13343
    } else {
     $72 = $0 + 1440 | 0; //@line 13345
     $73 = HEAP16[$72 >> 1] | 0; //@line 13346
     $74 = HEAP8[$28 >> 0] | 0; //@line 13347
     $76 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0 + 476 | 0) | 0; //@line 13349
     $84 = ($76 & 255) + ($73 & 65535) & 65535; //@line 13357
     if ($84 >>> 0 < 256 & $84 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb($13, $74, (HEAP8[$0 + 1173 >> 0] | 0) != 0) | 0) & 255) >>> 0) {
      HEAP32[$0 + 1772 >> 2] = (HEAP32[$0 + 1952 >> 2] | 0) + (HEAP32[$0 + 1892 >> 2] | 0); //@line 13369
      $$pre$phiZ2D = $72; //@line 13371
      $$sink = $0 + 1896 | 0; //@line 13371
      break;
     } else {
      $$2 = -1010; //@line 13374
      STACKTOP = sp; //@line 13375
      return $$2 | 0; //@line 13375
     }
    }
   } while (0);
   HEAP32[$0 + 1776 >> 2] = (HEAP32[$0 + 1976 >> 2] | 0) + (HEAP32[$$sink >> 2] | 0); //@line 13384
   $100 = HEAP8[$37 >> 0] | 0; //@line 13385
   HEAP8[$1 >> 0] = 0; //@line 13386
   HEAP8[$vararg_buffer1 >> 0] = $100; //@line 13387
   HEAP8[$vararg_buffer1 + 1 >> 0] = HEAP8[$28 >> 0] | 0; //@line 13390
   HEAP8[$vararg_buffer1 + 2 >> 0] = HEAP8[$0 + 1876 >> 0] | 0; //@line 13394
   HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[$0 + 1924 >> 2]; //@line 13398
   HEAP32[$vararg_buffer1 + 8 >> 2] = HEAP32[$0 + 1928 >> 2]; //@line 13402
   HEAP16[$vararg_buffer1 + 12 >> 1] = HEAP16[$$pre$phiZ2D >> 1] | 0; //@line 13405
   $AsyncCtx10 = _emscripten_alloc_async_context(48, sp) | 0; //@line 13406
   __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj($13, $vararg_buffer1, $1, $20) | 0; //@line 13407
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 397; //@line 13410
    HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 13412
    HEAP32[$AsyncCtx10 + 8 >> 2] = $28; //@line 13414
    HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 13416
    HEAP8[$AsyncCtx10 + 16 >> 0] = $100; //@line 13418
    HEAP32[$AsyncCtx10 + 20 >> 2] = $20; //@line 13420
    HEAP32[$AsyncCtx10 + 24 >> 2] = $14; //@line 13422
    HEAP32[$AsyncCtx10 + 28 >> 2] = $$pre$phiZ2D; //@line 13424
    HEAP32[$AsyncCtx10 + 32 >> 2] = $13; //@line 13426
    HEAP32[$AsyncCtx10 + 36 >> 2] = $vararg_buffer1; //@line 13428
    HEAP32[$AsyncCtx10 + 40 >> 2] = $3; //@line 13430
    HEAP32[$AsyncCtx10 + 44 >> 2] = $2; //@line 13432
    sp = STACKTOP; //@line 13433
    STACKTOP = sp; //@line 13434
    return 0; //@line 13434
   }
   _emscripten_free_async_context($AsyncCtx10 | 0); //@line 13436
   HEAP32[$0 + 2076 >> 2] = 1; //@line 13438
   HEAP32[$0 + 2040 >> 2] = 1; //@line 13440
   HEAP8[$0 + 2044 >> 0] = HEAP8[$28 >> 0] | 0; //@line 13443
   HEAP8[$0 + 2045 >> 0] = HEAP8[$1 >> 0] | 0; //@line 13446
   HEAP32[$0 + 2056 >> 2] = $100 & 255; //@line 13449
   $133 = HEAP32[$20 >> 2] | 0; //@line 13450
   HEAP32[$0 + 2048 >> 2] = $133; //@line 13452
   HEAP32[$0 + 2080 >> 2] = $133; //@line 13454
   if (!(HEAP8[$14 >> 0] | 0)) {
    $138 = $0 + 1701 | 0; //@line 13458
    HEAP8[$138 >> 0] = (HEAP8[$138 >> 0] | 0) + 1 << 24 >> 24; //@line 13461
   }
   $143 = HEAP16[$$pre$phiZ2D >> 1] & 255; //@line 13465
   $AsyncCtx6 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13466
   __ZN7LoRaPHY11handle_sendEPhh($13, $0 + 1185 | 0, $143); //@line 13467
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 398; //@line 13470
    HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 13472
    HEAP32[$AsyncCtx6 + 8 >> 2] = $vararg_buffer1; //@line 13474
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 13476
    HEAP32[$AsyncCtx6 + 16 >> 2] = $2; //@line 13478
    sp = STACKTOP; //@line 13479
    STACKTOP = sp; //@line 13480
    return 0; //@line 13480
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 13482
   $$2 = 0; //@line 13483
   STACKTOP = sp; //@line 13484
   return $$2 | 0; //@line 13484
  }
 }
 return 0; //@line 13487
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_137($0) {
 $0 = $0 | 0;
 var $$pre$i$i38 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 28440
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28442
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28444
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28446
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28448
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28454
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28456
 $$pre$i$i38 = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 28457
 HEAP32[HEAP32[$0 + 24 >> 2] >> 2] = $$pre$i$i38; //@line 28459
 if ($$pre$i$i38 | 0) {
  $20 = HEAP32[$$pre$i$i38 + 8 >> 2] | 0; //@line 28463
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 28464
  FUNCTION_TABLE_vi[$20 & 1023]($14); //@line 28465
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 190; //@line 28468
   $21 = $ReallocAsyncCtx9 + 4 | 0; //@line 28469
   HEAP32[$21 >> 2] = $2; //@line 28470
   $22 = $ReallocAsyncCtx9 + 8 | 0; //@line 28471
   HEAP32[$22 >> 2] = $4; //@line 28472
   $23 = $ReallocAsyncCtx9 + 12 | 0; //@line 28473
   HEAP32[$23 >> 2] = $6; //@line 28474
   $24 = $ReallocAsyncCtx9 + 16 | 0; //@line 28475
   HEAP32[$24 >> 2] = $8; //@line 28476
   $25 = $ReallocAsyncCtx9 + 20 | 0; //@line 28477
   HEAP32[$25 >> 2] = $14; //@line 28478
   $26 = $ReallocAsyncCtx9 + 24 | 0; //@line 28479
   HEAP32[$26 >> 2] = $16; //@line 28480
   sp = STACKTOP; //@line 28481
   return;
  }
  ___async_unwind = 0; //@line 28484
  HEAP32[$ReallocAsyncCtx9 >> 2] = 190; //@line 28485
  $21 = $ReallocAsyncCtx9 + 4 | 0; //@line 28486
  HEAP32[$21 >> 2] = $2; //@line 28487
  $22 = $ReallocAsyncCtx9 + 8 | 0; //@line 28488
  HEAP32[$22 >> 2] = $4; //@line 28489
  $23 = $ReallocAsyncCtx9 + 12 | 0; //@line 28490
  HEAP32[$23 >> 2] = $6; //@line 28491
  $24 = $ReallocAsyncCtx9 + 16 | 0; //@line 28492
  HEAP32[$24 >> 2] = $8; //@line 28493
  $25 = $ReallocAsyncCtx9 + 20 | 0; //@line 28494
  HEAP32[$25 >> 2] = $14; //@line 28495
  $26 = $ReallocAsyncCtx9 + 24 | 0; //@line 28496
  HEAP32[$26 >> 2] = $16; //@line 28497
  sp = STACKTOP; //@line 28498
  return;
 }
 $27 = $16 + 12 | 0; //@line 28501
 HEAP32[$16 >> 2] = 191; //@line 28502
 HEAP32[$16 + 4 >> 2] = 0; //@line 28504
 HEAP32[$16 + 8 >> 2] = $2; //@line 28506
 HEAP32[$27 >> 2] = 808; //@line 28507
 $28 = $2 + 2384 | 0; //@line 28508
 if (($28 | 0) == ($16 | 0)) {
  $53 = HEAP32[204] | 0; //@line 28512
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 28513
  FUNCTION_TABLE_vi[$53 & 1023]($16); //@line 28514
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 194; //@line 28517
   $54 = $ReallocAsyncCtx12 + 4 | 0; //@line 28518
   HEAP32[$54 >> 2] = $2; //@line 28519
   $55 = $ReallocAsyncCtx12 + 8 | 0; //@line 28520
   HEAP32[$55 >> 2] = $4; //@line 28521
   $56 = $ReallocAsyncCtx12 + 12 | 0; //@line 28522
   HEAP32[$56 >> 2] = $6; //@line 28523
   $57 = $ReallocAsyncCtx12 + 16 | 0; //@line 28524
   HEAP32[$57 >> 2] = $16; //@line 28525
   $58 = $ReallocAsyncCtx12 + 20 | 0; //@line 28526
   HEAP32[$58 >> 2] = $8; //@line 28527
   sp = STACKTOP; //@line 28528
   return;
  }
  ___async_unwind = 0; //@line 28531
  HEAP32[$ReallocAsyncCtx12 >> 2] = 194; //@line 28532
  $54 = $ReallocAsyncCtx12 + 4 | 0; //@line 28533
  HEAP32[$54 >> 2] = $2; //@line 28534
  $55 = $ReallocAsyncCtx12 + 8 | 0; //@line 28535
  HEAP32[$55 >> 2] = $4; //@line 28536
  $56 = $ReallocAsyncCtx12 + 12 | 0; //@line 28537
  HEAP32[$56 >> 2] = $6; //@line 28538
  $57 = $ReallocAsyncCtx12 + 16 | 0; //@line 28539
  HEAP32[$57 >> 2] = $16; //@line 28540
  $58 = $ReallocAsyncCtx12 + 20 | 0; //@line 28541
  HEAP32[$58 >> 2] = $8; //@line 28542
  sp = STACKTOP; //@line 28543
  return;
 }
 $30 = $2 + 2396 | 0; //@line 28546
 $31 = HEAP32[$30 >> 2] | 0; //@line 28547
 if (!$31) {
  $44 = HEAP32[203] | 0; //@line 28551
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 28552
  FUNCTION_TABLE_vii[$44 & 15]($28, $16); //@line 28553
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 193; //@line 28556
   $45 = $ReallocAsyncCtx11 + 4 | 0; //@line 28557
   HEAP32[$45 >> 2] = $2; //@line 28558
   $46 = $ReallocAsyncCtx11 + 8 | 0; //@line 28559
   HEAP32[$46 >> 2] = $4; //@line 28560
   $47 = $ReallocAsyncCtx11 + 12 | 0; //@line 28561
   HEAP32[$47 >> 2] = $6; //@line 28562
   $48 = $ReallocAsyncCtx11 + 16 | 0; //@line 28563
   HEAP32[$48 >> 2] = $16; //@line 28564
   $49 = $ReallocAsyncCtx11 + 20 | 0; //@line 28565
   HEAP32[$49 >> 2] = $8; //@line 28566
   $50 = $ReallocAsyncCtx11 + 24 | 0; //@line 28567
   HEAP32[$50 >> 2] = $27; //@line 28568
   $51 = $ReallocAsyncCtx11 + 28 | 0; //@line 28569
   HEAP32[$51 >> 2] = $30; //@line 28570
   sp = STACKTOP; //@line 28571
   return;
  }
  ___async_unwind = 0; //@line 28574
  HEAP32[$ReallocAsyncCtx11 >> 2] = 193; //@line 28575
  $45 = $ReallocAsyncCtx11 + 4 | 0; //@line 28576
  HEAP32[$45 >> 2] = $2; //@line 28577
  $46 = $ReallocAsyncCtx11 + 8 | 0; //@line 28578
  HEAP32[$46 >> 2] = $4; //@line 28579
  $47 = $ReallocAsyncCtx11 + 12 | 0; //@line 28580
  HEAP32[$47 >> 2] = $6; //@line 28581
  $48 = $ReallocAsyncCtx11 + 16 | 0; //@line 28582
  HEAP32[$48 >> 2] = $16; //@line 28583
  $49 = $ReallocAsyncCtx11 + 20 | 0; //@line 28584
  HEAP32[$49 >> 2] = $8; //@line 28585
  $50 = $ReallocAsyncCtx11 + 24 | 0; //@line 28586
  HEAP32[$50 >> 2] = $27; //@line 28587
  $51 = $ReallocAsyncCtx11 + 28 | 0; //@line 28588
  HEAP32[$51 >> 2] = $30; //@line 28589
  sp = STACKTOP; //@line 28590
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 28594
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 28595
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 28596
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 192; //@line 28599
   $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 28600
   HEAP32[$35 >> 2] = $2; //@line 28601
   $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 28602
   HEAP32[$36 >> 2] = $4; //@line 28603
   $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 28604
   HEAP32[$37 >> 2] = $6; //@line 28605
   $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 28606
   HEAP32[$38 >> 2] = $28; //@line 28607
   $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 28608
   HEAP32[$39 >> 2] = $16; //@line 28609
   $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 28610
   HEAP32[$40 >> 2] = $8; //@line 28611
   $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 28612
   HEAP32[$41 >> 2] = $27; //@line 28613
   $42 = $ReallocAsyncCtx10 + 32 | 0; //@line 28614
   HEAP32[$42 >> 2] = $30; //@line 28615
   sp = STACKTOP; //@line 28616
   return;
  }
  ___async_unwind = 0; //@line 28619
  HEAP32[$ReallocAsyncCtx10 >> 2] = 192; //@line 28620
  $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 28621
  HEAP32[$35 >> 2] = $2; //@line 28622
  $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 28623
  HEAP32[$36 >> 2] = $4; //@line 28624
  $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 28625
  HEAP32[$37 >> 2] = $6; //@line 28626
  $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 28627
  HEAP32[$38 >> 2] = $28; //@line 28628
  $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 28629
  HEAP32[$39 >> 2] = $16; //@line 28630
  $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 28631
  HEAP32[$40 >> 2] = $8; //@line 28632
  $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 28633
  HEAP32[$41 >> 2] = $27; //@line 28634
  $42 = $ReallocAsyncCtx10 + 32 | 0; //@line 28635
  HEAP32[$42 >> 2] = $30; //@line 28636
  sp = STACKTOP; //@line 28637
  return;
 }
}
function _mbedtls_gcm_setkey__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $121 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $139 = 0, $144 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $160 = 0, $162 = 0, $167 = 0, $171 = 0, $172 = 0, $174 = 0, $178 = 0, $179 = 0, $181 = 0, $185 = 0, $186 = 0, $188 = 0, $192 = 0, $193 = 0, $195 = 0, $199 = 0, $200 = 0, $202 = 0, $206 = 0, $207 = 0, $209 = 0, $213 = 0, $214 = 0, $216 = 0, $220 = 0, $221 = 0, $223 = 0, $230 = 0, $237 = 0, $244 = 0, $251 = 0, $258 = 0, $265 = 0, $27 = 0, $272 = 0, $279 = 0, $286 = 0, $293 = 0, $300 = 0, $307 = 0, $314 = 0, $321 = 0, $4 = 0, $45 = 0, $6 = 0, $63 = 0, $81 = 0, $83 = 0, $88 = 0, $93 = 0, $98 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14944
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14946
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14950
 if (!$AsyncRetVal) {
  $27 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 14969
  $45 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 14987
  $63 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 15005
  $81 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 15023
  $83 = $6 + 136 | 0; //@line 15025
  HEAP32[$83 >> 2] = $81; //@line 15027
  HEAP32[$83 + 4 >> 2] = $63; //@line 15030
  $88 = $6 + 264 | 0; //@line 15032
  HEAP32[$88 >> 2] = $45; //@line 15034
  HEAP32[$88 + 4 >> 2] = $27; //@line 15037
  $93 = $6 + 200 | 0; //@line 15039
  HEAP32[$93 >> 2] = 0; //@line 15041
  HEAP32[$93 + 4 >> 2] = 0; //@line 15044
  $98 = $6 + 72 | 0; //@line 15046
  HEAP32[$98 >> 2] = 0; //@line 15048
  HEAP32[$98 + 4 >> 2] = 0; //@line 15051
  $103 = _i64Subtract(0, 0, $81 & 1 | 0, 0) | 0; //@line 15053
  $105 = _bitshift64Shl($45 | 0, 0, 63) | 0; //@line 15055
  $106 = tempRet0; //@line 15056
  $107 = _bitshift64Lshr($81 | 0, $63 | 0, 1) | 0; //@line 15057
  $109 = $107 | $105; //@line 15059
  $110 = tempRet0 | $106; //@line 15060
  $111 = _bitshift64Lshr($45 | 0, $27 | 0, 1) | 0; //@line 15061
  $112 = tempRet0; //@line 15062
  $114 = $103 & -520093696 ^ $112; //@line 15064
  $116 = $6 + 104 | 0; //@line 15066
  HEAP32[$116 >> 2] = $109; //@line 15068
  HEAP32[$116 + 4 >> 2] = $110; //@line 15071
  $121 = $6 + 232 | 0; //@line 15073
  HEAP32[$121 >> 2] = $111; //@line 15075
  HEAP32[$121 + 4 >> 2] = $114; //@line 15078
  $126 = _i64Subtract(0, 0, $107 & 1 | 0, 0) | 0; //@line 15080
  $128 = _bitshift64Shl($111 | 0, $112 | 0, 63) | 0; //@line 15082
  $129 = tempRet0; //@line 15083
  $130 = _bitshift64Lshr($109 | 0, $110 | 0, 1) | 0; //@line 15084
  $132 = $130 | $128; //@line 15086
  $133 = tempRet0 | $129; //@line 15087
  $134 = _bitshift64Lshr($111 | 0, $114 | 0, 1) | 0; //@line 15088
  $135 = tempRet0; //@line 15089
  $137 = $126 & -520093696 ^ $135; //@line 15091
  $139 = $6 + 88 | 0; //@line 15093
  HEAP32[$139 >> 2] = $132; //@line 15095
  HEAP32[$139 + 4 >> 2] = $133; //@line 15098
  $144 = $6 + 216 | 0; //@line 15100
  HEAP32[$144 >> 2] = $134; //@line 15102
  HEAP32[$144 + 4 >> 2] = $137; //@line 15105
  $149 = _i64Subtract(0, 0, $130 & 1 | 0, 0) | 0; //@line 15107
  $151 = _bitshift64Shl($134 | 0, $135 | 0, 63) | 0; //@line 15109
  $152 = tempRet0; //@line 15110
  $153 = _bitshift64Lshr($132 | 0, $133 | 0, 1) | 0; //@line 15111
  $155 = $151 | $153; //@line 15113
  $156 = $152 | tempRet0; //@line 15114
  $157 = _bitshift64Lshr($134 | 0, $137 | 0, 1) | 0; //@line 15115
  $160 = $149 & -520093696 ^ tempRet0; //@line 15118
  $162 = $6 + 80 | 0; //@line 15120
  HEAP32[$162 >> 2] = $155; //@line 15122
  HEAP32[$162 + 4 >> 2] = $156; //@line 15125
  $167 = $6 + 208 | 0; //@line 15127
  HEAP32[$167 >> 2] = $157; //@line 15129
  HEAP32[$167 + 4 >> 2] = $160; //@line 15132
  $171 = $157 ^ $134; //@line 15133
  $172 = $160 ^ $137; //@line 15134
  $174 = $6 + 224 | 0; //@line 15136
  HEAP32[$174 >> 2] = $171; //@line 15138
  HEAP32[$174 + 4 >> 2] = $172; //@line 15141
  $178 = $155 ^ $132; //@line 15142
  $179 = $156 ^ $133; //@line 15143
  $181 = $6 + 96 | 0; //@line 15145
  HEAP32[$181 >> 2] = $178; //@line 15147
  HEAP32[$181 + 4 >> 2] = $179; //@line 15150
  $185 = $157 ^ $111; //@line 15151
  $186 = $160 ^ $114; //@line 15152
  $188 = $6 + 240 | 0; //@line 15154
  HEAP32[$188 >> 2] = $185; //@line 15156
  HEAP32[$188 + 4 >> 2] = $186; //@line 15159
  $192 = $155 ^ $109; //@line 15160
  $193 = $156 ^ $110; //@line 15161
  $195 = $6 + 112 | 0; //@line 15163
  HEAP32[$195 >> 2] = $192; //@line 15165
  HEAP32[$195 + 4 >> 2] = $193; //@line 15168
  $199 = $134 ^ $111; //@line 15169
  $200 = $137 ^ $114; //@line 15170
  $202 = $6 + 248 | 0; //@line 15172
  HEAP32[$202 >> 2] = $199; //@line 15174
  HEAP32[$202 + 4 >> 2] = $200; //@line 15177
  $206 = $132 ^ $109; //@line 15178
  $207 = $133 ^ $110; //@line 15179
  $209 = $6 + 120 | 0; //@line 15181
  HEAP32[$209 >> 2] = $206; //@line 15183
  HEAP32[$209 + 4 >> 2] = $207; //@line 15186
  $213 = $171 ^ $111; //@line 15187
  $214 = $172 ^ $114; //@line 15188
  $216 = $6 + 256 | 0; //@line 15190
  HEAP32[$216 >> 2] = $213; //@line 15192
  HEAP32[$216 + 4 >> 2] = $214; //@line 15195
  $220 = $178 ^ $109; //@line 15196
  $221 = $179 ^ $110; //@line 15197
  $223 = $6 + 128 | 0; //@line 15199
  HEAP32[$223 >> 2] = $220; //@line 15201
  HEAP32[$223 + 4 >> 2] = $221; //@line 15204
  $230 = $6 + 272 | 0; //@line 15208
  HEAP32[$230 >> 2] = $157 ^ $45; //@line 15210
  HEAP32[$230 + 4 >> 2] = $160 ^ $27; //@line 15213
  $237 = $6 + 144 | 0; //@line 15217
  HEAP32[$237 >> 2] = $155 ^ $81; //@line 15219
  HEAP32[$237 + 4 >> 2] = $156 ^ $63; //@line 15222
  $244 = $6 + 280 | 0; //@line 15226
  HEAP32[$244 >> 2] = $134 ^ $45; //@line 15228
  HEAP32[$244 + 4 >> 2] = $137 ^ $27; //@line 15231
  $251 = $6 + 152 | 0; //@line 15235
  HEAP32[$251 >> 2] = $132 ^ $81; //@line 15237
  HEAP32[$251 + 4 >> 2] = $133 ^ $63; //@line 15240
  $258 = $6 + 288 | 0; //@line 15244
  HEAP32[$258 >> 2] = $171 ^ $45; //@line 15246
  HEAP32[$258 + 4 >> 2] = $172 ^ $27; //@line 15249
  $265 = $6 + 160 | 0; //@line 15253
  HEAP32[$265 >> 2] = $178 ^ $81; //@line 15255
  HEAP32[$265 + 4 >> 2] = $179 ^ $63; //@line 15258
  $272 = $6 + 296 | 0; //@line 15262
  HEAP32[$272 >> 2] = $111 ^ $45; //@line 15264
  HEAP32[$272 + 4 >> 2] = $114 ^ $27; //@line 15267
  $279 = $6 + 168 | 0; //@line 15271
  HEAP32[$279 >> 2] = $109 ^ $81; //@line 15273
  HEAP32[$279 + 4 >> 2] = $110 ^ $63; //@line 15276
  $286 = $6 + 304 | 0; //@line 15280
  HEAP32[$286 >> 2] = $185 ^ $45; //@line 15282
  HEAP32[$286 + 4 >> 2] = $186 ^ $27; //@line 15285
  $293 = $6 + 176 | 0; //@line 15289
  HEAP32[$293 >> 2] = $192 ^ $81; //@line 15291
  HEAP32[$293 + 4 >> 2] = $193 ^ $63; //@line 15294
  $300 = $6 + 312 | 0; //@line 15298
  HEAP32[$300 >> 2] = $199 ^ $45; //@line 15300
  HEAP32[$300 + 4 >> 2] = $200 ^ $27; //@line 15303
  $307 = $6 + 184 | 0; //@line 15307
  HEAP32[$307 >> 2] = $206 ^ $81; //@line 15309
  HEAP32[$307 + 4 >> 2] = $207 ^ $63; //@line 15312
  $314 = $6 + 320 | 0; //@line 15316
  HEAP32[$314 >> 2] = $213 ^ $45; //@line 15318
  HEAP32[$314 + 4 >> 2] = $214 ^ $27; //@line 15321
  $321 = $6 + 192 | 0; //@line 15325
  HEAP32[$321 >> 2] = $220 ^ $81; //@line 15327
  HEAP32[$321 + 4 >> 2] = $221 ^ $63; //@line 15330
  $$0$i = 0; //@line 15331
 } else {
  $$0$i = $AsyncRetVal; //@line 15333
 }
 HEAP32[___async_retval >> 2] = $$0$i; //@line 15336
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $103 = 0, $106 = 0, $107 = 0, $109 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $127 = 0, $130 = 0, $19 = 0, $20 = 0, $23 = 0, $25 = 0, $30 = 0, $41 = 0, $42 = 0, $43 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $67 = 0, $7 = 0, $85 = 0, $88 = 0, $90 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx6 = 0, $switch$selectcmp$i = 0, $switch$selectcmp4$i = 0, sp = 0;
 sp = STACKTOP; //@line 20551
 $6 = $1 + 1 | 0; //@line 20554
 $7 = HEAP8[$6 >> 0] | 0; //@line 20555
 $10 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + ($7 << 24 >> 24) >> 0] | 0; //@line 20558
 $12 = HEAP32[$0 + 124 >> 2] | 0; //@line 20560
 $19 = $1 + 2 | 0; //@line 20567
 $20 = HEAP8[$19 >> 0] | 0; //@line 20568
 $23 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 20571
 $25 = $20 << 24 >> 24 > $23 << 24 >> 24 ? $20 : $23; //@line 20573
 HEAP8[$19 >> 0] = $25; //@line 20574
 $30 = HEAP32[(HEAP32[$0 + 80 >> 2] | 0) + (($7 & 255) << 2) >> 2] | 0; //@line 20579
 $switch$selectcmp$i = ($30 | 0) == 25e4; //@line 20580
 $switch$selectcmp4$i = ($30 | 0) == 5e5; //@line 20581
 $41 = ~~+Math_floor(+(+HEAPF32[$1 + 4 >> 2] - +($25 << 24 >> 24 << 1 >>> 0) - +HEAPF32[$1 + 8 >> 2])); //@line 20592
 $42 = $0 + 4 | 0; //@line 20593
 $43 = HEAP32[$42 >> 2] | 0; //@line 20594
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 72 >> 2] | 0; //@line 20597
 $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 20598
 FUNCTION_TABLE_vi[$46 & 1023]($43); //@line 20599
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 524; //@line 20602
  HEAP32[$AsyncCtx + 4 >> 2] = $42; //@line 20604
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 20606
  HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 20608
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 20610
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 20612
  HEAP8[$AsyncCtx + 24 >> 0] = $switch$selectcmp$i & 1; //@line 20615
  HEAP8[$AsyncCtx + 25 >> 0] = $switch$selectcmp4$i & 1; //@line 20618
  HEAP8[$AsyncCtx + 26 >> 0] = $10; //@line 20620
  HEAP8[$AsyncCtx + 27 >> 0] = $41; //@line 20622
  HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 20624
  HEAP32[$AsyncCtx + 32 >> 2] = $3; //@line 20626
  HEAP32[$AsyncCtx + 36 >> 2] = $19; //@line 20628
  HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 20630
  sp = STACKTOP; //@line 20631
  return 0; //@line 20632
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 20634
 $60 = HEAP32[$42 >> 2] | 0; //@line 20635
 $63 = HEAP32[(HEAP32[$60 >> 2] | 0) + 32 >> 2] | 0; //@line 20638
 $67 = HEAP32[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 20642
 $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 20643
 FUNCTION_TABLE_vii[$63 & 15]($60, $67); //@line 20644
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 525; //@line 20647
  HEAP32[$AsyncCtx2 + 4 >> 2] = $6; //@line 20649
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 20651
  HEAP32[$AsyncCtx2 + 12 >> 2] = $42; //@line 20653
  HEAP8[$AsyncCtx2 + 16 >> 0] = $switch$selectcmp$i & 1; //@line 20656
  HEAP8[$AsyncCtx2 + 17 >> 0] = $switch$selectcmp4$i & 1; //@line 20659
  HEAP8[$AsyncCtx2 + 18 >> 0] = $10; //@line 20661
  HEAP8[$AsyncCtx2 + 19 >> 0] = $41; //@line 20663
  HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 20665
  HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 20667
  HEAP32[$AsyncCtx2 + 28 >> 2] = $19; //@line 20669
  HEAP32[$AsyncCtx2 + 32 >> 2] = $2; //@line 20671
  sp = STACKTOP; //@line 20672
  return 0; //@line 20673
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 20675
 $85 = HEAP32[$42 >> 2] | 0; //@line 20682
 $88 = HEAP32[(HEAP32[$85 >> 2] | 0) + 20 >> 2] | 0; //@line 20685
 $90 = $switch$selectcmp4$i ? 2 : $switch$selectcmp$i & 1; //@line 20687
 $91 = $10 << 24 >> 24; //@line 20688
 do {
  if ((HEAP8[$6 >> 0] | 0) == (HEAPU8[$0 + 27 >> 0] | 0)) {
   $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20692
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 0, $41, 25e3, $90, $91 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 20693
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 526; //@line 20696
    HEAP32[$AsyncCtx6 + 4 >> 2] = $42; //@line 20698
    HEAP32[$AsyncCtx6 + 8 >> 2] = $1; //@line 20700
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 20702
    HEAP32[$AsyncCtx6 + 16 >> 2] = $19; //@line 20704
    HEAP32[$AsyncCtx6 + 20 >> 2] = $2; //@line 20706
    sp = STACKTOP; //@line 20707
    return 0; //@line 20708
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 20710
    $$0 = 0; //@line 20711
    break;
   }
  } else {
   $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20715
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 1, $41, 0, $90, $91, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 20716
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 527; //@line 20719
    HEAP32[$AsyncCtx10 + 4 >> 2] = $42; //@line 20721
    HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 20723
    HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 20725
    HEAP32[$AsyncCtx10 + 16 >> 2] = $19; //@line 20727
    HEAP32[$AsyncCtx10 + 20 >> 2] = $2; //@line 20729
    sp = STACKTOP; //@line 20730
    return 0; //@line 20731
   } else {
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 20733
    $$0 = 1; //@line 20734
    break;
   }
  }
 } while (0);
 $103 = HEAP32[$42 >> 2] | 0; //@line 20739
 $106 = HEAP32[(HEAP32[$103 >> 2] | 0) + 44 >> 2] | 0; //@line 20742
 $107 = $1 + 12 | 0; //@line 20743
 $109 = HEAP16[$107 >> 1] & 255; //@line 20745
 $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 20746
 FUNCTION_TABLE_viii[$106 & 7]($103, $$0, $109); //@line 20747
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 528; //@line 20750
  HEAP32[$AsyncCtx14 + 4 >> 2] = $42; //@line 20752
  HEAP32[$AsyncCtx14 + 8 >> 2] = $107; //@line 20754
  HEAP32[$AsyncCtx14 + 12 >> 2] = $$0; //@line 20756
  HEAP32[$AsyncCtx14 + 16 >> 2] = $3; //@line 20758
  HEAP32[$AsyncCtx14 + 20 >> 2] = $19; //@line 20760
  HEAP32[$AsyncCtx14 + 24 >> 2] = $2; //@line 20762
  sp = STACKTOP; //@line 20763
  return 0; //@line 20764
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 20766
 $116 = HEAP32[$42 >> 2] | 0; //@line 20767
 $119 = HEAP32[(HEAP32[$116 >> 2] | 0) + 52 >> 2] | 0; //@line 20770
 $121 = HEAP16[$107 >> 1] & 255; //@line 20772
 $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 20773
 $122 = FUNCTION_TABLE_iiii[$119 & 31]($116, $$0, $121) | 0; //@line 20774
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 529; //@line 20777
  HEAP32[$AsyncCtx17 + 4 >> 2] = $3; //@line 20779
  HEAP32[$AsyncCtx17 + 8 >> 2] = $42; //@line 20781
  HEAP32[$AsyncCtx17 + 12 >> 2] = $19; //@line 20783
  HEAP32[$AsyncCtx17 + 16 >> 2] = $2; //@line 20785
  sp = STACKTOP; //@line 20786
  return 0; //@line 20787
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 20789
 HEAP32[$3 >> 2] = $122; //@line 20790
 $127 = HEAP32[$42 >> 2] | 0; //@line 20791
 $130 = HEAP32[(HEAP32[$127 >> 2] | 0) + 76 >> 2] | 0; //@line 20794
 $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 20795
 FUNCTION_TABLE_vi[$130 & 1023]($127); //@line 20796
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 530; //@line 20799
  HEAP32[$AsyncCtx20 + 4 >> 2] = $19; //@line 20801
  HEAP32[$AsyncCtx20 + 8 >> 2] = $2; //@line 20803
  sp = STACKTOP; //@line 20804
  return 0; //@line 20805
 } else {
  _emscripten_free_async_context($AsyncCtx20 | 0); //@line 20807
  HEAP8[$2 >> 0] = HEAP8[$19 >> 0] | 0; //@line 20809
  return 1; //@line 20810
 }
 return 0; //@line 20812
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_139($0) {
 $0 = $0 | 0;
 var $$pre125 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 28805
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28807
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28809
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28811
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28813
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28815
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28817
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28819
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28821
 $$pre125 = HEAP32[$14 >> 2] | 0; //@line 28822
 if ($$pre125 | 0) {
  $19 = HEAP32[$$pre125 + 4 >> 2] | 0; //@line 28826
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 28827
  FUNCTION_TABLE_vii[$19 & 15]($8, $10); //@line 28828
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 193; //@line 28831
   $20 = $ReallocAsyncCtx11 + 4 | 0; //@line 28832
   HEAP32[$20 >> 2] = $2; //@line 28833
   $21 = $ReallocAsyncCtx11 + 8 | 0; //@line 28834
   HEAP32[$21 >> 2] = $4; //@line 28835
   $22 = $ReallocAsyncCtx11 + 12 | 0; //@line 28836
   HEAP32[$22 >> 2] = $6; //@line 28837
   $23 = $ReallocAsyncCtx11 + 16 | 0; //@line 28838
   HEAP32[$23 >> 2] = $10; //@line 28839
   $24 = $ReallocAsyncCtx11 + 20 | 0; //@line 28840
   HEAP32[$24 >> 2] = $12; //@line 28841
   $25 = $ReallocAsyncCtx11 + 24 | 0; //@line 28842
   HEAP32[$25 >> 2] = $14; //@line 28843
   $26 = $ReallocAsyncCtx11 + 28 | 0; //@line 28844
   HEAP32[$26 >> 2] = $16; //@line 28845
   sp = STACKTOP; //@line 28846
   return;
  }
  ___async_unwind = 0; //@line 28849
  HEAP32[$ReallocAsyncCtx11 >> 2] = 193; //@line 28850
  $20 = $ReallocAsyncCtx11 + 4 | 0; //@line 28851
  HEAP32[$20 >> 2] = $2; //@line 28852
  $21 = $ReallocAsyncCtx11 + 8 | 0; //@line 28853
  HEAP32[$21 >> 2] = $4; //@line 28854
  $22 = $ReallocAsyncCtx11 + 12 | 0; //@line 28855
  HEAP32[$22 >> 2] = $6; //@line 28856
  $23 = $ReallocAsyncCtx11 + 16 | 0; //@line 28857
  HEAP32[$23 >> 2] = $10; //@line 28858
  $24 = $ReallocAsyncCtx11 + 20 | 0; //@line 28859
  HEAP32[$24 >> 2] = $12; //@line 28860
  $25 = $ReallocAsyncCtx11 + 24 | 0; //@line 28861
  HEAP32[$25 >> 2] = $14; //@line 28862
  $26 = $ReallocAsyncCtx11 + 28 | 0; //@line 28863
  HEAP32[$26 >> 2] = $16; //@line 28864
  sp = STACKTOP; //@line 28865
  return;
 }
 HEAP32[$16 >> 2] = 0; //@line 28868
 $27 = $12 + 12 | 0; //@line 28869
 HEAP32[$12 >> 2] = 195; //@line 28870
 HEAP32[$12 + 4 >> 2] = 0; //@line 28872
 HEAP32[$12 + 8 >> 2] = $2; //@line 28874
 HEAP32[$27 >> 2] = 808; //@line 28875
 $28 = $2 + 2416 | 0; //@line 28876
 if (($28 | 0) == ($12 | 0)) {
  $51 = HEAP32[204] | 0; //@line 28880
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 28881
  FUNCTION_TABLE_vi[$51 & 1023]($12); //@line 28882
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 198; //@line 28885
   $52 = $ReallocAsyncCtx15 + 4 | 0; //@line 28886
   HEAP32[$52 >> 2] = $12; //@line 28887
   $53 = $ReallocAsyncCtx15 + 8 | 0; //@line 28888
   HEAP32[$53 >> 2] = $2; //@line 28889
   $54 = $ReallocAsyncCtx15 + 12 | 0; //@line 28890
   HEAP32[$54 >> 2] = $4; //@line 28891
   $55 = $ReallocAsyncCtx15 + 16 | 0; //@line 28892
   HEAP32[$55 >> 2] = $6; //@line 28893
   sp = STACKTOP; //@line 28894
   return;
  }
  ___async_unwind = 0; //@line 28897
  HEAP32[$ReallocAsyncCtx15 >> 2] = 198; //@line 28898
  $52 = $ReallocAsyncCtx15 + 4 | 0; //@line 28899
  HEAP32[$52 >> 2] = $12; //@line 28900
  $53 = $ReallocAsyncCtx15 + 8 | 0; //@line 28901
  HEAP32[$53 >> 2] = $2; //@line 28902
  $54 = $ReallocAsyncCtx15 + 12 | 0; //@line 28903
  HEAP32[$54 >> 2] = $4; //@line 28904
  $55 = $ReallocAsyncCtx15 + 16 | 0; //@line 28905
  HEAP32[$55 >> 2] = $6; //@line 28906
  sp = STACKTOP; //@line 28907
  return;
 }
 $30 = $2 + 2428 | 0; //@line 28910
 $31 = HEAP32[$30 >> 2] | 0; //@line 28911
 if (!$31) {
  $43 = HEAP32[203] | 0; //@line 28915
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 28916
  FUNCTION_TABLE_vii[$43 & 15]($28, $12); //@line 28917
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 197; //@line 28920
   $44 = $ReallocAsyncCtx14 + 4 | 0; //@line 28921
   HEAP32[$44 >> 2] = $27; //@line 28922
   $45 = $ReallocAsyncCtx14 + 8 | 0; //@line 28923
   HEAP32[$45 >> 2] = $30; //@line 28924
   $46 = $ReallocAsyncCtx14 + 12 | 0; //@line 28925
   HEAP32[$46 >> 2] = $12; //@line 28926
   $47 = $ReallocAsyncCtx14 + 16 | 0; //@line 28927
   HEAP32[$47 >> 2] = $2; //@line 28928
   $48 = $ReallocAsyncCtx14 + 20 | 0; //@line 28929
   HEAP32[$48 >> 2] = $4; //@line 28930
   $49 = $ReallocAsyncCtx14 + 24 | 0; //@line 28931
   HEAP32[$49 >> 2] = $6; //@line 28932
   sp = STACKTOP; //@line 28933
   return;
  }
  ___async_unwind = 0; //@line 28936
  HEAP32[$ReallocAsyncCtx14 >> 2] = 197; //@line 28937
  $44 = $ReallocAsyncCtx14 + 4 | 0; //@line 28938
  HEAP32[$44 >> 2] = $27; //@line 28939
  $45 = $ReallocAsyncCtx14 + 8 | 0; //@line 28940
  HEAP32[$45 >> 2] = $30; //@line 28941
  $46 = $ReallocAsyncCtx14 + 12 | 0; //@line 28942
  HEAP32[$46 >> 2] = $12; //@line 28943
  $47 = $ReallocAsyncCtx14 + 16 | 0; //@line 28944
  HEAP32[$47 >> 2] = $2; //@line 28945
  $48 = $ReallocAsyncCtx14 + 20 | 0; //@line 28946
  HEAP32[$48 >> 2] = $4; //@line 28947
  $49 = $ReallocAsyncCtx14 + 24 | 0; //@line 28948
  HEAP32[$49 >> 2] = $6; //@line 28949
  sp = STACKTOP; //@line 28950
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 28954
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(32) | 0; //@line 28955
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 28956
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 196; //@line 28959
   $35 = $ReallocAsyncCtx13 + 4 | 0; //@line 28960
   HEAP32[$35 >> 2] = $27; //@line 28961
   $36 = $ReallocAsyncCtx13 + 8 | 0; //@line 28962
   HEAP32[$36 >> 2] = $30; //@line 28963
   $37 = $ReallocAsyncCtx13 + 12 | 0; //@line 28964
   HEAP32[$37 >> 2] = $28; //@line 28965
   $38 = $ReallocAsyncCtx13 + 16 | 0; //@line 28966
   HEAP32[$38 >> 2] = $12; //@line 28967
   $39 = $ReallocAsyncCtx13 + 20 | 0; //@line 28968
   HEAP32[$39 >> 2] = $2; //@line 28969
   $40 = $ReallocAsyncCtx13 + 24 | 0; //@line 28970
   HEAP32[$40 >> 2] = $4; //@line 28971
   $41 = $ReallocAsyncCtx13 + 28 | 0; //@line 28972
   HEAP32[$41 >> 2] = $6; //@line 28973
   sp = STACKTOP; //@line 28974
   return;
  }
  ___async_unwind = 0; //@line 28977
  HEAP32[$ReallocAsyncCtx13 >> 2] = 196; //@line 28978
  $35 = $ReallocAsyncCtx13 + 4 | 0; //@line 28979
  HEAP32[$35 >> 2] = $27; //@line 28980
  $36 = $ReallocAsyncCtx13 + 8 | 0; //@line 28981
  HEAP32[$36 >> 2] = $30; //@line 28982
  $37 = $ReallocAsyncCtx13 + 12 | 0; //@line 28983
  HEAP32[$37 >> 2] = $28; //@line 28984
  $38 = $ReallocAsyncCtx13 + 16 | 0; //@line 28985
  HEAP32[$38 >> 2] = $12; //@line 28986
  $39 = $ReallocAsyncCtx13 + 20 | 0; //@line 28987
  HEAP32[$39 >> 2] = $2; //@line 28988
  $40 = $ReallocAsyncCtx13 + 24 | 0; //@line 28989
  HEAP32[$40 >> 2] = $4; //@line 28990
  $41 = $ReallocAsyncCtx13 + 28 | 0; //@line 28991
  HEAP32[$41 >> 2] = $6; //@line 28992
  sp = STACKTOP; //@line 28993
  return;
 }
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_313($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11858
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11860
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11862
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11864
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11866
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11868
 $12 = $0 + 24 | 0; //@line 11870
 $14 = HEAP32[$12 >> 2] | 0; //@line 11872
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 11875
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 11877
 $21 = HEAP32[$0 + 36 >> 2] | 0; //@line 11879
 $23 = HEAP32[$0 + 40 >> 2] | 0; //@line 11881
 $25 = HEAP32[$0 + 44 >> 2] | 0; //@line 11883
 $27 = HEAP32[$0 + 48 >> 2] | 0; //@line 11885
 $29 = HEAP32[$0 + 52 >> 2] | 0; //@line 11887
 $31 = HEAP32[$0 + 56 >> 2] | 0; //@line 11889
 $33 = HEAP32[$0 + 60 >> 2] | 0; //@line 11891
 $35 = HEAP32[$0 + 64 >> 2] | 0; //@line 11893
 $36 = HEAP32[$2 >> 2] | 0; //@line 11894
 if ($36 | 0) {
  $39 = HEAP32[$36 + 4 >> 2] | 0; //@line 11898
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(64) | 0; //@line 11899
  FUNCTION_TABLE_vii[$39 & 15]($6, $8); //@line 11900
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 57; //@line 11903
   $40 = $ReallocAsyncCtx5 + 4 | 0; //@line 11904
   HEAP32[$40 >> 2] = $2; //@line 11905
   $41 = $ReallocAsyncCtx5 + 8 | 0; //@line 11906
   HEAP32[$41 >> 2] = $4; //@line 11907
   $42 = $ReallocAsyncCtx5 + 12 | 0; //@line 11908
   HEAP32[$42 >> 2] = $10; //@line 11909
   $43 = $ReallocAsyncCtx5 + 16 | 0; //@line 11910
   $44 = $43; //@line 11911
   $45 = $44; //@line 11912
   HEAP32[$45 >> 2] = $14; //@line 11913
   $46 = $44 + 4 | 0; //@line 11914
   $47 = $46; //@line 11915
   HEAP32[$47 >> 2] = $17; //@line 11916
   $48 = $ReallocAsyncCtx5 + 24 | 0; //@line 11917
   HEAP32[$48 >> 2] = $19; //@line 11918
   $49 = $ReallocAsyncCtx5 + 28 | 0; //@line 11919
   HEAP32[$49 >> 2] = $8; //@line 11920
   $50 = $ReallocAsyncCtx5 + 32 | 0; //@line 11921
   HEAP32[$50 >> 2] = $21; //@line 11922
   $51 = $ReallocAsyncCtx5 + 36 | 0; //@line 11923
   HEAP32[$51 >> 2] = $23; //@line 11924
   $52 = $ReallocAsyncCtx5 + 40 | 0; //@line 11925
   HEAP32[$52 >> 2] = $25; //@line 11926
   $53 = $ReallocAsyncCtx5 + 44 | 0; //@line 11927
   HEAP32[$53 >> 2] = $27; //@line 11928
   $54 = $ReallocAsyncCtx5 + 48 | 0; //@line 11929
   HEAP32[$54 >> 2] = $29; //@line 11930
   $55 = $ReallocAsyncCtx5 + 52 | 0; //@line 11931
   HEAP32[$55 >> 2] = $31; //@line 11932
   $56 = $ReallocAsyncCtx5 + 56 | 0; //@line 11933
   HEAP32[$56 >> 2] = $33; //@line 11934
   $57 = $ReallocAsyncCtx5 + 60 | 0; //@line 11935
   HEAP32[$57 >> 2] = $35; //@line 11936
   sp = STACKTOP; //@line 11937
   return;
  }
  ___async_unwind = 0; //@line 11940
  HEAP32[$ReallocAsyncCtx5 >> 2] = 57; //@line 11941
  $40 = $ReallocAsyncCtx5 + 4 | 0; //@line 11942
  HEAP32[$40 >> 2] = $2; //@line 11943
  $41 = $ReallocAsyncCtx5 + 8 | 0; //@line 11944
  HEAP32[$41 >> 2] = $4; //@line 11945
  $42 = $ReallocAsyncCtx5 + 12 | 0; //@line 11946
  HEAP32[$42 >> 2] = $10; //@line 11947
  $43 = $ReallocAsyncCtx5 + 16 | 0; //@line 11948
  $44 = $43; //@line 11949
  $45 = $44; //@line 11950
  HEAP32[$45 >> 2] = $14; //@line 11951
  $46 = $44 + 4 | 0; //@line 11952
  $47 = $46; //@line 11953
  HEAP32[$47 >> 2] = $17; //@line 11954
  $48 = $ReallocAsyncCtx5 + 24 | 0; //@line 11955
  HEAP32[$48 >> 2] = $19; //@line 11956
  $49 = $ReallocAsyncCtx5 + 28 | 0; //@line 11957
  HEAP32[$49 >> 2] = $8; //@line 11958
  $50 = $ReallocAsyncCtx5 + 32 | 0; //@line 11959
  HEAP32[$50 >> 2] = $21; //@line 11960
  $51 = $ReallocAsyncCtx5 + 36 | 0; //@line 11961
  HEAP32[$51 >> 2] = $23; //@line 11962
  $52 = $ReallocAsyncCtx5 + 40 | 0; //@line 11963
  HEAP32[$52 >> 2] = $25; //@line 11964
  $53 = $ReallocAsyncCtx5 + 44 | 0; //@line 11965
  HEAP32[$53 >> 2] = $27; //@line 11966
  $54 = $ReallocAsyncCtx5 + 48 | 0; //@line 11967
  HEAP32[$54 >> 2] = $29; //@line 11968
  $55 = $ReallocAsyncCtx5 + 52 | 0; //@line 11969
  HEAP32[$55 >> 2] = $31; //@line 11970
  $56 = $ReallocAsyncCtx5 + 56 | 0; //@line 11971
  HEAP32[$56 >> 2] = $33; //@line 11972
  $57 = $ReallocAsyncCtx5 + 60 | 0; //@line 11973
  HEAP32[$57 >> 2] = $35; //@line 11974
  sp = STACKTOP; //@line 11975
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 11978
 __ZN4mbed6Ticker5setupEy($10, $14, $17); //@line 11979
 $58 = HEAP32[$2 >> 2] | 0; //@line 11980
 if ($58 | 0) {
  $61 = HEAP32[$58 + 8 >> 2] | 0; //@line 11984
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(40) | 0; //@line 11985
  FUNCTION_TABLE_vi[$61 & 1023]($8); //@line 11986
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 11989
   $62 = $ReallocAsyncCtx6 + 4 | 0; //@line 11990
   HEAP32[$62 >> 2] = $19; //@line 11991
   $63 = $ReallocAsyncCtx6 + 8 | 0; //@line 11992
   HEAP32[$63 >> 2] = $21; //@line 11993
   $64 = $ReallocAsyncCtx6 + 12 | 0; //@line 11994
   HEAP32[$64 >> 2] = $23; //@line 11995
   $65 = $ReallocAsyncCtx6 + 16 | 0; //@line 11996
   HEAP32[$65 >> 2] = $25; //@line 11997
   $66 = $ReallocAsyncCtx6 + 20 | 0; //@line 11998
   HEAP32[$66 >> 2] = $27; //@line 11999
   $67 = $ReallocAsyncCtx6 + 24 | 0; //@line 12000
   HEAP32[$67 >> 2] = $29; //@line 12001
   $68 = $ReallocAsyncCtx6 + 28 | 0; //@line 12002
   HEAP32[$68 >> 2] = $31; //@line 12003
   $69 = $ReallocAsyncCtx6 + 32 | 0; //@line 12004
   HEAP32[$69 >> 2] = $33; //@line 12005
   $70 = $ReallocAsyncCtx6 + 36 | 0; //@line 12006
   HEAP32[$70 >> 2] = $35; //@line 12007
   sp = STACKTOP; //@line 12008
   return;
  }
  ___async_unwind = 0; //@line 12011
  HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 12012
  $62 = $ReallocAsyncCtx6 + 4 | 0; //@line 12013
  HEAP32[$62 >> 2] = $19; //@line 12014
  $63 = $ReallocAsyncCtx6 + 8 | 0; //@line 12015
  HEAP32[$63 >> 2] = $21; //@line 12016
  $64 = $ReallocAsyncCtx6 + 12 | 0; //@line 12017
  HEAP32[$64 >> 2] = $23; //@line 12018
  $65 = $ReallocAsyncCtx6 + 16 | 0; //@line 12019
  HEAP32[$65 >> 2] = $25; //@line 12020
  $66 = $ReallocAsyncCtx6 + 20 | 0; //@line 12021
  HEAP32[$66 >> 2] = $27; //@line 12022
  $67 = $ReallocAsyncCtx6 + 24 | 0; //@line 12023
  HEAP32[$67 >> 2] = $29; //@line 12024
  $68 = $ReallocAsyncCtx6 + 28 | 0; //@line 12025
  HEAP32[$68 >> 2] = $31; //@line 12026
  $69 = $ReallocAsyncCtx6 + 32 | 0; //@line 12027
  HEAP32[$69 >> 2] = $33; //@line 12028
  $70 = $ReallocAsyncCtx6 + 36 | 0; //@line 12029
  HEAP32[$70 >> 2] = $35; //@line 12030
  sp = STACKTOP; //@line 12031
  return;
 }
 if (!(HEAP8[$19 + 770 >> 0] | 0)) {
  HEAP32[$21 >> 2] = 6; //@line 12038
  _mbed_tracef(16, 11020, 11077, $21); //@line 12039
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($19); //@line 12040
  HEAP32[$25 >> 2] = 6; //@line 12041
  _mbed_tracef(16, 11020, 11106, $25); //@line 12042
  return;
 } else {
  HEAP32[$29 >> 2] = 5; //@line 12045
  _mbed_tracef(16, 11020, 11077, $29); //@line 12046
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($19); //@line 12047
  HEAP32[$33 >> 2] = 5; //@line 12048
  _mbed_tracef(16, 11020, 11106, $33); //@line 12049
  return;
 }
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $81 = 0, $87 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 9002
 STACKTOP = STACKTOP + 32 | 0; //@line 9003
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9003
 $vararg_buffer3 = sp + 16 | 0; //@line 9004
 $vararg_buffer1 = sp + 8 | 0; //@line 9005
 $vararg_buffer = sp; //@line 9006
 $5 = $0 + 2480 | 0; //@line 9007
 HEAP32[$5 >> 2] = 5; //@line 9008
 $6 = $0 + 2872 | 0; //@line 9009
 HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -3; //@line 9012
 $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 9013
 __ZN7LoRaMac16on_radio_rx_doneEPKhtsa($0, $1, $2, $3, $4); //@line 9014
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 290; //@line 9017
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 9019
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 9021
  HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 9023
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 9025
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 9027
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer1; //@line 9029
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer1; //@line 9031
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer3; //@line 9033
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer3; //@line 9035
  HEAP32[$AsyncCtx + 40 >> 2] = $5; //@line 9037
  sp = STACKTOP; //@line 9038
  STACKTOP = sp; //@line 9039
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9041
 do {
  if (HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) >> 0] | 0) {
   __ZN7LoRaMac25post_process_mlme_requestEv($0); //@line 9047
   $AsyncCtx11 = _emscripten_alloc_async_context(44, sp) | 0; //@line 9048
   __ZN12LoRaWANStack20mlme_confirm_handlerEv($0); //@line 9049
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 291; //@line 9052
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 9054
    HEAP32[$AsyncCtx11 + 8 >> 2] = $6; //@line 9056
    HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 9058
    HEAP32[$AsyncCtx11 + 16 >> 2] = $vararg_buffer; //@line 9060
    HEAP32[$AsyncCtx11 + 20 >> 2] = $vararg_buffer; //@line 9062
    HEAP32[$AsyncCtx11 + 24 >> 2] = $vararg_buffer1; //@line 9064
    HEAP32[$AsyncCtx11 + 28 >> 2] = $vararg_buffer1; //@line 9066
    HEAP32[$AsyncCtx11 + 32 >> 2] = $vararg_buffer3; //@line 9068
    HEAP32[$AsyncCtx11 + 36 >> 2] = $vararg_buffer3; //@line 9070
    HEAP32[$AsyncCtx11 + 40 >> 2] = $5; //@line 9072
    sp = STACKTOP; //@line 9073
    STACKTOP = sp; //@line 9074
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 9076
    break;
   }
  }
 } while (0);
 if (!(__ZN7LoRaMac10nwk_joinedEv($0) | 0)) {
  $87 = $0 + 2879 | 0; //@line 9083
  HEAP8[$87 >> 0] = 1; //@line 9084
  STACKTOP = sp; //@line 9085
  return;
 }
 do {
  if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) >> 2] | 0) == 1) {
   if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) + 32 >> 0] | 0) {
    HEAP32[$vararg_buffer >> 2] = HEAPU8[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 11 >> 0]; //@line 9101
    _mbed_tracef(16, 12506, 12671, $vararg_buffer); //@line 9102
    __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 9103
    HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 16; //@line 9106
    $AsyncCtx23 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9107
    __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 9108
    if (___async) {
     HEAP32[$AsyncCtx23 >> 2] = 292; //@line 9111
     HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 9113
     HEAP32[$AsyncCtx23 + 8 >> 2] = $6; //@line 9115
     HEAP32[$AsyncCtx23 + 12 >> 2] = $0; //@line 9117
     HEAP32[$AsyncCtx23 + 16 >> 2] = $5; //@line 9119
     HEAP32[$AsyncCtx23 + 20 >> 2] = $vararg_buffer1; //@line 9121
     HEAP32[$AsyncCtx23 + 24 >> 2] = $vararg_buffer1; //@line 9123
     HEAP32[$AsyncCtx23 + 28 >> 2] = $vararg_buffer3; //@line 9125
     HEAP32[$AsyncCtx23 + 32 >> 2] = $vararg_buffer3; //@line 9127
     sp = STACKTOP; //@line 9128
     STACKTOP = sp; //@line 9129
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx23 | 0); //@line 9131
     break;
    }
   }
  } else {
   __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 9136
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 16; //@line 9139
   $AsyncCtx19 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9140
   __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 9141
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 293; //@line 9144
    HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 9146
    HEAP32[$AsyncCtx19 + 8 >> 2] = $6; //@line 9148
    HEAP32[$AsyncCtx19 + 12 >> 2] = $0; //@line 9150
    HEAP32[$AsyncCtx19 + 16 >> 2] = $5; //@line 9152
    HEAP32[$AsyncCtx19 + 20 >> 2] = $vararg_buffer1; //@line 9154
    HEAP32[$AsyncCtx19 + 24 >> 2] = $vararg_buffer1; //@line 9156
    HEAP32[$AsyncCtx19 + 28 >> 2] = $vararg_buffer3; //@line 9158
    HEAP32[$AsyncCtx19 + 32 >> 2] = $vararg_buffer3; //@line 9160
    sp = STACKTOP; //@line 9161
    STACKTOP = sp; //@line 9162
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 9164
    break;
   }
  }
 } while (0);
 do {
  if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) >> 0] | 0) {
   __ZN7LoRaMac21post_process_mcps_indEv($0); //@line 9174
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 2; //@line 9177
   $AsyncCtx15 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9178
   __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 9179
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 294; //@line 9182
    HEAP32[$AsyncCtx15 + 4 >> 2] = $6; //@line 9184
    HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 9186
    HEAP32[$AsyncCtx15 + 12 >> 2] = $5; //@line 9188
    HEAP32[$AsyncCtx15 + 16 >> 2] = $0; //@line 9190
    HEAP32[$AsyncCtx15 + 20 >> 2] = $vararg_buffer1; //@line 9192
    HEAP32[$AsyncCtx15 + 24 >> 2] = $vararg_buffer1; //@line 9194
    HEAP32[$AsyncCtx15 + 28 >> 2] = $vararg_buffer3; //@line 9196
    HEAP32[$AsyncCtx15 + 32 >> 2] = $vararg_buffer3; //@line 9198
    sp = STACKTOP; //@line 9199
    STACKTOP = sp; //@line 9200
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 9202
    break;
   }
  }
 } while (0);
 if (!(HEAP32[$6 >> 2] & 1)) {
  $81 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 9212
  HEAP32[$5 >> 2] = $81 ? 5 : 2; //@line 9214
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($0) | 0) + 4 >> 0] | 0)) {
  $87 = $0 + 2879 | 0; //@line 9221
  HEAP8[$87 >> 0] = 1; //@line 9222
  STACKTOP = sp; //@line 9223
  return;
 }
 _mbed_tracef(16, 12506, 12691, $vararg_buffer1); //@line 9225
 __ZN7LoRaMac21post_process_mlme_indEv($0); //@line 9226
 _mbed_tracef(16, 12506, 12715, $vararg_buffer3); //@line 9227
 $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9228
 __ZN12LoRaWANStack23mlme_indication_handlerEv($0); //@line 9229
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 295; //@line 9232
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 9234
  sp = STACKTOP; //@line 9235
  STACKTOP = sp; //@line 9236
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9238
 $87 = $0 + 2879 | 0; //@line 9239
 HEAP8[$87 >> 0] = 1; //@line 9240
 STACKTOP = sp; //@line 9241
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$off0 = 0, $49 = 0, $57 = 0, $67 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 938
 STACKTOP = STACKTOP + 64 | 0; //@line 939
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 939
 $vararg_buffer8 = sp + 56 | 0; //@line 940
 $vararg_buffer6 = sp + 48 | 0; //@line 941
 $vararg_buffer3 = sp + 16 | 0; //@line 942
 $vararg_buffer1 = sp + 8 | 0; //@line 943
 _mbed_tracef(16, 11020, 11164, sp); //@line 945
 HEAP8[$0 + 689 >> 0] = $1; //@line 948
 $9 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 951
 $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 952
 FUNCTION_TABLE_vii[$9 & 15]($0, $2); //@line 953
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 60; //@line 956
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer8; //@line 958
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer8; //@line 960
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 962
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 964
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer6; //@line 966
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer6; //@line 968
  HEAP16[$AsyncCtx + 28 >> 1] = $3; //@line 970
  HEAP32[$AsyncCtx + 32 >> 2] = $4; //@line 972
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer1; //@line 974
  HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer1; //@line 976
  HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer3; //@line 978
  HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer3; //@line 980
  sp = STACKTOP; //@line 981
  STACKTOP = sp; //@line 982
  return 0; //@line 982
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 984
 HEAP32[$vararg_buffer1 >> 2] = 5; //@line 985
 _mbed_tracef(16, 11020, 11077, $vararg_buffer1); //@line 986
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 987
 HEAP32[$vararg_buffer3 >> 2] = 5; //@line 988
 _mbed_tracef(16, 11020, 11106, $vararg_buffer3); //@line 989
 $AsyncCtx28 = _emscripten_alloc_async_context(36, sp) | 0; //@line 990
 _wait_ms(1); //@line 991
 if (___async) {
  HEAP32[$AsyncCtx28 >> 2] = 61; //@line 994
  HEAP32[$AsyncCtx28 + 4 >> 2] = $vararg_buffer3; //@line 996
  HEAP16[$AsyncCtx28 + 8 >> 1] = $3; //@line 998
  HEAP32[$AsyncCtx28 + 12 >> 2] = $4; //@line 1000
  HEAP32[$AsyncCtx28 + 16 >> 2] = $vararg_buffer8; //@line 1002
  HEAP32[$AsyncCtx28 + 20 >> 2] = $vararg_buffer8; //@line 1004
  HEAP32[$AsyncCtx28 + 24 >> 2] = $0; //@line 1006
  HEAP32[$AsyncCtx28 + 28 >> 2] = $vararg_buffer6; //@line 1008
  HEAP32[$AsyncCtx28 + 32 >> 2] = $vararg_buffer6; //@line 1010
  sp = STACKTOP; //@line 1011
  STACKTOP = sp; //@line 1012
  return 0; //@line 1012
 }
 _emscripten_free_async_context($AsyncCtx28 | 0); //@line 1014
 $AsyncCtx15 = _emscripten_alloc_async_context(40, sp) | 0; //@line 1015
 __ZN4mbed5TimerC2Ev($vararg_buffer3); //@line 1016
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 62; //@line 1019
  HEAP32[$AsyncCtx15 + 4 >> 2] = $vararg_buffer3; //@line 1021
  HEAP16[$AsyncCtx15 + 8 >> 1] = $3; //@line 1023
  HEAP32[$AsyncCtx15 + 12 >> 2] = $4; //@line 1025
  HEAP32[$AsyncCtx15 + 16 >> 2] = $vararg_buffer8; //@line 1027
  HEAP32[$AsyncCtx15 + 20 >> 2] = $vararg_buffer8; //@line 1029
  HEAP32[$AsyncCtx15 + 24 >> 2] = $0; //@line 1031
  HEAP32[$AsyncCtx15 + 28 >> 2] = $vararg_buffer3; //@line 1033
  HEAP32[$AsyncCtx15 + 32 >> 2] = $vararg_buffer6; //@line 1035
  HEAP32[$AsyncCtx15 + 36 >> 2] = $vararg_buffer6; //@line 1037
  sp = STACKTOP; //@line 1038
  STACKTOP = sp; //@line 1039
  return 0; //@line 1039
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 1041
 $AsyncCtx18 = _emscripten_alloc_async_context(40, sp) | 0; //@line 1042
 __ZN4mbed5Timer5startEv($vararg_buffer3); //@line 1043
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 63; //@line 1046
  HEAP16[$AsyncCtx18 + 4 >> 1] = $3; //@line 1048
  HEAP32[$AsyncCtx18 + 8 >> 2] = $vararg_buffer3; //@line 1050
  HEAP32[$AsyncCtx18 + 12 >> 2] = $4; //@line 1052
  HEAP32[$AsyncCtx18 + 16 >> 2] = $vararg_buffer8; //@line 1054
  HEAP32[$AsyncCtx18 + 20 >> 2] = $vararg_buffer8; //@line 1056
  HEAP32[$AsyncCtx18 + 24 >> 2] = $0; //@line 1058
  HEAP32[$AsyncCtx18 + 28 >> 2] = $vararg_buffer3; //@line 1060
  HEAP32[$AsyncCtx18 + 32 >> 2] = $vararg_buffer6; //@line 1062
  HEAP32[$AsyncCtx18 + 36 >> 2] = $vararg_buffer6; //@line 1064
  sp = STACKTOP; //@line 1065
  STACKTOP = sp; //@line 1066
  return 0; //@line 1066
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 1068
 L13 : do {
  if ($3 << 16 >> 16 < -1) {
   $AsyncCtx24 = _emscripten_alloc_async_context(28, sp) | 0; //@line 1072
   $49 = __ZN4mbed5Timer7read_msEv($vararg_buffer3) | 0; //@line 1073
   if (___async) {
    HEAP32[$AsyncCtx24 >> 2] = 64; //@line 1076
    HEAP32[$AsyncCtx24 + 4 >> 2] = $4; //@line 1078
    HEAP32[$AsyncCtx24 + 8 >> 2] = $vararg_buffer6; //@line 1080
    HEAP32[$AsyncCtx24 + 12 >> 2] = $vararg_buffer6; //@line 1082
    HEAP32[$AsyncCtx24 + 16 >> 2] = $0; //@line 1084
    HEAP32[$AsyncCtx24 + 20 >> 2] = $vararg_buffer3; //@line 1086
    HEAP32[$AsyncCtx24 + 24 >> 2] = $vararg_buffer3; //@line 1088
    sp = STACKTOP; //@line 1089
    STACKTOP = sp; //@line 1090
    return 0; //@line 1090
   }
   _emscripten_free_async_context($AsyncCtx24 | 0); //@line 1092
   if (($49 | 0) < ($4 | 0)) {
    _mbed_tracef(16, 11020, 11186, $vararg_buffer6); //@line 1095
    $$0$off0 = 0; //@line 1096
   } else {
    $$0$off0 = 1; //@line 1098
   }
  } else {
   while (1) {
    $AsyncCtx21 = _emscripten_alloc_async_context(28, sp) | 0; //@line 1102
    $57 = __ZN4mbed5Timer7read_msEv($vararg_buffer3) | 0; //@line 1103
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx21 | 0); //@line 1108
    if (($57 | 0) >= ($4 | 0)) {
     $$0$off0 = 1; //@line 1111
     break L13;
    }
    _mbed_tracef(16, 11020, 11186, $vararg_buffer8); //@line 1114
   }
   HEAP32[$AsyncCtx21 >> 2] = 65; //@line 1116
   HEAP32[$AsyncCtx21 + 4 >> 2] = $4; //@line 1118
   HEAP32[$AsyncCtx21 + 8 >> 2] = $vararg_buffer8; //@line 1120
   HEAP32[$AsyncCtx21 + 12 >> 2] = $vararg_buffer8; //@line 1122
   HEAP32[$AsyncCtx21 + 16 >> 2] = $0; //@line 1124
   HEAP32[$AsyncCtx21 + 20 >> 2] = $vararg_buffer3; //@line 1126
   HEAP32[$AsyncCtx21 + 24 >> 2] = $vararg_buffer3; //@line 1128
   sp = STACKTOP; //@line 1129
   STACKTOP = sp; //@line 1130
   return 0; //@line 1130
  }
 } while (0);
 $67 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 1135
 $AsyncCtx12 = _emscripten_alloc_async_context(16, sp) | 0; //@line 1136
 FUNCTION_TABLE_vi[$67 & 1023]($0); //@line 1137
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 66; //@line 1140
  HEAP32[$AsyncCtx12 + 4 >> 2] = $vararg_buffer3; //@line 1142
  HEAP32[$AsyncCtx12 + 8 >> 2] = $vararg_buffer3; //@line 1144
  HEAP8[$AsyncCtx12 + 12 >> 0] = $$0$off0 & 1; //@line 1147
  sp = STACKTOP; //@line 1148
  STACKTOP = sp; //@line 1149
  return 0; //@line 1149
 } else {
  _emscripten_free_async_context($AsyncCtx12 | 0); //@line 1151
  __ZN4mbed5TimerD2Ev($vararg_buffer3); //@line 1152
  STACKTOP = sp; //@line 1153
  return $$0$off0 | 0; //@line 1153
 }
 return 0; //@line 1155
}
function __ZN7LoRaPHY13apply_cf_listEPKhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01314 = 0, $$015 = 0, $$079$i = 0, $106 = 0, $124 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $31 = 0, $34 = 0, $49 = 0, $50 = 0, $56 = 0, $58 = 0, $78 = 0, $83 = 0, $86 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19869
 STACKTOP = STACKTOP + 16 | 0; //@line 19870
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19870
 $3 = sp; //@line 19871
 if (!(HEAP8[$0 + 15 >> 0] | 0)) {
  STACKTOP = sp; //@line 19876
  return;
 }
 $16 = $3 + 8 | 0; //@line 19887
 HEAP8[$16 >> 0] = HEAPU8[$0 + 31 >> 0] << 4 | HEAPU8[$0 + 30 >> 0]; //@line 19888
 L4 : do {
  if ($2 << 24 >> 24 == 16) {
   $18 = $0 + 18 | 0; //@line 19892
   $19 = HEAP8[$18 >> 0] | 0; //@line 19893
   $20 = $0 + 20 | 0; //@line 19894
   if (($19 & 255) < (HEAPU8[$20 >> 0] | 0)) {
    $23 = $0 + 19 | 0; //@line 19898
    $24 = $3 + 4 | 0; //@line 19899
    $25 = $0 + 76 | 0; //@line 19900
    $26 = $3 + 9 | 0; //@line 19901
    $$01314 = 0; //@line 19902
    $$015 = $19; //@line 19902
    $31 = $19; //@line 19902
    L7 : while (1) {
     if ((($31 & 255) + (HEAPU8[$23 >> 0] | 0) | 0) >>> 0 > ($$015 & 255) >>> 0) {
      $34 = $$01314 & 255; //@line 19911
      $49 = HEAPU8[$1 + ($34 + 2) >> 0] << 16 | (HEAPU8[$1 + ($34 + 1) >> 0] << 8 | HEAPU8[$1 + $34 >> 0]); //@line 19926
      $50 = $49 * 100 | 0; //@line 19927
      HEAP32[$3 >> 2] = $50; //@line 19928
      HEAP32[$24 >> 2] = 0; //@line 19929
      if (!$49) {
       label = 16; //@line 19932
      } else {
       L12 : do {
        if (!(HEAP8[$25 >> 0] | 0)) {
         $83 = -1; //@line 19938
        } else {
         $$079$i = 0; //@line 19940
         while (1) {
          $56 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 19944
          $AsyncCtx = _emscripten_alloc_async_context(80, sp) | 0; //@line 19946
          $58 = FUNCTION_TABLE_iiii[$56 & 31]($0, $50, $$079$i & 255) | 0; //@line 19947
          if (___async) {
           label = 10; //@line 19950
           break L7;
          }
          _emscripten_free_async_context($AsyncCtx | 0); //@line 19953
          if ($58) {
           $83 = $$079$i; //@line 19955
           break L12;
          }
          $78 = $$079$i + 1 | 0; //@line 19958
          if (($78 | 0) < (HEAPU8[$25 >> 0] | 0)) {
           $$079$i = $78; //@line 19963
          } else {
           $83 = -1; //@line 19965
           break;
          }
         }
        }
       } while (0);
       HEAP8[$26 >> 0] = $83; //@line 19972
       $86 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 19975
       $AsyncCtx2 = _emscripten_alloc_async_context(68, sp) | 0; //@line 19976
       FUNCTION_TABLE_iiii[$86 & 31]($0, $3, $$015) | 0; //@line 19977
       if (___async) {
        label = 14; //@line 19980
        break;
       }
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 19983
      }
     } else {
      HEAP32[$3 >> 2] = 0; //@line 19986
      HEAP8[$16 >> 0] = 0; //@line 19987
      HEAP32[$24 >> 2] = 0; //@line 19988
      label = 16; //@line 19989
     }
     if ((label | 0) == 16) {
      label = 0; //@line 19992
      $106 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 19995
      $AsyncCtx5 = _emscripten_alloc_async_context(68, sp) | 0; //@line 19996
      FUNCTION_TABLE_iii[$106 & 15]($0, $$015) | 0; //@line 19997
      if (___async) {
       label = 17; //@line 20000
       break;
      }
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 20003
     }
     $124 = $$015 + 1 << 24 >> 24; //@line 20005
     if (($124 & 255) >= (HEAPU8[$20 >> 0] | 0)) {
      break L4;
     }
     $$01314 = ($$01314 & 255) + 3 & 255; //@line 20015
     $$015 = $124; //@line 20015
     $31 = HEAP8[$18 >> 0] | 0; //@line 20015
    }
    if ((label | 0) == 10) {
     HEAP32[$AsyncCtx >> 2] = 512; //@line 20018
     HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 20020
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 20022
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 20024
     HEAP32[$AsyncCtx + 16 >> 2] = $24; //@line 20026
     HEAP32[$AsyncCtx + 20 >> 2] = $16; //@line 20028
     HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 20030
     HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 20032
     HEAP32[$AsyncCtx + 32 >> 2] = $50; //@line 20034
     HEAP32[$AsyncCtx + 36 >> 2] = $25; //@line 20036
     HEAP32[$AsyncCtx + 40 >> 2] = $$079$i; //@line 20038
     HEAP32[$AsyncCtx + 44 >> 2] = $26; //@line 20040
     HEAP32[$AsyncCtx + 48 >> 2] = $0; //@line 20042
     HEAP32[$AsyncCtx + 52 >> 2] = $3; //@line 20044
     HEAP8[$AsyncCtx + 56 >> 0] = $$015; //@line 20046
     HEAP32[$AsyncCtx + 60 >> 2] = $20; //@line 20048
     HEAP32[$AsyncCtx + 64 >> 2] = $0; //@line 20050
     HEAP32[$AsyncCtx + 68 >> 2] = $3; //@line 20052
     HEAP8[$AsyncCtx + 72 >> 0] = $$01314; //@line 20054
     HEAP32[$AsyncCtx + 76 >> 2] = $18; //@line 20056
     sp = STACKTOP; //@line 20057
     STACKTOP = sp; //@line 20058
     return;
    } else if ((label | 0) == 14) {
     HEAP32[$AsyncCtx2 >> 2] = 513; //@line 20061
     HEAP32[$AsyncCtx2 + 4 >> 2] = $23; //@line 20063
     HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 20065
     HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 20067
     HEAP32[$AsyncCtx2 + 16 >> 2] = $24; //@line 20069
     HEAP32[$AsyncCtx2 + 20 >> 2] = $16; //@line 20071
     HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 20073
     HEAP32[$AsyncCtx2 + 28 >> 2] = $0; //@line 20075
     HEAP32[$AsyncCtx2 + 32 >> 2] = $25; //@line 20077
     HEAP32[$AsyncCtx2 + 36 >> 2] = $26; //@line 20079
     HEAP32[$AsyncCtx2 + 40 >> 2] = $0; //@line 20081
     HEAP32[$AsyncCtx2 + 44 >> 2] = $3; //@line 20083
     HEAP32[$AsyncCtx2 + 48 >> 2] = $20; //@line 20085
     HEAP32[$AsyncCtx2 + 52 >> 2] = $0; //@line 20087
     HEAP32[$AsyncCtx2 + 56 >> 2] = $3; //@line 20089
     HEAP32[$AsyncCtx2 + 60 >> 2] = $18; //@line 20091
     HEAP8[$AsyncCtx2 + 64 >> 0] = $$015; //@line 20093
     HEAP8[$AsyncCtx2 + 65 >> 0] = $$01314; //@line 20095
     sp = STACKTOP; //@line 20096
     STACKTOP = sp; //@line 20097
     return;
    } else if ((label | 0) == 17) {
     HEAP32[$AsyncCtx5 >> 2] = 514; //@line 20100
     HEAP32[$AsyncCtx5 + 4 >> 2] = $23; //@line 20102
     HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 20104
     HEAP32[$AsyncCtx5 + 12 >> 2] = $3; //@line 20106
     HEAP32[$AsyncCtx5 + 16 >> 2] = $24; //@line 20108
     HEAP32[$AsyncCtx5 + 20 >> 2] = $16; //@line 20110
     HEAP32[$AsyncCtx5 + 24 >> 2] = $0; //@line 20112
     HEAP32[$AsyncCtx5 + 28 >> 2] = $0; //@line 20114
     HEAP32[$AsyncCtx5 + 32 >> 2] = $25; //@line 20116
     HEAP32[$AsyncCtx5 + 36 >> 2] = $26; //@line 20118
     HEAP32[$AsyncCtx5 + 40 >> 2] = $0; //@line 20120
     HEAP32[$AsyncCtx5 + 44 >> 2] = $3; //@line 20122
     HEAP32[$AsyncCtx5 + 48 >> 2] = $20; //@line 20124
     HEAP32[$AsyncCtx5 + 52 >> 2] = $0; //@line 20126
     HEAP32[$AsyncCtx5 + 56 >> 2] = $3; //@line 20128
     HEAP32[$AsyncCtx5 + 60 >> 2] = $18; //@line 20130
     HEAP8[$AsyncCtx5 + 64 >> 0] = $$015; //@line 20132
     HEAP8[$AsyncCtx5 + 65 >> 0] = $$01314; //@line 20134
     sp = STACKTOP; //@line 20135
     STACKTOP = sp; //@line 20136
     return;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 20141
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $13 = 0, $22 = 0, $25 = 0, $35 = 0, $36 = 0, $37 = 0, $41 = 0, $48 = 0, $51 = 0, $54 = 0, $6 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $71 = 0, $74 = 0, $78 = 0, $8 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 9255
 STACKTOP = STACKTOP + 48 | 0; //@line 9256
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 9256
 $6 = sp + 16 | 0; //@line 9257
 $7 = sp; //@line 9258
 $8 = $1 + 12 | 0; //@line 9259
 $9 = HEAP32[$8 >> 2] | 0; //@line 9260
 do {
  if (!$9) {
   $11 = $7 + 12 | 0; //@line 9264
   HEAP32[$11 >> 2] = 0; //@line 9265
   $36 = 0; //@line 9266
   $48 = $11; //@line 9266
  } else {
   $13 = HEAP32[$9 + 4 >> 2] | 0; //@line 9269
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 9270
   FUNCTION_TABLE_vii[$13 & 15]($7, $1); //@line 9271
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 296; //@line 9274
    HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 9276
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 9278
    HEAP16[$AsyncCtx + 12 >> 1] = $3; //@line 9280
    HEAP16[$AsyncCtx + 14 >> 1] = $4; //@line 9282
    HEAP8[$AsyncCtx + 16 >> 0] = $5; //@line 9284
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 9286
    HEAP32[$AsyncCtx + 24 >> 2] = $7; //@line 9288
    HEAP32[$AsyncCtx + 28 >> 2] = $8; //@line 9290
    sp = STACKTOP; //@line 9291
    STACKTOP = sp; //@line 9292
    return 0; //@line 9292
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 9294
   $$pre$i = HEAP32[$8 >> 2] | 0; //@line 9295
   $22 = $7 + 12 | 0; //@line 9296
   HEAP32[$22 >> 2] = $$pre$i; //@line 9297
   if (!$$pre$i) {
    $36 = 0; //@line 9300
    $48 = $22; //@line 9300
   } else {
    $25 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 9304
    $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9305
    FUNCTION_TABLE_vii[$25 & 15]($6, $7); //@line 9306
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 297; //@line 9309
     HEAP32[$AsyncCtx2 + 4 >> 2] = $22; //@line 9311
     HEAP32[$AsyncCtx2 + 8 >> 2] = $22; //@line 9313
     HEAP32[$AsyncCtx2 + 12 >> 2] = $6; //@line 9315
     HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 9317
     HEAP16[$AsyncCtx2 + 20 >> 1] = $3; //@line 9319
     HEAP16[$AsyncCtx2 + 22 >> 1] = $4; //@line 9321
     HEAP8[$AsyncCtx2 + 24 >> 0] = $5; //@line 9323
     HEAP32[$AsyncCtx2 + 28 >> 2] = $0; //@line 9325
     HEAP32[$AsyncCtx2 + 32 >> 2] = $7; //@line 9327
     sp = STACKTOP; //@line 9328
     STACKTOP = sp; //@line 9329
     return 0; //@line 9329
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9331
     $36 = HEAP32[$22 >> 2] | 0; //@line 9333
     $48 = $22; //@line 9333
     break;
    }
   }
  }
 } while (0);
 $35 = $6 + 12 | 0; //@line 9339
 HEAP32[$35 >> 2] = $36; //@line 9340
 $37 = $6 + 16 | 0; //@line 9341
 HEAP32[$37 >> 2] = $2; //@line 9342
 HEAP16[$6 + 20 >> 1] = $3; //@line 9344
 HEAP16[$6 + 22 >> 1] = $4; //@line 9346
 HEAP8[$6 + 24 >> 0] = $5; //@line 9348
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9349
 $41 = _equeue_alloc($0, 28) | 0; //@line 9350
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 298; //@line 9353
  HEAP32[$AsyncCtx18 + 4 >> 2] = $35; //@line 9355
  HEAP32[$AsyncCtx18 + 8 >> 2] = $35; //@line 9357
  HEAP32[$AsyncCtx18 + 12 >> 2] = $6; //@line 9359
  HEAP32[$AsyncCtx18 + 16 >> 2] = $37; //@line 9361
  HEAP32[$AsyncCtx18 + 20 >> 2] = $0; //@line 9363
  HEAP32[$AsyncCtx18 + 24 >> 2] = $48; //@line 9365
  HEAP32[$AsyncCtx18 + 28 >> 2] = $7; //@line 9367
  sp = STACKTOP; //@line 9368
  STACKTOP = sp; //@line 9369
  return 0; //@line 9369
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 9371
 do {
  if (!$41) {
   $$0$i = 0; //@line 9375
  } else {
   $51 = HEAP32[$35 >> 2] | 0; //@line 9377
   do {
    if (!$51) {
     $64 = 0; //@line 9381
    } else {
     $54 = HEAP32[$51 + 4 >> 2] | 0; //@line 9384
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9385
     FUNCTION_TABLE_vii[$54 & 15]($41, $6); //@line 9386
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 299; //@line 9389
      HEAP32[$AsyncCtx5 + 4 >> 2] = $35; //@line 9391
      HEAP32[$AsyncCtx5 + 8 >> 2] = $41; //@line 9393
      HEAP32[$AsyncCtx5 + 12 >> 2] = $37; //@line 9395
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 9397
      HEAP32[$AsyncCtx5 + 20 >> 2] = $35; //@line 9399
      HEAP32[$AsyncCtx5 + 24 >> 2] = $48; //@line 9401
      HEAP32[$AsyncCtx5 + 28 >> 2] = $6; //@line 9403
      HEAP32[$AsyncCtx5 + 32 >> 2] = $7; //@line 9405
      sp = STACKTOP; //@line 9406
      STACKTOP = sp; //@line 9407
      return 0; //@line 9407
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9409
      $64 = HEAP32[$35 >> 2] | 0; //@line 9411
      break;
     }
    }
   } while (0);
   HEAP32[$41 + 12 >> 2] = $64; //@line 9417
   $65 = $41 + 16 | 0; //@line 9418
   HEAP32[$65 >> 2] = HEAP32[$37 >> 2]; //@line 9419
   HEAP32[$65 + 4 >> 2] = HEAP32[$37 + 4 >> 2]; //@line 9419
   HEAP8[$65 + 8 >> 0] = HEAP8[$37 + 8 >> 0] | 0; //@line 9419
   _equeue_event_dtor($41, 300); //@line 9420
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9421
   $66 = _equeue_post($0, 301, $41) | 0; //@line 9422
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 302; //@line 9425
    HEAP32[$AsyncCtx15 + 4 >> 2] = $35; //@line 9427
    HEAP32[$AsyncCtx15 + 8 >> 2] = $48; //@line 9429
    HEAP32[$AsyncCtx15 + 12 >> 2] = $6; //@line 9431
    HEAP32[$AsyncCtx15 + 16 >> 2] = $7; //@line 9433
    sp = STACKTOP; //@line 9434
    STACKTOP = sp; //@line 9435
    return 0; //@line 9435
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 9437
    $$0$i = $66; //@line 9438
    break;
   }
  }
 } while (0);
 $71 = HEAP32[$35 >> 2] | 0; //@line 9443
 do {
  if ($71 | 0) {
   $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 9448
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9449
   FUNCTION_TABLE_vi[$74 & 1023]($6); //@line 9450
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 303; //@line 9453
    HEAP32[$AsyncCtx8 + 4 >> 2] = $48; //@line 9455
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 9457
    HEAP32[$AsyncCtx8 + 12 >> 2] = $7; //@line 9459
    sp = STACKTOP; //@line 9460
    STACKTOP = sp; //@line 9461
    return 0; //@line 9461
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 9463
    break;
   }
  }
 } while (0);
 $78 = HEAP32[$48 >> 2] | 0; //@line 9468
 if (!$78) {
  STACKTOP = sp; //@line 9471
  return $$0$i | 0; //@line 9471
 }
 $81 = HEAP32[$78 + 8 >> 2] | 0; //@line 9474
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9475
 FUNCTION_TABLE_vi[$81 & 1023]($7); //@line 9476
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 304; //@line 9479
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 9481
  sp = STACKTOP; //@line 9482
  STACKTOP = sp; //@line 9483
  return 0; //@line 9483
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 9485
 STACKTOP = sp; //@line 9486
 return $$0$i | 0; //@line 9486
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_132($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27406
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27408
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27410
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27412
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27414
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27418
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27420
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27422
 $17 = $12 + 12 | 0; //@line 27423
 HEAP32[$12 >> 2] = 6; //@line 27424
 HEAP32[$12 + 4 >> 2] = 0; //@line 27426
 HEAP32[$12 + 8 >> 2] = $2; //@line 27428
 HEAP32[$17 >> 2] = 820; //@line 27429
 $18 = $2 + 2400 | 0; //@line 27430
 if (($18 | 0) == ($12 | 0)) {
  $47 = HEAP32[207] | 0; //@line 27434
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 27435
  FUNCTION_TABLE_vi[$47 & 1023]($12); //@line 27436
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 186; //@line 27439
   $48 = $ReallocAsyncCtx6 + 4 | 0; //@line 27440
   HEAP32[$48 >> 2] = $2; //@line 27441
   $49 = $ReallocAsyncCtx6 + 8 | 0; //@line 27442
   HEAP32[$49 >> 2] = $4; //@line 27443
   $50 = $ReallocAsyncCtx6 + 12 | 0; //@line 27444
   HEAP32[$50 >> 2] = $6; //@line 27445
   $51 = $ReallocAsyncCtx6 + 16 | 0; //@line 27446
   HEAP32[$51 >> 2] = $8; //@line 27447
   $52 = $ReallocAsyncCtx6 + 20 | 0; //@line 27448
   HEAP32[$52 >> 2] = $12; //@line 27449
   $53 = $ReallocAsyncCtx6 + 24 | 0; //@line 27450
   HEAP32[$53 >> 2] = $14; //@line 27451
   $54 = $ReallocAsyncCtx6 + 28 | 0; //@line 27452
   HEAP32[$54 >> 2] = $16; //@line 27453
   sp = STACKTOP; //@line 27454
   return;
  }
  ___async_unwind = 0; //@line 27457
  HEAP32[$ReallocAsyncCtx6 >> 2] = 186; //@line 27458
  $48 = $ReallocAsyncCtx6 + 4 | 0; //@line 27459
  HEAP32[$48 >> 2] = $2; //@line 27460
  $49 = $ReallocAsyncCtx6 + 8 | 0; //@line 27461
  HEAP32[$49 >> 2] = $4; //@line 27462
  $50 = $ReallocAsyncCtx6 + 12 | 0; //@line 27463
  HEAP32[$50 >> 2] = $6; //@line 27464
  $51 = $ReallocAsyncCtx6 + 16 | 0; //@line 27465
  HEAP32[$51 >> 2] = $8; //@line 27466
  $52 = $ReallocAsyncCtx6 + 20 | 0; //@line 27467
  HEAP32[$52 >> 2] = $12; //@line 27468
  $53 = $ReallocAsyncCtx6 + 24 | 0; //@line 27469
  HEAP32[$53 >> 2] = $14; //@line 27470
  $54 = $ReallocAsyncCtx6 + 28 | 0; //@line 27471
  HEAP32[$54 >> 2] = $16; //@line 27472
  sp = STACKTOP; //@line 27473
  return;
 }
 $20 = $2 + 2412 | 0; //@line 27476
 $21 = HEAP32[$20 >> 2] | 0; //@line 27477
 if (!$21) {
  $36 = HEAP32[206] | 0; //@line 27481
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 27482
  FUNCTION_TABLE_vii[$36 & 15]($18, $12); //@line 27483
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 185; //@line 27486
   $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 27487
   HEAP32[$37 >> 2] = $2; //@line 27488
   $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 27489
   HEAP32[$38 >> 2] = $4; //@line 27490
   $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 27491
   HEAP32[$39 >> 2] = $6; //@line 27492
   $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 27493
   HEAP32[$40 >> 2] = $8; //@line 27494
   $41 = $ReallocAsyncCtx5 + 20 | 0; //@line 27495
   HEAP32[$41 >> 2] = $17; //@line 27496
   $42 = $ReallocAsyncCtx5 + 24 | 0; //@line 27497
   HEAP32[$42 >> 2] = $20; //@line 27498
   $43 = $ReallocAsyncCtx5 + 28 | 0; //@line 27499
   HEAP32[$43 >> 2] = $12; //@line 27500
   $44 = $ReallocAsyncCtx5 + 32 | 0; //@line 27501
   HEAP32[$44 >> 2] = $14; //@line 27502
   $45 = $ReallocAsyncCtx5 + 36 | 0; //@line 27503
   HEAP32[$45 >> 2] = $16; //@line 27504
   sp = STACKTOP; //@line 27505
   return;
  }
  ___async_unwind = 0; //@line 27508
  HEAP32[$ReallocAsyncCtx5 >> 2] = 185; //@line 27509
  $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 27510
  HEAP32[$37 >> 2] = $2; //@line 27511
  $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 27512
  HEAP32[$38 >> 2] = $4; //@line 27513
  $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 27514
  HEAP32[$39 >> 2] = $6; //@line 27515
  $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 27516
  HEAP32[$40 >> 2] = $8; //@line 27517
  $41 = $ReallocAsyncCtx5 + 20 | 0; //@line 27518
  HEAP32[$41 >> 2] = $17; //@line 27519
  $42 = $ReallocAsyncCtx5 + 24 | 0; //@line 27520
  HEAP32[$42 >> 2] = $20; //@line 27521
  $43 = $ReallocAsyncCtx5 + 28 | 0; //@line 27522
  HEAP32[$43 >> 2] = $12; //@line 27523
  $44 = $ReallocAsyncCtx5 + 32 | 0; //@line 27524
  HEAP32[$44 >> 2] = $14; //@line 27525
  $45 = $ReallocAsyncCtx5 + 36 | 0; //@line 27526
  HEAP32[$45 >> 2] = $16; //@line 27527
  sp = STACKTOP; //@line 27528
  return;
 } else {
  $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 27532
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 27533
  FUNCTION_TABLE_vi[$24 & 1023]($18); //@line 27534
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 184; //@line 27537
   $25 = $ReallocAsyncCtx4 + 4 | 0; //@line 27538
   HEAP32[$25 >> 2] = $2; //@line 27539
   $26 = $ReallocAsyncCtx4 + 8 | 0; //@line 27540
   HEAP32[$26 >> 2] = $4; //@line 27541
   $27 = $ReallocAsyncCtx4 + 12 | 0; //@line 27542
   HEAP32[$27 >> 2] = $6; //@line 27543
   $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 27544
   HEAP32[$28 >> 2] = $8; //@line 27545
   $29 = $ReallocAsyncCtx4 + 20 | 0; //@line 27546
   HEAP32[$29 >> 2] = $20; //@line 27547
   $30 = $ReallocAsyncCtx4 + 24 | 0; //@line 27548
   HEAP32[$30 >> 2] = $17; //@line 27549
   $31 = $ReallocAsyncCtx4 + 28 | 0; //@line 27550
   HEAP32[$31 >> 2] = $18; //@line 27551
   $32 = $ReallocAsyncCtx4 + 32 | 0; //@line 27552
   HEAP32[$32 >> 2] = $12; //@line 27553
   $33 = $ReallocAsyncCtx4 + 36 | 0; //@line 27554
   HEAP32[$33 >> 2] = $14; //@line 27555
   $34 = $ReallocAsyncCtx4 + 40 | 0; //@line 27556
   HEAP32[$34 >> 2] = $16; //@line 27557
   sp = STACKTOP; //@line 27558
   return;
  }
  ___async_unwind = 0; //@line 27561
  HEAP32[$ReallocAsyncCtx4 >> 2] = 184; //@line 27562
  $25 = $ReallocAsyncCtx4 + 4 | 0; //@line 27563
  HEAP32[$25 >> 2] = $2; //@line 27564
  $26 = $ReallocAsyncCtx4 + 8 | 0; //@line 27565
  HEAP32[$26 >> 2] = $4; //@line 27566
  $27 = $ReallocAsyncCtx4 + 12 | 0; //@line 27567
  HEAP32[$27 >> 2] = $6; //@line 27568
  $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 27569
  HEAP32[$28 >> 2] = $8; //@line 27570
  $29 = $ReallocAsyncCtx4 + 20 | 0; //@line 27571
  HEAP32[$29 >> 2] = $20; //@line 27572
  $30 = $ReallocAsyncCtx4 + 24 | 0; //@line 27573
  HEAP32[$30 >> 2] = $17; //@line 27574
  $31 = $ReallocAsyncCtx4 + 28 | 0; //@line 27575
  HEAP32[$31 >> 2] = $18; //@line 27576
  $32 = $ReallocAsyncCtx4 + 32 | 0; //@line 27577
  HEAP32[$32 >> 2] = $12; //@line 27578
  $33 = $ReallocAsyncCtx4 + 36 | 0; //@line 27579
  HEAP32[$33 >> 2] = $14; //@line 27580
  $34 = $ReallocAsyncCtx4 + 40 | 0; //@line 27581
  HEAP32[$34 >> 2] = $16; //@line 27582
  sp = STACKTOP; //@line 27583
  return;
 }
}
function _main__async_cb_14($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $45 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18846
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18848
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18850
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18852
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18854
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18856
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18860
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 18863
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18865
 $19 = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 18866
 if ($19 | 0) {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 18870
  $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 18871
  FUNCTION_TABLE_vi[$22 & 1023]($18); //@line 18872
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 653; //@line 18875
   $23 = $ReallocAsyncCtx + 4 | 0; //@line 18876
   HEAP32[$23 >> 2] = $10; //@line 18877
   $24 = $ReallocAsyncCtx + 8 | 0; //@line 18878
   HEAP32[$24 >> 2] = $14; //@line 18879
   $25 = $ReallocAsyncCtx + 12 | 0; //@line 18880
   HEAP32[$25 >> 2] = $8; //@line 18881
   $26 = $ReallocAsyncCtx + 16 | 0; //@line 18882
   $$expand_i1_val = $16 & 1; //@line 18883
   HEAP8[$26 >> 0] = $$expand_i1_val; //@line 18884
   $27 = $ReallocAsyncCtx + 20 | 0; //@line 18885
   HEAP32[$27 >> 2] = $2; //@line 18886
   $28 = $ReallocAsyncCtx + 24 | 0; //@line 18887
   HEAP32[$28 >> 2] = $4; //@line 18888
   $29 = $ReallocAsyncCtx + 28 | 0; //@line 18889
   HEAP32[$29 >> 2] = $6; //@line 18890
   sp = STACKTOP; //@line 18891
   return;
  }
  ___async_unwind = 0; //@line 18894
  HEAP32[$ReallocAsyncCtx >> 2] = 653; //@line 18895
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 18896
  HEAP32[$23 >> 2] = $10; //@line 18897
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 18898
  HEAP32[$24 >> 2] = $14; //@line 18899
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 18900
  HEAP32[$25 >> 2] = $8; //@line 18901
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 18902
  $$expand_i1_val = $16 & 1; //@line 18903
  HEAP8[$26 >> 0] = $$expand_i1_val; //@line 18904
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 18905
  HEAP32[$27 >> 2] = $2; //@line 18906
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 18907
  HEAP32[$28 >> 2] = $4; //@line 18908
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 18909
  HEAP32[$29 >> 2] = $6; //@line 18910
  sp = STACKTOP; //@line 18911
  return;
 }
 if (!$16) {
  $31 = (HEAP32[$10 >> 2] | 0) + -1 | 0; //@line 18916
  HEAP32[$10 >> 2] = $31; //@line 18917
  if (!$31) {
   $34 = HEAP32[$10 + 24 >> 2] | 0; //@line 18921
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 18922
   FUNCTION_TABLE_vi[$34 & 1023]($14); //@line 18923
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 654; //@line 18926
    $35 = $ReallocAsyncCtx2 + 4 | 0; //@line 18927
    HEAP32[$35 >> 2] = $10; //@line 18928
    $36 = $ReallocAsyncCtx2 + 8 | 0; //@line 18929
    HEAP32[$36 >> 2] = $8; //@line 18930
    $37 = $ReallocAsyncCtx2 + 12 | 0; //@line 18931
    HEAP32[$37 >> 2] = $2; //@line 18932
    $38 = $ReallocAsyncCtx2 + 16 | 0; //@line 18933
    HEAP32[$38 >> 2] = $4; //@line 18934
    $39 = $ReallocAsyncCtx2 + 20 | 0; //@line 18935
    HEAP32[$39 >> 2] = $6; //@line 18936
    sp = STACKTOP; //@line 18937
    return;
   }
   ___async_unwind = 0; //@line 18940
   HEAP32[$ReallocAsyncCtx2 >> 2] = 654; //@line 18941
   $35 = $ReallocAsyncCtx2 + 4 | 0; //@line 18942
   HEAP32[$35 >> 2] = $10; //@line 18943
   $36 = $ReallocAsyncCtx2 + 8 | 0; //@line 18944
   HEAP32[$36 >> 2] = $8; //@line 18945
   $37 = $ReallocAsyncCtx2 + 12 | 0; //@line 18946
   HEAP32[$37 >> 2] = $2; //@line 18947
   $38 = $ReallocAsyncCtx2 + 16 | 0; //@line 18948
   HEAP32[$38 >> 2] = $4; //@line 18949
   $39 = $ReallocAsyncCtx2 + 20 | 0; //@line 18950
   HEAP32[$39 >> 2] = $6; //@line 18951
   sp = STACKTOP; //@line 18952
   return;
  }
 }
 $41 = $8 + 4 | 0; //@line 18957
 HEAP32[$41 >> 2] = 0; //@line 18959
 HEAP32[$41 + 4 >> 2] = 0; //@line 18962
 HEAP32[$8 >> 2] = 656; //@line 18963
 $45 = $8 + 12 | 0; //@line 18964
 HEAP32[$45 >> 2] = 10256; //@line 18965
 $46 = HEAP32[5960] | 0; //@line 18966
 if (!$46) {
  $56 = HEAP32[2565] | 0; //@line 18970
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 18971
  FUNCTION_TABLE_vii[$56 & 15](23828, $8); //@line 18972
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 658; //@line 18975
   $57 = $ReallocAsyncCtx4 + 4 | 0; //@line 18976
   HEAP32[$57 >> 2] = $8; //@line 18977
   $58 = $ReallocAsyncCtx4 + 8 | 0; //@line 18978
   HEAP32[$58 >> 2] = $45; //@line 18979
   $59 = $ReallocAsyncCtx4 + 12 | 0; //@line 18980
   HEAP32[$59 >> 2] = $2; //@line 18981
   $60 = $ReallocAsyncCtx4 + 16 | 0; //@line 18982
   HEAP32[$60 >> 2] = $4; //@line 18983
   $61 = $ReallocAsyncCtx4 + 20 | 0; //@line 18984
   HEAP32[$61 >> 2] = $6; //@line 18985
   sp = STACKTOP; //@line 18986
   return;
  }
  ___async_unwind = 0; //@line 18989
  HEAP32[$ReallocAsyncCtx4 >> 2] = 658; //@line 18990
  $57 = $ReallocAsyncCtx4 + 4 | 0; //@line 18991
  HEAP32[$57 >> 2] = $8; //@line 18992
  $58 = $ReallocAsyncCtx4 + 8 | 0; //@line 18993
  HEAP32[$58 >> 2] = $45; //@line 18994
  $59 = $ReallocAsyncCtx4 + 12 | 0; //@line 18995
  HEAP32[$59 >> 2] = $2; //@line 18996
  $60 = $ReallocAsyncCtx4 + 16 | 0; //@line 18997
  HEAP32[$60 >> 2] = $4; //@line 18998
  $61 = $ReallocAsyncCtx4 + 20 | 0; //@line 18999
  HEAP32[$61 >> 2] = $6; //@line 19000
  sp = STACKTOP; //@line 19001
  return;
 } else {
  $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 19005
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 19006
  FUNCTION_TABLE_vi[$49 & 1023](23828); //@line 19007
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 657; //@line 19010
   $50 = $ReallocAsyncCtx3 + 4 | 0; //@line 19011
   HEAP32[$50 >> 2] = $8; //@line 19012
   $51 = $ReallocAsyncCtx3 + 8 | 0; //@line 19013
   HEAP32[$51 >> 2] = $45; //@line 19014
   $52 = $ReallocAsyncCtx3 + 12 | 0; //@line 19015
   HEAP32[$52 >> 2] = $2; //@line 19016
   $53 = $ReallocAsyncCtx3 + 16 | 0; //@line 19017
   HEAP32[$53 >> 2] = $4; //@line 19018
   $54 = $ReallocAsyncCtx3 + 20 | 0; //@line 19019
   HEAP32[$54 >> 2] = $6; //@line 19020
   sp = STACKTOP; //@line 19021
   return;
  }
  ___async_unwind = 0; //@line 19024
  HEAP32[$ReallocAsyncCtx3 >> 2] = 657; //@line 19025
  $50 = $ReallocAsyncCtx3 + 4 | 0; //@line 19026
  HEAP32[$50 >> 2] = $8; //@line 19027
  $51 = $ReallocAsyncCtx3 + 8 | 0; //@line 19028
  HEAP32[$51 >> 2] = $45; //@line 19029
  $52 = $ReallocAsyncCtx3 + 12 | 0; //@line 19030
  HEAP32[$52 >> 2] = $2; //@line 19031
  $53 = $ReallocAsyncCtx3 + 16 | 0; //@line 19032
  HEAP32[$53 >> 2] = $4; //@line 19033
  $54 = $ReallocAsyncCtx3 + 20 | 0; //@line 19034
  HEAP32[$54 >> 2] = $6; //@line 19035
  sp = STACKTOP; //@line 19036
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_140($0) {
 $0 = $0 | 0;
 var $$pre$i$i54 = 0, $10 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 29003
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29005
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29007
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29009
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29011
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29013
 $$pre$i$i54 = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 29018
 HEAP32[HEAP32[$0 + 28 >> 2] >> 2] = $$pre$i$i54; //@line 29020
 if ($$pre$i$i54 | 0) {
  $18 = HEAP32[$$pre$i$i54 + 8 >> 2] | 0; //@line 29024
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 29025
  FUNCTION_TABLE_vi[$18 & 1023]($8); //@line 29026
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 194; //@line 29029
   $19 = $ReallocAsyncCtx12 + 4 | 0; //@line 29030
   HEAP32[$19 >> 2] = $2; //@line 29031
   $20 = $ReallocAsyncCtx12 + 8 | 0; //@line 29032
   HEAP32[$20 >> 2] = $4; //@line 29033
   $21 = $ReallocAsyncCtx12 + 12 | 0; //@line 29034
   HEAP32[$21 >> 2] = $6; //@line 29035
   $22 = $ReallocAsyncCtx12 + 16 | 0; //@line 29036
   HEAP32[$22 >> 2] = $8; //@line 29037
   $23 = $ReallocAsyncCtx12 + 20 | 0; //@line 29038
   HEAP32[$23 >> 2] = $10; //@line 29039
   sp = STACKTOP; //@line 29040
   return;
  }
  ___async_unwind = 0; //@line 29043
  HEAP32[$ReallocAsyncCtx12 >> 2] = 194; //@line 29044
  $19 = $ReallocAsyncCtx12 + 4 | 0; //@line 29045
  HEAP32[$19 >> 2] = $2; //@line 29046
  $20 = $ReallocAsyncCtx12 + 8 | 0; //@line 29047
  HEAP32[$20 >> 2] = $4; //@line 29048
  $21 = $ReallocAsyncCtx12 + 12 | 0; //@line 29049
  HEAP32[$21 >> 2] = $6; //@line 29050
  $22 = $ReallocAsyncCtx12 + 16 | 0; //@line 29051
  HEAP32[$22 >> 2] = $8; //@line 29052
  $23 = $ReallocAsyncCtx12 + 20 | 0; //@line 29053
  HEAP32[$23 >> 2] = $10; //@line 29054
  sp = STACKTOP; //@line 29055
  return;
 }
 $24 = $10 + 12 | 0; //@line 29058
 HEAP32[$10 >> 2] = 195; //@line 29059
 HEAP32[$10 + 4 >> 2] = 0; //@line 29061
 HEAP32[$10 + 8 >> 2] = $2; //@line 29063
 HEAP32[$24 >> 2] = 808; //@line 29064
 $25 = $2 + 2416 | 0; //@line 29065
 if (($25 | 0) == ($10 | 0)) {
  $48 = HEAP32[204] | 0; //@line 29069
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 29070
  FUNCTION_TABLE_vi[$48 & 1023]($10); //@line 29071
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 198; //@line 29074
   $49 = $ReallocAsyncCtx15 + 4 | 0; //@line 29075
   HEAP32[$49 >> 2] = $10; //@line 29076
   $50 = $ReallocAsyncCtx15 + 8 | 0; //@line 29077
   HEAP32[$50 >> 2] = $2; //@line 29078
   $51 = $ReallocAsyncCtx15 + 12 | 0; //@line 29079
   HEAP32[$51 >> 2] = $4; //@line 29080
   $52 = $ReallocAsyncCtx15 + 16 | 0; //@line 29081
   HEAP32[$52 >> 2] = $6; //@line 29082
   sp = STACKTOP; //@line 29083
   return;
  }
  ___async_unwind = 0; //@line 29086
  HEAP32[$ReallocAsyncCtx15 >> 2] = 198; //@line 29087
  $49 = $ReallocAsyncCtx15 + 4 | 0; //@line 29088
  HEAP32[$49 >> 2] = $10; //@line 29089
  $50 = $ReallocAsyncCtx15 + 8 | 0; //@line 29090
  HEAP32[$50 >> 2] = $2; //@line 29091
  $51 = $ReallocAsyncCtx15 + 12 | 0; //@line 29092
  HEAP32[$51 >> 2] = $4; //@line 29093
  $52 = $ReallocAsyncCtx15 + 16 | 0; //@line 29094
  HEAP32[$52 >> 2] = $6; //@line 29095
  sp = STACKTOP; //@line 29096
  return;
 }
 $27 = $2 + 2428 | 0; //@line 29099
 $28 = HEAP32[$27 >> 2] | 0; //@line 29100
 if (!$28) {
  $40 = HEAP32[203] | 0; //@line 29104
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 29105
  FUNCTION_TABLE_vii[$40 & 15]($25, $10); //@line 29106
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 197; //@line 29109
   $41 = $ReallocAsyncCtx14 + 4 | 0; //@line 29110
   HEAP32[$41 >> 2] = $24; //@line 29111
   $42 = $ReallocAsyncCtx14 + 8 | 0; //@line 29112
   HEAP32[$42 >> 2] = $27; //@line 29113
   $43 = $ReallocAsyncCtx14 + 12 | 0; //@line 29114
   HEAP32[$43 >> 2] = $10; //@line 29115
   $44 = $ReallocAsyncCtx14 + 16 | 0; //@line 29116
   HEAP32[$44 >> 2] = $2; //@line 29117
   $45 = $ReallocAsyncCtx14 + 20 | 0; //@line 29118
   HEAP32[$45 >> 2] = $4; //@line 29119
   $46 = $ReallocAsyncCtx14 + 24 | 0; //@line 29120
   HEAP32[$46 >> 2] = $6; //@line 29121
   sp = STACKTOP; //@line 29122
   return;
  }
  ___async_unwind = 0; //@line 29125
  HEAP32[$ReallocAsyncCtx14 >> 2] = 197; //@line 29126
  $41 = $ReallocAsyncCtx14 + 4 | 0; //@line 29127
  HEAP32[$41 >> 2] = $24; //@line 29128
  $42 = $ReallocAsyncCtx14 + 8 | 0; //@line 29129
  HEAP32[$42 >> 2] = $27; //@line 29130
  $43 = $ReallocAsyncCtx14 + 12 | 0; //@line 29131
  HEAP32[$43 >> 2] = $10; //@line 29132
  $44 = $ReallocAsyncCtx14 + 16 | 0; //@line 29133
  HEAP32[$44 >> 2] = $2; //@line 29134
  $45 = $ReallocAsyncCtx14 + 20 | 0; //@line 29135
  HEAP32[$45 >> 2] = $4; //@line 29136
  $46 = $ReallocAsyncCtx14 + 24 | 0; //@line 29137
  HEAP32[$46 >> 2] = $6; //@line 29138
  sp = STACKTOP; //@line 29139
  return;
 } else {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 29143
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(32) | 0; //@line 29144
  FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 29145
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 196; //@line 29148
   $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 29149
   HEAP32[$32 >> 2] = $24; //@line 29150
   $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 29151
   HEAP32[$33 >> 2] = $27; //@line 29152
   $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 29153
   HEAP32[$34 >> 2] = $25; //@line 29154
   $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 29155
   HEAP32[$35 >> 2] = $10; //@line 29156
   $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 29157
   HEAP32[$36 >> 2] = $2; //@line 29158
   $37 = $ReallocAsyncCtx13 + 24 | 0; //@line 29159
   HEAP32[$37 >> 2] = $4; //@line 29160
   $38 = $ReallocAsyncCtx13 + 28 | 0; //@line 29161
   HEAP32[$38 >> 2] = $6; //@line 29162
   sp = STACKTOP; //@line 29163
   return;
  }
  ___async_unwind = 0; //@line 29166
  HEAP32[$ReallocAsyncCtx13 >> 2] = 196; //@line 29167
  $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 29168
  HEAP32[$32 >> 2] = $24; //@line 29169
  $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 29170
  HEAP32[$33 >> 2] = $27; //@line 29171
  $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 29172
  HEAP32[$34 >> 2] = $25; //@line 29173
  $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 29174
  HEAP32[$35 >> 2] = $10; //@line 29175
  $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 29176
  HEAP32[$36 >> 2] = $2; //@line 29177
  $37 = $ReallocAsyncCtx13 + 24 | 0; //@line 29178
  HEAP32[$37 >> 2] = $4; //@line 29179
  $38 = $ReallocAsyncCtx13 + 28 | 0; //@line 29180
  HEAP32[$38 >> 2] = $6; //@line 29181
  sp = STACKTOP; //@line 29182
  return;
 }
}
function _mbedtls_cipher_cmac_update($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$06984 = 0, $$06984$us = 0, $$070 = 0, $$073 = 0, $$09$i = 0, $$09$i75 = 0, $$1$lcssa = 0, $$174$lcssa = 0, $$17481 = 0, $$182 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $22 = 0, $26 = 0, $3 = 0, $38 = 0, $43 = 0, $46 = 0, $5 = 0, $58 = 0, $62 = 0, $66 = 0, $79 = 0, $80 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3342
 STACKTOP = STACKTOP + 16 | 0; //@line 3343
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3343
 $3 = sp; //@line 3344
 if (!$0) {
  $$0 = -24832; //@line 3347
  STACKTOP = sp; //@line 3348
  return $$0 | 0; //@line 3348
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 3350
 if (($1 | 0) == 0 | ($5 | 0) == 0) {
  $$0 = -24832; //@line 3355
  STACKTOP = sp; //@line 3356
  return $$0 | 0; //@line 3356
 }
 $9 = HEAP32[$0 + 64 >> 2] | 0; //@line 3359
 if (!$9) {
  $$0 = -24832; //@line 3362
  STACKTOP = sp; //@line 3363
  return $$0 | 0; //@line 3363
 }
 $12 = HEAP32[$5 + 24 >> 2] | 0; //@line 3366
 $13 = $9 + 32 | 0; //@line 3367
 $14 = HEAP32[$13 >> 2] | 0; //@line 3368
 do {
  if (!$14) {
   $$070 = $1; //@line 3372
   $$073 = $2; //@line 3372
  } else {
   $16 = $12 - $14 | 0; //@line 3374
   if ($16 >>> 0 < $2 >>> 0) {
    _memcpy($9 + 16 + $14 | 0, $1 | 0, $16 | 0) | 0; //@line 3378
    if ($12 | 0) {
     $$09$i = 0; //@line 3381
     do {
      $22 = $9 + $$09$i | 0; //@line 3385
      HEAP8[$22 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$9 + 16 + $$09$i >> 0]; //@line 3388
      $$09$i = $$09$i + 1 | 0; //@line 3389
     } while (($$09$i | 0) != ($12 | 0));
    }
    $AsyncCtx5 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3398
    $26 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 3399
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 585; //@line 3402
     HEAP32[$AsyncCtx5 + 4 >> 2] = $13; //@line 3404
     HEAP32[$AsyncCtx5 + 8 >> 2] = $12; //@line 3406
     HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 3408
     HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 3410
     HEAP32[$AsyncCtx5 + 20 >> 2] = $3; //@line 3412
     HEAP32[$AsyncCtx5 + 24 >> 2] = $0; //@line 3414
     HEAP32[$AsyncCtx5 + 28 >> 2] = $9; //@line 3416
     HEAP32[$AsyncCtx5 + 32 >> 2] = $3; //@line 3418
     HEAP32[$AsyncCtx5 + 36 >> 2] = $9; //@line 3420
     sp = STACKTOP; //@line 3421
     STACKTOP = sp; //@line 3422
     return 0; //@line 3422
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 3424
    if (!$26) {
     $38 = $12 - (HEAP32[$13 >> 2] | 0) | 0; //@line 3428
     HEAP32[$13 >> 2] = 0; //@line 3431
     $$070 = $1 + $38 | 0; //@line 3432
     $$073 = $2 - $38 | 0; //@line 3432
     break;
    } else {
     $$0 = $26; //@line 3435
     STACKTOP = sp; //@line 3436
     return $$0 | 0; //@line 3436
    }
   } else {
    $$070 = $1; //@line 3439
    $$073 = $2; //@line 3439
   }
  }
 } while (0);
 $43 = (($12 + -1 + $$073 | 0) >>> 0) / ($12 >>> 0) | 0; //@line 3445
 L24 : do {
  if ($43 >>> 0 > 1) {
   if (!$12) {
    $$06984$us = 1; //@line 3451
    while (1) {
     $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 3453
     $46 = _mbedtls_cipher_update($0, $9, 0, $9, $3) | 0; //@line 3454
     if (___async) {
      label = 15; //@line 3457
      break;
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3460
     if ($46 | 0) {
      $$0 = $46; //@line 3463
      label = 26; //@line 3464
      break;
     }
     $58 = $$06984$us + 1 | 0; //@line 3467
     if ($58 >>> 0 < $43 >>> 0) {
      $$06984$us = $58; //@line 3470
     } else {
      $$1$lcssa = $$070; //@line 3472
      $$174$lcssa = $$073; //@line 3472
      break L24;
     }
    }
    if ((label | 0) == 15) {
     HEAP32[$AsyncCtx2 >> 2] = 586; //@line 3477
     HEAP32[$AsyncCtx2 + 4 >> 2] = $$06984$us; //@line 3479
     HEAP32[$AsyncCtx2 + 8 >> 2] = $43; //@line 3481
     HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 3483
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 3485
     HEAP32[$AsyncCtx2 + 20 >> 2] = $9; //@line 3487
     HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3489
     HEAP32[$AsyncCtx2 + 28 >> 2] = $$073; //@line 3491
     HEAP32[$AsyncCtx2 + 32 >> 2] = $$070; //@line 3493
     HEAP32[$AsyncCtx2 + 36 >> 2] = $13; //@line 3495
     HEAP32[$AsyncCtx2 + 40 >> 2] = $9; //@line 3497
     sp = STACKTOP; //@line 3498
     STACKTOP = sp; //@line 3499
     return 0; //@line 3499
    } else if ((label | 0) == 26) {
     STACKTOP = sp; //@line 3502
     return $$0 | 0; //@line 3502
    }
   } else {
    $$06984 = 1; //@line 3505
    $$17481 = $$073; //@line 3505
    $$182 = $$070; //@line 3505
   }
   while (1) {
    $$09$i75 = 0; //@line 3508
    do {
     $62 = $9 + $$09$i75 | 0; //@line 3512
     HEAP8[$62 >> 0] = HEAP8[$62 >> 0] ^ HEAP8[$$182 + $$09$i75 >> 0]; //@line 3515
     $$09$i75 = $$09$i75 + 1 | 0; //@line 3516
    } while (($$09$i75 | 0) != ($12 | 0));
    $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 3524
    $66 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 3525
    if (___async) {
     label = 21; //@line 3528
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3531
    if ($66 | 0) {
     $$0 = $66; //@line 3534
     label = 26; //@line 3535
     break;
    }
    $79 = $$17481 - $12 | 0; //@line 3538
    $80 = $$182 + $12 | 0; //@line 3539
    $81 = $$06984 + 1 | 0; //@line 3540
    if ($81 >>> 0 < $43 >>> 0) {
     $$06984 = $81; //@line 3543
     $$17481 = $79; //@line 3543
     $$182 = $80; //@line 3543
    } else {
     $$1$lcssa = $80; //@line 3545
     $$174$lcssa = $79; //@line 3545
     break L24;
    }
   }
   if ((label | 0) == 21) {
    HEAP32[$AsyncCtx >> 2] = 587; //@line 3550
    HEAP32[$AsyncCtx + 4 >> 2] = $$17481; //@line 3552
    HEAP32[$AsyncCtx + 8 >> 2] = $12; //@line 3554
    HEAP32[$AsyncCtx + 12 >> 2] = $$182; //@line 3556
    HEAP32[$AsyncCtx + 16 >> 2] = $$06984; //@line 3558
    HEAP32[$AsyncCtx + 20 >> 2] = $43; //@line 3560
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 3562
    HEAP32[$AsyncCtx + 28 >> 2] = $13; //@line 3564
    HEAP32[$AsyncCtx + 32 >> 2] = $9; //@line 3566
    HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 3568
    HEAP32[$AsyncCtx + 40 >> 2] = $9; //@line 3570
    HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 3572
    sp = STACKTOP; //@line 3573
    STACKTOP = sp; //@line 3574
    return 0; //@line 3574
   } else if ((label | 0) == 26) {
    STACKTOP = sp; //@line 3577
    return $$0 | 0; //@line 3577
   }
  } else {
   $$1$lcssa = $$070; //@line 3580
   $$174$lcssa = $$073; //@line 3580
  }
 } while (0);
 if (!$$174$lcssa) {
  $$0 = 0; //@line 3585
  STACKTOP = sp; //@line 3586
  return $$0 | 0; //@line 3586
 }
 _memcpy((HEAP32[$13 >> 2] | 0) + ($9 + 16) | 0, $$1$lcssa | 0, $$174$lcssa | 0) | 0; //@line 3590
 HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + $$174$lcssa; //@line 3593
 $$0 = 0; //@line 3594
 STACKTOP = sp; //@line 3595
 return $$0 | 0; //@line 3595
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $18 = 0, $21 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $39 = 0, $4 = 0, $43 = 0, $46 = 0, $5 = 0, $56 = 0, $59 = 0, $6 = 0, $64 = 0, $67 = 0, $7 = 0, $71 = 0, $74 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 9836
 STACKTOP = STACKTOP + 48 | 0; //@line 9837
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 9837
 $4 = sp + 16 | 0; //@line 9838
 $5 = sp; //@line 9839
 $6 = $1 + 12 | 0; //@line 9840
 $7 = HEAP32[$6 >> 2] | 0; //@line 9841
 do {
  if (!$7) {
   $9 = $5 + 12 | 0; //@line 9845
   HEAP32[$9 >> 2] = 0; //@line 9846
   $30 = 0; //@line 9847
   $39 = $9; //@line 9847
  } else {
   $11 = HEAP32[$7 + 4 >> 2] | 0; //@line 9850
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 9851
   FUNCTION_TABLE_vii[$11 & 15]($5, $1); //@line 9852
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 318; //@line 9855
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 9857
    HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 9859
    HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 9861
    HEAP8[$AsyncCtx + 16 >> 0] = $2; //@line 9863
    HEAP8[$AsyncCtx + 17 >> 0] = $3; //@line 9865
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 9867
    sp = STACKTOP; //@line 9868
    STACKTOP = sp; //@line 9869
    return 0; //@line 9869
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 9871
   $$pre$i = HEAP32[$6 >> 2] | 0; //@line 9872
   $18 = $5 + 12 | 0; //@line 9873
   HEAP32[$18 >> 2] = $$pre$i; //@line 9874
   if (!$$pre$i) {
    $30 = 0; //@line 9877
    $39 = $18; //@line 9877
   } else {
    $21 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 9881
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 9882
    FUNCTION_TABLE_vii[$21 & 15]($4, $5); //@line 9883
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 319; //@line 9886
     HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 9888
     HEAP32[$AsyncCtx2 + 8 >> 2] = $18; //@line 9890
     HEAP32[$AsyncCtx2 + 12 >> 2] = $18; //@line 9892
     HEAP8[$AsyncCtx2 + 16 >> 0] = $2; //@line 9894
     HEAP8[$AsyncCtx2 + 17 >> 0] = $3; //@line 9896
     HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 9898
     HEAP32[$AsyncCtx2 + 24 >> 2] = $5; //@line 9900
     sp = STACKTOP; //@line 9901
     STACKTOP = sp; //@line 9902
     return 0; //@line 9902
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9904
     $30 = HEAP32[$18 >> 2] | 0; //@line 9906
     $39 = $18; //@line 9906
     break;
    }
   }
  }
 } while (0);
 $29 = $4 + 12 | 0; //@line 9912
 HEAP32[$29 >> 2] = $30; //@line 9913
 $31 = $4 + 16 | 0; //@line 9914
 HEAP8[$31 >> 0] = $2; //@line 9915
 HEAP8[$4 + 17 >> 0] = $3; //@line 9917
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9918
 $33 = _equeue_alloc($0, 20) | 0; //@line 9919
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 320; //@line 9922
  HEAP32[$AsyncCtx18 + 4 >> 2] = $31; //@line 9924
  HEAP32[$AsyncCtx18 + 8 >> 2] = $0; //@line 9926
  HEAP32[$AsyncCtx18 + 12 >> 2] = $4; //@line 9928
  HEAP32[$AsyncCtx18 + 16 >> 2] = $29; //@line 9930
  HEAP32[$AsyncCtx18 + 20 >> 2] = $39; //@line 9932
  HEAP32[$AsyncCtx18 + 24 >> 2] = $29; //@line 9934
  HEAP32[$AsyncCtx18 + 28 >> 2] = $5; //@line 9936
  sp = STACKTOP; //@line 9937
  STACKTOP = sp; //@line 9938
  return 0; //@line 9938
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 9940
 do {
  if (!$33) {
   $$0$i = 0; //@line 9944
  } else {
   $43 = HEAP32[$29 >> 2] | 0; //@line 9946
   do {
    if (!$43) {
     $56 = 0; //@line 9950
    } else {
     $46 = HEAP32[$43 + 4 >> 2] | 0; //@line 9953
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9954
     FUNCTION_TABLE_vii[$46 & 15]($33, $4); //@line 9955
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 321; //@line 9958
      HEAP32[$AsyncCtx5 + 4 >> 2] = $29; //@line 9960
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 9962
      HEAP32[$AsyncCtx5 + 12 >> 2] = $31; //@line 9964
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 9966
      HEAP32[$AsyncCtx5 + 20 >> 2] = $29; //@line 9968
      HEAP32[$AsyncCtx5 + 24 >> 2] = $39; //@line 9970
      HEAP32[$AsyncCtx5 + 28 >> 2] = $4; //@line 9972
      HEAP32[$AsyncCtx5 + 32 >> 2] = $5; //@line 9974
      sp = STACKTOP; //@line 9975
      STACKTOP = sp; //@line 9976
      return 0; //@line 9976
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9978
      $56 = HEAP32[$29 >> 2] | 0; //@line 9980
      break;
     }
    }
   } while (0);
   HEAP32[$33 + 12 >> 2] = $56; //@line 9986
   HEAP16[$33 + 16 >> 1] = HEAP16[$31 >> 1] | 0; //@line 9989
   _equeue_event_dtor($33, 322); //@line 9990
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9991
   $59 = _equeue_post($0, 323, $33) | 0; //@line 9992
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 324; //@line 9995
    HEAP32[$AsyncCtx15 + 4 >> 2] = $29; //@line 9997
    HEAP32[$AsyncCtx15 + 8 >> 2] = $39; //@line 9999
    HEAP32[$AsyncCtx15 + 12 >> 2] = $4; //@line 10001
    HEAP32[$AsyncCtx15 + 16 >> 2] = $5; //@line 10003
    sp = STACKTOP; //@line 10004
    STACKTOP = sp; //@line 10005
    return 0; //@line 10005
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 10007
    $$0$i = $59; //@line 10008
    break;
   }
  }
 } while (0);
 $64 = HEAP32[$29 >> 2] | 0; //@line 10013
 do {
  if ($64 | 0) {
   $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 10018
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10019
   FUNCTION_TABLE_vi[$67 & 1023]($4); //@line 10020
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 325; //@line 10023
    HEAP32[$AsyncCtx8 + 4 >> 2] = $39; //@line 10025
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 10027
    HEAP32[$AsyncCtx8 + 12 >> 2] = $5; //@line 10029
    sp = STACKTOP; //@line 10030
    STACKTOP = sp; //@line 10031
    return 0; //@line 10031
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 10033
    break;
   }
  }
 } while (0);
 $71 = HEAP32[$39 >> 2] | 0; //@line 10038
 if (!$71) {
  STACKTOP = sp; //@line 10041
  return $$0$i | 0; //@line 10041
 }
 $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 10044
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10045
 FUNCTION_TABLE_vi[$74 & 1023]($5); //@line 10046
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 326; //@line 10049
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 10051
  sp = STACKTOP; //@line 10052
  STACKTOP = sp; //@line 10053
  return 0; //@line 10053
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 10055
 STACKTOP = sp; //@line 10056
 return $$0$i | 0; //@line 10056
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $17 = 0, $18 = 0, $21 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $55 = 0, $58 = 0, $6 = 0, $63 = 0, $66 = 0, $70 = 0, $73 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 7176
 STACKTOP = STACKTOP + 48 | 0; //@line 7177
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7177
 $3 = sp + 16 | 0; //@line 7178
 $4 = sp; //@line 7179
 $5 = $1 + 12 | 0; //@line 7180
 $6 = HEAP32[$5 >> 2] | 0; //@line 7181
 do {
  if (!$6) {
   $8 = $4 + 12 | 0; //@line 7185
   HEAP32[$8 >> 2] = 0; //@line 7186
   $29 = 0; //@line 7188
   $31 = $2 & 1; //@line 7188
   $34 = $8; //@line 7188
  } else {
   $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 7191
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 7192
   FUNCTION_TABLE_vii[$11 & 15]($4, $1); //@line 7193
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 220; //@line 7196
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 7198
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 7200
    HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 7202
    HEAP8[$AsyncCtx + 16 >> 0] = $2 & 1; //@line 7205
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 7207
    sp = STACKTOP; //@line 7208
    STACKTOP = sp; //@line 7209
    return 0; //@line 7209
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7211
   $$pre$i = HEAP32[$5 >> 2] | 0; //@line 7212
   $17 = $4 + 12 | 0; //@line 7213
   HEAP32[$17 >> 2] = $$pre$i; //@line 7214
   $18 = $2 & 1; //@line 7215
   if (!$$pre$i) {
    $29 = 0; //@line 7218
    $31 = $18; //@line 7218
    $34 = $17; //@line 7218
   } else {
    $21 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 7222
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7223
    FUNCTION_TABLE_vii[$21 & 15]($3, $4); //@line 7224
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 221; //@line 7227
     HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 7229
     HEAP32[$AsyncCtx2 + 8 >> 2] = $4; //@line 7231
     HEAP32[$AsyncCtx2 + 12 >> 2] = $17; //@line 7233
     HEAP8[$AsyncCtx2 + 16 >> 0] = $18; //@line 7235
     HEAP32[$AsyncCtx2 + 20 >> 2] = $17; //@line 7237
     HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 7239
     sp = STACKTOP; //@line 7240
     STACKTOP = sp; //@line 7241
     return 0; //@line 7241
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7243
     $29 = HEAP32[$17 >> 2] | 0; //@line 7245
     $31 = $18; //@line 7245
     $34 = $17; //@line 7245
     break;
    }
   }
  }
 } while (0);
 $28 = $3 + 12 | 0; //@line 7251
 HEAP32[$28 >> 2] = $29; //@line 7252
 $30 = $3 + 16 | 0; //@line 7253
 HEAP8[$30 >> 0] = $31; //@line 7254
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7255
 $32 = _equeue_alloc($0, 20) | 0; //@line 7256
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 222; //@line 7259
  HEAP32[$AsyncCtx18 + 4 >> 2] = $34; //@line 7261
  HEAP32[$AsyncCtx18 + 8 >> 2] = $4; //@line 7263
  HEAP32[$AsyncCtx18 + 12 >> 2] = $30; //@line 7265
  HEAP32[$AsyncCtx18 + 16 >> 2] = $0; //@line 7267
  HEAP32[$AsyncCtx18 + 20 >> 2] = $3; //@line 7269
  HEAP32[$AsyncCtx18 + 24 >> 2] = $28; //@line 7271
  HEAP32[$AsyncCtx18 + 28 >> 2] = $28; //@line 7273
  sp = STACKTOP; //@line 7274
  STACKTOP = sp; //@line 7275
  return 0; //@line 7275
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 7277
 do {
  if (!$32) {
   $$0$i = 0; //@line 7281
  } else {
   $42 = HEAP32[$28 >> 2] | 0; //@line 7283
   do {
    if (!$42) {
     $55 = 0; //@line 7287
    } else {
     $45 = HEAP32[$42 + 4 >> 2] | 0; //@line 7290
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7291
     FUNCTION_TABLE_vii[$45 & 15]($32, $3); //@line 7292
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 223; //@line 7295
      HEAP32[$AsyncCtx5 + 4 >> 2] = $28; //@line 7297
      HEAP32[$AsyncCtx5 + 8 >> 2] = $32; //@line 7299
      HEAP32[$AsyncCtx5 + 12 >> 2] = $30; //@line 7301
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 7303
      HEAP32[$AsyncCtx5 + 20 >> 2] = $28; //@line 7305
      HEAP32[$AsyncCtx5 + 24 >> 2] = $34; //@line 7307
      HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 7309
      HEAP32[$AsyncCtx5 + 32 >> 2] = $4; //@line 7311
      sp = STACKTOP; //@line 7312
      STACKTOP = sp; //@line 7313
      return 0; //@line 7313
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7315
      $55 = HEAP32[$28 >> 2] | 0; //@line 7317
      break;
     }
    }
   } while (0);
   HEAP32[$32 + 12 >> 2] = $55; //@line 7323
   HEAP8[$32 + 16 >> 0] = HEAP8[$30 >> 0] | 0; //@line 7326
   _equeue_event_dtor($32, 224); //@line 7327
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7328
   $58 = _equeue_post($0, 225, $32) | 0; //@line 7329
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 226; //@line 7332
    HEAP32[$AsyncCtx15 + 4 >> 2] = $28; //@line 7334
    HEAP32[$AsyncCtx15 + 8 >> 2] = $34; //@line 7336
    HEAP32[$AsyncCtx15 + 12 >> 2] = $3; //@line 7338
    HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 7340
    sp = STACKTOP; //@line 7341
    STACKTOP = sp; //@line 7342
    return 0; //@line 7342
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7344
    $$0$i = $58; //@line 7345
    break;
   }
  }
 } while (0);
 $63 = HEAP32[$28 >> 2] | 0; //@line 7350
 do {
  if ($63 | 0) {
   $66 = HEAP32[$63 + 8 >> 2] | 0; //@line 7355
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7356
   FUNCTION_TABLE_vi[$66 & 1023]($3); //@line 7357
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 227; //@line 7360
    HEAP32[$AsyncCtx8 + 4 >> 2] = $34; //@line 7362
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 7364
    HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 7366
    sp = STACKTOP; //@line 7367
    STACKTOP = sp; //@line 7368
    return 0; //@line 7368
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 7370
    break;
   }
  }
 } while (0);
 $70 = HEAP32[$34 >> 2] | 0; //@line 7375
 if (!$70) {
  STACKTOP = sp; //@line 7378
  return $$0$i | 0; //@line 7378
 }
 $73 = HEAP32[$70 + 8 >> 2] | 0; //@line 7381
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7382
 FUNCTION_TABLE_vi[$73 & 1023]($4); //@line 7383
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 228; //@line 7386
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 7388
  sp = STACKTOP; //@line 7389
  STACKTOP = sp; //@line 7390
  return 0; //@line 7390
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 7392
 STACKTOP = sp; //@line 7393
 return $$0$i | 0; //@line 7393
}
function _mbedtls_cipher_cmac_update__async_cb_383($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28877
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28879
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28881
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28883
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28885
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28887
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28889
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28891
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28893
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28895
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28897
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 28900
  $66 = ___async_retval; //@line 28901
  HEAP32[$66 >> 2] = $$0; //@line 28902
  return;
 }
 $22 = $4 - (HEAP32[$2 >> 2] | 0) | 0; //@line 28906
 $23 = $6 + $22 | 0; //@line 28907
 $24 = $8 - $22 | 0; //@line 28908
 HEAP32[$2 >> 2] = 0; //@line 28909
 $27 = (($4 + -1 + $24 | 0) >>> 0) / ($4 >>> 0) | 0; //@line 28912
 if ($27 >>> 0 <= 1) {
  if (!$24) {
   $$0 = 0; //@line 28917
   $66 = ___async_retval; //@line 28918
   HEAP32[$66 >> 2] = $$0; //@line 28919
   return;
  }
  _memcpy((HEAP32[$2 >> 2] | 0) + ($18 + 16) | 0, $23 | 0, $24 | 0) | 0; //@line 28924
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $24; //@line 28927
  $$0 = 0; //@line 28928
  $66 = ___async_retval; //@line 28929
  HEAP32[$66 >> 2] = $$0; //@line 28930
  return;
 }
 if (!$4) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 28935
  $30 = _mbedtls_cipher_update($12, $14, 0, $14, $16) | 0; //@line 28936
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 586; //@line 28939
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 28940
   HEAP32[$31 >> 2] = 1; //@line 28941
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 28942
   HEAP32[$32 >> 2] = $27; //@line 28943
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 28944
   HEAP32[$33 >> 2] = $10; //@line 28945
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 28946
   HEAP32[$34 >> 2] = $12; //@line 28947
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 28948
   HEAP32[$35 >> 2] = $14; //@line 28949
   $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 28950
   HEAP32[$36 >> 2] = $16; //@line 28951
   $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 28952
   HEAP32[$37 >> 2] = $24; //@line 28953
   $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 28954
   HEAP32[$38 >> 2] = $23; //@line 28955
   $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 28956
   HEAP32[$39 >> 2] = $2; //@line 28957
   $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 28958
   HEAP32[$40 >> 2] = $18; //@line 28959
   sp = STACKTOP; //@line 28960
   return;
  }
  HEAP32[___async_retval >> 2] = $30; //@line 28964
  ___async_unwind = 0; //@line 28965
  HEAP32[$ReallocAsyncCtx2 >> 2] = 586; //@line 28966
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 28967
  HEAP32[$31 >> 2] = 1; //@line 28968
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 28969
  HEAP32[$32 >> 2] = $27; //@line 28970
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 28971
  HEAP32[$33 >> 2] = $10; //@line 28972
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 28973
  HEAP32[$34 >> 2] = $12; //@line 28974
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 28975
  HEAP32[$35 >> 2] = $14; //@line 28976
  $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 28977
  HEAP32[$36 >> 2] = $16; //@line 28978
  $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 28979
  HEAP32[$37 >> 2] = $24; //@line 28980
  $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 28981
  HEAP32[$38 >> 2] = $23; //@line 28982
  $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 28983
  HEAP32[$39 >> 2] = $2; //@line 28984
  $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 28985
  HEAP32[$40 >> 2] = $18; //@line 28986
  sp = STACKTOP; //@line 28987
  return;
 }
 $$09$i75 = 0; //@line 28990
 do {
  $44 = $18 + $$09$i75 | 0; //@line 28994
  HEAP8[$44 >> 0] = HEAP8[$44 >> 0] ^ HEAP8[$23 + $$09$i75 >> 0]; //@line 28997
  $$09$i75 = $$09$i75 + 1 | 0; //@line 28998
 } while (($$09$i75 | 0) != ($4 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 29006
 $48 = _mbedtls_cipher_update($12, $14, $4, $14, $16) | 0; //@line 29007
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 587; //@line 29010
  $49 = $ReallocAsyncCtx + 4 | 0; //@line 29011
  HEAP32[$49 >> 2] = $24; //@line 29012
  $50 = $ReallocAsyncCtx + 8 | 0; //@line 29013
  HEAP32[$50 >> 2] = $4; //@line 29014
  $51 = $ReallocAsyncCtx + 12 | 0; //@line 29015
  HEAP32[$51 >> 2] = $23; //@line 29016
  $52 = $ReallocAsyncCtx + 16 | 0; //@line 29017
  HEAP32[$52 >> 2] = 1; //@line 29018
  $53 = $ReallocAsyncCtx + 20 | 0; //@line 29019
  HEAP32[$53 >> 2] = $27; //@line 29020
  $54 = $ReallocAsyncCtx + 24 | 0; //@line 29021
  HEAP32[$54 >> 2] = $10; //@line 29022
  $55 = $ReallocAsyncCtx + 28 | 0; //@line 29023
  HEAP32[$55 >> 2] = $2; //@line 29024
  $56 = $ReallocAsyncCtx + 32 | 0; //@line 29025
  HEAP32[$56 >> 2] = $18; //@line 29026
  $57 = $ReallocAsyncCtx + 36 | 0; //@line 29027
  HEAP32[$57 >> 2] = $12; //@line 29028
  $58 = $ReallocAsyncCtx + 40 | 0; //@line 29029
  HEAP32[$58 >> 2] = $14; //@line 29030
  $59 = $ReallocAsyncCtx + 44 | 0; //@line 29031
  HEAP32[$59 >> 2] = $16; //@line 29032
  sp = STACKTOP; //@line 29033
  return;
 }
 HEAP32[___async_retval >> 2] = $48; //@line 29037
 ___async_unwind = 0; //@line 29038
 HEAP32[$ReallocAsyncCtx >> 2] = 587; //@line 29039
 $49 = $ReallocAsyncCtx + 4 | 0; //@line 29040
 HEAP32[$49 >> 2] = $24; //@line 29041
 $50 = $ReallocAsyncCtx + 8 | 0; //@line 29042
 HEAP32[$50 >> 2] = $4; //@line 29043
 $51 = $ReallocAsyncCtx + 12 | 0; //@line 29044
 HEAP32[$51 >> 2] = $23; //@line 29045
 $52 = $ReallocAsyncCtx + 16 | 0; //@line 29046
 HEAP32[$52 >> 2] = 1; //@line 29047
 $53 = $ReallocAsyncCtx + 20 | 0; //@line 29048
 HEAP32[$53 >> 2] = $27; //@line 29049
 $54 = $ReallocAsyncCtx + 24 | 0; //@line 29050
 HEAP32[$54 >> 2] = $10; //@line 29051
 $55 = $ReallocAsyncCtx + 28 | 0; //@line 29052
 HEAP32[$55 >> 2] = $2; //@line 29053
 $56 = $ReallocAsyncCtx + 32 | 0; //@line 29054
 HEAP32[$56 >> 2] = $18; //@line 29055
 $57 = $ReallocAsyncCtx + 36 | 0; //@line 29056
 HEAP32[$57 >> 2] = $12; //@line 29057
 $58 = $ReallocAsyncCtx + 40 | 0; //@line 29058
 HEAP32[$58 >> 2] = $14; //@line 29059
 $59 = $ReallocAsyncCtx + 44 | 0; //@line 29060
 HEAP32[$59 >> 2] = $16; //@line 29061
 sp = STACKTOP; //@line 29062
 return;
}
function __ZN7LoRaPHY13apply_cf_listEPKhh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $6 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30717
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30719
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30721
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30723
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30725
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30727
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30729
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30731
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30733
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30735
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30737
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30739
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30741
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 30743
 $28 = HEAP8[$0 + 56 >> 0] | 0; //@line 30745
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 30747
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 30749
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 30751
 $36 = HEAP8[$0 + 72 >> 0] | 0; //@line 30753
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 30755
 if (HEAP8[___async_retval >> 0] & 1) {
  $70 = $20; //@line 30760
 } else {
  $44 = $20 + 1 | 0; //@line 30762
  if (($44 | 0) < (HEAPU8[$18 >> 0] | 0 | 0)) {
   $42 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 30769
   $ReallocAsyncCtx = _emscripten_realloc_async_context(80) | 0; //@line 30771
   $45 = FUNCTION_TABLE_iiii[$42 & 31]($14, $16, $44 & 255) | 0; //@line 30772
   if (!___async) {
    HEAP8[___async_retval >> 0] = $45 & 1; //@line 30777
    ___async_unwind = 0; //@line 30778
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 512; //@line 30780
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 30782
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 30784
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 30786
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 30788
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 30790
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 30792
   HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 30794
   HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 30796
   HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 30798
   HEAP32[$ReallocAsyncCtx + 40 >> 2] = $44; //@line 30800
   HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 30802
   HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 30804
   HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 30806
   HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28; //@line 30808
   HEAP32[$ReallocAsyncCtx + 60 >> 2] = $30; //@line 30810
   HEAP32[$ReallocAsyncCtx + 64 >> 2] = $32; //@line 30812
   HEAP32[$ReallocAsyncCtx + 68 >> 2] = $34; //@line 30814
   HEAP8[$ReallocAsyncCtx + 72 >> 0] = $36; //@line 30816
   HEAP32[$ReallocAsyncCtx + 76 >> 2] = $38; //@line 30818
   sp = STACKTOP; //@line 30819
   return;
  } else {
   $70 = -1; //@line 30822
  }
 }
 HEAP8[$22 >> 0] = $70; //@line 30826
 $73 = HEAP32[(HEAP32[$24 >> 2] | 0) + 60 >> 2] | 0; //@line 30829
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(68) | 0; //@line 30830
 FUNCTION_TABLE_iiii[$73 & 31]($14, $26, $28) | 0; //@line 30831
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 513; //@line 30834
  $74 = $ReallocAsyncCtx2 + 4 | 0; //@line 30835
  HEAP32[$74 >> 2] = $2; //@line 30836
  $75 = $ReallocAsyncCtx2 + 8 | 0; //@line 30837
  HEAP32[$75 >> 2] = $4; //@line 30838
  $76 = $ReallocAsyncCtx2 + 12 | 0; //@line 30839
  HEAP32[$76 >> 2] = $6; //@line 30840
  $77 = $ReallocAsyncCtx2 + 16 | 0; //@line 30841
  HEAP32[$77 >> 2] = $8; //@line 30842
  $78 = $ReallocAsyncCtx2 + 20 | 0; //@line 30843
  HEAP32[$78 >> 2] = $10; //@line 30844
  $79 = $ReallocAsyncCtx2 + 24 | 0; //@line 30845
  HEAP32[$79 >> 2] = $12; //@line 30846
  $80 = $ReallocAsyncCtx2 + 28 | 0; //@line 30847
  HEAP32[$80 >> 2] = $14; //@line 30848
  $81 = $ReallocAsyncCtx2 + 32 | 0; //@line 30849
  HEAP32[$81 >> 2] = $18; //@line 30850
  $82 = $ReallocAsyncCtx2 + 36 | 0; //@line 30851
  HEAP32[$82 >> 2] = $22; //@line 30852
  $83 = $ReallocAsyncCtx2 + 40 | 0; //@line 30853
  HEAP32[$83 >> 2] = $24; //@line 30854
  $84 = $ReallocAsyncCtx2 + 44 | 0; //@line 30855
  HEAP32[$84 >> 2] = $26; //@line 30856
  $85 = $ReallocAsyncCtx2 + 48 | 0; //@line 30857
  HEAP32[$85 >> 2] = $30; //@line 30858
  $86 = $ReallocAsyncCtx2 + 52 | 0; //@line 30859
  HEAP32[$86 >> 2] = $32; //@line 30860
  $87 = $ReallocAsyncCtx2 + 56 | 0; //@line 30861
  HEAP32[$87 >> 2] = $34; //@line 30862
  $88 = $ReallocAsyncCtx2 + 60 | 0; //@line 30863
  HEAP32[$88 >> 2] = $38; //@line 30864
  $89 = $ReallocAsyncCtx2 + 64 | 0; //@line 30865
  HEAP8[$89 >> 0] = $28; //@line 30866
  $90 = $ReallocAsyncCtx2 + 65 | 0; //@line 30867
  HEAP8[$90 >> 0] = $36; //@line 30868
  sp = STACKTOP; //@line 30869
  return;
 }
 ___async_unwind = 0; //@line 30872
 HEAP32[$ReallocAsyncCtx2 >> 2] = 513; //@line 30873
 $74 = $ReallocAsyncCtx2 + 4 | 0; //@line 30874
 HEAP32[$74 >> 2] = $2; //@line 30875
 $75 = $ReallocAsyncCtx2 + 8 | 0; //@line 30876
 HEAP32[$75 >> 2] = $4; //@line 30877
 $76 = $ReallocAsyncCtx2 + 12 | 0; //@line 30878
 HEAP32[$76 >> 2] = $6; //@line 30879
 $77 = $ReallocAsyncCtx2 + 16 | 0; //@line 30880
 HEAP32[$77 >> 2] = $8; //@line 30881
 $78 = $ReallocAsyncCtx2 + 20 | 0; //@line 30882
 HEAP32[$78 >> 2] = $10; //@line 30883
 $79 = $ReallocAsyncCtx2 + 24 | 0; //@line 30884
 HEAP32[$79 >> 2] = $12; //@line 30885
 $80 = $ReallocAsyncCtx2 + 28 | 0; //@line 30886
 HEAP32[$80 >> 2] = $14; //@line 30887
 $81 = $ReallocAsyncCtx2 + 32 | 0; //@line 30888
 HEAP32[$81 >> 2] = $18; //@line 30889
 $82 = $ReallocAsyncCtx2 + 36 | 0; //@line 30890
 HEAP32[$82 >> 2] = $22; //@line 30891
 $83 = $ReallocAsyncCtx2 + 40 | 0; //@line 30892
 HEAP32[$83 >> 2] = $24; //@line 30893
 $84 = $ReallocAsyncCtx2 + 44 | 0; //@line 30894
 HEAP32[$84 >> 2] = $26; //@line 30895
 $85 = $ReallocAsyncCtx2 + 48 | 0; //@line 30896
 HEAP32[$85 >> 2] = $30; //@line 30897
 $86 = $ReallocAsyncCtx2 + 52 | 0; //@line 30898
 HEAP32[$86 >> 2] = $32; //@line 30899
 $87 = $ReallocAsyncCtx2 + 56 | 0; //@line 30900
 HEAP32[$87 >> 2] = $34; //@line 30901
 $88 = $ReallocAsyncCtx2 + 60 | 0; //@line 30902
 HEAP32[$88 >> 2] = $38; //@line 30903
 $89 = $ReallocAsyncCtx2 + 64 | 0; //@line 30904
 HEAP8[$89 >> 0] = $28; //@line 30905
 $90 = $ReallocAsyncCtx2 + 65 | 0; //@line 30906
 HEAP8[$90 >> 0] = $36; //@line 30907
 sp = STACKTOP; //@line 30908
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $13 = 0, $17 = 0, $21 = 0, $23 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $37 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1270
 HEAP32[$0 >> 2] = 496; //@line 1271
 $1 = $0 + 1240 | 0; //@line 1272
 HEAP32[$1 >> 2] = 10224; //@line 1273
 __ZN4mbed6Ticker6detachEv($1); //@line 1274
 $3 = HEAP32[$0 + 1292 >> 2] | 0; //@line 1276
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 1282
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1283
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 1280 | 0); //@line 1284
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 69; //@line 1287
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1289
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 1291
    sp = STACKTOP; //@line 1292
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1295
    break;
   }
  }
 } while (0);
 $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1300
 __ZN4mbed10TimerEventD2Ev($1); //@line 1301
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 70; //@line 1304
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 1306
  sp = STACKTOP; //@line 1307
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 1310
 $11 = $0 + 1176 | 0; //@line 1311
 HEAP32[$11 >> 2] = 10224; //@line 1312
 __ZN4mbed6Ticker6detachEv($11); //@line 1313
 $13 = HEAP32[$0 + 1228 >> 2] | 0; //@line 1315
 do {
  if ($13 | 0) {
   $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 1321
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1322
   FUNCTION_TABLE_vi[$17 & 1023]($0 + 1216 | 0); //@line 1323
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 71; //@line 1326
    HEAP32[$AsyncCtx3 + 4 >> 2] = $11; //@line 1328
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 1330
    sp = STACKTOP; //@line 1331
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 1334
    break;
   }
  }
 } while (0);
 $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1339
 __ZN4mbed10TimerEventD2Ev($11); //@line 1340
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 72; //@line 1343
  HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 1345
  sp = STACKTOP; //@line 1346
  return;
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 1349
 $21 = $0 + 1112 | 0; //@line 1350
 HEAP32[$21 >> 2] = 10224; //@line 1351
 __ZN4mbed6Ticker6detachEv($21); //@line 1352
 $23 = HEAP32[$0 + 1164 >> 2] | 0; //@line 1354
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 1360
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1361
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 1152 | 0); //@line 1362
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 73; //@line 1365
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 1367
    HEAP32[$AsyncCtx7 + 8 >> 2] = $21; //@line 1369
    sp = STACKTOP; //@line 1370
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 1373
    break;
   }
  }
 } while (0);
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1378
 __ZN4mbed10TimerEventD2Ev($21); //@line 1379
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 74; //@line 1382
  HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 1384
  sp = STACKTOP; //@line 1385
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 1388
 $31 = $0 + 1048 | 0; //@line 1389
 HEAP32[$31 >> 2] = 10224; //@line 1390
 __ZN4mbed6Ticker6detachEv($31); //@line 1391
 $33 = HEAP32[$0 + 1100 >> 2] | 0; //@line 1393
 do {
  if ($33 | 0) {
   $37 = HEAP32[$33 + 8 >> 2] | 0; //@line 1399
   $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1400
   FUNCTION_TABLE_vi[$37 & 1023]($0 + 1088 | 0); //@line 1401
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 75; //@line 1404
    HEAP32[$AsyncCtx11 + 4 >> 2] = $31; //@line 1406
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 1408
    sp = STACKTOP; //@line 1409
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 1412
    break;
   }
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1417
 __ZN4mbed10TimerEventD2Ev($31); //@line 1418
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 76; //@line 1421
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 1423
  sp = STACKTOP; //@line 1424
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 1427
 $AsyncCtx46 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1429
 __ZN4mbed11InterruptInD2Ev($0 + 412 | 0); //@line 1430
 if (___async) {
  HEAP32[$AsyncCtx46 >> 2] = 77; //@line 1433
  HEAP32[$AsyncCtx46 + 4 >> 2] = $0; //@line 1435
  sp = STACKTOP; //@line 1436
  return;
 }
 _emscripten_free_async_context($AsyncCtx46 | 0); //@line 1439
 $AsyncCtx42 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1441
 __ZN4mbed11InterruptInD2Ev($0 + 340 | 0); //@line 1442
 if (___async) {
  HEAP32[$AsyncCtx42 >> 2] = 78; //@line 1445
  HEAP32[$AsyncCtx42 + 4 >> 2] = $0; //@line 1447
  sp = STACKTOP; //@line 1448
  return;
 }
 _emscripten_free_async_context($AsyncCtx42 | 0); //@line 1451
 $AsyncCtx38 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1453
 __ZN4mbed11InterruptInD2Ev($0 + 268 | 0); //@line 1454
 if (___async) {
  HEAP32[$AsyncCtx38 >> 2] = 79; //@line 1457
  HEAP32[$AsyncCtx38 + 4 >> 2] = $0; //@line 1459
  sp = STACKTOP; //@line 1460
  return;
 }
 _emscripten_free_async_context($AsyncCtx38 | 0); //@line 1463
 $AsyncCtx34 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1465
 __ZN4mbed11InterruptInD2Ev($0 + 196 | 0); //@line 1466
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 80; //@line 1469
  HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 1471
  sp = STACKTOP; //@line 1472
  return;
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 1475
 $AsyncCtx30 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1477
 __ZN4mbed11InterruptInD2Ev($0 + 124 | 0); //@line 1478
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 81; //@line 1481
  HEAP32[$AsyncCtx30 + 4 >> 2] = $0; //@line 1483
  sp = STACKTOP; //@line 1484
  return;
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 1487
 $AsyncCtx26 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1489
 __ZN4mbed11InterruptInD2Ev($0 + 52 | 0); //@line 1490
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 82; //@line 1493
  sp = STACKTOP; //@line 1494
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx26 | 0); //@line 1497
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$pre$i = 0, $10 = 0, $16 = 0, $19 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $39 = 0, $4 = 0, $42 = 0, $5 = 0, $52 = 0, $55 = 0, $6 = 0, $60 = 0, $63 = 0, $67 = 0, $70 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8428
 STACKTOP = STACKTOP + 48 | 0; //@line 8429
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 8429
 $3 = sp + 16 | 0; //@line 8430
 $4 = sp; //@line 8431
 $5 = $1 + 12 | 0; //@line 8432
 $6 = HEAP32[$5 >> 2] | 0; //@line 8433
 do {
  if (!$6) {
   $8 = $4 + 12 | 0; //@line 8437
   HEAP32[$8 >> 2] = 0; //@line 8438
   $27 = 0; //@line 8439
   $35 = $8; //@line 8439
  } else {
   $10 = HEAP32[$6 + 4 >> 2] | 0; //@line 8442
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 8443
   FUNCTION_TABLE_vii[$10 & 15]($4, $1); //@line 8444
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 266; //@line 8447
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 8449
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 8451
    HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 8453
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 8455
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 8457
    sp = STACKTOP; //@line 8458
    STACKTOP = sp; //@line 8459
    return 0; //@line 8459
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 8461
   $$pre$i = HEAP32[$5 >> 2] | 0; //@line 8462
   $16 = $4 + 12 | 0; //@line 8463
   HEAP32[$16 >> 2] = $$pre$i; //@line 8464
   if (!$$pre$i) {
    $27 = 0; //@line 8467
    $35 = $16; //@line 8467
   } else {
    $19 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 8471
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8472
    FUNCTION_TABLE_vii[$19 & 15]($3, $4); //@line 8473
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 267; //@line 8476
     HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 8478
     HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 8480
     HEAP32[$AsyncCtx2 + 12 >> 2] = $16; //@line 8482
     HEAP32[$AsyncCtx2 + 16 >> 2] = $16; //@line 8484
     HEAP32[$AsyncCtx2 + 20 >> 2] = $2; //@line 8486
     HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 8488
     sp = STACKTOP; //@line 8489
     STACKTOP = sp; //@line 8490
     return 0; //@line 8490
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8492
     $27 = HEAP32[$16 >> 2] | 0; //@line 8494
     $35 = $16; //@line 8494
     break;
    }
   }
  }
 } while (0);
 $26 = $3 + 12 | 0; //@line 8500
 HEAP32[$26 >> 2] = $27; //@line 8501
 $28 = $3 + 16 | 0; //@line 8502
 HEAP32[$28 >> 2] = $2; //@line 8503
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 8504
 $29 = _equeue_alloc($0, 20) | 0; //@line 8505
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 268; //@line 8508
  HEAP32[$AsyncCtx18 + 4 >> 2] = $26; //@line 8510
  HEAP32[$AsyncCtx18 + 8 >> 2] = $28; //@line 8512
  HEAP32[$AsyncCtx18 + 12 >> 2] = $0; //@line 8514
  HEAP32[$AsyncCtx18 + 16 >> 2] = $4; //@line 8516
  HEAP32[$AsyncCtx18 + 20 >> 2] = $35; //@line 8518
  HEAP32[$AsyncCtx18 + 24 >> 2] = $3; //@line 8520
  HEAP32[$AsyncCtx18 + 28 >> 2] = $26; //@line 8522
  sp = STACKTOP; //@line 8523
  STACKTOP = sp; //@line 8524
  return 0; //@line 8524
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 8526
 do {
  if (!$29) {
   $$0$i = 0; //@line 8530
  } else {
   $39 = HEAP32[$26 >> 2] | 0; //@line 8532
   do {
    if (!$39) {
     $52 = 0; //@line 8536
    } else {
     $42 = HEAP32[$39 + 4 >> 2] | 0; //@line 8539
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8540
     FUNCTION_TABLE_vii[$42 & 15]($29, $3); //@line 8541
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 269; //@line 8544
      HEAP32[$AsyncCtx5 + 4 >> 2] = $26; //@line 8546
      HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 8548
      HEAP32[$AsyncCtx5 + 12 >> 2] = $28; //@line 8550
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 8552
      HEAP32[$AsyncCtx5 + 20 >> 2] = $26; //@line 8554
      HEAP32[$AsyncCtx5 + 24 >> 2] = $35; //@line 8556
      HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 8558
      HEAP32[$AsyncCtx5 + 32 >> 2] = $4; //@line 8560
      sp = STACKTOP; //@line 8561
      STACKTOP = sp; //@line 8562
      return 0; //@line 8562
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8564
      $52 = HEAP32[$26 >> 2] | 0; //@line 8566
      break;
     }
    }
   } while (0);
   HEAP32[$29 + 12 >> 2] = $52; //@line 8572
   HEAP32[$29 + 16 >> 2] = HEAP32[$28 >> 2]; //@line 8575
   _equeue_event_dtor($29, 270); //@line 8576
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8577
   $55 = _equeue_post($0, 271, $29) | 0; //@line 8578
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 272; //@line 8581
    HEAP32[$AsyncCtx15 + 4 >> 2] = $26; //@line 8583
    HEAP32[$AsyncCtx15 + 8 >> 2] = $35; //@line 8585
    HEAP32[$AsyncCtx15 + 12 >> 2] = $3; //@line 8587
    HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 8589
    sp = STACKTOP; //@line 8590
    STACKTOP = sp; //@line 8591
    return 0; //@line 8591
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8593
    $$0$i = $55; //@line 8594
    break;
   }
  }
 } while (0);
 $60 = HEAP32[$26 >> 2] | 0; //@line 8599
 do {
  if ($60 | 0) {
   $63 = HEAP32[$60 + 8 >> 2] | 0; //@line 8604
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8605
   FUNCTION_TABLE_vi[$63 & 1023]($3); //@line 8606
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 273; //@line 8609
    HEAP32[$AsyncCtx8 + 4 >> 2] = $35; //@line 8611
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 8613
    HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 8615
    sp = STACKTOP; //@line 8616
    STACKTOP = sp; //@line 8617
    return 0; //@line 8617
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 8619
    break;
   }
  }
 } while (0);
 $67 = HEAP32[$35 >> 2] | 0; //@line 8624
 if (!$67) {
  STACKTOP = sp; //@line 8627
  return $$0$i | 0; //@line 8627
 }
 $70 = HEAP32[$67 + 8 >> 2] | 0; //@line 8630
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8631
 FUNCTION_TABLE_vi[$70 & 1023]($4); //@line 8632
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 274; //@line 8635
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 8637
  sp = STACKTOP; //@line 8638
  STACKTOP = sp; //@line 8639
  return 0; //@line 8639
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 8641
 STACKTOP = sp; //@line 8642
 return $$0$i | 0; //@line 8642
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_135($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 28051
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28053
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28055
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28057
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28059
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28063
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28065
 $15 = $12 + 12 | 0; //@line 28066
 HEAP32[$12 >> 2] = 187; //@line 28067
 HEAP32[$12 + 4 >> 2] = 0; //@line 28069
 HEAP32[$12 + 8 >> 2] = $2; //@line 28071
 HEAP32[$15 >> 2] = 808; //@line 28072
 $16 = $2 + 2432 | 0; //@line 28073
 if (($16 | 0) == ($12 | 0)) {
  $43 = HEAP32[204] | 0; //@line 28077
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 28078
  FUNCTION_TABLE_vi[$43 & 1023]($12); //@line 28079
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 190; //@line 28082
   $44 = $ReallocAsyncCtx9 + 4 | 0; //@line 28083
   HEAP32[$44 >> 2] = $2; //@line 28084
   $45 = $ReallocAsyncCtx9 + 8 | 0; //@line 28085
   HEAP32[$45 >> 2] = $4; //@line 28086
   $46 = $ReallocAsyncCtx9 + 12 | 0; //@line 28087
   HEAP32[$46 >> 2] = $6; //@line 28088
   $47 = $ReallocAsyncCtx9 + 16 | 0; //@line 28089
   HEAP32[$47 >> 2] = $8; //@line 28090
   $48 = $ReallocAsyncCtx9 + 20 | 0; //@line 28091
   HEAP32[$48 >> 2] = $12; //@line 28092
   $49 = $ReallocAsyncCtx9 + 24 | 0; //@line 28093
   HEAP32[$49 >> 2] = $14; //@line 28094
   sp = STACKTOP; //@line 28095
   return;
  }
  ___async_unwind = 0; //@line 28098
  HEAP32[$ReallocAsyncCtx9 >> 2] = 190; //@line 28099
  $44 = $ReallocAsyncCtx9 + 4 | 0; //@line 28100
  HEAP32[$44 >> 2] = $2; //@line 28101
  $45 = $ReallocAsyncCtx9 + 8 | 0; //@line 28102
  HEAP32[$45 >> 2] = $4; //@line 28103
  $46 = $ReallocAsyncCtx9 + 12 | 0; //@line 28104
  HEAP32[$46 >> 2] = $6; //@line 28105
  $47 = $ReallocAsyncCtx9 + 16 | 0; //@line 28106
  HEAP32[$47 >> 2] = $8; //@line 28107
  $48 = $ReallocAsyncCtx9 + 20 | 0; //@line 28108
  HEAP32[$48 >> 2] = $12; //@line 28109
  $49 = $ReallocAsyncCtx9 + 24 | 0; //@line 28110
  HEAP32[$49 >> 2] = $14; //@line 28111
  sp = STACKTOP; //@line 28112
  return;
 }
 $18 = $2 + 2444 | 0; //@line 28115
 $19 = HEAP32[$18 >> 2] | 0; //@line 28116
 if (!$19) {
  $33 = HEAP32[203] | 0; //@line 28120
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 28121
  FUNCTION_TABLE_vii[$33 & 15]($16, $12); //@line 28122
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 189; //@line 28125
   $34 = $ReallocAsyncCtx8 + 4 | 0; //@line 28126
   HEAP32[$34 >> 2] = $2; //@line 28127
   $35 = $ReallocAsyncCtx8 + 8 | 0; //@line 28128
   HEAP32[$35 >> 2] = $4; //@line 28129
   $36 = $ReallocAsyncCtx8 + 12 | 0; //@line 28130
   HEAP32[$36 >> 2] = $6; //@line 28131
   $37 = $ReallocAsyncCtx8 + 16 | 0; //@line 28132
   HEAP32[$37 >> 2] = $8; //@line 28133
   $38 = $ReallocAsyncCtx8 + 20 | 0; //@line 28134
   HEAP32[$38 >> 2] = $15; //@line 28135
   $39 = $ReallocAsyncCtx8 + 24 | 0; //@line 28136
   HEAP32[$39 >> 2] = $18; //@line 28137
   $40 = $ReallocAsyncCtx8 + 28 | 0; //@line 28138
   HEAP32[$40 >> 2] = $12; //@line 28139
   $41 = $ReallocAsyncCtx8 + 32 | 0; //@line 28140
   HEAP32[$41 >> 2] = $14; //@line 28141
   sp = STACKTOP; //@line 28142
   return;
  }
  ___async_unwind = 0; //@line 28145
  HEAP32[$ReallocAsyncCtx8 >> 2] = 189; //@line 28146
  $34 = $ReallocAsyncCtx8 + 4 | 0; //@line 28147
  HEAP32[$34 >> 2] = $2; //@line 28148
  $35 = $ReallocAsyncCtx8 + 8 | 0; //@line 28149
  HEAP32[$35 >> 2] = $4; //@line 28150
  $36 = $ReallocAsyncCtx8 + 12 | 0; //@line 28151
  HEAP32[$36 >> 2] = $6; //@line 28152
  $37 = $ReallocAsyncCtx8 + 16 | 0; //@line 28153
  HEAP32[$37 >> 2] = $8; //@line 28154
  $38 = $ReallocAsyncCtx8 + 20 | 0; //@line 28155
  HEAP32[$38 >> 2] = $15; //@line 28156
  $39 = $ReallocAsyncCtx8 + 24 | 0; //@line 28157
  HEAP32[$39 >> 2] = $18; //@line 28158
  $40 = $ReallocAsyncCtx8 + 28 | 0; //@line 28159
  HEAP32[$40 >> 2] = $12; //@line 28160
  $41 = $ReallocAsyncCtx8 + 32 | 0; //@line 28161
  HEAP32[$41 >> 2] = $14; //@line 28162
  sp = STACKTOP; //@line 28163
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 28167
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(40) | 0; //@line 28168
  FUNCTION_TABLE_vi[$22 & 1023]($16); //@line 28169
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 188; //@line 28172
   $23 = $ReallocAsyncCtx7 + 4 | 0; //@line 28173
   HEAP32[$23 >> 2] = $2; //@line 28174
   $24 = $ReallocAsyncCtx7 + 8 | 0; //@line 28175
   HEAP32[$24 >> 2] = $4; //@line 28176
   $25 = $ReallocAsyncCtx7 + 12 | 0; //@line 28177
   HEAP32[$25 >> 2] = $6; //@line 28178
   $26 = $ReallocAsyncCtx7 + 16 | 0; //@line 28179
   HEAP32[$26 >> 2] = $8; //@line 28180
   $27 = $ReallocAsyncCtx7 + 20 | 0; //@line 28181
   HEAP32[$27 >> 2] = $18; //@line 28182
   $28 = $ReallocAsyncCtx7 + 24 | 0; //@line 28183
   HEAP32[$28 >> 2] = $15; //@line 28184
   $29 = $ReallocAsyncCtx7 + 28 | 0; //@line 28185
   HEAP32[$29 >> 2] = $16; //@line 28186
   $30 = $ReallocAsyncCtx7 + 32 | 0; //@line 28187
   HEAP32[$30 >> 2] = $12; //@line 28188
   $31 = $ReallocAsyncCtx7 + 36 | 0; //@line 28189
   HEAP32[$31 >> 2] = $14; //@line 28190
   sp = STACKTOP; //@line 28191
   return;
  }
  ___async_unwind = 0; //@line 28194
  HEAP32[$ReallocAsyncCtx7 >> 2] = 188; //@line 28195
  $23 = $ReallocAsyncCtx7 + 4 | 0; //@line 28196
  HEAP32[$23 >> 2] = $2; //@line 28197
  $24 = $ReallocAsyncCtx7 + 8 | 0; //@line 28198
  HEAP32[$24 >> 2] = $4; //@line 28199
  $25 = $ReallocAsyncCtx7 + 12 | 0; //@line 28200
  HEAP32[$25 >> 2] = $6; //@line 28201
  $26 = $ReallocAsyncCtx7 + 16 | 0; //@line 28202
  HEAP32[$26 >> 2] = $8; //@line 28203
  $27 = $ReallocAsyncCtx7 + 20 | 0; //@line 28204
  HEAP32[$27 >> 2] = $18; //@line 28205
  $28 = $ReallocAsyncCtx7 + 24 | 0; //@line 28206
  HEAP32[$28 >> 2] = $15; //@line 28207
  $29 = $ReallocAsyncCtx7 + 28 | 0; //@line 28208
  HEAP32[$29 >> 2] = $16; //@line 28209
  $30 = $ReallocAsyncCtx7 + 32 | 0; //@line 28210
  HEAP32[$30 >> 2] = $12; //@line 28211
  $31 = $ReallocAsyncCtx7 + 36 | 0; //@line 28212
  HEAP32[$31 >> 2] = $14; //@line 28213
  sp = STACKTOP; //@line 28214
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_336($0) {
 $0 = $0 | 0;
 var $$pre16 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 13744
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13746
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13748
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13750
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13752
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13754
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13756
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13758
 $$pre16 = HEAP32[$10 >> 2] | 0; //@line 13759
 if ($$pre16 | 0) {
  $17 = HEAP32[$$pre16 + 4 >> 2] | 0; //@line 13763
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 13764
  FUNCTION_TABLE_vii[$17 & 15]($12, $14); //@line 13765
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 350; //@line 13768
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 13769
   HEAP32[$18 >> 2] = $2; //@line 13770
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 13771
   HEAP32[$19 >> 2] = $4; //@line 13772
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 13773
   HEAP32[$20 >> 2] = $6; //@line 13774
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 13775
   HEAP32[$21 >> 2] = $8; //@line 13776
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 13777
   HEAP32[$22 >> 2] = $10; //@line 13778
   sp = STACKTOP; //@line 13779
   return;
  }
  ___async_unwind = 0; //@line 13782
  HEAP32[$ReallocAsyncCtx4 >> 2] = 350; //@line 13783
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 13784
  HEAP32[$18 >> 2] = $2; //@line 13785
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 13786
  HEAP32[$19 >> 2] = $4; //@line 13787
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 13788
  HEAP32[$20 >> 2] = $6; //@line 13789
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 13790
  HEAP32[$21 >> 2] = $8; //@line 13791
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 13792
  HEAP32[$22 >> 2] = $10; //@line 13793
  sp = STACKTOP; //@line 13794
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 13797
 $23 = $6 + 32 | 0; //@line 13798
 $24 = $6 + 44 | 0; //@line 13799
 $25 = HEAP32[$24 >> 2] | 0; //@line 13800
 if (!$25) {
  HEAP32[___async_retval >> 2] = 0; //@line 13804
  return;
 }
 $27 = $2 + 2516 | 0; //@line 13807
 if (($27 | 0) == ($23 | 0)) {
  $48 = HEAP32[$25 + 4 >> 2] | 0; //@line 13811
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 13812
  FUNCTION_TABLE_vii[$48 & 15]($8, $23); //@line 13813
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 353; //@line 13816
   $49 = $ReallocAsyncCtx7 + 4 | 0; //@line 13817
   HEAP32[$49 >> 2] = $24; //@line 13818
   $50 = $ReallocAsyncCtx7 + 8 | 0; //@line 13819
   HEAP32[$50 >> 2] = $2; //@line 13820
   $51 = $ReallocAsyncCtx7 + 12 | 0; //@line 13821
   HEAP32[$51 >> 2] = $8; //@line 13822
   sp = STACKTOP; //@line 13823
   return;
  }
  ___async_unwind = 0; //@line 13826
  HEAP32[$ReallocAsyncCtx7 >> 2] = 353; //@line 13827
  $49 = $ReallocAsyncCtx7 + 4 | 0; //@line 13828
  HEAP32[$49 >> 2] = $24; //@line 13829
  $50 = $ReallocAsyncCtx7 + 8 | 0; //@line 13830
  HEAP32[$50 >> 2] = $2; //@line 13831
  $51 = $ReallocAsyncCtx7 + 12 | 0; //@line 13832
  HEAP32[$51 >> 2] = $8; //@line 13833
  sp = STACKTOP; //@line 13834
  return;
 }
 $29 = $2 + 2528 | 0; //@line 13837
 $30 = HEAP32[$29 >> 2] | 0; //@line 13838
 if (!$30) {
  $41 = HEAP32[$25 + 4 >> 2] | 0; //@line 13842
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 13843
  FUNCTION_TABLE_vii[$41 & 15]($27, $23); //@line 13844
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 352; //@line 13847
   $42 = $ReallocAsyncCtx6 + 4 | 0; //@line 13848
   HEAP32[$42 >> 2] = $24; //@line 13849
   $43 = $ReallocAsyncCtx6 + 8 | 0; //@line 13850
   HEAP32[$43 >> 2] = $29; //@line 13851
   $44 = $ReallocAsyncCtx6 + 12 | 0; //@line 13852
   HEAP32[$44 >> 2] = $2; //@line 13853
   $45 = $ReallocAsyncCtx6 + 16 | 0; //@line 13854
   HEAP32[$45 >> 2] = $8; //@line 13855
   $46 = $ReallocAsyncCtx6 + 20 | 0; //@line 13856
   HEAP32[$46 >> 2] = $23; //@line 13857
   sp = STACKTOP; //@line 13858
   return;
  }
  ___async_unwind = 0; //@line 13861
  HEAP32[$ReallocAsyncCtx6 >> 2] = 352; //@line 13862
  $42 = $ReallocAsyncCtx6 + 4 | 0; //@line 13863
  HEAP32[$42 >> 2] = $24; //@line 13864
  $43 = $ReallocAsyncCtx6 + 8 | 0; //@line 13865
  HEAP32[$43 >> 2] = $29; //@line 13866
  $44 = $ReallocAsyncCtx6 + 12 | 0; //@line 13867
  HEAP32[$44 >> 2] = $2; //@line 13868
  $45 = $ReallocAsyncCtx6 + 16 | 0; //@line 13869
  HEAP32[$45 >> 2] = $8; //@line 13870
  $46 = $ReallocAsyncCtx6 + 20 | 0; //@line 13871
  HEAP32[$46 >> 2] = $23; //@line 13872
  sp = STACKTOP; //@line 13873
  return;
 } else {
  $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 13877
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 13878
  FUNCTION_TABLE_vi[$33 & 1023]($27); //@line 13879
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 351; //@line 13882
   $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 13883
   HEAP32[$34 >> 2] = $24; //@line 13884
   $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 13885
   HEAP32[$35 >> 2] = $29; //@line 13886
   $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 13887
   HEAP32[$36 >> 2] = $2; //@line 13888
   $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 13889
   HEAP32[$37 >> 2] = $27; //@line 13890
   $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 13891
   HEAP32[$38 >> 2] = $23; //@line 13892
   $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 13893
   HEAP32[$39 >> 2] = $8; //@line 13894
   sp = STACKTOP; //@line 13895
   return;
  }
  ___async_unwind = 0; //@line 13898
  HEAP32[$ReallocAsyncCtx5 >> 2] = 351; //@line 13899
  $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 13900
  HEAP32[$34 >> 2] = $24; //@line 13901
  $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 13902
  HEAP32[$35 >> 2] = $29; //@line 13903
  $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 13904
  HEAP32[$36 >> 2] = $2; //@line 13905
  $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 13906
  HEAP32[$37 >> 2] = $27; //@line 13907
  $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 13908
  HEAP32[$38 >> 2] = $23; //@line 13909
  $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 13910
  HEAP32[$39 >> 2] = $8; //@line 13911
  sp = STACKTOP; //@line 13912
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_294($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 10495
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10497
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10499
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10501
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10503
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10505
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10507
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10509
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10511
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$2 >> 2] | 0; //@line 10514
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 10518
   HEAP32[$AsyncRetVal + 16 >> 2] = HEAP32[$4 >> 2]; //@line 10521
   _equeue_event_dtor($AsyncRetVal, 270); //@line 10522
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 10523
   $32 = _equeue_post($6, 271, $AsyncRetVal) | 0; //@line 10524
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 272; //@line 10527
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 10528
    HEAP32[$33 >> 2] = $2; //@line 10529
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 10530
    HEAP32[$34 >> 2] = $10; //@line 10531
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 10532
    HEAP32[$35 >> 2] = $12; //@line 10533
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 10534
    HEAP32[$36 >> 2] = $8; //@line 10535
    sp = STACKTOP; //@line 10536
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 10540
   ___async_unwind = 0; //@line 10541
   HEAP32[$ReallocAsyncCtx6 >> 2] = 272; //@line 10542
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 10543
   HEAP32[$33 >> 2] = $2; //@line 10544
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 10545
   HEAP32[$34 >> 2] = $10; //@line 10546
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 10547
   HEAP32[$35 >> 2] = $12; //@line 10548
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 10549
   HEAP32[$36 >> 2] = $8; //@line 10550
   sp = STACKTOP; //@line 10551
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 10555
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 10556
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $12); //@line 10557
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 269; //@line 10560
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 10561
    HEAP32[$21 >> 2] = $14; //@line 10562
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 10563
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 10564
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 10565
    HEAP32[$23 >> 2] = $4; //@line 10566
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 10567
    HEAP32[$24 >> 2] = $6; //@line 10568
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 10569
    HEAP32[$25 >> 2] = $2; //@line 10570
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 10571
    HEAP32[$26 >> 2] = $10; //@line 10572
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 10573
    HEAP32[$27 >> 2] = $12; //@line 10574
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 10575
    HEAP32[$28 >> 2] = $8; //@line 10576
    sp = STACKTOP; //@line 10577
    return;
   }
   ___async_unwind = 0; //@line 10580
   HEAP32[$ReallocAsyncCtx3 >> 2] = 269; //@line 10581
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 10582
   HEAP32[$21 >> 2] = $14; //@line 10583
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 10584
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 10585
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 10586
   HEAP32[$23 >> 2] = $4; //@line 10587
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 10588
   HEAP32[$24 >> 2] = $6; //@line 10589
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 10590
   HEAP32[$25 >> 2] = $2; //@line 10591
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 10592
   HEAP32[$26 >> 2] = $10; //@line 10593
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 10594
   HEAP32[$27 >> 2] = $12; //@line 10595
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 10596
   HEAP32[$28 >> 2] = $8; //@line 10597
   sp = STACKTOP; //@line 10598
   return;
  }
 }
 $38 = HEAP32[$2 >> 2] | 0; //@line 10602
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 10606
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 10607
  FUNCTION_TABLE_vi[$41 & 1023]($12); //@line 10608
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 273; //@line 10611
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 10612
   HEAP32[$42 >> 2] = $10; //@line 10613
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 10614
   HEAP32[$43 >> 2] = 0; //@line 10615
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 10616
   HEAP32[$44 >> 2] = $8; //@line 10617
   sp = STACKTOP; //@line 10618
   return;
  }
  ___async_unwind = 0; //@line 10621
  HEAP32[$ReallocAsyncCtx4 >> 2] = 273; //@line 10622
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 10623
  HEAP32[$42 >> 2] = $10; //@line 10624
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 10625
  HEAP32[$43 >> 2] = 0; //@line 10626
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 10627
  HEAP32[$44 >> 2] = $8; //@line 10628
  sp = STACKTOP; //@line 10629
  return;
 }
 $45 = HEAP32[$10 >> 2] | 0; //@line 10632
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 10636
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 10640
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 10641
 FUNCTION_TABLE_vi[$48 & 1023]($8); //@line 10642
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 274; //@line 10645
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 10646
  HEAP32[$49 >> 2] = 0; //@line 10647
  sp = STACKTOP; //@line 10648
  return;
 }
 ___async_unwind = 0; //@line 10651
 HEAP32[$ReallocAsyncCtx5 >> 2] = 274; //@line 10652
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 10653
 HEAP32[$49 >> 2] = 0; //@line 10654
 sp = STACKTOP; //@line 10655
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_77($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24051
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24053
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24055
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24057
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24059
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24061
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24063
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24065
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24067
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$8 >> 2] | 0; //@line 24070
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 24074
   HEAP16[$AsyncRetVal + 16 >> 1] = HEAP16[$2 >> 1] | 0; //@line 24077
   _equeue_event_dtor($AsyncRetVal, 322); //@line 24078
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 24079
   $32 = _equeue_post($4, 323, $AsyncRetVal) | 0; //@line 24080
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 324; //@line 24083
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 24084
    HEAP32[$33 >> 2] = $8; //@line 24085
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 24086
    HEAP32[$34 >> 2] = $10; //@line 24087
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 24088
    HEAP32[$35 >> 2] = $6; //@line 24089
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 24090
    HEAP32[$36 >> 2] = $14; //@line 24091
    sp = STACKTOP; //@line 24092
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 24096
   ___async_unwind = 0; //@line 24097
   HEAP32[$ReallocAsyncCtx6 >> 2] = 324; //@line 24098
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 24099
   HEAP32[$33 >> 2] = $8; //@line 24100
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 24101
   HEAP32[$34 >> 2] = $10; //@line 24102
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 24103
   HEAP32[$35 >> 2] = $6; //@line 24104
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 24105
   HEAP32[$36 >> 2] = $14; //@line 24106
   sp = STACKTOP; //@line 24107
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 24111
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 24112
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $6); //@line 24113
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 321; //@line 24116
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 24117
    HEAP32[$21 >> 2] = $12; //@line 24118
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 24119
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 24120
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 24121
    HEAP32[$23 >> 2] = $2; //@line 24122
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 24123
    HEAP32[$24 >> 2] = $4; //@line 24124
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 24125
    HEAP32[$25 >> 2] = $8; //@line 24126
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 24127
    HEAP32[$26 >> 2] = $10; //@line 24128
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 24129
    HEAP32[$27 >> 2] = $6; //@line 24130
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 24131
    HEAP32[$28 >> 2] = $14; //@line 24132
    sp = STACKTOP; //@line 24133
    return;
   }
   ___async_unwind = 0; //@line 24136
   HEAP32[$ReallocAsyncCtx3 >> 2] = 321; //@line 24137
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 24138
   HEAP32[$21 >> 2] = $12; //@line 24139
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 24140
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 24141
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 24142
   HEAP32[$23 >> 2] = $2; //@line 24143
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 24144
   HEAP32[$24 >> 2] = $4; //@line 24145
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 24146
   HEAP32[$25 >> 2] = $8; //@line 24147
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 24148
   HEAP32[$26 >> 2] = $10; //@line 24149
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 24150
   HEAP32[$27 >> 2] = $6; //@line 24151
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 24152
   HEAP32[$28 >> 2] = $14; //@line 24153
   sp = STACKTOP; //@line 24154
   return;
  }
 }
 $38 = HEAP32[$8 >> 2] | 0; //@line 24158
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 24162
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 24163
  FUNCTION_TABLE_vi[$41 & 1023]($6); //@line 24164
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 325; //@line 24167
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 24168
   HEAP32[$42 >> 2] = $10; //@line 24169
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 24170
   HEAP32[$43 >> 2] = 0; //@line 24171
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 24172
   HEAP32[$44 >> 2] = $14; //@line 24173
   sp = STACKTOP; //@line 24174
   return;
  }
  ___async_unwind = 0; //@line 24177
  HEAP32[$ReallocAsyncCtx4 >> 2] = 325; //@line 24178
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 24179
  HEAP32[$42 >> 2] = $10; //@line 24180
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 24181
  HEAP32[$43 >> 2] = 0; //@line 24182
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 24183
  HEAP32[$44 >> 2] = $14; //@line 24184
  sp = STACKTOP; //@line 24185
  return;
 }
 $45 = HEAP32[$10 >> 2] | 0; //@line 24188
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 24192
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 24196
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 24197
 FUNCTION_TABLE_vi[$48 & 1023]($14); //@line 24198
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 326; //@line 24201
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 24202
  HEAP32[$49 >> 2] = 0; //@line 24203
  sp = STACKTOP; //@line 24204
  return;
 }
 ___async_unwind = 0; //@line 24207
 HEAP32[$ReallocAsyncCtx5 >> 2] = 326; //@line 24208
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 24209
 HEAP32[$49 >> 2] = 0; //@line 24210
 sp = STACKTOP; //@line 24211
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_417($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31418
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31420
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31422
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31424
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31426
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31428
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31430
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31432
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31434
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$12 >> 2] | 0; //@line 31437
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 31441
   HEAP8[$AsyncRetVal + 16 >> 0] = HEAP8[$6 >> 0] | 0; //@line 31444
   _equeue_event_dtor($AsyncRetVal, 224); //@line 31445
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 31446
   $32 = _equeue_post($8, 225, $AsyncRetVal) | 0; //@line 31447
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 226; //@line 31450
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 31451
    HEAP32[$33 >> 2] = $12; //@line 31452
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 31453
    HEAP32[$34 >> 2] = $2; //@line 31454
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 31455
    HEAP32[$35 >> 2] = $10; //@line 31456
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 31457
    HEAP32[$36 >> 2] = $4; //@line 31458
    sp = STACKTOP; //@line 31459
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 31463
   ___async_unwind = 0; //@line 31464
   HEAP32[$ReallocAsyncCtx6 >> 2] = 226; //@line 31465
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 31466
   HEAP32[$33 >> 2] = $12; //@line 31467
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 31468
   HEAP32[$34 >> 2] = $2; //@line 31469
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 31470
   HEAP32[$35 >> 2] = $10; //@line 31471
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 31472
   HEAP32[$36 >> 2] = $4; //@line 31473
   sp = STACKTOP; //@line 31474
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 31478
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 31479
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $10); //@line 31480
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 223; //@line 31483
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 31484
    HEAP32[$21 >> 2] = $14; //@line 31485
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 31486
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 31487
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 31488
    HEAP32[$23 >> 2] = $6; //@line 31489
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 31490
    HEAP32[$24 >> 2] = $8; //@line 31491
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 31492
    HEAP32[$25 >> 2] = $12; //@line 31493
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 31494
    HEAP32[$26 >> 2] = $2; //@line 31495
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 31496
    HEAP32[$27 >> 2] = $10; //@line 31497
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 31498
    HEAP32[$28 >> 2] = $4; //@line 31499
    sp = STACKTOP; //@line 31500
    return;
   }
   ___async_unwind = 0; //@line 31503
   HEAP32[$ReallocAsyncCtx3 >> 2] = 223; //@line 31504
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 31505
   HEAP32[$21 >> 2] = $14; //@line 31506
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 31507
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 31508
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 31509
   HEAP32[$23 >> 2] = $6; //@line 31510
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 31511
   HEAP32[$24 >> 2] = $8; //@line 31512
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 31513
   HEAP32[$25 >> 2] = $12; //@line 31514
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 31515
   HEAP32[$26 >> 2] = $2; //@line 31516
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 31517
   HEAP32[$27 >> 2] = $10; //@line 31518
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 31519
   HEAP32[$28 >> 2] = $4; //@line 31520
   sp = STACKTOP; //@line 31521
   return;
  }
 }
 $38 = HEAP32[$12 >> 2] | 0; //@line 31525
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 31529
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 31530
  FUNCTION_TABLE_vi[$41 & 1023]($10); //@line 31531
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 227; //@line 31534
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 31535
   HEAP32[$42 >> 2] = $2; //@line 31536
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 31537
   HEAP32[$43 >> 2] = 0; //@line 31538
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 31539
   HEAP32[$44 >> 2] = $4; //@line 31540
   sp = STACKTOP; //@line 31541
   return;
  }
  ___async_unwind = 0; //@line 31544
  HEAP32[$ReallocAsyncCtx4 >> 2] = 227; //@line 31545
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 31546
  HEAP32[$42 >> 2] = $2; //@line 31547
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 31548
  HEAP32[$43 >> 2] = 0; //@line 31549
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 31550
  HEAP32[$44 >> 2] = $4; //@line 31551
  sp = STACKTOP; //@line 31552
  return;
 }
 $45 = HEAP32[$2 >> 2] | 0; //@line 31555
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 31559
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 31563
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 31564
 FUNCTION_TABLE_vi[$48 & 1023]($4); //@line 31565
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 228; //@line 31568
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 31569
  HEAP32[$49 >> 2] = 0; //@line 31570
  sp = STACKTOP; //@line 31571
  return;
 }
 ___async_unwind = 0; //@line 31574
 HEAP32[$ReallocAsyncCtx5 >> 2] = 228; //@line 31575
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 31576
 HEAP32[$49 >> 2] = 0; //@line 31577
 sp = STACKTOP; //@line 31578
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $17 = 0, $2 = 0, $30 = 0, $35 = 0, $36 = 0, $44 = 0, $46 = 0, $61 = 0, $70 = 0, $79 = 0, $82 = 0, $88 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11989
 $1 = __ZN18LoRaWANTimeHandler16get_current_timeEv($0) | 0; //@line 11990
 $2 = $0 + 2364 | 0; //@line 11991
 do {
  if ((HEAP32[$2 >> 2] | 0) == 2) {
   $AsyncCtx23 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11997
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 11998
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 372; //@line 12001
    HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 12003
    HEAP32[$AsyncCtx23 + 8 >> 2] = $1; //@line 12005
    HEAP32[$AsyncCtx23 + 12 >> 2] = $0; //@line 12007
    HEAP32[$AsyncCtx23 + 16 >> 2] = $2; //@line 12009
    sp = STACKTOP; //@line 12010
    return;
   }
   _emscripten_free_async_context($AsyncCtx23 | 0); //@line 12013
   $17 = $0 + 1964 | 0; //@line 12016
   HEAP8[$17 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 12017
   HEAP32[$0 + 1968 >> 2] = HEAP32[$0 + 1912 >> 2]; //@line 12021
   HEAP8[$0 + 1980 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 12025
   HEAP8[$0 + 1981 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 12029
   HEAP32[$0 + 1984 >> 2] = 1; //@line 12031
   $30 = $0 + 1982 | 0; //@line 12034
   HEAP8[$30 >> 0] = (HEAP32[$2 >> 2] | 0) == 2 & 1; //@line 12036
   HEAP8[$0 + 2010 >> 0] = HEAP8[$0 + 1965 >> 0] | 0; //@line 12040
   $35 = $0 + 4 | 0; //@line 12041
   $AsyncCtx19 = _emscripten_alloc_async_context(28, sp) | 0; //@line 12042
   $36 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($35, $17) | 0; //@line 12043
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 373; //@line 12046
    HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 12048
    HEAP32[$AsyncCtx19 + 8 >> 2] = $1; //@line 12050
    HEAP32[$AsyncCtx19 + 12 >> 2] = $0; //@line 12052
    HEAP32[$AsyncCtx19 + 16 >> 2] = $2; //@line 12054
    HEAP32[$AsyncCtx19 + 20 >> 2] = $30; //@line 12056
    HEAP32[$AsyncCtx19 + 24 >> 2] = $35; //@line 12058
    sp = STACKTOP; //@line 12059
    return;
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 12062
   if ($36) {
    $44 = (HEAP8[$30 >> 0] | 0) != 0; //@line 12065
    $46 = HEAP32[$0 + 1888 >> 2] | 0; //@line 12067
    $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12068
    __ZN7LoRaPHY15setup_rx_windowEbj($35, $44, $46); //@line 12069
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 374; //@line 12072
     HEAP32[$AsyncCtx11 + 4 >> 2] = $30; //@line 12074
     HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 12076
     HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 12078
     HEAP32[$AsyncCtx11 + 16 >> 2] = $2; //@line 12080
     HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 12082
     sp = STACKTOP; //@line 12083
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12086
     HEAP32[$0 + 1168 >> 2] = HEAP8[$30 >> 0] | 0 ? 2 : 1; //@line 12091
     break;
    }
   }
  } else {
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12097
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 12098
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 371; //@line 12101
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 12103
    HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 12105
    HEAP32[$AsyncCtx15 + 12 >> 2] = $2; //@line 12107
    HEAP32[$AsyncCtx15 + 16 >> 2] = $1; //@line 12109
    sp = STACKTOP; //@line 12110
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12113
    break;
   }
  }
 } while (0);
 do {
  if (!(HEAP8[$0 + 1175 >> 0] | 0)) {
   HEAP32[$0 + 2040 >> 2] = 0; //@line 12124
   HEAP32[$0 + 2076 >> 2] = 4; //@line 12126
  } else {
   $61 = HEAP32[$0 + 1772 >> 2] | 0; //@line 12130
   $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12131
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1816 | 0, $61); //@line 12132
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 375; //@line 12135
    HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 12137
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 12139
    HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 12141
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 12143
    sp = STACKTOP; //@line 12144
    return;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12147
   do {
    if ((HEAP32[$2 >> 2] | 0) != 2) {
     $70 = HEAP32[$0 + 1776 >> 2] | 0; //@line 12154
     $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12155
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1836 | 0, $70); //@line 12156
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 376; //@line 12159
      HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12161
      HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 12163
      HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 12165
      sp = STACKTOP; //@line 12166
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12169
      break;
     }
    }
   } while (0);
   if (HEAP8[$0 + 1177 >> 0] | 0) {
    $79 = HEAP32[$0 + 1776 >> 2] | 0; //@line 12180
    $82 = (__ZN7LoRaPHY15get_ack_timeoutEv($0 + 4 | 0) | 0) + $79 | 0; //@line 12183
    $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 12184
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1856 | 0, $82); //@line 12185
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 377; //@line 12188
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12190
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 12192
     sp = STACKTOP; //@line 12193
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 12196
     break;
    }
   }
  }
 } while (0);
 $88 = HEAP8[$0 + 1182 >> 0] | 0; //@line 12203
 HEAP8[$0 + 1183 >> 0] = $88; //@line 12205
 __ZN7LoRaPHY16set_last_tx_doneEhbj($0 + 4 | 0, $88, (HEAP8[$0 + 2360 >> 0] | 0) != 0, $1); //@line 12210
 HEAP32[$0 + 1780 >> 2] = $1; //@line 12212
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_138($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 28646
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28648
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28650
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28652
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28654
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28658
 $13 = $12 + 12 | 0; //@line 28659
 HEAP32[$12 >> 2] = 191; //@line 28660
 HEAP32[$12 + 4 >> 2] = 0; //@line 28662
 HEAP32[$12 + 8 >> 2] = $2; //@line 28664
 HEAP32[$13 >> 2] = 808; //@line 28665
 $14 = $2 + 2384 | 0; //@line 28666
 if (($14 | 0) == ($12 | 0)) {
  $39 = HEAP32[204] | 0; //@line 28670
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 28671
  FUNCTION_TABLE_vi[$39 & 1023]($12); //@line 28672
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 194; //@line 28675
   $40 = $ReallocAsyncCtx12 + 4 | 0; //@line 28676
   HEAP32[$40 >> 2] = $2; //@line 28677
   $41 = $ReallocAsyncCtx12 + 8 | 0; //@line 28678
   HEAP32[$41 >> 2] = $4; //@line 28679
   $42 = $ReallocAsyncCtx12 + 12 | 0; //@line 28680
   HEAP32[$42 >> 2] = $6; //@line 28681
   $43 = $ReallocAsyncCtx12 + 16 | 0; //@line 28682
   HEAP32[$43 >> 2] = $12; //@line 28683
   $44 = $ReallocAsyncCtx12 + 20 | 0; //@line 28684
   HEAP32[$44 >> 2] = $8; //@line 28685
   sp = STACKTOP; //@line 28686
   return;
  }
  ___async_unwind = 0; //@line 28689
  HEAP32[$ReallocAsyncCtx12 >> 2] = 194; //@line 28690
  $40 = $ReallocAsyncCtx12 + 4 | 0; //@line 28691
  HEAP32[$40 >> 2] = $2; //@line 28692
  $41 = $ReallocAsyncCtx12 + 8 | 0; //@line 28693
  HEAP32[$41 >> 2] = $4; //@line 28694
  $42 = $ReallocAsyncCtx12 + 12 | 0; //@line 28695
  HEAP32[$42 >> 2] = $6; //@line 28696
  $43 = $ReallocAsyncCtx12 + 16 | 0; //@line 28697
  HEAP32[$43 >> 2] = $12; //@line 28698
  $44 = $ReallocAsyncCtx12 + 20 | 0; //@line 28699
  HEAP32[$44 >> 2] = $8; //@line 28700
  sp = STACKTOP; //@line 28701
  return;
 }
 $16 = $2 + 2396 | 0; //@line 28704
 $17 = HEAP32[$16 >> 2] | 0; //@line 28705
 if (!$17) {
  $30 = HEAP32[203] | 0; //@line 28709
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 28710
  FUNCTION_TABLE_vii[$30 & 15]($14, $12); //@line 28711
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 193; //@line 28714
   $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 28715
   HEAP32[$31 >> 2] = $2; //@line 28716
   $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 28717
   HEAP32[$32 >> 2] = $4; //@line 28718
   $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 28719
   HEAP32[$33 >> 2] = $6; //@line 28720
   $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 28721
   HEAP32[$34 >> 2] = $12; //@line 28722
   $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 28723
   HEAP32[$35 >> 2] = $8; //@line 28724
   $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 28725
   HEAP32[$36 >> 2] = $13; //@line 28726
   $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 28727
   HEAP32[$37 >> 2] = $16; //@line 28728
   sp = STACKTOP; //@line 28729
   return;
  }
  ___async_unwind = 0; //@line 28732
  HEAP32[$ReallocAsyncCtx11 >> 2] = 193; //@line 28733
  $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 28734
  HEAP32[$31 >> 2] = $2; //@line 28735
  $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 28736
  HEAP32[$32 >> 2] = $4; //@line 28737
  $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 28738
  HEAP32[$33 >> 2] = $6; //@line 28739
  $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 28740
  HEAP32[$34 >> 2] = $12; //@line 28741
  $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 28742
  HEAP32[$35 >> 2] = $8; //@line 28743
  $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 28744
  HEAP32[$36 >> 2] = $13; //@line 28745
  $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 28746
  HEAP32[$37 >> 2] = $16; //@line 28747
  sp = STACKTOP; //@line 28748
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 28752
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 28753
  FUNCTION_TABLE_vi[$20 & 1023]($14); //@line 28754
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 192; //@line 28757
   $21 = $ReallocAsyncCtx10 + 4 | 0; //@line 28758
   HEAP32[$21 >> 2] = $2; //@line 28759
   $22 = $ReallocAsyncCtx10 + 8 | 0; //@line 28760
   HEAP32[$22 >> 2] = $4; //@line 28761
   $23 = $ReallocAsyncCtx10 + 12 | 0; //@line 28762
   HEAP32[$23 >> 2] = $6; //@line 28763
   $24 = $ReallocAsyncCtx10 + 16 | 0; //@line 28764
   HEAP32[$24 >> 2] = $14; //@line 28765
   $25 = $ReallocAsyncCtx10 + 20 | 0; //@line 28766
   HEAP32[$25 >> 2] = $12; //@line 28767
   $26 = $ReallocAsyncCtx10 + 24 | 0; //@line 28768
   HEAP32[$26 >> 2] = $8; //@line 28769
   $27 = $ReallocAsyncCtx10 + 28 | 0; //@line 28770
   HEAP32[$27 >> 2] = $13; //@line 28771
   $28 = $ReallocAsyncCtx10 + 32 | 0; //@line 28772
   HEAP32[$28 >> 2] = $16; //@line 28773
   sp = STACKTOP; //@line 28774
   return;
  }
  ___async_unwind = 0; //@line 28777
  HEAP32[$ReallocAsyncCtx10 >> 2] = 192; //@line 28778
  $21 = $ReallocAsyncCtx10 + 4 | 0; //@line 28779
  HEAP32[$21 >> 2] = $2; //@line 28780
  $22 = $ReallocAsyncCtx10 + 8 | 0; //@line 28781
  HEAP32[$22 >> 2] = $4; //@line 28782
  $23 = $ReallocAsyncCtx10 + 12 | 0; //@line 28783
  HEAP32[$23 >> 2] = $6; //@line 28784
  $24 = $ReallocAsyncCtx10 + 16 | 0; //@line 28785
  HEAP32[$24 >> 2] = $14; //@line 28786
  $25 = $ReallocAsyncCtx10 + 20 | 0; //@line 28787
  HEAP32[$25 >> 2] = $12; //@line 28788
  $26 = $ReallocAsyncCtx10 + 24 | 0; //@line 28789
  HEAP32[$26 >> 2] = $8; //@line 28790
  $27 = $ReallocAsyncCtx10 + 28 | 0; //@line 28791
  HEAP32[$27 >> 2] = $13; //@line 28792
  $28 = $ReallocAsyncCtx10 + 32 | 0; //@line 28793
  HEAP32[$28 >> 2] = $16; //@line 28794
  sp = STACKTOP; //@line 28795
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_182($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 180
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 182
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 184
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 186
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 188
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 190
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 192
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 194
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 196
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$4 >> 2] | 0; //@line 199
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 203
   $30 = $AsyncRetVal + 16 | 0; //@line 204
   HEAP32[$30 >> 2] = HEAP32[$8 >> 2]; //@line 205
   HEAP32[$30 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 205
   HEAP8[$30 + 8 >> 0] = HEAP8[$8 + 8 >> 0] | 0; //@line 205
   _equeue_event_dtor($AsyncRetVal, 300); //@line 206
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 207
   $31 = _equeue_post($10, 301, $AsyncRetVal) | 0; //@line 208
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 302; //@line 211
    $32 = $ReallocAsyncCtx6 + 4 | 0; //@line 212
    HEAP32[$32 >> 2] = $4; //@line 213
    $33 = $ReallocAsyncCtx6 + 8 | 0; //@line 214
    HEAP32[$33 >> 2] = $12; //@line 215
    $34 = $ReallocAsyncCtx6 + 12 | 0; //@line 216
    HEAP32[$34 >> 2] = $6; //@line 217
    $35 = $ReallocAsyncCtx6 + 16 | 0; //@line 218
    HEAP32[$35 >> 2] = $14; //@line 219
    sp = STACKTOP; //@line 220
    return;
   }
   HEAP32[___async_retval >> 2] = $31; //@line 224
   ___async_unwind = 0; //@line 225
   HEAP32[$ReallocAsyncCtx6 >> 2] = 302; //@line 226
   $32 = $ReallocAsyncCtx6 + 4 | 0; //@line 227
   HEAP32[$32 >> 2] = $4; //@line 228
   $33 = $ReallocAsyncCtx6 + 8 | 0; //@line 229
   HEAP32[$33 >> 2] = $12; //@line 230
   $34 = $ReallocAsyncCtx6 + 12 | 0; //@line 231
   HEAP32[$34 >> 2] = $6; //@line 232
   $35 = $ReallocAsyncCtx6 + 16 | 0; //@line 233
   HEAP32[$35 >> 2] = $14; //@line 234
   sp = STACKTOP; //@line 235
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 239
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 240
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $6); //@line 241
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 299; //@line 244
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 245
    HEAP32[$21 >> 2] = $2; //@line 246
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 247
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 248
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 249
    HEAP32[$23 >> 2] = $8; //@line 250
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 251
    HEAP32[$24 >> 2] = $10; //@line 252
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 253
    HEAP32[$25 >> 2] = $4; //@line 254
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 255
    HEAP32[$26 >> 2] = $12; //@line 256
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 257
    HEAP32[$27 >> 2] = $6; //@line 258
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 259
    HEAP32[$28 >> 2] = $14; //@line 260
    sp = STACKTOP; //@line 261
    return;
   }
   ___async_unwind = 0; //@line 264
   HEAP32[$ReallocAsyncCtx3 >> 2] = 299; //@line 265
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 266
   HEAP32[$21 >> 2] = $2; //@line 267
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 268
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 269
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 270
   HEAP32[$23 >> 2] = $8; //@line 271
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 272
   HEAP32[$24 >> 2] = $10; //@line 273
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 274
   HEAP32[$25 >> 2] = $4; //@line 275
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 276
   HEAP32[$26 >> 2] = $12; //@line 277
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 278
   HEAP32[$27 >> 2] = $6; //@line 279
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 280
   HEAP32[$28 >> 2] = $14; //@line 281
   sp = STACKTOP; //@line 282
   return;
  }
 }
 $37 = HEAP32[$4 >> 2] | 0; //@line 286
 if ($37 | 0) {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 290
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 291
  FUNCTION_TABLE_vi[$40 & 1023]($6); //@line 292
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 303; //@line 295
   $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 296
   HEAP32[$41 >> 2] = $12; //@line 297
   $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 298
   HEAP32[$42 >> 2] = 0; //@line 299
   $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 300
   HEAP32[$43 >> 2] = $14; //@line 301
   sp = STACKTOP; //@line 302
   return;
  }
  ___async_unwind = 0; //@line 305
  HEAP32[$ReallocAsyncCtx4 >> 2] = 303; //@line 306
  $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 307
  HEAP32[$41 >> 2] = $12; //@line 308
  $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 309
  HEAP32[$42 >> 2] = 0; //@line 310
  $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 311
  HEAP32[$43 >> 2] = $14; //@line 312
  sp = STACKTOP; //@line 313
  return;
 }
 $44 = HEAP32[$12 >> 2] | 0; //@line 316
 if (!$44) {
  HEAP32[___async_retval >> 2] = 0; //@line 320
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 324
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 325
 FUNCTION_TABLE_vi[$47 & 1023]($14); //@line 326
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 304; //@line 329
  $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 330
  HEAP32[$48 >> 2] = 0; //@line 331
  sp = STACKTOP; //@line 332
  return;
 }
 ___async_unwind = 0; //@line 335
 HEAP32[$ReallocAsyncCtx5 >> 2] = 304; //@line 336
 $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 337
 HEAP32[$48 >> 2] = 0; //@line 338
 sp = STACKTOP; //@line 339
 return;
}
function __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$046$lcssa$off0 = 0, $$04660 = 0, $$047$lcssa = 0, $$04759 = 0, $$050$lcssa = 0, $$1 = 0, $10 = 0, $101 = 0, $107 = 0, $113 = 0, $119 = 0, $12 = 0, $125 = 0, $131 = 0, $137 = 0, $143 = 0, $149 = 0, $155 = 0, $156 = 0, $157 = 0, $166 = 0, $168 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $59 = 0, $65 = 0, $71 = 0, $77 = 0, $83 = 0, $89 = 0, $9 = 0, $95 = 0, $indvars$iv = 0, $wide$trip$count = 0, label = 0;
 $9 = $0 + 64 | 0; //@line 19157
 _mbedtls_aes_init($9); //@line 19158
 $10 = _mbedtls_aes_setkey_enc($9, $3, $4) | 0; //@line 19159
 if ($10 | 0) {
  $$1 = $10; //@line 19162
  _mbedtls_aes_free($9); //@line 19163
  return $$1 | 0; //@line 19164
 }
 $12 = $0 + 32 | 0; //@line 19166
 HEAP8[$0 + 37 >> 0] = $6; //@line 19168
 HEAP8[$0 + 38 >> 0] = $5; //@line 19171
 HEAP8[$0 + 39 >> 0] = $5 >>> 8; //@line 19175
 HEAP8[$0 + 40 >> 0] = $5 >>> 16; //@line 19179
 HEAP8[$0 + 41 >> 0] = $5 >>> 24; //@line 19183
 HEAP8[$0 + 42 >> 0] = $7; //@line 19186
 HEAP8[$0 + 43 >> 0] = $7 >>> 8; //@line 19190
 HEAP8[$0 + 44 >> 0] = $7 >>> 16; //@line 19194
 HEAP8[$0 + 45 >> 0] = $7 >>> 24; //@line 19198
 do {
  if (($2 & 65535) > 15) {
   $38 = $0 + 47 | 0; //@line 19203
   $39 = $0 + 48 | 0; //@line 19204
   $40 = $0 + 49 | 0; //@line 19205
   $41 = $0 + 50 | 0; //@line 19206
   $42 = $0 + 51 | 0; //@line 19207
   $43 = $0 + 52 | 0; //@line 19208
   $44 = $0 + 53 | 0; //@line 19209
   $45 = $0 + 54 | 0; //@line 19210
   $46 = $0 + 55 | 0; //@line 19211
   $47 = $0 + 56 | 0; //@line 19212
   $48 = $0 + 57 | 0; //@line 19213
   $49 = $0 + 58 | 0; //@line 19214
   $50 = $0 + 59 | 0; //@line 19215
   $51 = $0 + 60 | 0; //@line 19216
   $52 = $0 + 61 | 0; //@line 19217
   $53 = $0 + 62 | 0; //@line 19218
   $54 = $0 + 63 | 0; //@line 19219
   $$04660 = 1; //@line 19220
   $$04759 = 0; //@line 19220
   $156 = $2 & 65535; //@line 19220
   while (1) {
    HEAP8[$38 >> 0] = $$04660; //@line 19223
    $$04660 = $$04660 + 1 << 16 >> 16; //@line 19224
    $57 = _mbedtls_aes_crypt_ecb($9, 1, $12, $39) | 0; //@line 19225
    if ($57 | 0) {
     $$1 = $57; //@line 19228
     label = 11; //@line 19229
     break;
    }
    $59 = $$04759 & 255; //@line 19232
    HEAP8[$8 + $59 >> 0] = HEAP8[$39 >> 0] ^ HEAP8[$1 + $59 >> 0]; //@line 19238
    $65 = $59 + 1 | 0; //@line 19239
    HEAP8[$8 + $65 >> 0] = HEAP8[$40 >> 0] ^ HEAP8[$1 + $65 >> 0]; //@line 19245
    $71 = $59 + 2 | 0; //@line 19246
    HEAP8[$8 + $71 >> 0] = HEAP8[$41 >> 0] ^ HEAP8[$1 + $71 >> 0]; //@line 19252
    $77 = $59 + 3 | 0; //@line 19253
    HEAP8[$8 + $77 >> 0] = HEAP8[$42 >> 0] ^ HEAP8[$1 + $77 >> 0]; //@line 19259
    $83 = $59 + 4 | 0; //@line 19260
    HEAP8[$8 + $83 >> 0] = HEAP8[$43 >> 0] ^ HEAP8[$1 + $83 >> 0]; //@line 19266
    $89 = $59 + 5 | 0; //@line 19267
    HEAP8[$8 + $89 >> 0] = HEAP8[$44 >> 0] ^ HEAP8[$1 + $89 >> 0]; //@line 19273
    $95 = $59 + 6 | 0; //@line 19274
    HEAP8[$8 + $95 >> 0] = HEAP8[$45 >> 0] ^ HEAP8[$1 + $95 >> 0]; //@line 19280
    $101 = $59 + 7 | 0; //@line 19281
    HEAP8[$8 + $101 >> 0] = HEAP8[$46 >> 0] ^ HEAP8[$1 + $101 >> 0]; //@line 19287
    $107 = $59 + 8 | 0; //@line 19288
    HEAP8[$8 + $107 >> 0] = HEAP8[$47 >> 0] ^ HEAP8[$1 + $107 >> 0]; //@line 19294
    $113 = $59 + 9 | 0; //@line 19295
    HEAP8[$8 + $113 >> 0] = HEAP8[$48 >> 0] ^ HEAP8[$1 + $113 >> 0]; //@line 19301
    $119 = $59 + 10 | 0; //@line 19302
    HEAP8[$8 + $119 >> 0] = HEAP8[$49 >> 0] ^ HEAP8[$1 + $119 >> 0]; //@line 19308
    $125 = $59 + 11 | 0; //@line 19309
    HEAP8[$8 + $125 >> 0] = HEAP8[$50 >> 0] ^ HEAP8[$1 + $125 >> 0]; //@line 19315
    $131 = $59 + 12 | 0; //@line 19316
    HEAP8[$8 + $131 >> 0] = HEAP8[$51 >> 0] ^ HEAP8[$1 + $131 >> 0]; //@line 19322
    $137 = $59 + 13 | 0; //@line 19323
    HEAP8[$8 + $137 >> 0] = HEAP8[$52 >> 0] ^ HEAP8[$1 + $137 >> 0]; //@line 19329
    $143 = $59 + 14 | 0; //@line 19330
    HEAP8[$8 + $143 >> 0] = HEAP8[$53 >> 0] ^ HEAP8[$1 + $143 >> 0]; //@line 19336
    $149 = $59 + 15 | 0; //@line 19337
    HEAP8[$8 + $149 >> 0] = HEAP8[$54 >> 0] ^ HEAP8[$1 + $149 >> 0]; //@line 19343
    $155 = $156 + 65520 | 0; //@line 19344
    $157 = $155 & 65535; //@line 19345
    if (($157 & 65535) <= 15) {
     label = 6; //@line 19353
     break;
    } else {
     $$04759 = $59 + 16 & 255; //@line 19351
     $156 = $155 & 65535; //@line 19351
    }
   }
   if ((label | 0) == 6) {
    $$046$lcssa$off0 = $$04660 & 255; //@line 19361
    $$047$lcssa = $$04759 + 16 & 255; //@line 19361
    $$050$lcssa = $157; //@line 19361
    break;
   } else if ((label | 0) == 11) {
    _mbedtls_aes_free($9); //@line 19365
    return $$1 | 0; //@line 19366
   }
  } else {
   $$046$lcssa$off0 = 1; //@line 19369
   $$047$lcssa = 0; //@line 19369
   $$050$lcssa = $2; //@line 19369
  }
 } while (0);
 if (!($$050$lcssa << 16 >> 16)) {
  $$1 = 0; //@line 19374
  _mbedtls_aes_free($9); //@line 19375
  return $$1 | 0; //@line 19376
 }
 HEAP8[$0 + 47 >> 0] = $$046$lcssa$off0; //@line 19379
 $166 = _mbedtls_aes_crypt_ecb($9, 1, $12, $0 + 48 | 0) | 0; //@line 19381
 if ($166 | 0) {
  $$1 = $166; //@line 19384
  _mbedtls_aes_free($9); //@line 19385
  return $$1 | 0; //@line 19386
 }
 $wide$trip$count = $$050$lcssa & 65535; //@line 19388
 $indvars$iv = 0; //@line 19389
 do {
  $168 = $indvars$iv + $$047$lcssa | 0; //@line 19391
  HEAP8[$8 + $168 >> 0] = HEAP8[$0 + 48 + $indvars$iv >> 0] ^ HEAP8[$1 + $168 >> 0]; //@line 19398
  $indvars$iv = $indvars$iv + 1 | 0; //@line 19399
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$1 = 0; //@line 19402
 _mbedtls_aes_free($9); //@line 19408
 return $$1 | 0; //@line 19409
}
function _mbedtls_gcm_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$061 = 0, $$163 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $75 = 0, $8 = 0, $84 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28165
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28167
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28169
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28171
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28173
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28175
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28177
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28179
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28181
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28183
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28185
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28187
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28189
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28191
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28193
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 28195
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 28197
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28199
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 28202
  $84 = ___async_retval; //@line 28203
  HEAP32[$84 >> 2] = $$0; //@line 28204
  return;
 }
 if ($2 | 0) {
  $$163 = 0; //@line 28209
  do {
   $67 = $8 + 376 + $$163 | 0; //@line 28213
   $68 = $14 + $$163 | 0; //@line 28214
   if (!(HEAP32[$18 >> 2] | 0)) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 28219
   }
   $75 = HEAP8[$68 >> 0] ^ HEAP8[$20 + $$163 >> 0]; //@line 28224
   HEAP8[$16 + $$163 >> 0] = $75; //@line 28226
   if ((HEAP32[$18 >> 2] | 0) == 1) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 28232
   }
   $$163 = $$163 + 1 | 0; //@line 28234
  } while ($$163 >>> 0 < $2 >>> 0);
 }
 _gcm_mult($8, $10, $10); //@line 28243
 $35 = $12 - $2 | 0; //@line 28244
 $51 = $14 + $2 | 0; //@line 28245
 $53 = $16 + $2 | 0; //@line 28246
 if (!$35) {
  $$0 = 0; //@line 28249
  $84 = ___async_retval; //@line 28250
  HEAP32[$84 >> 2] = $$0; //@line 28251
  return;
 }
 $36 = $35 >>> 0 < 16 ? $35 : 16; //@line 28255
 $$061 = 16; //@line 28256
 do {
  if ($$061 >>> 0 <= 12) {
   break;
  }
  $$061 = $$061 + -1 | 0; //@line 28262
  $39 = $8 + 360 + $$061 | 0; //@line 28263
  $41 = (HEAP8[$39 >> 0] | 0) + 1 << 24 >> 24; //@line 28265
  HEAP8[$39 >> 0] = $41; //@line 28266
 } while (!($41 << 24 >> 24));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 28274
 $43 = _mbedtls_cipher_update($28, $30, 16, $6, $32) | 0; //@line 28275
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 594; //@line 28278
  $44 = $ReallocAsyncCtx + 4 | 0; //@line 28279
  HEAP32[$44 >> 2] = $36; //@line 28280
  $45 = $ReallocAsyncCtx + 8 | 0; //@line 28281
  HEAP32[$45 >> 2] = $4; //@line 28282
  $46 = $ReallocAsyncCtx + 12 | 0; //@line 28283
  HEAP32[$46 >> 2] = $6; //@line 28284
  $47 = $ReallocAsyncCtx + 16 | 0; //@line 28285
  HEAP32[$47 >> 2] = $8; //@line 28286
  $48 = $ReallocAsyncCtx + 20 | 0; //@line 28287
  HEAP32[$48 >> 2] = $10; //@line 28288
  $49 = $ReallocAsyncCtx + 24 | 0; //@line 28289
  HEAP32[$49 >> 2] = $35; //@line 28290
  $50 = $ReallocAsyncCtx + 28 | 0; //@line 28291
  HEAP32[$50 >> 2] = $51; //@line 28292
  $52 = $ReallocAsyncCtx + 32 | 0; //@line 28293
  HEAP32[$52 >> 2] = $53; //@line 28294
  $54 = $ReallocAsyncCtx + 36 | 0; //@line 28295
  HEAP32[$54 >> 2] = $18; //@line 28296
  $55 = $ReallocAsyncCtx + 40 | 0; //@line 28297
  HEAP32[$55 >> 2] = $20; //@line 28298
  $56 = $ReallocAsyncCtx + 44 | 0; //@line 28299
  HEAP32[$56 >> 2] = $22; //@line 28300
  $57 = $ReallocAsyncCtx + 48 | 0; //@line 28301
  HEAP32[$57 >> 2] = $24; //@line 28302
  $58 = $ReallocAsyncCtx + 52 | 0; //@line 28303
  HEAP32[$58 >> 2] = $26; //@line 28304
  $59 = $ReallocAsyncCtx + 56 | 0; //@line 28305
  HEAP32[$59 >> 2] = $28; //@line 28306
  $60 = $ReallocAsyncCtx + 60 | 0; //@line 28307
  HEAP32[$60 >> 2] = $30; //@line 28308
  $61 = $ReallocAsyncCtx + 64 | 0; //@line 28309
  HEAP32[$61 >> 2] = $32; //@line 28310
  sp = STACKTOP; //@line 28311
  return;
 }
 HEAP32[___async_retval >> 2] = $43; //@line 28315
 ___async_unwind = 0; //@line 28316
 HEAP32[$ReallocAsyncCtx >> 2] = 594; //@line 28317
 $44 = $ReallocAsyncCtx + 4 | 0; //@line 28318
 HEAP32[$44 >> 2] = $36; //@line 28319
 $45 = $ReallocAsyncCtx + 8 | 0; //@line 28320
 HEAP32[$45 >> 2] = $4; //@line 28321
 $46 = $ReallocAsyncCtx + 12 | 0; //@line 28322
 HEAP32[$46 >> 2] = $6; //@line 28323
 $47 = $ReallocAsyncCtx + 16 | 0; //@line 28324
 HEAP32[$47 >> 2] = $8; //@line 28325
 $48 = $ReallocAsyncCtx + 20 | 0; //@line 28326
 HEAP32[$48 >> 2] = $10; //@line 28327
 $49 = $ReallocAsyncCtx + 24 | 0; //@line 28328
 HEAP32[$49 >> 2] = $35; //@line 28329
 $50 = $ReallocAsyncCtx + 28 | 0; //@line 28330
 HEAP32[$50 >> 2] = $51; //@line 28331
 $52 = $ReallocAsyncCtx + 32 | 0; //@line 28332
 HEAP32[$52 >> 2] = $53; //@line 28333
 $54 = $ReallocAsyncCtx + 36 | 0; //@line 28334
 HEAP32[$54 >> 2] = $18; //@line 28335
 $55 = $ReallocAsyncCtx + 40 | 0; //@line 28336
 HEAP32[$55 >> 2] = $20; //@line 28337
 $56 = $ReallocAsyncCtx + 44 | 0; //@line 28338
 HEAP32[$56 >> 2] = $22; //@line 28339
 $57 = $ReallocAsyncCtx + 48 | 0; //@line 28340
 HEAP32[$57 >> 2] = $24; //@line 28341
 $58 = $ReallocAsyncCtx + 52 | 0; //@line 28342
 HEAP32[$58 >> 2] = $26; //@line 28343
 $59 = $ReallocAsyncCtx + 56 | 0; //@line 28344
 HEAP32[$59 >> 2] = $28; //@line 28345
 $60 = $ReallocAsyncCtx + 60 | 0; //@line 28346
 HEAP32[$60 >> 2] = $30; //@line 28347
 $61 = $ReallocAsyncCtx + 64 | 0; //@line 28348
 HEAP32[$61 >> 2] = $32; //@line 28349
 sp = STACKTOP; //@line 28350
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $33 = 0, $38 = 0, $41 = 0, $46 = 0, $52 = 0, $53 = 0, $56 = 0, $59 = 0, $62 = 0, $65 = 0, $67 = 0, $70 = 0, $73 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 1656
 STACKTOP = STACKTOP + 32 | 0; //@line 1657
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1657
 $1 = sp + 8 | 0; //@line 1659
 _mbed_tracef(16, 11020, 11518, sp); //@line 1660
 $2 = $0 + 688 | 0; //@line 1661
 switch (HEAP8[$2 >> 0] | 0) {
 case 1:
  {
   do {
    if (!(HEAP8[$0 + 689 >> 0] | 0)) {
     HEAP8[$0 + 732 >> 0] = 0; //@line 1671
     HEAP8[$0 + 733 >> 0] = 0; //@line 1673
     HEAP16[$0 + 744 >> 1] = 0; //@line 1675
     HEAP16[$0 + 742 >> 1] = 0; //@line 1677
     if (!(HEAP8[$0 + 722 >> 0] | 0)) {
      HEAP8[$2 >> 0] = 0; //@line 1682
      $14 = $0 + 1176 | 0; //@line 1683
      $15 = $1 + 12 | 0; //@line 1684
      HEAP32[$1 >> 2] = 55; //@line 1685
      HEAP32[$1 + 4 >> 2] = 0; //@line 1687
      HEAP32[$1 + 8 >> 2] = $0; //@line 1689
      HEAP32[$15 >> 2] = 584; //@line 1690
      $18 = ___muldi3(HEAP32[$0 + 728 >> 2] | 0, 0, 1e3, 0) | 0; //@line 1693
      $19 = tempRet0; //@line 1694
      $20 = $0 + 1216 | 0; //@line 1695
      if (($20 | 0) != ($1 | 0)) {
       $22 = $0 + 1228 | 0; //@line 1698
       $23 = HEAP32[$22 >> 2] | 0; //@line 1699
       do {
        if ($23 | 0) {
         $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 1704
         $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 1705
         FUNCTION_TABLE_vi[$26 & 1023]($20); //@line 1706
         if (___async) {
          HEAP32[$AsyncCtx >> 2] = 86; //@line 1709
          HEAP32[$AsyncCtx + 4 >> 2] = $15; //@line 1711
          HEAP32[$AsyncCtx + 8 >> 2] = $22; //@line 1713
          HEAP32[$AsyncCtx + 12 >> 2] = $20; //@line 1715
          HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 1717
          HEAP32[$AsyncCtx + 20 >> 2] = $14; //@line 1719
          $33 = $AsyncCtx + 24 | 0; //@line 1721
          HEAP32[$33 >> 2] = $18; //@line 1723
          HEAP32[$33 + 4 >> 2] = $19; //@line 1726
          HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 1728
          sp = STACKTOP; //@line 1729
          STACKTOP = sp; //@line 1730
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx | 0); //@line 1732
          break;
         }
        }
       } while (0);
       $38 = HEAP32[$15 >> 2] | 0; //@line 1737
       do {
        if (!$38) {
         $52 = 0; //@line 1741
        } else {
         $41 = HEAP32[$38 + 4 >> 2] | 0; //@line 1744
         $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 1745
         FUNCTION_TABLE_vii[$41 & 15]($20, $1); //@line 1746
         if (___async) {
          HEAP32[$AsyncCtx2 >> 2] = 87; //@line 1749
          HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 1751
          HEAP32[$AsyncCtx2 + 8 >> 2] = $22; //@line 1753
          HEAP32[$AsyncCtx2 + 12 >> 2] = $14; //@line 1755
          $46 = $AsyncCtx2 + 16 | 0; //@line 1757
          HEAP32[$46 >> 2] = $18; //@line 1759
          HEAP32[$46 + 4 >> 2] = $19; //@line 1762
          HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 1764
          HEAP32[$AsyncCtx2 + 28 >> 2] = $1; //@line 1766
          sp = STACKTOP; //@line 1767
          STACKTOP = sp; //@line 1768
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx2 | 0); //@line 1770
          $52 = HEAP32[$15 >> 2] | 0; //@line 1772
          break;
         }
        }
       } while (0);
       HEAP32[$22 >> 2] = $52; //@line 1777
      }
      __ZN4mbed6Ticker5setupEy($14, $18, $19); //@line 1779
      $53 = HEAP32[$15 >> 2] | 0; //@line 1780
      if ($53 | 0) {
       $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 1784
       $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1785
       FUNCTION_TABLE_vi[$56 & 1023]($1); //@line 1786
       if (___async) {
        HEAP32[$AsyncCtx6 >> 2] = 88; //@line 1789
        HEAP32[$AsyncCtx6 + 4 >> 2] = $0; //@line 1791
        sp = STACKTOP; //@line 1792
        STACKTOP = sp; //@line 1793
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx6 | 0); //@line 1795
        break;
       }
      }
     }
    }
   } while (0);
   $59 = HEAP32[$0 + 788 >> 2] | 0; //@line 1803
   if (!$59) {
    STACKTOP = sp; //@line 1806
    return;
   }
   $62 = HEAP32[$59 + 60 >> 2] | 0; //@line 1809
   if (!$62) {
    STACKTOP = sp; //@line 1812
    return;
   }
   $65 = HEAP32[$62 >> 2] | 0; //@line 1815
   $AsyncCtx9 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1816
   FUNCTION_TABLE_vi[$65 & 1023]($59 + 48 | 0); //@line 1817
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 89; //@line 1820
    sp = STACKTOP; //@line 1821
    STACKTOP = sp; //@line 1822
    return;
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 1824
   STACKTOP = sp; //@line 1825
   return;
  }
 case 2:
  {
   HEAP8[$2 >> 0] = 0; //@line 1829
   $67 = HEAP32[$0 + 788 >> 2] | 0; //@line 1831
   if (!$67) {
    STACKTOP = sp; //@line 1834
    return;
   }
   $70 = HEAP32[$67 + 28 >> 2] | 0; //@line 1837
   if (!$70) {
    STACKTOP = sp; //@line 1840
    return;
   }
   $73 = HEAP32[$70 >> 2] | 0; //@line 1843
   $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1844
   FUNCTION_TABLE_vi[$73 & 1023]($67 + 16 | 0); //@line 1845
   if (___async) {
    HEAP32[$AsyncCtx12 >> 2] = 90; //@line 1848
    sp = STACKTOP; //@line 1849
    STACKTOP = sp; //@line 1850
    return;
   }
   _emscripten_free_async_context($AsyncCtx12 | 0); //@line 1852
   STACKTOP = sp; //@line 1853
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 1857
   return;
  }
 }
}
function _initialize__async_cb_58($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22796
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22798
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22800
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22802
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22804
 $8 = HEAP32[$AsyncRetVal >> 2] | 0; //@line 22805
 if (!$8) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 22808
  _mbed_assert_internal(14489, 14491, 41); //@line 22809
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 599; //@line 22812
   $10 = $ReallocAsyncCtx7 + 4 | 0; //@line 22813
   HEAP32[$10 >> 2] = $2; //@line 22814
   $11 = $ReallocAsyncCtx7 + 8 | 0; //@line 22815
   HEAP32[$11 >> 2] = $4; //@line 22816
   $12 = $ReallocAsyncCtx7 + 12 | 0; //@line 22817
   HEAP32[$12 >> 2] = $6; //@line 22818
   $13 = $ReallocAsyncCtx7 + 16 | 0; //@line 22819
   HEAP32[$13 >> 2] = $AsyncRetVal; //@line 22820
   sp = STACKTOP; //@line 22821
   return;
  }
  ___async_unwind = 0; //@line 22824
  HEAP32[$ReallocAsyncCtx7 >> 2] = 599; //@line 22825
  $10 = $ReallocAsyncCtx7 + 4 | 0; //@line 22826
  HEAP32[$10 >> 2] = $2; //@line 22827
  $11 = $ReallocAsyncCtx7 + 8 | 0; //@line 22828
  HEAP32[$11 >> 2] = $4; //@line 22829
  $12 = $ReallocAsyncCtx7 + 12 | 0; //@line 22830
  HEAP32[$12 >> 2] = $6; //@line 22831
  $13 = $ReallocAsyncCtx7 + 16 | 0; //@line 22832
  HEAP32[$13 >> 2] = $AsyncRetVal; //@line 22833
  sp = STACKTOP; //@line 22834
  return;
 }
 $15 = HEAP32[$AsyncRetVal + 4 >> 2] | 0; //@line 22838
 if (($15 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 22842
  _mbed_assert_internal(14489, 14491, 47); //@line 22843
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 22846
   $17 = $ReallocAsyncCtx6 + 4 | 0; //@line 22847
   HEAP32[$17 >> 2] = $8; //@line 22848
   $18 = $ReallocAsyncCtx6 + 8 | 0; //@line 22849
   HEAP32[$18 >> 2] = $4; //@line 22850
   $19 = $ReallocAsyncCtx6 + 12 | 0; //@line 22851
   HEAP32[$19 >> 2] = $6; //@line 22852
   $20 = $ReallocAsyncCtx6 + 16 | 0; //@line 22853
   HEAP32[$20 >> 2] = $2; //@line 22854
   sp = STACKTOP; //@line 22855
   return;
  }
  ___async_unwind = 0; //@line 22858
  HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 22859
  $17 = $ReallocAsyncCtx6 + 4 | 0; //@line 22860
  HEAP32[$17 >> 2] = $8; //@line 22861
  $18 = $ReallocAsyncCtx6 + 8 | 0; //@line 22862
  HEAP32[$18 >> 2] = $4; //@line 22863
  $19 = $ReallocAsyncCtx6 + 12 | 0; //@line 22864
  HEAP32[$19 >> 2] = $6; //@line 22865
  $20 = $ReallocAsyncCtx6 + 16 | 0; //@line 22866
  HEAP32[$20 >> 2] = $2; //@line 22867
  sp = STACKTOP; //@line 22868
  return;
 } else {
  $22 = 7 << $15 + -4; //@line 22872
  $23 = ___muldi3($22 | 0, 0, 1e6, 0) | 0; //@line 22873
  $24 = tempRet0; //@line 22874
  $25 = _i64Add($8 | 0, 0, -1, -1) | 0; //@line 22875
  $27 = _i64Add($25 | 0, tempRet0 | 0, $23 | 0, $24 | 0) | 0; //@line 22877
  $29 = ___udivdi3($27 | 0, tempRet0 | 0, $8 | 0, 0) | 0; //@line 22879
  $30 = tempRet0; //@line 22880
  $31 = HEAP32[$4 >> 2] | 0; //@line 22881
  HEAP32[$31 >> 2] = 0; //@line 22882
  HEAP32[$31 + 4 >> 2] = 0; //@line 22884
  $35 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 22887
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 22888
  $36 = FUNCTION_TABLE_i[$35 & 7]() | 0; //@line 22889
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 601; //@line 22892
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 22893
   HEAP32[$37 >> 2] = $4; //@line 22894
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 22895
   HEAP32[$38 >> 2] = $8; //@line 22896
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 22897
   HEAP32[$39 >> 2] = $15; //@line 22898
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 22899
   HEAP32[$40 >> 2] = $22; //@line 22900
   $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 22901
   $42 = $41; //@line 22902
   $43 = $42; //@line 22903
   HEAP32[$43 >> 2] = $29; //@line 22904
   $44 = $42 + 4 | 0; //@line 22905
   $45 = $44; //@line 22906
   HEAP32[$45 >> 2] = $30; //@line 22907
   $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 22908
   HEAP32[$46 >> 2] = $6; //@line 22909
   $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 22910
   HEAP32[$47 >> 2] = $2; //@line 22911
   sp = STACKTOP; //@line 22912
   return;
  }
  HEAP32[___async_retval >> 2] = $36; //@line 22916
  ___async_unwind = 0; //@line 22917
  HEAP32[$ReallocAsyncCtx3 >> 2] = 601; //@line 22918
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 22919
  HEAP32[$37 >> 2] = $4; //@line 22920
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 22921
  HEAP32[$38 >> 2] = $8; //@line 22922
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 22923
  HEAP32[$39 >> 2] = $15; //@line 22924
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 22925
  HEAP32[$40 >> 2] = $22; //@line 22926
  $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 22927
  $42 = $41; //@line 22928
  $43 = $42; //@line 22929
  HEAP32[$43 >> 2] = $29; //@line 22930
  $44 = $42 + 4 | 0; //@line 22931
  $45 = $44; //@line 22932
  HEAP32[$45 >> 2] = $30; //@line 22933
  $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 22934
  HEAP32[$46 >> 2] = $6; //@line 22935
  $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 22936
  HEAP32[$47 >> 2] = $2; //@line 22937
  sp = STACKTOP; //@line 22938
  return;
 }
}
function _mbedtls_cipher_free($0) {
 $0 = $0 | 0;
 var $101 = 0, $105 = 0, $109 = 0, $113 = 0, $2 = 0, $3 = 0, $42 = 0, $48 = 0, $53 = 0, $57 = 0, $61 = 0, $65 = 0, $69 = 0, $73 = 0, $77 = 0, $81 = 0, $85 = 0, $89 = 0, $93 = 0, $97 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2257
 if (!$0) {
  return;
 }
 $2 = $0 + 64 | 0; //@line 2262
 $3 = HEAP32[$2 >> 2] | 0; //@line 2263
 if ($3 | 0) {
  HEAP8[$3 >> 0] = 0; //@line 2267
  HEAP8[$3 + 1 >> 0] = 0; //@line 2269
  HEAP8[$3 + 2 >> 0] = 0; //@line 2271
  HEAP8[$3 + 3 >> 0] = 0; //@line 2273
  HEAP8[$3 + 4 >> 0] = 0; //@line 2275
  HEAP8[$3 + 5 >> 0] = 0; //@line 2277
  HEAP8[$3 + 6 >> 0] = 0; //@line 2279
  HEAP8[$3 + 7 >> 0] = 0; //@line 2281
  HEAP8[$3 + 8 >> 0] = 0; //@line 2283
  HEAP8[$3 + 9 >> 0] = 0; //@line 2285
  HEAP8[$3 + 10 >> 0] = 0; //@line 2287
  HEAP8[$3 + 11 >> 0] = 0; //@line 2289
  HEAP8[$3 + 12 >> 0] = 0; //@line 2291
  HEAP8[$3 + 13 >> 0] = 0; //@line 2293
  HEAP8[$3 + 14 >> 0] = 0; //@line 2295
  HEAP8[$3 + 15 >> 0] = 0; //@line 2297
  HEAP8[$3 + 16 >> 0] = 0; //@line 2299
  HEAP8[$3 + 17 >> 0] = 0; //@line 2301
  HEAP8[$3 + 18 >> 0] = 0; //@line 2303
  HEAP8[$3 + 19 >> 0] = 0; //@line 2305
  HEAP8[$3 + 20 >> 0] = 0; //@line 2307
  HEAP8[$3 + 21 >> 0] = 0; //@line 2309
  HEAP8[$3 + 22 >> 0] = 0; //@line 2311
  HEAP8[$3 + 23 >> 0] = 0; //@line 2313
  HEAP8[$3 + 24 >> 0] = 0; //@line 2315
  HEAP8[$3 + 25 >> 0] = 0; //@line 2317
  HEAP8[$3 + 26 >> 0] = 0; //@line 2319
  HEAP8[$3 + 27 >> 0] = 0; //@line 2321
  HEAP8[$3 + 28 >> 0] = 0; //@line 2323
  HEAP8[$3 + 29 >> 0] = 0; //@line 2325
  HEAP8[$3 + 30 >> 0] = 0; //@line 2327
  HEAP8[$3 + 31 >> 0] = 0; //@line 2329
  HEAP8[$3 + 32 >> 0] = 0; //@line 2331
  HEAP8[$3 + 33 >> 0] = 0; //@line 2333
  HEAP8[$3 + 34 >> 0] = 0; //@line 2335
  HEAP8[$3 + 35 >> 0] = 0; //@line 2336
  _free(HEAP32[$2 >> 2] | 0); //@line 2338
 }
 $42 = HEAP32[$0 + 60 >> 2] | 0; //@line 2341
 do {
  if ($42 | 0) {
   $48 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 28 >> 2] | 0; //@line 2349
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2350
   FUNCTION_TABLE_vi[$48 & 1023]($42); //@line 2351
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 571; //@line 2354
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2356
    sp = STACKTOP; //@line 2357
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2360
    break;
   }
  }
 } while (0);
 HEAP8[$0 >> 0] = 0; //@line 2366
 HEAP8[$0 + 1 >> 0] = 0; //@line 2368
 HEAP8[$0 + 2 >> 0] = 0; //@line 2370
 $53 = $0 + 4 | 0; //@line 2371
 HEAP8[$0 + 3 >> 0] = 0; //@line 2372
 HEAP8[$53 >> 0] = 0; //@line 2374
 HEAP8[$53 + 1 >> 0] = 0; //@line 2376
 HEAP8[$53 + 2 >> 0] = 0; //@line 2378
 $57 = $53 + 4 | 0; //@line 2379
 HEAP8[$53 + 3 >> 0] = 0; //@line 2380
 HEAP8[$57 >> 0] = 0; //@line 2382
 HEAP8[$57 + 1 >> 0] = 0; //@line 2384
 HEAP8[$57 + 2 >> 0] = 0; //@line 2386
 $61 = $53 + 8 | 0; //@line 2387
 HEAP8[$57 + 3 >> 0] = 0; //@line 2388
 HEAP8[$61 >> 0] = 0; //@line 2390
 HEAP8[$61 + 1 >> 0] = 0; //@line 2392
 HEAP8[$61 + 2 >> 0] = 0; //@line 2394
 $65 = $53 + 12 | 0; //@line 2395
 HEAP8[$61 + 3 >> 0] = 0; //@line 2396
 HEAP8[$65 >> 0] = 0; //@line 2398
 HEAP8[$65 + 1 >> 0] = 0; //@line 2400
 HEAP8[$65 + 2 >> 0] = 0; //@line 2402
 $69 = $53 + 16 | 0; //@line 2403
 HEAP8[$65 + 3 >> 0] = 0; //@line 2404
 HEAP8[$69 >> 0] = 0; //@line 2406
 HEAP8[$69 + 1 >> 0] = 0; //@line 2408
 HEAP8[$69 + 2 >> 0] = 0; //@line 2410
 $73 = $53 + 20 | 0; //@line 2411
 HEAP8[$69 + 3 >> 0] = 0; //@line 2412
 HEAP8[$73 >> 0] = 0; //@line 2414
 HEAP8[$73 + 1 >> 0] = 0; //@line 2416
 HEAP8[$73 + 2 >> 0] = 0; //@line 2418
 $77 = $53 + 24 | 0; //@line 2419
 HEAP8[$73 + 3 >> 0] = 0; //@line 2420
 HEAP8[$77 >> 0] = 0; //@line 2422
 HEAP8[$77 + 1 >> 0] = 0; //@line 2424
 HEAP8[$77 + 2 >> 0] = 0; //@line 2426
 $81 = $53 + 28 | 0; //@line 2427
 HEAP8[$77 + 3 >> 0] = 0; //@line 2428
 HEAP8[$81 >> 0] = 0; //@line 2430
 HEAP8[$81 + 1 >> 0] = 0; //@line 2432
 HEAP8[$81 + 2 >> 0] = 0; //@line 2434
 $85 = $53 + 32 | 0; //@line 2435
 HEAP8[$81 + 3 >> 0] = 0; //@line 2436
 HEAP8[$85 >> 0] = 0; //@line 2438
 HEAP8[$85 + 1 >> 0] = 0; //@line 2440
 HEAP8[$85 + 2 >> 0] = 0; //@line 2442
 $89 = $53 + 36 | 0; //@line 2443
 HEAP8[$85 + 3 >> 0] = 0; //@line 2444
 HEAP8[$89 >> 0] = 0; //@line 2446
 HEAP8[$89 + 1 >> 0] = 0; //@line 2448
 HEAP8[$89 + 2 >> 0] = 0; //@line 2450
 $93 = $53 + 40 | 0; //@line 2451
 HEAP8[$89 + 3 >> 0] = 0; //@line 2452
 HEAP8[$93 >> 0] = 0; //@line 2454
 HEAP8[$93 + 1 >> 0] = 0; //@line 2456
 HEAP8[$93 + 2 >> 0] = 0; //@line 2458
 $97 = $53 + 44 | 0; //@line 2459
 HEAP8[$93 + 3 >> 0] = 0; //@line 2460
 HEAP8[$97 >> 0] = 0; //@line 2462
 HEAP8[$97 + 1 >> 0] = 0; //@line 2464
 HEAP8[$97 + 2 >> 0] = 0; //@line 2466
 $101 = $53 + 48 | 0; //@line 2467
 HEAP8[$97 + 3 >> 0] = 0; //@line 2468
 HEAP8[$101 >> 0] = 0; //@line 2470
 HEAP8[$101 + 1 >> 0] = 0; //@line 2472
 HEAP8[$101 + 2 >> 0] = 0; //@line 2474
 $105 = $53 + 52 | 0; //@line 2475
 HEAP8[$101 + 3 >> 0] = 0; //@line 2476
 HEAP8[$105 >> 0] = 0; //@line 2478
 HEAP8[$105 + 1 >> 0] = 0; //@line 2480
 HEAP8[$105 + 2 >> 0] = 0; //@line 2482
 $109 = $53 + 56 | 0; //@line 2483
 HEAP8[$105 + 3 >> 0] = 0; //@line 2484
 HEAP8[$109 >> 0] = 0; //@line 2486
 HEAP8[$109 + 1 >> 0] = 0; //@line 2488
 HEAP8[$109 + 2 >> 0] = 0; //@line 2490
 $113 = $53 + 60 | 0; //@line 2491
 HEAP8[$109 + 3 >> 0] = 0; //@line 2492
 HEAP8[$113 >> 0] = 0; //@line 2494
 HEAP8[$113 + 1 >> 0] = 0; //@line 2496
 HEAP8[$113 + 2 >> 0] = 0; //@line 2498
 HEAP8[$113 + 3 >> 0] = 0; //@line 2499
 return;
}
function _mbedtls_internal_aes_decrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 1028
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 1114
 $$0136 = $4 + 16 | 0; //@line 1114
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 1114
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 1114
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 1114
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 1114
 while (1) {
  $110 = HEAP32[1284 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[2308 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3332 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4356 + ($$0138 >>> 24 << 2) >> 2]; //@line 1136
  $130 = HEAP32[1284 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[2308 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3332 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4356 + ($$0140 >>> 24 << 2) >> 2]; //@line 1156
  $150 = HEAP32[1284 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[2308 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3332 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4356 + ($$0139 >>> 24 << 2) >> 2]; //@line 1176
  $170 = HEAP32[1284 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[2308 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3332 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4356 + ($$0137 >>> 24 << 2) >> 2]; //@line 1196
  $171 = $$0136 + 20 | 0; //@line 1197
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 1198
  $173 = $110 & 255; //@line 1199
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[1284 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[2308 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3332 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4356 + ($170 >>> 24 << 2) >> 2]; //@line 1260
  $250 = HEAP32[1284 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[2308 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3332 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4356 + ($110 >>> 24 << 2) >> 2]; //@line 1280
  $$0$in = $$0$in + -1 | 0; //@line 1281
  $$0136 = $$0136 + 32 | 0; //@line 1281
  $$0137 = HEAP32[1284 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[2308 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3332 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4356 + ($130 >>> 24 << 2) >> 2]; //@line 1281
  $$0138 = HEAP32[1284 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[2308 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3332 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4356 + ($150 >>> 24 << 2) >> 2]; //@line 1281
  $$0139 = $250; //@line 1281
  $$0140 = $230; //@line 1281
 }
 $261 = (HEAPU8[14053 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 1293
 $268 = (HEAPU8[14053 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 1300
 $274 = (HEAPU8[14053 + ($130 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 1306
 $276 = HEAP32[$171 >> 2] | 0; //@line 1308
 $281 = $276 ^ (HEAPU8[14053 + ($130 & 255) >> 0] | 0); //@line 1313
 $288 = (HEAPU8[14053 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 1320
 $295 = (HEAPU8[14053 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 1327
 $301 = (HEAPU8[14053 + ($150 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 1333
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 1335
 $308 = $303 ^ (HEAPU8[14053 + ($150 & 255) >> 0] | 0); //@line 1340
 $315 = (HEAPU8[14053 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 1347
 $322 = (HEAPU8[14053 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 1354
 $328 = (HEAPU8[14053 + ($170 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 1360
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 1361
 $334 = $329 ^ (HEAPU8[14053 + ($170 & 255) >> 0] | 0); //@line 1366
 $341 = (HEAPU8[14053 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 1373
 $348 = (HEAPU8[14053 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 1380
 $354 = (HEAPU8[14053 + ($110 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 1386
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[14053 + $173 >> 0] | 0); //@line 1388
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 1392
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 1396
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 1400
 HEAP8[$2 + 4 >> 0] = $281; //@line 1403
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 1407
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 1411
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 1415
 HEAP8[$2 + 8 >> 0] = $308; //@line 1418
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 1422
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 1426
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 1430
 HEAP8[$2 + 12 >> 0] = $334; //@line 1433
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 1437
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 1441
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 1445
 return 0; //@line 1446
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_252($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 5052
 STACKTOP = STACKTOP + 16 | 0; //@line 5053
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5053
 $$byval_copy = sp; //@line 5054
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5056
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5058
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5060
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5062
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5064
 $12 = HEAP16[$0 + 24 >> 1] | 0; //@line 5066
 $14 = HEAP16[$0 + 26 >> 1] | 0; //@line 5068
 $16 = HEAP8[$0 + 28 >> 0] | 0; //@line 5070
 if (HEAP8[___async_retval >> 0] & 1) {
  $19 = (HEAP8[$4 >> 0] | 0) != 0; //@line 5076
  $21 = HEAP32[$6 + 1888 >> 2] | 0; //@line 5078
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 5079
  __ZN7LoRaPHY15setup_rx_windowEbj($8, $19, $21); //@line 5080
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 426; //@line 5083
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 5084
   HEAP32[$22 >> 2] = $2; //@line 5085
   $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 5086
   HEAP32[$23 >> 2] = $6; //@line 5087
   $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 5088
   HEAP32[$24 >> 2] = $10; //@line 5089
   $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 5090
   HEAP16[$25 >> 1] = $12; //@line 5091
   $26 = $ReallocAsyncCtx3 + 18 | 0; //@line 5092
   HEAP16[$26 >> 1] = $14; //@line 5093
   $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 5094
   HEAP8[$27 >> 0] = $16; //@line 5095
   $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 5096
   HEAP32[$28 >> 2] = $4; //@line 5097
   sp = STACKTOP; //@line 5098
   STACKTOP = sp; //@line 5099
   return;
  }
  ___async_unwind = 0; //@line 5101
  HEAP32[$ReallocAsyncCtx3 >> 2] = 426; //@line 5102
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 5103
  HEAP32[$22 >> 2] = $2; //@line 5104
  $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 5105
  HEAP32[$23 >> 2] = $6; //@line 5106
  $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 5107
  HEAP32[$24 >> 2] = $10; //@line 5108
  $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 5109
  HEAP16[$25 >> 1] = $12; //@line 5110
  $26 = $ReallocAsyncCtx3 + 18 | 0; //@line 5111
  HEAP16[$26 >> 1] = $14; //@line 5112
  $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 5113
  HEAP8[$27 >> 0] = $16; //@line 5114
  $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 5115
  HEAP32[$28 >> 2] = $4; //@line 5116
  sp = STACKTOP; //@line 5117
  STACKTOP = sp; //@line 5118
  return;
 }
 $trunc = (HEAPU8[$2 >> 0] | 0) >>> 5; //@line 5121
 switch ($trunc & 7) {
 case 1:
  {
   if (!(HEAP8[$6 + 2360 >> 0] | 0)) {
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 5129
    __ZN7LoRaMac24handle_join_accept_frameEPKht($6, $2, $12); //@line 5130
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 430; //@line 5133
     $43 = $ReallocAsyncCtx2 + 4 | 0; //@line 5134
     HEAP32[$43 >> 2] = $6; //@line 5135
     sp = STACKTOP; //@line 5136
     STACKTOP = sp; //@line 5137
     return;
    }
    ___async_unwind = 0; //@line 5139
    HEAP32[$ReallocAsyncCtx2 >> 2] = 430; //@line 5140
    $43 = $ReallocAsyncCtx2 + 4 | 0; //@line 5141
    HEAP32[$43 >> 2] = $6; //@line 5142
    sp = STACKTOP; //@line 5143
    STACKTOP = sp; //@line 5144
    return;
   }
   if (!(HEAP8[$6 + 1177 >> 0] | 0)) {
    HEAP8[$6 + 2068 >> 0] = 0; //@line 5151
    STACKTOP = sp; //@line 5152
    return;
   }
   $37 = HEAP32[$6 + 1992 >> 2] | 0; //@line 5155
   HEAP32[$10 >> 2] = 404; //@line 5156
   HEAP32[$10 + 4 >> 2] = 0; //@line 5158
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 5159
   HEAP32[$$byval_copy >> 2] = HEAP32[$10 >> 2]; //@line 5160
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$10 + 4 >> 2]; //@line 5160
   $38 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($37, $6, $$byval_copy) | 0; //@line 5161
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 428; //@line 5164
    $39 = $ReallocAsyncCtx6 + 4 | 0; //@line 5165
    HEAP32[$39 >> 2] = $10; //@line 5166
    $40 = $ReallocAsyncCtx6 + 8 | 0; //@line 5167
    HEAP32[$40 >> 2] = $6; //@line 5168
    sp = STACKTOP; //@line 5169
    STACKTOP = sp; //@line 5170
    return;
   }
   HEAP32[___async_retval >> 2] = $38; //@line 5173
   ___async_unwind = 0; //@line 5174
   HEAP32[$ReallocAsyncCtx6 >> 2] = 428; //@line 5175
   $39 = $ReallocAsyncCtx6 + 4 | 0; //@line 5176
   HEAP32[$39 >> 2] = $10; //@line 5177
   $40 = $ReallocAsyncCtx6 + 8 | 0; //@line 5178
   HEAP32[$40 >> 2] = $6; //@line 5179
   sp = STACKTOP; //@line 5180
   STACKTOP = sp; //@line 5181
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 5185
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($6, $2, $12, 1, $trunc, $14, $16); //@line 5186
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 431; //@line 5189
    sp = STACKTOP; //@line 5190
    STACKTOP = sp; //@line 5191
    return;
   }
   ___async_unwind = 0; //@line 5193
   HEAP32[$ReallocAsyncCtx >> 2] = 431; //@line 5194
   sp = STACKTOP; //@line 5195
   STACKTOP = sp; //@line 5196
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 5200
   return;
  }
 }
}
function _mbedtls_internal_aes_encrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 581
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 667
 $$0136 = $4 + 16 | 0; //@line 667
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 667
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 667
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 667
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 667
 while (1) {
  $110 = HEAP32[5380 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[6404 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7428 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8452 + ($$0139 >>> 24 << 2) >> 2]; //@line 689
  $130 = HEAP32[5380 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[6404 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7428 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8452 + ($$0137 >>> 24 << 2) >> 2]; //@line 709
  $150 = HEAP32[5380 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[6404 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7428 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8452 + ($$0138 >>> 24 << 2) >> 2]; //@line 729
  $170 = HEAP32[5380 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[6404 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7428 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8452 + ($$0140 >>> 24 << 2) >> 2]; //@line 749
  $171 = $$0136 + 20 | 0; //@line 750
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 751
  $173 = $110 & 255; //@line 752
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[5380 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[6404 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7428 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8452 + ($130 >>> 24 << 2) >> 2]; //@line 813
  $250 = HEAP32[5380 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[6404 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7428 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8452 + ($150 >>> 24 << 2) >> 2]; //@line 833
  $$0$in = $$0$in + -1 | 0; //@line 834
  $$0136 = $$0136 + 32 | 0; //@line 834
  $$0137 = HEAP32[5380 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[6404 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7428 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8452 + ($170 >>> 24 << 2) >> 2]; //@line 834
  $$0138 = HEAP32[5380 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[6404 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7428 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8452 + ($110 >>> 24 << 2) >> 2]; //@line 834
  $$0139 = $250; //@line 834
  $$0140 = $230; //@line 834
 }
 $261 = (HEAPU8[13797 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 846
 $268 = (HEAPU8[13797 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 853
 $274 = (HEAPU8[13797 + ($170 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 859
 $276 = HEAP32[$171 >> 2] | 0; //@line 861
 $281 = $276 ^ (HEAPU8[13797 + ($130 & 255) >> 0] | 0); //@line 866
 $288 = (HEAPU8[13797 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 873
 $295 = (HEAPU8[13797 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 880
 $301 = (HEAPU8[13797 + ($110 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 886
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 888
 $308 = $303 ^ (HEAPU8[13797 + ($150 & 255) >> 0] | 0); //@line 893
 $315 = (HEAPU8[13797 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 900
 $322 = (HEAPU8[13797 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 907
 $328 = (HEAPU8[13797 + ($130 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 913
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 914
 $334 = $329 ^ (HEAPU8[13797 + ($170 & 255) >> 0] | 0); //@line 919
 $341 = (HEAPU8[13797 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 926
 $348 = (HEAPU8[13797 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 933
 $354 = (HEAPU8[13797 + ($150 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 939
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[13797 + $173 >> 0] | 0); //@line 941
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 945
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 949
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 953
 HEAP8[$2 + 4 >> 0] = $281; //@line 956
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 960
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 964
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 968
 HEAP8[$2 + 8 >> 0] = $308; //@line 971
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 975
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 979
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 983
 HEAP8[$2 + 12 >> 0] = $334; //@line 986
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 990
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 994
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 998
 return 0; //@line 999
}
function __ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$01722$i = 0, $$01821$i = 0, $$023$i = 0, $$2$i = 0, $$220$i = 0, $$sink = 0, $10 = 0, $11 = 0, $15 = 0, $22 = 0, $23 = 0, $25 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $5 = 0, $55 = 0, $57 = 0, $7 = 0, $74 = 0, $77 = 0, $8 = 0, $9 = 0, $90 = 0, $91 = 0, $indvars$iv$i = 0, $indvars$iv$i27 = 0, $wide$trip$count$i = 0, $wide$trip$count$i25 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 21371
 STACKTOP = STACKTOP + 16 | 0; //@line 21372
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 21372
 $5 = sp; //@line 21373
 dest = $5; //@line 21374
 stop = dest + 16 | 0; //@line 21374
 do {
  HEAP8[dest >> 0] = 255; //@line 21374
  dest = dest + 1 | 0; //@line 21374
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[$0 + 72 >> 2] | 0; //@line 21376
 $8 = $0 + 116 | 0; //@line 21377
 $9 = HEAP32[$8 >> 2] | 0; //@line 21378
 $10 = $0 + 113 | 0; //@line 21379
 $11 = HEAP8[$10 >> 0] | 0; //@line 21380
 if (!((__ZN7LoRaPHY19num_active_channelsEPthh(0, $9, 0, $11) | 0) << 24 >> 24)) {
  $15 = HEAP32[$0 + 120 >> 2] | 0; //@line 21385
  if ($11 << 24 >> 24 != 0 & (($9 | 0) != 0 & ($15 | 0) != 0)) {
   $wide$trip$count$i = $11 & 255; //@line 21392
   $indvars$iv$i = 0; //@line 21393
   do {
    HEAP16[$9 + ($indvars$iv$i << 1) >> 1] = HEAP16[$15 + ($indvars$iv$i << 1) >> 1] | 0; //@line 21398
    $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 21399
   } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
  }
 }
 $22 = HEAP32[$1 >> 2] | 0; //@line 21409
 $23 = $0 + 8 | 0; //@line 21410
 $25 = $1 + 4 | 0; //@line 21412
 if ($22 >>> 0 > (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) >>> 0) {
  $77 = HEAP32[$1 >> 2] | 0; //@line 21417
  $$0 = -1020; //@line 21422
  $$sink = $77 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) | 0; //@line 21422
  HEAP32[$3 >> 2] = $$sink; //@line 21423
  STACKTOP = sp; //@line 21424
  return $$0 | 0; //@line 21424
 }
 HEAP32[$4 >> 2] = 0; //@line 21426
 $37 = __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, (HEAP8[$1 + 9 >> 0] | 0) != 0, (HEAP8[$1 + 10 >> 0] | 0) != 0, $7, HEAP8[$0 + 76 >> 0] | 0) | 0; //@line 21435
 $39 = HEAP8[$1 + 8 >> 0] | 0; //@line 21437
 $40 = HEAP32[$8 >> 2] | 0; //@line 21438
 $42 = HEAP8[$0 + 20 >> 0] | 0; //@line 21440
 do {
  if ($42 << 24 >> 24) {
   $44 = $0 + 124 | 0; //@line 21444
   $45 = $0 + 72 | 0; //@line 21445
   $$01722$i = 0; //@line 21446
   $$01821$i = 0; //@line 21446
   $$023$i = 0; //@line 21446
   $47 = 0; //@line 21446
   while (1) {
    do {
     if (!(1 << ($47 & 15) & HEAPU16[$40 + ($47 >>> 4 << 1) >> 1])) {
      $$2$i = $$023$i; //@line 21458
      $$220$i = $$01821$i; //@line 21458
     } else {
      $55 = HEAP32[$44 >> 2] | 0; //@line 21460
      $57 = HEAP8[$55 + ($47 * 12 | 0) + 8 >> 0] | 0; //@line 21462
      if ($57 << 24 >> 24 >> 4 << 24 >> 24 >= $39 << 24 >> 24 ? ($57 << 4 & 255) << 24 >> 24 >> 4 << 24 >> 24 <= $39 << 24 >> 24 : 0) {
       if (!(HEAP32[(HEAP32[$45 >> 2] | 0) + ((HEAPU8[$55 + ($47 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 12 >> 2] | 0)) {
        HEAP8[$5 + ($$023$i & 255) >> 0] = $$01722$i; //@line 21481
        $$2$i = $$023$i + 1 << 24 >> 24; //@line 21482
        $$220$i = $$01821$i; //@line 21482
        break;
       } else {
        $$2$i = $$023$i; //@line 21486
        $$220$i = $$01821$i + 1 << 24 >> 24; //@line 21486
        break;
       }
      } else {
       $$2$i = $$023$i; //@line 21490
       $$220$i = $$01821$i; //@line 21490
      }
     }
    } while (0);
    $74 = $$01722$i + 1 << 24 >> 24; //@line 21494
    if (($74 & 255) < ($42 & 255)) {
     $$01722$i = $74; //@line 21498
     $$01821$i = $$220$i; //@line 21498
     $$023$i = $$2$i; //@line 21498
     $47 = $74 & 255; //@line 21498
    } else {
     break;
    }
   }
   if (!($$2$i << 24 >> 24)) {
    if (!($$220$i << 24 >> 24)) {
     break;
    } else {
     $$0 = -1020; //@line 21509
     $$sink = $37; //@line 21509
    }
    HEAP32[$3 >> 2] = $$sink; //@line 21511
    STACKTOP = sp; //@line 21512
    return $$0 | 0; //@line 21512
   } else {
    HEAP8[$2 >> 0] = HEAP8[$5 + ((_rand() | 0) % ($$2$i & 255 | 0) | 0) >> 0] | 0; //@line 21519
    $$0 = 0; //@line 21520
    $$sink = 0; //@line 21520
    HEAP32[$3 >> 2] = $$sink; //@line 21521
    STACKTOP = sp; //@line 21522
    return $$0 | 0; //@line 21522
   }
  }
 } while (0);
 $90 = HEAP32[$0 + 120 >> 2] | 0; //@line 21527
 $91 = HEAP8[$10 >> 0] | 0; //@line 21528
 if (!(($40 | 0) != 0 & ($90 | 0) != 0 & $91 << 24 >> 24 != 0)) {
  $$0 = -1021; //@line 21535
  $$sink = 0; //@line 21535
  HEAP32[$3 >> 2] = $$sink; //@line 21536
  STACKTOP = sp; //@line 21537
  return $$0 | 0; //@line 21537
 }
 $wide$trip$count$i25 = $91 & 255; //@line 21539
 $indvars$iv$i27 = 0; //@line 21540
 do {
  HEAP16[$40 + ($indvars$iv$i27 << 1) >> 1] = HEAP16[$90 + ($indvars$iv$i27 << 1) >> 1] | 0; //@line 21545
  $indvars$iv$i27 = $indvars$iv$i27 + 1 | 0; //@line 21546
 } while (($indvars$iv$i27 | 0) != ($wide$trip$count$i25 | 0));
 $$0 = -1021; //@line 21549
 $$sink = 0; //@line 21549
 HEAP32[$3 >> 2] = $$sink; //@line 21555
 STACKTOP = sp; //@line 21556
 return $$0 | 0; //@line 21556
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_141($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 29191
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29193
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29195
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29197
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29201
 $11 = $10 + 12 | 0; //@line 29202
 HEAP32[$10 >> 2] = 195; //@line 29203
 HEAP32[$10 + 4 >> 2] = 0; //@line 29205
 HEAP32[$10 + 8 >> 2] = $2; //@line 29207
 HEAP32[$11 >> 2] = 808; //@line 29208
 $12 = $2 + 2416 | 0; //@line 29209
 if (($12 | 0) == ($10 | 0)) {
  $35 = HEAP32[204] | 0; //@line 29213
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 29214
  FUNCTION_TABLE_vi[$35 & 1023]($10); //@line 29215
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 198; //@line 29218
   $36 = $ReallocAsyncCtx15 + 4 | 0; //@line 29219
   HEAP32[$36 >> 2] = $10; //@line 29220
   $37 = $ReallocAsyncCtx15 + 8 | 0; //@line 29221
   HEAP32[$37 >> 2] = $2; //@line 29222
   $38 = $ReallocAsyncCtx15 + 12 | 0; //@line 29223
   HEAP32[$38 >> 2] = $4; //@line 29224
   $39 = $ReallocAsyncCtx15 + 16 | 0; //@line 29225
   HEAP32[$39 >> 2] = $6; //@line 29226
   sp = STACKTOP; //@line 29227
   return;
  }
  ___async_unwind = 0; //@line 29230
  HEAP32[$ReallocAsyncCtx15 >> 2] = 198; //@line 29231
  $36 = $ReallocAsyncCtx15 + 4 | 0; //@line 29232
  HEAP32[$36 >> 2] = $10; //@line 29233
  $37 = $ReallocAsyncCtx15 + 8 | 0; //@line 29234
  HEAP32[$37 >> 2] = $2; //@line 29235
  $38 = $ReallocAsyncCtx15 + 12 | 0; //@line 29236
  HEAP32[$38 >> 2] = $4; //@line 29237
  $39 = $ReallocAsyncCtx15 + 16 | 0; //@line 29238
  HEAP32[$39 >> 2] = $6; //@line 29239
  sp = STACKTOP; //@line 29240
  return;
 }
 $14 = $2 + 2428 | 0; //@line 29243
 $15 = HEAP32[$14 >> 2] | 0; //@line 29244
 if (!$15) {
  $27 = HEAP32[203] | 0; //@line 29248
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 29249
  FUNCTION_TABLE_vii[$27 & 15]($12, $10); //@line 29250
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 197; //@line 29253
   $28 = $ReallocAsyncCtx14 + 4 | 0; //@line 29254
   HEAP32[$28 >> 2] = $11; //@line 29255
   $29 = $ReallocAsyncCtx14 + 8 | 0; //@line 29256
   HEAP32[$29 >> 2] = $14; //@line 29257
   $30 = $ReallocAsyncCtx14 + 12 | 0; //@line 29258
   HEAP32[$30 >> 2] = $10; //@line 29259
   $31 = $ReallocAsyncCtx14 + 16 | 0; //@line 29260
   HEAP32[$31 >> 2] = $2; //@line 29261
   $32 = $ReallocAsyncCtx14 + 20 | 0; //@line 29262
   HEAP32[$32 >> 2] = $4; //@line 29263
   $33 = $ReallocAsyncCtx14 + 24 | 0; //@line 29264
   HEAP32[$33 >> 2] = $6; //@line 29265
   sp = STACKTOP; //@line 29266
   return;
  }
  ___async_unwind = 0; //@line 29269
  HEAP32[$ReallocAsyncCtx14 >> 2] = 197; //@line 29270
  $28 = $ReallocAsyncCtx14 + 4 | 0; //@line 29271
  HEAP32[$28 >> 2] = $11; //@line 29272
  $29 = $ReallocAsyncCtx14 + 8 | 0; //@line 29273
  HEAP32[$29 >> 2] = $14; //@line 29274
  $30 = $ReallocAsyncCtx14 + 12 | 0; //@line 29275
  HEAP32[$30 >> 2] = $10; //@line 29276
  $31 = $ReallocAsyncCtx14 + 16 | 0; //@line 29277
  HEAP32[$31 >> 2] = $2; //@line 29278
  $32 = $ReallocAsyncCtx14 + 20 | 0; //@line 29279
  HEAP32[$32 >> 2] = $4; //@line 29280
  $33 = $ReallocAsyncCtx14 + 24 | 0; //@line 29281
  HEAP32[$33 >> 2] = $6; //@line 29282
  sp = STACKTOP; //@line 29283
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 29287
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(32) | 0; //@line 29288
  FUNCTION_TABLE_vi[$18 & 1023]($12); //@line 29289
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 196; //@line 29292
   $19 = $ReallocAsyncCtx13 + 4 | 0; //@line 29293
   HEAP32[$19 >> 2] = $11; //@line 29294
   $20 = $ReallocAsyncCtx13 + 8 | 0; //@line 29295
   HEAP32[$20 >> 2] = $14; //@line 29296
   $21 = $ReallocAsyncCtx13 + 12 | 0; //@line 29297
   HEAP32[$21 >> 2] = $12; //@line 29298
   $22 = $ReallocAsyncCtx13 + 16 | 0; //@line 29299
   HEAP32[$22 >> 2] = $10; //@line 29300
   $23 = $ReallocAsyncCtx13 + 20 | 0; //@line 29301
   HEAP32[$23 >> 2] = $2; //@line 29302
   $24 = $ReallocAsyncCtx13 + 24 | 0; //@line 29303
   HEAP32[$24 >> 2] = $4; //@line 29304
   $25 = $ReallocAsyncCtx13 + 28 | 0; //@line 29305
   HEAP32[$25 >> 2] = $6; //@line 29306
   sp = STACKTOP; //@line 29307
   return;
  }
  ___async_unwind = 0; //@line 29310
  HEAP32[$ReallocAsyncCtx13 >> 2] = 196; //@line 29311
  $19 = $ReallocAsyncCtx13 + 4 | 0; //@line 29312
  HEAP32[$19 >> 2] = $11; //@line 29313
  $20 = $ReallocAsyncCtx13 + 8 | 0; //@line 29314
  HEAP32[$20 >> 2] = $14; //@line 29315
  $21 = $ReallocAsyncCtx13 + 12 | 0; //@line 29316
  HEAP32[$21 >> 2] = $12; //@line 29317
  $22 = $ReallocAsyncCtx13 + 16 | 0; //@line 29318
  HEAP32[$22 >> 2] = $10; //@line 29319
  $23 = $ReallocAsyncCtx13 + 20 | 0; //@line 29320
  HEAP32[$23 >> 2] = $2; //@line 29321
  $24 = $ReallocAsyncCtx13 + 24 | 0; //@line 29322
  HEAP32[$24 >> 2] = $4; //@line 29323
  $25 = $ReallocAsyncCtx13 + 28 | 0; //@line 29324
  HEAP32[$25 >> 2] = $6; //@line 29325
  sp = STACKTOP; //@line 29326
  return;
 }
}
function __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1); //@line 23041
 HEAP32[$0 >> 2] = 952; //@line 23042
 $2 = $0 + 324 | 0; //@line 23043
 HEAP32[$2 >> 2] = HEAP32[258]; //@line 23044
 HEAP32[$2 + 4 >> 2] = HEAP32[259]; //@line 23044
 HEAP32[$2 + 8 >> 2] = HEAP32[260]; //@line 23044
 HEAP32[$2 + 12 >> 2] = HEAP32[261]; //@line 23044
 HEAP32[$2 + 16 >> 2] = HEAP32[262]; //@line 23044
 HEAP32[$2 + 20 >> 2] = HEAP32[263]; //@line 23044
 $3 = $0 + 348 | 0; //@line 23045
 HEAP32[$3 >> 2] = HEAP32[264]; //@line 23046
 HEAP32[$3 + 4 >> 2] = HEAP32[265]; //@line 23046
 HEAP32[$3 + 8 >> 2] = HEAP32[266]; //@line 23046
 HEAP32[$3 + 12 >> 2] = HEAP32[267]; //@line 23046
 HEAP32[$3 + 16 >> 2] = HEAP32[268]; //@line 23046
 HEAP32[$3 + 20 >> 2] = HEAP32[269]; //@line 23046
 $4 = $0 + 372 | 0; //@line 23047
 HEAP32[$4 >> 2] = HEAP32[270]; //@line 23048
 HEAP32[$4 + 4 >> 2] = HEAP32[271]; //@line 23048
 HEAP32[$4 + 8 >> 2] = HEAP32[272]; //@line 23048
 HEAP32[$4 + 12 >> 2] = HEAP32[273]; //@line 23048
 HEAP32[$4 + 16 >> 2] = HEAP32[274]; //@line 23048
 HEAP32[$4 + 20 >> 2] = HEAP32[275]; //@line 23048
 $5 = $0 + 396 | 0; //@line 23049
 HEAP32[$5 >> 2] = HEAP32[276]; //@line 23050
 HEAP32[$5 + 4 >> 2] = HEAP32[277]; //@line 23050
 HEAP32[$5 + 8 >> 2] = HEAP32[278]; //@line 23050
 HEAP32[$5 + 12 >> 2] = HEAP32[279]; //@line 23050
 HEAP32[$5 + 16 >> 2] = HEAP32[280]; //@line 23050
 HEAP32[$5 + 20 >> 2] = HEAP32[281]; //@line 23050
 $6 = $0 + 420 | 0; //@line 23051
 HEAP32[$6 >> 2] = HEAP32[282]; //@line 23052
 HEAP32[$6 + 4 >> 2] = HEAP32[283]; //@line 23052
 HEAP32[$6 + 8 >> 2] = HEAP32[284]; //@line 23052
 HEAP32[$6 + 12 >> 2] = HEAP32[285]; //@line 23052
 HEAP32[$6 + 16 >> 2] = HEAP32[286]; //@line 23052
 HEAP32[$6 + 20 >> 2] = HEAP32[287]; //@line 23052
 $7 = $0 + 444 | 0; //@line 23053
 HEAP32[$7 >> 2] = HEAP32[288]; //@line 23054
 HEAP32[$7 + 4 >> 2] = HEAP32[289]; //@line 23054
 HEAP32[$7 + 8 >> 2] = HEAP32[290]; //@line 23054
 HEAP32[$7 + 12 >> 2] = HEAP32[291]; //@line 23054
 HEAP32[$7 + 16 >> 2] = HEAP32[292]; //@line 23054
 HEAP32[$7 + 20 >> 2] = HEAP32[293]; //@line 23054
 $8 = $0 + 132 | 0; //@line 23055
 HEAP32[$8 >> 2] = HEAP32[294]; //@line 23056
 HEAP32[$8 + 4 >> 2] = HEAP32[295]; //@line 23056
 HEAP32[$8 + 8 >> 2] = HEAP32[296]; //@line 23056
 HEAP8[$0 + 141 >> 0] = 1; //@line 23058
 $10 = $0 + 144 | 0; //@line 23059
 HEAP32[$10 >> 2] = HEAP32[297]; //@line 23060
 HEAP32[$10 + 4 >> 2] = HEAP32[298]; //@line 23060
 HEAP32[$10 + 8 >> 2] = HEAP32[299]; //@line 23060
 HEAP8[$0 + 153 >> 0] = 1; //@line 23062
 $12 = $0 + 156 | 0; //@line 23063
 HEAP32[$12 >> 2] = HEAP32[300]; //@line 23064
 HEAP32[$12 + 4 >> 2] = HEAP32[301]; //@line 23064
 HEAP32[$12 + 8 >> 2] = HEAP32[302]; //@line 23064
 HEAP8[$0 + 165 >> 0] = 1; //@line 23066
 $14 = $0 + 470 | 0; //@line 23067
 HEAP16[$14 >> 1] = 7; //@line 23068
 $15 = $0 + 468 | 0; //@line 23069
 __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $15, $14, 1); //@line 23070
 HEAP32[$0 + 124 >> 2] = $8; //@line 23072
 HEAP8[$0 + 112 >> 0] = 16; //@line 23074
 HEAP32[$0 + 116 >> 2] = $15; //@line 23076
 HEAP32[$0 + 120 >> 2] = $14; //@line 23078
 HEAP8[$0 + 113 >> 0] = 1; //@line 23080
 HEAP32[$0 + 72 >> 2] = $2; //@line 23082
 HEAP8[$0 + 76 >> 0] = 6; //@line 23084
 HEAP32[$0 + 80 >> 2] = 1212; //@line 23086
 HEAP8[$0 + 84 >> 0] = 8; //@line 23088
 HEAP32[$0 + 88 >> 2] = 13650; //@line 23090
 HEAP8[$0 + 92 >> 0] = 8; //@line 23092
 HEAP32[$0 + 96 >> 2] = 13658; //@line 23094
 HEAP8[$0 + 100 >> 0] = 8; //@line 23096
 HEAP32[$0 + 104 >> 2] = 13666; //@line 23098
 HEAP8[$0 + 108 >> 0] = 8; //@line 23100
 $31 = $0 + 128 | 0; //@line 23101
 HEAP8[$31 >> 0] = HEAP8[$31 >> 0] & -4; //@line 23104
 $34 = $0 + 12 | 0; //@line 23105
 $35 = $0 + 18 | 0; //@line 23106
 HEAP32[$34 >> 2] = 16843009; //@line 23107
 HEAP16[$34 + 4 >> 1] = 257; //@line 23107
 HEAP8[$35 >> 0] = 3; //@line 23108
 HEAP8[$0 + 20 >> 0] = 16; //@line 23110
 HEAP8[$0 + 19 >> 0] = 5; //@line 23112
 HEAP8[$0 + 26 >> 0] = 0; //@line 23114
 HEAP8[$0 + 27 >> 0] = 7; //@line 23116
 HEAP8[$0 + 28 >> 0] = 0; //@line 23118
 HEAP8[$0 + 29 >> 0] = 7; //@line 23120
 HEAP8[$0 + 30 >> 0] = 0; //@line 23122
 HEAP8[$0 + 31 >> 0] = 5; //@line 23124
 HEAP8[$0 + 32 >> 0] = 0; //@line 23126
 HEAP8[$0 + 33 >> 0] = 5; //@line 23128
 HEAP8[$0 + 34 >> 0] = 0; //@line 23130
 HEAP8[$0 + 21 >> 0] = 7; //@line 23132
 HEAP8[$0 + 22 >> 0] = 0; //@line 23134
 HEAP8[$0 + 23 >> 0] = 0; //@line 23136
 HEAPF32[$0 + 56 >> 2] = 16.0; //@line 23138
 HEAPF32[$0 + 60 >> 2] = 2.1500000953674316; //@line 23140
 HEAP8[$0 + 24 >> 0] = 64; //@line 23142
 HEAP8[$0 + 25 >> 0] = 32; //@line 23144
 HEAP16[$0 + 36 >> 1] = 3e3; //@line 23146
 HEAP16[$0 + 38 >> 1] = 1e3; //@line 23148
 HEAP16[$0 + 40 >> 1] = 2e3; //@line 23150
 HEAP16[$0 + 46 >> 1] = 7; //@line 23152
 HEAP16[$0 + 42 >> 1] = 5e3; //@line 23154
 HEAP16[$0 + 44 >> 1] = 6e3; //@line 23156
 HEAP16[$0 + 48 >> 1] = 16384; //@line 23158
 HEAP16[$0 + 50 >> 1] = 2e3; //@line 23160
 HEAP16[$0 + 52 >> 1] = 1e3; //@line 23162
 HEAP8[$0 + 64 >> 0] = 0; //@line 23164
 HEAP32[$0 + 68 >> 2] = 869525e3; //@line 23166
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_327($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $40 = 0, $41 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12754
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12756
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12758
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12760
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12762
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12764
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12768
 $14 = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 12769
 if ($14 | 0) {
  $17 = HEAP32[$14 + 8 >> 2] | 0; //@line 12773
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(28) | 0; //@line 12774
  FUNCTION_TABLE_vi[$17 & 1023]($10); //@line 12775
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 260; //@line 12778
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 12779
   HEAP32[$18 >> 2] = $4; //@line 12780
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 12781
   HEAP32[$19 >> 2] = $2; //@line 12782
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 12783
   HEAP32[$20 >> 2] = $6; //@line 12784
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 12785
   HEAP32[$21 >> 2] = $8; //@line 12786
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 12787
   HEAP32[$22 >> 2] = $10; //@line 12788
   $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 12789
   HEAP32[$23 >> 2] = $AsyncRetVal; //@line 12790
   sp = STACKTOP; //@line 12791
   return;
  }
  ___async_unwind = 0; //@line 12794
  HEAP32[$ReallocAsyncCtx4 >> 2] = 260; //@line 12795
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 12796
  HEAP32[$18 >> 2] = $4; //@line 12797
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 12798
  HEAP32[$19 >> 2] = $2; //@line 12799
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 12800
  HEAP32[$20 >> 2] = $6; //@line 12801
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 12802
  HEAP32[$21 >> 2] = $8; //@line 12803
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 12804
  HEAP32[$22 >> 2] = $10; //@line 12805
  $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 12806
  HEAP32[$23 >> 2] = $AsyncRetVal; //@line 12807
  sp = STACKTOP; //@line 12808
  return;
 }
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(24) | 0; //@line 12813
  _mbed_assert_internal(13121, 12408, 646); //@line 12814
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 261; //@line 12817
   $25 = $ReallocAsyncCtx11 + 4 | 0; //@line 12818
   HEAP32[$25 >> 2] = $2; //@line 12819
   $26 = $ReallocAsyncCtx11 + 8 | 0; //@line 12820
   HEAP32[$26 >> 2] = $4; //@line 12821
   $27 = $ReallocAsyncCtx11 + 12 | 0; //@line 12822
   HEAP32[$27 >> 2] = $6; //@line 12823
   $28 = $ReallocAsyncCtx11 + 16 | 0; //@line 12824
   HEAP32[$28 >> 2] = $8; //@line 12825
   $29 = $ReallocAsyncCtx11 + 20 | 0; //@line 12826
   HEAP32[$29 >> 2] = $10; //@line 12827
   sp = STACKTOP; //@line 12828
   return;
  }
  ___async_unwind = 0; //@line 12831
  HEAP32[$ReallocAsyncCtx11 >> 2] = 261; //@line 12832
  $25 = $ReallocAsyncCtx11 + 4 | 0; //@line 12833
  HEAP32[$25 >> 2] = $2; //@line 12834
  $26 = $ReallocAsyncCtx11 + 8 | 0; //@line 12835
  HEAP32[$26 >> 2] = $4; //@line 12836
  $27 = $ReallocAsyncCtx11 + 12 | 0; //@line 12837
  HEAP32[$27 >> 2] = $6; //@line 12838
  $28 = $ReallocAsyncCtx11 + 16 | 0; //@line 12839
  HEAP32[$28 >> 2] = $8; //@line 12840
  $29 = $ReallocAsyncCtx11 + 20 | 0; //@line 12841
  HEAP32[$29 >> 2] = $10; //@line 12842
  sp = STACKTOP; //@line 12843
  return;
 }
 if ((__ZNK7LoRaMac16get_device_classEv($8) | 0) == 2) {
  label = 13; //@line 12849
 } else {
  if (!(HEAP8[$6 + 15 >> 0] | 0)) {
   label = 13; //@line 12855
  }
 }
 if ((label | 0) == 13) {
  if ((__ZNK7LoRaMac16get_device_classEv($8) | 0) != 2) {
   return;
  }
  if ((HEAP32[$6 + 4 >> 2] | 0) != 1) {
   return;
  }
 }
 $40 = $4 + 2496 | 0; //@line 12871
 $41 = HEAP32[$40 >> 2] | 0; //@line 12872
 if (!$41) {
  return;
 }
 $45 = HEAP32[$4 + 3136 >> 2] | 0; //@line 12879
 $47 = HEAP32[$41 + 4 >> 2] | 0; //@line 12881
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 12882
 FUNCTION_TABLE_vii[$47 & 15]($2, $4 + 2484 | 0); //@line 12883
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 262; //@line 12886
  $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 12887
  HEAP32[$48 >> 2] = $40; //@line 12888
  $49 = $ReallocAsyncCtx5 + 8 | 0; //@line 12889
  HEAP32[$49 >> 2] = $2; //@line 12890
  $50 = $ReallocAsyncCtx5 + 12 | 0; //@line 12891
  HEAP32[$50 >> 2] = $45; //@line 12892
  $51 = $ReallocAsyncCtx5 + 16 | 0; //@line 12893
  HEAP32[$51 >> 2] = $2; //@line 12894
  sp = STACKTOP; //@line 12895
  return;
 }
 ___async_unwind = 0; //@line 12898
 HEAP32[$ReallocAsyncCtx5 >> 2] = 262; //@line 12899
 $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 12900
 HEAP32[$48 >> 2] = $40; //@line 12901
 $49 = $ReallocAsyncCtx5 + 8 | 0; //@line 12902
 HEAP32[$49 >> 2] = $2; //@line 12903
 $50 = $ReallocAsyncCtx5 + 12 | 0; //@line 12904
 HEAP32[$50 >> 2] = $45; //@line 12905
 $51 = $ReallocAsyncCtx5 + 16 | 0; //@line 12906
 HEAP32[$51 >> 2] = $2; //@line 12907
 sp = STACKTOP; //@line 12908
 return;
}
function _mbedtls_aes_setkey_enc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0103117 = 0, $$0106 = 0, $$0112 = 0, $$1104111 = 0, $$1114 = 0, $$2105113 = 0, $$2116 = 0, $$3115 = 0, $$sink = 0, $107 = 0, $111 = 0, $115 = 0, $119 = 0, $127 = 0, $129 = 0, $158 = 0, $162 = 0, $166 = 0, $194 = 0, $198 = 0, $202 = 0, $3 = 0, $33 = 0, $35 = 0, $5 = 0, $6 = 0, $64 = 0, $68 = 0, $76 = 0, $78 = 0, $$0112$looptemp = 0, $$1114$looptemp = 0, $$2116$looptemp = 0;
 switch ($2 | 0) {
 case 128:
  {
   $$sink = 10; //@line 19
   break;
  }
 case 192:
  {
   $$sink = 12; //@line 23
   break;
  }
 case 256:
  {
   $$sink = 14; //@line 27
   break;
  }
 default:
  {
   $$0106 = -32; //@line 31
   return $$0106 | 0; //@line 32
  }
 }
 HEAP32[$0 >> 2] = $$sink; //@line 35
 $3 = $0 + 8 | 0; //@line 36
 HEAP32[$0 + 4 >> 2] = $3; //@line 38
 $5 = $2 >>> 5; //@line 39
 $$0103117 = 0; //@line 40
 do {
  $6 = $$0103117 << 2; //@line 42
  HEAP32[$0 + 8 + ($$0103117 << 2) >> 2] = (HEAPU8[$1 + ($6 | 1) >> 0] | 0) << 8 | (HEAPU8[$1 + $6 >> 0] | 0) | (HEAPU8[$1 + ($6 | 2) >> 0] | 0) << 16 | (HEAPU8[$1 + ($6 | 3) >> 0] | 0) << 24; //@line 65
  $$0103117 = $$0103117 + 1 | 0; //@line 66
 } while (($$0103117 | 0) != ($5 | 0));
 switch (HEAP32[$0 >> 2] | 0) {
 case 10:
  {
   $$0112 = $3; //@line 78
   $$1104111 = 0; //@line 78
   $33 = HEAP32[$3 >> 2] | 0; //@line 78
   do {
    $35 = HEAP32[$$0112 + 12 >> 2] | 0; //@line 84
    $33 = HEAP32[1244 + ($$1104111 << 2) >> 2] ^ $33 ^ (HEAPU8[13797 + ($35 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13797 + ($35 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13797 + ($35 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13797 + ($35 & 255) >> 0] | 0) << 24; //@line 109
    $$0112$looptemp = $$0112;
    $$0112 = $$0112 + 16 | 0; //@line 110
    HEAP32[$$0112 >> 2] = $33; //@line 111
    $64 = $33 ^ HEAP32[$$0112$looptemp + 4 >> 2]; //@line 114
    HEAP32[$$0112$looptemp + 20 >> 2] = $64; //@line 116
    $68 = HEAP32[$$0112$looptemp + 8 >> 2] ^ $64; //@line 119
    HEAP32[$$0112$looptemp + 24 >> 2] = $68; //@line 121
    HEAP32[$$0112$looptemp + 28 >> 2] = $35 ^ $68; //@line 124
    $$1104111 = $$1104111 + 1 | 0; //@line 125
   } while (($$1104111 | 0) != 10);
   $$0106 = 0; //@line 128
   return $$0106 | 0; //@line 134
  }
 case 12:
  {
   $$1114 = $3; //@line 139
   $$2105113 = 0; //@line 139
   $76 = HEAP32[$3 >> 2] | 0; //@line 139
   do {
    $78 = HEAP32[$$1114 + 20 >> 2] | 0; //@line 145
    $76 = HEAP32[1244 + ($$2105113 << 2) >> 2] ^ $76 ^ (HEAPU8[13797 + ($78 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13797 + ($78 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13797 + ($78 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13797 + ($78 & 255) >> 0] | 0) << 24; //@line 170
    $$1114$looptemp = $$1114;
    $$1114 = $$1114 + 24 | 0; //@line 171
    HEAP32[$$1114 >> 2] = $76; //@line 172
    $107 = $76 ^ HEAP32[$$1114$looptemp + 4 >> 2]; //@line 175
    HEAP32[$$1114$looptemp + 28 >> 2] = $107; //@line 177
    $111 = HEAP32[$$1114$looptemp + 8 >> 2] ^ $107; //@line 180
    HEAP32[$$1114$looptemp + 32 >> 2] = $111; //@line 182
    $115 = HEAP32[$$1114$looptemp + 12 >> 2] ^ $111; //@line 185
    HEAP32[$$1114$looptemp + 36 >> 2] = $115; //@line 187
    $119 = HEAP32[$$1114$looptemp + 16 >> 2] ^ $115; //@line 190
    HEAP32[$$1114$looptemp + 40 >> 2] = $119; //@line 192
    HEAP32[$$1114$looptemp + 44 >> 2] = $78 ^ $119; //@line 195
    $$2105113 = $$2105113 + 1 | 0; //@line 196
   } while (($$2105113 | 0) != 8);
   $$0106 = 0; //@line 199
   return $$0106 | 0; //@line 205
  }
 case 14:
  {
   $$2116 = $3; //@line 210
   $$3115 = 0; //@line 210
   $127 = HEAP32[$3 >> 2] | 0; //@line 210
   do {
    $129 = HEAP32[$$2116 + 28 >> 2] | 0; //@line 216
    $127 = HEAP32[1244 + ($$3115 << 2) >> 2] ^ $127 ^ (HEAPU8[13797 + ($129 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13797 + ($129 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13797 + ($129 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13797 + ($129 & 255) >> 0] | 0) << 24; //@line 241
    $$2116$looptemp = $$2116;
    $$2116 = $$2116 + 32 | 0; //@line 242
    HEAP32[$$2116 >> 2] = $127; //@line 243
    $158 = $127 ^ HEAP32[$$2116$looptemp + 4 >> 2]; //@line 246
    HEAP32[$$2116$looptemp + 36 >> 2] = $158; //@line 248
    $162 = HEAP32[$$2116$looptemp + 8 >> 2] ^ $158; //@line 251
    HEAP32[$$2116$looptemp + 40 >> 2] = $162; //@line 253
    $166 = HEAP32[$$2116$looptemp + 12 >> 2] ^ $162; //@line 256
    HEAP32[$$2116$looptemp + 44 >> 2] = $166; //@line 258
    $194 = HEAP32[$$2116$looptemp + 16 >> 2] ^ (HEAPU8[13797 + ($166 & 255) >> 0] | 0) ^ (HEAPU8[13797 + ($166 >>> 8 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13797 + ($166 >>> 16 & 255) >> 0] | 0) << 16 ^ (HEAPU8[13797 + ($166 >>> 24) >> 0] | 0) << 24; //@line 285
    HEAP32[$$2116$looptemp + 48 >> 2] = $194; //@line 287
    $198 = $194 ^ HEAP32[$$2116$looptemp + 20 >> 2]; //@line 290
    HEAP32[$$2116$looptemp + 52 >> 2] = $198; //@line 292
    $202 = HEAP32[$$2116$looptemp + 24 >> 2] ^ $198; //@line 295
    HEAP32[$$2116$looptemp + 56 >> 2] = $202; //@line 297
    HEAP32[$$2116$looptemp + 60 >> 2] = $129 ^ $202; //@line 300
    $$3115 = $$3115 + 1 | 0; //@line 301
   } while (($$3115 | 0) != 7);
   $$0106 = 0; //@line 304
   return $$0106 | 0; //@line 310
  }
 default:
  {
   $$0106 = 0; //@line 314
   return $$0106 | 0; //@line 315
  }
 }
 return 0; //@line 318
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre$i$i4 = 0, $$pre10 = 0, $12 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $4 = 0, $41 = 0, $49 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2576
 STACKTOP = STACKTOP + 16 | 0; //@line 2577
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2577
 $2 = sp; //@line 2578
 $3 = $1 + 12 | 0; //@line 2579
 $4 = HEAP32[$3 >> 2] | 0; //@line 2580
 if ($4 | 0) {
  $6 = $0 + 56 | 0; //@line 2583
  if (($6 | 0) != ($1 | 0)) {
   $8 = $0 + 68 | 0; //@line 2586
   $9 = HEAP32[$8 >> 2] | 0; //@line 2587
   do {
    if (!$9) {
     $20 = $4; //@line 2591
     label = 7; //@line 2592
    } else {
     $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 2595
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 2596
     FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 2597
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 107; //@line 2600
      HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 2602
      HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 2604
      HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 2606
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 2608
      HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 2610
      sp = STACKTOP; //@line 2611
      STACKTOP = sp; //@line 2612
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 2614
      $$pre = HEAP32[$3 >> 2] | 0; //@line 2615
      if (!$$pre) {
       $25 = 0; //@line 2618
       break;
      } else {
       $20 = $$pre; //@line 2621
       label = 7; //@line 2622
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 7) {
     $21 = HEAP32[$20 + 4 >> 2] | 0; //@line 2631
     $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 2632
     FUNCTION_TABLE_vii[$21 & 15]($6, $1); //@line 2633
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 108; //@line 2636
      HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 2638
      HEAP32[$AsyncCtx2 + 8 >> 2] = $8; //@line 2640
      HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 2642
      sp = STACKTOP; //@line 2643
      STACKTOP = sp; //@line 2644
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2646
      $25 = HEAP32[$3 >> 2] | 0; //@line 2648
      break;
     }
    }
   } while (0);
   HEAP32[$8 >> 2] = $25; //@line 2653
  }
  _gpio_irq_set($0 + 28 | 0, 2, 1); //@line 2656
  STACKTOP = sp; //@line 2657
  return;
 }
 HEAP32[$2 >> 2] = 0; //@line 2659
 HEAP32[$2 + 4 >> 2] = 0; //@line 2659
 HEAP32[$2 + 8 >> 2] = 0; //@line 2659
 HEAP32[$2 + 12 >> 2] = 0; //@line 2659
 $27 = $0 + 56 | 0; //@line 2660
 do {
  if (($27 | 0) != ($2 | 0)) {
   $29 = $0 + 68 | 0; //@line 2664
   $30 = HEAP32[$29 >> 2] | 0; //@line 2665
   if ($30 | 0) {
    $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 2669
    $AsyncCtx5 = _emscripten_alloc_async_context(24, sp) | 0; //@line 2670
    FUNCTION_TABLE_vi[$33 & 1023]($27); //@line 2671
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 109; //@line 2674
     HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 2676
     HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 2678
     HEAP32[$AsyncCtx5 + 12 >> 2] = $27; //@line 2680
     HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 2682
     HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 2684
     sp = STACKTOP; //@line 2685
     STACKTOP = sp; //@line 2686
     return;
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 2688
    $$phi$trans$insert = $2 + 12 | 0; //@line 2689
    $$pre10 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 2690
    if ($$pre10 | 0) {
     $41 = HEAP32[$$pre10 + 4 >> 2] | 0; //@line 2694
     $AsyncCtx8 = _emscripten_alloc_async_context(20, sp) | 0; //@line 2695
     FUNCTION_TABLE_vii[$41 & 15]($27, $2); //@line 2696
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 110; //@line 2699
      HEAP32[$AsyncCtx8 + 4 >> 2] = $$phi$trans$insert; //@line 2701
      HEAP32[$AsyncCtx8 + 8 >> 2] = $29; //@line 2703
      HEAP32[$AsyncCtx8 + 12 >> 2] = $2; //@line 2705
      HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 2707
      sp = STACKTOP; //@line 2708
      STACKTOP = sp; //@line 2709
      return;
     }
     _emscripten_free_async_context($AsyncCtx8 | 0); //@line 2711
     $$pre$i$i4 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 2712
     HEAP32[$29 >> 2] = $$pre$i$i4; //@line 2713
     if (!$$pre$i$i4) {
      break;
     }
     $49 = HEAP32[$$pre$i$i4 + 8 >> 2] | 0; //@line 2720
     $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2721
     FUNCTION_TABLE_vi[$49 & 1023]($2); //@line 2722
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 111; //@line 2725
      HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 2727
      HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 2729
      sp = STACKTOP; //@line 2730
      STACKTOP = sp; //@line 2731
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2733
      break;
     }
    }
   }
   HEAP32[$29 >> 2] = 0; //@line 2738
  }
 } while (0);
 _gpio_irq_set($0 + 28 | 0, 2, 0); //@line 2742
 STACKTOP = sp; //@line 2743
 return;
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18172
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18174
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18176
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18178
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18183
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18185
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18187
 if (!(HEAP8[$0 + 16 >> 0] & 1)) {
  $16 = (HEAP32[$2 >> 2] | 0) + -1 | 0; //@line 18190
  HEAP32[$2 >> 2] = $16; //@line 18191
  if (!$16) {
   $19 = HEAP32[$2 + 24 >> 2] | 0; //@line 18195
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 18196
   FUNCTION_TABLE_vi[$19 & 1023]($4); //@line 18197
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 654; //@line 18200
    $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 18201
    HEAP32[$20 >> 2] = $2; //@line 18202
    $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 18203
    HEAP32[$21 >> 2] = $6; //@line 18204
    $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 18205
    HEAP32[$22 >> 2] = $10; //@line 18206
    $23 = $ReallocAsyncCtx2 + 16 | 0; //@line 18207
    HEAP32[$23 >> 2] = $12; //@line 18208
    $24 = $ReallocAsyncCtx2 + 20 | 0; //@line 18209
    HEAP32[$24 >> 2] = $14; //@line 18210
    sp = STACKTOP; //@line 18211
    return;
   }
   ___async_unwind = 0; //@line 18214
   HEAP32[$ReallocAsyncCtx2 >> 2] = 654; //@line 18215
   $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 18216
   HEAP32[$20 >> 2] = $2; //@line 18217
   $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 18218
   HEAP32[$21 >> 2] = $6; //@line 18219
   $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 18220
   HEAP32[$22 >> 2] = $10; //@line 18221
   $23 = $ReallocAsyncCtx2 + 16 | 0; //@line 18222
   HEAP32[$23 >> 2] = $12; //@line 18223
   $24 = $ReallocAsyncCtx2 + 20 | 0; //@line 18224
   HEAP32[$24 >> 2] = $14; //@line 18225
   sp = STACKTOP; //@line 18226
   return;
  }
 }
 $26 = $6 + 4 | 0; //@line 18231
 HEAP32[$26 >> 2] = 0; //@line 18233
 HEAP32[$26 + 4 >> 2] = 0; //@line 18236
 HEAP32[$6 >> 2] = 656; //@line 18237
 $30 = $6 + 12 | 0; //@line 18238
 HEAP32[$30 >> 2] = 10256; //@line 18239
 $31 = HEAP32[5960] | 0; //@line 18240
 if (!$31) {
  $41 = HEAP32[2565] | 0; //@line 18244
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 18245
  FUNCTION_TABLE_vii[$41 & 15](23828, $6); //@line 18246
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 658; //@line 18249
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 18250
   HEAP32[$42 >> 2] = $6; //@line 18251
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 18252
   HEAP32[$43 >> 2] = $30; //@line 18253
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 18254
   HEAP32[$44 >> 2] = $10; //@line 18255
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 18256
   HEAP32[$45 >> 2] = $12; //@line 18257
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 18258
   HEAP32[$46 >> 2] = $14; //@line 18259
   sp = STACKTOP; //@line 18260
   return;
  }
  ___async_unwind = 0; //@line 18263
  HEAP32[$ReallocAsyncCtx4 >> 2] = 658; //@line 18264
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 18265
  HEAP32[$42 >> 2] = $6; //@line 18266
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 18267
  HEAP32[$43 >> 2] = $30; //@line 18268
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 18269
  HEAP32[$44 >> 2] = $10; //@line 18270
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 18271
  HEAP32[$45 >> 2] = $12; //@line 18272
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 18273
  HEAP32[$46 >> 2] = $14; //@line 18274
  sp = STACKTOP; //@line 18275
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 18279
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 18280
  FUNCTION_TABLE_vi[$34 & 1023](23828); //@line 18281
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 657; //@line 18284
   $35 = $ReallocAsyncCtx3 + 4 | 0; //@line 18285
   HEAP32[$35 >> 2] = $6; //@line 18286
   $36 = $ReallocAsyncCtx3 + 8 | 0; //@line 18287
   HEAP32[$36 >> 2] = $30; //@line 18288
   $37 = $ReallocAsyncCtx3 + 12 | 0; //@line 18289
   HEAP32[$37 >> 2] = $10; //@line 18290
   $38 = $ReallocAsyncCtx3 + 16 | 0; //@line 18291
   HEAP32[$38 >> 2] = $12; //@line 18292
   $39 = $ReallocAsyncCtx3 + 20 | 0; //@line 18293
   HEAP32[$39 >> 2] = $14; //@line 18294
   sp = STACKTOP; //@line 18295
   return;
  }
  ___async_unwind = 0; //@line 18298
  HEAP32[$ReallocAsyncCtx3 >> 2] = 657; //@line 18299
  $35 = $ReallocAsyncCtx3 + 4 | 0; //@line 18300
  HEAP32[$35 >> 2] = $6; //@line 18301
  $36 = $ReallocAsyncCtx3 + 8 | 0; //@line 18302
  HEAP32[$36 >> 2] = $30; //@line 18303
  $37 = $ReallocAsyncCtx3 + 12 | 0; //@line 18304
  HEAP32[$37 >> 2] = $10; //@line 18305
  $38 = $ReallocAsyncCtx3 + 16 | 0; //@line 18306
  HEAP32[$38 >> 2] = $12; //@line 18307
  $39 = $ReallocAsyncCtx3 + 20 | 0; //@line 18308
  HEAP32[$39 >> 2] = $14; //@line 18309
  sp = STACKTOP; //@line 18310
  return;
 }
}
function _ticker_read_us($0) {
 $0 = $0 | 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $36 = 0, $37 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $88 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6063
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6064
 _initialize($0); //@line 6065
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 612; //@line 6068
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 6070
  sp = STACKTOP; //@line 6071
  tempRet0 = 0; //@line 6072
  return 0; //@line 6073
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6075
 $2 = $0 + 4 | 0; //@line 6076
 $3 = HEAP32[$2 >> 2] | 0; //@line 6077
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 6080
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6081
 $7 = FUNCTION_TABLE_i[$6 & 7]() | 0; //@line 6082
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 613; //@line 6085
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 6087
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 6089
  sp = STACKTOP; //@line 6090
  tempRet0 = 0; //@line 6091
  return 0; //@line 6092
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6094
 if (($7 | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $103 = HEAP32[$2 >> 2] | 0; //@line 6100
  $104 = $103 + 48 | 0; //@line 6101
  $105 = $104; //@line 6102
  $106 = $105; //@line 6103
  $107 = HEAP32[$106 >> 2] | 0; //@line 6104
  $108 = $105 + 4 | 0; //@line 6105
  $109 = $108; //@line 6106
  $110 = HEAP32[$109 >> 2] | 0; //@line 6107
  tempRet0 = $110; //@line 6108
  return $107 | 0; //@line 6109
 }
 $14 = $3 + 32 | 0; //@line 6111
 $19 = $7 - (HEAP32[$14 >> 2] | 0) & HEAP32[$3 + 12 >> 2]; //@line 6116
 HEAP32[$14 >> 2] = $7; //@line 6117
 $21 = HEAP32[$3 + 8 >> 2] | 0; //@line 6119
 L10 : do {
  if (($21 | 0) < 1e6) {
   switch ($21 | 0) {
   case 32768:
    {
     break;
    }
   default:
    {
     label = 9; //@line 6128
     break L10;
    }
   }
   $22 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 6132
   $24 = _bitshift64Lshr($22 | 0, tempRet0 | 0, 15) | 0; //@line 6134
   $25 = tempRet0; //@line 6135
   $28 = $3 + 40 | 0; //@line 6138
   $29 = $28; //@line 6139
   $35 = _i64Add(HEAP32[$29 >> 2] | 0, HEAP32[$29 + 4 >> 2] | 0, $19 * 1e6 & 32704 | 0, 0) | 0; //@line 6145
   $36 = tempRet0; //@line 6146
   $37 = $28; //@line 6147
   HEAP32[$37 >> 2] = $35; //@line 6149
   HEAP32[$37 + 4 >> 2] = $36; //@line 6152
   if ($36 >>> 0 < 0 | ($36 | 0) == 0 & $35 >>> 0 < 32768) {
    $95 = $24; //@line 6159
    $96 = $25; //@line 6159
   } else {
    $46 = _i64Add($24 | 0, $25 | 0, 1, 0) | 0; //@line 6161
    $47 = tempRet0; //@line 6162
    $48 = _i64Add($35 | 0, $36 | 0, -32768, -1) | 0; //@line 6163
    $50 = $28; //@line 6165
    HEAP32[$50 >> 2] = $48; //@line 6167
    HEAP32[$50 + 4 >> 2] = tempRet0; //@line 6170
    $95 = $46; //@line 6171
    $96 = $47; //@line 6171
   }
  } else {
   switch ($21 | 0) {
   case 1e6:
    {
     $95 = $19; //@line 6176
     $96 = 0; //@line 6176
     break;
    }
   default:
    {
     label = 9; //@line 6180
    }
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  $54 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 6186
  $55 = tempRet0; //@line 6187
  $56 = ___udivdi3($54 | 0, $55 | 0, $21 | 0, 0) | 0; //@line 6188
  $57 = tempRet0; //@line 6189
  $58 = ___muldi3($56 | 0, $57 | 0, $21 | 0, 0) | 0; //@line 6190
  $60 = _i64Subtract($54 | 0, $55 | 0, $58 | 0, tempRet0 | 0) | 0; //@line 6192
  $62 = $3 + 40 | 0; //@line 6194
  $63 = $62; //@line 6195
  $69 = _i64Add($60 | 0, tempRet0 | 0, HEAP32[$63 >> 2] | 0, HEAP32[$63 + 4 >> 2] | 0) | 0; //@line 6201
  $70 = tempRet0; //@line 6202
  $71 = $62; //@line 6203
  HEAP32[$71 >> 2] = $69; //@line 6205
  HEAP32[$71 + 4 >> 2] = $70; //@line 6208
  if ($70 >>> 0 < 0 | ($70 | 0) == 0 & $69 >>> 0 < $21 >>> 0) {
   $95 = $56; //@line 6215
   $96 = $57; //@line 6215
  } else {
   $80 = _i64Add($56 | 0, $57 | 0, 1, 0) | 0; //@line 6217
   $81 = tempRet0; //@line 6218
   $82 = _i64Subtract($69 | 0, $70 | 0, $21 | 0, 0) | 0; //@line 6219
   $84 = $62; //@line 6221
   HEAP32[$84 >> 2] = $82; //@line 6223
   HEAP32[$84 + 4 >> 2] = tempRet0; //@line 6226
   $95 = $80; //@line 6227
   $96 = $81; //@line 6227
  }
 }
 $88 = $3 + 48 | 0; //@line 6230
 $89 = $88; //@line 6231
 $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 6237
 $99 = $88; //@line 6239
 HEAP32[$99 >> 2] = $97; //@line 6241
 HEAP32[$99 + 4 >> 2] = tempRet0; //@line 6244
 $103 = HEAP32[$2 >> 2] | 0; //@line 6245
 $104 = $103 + 48 | 0; //@line 6246
 $105 = $104; //@line 6247
 $106 = $105; //@line 6248
 $107 = HEAP32[$106 >> 2] | 0; //@line 6249
 $108 = $105 + 4 | 0; //@line 6250
 $109 = $108; //@line 6251
 $110 = HEAP32[$109 >> 2] | 0; //@line 6252
 tempRet0 = $110; //@line 6253
 return $107 | 0; //@line 6254
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$0 = 0, $33 = 0, $36 = 0, $37 = 0, $39 = 0, $48 = 0, $55 = 0, $62 = 0, $67 = 0, $68 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18938
 HEAP8[$0 + 5 >> 0] = $6; //@line 18940
 HEAP8[$0 + 6 >> 0] = $5; //@line 18943
 HEAP8[$0 + 7 >> 0] = $5 >>> 8; //@line 18947
 HEAP8[$0 + 8 >> 0] = $5 >>> 16; //@line 18951
 HEAP8[$0 + 9 >> 0] = $5 >>> 24; //@line 18955
 HEAP8[$0 + 10 >> 0] = $7; //@line 18958
 HEAP8[$0 + 11 >> 0] = $7 >>> 8; //@line 18962
 HEAP8[$0 + 12 >> 0] = $7 >>> 16; //@line 18966
 HEAP8[$0 + 13 >> 0] = $7 >>> 24; //@line 18970
 $33 = $2 & 255; //@line 18972
 HEAP8[$0 + 15 >> 0] = $2; //@line 18975
 $36 = $0 + 344 | 0; //@line 18976
 _mbedtls_cipher_init($36); //@line 18977
 $37 = _mbedtls_cipher_info_from_type(2) | 0; //@line 18978
 if (!$37) {
  $$0 = -24960; //@line 18981
 } else {
  $AsyncCtx15 = _emscripten_alloc_async_context(32, sp) | 0; //@line 18983
  $39 = _mbedtls_cipher_setup($36, $37) | 0; //@line 18984
  if (___async) {
   HEAP32[$AsyncCtx15 >> 2] = 498; //@line 18987
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 18989
   HEAP32[$AsyncCtx15 + 8 >> 2] = $8; //@line 18991
   HEAP32[$AsyncCtx15 + 12 >> 2] = $36; //@line 18993
   HEAP32[$AsyncCtx15 + 16 >> 2] = $1; //@line 18995
   HEAP32[$AsyncCtx15 + 20 >> 2] = $33; //@line 18997
   HEAP32[$AsyncCtx15 + 24 >> 2] = $3; //@line 18999
   HEAP32[$AsyncCtx15 + 28 >> 2] = $4; //@line 19001
   sp = STACKTOP; //@line 19002
   return 0; //@line 19003
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 19005
  if (!$39) {
   $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19008
   $48 = _mbedtls_cipher_cmac_starts($36, $3, $4) | 0; //@line 19009
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 499; //@line 19012
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 19014
    HEAP32[$AsyncCtx11 + 8 >> 2] = $36; //@line 19016
    HEAP32[$AsyncCtx11 + 12 >> 2] = $1; //@line 19018
    HEAP32[$AsyncCtx11 + 16 >> 2] = $33; //@line 19020
    HEAP32[$AsyncCtx11 + 20 >> 2] = $8; //@line 19022
    sp = STACKTOP; //@line 19023
    return 0; //@line 19024
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 19026
   if (!$48) {
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19029
    $55 = _mbedtls_cipher_cmac_update($36, $0, 16) | 0; //@line 19030
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 500; //@line 19033
     HEAP32[$AsyncCtx3 + 4 >> 2] = $36; //@line 19035
     HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 19037
     HEAP32[$AsyncCtx3 + 12 >> 2] = $33; //@line 19039
     HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 19041
     HEAP32[$AsyncCtx3 + 20 >> 2] = $8; //@line 19043
     sp = STACKTOP; //@line 19044
     return 0; //@line 19045
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 19047
    if (!$55) {
     $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 19050
     $62 = _mbedtls_cipher_cmac_update($36, $1, $33) | 0; //@line 19051
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 501; //@line 19054
      HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 19056
      HEAP32[$AsyncCtx + 8 >> 2] = $36; //@line 19058
      HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 19060
      sp = STACKTOP; //@line 19061
      return 0; //@line 19062
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 19064
     if (!$62) {
      $67 = $0 + 16 | 0; //@line 19067
      $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 19068
      $68 = _mbedtls_cipher_cmac_finish($36, $67) | 0; //@line 19069
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 502; //@line 19072
       HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 19074
       HEAP32[$AsyncCtx7 + 8 >> 2] = $67; //@line 19076
       HEAP32[$AsyncCtx7 + 12 >> 2] = $8; //@line 19078
       HEAP32[$AsyncCtx7 + 16 >> 2] = $36; //@line 19080
       sp = STACKTOP; //@line 19081
       return 0; //@line 19082
      }
      _emscripten_free_async_context($AsyncCtx7 | 0); //@line 19084
      if (!$68) {
       HEAP32[$8 >> 2] = (HEAPU8[$0 + 18 >> 0] | 0) << 16 | (HEAPU8[$0 + 19 >> 0] | 0) << 24 | (HEAPU8[$0 + 17 >> 0] | 0) << 8 | (HEAPU8[$67 >> 0] | 0); //@line 19104
       $$0 = 0; //@line 19105
      } else {
       $$0 = $68; //@line 19107
      }
     } else {
      $$0 = $62; //@line 19110
     }
    } else {
     $$0 = $55; //@line 19113
    }
   } else {
    $$0 = $48; //@line 19116
   }
  } else {
   $$0 = $39; //@line 19119
  }
 }
 $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19122
 _mbedtls_cipher_free($36); //@line 19123
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 503; //@line 19126
  HEAP32[$AsyncCtx19 + 4 >> 2] = $$0; //@line 19128
  sp = STACKTOP; //@line 19129
  return 0; //@line 19130
 } else {
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 19132
  return $$0 | 0; //@line 19133
 }
 return 0; //@line 19135
}
function _mbed_vtracef__async_cb_35($0) {
 $0 = $0 | 0;
 var $$10 = 0, $$3147168 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21081
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 21084
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21086
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21088
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21090
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21092
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21094
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21096
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21100
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21104
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21108
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21112
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 21114
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 21116
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 21118
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 21120
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 21122
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 21126
 HEAP32[$44 >> 2] = HEAP32[___async_retval >> 2]; //@line 21133
 $50 = _snprintf($34, $36, 12292, $44) | 0; //@line 21134
 $$10 = ($50 | 0) >= ($36 | 0) ? 0 : $50; //@line 21136
 $53 = $34 + $$10 | 0; //@line 21138
 $54 = $36 - $$10 | 0; //@line 21139
 if (($$10 | 0) > 0) {
  if (($54 | 0) > 0) {
   $$3147168 = $54; //@line 21143
   $$3169 = $53; //@line 21143
   label = 4; //@line 21144
  }
 } else {
  $$3147168 = $36; //@line 21147
  $$3169 = $34; //@line 21147
  label = 4; //@line 21148
 }
 if ((label | 0) == 4) {
  $56 = $38 + -2 | 0; //@line 21151
  switch ($56 >>> 1 | $56 << 31 | 0) {
  case 0:
   {
    HEAP32[$40 >> 2] = $14; //@line 21157
    $$5156 = _snprintf($$3169, $$3147168, 12295, $40) | 0; //@line 21159
    break;
   }
  case 1:
   {
    HEAP32[$12 >> 2] = $14; //@line 21163
    $$5156 = _snprintf($$3169, $$3147168, 12310, $12) | 0; //@line 21165
    break;
   }
  case 3:
   {
    HEAP32[$18 >> 2] = $14; //@line 21169
    $$5156 = _snprintf($$3169, $$3147168, 12325, $18) | 0; //@line 21171
    break;
   }
  case 7:
   {
    HEAP32[$22 >> 2] = $14; //@line 21175
    $$5156 = _snprintf($$3169, $$3147168, 12340, $22) | 0; //@line 21177
    break;
   }
  default:
   {
    $$5156 = _snprintf($$3169, $$3147168, 12355, $26) | 0; //@line 21182
   }
  }
  $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 21186
  $67 = $$3169 + $$5156$ | 0; //@line 21188
  $68 = $$3147168 - $$5156$ | 0; //@line 21189
  if (($$5156$ | 0) > 0 & ($68 | 0) > 0) {
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 21193
   $70 = _vsnprintf($67, $68, $8, $10) | 0; //@line 21194
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 148; //@line 21197
    $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 21198
    $$expand_i1_val = $2 & 1; //@line 21199
    HEAP8[$71 >> 0] = $$expand_i1_val; //@line 21200
    $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 21201
    HEAP32[$72 >> 2] = $4; //@line 21202
    $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 21203
    HEAP32[$73 >> 2] = $6; //@line 21204
    $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 21205
    HEAP32[$74 >> 2] = $68; //@line 21206
    $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 21207
    HEAP32[$75 >> 2] = $67; //@line 21208
    $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 21209
    HEAP32[$76 >> 2] = $30; //@line 21210
    $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 21211
    HEAP32[$77 >> 2] = $32; //@line 21212
    sp = STACKTOP; //@line 21213
    return;
   }
   HEAP32[___async_retval >> 2] = $70; //@line 21217
   ___async_unwind = 0; //@line 21218
   HEAP32[$ReallocAsyncCtx10 >> 2] = 148; //@line 21219
   $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 21220
   $$expand_i1_val = $2 & 1; //@line 21221
   HEAP8[$71 >> 0] = $$expand_i1_val; //@line 21222
   $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 21223
   HEAP32[$72 >> 2] = $4; //@line 21224
   $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 21225
   HEAP32[$73 >> 2] = $6; //@line 21226
   $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 21227
   HEAP32[$74 >> 2] = $68; //@line 21228
   $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 21229
   HEAP32[$75 >> 2] = $67; //@line 21230
   $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 21231
   HEAP32[$76 >> 2] = $30; //@line 21232
   $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 21233
   HEAP32[$77 >> 2] = $32; //@line 21234
   sp = STACKTOP; //@line 21235
   return;
  }
 }
 $79 = HEAP32[174] | 0; //@line 21239
 $80 = HEAP32[167] | 0; //@line 21240
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 21241
 FUNCTION_TABLE_vi[$79 & 1023]($80); //@line 21242
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 21245
  sp = STACKTOP; //@line 21246
  return;
 }
 ___async_unwind = 0; //@line 21249
 HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 21250
 sp = STACKTOP; //@line 21251
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $15 = 0, $16 = 0, $17 = 0, $25 = 0, $28 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $43 = 0, $46 = 0, $49 = 0, $5 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 23290
 STACKTOP = STACKTOP + 16 | 0; //@line 23291
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 23291
 $3 = sp; //@line 23292
 $4 = HEAP32[$0 >> 2] | 0; //@line 23293
 $5 = $1 + 12 | 0; //@line 23294
 $6 = HEAP32[$5 >> 2] | 0; //@line 23295
 do {
  if (!$6) {
   $16 = 0; //@line 23299
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 23302
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 23303
   FUNCTION_TABLE_vii[$9 & 15]($3, $1); //@line 23304
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 560; //@line 23307
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 23309
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 23311
    HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 23313
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 23315
    HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 23317
    sp = STACKTOP; //@line 23318
    STACKTOP = sp; //@line 23319
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 23321
    $16 = HEAP32[$5 >> 2] | 0; //@line 23323
    break;
   }
  }
 } while (0);
 $15 = $3 + 12 | 0; //@line 23328
 HEAP32[$15 >> 2] = $16; //@line 23329
 $AsyncCtx12 = _emscripten_alloc_async_context(28, sp) | 0; //@line 23330
 $17 = _equeue_alloc($4, 16) | 0; //@line 23331
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 561; //@line 23334
  HEAP32[$AsyncCtx12 + 4 >> 2] = $1; //@line 23336
  HEAP32[$AsyncCtx12 + 8 >> 2] = $15; //@line 23338
  HEAP32[$AsyncCtx12 + 12 >> 2] = $15; //@line 23340
  HEAP32[$AsyncCtx12 + 16 >> 2] = $2; //@line 23342
  HEAP32[$AsyncCtx12 + 20 >> 2] = $4; //@line 23344
  HEAP32[$AsyncCtx12 + 24 >> 2] = $3; //@line 23346
  sp = STACKTOP; //@line 23347
  STACKTOP = sp; //@line 23348
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 23350
 do {
  if (!$17) {
   $$0$i = 0; //@line 23354
  } else {
   $25 = HEAP32[$15 >> 2] | 0; //@line 23356
   do {
    if (!$25) {
     $37 = 0; //@line 23360
    } else {
     $28 = HEAP32[$25 + 4 >> 2] | 0; //@line 23363
     $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 23364
     FUNCTION_TABLE_vii[$28 & 15]($17, $3); //@line 23365
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 562; //@line 23368
      HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 23370
      HEAP32[$AsyncCtx2 + 8 >> 2] = $17; //@line 23372
      HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 23374
      HEAP32[$AsyncCtx2 + 16 >> 2] = $4; //@line 23376
      HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 23378
      HEAP32[$AsyncCtx2 + 24 >> 2] = $15; //@line 23380
      HEAP32[$AsyncCtx2 + 28 >> 2] = $3; //@line 23382
      sp = STACKTOP; //@line 23383
      STACKTOP = sp; //@line 23384
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 23386
      $37 = HEAP32[$15 >> 2] | 0; //@line 23388
      break;
     }
    }
   } while (0);
   HEAP32[$17 + 12 >> 2] = $37; //@line 23394
   _equeue_event_delay($17, $2); //@line 23395
   _equeue_event_dtor($17, 282); //@line 23396
   $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 23397
   $38 = _equeue_post($4, 283, $17) | 0; //@line 23398
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 563; //@line 23401
    HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 23403
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 23405
    HEAP32[$AsyncCtx9 + 12 >> 2] = $3; //@line 23407
    sp = STACKTOP; //@line 23408
    STACKTOP = sp; //@line 23409
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 23411
    $$0$i = $38; //@line 23412
    break;
   }
  }
 } while (0);
 $42 = $1 + 16 | 0; //@line 23417
 HEAP32[$42 >> 2] = $$0$i; //@line 23418
 $43 = HEAP32[$15 >> 2] | 0; //@line 23419
 do {
  if (!$43) {
   $49 = $$0$i; //@line 23423
  } else {
   $46 = HEAP32[$43 + 8 >> 2] | 0; //@line 23426
   $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 23427
   FUNCTION_TABLE_vi[$46 & 1023]($3); //@line 23428
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 564; //@line 23431
    HEAP32[$AsyncCtx6 + 4 >> 2] = $42; //@line 23433
    sp = STACKTOP; //@line 23434
    STACKTOP = sp; //@line 23435
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 23437
    $49 = HEAP32[$42 >> 2] | 0; //@line 23439
    break;
   }
  }
 } while (0);
 if ($49 | 0) {
  STACKTOP = sp; //@line 23446
  return;
 }
 $AsyncCtx16 = _emscripten_alloc_async_context(4, sp) | 0; //@line 23448
 _mbed_assert_internal(13674, 13692, 57); //@line 23449
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 565; //@line 23452
  sp = STACKTOP; //@line 23453
  STACKTOP = sp; //@line 23454
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 23456
 STACKTOP = sp; //@line 23457
 return;
}
function __ZL18lora_event_handler11lora_events($0) {
 $0 = $0 | 0;
 var $$07$i = 0, $1 = 0, $10 = 0, $15 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7676
 STACKTOP = STACKTOP + 96 | 0; //@line 7677
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 7677
 $vararg_buffer11 = sp + 32 | 0; //@line 7678
 $vararg_buffer8 = sp + 24 | 0; //@line 7679
 $vararg_buffer4 = sp + 16 | 0; //@line 7680
 $vararg_buffer1 = sp + 8 | 0; //@line 7681
 $vararg_buffer = sp; //@line 7682
 $1 = sp + 36 | 0; //@line 7683
 switch ($0 | 0) {
 case 0:
  {
   $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7686
   _puts(15501) | 0; //@line 7687
   if (___async) {
    HEAP32[$AsyncCtx31 >> 2] = 668; //@line 7690
    sp = STACKTOP; //@line 7691
    STACKTOP = sp; //@line 7692
    return;
   }
   _emscripten_free_async_context($AsyncCtx31 | 0); //@line 7694
   STACKTOP = sp; //@line 7695
   return;
  }
 case 1:
  {
   __ZN6events10EventQueue14break_dispatchEv(20480); //@line 7699
   $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7700
   _puts(15525) | 0; //@line 7701
   if (___async) {
    HEAP32[$AsyncCtx27 >> 2] = 669; //@line 7704
    sp = STACKTOP; //@line 7705
    STACKTOP = sp; //@line 7706
    return;
   }
   _emscripten_free_async_context($AsyncCtx27 | 0); //@line 7708
   STACKTOP = sp; //@line 7709
   return;
  }
 case 2:
  {
   $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7713
   _puts(15551) | 0; //@line 7714
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 670; //@line 7717
    sp = STACKTOP; //@line 7718
    STACKTOP = sp; //@line 7719
    return;
   }
   _emscripten_free_async_context($AsyncCtx23 | 0); //@line 7721
   STACKTOP = sp; //@line 7722
   return;
  }
 case 6:
 case 5:
 case 4:
 case 3:
  {
   HEAP32[$vararg_buffer >> 2] = $0; //@line 7726
   _printf(15582, $vararg_buffer) | 0; //@line 7727
   STACKTOP = sp; //@line 7728
   return;
  }
 case 7:
  {
   $AsyncCtx19 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7732
   _puts(15619) | 0; //@line 7733
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 671; //@line 7736
    HEAP32[$AsyncCtx19 + 4 >> 2] = $1; //@line 7738
    HEAP32[$AsyncCtx19 + 8 >> 2] = $vararg_buffer1; //@line 7740
    HEAP32[$AsyncCtx19 + 12 >> 2] = $vararg_buffer1; //@line 7742
    HEAP32[$AsyncCtx19 + 16 >> 2] = $vararg_buffer4; //@line 7744
    HEAP32[$AsyncCtx19 + 20 >> 2] = $vararg_buffer4; //@line 7746
    HEAP32[$AsyncCtx19 + 24 >> 2] = $vararg_buffer8; //@line 7748
    HEAP32[$AsyncCtx19 + 28 >> 2] = $vararg_buffer8; //@line 7750
    sp = STACKTOP; //@line 7751
    STACKTOP = sp; //@line 7752
    return;
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 7754
   dest = $1; //@line 7755
   stop = dest + 50 | 0; //@line 7755
   do {
    HEAP8[dest >> 0] = 0; //@line 7755
    dest = dest + 1 | 0; //@line 7755
   } while ((dest | 0) < (stop | 0));
   $9 = __ZN16LoRaWANInterface7receiveEhPhti(20684, 15, $1, 50, 3) | 0; //@line 7756
   $10 = $9 << 16 >> 16; //@line 7757
   do {
    if ($9 << 16 >> 16 < 0) {
     HEAP32[$vararg_buffer1 >> 2] = $10; //@line 7761
     _printf(15656, $vararg_buffer1) | 0; //@line 7762
    } else {
     HEAP32[$vararg_buffer4 >> 2] = 15; //@line 7764
     HEAP32[$vararg_buffer4 + 4 >> 2] = $10; //@line 7766
     _printf(15683, $vararg_buffer4) | 0; //@line 7767
     if ($9 << 16 >> 16) {
      $$07$i = 0; //@line 7770
      $15 = 0; //@line 7770
      do {
       HEAP32[$vararg_buffer8 >> 2] = HEAPU8[$1 + $15 >> 0]; //@line 7775
       _printf(15722, $vararg_buffer8) | 0; //@line 7776
       $$07$i = $$07$i + 1 << 24 >> 24; //@line 7777
       $15 = $$07$i & 255; //@line 7778
      } while (($15 | 0) < ($10 | 0));
     }
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7787
     _putchar(10) | 0; //@line 7788
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 672; //@line 7791
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 7793
      sp = STACKTOP; //@line 7794
      STACKTOP = sp; //@line 7795
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 7797
      break;
     }
    }
   } while (0);
   STACKTOP = sp; //@line 7802
   return;
  }
 case 9:
 case 8:
  {
   HEAP32[$vararg_buffer11 >> 2] = $0; //@line 7806
   _printf(15728, $vararg_buffer11) | 0; //@line 7807
   STACKTOP = sp; //@line 7808
   return;
  }
 case 10:
  {
   $AsyncCtx15 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7812
   _puts(15760) | 0; //@line 7813
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 673; //@line 7816
    sp = STACKTOP; //@line 7817
    STACKTOP = sp; //@line 7818
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7820
   STACKTOP = sp; //@line 7821
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 7825
   return;
  }
 }
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv($0) {
 $0 = $0 | 0;
 var $12 = 0, $19 = 0, $32 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $69 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 15009
 $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15011
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 15012
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 432; //@line 15015
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 15017
  HEAP32[$AsyncCtx23 + 8 >> 2] = $0; //@line 15019
  sp = STACKTOP; //@line 15020
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 15023
 $4 = $0 + 1836 | 0; //@line 15024
 $AsyncCtx19 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15025
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $4); //@line 15026
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 433; //@line 15029
  HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 15031
  HEAP32[$AsyncCtx19 + 8 >> 2] = $4; //@line 15033
  HEAP32[$AsyncCtx19 + 12 >> 2] = $0; //@line 15035
  sp = STACKTOP; //@line 15036
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 15039
 $AsyncCtx15 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15041
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 15042
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 434; //@line 15045
  HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 15047
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 15049
  HEAP32[$AsyncCtx15 + 12 >> 2] = $4; //@line 15051
  sp = STACKTOP; //@line 15052
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 15055
 $12 = $0 + 2364 | 0; //@line 15056
 do {
  if ((HEAP32[$12 >> 2] | 0) == 2) {
   $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15061
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $4); //@line 15062
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 435; //@line 15065
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 15067
    HEAP32[$AsyncCtx11 + 8 >> 2] = $12; //@line 15069
    sp = STACKTOP; //@line 15070
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15073
   $19 = $0 + 1964 | 0; //@line 15076
   HEAP8[$19 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 15077
   HEAP32[$0 + 1968 >> 2] = HEAP32[$0 + 1912 >> 2]; //@line 15081
   HEAP8[$0 + 1980 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 15085
   HEAP8[$0 + 1981 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 15089
   HEAP32[$0 + 1984 >> 2] = 1; //@line 15091
   $32 = $0 + 1982 | 0; //@line 15094
   HEAP8[$32 >> 0] = (HEAP32[$12 >> 2] | 0) == 2 & 1; //@line 15096
   HEAP8[$0 + 2010 >> 0] = HEAP8[$0 + 1965 >> 0] | 0; //@line 15100
   $37 = $0 + 4 | 0; //@line 15101
   $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15102
   $38 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($37, $19) | 0; //@line 15103
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 436; //@line 15106
    HEAP32[$AsyncCtx7 + 4 >> 2] = $32; //@line 15108
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 15110
    HEAP32[$AsyncCtx7 + 12 >> 2] = $37; //@line 15112
    sp = STACKTOP; //@line 15113
    return;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 15116
   if ($38) {
    $43 = (HEAP8[$32 >> 0] | 0) != 0; //@line 15119
    $45 = HEAP32[$0 + 1888 >> 2] | 0; //@line 15121
    $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 15122
    __ZN7LoRaPHY15setup_rx_windowEbj($37, $43, $45); //@line 15123
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 437; //@line 15126
     HEAP32[$AsyncCtx + 4 >> 2] = $32; //@line 15128
     HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 15130
     sp = STACKTOP; //@line 15131
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15134
     HEAP32[$0 + 1168 >> 2] = HEAP8[$32 >> 0] | 0 ? 2 : 1; //@line 15139
     break;
    }
   }
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 15145
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 15146
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 438; //@line 15149
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 15151
    sp = STACKTOP; //@line 15152
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15155
    break;
   }
  }
 } while (0);
 $54 = $0 + 2040 | 0; //@line 15160
 HEAP32[$54 >> 2] = 2; //@line 15161
 HEAP32[$0 + 2076 >> 2] = 2; //@line 15163
 __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 476 | 0); //@line 15165
 HEAP8[$0 + 2047 >> 0] = HEAP8[$0 + 1699 >> 0] | 0; //@line 15169
 HEAP8[$0 + 2046 >> 0] = 0; //@line 15171
 HEAP32[$0 + 2048 >> 2] = 0; //@line 15173
 HEAP8[$0 + 1180 >> 0] = 0; //@line 15175
 HEAP32[$54 >> 2] = 0; //@line 15176
 if ((HEAP32[$0 + 2036 >> 2] | 0) == 1) {
  return;
 }
 if (HEAP8[$0 + 1174 >> 0] | 0) {
  return;
 }
 $69 = $0 + 1760 | 0; //@line 15189
 HEAP32[$69 >> 2] = (HEAP32[$69 >> 2] | 0) + 1; //@line 15192
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $31 = 0, $40 = 0, $53 = 0, $58 = 0, $59 = 0, $65 = 0, $67 = 0, $73 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15203
 $2 = $0 + 2364 | 0; //@line 15204
 do {
  if ((HEAP32[$2 >> 2] | 0) != 2) {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15210
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 15211
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 439; //@line 15214
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 15216
    HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 15218
    HEAP8[$AsyncCtx3 + 12 >> 0] = $1 & 1; //@line 15221
    sp = STACKTOP; //@line 15222
    return 0; //@line 15223
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15225
    break;
   }
  }
 } while (0);
 $9 = $0 + 1168 | 0; //@line 15230
 $14 = (HEAP8[$0 + 1177 >> 0] | 0) != 0; //@line 15235
 do {
  if (!(HEAP32[$9 >> 2] | 0)) {
   if ($14) {
    $16 = $1 ? 3 : 5; //@line 15240
    HEAP32[$0 + 2040 >> 2] = $16; //@line 15241
    $$pre$phiZ2D = $16; //@line 15242
   } else {
    $$pre$phiZ2D = $1 ? 3 : 5; //@line 15245
   }
   HEAP32[$0 + 2076 >> 2] = $$pre$phiZ2D; //@line 15248
   if ((HEAP32[$2 >> 2] | 0) != 2) {
    $22 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, HEAP32[$0 + 1780 >> 2] | 0) | 0; //@line 15254
    if ($22 >>> 0 < (HEAP32[$0 + 1776 >> 2] | 0) >>> 0) {
     label = 18; //@line 15259
    } else {
     $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15262
     __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 15263
     if (___async) {
      HEAP32[$AsyncCtx14 >> 2] = 440; //@line 15266
      HEAP32[$AsyncCtx14 + 4 >> 2] = $2; //@line 15268
      HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 15270
      HEAP32[$AsyncCtx14 + 12 >> 2] = $9; //@line 15272
      sp = STACKTOP; //@line 15273
      return 0; //@line 15274
     } else {
      _emscripten_free_async_context($AsyncCtx14 | 0); //@line 15276
      label = 18; //@line 15277
      break;
     }
    }
   }
  } else {
   if ($14) {
    $31 = $1 ? 4 : 6; //@line 15285
    HEAP32[$0 + 2040 >> 2] = $31; //@line 15286
    $$pre$phi6Z2D = $31; //@line 15287
   } else {
    $$pre$phi6Z2D = $1 ? 4 : 6; //@line 15290
   }
   HEAP32[$0 + 2076 >> 2] = $$pre$phi6Z2D; //@line 15293
   label = 18; //@line 15294
  }
 } while (0);
 if ((label | 0) == 18) {
  if ((HEAP32[$2 >> 2] | 0) != 2) {
   $73 = HEAP32[$9 >> 2] | 0; //@line 15301
   return $73 | 0; //@line 15302
  }
 }
 $AsyncCtx10 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15306
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 15307
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 441; //@line 15310
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 15312
  HEAP32[$AsyncCtx10 + 8 >> 2] = $2; //@line 15314
  HEAP32[$AsyncCtx10 + 12 >> 2] = $9; //@line 15316
  sp = STACKTOP; //@line 15317
  return 0; //@line 15318
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 15320
 $40 = $0 + 1964 | 0; //@line 15323
 HEAP8[$40 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 15324
 HEAP32[$0 + 1968 >> 2] = HEAP32[$0 + 1912 >> 2]; //@line 15328
 HEAP8[$0 + 1980 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 15332
 HEAP8[$0 + 1981 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 15336
 HEAP32[$0 + 1984 >> 2] = 1; //@line 15338
 $53 = $0 + 1982 | 0; //@line 15341
 HEAP8[$53 >> 0] = (HEAP32[$2 >> 2] | 0) == 2 & 1; //@line 15343
 HEAP8[$0 + 2010 >> 0] = HEAP8[$0 + 1965 >> 0] | 0; //@line 15347
 $58 = $0 + 4 | 0; //@line 15348
 $AsyncCtx6 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15349
 $59 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($58, $40) | 0; //@line 15350
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 442; //@line 15353
  HEAP32[$AsyncCtx6 + 4 >> 2] = $53; //@line 15355
  HEAP32[$AsyncCtx6 + 8 >> 2] = $0; //@line 15357
  HEAP32[$AsyncCtx6 + 12 >> 2] = $58; //@line 15359
  HEAP32[$AsyncCtx6 + 16 >> 2] = $9; //@line 15361
  sp = STACKTOP; //@line 15362
  return 0; //@line 15363
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 15365
 if (!$59) {
  $73 = HEAP32[$9 >> 2] | 0; //@line 15367
  return $73 | 0; //@line 15368
 }
 $65 = (HEAP8[$53 >> 0] | 0) != 0; //@line 15371
 $67 = HEAP32[$0 + 1888 >> 2] | 0; //@line 15373
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 15374
 __ZN7LoRaPHY15setup_rx_windowEbj($58, $65, $67); //@line 15375
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 443; //@line 15378
  HEAP32[$AsyncCtx + 4 >> 2] = $53; //@line 15380
  HEAP32[$AsyncCtx + 8 >> 2] = $9; //@line 15382
  sp = STACKTOP; //@line 15383
  return 0; //@line 15384
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15386
 HEAP32[$9 >> 2] = HEAP8[$53 >> 0] | 0 ? 2 : 1; //@line 15390
 $73 = HEAP32[$9 >> 2] | 0; //@line 15391
 return $73 | 0; //@line 15392
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32472
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32474
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32476
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 32478
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 32480
 $10 = HEAP8[$0 + 16 >> 0] | 0; //@line 32482
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 32484
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 32486
 $$pre$i = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 32489
 $17 = $14 + 12 | 0; //@line 32490
 HEAP32[$17 >> 2] = $$pre$i; //@line 32491
 if (!$$pre$i) {
  $30 = $2 + 12 | 0; //@line 32494
  HEAP32[$30 >> 2] = 0; //@line 32495
  $31 = $2 + 16 | 0; //@line 32496
  HEAP32[$31 >> 2] = $4; //@line 32497
  HEAP16[$2 + 20 >> 1] = $6; //@line 32499
  HEAP16[$2 + 22 >> 1] = $8; //@line 32501
  HEAP8[$2 + 24 >> 0] = $10; //@line 32503
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 32504
  $35 = _equeue_alloc($12, 28) | 0; //@line 32505
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 298; //@line 32508
   $36 = $ReallocAsyncCtx7 + 4 | 0; //@line 32509
   HEAP32[$36 >> 2] = $30; //@line 32510
   $37 = $ReallocAsyncCtx7 + 8 | 0; //@line 32511
   HEAP32[$37 >> 2] = $30; //@line 32512
   $38 = $ReallocAsyncCtx7 + 12 | 0; //@line 32513
   HEAP32[$38 >> 2] = $2; //@line 32514
   $39 = $ReallocAsyncCtx7 + 16 | 0; //@line 32515
   HEAP32[$39 >> 2] = $31; //@line 32516
   $40 = $ReallocAsyncCtx7 + 20 | 0; //@line 32517
   HEAP32[$40 >> 2] = $12; //@line 32518
   $41 = $ReallocAsyncCtx7 + 24 | 0; //@line 32519
   HEAP32[$41 >> 2] = $17; //@line 32520
   $42 = $ReallocAsyncCtx7 + 28 | 0; //@line 32521
   HEAP32[$42 >> 2] = $14; //@line 32522
   sp = STACKTOP; //@line 32523
   return;
  }
  HEAP32[___async_retval >> 2] = $35; //@line 32527
  ___async_unwind = 0; //@line 32528
  HEAP32[$ReallocAsyncCtx7 >> 2] = 298; //@line 32529
  $36 = $ReallocAsyncCtx7 + 4 | 0; //@line 32530
  HEAP32[$36 >> 2] = $30; //@line 32531
  $37 = $ReallocAsyncCtx7 + 8 | 0; //@line 32532
  HEAP32[$37 >> 2] = $30; //@line 32533
  $38 = $ReallocAsyncCtx7 + 12 | 0; //@line 32534
  HEAP32[$38 >> 2] = $2; //@line 32535
  $39 = $ReallocAsyncCtx7 + 16 | 0; //@line 32536
  HEAP32[$39 >> 2] = $31; //@line 32537
  $40 = $ReallocAsyncCtx7 + 20 | 0; //@line 32538
  HEAP32[$40 >> 2] = $12; //@line 32539
  $41 = $ReallocAsyncCtx7 + 24 | 0; //@line 32540
  HEAP32[$41 >> 2] = $17; //@line 32541
  $42 = $ReallocAsyncCtx7 + 28 | 0; //@line 32542
  HEAP32[$42 >> 2] = $14; //@line 32543
  sp = STACKTOP; //@line 32544
  return;
 } else {
  $20 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 32549
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 32550
  FUNCTION_TABLE_vii[$20 & 15]($2, $14); //@line 32551
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 32554
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 32555
   HEAP32[$21 >> 2] = $17; //@line 32556
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 32557
   HEAP32[$22 >> 2] = $17; //@line 32558
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 32559
   HEAP32[$23 >> 2] = $2; //@line 32560
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 32561
   HEAP32[$24 >> 2] = $4; //@line 32562
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 32563
   HEAP16[$25 >> 1] = $6; //@line 32564
   $26 = $ReallocAsyncCtx2 + 22 | 0; //@line 32565
   HEAP16[$26 >> 1] = $8; //@line 32566
   $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 32567
   HEAP8[$27 >> 0] = $10; //@line 32568
   $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 32569
   HEAP32[$28 >> 2] = $12; //@line 32570
   $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 32571
   HEAP32[$29 >> 2] = $14; //@line 32572
   sp = STACKTOP; //@line 32573
   return;
  }
  ___async_unwind = 0; //@line 32576
  HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 32577
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 32578
  HEAP32[$21 >> 2] = $17; //@line 32579
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 32580
  HEAP32[$22 >> 2] = $17; //@line 32581
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 32582
  HEAP32[$23 >> 2] = $2; //@line 32583
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 32584
  HEAP32[$24 >> 2] = $4; //@line 32585
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 32586
  HEAP16[$25 >> 1] = $6; //@line 32587
  $26 = $ReallocAsyncCtx2 + 22 | 0; //@line 32588
  HEAP16[$26 >> 1] = $8; //@line 32589
  $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 32590
  HEAP8[$27 >> 0] = $10; //@line 32591
  $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 32592
  HEAP32[$28 >> 2] = $12; //@line 32593
  $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 32594
  HEAP32[$29 >> 2] = $14; //@line 32595
  sp = STACKTOP; //@line 32596
  return;
 }
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_402($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30314
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30316
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30318
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30320
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30322
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30324
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30326
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30328
 if ($AsyncRetVal | 0) {
  $15 = HEAP32[$4 >> 2] | 0; //@line 30331
  if (!$15) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 30335
   _equeue_event_delay($AsyncRetVal, $8); //@line 30336
   _equeue_event_dtor($AsyncRetVal, 282); //@line 30337
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 30338
   $27 = _equeue_post($10, 283, $AsyncRetVal) | 0; //@line 30339
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 563; //@line 30342
    $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 30343
    HEAP32[$28 >> 2] = $2; //@line 30344
    $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 30345
    HEAP32[$29 >> 2] = $4; //@line 30346
    $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 30347
    HEAP32[$30 >> 2] = $12; //@line 30348
    sp = STACKTOP; //@line 30349
    return;
   }
   HEAP32[___async_retval >> 2] = $27; //@line 30353
   ___async_unwind = 0; //@line 30354
   HEAP32[$ReallocAsyncCtx4 >> 2] = 563; //@line 30355
   $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 30356
   HEAP32[$28 >> 2] = $2; //@line 30357
   $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 30358
   HEAP32[$29 >> 2] = $4; //@line 30359
   $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 30360
   HEAP32[$30 >> 2] = $12; //@line 30361
   sp = STACKTOP; //@line 30362
   return;
  } else {
   $18 = HEAP32[$15 + 4 >> 2] | 0; //@line 30366
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 30367
   FUNCTION_TABLE_vii[$18 & 15]($AsyncRetVal, $12); //@line 30368
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 562; //@line 30371
    $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 30372
    HEAP32[$19 >> 2] = $6; //@line 30373
    $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 30374
    HEAP32[$20 >> 2] = $AsyncRetVal; //@line 30375
    $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 30376
    HEAP32[$21 >> 2] = $8; //@line 30377
    $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 30378
    HEAP32[$22 >> 2] = $10; //@line 30379
    $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 30380
    HEAP32[$23 >> 2] = $2; //@line 30381
    $24 = $ReallocAsyncCtx2 + 24 | 0; //@line 30382
    HEAP32[$24 >> 2] = $4; //@line 30383
    $25 = $ReallocAsyncCtx2 + 28 | 0; //@line 30384
    HEAP32[$25 >> 2] = $12; //@line 30385
    sp = STACKTOP; //@line 30386
    return;
   }
   ___async_unwind = 0; //@line 30389
   HEAP32[$ReallocAsyncCtx2 >> 2] = 562; //@line 30390
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 30391
   HEAP32[$19 >> 2] = $6; //@line 30392
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 30393
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 30394
   $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 30395
   HEAP32[$21 >> 2] = $8; //@line 30396
   $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 30397
   HEAP32[$22 >> 2] = $10; //@line 30398
   $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 30399
   HEAP32[$23 >> 2] = $2; //@line 30400
   $24 = $ReallocAsyncCtx2 + 24 | 0; //@line 30401
   HEAP32[$24 >> 2] = $4; //@line 30402
   $25 = $ReallocAsyncCtx2 + 28 | 0; //@line 30403
   HEAP32[$25 >> 2] = $12; //@line 30404
   sp = STACKTOP; //@line 30405
   return;
  }
 }
 $32 = $2 + 16 | 0; //@line 30409
 HEAP32[$32 >> 2] = 0; //@line 30410
 $33 = HEAP32[$4 >> 2] | 0; //@line 30411
 if ($33 | 0) {
  $36 = HEAP32[$33 + 8 >> 2] | 0; //@line 30415
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 30416
  FUNCTION_TABLE_vi[$36 & 1023]($12); //@line 30417
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 564; //@line 30420
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 30421
   HEAP32[$37 >> 2] = $32; //@line 30422
   sp = STACKTOP; //@line 30423
   return;
  }
  ___async_unwind = 0; //@line 30426
  HEAP32[$ReallocAsyncCtx3 >> 2] = 564; //@line 30427
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 30428
  HEAP32[$37 >> 2] = $32; //@line 30429
  sp = STACKTOP; //@line 30430
  return;
 }
 if (0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 30437
 _mbed_assert_internal(13674, 13692, 57); //@line 30438
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 565; //@line 30441
  sp = STACKTOP; //@line 30442
  return;
 }
 ___async_unwind = 0; //@line 30445
 HEAP32[$ReallocAsyncCtx6 >> 2] = 565; //@line 30446
 sp = STACKTOP; //@line 30447
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_337($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 13921
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13923
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13927
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13929
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] >> 2]; //@line 13933
 $11 = $6 + 32 | 0; //@line 13934
 $12 = $6 + 44 | 0; //@line 13935
 $13 = HEAP32[$12 >> 2] | 0; //@line 13936
 if (!$13) {
  HEAP32[___async_retval >> 2] = 0; //@line 13940
  return;
 }
 $15 = $2 + 2516 | 0; //@line 13943
 if (($15 | 0) == ($11 | 0)) {
  $36 = HEAP32[$13 + 4 >> 2] | 0; //@line 13947
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 13948
  FUNCTION_TABLE_vii[$36 & 15]($8, $11); //@line 13949
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 353; //@line 13952
   $37 = $ReallocAsyncCtx7 + 4 | 0; //@line 13953
   HEAP32[$37 >> 2] = $12; //@line 13954
   $38 = $ReallocAsyncCtx7 + 8 | 0; //@line 13955
   HEAP32[$38 >> 2] = $2; //@line 13956
   $39 = $ReallocAsyncCtx7 + 12 | 0; //@line 13957
   HEAP32[$39 >> 2] = $8; //@line 13958
   sp = STACKTOP; //@line 13959
   return;
  }
  ___async_unwind = 0; //@line 13962
  HEAP32[$ReallocAsyncCtx7 >> 2] = 353; //@line 13963
  $37 = $ReallocAsyncCtx7 + 4 | 0; //@line 13964
  HEAP32[$37 >> 2] = $12; //@line 13965
  $38 = $ReallocAsyncCtx7 + 8 | 0; //@line 13966
  HEAP32[$38 >> 2] = $2; //@line 13967
  $39 = $ReallocAsyncCtx7 + 12 | 0; //@line 13968
  HEAP32[$39 >> 2] = $8; //@line 13969
  sp = STACKTOP; //@line 13970
  return;
 }
 $17 = $2 + 2528 | 0; //@line 13973
 $18 = HEAP32[$17 >> 2] | 0; //@line 13974
 if (!$18) {
  $29 = HEAP32[$13 + 4 >> 2] | 0; //@line 13978
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 13979
  FUNCTION_TABLE_vii[$29 & 15]($15, $11); //@line 13980
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 352; //@line 13983
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 13984
   HEAP32[$30 >> 2] = $12; //@line 13985
   $31 = $ReallocAsyncCtx6 + 8 | 0; //@line 13986
   HEAP32[$31 >> 2] = $17; //@line 13987
   $32 = $ReallocAsyncCtx6 + 12 | 0; //@line 13988
   HEAP32[$32 >> 2] = $2; //@line 13989
   $33 = $ReallocAsyncCtx6 + 16 | 0; //@line 13990
   HEAP32[$33 >> 2] = $8; //@line 13991
   $34 = $ReallocAsyncCtx6 + 20 | 0; //@line 13992
   HEAP32[$34 >> 2] = $11; //@line 13993
   sp = STACKTOP; //@line 13994
   return;
  }
  ___async_unwind = 0; //@line 13997
  HEAP32[$ReallocAsyncCtx6 >> 2] = 352; //@line 13998
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 13999
  HEAP32[$30 >> 2] = $12; //@line 14000
  $31 = $ReallocAsyncCtx6 + 8 | 0; //@line 14001
  HEAP32[$31 >> 2] = $17; //@line 14002
  $32 = $ReallocAsyncCtx6 + 12 | 0; //@line 14003
  HEAP32[$32 >> 2] = $2; //@line 14004
  $33 = $ReallocAsyncCtx6 + 16 | 0; //@line 14005
  HEAP32[$33 >> 2] = $8; //@line 14006
  $34 = $ReallocAsyncCtx6 + 20 | 0; //@line 14007
  HEAP32[$34 >> 2] = $11; //@line 14008
  sp = STACKTOP; //@line 14009
  return;
 } else {
  $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 14013
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 14014
  FUNCTION_TABLE_vi[$21 & 1023]($15); //@line 14015
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 351; //@line 14018
   $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 14019
   HEAP32[$22 >> 2] = $12; //@line 14020
   $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 14021
   HEAP32[$23 >> 2] = $17; //@line 14022
   $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 14023
   HEAP32[$24 >> 2] = $2; //@line 14024
   $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 14025
   HEAP32[$25 >> 2] = $15; //@line 14026
   $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 14027
   HEAP32[$26 >> 2] = $11; //@line 14028
   $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 14029
   HEAP32[$27 >> 2] = $8; //@line 14030
   sp = STACKTOP; //@line 14031
   return;
  }
  ___async_unwind = 0; //@line 14034
  HEAP32[$ReallocAsyncCtx5 >> 2] = 351; //@line 14035
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 14036
  HEAP32[$22 >> 2] = $12; //@line 14037
  $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 14038
  HEAP32[$23 >> 2] = $17; //@line 14039
  $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 14040
  HEAP32[$24 >> 2] = $2; //@line 14041
  $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 14042
  HEAP32[$25 >> 2] = $15; //@line 14043
  $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 14044
  HEAP32[$26 >> 2] = $11; //@line 14045
  $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 14046
  HEAP32[$27 >> 2] = $8; //@line 14047
  sp = STACKTOP; //@line 14048
  return;
 }
}
function _ticker_read_us__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $58 = 0, $59 = 0, $65 = 0, $66 = 0, $67 = 0, $76 = 0, $77 = 0, $78 = 0, $80 = 0, $84 = 0, $85 = 0, $91 = 0, $92 = 0, $93 = 0, $95 = 0, $99 = 0, $AsyncRetVal = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24235
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24237
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24239
 if (($AsyncRetVal | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $99 = HEAP32[$2 >> 2] | 0; //@line 24245
  $100 = $99 + 48 | 0; //@line 24246
  $101 = $100; //@line 24247
  $102 = $101; //@line 24248
  $103 = HEAP32[$102 >> 2] | 0; //@line 24249
  $104 = $101 + 4 | 0; //@line 24250
  $105 = $104; //@line 24251
  $106 = HEAP32[$105 >> 2] | 0; //@line 24252
  $107 = ___async_retval; //@line 24253
  $108 = $107; //@line 24254
  $109 = $108; //@line 24255
  HEAP32[$109 >> 2] = $103; //@line 24256
  $110 = $108 + 4 | 0; //@line 24257
  $111 = $110; //@line 24258
  HEAP32[$111 >> 2] = $106; //@line 24259
  return;
 }
 $10 = $4 + 32 | 0; //@line 24262
 $15 = $AsyncRetVal - (HEAP32[$10 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 24267
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 24268
 $17 = HEAP32[$4 + 8 >> 2] | 0; //@line 24270
 L5 : do {
  if (($17 | 0) < 1e6) {
   switch ($17 | 0) {
   case 32768:
    {
     break;
    }
   default:
    {
     label = 6; //@line 24279
     break L5;
    }
   }
   $18 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 24283
   $20 = _bitshift64Lshr($18 | 0, tempRet0 | 0, 15) | 0; //@line 24285
   $21 = tempRet0; //@line 24286
   $24 = $4 + 40 | 0; //@line 24289
   $25 = $24; //@line 24290
   $31 = _i64Add(HEAP32[$25 >> 2] | 0, HEAP32[$25 + 4 >> 2] | 0, $15 * 1e6 & 32704 | 0, 0) | 0; //@line 24296
   $32 = tempRet0; //@line 24297
   $33 = $24; //@line 24298
   HEAP32[$33 >> 2] = $31; //@line 24300
   HEAP32[$33 + 4 >> 2] = $32; //@line 24303
   if ($32 >>> 0 < 0 | ($32 | 0) == 0 & $31 >>> 0 < 32768) {
    $91 = $20; //@line 24310
    $92 = $21; //@line 24310
   } else {
    $42 = _i64Add($20 | 0, $21 | 0, 1, 0) | 0; //@line 24312
    $43 = tempRet0; //@line 24313
    $44 = _i64Add($31 | 0, $32 | 0, -32768, -1) | 0; //@line 24314
    $46 = $24; //@line 24316
    HEAP32[$46 >> 2] = $44; //@line 24318
    HEAP32[$46 + 4 >> 2] = tempRet0; //@line 24321
    $91 = $42; //@line 24322
    $92 = $43; //@line 24322
   }
  } else {
   switch ($17 | 0) {
   case 1e6:
    {
     $91 = $15; //@line 24327
     $92 = 0; //@line 24327
     break;
    }
   default:
    {
     label = 6; //@line 24331
    }
   }
  }
 } while (0);
 if ((label | 0) == 6) {
  $50 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 24337
  $51 = tempRet0; //@line 24338
  $52 = ___udivdi3($50 | 0, $51 | 0, $17 | 0, 0) | 0; //@line 24339
  $53 = tempRet0; //@line 24340
  $54 = ___muldi3($52 | 0, $53 | 0, $17 | 0, 0) | 0; //@line 24341
  $56 = _i64Subtract($50 | 0, $51 | 0, $54 | 0, tempRet0 | 0) | 0; //@line 24343
  $58 = $4 + 40 | 0; //@line 24345
  $59 = $58; //@line 24346
  $65 = _i64Add($56 | 0, tempRet0 | 0, HEAP32[$59 >> 2] | 0, HEAP32[$59 + 4 >> 2] | 0) | 0; //@line 24352
  $66 = tempRet0; //@line 24353
  $67 = $58; //@line 24354
  HEAP32[$67 >> 2] = $65; //@line 24356
  HEAP32[$67 + 4 >> 2] = $66; //@line 24359
  if ($66 >>> 0 < 0 | ($66 | 0) == 0 & $65 >>> 0 < $17 >>> 0) {
   $91 = $52; //@line 24366
   $92 = $53; //@line 24366
  } else {
   $76 = _i64Add($52 | 0, $53 | 0, 1, 0) | 0; //@line 24368
   $77 = tempRet0; //@line 24369
   $78 = _i64Subtract($65 | 0, $66 | 0, $17 | 0, 0) | 0; //@line 24370
   $80 = $58; //@line 24372
   HEAP32[$80 >> 2] = $78; //@line 24374
   HEAP32[$80 + 4 >> 2] = tempRet0; //@line 24377
   $91 = $76; //@line 24378
   $92 = $77; //@line 24378
  }
 }
 $84 = $4 + 48 | 0; //@line 24381
 $85 = $84; //@line 24382
 $93 = _i64Add(HEAP32[$85 >> 2] | 0, HEAP32[$85 + 4 >> 2] | 0, $91 | 0, $92 | 0) | 0; //@line 24388
 $95 = $84; //@line 24390
 HEAP32[$95 >> 2] = $93; //@line 24392
 HEAP32[$95 + 4 >> 2] = tempRet0; //@line 24395
 $99 = HEAP32[$2 >> 2] | 0; //@line 24396
 $100 = $99 + 48 | 0; //@line 24397
 $101 = $100; //@line 24398
 $102 = $101; //@line 24399
 $103 = HEAP32[$102 >> 2] | 0; //@line 24400
 $104 = $101 + 4 | 0; //@line 24401
 $105 = $104; //@line 24402
 $106 = HEAP32[$105 >> 2] | 0; //@line 24403
 $107 = ___async_retval; //@line 24404
 $108 = $107; //@line 24405
 $109 = $108; //@line 24406
 HEAP32[$109 >> 2] = $103; //@line 24407
 $110 = $108 + 4 | 0; //@line 24408
 $111 = $110; //@line 24409
 HEAP32[$111 >> 2] = $106; //@line 24410
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31765
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31767
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31769
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31771
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31773
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31775
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31777
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31781
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31783
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31785
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 31787
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 31789
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 31793
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 31795
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 31797
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 31799
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 31801
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 31803
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 31805
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 31807
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 31809
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 31811
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 31815
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 31817
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 31819
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 31821
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 31823
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 31825
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 31827
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 31831
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 31833
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 31835
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 31837
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 31839
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 31841
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 31843
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31845
 if (!$AsyncRetVal) {
  _memcpy(HEAP32[$0 + 32 >> 2] | 0, $4 | 0, HEAP32[$0 + 56 >> 2] | 0) | 0; //@line 31848
 }
 HEAP8[$2 >> 0] = 0; //@line 31850
 HEAP8[$32 >> 0] = 0; //@line 31851
 HEAP8[$44 >> 0] = 0; //@line 31852
 HEAP8[$68 >> 0] = 0; //@line 31853
 HEAP8[$30 >> 0] = 0; //@line 31854
 HEAP8[$46 >> 0] = 0; //@line 31855
 HEAP8[$80 >> 0] = 0; //@line 31856
 HEAP8[$10 >> 0] = 0; //@line 31857
 HEAP8[$48 >> 0] = 0; //@line 31858
 HEAP8[$70 >> 0] = 0; //@line 31859
 HEAP8[$12 >> 0] = 0; //@line 31860
 HEAP8[$40 >> 0] = 0; //@line 31861
 HEAP8[$18 >> 0] = 0; //@line 31862
 HEAP8[$74 >> 0] = 0; //@line 31863
 HEAP8[$42 >> 0] = 0; //@line 31864
 HEAP8[$26 >> 0] = 0; //@line 31865
 HEAP8[$22 >> 0] = 0; //@line 31866
 HEAP8[$14 >> 0] = 0; //@line 31867
 HEAP8[$76 >> 0] = 0; //@line 31868
 HEAP8[$24 >> 0] = 0; //@line 31869
 HEAP8[$6 >> 0] = 0; //@line 31870
 HEAP8[$78 >> 0] = 0; //@line 31871
 HEAP8[$58 >> 0] = 0; //@line 31872
 HEAP8[$38 >> 0] = 0; //@line 31873
 HEAP8[$54 >> 0] = 0; //@line 31874
 HEAP8[$60 >> 0] = 0; //@line 31875
 HEAP8[$8 >> 0] = 0; //@line 31876
 HEAP8[$56 >> 0] = 0; //@line 31877
 HEAP8[$62 >> 0] = 0; //@line 31878
 HEAP8[$20 >> 0] = 0; //@line 31879
 HEAP8[$34 >> 0] = 0; //@line 31880
 HEAP8[$64 >> 0] = 0; //@line 31881
 HEAP32[$36 >> 2] = 0; //@line 31882
 HEAP8[$52 >> 0] = 0; //@line 31884
 HEAP8[$72 + 17 >> 0] = 0; //@line 31886
 HEAP8[$72 + 18 >> 0] = 0; //@line 31888
 HEAP8[$72 + 19 >> 0] = 0; //@line 31890
 HEAP8[$72 + 20 >> 0] = 0; //@line 31892
 HEAP8[$72 + 21 >> 0] = 0; //@line 31894
 HEAP8[$72 + 22 >> 0] = 0; //@line 31896
 HEAP8[$72 + 23 >> 0] = 0; //@line 31898
 HEAP8[$72 + 24 >> 0] = 0; //@line 31900
 HEAP8[$72 + 25 >> 0] = 0; //@line 31902
 HEAP8[$72 + 26 >> 0] = 0; //@line 31904
 HEAP8[$72 + 27 >> 0] = 0; //@line 31906
 HEAP8[$72 + 28 >> 0] = 0; //@line 31908
 HEAP8[$72 + 29 >> 0] = 0; //@line 31910
 HEAP8[$72 + 30 >> 0] = 0; //@line 31912
 HEAP8[$72 + 31 >> 0] = 0; //@line 31913
 HEAP8[$4 >> 0] = 0; //@line 31915
 HEAP8[$72 + 1 >> 0] = 0; //@line 31917
 HEAP8[$72 + 2 >> 0] = 0; //@line 31919
 HEAP8[$72 + 3 >> 0] = 0; //@line 31921
 HEAP8[$72 + 4 >> 0] = 0; //@line 31923
 HEAP8[$72 + 5 >> 0] = 0; //@line 31925
 HEAP8[$72 + 6 >> 0] = 0; //@line 31927
 HEAP8[$72 + 7 >> 0] = 0; //@line 31929
 HEAP8[$72 + 8 >> 0] = 0; //@line 31931
 HEAP8[$72 + 9 >> 0] = 0; //@line 31933
 HEAP8[$72 + 10 >> 0] = 0; //@line 31935
 HEAP8[$72 + 11 >> 0] = 0; //@line 31937
 HEAP8[$72 + 12 >> 0] = 0; //@line 31939
 HEAP8[$72 + 13 >> 0] = 0; //@line 31941
 HEAP8[$72 + 14 >> 0] = 0; //@line 31943
 HEAP8[$72 + 15 >> 0] = 0; //@line 31944
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 31946
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $29 = 0, $3 = 0, $32 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 7522
 STACKTOP = STACKTOP + 32 | 0; //@line 7523
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 7523
 $2 = sp + 8 | 0; //@line 7525
 $3 = $0 + 2480 | 0; //@line 7526
 switch (HEAP32[$3 >> 2] | 0) {
 case 3:
  {
   HEAP32[$3 >> 2] = 1; //@line 7530
   _mbed_tracef(16, 12506, 12635, sp); //@line 7531
   $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7532
   $5 = __ZN7LoRaMac4joinEb($0, 1) | 0; //@line 7533
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 233; //@line 7536
    HEAP32[$AsyncCtx10 + 4 >> 2] = $1; //@line 7538
    sp = STACKTOP; //@line 7539
    STACKTOP = sp; //@line 7540
    return;
   }
   _emscripten_free_async_context($AsyncCtx10 | 0); //@line 7542
   HEAP32[$1 >> 2] = $5; //@line 7543
   STACKTOP = sp; //@line 7544
   return;
  }
 case 4:
  {
   HEAP32[$3 >> 2] = 1; //@line 7548
   $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7549
   $7 = __ZN7LoRaMac24continue_joining_processEv($0) | 0; //@line 7550
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 234; //@line 7553
    HEAP32[$AsyncCtx6 + 4 >> 2] = $2; //@line 7555
    HEAP32[$AsyncCtx6 + 8 >> 2] = $0; //@line 7557
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 7559
    sp = STACKTOP; //@line 7560
    STACKTOP = sp; //@line 7561
    return;
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 7563
   if ($7) {
    STACKTOP = sp; //@line 7565
    return;
   }
   $11 = $0 + 2496 | 0; //@line 7567
   $12 = HEAP32[$11 >> 2] | 0; //@line 7568
   do {
    if ($12 | 0) {
     $16 = HEAP32[$0 + 3136 >> 2] | 0; //@line 7574
     $18 = HEAP32[$12 + 4 >> 2] | 0; //@line 7576
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 7577
     FUNCTION_TABLE_vii[$18 & 15]($2, $0 + 2484 | 0); //@line 7578
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 235; //@line 7581
      HEAP32[$AsyncCtx + 4 >> 2] = $11; //@line 7583
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 7585
      HEAP32[$AsyncCtx + 12 >> 2] = $16; //@line 7587
      HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 7589
      HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 7591
      sp = STACKTOP; //@line 7592
      STACKTOP = sp; //@line 7593
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 7595
     $24 = $2 + 12 | 0; //@line 7597
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2]; //@line 7598
     $AsyncCtx13 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7599
     $25 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($16, $2, 10) | 0; //@line 7600
     if (___async) {
      HEAP32[$AsyncCtx13 >> 2] = 236; //@line 7603
      HEAP32[$AsyncCtx13 + 4 >> 2] = $24; //@line 7605
      HEAP32[$AsyncCtx13 + 8 >> 2] = $2; //@line 7607
      HEAP32[$AsyncCtx13 + 12 >> 2] = $3; //@line 7609
      sp = STACKTOP; //@line 7610
      STACKTOP = sp; //@line 7611
      return;
     }
     _emscripten_free_async_context($AsyncCtx13 | 0); //@line 7613
     $29 = HEAP32[$24 >> 2] | 0; //@line 7614
     do {
      if ($29 | 0) {
       $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 7619
       $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7620
       FUNCTION_TABLE_vi[$32 & 1023]($2); //@line 7621
       if (___async) {
        HEAP32[$AsyncCtx2 >> 2] = 237; //@line 7624
        HEAP32[$AsyncCtx2 + 4 >> 2] = $25; //@line 7626
        HEAP32[$AsyncCtx2 + 8 >> 2] = $2; //@line 7628
        HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 7630
        sp = STACKTOP; //@line 7631
        STACKTOP = sp; //@line 7632
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7634
        break;
       }
      }
     } while (0);
     if (!$25) {
      $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7641
      _mbed_assert_internal(13121, 12408, 646); //@line 7642
      if (___async) {
       HEAP32[$AsyncCtx17 >> 2] = 238; //@line 7645
       HEAP32[$AsyncCtx17 + 4 >> 2] = $2; //@line 7647
       HEAP32[$AsyncCtx17 + 8 >> 2] = $3; //@line 7649
       sp = STACKTOP; //@line 7650
       STACKTOP = sp; //@line 7651
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx17 | 0); //@line 7653
       break;
      }
     }
    }
   } while (0);
   HEAP32[$3 >> 2] = 2; //@line 7659
   STACKTOP = sp; //@line 7660
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 7664
   return;
  }
 }
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $15 = 0, $17 = 0, $23 = 0, $26 = 0, $29 = 0, $30 = 0, $33 = 0, $36 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 9577
 STACKTOP = STACKTOP + 32 | 0; //@line 9578
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9578
 $vararg_buffer = sp; //@line 9579
 $1 = sp + 8 | 0; //@line 9580
 $5 = (HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 4 >> 2] | 0) == 1; //@line 9584
 $6 = __ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0; //@line 9585
 if (!$5) {
  if (HEAP32[$6 + 4 >> 2] | 0) {
   STACKTOP = sp; //@line 9591
   return;
  }
  if (!(HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 8 >> 2] | 0)) {
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9598
   __ZN12LoRaWANStack23process_connected_stateEv($0); //@line 9599
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 312; //@line 9602
    sp = STACKTOP; //@line 9603
    STACKTOP = sp; //@line 9604
    return;
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 9606
   STACKTOP = sp; //@line 9607
   return;
  } else {
   HEAP32[$vararg_buffer >> 2] = HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 8 >> 2]; //@line 9612
   _mbed_tracef(2, 12506, 12772, $vararg_buffer); //@line 9613
   HEAP32[$0 + 2480 >> 2] = 4; //@line 9615
   HEAP32[$vararg_buffer >> 2] = 0; //@line 9616
   $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9617
   __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $vararg_buffer); //@line 9618
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 313; //@line 9621
    HEAP32[$AsyncCtx13 + 4 >> 2] = $vararg_buffer; //@line 9623
    sp = STACKTOP; //@line 9624
    STACKTOP = sp; //@line 9625
    return;
   }
   _emscripten_free_async_context($AsyncCtx13 | 0); //@line 9627
   STACKTOP = sp; //@line 9628
   return;
  }
 }
 if (HEAP32[$6 + 8 >> 2] | 0) {
  STACKTOP = sp; //@line 9635
  return;
 }
 $10 = $0 + 2512 | 0; //@line 9637
 $11 = HEAP32[$10 >> 2] | 0; //@line 9638
 if (!$11) {
  STACKTOP = sp; //@line 9641
  return;
 }
 $15 = HEAP32[$0 + 3136 >> 2] | 0; //@line 9645
 $17 = HEAP32[$11 + 4 >> 2] | 0; //@line 9647
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 9648
 FUNCTION_TABLE_vii[$17 & 15]($1, $0 + 2500 | 0); //@line 9649
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 308; //@line 9652
  HEAP32[$AsyncCtx + 4 >> 2] = $10; //@line 9654
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9656
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 9658
  HEAP32[$AsyncCtx + 16 >> 2] = $15; //@line 9660
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 9662
  sp = STACKTOP; //@line 9663
  STACKTOP = sp; //@line 9664
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9666
 $23 = $1 + 12 | 0; //@line 9668
 HEAP32[$23 >> 2] = HEAP32[$10 >> 2]; //@line 9669
 $26 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 16 >> 0] | 0; //@line 9672
 $29 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 17 >> 0] | 0; //@line 9675
 $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9676
 $30 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($15, $1, $26, $29) | 0; //@line 9677
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 309; //@line 9680
  HEAP32[$AsyncCtx9 + 4 >> 2] = $23; //@line 9682
  HEAP32[$AsyncCtx9 + 8 >> 2] = $1; //@line 9684
  sp = STACKTOP; //@line 9685
  STACKTOP = sp; //@line 9686
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 9688
 $33 = HEAP32[$23 >> 2] | 0; //@line 9689
 do {
  if ($33 | 0) {
   $36 = HEAP32[$33 + 8 >> 2] | 0; //@line 9694
   $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9695
   FUNCTION_TABLE_vi[$36 & 1023]($1); //@line 9696
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 310; //@line 9699
    HEAP32[$AsyncCtx2 + 4 >> 2] = $30; //@line 9701
    sp = STACKTOP; //@line 9702
    STACKTOP = sp; //@line 9703
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9705
    break;
   }
  }
 } while (0);
 if ($30 | 0) {
  STACKTOP = sp; //@line 9712
  return;
 }
 $AsyncCtx17 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9714
 _mbed_assert_internal(13121, 12408, 751); //@line 9715
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 311; //@line 9718
  sp = STACKTOP; //@line 9719
  STACKTOP = sp; //@line 9720
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 9722
 STACKTOP = sp; //@line 9723
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_106($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25602
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25604
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25606
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25608
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25610
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25612
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25614
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25616
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25620
 $19 = HEAP32[HEAP32[$0 + 32 >> 2] >> 2] | 0; //@line 25621
 if (!$19) {
  $31 = $14 + 12 | 0; //@line 25625
  HEAP32[$14 >> 2] = 468; //@line 25626
  HEAP32[$14 + 4 >> 2] = 0; //@line 25628
  HEAP32[$14 + 8 >> 2] = $2; //@line 25630
  HEAP32[$31 >> 2] = 844; //@line 25631
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 25632
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1816 | 0, $14); //@line 25633
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 469; //@line 25636
   $32 = $ReallocAsyncCtx7 + 4 | 0; //@line 25637
   HEAP32[$32 >> 2] = $2; //@line 25638
   $33 = $ReallocAsyncCtx7 + 8 | 0; //@line 25639
   HEAP32[$33 >> 2] = $4; //@line 25640
   $34 = $ReallocAsyncCtx7 + 12 | 0; //@line 25641
   HEAP32[$34 >> 2] = $6; //@line 25642
   $35 = $ReallocAsyncCtx7 + 16 | 0; //@line 25643
   HEAP32[$35 >> 2] = $8; //@line 25644
   $36 = $ReallocAsyncCtx7 + 20 | 0; //@line 25645
   HEAP32[$36 >> 2] = $10; //@line 25646
   $37 = $ReallocAsyncCtx7 + 24 | 0; //@line 25647
   HEAP32[$37 >> 2] = $12; //@line 25648
   $38 = $ReallocAsyncCtx7 + 28 | 0; //@line 25649
   HEAP32[$38 >> 2] = $14; //@line 25650
   $39 = $ReallocAsyncCtx7 + 32 | 0; //@line 25651
   HEAP32[$39 >> 2] = $31; //@line 25652
   sp = STACKTOP; //@line 25653
   return;
  }
  ___async_unwind = 0; //@line 25656
  HEAP32[$ReallocAsyncCtx7 >> 2] = 469; //@line 25657
  $32 = $ReallocAsyncCtx7 + 4 | 0; //@line 25658
  HEAP32[$32 >> 2] = $2; //@line 25659
  $33 = $ReallocAsyncCtx7 + 8 | 0; //@line 25660
  HEAP32[$33 >> 2] = $4; //@line 25661
  $34 = $ReallocAsyncCtx7 + 12 | 0; //@line 25662
  HEAP32[$34 >> 2] = $6; //@line 25663
  $35 = $ReallocAsyncCtx7 + 16 | 0; //@line 25664
  HEAP32[$35 >> 2] = $8; //@line 25665
  $36 = $ReallocAsyncCtx7 + 20 | 0; //@line 25666
  HEAP32[$36 >> 2] = $10; //@line 25667
  $37 = $ReallocAsyncCtx7 + 24 | 0; //@line 25668
  HEAP32[$37 >> 2] = $12; //@line 25669
  $38 = $ReallocAsyncCtx7 + 28 | 0; //@line 25670
  HEAP32[$38 >> 2] = $14; //@line 25671
  $39 = $ReallocAsyncCtx7 + 32 | 0; //@line 25672
  HEAP32[$39 >> 2] = $31; //@line 25673
  sp = STACKTOP; //@line 25674
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 25678
  $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 25679
  FUNCTION_TABLE_vi[$22 & 1023]($18); //@line 25680
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 467; //@line 25683
   $23 = $ReallocAsyncCtx + 4 | 0; //@line 25684
   HEAP32[$23 >> 2] = $2; //@line 25685
   $24 = $ReallocAsyncCtx + 8 | 0; //@line 25686
   HEAP32[$24 >> 2] = $14; //@line 25687
   $25 = $ReallocAsyncCtx + 12 | 0; //@line 25688
   HEAP32[$25 >> 2] = $6; //@line 25689
   $26 = $ReallocAsyncCtx + 16 | 0; //@line 25690
   HEAP32[$26 >> 2] = $4; //@line 25691
   $27 = $ReallocAsyncCtx + 20 | 0; //@line 25692
   HEAP32[$27 >> 2] = $8; //@line 25693
   $28 = $ReallocAsyncCtx + 24 | 0; //@line 25694
   HEAP32[$28 >> 2] = $10; //@line 25695
   $29 = $ReallocAsyncCtx + 28 | 0; //@line 25696
   HEAP32[$29 >> 2] = $12; //@line 25697
   sp = STACKTOP; //@line 25698
   return;
  }
  ___async_unwind = 0; //@line 25701
  HEAP32[$ReallocAsyncCtx >> 2] = 467; //@line 25702
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 25703
  HEAP32[$23 >> 2] = $2; //@line 25704
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 25705
  HEAP32[$24 >> 2] = $14; //@line 25706
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 25707
  HEAP32[$25 >> 2] = $6; //@line 25708
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 25709
  HEAP32[$26 >> 2] = $4; //@line 25710
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 25711
  HEAP32[$27 >> 2] = $8; //@line 25712
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 25713
  HEAP32[$28 >> 2] = $10; //@line 25714
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 25715
  HEAP32[$29 >> 2] = $12; //@line 25716
  sp = STACKTOP; //@line 25717
  return;
 }
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $35 = 0, $38 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 10507
 STACKTOP = STACKTOP + 32 | 0; //@line 10508
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10508
 $2 = sp + 8 | 0; //@line 10510
 $3 = $0 + 2480 | 0; //@line 10511
 do {
  if (!(HEAP32[$3 >> 2] | 0)) {
   _mbed_tracef(2, 12506, 12856, sp); //@line 10516
   $$pre$phiZ2D = $0; //@line 10517
  } else {
   $AsyncCtx9 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10519
   __ZN7LoRaMac19remove_channel_planEv($0) | 0; //@line 10520
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 341; //@line 10523
    HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 10525
    HEAP32[$AsyncCtx9 + 8 >> 2] = $3; //@line 10527
    HEAP32[$AsyncCtx9 + 12 >> 2] = $1; //@line 10529
    HEAP32[$AsyncCtx9 + 16 >> 2] = $2; //@line 10531
    HEAP32[$AsyncCtx9 + 20 >> 2] = $0; //@line 10533
    sp = STACKTOP; //@line 10534
    STACKTOP = sp; //@line 10535
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 10537
    $$pre$phiZ2D = $0; //@line 10538
    break;
   }
  }
 } while (0);
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10543
 __ZN7LoRaMac10disconnectEv($$pre$phiZ2D); //@line 10544
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 342; //@line 10547
  HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 10549
  HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 10551
  HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 10553
  HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 10555
  sp = STACKTOP; //@line 10556
  STACKTOP = sp; //@line 10557
  return;
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10559
 HEAP8[$0 + 2532 >> 0] = 0; //@line 10561
 HEAP32[$3 >> 2] = 11; //@line 10562
 HEAP32[$1 >> 2] = -1011; //@line 10563
 $16 = $0 + 2872 | 0; //@line 10564
 HEAP32[$16 >> 2] = HEAP32[$16 >> 2] & -5; //@line 10567
 $19 = $0 + 2496 | 0; //@line 10568
 $20 = HEAP32[$19 >> 2] | 0; //@line 10569
 if (!$20) {
  STACKTOP = sp; //@line 10572
  return;
 }
 $24 = HEAP32[$0 + 3136 >> 2] | 0; //@line 10576
 $26 = HEAP32[$20 + 4 >> 2] | 0; //@line 10578
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10579
 FUNCTION_TABLE_vii[$26 & 15]($2, $0 + 2484 | 0); //@line 10580
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 343; //@line 10583
  HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 10585
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 10587
  HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 10589
  HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 10591
  sp = STACKTOP; //@line 10592
  STACKTOP = sp; //@line 10593
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10595
 $31 = $2 + 12 | 0; //@line 10597
 HEAP32[$31 >> 2] = HEAP32[$19 >> 2]; //@line 10598
 $AsyncCtx12 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10599
 $32 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($24, $2, 1) | 0; //@line 10600
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 344; //@line 10603
  HEAP32[$AsyncCtx12 + 4 >> 2] = $31; //@line 10605
  HEAP32[$AsyncCtx12 + 8 >> 2] = $2; //@line 10607
  sp = STACKTOP; //@line 10608
  STACKTOP = sp; //@line 10609
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 10611
 $35 = HEAP32[$31 >> 2] | 0; //@line 10612
 do {
  if ($35 | 0) {
   $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 10617
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10618
   FUNCTION_TABLE_vi[$38 & 1023]($2); //@line 10619
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 345; //@line 10622
    HEAP32[$AsyncCtx2 + 4 >> 2] = $32; //@line 10624
    HEAP32[$AsyncCtx2 + 8 >> 2] = $2; //@line 10626
    sp = STACKTOP; //@line 10627
    STACKTOP = sp; //@line 10628
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10630
    break;
   }
  }
 } while (0);
 if ($32 | 0) {
  STACKTOP = sp; //@line 10637
  return;
 }
 $AsyncCtx16 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10639
 _mbed_assert_internal(13121, 12408, 646); //@line 10640
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 346; //@line 10643
  HEAP32[$AsyncCtx16 + 4 >> 2] = $2; //@line 10645
  sp = STACKTOP; //@line 10646
  STACKTOP = sp; //@line 10647
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 10649
 STACKTOP = sp; //@line 10650
 return;
}
function _equeue_cancel($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $$sink$in$in$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $24 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $42 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $56 = 0, $57 = 0, $59 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3771
 if (!$1) {
  return;
 }
 $5 = $0 + 16 | 0; //@line 3778
 $10 = (HEAP32[$0 + 12 >> 2] | 0) + ((1 << HEAP32[$5 >> 2]) + -1 & $1) | 0; //@line 3783
 $11 = $0 + 128 | 0; //@line 3784
 _equeue_mutex_lock($11); //@line 3785
 $12 = $10 + 4 | 0; //@line 3786
 $13 = HEAP8[$12 >> 0] | 0; //@line 3787
 $14 = $13 & 255; //@line 3788
 $15 = HEAP32[$5 >> 2] | 0; //@line 3789
 if (($1 >> $15 | 0) != ($14 | 0)) {
  _equeue_mutex_unlock($11); //@line 3793
  return;
 }
 HEAP32[$10 + 32 >> 2] = 0; //@line 3797
 HEAP32[$10 + 24 >> 2] = -1; //@line 3799
 $24 = (HEAP32[$10 + 20 >> 2] | 0) - (HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 3804
 do {
  if (($24 | 0) >= 0) {
   if (!$24) {
    if ((HEAP8[$10 + 5 >> 0] | 0) != (HEAP8[$0 + 9 >> 0] | 0)) {
     break;
    }
   }
   $32 = $10 + 12 | 0; //@line 3819
   $33 = HEAP32[$32 >> 2] | 0; //@line 3820
   $35 = $10 + 8 | 0; //@line 3822
   $36 = HEAP32[$35 >> 2] | 0; //@line 3823
   $37 = $33; //@line 3824
   if (!$33) {
    $44 = $10 + 16 | 0; //@line 3826
    HEAP32[HEAP32[$44 >> 2] >> 2] = $36; //@line 3828
    $46 = HEAP32[$35 >> 2] | 0; //@line 3829
    if ($46 | 0) {
     $$sink$in$in$i = $44; //@line 3832
     $49 = $46; //@line 3832
     label = 13; //@line 3833
    }
   } else {
    $38 = $33 + 8 | 0; //@line 3836
    HEAP32[$38 >> 2] = $36; //@line 3837
    if ($36 | 0) {
     HEAP32[$36 + 16 >> 2] = $38; //@line 3842
    }
    $42 = $10 + 16 | 0; //@line 3844
    HEAP32[HEAP32[$42 >> 2] >> 2] = $37; //@line 3846
    $$sink$in$in$i = $42; //@line 3848
    $49 = HEAP32[$32 >> 2] | 0; //@line 3848
    label = 13; //@line 3849
   }
   if ((label | 0) == 13) {
    HEAP32[$49 + 16 >> 2] = HEAP32[$$sink$in$in$i >> 2]; //@line 3854
   }
   HEAP8[$12 >> 0] = (($13 + 1 & 255) << $15 | 0) == 0 ? 1 : $14 + 1 & 255; //@line 3863
   _equeue_mutex_unlock($11); //@line 3864
   $56 = $10 + 36 | 0; //@line 3865
   $57 = $56 + -36 | 0; //@line 3866
   $59 = HEAP32[$56 + -8 >> 2] | 0; //@line 3868
   do {
    if ($59 | 0) {
     $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 3872
     FUNCTION_TABLE_vi[$59 & 1023]($56); //@line 3873
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 133; //@line 3876
      HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3878
      HEAP32[$AsyncCtx + 8 >> 2] = $56; //@line 3880
      HEAP32[$AsyncCtx + 12 >> 2] = $57; //@line 3882
      sp = STACKTOP; //@line 3883
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 3886
      break;
     }
    }
   } while (0);
   $64 = $0 + 156 | 0; //@line 3891
   _equeue_mutex_lock($64); //@line 3892
   $65 = $0 + 24 | 0; //@line 3893
   $66 = HEAP32[$65 >> 2] | 0; //@line 3894
   L28 : do {
    if (!$66) {
     $$02329$i$i = $65; //@line 3898
     label = 24; //@line 3899
    } else {
     $68 = HEAP32[$57 >> 2] | 0; //@line 3901
     $$025$i$i = $65; //@line 3902
     $70 = $66; //@line 3902
     while (1) {
      $69 = HEAP32[$70 >> 2] | 0; //@line 3904
      if ($69 >>> 0 >= $68 >>> 0) {
       break;
      }
      $72 = $70 + 8 | 0; //@line 3909
      $73 = HEAP32[$72 >> 2] | 0; //@line 3910
      if (!$73) {
       $$02329$i$i = $72; //@line 3913
       label = 24; //@line 3914
       break L28;
      } else {
       $$025$i$i = $72; //@line 3917
       $70 = $73; //@line 3917
      }
     }
     if (($69 | 0) == ($68 | 0)) {
      HEAP32[$56 + -24 >> 2] = $70; //@line 3923
      $$02330$i$i = $$025$i$i; //@line 3926
      $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 3926
     } else {
      $$02329$i$i = $$025$i$i; //@line 3928
      label = 24; //@line 3929
     }
    }
   } while (0);
   if ((label | 0) == 24) {
    HEAP32[$56 + -24 >> 2] = 0; //@line 3935
    $$02330$i$i = $$02329$i$i; //@line 3936
    $$sink$in$i$i = $$02329$i$i; //@line 3936
   }
   HEAP32[$56 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 3940
   HEAP32[$$02330$i$i >> 2] = $57; //@line 3941
   _equeue_mutex_unlock($64); //@line 3942
   return;
  }
 } while (0);
 _equeue_mutex_unlock($11); //@line 3946
 return;
}
function _gcm_mult($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07475 = 0, $100 = 0, $101 = 0, $103 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $120 = 0, $126 = 0, $130 = 0, $134 = 0, $140 = 0, $144 = 0, $148 = 0, $15 = 0, $154 = 0, $158 = 0, $162 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $46 = 0, $51 = 0, $6 = 0, $60 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $88 = 0, $92 = 0, $94 = 0;
 $4 = HEAP8[$1 + 15 >> 0] | 0; //@line 4809
 $6 = $4 & 15; //@line 4811
 $8 = $0 + 200 + ($6 << 3) | 0; //@line 4813
 $15 = $0 + 72 + ($6 << 3) | 0; //@line 4820
 $$07475 = 15; //@line 4826
 $22 = $4; //@line 4826
 $27 = HEAP32[$15 >> 2] | 0; //@line 4826
 $28 = HEAP32[$8 >> 2] | 0; //@line 4826
 $29 = HEAP32[$8 + 4 >> 2] | 0; //@line 4826
 $32 = HEAP32[$15 + 4 >> 2] | 0; //@line 4826
 while (1) {
  if (($$07475 | 0) == 15) {
   $69 = $27; //@line 4831
   $70 = $28; //@line 4831
   $71 = $29; //@line 4831
   $74 = $32; //@line 4831
  } else {
   $25 = $22 & 15; //@line 4834
   $30 = _bitshift64Shl($28 | 0, $29 | 0, 60) | 0; //@line 4836
   $31 = tempRet0; //@line 4837
   $33 = _bitshift64Lshr($27 | 0, $32 | 0, 4) | 0; //@line 4838
   $36 = tempRet0 | $31; //@line 4841
   $37 = _bitshift64Lshr($28 | 0, $29 | 0, 4) | 0; //@line 4842
   $38 = tempRet0; //@line 4843
   $40 = 208 + (($27 & 15) << 3) | 0; //@line 4845
   $46 = _bitshift64Shl(HEAP32[$40 >> 2] | 0, HEAP32[$40 + 4 >> 2] | 0, 48) | 0; //@line 4851
   $51 = $0 + 200 + ($25 << 3) | 0; //@line 4856
   $60 = $0 + 72 + ($25 << 3) | 0; //@line 4865
   $69 = HEAP32[$60 >> 2] ^ ($33 | $30); //@line 4873
   $70 = $46 ^ $37 ^ HEAP32[$51 >> 2]; //@line 4873
   $71 = tempRet0 ^ $38 ^ HEAP32[$51 + 4 >> 2]; //@line 4873
   $74 = HEAP32[$60 + 4 >> 2] ^ $36; //@line 4873
  }
  $72 = _bitshift64Shl($70 | 0, $71 | 0, 60) | 0; //@line 4876
  $73 = tempRet0; //@line 4877
  $75 = _bitshift64Lshr($69 | 0, $74 | 0, 4) | 0; //@line 4878
  $78 = tempRet0 | $73; //@line 4881
  $79 = _bitshift64Lshr($70 | 0, $71 | 0, 4) | 0; //@line 4882
  $80 = tempRet0; //@line 4883
  $82 = 208 + (($69 & 15) << 3) | 0; //@line 4885
  $88 = _bitshift64Shl(HEAP32[$82 >> 2] | 0, HEAP32[$82 + 4 >> 2] | 0, 48) | 0; //@line 4891
  $92 = ($22 & 255) >>> 4 & 255; //@line 4895
  $94 = $0 + 200 + ($92 << 3) | 0; //@line 4897
  $100 = $88 ^ $79 ^ HEAP32[$94 >> 2]; //@line 4903
  $101 = tempRet0 ^ $80 ^ HEAP32[$94 + 4 >> 2]; //@line 4904
  $103 = $0 + 72 + ($92 << 3) | 0; //@line 4906
  $109 = HEAP32[$103 >> 2] ^ ($75 | $72); //@line 4912
  $110 = HEAP32[$103 + 4 >> 2] ^ $78; //@line 4913
  $111 = $$07475 + -1 | 0; //@line 4914
  if (($$07475 | 0) <= 0) {
   break;
  }
  $$07475 = $111; //@line 4921
  $22 = HEAP8[$1 + $111 >> 0] | 0; //@line 4921
  $27 = $109; //@line 4921
  $28 = $100; //@line 4921
  $29 = $101; //@line 4921
  $32 = $110; //@line 4921
 }
 $113 = _bitshift64Lshr($100 | 0, $101 | 0, 56) | 0; //@line 4923
 HEAP8[$2 >> 0] = $113; //@line 4926
 $116 = _bitshift64Lshr($100 | 0, $101 | 0, 48) | 0; //@line 4927
 HEAP8[$2 + 1 >> 0] = $116; //@line 4931
 $120 = _bitshift64Lshr($100 | 0, $101 | 0, 40) | 0; //@line 4932
 HEAP8[$2 + 2 >> 0] = $120; //@line 4936
 HEAP8[$2 + 3 >> 0] = $101; //@line 4939
 $126 = _bitshift64Lshr($100 | 0, $101 | 0, 24) | 0; //@line 4940
 HEAP8[$2 + 4 >> 0] = $126; //@line 4944
 $130 = _bitshift64Lshr($100 | 0, $101 | 0, 16) | 0; //@line 4945
 HEAP8[$2 + 5 >> 0] = $130; //@line 4949
 $134 = _bitshift64Lshr($100 | 0, $101 | 0, 8) | 0; //@line 4950
 HEAP8[$2 + 6 >> 0] = $134; //@line 4954
 HEAP8[$2 + 7 >> 0] = $100; //@line 4957
 $140 = _bitshift64Lshr($109 | 0, $110 | 0, 56) | 0; //@line 4958
 HEAP8[$2 + 8 >> 0] = $140; //@line 4962
 $144 = _bitshift64Lshr($109 | 0, $110 | 0, 48) | 0; //@line 4963
 HEAP8[$2 + 9 >> 0] = $144; //@line 4967
 $148 = _bitshift64Lshr($109 | 0, $110 | 0, 40) | 0; //@line 4968
 HEAP8[$2 + 10 >> 0] = $148; //@line 4972
 HEAP8[$2 + 11 >> 0] = $110; //@line 4975
 $154 = _bitshift64Lshr($109 | 0, $110 | 0, 24) | 0; //@line 4976
 HEAP8[$2 + 12 >> 0] = $154; //@line 4980
 $158 = _bitshift64Lshr($109 | 0, $110 | 0, 16) | 0; //@line 4981
 HEAP8[$2 + 13 >> 0] = $158; //@line 4985
 $162 = _bitshift64Lshr($109 | 0, $110 | 0, 8) | 0; //@line 4986
 HEAP8[$2 + 14 >> 0] = $162; //@line 4990
 HEAP8[$2 + 15 >> 0] = $109; //@line 4993
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 23705
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23707
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23711
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 23713
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 23715
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 23717
 $$pre$i = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 23718
 $13 = $6 + 12 | 0; //@line 23719
 HEAP32[$13 >> 2] = $$pre$i; //@line 23720
 if (!$$pre$i) {
  $24 = $2 + 12 | 0; //@line 23723
  HEAP32[$24 >> 2] = 0; //@line 23724
  $25 = $2 + 16 | 0; //@line 23725
  HEAP8[$25 >> 0] = $8; //@line 23726
  HEAP8[$2 + 17 >> 0] = $10; //@line 23728
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 23729
  $27 = _equeue_alloc($12, 20) | 0; //@line 23730
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 320; //@line 23733
   $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 23734
   HEAP32[$28 >> 2] = $25; //@line 23735
   $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 23736
   HEAP32[$29 >> 2] = $12; //@line 23737
   $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 23738
   HEAP32[$30 >> 2] = $2; //@line 23739
   $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 23740
   HEAP32[$31 >> 2] = $24; //@line 23741
   $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 23742
   HEAP32[$32 >> 2] = $13; //@line 23743
   $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 23744
   HEAP32[$33 >> 2] = $24; //@line 23745
   $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 23746
   HEAP32[$34 >> 2] = $6; //@line 23747
   sp = STACKTOP; //@line 23748
   return;
  }
  HEAP32[___async_retval >> 2] = $27; //@line 23752
  ___async_unwind = 0; //@line 23753
  HEAP32[$ReallocAsyncCtx7 >> 2] = 320; //@line 23754
  $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 23755
  HEAP32[$28 >> 2] = $25; //@line 23756
  $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 23757
  HEAP32[$29 >> 2] = $12; //@line 23758
  $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 23759
  HEAP32[$30 >> 2] = $2; //@line 23760
  $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 23761
  HEAP32[$31 >> 2] = $24; //@line 23762
  $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 23763
  HEAP32[$32 >> 2] = $13; //@line 23764
  $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 23765
  HEAP32[$33 >> 2] = $24; //@line 23766
  $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 23767
  HEAP32[$34 >> 2] = $6; //@line 23768
  sp = STACKTOP; //@line 23769
  return;
 } else {
  $16 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 23774
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 23775
  FUNCTION_TABLE_vii[$16 & 15]($2, $6); //@line 23776
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 319; //@line 23779
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 23780
   HEAP32[$17 >> 2] = $2; //@line 23781
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 23782
   HEAP32[$18 >> 2] = $13; //@line 23783
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 23784
   HEAP32[$19 >> 2] = $13; //@line 23785
   $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 23786
   HEAP8[$20 >> 0] = $8; //@line 23787
   $21 = $ReallocAsyncCtx2 + 17 | 0; //@line 23788
   HEAP8[$21 >> 0] = $10; //@line 23789
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 23790
   HEAP32[$22 >> 2] = $12; //@line 23791
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 23792
   HEAP32[$23 >> 2] = $6; //@line 23793
   sp = STACKTOP; //@line 23794
   return;
  }
  ___async_unwind = 0; //@line 23797
  HEAP32[$ReallocAsyncCtx2 >> 2] = 319; //@line 23798
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 23799
  HEAP32[$17 >> 2] = $2; //@line 23800
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 23801
  HEAP32[$18 >> 2] = $13; //@line 23802
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 23803
  HEAP32[$19 >> 2] = $13; //@line 23804
  $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 23805
  HEAP8[$20 >> 0] = $8; //@line 23806
  $21 = $ReallocAsyncCtx2 + 17 | 0; //@line 23807
  HEAP8[$21 >> 0] = $10; //@line 23808
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 23809
  HEAP32[$22 >> 2] = $12; //@line 23810
  $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 23811
  HEAP32[$23 >> 2] = $6; //@line 23812
  sp = STACKTOP; //@line 23813
  return;
 }
}
function __ZN12LoRaWANStack9handle_rxEPhtRhRib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$0$off0 = 0, $$031 = 0, $$1 = 0, $$pre$phi39Z2D = 0, $13 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $40 = 0, $43 = 0, $44 = 0, $48 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11465
 STACKTOP = STACKTOP + 16 | 0; //@line 11466
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11466
 if (!(HEAP8[$0 + 2532 >> 0] | 0)) {
  $$1 = -1017; //@line 11472
  STACKTOP = sp; //@line 11473
  return $$1 | 0; //@line 11473
 }
 $9 = $0 + 2816 | 0; //@line 11475
 if (!(HEAP8[$9 >> 0] | 0)) {
  $$1 = -1001; //@line 11479
  STACKTOP = sp; //@line 11480
  return $$1 | 0; //@line 11480
 }
 if (!$1) {
  $$1 = -1003; //@line 11484
  STACKTOP = sp; //@line 11485
  return $$1 | 0; //@line 11485
 }
 $13 = $2 & 65535; //@line 11487
 if (!($2 << 16 >> 16)) {
  $$1 = -1003; //@line 11490
  STACKTOP = sp; //@line 11491
  return $$1 | 0; //@line 11491
 }
 L13 : do {
  switch (HEAP32[$0 + 2828 >> 2] | 0) {
  case 0:
   {
    $$0$i = 1; //@line 11498
    break;
   }
  case 1:
   {
    $$0$i = 2; //@line 11502
    break;
   }
  case 2:
   {
    $$0$i = 4; //@line 11506
    break;
   }
  case 3:
   {
    $$0$i = 8; //@line 11510
    break;
   }
  default:
   {
    _mbed_tracef(2, 12506, 13099, sp); //@line 11514
    $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 11515
    _mbed_assert_internal(14489, 12408, 681); //@line 11516
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 363; //@line 11519
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11521
     HEAP8[$AsyncCtx + 8 >> 0] = $5 & 1; //@line 11524
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 11526
     HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 11528
     HEAP16[$AsyncCtx + 20 >> 1] = $2; //@line 11530
     HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 11532
     HEAP32[$AsyncCtx + 28 >> 2] = $9; //@line 11534
     HEAP32[$AsyncCtx + 32 >> 2] = $13; //@line 11536
     sp = STACKTOP; //@line 11537
     STACKTOP = sp; //@line 11538
     return 0; //@line 11538
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 11540
     $$0$i = 1; //@line 11541
     break L13;
    }
   }
  }
 } while (0);
 $26 = HEAP8[$0 + 2837 >> 0] | 0; //@line 11548
 if ($5) {
  if ($26 << 24 >> 24 != (HEAP8[$3 >> 0] | 0)) {
   $$1 = -1001; //@line 11553
   STACKTOP = sp; //@line 11554
   return $$1 | 0; //@line 11554
  }
  if (!(HEAP32[$4 >> 2] & $$0$i)) {
   $$1 = -1001; //@line 11560
   STACKTOP = sp; //@line 11561
   return $$1 | 0; //@line 11561
  }
 }
 HEAP8[$3 >> 0] = $26; //@line 11564
 HEAP32[$4 >> 2] = $$0$i; //@line 11565
 $32 = $0 + 2840 | 0; //@line 11566
 $33 = HEAP32[$32 >> 2] | 0; //@line 11567
 $34 = $0 + 2844 | 0; //@line 11568
 $35 = HEAP16[$34 >> 1] | 0; //@line 11569
 $36 = $35 & 65535; //@line 11570
 $38 = $0 + 2866 | 0; //@line 11572
 $40 = (HEAP16[$38 >> 1] | 0) == 0; //@line 11574
 if (($35 & 65535) > ($2 & 65535)) {
  if ($40) {
   $43 = $0 + 2864 | 0; //@line 11579
   HEAP16[$43 >> 1] = $36 - $13; //@line 11580
   HEAP16[$38 >> 1] = $2; //@line 11581
   _memcpy($1 | 0, $33 | 0, $13 | 0) | 0; //@line 11582
   $$0$off0 = 0; //@line 11583
   $$031 = $2; //@line 11583
   $$pre$phi39Z2D = $43; //@line 11583
  } else {
   label = 19; //@line 11585
  }
 } else {
  if ($40) {
   $44 = $0 + 2864 | 0; //@line 11589
   HEAP16[$44 >> 1] = 0; //@line 11590
   HEAP16[$38 >> 1] = 0; //@line 11591
   _memcpy($1 | 0, $33 | 0, $36 | 0) | 0; //@line 11592
   $$0$off0 = 1; //@line 11593
   $$031 = $35; //@line 11593
   $$pre$phi39Z2D = $44; //@line 11593
  } else {
   label = 19; //@line 11595
  }
 }
 if ((label | 0) == 19) {
  $$0$off0 = 0; //@line 11600
  $$031 = $35; //@line 11600
  $$pre$phi39Z2D = $0 + 2864 | 0; //@line 11600
 }
 if (HEAP16[$$pre$phi39Z2D >> 1] | 0) {
  $48 = HEAP16[$0 + 2866 >> 1] | 0; //@line 11606
  if ($48 << 16 >> 16) {
   _memcpy($1 | 0, $33 + ($48 & 65535) | 0, $$031 & 65535 | 0) | 0; //@line 11612
  }
 }
 if (!$$0$off0) {
  $$1 = $$031; //@line 11616
  STACKTOP = sp; //@line 11617
  return $$1 | 0; //@line 11617
 }
 HEAP32[$32 >> 2] = 0; //@line 11619
 HEAP16[$34 >> 1] = 0; //@line 11620
 HEAP8[$9 >> 0] = 0; //@line 11621
 $$1 = $$031; //@line 11622
 STACKTOP = sp; //@line 11623
 return $$1 | 0; //@line 11623
}
function __ZN12radio_eventsD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 31666
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31668
 $4 = HEAP32[$2 + 92 >> 2] | 0; //@line 31670
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 31675
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 31676
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 80 | 0); //@line 31677
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 173; //@line 31680
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 31681
   HEAP32[$9 >> 2] = $2; //@line 31682
   sp = STACKTOP; //@line 31683
   return;
  }
  ___async_unwind = 0; //@line 31686
  HEAP32[$ReallocAsyncCtx2 >> 2] = 173; //@line 31687
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 31688
  HEAP32[$9 >> 2] = $2; //@line 31689
  sp = STACKTOP; //@line 31690
  return;
 }
 $11 = HEAP32[$2 + 76 >> 2] | 0; //@line 31694
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 31699
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 31700
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 64 | 0); //@line 31701
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 174; //@line 31704
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 31705
   HEAP32[$16 >> 2] = $2; //@line 31706
   sp = STACKTOP; //@line 31707
   return;
  }
  ___async_unwind = 0; //@line 31710
  HEAP32[$ReallocAsyncCtx3 >> 2] = 174; //@line 31711
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 31712
  HEAP32[$16 >> 2] = $2; //@line 31713
  sp = STACKTOP; //@line 31714
  return;
 }
 $18 = HEAP32[$2 + 60 >> 2] | 0; //@line 31718
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 31723
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 31724
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 48 | 0); //@line 31725
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 175; //@line 31728
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 31729
   HEAP32[$23 >> 2] = $2; //@line 31730
   sp = STACKTOP; //@line 31731
   return;
  }
  ___async_unwind = 0; //@line 31734
  HEAP32[$ReallocAsyncCtx4 >> 2] = 175; //@line 31735
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 31736
  HEAP32[$23 >> 2] = $2; //@line 31737
  sp = STACKTOP; //@line 31738
  return;
 }
 $25 = HEAP32[$2 + 44 >> 2] | 0; //@line 31742
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 31747
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 31748
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 32 | 0); //@line 31749
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 31752
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 31753
   HEAP32[$30 >> 2] = $2; //@line 31754
   sp = STACKTOP; //@line 31755
   return;
  }
  ___async_unwind = 0; //@line 31758
  HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 31759
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 31760
  HEAP32[$30 >> 2] = $2; //@line 31761
  sp = STACKTOP; //@line 31762
  return;
 }
 $32 = HEAP32[$2 + 28 >> 2] | 0; //@line 31766
 if ($32 | 0) {
  $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 31771
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 31772
  FUNCTION_TABLE_vi[$36 & 1023]($2 + 16 | 0); //@line 31773
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 31776
   $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 31777
   HEAP32[$37 >> 2] = $2; //@line 31778
   sp = STACKTOP; //@line 31779
   return;
  }
  ___async_unwind = 0; //@line 31782
  HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 31783
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 31784
  HEAP32[$37 >> 2] = $2; //@line 31785
  sp = STACKTOP; //@line 31786
  return;
 }
 $39 = HEAP32[$2 + 12 >> 2] | 0; //@line 31790
 if (!$39) {
  return;
 }
 $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 31796
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 31797
 FUNCTION_TABLE_vi[$42 & 1023]($2); //@line 31798
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 178; //@line 31801
  sp = STACKTOP; //@line 31802
  return;
 }
 ___async_unwind = 0; //@line 31805
 HEAP32[$ReallocAsyncCtx7 >> 2] = 178; //@line 31806
 sp = STACKTOP; //@line 31807
 return;
}
function _initialize__async_cb_63($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23318
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23320
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23322
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23324
 $10 = HEAP32[(HEAP32[$0 + 16 >> 2] | 0) + 4 >> 2] | 0; //@line 23328
 if (($10 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 23332
  _mbed_assert_internal(14489, 14491, 47); //@line 23333
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 23336
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 23337
   HEAP32[$12 >> 2] = 1e6; //@line 23338
   $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 23339
   HEAP32[$13 >> 2] = $4; //@line 23340
   $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 23341
   HEAP32[$14 >> 2] = $6; //@line 23342
   $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 23343
   HEAP32[$15 >> 2] = $2; //@line 23344
   sp = STACKTOP; //@line 23345
   return;
  }
  ___async_unwind = 0; //@line 23348
  HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 23349
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 23350
  HEAP32[$12 >> 2] = 1e6; //@line 23351
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 23352
  HEAP32[$13 >> 2] = $4; //@line 23353
  $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 23354
  HEAP32[$14 >> 2] = $6; //@line 23355
  $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 23356
  HEAP32[$15 >> 2] = $2; //@line 23357
  sp = STACKTOP; //@line 23358
  return;
 } else {
  $17 = 7 << $10 + -4; //@line 23362
  $18 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 23363
  $19 = tempRet0; //@line 23364
  $20 = _i64Add(1e6, 0, -1, -1) | 0; //@line 23365
  $22 = _i64Add($20 | 0, tempRet0 | 0, $18 | 0, $19 | 0) | 0; //@line 23367
  $24 = ___udivdi3($22 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 23369
  $25 = tempRet0; //@line 23370
  $26 = HEAP32[$4 >> 2] | 0; //@line 23371
  HEAP32[$26 >> 2] = 0; //@line 23372
  HEAP32[$26 + 4 >> 2] = 0; //@line 23374
  $30 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 23377
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 23378
  $31 = FUNCTION_TABLE_i[$30 & 7]() | 0; //@line 23379
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 601; //@line 23382
   $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 23383
   HEAP32[$32 >> 2] = $4; //@line 23384
   $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 23385
   HEAP32[$33 >> 2] = 1e6; //@line 23386
   $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 23387
   HEAP32[$34 >> 2] = $10; //@line 23388
   $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 23389
   HEAP32[$35 >> 2] = $17; //@line 23390
   $36 = $ReallocAsyncCtx3 + 24 | 0; //@line 23391
   $37 = $36; //@line 23392
   $38 = $37; //@line 23393
   HEAP32[$38 >> 2] = $24; //@line 23394
   $39 = $37 + 4 | 0; //@line 23395
   $40 = $39; //@line 23396
   HEAP32[$40 >> 2] = $25; //@line 23397
   $41 = $ReallocAsyncCtx3 + 32 | 0; //@line 23398
   HEAP32[$41 >> 2] = $6; //@line 23399
   $42 = $ReallocAsyncCtx3 + 36 | 0; //@line 23400
   HEAP32[$42 >> 2] = $2; //@line 23401
   sp = STACKTOP; //@line 23402
   return;
  }
  HEAP32[___async_retval >> 2] = $31; //@line 23406
  ___async_unwind = 0; //@line 23407
  HEAP32[$ReallocAsyncCtx3 >> 2] = 601; //@line 23408
  $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 23409
  HEAP32[$32 >> 2] = $4; //@line 23410
  $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 23411
  HEAP32[$33 >> 2] = 1e6; //@line 23412
  $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 23413
  HEAP32[$34 >> 2] = $10; //@line 23414
  $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 23415
  HEAP32[$35 >> 2] = $17; //@line 23416
  $36 = $ReallocAsyncCtx3 + 24 | 0; //@line 23417
  $37 = $36; //@line 23418
  $38 = $37; //@line 23419
  HEAP32[$38 >> 2] = $24; //@line 23420
  $39 = $37 + 4 | 0; //@line 23421
  $40 = $39; //@line 23422
  HEAP32[$40 >> 2] = $25; //@line 23423
  $41 = $ReallocAsyncCtx3 + 32 | 0; //@line 23424
  HEAP32[$41 >> 2] = $6; //@line 23425
  $42 = $ReallocAsyncCtx3 + 36 | 0; //@line 23426
  HEAP32[$42 >> 2] = $2; //@line 23427
  sp = STACKTOP; //@line 23428
  return;
 }
}
function _mbedtls_aes_setkey_dec($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$02$i$i = 0, $$031$i$i = 0, $$043$lcssa = 0, $$04353 = 0, $$04555$in = 0, $$051 = 0, $$054 = 0, $$pn$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $128 = 0, $13 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $64 = 0, $8 = 0, $96 = 0, sp = 0, $$04353$looptemp = 0;
 sp = STACKTOP; //@line 334
 STACKTOP = STACKTOP + 288 | 0; //@line 335
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 335
 $3 = sp; //@line 336
 _memset($3 | 0, 0, 280) | 0; //@line 337
 $4 = $0 + 8 | 0; //@line 338
 HEAP32[$0 + 4 >> 2] = $4; //@line 340
 $6 = _mbedtls_aes_setkey_enc($3, $1, $2) | 0; //@line 341
 if (!$6) {
  $8 = HEAP32[$3 >> 2] | 0; //@line 344
  HEAP32[$0 >> 2] = $8; //@line 345
  $10 = HEAP32[$3 + 4 >> 2] | 0; //@line 347
  $11 = $8 << 2; //@line 348
  $12 = $10 + ($11 << 2) | 0; //@line 349
  $13 = $12 + 4 | 0; //@line 350
  HEAP32[$4 >> 2] = HEAP32[$12 >> 2]; //@line 353
  $16 = $13 + 4 | 0; //@line 354
  HEAP32[$0 + 12 >> 2] = HEAP32[$13 >> 2]; //@line 357
  $19 = $16 + 4 | 0; //@line 358
  HEAP32[$0 + 16 >> 2] = HEAP32[$16 >> 2]; //@line 361
  $22 = $19 + 4 | 0; //@line 362
  $24 = $0 + 24 | 0; //@line 364
  HEAP32[$0 + 20 >> 2] = HEAP32[$19 >> 2]; //@line 365
  $$051 = $22 + -32 | 0; //@line 366
  if (($8 | 0) > 1) {
   $26 = ~$8; //@line 369
   $31 = $11 + -4 - ($8 + (($26 | 0) > -3 ? $26 : -3) << 2) | 0; //@line 375
   $$04353 = $24; //@line 376
   $$04555$in = $8; //@line 376
   $$054 = $$051; //@line 376
   while (1) {
    $$04353$looptemp = $$04353;
    $$04353 = $$04353 + 16 | 0; //@line 379
    $32 = HEAP32[$$054 >> 2] | 0; //@line 380
    HEAP32[$$04353$looptemp >> 2] = HEAP32[2308 + ((HEAPU8[13797 + ($32 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1284 + ((HEAPU8[13797 + ($32 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3332 + ((HEAPU8[13797 + ($32 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4356 + ((HEAPU8[13797 + ($32 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 411
    $64 = HEAP32[$$054 + 4 >> 2] | 0; //@line 413
    HEAP32[$$04353$looptemp + 4 >> 2] = HEAP32[2308 + ((HEAPU8[13797 + ($64 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1284 + ((HEAPU8[13797 + ($64 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3332 + ((HEAPU8[13797 + ($64 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4356 + ((HEAPU8[13797 + ($64 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 444
    $96 = HEAP32[$$054 + 8 >> 2] | 0; //@line 446
    HEAP32[$$04353$looptemp + 8 >> 2] = HEAP32[2308 + ((HEAPU8[13797 + ($96 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1284 + ((HEAPU8[13797 + ($96 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3332 + ((HEAPU8[13797 + ($96 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4356 + ((HEAPU8[13797 + ($96 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 477
    $128 = HEAP32[$$054 + 12 >> 2] | 0; //@line 479
    HEAP32[$$04353$looptemp + 12 >> 2] = HEAP32[2308 + ((HEAPU8[13797 + ($128 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1284 + ((HEAPU8[13797 + ($128 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3332 + ((HEAPU8[13797 + ($128 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4356 + ((HEAPU8[13797 + ($128 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 509
    $$054 = $$054 + -16 | 0; //@line 510
    if (($$04555$in | 0) <= 2) {
     break;
    } else {
     $$04555$in = $$04555$in + -1 | 0; //@line 513
    }
   }
   $$0$lcssa = $$054; //@line 519
   $$043$lcssa = $$04353; //@line 519
   $$pn$lcssa = $10 + ($31 << 2) | 0; //@line 519
  } else {
   $$0$lcssa = $$051; //@line 521
   $$043$lcssa = $24; //@line 521
   $$pn$lcssa = $22; //@line 521
  }
  HEAP32[$$043$lcssa >> 2] = HEAP32[$$0$lcssa >> 2]; //@line 526
  HEAP32[$$043$lcssa + 4 >> 2] = HEAP32[$$pn$lcssa + -28 >> 2]; //@line 530
  HEAP32[$$043$lcssa + 8 >> 2] = HEAP32[$$pn$lcssa + -24 >> 2]; //@line 534
  HEAP32[$$043$lcssa + 12 >> 2] = HEAP32[$$pn$lcssa + -20 >> 2]; //@line 536
  $$02$i$i = $3; //@line 537
  $$031$i$i = 280; //@line 537
 } else {
  $$02$i$i = $3; //@line 539
  $$031$i$i = 280; //@line 539
 }
 while (1) {
  $$031$i$i = $$031$i$i + -1 | 0; //@line 542
  HEAP8[$$02$i$i >> 0] = 0; //@line 544
  if (!$$031$i$i) {
   break;
  } else {
   $$02$i$i = $$02$i$i + 1 | 0; //@line 549
  }
 }
 STACKTOP = sp; //@line 552
 return $6 | 0; //@line 552
}
function _mbedtls_cipher_cmac_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $53 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28653
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28655
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28657
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28659
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28661
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28663
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28665
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28667
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28669
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28671
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28673
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28675
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28677
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 28680
  $53 = ___async_retval; //@line 28681
  HEAP32[$53 >> 2] = $$0; //@line 28682
  return;
 }
 $33 = $2 - $4 | 0; //@line 28685
 $25 = $6 + $4 | 0; //@line 28686
 $37 = $8 + 1 | 0; //@line 28687
 if ($37 >>> 0 >= $10 >>> 0) {
  if (!$33) {
   $$0 = 0; //@line 28692
   $53 = ___async_retval; //@line 28693
   HEAP32[$53 >> 2] = $$0; //@line 28694
   return;
  }
  _memcpy((HEAP32[$14 >> 2] | 0) + ($16 + 16) | 0, $25 | 0, $33 | 0) | 0; //@line 28699
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + $33; //@line 28702
  $$0 = 0; //@line 28703
  $53 = ___async_retval; //@line 28704
  HEAP32[$53 >> 2] = $$0; //@line 28705
  return;
 }
 $$09$i75 = 0; //@line 28708
 do {
  $27 = $16 + $$09$i75 | 0; //@line 28712
  HEAP8[$27 >> 0] = HEAP8[$27 >> 0] ^ HEAP8[$25 + $$09$i75 >> 0]; //@line 28715
  $$09$i75 = $$09$i75 + 1 | 0; //@line 28716
 } while (($$09$i75 | 0) != ($4 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 28724
 $31 = _mbedtls_cipher_update($18, $20, $4, $20, $22) | 0; //@line 28725
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 587; //@line 28728
  $32 = $ReallocAsyncCtx + 4 | 0; //@line 28729
  HEAP32[$32 >> 2] = $33; //@line 28730
  $34 = $ReallocAsyncCtx + 8 | 0; //@line 28731
  HEAP32[$34 >> 2] = $4; //@line 28732
  $35 = $ReallocAsyncCtx + 12 | 0; //@line 28733
  HEAP32[$35 >> 2] = $25; //@line 28734
  $36 = $ReallocAsyncCtx + 16 | 0; //@line 28735
  HEAP32[$36 >> 2] = $37; //@line 28736
  $38 = $ReallocAsyncCtx + 20 | 0; //@line 28737
  HEAP32[$38 >> 2] = $10; //@line 28738
  $39 = $ReallocAsyncCtx + 24 | 0; //@line 28739
  HEAP32[$39 >> 2] = $12; //@line 28740
  $40 = $ReallocAsyncCtx + 28 | 0; //@line 28741
  HEAP32[$40 >> 2] = $14; //@line 28742
  $41 = $ReallocAsyncCtx + 32 | 0; //@line 28743
  HEAP32[$41 >> 2] = $16; //@line 28744
  $42 = $ReallocAsyncCtx + 36 | 0; //@line 28745
  HEAP32[$42 >> 2] = $18; //@line 28746
  $43 = $ReallocAsyncCtx + 40 | 0; //@line 28747
  HEAP32[$43 >> 2] = $20; //@line 28748
  $44 = $ReallocAsyncCtx + 44 | 0; //@line 28749
  HEAP32[$44 >> 2] = $22; //@line 28750
  sp = STACKTOP; //@line 28751
  return;
 }
 HEAP32[___async_retval >> 2] = $31; //@line 28755
 ___async_unwind = 0; //@line 28756
 HEAP32[$ReallocAsyncCtx >> 2] = 587; //@line 28757
 $32 = $ReallocAsyncCtx + 4 | 0; //@line 28758
 HEAP32[$32 >> 2] = $33; //@line 28759
 $34 = $ReallocAsyncCtx + 8 | 0; //@line 28760
 HEAP32[$34 >> 2] = $4; //@line 28761
 $35 = $ReallocAsyncCtx + 12 | 0; //@line 28762
 HEAP32[$35 >> 2] = $25; //@line 28763
 $36 = $ReallocAsyncCtx + 16 | 0; //@line 28764
 HEAP32[$36 >> 2] = $37; //@line 28765
 $38 = $ReallocAsyncCtx + 20 | 0; //@line 28766
 HEAP32[$38 >> 2] = $10; //@line 28767
 $39 = $ReallocAsyncCtx + 24 | 0; //@line 28768
 HEAP32[$39 >> 2] = $12; //@line 28769
 $40 = $ReallocAsyncCtx + 28 | 0; //@line 28770
 HEAP32[$40 >> 2] = $14; //@line 28771
 $41 = $ReallocAsyncCtx + 32 | 0; //@line 28772
 HEAP32[$41 >> 2] = $16; //@line 28773
 $42 = $ReallocAsyncCtx + 36 | 0; //@line 28774
 HEAP32[$42 >> 2] = $18; //@line 28775
 $43 = $ReallocAsyncCtx + 40 | 0; //@line 28776
 HEAP32[$43 >> 2] = $20; //@line 28777
 $44 = $ReallocAsyncCtx + 44 | 0; //@line 28778
 HEAP32[$44 >> 2] = $22; //@line 28779
 sp = STACKTOP; //@line 28780
 return;
}
function _mbedtls_gcm_update($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$05966 = 0, $$06065 = 0, $$061 = 0, $$06264 = 0, $$163 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $30 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $5 = 0, $67 = 0, $68 = 0, $75 = 0, $83 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5006
 STACKTOP = STACKTOP + 32 | 0; //@line 5007
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 5007
 $4 = sp + 8 | 0; //@line 5008
 $5 = sp; //@line 5009
 HEAP32[$5 >> 2] = 0; //@line 5010
 if ($3 >>> 0 > $2 >>> 0) {
  if (($3 - $2 | 0) >>> 0 < $1 >>> 0) {
   $$0 = -20; //@line 5018
   STACKTOP = sp; //@line 5019
   return $$0 | 0; //@line 5019
  }
 }
 $11 = $0 + 328 | 0; //@line 5022
 $12 = $11; //@line 5023
 $14 = HEAP32[$12 >> 2] | 0; //@line 5025
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 5028
 $18 = _i64Add($14 | 0, $17 | 0, $1 | 0, 0) | 0; //@line 5029
 $19 = tempRet0; //@line 5030
 if ($19 >>> 0 < $17 >>> 0 | ($19 | 0) == ($17 | 0) & $18 >>> 0 < $14 >>> 0 | ($19 >>> 0 > 15 | ($19 | 0) == 15 & $18 >>> 0 > 4294967264)) {
  $$0 = -20; //@line 5043
  STACKTOP = sp; //@line 5044
  return $$0 | 0; //@line 5044
 }
 $30 = $11; //@line 5046
 HEAP32[$30 >> 2] = $18; //@line 5048
 HEAP32[$30 + 4 >> 2] = $19; //@line 5051
 if (!$1) {
  $$0 = 0; //@line 5054
  STACKTOP = sp; //@line 5055
  return $$0 | 0; //@line 5055
 }
 $35 = $0 + 360 | 0; //@line 5057
 $36 = $0 + 376 | 0; //@line 5058
 $37 = $0 + 392 | 0; //@line 5059
 $$05966 = $3; //@line 5060
 $$06065 = $2; //@line 5060
 $$06264 = $1; //@line 5060
 while (1) {
  $39 = $$06264 >>> 0 < 16 ? $$06264 : 16; //@line 5063
  $$061 = 16; //@line 5064
  do {
   if ($$061 >>> 0 <= 12) {
    break;
   }
   $$061 = $$061 + -1 | 0; //@line 5070
   $42 = $0 + 360 + $$061 | 0; //@line 5071
   $44 = (HEAP8[$42 >> 0] | 0) + 1 << 24 >> 24; //@line 5073
   HEAP8[$42 >> 0] = $44; //@line 5074
  } while (!($44 << 24 >> 24));
  $AsyncCtx = _emscripten_alloc_async_context(68, sp) | 0; //@line 5082
  $46 = _mbedtls_cipher_update($0, $35, 16, $4, $5) | 0; //@line 5083
  if (___async) {
   label = 10; //@line 5086
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5089
  if ($46 | 0) {
   $$0 = $46; //@line 5092
   label = 19; //@line 5093
   break;
  }
  if ($39 | 0) {
   $$163 = 0; //@line 5098
   do {
    $67 = $0 + 376 + $$163 | 0; //@line 5102
    $68 = $$06065 + $$163 | 0; //@line 5103
    if (!(HEAP32[$37 >> 2] | 0)) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 5108
    }
    $75 = HEAP8[$68 >> 0] ^ HEAP8[$4 + $$163 >> 0]; //@line 5113
    HEAP8[$$05966 + $$163 >> 0] = $75; //@line 5115
    if ((HEAP32[$37 >> 2] | 0) == 1) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 5121
    }
    $$163 = $$163 + 1 | 0; //@line 5123
   } while ($$163 >>> 0 < $39 >>> 0);
  }
  _gcm_mult($0, $36, $36); //@line 5132
  $83 = $$06264 - $39 | 0; //@line 5133
  if (!$83) {
   $$0 = 0; //@line 5138
   label = 19; //@line 5139
   break;
  } else {
   $$05966 = $$05966 + $39 | 0; //@line 5142
   $$06065 = $$06065 + $39 | 0; //@line 5142
   $$06264 = $83; //@line 5142
  }
 }
 if ((label | 0) == 10) {
  HEAP32[$AsyncCtx >> 2] = 594; //@line 5146
  HEAP32[$AsyncCtx + 4 >> 2] = $39; //@line 5148
  HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 5150
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 5152
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 5154
  HEAP32[$AsyncCtx + 20 >> 2] = $36; //@line 5156
  HEAP32[$AsyncCtx + 24 >> 2] = $$06264; //@line 5158
  HEAP32[$AsyncCtx + 28 >> 2] = $$06065; //@line 5160
  HEAP32[$AsyncCtx + 32 >> 2] = $$05966; //@line 5162
  HEAP32[$AsyncCtx + 36 >> 2] = $37; //@line 5164
  HEAP32[$AsyncCtx + 40 >> 2] = $4; //@line 5166
  HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 5168
  HEAP32[$AsyncCtx + 48 >> 2] = $2; //@line 5170
  HEAP32[$AsyncCtx + 52 >> 2] = $1; //@line 5172
  HEAP32[$AsyncCtx + 56 >> 2] = $0; //@line 5174
  HEAP32[$AsyncCtx + 60 >> 2] = $35; //@line 5176
  HEAP32[$AsyncCtx + 64 >> 2] = $5; //@line 5178
  sp = STACKTOP; //@line 5179
  STACKTOP = sp; //@line 5180
  return 0; //@line 5180
 } else if ((label | 0) == 19) {
  STACKTOP = sp; //@line 5183
  return $$0 | 0; //@line 5183
 }
 return 0; //@line 5185
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_19($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19490
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19492
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19494
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19496
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19498
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19500
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19502
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19504
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 19507
 $18 = HEAP8[$0 + 33 >> 0] & 1; //@line 19510
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 19512
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 19514
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 19516
 $26 = HEAP8[$0 + 48 >> 0] & 1; //@line 19519
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 19521
 L2 : do {
  if (!(HEAP8[$10 >> 0] | 0)) {
   do {
    if (!(HEAP8[$24 >> 0] | 0)) {
     $$182$off0 = $18; //@line 19530
     $$186$off0 = $16; //@line 19530
    } else {
     if (!(HEAP8[$22 >> 0] | 0)) {
      if (!(HEAP32[$14 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $16; //@line 19539
       $$283$off0 = 1; //@line 19539
       label = 13; //@line 19540
       break L2;
      } else {
       $$182$off0 = 1; //@line 19543
       $$186$off0 = $16; //@line 19543
       break;
      }
     }
     if ((HEAP32[$12 >> 2] | 0) == 1) {
      label = 18; //@line 19550
      break L2;
     }
     if (!(HEAP32[$14 >> 2] & 2)) {
      label = 18; //@line 19557
      break L2;
     } else {
      $$182$off0 = 1; //@line 19560
      $$186$off0 = 1; //@line 19560
     }
    }
   } while (0);
   $30 = $20 + 8 | 0; //@line 19564
   if ($30 >>> 0 < $28 >>> 0) {
    HEAP8[$22 >> 0] = 0; //@line 19567
    HEAP8[$24 >> 0] = 0; //@line 19568
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 19569
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $8, $4, $4, 1, $26); //@line 19570
    if (!___async) {
     ___async_unwind = 0; //@line 19573
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 715; //@line 19575
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 19577
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 19579
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 19581
    HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 19583
    HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 19585
    HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 19587
    HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 19589
    HEAP8[$ReallocAsyncCtx5 + 32 >> 0] = $$186$off0 & 1; //@line 19592
    HEAP8[$ReallocAsyncCtx5 + 33 >> 0] = $$182$off0 & 1; //@line 19595
    HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $30; //@line 19597
    HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $22; //@line 19599
    HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $24; //@line 19601
    HEAP8[$ReallocAsyncCtx5 + 48 >> 0] = $26 & 1; //@line 19604
    HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $28; //@line 19606
    sp = STACKTOP; //@line 19607
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 19610
    $$283$off0 = $$182$off0; //@line 19610
    label = 13; //@line 19611
   }
  } else {
   $$085$off0$reg2mem$0 = $16; //@line 19614
   $$283$off0 = $18; //@line 19614
   label = 13; //@line 19615
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$6 >> 2] = $4; //@line 19621
    $59 = $8 + 40 | 0; //@line 19622
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 19625
    if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$12 >> 2] | 0) == 2) {
      HEAP8[$10 >> 0] = 1; //@line 19633
      if ($$283$off0) {
       label = 18; //@line 19635
       break;
      } else {
       $67 = 4; //@line 19638
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 19645
   } else {
    $67 = 4; //@line 19647
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 19652
 }
 HEAP32[$2 >> 2] = $67; //@line 19654
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_105($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25488
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25490
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25492
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25494
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25496
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25498
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25500
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25502
 $17 = HEAP32[HEAP32[$0 + 32 >> 2] >> 2] | 0; //@line 25505
 if (!$17) {
  $28 = $4 + 12 | 0; //@line 25509
  HEAP32[$4 >> 2] = 471; //@line 25510
  HEAP32[$4 + 4 >> 2] = 0; //@line 25512
  HEAP32[$4 + 8 >> 2] = $2; //@line 25514
  HEAP32[$28 >> 2] = 844; //@line 25515
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 25516
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1836 | 0, $4); //@line 25517
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 472; //@line 25520
   $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 25521
   HEAP32[$29 >> 2] = $28; //@line 25522
   $30 = $ReallocAsyncCtx6 + 8 | 0; //@line 25523
   HEAP32[$30 >> 2] = $2; //@line 25524
   $31 = $ReallocAsyncCtx6 + 12 | 0; //@line 25525
   HEAP32[$31 >> 2] = $8; //@line 25526
   $32 = $ReallocAsyncCtx6 + 16 | 0; //@line 25527
   HEAP32[$32 >> 2] = $6; //@line 25528
   $33 = $ReallocAsyncCtx6 + 20 | 0; //@line 25529
   HEAP32[$33 >> 2] = $4; //@line 25530
   $34 = $ReallocAsyncCtx6 + 24 | 0; //@line 25531
   HEAP32[$34 >> 2] = $10; //@line 25532
   $35 = $ReallocAsyncCtx6 + 28 | 0; //@line 25533
   HEAP32[$35 >> 2] = $12; //@line 25534
   sp = STACKTOP; //@line 25535
   return;
  }
  ___async_unwind = 0; //@line 25538
  HEAP32[$ReallocAsyncCtx6 >> 2] = 472; //@line 25539
  $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 25540
  HEAP32[$29 >> 2] = $28; //@line 25541
  $30 = $ReallocAsyncCtx6 + 8 | 0; //@line 25542
  HEAP32[$30 >> 2] = $2; //@line 25543
  $31 = $ReallocAsyncCtx6 + 12 | 0; //@line 25544
  HEAP32[$31 >> 2] = $8; //@line 25545
  $32 = $ReallocAsyncCtx6 + 16 | 0; //@line 25546
  HEAP32[$32 >> 2] = $6; //@line 25547
  $33 = $ReallocAsyncCtx6 + 20 | 0; //@line 25548
  HEAP32[$33 >> 2] = $4; //@line 25549
  $34 = $ReallocAsyncCtx6 + 24 | 0; //@line 25550
  HEAP32[$34 >> 2] = $10; //@line 25551
  $35 = $ReallocAsyncCtx6 + 28 | 0; //@line 25552
  HEAP32[$35 >> 2] = $12; //@line 25553
  sp = STACKTOP; //@line 25554
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 25558
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 25559
  FUNCTION_TABLE_vi[$20 & 1023]($14); //@line 25560
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 470; //@line 25563
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 25564
   HEAP32[$21 >> 2] = $2; //@line 25565
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 25566
   HEAP32[$22 >> 2] = $4; //@line 25567
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 25568
   HEAP32[$23 >> 2] = $6; //@line 25569
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 25570
   HEAP32[$24 >> 2] = $8; //@line 25571
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 25572
   HEAP32[$25 >> 2] = $10; //@line 25573
   $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 25574
   HEAP32[$26 >> 2] = $12; //@line 25575
   sp = STACKTOP; //@line 25576
   return;
  }
  ___async_unwind = 0; //@line 25579
  HEAP32[$ReallocAsyncCtx2 >> 2] = 470; //@line 25580
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 25581
  HEAP32[$21 >> 2] = $2; //@line 25582
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 25583
  HEAP32[$22 >> 2] = $4; //@line 25584
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 25585
  HEAP32[$23 >> 2] = $6; //@line 25586
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 25587
  HEAP32[$24 >> 2] = $8; //@line 25588
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 25589
  HEAP32[$25 >> 2] = $10; //@line 25590
  $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 25591
  HEAP32[$26 >> 2] = $12; //@line 25592
  sp = STACKTOP; //@line 25593
  return;
 }
}
function _initialize__async_cb_60($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $70 = 0, $71 = 0, $72 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 23060
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23064
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23066
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23070
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23072
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23074
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23076
 if (($AsyncRetVal | 0) != (HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 32 >> 2] | 0)) {
  $23 = $AsyncRetVal - (HEAP32[$6 >> 2] | 0) & HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 23085
  HEAP32[$6 >> 2] = $AsyncRetVal; //@line 23086
  $24 = HEAP32[$10 >> 2] | 0; //@line 23087
  L4 : do {
   if (($24 | 0) < 1e6) {
    switch ($24 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 6; //@line 23096
      break L4;
     }
    }
    $25 = ___muldi3($23 | 0, 0, 1e6, 0) | 0; //@line 23100
    $27 = _bitshift64Lshr($25 | 0, tempRet0 | 0, 15) | 0; //@line 23102
    $28 = tempRet0; //@line 23103
    $31 = $12; //@line 23106
    $37 = _i64Add(HEAP32[$31 >> 2] | 0, HEAP32[$31 + 4 >> 2] | 0, $23 * 1e6 & 32704 | 0, 0) | 0; //@line 23112
    $38 = tempRet0; //@line 23113
    $39 = $12; //@line 23114
    HEAP32[$39 >> 2] = $37; //@line 23116
    HEAP32[$39 + 4 >> 2] = $38; //@line 23119
    if ($38 >>> 0 < 0 | ($38 | 0) == 0 & $37 >>> 0 < 32768) {
     $95 = $27; //@line 23126
     $96 = $28; //@line 23126
    } else {
     $48 = _i64Add($27 | 0, $28 | 0, 1, 0) | 0; //@line 23128
     $49 = tempRet0; //@line 23129
     $50 = _i64Add($37 | 0, $38 | 0, -32768, -1) | 0; //@line 23130
     $52 = $12; //@line 23132
     HEAP32[$52 >> 2] = $50; //@line 23134
     HEAP32[$52 + 4 >> 2] = tempRet0; //@line 23137
     $95 = $48; //@line 23138
     $96 = $49; //@line 23138
    }
   } else {
    switch ($24 | 0) {
    case 1e6:
     {
      $95 = $23; //@line 23143
      $96 = 0; //@line 23143
      break;
     }
    default:
     {
      label = 6; //@line 23147
     }
    }
   }
  } while (0);
  if ((label | 0) == 6) {
   $56 = ___muldi3($23 | 0, 0, 1e6, 0) | 0; //@line 23153
   $57 = tempRet0; //@line 23154
   $58 = ___udivdi3($56 | 0, $57 | 0, $24 | 0, 0) | 0; //@line 23155
   $59 = tempRet0; //@line 23156
   $60 = ___muldi3($58 | 0, $59 | 0, $24 | 0, 0) | 0; //@line 23157
   $62 = _i64Subtract($56 | 0, $57 | 0, $60 | 0, tempRet0 | 0) | 0; //@line 23159
   $64 = $12; //@line 23161
   $70 = _i64Add($62 | 0, tempRet0 | 0, HEAP32[$64 >> 2] | 0, HEAP32[$64 + 4 >> 2] | 0) | 0; //@line 23167
   $71 = tempRet0; //@line 23168
   $72 = $12; //@line 23169
   HEAP32[$72 >> 2] = $70; //@line 23171
   HEAP32[$72 + 4 >> 2] = $71; //@line 23174
   if ($71 >>> 0 < 0 | ($71 | 0) == 0 & $70 >>> 0 < $24 >>> 0) {
    $95 = $58; //@line 23181
    $96 = $59; //@line 23181
   } else {
    $81 = _i64Add($58 | 0, $59 | 0, 1, 0) | 0; //@line 23183
    $82 = tempRet0; //@line 23184
    $83 = _i64Subtract($70 | 0, $71 | 0, $24 | 0, 0) | 0; //@line 23185
    $85 = $12; //@line 23187
    HEAP32[$85 >> 2] = $83; //@line 23189
    HEAP32[$85 + 4 >> 2] = tempRet0; //@line 23192
    $95 = $81; //@line 23193
    $96 = $82; //@line 23193
   }
  }
  $89 = $14; //@line 23196
  $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 23202
  $99 = $14; //@line 23204
  HEAP32[$99 >> 2] = $97; //@line 23206
  HEAP32[$99 + 4 >> 2] = tempRet0; //@line 23209
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 23211
 _schedule_interrupt($4); //@line 23212
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 603; //@line 23215
  sp = STACKTOP; //@line 23216
  return;
 }
 ___async_unwind = 0; //@line 23219
 HEAP32[$ReallocAsyncCtx5 >> 2] = 603; //@line 23220
 sp = STACKTOP; //@line 23221
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 31082
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31084
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31086
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 31091
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31093
 $$pre$i = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 31094
 $11 = $4 + 12 | 0; //@line 31095
 HEAP32[$11 >> 2] = $$pre$i; //@line 31096
 $12 = $8 & 1; //@line 31097
 if (!$$pre$i) {
  $22 = $2 + 12 | 0; //@line 31100
  HEAP32[$22 >> 2] = 0; //@line 31101
  $23 = $2 + 16 | 0; //@line 31102
  HEAP8[$23 >> 0] = $12; //@line 31103
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 31104
  $24 = _equeue_alloc($10, 20) | 0; //@line 31105
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 222; //@line 31108
   $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 31109
   HEAP32[$25 >> 2] = $11; //@line 31110
   $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 31111
   HEAP32[$26 >> 2] = $4; //@line 31112
   $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 31113
   HEAP32[$27 >> 2] = $23; //@line 31114
   $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 31115
   HEAP32[$28 >> 2] = $10; //@line 31116
   $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 31117
   HEAP32[$29 >> 2] = $2; //@line 31118
   $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 31119
   HEAP32[$30 >> 2] = $22; //@line 31120
   $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 31121
   HEAP32[$31 >> 2] = $22; //@line 31122
   sp = STACKTOP; //@line 31123
   return;
  }
  HEAP32[___async_retval >> 2] = $24; //@line 31127
  ___async_unwind = 0; //@line 31128
  HEAP32[$ReallocAsyncCtx7 >> 2] = 222; //@line 31129
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 31130
  HEAP32[$25 >> 2] = $11; //@line 31131
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 31132
  HEAP32[$26 >> 2] = $4; //@line 31133
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 31134
  HEAP32[$27 >> 2] = $23; //@line 31135
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 31136
  HEAP32[$28 >> 2] = $10; //@line 31137
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 31138
  HEAP32[$29 >> 2] = $2; //@line 31139
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 31140
  HEAP32[$30 >> 2] = $22; //@line 31141
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 31142
  HEAP32[$31 >> 2] = $22; //@line 31143
  sp = STACKTOP; //@line 31144
  return;
 } else {
  $15 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 31149
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 31150
  FUNCTION_TABLE_vii[$15 & 15]($2, $4); //@line 31151
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 221; //@line 31154
   $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 31155
   HEAP32[$16 >> 2] = $2; //@line 31156
   $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 31157
   HEAP32[$17 >> 2] = $4; //@line 31158
   $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 31159
   HEAP32[$18 >> 2] = $11; //@line 31160
   $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 31161
   HEAP8[$19 >> 0] = $12; //@line 31162
   $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 31163
   HEAP32[$20 >> 2] = $11; //@line 31164
   $21 = $ReallocAsyncCtx2 + 24 | 0; //@line 31165
   HEAP32[$21 >> 2] = $10; //@line 31166
   sp = STACKTOP; //@line 31167
   return;
  }
  ___async_unwind = 0; //@line 31170
  HEAP32[$ReallocAsyncCtx2 >> 2] = 221; //@line 31171
  $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 31172
  HEAP32[$16 >> 2] = $2; //@line 31173
  $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 31174
  HEAP32[$17 >> 2] = $4; //@line 31175
  $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 31176
  HEAP32[$18 >> 2] = $11; //@line 31177
  $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 31178
  HEAP8[$19 >> 0] = $12; //@line 31179
  $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 31180
  HEAP32[$20 >> 2] = $11; //@line 31181
  $21 = $ReallocAsyncCtx2 + 24 | 0; //@line 31182
  HEAP32[$21 >> 2] = $10; //@line 31183
  sp = STACKTOP; //@line 31184
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10161
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10163
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10165
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10169
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10171
 $$pre$i = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 10172
 $11 = $4 + 12 | 0; //@line 10173
 HEAP32[$11 >> 2] = $$pre$i; //@line 10174
 if (!$$pre$i) {
  $21 = $2 + 12 | 0; //@line 10177
  HEAP32[$21 >> 2] = 0; //@line 10178
  $22 = $2 + 16 | 0; //@line 10179
  HEAP32[$22 >> 2] = $8; //@line 10180
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 10181
  $23 = _equeue_alloc($10, 20) | 0; //@line 10182
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 268; //@line 10185
   $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 10186
   HEAP32[$24 >> 2] = $21; //@line 10187
   $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 10188
   HEAP32[$25 >> 2] = $22; //@line 10189
   $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 10190
   HEAP32[$26 >> 2] = $10; //@line 10191
   $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 10192
   HEAP32[$27 >> 2] = $4; //@line 10193
   $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 10194
   HEAP32[$28 >> 2] = $11; //@line 10195
   $29 = $ReallocAsyncCtx7 + 24 | 0; //@line 10196
   HEAP32[$29 >> 2] = $2; //@line 10197
   $30 = $ReallocAsyncCtx7 + 28 | 0; //@line 10198
   HEAP32[$30 >> 2] = $21; //@line 10199
   sp = STACKTOP; //@line 10200
   return;
  }
  HEAP32[___async_retval >> 2] = $23; //@line 10204
  ___async_unwind = 0; //@line 10205
  HEAP32[$ReallocAsyncCtx7 >> 2] = 268; //@line 10206
  $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 10207
  HEAP32[$24 >> 2] = $21; //@line 10208
  $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 10209
  HEAP32[$25 >> 2] = $22; //@line 10210
  $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 10211
  HEAP32[$26 >> 2] = $10; //@line 10212
  $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 10213
  HEAP32[$27 >> 2] = $4; //@line 10214
  $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 10215
  HEAP32[$28 >> 2] = $11; //@line 10216
  $29 = $ReallocAsyncCtx7 + 24 | 0; //@line 10217
  HEAP32[$29 >> 2] = $2; //@line 10218
  $30 = $ReallocAsyncCtx7 + 28 | 0; //@line 10219
  HEAP32[$30 >> 2] = $21; //@line 10220
  sp = STACKTOP; //@line 10221
  return;
 } else {
  $14 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 10226
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 10227
  FUNCTION_TABLE_vii[$14 & 15]($2, $4); //@line 10228
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 267; //@line 10231
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 10232
   HEAP32[$15 >> 2] = $4; //@line 10233
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 10234
   HEAP32[$16 >> 2] = $2; //@line 10235
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 10236
   HEAP32[$17 >> 2] = $11; //@line 10237
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 10238
   HEAP32[$18 >> 2] = $11; //@line 10239
   $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 10240
   HEAP32[$19 >> 2] = $8; //@line 10241
   $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 10242
   HEAP32[$20 >> 2] = $10; //@line 10243
   sp = STACKTOP; //@line 10244
   return;
  }
  ___async_unwind = 0; //@line 10247
  HEAP32[$ReallocAsyncCtx2 >> 2] = 267; //@line 10248
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 10249
  HEAP32[$15 >> 2] = $4; //@line 10250
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 10251
  HEAP32[$16 >> 2] = $2; //@line 10252
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 10253
  HEAP32[$17 >> 2] = $11; //@line 10254
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 10255
  HEAP32[$18 >> 2] = $11; //@line 10256
  $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 10257
  HEAP32[$19 >> 2] = $8; //@line 10258
  $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 10259
  HEAP32[$20 >> 2] = $10; //@line 10260
  sp = STACKTOP; //@line 10261
  return;
 }
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27722
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27724
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27726
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27728
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27730
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27732
 $12 = $0 + 24 | 0; //@line 27734
 $14 = HEAP32[$12 >> 2] | 0; //@line 27736
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 27739
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 27741
 $20 = HEAP32[$2 >> 2] | 0; //@line 27742
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 27746
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 27747
  FUNCTION_TABLE_vii[$23 & 15]($6, $8); //@line 27748
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 87; //@line 27751
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 27752
   HEAP32[$24 >> 2] = $2; //@line 27753
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 27754
   HEAP32[$25 >> 2] = $4; //@line 27755
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 27756
   HEAP32[$26 >> 2] = $10; //@line 27757
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 27758
   $28 = $27; //@line 27759
   $29 = $28; //@line 27760
   HEAP32[$29 >> 2] = $14; //@line 27761
   $30 = $28 + 4 | 0; //@line 27762
   $31 = $30; //@line 27763
   HEAP32[$31 >> 2] = $17; //@line 27764
   $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 27765
   HEAP32[$32 >> 2] = $19; //@line 27766
   $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 27767
   HEAP32[$33 >> 2] = $8; //@line 27768
   sp = STACKTOP; //@line 27769
   return;
  }
  ___async_unwind = 0; //@line 27772
  HEAP32[$ReallocAsyncCtx2 >> 2] = 87; //@line 27773
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 27774
  HEAP32[$24 >> 2] = $2; //@line 27775
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 27776
  HEAP32[$25 >> 2] = $4; //@line 27777
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 27778
  HEAP32[$26 >> 2] = $10; //@line 27779
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 27780
  $28 = $27; //@line 27781
  $29 = $28; //@line 27782
  HEAP32[$29 >> 2] = $14; //@line 27783
  $30 = $28 + 4 | 0; //@line 27784
  $31 = $30; //@line 27785
  HEAP32[$31 >> 2] = $17; //@line 27786
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 27787
  HEAP32[$32 >> 2] = $19; //@line 27788
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 27789
  HEAP32[$33 >> 2] = $8; //@line 27790
  sp = STACKTOP; //@line 27791
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 27794
 __ZN4mbed6Ticker5setupEy($10, $14, $17); //@line 27795
 $34 = HEAP32[$2 >> 2] | 0; //@line 27796
 if ($34 | 0) {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 27800
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 27801
  FUNCTION_TABLE_vi[$37 & 1023]($8); //@line 27802
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 88; //@line 27805
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 27806
   HEAP32[$38 >> 2] = $19; //@line 27807
   sp = STACKTOP; //@line 27808
   return;
  }
  ___async_unwind = 0; //@line 27811
  HEAP32[$ReallocAsyncCtx3 >> 2] = 88; //@line 27812
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 27813
  HEAP32[$38 >> 2] = $19; //@line 27814
  sp = STACKTOP; //@line 27815
  return;
 }
 $40 = HEAP32[$19 + 788 >> 2] | 0; //@line 27819
 if (!$40) {
  return;
 }
 $43 = HEAP32[$40 + 60 >> 2] | 0; //@line 27825
 if (!$43) {
  return;
 }
 $46 = HEAP32[$43 >> 2] | 0; //@line 27831
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 27832
 FUNCTION_TABLE_vi[$46 & 1023]($40 + 48 | 0); //@line 27833
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 89; //@line 27836
  sp = STACKTOP; //@line 27837
  return;
 }
 ___async_unwind = 0; //@line 27840
 HEAP32[$ReallocAsyncCtx4 >> 2] = 89; //@line 27841
 sp = STACKTOP; //@line 27842
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_18($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19334
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19336
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19338
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19340
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 19343
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19345
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19349
 $15 = $10 + 24 | 0; //@line 19350
 do {
  if ((HEAP32[$0 + 24 >> 2] | 0) > 1) {
   $18 = HEAP32[$10 + 8 >> 2] | 0; //@line 19355
   if (!($18 & 2)) {
    $21 = $2 + 36 | 0; //@line 19359
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $2 + 54 | 0; //@line 19366
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 19377
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 19378
      if (!___async) {
       ___async_unwind = 0; //@line 19381
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 719; //@line 19383
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 19385
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 19387
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 19389
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 19391
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $2; //@line 19393
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $4; //@line 19395
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $6; //@line 19397
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $8 & 1; //@line 19400
      sp = STACKTOP; //@line 19401
      return;
     }
     $36 = $2 + 24 | 0; //@line 19404
     $37 = $2 + 54 | 0; //@line 19405
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 19420
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 19421
     if (!___async) {
      ___async_unwind = 0; //@line 19424
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 718; //@line 19426
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 19428
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $14; //@line 19430
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 19432
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 19434
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 19436
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $2; //@line 19438
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $4; //@line 19440
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $6; //@line 19442
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $8 & 1; //@line 19445
     sp = STACKTOP; //@line 19446
     return;
    }
   }
   $24 = $2 + 54 | 0; //@line 19450
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 19454
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 19455
    if (!___async) {
     ___async_unwind = 0; //@line 19458
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 717; //@line 19460
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 19462
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $14; //@line 19464
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 19466
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $2; //@line 19468
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $4; //@line 19470
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $6; //@line 19472
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $8 & 1; //@line 19475
    sp = STACKTOP; //@line 19476
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_338($0) {
 $0 = $0 | 0;
 var $$pr = 0, $$pre17 = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 14056
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14058
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14060
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14062
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14064
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14066
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14068
 $$pre17 = HEAP32[$2 >> 2] | 0; //@line 14069
 if ($$pre17 | 0) {
  $15 = HEAP32[$$pre17 + 4 >> 2] | 0; //@line 14073
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 14074
  FUNCTION_TABLE_vii[$15 & 15]($8, $10); //@line 14075
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 352; //@line 14078
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 14079
   HEAP32[$16 >> 2] = $2; //@line 14080
   $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 14081
   HEAP32[$17 >> 2] = $4; //@line 14082
   $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 14083
   HEAP32[$18 >> 2] = $6; //@line 14084
   $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 14085
   HEAP32[$19 >> 2] = $12; //@line 14086
   $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 14087
   HEAP32[$20 >> 2] = $10; //@line 14088
   sp = STACKTOP; //@line 14089
   return;
  }
  ___async_unwind = 0; //@line 14092
  HEAP32[$ReallocAsyncCtx6 >> 2] = 352; //@line 14093
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 14094
  HEAP32[$16 >> 2] = $2; //@line 14095
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 14096
  HEAP32[$17 >> 2] = $4; //@line 14097
  $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 14098
  HEAP32[$18 >> 2] = $6; //@line 14099
  $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 14100
  HEAP32[$19 >> 2] = $12; //@line 14101
  $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 14102
  HEAP32[$20 >> 2] = $10; //@line 14103
  sp = STACKTOP; //@line 14104
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 14107
 $$pr = HEAP32[$2 >> 2] | 0; //@line 14108
 if (!$$pr) {
  $27 = $12 + 12 | 0; //@line 14111
  HEAP32[$27 >> 2] = 0; //@line 14112
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 14113
  __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($6, $12); //@line 14114
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 354; //@line 14117
   $28 = $ReallocAsyncCtx9 + 4 | 0; //@line 14118
   HEAP32[$28 >> 2] = $27; //@line 14119
   $29 = $ReallocAsyncCtx9 + 8 | 0; //@line 14120
   HEAP32[$29 >> 2] = $12; //@line 14121
   sp = STACKTOP; //@line 14122
   return;
  }
  ___async_unwind = 0; //@line 14125
  HEAP32[$ReallocAsyncCtx9 >> 2] = 354; //@line 14126
  $28 = $ReallocAsyncCtx9 + 4 | 0; //@line 14127
  HEAP32[$28 >> 2] = $27; //@line 14128
  $29 = $ReallocAsyncCtx9 + 8 | 0; //@line 14129
  HEAP32[$29 >> 2] = $12; //@line 14130
  sp = STACKTOP; //@line 14131
  return;
 } else {
  $23 = HEAP32[$$pr + 4 >> 2] | 0; //@line 14135
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 14136
  FUNCTION_TABLE_vii[$23 & 15]($12, $10); //@line 14137
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 353; //@line 14140
   $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 14141
   HEAP32[$24 >> 2] = $2; //@line 14142
   $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 14143
   HEAP32[$25 >> 2] = $6; //@line 14144
   $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 14145
   HEAP32[$26 >> 2] = $12; //@line 14146
   sp = STACKTOP; //@line 14147
   return;
  }
  ___async_unwind = 0; //@line 14150
  HEAP32[$ReallocAsyncCtx7 >> 2] = 353; //@line 14151
  $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 14152
  HEAP32[$24 >> 2] = $2; //@line 14153
  $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 14154
  HEAP32[$25 >> 2] = $6; //@line 14155
  $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 14156
  HEAP32[$26 >> 2] = $12; //@line 14157
  sp = STACKTOP; //@line 14158
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17266
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 17271
 } else {
  $9 = $1 + 52 | 0; //@line 17273
  $10 = HEAP8[$9 >> 0] | 0; //@line 17274
  $11 = $1 + 53 | 0; //@line 17275
  $12 = HEAP8[$11 >> 0] | 0; //@line 17276
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 17279
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 17280
  HEAP8[$9 >> 0] = 0; //@line 17281
  HEAP8[$11 >> 0] = 0; //@line 17282
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 17283
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 17284
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 713; //@line 17287
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 17289
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 17291
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 17293
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 17295
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 17297
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 17299
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 17301
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 17303
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 17305
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 17307
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 17310
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 17312
   sp = STACKTOP; //@line 17313
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17316
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 17321
    $32 = $0 + 8 | 0; //@line 17322
    $33 = $1 + 54 | 0; //@line 17323
    $$0 = $0 + 24 | 0; //@line 17324
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 17357
     HEAP8[$11 >> 0] = 0; //@line 17358
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 17359
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 17360
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 17365
     $62 = $$0 + 8 | 0; //@line 17366
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 17369
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 714; //@line 17374
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 17376
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 17378
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 17380
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 17382
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 17384
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 17386
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 17388
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 17390
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 17392
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 17394
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 17396
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 17398
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 17400
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 17403
    sp = STACKTOP; //@line 17404
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 17408
  HEAP8[$11 >> 0] = $12; //@line 17409
 }
 return;
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13604
      $10 = HEAP32[$9 >> 2] | 0; //@line 13605
      HEAP32[$2 >> 2] = $9 + 4; //@line 13607
      HEAP32[$0 >> 2] = $10; //@line 13608
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13624
      $17 = HEAP32[$16 >> 2] | 0; //@line 13625
      HEAP32[$2 >> 2] = $16 + 4; //@line 13627
      $20 = $0; //@line 13630
      HEAP32[$20 >> 2] = $17; //@line 13632
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 13635
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13651
      $30 = HEAP32[$29 >> 2] | 0; //@line 13652
      HEAP32[$2 >> 2] = $29 + 4; //@line 13654
      $31 = $0; //@line 13655
      HEAP32[$31 >> 2] = $30; //@line 13657
      HEAP32[$31 + 4 >> 2] = 0; //@line 13660
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 13676
      $41 = $40; //@line 13677
      $43 = HEAP32[$41 >> 2] | 0; //@line 13679
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 13682
      HEAP32[$2 >> 2] = $40 + 8; //@line 13684
      $47 = $0; //@line 13685
      HEAP32[$47 >> 2] = $43; //@line 13687
      HEAP32[$47 + 4 >> 2] = $46; //@line 13690
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13706
      $57 = HEAP32[$56 >> 2] | 0; //@line 13707
      HEAP32[$2 >> 2] = $56 + 4; //@line 13709
      $59 = ($57 & 65535) << 16 >> 16; //@line 13711
      $62 = $0; //@line 13714
      HEAP32[$62 >> 2] = $59; //@line 13716
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 13719
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13735
      $72 = HEAP32[$71 >> 2] | 0; //@line 13736
      HEAP32[$2 >> 2] = $71 + 4; //@line 13738
      $73 = $0; //@line 13740
      HEAP32[$73 >> 2] = $72 & 65535; //@line 13742
      HEAP32[$73 + 4 >> 2] = 0; //@line 13745
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13761
      $83 = HEAP32[$82 >> 2] | 0; //@line 13762
      HEAP32[$2 >> 2] = $82 + 4; //@line 13764
      $85 = ($83 & 255) << 24 >> 24; //@line 13766
      $88 = $0; //@line 13769
      HEAP32[$88 >> 2] = $85; //@line 13771
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 13774
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13790
      $98 = HEAP32[$97 >> 2] | 0; //@line 13791
      HEAP32[$2 >> 2] = $97 + 4; //@line 13793
      $99 = $0; //@line 13795
      HEAP32[$99 >> 2] = $98 & 255; //@line 13797
      HEAP32[$99 + 4 >> 2] = 0; //@line 13800
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 13816
      $109 = +HEAPF64[$108 >> 3]; //@line 13817
      HEAP32[$2 >> 2] = $108 + 8; //@line 13819
      HEAPF64[$0 >> 3] = $109; //@line 13820
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 13836
      $116 = +HEAPF64[$115 >> 3]; //@line 13837
      HEAP32[$2 >> 2] = $115 + 8; //@line 13839
      HEAPF64[$0 >> 3] = $116; //@line 13840
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZN7LoRaMac15send_ongoing_txEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15860
 STACKTOP = STACKTOP + 16 | 0; //@line 15861
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15861
 $1 = sp + 1 | 0; //@line 15862
 $2 = sp; //@line 15863
 HEAP8[$0 + 1180 >> 0] = 0; //@line 15865
 $4 = $0 + 1877 | 0; //@line 15866
 $5 = HEAP8[$4 >> 0] | 0; //@line 15867
 $6 = $0 + 4 | 0; //@line 15868
 if ($5 << 24 >> 24 > (__ZN7LoRaPHY23get_minimum_tx_datarateEv($6) | 0) << 24 >> 24) {
  $21 = $5; //@line 15872
 } else {
  $21 = __ZN7LoRaPHY23get_minimum_tx_datarateEv($6) | 0; //@line 15875
 }
 HEAP8[$2 >> 0] = 0; //@line 15877
 $10 = $0 + 2036 | 0; //@line 15878
 HEAP32[$10 >> 2] = 0; //@line 15879
 HEAP32[$10 + 4 >> 2] = 0; //@line 15879
 HEAP32[$10 + 8 >> 2] = 0; //@line 15879
 HEAP32[$10 + 12 >> 2] = 0; //@line 15879
 HEAP32[$10 + 16 >> 2] = 0; //@line 15879
 HEAP32[$10 + 20 >> 2] = 0; //@line 15879
 HEAP32[$0 + 2040 >> 2] = 1; //@line 15881
 HEAP8[$0 + 1699 >> 0] = 1; //@line 15883
 $13 = $0 + 1698 | 0; //@line 15884
 HEAP8[$13 >> 0] = 1; //@line 15885
 $14 = $0 + 2092 | 0; //@line 15886
 switch (HEAP32[$14 >> 2] | 0) {
 case 0:
  {
   HEAP8[$2 >> 0] = 64; //@line 15890
   break;
  }
 case 1:
  {
   HEAP8[$2 >> 0] = -128; //@line 15894
   HEAP8[$13 >> 0] = HEAP8[$0 + 2098 >> 0] | 0; //@line 15897
   break;
  }
 case 3:
  {
   HEAP8[$2 >> 0] = -32; //@line 15901
   break;
  }
 default:
  {
   $$0 = -1002; //@line 15905
   STACKTOP = sp; //@line 15906
   return $$0 | 0; //@line 15906
  }
 }
 $18 = $0 + 1936 | 0; //@line 15909
 do {
  if (!(HEAP8[$18 >> 0] | 0)) {
   if (__ZN7LoRaPHY18verify_tx_datarateEhb($6, $21, 0) | 0) {
    HEAP8[$4 >> 0] = $21; //@line 15916
    $28 = HEAP8[$18 >> 0] << 7 & 255; //@line 15919
    break;
   } else {
    $$0 = -1003; //@line 15922
    STACKTOP = sp; //@line 15923
    return $$0 | 0; //@line 15923
   }
  } else {
   $28 = -128; //@line 15926
  }
 } while (0);
 $24 = HEAP8[$0 + 2096 >> 0] | 0; //@line 15930
 $27 = HEAP16[$0 + 2354 >> 1] | 0; //@line 15933
 HEAP8[$1 >> 0] = $28; //@line 15934
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 15935
 $29 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $2, $1, $24, $0 + 2099 | 0, $27) | 0; //@line 15936
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 453; //@line 15939
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15941
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 15943
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 15945
  HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 15947
  sp = STACKTOP; //@line 15948
  STACKTOP = sp; //@line 15949
  return 0; //@line 15949
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15951
 if ($29 | 0) {
  $$0 = $29; //@line 15954
  STACKTOP = sp; //@line 15955
  return $$0 | 0; //@line 15955
 }
 HEAP8[$0 + 2047 >> 0] = 0; //@line 15958
 HEAP8[$0 + 2046 >> 0] = 0; //@line 15960
 HEAP32[$0 + 2052 >> 2] = HEAP32[$0 + 1760 >> 2]; //@line 15964
 $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15965
 $40 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 15966
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 454; //@line 15969
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 15971
  HEAP32[$AsyncCtx2 + 8 >> 2] = $14; //@line 15973
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 15975
  HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 15977
  sp = STACKTOP; //@line 15978
  STACKTOP = sp; //@line 15979
  return 0; //@line 15979
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 15981
 if ($40 | 0) {
  $$0 = $40; //@line 15984
  STACKTOP = sp; //@line 15985
  return $$0 | 0; //@line 15985
 }
 HEAP32[$0 + 2036 >> 2] = HEAP32[$14 >> 2]; //@line 15989
 $$0 = 0; //@line 15990
 STACKTOP = sp; //@line 15991
 return $$0 | 0; //@line 15991
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $109 = 0, $113 = 0, $12 = 0, $14 = 0, $15 = 0, $20 = 0, $22 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13500
 STACKTOP = STACKTOP + 16 | 0; //@line 13501
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13501
 $3 = sp; //@line 13502
 HEAP32[$3 >> 2] = 0; //@line 13503
 HEAP8[$0 + 2086 >> 0] = HEAP8[$0 + 1701 >> 0] | 0; //@line 13507
 $7 = $0 + 756 | 0; //@line 13508
 $9 = $2 & 65535; //@line 13510
 $12 = $0 + 1712 | 0; //@line 13513
 $14 = $0 + 1442 | 0; //@line 13515
 $15 = $0 + 1443 | 0; //@line 13516
 if (__ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh($7, $1 + 1 | 0, $9 + 65535 & 65535, HEAP32[$12 >> 2] | 0, 128, $15) | 0) {
  HEAP32[$0 + 2076 >> 2] = 13; //@line 13521
  STACKTOP = sp; //@line 13522
  return;
 }
 HEAP8[$14 >> 0] = HEAP8[$1 >> 0] | 0; //@line 13525
 $20 = $9 + -4 | 0; //@line 13526
 $22 = HEAP32[$12 >> 2] | 0; //@line 13528
 $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 13529
 $23 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($7, $14, $20 & 65535, $22, 128, $3) | 0; //@line 13530
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 399; //@line 13533
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13535
  HEAP32[$AsyncCtx + 8 >> 2] = $20; //@line 13537
  HEAP32[$AsyncCtx + 12 >> 2] = $9; //@line 13539
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 13541
  HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 13543
  HEAP32[$AsyncCtx + 24 >> 2] = $12; //@line 13545
  HEAP32[$AsyncCtx + 28 >> 2] = $7; //@line 13547
  HEAP32[$AsyncCtx + 32 >> 2] = $15; //@line 13549
  sp = STACKTOP; //@line 13550
  STACKTOP = sp; //@line 13551
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13553
 if ($23 | 0) {
  HEAP32[$0 + 2076 >> 2] = 13; //@line 13557
  STACKTOP = sp; //@line 13558
  return;
 }
 if (((HEAPU8[$9 + -3 + ($0 + 1442) >> 0] | 0) << 8 | (HEAPU8[$0 + 1442 + $20 >> 0] | 0) | (HEAPU8[$9 + -2 + ($0 + 1442) >> 0] | 0) << 16 | (HEAPU8[$9 + -1 + ($0 + 1442) >> 0] | 0) << 24 | 0) != (HEAP32[$3 >> 2] | 0)) {
  HEAP32[$0 + 2076 >> 2] = 7; //@line 13585
  STACKTOP = sp; //@line 13586
  return;
 }
 if (__ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2_($7, HEAP32[$12 >> 2] | 0, 128, $15, HEAP16[$0 + 1748 >> 1] | 0, $0 + 1716 | 0, $0 + 1732 | 0) | 0) {
  HEAP32[$0 + 2076 >> 2] = 13; //@line 13597
  STACKTOP = sp; //@line 13598
  return;
 }
 HEAP32[$0 + 1752 >> 2] = (HEAPU8[$0 + 1448 >> 0] | 0) << 16 | ((HEAPU8[$0 + 1447 >> 0] | 0) << 8 | (HEAPU8[$0 + 1446 >> 0] | 0)); //@line 13614
 HEAP32[$0 + 1756 >> 2] = (HEAPU8[$0 + 1452 >> 0] | 0) << 24 | ((HEAPU8[$0 + 1451 >> 0] | 0) << 16 | ((HEAPU8[$0 + 1450 >> 0] | 0) << 8 | (HEAPU8[$0 + 1449 >> 0] | 0))); //@line 13634
 $99 = HEAP8[$0 + 1453 >> 0] | 0; //@line 13636
 HEAP8[$0 + 1909 >> 0] = ($99 & 255) >>> 4 & 7; //@line 13642
 HEAP8[$0 + 1916 >> 0] = $99 & 15; //@line 13645
 $109 = HEAP8[$0 + 1454 >> 0] & 15; //@line 13648
 $113 = $109 << 24 >> 24 == 0 ? 1e3 : ($109 & 255) * 1e3 | 0; //@line 13653
 HEAP32[$0 + 1892 >> 2] = $113; //@line 13654
 HEAP32[$0 + 1896 >> 2] = $113 + 1e3; //@line 13657
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13662
 __ZN7LoRaPHY13apply_cf_listEPKhh($0 + 4 | 0, $0 + 1455 | 0, $9 + 239 & 255); //@line 13663
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 400; //@line 13666
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 13668
  HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 13670
  sp = STACKTOP; //@line 13671
  STACKTOP = sp; //@line 13672
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13674
 HEAP32[$0 + 2076 >> 2] = 0; //@line 13676
 HEAP8[$0 + 2360 >> 0] = 1; //@line 13678
 HEAP32[$0 + 1760 >> 2] = 0; //@line 13680
 HEAP8[$0 + 1184 >> 0] = 0; //@line 13682
 STACKTOP = sp; //@line 13683
 return;
}
function __ZN7LoRaMac16set_device_classERK14device_class_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $25 = 0, $3 = 0, $38 = 0, $43 = 0, $44 = 0, $49 = 0, $51 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 16000
 $2 = HEAP32[$1 >> 2] | 0; //@line 16001
 $3 = $0 + 2364 | 0; //@line 16002
 HEAP32[$3 >> 2] = $2; //@line 16003
 L1 : do {
  switch ($2 | 0) {
  case 0:
   {
    $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16008
    __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 16009
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 455; //@line 16012
     HEAP32[$AsyncCtx7 + 4 >> 2] = $3; //@line 16014
     HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 16016
     sp = STACKTOP; //@line 16017
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 16020
     break L1;
    }
    break;
   }
  case 2:
   {
    HEAP8[$0 + 1177 >> 0] = 0; //@line 16027
    $8 = $0 + 4 | 0; //@line 16028
    $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16029
    __ZN7LoRaPHY18put_radio_to_sleepEv($8); //@line 16030
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 456; //@line 16033
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 16035
     HEAP32[$AsyncCtx3 + 8 >> 2] = $8; //@line 16037
     HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 16039
     sp = STACKTOP; //@line 16040
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16043
     __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($8, HEAP8[$0 + 1916 >> 0] | 0, HEAP8[$0 + 1884 >> 0] | 0, HEAP32[$0 + 1880 >> 2] | 0, $0 + 1964 | 0); //@line 16051
     break L1;
    }
    break;
   }
  default:
   {
    return;
   }
  }
 } while (0);
 if ((HEAP32[$3 >> 2] | 0) != 2) {
  return;
 }
 $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16067
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 16068
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 457; //@line 16071
  HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 16073
  HEAP32[$AsyncCtx15 + 8 >> 2] = $3; //@line 16075
  sp = STACKTOP; //@line 16076
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 16079
 $25 = $0 + 1964 | 0; //@line 16082
 HEAP8[$25 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 16083
 HEAP32[$0 + 1968 >> 2] = HEAP32[$0 + 1912 >> 2]; //@line 16087
 HEAP8[$0 + 1980 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 16091
 HEAP8[$0 + 1981 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 16095
 HEAP32[$0 + 1984 >> 2] = 1; //@line 16097
 $38 = $0 + 1982 | 0; //@line 16100
 HEAP8[$38 >> 0] = (HEAP32[$3 >> 2] | 0) == 2 & 1; //@line 16102
 HEAP8[$0 + 2010 >> 0] = HEAP8[$0 + 1965 >> 0] | 0; //@line 16106
 $43 = $0 + 4 | 0; //@line 16107
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16108
 $44 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($43, $25) | 0; //@line 16109
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 458; //@line 16112
  HEAP32[$AsyncCtx11 + 4 >> 2] = $38; //@line 16114
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 16116
  HEAP32[$AsyncCtx11 + 12 >> 2] = $43; //@line 16118
  sp = STACKTOP; //@line 16119
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 16122
 if (!$44) {
  return;
 }
 $49 = (HEAP8[$38 >> 0] | 0) != 0; //@line 16127
 $51 = HEAP32[$0 + 1888 >> 2] | 0; //@line 16129
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 16130
 __ZN7LoRaPHY15setup_rx_windowEbj($43, $49, $51); //@line 16131
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 459; //@line 16134
  HEAP32[$AsyncCtx + 4 >> 2] = $38; //@line 16136
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 16138
  sp = STACKTOP; //@line 16139
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16142
 HEAP32[$0 + 1168 >> 2] = HEAP8[$38 >> 0] | 0 ? 2 : 1; //@line 16147
 return;
}
function __ZN12radio_eventsD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $37 = 0, $41 = 0, $44 = 0, $47 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5895
 $2 = HEAP32[$0 + 108 >> 2] | 0; //@line 5897
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 5903
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5904
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 96 | 0); //@line 5905
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 172; //@line 5908
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5910
    sp = STACKTOP; //@line 5911
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5914
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 92 >> 2] | 0; //@line 5920
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 5926
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5927
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 80 | 0); //@line 5928
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 173; //@line 5931
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5933
    sp = STACKTOP; //@line 5934
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5937
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 76 >> 2] | 0; //@line 5943
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 5949
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5950
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 64 | 0); //@line 5951
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 174; //@line 5954
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 5956
    sp = STACKTOP; //@line 5957
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5960
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 60 >> 2] | 0; //@line 5966
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 5972
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5973
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 48 | 0); //@line 5974
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 175; //@line 5977
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 5979
    sp = STACKTOP; //@line 5980
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5983
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 44 >> 2] | 0; //@line 5989
 do {
  if ($30 | 0) {
   $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 5995
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5996
   FUNCTION_TABLE_vi[$34 & 1023]($0 + 32 | 0); //@line 5997
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 176; //@line 6000
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 6002
    sp = STACKTOP; //@line 6003
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6006
    break;
   }
  }
 } while (0);
 $37 = HEAP32[$0 + 28 >> 2] | 0; //@line 6012
 do {
  if ($37 | 0) {
   $41 = HEAP32[$37 + 8 >> 2] | 0; //@line 6018
   $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6019
   FUNCTION_TABLE_vi[$41 & 1023]($0 + 16 | 0); //@line 6020
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 177; //@line 6023
    HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 6025
    sp = STACKTOP; //@line 6026
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 6029
    break;
   }
  }
 } while (0);
 $44 = HEAP32[$0 + 12 >> 2] | 0; //@line 6035
 if (!$44) {
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 6041
 $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6042
 FUNCTION_TABLE_vi[$47 & 1023]($0); //@line 6043
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 178; //@line 6046
  sp = STACKTOP; //@line 6047
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6050
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_255($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5341
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5343
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5345
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5347
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 5349
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 5351
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 5353
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 5355
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 5357
 $17 = $4 + 2364 | 0; //@line 5358
 if ((HEAP32[$17 >> 2] | 0) == 2) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(28) | 0; //@line 5362
  __ZN18LoRaWANTimeHandler4stopER13timer_event_t($14, $16); //@line 5363
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 424; //@line 5366
   $20 = $ReallocAsyncCtx7 + 4 | 0; //@line 5367
   HEAP32[$20 >> 2] = $2; //@line 5368
   $21 = $ReallocAsyncCtx7 + 8 | 0; //@line 5369
   HEAP32[$21 >> 2] = $4; //@line 5370
   $22 = $ReallocAsyncCtx7 + 12 | 0; //@line 5371
   HEAP32[$22 >> 2] = $6; //@line 5372
   $23 = $ReallocAsyncCtx7 + 16 | 0; //@line 5373
   HEAP16[$23 >> 1] = $8; //@line 5374
   $24 = $ReallocAsyncCtx7 + 18 | 0; //@line 5375
   HEAP16[$24 >> 1] = $10; //@line 5376
   $25 = $ReallocAsyncCtx7 + 20 | 0; //@line 5377
   HEAP8[$25 >> 0] = $12; //@line 5378
   $26 = $ReallocAsyncCtx7 + 24 | 0; //@line 5379
   HEAP32[$26 >> 2] = $17; //@line 5380
   sp = STACKTOP; //@line 5381
   return;
  }
  ___async_unwind = 0; //@line 5384
  HEAP32[$ReallocAsyncCtx7 >> 2] = 424; //@line 5385
  $20 = $ReallocAsyncCtx7 + 4 | 0; //@line 5386
  HEAP32[$20 >> 2] = $2; //@line 5387
  $21 = $ReallocAsyncCtx7 + 8 | 0; //@line 5388
  HEAP32[$21 >> 2] = $4; //@line 5389
  $22 = $ReallocAsyncCtx7 + 12 | 0; //@line 5390
  HEAP32[$22 >> 2] = $6; //@line 5391
  $23 = $ReallocAsyncCtx7 + 16 | 0; //@line 5392
  HEAP16[$23 >> 1] = $8; //@line 5393
  $24 = $ReallocAsyncCtx7 + 18 | 0; //@line 5394
  HEAP16[$24 >> 1] = $10; //@line 5395
  $25 = $ReallocAsyncCtx7 + 20 | 0; //@line 5396
  HEAP8[$25 >> 0] = $12; //@line 5397
  $26 = $ReallocAsyncCtx7 + 24 | 0; //@line 5398
  HEAP32[$26 >> 2] = $17; //@line 5399
  sp = STACKTOP; //@line 5400
  return;
 } else {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 5404
  __ZN7LoRaPHY18put_radio_to_sleepEv($4 + 4 | 0); //@line 5405
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 427; //@line 5408
   $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 5409
   HEAP32[$28 >> 2] = $2; //@line 5410
   $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 5411
   HEAP32[$29 >> 2] = $4; //@line 5412
   $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 5413
   HEAP32[$30 >> 2] = $6; //@line 5414
   $31 = $ReallocAsyncCtx4 + 16 | 0; //@line 5415
   HEAP16[$31 >> 1] = $8; //@line 5416
   $32 = $ReallocAsyncCtx4 + 18 | 0; //@line 5417
   HEAP16[$32 >> 1] = $10; //@line 5418
   $33 = $ReallocAsyncCtx4 + 20 | 0; //@line 5419
   HEAP8[$33 >> 0] = $12; //@line 5420
   sp = STACKTOP; //@line 5421
   return;
  }
  ___async_unwind = 0; //@line 5424
  HEAP32[$ReallocAsyncCtx4 >> 2] = 427; //@line 5425
  $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 5426
  HEAP32[$28 >> 2] = $2; //@line 5427
  $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 5428
  HEAP32[$29 >> 2] = $4; //@line 5429
  $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 5430
  HEAP32[$30 >> 2] = $6; //@line 5431
  $31 = $ReallocAsyncCtx4 + 16 | 0; //@line 5432
  HEAP16[$31 >> 1] = $8; //@line 5433
  $32 = $ReallocAsyncCtx4 + 18 | 0; //@line 5434
  HEAP16[$32 >> 1] = $10; //@line 5435
  $33 = $ReallocAsyncCtx4 + 20 | 0; //@line 5436
  HEAP8[$33 >> 0] = $12; //@line 5437
  sp = STACKTOP; //@line 5438
  return;
 }
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_314($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 12058
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12060
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12064
 $8 = $0 + 16 | 0; //@line 12066
 $10 = HEAP32[$8 >> 2] | 0; //@line 12068
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 12071
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 12073
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 12075
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 12077
 $21 = HEAP32[$0 + 36 >> 2] | 0; //@line 12079
 $23 = HEAP32[$0 + 40 >> 2] | 0; //@line 12081
 $25 = HEAP32[$0 + 44 >> 2] | 0; //@line 12083
 $27 = HEAP32[$0 + 48 >> 2] | 0; //@line 12085
 $29 = HEAP32[$0 + 52 >> 2] | 0; //@line 12087
 $31 = HEAP32[$0 + 56 >> 2] | 0; //@line 12089
 $33 = HEAP32[$0 + 60 >> 2] | 0; //@line 12091
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 12093
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 12094
 $34 = HEAP32[$2 >> 2] | 0; //@line 12095
 if ($34 | 0) {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 12099
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(40) | 0; //@line 12100
  FUNCTION_TABLE_vi[$37 & 1023]($17); //@line 12101
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 12104
   $38 = $ReallocAsyncCtx6 + 4 | 0; //@line 12105
   HEAP32[$38 >> 2] = $15; //@line 12106
   $39 = $ReallocAsyncCtx6 + 8 | 0; //@line 12107
   HEAP32[$39 >> 2] = $19; //@line 12108
   $40 = $ReallocAsyncCtx6 + 12 | 0; //@line 12109
   HEAP32[$40 >> 2] = $21; //@line 12110
   $41 = $ReallocAsyncCtx6 + 16 | 0; //@line 12111
   HEAP32[$41 >> 2] = $23; //@line 12112
   $42 = $ReallocAsyncCtx6 + 20 | 0; //@line 12113
   HEAP32[$42 >> 2] = $25; //@line 12114
   $43 = $ReallocAsyncCtx6 + 24 | 0; //@line 12115
   HEAP32[$43 >> 2] = $27; //@line 12116
   $44 = $ReallocAsyncCtx6 + 28 | 0; //@line 12117
   HEAP32[$44 >> 2] = $29; //@line 12118
   $45 = $ReallocAsyncCtx6 + 32 | 0; //@line 12119
   HEAP32[$45 >> 2] = $31; //@line 12120
   $46 = $ReallocAsyncCtx6 + 36 | 0; //@line 12121
   HEAP32[$46 >> 2] = $33; //@line 12122
   sp = STACKTOP; //@line 12123
   return;
  }
  ___async_unwind = 0; //@line 12126
  HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 12127
  $38 = $ReallocAsyncCtx6 + 4 | 0; //@line 12128
  HEAP32[$38 >> 2] = $15; //@line 12129
  $39 = $ReallocAsyncCtx6 + 8 | 0; //@line 12130
  HEAP32[$39 >> 2] = $19; //@line 12131
  $40 = $ReallocAsyncCtx6 + 12 | 0; //@line 12132
  HEAP32[$40 >> 2] = $21; //@line 12133
  $41 = $ReallocAsyncCtx6 + 16 | 0; //@line 12134
  HEAP32[$41 >> 2] = $23; //@line 12135
  $42 = $ReallocAsyncCtx6 + 20 | 0; //@line 12136
  HEAP32[$42 >> 2] = $25; //@line 12137
  $43 = $ReallocAsyncCtx6 + 24 | 0; //@line 12138
  HEAP32[$43 >> 2] = $27; //@line 12139
  $44 = $ReallocAsyncCtx6 + 28 | 0; //@line 12140
  HEAP32[$44 >> 2] = $29; //@line 12141
  $45 = $ReallocAsyncCtx6 + 32 | 0; //@line 12142
  HEAP32[$45 >> 2] = $31; //@line 12143
  $46 = $ReallocAsyncCtx6 + 36 | 0; //@line 12144
  HEAP32[$46 >> 2] = $33; //@line 12145
  sp = STACKTOP; //@line 12146
  return;
 }
 if (!(HEAP8[$15 + 770 >> 0] | 0)) {
  HEAP32[$19 >> 2] = 6; //@line 12153
  _mbed_tracef(16, 11020, 11077, $19); //@line 12154
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($15); //@line 12155
  HEAP32[$23 >> 2] = 6; //@line 12156
  _mbed_tracef(16, 11020, 11106, $23); //@line 12157
  return;
 } else {
  HEAP32[$27 >> 2] = 5; //@line 12160
  _mbed_tracef(16, 11020, 11077, $27); //@line 12161
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($15); //@line 12162
  HEAP32[$31 >> 2] = 5; //@line 12163
  _mbed_tracef(16, 11020, 11106, $31); //@line 12164
  return;
 }
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $18 = 0, $27 = 0, $32 = 0, $33 = 0, $6 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19437
 $6 = $0 + 344 | 0; //@line 19438
 _mbedtls_cipher_init($6); //@line 19439
 $7 = _mbedtls_cipher_info_from_type(2) | 0; //@line 19440
 if (!$7) {
  $$0 = -24960; //@line 19443
 } else {
  $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 19445
  $9 = _mbedtls_cipher_setup($6, $7) | 0; //@line 19446
  if (___async) {
   HEAP32[$AsyncCtx11 >> 2] = 504; //@line 19449
   HEAP32[$AsyncCtx11 + 4 >> 2] = $6; //@line 19451
   HEAP32[$AsyncCtx11 + 8 >> 2] = $3; //@line 19453
   HEAP32[$AsyncCtx11 + 12 >> 2] = $4; //@line 19455
   HEAP16[$AsyncCtx11 + 16 >> 1] = $2; //@line 19457
   HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 19459
   HEAP32[$AsyncCtx11 + 24 >> 2] = $0; //@line 19461
   HEAP32[$AsyncCtx11 + 28 >> 2] = $5; //@line 19463
   sp = STACKTOP; //@line 19464
   return 0; //@line 19465
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 19467
  if (!$9) {
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19470
   $18 = _mbedtls_cipher_cmac_starts($6, $3, $4) | 0; //@line 19471
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 505; //@line 19474
    HEAP16[$AsyncCtx7 + 4 >> 1] = $2; //@line 19476
    HEAP32[$AsyncCtx7 + 8 >> 2] = $6; //@line 19478
    HEAP32[$AsyncCtx7 + 12 >> 2] = $1; //@line 19480
    HEAP32[$AsyncCtx7 + 16 >> 2] = $0; //@line 19482
    HEAP32[$AsyncCtx7 + 20 >> 2] = $5; //@line 19484
    sp = STACKTOP; //@line 19485
    return 0; //@line 19486
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 19488
   if (!$18) {
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 19493
    $27 = _mbedtls_cipher_cmac_update($6, $1, $2 & 255) | 0; //@line 19494
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 506; //@line 19497
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 19499
     HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 19501
     HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 19503
     sp = STACKTOP; //@line 19504
     return 0; //@line 19505
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 19507
    if (!$27) {
     $32 = $0 + 16 | 0; //@line 19510
     $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 19511
     $33 = _mbedtls_cipher_cmac_finish($6, $32) | 0; //@line 19512
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 507; //@line 19515
      HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 19517
      HEAP32[$AsyncCtx3 + 8 >> 2] = $32; //@line 19519
      HEAP32[$AsyncCtx3 + 12 >> 2] = $5; //@line 19521
      HEAP32[$AsyncCtx3 + 16 >> 2] = $6; //@line 19523
      sp = STACKTOP; //@line 19524
      return 0; //@line 19525
     }
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 19527
     if (!$33) {
      HEAP32[$5 >> 2] = (HEAPU8[$0 + 18 >> 0] | 0) << 16 | (HEAPU8[$0 + 19 >> 0] | 0) << 24 | (HEAPU8[$0 + 17 >> 0] | 0) << 8 | (HEAPU8[$32 >> 0] | 0); //@line 19547
      $$0 = 0; //@line 19548
     } else {
      $$0 = $33; //@line 19550
     }
    } else {
     $$0 = $27; //@line 19553
    }
   } else {
    $$0 = $18; //@line 19556
   }
  } else {
   $$0 = $9; //@line 19559
  }
 }
 $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19562
 _mbedtls_cipher_free($6); //@line 19563
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 508; //@line 19566
  HEAP32[$AsyncCtx15 + 4 >> 2] = $$0; //@line 19568
  sp = STACKTOP; //@line 19569
  return 0; //@line 19570
 } else {
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 19572
  return $$0 | 0; //@line 19573
 }
 return 0; //@line 19575
}
function _main__async_cb_15($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 19044
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19046
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19048
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19050
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19052
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19054
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19056
 if (!$AsyncRetVal) {
  HEAP32[$10 >> 2] = 0; //@line 19059
  HEAP32[$10 + 4 >> 2] = 0; //@line 19059
  HEAP32[$10 + 8 >> 2] = 0; //@line 19059
  HEAP32[$10 + 12 >> 2] = 0; //@line 19059
  $32 = 1; //@line 19060
  $34 = $10; //@line 19060
 } else {
  HEAP32[$AsyncRetVal + 4 >> 2] = 20480; //@line 19063
  HEAP32[$AsyncRetVal + 8 >> 2] = 0; //@line 19065
  HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 19067
  HEAP32[$AsyncRetVal + 16 >> 2] = -1; //@line 19069
  HEAP32[$AsyncRetVal + 20 >> 2] = 10; //@line 19071
  HEAP32[$AsyncRetVal + 24 >> 2] = 651; //@line 19073
  HEAP32[$AsyncRetVal + 28 >> 2] = 7; //@line 19075
  HEAP32[$AsyncRetVal >> 2] = 1; //@line 19076
  $20 = $10 + 4 | 0; //@line 19077
  HEAP32[$20 >> 2] = 0; //@line 19078
  HEAP32[$20 + 4 >> 2] = 0; //@line 19078
  HEAP32[$20 + 8 >> 2] = 0; //@line 19078
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19079
  HEAP32[$AsyncRetVal >> 2] = (HEAP32[$AsyncRetVal >> 2] | 0) + 1; //@line 19082
  $32 = 0; //@line 19083
  $34 = $10; //@line 19083
 }
 $23 = $10 + 12 | 0; //@line 19085
 HEAP32[$23 >> 2] = 10244; //@line 19086
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(40) | 0; //@line 19087
 __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE(20408, $10); //@line 19088
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 652; //@line 19091
  $24 = $ReallocAsyncCtx13 + 4 | 0; //@line 19092
  HEAP32[$24 >> 2] = $2; //@line 19093
  $25 = $ReallocAsyncCtx13 + 8 | 0; //@line 19094
  HEAP32[$25 >> 2] = $4; //@line 19095
  $26 = $ReallocAsyncCtx13 + 12 | 0; //@line 19096
  HEAP32[$26 >> 2] = $6; //@line 19097
  $27 = $ReallocAsyncCtx13 + 16 | 0; //@line 19098
  HEAP32[$27 >> 2] = $8; //@line 19099
  $28 = $ReallocAsyncCtx13 + 20 | 0; //@line 19100
  HEAP32[$28 >> 2] = $AsyncRetVal; //@line 19101
  $29 = $ReallocAsyncCtx13 + 24 | 0; //@line 19102
  HEAP32[$29 >> 2] = $23; //@line 19103
  $30 = $ReallocAsyncCtx13 + 28 | 0; //@line 19104
  HEAP32[$30 >> 2] = $AsyncRetVal; //@line 19105
  $31 = $ReallocAsyncCtx13 + 32 | 0; //@line 19106
  $$expand_i1_val = $32 & 1; //@line 19107
  HEAP8[$31 >> 0] = $$expand_i1_val; //@line 19108
  $33 = $ReallocAsyncCtx13 + 36 | 0; //@line 19109
  HEAP32[$33 >> 2] = $34; //@line 19110
  sp = STACKTOP; //@line 19111
  return;
 }
 ___async_unwind = 0; //@line 19114
 HEAP32[$ReallocAsyncCtx13 >> 2] = 652; //@line 19115
 $24 = $ReallocAsyncCtx13 + 4 | 0; //@line 19116
 HEAP32[$24 >> 2] = $2; //@line 19117
 $25 = $ReallocAsyncCtx13 + 8 | 0; //@line 19118
 HEAP32[$25 >> 2] = $4; //@line 19119
 $26 = $ReallocAsyncCtx13 + 12 | 0; //@line 19120
 HEAP32[$26 >> 2] = $6; //@line 19121
 $27 = $ReallocAsyncCtx13 + 16 | 0; //@line 19122
 HEAP32[$27 >> 2] = $8; //@line 19123
 $28 = $ReallocAsyncCtx13 + 20 | 0; //@line 19124
 HEAP32[$28 >> 2] = $AsyncRetVal; //@line 19125
 $29 = $ReallocAsyncCtx13 + 24 | 0; //@line 19126
 HEAP32[$29 >> 2] = $23; //@line 19127
 $30 = $ReallocAsyncCtx13 + 28 | 0; //@line 19128
 HEAP32[$30 >> 2] = $AsyncRetVal; //@line 19129
 $31 = $ReallocAsyncCtx13 + 32 | 0; //@line 19130
 $$expand_i1_val = $32 & 1; //@line 19131
 HEAP8[$31 >> 0] = $$expand_i1_val; //@line 19132
 $33 = $ReallocAsyncCtx13 + 36 | 0; //@line 19133
 HEAP32[$33 >> 2] = $34; //@line 19134
 sp = STACKTOP; //@line 19135
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_186($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $24 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $41 = 0, $44 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 598
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 604
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 606
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 608
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 610
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 612
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 614
 if ((HEAP8[$0 + 4 >> 0] | 0) == 7) {
  if (HEAP8[(HEAP32[$0 + 8 >> 2] | 0) + 14 >> 0] | 0) {
   $21 = HEAP32[$6 >> 2] | 0; //@line 621
   $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 16 >> 2] | 0; //@line 624
   $29 = HEAP32[$8 + 8 >> 2] & 65535; //@line 629
   $32 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 632
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 633
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$24 & 1]($21, 0, 5e4, ($10 & 255) * 1e3 | 0, 0, 83333, 5, $29, 0, 0, 1, 0, 0, 0, $32); //@line 634
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 520; //@line 637
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 638
    HEAP32[$33 >> 2] = $8; //@line 639
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 640
    HEAP32[$34 >> 2] = $12; //@line 641
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 642
    HEAP32[$35 >> 2] = $14; //@line 643
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 644
    HEAP32[$36 >> 2] = $16; //@line 645
    $37 = $ReallocAsyncCtx6 + 20 | 0; //@line 646
    HEAP32[$37 >> 2] = $6; //@line 647
    sp = STACKTOP; //@line 648
    return;
   }
   ___async_unwind = 0; //@line 651
   HEAP32[$ReallocAsyncCtx6 >> 2] = 520; //@line 652
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 653
   HEAP32[$33 >> 2] = $8; //@line 654
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 655
   HEAP32[$34 >> 2] = $12; //@line 656
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 657
   HEAP32[$35 >> 2] = $14; //@line 658
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 659
   HEAP32[$36 >> 2] = $16; //@line 660
   $37 = $ReallocAsyncCtx6 + 20 | 0; //@line 661
   HEAP32[$37 >> 2] = $6; //@line 662
   sp = STACKTOP; //@line 663
   return;
  }
 }
 $38 = HEAP32[$6 >> 2] | 0; //@line 667
 $41 = HEAP32[(HEAP32[$38 >> 2] | 0) + 16 >> 2] | 0; //@line 670
 $44 = HEAPU8[$8 + 2 >> 0] | 0; //@line 673
 $48 = HEAP32[$8 + 8 >> 2] & 65535; //@line 677
 $51 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 680
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 681
 FUNCTION_TABLE_viiiiiiiiiiiiiii[$41 & 1]($38, 1, $44, $10 & 255, 1, 0, 8, $48, 0, 0, 0, 0, 0, 1, $51); //@line 682
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 521; //@line 685
  $52 = $ReallocAsyncCtx7 + 4 | 0; //@line 686
  HEAP32[$52 >> 2] = $8; //@line 687
  $53 = $ReallocAsyncCtx7 + 8 | 0; //@line 688
  HEAP32[$53 >> 2] = $12; //@line 689
  $54 = $ReallocAsyncCtx7 + 12 | 0; //@line 690
  HEAP32[$54 >> 2] = $14; //@line 691
  $55 = $ReallocAsyncCtx7 + 16 | 0; //@line 692
  HEAP32[$55 >> 2] = $16; //@line 693
  $56 = $ReallocAsyncCtx7 + 20 | 0; //@line 694
  HEAP32[$56 >> 2] = $6; //@line 695
  sp = STACKTOP; //@line 696
  return;
 }
 ___async_unwind = 0; //@line 699
 HEAP32[$ReallocAsyncCtx7 >> 2] = 521; //@line 700
 $52 = $ReallocAsyncCtx7 + 4 | 0; //@line 701
 HEAP32[$52 >> 2] = $8; //@line 702
 $53 = $ReallocAsyncCtx7 + 8 | 0; //@line 703
 HEAP32[$53 >> 2] = $12; //@line 704
 $54 = $ReallocAsyncCtx7 + 12 | 0; //@line 705
 HEAP32[$54 >> 2] = $14; //@line 706
 $55 = $ReallocAsyncCtx7 + 16 | 0; //@line 707
 HEAP32[$55 >> 2] = $16; //@line 708
 $56 = $ReallocAsyncCtx7 + 20 | 0; //@line 709
 HEAP32[$56 >> 2] = $6; //@line 710
 sp = STACKTOP; //@line 711
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhthbb($0, $1, $2, $3, $trunc, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $trunc = $trunc | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$1 = 0, $21 = 0, $22 = 0, $25 = 0, $29 = 0, $35 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11297
 STACKTOP = STACKTOP + 32 | 0; //@line 11298
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11298
 $vararg_buffer3 = sp + 16 | 0; //@line 11299
 $vararg_buffer1 = sp + 8 | 0; //@line 11300
 $vararg_buffer = sp; //@line 11301
 if (!(($2 | 0) != 0 | $4)) {
  $$1 = -1003; //@line 11305
  STACKTOP = sp; //@line 11306
  return $$1 | 0; //@line 11306
 }
 $7 = $0 + 2877 | 0; //@line 11308
 do {
  if (HEAP8[$7 >> 0] | 0) {
   HEAP8[$7 >> 0] = 1; //@line 11313
   if (!(HEAP32[$0 + 2512 >> 2] | 0)) {
    _mbed_tracef(2, 12506, 12986, $vararg_buffer); //@line 11318
    break;
   } else {
    __ZN7LoRaMac24setup_link_check_requestEv($0); //@line 11321
    break;
   }
  }
 } while (0);
 if (!(HEAP8[$0 + 2532 >> 0] | 0)) {
  $$1 = -1017; //@line 11330
  STACKTOP = sp; //@line 11331
  return $$1 | 0; //@line 11331
 }
 if (__ZN7LoRaMac10tx_ongoingEv($0) | 0) {
  $$1 = -1001; //@line 11335
  STACKTOP = sp; //@line 11336
  return $$1 | 0; //@line 11336
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($0) | 0)) {
  $$1 = -1009; //@line 11340
  STACKTOP = sp; //@line 11341
  return $$1 | 0; //@line 11341
 }
 if (!($1 << 24 >> 24 != 0 | $5)) {
  _mbed_tracef(2, 12506, 13043, $vararg_buffer1); //@line 11346
  $$1 = -1015; //@line 11347
  STACKTOP = sp; //@line 11348
  return $$1 | 0; //@line 11348
 }
 HEAP8[$0 + 2876 >> 0] = $1; //@line 11351
 switch ($trunc & 15) {
 case 8:
 case 2:
 case 1:
  {
   break;
  }
 default:
  {
   _mbed_tracef(2, 12506, 13080, $vararg_buffer3); //@line 11358
   $$1 = -1003; //@line 11359
   STACKTOP = sp; //@line 11360
   return $$1 | 0; //@line 11360
  }
 }
 $21 = HEAP8[$0 + 2868 >> 0] | 0; //@line 11364
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11365
 $22 = __ZN7LoRaMac18prepare_ongoing_txEhPKhthh($0, $1, $2, $3, $trunc, $21) | 0; //@line 11366
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 361; //@line 11369
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 11371
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 11373
  sp = STACKTOP; //@line 11374
  STACKTOP = sp; //@line 11375
  return 0; //@line 11375
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11377
 $25 = $0 + 2480 | 0; //@line 11378
 switch (HEAP32[$25 >> 2] | 0) {
 case 5:
 case 2:
  {
   label = 17; //@line 11382
   break;
  }
 default:
  {
   if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2) {
    label = 17; //@line 11389
   } else {
    $$0 = -1e3; //@line 11391
   }
  }
 }
 if ((label | 0) == 17) {
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 11396
  $29 = __ZN7LoRaMac15send_ongoing_txEv($0) | 0; //@line 11397
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 362; //@line 11400
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11402
   HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 11404
   HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 11406
   HEAP16[$AsyncCtx + 16 >> 1] = $22; //@line 11408
   sp = STACKTOP; //@line 11409
   STACKTOP = sp; //@line 11410
   return 0; //@line 11410
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11412
  if (!$29) {
   $35 = $0 + 2872 | 0; //@line 11415
   HEAP32[$35 >> 2] = HEAP32[$35 >> 2] & -18 | 1; //@line 11419
   __ZN7LoRaMac14set_tx_ongoingEb($0, 1); //@line 11420
   HEAP32[$25 >> 2] = 8; //@line 11421
   $$0 = 0; //@line 11422
  } else {
   $$0 = $29; //@line 11424
  }
 }
 $$1 = ($$0 | 0) == 0 ? $22 : $$0 & 65535; //@line 11430
 STACKTOP = sp; //@line 11431
 return $$1 | 0; //@line 11431
}
function _mbedtls_ccm_free($0) {
 $0 = $0 | 0;
 var $13 = 0, $17 = 0, $21 = 0, $25 = 0, $29 = 0, $33 = 0, $37 = 0, $41 = 0, $45 = 0, $49 = 0, $5 = 0, $53 = 0, $57 = 0, $61 = 0, $65 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2007
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2008
 _mbedtls_cipher_free($0); //@line 2009
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 570; //@line 2012
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2014
  sp = STACKTOP; //@line 2015
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2018
  HEAP8[$0 >> 0] = 0; //@line 2020
  HEAP8[$0 + 1 >> 0] = 0; //@line 2022
  HEAP8[$0 + 2 >> 0] = 0; //@line 2024
  $5 = $0 + 4 | 0; //@line 2025
  HEAP8[$0 + 3 >> 0] = 0; //@line 2026
  HEAP8[$5 >> 0] = 0; //@line 2028
  HEAP8[$5 + 1 >> 0] = 0; //@line 2030
  HEAP8[$5 + 2 >> 0] = 0; //@line 2032
  $9 = $5 + 4 | 0; //@line 2033
  HEAP8[$5 + 3 >> 0] = 0; //@line 2034
  HEAP8[$9 >> 0] = 0; //@line 2036
  HEAP8[$9 + 1 >> 0] = 0; //@line 2038
  HEAP8[$9 + 2 >> 0] = 0; //@line 2040
  $13 = $5 + 8 | 0; //@line 2041
  HEAP8[$9 + 3 >> 0] = 0; //@line 2042
  HEAP8[$13 >> 0] = 0; //@line 2044
  HEAP8[$13 + 1 >> 0] = 0; //@line 2046
  HEAP8[$13 + 2 >> 0] = 0; //@line 2048
  $17 = $5 + 12 | 0; //@line 2049
  HEAP8[$13 + 3 >> 0] = 0; //@line 2050
  HEAP8[$17 >> 0] = 0; //@line 2052
  HEAP8[$17 + 1 >> 0] = 0; //@line 2054
  HEAP8[$17 + 2 >> 0] = 0; //@line 2056
  $21 = $5 + 16 | 0; //@line 2057
  HEAP8[$17 + 3 >> 0] = 0; //@line 2058
  HEAP8[$21 >> 0] = 0; //@line 2060
  HEAP8[$21 + 1 >> 0] = 0; //@line 2062
  HEAP8[$21 + 2 >> 0] = 0; //@line 2064
  $25 = $5 + 20 | 0; //@line 2065
  HEAP8[$21 + 3 >> 0] = 0; //@line 2066
  HEAP8[$25 >> 0] = 0; //@line 2068
  HEAP8[$25 + 1 >> 0] = 0; //@line 2070
  HEAP8[$25 + 2 >> 0] = 0; //@line 2072
  $29 = $5 + 24 | 0; //@line 2073
  HEAP8[$25 + 3 >> 0] = 0; //@line 2074
  HEAP8[$29 >> 0] = 0; //@line 2076
  HEAP8[$29 + 1 >> 0] = 0; //@line 2078
  HEAP8[$29 + 2 >> 0] = 0; //@line 2080
  $33 = $5 + 28 | 0; //@line 2081
  HEAP8[$29 + 3 >> 0] = 0; //@line 2082
  HEAP8[$33 >> 0] = 0; //@line 2084
  HEAP8[$33 + 1 >> 0] = 0; //@line 2086
  HEAP8[$33 + 2 >> 0] = 0; //@line 2088
  $37 = $5 + 32 | 0; //@line 2089
  HEAP8[$33 + 3 >> 0] = 0; //@line 2090
  HEAP8[$37 >> 0] = 0; //@line 2092
  HEAP8[$37 + 1 >> 0] = 0; //@line 2094
  HEAP8[$37 + 2 >> 0] = 0; //@line 2096
  $41 = $5 + 36 | 0; //@line 2097
  HEAP8[$37 + 3 >> 0] = 0; //@line 2098
  HEAP8[$41 >> 0] = 0; //@line 2100
  HEAP8[$41 + 1 >> 0] = 0; //@line 2102
  HEAP8[$41 + 2 >> 0] = 0; //@line 2104
  $45 = $5 + 40 | 0; //@line 2105
  HEAP8[$41 + 3 >> 0] = 0; //@line 2106
  HEAP8[$45 >> 0] = 0; //@line 2108
  HEAP8[$45 + 1 >> 0] = 0; //@line 2110
  HEAP8[$45 + 2 >> 0] = 0; //@line 2112
  $49 = $5 + 44 | 0; //@line 2113
  HEAP8[$45 + 3 >> 0] = 0; //@line 2114
  HEAP8[$49 >> 0] = 0; //@line 2116
  HEAP8[$49 + 1 >> 0] = 0; //@line 2118
  HEAP8[$49 + 2 >> 0] = 0; //@line 2120
  $53 = $5 + 48 | 0; //@line 2121
  HEAP8[$49 + 3 >> 0] = 0; //@line 2122
  HEAP8[$53 >> 0] = 0; //@line 2124
  HEAP8[$53 + 1 >> 0] = 0; //@line 2126
  HEAP8[$53 + 2 >> 0] = 0; //@line 2128
  $57 = $5 + 52 | 0; //@line 2129
  HEAP8[$53 + 3 >> 0] = 0; //@line 2130
  HEAP8[$57 >> 0] = 0; //@line 2132
  HEAP8[$57 + 1 >> 0] = 0; //@line 2134
  HEAP8[$57 + 2 >> 0] = 0; //@line 2136
  $61 = $5 + 56 | 0; //@line 2137
  HEAP8[$57 + 3 >> 0] = 0; //@line 2138
  HEAP8[$61 >> 0] = 0; //@line 2140
  HEAP8[$61 + 1 >> 0] = 0; //@line 2142
  HEAP8[$61 + 2 >> 0] = 0; //@line 2144
  $65 = $5 + 60 | 0; //@line 2145
  HEAP8[$61 + 3 >> 0] = 0; //@line 2146
  HEAP8[$65 >> 0] = 0; //@line 2148
  HEAP8[$65 + 1 >> 0] = 0; //@line 2150
  HEAP8[$65 + 2 >> 0] = 0; //@line 2152
  HEAP8[$65 + 3 >> 0] = 0; //@line 2153
  return;
 }
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_104($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25384
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25388
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25390
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25392
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25394
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25396
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25398
 $15 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25399
 if (!$15) {
  $25 = $6 + 12 | 0; //@line 25403
  HEAP32[$6 >> 2] = 404; //@line 25404
  HEAP32[$6 + 4 >> 2] = 0; //@line 25406
  HEAP32[$6 + 8 >> 2] = $4; //@line 25408
  HEAP32[$25 >> 2] = 844; //@line 25409
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 25410
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($8, $4 + 1856 | 0, $6); //@line 25411
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 474; //@line 25414
   $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 25415
   HEAP32[$26 >> 2] = $25; //@line 25416
   $27 = $ReallocAsyncCtx5 + 8 | 0; //@line 25417
   HEAP32[$27 >> 2] = $8; //@line 25418
   $28 = $ReallocAsyncCtx5 + 12 | 0; //@line 25419
   HEAP32[$28 >> 2] = $4; //@line 25420
   $29 = $ReallocAsyncCtx5 + 16 | 0; //@line 25421
   HEAP32[$29 >> 2] = $12; //@line 25422
   $30 = $ReallocAsyncCtx5 + 20 | 0; //@line 25423
   HEAP32[$30 >> 2] = $14; //@line 25424
   $31 = $ReallocAsyncCtx5 + 24 | 0; //@line 25425
   HEAP32[$31 >> 2] = $6; //@line 25426
   sp = STACKTOP; //@line 25427
   return;
  }
  ___async_unwind = 0; //@line 25430
  HEAP32[$ReallocAsyncCtx5 >> 2] = 474; //@line 25431
  $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 25432
  HEAP32[$26 >> 2] = $25; //@line 25433
  $27 = $ReallocAsyncCtx5 + 8 | 0; //@line 25434
  HEAP32[$27 >> 2] = $8; //@line 25435
  $28 = $ReallocAsyncCtx5 + 12 | 0; //@line 25436
  HEAP32[$28 >> 2] = $4; //@line 25437
  $29 = $ReallocAsyncCtx5 + 16 | 0; //@line 25438
  HEAP32[$29 >> 2] = $12; //@line 25439
  $30 = $ReallocAsyncCtx5 + 20 | 0; //@line 25440
  HEAP32[$30 >> 2] = $14; //@line 25441
  $31 = $ReallocAsyncCtx5 + 24 | 0; //@line 25442
  HEAP32[$31 >> 2] = $6; //@line 25443
  sp = STACKTOP; //@line 25444
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 25448
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 25449
  FUNCTION_TABLE_vi[$18 & 1023]($10); //@line 25450
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 473; //@line 25453
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 25454
   HEAP32[$19 >> 2] = $4; //@line 25455
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 25456
   HEAP32[$20 >> 2] = $6; //@line 25457
   $21 = $ReallocAsyncCtx3 + 12 | 0; //@line 25458
   HEAP32[$21 >> 2] = $8; //@line 25459
   $22 = $ReallocAsyncCtx3 + 16 | 0; //@line 25460
   HEAP32[$22 >> 2] = $12; //@line 25461
   $23 = $ReallocAsyncCtx3 + 20 | 0; //@line 25462
   HEAP32[$23 >> 2] = $14; //@line 25463
   sp = STACKTOP; //@line 25464
   return;
  }
  ___async_unwind = 0; //@line 25467
  HEAP32[$ReallocAsyncCtx3 >> 2] = 473; //@line 25468
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 25469
  HEAP32[$19 >> 2] = $4; //@line 25470
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 25471
  HEAP32[$20 >> 2] = $6; //@line 25472
  $21 = $ReallocAsyncCtx3 + 12 | 0; //@line 25473
  HEAP32[$21 >> 2] = $8; //@line 25474
  $22 = $ReallocAsyncCtx3 + 16 | 0; //@line 25475
  HEAP32[$22 >> 2] = $12; //@line 25476
  $23 = $ReallocAsyncCtx3 + 20 | 0; //@line 25477
  HEAP32[$23 >> 2] = $14; //@line 25478
  sp = STACKTOP; //@line 25479
  return;
 }
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $13 = 0, $17 = 0, $18 = 0, $19 = 0, $22 = 0, $27 = 0, $31 = 0, $35 = 0, $46 = 0, $52 = 0, $69 = 0, $70 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13810
 $13 = HEAP8[$1 + ($3 + 8 & 255) >> 0] | 0; //@line 13814
 $17 = $3 + 9 & 255; //@line 13818
 $18 = ($2 & 65535) + 252 - $17 | 0; //@line 13819
 $19 = $18 & 255; //@line 13820
 HEAP8[$0 + 2009 >> 0] = $13; //@line 13822
 $22 = $3 << 24 >> 24 == 0; //@line 13824
 if ($13 << 24 >> 24) {
  do {
   if (!$22) {
    $46 = $0 + 476 | 0; //@line 13828
    $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 13834
    $52 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($46, $1, 8, $17 + 255 & 255, $9, $0 + 2068 | 0, $0 + 1876 | 0, $0 + 4 | 0) | 0; //@line 13835
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 403; //@line 13838
     HEAP32[$AsyncCtx + 4 >> 2] = $46; //@line 13840
     HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 13842
     HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 13844
     HEAP32[$AsyncCtx + 16 >> 2] = $17; //@line 13846
     HEAP32[$AsyncCtx + 20 >> 2] = $18; //@line 13848
     HEAP32[$AsyncCtx + 24 >> 2] = $5; //@line 13850
     HEAP32[$AsyncCtx + 28 >> 2] = $6; //@line 13852
     HEAP32[$AsyncCtx + 32 >> 2] = $7; //@line 13854
     sp = STACKTOP; //@line 13855
     return;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13858
    if (!$52) {
     if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($46) | 0)) {
      break;
     }
     HEAP32[$0 + 2060 >> 2] = 4; //@line 13866
     HEAP8[$0 + 2064 >> 0] = 1; //@line 13868
     __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($46); //@line 13869
     break;
    } else {
     HEAP32[$0 + 2004 >> 2] = 1; //@line 13873
     return;
    }
   }
  } while (0);
  $69 = $18 & 255; //@line 13881
  $70 = $0 + 1442 | 0; //@line 13882
  if (!(__ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($0 + 756 | 0, $1 + $17 | 0, $69, $5, 128, $6, 1, $7, $70) | 0)) {
   HEAP32[$0 + 2012 >> 2] = $70; //@line 13887
   HEAP16[$0 + 2016 >> 1] = $69; //@line 13889
   HEAP8[$0 + 2018 >> 0] = 1; //@line 13891
   return;
  } else {
   HEAP32[$0 + 2004 >> 2] = 13; //@line 13895
   return;
  }
 }
 if (!$22) {
  HEAP8[$0 + 1996 >> 0] = 0; //@line 13901
  HEAP8[$0 + 2046 >> 0] = 0; //@line 13903
  HEAP8[$0 + 2028 >> 0] = 0; //@line 13905
  return;
 }
 $27 = $0 + 1442 | 0; //@line 13912
 if (__ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($0 + 756 | 0, $1 + $17 | 0, $18 & 255, $4, 128, $6, 1, $7, $27) | 0) {
  HEAP32[$0 + 2004 >> 2] = 13; //@line 13917
 }
 $31 = $0 + 476 | 0; //@line 13919
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13923
 $35 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($31, $27, 0, $19, $9, $0 + 2068 | 0, $0 + 1876 | 0, $0 + 4 | 0) | 0; //@line 13924
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 402; //@line 13927
  HEAP32[$AsyncCtx3 + 4 >> 2] = $31; //@line 13929
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 13931
  sp = STACKTOP; //@line 13932
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13935
 if ($35 | 0) {
  HEAP32[$0 + 2004 >> 2] = 1; //@line 13939
  return;
 }
 if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($31) | 0)) {
  return;
 }
 HEAP32[$0 + 2060 >> 2] = 4; //@line 13947
 HEAP8[$0 + 2064 >> 0] = 1; //@line 13949
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($31); //@line 13950
 return;
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 12504
 STACKTOP = STACKTOP + 224 | 0; //@line 12505
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 12505
 $3 = sp + 120 | 0; //@line 12506
 $4 = sp + 80 | 0; //@line 12507
 $5 = sp; //@line 12508
 $6 = sp + 136 | 0; //@line 12509
 dest = $4; //@line 12510
 stop = dest + 40 | 0; //@line 12510
 do {
  HEAP32[dest >> 2] = 0; //@line 12510
  dest = dest + 4 | 0; //@line 12510
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 12512
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 12516
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 12523
  } else {
   $43 = 0; //@line 12525
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 12527
  $14 = $13 & 32; //@line 12528
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 12534
  }
  $19 = $0 + 48 | 0; //@line 12536
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 12541
    $24 = HEAP32[$23 >> 2] | 0; //@line 12542
    HEAP32[$23 >> 2] = $6; //@line 12543
    $25 = $0 + 28 | 0; //@line 12544
    HEAP32[$25 >> 2] = $6; //@line 12545
    $26 = $0 + 20 | 0; //@line 12546
    HEAP32[$26 >> 2] = $6; //@line 12547
    HEAP32[$19 >> 2] = 80; //@line 12548
    $28 = $0 + 16 | 0; //@line 12550
    HEAP32[$28 >> 2] = $6 + 80; //@line 12551
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 12552
    if (!$24) {
     $$1 = $29; //@line 12555
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 12558
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 12559
     FUNCTION_TABLE_iiii[$32 & 31]($0, 0, 0) | 0; //@line 12560
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 689; //@line 12563
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 12565
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 12567
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 12569
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 12571
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 12573
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 12575
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 12577
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 12579
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 12581
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 12583
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 12585
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 12587
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 12589
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 12591
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 12593
      sp = STACKTOP; //@line 12594
      STACKTOP = sp; //@line 12595
      return 0; //@line 12595
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 12597
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 12600
      HEAP32[$23 >> 2] = $24; //@line 12601
      HEAP32[$19 >> 2] = 0; //@line 12602
      HEAP32[$28 >> 2] = 0; //@line 12603
      HEAP32[$25 >> 2] = 0; //@line 12604
      HEAP32[$26 >> 2] = 0; //@line 12605
      $$1 = $$; //@line 12606
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 12612
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 12615
  HEAP32[$0 >> 2] = $51 | $14; //@line 12620
  if ($43 | 0) {
   ___unlockfile($0); //@line 12623
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 12625
 }
 STACKTOP = sp; //@line 12627
 return $$0 | 0; //@line 12627
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_200($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 1965
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1967
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1969
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1971
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1973
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1975
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1977
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1979
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1981
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 1986
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 1989
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 1990
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 1991
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 294; //@line 1994
   $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 1995
   HEAP32[$22 >> 2] = $4; //@line 1996
   $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 1997
   HEAP32[$23 >> 2] = $2; //@line 1998
   $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 1999
   HEAP32[$24 >> 2] = $8; //@line 2000
   $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 2001
   HEAP32[$25 >> 2] = $6; //@line 2002
   $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 2003
   HEAP32[$26 >> 2] = $10; //@line 2004
   $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 2005
   HEAP32[$27 >> 2] = $12; //@line 2006
   $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 2007
   HEAP32[$28 >> 2] = $14; //@line 2008
   $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 2009
   HEAP32[$29 >> 2] = $16; //@line 2010
   sp = STACKTOP; //@line 2011
   return;
  }
  ___async_unwind = 0; //@line 2014
  HEAP32[$ReallocAsyncCtx4 >> 2] = 294; //@line 2015
  $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 2016
  HEAP32[$22 >> 2] = $4; //@line 2017
  $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 2018
  HEAP32[$23 >> 2] = $2; //@line 2019
  $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 2020
  HEAP32[$24 >> 2] = $8; //@line 2021
  $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 2022
  HEAP32[$25 >> 2] = $6; //@line 2023
  $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 2024
  HEAP32[$26 >> 2] = $10; //@line 2025
  $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 2026
  HEAP32[$27 >> 2] = $12; //@line 2027
  $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 2028
  HEAP32[$28 >> 2] = $14; //@line 2029
  $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 2030
  HEAP32[$29 >> 2] = $16; //@line 2031
  sp = STACKTOP; //@line 2032
  return;
 }
 if (!(HEAP32[$4 >> 2] & 1)) {
  $34 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 2040
  HEAP32[$8 >> 2] = $34 ? 5 : 2; //@line 2042
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$6 + 2879 >> 0] = 1; //@line 2050
  return;
 }
 _mbed_tracef(16, 12506, 12691, $10); //@line 2053
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 2054
 _mbed_tracef(16, 12506, 12715, $14); //@line 2055
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 2056
 __ZN12LoRaWANStack23mlme_indication_handlerEv($6); //@line 2057
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 295; //@line 2060
  $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 2061
  HEAP32[$39 >> 2] = $6; //@line 2062
  sp = STACKTOP; //@line 2063
  return;
 }
 ___async_unwind = 0; //@line 2066
 HEAP32[$ReallocAsyncCtx2 >> 2] = 295; //@line 2067
 $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 2068
 HEAP32[$39 >> 2] = $6; //@line 2069
 sp = STACKTOP; //@line 2070
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_199($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 1852
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1854
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1856
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1858
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1860
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1862
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1864
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1866
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1868
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 1873
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 1876
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 1877
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 1878
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 294; //@line 1881
   $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 1882
   HEAP32[$22 >> 2] = $4; //@line 1883
   $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 1884
   HEAP32[$23 >> 2] = $2; //@line 1885
   $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 1886
   HEAP32[$24 >> 2] = $8; //@line 1887
   $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 1888
   HEAP32[$25 >> 2] = $6; //@line 1889
   $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 1890
   HEAP32[$26 >> 2] = $10; //@line 1891
   $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 1892
   HEAP32[$27 >> 2] = $12; //@line 1893
   $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 1894
   HEAP32[$28 >> 2] = $14; //@line 1895
   $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 1896
   HEAP32[$29 >> 2] = $16; //@line 1897
   sp = STACKTOP; //@line 1898
   return;
  }
  ___async_unwind = 0; //@line 1901
  HEAP32[$ReallocAsyncCtx4 >> 2] = 294; //@line 1902
  $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 1903
  HEAP32[$22 >> 2] = $4; //@line 1904
  $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 1905
  HEAP32[$23 >> 2] = $2; //@line 1906
  $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 1907
  HEAP32[$24 >> 2] = $8; //@line 1908
  $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 1909
  HEAP32[$25 >> 2] = $6; //@line 1910
  $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 1911
  HEAP32[$26 >> 2] = $10; //@line 1912
  $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 1913
  HEAP32[$27 >> 2] = $12; //@line 1914
  $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 1915
  HEAP32[$28 >> 2] = $14; //@line 1916
  $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 1917
  HEAP32[$29 >> 2] = $16; //@line 1918
  sp = STACKTOP; //@line 1919
  return;
 }
 if (!(HEAP32[$4 >> 2] & 1)) {
  $34 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 1927
  HEAP32[$8 >> 2] = $34 ? 5 : 2; //@line 1929
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$6 + 2879 >> 0] = 1; //@line 1937
  return;
 }
 _mbed_tracef(16, 12506, 12691, $10); //@line 1940
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 1941
 _mbed_tracef(16, 12506, 12715, $14); //@line 1942
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 1943
 __ZN12LoRaWANStack23mlme_indication_handlerEv($6); //@line 1944
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 295; //@line 1947
  $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 1948
  HEAP32[$39 >> 2] = $6; //@line 1949
  sp = STACKTOP; //@line 1950
  return;
 }
 ___async_unwind = 0; //@line 1953
 HEAP32[$ReallocAsyncCtx2 >> 2] = 295; //@line 1954
 $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 1955
 HEAP32[$39 >> 2] = $6; //@line 1956
 sp = STACKTOP; //@line 1957
 return;
}
function __ZN12LoRaWANStack23process_connected_stateEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $14 = 0, $2 = 0, $21 = 0, $22 = 0, $27 = 0, $30 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 10063
 STACKTOP = STACKTOP + 32 | 0; //@line 10064
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10064
 $1 = sp + 8 | 0; //@line 10066
 $2 = $0 + 2872 | 0; //@line 10067
 if (HEAP32[$2 >> 2] & 8 | 0) {
  _mbed_tracef(16, 12506, 12790, sp); //@line 10072
 }
 HEAP8[$0 + 2532 >> 0] = 1; //@line 10075
 $7 = $0 + 2496 | 0; //@line 10076
 $8 = HEAP32[$7 >> 2] | 0; //@line 10077
 do {
  if ($8 | 0) {
   $12 = HEAP32[$0 + 3136 >> 2] | 0; //@line 10083
   $14 = HEAP32[$8 + 4 >> 2] | 0; //@line 10085
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 10086
   FUNCTION_TABLE_vii[$14 & 15]($1, $0 + 2484 | 0); //@line 10087
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 327; //@line 10090
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 10092
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 10094
    HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 10096
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 10098
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 10100
    HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 10102
    sp = STACKTOP; //@line 10103
    STACKTOP = sp; //@line 10104
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 10106
   $21 = $1 + 12 | 0; //@line 10108
   HEAP32[$21 >> 2] = HEAP32[$7 >> 2]; //@line 10109
   $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10110
   $22 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($12, $1, 0) | 0; //@line 10111
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 328; //@line 10114
    HEAP32[$AsyncCtx5 + 4 >> 2] = $21; //@line 10116
    HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 10118
    HEAP32[$AsyncCtx5 + 12 >> 2] = $2; //@line 10120
    HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 10122
    sp = STACKTOP; //@line 10123
    STACKTOP = sp; //@line 10124
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10126
   $27 = HEAP32[$21 >> 2] | 0; //@line 10127
   do {
    if ($27 | 0) {
     $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 10132
     $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10133
     FUNCTION_TABLE_vi[$30 & 1023]($1); //@line 10134
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 329; //@line 10137
      HEAP32[$AsyncCtx2 + 4 >> 2] = $22; //@line 10139
      HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 10141
      HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 10143
      HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 10145
      sp = STACKTOP; //@line 10146
      STACKTOP = sp; //@line 10147
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10149
      break;
     }
    }
   } while (0);
   if (!$22) {
    $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10156
    _mbed_assert_internal(13121, 12408, 646); //@line 10157
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 330; //@line 10160
     HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 10162
     HEAP32[$AsyncCtx9 + 8 >> 2] = $2; //@line 10164
     HEAP32[$AsyncCtx9 + 12 >> 2] = $0; //@line 10166
     sp = STACKTOP; //@line 10167
     STACKTOP = sp; //@line 10168
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 10170
     break;
    }
   }
  }
 } while (0);
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 4; //@line 10178
 HEAP32[$0 + 2480 >> 2] = 2; //@line 10180
 STACKTOP = sp; //@line 10181
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_260($0) {
 $0 = $0 | 0;
 var $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $29 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 5753
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5759
 $14 = HEAP8[$0 + 19 >> 0] | 0; //@line 5769
 $16 = HEAP32[$0 + 20 >> 2] | 0; //@line 5771
 $18 = HEAP32[$0 + 24 >> 2] | 0; //@line 5773
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 5775
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 5777
 $29 = HEAP32[$6 >> 2] | 0; //@line 5784
 $32 = HEAP32[(HEAP32[$29 >> 2] | 0) + 20 >> 2] | 0; //@line 5787
 $34 = HEAP8[$0 + 17 >> 0] & 1 ? 2 : HEAP8[$0 + 16 >> 0] & 1; //@line 5789
 $35 = HEAP8[$0 + 18 >> 0] | 0; //@line 5790
 if ((HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) == (HEAPU8[(HEAP32[$0 + 8 >> 2] | 0) + 27 >> 0] | 0)) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 5793
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 0, $14, 25e3, $34, $35 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 5794
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 526; //@line 5797
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 5798
   HEAP32[$37 >> 2] = $6; //@line 5799
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 5800
   HEAP32[$38 >> 2] = $16; //@line 5801
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 5802
   HEAP32[$39 >> 2] = $18; //@line 5803
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 5804
   HEAP32[$40 >> 2] = $20; //@line 5805
   $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 5806
   HEAP32[$41 >> 2] = $22; //@line 5807
   sp = STACKTOP; //@line 5808
   return;
  }
  ___async_unwind = 0; //@line 5811
  HEAP32[$ReallocAsyncCtx3 >> 2] = 526; //@line 5812
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 5813
  HEAP32[$37 >> 2] = $6; //@line 5814
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 5815
  HEAP32[$38 >> 2] = $16; //@line 5816
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 5817
  HEAP32[$39 >> 2] = $18; //@line 5818
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 5819
  HEAP32[$40 >> 2] = $20; //@line 5820
  $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 5821
  HEAP32[$41 >> 2] = $22; //@line 5822
  sp = STACKTOP; //@line 5823
  return;
 } else {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 5826
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 1, $14, 0, $34, $35, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 5827
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 527; //@line 5830
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 5831
   HEAP32[$42 >> 2] = $6; //@line 5832
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 5833
   HEAP32[$43 >> 2] = $16; //@line 5834
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 5835
   HEAP32[$44 >> 2] = $18; //@line 5836
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 5837
   HEAP32[$45 >> 2] = $20; //@line 5838
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 5839
   HEAP32[$46 >> 2] = $22; //@line 5840
   sp = STACKTOP; //@line 5841
   return;
  }
  ___async_unwind = 0; //@line 5844
  HEAP32[$ReallocAsyncCtx4 >> 2] = 527; //@line 5845
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 5846
  HEAP32[$42 >> 2] = $6; //@line 5847
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 5848
  HEAP32[$43 >> 2] = $16; //@line 5849
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 5850
  HEAP32[$44 >> 2] = $18; //@line 5851
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 5852
  HEAP32[$45 >> 2] = $20; //@line 5853
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 5854
  HEAP32[$46 >> 2] = $22; //@line 5855
  sp = STACKTOP; //@line 5856
  return;
 }
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 16801
 STACKTOP = STACKTOP + 64 | 0; //@line 16802
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 16802
 $4 = sp; //@line 16803
 $5 = HEAP32[$0 >> 2] | 0; //@line 16804
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 16807
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 16809
 HEAP32[$4 >> 2] = $2; //@line 16810
 HEAP32[$4 + 4 >> 2] = $0; //@line 16812
 HEAP32[$4 + 8 >> 2] = $1; //@line 16814
 HEAP32[$4 + 12 >> 2] = $3; //@line 16816
 $14 = $4 + 16 | 0; //@line 16817
 $15 = $4 + 20 | 0; //@line 16818
 $16 = $4 + 24 | 0; //@line 16819
 $17 = $4 + 28 | 0; //@line 16820
 $18 = $4 + 32 | 0; //@line 16821
 $19 = $4 + 40 | 0; //@line 16822
 dest = $14; //@line 16823
 stop = dest + 36 | 0; //@line 16823
 do {
  HEAP32[dest >> 2] = 0; //@line 16823
  dest = dest + 4 | 0; //@line 16823
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 16823
 HEAP8[$14 + 38 >> 0] = 0; //@line 16823
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 16828
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 16831
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 16832
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 16833
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 705; //@line 16836
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 16838
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 16840
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 16842
    sp = STACKTOP; //@line 16843
    STACKTOP = sp; //@line 16844
    return 0; //@line 16844
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16846
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 16850
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 16854
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 16857
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16858
   FUNCTION_TABLE_viiiii[$33 & 7]($10, $4, $8, 1, 0); //@line 16859
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 706; //@line 16862
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 16864
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 16866
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 16868
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 16870
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 16872
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 16874
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 16876
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 16878
    sp = STACKTOP; //@line 16879
    STACKTOP = sp; //@line 16880
    return 0; //@line 16880
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16882
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 16896
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 16904
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 16920
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 16925
  }
 } while (0);
 STACKTOP = sp; //@line 16928
 return $$0 | 0; //@line 16928
}
function __ZN12radio_eventsD2Ev__async_cb_165($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $35 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 31815
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31817
 $4 = HEAP32[$2 + 76 >> 2] | 0; //@line 31819
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 31824
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 31825
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 64 | 0); //@line 31826
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 174; //@line 31829
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 31830
   HEAP32[$9 >> 2] = $2; //@line 31831
   sp = STACKTOP; //@line 31832
   return;
  }
  ___async_unwind = 0; //@line 31835
  HEAP32[$ReallocAsyncCtx3 >> 2] = 174; //@line 31836
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 31837
  HEAP32[$9 >> 2] = $2; //@line 31838
  sp = STACKTOP; //@line 31839
  return;
 }
 $11 = HEAP32[$2 + 60 >> 2] | 0; //@line 31843
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 31848
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 31849
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 48 | 0); //@line 31850
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 175; //@line 31853
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 31854
   HEAP32[$16 >> 2] = $2; //@line 31855
   sp = STACKTOP; //@line 31856
   return;
  }
  ___async_unwind = 0; //@line 31859
  HEAP32[$ReallocAsyncCtx4 >> 2] = 175; //@line 31860
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 31861
  HEAP32[$16 >> 2] = $2; //@line 31862
  sp = STACKTOP; //@line 31863
  return;
 }
 $18 = HEAP32[$2 + 44 >> 2] | 0; //@line 31867
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 31872
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 31873
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 32 | 0); //@line 31874
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 31877
   $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 31878
   HEAP32[$23 >> 2] = $2; //@line 31879
   sp = STACKTOP; //@line 31880
   return;
  }
  ___async_unwind = 0; //@line 31883
  HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 31884
  $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 31885
  HEAP32[$23 >> 2] = $2; //@line 31886
  sp = STACKTOP; //@line 31887
  return;
 }
 $25 = HEAP32[$2 + 28 >> 2] | 0; //@line 31891
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 31896
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 31897
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 16 | 0); //@line 31898
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 31901
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 31902
   HEAP32[$30 >> 2] = $2; //@line 31903
   sp = STACKTOP; //@line 31904
   return;
  }
  ___async_unwind = 0; //@line 31907
  HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 31908
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 31909
  HEAP32[$30 >> 2] = $2; //@line 31910
  sp = STACKTOP; //@line 31911
  return;
 }
 $32 = HEAP32[$2 + 12 >> 2] | 0; //@line 31915
 if (!$32) {
  return;
 }
 $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 31921
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 31922
 FUNCTION_TABLE_vi[$35 & 1023]($2); //@line 31923
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 178; //@line 31926
  sp = STACKTOP; //@line 31927
  return;
 }
 ___async_unwind = 0; //@line 31930
 HEAP32[$ReallocAsyncCtx7 >> 2] = 178; //@line 31931
 sp = STACKTOP; //@line 31932
 return;
}
function _main__async_cb_4($0) {
 $0 = $0 | 0;
 var $$pr = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18352
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18354
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18356
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18358
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18360
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18362
 $$pr = HEAP32[$4 >> 2] | 0; //@line 18363
 if ($$pr | 0) {
  $13 = HEAP32[$$pr + 4 >> 2] | 0; //@line 18367
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 18368
  FUNCTION_TABLE_vii[$13 & 15](23828, $2); //@line 18369
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 658; //@line 18372
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 18373
   HEAP32[$14 >> 2] = $2; //@line 18374
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 18375
   HEAP32[$15 >> 2] = $4; //@line 18376
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 18377
   HEAP32[$16 >> 2] = $6; //@line 18378
   $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 18379
   HEAP32[$17 >> 2] = $8; //@line 18380
   $18 = $ReallocAsyncCtx4 + 20 | 0; //@line 18381
   HEAP32[$18 >> 2] = $10; //@line 18382
   sp = STACKTOP; //@line 18383
   return;
  }
  ___async_unwind = 0; //@line 18386
  HEAP32[$ReallocAsyncCtx4 >> 2] = 658; //@line 18387
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 18388
  HEAP32[$14 >> 2] = $2; //@line 18389
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 18390
  HEAP32[$15 >> 2] = $4; //@line 18391
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 18392
  HEAP32[$16 >> 2] = $6; //@line 18393
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 18394
  HEAP32[$17 >> 2] = $8; //@line 18395
  $18 = $ReallocAsyncCtx4 + 20 | 0; //@line 18396
  HEAP32[$18 >> 2] = $10; //@line 18397
  sp = STACKTOP; //@line 18398
  return;
 }
 HEAP32[5960] = 0; //@line 18401
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(20684, 23828) | 0; //@line 18402
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(20684) | 0) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 18406
  _puts(15408) | 0; //@line 18407
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 660; //@line 18410
   sp = STACKTOP; //@line 18411
   return;
  }
  ___async_unwind = 0; //@line 18414
  HEAP32[$ReallocAsyncCtx7 >> 2] = 660; //@line 18415
  sp = STACKTOP; //@line 18416
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(20684, 5) | 0; //@line 18419
 HEAP8[$10 >> 0] = 0; //@line 18420
 HEAP32[$10 + 4 >> 2] = 24461; //@line 18422
 HEAP32[$10 + 8 >> 2] = 24469; //@line 18424
 HEAP32[$10 + 12 >> 2] = 24477; //@line 18426
 HEAP8[$10 + 16 >> 0] = 3; //@line 18428
 $25 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(20684, $10) | 0; //@line 18429
 switch ($25 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$6 >> 2] = $25; //@line 18435
   _printf(15442, $6) | 0; //@line 18436
   HEAP32[___async_retval >> 2] = -1; //@line 18438
   return;
  }
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 18442
 _puts(15471) | 0; //@line 18443
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 661; //@line 18446
  $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 18447
  HEAP32[$26 >> 2] = $10; //@line 18448
  sp = STACKTOP; //@line 18449
  return;
 }
 ___async_unwind = 0; //@line 18452
 HEAP32[$ReallocAsyncCtx6 >> 2] = 661; //@line 18453
 $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 18454
 HEAP32[$26 >> 2] = $10; //@line 18455
 sp = STACKTOP; //@line 18456
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_24($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19966
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19968
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19970
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19972
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19974
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19976
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19978
 if (HEAP8[___async_retval >> 0] & 1) {
  $15 = (HEAP8[$10 >> 0] | 0) != 0; //@line 19984
  $17 = HEAP32[$2 + 1888 >> 2] | 0; //@line 19986
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 19987
  __ZN7LoRaPHY15setup_rx_windowEbj($12, $15, $17); //@line 19988
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 374; //@line 19991
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 19992
   HEAP32[$18 >> 2] = $10; //@line 19993
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 19994
   HEAP32[$19 >> 2] = $2; //@line 19995
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 19996
   HEAP32[$20 >> 2] = $6; //@line 19997
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 19998
   HEAP32[$21 >> 2] = $8; //@line 19999
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 20000
   HEAP32[$22 >> 2] = $4; //@line 20001
   sp = STACKTOP; //@line 20002
   return;
  }
  ___async_unwind = 0; //@line 20005
  HEAP32[$ReallocAsyncCtx4 >> 2] = 374; //@line 20006
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 20007
  HEAP32[$18 >> 2] = $10; //@line 20008
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 20009
  HEAP32[$19 >> 2] = $2; //@line 20010
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 20011
  HEAP32[$20 >> 2] = $6; //@line 20012
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 20013
  HEAP32[$21 >> 2] = $8; //@line 20014
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 20015
  HEAP32[$22 >> 2] = $4; //@line 20016
  sp = STACKTOP; //@line 20017
  return;
 }
 if (!(HEAP8[$2 + 1175 >> 0] | 0)) {
  HEAP32[$2 + 2040 >> 2] = 0; //@line 20025
  HEAP32[$2 + 2076 >> 2] = 4; //@line 20027
  $36 = HEAP8[$2 + 1182 >> 0] | 0; //@line 20029
  HEAP8[$2 + 1183 >> 0] = $36; //@line 20031
  __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $36, (HEAP8[$2 + 2360 >> 0] | 0) != 0, $4); //@line 20036
  HEAP32[$2 + 1780 >> 2] = $4; //@line 20038
  return;
 }
 $28 = HEAP32[$2 + 1772 >> 2] | 0; //@line 20043
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 20044
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $2 + 1816 | 0, $28); //@line 20045
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 375; //@line 20048
  $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 20049
  HEAP32[$29 >> 2] = $8; //@line 20050
  $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 20051
  HEAP32[$30 >> 2] = $2; //@line 20052
  $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 20053
  HEAP32[$31 >> 2] = $6; //@line 20054
  $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 20055
  HEAP32[$32 >> 2] = $4; //@line 20056
  sp = STACKTOP; //@line 20057
  return;
 }
 ___async_unwind = 0; //@line 20060
 HEAP32[$ReallocAsyncCtx3 >> 2] = 375; //@line 20061
 $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 20062
 HEAP32[$29 >> 2] = $8; //@line 20063
 $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 20064
 HEAP32[$30 >> 2] = $2; //@line 20065
 $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 20066
 HEAP32[$31 >> 2] = $6; //@line 20067
 $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 20068
 HEAP32[$32 >> 2] = $4; //@line 20069
 sp = STACKTOP; //@line 20070
 return;
}
function __ZN7LoRaMac10disconnectEv($0) {
 $0 = $0 | 0;
 var $19 = 0, $20 = 0, $22 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 16781
 $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16783
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1796 | 0); //@line 16784
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 477; //@line 16787
  HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 16789
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 16791
  sp = STACKTOP; //@line 16792
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 16795
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16797
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 16798
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 478; //@line 16801
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 16803
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 16805
  sp = STACKTOP; //@line 16806
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 16809
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16811
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 16812
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 479; //@line 16815
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 16817
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 16819
  sp = STACKTOP; //@line 16820
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 16823
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 16825
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 16826
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 480; //@line 16829
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 16831
  sp = STACKTOP; //@line 16832
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16835
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16837
 __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 16838
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 481; //@line 16841
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16843
  sp = STACKTOP; //@line 16844
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16847
  HEAP8[$0 + 2360 >> 0] = 0; //@line 16849
  HEAP8[$0 + 1181 >> 0] = 0; //@line 16851
  HEAP8[$0 + 1175 >> 0] = 1; //@line 16853
  HEAP8[$0 + 1177 >> 0] = 0; //@line 16855
  HEAP8[$0 + 1178 >> 0] = 0; //@line 16857
  $19 = $0 + 476 | 0; //@line 16858
  __ZN14LoRaMacCommand20clear_command_bufferEv($19); //@line 16859
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($19); //@line 16860
  __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($19); //@line 16861
  $20 = $0 + 2036 | 0; //@line 16862
  HEAP32[$20 >> 2] = 0; //@line 16863
  HEAP32[$20 + 4 >> 2] = 0; //@line 16863
  HEAP32[$20 + 8 >> 2] = 0; //@line 16863
  HEAP32[$20 + 12 >> 2] = 0; //@line 16863
  HEAP32[$20 + 16 >> 2] = 0; //@line 16863
  HEAP32[$20 + 20 >> 2] = 0; //@line 16863
  HEAP32[$0 + 2040 >> 2] = 1; //@line 16865
  $22 = $0 + 2068 | 0; //@line 16866
  HEAP32[$22 >> 2] = 0; //@line 16867
  HEAP32[$22 + 4 >> 2] = 0; //@line 16867
  HEAP32[$22 + 8 >> 2] = 0; //@line 16867
  HEAP32[$22 + 12 >> 2] = 0; //@line 16867
  HEAP32[$22 + 16 >> 2] = 0; //@line 16867
  HEAP32[$0 + 2076 >> 2] = 1; //@line 16869
  dest = $0 + 1996 | 0; //@line 16871
  stop = dest + 40 | 0; //@line 16871
  do {
   HEAP32[dest >> 2] = 0; //@line 16871
   dest = dest + 4 | 0; //@line 16871
  } while ((dest | 0) < (stop | 0));
  HEAP32[$0 + 2004 >> 2] = 1; //@line 16873
  return;
 }
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_228($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $31 = 0, $33 = 0, $4 = 0, $41 = 0, $43 = 0, $48 = 0, $52 = 0, $55 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3719
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3721
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3723
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3725
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3727
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3729
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3731
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3733
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3735
 $18 = HEAP8[$0 + 36 >> 0] | 0; //@line 3737
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 3739
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 3741
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 3743
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($20) | 0) {
   HEAP32[$2 + 2060 >> 2] = 4; //@line 3751
   HEAP8[$2 + 2064 >> 0] = 1; //@line 3753
   __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($20); //@line 3754
  }
 } else {
  HEAP32[$6 >> 2] = 1; //@line 3757
 }
 if ($18 << 24 >> 24 == 7) {
  $31 = $2 + 1442 | 0; //@line 3761
  $33 = HEAPU8[$8 >> 0] | 0; //@line 3763
  _memcpy($31 | 0, $10 + $33 | 0, $12 | 0) | 0; //@line 3765
  HEAP32[$2 + 2e3 >> 2] = 3; //@line 3767
  HEAP32[$6 >> 2] = 0; //@line 3768
  HEAP32[$14 >> 2] = $31; //@line 3769
  HEAP16[$16 >> 1] = $12 - $33; //@line 3772
 }
 $41 = HEAP8[$2 + 1699 >> 0] | 0; //@line 3777
 $43 = HEAP8[$2 + 1698 >> 0] | 0; //@line 3779
 if (!(HEAP8[$24 >> 0] | 0)) {
  if ((HEAP32[$2 + 2364 >> 2] | 0) != 2) {
   return;
  }
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 3788
  __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1856 | 0); //@line 3789
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 416; //@line 3792
   $48 = $ReallocAsyncCtx10 + 4 | 0; //@line 3793
   HEAP32[$48 >> 2] = $4; //@line 3794
   sp = STACKTOP; //@line 3795
   return;
  }
  ___async_unwind = 0; //@line 3798
  HEAP32[$ReallocAsyncCtx10 >> 2] = 416; //@line 3799
  $48 = $ReallocAsyncCtx10 + 4 | 0; //@line 3800
  HEAP32[$48 >> 2] = $4; //@line 3801
  sp = STACKTOP; //@line 3802
  return;
 }
 if (HEAP8[$22 >> 0] | 0) {
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 3809
  __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1856 | 0); //@line 3810
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 417; //@line 3813
   $52 = $ReallocAsyncCtx9 + 4 | 0; //@line 3814
   HEAP32[$52 >> 2] = $4; //@line 3815
   sp = STACKTOP; //@line 3816
   return;
  }
  ___async_unwind = 0; //@line 3819
  HEAP32[$ReallocAsyncCtx9 >> 2] = 417; //@line 3820
  $52 = $ReallocAsyncCtx9 + 4 | 0; //@line 3821
  HEAP32[$52 >> 2] = $4; //@line 3822
  sp = STACKTOP; //@line 3823
  return;
 }
 if (($41 & 255) <= ($43 & 255)) {
  return;
 }
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 3831
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1856 | 0); //@line 3832
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 418; //@line 3835
  $55 = $ReallocAsyncCtx8 + 4 | 0; //@line 3836
  HEAP32[$55 >> 2] = $4; //@line 3837
  sp = STACKTOP; //@line 3838
  return;
 }
 ___async_unwind = 0; //@line 3841
 HEAP32[$ReallocAsyncCtx8 >> 2] = 418; //@line 3842
 $55 = $ReallocAsyncCtx8 + 4 | 0; //@line 3843
 HEAP32[$55 >> 2] = $4; //@line 3844
 sp = STACKTOP; //@line 3845
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_323($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $29 = 0, $30 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12512
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12514
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12516
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12518
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12520
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12522
 if (!(HEAP32[$0 + 24 >> 2] | 0)) {
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(24) | 0; //@line 12527
  _mbed_assert_internal(13121, 12408, 646); //@line 12528
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 261; //@line 12531
   $14 = $ReallocAsyncCtx11 + 4 | 0; //@line 12532
   HEAP32[$14 >> 2] = $4; //@line 12533
   $15 = $ReallocAsyncCtx11 + 8 | 0; //@line 12534
   HEAP32[$15 >> 2] = $2; //@line 12535
   $16 = $ReallocAsyncCtx11 + 12 | 0; //@line 12536
   HEAP32[$16 >> 2] = $6; //@line 12537
   $17 = $ReallocAsyncCtx11 + 16 | 0; //@line 12538
   HEAP32[$17 >> 2] = $8; //@line 12539
   $18 = $ReallocAsyncCtx11 + 20 | 0; //@line 12540
   HEAP32[$18 >> 2] = $10; //@line 12541
   sp = STACKTOP; //@line 12542
   return;
  }
  ___async_unwind = 0; //@line 12545
  HEAP32[$ReallocAsyncCtx11 >> 2] = 261; //@line 12546
  $14 = $ReallocAsyncCtx11 + 4 | 0; //@line 12547
  HEAP32[$14 >> 2] = $4; //@line 12548
  $15 = $ReallocAsyncCtx11 + 8 | 0; //@line 12549
  HEAP32[$15 >> 2] = $2; //@line 12550
  $16 = $ReallocAsyncCtx11 + 12 | 0; //@line 12551
  HEAP32[$16 >> 2] = $6; //@line 12552
  $17 = $ReallocAsyncCtx11 + 16 | 0; //@line 12553
  HEAP32[$17 >> 2] = $8; //@line 12554
  $18 = $ReallocAsyncCtx11 + 20 | 0; //@line 12555
  HEAP32[$18 >> 2] = $10; //@line 12556
  sp = STACKTOP; //@line 12557
  return;
 }
 if ((__ZNK7LoRaMac16get_device_classEv($8) | 0) == 2) {
  label = 10; //@line 12563
 } else {
  if (!(HEAP8[$6 + 15 >> 0] | 0)) {
   label = 10; //@line 12569
  }
 }
 if ((label | 0) == 10) {
  if ((__ZNK7LoRaMac16get_device_classEv($8) | 0) != 2) {
   return;
  }
  if ((HEAP32[$6 + 4 >> 2] | 0) != 1) {
   return;
  }
 }
 $29 = $2 + 2496 | 0; //@line 12585
 $30 = HEAP32[$29 >> 2] | 0; //@line 12586
 if (!$30) {
  return;
 }
 $34 = HEAP32[$2 + 3136 >> 2] | 0; //@line 12593
 $36 = HEAP32[$30 + 4 >> 2] | 0; //@line 12595
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 12596
 FUNCTION_TABLE_vii[$36 & 15]($4, $2 + 2484 | 0); //@line 12597
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 262; //@line 12600
  $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 12601
  HEAP32[$37 >> 2] = $29; //@line 12602
  $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 12603
  HEAP32[$38 >> 2] = $4; //@line 12604
  $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 12605
  HEAP32[$39 >> 2] = $34; //@line 12606
  $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 12607
  HEAP32[$40 >> 2] = $4; //@line 12608
  sp = STACKTOP; //@line 12609
  return;
 }
 ___async_unwind = 0; //@line 12612
 HEAP32[$ReallocAsyncCtx5 >> 2] = 262; //@line 12613
 $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 12614
 HEAP32[$37 >> 2] = $29; //@line 12615
 $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 12616
 HEAP32[$38 >> 2] = $4; //@line 12617
 $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 12618
 HEAP32[$39 >> 2] = $34; //@line 12619
 $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 12620
 HEAP32[$40 >> 2] = $4; //@line 12621
 sp = STACKTOP; //@line 12622
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $18 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, sp = 0;
 sp = STACKTOP; //@line 1915
 STACKTOP = STACKTOP + 48 | 0; //@line 1916
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 1916
 $vararg_buffer4 = sp + 16 | 0; //@line 1917
 $vararg_buffer1 = sp + 8 | 0; //@line 1918
 $vararg_buffer = sp; //@line 1919
 $2 = sp + 24 | 0; //@line 1920
 HEAP32[$vararg_buffer >> 2] = $1; //@line 1921
 _mbed_tracef(16, 11020, 11668, $vararg_buffer); //@line 1922
 HEAP8[$0 + 688 >> 0] = 2; //@line 1924
 HEAP32[$vararg_buffer1 >> 2] = 3; //@line 1925
 _mbed_tracef(16, 11020, 11077, $vararg_buffer1); //@line 1926
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1927
 HEAP32[$vararg_buffer4 >> 2] = 3; //@line 1928
 _mbed_tracef(16, 11020, 11106, $vararg_buffer4); //@line 1929
 $4 = $0 + 1240 | 0; //@line 1930
 $5 = $2 + 12 | 0; //@line 1931
 HEAP32[$2 >> 2] = 92; //@line 1932
 HEAP32[$2 + 4 >> 2] = 0; //@line 1934
 HEAP32[$2 + 8 >> 2] = $0; //@line 1936
 HEAP32[$5 >> 2] = 584; //@line 1937
 $6 = $0 + 1280 | 0; //@line 1938
 if (($6 | 0) != ($2 | 0)) {
  $8 = $0 + 1292 | 0; //@line 1941
  $9 = HEAP32[$8 >> 2] | 0; //@line 1942
  do {
   if ($9 | 0) {
    $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 1947
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 1948
    FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 1949
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 93; //@line 1952
     HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 1954
     HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 1956
     HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 1958
     HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 1960
     HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 1962
     sp = STACKTOP; //@line 1963
     STACKTOP = sp; //@line 1964
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 1966
     break;
    }
   }
  } while (0);
  $18 = HEAP32[$5 >> 2] | 0; //@line 1971
  do {
   if (!$18) {
    $26 = 0; //@line 1975
   } else {
    $21 = HEAP32[$18 + 4 >> 2] | 0; //@line 1978
    $AsyncCtx8 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1979
    FUNCTION_TABLE_vii[$21 & 15]($6, $2); //@line 1980
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 94; //@line 1983
     HEAP32[$AsyncCtx8 + 4 >> 2] = $5; //@line 1985
     HEAP32[$AsyncCtx8 + 8 >> 2] = $8; //@line 1987
     HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 1989
     HEAP32[$AsyncCtx8 + 16 >> 2] = $2; //@line 1991
     sp = STACKTOP; //@line 1992
     STACKTOP = sp; //@line 1993
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx8 | 0); //@line 1995
     $26 = HEAP32[$5 >> 2] | 0; //@line 1997
     break;
    }
   }
  } while (0);
  HEAP32[$8 >> 2] = $26; //@line 2002
 }
 __ZN4mbed6Ticker5setupEy($4, 1e5, 0); //@line 2004
 $27 = HEAP32[$5 >> 2] | 0; //@line 2005
 if (!$27) {
  STACKTOP = sp; //@line 2008
  return;
 }
 $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 2011
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2012
 FUNCTION_TABLE_vi[$30 & 1023]($2); //@line 2013
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 95; //@line 2016
  sp = STACKTOP; //@line 2017
  STACKTOP = sp; //@line 2018
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 2020
 STACKTOP = sp; //@line 2021
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_250($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $2 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 4838
 STACKTOP = STACKTOP + 16 | 0; //@line 4839
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4839
 $$byval_copy = sp; //@line 4840
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4842
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4844
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4846
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 4848
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 4850
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 4852
 HEAP32[$4 + 1168 >> 2] = HEAP8[HEAP32[$0 + 24 >> 2] >> 0] | 0 ? 2 : 1; //@line 4859
 $trunc = (HEAPU8[$2 >> 0] | 0) >>> 5; //@line 4861
 switch ($trunc & 7) {
 case 1:
  {
   if (!(HEAP8[$4 + 2360 >> 0] | 0)) {
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 4869
    __ZN7LoRaMac24handle_join_accept_frameEPKht($4, $2, $8); //@line 4870
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 430; //@line 4873
     $33 = $ReallocAsyncCtx2 + 4 | 0; //@line 4874
     HEAP32[$33 >> 2] = $4; //@line 4875
     sp = STACKTOP; //@line 4876
     STACKTOP = sp; //@line 4877
     return;
    }
    ___async_unwind = 0; //@line 4879
    HEAP32[$ReallocAsyncCtx2 >> 2] = 430; //@line 4880
    $33 = $ReallocAsyncCtx2 + 4 | 0; //@line 4881
    HEAP32[$33 >> 2] = $4; //@line 4882
    sp = STACKTOP; //@line 4883
    STACKTOP = sp; //@line 4884
    return;
   }
   if (!(HEAP8[$4 + 1177 >> 0] | 0)) {
    HEAP8[$4 + 2068 >> 0] = 0; //@line 4891
    STACKTOP = sp; //@line 4892
    return;
   }
   $27 = HEAP32[$4 + 1992 >> 2] | 0; //@line 4895
   HEAP32[$6 >> 2] = 404; //@line 4896
   HEAP32[$6 + 4 >> 2] = 0; //@line 4898
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 4899
   HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 4900
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 4900
   $28 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($27, $4, $$byval_copy) | 0; //@line 4901
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 428; //@line 4904
    $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 4905
    HEAP32[$29 >> 2] = $6; //@line 4906
    $30 = $ReallocAsyncCtx6 + 8 | 0; //@line 4907
    HEAP32[$30 >> 2] = $4; //@line 4908
    sp = STACKTOP; //@line 4909
    STACKTOP = sp; //@line 4910
    return;
   }
   HEAP32[___async_retval >> 2] = $28; //@line 4913
   ___async_unwind = 0; //@line 4914
   HEAP32[$ReallocAsyncCtx6 >> 2] = 428; //@line 4915
   $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 4916
   HEAP32[$29 >> 2] = $6; //@line 4917
   $30 = $ReallocAsyncCtx6 + 8 | 0; //@line 4918
   HEAP32[$30 >> 2] = $4; //@line 4919
   sp = STACKTOP; //@line 4920
   STACKTOP = sp; //@line 4921
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 4925
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($4, $2, $8, 1, $trunc, $10, $12); //@line 4926
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 431; //@line 4929
    sp = STACKTOP; //@line 4930
    STACKTOP = sp; //@line 4931
    return;
   }
   ___async_unwind = 0; //@line 4933
   HEAP32[$ReallocAsyncCtx >> 2] = 431; //@line 4934
   sp = STACKTOP; //@line 4935
   STACKTOP = sp; //@line 4936
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 4940
   return;
  }
 }
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 12376
 $7 = ($2 | 0) != 0; //@line 12380
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 12384
   $$03555 = $0; //@line 12385
   $$03654 = $2; //@line 12385
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 12390
     $$036$lcssa64 = $$03654; //@line 12390
     label = 6; //@line 12391
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 12394
    $12 = $$03654 + -1 | 0; //@line 12395
    $16 = ($12 | 0) != 0; //@line 12399
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 12402
     $$03654 = $12; //@line 12402
    } else {
     $$035$lcssa = $11; //@line 12404
     $$036$lcssa = $12; //@line 12404
     $$lcssa = $16; //@line 12404
     label = 5; //@line 12405
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 12410
   $$036$lcssa = $2; //@line 12410
   $$lcssa = $7; //@line 12410
   label = 5; //@line 12411
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 12416
   $$036$lcssa64 = $$036$lcssa; //@line 12416
   label = 6; //@line 12417
  } else {
   $$2 = $$035$lcssa; //@line 12419
   $$3 = 0; //@line 12419
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 12425
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 12428
    $$3 = $$036$lcssa64; //@line 12428
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 12430
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 12434
      $$13745 = $$036$lcssa64; //@line 12434
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 12437
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 12446
       $30 = $$13745 + -4 | 0; //@line 12447
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 12450
        $$13745 = $30; //@line 12450
       } else {
        $$0$lcssa = $29; //@line 12452
        $$137$lcssa = $30; //@line 12452
        label = 11; //@line 12453
        break L11;
       }
      }
      $$140 = $$046; //@line 12457
      $$23839 = $$13745; //@line 12457
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 12459
      $$137$lcssa = $$036$lcssa64; //@line 12459
      label = 11; //@line 12460
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 12466
      $$3 = 0; //@line 12466
      break;
     } else {
      $$140 = $$0$lcssa; //@line 12469
      $$23839 = $$137$lcssa; //@line 12469
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 12476
      $$3 = $$23839; //@line 12476
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 12479
     $$23839 = $$23839 + -1 | 0; //@line 12480
     if (!$$23839) {
      $$2 = $35; //@line 12483
      $$3 = 0; //@line 12483
      break;
     } else {
      $$140 = $35; //@line 12486
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 12494
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 12147
 do {
  if (!$0) {
   do {
    if (!(HEAP32[2631] | 0)) {
     $34 = 0; //@line 12155
    } else {
     $12 = HEAP32[2631] | 0; //@line 12157
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 12158
     $13 = _fflush($12) | 0; //@line 12159
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 685; //@line 12162
      sp = STACKTOP; //@line 12163
      return 0; //@line 12164
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 12166
      $34 = $13; //@line 12167
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 12173
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 12177
    } else {
     $$02327 = $$02325; //@line 12179
     $$02426 = $34; //@line 12179
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 12186
      } else {
       $28 = 0; //@line 12188
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 12196
       $25 = ___fflush_unlocked($$02327) | 0; //@line 12197
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 12202
       $$1 = $25 | $$02426; //@line 12204
      } else {
       $$1 = $$02426; //@line 12206
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 12210
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 12213
      if (!$$023) {
       $$024$lcssa = $$1; //@line 12216
       break L9;
      } else {
       $$02327 = $$023; //@line 12219
       $$02426 = $$1; //@line 12219
      }
     }
     HEAP32[$AsyncCtx >> 2] = 686; //@line 12222
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 12224
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 12226
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 12228
     sp = STACKTOP; //@line 12229
     return 0; //@line 12230
    }
   } while (0);
   ___ofl_unlock(); //@line 12233
   $$0 = $$024$lcssa; //@line 12234
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 12240
    $5 = ___fflush_unlocked($0) | 0; //@line 12241
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 683; //@line 12244
     sp = STACKTOP; //@line 12245
     return 0; //@line 12246
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 12248
     $$0 = $5; //@line 12249
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 12254
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12255
   $7 = ___fflush_unlocked($0) | 0; //@line 12256
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 684; //@line 12259
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 12262
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 12264
    sp = STACKTOP; //@line 12265
    return 0; //@line 12266
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12268
   if ($phitmp) {
    $$0 = $7; //@line 12270
   } else {
    ___unlockfile($0); //@line 12272
    $$0 = $7; //@line 12273
   }
  }
 } while (0);
 return $$0 | 0; //@line 12277
}
function __ZN7LoRaPHY18dl_channel_requestEhj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10663
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10665
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10667
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10669
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10671
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10673
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 10675
 if (HEAP8[___async_retval >> 0] & 1) {
  $31 = $2; //@line 10680
 } else {
  $18 = $2 + 1 | 0; //@line 10682
  if (($18 | 0) < (HEAPU8[$10 >> 0] | 0 | 0)) {
   $16 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 10689
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 10691
   $19 = FUNCTION_TABLE_iiii[$16 & 31]($6, $8, $18 & 255) | 0; //@line 10692
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 532; //@line 10695
    $20 = $ReallocAsyncCtx + 4 | 0; //@line 10696
    HEAP32[$20 >> 2] = $18; //@line 10697
    $21 = $ReallocAsyncCtx + 8 | 0; //@line 10698
    HEAP32[$21 >> 2] = $4; //@line 10699
    $22 = $ReallocAsyncCtx + 12 | 0; //@line 10700
    HEAP32[$22 >> 2] = $6; //@line 10701
    $23 = $ReallocAsyncCtx + 16 | 0; //@line 10702
    HEAP32[$23 >> 2] = $8; //@line 10703
    $24 = $ReallocAsyncCtx + 20 | 0; //@line 10704
    HEAP32[$24 >> 2] = $10; //@line 10705
    $25 = $ReallocAsyncCtx + 24 | 0; //@line 10706
    HEAP8[$25 >> 0] = $12; //@line 10707
    sp = STACKTOP; //@line 10708
    return;
   }
   HEAP8[___async_retval >> 0] = $19 & 1; //@line 10713
   ___async_unwind = 0; //@line 10714
   HEAP32[$ReallocAsyncCtx >> 2] = 532; //@line 10715
   $20 = $ReallocAsyncCtx + 4 | 0; //@line 10716
   HEAP32[$20 >> 2] = $18; //@line 10717
   $21 = $ReallocAsyncCtx + 8 | 0; //@line 10718
   HEAP32[$21 >> 2] = $4; //@line 10719
   $22 = $ReallocAsyncCtx + 12 | 0; //@line 10720
   HEAP32[$22 >> 2] = $6; //@line 10721
   $23 = $ReallocAsyncCtx + 16 | 0; //@line 10722
   HEAP32[$23 >> 2] = $8; //@line 10723
   $24 = $ReallocAsyncCtx + 20 | 0; //@line 10724
   HEAP32[$24 >> 2] = $10; //@line 10725
   $25 = $ReallocAsyncCtx + 24 | 0; //@line 10726
   HEAP8[$25 >> 0] = $12; //@line 10727
   sp = STACKTOP; //@line 10728
   return;
  } else {
   $31 = -1; //@line 10731
  }
 }
 $34 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 10737
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 10738
 $35 = FUNCTION_TABLE_iiii[$34 & 31]($6, $8, $31 & 255) | 0; //@line 10739
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 533; //@line 10742
  $36 = $ReallocAsyncCtx2 + 4 | 0; //@line 10743
  HEAP32[$36 >> 2] = $6; //@line 10744
  $37 = $ReallocAsyncCtx2 + 8 | 0; //@line 10745
  HEAP8[$37 >> 0] = $12; //@line 10746
  $38 = $ReallocAsyncCtx2 + 12 | 0; //@line 10747
  HEAP32[$38 >> 2] = $8; //@line 10748
  sp = STACKTOP; //@line 10749
  return;
 }
 HEAP8[___async_retval >> 0] = $35 & 1; //@line 10754
 ___async_unwind = 0; //@line 10755
 HEAP32[$ReallocAsyncCtx2 >> 2] = 533; //@line 10756
 $36 = $ReallocAsyncCtx2 + 4 | 0; //@line 10757
 HEAP32[$36 >> 2] = $6; //@line 10758
 $37 = $ReallocAsyncCtx2 + 8 | 0; //@line 10759
 HEAP8[$37 >> 0] = $12; //@line 10760
 $38 = $ReallocAsyncCtx2 + 12 | 0; //@line 10761
 HEAP32[$38 >> 2] = $8; //@line 10762
 sp = STACKTOP; //@line 10763
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_116($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26081
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26083
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26085
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26087
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26089
 if (!$AsyncRetVal) {
  $22 = HEAP32[$2 >> 2] | 0; //@line 26092
  if (!$22) {
   HEAP32[___async_retval >> 2] = 0; //@line 26096
   return;
  }
  $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 26100
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 26101
  FUNCTION_TABLE_vi[$25 & 1023]($6); //@line 26102
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 387; //@line 26105
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 26106
   HEAP32[$26 >> 2] = 0; //@line 26107
   sp = STACKTOP; //@line 26108
   return;
  }
  ___async_unwind = 0; //@line 26111
  HEAP32[$ReallocAsyncCtx2 >> 2] = 387; //@line 26112
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 26113
  HEAP32[$26 >> 2] = 0; //@line 26114
  sp = STACKTOP; //@line 26115
  return;
 }
 $9 = HEAP32[$2 >> 2] | 0; //@line 26118
 if (!$9) {
  HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 26122
  _equeue_event_dtor($AsyncRetVal, 282); //@line 26123
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 26124
  $18 = _equeue_post($4, 283, $AsyncRetVal) | 0; //@line 26125
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 386; //@line 26128
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 26129
   HEAP32[$19 >> 2] = $2; //@line 26130
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 26131
   HEAP32[$20 >> 2] = $6; //@line 26132
   sp = STACKTOP; //@line 26133
   return;
  }
  HEAP32[___async_retval >> 2] = $18; //@line 26137
  ___async_unwind = 0; //@line 26138
  HEAP32[$ReallocAsyncCtx3 >> 2] = 386; //@line 26139
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 26140
  HEAP32[$19 >> 2] = $2; //@line 26141
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 26142
  HEAP32[$20 >> 2] = $6; //@line 26143
  sp = STACKTOP; //@line 26144
  return;
 } else {
  $12 = HEAP32[$9 + 4 >> 2] | 0; //@line 26148
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 26149
  FUNCTION_TABLE_vii[$12 & 15]($AsyncRetVal, $6); //@line 26150
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 385; //@line 26153
   $13 = $ReallocAsyncCtx + 4 | 0; //@line 26154
   HEAP32[$13 >> 2] = $2; //@line 26155
   $14 = $ReallocAsyncCtx + 8 | 0; //@line 26156
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 26157
   $15 = $ReallocAsyncCtx + 12 | 0; //@line 26158
   HEAP32[$15 >> 2] = $4; //@line 26159
   $16 = $ReallocAsyncCtx + 16 | 0; //@line 26160
   HEAP32[$16 >> 2] = $6; //@line 26161
   sp = STACKTOP; //@line 26162
   return;
  }
  ___async_unwind = 0; //@line 26165
  HEAP32[$ReallocAsyncCtx >> 2] = 385; //@line 26166
  $13 = $ReallocAsyncCtx + 4 | 0; //@line 26167
  HEAP32[$13 >> 2] = $2; //@line 26168
  $14 = $ReallocAsyncCtx + 8 | 0; //@line 26169
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 26170
  $15 = $ReallocAsyncCtx + 12 | 0; //@line 26171
  HEAP32[$15 >> 2] = $4; //@line 26172
  $16 = $ReallocAsyncCtx + 16 | 0; //@line 26173
  HEAP32[$16 >> 2] = $6; //@line 26174
  sp = STACKTOP; //@line 26175
  return;
 }
}
function _mbedtls_ccm_free__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $38 = 0, $42 = 0, $46 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22614
 HEAP8[$2 >> 0] = 0; //@line 22616
 HEAP8[$2 + 1 >> 0] = 0; //@line 22618
 HEAP8[$2 + 2 >> 0] = 0; //@line 22620
 $6 = $2 + 4 | 0; //@line 22621
 HEAP8[$2 + 3 >> 0] = 0; //@line 22622
 HEAP8[$6 >> 0] = 0; //@line 22624
 HEAP8[$6 + 1 >> 0] = 0; //@line 22626
 HEAP8[$6 + 2 >> 0] = 0; //@line 22628
 $10 = $6 + 4 | 0; //@line 22629
 HEAP8[$6 + 3 >> 0] = 0; //@line 22630
 HEAP8[$10 >> 0] = 0; //@line 22632
 HEAP8[$10 + 1 >> 0] = 0; //@line 22634
 HEAP8[$10 + 2 >> 0] = 0; //@line 22636
 $14 = $6 + 8 | 0; //@line 22637
 HEAP8[$10 + 3 >> 0] = 0; //@line 22638
 HEAP8[$14 >> 0] = 0; //@line 22640
 HEAP8[$14 + 1 >> 0] = 0; //@line 22642
 HEAP8[$14 + 2 >> 0] = 0; //@line 22644
 $18 = $6 + 12 | 0; //@line 22645
 HEAP8[$14 + 3 >> 0] = 0; //@line 22646
 HEAP8[$18 >> 0] = 0; //@line 22648
 HEAP8[$18 + 1 >> 0] = 0; //@line 22650
 HEAP8[$18 + 2 >> 0] = 0; //@line 22652
 $22 = $6 + 16 | 0; //@line 22653
 HEAP8[$18 + 3 >> 0] = 0; //@line 22654
 HEAP8[$22 >> 0] = 0; //@line 22656
 HEAP8[$22 + 1 >> 0] = 0; //@line 22658
 HEAP8[$22 + 2 >> 0] = 0; //@line 22660
 $26 = $6 + 20 | 0; //@line 22661
 HEAP8[$22 + 3 >> 0] = 0; //@line 22662
 HEAP8[$26 >> 0] = 0; //@line 22664
 HEAP8[$26 + 1 >> 0] = 0; //@line 22666
 HEAP8[$26 + 2 >> 0] = 0; //@line 22668
 $30 = $6 + 24 | 0; //@line 22669
 HEAP8[$26 + 3 >> 0] = 0; //@line 22670
 HEAP8[$30 >> 0] = 0; //@line 22672
 HEAP8[$30 + 1 >> 0] = 0; //@line 22674
 HEAP8[$30 + 2 >> 0] = 0; //@line 22676
 $34 = $6 + 28 | 0; //@line 22677
 HEAP8[$30 + 3 >> 0] = 0; //@line 22678
 HEAP8[$34 >> 0] = 0; //@line 22680
 HEAP8[$34 + 1 >> 0] = 0; //@line 22682
 HEAP8[$34 + 2 >> 0] = 0; //@line 22684
 $38 = $6 + 32 | 0; //@line 22685
 HEAP8[$34 + 3 >> 0] = 0; //@line 22686
 HEAP8[$38 >> 0] = 0; //@line 22688
 HEAP8[$38 + 1 >> 0] = 0; //@line 22690
 HEAP8[$38 + 2 >> 0] = 0; //@line 22692
 $42 = $6 + 36 | 0; //@line 22693
 HEAP8[$38 + 3 >> 0] = 0; //@line 22694
 HEAP8[$42 >> 0] = 0; //@line 22696
 HEAP8[$42 + 1 >> 0] = 0; //@line 22698
 HEAP8[$42 + 2 >> 0] = 0; //@line 22700
 $46 = $6 + 40 | 0; //@line 22701
 HEAP8[$42 + 3 >> 0] = 0; //@line 22702
 HEAP8[$46 >> 0] = 0; //@line 22704
 HEAP8[$46 + 1 >> 0] = 0; //@line 22706
 HEAP8[$46 + 2 >> 0] = 0; //@line 22708
 $50 = $6 + 44 | 0; //@line 22709
 HEAP8[$46 + 3 >> 0] = 0; //@line 22710
 HEAP8[$50 >> 0] = 0; //@line 22712
 HEAP8[$50 + 1 >> 0] = 0; //@line 22714
 HEAP8[$50 + 2 >> 0] = 0; //@line 22716
 $54 = $6 + 48 | 0; //@line 22717
 HEAP8[$50 + 3 >> 0] = 0; //@line 22718
 HEAP8[$54 >> 0] = 0; //@line 22720
 HEAP8[$54 + 1 >> 0] = 0; //@line 22722
 HEAP8[$54 + 2 >> 0] = 0; //@line 22724
 $58 = $6 + 52 | 0; //@line 22725
 HEAP8[$54 + 3 >> 0] = 0; //@line 22726
 HEAP8[$58 >> 0] = 0; //@line 22728
 HEAP8[$58 + 1 >> 0] = 0; //@line 22730
 HEAP8[$58 + 2 >> 0] = 0; //@line 22732
 $62 = $6 + 56 | 0; //@line 22733
 HEAP8[$58 + 3 >> 0] = 0; //@line 22734
 HEAP8[$62 >> 0] = 0; //@line 22736
 HEAP8[$62 + 1 >> 0] = 0; //@line 22738
 HEAP8[$62 + 2 >> 0] = 0; //@line 22740
 $66 = $6 + 60 | 0; //@line 22741
 HEAP8[$62 + 3 >> 0] = 0; //@line 22742
 HEAP8[$66 >> 0] = 0; //@line 22744
 HEAP8[$66 + 1 >> 0] = 0; //@line 22746
 HEAP8[$66 + 2 >> 0] = 0; //@line 22748
 HEAP8[$66 + 3 >> 0] = 0; //@line 22749
 return;
}
function _mbed_vtracef__async_cb_40($0) {
 $0 = $0 | 0;
 var $$13 = 0, $$expand_i1_val = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21411
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 21414
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21416
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21418
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21420
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21424
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21426
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21428
 $$13 = ($AsyncRetVal | 0) >= ($8 | 0) ? 0 : $AsyncRetVal; //@line 21430
 $18 = (HEAP32[$0 + 20 >> 2] | 0) + $$13 | 0; //@line 21432
 $19 = $8 - $$13 | 0; //@line 21433
 do {
  if (($$13 | 0) > 0) {
   $21 = HEAP32[173] | 0; //@line 21437
   if (!(($19 | 0) > 0 & ($21 | 0) != 0)) {
    if (($$13 | 0) < 1 | ($19 | 0) < 1 | $2 ^ 1) {
     break;
    }
    _snprintf($18, $19, 12370, $4) | 0; //@line 21449
    break;
   }
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 21452
   $23 = FUNCTION_TABLE_i[$21 & 7]() | 0; //@line 21453
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 149; //@line 21456
    $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 21457
    HEAP32[$24 >> 2] = $12; //@line 21458
    $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 21459
    HEAP32[$25 >> 2] = $18; //@line 21460
    $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 21461
    HEAP32[$26 >> 2] = $19; //@line 21462
    $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 21463
    HEAP32[$27 >> 2] = $14; //@line 21464
    $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 21465
    $$expand_i1_val = $2 & 1; //@line 21466
    HEAP8[$28 >> 0] = $$expand_i1_val; //@line 21467
    $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 21468
    HEAP32[$29 >> 2] = $4; //@line 21469
    $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 21470
    HEAP32[$30 >> 2] = $6; //@line 21471
    sp = STACKTOP; //@line 21472
    return;
   }
   HEAP32[___async_retval >> 2] = $23; //@line 21476
   ___async_unwind = 0; //@line 21477
   HEAP32[$ReallocAsyncCtx6 >> 2] = 149; //@line 21478
   $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 21479
   HEAP32[$24 >> 2] = $12; //@line 21480
   $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 21481
   HEAP32[$25 >> 2] = $18; //@line 21482
   $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 21483
   HEAP32[$26 >> 2] = $19; //@line 21484
   $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 21485
   HEAP32[$27 >> 2] = $14; //@line 21486
   $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 21487
   $$expand_i1_val = $2 & 1; //@line 21488
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 21489
   $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 21490
   HEAP32[$29 >> 2] = $4; //@line 21491
   $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 21492
   HEAP32[$30 >> 2] = $6; //@line 21493
   sp = STACKTOP; //@line 21494
   return;
  }
 } while (0);
 $34 = HEAP32[174] | 0; //@line 21498
 $35 = HEAP32[167] | 0; //@line 21499
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 21500
 FUNCTION_TABLE_vi[$34 & 1023]($35); //@line 21501
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 21504
  sp = STACKTOP; //@line 21505
  return;
 }
 ___async_unwind = 0; //@line 21508
 HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 21509
 sp = STACKTOP; //@line 21510
 return;
}
function __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$060 = 0, $$060$us = 0, $$2 = 0, $$2$us = 0, $$pr$us = 0, $$sink2 = 0, $10 = 0, $20 = 0, $26 = 0, $28 = 0, $34 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $indvars$iv = 0, $indvars$iv62 = 0, $wide$trip$count = 0, label = 0;
 if (!($4 << 24 >> 24)) {
  $$0$lcssa = -1; //@line 22005
  return $$0$lcssa | 0; //@line 22006
 }
 $6 = $0 + 8 | 0; //@line 22008
 $wide$trip$count = $4 & 255; //@line 22009
 if ($1) {
  $$060$us = -1; //@line 22011
  $indvars$iv = 0; //@line 22011
  while (1) {
   $7 = $3 + ($indvars$iv * 24 | 0) + 12 | 0; //@line 22013
   do {
    if ($2) {
     $8 = HEAP32[$7 >> 2] | 0; //@line 22016
     $10 = $3 + ($indvars$iv * 24 | 0) + 8 | 0; //@line 22018
     if ($8 >>> 0 <= (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) >>> 0) {
      HEAP32[$7 >> 2] = 0; //@line 22023
      $$2$us = $$060$us; //@line 22024
      break;
     }
     $$pr$us = HEAP32[$7 >> 2] | 0; //@line 22027
     if (!$$pr$us) {
      $$2$us = $$060$us; //@line 22030
     } else {
      if (($$pr$us - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0) >>> 0 < $$060$us >>> 0) {
       $20 = HEAP32[$7 >> 2] | 0; //@line 22038
       $$2$us = $20 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0; //@line 22043
      } else {
       $$2$us = $$060$us; //@line 22045
      }
     }
    } else {
     HEAP32[$7 >> 2] = 0; //@line 22049
     $$2$us = 0; //@line 22050
    }
   } while (0);
   $indvars$iv = $indvars$iv + 1 | 0; //@line 22053
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$0$lcssa = $$2$us; //@line 22056
    break;
   } else {
    $$060$us = $$2$us; //@line 22059
   }
  }
  return $$0$lcssa | 0; //@line 22062
 } else {
  $$060 = -1; //@line 22064
  $indvars$iv62 = 0; //@line 22064
 }
 while (1) {
  $26 = $3 + ($indvars$iv62 * 24 | 0) + 4 | 0; //@line 22068
  $28 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$26 >> 2] | 0) | 0; //@line 22070
  if ($2) {
   $34 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$3 + ($indvars$iv62 * 24 | 0) + 8 >> 2] | 0) | 0; //@line 22076
  } else {
   $34 = 0; //@line 22078
  }
  if ($28 >>> 0 > $34 >>> 0) {
   $$sink2 = $26; //@line 22082
   label = 17; //@line 22083
  } else {
   if ($2) {
    $$sink2 = $3 + ($indvars$iv62 * 24 | 0) + 8 | 0; //@line 22087
    label = 17; //@line 22088
   } else {
    $41 = 0; //@line 22090
   }
  }
  if ((label | 0) == 17) {
   label = 0; //@line 22094
   $41 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$$sink2 >> 2] | 0) | 0; //@line 22098
  }
  $38 = $3 + ($indvars$iv62 * 24 | 0) + 12 | 0; //@line 22100
  $39 = HEAP32[$38 >> 2] | 0; //@line 22101
  if ($39 >>> 0 > $41 >>> 0) {
   $42 = $39 - $41 | 0; //@line 22104
   $$2 = $42 >>> 0 < $$060 >>> 0 ? $42 : $$060; //@line 22107
  } else {
   HEAP32[$38 >> 2] = 0; //@line 22109
   $$2 = $$060; //@line 22110
  }
  $indvars$iv62 = $indvars$iv62 + 1 | 0; //@line 22112
  if (($indvars$iv62 | 0) == ($wide$trip$count | 0)) {
   $$0$lcssa = $$2; //@line 22115
   break;
  } else {
   $$060 = $$2; //@line 22118
  }
 }
 return $$0$lcssa | 0; //@line 22121
}
function _main__async_cb_13($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18747
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18749
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18751
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18753
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18755
 $10 = $8 + 4 | 0; //@line 18757
 HEAP32[$10 >> 2] = 0; //@line 18759
 HEAP32[$10 + 4 >> 2] = 0; //@line 18762
 HEAP32[$8 >> 2] = 656; //@line 18763
 $14 = $8 + 12 | 0; //@line 18764
 HEAP32[$14 >> 2] = 10256; //@line 18765
 $15 = HEAP32[5960] | 0; //@line 18766
 if (!$15) {
  $25 = HEAP32[2565] | 0; //@line 18770
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 18771
  FUNCTION_TABLE_vii[$25 & 15](23828, $8); //@line 18772
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 658; //@line 18775
   $26 = $ReallocAsyncCtx4 + 4 | 0; //@line 18776
   HEAP32[$26 >> 2] = $8; //@line 18777
   $27 = $ReallocAsyncCtx4 + 8 | 0; //@line 18778
   HEAP32[$27 >> 2] = $14; //@line 18779
   $28 = $ReallocAsyncCtx4 + 12 | 0; //@line 18780
   HEAP32[$28 >> 2] = $2; //@line 18781
   $29 = $ReallocAsyncCtx4 + 16 | 0; //@line 18782
   HEAP32[$29 >> 2] = $4; //@line 18783
   $30 = $ReallocAsyncCtx4 + 20 | 0; //@line 18784
   HEAP32[$30 >> 2] = $6; //@line 18785
   sp = STACKTOP; //@line 18786
   return;
  }
  ___async_unwind = 0; //@line 18789
  HEAP32[$ReallocAsyncCtx4 >> 2] = 658; //@line 18790
  $26 = $ReallocAsyncCtx4 + 4 | 0; //@line 18791
  HEAP32[$26 >> 2] = $8; //@line 18792
  $27 = $ReallocAsyncCtx4 + 8 | 0; //@line 18793
  HEAP32[$27 >> 2] = $14; //@line 18794
  $28 = $ReallocAsyncCtx4 + 12 | 0; //@line 18795
  HEAP32[$28 >> 2] = $2; //@line 18796
  $29 = $ReallocAsyncCtx4 + 16 | 0; //@line 18797
  HEAP32[$29 >> 2] = $4; //@line 18798
  $30 = $ReallocAsyncCtx4 + 20 | 0; //@line 18799
  HEAP32[$30 >> 2] = $6; //@line 18800
  sp = STACKTOP; //@line 18801
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 18805
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 18806
  FUNCTION_TABLE_vi[$18 & 1023](23828); //@line 18807
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 657; //@line 18810
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 18811
   HEAP32[$19 >> 2] = $8; //@line 18812
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 18813
   HEAP32[$20 >> 2] = $14; //@line 18814
   $21 = $ReallocAsyncCtx3 + 12 | 0; //@line 18815
   HEAP32[$21 >> 2] = $2; //@line 18816
   $22 = $ReallocAsyncCtx3 + 16 | 0; //@line 18817
   HEAP32[$22 >> 2] = $4; //@line 18818
   $23 = $ReallocAsyncCtx3 + 20 | 0; //@line 18819
   HEAP32[$23 >> 2] = $6; //@line 18820
   sp = STACKTOP; //@line 18821
   return;
  }
  ___async_unwind = 0; //@line 18824
  HEAP32[$ReallocAsyncCtx3 >> 2] = 657; //@line 18825
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 18826
  HEAP32[$19 >> 2] = $8; //@line 18827
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 18828
  HEAP32[$20 >> 2] = $14; //@line 18829
  $21 = $ReallocAsyncCtx3 + 12 | 0; //@line 18830
  HEAP32[$21 >> 2] = $2; //@line 18831
  $22 = $ReallocAsyncCtx3 + 16 | 0; //@line 18832
  HEAP32[$22 >> 2] = $4; //@line 18833
  $23 = $ReallocAsyncCtx3 + 20 | 0; //@line 18834
  HEAP32[$23 >> 2] = $6; //@line 18835
  sp = STACKTOP; //@line 18836
  return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16983
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 16989
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 16995
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 16998
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16999
    FUNCTION_TABLE_viiiii[$53 & 7]($50, $1, $2, $3, $4); //@line 17000
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 709; //@line 17003
     sp = STACKTOP; //@line 17004
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17007
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 17015
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 17020
     $19 = $1 + 44 | 0; //@line 17021
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 17027
     HEAP8[$22 >> 0] = 0; //@line 17028
     $23 = $1 + 53 | 0; //@line 17029
     HEAP8[$23 >> 0] = 0; //@line 17030
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 17032
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 17035
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 17036
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 17037
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 708; //@line 17040
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 17042
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 17044
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 17046
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 17048
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 17050
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 17052
      sp = STACKTOP; //@line 17053
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 17056
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 17060
      label = 13; //@line 17061
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 17066
       label = 13; //@line 17067
      } else {
       $$037$off039 = 3; //@line 17069
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 17073
      $39 = $1 + 40 | 0; //@line 17074
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 17077
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 17087
        $$037$off039 = $$037$off038; //@line 17088
       } else {
        $$037$off039 = $$037$off038; //@line 17090
       }
      } else {
       $$037$off039 = $$037$off038; //@line 17093
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 17096
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 17103
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_251($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 4948
 STACKTOP = STACKTOP + 16 | 0; //@line 4949
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4949
 $$byval_copy = sp; //@line 4950
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4952
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4954
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4956
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 4958
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 4960
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 4962
 $trunc = (HEAPU8[$2 >> 0] | 0) >>> 5; //@line 4964
 switch ($trunc & 7) {
 case 1:
  {
   if (!(HEAP8[$4 + 2360 >> 0] | 0)) {
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 4972
    __ZN7LoRaMac24handle_join_accept_frameEPKht($4, $2, $8); //@line 4973
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 430; //@line 4976
     $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 4977
     HEAP32[$27 >> 2] = $4; //@line 4978
     sp = STACKTOP; //@line 4979
     STACKTOP = sp; //@line 4980
     return;
    }
    ___async_unwind = 0; //@line 4982
    HEAP32[$ReallocAsyncCtx2 >> 2] = 430; //@line 4983
    $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 4984
    HEAP32[$27 >> 2] = $4; //@line 4985
    sp = STACKTOP; //@line 4986
    STACKTOP = sp; //@line 4987
    return;
   }
   if (!(HEAP8[$4 + 1177 >> 0] | 0)) {
    HEAP8[$4 + 2068 >> 0] = 0; //@line 4994
    STACKTOP = sp; //@line 4995
    return;
   }
   $21 = HEAP32[$4 + 1992 >> 2] | 0; //@line 4998
   HEAP32[$6 >> 2] = 404; //@line 4999
   HEAP32[$6 + 4 >> 2] = 0; //@line 5001
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 5002
   HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 5003
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 5003
   $22 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($21, $4, $$byval_copy) | 0; //@line 5004
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 428; //@line 5007
    $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 5008
    HEAP32[$23 >> 2] = $6; //@line 5009
    $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 5010
    HEAP32[$24 >> 2] = $4; //@line 5011
    sp = STACKTOP; //@line 5012
    STACKTOP = sp; //@line 5013
    return;
   }
   HEAP32[___async_retval >> 2] = $22; //@line 5016
   ___async_unwind = 0; //@line 5017
   HEAP32[$ReallocAsyncCtx6 >> 2] = 428; //@line 5018
   $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 5019
   HEAP32[$23 >> 2] = $6; //@line 5020
   $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 5021
   HEAP32[$24 >> 2] = $4; //@line 5022
   sp = STACKTOP; //@line 5023
   STACKTOP = sp; //@line 5024
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 5028
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($4, $2, $8, 1, $trunc, $10, $12); //@line 5029
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 431; //@line 5032
    sp = STACKTOP; //@line 5033
    STACKTOP = sp; //@line 5034
    return;
   }
   ___async_unwind = 0; //@line 5036
   HEAP32[$ReallocAsyncCtx >> 2] = 431; //@line 5037
   sp = STACKTOP; //@line 5038
   STACKTOP = sp; //@line 5039
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 5043
   return;
  }
 }
}
function _main__async_cb_5($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18463
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18465
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18469
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18471
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18473
 $$pre$i$i = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 18474
 HEAP32[5960] = $$pre$i$i; //@line 18475
 if ($$pre$i$i | 0) {
  $14 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 18480
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 18481
  FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 18482
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 659; //@line 18485
   $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 18486
   HEAP32[$15 >> 2] = $2; //@line 18487
   $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 18488
   HEAP32[$16 >> 2] = $10; //@line 18489
   $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 18490
   HEAP32[$17 >> 2] = $6; //@line 18491
   $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 18492
   HEAP32[$18 >> 2] = $8; //@line 18493
   sp = STACKTOP; //@line 18494
   return;
  }
  ___async_unwind = 0; //@line 18497
  HEAP32[$ReallocAsyncCtx5 >> 2] = 659; //@line 18498
  $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 18499
  HEAP32[$15 >> 2] = $2; //@line 18500
  $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 18501
  HEAP32[$16 >> 2] = $10; //@line 18502
  $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 18503
  HEAP32[$17 >> 2] = $6; //@line 18504
  $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 18505
  HEAP32[$18 >> 2] = $8; //@line 18506
  sp = STACKTOP; //@line 18507
  return;
 }
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(20684, 23828) | 0; //@line 18510
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(20684) | 0) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 18514
  _puts(15408) | 0; //@line 18515
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 660; //@line 18518
   sp = STACKTOP; //@line 18519
   return;
  }
  ___async_unwind = 0; //@line 18522
  HEAP32[$ReallocAsyncCtx7 >> 2] = 660; //@line 18523
  sp = STACKTOP; //@line 18524
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(20684, 5) | 0; //@line 18527
 HEAP8[$10 >> 0] = 0; //@line 18528
 HEAP32[$10 + 4 >> 2] = 24461; //@line 18530
 HEAP32[$10 + 8 >> 2] = 24469; //@line 18532
 HEAP32[$10 + 12 >> 2] = 24477; //@line 18534
 HEAP8[$10 + 16 >> 0] = 3; //@line 18536
 $25 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(20684, $10) | 0; //@line 18537
 switch ($25 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$6 >> 2] = $25; //@line 18543
   _printf(15442, $6) | 0; //@line 18544
   HEAP32[___async_retval >> 2] = -1; //@line 18546
   return;
  }
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 18550
 _puts(15471) | 0; //@line 18551
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 661; //@line 18554
  $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 18555
  HEAP32[$26 >> 2] = $10; //@line 18556
  sp = STACKTOP; //@line 18557
  return;
 }
 ___async_unwind = 0; //@line 18560
 HEAP32[$ReallocAsyncCtx6 >> 2] = 661; //@line 18561
 $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 18562
 HEAP32[$26 >> 2] = $10; //@line 18563
 sp = STACKTOP; //@line 18564
 return;
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_278($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6950
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6952
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6954
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6956
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 6958
 if (!$AsyncRetVal) {
  $22 = HEAP32[$2 >> 2] | 0; //@line 6961
  if (!$22) {
   HEAP32[___async_retval >> 2] = 0; //@line 6965
   return;
  }
  $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 6969
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 6970
  FUNCTION_TABLE_vi[$25 & 1023]($6); //@line 6971
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 285; //@line 6974
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 6975
   HEAP32[$26 >> 2] = 0; //@line 6976
   sp = STACKTOP; //@line 6977
   return;
  }
  ___async_unwind = 0; //@line 6980
  HEAP32[$ReallocAsyncCtx2 >> 2] = 285; //@line 6981
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 6982
  HEAP32[$26 >> 2] = 0; //@line 6983
  sp = STACKTOP; //@line 6984
  return;
 }
 $9 = HEAP32[$2 >> 2] | 0; //@line 6987
 if (!$9) {
  HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 6991
  _equeue_event_dtor($AsyncRetVal, 282); //@line 6992
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 6993
  $18 = _equeue_post($4, 283, $AsyncRetVal) | 0; //@line 6994
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 284; //@line 6997
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 6998
   HEAP32[$19 >> 2] = $2; //@line 6999
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 7000
   HEAP32[$20 >> 2] = $6; //@line 7001
   sp = STACKTOP; //@line 7002
   return;
  }
  HEAP32[___async_retval >> 2] = $18; //@line 7006
  ___async_unwind = 0; //@line 7007
  HEAP32[$ReallocAsyncCtx3 >> 2] = 284; //@line 7008
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 7009
  HEAP32[$19 >> 2] = $2; //@line 7010
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 7011
  HEAP32[$20 >> 2] = $6; //@line 7012
  sp = STACKTOP; //@line 7013
  return;
 } else {
  $12 = HEAP32[$9 + 4 >> 2] | 0; //@line 7017
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 7018
  FUNCTION_TABLE_vii[$12 & 15]($AsyncRetVal, $6); //@line 7019
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 281; //@line 7022
   $13 = $ReallocAsyncCtx + 4 | 0; //@line 7023
   HEAP32[$13 >> 2] = $2; //@line 7024
   $14 = $ReallocAsyncCtx + 8 | 0; //@line 7025
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 7026
   $15 = $ReallocAsyncCtx + 12 | 0; //@line 7027
   HEAP32[$15 >> 2] = $4; //@line 7028
   $16 = $ReallocAsyncCtx + 16 | 0; //@line 7029
   HEAP32[$16 >> 2] = $6; //@line 7030
   sp = STACKTOP; //@line 7031
   return;
  }
  ___async_unwind = 0; //@line 7034
  HEAP32[$ReallocAsyncCtx >> 2] = 281; //@line 7035
  $13 = $ReallocAsyncCtx + 4 | 0; //@line 7036
  HEAP32[$13 >> 2] = $2; //@line 7037
  $14 = $ReallocAsyncCtx + 8 | 0; //@line 7038
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 7039
  $15 = $ReallocAsyncCtx + 12 | 0; //@line 7040
  HEAP32[$15 >> 2] = $4; //@line 7041
  $16 = $ReallocAsyncCtx + 16 | 0; //@line 7042
  HEAP32[$16 >> 2] = $6; //@line 7043
  sp = STACKTOP; //@line 7044
  return;
 }
}
function _initialize__async_cb_59($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22948
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22950
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22952
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22954
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22956
 $10 = $0 + 24 | 0; //@line 22958
 $12 = HEAP32[$10 >> 2] | 0; //@line 22960
 $15 = HEAP32[$10 + 4 >> 2] | 0; //@line 22963
 $17 = HEAP32[$0 + 32 >> 2] | 0; //@line 22965
 $19 = HEAP32[$0 + 36 >> 2] | 0; //@line 22967
 $21 = HEAP32[$2 >> 2] | 0; //@line 22970
 $22 = $21 + 32 | 0; //@line 22971
 HEAP32[$22 >> 2] = HEAP32[___async_retval >> 2]; //@line 22972
 $23 = $21 + 40 | 0; //@line 22973
 $24 = $23; //@line 22974
 HEAP32[$24 >> 2] = 0; //@line 22976
 HEAP32[$24 + 4 >> 2] = 0; //@line 22979
 $28 = $21 + 8 | 0; //@line 22980
 HEAP32[$28 >> 2] = $4; //@line 22981
 $29 = _bitshift64Shl(1, 0, $6 | 0) | 0; //@line 22982
 $31 = _i64Add($29 | 0, tempRet0 | 0, -1, 0) | 0; //@line 22984
 $33 = $21 + 12 | 0; //@line 22986
 HEAP32[$33 >> 2] = $31; //@line 22987
 HEAP32[$21 + 16 >> 2] = $8; //@line 22989
 $36 = $21 + 24 | 0; //@line 22991
 HEAP32[$36 >> 2] = $12; //@line 22993
 HEAP32[$36 + 4 >> 2] = $15; //@line 22996
 $40 = $21 + 48 | 0; //@line 22997
 $41 = $40; //@line 22998
 HEAP32[$41 >> 2] = 0; //@line 23000
 HEAP32[$41 + 4 >> 2] = 0; //@line 23003
 HEAP8[$21 + 56 >> 0] = 1; //@line 23005
 $48 = HEAP32[(HEAP32[$17 >> 2] | 0) + 4 >> 2] | 0; //@line 23008
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 23009
 $49 = FUNCTION_TABLE_i[$48 & 7]() | 0; //@line 23010
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 602; //@line 23013
  $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 23014
  HEAP32[$50 >> 2] = $2; //@line 23015
  $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 23016
  HEAP32[$51 >> 2] = $19; //@line 23017
  $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 23018
  HEAP32[$52 >> 2] = $22; //@line 23019
  $53 = $ReallocAsyncCtx4 + 16 | 0; //@line 23020
  HEAP32[$53 >> 2] = $33; //@line 23021
  $54 = $ReallocAsyncCtx4 + 20 | 0; //@line 23022
  HEAP32[$54 >> 2] = $28; //@line 23023
  $55 = $ReallocAsyncCtx4 + 24 | 0; //@line 23024
  HEAP32[$55 >> 2] = $23; //@line 23025
  $56 = $ReallocAsyncCtx4 + 28 | 0; //@line 23026
  HEAP32[$56 >> 2] = $40; //@line 23027
  sp = STACKTOP; //@line 23028
  return;
 }
 HEAP32[___async_retval >> 2] = $49; //@line 23032
 ___async_unwind = 0; //@line 23033
 HEAP32[$ReallocAsyncCtx4 >> 2] = 602; //@line 23034
 $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 23035
 HEAP32[$50 >> 2] = $2; //@line 23036
 $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 23037
 HEAP32[$51 >> 2] = $19; //@line 23038
 $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 23039
 HEAP32[$52 >> 2] = $22; //@line 23040
 $53 = $ReallocAsyncCtx4 + 16 | 0; //@line 23041
 HEAP32[$53 >> 2] = $33; //@line 23042
 $54 = $ReallocAsyncCtx4 + 20 | 0; //@line 23043
 HEAP32[$54 >> 2] = $28; //@line 23044
 $55 = $ReallocAsyncCtx4 + 24 | 0; //@line 23045
 HEAP32[$55 >> 2] = $23; //@line 23046
 $56 = $ReallocAsyncCtx4 + 28 | 0; //@line 23047
 HEAP32[$56 >> 2] = $40; //@line 23048
 sp = STACKTOP; //@line 23049
 return;
}
function _mbed_vtracef__async_cb_41($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21520
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 21523
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21525
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21527
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21529
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21531
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21533
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21535
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21537
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21539
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21541
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21543
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21545
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21547
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21549
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21551
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 21553
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 21555
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 21557
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 21559
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 21561
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 21563
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 21565
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 21567
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 21569
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 21571
 $55 = ($50 | 0 ? 4 : 0) + $50 + (HEAP32[___async_retval >> 2] | 0) | 0; //@line 21577
 $56 = HEAP32[172] | 0; //@line 21578
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(100) | 0; //@line 21579
 $57 = FUNCTION_TABLE_ii[$56 & 15]($55) | 0; //@line 21580
 if (!___async) {
  HEAP32[___async_retval >> 2] = $57; //@line 21584
  ___async_unwind = 0; //@line 21585
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 147; //@line 21587
 HEAP8[$ReallocAsyncCtx5 + 4 >> 0] = $2 & 1; //@line 21590
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 21592
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 21594
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 21596
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 21598
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $16; //@line 21600
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $18; //@line 21602
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $20; //@line 21604
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $22; //@line 21606
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $24; //@line 21608
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $26; //@line 21610
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $28; //@line 21612
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $30; //@line 21614
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $32; //@line 21616
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $12; //@line 21618
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $14; //@line 21620
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $34; //@line 21622
 HEAP32[$ReallocAsyncCtx5 + 72 >> 2] = $36; //@line 21624
 HEAP32[$ReallocAsyncCtx5 + 76 >> 2] = $38; //@line 21626
 HEAP32[$ReallocAsyncCtx5 + 80 >> 2] = $40; //@line 21628
 HEAP32[$ReallocAsyncCtx5 + 84 >> 2] = $42; //@line 21630
 HEAP32[$ReallocAsyncCtx5 + 88 >> 2] = $44; //@line 21632
 HEAP32[$ReallocAsyncCtx5 + 92 >> 2] = $46; //@line 21634
 HEAP32[$ReallocAsyncCtx5 + 96 >> 2] = $48; //@line 21636
 sp = STACKTOP; //@line 21637
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$unpack10 = 0, $10 = 0, $13 = 0, $19 = 0, $20 = 0, $23 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 12379
 STACKTOP = STACKTOP + 16 | 0; //@line 12380
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12380
 $3 = sp; //@line 12381
 $$unpack10 = HEAP32[$2 + 4 >> 2] | 0; //@line 12384
 $4 = $3 + 12 | 0; //@line 12385
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 12386
 HEAP32[$3 + 4 >> 2] = $$unpack10; //@line 12388
 HEAP32[$3 + 8 >> 2] = $1; //@line 12390
 HEAP32[$4 >> 2] = 844; //@line 12391
 $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12392
 $5 = _equeue_alloc($0, 16) | 0; //@line 12393
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 384; //@line 12396
  HEAP32[$AsyncCtx8 + 4 >> 2] = $4; //@line 12398
  HEAP32[$AsyncCtx8 + 8 >> 2] = $0; //@line 12400
  HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 12402
  sp = STACKTOP; //@line 12403
  STACKTOP = sp; //@line 12404
  return 0; //@line 12404
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 12406
 do {
  if (!$5) {
   $$0$i = 0; //@line 12410
  } else {
   $10 = HEAP32[$4 >> 2] | 0; //@line 12412
   do {
    if (!$10) {
     $19 = 0; //@line 12416
    } else {
     $13 = HEAP32[$10 + 4 >> 2] | 0; //@line 12419
     $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 12420
     FUNCTION_TABLE_vii[$13 & 15]($5, $3); //@line 12421
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 385; //@line 12424
      HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 12426
      HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 12428
      HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 12430
      HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 12432
      sp = STACKTOP; //@line 12433
      STACKTOP = sp; //@line 12434
      return 0; //@line 12434
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 12436
      $19 = HEAP32[$4 >> 2] | 0; //@line 12438
      break;
     }
    }
   } while (0);
   HEAP32[$5 + 12 >> 2] = $19; //@line 12444
   _equeue_event_dtor($5, 282); //@line 12445
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12446
   $20 = _equeue_post($0, 283, $5) | 0; //@line 12447
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 386; //@line 12450
    HEAP32[$AsyncCtx5 + 4 >> 2] = $4; //@line 12452
    HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 12454
    sp = STACKTOP; //@line 12455
    STACKTOP = sp; //@line 12456
    return 0; //@line 12456
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 12458
    $$0$i = $20; //@line 12459
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$4 >> 2] | 0; //@line 12464
 if (!$23) {
  STACKTOP = sp; //@line 12467
  return $$0$i | 0; //@line 12467
 }
 $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 12470
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12471
 FUNCTION_TABLE_vi[$26 & 1023]($3); //@line 12472
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 387; //@line 12475
  HEAP32[$AsyncCtx2 + 4 >> 2] = $$0$i; //@line 12477
  sp = STACKTOP; //@line 12478
  STACKTOP = sp; //@line 12479
  return 0; //@line 12479
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12481
 STACKTOP = sp; //@line 12482
 return $$0$i | 0; //@line 12482
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_284($0) {
 $0 = $0 | 0;
 var $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9829
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9831
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9833
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 9836
 $7 = $2 + 1168 | 0; //@line 9837
 $12 = (HEAP8[$2 + 1177 >> 0] | 0) != 0; //@line 9842
 if (!(HEAP32[$7 >> 2] | 0)) {
  if ($12) {
   $14 = $6 ? 3 : 5; //@line 9846
   HEAP32[$2 + 2040 >> 2] = $14; //@line 9847
   $$pre$phiZ2D = $14; //@line 9848
  } else {
   $$pre$phiZ2D = $6 ? 3 : 5; //@line 9851
  }
  HEAP32[$2 + 2076 >> 2] = $$pre$phiZ2D; //@line 9854
  if ((HEAP32[$4 >> 2] | 0) != 2) {
   $20 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($2, HEAP32[$2 + 1780 >> 2] | 0) | 0; //@line 9860
   if ($20 >>> 0 < (HEAP32[$2 + 1776 >> 2] | 0) >>> 0) {
    label = 16; //@line 9865
   } else {
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 9868
    __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1836 | 0); //@line 9869
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 440; //@line 9872
     $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 9873
     HEAP32[$25 >> 2] = $4; //@line 9874
     $26 = $ReallocAsyncCtx5 + 8 | 0; //@line 9875
     HEAP32[$26 >> 2] = $2; //@line 9876
     $27 = $ReallocAsyncCtx5 + 12 | 0; //@line 9877
     HEAP32[$27 >> 2] = $7; //@line 9878
     sp = STACKTOP; //@line 9879
     return;
    }
    ___async_unwind = 0; //@line 9882
    HEAP32[$ReallocAsyncCtx5 >> 2] = 440; //@line 9883
    $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 9884
    HEAP32[$25 >> 2] = $4; //@line 9885
    $26 = $ReallocAsyncCtx5 + 8 | 0; //@line 9886
    HEAP32[$26 >> 2] = $2; //@line 9887
    $27 = $ReallocAsyncCtx5 + 12 | 0; //@line 9888
    HEAP32[$27 >> 2] = $7; //@line 9889
    sp = STACKTOP; //@line 9890
    return;
   }
  }
 } else {
  if ($12) {
   $29 = $6 ? 4 : 6; //@line 9897
   HEAP32[$2 + 2040 >> 2] = $29; //@line 9898
   $$pre$phi6Z2D = $29; //@line 9899
  } else {
   $$pre$phi6Z2D = $6 ? 4 : 6; //@line 9902
  }
  HEAP32[$2 + 2076 >> 2] = $$pre$phi6Z2D; //@line 9905
  label = 16; //@line 9906
 }
 if ((label | 0) == 16) {
  if ((HEAP32[$4 >> 2] | 0) != 2) {
   HEAP32[___async_retval >> 2] = HEAP32[$7 >> 2]; //@line 9914
   return;
  }
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 9919
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1836 | 0); //@line 9920
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 441; //@line 9923
  $33 = $ReallocAsyncCtx4 + 4 | 0; //@line 9924
  HEAP32[$33 >> 2] = $2; //@line 9925
  $34 = $ReallocAsyncCtx4 + 8 | 0; //@line 9926
  HEAP32[$34 >> 2] = $4; //@line 9927
  $35 = $ReallocAsyncCtx4 + 12 | 0; //@line 9928
  HEAP32[$35 >> 2] = $7; //@line 9929
  sp = STACKTOP; //@line 9930
  return;
 }
 ___async_unwind = 0; //@line 9933
 HEAP32[$ReallocAsyncCtx4 >> 2] = 441; //@line 9934
 $33 = $ReallocAsyncCtx4 + 4 | 0; //@line 9935
 HEAP32[$33 >> 2] = $2; //@line 9936
 $34 = $ReallocAsyncCtx4 + 8 | 0; //@line 9937
 HEAP32[$34 >> 2] = $4; //@line 9938
 $35 = $ReallocAsyncCtx4 + 12 | 0; //@line 9939
 HEAP32[$35 >> 2] = $7; //@line 9940
 sp = STACKTOP; //@line 9941
 return;
}
function __ZN7LoRaMacC2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, stop = 0;
 __ZN18LoRaWANTimeHandlerC2Ev($0); //@line 11686
 __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0 + 4 | 0, $0); //@line 11688
 __ZN14LoRaMacCommandC2Ev($0 + 476 | 0); //@line 11690
 __ZN18LoRaMacChannelPlanC2Ev($0 + 752 | 0); //@line 11692
 __ZN13LoRaMacCryptoC2Ev($0 + 756 | 0); //@line 11694
 $5 = $0 + 1796 | 0; //@line 11695
 HEAP32[$5 >> 2] = 0; //@line 11696
 HEAP32[$5 + 4 >> 2] = 0; //@line 11696
 HEAP32[$5 + 8 >> 2] = 0; //@line 11696
 HEAP32[$5 + 12 >> 2] = 0; //@line 11696
 $6 = $0 + 1816 | 0; //@line 11697
 HEAP32[$6 >> 2] = 0; //@line 11698
 HEAP32[$6 + 4 >> 2] = 0; //@line 11698
 HEAP32[$6 + 8 >> 2] = 0; //@line 11698
 HEAP32[$6 + 12 >> 2] = 0; //@line 11698
 $7 = $0 + 1836 | 0; //@line 11699
 HEAP32[$7 >> 2] = 0; //@line 11700
 HEAP32[$7 + 4 >> 2] = 0; //@line 11700
 HEAP32[$7 + 8 >> 2] = 0; //@line 11700
 HEAP32[$7 + 12 >> 2] = 0; //@line 11700
 $8 = $0 + 1856 | 0; //@line 11701
 HEAP32[$8 >> 2] = 0; //@line 11702
 HEAP32[$8 + 4 >> 2] = 0; //@line 11702
 HEAP32[$8 + 8 >> 2] = 0; //@line 11702
 HEAP32[$8 + 12 >> 2] = 0; //@line 11702
 $9 = $0 + 1992 | 0; //@line 11703
 $10 = $0 + 1996 | 0; //@line 11704
 $11 = $0 + 2036 | 0; //@line 11705
 $12 = $0 + 2068 | 0; //@line 11706
 HEAP32[$0 + 2364 >> 2] = 0; //@line 11708
 $14 = $0 + 1704 | 0; //@line 11709
 $15 = $0 + 1752 | 0; //@line 11710
 HEAP16[$0 + 1440 >> 1] = 0; //@line 11712
 HEAP8[$0 + 1697 >> 0] = 0; //@line 11714
 HEAP8[$0 + 1174 >> 0] = 0; //@line 11716
 $19 = $0 + 1175 | 0; //@line 11717
 dest = $14; //@line 11718
 stop = dest + 44 | 0; //@line 11718
 do {
  HEAP32[dest >> 2] = 0; //@line 11718
  dest = dest + 4 | 0; //@line 11718
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 44 >> 1] = 0; //@line 11718
 HEAP32[$15 >> 2] = 0; //@line 11719
 HEAP32[$15 + 4 >> 2] = 0; //@line 11719
 HEAP32[$15 + 8 >> 2] = 0; //@line 11719
 HEAP32[$15 + 12 >> 2] = 0; //@line 11719
 _memset($9 | 0, 0, 369) | 0; //@line 11720
 HEAP8[$19 >> 0] = 1; //@line 11721
 HEAP32[$0 + 1768 >> 2] = 0; //@line 11723
 HEAP8[$0 + 1177 >> 0] = 0; //@line 11725
 HEAP8[$0 + 1178 >> 0] = 0; //@line 11727
 HEAP8[$0 + 1184 >> 0] = 0; //@line 11729
 HEAP32[$0 + 1788 >> 2] = 0; //@line 11731
 HEAP8[$0 + 1698 >> 0] = 1; //@line 11733
 HEAP8[$0 + 1699 >> 0] = 1; //@line 11735
 HEAP8[$0 + 1181 >> 0] = 0; //@line 11737
 HEAP32[$0 + 1792 >> 2] = 0; //@line 11739
 HEAP32[$0 + 1988 >> 2] = 0; //@line 11741
 HEAP8[$0 + 1936 >> 0] = 0; //@line 11743
 HEAP8[$0 + 1932 >> 0] = 0; //@line 11745
 HEAP32[$11 >> 2] = 0; //@line 11746
 HEAP32[$11 + 4 >> 2] = 0; //@line 11746
 HEAP32[$11 + 8 >> 2] = 0; //@line 11746
 HEAP32[$11 + 12 >> 2] = 0; //@line 11746
 HEAP32[$11 + 16 >> 2] = 0; //@line 11746
 HEAP32[$11 + 20 >> 2] = 0; //@line 11746
 HEAP32[$0 + 2040 >> 2] = 1; //@line 11748
 HEAP32[$12 >> 2] = 0; //@line 11749
 HEAP32[$12 + 4 >> 2] = 0; //@line 11749
 HEAP32[$12 + 8 >> 2] = 0; //@line 11749
 HEAP32[$12 + 12 >> 2] = 0; //@line 11749
 HEAP32[$12 + 16 >> 2] = 0; //@line 11749
 HEAP32[$0 + 2076 >> 2] = 1; //@line 11751
 dest = $10; //@line 11752
 stop = dest + 40 | 0; //@line 11752
 do {
  HEAP32[dest >> 2] = 0; //@line 11752
  dest = dest + 4 | 0; //@line 11752
 } while ((dest | 0) < (stop | 0));
 HEAP32[$0 + 2004 >> 2] = 1; //@line 11754
 return;
}
function _equeue_enqueue($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051$ph = 0, $$05157 = 0, $$0515859 = 0, $$053 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $54 = 0, $65 = 0, $67 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3615
 $13 = $1 - (HEAP32[$0 + 12 >> 2] | 0) | HEAPU8[$1 + 4 >> 0] << HEAP32[$0 + 16 >> 2]; //@line 3626
 $14 = $1 + 20 | 0; //@line 3627
 $16 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 3629
 HEAP32[$14 >> 2] = ($16 & ~($16 >> 31)) + $2; //@line 3634
 HEAP8[$1 + 5 >> 0] = HEAP8[$0 + 9 >> 0] | 0; //@line 3638
 $24 = $0 + 128 | 0; //@line 3639
 _equeue_mutex_lock($24); //@line 3640
 $25 = HEAP32[$0 >> 2] | 0; //@line 3641
 L1 : do {
  if (!$25) {
   $$051$ph = $0; //@line 3645
   label = 5; //@line 3646
  } else {
   $27 = HEAP32[$14 >> 2] | 0; //@line 3648
   $$053 = $0; //@line 3649
   $29 = $25; //@line 3649
   while (1) {
    if (((HEAP32[$29 + 20 >> 2] | 0) - $27 | 0) >= 0) {
     break;
    }
    $33 = $29 + 8 | 0; //@line 3658
    $34 = HEAP32[$33 >> 2] | 0; //@line 3659
    if (!$34) {
     $$051$ph = $33; //@line 3662
     label = 5; //@line 3663
     break L1;
    } else {
     $$053 = $33; //@line 3666
     $29 = $34; //@line 3666
    }
   }
   if ((HEAP32[$29 + 20 >> 2] | 0) != (HEAP32[$14 >> 2] | 0)) {
    $49 = $1 + 8 | 0; //@line 3674
    HEAP32[$49 >> 2] = $29; //@line 3675
    HEAP32[$29 + 16 >> 2] = $49; //@line 3677
    $$0515859 = $$053; //@line 3678
    label = 11; //@line 3679
    break;
   }
   $42 = HEAP32[$29 + 8 >> 2] | 0; //@line 3683
   $43 = $1 + 8 | 0; //@line 3684
   HEAP32[$43 >> 2] = $42; //@line 3685
   if ($42 | 0) {
    HEAP32[$42 + 16 >> 2] = $43; //@line 3689
   }
   $46 = HEAP32[$$053 >> 2] | 0; //@line 3691
   $47 = $1 + 12 | 0; //@line 3692
   HEAP32[$47 >> 2] = $46; //@line 3693
   HEAP32[$46 + 16 >> 2] = $47; //@line 3695
   $$05157 = $$053; //@line 3696
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$1 + 8 >> 2] = 0; //@line 3701
  $$0515859 = $$051$ph; //@line 3702
  label = 11; //@line 3703
 }
 if ((label | 0) == 11) {
  HEAP32[$1 + 12 >> 2] = 0; //@line 3707
  $$05157 = $$0515859; //@line 3708
 }
 HEAP32[$$05157 >> 2] = $1; //@line 3710
 HEAP32[$1 + 16 >> 2] = $$05157; //@line 3712
 $54 = HEAP32[$0 + 40 >> 2] | 0; //@line 3714
 if (!$54) {
  _equeue_mutex_unlock($24); //@line 3717
  return $13 | 0; //@line 3718
 }
 if (!(HEAP8[$0 + 36 >> 0] | 0)) {
  _equeue_mutex_unlock($24); //@line 3724
  return $13 | 0; //@line 3725
 }
 if ((HEAP32[$0 >> 2] | 0) != ($1 | 0)) {
  _equeue_mutex_unlock($24); //@line 3730
  return $13 | 0; //@line 3731
 }
 if (HEAP32[$1 + 12 >> 2] | 0) {
  _equeue_mutex_unlock($24); //@line 3737
  return $13 | 0; //@line 3738
 }
 $65 = HEAP32[$0 + 44 >> 2] | 0; //@line 3741
 $67 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 3743
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 3747
 FUNCTION_TABLE_vii[$54 & 15]($65, $67 & ~($67 >> 31)); //@line 3748
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 132; //@line 3751
  HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 3753
  HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 3755
  sp = STACKTOP; //@line 3756
  return 0; //@line 3757
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3759
 _equeue_mutex_unlock($24); //@line 3760
 return $13 | 0; //@line 3761
}
function _mbedtls_cipher_free__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $38 = 0, $42 = 0, $46 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2561
 HEAP8[$2 >> 0] = 0; //@line 2563
 HEAP8[$2 + 1 >> 0] = 0; //@line 2565
 HEAP8[$2 + 2 >> 0] = 0; //@line 2567
 $6 = $2 + 4 | 0; //@line 2568
 HEAP8[$2 + 3 >> 0] = 0; //@line 2569
 HEAP8[$6 >> 0] = 0; //@line 2571
 HEAP8[$6 + 1 >> 0] = 0; //@line 2573
 HEAP8[$6 + 2 >> 0] = 0; //@line 2575
 $10 = $6 + 4 | 0; //@line 2576
 HEAP8[$6 + 3 >> 0] = 0; //@line 2577
 HEAP8[$10 >> 0] = 0; //@line 2579
 HEAP8[$10 + 1 >> 0] = 0; //@line 2581
 HEAP8[$10 + 2 >> 0] = 0; //@line 2583
 $14 = $6 + 8 | 0; //@line 2584
 HEAP8[$10 + 3 >> 0] = 0; //@line 2585
 HEAP8[$14 >> 0] = 0; //@line 2587
 HEAP8[$14 + 1 >> 0] = 0; //@line 2589
 HEAP8[$14 + 2 >> 0] = 0; //@line 2591
 $18 = $6 + 12 | 0; //@line 2592
 HEAP8[$14 + 3 >> 0] = 0; //@line 2593
 HEAP8[$18 >> 0] = 0; //@line 2595
 HEAP8[$18 + 1 >> 0] = 0; //@line 2597
 HEAP8[$18 + 2 >> 0] = 0; //@line 2599
 $22 = $6 + 16 | 0; //@line 2600
 HEAP8[$18 + 3 >> 0] = 0; //@line 2601
 HEAP8[$22 >> 0] = 0; //@line 2603
 HEAP8[$22 + 1 >> 0] = 0; //@line 2605
 HEAP8[$22 + 2 >> 0] = 0; //@line 2607
 $26 = $6 + 20 | 0; //@line 2608
 HEAP8[$22 + 3 >> 0] = 0; //@line 2609
 HEAP8[$26 >> 0] = 0; //@line 2611
 HEAP8[$26 + 1 >> 0] = 0; //@line 2613
 HEAP8[$26 + 2 >> 0] = 0; //@line 2615
 $30 = $6 + 24 | 0; //@line 2616
 HEAP8[$26 + 3 >> 0] = 0; //@line 2617
 HEAP8[$30 >> 0] = 0; //@line 2619
 HEAP8[$30 + 1 >> 0] = 0; //@line 2621
 HEAP8[$30 + 2 >> 0] = 0; //@line 2623
 $34 = $6 + 28 | 0; //@line 2624
 HEAP8[$30 + 3 >> 0] = 0; //@line 2625
 HEAP8[$34 >> 0] = 0; //@line 2627
 HEAP8[$34 + 1 >> 0] = 0; //@line 2629
 HEAP8[$34 + 2 >> 0] = 0; //@line 2631
 $38 = $6 + 32 | 0; //@line 2632
 HEAP8[$34 + 3 >> 0] = 0; //@line 2633
 HEAP8[$38 >> 0] = 0; //@line 2635
 HEAP8[$38 + 1 >> 0] = 0; //@line 2637
 HEAP8[$38 + 2 >> 0] = 0; //@line 2639
 $42 = $6 + 36 | 0; //@line 2640
 HEAP8[$38 + 3 >> 0] = 0; //@line 2641
 HEAP8[$42 >> 0] = 0; //@line 2643
 HEAP8[$42 + 1 >> 0] = 0; //@line 2645
 HEAP8[$42 + 2 >> 0] = 0; //@line 2647
 $46 = $6 + 40 | 0; //@line 2648
 HEAP8[$42 + 3 >> 0] = 0; //@line 2649
 HEAP8[$46 >> 0] = 0; //@line 2651
 HEAP8[$46 + 1 >> 0] = 0; //@line 2653
 HEAP8[$46 + 2 >> 0] = 0; //@line 2655
 $50 = $6 + 44 | 0; //@line 2656
 HEAP8[$46 + 3 >> 0] = 0; //@line 2657
 HEAP8[$50 >> 0] = 0; //@line 2659
 HEAP8[$50 + 1 >> 0] = 0; //@line 2661
 HEAP8[$50 + 2 >> 0] = 0; //@line 2663
 $54 = $6 + 48 | 0; //@line 2664
 HEAP8[$50 + 3 >> 0] = 0; //@line 2665
 HEAP8[$54 >> 0] = 0; //@line 2667
 HEAP8[$54 + 1 >> 0] = 0; //@line 2669
 HEAP8[$54 + 2 >> 0] = 0; //@line 2671
 $58 = $6 + 52 | 0; //@line 2672
 HEAP8[$54 + 3 >> 0] = 0; //@line 2673
 HEAP8[$58 >> 0] = 0; //@line 2675
 HEAP8[$58 + 1 >> 0] = 0; //@line 2677
 HEAP8[$58 + 2 >> 0] = 0; //@line 2679
 $62 = $6 + 56 | 0; //@line 2680
 HEAP8[$58 + 3 >> 0] = 0; //@line 2681
 HEAP8[$62 >> 0] = 0; //@line 2683
 HEAP8[$62 + 1 >> 0] = 0; //@line 2685
 HEAP8[$62 + 2 >> 0] = 0; //@line 2687
 $66 = $6 + 60 | 0; //@line 2688
 HEAP8[$62 + 3 >> 0] = 0; //@line 2689
 HEAP8[$66 >> 0] = 0; //@line 2691
 HEAP8[$66 + 1 >> 0] = 0; //@line 2693
 HEAP8[$66 + 2 >> 0] = 0; //@line 2695
 HEAP8[$66 + 3 >> 0] = 0; //@line 2696
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_142($0) {
 $0 = $0 | 0;
 var $$pre126 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 29334
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29336
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29338
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29340
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29342
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29344
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29346
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29348
 $$pre126 = HEAP32[$2 >> 2] | 0; //@line 29349
 if ($$pre126 | 0) {
  $17 = HEAP32[$$pre126 + 4 >> 2] | 0; //@line 29353
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 29354
  FUNCTION_TABLE_vii[$17 & 15]($6, $8); //@line 29355
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 197; //@line 29358
   $18 = $ReallocAsyncCtx14 + 4 | 0; //@line 29359
   HEAP32[$18 >> 2] = $2; //@line 29360
   $19 = $ReallocAsyncCtx14 + 8 | 0; //@line 29361
   HEAP32[$19 >> 2] = $4; //@line 29362
   $20 = $ReallocAsyncCtx14 + 12 | 0; //@line 29363
   HEAP32[$20 >> 2] = $8; //@line 29364
   $21 = $ReallocAsyncCtx14 + 16 | 0; //@line 29365
   HEAP32[$21 >> 2] = $10; //@line 29366
   $22 = $ReallocAsyncCtx14 + 20 | 0; //@line 29367
   HEAP32[$22 >> 2] = $12; //@line 29368
   $23 = $ReallocAsyncCtx14 + 24 | 0; //@line 29369
   HEAP32[$23 >> 2] = $14; //@line 29370
   sp = STACKTOP; //@line 29371
   return;
  }
  ___async_unwind = 0; //@line 29374
  HEAP32[$ReallocAsyncCtx14 >> 2] = 197; //@line 29375
  $18 = $ReallocAsyncCtx14 + 4 | 0; //@line 29376
  HEAP32[$18 >> 2] = $2; //@line 29377
  $19 = $ReallocAsyncCtx14 + 8 | 0; //@line 29378
  HEAP32[$19 >> 2] = $4; //@line 29379
  $20 = $ReallocAsyncCtx14 + 12 | 0; //@line 29380
  HEAP32[$20 >> 2] = $8; //@line 29381
  $21 = $ReallocAsyncCtx14 + 16 | 0; //@line 29382
  HEAP32[$21 >> 2] = $10; //@line 29383
  $22 = $ReallocAsyncCtx14 + 20 | 0; //@line 29384
  HEAP32[$22 >> 2] = $12; //@line 29385
  $23 = $ReallocAsyncCtx14 + 24 | 0; //@line 29386
  HEAP32[$23 >> 2] = $14; //@line 29387
  sp = STACKTOP; //@line 29388
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 29391
 __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($10, $12); //@line 29392
 $26 = HEAP32[(HEAP32[$12 >> 2] | 0) + 72 >> 2] | 0; //@line 29395
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 29396
 FUNCTION_TABLE_vi[$26 & 1023]($12); //@line 29397
 if (___async) {
  HEAP32[$ReallocAsyncCtx16 >> 2] = 199; //@line 29400
  $27 = $ReallocAsyncCtx16 + 4 | 0; //@line 29401
  HEAP32[$27 >> 2] = $12; //@line 29402
  $28 = $ReallocAsyncCtx16 + 8 | 0; //@line 29403
  HEAP32[$28 >> 2] = $14; //@line 29404
  $29 = $ReallocAsyncCtx16 + 12 | 0; //@line 29405
  HEAP32[$29 >> 2] = $12; //@line 29406
  sp = STACKTOP; //@line 29407
  return;
 }
 ___async_unwind = 0; //@line 29410
 HEAP32[$ReallocAsyncCtx16 >> 2] = 199; //@line 29411
 $27 = $ReallocAsyncCtx16 + 4 | 0; //@line 29412
 HEAP32[$27 >> 2] = $12; //@line 29413
 $28 = $ReallocAsyncCtx16 + 8 | 0; //@line 29414
 HEAP32[$28 >> 2] = $14; //@line 29415
 $29 = $ReallocAsyncCtx16 + 12 | 0; //@line 29416
 HEAP32[$29 >> 2] = $12; //@line 29417
 sp = STACKTOP; //@line 29418
 return;
}
function __ZN7LoRaPHY11add_channelEPK16channel_params_th($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$$125$off0 = 0, $$026 = 0, $$4$off0 = 0, $$5$off039 = 0, $$5$off040$ph = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $22 = 0, $40 = 0, $46 = 0, $47 = 0, $48 = 0, $53 = 0, $55 = 0, $6 = 0, $65 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21567
 if (!(HEAP8[$0 + 16 >> 0] | 0)) {
  $$026 = -1003; //@line 21572
  return $$026 | 0; //@line 21573
 }
 $6 = $2 & 255; //@line 21575
 if ((HEAPU8[$0 + 20 >> 0] | 0) <= ($2 & 255)) {
  $$026 = -1003; //@line 21580
  return $$026 | 0; //@line 21581
 }
 $11 = HEAP8[$1 + 8 >> 0] | 0; //@line 21584
 $13 = ($11 << 4 & 255) << 24 >> 24 >> 4; //@line 21586
 $15 = HEAP8[$0 + 26 >> 0] | 0; //@line 21588
 $17 = HEAP8[$0 + 27 >> 0] | 0; //@line 21590
 $20 = $11 << 24 >> 24 >> 4; //@line 21594
 $22 = $20 << 24 >> 24 <= $17 << 24 >> 24; //@line 21596
 $$$125$off0 = $13 << 24 >> 24 > $20 << 24 >> 24 | (($13 << 24 >> 24 > $17 << 24 >> 24 ? 1 : $13 << 24 >> 24 < $15 << 24 >> 24) | $20 << 24 >> 24 >= $15 << 24 >> 24 & $22 ^ 1); //@line 21601
 if ((HEAPU8[$0 + 18 >> 0] | 0) > ($2 & 255)) {
  $$4$off0 = ($13 << 24 >> 24 | 0) > ($15 & 255 | 0) | $$$125$off0 | $22 & $20 << 24 >> 24 >= (HEAP8[$0 + 31 >> 0] | 0) ^ 1; //@line 21615
  if ((HEAP32[$1 >> 2] | 0) == (HEAP32[(HEAP32[$0 + 124 >> 2] | 0) + ($6 * 12 | 0) >> 2] | 0)) {
   $$5$off039 = $$4$off0; //@line 21623
   label = 5; //@line 21624
  } else {
   $$5$off040$ph = $$4$off0; //@line 21626
  }
 } else {
  $$5$off039 = $$$125$off0; //@line 21629
  label = 5; //@line 21630
 }
 if ((label | 0) == 5) {
  $40 = HEAP8[$1 + 9 >> 0] | 0; //@line 21634
  if (($40 & 255) < (HEAPU8[$0 + 76 >> 0] | 0)) {
   $46 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 21641
   $47 = HEAP32[$1 >> 2] | 0; //@line 21642
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 21643
   $48 = FUNCTION_TABLE_iiii[$46 & 31]($0, $47, $40) | 0; //@line 21644
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 534; //@line 21647
    HEAP8[$AsyncCtx + 4 >> 0] = $$5$off039 & 1; //@line 21650
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 21652
    HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 21654
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 21656
    sp = STACKTOP; //@line 21657
    return 0; //@line 21658
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 21660
   if ($48) {
    if ($$5$off039) {
     $$026 = $$5$off039 ? -1005 : -1004; //@line 21664
     return $$026 | 0; //@line 21665
    }
    $53 = $0 + 124 | 0; //@line 21667
    $55 = (HEAP32[$53 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 21669
    HEAP32[$55 >> 2] = HEAP32[$1 >> 2]; //@line 21670
    HEAP32[$55 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 21670
    HEAP32[$55 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 21670
    HEAP8[(HEAP32[$53 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$1 + 9 >> 0] | 0; //@line 21675
    $65 = (HEAP32[$0 + 116 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 21681
    HEAP16[$65 >> 1] = 1 << ($6 & 15) | HEAPU16[$65 >> 1]; //@line 21686
    $$026 = 0; //@line 21687
    return $$026 | 0; //@line 21688
   } else {
    $$5$off040$ph = $$5$off039; //@line 21690
   }
  } else {
   $$5$off040$ph = $$5$off039; //@line 21693
  }
 }
 $$026 = $$5$off040$ph ? -1006 : -1004; //@line 21697
 return $$026 | 0; //@line 21698
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$unpack10 = 0, $10 = 0, $13 = 0, $19 = 0, $20 = 0, $23 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8767
 STACKTOP = STACKTOP + 16 | 0; //@line 8768
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8768
 $3 = sp; //@line 8769
 $$unpack10 = HEAP32[$2 + 4 >> 2] | 0; //@line 8772
 $4 = $3 + 12 | 0; //@line 8773
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 8774
 HEAP32[$3 + 4 >> 2] = $$unpack10; //@line 8776
 HEAP32[$3 + 8 >> 2] = $1; //@line 8778
 HEAP32[$4 >> 2] = 808; //@line 8779
 $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8780
 $5 = _equeue_alloc($0, 16) | 0; //@line 8781
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 280; //@line 8784
  HEAP32[$AsyncCtx8 + 4 >> 2] = $4; //@line 8786
  HEAP32[$AsyncCtx8 + 8 >> 2] = $0; //@line 8788
  HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 8790
  sp = STACKTOP; //@line 8791
  STACKTOP = sp; //@line 8792
  return 0; //@line 8792
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 8794
 do {
  if (!$5) {
   $$0$i = 0; //@line 8798
  } else {
   $10 = HEAP32[$4 >> 2] | 0; //@line 8800
   do {
    if (!$10) {
     $19 = 0; //@line 8804
    } else {
     $13 = HEAP32[$10 + 4 >> 2] | 0; //@line 8807
     $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 8808
     FUNCTION_TABLE_vii[$13 & 15]($5, $3); //@line 8809
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 281; //@line 8812
      HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 8814
      HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 8816
      HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 8818
      HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 8820
      sp = STACKTOP; //@line 8821
      STACKTOP = sp; //@line 8822
      return 0; //@line 8822
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 8824
      $19 = HEAP32[$4 >> 2] | 0; //@line 8826
      break;
     }
    }
   } while (0);
   HEAP32[$5 + 12 >> 2] = $19; //@line 8832
   _equeue_event_dtor($5, 282); //@line 8833
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8834
   $20 = _equeue_post($0, 283, $5) | 0; //@line 8835
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 284; //@line 8838
    HEAP32[$AsyncCtx5 + 4 >> 2] = $4; //@line 8840
    HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 8842
    sp = STACKTOP; //@line 8843
    STACKTOP = sp; //@line 8844
    return 0; //@line 8844
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8846
    $$0$i = $20; //@line 8847
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$4 >> 2] | 0; //@line 8852
 if (!$23) {
  STACKTOP = sp; //@line 8855
  return $$0$i | 0; //@line 8855
 }
 $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 8858
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8859
 FUNCTION_TABLE_vi[$26 & 1023]($3); //@line 8860
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 285; //@line 8863
  HEAP32[$AsyncCtx2 + 4 >> 2] = $$0$i; //@line 8865
  sp = STACKTOP; //@line 8866
  STACKTOP = sp; //@line 8867
  return 0; //@line 8867
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8869
 STACKTOP = sp; //@line 8870
 return $$0$i | 0; //@line 8870
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 16295
 STACKTOP = STACKTOP + 48 | 0; //@line 16296
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 16296
 $vararg_buffer10 = sp + 32 | 0; //@line 16297
 $vararg_buffer7 = sp + 24 | 0; //@line 16298
 $vararg_buffer3 = sp + 16 | 0; //@line 16299
 $vararg_buffer = sp; //@line 16300
 $0 = sp + 36 | 0; //@line 16301
 $1 = ___cxa_get_globals_fast() | 0; //@line 16302
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 16305
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 16310
   $9 = HEAP32[$7 >> 2] | 0; //@line 16312
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 16315
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 18562; //@line 16321
    _abort_message(18512, $vararg_buffer7); //@line 16322
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 16331
   } else {
    $22 = $3 + 80 | 0; //@line 16333
   }
   HEAP32[$0 >> 2] = $22; //@line 16335
   $23 = HEAP32[$3 >> 2] | 0; //@line 16336
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 16338
   $28 = HEAP32[(HEAP32[94] | 0) + 16 >> 2] | 0; //@line 16341
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 16342
   $29 = FUNCTION_TABLE_iiii[$28 & 31](376, $23, $0) | 0; //@line 16343
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 699; //@line 16346
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16348
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 16350
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 16352
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 16354
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 16356
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 16358
    sp = STACKTOP; //@line 16359
    STACKTOP = sp; //@line 16360
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 16362
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 18562; //@line 16364
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 16366
    _abort_message(18471, $vararg_buffer3); //@line 16367
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 16370
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 16373
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16374
   $40 = FUNCTION_TABLE_ii[$39 & 15]($36) | 0; //@line 16375
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 700; //@line 16378
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 16380
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 16382
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 16384
    sp = STACKTOP; //@line 16385
    STACKTOP = sp; //@line 16386
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 16388
    HEAP32[$vararg_buffer >> 2] = 18562; //@line 16389
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 16391
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 16393
    _abort_message(18426, $vararg_buffer); //@line 16394
   }
  }
 }
 _abort_message(18550, $vararg_buffer10); //@line 16399
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_155($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29993
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29995
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29997
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29999
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30001
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30003
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30005
 if ((HEAP32[___async_retval >> 2] | 0) >= ($2 | 0)) {
  $25 = HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] | 0; //@line 30012
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 30013
  FUNCTION_TABLE_vi[$25 & 1023]($8); //@line 30014
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 66; //@line 30017
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 30018
   HEAP32[$26 >> 2] = $10; //@line 30019
   $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 30020
   HEAP32[$27 >> 2] = $12; //@line 30021
   $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 30022
   $$expand_i1_val = 1; //@line 30023
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 30024
   sp = STACKTOP; //@line 30025
   return;
  }
  ___async_unwind = 0; //@line 30028
  HEAP32[$ReallocAsyncCtx2 >> 2] = 66; //@line 30029
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 30030
  HEAP32[$26 >> 2] = $10; //@line 30031
  $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 30032
  HEAP32[$27 >> 2] = $12; //@line 30033
  $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 30034
  $$expand_i1_val = 1; //@line 30035
  HEAP8[$28 >> 0] = $$expand_i1_val; //@line 30036
  sp = STACKTOP; //@line 30037
  return;
 }
 _mbed_tracef(16, 11020, 11186, $4); //@line 30040
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 30041
 $14 = __ZN4mbed5Timer7read_msEv($10) | 0; //@line 30042
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 65; //@line 30045
  $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 30046
  HEAP32[$15 >> 2] = $2; //@line 30047
  $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 30048
  HEAP32[$16 >> 2] = $4; //@line 30049
  $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 30050
  HEAP32[$17 >> 2] = $6; //@line 30051
  $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 30052
  HEAP32[$18 >> 2] = $8; //@line 30053
  $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 30054
  HEAP32[$19 >> 2] = $10; //@line 30055
  $20 = $ReallocAsyncCtx5 + 24 | 0; //@line 30056
  HEAP32[$20 >> 2] = $12; //@line 30057
  sp = STACKTOP; //@line 30058
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 30062
 ___async_unwind = 0; //@line 30063
 HEAP32[$ReallocAsyncCtx5 >> 2] = 65; //@line 30064
 $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 30065
 HEAP32[$15 >> 2] = $2; //@line 30066
 $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 30067
 HEAP32[$16 >> 2] = $4; //@line 30068
 $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 30069
 HEAP32[$17 >> 2] = $6; //@line 30070
 $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 30071
 HEAP32[$18 >> 2] = $8; //@line 30072
 $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 30073
 HEAP32[$19 >> 2] = $10; //@line 30074
 $20 = $ReallocAsyncCtx5 + 24 | 0; //@line 30075
 HEAP32[$20 >> 2] = $12; //@line 30076
 sp = STACKTOP; //@line 30077
 return;
}
function __ZN18LoRaMacChannelPlan11remove_planEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $32 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17163
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $39 = -1002; //@line 17167
  return $39 | 0; //@line 17168
 }
 $4 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 17171
 $6 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 17173
 $8 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 1) | 0; //@line 17175
 if (!($4 << 24 >> 24)) {
  $39 = 0; //@line 17178
  return $39 | 0; //@line 17179
 }
 $10 = $4 & 255; //@line 17181
 $indvars$iv = 0; //@line 17182
 while (1) {
  if (!(__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $8, $indvars$iv) | 0)) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $6, $indvars$iv) | 0) {
    if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
     $39 = -1002; //@line 17193
     label = 15; //@line 17194
     break;
    }
    if ($indvars$iv >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) >>> 0) {
     $39 = -1003; //@line 17202
     label = 15; //@line 17203
     break;
    }
    $21 = HEAP32[$0 >> 2] | 0; //@line 17206
    $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 17209
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 17211
    $26 = FUNCTION_TABLE_iii[$24 & 15]($21, $indvars$iv & 255) | 0; //@line 17212
    if (___async) {
     label = 9; //@line 17215
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17218
    if (!$26) {
     $39 = -1003; //@line 17220
     label = 15; //@line 17221
     break;
    }
    $32 = HEAP32[$0 >> 2] | 0; //@line 17224
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 17225
    __ZN7LoRaPHY18put_radio_to_sleepEv($32); //@line 17226
    if (___async) {
     label = 12; //@line 17229
     break;
    }
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 17232
   }
  }
  $indvars$iv$next = $indvars$iv + 1 | 0; //@line 17235
  if ($indvars$iv$next >>> 0 < $10 >>> 0) {
   $indvars$iv = $indvars$iv$next; //@line 17238
  } else {
   $39 = 0; //@line 17240
   label = 15; //@line 17241
   break;
  }
 }
 if ((label | 0) == 9) {
  HEAP32[$AsyncCtx >> 2] = 486; //@line 17246
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 17248
  HEAP32[$AsyncCtx + 8 >> 2] = $indvars$iv; //@line 17250
  HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 17252
  HEAP32[$AsyncCtx + 16 >> 2] = $8; //@line 17254
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 17256
  sp = STACKTOP; //@line 17257
  return 0; //@line 17258
 } else if ((label | 0) == 12) {
  HEAP32[$AsyncCtx2 >> 2] = 487; //@line 17261
  HEAP32[$AsyncCtx2 + 4 >> 2] = $indvars$iv; //@line 17263
  HEAP32[$AsyncCtx2 + 8 >> 2] = $10; //@line 17265
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 17267
  HEAP32[$AsyncCtx2 + 16 >> 2] = $8; //@line 17269
  HEAP32[$AsyncCtx2 + 20 >> 2] = $6; //@line 17271
  sp = STACKTOP; //@line 17272
  return 0; //@line 17273
 } else if ((label | 0) == 15) {
  return $39 | 0; //@line 17276
 }
 return 0; //@line 17278
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_127($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $34 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 26645
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26647
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26649
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26651
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 26653
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26655
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26657
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26659
 if (HEAP8[___async_retval >> 0] & 1) {
  $34 = $2; //@line 26664
 } else {
  $20 = $2 + 1 | 0; //@line 26666
  if (($20 | 0) < (HEAPU8[$10 >> 0] | 0 | 0)) {
   $18 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 26673
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 26675
   $21 = FUNCTION_TABLE_iiii[$18 & 31]($6, $14, $20 & 255) | 0; //@line 26676
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 510; //@line 26679
    $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 26680
    HEAP32[$22 >> 2] = $20; //@line 26681
    $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 26682
    HEAP32[$23 >> 2] = $4; //@line 26683
    $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 26684
    HEAP32[$24 >> 2] = $6; //@line 26685
    $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 26686
    HEAP8[$25 >> 0] = $8; //@line 26687
    $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 26688
    HEAP32[$26 >> 2] = $10; //@line 26689
    $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 26690
    HEAP32[$27 >> 2] = $12; //@line 26691
    $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 26692
    HEAP32[$28 >> 2] = $14; //@line 26693
    sp = STACKTOP; //@line 26694
    return;
   }
   HEAP8[___async_retval >> 0] = $21 & 1; //@line 26699
   ___async_unwind = 0; //@line 26700
   HEAP32[$ReallocAsyncCtx3 >> 2] = 510; //@line 26701
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 26702
   HEAP32[$22 >> 2] = $20; //@line 26703
   $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 26704
   HEAP32[$23 >> 2] = $4; //@line 26705
   $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 26706
   HEAP32[$24 >> 2] = $6; //@line 26707
   $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 26708
   HEAP8[$25 >> 0] = $8; //@line 26709
   $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 26710
   HEAP32[$26 >> 2] = $10; //@line 26711
   $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 26712
   HEAP32[$27 >> 2] = $12; //@line 26713
   $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 26714
   HEAP32[$28 >> 2] = $14; //@line 26715
   sp = STACKTOP; //@line 26716
   return;
  } else {
   $34 = -1; //@line 26719
  }
 }
 HEAP8[$4 + 9 >> 0] = $34; //@line 26724
 $38 = HEAP32[(HEAP32[$6 >> 2] | 0) + 60 >> 2] | 0; //@line 26727
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 26728
 $39 = FUNCTION_TABLE_iiii[$38 & 31]($6, $4, $8) | 0; //@line 26729
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 511; //@line 26732
  sp = STACKTOP; //@line 26733
  return;
 }
 HEAP32[___async_retval >> 2] = $39; //@line 26737
 ___async_unwind = 0; //@line 26738
 HEAP32[$ReallocAsyncCtx4 >> 2] = 511; //@line 26739
 sp = STACKTOP; //@line 26740
 return;
}
function _mbed_error_vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4478
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4480
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4482
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4484
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[5099] | 0)) {
  _serial_init(20400, 2, 3); //@line 4492
 }
 $9 = HEAP8[$4 >> 0] | 0; //@line 4494
 if (0 == 13 | $9 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 4500
  _serial_putc(20400, $9 << 24 >> 24); //@line 4501
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 634; //@line 4504
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 4505
   HEAP32[$18 >> 2] = 0; //@line 4506
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 4507
   HEAP32[$19 >> 2] = $AsyncRetVal; //@line 4508
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 4509
   HEAP32[$20 >> 2] = $2; //@line 4510
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 4511
   HEAP8[$21 >> 0] = $9; //@line 4512
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 4513
   HEAP32[$22 >> 2] = $4; //@line 4514
   sp = STACKTOP; //@line 4515
   return;
  }
  ___async_unwind = 0; //@line 4518
  HEAP32[$ReallocAsyncCtx2 >> 2] = 634; //@line 4519
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 4520
  HEAP32[$18 >> 2] = 0; //@line 4521
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 4522
  HEAP32[$19 >> 2] = $AsyncRetVal; //@line 4523
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 4524
  HEAP32[$20 >> 2] = $2; //@line 4525
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 4526
  HEAP8[$21 >> 0] = $9; //@line 4527
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 4528
  HEAP32[$22 >> 2] = $4; //@line 4529
  sp = STACKTOP; //@line 4530
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 4533
  _serial_putc(20400, 13); //@line 4534
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 633; //@line 4537
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 4538
   HEAP8[$12 >> 0] = $9; //@line 4539
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 4540
   HEAP32[$13 >> 2] = 0; //@line 4541
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 4542
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 4543
   $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 4544
   HEAP32[$15 >> 2] = $2; //@line 4545
   $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 4546
   HEAP32[$16 >> 2] = $4; //@line 4547
   sp = STACKTOP; //@line 4548
   return;
  }
  ___async_unwind = 0; //@line 4551
  HEAP32[$ReallocAsyncCtx3 >> 2] = 633; //@line 4552
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 4553
  HEAP8[$12 >> 0] = $9; //@line 4554
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 4555
  HEAP32[$13 >> 2] = 0; //@line 4556
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 4557
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 4558
  $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 4559
  HEAP32[$15 >> 2] = $2; //@line 4560
  $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 4561
  HEAP32[$16 >> 2] = $4; //@line 4562
  sp = STACKTOP; //@line 4563
  return;
 }
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_184($0) {
 $0 = $0 | 0;
 var $$038 = 0, $10 = 0, $17 = 0, $19 = 0, $2 = 0, $23 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 439
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 441
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 443
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 445
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 447
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 449
 if (!(HEAP8[$0 + 24 >> 0] & 1)) {
  HEAP8[___async_retval >> 0] = 0; //@line 456
  return;
 }
 if (!(HEAP32[$4 + 20 >> 2] | 0)) {
  $17 = HEAP32[$6 + 124 >> 2] | 0; //@line 464
  $19 = HEAPU8[$4 >> 0] | 0; //@line 466
  $23 = HEAP32[$17 + ($19 * 12 | 0) + 4 >> 2] | 0; //@line 470
  $$038 = ($23 | 0) == 0 ? HEAP32[$17 + ($19 * 12 | 0) >> 2] | 0 : $23; //@line 473
 } else {
  $$038 = $8; //@line 475
 }
 $28 = HEAP32[$6 + 96 >> 2] | 0; //@line 480
 $30 = HEAP32[$6 + 104 >> 2] | 0; //@line 482
 $31 = $2 & 255; //@line 483
 $33 = HEAP8[(HEAP32[$6 + 88 >> 2] | 0) + $31 >> 0] | 0; //@line 485
 $34 = HEAP32[$10 >> 2] | 0; //@line 486
 $37 = HEAP32[(HEAP32[$34 >> 2] | 0) + 72 >> 2] | 0; //@line 489
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 490
 FUNCTION_TABLE_vi[$37 & 1023]($34); //@line 491
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 518; //@line 494
  $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 495
  HEAP32[$38 >> 2] = $10; //@line 496
  $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 497
  HEAP32[$39 >> 2] = $$038; //@line 498
  $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 499
  HEAP8[$40 >> 0] = $2; //@line 500
  $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 501
  HEAP32[$41 >> 2] = $6; //@line 502
  $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 503
  HEAP32[$42 >> 2] = $4; //@line 504
  $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 505
  HEAP8[$43 >> 0] = $33; //@line 506
  $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 507
  HEAP32[$44 >> 2] = $28; //@line 508
  $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 509
  HEAP32[$45 >> 2] = $30; //@line 510
  $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 511
  HEAP32[$46 >> 2] = $31; //@line 512
  sp = STACKTOP; //@line 513
  return;
 }
 ___async_unwind = 0; //@line 516
 HEAP32[$ReallocAsyncCtx4 >> 2] = 518; //@line 517
 $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 518
 HEAP32[$38 >> 2] = $10; //@line 519
 $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 520
 HEAP32[$39 >> 2] = $$038; //@line 521
 $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 522
 HEAP8[$40 >> 0] = $2; //@line 523
 $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 524
 HEAP32[$41 >> 2] = $6; //@line 525
 $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 526
 HEAP32[$42 >> 2] = $4; //@line 527
 $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 528
 HEAP8[$43 >> 0] = $33; //@line 529
 $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 530
 HEAP32[$44 >> 2] = $28; //@line 531
 $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 532
 HEAP32[$45 >> 2] = $30; //@line 533
 $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 534
 HEAP32[$46 >> 2] = $31; //@line 535
 sp = STACKTOP; //@line 536
 return;
}
function _mbed_error_vfprintf__async_cb_245($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4571
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4575
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4577
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4581
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 4582
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $13 = HEAP8[$10 + $12 >> 0] | 0; //@line 4588
 if ((HEAP8[$0 + 16 >> 0] | 0) == 13 | $13 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 4594
  _serial_putc(20400, $13 << 24 >> 24); //@line 4595
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 634; //@line 4598
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 4599
   HEAP32[$22 >> 2] = $12; //@line 4600
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 4601
   HEAP32[$23 >> 2] = $4; //@line 4602
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 4603
   HEAP32[$24 >> 2] = $6; //@line 4604
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 4605
   HEAP8[$25 >> 0] = $13; //@line 4606
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 4607
   HEAP32[$26 >> 2] = $10; //@line 4608
   sp = STACKTOP; //@line 4609
   return;
  }
  ___async_unwind = 0; //@line 4612
  HEAP32[$ReallocAsyncCtx2 >> 2] = 634; //@line 4613
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 4614
  HEAP32[$22 >> 2] = $12; //@line 4615
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 4616
  HEAP32[$23 >> 2] = $4; //@line 4617
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 4618
  HEAP32[$24 >> 2] = $6; //@line 4619
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 4620
  HEAP8[$25 >> 0] = $13; //@line 4621
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 4622
  HEAP32[$26 >> 2] = $10; //@line 4623
  sp = STACKTOP; //@line 4624
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 4627
  _serial_putc(20400, 13); //@line 4628
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 633; //@line 4631
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 4632
   HEAP8[$16 >> 0] = $13; //@line 4633
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 4634
   HEAP32[$17 >> 2] = $12; //@line 4635
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 4636
   HEAP32[$18 >> 2] = $4; //@line 4637
   $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 4638
   HEAP32[$19 >> 2] = $6; //@line 4639
   $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 4640
   HEAP32[$20 >> 2] = $10; //@line 4641
   sp = STACKTOP; //@line 4642
   return;
  }
  ___async_unwind = 0; //@line 4645
  HEAP32[$ReallocAsyncCtx3 >> 2] = 633; //@line 4646
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 4647
  HEAP8[$16 >> 0] = $13; //@line 4648
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 4649
  HEAP32[$17 >> 2] = $12; //@line 4650
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 4651
  HEAP32[$18 >> 2] = $4; //@line 4652
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 4653
  HEAP32[$19 >> 2] = $6; //@line 4654
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 4655
  HEAP32[$20 >> 2] = $10; //@line 4656
  sp = STACKTOP; //@line 4657
  return;
 }
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11188
 STACKTOP = STACKTOP + 48 | 0; //@line 11189
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 11189
 $vararg_buffer3 = sp + 16 | 0; //@line 11190
 $vararg_buffer = sp; //@line 11191
 $3 = sp + 32 | 0; //@line 11192
 $4 = $0 + 28 | 0; //@line 11193
 $5 = HEAP32[$4 >> 2] | 0; //@line 11194
 HEAP32[$3 >> 2] = $5; //@line 11195
 $7 = $0 + 20 | 0; //@line 11197
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 11199
 HEAP32[$3 + 4 >> 2] = $9; //@line 11200
 HEAP32[$3 + 8 >> 2] = $1; //@line 11202
 HEAP32[$3 + 12 >> 2] = $2; //@line 11204
 $12 = $9 + $2 | 0; //@line 11205
 $13 = $0 + 60 | 0; //@line 11206
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 11209
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 11211
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 11213
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 11215
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 11219
  } else {
   $$04756 = 2; //@line 11221
   $$04855 = $12; //@line 11221
   $$04954 = $3; //@line 11221
   $27 = $17; //@line 11221
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 11227
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 11229
    $38 = $27 >>> 0 > $37 >>> 0; //@line 11230
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 11232
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 11234
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 11236
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 11239
    $44 = $$150 + 4 | 0; //@line 11240
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 11243
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 11246
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 11248
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 11250
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 11252
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 11255
     break L1;
    } else {
     $$04756 = $$1; //@line 11258
     $$04954 = $$150; //@line 11258
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 11262
   HEAP32[$4 >> 2] = 0; //@line 11263
   HEAP32[$7 >> 2] = 0; //@line 11264
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 11267
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 11270
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 11275
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 11281
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 11286
  $25 = $20; //@line 11287
  HEAP32[$4 >> 2] = $25; //@line 11288
  HEAP32[$7 >> 2] = $25; //@line 11289
  $$051 = $2; //@line 11290
 }
 STACKTOP = sp; //@line 11292
 return $$051 | 0; //@line 11292
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb_258($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $indvars$iv$reg2mem$0 = 0, label = 0, sp = 0, $indvars$iv$reg2mem$0$looptemp = 0;
 sp = STACKTOP; //@line 5549
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5553
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5555
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5557
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5559
 $indvars$iv$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 5560
 while (1) {
  $indvars$iv$reg2mem$0$looptemp = $indvars$iv$reg2mem$0;
  $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0 + 1 | 0; //@line 5562
  if ($indvars$iv$reg2mem$0 >>> 0 >= $4 >>> 0) {
   $35 = 0; //@line 5565
   label = 11; //@line 5566
   break;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $8, $indvars$iv$reg2mem$0) | 0) {
   $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0; //@line 5572
   continue;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $10, $indvars$iv$reg2mem$0) | 0) {
   break;
  }
 }
 if ((label | 0) == 11) {
  $34 = ___async_retval; //@line 5584
  HEAP32[$34 >> 2] = $35; //@line 5585
  return;
 }
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$6 >> 2] | 0) | 0)) {
  $35 = -1002; //@line 5591
  $34 = ___async_retval; //@line 5592
  HEAP32[$34 >> 2] = $35; //@line 5593
  return;
 }
 if ($indvars$iv$reg2mem$0 >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$6 >> 2] | 0) | 0) & 255) >>> 0) {
  $35 = -1003; //@line 5601
  $34 = ___async_retval; //@line 5602
  HEAP32[$34 >> 2] = $35; //@line 5603
  return;
 }
 $21 = HEAP32[$6 >> 2] | 0; //@line 5606
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 5609
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 5611
 $26 = FUNCTION_TABLE_iii[$24 & 15]($21, $indvars$iv$reg2mem$0 & 255) | 0; //@line 5612
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 486; //@line 5615
  $27 = $ReallocAsyncCtx + 4 | 0; //@line 5616
  HEAP32[$27 >> 2] = $6; //@line 5617
  $28 = $ReallocAsyncCtx + 8 | 0; //@line 5618
  HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 5619
  $29 = $ReallocAsyncCtx + 12 | 0; //@line 5620
  HEAP32[$29 >> 2] = $4; //@line 5621
  $30 = $ReallocAsyncCtx + 16 | 0; //@line 5622
  HEAP32[$30 >> 2] = $8; //@line 5623
  $31 = $ReallocAsyncCtx + 20 | 0; //@line 5624
  HEAP32[$31 >> 2] = $10; //@line 5625
  sp = STACKTOP; //@line 5626
  return;
 }
 HEAP8[___async_retval >> 0] = $26 & 1; //@line 5631
 ___async_unwind = 0; //@line 5632
 HEAP32[$ReallocAsyncCtx >> 2] = 486; //@line 5633
 $27 = $ReallocAsyncCtx + 4 | 0; //@line 5634
 HEAP32[$27 >> 2] = $6; //@line 5635
 $28 = $ReallocAsyncCtx + 8 | 0; //@line 5636
 HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 5637
 $29 = $ReallocAsyncCtx + 12 | 0; //@line 5638
 HEAP32[$29 >> 2] = $4; //@line 5639
 $30 = $ReallocAsyncCtx + 16 | 0; //@line 5640
 HEAP32[$30 >> 2] = $8; //@line 5641
 $31 = $ReallocAsyncCtx + 20 | 0; //@line 5642
 HEAP32[$31 >> 2] = $10; //@line 5643
 sp = STACKTOP; //@line 5644
 return;
}
function __ZN7LoRaMacD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 14632
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14634
 $4 = HEAP32[$2 + 1848 >> 2] | 0; //@line 14636
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 14641
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 14642
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1836 | 0); //@line 14643
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 367; //@line 14646
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 14647
   HEAP32[$9 >> 2] = $2; //@line 14648
   sp = STACKTOP; //@line 14649
   return;
  }
  ___async_unwind = 0; //@line 14652
  HEAP32[$ReallocAsyncCtx2 >> 2] = 367; //@line 14653
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 14654
  HEAP32[$9 >> 2] = $2; //@line 14655
  sp = STACKTOP; //@line 14656
  return;
 }
 $11 = HEAP32[$2 + 1828 >> 2] | 0; //@line 14660
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 14665
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 14666
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 1816 | 0); //@line 14667
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 368; //@line 14670
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 14671
   HEAP32[$16 >> 2] = $2; //@line 14672
   sp = STACKTOP; //@line 14673
   return;
  }
  ___async_unwind = 0; //@line 14676
  HEAP32[$ReallocAsyncCtx3 >> 2] = 368; //@line 14677
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 14678
  HEAP32[$16 >> 2] = $2; //@line 14679
  sp = STACKTOP; //@line 14680
  return;
 }
 $18 = HEAP32[$2 + 1808 >> 2] | 0; //@line 14684
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 14689
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 14690
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 1796 | 0); //@line 14691
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 369; //@line 14694
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 14695
   HEAP32[$23 >> 2] = $2; //@line 14696
   sp = STACKTOP; //@line 14697
   return;
  }
  ___async_unwind = 0; //@line 14700
  HEAP32[$ReallocAsyncCtx4 >> 2] = 369; //@line 14701
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 14702
  HEAP32[$23 >> 2] = $2; //@line 14703
  sp = STACKTOP; //@line 14704
  return;
 }
 $25 = HEAP32[$2 + 748 >> 2] | 0; //@line 14708
 if (!$25) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 14712
  return;
 }
 $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 14717
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 14718
 FUNCTION_TABLE_vi[$29 & 1023]($2 + 736 | 0); //@line 14719
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 370; //@line 14722
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 14723
  HEAP32[$30 >> 2] = $2; //@line 14724
  sp = STACKTOP; //@line 14725
  return;
 }
 ___async_unwind = 0; //@line 14728
 HEAP32[$ReallocAsyncCtx5 >> 2] = 370; //@line 14729
 $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 14730
 HEAP32[$30 >> 2] = $2; //@line 14731
 sp = STACKTOP; //@line 14732
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_160($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $27 = 0, $28 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30597
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30599
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30601
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30603
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30605
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30607
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 30609
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30611
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30613
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30615
 $19 = $2 + 1748 | 0; //@line 30617
 HEAP16[$19 >> 1] = $AsyncRetVal; //@line 30618
 $21 = HEAP16[$4 >> 1] | 0; //@line 30620
 HEAP16[$4 >> 1] = $21 + 1 << 16 >> 16; //@line 30622
 HEAP8[($21 & 65535) + ($2 + 1185) >> 0] = $AsyncRetVal; //@line 30625
 $27 = (HEAPU16[$19 >> 1] | 0) >>> 8 & 255; //@line 30628
 $28 = HEAP16[$4 >> 1] | 0; //@line 30629
 HEAP16[$4 >> 1] = $28 + 1 << 16 >> 16; //@line 30631
 HEAP8[($28 & 65535) + ($2 + 1185) >> 0] = $27; //@line 30634
 $34 = HEAP16[$4 >> 1] & 255; //@line 30637
 $36 = HEAP32[$2 + 1712 >> 2] | 0; //@line 30639
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 30640
 $37 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($2 + 756 | 0, $6, $34, $36, 128, $8) | 0; //@line 30641
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 393; //@line 30644
  $38 = $ReallocAsyncCtx2 + 4 | 0; //@line 30645
  HEAP32[$38 >> 2] = $8; //@line 30646
  $39 = $ReallocAsyncCtx2 + 8 | 0; //@line 30647
  HEAP32[$39 >> 2] = $4; //@line 30648
  $40 = $ReallocAsyncCtx2 + 12 | 0; //@line 30649
  HEAP32[$40 >> 2] = $2; //@line 30650
  $41 = $ReallocAsyncCtx2 + 16 | 0; //@line 30651
  HEAP32[$41 >> 2] = $10; //@line 30652
  $42 = $ReallocAsyncCtx2 + 20 | 0; //@line 30653
  HEAP8[$42 >> 0] = $12; //@line 30654
  $43 = $ReallocAsyncCtx2 + 24 | 0; //@line 30655
  HEAP32[$43 >> 2] = $14; //@line 30656
  $44 = $ReallocAsyncCtx2 + 28 | 0; //@line 30657
  HEAP32[$44 >> 2] = $16; //@line 30658
  sp = STACKTOP; //@line 30659
  return;
 }
 HEAP32[___async_retval >> 2] = $37; //@line 30663
 ___async_unwind = 0; //@line 30664
 HEAP32[$ReallocAsyncCtx2 >> 2] = 393; //@line 30665
 $38 = $ReallocAsyncCtx2 + 4 | 0; //@line 30666
 HEAP32[$38 >> 2] = $8; //@line 30667
 $39 = $ReallocAsyncCtx2 + 8 | 0; //@line 30668
 HEAP32[$39 >> 2] = $4; //@line 30669
 $40 = $ReallocAsyncCtx2 + 12 | 0; //@line 30670
 HEAP32[$40 >> 2] = $2; //@line 30671
 $41 = $ReallocAsyncCtx2 + 16 | 0; //@line 30672
 HEAP32[$41 >> 2] = $10; //@line 30673
 $42 = $ReallocAsyncCtx2 + 20 | 0; //@line 30674
 HEAP8[$42 >> 0] = $12; //@line 30675
 $43 = $ReallocAsyncCtx2 + 24 | 0; //@line 30676
 HEAP32[$43 >> 2] = $14; //@line 30677
 $44 = $ReallocAsyncCtx2 + 28 | 0; //@line 30678
 HEAP32[$44 >> 2] = $16; //@line 30679
 sp = STACKTOP; //@line 30680
 return;
}
function __ZN7LoRaMac18prepare_ongoing_txEhPKhthh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $19 = 0, $20 = 0, $32 = 0, $48 = 0, $53 = 0, $55 = 0, $8 = 0, $AsyncCtx = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, sp = 0;
 sp = STACKTOP; //@line 15662
 STACKTOP = STACKTOP + 32 | 0; //@line 15663
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15663
 $vararg_buffer2 = sp + 8 | 0; //@line 15664
 $vararg_buffer = sp; //@line 15665
 HEAP8[$0 + 2089 >> 0] = $1; //@line 15667
 $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 15669
 $8 = __ZN7LoRaMac24get_max_possible_tx_sizeEh($0, $3 & 255) | 0; //@line 15670
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 451; //@line 15673
  HEAP16[$AsyncCtx + 4 >> 1] = $3; //@line 15675
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 15677
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 15679
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 15681
  HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 15683
  HEAP8[$AsyncCtx + 24 >> 0] = $4; //@line 15685
  HEAP8[$AsyncCtx + 25 >> 0] = $1; //@line 15687
  HEAP8[$AsyncCtx + 26 >> 0] = $5; //@line 15689
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer2; //@line 15691
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer2; //@line 15693
  sp = STACKTOP; //@line 15694
  STACKTOP = sp; //@line 15695
  return 0; //@line 15695
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15697
 $19 = $8 & 255; //@line 15698
 $20 = $3 & 65535; //@line 15699
 if ($20 >>> 0 > $19 >>> 0) {
  HEAP32[$vararg_buffer >> 2] = $20; //@line 15702
  HEAP32[$vararg_buffer + 4 >> 2] = $19; //@line 15704
  _mbed_tracef(8, 13263, 13488, $vararg_buffer); //@line 15705
  HEAP16[$0 + 2356 >> 1] = $20 - $19; //@line 15709
  HEAP16[$0 + 2354 >> 1] = $8 & 255; //@line 15712
  _memcpy($0 + 2099 | 0, $2 | 0, $19 | 0) | 0; //@line 15714
 } else {
  HEAP16[$0 + 2354 >> 1] = $3; //@line 15717
  HEAP16[$0 + 2356 >> 1] = 0; //@line 15719
  if ($3 << 16 >> 16) {
   _memcpy($0 + 2099 | 0, $2 | 0, $20 | 0) | 0; //@line 15723
  }
 }
 $32 = $4 & 255; //@line 15726
 if ($32 & 1 | 0) {
  HEAP32[$0 + 2092 >> 2] = 0; //@line 15731
  HEAP8[$0 + 2096 >> 0] = $1; //@line 15733
  HEAP8[$0 + 2098 >> 0] = 1; //@line 15735
 }
 if ($32 & 2 | 0) {
  HEAP32[$0 + 2092 >> 2] = 1; //@line 15741
  HEAP8[$0 + 2096 >> 0] = $1; //@line 15743
  HEAP8[$0 + 2098 >> 0] = $5; //@line 15745
 }
 if (!($32 & 8)) {
  $55 = HEAP8[$0 + 2096 >> 0] | 0; //@line 15752
 } else {
  HEAP32[$0 + 2092 >> 2] = 3; //@line 15755
  HEAP8[$0 + 2096 >> 0] = $1; //@line 15757
  HEAP8[$0 + 2098 >> 0] = 1; //@line 15759
  $55 = $1; //@line 15760
 }
 $48 = $0 + 2354 | 0; //@line 15762
 $53 = HEAPU16[$0 + 2356 >> 1] | 0; //@line 15767
 HEAP32[$vararg_buffer2 >> 2] = HEAPU16[$48 >> 1]; //@line 15769
 HEAP32[$vararg_buffer2 + 4 >> 2] = $53; //@line 15771
 HEAP32[$vararg_buffer2 + 8 >> 2] = $55 & 255; //@line 15773
 _mbed_tracef(8, 13263, 13543, $vararg_buffer2); //@line 15774
 STACKTOP = sp; //@line 15776
 return HEAP16[$48 >> 1] | 0; //@line 15776
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_229($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $34 = 0, $36 = 0, $4 = 0, $41 = 0, $45 = 0, $48 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3853
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3855
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3857
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3863
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3865
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3867
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3869
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 3873
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 3875
 if ((HEAP8[$0 + 36 >> 0] | 0) == 7) {
  $24 = $2 + 1442 | 0; //@line 3878
  $26 = HEAPU8[HEAP32[$0 + 12 >> 2] >> 0] | 0; //@line 3880
  _memcpy($24 | 0, (HEAP32[$0 + 16 >> 2] | 0) + $26 | 0, $10 | 0) | 0; //@line 3882
  HEAP32[$2 + 2e3 >> 2] = 3; //@line 3884
  HEAP32[$12 >> 2] = 0; //@line 3885
  HEAP32[$14 >> 2] = $24; //@line 3886
  HEAP16[$16 >> 1] = $10 - $26; //@line 3889
 }
 $34 = HEAP8[$2 + 1699 >> 0] | 0; //@line 3894
 $36 = HEAP8[$2 + 1698 >> 0] | 0; //@line 3896
 if (!(HEAP8[$22 >> 0] | 0)) {
  if ((HEAP32[$2 + 2364 >> 2] | 0) != 2) {
   return;
  }
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 3905
  __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1856 | 0); //@line 3906
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 416; //@line 3909
   $41 = $ReallocAsyncCtx10 + 4 | 0; //@line 3910
   HEAP32[$41 >> 2] = $4; //@line 3911
   sp = STACKTOP; //@line 3912
   return;
  }
  ___async_unwind = 0; //@line 3915
  HEAP32[$ReallocAsyncCtx10 >> 2] = 416; //@line 3916
  $41 = $ReallocAsyncCtx10 + 4 | 0; //@line 3917
  HEAP32[$41 >> 2] = $4; //@line 3918
  sp = STACKTOP; //@line 3919
  return;
 }
 if (HEAP8[$20 >> 0] | 0) {
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 3926
  __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1856 | 0); //@line 3927
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 417; //@line 3930
   $45 = $ReallocAsyncCtx9 + 4 | 0; //@line 3931
   HEAP32[$45 >> 2] = $4; //@line 3932
   sp = STACKTOP; //@line 3933
   return;
  }
  ___async_unwind = 0; //@line 3936
  HEAP32[$ReallocAsyncCtx9 >> 2] = 417; //@line 3937
  $45 = $ReallocAsyncCtx9 + 4 | 0; //@line 3938
  HEAP32[$45 >> 2] = $4; //@line 3939
  sp = STACKTOP; //@line 3940
  return;
 }
 if (($34 & 255) <= ($36 & 255)) {
  return;
 }
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 3948
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1856 | 0); //@line 3949
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 418; //@line 3952
  $48 = $ReallocAsyncCtx8 + 4 | 0; //@line 3953
  HEAP32[$48 >> 2] = $4; //@line 3954
  sp = STACKTOP; //@line 3955
  return;
 }
 ___async_unwind = 0; //@line 3958
 HEAP32[$ReallocAsyncCtx8 >> 2] = 418; //@line 3959
 $48 = $ReallocAsyncCtx8 + 4 | 0; //@line 3960
 HEAP32[$48 >> 2] = $4; //@line 3961
 sp = STACKTOP; //@line 3962
 return;
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$013 = 0, $$079$i = 0, $10 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $27 = 0, $32 = 0, $36 = 0, $37 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19677
 if (!(HEAP8[$0 + 16 >> 0] | 0)) {
  $$013 = 0; //@line 19682
  return $$013 | 0; //@line 19683
 }
 $6 = HEAP32[$2 >> 2] | 0; //@line 19685
 if (!$6) {
  $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 19690
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 19691
  $11 = FUNCTION_TABLE_iii[$10 & 15]($0, $1) | 0; //@line 19692
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 509; //@line 19695
   sp = STACKTOP; //@line 19696
   return 0; //@line 19697
  } else {
   _emscripten_free_async_context($AsyncCtx | 0); //@line 19699
   return ($11 ? 3 : 0) | 0; //@line 19701
  }
 }
 $12 = $0 + 76 | 0; //@line 19704
 L10 : do {
  if (!(HEAP8[$12 >> 0] | 0)) {
   $32 = -1; //@line 19709
  } else {
   $$079$i = 0; //@line 19711
   while (1) {
    $17 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 19715
    $AsyncCtx3 = _emscripten_alloc_async_context(32, sp) | 0; //@line 19717
    $19 = FUNCTION_TABLE_iiii[$17 & 31]($0, $6, $$079$i & 255) | 0; //@line 19718
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 19723
    if ($19) {
     $32 = $$079$i; //@line 19725
     break L10;
    }
    $27 = $$079$i + 1 | 0; //@line 19728
    if (($27 | 0) < (HEAPU8[$12 >> 0] | 0)) {
     $$079$i = $27; //@line 19733
    } else {
     $32 = -1; //@line 19735
     break L10;
    }
   }
   HEAP32[$AsyncCtx3 >> 2] = 510; //@line 19739
   HEAP32[$AsyncCtx3 + 4 >> 2] = $$079$i; //@line 19741
   HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 19743
   HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 19745
   HEAP8[$AsyncCtx3 + 16 >> 0] = $1; //@line 19747
   HEAP32[$AsyncCtx3 + 20 >> 2] = $12; //@line 19749
   HEAP32[$AsyncCtx3 + 24 >> 2] = $0; //@line 19751
   HEAP32[$AsyncCtx3 + 28 >> 2] = $6; //@line 19753
   sp = STACKTOP; //@line 19754
   return 0; //@line 19755
  }
 } while (0);
 HEAP8[$2 + 9 >> 0] = $32; //@line 19760
 $36 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 19763
 $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 19764
 $37 = FUNCTION_TABLE_iiii[$36 & 31]($0, $2, $1) | 0; //@line 19765
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 511; //@line 19768
  sp = STACKTOP; //@line 19769
  return 0; //@line 19770
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 19772
 switch ($37 | 0) {
 case -1004:
  {
   $$013 = 2; //@line 19775
   return $$013 | 0; //@line 19776
  }
 case -1005:
  {
   $$013 = 1; //@line 19780
   return $$013 | 0; //@line 19781
  }
 case -1006:
  {
   $$013 = 0; //@line 19785
   return $$013 | 0; //@line 19786
  }
 case 0:
  {
   $$013 = 3; //@line 19790
   return $$013 | 0; //@line 19791
  }
 default:
  {
   $$013 = 0; //@line 19795
   return $$013 | 0; //@line 19796
  }
 }
 return 0; //@line 19799
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $17 = 0, $18 = 0, $21 = 0, $24 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 9729
 STACKTOP = STACKTOP + 32 | 0; //@line 9730
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9730
 $1 = sp + 8 | 0; //@line 9732
 if ((HEAP32[(__ZNK7LoRaMac19get_mlme_indicationEv($0) | 0) >> 2] | 0) != 4) {
  _mbed_tracef(2, 12506, 12742, sp); //@line 9737
  STACKTOP = sp; //@line 9738
  return;
 }
 $5 = $0 + 2496 | 0; //@line 9740
 $6 = HEAP32[$5 >> 2] | 0; //@line 9741
 do {
  if ($6 | 0) {
   $10 = HEAP32[$0 + 3136 >> 2] | 0; //@line 9747
   $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 9749
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9750
   FUNCTION_TABLE_vii[$12 & 15]($1, $0 + 2484 | 0); //@line 9751
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 314; //@line 9754
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 9756
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9758
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 9760
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 9762
    sp = STACKTOP; //@line 9763
    STACKTOP = sp; //@line 9764
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 9766
   $17 = $1 + 12 | 0; //@line 9768
   HEAP32[$17 >> 2] = HEAP32[$5 >> 2]; //@line 9769
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9770
   $18 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($10, $1, 11) | 0; //@line 9771
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 315; //@line 9774
    HEAP32[$AsyncCtx5 + 4 >> 2] = $17; //@line 9776
    HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 9778
    sp = STACKTOP; //@line 9779
    STACKTOP = sp; //@line 9780
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9782
   $21 = HEAP32[$17 >> 2] | 0; //@line 9783
   do {
    if ($21 | 0) {
     $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 9788
     $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9789
     FUNCTION_TABLE_vi[$24 & 1023]($1); //@line 9790
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 316; //@line 9793
      HEAP32[$AsyncCtx2 + 4 >> 2] = $18; //@line 9795
      HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 9797
      sp = STACKTOP; //@line 9798
      STACKTOP = sp; //@line 9799
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9801
      break;
     }
    }
   } while (0);
   if (!$18) {
    $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9808
    _mbed_assert_internal(13121, 12408, 646); //@line 9809
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 317; //@line 9812
     HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 9814
     sp = STACKTOP; //@line 9815
     STACKTOP = sp; //@line 9816
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 9818
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 9824
 return;
}
function __ZN7LoRaMacD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $36 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11762
 $2 = HEAP32[$0 + 1868 >> 2] | 0; //@line 11764
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 11770
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11771
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 1856 | 0); //@line 11772
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 366; //@line 11775
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11777
    sp = STACKTOP; //@line 11778
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11781
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 1848 >> 2] | 0; //@line 11787
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 11793
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11794
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 1836 | 0); //@line 11795
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 367; //@line 11798
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 11800
    sp = STACKTOP; //@line 11801
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11804
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 1828 >> 2] | 0; //@line 11810
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 11816
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11817
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 1816 | 0); //@line 11818
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 368; //@line 11821
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 11823
    sp = STACKTOP; //@line 11824
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11827
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 1808 >> 2] | 0; //@line 11833
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 11839
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11840
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 1796 | 0); //@line 11841
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 369; //@line 11844
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 11846
    sp = STACKTOP; //@line 11847
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11850
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 748 >> 2] | 0; //@line 11856
 if (!$30) {
  $36 = $0 + 4 | 0; //@line 11859
  __ZN12LoRaPHYEU868D2Ev($36); //@line 11860
  return;
 }
 $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 11865
 $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11866
 FUNCTION_TABLE_vi[$34 & 1023]($0 + 736 | 0); //@line 11867
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 370; //@line 11870
  HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 11872
  sp = STACKTOP; //@line 11873
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 11876
 $36 = $0 + 4 | 0; //@line 11877
 __ZN12LoRaPHYEU868D2Ev($36); //@line 11878
 return;
}
function _initialize__async_cb_62($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23234
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23236
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23238
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23240
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23242
 $10 = 7 << 32 + -4; //@line 23244
 $11 = ___muldi3($10 | 0, 0, 1e6, 0) | 0; //@line 23245
 $12 = tempRet0; //@line 23246
 $13 = _i64Add($2 | 0, 0, -1, -1) | 0; //@line 23247
 $15 = _i64Add($13 | 0, tempRet0 | 0, $11 | 0, $12 | 0) | 0; //@line 23249
 $17 = ___udivdi3($15 | 0, tempRet0 | 0, $2 | 0, 0) | 0; //@line 23251
 $18 = tempRet0; //@line 23252
 $19 = HEAP32[$4 >> 2] | 0; //@line 23253
 HEAP32[$19 >> 2] = 0; //@line 23254
 HEAP32[$19 + 4 >> 2] = 0; //@line 23256
 $23 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 23259
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 23260
 $24 = FUNCTION_TABLE_i[$23 & 7]() | 0; //@line 23261
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 601; //@line 23264
  $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 23265
  HEAP32[$25 >> 2] = $4; //@line 23266
  $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 23267
  HEAP32[$26 >> 2] = $2; //@line 23268
  $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 23269
  HEAP32[$27 >> 2] = 32; //@line 23270
  $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 23271
  HEAP32[$28 >> 2] = $10; //@line 23272
  $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 23273
  $30 = $29; //@line 23274
  $31 = $30; //@line 23275
  HEAP32[$31 >> 2] = $17; //@line 23276
  $32 = $30 + 4 | 0; //@line 23277
  $33 = $32; //@line 23278
  HEAP32[$33 >> 2] = $18; //@line 23279
  $34 = $ReallocAsyncCtx3 + 32 | 0; //@line 23280
  HEAP32[$34 >> 2] = $6; //@line 23281
  $35 = $ReallocAsyncCtx3 + 36 | 0; //@line 23282
  HEAP32[$35 >> 2] = $8; //@line 23283
  sp = STACKTOP; //@line 23284
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 23288
 ___async_unwind = 0; //@line 23289
 HEAP32[$ReallocAsyncCtx3 >> 2] = 601; //@line 23290
 $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 23291
 HEAP32[$25 >> 2] = $4; //@line 23292
 $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 23293
 HEAP32[$26 >> 2] = $2; //@line 23294
 $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 23295
 HEAP32[$27 >> 2] = 32; //@line 23296
 $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 23297
 HEAP32[$28 >> 2] = $10; //@line 23298
 $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 23299
 $30 = $29; //@line 23300
 $31 = $30; //@line 23301
 HEAP32[$31 >> 2] = $17; //@line 23302
 $32 = $30 + 4 | 0; //@line 23303
 $33 = $32; //@line 23304
 HEAP32[$33 >> 2] = $18; //@line 23305
 $34 = $ReallocAsyncCtx3 + 32 | 0; //@line 23306
 HEAP32[$34 >> 2] = $6; //@line 23307
 $35 = $ReallocAsyncCtx3 + 36 | 0; //@line 23308
 HEAP32[$35 >> 2] = $8; //@line 23309
 sp = STACKTOP; //@line 23310
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_254($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $30 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5246
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5248
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5250
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5252
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 5254
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 5256
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 5258
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 5260
 $17 = $4 + 1964 | 0; //@line 5263
 HEAP8[$17 >> 0] = HEAP8[$4 + 1182 >> 0] | 0; //@line 5264
 HEAP32[$4 + 1968 >> 2] = HEAP32[$4 + 1912 >> 2]; //@line 5268
 HEAP8[$4 + 1980 >> 0] = HEAP8[$4 + 1921 >> 0] | 0; //@line 5272
 HEAP8[$4 + 1981 >> 0] = HEAP8[$4 + 1173 >> 0] | 0; //@line 5276
 HEAP32[$4 + 1984 >> 2] = 1; //@line 5278
 $30 = $4 + 1982 | 0; //@line 5281
 HEAP8[$30 >> 0] = (HEAP32[$14 >> 2] | 0) == 2 & 1; //@line 5283
 HEAP8[$4 + 2010 >> 0] = HEAP8[$4 + 1965 >> 0] | 0; //@line 5287
 $35 = $4 + 4 | 0; //@line 5288
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(32) | 0; //@line 5289
 $36 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($35, $17) | 0; //@line 5290
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 425; //@line 5293
  $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 5294
  HEAP32[$37 >> 2] = $2; //@line 5295
  $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 5296
  HEAP32[$38 >> 2] = $30; //@line 5297
  $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 5298
  HEAP32[$39 >> 2] = $4; //@line 5299
  $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 5300
  HEAP32[$40 >> 2] = $35; //@line 5301
  $41 = $ReallocAsyncCtx5 + 20 | 0; //@line 5302
  HEAP32[$41 >> 2] = $6; //@line 5303
  $42 = $ReallocAsyncCtx5 + 24 | 0; //@line 5304
  HEAP16[$42 >> 1] = $8; //@line 5305
  $43 = $ReallocAsyncCtx5 + 26 | 0; //@line 5306
  HEAP16[$43 >> 1] = $10; //@line 5307
  $44 = $ReallocAsyncCtx5 + 28 | 0; //@line 5308
  HEAP8[$44 >> 0] = $12; //@line 5309
  sp = STACKTOP; //@line 5310
  return;
 }
 HEAP8[___async_retval >> 0] = $36 & 1; //@line 5315
 ___async_unwind = 0; //@line 5316
 HEAP32[$ReallocAsyncCtx5 >> 2] = 425; //@line 5317
 $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 5318
 HEAP32[$37 >> 2] = $2; //@line 5319
 $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 5320
 HEAP32[$38 >> 2] = $30; //@line 5321
 $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 5322
 HEAP32[$39 >> 2] = $4; //@line 5323
 $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 5324
 HEAP32[$40 >> 2] = $35; //@line 5325
 $41 = $ReallocAsyncCtx5 + 20 | 0; //@line 5326
 HEAP32[$41 >> 2] = $6; //@line 5327
 $42 = $ReallocAsyncCtx5 + 24 | 0; //@line 5328
 HEAP16[$42 >> 1] = $8; //@line 5329
 $43 = $ReallocAsyncCtx5 + 26 | 0; //@line 5330
 HEAP16[$43 >> 1] = $10; //@line 5331
 $44 = $ReallocAsyncCtx5 + 28 | 0; //@line 5332
 HEAP8[$44 >> 0] = $12; //@line 5333
 sp = STACKTOP; //@line 5334
 return;
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb_334($0) {
 $0 = $0 | 0;
 var $16 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $29 = 0, $30 = 0, $31 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13151
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13153
 HEAP32[$2 + 1168 >> 2] = 0; //@line 13155
 $6 = $2 + 1940 | 0; //@line 13158
 HEAP8[$6 >> 0] = HEAP8[$2 + 1182 >> 0] | 0; //@line 13159
 HEAP8[$2 + 1943 >> 0] = HEAP8[$2 + 1909 >> 0] | 0; //@line 13163
 HEAP8[$2 + 1956 >> 0] = HEAP8[$2 + 1921 >> 0] | 0; //@line 13167
 HEAP8[$2 + 1957 >> 0] = HEAP8[$2 + 1173 >> 0] | 0; //@line 13171
 $16 = $2 + 1958 | 0; //@line 13172
 HEAP8[$16 >> 0] = 0; //@line 13173
 HEAP32[$2 + 1960 >> 2] = 0; //@line 13175
 $21 = $2 + 4 | 0; //@line 13179
 if ((HEAP32[$2 + 2364 >> 2] | 0) == 2) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 13181
  __ZN7LoRaPHY20put_radio_to_standbyEv($21); //@line 13182
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 448; //@line 13185
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 13186
   HEAP32[$22 >> 2] = $2; //@line 13187
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 13188
   HEAP32[$23 >> 2] = $21; //@line 13189
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 13190
   HEAP32[$24 >> 2] = $6; //@line 13191
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 13192
   HEAP32[$25 >> 2] = $16; //@line 13193
   sp = STACKTOP; //@line 13194
   return;
  }
  ___async_unwind = 0; //@line 13197
  HEAP32[$ReallocAsyncCtx2 >> 2] = 448; //@line 13198
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 13199
  HEAP32[$22 >> 2] = $2; //@line 13200
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 13201
  HEAP32[$23 >> 2] = $21; //@line 13202
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 13203
  HEAP32[$24 >> 2] = $6; //@line 13204
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 13205
  HEAP32[$25 >> 2] = $16; //@line 13206
  sp = STACKTOP; //@line 13207
  return;
 } else {
  HEAP8[$2 + 2010 >> 0] = HEAP8[$2 + 1941 >> 0] | 0; //@line 13213
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 13214
  __ZN7LoRaPHY9rx_configEP18rx_config_params_t($21, $6) | 0; //@line 13215
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 449; //@line 13218
   $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 13219
   HEAP32[$29 >> 2] = $16; //@line 13220
   $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 13221
   HEAP32[$30 >> 2] = $2; //@line 13222
   $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 13223
   HEAP32[$31 >> 2] = $21; //@line 13224
   sp = STACKTOP; //@line 13225
   return;
  }
  ___async_unwind = 0; //@line 13228
  HEAP32[$ReallocAsyncCtx3 >> 2] = 449; //@line 13229
  $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 13230
  HEAP32[$29 >> 2] = $16; //@line 13231
  $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 13232
  HEAP32[$30 >> 2] = $2; //@line 13233
  $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 13234
  HEAP32[$31 >> 2] = $21; //@line 13235
  sp = STACKTOP; //@line 13236
  return;
 }
}
function __ZN4mbed7Timeout7handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $25 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 2834
 STACKTOP = STACKTOP + 16 | 0; //@line 2835
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2835
 $1 = sp; //@line 2836
 $2 = $0 + 52 | 0; //@line 2837
 $3 = HEAP32[$2 >> 2] | 0; //@line 2838
 do {
  if (!$3) {
   $13 = 0; //@line 2842
  } else {
   $7 = HEAP32[$3 + 4 >> 2] | 0; //@line 2846
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 2847
   FUNCTION_TABLE_vii[$7 & 15]($1, $0 + 40 | 0); //@line 2848
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 116; //@line 2851
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 2853
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 2855
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 2857
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 2859
    sp = STACKTOP; //@line 2860
    STACKTOP = sp; //@line 2861
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2863
    $13 = HEAP32[$2 >> 2] | 0; //@line 2865
    break;
   }
  }
 } while (0);
 $12 = $1 + 12 | 0; //@line 2870
 HEAP32[$12 >> 2] = $13; //@line 2871
 __ZN4mbed6Ticker6detachEv($0); //@line 2872
 $14 = HEAP32[$12 >> 2] | 0; //@line 2873
 do {
  if (!$14) {
   $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2877
   _mbed_assert_internal(15037, 15042, 528); //@line 2878
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 117; //@line 2881
    HEAP32[$AsyncCtx9 + 4 >> 2] = $12; //@line 2883
    HEAP32[$AsyncCtx9 + 8 >> 2] = $1; //@line 2885
    sp = STACKTOP; //@line 2886
    STACKTOP = sp; //@line 2887
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 2889
    $19 = HEAP32[$12 >> 2] | 0; //@line 2891
    break;
   }
  } else {
   $19 = $14; //@line 2895
  }
 } while (0);
 $18 = HEAP32[$19 >> 2] | 0; //@line 2898
 $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2899
 FUNCTION_TABLE_vi[$18 & 1023]($1); //@line 2900
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 118; //@line 2903
  HEAP32[$AsyncCtx2 + 4 >> 2] = $12; //@line 2905
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 2907
  sp = STACKTOP; //@line 2908
  STACKTOP = sp; //@line 2909
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2911
 $22 = HEAP32[$12 >> 2] | 0; //@line 2912
 if (!$22) {
  STACKTOP = sp; //@line 2915
  return;
 }
 $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 2918
 $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2919
 FUNCTION_TABLE_vi[$25 & 1023]($1); //@line 2920
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 119; //@line 2923
  HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 2925
  sp = STACKTOP; //@line 2926
  STACKTOP = sp; //@line 2927
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 2929
 STACKTOP = sp; //@line 2930
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_143($0) {
 $0 = $0 | 0;
 var $$pre$i$i70 = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 29425
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29431
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29433
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29435
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29437
 $$pre$i$i70 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29438
 $13 = $$pre$i$i70; //@line 29439
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i70; //@line 29440
 if (!$$pre$i$i70) {
  __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($8, $10); //@line 29443
  $23 = HEAP32[(HEAP32[$10 >> 2] | 0) + 72 >> 2] | 0; //@line 29446
  $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 29447
  FUNCTION_TABLE_vi[$23 & 1023]($10); //@line 29448
  if (___async) {
   HEAP32[$ReallocAsyncCtx16 >> 2] = 199; //@line 29451
   $24 = $ReallocAsyncCtx16 + 4 | 0; //@line 29452
   HEAP32[$24 >> 2] = $10; //@line 29453
   $25 = $ReallocAsyncCtx16 + 8 | 0; //@line 29454
   HEAP32[$25 >> 2] = $12; //@line 29455
   $26 = $ReallocAsyncCtx16 + 12 | 0; //@line 29456
   HEAP32[$26 >> 2] = $10; //@line 29457
   sp = STACKTOP; //@line 29458
   return;
  }
  ___async_unwind = 0; //@line 29461
  HEAP32[$ReallocAsyncCtx16 >> 2] = 199; //@line 29462
  $24 = $ReallocAsyncCtx16 + 4 | 0; //@line 29463
  HEAP32[$24 >> 2] = $10; //@line 29464
  $25 = $ReallocAsyncCtx16 + 8 | 0; //@line 29465
  HEAP32[$25 >> 2] = $12; //@line 29466
  $26 = $ReallocAsyncCtx16 + 12 | 0; //@line 29467
  HEAP32[$26 >> 2] = $10; //@line 29468
  sp = STACKTOP; //@line 29469
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 29473
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 29474
  FUNCTION_TABLE_vi[$16 & 1023]($6); //@line 29475
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 198; //@line 29478
   $17 = $ReallocAsyncCtx15 + 4 | 0; //@line 29479
   HEAP32[$17 >> 2] = $6; //@line 29480
   $18 = $ReallocAsyncCtx15 + 8 | 0; //@line 29481
   HEAP32[$18 >> 2] = $8; //@line 29482
   $19 = $ReallocAsyncCtx15 + 12 | 0; //@line 29483
   HEAP32[$19 >> 2] = $10; //@line 29484
   $20 = $ReallocAsyncCtx15 + 16 | 0; //@line 29485
   HEAP32[$20 >> 2] = $12; //@line 29486
   sp = STACKTOP; //@line 29487
   return;
  }
  ___async_unwind = 0; //@line 29490
  HEAP32[$ReallocAsyncCtx15 >> 2] = 198; //@line 29491
  $17 = $ReallocAsyncCtx15 + 4 | 0; //@line 29492
  HEAP32[$17 >> 2] = $6; //@line 29493
  $18 = $ReallocAsyncCtx15 + 8 | 0; //@line 29494
  HEAP32[$18 >> 2] = $8; //@line 29495
  $19 = $ReallocAsyncCtx15 + 12 | 0; //@line 29496
  HEAP32[$19 >> 2] = $10; //@line 29497
  $20 = $ReallocAsyncCtx15 + 16 | 0; //@line 29498
  HEAP32[$20 >> 2] = $12; //@line 29499
  sp = STACKTOP; //@line 29500
  return;
 }
}
function __ZN12radio_eventsD2Ev__async_cb_166($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 31939
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31941
 $4 = HEAP32[$2 + 60 >> 2] | 0; //@line 31943
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 31948
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 31949
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 48 | 0); //@line 31950
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 175; //@line 31953
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 31954
   HEAP32[$9 >> 2] = $2; //@line 31955
   sp = STACKTOP; //@line 31956
   return;
  }
  ___async_unwind = 0; //@line 31959
  HEAP32[$ReallocAsyncCtx4 >> 2] = 175; //@line 31960
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 31961
  HEAP32[$9 >> 2] = $2; //@line 31962
  sp = STACKTOP; //@line 31963
  return;
 }
 $11 = HEAP32[$2 + 44 >> 2] | 0; //@line 31967
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 31972
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 31973
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 32 | 0); //@line 31974
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 31977
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 31978
   HEAP32[$16 >> 2] = $2; //@line 31979
   sp = STACKTOP; //@line 31980
   return;
  }
  ___async_unwind = 0; //@line 31983
  HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 31984
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 31985
  HEAP32[$16 >> 2] = $2; //@line 31986
  sp = STACKTOP; //@line 31987
  return;
 }
 $18 = HEAP32[$2 + 28 >> 2] | 0; //@line 31991
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 31996
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 31997
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 16 | 0); //@line 31998
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 32001
   $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 32002
   HEAP32[$23 >> 2] = $2; //@line 32003
   sp = STACKTOP; //@line 32004
   return;
  }
  ___async_unwind = 0; //@line 32007
  HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 32008
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 32009
  HEAP32[$23 >> 2] = $2; //@line 32010
  sp = STACKTOP; //@line 32011
  return;
 }
 $25 = HEAP32[$2 + 12 >> 2] | 0; //@line 32015
 if (!$25) {
  return;
 }
 $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 32021
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 32022
 FUNCTION_TABLE_vi[$28 & 1023]($2); //@line 32023
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 178; //@line 32026
  sp = STACKTOP; //@line 32027
  return;
 }
 ___async_unwind = 0; //@line 32030
 HEAP32[$ReallocAsyncCtx7 >> 2] = 178; //@line 32031
 sp = STACKTOP; //@line 32032
 return;
}
function __ZN12LoRaWANStack9handle_rxEPhtRhRib__async_cb($0) {
 $0 = $0 | 0;
 var $$0$off0 = 0, $$031 = 0, $$1 = 0, $$pre$phi39Z2D = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $40 = 0, $45 = 0, $6 = 0, $8 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10951
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10956
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10958
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 10960
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10962
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10964
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10966
 $18 = HEAP8[$2 + 2837 >> 0] | 0; //@line 10968
 if (HEAP8[$0 + 8 >> 0] & 1) {
  if ($18 << 24 >> 24 != (HEAP8[$6 >> 0] | 0)) {
   $$1 = -1001; //@line 10973
   $45 = ___async_retval; //@line 10974
   HEAP16[$45 >> 1] = $$1; //@line 10975
   return;
  }
  if (!(HEAP32[$8 >> 2] & 1)) {
   $$1 = -1001; //@line 10982
   $45 = ___async_retval; //@line 10983
   HEAP16[$45 >> 1] = $$1; //@line 10984
   return;
  }
 }
 HEAP8[$6 >> 0] = $18; //@line 10988
 HEAP32[$8 >> 2] = 1; //@line 10989
 $24 = $2 + 2840 | 0; //@line 10990
 $25 = HEAP32[$24 >> 2] | 0; //@line 10991
 $26 = $2 + 2844 | 0; //@line 10992
 $27 = HEAP16[$26 >> 1] | 0; //@line 10993
 $28 = $27 & 65535; //@line 10994
 $30 = $2 + 2866 | 0; //@line 10996
 $32 = (HEAP16[$30 >> 1] | 0) == 0; //@line 10998
 if (($27 & 65535) > ($10 & 65535)) {
  if ($32) {
   $35 = $2 + 2864 | 0; //@line 11003
   HEAP16[$35 >> 1] = $28 - $16; //@line 11004
   HEAP16[$30 >> 1] = $10; //@line 11005
   _memcpy($12 | 0, $25 | 0, $16 | 0) | 0; //@line 11006
   $$0$off0 = 0; //@line 11007
   $$031 = $10; //@line 11007
   $$pre$phi39Z2D = $35; //@line 11007
  } else {
   label = 10; //@line 11009
  }
 } else {
  if ($32) {
   $36 = $2 + 2864 | 0; //@line 11013
   HEAP16[$36 >> 1] = 0; //@line 11014
   HEAP16[$30 >> 1] = 0; //@line 11015
   _memcpy($12 | 0, $25 | 0, $28 | 0) | 0; //@line 11016
   $$0$off0 = 1; //@line 11017
   $$031 = $27; //@line 11017
   $$pre$phi39Z2D = $36; //@line 11017
  } else {
   label = 10; //@line 11019
  }
 }
 if ((label | 0) == 10) {
  $$0$off0 = 0; //@line 11024
  $$031 = $27; //@line 11024
  $$pre$phi39Z2D = $2 + 2864 | 0; //@line 11024
 }
 if (HEAP16[$$pre$phi39Z2D >> 1] | 0) {
  $40 = HEAP16[$2 + 2866 >> 1] | 0; //@line 11030
  if ($40 << 16 >> 16) {
   _memcpy($12 | 0, $25 + ($40 & 65535) | 0, $$031 & 65535 | 0) | 0; //@line 11036
  }
 }
 if (!$$0$off0) {
  $$1 = $$031; //@line 11040
  $45 = ___async_retval; //@line 11041
  HEAP16[$45 >> 1] = $$1; //@line 11042
  return;
 }
 HEAP32[$24 >> 2] = 0; //@line 11045
 HEAP16[$26 >> 1] = 0; //@line 11046
 HEAP8[$14 >> 0] = 0; //@line 11047
 $$1 = $$031; //@line 11048
 $45 = ___async_retval; //@line 11049
 HEAP16[$45 >> 1] = $$1; //@line 11050
 return;
}
function __ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2_($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$$sroa_idx14 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 19618
 STACKTOP = STACKTOP + 16 | 0; //@line 19619
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19619
 $7 = sp; //@line 19620
 $8 = $0 + 64 | 0; //@line 19621
 _mbedtls_aes_init($8); //@line 19622
 $9 = _mbedtls_aes_setkey_enc($8, $1, $2) | 0; //@line 19623
 if ($9 | 0) {
  $$0 = $9; //@line 19626
  _mbedtls_aes_free($8); //@line 19627
  STACKTOP = sp; //@line 19628
  return $$0 | 0; //@line 19628
 }
 $11 = $7 + 9 | 0; //@line 19630
 HEAP8[$11 >> 0] = 0; //@line 19631
 HEAP8[$11 + 1 >> 0] = 0; //@line 19631
 HEAP8[$11 + 2 >> 0] = 0; //@line 19631
 HEAP8[$11 + 3 >> 0] = 0; //@line 19631
 HEAP8[$11 + 4 >> 0] = 0; //@line 19631
 HEAP8[$11 + 5 >> 0] = 0; //@line 19631
 HEAP8[$11 + 6 >> 0] = 0; //@line 19631
 HEAP8[$7 >> 0] = 1; //@line 19632
 $12 = $7 + 1 | 0; //@line 19633
 HEAP8[$12 >> 0] = HEAP8[$3 >> 0] | 0; //@line 19634
 HEAP8[$12 + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0; //@line 19634
 HEAP8[$12 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0; //@line 19634
 HEAP8[$12 + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0; //@line 19634
 HEAP8[$12 + 4 >> 0] = HEAP8[$3 + 4 >> 0] | 0; //@line 19634
 HEAP8[$12 + 5 >> 0] = HEAP8[$3 + 5 >> 0] | 0; //@line 19634
 $$0$$sroa_idx14 = $7 + 7 | 0; //@line 19635
 HEAP8[$$0$$sroa_idx14 >> 0] = $4; //@line 19636
 HEAP8[$$0$$sroa_idx14 + 1 >> 0] = $4 >> 8; //@line 19636
 $13 = _mbedtls_aes_crypt_ecb($8, 1, $7, $5) | 0; //@line 19637
 if ($13 | 0) {
  $$0 = $13; //@line 19640
  _mbedtls_aes_free($8); //@line 19641
  STACKTOP = sp; //@line 19642
  return $$0 | 0; //@line 19642
 }
 $15 = $7 + 9 | 0; //@line 19644
 HEAP8[$15 >> 0] = 0; //@line 19645
 HEAP8[$15 + 1 >> 0] = 0; //@line 19645
 HEAP8[$15 + 2 >> 0] = 0; //@line 19645
 HEAP8[$15 + 3 >> 0] = 0; //@line 19645
 HEAP8[$15 + 4 >> 0] = 0; //@line 19645
 HEAP8[$15 + 5 >> 0] = 0; //@line 19645
 HEAP8[$15 + 6 >> 0] = 0; //@line 19645
 HEAP8[$7 >> 0] = 2; //@line 19646
 HEAP8[$12 >> 0] = HEAP8[$3 >> 0] | 0; //@line 19647
 HEAP8[$12 + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0; //@line 19647
 HEAP8[$12 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0; //@line 19647
 HEAP8[$12 + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0; //@line 19647
 HEAP8[$12 + 4 >> 0] = HEAP8[$3 + 4 >> 0] | 0; //@line 19647
 HEAP8[$12 + 5 >> 0] = HEAP8[$3 + 5 >> 0] | 0; //@line 19647
 HEAP8[$$0$$sroa_idx14 >> 0] = $4; //@line 19648
 HEAP8[$$0$$sroa_idx14 + 1 >> 0] = $4 >> 8; //@line 19648
 $$0 = _mbedtls_aes_crypt_ecb($8, 1, $7, $6) | 0; //@line 19650
 _mbedtls_aes_free($8); //@line 19651
 STACKTOP = sp; //@line 19652
 return $$0 | 0; //@line 19652
}
function __ZN7LoRaMac21handle_retransmissionEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$i = 0, $1 = 0, $2 = 0, $21 = 0, $28 = 0, $31 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 12537
 STACKTOP = STACKTOP + 16 | 0; //@line 12538
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12538
 $vararg_buffer = sp; //@line 12539
 $1 = sp + 5 | 0; //@line 12540
 $2 = sp + 4 | 0; //@line 12541
 if (!(HEAP8[$0 + 2360 >> 0] | 0)) {
  if (!(HEAP32[$0 + 2072 >> 2] | 0)) {
   HEAP8[$0 + 1877 >> 0] = __ZN7LoRaPHY16get_alternate_DREh($0 + 4 | 0, (HEAPU8[$0 + 1701 >> 0] | 0) + 1 & 255) | 0; //@line 12558
   HEAP8[$1 >> 0] = 0; //@line 12559
   HEAP8[$2 >> 0] = HEAP8[$0 + 1936 >> 0] << 7; //@line 12563
   HEAP8[$0 + 1180 >> 0] = 1; //@line 12565
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 12566
   $21 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $1, $2, 0, 0, 0) | 0; //@line 12567
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 389; //@line 12570
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12572
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 12574
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 12576
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 12578
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 12580
    sp = STACKTOP; //@line 12581
    STACKTOP = sp; //@line 12582
    return 0; //@line 12582
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 12584
   do {
    if (!$21) {
     $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12588
     $28 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 12589
     if (___async) {
      HEAP32[$AsyncCtx7 >> 2] = 390; //@line 12592
      HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 12594
      HEAP32[$AsyncCtx7 + 8 >> 2] = $1; //@line 12596
      sp = STACKTOP; //@line 12597
      STACKTOP = sp; //@line 12598
      return 0; //@line 12598
     } else {
      _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12600
      $$0$i = $28; //@line 12601
      break;
     }
    } else {
     HEAP32[$vararg_buffer >> 2] = $21; //@line 12605
     _mbed_tracef(2, 13263, 13268, $vararg_buffer); //@line 12606
     $$0$i = $21; //@line 12607
    }
   } while (0);
   $$0 = $$0$i; //@line 12610
   STACKTOP = sp; //@line 12611
   return $$0 | 0; //@line 12611
  }
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 12614
 $31 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 12615
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 391; //@line 12618
  sp = STACKTOP; //@line 12619
  STACKTOP = sp; //@line 12620
  return 0; //@line 12620
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12622
 $$0 = $31; //@line 12623
 STACKTOP = sp; //@line 12624
 return $$0 | 0; //@line 12624
}
function _mbedtls_cipher_update__async_cb_191($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $37 = 0, $4 = 0, $46 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 852
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 854
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 856
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 858
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 860
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 862
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 864
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 866
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 868
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 870
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 872
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 874
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 877
  $55 = ___async_retval; //@line 878
  HEAP32[$55 >> 2] = $$1; //@line 879
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 884
 $25 = $6 + $4 | 0; //@line 885
 HEAP32[$8 >> 2] = 0; //@line 886
 $26 = $10 + $12 | 0; //@line 887
 $27 = $14 - $12 | 0; //@line 888
 if (!$27) {
  $$1 = 0; //@line 891
  $55 = ___async_retval; //@line 892
  HEAP32[$55 >> 2] = $$1; //@line 893
  return;
 }
 $29 = ($27 >>> 0) % ($4 >>> 0) | 0; //@line 896
 if (!$29) {
  if (!(HEAP32[$16 >> 2] | 0)) {
   $$0 = (HEAP32[$18 + 12 >> 2] | 0) == 0 ? 0 : $4; //@line 906
  } else {
   $$0 = 0; //@line 908
  }
 } else {
  $$0 = $29; //@line 911
 }
 $37 = $27 - $$0 | 0; //@line 914
 _memcpy($18 + 20 | 0, $26 + $37 | 0, $$0 | 0) | 0; //@line 916
 HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + $$0; //@line 919
 if (!$37) {
  $$1 = 0; //@line 922
  $55 = ___async_retval; //@line 923
  HEAP32[$55 >> 2] = $$1; //@line 924
  return;
 }
 $46 = HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 931
 $48 = HEAP32[$18 + 60 >> 2] | 0; //@line 933
 $49 = HEAP32[$16 >> 2] | 0; //@line 934
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 936
 $51 = FUNCTION_TABLE_iiiiiii[$46 & 3]($48, $49, $37, $18 + 40 | 0, $26, $25) | 0; //@line 937
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 578; //@line 940
  $52 = $ReallocAsyncCtx3 + 4 | 0; //@line 941
  HEAP32[$52 >> 2] = $2; //@line 942
  $53 = $ReallocAsyncCtx3 + 8 | 0; //@line 943
  HEAP32[$53 >> 2] = $37; //@line 944
  sp = STACKTOP; //@line 945
  return;
 }
 HEAP32[___async_retval >> 2] = $51; //@line 949
 ___async_unwind = 0; //@line 950
 HEAP32[$ReallocAsyncCtx3 >> 2] = 578; //@line 951
 $52 = $ReallocAsyncCtx3 + 4 | 0; //@line 952
 HEAP32[$52 >> 2] = $2; //@line 953
 $53 = $ReallocAsyncCtx3 + 8 | 0; //@line 954
 HEAP32[$53 >> 2] = $37; //@line 955
 sp = STACKTOP; //@line 956
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$026 = 0, $10 = 0, $15 = 0, $21 = 0.0, $24 = 0.0, $27 = 0, $34 = 0, $35 = 0, $38 = 0, $43 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21757
 $6 = HEAP32[$0 + 124 >> 2] | 0; //@line 21761
 $7 = $1 + 2 | 0; //@line 21762
 $8 = HEAP8[$7 >> 0] | 0; //@line 21763
 $10 = HEAPU8[$1 >> 0] | 0; //@line 21765
 $15 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$6 + ($10 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 21770
 if ($8 << 24 >> 24 > $15 << 24 >> 24) {
  HEAP8[$7 >> 0] = $15; //@line 21773
  $27 = $15; //@line 21774
 } else {
  $27 = $8; //@line 21776
 }
 if (!$2) {
  $$0 = HEAP32[$6 + ($10 * 12 | 0) >> 2] | 0; //@line 21782
 } else {
  $$0 = $2; //@line 21784
 }
 $21 = +HEAPF32[$1 + 4 >> 2]; //@line 21787
 if ($21 > 0.0) {
  $24 = +HEAPF32[$1 + 8 >> 2]; //@line 21791
  if ($24 > 0.0) {
   $$026 = ~~+Math_floor(+($21 - +($27 << 24 >> 24 << 1 >>> 0) - $24)); //@line 21801
  } else {
   $$026 = $27; //@line 21803
  }
 } else {
  $$026 = $27; //@line 21806
 }
 $34 = $0 + 4 | 0; //@line 21808
 $35 = HEAP32[$34 >> 2] | 0; //@line 21809
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 72 >> 2] | 0; //@line 21812
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 21813
 FUNCTION_TABLE_vi[$38 & 1023]($35); //@line 21814
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 535; //@line 21817
  HEAP32[$AsyncCtx + 4 >> 2] = $34; //@line 21819
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 21821
  HEAP32[$AsyncCtx + 12 >> 2] = $$0; //@line 21823
  HEAP8[$AsyncCtx + 16 >> 0] = $$026; //@line 21825
  sp = STACKTOP; //@line 21826
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21829
 $43 = HEAP32[$34 >> 2] | 0; //@line 21830
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 68 >> 2] | 0; //@line 21833
 $48 = HEAP16[$1 + 12 >> 1] | 0; //@line 21835
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21836
 FUNCTION_TABLE_viiii[$46 & 7]($43, $$0, $$026, $48); //@line 21837
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 536; //@line 21840
  HEAP32[$AsyncCtx2 + 4 >> 2] = $34; //@line 21842
  sp = STACKTOP; //@line 21843
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21846
 $50 = HEAP32[$34 >> 2] | 0; //@line 21847
 $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 76 >> 2] | 0; //@line 21850
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21851
 FUNCTION_TABLE_vi[$53 & 1023]($50); //@line 21852
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 537; //@line 21855
  sp = STACKTOP; //@line 21856
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 21859
  return;
 }
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb_56($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22510
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22514
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22516
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22518
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22520
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22521
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 22525
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 22526
  FUNCTION_TABLE_vi[$13 & 1023]($4); //@line 22527
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 329; //@line 22530
   $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 22531
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 22532
   $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 22533
   HEAP32[$15 >> 2] = $4; //@line 22534
   $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 22535
   HEAP32[$16 >> 2] = $6; //@line 22536
   $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 22537
   HEAP32[$17 >> 2] = $8; //@line 22538
   sp = STACKTOP; //@line 22539
   return;
  }
  ___async_unwind = 0; //@line 22542
  HEAP32[$ReallocAsyncCtx2 >> 2] = 329; //@line 22543
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 22544
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 22545
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 22546
  HEAP32[$15 >> 2] = $4; //@line 22547
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 22548
  HEAP32[$16 >> 2] = $6; //@line 22549
  $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 22550
  HEAP32[$17 >> 2] = $8; //@line 22551
  sp = STACKTOP; //@line 22552
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 4; //@line 22559
  HEAP32[$8 + 2480 >> 2] = 2; //@line 22561
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 22564
 _mbed_assert_internal(13121, 12408, 646); //@line 22565
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 330; //@line 22568
  $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 22569
  HEAP32[$19 >> 2] = $4; //@line 22570
  $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 22571
  HEAP32[$20 >> 2] = $6; //@line 22572
  $21 = $ReallocAsyncCtx4 + 12 | 0; //@line 22573
  HEAP32[$21 >> 2] = $8; //@line 22574
  sp = STACKTOP; //@line 22575
  return;
 }
 ___async_unwind = 0; //@line 22578
 HEAP32[$ReallocAsyncCtx4 >> 2] = 330; //@line 22579
 $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 22580
 HEAP32[$19 >> 2] = $4; //@line 22581
 $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 22582
 HEAP32[$20 >> 2] = $6; //@line 22583
 $21 = $ReallocAsyncCtx4 + 12 | 0; //@line 22584
 HEAP32[$21 >> 2] = $8; //@line 22585
 sp = STACKTOP; //@line 22586
 return;
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$1$i$i = 0, $$1$lcssa$i$i = 0, $$18$i$i = 0, $$19$i$i = 0, $11 = 0, $14 = 0, $22 = 0, $28 = 0, $34 = 0, $35 = 0, $36 = 0, $44 = 0, $45 = 0, $47 = 0, $60 = 0, $63 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22859
 $7 = HEAPU8[$0 + 24 >> 0] | 0; //@line 22862
 $8 = $0 + 25 | 0; //@line 22863
 $11 = (HEAPU8[$8 >> 0] | 0) + $7 | 0; //@line 22866
 $14 = $0 + 26 | 0; //@line 22869
 if ((HEAP8[$2 >> 0] | 0) == (HEAPU8[$14 >> 0] | 0)) {
  HEAP32[$4 >> 2] = 0; //@line 22874
  $$0 = 0; //@line 22875
  return $$0 | 0; //@line 22876
 }
 if ((HEAP32[$4 >> 2] | 0) >>> 0 < $7 >>> 0) {
  $$0 = 0; //@line 22881
  return $$0 | 0; //@line 22882
 }
 HEAP8[$3 >> 0] = HEAP8[$0 + 22 >> 0] | 0; //@line 22886
 $22 = HEAP32[$4 >> 2] | 0; //@line 22887
 if ($22 >>> 0 < $11 >>> 0) {
  $$0 = 1; //@line 22890
  return $$0 | 0; //@line 22891
 }
 if ((($22 >>> 0) % ((HEAPU8[$8 >> 0] | 0) >>> 0) | 0 | 0) != 1) {
  $$0 = 1; //@line 22898
  return $$0 | 0; //@line 22899
 }
 $28 = HEAP8[$2 >> 0] | 0; //@line 22901
 $34 = $0 + 88 | 0; //@line 22909
 $35 = $28 & 255; //@line 22910
 $36 = HEAP8[((HEAP8[$0 + 128 >> 0] & 1) == 0 ? $14 : $0 + 35 | 0) >> 0] | 0; //@line 22911
 $$18$i$i = ($35 | 0) == ($36 | 0) ? $28 : $35 + 255 & 255; //@line 22915
 L14 : do {
  if (($$18$i$i & 255 | 0) == ($36 | 0)) {
   $$1$lcssa$i$i = $$18$i$i; //@line 22920
  } else {
   $44 = HEAPU8[$0 + 92 >> 0] | 0; //@line 22924
   $$19$i$i = $$18$i$i; //@line 22925
   while (1) {
    $45 = $$19$i$i << 24 >> 24; //@line 22927
    if (($45 | 0) < ($44 | 0)) {
     if (HEAP8[(HEAP32[$34 >> 2] | 0) + $45 >> 0] | 0) {
      $$1$lcssa$i$i = $$19$i$i; //@line 22935
      break L14;
     }
    }
    $47 = $$19$i$i & 255; //@line 22939
    $$1$i$i = ($47 | 0) == ($36 | 0) ? $$19$i$i : $47 + 255 & 255; //@line 22943
    if (($$1$i$i & 255 | 0) == ($36 | 0)) {
     $$1$lcssa$i$i = $$1$i$i; //@line 22947
     break;
    } else {
     $$19$i$i = $$1$i$i; //@line 22950
    }
   }
  }
 } while (0);
 HEAP8[$2 >> 0] = $$1$lcssa$i$i; //@line 22955
 $60 = ($$1$lcssa$i$i << 24 >> 24 | 0) != (HEAPU8[$14 >> 0] | 0); //@line 22959
 if ($60 | $1 ^ 1) {
  $$0 = $60; //@line 22963
  return $$0 | 0; //@line 22964
 }
 $63 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 22968
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 22969
 FUNCTION_TABLE_vi[$63 & 1023]($0); //@line 22970
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 557; //@line 22973
  sp = STACKTOP; //@line 22974
  return 0; //@line 22975
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22977
 $$0 = 0; //@line 22978
 return $$0 | 0; //@line 22979
}
function _mbed_error_vfprintf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01213 = 0, $$014 = 0, $2 = 0, $24 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$01213$looptemp = 0;
 sp = STACKTOP; //@line 6617
 STACKTOP = STACKTOP + 128 | 0; //@line 6618
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 6618
 $2 = sp; //@line 6619
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6620
 $3 = _vsnprintf($2, 128, $0, $1) | 0; //@line 6621
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 632; //@line 6624
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 6626
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6628
  sp = STACKTOP; //@line 6629
  STACKTOP = sp; //@line 6630
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6632
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 6635
  return;
 }
 if (!(HEAP32[5099] | 0)) {
  _serial_init(20400, 2, 3); //@line 6640
  $$01213 = 0; //@line 6641
  $$014 = 0; //@line 6641
 } else {
  $$01213 = 0; //@line 6643
  $$014 = 0; //@line 6643
 }
 while (1) {
  $$01213$looptemp = $$01213;
  $$01213 = HEAP8[$2 + $$014 >> 0] | 0; //@line 6647
  if (!($$01213$looptemp << 24 >> 24 == 13 | $$01213 << 24 >> 24 != 10)) {
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6652
   _serial_putc(20400, 13); //@line 6653
   if (___async) {
    label = 8; //@line 6656
    break;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6659
  }
  $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6662
  _serial_putc(20400, $$01213 << 24 >> 24); //@line 6663
  if (___async) {
   label = 11; //@line 6666
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6669
  $24 = $$014 + 1 | 0; //@line 6670
  if (($24 | 0) == ($3 | 0)) {
   label = 13; //@line 6673
   break;
  } else {
   $$014 = $24; //@line 6676
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx7 >> 2] = 633; //@line 6680
  HEAP8[$AsyncCtx7 + 4 >> 0] = $$01213; //@line 6682
  HEAP32[$AsyncCtx7 + 8 >> 2] = $$014; //@line 6684
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 6686
  HEAP32[$AsyncCtx7 + 16 >> 2] = $2; //@line 6688
  HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 6690
  sp = STACKTOP; //@line 6691
  STACKTOP = sp; //@line 6692
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$AsyncCtx3 >> 2] = 634; //@line 6695
  HEAP32[$AsyncCtx3 + 4 >> 2] = $$014; //@line 6697
  HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 6699
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 6701
  HEAP8[$AsyncCtx3 + 16 >> 0] = $$01213; //@line 6703
  HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 6705
  sp = STACKTOP; //@line 6706
  STACKTOP = sp; //@line 6707
  return;
 } else if ((label | 0) == 13) {
  STACKTOP = sp; //@line 6710
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_411($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30904
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30908
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30910
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 30912
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30914
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 30916
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30918
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30920
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30922
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30924
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 30927
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30929
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 30933
   $27 = $6 + 24 | 0; //@line 30934
   $28 = $4 + 8 | 0; //@line 30935
   $29 = $6 + 54 | 0; //@line 30936
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 30966
    HEAP8[$14 >> 0] = 0; //@line 30967
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 30968
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 30969
    if (!___async) {
     ___async_unwind = 0; //@line 30972
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 714; //@line 30974
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 30976
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 30978
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 30980
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 30982
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 30984
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 30986
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 30988
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 30990
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 30992
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 30994
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 30996
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 30998
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 31000
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 31003
    sp = STACKTOP; //@line 31004
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 31009
 HEAP8[$14 >> 0] = $12; //@line 31010
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30788
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30792
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30794
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 30796
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30798
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 30800
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30802
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30804
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30806
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30808
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30810
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30812
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 30814
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 30817
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 30818
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 30851
    HEAP8[$14 >> 0] = 0; //@line 30852
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 30853
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 30854
    if (!___async) {
     ___async_unwind = 0; //@line 30857
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 714; //@line 30859
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 30861
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 30863
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 30865
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 30867
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 30869
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 30871
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 30873
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 30875
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 30877
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 30879
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 30881
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 30883
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 30885
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 30888
    sp = STACKTOP; //@line 30889
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 30894
 HEAP8[$14 >> 0] = $12; //@line 30895
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 32844
 }
 ret = dest | 0; //@line 32847
 dest_end = dest + num | 0; //@line 32848
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 32852
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 32853
   dest = dest + 1 | 0; //@line 32854
   src = src + 1 | 0; //@line 32855
   num = num - 1 | 0; //@line 32856
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 32858
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 32859
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 32861
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 32862
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 32863
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 32864
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 32865
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 32866
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 32867
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 32868
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 32869
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 32870
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 32871
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 32872
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 32873
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 32874
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 32875
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 32876
   dest = dest + 64 | 0; //@line 32877
   src = src + 64 | 0; //@line 32878
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 32881
   dest = dest + 4 | 0; //@line 32882
   src = src + 4 | 0; //@line 32883
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 32887
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 32889
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 32890
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 32891
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 32892
   dest = dest + 4 | 0; //@line 32893
   src = src + 4 | 0; //@line 32894
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 32899
  dest = dest + 1 | 0; //@line 32900
  src = src + 1 | 0; //@line 32901
 }
 return ret | 0; //@line 32903
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $18 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, sp = 0;
 sp = STACKTOP; //@line 1180
 STACKTOP = STACKTOP + 32 | 0; //@line 1181
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1181
 $vararg_buffer6 = sp + 24 | 0; //@line 1182
 $vararg_buffer3 = sp + 16 | 0; //@line 1183
 $vararg_buffer = sp; //@line 1184
 $5 = $3 & 65535; //@line 1186
 HEAP32[$vararg_buffer >> 2] = $1; //@line 1187
 HEAP32[$vararg_buffer + 4 >> 2] = $2 << 24 >> 24; //@line 1189
 HEAP32[$vararg_buffer + 8 >> 2] = $5; //@line 1191
 _mbed_tracef(16, 11020, 11025, $vararg_buffer); //@line 1192
 $8 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 1195
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 1196
 FUNCTION_TABLE_vii[$8 & 15]($0, $1); //@line 1197
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 67; //@line 1200
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1202
  HEAP8[$AsyncCtx + 8 >> 0] = $2; //@line 1204
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 1206
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 1208
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer3; //@line 1210
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer6; //@line 1212
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer6; //@line 1214
  sp = STACKTOP; //@line 1215
  STACKTOP = sp; //@line 1216
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1218
 $18 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 1221
 $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 1222
 FUNCTION_TABLE_viiiiiiiiiiiiii[$18 & 1]($0, 0, $2, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $5); //@line 1223
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 68; //@line 1226
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 1228
  HEAP32[$AsyncCtx10 + 8 >> 2] = $vararg_buffer3; //@line 1230
  HEAP32[$AsyncCtx10 + 12 >> 2] = $vararg_buffer3; //@line 1232
  HEAP32[$AsyncCtx10 + 16 >> 2] = $vararg_buffer6; //@line 1234
  HEAP32[$AsyncCtx10 + 20 >> 2] = $vararg_buffer6; //@line 1236
  sp = STACKTOP; //@line 1237
  STACKTOP = sp; //@line 1238
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx10 | 0); //@line 1240
  HEAP8[$0 + 688 >> 0] = 2; //@line 1242
  HEAP32[$vararg_buffer3 >> 2] = 3; //@line 1243
  _mbed_tracef(16, 11020, 11077, $vararg_buffer3); //@line 1244
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1245
  HEAP32[$vararg_buffer6 >> 2] = 3; //@line 1246
  _mbed_tracef(16, 11020, 11106, $vararg_buffer6); //@line 1247
  STACKTOP = sp; //@line 1248
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_177($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32604
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32608
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32610
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32612
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 32614
 $12 = HEAP16[$0 + 22 >> 1] | 0; //@line 32616
 $14 = HEAP8[$0 + 24 >> 0] | 0; //@line 32618
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 32620
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 32622
 $19 = $6 + 12 | 0; //@line 32624
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 32625
 $20 = $6 + 16 | 0; //@line 32626
 HEAP32[$20 >> 2] = $8; //@line 32627
 HEAP16[$6 + 20 >> 1] = $10; //@line 32629
 HEAP16[$6 + 22 >> 1] = $12; //@line 32631
 HEAP8[$6 + 24 >> 0] = $14; //@line 32633
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 32634
 $24 = _equeue_alloc($16, 28) | 0; //@line 32635
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 298; //@line 32638
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 32639
  HEAP32[$25 >> 2] = $19; //@line 32640
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 32641
  HEAP32[$26 >> 2] = $19; //@line 32642
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 32643
  HEAP32[$27 >> 2] = $6; //@line 32644
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 32645
  HEAP32[$28 >> 2] = $20; //@line 32646
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 32647
  HEAP32[$29 >> 2] = $16; //@line 32648
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 32649
  HEAP32[$30 >> 2] = $4; //@line 32650
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 32651
  HEAP32[$31 >> 2] = $18; //@line 32652
  sp = STACKTOP; //@line 32653
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 32657
 ___async_unwind = 0; //@line 32658
 HEAP32[$ReallocAsyncCtx7 >> 2] = 298; //@line 32659
 $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 32660
 HEAP32[$25 >> 2] = $19; //@line 32661
 $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 32662
 HEAP32[$26 >> 2] = $19; //@line 32663
 $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 32664
 HEAP32[$27 >> 2] = $6; //@line 32665
 $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 32666
 HEAP32[$28 >> 2] = $20; //@line 32667
 $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 32668
 HEAP32[$29 >> 2] = $16; //@line 32669
 $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 32670
 HEAP32[$30 >> 2] = $4; //@line 32671
 $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 32672
 HEAP32[$31 >> 2] = $18; //@line 32673
 sp = STACKTOP; //@line 32674
 return;
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $106 = 0, $107 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $85 = 0, $95 = 0, $99 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1065
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1067
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1069
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1071
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1073
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1075
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1077
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1079
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1081
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$2 + 2076 >> 2] = 13; //@line 1087
  return;
 }
 if (((HEAPU8[$6 + -3 + ($2 + 1442) >> 0] | 0) << 8 | (HEAPU8[$2 + 1442 + $4 >> 0] | 0) | (HEAPU8[$6 + -2 + ($2 + 1442) >> 0] | 0) << 16 | (HEAPU8[$6 + -1 + ($2 + 1442) >> 0] | 0) << 24 | 0) != (HEAP32[$8 >> 2] | 0)) {
  HEAP32[$2 + 2076 >> 2] = 7; //@line 1115
  return;
 }
 if (__ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2_($14, HEAP32[$12 >> 2] | 0, 128, $16, HEAP16[$2 + 1748 >> 1] | 0, $2 + 1716 | 0, $2 + 1732 | 0) | 0) {
  HEAP32[$2 + 2076 >> 2] = 13; //@line 1127
  return;
 }
 HEAP32[$2 + 1752 >> 2] = (HEAPU8[$2 + 1448 >> 0] | 0) << 16 | ((HEAPU8[$2 + 1447 >> 0] | 0) << 8 | (HEAPU8[$2 + 1446 >> 0] | 0)); //@line 1144
 HEAP32[$2 + 1756 >> 2] = (HEAPU8[$2 + 1452 >> 0] | 0) << 24 | ((HEAPU8[$2 + 1451 >> 0] | 0) << 16 | ((HEAPU8[$2 + 1450 >> 0] | 0) << 8 | (HEAPU8[$2 + 1449 >> 0] | 0))); //@line 1164
 $85 = HEAP8[$2 + 1453 >> 0] | 0; //@line 1166
 HEAP8[$2 + 1909 >> 0] = ($85 & 255) >>> 4 & 7; //@line 1172
 HEAP8[$2 + 1916 >> 0] = $85 & 15; //@line 1175
 $95 = HEAP8[$2 + 1454 >> 0] & 15; //@line 1178
 $99 = $95 << 24 >> 24 == 0 ? 1e3 : ($95 & 255) * 1e3 | 0; //@line 1183
 HEAP32[$2 + 1892 >> 2] = $99; //@line 1184
 HEAP32[$2 + 1896 >> 2] = $99 + 1e3; //@line 1187
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 1192
 __ZN7LoRaPHY13apply_cf_listEPKhh($2 + 4 | 0, $2 + 1455 | 0, $6 + 239 & 255); //@line 1193
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 400; //@line 1196
  $106 = $ReallocAsyncCtx2 + 4 | 0; //@line 1197
  HEAP32[$106 >> 2] = $2; //@line 1198
  $107 = $ReallocAsyncCtx2 + 8 | 0; //@line 1199
  HEAP32[$107 >> 2] = $10; //@line 1200
  sp = STACKTOP; //@line 1201
  return;
 }
 ___async_unwind = 0; //@line 1204
 HEAP32[$ReallocAsyncCtx2 >> 2] = 400; //@line 1205
 $106 = $ReallocAsyncCtx2 + 4 | 0; //@line 1206
 HEAP32[$106 >> 2] = $2; //@line 1207
 $107 = $ReallocAsyncCtx2 + 8 | 0; //@line 1208
 HEAP32[$107 >> 2] = $10; //@line 1209
 sp = STACKTOP; //@line 1210
 return;
}
function _equeue_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $10 = 0, $11 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3381
 do {
  if (HEAP8[$0 + 184 >> 0] | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 3387
   _wait_ms(10); //@line 3388
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 129; //@line 3391
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 3393
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 3395
    sp = STACKTOP; //@line 3396
    return 0; //@line 3397
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3399
    break;
   }
  }
 } while (0);
 $8 = $1 + 39 & -4; //@line 3405
 $9 = $0 + 156 | 0; //@line 3406
 _equeue_mutex_lock($9); //@line 3407
 $10 = $0 + 24 | 0; //@line 3408
 $11 = HEAP32[$10 >> 2] | 0; //@line 3409
 L7 : do {
  if (!$11) {
   label = 11; //@line 3413
  } else {
   $$03842$i = $10; //@line 3415
   $14 = $11; //@line 3415
   while (1) {
    if ((HEAP32[$14 >> 2] | 0) >>> 0 >= $8 >>> 0) {
     break;
    }
    $20 = $14 + 8 | 0; //@line 3422
    $21 = HEAP32[$20 >> 2] | 0; //@line 3423
    if (!$21) {
     label = 11; //@line 3426
     break L7;
    } else {
     $$03842$i = $20; //@line 3429
     $14 = $21; //@line 3429
    }
   }
   $17 = HEAP32[$14 + 12 >> 2] | 0; //@line 3433
   if (!$17) {
    $$038$sink$i = $$03842$i; //@line 3436
   } else {
    HEAP32[$$03842$i >> 2] = $17; //@line 3438
    $$038$sink$i = $17 + 8 | 0; //@line 3440
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$14 + 8 >> 2]; //@line 3444
   _equeue_mutex_unlock($9); //@line 3445
   $$1$i9 = $14; //@line 3446
  }
 } while (0);
 do {
  if ((label | 0) == 11) {
   $23 = $0 + 28 | 0; //@line 3451
   $24 = HEAP32[$23 >> 2] | 0; //@line 3452
   if ($24 >>> 0 < $8 >>> 0) {
    _equeue_mutex_unlock($9); //@line 3455
    $$0 = 0; //@line 3456
    return $$0 | 0; //@line 3457
   } else {
    $26 = $0 + 32 | 0; //@line 3459
    $27 = HEAP32[$26 >> 2] | 0; //@line 3460
    HEAP32[$26 >> 2] = $27 + $8; //@line 3462
    HEAP32[$23 >> 2] = $24 - $8; //@line 3464
    HEAP32[$27 >> 2] = $8; //@line 3465
    HEAP8[$27 + 4 >> 0] = 1; //@line 3467
    _equeue_mutex_unlock($9); //@line 3468
    if (!$27) {
     $$0 = 0; //@line 3471
    } else {
     $$1$i9 = $27; //@line 3473
     break;
    }
    return $$0 | 0; //@line 3476
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 3481
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 3483
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 3485
 $$0 = $$1$i9 + 36 | 0; //@line 3487
 return $$0 | 0; //@line 3488
}
function __ZN7LoRaMac4joinEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i = 0, $2 = 0, $20 = 0, $27 = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 16257
 STACKTOP = STACKTOP + 16 | 0; //@line 16258
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16258
 $vararg_buffer = sp; //@line 16259
 $2 = sp + 5 | 0; //@line 16260
 $3 = sp + 4 | 0; //@line 16261
 if (!$1) {
  HEAP8[$0 + 2360 >> 0] = 1; //@line 16264
  $$0 = 0; //@line 16265
  STACKTOP = sp; //@line 16266
  return $$0 | 0; //@line 16266
 }
 $5 = $0 + 2068 | 0; //@line 16268
 HEAP32[$5 >> 2] = 0; //@line 16269
 HEAP32[$5 + 4 >> 2] = 0; //@line 16269
 HEAP32[$5 + 8 >> 2] = 0; //@line 16269
 HEAP32[$5 + 12 >> 2] = 0; //@line 16269
 HEAP32[$5 + 16 >> 2] = 0; //@line 16269
 HEAP32[$0 + 2076 >> 2] = 1; //@line 16271
 HEAP32[$0 + 2072 >> 2] = 0; //@line 16273
 HEAP8[$0 + 1877 >> 0] = __ZN7LoRaPHY16get_alternate_DREh($0 + 4 | 0, (HEAPU8[$0 + 1701 >> 0] | 0) + 1 & 255) | 0; //@line 16282
 HEAP8[$2 >> 0] = 0; //@line 16283
 HEAP8[$3 >> 0] = HEAP8[$0 + 1936 >> 0] << 7; //@line 16287
 HEAP8[$0 + 1180 >> 0] = 1; //@line 16289
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 16290
 $20 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $2, $3, 0, 0, 0) | 0; //@line 16291
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 460; //@line 16294
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16296
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 16298
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 16300
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 16302
  HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 16304
  sp = STACKTOP; //@line 16305
  STACKTOP = sp; //@line 16306
  return 0; //@line 16306
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16308
 do {
  if (!$20) {
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16312
   $27 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 16313
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 461; //@line 16316
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 16318
    HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 16320
    sp = STACKTOP; //@line 16321
    STACKTOP = sp; //@line 16322
    return 0; //@line 16322
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16324
    $$0$i = $27; //@line 16325
    break;
   }
  } else {
   HEAP32[$vararg_buffer >> 2] = $20; //@line 16329
   _mbed_tracef(2, 13263, 13268, $vararg_buffer); //@line 16330
   $$0$i = $20; //@line 16331
  }
 } while (0);
 $$0 = $$0$i; //@line 16334
 STACKTOP = sp; //@line 16335
 return $$0 | 0; //@line 16335
}
function __ZN7LoRaMac15open_rx1_windowEv($0) {
 $0 = $0 | 0;
 var $16 = 0, $21 = 0, $33 = 0, $35 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 15475
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 15477
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 15478
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 447; //@line 15481
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 15483
  sp = STACKTOP; //@line 15484
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 15487
 HEAP32[$0 + 1168 >> 2] = 0; //@line 15489
 $6 = $0 + 1940 | 0; //@line 15492
 HEAP8[$6 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 15493
 HEAP8[$0 + 1943 >> 0] = HEAP8[$0 + 1909 >> 0] | 0; //@line 15497
 HEAP8[$0 + 1956 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 15501
 HEAP8[$0 + 1957 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 15505
 $16 = $0 + 1958 | 0; //@line 15506
 HEAP8[$16 >> 0] = 0; //@line 15507
 HEAP32[$0 + 1960 >> 2] = 0; //@line 15509
 $21 = $0 + 4 | 0; //@line 15513
 do {
  if ((HEAP32[$0 + 2364 >> 2] | 0) == 2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15516
   __ZN7LoRaPHY20put_radio_to_standbyEv($21); //@line 15517
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 448; //@line 15520
    HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 15522
    HEAP32[$AsyncCtx2 + 8 >> 2] = $21; //@line 15524
    HEAP32[$AsyncCtx2 + 12 >> 2] = $6; //@line 15526
    HEAP32[$AsyncCtx2 + 16 >> 2] = $16; //@line 15528
    sp = STACKTOP; //@line 15529
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 15532
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 2010 >> 0] = HEAP8[$0 + 1941 >> 0] | 0; //@line 15540
 $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15541
 __ZN7LoRaPHY9rx_configEP18rx_config_params_t($21, $6) | 0; //@line 15542
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 449; //@line 15545
  HEAP32[$AsyncCtx6 + 4 >> 2] = $16; //@line 15547
  HEAP32[$AsyncCtx6 + 8 >> 2] = $0; //@line 15549
  HEAP32[$AsyncCtx6 + 12 >> 2] = $21; //@line 15551
  sp = STACKTOP; //@line 15552
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 15555
 $33 = (HEAP8[$16 >> 0] | 0) != 0; //@line 15557
 $35 = HEAP32[$0 + 1888 >> 2] | 0; //@line 15559
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15560
 __ZN7LoRaPHY15setup_rx_windowEbj($21, $33, $35); //@line 15561
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 450; //@line 15564
  sp = STACKTOP; //@line 15565
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15568
  return;
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_21($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19738
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19742
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19744
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19746
 if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) != 2) {
  $13 = HEAP32[$4 + 1776 >> 2] | 0; //@line 19752
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 19753
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $4 + 1836 | 0, $13); //@line 19754
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 376; //@line 19757
   $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 19758
   HEAP32[$14 >> 2] = $4; //@line 19759
   $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 19760
   HEAP32[$15 >> 2] = $8; //@line 19761
   $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 19762
   HEAP32[$16 >> 2] = $6; //@line 19763
   sp = STACKTOP; //@line 19764
   return;
  }
  ___async_unwind = 0; //@line 19767
  HEAP32[$ReallocAsyncCtx2 >> 2] = 376; //@line 19768
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 19769
  HEAP32[$14 >> 2] = $4; //@line 19770
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 19771
  HEAP32[$15 >> 2] = $8; //@line 19772
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 19773
  HEAP32[$16 >> 2] = $6; //@line 19774
  sp = STACKTOP; //@line 19775
  return;
 }
 if (!(HEAP8[$4 + 1177 >> 0] | 0)) {
  $29 = HEAP8[$4 + 1182 >> 0] | 0; //@line 19783
  HEAP8[$4 + 1183 >> 0] = $29; //@line 19785
  __ZN7LoRaPHY16set_last_tx_doneEhbj($4 + 4 | 0, $29, (HEAP8[$4 + 2360 >> 0] | 0) != 0, $8); //@line 19790
  HEAP32[$4 + 1780 >> 2] = $8; //@line 19792
  return;
 }
 $22 = HEAP32[$4 + 1776 >> 2] | 0; //@line 19797
 $25 = (__ZN7LoRaPHY15get_ack_timeoutEv($4 + 4 | 0) | 0) + $22 | 0; //@line 19800
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 19801
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $4 + 1856 | 0, $25); //@line 19802
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 377; //@line 19805
  $26 = $ReallocAsyncCtx + 4 | 0; //@line 19806
  HEAP32[$26 >> 2] = $4; //@line 19807
  $27 = $ReallocAsyncCtx + 8 | 0; //@line 19808
  HEAP32[$27 >> 2] = $8; //@line 19809
  sp = STACKTOP; //@line 19810
  return;
 }
 ___async_unwind = 0; //@line 19813
 HEAP32[$ReallocAsyncCtx >> 2] = 377; //@line 19814
 $26 = $ReallocAsyncCtx + 4 | 0; //@line 19815
 HEAP32[$26 >> 2] = $4; //@line 19816
 $27 = $ReallocAsyncCtx + 8 | 0; //@line 19817
 HEAP32[$27 >> 2] = $8; //@line 19818
 sp = STACKTOP; //@line 19819
 return;
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 var $$ = 0, $$sink = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $32 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 266
 STACKTOP = STACKTOP + 32 | 0; //@line 267
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 267
 $vararg_buffer3 = sp + 16 | 0; //@line 268
 $vararg_buffer = sp; //@line 270
 $14 = $8 & 1; //@line 271
 $15 = $9 & 1; //@line 272
 $16 = $10 & 1; //@line 273
 $17 = $12 & 1; //@line 274
 HEAP8[$0 + 689 >> 0] = $1; //@line 277
 HEAP32[$vararg_buffer >> 2] = $2 << 24 >> 24; //@line 279
 _mbed_tracef(16, 11020, 11690, $vararg_buffer); //@line 280
 switch ($1 | 0) {
 case 0:
  {
   HEAP8[$0 + 696 >> 0] = $2; //@line 284
   HEAP32[$0 + 700 >> 2] = $3; //@line 286
   HEAP32[$0 + 704 >> 2] = $4; //@line 288
   HEAP32[$0 + 712 >> 2] = $5; //@line 290
   HEAP16[$0 + 716 >> 1] = $7; //@line 292
   HEAP8[$0 + 718 >> 0] = $14; //@line 294
   HEAP8[$0 + 720 >> 0] = $15; //@line 296
   HEAP8[$0 + 721 >> 0] = $17; //@line 298
   HEAP32[$0 + 724 >> 2] = $13; //@line 300
   _mbed_tracef(16, 11020, 11717, sp + 8 | 0); //@line 301
   STACKTOP = sp; //@line 302
   return;
  }
 case 1:
  {
   HEAP8[$0 + 748 >> 0] = $2; //@line 307
   if ($4 >>> 0 > 2) {
    while (1) {}
   }
   $32 = $4 + 7 | 0; //@line 313
   HEAP32[$0 + 752 >> 2] = $32; //@line 315
   HEAP32[$0 + 756 >> 2] = $5; //@line 317
   HEAP8[$0 + 761 >> 0] = $6; //@line 319
   HEAP16[$0 + 762 >> 1] = $7; //@line 321
   HEAP8[$0 + 764 >> 0] = $14; //@line 323
   HEAP8[$0 + 767 >> 0] = $16; //@line 325
   HEAP8[$0 + 768 >> 0] = $11; //@line 327
   HEAP8[$0 + 766 >> 0] = $15; //@line 329
   HEAP8[$0 + 769 >> 0] = $17; //@line 331
   HEAP32[$0 + 772 >> 2] = $13; //@line 333
   $$ = $5 >>> 0 > 6 ? $5 : 6; //@line 335
   if (($4 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 7; //@line 343
   } else {
    if (($32 | 0) == 8 & $$ >>> 0 > 11) {
     label = 7; //@line 349
    } else {
     $$sink = 0; //@line 351
    }
   }
   if ((label | 0) == 7) {
    $$sink = 1; //@line 355
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 358
   _mbed_tracef(16, 11020, 11735, $vararg_buffer3); //@line 359
   STACKTOP = sp; //@line 360
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 364
   return;
  }
 }
}
function __ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1_($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$ = 0, $$0 = 0, $12 = 0, $20 = 0, $21 = 0, $22 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13697
 STACKTOP = STACKTOP + 16 | 0; //@line 13698
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13698
 $7 = sp; //@line 13699
 HEAP32[$7 >> 2] = 0; //@line 13700
 $8 = HEAP8[$3 >> 0] | 0; //@line 13701
 $9 = $8 + 1 << 24 >> 24; //@line 13702
 HEAP8[$3 >> 0] = $9; //@line 13703
 $12 = HEAP8[$1 + ($8 & 255) >> 0] | 0; //@line 13706
 HEAP8[$3 >> 0] = $8 + 2 << 24 >> 24; //@line 13708
 $20 = (HEAPU8[$1 + ($9 & 255) >> 0] | 0) << 8 | $12 & 255; //@line 13715
 $21 = $2 & 65535; //@line 13716
 $22 = $21 + -4 | 0; //@line 13717
 $43 = (HEAPU8[$1 + ($21 + -3) >> 0] | 0) << 8 | (HEAPU8[$1 + $22 >> 0] | 0) | (HEAPU8[$1 + ($21 + -2) >> 0] | 0) << 16 | (HEAPU8[$1 + ($21 + -1) >> 0] | 0) << 24; //@line 13738
 $44 = HEAP32[$5 >> 2] | 0; //@line 13739
 $47 = $20 - $44 & 65535; //@line 13742
 $48 = $47 + $44 | 0; //@line 13743
 $$ = $20 >>> 0 < ($44 & 65535) >>> 0 ? $48 + 65536 | 0 : $48; //@line 13746
 HEAP32[$5 >> 2] = $$; //@line 13747
 $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 13750
 __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($0 + 756 | 0, $1, $22 & 65535, $6, 128, $4, 1, $$, $7) | 0; //@line 13751
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 401; //@line 13754
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 13756
  HEAP32[$AsyncCtx + 8 >> 2] = $43; //@line 13758
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 13760
  HEAP32[$AsyncCtx + 16 >> 2] = $47; //@line 13762
  HEAP32[$AsyncCtx + 20 >> 2] = $7; //@line 13764
  HEAP32[$AsyncCtx + 24 >> 2] = $5; //@line 13766
  sp = STACKTOP; //@line 13767
  STACKTOP = sp; //@line 13768
  return 0; //@line 13768
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13770
 if (($43 | 0) != (HEAP32[$7 >> 2] | 0)) {
  HEAP32[$0 + 2004 >> 2] = 12; //@line 13775
  $$0 = 0; //@line 13776
  STACKTOP = sp; //@line 13777
  return $$0 | 0; //@line 13777
 }
 if ($47 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv($0 + 4 | 0) | 0) & 65535) >>> 0) {
  $$0 = 1; //@line 13784
  STACKTOP = sp; //@line 13785
  return $$0 | 0; //@line 13785
 }
 HEAP32[$0 + 2004 >> 2] = 10; //@line 13788
 HEAP32[$0 + 2032 >> 2] = HEAP32[$5 >> 2]; //@line 13791
 $$0 = 0; //@line 13792
 STACKTOP = sp; //@line 13793
 return $$0 | 0; //@line 13793
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$ = 0, $$sink = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $40 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 140
 STACKTOP = STACKTOP + 16 | 0; //@line 141
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 141
 $vararg_buffer1 = sp + 8 | 0; //@line 142
 $15 = $8 & 1; //@line 144
 $16 = $10 & 1; //@line 145
 $17 = $11 & 1; //@line 146
 $18 = $13 & 1; //@line 147
 $19 = $14 & 1; //@line 148
 HEAP8[$0 + 689 >> 0] = $1; //@line 151
 switch ($1 | 0) {
 case 0:
  {
   HEAP32[$0 + 704 >> 2] = $2; //@line 155
   HEAP32[$0 + 712 >> 2] = $3; //@line 157
   HEAP32[$0 + 708 >> 2] = $5; //@line 159
   HEAP8[$0 + 718 >> 0] = $15; //@line 161
   HEAP8[$0 + 719 >> 0] = $9; //@line 163
   HEAP8[$0 + 720 >> 0] = $16; //@line 165
   HEAP8[$0 + 721 >> 0] = $18; //@line 167
   HEAP8[$0 + 722 >> 0] = $19; //@line 169
   HEAP16[$0 + 716 >> 1] = $6; //@line 171
   HEAP32[$0 + 728 >> 2] = ~~(1.0 / +($3 >>> 0) * 8.0 * +($7 & 65535) * 1.0e3) >>> 0; //@line 180
   _mbed_tracef(16, 11020, 11754, sp); //@line 181
   STACKTOP = sp; //@line 182
   return;
  }
 case 1:
  {
   if ($2 >>> 0 > 2) {
    while (1) {}
   }
   $40 = $2 + 7 | 0; //@line 191
   HEAP32[$0 + 752 >> 2] = $40; //@line 193
   HEAP32[$0 + 756 >> 2] = $3; //@line 195
   HEAP8[$0 + 761 >> 0] = $4; //@line 197
   HEAP16[$0 + 762 >> 1] = $6; //@line 199
   HEAP8[$0 + 764 >> 0] = $15; //@line 201
   HEAP8[$0 + 765 >> 0] = $9; //@line 203
   HEAP8[$0 + 766 >> 0] = $16; //@line 205
   HEAP8[$0 + 767 >> 0] = $17; //@line 207
   HEAP8[$0 + 768 >> 0] = $12; //@line 209
   HEAP8[$0 + 769 >> 0] = $18; //@line 211
   HEAP8[$0 + 770 >> 0] = $19; //@line 213
   $$ = $3 >>> 0 > 6 ? $3 : 6; //@line 215
   if (($2 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 7; //@line 223
   } else {
    if (($40 | 0) == 8 & $$ >>> 0 > 11) {
     label = 7; //@line 229
    } else {
     $$sink = 0; //@line 231
    }
   }
   if ((label | 0) == 7) {
    $$sink = 1; //@line 235
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 238
   _mbed_tracef(16, 11020, 11735, $vararg_buffer1); //@line 239
   STACKTOP = sp; //@line 240
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 244
   return;
  }
 }
}
function __ZN12LoRaWANStackD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $15 = 0, $19 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5791
 $1 = $0 + 2484 | 0; //@line 5792
 $3 = HEAP32[$0 + 2528 >> 2] | 0; //@line 5794
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 5800
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5801
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 2516 | 0); //@line 5802
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 167; //@line 5805
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5807
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 5809
    sp = STACKTOP; //@line 5810
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5813
    break;
   }
  }
 } while (0);
 $11 = HEAP32[$0 + 2512 >> 2] | 0; //@line 5819
 do {
  if ($11 | 0) {
   $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 5825
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5826
   FUNCTION_TABLE_vi[$15 & 1023]($0 + 2500 | 0); //@line 5827
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 168; //@line 5830
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5832
    HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 5834
    sp = STACKTOP; //@line 5835
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5838
    break;
   }
  }
 } while (0);
 $19 = HEAP32[$0 + 2496 >> 2] | 0; //@line 5844
 do {
  if ($19 | 0) {
   $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 5849
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5850
   FUNCTION_TABLE_vi[$22 & 1023]($1); //@line 5851
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 169; //@line 5854
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 5856
    sp = STACKTOP; //@line 5857
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5860
    break;
   }
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5866
 __ZN12radio_eventsD2Ev($0 + 2368 | 0); //@line 5867
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 170; //@line 5870
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 5872
  sp = STACKTOP; //@line 5873
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 5876
 $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5877
 __ZN7LoRaMacD2Ev($0); //@line 5878
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 171; //@line 5881
  sp = STACKTOP; //@line 5882
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx10 | 0); //@line 5885
  return;
 }
}
function __ZN7LoRaPHY18dl_channel_requestEhj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$079$i = 0, $$1 = 0, $11 = 0, $13 = 0, $20 = 0, $25 = 0, $28 = 0, $29 = 0, $34 = 0, $35 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21224
 if (!(HEAP8[$0 + 17 >> 0] | 0)) {
  $$0 = 0; //@line 21229
  return $$0 | 0; //@line 21230
 }
 $6 = $0 + 76 | 0; //@line 21232
 L4 : do {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $25 = -1; //@line 21237
  } else {
   $$079$i = 0; //@line 21239
   while (1) {
    $11 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 21243
    $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 21245
    $13 = FUNCTION_TABLE_iiii[$11 & 31]($0, $2, $$079$i & 255) | 0; //@line 21246
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 21251
    if ($13) {
     $25 = $$079$i; //@line 21253
     break L4;
    }
    $20 = $$079$i + 1 | 0; //@line 21256
    if (($20 | 0) < (HEAPU8[$6 >> 0] | 0)) {
     $$079$i = $20; //@line 21261
    } else {
     $25 = -1; //@line 21263
     break L4;
    }
   }
   HEAP32[$AsyncCtx >> 2] = 532; //@line 21267
   HEAP32[$AsyncCtx + 4 >> 2] = $$079$i; //@line 21269
   HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 21271
   HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 21273
   HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 21275
   HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 21277
   HEAP8[$AsyncCtx + 24 >> 0] = $1; //@line 21279
   sp = STACKTOP; //@line 21280
   return 0; //@line 21281
  }
 } while (0);
 $28 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 21287
 $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 21288
 $29 = FUNCTION_TABLE_iiii[$28 & 31]($0, $2, $25 & 255) | 0; //@line 21289
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 533; //@line 21292
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 21294
  HEAP8[$AsyncCtx2 + 8 >> 0] = $1; //@line 21296
  HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 21298
  sp = STACKTOP; //@line 21299
  return 0; //@line 21300
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21302
 $$ = $29 ? 3 : 2; //@line 21303
 $34 = HEAP32[$0 + 124 >> 2] | 0; //@line 21305
 $35 = $1 & 255; //@line 21306
 $$1 = (HEAP32[$34 + ($35 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 21311
 if ($$1 << 24 >> 24 != 3) {
  $$0 = $$1; //@line 21314
  return $$0 | 0; //@line 21315
 }
 HEAP32[$34 + ($35 * 12 | 0) + 4 >> 2] = $2; //@line 21318
 $$0 = 3; //@line 21319
 return $$0 | 0; //@line 21320
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_25($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $24 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20078
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20080
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20082
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20084
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20086
 $11 = $2 + 1964 | 0; //@line 20089
 HEAP8[$11 >> 0] = HEAP8[$2 + 1182 >> 0] | 0; //@line 20090
 HEAP32[$2 + 1968 >> 2] = HEAP32[$2 + 1912 >> 2]; //@line 20094
 HEAP8[$2 + 1980 >> 0] = HEAP8[$2 + 1921 >> 0] | 0; //@line 20098
 HEAP8[$2 + 1981 >> 0] = HEAP8[$2 + 1173 >> 0] | 0; //@line 20102
 HEAP32[$2 + 1984 >> 2] = 1; //@line 20104
 $24 = $2 + 1982 | 0; //@line 20107
 HEAP8[$24 >> 0] = (HEAP32[$8 >> 2] | 0) == 2 & 1; //@line 20109
 HEAP8[$2 + 2010 >> 0] = HEAP8[$2 + 1965 >> 0] | 0; //@line 20113
 $29 = $2 + 4 | 0; //@line 20114
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 20115
 $30 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($29, $11) | 0; //@line 20116
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 373; //@line 20119
  $31 = $ReallocAsyncCtx6 + 4 | 0; //@line 20120
  HEAP32[$31 >> 2] = $2; //@line 20121
  $32 = $ReallocAsyncCtx6 + 8 | 0; //@line 20122
  HEAP32[$32 >> 2] = $4; //@line 20123
  $33 = $ReallocAsyncCtx6 + 12 | 0; //@line 20124
  HEAP32[$33 >> 2] = $6; //@line 20125
  $34 = $ReallocAsyncCtx6 + 16 | 0; //@line 20126
  HEAP32[$34 >> 2] = $8; //@line 20127
  $35 = $ReallocAsyncCtx6 + 20 | 0; //@line 20128
  HEAP32[$35 >> 2] = $24; //@line 20129
  $36 = $ReallocAsyncCtx6 + 24 | 0; //@line 20130
  HEAP32[$36 >> 2] = $29; //@line 20131
  sp = STACKTOP; //@line 20132
  return;
 }
 HEAP8[___async_retval >> 0] = $30 & 1; //@line 20137
 ___async_unwind = 0; //@line 20138
 HEAP32[$ReallocAsyncCtx6 >> 2] = 373; //@line 20139
 $31 = $ReallocAsyncCtx6 + 4 | 0; //@line 20140
 HEAP32[$31 >> 2] = $2; //@line 20141
 $32 = $ReallocAsyncCtx6 + 8 | 0; //@line 20142
 HEAP32[$32 >> 2] = $4; //@line 20143
 $33 = $ReallocAsyncCtx6 + 12 | 0; //@line 20144
 HEAP32[$33 >> 2] = $6; //@line 20145
 $34 = $ReallocAsyncCtx6 + 16 | 0; //@line 20146
 HEAP32[$34 >> 2] = $8; //@line 20147
 $35 = $ReallocAsyncCtx6 + 20 | 0; //@line 20148
 HEAP32[$35 >> 2] = $24; //@line 20149
 $36 = $ReallocAsyncCtx6 + 24 | 0; //@line 20150
 HEAP32[$36 >> 2] = $29; //@line 20151
 sp = STACKTOP; //@line 20152
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_173($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $31 = 0, $36 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32248
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32250
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32252
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32254
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 32256
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32258
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32260
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32262
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32264
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32266
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32268
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 32270
 HEAP32[$2 + 2076 >> 2] = 1; //@line 32272
 HEAP32[$2 + 2040 >> 2] = 1; //@line 32274
 HEAP8[$2 + 2044 >> 0] = HEAP8[$4 >> 0] | 0; //@line 32277
 HEAP8[$2 + 2045 >> 0] = HEAP8[$6 >> 0] | 0; //@line 32280
 HEAP32[$2 + 2056 >> 2] = $8 & 255; //@line 32283
 $31 = HEAP32[$10 >> 2] | 0; //@line 32284
 HEAP32[$2 + 2048 >> 2] = $31; //@line 32286
 HEAP32[$2 + 2080 >> 2] = $31; //@line 32288
 if (!(HEAP8[$12 >> 0] | 0)) {
  $36 = $2 + 1701 | 0; //@line 32292
  HEAP8[$36 >> 0] = (HEAP8[$36 >> 0] | 0) + 1 << 24 >> 24; //@line 32295
 }
 $41 = HEAP16[$14 >> 1] & 255; //@line 32299
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 32300
 __ZN7LoRaPHY11handle_sendEPhh($16, $2 + 1185 | 0, $41); //@line 32301
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 398; //@line 32304
  $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 32305
  HEAP32[$42 >> 2] = $6; //@line 32306
  $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 32307
  HEAP32[$43 >> 2] = $18; //@line 32308
  $44 = $ReallocAsyncCtx2 + 12 | 0; //@line 32309
  HEAP32[$44 >> 2] = $20; //@line 32310
  $45 = $ReallocAsyncCtx2 + 16 | 0; //@line 32311
  HEAP32[$45 >> 2] = $22; //@line 32312
  sp = STACKTOP; //@line 32313
  return;
 }
 ___async_unwind = 0; //@line 32316
 HEAP32[$ReallocAsyncCtx2 >> 2] = 398; //@line 32317
 $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 32318
 HEAP32[$42 >> 2] = $6; //@line 32319
 $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 32320
 HEAP32[$43 >> 2] = $18; //@line 32321
 $44 = $ReallocAsyncCtx2 + 12 | 0; //@line 32322
 HEAP32[$44 >> 2] = $20; //@line 32323
 $45 = $ReallocAsyncCtx2 + 16 | 0; //@line 32324
 HEAP32[$45 >> 2] = $22; //@line 32325
 sp = STACKTOP; //@line 32326
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 16484
 STACKTOP = STACKTOP + 64 | 0; //@line 16485
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 16485
 $3 = sp; //@line 16486
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 16489
 } else {
  if (!$1) {
   $$2 = 0; //@line 16493
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16495
   $6 = ___dynamic_cast($1, 400, 384, 0) | 0; //@line 16496
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 703; //@line 16499
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 16501
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 16503
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 16505
    sp = STACKTOP; //@line 16506
    STACKTOP = sp; //@line 16507
    return 0; //@line 16507
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16509
   if (!$6) {
    $$2 = 0; //@line 16512
   } else {
    dest = $3 + 4 | 0; //@line 16515
    stop = dest + 52 | 0; //@line 16515
    do {
     HEAP32[dest >> 2] = 0; //@line 16515
     dest = dest + 4 | 0; //@line 16515
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 16516
    HEAP32[$3 + 8 >> 2] = $0; //@line 16518
    HEAP32[$3 + 12 >> 2] = -1; //@line 16520
    HEAP32[$3 + 48 >> 2] = 1; //@line 16522
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 16525
    $18 = HEAP32[$2 >> 2] | 0; //@line 16526
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 16527
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 16528
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 704; //@line 16531
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 16533
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 16535
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 16537
     sp = STACKTOP; //@line 16538
     STACKTOP = sp; //@line 16539
     return 0; //@line 16539
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16541
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 16548
     $$0 = 1; //@line 16549
    } else {
     $$0 = 0; //@line 16551
    }
    $$2 = $$0; //@line 16553
   }
  }
 }
 STACKTOP = sp; //@line 16557
 return $$2 | 0; //@line 16557
}
function __ZN12LoRaWANStackD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29617
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29619
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29621
 $6 = HEAP32[$2 + 2512 >> 2] | 0; //@line 29623
 if ($6 | 0) {
  $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 29628
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 29629
  FUNCTION_TABLE_vi[$10 & 1023]($2 + 2500 | 0); //@line 29630
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 168; //@line 29633
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 29634
   HEAP32[$11 >> 2] = $2; //@line 29635
   $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 29636
   HEAP32[$12 >> 2] = $4; //@line 29637
   sp = STACKTOP; //@line 29638
   return;
  }
  ___async_unwind = 0; //@line 29641
  HEAP32[$ReallocAsyncCtx2 >> 2] = 168; //@line 29642
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 29643
  HEAP32[$11 >> 2] = $2; //@line 29644
  $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 29645
  HEAP32[$12 >> 2] = $4; //@line 29646
  sp = STACKTOP; //@line 29647
  return;
 }
 $14 = HEAP32[$2 + 2496 >> 2] | 0; //@line 29651
 if (!$14) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 29655
  __ZN12radio_eventsD2Ev($2 + 2368 | 0); //@line 29656
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 170; //@line 29659
   $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 29660
   HEAP32[$20 >> 2] = $2; //@line 29661
   sp = STACKTOP; //@line 29662
   return;
  }
  ___async_unwind = 0; //@line 29665
  HEAP32[$ReallocAsyncCtx5 >> 2] = 170; //@line 29666
  $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 29667
  HEAP32[$20 >> 2] = $2; //@line 29668
  sp = STACKTOP; //@line 29669
  return;
 } else {
  $17 = HEAP32[$14 + 8 >> 2] | 0; //@line 29673
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 29674
  FUNCTION_TABLE_vi[$17 & 1023]($4); //@line 29675
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 169; //@line 29678
   $18 = $ReallocAsyncCtx3 + 4 | 0; //@line 29679
   HEAP32[$18 >> 2] = $2; //@line 29680
   sp = STACKTOP; //@line 29681
   return;
  }
  ___async_unwind = 0; //@line 29684
  HEAP32[$ReallocAsyncCtx3 >> 2] = 169; //@line 29685
  $18 = $ReallocAsyncCtx3 + 4 | 0; //@line 29686
  HEAP32[$18 >> 2] = $2; //@line 29687
  sp = STACKTOP; //@line 29688
  return;
 }
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $21 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6848
 STACKTOP = STACKTOP + 16 | 0; //@line 6849
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6849
 $5 = sp; //@line 6850
 $6 = $0 + 2879 | 0; //@line 6851
 if (($2 & 65535) > 255 | (HEAP8[$6 >> 0] | 0) == 0) {
  STACKTOP = sp; //@line 6857
  return;
 }
 HEAP8[$6 >> 0] = 0; //@line 6860
 $11 = $0 + 2880 | 0; //@line 6861
 _memcpy($11 | 0, $1 | 0, $2 & 65535 | 0) | 0; //@line 6862
 $13 = HEAP32[$0 + 3136 >> 2] | 0; //@line 6864
 $14 = $5 + 12 | 0; //@line 6865
 HEAP32[$5 >> 2] = 7; //@line 6866
 HEAP32[$5 + 4 >> 2] = 0; //@line 6868
 HEAP32[$5 + 8 >> 2] = $0; //@line 6870
 HEAP32[$14 >> 2] = 820; //@line 6871
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6872
 $15 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3_($13, $5, $11, $2, $3, $4) | 0; //@line 6873
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 205; //@line 6876
  HEAP32[$AsyncCtx3 + 4 >> 2] = $14; //@line 6878
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 6880
  sp = STACKTOP; //@line 6881
  STACKTOP = sp; //@line 6882
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6884
 $18 = HEAP32[$14 >> 2] | 0; //@line 6885
 do {
  if ($18 | 0) {
   $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 6890
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6891
   FUNCTION_TABLE_vi[$21 & 1023]($5); //@line 6892
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 206; //@line 6895
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 6897
    HEAP32[$AsyncCtx + 8 >> 2] = $15; //@line 6899
    sp = STACKTOP; //@line 6900
    STACKTOP = sp; //@line 6901
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6903
    break;
   }
  }
 } while (0);
 if ($15 | 0) {
  STACKTOP = sp; //@line 6910
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6912
 _mbed_assert_internal(13121, 12408, 445); //@line 6913
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 207; //@line 6916
  sp = STACKTOP; //@line 6917
  STACKTOP = sp; //@line 6918
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6920
 STACKTOP = sp; //@line 6921
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_339($0) {
 $0 = $0 | 0;
 var $$pr = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 14166
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14168
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14172
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14174
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14176
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 14178
 $$pr = HEAP32[$2 >> 2] | 0; //@line 14179
 if (!$$pr) {
  $17 = $8 + 12 | 0; //@line 14182
  HEAP32[$17 >> 2] = 0; //@line 14183
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 14184
  __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($6, $8); //@line 14185
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 354; //@line 14188
   $18 = $ReallocAsyncCtx9 + 4 | 0; //@line 14189
   HEAP32[$18 >> 2] = $17; //@line 14190
   $19 = $ReallocAsyncCtx9 + 8 | 0; //@line 14191
   HEAP32[$19 >> 2] = $8; //@line 14192
   sp = STACKTOP; //@line 14193
   return;
  }
  ___async_unwind = 0; //@line 14196
  HEAP32[$ReallocAsyncCtx9 >> 2] = 354; //@line 14197
  $18 = $ReallocAsyncCtx9 + 4 | 0; //@line 14198
  HEAP32[$18 >> 2] = $17; //@line 14199
  $19 = $ReallocAsyncCtx9 + 8 | 0; //@line 14200
  HEAP32[$19 >> 2] = $8; //@line 14201
  sp = STACKTOP; //@line 14202
  return;
 } else {
  $13 = HEAP32[$$pr + 4 >> 2] | 0; //@line 14206
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 14207
  FUNCTION_TABLE_vii[$13 & 15]($8, $10); //@line 14208
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 353; //@line 14211
   $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 14212
   HEAP32[$14 >> 2] = $2; //@line 14213
   $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 14214
   HEAP32[$15 >> 2] = $6; //@line 14215
   $16 = $ReallocAsyncCtx7 + 12 | 0; //@line 14216
   HEAP32[$16 >> 2] = $8; //@line 14217
   sp = STACKTOP; //@line 14218
   return;
  }
  ___async_unwind = 0; //@line 14221
  HEAP32[$ReallocAsyncCtx7 >> 2] = 353; //@line 14222
  $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 14223
  HEAP32[$14 >> 2] = $2; //@line 14224
  $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 14225
  HEAP32[$15 >> 2] = $6; //@line 14226
  $16 = $ReallocAsyncCtx7 + 12 | 0; //@line 14227
  HEAP32[$16 >> 2] = $8; //@line 14228
  sp = STACKTOP; //@line 14229
  return;
 }
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 15909
 STACKTOP = STACKTOP + 128 | 0; //@line 15910
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 15910
 $4 = sp + 124 | 0; //@line 15911
 $5 = sp; //@line 15912
 dest = $5; //@line 15913
 src = 10772; //@line 15913
 stop = dest + 124 | 0; //@line 15913
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 15913
  dest = dest + 4 | 0; //@line 15913
  src = src + 4 | 0; //@line 15913
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 15919
   $$015 = 1; //@line 15919
   label = 4; //@line 15920
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 15923
   $$0 = -1; //@line 15924
  }
 } else {
  $$014 = $0; //@line 15927
  $$015 = $1; //@line 15927
  label = 4; //@line 15928
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 15932
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 15934
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 15936
  $14 = $5 + 20 | 0; //@line 15937
  HEAP32[$14 >> 2] = $$014; //@line 15938
  HEAP32[$5 + 44 >> 2] = $$014; //@line 15940
  $16 = $$014 + $$$015 | 0; //@line 15941
  $17 = $5 + 16 | 0; //@line 15942
  HEAP32[$17 >> 2] = $16; //@line 15943
  HEAP32[$5 + 28 >> 2] = $16; //@line 15945
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 15946
  $19 = _vfprintf($5, $2, $3) | 0; //@line 15947
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 691; //@line 15950
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 15952
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 15954
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 15956
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 15958
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 15960
   sp = STACKTOP; //@line 15961
   STACKTOP = sp; //@line 15962
   return 0; //@line 15962
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15964
  if (!$$$015) {
   $$0 = $19; //@line 15967
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 15969
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 15974
   $$0 = $19; //@line 15975
  }
 }
 STACKTOP = sp; //@line 15978
 return $$0 | 0; //@line 15978
}
function _equeue_alloc__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10841
 $6 = (HEAP32[$0 + 4 >> 2] | 0) + 39 & -4; //@line 10843
 $7 = $4 + 156 | 0; //@line 10844
 _equeue_mutex_lock($7); //@line 10845
 $8 = $4 + 24 | 0; //@line 10846
 $9 = HEAP32[$8 >> 2] | 0; //@line 10847
 L3 : do {
  if (!$9) {
   label = 9; //@line 10851
  } else {
   $$03842$i = $8; //@line 10853
   $12 = $9; //@line 10853
   while (1) {
    if ((HEAP32[$12 >> 2] | 0) >>> 0 >= $6 >>> 0) {
     break;
    }
    $18 = $12 + 8 | 0; //@line 10860
    $19 = HEAP32[$18 >> 2] | 0; //@line 10861
    if (!$19) {
     label = 9; //@line 10864
     break L3;
    } else {
     $$03842$i = $18; //@line 10867
     $12 = $19; //@line 10867
    }
   }
   $15 = HEAP32[$12 + 12 >> 2] | 0; //@line 10871
   if (!$15) {
    $$038$sink$i = $$03842$i; //@line 10874
   } else {
    HEAP32[$$03842$i >> 2] = $15; //@line 10876
    $$038$sink$i = $15 + 8 | 0; //@line 10878
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$12 + 8 >> 2]; //@line 10882
   _equeue_mutex_unlock($7); //@line 10883
   $$1$i9 = $12; //@line 10884
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   $21 = $4 + 28 | 0; //@line 10889
   $22 = HEAP32[$21 >> 2] | 0; //@line 10890
   if ($22 >>> 0 < $6 >>> 0) {
    _equeue_mutex_unlock($7); //@line 10893
    $$0 = 0; //@line 10894
    $34 = ___async_retval; //@line 10895
    HEAP32[$34 >> 2] = $$0; //@line 10896
    return;
   } else {
    $24 = $4 + 32 | 0; //@line 10899
    $25 = HEAP32[$24 >> 2] | 0; //@line 10900
    HEAP32[$24 >> 2] = $25 + $6; //@line 10902
    HEAP32[$21 >> 2] = $22 - $6; //@line 10904
    HEAP32[$25 >> 2] = $6; //@line 10905
    HEAP8[$25 + 4 >> 0] = 1; //@line 10907
    _equeue_mutex_unlock($7); //@line 10908
    if (!$25) {
     $$0 = 0; //@line 10911
    } else {
     $$1$i9 = $25; //@line 10913
     break;
    }
    $34 = ___async_retval; //@line 10916
    HEAP32[$34 >> 2] = $$0; //@line 10917
    return;
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 10923
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 10925
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 10927
 $$0 = $$1$i9 + 36 | 0; //@line 10929
 $34 = ___async_retval; //@line 10930
 HEAP32[$34 >> 2] = $$0; //@line 10931
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17816
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 17822
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 17826
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 17827
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 17828
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 17829
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 720; //@line 17832
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 17834
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 17836
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 17838
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 17840
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 17842
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 17844
    sp = STACKTOP; //@line 17845
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17848
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 17852
    $$0 = $0 + 24 | 0; //@line 17853
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 17855
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 17856
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 17861
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 17867
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 17870
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 721; //@line 17875
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 17877
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 17879
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 17881
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 17883
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 17885
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 17887
    sp = STACKTOP; //@line 17888
    return;
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac12prepare_joinEPK15lorawan_connectb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $21 = 0, $22 = 0, $25 = 0, $4 = 0, $5 = 0, $7 = 0, dest = 0, src = 0, stop = 0;
 if (!$1) {
  HEAP32[$0 + 1752 >> 2] = 0; //@line 16176
  HEAP32[$0 + 1756 >> 2] = 0; //@line 16178
  dest = $0 + 1716 | 0; //@line 16180
  stop = dest + 32 | 0; //@line 16180
  do {
   HEAP8[dest >> 0] = 0; //@line 16180
   dest = dest + 1 | 0; //@line 16180
  } while ((dest | 0) < (stop | 0));
  $$0 = 0; //@line 16181
  return $$0 | 0; //@line 16182
 }
 $4 = $1 + 4 | 0; //@line 16184
 if (!$2) {
  HEAP32[$0 + 1752 >> 2] = HEAP32[$4 >> 2]; //@line 16188
  HEAP32[$0 + 1756 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 16192
  dest = $0 + 1716 | 0; //@line 16196
  src = HEAP32[$1 + 12 >> 2] | 0; //@line 16196
  stop = dest + 16 | 0; //@line 16196
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 16196
   dest = dest + 1 | 0; //@line 16196
   src = src + 1 | 0; //@line 16196
  } while ((dest | 0) < (stop | 0));
  dest = $0 + 1732 | 0; //@line 16200
  src = HEAP32[$1 + 16 >> 2] | 0; //@line 16200
  stop = dest + 16 | 0; //@line 16200
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 16200
   dest = dest + 1 | 0; //@line 16200
   src = src + 1 | 0; //@line 16200
  } while ((dest | 0) < (stop | 0));
  $$0 = 0; //@line 16201
  return $$0 | 0; //@line 16202
 }
 $5 = HEAP32[$4 >> 2] | 0; //@line 16204
 if (!$5) {
  $$0 = -1003; //@line 16207
  return $$0 | 0; //@line 16208
 }
 $7 = $1 + 8 | 0; //@line 16210
 if (!(HEAP32[$7 >> 2] | 0)) {
  $$0 = -1003; //@line 16214
  return $$0 | 0; //@line 16215
 }
 $10 = $1 + 12 | 0; //@line 16217
 if (!(HEAP32[$10 >> 2] | 0)) {
  $$0 = -1003; //@line 16221
  return $$0 | 0; //@line 16222
 }
 $13 = $1 + 16 | 0; //@line 16224
 if (!(HEAP8[$13 >> 0] | 0)) {
  $$0 = -1003; //@line 16228
  return $$0 | 0; //@line 16229
 }
 HEAP32[$0 + 1704 >> 2] = $5; //@line 16232
 HEAP32[$0 + 1708 >> 2] = HEAP32[$7 >> 2]; //@line 16235
 HEAP32[$0 + 1712 >> 2] = HEAP32[$10 >> 2]; //@line 16238
 $21 = HEAP8[$13 >> 0] | 0; //@line 16239
 $22 = $0 + 1700 | 0; //@line 16240
 HEAP8[$22 >> 0] = $21; //@line 16241
 $25 = __ZN7LoRaPHY21verify_nb_join_trialsEh($0 + 4 | 0, HEAP8[$13 >> 0] | 0) | 0; //@line 16244
 HEAP8[$22 >> 0] = $25 ? $21 : 12; //@line 16246
 HEAP8[$0 + 1701 >> 0] = 0; //@line 16248
 $$0 = 0; //@line 16249
 return $$0 | 0; //@line 16250
}
function __ZN12LoRaWANStack20process_transmissionEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $20 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10309
 STACKTOP = STACKTOP + 16 | 0; //@line 10310
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10310
 $vararg_buffer = sp; //@line 10311
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10312
 __ZN7LoRaMac16on_radio_tx_doneEv($0); //@line 10313
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 335; //@line 10316
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 10318
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 10320
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 10322
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 10324
  sp = STACKTOP; //@line 10325
  STACKTOP = sp; //@line 10326
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10328
 _mbed_tracef(16, 12506, 12810, $vararg_buffer); //@line 10329
 $5 = $0 + 2480 | 0; //@line 10330
 switch (HEAP32[$5 >> 2] | 0) {
 case 1:
  {
   HEAP32[$5 >> 2] = 4; //@line 10334
   STACKTOP = sp; //@line 10335
   return;
  }
 case 8:
  {
   $9 = (HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) >> 2] | 0) == 1; //@line 10341
   $10 = $0 + 2872 | 0; //@line 10342
   $12 = HEAP32[$10 >> 2] & -18; //@line 10344
   if ($9) {
    HEAP32[$10 >> 2] = $12 | 1; //@line 10347
    HEAP32[$5 >> 2] = 9; //@line 10348
    STACKTOP = sp; //@line 10349
    return;
   }
   HEAP32[$10 >> 2] = $12 | 16; //@line 10352
   if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) != 2) {
    STACKTOP = sp; //@line 10356
    return;
   }
   __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 10358
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10359
   __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 10360
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 336; //@line 10363
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 10365
    HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 10367
    sp = STACKTOP; //@line 10368
    STACKTOP = sp; //@line 10369
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10371
   $20 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 10373
   HEAP32[$5 >> 2] = $20 ? 5 : 2; //@line 10375
   STACKTOP = sp; //@line 10376
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 10380
   return;
  }
 }
}
function _equeue_dealloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02329$i = 0, $$02330$i = 0, $$025$i = 0, $$sink$in$i = 0, $$sink21$i = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $25 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3495
 $2 = $1 + -36 | 0; //@line 3496
 $4 = HEAP32[$1 + -8 >> 2] | 0; //@line 3498
 do {
  if ($4 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 3502
   FUNCTION_TABLE_vi[$4 & 1023]($1); //@line 3503
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 130; //@line 3506
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3508
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 3510
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 3512
    sp = STACKTOP; //@line 3513
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3516
    break;
   }
  }
 } while (0);
 $9 = $0 + 156 | 0; //@line 3521
 _equeue_mutex_lock($9); //@line 3522
 $10 = $0 + 24 | 0; //@line 3523
 $11 = HEAP32[$10 >> 2] | 0; //@line 3524
 L7 : do {
  if (!$11) {
   $$02329$i = $10; //@line 3528
  } else {
   $13 = HEAP32[$2 >> 2] | 0; //@line 3530
   $$025$i = $10; //@line 3531
   $15 = $11; //@line 3531
   while (1) {
    $14 = HEAP32[$15 >> 2] | 0; //@line 3533
    if ($14 >>> 0 >= $13 >>> 0) {
     break;
    }
    $17 = $15 + 8 | 0; //@line 3538
    $18 = HEAP32[$17 >> 2] | 0; //@line 3539
    if (!$18) {
     $$02329$i = $17; //@line 3542
     break L7;
    } else {
     $$025$i = $17; //@line 3545
     $15 = $18; //@line 3545
    }
   }
   if (($14 | 0) == ($13 | 0)) {
    HEAP32[$1 + -24 >> 2] = $15; //@line 3551
    $$02330$i = $$025$i; //@line 3554
    $$sink$in$i = (HEAP32[$$025$i >> 2] | 0) + 8 | 0; //@line 3554
    $$sink21$i = HEAP32[$$sink$in$i >> 2] | 0; //@line 3555
    $25 = $1 + -28 | 0; //@line 3556
    HEAP32[$25 >> 2] = $$sink21$i; //@line 3557
    HEAP32[$$02330$i >> 2] = $2; //@line 3558
    _equeue_mutex_unlock($9); //@line 3559
    return;
   } else {
    $$02329$i = $$025$i; //@line 3562
   }
  }
 } while (0);
 HEAP32[$1 + -24 >> 2] = 0; //@line 3567
 $$02330$i = $$02329$i; //@line 3568
 $$sink$in$i = $$02329$i; //@line 3568
 $$sink21$i = HEAP32[$$sink$in$i >> 2] | 0; //@line 3569
 $25 = $1 + -28 | 0; //@line 3570
 HEAP32[$25 >> 2] = $$sink21$i; //@line 3571
 HEAP32[$$02330$i >> 2] = $2; //@line 3572
 _equeue_mutex_unlock($9); //@line 3573
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_350($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 14739
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14741
 $4 = HEAP32[$2 + 1828 >> 2] | 0; //@line 14743
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 14748
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 14749
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1816 | 0); //@line 14750
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 368; //@line 14753
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 14754
   HEAP32[$9 >> 2] = $2; //@line 14755
   sp = STACKTOP; //@line 14756
   return;
  }
  ___async_unwind = 0; //@line 14759
  HEAP32[$ReallocAsyncCtx3 >> 2] = 368; //@line 14760
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 14761
  HEAP32[$9 >> 2] = $2; //@line 14762
  sp = STACKTOP; //@line 14763
  return;
 }
 $11 = HEAP32[$2 + 1808 >> 2] | 0; //@line 14767
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 14772
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 14773
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 1796 | 0); //@line 14774
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 369; //@line 14777
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 14778
   HEAP32[$16 >> 2] = $2; //@line 14779
   sp = STACKTOP; //@line 14780
   return;
  }
  ___async_unwind = 0; //@line 14783
  HEAP32[$ReallocAsyncCtx4 >> 2] = 369; //@line 14784
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 14785
  HEAP32[$16 >> 2] = $2; //@line 14786
  sp = STACKTOP; //@line 14787
  return;
 }
 $18 = HEAP32[$2 + 748 >> 2] | 0; //@line 14791
 if (!$18) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 14795
  return;
 }
 $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 14800
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 14801
 FUNCTION_TABLE_vi[$22 & 1023]($2 + 736 | 0); //@line 14802
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 370; //@line 14805
  $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 14806
  HEAP32[$23 >> 2] = $2; //@line 14807
  sp = STACKTOP; //@line 14808
  return;
 }
 ___async_unwind = 0; //@line 14811
 HEAP32[$ReallocAsyncCtx5 >> 2] = 370; //@line 14812
 $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 14813
 HEAP32[$23 >> 2] = $2; //@line 14814
 sp = STACKTOP; //@line 14815
 return;
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $2 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 10432
 STACKTOP = STACKTOP + 16 | 0; //@line 10433
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10433
 $vararg_buffer1 = sp + 8 | 0; //@line 10434
 $vararg_buffer = sp; //@line 10435
 $2 = $0 + 2480 | 0; //@line 10436
 switch (HEAP32[$2 >> 2] | 0) {
 case 11:
 case 2:
  {
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = -1e3; //@line 10443
   STACKTOP = sp; //@line 10444
   return;
  }
 }
 $5 = HEAP32[$0 + 2872 >> 2] | 0; //@line 10448
 if ($5 & 4 | 0) {
  _mbed_tracef(16, 12506, 12879, $vararg_buffer); //@line 10452
  HEAP32[$1 >> 2] = 0; //@line 10453
  STACKTOP = sp; //@line 10454
  return;
 }
 HEAP32[$2 >> 2] = 3; //@line 10456
 if ($5 & 8 | 0) {
  $AsyncCtx8 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10460
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $1); //@line 10461
  if (___async) {
   HEAP32[$AsyncCtx8 >> 2] = 338; //@line 10464
   sp = STACKTOP; //@line 10465
   STACKTOP = sp; //@line 10466
   return;
  }
  _emscripten_free_async_context($AsyncCtx8 | 0); //@line 10468
  STACKTOP = sp; //@line 10469
  return;
 }
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10471
 $10 = __ZN7LoRaMac4joinEb($0, 0) | 0; //@line 10472
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 339; //@line 10475
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 10477
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 10479
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 10481
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 10483
  sp = STACKTOP; //@line 10484
  STACKTOP = sp; //@line 10485
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10487
 HEAP32[$1 >> 2] = $10; //@line 10488
 _mbed_tracef(16, 12506, 12897, $vararg_buffer1); //@line 10489
 $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10490
 __ZN12LoRaWANStack23process_connected_stateEv($0); //@line 10491
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 340; //@line 10494
  sp = STACKTOP; //@line 10495
  STACKTOP = sp; //@line 10496
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 10498
 STACKTOP = sp; //@line 10499
 return;
}
function _mbedtls_cipher_cmac_update__async_cb_382($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $42 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28788
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28790
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28792
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28794
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28796
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28798
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28800
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28802
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28804
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28806
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28808
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28810
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 28813
  $42 = ___async_retval; //@line 28814
  HEAP32[$42 >> 2] = $$0; //@line 28815
  return;
 }
 $24 = $2 + 1 | 0; //@line 28818
 if ($24 >>> 0 < $4 >>> 0) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 28821
  $22 = _mbedtls_cipher_update($8, $10, 0, $10, $12) | 0; //@line 28822
  if (!___async) {
   HEAP32[___async_retval >> 2] = $22; //@line 28826
   ___async_unwind = 0; //@line 28827
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 586; //@line 28829
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $24; //@line 28831
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 28833
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 28835
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 28837
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 28839
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 28841
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 28843
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 28845
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 28847
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 28849
  sp = STACKTOP; //@line 28850
  return;
 }
 if (!$14) {
  $$0 = 0; //@line 28855
  $42 = ___async_retval; //@line 28856
  HEAP32[$42 >> 2] = $$0; //@line 28857
  return;
 }
 _memcpy((HEAP32[$18 >> 2] | 0) + ($20 + 16) | 0, $16 | 0, $14 | 0) | 0; //@line 28862
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + $14; //@line 28865
 $$0 = 0; //@line 28866
 $42 = ___async_retval; //@line 28867
 HEAP32[$42 >> 2] = $$0; //@line 28868
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_293($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10422
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10426
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10428
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10430
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10432
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 10433
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 10437
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 10438
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 10439
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 273; //@line 10442
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 10443
   HEAP32[$14 >> 2] = $4; //@line 10444
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 10445
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 10446
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 10447
   HEAP32[$16 >> 2] = $8; //@line 10448
   sp = STACKTOP; //@line 10449
   return;
  }
  ___async_unwind = 0; //@line 10452
  HEAP32[$ReallocAsyncCtx4 >> 2] = 273; //@line 10453
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 10454
  HEAP32[$14 >> 2] = $4; //@line 10455
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 10456
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 10457
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 10458
  HEAP32[$16 >> 2] = $8; //@line 10459
  sp = STACKTOP; //@line 10460
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 10463
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 10467
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 10471
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 10472
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 10473
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 274; //@line 10476
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 10477
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 10478
  sp = STACKTOP; //@line 10479
  return;
 }
 ___async_unwind = 0; //@line 10482
 HEAP32[$ReallocAsyncCtx5 >> 2] = 274; //@line 10483
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 10484
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 10485
 sp = STACKTOP; //@line 10486
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_103($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25313
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25317
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25319
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25321
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25323
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25325
 $13 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25326
 if (!$13) {
  HEAP32[$6 + 1788 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv($4) | 0; //@line 25331
  HEAP8[$6 + 1936 >> 0] = 1; //@line 25333
  HEAP8[$8 >> 0] = 1; //@line 25334
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 25335
  __ZN7LoRaPHY25setup_public_network_modeEb($10, 1); //@line 25336
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 476; //@line 25339
   sp = STACKTOP; //@line 25340
   return;
  }
  ___async_unwind = 0; //@line 25343
  HEAP32[$ReallocAsyncCtx10 >> 2] = 476; //@line 25344
  sp = STACKTOP; //@line 25345
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 25349
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 25350
  FUNCTION_TABLE_vi[$16 & 1023]($12); //@line 25351
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 475; //@line 25354
   $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 25355
   HEAP32[$17 >> 2] = $4; //@line 25356
   $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 25357
   HEAP32[$18 >> 2] = $6; //@line 25358
   $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 25359
   HEAP32[$19 >> 2] = $8; //@line 25360
   $20 = $ReallocAsyncCtx4 + 16 | 0; //@line 25361
   HEAP32[$20 >> 2] = $10; //@line 25362
   sp = STACKTOP; //@line 25363
   return;
  }
  ___async_unwind = 0; //@line 25366
  HEAP32[$ReallocAsyncCtx4 >> 2] = 475; //@line 25367
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 25368
  HEAP32[$17 >> 2] = $4; //@line 25369
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 25370
  HEAP32[$18 >> 2] = $6; //@line 25371
  $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 25372
  HEAP32[$19 >> 2] = $8; //@line 25373
  $20 = $ReallocAsyncCtx4 + 16 | 0; //@line 25374
  HEAP32[$20 >> 2] = $10; //@line 25375
  sp = STACKTOP; //@line 25376
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_76($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23978
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23982
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23984
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23986
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23988
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23989
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 23993
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 23994
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 23995
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 325; //@line 23998
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 23999
   HEAP32[$14 >> 2] = $4; //@line 24000
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 24001
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 24002
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 24003
   HEAP32[$16 >> 2] = $8; //@line 24004
   sp = STACKTOP; //@line 24005
   return;
  }
  ___async_unwind = 0; //@line 24008
  HEAP32[$ReallocAsyncCtx4 >> 2] = 325; //@line 24009
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 24010
  HEAP32[$14 >> 2] = $4; //@line 24011
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 24012
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 24013
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 24014
  HEAP32[$16 >> 2] = $8; //@line 24015
  sp = STACKTOP; //@line 24016
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 24019
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 24023
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 24027
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 24028
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 24029
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 326; //@line 24032
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 24033
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 24034
  sp = STACKTOP; //@line 24035
  return;
 }
 ___async_unwind = 0; //@line 24038
 HEAP32[$ReallocAsyncCtx5 >> 2] = 326; //@line 24039
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 24040
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 24041
 sp = STACKTOP; //@line 24042
 return;
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 11898
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 11901
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 11904
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 11907
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 11913
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 11922
     $24 = $13 >>> 2; //@line 11923
     $$090 = 0; //@line 11924
     $$094 = $7; //@line 11924
     while (1) {
      $25 = $$094 >>> 1; //@line 11926
      $26 = $$090 + $25 | 0; //@line 11927
      $27 = $26 << 1; //@line 11928
      $28 = $27 + $23 | 0; //@line 11929
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 11932
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 11936
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 11942
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 11950
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 11954
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 11960
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 11965
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 11968
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 11968
      }
     }
     $46 = $27 + $24 | 0; //@line 11971
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 11974
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 11978
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 11990
     } else {
      $$4 = 0; //@line 11992
     }
    } else {
     $$4 = 0; //@line 11995
    }
   } else {
    $$4 = 0; //@line 11998
   }
  } else {
   $$4 = 0; //@line 12001
  }
 } while (0);
 return $$4 | 0; //@line 12004
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_416($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31345
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31349
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31351
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31353
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31355
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31356
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 31360
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 31361
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 31362
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 227; //@line 31365
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 31366
   HEAP32[$14 >> 2] = $4; //@line 31367
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 31368
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 31369
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 31370
   HEAP32[$16 >> 2] = $8; //@line 31371
   sp = STACKTOP; //@line 31372
   return;
  }
  ___async_unwind = 0; //@line 31375
  HEAP32[$ReallocAsyncCtx4 >> 2] = 227; //@line 31376
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 31377
  HEAP32[$14 >> 2] = $4; //@line 31378
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 31379
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 31380
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 31381
  HEAP32[$16 >> 2] = $8; //@line 31382
  sp = STACKTOP; //@line 31383
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 31386
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 31390
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 31394
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 31395
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 31396
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 228; //@line 31399
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 31400
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 31401
  sp = STACKTOP; //@line 31402
  return;
 }
 ___async_unwind = 0; //@line 31405
 HEAP32[$ReallocAsyncCtx5 >> 2] = 228; //@line 31406
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 31407
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 31408
 sp = STACKTOP; //@line 31409
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_367($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27622
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27626
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27628
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27630
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27631
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 27635
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 27636
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 27637
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 237; //@line 27640
   $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 27641
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 27642
   $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 27643
   HEAP32[$13 >> 2] = $4; //@line 27644
   $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 27645
   HEAP32[$14 >> 2] = $6; //@line 27646
   sp = STACKTOP; //@line 27647
   return;
  }
  ___async_unwind = 0; //@line 27650
  HEAP32[$ReallocAsyncCtx2 >> 2] = 237; //@line 27651
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 27652
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 27653
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 27654
  HEAP32[$13 >> 2] = $4; //@line 27655
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 27656
  HEAP32[$14 >> 2] = $6; //@line 27657
  sp = STACKTOP; //@line 27658
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$6 >> 2] = 2; //@line 27663
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 27666
 _mbed_assert_internal(13121, 12408, 646); //@line 27667
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 238; //@line 27670
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 27671
  HEAP32[$16 >> 2] = $4; //@line 27672
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 27673
  HEAP32[$17 >> 2] = $6; //@line 27674
  sp = STACKTOP; //@line 27675
  return;
 }
 ___async_unwind = 0; //@line 27678
 HEAP32[$ReallocAsyncCtx6 >> 2] = 238; //@line 27679
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 27680
 HEAP32[$16 >> 2] = $4; //@line 27681
 $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 27682
 HEAP32[$17 >> 2] = $6; //@line 27683
 sp = STACKTOP; //@line 27684
 return;
}
function __ZN12LoRaWANStack7connectERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 11057
 STACKTOP = STACKTOP + 48 | 0; //@line 11058
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 11058
 $vararg_buffer5 = sp + 24 | 0; //@line 11059
 $2 = sp + 32 | 0; //@line 11063
 if (!(HEAP32[$0 + 2480 >> 2] | 0)) {
  _mbed_tracef(2, 12506, 12856, sp); //@line 11068
  $$1 = -1012; //@line 11069
  STACKTOP = sp; //@line 11070
  return $$1 | 0; //@line 11070
 }
 $6 = HEAP8[$1 >> 0] | 0; //@line 11072
 if (($6 & 255) >= 2) {
  $$1 = -1003; //@line 11075
  STACKTOP = sp; //@line 11076
  return $$1 | 0; //@line 11076
 }
 $7 = $6 << 24 >> 24 == 0; //@line 11078
 $8 = __ZN7LoRaMac12prepare_joinEPK15lorawan_connectb($0, $1, $7) | 0; //@line 11079
 if ($8 | 0) {
  $$1 = $8; //@line 11082
  STACKTOP = sp; //@line 11083
  return $$1 | 0; //@line 11083
 }
 if ($7) {
  _mbed_tracef(16, 12506, 12970, sp + 8 | 0); //@line 11086
  HEAP32[$0 + 2540 >> 2] = 0; //@line 11088
  HEAP32[$0 + 2536 >> 2] = 0; //@line 11090
  $12 = $0 + 2872 | 0; //@line 11091
  HEAP32[$12 >> 2] = HEAP32[$12 >> 2] | 8; //@line 11094
 } else {
  _mbed_tracef(16, 12506, 12916, sp + 16 | 0); //@line 11096
  $18 = HEAP32[$0 + 2540 >> 2] | 0; //@line 11100
  HEAP32[$vararg_buffer5 >> 2] = HEAP32[$0 + 2536 >> 2]; //@line 11101
  HEAP32[$vararg_buffer5 + 4 >> 2] = $18; //@line 11103
  _mbed_tracef(16, 12506, 12931, $vararg_buffer5); //@line 11104
  $19 = $0 + 2872 | 0; //@line 11105
  HEAP32[$19 >> 2] = HEAP32[$19 >> 2] & -9; //@line 11108
 }
 HEAP32[$2 >> 2] = 0; //@line 11110
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 11111
 __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status($0, $2); //@line 11112
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 357; //@line 11115
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 11117
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 11119
  sp = STACKTOP; //@line 11120
  STACKTOP = sp; //@line 11121
  return 0; //@line 11121
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11123
 $$1 = HEAP32[$2 >> 2] | 0; //@line 11125
 STACKTOP = sp; //@line 11126
 return $$1 | 0; //@line 11126
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20159
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20161
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20163
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20165
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20167
 if (!$AsyncRetVal) {
  $9 = $2 + 16 | 0; //@line 20170
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 20171
  $10 = _mbedtls_cipher_cmac_finish($4, $9) | 0; //@line 20172
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 507; //@line 20175
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 20176
   HEAP32[$11 >> 2] = $2; //@line 20177
   $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 20178
   HEAP32[$12 >> 2] = $9; //@line 20179
   $13 = $ReallocAsyncCtx2 + 12 | 0; //@line 20180
   HEAP32[$13 >> 2] = $6; //@line 20181
   $14 = $ReallocAsyncCtx2 + 16 | 0; //@line 20182
   HEAP32[$14 >> 2] = $4; //@line 20183
   sp = STACKTOP; //@line 20184
   return;
  }
  HEAP32[___async_retval >> 2] = $10; //@line 20188
  ___async_unwind = 0; //@line 20189
  HEAP32[$ReallocAsyncCtx2 >> 2] = 507; //@line 20190
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 20191
  HEAP32[$11 >> 2] = $2; //@line 20192
  $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 20193
  HEAP32[$12 >> 2] = $9; //@line 20194
  $13 = $ReallocAsyncCtx2 + 12 | 0; //@line 20195
  HEAP32[$13 >> 2] = $6; //@line 20196
  $14 = $ReallocAsyncCtx2 + 16 | 0; //@line 20197
  HEAP32[$14 >> 2] = $4; //@line 20198
  sp = STACKTOP; //@line 20199
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 20202
  _mbedtls_cipher_free($4); //@line 20203
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 20206
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 20207
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 20208
   sp = STACKTOP; //@line 20209
   return;
  }
  ___async_unwind = 0; //@line 20212
  HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 20213
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 20214
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 20215
  sp = STACKTOP; //@line 20216
  return;
 }
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29551
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29553
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29555
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29557
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29559
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29561
 $11 = HEAP32[$2 >> 2] | 0; //@line 29562
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 29566
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 29567
  FUNCTION_TABLE_vii[$14 & 15]($6, $8); //@line 29568
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 94; //@line 29571
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 29572
   HEAP32[$15 >> 2] = $2; //@line 29573
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 29574
   HEAP32[$16 >> 2] = $4; //@line 29575
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 29576
   HEAP32[$17 >> 2] = $10; //@line 29577
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 29578
   HEAP32[$18 >> 2] = $8; //@line 29579
   sp = STACKTOP; //@line 29580
   return;
  }
  ___async_unwind = 0; //@line 29583
  HEAP32[$ReallocAsyncCtx2 >> 2] = 94; //@line 29584
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 29585
  HEAP32[$15 >> 2] = $2; //@line 29586
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 29587
  HEAP32[$16 >> 2] = $4; //@line 29588
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 29589
  HEAP32[$17 >> 2] = $10; //@line 29590
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 29591
  HEAP32[$18 >> 2] = $8; //@line 29592
  sp = STACKTOP; //@line 29593
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 29596
 __ZN4mbed6Ticker5setupEy($10, 1e5, 0); //@line 29597
 $19 = HEAP32[$2 >> 2] | 0; //@line 29598
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 29604
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 29605
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 29606
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 95; //@line 29609
  sp = STACKTOP; //@line 29610
  return;
 }
 ___async_unwind = 0; //@line 29613
 HEAP32[$ReallocAsyncCtx3 >> 2] = 95; //@line 29614
 sp = STACKTOP; //@line 29615
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11744
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11746
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11748
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11750
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11752
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11754
 $11 = HEAP32[$2 >> 2] | 0; //@line 11755
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 11759
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 11760
  FUNCTION_TABLE_vii[$14 & 15]($6, $8); //@line 11761
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 53; //@line 11764
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 11765
   HEAP32[$15 >> 2] = $2; //@line 11766
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 11767
   HEAP32[$16 >> 2] = $4; //@line 11768
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 11769
   HEAP32[$17 >> 2] = $10; //@line 11770
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 11771
   HEAP32[$18 >> 2] = $8; //@line 11772
   sp = STACKTOP; //@line 11773
   return;
  }
  ___async_unwind = 0; //@line 11776
  HEAP32[$ReallocAsyncCtx2 >> 2] = 53; //@line 11777
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 11778
  HEAP32[$15 >> 2] = $2; //@line 11779
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 11780
  HEAP32[$16 >> 2] = $4; //@line 11781
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 11782
  HEAP32[$17 >> 2] = $10; //@line 11783
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 11784
  HEAP32[$18 >> 2] = $8; //@line 11785
  sp = STACKTOP; //@line 11786
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 11789
 __ZN4mbed6Ticker5setupEy($10, 2e5, 0); //@line 11790
 $19 = HEAP32[$2 >> 2] | 0; //@line 11791
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 11797
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 11798
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 11799
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 54; //@line 11802
  sp = STACKTOP; //@line 11803
  return;
 }
 ___async_unwind = 0; //@line 11806
 HEAP32[$ReallocAsyncCtx3 >> 2] = 54; //@line 11807
 sp = STACKTOP; //@line 11808
 return;
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16126
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 16131
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 16136
  } else {
   $20 = $0 & 255; //@line 16138
   $21 = $0 & 255; //@line 16139
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 16145
   } else {
    $26 = $1 + 20 | 0; //@line 16147
    $27 = HEAP32[$26 >> 2] | 0; //@line 16148
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 16154
     HEAP8[$27 >> 0] = $20; //@line 16155
     $34 = $21; //@line 16156
    } else {
     label = 12; //@line 16158
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16163
     $32 = ___overflow($1, $0) | 0; //@line 16164
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 697; //@line 16167
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 16169
      sp = STACKTOP; //@line 16170
      return 0; //@line 16171
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 16173
      $34 = $32; //@line 16174
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 16179
   $$0 = $34; //@line 16180
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 16185
   $8 = $0 & 255; //@line 16186
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 16192
    $14 = HEAP32[$13 >> 2] | 0; //@line 16193
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 16199
     HEAP8[$14 >> 0] = $7; //@line 16200
     $$0 = $8; //@line 16201
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16205
   $19 = ___overflow($1, $0) | 0; //@line 16206
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 696; //@line 16209
    sp = STACKTOP; //@line 16210
    return 0; //@line 16211
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16213
    $$0 = $19; //@line 16214
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 16219
}
function __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK16channel_params_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$037$lcssa = 0, $$03739 = 0, $$038 = 0, $$1 = 0, $10 = 0, $13 = 0, $14 = 0, $20 = 0, $26 = 0, $33 = 0, $39 = 0, $6 = 0, $8 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$038 = -1002; //@line 17083
  return $$038 | 0; //@line 17084
 }
 $6 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 17087
 $8 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 17089
 if (!($6 << 24 >> 24)) {
  $$037$lcssa = 0; //@line 17092
 } else {
  $10 = $1 + 4 | 0; //@line 17094
  $wide$trip$count = $6 & 255; //@line 17095
  $$03739 = 0; //@line 17096
  $indvars$iv = 0; //@line 17096
  while (1) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $8, $indvars$iv) | 0) {
    $13 = HEAP32[$10 >> 2] | 0; //@line 17101
    $14 = $$03739 & 255; //@line 17102
    HEAP8[$13 + ($14 << 4) >> 0] = $indvars$iv; //@line 17105
    HEAP32[$13 + ($14 << 4) + 4 >> 2] = HEAP32[$2 + ($indvars$iv * 12 | 0) >> 2]; //@line 17109
    $20 = $2 + ($indvars$iv * 12 | 0) + 8 | 0; //@line 17110
    HEAP8[$13 + ($14 << 4) + 12 >> 0] = HEAP8[$20 >> 0] | 0; //@line 17113
    $26 = (HEAP32[$10 >> 2] | 0) + ($14 << 4) + 12 | 0; //@line 17117
    HEAP8[$26 >> 0] = HEAP8[$26 >> 0] & -16 | HEAP8[$20 >> 0] & 15; //@line 17121
    $33 = (HEAP32[$10 >> 2] | 0) + ($14 << 4) + 12 | 0; //@line 17125
    HEAP8[$33 >> 0] = HEAP8[$33 >> 0] & 15 | HEAP8[$20 >> 0] & -16; //@line 17129
    $39 = HEAP32[$10 >> 2] | 0; //@line 17132
    HEAP8[$39 + ($14 << 4) + 13 >> 0] = HEAP8[$2 + ($indvars$iv * 12 | 0) + 9 >> 0] | 0; //@line 17134
    HEAP32[$39 + ($14 << 4) + 8 >> 2] = HEAP32[$2 + ($indvars$iv * 12 | 0) + 4 >> 2]; //@line 17138
    $$1 = $$03739 + 1 << 24 >> 24; //@line 17140
   } else {
    $$1 = $$03739; //@line 17142
   }
   $indvars$iv = $indvars$iv + 1 | 0; //@line 17144
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$037$lcssa = $$1; //@line 17147
    break;
   } else {
    $$03739 = $$1; //@line 17150
   }
  }
 }
 HEAP8[$1 >> 0] = $$037$lcssa; //@line 17154
 $$038 = 0; //@line 17155
 return $$038 | 0; //@line 17156
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11563
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 11568
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 11573
  } else {
   $20 = $0 & 255; //@line 11575
   $21 = $0 & 255; //@line 11576
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 11582
   } else {
    $26 = $1 + 20 | 0; //@line 11584
    $27 = HEAP32[$26 >> 2] | 0; //@line 11585
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 11591
     HEAP8[$27 >> 0] = $20; //@line 11592
     $34 = $21; //@line 11593
    } else {
     label = 12; //@line 11595
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11600
     $32 = ___overflow($1, $0) | 0; //@line 11601
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 681; //@line 11604
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11606
      sp = STACKTOP; //@line 11607
      return 0; //@line 11608
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 11610
      $34 = $32; //@line 11611
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 11616
   $$0 = $34; //@line 11617
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 11622
   $8 = $0 & 255; //@line 11623
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 11629
    $14 = HEAP32[$13 >> 2] | 0; //@line 11630
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 11636
     HEAP8[$14 >> 0] = $7; //@line 11637
     $$0 = $8; //@line 11638
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11642
   $19 = ___overflow($1, $0) | 0; //@line 11643
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 680; //@line 11646
    sp = STACKTOP; //@line 11647
    return 0; //@line 11648
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11650
    $$0 = $19; //@line 11651
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 11656
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12283
 $1 = $0 + 20 | 0; //@line 12284
 $3 = $0 + 28 | 0; //@line 12286
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 12292
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 12293
   FUNCTION_TABLE_iiii[$7 & 31]($0, 0, 0) | 0; //@line 12294
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 687; //@line 12297
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 12299
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 12301
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 12303
    sp = STACKTOP; //@line 12304
    return 0; //@line 12305
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12307
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 12311
     break;
    } else {
     label = 5; //@line 12314
     break;
    }
   }
  } else {
   label = 5; //@line 12319
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 12323
  $14 = HEAP32[$13 >> 2] | 0; //@line 12324
  $15 = $0 + 8 | 0; //@line 12325
  $16 = HEAP32[$15 >> 2] | 0; //@line 12326
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 12334
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12335
    FUNCTION_TABLE_iiii[$22 & 31]($0, $14 - $16 | 0, 1) | 0; //@line 12336
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 688; //@line 12339
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12341
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 12343
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 12345
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 12347
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 12349
     sp = STACKTOP; //@line 12350
     return 0; //@line 12351
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12353
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 12359
  HEAP32[$3 >> 2] = 0; //@line 12360
  HEAP32[$1 >> 2] = 0; //@line 12361
  HEAP32[$15 >> 2] = 0; //@line 12362
  HEAP32[$13 >> 2] = 0; //@line 12363
  $$0 = 0; //@line 12364
 }
 return $$0 | 0; //@line 12366
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29827
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29829
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29831
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29833
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29835
 if (!$AsyncRetVal) {
  $9 = $2 + 16 | 0; //@line 29838
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 29839
  $10 = _mbedtls_cipher_cmac_finish($4, $9) | 0; //@line 29840
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 502; //@line 29843
   $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 29844
   HEAP32[$11 >> 2] = $2; //@line 29845
   $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 29846
   HEAP32[$12 >> 2] = $9; //@line 29847
   $13 = $ReallocAsyncCtx3 + 12 | 0; //@line 29848
   HEAP32[$13 >> 2] = $6; //@line 29849
   $14 = $ReallocAsyncCtx3 + 16 | 0; //@line 29850
   HEAP32[$14 >> 2] = $4; //@line 29851
   sp = STACKTOP; //@line 29852
   return;
  }
  HEAP32[___async_retval >> 2] = $10; //@line 29856
  ___async_unwind = 0; //@line 29857
  HEAP32[$ReallocAsyncCtx3 >> 2] = 502; //@line 29858
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 29859
  HEAP32[$11 >> 2] = $2; //@line 29860
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 29861
  HEAP32[$12 >> 2] = $9; //@line 29862
  $13 = $ReallocAsyncCtx3 + 12 | 0; //@line 29863
  HEAP32[$13 >> 2] = $6; //@line 29864
  $14 = $ReallocAsyncCtx3 + 16 | 0; //@line 29865
  HEAP32[$14 >> 2] = $4; //@line 29866
  sp = STACKTOP; //@line 29867
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 29870
  _mbedtls_cipher_free($4); //@line 29871
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 503; //@line 29874
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 29875
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 29876
   sp = STACKTOP; //@line 29877
   return;
  }
  ___async_unwind = 0; //@line 29880
  HEAP32[$ReallocAsyncCtx6 >> 2] = 503; //@line 29881
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 29882
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 29883
  sp = STACKTOP; //@line 29884
  return;
 }
}
function __ZN12LoRaWANStack25process_reception_timeoutEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $17 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 7099
 STACKTOP = STACKTOP + 16 | 0; //@line 7100
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7100
 $2 = sp; //@line 7101
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 7102
 $3 = __ZN7LoRaMac19on_radio_rx_timeoutEb($0, $1) | 0; //@line 7103
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 217; //@line 7106
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7108
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 7110
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 7112
  sp = STACKTOP; //@line 7113
  STACKTOP = sp; //@line 7114
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7116
 if (($3 | 0) != 1) {
  STACKTOP = sp; //@line 7119
  return;
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($0) | 0)) {
  HEAP32[$2 >> 2] = 0; //@line 7123
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7124
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $2); //@line 7125
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 218; //@line 7128
   HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 7130
   sp = STACKTOP; //@line 7131
   STACKTOP = sp; //@line 7132
   return;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 7134
  STACKTOP = sp; //@line 7135
  return;
 }
 __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 7137
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) >> 2] | 0) == 1) {
  if (__ZN7LoRaMac24continue_sending_processEv($0) | 0) {
   STACKTOP = sp; //@line 7144
   return;
  }
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7147
 __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 7148
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 219; //@line 7151
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 7153
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 7155
  sp = STACKTOP; //@line 7156
  STACKTOP = sp; //@line 7157
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7159
 $17 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 7161
 HEAP32[$0 + 2480 >> 2] = $17 ? 5 : 2; //@line 7164
 STACKTOP = sp; //@line 7165
 return;
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14624
 STACKTOP = STACKTOP + 16 | 0; //@line 14625
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14625
 $2 = sp; //@line 14626
 $3 = $0 + 476 | 0; //@line 14627
 $4 = $1 + 12 | 0; //@line 14628
 $5 = HEAP32[$4 >> 2] | 0; //@line 14629
 do {
  if (!$5) {
   $13 = 0; //@line 14633
  } else {
   $8 = HEAP32[$5 + 4 >> 2] | 0; //@line 14636
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14637
   FUNCTION_TABLE_vii[$8 & 15]($2, $1); //@line 14638
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 419; //@line 14641
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 14643
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 14645
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 14647
    sp = STACKTOP; //@line 14648
    STACKTOP = sp; //@line 14649
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14651
    $13 = HEAP32[$4 >> 2] | 0; //@line 14653
    break;
   }
  }
 } while (0);
 $12 = $2 + 12 | 0; //@line 14658
 HEAP32[$12 >> 2] = $13; //@line 14659
 $AsyncCtx6 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14660
 __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($3, $2); //@line 14661
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 420; //@line 14664
  HEAP32[$AsyncCtx6 + 4 >> 2] = $12; //@line 14666
  HEAP32[$AsyncCtx6 + 8 >> 2] = $2; //@line 14668
  sp = STACKTOP; //@line 14669
  STACKTOP = sp; //@line 14670
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 14672
 $16 = HEAP32[$12 >> 2] | 0; //@line 14673
 if (!$16) {
  STACKTOP = sp; //@line 14676
  return;
 }
 $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 14679
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14680
 FUNCTION_TABLE_vi[$19 & 1023]($2); //@line 14681
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 421; //@line 14684
  sp = STACKTOP; //@line 14685
  STACKTOP = sp; //@line 14686
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14688
 STACKTOP = sp; //@line 14689
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_181($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 108
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 112
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 114
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 116
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 118
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 119
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 123
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 124
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 125
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 303; //@line 128
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 129
   HEAP32[$14 >> 2] = $4; //@line 130
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 131
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 132
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 133
   HEAP32[$16 >> 2] = $8; //@line 134
   sp = STACKTOP; //@line 135
   return;
  }
  ___async_unwind = 0; //@line 138
  HEAP32[$ReallocAsyncCtx4 >> 2] = 303; //@line 139
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 140
  HEAP32[$14 >> 2] = $4; //@line 141
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 142
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 143
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 144
  HEAP32[$16 >> 2] = $8; //@line 145
  sp = STACKTOP; //@line 146
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 149
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 153
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 157
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 158
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 159
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 304; //@line 162
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 163
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 164
  sp = STACKTOP; //@line 165
  return;
 }
 ___async_unwind = 0; //@line 168
 HEAP32[$ReallocAsyncCtx5 >> 2] = 304; //@line 169
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 170
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 171
 sp = STACKTOP; //@line 172
 return;
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4151
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4155
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4157
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4159
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4161
 $12 = (HEAP8[$0 + 4 >> 0] | 0) + 1 << 24 >> 24; //@line 4163
 if ($AsyncRetVal | 0) {
  $30 = $AsyncRetVal; //@line 4165
  $29 = ___async_retval; //@line 4166
  HEAP32[$29 >> 2] = $30; //@line 4167
  return;
 }
 if (($12 & 255) >= (HEAPU8[$4 >> 0] | 0)) {
  $30 = 0; //@line 4173
  $29 = ___async_retval; //@line 4174
  HEAP32[$29 >> 2] = $30; //@line 4175
  return;
 }
 $13 = $12 & 255; //@line 4178
 $14 = HEAP32[$6 >> 2] | 0; //@line 4179
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 60 >> 2] | 0; //@line 4182
 $18 = HEAP32[$8 >> 2] | 0; //@line 4183
 $21 = HEAP8[$18 + ($13 << 4) >> 0] | 0; //@line 4186
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 4187
 $22 = FUNCTION_TABLE_iiii[$17 & 31]($14, $18 + ($13 << 4) + 4 | 0, $21) | 0; //@line 4188
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 485; //@line 4191
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 4192
  HEAP8[$23 >> 0] = $12; //@line 4193
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 4194
  HEAP32[$24 >> 2] = $4; //@line 4195
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 4196
  HEAP32[$25 >> 2] = $6; //@line 4197
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 4198
  HEAP32[$26 >> 2] = $8; //@line 4199
  sp = STACKTOP; //@line 4200
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 4204
 ___async_unwind = 0; //@line 4205
 HEAP32[$ReallocAsyncCtx >> 2] = 485; //@line 4206
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 4207
 HEAP8[$23 >> 0] = $12; //@line 4208
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 4209
 HEAP32[$24 >> 2] = $4; //@line 4210
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 4211
 HEAP32[$25 >> 2] = $6; //@line 4212
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 4213
 HEAP32[$26 >> 2] = $8; //@line 4214
 sp = STACKTOP; //@line 4215
 return;
}
function __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 2078
 STACKTOP = STACKTOP + 48 | 0; //@line 2079
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 2079
 $vararg_buffer12 = sp + 32 | 0; //@line 2080
 $vararg_buffer8 = sp + 24 | 0; //@line 2081
 $vararg_buffer4 = sp + 16 | 0; //@line 2082
 $vararg_buffer = sp; //@line 2083
 $6 = $4 & 255; //@line 2084
 $7 = $5 & 255; //@line 2085
 HEAP32[$vararg_buffer >> 2] = $2; //@line 2086
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 2088
 HEAP32[$vararg_buffer + 8 >> 2] = $6; //@line 2090
 HEAP32[$vararg_buffer + 12 >> 2] = $7; //@line 2092
 _mbed_tracef(16, 11020, 11828, $vararg_buffer); //@line 2093
 _emscripten_asm_const_i(6) | 0; //@line 2094
 $10 = HEAP32[$0 + 752 >> 2] | 0; //@line 2096
 if (($10 | 0) != ($6 | 0)) {
  HEAP32[$vararg_buffer4 >> 2] = $10; //@line 2099
  HEAP32[$vararg_buffer4 + 4 >> 2] = $6; //@line 2101
  _mbed_tracef(16, 11020, 11910, $vararg_buffer4); //@line 2102
  STACKTOP = sp; //@line 2103
  return;
 }
 $13 = HEAP32[$0 + 756 >> 2] | 0; //@line 2106
 if (($13 | 0) != ($7 | 0)) {
  HEAP32[$vararg_buffer8 >> 2] = $13; //@line 2109
  HEAP32[$vararg_buffer8 + 4 >> 2] = $7; //@line 2111
  _mbed_tracef(16, 11020, 11957, $vararg_buffer8); //@line 2112
  STACKTOP = sp; //@line 2113
  return;
 }
 $16 = HEAP32[$0 + 692 >> 2] | 0; //@line 2116
 if (($16 | 0) == ($3 | 0)) {
  _memcpy($0 + 792 | 0, $1 | 0, $2 | 0) | 0; //@line 2120
  HEAP8[$0 + 782 >> 0] = $2; //@line 2123
  HEAP8[$0 + 781 >> 0] = -35; //@line 2125
  HEAP8[$0 + 780 >> 0] = -5; //@line 2127
  HEAP8[$0 + 783 >> 0] = 1; //@line 2129
  HEAP32[$0 + 784 >> 2] = _emscripten_asm_const_i(3) | 0; //@line 2132
  STACKTOP = sp; //@line 2133
  return;
 } else {
  HEAP32[$vararg_buffer12 >> 2] = $16; //@line 2135
  HEAP32[$vararg_buffer12 + 4 >> 2] = $3; //@line 2137
  _mbed_tracef(16, 11020, 12004, $vararg_buffer12); //@line 2138
  STACKTOP = sp; //@line 2139
  return;
 }
}
function __ZN7LoRaMac18prepare_ongoing_txEhPKhthh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $35 = 0, $4 = 0, $51 = 0, $56 = 0, $58 = 0, $8 = 0, $AsyncRetVal = 0;
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 29444
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29446
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29450
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29452
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 29454
 $14 = HEAP8[$0 + 25 >> 0] | 0; //@line 29456
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 29458
 $18 = HEAP32[$0 + 28 >> 2] | 0; //@line 29460
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 29464
 $22 = $AsyncRetVal & 255; //@line 29465
 $23 = $2 & 65535; //@line 29466
 if ($23 >>> 0 > $22 >>> 0) {
  HEAP32[$4 >> 2] = $23; //@line 29469
  HEAP32[$4 + 4 >> 2] = $22; //@line 29471
  _mbed_tracef(8, 13263, 13488, $4); //@line 29472
  HEAP16[$8 + 2356 >> 1] = $23 - $22; //@line 29476
  HEAP16[$8 + 2354 >> 1] = $AsyncRetVal & 255; //@line 29479
  _memcpy($8 + 2099 | 0, $10 | 0, $22 | 0) | 0; //@line 29481
 } else {
  HEAP16[$8 + 2354 >> 1] = $2; //@line 29484
  HEAP16[$8 + 2356 >> 1] = 0; //@line 29486
  if ($2 << 16 >> 16) {
   _memcpy($8 + 2099 | 0, $10 | 0, $23 | 0) | 0; //@line 29490
  }
 }
 $35 = $12 & 255; //@line 29493
 if ($35 & 1 | 0) {
  HEAP32[$8 + 2092 >> 2] = 0; //@line 29498
  HEAP8[$8 + 2096 >> 0] = $14; //@line 29500
  HEAP8[$8 + 2098 >> 0] = 1; //@line 29502
 }
 if ($35 & 2 | 0) {
  HEAP32[$8 + 2092 >> 2] = 1; //@line 29508
  HEAP8[$8 + 2096 >> 0] = $14; //@line 29510
  HEAP8[$8 + 2098 >> 0] = $16; //@line 29512
 }
 if (!($35 & 8)) {
  $58 = HEAP8[$8 + 2096 >> 0] | 0; //@line 29519
 } else {
  HEAP32[$8 + 2092 >> 2] = 3; //@line 29522
  HEAP8[$8 + 2096 >> 0] = $14; //@line 29524
  HEAP8[$8 + 2098 >> 0] = 1; //@line 29526
  $58 = $14; //@line 29527
 }
 $51 = $8 + 2354 | 0; //@line 29529
 $56 = HEAPU16[$8 + 2356 >> 1] | 0; //@line 29534
 HEAP32[$18 >> 2] = HEAPU16[$51 >> 1]; //@line 29536
 HEAP32[$18 + 4 >> 2] = $56; //@line 29538
 HEAP32[$18 + 8 >> 2] = $58 & 255; //@line 29540
 _mbed_tracef(8, 13263, 13543, $18); //@line 29541
 HEAP16[___async_retval >> 1] = HEAP16[$51 >> 1] | 0; //@line 29544
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $17 = 0, $20 = 0, $3 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22328
 $3 = $0 + 4 | 0; //@line 22329
 $4 = HEAP32[$3 >> 2] | 0; //@line 22330
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0; //@line 22333
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 22334
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 22335
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 547; //@line 22338
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 22340
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 22343
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 22345
  sp = STACKTOP; //@line 22346
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22349
 $11 = HEAP32[$3 >> 2] | 0; //@line 22350
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 28 >> 2] | 0; //@line 22353
 do {
  if ($1) {
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22356
   FUNCTION_TABLE_vii[$14 & 15]($11, 0); //@line 22357
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 549; //@line 22360
    HEAP32[$AsyncCtx7 + 4 >> 2] = $3; //@line 22362
    sp = STACKTOP; //@line 22363
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 22366
    break;
   }
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22370
   FUNCTION_TABLE_vii[$14 & 15]($11, $2); //@line 22371
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 548; //@line 22374
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 22376
    sp = STACKTOP; //@line 22377
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 22380
    break;
   }
  }
 } while (0);
 $17 = HEAP32[$3 >> 2] | 0; //@line 22385
 $20 = HEAP32[(HEAP32[$17 >> 2] | 0) + 76 >> 2] | 0; //@line 22388
 $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22389
 FUNCTION_TABLE_vi[$20 & 1023]($17); //@line 22390
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 550; //@line 22393
  sp = STACKTOP; //@line 22394
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 22397
  return;
 }
}
function __ZN7LoRaMac15open_rx2_windowEv($0) {
 $0 = $0 | 0;
 var $19 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12220
 $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12222
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 12223
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 378; //@line 12226
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 12228
  sp = STACKTOP; //@line 12229
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12232
 $5 = $0 + 1964 | 0; //@line 12235
 HEAP8[$5 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 12236
 HEAP32[$0 + 1968 >> 2] = HEAP32[$0 + 1912 >> 2]; //@line 12240
 HEAP8[$0 + 1980 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 12244
 HEAP8[$0 + 1981 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 12248
 HEAP32[$0 + 1984 >> 2] = 1; //@line 12250
 $19 = $0 + 1982 | 0; //@line 12254
 HEAP8[$19 >> 0] = (HEAP32[$0 + 2364 >> 2] | 0) == 2 & 1; //@line 12256
 HEAP8[$0 + 2010 >> 0] = HEAP8[$0 + 1965 >> 0] | 0; //@line 12260
 $24 = $0 + 4 | 0; //@line 12261
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12262
 $25 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($24, $5) | 0; //@line 12263
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 379; //@line 12266
  HEAP32[$AsyncCtx3 + 4 >> 2] = $19; //@line 12268
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 12270
  HEAP32[$AsyncCtx3 + 12 >> 2] = $24; //@line 12272
  sp = STACKTOP; //@line 12273
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12276
 if (!$25) {
  return;
 }
 $30 = (HEAP8[$19 >> 0] | 0) != 0; //@line 12281
 $32 = HEAP32[$0 + 1888 >> 2] | 0; //@line 12283
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 12284
 __ZN7LoRaPHY15setup_rx_windowEbj($24, $30, $32); //@line 12285
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 380; //@line 12288
  HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 12290
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 12292
  sp = STACKTOP; //@line 12293
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12296
 HEAP32[$0 + 1168 >> 2] = HEAP8[$19 >> 0] | 0 ? 2 : 1; //@line 12301
 return;
}
function __ZN12LoRaWANStack26process_status_check_stateEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $16 = 0, $3 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 7672
 switch (HEAP32[$0 + 2480 >> 2] | 0) {
 case 9:
 case 8:
  {
   $3 = $0 + 2872 | 0; //@line 7677
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] & -18; //@line 7680
   __ZN7LoRaMac14set_tx_ongoingEb($0, 0); //@line 7681
   __ZN7LoRaMac16reset_ongoing_txEb($0, 0); //@line 7682
   $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7683
   __ZN12LoRaWANStack20mcps_confirm_handlerEv($0); //@line 7684
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 239; //@line 7687
    sp = STACKTOP; //@line 7688
    return;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 7691
   return;
  }
 case 5:
  {
   $6 = $0 + 2872 | 0; //@line 7696
   $7 = HEAP32[$6 >> 2] | 0; //@line 7697
   do {
    if ($7 & 16 | 0) {
     HEAP32[$6 >> 2] = $7 & -18; //@line 7703
     __ZN7LoRaMac14set_tx_ongoingEb($0, 0); //@line 7704
     __ZN7LoRaMac16reset_ongoing_txEb($0, 0); //@line 7705
     $11 = $0 + 2878 | 0; //@line 7706
     if (HEAP8[$11 >> 0] | 0) {
      HEAP8[$11 >> 0] = 0; //@line 7710
      break;
     }
     $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7713
     __ZN12LoRaWANStack20mcps_confirm_handlerEv($0); //@line 7714
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 240; //@line 7717
      HEAP32[$AsyncCtx3 + 4 >> 2] = $6; //@line 7719
      HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 7721
      sp = STACKTOP; //@line 7722
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7725
      break;
     }
    }
   } while (0);
   $16 = HEAP32[$6 >> 2] | 0; //@line 7730
   if (!($16 & 2)) {
    return;
   }
   HEAP32[$6 >> 2] = $16 & -3; //@line 7737
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7738
   __ZN12LoRaWANStack23mcps_indication_handlerEv($0); //@line 7739
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 241; //@line 7742
    sp = STACKTOP; //@line 7743
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7746
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_27($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20280
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20284
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20286
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20288
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20290
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20292
 if (!$AsyncRetVal) {
  $14 = HEAP16[$0 + 4 >> 1] & 255; //@line 20296
  $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 20297
  $15 = _mbedtls_cipher_cmac_update($4, $6, $14) | 0; //@line 20298
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 506; //@line 20301
   $16 = $ReallocAsyncCtx + 4 | 0; //@line 20302
   HEAP32[$16 >> 2] = $8; //@line 20303
   $17 = $ReallocAsyncCtx + 8 | 0; //@line 20304
   HEAP32[$17 >> 2] = $4; //@line 20305
   $18 = $ReallocAsyncCtx + 12 | 0; //@line 20306
   HEAP32[$18 >> 2] = $10; //@line 20307
   sp = STACKTOP; //@line 20308
   return;
  }
  HEAP32[___async_retval >> 2] = $15; //@line 20312
  ___async_unwind = 0; //@line 20313
  HEAP32[$ReallocAsyncCtx >> 2] = 506; //@line 20314
  $16 = $ReallocAsyncCtx + 4 | 0; //@line 20315
  HEAP32[$16 >> 2] = $8; //@line 20316
  $17 = $ReallocAsyncCtx + 8 | 0; //@line 20317
  HEAP32[$17 >> 2] = $4; //@line 20318
  $18 = $ReallocAsyncCtx + 12 | 0; //@line 20319
  HEAP32[$18 >> 2] = $10; //@line 20320
  sp = STACKTOP; //@line 20321
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 20324
  _mbedtls_cipher_free($4); //@line 20325
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 20328
   $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 20329
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 20330
   sp = STACKTOP; //@line 20331
   return;
  }
  ___async_unwind = 0; //@line 20334
  HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 20335
  $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 20336
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 20337
  sp = STACKTOP; //@line 20338
  return;
 }
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_394($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29892
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29894
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29896
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29898
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29900
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29902
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29904
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 29907
  $13 = _mbedtls_cipher_cmac_update($2, $4, $6) | 0; //@line 29908
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 501; //@line 29911
   $14 = $ReallocAsyncCtx + 4 | 0; //@line 29912
   HEAP32[$14 >> 2] = $8; //@line 29913
   $15 = $ReallocAsyncCtx + 8 | 0; //@line 29914
   HEAP32[$15 >> 2] = $2; //@line 29915
   $16 = $ReallocAsyncCtx + 12 | 0; //@line 29916
   HEAP32[$16 >> 2] = $10; //@line 29917
   sp = STACKTOP; //@line 29918
   return;
  }
  HEAP32[___async_retval >> 2] = $13; //@line 29922
  ___async_unwind = 0; //@line 29923
  HEAP32[$ReallocAsyncCtx >> 2] = 501; //@line 29924
  $14 = $ReallocAsyncCtx + 4 | 0; //@line 29925
  HEAP32[$14 >> 2] = $8; //@line 29926
  $15 = $ReallocAsyncCtx + 8 | 0; //@line 29927
  HEAP32[$15 >> 2] = $2; //@line 29928
  $16 = $ReallocAsyncCtx + 12 | 0; //@line 29929
  HEAP32[$16 >> 2] = $10; //@line 29930
  sp = STACKTOP; //@line 29931
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 29934
  _mbedtls_cipher_free($2); //@line 29935
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 503; //@line 29938
   $18 = $ReallocAsyncCtx6 + 4 | 0; //@line 29939
   HEAP32[$18 >> 2] = $AsyncRetVal; //@line 29940
   sp = STACKTOP; //@line 29941
   return;
  }
  ___async_unwind = 0; //@line 29944
  HEAP32[$ReallocAsyncCtx6 >> 2] = 503; //@line 29945
  $18 = $ReallocAsyncCtx6 + 4 | 0; //@line 29946
  HEAP32[$18 >> 2] = $AsyncRetVal; //@line 29947
  sp = STACKTOP; //@line 29948
  return;
 }
}
function __ZN12radio_eventsD2Ev__async_cb_167($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32039
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32041
 $4 = HEAP32[$2 + 44 >> 2] | 0; //@line 32043
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 32048
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 32049
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 32 | 0); //@line 32050
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 32053
   $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 32054
   HEAP32[$9 >> 2] = $2; //@line 32055
   sp = STACKTOP; //@line 32056
   return;
  }
  ___async_unwind = 0; //@line 32059
  HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 32060
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 32061
  HEAP32[$9 >> 2] = $2; //@line 32062
  sp = STACKTOP; //@line 32063
  return;
 }
 $11 = HEAP32[$2 + 28 >> 2] | 0; //@line 32067
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 32072
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 32073
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 16 | 0); //@line 32074
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 32077
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 32078
   HEAP32[$16 >> 2] = $2; //@line 32079
   sp = STACKTOP; //@line 32080
   return;
  }
  ___async_unwind = 0; //@line 32083
  HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 32084
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 32085
  HEAP32[$16 >> 2] = $2; //@line 32086
  sp = STACKTOP; //@line 32087
  return;
 }
 $18 = HEAP32[$2 + 12 >> 2] | 0; //@line 32091
 if (!$18) {
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 32097
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 32098
 FUNCTION_TABLE_vi[$21 & 1023]($2); //@line 32099
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 178; //@line 32102
  sp = STACKTOP; //@line 32103
  return;
 }
 ___async_unwind = 0; //@line 32106
 HEAP32[$ReallocAsyncCtx7 >> 2] = 178; //@line 32107
 sp = STACKTOP; //@line 32108
 return;
}
function __ZN7LoRaMac24get_max_possible_tx_sizeEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$09 = 0, $$pre = 0, $$pre11 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $34 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $or$cond$i = 0, sp = 0;
 sp = STACKTOP; //@line 15784
 $2 = $0 + 476 | 0; //@line 15785
 $4 = (__ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($2) | 0) & 255; //@line 15787
 $7 = ((__ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($2) | 0) & 255) + $4 | 0; //@line 15790
 $$pre = $0 + 4 | 0; //@line 15794
 $$pre11 = $0 + 1877 | 0; //@line 15795
 do {
  if (HEAP8[$0 + 1936 >> 0] | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 15800
   __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($$pre, 0, $$pre11, $0 + 1876 | 0, $0 + 1768 | 0) | 0; //@line 15801
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 452; //@line 15804
    HEAP32[$AsyncCtx + 4 >> 2] = $$pre11; //@line 15806
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 15808
    HEAP32[$AsyncCtx + 12 >> 2] = $$pre; //@line 15810
    HEAP32[$AsyncCtx + 16 >> 2] = $7; //@line 15812
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 15814
    HEAP8[$AsyncCtx + 24 >> 0] = $1; //@line 15816
    sp = STACKTOP; //@line 15817
    return 0; //@line 15818
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15820
    break;
   }
  }
 } while (0);
 $20 = $0 + 1173 | 0; //@line 15826
 $23 = __ZN7LoRaPHY15get_max_payloadEhb($$pre, HEAP8[$$pre11 >> 0] | 0, (HEAP8[$20 >> 0] | 0) != 0) | 0; //@line 15829
 $24 = $23 & 255; //@line 15830
 $25 = $7 & 255; //@line 15831
 if ($25 >>> 0 > $24 >>> 0) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($2); //@line 15834
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($2); //@line 15835
  $$0 = 0; //@line 15836
  $$09 = $23; //@line 15836
 } else {
  $$0 = $25; //@line 15840
  $$09 = $24 - $7 & 255; //@line 15840
 }
 $34 = $$0 + ($1 & 255) | 0; //@line 15847
 $or$cond$i = $34 >>> 0 < 256 & $34 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb($$pre, HEAP8[$$pre11 >> 0] | 0, (HEAP8[$20 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 15851
 return ($or$cond$i ? $23 : $$09) | 0; //@line 15853
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_275($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6725
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6727
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6729
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6731
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6733
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6735
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6737
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6739
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6741
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6743
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6745
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6747
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6749
 $25 = $4 + 1088 | 0; //@line 6750
 HEAP32[$25 >> 2] = 0; //@line 6751
 HEAP32[$25 + 4 >> 2] = 0; //@line 6751
 HEAP32[$25 + 8 >> 2] = 0; //@line 6751
 HEAP32[$25 + 12 >> 2] = 0; //@line 6751
 HEAP8[$4 + 1104 >> 0] = 1; //@line 6753
 HEAP32[$2 >> 2] = 620; //@line 6754
 $27 = $4 + 1112 | 0; //@line 6755
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(52) | 0; //@line 6756
 __ZN4mbed10TimerEventC2Ev($27); //@line 6757
 if (!___async) {
  ___async_unwind = 0; //@line 6760
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 98; //@line 6762
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $27; //@line 6764
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 6766
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 6768
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 6770
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 6772
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 6774
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 6776
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 6778
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 6780
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 6782
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 6784
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 6786
 sp = STACKTOP; //@line 6787
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_274($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6655
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6657
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6659
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6661
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6663
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6665
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6667
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6669
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6671
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6673
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6675
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6677
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6679
 $25 = $4 + 1152 | 0; //@line 6680
 HEAP32[$25 >> 2] = 0; //@line 6681
 HEAP32[$25 + 4 >> 2] = 0; //@line 6681
 HEAP32[$25 + 8 >> 2] = 0; //@line 6681
 HEAP32[$25 + 12 >> 2] = 0; //@line 6681
 HEAP8[$4 + 1168 >> 0] = 1; //@line 6683
 HEAP32[$2 >> 2] = 620; //@line 6684
 $27 = $4 + 1176 | 0; //@line 6685
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(52) | 0; //@line 6686
 __ZN4mbed10TimerEventC2Ev($27); //@line 6687
 if (!___async) {
  ___async_unwind = 0; //@line 6690
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 99; //@line 6692
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $27; //@line 6694
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 6696
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 6698
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 6700
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 6702
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 6704
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 6706
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 6708
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 6710
 HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 6712
 HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 6714
 HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 6716
 sp = STACKTOP; //@line 6717
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_273($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6585
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6587
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6589
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6591
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6593
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6595
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6597
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6599
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6601
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6603
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6605
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6607
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6609
 $25 = $4 + 1216 | 0; //@line 6610
 HEAP32[$25 >> 2] = 0; //@line 6611
 HEAP32[$25 + 4 >> 2] = 0; //@line 6611
 HEAP32[$25 + 8 >> 2] = 0; //@line 6611
 HEAP32[$25 + 12 >> 2] = 0; //@line 6611
 HEAP8[$4 + 1232 >> 0] = 1; //@line 6613
 HEAP32[$2 >> 2] = 620; //@line 6614
 $27 = $4 + 1240 | 0; //@line 6615
 $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 6616
 __ZN4mbed10TimerEventC2Ev($27); //@line 6617
 if (!___async) {
  ___async_unwind = 0; //@line 6620
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 100; //@line 6622
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $27; //@line 6624
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 6626
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 6628
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 6630
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 6632
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 6634
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 6636
 HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 6638
 HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 6640
 HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 6642
 HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 6644
 HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 6646
 sp = STACKTOP; //@line 6647
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_154($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29919
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29923
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29925
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29927
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29929
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29931
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29933
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29935
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29937
 if ((HEAP16[$0 + 4 >> 1] | 0) < -1) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 29940
  $20 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 29941
  if (!___async) {
   HEAP32[___async_retval >> 2] = $20; //@line 29945
   ___async_unwind = 0; //@line 29946
  }
  HEAP32[$ReallocAsyncCtx6 >> 2] = 64; //@line 29948
  HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $6; //@line 29950
  HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $16; //@line 29952
  HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $18; //@line 29954
  HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $12; //@line 29956
  HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $4; //@line 29958
  HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $14; //@line 29960
  sp = STACKTOP; //@line 29961
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 29964
  $28 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 29965
  if (!___async) {
   HEAP32[___async_retval >> 2] = $28; //@line 29969
   ___async_unwind = 0; //@line 29970
  }
  HEAP32[$ReallocAsyncCtx5 >> 2] = 65; //@line 29972
  HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $6; //@line 29974
  HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 29976
  HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $10; //@line 29978
  HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $12; //@line 29980
  HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $4; //@line 29982
  HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 29984
  sp = STACKTOP; //@line 29985
  return;
 }
}
function __ZN4mbed7Timeout7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 32343
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32349
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32351
 $9 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 32353
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 32354
 __ZN4mbed6Ticker6detachEv($6); //@line 32355
 $10 = HEAP32[$9 >> 2] | 0; //@line 32356
 if (!$10) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 32359
  _mbed_assert_internal(15037, 15042, 528); //@line 32360
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 117; //@line 32363
   $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 32364
   HEAP32[$12 >> 2] = $9; //@line 32365
   $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 32366
   HEAP32[$13 >> 2] = $8; //@line 32367
   sp = STACKTOP; //@line 32368
   return;
  }
  ___async_unwind = 0; //@line 32371
  HEAP32[$ReallocAsyncCtx4 >> 2] = 117; //@line 32372
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 32373
  HEAP32[$12 >> 2] = $9; //@line 32374
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 32375
  HEAP32[$13 >> 2] = $8; //@line 32376
  sp = STACKTOP; //@line 32377
  return;
 } else {
  $14 = HEAP32[$10 >> 2] | 0; //@line 32380
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 32381
  FUNCTION_TABLE_vi[$14 & 1023]($8); //@line 32382
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 118; //@line 32385
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 32386
   HEAP32[$15 >> 2] = $9; //@line 32387
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 32388
   HEAP32[$16 >> 2] = $8; //@line 32389
   sp = STACKTOP; //@line 32390
   return;
  }
  ___async_unwind = 0; //@line 32393
  HEAP32[$ReallocAsyncCtx2 >> 2] = 118; //@line 32394
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 32395
  HEAP32[$15 >> 2] = $9; //@line 32396
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 32397
  HEAP32[$16 >> 2] = $8; //@line 32398
  sp = STACKTOP; //@line 32399
  return;
 }
}
function _mbed_trace_init() {
 var $$0 = 0, $0 = 0, $10 = 0, $13 = 0, $14 = 0, $17 = 0, $19 = 0, $22 = 0, $24 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0;
 $0 = HEAP32[167] | 0; //@line 4643
 if (!$0) {
  $3 = _malloc(HEAP32[168] | 0) | 0; //@line 4647
  HEAP32[167] = $3; //@line 4648
  $19 = $3; //@line 4649
 } else {
  $19 = $0; //@line 4651
 }
 $4 = HEAP32[169] | 0; //@line 4653
 if (!$4) {
  $7 = _malloc(HEAP32[170] | 0) | 0; //@line 4657
  HEAP32[169] = $7; //@line 4658
  $9 = $7; //@line 4659
 } else {
  $9 = $4; //@line 4661
 }
 HEAP32[171] = $9; //@line 4664
 $10 = HEAP32[164] | 0; //@line 4665
 if (!$10) {
  $13 = _malloc(HEAP32[166] | 0) | 0; //@line 4669
  HEAP32[164] = $13; //@line 4670
  $22 = $13; //@line 4671
 } else {
  $22 = $10; //@line 4673
 }
 $14 = HEAP32[165] | 0; //@line 4675
 if (!$14) {
  $17 = _malloc(HEAP32[166] | 0) | 0; //@line 4679
  HEAP32[165] = $17; //@line 4680
  $24 = $17; //@line 4681
 } else {
  $24 = $14; //@line 4683
 }
 if (($19 | 0) == 0 | ($9 | 0) == 0 | ($22 | 0) == 0 | ($24 | 0) == 0) {
  _free($19); //@line 4693
  _free(HEAP32[169] | 0); //@line 4695
  _free(HEAP32[164] | 0); //@line 4697
  _free(HEAP32[165] | 0); //@line 4699
  HEAP8[652] = 127; //@line 4700
  HEAP32[164] = 0; //@line 4701
  HEAP32[165] = 0; //@line 4702
  HEAP32[166] = 24; //@line 4703
  HEAP32[167] = 0; //@line 4704
  HEAP32[168] = 1024; //@line 4705
  HEAP32[169] = 0; //@line 4706
  HEAP32[170] = 128; //@line 4707
  HEAP32[172] = 0; //@line 4708
  HEAP32[173] = 0; //@line 4709
  HEAP32[174] = 18; //@line 4710
  HEAP32[175] = 0; //@line 4711
  HEAP32[176] = 0; //@line 4711
  HEAP32[177] = 0; //@line 4711
  HEAP32[178] = 0; //@line 4711
  $$0 = -1; //@line 4712
  return $$0 | 0; //@line 4713
 } else {
  _memset($9 | 0, 0, HEAP32[170] | 0) | 0; //@line 4716
  _memset(HEAP32[164] | 0, 0, HEAP32[166] | 0) | 0; //@line 4719
  _memset(HEAP32[165] | 0, 0, HEAP32[166] | 0) | 0; //@line 4722
  _memset(HEAP32[167] | 0, 0, HEAP32[168] | 0) | 0; //@line 4725
  $$0 = 0; //@line 4726
  return $$0 | 0; //@line 4727
 }
 return 0; //@line 4729
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_286($0) {
 $0 = $0 | 0;
 var $2 = 0, $22 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9995
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9997
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9999
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10001
 $9 = $2 + 1964 | 0; //@line 10004
 HEAP8[$9 >> 0] = HEAP8[$2 + 1182 >> 0] | 0; //@line 10005
 HEAP32[$2 + 1968 >> 2] = HEAP32[$2 + 1912 >> 2]; //@line 10009
 HEAP8[$2 + 1980 >> 0] = HEAP8[$2 + 1921 >> 0] | 0; //@line 10013
 HEAP8[$2 + 1981 >> 0] = HEAP8[$2 + 1173 >> 0] | 0; //@line 10017
 HEAP32[$2 + 1984 >> 2] = 1; //@line 10019
 $22 = $2 + 1982 | 0; //@line 10022
 HEAP8[$22 >> 0] = (HEAP32[$4 >> 2] | 0) == 2 & 1; //@line 10024
 HEAP8[$2 + 2010 >> 0] = HEAP8[$2 + 1965 >> 0] | 0; //@line 10028
 $27 = $2 + 4 | 0; //@line 10029
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 10030
 $28 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($27, $9) | 0; //@line 10031
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 442; //@line 10034
  $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 10035
  HEAP32[$29 >> 2] = $22; //@line 10036
  $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 10037
  HEAP32[$30 >> 2] = $2; //@line 10038
  $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 10039
  HEAP32[$31 >> 2] = $27; //@line 10040
  $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 10041
  HEAP32[$32 >> 2] = $6; //@line 10042
  sp = STACKTOP; //@line 10043
  return;
 }
 HEAP8[___async_retval >> 0] = $28 & 1; //@line 10048
 ___async_unwind = 0; //@line 10049
 HEAP32[$ReallocAsyncCtx3 >> 2] = 442; //@line 10050
 $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 10051
 HEAP32[$29 >> 2] = $22; //@line 10052
 $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 10053
 HEAP32[$30 >> 2] = $2; //@line 10054
 $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 10055
 HEAP32[$31 >> 2] = $27; //@line 10056
 $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 10057
 HEAP32[$32 >> 2] = $6; //@line 10058
 sp = STACKTOP; //@line 10059
 return;
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 7031
 STACKTOP = STACKTOP + 16 | 0; //@line 7032
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7032
 $1 = sp; //@line 7033
 $3 = HEAP32[$0 + 3136 >> 2] | 0; //@line 7035
 $4 = $1 + 12 | 0; //@line 7036
 HEAP32[$1 >> 2] = 15; //@line 7037
 HEAP32[$1 + 4 >> 2] = 0; //@line 7039
 HEAP32[$1 + 8 >> 2] = $0; //@line 7041
 HEAP32[$4 >> 2] = 832; //@line 7042
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7043
 $5 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0_($3, $1, 1) | 0; //@line 7044
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 214; //@line 7047
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 7049
  HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 7051
  sp = STACKTOP; //@line 7052
  STACKTOP = sp; //@line 7053
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7055
 $8 = HEAP32[$4 >> 2] | 0; //@line 7056
 do {
  if ($8 | 0) {
   $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 7061
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 7062
   FUNCTION_TABLE_vi[$11 & 1023]($1); //@line 7063
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 215; //@line 7066
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 7068
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 7070
    sp = STACKTOP; //@line 7071
    STACKTOP = sp; //@line 7072
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7074
    break;
   }
  }
 } while (0);
 if ($5 | 0) {
  STACKTOP = sp; //@line 7081
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7083
 _mbed_assert_internal(13121, 12408, 468); //@line 7084
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 216; //@line 7087
  sp = STACKTOP; //@line 7088
  STACKTOP = sp; //@line 7089
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 7091
 STACKTOP = sp; //@line 7092
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_330($0) {
 $0 = $0 | 0;
 var $2 = 0, $21 = 0, $22 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12980
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12982
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12984
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12986
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12988
 if ((__ZNK7LoRaMac16get_device_classEv($8) | 0) == 2) {
  label = 6; //@line 12994
 } else {
  if (!(HEAP8[$6 + 15 >> 0] | 0)) {
   label = 6; //@line 13000
  }
 }
 if ((label | 0) == 6) {
  if ((__ZNK7LoRaMac16get_device_classEv($8) | 0) != 2) {
   return;
  }
  if ((HEAP32[$6 + 4 >> 2] | 0) != 1) {
   return;
  }
 }
 $21 = $4 + 2496 | 0; //@line 13016
 $22 = HEAP32[$21 >> 2] | 0; //@line 13017
 if (!$22) {
  return;
 }
 $26 = HEAP32[$4 + 3136 >> 2] | 0; //@line 13024
 $28 = HEAP32[$22 + 4 >> 2] | 0; //@line 13026
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 13027
 FUNCTION_TABLE_vii[$28 & 15]($2, $4 + 2484 | 0); //@line 13028
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 262; //@line 13031
  $29 = $ReallocAsyncCtx5 + 4 | 0; //@line 13032
  HEAP32[$29 >> 2] = $21; //@line 13033
  $30 = $ReallocAsyncCtx5 + 8 | 0; //@line 13034
  HEAP32[$30 >> 2] = $2; //@line 13035
  $31 = $ReallocAsyncCtx5 + 12 | 0; //@line 13036
  HEAP32[$31 >> 2] = $26; //@line 13037
  $32 = $ReallocAsyncCtx5 + 16 | 0; //@line 13038
  HEAP32[$32 >> 2] = $2; //@line 13039
  sp = STACKTOP; //@line 13040
  return;
 }
 ___async_unwind = 0; //@line 13043
 HEAP32[$ReallocAsyncCtx5 >> 2] = 262; //@line 13044
 $29 = $ReallocAsyncCtx5 + 4 | 0; //@line 13045
 HEAP32[$29 >> 2] = $21; //@line 13046
 $30 = $ReallocAsyncCtx5 + 8 | 0; //@line 13047
 HEAP32[$30 >> 2] = $2; //@line 13048
 $31 = $ReallocAsyncCtx5 + 12 | 0; //@line 13049
 HEAP32[$31 >> 2] = $26; //@line 13050
 $32 = $ReallocAsyncCtx5 + 16 | 0; //@line 13051
 HEAP32[$32 >> 2] = $2; //@line 13052
 sp = STACKTOP; //@line 13053
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6927
 STACKTOP = STACKTOP + 16 | 0; //@line 6928
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6928
 $1 = sp; //@line 6929
 $3 = HEAP32[$0 + 3136 >> 2] | 0; //@line 6931
 $4 = $1 + 12 | 0; //@line 6932
 HEAP32[$1 >> 2] = 15; //@line 6933
 HEAP32[$1 + 4 >> 2] = 0; //@line 6935
 HEAP32[$1 + 8 >> 2] = $0; //@line 6937
 HEAP32[$4 >> 2] = 832; //@line 6938
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6939
 $5 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0_($3, $1, 0) | 0; //@line 6940
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 208; //@line 6943
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 6945
  HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 6947
  sp = STACKTOP; //@line 6948
  STACKTOP = sp; //@line 6949
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6951
 $8 = HEAP32[$4 >> 2] | 0; //@line 6952
 do {
  if ($8 | 0) {
   $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 6957
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6958
   FUNCTION_TABLE_vi[$11 & 1023]($1); //@line 6959
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 209; //@line 6962
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6964
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 6966
    sp = STACKTOP; //@line 6967
    STACKTOP = sp; //@line 6968
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6970
    break;
   }
  }
 } while (0);
 if ($5 | 0) {
  STACKTOP = sp; //@line 6977
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6979
 _mbed_assert_internal(13121, 12408, 453); //@line 6980
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 210; //@line 6983
  sp = STACKTOP; //@line 6984
  STACKTOP = sp; //@line 6985
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6987
 STACKTOP = sp; //@line 6988
 return;
}
function __ZN12LoRaWANStack25process_reception_timeoutEb__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22213
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22215
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22217
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22219
 if ((HEAP32[___async_retval >> 2] | 0) != 1) {
  return;
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($2) | 0)) {
  HEAP32[$4 >> 2] = 0; //@line 22228
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 22229
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($6, $4); //@line 22230
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 218; //@line 22233
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 22234
   HEAP32[$10 >> 2] = $4; //@line 22235
   sp = STACKTOP; //@line 22236
   return;
  }
  ___async_unwind = 0; //@line 22239
  HEAP32[$ReallocAsyncCtx3 >> 2] = 218; //@line 22240
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 22241
  HEAP32[$10 >> 2] = $4; //@line 22242
  sp = STACKTOP; //@line 22243
  return;
 }
 __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 22246
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) >> 2] | 0) == 1) {
  if (__ZN7LoRaMac24continue_sending_processEv($2) | 0) {
   return;
  }
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 22256
 __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 22257
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 219; //@line 22260
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 22261
  HEAP32[$15 >> 2] = $2; //@line 22262
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 22263
  HEAP32[$16 >> 2] = $6; //@line 22264
  sp = STACKTOP; //@line 22265
  return;
 }
 ___async_unwind = 0; //@line 22268
 HEAP32[$ReallocAsyncCtx2 >> 2] = 219; //@line 22269
 $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 22270
 HEAP32[$15 >> 2] = $2; //@line 22271
 $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 22272
 HEAP32[$16 >> 2] = $6; //@line 22273
 sp = STACKTOP; //@line 22274
 return;
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $28 = 0, $5 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16997
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $28 = -1002; //@line 17001
  return $28 | 0; //@line 17002
 }
 $5 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 17005
 $6 = HEAP8[$1 >> 0] | 0; //@line 17006
 if (($6 & 255) > ($5 & 255)) {
  $28 = -1003; //@line 17009
  return $28 | 0; //@line 17010
 }
 if (!($6 << 24 >> 24)) {
  $28 = 0; //@line 17014
  return $28 | 0; //@line 17015
 }
 $9 = $1 + 4 | 0; //@line 17017
 $$016 = 0; //@line 17018
 while (1) {
  $13 = $$016 & 255; //@line 17020
  $14 = HEAP32[$0 >> 2] | 0; //@line 17021
  $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 60 >> 2] | 0; //@line 17024
  $18 = HEAP32[$9 >> 2] | 0; //@line 17025
  $21 = HEAP8[$18 + ($13 << 4) >> 0] | 0; //@line 17028
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 17029
  $22 = FUNCTION_TABLE_iiii[$17 & 31]($14, $18 + ($13 << 4) + 4 | 0, $21) | 0; //@line 17030
  if (___async) {
   label = 7; //@line 17033
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17036
  $12 = $$016 + 1 << 24 >> 24; //@line 17038
  if ($22 | 0) {
   $28 = $22; //@line 17040
   label = 9; //@line 17041
   break;
  }
  if (($12 & 255) < (HEAPU8[$1 >> 0] | 0)) {
   $$016 = $12; //@line 17047
  } else {
   $28 = 0; //@line 17049
   label = 9; //@line 17050
   break;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx >> 2] = 485; //@line 17055
  HEAP8[$AsyncCtx + 4 >> 0] = $$016; //@line 17057
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 17059
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 17061
  HEAP32[$AsyncCtx + 16 >> 2] = $9; //@line 17063
  sp = STACKTOP; //@line 17064
  return 0; //@line 17065
 } else if ((label | 0) == 9) {
  return $28 | 0; //@line 17068
 }
 return 0; //@line 17070
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_22($0) {
 $0 = $0 | 0;
 var $10 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19826
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19830
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19832
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19834
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19836
 HEAP32[$4 + 1168 >> 2] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0 ? 2 : 1; //@line 19841
 if (!(HEAP8[$4 + 1175 >> 0] | 0)) {
  HEAP32[$4 + 2040 >> 2] = 0; //@line 19847
  HEAP32[$4 + 2076 >> 2] = 4; //@line 19849
  $28 = HEAP8[$4 + 1182 >> 0] | 0; //@line 19851
  HEAP8[$4 + 1183 >> 0] = $28; //@line 19853
  __ZN7LoRaPHY16set_last_tx_doneEhbj($4 + 4 | 0, $28, (HEAP8[$4 + 2360 >> 0] | 0) != 0, $10); //@line 19858
  HEAP32[$4 + 1780 >> 2] = $10; //@line 19860
  return;
 }
 $20 = HEAP32[$4 + 1772 >> 2] | 0; //@line 19865
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 19866
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $4 + 1816 | 0, $20); //@line 19867
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 375; //@line 19870
  $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 19871
  HEAP32[$21 >> 2] = $8; //@line 19872
  $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 19873
  HEAP32[$22 >> 2] = $4; //@line 19874
  $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 19875
  HEAP32[$23 >> 2] = $6; //@line 19876
  $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 19877
  HEAP32[$24 >> 2] = $10; //@line 19878
  sp = STACKTOP; //@line 19879
  return;
 }
 ___async_unwind = 0; //@line 19882
 HEAP32[$ReallocAsyncCtx3 >> 2] = 375; //@line 19883
 $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 19884
 HEAP32[$21 >> 2] = $8; //@line 19885
 $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 19886
 HEAP32[$22 >> 2] = $4; //@line 19887
 $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 19888
 HEAP32[$23 >> 2] = $6; //@line 19889
 $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 19890
 HEAP32[$24 >> 2] = $10; //@line 19891
 sp = STACKTOP; //@line 19892
 return;
}
function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $7 = 0;
 $2 = $1 & 255; //@line 12047
 L1 : do {
  if (!$2) {
   $$0 = $0 + (_strlen($0) | 0) | 0; //@line 12053
  } else {
   if (!($0 & 3)) {
    $$030$lcssa = $0; //@line 12059
   } else {
    $7 = $1 & 255; //@line 12061
    $$03039 = $0; //@line 12062
    while (1) {
     $10 = HEAP8[$$03039 >> 0] | 0; //@line 12064
     if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $7 << 24 >> 24) {
      $$0 = $$03039; //@line 12069
      break L1;
     }
     $13 = $$03039 + 1 | 0; //@line 12072
     if (!($13 & 3)) {
      $$030$lcssa = $13; //@line 12077
      break;
     } else {
      $$03039 = $13; //@line 12080
     }
    }
   }
   $17 = Math_imul($2, 16843009) | 0; //@line 12084
   $18 = HEAP32[$$030$lcssa >> 2] | 0; //@line 12085
   L10 : do {
    if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
     $$02936 = $$030$lcssa; //@line 12093
     $25 = $18; //@line 12093
     while (1) {
      $24 = $25 ^ $17; //@line 12095
      if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
       $$029$lcssa = $$02936; //@line 12102
       break L10;
      }
      $31 = $$02936 + 4 | 0; //@line 12105
      $25 = HEAP32[$31 >> 2] | 0; //@line 12106
      if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
       $$029$lcssa = $31; //@line 12115
       break;
      } else {
       $$02936 = $31; //@line 12113
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa; //@line 12120
    }
   } while (0);
   $38 = $1 & 255; //@line 12123
   $$1 = $$029$lcssa; //@line 12124
   while (1) {
    $39 = HEAP8[$$1 >> 0] | 0; //@line 12126
    if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
     $$0 = $$1; //@line 12132
     break;
    } else {
     $$1 = $$1 + 1 | 0; //@line 12135
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 12140
}
function __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$01315 = 0, $$016 = 0, $$1 = 0, $$114 = 0, $$sink = 0, $2 = 0, $23 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = HEAP8[$0 + 2 >> 0] | 0; //@line 17366
 if (!($2 << 24 >> 24)) {
  $$0$lcssa = 0; //@line 17369
  $26 = $$0$lcssa << 24 >> 24 != 0; //@line 17370
  $$sink = $26 & 1; //@line 17371
  HEAP8[$0 >> 0] = $$sink; //@line 17372
  $27 = $0 + 3 | 0; //@line 17373
  HEAP8[$27 >> 0] = $$0$lcssa; //@line 17374
  return;
 } else {
  $$01315 = 0; //@line 17377
  $$016 = 0; //@line 17377
  $5 = 0; //@line 17377
 }
 while (1) {
  $6 = HEAP8[$0 + 4 + $5 >> 0] | 0; //@line 17381
  switch ($6 << 24 >> 24) {
  case 5:
  case 10:
   {
    $7 = $$01315 + 1 << 24 >> 24; //@line 17384
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = $6; //@line 17388
    HEAP8[($$016 + 1 & 255) + ($0 + 132) >> 0] = HEAP8[($7 & 255) + ($0 + 4) >> 0] | 0; //@line 17395
    $$1 = $$016 + 2 << 24 >> 24; //@line 17396
    $$114 = $7; //@line 17396
    break;
   }
  case 8:
   {
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = 8; //@line 17403
    $$1 = $$016 + 1 << 24 >> 24; //@line 17404
    $$114 = $$01315; //@line 17404
    break;
   }
  case 6:
   {
    $$1 = $$016; //@line 17410
    $$114 = $5 + 2 & 255; //@line 17410
    break;
   }
  case 7:
  case 3:
   {
    $$1 = $$016; //@line 17415
    $$114 = $$01315 + 1 << 24 >> 24; //@line 17415
    break;
   }
  default:
   {
    $$1 = $$016; //@line 17419
    $$114 = $$01315; //@line 17419
   }
  }
  $23 = $$114 + 1 << 24 >> 24; //@line 17422
  if (($23 & 255) < ($2 & 255)) {
   $$01315 = $23; //@line 17426
   $$016 = $$1; //@line 17426
   $5 = $23 & 255; //@line 17426
  } else {
   $$0$lcssa = $$1; //@line 17428
   break;
  }
 }
 $26 = $$0$lcssa << 24 >> 24 != 0; //@line 17432
 $$sink = $26 & 1; //@line 17433
 HEAP8[$0 >> 0] = $$sink; //@line 17434
 $27 = $0 + 3 | 0; //@line 17435
 HEAP8[$27 >> 0] = $$0$lcssa; //@line 17436
 return;
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 11789
 $4 = HEAP32[$3 >> 2] | 0; //@line 11790
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 11797
   label = 5; //@line 11798
  } else {
   $$1 = 0; //@line 11800
  }
 } else {
  $12 = $4; //@line 11804
  label = 5; //@line 11805
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 11809
   $10 = HEAP32[$9 >> 2] | 0; //@line 11810
   $14 = $10; //@line 11813
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $1) | 0; //@line 11818
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 11826
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 11830
       $$141 = $0; //@line 11830
       $$143 = $1; //@line 11830
       $31 = $14; //@line 11830
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 11833
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 11840
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $$038) | 0; //@line 11845
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 11848
      break L5;
     }
     $$139 = $$038; //@line 11854
     $$141 = $0 + $$038 | 0; //@line 11854
     $$143 = $1 - $$038 | 0; //@line 11854
     $31 = HEAP32[$9 >> 2] | 0; //@line 11854
    } else {
     $$139 = 0; //@line 11856
     $$141 = $0; //@line 11856
     $$143 = $1; //@line 11856
     $31 = $14; //@line 11856
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 11859
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 11862
   $$1 = $$139 + $$143 | 0; //@line 11864
  }
 } while (0);
 return $$1 | 0; //@line 11867
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_178($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 4
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23
 $18 = $4 + 16 | 0; //@line 24
 HEAP32[$18 >> 2] = HEAP32[$6 >> 2]; //@line 25
 HEAP32[$18 + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 25
 HEAP8[$18 + 8 >> 0] = HEAP8[$6 + 8 >> 0] | 0; //@line 25
 _equeue_event_dtor($4, 300); //@line 26
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 27
 $19 = _equeue_post($8, 301, $4) | 0; //@line 28
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 302; //@line 31
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 32
  HEAP32[$20 >> 2] = $10; //@line 33
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 34
  HEAP32[$21 >> 2] = $12; //@line 35
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 36
  HEAP32[$22 >> 2] = $14; //@line 37
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 38
  HEAP32[$23 >> 2] = $16; //@line 39
  sp = STACKTOP; //@line 40
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 44
 ___async_unwind = 0; //@line 45
 HEAP32[$ReallocAsyncCtx6 >> 2] = 302; //@line 46
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 47
 HEAP32[$20 >> 2] = $10; //@line 48
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 49
 HEAP32[$21 >> 2] = $12; //@line 50
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 51
 HEAP32[$22 >> 2] = $14; //@line 52
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 53
 HEAP32[$23 >> 2] = $16; //@line 54
 sp = STACKTOP; //@line 55
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_369($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $27 = 0, $30 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27849
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27851
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27855
 $8 = $0 + 16 | 0; //@line 27857
 $10 = HEAP32[$8 >> 2] | 0; //@line 27859
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 27862
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 27864
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 27866
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 27868
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 27869
 $18 = HEAP32[$2 >> 2] | 0; //@line 27870
 if ($18 | 0) {
  $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 27874
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 27875
  FUNCTION_TABLE_vi[$21 & 1023]($17); //@line 27876
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 88; //@line 27879
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 27880
   HEAP32[$22 >> 2] = $15; //@line 27881
   sp = STACKTOP; //@line 27882
   return;
  }
  ___async_unwind = 0; //@line 27885
  HEAP32[$ReallocAsyncCtx3 >> 2] = 88; //@line 27886
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 27887
  HEAP32[$22 >> 2] = $15; //@line 27888
  sp = STACKTOP; //@line 27889
  return;
 }
 $24 = HEAP32[$15 + 788 >> 2] | 0; //@line 27893
 if (!$24) {
  return;
 }
 $27 = HEAP32[$24 + 60 >> 2] | 0; //@line 27899
 if (!$27) {
  return;
 }
 $30 = HEAP32[$27 >> 2] | 0; //@line 27905
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 27906
 FUNCTION_TABLE_vi[$30 & 1023]($24 + 48 | 0); //@line 27907
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 89; //@line 27910
  sp = STACKTOP; //@line 27911
  return;
 }
 ___async_unwind = 0; //@line 27914
 HEAP32[$ReallocAsyncCtx4 >> 2] = 89; //@line 27915
 sp = STACKTOP; //@line 27916
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_346($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14461
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14463
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14465
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14467
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14469
 HEAP8[$2 + 2532 >> 0] = 0; //@line 14471
 HEAP32[$4 >> 2] = 11; //@line 14472
 HEAP32[$6 >> 2] = -1011; //@line 14473
 $10 = $2 + 2872 | 0; //@line 14474
 HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -5; //@line 14477
 $13 = $2 + 2496 | 0; //@line 14478
 $14 = HEAP32[$13 >> 2] | 0; //@line 14479
 if (!$14) {
  return;
 }
 $18 = HEAP32[$2 + 3136 >> 2] | 0; //@line 14486
 $20 = HEAP32[$14 + 4 >> 2] | 0; //@line 14488
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 14489
 FUNCTION_TABLE_vii[$20 & 15]($8, $2 + 2484 | 0); //@line 14490
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 343; //@line 14493
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 14494
  HEAP32[$21 >> 2] = $13; //@line 14495
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 14496
  HEAP32[$22 >> 2] = $8; //@line 14497
  $23 = $ReallocAsyncCtx + 12 | 0; //@line 14498
  HEAP32[$23 >> 2] = $18; //@line 14499
  $24 = $ReallocAsyncCtx + 16 | 0; //@line 14500
  HEAP32[$24 >> 2] = $8; //@line 14501
  sp = STACKTOP; //@line 14502
  return;
 }
 ___async_unwind = 0; //@line 14505
 HEAP32[$ReallocAsyncCtx >> 2] = 343; //@line 14506
 $21 = $ReallocAsyncCtx + 4 | 0; //@line 14507
 HEAP32[$21 >> 2] = $13; //@line 14508
 $22 = $ReallocAsyncCtx + 8 | 0; //@line 14509
 HEAP32[$22 >> 2] = $8; //@line 14510
 $23 = $ReallocAsyncCtx + 12 | 0; //@line 14511
 HEAP32[$23 >> 2] = $18; //@line 14512
 $24 = $ReallocAsyncCtx + 16 | 0; //@line 14513
 HEAP32[$24 >> 2] = $8; //@line 14514
 sp = STACKTOP; //@line 14515
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_23($0) {
 $0 = $0 | 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19899
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19901
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19903
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19905
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19907
 if (!(HEAP8[$2 + 1175 >> 0] | 0)) {
  HEAP32[$2 + 2040 >> 2] = 0; //@line 19913
  HEAP32[$2 + 2076 >> 2] = 4; //@line 19915
  $22 = HEAP8[$2 + 1182 >> 0] | 0; //@line 19917
  HEAP8[$2 + 1183 >> 0] = $22; //@line 19919
  __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $22, (HEAP8[$2 + 2360 >> 0] | 0) != 0, $8); //@line 19924
  HEAP32[$2 + 1780 >> 2] = $8; //@line 19926
  return;
 }
 $14 = HEAP32[$2 + 1772 >> 2] | 0; //@line 19931
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 19932
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($4, $2 + 1816 | 0, $14); //@line 19933
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 375; //@line 19936
  $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 19937
  HEAP32[$15 >> 2] = $6; //@line 19938
  $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 19939
  HEAP32[$16 >> 2] = $2; //@line 19940
  $17 = $ReallocAsyncCtx3 + 12 | 0; //@line 19941
  HEAP32[$17 >> 2] = $4; //@line 19942
  $18 = $ReallocAsyncCtx3 + 16 | 0; //@line 19943
  HEAP32[$18 >> 2] = $8; //@line 19944
  sp = STACKTOP; //@line 19945
  return;
 }
 ___async_unwind = 0; //@line 19948
 HEAP32[$ReallocAsyncCtx3 >> 2] = 375; //@line 19949
 $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 19950
 HEAP32[$15 >> 2] = $6; //@line 19951
 $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 19952
 HEAP32[$16 >> 2] = $2; //@line 19953
 $17 = $ReallocAsyncCtx3 + 12 | 0; //@line 19954
 HEAP32[$17 >> 2] = $4; //@line 19955
 $18 = $ReallocAsyncCtx3 + 16 | 0; //@line 19956
 HEAP32[$18 >> 2] = $8; //@line 19957
 sp = STACKTOP; //@line 19958
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_365($0) {
 $0 = $0 | 0;
 var $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 27549
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27551
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27553
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27555
 if (HEAP8[___async_retval >> 0] & 1) {
  return;
 }
 $8 = $4 + 2496 | 0; //@line 27562
 $9 = HEAP32[$8 >> 2] | 0; //@line 27563
 if (!$9) {
  HEAP32[$6 >> 2] = 2; //@line 27566
  return;
 }
 $13 = HEAP32[$4 + 3136 >> 2] | 0; //@line 27571
 $15 = HEAP32[$9 + 4 >> 2] | 0; //@line 27573
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 27574
 FUNCTION_TABLE_vii[$15 & 15]($2, $4 + 2484 | 0); //@line 27575
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 235; //@line 27578
  $16 = $ReallocAsyncCtx + 4 | 0; //@line 27579
  HEAP32[$16 >> 2] = $8; //@line 27580
  $17 = $ReallocAsyncCtx + 8 | 0; //@line 27581
  HEAP32[$17 >> 2] = $2; //@line 27582
  $18 = $ReallocAsyncCtx + 12 | 0; //@line 27583
  HEAP32[$18 >> 2] = $13; //@line 27584
  $19 = $ReallocAsyncCtx + 16 | 0; //@line 27585
  HEAP32[$19 >> 2] = $2; //@line 27586
  $20 = $ReallocAsyncCtx + 20 | 0; //@line 27587
  HEAP32[$20 >> 2] = $6; //@line 27588
  sp = STACKTOP; //@line 27589
  return;
 }
 ___async_unwind = 0; //@line 27592
 HEAP32[$ReallocAsyncCtx >> 2] = 235; //@line 27593
 $16 = $ReallocAsyncCtx + 4 | 0; //@line 27594
 HEAP32[$16 >> 2] = $8; //@line 27595
 $17 = $ReallocAsyncCtx + 8 | 0; //@line 27596
 HEAP32[$17 >> 2] = $2; //@line 27597
 $18 = $ReallocAsyncCtx + 12 | 0; //@line 27598
 HEAP32[$18 >> 2] = $13; //@line 27599
 $19 = $ReallocAsyncCtx + 16 | 0; //@line 27600
 HEAP32[$19 >> 2] = $2; //@line 27601
 $20 = $ReallocAsyncCtx + 20 | 0; //@line 27602
 HEAP32[$20 >> 2] = $6; //@line 27603
 sp = STACKTOP; //@line 27604
 return;
}
function _mbedtls_cipher_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $22 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2644
 if (!$0) {
  $$0 = -24832; //@line 2647
  return $$0 | 0; //@line 2648
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 2650
 if (!$5) {
  $$0 = -24832; //@line 2653
  return $$0 | 0; //@line 2654
 }
 if (!(HEAP32[$5 + 20 >> 2] & 2)) {
  if ((HEAP32[$5 + 8 >> 2] | 0) != ($2 | 0)) {
   $$0 = -24832; //@line 2665
   return $$0 | 0; //@line 2666
  }
 }
 HEAP32[$0 + 4 >> 2] = $2; //@line 2670
 HEAP32[$0 + 8 >> 2] = $3; //@line 2672
 L11 : do {
  if (($3 | 0) != 1) {
   switch (HEAP32[$5 + 4 >> 2] | 0) {
   case 5:
   case 3:
    {
     break L11;
     break;
    }
   default:
    {}
   }
   if ($3 | 0) {
    $$0 = -24832; //@line 2688
    return $$0 | 0; //@line 2689
   }
   $30 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 20 >> 2] | 0; //@line 2694
   $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 2696
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2697
   $33 = FUNCTION_TABLE_iiii[$30 & 31]($32, $1, $2) | 0; //@line 2698
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 574; //@line 2701
    sp = STACKTOP; //@line 2702
    return 0; //@line 2703
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2705
   $$0 = $33; //@line 2706
   return $$0 | 0; //@line 2707
  }
 } while (0);
 $22 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 16 >> 2] | 0; //@line 2713
 $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 2715
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2716
 $25 = FUNCTION_TABLE_iiii[$22 & 31]($24, $1, $2) | 0; //@line 2717
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 573; //@line 2720
  sp = STACKTOP; //@line 2721
  return 0; //@line 2722
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2724
 $$0 = $25; //@line 2725
 return $$0 | 0; //@line 2726
}
function _mbedtls_gcm_setkey__async_cb_354($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 15343
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15345
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15347
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15349
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15351
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15353
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 15357
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 15360
 dest = $2; //@line 15361
 stop = dest + 16 | 0; //@line 15361
 do {
  HEAP8[dest >> 0] = 0; //@line 15361
  dest = dest + 1 | 0; //@line 15361
 } while ((dest | 0) < (stop | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 15362
 $11 = _mbedtls_cipher_update($6, $2, 16, $2, $4) | 0; //@line 15363
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 593; //@line 15366
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 15367
  HEAP32[$12 >> 2] = $2; //@line 15368
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 15369
  HEAP32[$13 >> 2] = $2; //@line 15370
  $14 = $ReallocAsyncCtx + 12 | 0; //@line 15371
  HEAP32[$14 >> 2] = $8; //@line 15372
  $15 = $ReallocAsyncCtx + 16 | 0; //@line 15373
  HEAP32[$15 >> 2] = $4; //@line 15374
  sp = STACKTOP; //@line 15375
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 15379
 ___async_unwind = 0; //@line 15380
 HEAP32[$ReallocAsyncCtx >> 2] = 593; //@line 15381
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 15382
 HEAP32[$12 >> 2] = $2; //@line 15383
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 15384
 HEAP32[$13 >> 2] = $2; //@line 15385
 $14 = $ReallocAsyncCtx + 12 | 0; //@line 15386
 HEAP32[$14 >> 2] = $8; //@line 15387
 $15 = $ReallocAsyncCtx + 16 | 0; //@line 15388
 HEAP32[$15 >> 2] = $4; //@line 15389
 sp = STACKTOP; //@line 15390
 return;
}
function __ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$031 = 0.0, $10 = 0.0, $45 = 0.0, $6 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 828
 STACKTOP = STACKTOP + 16 | 0; //@line 829
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 829
 $vararg_buffer1 = sp + 8 | 0; //@line 830
 _mbed_tracef(16, 11020, 11195, sp); //@line 832
 switch ($1 | 0) {
 case 0:
  {
   $$0 = 1; //@line 835
   HEAP32[$vararg_buffer1 >> 2] = $$0; //@line 836
   _mbed_tracef(16, 11020, 11207, $vararg_buffer1); //@line 837
   STACKTOP = sp; //@line 838
   return $$0 | 0; //@line 838
  }
 case 1:
  {
   switch (HEAP32[$0 + 752 >> 2] | 0) {
   case 7:
    {
     $$031 = 125.0e3; //@line 846
     break;
    }
   case 8:
    {
     $$031 = 25.0e4; //@line 850
     break;
    }
   case 9:
    {
     $$031 = 5.0e5; //@line 854
     break;
    }
   default:
    {
     $$031 = 0.0; //@line 858
    }
   }
   $6 = HEAP32[$0 + 756 >> 2] | 0; //@line 862
   $10 = 1.0 / ($$031 / +(1 << $6 | 0)); //@line 866
   $45 = +Math_ceil(+(+(((($2 & 255) << 3) + 28 - ($6 << 2) + (HEAP8[$0 + 766 >> 0] << 4 & 255) + (HEAP8[$0 + 764 >> 0] | 0 ? -20 : 0) | 0) >>> 0) / +($6 - (HEAP8[$0 + 760 >> 0] | 0 ? 2 : 0) << 2 >>> 0))) * +((HEAPU8[$0 + 761 >> 0] | 0) + 4 | 0); //@line 902
   $$0 = ~~+Math_floor(+(((+(HEAPU16[$0 + 762 >> 1] | 0) + 4.25) * $10 + $10 * (($45 > 0.0 ? $45 : 0.0) + 8.0)) * 1.0e3 + .999)) >>> 0; //@line 912
   HEAP32[$vararg_buffer1 >> 2] = $$0; //@line 913
   _mbed_tracef(16, 11020, 11207, $vararg_buffer1); //@line 914
   STACKTOP = sp; //@line 915
   return $$0 | 0; //@line 915
  }
 default:
  {
   $$0 = 0; //@line 919
   HEAP32[$vararg_buffer1 >> 2] = $$0; //@line 920
   _mbed_tracef(16, 11020, 11207, $vararg_buffer1); //@line 921
   STACKTOP = sp; //@line 922
   return $$0 | 0; //@line 922
  }
 }
 return 0; //@line 925
}
function _main__async_cb_6($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18571
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18575
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18577
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(20684, 23828) | 0; //@line 18580
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(20684) | 0) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 18584
  _puts(15408) | 0; //@line 18585
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 660; //@line 18588
   sp = STACKTOP; //@line 18589
   return;
  }
  ___async_unwind = 0; //@line 18592
  HEAP32[$ReallocAsyncCtx7 >> 2] = 660; //@line 18593
  sp = STACKTOP; //@line 18594
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(20684, 5) | 0; //@line 18597
 HEAP8[$4 >> 0] = 0; //@line 18598
 HEAP32[$4 + 4 >> 2] = 24461; //@line 18600
 HEAP32[$4 + 8 >> 2] = 24469; //@line 18602
 HEAP32[$4 + 12 >> 2] = 24477; //@line 18604
 HEAP8[$4 + 16 >> 0] = 3; //@line 18606
 $15 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(20684, $4) | 0; //@line 18607
 switch ($15 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$6 >> 2] = $15; //@line 18613
   _printf(15442, $6) | 0; //@line 18614
   HEAP32[___async_retval >> 2] = -1; //@line 18616
   return;
  }
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 18620
 _puts(15471) | 0; //@line 18621
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 661; //@line 18624
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 18625
  HEAP32[$16 >> 2] = $4; //@line 18626
  sp = STACKTOP; //@line 18627
  return;
 }
 ___async_unwind = 0; //@line 18630
 HEAP32[$ReallocAsyncCtx6 >> 2] = 661; //@line 18631
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 18632
 HEAP32[$16 >> 2] = $4; //@line 18633
 sp = STACKTOP; //@line 18634
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_290($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 10317
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10321
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10323
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10325
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10327
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10329
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10331
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10333
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 10336
 HEAP32[$4 + 16 >> 2] = HEAP32[$6 >> 2]; //@line 10339
 _equeue_event_dtor($4, 270); //@line 10340
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 10341
 $20 = _equeue_post($8, 271, $4) | 0; //@line 10342
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 272; //@line 10345
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 10346
  HEAP32[$21 >> 2] = $10; //@line 10347
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 10348
  HEAP32[$22 >> 2] = $12; //@line 10349
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 10350
  HEAP32[$23 >> 2] = $14; //@line 10351
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 10352
  HEAP32[$24 >> 2] = $16; //@line 10353
  sp = STACKTOP; //@line 10354
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 10358
 ___async_unwind = 0; //@line 10359
 HEAP32[$ReallocAsyncCtx6 >> 2] = 272; //@line 10360
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 10361
 HEAP32[$21 >> 2] = $10; //@line 10362
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 10363
 HEAP32[$22 >> 2] = $12; //@line 10364
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 10365
 HEAP32[$23 >> 2] = $14; //@line 10366
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 10367
 HEAP32[$24 >> 2] = $16; //@line 10368
 sp = STACKTOP; //@line 10369
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_73($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23873
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23877
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23879
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23881
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23883
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23885
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23887
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23889
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23892
 HEAP16[$4 + 16 >> 1] = HEAP16[$6 >> 1] | 0; //@line 23895
 _equeue_event_dtor($4, 322); //@line 23896
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 23897
 $20 = _equeue_post($8, 323, $4) | 0; //@line 23898
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 324; //@line 23901
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 23902
  HEAP32[$21 >> 2] = $10; //@line 23903
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 23904
  HEAP32[$22 >> 2] = $12; //@line 23905
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 23906
  HEAP32[$23 >> 2] = $14; //@line 23907
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 23908
  HEAP32[$24 >> 2] = $16; //@line 23909
  sp = STACKTOP; //@line 23910
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 23914
 ___async_unwind = 0; //@line 23915
 HEAP32[$ReallocAsyncCtx6 >> 2] = 324; //@line 23916
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 23917
 HEAP32[$21 >> 2] = $10; //@line 23918
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 23919
 HEAP32[$22 >> 2] = $12; //@line 23920
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 23921
 HEAP32[$23 >> 2] = $14; //@line 23922
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 23923
 HEAP32[$24 >> 2] = $16; //@line 23924
 sp = STACKTOP; //@line 23925
 return;
}
function __ZL12send_messagev() {
 var $0 = 0, $3 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7572
 STACKTOP = STACKTOP + 80 | 0; //@line 7573
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 7573
 $vararg_buffer8 = sp + 24 | 0; //@line 7574
 $vararg_buffer5 = sp + 16 | 0; //@line 7575
 $vararg_buffer1 = sp + 8 | 0; //@line 7576
 $vararg_buffer = sp; //@line 7577
 $0 = sp + 28 | 0; //@line 7578
 dest = $0; //@line 7579
 stop = dest + 50 | 0; //@line 7579
 do {
  HEAP8[dest >> 0] = 0; //@line 7579
  dest = dest + 1 | 0; //@line 7579
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$vararg_buffer >> 3] = +__ZN5Sht3115readTemperatureEv(24460); //@line 7582
 _sprintf($0, 15867, $vararg_buffer) | 0; //@line 7583
 $3 = _strlen($0) | 0; //@line 7584
 HEAP32[$vararg_buffer1 >> 2] = $3; //@line 7585
 HEAP32[$vararg_buffer1 + 4 >> 2] = $0; //@line 7587
 _printf(15887, $vararg_buffer1) | 0; //@line 7588
 $5 = __ZN16LoRaWANInterface4sendEhPKhti(20684, 15, $0, $3 & 65535, 1) | 0; //@line 7590
 $6 = $5 << 16 >> 16; //@line 7591
 if ($5 << 16 >> 16 >= 0) {
  HEAP32[$vararg_buffer8 >> 2] = $6; //@line 7594
  _printf(15963, $vararg_buffer8) | 0; //@line 7595
  STACKTOP = sp; //@line 7596
  return;
 }
 if ($5 << 16 >> 16 != -1001) {
  HEAP32[$vararg_buffer5 >> 2] = $6; //@line 7600
  _printf(15939, $vararg_buffer5) | 0; //@line 7601
  STACKTOP = sp; //@line 7602
  return;
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7604
 _puts(15911) | 0; //@line 7605
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 663; //@line 7608
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7610
  sp = STACKTOP; //@line 7611
  STACKTOP = sp; //@line 7612
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7614
 STACKTOP = sp; //@line 7615
 return;
}
function _equeue_dealloc__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i = 0, $$02330$i = 0, $$025$i = 0, $$sink$in$i = 0, $$sink21$i = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $23 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11218
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11220
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11222
 $7 = $2 + 156 | 0; //@line 11223
 _equeue_mutex_lock($7); //@line 11224
 $8 = $2 + 24 | 0; //@line 11225
 $9 = HEAP32[$8 >> 2] | 0; //@line 11226
 L3 : do {
  if (!$9) {
   $$02329$i = $8; //@line 11230
  } else {
   $11 = HEAP32[$6 >> 2] | 0; //@line 11232
   $$025$i = $8; //@line 11233
   $13 = $9; //@line 11233
   while (1) {
    $12 = HEAP32[$13 >> 2] | 0; //@line 11235
    if ($12 >>> 0 >= $11 >>> 0) {
     break;
    }
    $15 = $13 + 8 | 0; //@line 11240
    $16 = HEAP32[$15 >> 2] | 0; //@line 11241
    if (!$16) {
     $$02329$i = $15; //@line 11244
     break L3;
    } else {
     $$025$i = $15; //@line 11247
     $13 = $16; //@line 11247
    }
   }
   if (($12 | 0) == ($11 | 0)) {
    HEAP32[$4 + -24 >> 2] = $13; //@line 11253
    $$02330$i = $$025$i; //@line 11256
    $$sink$in$i = (HEAP32[$$025$i >> 2] | 0) + 8 | 0; //@line 11256
    $$sink21$i = HEAP32[$$sink$in$i >> 2] | 0; //@line 11257
    $23 = $4 + -28 | 0; //@line 11258
    HEAP32[$23 >> 2] = $$sink21$i; //@line 11259
    HEAP32[$$02330$i >> 2] = $6; //@line 11260
    _equeue_mutex_unlock($7); //@line 11261
    return;
   } else {
    $$02329$i = $$025$i; //@line 11264
   }
  }
 } while (0);
 HEAP32[$4 + -24 >> 2] = 0; //@line 11269
 $$02330$i = $$02329$i; //@line 11270
 $$sink$in$i = $$02329$i; //@line 11270
 $$sink21$i = HEAP32[$$sink$in$i >> 2] | 0; //@line 11271
 $23 = $4 + -28 | 0; //@line 11272
 HEAP32[$23 >> 2] = $$sink21$i; //@line 11273
 HEAP32[$$02330$i >> 2] = $6; //@line 11274
 _equeue_mutex_unlock($7); //@line 11275
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $34 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5677
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5679
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5685
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5687
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 5690
 $14 = HEAP8[$0 + 25 >> 0] & 1; //@line 5693
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 5695
 $18 = HEAP8[$0 + 27 >> 0] | 0; //@line 5697
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 5699
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 5701
 $24 = HEAP32[$0 + 36 >> 2] | 0; //@line 5703
 $26 = HEAP32[$0 + 40 >> 2] | 0; //@line 5705
 $27 = HEAP32[$2 >> 2] | 0; //@line 5706
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + 32 >> 2] | 0; //@line 5709
 $34 = HEAP32[(HEAP32[$0 + 12 >> 2] | 0) + ((HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 5713
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 5714
 FUNCTION_TABLE_vii[$30 & 15]($27, $34); //@line 5715
 if (!___async) {
  ___async_unwind = 0; //@line 5718
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 525; //@line 5720
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 5722
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 5724
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 5726
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $12 & 1; //@line 5729
 HEAP8[$ReallocAsyncCtx2 + 17 >> 0] = $14 & 1; //@line 5732
 HEAP8[$ReallocAsyncCtx2 + 18 >> 0] = $16; //@line 5734
 HEAP8[$ReallocAsyncCtx2 + 19 >> 0] = $18; //@line 5736
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $20; //@line 5738
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $22; //@line 5740
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $24; //@line 5742
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $26; //@line 5744
 sp = STACKTOP; //@line 5745
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_413($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31240
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31244
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31246
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31248
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31250
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31252
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31254
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31256
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 31259
 HEAP8[$4 + 16 >> 0] = HEAP8[$6 >> 0] | 0; //@line 31262
 _equeue_event_dtor($4, 224); //@line 31263
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 31264
 $20 = _equeue_post($8, 225, $4) | 0; //@line 31265
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 226; //@line 31268
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 31269
  HEAP32[$21 >> 2] = $10; //@line 31270
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 31271
  HEAP32[$22 >> 2] = $12; //@line 31272
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 31273
  HEAP32[$23 >> 2] = $14; //@line 31274
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 31275
  HEAP32[$24 >> 2] = $16; //@line 31276
  sp = STACKTOP; //@line 31277
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 31281
 ___async_unwind = 0; //@line 31282
 HEAP32[$ReallocAsyncCtx6 >> 2] = 226; //@line 31283
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 31284
 HEAP32[$21 >> 2] = $10; //@line 31285
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 31286
 HEAP32[$22 >> 2] = $12; //@line 31287
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 31288
 HEAP32[$23 >> 2] = $14; //@line 31289
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 31290
 HEAP32[$24 >> 2] = $16; //@line 31291
 sp = STACKTOP; //@line 31292
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23214
 if (($1 | 0) == ($2 | 0)) {
  $21 = $1 + 16 | 0; //@line 23217
  HEAP32[$21 >> 2] = 0; //@line 23218
  return;
 }
 $4 = $1 + 12 | 0; //@line 23221
 $5 = HEAP32[$4 >> 2] | 0; //@line 23222
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 23227
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 23228
   FUNCTION_TABLE_vi[$8 & 1023]($1); //@line 23229
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 558; //@line 23232
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 23234
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 23236
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 23238
    sp = STACKTOP; //@line 23239
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 23242
    break;
   }
  }
 } while (0);
 $12 = $2 + 12 | 0; //@line 23247
 $13 = HEAP32[$12 >> 2] | 0; //@line 23248
 do {
  if (!$13) {
   $20 = 0; //@line 23252
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 23255
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 23256
   FUNCTION_TABLE_vii[$16 & 15]($1, $2); //@line 23257
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 559; //@line 23260
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 23262
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 23264
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 23266
    sp = STACKTOP; //@line 23267
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 23270
    $20 = HEAP32[$12 >> 2] | 0; //@line 23272
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $20; //@line 23277
 $21 = $1 + 16 | 0; //@line 23278
 HEAP32[$21 >> 2] = 0; //@line 23279
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_28($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20346
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20348
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20350
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20352
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 20354
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20356
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20358
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20360
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20362
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 20365
  $17 = _mbedtls_cipher_cmac_starts($2, $4, $6) | 0; //@line 20366
  if (!___async) {
   HEAP32[___async_retval >> 2] = $17; //@line 20370
   ___async_unwind = 0; //@line 20371
  }
  HEAP32[$ReallocAsyncCtx3 >> 2] = 505; //@line 20373
  HEAP16[$ReallocAsyncCtx3 + 4 >> 1] = $8; //@line 20375
  HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 20377
  HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $10; //@line 20379
  HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $12; //@line 20381
  HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $14; //@line 20383
  sp = STACKTOP; //@line 20384
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 20387
 _mbedtls_cipher_free($2); //@line 20388
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 20391
  $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 20392
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 20393
  sp = STACKTOP; //@line 20394
  return;
 }
 ___async_unwind = 0; //@line 20397
 HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 20398
 $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 20399
 HEAP32[$24 >> 2] = $AsyncRetVal; //@line 20400
 sp = STACKTOP; //@line 20401
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_397($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30070
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30072
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30074
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30076
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30078
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30080
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30082
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30084
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30086
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 30089
  $17 = _mbedtls_cipher_cmac_starts($6, $12, $14) | 0; //@line 30090
  if (!___async) {
   HEAP32[___async_retval >> 2] = $17; //@line 30094
   ___async_unwind = 0; //@line 30095
  }
  HEAP32[$ReallocAsyncCtx4 >> 2] = 499; //@line 30097
  HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 30099
  HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $6; //@line 30101
  HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $8; //@line 30103
  HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $10; //@line 30105
  HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $4; //@line 30107
  sp = STACKTOP; //@line 30108
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 30111
 _mbedtls_cipher_free($6); //@line 30112
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 503; //@line 30115
  $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 30116
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 30117
  sp = STACKTOP; //@line 30118
  return;
 }
 ___async_unwind = 0; //@line 30121
 HEAP32[$ReallocAsyncCtx6 >> 2] = 503; //@line 30122
 $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 30123
 HEAP32[$24 >> 2] = $AsyncRetVal; //@line 30124
 sp = STACKTOP; //@line 30125
 return;
}
function _mbedtls_cipher_cmac_starts($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3247
 if (!$0) {
  $$0 = -24832; //@line 3250
  return $$0 | 0; //@line 3251
 }
 if (($1 | 0) == 0 | (HEAP32[$0 >> 2] | 0) == 0) {
  $$0 = -24832; //@line 3258
  return $$0 | 0; //@line 3259
 }
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 3261
 $7 = _mbedtls_cipher_setkey($0, $1, $2, 1) | 0; //@line 3262
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 584; //@line 3265
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3267
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 3269
  sp = STACKTOP; //@line 3270
  return 0; //@line 3271
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3273
 if ($7 | 0) {
  $$0 = $7; //@line 3276
  return $$0 | 0; //@line 3277
 }
 switch (HEAP32[HEAP32[$0 >> 2] >> 2] | 0) {
 case 36:
 case 4:
 case 3:
 case 2:
  {
   break;
  }
 default:
  {
   $$0 = -24832; //@line 3286
   return $$0 | 0; //@line 3287
  }
 }
 $13 = _calloc(1, 36) | 0; //@line 3290
 if (!$13) {
  $$0 = -24960; //@line 3293
  return $$0 | 0; //@line 3294
 }
 HEAP32[$0 + 64 >> 2] = $13; //@line 3297
 HEAP8[$13 >> 0] = 0; //@line 3299
 HEAP8[$13 + 1 >> 0] = 0; //@line 3301
 HEAP8[$13 + 2 >> 0] = 0; //@line 3303
 HEAP8[$13 + 3 >> 0] = 0; //@line 3305
 HEAP8[$13 + 4 >> 0] = 0; //@line 3307
 HEAP8[$13 + 5 >> 0] = 0; //@line 3309
 HEAP8[$13 + 6 >> 0] = 0; //@line 3311
 HEAP8[$13 + 7 >> 0] = 0; //@line 3313
 HEAP8[$13 + 8 >> 0] = 0; //@line 3315
 HEAP8[$13 + 9 >> 0] = 0; //@line 3317
 HEAP8[$13 + 10 >> 0] = 0; //@line 3319
 HEAP8[$13 + 11 >> 0] = 0; //@line 3321
 HEAP8[$13 + 12 >> 0] = 0; //@line 3323
 HEAP8[$13 + 13 >> 0] = 0; //@line 3325
 HEAP8[$13 + 14 >> 0] = 0; //@line 3327
 HEAP8[$13 + 15 >> 0] = 0; //@line 3328
 $$0 = 0; //@line 3329
 return $$0 | 0; //@line 3330
}
function _mbedtls_ccm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $18 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1938
 $4 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 1939
 if (!$4) {
  $$0 = -13; //@line 1942
  return $$0 | 0; //@line 1943
 }
 if ((HEAP32[$4 + 24 >> 2] | 0) != 16) {
  $$0 = -13; //@line 1949
  return $$0 | 0; //@line 1950
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1952
 _mbedtls_cipher_free($0); //@line 1953
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 567; //@line 1956
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 1958
  HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 1960
  HEAP32[$AsyncCtx7 + 12 >> 2] = $2; //@line 1962
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 1964
  sp = STACKTOP; //@line 1965
  return 0; //@line 1966
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 1968
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 1969
 $13 = _mbedtls_cipher_setup($0, $4) | 0; //@line 1970
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 568; //@line 1973
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 1975
  HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 1977
  HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 1979
  sp = STACKTOP; //@line 1980
  return 0; //@line 1981
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 1983
 if ($13 | 0) {
  $$0 = $13; //@line 1986
  return $$0 | 0; //@line 1987
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1989
 $18 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 1990
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 569; //@line 1993
  sp = STACKTOP; //@line 1994
  return 0; //@line 1995
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1997
 $$0 = $18; //@line 1998
 return $$0 | 0; //@line 1999
}
function __ZN7LoRaMac15send_ongoing_txEv__async_cb($0) {
 $0 = $0 | 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31606
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31608
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31610
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31612
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31614
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31616
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 31620
  return;
 }
 HEAP8[$2 + 2047 >> 0] = 0; //@line 31624
 HEAP8[$2 + 2046 >> 0] = 0; //@line 31626
 HEAP32[$2 + 2052 >> 2] = HEAP32[$2 + 1760 >> 2]; //@line 31630
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 31631
 $16 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 31632
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 454; //@line 31635
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 31636
  HEAP32[$17 >> 2] = $4; //@line 31637
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 31638
  HEAP32[$18 >> 2] = $8; //@line 31639
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 31640
  HEAP32[$19 >> 2] = $2; //@line 31641
  $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 31642
  HEAP32[$20 >> 2] = $6; //@line 31643
  sp = STACKTOP; //@line 31644
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 31648
 ___async_unwind = 0; //@line 31649
 HEAP32[$ReallocAsyncCtx2 >> 2] = 454; //@line 31650
 $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 31651
 HEAP32[$17 >> 2] = $4; //@line 31652
 $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 31653
 HEAP32[$18 >> 2] = $8; //@line 31654
 $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 31655
 HEAP32[$19 >> 2] = $2; //@line 31656
 $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 31657
 HEAP32[$20 >> 2] = $6; //@line 31658
 sp = STACKTOP; //@line 31659
 return;
}
function __ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_407($0) {
 $0 = $0 | 0;
 var $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30613
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30615
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30617
 $7 = $2 + 1964 | 0; //@line 30620
 HEAP8[$7 >> 0] = HEAP8[$2 + 1182 >> 0] | 0; //@line 30621
 HEAP32[$2 + 1968 >> 2] = HEAP32[$2 + 1912 >> 2]; //@line 30625
 HEAP8[$2 + 1980 >> 0] = HEAP8[$2 + 1921 >> 0] | 0; //@line 30629
 HEAP8[$2 + 1981 >> 0] = HEAP8[$2 + 1173 >> 0] | 0; //@line 30633
 HEAP32[$2 + 1984 >> 2] = 1; //@line 30635
 $20 = $2 + 1982 | 0; //@line 30638
 HEAP8[$20 >> 0] = (HEAP32[$4 >> 2] | 0) == 2 & 1; //@line 30640
 HEAP8[$2 + 2010 >> 0] = HEAP8[$2 + 1965 >> 0] | 0; //@line 30644
 $25 = $2 + 4 | 0; //@line 30645
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 30646
 $26 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($25, $7) | 0; //@line 30647
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 458; //@line 30650
  $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 30651
  HEAP32[$27 >> 2] = $20; //@line 30652
  $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 30653
  HEAP32[$28 >> 2] = $2; //@line 30654
  $29 = $ReallocAsyncCtx4 + 12 | 0; //@line 30655
  HEAP32[$29 >> 2] = $25; //@line 30656
  sp = STACKTOP; //@line 30657
  return;
 }
 HEAP8[___async_retval >> 0] = $26 & 1; //@line 30662
 ___async_unwind = 0; //@line 30663
 HEAP32[$ReallocAsyncCtx4 >> 2] = 458; //@line 30664
 $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 30665
 HEAP32[$27 >> 2] = $20; //@line 30666
 $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 30667
 HEAP32[$28 >> 2] = $2; //@line 30668
 $29 = $ReallocAsyncCtx4 + 12 | 0; //@line 30669
 HEAP32[$29 >> 2] = $25; //@line 30670
 sp = STACKTOP; //@line 30671
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_16($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19205
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19209
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19211
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19213
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19215
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19217
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19219
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19221
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 19224
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 19225
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 19241
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 19242
    if (!___async) {
     ___async_unwind = 0; //@line 19245
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 718; //@line 19247
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 19249
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 19251
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 19253
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 19255
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 19257
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 19259
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 19261
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 19263
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 19266
    sp = STACKTOP; //@line 19267
    return;
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_267($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $29 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6158
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6160
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6162
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6164
 if (HEAP8[___async_retval >> 0] & 1) {
  $9 = (HEAP8[$2 >> 0] | 0) != 0; //@line 6170
  $11 = HEAP32[$4 + 1888 >> 2] | 0; //@line 6172
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 6173
  __ZN7LoRaPHY15setup_rx_windowEbj($6, $9, $11); //@line 6174
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 437; //@line 6177
   $12 = $ReallocAsyncCtx + 4 | 0; //@line 6178
   HEAP32[$12 >> 2] = $2; //@line 6179
   $13 = $ReallocAsyncCtx + 8 | 0; //@line 6180
   HEAP32[$13 >> 2] = $4; //@line 6181
   sp = STACKTOP; //@line 6182
   return;
  }
  ___async_unwind = 0; //@line 6185
  HEAP32[$ReallocAsyncCtx >> 2] = 437; //@line 6186
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 6187
  HEAP32[$12 >> 2] = $2; //@line 6188
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 6189
  HEAP32[$13 >> 2] = $4; //@line 6190
  sp = STACKTOP; //@line 6191
  return;
 }
 $14 = $4 + 2040 | 0; //@line 6194
 HEAP32[$14 >> 2] = 2; //@line 6195
 HEAP32[$4 + 2076 >> 2] = 2; //@line 6197
 __ZN14LoRaMacCommand20clear_command_bufferEv($4 + 476 | 0); //@line 6199
 HEAP8[$4 + 2047 >> 0] = HEAP8[$4 + 1699 >> 0] | 0; //@line 6203
 HEAP8[$4 + 2046 >> 0] = 0; //@line 6205
 HEAP32[$4 + 2048 >> 2] = 0; //@line 6207
 HEAP8[$4 + 1180 >> 0] = 0; //@line 6209
 HEAP32[$14 >> 2] = 0; //@line 6210
 if ((HEAP32[$4 + 2036 >> 2] | 0) == 1) {
  return;
 }
 if (HEAP8[$4 + 1174 >> 0] | 0) {
  return;
 }
 $29 = $4 + 1760 | 0; //@line 6223
 HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 1; //@line 6226
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_348($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14553
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14557
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14559
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14560
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 14564
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 14565
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 14566
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 345; //@line 14569
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 14570
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 14571
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 14572
   HEAP32[$11 >> 2] = $4; //@line 14573
   sp = STACKTOP; //@line 14574
   return;
  }
  ___async_unwind = 0; //@line 14577
  HEAP32[$ReallocAsyncCtx2 >> 2] = 345; //@line 14578
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 14579
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 14580
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 14581
  HEAP32[$11 >> 2] = $4; //@line 14582
  sp = STACKTOP; //@line 14583
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 14590
 _mbed_assert_internal(13121, 12408, 646); //@line 14591
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 346; //@line 14594
  $13 = $ReallocAsyncCtx6 + 4 | 0; //@line 14595
  HEAP32[$13 >> 2] = $4; //@line 14596
  sp = STACKTOP; //@line 14597
  return;
 }
 ___async_unwind = 0; //@line 14600
 HEAP32[$ReallocAsyncCtx6 >> 2] = 346; //@line 14601
 $13 = $ReallocAsyncCtx6 + 4 | 0; //@line 14602
 HEAP32[$13 >> 2] = $4; //@line 14603
 sp = STACKTOP; //@line 14604
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_225($0) {
 $0 = $0 | 0;
 var $$phi$trans$insert = 0, $$pre10 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 3049
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3053
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3055
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3057
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3059
 $$phi$trans$insert = (HEAP32[$0 + 4 >> 2] | 0) + 12 | 0; //@line 3060
 $$pre10 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 3061
 if (!$$pre10) {
  HEAP32[$4 >> 2] = 0; //@line 3064
  _gpio_irq_set($10 + 28 | 0, 2, 0); //@line 3066
  return;
 }
 $13 = HEAP32[$$pre10 + 4 >> 2] | 0; //@line 3070
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 3071
 FUNCTION_TABLE_vii[$13 & 15]($6, $8); //@line 3072
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 110; //@line 3075
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 3076
  HEAP32[$14 >> 2] = $$phi$trans$insert; //@line 3077
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 3078
  HEAP32[$15 >> 2] = $4; //@line 3079
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 3080
  HEAP32[$16 >> 2] = $8; //@line 3081
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 3082
  HEAP32[$17 >> 2] = $10; //@line 3083
  sp = STACKTOP; //@line 3084
  return;
 }
 ___async_unwind = 0; //@line 3087
 HEAP32[$ReallocAsyncCtx4 >> 2] = 110; //@line 3088
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 3089
 HEAP32[$14 >> 2] = $$phi$trans$insert; //@line 3090
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 3091
 HEAP32[$15 >> 2] = $4; //@line 3092
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 3093
 HEAP32[$16 >> 2] = $8; //@line 3094
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 3095
 HEAP32[$17 >> 2] = $10; //@line 3096
 sp = STACKTOP; //@line 3097
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_328($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12914
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12918
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12920
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 12921
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 12925
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 12926
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 12927
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 256; //@line 12930
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 12931
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 12932
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 12933
   HEAP32[$11 >> 2] = $4; //@line 12934
   sp = STACKTOP; //@line 12935
   return;
  }
  ___async_unwind = 0; //@line 12938
  HEAP32[$ReallocAsyncCtx2 >> 2] = 256; //@line 12939
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 12940
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 12941
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 12942
  HEAP32[$11 >> 2] = $4; //@line 12943
  sp = STACKTOP; //@line 12944
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 12951
 _mbed_assert_internal(13121, 12408, 646); //@line 12952
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 257; //@line 12955
  $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 12956
  HEAP32[$13 >> 2] = $4; //@line 12957
  sp = STACKTOP; //@line 12958
  return;
 }
 ___async_unwind = 0; //@line 12961
 HEAP32[$ReallocAsyncCtx12 >> 2] = 257; //@line 12962
 $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 12963
 HEAP32[$13 >> 2] = $4; //@line 12964
 sp = STACKTOP; //@line 12965
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_326($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 12695
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12699
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12701
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 12702
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 12706
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 12707
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 12708
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 264; //@line 12711
   $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 12712
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 12713
   $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 12714
   HEAP32[$11 >> 2] = $4; //@line 12715
   sp = STACKTOP; //@line 12716
   return;
  }
  ___async_unwind = 0; //@line 12719
  HEAP32[$ReallocAsyncCtx6 >> 2] = 264; //@line 12720
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 12721
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 12722
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 12723
  HEAP32[$11 >> 2] = $4; //@line 12724
  sp = STACKTOP; //@line 12725
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 12732
 _mbed_assert_internal(13121, 12408, 646); //@line 12733
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 265; //@line 12736
  $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 12737
  HEAP32[$13 >> 2] = $4; //@line 12738
  sp = STACKTOP; //@line 12739
  return;
 }
 ___async_unwind = 0; //@line 12742
 HEAP32[$ReallocAsyncCtx10 >> 2] = 265; //@line 12743
 $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 12744
 HEAP32[$13 >> 2] = $4; //@line 12745
 sp = STACKTOP; //@line 12746
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_307($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11662
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11666
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11668
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 11669
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 11673
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 11674
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 11675
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 244; //@line 11678
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 11679
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 11680
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 11681
   HEAP32[$11 >> 2] = $4; //@line 11682
   sp = STACKTOP; //@line 11683
   return;
  }
  ___async_unwind = 0; //@line 11686
  HEAP32[$ReallocAsyncCtx2 >> 2] = 244; //@line 11687
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 11688
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 11689
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 11690
  HEAP32[$11 >> 2] = $4; //@line 11691
  sp = STACKTOP; //@line 11692
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 11699
 _mbed_assert_internal(13121, 12408, 646); //@line 11700
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 245; //@line 11703
  $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 11704
  HEAP32[$13 >> 2] = $4; //@line 11705
  sp = STACKTOP; //@line 11706
  return;
 }
 ___async_unwind = 0; //@line 11709
 HEAP32[$ReallocAsyncCtx12 >> 2] = 245; //@line 11710
 $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 11711
 HEAP32[$13 >> 2] = $4; //@line 11712
 sp = STACKTOP; //@line 11713
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_306($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 11605
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11609
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11611
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 11612
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 11616
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 11617
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 11618
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 248; //@line 11621
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 11622
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 11623
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 11624
   HEAP32[$11 >> 2] = $4; //@line 11625
   sp = STACKTOP; //@line 11626
   return;
  }
  ___async_unwind = 0; //@line 11629
  HEAP32[$ReallocAsyncCtx4 >> 2] = 248; //@line 11630
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 11631
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 11632
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 11633
  HEAP32[$11 >> 2] = $4; //@line 11634
  sp = STACKTOP; //@line 11635
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 11642
 _mbed_assert_internal(13121, 12408, 646); //@line 11643
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 249; //@line 11646
  $13 = $ReallocAsyncCtx11 + 4 | 0; //@line 11647
  HEAP32[$13 >> 2] = $4; //@line 11648
  sp = STACKTOP; //@line 11649
  return;
 }
 ___async_unwind = 0; //@line 11652
 HEAP32[$ReallocAsyncCtx11 >> 2] = 249; //@line 11653
 $13 = $ReallocAsyncCtx11 + 4 | 0; //@line 11654
 HEAP32[$13 >> 2] = $4; //@line 11655
 sp = STACKTOP; //@line 11656
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_305($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11548
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11552
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11554
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 11555
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 11559
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 11560
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 11561
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 252; //@line 11564
   $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 11565
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 11566
   $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 11567
   HEAP32[$11 >> 2] = $4; //@line 11568
   sp = STACKTOP; //@line 11569
   return;
  }
  ___async_unwind = 0; //@line 11572
  HEAP32[$ReallocAsyncCtx6 >> 2] = 252; //@line 11573
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 11574
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 11575
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 11576
  HEAP32[$11 >> 2] = $4; //@line 11577
  sp = STACKTOP; //@line 11578
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 11585
 _mbed_assert_internal(13121, 12408, 646); //@line 11586
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 253; //@line 11589
  $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 11590
  HEAP32[$13 >> 2] = $4; //@line 11591
  sp = STACKTOP; //@line 11592
  return;
 }
 ___async_unwind = 0; //@line 11595
 HEAP32[$ReallocAsyncCtx10 >> 2] = 253; //@line 11596
 $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 11597
 HEAP32[$13 >> 2] = $4; //@line 11598
 sp = STACKTOP; //@line 11599
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_98($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25069
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25073
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25075
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25076
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 25080
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 25081
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 25082
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 316; //@line 25085
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 25086
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 25087
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 25088
   HEAP32[$11 >> 2] = $4; //@line 25089
   sp = STACKTOP; //@line 25090
   return;
  }
  ___async_unwind = 0; //@line 25093
  HEAP32[$ReallocAsyncCtx2 >> 2] = 316; //@line 25094
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 25095
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 25096
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 25097
  HEAP32[$11 >> 2] = $4; //@line 25098
  sp = STACKTOP; //@line 25099
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 25106
 _mbed_assert_internal(13121, 12408, 646); //@line 25107
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 317; //@line 25110
  $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 25111
  HEAP32[$13 >> 2] = $4; //@line 25112
  sp = STACKTOP; //@line 25113
  return;
 }
 ___async_unwind = 0; //@line 25116
 HEAP32[$ReallocAsyncCtx4 >> 2] = 317; //@line 25117
 $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 25118
 HEAP32[$13 >> 2] = $4; //@line 25119
 sp = STACKTOP; //@line 25120
 return;
}
function __ZN12LoRaWANStack20process_transmissionEv__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $16 = 0, $21 = 0, $22 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28053
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28059
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28061
 _mbed_tracef(16, 12506, 12810, HEAP32[$0 + 4 >> 2] | 0); //@line 28062
 $9 = $6 + 2480 | 0; //@line 28063
 switch (HEAP32[$9 >> 2] | 0) {
 case 1:
  {
   HEAP32[$9 >> 2] = 4; //@line 28067
   return;
  }
 case 8:
  {
   $13 = (HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($8) | 0) >> 2] | 0) == 1; //@line 28074
   $14 = $6 + 2872 | 0; //@line 28075
   $16 = HEAP32[$14 >> 2] & -18; //@line 28077
   if ($13) {
    HEAP32[$14 >> 2] = $16 | 1; //@line 28080
    HEAP32[$9 >> 2] = 9; //@line 28081
    return;
   }
   HEAP32[$14 >> 2] = $16 | 16; //@line 28085
   if ((__ZNK7LoRaMac16get_device_classEv($8) | 0) != 2) {
    return;
   }
   __ZN7LoRaMac21post_process_mcps_reqEv($8); //@line 28091
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 28092
   __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 28093
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 336; //@line 28096
    $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 28097
    HEAP32[$21 >> 2] = $8; //@line 28098
    $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 28099
    HEAP32[$22 >> 2] = $9; //@line 28100
    sp = STACKTOP; //@line 28101
    return;
   }
   ___async_unwind = 0; //@line 28104
   HEAP32[$ReallocAsyncCtx2 >> 2] = 336; //@line 28105
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 28106
   HEAP32[$21 >> 2] = $8; //@line 28107
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 28108
   HEAP32[$22 >> 2] = $9; //@line 28109
   sp = STACKTOP; //@line 28110
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_85($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 24659
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24661
 $3 = $2 + 1176 | 0; //@line 24662
 HEAP32[$3 >> 2] = 10224; //@line 24663
 __ZN4mbed6Ticker6detachEv($3); //@line 24664
 $5 = HEAP32[$2 + 1228 >> 2] | 0; //@line 24666
 if (!$5) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 24669
  __ZN4mbed10TimerEventD2Ev($3); //@line 24670
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 72; //@line 24673
   $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 24674
   HEAP32[$12 >> 2] = $2; //@line 24675
   sp = STACKTOP; //@line 24676
   return;
  }
  ___async_unwind = 0; //@line 24679
  HEAP32[$ReallocAsyncCtx7 >> 2] = 72; //@line 24680
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 24681
  HEAP32[$12 >> 2] = $2; //@line 24682
  sp = STACKTOP; //@line 24683
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 24688
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 24689
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1216 | 0); //@line 24690
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 71; //@line 24693
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 24694
   HEAP32[$10 >> 2] = $3; //@line 24695
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 24696
   HEAP32[$11 >> 2] = $2; //@line 24697
   sp = STACKTOP; //@line 24698
   return;
  }
  ___async_unwind = 0; //@line 24701
  HEAP32[$ReallocAsyncCtx2 >> 2] = 71; //@line 24702
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 24703
  HEAP32[$10 >> 2] = $3; //@line 24704
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 24705
  HEAP32[$11 >> 2] = $2; //@line 24706
  sp = STACKTOP; //@line 24707
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_84($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24604
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24606
 $3 = $2 + 1112 | 0; //@line 24607
 HEAP32[$3 >> 2] = 10224; //@line 24608
 __ZN4mbed6Ticker6detachEv($3); //@line 24609
 $5 = HEAP32[$2 + 1164 >> 2] | 0; //@line 24611
 if (!$5) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 24614
  __ZN4mbed10TimerEventD2Ev($3); //@line 24615
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 74; //@line 24618
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 24619
   HEAP32[$12 >> 2] = $2; //@line 24620
   sp = STACKTOP; //@line 24621
   return;
  }
  ___async_unwind = 0; //@line 24624
  HEAP32[$ReallocAsyncCtx6 >> 2] = 74; //@line 24625
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 24626
  HEAP32[$12 >> 2] = $2; //@line 24627
  sp = STACKTOP; //@line 24628
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 24633
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 24634
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1152 | 0); //@line 24635
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 73; //@line 24638
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 24639
   HEAP32[$10 >> 2] = $2; //@line 24640
   $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 24641
   HEAP32[$11 >> 2] = $3; //@line 24642
   sp = STACKTOP; //@line 24643
   return;
  }
  ___async_unwind = 0; //@line 24646
  HEAP32[$ReallocAsyncCtx3 >> 2] = 73; //@line 24647
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 24648
  HEAP32[$10 >> 2] = $2; //@line 24649
  $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 24650
  HEAP32[$11 >> 2] = $3; //@line 24651
  sp = STACKTOP; //@line 24652
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_83($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24549
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24551
 $3 = $2 + 1048 | 0; //@line 24552
 HEAP32[$3 >> 2] = 10224; //@line 24553
 __ZN4mbed6Ticker6detachEv($3); //@line 24554
 $5 = HEAP32[$2 + 1100 >> 2] | 0; //@line 24556
 if (!$5) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 24559
  __ZN4mbed10TimerEventD2Ev($3); //@line 24560
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 76; //@line 24563
   $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 24564
   HEAP32[$12 >> 2] = $2; //@line 24565
   sp = STACKTOP; //@line 24566
   return;
  }
  ___async_unwind = 0; //@line 24569
  HEAP32[$ReallocAsyncCtx5 >> 2] = 76; //@line 24570
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 24571
  HEAP32[$12 >> 2] = $2; //@line 24572
  sp = STACKTOP; //@line 24573
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 24578
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 24579
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1088 | 0); //@line 24580
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 75; //@line 24583
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 24584
   HEAP32[$10 >> 2] = $3; //@line 24585
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 24586
   HEAP32[$11 >> 2] = $2; //@line 24587
   sp = STACKTOP; //@line 24588
   return;
  }
  ___async_unwind = 0; //@line 24591
  HEAP32[$ReallocAsyncCtx4 >> 2] = 75; //@line 24592
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 24593
  HEAP32[$10 >> 2] = $3; //@line 24594
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 24595
  HEAP32[$11 >> 2] = $2; //@line 24596
  sp = STACKTOP; //@line 24597
  return;
 }
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $19 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12308
 $1 = $0 + 1699 | 0; //@line 12309
 $3 = (HEAP8[$1 >> 0] | 0) + 1 << 24 >> 24; //@line 12311
 HEAP8[$1 >> 0] = $3; //@line 12312
 if ($3 & 1) {
  $7 = $0 + 1877 | 0; //@line 12317
  HEAP8[$7 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa($0 + 4 | 0, HEAP8[$7 >> 0] | 0) | 0; //@line 12320
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12322
 $10 = __ZN7LoRaMac21handle_retransmissionEv($0) | 0; //@line 12323
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 381; //@line 12326
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12328
  HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 12330
  sp = STACKTOP; //@line 12331
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12334
 if (!$10) {
  return;
 }
 __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 476 | 0); //@line 12340
 HEAP8[$0 + 1177 >> 0] = 0; //@line 12342
 HEAP8[$0 + 2046 >> 0] = 0; //@line 12344
 HEAP8[$0 + 2047 >> 0] = HEAP8[$1 >> 0] | 0; //@line 12347
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12348
 $19 = __ZN7LoRaMac21handle_retransmissionEv($0) | 0; //@line 12349
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 382; //@line 12352
  sp = STACKTOP; //@line 12353
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12356
 if (!$19) {
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 12361
 _mbed_assert_internal(13237, 13130, 950); //@line 12362
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 383; //@line 12365
  sp = STACKTOP; //@line 12366
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12369
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_268($0) {
 $0 = $0 | 0;
 var $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6233
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6235
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6237
 $7 = $2 + 1964 | 0; //@line 6240
 HEAP8[$7 >> 0] = HEAP8[$2 + 1182 >> 0] | 0; //@line 6241
 HEAP32[$2 + 1968 >> 2] = HEAP32[$2 + 1912 >> 2]; //@line 6245
 HEAP8[$2 + 1980 >> 0] = HEAP8[$2 + 1921 >> 0] | 0; //@line 6249
 HEAP8[$2 + 1981 >> 0] = HEAP8[$2 + 1173 >> 0] | 0; //@line 6253
 HEAP32[$2 + 1984 >> 2] = 1; //@line 6255
 $20 = $2 + 1982 | 0; //@line 6258
 HEAP8[$20 >> 0] = (HEAP32[$4 >> 2] | 0) == 2 & 1; //@line 6260
 HEAP8[$2 + 2010 >> 0] = HEAP8[$2 + 1965 >> 0] | 0; //@line 6264
 $25 = $2 + 4 | 0; //@line 6265
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 6266
 $26 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($25, $7) | 0; //@line 6267
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 436; //@line 6270
  $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 6271
  HEAP32[$27 >> 2] = $20; //@line 6272
  $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 6273
  HEAP32[$28 >> 2] = $2; //@line 6274
  $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 6275
  HEAP32[$29 >> 2] = $25; //@line 6276
  sp = STACKTOP; //@line 6277
  return;
 }
 HEAP8[___async_retval >> 0] = $26 & 1; //@line 6282
 ___async_unwind = 0; //@line 6283
 HEAP32[$ReallocAsyncCtx3 >> 2] = 436; //@line 6284
 $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 6285
 HEAP32[$27 >> 2] = $20; //@line 6286
 $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 6287
 HEAP32[$28 >> 2] = $2; //@line 6288
 $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 6289
 HEAP32[$29 >> 2] = $25; //@line 6290
 sp = STACKTOP; //@line 6291
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb_283($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9710
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9712
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9714
 $AsyncRetVal = HEAP16[___async_retval >> 1] | 0; //@line 9716
 $6 = $2 + 2480 | 0; //@line 9717
 switch (HEAP32[$6 >> 2] | 0) {
 case 5:
 case 2:
  {
   break;
  }
 default:
  {
   if ((__ZNK7LoRaMac16get_device_classEv($4) | 0) != 2) {
    HEAP16[___async_retval >> 1] = -1e3 == 0 ? $AsyncRetVal : -1e3 & 65535; //@line 9731
    return;
   }
  }
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 9736
 $10 = __ZN7LoRaMac15send_ongoing_txEv($4) | 0; //@line 9737
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 362; //@line 9740
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 9741
  HEAP32[$11 >> 2] = $2; //@line 9742
  $12 = $ReallocAsyncCtx + 8 | 0; //@line 9743
  HEAP32[$12 >> 2] = $4; //@line 9744
  $13 = $ReallocAsyncCtx + 12 | 0; //@line 9745
  HEAP32[$13 >> 2] = $6; //@line 9746
  $14 = $ReallocAsyncCtx + 16 | 0; //@line 9747
  HEAP16[$14 >> 1] = $AsyncRetVal; //@line 9748
  sp = STACKTOP; //@line 9749
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 9753
 ___async_unwind = 0; //@line 9754
 HEAP32[$ReallocAsyncCtx >> 2] = 362; //@line 9755
 $11 = $ReallocAsyncCtx + 4 | 0; //@line 9756
 HEAP32[$11 >> 2] = $2; //@line 9757
 $12 = $ReallocAsyncCtx + 8 | 0; //@line 9758
 HEAP32[$12 >> 2] = $4; //@line 9759
 $13 = $ReallocAsyncCtx + 12 | 0; //@line 9760
 HEAP32[$13 >> 2] = $6; //@line 9761
 $14 = $ReallocAsyncCtx + 16 | 0; //@line 9762
 HEAP16[$14 >> 1] = $AsyncRetVal; //@line 9763
 sp = STACKTOP; //@line 9764
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_263($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 5952
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5954
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5958
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5960
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5962
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5964
 $13 = HEAP32[$2 >> 2] | 0; //@line 5965
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 52 >> 2] | 0; //@line 5968
 $18 = HEAP16[HEAP32[$0 + 8 >> 2] >> 1] & 255; //@line 5970
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 5971
 $19 = FUNCTION_TABLE_iiii[$16 & 31]($13, $6, $18) | 0; //@line 5972
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 529; //@line 5975
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 5976
  HEAP32[$20 >> 2] = $8; //@line 5977
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 5978
  HEAP32[$21 >> 2] = $2; //@line 5979
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 5980
  HEAP32[$22 >> 2] = $10; //@line 5981
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 5982
  HEAP32[$23 >> 2] = $12; //@line 5983
  sp = STACKTOP; //@line 5984
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 5988
 ___async_unwind = 0; //@line 5989
 HEAP32[$ReallocAsyncCtx6 >> 2] = 529; //@line 5990
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 5991
 HEAP32[$20 >> 2] = $8; //@line 5992
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 5993
 HEAP32[$21 >> 2] = $2; //@line 5994
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 5995
 HEAP32[$22 >> 2] = $10; //@line 5996
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 5997
 HEAP32[$23 >> 2] = $12; //@line 5998
 sp = STACKTOP; //@line 5999
 return;
}
function __ZN12LoRaWANStack7connectEv($0) {
 $0 = $0 | 0;
 var $$1 = 0, $10 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 11002
 STACKTOP = STACKTOP + 32 | 0; //@line 11003
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11003
 $vararg_buffer3 = sp + 16 | 0; //@line 11004
 if (!(HEAP32[$0 + 2480 >> 2] | 0)) {
  _mbed_tracef(2, 12506, 12856, sp); //@line 11011
  $$1 = -1012; //@line 11012
  STACKTOP = sp; //@line 11013
  return $$1 | 0; //@line 11013
 }
 $4 = __ZN7LoRaMac12prepare_joinEPK15lorawan_connectb($0, 0, 0) | 0; //@line 11015
 if ($4 | 0) {
  $$1 = $4; //@line 11018
  STACKTOP = sp; //@line 11019
  return $$1 | 0; //@line 11019
 }
 _mbed_tracef(16, 12506, 12916, sp + 8 | 0); //@line 11021
 $9 = HEAP32[$0 + 2540 >> 2] | 0; //@line 11025
 HEAP32[$vararg_buffer3 >> 2] = HEAP32[$0 + 2536 >> 2]; //@line 11026
 HEAP32[$vararg_buffer3 + 4 >> 2] = $9; //@line 11028
 _mbed_tracef(16, 12506, 12931, $vararg_buffer3); //@line 11029
 $10 = $0 + 2872 | 0; //@line 11030
 HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -9; //@line 11033
 HEAP32[$vararg_buffer3 >> 2] = 0; //@line 11034
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 11035
 __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status($0, $vararg_buffer3); //@line 11036
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 356; //@line 11039
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer3; //@line 11041
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 11043
  sp = STACKTOP; //@line 11044
  STACKTOP = sp; //@line 11045
  return 0; //@line 11045
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11047
 $$1 = HEAP32[$vararg_buffer3 >> 2] | 0; //@line 11049
 STACKTOP = sp; //@line 11050
 return $$1 | 0; //@line 11050
}
function __ZN7LoRaMac15open_rx2_windowEv__async_cb_54($0) {
 $0 = $0 | 0;
 var $19 = 0, $2 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22360
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22362
 $5 = $2 + 1964 | 0; //@line 22365
 HEAP8[$5 >> 0] = HEAP8[$2 + 1182 >> 0] | 0; //@line 22366
 HEAP32[$2 + 1968 >> 2] = HEAP32[$2 + 1912 >> 2]; //@line 22370
 HEAP8[$2 + 1980 >> 0] = HEAP8[$2 + 1921 >> 0] | 0; //@line 22374
 HEAP8[$2 + 1981 >> 0] = HEAP8[$2 + 1173 >> 0] | 0; //@line 22378
 HEAP32[$2 + 1984 >> 2] = 1; //@line 22380
 $19 = $2 + 1982 | 0; //@line 22384
 HEAP8[$19 >> 0] = (HEAP32[$2 + 2364 >> 2] | 0) == 2 & 1; //@line 22386
 HEAP8[$2 + 2010 >> 0] = HEAP8[$2 + 1965 >> 0] | 0; //@line 22390
 $24 = $2 + 4 | 0; //@line 22391
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 22392
 $25 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($24, $5) | 0; //@line 22393
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 379; //@line 22396
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 22397
  HEAP32[$26 >> 2] = $19; //@line 22398
  $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 22399
  HEAP32[$27 >> 2] = $2; //@line 22400
  $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 22401
  HEAP32[$28 >> 2] = $24; //@line 22402
  sp = STACKTOP; //@line 22403
  return;
 }
 HEAP8[___async_retval >> 0] = $25 & 1; //@line 22408
 ___async_unwind = 0; //@line 22409
 HEAP32[$ReallocAsyncCtx2 >> 2] = 379; //@line 22410
 $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 22411
 HEAP32[$26 >> 2] = $19; //@line 22412
 $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 22413
 HEAP32[$27 >> 2] = $2; //@line 22414
 $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 22415
 HEAP32[$28 >> 2] = $24; //@line 22416
 sp = STACKTOP; //@line 22417
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_396($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30012
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30014
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30016
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30018
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30020
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30022
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30024
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 30027
  $13 = _mbedtls_cipher_cmac_update($4, $2, 16) | 0; //@line 30028
  if (!___async) {
   HEAP32[___async_retval >> 2] = $13; //@line 30032
   ___async_unwind = 0; //@line 30033
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 500; //@line 30035
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 30037
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 30039
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 30041
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $2; //@line 30043
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 30045
  sp = STACKTOP; //@line 30046
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 30049
 _mbedtls_cipher_free($4); //@line 30050
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 503; //@line 30053
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 30054
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 30055
  sp = STACKTOP; //@line 30056
  return;
 }
 ___async_unwind = 0; //@line 30059
 HEAP32[$ReallocAsyncCtx6 >> 2] = 503; //@line 30060
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 30061
 HEAP32[$20 >> 2] = $AsyncRetVal; //@line 30062
 sp = STACKTOP; //@line 30063
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_218($0) {
 $0 = $0 | 0;
 var $$07$i = 0, $12 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 2717
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2719
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2721
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2725
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2729
 dest = $2; //@line 2732
 stop = dest + 50 | 0; //@line 2732
 do {
  HEAP8[dest >> 0] = 0; //@line 2732
  dest = dest + 1 | 0; //@line 2732
 } while ((dest | 0) < (stop | 0));
 $15 = __ZN16LoRaWANInterface7receiveEhPhti(20684, 15, $2, 50, 3) | 0; //@line 2733
 $16 = $15 << 16 >> 16; //@line 2734
 if ($15 << 16 >> 16 < 0) {
  HEAP32[$4 >> 2] = $16; //@line 2737
  _printf(15656, $4) | 0; //@line 2738
  return;
 }
 HEAP32[$8 >> 2] = 15; //@line 2741
 HEAP32[$8 + 4 >> 2] = $16; //@line 2743
 _printf(15683, $8) | 0; //@line 2744
 if ($15 << 16 >> 16) {
  $$07$i = 0; //@line 2747
  $21 = 0; //@line 2747
  do {
   HEAP32[$12 >> 2] = HEAPU8[$2 + $21 >> 0]; //@line 2752
   _printf(15722, $12) | 0; //@line 2753
   $$07$i = $$07$i + 1 << 24 >> 24; //@line 2754
   $21 = $$07$i & 255; //@line 2755
  } while (($21 | 0) < ($16 | 0));
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 2764
 _putchar(10) | 0; //@line 2765
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 672; //@line 2768
  $19 = $ReallocAsyncCtx + 4 | 0; //@line 2769
  HEAP32[$19 >> 2] = $2; //@line 2770
  sp = STACKTOP; //@line 2771
  return;
 }
 ___async_unwind = 0; //@line 2774
 HEAP32[$ReallocAsyncCtx >> 2] = 672; //@line 2775
 $19 = $ReallocAsyncCtx + 4 | 0; //@line 2776
 HEAP32[$19 >> 2] = $2; //@line 2777
 sp = STACKTOP; //@line 2778
 return;
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11675
 STACKTOP = STACKTOP + 16 | 0; //@line 11676
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11676
 $2 = sp; //@line 11677
 $3 = $1 & 255; //@line 11678
 HEAP8[$2 >> 0] = $3; //@line 11679
 $4 = $0 + 16 | 0; //@line 11680
 $5 = HEAP32[$4 >> 2] | 0; //@line 11681
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 11688
   label = 4; //@line 11689
  } else {
   $$0 = -1; //@line 11691
  }
 } else {
  $12 = $5; //@line 11694
  label = 4; //@line 11695
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 11699
   $10 = HEAP32[$9 >> 2] | 0; //@line 11700
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 11703
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 11710
     HEAP8[$10 >> 0] = $3; //@line 11711
     $$0 = $13; //@line 11712
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 11717
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11718
   $21 = FUNCTION_TABLE_iiii[$20 & 31]($0, $2, 1) | 0; //@line 11719
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 682; //@line 11722
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 11724
    sp = STACKTOP; //@line 11725
    STACKTOP = sp; //@line 11726
    return 0; //@line 11726
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 11728
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 11733
   } else {
    $$0 = -1; //@line 11735
   }
  }
 } while (0);
 STACKTOP = sp; //@line 11739
 return $$0 | 0; //@line 11739
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_269($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 6297
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6299
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6301
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6303
 $7 = $2 + 2364 | 0; //@line 6304
 if ((HEAP32[$7 >> 2] | 0) == 2) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 6308
  __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $6); //@line 6309
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 435; //@line 6312
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 6313
   HEAP32[$10 >> 2] = $2; //@line 6314
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 6315
   HEAP32[$11 >> 2] = $7; //@line 6316
   sp = STACKTOP; //@line 6317
   return;
  }
  ___async_unwind = 0; //@line 6320
  HEAP32[$ReallocAsyncCtx4 >> 2] = 435; //@line 6321
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 6322
  HEAP32[$10 >> 2] = $2; //@line 6323
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 6324
  HEAP32[$11 >> 2] = $7; //@line 6325
  sp = STACKTOP; //@line 6326
  return;
 } else {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 6330
  __ZN7LoRaPHY18put_radio_to_sleepEv($2 + 4 | 0); //@line 6331
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 438; //@line 6334
   $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 6335
   HEAP32[$13 >> 2] = $2; //@line 6336
   sp = STACKTOP; //@line 6337
   return;
  }
  ___async_unwind = 0; //@line 6340
  HEAP32[$ReallocAsyncCtx2 >> 2] = 438; //@line 6341
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 6342
  HEAP32[$13 >> 2] = $2; //@line 6343
  sp = STACKTOP; //@line 6344
  return;
 }
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_156($0) {
 $0 = $0 | 0;
 var $$0$off0 = 0, $$0$off0$expand_i1_val = 0, $10 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30084
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30092
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30094
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30096
 if ((HEAP32[___async_retval >> 2] | 0) < (HEAP32[$0 + 4 >> 2] | 0)) {
  _mbed_tracef(16, 11020, 11186, HEAP32[$0 + 8 >> 2] | 0); //@line 30101
  $$0$off0 = 0; //@line 30102
 } else {
  $$0$off0 = 1; //@line 30104
 }
 $17 = HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] | 0; //@line 30108
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 30109
 FUNCTION_TABLE_vi[$17 & 1023]($8); //@line 30110
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 66; //@line 30113
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 30114
  HEAP32[$18 >> 2] = $10; //@line 30115
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 30116
  HEAP32[$19 >> 2] = $12; //@line 30117
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 30118
  $$0$off0$expand_i1_val = $$0$off0 & 1; //@line 30119
  HEAP8[$20 >> 0] = $$0$off0$expand_i1_val; //@line 30120
  sp = STACKTOP; //@line 30121
  return;
 }
 ___async_unwind = 0; //@line 30124
 HEAP32[$ReallocAsyncCtx2 >> 2] = 66; //@line 30125
 $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 30126
 HEAP32[$18 >> 2] = $10; //@line 30127
 $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 30128
 HEAP32[$19 >> 2] = $12; //@line 30129
 $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 30130
 $$0$off0$expand_i1_val = $$0$off0 & 1; //@line 30131
 HEAP8[$20 >> 0] = $$0$off0$expand_i1_val; //@line 30132
 sp = STACKTOP; //@line 30133
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6522
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6524
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6526
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6528
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6530
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6532
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6534
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6536
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6538
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6540
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6542
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6544
 $25 = $4 + 1280 | 0; //@line 6545
 HEAP32[$25 >> 2] = 0; //@line 6546
 HEAP32[$25 + 4 >> 2] = 0; //@line 6546
 HEAP32[$25 + 8 >> 2] = 0; //@line 6546
 HEAP32[$25 + 12 >> 2] = 0; //@line 6546
 HEAP8[$4 + 1296 >> 0] = 1; //@line 6548
 HEAP32[$2 >> 2] = 620; //@line 6549
 HEAP32[$4 + 668 >> 2] = $6; //@line 6551
 HEAP32[$4 + 672 >> 2] = $8; //@line 6553
 HEAP32[$4 + 652 >> 2] = $10; //@line 6555
 HEAP32[$4 + 656 >> 2] = $12; //@line 6557
 HEAP32[$4 + 664 >> 2] = $14; //@line 6559
 HEAP32[$4 + 660 >> 2] = $16; //@line 6561
 HEAP32[$4 + 676 >> 2] = $18; //@line 6563
 HEAP32[$4 + 680 >> 2] = $20; //@line 6565
 HEAP32[$4 + 684 >> 2] = $22; //@line 6567
 HEAP32[$4 + 788 >> 2] = 0; //@line 6569
 if (($18 | 0) == -1) {
  $39 = _emscripten_asm_const_ii(7, $4 | 0) | 0; //@line 6572
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$24 >> 2] | 0, 1) | 0; //@line 6576
 $39 = _emscripten_asm_const_ii(7, $4 | 0) | 0; //@line 6577
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22405
 $1 = $0 + 4 | 0; //@line 22406
 $2 = HEAP32[$1 >> 2] | 0; //@line 22407
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 22410
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 22411
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 22412
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 551; //@line 22415
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 22417
  sp = STACKTOP; //@line 22418
  return 0; //@line 22419
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22421
 $7 = HEAP32[$1 >> 2] | 0; //@line 22422
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 22425
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22426
 $11 = FUNCTION_TABLE_ii[$10 & 15]($7) | 0; //@line 22427
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 552; //@line 22430
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 22432
  sp = STACKTOP; //@line 22433
  return 0; //@line 22434
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22436
 $13 = HEAP32[$1 >> 2] | 0; //@line 22437
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 76 >> 2] | 0; //@line 22440
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22441
 FUNCTION_TABLE_vi[$16 & 1023]($13); //@line 22442
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 553; //@line 22445
  HEAP32[$AsyncCtx5 + 4 >> 2] = $11; //@line 22447
  sp = STACKTOP; //@line 22448
  return 0; //@line 22449
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22451
  return $11 | 0; //@line 22452
 }
 return 0; //@line 22454
}
function __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18826
 $2 = $0 + 260 | 0; //@line 18827
 if (($2 | 0) == ($1 | 0)) {
  return;
 }
 $4 = $0 + 272 | 0; //@line 18832
 $5 = HEAP32[$4 >> 2] | 0; //@line 18833
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 18838
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 18839
   FUNCTION_TABLE_vi[$8 & 1023]($2); //@line 18840
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 496; //@line 18843
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 18845
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 18847
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 18849
    sp = STACKTOP; //@line 18850
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 18853
    break;
   }
  }
 } while (0);
 $12 = $1 + 12 | 0; //@line 18858
 $13 = HEAP32[$12 >> 2] | 0; //@line 18859
 do {
  if (!$13) {
   $19 = 0; //@line 18863
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 18866
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18867
   FUNCTION_TABLE_vii[$16 & 15]($2, $1); //@line 18868
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 497; //@line 18871
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 18873
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 18875
    sp = STACKTOP; //@line 18876
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18879
    $19 = HEAP32[$12 >> 2] | 0; //@line 18881
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $19; //@line 18886
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $16 = 0, $19 = 0, $3 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22462
 $3 = $0 + 4 | 0; //@line 22463
 $4 = HEAP32[$3 >> 2] | 0; //@line 22464
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0; //@line 22467
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 22468
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 22469
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 554; //@line 22472
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 22474
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 22476
  HEAP8[$AsyncCtx + 12 >> 0] = $2; //@line 22478
  sp = STACKTOP; //@line 22479
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22482
 $11 = HEAP32[$3 >> 2] | 0; //@line 22483
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 24 >> 2] | 0; //@line 22486
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22487
 FUNCTION_TABLE_viii[$14 & 7]($11, $1, $2); //@line 22488
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 555; //@line 22491
  HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 22493
  sp = STACKTOP; //@line 22494
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22497
 $16 = HEAP32[$3 >> 2] | 0; //@line 22498
 $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 76 >> 2] | 0; //@line 22501
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22502
 FUNCTION_TABLE_vi[$19 & 1023]($16); //@line 22503
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 556; //@line 22506
  sp = STACKTOP; //@line 22507
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22510
  return;
 }
}
function _equeue_cancel__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6796
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6798
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6800
 $7 = $2 + 156 | 0; //@line 6801
 _equeue_mutex_lock($7); //@line 6802
 $8 = $2 + 24 | 0; //@line 6803
 $9 = HEAP32[$8 >> 2] | 0; //@line 6804
 L3 : do {
  if (!$9) {
   $$02329$i$i = $8; //@line 6808
   label = 9; //@line 6809
  } else {
   $11 = HEAP32[$6 >> 2] | 0; //@line 6811
   $$025$i$i = $8; //@line 6812
   $13 = $9; //@line 6812
   while (1) {
    $12 = HEAP32[$13 >> 2] | 0; //@line 6814
    if ($12 >>> 0 >= $11 >>> 0) {
     break;
    }
    $15 = $13 + 8 | 0; //@line 6819
    $16 = HEAP32[$15 >> 2] | 0; //@line 6820
    if (!$16) {
     $$02329$i$i = $15; //@line 6823
     label = 9; //@line 6824
     break L3;
    } else {
     $$025$i$i = $15; //@line 6827
     $13 = $16; //@line 6827
    }
   }
   if (($12 | 0) == ($11 | 0)) {
    HEAP32[$4 + -24 >> 2] = $13; //@line 6833
    $$02330$i$i = $$025$i$i; //@line 6836
    $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 6836
   } else {
    $$02329$i$i = $$025$i$i; //@line 6838
    label = 9; //@line 6839
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  HEAP32[$4 + -24 >> 2] = 0; //@line 6845
  $$02330$i$i = $$02329$i$i; //@line 6846
  $$sink$in$i$i = $$02329$i$i; //@line 6846
 }
 HEAP32[$4 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 6850
 HEAP32[$$02330$i$i >> 2] = $6; //@line 6851
 _equeue_mutex_unlock($7); //@line 6852
 return;
}
function _fflush__async_cb_380($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28498
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28500
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 28502
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 28506
  } else {
   $$02327 = $$02325; //@line 28508
   $$02426 = $AsyncRetVal; //@line 28508
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 28515
    } else {
     $16 = 0; //@line 28517
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 28529
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 28532
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 28535
     break L3;
    } else {
     $$02327 = $$023; //@line 28538
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 28541
   $13 = ___fflush_unlocked($$02327) | 0; //@line 28542
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 28546
    ___async_unwind = 0; //@line 28547
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 686; //@line 28549
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 28551
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 28553
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 28555
   sp = STACKTOP; //@line 28556
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 28560
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 28562
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29790
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29792
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29794
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29796
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29798
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29800
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29802
 $14 = HEAP16[$0 + 28 >> 1] | 0; //@line 29804
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29806
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29808
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29812
 HEAP32[$18 >> 2] = 5; //@line 29815
 _mbed_tracef(16, 11020, 11077, $18); //@line 29816
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($6); //@line 29817
 HEAP32[$22 >> 2] = 5; //@line 29818
 _mbed_tracef(16, 11020, 11106, $22); //@line 29819
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 29820
 _wait_ms(1); //@line 29821
 if (!___async) {
  ___async_unwind = 0; //@line 29824
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 61; //@line 29826
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $8; //@line 29828
 HEAP16[$ReallocAsyncCtx7 + 8 >> 1] = $14; //@line 29830
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $16; //@line 29832
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $2; //@line 29834
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $4; //@line 29836
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $6; //@line 29838
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $10; //@line 29840
 HEAP32[$ReallocAsyncCtx7 + 32 >> 2] = $12; //@line 29842
 sp = STACKTOP; //@line 29843
 return;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 32908
 value = value & 255; //@line 32910
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 32913
   ptr = ptr + 1 | 0; //@line 32914
  }
  aligned_end = end & -4 | 0; //@line 32917
  block_aligned_end = aligned_end - 64 | 0; //@line 32918
  value4 = value | value << 8 | value << 16 | value << 24; //@line 32919
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 32922
   HEAP32[ptr + 4 >> 2] = value4; //@line 32923
   HEAP32[ptr + 8 >> 2] = value4; //@line 32924
   HEAP32[ptr + 12 >> 2] = value4; //@line 32925
   HEAP32[ptr + 16 >> 2] = value4; //@line 32926
   HEAP32[ptr + 20 >> 2] = value4; //@line 32927
   HEAP32[ptr + 24 >> 2] = value4; //@line 32928
   HEAP32[ptr + 28 >> 2] = value4; //@line 32929
   HEAP32[ptr + 32 >> 2] = value4; //@line 32930
   HEAP32[ptr + 36 >> 2] = value4; //@line 32931
   HEAP32[ptr + 40 >> 2] = value4; //@line 32932
   HEAP32[ptr + 44 >> 2] = value4; //@line 32933
   HEAP32[ptr + 48 >> 2] = value4; //@line 32934
   HEAP32[ptr + 52 >> 2] = value4; //@line 32935
   HEAP32[ptr + 56 >> 2] = value4; //@line 32936
   HEAP32[ptr + 60 >> 2] = value4; //@line 32937
   ptr = ptr + 64 | 0; //@line 32938
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 32942
   ptr = ptr + 4 | 0; //@line 32943
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 32948
  ptr = ptr + 1 | 0; //@line 32949
 }
 return end - num | 0; //@line 32951
}
function __ZN7LoRaMacD2Ev__async_cb_351($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 14822
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14824
 $4 = HEAP32[$2 + 1808 >> 2] | 0; //@line 14826
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 14831
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 14832
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1796 | 0); //@line 14833
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 369; //@line 14836
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 14837
   HEAP32[$9 >> 2] = $2; //@line 14838
   sp = STACKTOP; //@line 14839
   return;
  }
  ___async_unwind = 0; //@line 14842
  HEAP32[$ReallocAsyncCtx4 >> 2] = 369; //@line 14843
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 14844
  HEAP32[$9 >> 2] = $2; //@line 14845
  sp = STACKTOP; //@line 14846
  return;
 }
 $11 = HEAP32[$2 + 748 >> 2] | 0; //@line 14850
 if (!$11) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 14854
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 14859
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 14860
 FUNCTION_TABLE_vi[$15 & 1023]($2 + 736 | 0); //@line 14861
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 370; //@line 14864
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 14865
  HEAP32[$16 >> 2] = $2; //@line 14866
  sp = STACKTOP; //@line 14867
  return;
 }
 ___async_unwind = 0; //@line 14870
 HEAP32[$ReallocAsyncCtx5 >> 2] = 370; //@line 14871
 $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 14872
 HEAP32[$16 >> 2] = $2; //@line 14873
 sp = STACKTOP; //@line 14874
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_110($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 25830
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25832
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25834
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25836
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25838
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25840
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25842
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25844
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25846
 $18 = $16 + 12 | 0; //@line 25848
 HEAP32[$16 >> 2] = 465; //@line 25849
 HEAP32[$16 + 4 >> 2] = 0; //@line 25851
 HEAP32[$16 + 8 >> 2] = $2; //@line 25853
 HEAP32[$18 >> 2] = 844; //@line 25854
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(40) | 0; //@line 25855
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1796 | 0, $16); //@line 25856
 if (!___async) {
  ___async_unwind = 0; //@line 25859
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 466; //@line 25861
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 25863
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $4; //@line 25865
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $6; //@line 25867
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $8; //@line 25869
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $10; //@line 25871
 HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $12; //@line 25873
 HEAP32[$ReallocAsyncCtx8 + 28 >> 2] = $14; //@line 25875
 HEAP32[$ReallocAsyncCtx8 + 32 >> 2] = $18; //@line 25877
 HEAP32[$ReallocAsyncCtx8 + 36 >> 2] = $16; //@line 25879
 sp = STACKTOP; //@line 25880
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9515
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 9517
 $4 = HEAP16[$0 + 20 >> 1] | 0; //@line 9519
 $6 = HEAP16[$0 + 22 >> 1] | 0; //@line 9521
 $8 = HEAP8[$0 + 24 >> 0] | 0; //@line 9523
 $9 = $0 + 12 | 0; //@line 9524
 $10 = HEAP32[$9 >> 2] | 0; //@line 9525
 do {
  if (!$10) {
   $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9529
   _mbed_assert_internal(15037, 15042, 2830); //@line 9530
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 306; //@line 9533
    HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 9535
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 9537
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 9539
    HEAP16[$AsyncCtx2 + 16 >> 1] = $4; //@line 9541
    HEAP16[$AsyncCtx2 + 18 >> 1] = $6; //@line 9543
    HEAP8[$AsyncCtx2 + 20 >> 0] = $8; //@line 9545
    sp = STACKTOP; //@line 9546
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9549
    $19 = HEAP32[$9 >> 2] | 0; //@line 9551
    break;
   }
  } else {
   $19 = $10; //@line 9555
  }
 } while (0);
 $18 = HEAP32[$19 >> 2] | 0; //@line 9558
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9559
 FUNCTION_TABLE_viiiii[$18 & 7]($0, $2, $4, $6, $8); //@line 9560
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 307; //@line 9563
  sp = STACKTOP; //@line 9564
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9567
  return;
 }
}
function __ZN7LoRaPHY25setup_public_network_modeEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $14 = 0, $17 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22271
 $2 = $0 + 4 | 0; //@line 22272
 $3 = HEAP32[$2 >> 2] | 0; //@line 22273
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 72 >> 2] | 0; //@line 22276
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 22277
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 22278
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 544; //@line 22281
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 22283
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 22286
  sp = STACKTOP; //@line 22287
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22290
 $9 = HEAP32[$2 >> 2] | 0; //@line 22291
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 48 >> 2] | 0; //@line 22294
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22295
 FUNCTION_TABLE_vii[$12 & 15]($9, $1); //@line 22296
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 545; //@line 22299
  HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 22301
  sp = STACKTOP; //@line 22302
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22305
 $14 = HEAP32[$2 >> 2] | 0; //@line 22306
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 76 >> 2] | 0; //@line 22309
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22310
 FUNCTION_TABLE_vi[$17 & 1023]($14); //@line 22311
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 546; //@line 22314
  sp = STACKTOP; //@line 22315
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22318
  return;
 }
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_399($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30184
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30188
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30190
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30192
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30194
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30196
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30198
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 30201
 _equeue_event_delay($4, $6); //@line 30202
 _equeue_event_dtor($4, 282); //@line 30203
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 30204
 $16 = _equeue_post($8, 283, $4) | 0; //@line 30205
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 563; //@line 30208
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 30209
  HEAP32[$17 >> 2] = $10; //@line 30210
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 30211
  HEAP32[$18 >> 2] = $12; //@line 30212
  $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 30213
  HEAP32[$19 >> 2] = $14; //@line 30214
  sp = STACKTOP; //@line 30215
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 30219
 ___async_unwind = 0; //@line 30220
 HEAP32[$ReallocAsyncCtx4 >> 2] = 563; //@line 30221
 $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 30222
 HEAP32[$17 >> 2] = $10; //@line 30223
 $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 30224
 HEAP32[$18 >> 2] = $12; //@line 30225
 $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 30226
 HEAP32[$19 >> 2] = $14; //@line 30227
 sp = STACKTOP; //@line 30228
 return;
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_1($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18111
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18115
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18117
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 18118
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 18122
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 18123
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 18124
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 215; //@line 18127
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 18128
   HEAP32[$10 >> 2] = $4; //@line 18129
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 18130
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 18131
   sp = STACKTOP; //@line 18132
   return;
  }
  ___async_unwind = 0; //@line 18135
  HEAP32[$ReallocAsyncCtx >> 2] = 215; //@line 18136
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 18137
  HEAP32[$10 >> 2] = $4; //@line 18138
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 18139
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 18140
  sp = STACKTOP; //@line 18141
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 18148
 _mbed_assert_internal(13121, 12408, 468); //@line 18149
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 216; //@line 18152
  sp = STACKTOP; //@line 18153
  return;
 }
 ___async_unwind = 0; //@line 18156
 HEAP32[$ReallocAsyncCtx3 >> 2] = 216; //@line 18157
 sp = STACKTOP; //@line 18158
 return;
}
function _mbedtls_cipher_cmac_starts__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $27 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29752
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29754
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29756
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 29759
  $27 = ___async_retval; //@line 29760
  HEAP32[$27 >> 2] = $$0; //@line 29761
  return;
 }
 switch (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) {
 case 36:
 case 4:
 case 3:
 case 2:
  {
   break;
  }
 default:
  {
   $$0 = -24832; //@line 29771
   $27 = ___async_retval; //@line 29772
   HEAP32[$27 >> 2] = $$0; //@line 29773
   return;
  }
 }
 $9 = _calloc(1, 36) | 0; //@line 29777
 if (!$9) {
  $$0 = -24960; //@line 29780
  $27 = ___async_retval; //@line 29781
  HEAP32[$27 >> 2] = $$0; //@line 29782
  return;
 }
 HEAP32[$4 + 64 >> 2] = $9; //@line 29786
 HEAP8[$9 >> 0] = 0; //@line 29788
 HEAP8[$9 + 1 >> 0] = 0; //@line 29790
 HEAP8[$9 + 2 >> 0] = 0; //@line 29792
 HEAP8[$9 + 3 >> 0] = 0; //@line 29794
 HEAP8[$9 + 4 >> 0] = 0; //@line 29796
 HEAP8[$9 + 5 >> 0] = 0; //@line 29798
 HEAP8[$9 + 6 >> 0] = 0; //@line 29800
 HEAP8[$9 + 7 >> 0] = 0; //@line 29802
 HEAP8[$9 + 8 >> 0] = 0; //@line 29804
 HEAP8[$9 + 9 >> 0] = 0; //@line 29806
 HEAP8[$9 + 10 >> 0] = 0; //@line 29808
 HEAP8[$9 + 11 >> 0] = 0; //@line 29810
 HEAP8[$9 + 12 >> 0] = 0; //@line 29812
 HEAP8[$9 + 13 >> 0] = 0; //@line 29814
 HEAP8[$9 + 14 >> 0] = 0; //@line 29816
 HEAP8[$9 + 15 >> 0] = 0; //@line 29817
 $$0 = 0; //@line 29818
 $27 = ___async_retval; //@line 29819
 HEAP32[$27 >> 2] = $$0; //@line 29820
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_92($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24841
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24845
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24847
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24848
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 24852
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 24853
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 24854
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 209; //@line 24857
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 24858
   HEAP32[$10 >> 2] = $4; //@line 24859
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 24860
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 24861
   sp = STACKTOP; //@line 24862
   return;
  }
  ___async_unwind = 0; //@line 24865
  HEAP32[$ReallocAsyncCtx >> 2] = 209; //@line 24866
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 24867
  HEAP32[$10 >> 2] = $4; //@line 24868
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 24869
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 24870
  sp = STACKTOP; //@line 24871
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 24878
 _mbed_assert_internal(13121, 12408, 453); //@line 24879
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 210; //@line 24882
  sp = STACKTOP; //@line 24883
  return;
 }
 ___async_unwind = 0; //@line 24886
 HEAP32[$ReallocAsyncCtx3 >> 2] = 210; //@line 24887
 sp = STACKTOP; //@line 24888
 return;
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_125($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26572
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26576
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26578
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26579
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 26583
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 26584
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 26585
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 206; //@line 26588
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 26589
   HEAP32[$10 >> 2] = $4; //@line 26590
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 26591
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 26592
   sp = STACKTOP; //@line 26593
   return;
  }
  ___async_unwind = 0; //@line 26596
  HEAP32[$ReallocAsyncCtx >> 2] = 206; //@line 26597
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 26598
  HEAP32[$10 >> 2] = $4; //@line 26599
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 26600
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 26601
  sp = STACKTOP; //@line 26602
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 26609
 _mbed_assert_internal(13121, 12408, 445); //@line 26610
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 207; //@line 26613
  sp = STACKTOP; //@line 26614
  return;
 }
 ___async_unwind = 0; //@line 26617
 HEAP32[$ReallocAsyncCtx3 >> 2] = 207; //@line 26618
 sp = STACKTOP; //@line 26619
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19142
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19146
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19148
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19150
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19152
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19154
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19156
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 19159
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 19160
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 19169
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 19170
    if (!___async) {
     ___async_unwind = 0; //@line 19173
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 719; //@line 19175
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 19177
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 19179
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 19181
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 19183
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 19185
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 19187
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 19189
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 19192
    sp = STACKTOP; //@line 19193
    return;
   }
  }
 }
 return;
}
function __ZN4mbed5Timer7read_msEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $21 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3036
 $2 = $0 + 16 | 0; //@line 3038
 $4 = HEAP32[$2 >> 2] | 0; //@line 3040
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 3043
 if (!(HEAP32[$0 >> 2] | 0)) {
  $29 = 0; //@line 3047
  $30 = 0; //@line 3047
  $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 3048
  $32 = tempRet0; //@line 3049
  $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 3050
  $34 = tempRet0; //@line 3051
  return $33 | 0; //@line 3052
 }
 $11 = HEAP32[$0 + 24 >> 2] | 0; //@line 3055
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 3056
 $12 = _ticker_read_us($11) | 0; //@line 3057
 $13 = tempRet0; //@line 3058
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 122; //@line 3061
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3063
  $16 = $AsyncCtx + 8 | 0; //@line 3065
  HEAP32[$16 >> 2] = $4; //@line 3067
  HEAP32[$16 + 4 >> 2] = $7; //@line 3070
  sp = STACKTOP; //@line 3071
  return 0; //@line 3072
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3074
 $21 = $0 + 8 | 0; //@line 3076
 $27 = _i64Subtract($12 | 0, $13 | 0, HEAP32[$21 >> 2] | 0, HEAP32[$21 + 4 >> 2] | 0) | 0; //@line 3082
 $29 = $27; //@line 3084
 $30 = tempRet0; //@line 3084
 $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 3085
 $32 = tempRet0; //@line 3086
 $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 3087
 $34 = tempRet0; //@line 3088
 return $33 | 0; //@line 3089
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 28399
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 28409
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 28409
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 28409
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 28413
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 28416
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 28419
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 28427
  } else {
   $20 = 0; //@line 28429
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 28439
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 28443
  HEAP32[___async_retval >> 2] = $$1; //@line 28445
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 28448
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 28449
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 28453
  ___async_unwind = 0; //@line 28454
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 686; //@line 28456
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 28458
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 28460
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 28462
 sp = STACKTOP; //@line 28463
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_401($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30259
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30263
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30265
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30267
 $8 = (HEAP32[$0 + 4 >> 2] | 0) + 16 | 0; //@line 30268
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 30269
 $9 = HEAP32[$4 >> 2] | 0; //@line 30270
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 30274
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 30275
  FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 30276
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 564; //@line 30279
   $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 30280
   HEAP32[$13 >> 2] = $8; //@line 30281
   sp = STACKTOP; //@line 30282
   return;
  }
  ___async_unwind = 0; //@line 30285
  HEAP32[$ReallocAsyncCtx3 >> 2] = 564; //@line 30286
  $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 30287
  HEAP32[$13 >> 2] = $8; //@line 30288
  sp = STACKTOP; //@line 30289
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 30296
 _mbed_assert_internal(13674, 13692, 57); //@line 30297
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 565; //@line 30300
  sp = STACKTOP; //@line 30301
  return;
 }
 ___async_unwind = 0; //@line 30304
 HEAP32[$ReallocAsyncCtx6 >> 2] = 565; //@line 30305
 sp = STACKTOP; //@line 30306
 return;
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29354
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29356
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29358
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29360
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 29365
  } else {
   $9 = $4 + 4 | 0; //@line 29367
   $10 = HEAP32[$9 >> 2] | 0; //@line 29368
   $11 = $4 + 8 | 0; //@line 29369
   $12 = HEAP32[$11 >> 2] | 0; //@line 29370
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 29374
    HEAP32[$6 >> 2] = 0; //@line 29375
    HEAP32[$2 >> 2] = 0; //@line 29376
    HEAP32[$11 >> 2] = 0; //@line 29377
    HEAP32[$9 >> 2] = 0; //@line 29378
    $$0 = 0; //@line 29379
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 29386
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 29387
   FUNCTION_TABLE_iiii[$18 & 31]($4, $10 - $12 | 0, 1) | 0; //@line 29388
   if (!___async) {
    ___async_unwind = 0; //@line 29391
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 688; //@line 29393
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 29395
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 29397
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 29399
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 29401
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 29403
   sp = STACKTOP; //@line 29404
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 29409
 return;
}
function _equeue_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$033$i = 0, $$034$i = 0, $2 = 0, $21 = 0, $23 = 0, $27 = 0, $30 = 0, $5 = 0, $6 = 0;
 $2 = _malloc($1) | 0; //@line 3232
 if (!$2) {
  $$0 = -1; //@line 3235
  return $$0 | 0; //@line 3236
 }
 HEAP32[$0 + 12 >> 2] = $2; //@line 3239
 $5 = $0 + 20 | 0; //@line 3240
 HEAP32[$5 >> 2] = 0; //@line 3241
 $6 = $0 + 16 | 0; //@line 3242
 HEAP32[$6 >> 2] = 0; //@line 3243
 if ($1 | 0) {
  $$034$i = $1; //@line 3246
  $23 = 0; //@line 3246
  do {
   $23 = $23 + 1 | 0; //@line 3248
   $$034$i = $$034$i >>> 1; //@line 3249
  } while (($$034$i | 0) != 0);
  HEAP32[$6 >> 2] = $23; //@line 3257
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 3260
 HEAP32[$0 + 28 >> 2] = $1; //@line 3262
 HEAP32[$0 + 32 >> 2] = $2; //@line 3264
 HEAP32[$0 >> 2] = 0; //@line 3265
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 3268
 HEAP8[$0 + 9 >> 0] = 0; //@line 3270
 HEAP8[$0 + 8 >> 0] = 0; //@line 3272
 HEAP8[$0 + 36 >> 0] = 0; //@line 3274
 HEAP32[$0 + 40 >> 2] = 0; //@line 3276
 HEAP32[$0 + 44 >> 2] = 0; //@line 3278
 HEAP8[$0 + 184 >> 0] = 0; //@line 3280
 $21 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 3282
 if (($21 | 0) < 0) {
  $$033$i = $21; //@line 3285
 } else {
  $27 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 3288
  if (($27 | 0) < 0) {
   $$033$i = $27; //@line 3291
  } else {
   $30 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 3294
   $$033$i = ($30 | 0) < 0 ? $30 : 0; //@line 3297
  }
 }
 HEAP32[$5 >> 2] = $2; //@line 3300
 $$0 = $$033$i; //@line 3301
 return $$0 | 0; //@line 3302
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 25886
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25888
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25893
 $7 = HEAP32[$2 >> 2] | 0; //@line 25894
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] | 0; //@line 25897
 if (HEAP8[$0 + 8 >> 0] & 1) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 25899
  FUNCTION_TABLE_vii[$10 & 15]($7, 0); //@line 25900
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 549; //@line 25903
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 25904
   HEAP32[$12 >> 2] = $2; //@line 25905
   sp = STACKTOP; //@line 25906
   return;
  }
  ___async_unwind = 0; //@line 25909
  HEAP32[$ReallocAsyncCtx3 >> 2] = 549; //@line 25910
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 25911
  HEAP32[$12 >> 2] = $2; //@line 25912
  sp = STACKTOP; //@line 25913
  return;
 } else {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 25916
  FUNCTION_TABLE_vii[$10 & 15]($7, $6); //@line 25917
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 548; //@line 25920
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 25921
   HEAP32[$11 >> 2] = $2; //@line 25922
   sp = STACKTOP; //@line 25923
   return;
  }
  ___async_unwind = 0; //@line 25926
  HEAP32[$ReallocAsyncCtx2 >> 2] = 548; //@line 25927
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 25928
  HEAP32[$11 >> 2] = $2; //@line 25929
  sp = STACKTOP; //@line 25930
  return;
 }
}
function __ZN7LoRaPHY20put_radio_to_standbyEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22218
 $1 = $0 + 4 | 0; //@line 22219
 $2 = HEAP32[$1 >> 2] | 0; //@line 22220
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 22223
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 22224
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 22225
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 541; //@line 22228
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 22230
  sp = STACKTOP; //@line 22231
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22234
 $7 = HEAP32[$1 >> 2] | 0; //@line 22235
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0; //@line 22238
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22239
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 22240
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 542; //@line 22243
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 22245
  sp = STACKTOP; //@line 22246
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22249
 $12 = HEAP32[$1 >> 2] | 0; //@line 22250
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 22253
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22254
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 22255
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 543; //@line 22258
  sp = STACKTOP; //@line 22259
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22262
  return;
 }
}
function __ZN7LoRaPHY18put_radio_to_sleepEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22166
 $1 = $0 + 4 | 0; //@line 22167
 $2 = HEAP32[$1 >> 2] | 0; //@line 22168
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 22171
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 22172
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 22173
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 538; //@line 22176
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 22178
  sp = STACKTOP; //@line 22179
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22182
 $7 = HEAP32[$1 >> 2] | 0; //@line 22183
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 22186
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22187
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 22188
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 539; //@line 22191
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 22193
  sp = STACKTOP; //@line 22194
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22197
 $12 = HEAP32[$1 >> 2] | 0; //@line 22198
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 22201
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22202
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 22203
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 540; //@line 22206
  sp = STACKTOP; //@line 22207
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22210
  return;
 }
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2983
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2985
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2987
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2989
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2991
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2993
 $$pre = HEAP32[$2 >> 2] | 0; //@line 2994
 if (!$$pre) {
  HEAP32[$4 >> 2] = 0; //@line 2997
  _gpio_irq_set($10 + 28 | 0, 2, 1); //@line 2999
  return;
 }
 $13 = HEAP32[$$pre + 4 >> 2] | 0; //@line 3003
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 3004
 FUNCTION_TABLE_vii[$13 & 15]($6, $8); //@line 3005
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 108; //@line 3008
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 3009
  HEAP32[$14 >> 2] = $2; //@line 3010
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 3011
  HEAP32[$15 >> 2] = $4; //@line 3012
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 3013
  HEAP32[$16 >> 2] = $10; //@line 3014
  sp = STACKTOP; //@line 3015
  return;
 }
 ___async_unwind = 0; //@line 3018
 HEAP32[$ReallocAsyncCtx2 >> 2] = 108; //@line 3019
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 3020
 HEAP32[$14 >> 2] = $2; //@line 3021
 $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 3022
 HEAP32[$15 >> 2] = $4; //@line 3023
 $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 3024
 HEAP32[$16 >> 2] = $10; //@line 3025
 sp = STACKTOP; //@line 3026
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 26246
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26250
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26252
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26254
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26256
 $11 = $4 + 12 | 0; //@line 26258
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 26259
 $14 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($6) | 0) + 16 >> 0] | 0; //@line 26262
 $17 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($6) | 0) + 17 >> 0] | 0; //@line 26265
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 26266
 $18 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($8, $4, $14, $17) | 0; //@line 26267
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 309; //@line 26270
  $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 26271
  HEAP32[$19 >> 2] = $11; //@line 26272
  $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 26273
  HEAP32[$20 >> 2] = $10; //@line 26274
  sp = STACKTOP; //@line 26275
  return;
 }
 HEAP32[___async_retval >> 2] = $18; //@line 26279
 ___async_unwind = 0; //@line 26280
 HEAP32[$ReallocAsyncCtx4 >> 2] = 309; //@line 26281
 $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 26282
 HEAP32[$19 >> 2] = $11; //@line 26283
 $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 26284
 HEAP32[$20 >> 2] = $10; //@line 26285
 sp = STACKTOP; //@line 26286
 return;
}
function _main__async_cb_10($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 18675
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18677
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18679
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18681
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18683
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18685
 _mbed_trace_init() | 0; //@line 18686
 if (!(__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE(20684, 20480) | 0)) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(24) | 0; //@line 18690
  $13 = _equeue_alloc(20480, 32) | 0; //@line 18691
  if (!___async) {
   HEAP32[___async_retval >> 2] = $13; //@line 18695
   ___async_unwind = 0; //@line 18696
  }
  HEAP32[$ReallocAsyncCtx14 >> 2] = 650; //@line 18698
  HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 18700
  HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $4; //@line 18702
  HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $6; //@line 18704
  HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $8; //@line 18706
  HEAP32[$ReallocAsyncCtx14 + 20 >> 2] = $10; //@line 18708
  sp = STACKTOP; //@line 18709
  return;
 }
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(4) | 0; //@line 18712
 _puts(15380) | 0; //@line 18713
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 649; //@line 18716
  sp = STACKTOP; //@line 18717
  return;
 }
 ___async_unwind = 0; //@line 18720
 HEAP32[$ReallocAsyncCtx8 >> 2] = 649; //@line 18721
 sp = STACKTOP; //@line 18722
 return;
}
function __ZN12LoRaWANStackD2Ev__async_cb_148($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29695
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29697
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29699
 $6 = HEAP32[$2 + 2496 >> 2] | 0; //@line 29701
 if (!$6) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 29705
  __ZN12radio_eventsD2Ev($2 + 2368 | 0); //@line 29706
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 170; //@line 29709
   $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 29710
   HEAP32[$12 >> 2] = $2; //@line 29711
   sp = STACKTOP; //@line 29712
   return;
  }
  ___async_unwind = 0; //@line 29715
  HEAP32[$ReallocAsyncCtx5 >> 2] = 170; //@line 29716
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 29717
  HEAP32[$12 >> 2] = $2; //@line 29718
  sp = STACKTOP; //@line 29719
  return;
 } else {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 29723
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 29724
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 29725
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 169; //@line 29728
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 29729
   HEAP32[$10 >> 2] = $2; //@line 29730
   sp = STACKTOP; //@line 29731
   return;
  }
  ___async_unwind = 0; //@line 29734
  HEAP32[$ReallocAsyncCtx3 >> 2] = 169; //@line 29735
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 29736
  HEAP32[$10 >> 2] = $2; //@line 29737
  sp = STACKTOP; //@line 29738
  return;
 }
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25135
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25137
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25139
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25141
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25143
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25145
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25147
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25149
 $16 = $4 + 12 | 0; //@line 25151
 HEAP32[$4 >> 2] = 468; //@line 25152
 HEAP32[$4 + 4 >> 2] = 0; //@line 25154
 HEAP32[$4 + 8 >> 2] = $2; //@line 25156
 HEAP32[$16 >> 2] = 844; //@line 25157
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 25158
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1816 | 0, $4); //@line 25159
 if (!___async) {
  ___async_unwind = 0; //@line 25162
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 469; //@line 25164
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 25166
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $8; //@line 25168
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 25170
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $10; //@line 25172
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $12; //@line 25174
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $14; //@line 25176
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $4; //@line 25178
 HEAP32[$ReallocAsyncCtx7 + 32 >> 2] = $16; //@line 25180
 sp = STACKTOP; //@line 25181
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_158($0) {
 $0 = $0 | 0;
 var $$059 = 0, $10 = 0, $12 = 0, $17 = 0, $19 = 0, $2 = 0, $25 = 0, $31 = 0, $37 = 0, $4 = 0, $42 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30257
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30259
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30261
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 30265
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30267
 if (HEAP32[___async_retval >> 2] | 0) {
  $$059 = -1014; //@line 30274
  $42 = ___async_retval; //@line 30275
  HEAP32[$42 >> 2] = $$059; //@line 30276
  return;
 }
 $17 = HEAP32[$2 >> 2] | 0; //@line 30279
 $19 = HEAP16[$4 >> 1] | 0; //@line 30281
 HEAP16[$4 >> 1] = $19 + 1 << 16 >> 16; //@line 30283
 HEAP8[($19 & 65535) + ($6 + 1185) >> 0] = $17; //@line 30286
 $25 = HEAP16[$4 >> 1] | 0; //@line 30289
 HEAP16[$4 >> 1] = $25 + 1 << 16 >> 16; //@line 30291
 HEAP8[($25 & 65535) + ($6 + 1185) >> 0] = $17 >>> 8; //@line 30294
 $31 = HEAP16[$4 >> 1] | 0; //@line 30297
 HEAP16[$4 >> 1] = $31 + 1 << 16 >> 16; //@line 30299
 HEAP8[($31 & 65535) + ($6 + 1185) >> 0] = $17 >>> 16; //@line 30302
 $37 = HEAP16[$4 >> 1] | 0; //@line 30305
 HEAP16[$4 >> 1] = $37 + 1 << 16 >> 16; //@line 30307
 HEAP8[($37 & 65535) + ($6 + 1185) >> 0] = $17 >>> 24; //@line 30310
 HEAP32[$12 >> 2] = $10 & 255; //@line 30312
 _mbed_tracef(16, 13263, 13348, $12); //@line 30313
 $$059 = 0; //@line 30314
 $42 = ___async_retval; //@line 30315
 HEAP32[$42 >> 2] = $$059; //@line 30316
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_20($0) {
 $0 = $0 | 0;
 var $12 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19682
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19684
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19686
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19688
 if (!(HEAP8[$2 + 1177 >> 0] | 0)) {
  $19 = HEAP8[$2 + 1182 >> 0] | 0; //@line 19694
  HEAP8[$2 + 1183 >> 0] = $19; //@line 19696
  __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $19, (HEAP8[$2 + 2360 >> 0] | 0) != 0, $4); //@line 19701
  HEAP32[$2 + 1780 >> 2] = $4; //@line 19703
  return;
 }
 $12 = HEAP32[$2 + 1776 >> 2] | 0; //@line 19708
 $15 = (__ZN7LoRaPHY15get_ack_timeoutEv($2 + 4 | 0) | 0) + $12 | 0; //@line 19711
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 19712
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $2 + 1856 | 0, $15); //@line 19713
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 377; //@line 19716
  $16 = $ReallocAsyncCtx + 4 | 0; //@line 19717
  HEAP32[$16 >> 2] = $2; //@line 19718
  $17 = $ReallocAsyncCtx + 8 | 0; //@line 19719
  HEAP32[$17 >> 2] = $4; //@line 19720
  sp = STACKTOP; //@line 19721
  return;
 }
 ___async_unwind = 0; //@line 19724
 HEAP32[$ReallocAsyncCtx >> 2] = 377; //@line 19725
 $16 = $ReallocAsyncCtx + 4 | 0; //@line 19726
 HEAP32[$16 >> 2] = $2; //@line 19727
 $17 = $ReallocAsyncCtx + 8 | 0; //@line 19728
 HEAP32[$17 >> 2] = $4; //@line 19729
 sp = STACKTOP; //@line 19730
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29220
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29222
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29224
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29226
 $7 = $2 + 12 | 0; //@line 29227
 $8 = HEAP32[$7 >> 2] | 0; //@line 29228
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 29231
  HEAP32[$6 + 16 >> 2] = 0; //@line 29233
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 29237
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 29238
 FUNCTION_TABLE_vii[$11 & 15]($6, $2); //@line 29239
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 559; //@line 29242
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 29243
  HEAP32[$12 >> 2] = $7; //@line 29244
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 29245
  HEAP32[$13 >> 2] = $4; //@line 29246
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 29247
  HEAP32[$14 >> 2] = $6; //@line 29248
  sp = STACKTOP; //@line 29249
  return;
 }
 ___async_unwind = 0; //@line 29252
 HEAP32[$ReallocAsyncCtx2 >> 2] = 559; //@line 29253
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 29254
 HEAP32[$12 >> 2] = $7; //@line 29255
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 29256
 HEAP32[$13 >> 2] = $4; //@line 29257
 $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 29258
 HEAP32[$14 >> 2] = $6; //@line 29259
 sp = STACKTOP; //@line 29260
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_298($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 11154
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11156
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11158
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11160
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11162
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 11167
  return;
 }
 dest = $2 + 4 | 0; //@line 11171
 stop = dest + 52 | 0; //@line 11171
 do {
  HEAP32[dest >> 2] = 0; //@line 11171
  dest = dest + 4 | 0; //@line 11171
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 11172
 HEAP32[$2 + 8 >> 2] = $4; //@line 11174
 HEAP32[$2 + 12 >> 2] = -1; //@line 11176
 HEAP32[$2 + 48 >> 2] = 1; //@line 11178
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 11181
 $16 = HEAP32[$6 >> 2] | 0; //@line 11182
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 11183
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 11184
 if (!___async) {
  ___async_unwind = 0; //@line 11187
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 704; //@line 11189
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 11191
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 11193
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 11195
 sp = STACKTOP; //@line 11196
 return;
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 15055
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 15060
    $$0 = 1; //@line 15061
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 15074
     $$0 = 1; //@line 15075
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 15079
     $$0 = -1; //@line 15080
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 15090
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 15094
    $$0 = 2; //@line 15095
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 15107
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 15113
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 15117
    $$0 = 3; //@line 15118
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 15128
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 15134
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 15140
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 15144
    $$0 = 4; //@line 15145
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 15149
    $$0 = -1; //@line 15150
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 15155
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17284
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$0 = -1002; //@line 17288
  return $$0 | 0; //@line 17289
 }
 if (((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) <= ($1 & 255)) {
  $$0 = -1003; //@line 17295
  return $$0 | 0; //@line 17296
 }
 $7 = HEAP32[$0 >> 2] | 0; //@line 17298
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 64 >> 2] | 0; //@line 17301
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 17302
 $11 = FUNCTION_TABLE_iii[$10 & 15]($7, $1) | 0; //@line 17303
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 488; //@line 17306
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 17308
  sp = STACKTOP; //@line 17309
  return 0; //@line 17310
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17312
 if (!$11) {
  $$0 = -1003; //@line 17314
  return $$0 | 0; //@line 17315
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 17317
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17318
 __ZN7LoRaPHY18put_radio_to_sleepEv($13); //@line 17319
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 489; //@line 17322
  sp = STACKTOP; //@line 17323
  return 0; //@line 17324
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17326
 $$0 = 0; //@line 17327
 return $$0 | 0; //@line 17328
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_72($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 23821
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23823
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23827
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 23829
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 23831
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 23833
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 23835
 $15 = $2 + 12 | 0; //@line 23837
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 8 >> 2] >> 2]; //@line 23838
 $16 = $2 + 16 | 0; //@line 23839
 HEAP8[$16 >> 0] = $8; //@line 23840
 HEAP8[$2 + 17 >> 0] = $10; //@line 23842
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 23843
 $18 = _equeue_alloc($12, 20) | 0; //@line 23844
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 23848
  ___async_unwind = 0; //@line 23849
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 320; //@line 23851
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $16; //@line 23853
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $12; //@line 23855
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $2; //@line 23857
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $15; //@line 23859
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $6; //@line 23861
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $15; //@line 23863
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $14; //@line 23865
 sp = STACKTOP; //@line 23866
 return;
}
function __ZN12LoRaWANStack28process_transmission_timeoutEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8717
 STACKTOP = STACKTOP + 16 | 0; //@line 8718
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8718
 _mbed_tracef(16, 12506, 12660, sp); //@line 8720
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 8721
 __ZN7LoRaMac19on_radio_tx_timeoutEv($0); //@line 8722
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 278; //@line 8725
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8727
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 8729
  sp = STACKTOP; //@line 8730
  STACKTOP = sp; //@line 8731
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8733
 $3 = $0 + 2872 | 0; //@line 8734
 HEAP32[$3 >> 2] = HEAP32[$3 >> 2] & -18 | 16; //@line 8738
 $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8739
 __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 8740
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 279; //@line 8743
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 8745
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8747
  sp = STACKTOP; //@line 8748
  STACKTOP = sp; //@line 8749
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8751
  $10 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 8753
  HEAP32[$0 + 2480 >> 2] = $10 ? 5 : 2; //@line 8756
  STACKTOP = sp; //@line 8757
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_17($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19278
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19282
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19284
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19286
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19288
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19290
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 19293
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 19294
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 19300
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 19301
   if (!___async) {
    ___async_unwind = 0; //@line 19304
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 717; //@line 19306
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 19308
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 19310
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 19312
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 19314
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 19316
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 19318
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 19321
   sp = STACKTOP; //@line 19322
   return;
  }
 }
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_185($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 543
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 545
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 547
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 549
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 551
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 553
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 555
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 557
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 559
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 561
 $19 = HEAP32[$2 >> 2] | 0; //@line 562
 $22 = HEAP32[(HEAP32[$19 >> 2] | 0) + 32 >> 2] | 0; //@line 565
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 566
 FUNCTION_TABLE_vii[$22 & 15]($19, $4); //@line 567
 if (!___async) {
  ___async_unwind = 0; //@line 570
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 519; //@line 572
 HEAP8[$ReallocAsyncCtx5 + 4 >> 0] = $6; //@line 574
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 576
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 578
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 580
 HEAP8[$ReallocAsyncCtx5 + 20 >> 0] = $12; //@line 582
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 584
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 586
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 588
 sp = STACKTOP; //@line 589
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $8 = 0, $9 = 0, dest = 0, stop = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23580
 HEAP8[$2 + 2360 >> 0] = 0; //@line 23582
 HEAP8[$2 + 1181 >> 0] = 0; //@line 23584
 HEAP8[$2 + 1175 >> 0] = 1; //@line 23586
 HEAP8[$2 + 1177 >> 0] = 0; //@line 23588
 HEAP8[$2 + 1178 >> 0] = 0; //@line 23590
 $8 = $2 + 476 | 0; //@line 23591
 __ZN14LoRaMacCommand20clear_command_bufferEv($8); //@line 23592
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($8); //@line 23593
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($8); //@line 23594
 $9 = $2 + 2036 | 0; //@line 23595
 HEAP32[$9 >> 2] = 0; //@line 23596
 HEAP32[$9 + 4 >> 2] = 0; //@line 23596
 HEAP32[$9 + 8 >> 2] = 0; //@line 23596
 HEAP32[$9 + 12 >> 2] = 0; //@line 23596
 HEAP32[$9 + 16 >> 2] = 0; //@line 23596
 HEAP32[$9 + 20 >> 2] = 0; //@line 23596
 HEAP32[$2 + 2040 >> 2] = 1; //@line 23598
 $11 = $2 + 2068 | 0; //@line 23599
 HEAP32[$11 >> 2] = 0; //@line 23600
 HEAP32[$11 + 4 >> 2] = 0; //@line 23600
 HEAP32[$11 + 8 >> 2] = 0; //@line 23600
 HEAP32[$11 + 12 >> 2] = 0; //@line 23600
 HEAP32[$11 + 16 >> 2] = 0; //@line 23600
 HEAP32[$2 + 2076 >> 2] = 1; //@line 23602
 dest = $2 + 1996 | 0; //@line 23604
 stop = dest + 40 | 0; //@line 23604
 do {
  HEAP32[dest >> 2] = 0; //@line 23604
  dest = dest + 4 | 0; //@line 23604
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 + 2004 >> 2] = 1; //@line 23606
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_153($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 29867
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29869
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 29871
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29873
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29875
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29877
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29879
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29881
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29883
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29885
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 29886
 __ZN4mbed5Timer5startEv($2); //@line 29887
 if (!___async) {
  ___async_unwind = 0; //@line 29890
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 63; //@line 29892
 HEAP16[$ReallocAsyncCtx4 + 4 >> 1] = $4; //@line 29894
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $2; //@line 29896
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $6; //@line 29898
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $8; //@line 29900
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $10; //@line 29902
 HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $12; //@line 29904
 HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $14; //@line 29906
 HEAP32[$ReallocAsyncCtx4 + 32 >> 2] = $16; //@line 29908
 HEAP32[$ReallocAsyncCtx4 + 36 >> 2] = $18; //@line 29910
 sp = STACKTOP; //@line 29911
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_120($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26321
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26325
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26327
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26328
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 26332
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 26333
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 26334
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 310; //@line 26337
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 26338
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 26339
   sp = STACKTOP; //@line 26340
   return;
  }
  ___async_unwind = 0; //@line 26343
  HEAP32[$ReallocAsyncCtx2 >> 2] = 310; //@line 26344
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 26345
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 26346
  sp = STACKTOP; //@line 26347
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 26354
 _mbed_assert_internal(13121, 12408, 751); //@line 26355
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 311; //@line 26358
  sp = STACKTOP; //@line 26359
  return;
 }
 ___async_unwind = 0; //@line 26362
 HEAP32[$ReallocAsyncCtx6 >> 2] = 311; //@line 26363
 sp = STACKTOP; //@line 26364
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_198($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $21 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1792
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1796
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1798
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1800
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1802
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1806
 if (!(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] & 1)) {
  $21 = (__ZNK7LoRaMac16get_device_classEv($4) | 0) == 2; //@line 1814
  HEAP32[$6 >> 2] = $21 ? 5 : 2; //@line 1816
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($4) | 0) + 4 >> 0] | 0)) {
  HEAP8[$8 + 2879 >> 0] = 1; //@line 1824
  return;
 }
 _mbed_tracef(16, 12506, 12691, $10); //@line 1827
 __ZN7LoRaMac21post_process_mlme_indEv($4); //@line 1828
 _mbed_tracef(16, 12506, 12715, $14); //@line 1829
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 1830
 __ZN12LoRaWANStack23mlme_indication_handlerEv($8); //@line 1831
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 295; //@line 1834
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 1835
  HEAP32[$26 >> 2] = $8; //@line 1836
  sp = STACKTOP; //@line 1837
  return;
 }
 ___async_unwind = 0; //@line 1840
 HEAP32[$ReallocAsyncCtx2 >> 2] = 295; //@line 1841
 $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 1842
 HEAP32[$26 >> 2] = $8; //@line 1843
 sp = STACKTOP; //@line 1844
 return;
}
function __ZN7LoRaMac21handle_retransmissionEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26811
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26813
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26815
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26819
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26821
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26823
 if ($AsyncRetVal | 0) {
  HEAP32[$4 >> 2] = $AsyncRetVal; //@line 26826
  _mbed_tracef(2, 13263, 13268, $4); //@line 26827
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 26829
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 26832
 $13 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 26833
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 390; //@line 26836
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 26837
  HEAP32[$14 >> 2] = $8; //@line 26838
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 26839
  HEAP32[$15 >> 2] = $10; //@line 26840
  sp = STACKTOP; //@line 26841
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 26845
 ___async_unwind = 0; //@line 26846
 HEAP32[$ReallocAsyncCtx3 >> 2] = 390; //@line 26847
 $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 26848
 HEAP32[$14 >> 2] = $8; //@line 26849
 $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 26850
 HEAP32[$15 >> 2] = $10; //@line 26851
 sp = STACKTOP; //@line 26852
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_107($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 25725
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25727
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25729
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25731
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25733
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25735
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25737
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25739
 _srand(HEAP32[___async_retval >> 2] | 0); //@line 25742
 $16 = $2 + 1172 | 0; //@line 25743
 HEAP8[$16 >> 0] = 1; //@line 25744
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(36) | 0; //@line 25745
 __ZN7LoRaPHY25setup_public_network_modeEb($10, 1); //@line 25746
 if (!___async) {
  ___async_unwind = 0; //@line 25749
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 463; //@line 25751
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 25753
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 25755
 HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $6; //@line 25757
 HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $8; //@line 25759
 HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $16; //@line 25761
 HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $10; //@line 25763
 HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $12; //@line 25765
 HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $14; //@line 25767
 sp = STACKTOP; //@line 25768
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10209
 $2 = HEAP8[$0 + 16 >> 0] | 0; //@line 10211
 $4 = HEAP8[$0 + 17 >> 0] | 0; //@line 10213
 $5 = $0 + 12 | 0; //@line 10214
 $6 = HEAP32[$5 >> 2] | 0; //@line 10215
 do {
  if (!$6) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10219
   _mbed_assert_internal(15037, 15042, 1677); //@line 10220
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 332; //@line 10223
    HEAP32[$AsyncCtx2 + 4 >> 2] = $5; //@line 10225
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 10227
    HEAP8[$AsyncCtx2 + 12 >> 0] = $2; //@line 10229
    HEAP8[$AsyncCtx2 + 13 >> 0] = $4; //@line 10231
    sp = STACKTOP; //@line 10232
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10235
    $13 = HEAP32[$5 >> 2] | 0; //@line 10237
    break;
   }
  } else {
   $13 = $6; //@line 10241
  }
 } while (0);
 $12 = HEAP32[$13 >> 2] | 0; //@line 10244
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10245
 FUNCTION_TABLE_viii[$12 & 7]($0, $2, $4); //@line 10246
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 333; //@line 10249
  sp = STACKTOP; //@line 10250
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10253
  return;
 }
}
function __ZN7LoRaMac4joinEb__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20424
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20426
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20428
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20432
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20434
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20436
 if ($AsyncRetVal | 0) {
  HEAP32[$4 >> 2] = $AsyncRetVal; //@line 20439
  _mbed_tracef(2, 13263, 13268, $4); //@line 20440
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 20442
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 20445
 $13 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 20446
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 461; //@line 20449
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 20450
  HEAP32[$14 >> 2] = $8; //@line 20451
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 20452
  HEAP32[$15 >> 2] = $10; //@line 20453
  sp = STACKTOP; //@line 20454
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 20458
 ___async_unwind = 0; //@line 20459
 HEAP32[$ReallocAsyncCtx2 >> 2] = 461; //@line 20460
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 20461
 HEAP32[$14 >> 2] = $8; //@line 20462
 $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 20463
 HEAP32[$15 >> 2] = $10; //@line 20464
 sp = STACKTOP; //@line 20465
 return;
}
function __ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6993
 STACKTOP = STACKTOP + 16 | 0; //@line 6994
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6994
 $$byval_copy = sp + 8 | 0; //@line 6995
 $1 = sp; //@line 6996
 $3 = HEAP32[$0 + 3136 >> 2] | 0; //@line 6998
 HEAP32[$1 >> 2] = 211; //@line 6999
 HEAP32[$1 + 4 >> 2] = 0; //@line 7001
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7002
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 7003
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7003
 $4 = __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 7004
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 212; //@line 7007
  sp = STACKTOP; //@line 7008
  STACKTOP = sp; //@line 7009
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7011
 if ($4 | 0) {
  STACKTOP = sp; //@line 7014
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7016
 _mbed_assert_internal(13121, 12408, 460); //@line 7017
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 213; //@line 7020
  sp = STACKTOP; //@line 7021
  STACKTOP = sp; //@line 7022
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7024
 STACKTOP = sp; //@line 7025
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_100($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25188
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25190
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25192
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25194
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25196
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25198
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25200
 $14 = $4 + 12 | 0; //@line 25202
 HEAP32[$4 >> 2] = 471; //@line 25203
 HEAP32[$4 + 4 >> 2] = 0; //@line 25205
 HEAP32[$4 + 8 >> 2] = $2; //@line 25207
 HEAP32[$14 >> 2] = 844; //@line 25208
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 25209
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1836 | 0, $4); //@line 25210
 if (!___async) {
  ___async_unwind = 0; //@line 25213
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 472; //@line 25215
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $14; //@line 25217
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $2; //@line 25219
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $8; //@line 25221
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $6; //@line 25223
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $4; //@line 25225
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $10; //@line 25227
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $12; //@line 25229
 sp = STACKTOP; //@line 25230
 return;
}
function __ZN12LoRaWANStack20tx_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6806
 STACKTOP = STACKTOP + 16 | 0; //@line 6807
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6807
 $$byval_copy = sp + 8 | 0; //@line 6808
 $1 = sp; //@line 6809
 $3 = HEAP32[$0 + 3136 >> 2] | 0; //@line 6811
 HEAP32[$1 >> 2] = 202; //@line 6812
 HEAP32[$1 + 4 >> 2] = 0; //@line 6814
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6815
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 6816
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 6816
 $4 = __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 6817
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 203; //@line 6820
  sp = STACKTOP; //@line 6821
  STACKTOP = sp; //@line 6822
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6824
 if ($4 | 0) {
  STACKTOP = sp; //@line 6827
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6829
 _mbed_assert_internal(13121, 12408, 428); //@line 6830
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 204; //@line 6833
  sp = STACKTOP; //@line 6834
  STACKTOP = sp; //@line 6835
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6837
 STACKTOP = sp; //@line 6838
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_168($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32114
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32116
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 32118
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 32123
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 32124
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 16 | 0); //@line 32125
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 32128
   $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 32129
   HEAP32[$9 >> 2] = $2; //@line 32130
   sp = STACKTOP; //@line 32131
   return;
  }
  ___async_unwind = 0; //@line 32134
  HEAP32[$ReallocAsyncCtx6 >> 2] = 177; //@line 32135
  $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 32136
  HEAP32[$9 >> 2] = $2; //@line 32137
  sp = STACKTOP; //@line 32138
  return;
 }
 $11 = HEAP32[$2 + 12 >> 2] | 0; //@line 32142
 if (!$11) {
  return;
 }
 $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 32148
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 32149
 FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 32150
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 178; //@line 32153
  sp = STACKTOP; //@line 32154
  return;
 }
 ___async_unwind = 0; //@line 32157
 HEAP32[$ReallocAsyncCtx7 >> 2] = 178; //@line 32158
 sp = STACKTOP; //@line 32159
 return;
}
function _mbedtls_aes_crypt_ctr($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0$lcssa = 0, $$021 = 0, $$02326 = 0, $$02425 = 0, $$027 = 0, $$in = 0, $13 = 0, $15 = 0, $24 = 0, $7 = 0;
 $7 = HEAP32[$2 >> 2] | 0; //@line 1869
 if (!$1) {
  $$0$lcssa = $7; //@line 1872
  HEAP32[$2 >> 2] = $$0$lcssa; //@line 1873
  return 0; //@line 1874
 } else {
  $$02326 = $6; //@line 1876
  $$02425 = $5; //@line 1876
  $$027 = $7; //@line 1876
  $$in = $1; //@line 1876
 }
 while (1) {
  $$in = $$in + -1 | 0; //@line 1879
  L5 : do {
   if (!$$027) {
    _mbedtls_internal_aes_encrypt($0, $3, $4) | 0; //@line 1883
    $$021 = 16; //@line 1884
    do {
     if (($$021 | 0) <= 0) {
      break L5;
     }
     $$021 = $$021 + -1 | 0; //@line 1890
     $13 = $3 + $$021 | 0; //@line 1891
     $15 = (HEAP8[$13 >> 0] | 0) + 1 << 24 >> 24; //@line 1893
     HEAP8[$13 >> 0] = $15; //@line 1894
    } while (!($15 << 24 >> 24));
   }
  } while (0);
  HEAP8[$$02326 >> 0] = HEAP8[$4 + $$027 >> 0] ^ HEAP8[$$02425 >> 0]; //@line 1910
  $24 = $$027 + 1 & 15; //@line 1912
  if (!$$in) {
   $$0$lcssa = $24; //@line 1915
   break;
  } else {
   $$02326 = $$02326 + 1 | 0; //@line 1918
   $$02425 = $$02425 + 1 | 0; //@line 1918
   $$027 = $24; //@line 1918
  }
 }
 HEAP32[$2 >> 2] = $$0$lcssa; //@line 1921
 return 0; //@line 1922
}
function _equeue_create_inplace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$033 = 0, $$034 = 0, $20 = 0, $22 = 0, $26 = 0, $29 = 0, $5 = 0;
 HEAP32[$0 + 12 >> 2] = $2; //@line 3312
 HEAP32[$0 + 20 >> 2] = 0; //@line 3314
 $5 = $0 + 16 | 0; //@line 3315
 HEAP32[$5 >> 2] = 0; //@line 3316
 if ($1 | 0) {
  $$034 = $1; //@line 3319
  $22 = 0; //@line 3319
  do {
   $22 = $22 + 1 | 0; //@line 3321
   $$034 = $$034 >>> 1; //@line 3322
  } while (($$034 | 0) != 0);
  HEAP32[$5 >> 2] = $22; //@line 3330
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 3333
 HEAP32[$0 + 28 >> 2] = $1; //@line 3335
 HEAP32[$0 + 32 >> 2] = $2; //@line 3337
 HEAP32[$0 >> 2] = 0; //@line 3338
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 3341
 HEAP8[$0 + 9 >> 0] = 0; //@line 3343
 HEAP8[$0 + 8 >> 0] = 0; //@line 3345
 HEAP8[$0 + 36 >> 0] = 0; //@line 3347
 HEAP32[$0 + 40 >> 2] = 0; //@line 3349
 HEAP32[$0 + 44 >> 2] = 0; //@line 3351
 HEAP8[$0 + 184 >> 0] = 0; //@line 3353
 $20 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 3355
 if (($20 | 0) < 0) {
  $$033 = $20; //@line 3358
  return $$033 | 0; //@line 3359
 }
 $26 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 3362
 if (($26 | 0) < 0) {
  $$033 = $26; //@line 3365
  return $$033 | 0; //@line 3366
 }
 $29 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 3369
 $$033 = ($29 | 0) < 0 ? $29 : 0; //@line 3372
 return $$033 | 0; //@line 3373
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 13939
  $8 = $0; //@line 13939
  $9 = $1; //@line 13939
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 13941
   $$0914 = $$0914 + -1 | 0; //@line 13945
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 13946
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 13947
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 13955
   }
  }
  $$010$lcssa$off0 = $8; //@line 13960
  $$09$lcssa = $$0914; //@line 13960
 } else {
  $$010$lcssa$off0 = $0; //@line 13962
  $$09$lcssa = $2; //@line 13962
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 13966
 } else {
  $$012 = $$010$lcssa$off0; //@line 13968
  $$111 = $$09$lcssa; //@line 13968
  while (1) {
   $26 = $$111 + -1 | 0; //@line 13973
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 13974
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 13978
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 13981
    $$111 = $26; //@line 13981
   }
  }
 }
 return $$1$lcssa | 0; //@line 13985
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_322($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 12463
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12467
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12469
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12471
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12473
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12475
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12477
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12479
 $17 = $4 + 12 | 0; //@line 12481
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 12482
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(28) | 0; //@line 12483
 $18 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 7) | 0; //@line 12484
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 12488
  ___async_unwind = 0; //@line 12489
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 259; //@line 12491
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $10; //@line 12493
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $8; //@line 12495
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $12; //@line 12497
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $14; //@line 12499
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $16; //@line 12501
 HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $17; //@line 12503
 sp = STACKTOP; //@line 12504
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_157($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30140
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30142
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 30144
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30146
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30148
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30150
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30152
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30154
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30156
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 30157
 __ZN4mbed5TimerC2Ev($2); //@line 30158
 if (!___async) {
  ___async_unwind = 0; //@line 30161
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 62; //@line 30163
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 30165
 HEAP16[$ReallocAsyncCtx3 + 8 >> 1] = $4; //@line 30167
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 30169
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 30171
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 30173
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 30175
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $2; //@line 30177
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $14; //@line 30179
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $16; //@line 30181
 sp = STACKTOP; //@line 30182
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_289($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10269
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10271
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10273
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10277
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10279
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10281
 $13 = $4 + 12 | 0; //@line 10283
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 10284
 $14 = $4 + 16 | 0; //@line 10285
 HEAP32[$14 >> 2] = $10; //@line 10286
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 10287
 $15 = _equeue_alloc($12, 20) | 0; //@line 10288
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 10292
  ___async_unwind = 0; //@line 10293
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 268; //@line 10295
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $13; //@line 10297
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $14; //@line 10299
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $12; //@line 10301
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $2; //@line 10303
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $8; //@line 10305
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $4; //@line 10307
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $13; //@line 10309
 sp = STACKTOP; //@line 10310
 return;
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb_55($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22463
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22467
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22469
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22471
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 4; //@line 22476
  HEAP32[$8 + 2480 >> 2] = 2; //@line 22478
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 22481
 _mbed_assert_internal(13121, 12408, 646); //@line 22482
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 330; //@line 22485
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 22486
  HEAP32[$10 >> 2] = $4; //@line 22487
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 22488
  HEAP32[$11 >> 2] = $6; //@line 22489
  $12 = $ReallocAsyncCtx4 + 12 | 0; //@line 22490
  HEAP32[$12 >> 2] = $8; //@line 22491
  sp = STACKTOP; //@line 22492
  return;
 }
 ___async_unwind = 0; //@line 22495
 HEAP32[$ReallocAsyncCtx4 >> 2] = 330; //@line 22496
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 22497
 HEAP32[$10 >> 2] = $4; //@line 22498
 $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 22499
 HEAP32[$11 >> 2] = $6; //@line 22500
 $12 = $ReallocAsyncCtx4 + 12 | 0; //@line 22501
 HEAP32[$12 >> 2] = $8; //@line 22502
 sp = STACKTOP; //@line 22503
 return;
}
function __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$$i = 0, $$0 = 0.0, $10 = 0, $13 = 0, $16 = 0, $23 = 0, $28 = 0, $41 = 0, $5 = 0, $51 = 0, $7 = 0, $8 = 0;
 $5 = $1 << 24 >> 24; //@line 20464
 $7 = HEAP8[$0 + 29 >> 0] | 0; //@line 20466
 $8 = $7 & 255; //@line 20467
 $$ = ($5 | 0) < ($8 | 0) ? $5 : $8; //@line 20469
 $10 = $$ & 255; //@line 20470
 HEAP8[$4 + 1 >> 0] = $10; //@line 20472
 $13 = HEAP32[$0 + 80 >> 2] | 0; //@line 20474
 $16 = HEAP32[$13 + (($$ & 255) << 2) >> 2] | 0; //@line 20477
 HEAP8[$4 + 2 >> 0] = ($16 | 0) == 5e5 ? 2 : ($16 | 0) == 25e4 & 1; //@line 20483
 $23 = HEAP32[$0 + 88 >> 2] | 0; //@line 20490
 if (HEAP8[$0 + 14 >> 0] | 0 ? $7 << 24 >> 24 == $10 << 24 >> 24 : 0) {
  $$0 = 8.0 / +(HEAPU8[$23 + $8 >> 0] | 0); //@line 20496
 } else {
  $28 = $$ & 255; //@line 20498
  $$0 = +(1 << HEAPU8[$23 + $28 >> 0] | 0) / +((HEAP32[$13 + ($28 << 2) >> 2] | 0) >>> 0) * 1.0e3; //@line 20509
 }
 $41 = $2 & 255; //@line 20513
 $51 = ~~+Math_ceil(+(($$0 * +(($41 << 1) + -8 | 0) + +($3 << 1 >>> 0)) / $$0)) >>> 0; //@line 20523
 $$$i = $51 >>> 0 > $41 >>> 0 ? $51 : $41; //@line 20525
 HEAP32[$4 + 8 >> 2] = $$$i; //@line 20526
 HEAP32[$4 + 12 >> 2] = ~~+Math_ceil(+($$0 * 4.0 - $$0 * +($$$i >>> 0) * .5 + -1.0)); //@line 20535
 return;
}
function __ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7621
 $1 = $0 + 4 | 0; //@line 7622
 $2 = HEAP32[$1 >> 2] | 0; //@line 7623
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7624
 $3 = _equeue_alloc($2, 4) | 0; //@line 7625
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 664; //@line 7628
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 7630
  HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 7632
  sp = STACKTOP; //@line 7633
  return 0; //@line 7634
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7636
 if (!$3) {
  $$0 = 0; //@line 7639
  return $$0 | 0; //@line 7640
 }
 HEAP32[$3 >> 2] = HEAP32[$0 + 28 >> 2]; //@line 7644
 _equeue_event_delay($3, HEAP32[$0 + 12 >> 2] | 0); //@line 7647
 _equeue_event_period($3, HEAP32[$0 + 16 >> 2] | 0); //@line 7650
 _equeue_event_dtor($3, 665); //@line 7651
 $13 = HEAP32[$1 >> 2] | 0; //@line 7652
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7653
 $14 = _equeue_post($13, 666, $3) | 0; //@line 7654
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 667; //@line 7657
  sp = STACKTOP; //@line 7658
  return 0; //@line 7659
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7661
 $$0 = $14; //@line 7662
 return $$0 | 0; //@line 7663
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_412($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 31192
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31194
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31196
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 31200
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31202
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31204
 $13 = $2 + 12 | 0; //@line 31206
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 31207
 $14 = $2 + 16 | 0; //@line 31208
 HEAP8[$14 >> 0] = $8; //@line 31209
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 31210
 $15 = _equeue_alloc($12, 20) | 0; //@line 31211
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 31215
  ___async_unwind = 0; //@line 31216
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 222; //@line 31218
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $10; //@line 31220
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 31222
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $14; //@line 31224
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $12; //@line 31226
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $2; //@line 31228
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $13; //@line 31230
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $13; //@line 31232
 sp = STACKTOP; //@line 31233
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_287($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 10065
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10067
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10069
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10071
 if ((HEAP32[$2 >> 2] | 0) != 2) {
  HEAP32[___async_retval >> 2] = HEAP32[$6 >> 2]; //@line 10077
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 10081
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $4 + 1836 | 0); //@line 10082
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 441; //@line 10085
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 10086
  HEAP32[$9 >> 2] = $4; //@line 10087
  $10 = $ReallocAsyncCtx4 + 8 | 0; //@line 10088
  HEAP32[$10 >> 2] = $2; //@line 10089
  $11 = $ReallocAsyncCtx4 + 12 | 0; //@line 10090
  HEAP32[$11 >> 2] = $6; //@line 10091
  sp = STACKTOP; //@line 10092
  return;
 }
 ___async_unwind = 0; //@line 10095
 HEAP32[$ReallocAsyncCtx4 >> 2] = 441; //@line 10096
 $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 10097
 HEAP32[$9 >> 2] = $4; //@line 10098
 $10 = $ReallocAsyncCtx4 + 8 | 0; //@line 10099
 HEAP32[$10 >> 2] = $2; //@line 10100
 $11 = $ReallocAsyncCtx4 + 12 | 0; //@line 10101
 HEAP32[$11 >> 2] = $6; //@line 10102
 sp = STACKTOP; //@line 10103
 return;
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb_332($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13082
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13084
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13086
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13088
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13090
 HEAP8[$2 + 2010 >> 0] = HEAP8[$2 + 1941 >> 0] | 0; //@line 13094
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 13095
 __ZN7LoRaPHY9rx_configEP18rx_config_params_t($4, $6) | 0; //@line 13096
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 449; //@line 13099
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 13100
  HEAP32[$12 >> 2] = $8; //@line 13101
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 13102
  HEAP32[$13 >> 2] = $2; //@line 13103
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 13104
  HEAP32[$14 >> 2] = $4; //@line 13105
  sp = STACKTOP; //@line 13106
  return;
 }
 ___async_unwind = 0; //@line 13109
 HEAP32[$ReallocAsyncCtx3 >> 2] = 449; //@line 13110
 $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 13111
 HEAP32[$12 >> 2] = $8; //@line 13112
 $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 13113
 HEAP32[$13 >> 2] = $2; //@line 13114
 $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 13115
 HEAP32[$14 >> 2] = $4; //@line 13116
 sp = STACKTOP; //@line 13117
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_144($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 29507
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29513
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29515
 __ZN7LoRaMac17bind_radio_driverER9LoRaRadio(HEAP32[$0 + 8 >> 2] | 0, $6); //@line 29516
 $11 = HEAP32[(HEAP32[$6 >> 2] | 0) + 72 >> 2] | 0; //@line 29519
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 29520
 FUNCTION_TABLE_vi[$11 & 1023]($6); //@line 29521
 if (___async) {
  HEAP32[$ReallocAsyncCtx16 >> 2] = 199; //@line 29524
  $12 = $ReallocAsyncCtx16 + 4 | 0; //@line 29525
  HEAP32[$12 >> 2] = $6; //@line 29526
  $13 = $ReallocAsyncCtx16 + 8 | 0; //@line 29527
  HEAP32[$13 >> 2] = $8; //@line 29528
  $14 = $ReallocAsyncCtx16 + 12 | 0; //@line 29529
  HEAP32[$14 >> 2] = $6; //@line 29530
  sp = STACKTOP; //@line 29531
  return;
 }
 ___async_unwind = 0; //@line 29534
 HEAP32[$ReallocAsyncCtx16 >> 2] = 199; //@line 29535
 $12 = $ReallocAsyncCtx16 + 4 | 0; //@line 29536
 HEAP32[$12 >> 2] = $6; //@line 29537
 $13 = $ReallocAsyncCtx16 + 8 | 0; //@line 29538
 HEAP32[$13 >> 2] = $8; //@line 29539
 $14 = $ReallocAsyncCtx16 + 12 | 0; //@line 29540
 HEAP32[$14 >> 2] = $6; //@line 29541
 sp = STACKTOP; //@line 29542
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_109($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 25783
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25785
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25787
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25789
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25791
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25793
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25795
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25797
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25799
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(36) | 0; //@line 25800
 __ZN7LoRaPHY18put_radio_to_sleepEv($12); //@line 25801
 if (!___async) {
  ___async_unwind = 0; //@line 25804
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 464; //@line 25806
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 25808
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 25810
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $6; //@line 25812
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $8; //@line 25814
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $10; //@line 25816
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $12; //@line 25818
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $14; //@line 25820
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $16; //@line 25822
 sp = STACKTOP; //@line 25823
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 29128
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29130
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29134
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29136
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29138
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29140
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 29144
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 29147
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 29148
   if (!___async) {
    ___async_unwind = 0; //@line 29151
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 721; //@line 29153
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 29155
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 29157
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 29159
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 29161
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 29163
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 29165
   sp = STACKTOP; //@line 29166
   return;
  }
 }
 return;
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 11441
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 11446
   label = 4; //@line 11447
  } else {
   $$01519 = $0; //@line 11449
   $23 = $1; //@line 11449
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 11454
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 11457
    $23 = $6; //@line 11458
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 11462
     label = 4; //@line 11463
     break;
    } else {
     $$01519 = $6; //@line 11466
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 11472
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 11474
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 11482
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 11490
  } else {
   $$pn = $$0; //@line 11492
   while (1) {
    $19 = $$pn + 1 | 0; //@line 11494
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 11498
     break;
    } else {
     $$pn = $19; //@line 11501
    }
   }
  }
  $$sink = $$1$lcssa; //@line 11506
 }
 return $$sink - $1 | 0; //@line 11509
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $2 = 0, $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2517
 $2 = $0; //@line 2518
 L1 : do {
  switch ($1 | 0) {
  case 1:
   {
    $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 2523
    if ($4 | 0) {
     $7 = HEAP32[$4 >> 2] | 0; //@line 2527
     $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2528
     FUNCTION_TABLE_vi[$7 & 1023]($2 + 40 | 0); //@line 2529
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 105; //@line 2532
      sp = STACKTOP; //@line 2533
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 2536
      break L1;
     }
    }
    break;
   }
  case 2:
   {
    $9 = HEAP32[$2 + 68 >> 2] | 0; //@line 2544
    if ($9 | 0) {
     $12 = HEAP32[$9 >> 2] | 0; //@line 2548
     $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2549
     FUNCTION_TABLE_vi[$12 & 1023]($2 + 56 | 0); //@line 2550
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 106; //@line 2553
      sp = STACKTOP; //@line 2554
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2557
      break L1;
     }
    }
    break;
   }
  default:
   {}
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 16731
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 16738
   $10 = $1 + 16 | 0; //@line 16739
   $11 = HEAP32[$10 >> 2] | 0; //@line 16740
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 16743
    HEAP32[$1 + 24 >> 2] = $4; //@line 16745
    HEAP32[$1 + 36 >> 2] = 1; //@line 16747
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 16757
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 16762
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 16765
    HEAP8[$1 + 54 >> 0] = 1; //@line 16767
    break;
   }
   $21 = $1 + 24 | 0; //@line 16770
   $22 = HEAP32[$21 >> 2] | 0; //@line 16771
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 16774
    $28 = $4; //@line 16775
   } else {
    $28 = $22; //@line 16777
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 16786
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8670
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 8672
 $3 = $0 + 12 | 0; //@line 8673
 $4 = HEAP32[$3 >> 2] | 0; //@line 8674
 do {
  if (!$4) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8678
   _mbed_assert_internal(15037, 15042, 1102); //@line 8679
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 276; //@line 8682
    HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 8684
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8686
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 8688
    sp = STACKTOP; //@line 8689
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8692
    $10 = HEAP32[$3 >> 2] | 0; //@line 8694
    break;
   }
  } else {
   $10 = $4; //@line 8698
  }
 } while (0);
 $9 = HEAP32[$10 >> 2] | 0; //@line 8701
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8702
 FUNCTION_TABLE_vii[$9 & 15]($0, $2); //@line 8703
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 277; //@line 8706
  sp = STACKTOP; //@line 8707
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8710
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7421
 $3 = (HEAP8[$0 + 16 >> 0] | 0) != 0; //@line 7424
 $4 = $0 + 12 | 0; //@line 7425
 $5 = HEAP32[$4 >> 2] | 0; //@line 7426
 do {
  if (!$5) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7430
   _mbed_assert_internal(15037, 15042, 1102); //@line 7431
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 230; //@line 7434
    HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 7436
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7438
    HEAP8[$AsyncCtx2 + 12 >> 0] = $3 & 1; //@line 7441
    sp = STACKTOP; //@line 7442
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7445
    $11 = HEAP32[$4 >> 2] | 0; //@line 7447
    break;
   }
  } else {
   $11 = $5; //@line 7451
  }
 } while (0);
 $10 = HEAP32[$11 >> 2] | 0; //@line 7454
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7455
 FUNCTION_TABLE_vii[$10 & 15]($0, $3); //@line 7456
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 231; //@line 7459
  sp = STACKTOP; //@line 7460
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7463
  return;
 }
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_285($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9948
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9950
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9952
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9954
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9956
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = HEAP32[$8 >> 2]; //@line 9963
  return;
 }
 $11 = (HEAP8[$2 >> 0] | 0) != 0; //@line 9967
 $13 = HEAP32[$4 + 1888 >> 2] | 0; //@line 9969
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 9970
 __ZN7LoRaPHY15setup_rx_windowEbj($6, $11, $13); //@line 9971
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 443; //@line 9974
  $14 = $ReallocAsyncCtx + 4 | 0; //@line 9975
  HEAP32[$14 >> 2] = $2; //@line 9976
  $15 = $ReallocAsyncCtx + 8 | 0; //@line 9977
  HEAP32[$15 >> 2] = $8; //@line 9978
  sp = STACKTOP; //@line 9979
  return;
 }
 ___async_unwind = 0; //@line 9982
 HEAP32[$ReallocAsyncCtx >> 2] = 443; //@line 9983
 $14 = $ReallocAsyncCtx + 4 | 0; //@line 9984
 HEAP32[$14 >> 2] = $2; //@line 9985
 $15 = $ReallocAsyncCtx + 8 | 0; //@line 9986
 HEAP32[$15 >> 2] = $8; //@line 9987
 sp = STACKTOP; //@line 9988
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_256($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 5446
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5448
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5450
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5452
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 5454
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 5456
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 5458
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 5460
 $15 = $4 + 1836 | 0; //@line 5461
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 5462
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($14, $15); //@line 5463
 if (!___async) {
  ___async_unwind = 0; //@line 5466
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 423; //@line 5468
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 5470
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $4; //@line 5472
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $6; //@line 5474
 HEAP16[$ReallocAsyncCtx8 + 16 >> 1] = $8; //@line 5476
 HEAP16[$ReallocAsyncCtx8 + 18 >> 1] = $10; //@line 5478
 HEAP8[$ReallocAsyncCtx8 + 20 >> 0] = $12; //@line 5480
 HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $14; //@line 5482
 HEAP32[$ReallocAsyncCtx8 + 28 >> 2] = $15; //@line 5484
 sp = STACKTOP; //@line 5485
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_101($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25237
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25239
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25241
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25243
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25245
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25247
 $12 = $4 + 12 | 0; //@line 25249
 HEAP32[$4 >> 2] = 404; //@line 25250
 HEAP32[$4 + 4 >> 2] = 0; //@line 25252
 HEAP32[$4 + 8 >> 2] = $2; //@line 25254
 HEAP32[$12 >> 2] = 844; //@line 25255
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 25256
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1856 | 0, $4); //@line 25257
 if (!___async) {
  ___async_unwind = 0; //@line 25260
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 474; //@line 25262
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $12; //@line 25264
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 25266
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 25268
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 25270
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 25272
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $4; //@line 25274
 sp = STACKTOP; //@line 25275
 return;
}
function _mbedtls_cipher_setup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 2507
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$0 = -24832; //@line 2512
  return $$0 | 0; //@line 2513
 }
 dest = $0; //@line 2515
 stop = dest + 68 | 0; //@line 2515
 do {
  HEAP32[dest >> 2] = 0; //@line 2515
  dest = dest + 4 | 0; //@line 2515
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[(HEAP32[$1 + 28 >> 2] | 0) + 24 >> 2] | 0; //@line 2519
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2520
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 2521
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 572; //@line 2524
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2526
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 2528
  sp = STACKTOP; //@line 2529
  return 0; //@line 2530
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2532
 HEAP32[$0 + 60 >> 2] = $8; //@line 2534
 if (!$8) {
  $$0 = -24960; //@line 2537
  return $$0 | 0; //@line 2538
 }
 HEAP32[$0 >> 2] = $1; //@line 2540
 if ((HEAP32[$1 + 4 >> 2] | 0) != 2) {
  $$0 = 0; //@line 2545
  return $$0 | 0; //@line 2546
 }
 HEAP32[$0 + 12 >> 2] = 5; //@line 2549
 HEAP32[$0 + 16 >> 2] = 17; //@line 2551
 $$0 = 0; //@line 2552
 return $$0 | 0; //@line 2553
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 14393
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14397
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14399
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14401
 $9 = $4 + 12 | 0; //@line 14403
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 14404
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 14405
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 1) | 0; //@line 14406
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 344; //@line 14409
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 14410
  HEAP32[$11 >> 2] = $9; //@line 14411
  $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 14412
  HEAP32[$12 >> 2] = $8; //@line 14413
  sp = STACKTOP; //@line 14414
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 14418
 ___async_unwind = 0; //@line 14419
 HEAP32[$ReallocAsyncCtx5 >> 2] = 344; //@line 14420
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 14421
 HEAP32[$11 >> 2] = $9; //@line 14422
 $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 14423
 HEAP32[$12 >> 2] = $8; //@line 14424
 sp = STACKTOP; //@line 14425
 return;
}
function __ZN7LoRaPHY11add_channelEPK16channel_params_th__async_cb($0) {
 $0 = $0 | 0;
 var $$026 = 0, $10 = 0, $12 = 0, $2 = 0, $22 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 6466
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6468
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6470
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6472
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  $$026 = $2 ? -1006 : -1004; //@line 6478
  $27 = ___async_retval; //@line 6479
  HEAP32[$27 >> 2] = $$026; //@line 6480
  return;
 }
 if ($2) {
  $$026 = $2 ? -1005 : -1004; //@line 6485
  $27 = ___async_retval; //@line 6486
  HEAP32[$27 >> 2] = $$026; //@line 6487
  return;
 }
 $10 = $4 + 124 | 0; //@line 6490
 $12 = (HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 6492
 HEAP32[$12 >> 2] = HEAP32[$8 >> 2]; //@line 6493
 HEAP32[$12 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 6493
 HEAP32[$12 + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 6493
 HEAP8[(HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$8 + 9 >> 0] | 0; //@line 6498
 $22 = (HEAP32[$4 + 116 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 6504
 HEAP16[$22 >> 1] = 1 << ($6 & 15) | (HEAPU16[$22 >> 1] | 0); //@line 6509
 $$026 = 0; //@line 6510
 $27 = ___async_retval; //@line 6511
 HEAP32[$27 >> 2] = $$026; //@line 6512
 return;
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16225
 $1 = HEAP32[2599] | 0; //@line 16226
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 16232
 } else {
  $19 = 0; //@line 16234
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 16240
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 16246
    $12 = HEAP32[$11 >> 2] | 0; //@line 16247
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 16253
     HEAP8[$12 >> 0] = 10; //@line 16254
     $22 = 0; //@line 16255
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 16259
   $17 = ___overflow($1, 10) | 0; //@line 16260
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 698; //@line 16263
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 16265
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 16267
    sp = STACKTOP; //@line 16268
    return 0; //@line 16269
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16271
    $22 = $17 >> 31; //@line 16273
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 16280
 }
 return $22 | 0; //@line 16282
}
function __ZN4mbed11InterruptInD0Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2448
 HEAP32[$0 >> 2] = 604; //@line 2449
 _gpio_irq_free($0 + 28 | 0); //@line 2451
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 2453
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 2459
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2460
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 2461
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 103; //@line 2464
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2466
    sp = STACKTOP; //@line 2467
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2470
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 2476
 if (!$10) {
  __ZdlPv($0); //@line 2479
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 2484
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2485
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 2486
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 104; //@line 2489
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2491
  sp = STACKTOP; //@line 2492
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2495
 __ZdlPv($0); //@line 2496
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_324($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12628
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12632
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12634
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12636
 $9 = $4 + 12 | 0; //@line 12638
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 12639
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 12640
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 11) | 0; //@line 12641
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 263; //@line 12644
  $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 12645
  HEAP32[$11 >> 2] = $9; //@line 12646
  $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 12647
  HEAP32[$12 >> 2] = $8; //@line 12648
  sp = STACKTOP; //@line 12649
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 12653
 ___async_unwind = 0; //@line 12654
 HEAP32[$ReallocAsyncCtx7 >> 2] = 263; //@line 12655
 $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 12656
 HEAP32[$11 >> 2] = $9; //@line 12657
 $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 12658
 HEAP32[$12 >> 2] = $8; //@line 12659
 sp = STACKTOP; //@line 12660
 return;
}
function __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30733
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30735
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30737
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30739
 $7 = $2 + 12 | 0; //@line 30740
 $8 = HEAP32[$7 >> 2] | 0; //@line 30741
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 30744
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 30748
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 30749
 FUNCTION_TABLE_vii[$11 & 15]($6, $2); //@line 30750
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 497; //@line 30753
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 30754
  HEAP32[$12 >> 2] = $7; //@line 30755
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 30756
  HEAP32[$13 >> 2] = $4; //@line 30757
  sp = STACKTOP; //@line 30758
  return;
 }
 ___async_unwind = 0; //@line 30761
 HEAP32[$ReallocAsyncCtx2 >> 2] = 497; //@line 30762
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 30763
 HEAP32[$12 >> 2] = $7; //@line 30764
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 30765
 HEAP32[$13 >> 2] = $4; //@line 30766
 sp = STACKTOP; //@line 30767
 return;
}
function __ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_404($0) {
 $0 = $0 | 0;
 var $16 = 0, $17 = 0, $2 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30491
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30493
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30497
 __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t(HEAP32[$0 + 8 >> 2] | 0, HEAP8[$2 + 1916 >> 0] | 0, HEAP8[$2 + 1884 >> 0] | 0, HEAP32[$2 + 1880 >> 2] | 0, $2 + 1964 | 0); //@line 30505
 if ((HEAP32[$6 >> 2] | 0) != 2) {
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 30512
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1836 | 0); //@line 30513
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 457; //@line 30516
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 30517
  HEAP32[$16 >> 2] = $2; //@line 30518
  $17 = $ReallocAsyncCtx5 + 8 | 0; //@line 30519
  HEAP32[$17 >> 2] = $6; //@line 30520
  sp = STACKTOP; //@line 30521
  return;
 }
 ___async_unwind = 0; //@line 30524
 HEAP32[$ReallocAsyncCtx5 >> 2] = 457; //@line 30525
 $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 30526
 HEAP32[$16 >> 2] = $2; //@line 30527
 $17 = $ReallocAsyncCtx5 + 8 | 0; //@line 30528
 HEAP32[$17 >> 2] = $6; //@line 30529
 sp = STACKTOP; //@line 30530
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 25002
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25006
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25008
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25010
 $9 = $4 + 12 | 0; //@line 25012
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 25013
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 25014
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 11) | 0; //@line 25015
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 315; //@line 25018
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 25019
  HEAP32[$11 >> 2] = $9; //@line 25020
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 25021
  HEAP32[$12 >> 2] = $8; //@line 25022
  sp = STACKTOP; //@line 25023
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 25027
 ___async_unwind = 0; //@line 25028
 HEAP32[$ReallocAsyncCtx3 >> 2] = 315; //@line 25029
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 25030
 HEAP32[$11 >> 2] = $9; //@line 25031
 $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 25032
 HEAP32[$12 >> 2] = $8; //@line 25033
 sp = STACKTOP; //@line 25034
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_303($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11481
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11485
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11487
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11489
 $9 = $4 + 12 | 0; //@line 11491
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 11492
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 11493
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 4) | 0; //@line 11494
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 251; //@line 11497
  $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 11498
  HEAP32[$11 >> 2] = $9; //@line 11499
  $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 11500
  HEAP32[$12 >> 2] = $8; //@line 11501
  sp = STACKTOP; //@line 11502
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 11506
 ___async_unwind = 0; //@line 11507
 HEAP32[$ReallocAsyncCtx7 >> 2] = 251; //@line 11508
 $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 11509
 HEAP32[$11 >> 2] = $9; //@line 11510
 $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 11511
 HEAP32[$12 >> 2] = $8; //@line 11512
 sp = STACKTOP; //@line 11513
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_301($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 11414
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11418
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11420
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11422
 $9 = $4 + 12 | 0; //@line 11424
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 11425
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 11426
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 3) | 0; //@line 11427
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 247; //@line 11430
  $11 = $ReallocAsyncCtx8 + 4 | 0; //@line 11431
  HEAP32[$11 >> 2] = $9; //@line 11432
  $12 = $ReallocAsyncCtx8 + 8 | 0; //@line 11433
  HEAP32[$12 >> 2] = $8; //@line 11434
  sp = STACKTOP; //@line 11435
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 11439
 ___async_unwind = 0; //@line 11440
 HEAP32[$ReallocAsyncCtx8 >> 2] = 247; //@line 11441
 $11 = $ReallocAsyncCtx8 + 4 | 0; //@line 11442
 HEAP32[$11 >> 2] = $9; //@line 11443
 $12 = $ReallocAsyncCtx8 + 8 | 0; //@line 11444
 HEAP32[$12 >> 2] = $8; //@line 11445
 sp = STACKTOP; //@line 11446
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 12395
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12399
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12401
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12403
 $9 = $4 + 12 | 0; //@line 12405
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 12406
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 12407
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 9) | 0; //@line 12408
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 255; //@line 12411
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 12412
  HEAP32[$11 >> 2] = $9; //@line 12413
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 12414
  HEAP32[$12 >> 2] = $8; //@line 12415
  sp = STACKTOP; //@line 12416
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 12420
 ___async_unwind = 0; //@line 12421
 HEAP32[$ReallocAsyncCtx9 >> 2] = 255; //@line 12422
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 12423
 HEAP32[$11 >> 2] = $9; //@line 12424
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 12425
 HEAP32[$12 >> 2] = $8; //@line 12426
 sp = STACKTOP; //@line 12427
 return;
}
function _mbed_vtracef__async_cb_36($0) {
 $0 = $0 | 0;
 var $$18 = 0, $10 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21258
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21260
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21262
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21264
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 21269
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21271
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 21276
 $16 = _snprintf($4, $6, 12292, $2) | 0; //@line 21277
 $$18 = ($16 | 0) >= ($6 | 0) ? 0 : $16; //@line 21279
 $19 = $4 + $$18 | 0; //@line 21281
 $20 = $6 - $$18 | 0; //@line 21282
 if (($$18 | 0) > 0) {
  if (!(($$18 | 0) < 1 | ($20 | 0) < 1 | $10 ^ 1)) {
   _snprintf($19, $20, 12370, $12) | 0; //@line 21290
  }
 }
 $23 = HEAP32[174] | 0; //@line 21293
 $24 = HEAP32[167] | 0; //@line 21294
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 21295
 FUNCTION_TABLE_vi[$23 & 1023]($24); //@line 21296
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 21299
  sp = STACKTOP; //@line 21300
  return;
 }
 ___async_unwind = 0; //@line 21303
 HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 21304
 sp = STACKTOP; //@line 21305
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 11347
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11351
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11353
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11355
 $9 = $4 + 12 | 0; //@line 11357
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 11358
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 11359
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 2) | 0; //@line 11360
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 243; //@line 11363
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 11364
  HEAP32[$11 >> 2] = $9; //@line 11365
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 11366
  HEAP32[$12 >> 2] = $8; //@line 11367
  sp = STACKTOP; //@line 11368
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 11372
 ___async_unwind = 0; //@line 11373
 HEAP32[$ReallocAsyncCtx9 >> 2] = 243; //@line 11374
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 11375
 HEAP32[$11 >> 2] = $9; //@line 11376
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 11377
 HEAP32[$12 >> 2] = $8; //@line 11378
 sp = STACKTOP; //@line 11379
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10388
 STACKTOP = STACKTOP + 16 | 0; //@line 10389
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10389
 if (!$1) {
  $$0 = -1003; //@line 10393
 } else {
  _mbed_tracef(16, 12506, 12833, sp); //@line 10395
  HEAP32[$0 + 3136 >> 2] = $1; //@line 10397
  $4 = $0 + 2480 | 0; //@line 10398
  $6 = (HEAP32[$4 >> 2] | 0) == 0; //@line 10400
  HEAP32[$4 >> 2] = 2; //@line 10401
  if ($6) {
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10403
   $7 = __ZN7LoRaMac10initializeEPN6events10EventQueueE($0, $1) | 0; //@line 10404
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 337; //@line 10407
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 10409
    sp = STACKTOP; //@line 10410
    STACKTOP = sp; //@line 10411
    return 0; //@line 10411
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 10413
   if (!$7) {
    HEAP32[$4 >> 2] = 2; //@line 10416
    $$0 = 0; //@line 10417
   } else {
    $$0 = $7; //@line 10419
   }
  } else {
   $$0 = 0; //@line 10422
  }
 }
 STACKTOP = sp; //@line 10425
 return $$0 | 0; //@line 10425
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 25995
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25997
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25999
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26001
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26003
 HEAP32[$4 + 12 >> 2] = HEAP32[$2 >> 2]; //@line 26006
 _equeue_event_dtor($4, 282); //@line 26007
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 26008
 $10 = _equeue_post($6, 283, $4) | 0; //@line 26009
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 386; //@line 26012
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 26013
  HEAP32[$11 >> 2] = $2; //@line 26014
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 26015
  HEAP32[$12 >> 2] = $8; //@line 26016
  sp = STACKTOP; //@line 26017
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 26021
 ___async_unwind = 0; //@line 26022
 HEAP32[$ReallocAsyncCtx3 >> 2] = 386; //@line 26023
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 26024
 HEAP32[$11 >> 2] = $2; //@line 26025
 $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 26026
 HEAP32[$12 >> 2] = $8; //@line 26027
 sp = STACKTOP; //@line 26028
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_226($0) {
 $0 = $0 | 0;
 var $$pre$i$i4 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 3103
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3109
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3111
 $$pre$i$i4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 3112
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i4; //@line 3113
 if (!$$pre$i$i4) {
  _gpio_irq_set($8 + 28 | 0, 2, 0); //@line 3117
  return;
 }
 $12 = HEAP32[$$pre$i$i4 + 8 >> 2] | 0; //@line 3122
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 3123
 FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 3124
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 111; //@line 3127
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 3128
  HEAP32[$13 >> 2] = $6; //@line 3129
  $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 3130
  HEAP32[$14 >> 2] = $8; //@line 3131
  sp = STACKTOP; //@line 3132
  return;
 }
 ___async_unwind = 0; //@line 3135
 HEAP32[$ReallocAsyncCtx5 >> 2] = 111; //@line 3136
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 3137
 HEAP32[$13 >> 2] = $6; //@line 3138
 $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 3139
 HEAP32[$14 >> 2] = $8; //@line 3140
 sp = STACKTOP; //@line 3141
 return;
}
function __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre$phiZ2D = 0, $26 = 0;
 if ($2) {
  HEAP8[$1 + 11 >> 0] = HEAP8[$0 + 12 >> 0] | 0; //@line 22558
  HEAP32[$1 + 720 >> 2] = HEAPU16[$0 + 36 >> 1]; //@line 22563
  HEAP32[$1 + 724 >> 2] = HEAPU16[$0 + 38 >> 1]; //@line 22568
  HEAP32[$1 + 728 >> 2] = HEAPU16[$0 + 40 >> 1]; //@line 22573
  HEAP32[$1 + 732 >> 2] = HEAPU16[$0 + 42 >> 1]; //@line 22578
  HEAP32[$1 + 736 >> 2] = HEAPU16[$0 + 44 >> 1]; //@line 22583
  $26 = $0 + 128 | 0; //@line 22584
  HEAP8[$1 + 753 >> 0] = (HEAPU8[$26 >> 0] | 0) >>> 1 & 1; //@line 22589
  $$pre$phiZ2D = $26; //@line 22590
 } else {
  $$pre$phiZ2D = $0 + 128 | 0; //@line 22593
 }
 HEAP8[$1 + 708 >> 0] = HEAP8[$0 + 23 >> 0] | 0; //@line 22598
 HEAP8[$1 + 709 >> 0] = HEAP8[$0 + 30 >> 0] | 0; //@line 22602
 HEAP8[$1 + 741 >> 0] = HEAP8[$0 + 34 >> 0] | 0; //@line 22606
 HEAP32[$1 + 744 >> 2] = HEAP32[$0 + 68 >> 2]; //@line 22610
 HEAP8[$1 + 748 >> 0] = HEAP8[$0 + 64 >> 0] | 0; //@line 22614
 HEAP8[$1 + 752 >> 0] = HEAP8[$$pre$phiZ2D >> 0] & 1; //@line 22618
 HEAP32[$1 + 756 >> 2] = HEAP32[$0 + 56 >> 2]; //@line 22622
 HEAP32[$1 + 760 >> 2] = HEAP32[$0 + 60 >> 2]; //@line 22626
 return;
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2900
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2902
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2904
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2906
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2908
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2910
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2912
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2914
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 2004 >> 2] = 1; //@line 2920
  return;
 }
 if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($2) | 0) {
  HEAP32[$4 + 2060 >> 2] = 4; //@line 2926
  HEAP8[$4 + 2064 >> 0] = 1; //@line 2928
  __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($2); //@line 2929
 }
 $26 = $10 & 255; //@line 2934
 $27 = $4 + 1442 | 0; //@line 2935
 if (!(__ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($4 + 756 | 0, $6 + $8 | 0, $26, $12, 128, $14, 1, $16, $27) | 0)) {
  HEAP32[$4 + 2012 >> 2] = $27; //@line 2940
  HEAP16[$4 + 2016 >> 1] = $26; //@line 2942
  HEAP8[$4 + 2018 >> 0] = 1; //@line 2944
  return;
 } else {
  HEAP32[$4 + 2004 >> 2] = 13; //@line 2948
  return;
 }
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6864
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6866
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6868
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6870
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6872
 HEAP32[$4 + 12 >> 2] = HEAP32[$2 >> 2]; //@line 6875
 _equeue_event_dtor($4, 282); //@line 6876
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 6877
 $10 = _equeue_post($6, 283, $4) | 0; //@line 6878
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 284; //@line 6881
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 6882
  HEAP32[$11 >> 2] = $2; //@line 6883
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 6884
  HEAP32[$12 >> 2] = $8; //@line 6885
  sp = STACKTOP; //@line 6886
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 6890
 ___async_unwind = 0; //@line 6891
 HEAP32[$ReallocAsyncCtx3 >> 2] = 284; //@line 6892
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 6893
 HEAP32[$11 >> 2] = $2; //@line 6894
 $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 6895
 HEAP32[$12 >> 2] = $8; //@line 6896
 sp = STACKTOP; //@line 6897
 return;
}
function __ZN7LoRaMac24get_max_possible_tx_sizeEh__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $28 = 0, $6 = 0, $8 = 0, $or$cond$i = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28598
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28602
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28604
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28606
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 28608
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 1173 | 0; //@line 28610
 $17 = __ZN7LoRaPHY15get_max_payloadEhb($6, HEAP8[$2 >> 0] | 0, (HEAP8[$14 >> 0] | 0) != 0) | 0; //@line 28613
 $18 = $17 & 255; //@line 28614
 $19 = $8 & 255; //@line 28615
 if ($19 >>> 0 > $18 >>> 0) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($10); //@line 28618
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($10); //@line 28619
  $$0 = 0; //@line 28620
  $$09 = $17; //@line 28620
 } else {
  $$0 = $19; //@line 28624
  $$09 = $18 - $8 & 255; //@line 28624
 }
 $28 = $$0 + ($12 & 255) | 0; //@line 28631
 $or$cond$i = $28 >>> 0 < 256 & $28 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb($6, HEAP8[$2 >> 0] | 0, (HEAP8[$14 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 28635
 HEAP8[___async_retval >> 0] = $or$cond$i ? $17 : $$09; //@line 28638
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_386($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 29176
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29182
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29184
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29186
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29188
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 29193
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 29195
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 29196
 if (!___async) {
  ___async_unwind = 0; //@line 29199
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 721; //@line 29201
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 29203
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 29205
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 29207
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 29209
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 29211
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 29213
 sp = STACKTOP; //@line 29214
 return;
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$1 = 0, $12 = 0, $21 = 0, $3 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21145
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 21147
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 64 >> 2] | 0; //@line 21150
 $8 = HEAP32[$1 + 4 >> 2] | 0; //@line 21152
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 21153
 $9 = FUNCTION_TABLE_iii[$6 & 15]($3, $8) | 0; //@line 21154
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 531; //@line 21157
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 21159
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 21161
  sp = STACKTOP; //@line 21162
  return 0; //@line 21163
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 21165
  $$ = $9 ? 7 : 6; //@line 21166
  $12 = HEAP8[$1 >> 0] | 0; //@line 21167
  $$1 = ($12 << 24 >> 24 >= (HEAP8[$0 + 28 >> 0] | 0) ? $12 << 24 >> 24 <= (HEAP8[$0 + 29 >> 0] | 0) : 0) ? $$ : $$ & 5; //@line 21176
  $21 = HEAP8[$1 + 1 >> 0] | 0; //@line 21178
  return (($21 << 24 >> 24 >= (HEAP8[$0 + 32 >> 0] | 0) ? $21 << 24 >> 24 <= (HEAP8[$0 + 33 >> 0] | 0) : 0) ? $$1 : $$1 & 3) | 0; //@line 21188
 }
 return 0; //@line 21190
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_264($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6005
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6009
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6011
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6013
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 6016
 $10 = HEAP32[$4 >> 2] | 0; //@line 6017
 $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 76 >> 2] | 0; //@line 6020
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 6021
 FUNCTION_TABLE_vi[$13 & 1023]($10); //@line 6022
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 530; //@line 6025
  $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 6026
  HEAP32[$14 >> 2] = $6; //@line 6027
  $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 6028
  HEAP32[$15 >> 2] = $8; //@line 6029
  sp = STACKTOP; //@line 6030
  return;
 }
 ___async_unwind = 0; //@line 6033
 HEAP32[$ReallocAsyncCtx7 >> 2] = 530; //@line 6034
 $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 6035
 HEAP32[$14 >> 2] = $6; //@line 6036
 $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 6037
 HEAP32[$15 >> 2] = $8; //@line 6038
 sp = STACKTOP; //@line 6039
 return;
}
function __ZN7LoRaPHY26get_next_lower_tx_datarateEa($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1$i = 0, $$1$lcssa$i = 0, $$18$i = 0, $$19$i = 0, $10 = 0, $18 = 0, $19 = 0, $21 = 0, $8 = 0, $9 = 0, label = 0;
 $8 = $0 + 88 | 0; //@line 22643
 $9 = $1 & 255; //@line 22644
 $10 = HEAP8[((HEAP8[$0 + 128 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 22645
 $$18$i = ($9 | 0) == ($10 | 0) ? $1 : $9 + 255 & 255; //@line 22649
 if (($$18$i & 255 | 0) == ($10 | 0)) {
  $$1$lcssa$i = $$18$i; //@line 22653
  return $$1$lcssa$i | 0; //@line 22654
 }
 $18 = HEAPU8[$0 + 92 >> 0] | 0; //@line 22658
 $$19$i = $$18$i; //@line 22659
 while (1) {
  $19 = $$19$i << 24 >> 24; //@line 22661
  if (($19 | 0) < ($18 | 0)) {
   if (HEAP8[(HEAP32[$8 >> 2] | 0) + $19 >> 0] | 0) {
    $$1$lcssa$i = $$19$i; //@line 22669
    label = 6; //@line 22670
    break;
   }
  }
  $21 = $$19$i & 255; //@line 22674
  $$1$i = ($21 | 0) == ($10 | 0) ? $$19$i : $21 + 255 & 255; //@line 22678
  if (($$1$i & 255 | 0) == ($10 | 0)) {
   $$1$lcssa$i = $$1$i; //@line 22682
   label = 6; //@line 22683
   break;
  } else {
   $$19$i = $$1$i; //@line 22686
  }
 }
 if ((label | 0) == 6) {
  return $$1$lcssa$i | 0; //@line 22690
 }
 return 0; //@line 22692
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_262($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5908
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5910
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5914
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5916
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5918
 $11 = HEAP32[$2 >> 2] | 0; //@line 5919
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 5922
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 5923
 $17 = HEAP16[$15 >> 1] & 255; //@line 5925
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 5926
 FUNCTION_TABLE_viii[$14 & 7]($11, 1, $17); //@line 5927
 if (!___async) {
  ___async_unwind = 0; //@line 5930
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 528; //@line 5932
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 5934
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 5936
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 1; //@line 5938
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 5940
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 5942
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 5944
 sp = STACKTOP; //@line 5945
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_261($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5864
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5866
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5870
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5872
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5874
 $11 = HEAP32[$2 >> 2] | 0; //@line 5875
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 5878
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 5879
 $17 = HEAP16[$15 >> 1] & 255; //@line 5881
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 5882
 FUNCTION_TABLE_viii[$14 & 7]($11, 0, $17); //@line 5883
 if (!___async) {
  ___async_unwind = 0; //@line 5886
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 528; //@line 5888
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 5890
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 5892
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 0; //@line 5894
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 5896
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 5898
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 5900
 sp = STACKTOP; //@line 5901
 return;
}
function __ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_406($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30571
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30573
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30575
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30577
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  return;
 }
 $9 = (HEAP8[$2 >> 0] | 0) != 0; //@line 30585
 $11 = HEAP32[$4 + 1888 >> 2] | 0; //@line 30587
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 30588
 __ZN7LoRaPHY15setup_rx_windowEbj($6, $9, $11); //@line 30589
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 459; //@line 30592
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 30593
  HEAP32[$12 >> 2] = $2; //@line 30594
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 30595
  HEAP32[$13 >> 2] = $4; //@line 30596
  sp = STACKTOP; //@line 30597
  return;
 }
 ___async_unwind = 0; //@line 30600
 HEAP32[$ReallocAsyncCtx >> 2] = 459; //@line 30601
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 30602
 HEAP32[$12 >> 2] = $2; //@line 30603
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 30604
 HEAP32[$13 >> 2] = $4; //@line 30605
 sp = STACKTOP; //@line 30606
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11057
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11059
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 11061
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11063
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11065
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11067
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11069
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11071
 $17 = HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] | 0; //@line 11074
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 11075
 FUNCTION_TABLE_viiiiiiiiiiiiii[$17 & 1]($2, 0, $4, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $6); //@line 11076
 if (!___async) {
  ___async_unwind = 0; //@line 11079
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 68; //@line 11081
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 11083
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 11085
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 11087
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 11089
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $14; //@line 11091
 sp = STACKTOP; //@line 11092
 return;
}
function __ZN4mbed5TimerC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2936
 HEAP32[$0 >> 2] = 0; //@line 2937
 $1 = $0 + 8 | 0; //@line 2938
 $2 = $0 + 16 | 0; //@line 2939
 HEAP32[$1 >> 2] = 0; //@line 2940
 HEAP32[$1 + 4 >> 2] = 0; //@line 2940
 HEAP32[$1 + 8 >> 2] = 0; //@line 2940
 HEAP32[$1 + 12 >> 2] = 0; //@line 2940
 $4 = $0 + 24 | 0; //@line 2942
 HEAP32[$4 >> 2] = _get_us_ticker_data() | 0; //@line 2943
 HEAP8[$0 + 28 >> 0] = 1; //@line 2945
 $6 = HEAP32[$4 >> 2] | 0; //@line 2946
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2947
 $7 = _ticker_read_us($6) | 0; //@line 2948
 $8 = tempRet0; //@line 2949
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 120; //@line 2952
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2954
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 2956
  sp = STACKTOP; //@line 2957
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2960
  $11 = $1; //@line 2961
  HEAP32[$11 >> 2] = $7; //@line 2963
  HEAP32[$11 + 4 >> 2] = $8; //@line 2966
  $15 = $2; //@line 2967
  HEAP32[$15 >> 2] = 0; //@line 2969
  HEAP32[$15 + 4 >> 2] = 0; //@line 2972
  return;
 }
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29283
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29285
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29287
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29289
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 29291
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 29293
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 18562; //@line 29298
  HEAP32[$4 + 4 >> 2] = $6; //@line 29300
  _abort_message(18471, $4); //@line 29301
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 29304
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 29307
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 29308
 $16 = FUNCTION_TABLE_ii[$15 & 15]($12) | 0; //@line 29309
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 29313
  ___async_unwind = 0; //@line 29314
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 700; //@line 29316
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 29318
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 29320
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 29322
 sp = STACKTOP; //@line 29323
 return;
}
function _mbedtls_gcm_setkey__async_cb_355($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15397
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15399
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15401
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15403
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15405
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15407
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15409
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15411
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 15415
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 15418
 $15 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 15419
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 15423
  ___async_unwind = 0; //@line 15424
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 592; //@line 15426
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 15428
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 15430
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 15432
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 15434
 sp = STACKTOP; //@line 15435
 return;
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1591
 STACKTOP = STACKTOP + 16 | 0; //@line 1592
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1592
 _mbed_tracef(16, 11020, 11537, sp); //@line 1594
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 1596
 HEAP8[$0 + 688 >> 0] = 0; //@line 1598
 $4 = HEAP32[$0 + 788 >> 2] | 0; //@line 1600
 if (!$4) {
  STACKTOP = sp; //@line 1603
  return;
 }
 $7 = HEAP32[$4 + 44 >> 2] | 0; //@line 1606
 if (!$7) {
  STACKTOP = sp; //@line 1609
  return;
 }
 $13 = HEAPU8[$0 + 782 >> 0] | 0; //@line 1615
 $16 = HEAP8[$0 + 781 >> 0] | 0; //@line 1618
 $18 = HEAP8[$0 + 780 >> 0] | 0; //@line 1620
 $19 = HEAP32[$7 >> 2] | 0; //@line 1621
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1622
 FUNCTION_TABLE_viiiii[$19 & 7]($4 + 32 | 0, $0 + 792 | 0, $13, $16, $18); //@line 1623
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 84; //@line 1626
  sp = STACKTOP; //@line 1627
  STACKTOP = sp; //@line 1628
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1630
 STACKTOP = sp; //@line 1631
 return;
}
function __ZN7LoRaMac15open_rx2_windowEv__async_cb_53($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22318
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22320
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22322
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22324
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  return;
 }
 $9 = (HEAP8[$2 >> 0] | 0) != 0; //@line 22332
 $11 = HEAP32[$4 + 1888 >> 2] | 0; //@line 22334
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 22335
 __ZN7LoRaPHY15setup_rx_windowEbj($6, $9, $11); //@line 22336
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 380; //@line 22339
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 22340
  HEAP32[$12 >> 2] = $2; //@line 22341
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 22342
  HEAP32[$13 >> 2] = $4; //@line 22343
  sp = STACKTOP; //@line 22344
  return;
 }
 ___async_unwind = 0; //@line 22347
 HEAP32[$ReallocAsyncCtx >> 2] = 380; //@line 22348
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 22349
 HEAP32[$12 >> 2] = $2; //@line 22350
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 22351
 HEAP32[$13 >> 2] = $4; //@line 22352
 sp = STACKTOP; //@line 22353
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 15175
 while (1) {
  if ((HEAPU8[16534 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 15182
   break;
  }
  $7 = $$016 + 1 | 0; //@line 15185
  if (($7 | 0) == 87) {
   $$01214 = 16622; //@line 15188
   $$115 = 87; //@line 15188
   label = 5; //@line 15189
   break;
  } else {
   $$016 = $7; //@line 15192
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 16622; //@line 15198
  } else {
   $$01214 = 16622; //@line 15200
   $$115 = $$016; //@line 15200
   label = 5; //@line 15201
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 15206
   $$113 = $$01214; //@line 15207
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 15211
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 15218
   if (!$$115) {
    $$012$lcssa = $$113; //@line 15221
    break;
   } else {
    $$01214 = $$113; //@line 15224
    label = 5; //@line 15225
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 15232
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 16590
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 16599
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 16604
      HEAP32[$13 >> 2] = $2; //@line 16605
      $19 = $1 + 40 | 0; //@line 16606
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 16609
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 16619
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 16623
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 16630
    }
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_183($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 393
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 395
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 397
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 399
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 401
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 403
 $12 = (HEAP8[___async_retval >> 0] | 0) == 0; //@line 406
 $13 = HEAP32[$10 >> 2] | 0; //@line 407
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 76 >> 2] | 0; //@line 410
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 411
 FUNCTION_TABLE_vi[$16 & 1023]($13); //@line 412
 if (!___async) {
  ___async_unwind = 0; //@line 415
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 517; //@line 417
 HEAP8[$ReallocAsyncCtx3 + 4 >> 0] = $2; //@line 419
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 421
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 423
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 425
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 427
 HEAP8[$ReallocAsyncCtx3 + 24 >> 0] = $12 & 1; //@line 430
 sp = STACKTOP; //@line 431
 return;
}
function _mbedtls_gcm_setkey__async_cb_356($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15442
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15444
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15446
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15448
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15450
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15452
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15454
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15456
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 15457
 $15 = _mbedtls_cipher_setup($2, $4) | 0; //@line 15458
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 15462
  ___async_unwind = 0; //@line 15463
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 591; //@line 15465
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 15467
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 15469
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $8; //@line 15471
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $10; //@line 15473
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $12; //@line 15475
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $14; //@line 15477
 sp = STACKTOP; //@line 15478
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_26($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $28 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20224
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20226
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20232
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20234
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = (HEAPU8[$2 + 18 >> 0] | 0) << 16 | (HEAPU8[$2 + 19 >> 0] | 0) << 24 | (HEAPU8[$2 + 17 >> 0] | 0) << 8 | (HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0); //@line 20254
  $$0 = 0; //@line 20255
 } else {
  $$0 = $AsyncRetVal; //@line 20257
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 20259
 _mbedtls_cipher_free($8); //@line 20260
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 20263
  $28 = $ReallocAsyncCtx5 + 4 | 0; //@line 20264
  HEAP32[$28 >> 2] = $$0; //@line 20265
  sp = STACKTOP; //@line 20266
  return;
 }
 ___async_unwind = 0; //@line 20269
 HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 20270
 $28 = $ReallocAsyncCtx5 + 4 | 0; //@line 20271
 HEAP32[$28 >> 2] = $$0; //@line 20272
 sp = STACKTOP; //@line 20273
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4405
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4407
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4409
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4413
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 4417
  label = 4; //@line 4418
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 4423
   label = 4; //@line 4424
  } else {
   $$037$off039 = 3; //@line 4426
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 4430
  $17 = $8 + 40 | 0; //@line 4431
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 4434
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 4444
    $$037$off039 = $$037$off038; //@line 4445
   } else {
    $$037$off039 = $$037$off038; //@line 4447
   }
  } else {
   $$037$off039 = $$037$off038; //@line 4450
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 4453
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_395($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $28 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29956
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29958
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29964
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29966
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = (HEAPU8[$2 + 18 >> 0] | 0) << 16 | (HEAPU8[$2 + 19 >> 0] | 0) << 24 | (HEAPU8[$2 + 17 >> 0] | 0) << 8 | (HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0); //@line 29986
  $$0 = 0; //@line 29987
 } else {
  $$0 = $AsyncRetVal; //@line 29989
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 29991
 _mbedtls_cipher_free($8); //@line 29992
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 503; //@line 29995
  $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 29996
  HEAP32[$28 >> 2] = $$0; //@line 29997
  sp = STACKTOP; //@line 29998
  return;
 }
 ___async_unwind = 0; //@line 30001
 HEAP32[$ReallocAsyncCtx6 >> 2] = 503; //@line 30002
 $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 30003
 HEAP32[$28 >> 2] = $$0; //@line 30004
 sp = STACKTOP; //@line 30005
 return;
}
function __ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE__async_cb_248($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4746
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4748
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4750
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4752
 if (!$AsyncRetVal) {
  HEAP32[___async_retval >> 2] = 0; //@line 4756
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = HEAP32[$2 + 28 >> 2]; //@line 4761
 _equeue_event_delay($AsyncRetVal, HEAP32[$2 + 12 >> 2] | 0); //@line 4764
 _equeue_event_period($AsyncRetVal, HEAP32[$2 + 16 >> 2] | 0); //@line 4767
 _equeue_event_dtor($AsyncRetVal, 665); //@line 4768
 $13 = HEAP32[$4 >> 2] | 0; //@line 4769
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 4770
 $14 = _equeue_post($13, 666, $AsyncRetVal) | 0; //@line 4771
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 667; //@line 4774
  sp = STACKTOP; //@line 4775
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 4779
 ___async_unwind = 0; //@line 4780
 HEAP32[$ReallocAsyncCtx >> 2] = 667; //@line 4781
 sp = STACKTOP; //@line 4782
 return;
}
function __ZN4mbed11InterruptInD2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2397
 HEAP32[$0 >> 2] = 604; //@line 2398
 _gpio_irq_free($0 + 28 | 0); //@line 2400
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 2402
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 2408
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2409
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 2410
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 101; //@line 2413
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2415
    sp = STACKTOP; //@line 2416
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2419
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 2425
 if (!$10) {
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 2432
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2433
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 2434
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 102; //@line 2437
  sp = STACKTOP; //@line 2438
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2441
 return;
}
function _strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $5 = 0;
 $2 = HEAP8[$1 >> 0] | 0; //@line 15248
 do {
  if (!($2 << 24 >> 24)) {
   $$0 = $0; //@line 15252
  } else {
   $5 = _strchr($0, $2 << 24 >> 24) | 0; //@line 15255
   if (!$5) {
    $$0 = 0; //@line 15258
   } else {
    if (!(HEAP8[$1 + 1 >> 0] | 0)) {
     $$0 = $5; //@line 15264
    } else {
     if (!(HEAP8[$5 + 1 >> 0] | 0)) {
      $$0 = 0; //@line 15270
     } else {
      if (!(HEAP8[$1 + 2 >> 0] | 0)) {
       $$0 = _twobyte_strstr($5, $1) | 0; //@line 15277
       break;
      }
      if (!(HEAP8[$5 + 2 >> 0] | 0)) {
       $$0 = 0; //@line 15284
      } else {
       if (!(HEAP8[$1 + 3 >> 0] | 0)) {
        $$0 = _threebyte_strstr($5, $1) | 0; //@line 15291
        break;
       }
       if (!(HEAP8[$5 + 3 >> 0] | 0)) {
        $$0 = 0; //@line 15298
       } else {
        if (!(HEAP8[$1 + 4 >> 0] | 0)) {
         $$0 = _fourbyte_strstr($5, $1) | 0; //@line 15305
         break;
        } else {
         $$0 = _twoway_strstr($5, $1) | 0; //@line 15309
         break;
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 15319
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8898
 $1 = $0 + 12 | 0; //@line 8899
 $2 = HEAP32[$1 >> 2] | 0; //@line 8900
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8904
   _mbed_assert_internal(15037, 15042, 528); //@line 8905
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 287; //@line 8908
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 8910
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8912
    sp = STACKTOP; //@line 8913
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8916
    $7 = HEAP32[$1 >> 2] | 0; //@line 8918
    break;
   }
  } else {
   $7 = $2; //@line 8922
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 8925
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8926
 FUNCTION_TABLE_vi[$6 & 1023]($0); //@line 8927
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 288; //@line 8930
  sp = STACKTOP; //@line 8931
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8934
  return;
 }
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22424
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22428
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22430
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22432
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22434
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22436
 $13 = $4 + 12 | 0; //@line 22438
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22439
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 22440
 $14 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 0) | 0; //@line 22441
 if (!___async) {
  HEAP32[___async_retval >> 2] = $14; //@line 22445
  ___async_unwind = 0; //@line 22446
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 328; //@line 22448
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $13; //@line 22450
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $8; //@line 22452
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $10; //@line 22454
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $12; //@line 22456
 sp = STACKTOP; //@line 22457
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30142
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30144
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30146
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30150
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30152
 $11 = $4 + 12 | 0; //@line 30154
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 30155
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 30156
 $12 = _equeue_alloc($10, 16) | 0; //@line 30157
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 30161
  ___async_unwind = 0; //@line 30162
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 561; //@line 30164
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 30166
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $11; //@line 30168
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $11; //@line 30170
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 30172
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 30174
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $4; //@line 30176
 sp = STACKTOP; //@line 30177
 return;
}
function __ZN4mbed6TickerD0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6965
 HEAP32[$0 >> 2] = 10224; //@line 6966
 $1 = $0 + 40 | 0; //@line 6967
 _emscripten_asm_const_ii(15, $1 | 0) | 0; //@line 6968
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 6970
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 6975
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6976
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 6977
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 640; //@line 6980
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6982
    sp = STACKTOP; //@line 6983
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6986
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6991
 __ZN4mbed10TimerEventD2Ev($0); //@line 6992
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 641; //@line 6995
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 6997
  sp = STACKTOP; //@line 6998
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7001
  __ZdlPv($0); //@line 7002
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_340($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 14236
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14240
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14242
 $7 = $6 + 12 | 0; //@line 14244
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 14245
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 14246
 __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($4, $6); //@line 14247
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 354; //@line 14250
  $8 = $ReallocAsyncCtx9 + 4 | 0; //@line 14251
  HEAP32[$8 >> 2] = $7; //@line 14252
  $9 = $ReallocAsyncCtx9 + 8 | 0; //@line 14253
  HEAP32[$9 >> 2] = $6; //@line 14254
  sp = STACKTOP; //@line 14255
  return;
 }
 ___async_unwind = 0; //@line 14258
 HEAP32[$ReallocAsyncCtx9 >> 2] = 354; //@line 14259
 $8 = $ReallocAsyncCtx9 + 4 | 0; //@line 14260
 HEAP32[$8 >> 2] = $7; //@line 14261
 $9 = $ReallocAsyncCtx9 + 8 | 0; //@line 14262
 HEAP32[$9 >> 2] = $6; //@line 14263
 sp = STACKTOP; //@line 14264
 return;
}
function _fourbyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$lcssa = 0, $$sink21$lcssa = 0, $$sink2123 = 0, $18 = 0, $32 = 0, $33 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0;
 $18 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8 | (HEAPU8[$1 + 3 >> 0] | 0); //@line 15444
 $32 = $0 + 3 | 0; //@line 15458
 $33 = HEAP8[$32 >> 0] | 0; //@line 15459
 $35 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | (HEAPU8[$0 + 2 >> 0] | 0) << 8 | $33 & 255; //@line 15461
 if ($33 << 24 >> 24 == 0 | ($35 | 0) == ($18 | 0)) {
  $$lcssa = $33; //@line 15466
  $$sink21$lcssa = $32; //@line 15466
 } else {
  $$sink2123 = $32; //@line 15468
  $39 = $35; //@line 15468
  while (1) {
   $40 = $$sink2123 + 1 | 0; //@line 15471
   $41 = HEAP8[$40 >> 0] | 0; //@line 15472
   $39 = $39 << 8 | $41 & 255; //@line 15474
   if ($41 << 24 >> 24 == 0 | ($39 | 0) == ($18 | 0)) {
    $$lcssa = $41; //@line 15479
    $$sink21$lcssa = $40; //@line 15479
    break;
   } else {
    $$sink2123 = $40; //@line 15482
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$sink21$lcssa + -3 | 0 : 0) | 0; //@line 15489
}
function _mbed_vtracef__async_cb_42($0) {
 $0 = $0 | 0;
 var $3 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 21643
 $3 = HEAP32[175] | 0; //@line 21647
 if (HEAP8[$0 + 4 >> 0] & 1 & ($3 | 0) != 0) {
  $5 = HEAP32[167] | 0; //@line 21651
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 21652
  FUNCTION_TABLE_vi[$3 & 1023]($5); //@line 21653
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 21656
   sp = STACKTOP; //@line 21657
   return;
  }
  ___async_unwind = 0; //@line 21660
  HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 21661
  sp = STACKTOP; //@line 21662
  return;
 } else {
  $6 = HEAP32[174] | 0; //@line 21665
  $7 = HEAP32[167] | 0; //@line 21666
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 21667
  FUNCTION_TABLE_vi[$6 & 1023]($7); //@line 21668
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 145; //@line 21671
   sp = STACKTOP; //@line 21672
   return;
  }
  ___async_unwind = 0; //@line 21675
  HEAP32[$ReallocAsyncCtx4 >> 2] = 145; //@line 21676
  sp = STACKTOP; //@line 21677
  return;
 }
}
function __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0) {
 $0 = $0 | 0;
 var $13 = 0, sp = 0;
 sp = STACKTOP; //@line 1533
 STACKTOP = STACKTOP + 16 | 0; //@line 1534
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1534
 _mbed_tracef(16, 11020, 11135, sp); //@line 1536
 if ((HEAP32[$0 + 652 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 484 >> 2] | 0, 0) | 0; //@line 1543
 }
 if ((HEAP32[$0 + 656 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 508 >> 2] | 0, 0) | 0; //@line 1551
 }
 if ((HEAP32[$0 + 672 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 604 >> 2] | 0, 0) | 0; //@line 1559
 }
 $13 = $0 + 660 | 0; //@line 1561
 if ((HEAP32[$13 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 532 >> 2] | 0, 0) | 0; //@line 1567
  if ((HEAP32[$13 >> 2] | 0) != -1) {
   _emscripten_asm_const_iii(5, HEAP32[$0 + 556 >> 2] | 0, 0) | 0; //@line 1573
  }
 }
 if ((HEAP32[$0 + 668 >> 2] | 0) == -1) {
  STACKTOP = sp; //@line 1580
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$0 + 580 >> 2] | 0, 0) | 0; //@line 1584
 STACKTOP = sp; //@line 1585
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7921
 $1 = HEAP32[$0 >> 2] | 0; //@line 7922
 if (!$1) {
  return;
 }
 $4 = (HEAP32[$1 >> 2] | 0) + -1 | 0; //@line 7928
 HEAP32[$1 >> 2] = $4; //@line 7929
 if ($4 | 0) {
  return;
 }
 $7 = HEAP32[$1 + 24 >> 2] | 0; //@line 7935
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7936
 FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 7937
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 677; //@line 7940
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7942
  sp = STACKTOP; //@line 7943
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7946
 $9 = HEAP32[$0 >> 2] | 0; //@line 7947
 $11 = HEAP32[$9 + 4 >> 2] | 0; //@line 7949
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7950
 _equeue_dealloc($11, $9); //@line 7951
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 678; //@line 7954
  sp = STACKTOP; //@line 7955
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7958
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 352
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 354
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 356
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 358
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 360
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 362
 $11 = HEAP32[$2 >> 2] | 0; //@line 363
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 40 >> 2] | 0; //@line 366
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 367
 $15 = FUNCTION_TABLE_ii[$14 & 15]($11) | 0; //@line 368
 if (!___async) {
  HEAP8[___async_retval >> 0] = $15; //@line 372
  ___async_unwind = 0; //@line 373
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 516; //@line 375
 HEAP8[$ReallocAsyncCtx2 + 4 >> 0] = $4; //@line 377
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 379
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 381
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $10; //@line 383
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $2; //@line 385
 sp = STACKTOP; //@line 386
 return;
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4332
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4336
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4338
 $7 = $4 + 12 | 0; //@line 4340
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 4341
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 4342
 __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($6, $4); //@line 4343
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 420; //@line 4346
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 4347
  HEAP32[$8 >> 2] = $7; //@line 4348
  $9 = $ReallocAsyncCtx3 + 8 | 0; //@line 4349
  HEAP32[$9 >> 2] = $4; //@line 4350
  sp = STACKTOP; //@line 4351
  return;
 }
 ___async_unwind = 0; //@line 4354
 HEAP32[$ReallocAsyncCtx3 >> 2] = 420; //@line 4355
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 4356
 HEAP32[$8 >> 2] = $7; //@line 4357
 $9 = $ReallocAsyncCtx3 + 8 | 0; //@line 4358
 HEAP32[$9 >> 2] = $4; //@line 4359
 sp = STACKTOP; //@line 4360
 return;
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5504
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5506
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5508
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5510
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5512
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5514
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 5520
  return;
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 5523
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 5524
 __ZN7LoRaPHY18put_radio_to_sleepEv($12); //@line 5525
 if (!___async) {
  ___async_unwind = 0; //@line 5528
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 487; //@line 5530
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 5532
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 5534
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 5536
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 5538
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 5540
 sp = STACKTOP; //@line 5541
 return;
}
function _ticker_read_us__async_cb_78($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24416
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24418
 $3 = $2 + 4 | 0; //@line 24419
 $4 = HEAP32[$3 >> 2] | 0; //@line 24420
 $7 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 24423
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 24424
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 24425
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 613; //@line 24428
  $9 = $ReallocAsyncCtx + 4 | 0; //@line 24429
  HEAP32[$9 >> 2] = $3; //@line 24430
  $10 = $ReallocAsyncCtx + 8 | 0; //@line 24431
  HEAP32[$10 >> 2] = $4; //@line 24432
  sp = STACKTOP; //@line 24433
  return;
 }
 HEAP32[___async_retval >> 2] = $8; //@line 24437
 ___async_unwind = 0; //@line 24438
 HEAP32[$ReallocAsyncCtx >> 2] = 613; //@line 24439
 $9 = $ReallocAsyncCtx + 4 | 0; //@line 24440
 HEAP32[$9 >> 2] = $3; //@line 24441
 $10 = $ReallocAsyncCtx + 8 | 0; //@line 24442
 HEAP32[$10 >> 2] = $4; //@line 24443
 sp = STACKTOP; //@line 24444
 return;
}
function __ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1___async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$expand_i1_val = 0, $12 = 0, $23 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2092
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2094
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2098
 if ((HEAP32[$0 + 8 >> 2] | 0) != (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0)) {
  HEAP32[$6 + 2004 >> 2] = 12; //@line 2103
  $$0 = 0; //@line 2104
  $23 = ___async_retval; //@line 2105
  $$0$expand_i1_val = $$0 & 1; //@line 2106
  HEAP8[$23 >> 0] = $$0$expand_i1_val; //@line 2107
  return;
 }
 if ($8 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv($6 + 4 | 0) | 0) & 65535) >>> 0) {
  $$0 = 1; //@line 2115
  $23 = ___async_retval; //@line 2116
  $$0$expand_i1_val = $$0 & 1; //@line 2117
  HEAP8[$23 >> 0] = $$0$expand_i1_val; //@line 2118
  return;
 }
 HEAP32[$6 + 2004 >> 2] = 10; //@line 2122
 HEAP32[$6 + 2032 >> 2] = HEAP32[$12 >> 2]; //@line 2125
 $$0 = 0; //@line 2126
 $23 = ___async_retval; //@line 2127
 $$0$expand_i1_val = $$0 & 1; //@line 2128
 HEAP8[$23 >> 0] = $$0$expand_i1_val; //@line 2129
 return;
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7032
 $2 = $0 + 12 | 0; //@line 7034
 $3 = HEAP32[$2 >> 2] | 0; //@line 7035
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7039
   _mbed_assert_internal(15037, 15042, 528); //@line 7040
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 643; //@line 7043
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 7045
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7047
    sp = STACKTOP; //@line 7048
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7051
    $8 = HEAP32[$2 >> 2] | 0; //@line 7053
    break;
   }
  } else {
   $8 = $3; //@line 7057
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 7060
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7062
 FUNCTION_TABLE_vi[$7 & 1023]($0); //@line 7063
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 644; //@line 7066
  sp = STACKTOP; //@line 7067
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7070
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2789
 HEAP32[$0 >> 2] = 10224; //@line 2790
 __ZN4mbed6Ticker6detachEv($0); //@line 2791
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 2793
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 2799
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2800
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 2801
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 114; //@line 2804
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2806
    sp = STACKTOP; //@line 2807
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2810
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2815
 __ZN4mbed10TimerEventD2Ev($0); //@line 2816
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 115; //@line 2819
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 2821
  sp = STACKTOP; //@line 2822
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2825
  __ZdlPv($0); //@line 2826
  return;
 }
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16423
 STACKTOP = STACKTOP + 16 | 0; //@line 16424
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16424
 $1 = sp; //@line 16425
 HEAP32[$1 >> 2] = $varargs; //@line 16426
 $2 = HEAP32[2567] | 0; //@line 16427
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16428
 _vfprintf($2, $0, $1) | 0; //@line 16429
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 701; //@line 16432
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 16434
  sp = STACKTOP; //@line 16435
  STACKTOP = sp; //@line 16436
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16438
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16439
 _fputc(10, $2) | 0; //@line 16440
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 702; //@line 16443
  sp = STACKTOP; //@line 16444
  STACKTOP = sp; //@line 16445
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 16447
  _abort(); //@line 16448
 }
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12226
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12228
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12232
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 12234
 $9 = HEAP32[$2 >> 2] | 0; //@line 12235
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 68 >> 2] | 0; //@line 12238
 $14 = HEAP16[(HEAP32[$0 + 8 >> 2] | 0) + 12 >> 1] | 0; //@line 12240
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 12241
 FUNCTION_TABLE_viiii[$12 & 7]($9, $6, $8, $14); //@line 12242
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 536; //@line 12245
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 12246
  HEAP32[$15 >> 2] = $2; //@line 12247
  sp = STACKTOP; //@line 12248
  return;
 }
 ___async_unwind = 0; //@line 12251
 HEAP32[$ReallocAsyncCtx2 >> 2] = 536; //@line 12252
 $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 12253
 HEAP32[$15 >> 2] = $2; //@line 12254
 sp = STACKTOP; //@line 12255
 return;
}
function __ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6413
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6415
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6417
 $5 = $2 + 2872 | 0; //@line 6418
 HEAP32[$5 >> 2] = HEAP32[$5 >> 2] & -18 | 16; //@line 6422
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 6423
 __ZN12LoRaWANStack26process_status_check_stateEv($2); //@line 6424
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 279; //@line 6427
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 6428
  HEAP32[$9 >> 2] = $4; //@line 6429
  $10 = $ReallocAsyncCtx2 + 8 | 0; //@line 6430
  HEAP32[$10 >> 2] = $2; //@line 6431
  sp = STACKTOP; //@line 6432
  return;
 }
 ___async_unwind = 0; //@line 6435
 HEAP32[$ReallocAsyncCtx2 >> 2] = 279; //@line 6436
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 6437
 HEAP32[$9 >> 2] = $4; //@line 6438
 $10 = $ReallocAsyncCtx2 + 8 | 0; //@line 6439
 HEAP32[$10 >> 2] = $2; //@line 6440
 sp = STACKTOP; //@line 6441
 return;
}
function _threebyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016$lcssa = 0, $$01618 = 0, $$019 = 0, $$lcssa = 0, $14 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0;
 $14 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8; //@line 15378
 $23 = $0 + 2 | 0; //@line 15387
 $24 = HEAP8[$23 >> 0] | 0; //@line 15388
 $27 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | ($24 & 255) << 8; //@line 15391
 if (($27 | 0) == ($14 | 0) | $24 << 24 >> 24 == 0) {
  $$016$lcssa = $23; //@line 15396
  $$lcssa = $24; //@line 15396
 } else {
  $$01618 = $23; //@line 15398
  $$019 = $27; //@line 15398
  while (1) {
   $30 = $$01618 + 1 | 0; //@line 15400
   $31 = HEAP8[$30 >> 0] | 0; //@line 15401
   $$019 = ($$019 | $31 & 255) << 8; //@line 15404
   if (($$019 | 0) == ($14 | 0) | $31 << 24 >> 24 == 0) {
    $$016$lcssa = $30; //@line 15409
    $$lcssa = $31; //@line 15409
    break;
   } else {
    $$01618 = $30; //@line 15412
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$016$lcssa + -2 | 0 : 0) | 0; //@line 15419
}
function __ZN4mbed6TickerD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6924
 HEAP32[$0 >> 2] = 10224; //@line 6925
 $1 = $0 + 40 | 0; //@line 6926
 _emscripten_asm_const_ii(15, $1 | 0) | 0; //@line 6927
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 6929
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 6934
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6935
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 6936
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 638; //@line 6939
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6941
    sp = STACKTOP; //@line 6942
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6945
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6950
 __ZN4mbed10TimerEventD2Ev($0); //@line 6951
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 639; //@line 6954
  sp = STACKTOP; //@line 6955
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6958
  return;
 }
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_115($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26044
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26048
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26050
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26051
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 26055
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 26059
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 26060
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 26061
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 387; //@line 26064
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 26065
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 26066
  sp = STACKTOP; //@line 26067
  return;
 }
 ___async_unwind = 0; //@line 26070
 HEAP32[$ReallocAsyncCtx2 >> 2] = 387; //@line 26071
 $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 26072
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 26073
 sp = STACKTOP; //@line 26074
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_253($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 5207
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5209
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5211
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP8[$4 + 2068 >> 0] = 0; //@line 5217
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 5220
 _mbed_assert_internal(13121, 13130, 231); //@line 5221
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 429; //@line 5224
  $7 = $ReallocAsyncCtx10 + 4 | 0; //@line 5225
  HEAP32[$7 >> 2] = $2; //@line 5226
  $8 = $ReallocAsyncCtx10 + 8 | 0; //@line 5227
  HEAP32[$8 >> 2] = $4; //@line 5228
  sp = STACKTOP; //@line 5229
  return;
 }
 ___async_unwind = 0; //@line 5232
 HEAP32[$ReallocAsyncCtx10 >> 2] = 429; //@line 5233
 $7 = $ReallocAsyncCtx10 + 4 | 0; //@line 5234
 HEAP32[$7 >> 2] = $2; //@line 5235
 $8 = $ReallocAsyncCtx10 + 8 | 0; //@line 5236
 HEAP32[$8 >> 2] = $4; //@line 5237
 sp = STACKTOP; //@line 5238
 return;
}
function __ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_405($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30536
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30538
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30540
 if ((HEAP32[$2 >> 2] | 0) != 2) {
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 30547
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $4 + 1836 | 0); //@line 30548
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 457; //@line 30551
  $7 = $ReallocAsyncCtx5 + 4 | 0; //@line 30552
  HEAP32[$7 >> 2] = $4; //@line 30553
  $8 = $ReallocAsyncCtx5 + 8 | 0; //@line 30554
  HEAP32[$8 >> 2] = $2; //@line 30555
  sp = STACKTOP; //@line 30556
  return;
 }
 ___async_unwind = 0; //@line 30559
 HEAP32[$ReallocAsyncCtx5 >> 2] = 457; //@line 30560
 $7 = $ReallocAsyncCtx5 + 4 | 0; //@line 30561
 HEAP32[$7 >> 2] = $4; //@line 30562
 $8 = $ReallocAsyncCtx5 + 8 | 0; //@line 30563
 HEAP32[$8 >> 2] = $2; //@line 30564
 sp = STACKTOP; //@line 30565
 return;
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 15006
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 15006
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 15007
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 15008
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 15017
    $$016 = $9; //@line 15020
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 15020
   } else {
    $$016 = $0; //@line 15022
    $storemerge = 0; //@line 15022
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 15024
   $$0 = $$016; //@line 15025
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 15029
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 15035
   HEAP32[tempDoublePtr >> 2] = $2; //@line 15038
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 15038
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 15039
  }
 }
 return +$$0;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_188($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 763
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 773
 $14 = HEAP32[$10 >> 2] | 0; //@line 780
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 44 >> 2] | 0; //@line 783
 $20 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 786
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 787
 FUNCTION_TABLE_viii[$17 & 7]($14, 1, $20); //@line 788
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 522; //@line 791
  $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 792
  HEAP32[$21 >> 2] = $10; //@line 793
  sp = STACKTOP; //@line 794
  return;
 }
 ___async_unwind = 0; //@line 797
 HEAP32[$ReallocAsyncCtx8 >> 2] = 522; //@line 798
 $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 799
 HEAP32[$21 >> 2] = $10; //@line 800
 sp = STACKTOP; //@line 801
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_187($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 718
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 728
 $14 = HEAP32[$10 >> 2] | 0; //@line 735
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 44 >> 2] | 0; //@line 738
 $20 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 741
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 742
 FUNCTION_TABLE_viii[$17 & 7]($14, 0, $20); //@line 743
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 522; //@line 746
  $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 747
  HEAP32[$21 >> 2] = $10; //@line 748
  sp = STACKTOP; //@line 749
  return;
 }
 ___async_unwind = 0; //@line 752
 HEAP32[$ReallocAsyncCtx8 >> 2] = 522; //@line 753
 $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 754
 HEAP32[$21 >> 2] = $10; //@line 755
 sp = STACKTOP; //@line 756
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27484
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27488
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27490
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27492
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27494
 $11 = $4 + 12 | 0; //@line 27496
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 27497
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 27498
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 10) | 0; //@line 27499
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 27503
  ___async_unwind = 0; //@line 27504
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 236; //@line 27506
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $11; //@line 27508
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 27510
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $10; //@line 27512
 sp = STACKTOP; //@line 27513
 return;
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_277($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6913
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6917
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 6919
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 6920
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 6924
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 6928
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 6929
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 6930
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 285; //@line 6933
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 6934
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 6935
  sp = STACKTOP; //@line 6936
  return;
 }
 ___async_unwind = 0; //@line 6939
 HEAP32[$ReallocAsyncCtx2 >> 2] = 285; //@line 6940
 $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 6941
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 6942
 sp = STACKTOP; //@line 6943
 return;
}
function _equeue_sema_wait($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $20 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 4598
 STACKTOP = STACKTOP + 16 | 0; //@line 4599
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4599
 $2 = sp + 8 | 0; //@line 4600
 $3 = sp; //@line 4601
 _pthread_mutex_lock($0 | 0) | 0; //@line 4602
 $4 = $0 + 76 | 0; //@line 4603
 do {
  if (!(HEAP8[$4 >> 0] | 0)) {
   if (($1 | 0) < 0) {
    _pthread_cond_wait($0 + 28 | 0, $0 | 0) | 0; //@line 4611
    break;
   } else {
    _gettimeofday($2 | 0, 0) | 0; //@line 4614
    HEAP32[$3 >> 2] = (HEAP32[$2 >> 2] | 0) + (($1 >>> 0) / 1e3 | 0); //@line 4618
    HEAP32[$3 + 4 >> 2] = ((HEAP32[$2 + 4 >> 2] | 0) * 1e3 | 0) + ($1 * 1e6 | 0); //@line 4625
    _pthread_cond_timedwait($0 + 28 | 0, $0 | 0, $3 | 0) | 0; //@line 4627
    break;
   }
  }
 } while (0);
 $20 = (HEAP8[$4 >> 0] | 0) != 0; //@line 4633
 HEAP8[$4 >> 0] = 0; //@line 4634
 _pthread_mutex_unlock($0 | 0) | 0; //@line 4635
 STACKTOP = sp; //@line 4636
 return $20 | 0; //@line 4636
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18026
 STACKTOP = STACKTOP + 16 | 0; //@line 18027
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18027
 $3 = sp; //@line 18028
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 18030
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 18033
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 18034
 $8 = FUNCTION_TABLE_iiii[$7 & 31]($0, $1, $3) | 0; //@line 18035
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 725; //@line 18038
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 18040
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 18042
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 18044
  sp = STACKTOP; //@line 18045
  STACKTOP = sp; //@line 18046
  return 0; //@line 18046
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 18048
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 18052
 }
 STACKTOP = sp; //@line 18054
 return $8 & 1 | 0; //@line 18054
}
function __ZN7LoRaPHY19num_active_channelsEPthh($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$01012 = 0, $$011 = 0, $8 = 0, $9 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 & 255) < ($3 & 255))) {
  $$011 = 0; //@line 21922
  return $$011 | 0; //@line 21923
 }
 $wide$trip$count = $3 & 255; //@line 21926
 $$01012 = 0; //@line 21927
 $indvars$iv = $2 & 255; //@line 21927
 do {
  $8 = HEAP16[$1 + ($indvars$iv << 1) >> 1] | 0; //@line 21930
  $9 = $8 & 65535; //@line 21931
  $$01012 = ($$01012 & 255) + (($9 & 1) + ($9 >>> 1 & 1) + ($9 >>> 2 & 1) + ($9 >>> 3 & 1) + ($9 >>> 4 & 1) + ($9 >>> 5 & 1) + ($9 >>> 6 & 1) + ($9 >>> 7 & 1) + ($9 >>> 8 & 1) + ($9 >>> 9 & 1) + ($9 >>> 10 & 1) + ($9 >>> 11 & 1) + ($9 >>> 12 & 1) + ($9 >>> 13 & 1) + ($9 >>> 14 & 1) + (($8 & 65535) >>> 15 & 65535) & 255) | 0; //@line 21980
  $indvars$iv = $indvars$iv + 1 | 0; //@line 21981
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$011 = $$01012 & 255; //@line 21990
 return $$011 | 0; //@line 21991
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb($0) {
 $0 = $0 | 0;
 var $$1$ = 0, $10 = 0, $12 = 0, $19 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30196
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30198
 $10 = HEAP8[$0 + 21 >> 0] | 0; //@line 30200
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30202
 $$1$ = (HEAP32[___async_retval >> 2] | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : -1014; //@line 30210
 $19 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 30211
 HEAP8[(HEAPU16[$6 >> 1] | 0) + ($8 + 1185) >> 0] = $19; //@line 30216
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 1 + ($8 + 1185) >> 0] = $19 >>> 8; //@line 30223
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 2 + ($8 + 1185) >> 0] = $19 >>> 16; //@line 30230
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 3 + ($8 + 1185) >> 0] = $19 >>> 24; //@line 30237
 HEAP16[$6 >> 1] = (HEAPU16[$6 >> 1] | 0) + 4; //@line 30242
 HEAP32[$12 >> 2] = $10 & 255; //@line 30244
 _mbed_tracef(16, 13263, 13348, $12); //@line 30245
 HEAP32[___async_retval >> 2] = $$1$; //@line 30247
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31020
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31028
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31030
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31032
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31034
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31036
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31038
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31040
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 31051
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 31052
 HEAP32[$10 >> 2] = 0; //@line 31053
 HEAP32[$12 >> 2] = 0; //@line 31054
 HEAP32[$14 >> 2] = 0; //@line 31055
 HEAP32[$2 >> 2] = 0; //@line 31056
 $33 = HEAP32[$16 >> 2] | 0; //@line 31057
 HEAP32[$16 >> 2] = $33 | $18; //@line 31062
 if ($20 | 0) {
  ___unlockfile($22); //@line 31065
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 31068
 return;
}
function _schedule_interrupt__async_cb_46($0) {
 $0 = $0 | 0;
 var $16 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22082
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22086
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22088
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22090
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22091
 if ($4 >>> 0 > $8 >>> 0) {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 | $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 } else {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 & $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 }
 $16 = HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] | 0; //@line 22110
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 22111
 FUNCTION_TABLE_v[$16 & 15](); //@line 22112
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 609; //@line 22115
  sp = STACKTOP; //@line 22116
  return;
 }
 ___async_unwind = 0; //@line 22119
 HEAP32[$ReallocAsyncCtx6 >> 2] = 609; //@line 22120
 sp = STACKTOP; //@line 22121
 return;
}
function _mbed_vtracef__async_cb_39($0) {
 $0 = $0 | 0;
 var $$pre = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 21374
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21378
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 2) {
  return;
 }
 $5 = $4 + -1 | 0; //@line 21383
 $$pre = HEAP32[177] | 0; //@line 21384
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 21385
 FUNCTION_TABLE_v[$$pre & 15](); //@line 21386
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 152; //@line 21389
  $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 21390
  HEAP32[$6 >> 2] = $4; //@line 21391
  $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 21392
  HEAP32[$7 >> 2] = $5; //@line 21393
  sp = STACKTOP; //@line 21394
  return;
 }
 ___async_unwind = 0; //@line 21397
 HEAP32[$ReallocAsyncCtx9 >> 2] = 152; //@line 21398
 $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 21399
 HEAP32[$6 >> 2] = $4; //@line 21400
 $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 21401
 HEAP32[$7 >> 2] = $5; //@line 21402
 sp = STACKTOP; //@line 21403
 return;
}
function __ZN4mbed7TimeoutD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2748
 HEAP32[$0 >> 2] = 10224; //@line 2749
 __ZN4mbed6Ticker6detachEv($0); //@line 2750
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 2752
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 2758
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2759
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 2760
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 112; //@line 2763
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2765
    sp = STACKTOP; //@line 2766
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2769
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2774
 __ZN4mbed10TimerEventD2Ev($0); //@line 2775
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 113; //@line 2778
  sp = STACKTOP; //@line 2779
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2782
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_291($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10375
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10379
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10381
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 10382
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 10386
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 10390
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 10391
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 10392
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 274; //@line 10395
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 10396
  HEAP32[$11 >> 2] = $4; //@line 10397
  sp = STACKTOP; //@line 10398
  return;
 }
 ___async_unwind = 0; //@line 10401
 HEAP32[$ReallocAsyncCtx5 >> 2] = 274; //@line 10402
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 10403
 HEAP32[$11 >> 2] = $4; //@line 10404
 sp = STACKTOP; //@line 10405
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7865
 $1 = HEAP32[$0 >> 2] | 0; //@line 7866
 if ($1 | 0) {
  $4 = HEAP32[$1 + 20 >> 2] | 0; //@line 7870
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7871
  $5 = FUNCTION_TABLE_ii[$4 & 15]($1) | 0; //@line 7872
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 675; //@line 7875
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7877
   sp = STACKTOP; //@line 7878
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7881
  HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] = $5; //@line 7884
  if ($5 | 0) {
   return;
  }
 }
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7890
 _mbed_assert_internal(15785, 15788, 149); //@line 7891
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 676; //@line 7894
  sp = STACKTOP; //@line 7895
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7898
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16946
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 16952
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 16955
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 16958
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16959
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 16960
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 707; //@line 16963
    sp = STACKTOP; //@line 16964
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16967
    break;
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_74($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23931
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23935
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23937
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23938
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 23942
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 23946
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 23947
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 23948
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 326; //@line 23951
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 23952
  HEAP32[$11 >> 2] = $4; //@line 23953
  sp = STACKTOP; //@line 23954
  return;
 }
 ___async_unwind = 0; //@line 23957
 HEAP32[$ReallocAsyncCtx5 >> 2] = 326; //@line 23958
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 23959
 HEAP32[$11 >> 2] = $4; //@line 23960
 sp = STACKTOP; //@line 23961
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_414($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31298
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31302
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31304
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31305
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 31309
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 31313
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 31314
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 31315
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 228; //@line 31318
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 31319
  HEAP32[$11 >> 2] = $4; //@line 31320
  sp = STACKTOP; //@line 31321
  return;
 }
 ___async_unwind = 0; //@line 31324
 HEAP32[$ReallocAsyncCtx5 >> 2] = 228; //@line 31325
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 31326
 HEAP32[$11 >> 2] = $4; //@line 31327
 sp = STACKTOP; //@line 31328
 return;
}
function _mbed_vtracef__async_cb_38($0) {
 $0 = $0 | 0;
 var $$pre = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 21341
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21343
 if (($2 | 0) <= 1) {
  return;
 }
 $4 = $2 + -1 | 0; //@line 21348
 $$pre = HEAP32[177] | 0; //@line 21349
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 21350
 FUNCTION_TABLE_v[$$pre & 15](); //@line 21351
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 152; //@line 21354
  $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 21355
  HEAP32[$5 >> 2] = $2; //@line 21356
  $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 21357
  HEAP32[$6 >> 2] = $4; //@line 21358
  sp = STACKTOP; //@line 21359
  return;
 }
 ___async_unwind = 0; //@line 21362
 HEAP32[$ReallocAsyncCtx9 >> 2] = 152; //@line 21363
 $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 21364
 HEAP32[$5 >> 2] = $2; //@line 21365
 $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 21366
 HEAP32[$6 >> 2] = $4; //@line 21367
 sp = STACKTOP; //@line 21368
 return;
}
function _get_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$028 = 0, $$02930 = 0, $$031 = 0, $13 = 0, $23 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (($0 | 0) == 0 | ($2 | 0) == 0) {
  $$028 = -24832; //@line 2594
  return $$028 | 0; //@line 2595
 }
 $7 = HEAP8[$0 + ($1 + -1) >> 0] | 0; //@line 2599
 $8 = $7 & 255; //@line 2600
 $9 = $1 - $8 | 0; //@line 2601
 HEAP32[$2 >> 2] = $9; //@line 2602
 $13 = ($7 << 24 >> 24 == 0 | $8 >>> 0 > $1 >>> 0) & 1; //@line 2606
 if (!$1) {
  $$0$lcssa = $13; //@line 2609
 } else {
  $$02930 = 0; //@line 2611
  $$031 = $13; //@line 2611
  while (1) {
   $23 = (($$02930 >>> 0 >= $9 >>> 0 ? (HEAP8[$0 + $$02930 >> 0] ^ $7) & 255 : 0) | $$031 & 255) & 255; //@line 2621
   $$02930 = $$02930 + 1 | 0; //@line 2622
   if (($$02930 | 0) == ($1 | 0)) {
    $$0$lcssa = $23; //@line 2625
    break;
   } else {
    $$031 = $23; //@line 2628
   }
  }
 }
 $$028 = $$0$lcssa << 24 >> 24 ? -25088 : 0; //@line 2634
 return $$028 | 0; //@line 2635
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_179($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 61
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 65
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 67
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 68
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 72
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 76
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 77
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 78
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 304; //@line 81
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 82
  HEAP32[$11 >> 2] = $4; //@line 83
  sp = STACKTOP; //@line 84
  return;
 }
 ___async_unwind = 0; //@line 87
 HEAP32[$ReallocAsyncCtx5 >> 2] = 304; //@line 88
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 89
 HEAP32[$11 >> 2] = $4; //@line 90
 sp = STACKTOP; //@line 91
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17945
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 17947
 $8 = $7 >> 8; //@line 17948
 if (!($7 & 1)) {
  $$0 = $8; //@line 17952
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 17957
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 17959
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 17962
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17967
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 17968
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 723; //@line 17971
  sp = STACKTOP; //@line 17972
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17975
  return;
 }
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23435
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23437
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23439
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 23441
 $7 = HEAP32[$2 >> 2] | 0; //@line 23442
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] | 0; //@line 23445
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 23446
 FUNCTION_TABLE_viii[$10 & 7]($7, $4, $6); //@line 23447
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 555; //@line 23450
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 23451
  HEAP32[$11 >> 2] = $2; //@line 23452
  sp = STACKTOP; //@line 23453
  return;
 }
 ___async_unwind = 0; //@line 23456
 HEAP32[$ReallocAsyncCtx2 >> 2] = 555; //@line 23457
 $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 23458
 HEAP32[$11 >> 2] = $2; //@line 23459
 sp = STACKTOP; //@line 23460
 return;
}
function __GLOBAL__sub_I_main_cpp() {
 var $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7145
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7146
 __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_(19072, 9, 8, 7, 6, 23, 4, 5, 66, 67, 0, 1, -1, -1, -1, -1, 62, -1, -1); //@line 7147
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 646; //@line 7150
  sp = STACKTOP; //@line 7151
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7154
  __ZN5Sht31C2E7PinNameS0_(24460, 10, 11); //@line 7155
  __ZN4mbed11InterruptInC2E7PinName(20408, 1337); //@line 7156
  __ZN6events10EventQueueC2EjPh(20480, 1664, 0); //@line 7157
  __ZN16LoRaWANInterfaceC2ER9LoRaRadio(20684, 19072); //@line 7158
  dest = 23828; //@line 7159
  stop = dest + 48 | 0; //@line 7159
  do {
   HEAP32[dest >> 2] = 0; //@line 7159
   dest = dest + 4 | 0; //@line 7159
  } while ((dest | 0) < (stop | 0));
  return;
 }
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_94($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24923
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24925
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24927
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  return;
 }
 __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 476 | 0); //@line 24935
 HEAP8[$2 + 1177 >> 0] = 0; //@line 24937
 HEAP8[$2 + 2046 >> 0] = 0; //@line 24939
 HEAP8[$2 + 2047 >> 0] = HEAP8[$4 >> 0] | 0; //@line 24942
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 24943
 $12 = __ZN7LoRaMac21handle_retransmissionEv($2) | 0; //@line 24944
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 382; //@line 24947
  sp = STACKTOP; //@line 24948
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 24952
 ___async_unwind = 0; //@line 24953
 HEAP32[$ReallocAsyncCtx >> 2] = 382; //@line 24954
 sp = STACKTOP; //@line 24955
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17115
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 17121
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 17124
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 17127
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17128
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 17129
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 710; //@line 17132
    sp = STACKTOP; //@line 17133
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17136
    break;
   }
  }
 } while (0);
 return;
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$unpack$i = 0, $$unpack5$i = 0, $15 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8945
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 8948
 $$unpack5$i = HEAP32[$0 + 4 >> 2] | 0; //@line 8950
 $8 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack5$i >> 1) | 0; //@line 8952
 if (!($$unpack5$i & 1)) {
  $15 = $$unpack$i; //@line 8957
 } else {
  $15 = HEAP32[(HEAP32[$8 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 8962
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8964
 FUNCTION_TABLE_viiiii[$15 & 7]($8, $1, $2, $3, $4); //@line 8965
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 289; //@line 8968
  sp = STACKTOP; //@line 8969
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8972
  return;
 }
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17987
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 17989
 $7 = $6 >> 8; //@line 17990
 if (!($6 & 1)) {
  $$0 = $7; //@line 17994
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 17999
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 18001
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 18004
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18009
 FUNCTION_TABLE_viiiii[$16 & 7]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 18010
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 724; //@line 18013
  sp = STACKTOP; //@line 18014
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18017
  return;
 }
}
function _ticker_remove_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6009
 $4 = (HEAP32[$0 + 4 >> 2] | 0) + 4 | 0; //@line 6012
 $5 = HEAP32[$4 >> 2] | 0; //@line 6013
 if (($5 | 0) == ($1 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 6018
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6019
  _schedule_interrupt($0); //@line 6020
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 611; //@line 6023
   sp = STACKTOP; //@line 6024
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6027
  return;
 } else {
  $$0 = $5; //@line 6030
 }
 do {
  if (!$$0) {
   label = 8; //@line 6035
   break;
  }
  $10 = $$0 + 12 | 0; //@line 6038
  $$0 = HEAP32[$10 >> 2] | 0; //@line 6039
 } while (($$0 | 0) != ($1 | 0));
 if ((label | 0) == 8) {
  return;
 }
 HEAP32[$10 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 6052
 return;
}
function ___dynamic_cast__async_cb_222($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2836
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2838
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2840
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2846
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 2861
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 2877
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 2882
    break;
   }
  default:
   {
    $$0 = 0; //@line 2886
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 2891
 return;
}
function _mbed_error_vfprintf__async_cb_246($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4664
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 4666
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4668
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4670
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4672
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4674
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 4676
 _serial_putc(20400, $2 << 24 >> 24); //@line 4677
 if (!___async) {
  ___async_unwind = 0; //@line 4680
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 634; //@line 4682
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 4684
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 4686
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 4688
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $2; //@line 4690
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 4692
 sp = STACKTOP; //@line 4693
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17902
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 17904
 $6 = $5 >> 8; //@line 17905
 if (!($5 & 1)) {
  $$0 = $6; //@line 17909
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 17914
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 17916
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 17919
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17924
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 17925
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 722; //@line 17928
  sp = STACKTOP; //@line 17929
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17932
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb_124($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26472
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26476
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26478
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 26480
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 26482
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 26484
 $13 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 26486
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 26487
 FUNCTION_TABLE_viiiii[$13 & 7]($4, $6, $8, $10, $12); //@line 26488
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 307; //@line 26491
  sp = STACKTOP; //@line 26492
  return;
 }
 ___async_unwind = 0; //@line 26495
 HEAP32[$ReallocAsyncCtx >> 2] = 307; //@line 26496
 sp = STACKTOP; //@line 26497
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_347($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14521
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14523
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14525
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14527
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14529
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14531
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 14532
 __ZN7LoRaMac10disconnectEv($10); //@line 14533
 if (!___async) {
  ___async_unwind = 0; //@line 14536
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 342; //@line 14538
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 14540
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 14542
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 14544
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 14546
 sp = STACKTOP; //@line 14547
 return;
}
function _main__async_cb_3($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 18317
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18319
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18321
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18323
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18325
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18327
 $12 = HEAP32[$2 + 4 >> 2] | 0; //@line 18329
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 18330
 _equeue_dealloc($12, $2); //@line 18331
 if (!___async) {
  ___async_unwind = 0; //@line 18334
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 655; //@line 18336
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $6; //@line 18338
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $8; //@line 18340
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $10; //@line 18342
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $4; //@line 18344
 sp = STACKTOP; //@line 18345
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11132
 STACKTOP = STACKTOP + 16 | 0; //@line 11133
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11133
 if (!(HEAP32[$0 + 2480 >> 2] | 0)) {
  _mbed_tracef(2, 12506, 12856, sp); //@line 11139
  $$0 = -1012; //@line 11140
  STACKTOP = sp; //@line 11141
  return $$0 | 0; //@line 11141
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11143
 $5 = __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0, $1) | 0; //@line 11144
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 358; //@line 11147
  sp = STACKTOP; //@line 11148
  STACKTOP = sp; //@line 11149
  return 0; //@line 11149
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11151
 $$0 = $5; //@line 11152
 STACKTOP = sp; //@line 11153
 return $$0 | 0; //@line 11153
}
function __ZN7LoRaPHY18verify_tx_datarateEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$sink$in = 0, $$sink6 = 0, $3 = 0;
 $3 = $1 << 24 >> 24; //@line 22792
 if (($3 | 0) >= (HEAPU8[$0 + 92 >> 0] | 0)) {
  $$0 = 0; //@line 22798
  return $$0 | 0; //@line 22799
 }
 if (!(HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $3 >> 0] | 0)) {
  $$0 = 0; //@line 22807
  return $$0 | 0; //@line 22808
 }
 do {
  if ($2) {
   $$sink$in = $0 + 30 | 0; //@line 22814
   $$sink6 = $0 + 31 | 0; //@line 22814
  } else {
   if (!(HEAP8[$0 + 128 >> 0] & 1)) {
    $$sink$in = $0 + 26 | 0; //@line 22823
    $$sink6 = $0 + 27 | 0; //@line 22823
    break;
   } else {
    $$sink$in = $0 + 35 | 0; //@line 22828
    $$sink6 = $0 + 27 | 0; //@line 22828
    break;
   }
  }
 } while (0);
 $$0 = (HEAP8[$$sink$in >> 0] | 0) <= $1 << 24 >> 24 ? (HEAP8[$$sink6 >> 0] | 0) >= $1 << 24 >> 24 : 0; //@line 22838
 return $$0 | 0; //@line 22839
}
function __ZN16LoRaWANInterface7receiveEhPhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5665
 STACKTOP = STACKTOP + 16 | 0; //@line 5666
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5666
 $5 = sp + 4 | 0; //@line 5667
 $6 = sp; //@line 5668
 HEAP8[$5 >> 0] = $1; //@line 5669
 HEAP32[$6 >> 2] = $4; //@line 5670
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5672
 $8 = __ZN12LoRaWANStack9handle_rxEPhtRhRib($0 + 4 | 0, $2, $3, $5, $6, 1) | 0; //@line 5673
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 161; //@line 5676
  sp = STACKTOP; //@line 5677
  STACKTOP = sp; //@line 5678
  return 0; //@line 5678
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5680
  STACKTOP = sp; //@line 5681
  return $8 | 0; //@line 5681
 }
 return 0; //@line 5683
}
function __ZN16SX1276_LoRaRadio4sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 374
 switch (HEAP8[$0 + 689 >> 0] | 0) {
 case 0:
  {
   _emscripten_asm_const_iiiiiii(0, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 696 >> 0] | 0, HEAP32[$0 + 704 >> 2] | 0, HEAP32[$0 + 712 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 389
   break;
  }
 case 1:
  {
   _emscripten_asm_const_iiiiiii(1, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 748 >> 0] | 0, HEAP32[$0 + 752 >> 2] | 0, HEAP32[$0 + 756 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 403
   break;
  }
 default:
  {}
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 409
 __ZN16SX1276_LoRaRadio8transmitEj($0, 0); //@line 410
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 50; //@line 413
  sp = STACKTOP; //@line 414
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 417
  return;
 }
}
function __ZN7LoRaPHY14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $25 = 0, $4 = 0, $5 = 0;
 $4 = $1 & 255; //@line 21708
 $5 = $4 >>> 4; //@line 21709
 $10 = 1 << ($4 & 15); //@line 21714
 if ($10 & (HEAPU16[(HEAP32[$0 + 120 >> 2] | 0) + ($5 << 1) >> 1] | 0) | 0) {
  $$0 = 0; //@line 21718
  return $$0 | 0; //@line 21719
 }
 $15 = (HEAP32[$0 + 124 >> 2] | 0) + ($4 * 12 | 0) | 0; //@line 21723
 HEAP32[$15 >> 2] = 0; //@line 21724
 HEAP32[$15 + 4 >> 2] = 0; //@line 21724
 HEAP32[$15 + 8 >> 2] = 0; //@line 21724
 if (!((HEAPU8[$0 + 20 >> 0] | 0) > ($1 & 255) ? (($1 & 255) >>> 4 & 255) <= (HEAPU8[$0 + 113 >> 0] | 0) : 0)) {
  $$0 = 0; //@line 21734
  return $$0 | 0; //@line 21735
 }
 $25 = (HEAP32[$0 + 116 >> 2] | 0) + ($5 << 1) | 0; //@line 21740
 HEAP16[$25 >> 1] = ($10 ^ 65535) & (HEAPU16[$25 >> 1] | 0); //@line 21745
 $$0 = 1; //@line 21746
 return $$0 | 0; //@line 21747
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_66($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23533
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23537
 $4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23538
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 23541
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 23542
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 23543
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 553; //@line 23546
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 23547
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 23548
  sp = STACKTOP; //@line 23549
  return;
 }
 ___async_unwind = 0; //@line 23552
 HEAP32[$ReallocAsyncCtx3 >> 2] = 553; //@line 23553
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 23554
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 23555
 sp = STACKTOP; //@line 23556
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29068
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29070
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 29073
 $5 = HEAP32[$2 >> 2] | 0; //@line 29074
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] | 0; //@line 29077
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 29078
 FUNCTION_TABLE_vii[$8 & 15]($5, $4); //@line 29079
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 545; //@line 29082
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 29083
  HEAP32[$9 >> 2] = $2; //@line 29084
  sp = STACKTOP; //@line 29085
  return;
 }
 ___async_unwind = 0; //@line 29088
 HEAP32[$ReallocAsyncCtx2 >> 2] = 545; //@line 29089
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 29090
 HEAP32[$9 >> 2] = $2; //@line 29091
 sp = STACKTOP; //@line 29092
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23504
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23506
 $3 = HEAP32[$2 >> 2] | 0; //@line 23507
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0; //@line 23510
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 23511
 $7 = FUNCTION_TABLE_ii[$6 & 15]($3) | 0; //@line 23512
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 552; //@line 23515
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 23516
  HEAP32[$8 >> 2] = $2; //@line 23517
  sp = STACKTOP; //@line 23518
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 23522
 ___async_unwind = 0; //@line 23523
 HEAP32[$ReallocAsyncCtx2 >> 2] = 552; //@line 23524
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 23525
 HEAP32[$8 >> 2] = $2; //@line 23526
 sp = STACKTOP; //@line 23527
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_352($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 14880
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14882
 $4 = HEAP32[$2 + 748 >> 2] | 0; //@line 14884
 if (!$4) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 14888
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 14893
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 14894
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 736 | 0); //@line 14895
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 370; //@line 14898
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 14899
  HEAP32[$9 >> 2] = $2; //@line 14900
  sp = STACKTOP; //@line 14901
  return;
 }
 ___async_unwind = 0; //@line 14904
 HEAP32[$ReallocAsyncCtx5 >> 2] = 370; //@line 14905
 $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 14906
 HEAP32[$9 >> 2] = $2; //@line 14907
 sp = STACKTOP; //@line 14908
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_390($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29621
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29623
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29627
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29629
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 29631
 __ZN4mbed6Ticker5setupEy($6, 1e5, 0); //@line 29632
 $9 = HEAP32[$2 >> 2] | 0; //@line 29633
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 29639
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 29640
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 29641
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 95; //@line 29644
  sp = STACKTOP; //@line 29645
  return;
 }
 ___async_unwind = 0; //@line 29648
 HEAP32[$ReallocAsyncCtx3 >> 2] = 95; //@line 29649
 sp = STACKTOP; //@line 29650
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_311($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11814
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11816
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11820
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11822
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 11824
 __ZN4mbed6Ticker5setupEy($6, 2e5, 0); //@line 11825
 $9 = HEAP32[$2 >> 2] | 0; //@line 11826
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 11832
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 11833
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 11834
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 54; //@line 11837
  sp = STACKTOP; //@line 11838
  return;
 }
 ___async_unwind = 0; //@line 11841
 HEAP32[$ReallocAsyncCtx3 >> 2] = 54; //@line 11842
 sp = STACKTOP; //@line 11843
 return;
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 14004
 STACKTOP = STACKTOP + 256 | 0; //@line 14005
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 14005
 $5 = sp; //@line 14006
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 14012
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 14016
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 14019
   $$011 = $9; //@line 14020
   do {
    _out_670($0, $5, 256); //@line 14022
    $$011 = $$011 + -256 | 0; //@line 14023
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 14032
  } else {
   $$0$lcssa = $9; //@line 14034
  }
  _out_670($0, $5, $$0$lcssa); //@line 14036
 }
 STACKTOP = sp; //@line 14038
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_315($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $2 = 0, $4 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12174
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12176
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12180
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12184
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12188
 if (!(HEAP8[$2 + 770 >> 0] | 0)) {
  HEAP32[$4 >> 2] = 6; //@line 12195
  _mbed_tracef(16, 11020, 11077, $4); //@line 12196
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 12197
  HEAP32[$8 >> 2] = 6; //@line 12198
  _mbed_tracef(16, 11020, 11106, $8); //@line 12199
  return;
 } else {
  HEAP32[$12 >> 2] = 5; //@line 12202
  _mbed_tracef(16, 11020, 11077, $12); //@line 12203
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 12204
  HEAP32[$16 >> 2] = 5; //@line 12205
  _mbed_tracef(16, 11020, 11106, $16); //@line 12206
  return;
 }
}
function __ZN12LoRaWANStack16remove_a_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11159
 STACKTOP = STACKTOP + 16 | 0; //@line 11160
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11160
 if (!(HEAP32[$0 + 2480 >> 2] | 0)) {
  _mbed_tracef(2, 12506, 12856, sp); //@line 11166
  $$0 = -1012; //@line 11167
  STACKTOP = sp; //@line 11168
  return $$0 | 0; //@line 11168
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11170
 $5 = __ZN7LoRaMac21remove_single_channelEh($0, $1) | 0; //@line 11171
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 359; //@line 11174
  sp = STACKTOP; //@line 11175
  STACKTOP = sp; //@line 11176
  return 0; //@line 11176
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11178
 $$0 = $5; //@line 11179
 STACKTOP = sp; //@line 11180
 return $$0 | 0; //@line 11180
}
function _mbedtls_ccm_setkey__async_cb_49($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22149
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22151
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22153
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22155
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22157
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 22161
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 22164
 $9 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 22165
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 569; //@line 22168
  sp = STACKTOP; //@line 22169
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 22173
 ___async_unwind = 0; //@line 22174
 HEAP32[$ReallocAsyncCtx >> 2] = 569; //@line 22175
 sp = STACKTOP; //@line 22176
 return;
}
function __ZN4mbed11InterruptInD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12345
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12347
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 12349
 if (!$4) {
  __ZdlPv($2); //@line 12352
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 12357
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 12358
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 12359
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 12362
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 12363
  HEAP32[$9 >> 2] = $2; //@line 12364
  sp = STACKTOP; //@line 12365
  return;
 }
 ___async_unwind = 0; //@line 12368
 HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 12369
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 12370
 HEAP32[$9 >> 2] = $2; //@line 12371
 sp = STACKTOP; //@line 12372
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_102($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 25281
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25285
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25287
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25289
 HEAP32[$4 + 1788 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 25292
 HEAP8[$4 + 1936 >> 0] = 1; //@line 25294
 HEAP8[$6 >> 0] = 1; //@line 25295
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 25296
 __ZN7LoRaPHY25setup_public_network_modeEb($8, 1); //@line 25297
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 476; //@line 25300
  sp = STACKTOP; //@line 25301
  return;
 }
 ___async_unwind = 0; //@line 25304
 HEAP32[$ReallocAsyncCtx10 >> 2] = 476; //@line 25305
 sp = STACKTOP; //@line 25306
 return;
}
function __ZN12LoRaWANStack8shutdownEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11636
 STACKTOP = STACKTOP + 16 | 0; //@line 11637
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11637
 $1 = sp; //@line 11638
 HEAP32[$1 >> 2] = 0; //@line 11639
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 11640
 __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status($0, $1); //@line 11641
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 364; //@line 11644
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11646
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 11648
  sp = STACKTOP; //@line 11649
  STACKTOP = sp; //@line 11650
  return 0; //@line 11650
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11652
  STACKTOP = sp; //@line 11654
  return HEAP32[$1 >> 2] | 0; //@line 11654
 }
 return 0; //@line 11656
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 11299
 STACKTOP = STACKTOP + 32 | 0; //@line 11300
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11300
 $vararg_buffer = sp; //@line 11301
 $3 = sp + 20 | 0; //@line 11302
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 11306
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 11308
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 11310
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 11312
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 11314
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 11319
  $10 = -1; //@line 11320
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 11323
 }
 STACKTOP = sp; //@line 11325
 return $10 | 0; //@line 11325
}
function __ZN12LoRaWANStack17drop_channel_listEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11185
 STACKTOP = STACKTOP + 16 | 0; //@line 11186
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11186
 if (!(HEAP32[$0 + 2480 >> 2] | 0)) {
  _mbed_tracef(2, 12506, 12856, sp); //@line 11192
  $$0 = -1012; //@line 11193
  STACKTOP = sp; //@line 11194
  return $$0 | 0; //@line 11194
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11196
 $4 = __ZN7LoRaMac19remove_channel_planEv($0) | 0; //@line 11197
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 360; //@line 11200
  sp = STACKTOP; //@line 11201
  STACKTOP = sp; //@line 11202
  return 0; //@line 11202
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11204
 $$0 = $4; //@line 11205
 STACKTOP = sp; //@line 11206
 return $$0 | 0; //@line 11206
}
function __ZN4mbed7Timeout7handlerEv__async_cb_174($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32406
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32410
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 32411
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 32417
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 32418
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 32419
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 119; //@line 32422
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 32423
  HEAP32[$9 >> 2] = $4; //@line 32424
  sp = STACKTOP; //@line 32425
  return;
 }
 ___async_unwind = 0; //@line 32428
 HEAP32[$ReallocAsyncCtx3 >> 2] = 119; //@line 32429
 $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 32430
 HEAP32[$9 >> 2] = $4; //@line 32431
 sp = STACKTOP; //@line 32432
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7471
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 7474
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 7476
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 7478
 if (!($$unpack2$i & 1)) {
  $12 = $$unpack$i; //@line 7483
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 7488
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7490
 FUNCTION_TABLE_vii[$12 & 15]($5, $1); //@line 7491
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 232; //@line 7494
  sp = STACKTOP; //@line 7495
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7498
  return;
 }
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6266
 STACKTOP = STACKTOP + 16 | 0; //@line 6267
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6267
 $vararg_buffer = sp; //@line 6268
 HEAP32[$vararg_buffer >> 2] = $0; //@line 6269
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 6271
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 6273
 _mbed_error_printf(14577, $vararg_buffer); //@line 6274
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6275
 _mbed_die(); //@line 6276
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 614; //@line 6279
  sp = STACKTOP; //@line 6280
  STACKTOP = sp; //@line 6281
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6283
  STACKTOP = sp; //@line 6284
  return;
 }
}
function _schedule_interrupt__async_cb_45($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22050
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22052
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22054
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22056
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 22059
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 22060
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 22061
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 22065
  ___async_unwind = 0; //@line 22066
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 608; //@line 22068
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 22070
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 22072
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 22074
 sp = STACKTOP; //@line 22075
 return;
}
function __ZN16SX1276_LoRaRadio7standbyEv($0) {
 $0 = $0 | 0;
 var $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 102
 STACKTOP = STACKTOP + 32 | 0; //@line 103
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 103
 $vararg_buffer3 = sp + 16 | 0; //@line 104
 $vararg_buffer1 = sp + 8 | 0; //@line 105
 _mbed_tracef(16, 11020, 11772, sp); //@line 107
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 109
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 111
 HEAP32[$vararg_buffer1 >> 2] = 1; //@line 112
 _mbed_tracef(16, 11020, 11077, $vararg_buffer1); //@line 113
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 114
 HEAP32[$vararg_buffer3 >> 2] = 1; //@line 115
 _mbed_tracef(16, 11020, 11106, $vararg_buffer3); //@line 116
 HEAP8[$0 + 688 >> 0] = 0; //@line 118
 STACKTOP = sp; //@line 119
 return;
}
function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16083
 STACKTOP = STACKTOP + 16 | 0; //@line 16084
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16084
 $1 = sp; //@line 16085
 HEAP32[$1 >> 2] = $varargs; //@line 16086
 $2 = HEAP32[2599] | 0; //@line 16087
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16088
 $3 = _vfprintf($2, $0, $1) | 0; //@line 16089
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 694; //@line 16092
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 16094
  sp = STACKTOP; //@line 16095
  STACKTOP = sp; //@line 16096
  return 0; //@line 16096
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16098
  STACKTOP = sp; //@line 16099
  return $3 | 0; //@line 16099
 }
 return 0; //@line 16101
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29693
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29695
 $3 = HEAP32[$2 >> 2] | 0; //@line 29696
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0; //@line 29699
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 29700
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 29701
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 542; //@line 29704
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 29705
  HEAP32[$7 >> 2] = $2; //@line 29706
  sp = STACKTOP; //@line 29707
  return;
 }
 ___async_unwind = 0; //@line 29710
 HEAP32[$ReallocAsyncCtx2 >> 2] = 542; //@line 29711
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 29712
 HEAP32[$7 >> 2] = $2; //@line 29713
 sp = STACKTOP; //@line 29714
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10260
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 10263
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 10265
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 10267
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 10272
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 10277
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10279
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 10280
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 334; //@line 10283
  sp = STACKTOP; //@line 10284
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10287
  return;
 }
}
function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15883
 STACKTOP = STACKTOP + 16 | 0; //@line 15884
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15884
 $3 = sp; //@line 15885
 HEAP32[$3 >> 2] = $varargs; //@line 15886
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 15887
 $4 = _vsnprintf($0, $1, $2, $3) | 0; //@line 15888
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 690; //@line 15891
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 15893
  sp = STACKTOP; //@line 15894
  STACKTOP = sp; //@line 15895
  return 0; //@line 15895
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15897
  STACKTOP = sp; //@line 15898
  return $4 | 0; //@line 15898
 }
 return 0; //@line 15900
}
function _initialize__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22763
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22765
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22767
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22769
 $9 = HEAP32[(HEAP32[$6 >> 2] | 0) + 24 >> 2] | 0; //@line 22772
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 22773
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 22774
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 22778
  ___async_unwind = 0; //@line 22779
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 598; //@line 22781
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 22783
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 22785
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 22787
 sp = STACKTOP; //@line 22788
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30677
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30679
 $3 = HEAP32[$2 >> 2] | 0; //@line 30680
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0; //@line 30683
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 30684
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 30685
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 539; //@line 30688
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 30689
  HEAP32[$7 >> 2] = $2; //@line 30690
  sp = STACKTOP; //@line 30691
  return;
 }
 ___async_unwind = 0; //@line 30694
 HEAP32[$ReallocAsyncCtx2 >> 2] = 539; //@line 30695
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 30696
 HEAP32[$7 >> 2] = $2; //@line 30697
 sp = STACKTOP; //@line 30698
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12487
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 12490
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 12492
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 12494
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 12499
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 12504
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12506
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 12507
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 388; //@line 12510
  sp = STACKTOP; //@line 12511
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12514
  return;
 }
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1864
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 1867
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 1869
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 1871
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 1876
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 1881
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1883
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 1884
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 91; //@line 1887
  sp = STACKTOP; //@line 1888
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1891
  return;
 }
}
function _mbedtls_ccm_setkey__async_cb_50($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22182
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22184
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22186
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22188
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22190
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 22191
 $9 = _mbedtls_cipher_setup($2, $4) | 0; //@line 22192
 if (!___async) {
  HEAP32[___async_retval >> 2] = $9; //@line 22196
  ___async_unwind = 0; //@line 22197
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 568; //@line 22199
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 22201
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 22203
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 22205
 sp = STACKTOP; //@line 22206
 return;
}
function _mbed_vtracef__async_cb_37($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 21311
 HEAP32[171] = HEAP32[169]; //@line 21313
 $2 = HEAP32[177] | 0; //@line 21314
 if (!$2) {
  return;
 }
 $4 = HEAP32[178] | 0; //@line 21319
 HEAP32[178] = 0; //@line 21320
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 21321
 FUNCTION_TABLE_v[$2 & 15](); //@line 21322
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 21325
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 21326
  HEAP32[$5 >> 2] = $4; //@line 21327
  sp = STACKTOP; //@line 21328
  return;
 }
 ___async_unwind = 0; //@line 21331
 HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 21332
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 21333
 HEAP32[$5 >> 2] = $4; //@line 21334
 sp = STACKTOP; //@line 21335
 return;
}
function _mbed_vtracef__async_cb_34($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 21047
 HEAP32[171] = HEAP32[169]; //@line 21049
 $2 = HEAP32[177] | 0; //@line 21050
 if (!$2) {
  return;
 }
 $4 = HEAP32[178] | 0; //@line 21055
 HEAP32[178] = 0; //@line 21056
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 21057
 FUNCTION_TABLE_v[$2 & 15](); //@line 21058
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 21061
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 21062
  HEAP32[$5 >> 2] = $4; //@line 21063
  sp = STACKTOP; //@line 21064
  return;
 }
 ___async_unwind = 0; //@line 21067
 HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 21068
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 21069
 HEAP32[$5 >> 2] = $4; //@line 21070
 sp = STACKTOP; //@line 21071
 return;
}
function _mbed_vtracef__async_cb_33($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 21017
 HEAP32[171] = HEAP32[169]; //@line 21019
 $2 = HEAP32[177] | 0; //@line 21020
 if (!$2) {
  return;
 }
 $4 = HEAP32[178] | 0; //@line 21025
 HEAP32[178] = 0; //@line 21026
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 21027
 FUNCTION_TABLE_v[$2 & 15](); //@line 21028
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 21031
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 21032
  HEAP32[$5 >> 2] = $4; //@line 21033
  sp = STACKTOP; //@line 21034
  return;
 }
 ___async_unwind = 0; //@line 21037
 HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 21038
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 21039
 HEAP32[$5 >> 2] = $4; //@line 21040
 sp = STACKTOP; //@line 21041
 return;
}
function _mbedtls_cipher_info_from_values($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010 = 0, $$011 = 0, $3 = 0, $6 = 0, label = 0;
 $3 = HEAP32[2370] | 0; //@line 2197
 if (!$3) {
  $$010 = 0; //@line 2200
  return $$010 | 0; //@line 2201
 } else {
  $$011 = 9476; //@line 2203
  $6 = $3; //@line 2203
 }
 while (1) {
  if ((HEAP32[HEAP32[$6 + 28 >> 2] >> 2] | 0) == ($0 | 0)) {
   if ((HEAP32[$6 + 8 >> 2] | 0) == ($1 | 0)) {
    if ((HEAP32[$6 + 4 >> 2] | 0) == ($2 | 0)) {
     $$010 = $6; //@line 2219
     label = 6; //@line 2220
     break;
    }
   }
  }
  $6 = HEAP32[$$011 + 12 >> 2] | 0; //@line 2227
  if (!$6) {
   $$010 = 0; //@line 2230
   label = 6; //@line 2231
   break;
  } else {
   $$011 = $$011 + 8 | 0; //@line 2234
  }
 }
 if ((label | 0) == 6) {
  return $$010 | 0; //@line 2238
 }
 return 0; //@line 2240
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $24 = 0, $4 = 0, $9 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6071
 HEAP32[$4 + 1168 >> 2] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0 ? 2 : 1; //@line 6076
 $9 = $4 + 2040 | 0; //@line 6077
 HEAP32[$9 >> 2] = 2; //@line 6078
 HEAP32[$4 + 2076 >> 2] = 2; //@line 6080
 __ZN14LoRaMacCommand20clear_command_bufferEv($4 + 476 | 0); //@line 6082
 HEAP8[$4 + 2047 >> 0] = HEAP8[$4 + 1699 >> 0] | 0; //@line 6086
 HEAP8[$4 + 2046 >> 0] = 0; //@line 6088
 HEAP32[$4 + 2048 >> 2] = 0; //@line 6090
 HEAP8[$4 + 1180 >> 0] = 0; //@line 6092
 HEAP32[$9 >> 2] = 0; //@line 6093
 if ((HEAP32[$4 + 2036 >> 2] | 0) == 1) {
  return;
 }
 if (HEAP8[$4 + 1174 >> 0] | 0) {
  return;
 }
 $24 = $4 + 1760 | 0; //@line 6106
 HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1; //@line 6109
 return;
}
function _sprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16005
 STACKTOP = STACKTOP + 16 | 0; //@line 16006
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16006
 $2 = sp; //@line 16007
 HEAP32[$2 >> 2] = $varargs; //@line 16008
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16009
 $3 = _vsprintf($0, $1, $2) | 0; //@line 16010
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 692; //@line 16013
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 16015
  sp = STACKTOP; //@line 16016
  STACKTOP = sp; //@line 16017
  return 0; //@line 16017
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16019
  STACKTOP = sp; //@line 16020
  return $3 | 0; //@line 16020
 }
 return 0; //@line 16022
}
function __ZN16LoRaWANInterface16set_device_classE14device_class_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5730
 STACKTOP = STACKTOP + 16 | 0; //@line 5731
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5731
 $2 = sp; //@line 5732
 HEAP32[$2 >> 2] = $1; //@line 5733
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5735
 $4 = __ZN12LoRaWANStack16set_device_classERK14device_class_t($0 + 4 | 0, $2) | 0; //@line 5736
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 164; //@line 5739
  sp = STACKTOP; //@line 5740
  STACKTOP = sp; //@line 5741
  return 0; //@line 5741
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5743
  STACKTOP = sp; //@line 5744
  return $4 | 0; //@line 5744
 }
 return 0; //@line 5746
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 16668
 $5 = HEAP32[$4 >> 2] | 0; //@line 16669
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 16673
   HEAP32[$1 + 24 >> 2] = $3; //@line 16675
   HEAP32[$1 + 36 >> 2] = 1; //@line 16677
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 16681
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 16684
    HEAP32[$1 + 24 >> 2] = 2; //@line 16686
    HEAP8[$1 + 54 >> 0] = 1; //@line 16688
    break;
   }
   $10 = $1 + 24 | 0; //@line 16691
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 16695
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_345($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14431
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14435
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 14440
 _mbed_assert_internal(13121, 12408, 646); //@line 14441
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 346; //@line 14444
  $6 = $ReallocAsyncCtx6 + 4 | 0; //@line 14445
  HEAP32[$6 >> 2] = $4; //@line 14446
  sp = STACKTOP; //@line 14447
  return;
 }
 ___async_unwind = 0; //@line 14450
 HEAP32[$ReallocAsyncCtx6 >> 2] = 346; //@line 14451
 $6 = $ReallocAsyncCtx6 + 4 | 0; //@line 14452
 HEAP32[$6 >> 2] = $4; //@line 14453
 sp = STACKTOP; //@line 14454
 return;
}
function __ZN4mbed5Timer5startEv($0) {
 $0 = $0 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2995
 if (HEAP32[$0 >> 2] | 0) {
  return;
 }
 if (HEAP8[$0 + 28 >> 0] | 0) {}
 $7 = HEAP32[$0 + 24 >> 2] | 0; //@line 3007
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 3008
 $8 = _ticker_read_us($7) | 0; //@line 3009
 $9 = tempRet0; //@line 3010
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 121; //@line 3013
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3015
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 3017
  sp = STACKTOP; //@line 3018
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3021
 $13 = $0 + 8 | 0; //@line 3023
 HEAP32[$13 >> 2] = $8; //@line 3025
 HEAP32[$13 + 4 >> 2] = $9; //@line 3028
 HEAP32[$0 >> 2] = 1; //@line 3029
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_69($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23631
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23633
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23635
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 23637
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1856 | 0); //@line 23638
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 480; //@line 23641
  $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 23642
  HEAP32[$6 >> 2] = $2; //@line 23643
  sp = STACKTOP; //@line 23644
  return;
 }
 ___async_unwind = 0; //@line 23647
 HEAP32[$ReallocAsyncCtx2 >> 2] = 480; //@line 23648
 $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 23649
 HEAP32[$6 >> 2] = $2; //@line 23650
 sp = STACKTOP; //@line 23651
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_325($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 12666
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12670
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 12675
 _mbed_assert_internal(13121, 12408, 646); //@line 12676
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 265; //@line 12679
  $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 12680
  HEAP32[$6 >> 2] = $4; //@line 12681
  sp = STACKTOP; //@line 12682
  return;
 }
 ___async_unwind = 0; //@line 12685
 HEAP32[$ReallocAsyncCtx10 >> 2] = 265; //@line 12686
 $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 12687
 HEAP32[$6 >> 2] = $4; //@line 12688
 sp = STACKTOP; //@line 12689
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_321($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 12433
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12437
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 12442
 _mbed_assert_internal(13121, 12408, 646); //@line 12443
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 257; //@line 12446
  $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 12447
  HEAP32[$6 >> 2] = $4; //@line 12448
  sp = STACKTOP; //@line 12449
  return;
 }
 ___async_unwind = 0; //@line 12452
 HEAP32[$ReallocAsyncCtx12 >> 2] = 257; //@line 12453
 $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 12454
 HEAP32[$6 >> 2] = $4; //@line 12455
 sp = STACKTOP; //@line 12456
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_304($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 11519
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11523
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 11528
 _mbed_assert_internal(13121, 12408, 646); //@line 11529
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 253; //@line 11532
  $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 11533
  HEAP32[$6 >> 2] = $4; //@line 11534
  sp = STACKTOP; //@line 11535
  return;
 }
 ___async_unwind = 0; //@line 11538
 HEAP32[$ReallocAsyncCtx10 >> 2] = 253; //@line 11539
 $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 11540
 HEAP32[$6 >> 2] = $4; //@line 11541
 sp = STACKTOP; //@line 11542
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_302($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 11452
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11456
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 11461
 _mbed_assert_internal(13121, 12408, 646); //@line 11462
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 249; //@line 11465
  $6 = $ReallocAsyncCtx11 + 4 | 0; //@line 11466
  HEAP32[$6 >> 2] = $4; //@line 11467
  sp = STACKTOP; //@line 11468
  return;
 }
 ___async_unwind = 0; //@line 11471
 HEAP32[$ReallocAsyncCtx11 >> 2] = 249; //@line 11472
 $6 = $ReallocAsyncCtx11 + 4 | 0; //@line 11473
 HEAP32[$6 >> 2] = $4; //@line 11474
 sp = STACKTOP; //@line 11475
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_300($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 11385
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11389
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 11394
 _mbed_assert_internal(13121, 12408, 646); //@line 11395
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 245; //@line 11398
  $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 11399
  HEAP32[$6 >> 2] = $4; //@line 11400
  sp = STACKTOP; //@line 11401
  return;
 }
 ___async_unwind = 0; //@line 11404
 HEAP32[$ReallocAsyncCtx12 >> 2] = 245; //@line 11405
 $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 11406
 HEAP32[$6 >> 2] = $4; //@line 11407
 sp = STACKTOP; //@line 11408
 return;
}
function _equeue_post($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3581
 $4 = _equeue_tick() | 0; //@line 3583
 HEAP32[$2 + -4 >> 2] = $1; //@line 3585
 $6 = $2 + -16 | 0; //@line 3586
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $4; //@line 3589
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3590
 $9 = _equeue_enqueue($0, $2 + -36 | 0, $4) | 0; //@line 3591
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 131; //@line 3594
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3596
  sp = STACKTOP; //@line 3597
  return 0; //@line 3598
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3600
  _equeue_sema_signal($0 + 48 | 0); //@line 3602
  return $9 | 0; //@line 3603
 }
 return 0; //@line 3605
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_97($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25040
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25044
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 25049
 _mbed_assert_internal(13121, 12408, 646); //@line 25050
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 317; //@line 25053
  $6 = $ReallocAsyncCtx4 + 4 | 0; //@line 25054
  HEAP32[$6 >> 2] = $4; //@line 25055
  sp = STACKTOP; //@line 25056
  return;
 }
 ___async_unwind = 0; //@line 25059
 HEAP32[$ReallocAsyncCtx4 >> 2] = 317; //@line 25060
 $6 = $ReallocAsyncCtx4 + 4 | 0; //@line 25061
 HEAP32[$6 >> 2] = $4; //@line 25062
 sp = STACKTOP; //@line 25063
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_419($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 31700
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31704
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 31706
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 31708
 $9 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 31710
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 31711
 FUNCTION_TABLE_viii[$9 & 7]($4, $6, $8); //@line 31712
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 333; //@line 31715
  sp = STACKTOP; //@line 31716
  return;
 }
 ___async_unwind = 0; //@line 31719
 HEAP32[$ReallocAsyncCtx >> 2] = 333; //@line 31720
 sp = STACKTOP; //@line 31721
 return;
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 11406
 $3 = HEAP8[$1 >> 0] | 0; //@line 11407
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 11412
  $$lcssa8 = $2; //@line 11412
 } else {
  $$011 = $1; //@line 11414
  $$0710 = $0; //@line 11414
  do {
   $$0710 = $$0710 + 1 | 0; //@line 11416
   $$011 = $$011 + 1 | 0; //@line 11417
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 11418
   $9 = HEAP8[$$011 >> 0] | 0; //@line 11419
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 11424
  $$lcssa8 = $8; //@line 11424
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 11434
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 17218
 STACKTOP = STACKTOP + 16 | 0; //@line 17219
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17219
 $vararg_buffer = sp; //@line 17220
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 17221
 FUNCTION_TABLE_v[$0 & 15](); //@line 17222
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 712; //@line 17225
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 17227
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 17229
  sp = STACKTOP; //@line 17230
  STACKTOP = sp; //@line 17231
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17233
  _abort_message(18853, $vararg_buffer); //@line 17234
 }
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15484
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15488
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15492
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 15495
 _mbed_tracef(16, 12506, 12897, $4); //@line 15496
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15497
 __ZN12LoRaWANStack23process_connected_stateEv($8); //@line 15498
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 340; //@line 15501
  sp = STACKTOP; //@line 15502
  return;
 }
 ___async_unwind = 0; //@line 15505
 HEAP32[$ReallocAsyncCtx2 >> 2] = 340; //@line 15506
 sp = STACKTOP; //@line 15507
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_342($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 14278
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14282
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14283
 if (!$5) {
  HEAP32[___async_retval >> 2] = 0; //@line 14287
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 14291
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(4) | 0; //@line 14292
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 14293
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 355; //@line 14296
  sp = STACKTOP; //@line 14297
  return;
 }
 ___async_unwind = 0; //@line 14300
 HEAP32[$ReallocAsyncCtx8 >> 2] = 355; //@line 14301
 sp = STACKTOP; //@line 14302
 return;
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6865
 $2 = HEAP32[2599] | 0; //@line 6866
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6867
 _putc($1, $2) | 0; //@line 6868
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 636; //@line 6871
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 6873
  sp = STACKTOP; //@line 6874
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6877
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6878
 _fflush($2) | 0; //@line 6879
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 637; //@line 6882
  sp = STACKTOP; //@line 6883
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6886
  return;
 }
}
function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do {
  if (!$2) {
   $14 = 0; //@line 15848
  } else {
   $$01318 = $0; //@line 15850
   $$01417 = $2; //@line 15850
   $$019 = $1; //@line 15850
   while (1) {
    $4 = HEAP8[$$01318 >> 0] | 0; //@line 15852
    $5 = HEAP8[$$019 >> 0] | 0; //@line 15853
    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
     break;
    }
    $$01417 = $$01417 + -1 | 0; //@line 15858
    if (!$$01417) {
     $14 = 0; //@line 15863
     break L1;
    } else {
     $$01318 = $$01318 + 1 | 0; //@line 15866
     $$019 = $$019 + 1 | 0; //@line 15866
    }
   }
   $14 = ($4 & 255) - ($5 & 255) | 0; //@line 15872
  }
 } while (0);
 return $14 | 0; //@line 15875
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 11358
 STACKTOP = STACKTOP + 32 | 0; //@line 11359
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11359
 $vararg_buffer = sp; //@line 11360
 HEAP32[$0 + 36 >> 2] = 12; //@line 11363
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 11371
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 11373
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 11375
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 11380
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 11383
 STACKTOP = sp; //@line 11384
 return $14 | 0; //@line 11384
}
function __ZN7LoRaMac23on_backoff_timer_expiryEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15445
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15446
 $1 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 15447
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 445; //@line 15450
  sp = STACKTOP; //@line 15451
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15454
 if (!$1) {
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15459
 _mbed_assert_internal(13237, 13130, 844); //@line 15460
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 446; //@line 15463
  sp = STACKTOP; //@line 15464
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15467
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_145($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 29548
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29550
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29552
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29554
 $8 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0; //@line 29556
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 29557
 FUNCTION_TABLE_vii[$8 & 15]($2, $4); //@line 29558
 if (!___async) {
  ___async_unwind = 0; //@line 29561
 }
 HEAP32[$ReallocAsyncCtx17 >> 2] = 200; //@line 29563
 HEAP32[$ReallocAsyncCtx17 + 4 >> 2] = $6; //@line 29565
 HEAP32[$ReallocAsyncCtx17 + 8 >> 2] = $2; //@line 29567
 sp = STACKTOP; //@line 29568
 return;
}
function _mbed_tracef($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4753
 STACKTOP = STACKTOP + 16 | 0; //@line 4754
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4754
 $3 = sp; //@line 4755
 HEAP32[$3 >> 2] = $varargs; //@line 4756
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4757
 _mbed_vtracef($0, $1, $2, $3); //@line 4758
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 140; //@line 4761
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 4763
  sp = STACKTOP; //@line 4764
  STACKTOP = sp; //@line 4765
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4767
  STACKTOP = sp; //@line 4768
  return;
 }
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_270($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 6351
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6353
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6355
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6357
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 6359
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $6 + 1856 | 0); //@line 6360
 if (!___async) {
  ___async_unwind = 0; //@line 6363
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 434; //@line 6365
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $6; //@line 6367
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $2; //@line 6369
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $4; //@line 6371
 sp = STACKTOP; //@line 6372
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_266($0) {
 $0 = $0 | 0;
 var $18 = 0, $2 = 0, $3 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6118
 $3 = $2 + 2040 | 0; //@line 6119
 HEAP32[$3 >> 2] = 2; //@line 6120
 HEAP32[$2 + 2076 >> 2] = 2; //@line 6122
 __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 476 | 0); //@line 6124
 HEAP8[$2 + 2047 >> 0] = HEAP8[$2 + 1699 >> 0] | 0; //@line 6128
 HEAP8[$2 + 2046 >> 0] = 0; //@line 6130
 HEAP32[$2 + 2048 >> 2] = 0; //@line 6132
 HEAP8[$2 + 1180 >> 0] = 0; //@line 6134
 HEAP32[$3 >> 2] = 0; //@line 6135
 if ((HEAP32[$2 + 2036 >> 2] | 0) == 1) {
  return;
 }
 if (HEAP8[$2 + 1174 >> 0] | 0) {
  return;
 }
 $18 = $2 + 1760 | 0; //@line 6148
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1; //@line 6151
 return;
}
function __ZN12LoRaWANStack26process_status_check_stateEv__async_cb_318($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12310
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12312
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12314
 $5 = HEAP32[$2 >> 2] | 0; //@line 12315
 if (!($5 & 2)) {
  return;
 }
 HEAP32[$2 >> 2] = $5 & -3; //@line 12322
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 12323
 __ZN12LoRaWANStack23mcps_indication_handlerEv($4); //@line 12324
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 241; //@line 12327
  sp = STACKTOP; //@line 12328
  return;
 }
 ___async_unwind = 0; //@line 12331
 HEAP32[$ReallocAsyncCtx >> 2] = 241; //@line 12332
 sp = STACKTOP; //@line 12333
 return;
}
function _mbed_die__async_cb_215($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 2511
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2513
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 2515
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 2516
 _wait_ms(150); //@line 2517
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 617; //@line 2520
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 2521
  HEAP32[$4 >> 2] = $2; //@line 2522
  sp = STACKTOP; //@line 2523
  return;
 }
 ___async_unwind = 0; //@line 2526
 HEAP32[$ReallocAsyncCtx14 >> 2] = 617; //@line 2527
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 2528
 HEAP32[$4 >> 2] = $2; //@line 2529
 sp = STACKTOP; //@line 2530
 return;
}
function _mbed_die__async_cb_214($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 2486
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2488
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 2490
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 2491
 _wait_ms(150); //@line 2492
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 618; //@line 2495
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 2496
  HEAP32[$4 >> 2] = $2; //@line 2497
  sp = STACKTOP; //@line 2498
  return;
 }
 ___async_unwind = 0; //@line 2501
 HEAP32[$ReallocAsyncCtx13 >> 2] = 618; //@line 2502
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 2503
 HEAP32[$4 >> 2] = $2; //@line 2504
 sp = STACKTOP; //@line 2505
 return;
}
function _mbed_die__async_cb_213($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 2461
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2463
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 2465
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 2466
 _wait_ms(150); //@line 2467
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 619; //@line 2470
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 2471
  HEAP32[$4 >> 2] = $2; //@line 2472
  sp = STACKTOP; //@line 2473
  return;
 }
 ___async_unwind = 0; //@line 2476
 HEAP32[$ReallocAsyncCtx12 >> 2] = 619; //@line 2477
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 2478
 HEAP32[$4 >> 2] = $2; //@line 2479
 sp = STACKTOP; //@line 2480
 return;
}
function _mbed_die__async_cb_212($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 2436
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2438
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 2440
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 2441
 _wait_ms(150); //@line 2442
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 620; //@line 2445
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 2446
  HEAP32[$4 >> 2] = $2; //@line 2447
  sp = STACKTOP; //@line 2448
  return;
 }
 ___async_unwind = 0; //@line 2451
 HEAP32[$ReallocAsyncCtx11 >> 2] = 620; //@line 2452
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 2453
 HEAP32[$4 >> 2] = $2; //@line 2454
 sp = STACKTOP; //@line 2455
 return;
}
function _mbed_die__async_cb_211($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 2411
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2413
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 2415
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 2416
 _wait_ms(150); //@line 2417
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 621; //@line 2420
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 2421
  HEAP32[$4 >> 2] = $2; //@line 2422
  sp = STACKTOP; //@line 2423
  return;
 }
 ___async_unwind = 0; //@line 2426
 HEAP32[$ReallocAsyncCtx10 >> 2] = 621; //@line 2427
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 2428
 HEAP32[$4 >> 2] = $2; //@line 2429
 sp = STACKTOP; //@line 2430
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_370($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27922
 $4 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 788 >> 2] | 0; //@line 27926
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 60 >> 2] | 0; //@line 27932
 if (!$7) {
  return;
 }
 $10 = HEAP32[$7 >> 2] | 0; //@line 27938
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 27939
 FUNCTION_TABLE_vi[$10 & 1023]($4 + 48 | 0); //@line 27940
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 89; //@line 27943
  sp = STACKTOP; //@line 27944
  return;
 }
 ___async_unwind = 0; //@line 27947
 HEAP32[$ReallocAsyncCtx4 >> 2] = 89; //@line 27948
 sp = STACKTOP; //@line 27949
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_288($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10125
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10129
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10131
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 10133
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 10134
 FUNCTION_TABLE_vii[$7 & 15]($4, $6); //@line 10135
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 277; //@line 10138
  sp = STACKTOP; //@line 10139
  return;
 }
 ___async_unwind = 0; //@line 10142
 HEAP32[$ReallocAsyncCtx >> 2] = 277; //@line 10143
 sp = STACKTOP; //@line 10144
 return;
}
function __ZN7LoRaPHY18dl_channel_requestEhj__async_cb_295($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $10 = 0, $17 = 0, $6 = 0, $9 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10776
 $$ = HEAP8[___async_retval >> 0] & 1 ? 3 : 2; //@line 10780
 $9 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 124 >> 2] | 0; //@line 10782
 $10 = HEAPU8[$0 + 8 >> 0] | 0; //@line 10783
 $$1 = (HEAP32[$9 + ($10 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 10788
 if ($$1 << 24 >> 24 != 3) {
  $$0 = $$1; //@line 10791
  $17 = ___async_retval; //@line 10792
  HEAP8[$17 >> 0] = $$0; //@line 10793
  return;
 }
 HEAP32[$9 + ($10 * 12 | 0) + 4 >> 2] = $6; //@line 10797
 $$0 = 3; //@line 10798
 $17 = ___async_retval; //@line 10799
 HEAP8[$17 >> 0] = $$0; //@line 10800
 return;
}
function _mbed_die__async_cb_210($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 2386
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2388
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 2390
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 2391
 _wait_ms(150); //@line 2392
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 622; //@line 2395
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 2396
  HEAP32[$4 >> 2] = $2; //@line 2397
  sp = STACKTOP; //@line 2398
  return;
 }
 ___async_unwind = 0; //@line 2401
 HEAP32[$ReallocAsyncCtx9 >> 2] = 622; //@line 2402
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 2403
 HEAP32[$4 >> 2] = $2; //@line 2404
 sp = STACKTOP; //@line 2405
 return;
}
function _mbed_die__async_cb_209($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 2361
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2363
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 2365
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 2366
 _wait_ms(400); //@line 2367
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 623; //@line 2370
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 2371
  HEAP32[$4 >> 2] = $2; //@line 2372
  sp = STACKTOP; //@line 2373
  return;
 }
 ___async_unwind = 0; //@line 2376
 HEAP32[$ReallocAsyncCtx8 >> 2] = 623; //@line 2377
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 2378
 HEAP32[$4 >> 2] = $2; //@line 2379
 sp = STACKTOP; //@line 2380
 return;
}
function _mbed_die__async_cb_208($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2336
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2338
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 2340
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 2341
 _wait_ms(400); //@line 2342
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 624; //@line 2345
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 2346
  HEAP32[$4 >> 2] = $2; //@line 2347
  sp = STACKTOP; //@line 2348
  return;
 }
 ___async_unwind = 0; //@line 2351
 HEAP32[$ReallocAsyncCtx7 >> 2] = 624; //@line 2352
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 2353
 HEAP32[$4 >> 2] = $2; //@line 2354
 sp = STACKTOP; //@line 2355
 return;
}
function _mbed_die__async_cb_207($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 2311
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2313
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 2315
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 2316
 _wait_ms(400); //@line 2317
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 625; //@line 2320
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 2321
  HEAP32[$4 >> 2] = $2; //@line 2322
  sp = STACKTOP; //@line 2323
  return;
 }
 ___async_unwind = 0; //@line 2326
 HEAP32[$ReallocAsyncCtx6 >> 2] = 625; //@line 2327
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 2328
 HEAP32[$4 >> 2] = $2; //@line 2329
 sp = STACKTOP; //@line 2330
 return;
}
function _mbed_die__async_cb_206($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 2286
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2288
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 2290
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 2291
 _wait_ms(400); //@line 2292
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 626; //@line 2295
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 2296
  HEAP32[$4 >> 2] = $2; //@line 2297
  sp = STACKTOP; //@line 2298
  return;
 }
 ___async_unwind = 0; //@line 2301
 HEAP32[$ReallocAsyncCtx5 >> 2] = 626; //@line 2302
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 2303
 HEAP32[$4 >> 2] = $2; //@line 2304
 sp = STACKTOP; //@line 2305
 return;
}
function _mbed_die__async_cb_205($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 2261
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2263
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 2265
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 2266
 _wait_ms(400); //@line 2267
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 627; //@line 2270
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 2271
  HEAP32[$4 >> 2] = $2; //@line 2272
  sp = STACKTOP; //@line 2273
  return;
 }
 ___async_unwind = 0; //@line 2276
 HEAP32[$ReallocAsyncCtx4 >> 2] = 627; //@line 2277
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 2278
 HEAP32[$4 >> 2] = $2; //@line 2279
 sp = STACKTOP; //@line 2280
 return;
}
function _mbed_die__async_cb_204($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2236
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2238
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 2240
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 2241
 _wait_ms(400); //@line 2242
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 628; //@line 2245
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 2246
  HEAP32[$4 >> 2] = $2; //@line 2247
  sp = STACKTOP; //@line 2248
  return;
 }
 ___async_unwind = 0; //@line 2251
 HEAP32[$ReallocAsyncCtx3 >> 2] = 628; //@line 2252
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 2253
 HEAP32[$4 >> 2] = $2; //@line 2254
 sp = STACKTOP; //@line 2255
 return;
}
function _mbed_die__async_cb_203($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2211
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2213
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 2215
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 2216
 _wait_ms(400); //@line 2217
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 629; //@line 2220
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 2221
  HEAP32[$4 >> 2] = $2; //@line 2222
  sp = STACKTOP; //@line 2223
  return;
 }
 ___async_unwind = 0; //@line 2226
 HEAP32[$ReallocAsyncCtx2 >> 2] = 629; //@line 2227
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 2228
 HEAP32[$4 >> 2] = $2; //@line 2229
 sp = STACKTOP; //@line 2230
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31630
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31634
 HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 8 >> 2] = $AsyncRetVal; //@line 31637
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 31642
 _mbed_assert_internal(15785, 15788, 149); //@line 31643
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 676; //@line 31646
  sp = STACKTOP; //@line 31647
  return;
 }
 ___async_unwind = 0; //@line 31650
 HEAP32[$ReallocAsyncCtx2 >> 2] = 676; //@line 31651
 sp = STACKTOP; //@line 31652
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_364($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27519
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27523
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27525
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$6 >> 2] = 2; //@line 27528
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 27531
 _mbed_assert_internal(13121, 12408, 646); //@line 27532
 if (!___async) {
  ___async_unwind = 0; //@line 27535
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 238; //@line 27537
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $4; //@line 27539
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $6; //@line 27541
 sp = STACKTOP; //@line 27542
 return;
}
function _mbed_die__async_cb_202($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2186
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2188
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 2190
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 2191
 _wait_ms(400); //@line 2192
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 630; //@line 2195
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 2196
  HEAP32[$4 >> 2] = $2; //@line 2197
  sp = STACKTOP; //@line 2198
  return;
 }
 ___async_unwind = 0; //@line 2201
 HEAP32[$ReallocAsyncCtx >> 2] = 630; //@line 2202
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 2203
 HEAP32[$4 >> 2] = $2; //@line 2204
 sp = STACKTOP; //@line 2205
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_271($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 6378
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6380
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6382
 $5 = $4 + 1836 | 0; //@line 6383
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 6384
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $5); //@line 6385
 if (!___async) {
  ___async_unwind = 0; //@line 6388
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 433; //@line 6390
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 6392
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $5; //@line 6394
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $4; //@line 6396
 sp = STACKTOP; //@line 6397
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb_377($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28372
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28376
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 28379
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 28381
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 28382
 FUNCTION_TABLE_vii[$7 & 15]($4, $6); //@line 28383
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 231; //@line 28386
  sp = STACKTOP; //@line 28387
  return;
 }
 ___async_unwind = 0; //@line 28390
 HEAP32[$ReallocAsyncCtx >> 2] = 231; //@line 28391
 sp = STACKTOP; //@line 28392
 return;
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6594
 STACKTOP = STACKTOP + 16 | 0; //@line 6595
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6595
 $1 = sp; //@line 6596
 HEAP32[$1 >> 2] = $varargs; //@line 6597
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6598
 _mbed_error_vfprintf($0, $1); //@line 6599
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 631; //@line 6602
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6604
  sp = STACKTOP; //@line 6605
  STACKTOP = sp; //@line 6606
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6608
  STACKTOP = sp; //@line 6609
  return;
 }
}
function __ZN7LoRaMac21post_process_mcps_reqEv($0) {
 $0 = $0 | 0;
 var $14 = 0, $20 = 0, $6 = 0;
 HEAP8[$0 + 1180 >> 0] = 0; //@line 11923
 HEAP32[$0 + 2040 >> 2] = 0; //@line 11925
 if ((HEAP32[$0 + 2036 >> 2] | 0) != 1) {
  if (HEAP8[$0 + 1174 >> 0] | 0) {
   return;
  }
  $20 = $0 + 1760 | 0; //@line 11936
  HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1; //@line 11939
  return;
 }
 $6 = $0 + 2046 | 0; //@line 11942
 if (!(HEAP8[$6 >> 0] | 0)) {
  return;
 }
 HEAP8[$0 + 1177 >> 0] = 0; //@line 11949
 HEAP8[$6 >> 0] = 0; //@line 11950
 HEAP8[$0 + 2028 >> 0] = 0; //@line 11952
 if (HEAP8[$0 + 1174 >> 0] | 0) {
  return;
 }
 $14 = $0 + 1760 | 0; //@line 11959
 HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1; //@line 11962
 return;
}
function __ZN4mbed10TimerEventC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3121
 HEAP32[$0 >> 2] = 640; //@line 3122
 $1 = $0 + 8 | 0; //@line 3123
 HEAP32[$1 >> 2] = 0; //@line 3124
 HEAP32[$1 + 4 >> 2] = 0; //@line 3124
 HEAP32[$1 + 8 >> 2] = 0; //@line 3124
 HEAP32[$1 + 12 >> 2] = 0; //@line 3124
 $2 = _get_us_ticker_data() | 0; //@line 3125
 HEAP32[$0 + 24 >> 2] = $2; //@line 3127
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3128
 _ticker_set_handler($2, 124); //@line 3129
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 125; //@line 3132
  sp = STACKTOP; //@line 3133
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3136
  return;
 }
}
function __ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9679
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9681
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 9683
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9685
 if (!$AsyncRetVal) {
  $11 = (HEAP32[$0 + 4 >> 2] | 0) + 2872 | 0; //@line 9688
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] & -18 | 1; //@line 9692
  __ZN7LoRaMac14set_tx_ongoingEb($4, 1); //@line 9693
  HEAP32[$6 >> 2] = 8; //@line 9694
  $$0 = 0; //@line 9695
 } else {
  $$0 = $AsyncRetVal; //@line 9697
 }
 HEAP16[___async_retval >> 1] = ($$0 | 0) == 0 ? $8 : $$0 & 65535; //@line 9703
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4699
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4701
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 4707
  return;
 }
 $4 = HEAP32[$2 >> 2] | 0; //@line 4710
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 4711
 __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 4712
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 489; //@line 4715
  sp = STACKTOP; //@line 4716
  return;
 }
 ___async_unwind = 0; //@line 4719
 HEAP32[$ReallocAsyncCtx2 >> 2] = 489; //@line 4720
 sp = STACKTOP; //@line 4721
 return;
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_243($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4372
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4376
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 4377
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 4383
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 4384
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 4385
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 421; //@line 4388
  sp = STACKTOP; //@line 4389
  return;
 }
 ___async_unwind = 0; //@line 4392
 HEAP32[$ReallocAsyncCtx2 >> 2] = 421; //@line 4393
 sp = STACKTOP; //@line 4394
 return;
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb_333($0) {
 $0 = $0 | 0;
 var $10 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13123
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13129
 $8 = (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) != 0; //@line 13131
 $10 = HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 1888 >> 2] | 0; //@line 13133
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 13134
 __ZN7LoRaPHY15setup_rx_windowEbj($6, $8, $10); //@line 13135
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 450; //@line 13138
  sp = STACKTOP; //@line 13139
  return;
 }
 ___async_unwind = 0; //@line 13142
 HEAP32[$ReallocAsyncCtx >> 2] = 450; //@line 13143
 sp = STACKTOP; //@line 13144
 return;
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 32967
 newDynamicTop = oldDynamicTop + increment | 0; //@line 32968
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 32972
  ___setErrNo(12); //@line 32973
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 32977
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 32981
   ___setErrNo(12); //@line 32982
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 32986
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 11529
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 11531
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 11537
  $11 = ___fwritex($0, $4, $3) | 0; //@line 11538
  if ($phitmp) {
   $13 = $11; //@line 11540
  } else {
   ___unlockfile($3); //@line 11542
   $13 = $11; //@line 11543
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 11547
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 11551
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 11554
 }
 return $15 | 0; //@line 11556
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2026
 __ZN4mbed6Ticker6detachEv($0 + 1240 | 0); //@line 2028
 HEAP8[$0 + 688 >> 0] = 0; //@line 2030
 $4 = HEAP32[$0 + 788 >> 2] | 0; //@line 2032
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 12 >> 2] | 0; //@line 2038
 if (!$7) {
  return;
 }
 $9 = HEAP32[$7 >> 2] | 0; //@line 2043
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2044
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 2045
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 96; //@line 2048
  sp = STACKTOP; //@line 2049
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2052
 return;
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 13865
 } else {
  $$056 = $2; //@line 13867
  $15 = $1; //@line 13867
  $8 = $0; //@line 13867
  while (1) {
   $14 = $$056 + -1 | 0; //@line 13875
   HEAP8[$14 >> 0] = HEAPU8[16516 + ($8 & 15) >> 0] | 0 | $3; //@line 13876
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 13877
   $15 = tempRet0; //@line 13878
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 13883
    break;
   } else {
    $$056 = $14; //@line 13886
   }
  }
 }
 return $$05$lcssa | 0; //@line 13890
}
function __ZN7LoRaMac21set_channel_data_rateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 15594
 STACKTOP = STACKTOP + 16 | 0; //@line 15595
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15595
 $vararg_buffer = sp; //@line 15596
 if (!(HEAP8[$0 + 1936 >> 0] | 0)) {
  if (__ZN7LoRaPHY18verify_tx_datarateEhb($0 + 4 | 0, $1, 0) | 0) {
   HEAP8[$0 + 1877 >> 0] = $1; //@line 15605
   $$0 = 0; //@line 15606
  } else {
   $$0 = -1003; //@line 15608
  }
 } else {
  _mbed_tracef(2, 13263, 13439, $vararg_buffer); //@line 15611
  $$0 = -1003; //@line 15612
 }
 STACKTOP = sp; //@line 15614
 return $$0 | 0; //@line 15614
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_233($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 4052
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4054
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4056
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(12) | 0; //@line 4063
 _mbed_assert_internal(13121, 13130, 231); //@line 4064
 if (!___async) {
  ___async_unwind = 0; //@line 4067
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 406; //@line 4069
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 4071
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $4; //@line 4073
 sp = STACKTOP; //@line 4074
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_232($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 4024
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4026
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4028
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 4035
 _mbed_assert_internal(13121, 13130, 231); //@line 4036
 if (!___async) {
  ___async_unwind = 0; //@line 4039
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 409; //@line 4041
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 4043
 HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $4; //@line 4045
 sp = STACKTOP; //@line 4046
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_231($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 3996
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3998
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4000
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(12) | 0; //@line 4007
 _mbed_assert_internal(13121, 13130, 231); //@line 4008
 if (!___async) {
  ___async_unwind = 0; //@line 4011
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 411; //@line 4013
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 4015
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 4017
 sp = STACKTOP; //@line 4018
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_230($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 3968
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3970
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3972
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 3979
 _mbed_assert_internal(13121, 13130, 231); //@line 3980
 if (!___async) {
  ___async_unwind = 0; //@line 3983
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 413; //@line 3985
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 3987
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 3989
 sp = STACKTOP; //@line 3990
 return;
}
function _mbedtls_gcm_free($0) {
 $0 = $0 | 0;
 var $$034$i = 0, $$05$i = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5190
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5191
 _mbedtls_cipher_free($0); //@line 5192
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 595; //@line 5195
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5197
  sp = STACKTOP; //@line 5198
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5201
 $$034$i = 400; //@line 5202
 $$05$i = $0; //@line 5202
 while (1) {
  $$034$i = $$034$i + -1 | 0; //@line 5204
  HEAP8[$$05$i >> 0] = 0; //@line 5206
  if (!$$034$i) {
   break;
  } else {
   $$05$i = $$05$i + 1 | 0; //@line 5211
  }
 }
 return;
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 17183
 $0 = ___cxa_get_globals_fast() | 0; //@line 17184
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 17187
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 17191
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 17203
    _emscripten_alloc_async_context(4, sp) | 0; //@line 17204
    __ZSt11__terminatePFvvE($16); //@line 17205
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 17210
 _emscripten_alloc_async_context(4, sp) | 0; //@line 17211
 __ZSt11__terminatePFvvE($17); //@line 17212
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 11746
 $3 = HEAP8[$1 >> 0] | 0; //@line 11748
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 11752
 $7 = HEAP32[$0 >> 2] | 0; //@line 11753
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 11758
  HEAP32[$0 + 4 >> 2] = 0; //@line 11760
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 11762
  HEAP32[$0 + 28 >> 2] = $14; //@line 11764
  HEAP32[$0 + 20 >> 2] = $14; //@line 11766
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 11772
  $$0 = 0; //@line 11773
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 11776
  $$0 = -1; //@line 11777
 }
 return $$0 | 0; //@line 11779
}
function __ZN4mbed11InterruptInD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14349
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14351
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 14353
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 14360
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 14361
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 14362
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 102; //@line 14365
  sp = STACKTOP; //@line 14366
  return;
 }
 ___async_unwind = 0; //@line 14369
 HEAP32[$ReallocAsyncCtx2 >> 2] = 102; //@line 14370
 sp = STACKTOP; //@line 14371
 return;
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23463
 $2 = HEAP32[$0 >> 2] | 0; //@line 23464
 $3 = $1 + 16 | 0; //@line 23465
 $4 = HEAP32[$3 >> 2] | 0; //@line 23466
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 23467
 __ZN6events10EventQueue6cancelEi($2, $4); //@line 23468
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 566; //@line 23471
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 23473
  sp = STACKTOP; //@line 23474
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 23477
  HEAP32[$3 >> 2] = 0; //@line 23478
  return;
 }
}
function __ZN4mbed7Timeout7handlerEv__async_cb_176($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32446
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32448
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32450
 $5 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0; //@line 32452
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 32453
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 32454
 if (!___async) {
  ___async_unwind = 0; //@line 32457
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 118; //@line 32459
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 32461
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 32463
 sp = STACKTOP; //@line 32464
 return;
}
function __ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $6 = 0, $7 = 0, $9 = 0;
 $6 = $0 + 64 | 0; //@line 19586
 _mbedtls_aes_init($6); //@line 19587
 $7 = _mbedtls_aes_setkey_enc($6, $3, $4) | 0; //@line 19588
 if (!$7) {
  $9 = _mbedtls_aes_crypt_ecb($6, 1, $1, $5) | 0; //@line 19591
  if (($2 & 65535) > 15 & ($9 | 0) == 0) {
   $$0 = _mbedtls_aes_crypt_ecb($6, 1, $1 + 16 | 0, $5 + 16 | 0) | 0; //@line 19599
  } else {
   $$0 = $9; //@line 19601
  }
 } else {
  $$0 = $7; //@line 19604
 }
 _mbedtls_aes_free($6); //@line 19606
 return $$0 | 0; //@line 19607
}
function __ZN7LoRaPHY17calculate_backoffEbbbhjj($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $14 = 0, $16 = 0, $24 = 0, $8 = 0;
 $8 = HEAP32[$0 + 72 >> 2] | 0; //@line 22993
 $14 = HEAPU8[(HEAP32[$0 + 124 >> 2] | 0) + (($4 & 255) * 12 | 0) + 9 >> 0] | 0; //@line 22999
 $16 = HEAP16[$8 + ($14 * 24 | 0) >> 1] | 0; //@line 23001
 $$0 = $5 >>> 0 < 36e5 ? 100 : $5 >>> 0 < 396e5 ? 1e3 : 1e4; //@line 23006
 $24 = (Math_imul((($16 & 65535) > ($$0 & 65535) | $1 ? $16 : $$0) & 65535, $6) | 0) - $6 | 0; //@line 23013
 HEAP32[$8 + ($14 * 24 | 0) + 12 >> 2] = $2 | $3 ? $24 : 0; //@line 23015
 return;
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$1 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4242
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4244
 $$ = HEAP8[___async_retval >> 0] & 1 ? 7 : 6; //@line 4248
 $6 = HEAP8[$2 >> 0] | 0; //@line 4249
 $$1 = ($6 << 24 >> 24 >= (HEAP8[$4 + 28 >> 0] | 0) ? $6 << 24 >> 24 <= (HEAP8[$4 + 29 >> 0] | 0) : 0) ? $$ : $$ & 5; //@line 4258
 $15 = HEAP8[$2 + 1 >> 0] | 0; //@line 4260
 HEAP8[___async_retval >> 0] = ($15 << 24 >> 24 >= (HEAP8[$4 + 32 >> 0] | 0) ? $15 << 24 >> 24 <= (HEAP8[$4 + 33 >> 0] | 0) : 0) ? $$1 : $$1 & 3; //@line 4271
 return;
}
function __ZN4mbed5Timer7read_msEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $18 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $6 = 0, $9 = 0;
 $4 = $0 + 8 | 0; //@line 26508
 $6 = HEAP32[$4 >> 2] | 0; //@line 26510
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 26513
 $11 = ___async_retval; //@line 26515
 $18 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 26522
 $24 = _i64Subtract(HEAP32[$11 >> 2] | 0, HEAP32[$11 + 4 >> 2] | 0, HEAP32[$18 >> 2] | 0, HEAP32[$18 + 4 >> 2] | 0) | 0; //@line 26528
 $26 = _i64Add($24 | 0, tempRet0 | 0, $6 | 0, $9 | 0) | 0; //@line 26530
 $28 = ___udivdi3($26 | 0, tempRet0 | 0, 1e3, 0) | 0; //@line 26532
 HEAP32[___async_retval >> 2] = $28; //@line 26535
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_169($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32165
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32167
 $4 = HEAP32[$2 + 12 >> 2] | 0; //@line 32169
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 32175
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 32176
 FUNCTION_TABLE_vi[$7 & 1023]($2); //@line 32177
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 178; //@line 32180
  sp = STACKTOP; //@line 32181
  return;
 }
 ___async_unwind = 0; //@line 32184
 HEAP32[$ReallocAsyncCtx7 >> 2] = 178; //@line 32185
 sp = STACKTOP; //@line 32186
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_316($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12261
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 12264
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 12267
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 12268
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 12269
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 537; //@line 12272
  sp = STACKTOP; //@line 12273
  return;
 }
 ___async_unwind = 0; //@line 12276
 HEAP32[$ReallocAsyncCtx3 >> 2] = 537; //@line 12277
 sp = STACKTOP; //@line 12278
 return;
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16881
 if (HEAP8[$0 + 2088 >> 0] | 0) {
  $$0 = -1e3; //@line 16886
  return $$0 | 0; //@line 16887
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16890
 $6 = __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0 + 752 | 0, $1) | 0; //@line 16891
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 482; //@line 16894
  sp = STACKTOP; //@line 16895
  return 0; //@line 16896
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16898
 $$0 = $6; //@line 16899
 return $$0 | 0; //@line 16900
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 49
 HEAP32[$0 + 788 >> 2] = $1; //@line 51
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 54
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 55
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 56
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 49; //@line 59
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 61
  sp = STACKTOP; //@line 62
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 65
  HEAP8[$0 + 689 >> 0] = 0; //@line 67
  HEAP8[$0 + 688 >> 0] = 0; //@line 69
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_146($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 29574
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29578
 $7 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 76 >> 2] | 0; //@line 29581
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(4) | 0; //@line 29582
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 29583
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 201; //@line 29586
  sp = STACKTOP; //@line 29587
  return;
 }
 ___async_unwind = 0; //@line 29590
 HEAP32[$ReallocAsyncCtx18 >> 2] = 201; //@line 29591
 sp = STACKTOP; //@line 29592
 return;
}
function __ZN7LoRaMac24continue_joining_processEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15397
 if ((HEAPU8[$0 + 1701 >> 0] | 0) >= (HEAPU8[$0 + 1700 >> 0] | 0)) {
  $$0 = 0; //@line 15404
  return $$0 | 0; //@line 15405
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15407
 $6 = __ZN7LoRaMac21handle_retransmissionEv($0) | 0; //@line 15408
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 444; //@line 15411
  sp = STACKTOP; //@line 15412
  return 0; //@line 15413
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15415
 $$0 = ($6 | 0) == 0; //@line 15417
 return $$0 | 0; //@line 15418
}
function __ZN7LoRaMac10disconnectEv__async_cb_71($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23680
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23682
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23684
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 23686
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1816 | 0); //@line 23687
 if (!___async) {
  ___async_unwind = 0; //@line 23690
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 478; //@line 23692
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 23694
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 23696
 sp = STACKTOP; //@line 23697
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_70($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23657
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23659
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23661
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 23663
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1836 | 0); //@line 23664
 if (!___async) {
  ___async_unwind = 0; //@line 23667
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 479; //@line 23669
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 23671
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 23673
 sp = STACKTOP; //@line 23674
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_241($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4289
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4293
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 4295
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 4296
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 4297
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 288; //@line 4300
  sp = STACKTOP; //@line 4301
  return;
 }
 ___async_unwind = 0; //@line 4304
 HEAP32[$ReallocAsyncCtx >> 2] = 288; //@line 4305
 sp = STACKTOP; //@line 4306
 return;
}
function _twobyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink$in = 0, $$sink17$sink = 0, $11 = 0, $12 = 0, $8 = 0;
 $8 = (HEAPU8[$1 >> 0] | 0) << 8 | (HEAPU8[$1 + 1 >> 0] | 0); //@line 15333
 $$sink$in = HEAPU8[$0 >> 0] | 0; //@line 15336
 $$sink17$sink = $0; //@line 15336
 while (1) {
  $11 = $$sink17$sink + 1 | 0; //@line 15338
  $12 = HEAP8[$11 >> 0] | 0; //@line 15339
  if (!($12 << 24 >> 24)) {
   break;
  }
  $$sink$in = $$sink$in << 8 & 65280 | $12 & 255; //@line 15347
  if (($$sink$in | 0) == ($8 | 0)) {
   break;
  } else {
   $$sink17$sink = $11; //@line 15352
  }
 }
 return ($12 << 24 >> 24 ? $$sink17$sink : 0) | 0; //@line 15357
}
function __ZN7LoRaMac21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16941
 if (HEAP8[$0 + 2088 >> 0] | 0) {
  $$0 = -1e3; //@line 16946
  return $$0 | 0; //@line 16947
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16950
 $6 = __ZN18LoRaMacChannelPlan21remove_single_channelEh($0 + 752 | 0, $1) | 0; //@line 16951
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 484; //@line 16954
  sp = STACKTOP; //@line 16955
  return 0; //@line 16956
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16958
 $$0 = $6; //@line 16959
 return $$0 | 0; //@line 16960
}
function _mbedtls_cipher_setup__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3161
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3163
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3165
 HEAP32[$2 + 60 >> 2] = $AsyncRetVal; //@line 3167
 if (!$AsyncRetVal) {
  $$0 = -24960; //@line 3170
 } else {
  HEAP32[$2 >> 2] = $4; //@line 3172
  if ((HEAP32[$4 + 4 >> 2] | 0) == 2) {
   HEAP32[$2 + 12 >> 2] = 5; //@line 3178
   HEAP32[$2 + 16 >> 2] = 17; //@line 3180
   $$0 = 0; //@line 3181
  } else {
   $$0 = 0; //@line 3183
  }
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 3187
 return;
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 13902
 } else {
  $$06 = $2; //@line 13904
  $11 = $1; //@line 13904
  $7 = $0; //@line 13904
  while (1) {
   $10 = $$06 + -1 | 0; //@line 13909
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 13910
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 13911
   $11 = tempRet0; //@line 13912
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 13917
    break;
   } else {
    $$06 = $10; //@line 13920
   }
  }
 }
 return $$0$lcssa | 0; //@line 13924
}
function __ZN12LoRaWANStack22set_link_check_requestEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP; //@line 11436
 STACKTOP = STACKTOP + 16 | 0; //@line 11437
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11437
 HEAP8[$0 + 2877 >> 0] = 1; //@line 11440
 if (!(HEAP32[$0 + 2512 >> 2] | 0)) {
  _mbed_tracef(2, 12506, 12986, sp); //@line 11445
  $$0 = -1003; //@line 11446
  STACKTOP = sp; //@line 11447
  return $$0 | 0; //@line 11447
 } else {
  __ZN7LoRaMac24setup_link_check_requestEv($0); //@line 11449
  $$0 = 0; //@line 11450
  STACKTOP = sp; //@line 11451
  return $$0 | 0; //@line 11451
 }
 return 0; //@line 11453
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_384($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29098
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29101
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 29104
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 29105
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 29106
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 546; //@line 29109
  sp = STACKTOP; //@line 29110
  return;
 }
 ___async_unwind = 0; //@line 29113
 HEAP32[$ReallocAsyncCtx3 >> 2] = 546; //@line 29114
 sp = STACKTOP; //@line 29115
 return;
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_392($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29720
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29723
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 29726
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 29727
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 29728
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 543; //@line 29731
  sp = STACKTOP; //@line 29732
  return;
 }
 ___async_unwind = 0; //@line 29735
 HEAP32[$ReallocAsyncCtx3 >> 2] = 543; //@line 29736
 sp = STACKTOP; //@line 29737
 return;
}
function __ZN12LoRaWANStack16set_device_classERK14device_class_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11662
 if ((HEAP32[$1 >> 2] | 0) == 1) {
  $$0 = -1013; //@line 11666
  return $$0 | 0; //@line 11667
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11669
 __ZN7LoRaMac16set_device_classERK14device_class_t($0, $1); //@line 11670
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 365; //@line 11673
  sp = STACKTOP; //@line 11674
  return 0; //@line 11675
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11677
 $$0 = 0; //@line 11678
 return $$0 | 0; //@line 11679
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_408($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30704
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30707
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 30710
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 30711
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 30712
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 540; //@line 30715
  sp = STACKTOP; //@line 30716
  return;
 }
 ___async_unwind = 0; //@line 30719
 HEAP32[$ReallocAsyncCtx3 >> 2] = 540; //@line 30720
 sp = STACKTOP; //@line 30721
 return;
}
function __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP; //@line 11212
 STACKTOP = STACKTOP + 16 | 0; //@line 11213
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11213
 if (!(HEAP32[$0 + 2480 >> 2] | 0)) {
  _mbed_tracef(2, 12506, 12856, sp); //@line 11219
  $$0 = -1012; //@line 11220
  STACKTOP = sp; //@line 11221
  return $$0 | 0; //@line 11221
 } else {
  $$0 = __ZN7LoRaMac16get_channel_planER16lora_channelplan($0, $1) | 0; //@line 11224
  STACKTOP = sp; //@line 11225
  return $$0 | 0; //@line 11225
 }
 return 0; //@line 11227
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_112($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25960
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25963
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 25966
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 25967
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 25968
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 550; //@line 25971
  sp = STACKTOP; //@line 25972
  return;
 }
 ___async_unwind = 0; //@line 25975
 HEAP32[$ReallocAsyncCtx4 >> 2] = 550; //@line 25976
 sp = STACKTOP; //@line 25977
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_111($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25937
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25940
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 25943
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 25944
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 25945
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 550; //@line 25948
  sp = STACKTOP; //@line 25949
  return;
 }
 ___async_unwind = 0; //@line 25952
 HEAP32[$ReallocAsyncCtx4 >> 2] = 550; //@line 25953
 sp = STACKTOP; //@line 25954
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 var $3 = 0, $5 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14308
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14311
 $5 = HEAP32[$3 + 4 >> 2] | 0; //@line 14313
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 14314
 _equeue_dealloc($5, $3); //@line 14315
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 678; //@line 14318
  sp = STACKTOP; //@line 14319
  return;
 }
 ___async_unwind = 0; //@line 14322
 HEAP32[$ReallocAsyncCtx2 >> 2] = 678; //@line 14323
 sp = STACKTOP; //@line 14324
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 763
 $1 = _emscripten_asm_const_i(4) | 0; //@line 764
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 767
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 768
 FUNCTION_TABLE_vi[$4 & 1023]($0); //@line 769
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 59; //@line 772
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 774
  sp = STACKTOP; //@line 775
  return 0; //@line 776
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 778
  return $1 | 0; //@line 779
 }
 return 0; //@line 781
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_64($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23466
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23469
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 23472
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 23473
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 23474
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 556; //@line 23477
  sp = STACKTOP; //@line 23478
  return;
 }
 ___async_unwind = 0; //@line 23481
 HEAP32[$ReallocAsyncCtx3 >> 2] = 556; //@line 23482
 sp = STACKTOP; //@line 23483
 return;
}
function __ZN7LoRaPHY16get_alternate_DREh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $12 = 0, $3 = 0, $6 = 0, $8 = 0;
 $3 = HEAP8[$0 + 31 >> 0] | 0; //@line 21328
 $6 = HEAP8[$0 + 26 >> 0] | 0; //@line 21331
 $8 = ($3 & 255) + 1 | 0; //@line 21333
 $12 = (($1 & 255) >>> 0) % (($8 - ($6 & 255) & 255) >>> 0) | 0; //@line 21337
 switch (($12 & 255) << 24 >> 24) {
 case 1:
  {
   $$0 = $3; //@line 21341
   return $$0 | 0; //@line 21342
  }
 case 0:
  {
   $$0 = $6; //@line 21346
   return $$0 | 0; //@line 21347
  }
 default:
  {
   $$0 = $8 - $12 & 255; //@line 21353
   return $$0 | 0; //@line 21354
  }
 }
 return 0; //@line 21357
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_189($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 807
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 810
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 813
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 814
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 815
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 523; //@line 818
  sp = STACKTOP; //@line 819
  return;
 }
 ___async_unwind = 0; //@line 822
 HEAP32[$ReallocAsyncCtx9 >> 2] = 523; //@line 823
 sp = STACKTOP; //@line 824
 return;
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP; //@line 11269
 STACKTOP = STACKTOP + 16 | 0; //@line 11270
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11270
 if (!(HEAP32[$0 + 2480 >> 2] | 0)) {
  _mbed_tracef(2, 12506, 12856, sp); //@line 11276
  $$0 = -1012; //@line 11277
  STACKTOP = sp; //@line 11278
  return $$0 | 0; //@line 11278
 } else {
  __ZN7LoRaMac24enable_adaptive_datarateEb($0, $1); //@line 11280
  $$0 = 0; //@line 11281
  STACKTOP = sp; //@line 11282
  return $$0 | 0; //@line 11282
 }
 return 0; //@line 11284
}
function __ZN16SX1276_LoRaRadio5sleepEv($0) {
 $0 = $0 | 0;
 var $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 85
 STACKTOP = STACKTOP + 16 | 0; //@line 86
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 86
 $vararg_buffer1 = sp + 8 | 0; //@line 87
 _mbed_tracef(16, 11020, 11780, sp); //@line 89
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 91
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 93
 HEAP32[$vararg_buffer1 >> 2] = 0; //@line 94
 _mbed_tracef(16, 11020, 11077, $vararg_buffer1); //@line 95
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 96
 STACKTOP = sp; //@line 97
 return;
}
function __ZN7LoRaMac19remove_channel_planEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16905
 if (HEAP8[$0 + 2088 >> 0] | 0) {
  $$0 = -1e3; //@line 16910
  return $$0 | 0; //@line 16911
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16914
 $5 = __ZN18LoRaMacChannelPlan11remove_planEv($0 + 752 | 0) | 0; //@line 16915
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 483; //@line 16918
  sp = STACKTOP; //@line 16919
  return 0; //@line 16920
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16922
 $$0 = $5; //@line 16923
 return $$0 | 0; //@line 16924
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18059
 do {
  if (!$0) {
   $3 = 0; //@line 18063
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18065
   $2 = ___dynamic_cast($0, 400, 456, 0) | 0; //@line 18066
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 726; //@line 18069
    sp = STACKTOP; //@line 18070
    return 0; //@line 18071
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 18073
    $3 = ($2 | 0) != 0 & 1; //@line 18076
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 18081
}
function __ZN7LoRaPHY24restore_default_channelsEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $5 = 0, $7 = 0, $8 = 0, $indvars$iv = 0;
 $2 = HEAP8[$0 + 113 >> 0] | 0; //@line 19830
 if (!($2 << 24 >> 24)) {
  return;
 }
 $5 = HEAP32[$0 + 120 >> 2] | 0; //@line 19836
 $7 = HEAP32[$0 + 116 >> 2] | 0; //@line 19838
 $8 = $2 & 255; //@line 19839
 $indvars$iv = 0; //@line 19840
 do {
  $11 = $7 + ($indvars$iv << 1) | 0; //@line 19844
  HEAP16[$11 >> 1] = HEAP16[$11 >> 1] | HEAP16[$5 + ($indvars$iv << 1) >> 1]; //@line 19847
  $indvars$iv = $indvars$iv + 1 | 0; //@line 19848
 } while ($indvars$iv >>> 0 < $8 >>> 0);
 return;
}
function _invoke_ticker__async_cb_373($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 27973
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 27979
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 27980
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 27981
 FUNCTION_TABLE_vi[$5 & 1023]($6); //@line 27982
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 644; //@line 27985
  sp = STACKTOP; //@line 27986
  return;
 }
 ___async_unwind = 0; //@line 27989
 HEAP32[$ReallocAsyncCtx >> 2] = 644; //@line 27990
 sp = STACKTOP; //@line 27991
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP; //@line 11248
 STACKTOP = STACKTOP + 16 | 0; //@line 11249
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11249
 if (!(HEAP32[$0 + 2480 >> 2] | 0)) {
  _mbed_tracef(2, 12506, 12856, sp); //@line 11255
  $$0 = -1012; //@line 11256
  STACKTOP = sp; //@line 11257
  return $$0 | 0; //@line 11257
 } else {
  $$0 = __ZN7LoRaMac21set_channel_data_rateEh($0, $1) | 0; //@line 11260
  STACKTOP = sp; //@line 11261
  return $$0 | 0; //@line 11261
 }
 return 0; //@line 11263
}
function __ZN16LoRaWANInterface4sendEhPKhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5642
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5645
 $7 = __ZN12LoRaWANStack9handle_txEhPKhthbb($0 + 4 | 0, $1, $2, $3, $4 & 255, 0, 0) | 0; //@line 5646
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 160; //@line 5649
  sp = STACKTOP; //@line 5650
  return 0; //@line 5651
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5653
  return $7 | 0; //@line 5654
 }
 return 0; //@line 5656
}
function __ZN16LoRaWANInterface7receiveEPhtRhRi($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5692
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5694
 $6 = __ZN12LoRaWANStack9handle_rxEPhtRhRib($0 + 4 | 0, $1, $2, $3, $4, 0) | 0; //@line 5695
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 162; //@line 5698
  sp = STACKTOP; //@line 5699
  return 0; //@line 5700
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5702
  return $6 | 0; //@line 5703
 }
 return 0; //@line 5705
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 13546
 } else {
  $$04 = 0; //@line 13548
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 13551
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 13555
   $12 = $7 + 1 | 0; //@line 13556
   HEAP32[$0 >> 2] = $12; //@line 13557
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 13563
    break;
   } else {
    $$04 = $11; //@line 13566
   }
  }
 }
 return $$0$lcssa | 0; //@line 13570
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8647
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 8649
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 8655
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8656
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 8657
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 275; //@line 8660
  sp = STACKTOP; //@line 8661
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8664
 return;
}
function __ZN7LoRaMac15send_ongoing_txEv__async_cb_418($0) {
 $0 = $0 | 0;
 var $$0 = 0, $13 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31669
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31671
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31675
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 31678
  $13 = ___async_retval; //@line 31679
  HEAP32[$13 >> 2] = $$0; //@line 31680
  return;
 }
 HEAP32[$6 + 2036 >> 2] = HEAP32[$4 >> 2]; //@line 31685
 $$0 = 0; //@line 31686
 $13 = ___async_retval; //@line 31687
 HEAP32[$13 >> 2] = $$0; //@line 31688
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9491
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 9493
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 9499
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9500
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 9501
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 305; //@line 9504
  sp = STACKTOP; //@line 9505
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9508
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10186
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 10188
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 10194
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10195
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 10196
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 331; //@line 10199
  sp = STACKTOP; //@line 10200
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10203
 return;
}
function __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5711
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5713
 $3 = __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t($0 + 4 | 0, $1) | 0; //@line 5714
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 163; //@line 5717
  sp = STACKTOP; //@line 5718
  return 0; //@line 5719
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5721
  return $3 | 0; //@line 5722
 }
 return 0; //@line 5724
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 32492
 $y_sroa_0_0_extract_trunc = $b$0; //@line 32493
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 32494
 $1$1 = tempRet0; //@line 32495
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 32497
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7398
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 7400
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 7406
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7407
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 7408
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 229; //@line 7411
  sp = STACKTOP; //@line 7412
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7415
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_400($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30234
 if (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 30242
 _mbed_assert_internal(13674, 13692, 57); //@line 30243
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 565; //@line 30246
  sp = STACKTOP; //@line 30247
  return;
 }
 ___async_unwind = 0; //@line 30250
 HEAP32[$ReallocAsyncCtx6 >> 2] = 565; //@line 30251
 sp = STACKTOP; //@line 30252
 return;
}
function __ZN16LoRaWANInterface10initializeEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5450
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5452
 $3 = __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE($0 + 4 | 0, $1) | 0; //@line 5453
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 153; //@line 5456
  sp = STACKTOP; //@line 5457
  return 0; //@line 5458
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5460
  return $3 | 0; //@line 5461
 }
 return 0; //@line 5463
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6057
 HEAP32[$0 >> 2] = 724; //@line 6058
 $2 = $0 + 4 | 0; //@line 6059
 __ZN12LoRaWANStackC2Ev($2); //@line 6060
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6061
 __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio($2, $1); //@line 6062
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 179; //@line 6065
  sp = STACKTOP; //@line 6066
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6069
  return;
 }
}
function __ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24967
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 24974
 _mbed_assert_internal(13121, 12408, 460); //@line 24975
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 213; //@line 24978
  sp = STACKTOP; //@line 24979
  return;
 }
 ___async_unwind = 0; //@line 24982
 HEAP32[$ReallocAsyncCtx2 >> 2] = 213; //@line 24983
 sp = STACKTOP; //@line 24984
 return;
}
function __ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5574
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5576
 $3 = __ZN12LoRaWANStack12add_channelsERK16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 5577
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 157; //@line 5580
  sp = STACKTOP; //@line 5581
  return 0; //@line 5582
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5584
  return $3 | 0; //@line 5585
 }
 return 0; //@line 5587
}
function _mbedtls_cipher_info_from_type($0) {
 $0 = $0 | 0;
 var $$05 = 0, $$06 = 0, $1 = 0, $9 = 0;
 $1 = HEAP32[2370] | 0; //@line 2161
 L1 : do {
  if (!$1) {
   $$05 = 0; //@line 2165
  } else {
   $$06 = 9476; //@line 2167
   $9 = $1; //@line 2167
   while (1) {
    if ((HEAP32[$$06 >> 2] | 0) == ($0 | 0)) {
     $$05 = $9; //@line 2172
     break L1;
    }
    $9 = HEAP32[$$06 + 12 >> 2] | 0; //@line 2177
    if (!$9) {
     $$05 = 0; //@line 2180
     break;
    } else {
     $$06 = $$06 + 8 | 0; //@line 2183
    }
   }
  }
 } while (0);
 return $$05 | 0; //@line 2188
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24900
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 24907
 _mbed_assert_internal(13237, 13130, 950); //@line 24908
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 383; //@line 24911
  sp = STACKTOP; //@line 24912
  return;
 }
 ___async_unwind = 0; //@line 24915
 HEAP32[$ReallocAsyncCtx3 >> 2] = 383; //@line 24916
 sp = STACKTOP; //@line 24917
 return;
}
function __ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 796
 STACKTOP = STACKTOP + 16 | 0; //@line 797
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 797
 $vararg_buffer = sp; //@line 798
 HEAP8[$0 + 689 >> 0] = $1; //@line 801
 HEAP32[$vararg_buffer >> 2] = $1; //@line 803
 HEAP32[$vararg_buffer + 4 >> 2] = $2 & 255; //@line 805
 _mbed_tracef(16, 11020, 11230, $vararg_buffer); //@line 806
 STACKTOP = sp; //@line 807
 return;
}
function __ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10806
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 10813
 _mbed_assert_internal(13237, 13130, 844); //@line 10814
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 446; //@line 10817
  sp = STACKTOP; //@line 10818
  return;
 }
 ___async_unwind = 0; //@line 10821
 HEAP32[$ReallocAsyncCtx2 >> 2] = 446; //@line 10822
 sp = STACKTOP; //@line 10823
 return;
}
function __ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26427
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 26434
 _mbed_assert_internal(13121, 12408, 428); //@line 26435
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 204; //@line 26438
  sp = STACKTOP; //@line 26439
  return;
 }
 ___async_unwind = 0; //@line 26442
 HEAP32[$ReallocAsyncCtx2 >> 2] = 204; //@line 26443
 sp = STACKTOP; //@line 26444
 return;
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18086
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 18095
 _mbed_assert_internal(13121, 12408, 468); //@line 18096
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 216; //@line 18099
  sp = STACKTOP; //@line 18100
  return;
 }
 ___async_unwind = 0; //@line 18103
 HEAP32[$ReallocAsyncCtx3 >> 2] = 216; //@line 18104
 sp = STACKTOP; //@line 18105
 return;
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 32477
 $2 = $b & 65535; //@line 32478
 $3 = Math_imul($2, $1) | 0; //@line 32479
 $6 = $a >>> 16; //@line 32480
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 32481
 $11 = $b >>> 16; //@line 32482
 $12 = Math_imul($11, $1) | 0; //@line 32483
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 32484
}
function _mbedtls_cipher_update__async_cb_192($0) {
 $0 = $0 | 0;
 var $$1 = 0, $2 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 964
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 966
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 968
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 971
  $9 = ___async_retval; //@line 972
  HEAP32[$9 >> 2] = $$1; //@line 973
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 978
 $$1 = 0; //@line 979
 $9 = ___async_retval; //@line 980
 HEAP32[$9 >> 2] = $$1; //@line 981
 return;
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8875
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 8877
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 8883
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8884
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 8885
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 286; //@line 8888
  sp = STACKTOP; //@line 8889
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8892
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24816
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 24825
 _mbed_assert_internal(13121, 12408, 453); //@line 24826
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 210; //@line 24829
  sp = STACKTOP; //@line 24830
  return;
 }
 ___async_unwind = 0; //@line 24833
 HEAP32[$ReallocAsyncCtx3 >> 2] = 210; //@line 24834
 sp = STACKTOP; //@line 24835
 return;
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26547
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 26556
 _mbed_assert_internal(13121, 12408, 445); //@line 26557
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 207; //@line 26560
  sp = STACKTOP; //@line 26561
  return;
 }
 ___async_unwind = 0; //@line 26564
 HEAP32[$ReallocAsyncCtx3 >> 2] = 207; //@line 26565
 sp = STACKTOP; //@line 26566
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_118($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26292
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 26299
 _mbed_assert_internal(13121, 12408, 751); //@line 26300
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 311; //@line 26303
  sp = STACKTOP; //@line 26304
  return;
 }
 ___async_unwind = 0; //@line 26307
 HEAP32[$ReallocAsyncCtx6 >> 2] = 311; //@line 26308
 sp = STACKTOP; //@line 26309
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_81($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24510
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24512
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24514
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 24515
 __ZN4mbed10TimerEventD2Ev($2); //@line 24516
 if (!___async) {
  ___async_unwind = 0; //@line 24519
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 76; //@line 24521
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 24523
 sp = STACKTOP; //@line 24524
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_80($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24490
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24492
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24494
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 24495
 __ZN4mbed10TimerEventD2Ev($4); //@line 24496
 if (!___async) {
  ___async_unwind = 0; //@line 24499
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 74; //@line 24501
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 24503
 sp = STACKTOP; //@line 24504
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_79($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 24470
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24472
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24474
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 24475
 __ZN4mbed10TimerEventD2Ev($2); //@line 24476
 if (!___async) {
  ___async_unwind = 0; //@line 24479
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 72; //@line 24481
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $4; //@line 24483
 sp = STACKTOP; //@line 24484
 return;
}
function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) {
  $$0 = 0; //@line 11137
 } else {
  $3 = Math_imul($1, $0) | 0; //@line 11139
  if (($1 | $0) >>> 0 > 65535) {
   $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; //@line 11146
  } else {
   $$0 = $3; //@line 11148
  }
 }
 $8 = _malloc($$0) | 0; //@line 11151
 if (!$8) {
  return $8 | 0; //@line 11154
 }
 if (!(HEAP32[$8 + -4 >> 2] & 3)) {
  return $8 | 0; //@line 11161
 }
 _memset($8 | 0, 0, $$0 | 0) | 0; //@line 11163
 return $8 | 0; //@line 11164
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 24450
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24452
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24454
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 24455
 __ZN4mbed10TimerEventD2Ev($4); //@line 24456
 if (!___async) {
  ___async_unwind = 0; //@line 24459
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 70; //@line 24461
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 24463
 sp = STACKTOP; //@line 24464
 return;
}
function __ZN16LoRaWANInterface7connectERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5487
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5489
 $3 = __ZN12LoRaWANStack7connectERK15lorawan_connect($0 + 4 | 0, $1) | 0; //@line 5490
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 155; //@line 5493
  sp = STACKTOP; //@line 5494
  return 0; //@line 5495
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5497
  return $3 | 0; //@line 5498
 }
 return 0; //@line 5500
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_87($0) {
 $0 = $0 | 0;
 var $3 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 24720
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 52 | 0; //@line 24723
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 24724
 __ZN4mbed11InterruptInD2Ev($3); //@line 24725
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 82; //@line 24728
  sp = STACKTOP; //@line 24729
  return;
 }
 ___async_unwind = 0; //@line 24732
 HEAP32[$ReallocAsyncCtx9 >> 2] = 82; //@line 24733
 sp = STACKTOP; //@line 24734
 return;
}
function _ticker_set_handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5230
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5231
 _initialize($0); //@line 5232
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 596; //@line 5235
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5237
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 5239
  sp = STACKTOP; //@line 5240
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5243
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = $1; //@line 5246
  return;
 }
}
function _mbed_die__async_cb_216($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 2536
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2538
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 2540
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 2541
 _wait_ms(150); //@line 2542
 if (!___async) {
  ___async_unwind = 0; //@line 2545
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 616; //@line 2547
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 2549
 sp = STACKTOP; //@line 2550
 return;
}
function ___fflush_unlocked__async_cb_389($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29419
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29421
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29423
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29425
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 29427
 HEAP32[$4 >> 2] = 0; //@line 29428
 HEAP32[$6 >> 2] = 0; //@line 29429
 HEAP32[$8 >> 2] = 0; //@line 29430
 HEAP32[$10 >> 2] = 0; //@line 29431
 HEAP32[___async_retval >> 2] = 0; //@line 29433
 return;
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 2166
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2168
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 2170
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 2171
 _wait_ms(150); //@line 2172
 if (!___async) {
  ___async_unwind = 0; //@line 2175
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 615; //@line 2177
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 2179
 sp = STACKTOP; //@line 2180
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_297($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11100
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11102
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11106
 HEAP8[$2 + 688 >> 0] = 2; //@line 11110
 HEAP32[$4 >> 2] = 3; //@line 11111
 _mbed_tracef(16, 11020, 11077, $4); //@line 11112
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 11113
 HEAP32[$8 >> 2] = 3; //@line 11114
 _mbed_tracef(16, 11020, 11106, $8); //@line 11115
 return;
}
function __ZN16LoRaWANInterface14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5620
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5622
 $3 = __ZN12LoRaWANStack16remove_a_channelEh($0 + 4 | 0, $1) | 0; //@line 5623
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 159; //@line 5626
  sp = STACKTOP; //@line 5627
  return 0; //@line 5628
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5630
  return $3 | 0; //@line 5631
 }
 return 0; //@line 5633
}
function __ZN4mbed6TickerD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31727
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31729
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 31730
 __ZN4mbed10TimerEventD2Ev($2); //@line 31731
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 639; //@line 31734
  sp = STACKTOP; //@line 31735
  return;
 }
 ___async_unwind = 0; //@line 31738
 HEAP32[$ReallocAsyncCtx2 >> 2] = 639; //@line 31739
 sp = STACKTOP; //@line 31740
 return;
}
function __ZN12LoRaWANStackD2Ev__async_cb_151($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 29770
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29772
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 29773
 __ZN7LoRaMacD2Ev($2); //@line 29774
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 171; //@line 29777
  sp = STACKTOP; //@line 29778
  return;
 }
 ___async_unwind = 0; //@line 29781
 HEAP32[$ReallocAsyncCtx4 >> 2] = 171; //@line 29782
 sp = STACKTOP; //@line 29783
 return;
}
function __ZN4mbed6Ticker7handlerEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7009
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 7011
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 >> 2] | 0; //@line 7017
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7018
 FUNCTION_TABLE_vi[$5 & 1023]($0 + 40 | 0); //@line 7019
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 642; //@line 7022
  sp = STACKTOP; //@line 7023
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7026
 return;
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_223($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2957
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2959
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 2004 >> 2] = 1; //@line 2965
  return;
 }
 if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($2) | 0)) {
  return;
 }
 HEAP32[$4 + 2060 >> 2] = 4; //@line 2973
 HEAP8[$4 + 2064 >> 0] = 1; //@line 2975
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($2); //@line 2976
 return;
}
function _mbed_vtracef__async_cb_32($0) {
 $0 = $0 | 0;
 var $1 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20999
 $1 = HEAP32[175] | 0; //@line 21000
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 21001
 FUNCTION_TABLE_vi[$1 & 1023](12260); //@line 21002
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 144; //@line 21005
  sp = STACKTOP; //@line 21006
  return;
 }
 ___async_unwind = 0; //@line 21009
 HEAP32[$ReallocAsyncCtx3 >> 2] = 144; //@line 21010
 sp = STACKTOP; //@line 21011
 return;
}
function __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 | 0) != 0 & $3 << 24 >> 24 != 0)) {
  return;
 }
 $wide$trip$count = $3 & 255; //@line 22529
 $indvars$iv = 0; //@line 22530
 do {
  HEAP16[$1 + ($indvars$iv << 1) >> 1] = HEAP16[$2 + ($indvars$iv << 1) >> 1] | 0; //@line 22535
  $indvars$iv = $indvars$iv + 1 | 0; //@line 22536
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5650
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5652
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 5653
 __ZN4mbed10TimerEventD2Ev($2); //@line 5654
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 113; //@line 5657
  sp = STACKTOP; //@line 5658
  return;
 }
 ___async_unwind = 0; //@line 5661
 HEAP32[$ReallocAsyncCtx2 >> 2] = 113; //@line 5662
 sp = STACKTOP; //@line 5663
 return;
}
function dynCall_viiiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 a15 = a15 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0, a15 | 0); //@line 117
}
function __ZN16LoRaWANInterfaceD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5769
 HEAP32[$0 >> 2] = 724; //@line 5770
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5772
 __ZN12LoRaWANStackD2Ev($0 + 4 | 0); //@line 5773
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 166; //@line 5776
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5778
  sp = STACKTOP; //@line 5779
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5782
  __ZdlPv($0); //@line 5783
  return;
 }
}
function __ZN16LoRaWANInterface19remove_channel_planEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5601
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5603
 $2 = __ZN12LoRaWANStack17drop_channel_listEv($0 + 4 | 0) | 0; //@line 5604
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 158; //@line 5607
  sp = STACKTOP; //@line 5608
  return 0; //@line 5609
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5611
  return $2 | 0; //@line 5612
 }
 return 0; //@line 5614
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_91($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 24797
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24799
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 24801
 __ZN4mbed11InterruptInD2Ev($2 + 340 | 0); //@line 24802
 if (!___async) {
  ___async_unwind = 0; //@line 24805
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 78; //@line 24807
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 24809
 sp = STACKTOP; //@line 24810
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_90($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 24778
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24780
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 24782
 __ZN4mbed11InterruptInD2Ev($2 + 268 | 0); //@line 24783
 if (!___async) {
  ___async_unwind = 0; //@line 24786
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 79; //@line 24788
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 24790
 sp = STACKTOP; //@line 24791
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_89($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 24759
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24761
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 24763
 __ZN4mbed11InterruptInD2Ev($2 + 196 | 0); //@line 24764
 if (!___async) {
  ___async_unwind = 0; //@line 24767
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 80; //@line 24769
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 24771
 sp = STACKTOP; //@line 24772
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_88($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 24740
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24742
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 24744
 __ZN4mbed11InterruptInD2Ev($2 + 124 | 0); //@line 24745
 if (!___async) {
  ___async_unwind = 0; //@line 24748
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 81; //@line 24750
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 24752
 sp = STACKTOP; //@line 24753
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_82($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 24530
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24532
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 24534
 __ZN4mbed11InterruptInD2Ev($2 + 412 | 0); //@line 24535
 if (!___async) {
  ___async_unwind = 0; //@line 24538
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 77; //@line 24540
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 24542
 sp = STACKTOP; //@line 24543
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_68($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23612
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23614
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 23616
 __ZN7LoRaPHY18put_radio_to_sleepEv($2 + 4 | 0); //@line 23617
 if (!___async) {
  ___async_unwind = 0; //@line 23620
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 481; //@line 23622
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 23624
 sp = STACKTOP; //@line 23625
 return;
}
function __GLOBAL__sub_I_main_cpp__async_cb($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 __ZN5Sht31C2E7PinNameS0_(24460, 10, 11); //@line 24218
 __ZN4mbed11InterruptInC2E7PinName(20408, 1337); //@line 24219
 __ZN6events10EventQueueC2EjPh(20480, 1664, 0); //@line 24220
 __ZN16LoRaWANInterfaceC2ER9LoRaRadio(20684, 19072); //@line 24221
 dest = 23828; //@line 24222
 stop = dest + 48 | 0; //@line 24222
 do {
  HEAP32[dest >> 2] = 0; //@line 24222
  dest = dest + 4 | 0; //@line 24222
 } while ((dest | 0) < (stop | 0));
 return;
}
function _gcm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3124
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3125
 $3 = _mbedtls_gcm_setkey($0, 2, $1, $2) | 0; //@line 3126
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 582; //@line 3129
  sp = STACKTOP; //@line 3130
  return 0; //@line 3131
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3133
  return $3 | 0; //@line 3134
 }
 return 0; //@line 3136
}
function _ccm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3076
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3077
 $3 = _mbedtls_ccm_setkey($0, 2, $1, $2) | 0; //@line 3078
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 580; //@line 3081
  sp = STACKTOP; //@line 3082
  return 0; //@line 3083
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3085
  return $3 | 0; //@line 3086
 }
 return 0; //@line 3088
}
function __ZN4mbed11InterruptInC2E7PinName($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 604; //@line 2504
 $2 = $0 + 4 | 0; //@line 2505
 $3 = $0 + 28 | 0; //@line 2506
 $4 = $0; //@line 2507
 dest = $2; //@line 2508
 stop = dest + 68 | 0; //@line 2508
 do {
  HEAP32[dest >> 2] = 0; //@line 2508
  dest = dest + 4 | 0; //@line 2508
 } while ((dest | 0) < (stop | 0));
 _gpio_irq_init($3, $1, 14, $4) | 0; //@line 2509
 _gpio_init_in($2, $1); //@line 2510
 return;
}
function _vsprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16029
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16030
 $3 = _vsnprintf($0, 2147483647, $1, $2) | 0; //@line 16031
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 693; //@line 16034
  sp = STACKTOP; //@line 16035
  return 0; //@line 16036
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16038
  return $3 | 0; //@line 16039
 }
 return 0; //@line 16041
}
function _serial_putc__async_cb_299($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11303
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11305
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 11306
 _fflush($2) | 0; //@line 11307
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 637; //@line 11310
  sp = STACKTOP; //@line 11311
  return;
 }
 ___async_unwind = 0; //@line 11314
 HEAP32[$ReallocAsyncCtx >> 2] = 637; //@line 11315
 sp = STACKTOP; //@line 11316
 return;
}
function __ZN7LoRaMac24setup_link_check_requestEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 2068 | 0; //@line 16154
 HEAP32[$1 >> 2] = 0; //@line 16155
 HEAP32[$1 + 4 >> 2] = 0; //@line 16155
 HEAP32[$1 + 8 >> 2] = 0; //@line 16155
 HEAP32[$1 + 12 >> 2] = 0; //@line 16155
 HEAP32[$1 + 16 >> 2] = 0; //@line 16155
 HEAP32[$0 + 2076 >> 2] = 1; //@line 16157
 HEAP32[$0 + 2072 >> 2] = 1; //@line 16159
 HEAP8[$1 >> 0] = 1; //@line 16160
 __ZN14LoRaMacCommand18add_link_check_reqEv($0 + 476 | 0) | 0; //@line 16162
 return;
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7833
 $2 = HEAP32[$0 >> 2] | 0; //@line 7834
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7835
 FUNCTION_TABLE_vi[$2 & 1023]($1); //@line 7836
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 674; //@line 7839
  sp = STACKTOP; //@line 7840
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7843
  return;
 }
}
function __ZN12LoRaWANStackD2Ev__async_cb_149($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29745
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29747
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 29749
 __ZN12radio_eventsD2Ev($2 + 2368 | 0); //@line 29750
 if (!___async) {
  ___async_unwind = 0; //@line 29753
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 170; //@line 29755
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 29757
 sp = STACKTOP; //@line 29758
 return;
}
function __ZN14LoRaMacCommand18add_link_check_reqEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 2 | 0; //@line 18897
 $6 = HEAP8[$5 >> 0] | 0; //@line 18898
 $7 = $6 & 255; //@line 18899
 if ((128 - (HEAPU8[$0 + 3 >> 0] | 0) | 0) <= ($7 | 0)) {
  $$0 = -1010; //@line 18902
  return $$0 | 0; //@line 18903
 }
 HEAP8[$5 >> 0] = $6 + 1 << 24 >> 24; //@line 18907
 HEAP8[$0 + 4 + $7 >> 0] = 2; //@line 18908
 HEAP8[$0 >> 0] = 1; //@line 18909
 $$0 = 0; //@line 18910
 return $$0 | 0; //@line 18911
}
function _main__async_cb_7($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 18640
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18642
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 18643
 __ZN6events10EventQueue8dispatchEi(20480, -1); //@line 18644
 if (!___async) {
  ___async_unwind = 0; //@line 18647
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 662; //@line 18649
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 18651
 sp = STACKTOP; //@line 18652
 return;
}
function _putchar($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16106
 $1 = HEAP32[2599] | 0; //@line 16107
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16108
 $2 = _fputc($0, $1) | 0; //@line 16109
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 695; //@line 16112
  sp = STACKTOP; //@line 16113
  return 0; //@line 16114
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16116
  return $2 | 0; //@line 16117
 }
 return 0; //@line 16119
}
function __ZN16LoRaWANInterface10disconnectEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5505
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5507
 $2 = __ZN12LoRaWANStack8shutdownEv($0 + 4 | 0) | 0; //@line 5508
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 156; //@line 5511
  sp = STACKTOP; //@line 5512
  return 0; //@line 5513
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5515
  return $2 | 0; //@line 5516
 }
 return 0; //@line 5518
}
function __ZN4mbed10TimerEventD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3094
 HEAP32[$0 >> 2] = 640; //@line 3095
 $2 = HEAP32[$0 + 24 >> 2] | 0; //@line 3097
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3099
 _ticker_remove_event($2, $0 + 8 | 0); //@line 3100
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 123; //@line 3103
  sp = STACKTOP; //@line 3104
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3107
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30686
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30688
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 30689
 __ZN4mbed10TimerEventD2Ev($2); //@line 30690
 if (!___async) {
  ___async_unwind = 0; //@line 30693
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 115; //@line 30695
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 30697
 sp = STACKTOP; //@line 30698
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28568
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28570
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 28571
 __ZN4mbed10TimerEventD2Ev($2); //@line 28572
 if (!___async) {
  ___async_unwind = 0; //@line 28575
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 641; //@line 28577
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 28579
 sp = STACKTOP; //@line 28580
 return;
}
function __ZN16LoRaWANInterface7connectEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5468
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5470
 $2 = __ZN12LoRaWANStack7connectEv($0 + 4 | 0) | 0; //@line 5471
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 154; //@line 5474
  sp = STACKTOP; //@line 5475
  return 0; //@line 5476
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5478
  return $2 | 0; //@line 5479
 }
 return 0; //@line 5481
}
function dynCall_viiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0); //@line 110
}
function _emscripten_async_resume() {
 ___async = 0; //@line 32810
 ___async_unwind = 1; //@line 32811
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 32817
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 32821
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 32825
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 32827
 }
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_128($0) {
 $0 = $0 | 0;
 var $$013 = 0;
 switch (HEAP32[___async_retval >> 2] | 0) {
 case 0:
  {
   $$013 = 3; //@line 26751
   break;
  }
 case -1004:
  {
   $$013 = 2; //@line 26755
   break;
  }
 case -1005:
  {
   $$013 = 1; //@line 26759
   break;
  }
 case -1006:
  {
   $$013 = 0; //@line 26763
   break;
  }
 default:
  {
   $$013 = 0; //@line 26767
  }
 }
 HEAP8[___async_retval >> 0] = $$013; //@line 26771
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context00IPFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7970
 $1 = HEAP32[$0 >> 2] | 0; //@line 7971
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7972
 FUNCTION_TABLE_v[$1 & 15](); //@line 7973
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 679; //@line 7976
  sp = STACKTOP; //@line 7977
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7980
  return;
 }
}
function _rand() {
 var $0 = 0, $10 = 0, $14 = 0, $6 = 0, $8 = 0, $9 = 0;
 $0 = 20384; //@line 16059
 $6 = ___muldi3(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, 1284865837, 1481765933) | 0; //@line 16065
 $8 = _i64Add($6 | 0, tempRet0 | 0, 1, 0) | 0; //@line 16067
 $9 = tempRet0; //@line 16068
 $10 = 20384; //@line 16069
 HEAP32[$10 >> 2] = $8; //@line 16071
 HEAP32[$10 + 4 >> 2] = $9; //@line 16074
 $14 = _bitshift64Lshr($8 | 0, $9 | 0, 33) | 0; //@line 16075
 return $14 | 0; //@line 16077
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 11169
 STACKTOP = STACKTOP + 16 | 0; //@line 11170
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11170
 $vararg_buffer = sp; //@line 11171
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 11175
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 11177
 STACKTOP = sp; //@line 11178
 return $5 | 0; //@line 11178
}
function __ZN16SX1276_LoRaRadioD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1504
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1505
 __ZN16SX1276_LoRaRadioD2Ev($0); //@line 1506
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 83; //@line 1509
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1511
  sp = STACKTOP; //@line 1512
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1515
  __ZdlPv($0); //@line 1516
  return;
 }
}
function __ZN4mbed10TimerEvent3irqEj($0) {
 $0 = $0 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3143
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 3148
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3149
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 3150
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 126; //@line 3153
  sp = STACKTOP; //@line 3154
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3157
  return;
 }
}
function __ZN16SX1276_LoRaRadio11set_channelEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 751
 STACKTOP = STACKTOP + 16 | 0; //@line 752
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 752
 $vararg_buffer = sp; //@line 753
 HEAP32[$vararg_buffer >> 2] = $1; //@line 754
 _mbed_tracef(16, 11020, 11314, $vararg_buffer); //@line 755
 HEAP32[$0 + 692 >> 2] = $1; //@line 757
 STACKTOP = sp; //@line 758
 return;
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6781
 $2 = HEAP32[5098] | 0; //@line 6782
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6783
 FUNCTION_TABLE_vii[$2 & 15]($0, $1); //@line 6784
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 635; //@line 6787
  sp = STACKTOP; //@line 6788
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6791
  return;
 }
}
function __ZN4mbed5TimerC2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1035
 $6 = ___async_retval; //@line 1037
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 1042
 $12 = HEAP32[$0 + 4 >> 2] | 0; //@line 1043
 HEAP32[$12 >> 2] = HEAP32[$6 >> 2]; //@line 1045
 HEAP32[$12 + 4 >> 2] = $11; //@line 1048
 $16 = $4; //@line 1049
 HEAP32[$16 >> 2] = 0; //@line 1051
 HEAP32[$16 + 4 >> 2] = 0; //@line 1054
 return;
}
function __ZNK7LoRaPHY25verify_frequency_for_bandEjh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $4 = 0, $5 = 0;
 $4 = HEAP32[$0 + 72 >> 2] | 0; //@line 21891
 $5 = $2 & 255; //@line 21892
 if ((HEAP32[$4 + ($5 * 24 | 0) + 20 >> 2] | 0) >>> 0 >= $1 >>> 0) {
  if ((HEAP32[$4 + ($5 * 24 | 0) + 16 >> 2] | 0) >>> 0 <= $1 >>> 0) {
   $$0 = 1; //@line 21901
   return $$0 | 0; //@line 21902
  }
 }
 $$0 = 0; //@line 21905
 return $$0 | 0; //@line 21906
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 32752
 STACKTOP = STACKTOP + 16 | 0; //@line 32753
 $rem = __stackBase__ | 0; //@line 32754
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 32755
 STACKTOP = __stackBase__; //@line 32756
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 32757
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 32522
 if ((ret | 0) < 8) return ret | 0; //@line 32523
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 32524
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 32525
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 32526
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 32527
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 32528
}
function __ZN7LoRaPHY25accept_tx_param_setup_reqEhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $4 = 0, $6 = 0;
 $4 = HEAP8[$0 + 13 >> 0] | 0; //@line 21199
 if (!($4 << 24 >> 24)) {
  $14 = $4 << 24 >> 24 != 0; //@line 21202
  return $14 | 0; //@line 21203
 }
 $6 = $0 + 128 | 0; //@line 21205
 HEAP8[$6 >> 0] = $2 << 1 & 2 | $1 & 1 | HEAP8[$6 >> 0] & -4; //@line 21213
 $14 = $4 << 24 >> 24 != 0; //@line 21214
 return $14 | 0; //@line 21215
}
function _gcm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3151
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3152
 _mbedtls_gcm_free($0); //@line 3153
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 583; //@line 3156
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3158
  sp = STACKTOP; //@line 3159
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3162
  _free($0); //@line 3163
  return;
 }
}
function _ccm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3103
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3104
 _mbedtls_ccm_free($0); //@line 3105
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 581; //@line 3108
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3110
  sp = STACKTOP; //@line 3111
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3114
  _free($0); //@line 3115
  return;
 }
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 16404
 STACKTOP = STACKTOP + 16 | 0; //@line 16405
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16405
 if (!(_pthread_once(24452, 8) | 0)) {
  $3 = _pthread_getspecific(HEAP32[6114] | 0) | 0; //@line 16411
  STACKTOP = sp; //@line 16412
  return $3 | 0; //@line 16412
 } else {
  _abort_message(18701, sp); //@line 16414
 }
 return 0; //@line 16417
}
function __ZN16LoRaWANInterfaceD2Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5751
 HEAP32[$0 >> 2] = 724; //@line 5752
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5754
 __ZN12LoRaWANStackD2Ev($0 + 4 | 0); //@line 5755
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 165; //@line 5758
  sp = STACKTOP; //@line 5759
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5762
  return;
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 16572
 }
 return;
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1636
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1637
 __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0); //@line 1638
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 85; //@line 1641
  sp = STACKTOP; //@line 1642
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1645
  return;
 }
}
function __ZN7LoRaMac24continue_sending_processEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $7 = 0;
 if ((HEAPU8[$0 + 1699 >> 0] | 0) < (HEAPU8[$0 + 1698 >> 0] | 0)) {
  $$0 = 1; //@line 15430
  return $$0 | 0; //@line 15431
 }
 __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 476 | 0); //@line 15434
 $7 = $0 + 1768 | 0; //@line 15435
 HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1; //@line 15438
 $$0 = 0; //@line 15439
 return $$0 | 0; //@line 15440
}
function __ZL25default_terminate_handlerv__async_cb_388($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29331
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29333
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29335
 HEAP32[$2 >> 2] = 18562; //@line 29336
 HEAP32[$2 + 4 >> 2] = $4; //@line 29338
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 29340
 _abort_message(18426, $2); //@line 29341
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19662
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19664
 $6 = HEAP8[$2 + 1182 >> 0] | 0; //@line 19666
 HEAP8[$2 + 1183 >> 0] = $6; //@line 19668
 __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $6, (HEAP8[$2 + 2360 >> 0] | 0) != 0, $4); //@line 19673
 HEAP32[$2 + 1780 >> 2] = $4; //@line 19675
 return;
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 15988
 $6 = HEAP32[$5 >> 2] | 0; //@line 15989
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 15990
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 15992
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 15994
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 15997
 return $2 | 0; //@line 15998
}
function __ZN6events10EventQueueC2EjPh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 188 | 0; //@line 3167
 HEAP32[$3 >> 2] = 0; //@line 3168
 HEAP32[$3 + 4 >> 2] = 0; //@line 3168
 HEAP32[$3 + 8 >> 2] = 0; //@line 3168
 HEAP32[$3 + 12 >> 2] = 0; //@line 3168
 if (!$2) {
  _equeue_create($0, $1) | 0; //@line 3171
  return;
 } else {
  _equeue_create_inplace($0, $1, $2) | 0; //@line 3174
  return;
 }
}
function __ZN12LoRaWANStackC2Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaMacC2Ev($0); //@line 6077
 _memset($0 + 2368 | 0, 0, 500) | 0; //@line 6080
 HEAP8[$0 + 2868 >> 0] = 1; //@line 6081
 HEAP32[$0 + 2872 >> 2] = 0; //@line 6083
 HEAP8[$0 + 2877 >> 0] = 0; //@line 6086
 HEAP8[$0 + 2878 >> 0] = 0; //@line 6088
 HEAP8[$0 + 2879 >> 0] = 1; //@line 6090
 HEAP32[$0 + 3136 >> 2] = 0; //@line 6092
 HEAP8[$0 + 2876 >> 0] = 15; //@line 6093
 return;
}
function __ZN6events10EventQueue8dispatchEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3182
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3183
 _equeue_dispatch($0, $1); //@line 3184
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 127; //@line 3187
  sp = STACKTOP; //@line 3188
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3191
  return;
 }
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26182
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26184
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 26185
 _fputc(10, $2) | 0; //@line 26186
 if (!___async) {
  ___async_unwind = 0; //@line 26189
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 702; //@line 26191
 sp = STACKTOP; //@line 26192
 return;
}
function __ZN6events10EventQueue6cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3213
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3214
 _equeue_cancel($0, $1); //@line 3215
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 128; //@line 3218
  sp = STACKTOP; //@line 3219
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3222
  return;
 }
}
function __ZN7LoRaPHY16set_last_tx_doneEhbj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $5 = 0;
 $5 = HEAP32[$0 + 72 >> 2] | 0; //@line 19809
 $11 = HEAPU8[(HEAP32[$0 + 124 >> 2] | 0) + (($1 & 255) * 12 | 0) + 9 >> 0] | 0; //@line 19815
 HEAP32[$5 + ($11 * 24 | 0) + 8 >> 2] = $3; //@line 19817
 if ($2) {
  return;
 }
 HEAP32[$5 + ($11 * 24 | 0) + 4 >> 2] = $3; //@line 19822
 return;
}
function __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 864; //@line 22128
 HEAP32[$0 + 4 >> 2] = 0; //@line 22130
 HEAP32[$0 + 8 >> 2] = $1; //@line 22132
 dest = $0 + 12 | 0; //@line 22134
 stop = dest + 120 | 0; //@line 22134
 do {
  HEAP32[dest >> 2] = 0; //@line 22134
  dest = dest + 4 | 0; //@line 22134
 } while ((dest | 0) < (stop | 0));
 return;
}
function _add_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$09 = 0, $3 = 0, $5 = 0, $7 = 0;
 $3 = $1 - $2 | 0; //@line 2561
 if (!$3) {
  return;
 }
 $5 = $3 & 255; //@line 2566
 $$09 = 0; //@line 2567
 $7 = 0; //@line 2567
 do {
  HEAP8[$0 + ($7 + $2) >> 0] = $5; //@line 2571
  $$09 = $$09 + 1 << 24 >> 24; //@line 2572
  $7 = $$09 & 255; //@line 2573
 } while ($3 >>> 0 > $7 >>> 0);
 return;
}
function __ZN4mbed5Timer5startEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26388
 $6 = ___async_retval; //@line 26390
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 26395
 $13 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 26397
 HEAP32[$13 >> 2] = HEAP32[$6 >> 2]; //@line 26399
 HEAP32[$13 + 4 >> 2] = $11; //@line 26402
 HEAP32[$4 >> 2] = 1; //@line 26403
 return;
}
function _gpio_irq_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0;
 if (($1 | 0) == -1) {
  $$0 = -1; //@line 6804
  return $$0 | 0; //@line 6805
 }
 HEAP32[5098] = $2; //@line 6807
 HEAP32[$0 >> 2] = $1; //@line 6808
 HEAP32[$0 + 4 >> 2] = $1; //@line 6810
 _emscripten_asm_const_iii(12, $3 | 0, $1 | 0) | 0; //@line 6811
 $$0 = 0; //@line 6812
 return $$0 | 0; //@line 6813
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11129
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 11140
  $$0 = 1; //@line 11141
 } else {
  $$0 = 0; //@line 11143
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 11147
 return;
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26218
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 26221
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 26226
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 26229
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 17166
 STACKTOP = STACKTOP + 16 | 0; //@line 17167
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17167
 _free($0); //@line 17169
 if (!(_pthread_setspecific(HEAP32[6114] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 17174
  return;
 } else {
  _abort_message(18800, sp); //@line 17176
 }
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 6844
 HEAP32[$0 >> 2] = $1; //@line 6845
 HEAP32[5099] = 1; //@line 6846
 $4 = $0; //@line 6847
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 6852
 $10 = 20400; //@line 6853
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 6855
 HEAP32[$10 + 4 >> 2] = $9; //@line 6858
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27705
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 2; //@line 27708
  $$0 = 0; //@line 27709
 } else {
  $$0 = $AsyncRetVal; //@line 27711
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 27714
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 16648
 }
 return;
}
function _mbed_trace_default_print($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4734
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4735
 _puts($0) | 0; //@line 4736
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 139; //@line 4739
  sp = STACKTOP; //@line 4740
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4743
  return;
 }
}
function _equeue_sema_create($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _pthread_mutex_init($0 | 0, 0) | 0; //@line 4563
 if (!$1) {
  $4 = _pthread_cond_init($0 + 28 | 0, 0) | 0; //@line 4567
  if (!$4) {
   HEAP8[$0 + 76 >> 0] = 0; //@line 4571
   $$0 = 0; //@line 4572
  } else {
   $$0 = $4; //@line 4574
  }
 } else {
  $$0 = $1; //@line 4577
 }
 return $$0 | 0; //@line 4579
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7112
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7113
 _emscripten_sleep($0 | 0); //@line 7114
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 645; //@line 7117
  sp = STACKTOP; //@line 7118
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7121
  return;
 }
}
function _equeue_tick() {
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 4526
 STACKTOP = STACKTOP + 16 | 0; //@line 4527
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4527
 $0 = sp; //@line 4528
 _gettimeofday($0 | 0, 0) | 0; //@line 4529
 STACKTOP = sp; //@line 4536
 return ((HEAP32[$0 + 4 >> 2] | 0) / 1e3 | 0) + ((HEAP32[$0 >> 2] | 0) * 1e3 | 0) | 0; //@line 4536
}
function _mbedtls_cipher_update__async_cb_193($0) {
 $0 = $0 | 0;
 var $$1 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 993
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$0 + 4 >> 2]; //@line 996
  $$1 = 0; //@line 997
 } else {
  $$1 = $AsyncRetVal; //@line 999
 }
 HEAP32[___async_retval >> 2] = $$1; //@line 1002
 return;
}
function __ZN13LoRaMacCryptoC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, dest = 0, stop = 0;
 $1 = $0 + 32 | 0; //@line 18917
 dest = $0; //@line 18918
 stop = dest + 64 | 0; //@line 18918
 do {
  HEAP32[dest >> 2] = 0; //@line 18918
  dest = dest + 4 | 0; //@line 18918
 } while ((dest | 0) < (stop | 0));
 HEAP8[$0 >> 0] = 73; //@line 18919
 HEAP8[$1 >> 0] = 1; //@line 18920
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 17151
 STACKTOP = STACKTOP + 16 | 0; //@line 17152
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17152
 if (!(_pthread_key_create(24456, 711) | 0)) {
  STACKTOP = sp; //@line 17157
  return;
 } else {
  _abort_message(18750, sp); //@line 17159
 }
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 16712
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 16716
  }
 }
 return;
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 32786
 HEAP32[new_frame + 4 >> 2] = sp; //@line 32788
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 32790
 ___async_cur_frame = new_frame; //@line 32791
 return ___async_cur_frame + 8 | 0; //@line 32792
}
function _mbedtls_gcm_free__async_cb($0) {
 $0 = $0 | 0;
 var $$034$i = 0, $$05$i = 0;
 $$034$i = 400; //@line 28035
 $$05$i = HEAP32[$0 + 4 >> 2] | 0; //@line 28035
 while (1) {
  $$034$i = $$034$i + -1 | 0; //@line 28037
  HEAP8[$$05$i >> 0] = 0; //@line 28039
  if (!$$034$i) {
   break;
  } else {
   $$05$i = $$05$i + 1 | 0; //@line 28044
  }
 }
 return;
}
function _mbedtls_aes_free($0) {
 $0 = $0 | 0;
 var $$02$i = 0, $$031$i = 0;
 if (!$0) {
  return;
 }
 $$02$i = $0; //@line 23497
 $$031$i = 280; //@line 23497
 while (1) {
  $$031$i = $$031$i + -1 | 0; //@line 23499
  HEAP8[$$02$i >> 0] = 0; //@line 23501
  if (!$$031$i) {
   break;
  } else {
   $$02$i = $$02$i + 1 | 0; //@line 23506
  }
 }
 return;
}
function __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $8 = 0;
 $1 = $0 + 2 | 0; //@line 17451
 $3 = HEAPU8[$1 >> 0] | 0; //@line 17453
 $8 = HEAPU8[$0 + 3 >> 0] | 0; //@line 17458
 _memcpy($0 + 4 + $3 | 0, $0 + 132 | 0, $8 | 0) | 0; //@line 17459
 HEAP8[$1 >> 0] = $3 + $8; //@line 17462
 return;
}
function b367(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 p14 = p14 | 0;
 nullFunc_viiiiiiiiiiiiiii(0); //@line 1174
}
function __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 return __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($0, $1, $2, $3, $4, $5, $6, $7, $8) | 0; //@line 19424
}
function __ZN7LoRaPHY15apply_DR_offsetEaa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $5 = 0;
 $5 = ($1 & 255) - ($2 & 255) | 0; //@line 21871
 if (!($5 & 128)) {
  $$0 = $5 & 255; //@line 21876
  return $$0 | 0; //@line 21877
 }
 $$0 = HEAP8[$0 + 26 >> 0] | 0; //@line 21881
 return $$0 | 0; //@line 21882
}
function __ZN4mbed8CallbackIFvvEE13function_moveIN6events5EventIS1_EEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 HEAP32[$0 >> 2] = 0; //@line 7906
 $2 = HEAP32[$1 >> 2] | 0; //@line 7907
 if (!$2) {
  return;
 }
 HEAP32[$0 >> 2] = $2; //@line 7912
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1; //@line 7915
 return;
}
function _gpio_init_inout($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6767
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6773
 _emscripten_asm_const_iiiiii(11, $0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0; //@line 6774
 return;
}
function b365(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 nullFunc_viiiiiiiiiiiiii(0); //@line 1171
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 8981
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 8981
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 8981
 return;
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 32775
  return low << bits; //@line 32776
 }
 tempRet0 = low << bits - 32; //@line 32778
 return 0; //@line 32779
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 7060
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 7064
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 7067
 return;
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_195($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1218
 HEAP32[$2 + 2076 >> 2] = 0; //@line 1222
 HEAP8[$2 + 2360 >> 0] = 1; //@line 1224
 HEAP32[$2 + 1760 >> 2] = 0; //@line 1226
 HEAP8[$2 + 1184 >> 0] = 0; //@line 1228
 return;
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 32764
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 32765
 }
 tempRet0 = 0; //@line 32767
 return high >>> bits - 32 | 0; //@line 32768
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 1900
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 1900
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 1900
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 10296
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 10296
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 10296
 return;
}
function __ZN16SX1276_LoRaRadio9start_cadEv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 1160
 STACKTOP = STACKTOP + 16 | 0; //@line 1161
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1161
 _mbed_tracef(16, 11020, 11154, sp); //@line 1163
 STACKTOP = sp; //@line 1164
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 7507
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7507
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7507
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 12523
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 12523
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 12523
 return;
}
function __ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb_272($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6451
 $6 = (__ZNK7LoRaMac16get_device_classEv(HEAP32[$0 + 4 >> 2] | 0) | 0) == 2; //@line 6453
 HEAP32[$4 + 2480 >> 2] = $6 ? 5 : 2; //@line 6456
 return;
}
function __ZN16SX1276_LoRaRadio11radio_resetEv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 76
 STACKTOP = STACKTOP + 16 | 0; //@line 77
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 77
 _mbed_tracef(16, 11020, 11786, sp); //@line 79
 STACKTOP = sp; //@line 80
 return;
}
function __ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_51($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22284
 $6 = (__ZNK7LoRaMac16get_device_classEv(HEAP32[$0 + 4 >> 2] | 0) | 0) == 2; //@line 22286
 HEAP32[$4 + 2480 >> 2] = $6 ? 5 : 2; //@line 22289
 return;
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb_57($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22596
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22598
 HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4; //@line 22601
 HEAP32[$6 + 2480 >> 2] = 2; //@line 22603
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_387($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29272
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29274
 HEAP32[$6 + 16 >> 2] = 0; //@line 29276
 return;
}
function _equeue_dispatch__async_cb_280($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8323
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8325
 HEAP8[HEAP32[$0 + 4 >> 2] >> 0] = 1; //@line 8326
 _equeue_mutex_unlock($4); //@line 8327
 HEAP8[$6 >> 0] = 0; //@line 8328
 return;
}
function _fflush__async_cb_378($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28476
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 28478
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 28481
 return;
}
function __ZN12LoRaWANStack20process_transmissionEv__async_cb_376($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28126
 $6 = (__ZNK7LoRaMac16get_device_classEv(HEAP32[$0 + 4 >> 2] | 0) | 0) == 2; //@line 28128
 HEAP32[$4 >> 2] = $6 ? 5 : 2; //@line 28130
 return;
}
function dynCall_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return FUNCTION_TABLE_iiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0; //@line 54
}
function _mbedtls_aes_crypt_ecb($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (($1 | 0) == 1) {
  _mbedtls_internal_aes_encrypt($0, $2, $3) | 0; //@line 1457
 } else {
  _mbedtls_internal_aes_decrypt($0, $2, $3) | 0; //@line 1459
 }
 return 0; //@line 1461
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_224($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3038
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 3040
 _gpio_irq_set($6 + 28 | 0, 2, 1); //@line 3042
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_152($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 29856
 __ZN4mbed5TimerD2Ev(HEAP32[$0 + 4 >> 2] | 0); //@line 29857
 HEAP8[___async_retval >> 0] = $6 & 1; //@line 29860
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _equeue_post__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12294
 _equeue_sema_signal((HEAP32[$0 + 4 >> 2] | 0) + 48 | 0); //@line 12296
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 12298
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9814
 HEAP32[$4 >> 2] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0 ? 2 : 1; //@line 9818
 HEAP32[___async_retval >> 2] = HEAP32[$4 >> 2]; //@line 9821
 return;
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 29675
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 29678
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 29681
 return;
}
function _gpio_init_out_ex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6749
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6755
 _emscripten_asm_const_iiii(10, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 6756
 return;
}
function __ZN12LoRaWANStack23set_confirmed_msg_retryEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if ($1 << 24 >> 24 == -1) {
  $$0 = -1003; //@line 11236
 } else {
  HEAP8[$0 + 2868 >> 0] = $1; //@line 11239
  $$0 = 0; //@line 11240
 }
 return $$0 | 0; //@line 11242
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 4321
 } else {
  $$0 = -1; //@line 4323
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 4326
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 47
}
function __ZN7LoRaMac16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK16channel_params_t($0 + 752 | 0, $1, __ZN7LoRaPHY16get_phy_channelsEv($0 + 4 | 0) | 0) | 0; //@line 16935
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 11876
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 11882
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 11886
}
function _equeue_break($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 128 | 0; //@line 3953
 _equeue_mutex_lock($1); //@line 3954
 HEAP8[$0 + 8 >> 0] = 1; //@line 3956
 _equeue_mutex_unlock($1); //@line 3957
 _equeue_sema_signal($0 + 48 | 0); //@line 3959
 return;
}
function _mbedtls_cipher_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 2246
 stop = dest + 68 | 0; //@line 2246
 do {
  HEAP32[dest >> 2] = 0; //@line 2246
  dest = dest + 4 | 0; //@line 2246
 } while ((dest | 0) < (stop | 0));
 return;
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 32798
 stackRestore(___async_cur_frame | 0); //@line 32799
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 32800
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 103
}
function _mbedtls_ccm_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 1928
 stop = dest + 68 | 0; //@line 1928
 do {
  HEAP32[dest >> 2] = 0; //@line 1928
  dest = dest + 4 | 0; //@line 1928
 } while ((dest | 0) < (stop | 0));
 return;
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28013
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 28014
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 28016
 return;
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20489
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 20490
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 20492
 return;
}
function __ZN7LoRaPHY15get_ack_timeoutEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0;
 $5 = HEAPU16[$0 + 50 >> 1] | 0; //@line 22739
 $6 = HEAPU16[$0 + 52 >> 1] | 0; //@line 22740
 return $5 - $6 + ((_rand() | 0) % ($6 << 1 | 1 | 0) | 0) | 0; //@line 22747
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 14987
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 14987
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 14989
 return $1 | 0; //@line 14990
}
function __ZN7LoRaMac16reset_ongoing_txEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 2088 >> 0] = 0; //@line 15641
 _memset($0 + 2099 | 0, 0, 257) | 0; //@line 15643
 if (!$1) {
  return;
 }
 HEAP16[$0 + 2356 >> 1] = 0; //@line 15648
 return;
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 11335
  $$0 = -1; //@line 11336
 } else {
  $$0 = $0; //@line 11338
 }
 return $$0 | 0; //@line 11340
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6733
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6739
 _emscripten_asm_const_iii(9, $0 | 0, $1 | 0) | 0; //@line 6740
 return;
}
function _gpio_init_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6718
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6724
 _emscripten_asm_const_iii(8, $0 | 0, $1 | 0) | 0; //@line 6725
 return;
}
function _equeue_sema_signal($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 4585
 HEAP8[$0 + 76 >> 0] = 1; //@line 4587
 _pthread_cond_signal($0 + 28 | 0) | 0; //@line 4589
 _pthread_mutex_unlock($0 | 0) | 0; //@line 4590
 return;
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 32515
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 32516
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 32517
}
function __ZN4mbed6Ticker5setupEy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0;
 $4 = ___udivdi3($1 | 0, $2 | 0, 1e3, 0) | 0; //@line 7081
 _emscripten_asm_const_iii(16, $0 + 40 | 0, $4 | 0) | 0; //@line 7083
 return;
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 40
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31595
 HEAP8[$2 + 689 >> 0] = 0; //@line 31597
 HEAP8[$2 + 688 >> 0] = 0; //@line 31599
 return;
}
function _equeue_enqueue__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14340
 _equeue_mutex_unlock(HEAP32[$0 + 4 >> 2] | 0); //@line 14341
 HEAP32[___async_retval >> 2] = $4; //@line 14343
 return;
}
function _aes_crypt_ctr_wrap($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return _mbedtls_aes_crypt_ctr($0, $1, $2, $3, $4, $5, $6) | 0; //@line 3200
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 1523
 ___cxa_begin_catch($0 | 0) | 0; //@line 1524
 _emscripten_alloc_async_context(4, sp) | 0; //@line 1525
 __ZSt9terminatev(); //@line 1526
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_265($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 6051
 HEAP8[___async_retval >> 0] = 1; //@line 6054
 return;
}
function _aes_ctx_alloc() {
 var $$0 = 0, $0 = 0;
 $0 = _calloc(1, 280) | 0; //@line 3223
 if (!$0) {
  $$0 = 0; //@line 3226
 } else {
  _mbedtls_aes_init($0); //@line 3228
  $$0 = $0; //@line 3229
 }
 return $$0 | 0; //@line 3231
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 96
}
function _handle_lora_downlink($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5); //@line 2066
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 33
}
function _aes_crypt_cbc_wrap($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) | 0; //@line 3187
}
function __ZN16LoRaWANInterface16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 5596
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 32507
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 32509
}
function __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_410($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 30779
 return;
}
function __ZN7LoRaMac16set_device_classERK14device_class_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 1168 >> 2] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0 ? 2 : 1; //@line 30484
 return;
}
function __ZN7LoRaPHY15get_max_payloadEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return HEAP8[(HEAP32[($2 ? $0 + 104 | 0 : $0 + 96 | 0) >> 2] | 0) + ($1 & 255) >> 0] | 0; //@line 22721
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 89
}
function b41(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_iiiiiiii(0); //@line 220
 return 0; //@line 220
}
function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0; //@line 12021
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0; //@line 12026
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 14047
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 14050
 }
 return $$0 | 0; //@line 14052
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_180($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 101
 return;
}
function __ZN7LoRaPHY13mask_bit_testEPKtj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return (1 << ($2 & 15) & (HEAPU16[$1 + ($2 >>> 4 << 1) >> 1] | 0) | 0) != 0 | 0; //@line 22151
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_292($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 10415
 return;
}
function __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 2160
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_366($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 27615
 return;
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = HEAP8[___async_retval >> 0] & 1 ? 3 : 0; //@line 26637
 return;
}
function __ZN7LoRaMac15open_rx2_windowEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 1168 >> 2] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0 ? 2 : 1; //@line 22312
 return;
}
function __ZN16LoRaWANInterface25set_confirmed_msg_retriesEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack23set_confirmed_msg_retryEh($0 + 4 | 0, $1) | 0; //@line 5568
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 11516
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 11520
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 32744
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 26
}
function __ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 6407
 return;
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 2822
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_75($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 23971
 return;
}
function __ZN16SX1276_LoRaRadio18set_public_networkEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 689 >> 0] = 1; //@line 816
 HEAP8[$0 + 776 >> 0] = $1 & 1; //@line 818
 return;
}
function __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (__ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0) - $1 | 0; //@line 23206
}
function __ZN16LoRaWANInterface10initializeEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 30469
 return;
}
function __ZN16LoRaWANInterface16set_device_classE14device_class_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 4233
 return;
}
function b39(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 217
 return 0; //@line 217
}
function b38(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 214
 return 0; //@line 214
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 32805
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 32806
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_415($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 31338
 return;
}
function _gpio_irq_set($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _emscripten_asm_const_iiii(14, HEAP32[$0 + 4 >> 2] | 0, $1 | 0, $2 | 0) | 0; //@line 6834
 return;
}
function __ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 4739
 return;
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_276($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 6907
 return;
}
function __ZN7LoRaMac24continue_joining_processEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = (HEAP32[___async_retval >> 2] | 0) == 0 & 1; //@line 9668
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 10941
 return;
}
function __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0 + 4 | 0, $1); //@line 16968
 return;
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26460
 return;
}
function __ZN16LoRaWANInterface7connectERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 14387
 return;
}
function __ZN12LoRaWANStack7connectERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 11209
 return;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_114($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 26038
 return;
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 7](a1 | 0, a2 | 0, a3 | 0); //@line 82
}
function __ZN5Sht31C2E7PinNameS0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _emscripten_asm_const_iiii(17, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 7131
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_29($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 20411
 return;
}
function __ZN16LoRaWANInterface12set_datarateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack21set_channel_data_rateEh($0 + 4 | 0, $1) | 0; //@line 5543
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_227($0) {
 $0 = $0 | 0;
 _gpio_irq_set((HEAP32[$0 + 8 >> 2] | 0) + 28 | 0, 2, 0); //@line 3153
 return;
}
function __ZN7LoRaPHY23get_minimum_tx_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[((HEAP8[$0 + 128 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 22706
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 7853
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 12012
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 12014
}
function __ZN16LoRaWANInterface25disable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb($0 + 4 | 0, 0) | 0; //@line 5559
}
function __ZN16LoRaWANInterface19remove_channel_planEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 9780
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 17251
 __ZdlPv($0); //@line 17252
 return;
}
function _aes_crypt_ecb_wrap($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return _mbedtls_aes_crypt_ecb($0, $1, $2, $3) | 0; //@line 3175
}
function __ZN16LoRaWANInterface24enable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb($0 + 4 | 0, 1) | 0; //@line 5551
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_341($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 14272
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 16934
 __ZdlPv($0); //@line 16935
 return;
}
function _srand($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = 20384; //@line 16048
 HEAP32[$2 >> 2] = $0 + -1; //@line 16050
 HEAP32[$2 + 4 >> 2] = 0; //@line 16053
 return;
}
function __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 23187
 return;
}
function _gcm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 400) | 0; //@line 3141
 if ($0 | 0) {
  _mbedtls_gcm_init($0); //@line 3144
 }
 return $0 | 0; //@line 3146
}
function __ZN7LoRaMac21handle_retransmissionEv__async_cb_130($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26876
 return;
}
function __ZN7LoRaMac21handle_retransmissionEv__async_cb_129($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26862
 return;
}
function __ZN16LoRaWANInterface7receiveEPhtRhRi__async_cb($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = HEAP16[___async_retval >> 1] | 0; //@line 4808
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_398($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 30135
 return;
}
function _ccm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 68) | 0; //@line 3093
 if ($0 | 0) {
  _mbedtls_ccm_init($0); //@line 3096
 }
 return $0 | 0; //@line 3098
}
function __ZN16LoRaWANInterface25remove_link_check_requestEv($0) {
 $0 = $0 | 0;
 __ZN12LoRaWANStack25remove_link_check_requestEv($0 + 4 | 0); //@line 5533
 return;
}
function __ZN16LoRaWANInterface14remove_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26804
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_368($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = 2; //@line 27695
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 16462
 __ZdlPv($0); //@line 16463
 return;
}
function __ZN16LoRaWANInterface7receiveEhPhti__async_cb($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = HEAP16[___async_retval >> 1] | 0; //@line 4792
 return;
}
function __ZN16LoRaWANInterface4sendEhPKhti__async_cb($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = HEAP16[___async_retval >> 1] | 0; //@line 26902
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 9790
 return;
}
function __ZN12LoRaWANStack16remove_a_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 10113
 return;
}
function _ticker_set_handler__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 2] >> 2] = HEAP32[$0 + 8 >> 2]; //@line 26784
 return;
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 13532
 }
 return;
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 11341
 return;
}
function __ZN7LoRaMac21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26794
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function b36(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 211
 return 0; //@line 211
}
function b35(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(6); //@line 208
 return 0; //@line 208
}
function b34(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 205
 return 0; //@line 205
}
function __ZN16LoRaWANInterface22add_link_check_requestEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack22set_link_check_requestEv($0 + 4 | 0) | 0; //@line 5526
}
function __ZN16LoRaWANInterface10disconnectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28140
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_196($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 2879 >> 0] = 1; //@line 1547
 return;
}
function __ZN7LoRaMac19remove_channel_planEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26239
 return;
}
function __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 16989
 return;
}
function b363(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 1168
}
function __ZN4mbed5TimerD2Ev($0) {
 $0 = $0 | 0;
 if (HEAP32[$0 >> 2] | 0) {
  if (HEAP8[$0 + 28 >> 0] | 0) {}
 }
 HEAP32[$0 >> 2] = 0; //@line 2989
 return;
}
function __ZN12LoRaWANStack8shutdownEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 11329
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 16659
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 15](a1 | 0, a2 | 0) | 0; //@line 19
}
function __ZN16LoRaWANInterface7connectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 15529
 return;
}
function __ZN12LoRaWANStack7connectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 12220
 return;
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY16get_channel_maskEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return HEAP32[($1 ? $0 + 120 | 0 : $0 + 116 | 0) >> 2] | 0; //@line 22758
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[2724] | 0; //@line 17241
 HEAP32[2724] = $0 + 0; //@line 17243
 return $0 | 0; //@line 17245
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_257($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 8 >> 2] | 0) + 2068 >> 0] = 0; //@line 5497
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_249($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 2068 >> 0] = 1; //@line 4830
 return;
}
function __ZN18LoRaWANTimeHandler16get_current_timeEv($0) {
 $0 = $0 | 0;
 return __ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0; //@line 23196
}
function __ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 12389
 return;
}
function _gpio_irq_free($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_iii(13, HEAP32[$0 + 4 >> 2] | 0, HEAP32[$0 + 8 >> 2] | 0) | 0; //@line 6823
 return;
}
function _mbedtls_cipher_setkey__async_cb_171($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 32212
 return;
}
function _mbedtls_cipher_update__async_cb_194($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 1012
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_247($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 4729
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_108($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 25776
 return;
}
function _aes_setkey_enc_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_enc($0, $1, $2) | 0; //@line 3209
}
function _aes_setkey_dec_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_dec($0, $1, $2) | 0; //@line 3218
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_67($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 23566
 return;
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 31587
 return;
}
function _mbedtls_cipher_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 32202
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac4joinEb__async_cb_30($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 20479
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 10154
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 15](a1 | 0, a2 | 0); //@line 75
}
function _mbedtls_cipher_update__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 843
 return;
}
function _gcm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 11285
 return;
}
function _ccm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 32336
 return;
}
function _mbedtls_ccm_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22143
 return;
}
function __ZN7LoRaMac24enable_adaptive_datarateEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 1936 >> 0] = $1 & 1; //@line 15587
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_190($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 1; //@line 833
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_353($0) {
 $0 = $0 | 0;
 __ZN12LoRaPHYEU868D2Ev((HEAP32[$0 + 4 >> 2] | 0) + 4 | 0); //@line 14918
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b32(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(3); //@line 202
 return 0; //@line 202
}
function b31(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 199
 return 0; //@line 199
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 32832
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_244($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 4 >> 2] = $1; //@line 22159
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b361(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 1165
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function _fflush__async_cb_379($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28491
 return;
}
function __ZN7LoRaPHY32is_custom_channel_plan_supportedEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 16 >> 0] | 0) != 0 | 0; //@line 22783
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 13995
}
function _fputc__async_cb_375($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28026
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _vsprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26892
 return;
}
function _snprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 29610
 return;
}
function __ZN7LoRaMac14set_tx_ongoingEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 2088 >> 0] = $1 & 1; //@line 15632
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _putchar__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28360
 return;
}
function _putc__async_cb_31($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 20502
 return;
}
function __ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 >> 0] | 0) != 0 | 0; //@line 17486
}
function __ZN7LoRaPHYD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 864; //@line 19658
 HEAP32[$0 + 4 >> 2] = 0; //@line 19660
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function _sprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 1024
 return;
}
function _printf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 4471
 return;
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 2805
 return;
}
function __ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 1 >> 0] | 0) != 0 | 0; //@line 17503
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 15](a1 | 0) | 0; //@line 12
}
function __ZN7LoRaMac11schedule_txEv__async_cb_172($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 32240
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY21verify_nb_join_trialsEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($1 & 255) > 11 | 0; //@line 22847
}
function __ZN4mbed11InterruptInD0Ev__async_cb_320($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 12381
 return;
}
function __ZN12LoRaWANStack25remove_link_check_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2877 >> 0] = 0; //@line 11630
 return;
}
function __ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 3 >> 0] | 0; //@line 17471
}
function __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 >> 0] = 0; //@line 17477
 return;
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(18853, HEAP32[$0 + 4 >> 2] | 0); //@line 28149
}
function __ZN12LoRaPHYEU868D0Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 23029
 __ZdlPv($0); //@line 23030
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 32224
 return;
}
function __ZN4mbed6Ticker6detachEv($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_ii(15, $0 + 40 | 0) | 0; //@line 7091
 return;
}
function b29(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(31); //@line 196
 return 0; //@line 196
}
function b28(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(30); //@line 193
 return 0; //@line 193
}
function b27(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(29); //@line 190
 return 0; //@line 190
}
function b26(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(28); //@line 187
 return 0; //@line 187
}
function b25(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(27); //@line 184
 return 0; //@line 184
}
function b24(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(26); //@line 181
 return 0; //@line 181
}
function b23(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(25); //@line 178
 return 0; //@line 178
}
function b22(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(24); //@line 175
 return 0; //@line 175
}
function b21(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(23); //@line 172
 return 0; //@line 172
}
function b20(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(22); //@line 169
 return 0; //@line 169
}
function b19(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(21); //@line 166
 return 0; //@line 166
}
function b18(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(20); //@line 163
 return 0; //@line 163
}
function b17(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(19); //@line 160
 return 0; //@line 160
}
function b16(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(18); //@line 157
 return 0; //@line 157
}
function __ZN16SX1276_LoRaRadioD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 23498
 return;
}
function b15(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 154
 return 0; //@line 154
}
function __ZN7LoRaPHY29get_maximum_frame_counter_gapEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 48 >> 1] | 0; //@line 22729
}
function __ZN5Sht3115readTemperatureEv($0) {
 $0 = $0 | 0;
 return +(+(_emscripten_asm_const_ii(18, $0 | 0) | 0) / 100.0);
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD0Ev__async_cb_161($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 30707
 return;
}
function __ZN16LoRaWANInterfaceD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 2079
 return;
}
function __ZN7LoRaMac25post_process_mlme_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2068 >> 0] = 0; //@line 11914
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb_381($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 28589
 return;
}
function __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 1 >> 0] = 0; //@line 17493
 return;
}
function __ZN14LoRaMacCommand20clear_command_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2 >> 0] = 0; //@line 17342
 return;
}
function b359(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 1162
}
function b358(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 1159
}
function b357(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 1156
}
function __ZN14LoRaMacCommand19clear_repeat_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 3 >> 0] = 0; //@line 17444
 return;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 1023](a1 | 0); //@line 68
}
function _equeue_event_period($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -12 >> 2] = $1; //@line 4512
 return;
}
function __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 2 >> 0] | 0; //@line 17351
}
function __ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv__async_cb_164($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_delay($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -16 >> 2] = $1; //@line 4503
 return;
}
function __ZN7LoRaMac21post_process_mlme_indEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2064 >> 0] = 0; //@line 11978
 return;
}
function __ZN7LoRaMac21post_process_mcps_indEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 1996 >> 0] = 0; //@line 11970
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv__async_cb_343($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_317($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_dtor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -8 >> 2] = $1; //@line 4521
 return;
}
function __ZN7LoRaMac10tx_ongoingEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 2088 >> 0] | 0) != 0 | 0; //@line 15623
}
function __ZN7LoRaMac10nwk_joinedEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 2360 >> 0] | 0) != 0 | 0; //@line 15000
}
function __ZN16SX1276_LoRaRadio18check_rf_frequencyEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1; //@line 1171
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_242($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context00IPFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_358($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_357($0) {
 $0 = $0 | 0;
 return;
}
function _aes_ctx_free($0) {
 $0 = $0 | 0;
 _mbedtls_aes_free($0); //@line 3237
 _free($0); //@line 3238
 return;
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK7LoRaMac16get_device_classEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 2364 >> 2] | 0; //@line 15578
}
function __ZN6events10EventQueue14break_dispatchEv($0) {
 $0 = $0 | 0;
 _equeue_break($0); //@line 3199
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_349($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY19get_max_nb_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 20 >> 0] | 0; //@line 22766
}
function __ZN16SX1276_LoRaRadio10get_statusEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 688 >> 0] | 0; //@line 789
}
function __ZN7LoRaPHY16get_phy_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 124 >> 2] | 0; //@line 22774
}
function __ZN14LoRaMacCommand23get_mac_commands_bufferEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 17358
}
function _gcm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 13070
 return;
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 15240
}
function _equeue_mutex_unlock($0) {
 $0 = $0 | 0;
 _pthread_mutex_unlock($0 | 0) | 0; //@line 4556
 return;
}
function _ccm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 2138
 return;
}
function _main__async_cb_11($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 18730
 return;
}
function _equeue_mutex_create($0) {
 $0 = $0 | 0;
 return _pthread_mutex_init($0 | 0, 0) | 0; //@line 4543
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_201($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommandC2Ev($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 276) | 0; //@line 17334
 return;
}
function _main__async_cb_9($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 18668
 return;
}
function _main__async_cb_8($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 18660
 return;
}
function _main__async_cb_12($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 18740
 return;
}
function b13(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(15); //@line 151
 return 0; //@line 151
}
function __ZNK7LoRaMac21get_mlme_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 2068 | 0; //@line 11900
}
function __ZNK7LoRaMac21get_mcps_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 2036 | 0; //@line 11886
}
function __ZN6events10EventQueue13function_dtorINS0_9context00IPFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function b12(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 148
 return 0; //@line 148
}
function _equeue_mutex_lock($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 4549
 return;
}
function __ZNK7LoRaMac19get_mlme_indicationEv($0) {
 $0 = $0 | 0;
 return $0 + 2060 | 0; //@line 11907
}
function __ZNK7LoRaMac19get_mcps_indicationEv($0) {
 $0 = $0 | 0;
 return $0 + 1996 | 0; //@line 11893
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaWANTimeHandlerC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 23173
 return;
}
function __ZN18LoRaMacChannelPlanC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 16975
 return;
}
function b355(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(7); //@line 1153
}
function b354(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(6); //@line 1150
}
function b353(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0); //@line 1147
}
function __ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb_96($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_147($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 7]() | 0; //@line 5
}
function __ZN6events10EventQueue4tickEv($0) {
 $0 = $0 | 0;
 return _equeue_tick() | 0; //@line 3207
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_403($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_2($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack26process_status_check_stateEv__async_cb_319($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_aes_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 280) | 0; //@line 23486
 return;
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_93($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_126($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_gcm_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 400) | 0; //@line 4273
 return;
}
function __ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_52($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_331($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_329($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaPHYEU868D2Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 23022
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_372($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_371($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack26process_status_check_stateEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_99($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb_123($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_122($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_121($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_119($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_310($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_309($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_308($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_385($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_95($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events5EventIFvvEE10event_dtorIPS1_EEvPNS2_5eventE($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_240($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_239($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_238($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_237($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_236($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_235($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_234($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 15](); //@line 61
}
function __ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb_296($0) {
 $0 = $0 | 0;
 return;
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 11393
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_221($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_220($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_219($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_217($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_393($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_409($0) {
 $0 = $0 | 0;
 return;
}
function b10(p0) {
 p0 = p0 | 0;
 nullFunc_ii(15); //@line 145
 return 0; //@line 145
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_391($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b9(p0) {
 p0 = p0 | 0;
 nullFunc_ii(14); //@line 142
 return 0; //@line 142
}
function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(13); //@line 139
 return 0; //@line 139
}
function b7(p0) {
 p0 = p0 | 0;
 nullFunc_ii(12); //@line 136
 return 0; //@line 136
}
function b6(p0) {
 p0 = p0 | 0;
 nullFunc_ii(11); //@line 133
 return 0; //@line 133
}
function ___ofl_lock() {
 ___lock(24440); //@line 12031
 return 24448; //@line 12032
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_113($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_312($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 130
 return 0; //@line 130
}
function b351(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 1144
}
function _abort_message__async_cb_117($0) {
 $0 = $0 | 0;
 _abort(); //@line 26199
}
function __ZN7LoRaPHYD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 19667
 return;
}
function __ZN6events10EventQueue8dispatchEi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 3115
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_65($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue6cancelEi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7Timeout7handlerEv__async_cb_175($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio4sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptInD2Ev__async_cb_344($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 226
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_86($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 15161
}
function __ZN4mbed10TimerEvent3irqEj__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 15167
}
function __ZN4mbed6Ticker7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_170($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStackD2Ev__async_cb_150($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_trace_default_print__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb_259($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventC2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0; //@line 32959
}
function __ZN4mbed6TickerD2Ev__async_cb_420($0) {
 $0 = $0 | 0;
 return;
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 16288
 return;
}
function _schedule_interrupt__async_cb_48($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_47($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_44($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_43($0) {
 $0 = $0 | 0;
 return;
}
function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0; //@line 32955
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6unlockEv($0) {
 $0 = $0 | 0;
 return;
}
function _ticker_remove_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _handle_interrupt_in__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_unlock() {
 ___unlock(24440); //@line 12037
 return;
}
function __ZN16SX1276_LoRaRadio4lockEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZL12send_messagev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b349(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1023); //@line 1141
}
function b348(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1022); //@line 1138
}
function b347(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1021); //@line 1135
}
function b346(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1020); //@line 1132
}
function b345(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1019); //@line 1129
}
function b344(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1018); //@line 1126
}
function b343(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1017); //@line 1123
}
function b342(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1016); //@line 1120
}
function b341(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1015); //@line 1117
}
function b340(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1014); //@line 1114
}
function b339(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1013); //@line 1111
}
function b338(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1012); //@line 1108
}
function b337(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1011); //@line 1105
}
function b336(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1010); //@line 1102
}
function b335(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1009); //@line 1099
}
function b334(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1008); //@line 1096
}
function b333(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1007); //@line 1093
}
function b332(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1006); //@line 1090
}
function b331(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1005); //@line 1087
}
function b330(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1004); //@line 1084
}
function b329(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1003); //@line 1081
}
function b328(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1002); //@line 1078
}
function b327(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1001); //@line 1075
}
function b3() {
 nullFunc_i(7); //@line 127
 return 0; //@line 127
}
function b2() {
 nullFunc_i(6); //@line 124
 return 0; //@line 124
}
function b1() {
 nullFunc_i(0); //@line 121
 return 0; //@line 121
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaWANTimeHandlerD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaMacChannelPlanD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b326(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1e3); //@line 1072
}
function b325(p0) {
 p0 = p0 | 0;
 nullFunc_vi(999); //@line 1069
}
function b324(p0) {
 p0 = p0 | 0;
 nullFunc_vi(998); //@line 1066
}
function b323(p0) {
 p0 = p0 | 0;
 nullFunc_vi(997); //@line 1063
}
function b322(p0) {
 p0 = p0 | 0;
 nullFunc_vi(996); //@line 1060
}
function b321(p0) {
 p0 = p0 | 0;
 nullFunc_vi(995); //@line 1057
}
function b320(p0) {
 p0 = p0 | 0;
 nullFunc_vi(994); //@line 1054
}
function b319(p0) {
 p0 = p0 | 0;
 nullFunc_vi(993); //@line 1051
}
function b318(p0) {
 p0 = p0 | 0;
 nullFunc_vi(992); //@line 1048
}
function b317(p0) {
 p0 = p0 | 0;
 nullFunc_vi(991); //@line 1045
}
function b316(p0) {
 p0 = p0 | 0;
 nullFunc_vi(990); //@line 1042
}
function b315(p0) {
 p0 = p0 | 0;
 nullFunc_vi(989); //@line 1039
}
function b314(p0) {
 p0 = p0 | 0;
 nullFunc_vi(988); //@line 1036
}
function b313(p0) {
 p0 = p0 | 0;
 nullFunc_vi(987); //@line 1033
}
function b312(p0) {
 p0 = p0 | 0;
 nullFunc_vi(986); //@line 1030
}
function b311(p0) {
 p0 = p0 | 0;
 nullFunc_vi(985); //@line 1027
}
function b310(p0) {
 p0 = p0 | 0;
 nullFunc_vi(984); //@line 1024
}
function b309(p0) {
 p0 = p0 | 0;
 nullFunc_vi(983); //@line 1021
}
function b308(p0) {
 p0 = p0 | 0;
 nullFunc_vi(982); //@line 1018
}
function b307(p0) {
 p0 = p0 | 0;
 nullFunc_vi(981); //@line 1015
}
function b306(p0) {
 p0 = p0 | 0;
 nullFunc_vi(980); //@line 1012
}
function b305(p0) {
 p0 = p0 | 0;
 nullFunc_vi(979); //@line 1009
}
function b304(p0) {
 p0 = p0 | 0;
 nullFunc_vi(978); //@line 1006
}
function b303(p0) {
 p0 = p0 | 0;
 nullFunc_vi(977); //@line 1003
}
function b302(p0) {
 p0 = p0 | 0;
 nullFunc_vi(976); //@line 1000
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 11351
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 11668
}
function b301(p0) {
 p0 = p0 | 0;
 nullFunc_vi(975); //@line 997
}
function b300(p0) {
 p0 = p0 | 0;
 nullFunc_vi(974); //@line 994
}
function b299(p0) {
 p0 = p0 | 0;
 nullFunc_vi(973); //@line 991
}
function b298(p0) {
 p0 = p0 | 0;
 nullFunc_vi(972); //@line 988
}
function b297(p0) {
 p0 = p0 | 0;
 nullFunc_vi(971); //@line 985
}
function b296(p0) {
 p0 = p0 | 0;
 nullFunc_vi(970); //@line 982
}
function b295(p0) {
 p0 = p0 | 0;
 nullFunc_vi(969); //@line 979
}
function b294(p0) {
 p0 = p0 | 0;
 nullFunc_vi(968); //@line 976
}
function b293(p0) {
 p0 = p0 | 0;
 nullFunc_vi(967); //@line 973
}
function b292(p0) {
 p0 = p0 | 0;
 nullFunc_vi(966); //@line 970
}
function b291(p0) {
 p0 = p0 | 0;
 nullFunc_vi(965); //@line 967
}
function b290(p0) {
 p0 = p0 | 0;
 nullFunc_vi(964); //@line 964
}
function b289(p0) {
 p0 = p0 | 0;
 nullFunc_vi(963); //@line 961
}
function b288(p0) {
 p0 = p0 | 0;
 nullFunc_vi(962); //@line 958
}
function b287(p0) {
 p0 = p0 | 0;
 nullFunc_vi(961); //@line 955
}
function b286(p0) {
 p0 = p0 | 0;
 nullFunc_vi(960); //@line 952
}
function b285(p0) {
 p0 = p0 | 0;
 nullFunc_vi(959); //@line 949
}
function b284(p0) {
 p0 = p0 | 0;
 nullFunc_vi(958); //@line 946
}
function b283(p0) {
 p0 = p0 | 0;
 nullFunc_vi(957); //@line 943
}
function b282(p0) {
 p0 = p0 | 0;
 nullFunc_vi(956); //@line 940
}
function b281(p0) {
 p0 = p0 | 0;
 nullFunc_vi(955); //@line 937
}
function b280(p0) {
 p0 = p0 | 0;
 nullFunc_vi(954); //@line 934
}
function b279(p0) {
 p0 = p0 | 0;
 nullFunc_vi(953); //@line 931
}
function b278(p0) {
 p0 = p0 | 0;
 nullFunc_vi(952); //@line 928
}
function b277(p0) {
 p0 = p0 | 0;
 nullFunc_vi(951); //@line 925
}
function b276(p0) {
 p0 = p0 | 0;
 nullFunc_vi(950); //@line 922
}
function b275(p0) {
 p0 = p0 | 0;
 nullFunc_vi(949); //@line 919
}
function b274(p0) {
 p0 = p0 | 0;
 nullFunc_vi(948); //@line 916
}
function b273(p0) {
 p0 = p0 | 0;
 nullFunc_vi(947); //@line 913
}
function b272(p0) {
 p0 = p0 | 0;
 nullFunc_vi(946); //@line 910
}
function b271(p0) {
 p0 = p0 | 0;
 nullFunc_vi(945); //@line 907
}
function b270(p0) {
 p0 = p0 | 0;
 nullFunc_vi(944); //@line 904
}
function b269(p0) {
 p0 = p0 | 0;
 nullFunc_vi(943); //@line 901
}
function b268(p0) {
 p0 = p0 | 0;
 nullFunc_vi(942); //@line 898
}
function b267(p0) {
 p0 = p0 | 0;
 nullFunc_vi(941); //@line 895
}
function b266(p0) {
 p0 = p0 | 0;
 nullFunc_vi(940); //@line 892
}
function b265(p0) {
 p0 = p0 | 0;
 nullFunc_vi(939); //@line 889
}
function b264(p0) {
 p0 = p0 | 0;
 nullFunc_vi(938); //@line 886
}
function b263(p0) {
 p0 = p0 | 0;
 nullFunc_vi(937); //@line 883
}
function b262(p0) {
 p0 = p0 | 0;
 nullFunc_vi(936); //@line 880
}
function b261(p0) {
 p0 = p0 | 0;
 nullFunc_vi(935); //@line 877
}
function b260(p0) {
 p0 = p0 | 0;
 nullFunc_vi(934); //@line 874
}
function b259(p0) {
 p0 = p0 | 0;
 nullFunc_vi(933); //@line 871
}
function b258(p0) {
 p0 = p0 | 0;
 nullFunc_vi(932); //@line 868
}
function b257(p0) {
 p0 = p0 | 0;
 nullFunc_vi(931); //@line 865
}
function b256(p0) {
 p0 = p0 | 0;
 nullFunc_vi(930); //@line 862
}
function b255(p0) {
 p0 = p0 | 0;
 nullFunc_vi(929); //@line 859
}
function b254(p0) {
 p0 = p0 | 0;
 nullFunc_vi(928); //@line 856
}
function b253(p0) {
 p0 = p0 | 0;
 nullFunc_vi(927); //@line 853
}
function b252(p0) {
 p0 = p0 | 0;
 nullFunc_vi(926); //@line 850
}
function b251(p0) {
 p0 = p0 | 0;
 nullFunc_vi(925); //@line 847
}
function b250(p0) {
 p0 = p0 | 0;
 nullFunc_vi(924); //@line 844
}
function b249(p0) {
 p0 = p0 | 0;
 nullFunc_vi(923); //@line 841
}
function b248(p0) {
 p0 = p0 | 0;
 nullFunc_vi(922); //@line 838
}
function b247(p0) {
 p0 = p0 | 0;
 nullFunc_vi(921); //@line 835
}
function b246(p0) {
 p0 = p0 | 0;
 nullFunc_vi(920); //@line 832
}
function b245(p0) {
 p0 = p0 | 0;
 nullFunc_vi(919); //@line 829
}
function b244(p0) {
 p0 = p0 | 0;
 nullFunc_vi(918); //@line 826
}
function b243(p0) {
 p0 = p0 | 0;
 nullFunc_vi(917); //@line 823
}
function b242(p0) {
 p0 = p0 | 0;
 nullFunc_vi(916); //@line 820
}
function b241(p0) {
 p0 = p0 | 0;
 nullFunc_vi(915); //@line 817
}
function b240(p0) {
 p0 = p0 | 0;
 nullFunc_vi(914); //@line 814
}
function b239(p0) {
 p0 = p0 | 0;
 nullFunc_vi(913); //@line 811
}
function b238(p0) {
 p0 = p0 | 0;
 nullFunc_vi(912); //@line 808
}
function b237(p0) {
 p0 = p0 | 0;
 nullFunc_vi(911); //@line 805
}
function b236(p0) {
 p0 = p0 | 0;
 nullFunc_vi(910); //@line 802
}
function b235(p0) {
 p0 = p0 | 0;
 nullFunc_vi(909); //@line 799
}
function b234(p0) {
 p0 = p0 | 0;
 nullFunc_vi(908); //@line 796
}
function b233(p0) {
 p0 = p0 | 0;
 nullFunc_vi(907); //@line 793
}
function b232(p0) {
 p0 = p0 | 0;
 nullFunc_vi(906); //@line 790
}
function b231(p0) {
 p0 = p0 | 0;
 nullFunc_vi(905); //@line 787
}
function b230(p0) {
 p0 = p0 | 0;
 nullFunc_vi(904); //@line 784
}
function b229(p0) {
 p0 = p0 | 0;
 nullFunc_vi(903); //@line 781
}
function b228(p0) {
 p0 = p0 | 0;
 nullFunc_vi(902); //@line 778
}
function b227(p0) {
 p0 = p0 | 0;
 nullFunc_vi(901); //@line 775
}
function b226(p0) {
 p0 = p0 | 0;
 nullFunc_vi(900); //@line 772
}
function b225(p0) {
 p0 = p0 | 0;
 nullFunc_vi(899); //@line 769
}
function b224(p0) {
 p0 = p0 | 0;
 nullFunc_vi(898); //@line 766
}
function b223(p0) {
 p0 = p0 | 0;
 nullFunc_vi(897); //@line 763
}
function b222(p0) {
 p0 = p0 | 0;
 nullFunc_vi(896); //@line 760
}
function b221(p0) {
 p0 = p0 | 0;
 nullFunc_vi(895); //@line 757
}
function b220(p0) {
 p0 = p0 | 0;
 nullFunc_vi(894); //@line 754
}
function b219(p0) {
 p0 = p0 | 0;
 nullFunc_vi(893); //@line 751
}
function b218(p0) {
 p0 = p0 | 0;
 nullFunc_vi(892); //@line 748
}
function b217(p0) {
 p0 = p0 | 0;
 nullFunc_vi(891); //@line 745
}
function b216(p0) {
 p0 = p0 | 0;
 nullFunc_vi(890); //@line 742
}
function b215(p0) {
 p0 = p0 | 0;
 nullFunc_vi(889); //@line 739
}
function b214(p0) {
 p0 = p0 | 0;
 nullFunc_vi(888); //@line 736
}
function b213(p0) {
 p0 = p0 | 0;
 nullFunc_vi(887); //@line 733
}
function b212(p0) {
 p0 = p0 | 0;
 nullFunc_vi(886); //@line 730
}
function b211(p0) {
 p0 = p0 | 0;
 nullFunc_vi(885); //@line 727
}
function b210(p0) {
 p0 = p0 | 0;
 nullFunc_vi(884); //@line 724
}
function b209(p0) {
 p0 = p0 | 0;
 nullFunc_vi(883); //@line 721
}
function b208(p0) {
 p0 = p0 | 0;
 nullFunc_vi(882); //@line 718
}
function b207(p0) {
 p0 = p0 | 0;
 nullFunc_vi(881); //@line 715
}
function b206(p0) {
 p0 = p0 | 0;
 nullFunc_vi(880); //@line 712
}
function b205(p0) {
 p0 = p0 | 0;
 nullFunc_vi(879); //@line 709
}
function b204(p0) {
 p0 = p0 | 0;
 nullFunc_vi(878); //@line 706
}
function b203(p0) {
 p0 = p0 | 0;
 nullFunc_vi(877); //@line 703
}
function b202(p0) {
 p0 = p0 | 0;
 nullFunc_vi(876); //@line 700
}
function b201(p0) {
 p0 = p0 | 0;
 nullFunc_vi(875); //@line 697
}
function b200(p0) {
 p0 = p0 | 0;
 nullFunc_vi(874); //@line 694
}
function b199(p0) {
 p0 = p0 | 0;
 nullFunc_vi(873); //@line 691
}
function b198(p0) {
 p0 = p0 | 0;
 nullFunc_vi(872); //@line 688
}
function b197(p0) {
 p0 = p0 | 0;
 nullFunc_vi(871); //@line 685
}
function b196(p0) {
 p0 = p0 | 0;
 nullFunc_vi(870); //@line 682
}
function b195(p0) {
 p0 = p0 | 0;
 nullFunc_vi(869); //@line 679
}
function b194(p0) {
 p0 = p0 | 0;
 nullFunc_vi(868); //@line 676
}
function b193(p0) {
 p0 = p0 | 0;
 nullFunc_vi(867); //@line 673
}
function b192(p0) {
 p0 = p0 | 0;
 nullFunc_vi(866); //@line 670
}
function b191(p0) {
 p0 = p0 | 0;
 nullFunc_vi(865); //@line 667
}
function b190(p0) {
 p0 = p0 | 0;
 nullFunc_vi(864); //@line 664
}
function b189(p0) {
 p0 = p0 | 0;
 nullFunc_vi(863); //@line 661
}
function b188(p0) {
 p0 = p0 | 0;
 nullFunc_vi(862); //@line 658
}
function b187(p0) {
 p0 = p0 | 0;
 nullFunc_vi(861); //@line 655
}
function b186(p0) {
 p0 = p0 | 0;
 nullFunc_vi(860); //@line 652
}
function b185(p0) {
 p0 = p0 | 0;
 nullFunc_vi(859); //@line 649
}
function b184(p0) {
 p0 = p0 | 0;
 nullFunc_vi(858); //@line 646
}
function b183(p0) {
 p0 = p0 | 0;
 nullFunc_vi(857); //@line 643
}
function b182(p0) {
 p0 = p0 | 0;
 nullFunc_vi(856); //@line 640
}
function b181(p0) {
 p0 = p0 | 0;
 nullFunc_vi(855); //@line 637
}
function b180(p0) {
 p0 = p0 | 0;
 nullFunc_vi(854); //@line 634
}
function b179(p0) {
 p0 = p0 | 0;
 nullFunc_vi(853); //@line 631
}
function b178(p0) {
 p0 = p0 | 0;
 nullFunc_vi(852); //@line 628
}
function b177(p0) {
 p0 = p0 | 0;
 nullFunc_vi(851); //@line 625
}
function b176(p0) {
 p0 = p0 | 0;
 nullFunc_vi(850); //@line 622
}
function b175(p0) {
 p0 = p0 | 0;
 nullFunc_vi(849); //@line 619
}
function b174(p0) {
 p0 = p0 | 0;
 nullFunc_vi(848); //@line 616
}
function b173(p0) {
 p0 = p0 | 0;
 nullFunc_vi(847); //@line 613
}
function b172(p0) {
 p0 = p0 | 0;
 nullFunc_vi(846); //@line 610
}
function b171(p0) {
 p0 = p0 | 0;
 nullFunc_vi(845); //@line 607
}
function b170(p0) {
 p0 = p0 | 0;
 nullFunc_vi(844); //@line 604
}
function b169(p0) {
 p0 = p0 | 0;
 nullFunc_vi(843); //@line 601
}
function b168(p0) {
 p0 = p0 | 0;
 nullFunc_vi(842); //@line 598
}
function b167(p0) {
 p0 = p0 | 0;
 nullFunc_vi(841); //@line 595
}
function b166(p0) {
 p0 = p0 | 0;
 nullFunc_vi(840); //@line 592
}
function b165(p0) {
 p0 = p0 | 0;
 nullFunc_vi(839); //@line 589
}
function b164(p0) {
 p0 = p0 | 0;
 nullFunc_vi(838); //@line 586
}
function b163(p0) {
 p0 = p0 | 0;
 nullFunc_vi(837); //@line 583
}
function b162(p0) {
 p0 = p0 | 0;
 nullFunc_vi(836); //@line 580
}
function b161(p0) {
 p0 = p0 | 0;
 nullFunc_vi(835); //@line 577
}
function b160(p0) {
 p0 = p0 | 0;
 nullFunc_vi(834); //@line 574
}
function b159(p0) {
 p0 = p0 | 0;
 nullFunc_vi(833); //@line 571
}
function b158(p0) {
 p0 = p0 | 0;
 nullFunc_vi(832); //@line 568
}
function b157(p0) {
 p0 = p0 | 0;
 nullFunc_vi(831); //@line 565
}
function b156(p0) {
 p0 = p0 | 0;
 nullFunc_vi(830); //@line 562
}
function b155(p0) {
 p0 = p0 | 0;
 nullFunc_vi(829); //@line 559
}
function b154(p0) {
 p0 = p0 | 0;
 nullFunc_vi(828); //@line 556
}
function b153(p0) {
 p0 = p0 | 0;
 nullFunc_vi(827); //@line 553
}
function b152(p0) {
 p0 = p0 | 0;
 nullFunc_vi(826); //@line 550
}
function b151(p0) {
 p0 = p0 | 0;
 nullFunc_vi(825); //@line 547
}
function b150(p0) {
 p0 = p0 | 0;
 nullFunc_vi(824); //@line 544
}
function b149(p0) {
 p0 = p0 | 0;
 nullFunc_vi(823); //@line 541
}
function b148(p0) {
 p0 = p0 | 0;
 nullFunc_vi(822); //@line 538
}
function b147(p0) {
 p0 = p0 | 0;
 nullFunc_vi(821); //@line 535
}
function b146(p0) {
 p0 = p0 | 0;
 nullFunc_vi(820); //@line 532
}
function b145(p0) {
 p0 = p0 | 0;
 nullFunc_vi(819); //@line 529
}
function b144(p0) {
 p0 = p0 | 0;
 nullFunc_vi(818); //@line 526
}
function b143(p0) {
 p0 = p0 | 0;
 nullFunc_vi(817); //@line 523
}
function b142(p0) {
 p0 = p0 | 0;
 nullFunc_vi(816); //@line 520
}
function b141(p0) {
 p0 = p0 | 0;
 nullFunc_vi(815); //@line 517
}
function b140(p0) {
 p0 = p0 | 0;
 nullFunc_vi(814); //@line 514
}
function b139(p0) {
 p0 = p0 | 0;
 nullFunc_vi(813); //@line 511
}
function b138(p0) {
 p0 = p0 | 0;
 nullFunc_vi(812); //@line 508
}
function b137(p0) {
 p0 = p0 | 0;
 nullFunc_vi(811); //@line 505
}
function b136(p0) {
 p0 = p0 | 0;
 nullFunc_vi(810); //@line 502
}
function b135(p0) {
 p0 = p0 | 0;
 nullFunc_vi(809); //@line 499
}
function b134(p0) {
 p0 = p0 | 0;
 nullFunc_vi(808); //@line 496
}
function b133(p0) {
 p0 = p0 | 0;
 nullFunc_vi(807); //@line 493
}
function b132(p0) {
 p0 = p0 | 0;
 nullFunc_vi(806); //@line 490
}
function b131(p0) {
 p0 = p0 | 0;
 nullFunc_vi(805); //@line 487
}
function b130(p0) {
 p0 = p0 | 0;
 nullFunc_vi(804); //@line 484
}
function b129(p0) {
 p0 = p0 | 0;
 nullFunc_vi(803); //@line 481
}
function b128(p0) {
 p0 = p0 | 0;
 nullFunc_vi(802); //@line 478
}
function b127(p0) {
 p0 = p0 | 0;
 nullFunc_vi(801); //@line 475
}
function b126(p0) {
 p0 = p0 | 0;
 nullFunc_vi(800); //@line 472
}
function b125(p0) {
 p0 = p0 | 0;
 nullFunc_vi(799); //@line 469
}
function b124(p0) {
 p0 = p0 | 0;
 nullFunc_vi(798); //@line 466
}
function b123(p0) {
 p0 = p0 | 0;
 nullFunc_vi(797); //@line 463
}
function b122(p0) {
 p0 = p0 | 0;
 nullFunc_vi(796); //@line 460
}
function b121(p0) {
 p0 = p0 | 0;
 nullFunc_vi(795); //@line 457
}
function b120(p0) {
 p0 = p0 | 0;
 nullFunc_vi(794); //@line 454
}
function b119(p0) {
 p0 = p0 | 0;
 nullFunc_vi(793); //@line 451
}
function b118(p0) {
 p0 = p0 | 0;
 nullFunc_vi(792); //@line 448
}
function b117(p0) {
 p0 = p0 | 0;
 nullFunc_vi(791); //@line 445
}
function b116(p0) {
 p0 = p0 | 0;
 nullFunc_vi(790); //@line 442
}
function b115(p0) {
 p0 = p0 | 0;
 nullFunc_vi(789); //@line 439
}
function b114(p0) {
 p0 = p0 | 0;
 nullFunc_vi(788); //@line 436
}
function b113(p0) {
 p0 = p0 | 0;
 nullFunc_vi(787); //@line 433
}
function b112(p0) {
 p0 = p0 | 0;
 nullFunc_vi(786); //@line 430
}
function b111(p0) {
 p0 = p0 | 0;
 nullFunc_vi(785); //@line 427
}
function b110(p0) {
 p0 = p0 | 0;
 nullFunc_vi(784); //@line 424
}
function b109(p0) {
 p0 = p0 | 0;
 nullFunc_vi(783); //@line 421
}
function b108(p0) {
 p0 = p0 | 0;
 nullFunc_vi(782); //@line 418
}
function b107(p0) {
 p0 = p0 | 0;
 nullFunc_vi(781); //@line 415
}
function b106(p0) {
 p0 = p0 | 0;
 nullFunc_vi(780); //@line 412
}
function b105(p0) {
 p0 = p0 | 0;
 nullFunc_vi(779); //@line 409
}
function b104(p0) {
 p0 = p0 | 0;
 nullFunc_vi(778); //@line 406
}
function b103(p0) {
 p0 = p0 | 0;
 nullFunc_vi(777); //@line 403
}
function b102(p0) {
 p0 = p0 | 0;
 nullFunc_vi(776); //@line 400
}
function b101(p0) {
 p0 = p0 | 0;
 nullFunc_vi(775); //@line 397
}
function b100(p0) {
 p0 = p0 | 0;
 nullFunc_vi(774); //@line 394
}
function b99(p0) {
 p0 = p0 | 0;
 nullFunc_vi(773); //@line 391
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_vi(772); //@line 388
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_vi(771); //@line 385
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_vi(770); //@line 382
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_vi(769); //@line 379
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_vi(768); //@line 376
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_vi(767); //@line 373
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(766); //@line 370
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(765); //@line 367
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(764); //@line 364
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(763); //@line 361
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(762); //@line 358
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(761); //@line 355
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(760); //@line 352
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(759); //@line 349
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(758); //@line 346
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(757); //@line 343
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(756); //@line 340
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(755); //@line 337
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(754); //@line 334
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(753); //@line 331
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(752); //@line 328
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(751); //@line 325
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(750); //@line 322
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(749); //@line 319
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(748); //@line 316
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(747); //@line 313
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(746); //@line 310
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(745); //@line 307
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(744); //@line 304
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(743); //@line 301
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(742); //@line 298
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(741); //@line 295
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(740); //@line 292
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(739); //@line 289
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(738); //@line 286
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(737); //@line 283
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_vi(736); //@line 280
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_vi(735); //@line 277
}
function b60(p0) {
 p0 = p0 | 0;
 nullFunc_vi(734); //@line 274
}
function b59(p0) {
 p0 = p0 | 0;
 nullFunc_vi(733); //@line 271
}
function b58(p0) {
 p0 = p0 | 0;
 nullFunc_vi(732); //@line 268
}
function b57(p0) {
 p0 = p0 | 0;
 nullFunc_vi(731); //@line 265
}
function b56(p0) {
 p0 = p0 | 0;
 nullFunc_vi(730); //@line 262
}
function b55(p0) {
 p0 = p0 | 0;
 nullFunc_vi(729); //@line 259
}
function b54(p0) {
 p0 = p0 | 0;
 nullFunc_vi(728); //@line 256
}
function b53(p0) {
 p0 = p0 | 0;
 nullFunc_vi(727); //@line 253
}
function _sleep_manager_unlock_deep_sleep_internal() {
 return;
}
function _us_ticker_set_interrupt($0) {
 $0 = $0 | 0;
 return;
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _initialize__async_cb_61($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function b52(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 250
}
function _sleep_manager_lock_deep_sleep_internal() {
 return;
}
function _us_ticker_get_info() {
 return 10236; //@line 7107
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_tracef__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _get_us_ticker_data() {
 return 10180; //@line 6259
}
function ___errno_location() {
 return 24436; //@line 11345
}
function __ZSt9terminatev__async_cb_374($0) {
 $0 = $0 | 0;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _pthread_self() {
 return 10528; //@line 11398
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _core_util_critical_section_exit() {
 return;
}
function _us_ticker_read() {
 return 0; //@line 6898
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function _us_ticker_disable_interrupt() {
 return;
}
function _us_ticker_clear_interrupt() {
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function _us_ticker_fire_interrupt() {
 return;
}
function b50() {
 nullFunc_v(15); //@line 247
}
function b49() {
 nullFunc_v(14); //@line 244
}
function b48() {
 nullFunc_v(13); //@line 241
}
function b47() {
 nullFunc_v(12); //@line 238
}
function b46() {
 nullFunc_v(11); //@line 235
}
function b45() {
 nullFunc_v(10); //@line 232
}
function b44() {
 nullFunc_v(9); //@line 229
}
function b43() {
 nullFunc_v(0); //@line 223
}
function _us_ticker_init() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1,_ccm_ctx_alloc,_gcm_ctx_alloc,_aes_ctx_alloc,_us_ticker_read,_us_ticker_get_info,b2,b3];
var FUNCTION_TABLE_ii = [b5,__ZN16SX1276_LoRaRadio6randomEv,__ZN16SX1276_LoRaRadio10get_statusEv,__ZN16LoRaWANInterface7connectEv,__ZN16LoRaWANInterface10disconnectEv,__ZN16LoRaWANInterface22add_link_check_requestEv,__ZN16LoRaWANInterface24enable_adaptive_datarateEv,__ZN16LoRaWANInterface25disable_adaptive_datarateEv,__ZN16LoRaWANInterface19remove_channel_planEv,___stdio_close,__ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE,b6,b7,b8,b9,b10];
var FUNCTION_TABLE_iii = [b12,__ZN16SX1276_LoRaRadio18check_rf_frequencyEj,__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE,__ZN16LoRaWANInterface7connectERK15lorawan_connect,__ZN16LoRaWANInterface12set_datarateEh,__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh,__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan,__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan,__ZN16LoRaWANInterface14remove_channelEh,__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t,__ZN16LoRaWANInterface16set_device_classE14device_class_t,__ZN7LoRaPHY9rx_configEP18rx_config_params_t,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s,__ZN7LoRaPHY16get_alternate_DREh,__ZN7LoRaPHY14remove_channelEh,b13];
var FUNCTION_TABLE_iiii = [b15,__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t,__ZN7LoRaPHY25accept_tx_param_setup_reqEhh,__ZN7LoRaPHY18dl_channel_requestEhj,__ZN7LoRaPHY11add_channelEPK16channel_params_th,__ZN7LoRaPHY15apply_DR_offsetEaa,__ZNK7LoRaPHY25verify_frequency_for_bandEjh,_ccm_aes_setkey_wrap,_gcm_aes_setkey_wrap,_aes_setkey_enc_wrap,_aes_setkey_dec_wrap,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_get_pkcs_padding,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26
,b27,b28,b29];
var FUNCTION_TABLE_iiiii = [b31,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj,_aes_crypt_ecb_wrap,b32];
var FUNCTION_TABLE_iiiiii = [b34,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj,__ZN16LoRaWANInterface4sendEhPKhti,__ZN16LoRaWANInterface7receiveEhPhti,__ZN16LoRaWANInterface7receiveEPhtRhRi,__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_,b35,b36];
var FUNCTION_TABLE_iiiiiii = [b38,__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_,_aes_crypt_cbc_wrap,b39];
var FUNCTION_TABLE_iiiiiiii = [b41,_aes_crypt_ctr_wrap];
var FUNCTION_TABLE_v = [b43,___cxa_pure_virtual__wrapper,_us_ticker_init,_us_ticker_disable_interrupt,_us_ticker_clear_interrupt,_us_ticker_fire_interrupt,__ZL25default_terminate_handlerv,__ZL12send_messagev,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b44,b45,b46,b47,b48,b49,b50];
var FUNCTION_TABLE_vi = [b52,__ZN16SX1276_LoRaRadio11radio_resetEv,__ZN16SX1276_LoRaRadio5sleepEv,__ZN16SX1276_LoRaRadio7standbyEv,__ZN16SX1276_LoRaRadio9start_cadEv,__ZN16SX1276_LoRaRadio4lockEv,__ZN16SX1276_LoRaRadio6unlockEv,__ZN16SX1276_LoRaRadioD2Ev,__ZN16SX1276_LoRaRadioD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv,__ZN4mbed11InterruptInD2Ev,__ZN4mbed11InterruptInD0Ev,__ZN4mbed7TimeoutD2Ev,__ZN4mbed7TimeoutD0Ev,__ZN4mbed7Timeout7handlerEv,__ZN4mbed10TimerEventD2Ev,__ZN4mbed10TimerEventD0Ev,_mbed_trace_default_print,__ZN16LoRaWANInterface25remove_link_check_requestEv,__ZN16LoRaWANInterfaceD2Ev,__ZN16LoRaWANInterfaceD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPv,__ZN4mbed8CallbackIFvPKhtsaEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPv,__ZN4mbed8CallbackIFvbEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPv,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv,__ZN7LoRaPHYD2Ev
,__ZN7LoRaPHYD0Ev,__ZN7LoRaPHY24restore_default_channelsEv,__ZN12LoRaPHYEU868D2Ev,__ZN12LoRaPHYEU868D0Ev,_ccm_ctx_free,_gcm_ctx_free,_aes_ctx_free,_us_ticker_set_interrupt,__ZN4mbed6TickerD2Ev,__ZN4mbed6TickerD0Ev,__ZN4mbed6Ticker7handlerEv,__ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv,__ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb,__ZN16SX1276_LoRaRadio4sendEPhh__async_cb,__ZN16SX1276_LoRaRadio11rx_done_irqEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_311,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_312,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_313,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_314,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_315
,__ZN16SX1276_LoRaRadio6randomEv__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_157,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_153,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_154,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_156,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_155,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_152,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_297,__ZN16SX1276_LoRaRadioD2Ev__async_cb,__ZN16SX1276_LoRaRadioD2Ev__async_cb_85,__ZN16SX1276_LoRaRadioD2Ev__async_cb_79,__ZN16SX1276_LoRaRadioD2Ev__async_cb_84,__ZN16SX1276_LoRaRadioD2Ev__async_cb_80,__ZN16SX1276_LoRaRadioD2Ev__async_cb_83,__ZN16SX1276_LoRaRadioD2Ev__async_cb_81,__ZN16SX1276_LoRaRadioD2Ev__async_cb_82,__ZN16SX1276_LoRaRadioD2Ev__async_cb_91,__ZN16SX1276_LoRaRadioD2Ev__async_cb_90,__ZN16SX1276_LoRaRadioD2Ev__async_cb_89,__ZN16SX1276_LoRaRadioD2Ev__async_cb_88,__ZN16SX1276_LoRaRadioD2Ev__async_cb_87,__ZN16SX1276_LoRaRadioD2Ev__async_cb_86,__ZN16SX1276_LoRaRadioD0Ev__async_cb,__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_369,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_370
,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_371,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_372,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb,__ZN16SX1276_LoRaRadio11tx_done_irqEv,__ZN16SX1276_LoRaRadio8transmitEj__async_cb,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_390,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_391,__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_275,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_274,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_273,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb,__ZN4mbed11InterruptInD2Ev__async_cb,__ZN4mbed11InterruptInD2Ev__async_cb_344,__ZN4mbed11InterruptInD0Ev__async_cb,__ZN4mbed11InterruptInD0Ev__async_cb_320,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_201,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_224,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_225,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_226,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_227,__ZN4mbed7TimeoutD2Ev__async_cb,__ZN4mbed7TimeoutD2Ev__async_cb_259,__ZN4mbed7TimeoutD0Ev__async_cb,__ZN4mbed7TimeoutD0Ev__async_cb_161,__ZN4mbed7Timeout7handlerEv__async_cb,__ZN4mbed7Timeout7handlerEv__async_cb_176,__ZN4mbed7Timeout7handlerEv__async_cb_174
,__ZN4mbed7Timeout7handlerEv__async_cb_175,__ZN4mbed5TimerC2Ev__async_cb,__ZN4mbed5Timer5startEv__async_cb,__ZN4mbed5Timer7read_msEv__async_cb,__ZN4mbed10TimerEventD2Ev__async_cb,__ZN4mbed10TimerEvent3irqEj,__ZN4mbed10TimerEventC2Ev__async_cb,__ZN4mbed10TimerEvent3irqEj__async_cb,__ZN6events10EventQueue8dispatchEi__async_cb,__ZN6events10EventQueue6cancelEi__async_cb,_equeue_alloc__async_cb,_equeue_dealloc__async_cb,_equeue_post__async_cb,_equeue_enqueue__async_cb,_equeue_cancel__async_cb,_equeue_dispatch__async_cb,_equeue_dispatch__async_cb_281,_equeue_dispatch__async_cb_279,_equeue_dispatch__async_cb_280,_equeue_dispatch__async_cb_282,_mbed_trace_default_print__async_cb,_mbed_tracef__async_cb,_mbed_vtracef__async_cb,_mbed_vtracef__async_cb_42,_mbed_vtracef__async_cb_32,_mbed_vtracef__async_cb_33,_mbed_vtracef__async_cb_34,_mbed_vtracef__async_cb_41,_mbed_vtracef__async_cb_35,_mbed_vtracef__async_cb_40
,_mbed_vtracef__async_cb_36,_mbed_vtracef__async_cb_37,_mbed_vtracef__async_cb_38,_mbed_vtracef__async_cb_39,__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE__async_cb,__ZN16LoRaWANInterface7connectEv__async_cb,__ZN16LoRaWANInterface7connectERK15lorawan_connect__async_cb,__ZN16LoRaWANInterface10disconnectEv__async_cb,__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan__async_cb,__ZN16LoRaWANInterface19remove_channel_planEv__async_cb,__ZN16LoRaWANInterface14remove_channelEh__async_cb,__ZN16LoRaWANInterface4sendEhPKhti__async_cb,__ZN16LoRaWANInterface7receiveEhPhti__async_cb,__ZN16LoRaWANInterface7receiveEPhtRhRi__async_cb,__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t__async_cb,__ZN16LoRaWANInterface16set_device_classE14device_class_t__async_cb,__ZN16LoRaWANInterfaceD2Ev__async_cb,__ZN16LoRaWANInterfaceD0Ev__async_cb,__ZN12LoRaWANStackD2Ev__async_cb,__ZN12LoRaWANStackD2Ev__async_cb_148,__ZN12LoRaWANStackD2Ev__async_cb_149,__ZN12LoRaWANStackD2Ev__async_cb_151,__ZN12LoRaWANStackD2Ev__async_cb_150,__ZN12radio_eventsD2Ev__async_cb,__ZN12radio_eventsD2Ev__async_cb_165,__ZN12radio_eventsD2Ev__async_cb_166,__ZN12radio_eventsD2Ev__async_cb_167,__ZN12radio_eventsD2Ev__async_cb_168,__ZN12radio_eventsD2Ev__async_cb_169,__ZN12radio_eventsD2Ev__async_cb_170
,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb,__ZN12LoRaWANStack20tx_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_131,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_132,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_133,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_134,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_135,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_136,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_137,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_138,__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_139,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_140,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_141,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_142,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_143,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_144,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_145,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_146,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_147,__ZN12LoRaWANStack20process_transmissionEv,__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb_123,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_125,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_126,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_92
,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_93,__ZN12LoRaWANStack28process_transmission_timeoutEv,__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb_96,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_1,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_2,__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb,__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_52,__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_51,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_412,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_417,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_413,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_416,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_414,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_415,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb_377,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb,__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb__async_cb,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_366,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_365,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_367,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_364,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_368
,__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_319,__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_318,__ZN12LoRaWANStack26process_status_check_stateEv__async_cb,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_307,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_300,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_310,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_301,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_306,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_302,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_309,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_303,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_305,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_304,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_308,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_328,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_321,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_331,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_322,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_327,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_323,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_330,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_324,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_326,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_325,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_329,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_289,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_294
,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_290,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_293,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_291,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_292,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_288,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb,__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb_272,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_278,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_277,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_276,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_241,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa__async_cb,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_197,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_200,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_199,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_198,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_196,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_177,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_182
,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_178,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_181,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_179,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_180,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb_124,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_120,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_118,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_122,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_119,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_121,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_98,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_97,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_99,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_72,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_77,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_73,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_76,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_74,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_75,__ZN12LoRaWANStack23process_connected_stateEv__async_cb,__ZN12LoRaWANStack23process_connected_stateEv__async_cb_56
,__ZN12LoRaWANStack23process_connected_stateEv__async_cb_55,__ZN12LoRaWANStack23process_connected_stateEv__async_cb_57,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_419,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv__async_cb,__ZN12LoRaWANStack20process_transmissionEv__async_cb,__ZN12LoRaWANStack20process_transmissionEv__async_cb_376,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb,__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_358,__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb,__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_357,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_347,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_346,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_348,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_345,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_349,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_335,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_336,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_337,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_338,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_339,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_340,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_342,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_341,__ZN12LoRaWANStack7connectEv__async_cb,__ZN12LoRaWANStack7connectERK15lorawan_connect__async_cb,__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb
,__ZN12LoRaWANStack16remove_a_channelEh__async_cb,__ZN12LoRaWANStack17drop_channel_listEv__async_cb,__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb_283,__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb,__ZN12LoRaWANStack9handle_rxEPhtRhRib__async_cb,__ZN12LoRaWANStack8shutdownEv__async_cb,__ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb,__ZN7LoRaMacD2Ev__async_cb,__ZN7LoRaMacD2Ev__async_cb_350,__ZN7LoRaMacD2Ev__async_cb_351,__ZN7LoRaMacD2Ev__async_cb_352,__ZN7LoRaMacD2Ev__async_cb_353,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_23,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_25,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_24,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_22,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_21,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_20,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb,__ZN7LoRaMac15open_rx2_windowEv__async_cb_54,__ZN7LoRaMac15open_rx2_windowEv__async_cb_53,__ZN7LoRaMac15open_rx2_windowEv__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_94,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_95,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_116,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_115,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_114,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb
,__ZN7LoRaMac21handle_retransmissionEv__async_cb,__ZN7LoRaMac21handle_retransmissionEv__async_cb_130,__ZN7LoRaMac21handle_retransmissionEv__async_cb_129,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_160,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_158,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_159,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb,__ZN7LoRaMac11schedule_txEv__async_cb,__ZN7LoRaMac11schedule_txEv__async_cb_173,__ZN7LoRaMac11schedule_txEv__async_cb_172,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_195,__ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1___async_cb,__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_223,__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_233,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_240,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_232,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_239,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_231,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_238,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_230,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_237,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_229,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_228,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_236,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_235,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_234
,__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb,__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_243,__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_242,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_256,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_255,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_254,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_252,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_250,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_251,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_253,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_257,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_249,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_271,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_270,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_269,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_268,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_267,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_266,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_284,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_287,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_286,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_285,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb,__ZN7LoRaMac24continue_joining_processEv__async_cb,__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb,__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb_296,__ZN7LoRaMac15open_rx1_windowEv__async_cb_334,__ZN7LoRaMac15open_rx1_windowEv__async_cb_332
,__ZN7LoRaMac15open_rx1_windowEv__async_cb_333,__ZN7LoRaMac15open_rx1_windowEv__async_cb,__ZN7LoRaMac18prepare_ongoing_txEhPKhthh__async_cb,__ZN7LoRaMac24get_max_possible_tx_sizeEh__async_cb,__ZN7LoRaMac15send_ongoing_txEv__async_cb,__ZN7LoRaMac15send_ongoing_txEv__async_cb_418,__ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_405,__ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_404,__ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_407,__ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_406,__ZN7LoRaMac16set_device_classERK14device_class_t__async_cb,__ZN7LoRaMac4joinEb__async_cb,__ZN7LoRaMac4joinEb__async_cb_30,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_107,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_109,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_110,__ZN7LoRaMac23on_backoff_timer_expiryEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_106,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb,__ZN7LoRaMac15open_rx1_windowEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_105,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_100,__ZN7LoRaMac15open_rx2_windowEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_104,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_101,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_103,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_102,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_108,__ZN7LoRaMac10disconnectEv__async_cb_71,__ZN7LoRaMac10disconnectEv__async_cb_70
,__ZN7LoRaMac10disconnectEv__async_cb_69,__ZN7LoRaMac10disconnectEv__async_cb_68,__ZN7LoRaMac10disconnectEv__async_cb,__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb,__ZN7LoRaMac19remove_channel_planEv__async_cb,__ZN7LoRaMac21remove_single_channelEh__async_cb,__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_258,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_247,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_359,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_360,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_361,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_362,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_363,__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb,__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_410,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_397,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_396,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_394,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_395,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_398,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_28,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_27,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_26,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_29
,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_127,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_128,__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb,__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_162,__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_163,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_183,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_184,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_185,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_186,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_187,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_188,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_189,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_190,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_260,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_261,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_262,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_263,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_264,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_265,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb,__ZN7LoRaPHY18dl_channel_requestEhj__async_cb,__ZN7LoRaPHY18dl_channel_requestEhj__async_cb_295,__ZN7LoRaPHY11add_channelEPK16channel_params_th__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_316,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_317,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb
,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_408,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_409,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_392,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_393,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_384,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_385,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_111,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_112,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_113,__ZN7LoRaPHY13get_radio_rngEv__async_cb,__ZN7LoRaPHY13get_radio_rngEv__async_cb_66,__ZN7LoRaPHY13get_radio_rngEv__async_cb_67,__ZN7LoRaPHY11handle_sendEPhh__async_cb,__ZN7LoRaPHY11handle_sendEPhh__async_cb_64,__ZN7LoRaPHY11handle_sendEPhh__async_cb_65,__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_387,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_402,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_399,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_401,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_400,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_403,__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb,_mbedtls_ccm_setkey__async_cb_50,_mbedtls_ccm_setkey__async_cb_49
,_mbedtls_ccm_setkey__async_cb,_mbedtls_ccm_free__async_cb,_mbedtls_cipher_free__async_cb,_mbedtls_cipher_setup__async_cb,_mbedtls_cipher_setkey__async_cb,_mbedtls_cipher_setkey__async_cb_171,_mbedtls_cipher_update__async_cb,_mbedtls_cipher_update__async_cb_194,_mbedtls_cipher_update__async_cb_191,_mbedtls_cipher_update__async_cb_192,_mbedtls_cipher_update__async_cb_193,_ccm_aes_setkey_wrap__async_cb,_ccm_ctx_free__async_cb,_gcm_aes_setkey_wrap__async_cb,_gcm_ctx_free__async_cb,_mbedtls_cipher_cmac_starts__async_cb,_mbedtls_cipher_cmac_update__async_cb_383,_mbedtls_cipher_cmac_update__async_cb_382,_mbedtls_cipher_cmac_update__async_cb,_mbedtls_cipher_cmac_finish__async_cb_421,_mbedtls_cipher_cmac_finish__async_cb,_mbedtls_gcm_setkey__async_cb_356,_mbedtls_gcm_setkey__async_cb_355,_mbedtls_gcm_setkey__async_cb_354,_mbedtls_gcm_setkey__async_cb,_mbedtls_gcm_update__async_cb,_mbedtls_gcm_free__async_cb,_ticker_set_handler__async_cb,_initialize__async_cb,_initialize__async_cb_58
,_initialize__async_cb_63,_initialize__async_cb_62,_initialize__async_cb_59,_initialize__async_cb_60,_initialize__async_cb_61,_schedule_interrupt__async_cb,_schedule_interrupt__async_cb_43,_schedule_interrupt__async_cb_44,_schedule_interrupt__async_cb_45,_schedule_interrupt__async_cb_46,_schedule_interrupt__async_cb_47,_schedule_interrupt__async_cb_48,_ticker_remove_event__async_cb,_ticker_read_us__async_cb_78,_ticker_read_us__async_cb,_mbed_assert_internal__async_cb,_mbed_die__async_cb_216,_mbed_die__async_cb_215,_mbed_die__async_cb_214,_mbed_die__async_cb_213,_mbed_die__async_cb_212,_mbed_die__async_cb_211,_mbed_die__async_cb_210,_mbed_die__async_cb_209,_mbed_die__async_cb_208,_mbed_die__async_cb_207,_mbed_die__async_cb_206,_mbed_die__async_cb_205,_mbed_die__async_cb_204,_mbed_die__async_cb_203
,_mbed_die__async_cb_202,_mbed_die__async_cb,_mbed_error_printf__async_cb,_mbed_error_vfprintf__async_cb,_mbed_error_vfprintf__async_cb_246,_mbed_error_vfprintf__async_cb_245,_handle_interrupt_in__async_cb,_serial_putc__async_cb_299,_serial_putc__async_cb,__ZN4mbed6TickerD2Ev__async_cb,__ZN4mbed6TickerD2Ev__async_cb_420,__ZN4mbed6TickerD0Ev__async_cb,__ZN4mbed6TickerD0Ev__async_cb_381,__ZN4mbed6Ticker7handlerEv__async_cb,_invoke_ticker__async_cb_373,_invoke_ticker__async_cb,_wait_ms__async_cb,__GLOBAL__sub_I_main_cpp__async_cb,_main__async_cb_11,_main__async_cb_10,_main__async_cb_9,_main__async_cb_15,__ZN6events5EventIFvvEE10event_dtorIPS1_EEvPNS2_5eventE,_main__async_cb_14,_main__async_cb,_main__async_cb_3,_main__async_cb_13,__ZL18lora_event_handler11lora_events,_main__async_cb_4,_main__async_cb_5
,_main__async_cb_6,_main__async_cb_8,_main__async_cb_7,_main__async_cb_12,__ZL12send_messagev__async_cb,__ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE__async_cb_248,__ZN6events10EventQueue13function_dtorINS0_9context00IPFvvEEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context00IPFvvEEEEEvPv,__ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE__async_cb,__ZL18lora_event_handler11lora_events__async_cb_221,__ZL18lora_event_handler11lora_events__async_cb_220,__ZL18lora_event_handler11lora_events__async_cb_219,__ZL18lora_event_handler11lora_events__async_cb_218,__ZL18lora_event_handler11lora_events__async_cb,__ZL18lora_event_handler11lora_events__async_cb_217,__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb,__ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv__async_cb_164,__ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv__async_cb_343,__ZN6events10EventQueue13function_callINS0_9context00IPFvvEEEEEvPv__async_cb,_putc__async_cb_31,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_379,_fflush__async_cb_378,_fflush__async_cb_380,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_389
,_vfprintf__async_cb,_snprintf__async_cb,_vsnprintf__async_cb,_sprintf__async_cb,_vsprintf__async_cb,_printf__async_cb,_putchar__async_cb,_fputc__async_cb_375,_fputc__async_cb,_puts__async_cb,__ZL25default_terminate_handlerv__async_cb,__ZL25default_terminate_handlerv__async_cb_388,_abort_message__async_cb,_abort_message__async_cb_117,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_298,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_222,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_244,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_411,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_19,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_18,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_17,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_16
,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_386,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b53,b54,b55,b56,b57,b58,b59,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74
,b75,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104
,b105,b106,b107,b108,b109,b110,b111,b112,b113,b114,b115,b116,b117,b118,b119,b120,b121,b122,b123,b124,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134
,b135,b136,b137,b138,b139,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,b153,b154,b155,b156,b157,b158,b159,b160,b161,b162,b163,b164
,b165,b166,b167,b168,b169,b170,b171,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181,b182,b183,b184,b185,b186,b187,b188,b189,b190,b191,b192,b193,b194
,b195,b196,b197,b198,b199,b200,b201,b202,b203,b204,b205,b206,b207,b208,b209,b210,b211,b212,b213,b214,b215,b216,b217,b218,b219,b220,b221,b222,b223,b224
,b225,b226,b227,b228,b229,b230,b231,b232,b233,b234,b235,b236,b237,b238,b239,b240,b241,b242,b243,b244,b245,b246,b247,b248,b249,b250,b251,b252,b253,b254
,b255,b256,b257,b258,b259,b260,b261,b262,b263,b264,b265,b266,b267,b268,b269,b270,b271,b272,b273,b274,b275,b276,b277,b278,b279,b280,b281,b282,b283,b284
,b285,b286,b287,b288,b289,b290,b291,b292,b293,b294,b295,b296,b297,b298,b299,b300,b301,b302,b303,b304,b305,b306,b307,b308,b309,b310,b311,b312,b313,b314
,b315,b316,b317,b318,b319,b320,b321,b322,b323,b324,b325,b326,b327,b328,b329,b330,b331,b332,b333,b334,b335,b336,b337,b338,b339,b340,b341,b342,b343,b344
,b345,b346,b347,b348,b349];
var FUNCTION_TABLE_vii = [b351,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events,__ZN16SX1276_LoRaRadio7receiveEj,__ZN16SX1276_LoRaRadio11set_channelEj,__ZN16SX1276_LoRaRadio18set_public_networkEb,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvPKhtsaEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPvPKv,__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb,__ZN4mbed8CallbackIFvbEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveIN6events5EventIS1_EEEEvPvPKv,__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_,__ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event,__ZN12LoRaWANStack25process_reception_timeoutEb];
var FUNCTION_TABLE_viii = [b353,__ZN16SX1276_LoRaRadio4sendEPhh,__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh,__ZN7LoRaPHY13apply_cf_listEPKhh,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj,_add_pkcs_padding,b354,b355];
var FUNCTION_TABLE_viiii = [b357,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat,__ZN7LoRaPHY16set_last_tx_doneEhbj,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b358,b359];
var FUNCTION_TABLE_viiiii = [b361,__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa,__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa,__ZN12LoRaWANStack17process_receptionEPKhtsa];
var FUNCTION_TABLE_viiiiii = [b363,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
var FUNCTION_TABLE_viiiiiiiiiiiiii = [b365,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b367,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb];

  return { __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _handle_lora_downlink: _handle_lora_downlink, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__handle_lora_downlink = asm["_handle_lora_downlink"]; asm["_handle_lora_downlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_lora_downlink.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _handle_lora_downlink = Module["_handle_lora_downlink"] = asm["_handle_lora_downlink"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=lorawan.js.map