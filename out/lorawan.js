// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendFsk($0, $1, $2, $3, $4, $5); },
 function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendLoRa($0, $1, $2, $3, $4, $5); },
 function() { return Math.random() * 0x8000000 | 0; },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function($0) { window.MbedJSHal.lora.init($0); },
 function($0, $1) { MbedJSHal.gpio.init_in($0, $1, 3); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); },
 function($0, $1, $2) { MbedJSHal.gpio.init_out($0, $1, $2); },
 function($0, $1, $2, $3, $4) { MbedJSHal.gpio.init_inout($0, $1, $2, $3, $4); },
 function($0, $1) { MbedJSHal.gpio.irq_init($0, $1); },
 function($0, $1) { MbedJSHal.gpio.irq_free($0); },
 function($0, $1, $2) { MbedJSHal.gpio.irq_set($0, $1, $2); },
 function($0) { window.MbedJSHal.timers.ticker_detach($0); },
 function($0, $1) { window.MbedJSHal.timers.ticker_setup($0, $1); },
 function($0, $1, $2) { window.MbedJSHal.sht31.init($0, $1, $2); },
 function($0) { return window.MbedJSHal.sht31.read_temperature($0); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiiiiii(code, a0, a1, a2, a3, a4, a5) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 24992;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } });


memoryInitializer = "lorawan.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



   

  var _llvm_ceil_f64=Math_ceil;

  var _llvm_floor_f64=Math_floor;

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

  function _pthread_cond_init() { return 0; }

  function _pthread_cond_signal() { return 0; }

  function _pthread_cond_timedwait() { return 0; }

  function _pthread_cond_wait() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_i = ["0", "_ccm_ctx_alloc", "_gcm_ctx_alloc", "_aes_ctx_alloc", "_us_ticker_read", "_us_ticker_get_info", "0", "0"];
var debug_table_ii = ["0", "__ZN16SX1276_LoRaRadio6randomEv", "__ZN16SX1276_LoRaRadio10get_statusEv", "__ZN16LoRaWANInterface7connectEv", "__ZN16LoRaWANInterface10disconnectEv", "__ZN16LoRaWANInterface22add_link_check_requestEv", "__ZN16LoRaWANInterface24enable_adaptive_datarateEv", "__ZN16LoRaWANInterface25disable_adaptive_datarateEv", "__ZN16LoRaWANInterface19remove_channel_planEv", "___stdio_close", "0", "0", "0", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN16SX1276_LoRaRadio18check_rf_frequencyEj", "__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE", "__ZN16LoRaWANInterface7connectERK15lorawan_connect", "__ZN16LoRaWANInterface12set_datarateEh", "__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh", "__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan", "__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan", "__ZN16LoRaWANInterface14remove_channelEh", "__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t", "__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s", "__ZN7LoRaPHY25accept_tx_param_setup_reqEP20tx_param_setup_req_s", "__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s", "__ZN7LoRaPHY16get_alternate_DREh", "__ZN7LoRaPHY14remove_channelEh", "__ZN7LoRaPHY16verify_frequencyEj", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiii = ["0", "__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa", "__ZN7LoRaPHY11add_channelEP16channel_params_th", "__ZN7LoRaPHY15apply_DR_offsetEaa", "_ccm_aes_setkey_wrap", "_gcm_aes_setkey_wrap", "_aes_setkey_enc_wrap", "_aes_setkey_dec_wrap", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "_get_pkcs_padding", "0"];
var debug_table_iiiii = ["0", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj", "_aes_crypt_ecb_wrap", "0"];
var debug_table_iiiiii = ["0", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj", "__ZN16LoRaWANInterface4sendEhPKhti", "__ZN16LoRaWANInterface7receiveEhPhti", "__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_", "0", "0", "0"];
var debug_table_iiiiiii = ["0", "__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_", "_aes_crypt_cbc_wrap", "0"];
var debug_table_v = ["0", "___cxa_pure_virtual", "_us_ticker_init", "_us_ticker_disable_interrupt", "_us_ticker_clear_interrupt", "_us_ticker_fire_interrupt", "__ZL25default_terminate_handlerv", "__ZL12send_messagev", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_vi = ["0", "__ZN16SX1276_LoRaRadio11radio_resetEv", "__ZN16SX1276_LoRaRadio5sleepEv", "__ZN16SX1276_LoRaRadio7standbyEv", "__ZN16SX1276_LoRaRadio9start_cadEv", "__ZN16SX1276_LoRaRadio4lockEv", "__ZN16SX1276_LoRaRadio6unlockEv", "__ZN16SX1276_LoRaRadioD2Ev", "__ZN16SX1276_LoRaRadioD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv", "__ZN4mbed11InterruptInD2Ev", "__ZN4mbed11InterruptInD0Ev", "__ZN4mbed7TimeoutD2Ev", "__ZN4mbed7TimeoutD0Ev", "__ZN4mbed7Timeout7handlerEv", "__ZN4mbed10TimerEventD2Ev", "__ZN4mbed10TimerEventD0Ev", "__ZN16LoRaWANInterface25remove_link_check_requestEv", "__ZN16LoRaWANInterfaceD2Ev", "__ZN16LoRaWANInterfaceD0Ev", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv", "__ZN4mbed8CallbackIFvPhtsaEE13function_dtorINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPv", "__ZN7LoRaPHYD2Ev", "__ZN7LoRaPHYD0Ev", "__ZN7LoRaPHY24restore_default_channelsEv", "__ZN12LoRaPHYEU868D2Ev", "__ZN12LoRaPHYEU868D0Ev", "_ccm_ctx_free", "_gcm_ctx_free", "_aes_ctx_free", "_us_ticker_set_interrupt", "__ZN4mbed10TimerEvent3irqEj", "__ZN4mbed6TickerD2Ev", "__ZN4mbed6TickerD0Ev", "__ZN4mbed6Ticker7handlerEv", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb_62", "__ZN16SX1276_LoRaRadio11radio_resetEv__async_cb", "__ZN16SX1276_LoRaRadio5sleepEv__async_cb_155", "__ZN16SX1276_LoRaRadio5sleepEv__async_cb", "__ZN16SX1276_LoRaRadio5sleepEv__async_cb_156", "__ZN16SX1276_LoRaRadio7standbyEv__async_cb_147", "__ZN16SX1276_LoRaRadio7standbyEv__async_cb_146", "__ZN16SX1276_LoRaRadio7standbyEv__async_cb_148", "__ZN16SX1276_LoRaRadio7standbyEv__async_cb", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_120", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_119", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_97", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_96", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_95", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb", "__ZN16SX1276_LoRaRadio4sendEPhh__async_cb", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_222", "__ZN16SX1276_LoRaRadio11rx_done_irqEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_213", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_214", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_215", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_216", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_217", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_221", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_224", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_220", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_219", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_223", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_218", "__ZN16SX1276_LoRaRadio11set_channelEj__async_cb", "__ZN16SX1276_LoRaRadio6randomEv__async_cb", "__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb_304", "__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb", "__ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb_348", "__ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb", "__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb_364", "__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_386", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_385", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_384", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_387", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_383", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_392", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_388", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_389", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_391", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_382", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_390", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_381", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_380", "__ZN16SX1276_LoRaRadio9start_cadEv__async_cb", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_185", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_182", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_184", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_186", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_183", "__ZN16SX1276_LoRaRadioD2Ev__async_cb", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_498", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_492", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_497", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_493", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_496", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_494", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_495", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_504", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_503", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_502", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_501", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_500", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_499", "__ZN16SX1276_LoRaRadioD0Ev__async_cb", "__ZN16SX1276_LoRaRadio18set_low_power_modeEv__async_cb", "__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb_48", "__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_75", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_71", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_72", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_73", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_74", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_13", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_12", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_14", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_11", "__ZN16SX1276_LoRaRadio11tx_done_irqEv", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_9", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_10", "__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb", "_handle_lora_downlink__async_cb", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_266", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_265", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_264", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb_235", "__ZN4mbed11InterruptInD0Ev__async_cb", "__ZN4mbed11InterruptInD0Ev__async_cb_93", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_149", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_343", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_344", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_345", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_346", "__ZN4mbed7TimeoutD2Ev__async_cb", "__ZN4mbed7TimeoutD2Ev__async_cb_349", "__ZN4mbed7TimeoutD0Ev__async_cb", "__ZN4mbed7TimeoutD0Ev__async_cb_239", "__ZN4mbed7Timeout7handlerEv__async_cb_236", "__ZN4mbed7Timeout7handlerEv__async_cb", "__ZN4mbed5TimerC2Ev__async_cb", "__ZN4mbed5Timer5startEv__async_cb", "__ZN4mbed5Timer7read_msEv__async_cb", "__ZN4mbed10TimerEventD2Ev__async_cb", "__ZN4mbed10TimerEventC2Ev__async_cb", "__ZN4mbed10TimerEvent3irqEj__async_cb", "__ZN6events10EventQueue8dispatchEi__async_cb", "__ZN6events10EventQueue6cancelEi__async_cb", "_equeue_post__async_cb", "_equeue_enqueue__async_cb", "_equeue_cancel__async_cb", "_equeue_dispatch__async_cb", "_equeue_dispatch__async_cb_106", "_equeue_dispatch__async_cb_104", "_equeue_dispatch__async_cb_105", "_equeue_dispatch__async_cb_107", "__ZN16LoRaWANInterface7connectEv__async_cb", "__ZN16LoRaWANInterface4sendEhPKhti__async_cb", "__ZN16LoRaWANInterface4sendEhPKhti__async_cb_181", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_378", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_379", "__ZN12LoRaWANStackC2Ev__async_cb", "__ZN12LoRaWANStackC2Ev__async_cb_352", "__ZN12LoRaWANStackC2Ev__async_cb_353", "__ZN12LoRaWANStackC2Ev__async_cb_354", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_334", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_341", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_333", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_332", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_337", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_327", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_340", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_328", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_336", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_329", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_339", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_330", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_335", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_331", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_338", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_297", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_296", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_300", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_293", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_302", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_294", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_299", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_295", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_301", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_298", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_276", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_283", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_280", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_275", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_279", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_274", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_278", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_271", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_282", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_272", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_277", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_273", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_281", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_418", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_427", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_426", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_425", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_433", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_407", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_438", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_428", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_408", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_432", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_409", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_437", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_424", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_423", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_422", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_421", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_420", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_410", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_431", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_411", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_436", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_419", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_417", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_412", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_430", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_413", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_435", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_416", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_414", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_429", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_415", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_434", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_396", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_397", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_400", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_398", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_399", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_76", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_77", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_80", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_78", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_79", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_65", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_20", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_17", "__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_16", "__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_15", "__ZN12LoRaWANStack17send_frame_to_macEv__async_cb", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_201", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_203", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_200", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_199", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_198", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_202", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_197", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_196", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_204", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN12LoRaWANStack17get_lorawan_stackEv__async_cb", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_440", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_439", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_441", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_480", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_481", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_482", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_483", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_484", "__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb", "__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb_487", "__ZN12LoRaWANStack17drop_channel_listEv__async_cb", "__ZN12LoRaWANStack17drop_channel_listEv__async_cb_490", "__ZN12LoRaWANStack16remove_a_channelEh__async_cb", "__ZN12LoRaWANStack16remove_a_channelEh__async_cb_511", "__ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan__async_cb", "__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb", "__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb_238", "__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_247", "__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_248", "__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb", "__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_249", "__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb", "__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb_263", "__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb", "__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb_284", "__ZN12LoRaWANStack22set_link_check_requestEv__async_cb", "__ZN12LoRaWANStack22set_link_check_requestEv__async_cb_347", "__ZN12LoRaWANStack8shutdownEv__async_cb", "__ZN7LoRaMacD2Ev__async_cb_99", "__ZN7LoRaMacD2Ev__async_cb", "__ZN12radio_eventsD2Ev__async_cb", "__ZN12radio_eventsD2Ev__async_cb_113", "__ZN12radio_eventsD2Ev__async_cb_114", "__ZN12radio_eventsD2Ev__async_cb_115", "__ZN12radio_eventsD2Ev__async_cb_116", "__ZN12radio_eventsD2Ev__async_cb_117", "__ZN12radio_eventsD2Ev__async_cb_118", "__ZN14lorawan_timersD2Ev__async_cb", "__ZN14lorawan_timersD2Ev__async_cb_142", "__ZN14lorawan_timersD2Ev__async_cb_143", "__ZN14lorawan_timersD2Ev__async_cb_144", "__ZN14lorawan_timersD2Ev__async_cb_145", "__ZN7LoRaMac16on_radio_tx_doneEv", "__ZN7LoRaMac14handle_tx_doneEv__async_cb", "__ZN7LoRaMac14handle_tx_doneEv__async_cb_403", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_471", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_476", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_470", "__ZN7LoRaMac25on_rx_window2_timer_eventEv", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_477", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_478", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_475", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_474", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_473", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_472", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_153", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_152", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_168", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_6", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_8", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_5", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_7", "__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_18", "__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb", "__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_19", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_25", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_38", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_44", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_33", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_36", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_32", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_31", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_35", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_34", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_30", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_29", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_28", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_41", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_24", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_40", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_23", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_39", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_22", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_43", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_42", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_27", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_26", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_37", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_49", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_50", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_53", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_51", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_52", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb_81", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa__async_cb", "__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv", "__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_466", "__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_467", "__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_465", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_491", "__ZN7LoRaMac17on_radio_rx_errorEv", "__ZN7LoRaMac15handle_rx_errorEv__async_cb", "__ZN7LoRaMac15handle_rx_errorEv__async_cb_488", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_512", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_514", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_516", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_513", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_515", "__ZN7LoRaMac19on_radio_rx_timeoutEv", "__ZN7LoRaMac17handle_rx_timeoutEv__async_cb", "__ZN7LoRaMac17handle_rx_timeoutEv__async_cb_510", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_256", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_259", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_261", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_258", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_260", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_257", "__ZN7LoRaMac19on_radio_tx_timeoutEv", "__ZN7LoRaMac17handle_tx_timeoutEv__async_cb", "__ZN7LoRaMac17handle_tx_timeoutEv__async_cb_237", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_267", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_268", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_269", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_270", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv", "__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb", "__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb_262", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_319", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_318", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_326", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_317", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_325", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_315", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_324", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_308", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_323", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_309", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_313", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_314", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_312", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_316", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_322", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_321", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_310", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_320", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_311", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_289", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_292", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_290", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_291", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_288", "__ZN7LoRaMac11schedule_txEv__async_cb", "__ZN7LoRaMac11schedule_txEv__async_cb_365", "__ZN7LoRaMac11schedule_txEv__async_cb_371", "__ZN7LoRaMac11schedule_txEv__async_cb_366", "__ZN7LoRaMac11schedule_txEv__async_cb_367", "__ZN7LoRaMac11schedule_txEv__async_cb_368", "__ZN7LoRaMac11schedule_txEv__async_cb_370", "__ZN7LoRaMac11schedule_txEv__async_cb_373", "__ZN7LoRaMac11schedule_txEv__async_cb_369", "__ZN7LoRaMac11schedule_txEv__async_cb_372", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb_350", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb_351", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_103", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_101", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_102", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb", "__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb", "__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb_94", "__ZN7LoRaMac18handle_ack_timeoutEv__async_cb", "__ZN7LoRaMac18handle_ack_timeoutEv__async_cb_154", "__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb", "__ZN7LoRaMac25on_rx_window1_timer_eventEv", "__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_150", "__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_151", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_122", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_125", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_124", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_121", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_123", "__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb", "__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_194", "__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_195", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_178", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_179", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_180", "__ZN7LoRaMac34handle_mac_state_check_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_177", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb", "__ZN7LoRaMac29handle_delayed_tx_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_176", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_169", "__ZN7LoRaMac22handle_rx1_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_175", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_170", "__ZN7LoRaMac22handle_rx2_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_174", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_171", "__ZN7LoRaMac18handle_ack_timeoutEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_173", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_172", "__ZN7LoRaMac10disconnectEv__async_cb_234", "__ZN7LoRaMac10disconnectEv__async_cb_233", "__ZN7LoRaMac10disconnectEv__async_cb_232", "__ZN7LoRaMac10disconnectEv__async_cb_231", "__ZN7LoRaMac10disconnectEv__async_cb_230", "__ZN7LoRaMac10disconnectEv__async_cb", "__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb_206", "__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb", "__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb", "__ZN7LoRaMac19remove_channel_planEv__async_cb", "__ZN7LoRaMac21remove_single_channelEh__async_cb", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_55", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_56", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_61", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_60", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_58", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_59", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_57", "__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb", "__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_46", "__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_47", "__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t__async_cb", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_67", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_68", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_69", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_70", "__ZN7LoRaMac14handle_tx_doneEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_444", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_445", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_446", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_447", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_448", "__ZN7LoRaMac15handle_rx_errorEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_449", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_450", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_451", "__ZN7LoRaMac17handle_tx_timeoutEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_452", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_453", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_454", "__ZN7LoRaMac17handle_rx_timeoutEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_455", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_456", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_457", "__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_485", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_489", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_226", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_227", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_228", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_229", "__Z11compute_micPKhtS0_jhjPj__async_cb_192", "__Z11compute_micPKhtS0_jhjPj__async_cb_191", "__Z11compute_micPKhtS0_jhjPj__async_cb_189", "__Z11compute_micPKhtS0_jhjPj__async_cb", "__Z11compute_micPKhtS0_jhjPj__async_cb_190", "__Z11compute_micPKhtS0_jhjPj__async_cb_193", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_3", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_2", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_1", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_4", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_509", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_508", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_506", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_507", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_505", "__ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft__async_cb", "__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb", "__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb_303", "__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb", "__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb_100", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_85", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_86", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_87", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_88", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_89", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_90", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_91", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_92", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_207", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_208", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_209", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_210", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_211", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_212", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb", "__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s__async_cb", "__ZN7LoRaPHY11add_channelEP16channel_params_th__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_63", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_64", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_442", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_443", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_468", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_469", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_286", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_287", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_305", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_306", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_307", "__ZN7LoRaPHY13get_radio_rngEv__async_cb", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_355", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_356", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_376", "__ZN7LoRaPHY11handle_sendEPhh__async_cb", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_374", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_375", "__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_479", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_459", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_461", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_460", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_462", "__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb", "_mbedtls_ccm_setkey__async_cb_167", "_mbedtls_ccm_setkey__async_cb_166", "_mbedtls_ccm_setkey__async_cb", "_mbedtls_ccm_free__async_cb", "_mbedtls_cipher_free__async_cb", "_mbedtls_cipher_setup__async_cb", "_mbedtls_cipher_setkey__async_cb", "_mbedtls_cipher_setkey__async_cb_45", "_mbedtls_cipher_update__async_cb", "_mbedtls_cipher_update__async_cb_84", "_mbedtls_cipher_update__async_cb_82", "_mbedtls_cipher_update__async_cb_83", "_ccm_aes_setkey_wrap__async_cb", "_ccm_ctx_free__async_cb", "_gcm_aes_setkey_wrap__async_cb", "_gcm_ctx_free__async_cb", "_mbedtls_cipher_cmac_starts__async_cb", "_mbedtls_cipher_cmac_update__async_cb_402", "_mbedtls_cipher_cmac_update__async_cb_401", "_mbedtls_cipher_cmac_update__async_cb", "_mbedtls_cipher_cmac_finish__async_cb_406", "_mbedtls_cipher_cmac_finish__async_cb", "_mbedtls_gcm_setkey__async_cb_359", "_mbedtls_gcm_setkey__async_cb_358", "_mbedtls_gcm_setkey__async_cb_357", "_mbedtls_gcm_setkey__async_cb", "_mbedtls_gcm_update__async_cb", "_mbedtls_gcm_free__async_cb", "_ticker_set_handler__async_cb", "_initialize__async_cb", "_initialize__async_cb_241", "_initialize__async_cb_246", "_initialize__async_cb_245", "_initialize__async_cb_242", "_initialize__async_cb_243", "_initialize__async_cb_244", "_schedule_interrupt__async_cb", "_schedule_interrupt__async_cb_250", "_schedule_interrupt__async_cb_251", "_schedule_interrupt__async_cb_252", "_schedule_interrupt__async_cb_253", "_schedule_interrupt__async_cb_254", "_schedule_interrupt__async_cb_255", "_ticker_remove_event__async_cb", "_ticker_read_us__async_cb_225", "_ticker_read_us__async_cb", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_141", "_mbed_die__async_cb_140", "_mbed_die__async_cb_139", "_mbed_die__async_cb_138", "_mbed_die__async_cb_137", "_mbed_die__async_cb_136", "_mbed_die__async_cb_135", "_mbed_die__async_cb_134", "_mbed_die__async_cb_133", "_mbed_die__async_cb_132", "_mbed_die__async_cb_131", "_mbed_die__async_cb_130", "_mbed_die__async_cb_129", "_mbed_die__async_cb_128", "_mbed_die__async_cb_127", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_printf__async_cb_404", "_handle_interrupt_in__async_cb", "_serial_putc__async_cb_21", "_serial_putc__async_cb", "__ZN4mbed6TickerD2Ev__async_cb", "__ZN4mbed6TickerD2Ev__async_cb_486", "__ZN4mbed6TickerD0Ev__async_cb", "__ZN4mbed6TickerD0Ev__async_cb_464", "__ZN4mbed6Ticker7handlerEv__async_cb", "_invoke_ticker__async_cb_458", "_invoke_ticker__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb", "_wait_ms__async_cb", "__GLOBAL__sub_I_main_cpp__async_cb", "__GLOBAL__sub_I_main_cpp__async_cb_188", "_main__async_cb_163", "_main__async_cb_162", "_main__async_cb_165", "_main__async_cb", "__ZL18lora_event_handler11lora_events", "_main__async_cb_157", "_main__async_cb_158", "_main__async_cb_159", "_main__async_cb_161", "_main__async_cb_160", "_main__async_cb_164", "__ZL12send_messagev__async_cb_126", "__ZL12send_messagev__async_cb", "__ZL18lora_event_handler11lora_events__async_cb_112", "__ZL18lora_event_handler11lora_events__async_cb_111", "__ZL18lora_event_handler11lora_events__async_cb_110", "__ZL18lora_event_handler11lora_events__async_cb_109", "__ZL18lora_event_handler11lora_events__async_cb", "__ZL18lora_event_handler11lora_events__async_cb_108", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb", "_putc__async_cb_205", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_394", "_fflush__async_cb_393", "_fflush__async_cb_395", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_405", "_vfprintf__async_cb", "_vsnprintf__async_cb", "_sprintf__async_cb", "_vsprintf__async_cb", "_printf__async_cb", "_putchar__async_cb", "_fputc__async_cb_285", "_fputc__async_cb", "_puts__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_342", "_abort_message__async_cb", "_abort_message__async_cb_98", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_463", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_66", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_54", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_240", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_363", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_362", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_361", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_360", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_377", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb
var debug_table_vii = ["0", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events", "__ZN16SX1276_LoRaRadio7receiveEj", "__ZN16SX1276_LoRaRadio11set_channelEj", "__ZN16SX1276_LoRaRadio18set_public_networkEb", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvPhtsaEE13function_moveINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPvPKv", "__ZN7LoRaPHY16set_last_tx_doneEP24set_band_txdone_params_t", "__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t", "__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t", "__ZN12LoRaWANStack23mlme_indication_handlerEP25loramac_mlme_indication_t", "0", "0", "0", "0", "0", "0"];
var debug_table_viii = ["0", "__ZN16SX1276_LoRaRadio4sendEPhh", "__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj", "_add_pkcs_padding", "0", "0", "0"];
var debug_table_viiii = ["0", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0", "0"];
var debug_table_viiiii = ["0", "__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa", "__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa", "__ZN7LoRaMac14handle_rx_doneEPhtsa"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
var debug_table_viiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj"];
var debug_table_viiiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb"];
function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14) {
  try {
    Module["dynCall_viiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiiiiiiiiii": invoke_viiiiiiiiiiiiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "_emscripten_asm_const_iiiiiii": _emscripten_asm_const_iiiiiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_gettimeofday": _gettimeofday, "_llvm_ceil_f64": _llvm_ceil_f64, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_trap": _llvm_trap, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_cond_timedwait": _pthread_cond_timedwait, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_asm_const_iiiiii=env._emscripten_asm_const_iiiiii;
  var _emscripten_asm_const_iiiiiii=env._emscripten_asm_const_iiiiiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _gettimeofday=env._gettimeofday;
  var _llvm_ceil_f64=env._llvm_ceil_f64;
  var _llvm_floor_f64=env._llvm_floor_f64;
  var _llvm_trap=env._llvm_trap;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_cond_timedwait=env._pthread_cond_timedwait;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i = 0, $$095113 = 0, $$096$be = 0, $$1$lcssa = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $139 = 0, $14 = 0, $150 = 0, $151 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $238 = 0, $24 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $257 = 0, $26 = 0, $260 = 0, $265 = 0, $273 = 0, $28 = 0, $292 = 0, $30 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $373 = 0, $374 = 0, $38 = 0, $4 = 0, $40 = 0, $411 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $487 = 0, $491 = 0, $495 = 0, $498 = 0, $50 = 0, $504 = 0, $507 = 0, $508 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $6 = 0, $60 = 0, $604 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $686 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 270
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 272
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 274
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 276
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 278
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 280
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 282
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 284
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 286
 $18 = HEAP8[$0 + 36 >> 0] | 0; //@line 288
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 290
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 292
 $24 = HEAP8[$0 + 48 >> 0] | 0; //@line 294
 $26 = HEAP8[$0 + 49 >> 0] | 0; //@line 296
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 298
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 300
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 302
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 304
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 306
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 308
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 310
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 312
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 314
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 316
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 318
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 320
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 322
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 324
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 326
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 328
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 330
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 332
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 334
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 336
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 338
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 340
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 342
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 344
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 346
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 348
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 350
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 352
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 354
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 356
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 358
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 360
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 362
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 364
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 366
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 368
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 370
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 372
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 374
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 376
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 378
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 380
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 382
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 384
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 386
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 388
 $120 = HEAP32[$0 + 236 >> 2] | 0; //@line 390
 $122 = HEAP32[$0 + 240 >> 2] | 0; //@line 392
 $124 = HEAP32[$0 + 244 >> 2] | 0; //@line 394
 $126 = HEAP32[$0 + 248 >> 2] | 0; //@line 396
 $128 = HEAP32[$0 + 252 >> 2] | 0; //@line 398
 $130 = HEAP32[$0 + 256 >> 2] | 0; //@line 400
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 402
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 404
 $136 = HEAP32[$0 + 268 >> 2] | 0; //@line 406
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 408
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$114 >> 0] = HEAP8[$36 >> 0] | 0; //@line 413
  HEAP8[$28 >> 0] = HEAP8[$86 >> 0] | 0; //@line 415
  HEAP8[$14 >> 0] = HEAP8[$96 >> 0] | 0; //@line 417
 }
 $238 = HEAP8[$108 >> 0] | 0; //@line 419
 if (($238 & 255) > 4) {
  $div = ($238 & 255) / 5 | 0; //@line 422
  $242 = (-128 - (HEAP8[$42 >> 0] | 0) & 255) + -1 | 0; //@line 427
  $$095113 = 0; //@line 428
  $248 = HEAP8[$48 >> 0] | 0; //@line 428
  while (1) {
   $247 = $248 & 255; //@line 430
   if (($242 | 0) > ($247 | 0)) {
    $251 = $248 + 2 << 24 >> 24; //@line 434
    HEAP8[$8 + 4 + $247 >> 0] = 3; //@line 438
    HEAP8[$48 >> 0] = $251; //@line 439
    HEAP8[($248 + 1 & 255) + ($8 + 4) >> 0] = $AsyncRetVal; //@line 440
    HEAP8[$100 >> 0] = 1; //@line 441
    $$0$i = 0; //@line 442
    $686 = $251; //@line 442
   } else {
    $$0$i = -1e3; //@line 444
    $686 = $248; //@line 444
   }
   $$095113 = $$095113 + 1 << 24 >> 24; //@line 446
   if (($$095113 & 255) >= ($div & 255)) {
    $$1$lcssa = $$0$i; //@line 451
    break;
   } else {
    $248 = $686; //@line 449
   }
  }
 } else {
  $$1$lcssa = $98; //@line 456
 }
 $$0$be = $106 + 255 + ($238 & 255) & 255; //@line 462
 $$096$be = $$1$lcssa; //@line 462
 L13 : while (1) {
  if (($$0$be & 255) >= ($18 & 255)) {
   label = 36; //@line 466
   break;
  }
  $139 = $$0$be + 1 << 24 >> 24; //@line 470
  switch (HEAP8[$12 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 475
    break L13;
    break;
   }
  case 5:
   {
    label = 17; //@line 480
    break L13;
    break;
   }
  case 7:
   {
    label = 22; //@line 485
    break L13;
    break;
   }
  case 9:
   {
    label = 27; //@line 490
    break L13;
    break;
   }
  case 10:
   {
    label = 32; //@line 495
    break L13;
    break;
   }
  case 2:
   {
    HEAP32[$22 >> 2] = 0; //@line 500
    HEAP8[$44 >> 0] = HEAP8[$12 + ($139 & 255) >> 0] | 0; //@line 505
    HEAP8[$74 >> 0] = HEAP8[$12 + ($$0$be + 2 & 255) >> 0] | 0; //@line 510
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 511
    continue L13;
    break;
   }
  case 4:
   {
    $257 = $$0$be + 2 << 24 >> 24; //@line 516
    $260 = HEAP8[$12 + ($139 & 255) >> 0] | 0; //@line 519
    HEAP8[$110 >> 0] = $260; //@line 520
    HEAP16[$76 >> 1] = 1 << ($260 & 255); //@line 524
    $265 = HEAP8[$48 >> 0] | 0; //@line 526
    if (($265 & 255) >= (-128 - (HEAP8[$42 >> 0] | 0) & 255)) {
     $$0$be = $257; //@line 530
     $$096$be = -1e3; //@line 530
     continue L13;
    }
    HEAP8[$48 >> 0] = $265 + 1 << 24 >> 24; //@line 536
    HEAP8[($265 & 255) + ($8 + 4) >> 0] = 4; //@line 537
    HEAP8[$100 >> 0] = 1; //@line 538
    $$0$be = $257; //@line 539
    $$096$be = 0; //@line 539
    continue L13;
    break;
   }
  case 6:
   {
    $373 = HEAP8[$48 >> 0] | 0; //@line 545
    $374 = $373 & 255; //@line 546
    if (((-128 - (HEAP8[$42 >> 0] | 0) & 255) + -2 | 0) <= ($374 | 0)) {
     $$0$be = $139; //@line 552
     $$096$be = -1e3; //@line 552
     continue L13;
    }
    HEAP8[$8 + 4 + $374 >> 0] = 6; //@line 557
    HEAP8[($373 + 1 & 255) + ($8 + 4) >> 0] = -1; //@line 561
    HEAP8[$48 >> 0] = $373 + 3 << 24 >> 24; //@line 563
    HEAP8[($373 + 2 & 255) + ($8 + 4) >> 0] = $26; //@line 566
    HEAP8[$100 >> 0] = 1; //@line 567
    $$0$be = $139; //@line 568
    $$096$be = 0; //@line 568
    continue L13;
    break;
   }
  case 8:
   {
    $487 = $$0$be + 2 << 24 >> 24; //@line 573
    $491 = HEAP8[$12 + ($139 & 255) >> 0] & 15; //@line 577
    $495 = ($491 + ($491 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 582
    HEAP32[$132 >> 2] = $495; //@line 583
    HEAP32[$128 >> 2] = $495 + 1e3; //@line 585
    $498 = HEAP8[$48 >> 0] | 0; //@line 587
    if (($498 & 255) >= (-128 - (HEAP8[$42 >> 0] | 0) & 255)) {
     $$0$be = $487; //@line 591
     $$096$be = -1e3; //@line 591
     continue L13;
    }
    HEAP8[$48 >> 0] = $498 + 1 << 24 >> 24; //@line 597
    HEAP8[($498 & 255) + ($8 + 4) >> 0] = 8; //@line 598
    HEAP8[$16 >> 0] = 1; //@line 599
    HEAP8[$100 >> 0] = 1; //@line 600
    $$0$be = $487; //@line 601
    $$096$be = 0; //@line 601
    continue L13;
    break;
   }
  default:
   {
    $$0$be = $139; //@line 606
    $$096$be = -1013; //@line 606
    continue L13;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$36 >> 0] = 0; //@line 612
  HEAP8[$86 >> 0] = 0; //@line 613
  HEAP8[$96 >> 0] = 0; //@line 614
  HEAP8[$108 >> 0] = 0; //@line 615
  $150 = $139 & 255; //@line 616
  $151 = $150 + -1 | 0; //@line 617
  HEAP32[$58 >> 2] = $12 + $151; //@line 619
  HEAP8[$102 >> 0] = $10 - $151; //@line 622
  HEAP8[$88 >> 0] = HEAP8[$78 >> 0] | 0; //@line 624
  HEAP8[$136 >> 0] = HEAP8[$124 >> 0] | 0; //@line 626
  HEAP8[$122 >> 0] = HEAP8[$114 >> 0] | 0; //@line 628
  HEAP8[$2 >> 0] = HEAP8[$28 >> 0] | 0; //@line 630
  HEAP8[$60 >> 0] = HEAP8[$14 >> 0] | 0; //@line 632
  $162 = HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] | 0; //@line 635
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 636
  $163 = FUNCTION_TABLE_iiiiiii[$162 & 3]($34, $30, $36, $86, $96, $108) | 0; //@line 637
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 640
   $164 = $ReallocAsyncCtx + 4 | 0; //@line 641
   HEAP32[$164 >> 2] = $2; //@line 642
   $165 = $ReallocAsyncCtx + 8 | 0; //@line 643
   HEAP32[$165 >> 2] = $4; //@line 644
   $166 = $ReallocAsyncCtx + 12 | 0; //@line 645
   HEAP32[$166 >> 2] = $6; //@line 646
   $167 = $ReallocAsyncCtx + 16 | 0; //@line 647
   HEAP32[$167 >> 2] = $8; //@line 648
   $168 = $ReallocAsyncCtx + 20 | 0; //@line 649
   HEAP32[$168 >> 2] = $10; //@line 650
   $169 = $ReallocAsyncCtx + 24 | 0; //@line 651
   HEAP32[$169 >> 2] = $12; //@line 652
   $170 = $ReallocAsyncCtx + 28 | 0; //@line 653
   HEAP32[$170 >> 2] = $14; //@line 654
   $171 = $ReallocAsyncCtx + 32 | 0; //@line 655
   HEAP32[$171 >> 2] = $16; //@line 656
   $172 = $ReallocAsyncCtx + 36 | 0; //@line 657
   HEAP8[$172 >> 0] = $18; //@line 658
   $173 = $ReallocAsyncCtx + 40 | 0; //@line 659
   HEAP32[$173 >> 2] = $20; //@line 660
   $174 = $ReallocAsyncCtx + 44 | 0; //@line 661
   HEAP32[$174 >> 2] = $22; //@line 662
   $175 = $ReallocAsyncCtx + 48 | 0; //@line 663
   HEAP8[$175 >> 0] = $24; //@line 664
   $176 = $ReallocAsyncCtx + 49 | 0; //@line 665
   HEAP8[$176 >> 0] = $26; //@line 666
   $177 = $ReallocAsyncCtx + 52 | 0; //@line 667
   HEAP32[$177 >> 2] = $28; //@line 668
   $178 = $ReallocAsyncCtx + 56 | 0; //@line 669
   HEAP32[$178 >> 2] = $30; //@line 670
   $179 = $ReallocAsyncCtx + 60 | 0; //@line 671
   HEAP32[$179 >> 2] = $32; //@line 672
   $180 = $ReallocAsyncCtx + 64 | 0; //@line 673
   HEAP32[$180 >> 2] = $34; //@line 674
   $181 = $ReallocAsyncCtx + 68 | 0; //@line 675
   HEAP32[$181 >> 2] = $36; //@line 676
   $182 = $ReallocAsyncCtx + 72 | 0; //@line 677
   HEAP32[$182 >> 2] = $38; //@line 678
   $183 = $ReallocAsyncCtx + 76 | 0; //@line 679
   HEAP32[$183 >> 2] = $40; //@line 680
   $184 = $ReallocAsyncCtx + 80 | 0; //@line 681
   HEAP32[$184 >> 2] = $42; //@line 682
   $185 = $ReallocAsyncCtx + 84 | 0; //@line 683
   HEAP32[$185 >> 2] = $44; //@line 684
   $186 = $ReallocAsyncCtx + 88 | 0; //@line 685
   HEAP32[$186 >> 2] = $46; //@line 686
   $187 = $ReallocAsyncCtx + 92 | 0; //@line 687
   HEAP32[$187 >> 2] = $48; //@line 688
   $188 = $ReallocAsyncCtx + 96 | 0; //@line 689
   HEAP32[$188 >> 2] = $50; //@line 690
   $189 = $ReallocAsyncCtx + 100 | 0; //@line 691
   HEAP32[$189 >> 2] = $52; //@line 692
   $190 = $ReallocAsyncCtx + 104 | 0; //@line 693
   HEAP32[$190 >> 2] = $54; //@line 694
   $191 = $ReallocAsyncCtx + 108 | 0; //@line 695
   HEAP32[$191 >> 2] = $56; //@line 696
   $192 = $ReallocAsyncCtx + 112 | 0; //@line 697
   HEAP32[$192 >> 2] = $58; //@line 698
   $193 = $ReallocAsyncCtx + 116 | 0; //@line 699
   HEAP32[$193 >> 2] = $60; //@line 700
   $194 = $ReallocAsyncCtx + 120 | 0; //@line 701
   HEAP32[$194 >> 2] = $62; //@line 702
   $195 = $ReallocAsyncCtx + 124 | 0; //@line 703
   HEAP32[$195 >> 2] = $64; //@line 704
   $196 = $ReallocAsyncCtx + 128 | 0; //@line 705
   HEAP32[$196 >> 2] = $66; //@line 706
   $197 = $ReallocAsyncCtx + 132 | 0; //@line 707
   HEAP32[$197 >> 2] = $68; //@line 708
   $198 = $ReallocAsyncCtx + 136 | 0; //@line 709
   HEAP32[$198 >> 2] = $70; //@line 710
   $199 = $ReallocAsyncCtx + 140 | 0; //@line 711
   HEAP32[$199 >> 2] = $72; //@line 712
   $200 = $ReallocAsyncCtx + 144 | 0; //@line 713
   HEAP32[$200 >> 2] = $74; //@line 714
   $201 = $ReallocAsyncCtx + 148 | 0; //@line 715
   HEAP32[$201 >> 2] = $76; //@line 716
   $202 = $ReallocAsyncCtx + 152 | 0; //@line 717
   HEAP32[$202 >> 2] = $78; //@line 718
   $203 = $ReallocAsyncCtx + 156 | 0; //@line 719
   HEAP32[$203 >> 2] = $80; //@line 720
   $204 = $ReallocAsyncCtx + 160 | 0; //@line 721
   HEAP32[$204 >> 2] = $82; //@line 722
   $205 = $ReallocAsyncCtx + 164 | 0; //@line 723
   HEAP32[$205 >> 2] = $84; //@line 724
   $206 = $ReallocAsyncCtx + 168 | 0; //@line 725
   HEAP32[$206 >> 2] = $86; //@line 726
   $207 = $ReallocAsyncCtx + 172 | 0; //@line 727
   HEAP32[$207 >> 2] = $88; //@line 728
   $208 = $ReallocAsyncCtx + 176 | 0; //@line 729
   HEAP32[$208 >> 2] = $90; //@line 730
   $209 = $ReallocAsyncCtx + 180 | 0; //@line 731
   HEAP32[$209 >> 2] = $92; //@line 732
   $210 = $ReallocAsyncCtx + 184 | 0; //@line 733
   HEAP32[$210 >> 2] = $94; //@line 734
   $211 = $ReallocAsyncCtx + 188 | 0; //@line 735
   HEAP32[$211 >> 2] = $96; //@line 736
   $212 = $ReallocAsyncCtx + 192 | 0; //@line 737
   HEAP32[$212 >> 2] = $$096$be; //@line 738
   $213 = $ReallocAsyncCtx + 196 | 0; //@line 739
   HEAP32[$213 >> 2] = $100; //@line 740
   $214 = $ReallocAsyncCtx + 200 | 0; //@line 741
   HEAP32[$214 >> 2] = $102; //@line 742
   $215 = $ReallocAsyncCtx + 204 | 0; //@line 743
   HEAP32[$215 >> 2] = $104; //@line 744
   $216 = $ReallocAsyncCtx + 208 | 0; //@line 745
   HEAP32[$216 >> 2] = $150; //@line 746
   $217 = $ReallocAsyncCtx + 212 | 0; //@line 747
   HEAP32[$217 >> 2] = $108; //@line 748
   $218 = $ReallocAsyncCtx + 216 | 0; //@line 749
   HEAP32[$218 >> 2] = $110; //@line 750
   $219 = $ReallocAsyncCtx + 220 | 0; //@line 751
   HEAP32[$219 >> 2] = $112; //@line 752
   $220 = $ReallocAsyncCtx + 224 | 0; //@line 753
   HEAP32[$220 >> 2] = $114; //@line 754
   $221 = $ReallocAsyncCtx + 228 | 0; //@line 755
   HEAP32[$221 >> 2] = $116; //@line 756
   $222 = $ReallocAsyncCtx + 232 | 0; //@line 757
   HEAP32[$222 >> 2] = $118; //@line 758
   $223 = $ReallocAsyncCtx + 236 | 0; //@line 759
   HEAP32[$223 >> 2] = $120; //@line 760
   $224 = $ReallocAsyncCtx + 240 | 0; //@line 761
   HEAP32[$224 >> 2] = $122; //@line 762
   $225 = $ReallocAsyncCtx + 244 | 0; //@line 763
   HEAP32[$225 >> 2] = $124; //@line 764
   $226 = $ReallocAsyncCtx + 248 | 0; //@line 765
   HEAP32[$226 >> 2] = $126; //@line 766
   $227 = $ReallocAsyncCtx + 252 | 0; //@line 767
   HEAP32[$227 >> 2] = $128; //@line 768
   $228 = $ReallocAsyncCtx + 256 | 0; //@line 769
   HEAP32[$228 >> 2] = $130; //@line 770
   $229 = $ReallocAsyncCtx + 260 | 0; //@line 771
   HEAP32[$229 >> 2] = $132; //@line 772
   $230 = $ReallocAsyncCtx + 264 | 0; //@line 773
   HEAP32[$230 >> 2] = $134; //@line 774
   $231 = $ReallocAsyncCtx + 268 | 0; //@line 775
   HEAP32[$231 >> 2] = $136; //@line 776
   sp = STACKTOP; //@line 777
   return;
  }
  HEAP8[___async_retval >> 0] = $163; //@line 781
  ___async_unwind = 0; //@line 782
  HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 783
  $164 = $ReallocAsyncCtx + 4 | 0; //@line 784
  HEAP32[$164 >> 2] = $2; //@line 785
  $165 = $ReallocAsyncCtx + 8 | 0; //@line 786
  HEAP32[$165 >> 2] = $4; //@line 787
  $166 = $ReallocAsyncCtx + 12 | 0; //@line 788
  HEAP32[$166 >> 2] = $6; //@line 789
  $167 = $ReallocAsyncCtx + 16 | 0; //@line 790
  HEAP32[$167 >> 2] = $8; //@line 791
  $168 = $ReallocAsyncCtx + 20 | 0; //@line 792
  HEAP32[$168 >> 2] = $10; //@line 793
  $169 = $ReallocAsyncCtx + 24 | 0; //@line 794
  HEAP32[$169 >> 2] = $12; //@line 795
  $170 = $ReallocAsyncCtx + 28 | 0; //@line 796
  HEAP32[$170 >> 2] = $14; //@line 797
  $171 = $ReallocAsyncCtx + 32 | 0; //@line 798
  HEAP32[$171 >> 2] = $16; //@line 799
  $172 = $ReallocAsyncCtx + 36 | 0; //@line 800
  HEAP8[$172 >> 0] = $18; //@line 801
  $173 = $ReallocAsyncCtx + 40 | 0; //@line 802
  HEAP32[$173 >> 2] = $20; //@line 803
  $174 = $ReallocAsyncCtx + 44 | 0; //@line 804
  HEAP32[$174 >> 2] = $22; //@line 805
  $175 = $ReallocAsyncCtx + 48 | 0; //@line 806
  HEAP8[$175 >> 0] = $24; //@line 807
  $176 = $ReallocAsyncCtx + 49 | 0; //@line 808
  HEAP8[$176 >> 0] = $26; //@line 809
  $177 = $ReallocAsyncCtx + 52 | 0; //@line 810
  HEAP32[$177 >> 2] = $28; //@line 811
  $178 = $ReallocAsyncCtx + 56 | 0; //@line 812
  HEAP32[$178 >> 2] = $30; //@line 813
  $179 = $ReallocAsyncCtx + 60 | 0; //@line 814
  HEAP32[$179 >> 2] = $32; //@line 815
  $180 = $ReallocAsyncCtx + 64 | 0; //@line 816
  HEAP32[$180 >> 2] = $34; //@line 817
  $181 = $ReallocAsyncCtx + 68 | 0; //@line 818
  HEAP32[$181 >> 2] = $36; //@line 819
  $182 = $ReallocAsyncCtx + 72 | 0; //@line 820
  HEAP32[$182 >> 2] = $38; //@line 821
  $183 = $ReallocAsyncCtx + 76 | 0; //@line 822
  HEAP32[$183 >> 2] = $40; //@line 823
  $184 = $ReallocAsyncCtx + 80 | 0; //@line 824
  HEAP32[$184 >> 2] = $42; //@line 825
  $185 = $ReallocAsyncCtx + 84 | 0; //@line 826
  HEAP32[$185 >> 2] = $44; //@line 827
  $186 = $ReallocAsyncCtx + 88 | 0; //@line 828
  HEAP32[$186 >> 2] = $46; //@line 829
  $187 = $ReallocAsyncCtx + 92 | 0; //@line 830
  HEAP32[$187 >> 2] = $48; //@line 831
  $188 = $ReallocAsyncCtx + 96 | 0; //@line 832
  HEAP32[$188 >> 2] = $50; //@line 833
  $189 = $ReallocAsyncCtx + 100 | 0; //@line 834
  HEAP32[$189 >> 2] = $52; //@line 835
  $190 = $ReallocAsyncCtx + 104 | 0; //@line 836
  HEAP32[$190 >> 2] = $54; //@line 837
  $191 = $ReallocAsyncCtx + 108 | 0; //@line 838
  HEAP32[$191 >> 2] = $56; //@line 839
  $192 = $ReallocAsyncCtx + 112 | 0; //@line 840
  HEAP32[$192 >> 2] = $58; //@line 841
  $193 = $ReallocAsyncCtx + 116 | 0; //@line 842
  HEAP32[$193 >> 2] = $60; //@line 843
  $194 = $ReallocAsyncCtx + 120 | 0; //@line 844
  HEAP32[$194 >> 2] = $62; //@line 845
  $195 = $ReallocAsyncCtx + 124 | 0; //@line 846
  HEAP32[$195 >> 2] = $64; //@line 847
  $196 = $ReallocAsyncCtx + 128 | 0; //@line 848
  HEAP32[$196 >> 2] = $66; //@line 849
  $197 = $ReallocAsyncCtx + 132 | 0; //@line 850
  HEAP32[$197 >> 2] = $68; //@line 851
  $198 = $ReallocAsyncCtx + 136 | 0; //@line 852
  HEAP32[$198 >> 2] = $70; //@line 853
  $199 = $ReallocAsyncCtx + 140 | 0; //@line 854
  HEAP32[$199 >> 2] = $72; //@line 855
  $200 = $ReallocAsyncCtx + 144 | 0; //@line 856
  HEAP32[$200 >> 2] = $74; //@line 857
  $201 = $ReallocAsyncCtx + 148 | 0; //@line 858
  HEAP32[$201 >> 2] = $76; //@line 859
  $202 = $ReallocAsyncCtx + 152 | 0; //@line 860
  HEAP32[$202 >> 2] = $78; //@line 861
  $203 = $ReallocAsyncCtx + 156 | 0; //@line 862
  HEAP32[$203 >> 2] = $80; //@line 863
  $204 = $ReallocAsyncCtx + 160 | 0; //@line 864
  HEAP32[$204 >> 2] = $82; //@line 865
  $205 = $ReallocAsyncCtx + 164 | 0; //@line 866
  HEAP32[$205 >> 2] = $84; //@line 867
  $206 = $ReallocAsyncCtx + 168 | 0; //@line 868
  HEAP32[$206 >> 2] = $86; //@line 869
  $207 = $ReallocAsyncCtx + 172 | 0; //@line 870
  HEAP32[$207 >> 2] = $88; //@line 871
  $208 = $ReallocAsyncCtx + 176 | 0; //@line 872
  HEAP32[$208 >> 2] = $90; //@line 873
  $209 = $ReallocAsyncCtx + 180 | 0; //@line 874
  HEAP32[$209 >> 2] = $92; //@line 875
  $210 = $ReallocAsyncCtx + 184 | 0; //@line 876
  HEAP32[$210 >> 2] = $94; //@line 877
  $211 = $ReallocAsyncCtx + 188 | 0; //@line 878
  HEAP32[$211 >> 2] = $96; //@line 879
  $212 = $ReallocAsyncCtx + 192 | 0; //@line 880
  HEAP32[$212 >> 2] = $$096$be; //@line 881
  $213 = $ReallocAsyncCtx + 196 | 0; //@line 882
  HEAP32[$213 >> 2] = $100; //@line 883
  $214 = $ReallocAsyncCtx + 200 | 0; //@line 884
  HEAP32[$214 >> 2] = $102; //@line 885
  $215 = $ReallocAsyncCtx + 204 | 0; //@line 886
  HEAP32[$215 >> 2] = $104; //@line 887
  $216 = $ReallocAsyncCtx + 208 | 0; //@line 888
  HEAP32[$216 >> 2] = $150; //@line 889
  $217 = $ReallocAsyncCtx + 212 | 0; //@line 890
  HEAP32[$217 >> 2] = $108; //@line 891
  $218 = $ReallocAsyncCtx + 216 | 0; //@line 892
  HEAP32[$218 >> 2] = $110; //@line 893
  $219 = $ReallocAsyncCtx + 220 | 0; //@line 894
  HEAP32[$219 >> 2] = $112; //@line 895
  $220 = $ReallocAsyncCtx + 224 | 0; //@line 896
  HEAP32[$220 >> 2] = $114; //@line 897
  $221 = $ReallocAsyncCtx + 228 | 0; //@line 898
  HEAP32[$221 >> 2] = $116; //@line 899
  $222 = $ReallocAsyncCtx + 232 | 0; //@line 900
  HEAP32[$222 >> 2] = $118; //@line 901
  $223 = $ReallocAsyncCtx + 236 | 0; //@line 902
  HEAP32[$223 >> 2] = $120; //@line 903
  $224 = $ReallocAsyncCtx + 240 | 0; //@line 904
  HEAP32[$224 >> 2] = $122; //@line 905
  $225 = $ReallocAsyncCtx + 244 | 0; //@line 906
  HEAP32[$225 >> 2] = $124; //@line 907
  $226 = $ReallocAsyncCtx + 248 | 0; //@line 908
  HEAP32[$226 >> 2] = $126; //@line 909
  $227 = $ReallocAsyncCtx + 252 | 0; //@line 910
  HEAP32[$227 >> 2] = $128; //@line 911
  $228 = $ReallocAsyncCtx + 256 | 0; //@line 912
  HEAP32[$228 >> 2] = $130; //@line 913
  $229 = $ReallocAsyncCtx + 260 | 0; //@line 914
  HEAP32[$229 >> 2] = $132; //@line 915
  $230 = $ReallocAsyncCtx + 264 | 0; //@line 916
  HEAP32[$230 >> 2] = $134; //@line 917
  $231 = $ReallocAsyncCtx + 268 | 0; //@line 918
  HEAP32[$231 >> 2] = $136; //@line 919
  sp = STACKTOP; //@line 920
  return;
 } else if ((label | 0) == 17) {
  $273 = HEAP8[$12 + ($139 & 255) >> 0] | 0; //@line 926
  HEAP8[$126 >> 0] = ($273 & 255) >>> 4 & 7; //@line 931
  HEAP8[$90 >> 0] = $273 & 15; //@line 933
  $292 = $$0$be + 5 << 24 >> 24; //@line 947
  HEAP32[$134 >> 2] = (HEAPU8[$12 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$12 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$12 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 955
  $302 = HEAP32[(HEAP32[$112 >> 2] | 0) + 40 >> 2] | 0; //@line 958
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 959
  $303 = FUNCTION_TABLE_iii[$302 & 31]($34, $46) | 0; //@line 960
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 591; //@line 963
   $304 = $ReallocAsyncCtx2 + 4 | 0; //@line 964
   HEAP32[$304 >> 2] = $2; //@line 965
   $305 = $ReallocAsyncCtx2 + 8 | 0; //@line 966
   HEAP32[$305 >> 2] = $4; //@line 967
   $306 = $ReallocAsyncCtx2 + 12 | 0; //@line 968
   HEAP32[$306 >> 2] = $6; //@line 969
   $307 = $ReallocAsyncCtx2 + 16 | 0; //@line 970
   HEAP32[$307 >> 2] = $8; //@line 971
   $308 = $ReallocAsyncCtx2 + 20 | 0; //@line 972
   HEAP32[$308 >> 2] = $16; //@line 973
   $309 = $ReallocAsyncCtx2 + 24 | 0; //@line 974
   HEAP32[$309 >> 2] = $12; //@line 975
   $310 = $ReallocAsyncCtx2 + 28 | 0; //@line 976
   HEAP32[$310 >> 2] = $14; //@line 977
   $311 = $ReallocAsyncCtx2 + 32 | 0; //@line 978
   HEAP8[$311 >> 0] = $24; //@line 979
   $312 = $ReallocAsyncCtx2 + 33 | 0; //@line 980
   HEAP8[$312 >> 0] = $18; //@line 981
   $313 = $ReallocAsyncCtx2 + 36 | 0; //@line 982
   HEAP32[$313 >> 2] = $20; //@line 983
   $314 = $ReallocAsyncCtx2 + 40 | 0; //@line 984
   HEAP32[$314 >> 2] = $10; //@line 985
   $315 = $ReallocAsyncCtx2 + 44 | 0; //@line 986
   HEAP32[$315 >> 2] = $22; //@line 987
   $316 = $ReallocAsyncCtx2 + 48 | 0; //@line 988
   HEAP8[$316 >> 0] = $26; //@line 989
   $317 = $ReallocAsyncCtx2 + 52 | 0; //@line 990
   HEAP32[$317 >> 2] = $28; //@line 991
   $318 = $ReallocAsyncCtx2 + 56 | 0; //@line 992
   HEAP32[$318 >> 2] = $30; //@line 993
   $319 = $ReallocAsyncCtx2 + 60 | 0; //@line 994
   HEAP32[$319 >> 2] = $32; //@line 995
   $320 = $ReallocAsyncCtx2 + 64 | 0; //@line 996
   HEAP32[$320 >> 2] = $34; //@line 997
   $321 = $ReallocAsyncCtx2 + 68 | 0; //@line 998
   HEAP8[$321 >> 0] = $292; //@line 999
   $322 = $ReallocAsyncCtx2 + 72 | 0; //@line 1000
   HEAP32[$322 >> 2] = $36; //@line 1001
   $323 = $ReallocAsyncCtx2 + 76 | 0; //@line 1002
   HEAP32[$323 >> 2] = $38; //@line 1003
   $324 = $ReallocAsyncCtx2 + 80 | 0; //@line 1004
   HEAP32[$324 >> 2] = $40; //@line 1005
   $325 = $ReallocAsyncCtx2 + 84 | 0; //@line 1006
   HEAP32[$325 >> 2] = $42; //@line 1007
   $326 = $ReallocAsyncCtx2 + 88 | 0; //@line 1008
   HEAP32[$326 >> 2] = $44; //@line 1009
   $327 = $ReallocAsyncCtx2 + 92 | 0; //@line 1010
   HEAP32[$327 >> 2] = $46; //@line 1011
   $328 = $ReallocAsyncCtx2 + 96 | 0; //@line 1012
   HEAP32[$328 >> 2] = $48; //@line 1013
   $329 = $ReallocAsyncCtx2 + 100 | 0; //@line 1014
   HEAP32[$329 >> 2] = $50; //@line 1015
   $330 = $ReallocAsyncCtx2 + 104 | 0; //@line 1016
   HEAP32[$330 >> 2] = $52; //@line 1017
   $331 = $ReallocAsyncCtx2 + 108 | 0; //@line 1018
   HEAP32[$331 >> 2] = $54; //@line 1019
   $332 = $ReallocAsyncCtx2 + 112 | 0; //@line 1020
   HEAP32[$332 >> 2] = $56; //@line 1021
   $333 = $ReallocAsyncCtx2 + 116 | 0; //@line 1022
   HEAP32[$333 >> 2] = $62; //@line 1023
   $334 = $ReallocAsyncCtx2 + 120 | 0; //@line 1024
   HEAP32[$334 >> 2] = $58; //@line 1025
   $335 = $ReallocAsyncCtx2 + 124 | 0; //@line 1026
   HEAP32[$335 >> 2] = $60; //@line 1027
   $336 = $ReallocAsyncCtx2 + 128 | 0; //@line 1028
   HEAP32[$336 >> 2] = $64; //@line 1029
   $337 = $ReallocAsyncCtx2 + 132 | 0; //@line 1030
   HEAP32[$337 >> 2] = $68; //@line 1031
   $338 = $ReallocAsyncCtx2 + 136 | 0; //@line 1032
   HEAP32[$338 >> 2] = $66; //@line 1033
   $339 = $ReallocAsyncCtx2 + 140 | 0; //@line 1034
   HEAP32[$339 >> 2] = $70; //@line 1035
   $340 = $ReallocAsyncCtx2 + 144 | 0; //@line 1036
   HEAP32[$340 >> 2] = $72; //@line 1037
   $341 = $ReallocAsyncCtx2 + 148 | 0; //@line 1038
   HEAP32[$341 >> 2] = $74; //@line 1039
   $342 = $ReallocAsyncCtx2 + 152 | 0; //@line 1040
   HEAP32[$342 >> 2] = $76; //@line 1041
   $343 = $ReallocAsyncCtx2 + 156 | 0; //@line 1042
   HEAP32[$343 >> 2] = $78; //@line 1043
   $344 = $ReallocAsyncCtx2 + 160 | 0; //@line 1044
   HEAP32[$344 >> 2] = $80; //@line 1045
   $345 = $ReallocAsyncCtx2 + 164 | 0; //@line 1046
   HEAP32[$345 >> 2] = $82; //@line 1047
   $346 = $ReallocAsyncCtx2 + 168 | 0; //@line 1048
   HEAP32[$346 >> 2] = $84; //@line 1049
   $347 = $ReallocAsyncCtx2 + 172 | 0; //@line 1050
   HEAP32[$347 >> 2] = $90; //@line 1051
   $348 = $ReallocAsyncCtx2 + 176 | 0; //@line 1052
   HEAP32[$348 >> 2] = $86; //@line 1053
   $349 = $ReallocAsyncCtx2 + 180 | 0; //@line 1054
   HEAP32[$349 >> 2] = $88; //@line 1055
   $350 = $ReallocAsyncCtx2 + 184 | 0; //@line 1056
   HEAP32[$350 >> 2] = $92; //@line 1057
   $351 = $ReallocAsyncCtx2 + 188 | 0; //@line 1058
   HEAP32[$351 >> 2] = $94; //@line 1059
   $352 = $ReallocAsyncCtx2 + 192 | 0; //@line 1060
   HEAP32[$352 >> 2] = $96; //@line 1061
   $353 = $ReallocAsyncCtx2 + 196 | 0; //@line 1062
   HEAP32[$353 >> 2] = $100; //@line 1063
   $354 = $ReallocAsyncCtx2 + 200 | 0; //@line 1064
   HEAP32[$354 >> 2] = $102; //@line 1065
   $355 = $ReallocAsyncCtx2 + 204 | 0; //@line 1066
   HEAP32[$355 >> 2] = $104; //@line 1067
   $356 = $ReallocAsyncCtx2 + 208 | 0; //@line 1068
   HEAP32[$356 >> 2] = $108; //@line 1069
   $357 = $ReallocAsyncCtx2 + 212 | 0; //@line 1070
   HEAP32[$357 >> 2] = $110; //@line 1071
   $358 = $ReallocAsyncCtx2 + 216 | 0; //@line 1072
   HEAP32[$358 >> 2] = $112; //@line 1073
   $359 = $ReallocAsyncCtx2 + 220 | 0; //@line 1074
   HEAP32[$359 >> 2] = $114; //@line 1075
   $360 = $ReallocAsyncCtx2 + 224 | 0; //@line 1076
   HEAP32[$360 >> 2] = $116; //@line 1077
   $361 = $ReallocAsyncCtx2 + 228 | 0; //@line 1078
   HEAP32[$361 >> 2] = $118; //@line 1079
   $362 = $ReallocAsyncCtx2 + 232 | 0; //@line 1080
   HEAP32[$362 >> 2] = $120; //@line 1081
   $363 = $ReallocAsyncCtx2 + 236 | 0; //@line 1082
   HEAP32[$363 >> 2] = $122; //@line 1083
   $364 = $ReallocAsyncCtx2 + 240 | 0; //@line 1084
   HEAP32[$364 >> 2] = $124; //@line 1085
   $365 = $ReallocAsyncCtx2 + 244 | 0; //@line 1086
   HEAP32[$365 >> 2] = $126; //@line 1087
   $366 = $ReallocAsyncCtx2 + 248 | 0; //@line 1088
   HEAP32[$366 >> 2] = $128; //@line 1089
   $367 = $ReallocAsyncCtx2 + 252 | 0; //@line 1090
   HEAP32[$367 >> 2] = $130; //@line 1091
   $368 = $ReallocAsyncCtx2 + 256 | 0; //@line 1092
   HEAP32[$368 >> 2] = $132; //@line 1093
   $369 = $ReallocAsyncCtx2 + 260 | 0; //@line 1094
   HEAP32[$369 >> 2] = $134; //@line 1095
   $370 = $ReallocAsyncCtx2 + 264 | 0; //@line 1096
   HEAP32[$370 >> 2] = $136; //@line 1097
   sp = STACKTOP; //@line 1098
   return;
  }
  HEAP8[___async_retval >> 0] = $303; //@line 1102
  ___async_unwind = 0; //@line 1103
  HEAP32[$ReallocAsyncCtx2 >> 2] = 591; //@line 1104
  $304 = $ReallocAsyncCtx2 + 4 | 0; //@line 1105
  HEAP32[$304 >> 2] = $2; //@line 1106
  $305 = $ReallocAsyncCtx2 + 8 | 0; //@line 1107
  HEAP32[$305 >> 2] = $4; //@line 1108
  $306 = $ReallocAsyncCtx2 + 12 | 0; //@line 1109
  HEAP32[$306 >> 2] = $6; //@line 1110
  $307 = $ReallocAsyncCtx2 + 16 | 0; //@line 1111
  HEAP32[$307 >> 2] = $8; //@line 1112
  $308 = $ReallocAsyncCtx2 + 20 | 0; //@line 1113
  HEAP32[$308 >> 2] = $16; //@line 1114
  $309 = $ReallocAsyncCtx2 + 24 | 0; //@line 1115
  HEAP32[$309 >> 2] = $12; //@line 1116
  $310 = $ReallocAsyncCtx2 + 28 | 0; //@line 1117
  HEAP32[$310 >> 2] = $14; //@line 1118
  $311 = $ReallocAsyncCtx2 + 32 | 0; //@line 1119
  HEAP8[$311 >> 0] = $24; //@line 1120
  $312 = $ReallocAsyncCtx2 + 33 | 0; //@line 1121
  HEAP8[$312 >> 0] = $18; //@line 1122
  $313 = $ReallocAsyncCtx2 + 36 | 0; //@line 1123
  HEAP32[$313 >> 2] = $20; //@line 1124
  $314 = $ReallocAsyncCtx2 + 40 | 0; //@line 1125
  HEAP32[$314 >> 2] = $10; //@line 1126
  $315 = $ReallocAsyncCtx2 + 44 | 0; //@line 1127
  HEAP32[$315 >> 2] = $22; //@line 1128
  $316 = $ReallocAsyncCtx2 + 48 | 0; //@line 1129
  HEAP8[$316 >> 0] = $26; //@line 1130
  $317 = $ReallocAsyncCtx2 + 52 | 0; //@line 1131
  HEAP32[$317 >> 2] = $28; //@line 1132
  $318 = $ReallocAsyncCtx2 + 56 | 0; //@line 1133
  HEAP32[$318 >> 2] = $30; //@line 1134
  $319 = $ReallocAsyncCtx2 + 60 | 0; //@line 1135
  HEAP32[$319 >> 2] = $32; //@line 1136
  $320 = $ReallocAsyncCtx2 + 64 | 0; //@line 1137
  HEAP32[$320 >> 2] = $34; //@line 1138
  $321 = $ReallocAsyncCtx2 + 68 | 0; //@line 1139
  HEAP8[$321 >> 0] = $292; //@line 1140
  $322 = $ReallocAsyncCtx2 + 72 | 0; //@line 1141
  HEAP32[$322 >> 2] = $36; //@line 1142
  $323 = $ReallocAsyncCtx2 + 76 | 0; //@line 1143
  HEAP32[$323 >> 2] = $38; //@line 1144
  $324 = $ReallocAsyncCtx2 + 80 | 0; //@line 1145
  HEAP32[$324 >> 2] = $40; //@line 1146
  $325 = $ReallocAsyncCtx2 + 84 | 0; //@line 1147
  HEAP32[$325 >> 2] = $42; //@line 1148
  $326 = $ReallocAsyncCtx2 + 88 | 0; //@line 1149
  HEAP32[$326 >> 2] = $44; //@line 1150
  $327 = $ReallocAsyncCtx2 + 92 | 0; //@line 1151
  HEAP32[$327 >> 2] = $46; //@line 1152
  $328 = $ReallocAsyncCtx2 + 96 | 0; //@line 1153
  HEAP32[$328 >> 2] = $48; //@line 1154
  $329 = $ReallocAsyncCtx2 + 100 | 0; //@line 1155
  HEAP32[$329 >> 2] = $50; //@line 1156
  $330 = $ReallocAsyncCtx2 + 104 | 0; //@line 1157
  HEAP32[$330 >> 2] = $52; //@line 1158
  $331 = $ReallocAsyncCtx2 + 108 | 0; //@line 1159
  HEAP32[$331 >> 2] = $54; //@line 1160
  $332 = $ReallocAsyncCtx2 + 112 | 0; //@line 1161
  HEAP32[$332 >> 2] = $56; //@line 1162
  $333 = $ReallocAsyncCtx2 + 116 | 0; //@line 1163
  HEAP32[$333 >> 2] = $62; //@line 1164
  $334 = $ReallocAsyncCtx2 + 120 | 0; //@line 1165
  HEAP32[$334 >> 2] = $58; //@line 1166
  $335 = $ReallocAsyncCtx2 + 124 | 0; //@line 1167
  HEAP32[$335 >> 2] = $60; //@line 1168
  $336 = $ReallocAsyncCtx2 + 128 | 0; //@line 1169
  HEAP32[$336 >> 2] = $64; //@line 1170
  $337 = $ReallocAsyncCtx2 + 132 | 0; //@line 1171
  HEAP32[$337 >> 2] = $68; //@line 1172
  $338 = $ReallocAsyncCtx2 + 136 | 0; //@line 1173
  HEAP32[$338 >> 2] = $66; //@line 1174
  $339 = $ReallocAsyncCtx2 + 140 | 0; //@line 1175
  HEAP32[$339 >> 2] = $70; //@line 1176
  $340 = $ReallocAsyncCtx2 + 144 | 0; //@line 1177
  HEAP32[$340 >> 2] = $72; //@line 1178
  $341 = $ReallocAsyncCtx2 + 148 | 0; //@line 1179
  HEAP32[$341 >> 2] = $74; //@line 1180
  $342 = $ReallocAsyncCtx2 + 152 | 0; //@line 1181
  HEAP32[$342 >> 2] = $76; //@line 1182
  $343 = $ReallocAsyncCtx2 + 156 | 0; //@line 1183
  HEAP32[$343 >> 2] = $78; //@line 1184
  $344 = $ReallocAsyncCtx2 + 160 | 0; //@line 1185
  HEAP32[$344 >> 2] = $80; //@line 1186
  $345 = $ReallocAsyncCtx2 + 164 | 0; //@line 1187
  HEAP32[$345 >> 2] = $82; //@line 1188
  $346 = $ReallocAsyncCtx2 + 168 | 0; //@line 1189
  HEAP32[$346 >> 2] = $84; //@line 1190
  $347 = $ReallocAsyncCtx2 + 172 | 0; //@line 1191
  HEAP32[$347 >> 2] = $90; //@line 1192
  $348 = $ReallocAsyncCtx2 + 176 | 0; //@line 1193
  HEAP32[$348 >> 2] = $86; //@line 1194
  $349 = $ReallocAsyncCtx2 + 180 | 0; //@line 1195
  HEAP32[$349 >> 2] = $88; //@line 1196
  $350 = $ReallocAsyncCtx2 + 184 | 0; //@line 1197
  HEAP32[$350 >> 2] = $92; //@line 1198
  $351 = $ReallocAsyncCtx2 + 188 | 0; //@line 1199
  HEAP32[$351 >> 2] = $94; //@line 1200
  $352 = $ReallocAsyncCtx2 + 192 | 0; //@line 1201
  HEAP32[$352 >> 2] = $96; //@line 1202
  $353 = $ReallocAsyncCtx2 + 196 | 0; //@line 1203
  HEAP32[$353 >> 2] = $100; //@line 1204
  $354 = $ReallocAsyncCtx2 + 200 | 0; //@line 1205
  HEAP32[$354 >> 2] = $102; //@line 1206
  $355 = $ReallocAsyncCtx2 + 204 | 0; //@line 1207
  HEAP32[$355 >> 2] = $104; //@line 1208
  $356 = $ReallocAsyncCtx2 + 208 | 0; //@line 1209
  HEAP32[$356 >> 2] = $108; //@line 1210
  $357 = $ReallocAsyncCtx2 + 212 | 0; //@line 1211
  HEAP32[$357 >> 2] = $110; //@line 1212
  $358 = $ReallocAsyncCtx2 + 216 | 0; //@line 1213
  HEAP32[$358 >> 2] = $112; //@line 1214
  $359 = $ReallocAsyncCtx2 + 220 | 0; //@line 1215
  HEAP32[$359 >> 2] = $114; //@line 1216
  $360 = $ReallocAsyncCtx2 + 224 | 0; //@line 1217
  HEAP32[$360 >> 2] = $116; //@line 1218
  $361 = $ReallocAsyncCtx2 + 228 | 0; //@line 1219
  HEAP32[$361 >> 2] = $118; //@line 1220
  $362 = $ReallocAsyncCtx2 + 232 | 0; //@line 1221
  HEAP32[$362 >> 2] = $120; //@line 1222
  $363 = $ReallocAsyncCtx2 + 236 | 0; //@line 1223
  HEAP32[$363 >> 2] = $122; //@line 1224
  $364 = $ReallocAsyncCtx2 + 240 | 0; //@line 1225
  HEAP32[$364 >> 2] = $124; //@line 1226
  $365 = $ReallocAsyncCtx2 + 244 | 0; //@line 1227
  HEAP32[$365 >> 2] = $126; //@line 1228
  $366 = $ReallocAsyncCtx2 + 248 | 0; //@line 1229
  HEAP32[$366 >> 2] = $128; //@line 1230
  $367 = $ReallocAsyncCtx2 + 252 | 0; //@line 1231
  HEAP32[$367 >> 2] = $130; //@line 1232
  $368 = $ReallocAsyncCtx2 + 256 | 0; //@line 1233
  HEAP32[$368 >> 2] = $132; //@line 1234
  $369 = $ReallocAsyncCtx2 + 260 | 0; //@line 1235
  HEAP32[$369 >> 2] = $134; //@line 1236
  $370 = $ReallocAsyncCtx2 + 264 | 0; //@line 1237
  HEAP32[$370 >> 2] = $136; //@line 1238
  sp = STACKTOP; //@line 1239
  return;
 } else if ((label | 0) == 22) {
  HEAP8[$68 >> 0] = HEAP8[$12 + ($139 & 255) >> 0] | 0; //@line 1247
  HEAP32[$56 >> 2] = $130; //@line 1248
  HEAP32[$104 >> 2] = (HEAPU8[$12 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$12 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$12 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 1269
  HEAP32[$94 >> 2] = 0; //@line 1270
  $411 = $$0$be + 6 << 24 >> 24; //@line 1271
  HEAP8[$92 >> 0] = HEAP8[$12 + ($$0$be + 5 & 255) >> 0] | 0; //@line 1275
  $417 = HEAP32[(HEAP32[$82 >> 2] | 0) + 8 >> 2] | 0; //@line 1278
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 1279
  $418 = FUNCTION_TABLE_iii[$417 & 31]($34, $54) | 0; //@line 1280
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 592; //@line 1283
   $419 = $ReallocAsyncCtx3 + 4 | 0; //@line 1284
   HEAP32[$419 >> 2] = $2; //@line 1285
   $420 = $ReallocAsyncCtx3 + 8 | 0; //@line 1286
   HEAP32[$420 >> 2] = $4; //@line 1287
   $421 = $ReallocAsyncCtx3 + 12 | 0; //@line 1288
   HEAP32[$421 >> 2] = $6; //@line 1289
   $422 = $ReallocAsyncCtx3 + 16 | 0; //@line 1290
   HEAP32[$422 >> 2] = $8; //@line 1291
   $423 = $ReallocAsyncCtx3 + 20 | 0; //@line 1292
   HEAP32[$423 >> 2] = $16; //@line 1293
   $424 = $ReallocAsyncCtx3 + 24 | 0; //@line 1294
   HEAP32[$424 >> 2] = $12; //@line 1295
   $425 = $ReallocAsyncCtx3 + 28 | 0; //@line 1296
   HEAP32[$425 >> 2] = $14; //@line 1297
   $426 = $ReallocAsyncCtx3 + 32 | 0; //@line 1298
   HEAP8[$426 >> 0] = $24; //@line 1299
   $427 = $ReallocAsyncCtx3 + 33 | 0; //@line 1300
   HEAP8[$427 >> 0] = $18; //@line 1301
   $428 = $ReallocAsyncCtx3 + 36 | 0; //@line 1302
   HEAP32[$428 >> 2] = $20; //@line 1303
   $429 = $ReallocAsyncCtx3 + 40 | 0; //@line 1304
   HEAP32[$429 >> 2] = $10; //@line 1305
   $430 = $ReallocAsyncCtx3 + 44 | 0; //@line 1306
   HEAP32[$430 >> 2] = $22; //@line 1307
   $431 = $ReallocAsyncCtx3 + 48 | 0; //@line 1308
   HEAP8[$431 >> 0] = $26; //@line 1309
   $432 = $ReallocAsyncCtx3 + 52 | 0; //@line 1310
   HEAP32[$432 >> 2] = $28; //@line 1311
   $433 = $ReallocAsyncCtx3 + 56 | 0; //@line 1312
   HEAP32[$433 >> 2] = $30; //@line 1313
   $434 = $ReallocAsyncCtx3 + 60 | 0; //@line 1314
   HEAP32[$434 >> 2] = $32; //@line 1315
   $435 = $ReallocAsyncCtx3 + 64 | 0; //@line 1316
   HEAP32[$435 >> 2] = $34; //@line 1317
   $436 = $ReallocAsyncCtx3 + 68 | 0; //@line 1318
   HEAP32[$436 >> 2] = $36; //@line 1319
   $437 = $ReallocAsyncCtx3 + 72 | 0; //@line 1320
   HEAP32[$437 >> 2] = $38; //@line 1321
   $438 = $ReallocAsyncCtx3 + 76 | 0; //@line 1322
   HEAP32[$438 >> 2] = $40; //@line 1323
   $439 = $ReallocAsyncCtx3 + 80 | 0; //@line 1324
   HEAP32[$439 >> 2] = $42; //@line 1325
   $440 = $ReallocAsyncCtx3 + 84 | 0; //@line 1326
   HEAP32[$440 >> 2] = $44; //@line 1327
   $441 = $ReallocAsyncCtx3 + 88 | 0; //@line 1328
   HEAP32[$441 >> 2] = $46; //@line 1329
   $442 = $ReallocAsyncCtx3 + 92 | 0; //@line 1330
   HEAP32[$442 >> 2] = $48; //@line 1331
   $443 = $ReallocAsyncCtx3 + 96 | 0; //@line 1332
   HEAP32[$443 >> 2] = $50; //@line 1333
   $444 = $ReallocAsyncCtx3 + 100 | 0; //@line 1334
   HEAP32[$444 >> 2] = $52; //@line 1335
   $445 = $ReallocAsyncCtx3 + 104 | 0; //@line 1336
   HEAP32[$445 >> 2] = $54; //@line 1337
   $446 = $ReallocAsyncCtx3 + 108 | 0; //@line 1338
   HEAP32[$446 >> 2] = $56; //@line 1339
   $447 = $ReallocAsyncCtx3 + 112 | 0; //@line 1340
   HEAP32[$447 >> 2] = $62; //@line 1341
   $448 = $ReallocAsyncCtx3 + 116 | 0; //@line 1342
   HEAP32[$448 >> 2] = $58; //@line 1343
   $449 = $ReallocAsyncCtx3 + 120 | 0; //@line 1344
   HEAP32[$449 >> 2] = $60; //@line 1345
   $450 = $ReallocAsyncCtx3 + 124 | 0; //@line 1346
   HEAP32[$450 >> 2] = $64; //@line 1347
   $451 = $ReallocAsyncCtx3 + 128 | 0; //@line 1348
   HEAP32[$451 >> 2] = $68; //@line 1349
   $452 = $ReallocAsyncCtx3 + 132 | 0; //@line 1350
   HEAP32[$452 >> 2] = $66; //@line 1351
   $453 = $ReallocAsyncCtx3 + 136 | 0; //@line 1352
   HEAP32[$453 >> 2] = $70; //@line 1353
   $454 = $ReallocAsyncCtx3 + 140 | 0; //@line 1354
   HEAP32[$454 >> 2] = $72; //@line 1355
   $455 = $ReallocAsyncCtx3 + 144 | 0; //@line 1356
   HEAP32[$455 >> 2] = $74; //@line 1357
   $456 = $ReallocAsyncCtx3 + 148 | 0; //@line 1358
   HEAP32[$456 >> 2] = $76; //@line 1359
   $457 = $ReallocAsyncCtx3 + 152 | 0; //@line 1360
   HEAP32[$457 >> 2] = $78; //@line 1361
   $458 = $ReallocAsyncCtx3 + 156 | 0; //@line 1362
   HEAP32[$458 >> 2] = $80; //@line 1363
   $459 = $ReallocAsyncCtx3 + 160 | 0; //@line 1364
   HEAP32[$459 >> 2] = $82; //@line 1365
   $460 = $ReallocAsyncCtx3 + 164 | 0; //@line 1366
   HEAP32[$460 >> 2] = $84; //@line 1367
   $461 = $ReallocAsyncCtx3 + 168 | 0; //@line 1368
   HEAP32[$461 >> 2] = $90; //@line 1369
   $462 = $ReallocAsyncCtx3 + 172 | 0; //@line 1370
   HEAP32[$462 >> 2] = $86; //@line 1371
   $463 = $ReallocAsyncCtx3 + 176 | 0; //@line 1372
   HEAP32[$463 >> 2] = $88; //@line 1373
   $464 = $ReallocAsyncCtx3 + 180 | 0; //@line 1374
   HEAP32[$464 >> 2] = $92; //@line 1375
   $465 = $ReallocAsyncCtx3 + 184 | 0; //@line 1376
   HEAP32[$465 >> 2] = $94; //@line 1377
   $466 = $ReallocAsyncCtx3 + 188 | 0; //@line 1378
   HEAP32[$466 >> 2] = $96; //@line 1379
   $467 = $ReallocAsyncCtx3 + 192 | 0; //@line 1380
   HEAP32[$467 >> 2] = $100; //@line 1381
   $468 = $ReallocAsyncCtx3 + 196 | 0; //@line 1382
   HEAP32[$468 >> 2] = $102; //@line 1383
   $469 = $ReallocAsyncCtx3 + 200 | 0; //@line 1384
   HEAP32[$469 >> 2] = $104; //@line 1385
   $470 = $ReallocAsyncCtx3 + 204 | 0; //@line 1386
   HEAP32[$470 >> 2] = $108; //@line 1387
   $471 = $ReallocAsyncCtx3 + 208 | 0; //@line 1388
   HEAP32[$471 >> 2] = $110; //@line 1389
   $472 = $ReallocAsyncCtx3 + 212 | 0; //@line 1390
   HEAP32[$472 >> 2] = $112; //@line 1391
   $473 = $ReallocAsyncCtx3 + 216 | 0; //@line 1392
   HEAP8[$473 >> 0] = $411; //@line 1393
   $474 = $ReallocAsyncCtx3 + 220 | 0; //@line 1394
   HEAP32[$474 >> 2] = $114; //@line 1395
   $475 = $ReallocAsyncCtx3 + 224 | 0; //@line 1396
   HEAP32[$475 >> 2] = $116; //@line 1397
   $476 = $ReallocAsyncCtx3 + 228 | 0; //@line 1398
   HEAP32[$476 >> 2] = $118; //@line 1399
   $477 = $ReallocAsyncCtx3 + 232 | 0; //@line 1400
   HEAP32[$477 >> 2] = $120; //@line 1401
   $478 = $ReallocAsyncCtx3 + 236 | 0; //@line 1402
   HEAP32[$478 >> 2] = $122; //@line 1403
   $479 = $ReallocAsyncCtx3 + 240 | 0; //@line 1404
   HEAP32[$479 >> 2] = $124; //@line 1405
   $480 = $ReallocAsyncCtx3 + 244 | 0; //@line 1406
   HEAP32[$480 >> 2] = $126; //@line 1407
   $481 = $ReallocAsyncCtx3 + 248 | 0; //@line 1408
   HEAP32[$481 >> 2] = $128; //@line 1409
   $482 = $ReallocAsyncCtx3 + 252 | 0; //@line 1410
   HEAP32[$482 >> 2] = $130; //@line 1411
   $483 = $ReallocAsyncCtx3 + 256 | 0; //@line 1412
   HEAP32[$483 >> 2] = $132; //@line 1413
   $484 = $ReallocAsyncCtx3 + 260 | 0; //@line 1414
   HEAP32[$484 >> 2] = $134; //@line 1415
   $485 = $ReallocAsyncCtx3 + 264 | 0; //@line 1416
   HEAP32[$485 >> 2] = $136; //@line 1417
   sp = STACKTOP; //@line 1418
   return;
  }
  HEAP8[___async_retval >> 0] = $418; //@line 1422
  ___async_unwind = 0; //@line 1423
  HEAP32[$ReallocAsyncCtx3 >> 2] = 592; //@line 1424
  $419 = $ReallocAsyncCtx3 + 4 | 0; //@line 1425
  HEAP32[$419 >> 2] = $2; //@line 1426
  $420 = $ReallocAsyncCtx3 + 8 | 0; //@line 1427
  HEAP32[$420 >> 2] = $4; //@line 1428
  $421 = $ReallocAsyncCtx3 + 12 | 0; //@line 1429
  HEAP32[$421 >> 2] = $6; //@line 1430
  $422 = $ReallocAsyncCtx3 + 16 | 0; //@line 1431
  HEAP32[$422 >> 2] = $8; //@line 1432
  $423 = $ReallocAsyncCtx3 + 20 | 0; //@line 1433
  HEAP32[$423 >> 2] = $16; //@line 1434
  $424 = $ReallocAsyncCtx3 + 24 | 0; //@line 1435
  HEAP32[$424 >> 2] = $12; //@line 1436
  $425 = $ReallocAsyncCtx3 + 28 | 0; //@line 1437
  HEAP32[$425 >> 2] = $14; //@line 1438
  $426 = $ReallocAsyncCtx3 + 32 | 0; //@line 1439
  HEAP8[$426 >> 0] = $24; //@line 1440
  $427 = $ReallocAsyncCtx3 + 33 | 0; //@line 1441
  HEAP8[$427 >> 0] = $18; //@line 1442
  $428 = $ReallocAsyncCtx3 + 36 | 0; //@line 1443
  HEAP32[$428 >> 2] = $20; //@line 1444
  $429 = $ReallocAsyncCtx3 + 40 | 0; //@line 1445
  HEAP32[$429 >> 2] = $10; //@line 1446
  $430 = $ReallocAsyncCtx3 + 44 | 0; //@line 1447
  HEAP32[$430 >> 2] = $22; //@line 1448
  $431 = $ReallocAsyncCtx3 + 48 | 0; //@line 1449
  HEAP8[$431 >> 0] = $26; //@line 1450
  $432 = $ReallocAsyncCtx3 + 52 | 0; //@line 1451
  HEAP32[$432 >> 2] = $28; //@line 1452
  $433 = $ReallocAsyncCtx3 + 56 | 0; //@line 1453
  HEAP32[$433 >> 2] = $30; //@line 1454
  $434 = $ReallocAsyncCtx3 + 60 | 0; //@line 1455
  HEAP32[$434 >> 2] = $32; //@line 1456
  $435 = $ReallocAsyncCtx3 + 64 | 0; //@line 1457
  HEAP32[$435 >> 2] = $34; //@line 1458
  $436 = $ReallocAsyncCtx3 + 68 | 0; //@line 1459
  HEAP32[$436 >> 2] = $36; //@line 1460
  $437 = $ReallocAsyncCtx3 + 72 | 0; //@line 1461
  HEAP32[$437 >> 2] = $38; //@line 1462
  $438 = $ReallocAsyncCtx3 + 76 | 0; //@line 1463
  HEAP32[$438 >> 2] = $40; //@line 1464
  $439 = $ReallocAsyncCtx3 + 80 | 0; //@line 1465
  HEAP32[$439 >> 2] = $42; //@line 1466
  $440 = $ReallocAsyncCtx3 + 84 | 0; //@line 1467
  HEAP32[$440 >> 2] = $44; //@line 1468
  $441 = $ReallocAsyncCtx3 + 88 | 0; //@line 1469
  HEAP32[$441 >> 2] = $46; //@line 1470
  $442 = $ReallocAsyncCtx3 + 92 | 0; //@line 1471
  HEAP32[$442 >> 2] = $48; //@line 1472
  $443 = $ReallocAsyncCtx3 + 96 | 0; //@line 1473
  HEAP32[$443 >> 2] = $50; //@line 1474
  $444 = $ReallocAsyncCtx3 + 100 | 0; //@line 1475
  HEAP32[$444 >> 2] = $52; //@line 1476
  $445 = $ReallocAsyncCtx3 + 104 | 0; //@line 1477
  HEAP32[$445 >> 2] = $54; //@line 1478
  $446 = $ReallocAsyncCtx3 + 108 | 0; //@line 1479
  HEAP32[$446 >> 2] = $56; //@line 1480
  $447 = $ReallocAsyncCtx3 + 112 | 0; //@line 1481
  HEAP32[$447 >> 2] = $62; //@line 1482
  $448 = $ReallocAsyncCtx3 + 116 | 0; //@line 1483
  HEAP32[$448 >> 2] = $58; //@line 1484
  $449 = $ReallocAsyncCtx3 + 120 | 0; //@line 1485
  HEAP32[$449 >> 2] = $60; //@line 1486
  $450 = $ReallocAsyncCtx3 + 124 | 0; //@line 1487
  HEAP32[$450 >> 2] = $64; //@line 1488
  $451 = $ReallocAsyncCtx3 + 128 | 0; //@line 1489
  HEAP32[$451 >> 2] = $68; //@line 1490
  $452 = $ReallocAsyncCtx3 + 132 | 0; //@line 1491
  HEAP32[$452 >> 2] = $66; //@line 1492
  $453 = $ReallocAsyncCtx3 + 136 | 0; //@line 1493
  HEAP32[$453 >> 2] = $70; //@line 1494
  $454 = $ReallocAsyncCtx3 + 140 | 0; //@line 1495
  HEAP32[$454 >> 2] = $72; //@line 1496
  $455 = $ReallocAsyncCtx3 + 144 | 0; //@line 1497
  HEAP32[$455 >> 2] = $74; //@line 1498
  $456 = $ReallocAsyncCtx3 + 148 | 0; //@line 1499
  HEAP32[$456 >> 2] = $76; //@line 1500
  $457 = $ReallocAsyncCtx3 + 152 | 0; //@line 1501
  HEAP32[$457 >> 2] = $78; //@line 1502
  $458 = $ReallocAsyncCtx3 + 156 | 0; //@line 1503
  HEAP32[$458 >> 2] = $80; //@line 1504
  $459 = $ReallocAsyncCtx3 + 160 | 0; //@line 1505
  HEAP32[$459 >> 2] = $82; //@line 1506
  $460 = $ReallocAsyncCtx3 + 164 | 0; //@line 1507
  HEAP32[$460 >> 2] = $84; //@line 1508
  $461 = $ReallocAsyncCtx3 + 168 | 0; //@line 1509
  HEAP32[$461 >> 2] = $90; //@line 1510
  $462 = $ReallocAsyncCtx3 + 172 | 0; //@line 1511
  HEAP32[$462 >> 2] = $86; //@line 1512
  $463 = $ReallocAsyncCtx3 + 176 | 0; //@line 1513
  HEAP32[$463 >> 2] = $88; //@line 1514
  $464 = $ReallocAsyncCtx3 + 180 | 0; //@line 1515
  HEAP32[$464 >> 2] = $92; //@line 1516
  $465 = $ReallocAsyncCtx3 + 184 | 0; //@line 1517
  HEAP32[$465 >> 2] = $94; //@line 1518
  $466 = $ReallocAsyncCtx3 + 188 | 0; //@line 1519
  HEAP32[$466 >> 2] = $96; //@line 1520
  $467 = $ReallocAsyncCtx3 + 192 | 0; //@line 1521
  HEAP32[$467 >> 2] = $100; //@line 1522
  $468 = $ReallocAsyncCtx3 + 196 | 0; //@line 1523
  HEAP32[$468 >> 2] = $102; //@line 1524
  $469 = $ReallocAsyncCtx3 + 200 | 0; //@line 1525
  HEAP32[$469 >> 2] = $104; //@line 1526
  $470 = $ReallocAsyncCtx3 + 204 | 0; //@line 1527
  HEAP32[$470 >> 2] = $108; //@line 1528
  $471 = $ReallocAsyncCtx3 + 208 | 0; //@line 1529
  HEAP32[$471 >> 2] = $110; //@line 1530
  $472 = $ReallocAsyncCtx3 + 212 | 0; //@line 1531
  HEAP32[$472 >> 2] = $112; //@line 1532
  $473 = $ReallocAsyncCtx3 + 216 | 0; //@line 1533
  HEAP8[$473 >> 0] = $411; //@line 1534
  $474 = $ReallocAsyncCtx3 + 220 | 0; //@line 1535
  HEAP32[$474 >> 2] = $114; //@line 1536
  $475 = $ReallocAsyncCtx3 + 224 | 0; //@line 1537
  HEAP32[$475 >> 2] = $116; //@line 1538
  $476 = $ReallocAsyncCtx3 + 228 | 0; //@line 1539
  HEAP32[$476 >> 2] = $118; //@line 1540
  $477 = $ReallocAsyncCtx3 + 232 | 0; //@line 1541
  HEAP32[$477 >> 2] = $120; //@line 1542
  $478 = $ReallocAsyncCtx3 + 236 | 0; //@line 1543
  HEAP32[$478 >> 2] = $122; //@line 1544
  $479 = $ReallocAsyncCtx3 + 240 | 0; //@line 1545
  HEAP32[$479 >> 2] = $124; //@line 1546
  $480 = $ReallocAsyncCtx3 + 244 | 0; //@line 1547
  HEAP32[$480 >> 2] = $126; //@line 1548
  $481 = $ReallocAsyncCtx3 + 248 | 0; //@line 1549
  HEAP32[$481 >> 2] = $128; //@line 1550
  $482 = $ReallocAsyncCtx3 + 252 | 0; //@line 1551
  HEAP32[$482 >> 2] = $130; //@line 1552
  $483 = $ReallocAsyncCtx3 + 256 | 0; //@line 1553
  HEAP32[$483 >> 2] = $132; //@line 1554
  $484 = $ReallocAsyncCtx3 + 260 | 0; //@line 1555
  HEAP32[$484 >> 2] = $134; //@line 1556
  $485 = $ReallocAsyncCtx3 + 264 | 0; //@line 1557
  HEAP32[$485 >> 2] = $136; //@line 1558
  sp = STACKTOP; //@line 1559
  return;
 } else if ((label | 0) == 27) {
  $504 = $$0$be + 2 << 24 >> 24; //@line 1563
  $507 = HEAP8[$12 + ($139 & 255) >> 0] | 0; //@line 1566
  HEAP8[$120 >> 0] = 0; //@line 1567
  $508 = $507 & 255; //@line 1568
  HEAP8[$116 >> 0] = $508 >>> 5 & 1; //@line 1572
  if ($508 & 16 | 0) {
   HEAP8[$120 >> 0] = 1; //@line 1576
  }
  HEAP8[$40 >> 0] = $508 & 15; //@line 1580
  $517 = HEAP32[(HEAP32[$32 >> 2] | 0) + 44 >> 2] | 0; //@line 1583
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 1584
  $518 = FUNCTION_TABLE_iii[$517 & 31]($34, $84) | 0; //@line 1585
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 593; //@line 1588
   $519 = $ReallocAsyncCtx4 + 4 | 0; //@line 1589
   HEAP32[$519 >> 2] = $2; //@line 1590
   $520 = $ReallocAsyncCtx4 + 8 | 0; //@line 1591
   HEAP32[$520 >> 2] = $4; //@line 1592
   $521 = $ReallocAsyncCtx4 + 12 | 0; //@line 1593
   HEAP32[$521 >> 2] = $6; //@line 1594
   $522 = $ReallocAsyncCtx4 + 16 | 0; //@line 1595
   HEAP8[$522 >> 0] = $504; //@line 1596
   $523 = $ReallocAsyncCtx4 + 20 | 0; //@line 1597
   HEAP32[$523 >> 2] = $8; //@line 1598
   $524 = $ReallocAsyncCtx4 + 24 | 0; //@line 1599
   HEAP32[$524 >> 2] = $16; //@line 1600
   $525 = $ReallocAsyncCtx4 + 28 | 0; //@line 1601
   HEAP32[$525 >> 2] = $12; //@line 1602
   $526 = $ReallocAsyncCtx4 + 32 | 0; //@line 1603
   HEAP32[$526 >> 2] = $14; //@line 1604
   $527 = $ReallocAsyncCtx4 + 36 | 0; //@line 1605
   HEAP8[$527 >> 0] = $24; //@line 1606
   $528 = $ReallocAsyncCtx4 + 37 | 0; //@line 1607
   HEAP8[$528 >> 0] = $18; //@line 1608
   $529 = $ReallocAsyncCtx4 + 40 | 0; //@line 1609
   HEAP32[$529 >> 2] = $20; //@line 1610
   $530 = $ReallocAsyncCtx4 + 44 | 0; //@line 1611
   HEAP32[$530 >> 2] = $10; //@line 1612
   $531 = $ReallocAsyncCtx4 + 48 | 0; //@line 1613
   HEAP32[$531 >> 2] = $22; //@line 1614
   $532 = $ReallocAsyncCtx4 + 52 | 0; //@line 1615
   HEAP8[$532 >> 0] = $26; //@line 1616
   $533 = $ReallocAsyncCtx4 + 56 | 0; //@line 1617
   HEAP32[$533 >> 2] = $28; //@line 1618
   $534 = $ReallocAsyncCtx4 + 60 | 0; //@line 1619
   HEAP32[$534 >> 2] = $30; //@line 1620
   $535 = $ReallocAsyncCtx4 + 64 | 0; //@line 1621
   HEAP32[$535 >> 2] = $32; //@line 1622
   $536 = $ReallocAsyncCtx4 + 68 | 0; //@line 1623
   HEAP32[$536 >> 2] = $34; //@line 1624
   $537 = $ReallocAsyncCtx4 + 72 | 0; //@line 1625
   HEAP32[$537 >> 2] = $36; //@line 1626
   $538 = $ReallocAsyncCtx4 + 76 | 0; //@line 1627
   HEAP32[$538 >> 2] = $38; //@line 1628
   $539 = $ReallocAsyncCtx4 + 80 | 0; //@line 1629
   HEAP32[$539 >> 2] = $40; //@line 1630
   $540 = $ReallocAsyncCtx4 + 84 | 0; //@line 1631
   HEAP32[$540 >> 2] = $42; //@line 1632
   $541 = $ReallocAsyncCtx4 + 88 | 0; //@line 1633
   HEAP32[$541 >> 2] = $44; //@line 1634
   $542 = $ReallocAsyncCtx4 + 92 | 0; //@line 1635
   HEAP32[$542 >> 2] = $46; //@line 1636
   $543 = $ReallocAsyncCtx4 + 96 | 0; //@line 1637
   HEAP32[$543 >> 2] = $48; //@line 1638
   $544 = $ReallocAsyncCtx4 + 100 | 0; //@line 1639
   HEAP32[$544 >> 2] = $50; //@line 1640
   $545 = $ReallocAsyncCtx4 + 104 | 0; //@line 1641
   HEAP32[$545 >> 2] = $52; //@line 1642
   $546 = $ReallocAsyncCtx4 + 108 | 0; //@line 1643
   HEAP32[$546 >> 2] = $54; //@line 1644
   $547 = $ReallocAsyncCtx4 + 112 | 0; //@line 1645
   HEAP32[$547 >> 2] = $56; //@line 1646
   $548 = $ReallocAsyncCtx4 + 116 | 0; //@line 1647
   HEAP32[$548 >> 2] = $62; //@line 1648
   $549 = $ReallocAsyncCtx4 + 120 | 0; //@line 1649
   HEAP32[$549 >> 2] = $58; //@line 1650
   $550 = $ReallocAsyncCtx4 + 124 | 0; //@line 1651
   HEAP32[$550 >> 2] = $60; //@line 1652
   $551 = $ReallocAsyncCtx4 + 128 | 0; //@line 1653
   HEAP32[$551 >> 2] = $64; //@line 1654
   $552 = $ReallocAsyncCtx4 + 132 | 0; //@line 1655
   HEAP32[$552 >> 2] = $68; //@line 1656
   $553 = $ReallocAsyncCtx4 + 136 | 0; //@line 1657
   HEAP32[$553 >> 2] = $66; //@line 1658
   $554 = $ReallocAsyncCtx4 + 140 | 0; //@line 1659
   HEAP32[$554 >> 2] = $70; //@line 1660
   $555 = $ReallocAsyncCtx4 + 144 | 0; //@line 1661
   HEAP32[$555 >> 2] = $72; //@line 1662
   $556 = $ReallocAsyncCtx4 + 148 | 0; //@line 1663
   HEAP32[$556 >> 2] = $74; //@line 1664
   $557 = $ReallocAsyncCtx4 + 152 | 0; //@line 1665
   HEAP32[$557 >> 2] = $76; //@line 1666
   $558 = $ReallocAsyncCtx4 + 156 | 0; //@line 1667
   HEAP32[$558 >> 2] = $78; //@line 1668
   $559 = $ReallocAsyncCtx4 + 160 | 0; //@line 1669
   HEAP32[$559 >> 2] = $80; //@line 1670
   $560 = $ReallocAsyncCtx4 + 164 | 0; //@line 1671
   HEAP32[$560 >> 2] = $82; //@line 1672
   $561 = $ReallocAsyncCtx4 + 168 | 0; //@line 1673
   HEAP32[$561 >> 2] = $84; //@line 1674
   $562 = $ReallocAsyncCtx4 + 172 | 0; //@line 1675
   HEAP32[$562 >> 2] = $90; //@line 1676
   $563 = $ReallocAsyncCtx4 + 176 | 0; //@line 1677
   HEAP32[$563 >> 2] = $86; //@line 1678
   $564 = $ReallocAsyncCtx4 + 180 | 0; //@line 1679
   HEAP32[$564 >> 2] = $88; //@line 1680
   $565 = $ReallocAsyncCtx4 + 184 | 0; //@line 1681
   HEAP32[$565 >> 2] = $92; //@line 1682
   $566 = $ReallocAsyncCtx4 + 188 | 0; //@line 1683
   HEAP32[$566 >> 2] = $94; //@line 1684
   $567 = $ReallocAsyncCtx4 + 192 | 0; //@line 1685
   HEAP32[$567 >> 2] = $96; //@line 1686
   $568 = $ReallocAsyncCtx4 + 196 | 0; //@line 1687
   HEAP32[$568 >> 2] = $$096$be; //@line 1688
   $569 = $ReallocAsyncCtx4 + 200 | 0; //@line 1689
   HEAP32[$569 >> 2] = $100; //@line 1690
   $570 = $ReallocAsyncCtx4 + 204 | 0; //@line 1691
   HEAP32[$570 >> 2] = $102; //@line 1692
   $571 = $ReallocAsyncCtx4 + 208 | 0; //@line 1693
   HEAP32[$571 >> 2] = $104; //@line 1694
   $572 = $ReallocAsyncCtx4 + 212 | 0; //@line 1695
   HEAP32[$572 >> 2] = $108; //@line 1696
   $573 = $ReallocAsyncCtx4 + 216 | 0; //@line 1697
   HEAP32[$573 >> 2] = $110; //@line 1698
   $574 = $ReallocAsyncCtx4 + 220 | 0; //@line 1699
   HEAP32[$574 >> 2] = $112; //@line 1700
   $575 = $ReallocAsyncCtx4 + 224 | 0; //@line 1701
   HEAP32[$575 >> 2] = $114; //@line 1702
   $576 = $ReallocAsyncCtx4 + 228 | 0; //@line 1703
   HEAP32[$576 >> 2] = $116; //@line 1704
   $577 = $ReallocAsyncCtx4 + 232 | 0; //@line 1705
   HEAP32[$577 >> 2] = $118; //@line 1706
   $578 = $ReallocAsyncCtx4 + 236 | 0; //@line 1707
   HEAP32[$578 >> 2] = $120; //@line 1708
   $579 = $ReallocAsyncCtx4 + 240 | 0; //@line 1709
   HEAP32[$579 >> 2] = $122; //@line 1710
   $580 = $ReallocAsyncCtx4 + 244 | 0; //@line 1711
   HEAP32[$580 >> 2] = $124; //@line 1712
   $581 = $ReallocAsyncCtx4 + 248 | 0; //@line 1713
   HEAP32[$581 >> 2] = $126; //@line 1714
   $582 = $ReallocAsyncCtx4 + 252 | 0; //@line 1715
   HEAP32[$582 >> 2] = $128; //@line 1716
   $583 = $ReallocAsyncCtx4 + 256 | 0; //@line 1717
   HEAP32[$583 >> 2] = $130; //@line 1718
   $584 = $ReallocAsyncCtx4 + 260 | 0; //@line 1719
   HEAP32[$584 >> 2] = $132; //@line 1720
   $585 = $ReallocAsyncCtx4 + 264 | 0; //@line 1721
   HEAP32[$585 >> 2] = $134; //@line 1722
   $586 = $ReallocAsyncCtx4 + 268 | 0; //@line 1723
   HEAP32[$586 >> 2] = $136; //@line 1724
   sp = STACKTOP; //@line 1725
   return;
  }
  HEAP8[___async_retval >> 0] = $518 & 1; //@line 1730
  ___async_unwind = 0; //@line 1731
  HEAP32[$ReallocAsyncCtx4 >> 2] = 593; //@line 1732
  $519 = $ReallocAsyncCtx4 + 4 | 0; //@line 1733
  HEAP32[$519 >> 2] = $2; //@line 1734
  $520 = $ReallocAsyncCtx4 + 8 | 0; //@line 1735
  HEAP32[$520 >> 2] = $4; //@line 1736
  $521 = $ReallocAsyncCtx4 + 12 | 0; //@line 1737
  HEAP32[$521 >> 2] = $6; //@line 1738
  $522 = $ReallocAsyncCtx4 + 16 | 0; //@line 1739
  HEAP8[$522 >> 0] = $504; //@line 1740
  $523 = $ReallocAsyncCtx4 + 20 | 0; //@line 1741
  HEAP32[$523 >> 2] = $8; //@line 1742
  $524 = $ReallocAsyncCtx4 + 24 | 0; //@line 1743
  HEAP32[$524 >> 2] = $16; //@line 1744
  $525 = $ReallocAsyncCtx4 + 28 | 0; //@line 1745
  HEAP32[$525 >> 2] = $12; //@line 1746
  $526 = $ReallocAsyncCtx4 + 32 | 0; //@line 1747
  HEAP32[$526 >> 2] = $14; //@line 1748
  $527 = $ReallocAsyncCtx4 + 36 | 0; //@line 1749
  HEAP8[$527 >> 0] = $24; //@line 1750
  $528 = $ReallocAsyncCtx4 + 37 | 0; //@line 1751
  HEAP8[$528 >> 0] = $18; //@line 1752
  $529 = $ReallocAsyncCtx4 + 40 | 0; //@line 1753
  HEAP32[$529 >> 2] = $20; //@line 1754
  $530 = $ReallocAsyncCtx4 + 44 | 0; //@line 1755
  HEAP32[$530 >> 2] = $10; //@line 1756
  $531 = $ReallocAsyncCtx4 + 48 | 0; //@line 1757
  HEAP32[$531 >> 2] = $22; //@line 1758
  $532 = $ReallocAsyncCtx4 + 52 | 0; //@line 1759
  HEAP8[$532 >> 0] = $26; //@line 1760
  $533 = $ReallocAsyncCtx4 + 56 | 0; //@line 1761
  HEAP32[$533 >> 2] = $28; //@line 1762
  $534 = $ReallocAsyncCtx4 + 60 | 0; //@line 1763
  HEAP32[$534 >> 2] = $30; //@line 1764
  $535 = $ReallocAsyncCtx4 + 64 | 0; //@line 1765
  HEAP32[$535 >> 2] = $32; //@line 1766
  $536 = $ReallocAsyncCtx4 + 68 | 0; //@line 1767
  HEAP32[$536 >> 2] = $34; //@line 1768
  $537 = $ReallocAsyncCtx4 + 72 | 0; //@line 1769
  HEAP32[$537 >> 2] = $36; //@line 1770
  $538 = $ReallocAsyncCtx4 + 76 | 0; //@line 1771
  HEAP32[$538 >> 2] = $38; //@line 1772
  $539 = $ReallocAsyncCtx4 + 80 | 0; //@line 1773
  HEAP32[$539 >> 2] = $40; //@line 1774
  $540 = $ReallocAsyncCtx4 + 84 | 0; //@line 1775
  HEAP32[$540 >> 2] = $42; //@line 1776
  $541 = $ReallocAsyncCtx4 + 88 | 0; //@line 1777
  HEAP32[$541 >> 2] = $44; //@line 1778
  $542 = $ReallocAsyncCtx4 + 92 | 0; //@line 1779
  HEAP32[$542 >> 2] = $46; //@line 1780
  $543 = $ReallocAsyncCtx4 + 96 | 0; //@line 1781
  HEAP32[$543 >> 2] = $48; //@line 1782
  $544 = $ReallocAsyncCtx4 + 100 | 0; //@line 1783
  HEAP32[$544 >> 2] = $50; //@line 1784
  $545 = $ReallocAsyncCtx4 + 104 | 0; //@line 1785
  HEAP32[$545 >> 2] = $52; //@line 1786
  $546 = $ReallocAsyncCtx4 + 108 | 0; //@line 1787
  HEAP32[$546 >> 2] = $54; //@line 1788
  $547 = $ReallocAsyncCtx4 + 112 | 0; //@line 1789
  HEAP32[$547 >> 2] = $56; //@line 1790
  $548 = $ReallocAsyncCtx4 + 116 | 0; //@line 1791
  HEAP32[$548 >> 2] = $62; //@line 1792
  $549 = $ReallocAsyncCtx4 + 120 | 0; //@line 1793
  HEAP32[$549 >> 2] = $58; //@line 1794
  $550 = $ReallocAsyncCtx4 + 124 | 0; //@line 1795
  HEAP32[$550 >> 2] = $60; //@line 1796
  $551 = $ReallocAsyncCtx4 + 128 | 0; //@line 1797
  HEAP32[$551 >> 2] = $64; //@line 1798
  $552 = $ReallocAsyncCtx4 + 132 | 0; //@line 1799
  HEAP32[$552 >> 2] = $68; //@line 1800
  $553 = $ReallocAsyncCtx4 + 136 | 0; //@line 1801
  HEAP32[$553 >> 2] = $66; //@line 1802
  $554 = $ReallocAsyncCtx4 + 140 | 0; //@line 1803
  HEAP32[$554 >> 2] = $70; //@line 1804
  $555 = $ReallocAsyncCtx4 + 144 | 0; //@line 1805
  HEAP32[$555 >> 2] = $72; //@line 1806
  $556 = $ReallocAsyncCtx4 + 148 | 0; //@line 1807
  HEAP32[$556 >> 2] = $74; //@line 1808
  $557 = $ReallocAsyncCtx4 + 152 | 0; //@line 1809
  HEAP32[$557 >> 2] = $76; //@line 1810
  $558 = $ReallocAsyncCtx4 + 156 | 0; //@line 1811
  HEAP32[$558 >> 2] = $78; //@line 1812
  $559 = $ReallocAsyncCtx4 + 160 | 0; //@line 1813
  HEAP32[$559 >> 2] = $80; //@line 1814
  $560 = $ReallocAsyncCtx4 + 164 | 0; //@line 1815
  HEAP32[$560 >> 2] = $82; //@line 1816
  $561 = $ReallocAsyncCtx4 + 168 | 0; //@line 1817
  HEAP32[$561 >> 2] = $84; //@line 1818
  $562 = $ReallocAsyncCtx4 + 172 | 0; //@line 1819
  HEAP32[$562 >> 2] = $90; //@line 1820
  $563 = $ReallocAsyncCtx4 + 176 | 0; //@line 1821
  HEAP32[$563 >> 2] = $86; //@line 1822
  $564 = $ReallocAsyncCtx4 + 180 | 0; //@line 1823
  HEAP32[$564 >> 2] = $88; //@line 1824
  $565 = $ReallocAsyncCtx4 + 184 | 0; //@line 1825
  HEAP32[$565 >> 2] = $92; //@line 1826
  $566 = $ReallocAsyncCtx4 + 188 | 0; //@line 1827
  HEAP32[$566 >> 2] = $94; //@line 1828
  $567 = $ReallocAsyncCtx4 + 192 | 0; //@line 1829
  HEAP32[$567 >> 2] = $96; //@line 1830
  $568 = $ReallocAsyncCtx4 + 196 | 0; //@line 1831
  HEAP32[$568 >> 2] = $$096$be; //@line 1832
  $569 = $ReallocAsyncCtx4 + 200 | 0; //@line 1833
  HEAP32[$569 >> 2] = $100; //@line 1834
  $570 = $ReallocAsyncCtx4 + 204 | 0; //@line 1835
  HEAP32[$570 >> 2] = $102; //@line 1836
  $571 = $ReallocAsyncCtx4 + 208 | 0; //@line 1837
  HEAP32[$571 >> 2] = $104; //@line 1838
  $572 = $ReallocAsyncCtx4 + 212 | 0; //@line 1839
  HEAP32[$572 >> 2] = $108; //@line 1840
  $573 = $ReallocAsyncCtx4 + 216 | 0; //@line 1841
  HEAP32[$573 >> 2] = $110; //@line 1842
  $574 = $ReallocAsyncCtx4 + 220 | 0; //@line 1843
  HEAP32[$574 >> 2] = $112; //@line 1844
  $575 = $ReallocAsyncCtx4 + 224 | 0; //@line 1845
  HEAP32[$575 >> 2] = $114; //@line 1846
  $576 = $ReallocAsyncCtx4 + 228 | 0; //@line 1847
  HEAP32[$576 >> 2] = $116; //@line 1848
  $577 = $ReallocAsyncCtx4 + 232 | 0; //@line 1849
  HEAP32[$577 >> 2] = $118; //@line 1850
  $578 = $ReallocAsyncCtx4 + 236 | 0; //@line 1851
  HEAP32[$578 >> 2] = $120; //@line 1852
  $579 = $ReallocAsyncCtx4 + 240 | 0; //@line 1853
  HEAP32[$579 >> 2] = $122; //@line 1854
  $580 = $ReallocAsyncCtx4 + 244 | 0; //@line 1855
  HEAP32[$580 >> 2] = $124; //@line 1856
  $581 = $ReallocAsyncCtx4 + 248 | 0; //@line 1857
  HEAP32[$581 >> 2] = $126; //@line 1858
  $582 = $ReallocAsyncCtx4 + 252 | 0; //@line 1859
  HEAP32[$582 >> 2] = $128; //@line 1860
  $583 = $ReallocAsyncCtx4 + 256 | 0; //@line 1861
  HEAP32[$583 >> 2] = $130; //@line 1862
  $584 = $ReallocAsyncCtx4 + 260 | 0; //@line 1863
  HEAP32[$584 >> 2] = $132; //@line 1864
  $585 = $ReallocAsyncCtx4 + 264 | 0; //@line 1865
  HEAP32[$585 >> 2] = $134; //@line 1866
  $586 = $ReallocAsyncCtx4 + 268 | 0; //@line 1867
  HEAP32[$586 >> 2] = $136; //@line 1868
  sp = STACKTOP; //@line 1869
  return;
 } else if ((label | 0) == 32) {
  HEAP8[$72 >> 0] = HEAP8[$12 + ($139 & 255) >> 0] | 0; //@line 1877
  $604 = $$0$be + 5 << 24 >> 24; //@line 1890
  HEAP32[$50 >> 2] = (HEAPU8[$12 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$12 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$12 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 1898
  $614 = HEAP32[(HEAP32[$52 >> 2] | 0) + 48 >> 2] | 0; //@line 1901
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 1902
  $615 = FUNCTION_TABLE_iii[$614 & 31]($34, $80) | 0; //@line 1903
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 594; //@line 1906
   $616 = $ReallocAsyncCtx5 + 4 | 0; //@line 1907
   HEAP32[$616 >> 2] = $2; //@line 1908
   $617 = $ReallocAsyncCtx5 + 8 | 0; //@line 1909
   HEAP32[$617 >> 2] = $4; //@line 1910
   $618 = $ReallocAsyncCtx5 + 12 | 0; //@line 1911
   HEAP32[$618 >> 2] = $6; //@line 1912
   $619 = $ReallocAsyncCtx5 + 16 | 0; //@line 1913
   HEAP32[$619 >> 2] = $8; //@line 1914
   $620 = $ReallocAsyncCtx5 + 20 | 0; //@line 1915
   HEAP32[$620 >> 2] = $16; //@line 1916
   $621 = $ReallocAsyncCtx5 + 24 | 0; //@line 1917
   HEAP32[$621 >> 2] = $12; //@line 1918
   $622 = $ReallocAsyncCtx5 + 28 | 0; //@line 1919
   HEAP32[$622 >> 2] = $14; //@line 1920
   $623 = $ReallocAsyncCtx5 + 32 | 0; //@line 1921
   HEAP8[$623 >> 0] = $24; //@line 1922
   $624 = $ReallocAsyncCtx5 + 33 | 0; //@line 1923
   HEAP8[$624 >> 0] = $18; //@line 1924
   $625 = $ReallocAsyncCtx5 + 36 | 0; //@line 1925
   HEAP32[$625 >> 2] = $20; //@line 1926
   $626 = $ReallocAsyncCtx5 + 40 | 0; //@line 1927
   HEAP32[$626 >> 2] = $10; //@line 1928
   $627 = $ReallocAsyncCtx5 + 44 | 0; //@line 1929
   HEAP32[$627 >> 2] = $22; //@line 1930
   $628 = $ReallocAsyncCtx5 + 48 | 0; //@line 1931
   HEAP8[$628 >> 0] = $26; //@line 1932
   $629 = $ReallocAsyncCtx5 + 52 | 0; //@line 1933
   HEAP32[$629 >> 2] = $28; //@line 1934
   $630 = $ReallocAsyncCtx5 + 56 | 0; //@line 1935
   HEAP32[$630 >> 2] = $30; //@line 1936
   $631 = $ReallocAsyncCtx5 + 60 | 0; //@line 1937
   HEAP32[$631 >> 2] = $32; //@line 1938
   $632 = $ReallocAsyncCtx5 + 64 | 0; //@line 1939
   HEAP32[$632 >> 2] = $34; //@line 1940
   $633 = $ReallocAsyncCtx5 + 68 | 0; //@line 1941
   HEAP32[$633 >> 2] = $36; //@line 1942
   $634 = $ReallocAsyncCtx5 + 72 | 0; //@line 1943
   HEAP32[$634 >> 2] = $38; //@line 1944
   $635 = $ReallocAsyncCtx5 + 76 | 0; //@line 1945
   HEAP32[$635 >> 2] = $40; //@line 1946
   $636 = $ReallocAsyncCtx5 + 80 | 0; //@line 1947
   HEAP32[$636 >> 2] = $42; //@line 1948
   $637 = $ReallocAsyncCtx5 + 84 | 0; //@line 1949
   HEAP32[$637 >> 2] = $44; //@line 1950
   $638 = $ReallocAsyncCtx5 + 88 | 0; //@line 1951
   HEAP32[$638 >> 2] = $46; //@line 1952
   $639 = $ReallocAsyncCtx5 + 92 | 0; //@line 1953
   HEAP32[$639 >> 2] = $48; //@line 1954
   $640 = $ReallocAsyncCtx5 + 96 | 0; //@line 1955
   HEAP32[$640 >> 2] = $50; //@line 1956
   $641 = $ReallocAsyncCtx5 + 100 | 0; //@line 1957
   HEAP32[$641 >> 2] = $52; //@line 1958
   $642 = $ReallocAsyncCtx5 + 104 | 0; //@line 1959
   HEAP32[$642 >> 2] = $54; //@line 1960
   $643 = $ReallocAsyncCtx5 + 108 | 0; //@line 1961
   HEAP32[$643 >> 2] = $56; //@line 1962
   $644 = $ReallocAsyncCtx5 + 112 | 0; //@line 1963
   HEAP32[$644 >> 2] = $62; //@line 1964
   $645 = $ReallocAsyncCtx5 + 116 | 0; //@line 1965
   HEAP32[$645 >> 2] = $58; //@line 1966
   $646 = $ReallocAsyncCtx5 + 120 | 0; //@line 1967
   HEAP32[$646 >> 2] = $60; //@line 1968
   $647 = $ReallocAsyncCtx5 + 124 | 0; //@line 1969
   HEAP32[$647 >> 2] = $64; //@line 1970
   $648 = $ReallocAsyncCtx5 + 128 | 0; //@line 1971
   HEAP32[$648 >> 2] = $68; //@line 1972
   $649 = $ReallocAsyncCtx5 + 132 | 0; //@line 1973
   HEAP32[$649 >> 2] = $66; //@line 1974
   $650 = $ReallocAsyncCtx5 + 136 | 0; //@line 1975
   HEAP32[$650 >> 2] = $70; //@line 1976
   $651 = $ReallocAsyncCtx5 + 140 | 0; //@line 1977
   HEAP32[$651 >> 2] = $72; //@line 1978
   $652 = $ReallocAsyncCtx5 + 144 | 0; //@line 1979
   HEAP32[$652 >> 2] = $74; //@line 1980
   $653 = $ReallocAsyncCtx5 + 148 | 0; //@line 1981
   HEAP32[$653 >> 2] = $76; //@line 1982
   $654 = $ReallocAsyncCtx5 + 152 | 0; //@line 1983
   HEAP32[$654 >> 2] = $78; //@line 1984
   $655 = $ReallocAsyncCtx5 + 156 | 0; //@line 1985
   HEAP32[$655 >> 2] = $80; //@line 1986
   $656 = $ReallocAsyncCtx5 + 160 | 0; //@line 1987
   HEAP32[$656 >> 2] = $82; //@line 1988
   $657 = $ReallocAsyncCtx5 + 164 | 0; //@line 1989
   HEAP32[$657 >> 2] = $84; //@line 1990
   $658 = $ReallocAsyncCtx5 + 168 | 0; //@line 1991
   HEAP32[$658 >> 2] = $90; //@line 1992
   $659 = $ReallocAsyncCtx5 + 172 | 0; //@line 1993
   HEAP32[$659 >> 2] = $86; //@line 1994
   $660 = $ReallocAsyncCtx5 + 176 | 0; //@line 1995
   HEAP32[$660 >> 2] = $88; //@line 1996
   $661 = $ReallocAsyncCtx5 + 180 | 0; //@line 1997
   HEAP8[$661 >> 0] = $604; //@line 1998
   $662 = $ReallocAsyncCtx5 + 184 | 0; //@line 1999
   HEAP32[$662 >> 2] = $92; //@line 2000
   $663 = $ReallocAsyncCtx5 + 188 | 0; //@line 2001
   HEAP32[$663 >> 2] = $94; //@line 2002
   $664 = $ReallocAsyncCtx5 + 192 | 0; //@line 2003
   HEAP32[$664 >> 2] = $96; //@line 2004
   $665 = $ReallocAsyncCtx5 + 196 | 0; //@line 2005
   HEAP32[$665 >> 2] = $100; //@line 2006
   $666 = $ReallocAsyncCtx5 + 200 | 0; //@line 2007
   HEAP32[$666 >> 2] = $102; //@line 2008
   $667 = $ReallocAsyncCtx5 + 204 | 0; //@line 2009
   HEAP32[$667 >> 2] = $104; //@line 2010
   $668 = $ReallocAsyncCtx5 + 208 | 0; //@line 2011
   HEAP32[$668 >> 2] = $108; //@line 2012
   $669 = $ReallocAsyncCtx5 + 212 | 0; //@line 2013
   HEAP32[$669 >> 2] = $110; //@line 2014
   $670 = $ReallocAsyncCtx5 + 216 | 0; //@line 2015
   HEAP32[$670 >> 2] = $112; //@line 2016
   $671 = $ReallocAsyncCtx5 + 220 | 0; //@line 2017
   HEAP32[$671 >> 2] = $114; //@line 2018
   $672 = $ReallocAsyncCtx5 + 224 | 0; //@line 2019
   HEAP32[$672 >> 2] = $116; //@line 2020
   $673 = $ReallocAsyncCtx5 + 228 | 0; //@line 2021
   HEAP32[$673 >> 2] = $118; //@line 2022
   $674 = $ReallocAsyncCtx5 + 232 | 0; //@line 2023
   HEAP32[$674 >> 2] = $120; //@line 2024
   $675 = $ReallocAsyncCtx5 + 236 | 0; //@line 2025
   HEAP32[$675 >> 2] = $122; //@line 2026
   $676 = $ReallocAsyncCtx5 + 240 | 0; //@line 2027
   HEAP32[$676 >> 2] = $124; //@line 2028
   $677 = $ReallocAsyncCtx5 + 244 | 0; //@line 2029
   HEAP32[$677 >> 2] = $126; //@line 2030
   $678 = $ReallocAsyncCtx5 + 248 | 0; //@line 2031
   HEAP32[$678 >> 2] = $128; //@line 2032
   $679 = $ReallocAsyncCtx5 + 252 | 0; //@line 2033
   HEAP32[$679 >> 2] = $130; //@line 2034
   $680 = $ReallocAsyncCtx5 + 256 | 0; //@line 2035
   HEAP32[$680 >> 2] = $132; //@line 2036
   $681 = $ReallocAsyncCtx5 + 260 | 0; //@line 2037
   HEAP32[$681 >> 2] = $134; //@line 2038
   $682 = $ReallocAsyncCtx5 + 264 | 0; //@line 2039
   HEAP32[$682 >> 2] = $136; //@line 2040
   sp = STACKTOP; //@line 2041
   return;
  }
  HEAP8[___async_retval >> 0] = $615; //@line 2045
  ___async_unwind = 0; //@line 2046
  HEAP32[$ReallocAsyncCtx5 >> 2] = 594; //@line 2047
  $616 = $ReallocAsyncCtx5 + 4 | 0; //@line 2048
  HEAP32[$616 >> 2] = $2; //@line 2049
  $617 = $ReallocAsyncCtx5 + 8 | 0; //@line 2050
  HEAP32[$617 >> 2] = $4; //@line 2051
  $618 = $ReallocAsyncCtx5 + 12 | 0; //@line 2052
  HEAP32[$618 >> 2] = $6; //@line 2053
  $619 = $ReallocAsyncCtx5 + 16 | 0; //@line 2054
  HEAP32[$619 >> 2] = $8; //@line 2055
  $620 = $ReallocAsyncCtx5 + 20 | 0; //@line 2056
  HEAP32[$620 >> 2] = $16; //@line 2057
  $621 = $ReallocAsyncCtx5 + 24 | 0; //@line 2058
  HEAP32[$621 >> 2] = $12; //@line 2059
  $622 = $ReallocAsyncCtx5 + 28 | 0; //@line 2060
  HEAP32[$622 >> 2] = $14; //@line 2061
  $623 = $ReallocAsyncCtx5 + 32 | 0; //@line 2062
  HEAP8[$623 >> 0] = $24; //@line 2063
  $624 = $ReallocAsyncCtx5 + 33 | 0; //@line 2064
  HEAP8[$624 >> 0] = $18; //@line 2065
  $625 = $ReallocAsyncCtx5 + 36 | 0; //@line 2066
  HEAP32[$625 >> 2] = $20; //@line 2067
  $626 = $ReallocAsyncCtx5 + 40 | 0; //@line 2068
  HEAP32[$626 >> 2] = $10; //@line 2069
  $627 = $ReallocAsyncCtx5 + 44 | 0; //@line 2070
  HEAP32[$627 >> 2] = $22; //@line 2071
  $628 = $ReallocAsyncCtx5 + 48 | 0; //@line 2072
  HEAP8[$628 >> 0] = $26; //@line 2073
  $629 = $ReallocAsyncCtx5 + 52 | 0; //@line 2074
  HEAP32[$629 >> 2] = $28; //@line 2075
  $630 = $ReallocAsyncCtx5 + 56 | 0; //@line 2076
  HEAP32[$630 >> 2] = $30; //@line 2077
  $631 = $ReallocAsyncCtx5 + 60 | 0; //@line 2078
  HEAP32[$631 >> 2] = $32; //@line 2079
  $632 = $ReallocAsyncCtx5 + 64 | 0; //@line 2080
  HEAP32[$632 >> 2] = $34; //@line 2081
  $633 = $ReallocAsyncCtx5 + 68 | 0; //@line 2082
  HEAP32[$633 >> 2] = $36; //@line 2083
  $634 = $ReallocAsyncCtx5 + 72 | 0; //@line 2084
  HEAP32[$634 >> 2] = $38; //@line 2085
  $635 = $ReallocAsyncCtx5 + 76 | 0; //@line 2086
  HEAP32[$635 >> 2] = $40; //@line 2087
  $636 = $ReallocAsyncCtx5 + 80 | 0; //@line 2088
  HEAP32[$636 >> 2] = $42; //@line 2089
  $637 = $ReallocAsyncCtx5 + 84 | 0; //@line 2090
  HEAP32[$637 >> 2] = $44; //@line 2091
  $638 = $ReallocAsyncCtx5 + 88 | 0; //@line 2092
  HEAP32[$638 >> 2] = $46; //@line 2093
  $639 = $ReallocAsyncCtx5 + 92 | 0; //@line 2094
  HEAP32[$639 >> 2] = $48; //@line 2095
  $640 = $ReallocAsyncCtx5 + 96 | 0; //@line 2096
  HEAP32[$640 >> 2] = $50; //@line 2097
  $641 = $ReallocAsyncCtx5 + 100 | 0; //@line 2098
  HEAP32[$641 >> 2] = $52; //@line 2099
  $642 = $ReallocAsyncCtx5 + 104 | 0; //@line 2100
  HEAP32[$642 >> 2] = $54; //@line 2101
  $643 = $ReallocAsyncCtx5 + 108 | 0; //@line 2102
  HEAP32[$643 >> 2] = $56; //@line 2103
  $644 = $ReallocAsyncCtx5 + 112 | 0; //@line 2104
  HEAP32[$644 >> 2] = $62; //@line 2105
  $645 = $ReallocAsyncCtx5 + 116 | 0; //@line 2106
  HEAP32[$645 >> 2] = $58; //@line 2107
  $646 = $ReallocAsyncCtx5 + 120 | 0; //@line 2108
  HEAP32[$646 >> 2] = $60; //@line 2109
  $647 = $ReallocAsyncCtx5 + 124 | 0; //@line 2110
  HEAP32[$647 >> 2] = $64; //@line 2111
  $648 = $ReallocAsyncCtx5 + 128 | 0; //@line 2112
  HEAP32[$648 >> 2] = $68; //@line 2113
  $649 = $ReallocAsyncCtx5 + 132 | 0; //@line 2114
  HEAP32[$649 >> 2] = $66; //@line 2115
  $650 = $ReallocAsyncCtx5 + 136 | 0; //@line 2116
  HEAP32[$650 >> 2] = $70; //@line 2117
  $651 = $ReallocAsyncCtx5 + 140 | 0; //@line 2118
  HEAP32[$651 >> 2] = $72; //@line 2119
  $652 = $ReallocAsyncCtx5 + 144 | 0; //@line 2120
  HEAP32[$652 >> 2] = $74; //@line 2121
  $653 = $ReallocAsyncCtx5 + 148 | 0; //@line 2122
  HEAP32[$653 >> 2] = $76; //@line 2123
  $654 = $ReallocAsyncCtx5 + 152 | 0; //@line 2124
  HEAP32[$654 >> 2] = $78; //@line 2125
  $655 = $ReallocAsyncCtx5 + 156 | 0; //@line 2126
  HEAP32[$655 >> 2] = $80; //@line 2127
  $656 = $ReallocAsyncCtx5 + 160 | 0; //@line 2128
  HEAP32[$656 >> 2] = $82; //@line 2129
  $657 = $ReallocAsyncCtx5 + 164 | 0; //@line 2130
  HEAP32[$657 >> 2] = $84; //@line 2131
  $658 = $ReallocAsyncCtx5 + 168 | 0; //@line 2132
  HEAP32[$658 >> 2] = $90; //@line 2133
  $659 = $ReallocAsyncCtx5 + 172 | 0; //@line 2134
  HEAP32[$659 >> 2] = $86; //@line 2135
  $660 = $ReallocAsyncCtx5 + 176 | 0; //@line 2136
  HEAP32[$660 >> 2] = $88; //@line 2137
  $661 = $ReallocAsyncCtx5 + 180 | 0; //@line 2138
  HEAP8[$661 >> 0] = $604; //@line 2139
  $662 = $ReallocAsyncCtx5 + 184 | 0; //@line 2140
  HEAP32[$662 >> 2] = $92; //@line 2141
  $663 = $ReallocAsyncCtx5 + 188 | 0; //@line 2142
  HEAP32[$663 >> 2] = $94; //@line 2143
  $664 = $ReallocAsyncCtx5 + 192 | 0; //@line 2144
  HEAP32[$664 >> 2] = $96; //@line 2145
  $665 = $ReallocAsyncCtx5 + 196 | 0; //@line 2146
  HEAP32[$665 >> 2] = $100; //@line 2147
  $666 = $ReallocAsyncCtx5 + 200 | 0; //@line 2148
  HEAP32[$666 >> 2] = $102; //@line 2149
  $667 = $ReallocAsyncCtx5 + 204 | 0; //@line 2150
  HEAP32[$667 >> 2] = $104; //@line 2151
  $668 = $ReallocAsyncCtx5 + 208 | 0; //@line 2152
  HEAP32[$668 >> 2] = $108; //@line 2153
  $669 = $ReallocAsyncCtx5 + 212 | 0; //@line 2154
  HEAP32[$669 >> 2] = $110; //@line 2155
  $670 = $ReallocAsyncCtx5 + 216 | 0; //@line 2156
  HEAP32[$670 >> 2] = $112; //@line 2157
  $671 = $ReallocAsyncCtx5 + 220 | 0; //@line 2158
  HEAP32[$671 >> 2] = $114; //@line 2159
  $672 = $ReallocAsyncCtx5 + 224 | 0; //@line 2160
  HEAP32[$672 >> 2] = $116; //@line 2161
  $673 = $ReallocAsyncCtx5 + 228 | 0; //@line 2162
  HEAP32[$673 >> 2] = $118; //@line 2163
  $674 = $ReallocAsyncCtx5 + 232 | 0; //@line 2164
  HEAP32[$674 >> 2] = $120; //@line 2165
  $675 = $ReallocAsyncCtx5 + 236 | 0; //@line 2166
  HEAP32[$675 >> 2] = $122; //@line 2167
  $676 = $ReallocAsyncCtx5 + 240 | 0; //@line 2168
  HEAP32[$676 >> 2] = $124; //@line 2169
  $677 = $ReallocAsyncCtx5 + 244 | 0; //@line 2170
  HEAP32[$677 >> 2] = $126; //@line 2171
  $678 = $ReallocAsyncCtx5 + 248 | 0; //@line 2172
  HEAP32[$678 >> 2] = $128; //@line 2173
  $679 = $ReallocAsyncCtx5 + 252 | 0; //@line 2174
  HEAP32[$679 >> 2] = $130; //@line 2175
  $680 = $ReallocAsyncCtx5 + 256 | 0; //@line 2176
  HEAP32[$680 >> 2] = $132; //@line 2177
  $681 = $ReallocAsyncCtx5 + 260 | 0; //@line 2178
  HEAP32[$681 >> 2] = $134; //@line 2179
  $682 = $ReallocAsyncCtx5 + 264 | 0; //@line 2180
  HEAP32[$682 >> 2] = $136; //@line 2181
  sp = STACKTOP; //@line 2182
  return;
 } else if ((label | 0) == 36) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 2187
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_226($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i104 = 0, $$096$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $234 = 0, $239 = 0, $24 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $352 = 0, $353 = 0, $36 = 0, $364 = 0, $365 = 0, $38 = 0, $4 = 0, $40 = 0, $402 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $478 = 0, $48 = 0, $482 = 0, $486 = 0, $489 = 0, $495 = 0, $498 = 0, $499 = 0, $50 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $58 = 0, $595 = 0, $6 = 0, $60 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2228
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2230
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2232
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2234
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2236
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2238
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2240
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2242
 $16 = HEAP8[$0 + 32 >> 0] | 0; //@line 2244
 $18 = HEAP8[$0 + 33 >> 0] | 0; //@line 2246
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 2248
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 2250
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 2252
 $26 = HEAP8[$0 + 48 >> 0] | 0; //@line 2254
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 2256
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 2258
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 2260
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 2262
 $36 = HEAP8[$0 + 68 >> 0] | 0; //@line 2264
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 2266
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 2268
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 2270
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 2272
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 2274
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 2276
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 2278
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 2280
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 2282
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 2284
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 2286
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 2288
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 2290
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 2292
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 2294
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 2296
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 2298
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 2300
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 2302
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 2304
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 2306
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 2308
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 2310
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 2312
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 2314
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 2316
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 2318
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 2320
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 2322
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 2324
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 2326
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 2328
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 2330
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 2332
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 2334
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 2336
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 2338
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 2340
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 2342
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 2344
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 2346
 $120 = HEAP32[$0 + 236 >> 2] | 0; //@line 2348
 $122 = HEAP32[$0 + 240 >> 2] | 0; //@line 2350
 $124 = HEAP32[$0 + 244 >> 2] | 0; //@line 2352
 $126 = HEAP32[$0 + 248 >> 2] | 0; //@line 2354
 $128 = HEAP32[$0 + 252 >> 2] | 0; //@line 2356
 $130 = HEAP32[$0 + 256 >> 2] | 0; //@line 2358
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 2360
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 2362
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 2364
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$116 >> 0] = HEAP8[$88 >> 0] | 0; //@line 2369
  HEAP32[$40 >> 2] = HEAP32[$132 >> 2]; //@line 2371
  HEAP8[$6 >> 0] = HEAP8[$124 >> 0] | 0; //@line 2373
 }
 $352 = HEAP8[$50 >> 0] | 0; //@line 2376
 $353 = $352 & 255; //@line 2377
 if (((-128 - (HEAP8[$44 >> 0] | 0) & 255) + -1 | 0) > ($353 | 0)) {
  HEAP8[$8 + 4 + $353 >> 0] = 5; //@line 2385
  HEAP8[$50 >> 0] = $352 + 2 << 24 >> 24; //@line 2387
  HEAP8[($352 + 1 & 255) + ($8 + 4) >> 0] = $AsyncRetVal; //@line 2390
  HEAP8[$10 >> 0] = 1; //@line 2391
  HEAP8[$100 >> 0] = 1; //@line 2392
  $$0$i104 = 0; //@line 2393
 } else {
  $$0$i104 = -1e3; //@line 2395
 }
 $$0$be = $36; //@line 2397
 $$096$be = $$0$i104; //@line 2397
 L8 : while (1) {
  if (($$0$be & 255) >= ($18 & 255)) {
   label = 33; //@line 2401
   break;
  }
  $137 = $$0$be + 1 << 24 >> 24; //@line 2405
  switch (HEAP8[$12 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 2410
    break L8;
    break;
   }
  case 5:
   {
    label = 9; //@line 2415
    break L8;
    break;
   }
  case 7:
   {
    label = 19; //@line 2420
    break L8;
    break;
   }
  case 9:
   {
    label = 24; //@line 2425
    break L8;
    break;
   }
  case 10:
   {
    label = 29; //@line 2430
    break L8;
    break;
   }
  case 2:
   {
    HEAP32[$24 >> 2] = 0; //@line 2435
    HEAP8[$46 >> 0] = HEAP8[$12 + ($137 & 255) >> 0] | 0; //@line 2440
    HEAP8[$76 >> 0] = HEAP8[$12 + ($$0$be + 2 & 255) >> 0] | 0; //@line 2445
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 2446
    continue L8;
    break;
   }
  case 4:
   {
    $231 = $$0$be + 2 << 24 >> 24; //@line 2451
    $234 = HEAP8[$12 + ($137 & 255) >> 0] | 0; //@line 2454
    HEAP8[$108 >> 0] = $234; //@line 2455
    HEAP16[$78 >> 1] = 1 << ($234 & 255); //@line 2459
    $239 = HEAP8[$50 >> 0] | 0; //@line 2461
    if (($239 & 255) >= (-128 - (HEAP8[$44 >> 0] | 0) & 255)) {
     $$0$be = $231; //@line 2465
     $$096$be = -1e3; //@line 2465
     continue L8;
    }
    HEAP8[$50 >> 0] = $239 + 1 << 24 >> 24; //@line 2471
    HEAP8[($239 & 255) + ($8 + 4) >> 0] = 4; //@line 2472
    HEAP8[$100 >> 0] = 1; //@line 2473
    $$0$be = $231; //@line 2474
    $$096$be = 0; //@line 2474
    continue L8;
    break;
   }
  case 6:
   {
    $364 = HEAP8[$50 >> 0] | 0; //@line 2480
    $365 = $364 & 255; //@line 2481
    if (((-128 - (HEAP8[$44 >> 0] | 0) & 255) + -2 | 0) <= ($365 | 0)) {
     $$0$be = $137; //@line 2487
     $$096$be = -1e3; //@line 2487
     continue L8;
    }
    HEAP8[$8 + 4 + $365 >> 0] = 6; //@line 2492
    HEAP8[($364 + 1 & 255) + ($8 + 4) >> 0] = -1; //@line 2496
    HEAP8[$50 >> 0] = $364 + 3 << 24 >> 24; //@line 2498
    HEAP8[($364 + 2 & 255) + ($8 + 4) >> 0] = $26; //@line 2501
    HEAP8[$100 >> 0] = 1; //@line 2502
    $$0$be = $137; //@line 2503
    $$096$be = 0; //@line 2503
    continue L8;
    break;
   }
  case 8:
   {
    $478 = $$0$be + 2 << 24 >> 24; //@line 2508
    $482 = HEAP8[$12 + ($137 & 255) >> 0] & 15; //@line 2512
    $486 = ($482 + ($482 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 2517
    HEAP32[$130 >> 2] = $486; //@line 2518
    HEAP32[$126 >> 2] = $486 + 1e3; //@line 2520
    $489 = HEAP8[$50 >> 0] | 0; //@line 2522
    if (($489 & 255) >= (-128 - (HEAP8[$44 >> 0] | 0) & 255)) {
     $$0$be = $478; //@line 2526
     $$096$be = -1e3; //@line 2526
     continue L8;
    }
    HEAP8[$50 >> 0] = $489 + 1 << 24 >> 24; //@line 2532
    HEAP8[($489 & 255) + ($8 + 4) >> 0] = 8; //@line 2533
    HEAP8[$10 >> 0] = 1; //@line 2534
    HEAP8[$100 >> 0] = 1; //@line 2535
    $$0$be = $478; //@line 2536
    $$096$be = 0; //@line 2536
    continue L8;
    break;
   }
  default:
   {
    $$0$be = $137; //@line 2541
    $$096$be = -1013; //@line 2541
    continue L8;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$38 >> 0] = 0; //@line 2547
  HEAP8[$90 >> 0] = 0; //@line 2548
  HEAP8[$98 >> 0] = 0; //@line 2549
  HEAP8[$106 >> 0] = 0; //@line 2550
  $148 = $137 & 255; //@line 2551
  $149 = $148 + -1 | 0; //@line 2552
  HEAP32[$62 >> 2] = $12 + $149; //@line 2554
  HEAP8[$102 >> 0] = $22 - $149; //@line 2557
  HEAP8[$92 >> 0] = HEAP8[$80 >> 0] | 0; //@line 2559
  HEAP8[$134 >> 0] = HEAP8[$122 >> 0] | 0; //@line 2561
  HEAP8[$120 >> 0] = HEAP8[$112 >> 0] | 0; //@line 2563
  HEAP8[$2 >> 0] = HEAP8[$28 >> 0] | 0; //@line 2565
  HEAP8[$64 >> 0] = HEAP8[$14 >> 0] | 0; //@line 2567
  $160 = HEAP32[(HEAP32[$72 >> 2] | 0) + 36 >> 2] | 0; //@line 2570
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 2571
  $161 = FUNCTION_TABLE_iiiiiii[$160 & 3]($34, $30, $38, $90, $98, $106) | 0; //@line 2572
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 2575
   $162 = $ReallocAsyncCtx + 4 | 0; //@line 2576
   HEAP32[$162 >> 2] = $2; //@line 2577
   $163 = $ReallocAsyncCtx + 8 | 0; //@line 2578
   HEAP32[$163 >> 2] = $4; //@line 2579
   $164 = $ReallocAsyncCtx + 12 | 0; //@line 2580
   HEAP32[$164 >> 2] = $6; //@line 2581
   $165 = $ReallocAsyncCtx + 16 | 0; //@line 2582
   HEAP32[$165 >> 2] = $8; //@line 2583
   $166 = $ReallocAsyncCtx + 20 | 0; //@line 2584
   HEAP32[$166 >> 2] = $22; //@line 2585
   $167 = $ReallocAsyncCtx + 24 | 0; //@line 2586
   HEAP32[$167 >> 2] = $12; //@line 2587
   $168 = $ReallocAsyncCtx + 28 | 0; //@line 2588
   HEAP32[$168 >> 2] = $14; //@line 2589
   $169 = $ReallocAsyncCtx + 32 | 0; //@line 2590
   HEAP32[$169 >> 2] = $10; //@line 2591
   $170 = $ReallocAsyncCtx + 36 | 0; //@line 2592
   HEAP8[$170 >> 0] = $18; //@line 2593
   $171 = $ReallocAsyncCtx + 40 | 0; //@line 2594
   HEAP32[$171 >> 2] = $20; //@line 2595
   $172 = $ReallocAsyncCtx + 44 | 0; //@line 2596
   HEAP32[$172 >> 2] = $24; //@line 2597
   $173 = $ReallocAsyncCtx + 48 | 0; //@line 2598
   HEAP8[$173 >> 0] = $16; //@line 2599
   $174 = $ReallocAsyncCtx + 49 | 0; //@line 2600
   HEAP8[$174 >> 0] = $26; //@line 2601
   $175 = $ReallocAsyncCtx + 52 | 0; //@line 2602
   HEAP32[$175 >> 2] = $28; //@line 2603
   $176 = $ReallocAsyncCtx + 56 | 0; //@line 2604
   HEAP32[$176 >> 2] = $30; //@line 2605
   $177 = $ReallocAsyncCtx + 60 | 0; //@line 2606
   HEAP32[$177 >> 2] = $32; //@line 2607
   $178 = $ReallocAsyncCtx + 64 | 0; //@line 2608
   HEAP32[$178 >> 2] = $34; //@line 2609
   $179 = $ReallocAsyncCtx + 68 | 0; //@line 2610
   HEAP32[$179 >> 2] = $38; //@line 2611
   $180 = $ReallocAsyncCtx + 72 | 0; //@line 2612
   HEAP32[$180 >> 2] = $40; //@line 2613
   $181 = $ReallocAsyncCtx + 76 | 0; //@line 2614
   HEAP32[$181 >> 2] = $42; //@line 2615
   $182 = $ReallocAsyncCtx + 80 | 0; //@line 2616
   HEAP32[$182 >> 2] = $44; //@line 2617
   $183 = $ReallocAsyncCtx + 84 | 0; //@line 2618
   HEAP32[$183 >> 2] = $46; //@line 2619
   $184 = $ReallocAsyncCtx + 88 | 0; //@line 2620
   HEAP32[$184 >> 2] = $48; //@line 2621
   $185 = $ReallocAsyncCtx + 92 | 0; //@line 2622
   HEAP32[$185 >> 2] = $50; //@line 2623
   $186 = $ReallocAsyncCtx + 96 | 0; //@line 2624
   HEAP32[$186 >> 2] = $52; //@line 2625
   $187 = $ReallocAsyncCtx + 100 | 0; //@line 2626
   HEAP32[$187 >> 2] = $54; //@line 2627
   $188 = $ReallocAsyncCtx + 104 | 0; //@line 2628
   HEAP32[$188 >> 2] = $56; //@line 2629
   $189 = $ReallocAsyncCtx + 108 | 0; //@line 2630
   HEAP32[$189 >> 2] = $58; //@line 2631
   $190 = $ReallocAsyncCtx + 112 | 0; //@line 2632
   HEAP32[$190 >> 2] = $62; //@line 2633
   $191 = $ReallocAsyncCtx + 116 | 0; //@line 2634
   HEAP32[$191 >> 2] = $64; //@line 2635
   $192 = $ReallocAsyncCtx + 120 | 0; //@line 2636
   HEAP32[$192 >> 2] = $60; //@line 2637
   $193 = $ReallocAsyncCtx + 124 | 0; //@line 2638
   HEAP32[$193 >> 2] = $66; //@line 2639
   $194 = $ReallocAsyncCtx + 128 | 0; //@line 2640
   HEAP32[$194 >> 2] = $70; //@line 2641
   $195 = $ReallocAsyncCtx + 132 | 0; //@line 2642
   HEAP32[$195 >> 2] = $68; //@line 2643
   $196 = $ReallocAsyncCtx + 136 | 0; //@line 2644
   HEAP32[$196 >> 2] = $72; //@line 2645
   $197 = $ReallocAsyncCtx + 140 | 0; //@line 2646
   HEAP32[$197 >> 2] = $74; //@line 2647
   $198 = $ReallocAsyncCtx + 144 | 0; //@line 2648
   HEAP32[$198 >> 2] = $76; //@line 2649
   $199 = $ReallocAsyncCtx + 148 | 0; //@line 2650
   HEAP32[$199 >> 2] = $78; //@line 2651
   $200 = $ReallocAsyncCtx + 152 | 0; //@line 2652
   HEAP32[$200 >> 2] = $80; //@line 2653
   $201 = $ReallocAsyncCtx + 156 | 0; //@line 2654
   HEAP32[$201 >> 2] = $82; //@line 2655
   $202 = $ReallocAsyncCtx + 160 | 0; //@line 2656
   HEAP32[$202 >> 2] = $84; //@line 2657
   $203 = $ReallocAsyncCtx + 164 | 0; //@line 2658
   HEAP32[$203 >> 2] = $86; //@line 2659
   $204 = $ReallocAsyncCtx + 168 | 0; //@line 2660
   HEAP32[$204 >> 2] = $90; //@line 2661
   $205 = $ReallocAsyncCtx + 172 | 0; //@line 2662
   HEAP32[$205 >> 2] = $92; //@line 2663
   $206 = $ReallocAsyncCtx + 176 | 0; //@line 2664
   HEAP32[$206 >> 2] = $88; //@line 2665
   $207 = $ReallocAsyncCtx + 180 | 0; //@line 2666
   HEAP32[$207 >> 2] = $94; //@line 2667
   $208 = $ReallocAsyncCtx + 184 | 0; //@line 2668
   HEAP32[$208 >> 2] = $96; //@line 2669
   $209 = $ReallocAsyncCtx + 188 | 0; //@line 2670
   HEAP32[$209 >> 2] = $98; //@line 2671
   $210 = $ReallocAsyncCtx + 192 | 0; //@line 2672
   HEAP32[$210 >> 2] = $$096$be; //@line 2673
   $211 = $ReallocAsyncCtx + 196 | 0; //@line 2674
   HEAP32[$211 >> 2] = $100; //@line 2675
   $212 = $ReallocAsyncCtx + 200 | 0; //@line 2676
   HEAP32[$212 >> 2] = $102; //@line 2677
   $213 = $ReallocAsyncCtx + 204 | 0; //@line 2678
   HEAP32[$213 >> 2] = $104; //@line 2679
   $214 = $ReallocAsyncCtx + 208 | 0; //@line 2680
   HEAP32[$214 >> 2] = $148; //@line 2681
   $215 = $ReallocAsyncCtx + 212 | 0; //@line 2682
   HEAP32[$215 >> 2] = $106; //@line 2683
   $216 = $ReallocAsyncCtx + 216 | 0; //@line 2684
   HEAP32[$216 >> 2] = $108; //@line 2685
   $217 = $ReallocAsyncCtx + 220 | 0; //@line 2686
   HEAP32[$217 >> 2] = $110; //@line 2687
   $218 = $ReallocAsyncCtx + 224 | 0; //@line 2688
   HEAP32[$218 >> 2] = $112; //@line 2689
   $219 = $ReallocAsyncCtx + 228 | 0; //@line 2690
   HEAP32[$219 >> 2] = $114; //@line 2691
   $220 = $ReallocAsyncCtx + 232 | 0; //@line 2692
   HEAP32[$220 >> 2] = $116; //@line 2693
   $221 = $ReallocAsyncCtx + 236 | 0; //@line 2694
   HEAP32[$221 >> 2] = $118; //@line 2695
   $222 = $ReallocAsyncCtx + 240 | 0; //@line 2696
   HEAP32[$222 >> 2] = $120; //@line 2697
   $223 = $ReallocAsyncCtx + 244 | 0; //@line 2698
   HEAP32[$223 >> 2] = $122; //@line 2699
   $224 = $ReallocAsyncCtx + 248 | 0; //@line 2700
   HEAP32[$224 >> 2] = $124; //@line 2701
   $225 = $ReallocAsyncCtx + 252 | 0; //@line 2702
   HEAP32[$225 >> 2] = $126; //@line 2703
   $226 = $ReallocAsyncCtx + 256 | 0; //@line 2704
   HEAP32[$226 >> 2] = $128; //@line 2705
   $227 = $ReallocAsyncCtx + 260 | 0; //@line 2706
   HEAP32[$227 >> 2] = $130; //@line 2707
   $228 = $ReallocAsyncCtx + 264 | 0; //@line 2708
   HEAP32[$228 >> 2] = $132; //@line 2709
   $229 = $ReallocAsyncCtx + 268 | 0; //@line 2710
   HEAP32[$229 >> 2] = $134; //@line 2711
   sp = STACKTOP; //@line 2712
   return;
  }
  HEAP8[___async_retval >> 0] = $161; //@line 2716
  ___async_unwind = 0; //@line 2717
  HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 2718
  $162 = $ReallocAsyncCtx + 4 | 0; //@line 2719
  HEAP32[$162 >> 2] = $2; //@line 2720
  $163 = $ReallocAsyncCtx + 8 | 0; //@line 2721
  HEAP32[$163 >> 2] = $4; //@line 2722
  $164 = $ReallocAsyncCtx + 12 | 0; //@line 2723
  HEAP32[$164 >> 2] = $6; //@line 2724
  $165 = $ReallocAsyncCtx + 16 | 0; //@line 2725
  HEAP32[$165 >> 2] = $8; //@line 2726
  $166 = $ReallocAsyncCtx + 20 | 0; //@line 2727
  HEAP32[$166 >> 2] = $22; //@line 2728
  $167 = $ReallocAsyncCtx + 24 | 0; //@line 2729
  HEAP32[$167 >> 2] = $12; //@line 2730
  $168 = $ReallocAsyncCtx + 28 | 0; //@line 2731
  HEAP32[$168 >> 2] = $14; //@line 2732
  $169 = $ReallocAsyncCtx + 32 | 0; //@line 2733
  HEAP32[$169 >> 2] = $10; //@line 2734
  $170 = $ReallocAsyncCtx + 36 | 0; //@line 2735
  HEAP8[$170 >> 0] = $18; //@line 2736
  $171 = $ReallocAsyncCtx + 40 | 0; //@line 2737
  HEAP32[$171 >> 2] = $20; //@line 2738
  $172 = $ReallocAsyncCtx + 44 | 0; //@line 2739
  HEAP32[$172 >> 2] = $24; //@line 2740
  $173 = $ReallocAsyncCtx + 48 | 0; //@line 2741
  HEAP8[$173 >> 0] = $16; //@line 2742
  $174 = $ReallocAsyncCtx + 49 | 0; //@line 2743
  HEAP8[$174 >> 0] = $26; //@line 2744
  $175 = $ReallocAsyncCtx + 52 | 0; //@line 2745
  HEAP32[$175 >> 2] = $28; //@line 2746
  $176 = $ReallocAsyncCtx + 56 | 0; //@line 2747
  HEAP32[$176 >> 2] = $30; //@line 2748
  $177 = $ReallocAsyncCtx + 60 | 0; //@line 2749
  HEAP32[$177 >> 2] = $32; //@line 2750
  $178 = $ReallocAsyncCtx + 64 | 0; //@line 2751
  HEAP32[$178 >> 2] = $34; //@line 2752
  $179 = $ReallocAsyncCtx + 68 | 0; //@line 2753
  HEAP32[$179 >> 2] = $38; //@line 2754
  $180 = $ReallocAsyncCtx + 72 | 0; //@line 2755
  HEAP32[$180 >> 2] = $40; //@line 2756
  $181 = $ReallocAsyncCtx + 76 | 0; //@line 2757
  HEAP32[$181 >> 2] = $42; //@line 2758
  $182 = $ReallocAsyncCtx + 80 | 0; //@line 2759
  HEAP32[$182 >> 2] = $44; //@line 2760
  $183 = $ReallocAsyncCtx + 84 | 0; //@line 2761
  HEAP32[$183 >> 2] = $46; //@line 2762
  $184 = $ReallocAsyncCtx + 88 | 0; //@line 2763
  HEAP32[$184 >> 2] = $48; //@line 2764
  $185 = $ReallocAsyncCtx + 92 | 0; //@line 2765
  HEAP32[$185 >> 2] = $50; //@line 2766
  $186 = $ReallocAsyncCtx + 96 | 0; //@line 2767
  HEAP32[$186 >> 2] = $52; //@line 2768
  $187 = $ReallocAsyncCtx + 100 | 0; //@line 2769
  HEAP32[$187 >> 2] = $54; //@line 2770
  $188 = $ReallocAsyncCtx + 104 | 0; //@line 2771
  HEAP32[$188 >> 2] = $56; //@line 2772
  $189 = $ReallocAsyncCtx + 108 | 0; //@line 2773
  HEAP32[$189 >> 2] = $58; //@line 2774
  $190 = $ReallocAsyncCtx + 112 | 0; //@line 2775
  HEAP32[$190 >> 2] = $62; //@line 2776
  $191 = $ReallocAsyncCtx + 116 | 0; //@line 2777
  HEAP32[$191 >> 2] = $64; //@line 2778
  $192 = $ReallocAsyncCtx + 120 | 0; //@line 2779
  HEAP32[$192 >> 2] = $60; //@line 2780
  $193 = $ReallocAsyncCtx + 124 | 0; //@line 2781
  HEAP32[$193 >> 2] = $66; //@line 2782
  $194 = $ReallocAsyncCtx + 128 | 0; //@line 2783
  HEAP32[$194 >> 2] = $70; //@line 2784
  $195 = $ReallocAsyncCtx + 132 | 0; //@line 2785
  HEAP32[$195 >> 2] = $68; //@line 2786
  $196 = $ReallocAsyncCtx + 136 | 0; //@line 2787
  HEAP32[$196 >> 2] = $72; //@line 2788
  $197 = $ReallocAsyncCtx + 140 | 0; //@line 2789
  HEAP32[$197 >> 2] = $74; //@line 2790
  $198 = $ReallocAsyncCtx + 144 | 0; //@line 2791
  HEAP32[$198 >> 2] = $76; //@line 2792
  $199 = $ReallocAsyncCtx + 148 | 0; //@line 2793
  HEAP32[$199 >> 2] = $78; //@line 2794
  $200 = $ReallocAsyncCtx + 152 | 0; //@line 2795
  HEAP32[$200 >> 2] = $80; //@line 2796
  $201 = $ReallocAsyncCtx + 156 | 0; //@line 2797
  HEAP32[$201 >> 2] = $82; //@line 2798
  $202 = $ReallocAsyncCtx + 160 | 0; //@line 2799
  HEAP32[$202 >> 2] = $84; //@line 2800
  $203 = $ReallocAsyncCtx + 164 | 0; //@line 2801
  HEAP32[$203 >> 2] = $86; //@line 2802
  $204 = $ReallocAsyncCtx + 168 | 0; //@line 2803
  HEAP32[$204 >> 2] = $90; //@line 2804
  $205 = $ReallocAsyncCtx + 172 | 0; //@line 2805
  HEAP32[$205 >> 2] = $92; //@line 2806
  $206 = $ReallocAsyncCtx + 176 | 0; //@line 2807
  HEAP32[$206 >> 2] = $88; //@line 2808
  $207 = $ReallocAsyncCtx + 180 | 0; //@line 2809
  HEAP32[$207 >> 2] = $94; //@line 2810
  $208 = $ReallocAsyncCtx + 184 | 0; //@line 2811
  HEAP32[$208 >> 2] = $96; //@line 2812
  $209 = $ReallocAsyncCtx + 188 | 0; //@line 2813
  HEAP32[$209 >> 2] = $98; //@line 2814
  $210 = $ReallocAsyncCtx + 192 | 0; //@line 2815
  HEAP32[$210 >> 2] = $$096$be; //@line 2816
  $211 = $ReallocAsyncCtx + 196 | 0; //@line 2817
  HEAP32[$211 >> 2] = $100; //@line 2818
  $212 = $ReallocAsyncCtx + 200 | 0; //@line 2819
  HEAP32[$212 >> 2] = $102; //@line 2820
  $213 = $ReallocAsyncCtx + 204 | 0; //@line 2821
  HEAP32[$213 >> 2] = $104; //@line 2822
  $214 = $ReallocAsyncCtx + 208 | 0; //@line 2823
  HEAP32[$214 >> 2] = $148; //@line 2824
  $215 = $ReallocAsyncCtx + 212 | 0; //@line 2825
  HEAP32[$215 >> 2] = $106; //@line 2826
  $216 = $ReallocAsyncCtx + 216 | 0; //@line 2827
  HEAP32[$216 >> 2] = $108; //@line 2828
  $217 = $ReallocAsyncCtx + 220 | 0; //@line 2829
  HEAP32[$217 >> 2] = $110; //@line 2830
  $218 = $ReallocAsyncCtx + 224 | 0; //@line 2831
  HEAP32[$218 >> 2] = $112; //@line 2832
  $219 = $ReallocAsyncCtx + 228 | 0; //@line 2833
  HEAP32[$219 >> 2] = $114; //@line 2834
  $220 = $ReallocAsyncCtx + 232 | 0; //@line 2835
  HEAP32[$220 >> 2] = $116; //@line 2836
  $221 = $ReallocAsyncCtx + 236 | 0; //@line 2837
  HEAP32[$221 >> 2] = $118; //@line 2838
  $222 = $ReallocAsyncCtx + 240 | 0; //@line 2839
  HEAP32[$222 >> 2] = $120; //@line 2840
  $223 = $ReallocAsyncCtx + 244 | 0; //@line 2841
  HEAP32[$223 >> 2] = $122; //@line 2842
  $224 = $ReallocAsyncCtx + 248 | 0; //@line 2843
  HEAP32[$224 >> 2] = $124; //@line 2844
  $225 = $ReallocAsyncCtx + 252 | 0; //@line 2845
  HEAP32[$225 >> 2] = $126; //@line 2846
  $226 = $ReallocAsyncCtx + 256 | 0; //@line 2847
  HEAP32[$226 >> 2] = $128; //@line 2848
  $227 = $ReallocAsyncCtx + 260 | 0; //@line 2849
  HEAP32[$227 >> 2] = $130; //@line 2850
  $228 = $ReallocAsyncCtx + 264 | 0; //@line 2851
  HEAP32[$228 >> 2] = $132; //@line 2852
  $229 = $ReallocAsyncCtx + 268 | 0; //@line 2853
  HEAP32[$229 >> 2] = $134; //@line 2854
  sp = STACKTOP; //@line 2855
  return;
 } else if ((label | 0) == 9) {
  $247 = HEAP8[$12 + ($137 & 255) >> 0] | 0; //@line 2861
  HEAP8[$124 >> 0] = ($247 & 255) >>> 4 & 7; //@line 2866
  HEAP8[$88 >> 0] = $247 & 15; //@line 2868
  $266 = $$0$be + 5 << 24 >> 24; //@line 2882
  HEAP32[$132 >> 2] = (HEAPU8[$12 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$12 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$12 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 2890
  $276 = HEAP32[(HEAP32[$110 >> 2] | 0) + 40 >> 2] | 0; //@line 2893
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 2894
  $277 = FUNCTION_TABLE_iii[$276 & 31]($34, $48) | 0; //@line 2895
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 591; //@line 2898
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 2899
   HEAP32[$278 >> 2] = $2; //@line 2900
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 2901
   HEAP32[$279 >> 2] = $4; //@line 2902
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 2903
   HEAP32[$280 >> 2] = $6; //@line 2904
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 2905
   HEAP32[$281 >> 2] = $8; //@line 2906
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 2907
   HEAP32[$282 >> 2] = $10; //@line 2908
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 2909
   HEAP32[$283 >> 2] = $12; //@line 2910
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 2911
   HEAP32[$284 >> 2] = $14; //@line 2912
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 2913
   HEAP8[$285 >> 0] = $16; //@line 2914
   $286 = $ReallocAsyncCtx2 + 33 | 0; //@line 2915
   HEAP8[$286 >> 0] = $18; //@line 2916
   $287 = $ReallocAsyncCtx2 + 36 | 0; //@line 2917
   HEAP32[$287 >> 2] = $20; //@line 2918
   $288 = $ReallocAsyncCtx2 + 40 | 0; //@line 2919
   HEAP32[$288 >> 2] = $22; //@line 2920
   $289 = $ReallocAsyncCtx2 + 44 | 0; //@line 2921
   HEAP32[$289 >> 2] = $24; //@line 2922
   $290 = $ReallocAsyncCtx2 + 48 | 0; //@line 2923
   HEAP8[$290 >> 0] = $26; //@line 2924
   $291 = $ReallocAsyncCtx2 + 52 | 0; //@line 2925
   HEAP32[$291 >> 2] = $28; //@line 2926
   $292 = $ReallocAsyncCtx2 + 56 | 0; //@line 2927
   HEAP32[$292 >> 2] = $30; //@line 2928
   $293 = $ReallocAsyncCtx2 + 60 | 0; //@line 2929
   HEAP32[$293 >> 2] = $32; //@line 2930
   $294 = $ReallocAsyncCtx2 + 64 | 0; //@line 2931
   HEAP32[$294 >> 2] = $34; //@line 2932
   $295 = $ReallocAsyncCtx2 + 68 | 0; //@line 2933
   HEAP8[$295 >> 0] = $266; //@line 2934
   $296 = $ReallocAsyncCtx2 + 72 | 0; //@line 2935
   HEAP32[$296 >> 2] = $38; //@line 2936
   $297 = $ReallocAsyncCtx2 + 76 | 0; //@line 2937
   HEAP32[$297 >> 2] = $40; //@line 2938
   $298 = $ReallocAsyncCtx2 + 80 | 0; //@line 2939
   HEAP32[$298 >> 2] = $42; //@line 2940
   $299 = $ReallocAsyncCtx2 + 84 | 0; //@line 2941
   HEAP32[$299 >> 2] = $44; //@line 2942
   $300 = $ReallocAsyncCtx2 + 88 | 0; //@line 2943
   HEAP32[$300 >> 2] = $46; //@line 2944
   $301 = $ReallocAsyncCtx2 + 92 | 0; //@line 2945
   HEAP32[$301 >> 2] = $48; //@line 2946
   $302 = $ReallocAsyncCtx2 + 96 | 0; //@line 2947
   HEAP32[$302 >> 2] = $50; //@line 2948
   $303 = $ReallocAsyncCtx2 + 100 | 0; //@line 2949
   HEAP32[$303 >> 2] = $52; //@line 2950
   $304 = $ReallocAsyncCtx2 + 104 | 0; //@line 2951
   HEAP32[$304 >> 2] = $54; //@line 2952
   $305 = $ReallocAsyncCtx2 + 108 | 0; //@line 2953
   HEAP32[$305 >> 2] = $56; //@line 2954
   $306 = $ReallocAsyncCtx2 + 112 | 0; //@line 2955
   HEAP32[$306 >> 2] = $58; //@line 2956
   $307 = $ReallocAsyncCtx2 + 116 | 0; //@line 2957
   HEAP32[$307 >> 2] = $60; //@line 2958
   $308 = $ReallocAsyncCtx2 + 120 | 0; //@line 2959
   HEAP32[$308 >> 2] = $62; //@line 2960
   $309 = $ReallocAsyncCtx2 + 124 | 0; //@line 2961
   HEAP32[$309 >> 2] = $64; //@line 2962
   $310 = $ReallocAsyncCtx2 + 128 | 0; //@line 2963
   HEAP32[$310 >> 2] = $66; //@line 2964
   $311 = $ReallocAsyncCtx2 + 132 | 0; //@line 2965
   HEAP32[$311 >> 2] = $68; //@line 2966
   $312 = $ReallocAsyncCtx2 + 136 | 0; //@line 2967
   HEAP32[$312 >> 2] = $70; //@line 2968
   $313 = $ReallocAsyncCtx2 + 140 | 0; //@line 2969
   HEAP32[$313 >> 2] = $72; //@line 2970
   $314 = $ReallocAsyncCtx2 + 144 | 0; //@line 2971
   HEAP32[$314 >> 2] = $74; //@line 2972
   $315 = $ReallocAsyncCtx2 + 148 | 0; //@line 2973
   HEAP32[$315 >> 2] = $76; //@line 2974
   $316 = $ReallocAsyncCtx2 + 152 | 0; //@line 2975
   HEAP32[$316 >> 2] = $78; //@line 2976
   $317 = $ReallocAsyncCtx2 + 156 | 0; //@line 2977
   HEAP32[$317 >> 2] = $80; //@line 2978
   $318 = $ReallocAsyncCtx2 + 160 | 0; //@line 2979
   HEAP32[$318 >> 2] = $82; //@line 2980
   $319 = $ReallocAsyncCtx2 + 164 | 0; //@line 2981
   HEAP32[$319 >> 2] = $84; //@line 2982
   $320 = $ReallocAsyncCtx2 + 168 | 0; //@line 2983
   HEAP32[$320 >> 2] = $86; //@line 2984
   $321 = $ReallocAsyncCtx2 + 172 | 0; //@line 2985
   HEAP32[$321 >> 2] = $88; //@line 2986
   $322 = $ReallocAsyncCtx2 + 176 | 0; //@line 2987
   HEAP32[$322 >> 2] = $90; //@line 2988
   $323 = $ReallocAsyncCtx2 + 180 | 0; //@line 2989
   HEAP32[$323 >> 2] = $92; //@line 2990
   $324 = $ReallocAsyncCtx2 + 184 | 0; //@line 2991
   HEAP32[$324 >> 2] = $94; //@line 2992
   $325 = $ReallocAsyncCtx2 + 188 | 0; //@line 2993
   HEAP32[$325 >> 2] = $96; //@line 2994
   $326 = $ReallocAsyncCtx2 + 192 | 0; //@line 2995
   HEAP32[$326 >> 2] = $98; //@line 2996
   $327 = $ReallocAsyncCtx2 + 196 | 0; //@line 2997
   HEAP32[$327 >> 2] = $100; //@line 2998
   $328 = $ReallocAsyncCtx2 + 200 | 0; //@line 2999
   HEAP32[$328 >> 2] = $102; //@line 3000
   $329 = $ReallocAsyncCtx2 + 204 | 0; //@line 3001
   HEAP32[$329 >> 2] = $104; //@line 3002
   $330 = $ReallocAsyncCtx2 + 208 | 0; //@line 3003
   HEAP32[$330 >> 2] = $106; //@line 3004
   $331 = $ReallocAsyncCtx2 + 212 | 0; //@line 3005
   HEAP32[$331 >> 2] = $108; //@line 3006
   $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 3007
   HEAP32[$332 >> 2] = $110; //@line 3008
   $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 3009
   HEAP32[$333 >> 2] = $112; //@line 3010
   $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 3011
   HEAP32[$334 >> 2] = $114; //@line 3012
   $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 3013
   HEAP32[$335 >> 2] = $116; //@line 3014
   $336 = $ReallocAsyncCtx2 + 232 | 0; //@line 3015
   HEAP32[$336 >> 2] = $118; //@line 3016
   $337 = $ReallocAsyncCtx2 + 236 | 0; //@line 3017
   HEAP32[$337 >> 2] = $120; //@line 3018
   $338 = $ReallocAsyncCtx2 + 240 | 0; //@line 3019
   HEAP32[$338 >> 2] = $122; //@line 3020
   $339 = $ReallocAsyncCtx2 + 244 | 0; //@line 3021
   HEAP32[$339 >> 2] = $124; //@line 3022
   $340 = $ReallocAsyncCtx2 + 248 | 0; //@line 3023
   HEAP32[$340 >> 2] = $126; //@line 3024
   $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 3025
   HEAP32[$341 >> 2] = $128; //@line 3026
   $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 3027
   HEAP32[$342 >> 2] = $130; //@line 3028
   $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 3029
   HEAP32[$343 >> 2] = $132; //@line 3030
   $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 3031
   HEAP32[$344 >> 2] = $134; //@line 3032
   sp = STACKTOP; //@line 3033
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 3037
  ___async_unwind = 0; //@line 3038
  HEAP32[$ReallocAsyncCtx2 >> 2] = 591; //@line 3039
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 3040
  HEAP32[$278 >> 2] = $2; //@line 3041
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 3042
  HEAP32[$279 >> 2] = $4; //@line 3043
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 3044
  HEAP32[$280 >> 2] = $6; //@line 3045
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 3046
  HEAP32[$281 >> 2] = $8; //@line 3047
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 3048
  HEAP32[$282 >> 2] = $10; //@line 3049
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 3050
  HEAP32[$283 >> 2] = $12; //@line 3051
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 3052
  HEAP32[$284 >> 2] = $14; //@line 3053
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 3054
  HEAP8[$285 >> 0] = $16; //@line 3055
  $286 = $ReallocAsyncCtx2 + 33 | 0; //@line 3056
  HEAP8[$286 >> 0] = $18; //@line 3057
  $287 = $ReallocAsyncCtx2 + 36 | 0; //@line 3058
  HEAP32[$287 >> 2] = $20; //@line 3059
  $288 = $ReallocAsyncCtx2 + 40 | 0; //@line 3060
  HEAP32[$288 >> 2] = $22; //@line 3061
  $289 = $ReallocAsyncCtx2 + 44 | 0; //@line 3062
  HEAP32[$289 >> 2] = $24; //@line 3063
  $290 = $ReallocAsyncCtx2 + 48 | 0; //@line 3064
  HEAP8[$290 >> 0] = $26; //@line 3065
  $291 = $ReallocAsyncCtx2 + 52 | 0; //@line 3066
  HEAP32[$291 >> 2] = $28; //@line 3067
  $292 = $ReallocAsyncCtx2 + 56 | 0; //@line 3068
  HEAP32[$292 >> 2] = $30; //@line 3069
  $293 = $ReallocAsyncCtx2 + 60 | 0; //@line 3070
  HEAP32[$293 >> 2] = $32; //@line 3071
  $294 = $ReallocAsyncCtx2 + 64 | 0; //@line 3072
  HEAP32[$294 >> 2] = $34; //@line 3073
  $295 = $ReallocAsyncCtx2 + 68 | 0; //@line 3074
  HEAP8[$295 >> 0] = $266; //@line 3075
  $296 = $ReallocAsyncCtx2 + 72 | 0; //@line 3076
  HEAP32[$296 >> 2] = $38; //@line 3077
  $297 = $ReallocAsyncCtx2 + 76 | 0; //@line 3078
  HEAP32[$297 >> 2] = $40; //@line 3079
  $298 = $ReallocAsyncCtx2 + 80 | 0; //@line 3080
  HEAP32[$298 >> 2] = $42; //@line 3081
  $299 = $ReallocAsyncCtx2 + 84 | 0; //@line 3082
  HEAP32[$299 >> 2] = $44; //@line 3083
  $300 = $ReallocAsyncCtx2 + 88 | 0; //@line 3084
  HEAP32[$300 >> 2] = $46; //@line 3085
  $301 = $ReallocAsyncCtx2 + 92 | 0; //@line 3086
  HEAP32[$301 >> 2] = $48; //@line 3087
  $302 = $ReallocAsyncCtx2 + 96 | 0; //@line 3088
  HEAP32[$302 >> 2] = $50; //@line 3089
  $303 = $ReallocAsyncCtx2 + 100 | 0; //@line 3090
  HEAP32[$303 >> 2] = $52; //@line 3091
  $304 = $ReallocAsyncCtx2 + 104 | 0; //@line 3092
  HEAP32[$304 >> 2] = $54; //@line 3093
  $305 = $ReallocAsyncCtx2 + 108 | 0; //@line 3094
  HEAP32[$305 >> 2] = $56; //@line 3095
  $306 = $ReallocAsyncCtx2 + 112 | 0; //@line 3096
  HEAP32[$306 >> 2] = $58; //@line 3097
  $307 = $ReallocAsyncCtx2 + 116 | 0; //@line 3098
  HEAP32[$307 >> 2] = $60; //@line 3099
  $308 = $ReallocAsyncCtx2 + 120 | 0; //@line 3100
  HEAP32[$308 >> 2] = $62; //@line 3101
  $309 = $ReallocAsyncCtx2 + 124 | 0; //@line 3102
  HEAP32[$309 >> 2] = $64; //@line 3103
  $310 = $ReallocAsyncCtx2 + 128 | 0; //@line 3104
  HEAP32[$310 >> 2] = $66; //@line 3105
  $311 = $ReallocAsyncCtx2 + 132 | 0; //@line 3106
  HEAP32[$311 >> 2] = $68; //@line 3107
  $312 = $ReallocAsyncCtx2 + 136 | 0; //@line 3108
  HEAP32[$312 >> 2] = $70; //@line 3109
  $313 = $ReallocAsyncCtx2 + 140 | 0; //@line 3110
  HEAP32[$313 >> 2] = $72; //@line 3111
  $314 = $ReallocAsyncCtx2 + 144 | 0; //@line 3112
  HEAP32[$314 >> 2] = $74; //@line 3113
  $315 = $ReallocAsyncCtx2 + 148 | 0; //@line 3114
  HEAP32[$315 >> 2] = $76; //@line 3115
  $316 = $ReallocAsyncCtx2 + 152 | 0; //@line 3116
  HEAP32[$316 >> 2] = $78; //@line 3117
  $317 = $ReallocAsyncCtx2 + 156 | 0; //@line 3118
  HEAP32[$317 >> 2] = $80; //@line 3119
  $318 = $ReallocAsyncCtx2 + 160 | 0; //@line 3120
  HEAP32[$318 >> 2] = $82; //@line 3121
  $319 = $ReallocAsyncCtx2 + 164 | 0; //@line 3122
  HEAP32[$319 >> 2] = $84; //@line 3123
  $320 = $ReallocAsyncCtx2 + 168 | 0; //@line 3124
  HEAP32[$320 >> 2] = $86; //@line 3125
  $321 = $ReallocAsyncCtx2 + 172 | 0; //@line 3126
  HEAP32[$321 >> 2] = $88; //@line 3127
  $322 = $ReallocAsyncCtx2 + 176 | 0; //@line 3128
  HEAP32[$322 >> 2] = $90; //@line 3129
  $323 = $ReallocAsyncCtx2 + 180 | 0; //@line 3130
  HEAP32[$323 >> 2] = $92; //@line 3131
  $324 = $ReallocAsyncCtx2 + 184 | 0; //@line 3132
  HEAP32[$324 >> 2] = $94; //@line 3133
  $325 = $ReallocAsyncCtx2 + 188 | 0; //@line 3134
  HEAP32[$325 >> 2] = $96; //@line 3135
  $326 = $ReallocAsyncCtx2 + 192 | 0; //@line 3136
  HEAP32[$326 >> 2] = $98; //@line 3137
  $327 = $ReallocAsyncCtx2 + 196 | 0; //@line 3138
  HEAP32[$327 >> 2] = $100; //@line 3139
  $328 = $ReallocAsyncCtx2 + 200 | 0; //@line 3140
  HEAP32[$328 >> 2] = $102; //@line 3141
  $329 = $ReallocAsyncCtx2 + 204 | 0; //@line 3142
  HEAP32[$329 >> 2] = $104; //@line 3143
  $330 = $ReallocAsyncCtx2 + 208 | 0; //@line 3144
  HEAP32[$330 >> 2] = $106; //@line 3145
  $331 = $ReallocAsyncCtx2 + 212 | 0; //@line 3146
  HEAP32[$331 >> 2] = $108; //@line 3147
  $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 3148
  HEAP32[$332 >> 2] = $110; //@line 3149
  $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 3150
  HEAP32[$333 >> 2] = $112; //@line 3151
  $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 3152
  HEAP32[$334 >> 2] = $114; //@line 3153
  $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 3154
  HEAP32[$335 >> 2] = $116; //@line 3155
  $336 = $ReallocAsyncCtx2 + 232 | 0; //@line 3156
  HEAP32[$336 >> 2] = $118; //@line 3157
  $337 = $ReallocAsyncCtx2 + 236 | 0; //@line 3158
  HEAP32[$337 >> 2] = $120; //@line 3159
  $338 = $ReallocAsyncCtx2 + 240 | 0; //@line 3160
  HEAP32[$338 >> 2] = $122; //@line 3161
  $339 = $ReallocAsyncCtx2 + 244 | 0; //@line 3162
  HEAP32[$339 >> 2] = $124; //@line 3163
  $340 = $ReallocAsyncCtx2 + 248 | 0; //@line 3164
  HEAP32[$340 >> 2] = $126; //@line 3165
  $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 3166
  HEAP32[$341 >> 2] = $128; //@line 3167
  $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 3168
  HEAP32[$342 >> 2] = $130; //@line 3169
  $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 3170
  HEAP32[$343 >> 2] = $132; //@line 3171
  $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 3172
  HEAP32[$344 >> 2] = $134; //@line 3173
  sp = STACKTOP; //@line 3174
  return;
 } else if ((label | 0) == 19) {
  HEAP8[$68 >> 0] = HEAP8[$12 + ($137 & 255) >> 0] | 0; //@line 3182
  HEAP32[$58 >> 2] = $128; //@line 3183
  HEAP32[$104 >> 2] = (HEAPU8[$12 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$12 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$12 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 3204
  HEAP32[$96 >> 2] = 0; //@line 3205
  $402 = $$0$be + 6 << 24 >> 24; //@line 3206
  HEAP8[$94 >> 0] = HEAP8[$12 + ($$0$be + 5 & 255) >> 0] | 0; //@line 3210
  $408 = HEAP32[(HEAP32[$84 >> 2] | 0) + 8 >> 2] | 0; //@line 3213
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 3214
  $409 = FUNCTION_TABLE_iii[$408 & 31]($34, $56) | 0; //@line 3215
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 592; //@line 3218
   $410 = $ReallocAsyncCtx3 + 4 | 0; //@line 3219
   HEAP32[$410 >> 2] = $2; //@line 3220
   $411 = $ReallocAsyncCtx3 + 8 | 0; //@line 3221
   HEAP32[$411 >> 2] = $4; //@line 3222
   $412 = $ReallocAsyncCtx3 + 12 | 0; //@line 3223
   HEAP32[$412 >> 2] = $6; //@line 3224
   $413 = $ReallocAsyncCtx3 + 16 | 0; //@line 3225
   HEAP32[$413 >> 2] = $8; //@line 3226
   $414 = $ReallocAsyncCtx3 + 20 | 0; //@line 3227
   HEAP32[$414 >> 2] = $10; //@line 3228
   $415 = $ReallocAsyncCtx3 + 24 | 0; //@line 3229
   HEAP32[$415 >> 2] = $12; //@line 3230
   $416 = $ReallocAsyncCtx3 + 28 | 0; //@line 3231
   HEAP32[$416 >> 2] = $14; //@line 3232
   $417 = $ReallocAsyncCtx3 + 32 | 0; //@line 3233
   HEAP8[$417 >> 0] = $16; //@line 3234
   $418 = $ReallocAsyncCtx3 + 33 | 0; //@line 3235
   HEAP8[$418 >> 0] = $18; //@line 3236
   $419 = $ReallocAsyncCtx3 + 36 | 0; //@line 3237
   HEAP32[$419 >> 2] = $20; //@line 3238
   $420 = $ReallocAsyncCtx3 + 40 | 0; //@line 3239
   HEAP32[$420 >> 2] = $22; //@line 3240
   $421 = $ReallocAsyncCtx3 + 44 | 0; //@line 3241
   HEAP32[$421 >> 2] = $24; //@line 3242
   $422 = $ReallocAsyncCtx3 + 48 | 0; //@line 3243
   HEAP8[$422 >> 0] = $26; //@line 3244
   $423 = $ReallocAsyncCtx3 + 52 | 0; //@line 3245
   HEAP32[$423 >> 2] = $28; //@line 3246
   $424 = $ReallocAsyncCtx3 + 56 | 0; //@line 3247
   HEAP32[$424 >> 2] = $30; //@line 3248
   $425 = $ReallocAsyncCtx3 + 60 | 0; //@line 3249
   HEAP32[$425 >> 2] = $32; //@line 3250
   $426 = $ReallocAsyncCtx3 + 64 | 0; //@line 3251
   HEAP32[$426 >> 2] = $34; //@line 3252
   $427 = $ReallocAsyncCtx3 + 68 | 0; //@line 3253
   HEAP32[$427 >> 2] = $38; //@line 3254
   $428 = $ReallocAsyncCtx3 + 72 | 0; //@line 3255
   HEAP32[$428 >> 2] = $40; //@line 3256
   $429 = $ReallocAsyncCtx3 + 76 | 0; //@line 3257
   HEAP32[$429 >> 2] = $42; //@line 3258
   $430 = $ReallocAsyncCtx3 + 80 | 0; //@line 3259
   HEAP32[$430 >> 2] = $44; //@line 3260
   $431 = $ReallocAsyncCtx3 + 84 | 0; //@line 3261
   HEAP32[$431 >> 2] = $46; //@line 3262
   $432 = $ReallocAsyncCtx3 + 88 | 0; //@line 3263
   HEAP32[$432 >> 2] = $48; //@line 3264
   $433 = $ReallocAsyncCtx3 + 92 | 0; //@line 3265
   HEAP32[$433 >> 2] = $50; //@line 3266
   $434 = $ReallocAsyncCtx3 + 96 | 0; //@line 3267
   HEAP32[$434 >> 2] = $52; //@line 3268
   $435 = $ReallocAsyncCtx3 + 100 | 0; //@line 3269
   HEAP32[$435 >> 2] = $54; //@line 3270
   $436 = $ReallocAsyncCtx3 + 104 | 0; //@line 3271
   HEAP32[$436 >> 2] = $56; //@line 3272
   $437 = $ReallocAsyncCtx3 + 108 | 0; //@line 3273
   HEAP32[$437 >> 2] = $58; //@line 3274
   $438 = $ReallocAsyncCtx3 + 112 | 0; //@line 3275
   HEAP32[$438 >> 2] = $60; //@line 3276
   $439 = $ReallocAsyncCtx3 + 116 | 0; //@line 3277
   HEAP32[$439 >> 2] = $62; //@line 3278
   $440 = $ReallocAsyncCtx3 + 120 | 0; //@line 3279
   HEAP32[$440 >> 2] = $64; //@line 3280
   $441 = $ReallocAsyncCtx3 + 124 | 0; //@line 3281
   HEAP32[$441 >> 2] = $66; //@line 3282
   $442 = $ReallocAsyncCtx3 + 128 | 0; //@line 3283
   HEAP32[$442 >> 2] = $68; //@line 3284
   $443 = $ReallocAsyncCtx3 + 132 | 0; //@line 3285
   HEAP32[$443 >> 2] = $70; //@line 3286
   $444 = $ReallocAsyncCtx3 + 136 | 0; //@line 3287
   HEAP32[$444 >> 2] = $72; //@line 3288
   $445 = $ReallocAsyncCtx3 + 140 | 0; //@line 3289
   HEAP32[$445 >> 2] = $74; //@line 3290
   $446 = $ReallocAsyncCtx3 + 144 | 0; //@line 3291
   HEAP32[$446 >> 2] = $76; //@line 3292
   $447 = $ReallocAsyncCtx3 + 148 | 0; //@line 3293
   HEAP32[$447 >> 2] = $78; //@line 3294
   $448 = $ReallocAsyncCtx3 + 152 | 0; //@line 3295
   HEAP32[$448 >> 2] = $80; //@line 3296
   $449 = $ReallocAsyncCtx3 + 156 | 0; //@line 3297
   HEAP32[$449 >> 2] = $82; //@line 3298
   $450 = $ReallocAsyncCtx3 + 160 | 0; //@line 3299
   HEAP32[$450 >> 2] = $84; //@line 3300
   $451 = $ReallocAsyncCtx3 + 164 | 0; //@line 3301
   HEAP32[$451 >> 2] = $86; //@line 3302
   $452 = $ReallocAsyncCtx3 + 168 | 0; //@line 3303
   HEAP32[$452 >> 2] = $88; //@line 3304
   $453 = $ReallocAsyncCtx3 + 172 | 0; //@line 3305
   HEAP32[$453 >> 2] = $90; //@line 3306
   $454 = $ReallocAsyncCtx3 + 176 | 0; //@line 3307
   HEAP32[$454 >> 2] = $92; //@line 3308
   $455 = $ReallocAsyncCtx3 + 180 | 0; //@line 3309
   HEAP32[$455 >> 2] = $94; //@line 3310
   $456 = $ReallocAsyncCtx3 + 184 | 0; //@line 3311
   HEAP32[$456 >> 2] = $96; //@line 3312
   $457 = $ReallocAsyncCtx3 + 188 | 0; //@line 3313
   HEAP32[$457 >> 2] = $98; //@line 3314
   $458 = $ReallocAsyncCtx3 + 192 | 0; //@line 3315
   HEAP32[$458 >> 2] = $100; //@line 3316
   $459 = $ReallocAsyncCtx3 + 196 | 0; //@line 3317
   HEAP32[$459 >> 2] = $102; //@line 3318
   $460 = $ReallocAsyncCtx3 + 200 | 0; //@line 3319
   HEAP32[$460 >> 2] = $104; //@line 3320
   $461 = $ReallocAsyncCtx3 + 204 | 0; //@line 3321
   HEAP32[$461 >> 2] = $106; //@line 3322
   $462 = $ReallocAsyncCtx3 + 208 | 0; //@line 3323
   HEAP32[$462 >> 2] = $108; //@line 3324
   $463 = $ReallocAsyncCtx3 + 212 | 0; //@line 3325
   HEAP32[$463 >> 2] = $110; //@line 3326
   $464 = $ReallocAsyncCtx3 + 216 | 0; //@line 3327
   HEAP8[$464 >> 0] = $402; //@line 3328
   $465 = $ReallocAsyncCtx3 + 220 | 0; //@line 3329
   HEAP32[$465 >> 2] = $112; //@line 3330
   $466 = $ReallocAsyncCtx3 + 224 | 0; //@line 3331
   HEAP32[$466 >> 2] = $114; //@line 3332
   $467 = $ReallocAsyncCtx3 + 228 | 0; //@line 3333
   HEAP32[$467 >> 2] = $116; //@line 3334
   $468 = $ReallocAsyncCtx3 + 232 | 0; //@line 3335
   HEAP32[$468 >> 2] = $118; //@line 3336
   $469 = $ReallocAsyncCtx3 + 236 | 0; //@line 3337
   HEAP32[$469 >> 2] = $120; //@line 3338
   $470 = $ReallocAsyncCtx3 + 240 | 0; //@line 3339
   HEAP32[$470 >> 2] = $122; //@line 3340
   $471 = $ReallocAsyncCtx3 + 244 | 0; //@line 3341
   HEAP32[$471 >> 2] = $124; //@line 3342
   $472 = $ReallocAsyncCtx3 + 248 | 0; //@line 3343
   HEAP32[$472 >> 2] = $126; //@line 3344
   $473 = $ReallocAsyncCtx3 + 252 | 0; //@line 3345
   HEAP32[$473 >> 2] = $128; //@line 3346
   $474 = $ReallocAsyncCtx3 + 256 | 0; //@line 3347
   HEAP32[$474 >> 2] = $130; //@line 3348
   $475 = $ReallocAsyncCtx3 + 260 | 0; //@line 3349
   HEAP32[$475 >> 2] = $132; //@line 3350
   $476 = $ReallocAsyncCtx3 + 264 | 0; //@line 3351
   HEAP32[$476 >> 2] = $134; //@line 3352
   sp = STACKTOP; //@line 3353
   return;
  }
  HEAP8[___async_retval >> 0] = $409; //@line 3357
  ___async_unwind = 0; //@line 3358
  HEAP32[$ReallocAsyncCtx3 >> 2] = 592; //@line 3359
  $410 = $ReallocAsyncCtx3 + 4 | 0; //@line 3360
  HEAP32[$410 >> 2] = $2; //@line 3361
  $411 = $ReallocAsyncCtx3 + 8 | 0; //@line 3362
  HEAP32[$411 >> 2] = $4; //@line 3363
  $412 = $ReallocAsyncCtx3 + 12 | 0; //@line 3364
  HEAP32[$412 >> 2] = $6; //@line 3365
  $413 = $ReallocAsyncCtx3 + 16 | 0; //@line 3366
  HEAP32[$413 >> 2] = $8; //@line 3367
  $414 = $ReallocAsyncCtx3 + 20 | 0; //@line 3368
  HEAP32[$414 >> 2] = $10; //@line 3369
  $415 = $ReallocAsyncCtx3 + 24 | 0; //@line 3370
  HEAP32[$415 >> 2] = $12; //@line 3371
  $416 = $ReallocAsyncCtx3 + 28 | 0; //@line 3372
  HEAP32[$416 >> 2] = $14; //@line 3373
  $417 = $ReallocAsyncCtx3 + 32 | 0; //@line 3374
  HEAP8[$417 >> 0] = $16; //@line 3375
  $418 = $ReallocAsyncCtx3 + 33 | 0; //@line 3376
  HEAP8[$418 >> 0] = $18; //@line 3377
  $419 = $ReallocAsyncCtx3 + 36 | 0; //@line 3378
  HEAP32[$419 >> 2] = $20; //@line 3379
  $420 = $ReallocAsyncCtx3 + 40 | 0; //@line 3380
  HEAP32[$420 >> 2] = $22; //@line 3381
  $421 = $ReallocAsyncCtx3 + 44 | 0; //@line 3382
  HEAP32[$421 >> 2] = $24; //@line 3383
  $422 = $ReallocAsyncCtx3 + 48 | 0; //@line 3384
  HEAP8[$422 >> 0] = $26; //@line 3385
  $423 = $ReallocAsyncCtx3 + 52 | 0; //@line 3386
  HEAP32[$423 >> 2] = $28; //@line 3387
  $424 = $ReallocAsyncCtx3 + 56 | 0; //@line 3388
  HEAP32[$424 >> 2] = $30; //@line 3389
  $425 = $ReallocAsyncCtx3 + 60 | 0; //@line 3390
  HEAP32[$425 >> 2] = $32; //@line 3391
  $426 = $ReallocAsyncCtx3 + 64 | 0; //@line 3392
  HEAP32[$426 >> 2] = $34; //@line 3393
  $427 = $ReallocAsyncCtx3 + 68 | 0; //@line 3394
  HEAP32[$427 >> 2] = $38; //@line 3395
  $428 = $ReallocAsyncCtx3 + 72 | 0; //@line 3396
  HEAP32[$428 >> 2] = $40; //@line 3397
  $429 = $ReallocAsyncCtx3 + 76 | 0; //@line 3398
  HEAP32[$429 >> 2] = $42; //@line 3399
  $430 = $ReallocAsyncCtx3 + 80 | 0; //@line 3400
  HEAP32[$430 >> 2] = $44; //@line 3401
  $431 = $ReallocAsyncCtx3 + 84 | 0; //@line 3402
  HEAP32[$431 >> 2] = $46; //@line 3403
  $432 = $ReallocAsyncCtx3 + 88 | 0; //@line 3404
  HEAP32[$432 >> 2] = $48; //@line 3405
  $433 = $ReallocAsyncCtx3 + 92 | 0; //@line 3406
  HEAP32[$433 >> 2] = $50; //@line 3407
  $434 = $ReallocAsyncCtx3 + 96 | 0; //@line 3408
  HEAP32[$434 >> 2] = $52; //@line 3409
  $435 = $ReallocAsyncCtx3 + 100 | 0; //@line 3410
  HEAP32[$435 >> 2] = $54; //@line 3411
  $436 = $ReallocAsyncCtx3 + 104 | 0; //@line 3412
  HEAP32[$436 >> 2] = $56; //@line 3413
  $437 = $ReallocAsyncCtx3 + 108 | 0; //@line 3414
  HEAP32[$437 >> 2] = $58; //@line 3415
  $438 = $ReallocAsyncCtx3 + 112 | 0; //@line 3416
  HEAP32[$438 >> 2] = $60; //@line 3417
  $439 = $ReallocAsyncCtx3 + 116 | 0; //@line 3418
  HEAP32[$439 >> 2] = $62; //@line 3419
  $440 = $ReallocAsyncCtx3 + 120 | 0; //@line 3420
  HEAP32[$440 >> 2] = $64; //@line 3421
  $441 = $ReallocAsyncCtx3 + 124 | 0; //@line 3422
  HEAP32[$441 >> 2] = $66; //@line 3423
  $442 = $ReallocAsyncCtx3 + 128 | 0; //@line 3424
  HEAP32[$442 >> 2] = $68; //@line 3425
  $443 = $ReallocAsyncCtx3 + 132 | 0; //@line 3426
  HEAP32[$443 >> 2] = $70; //@line 3427
  $444 = $ReallocAsyncCtx3 + 136 | 0; //@line 3428
  HEAP32[$444 >> 2] = $72; //@line 3429
  $445 = $ReallocAsyncCtx3 + 140 | 0; //@line 3430
  HEAP32[$445 >> 2] = $74; //@line 3431
  $446 = $ReallocAsyncCtx3 + 144 | 0; //@line 3432
  HEAP32[$446 >> 2] = $76; //@line 3433
  $447 = $ReallocAsyncCtx3 + 148 | 0; //@line 3434
  HEAP32[$447 >> 2] = $78; //@line 3435
  $448 = $ReallocAsyncCtx3 + 152 | 0; //@line 3436
  HEAP32[$448 >> 2] = $80; //@line 3437
  $449 = $ReallocAsyncCtx3 + 156 | 0; //@line 3438
  HEAP32[$449 >> 2] = $82; //@line 3439
  $450 = $ReallocAsyncCtx3 + 160 | 0; //@line 3440
  HEAP32[$450 >> 2] = $84; //@line 3441
  $451 = $ReallocAsyncCtx3 + 164 | 0; //@line 3442
  HEAP32[$451 >> 2] = $86; //@line 3443
  $452 = $ReallocAsyncCtx3 + 168 | 0; //@line 3444
  HEAP32[$452 >> 2] = $88; //@line 3445
  $453 = $ReallocAsyncCtx3 + 172 | 0; //@line 3446
  HEAP32[$453 >> 2] = $90; //@line 3447
  $454 = $ReallocAsyncCtx3 + 176 | 0; //@line 3448
  HEAP32[$454 >> 2] = $92; //@line 3449
  $455 = $ReallocAsyncCtx3 + 180 | 0; //@line 3450
  HEAP32[$455 >> 2] = $94; //@line 3451
  $456 = $ReallocAsyncCtx3 + 184 | 0; //@line 3452
  HEAP32[$456 >> 2] = $96; //@line 3453
  $457 = $ReallocAsyncCtx3 + 188 | 0; //@line 3454
  HEAP32[$457 >> 2] = $98; //@line 3455
  $458 = $ReallocAsyncCtx3 + 192 | 0; //@line 3456
  HEAP32[$458 >> 2] = $100; //@line 3457
  $459 = $ReallocAsyncCtx3 + 196 | 0; //@line 3458
  HEAP32[$459 >> 2] = $102; //@line 3459
  $460 = $ReallocAsyncCtx3 + 200 | 0; //@line 3460
  HEAP32[$460 >> 2] = $104; //@line 3461
  $461 = $ReallocAsyncCtx3 + 204 | 0; //@line 3462
  HEAP32[$461 >> 2] = $106; //@line 3463
  $462 = $ReallocAsyncCtx3 + 208 | 0; //@line 3464
  HEAP32[$462 >> 2] = $108; //@line 3465
  $463 = $ReallocAsyncCtx3 + 212 | 0; //@line 3466
  HEAP32[$463 >> 2] = $110; //@line 3467
  $464 = $ReallocAsyncCtx3 + 216 | 0; //@line 3468
  HEAP8[$464 >> 0] = $402; //@line 3469
  $465 = $ReallocAsyncCtx3 + 220 | 0; //@line 3470
  HEAP32[$465 >> 2] = $112; //@line 3471
  $466 = $ReallocAsyncCtx3 + 224 | 0; //@line 3472
  HEAP32[$466 >> 2] = $114; //@line 3473
  $467 = $ReallocAsyncCtx3 + 228 | 0; //@line 3474
  HEAP32[$467 >> 2] = $116; //@line 3475
  $468 = $ReallocAsyncCtx3 + 232 | 0; //@line 3476
  HEAP32[$468 >> 2] = $118; //@line 3477
  $469 = $ReallocAsyncCtx3 + 236 | 0; //@line 3478
  HEAP32[$469 >> 2] = $120; //@line 3479
  $470 = $ReallocAsyncCtx3 + 240 | 0; //@line 3480
  HEAP32[$470 >> 2] = $122; //@line 3481
  $471 = $ReallocAsyncCtx3 + 244 | 0; //@line 3482
  HEAP32[$471 >> 2] = $124; //@line 3483
  $472 = $ReallocAsyncCtx3 + 248 | 0; //@line 3484
  HEAP32[$472 >> 2] = $126; //@line 3485
  $473 = $ReallocAsyncCtx3 + 252 | 0; //@line 3486
  HEAP32[$473 >> 2] = $128; //@line 3487
  $474 = $ReallocAsyncCtx3 + 256 | 0; //@line 3488
  HEAP32[$474 >> 2] = $130; //@line 3489
  $475 = $ReallocAsyncCtx3 + 260 | 0; //@line 3490
  HEAP32[$475 >> 2] = $132; //@line 3491
  $476 = $ReallocAsyncCtx3 + 264 | 0; //@line 3492
  HEAP32[$476 >> 2] = $134; //@line 3493
  sp = STACKTOP; //@line 3494
  return;
 } else if ((label | 0) == 24) {
  $495 = $$0$be + 2 << 24 >> 24; //@line 3498
  $498 = HEAP8[$12 + ($137 & 255) >> 0] | 0; //@line 3501
  HEAP8[$118 >> 0] = 0; //@line 3502
  $499 = $498 & 255; //@line 3503
  HEAP8[$114 >> 0] = $499 >>> 5 & 1; //@line 3507
  if ($499 & 16 | 0) {
   HEAP8[$118 >> 0] = 1; //@line 3511
  }
  HEAP8[$42 >> 0] = $499 & 15; //@line 3515
  $508 = HEAP32[(HEAP32[$32 >> 2] | 0) + 44 >> 2] | 0; //@line 3518
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 3519
  $509 = FUNCTION_TABLE_iii[$508 & 31]($34, $86) | 0; //@line 3520
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 593; //@line 3523
   $510 = $ReallocAsyncCtx4 + 4 | 0; //@line 3524
   HEAP32[$510 >> 2] = $2; //@line 3525
   $511 = $ReallocAsyncCtx4 + 8 | 0; //@line 3526
   HEAP32[$511 >> 2] = $4; //@line 3527
   $512 = $ReallocAsyncCtx4 + 12 | 0; //@line 3528
   HEAP32[$512 >> 2] = $6; //@line 3529
   $513 = $ReallocAsyncCtx4 + 16 | 0; //@line 3530
   HEAP8[$513 >> 0] = $495; //@line 3531
   $514 = $ReallocAsyncCtx4 + 20 | 0; //@line 3532
   HEAP32[$514 >> 2] = $8; //@line 3533
   $515 = $ReallocAsyncCtx4 + 24 | 0; //@line 3534
   HEAP32[$515 >> 2] = $10; //@line 3535
   $516 = $ReallocAsyncCtx4 + 28 | 0; //@line 3536
   HEAP32[$516 >> 2] = $12; //@line 3537
   $517 = $ReallocAsyncCtx4 + 32 | 0; //@line 3538
   HEAP32[$517 >> 2] = $14; //@line 3539
   $518 = $ReallocAsyncCtx4 + 36 | 0; //@line 3540
   HEAP8[$518 >> 0] = $16; //@line 3541
   $519 = $ReallocAsyncCtx4 + 37 | 0; //@line 3542
   HEAP8[$519 >> 0] = $18; //@line 3543
   $520 = $ReallocAsyncCtx4 + 40 | 0; //@line 3544
   HEAP32[$520 >> 2] = $20; //@line 3545
   $521 = $ReallocAsyncCtx4 + 44 | 0; //@line 3546
   HEAP32[$521 >> 2] = $22; //@line 3547
   $522 = $ReallocAsyncCtx4 + 48 | 0; //@line 3548
   HEAP32[$522 >> 2] = $24; //@line 3549
   $523 = $ReallocAsyncCtx4 + 52 | 0; //@line 3550
   HEAP8[$523 >> 0] = $26; //@line 3551
   $524 = $ReallocAsyncCtx4 + 56 | 0; //@line 3552
   HEAP32[$524 >> 2] = $28; //@line 3553
   $525 = $ReallocAsyncCtx4 + 60 | 0; //@line 3554
   HEAP32[$525 >> 2] = $30; //@line 3555
   $526 = $ReallocAsyncCtx4 + 64 | 0; //@line 3556
   HEAP32[$526 >> 2] = $32; //@line 3557
   $527 = $ReallocAsyncCtx4 + 68 | 0; //@line 3558
   HEAP32[$527 >> 2] = $34; //@line 3559
   $528 = $ReallocAsyncCtx4 + 72 | 0; //@line 3560
   HEAP32[$528 >> 2] = $38; //@line 3561
   $529 = $ReallocAsyncCtx4 + 76 | 0; //@line 3562
   HEAP32[$529 >> 2] = $40; //@line 3563
   $530 = $ReallocAsyncCtx4 + 80 | 0; //@line 3564
   HEAP32[$530 >> 2] = $42; //@line 3565
   $531 = $ReallocAsyncCtx4 + 84 | 0; //@line 3566
   HEAP32[$531 >> 2] = $44; //@line 3567
   $532 = $ReallocAsyncCtx4 + 88 | 0; //@line 3568
   HEAP32[$532 >> 2] = $46; //@line 3569
   $533 = $ReallocAsyncCtx4 + 92 | 0; //@line 3570
   HEAP32[$533 >> 2] = $48; //@line 3571
   $534 = $ReallocAsyncCtx4 + 96 | 0; //@line 3572
   HEAP32[$534 >> 2] = $50; //@line 3573
   $535 = $ReallocAsyncCtx4 + 100 | 0; //@line 3574
   HEAP32[$535 >> 2] = $52; //@line 3575
   $536 = $ReallocAsyncCtx4 + 104 | 0; //@line 3576
   HEAP32[$536 >> 2] = $54; //@line 3577
   $537 = $ReallocAsyncCtx4 + 108 | 0; //@line 3578
   HEAP32[$537 >> 2] = $56; //@line 3579
   $538 = $ReallocAsyncCtx4 + 112 | 0; //@line 3580
   HEAP32[$538 >> 2] = $58; //@line 3581
   $539 = $ReallocAsyncCtx4 + 116 | 0; //@line 3582
   HEAP32[$539 >> 2] = $60; //@line 3583
   $540 = $ReallocAsyncCtx4 + 120 | 0; //@line 3584
   HEAP32[$540 >> 2] = $62; //@line 3585
   $541 = $ReallocAsyncCtx4 + 124 | 0; //@line 3586
   HEAP32[$541 >> 2] = $64; //@line 3587
   $542 = $ReallocAsyncCtx4 + 128 | 0; //@line 3588
   HEAP32[$542 >> 2] = $66; //@line 3589
   $543 = $ReallocAsyncCtx4 + 132 | 0; //@line 3590
   HEAP32[$543 >> 2] = $68; //@line 3591
   $544 = $ReallocAsyncCtx4 + 136 | 0; //@line 3592
   HEAP32[$544 >> 2] = $70; //@line 3593
   $545 = $ReallocAsyncCtx4 + 140 | 0; //@line 3594
   HEAP32[$545 >> 2] = $72; //@line 3595
   $546 = $ReallocAsyncCtx4 + 144 | 0; //@line 3596
   HEAP32[$546 >> 2] = $74; //@line 3597
   $547 = $ReallocAsyncCtx4 + 148 | 0; //@line 3598
   HEAP32[$547 >> 2] = $76; //@line 3599
   $548 = $ReallocAsyncCtx4 + 152 | 0; //@line 3600
   HEAP32[$548 >> 2] = $78; //@line 3601
   $549 = $ReallocAsyncCtx4 + 156 | 0; //@line 3602
   HEAP32[$549 >> 2] = $80; //@line 3603
   $550 = $ReallocAsyncCtx4 + 160 | 0; //@line 3604
   HEAP32[$550 >> 2] = $82; //@line 3605
   $551 = $ReallocAsyncCtx4 + 164 | 0; //@line 3606
   HEAP32[$551 >> 2] = $84; //@line 3607
   $552 = $ReallocAsyncCtx4 + 168 | 0; //@line 3608
   HEAP32[$552 >> 2] = $86; //@line 3609
   $553 = $ReallocAsyncCtx4 + 172 | 0; //@line 3610
   HEAP32[$553 >> 2] = $88; //@line 3611
   $554 = $ReallocAsyncCtx4 + 176 | 0; //@line 3612
   HEAP32[$554 >> 2] = $90; //@line 3613
   $555 = $ReallocAsyncCtx4 + 180 | 0; //@line 3614
   HEAP32[$555 >> 2] = $92; //@line 3615
   $556 = $ReallocAsyncCtx4 + 184 | 0; //@line 3616
   HEAP32[$556 >> 2] = $94; //@line 3617
   $557 = $ReallocAsyncCtx4 + 188 | 0; //@line 3618
   HEAP32[$557 >> 2] = $96; //@line 3619
   $558 = $ReallocAsyncCtx4 + 192 | 0; //@line 3620
   HEAP32[$558 >> 2] = $98; //@line 3621
   $559 = $ReallocAsyncCtx4 + 196 | 0; //@line 3622
   HEAP32[$559 >> 2] = $$096$be; //@line 3623
   $560 = $ReallocAsyncCtx4 + 200 | 0; //@line 3624
   HEAP32[$560 >> 2] = $100; //@line 3625
   $561 = $ReallocAsyncCtx4 + 204 | 0; //@line 3626
   HEAP32[$561 >> 2] = $102; //@line 3627
   $562 = $ReallocAsyncCtx4 + 208 | 0; //@line 3628
   HEAP32[$562 >> 2] = $104; //@line 3629
   $563 = $ReallocAsyncCtx4 + 212 | 0; //@line 3630
   HEAP32[$563 >> 2] = $106; //@line 3631
   $564 = $ReallocAsyncCtx4 + 216 | 0; //@line 3632
   HEAP32[$564 >> 2] = $108; //@line 3633
   $565 = $ReallocAsyncCtx4 + 220 | 0; //@line 3634
   HEAP32[$565 >> 2] = $110; //@line 3635
   $566 = $ReallocAsyncCtx4 + 224 | 0; //@line 3636
   HEAP32[$566 >> 2] = $112; //@line 3637
   $567 = $ReallocAsyncCtx4 + 228 | 0; //@line 3638
   HEAP32[$567 >> 2] = $114; //@line 3639
   $568 = $ReallocAsyncCtx4 + 232 | 0; //@line 3640
   HEAP32[$568 >> 2] = $116; //@line 3641
   $569 = $ReallocAsyncCtx4 + 236 | 0; //@line 3642
   HEAP32[$569 >> 2] = $118; //@line 3643
   $570 = $ReallocAsyncCtx4 + 240 | 0; //@line 3644
   HEAP32[$570 >> 2] = $120; //@line 3645
   $571 = $ReallocAsyncCtx4 + 244 | 0; //@line 3646
   HEAP32[$571 >> 2] = $122; //@line 3647
   $572 = $ReallocAsyncCtx4 + 248 | 0; //@line 3648
   HEAP32[$572 >> 2] = $124; //@line 3649
   $573 = $ReallocAsyncCtx4 + 252 | 0; //@line 3650
   HEAP32[$573 >> 2] = $126; //@line 3651
   $574 = $ReallocAsyncCtx4 + 256 | 0; //@line 3652
   HEAP32[$574 >> 2] = $128; //@line 3653
   $575 = $ReallocAsyncCtx4 + 260 | 0; //@line 3654
   HEAP32[$575 >> 2] = $130; //@line 3655
   $576 = $ReallocAsyncCtx4 + 264 | 0; //@line 3656
   HEAP32[$576 >> 2] = $132; //@line 3657
   $577 = $ReallocAsyncCtx4 + 268 | 0; //@line 3658
   HEAP32[$577 >> 2] = $134; //@line 3659
   sp = STACKTOP; //@line 3660
   return;
  }
  HEAP8[___async_retval >> 0] = $509 & 1; //@line 3665
  ___async_unwind = 0; //@line 3666
  HEAP32[$ReallocAsyncCtx4 >> 2] = 593; //@line 3667
  $510 = $ReallocAsyncCtx4 + 4 | 0; //@line 3668
  HEAP32[$510 >> 2] = $2; //@line 3669
  $511 = $ReallocAsyncCtx4 + 8 | 0; //@line 3670
  HEAP32[$511 >> 2] = $4; //@line 3671
  $512 = $ReallocAsyncCtx4 + 12 | 0; //@line 3672
  HEAP32[$512 >> 2] = $6; //@line 3673
  $513 = $ReallocAsyncCtx4 + 16 | 0; //@line 3674
  HEAP8[$513 >> 0] = $495; //@line 3675
  $514 = $ReallocAsyncCtx4 + 20 | 0; //@line 3676
  HEAP32[$514 >> 2] = $8; //@line 3677
  $515 = $ReallocAsyncCtx4 + 24 | 0; //@line 3678
  HEAP32[$515 >> 2] = $10; //@line 3679
  $516 = $ReallocAsyncCtx4 + 28 | 0; //@line 3680
  HEAP32[$516 >> 2] = $12; //@line 3681
  $517 = $ReallocAsyncCtx4 + 32 | 0; //@line 3682
  HEAP32[$517 >> 2] = $14; //@line 3683
  $518 = $ReallocAsyncCtx4 + 36 | 0; //@line 3684
  HEAP8[$518 >> 0] = $16; //@line 3685
  $519 = $ReallocAsyncCtx4 + 37 | 0; //@line 3686
  HEAP8[$519 >> 0] = $18; //@line 3687
  $520 = $ReallocAsyncCtx4 + 40 | 0; //@line 3688
  HEAP32[$520 >> 2] = $20; //@line 3689
  $521 = $ReallocAsyncCtx4 + 44 | 0; //@line 3690
  HEAP32[$521 >> 2] = $22; //@line 3691
  $522 = $ReallocAsyncCtx4 + 48 | 0; //@line 3692
  HEAP32[$522 >> 2] = $24; //@line 3693
  $523 = $ReallocAsyncCtx4 + 52 | 0; //@line 3694
  HEAP8[$523 >> 0] = $26; //@line 3695
  $524 = $ReallocAsyncCtx4 + 56 | 0; //@line 3696
  HEAP32[$524 >> 2] = $28; //@line 3697
  $525 = $ReallocAsyncCtx4 + 60 | 0; //@line 3698
  HEAP32[$525 >> 2] = $30; //@line 3699
  $526 = $ReallocAsyncCtx4 + 64 | 0; //@line 3700
  HEAP32[$526 >> 2] = $32; //@line 3701
  $527 = $ReallocAsyncCtx4 + 68 | 0; //@line 3702
  HEAP32[$527 >> 2] = $34; //@line 3703
  $528 = $ReallocAsyncCtx4 + 72 | 0; //@line 3704
  HEAP32[$528 >> 2] = $38; //@line 3705
  $529 = $ReallocAsyncCtx4 + 76 | 0; //@line 3706
  HEAP32[$529 >> 2] = $40; //@line 3707
  $530 = $ReallocAsyncCtx4 + 80 | 0; //@line 3708
  HEAP32[$530 >> 2] = $42; //@line 3709
  $531 = $ReallocAsyncCtx4 + 84 | 0; //@line 3710
  HEAP32[$531 >> 2] = $44; //@line 3711
  $532 = $ReallocAsyncCtx4 + 88 | 0; //@line 3712
  HEAP32[$532 >> 2] = $46; //@line 3713
  $533 = $ReallocAsyncCtx4 + 92 | 0; //@line 3714
  HEAP32[$533 >> 2] = $48; //@line 3715
  $534 = $ReallocAsyncCtx4 + 96 | 0; //@line 3716
  HEAP32[$534 >> 2] = $50; //@line 3717
  $535 = $ReallocAsyncCtx4 + 100 | 0; //@line 3718
  HEAP32[$535 >> 2] = $52; //@line 3719
  $536 = $ReallocAsyncCtx4 + 104 | 0; //@line 3720
  HEAP32[$536 >> 2] = $54; //@line 3721
  $537 = $ReallocAsyncCtx4 + 108 | 0; //@line 3722
  HEAP32[$537 >> 2] = $56; //@line 3723
  $538 = $ReallocAsyncCtx4 + 112 | 0; //@line 3724
  HEAP32[$538 >> 2] = $58; //@line 3725
  $539 = $ReallocAsyncCtx4 + 116 | 0; //@line 3726
  HEAP32[$539 >> 2] = $60; //@line 3727
  $540 = $ReallocAsyncCtx4 + 120 | 0; //@line 3728
  HEAP32[$540 >> 2] = $62; //@line 3729
  $541 = $ReallocAsyncCtx4 + 124 | 0; //@line 3730
  HEAP32[$541 >> 2] = $64; //@line 3731
  $542 = $ReallocAsyncCtx4 + 128 | 0; //@line 3732
  HEAP32[$542 >> 2] = $66; //@line 3733
  $543 = $ReallocAsyncCtx4 + 132 | 0; //@line 3734
  HEAP32[$543 >> 2] = $68; //@line 3735
  $544 = $ReallocAsyncCtx4 + 136 | 0; //@line 3736
  HEAP32[$544 >> 2] = $70; //@line 3737
  $545 = $ReallocAsyncCtx4 + 140 | 0; //@line 3738
  HEAP32[$545 >> 2] = $72; //@line 3739
  $546 = $ReallocAsyncCtx4 + 144 | 0; //@line 3740
  HEAP32[$546 >> 2] = $74; //@line 3741
  $547 = $ReallocAsyncCtx4 + 148 | 0; //@line 3742
  HEAP32[$547 >> 2] = $76; //@line 3743
  $548 = $ReallocAsyncCtx4 + 152 | 0; //@line 3744
  HEAP32[$548 >> 2] = $78; //@line 3745
  $549 = $ReallocAsyncCtx4 + 156 | 0; //@line 3746
  HEAP32[$549 >> 2] = $80; //@line 3747
  $550 = $ReallocAsyncCtx4 + 160 | 0; //@line 3748
  HEAP32[$550 >> 2] = $82; //@line 3749
  $551 = $ReallocAsyncCtx4 + 164 | 0; //@line 3750
  HEAP32[$551 >> 2] = $84; //@line 3751
  $552 = $ReallocAsyncCtx4 + 168 | 0; //@line 3752
  HEAP32[$552 >> 2] = $86; //@line 3753
  $553 = $ReallocAsyncCtx4 + 172 | 0; //@line 3754
  HEAP32[$553 >> 2] = $88; //@line 3755
  $554 = $ReallocAsyncCtx4 + 176 | 0; //@line 3756
  HEAP32[$554 >> 2] = $90; //@line 3757
  $555 = $ReallocAsyncCtx4 + 180 | 0; //@line 3758
  HEAP32[$555 >> 2] = $92; //@line 3759
  $556 = $ReallocAsyncCtx4 + 184 | 0; //@line 3760
  HEAP32[$556 >> 2] = $94; //@line 3761
  $557 = $ReallocAsyncCtx4 + 188 | 0; //@line 3762
  HEAP32[$557 >> 2] = $96; //@line 3763
  $558 = $ReallocAsyncCtx4 + 192 | 0; //@line 3764
  HEAP32[$558 >> 2] = $98; //@line 3765
  $559 = $ReallocAsyncCtx4 + 196 | 0; //@line 3766
  HEAP32[$559 >> 2] = $$096$be; //@line 3767
  $560 = $ReallocAsyncCtx4 + 200 | 0; //@line 3768
  HEAP32[$560 >> 2] = $100; //@line 3769
  $561 = $ReallocAsyncCtx4 + 204 | 0; //@line 3770
  HEAP32[$561 >> 2] = $102; //@line 3771
  $562 = $ReallocAsyncCtx4 + 208 | 0; //@line 3772
  HEAP32[$562 >> 2] = $104; //@line 3773
  $563 = $ReallocAsyncCtx4 + 212 | 0; //@line 3774
  HEAP32[$563 >> 2] = $106; //@line 3775
  $564 = $ReallocAsyncCtx4 + 216 | 0; //@line 3776
  HEAP32[$564 >> 2] = $108; //@line 3777
  $565 = $ReallocAsyncCtx4 + 220 | 0; //@line 3778
  HEAP32[$565 >> 2] = $110; //@line 3779
  $566 = $ReallocAsyncCtx4 + 224 | 0; //@line 3780
  HEAP32[$566 >> 2] = $112; //@line 3781
  $567 = $ReallocAsyncCtx4 + 228 | 0; //@line 3782
  HEAP32[$567 >> 2] = $114; //@line 3783
  $568 = $ReallocAsyncCtx4 + 232 | 0; //@line 3784
  HEAP32[$568 >> 2] = $116; //@line 3785
  $569 = $ReallocAsyncCtx4 + 236 | 0; //@line 3786
  HEAP32[$569 >> 2] = $118; //@line 3787
  $570 = $ReallocAsyncCtx4 + 240 | 0; //@line 3788
  HEAP32[$570 >> 2] = $120; //@line 3789
  $571 = $ReallocAsyncCtx4 + 244 | 0; //@line 3790
  HEAP32[$571 >> 2] = $122; //@line 3791
  $572 = $ReallocAsyncCtx4 + 248 | 0; //@line 3792
  HEAP32[$572 >> 2] = $124; //@line 3793
  $573 = $ReallocAsyncCtx4 + 252 | 0; //@line 3794
  HEAP32[$573 >> 2] = $126; //@line 3795
  $574 = $ReallocAsyncCtx4 + 256 | 0; //@line 3796
  HEAP32[$574 >> 2] = $128; //@line 3797
  $575 = $ReallocAsyncCtx4 + 260 | 0; //@line 3798
  HEAP32[$575 >> 2] = $130; //@line 3799
  $576 = $ReallocAsyncCtx4 + 264 | 0; //@line 3800
  HEAP32[$576 >> 2] = $132; //@line 3801
  $577 = $ReallocAsyncCtx4 + 268 | 0; //@line 3802
  HEAP32[$577 >> 2] = $134; //@line 3803
  sp = STACKTOP; //@line 3804
  return;
 } else if ((label | 0) == 29) {
  HEAP8[$74 >> 0] = HEAP8[$12 + ($137 & 255) >> 0] | 0; //@line 3812
  $595 = $$0$be + 5 << 24 >> 24; //@line 3825
  HEAP32[$52 >> 2] = (HEAPU8[$12 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$12 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$12 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 3833
  $605 = HEAP32[(HEAP32[$54 >> 2] | 0) + 48 >> 2] | 0; //@line 3836
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 3837
  $606 = FUNCTION_TABLE_iii[$605 & 31]($34, $82) | 0; //@line 3838
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 594; //@line 3841
   $607 = $ReallocAsyncCtx5 + 4 | 0; //@line 3842
   HEAP32[$607 >> 2] = $2; //@line 3843
   $608 = $ReallocAsyncCtx5 + 8 | 0; //@line 3844
   HEAP32[$608 >> 2] = $4; //@line 3845
   $609 = $ReallocAsyncCtx5 + 12 | 0; //@line 3846
   HEAP32[$609 >> 2] = $6; //@line 3847
   $610 = $ReallocAsyncCtx5 + 16 | 0; //@line 3848
   HEAP32[$610 >> 2] = $8; //@line 3849
   $611 = $ReallocAsyncCtx5 + 20 | 0; //@line 3850
   HEAP32[$611 >> 2] = $10; //@line 3851
   $612 = $ReallocAsyncCtx5 + 24 | 0; //@line 3852
   HEAP32[$612 >> 2] = $12; //@line 3853
   $613 = $ReallocAsyncCtx5 + 28 | 0; //@line 3854
   HEAP32[$613 >> 2] = $14; //@line 3855
   $614 = $ReallocAsyncCtx5 + 32 | 0; //@line 3856
   HEAP8[$614 >> 0] = $16; //@line 3857
   $615 = $ReallocAsyncCtx5 + 33 | 0; //@line 3858
   HEAP8[$615 >> 0] = $18; //@line 3859
   $616 = $ReallocAsyncCtx5 + 36 | 0; //@line 3860
   HEAP32[$616 >> 2] = $20; //@line 3861
   $617 = $ReallocAsyncCtx5 + 40 | 0; //@line 3862
   HEAP32[$617 >> 2] = $22; //@line 3863
   $618 = $ReallocAsyncCtx5 + 44 | 0; //@line 3864
   HEAP32[$618 >> 2] = $24; //@line 3865
   $619 = $ReallocAsyncCtx5 + 48 | 0; //@line 3866
   HEAP8[$619 >> 0] = $26; //@line 3867
   $620 = $ReallocAsyncCtx5 + 52 | 0; //@line 3868
   HEAP32[$620 >> 2] = $28; //@line 3869
   $621 = $ReallocAsyncCtx5 + 56 | 0; //@line 3870
   HEAP32[$621 >> 2] = $30; //@line 3871
   $622 = $ReallocAsyncCtx5 + 60 | 0; //@line 3872
   HEAP32[$622 >> 2] = $32; //@line 3873
   $623 = $ReallocAsyncCtx5 + 64 | 0; //@line 3874
   HEAP32[$623 >> 2] = $34; //@line 3875
   $624 = $ReallocAsyncCtx5 + 68 | 0; //@line 3876
   HEAP32[$624 >> 2] = $38; //@line 3877
   $625 = $ReallocAsyncCtx5 + 72 | 0; //@line 3878
   HEAP32[$625 >> 2] = $40; //@line 3879
   $626 = $ReallocAsyncCtx5 + 76 | 0; //@line 3880
   HEAP32[$626 >> 2] = $42; //@line 3881
   $627 = $ReallocAsyncCtx5 + 80 | 0; //@line 3882
   HEAP32[$627 >> 2] = $44; //@line 3883
   $628 = $ReallocAsyncCtx5 + 84 | 0; //@line 3884
   HEAP32[$628 >> 2] = $46; //@line 3885
   $629 = $ReallocAsyncCtx5 + 88 | 0; //@line 3886
   HEAP32[$629 >> 2] = $48; //@line 3887
   $630 = $ReallocAsyncCtx5 + 92 | 0; //@line 3888
   HEAP32[$630 >> 2] = $50; //@line 3889
   $631 = $ReallocAsyncCtx5 + 96 | 0; //@line 3890
   HEAP32[$631 >> 2] = $52; //@line 3891
   $632 = $ReallocAsyncCtx5 + 100 | 0; //@line 3892
   HEAP32[$632 >> 2] = $54; //@line 3893
   $633 = $ReallocAsyncCtx5 + 104 | 0; //@line 3894
   HEAP32[$633 >> 2] = $56; //@line 3895
   $634 = $ReallocAsyncCtx5 + 108 | 0; //@line 3896
   HEAP32[$634 >> 2] = $58; //@line 3897
   $635 = $ReallocAsyncCtx5 + 112 | 0; //@line 3898
   HEAP32[$635 >> 2] = $60; //@line 3899
   $636 = $ReallocAsyncCtx5 + 116 | 0; //@line 3900
   HEAP32[$636 >> 2] = $62; //@line 3901
   $637 = $ReallocAsyncCtx5 + 120 | 0; //@line 3902
   HEAP32[$637 >> 2] = $64; //@line 3903
   $638 = $ReallocAsyncCtx5 + 124 | 0; //@line 3904
   HEAP32[$638 >> 2] = $66; //@line 3905
   $639 = $ReallocAsyncCtx5 + 128 | 0; //@line 3906
   HEAP32[$639 >> 2] = $68; //@line 3907
   $640 = $ReallocAsyncCtx5 + 132 | 0; //@line 3908
   HEAP32[$640 >> 2] = $70; //@line 3909
   $641 = $ReallocAsyncCtx5 + 136 | 0; //@line 3910
   HEAP32[$641 >> 2] = $72; //@line 3911
   $642 = $ReallocAsyncCtx5 + 140 | 0; //@line 3912
   HEAP32[$642 >> 2] = $74; //@line 3913
   $643 = $ReallocAsyncCtx5 + 144 | 0; //@line 3914
   HEAP32[$643 >> 2] = $76; //@line 3915
   $644 = $ReallocAsyncCtx5 + 148 | 0; //@line 3916
   HEAP32[$644 >> 2] = $78; //@line 3917
   $645 = $ReallocAsyncCtx5 + 152 | 0; //@line 3918
   HEAP32[$645 >> 2] = $80; //@line 3919
   $646 = $ReallocAsyncCtx5 + 156 | 0; //@line 3920
   HEAP32[$646 >> 2] = $82; //@line 3921
   $647 = $ReallocAsyncCtx5 + 160 | 0; //@line 3922
   HEAP32[$647 >> 2] = $84; //@line 3923
   $648 = $ReallocAsyncCtx5 + 164 | 0; //@line 3924
   HEAP32[$648 >> 2] = $86; //@line 3925
   $649 = $ReallocAsyncCtx5 + 168 | 0; //@line 3926
   HEAP32[$649 >> 2] = $88; //@line 3927
   $650 = $ReallocAsyncCtx5 + 172 | 0; //@line 3928
   HEAP32[$650 >> 2] = $90; //@line 3929
   $651 = $ReallocAsyncCtx5 + 176 | 0; //@line 3930
   HEAP32[$651 >> 2] = $92; //@line 3931
   $652 = $ReallocAsyncCtx5 + 180 | 0; //@line 3932
   HEAP8[$652 >> 0] = $595; //@line 3933
   $653 = $ReallocAsyncCtx5 + 184 | 0; //@line 3934
   HEAP32[$653 >> 2] = $94; //@line 3935
   $654 = $ReallocAsyncCtx5 + 188 | 0; //@line 3936
   HEAP32[$654 >> 2] = $96; //@line 3937
   $655 = $ReallocAsyncCtx5 + 192 | 0; //@line 3938
   HEAP32[$655 >> 2] = $98; //@line 3939
   $656 = $ReallocAsyncCtx5 + 196 | 0; //@line 3940
   HEAP32[$656 >> 2] = $100; //@line 3941
   $657 = $ReallocAsyncCtx5 + 200 | 0; //@line 3942
   HEAP32[$657 >> 2] = $102; //@line 3943
   $658 = $ReallocAsyncCtx5 + 204 | 0; //@line 3944
   HEAP32[$658 >> 2] = $104; //@line 3945
   $659 = $ReallocAsyncCtx5 + 208 | 0; //@line 3946
   HEAP32[$659 >> 2] = $106; //@line 3947
   $660 = $ReallocAsyncCtx5 + 212 | 0; //@line 3948
   HEAP32[$660 >> 2] = $108; //@line 3949
   $661 = $ReallocAsyncCtx5 + 216 | 0; //@line 3950
   HEAP32[$661 >> 2] = $110; //@line 3951
   $662 = $ReallocAsyncCtx5 + 220 | 0; //@line 3952
   HEAP32[$662 >> 2] = $112; //@line 3953
   $663 = $ReallocAsyncCtx5 + 224 | 0; //@line 3954
   HEAP32[$663 >> 2] = $114; //@line 3955
   $664 = $ReallocAsyncCtx5 + 228 | 0; //@line 3956
   HEAP32[$664 >> 2] = $116; //@line 3957
   $665 = $ReallocAsyncCtx5 + 232 | 0; //@line 3958
   HEAP32[$665 >> 2] = $118; //@line 3959
   $666 = $ReallocAsyncCtx5 + 236 | 0; //@line 3960
   HEAP32[$666 >> 2] = $120; //@line 3961
   $667 = $ReallocAsyncCtx5 + 240 | 0; //@line 3962
   HEAP32[$667 >> 2] = $122; //@line 3963
   $668 = $ReallocAsyncCtx5 + 244 | 0; //@line 3964
   HEAP32[$668 >> 2] = $124; //@line 3965
   $669 = $ReallocAsyncCtx5 + 248 | 0; //@line 3966
   HEAP32[$669 >> 2] = $126; //@line 3967
   $670 = $ReallocAsyncCtx5 + 252 | 0; //@line 3968
   HEAP32[$670 >> 2] = $128; //@line 3969
   $671 = $ReallocAsyncCtx5 + 256 | 0; //@line 3970
   HEAP32[$671 >> 2] = $130; //@line 3971
   $672 = $ReallocAsyncCtx5 + 260 | 0; //@line 3972
   HEAP32[$672 >> 2] = $132; //@line 3973
   $673 = $ReallocAsyncCtx5 + 264 | 0; //@line 3974
   HEAP32[$673 >> 2] = $134; //@line 3975
   sp = STACKTOP; //@line 3976
   return;
  }
  HEAP8[___async_retval >> 0] = $606; //@line 3980
  ___async_unwind = 0; //@line 3981
  HEAP32[$ReallocAsyncCtx5 >> 2] = 594; //@line 3982
  $607 = $ReallocAsyncCtx5 + 4 | 0; //@line 3983
  HEAP32[$607 >> 2] = $2; //@line 3984
  $608 = $ReallocAsyncCtx5 + 8 | 0; //@line 3985
  HEAP32[$608 >> 2] = $4; //@line 3986
  $609 = $ReallocAsyncCtx5 + 12 | 0; //@line 3987
  HEAP32[$609 >> 2] = $6; //@line 3988
  $610 = $ReallocAsyncCtx5 + 16 | 0; //@line 3989
  HEAP32[$610 >> 2] = $8; //@line 3990
  $611 = $ReallocAsyncCtx5 + 20 | 0; //@line 3991
  HEAP32[$611 >> 2] = $10; //@line 3992
  $612 = $ReallocAsyncCtx5 + 24 | 0; //@line 3993
  HEAP32[$612 >> 2] = $12; //@line 3994
  $613 = $ReallocAsyncCtx5 + 28 | 0; //@line 3995
  HEAP32[$613 >> 2] = $14; //@line 3996
  $614 = $ReallocAsyncCtx5 + 32 | 0; //@line 3997
  HEAP8[$614 >> 0] = $16; //@line 3998
  $615 = $ReallocAsyncCtx5 + 33 | 0; //@line 3999
  HEAP8[$615 >> 0] = $18; //@line 4000
  $616 = $ReallocAsyncCtx5 + 36 | 0; //@line 4001
  HEAP32[$616 >> 2] = $20; //@line 4002
  $617 = $ReallocAsyncCtx5 + 40 | 0; //@line 4003
  HEAP32[$617 >> 2] = $22; //@line 4004
  $618 = $ReallocAsyncCtx5 + 44 | 0; //@line 4005
  HEAP32[$618 >> 2] = $24; //@line 4006
  $619 = $ReallocAsyncCtx5 + 48 | 0; //@line 4007
  HEAP8[$619 >> 0] = $26; //@line 4008
  $620 = $ReallocAsyncCtx5 + 52 | 0; //@line 4009
  HEAP32[$620 >> 2] = $28; //@line 4010
  $621 = $ReallocAsyncCtx5 + 56 | 0; //@line 4011
  HEAP32[$621 >> 2] = $30; //@line 4012
  $622 = $ReallocAsyncCtx5 + 60 | 0; //@line 4013
  HEAP32[$622 >> 2] = $32; //@line 4014
  $623 = $ReallocAsyncCtx5 + 64 | 0; //@line 4015
  HEAP32[$623 >> 2] = $34; //@line 4016
  $624 = $ReallocAsyncCtx5 + 68 | 0; //@line 4017
  HEAP32[$624 >> 2] = $38; //@line 4018
  $625 = $ReallocAsyncCtx5 + 72 | 0; //@line 4019
  HEAP32[$625 >> 2] = $40; //@line 4020
  $626 = $ReallocAsyncCtx5 + 76 | 0; //@line 4021
  HEAP32[$626 >> 2] = $42; //@line 4022
  $627 = $ReallocAsyncCtx5 + 80 | 0; //@line 4023
  HEAP32[$627 >> 2] = $44; //@line 4024
  $628 = $ReallocAsyncCtx5 + 84 | 0; //@line 4025
  HEAP32[$628 >> 2] = $46; //@line 4026
  $629 = $ReallocAsyncCtx5 + 88 | 0; //@line 4027
  HEAP32[$629 >> 2] = $48; //@line 4028
  $630 = $ReallocAsyncCtx5 + 92 | 0; //@line 4029
  HEAP32[$630 >> 2] = $50; //@line 4030
  $631 = $ReallocAsyncCtx5 + 96 | 0; //@line 4031
  HEAP32[$631 >> 2] = $52; //@line 4032
  $632 = $ReallocAsyncCtx5 + 100 | 0; //@line 4033
  HEAP32[$632 >> 2] = $54; //@line 4034
  $633 = $ReallocAsyncCtx5 + 104 | 0; //@line 4035
  HEAP32[$633 >> 2] = $56; //@line 4036
  $634 = $ReallocAsyncCtx5 + 108 | 0; //@line 4037
  HEAP32[$634 >> 2] = $58; //@line 4038
  $635 = $ReallocAsyncCtx5 + 112 | 0; //@line 4039
  HEAP32[$635 >> 2] = $60; //@line 4040
  $636 = $ReallocAsyncCtx5 + 116 | 0; //@line 4041
  HEAP32[$636 >> 2] = $62; //@line 4042
  $637 = $ReallocAsyncCtx5 + 120 | 0; //@line 4043
  HEAP32[$637 >> 2] = $64; //@line 4044
  $638 = $ReallocAsyncCtx5 + 124 | 0; //@line 4045
  HEAP32[$638 >> 2] = $66; //@line 4046
  $639 = $ReallocAsyncCtx5 + 128 | 0; //@line 4047
  HEAP32[$639 >> 2] = $68; //@line 4048
  $640 = $ReallocAsyncCtx5 + 132 | 0; //@line 4049
  HEAP32[$640 >> 2] = $70; //@line 4050
  $641 = $ReallocAsyncCtx5 + 136 | 0; //@line 4051
  HEAP32[$641 >> 2] = $72; //@line 4052
  $642 = $ReallocAsyncCtx5 + 140 | 0; //@line 4053
  HEAP32[$642 >> 2] = $74; //@line 4054
  $643 = $ReallocAsyncCtx5 + 144 | 0; //@line 4055
  HEAP32[$643 >> 2] = $76; //@line 4056
  $644 = $ReallocAsyncCtx5 + 148 | 0; //@line 4057
  HEAP32[$644 >> 2] = $78; //@line 4058
  $645 = $ReallocAsyncCtx5 + 152 | 0; //@line 4059
  HEAP32[$645 >> 2] = $80; //@line 4060
  $646 = $ReallocAsyncCtx5 + 156 | 0; //@line 4061
  HEAP32[$646 >> 2] = $82; //@line 4062
  $647 = $ReallocAsyncCtx5 + 160 | 0; //@line 4063
  HEAP32[$647 >> 2] = $84; //@line 4064
  $648 = $ReallocAsyncCtx5 + 164 | 0; //@line 4065
  HEAP32[$648 >> 2] = $86; //@line 4066
  $649 = $ReallocAsyncCtx5 + 168 | 0; //@line 4067
  HEAP32[$649 >> 2] = $88; //@line 4068
  $650 = $ReallocAsyncCtx5 + 172 | 0; //@line 4069
  HEAP32[$650 >> 2] = $90; //@line 4070
  $651 = $ReallocAsyncCtx5 + 176 | 0; //@line 4071
  HEAP32[$651 >> 2] = $92; //@line 4072
  $652 = $ReallocAsyncCtx5 + 180 | 0; //@line 4073
  HEAP8[$652 >> 0] = $595; //@line 4074
  $653 = $ReallocAsyncCtx5 + 184 | 0; //@line 4075
  HEAP32[$653 >> 2] = $94; //@line 4076
  $654 = $ReallocAsyncCtx5 + 188 | 0; //@line 4077
  HEAP32[$654 >> 2] = $96; //@line 4078
  $655 = $ReallocAsyncCtx5 + 192 | 0; //@line 4079
  HEAP32[$655 >> 2] = $98; //@line 4080
  $656 = $ReallocAsyncCtx5 + 196 | 0; //@line 4081
  HEAP32[$656 >> 2] = $100; //@line 4082
  $657 = $ReallocAsyncCtx5 + 200 | 0; //@line 4083
  HEAP32[$657 >> 2] = $102; //@line 4084
  $658 = $ReallocAsyncCtx5 + 204 | 0; //@line 4085
  HEAP32[$658 >> 2] = $104; //@line 4086
  $659 = $ReallocAsyncCtx5 + 208 | 0; //@line 4087
  HEAP32[$659 >> 2] = $106; //@line 4088
  $660 = $ReallocAsyncCtx5 + 212 | 0; //@line 4089
  HEAP32[$660 >> 2] = $108; //@line 4090
  $661 = $ReallocAsyncCtx5 + 216 | 0; //@line 4091
  HEAP32[$661 >> 2] = $110; //@line 4092
  $662 = $ReallocAsyncCtx5 + 220 | 0; //@line 4093
  HEAP32[$662 >> 2] = $112; //@line 4094
  $663 = $ReallocAsyncCtx5 + 224 | 0; //@line 4095
  HEAP32[$663 >> 2] = $114; //@line 4096
  $664 = $ReallocAsyncCtx5 + 228 | 0; //@line 4097
  HEAP32[$664 >> 2] = $116; //@line 4098
  $665 = $ReallocAsyncCtx5 + 232 | 0; //@line 4099
  HEAP32[$665 >> 2] = $118; //@line 4100
  $666 = $ReallocAsyncCtx5 + 236 | 0; //@line 4101
  HEAP32[$666 >> 2] = $120; //@line 4102
  $667 = $ReallocAsyncCtx5 + 240 | 0; //@line 4103
  HEAP32[$667 >> 2] = $122; //@line 4104
  $668 = $ReallocAsyncCtx5 + 244 | 0; //@line 4105
  HEAP32[$668 >> 2] = $124; //@line 4106
  $669 = $ReallocAsyncCtx5 + 248 | 0; //@line 4107
  HEAP32[$669 >> 2] = $126; //@line 4108
  $670 = $ReallocAsyncCtx5 + 252 | 0; //@line 4109
  HEAP32[$670 >> 2] = $128; //@line 4110
  $671 = $ReallocAsyncCtx5 + 256 | 0; //@line 4111
  HEAP32[$671 >> 2] = $130; //@line 4112
  $672 = $ReallocAsyncCtx5 + 260 | 0; //@line 4113
  HEAP32[$672 >> 2] = $132; //@line 4114
  $673 = $ReallocAsyncCtx5 + 264 | 0; //@line 4115
  HEAP32[$673 >> 2] = $134; //@line 4116
  sp = STACKTOP; //@line 4117
  return;
 } else if ((label | 0) == 33) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 4122
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_228($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$096$be = 0, $$2 = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $139 = 0, $14 = 0, $150 = 0, $151 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $233 = 0, $236 = 0, $24 = 0, $241 = 0, $249 = 0, $26 = 0, $268 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $349 = 0, $350 = 0, $36 = 0, $38 = 0, $387 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $463 = 0, $467 = 0, $471 = 0, $474 = 0, $48 = 0, $480 = 0, $483 = 0, $484 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $572 = 0, $58 = 0, $594 = 0, $6 = 0, $60 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6087
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6089
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6091
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6093
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 6095
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6097
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6099
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6101
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6103
 $18 = HEAP8[$0 + 36 >> 0] | 0; //@line 6105
 $20 = HEAP8[$0 + 37 >> 0] | 0; //@line 6107
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 6109
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 6111
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 6113
 $28 = HEAP8[$0 + 52 >> 0] | 0; //@line 6115
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 6117
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 6119
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 6121
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 6123
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 6125
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 6127
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 6129
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 6131
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 6133
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 6135
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 6137
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 6139
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 6141
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 6143
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 6145
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 6147
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 6149
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 6151
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 6153
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 6155
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 6157
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 6159
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 6161
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 6163
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 6165
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 6167
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 6169
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 6171
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 6173
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 6175
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 6177
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 6179
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 6181
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 6183
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 6185
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 6187
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 6189
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 6191
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 6193
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 6195
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 6197
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 6199
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 6201
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 6203
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 6205
 $120 = HEAP32[$0 + 236 >> 2] | 0; //@line 6207
 $122 = HEAP32[$0 + 240 >> 2] | 0; //@line 6209
 $124 = HEAP32[$0 + 244 >> 2] | 0; //@line 6211
 $126 = HEAP32[$0 + 248 >> 2] | 0; //@line 6213
 $128 = HEAP32[$0 + 252 >> 2] | 0; //@line 6215
 $130 = HEAP32[$0 + 256 >> 2] | 0; //@line 6217
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 6219
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 6221
 $136 = HEAP32[$0 + 268 >> 2] | 0; //@line 6223
 if (HEAP8[___async_retval >> 0] & 1) {
  HEAP8[$124 >> 0] = HEAP8[$120 >> 0] | 0; //@line 6229
  HEAP8[$22 >> 0] = HEAP8[$116 >> 0] | 0; //@line 6231
  HEAPF32[$4 >> 2] = +(HEAPU8[13572 + (HEAPU8[$42 >> 0] | 0) >> 0] | 0); //@line 6237
  $572 = HEAP8[$50 >> 0] | 0; //@line 6239
  if (($572 & 255) < (-128 - (HEAP8[$44 >> 0] | 0) & 255)) {
   HEAP8[$50 >> 0] = $572 + 1 << 24 >> 24; //@line 6246
   HEAP8[($572 & 255) + ($10 + 4) >> 0] = 9; //@line 6247
   HEAP8[$102 >> 0] = 1; //@line 6248
   $$2 = 0; //@line 6249
  } else {
   $$2 = -1e3; //@line 6251
  }
 } else {
  $$2 = $100; //@line 6254
 }
 $$0$be = $8; //@line 6256
 $$096$be = $$2; //@line 6256
 L6 : while (1) {
  if (($$0$be & 255) >= ($20 & 255)) {
   label = 32; //@line 6260
   break;
  }
  $139 = $$0$be + 1 << 24 >> 24; //@line 6264
  switch (HEAP8[$14 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 6269
    break L6;
    break;
   }
  case 5:
   {
    label = 9; //@line 6274
    break L6;
    break;
   }
  case 7:
   {
    label = 14; //@line 6279
    break L6;
    break;
   }
  case 9:
   {
    label = 19; //@line 6284
    break L6;
    break;
   }
  case 10:
   {
    label = 28; //@line 6289
    break L6;
    break;
   }
  case 2:
   {
    HEAP32[$26 >> 2] = 0; //@line 6294
    HEAP8[$46 >> 0] = HEAP8[$14 + ($139 & 255) >> 0] | 0; //@line 6299
    HEAP8[$76 >> 0] = HEAP8[$14 + ($$0$be + 2 & 255) >> 0] | 0; //@line 6304
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 6305
    continue L6;
    break;
   }
  case 4:
   {
    $233 = $$0$be + 2 << 24 >> 24; //@line 6310
    $236 = HEAP8[$14 + ($139 & 255) >> 0] | 0; //@line 6313
    HEAP8[$110 >> 0] = $236; //@line 6314
    HEAP16[$78 >> 1] = 1 << ($236 & 255); //@line 6318
    $241 = HEAP8[$50 >> 0] | 0; //@line 6320
    if (($241 & 255) >= (-128 - (HEAP8[$44 >> 0] | 0) & 255)) {
     $$0$be = $233; //@line 6324
     $$096$be = -1e3; //@line 6324
     continue L6;
    }
    HEAP8[$50 >> 0] = $241 + 1 << 24 >> 24; //@line 6330
    HEAP8[($241 & 255) + ($10 + 4) >> 0] = 4; //@line 6331
    HEAP8[$102 >> 0] = 1; //@line 6332
    $$0$be = $233; //@line 6333
    $$096$be = 0; //@line 6333
    continue L6;
    break;
   }
  case 6:
   {
    $349 = HEAP8[$50 >> 0] | 0; //@line 6339
    $350 = $349 & 255; //@line 6340
    if (((-128 - (HEAP8[$44 >> 0] | 0) & 255) + -2 | 0) <= ($350 | 0)) {
     $$0$be = $139; //@line 6346
     $$096$be = -1e3; //@line 6346
     continue L6;
    }
    HEAP8[$10 + 4 + $350 >> 0] = 6; //@line 6351
    HEAP8[($349 + 1 & 255) + ($10 + 4) >> 0] = -1; //@line 6355
    HEAP8[$50 >> 0] = $349 + 3 << 24 >> 24; //@line 6357
    HEAP8[($349 + 2 & 255) + ($10 + 4) >> 0] = $28; //@line 6360
    HEAP8[$102 >> 0] = 1; //@line 6361
    $$0$be = $139; //@line 6362
    $$096$be = 0; //@line 6362
    continue L6;
    break;
   }
  case 8:
   {
    $463 = $$0$be + 2 << 24 >> 24; //@line 6367
    $467 = HEAP8[$14 + ($139 & 255) >> 0] & 15; //@line 6371
    $471 = ($467 + ($467 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 6376
    HEAP32[$132 >> 2] = $471; //@line 6377
    HEAP32[$128 >> 2] = $471 + 1e3; //@line 6379
    $474 = HEAP8[$50 >> 0] | 0; //@line 6381
    if (($474 & 255) >= (-128 - (HEAP8[$44 >> 0] | 0) & 255)) {
     $$0$be = $463; //@line 6385
     $$096$be = -1e3; //@line 6385
     continue L6;
    }
    HEAP8[$50 >> 0] = $474 + 1 << 24 >> 24; //@line 6391
    HEAP8[($474 & 255) + ($10 + 4) >> 0] = 8; //@line 6392
    HEAP8[$12 >> 0] = 1; //@line 6393
    HEAP8[$102 >> 0] = 1; //@line 6394
    $$0$be = $463; //@line 6395
    $$096$be = 0; //@line 6395
    continue L6;
    break;
   }
  default:
   {
    $$0$be = $139; //@line 6400
    $$096$be = -1013; //@line 6400
    continue L6;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$38 >> 0] = 0; //@line 6406
  HEAP8[$90 >> 0] = 0; //@line 6407
  HEAP8[$98 >> 0] = 0; //@line 6408
  HEAP8[$108 >> 0] = 0; //@line 6409
  $150 = $139 & 255; //@line 6410
  $151 = $150 + -1 | 0; //@line 6411
  HEAP32[$62 >> 2] = $14 + $151; //@line 6413
  HEAP8[$104 >> 0] = $24 - $151; //@line 6416
  HEAP8[$92 >> 0] = HEAP8[$80 >> 0] | 0; //@line 6418
  HEAP8[$136 >> 0] = HEAP8[$124 >> 0] | 0; //@line 6420
  HEAP8[$122 >> 0] = HEAP8[$114 >> 0] | 0; //@line 6422
  HEAP8[$2 >> 0] = HEAP8[$30 >> 0] | 0; //@line 6424
  HEAP8[$64 >> 0] = HEAP8[$16 >> 0] | 0; //@line 6426
  $162 = HEAP32[(HEAP32[$72 >> 2] | 0) + 36 >> 2] | 0; //@line 6429
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 6430
  $163 = FUNCTION_TABLE_iiiiiii[$162 & 3]($36, $32, $38, $90, $98, $108) | 0; //@line 6431
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 6434
   $164 = $ReallocAsyncCtx + 4 | 0; //@line 6435
   HEAP32[$164 >> 2] = $2; //@line 6436
   $165 = $ReallocAsyncCtx + 8 | 0; //@line 6437
   HEAP32[$165 >> 2] = $4; //@line 6438
   $166 = $ReallocAsyncCtx + 12 | 0; //@line 6439
   HEAP32[$166 >> 2] = $6; //@line 6440
   $167 = $ReallocAsyncCtx + 16 | 0; //@line 6441
   HEAP32[$167 >> 2] = $10; //@line 6442
   $168 = $ReallocAsyncCtx + 20 | 0; //@line 6443
   HEAP32[$168 >> 2] = $24; //@line 6444
   $169 = $ReallocAsyncCtx + 24 | 0; //@line 6445
   HEAP32[$169 >> 2] = $14; //@line 6446
   $170 = $ReallocAsyncCtx + 28 | 0; //@line 6447
   HEAP32[$170 >> 2] = $16; //@line 6448
   $171 = $ReallocAsyncCtx + 32 | 0; //@line 6449
   HEAP32[$171 >> 2] = $12; //@line 6450
   $172 = $ReallocAsyncCtx + 36 | 0; //@line 6451
   HEAP8[$172 >> 0] = $20; //@line 6452
   $173 = $ReallocAsyncCtx + 40 | 0; //@line 6453
   HEAP32[$173 >> 2] = $22; //@line 6454
   $174 = $ReallocAsyncCtx + 44 | 0; //@line 6455
   HEAP32[$174 >> 2] = $26; //@line 6456
   $175 = $ReallocAsyncCtx + 48 | 0; //@line 6457
   HEAP8[$175 >> 0] = $18; //@line 6458
   $176 = $ReallocAsyncCtx + 49 | 0; //@line 6459
   HEAP8[$176 >> 0] = $28; //@line 6460
   $177 = $ReallocAsyncCtx + 52 | 0; //@line 6461
   HEAP32[$177 >> 2] = $30; //@line 6462
   $178 = $ReallocAsyncCtx + 56 | 0; //@line 6463
   HEAP32[$178 >> 2] = $32; //@line 6464
   $179 = $ReallocAsyncCtx + 60 | 0; //@line 6465
   HEAP32[$179 >> 2] = $34; //@line 6466
   $180 = $ReallocAsyncCtx + 64 | 0; //@line 6467
   HEAP32[$180 >> 2] = $36; //@line 6468
   $181 = $ReallocAsyncCtx + 68 | 0; //@line 6469
   HEAP32[$181 >> 2] = $38; //@line 6470
   $182 = $ReallocAsyncCtx + 72 | 0; //@line 6471
   HEAP32[$182 >> 2] = $40; //@line 6472
   $183 = $ReallocAsyncCtx + 76 | 0; //@line 6473
   HEAP32[$183 >> 2] = $42; //@line 6474
   $184 = $ReallocAsyncCtx + 80 | 0; //@line 6475
   HEAP32[$184 >> 2] = $44; //@line 6476
   $185 = $ReallocAsyncCtx + 84 | 0; //@line 6477
   HEAP32[$185 >> 2] = $46; //@line 6478
   $186 = $ReallocAsyncCtx + 88 | 0; //@line 6479
   HEAP32[$186 >> 2] = $48; //@line 6480
   $187 = $ReallocAsyncCtx + 92 | 0; //@line 6481
   HEAP32[$187 >> 2] = $50; //@line 6482
   $188 = $ReallocAsyncCtx + 96 | 0; //@line 6483
   HEAP32[$188 >> 2] = $52; //@line 6484
   $189 = $ReallocAsyncCtx + 100 | 0; //@line 6485
   HEAP32[$189 >> 2] = $54; //@line 6486
   $190 = $ReallocAsyncCtx + 104 | 0; //@line 6487
   HEAP32[$190 >> 2] = $56; //@line 6488
   $191 = $ReallocAsyncCtx + 108 | 0; //@line 6489
   HEAP32[$191 >> 2] = $58; //@line 6490
   $192 = $ReallocAsyncCtx + 112 | 0; //@line 6491
   HEAP32[$192 >> 2] = $62; //@line 6492
   $193 = $ReallocAsyncCtx + 116 | 0; //@line 6493
   HEAP32[$193 >> 2] = $64; //@line 6494
   $194 = $ReallocAsyncCtx + 120 | 0; //@line 6495
   HEAP32[$194 >> 2] = $60; //@line 6496
   $195 = $ReallocAsyncCtx + 124 | 0; //@line 6497
   HEAP32[$195 >> 2] = $66; //@line 6498
   $196 = $ReallocAsyncCtx + 128 | 0; //@line 6499
   HEAP32[$196 >> 2] = $70; //@line 6500
   $197 = $ReallocAsyncCtx + 132 | 0; //@line 6501
   HEAP32[$197 >> 2] = $68; //@line 6502
   $198 = $ReallocAsyncCtx + 136 | 0; //@line 6503
   HEAP32[$198 >> 2] = $72; //@line 6504
   $199 = $ReallocAsyncCtx + 140 | 0; //@line 6505
   HEAP32[$199 >> 2] = $74; //@line 6506
   $200 = $ReallocAsyncCtx + 144 | 0; //@line 6507
   HEAP32[$200 >> 2] = $76; //@line 6508
   $201 = $ReallocAsyncCtx + 148 | 0; //@line 6509
   HEAP32[$201 >> 2] = $78; //@line 6510
   $202 = $ReallocAsyncCtx + 152 | 0; //@line 6511
   HEAP32[$202 >> 2] = $80; //@line 6512
   $203 = $ReallocAsyncCtx + 156 | 0; //@line 6513
   HEAP32[$203 >> 2] = $82; //@line 6514
   $204 = $ReallocAsyncCtx + 160 | 0; //@line 6515
   HEAP32[$204 >> 2] = $84; //@line 6516
   $205 = $ReallocAsyncCtx + 164 | 0; //@line 6517
   HEAP32[$205 >> 2] = $86; //@line 6518
   $206 = $ReallocAsyncCtx + 168 | 0; //@line 6519
   HEAP32[$206 >> 2] = $90; //@line 6520
   $207 = $ReallocAsyncCtx + 172 | 0; //@line 6521
   HEAP32[$207 >> 2] = $92; //@line 6522
   $208 = $ReallocAsyncCtx + 176 | 0; //@line 6523
   HEAP32[$208 >> 2] = $88; //@line 6524
   $209 = $ReallocAsyncCtx + 180 | 0; //@line 6525
   HEAP32[$209 >> 2] = $94; //@line 6526
   $210 = $ReallocAsyncCtx + 184 | 0; //@line 6527
   HEAP32[$210 >> 2] = $96; //@line 6528
   $211 = $ReallocAsyncCtx + 188 | 0; //@line 6529
   HEAP32[$211 >> 2] = $98; //@line 6530
   $212 = $ReallocAsyncCtx + 192 | 0; //@line 6531
   HEAP32[$212 >> 2] = $$096$be; //@line 6532
   $213 = $ReallocAsyncCtx + 196 | 0; //@line 6533
   HEAP32[$213 >> 2] = $102; //@line 6534
   $214 = $ReallocAsyncCtx + 200 | 0; //@line 6535
   HEAP32[$214 >> 2] = $104; //@line 6536
   $215 = $ReallocAsyncCtx + 204 | 0; //@line 6537
   HEAP32[$215 >> 2] = $106; //@line 6538
   $216 = $ReallocAsyncCtx + 208 | 0; //@line 6539
   HEAP32[$216 >> 2] = $150; //@line 6540
   $217 = $ReallocAsyncCtx + 212 | 0; //@line 6541
   HEAP32[$217 >> 2] = $108; //@line 6542
   $218 = $ReallocAsyncCtx + 216 | 0; //@line 6543
   HEAP32[$218 >> 2] = $110; //@line 6544
   $219 = $ReallocAsyncCtx + 220 | 0; //@line 6545
   HEAP32[$219 >> 2] = $112; //@line 6546
   $220 = $ReallocAsyncCtx + 224 | 0; //@line 6547
   HEAP32[$220 >> 2] = $114; //@line 6548
   $221 = $ReallocAsyncCtx + 228 | 0; //@line 6549
   HEAP32[$221 >> 2] = $116; //@line 6550
   $222 = $ReallocAsyncCtx + 232 | 0; //@line 6551
   HEAP32[$222 >> 2] = $118; //@line 6552
   $223 = $ReallocAsyncCtx + 236 | 0; //@line 6553
   HEAP32[$223 >> 2] = $120; //@line 6554
   $224 = $ReallocAsyncCtx + 240 | 0; //@line 6555
   HEAP32[$224 >> 2] = $122; //@line 6556
   $225 = $ReallocAsyncCtx + 244 | 0; //@line 6557
   HEAP32[$225 >> 2] = $124; //@line 6558
   $226 = $ReallocAsyncCtx + 248 | 0; //@line 6559
   HEAP32[$226 >> 2] = $126; //@line 6560
   $227 = $ReallocAsyncCtx + 252 | 0; //@line 6561
   HEAP32[$227 >> 2] = $128; //@line 6562
   $228 = $ReallocAsyncCtx + 256 | 0; //@line 6563
   HEAP32[$228 >> 2] = $130; //@line 6564
   $229 = $ReallocAsyncCtx + 260 | 0; //@line 6565
   HEAP32[$229 >> 2] = $132; //@line 6566
   $230 = $ReallocAsyncCtx + 264 | 0; //@line 6567
   HEAP32[$230 >> 2] = $134; //@line 6568
   $231 = $ReallocAsyncCtx + 268 | 0; //@line 6569
   HEAP32[$231 >> 2] = $136; //@line 6570
   sp = STACKTOP; //@line 6571
   return;
  }
  HEAP8[___async_retval >> 0] = $163; //@line 6575
  ___async_unwind = 0; //@line 6576
  HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 6577
  $164 = $ReallocAsyncCtx + 4 | 0; //@line 6578
  HEAP32[$164 >> 2] = $2; //@line 6579
  $165 = $ReallocAsyncCtx + 8 | 0; //@line 6580
  HEAP32[$165 >> 2] = $4; //@line 6581
  $166 = $ReallocAsyncCtx + 12 | 0; //@line 6582
  HEAP32[$166 >> 2] = $6; //@line 6583
  $167 = $ReallocAsyncCtx + 16 | 0; //@line 6584
  HEAP32[$167 >> 2] = $10; //@line 6585
  $168 = $ReallocAsyncCtx + 20 | 0; //@line 6586
  HEAP32[$168 >> 2] = $24; //@line 6587
  $169 = $ReallocAsyncCtx + 24 | 0; //@line 6588
  HEAP32[$169 >> 2] = $14; //@line 6589
  $170 = $ReallocAsyncCtx + 28 | 0; //@line 6590
  HEAP32[$170 >> 2] = $16; //@line 6591
  $171 = $ReallocAsyncCtx + 32 | 0; //@line 6592
  HEAP32[$171 >> 2] = $12; //@line 6593
  $172 = $ReallocAsyncCtx + 36 | 0; //@line 6594
  HEAP8[$172 >> 0] = $20; //@line 6595
  $173 = $ReallocAsyncCtx + 40 | 0; //@line 6596
  HEAP32[$173 >> 2] = $22; //@line 6597
  $174 = $ReallocAsyncCtx + 44 | 0; //@line 6598
  HEAP32[$174 >> 2] = $26; //@line 6599
  $175 = $ReallocAsyncCtx + 48 | 0; //@line 6600
  HEAP8[$175 >> 0] = $18; //@line 6601
  $176 = $ReallocAsyncCtx + 49 | 0; //@line 6602
  HEAP8[$176 >> 0] = $28; //@line 6603
  $177 = $ReallocAsyncCtx + 52 | 0; //@line 6604
  HEAP32[$177 >> 2] = $30; //@line 6605
  $178 = $ReallocAsyncCtx + 56 | 0; //@line 6606
  HEAP32[$178 >> 2] = $32; //@line 6607
  $179 = $ReallocAsyncCtx + 60 | 0; //@line 6608
  HEAP32[$179 >> 2] = $34; //@line 6609
  $180 = $ReallocAsyncCtx + 64 | 0; //@line 6610
  HEAP32[$180 >> 2] = $36; //@line 6611
  $181 = $ReallocAsyncCtx + 68 | 0; //@line 6612
  HEAP32[$181 >> 2] = $38; //@line 6613
  $182 = $ReallocAsyncCtx + 72 | 0; //@line 6614
  HEAP32[$182 >> 2] = $40; //@line 6615
  $183 = $ReallocAsyncCtx + 76 | 0; //@line 6616
  HEAP32[$183 >> 2] = $42; //@line 6617
  $184 = $ReallocAsyncCtx + 80 | 0; //@line 6618
  HEAP32[$184 >> 2] = $44; //@line 6619
  $185 = $ReallocAsyncCtx + 84 | 0; //@line 6620
  HEAP32[$185 >> 2] = $46; //@line 6621
  $186 = $ReallocAsyncCtx + 88 | 0; //@line 6622
  HEAP32[$186 >> 2] = $48; //@line 6623
  $187 = $ReallocAsyncCtx + 92 | 0; //@line 6624
  HEAP32[$187 >> 2] = $50; //@line 6625
  $188 = $ReallocAsyncCtx + 96 | 0; //@line 6626
  HEAP32[$188 >> 2] = $52; //@line 6627
  $189 = $ReallocAsyncCtx + 100 | 0; //@line 6628
  HEAP32[$189 >> 2] = $54; //@line 6629
  $190 = $ReallocAsyncCtx + 104 | 0; //@line 6630
  HEAP32[$190 >> 2] = $56; //@line 6631
  $191 = $ReallocAsyncCtx + 108 | 0; //@line 6632
  HEAP32[$191 >> 2] = $58; //@line 6633
  $192 = $ReallocAsyncCtx + 112 | 0; //@line 6634
  HEAP32[$192 >> 2] = $62; //@line 6635
  $193 = $ReallocAsyncCtx + 116 | 0; //@line 6636
  HEAP32[$193 >> 2] = $64; //@line 6637
  $194 = $ReallocAsyncCtx + 120 | 0; //@line 6638
  HEAP32[$194 >> 2] = $60; //@line 6639
  $195 = $ReallocAsyncCtx + 124 | 0; //@line 6640
  HEAP32[$195 >> 2] = $66; //@line 6641
  $196 = $ReallocAsyncCtx + 128 | 0; //@line 6642
  HEAP32[$196 >> 2] = $70; //@line 6643
  $197 = $ReallocAsyncCtx + 132 | 0; //@line 6644
  HEAP32[$197 >> 2] = $68; //@line 6645
  $198 = $ReallocAsyncCtx + 136 | 0; //@line 6646
  HEAP32[$198 >> 2] = $72; //@line 6647
  $199 = $ReallocAsyncCtx + 140 | 0; //@line 6648
  HEAP32[$199 >> 2] = $74; //@line 6649
  $200 = $ReallocAsyncCtx + 144 | 0; //@line 6650
  HEAP32[$200 >> 2] = $76; //@line 6651
  $201 = $ReallocAsyncCtx + 148 | 0; //@line 6652
  HEAP32[$201 >> 2] = $78; //@line 6653
  $202 = $ReallocAsyncCtx + 152 | 0; //@line 6654
  HEAP32[$202 >> 2] = $80; //@line 6655
  $203 = $ReallocAsyncCtx + 156 | 0; //@line 6656
  HEAP32[$203 >> 2] = $82; //@line 6657
  $204 = $ReallocAsyncCtx + 160 | 0; //@line 6658
  HEAP32[$204 >> 2] = $84; //@line 6659
  $205 = $ReallocAsyncCtx + 164 | 0; //@line 6660
  HEAP32[$205 >> 2] = $86; //@line 6661
  $206 = $ReallocAsyncCtx + 168 | 0; //@line 6662
  HEAP32[$206 >> 2] = $90; //@line 6663
  $207 = $ReallocAsyncCtx + 172 | 0; //@line 6664
  HEAP32[$207 >> 2] = $92; //@line 6665
  $208 = $ReallocAsyncCtx + 176 | 0; //@line 6666
  HEAP32[$208 >> 2] = $88; //@line 6667
  $209 = $ReallocAsyncCtx + 180 | 0; //@line 6668
  HEAP32[$209 >> 2] = $94; //@line 6669
  $210 = $ReallocAsyncCtx + 184 | 0; //@line 6670
  HEAP32[$210 >> 2] = $96; //@line 6671
  $211 = $ReallocAsyncCtx + 188 | 0; //@line 6672
  HEAP32[$211 >> 2] = $98; //@line 6673
  $212 = $ReallocAsyncCtx + 192 | 0; //@line 6674
  HEAP32[$212 >> 2] = $$096$be; //@line 6675
  $213 = $ReallocAsyncCtx + 196 | 0; //@line 6676
  HEAP32[$213 >> 2] = $102; //@line 6677
  $214 = $ReallocAsyncCtx + 200 | 0; //@line 6678
  HEAP32[$214 >> 2] = $104; //@line 6679
  $215 = $ReallocAsyncCtx + 204 | 0; //@line 6680
  HEAP32[$215 >> 2] = $106; //@line 6681
  $216 = $ReallocAsyncCtx + 208 | 0; //@line 6682
  HEAP32[$216 >> 2] = $150; //@line 6683
  $217 = $ReallocAsyncCtx + 212 | 0; //@line 6684
  HEAP32[$217 >> 2] = $108; //@line 6685
  $218 = $ReallocAsyncCtx + 216 | 0; //@line 6686
  HEAP32[$218 >> 2] = $110; //@line 6687
  $219 = $ReallocAsyncCtx + 220 | 0; //@line 6688
  HEAP32[$219 >> 2] = $112; //@line 6689
  $220 = $ReallocAsyncCtx + 224 | 0; //@line 6690
  HEAP32[$220 >> 2] = $114; //@line 6691
  $221 = $ReallocAsyncCtx + 228 | 0; //@line 6692
  HEAP32[$221 >> 2] = $116; //@line 6693
  $222 = $ReallocAsyncCtx + 232 | 0; //@line 6694
  HEAP32[$222 >> 2] = $118; //@line 6695
  $223 = $ReallocAsyncCtx + 236 | 0; //@line 6696
  HEAP32[$223 >> 2] = $120; //@line 6697
  $224 = $ReallocAsyncCtx + 240 | 0; //@line 6698
  HEAP32[$224 >> 2] = $122; //@line 6699
  $225 = $ReallocAsyncCtx + 244 | 0; //@line 6700
  HEAP32[$225 >> 2] = $124; //@line 6701
  $226 = $ReallocAsyncCtx + 248 | 0; //@line 6702
  HEAP32[$226 >> 2] = $126; //@line 6703
  $227 = $ReallocAsyncCtx + 252 | 0; //@line 6704
  HEAP32[$227 >> 2] = $128; //@line 6705
  $228 = $ReallocAsyncCtx + 256 | 0; //@line 6706
  HEAP32[$228 >> 2] = $130; //@line 6707
  $229 = $ReallocAsyncCtx + 260 | 0; //@line 6708
  HEAP32[$229 >> 2] = $132; //@line 6709
  $230 = $ReallocAsyncCtx + 264 | 0; //@line 6710
  HEAP32[$230 >> 2] = $134; //@line 6711
  $231 = $ReallocAsyncCtx + 268 | 0; //@line 6712
  HEAP32[$231 >> 2] = $136; //@line 6713
  sp = STACKTOP; //@line 6714
  return;
 } else if ((label | 0) == 9) {
  $249 = HEAP8[$14 + ($139 & 255) >> 0] | 0; //@line 6720
  HEAP8[$126 >> 0] = ($249 & 255) >>> 4 & 7; //@line 6725
  HEAP8[$88 >> 0] = $249 & 15; //@line 6727
  $268 = $$0$be + 5 << 24 >> 24; //@line 6741
  HEAP32[$134 >> 2] = (HEAPU8[$14 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$14 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$14 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 6749
  $278 = HEAP32[(HEAP32[$112 >> 2] | 0) + 40 >> 2] | 0; //@line 6752
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 6753
  $279 = FUNCTION_TABLE_iii[$278 & 31]($36, $48) | 0; //@line 6754
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 591; //@line 6757
   $280 = $ReallocAsyncCtx2 + 4 | 0; //@line 6758
   HEAP32[$280 >> 2] = $2; //@line 6759
   $281 = $ReallocAsyncCtx2 + 8 | 0; //@line 6760
   HEAP32[$281 >> 2] = $4; //@line 6761
   $282 = $ReallocAsyncCtx2 + 12 | 0; //@line 6762
   HEAP32[$282 >> 2] = $6; //@line 6763
   $283 = $ReallocAsyncCtx2 + 16 | 0; //@line 6764
   HEAP32[$283 >> 2] = $10; //@line 6765
   $284 = $ReallocAsyncCtx2 + 20 | 0; //@line 6766
   HEAP32[$284 >> 2] = $12; //@line 6767
   $285 = $ReallocAsyncCtx2 + 24 | 0; //@line 6768
   HEAP32[$285 >> 2] = $14; //@line 6769
   $286 = $ReallocAsyncCtx2 + 28 | 0; //@line 6770
   HEAP32[$286 >> 2] = $16; //@line 6771
   $287 = $ReallocAsyncCtx2 + 32 | 0; //@line 6772
   HEAP8[$287 >> 0] = $18; //@line 6773
   $288 = $ReallocAsyncCtx2 + 33 | 0; //@line 6774
   HEAP8[$288 >> 0] = $20; //@line 6775
   $289 = $ReallocAsyncCtx2 + 36 | 0; //@line 6776
   HEAP32[$289 >> 2] = $22; //@line 6777
   $290 = $ReallocAsyncCtx2 + 40 | 0; //@line 6778
   HEAP32[$290 >> 2] = $24; //@line 6779
   $291 = $ReallocAsyncCtx2 + 44 | 0; //@line 6780
   HEAP32[$291 >> 2] = $26; //@line 6781
   $292 = $ReallocAsyncCtx2 + 48 | 0; //@line 6782
   HEAP8[$292 >> 0] = $28; //@line 6783
   $293 = $ReallocAsyncCtx2 + 52 | 0; //@line 6784
   HEAP32[$293 >> 2] = $30; //@line 6785
   $294 = $ReallocAsyncCtx2 + 56 | 0; //@line 6786
   HEAP32[$294 >> 2] = $32; //@line 6787
   $295 = $ReallocAsyncCtx2 + 60 | 0; //@line 6788
   HEAP32[$295 >> 2] = $34; //@line 6789
   $296 = $ReallocAsyncCtx2 + 64 | 0; //@line 6790
   HEAP32[$296 >> 2] = $36; //@line 6791
   $297 = $ReallocAsyncCtx2 + 68 | 0; //@line 6792
   HEAP8[$297 >> 0] = $268; //@line 6793
   $298 = $ReallocAsyncCtx2 + 72 | 0; //@line 6794
   HEAP32[$298 >> 2] = $38; //@line 6795
   $299 = $ReallocAsyncCtx2 + 76 | 0; //@line 6796
   HEAP32[$299 >> 2] = $40; //@line 6797
   $300 = $ReallocAsyncCtx2 + 80 | 0; //@line 6798
   HEAP32[$300 >> 2] = $42; //@line 6799
   $301 = $ReallocAsyncCtx2 + 84 | 0; //@line 6800
   HEAP32[$301 >> 2] = $44; //@line 6801
   $302 = $ReallocAsyncCtx2 + 88 | 0; //@line 6802
   HEAP32[$302 >> 2] = $46; //@line 6803
   $303 = $ReallocAsyncCtx2 + 92 | 0; //@line 6804
   HEAP32[$303 >> 2] = $48; //@line 6805
   $304 = $ReallocAsyncCtx2 + 96 | 0; //@line 6806
   HEAP32[$304 >> 2] = $50; //@line 6807
   $305 = $ReallocAsyncCtx2 + 100 | 0; //@line 6808
   HEAP32[$305 >> 2] = $52; //@line 6809
   $306 = $ReallocAsyncCtx2 + 104 | 0; //@line 6810
   HEAP32[$306 >> 2] = $54; //@line 6811
   $307 = $ReallocAsyncCtx2 + 108 | 0; //@line 6812
   HEAP32[$307 >> 2] = $56; //@line 6813
   $308 = $ReallocAsyncCtx2 + 112 | 0; //@line 6814
   HEAP32[$308 >> 2] = $58; //@line 6815
   $309 = $ReallocAsyncCtx2 + 116 | 0; //@line 6816
   HEAP32[$309 >> 2] = $60; //@line 6817
   $310 = $ReallocAsyncCtx2 + 120 | 0; //@line 6818
   HEAP32[$310 >> 2] = $62; //@line 6819
   $311 = $ReallocAsyncCtx2 + 124 | 0; //@line 6820
   HEAP32[$311 >> 2] = $64; //@line 6821
   $312 = $ReallocAsyncCtx2 + 128 | 0; //@line 6822
   HEAP32[$312 >> 2] = $66; //@line 6823
   $313 = $ReallocAsyncCtx2 + 132 | 0; //@line 6824
   HEAP32[$313 >> 2] = $68; //@line 6825
   $314 = $ReallocAsyncCtx2 + 136 | 0; //@line 6826
   HEAP32[$314 >> 2] = $70; //@line 6827
   $315 = $ReallocAsyncCtx2 + 140 | 0; //@line 6828
   HEAP32[$315 >> 2] = $72; //@line 6829
   $316 = $ReallocAsyncCtx2 + 144 | 0; //@line 6830
   HEAP32[$316 >> 2] = $74; //@line 6831
   $317 = $ReallocAsyncCtx2 + 148 | 0; //@line 6832
   HEAP32[$317 >> 2] = $76; //@line 6833
   $318 = $ReallocAsyncCtx2 + 152 | 0; //@line 6834
   HEAP32[$318 >> 2] = $78; //@line 6835
   $319 = $ReallocAsyncCtx2 + 156 | 0; //@line 6836
   HEAP32[$319 >> 2] = $80; //@line 6837
   $320 = $ReallocAsyncCtx2 + 160 | 0; //@line 6838
   HEAP32[$320 >> 2] = $82; //@line 6839
   $321 = $ReallocAsyncCtx2 + 164 | 0; //@line 6840
   HEAP32[$321 >> 2] = $84; //@line 6841
   $322 = $ReallocAsyncCtx2 + 168 | 0; //@line 6842
   HEAP32[$322 >> 2] = $86; //@line 6843
   $323 = $ReallocAsyncCtx2 + 172 | 0; //@line 6844
   HEAP32[$323 >> 2] = $88; //@line 6845
   $324 = $ReallocAsyncCtx2 + 176 | 0; //@line 6846
   HEAP32[$324 >> 2] = $90; //@line 6847
   $325 = $ReallocAsyncCtx2 + 180 | 0; //@line 6848
   HEAP32[$325 >> 2] = $92; //@line 6849
   $326 = $ReallocAsyncCtx2 + 184 | 0; //@line 6850
   HEAP32[$326 >> 2] = $94; //@line 6851
   $327 = $ReallocAsyncCtx2 + 188 | 0; //@line 6852
   HEAP32[$327 >> 2] = $96; //@line 6853
   $328 = $ReallocAsyncCtx2 + 192 | 0; //@line 6854
   HEAP32[$328 >> 2] = $98; //@line 6855
   $329 = $ReallocAsyncCtx2 + 196 | 0; //@line 6856
   HEAP32[$329 >> 2] = $102; //@line 6857
   $330 = $ReallocAsyncCtx2 + 200 | 0; //@line 6858
   HEAP32[$330 >> 2] = $104; //@line 6859
   $331 = $ReallocAsyncCtx2 + 204 | 0; //@line 6860
   HEAP32[$331 >> 2] = $106; //@line 6861
   $332 = $ReallocAsyncCtx2 + 208 | 0; //@line 6862
   HEAP32[$332 >> 2] = $108; //@line 6863
   $333 = $ReallocAsyncCtx2 + 212 | 0; //@line 6864
   HEAP32[$333 >> 2] = $110; //@line 6865
   $334 = $ReallocAsyncCtx2 + 216 | 0; //@line 6866
   HEAP32[$334 >> 2] = $112; //@line 6867
   $335 = $ReallocAsyncCtx2 + 220 | 0; //@line 6868
   HEAP32[$335 >> 2] = $114; //@line 6869
   $336 = $ReallocAsyncCtx2 + 224 | 0; //@line 6870
   HEAP32[$336 >> 2] = $116; //@line 6871
   $337 = $ReallocAsyncCtx2 + 228 | 0; //@line 6872
   HEAP32[$337 >> 2] = $118; //@line 6873
   $338 = $ReallocAsyncCtx2 + 232 | 0; //@line 6874
   HEAP32[$338 >> 2] = $120; //@line 6875
   $339 = $ReallocAsyncCtx2 + 236 | 0; //@line 6876
   HEAP32[$339 >> 2] = $122; //@line 6877
   $340 = $ReallocAsyncCtx2 + 240 | 0; //@line 6878
   HEAP32[$340 >> 2] = $124; //@line 6879
   $341 = $ReallocAsyncCtx2 + 244 | 0; //@line 6880
   HEAP32[$341 >> 2] = $126; //@line 6881
   $342 = $ReallocAsyncCtx2 + 248 | 0; //@line 6882
   HEAP32[$342 >> 2] = $128; //@line 6883
   $343 = $ReallocAsyncCtx2 + 252 | 0; //@line 6884
   HEAP32[$343 >> 2] = $130; //@line 6885
   $344 = $ReallocAsyncCtx2 + 256 | 0; //@line 6886
   HEAP32[$344 >> 2] = $132; //@line 6887
   $345 = $ReallocAsyncCtx2 + 260 | 0; //@line 6888
   HEAP32[$345 >> 2] = $134; //@line 6889
   $346 = $ReallocAsyncCtx2 + 264 | 0; //@line 6890
   HEAP32[$346 >> 2] = $136; //@line 6891
   sp = STACKTOP; //@line 6892
   return;
  }
  HEAP8[___async_retval >> 0] = $279; //@line 6896
  ___async_unwind = 0; //@line 6897
  HEAP32[$ReallocAsyncCtx2 >> 2] = 591; //@line 6898
  $280 = $ReallocAsyncCtx2 + 4 | 0; //@line 6899
  HEAP32[$280 >> 2] = $2; //@line 6900
  $281 = $ReallocAsyncCtx2 + 8 | 0; //@line 6901
  HEAP32[$281 >> 2] = $4; //@line 6902
  $282 = $ReallocAsyncCtx2 + 12 | 0; //@line 6903
  HEAP32[$282 >> 2] = $6; //@line 6904
  $283 = $ReallocAsyncCtx2 + 16 | 0; //@line 6905
  HEAP32[$283 >> 2] = $10; //@line 6906
  $284 = $ReallocAsyncCtx2 + 20 | 0; //@line 6907
  HEAP32[$284 >> 2] = $12; //@line 6908
  $285 = $ReallocAsyncCtx2 + 24 | 0; //@line 6909
  HEAP32[$285 >> 2] = $14; //@line 6910
  $286 = $ReallocAsyncCtx2 + 28 | 0; //@line 6911
  HEAP32[$286 >> 2] = $16; //@line 6912
  $287 = $ReallocAsyncCtx2 + 32 | 0; //@line 6913
  HEAP8[$287 >> 0] = $18; //@line 6914
  $288 = $ReallocAsyncCtx2 + 33 | 0; //@line 6915
  HEAP8[$288 >> 0] = $20; //@line 6916
  $289 = $ReallocAsyncCtx2 + 36 | 0; //@line 6917
  HEAP32[$289 >> 2] = $22; //@line 6918
  $290 = $ReallocAsyncCtx2 + 40 | 0; //@line 6919
  HEAP32[$290 >> 2] = $24; //@line 6920
  $291 = $ReallocAsyncCtx2 + 44 | 0; //@line 6921
  HEAP32[$291 >> 2] = $26; //@line 6922
  $292 = $ReallocAsyncCtx2 + 48 | 0; //@line 6923
  HEAP8[$292 >> 0] = $28; //@line 6924
  $293 = $ReallocAsyncCtx2 + 52 | 0; //@line 6925
  HEAP32[$293 >> 2] = $30; //@line 6926
  $294 = $ReallocAsyncCtx2 + 56 | 0; //@line 6927
  HEAP32[$294 >> 2] = $32; //@line 6928
  $295 = $ReallocAsyncCtx2 + 60 | 0; //@line 6929
  HEAP32[$295 >> 2] = $34; //@line 6930
  $296 = $ReallocAsyncCtx2 + 64 | 0; //@line 6931
  HEAP32[$296 >> 2] = $36; //@line 6932
  $297 = $ReallocAsyncCtx2 + 68 | 0; //@line 6933
  HEAP8[$297 >> 0] = $268; //@line 6934
  $298 = $ReallocAsyncCtx2 + 72 | 0; //@line 6935
  HEAP32[$298 >> 2] = $38; //@line 6936
  $299 = $ReallocAsyncCtx2 + 76 | 0; //@line 6937
  HEAP32[$299 >> 2] = $40; //@line 6938
  $300 = $ReallocAsyncCtx2 + 80 | 0; //@line 6939
  HEAP32[$300 >> 2] = $42; //@line 6940
  $301 = $ReallocAsyncCtx2 + 84 | 0; //@line 6941
  HEAP32[$301 >> 2] = $44; //@line 6942
  $302 = $ReallocAsyncCtx2 + 88 | 0; //@line 6943
  HEAP32[$302 >> 2] = $46; //@line 6944
  $303 = $ReallocAsyncCtx2 + 92 | 0; //@line 6945
  HEAP32[$303 >> 2] = $48; //@line 6946
  $304 = $ReallocAsyncCtx2 + 96 | 0; //@line 6947
  HEAP32[$304 >> 2] = $50; //@line 6948
  $305 = $ReallocAsyncCtx2 + 100 | 0; //@line 6949
  HEAP32[$305 >> 2] = $52; //@line 6950
  $306 = $ReallocAsyncCtx2 + 104 | 0; //@line 6951
  HEAP32[$306 >> 2] = $54; //@line 6952
  $307 = $ReallocAsyncCtx2 + 108 | 0; //@line 6953
  HEAP32[$307 >> 2] = $56; //@line 6954
  $308 = $ReallocAsyncCtx2 + 112 | 0; //@line 6955
  HEAP32[$308 >> 2] = $58; //@line 6956
  $309 = $ReallocAsyncCtx2 + 116 | 0; //@line 6957
  HEAP32[$309 >> 2] = $60; //@line 6958
  $310 = $ReallocAsyncCtx2 + 120 | 0; //@line 6959
  HEAP32[$310 >> 2] = $62; //@line 6960
  $311 = $ReallocAsyncCtx2 + 124 | 0; //@line 6961
  HEAP32[$311 >> 2] = $64; //@line 6962
  $312 = $ReallocAsyncCtx2 + 128 | 0; //@line 6963
  HEAP32[$312 >> 2] = $66; //@line 6964
  $313 = $ReallocAsyncCtx2 + 132 | 0; //@line 6965
  HEAP32[$313 >> 2] = $68; //@line 6966
  $314 = $ReallocAsyncCtx2 + 136 | 0; //@line 6967
  HEAP32[$314 >> 2] = $70; //@line 6968
  $315 = $ReallocAsyncCtx2 + 140 | 0; //@line 6969
  HEAP32[$315 >> 2] = $72; //@line 6970
  $316 = $ReallocAsyncCtx2 + 144 | 0; //@line 6971
  HEAP32[$316 >> 2] = $74; //@line 6972
  $317 = $ReallocAsyncCtx2 + 148 | 0; //@line 6973
  HEAP32[$317 >> 2] = $76; //@line 6974
  $318 = $ReallocAsyncCtx2 + 152 | 0; //@line 6975
  HEAP32[$318 >> 2] = $78; //@line 6976
  $319 = $ReallocAsyncCtx2 + 156 | 0; //@line 6977
  HEAP32[$319 >> 2] = $80; //@line 6978
  $320 = $ReallocAsyncCtx2 + 160 | 0; //@line 6979
  HEAP32[$320 >> 2] = $82; //@line 6980
  $321 = $ReallocAsyncCtx2 + 164 | 0; //@line 6981
  HEAP32[$321 >> 2] = $84; //@line 6982
  $322 = $ReallocAsyncCtx2 + 168 | 0; //@line 6983
  HEAP32[$322 >> 2] = $86; //@line 6984
  $323 = $ReallocAsyncCtx2 + 172 | 0; //@line 6985
  HEAP32[$323 >> 2] = $88; //@line 6986
  $324 = $ReallocAsyncCtx2 + 176 | 0; //@line 6987
  HEAP32[$324 >> 2] = $90; //@line 6988
  $325 = $ReallocAsyncCtx2 + 180 | 0; //@line 6989
  HEAP32[$325 >> 2] = $92; //@line 6990
  $326 = $ReallocAsyncCtx2 + 184 | 0; //@line 6991
  HEAP32[$326 >> 2] = $94; //@line 6992
  $327 = $ReallocAsyncCtx2 + 188 | 0; //@line 6993
  HEAP32[$327 >> 2] = $96; //@line 6994
  $328 = $ReallocAsyncCtx2 + 192 | 0; //@line 6995
  HEAP32[$328 >> 2] = $98; //@line 6996
  $329 = $ReallocAsyncCtx2 + 196 | 0; //@line 6997
  HEAP32[$329 >> 2] = $102; //@line 6998
  $330 = $ReallocAsyncCtx2 + 200 | 0; //@line 6999
  HEAP32[$330 >> 2] = $104; //@line 7000
  $331 = $ReallocAsyncCtx2 + 204 | 0; //@line 7001
  HEAP32[$331 >> 2] = $106; //@line 7002
  $332 = $ReallocAsyncCtx2 + 208 | 0; //@line 7003
  HEAP32[$332 >> 2] = $108; //@line 7004
  $333 = $ReallocAsyncCtx2 + 212 | 0; //@line 7005
  HEAP32[$333 >> 2] = $110; //@line 7006
  $334 = $ReallocAsyncCtx2 + 216 | 0; //@line 7007
  HEAP32[$334 >> 2] = $112; //@line 7008
  $335 = $ReallocAsyncCtx2 + 220 | 0; //@line 7009
  HEAP32[$335 >> 2] = $114; //@line 7010
  $336 = $ReallocAsyncCtx2 + 224 | 0; //@line 7011
  HEAP32[$336 >> 2] = $116; //@line 7012
  $337 = $ReallocAsyncCtx2 + 228 | 0; //@line 7013
  HEAP32[$337 >> 2] = $118; //@line 7014
  $338 = $ReallocAsyncCtx2 + 232 | 0; //@line 7015
  HEAP32[$338 >> 2] = $120; //@line 7016
  $339 = $ReallocAsyncCtx2 + 236 | 0; //@line 7017
  HEAP32[$339 >> 2] = $122; //@line 7018
  $340 = $ReallocAsyncCtx2 + 240 | 0; //@line 7019
  HEAP32[$340 >> 2] = $124; //@line 7020
  $341 = $ReallocAsyncCtx2 + 244 | 0; //@line 7021
  HEAP32[$341 >> 2] = $126; //@line 7022
  $342 = $ReallocAsyncCtx2 + 248 | 0; //@line 7023
  HEAP32[$342 >> 2] = $128; //@line 7024
  $343 = $ReallocAsyncCtx2 + 252 | 0; //@line 7025
  HEAP32[$343 >> 2] = $130; //@line 7026
  $344 = $ReallocAsyncCtx2 + 256 | 0; //@line 7027
  HEAP32[$344 >> 2] = $132; //@line 7028
  $345 = $ReallocAsyncCtx2 + 260 | 0; //@line 7029
  HEAP32[$345 >> 2] = $134; //@line 7030
  $346 = $ReallocAsyncCtx2 + 264 | 0; //@line 7031
  HEAP32[$346 >> 2] = $136; //@line 7032
  sp = STACKTOP; //@line 7033
  return;
 } else if ((label | 0) == 14) {
  HEAP8[$68 >> 0] = HEAP8[$14 + ($139 & 255) >> 0] | 0; //@line 7041
  HEAP32[$58 >> 2] = $130; //@line 7042
  HEAP32[$106 >> 2] = (HEAPU8[$14 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$14 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$14 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 7063
  HEAP32[$96 >> 2] = 0; //@line 7064
  $387 = $$0$be + 6 << 24 >> 24; //@line 7065
  HEAP8[$94 >> 0] = HEAP8[$14 + ($$0$be + 5 & 255) >> 0] | 0; //@line 7069
  $393 = HEAP32[(HEAP32[$84 >> 2] | 0) + 8 >> 2] | 0; //@line 7072
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 7073
  $394 = FUNCTION_TABLE_iii[$393 & 31]($36, $56) | 0; //@line 7074
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 592; //@line 7077
   $395 = $ReallocAsyncCtx3 + 4 | 0; //@line 7078
   HEAP32[$395 >> 2] = $2; //@line 7079
   $396 = $ReallocAsyncCtx3 + 8 | 0; //@line 7080
   HEAP32[$396 >> 2] = $4; //@line 7081
   $397 = $ReallocAsyncCtx3 + 12 | 0; //@line 7082
   HEAP32[$397 >> 2] = $6; //@line 7083
   $398 = $ReallocAsyncCtx3 + 16 | 0; //@line 7084
   HEAP32[$398 >> 2] = $10; //@line 7085
   $399 = $ReallocAsyncCtx3 + 20 | 0; //@line 7086
   HEAP32[$399 >> 2] = $12; //@line 7087
   $400 = $ReallocAsyncCtx3 + 24 | 0; //@line 7088
   HEAP32[$400 >> 2] = $14; //@line 7089
   $401 = $ReallocAsyncCtx3 + 28 | 0; //@line 7090
   HEAP32[$401 >> 2] = $16; //@line 7091
   $402 = $ReallocAsyncCtx3 + 32 | 0; //@line 7092
   HEAP8[$402 >> 0] = $18; //@line 7093
   $403 = $ReallocAsyncCtx3 + 33 | 0; //@line 7094
   HEAP8[$403 >> 0] = $20; //@line 7095
   $404 = $ReallocAsyncCtx3 + 36 | 0; //@line 7096
   HEAP32[$404 >> 2] = $22; //@line 7097
   $405 = $ReallocAsyncCtx3 + 40 | 0; //@line 7098
   HEAP32[$405 >> 2] = $24; //@line 7099
   $406 = $ReallocAsyncCtx3 + 44 | 0; //@line 7100
   HEAP32[$406 >> 2] = $26; //@line 7101
   $407 = $ReallocAsyncCtx3 + 48 | 0; //@line 7102
   HEAP8[$407 >> 0] = $28; //@line 7103
   $408 = $ReallocAsyncCtx3 + 52 | 0; //@line 7104
   HEAP32[$408 >> 2] = $30; //@line 7105
   $409 = $ReallocAsyncCtx3 + 56 | 0; //@line 7106
   HEAP32[$409 >> 2] = $32; //@line 7107
   $410 = $ReallocAsyncCtx3 + 60 | 0; //@line 7108
   HEAP32[$410 >> 2] = $34; //@line 7109
   $411 = $ReallocAsyncCtx3 + 64 | 0; //@line 7110
   HEAP32[$411 >> 2] = $36; //@line 7111
   $412 = $ReallocAsyncCtx3 + 68 | 0; //@line 7112
   HEAP32[$412 >> 2] = $38; //@line 7113
   $413 = $ReallocAsyncCtx3 + 72 | 0; //@line 7114
   HEAP32[$413 >> 2] = $40; //@line 7115
   $414 = $ReallocAsyncCtx3 + 76 | 0; //@line 7116
   HEAP32[$414 >> 2] = $42; //@line 7117
   $415 = $ReallocAsyncCtx3 + 80 | 0; //@line 7118
   HEAP32[$415 >> 2] = $44; //@line 7119
   $416 = $ReallocAsyncCtx3 + 84 | 0; //@line 7120
   HEAP32[$416 >> 2] = $46; //@line 7121
   $417 = $ReallocAsyncCtx3 + 88 | 0; //@line 7122
   HEAP32[$417 >> 2] = $48; //@line 7123
   $418 = $ReallocAsyncCtx3 + 92 | 0; //@line 7124
   HEAP32[$418 >> 2] = $50; //@line 7125
   $419 = $ReallocAsyncCtx3 + 96 | 0; //@line 7126
   HEAP32[$419 >> 2] = $52; //@line 7127
   $420 = $ReallocAsyncCtx3 + 100 | 0; //@line 7128
   HEAP32[$420 >> 2] = $54; //@line 7129
   $421 = $ReallocAsyncCtx3 + 104 | 0; //@line 7130
   HEAP32[$421 >> 2] = $56; //@line 7131
   $422 = $ReallocAsyncCtx3 + 108 | 0; //@line 7132
   HEAP32[$422 >> 2] = $58; //@line 7133
   $423 = $ReallocAsyncCtx3 + 112 | 0; //@line 7134
   HEAP32[$423 >> 2] = $60; //@line 7135
   $424 = $ReallocAsyncCtx3 + 116 | 0; //@line 7136
   HEAP32[$424 >> 2] = $62; //@line 7137
   $425 = $ReallocAsyncCtx3 + 120 | 0; //@line 7138
   HEAP32[$425 >> 2] = $64; //@line 7139
   $426 = $ReallocAsyncCtx3 + 124 | 0; //@line 7140
   HEAP32[$426 >> 2] = $66; //@line 7141
   $427 = $ReallocAsyncCtx3 + 128 | 0; //@line 7142
   HEAP32[$427 >> 2] = $68; //@line 7143
   $428 = $ReallocAsyncCtx3 + 132 | 0; //@line 7144
   HEAP32[$428 >> 2] = $70; //@line 7145
   $429 = $ReallocAsyncCtx3 + 136 | 0; //@line 7146
   HEAP32[$429 >> 2] = $72; //@line 7147
   $430 = $ReallocAsyncCtx3 + 140 | 0; //@line 7148
   HEAP32[$430 >> 2] = $74; //@line 7149
   $431 = $ReallocAsyncCtx3 + 144 | 0; //@line 7150
   HEAP32[$431 >> 2] = $76; //@line 7151
   $432 = $ReallocAsyncCtx3 + 148 | 0; //@line 7152
   HEAP32[$432 >> 2] = $78; //@line 7153
   $433 = $ReallocAsyncCtx3 + 152 | 0; //@line 7154
   HEAP32[$433 >> 2] = $80; //@line 7155
   $434 = $ReallocAsyncCtx3 + 156 | 0; //@line 7156
   HEAP32[$434 >> 2] = $82; //@line 7157
   $435 = $ReallocAsyncCtx3 + 160 | 0; //@line 7158
   HEAP32[$435 >> 2] = $84; //@line 7159
   $436 = $ReallocAsyncCtx3 + 164 | 0; //@line 7160
   HEAP32[$436 >> 2] = $86; //@line 7161
   $437 = $ReallocAsyncCtx3 + 168 | 0; //@line 7162
   HEAP32[$437 >> 2] = $88; //@line 7163
   $438 = $ReallocAsyncCtx3 + 172 | 0; //@line 7164
   HEAP32[$438 >> 2] = $90; //@line 7165
   $439 = $ReallocAsyncCtx3 + 176 | 0; //@line 7166
   HEAP32[$439 >> 2] = $92; //@line 7167
   $440 = $ReallocAsyncCtx3 + 180 | 0; //@line 7168
   HEAP32[$440 >> 2] = $94; //@line 7169
   $441 = $ReallocAsyncCtx3 + 184 | 0; //@line 7170
   HEAP32[$441 >> 2] = $96; //@line 7171
   $442 = $ReallocAsyncCtx3 + 188 | 0; //@line 7172
   HEAP32[$442 >> 2] = $98; //@line 7173
   $443 = $ReallocAsyncCtx3 + 192 | 0; //@line 7174
   HEAP32[$443 >> 2] = $102; //@line 7175
   $444 = $ReallocAsyncCtx3 + 196 | 0; //@line 7176
   HEAP32[$444 >> 2] = $104; //@line 7177
   $445 = $ReallocAsyncCtx3 + 200 | 0; //@line 7178
   HEAP32[$445 >> 2] = $106; //@line 7179
   $446 = $ReallocAsyncCtx3 + 204 | 0; //@line 7180
   HEAP32[$446 >> 2] = $108; //@line 7181
   $447 = $ReallocAsyncCtx3 + 208 | 0; //@line 7182
   HEAP32[$447 >> 2] = $110; //@line 7183
   $448 = $ReallocAsyncCtx3 + 212 | 0; //@line 7184
   HEAP32[$448 >> 2] = $112; //@line 7185
   $449 = $ReallocAsyncCtx3 + 216 | 0; //@line 7186
   HEAP8[$449 >> 0] = $387; //@line 7187
   $450 = $ReallocAsyncCtx3 + 220 | 0; //@line 7188
   HEAP32[$450 >> 2] = $114; //@line 7189
   $451 = $ReallocAsyncCtx3 + 224 | 0; //@line 7190
   HEAP32[$451 >> 2] = $116; //@line 7191
   $452 = $ReallocAsyncCtx3 + 228 | 0; //@line 7192
   HEAP32[$452 >> 2] = $118; //@line 7193
   $453 = $ReallocAsyncCtx3 + 232 | 0; //@line 7194
   HEAP32[$453 >> 2] = $120; //@line 7195
   $454 = $ReallocAsyncCtx3 + 236 | 0; //@line 7196
   HEAP32[$454 >> 2] = $122; //@line 7197
   $455 = $ReallocAsyncCtx3 + 240 | 0; //@line 7198
   HEAP32[$455 >> 2] = $124; //@line 7199
   $456 = $ReallocAsyncCtx3 + 244 | 0; //@line 7200
   HEAP32[$456 >> 2] = $126; //@line 7201
   $457 = $ReallocAsyncCtx3 + 248 | 0; //@line 7202
   HEAP32[$457 >> 2] = $128; //@line 7203
   $458 = $ReallocAsyncCtx3 + 252 | 0; //@line 7204
   HEAP32[$458 >> 2] = $130; //@line 7205
   $459 = $ReallocAsyncCtx3 + 256 | 0; //@line 7206
   HEAP32[$459 >> 2] = $132; //@line 7207
   $460 = $ReallocAsyncCtx3 + 260 | 0; //@line 7208
   HEAP32[$460 >> 2] = $134; //@line 7209
   $461 = $ReallocAsyncCtx3 + 264 | 0; //@line 7210
   HEAP32[$461 >> 2] = $136; //@line 7211
   sp = STACKTOP; //@line 7212
   return;
  }
  HEAP8[___async_retval >> 0] = $394; //@line 7216
  ___async_unwind = 0; //@line 7217
  HEAP32[$ReallocAsyncCtx3 >> 2] = 592; //@line 7218
  $395 = $ReallocAsyncCtx3 + 4 | 0; //@line 7219
  HEAP32[$395 >> 2] = $2; //@line 7220
  $396 = $ReallocAsyncCtx3 + 8 | 0; //@line 7221
  HEAP32[$396 >> 2] = $4; //@line 7222
  $397 = $ReallocAsyncCtx3 + 12 | 0; //@line 7223
  HEAP32[$397 >> 2] = $6; //@line 7224
  $398 = $ReallocAsyncCtx3 + 16 | 0; //@line 7225
  HEAP32[$398 >> 2] = $10; //@line 7226
  $399 = $ReallocAsyncCtx3 + 20 | 0; //@line 7227
  HEAP32[$399 >> 2] = $12; //@line 7228
  $400 = $ReallocAsyncCtx3 + 24 | 0; //@line 7229
  HEAP32[$400 >> 2] = $14; //@line 7230
  $401 = $ReallocAsyncCtx3 + 28 | 0; //@line 7231
  HEAP32[$401 >> 2] = $16; //@line 7232
  $402 = $ReallocAsyncCtx3 + 32 | 0; //@line 7233
  HEAP8[$402 >> 0] = $18; //@line 7234
  $403 = $ReallocAsyncCtx3 + 33 | 0; //@line 7235
  HEAP8[$403 >> 0] = $20; //@line 7236
  $404 = $ReallocAsyncCtx3 + 36 | 0; //@line 7237
  HEAP32[$404 >> 2] = $22; //@line 7238
  $405 = $ReallocAsyncCtx3 + 40 | 0; //@line 7239
  HEAP32[$405 >> 2] = $24; //@line 7240
  $406 = $ReallocAsyncCtx3 + 44 | 0; //@line 7241
  HEAP32[$406 >> 2] = $26; //@line 7242
  $407 = $ReallocAsyncCtx3 + 48 | 0; //@line 7243
  HEAP8[$407 >> 0] = $28; //@line 7244
  $408 = $ReallocAsyncCtx3 + 52 | 0; //@line 7245
  HEAP32[$408 >> 2] = $30; //@line 7246
  $409 = $ReallocAsyncCtx3 + 56 | 0; //@line 7247
  HEAP32[$409 >> 2] = $32; //@line 7248
  $410 = $ReallocAsyncCtx3 + 60 | 0; //@line 7249
  HEAP32[$410 >> 2] = $34; //@line 7250
  $411 = $ReallocAsyncCtx3 + 64 | 0; //@line 7251
  HEAP32[$411 >> 2] = $36; //@line 7252
  $412 = $ReallocAsyncCtx3 + 68 | 0; //@line 7253
  HEAP32[$412 >> 2] = $38; //@line 7254
  $413 = $ReallocAsyncCtx3 + 72 | 0; //@line 7255
  HEAP32[$413 >> 2] = $40; //@line 7256
  $414 = $ReallocAsyncCtx3 + 76 | 0; //@line 7257
  HEAP32[$414 >> 2] = $42; //@line 7258
  $415 = $ReallocAsyncCtx3 + 80 | 0; //@line 7259
  HEAP32[$415 >> 2] = $44; //@line 7260
  $416 = $ReallocAsyncCtx3 + 84 | 0; //@line 7261
  HEAP32[$416 >> 2] = $46; //@line 7262
  $417 = $ReallocAsyncCtx3 + 88 | 0; //@line 7263
  HEAP32[$417 >> 2] = $48; //@line 7264
  $418 = $ReallocAsyncCtx3 + 92 | 0; //@line 7265
  HEAP32[$418 >> 2] = $50; //@line 7266
  $419 = $ReallocAsyncCtx3 + 96 | 0; //@line 7267
  HEAP32[$419 >> 2] = $52; //@line 7268
  $420 = $ReallocAsyncCtx3 + 100 | 0; //@line 7269
  HEAP32[$420 >> 2] = $54; //@line 7270
  $421 = $ReallocAsyncCtx3 + 104 | 0; //@line 7271
  HEAP32[$421 >> 2] = $56; //@line 7272
  $422 = $ReallocAsyncCtx3 + 108 | 0; //@line 7273
  HEAP32[$422 >> 2] = $58; //@line 7274
  $423 = $ReallocAsyncCtx3 + 112 | 0; //@line 7275
  HEAP32[$423 >> 2] = $60; //@line 7276
  $424 = $ReallocAsyncCtx3 + 116 | 0; //@line 7277
  HEAP32[$424 >> 2] = $62; //@line 7278
  $425 = $ReallocAsyncCtx3 + 120 | 0; //@line 7279
  HEAP32[$425 >> 2] = $64; //@line 7280
  $426 = $ReallocAsyncCtx3 + 124 | 0; //@line 7281
  HEAP32[$426 >> 2] = $66; //@line 7282
  $427 = $ReallocAsyncCtx3 + 128 | 0; //@line 7283
  HEAP32[$427 >> 2] = $68; //@line 7284
  $428 = $ReallocAsyncCtx3 + 132 | 0; //@line 7285
  HEAP32[$428 >> 2] = $70; //@line 7286
  $429 = $ReallocAsyncCtx3 + 136 | 0; //@line 7287
  HEAP32[$429 >> 2] = $72; //@line 7288
  $430 = $ReallocAsyncCtx3 + 140 | 0; //@line 7289
  HEAP32[$430 >> 2] = $74; //@line 7290
  $431 = $ReallocAsyncCtx3 + 144 | 0; //@line 7291
  HEAP32[$431 >> 2] = $76; //@line 7292
  $432 = $ReallocAsyncCtx3 + 148 | 0; //@line 7293
  HEAP32[$432 >> 2] = $78; //@line 7294
  $433 = $ReallocAsyncCtx3 + 152 | 0; //@line 7295
  HEAP32[$433 >> 2] = $80; //@line 7296
  $434 = $ReallocAsyncCtx3 + 156 | 0; //@line 7297
  HEAP32[$434 >> 2] = $82; //@line 7298
  $435 = $ReallocAsyncCtx3 + 160 | 0; //@line 7299
  HEAP32[$435 >> 2] = $84; //@line 7300
  $436 = $ReallocAsyncCtx3 + 164 | 0; //@line 7301
  HEAP32[$436 >> 2] = $86; //@line 7302
  $437 = $ReallocAsyncCtx3 + 168 | 0; //@line 7303
  HEAP32[$437 >> 2] = $88; //@line 7304
  $438 = $ReallocAsyncCtx3 + 172 | 0; //@line 7305
  HEAP32[$438 >> 2] = $90; //@line 7306
  $439 = $ReallocAsyncCtx3 + 176 | 0; //@line 7307
  HEAP32[$439 >> 2] = $92; //@line 7308
  $440 = $ReallocAsyncCtx3 + 180 | 0; //@line 7309
  HEAP32[$440 >> 2] = $94; //@line 7310
  $441 = $ReallocAsyncCtx3 + 184 | 0; //@line 7311
  HEAP32[$441 >> 2] = $96; //@line 7312
  $442 = $ReallocAsyncCtx3 + 188 | 0; //@line 7313
  HEAP32[$442 >> 2] = $98; //@line 7314
  $443 = $ReallocAsyncCtx3 + 192 | 0; //@line 7315
  HEAP32[$443 >> 2] = $102; //@line 7316
  $444 = $ReallocAsyncCtx3 + 196 | 0; //@line 7317
  HEAP32[$444 >> 2] = $104; //@line 7318
  $445 = $ReallocAsyncCtx3 + 200 | 0; //@line 7319
  HEAP32[$445 >> 2] = $106; //@line 7320
  $446 = $ReallocAsyncCtx3 + 204 | 0; //@line 7321
  HEAP32[$446 >> 2] = $108; //@line 7322
  $447 = $ReallocAsyncCtx3 + 208 | 0; //@line 7323
  HEAP32[$447 >> 2] = $110; //@line 7324
  $448 = $ReallocAsyncCtx3 + 212 | 0; //@line 7325
  HEAP32[$448 >> 2] = $112; //@line 7326
  $449 = $ReallocAsyncCtx3 + 216 | 0; //@line 7327
  HEAP8[$449 >> 0] = $387; //@line 7328
  $450 = $ReallocAsyncCtx3 + 220 | 0; //@line 7329
  HEAP32[$450 >> 2] = $114; //@line 7330
  $451 = $ReallocAsyncCtx3 + 224 | 0; //@line 7331
  HEAP32[$451 >> 2] = $116; //@line 7332
  $452 = $ReallocAsyncCtx3 + 228 | 0; //@line 7333
  HEAP32[$452 >> 2] = $118; //@line 7334
  $453 = $ReallocAsyncCtx3 + 232 | 0; //@line 7335
  HEAP32[$453 >> 2] = $120; //@line 7336
  $454 = $ReallocAsyncCtx3 + 236 | 0; //@line 7337
  HEAP32[$454 >> 2] = $122; //@line 7338
  $455 = $ReallocAsyncCtx3 + 240 | 0; //@line 7339
  HEAP32[$455 >> 2] = $124; //@line 7340
  $456 = $ReallocAsyncCtx3 + 244 | 0; //@line 7341
  HEAP32[$456 >> 2] = $126; //@line 7342
  $457 = $ReallocAsyncCtx3 + 248 | 0; //@line 7343
  HEAP32[$457 >> 2] = $128; //@line 7344
  $458 = $ReallocAsyncCtx3 + 252 | 0; //@line 7345
  HEAP32[$458 >> 2] = $130; //@line 7346
  $459 = $ReallocAsyncCtx3 + 256 | 0; //@line 7347
  HEAP32[$459 >> 2] = $132; //@line 7348
  $460 = $ReallocAsyncCtx3 + 260 | 0; //@line 7349
  HEAP32[$460 >> 2] = $134; //@line 7350
  $461 = $ReallocAsyncCtx3 + 264 | 0; //@line 7351
  HEAP32[$461 >> 2] = $136; //@line 7352
  sp = STACKTOP; //@line 7353
  return;
 } else if ((label | 0) == 19) {
  $480 = $$0$be + 2 << 24 >> 24; //@line 7357
  $483 = HEAP8[$14 + ($139 & 255) >> 0] | 0; //@line 7360
  HEAP8[$120 >> 0] = 0; //@line 7361
  $484 = $483 & 255; //@line 7362
  HEAP8[$116 >> 0] = $484 >>> 5 & 1; //@line 7366
  if ($484 & 16 | 0) {
   HEAP8[$120 >> 0] = 1; //@line 7370
  }
  HEAP8[$42 >> 0] = $484 & 15; //@line 7374
  $493 = HEAP32[(HEAP32[$34 >> 2] | 0) + 44 >> 2] | 0; //@line 7377
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 7378
  $494 = FUNCTION_TABLE_iii[$493 & 31]($36, $86) | 0; //@line 7379
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 593; //@line 7382
   $495 = $ReallocAsyncCtx4 + 4 | 0; //@line 7383
   HEAP32[$495 >> 2] = $2; //@line 7384
   $496 = $ReallocAsyncCtx4 + 8 | 0; //@line 7385
   HEAP32[$496 >> 2] = $4; //@line 7386
   $497 = $ReallocAsyncCtx4 + 12 | 0; //@line 7387
   HEAP32[$497 >> 2] = $6; //@line 7388
   $498 = $ReallocAsyncCtx4 + 16 | 0; //@line 7389
   HEAP8[$498 >> 0] = $480; //@line 7390
   $499 = $ReallocAsyncCtx4 + 20 | 0; //@line 7391
   HEAP32[$499 >> 2] = $10; //@line 7392
   $500 = $ReallocAsyncCtx4 + 24 | 0; //@line 7393
   HEAP32[$500 >> 2] = $12; //@line 7394
   $501 = $ReallocAsyncCtx4 + 28 | 0; //@line 7395
   HEAP32[$501 >> 2] = $14; //@line 7396
   $502 = $ReallocAsyncCtx4 + 32 | 0; //@line 7397
   HEAP32[$502 >> 2] = $16; //@line 7398
   $503 = $ReallocAsyncCtx4 + 36 | 0; //@line 7399
   HEAP8[$503 >> 0] = $18; //@line 7400
   $504 = $ReallocAsyncCtx4 + 37 | 0; //@line 7401
   HEAP8[$504 >> 0] = $20; //@line 7402
   $505 = $ReallocAsyncCtx4 + 40 | 0; //@line 7403
   HEAP32[$505 >> 2] = $22; //@line 7404
   $506 = $ReallocAsyncCtx4 + 44 | 0; //@line 7405
   HEAP32[$506 >> 2] = $24; //@line 7406
   $507 = $ReallocAsyncCtx4 + 48 | 0; //@line 7407
   HEAP32[$507 >> 2] = $26; //@line 7408
   $508 = $ReallocAsyncCtx4 + 52 | 0; //@line 7409
   HEAP8[$508 >> 0] = $28; //@line 7410
   $509 = $ReallocAsyncCtx4 + 56 | 0; //@line 7411
   HEAP32[$509 >> 2] = $30; //@line 7412
   $510 = $ReallocAsyncCtx4 + 60 | 0; //@line 7413
   HEAP32[$510 >> 2] = $32; //@line 7414
   $511 = $ReallocAsyncCtx4 + 64 | 0; //@line 7415
   HEAP32[$511 >> 2] = $34; //@line 7416
   $512 = $ReallocAsyncCtx4 + 68 | 0; //@line 7417
   HEAP32[$512 >> 2] = $36; //@line 7418
   $513 = $ReallocAsyncCtx4 + 72 | 0; //@line 7419
   HEAP32[$513 >> 2] = $38; //@line 7420
   $514 = $ReallocAsyncCtx4 + 76 | 0; //@line 7421
   HEAP32[$514 >> 2] = $40; //@line 7422
   $515 = $ReallocAsyncCtx4 + 80 | 0; //@line 7423
   HEAP32[$515 >> 2] = $42; //@line 7424
   $516 = $ReallocAsyncCtx4 + 84 | 0; //@line 7425
   HEAP32[$516 >> 2] = $44; //@line 7426
   $517 = $ReallocAsyncCtx4 + 88 | 0; //@line 7427
   HEAP32[$517 >> 2] = $46; //@line 7428
   $518 = $ReallocAsyncCtx4 + 92 | 0; //@line 7429
   HEAP32[$518 >> 2] = $48; //@line 7430
   $519 = $ReallocAsyncCtx4 + 96 | 0; //@line 7431
   HEAP32[$519 >> 2] = $50; //@line 7432
   $520 = $ReallocAsyncCtx4 + 100 | 0; //@line 7433
   HEAP32[$520 >> 2] = $52; //@line 7434
   $521 = $ReallocAsyncCtx4 + 104 | 0; //@line 7435
   HEAP32[$521 >> 2] = $54; //@line 7436
   $522 = $ReallocAsyncCtx4 + 108 | 0; //@line 7437
   HEAP32[$522 >> 2] = $56; //@line 7438
   $523 = $ReallocAsyncCtx4 + 112 | 0; //@line 7439
   HEAP32[$523 >> 2] = $58; //@line 7440
   $524 = $ReallocAsyncCtx4 + 116 | 0; //@line 7441
   HEAP32[$524 >> 2] = $60; //@line 7442
   $525 = $ReallocAsyncCtx4 + 120 | 0; //@line 7443
   HEAP32[$525 >> 2] = $62; //@line 7444
   $526 = $ReallocAsyncCtx4 + 124 | 0; //@line 7445
   HEAP32[$526 >> 2] = $64; //@line 7446
   $527 = $ReallocAsyncCtx4 + 128 | 0; //@line 7447
   HEAP32[$527 >> 2] = $66; //@line 7448
   $528 = $ReallocAsyncCtx4 + 132 | 0; //@line 7449
   HEAP32[$528 >> 2] = $68; //@line 7450
   $529 = $ReallocAsyncCtx4 + 136 | 0; //@line 7451
   HEAP32[$529 >> 2] = $70; //@line 7452
   $530 = $ReallocAsyncCtx4 + 140 | 0; //@line 7453
   HEAP32[$530 >> 2] = $72; //@line 7454
   $531 = $ReallocAsyncCtx4 + 144 | 0; //@line 7455
   HEAP32[$531 >> 2] = $74; //@line 7456
   $532 = $ReallocAsyncCtx4 + 148 | 0; //@line 7457
   HEAP32[$532 >> 2] = $76; //@line 7458
   $533 = $ReallocAsyncCtx4 + 152 | 0; //@line 7459
   HEAP32[$533 >> 2] = $78; //@line 7460
   $534 = $ReallocAsyncCtx4 + 156 | 0; //@line 7461
   HEAP32[$534 >> 2] = $80; //@line 7462
   $535 = $ReallocAsyncCtx4 + 160 | 0; //@line 7463
   HEAP32[$535 >> 2] = $82; //@line 7464
   $536 = $ReallocAsyncCtx4 + 164 | 0; //@line 7465
   HEAP32[$536 >> 2] = $84; //@line 7466
   $537 = $ReallocAsyncCtx4 + 168 | 0; //@line 7467
   HEAP32[$537 >> 2] = $86; //@line 7468
   $538 = $ReallocAsyncCtx4 + 172 | 0; //@line 7469
   HEAP32[$538 >> 2] = $88; //@line 7470
   $539 = $ReallocAsyncCtx4 + 176 | 0; //@line 7471
   HEAP32[$539 >> 2] = $90; //@line 7472
   $540 = $ReallocAsyncCtx4 + 180 | 0; //@line 7473
   HEAP32[$540 >> 2] = $92; //@line 7474
   $541 = $ReallocAsyncCtx4 + 184 | 0; //@line 7475
   HEAP32[$541 >> 2] = $94; //@line 7476
   $542 = $ReallocAsyncCtx4 + 188 | 0; //@line 7477
   HEAP32[$542 >> 2] = $96; //@line 7478
   $543 = $ReallocAsyncCtx4 + 192 | 0; //@line 7479
   HEAP32[$543 >> 2] = $98; //@line 7480
   $544 = $ReallocAsyncCtx4 + 196 | 0; //@line 7481
   HEAP32[$544 >> 2] = $$096$be; //@line 7482
   $545 = $ReallocAsyncCtx4 + 200 | 0; //@line 7483
   HEAP32[$545 >> 2] = $102; //@line 7484
   $546 = $ReallocAsyncCtx4 + 204 | 0; //@line 7485
   HEAP32[$546 >> 2] = $104; //@line 7486
   $547 = $ReallocAsyncCtx4 + 208 | 0; //@line 7487
   HEAP32[$547 >> 2] = $106; //@line 7488
   $548 = $ReallocAsyncCtx4 + 212 | 0; //@line 7489
   HEAP32[$548 >> 2] = $108; //@line 7490
   $549 = $ReallocAsyncCtx4 + 216 | 0; //@line 7491
   HEAP32[$549 >> 2] = $110; //@line 7492
   $550 = $ReallocAsyncCtx4 + 220 | 0; //@line 7493
   HEAP32[$550 >> 2] = $112; //@line 7494
   $551 = $ReallocAsyncCtx4 + 224 | 0; //@line 7495
   HEAP32[$551 >> 2] = $114; //@line 7496
   $552 = $ReallocAsyncCtx4 + 228 | 0; //@line 7497
   HEAP32[$552 >> 2] = $116; //@line 7498
   $553 = $ReallocAsyncCtx4 + 232 | 0; //@line 7499
   HEAP32[$553 >> 2] = $118; //@line 7500
   $554 = $ReallocAsyncCtx4 + 236 | 0; //@line 7501
   HEAP32[$554 >> 2] = $120; //@line 7502
   $555 = $ReallocAsyncCtx4 + 240 | 0; //@line 7503
   HEAP32[$555 >> 2] = $122; //@line 7504
   $556 = $ReallocAsyncCtx4 + 244 | 0; //@line 7505
   HEAP32[$556 >> 2] = $124; //@line 7506
   $557 = $ReallocAsyncCtx4 + 248 | 0; //@line 7507
   HEAP32[$557 >> 2] = $126; //@line 7508
   $558 = $ReallocAsyncCtx4 + 252 | 0; //@line 7509
   HEAP32[$558 >> 2] = $128; //@line 7510
   $559 = $ReallocAsyncCtx4 + 256 | 0; //@line 7511
   HEAP32[$559 >> 2] = $130; //@line 7512
   $560 = $ReallocAsyncCtx4 + 260 | 0; //@line 7513
   HEAP32[$560 >> 2] = $132; //@line 7514
   $561 = $ReallocAsyncCtx4 + 264 | 0; //@line 7515
   HEAP32[$561 >> 2] = $134; //@line 7516
   $562 = $ReallocAsyncCtx4 + 268 | 0; //@line 7517
   HEAP32[$562 >> 2] = $136; //@line 7518
   sp = STACKTOP; //@line 7519
   return;
  }
  HEAP8[___async_retval >> 0] = $494 & 1; //@line 7524
  ___async_unwind = 0; //@line 7525
  HEAP32[$ReallocAsyncCtx4 >> 2] = 593; //@line 7526
  $495 = $ReallocAsyncCtx4 + 4 | 0; //@line 7527
  HEAP32[$495 >> 2] = $2; //@line 7528
  $496 = $ReallocAsyncCtx4 + 8 | 0; //@line 7529
  HEAP32[$496 >> 2] = $4; //@line 7530
  $497 = $ReallocAsyncCtx4 + 12 | 0; //@line 7531
  HEAP32[$497 >> 2] = $6; //@line 7532
  $498 = $ReallocAsyncCtx4 + 16 | 0; //@line 7533
  HEAP8[$498 >> 0] = $480; //@line 7534
  $499 = $ReallocAsyncCtx4 + 20 | 0; //@line 7535
  HEAP32[$499 >> 2] = $10; //@line 7536
  $500 = $ReallocAsyncCtx4 + 24 | 0; //@line 7537
  HEAP32[$500 >> 2] = $12; //@line 7538
  $501 = $ReallocAsyncCtx4 + 28 | 0; //@line 7539
  HEAP32[$501 >> 2] = $14; //@line 7540
  $502 = $ReallocAsyncCtx4 + 32 | 0; //@line 7541
  HEAP32[$502 >> 2] = $16; //@line 7542
  $503 = $ReallocAsyncCtx4 + 36 | 0; //@line 7543
  HEAP8[$503 >> 0] = $18; //@line 7544
  $504 = $ReallocAsyncCtx4 + 37 | 0; //@line 7545
  HEAP8[$504 >> 0] = $20; //@line 7546
  $505 = $ReallocAsyncCtx4 + 40 | 0; //@line 7547
  HEAP32[$505 >> 2] = $22; //@line 7548
  $506 = $ReallocAsyncCtx4 + 44 | 0; //@line 7549
  HEAP32[$506 >> 2] = $24; //@line 7550
  $507 = $ReallocAsyncCtx4 + 48 | 0; //@line 7551
  HEAP32[$507 >> 2] = $26; //@line 7552
  $508 = $ReallocAsyncCtx4 + 52 | 0; //@line 7553
  HEAP8[$508 >> 0] = $28; //@line 7554
  $509 = $ReallocAsyncCtx4 + 56 | 0; //@line 7555
  HEAP32[$509 >> 2] = $30; //@line 7556
  $510 = $ReallocAsyncCtx4 + 60 | 0; //@line 7557
  HEAP32[$510 >> 2] = $32; //@line 7558
  $511 = $ReallocAsyncCtx4 + 64 | 0; //@line 7559
  HEAP32[$511 >> 2] = $34; //@line 7560
  $512 = $ReallocAsyncCtx4 + 68 | 0; //@line 7561
  HEAP32[$512 >> 2] = $36; //@line 7562
  $513 = $ReallocAsyncCtx4 + 72 | 0; //@line 7563
  HEAP32[$513 >> 2] = $38; //@line 7564
  $514 = $ReallocAsyncCtx4 + 76 | 0; //@line 7565
  HEAP32[$514 >> 2] = $40; //@line 7566
  $515 = $ReallocAsyncCtx4 + 80 | 0; //@line 7567
  HEAP32[$515 >> 2] = $42; //@line 7568
  $516 = $ReallocAsyncCtx4 + 84 | 0; //@line 7569
  HEAP32[$516 >> 2] = $44; //@line 7570
  $517 = $ReallocAsyncCtx4 + 88 | 0; //@line 7571
  HEAP32[$517 >> 2] = $46; //@line 7572
  $518 = $ReallocAsyncCtx4 + 92 | 0; //@line 7573
  HEAP32[$518 >> 2] = $48; //@line 7574
  $519 = $ReallocAsyncCtx4 + 96 | 0; //@line 7575
  HEAP32[$519 >> 2] = $50; //@line 7576
  $520 = $ReallocAsyncCtx4 + 100 | 0; //@line 7577
  HEAP32[$520 >> 2] = $52; //@line 7578
  $521 = $ReallocAsyncCtx4 + 104 | 0; //@line 7579
  HEAP32[$521 >> 2] = $54; //@line 7580
  $522 = $ReallocAsyncCtx4 + 108 | 0; //@line 7581
  HEAP32[$522 >> 2] = $56; //@line 7582
  $523 = $ReallocAsyncCtx4 + 112 | 0; //@line 7583
  HEAP32[$523 >> 2] = $58; //@line 7584
  $524 = $ReallocAsyncCtx4 + 116 | 0; //@line 7585
  HEAP32[$524 >> 2] = $60; //@line 7586
  $525 = $ReallocAsyncCtx4 + 120 | 0; //@line 7587
  HEAP32[$525 >> 2] = $62; //@line 7588
  $526 = $ReallocAsyncCtx4 + 124 | 0; //@line 7589
  HEAP32[$526 >> 2] = $64; //@line 7590
  $527 = $ReallocAsyncCtx4 + 128 | 0; //@line 7591
  HEAP32[$527 >> 2] = $66; //@line 7592
  $528 = $ReallocAsyncCtx4 + 132 | 0; //@line 7593
  HEAP32[$528 >> 2] = $68; //@line 7594
  $529 = $ReallocAsyncCtx4 + 136 | 0; //@line 7595
  HEAP32[$529 >> 2] = $70; //@line 7596
  $530 = $ReallocAsyncCtx4 + 140 | 0; //@line 7597
  HEAP32[$530 >> 2] = $72; //@line 7598
  $531 = $ReallocAsyncCtx4 + 144 | 0; //@line 7599
  HEAP32[$531 >> 2] = $74; //@line 7600
  $532 = $ReallocAsyncCtx4 + 148 | 0; //@line 7601
  HEAP32[$532 >> 2] = $76; //@line 7602
  $533 = $ReallocAsyncCtx4 + 152 | 0; //@line 7603
  HEAP32[$533 >> 2] = $78; //@line 7604
  $534 = $ReallocAsyncCtx4 + 156 | 0; //@line 7605
  HEAP32[$534 >> 2] = $80; //@line 7606
  $535 = $ReallocAsyncCtx4 + 160 | 0; //@line 7607
  HEAP32[$535 >> 2] = $82; //@line 7608
  $536 = $ReallocAsyncCtx4 + 164 | 0; //@line 7609
  HEAP32[$536 >> 2] = $84; //@line 7610
  $537 = $ReallocAsyncCtx4 + 168 | 0; //@line 7611
  HEAP32[$537 >> 2] = $86; //@line 7612
  $538 = $ReallocAsyncCtx4 + 172 | 0; //@line 7613
  HEAP32[$538 >> 2] = $88; //@line 7614
  $539 = $ReallocAsyncCtx4 + 176 | 0; //@line 7615
  HEAP32[$539 >> 2] = $90; //@line 7616
  $540 = $ReallocAsyncCtx4 + 180 | 0; //@line 7617
  HEAP32[$540 >> 2] = $92; //@line 7618
  $541 = $ReallocAsyncCtx4 + 184 | 0; //@line 7619
  HEAP32[$541 >> 2] = $94; //@line 7620
  $542 = $ReallocAsyncCtx4 + 188 | 0; //@line 7621
  HEAP32[$542 >> 2] = $96; //@line 7622
  $543 = $ReallocAsyncCtx4 + 192 | 0; //@line 7623
  HEAP32[$543 >> 2] = $98; //@line 7624
  $544 = $ReallocAsyncCtx4 + 196 | 0; //@line 7625
  HEAP32[$544 >> 2] = $$096$be; //@line 7626
  $545 = $ReallocAsyncCtx4 + 200 | 0; //@line 7627
  HEAP32[$545 >> 2] = $102; //@line 7628
  $546 = $ReallocAsyncCtx4 + 204 | 0; //@line 7629
  HEAP32[$546 >> 2] = $104; //@line 7630
  $547 = $ReallocAsyncCtx4 + 208 | 0; //@line 7631
  HEAP32[$547 >> 2] = $106; //@line 7632
  $548 = $ReallocAsyncCtx4 + 212 | 0; //@line 7633
  HEAP32[$548 >> 2] = $108; //@line 7634
  $549 = $ReallocAsyncCtx4 + 216 | 0; //@line 7635
  HEAP32[$549 >> 2] = $110; //@line 7636
  $550 = $ReallocAsyncCtx4 + 220 | 0; //@line 7637
  HEAP32[$550 >> 2] = $112; //@line 7638
  $551 = $ReallocAsyncCtx4 + 224 | 0; //@line 7639
  HEAP32[$551 >> 2] = $114; //@line 7640
  $552 = $ReallocAsyncCtx4 + 228 | 0; //@line 7641
  HEAP32[$552 >> 2] = $116; //@line 7642
  $553 = $ReallocAsyncCtx4 + 232 | 0; //@line 7643
  HEAP32[$553 >> 2] = $118; //@line 7644
  $554 = $ReallocAsyncCtx4 + 236 | 0; //@line 7645
  HEAP32[$554 >> 2] = $120; //@line 7646
  $555 = $ReallocAsyncCtx4 + 240 | 0; //@line 7647
  HEAP32[$555 >> 2] = $122; //@line 7648
  $556 = $ReallocAsyncCtx4 + 244 | 0; //@line 7649
  HEAP32[$556 >> 2] = $124; //@line 7650
  $557 = $ReallocAsyncCtx4 + 248 | 0; //@line 7651
  HEAP32[$557 >> 2] = $126; //@line 7652
  $558 = $ReallocAsyncCtx4 + 252 | 0; //@line 7653
  HEAP32[$558 >> 2] = $128; //@line 7654
  $559 = $ReallocAsyncCtx4 + 256 | 0; //@line 7655
  HEAP32[$559 >> 2] = $130; //@line 7656
  $560 = $ReallocAsyncCtx4 + 260 | 0; //@line 7657
  HEAP32[$560 >> 2] = $132; //@line 7658
  $561 = $ReallocAsyncCtx4 + 264 | 0; //@line 7659
  HEAP32[$561 >> 2] = $134; //@line 7660
  $562 = $ReallocAsyncCtx4 + 268 | 0; //@line 7661
  HEAP32[$562 >> 2] = $136; //@line 7662
  sp = STACKTOP; //@line 7663
  return;
 } else if ((label | 0) == 28) {
  HEAP8[$74 >> 0] = HEAP8[$14 + ($139 & 255) >> 0] | 0; //@line 7671
  $594 = $$0$be + 5 << 24 >> 24; //@line 7684
  HEAP32[$52 >> 2] = (HEAPU8[$14 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$14 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$14 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 7692
  $604 = HEAP32[(HEAP32[$54 >> 2] | 0) + 48 >> 2] | 0; //@line 7695
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 7696
  $605 = FUNCTION_TABLE_iii[$604 & 31]($36, $82) | 0; //@line 7697
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 594; //@line 7700
   $606 = $ReallocAsyncCtx5 + 4 | 0; //@line 7701
   HEAP32[$606 >> 2] = $2; //@line 7702
   $607 = $ReallocAsyncCtx5 + 8 | 0; //@line 7703
   HEAP32[$607 >> 2] = $4; //@line 7704
   $608 = $ReallocAsyncCtx5 + 12 | 0; //@line 7705
   HEAP32[$608 >> 2] = $6; //@line 7706
   $609 = $ReallocAsyncCtx5 + 16 | 0; //@line 7707
   HEAP32[$609 >> 2] = $10; //@line 7708
   $610 = $ReallocAsyncCtx5 + 20 | 0; //@line 7709
   HEAP32[$610 >> 2] = $12; //@line 7710
   $611 = $ReallocAsyncCtx5 + 24 | 0; //@line 7711
   HEAP32[$611 >> 2] = $14; //@line 7712
   $612 = $ReallocAsyncCtx5 + 28 | 0; //@line 7713
   HEAP32[$612 >> 2] = $16; //@line 7714
   $613 = $ReallocAsyncCtx5 + 32 | 0; //@line 7715
   HEAP8[$613 >> 0] = $18; //@line 7716
   $614 = $ReallocAsyncCtx5 + 33 | 0; //@line 7717
   HEAP8[$614 >> 0] = $20; //@line 7718
   $615 = $ReallocAsyncCtx5 + 36 | 0; //@line 7719
   HEAP32[$615 >> 2] = $22; //@line 7720
   $616 = $ReallocAsyncCtx5 + 40 | 0; //@line 7721
   HEAP32[$616 >> 2] = $24; //@line 7722
   $617 = $ReallocAsyncCtx5 + 44 | 0; //@line 7723
   HEAP32[$617 >> 2] = $26; //@line 7724
   $618 = $ReallocAsyncCtx5 + 48 | 0; //@line 7725
   HEAP8[$618 >> 0] = $28; //@line 7726
   $619 = $ReallocAsyncCtx5 + 52 | 0; //@line 7727
   HEAP32[$619 >> 2] = $30; //@line 7728
   $620 = $ReallocAsyncCtx5 + 56 | 0; //@line 7729
   HEAP32[$620 >> 2] = $32; //@line 7730
   $621 = $ReallocAsyncCtx5 + 60 | 0; //@line 7731
   HEAP32[$621 >> 2] = $34; //@line 7732
   $622 = $ReallocAsyncCtx5 + 64 | 0; //@line 7733
   HEAP32[$622 >> 2] = $36; //@line 7734
   $623 = $ReallocAsyncCtx5 + 68 | 0; //@line 7735
   HEAP32[$623 >> 2] = $38; //@line 7736
   $624 = $ReallocAsyncCtx5 + 72 | 0; //@line 7737
   HEAP32[$624 >> 2] = $40; //@line 7738
   $625 = $ReallocAsyncCtx5 + 76 | 0; //@line 7739
   HEAP32[$625 >> 2] = $42; //@line 7740
   $626 = $ReallocAsyncCtx5 + 80 | 0; //@line 7741
   HEAP32[$626 >> 2] = $44; //@line 7742
   $627 = $ReallocAsyncCtx5 + 84 | 0; //@line 7743
   HEAP32[$627 >> 2] = $46; //@line 7744
   $628 = $ReallocAsyncCtx5 + 88 | 0; //@line 7745
   HEAP32[$628 >> 2] = $48; //@line 7746
   $629 = $ReallocAsyncCtx5 + 92 | 0; //@line 7747
   HEAP32[$629 >> 2] = $50; //@line 7748
   $630 = $ReallocAsyncCtx5 + 96 | 0; //@line 7749
   HEAP32[$630 >> 2] = $52; //@line 7750
   $631 = $ReallocAsyncCtx5 + 100 | 0; //@line 7751
   HEAP32[$631 >> 2] = $54; //@line 7752
   $632 = $ReallocAsyncCtx5 + 104 | 0; //@line 7753
   HEAP32[$632 >> 2] = $56; //@line 7754
   $633 = $ReallocAsyncCtx5 + 108 | 0; //@line 7755
   HEAP32[$633 >> 2] = $58; //@line 7756
   $634 = $ReallocAsyncCtx5 + 112 | 0; //@line 7757
   HEAP32[$634 >> 2] = $60; //@line 7758
   $635 = $ReallocAsyncCtx5 + 116 | 0; //@line 7759
   HEAP32[$635 >> 2] = $62; //@line 7760
   $636 = $ReallocAsyncCtx5 + 120 | 0; //@line 7761
   HEAP32[$636 >> 2] = $64; //@line 7762
   $637 = $ReallocAsyncCtx5 + 124 | 0; //@line 7763
   HEAP32[$637 >> 2] = $66; //@line 7764
   $638 = $ReallocAsyncCtx5 + 128 | 0; //@line 7765
   HEAP32[$638 >> 2] = $68; //@line 7766
   $639 = $ReallocAsyncCtx5 + 132 | 0; //@line 7767
   HEAP32[$639 >> 2] = $70; //@line 7768
   $640 = $ReallocAsyncCtx5 + 136 | 0; //@line 7769
   HEAP32[$640 >> 2] = $72; //@line 7770
   $641 = $ReallocAsyncCtx5 + 140 | 0; //@line 7771
   HEAP32[$641 >> 2] = $74; //@line 7772
   $642 = $ReallocAsyncCtx5 + 144 | 0; //@line 7773
   HEAP32[$642 >> 2] = $76; //@line 7774
   $643 = $ReallocAsyncCtx5 + 148 | 0; //@line 7775
   HEAP32[$643 >> 2] = $78; //@line 7776
   $644 = $ReallocAsyncCtx5 + 152 | 0; //@line 7777
   HEAP32[$644 >> 2] = $80; //@line 7778
   $645 = $ReallocAsyncCtx5 + 156 | 0; //@line 7779
   HEAP32[$645 >> 2] = $82; //@line 7780
   $646 = $ReallocAsyncCtx5 + 160 | 0; //@line 7781
   HEAP32[$646 >> 2] = $84; //@line 7782
   $647 = $ReallocAsyncCtx5 + 164 | 0; //@line 7783
   HEAP32[$647 >> 2] = $86; //@line 7784
   $648 = $ReallocAsyncCtx5 + 168 | 0; //@line 7785
   HEAP32[$648 >> 2] = $88; //@line 7786
   $649 = $ReallocAsyncCtx5 + 172 | 0; //@line 7787
   HEAP32[$649 >> 2] = $90; //@line 7788
   $650 = $ReallocAsyncCtx5 + 176 | 0; //@line 7789
   HEAP32[$650 >> 2] = $92; //@line 7790
   $651 = $ReallocAsyncCtx5 + 180 | 0; //@line 7791
   HEAP8[$651 >> 0] = $594; //@line 7792
   $652 = $ReallocAsyncCtx5 + 184 | 0; //@line 7793
   HEAP32[$652 >> 2] = $94; //@line 7794
   $653 = $ReallocAsyncCtx5 + 188 | 0; //@line 7795
   HEAP32[$653 >> 2] = $96; //@line 7796
   $654 = $ReallocAsyncCtx5 + 192 | 0; //@line 7797
   HEAP32[$654 >> 2] = $98; //@line 7798
   $655 = $ReallocAsyncCtx5 + 196 | 0; //@line 7799
   HEAP32[$655 >> 2] = $102; //@line 7800
   $656 = $ReallocAsyncCtx5 + 200 | 0; //@line 7801
   HEAP32[$656 >> 2] = $104; //@line 7802
   $657 = $ReallocAsyncCtx5 + 204 | 0; //@line 7803
   HEAP32[$657 >> 2] = $106; //@line 7804
   $658 = $ReallocAsyncCtx5 + 208 | 0; //@line 7805
   HEAP32[$658 >> 2] = $108; //@line 7806
   $659 = $ReallocAsyncCtx5 + 212 | 0; //@line 7807
   HEAP32[$659 >> 2] = $110; //@line 7808
   $660 = $ReallocAsyncCtx5 + 216 | 0; //@line 7809
   HEAP32[$660 >> 2] = $112; //@line 7810
   $661 = $ReallocAsyncCtx5 + 220 | 0; //@line 7811
   HEAP32[$661 >> 2] = $114; //@line 7812
   $662 = $ReallocAsyncCtx5 + 224 | 0; //@line 7813
   HEAP32[$662 >> 2] = $116; //@line 7814
   $663 = $ReallocAsyncCtx5 + 228 | 0; //@line 7815
   HEAP32[$663 >> 2] = $118; //@line 7816
   $664 = $ReallocAsyncCtx5 + 232 | 0; //@line 7817
   HEAP32[$664 >> 2] = $120; //@line 7818
   $665 = $ReallocAsyncCtx5 + 236 | 0; //@line 7819
   HEAP32[$665 >> 2] = $122; //@line 7820
   $666 = $ReallocAsyncCtx5 + 240 | 0; //@line 7821
   HEAP32[$666 >> 2] = $124; //@line 7822
   $667 = $ReallocAsyncCtx5 + 244 | 0; //@line 7823
   HEAP32[$667 >> 2] = $126; //@line 7824
   $668 = $ReallocAsyncCtx5 + 248 | 0; //@line 7825
   HEAP32[$668 >> 2] = $128; //@line 7826
   $669 = $ReallocAsyncCtx5 + 252 | 0; //@line 7827
   HEAP32[$669 >> 2] = $130; //@line 7828
   $670 = $ReallocAsyncCtx5 + 256 | 0; //@line 7829
   HEAP32[$670 >> 2] = $132; //@line 7830
   $671 = $ReallocAsyncCtx5 + 260 | 0; //@line 7831
   HEAP32[$671 >> 2] = $134; //@line 7832
   $672 = $ReallocAsyncCtx5 + 264 | 0; //@line 7833
   HEAP32[$672 >> 2] = $136; //@line 7834
   sp = STACKTOP; //@line 7835
   return;
  }
  HEAP8[___async_retval >> 0] = $605; //@line 7839
  ___async_unwind = 0; //@line 7840
  HEAP32[$ReallocAsyncCtx5 >> 2] = 594; //@line 7841
  $606 = $ReallocAsyncCtx5 + 4 | 0; //@line 7842
  HEAP32[$606 >> 2] = $2; //@line 7843
  $607 = $ReallocAsyncCtx5 + 8 | 0; //@line 7844
  HEAP32[$607 >> 2] = $4; //@line 7845
  $608 = $ReallocAsyncCtx5 + 12 | 0; //@line 7846
  HEAP32[$608 >> 2] = $6; //@line 7847
  $609 = $ReallocAsyncCtx5 + 16 | 0; //@line 7848
  HEAP32[$609 >> 2] = $10; //@line 7849
  $610 = $ReallocAsyncCtx5 + 20 | 0; //@line 7850
  HEAP32[$610 >> 2] = $12; //@line 7851
  $611 = $ReallocAsyncCtx5 + 24 | 0; //@line 7852
  HEAP32[$611 >> 2] = $14; //@line 7853
  $612 = $ReallocAsyncCtx5 + 28 | 0; //@line 7854
  HEAP32[$612 >> 2] = $16; //@line 7855
  $613 = $ReallocAsyncCtx5 + 32 | 0; //@line 7856
  HEAP8[$613 >> 0] = $18; //@line 7857
  $614 = $ReallocAsyncCtx5 + 33 | 0; //@line 7858
  HEAP8[$614 >> 0] = $20; //@line 7859
  $615 = $ReallocAsyncCtx5 + 36 | 0; //@line 7860
  HEAP32[$615 >> 2] = $22; //@line 7861
  $616 = $ReallocAsyncCtx5 + 40 | 0; //@line 7862
  HEAP32[$616 >> 2] = $24; //@line 7863
  $617 = $ReallocAsyncCtx5 + 44 | 0; //@line 7864
  HEAP32[$617 >> 2] = $26; //@line 7865
  $618 = $ReallocAsyncCtx5 + 48 | 0; //@line 7866
  HEAP8[$618 >> 0] = $28; //@line 7867
  $619 = $ReallocAsyncCtx5 + 52 | 0; //@line 7868
  HEAP32[$619 >> 2] = $30; //@line 7869
  $620 = $ReallocAsyncCtx5 + 56 | 0; //@line 7870
  HEAP32[$620 >> 2] = $32; //@line 7871
  $621 = $ReallocAsyncCtx5 + 60 | 0; //@line 7872
  HEAP32[$621 >> 2] = $34; //@line 7873
  $622 = $ReallocAsyncCtx5 + 64 | 0; //@line 7874
  HEAP32[$622 >> 2] = $36; //@line 7875
  $623 = $ReallocAsyncCtx5 + 68 | 0; //@line 7876
  HEAP32[$623 >> 2] = $38; //@line 7877
  $624 = $ReallocAsyncCtx5 + 72 | 0; //@line 7878
  HEAP32[$624 >> 2] = $40; //@line 7879
  $625 = $ReallocAsyncCtx5 + 76 | 0; //@line 7880
  HEAP32[$625 >> 2] = $42; //@line 7881
  $626 = $ReallocAsyncCtx5 + 80 | 0; //@line 7882
  HEAP32[$626 >> 2] = $44; //@line 7883
  $627 = $ReallocAsyncCtx5 + 84 | 0; //@line 7884
  HEAP32[$627 >> 2] = $46; //@line 7885
  $628 = $ReallocAsyncCtx5 + 88 | 0; //@line 7886
  HEAP32[$628 >> 2] = $48; //@line 7887
  $629 = $ReallocAsyncCtx5 + 92 | 0; //@line 7888
  HEAP32[$629 >> 2] = $50; //@line 7889
  $630 = $ReallocAsyncCtx5 + 96 | 0; //@line 7890
  HEAP32[$630 >> 2] = $52; //@line 7891
  $631 = $ReallocAsyncCtx5 + 100 | 0; //@line 7892
  HEAP32[$631 >> 2] = $54; //@line 7893
  $632 = $ReallocAsyncCtx5 + 104 | 0; //@line 7894
  HEAP32[$632 >> 2] = $56; //@line 7895
  $633 = $ReallocAsyncCtx5 + 108 | 0; //@line 7896
  HEAP32[$633 >> 2] = $58; //@line 7897
  $634 = $ReallocAsyncCtx5 + 112 | 0; //@line 7898
  HEAP32[$634 >> 2] = $60; //@line 7899
  $635 = $ReallocAsyncCtx5 + 116 | 0; //@line 7900
  HEAP32[$635 >> 2] = $62; //@line 7901
  $636 = $ReallocAsyncCtx5 + 120 | 0; //@line 7902
  HEAP32[$636 >> 2] = $64; //@line 7903
  $637 = $ReallocAsyncCtx5 + 124 | 0; //@line 7904
  HEAP32[$637 >> 2] = $66; //@line 7905
  $638 = $ReallocAsyncCtx5 + 128 | 0; //@line 7906
  HEAP32[$638 >> 2] = $68; //@line 7907
  $639 = $ReallocAsyncCtx5 + 132 | 0; //@line 7908
  HEAP32[$639 >> 2] = $70; //@line 7909
  $640 = $ReallocAsyncCtx5 + 136 | 0; //@line 7910
  HEAP32[$640 >> 2] = $72; //@line 7911
  $641 = $ReallocAsyncCtx5 + 140 | 0; //@line 7912
  HEAP32[$641 >> 2] = $74; //@line 7913
  $642 = $ReallocAsyncCtx5 + 144 | 0; //@line 7914
  HEAP32[$642 >> 2] = $76; //@line 7915
  $643 = $ReallocAsyncCtx5 + 148 | 0; //@line 7916
  HEAP32[$643 >> 2] = $78; //@line 7917
  $644 = $ReallocAsyncCtx5 + 152 | 0; //@line 7918
  HEAP32[$644 >> 2] = $80; //@line 7919
  $645 = $ReallocAsyncCtx5 + 156 | 0; //@line 7920
  HEAP32[$645 >> 2] = $82; //@line 7921
  $646 = $ReallocAsyncCtx5 + 160 | 0; //@line 7922
  HEAP32[$646 >> 2] = $84; //@line 7923
  $647 = $ReallocAsyncCtx5 + 164 | 0; //@line 7924
  HEAP32[$647 >> 2] = $86; //@line 7925
  $648 = $ReallocAsyncCtx5 + 168 | 0; //@line 7926
  HEAP32[$648 >> 2] = $88; //@line 7927
  $649 = $ReallocAsyncCtx5 + 172 | 0; //@line 7928
  HEAP32[$649 >> 2] = $90; //@line 7929
  $650 = $ReallocAsyncCtx5 + 176 | 0; //@line 7930
  HEAP32[$650 >> 2] = $92; //@line 7931
  $651 = $ReallocAsyncCtx5 + 180 | 0; //@line 7932
  HEAP8[$651 >> 0] = $594; //@line 7933
  $652 = $ReallocAsyncCtx5 + 184 | 0; //@line 7934
  HEAP32[$652 >> 2] = $94; //@line 7935
  $653 = $ReallocAsyncCtx5 + 188 | 0; //@line 7936
  HEAP32[$653 >> 2] = $96; //@line 7937
  $654 = $ReallocAsyncCtx5 + 192 | 0; //@line 7938
  HEAP32[$654 >> 2] = $98; //@line 7939
  $655 = $ReallocAsyncCtx5 + 196 | 0; //@line 7940
  HEAP32[$655 >> 2] = $102; //@line 7941
  $656 = $ReallocAsyncCtx5 + 200 | 0; //@line 7942
  HEAP32[$656 >> 2] = $104; //@line 7943
  $657 = $ReallocAsyncCtx5 + 204 | 0; //@line 7944
  HEAP32[$657 >> 2] = $106; //@line 7945
  $658 = $ReallocAsyncCtx5 + 208 | 0; //@line 7946
  HEAP32[$658 >> 2] = $108; //@line 7947
  $659 = $ReallocAsyncCtx5 + 212 | 0; //@line 7948
  HEAP32[$659 >> 2] = $110; //@line 7949
  $660 = $ReallocAsyncCtx5 + 216 | 0; //@line 7950
  HEAP32[$660 >> 2] = $112; //@line 7951
  $661 = $ReallocAsyncCtx5 + 220 | 0; //@line 7952
  HEAP32[$661 >> 2] = $114; //@line 7953
  $662 = $ReallocAsyncCtx5 + 224 | 0; //@line 7954
  HEAP32[$662 >> 2] = $116; //@line 7955
  $663 = $ReallocAsyncCtx5 + 228 | 0; //@line 7956
  HEAP32[$663 >> 2] = $118; //@line 7957
  $664 = $ReallocAsyncCtx5 + 232 | 0; //@line 7958
  HEAP32[$664 >> 2] = $120; //@line 7959
  $665 = $ReallocAsyncCtx5 + 236 | 0; //@line 7960
  HEAP32[$665 >> 2] = $122; //@line 7961
  $666 = $ReallocAsyncCtx5 + 240 | 0; //@line 7962
  HEAP32[$666 >> 2] = $124; //@line 7963
  $667 = $ReallocAsyncCtx5 + 244 | 0; //@line 7964
  HEAP32[$667 >> 2] = $126; //@line 7965
  $668 = $ReallocAsyncCtx5 + 248 | 0; //@line 7966
  HEAP32[$668 >> 2] = $128; //@line 7967
  $669 = $ReallocAsyncCtx5 + 252 | 0; //@line 7968
  HEAP32[$669 >> 2] = $130; //@line 7969
  $670 = $ReallocAsyncCtx5 + 256 | 0; //@line 7970
  HEAP32[$670 >> 2] = $132; //@line 7971
  $671 = $ReallocAsyncCtx5 + 260 | 0; //@line 7972
  HEAP32[$671 >> 2] = $134; //@line 7973
  $672 = $ReallocAsyncCtx5 + 264 | 0; //@line 7974
  HEAP32[$672 >> 2] = $136; //@line 7975
  sp = STACKTOP; //@line 7976
  return;
 } else if ((label | 0) == 32) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 7981
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_229($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i98 = 0, $$096$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $234 = 0, $239 = 0, $24 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $347 = 0, $348 = 0, $36 = 0, $38 = 0, $385 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $461 = 0, $465 = 0, $469 = 0, $472 = 0, $478 = 0, $48 = 0, $481 = 0, $482 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $578 = 0, $58 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $659 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8022
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8024
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8026
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8028
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8030
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8032
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8034
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8036
 $16 = HEAP8[$0 + 32 >> 0] | 0; //@line 8038
 $18 = HEAP8[$0 + 33 >> 0] | 0; //@line 8040
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 8042
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 8044
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 8046
 $26 = HEAP8[$0 + 48 >> 0] | 0; //@line 8048
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 8050
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 8052
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 8054
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 8056
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 8058
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 8060
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 8062
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 8064
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 8066
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 8068
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 8070
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 8072
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 8074
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 8076
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 8078
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 8080
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 8082
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 8084
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 8086
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 8088
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 8090
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 8092
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 8094
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 8096
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 8098
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 8100
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 8102
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 8104
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 8106
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 8108
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 8110
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 8112
 $92 = HEAP8[$0 + 180 >> 0] | 0; //@line 8114
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 8116
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 8118
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 8120
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 8122
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 8124
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 8126
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 8128
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 8130
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 8132
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 8134
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 8136
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 8138
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 8140
 $120 = HEAP32[$0 + 236 >> 2] | 0; //@line 8142
 $122 = HEAP32[$0 + 240 >> 2] | 0; //@line 8144
 $124 = HEAP32[$0 + 244 >> 2] | 0; //@line 8146
 $126 = HEAP32[$0 + 248 >> 2] | 0; //@line 8148
 $128 = HEAP32[$0 + 252 >> 2] | 0; //@line 8150
 $130 = HEAP32[$0 + 256 >> 2] | 0; //@line 8152
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 8154
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 8156
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 8158
 $659 = HEAP8[$48 >> 0] | 0; //@line 8160
 if (($659 & 255) < (-128 - (HEAP8[$42 >> 0] | 0) & 255)) {
  HEAP8[($659 & 255) + ($8 + 4) >> 0] = 10; //@line 8167
  HEAP8[$48 >> 0] = $659 + 2 << 24 >> 24; //@line 8169
  HEAP8[($659 + 1 & 255) + ($8 + 4) >> 0] = $AsyncRetVal; //@line 8172
  HEAP8[$10 >> 0] = 1; //@line 8173
  HEAP8[$100 >> 0] = 1; //@line 8174
  $$0$i98 = 0; //@line 8175
 } else {
  $$0$i98 = -1e3; //@line 8177
 }
 $$0$be = $92; //@line 8179
 $$096$be = $$0$i98; //@line 8179
 L5 : while (1) {
  if (($$0$be & 255) >= ($18 & 255)) {
   label = 31; //@line 8183
   break;
  }
  $137 = $$0$be + 1 << 24 >> 24; //@line 8187
  switch (HEAP8[$12 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 8192
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 8197
    break L5;
    break;
   }
  case 7:
   {
    label = 14; //@line 8202
    break L5;
    break;
   }
  case 9:
   {
    label = 19; //@line 8207
    break L5;
    break;
   }
  case 10:
   {
    label = 24; //@line 8212
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$24 >> 2] = 0; //@line 8217
    HEAP8[$44 >> 0] = HEAP8[$12 + ($137 & 255) >> 0] | 0; //@line 8222
    HEAP8[$74 >> 0] = HEAP8[$12 + ($$0$be + 2 & 255) >> 0] | 0; //@line 8227
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 8228
    continue L5;
    break;
   }
  case 4:
   {
    $231 = $$0$be + 2 << 24 >> 24; //@line 8233
    $234 = HEAP8[$12 + ($137 & 255) >> 0] | 0; //@line 8236
    HEAP8[$108 >> 0] = $234; //@line 8237
    HEAP16[$76 >> 1] = 1 << ($234 & 255); //@line 8241
    $239 = HEAP8[$48 >> 0] | 0; //@line 8243
    if (($239 & 255) >= (-128 - (HEAP8[$42 >> 0] | 0) & 255)) {
     $$0$be = $231; //@line 8247
     $$096$be = -1e3; //@line 8247
     continue L5;
    }
    HEAP8[$48 >> 0] = $239 + 1 << 24 >> 24; //@line 8253
    HEAP8[($239 & 255) + ($8 + 4) >> 0] = 4; //@line 8254
    HEAP8[$100 >> 0] = 1; //@line 8255
    $$0$be = $231; //@line 8256
    $$096$be = 0; //@line 8256
    continue L5;
    break;
   }
  case 6:
   {
    $347 = HEAP8[$48 >> 0] | 0; //@line 8262
    $348 = $347 & 255; //@line 8263
    if (((-128 - (HEAP8[$42 >> 0] | 0) & 255) + -2 | 0) <= ($348 | 0)) {
     $$0$be = $137; //@line 8269
     $$096$be = -1e3; //@line 8269
     continue L5;
    }
    HEAP8[$8 + 4 + $348 >> 0] = 6; //@line 8274
    HEAP8[($347 + 1 & 255) + ($8 + 4) >> 0] = -1; //@line 8278
    HEAP8[$48 >> 0] = $347 + 3 << 24 >> 24; //@line 8280
    HEAP8[($347 + 2 & 255) + ($8 + 4) >> 0] = $26; //@line 8283
    HEAP8[$100 >> 0] = 1; //@line 8284
    $$0$be = $137; //@line 8285
    $$096$be = 0; //@line 8285
    continue L5;
    break;
   }
  case 8:
   {
    $461 = $$0$be + 2 << 24 >> 24; //@line 8290
    $465 = HEAP8[$12 + ($137 & 255) >> 0] & 15; //@line 8294
    $469 = ($465 + ($465 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 8299
    HEAP32[$130 >> 2] = $469; //@line 8300
    HEAP32[$126 >> 2] = $469 + 1e3; //@line 8302
    $472 = HEAP8[$48 >> 0] | 0; //@line 8304
    if (($472 & 255) >= (-128 - (HEAP8[$42 >> 0] | 0) & 255)) {
     $$0$be = $461; //@line 8308
     $$096$be = -1e3; //@line 8308
     continue L5;
    }
    HEAP8[$48 >> 0] = $472 + 1 << 24 >> 24; //@line 8314
    HEAP8[($472 & 255) + ($8 + 4) >> 0] = 8; //@line 8315
    HEAP8[$10 >> 0] = 1; //@line 8316
    HEAP8[$100 >> 0] = 1; //@line 8317
    $$0$be = $461; //@line 8318
    $$096$be = 0; //@line 8318
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $137; //@line 8323
    $$096$be = -1013; //@line 8323
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$36 >> 0] = 0; //@line 8329
  HEAP8[$88 >> 0] = 0; //@line 8330
  HEAP8[$98 >> 0] = 0; //@line 8331
  HEAP8[$106 >> 0] = 0; //@line 8332
  $148 = $137 & 255; //@line 8333
  $149 = $148 + -1 | 0; //@line 8334
  HEAP32[$60 >> 2] = $12 + $149; //@line 8336
  HEAP8[$102 >> 0] = $22 - $149; //@line 8339
  HEAP8[$90 >> 0] = HEAP8[$78 >> 0] | 0; //@line 8341
  HEAP8[$134 >> 0] = HEAP8[$122 >> 0] | 0; //@line 8343
  HEAP8[$120 >> 0] = HEAP8[$112 >> 0] | 0; //@line 8345
  HEAP8[$2 >> 0] = HEAP8[$28 >> 0] | 0; //@line 8347
  HEAP8[$62 >> 0] = HEAP8[$14 >> 0] | 0; //@line 8349
  $160 = HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] | 0; //@line 8352
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 8353
  $161 = FUNCTION_TABLE_iiiiiii[$160 & 3]($34, $30, $36, $88, $98, $106) | 0; //@line 8354
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 8357
   $162 = $ReallocAsyncCtx + 4 | 0; //@line 8358
   HEAP32[$162 >> 2] = $2; //@line 8359
   $163 = $ReallocAsyncCtx + 8 | 0; //@line 8360
   HEAP32[$163 >> 2] = $4; //@line 8361
   $164 = $ReallocAsyncCtx + 12 | 0; //@line 8362
   HEAP32[$164 >> 2] = $6; //@line 8363
   $165 = $ReallocAsyncCtx + 16 | 0; //@line 8364
   HEAP32[$165 >> 2] = $8; //@line 8365
   $166 = $ReallocAsyncCtx + 20 | 0; //@line 8366
   HEAP32[$166 >> 2] = $22; //@line 8367
   $167 = $ReallocAsyncCtx + 24 | 0; //@line 8368
   HEAP32[$167 >> 2] = $12; //@line 8369
   $168 = $ReallocAsyncCtx + 28 | 0; //@line 8370
   HEAP32[$168 >> 2] = $14; //@line 8371
   $169 = $ReallocAsyncCtx + 32 | 0; //@line 8372
   HEAP32[$169 >> 2] = $10; //@line 8373
   $170 = $ReallocAsyncCtx + 36 | 0; //@line 8374
   HEAP8[$170 >> 0] = $18; //@line 8375
   $171 = $ReallocAsyncCtx + 40 | 0; //@line 8376
   HEAP32[$171 >> 2] = $20; //@line 8377
   $172 = $ReallocAsyncCtx + 44 | 0; //@line 8378
   HEAP32[$172 >> 2] = $24; //@line 8379
   $173 = $ReallocAsyncCtx + 48 | 0; //@line 8380
   HEAP8[$173 >> 0] = $16; //@line 8381
   $174 = $ReallocAsyncCtx + 49 | 0; //@line 8382
   HEAP8[$174 >> 0] = $26; //@line 8383
   $175 = $ReallocAsyncCtx + 52 | 0; //@line 8384
   HEAP32[$175 >> 2] = $28; //@line 8385
   $176 = $ReallocAsyncCtx + 56 | 0; //@line 8386
   HEAP32[$176 >> 2] = $30; //@line 8387
   $177 = $ReallocAsyncCtx + 60 | 0; //@line 8388
   HEAP32[$177 >> 2] = $32; //@line 8389
   $178 = $ReallocAsyncCtx + 64 | 0; //@line 8390
   HEAP32[$178 >> 2] = $34; //@line 8391
   $179 = $ReallocAsyncCtx + 68 | 0; //@line 8392
   HEAP32[$179 >> 2] = $36; //@line 8393
   $180 = $ReallocAsyncCtx + 72 | 0; //@line 8394
   HEAP32[$180 >> 2] = $38; //@line 8395
   $181 = $ReallocAsyncCtx + 76 | 0; //@line 8396
   HEAP32[$181 >> 2] = $40; //@line 8397
   $182 = $ReallocAsyncCtx + 80 | 0; //@line 8398
   HEAP32[$182 >> 2] = $42; //@line 8399
   $183 = $ReallocAsyncCtx + 84 | 0; //@line 8400
   HEAP32[$183 >> 2] = $44; //@line 8401
   $184 = $ReallocAsyncCtx + 88 | 0; //@line 8402
   HEAP32[$184 >> 2] = $46; //@line 8403
   $185 = $ReallocAsyncCtx + 92 | 0; //@line 8404
   HEAP32[$185 >> 2] = $48; //@line 8405
   $186 = $ReallocAsyncCtx + 96 | 0; //@line 8406
   HEAP32[$186 >> 2] = $50; //@line 8407
   $187 = $ReallocAsyncCtx + 100 | 0; //@line 8408
   HEAP32[$187 >> 2] = $52; //@line 8409
   $188 = $ReallocAsyncCtx + 104 | 0; //@line 8410
   HEAP32[$188 >> 2] = $54; //@line 8411
   $189 = $ReallocAsyncCtx + 108 | 0; //@line 8412
   HEAP32[$189 >> 2] = $56; //@line 8413
   $190 = $ReallocAsyncCtx + 112 | 0; //@line 8414
   HEAP32[$190 >> 2] = $60; //@line 8415
   $191 = $ReallocAsyncCtx + 116 | 0; //@line 8416
   HEAP32[$191 >> 2] = $62; //@line 8417
   $192 = $ReallocAsyncCtx + 120 | 0; //@line 8418
   HEAP32[$192 >> 2] = $58; //@line 8419
   $193 = $ReallocAsyncCtx + 124 | 0; //@line 8420
   HEAP32[$193 >> 2] = $64; //@line 8421
   $194 = $ReallocAsyncCtx + 128 | 0; //@line 8422
   HEAP32[$194 >> 2] = $68; //@line 8423
   $195 = $ReallocAsyncCtx + 132 | 0; //@line 8424
   HEAP32[$195 >> 2] = $66; //@line 8425
   $196 = $ReallocAsyncCtx + 136 | 0; //@line 8426
   HEAP32[$196 >> 2] = $70; //@line 8427
   $197 = $ReallocAsyncCtx + 140 | 0; //@line 8428
   HEAP32[$197 >> 2] = $72; //@line 8429
   $198 = $ReallocAsyncCtx + 144 | 0; //@line 8430
   HEAP32[$198 >> 2] = $74; //@line 8431
   $199 = $ReallocAsyncCtx + 148 | 0; //@line 8432
   HEAP32[$199 >> 2] = $76; //@line 8433
   $200 = $ReallocAsyncCtx + 152 | 0; //@line 8434
   HEAP32[$200 >> 2] = $78; //@line 8435
   $201 = $ReallocAsyncCtx + 156 | 0; //@line 8436
   HEAP32[$201 >> 2] = $80; //@line 8437
   $202 = $ReallocAsyncCtx + 160 | 0; //@line 8438
   HEAP32[$202 >> 2] = $82; //@line 8439
   $203 = $ReallocAsyncCtx + 164 | 0; //@line 8440
   HEAP32[$203 >> 2] = $84; //@line 8441
   $204 = $ReallocAsyncCtx + 168 | 0; //@line 8442
   HEAP32[$204 >> 2] = $88; //@line 8443
   $205 = $ReallocAsyncCtx + 172 | 0; //@line 8444
   HEAP32[$205 >> 2] = $90; //@line 8445
   $206 = $ReallocAsyncCtx + 176 | 0; //@line 8446
   HEAP32[$206 >> 2] = $86; //@line 8447
   $207 = $ReallocAsyncCtx + 180 | 0; //@line 8448
   HEAP32[$207 >> 2] = $94; //@line 8449
   $208 = $ReallocAsyncCtx + 184 | 0; //@line 8450
   HEAP32[$208 >> 2] = $96; //@line 8451
   $209 = $ReallocAsyncCtx + 188 | 0; //@line 8452
   HEAP32[$209 >> 2] = $98; //@line 8453
   $210 = $ReallocAsyncCtx + 192 | 0; //@line 8454
   HEAP32[$210 >> 2] = $$096$be; //@line 8455
   $211 = $ReallocAsyncCtx + 196 | 0; //@line 8456
   HEAP32[$211 >> 2] = $100; //@line 8457
   $212 = $ReallocAsyncCtx + 200 | 0; //@line 8458
   HEAP32[$212 >> 2] = $102; //@line 8459
   $213 = $ReallocAsyncCtx + 204 | 0; //@line 8460
   HEAP32[$213 >> 2] = $104; //@line 8461
   $214 = $ReallocAsyncCtx + 208 | 0; //@line 8462
   HEAP32[$214 >> 2] = $148; //@line 8463
   $215 = $ReallocAsyncCtx + 212 | 0; //@line 8464
   HEAP32[$215 >> 2] = $106; //@line 8465
   $216 = $ReallocAsyncCtx + 216 | 0; //@line 8466
   HEAP32[$216 >> 2] = $108; //@line 8467
   $217 = $ReallocAsyncCtx + 220 | 0; //@line 8468
   HEAP32[$217 >> 2] = $110; //@line 8469
   $218 = $ReallocAsyncCtx + 224 | 0; //@line 8470
   HEAP32[$218 >> 2] = $112; //@line 8471
   $219 = $ReallocAsyncCtx + 228 | 0; //@line 8472
   HEAP32[$219 >> 2] = $114; //@line 8473
   $220 = $ReallocAsyncCtx + 232 | 0; //@line 8474
   HEAP32[$220 >> 2] = $116; //@line 8475
   $221 = $ReallocAsyncCtx + 236 | 0; //@line 8476
   HEAP32[$221 >> 2] = $118; //@line 8477
   $222 = $ReallocAsyncCtx + 240 | 0; //@line 8478
   HEAP32[$222 >> 2] = $120; //@line 8479
   $223 = $ReallocAsyncCtx + 244 | 0; //@line 8480
   HEAP32[$223 >> 2] = $122; //@line 8481
   $224 = $ReallocAsyncCtx + 248 | 0; //@line 8482
   HEAP32[$224 >> 2] = $124; //@line 8483
   $225 = $ReallocAsyncCtx + 252 | 0; //@line 8484
   HEAP32[$225 >> 2] = $126; //@line 8485
   $226 = $ReallocAsyncCtx + 256 | 0; //@line 8486
   HEAP32[$226 >> 2] = $128; //@line 8487
   $227 = $ReallocAsyncCtx + 260 | 0; //@line 8488
   HEAP32[$227 >> 2] = $130; //@line 8489
   $228 = $ReallocAsyncCtx + 264 | 0; //@line 8490
   HEAP32[$228 >> 2] = $132; //@line 8491
   $229 = $ReallocAsyncCtx + 268 | 0; //@line 8492
   HEAP32[$229 >> 2] = $134; //@line 8493
   sp = STACKTOP; //@line 8494
   return;
  }
  HEAP8[___async_retval >> 0] = $161; //@line 8498
  ___async_unwind = 0; //@line 8499
  HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 8500
  $162 = $ReallocAsyncCtx + 4 | 0; //@line 8501
  HEAP32[$162 >> 2] = $2; //@line 8502
  $163 = $ReallocAsyncCtx + 8 | 0; //@line 8503
  HEAP32[$163 >> 2] = $4; //@line 8504
  $164 = $ReallocAsyncCtx + 12 | 0; //@line 8505
  HEAP32[$164 >> 2] = $6; //@line 8506
  $165 = $ReallocAsyncCtx + 16 | 0; //@line 8507
  HEAP32[$165 >> 2] = $8; //@line 8508
  $166 = $ReallocAsyncCtx + 20 | 0; //@line 8509
  HEAP32[$166 >> 2] = $22; //@line 8510
  $167 = $ReallocAsyncCtx + 24 | 0; //@line 8511
  HEAP32[$167 >> 2] = $12; //@line 8512
  $168 = $ReallocAsyncCtx + 28 | 0; //@line 8513
  HEAP32[$168 >> 2] = $14; //@line 8514
  $169 = $ReallocAsyncCtx + 32 | 0; //@line 8515
  HEAP32[$169 >> 2] = $10; //@line 8516
  $170 = $ReallocAsyncCtx + 36 | 0; //@line 8517
  HEAP8[$170 >> 0] = $18; //@line 8518
  $171 = $ReallocAsyncCtx + 40 | 0; //@line 8519
  HEAP32[$171 >> 2] = $20; //@line 8520
  $172 = $ReallocAsyncCtx + 44 | 0; //@line 8521
  HEAP32[$172 >> 2] = $24; //@line 8522
  $173 = $ReallocAsyncCtx + 48 | 0; //@line 8523
  HEAP8[$173 >> 0] = $16; //@line 8524
  $174 = $ReallocAsyncCtx + 49 | 0; //@line 8525
  HEAP8[$174 >> 0] = $26; //@line 8526
  $175 = $ReallocAsyncCtx + 52 | 0; //@line 8527
  HEAP32[$175 >> 2] = $28; //@line 8528
  $176 = $ReallocAsyncCtx + 56 | 0; //@line 8529
  HEAP32[$176 >> 2] = $30; //@line 8530
  $177 = $ReallocAsyncCtx + 60 | 0; //@line 8531
  HEAP32[$177 >> 2] = $32; //@line 8532
  $178 = $ReallocAsyncCtx + 64 | 0; //@line 8533
  HEAP32[$178 >> 2] = $34; //@line 8534
  $179 = $ReallocAsyncCtx + 68 | 0; //@line 8535
  HEAP32[$179 >> 2] = $36; //@line 8536
  $180 = $ReallocAsyncCtx + 72 | 0; //@line 8537
  HEAP32[$180 >> 2] = $38; //@line 8538
  $181 = $ReallocAsyncCtx + 76 | 0; //@line 8539
  HEAP32[$181 >> 2] = $40; //@line 8540
  $182 = $ReallocAsyncCtx + 80 | 0; //@line 8541
  HEAP32[$182 >> 2] = $42; //@line 8542
  $183 = $ReallocAsyncCtx + 84 | 0; //@line 8543
  HEAP32[$183 >> 2] = $44; //@line 8544
  $184 = $ReallocAsyncCtx + 88 | 0; //@line 8545
  HEAP32[$184 >> 2] = $46; //@line 8546
  $185 = $ReallocAsyncCtx + 92 | 0; //@line 8547
  HEAP32[$185 >> 2] = $48; //@line 8548
  $186 = $ReallocAsyncCtx + 96 | 0; //@line 8549
  HEAP32[$186 >> 2] = $50; //@line 8550
  $187 = $ReallocAsyncCtx + 100 | 0; //@line 8551
  HEAP32[$187 >> 2] = $52; //@line 8552
  $188 = $ReallocAsyncCtx + 104 | 0; //@line 8553
  HEAP32[$188 >> 2] = $54; //@line 8554
  $189 = $ReallocAsyncCtx + 108 | 0; //@line 8555
  HEAP32[$189 >> 2] = $56; //@line 8556
  $190 = $ReallocAsyncCtx + 112 | 0; //@line 8557
  HEAP32[$190 >> 2] = $60; //@line 8558
  $191 = $ReallocAsyncCtx + 116 | 0; //@line 8559
  HEAP32[$191 >> 2] = $62; //@line 8560
  $192 = $ReallocAsyncCtx + 120 | 0; //@line 8561
  HEAP32[$192 >> 2] = $58; //@line 8562
  $193 = $ReallocAsyncCtx + 124 | 0; //@line 8563
  HEAP32[$193 >> 2] = $64; //@line 8564
  $194 = $ReallocAsyncCtx + 128 | 0; //@line 8565
  HEAP32[$194 >> 2] = $68; //@line 8566
  $195 = $ReallocAsyncCtx + 132 | 0; //@line 8567
  HEAP32[$195 >> 2] = $66; //@line 8568
  $196 = $ReallocAsyncCtx + 136 | 0; //@line 8569
  HEAP32[$196 >> 2] = $70; //@line 8570
  $197 = $ReallocAsyncCtx + 140 | 0; //@line 8571
  HEAP32[$197 >> 2] = $72; //@line 8572
  $198 = $ReallocAsyncCtx + 144 | 0; //@line 8573
  HEAP32[$198 >> 2] = $74; //@line 8574
  $199 = $ReallocAsyncCtx + 148 | 0; //@line 8575
  HEAP32[$199 >> 2] = $76; //@line 8576
  $200 = $ReallocAsyncCtx + 152 | 0; //@line 8577
  HEAP32[$200 >> 2] = $78; //@line 8578
  $201 = $ReallocAsyncCtx + 156 | 0; //@line 8579
  HEAP32[$201 >> 2] = $80; //@line 8580
  $202 = $ReallocAsyncCtx + 160 | 0; //@line 8581
  HEAP32[$202 >> 2] = $82; //@line 8582
  $203 = $ReallocAsyncCtx + 164 | 0; //@line 8583
  HEAP32[$203 >> 2] = $84; //@line 8584
  $204 = $ReallocAsyncCtx + 168 | 0; //@line 8585
  HEAP32[$204 >> 2] = $88; //@line 8586
  $205 = $ReallocAsyncCtx + 172 | 0; //@line 8587
  HEAP32[$205 >> 2] = $90; //@line 8588
  $206 = $ReallocAsyncCtx + 176 | 0; //@line 8589
  HEAP32[$206 >> 2] = $86; //@line 8590
  $207 = $ReallocAsyncCtx + 180 | 0; //@line 8591
  HEAP32[$207 >> 2] = $94; //@line 8592
  $208 = $ReallocAsyncCtx + 184 | 0; //@line 8593
  HEAP32[$208 >> 2] = $96; //@line 8594
  $209 = $ReallocAsyncCtx + 188 | 0; //@line 8595
  HEAP32[$209 >> 2] = $98; //@line 8596
  $210 = $ReallocAsyncCtx + 192 | 0; //@line 8597
  HEAP32[$210 >> 2] = $$096$be; //@line 8598
  $211 = $ReallocAsyncCtx + 196 | 0; //@line 8599
  HEAP32[$211 >> 2] = $100; //@line 8600
  $212 = $ReallocAsyncCtx + 200 | 0; //@line 8601
  HEAP32[$212 >> 2] = $102; //@line 8602
  $213 = $ReallocAsyncCtx + 204 | 0; //@line 8603
  HEAP32[$213 >> 2] = $104; //@line 8604
  $214 = $ReallocAsyncCtx + 208 | 0; //@line 8605
  HEAP32[$214 >> 2] = $148; //@line 8606
  $215 = $ReallocAsyncCtx + 212 | 0; //@line 8607
  HEAP32[$215 >> 2] = $106; //@line 8608
  $216 = $ReallocAsyncCtx + 216 | 0; //@line 8609
  HEAP32[$216 >> 2] = $108; //@line 8610
  $217 = $ReallocAsyncCtx + 220 | 0; //@line 8611
  HEAP32[$217 >> 2] = $110; //@line 8612
  $218 = $ReallocAsyncCtx + 224 | 0; //@line 8613
  HEAP32[$218 >> 2] = $112; //@line 8614
  $219 = $ReallocAsyncCtx + 228 | 0; //@line 8615
  HEAP32[$219 >> 2] = $114; //@line 8616
  $220 = $ReallocAsyncCtx + 232 | 0; //@line 8617
  HEAP32[$220 >> 2] = $116; //@line 8618
  $221 = $ReallocAsyncCtx + 236 | 0; //@line 8619
  HEAP32[$221 >> 2] = $118; //@line 8620
  $222 = $ReallocAsyncCtx + 240 | 0; //@line 8621
  HEAP32[$222 >> 2] = $120; //@line 8622
  $223 = $ReallocAsyncCtx + 244 | 0; //@line 8623
  HEAP32[$223 >> 2] = $122; //@line 8624
  $224 = $ReallocAsyncCtx + 248 | 0; //@line 8625
  HEAP32[$224 >> 2] = $124; //@line 8626
  $225 = $ReallocAsyncCtx + 252 | 0; //@line 8627
  HEAP32[$225 >> 2] = $126; //@line 8628
  $226 = $ReallocAsyncCtx + 256 | 0; //@line 8629
  HEAP32[$226 >> 2] = $128; //@line 8630
  $227 = $ReallocAsyncCtx + 260 | 0; //@line 8631
  HEAP32[$227 >> 2] = $130; //@line 8632
  $228 = $ReallocAsyncCtx + 264 | 0; //@line 8633
  HEAP32[$228 >> 2] = $132; //@line 8634
  $229 = $ReallocAsyncCtx + 268 | 0; //@line 8635
  HEAP32[$229 >> 2] = $134; //@line 8636
  sp = STACKTOP; //@line 8637
  return;
 } else if ((label | 0) == 9) {
  $247 = HEAP8[$12 + ($137 & 255) >> 0] | 0; //@line 8643
  HEAP8[$124 >> 0] = ($247 & 255) >>> 4 & 7; //@line 8648
  HEAP8[$86 >> 0] = $247 & 15; //@line 8650
  $266 = $$0$be + 5 << 24 >> 24; //@line 8664
  HEAP32[$132 >> 2] = (HEAPU8[$12 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$12 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$12 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 8672
  $276 = HEAP32[(HEAP32[$110 >> 2] | 0) + 40 >> 2] | 0; //@line 8675
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 8676
  $277 = FUNCTION_TABLE_iii[$276 & 31]($34, $46) | 0; //@line 8677
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 591; //@line 8680
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 8681
   HEAP32[$278 >> 2] = $2; //@line 8682
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 8683
   HEAP32[$279 >> 2] = $4; //@line 8684
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 8685
   HEAP32[$280 >> 2] = $6; //@line 8686
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 8687
   HEAP32[$281 >> 2] = $8; //@line 8688
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 8689
   HEAP32[$282 >> 2] = $10; //@line 8690
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 8691
   HEAP32[$283 >> 2] = $12; //@line 8692
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 8693
   HEAP32[$284 >> 2] = $14; //@line 8694
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 8695
   HEAP8[$285 >> 0] = $16; //@line 8696
   $286 = $ReallocAsyncCtx2 + 33 | 0; //@line 8697
   HEAP8[$286 >> 0] = $18; //@line 8698
   $287 = $ReallocAsyncCtx2 + 36 | 0; //@line 8699
   HEAP32[$287 >> 2] = $20; //@line 8700
   $288 = $ReallocAsyncCtx2 + 40 | 0; //@line 8701
   HEAP32[$288 >> 2] = $22; //@line 8702
   $289 = $ReallocAsyncCtx2 + 44 | 0; //@line 8703
   HEAP32[$289 >> 2] = $24; //@line 8704
   $290 = $ReallocAsyncCtx2 + 48 | 0; //@line 8705
   HEAP8[$290 >> 0] = $26; //@line 8706
   $291 = $ReallocAsyncCtx2 + 52 | 0; //@line 8707
   HEAP32[$291 >> 2] = $28; //@line 8708
   $292 = $ReallocAsyncCtx2 + 56 | 0; //@line 8709
   HEAP32[$292 >> 2] = $30; //@line 8710
   $293 = $ReallocAsyncCtx2 + 60 | 0; //@line 8711
   HEAP32[$293 >> 2] = $32; //@line 8712
   $294 = $ReallocAsyncCtx2 + 64 | 0; //@line 8713
   HEAP32[$294 >> 2] = $34; //@line 8714
   $295 = $ReallocAsyncCtx2 + 68 | 0; //@line 8715
   HEAP8[$295 >> 0] = $266; //@line 8716
   $296 = $ReallocAsyncCtx2 + 72 | 0; //@line 8717
   HEAP32[$296 >> 2] = $36; //@line 8718
   $297 = $ReallocAsyncCtx2 + 76 | 0; //@line 8719
   HEAP32[$297 >> 2] = $38; //@line 8720
   $298 = $ReallocAsyncCtx2 + 80 | 0; //@line 8721
   HEAP32[$298 >> 2] = $40; //@line 8722
   $299 = $ReallocAsyncCtx2 + 84 | 0; //@line 8723
   HEAP32[$299 >> 2] = $42; //@line 8724
   $300 = $ReallocAsyncCtx2 + 88 | 0; //@line 8725
   HEAP32[$300 >> 2] = $44; //@line 8726
   $301 = $ReallocAsyncCtx2 + 92 | 0; //@line 8727
   HEAP32[$301 >> 2] = $46; //@line 8728
   $302 = $ReallocAsyncCtx2 + 96 | 0; //@line 8729
   HEAP32[$302 >> 2] = $48; //@line 8730
   $303 = $ReallocAsyncCtx2 + 100 | 0; //@line 8731
   HEAP32[$303 >> 2] = $50; //@line 8732
   $304 = $ReallocAsyncCtx2 + 104 | 0; //@line 8733
   HEAP32[$304 >> 2] = $52; //@line 8734
   $305 = $ReallocAsyncCtx2 + 108 | 0; //@line 8735
   HEAP32[$305 >> 2] = $54; //@line 8736
   $306 = $ReallocAsyncCtx2 + 112 | 0; //@line 8737
   HEAP32[$306 >> 2] = $56; //@line 8738
   $307 = $ReallocAsyncCtx2 + 116 | 0; //@line 8739
   HEAP32[$307 >> 2] = $58; //@line 8740
   $308 = $ReallocAsyncCtx2 + 120 | 0; //@line 8741
   HEAP32[$308 >> 2] = $60; //@line 8742
   $309 = $ReallocAsyncCtx2 + 124 | 0; //@line 8743
   HEAP32[$309 >> 2] = $62; //@line 8744
   $310 = $ReallocAsyncCtx2 + 128 | 0; //@line 8745
   HEAP32[$310 >> 2] = $64; //@line 8746
   $311 = $ReallocAsyncCtx2 + 132 | 0; //@line 8747
   HEAP32[$311 >> 2] = $66; //@line 8748
   $312 = $ReallocAsyncCtx2 + 136 | 0; //@line 8749
   HEAP32[$312 >> 2] = $68; //@line 8750
   $313 = $ReallocAsyncCtx2 + 140 | 0; //@line 8751
   HEAP32[$313 >> 2] = $70; //@line 8752
   $314 = $ReallocAsyncCtx2 + 144 | 0; //@line 8753
   HEAP32[$314 >> 2] = $72; //@line 8754
   $315 = $ReallocAsyncCtx2 + 148 | 0; //@line 8755
   HEAP32[$315 >> 2] = $74; //@line 8756
   $316 = $ReallocAsyncCtx2 + 152 | 0; //@line 8757
   HEAP32[$316 >> 2] = $76; //@line 8758
   $317 = $ReallocAsyncCtx2 + 156 | 0; //@line 8759
   HEAP32[$317 >> 2] = $78; //@line 8760
   $318 = $ReallocAsyncCtx2 + 160 | 0; //@line 8761
   HEAP32[$318 >> 2] = $80; //@line 8762
   $319 = $ReallocAsyncCtx2 + 164 | 0; //@line 8763
   HEAP32[$319 >> 2] = $82; //@line 8764
   $320 = $ReallocAsyncCtx2 + 168 | 0; //@line 8765
   HEAP32[$320 >> 2] = $84; //@line 8766
   $321 = $ReallocAsyncCtx2 + 172 | 0; //@line 8767
   HEAP32[$321 >> 2] = $86; //@line 8768
   $322 = $ReallocAsyncCtx2 + 176 | 0; //@line 8769
   HEAP32[$322 >> 2] = $88; //@line 8770
   $323 = $ReallocAsyncCtx2 + 180 | 0; //@line 8771
   HEAP32[$323 >> 2] = $90; //@line 8772
   $324 = $ReallocAsyncCtx2 + 184 | 0; //@line 8773
   HEAP32[$324 >> 2] = $94; //@line 8774
   $325 = $ReallocAsyncCtx2 + 188 | 0; //@line 8775
   HEAP32[$325 >> 2] = $96; //@line 8776
   $326 = $ReallocAsyncCtx2 + 192 | 0; //@line 8777
   HEAP32[$326 >> 2] = $98; //@line 8778
   $327 = $ReallocAsyncCtx2 + 196 | 0; //@line 8779
   HEAP32[$327 >> 2] = $100; //@line 8780
   $328 = $ReallocAsyncCtx2 + 200 | 0; //@line 8781
   HEAP32[$328 >> 2] = $102; //@line 8782
   $329 = $ReallocAsyncCtx2 + 204 | 0; //@line 8783
   HEAP32[$329 >> 2] = $104; //@line 8784
   $330 = $ReallocAsyncCtx2 + 208 | 0; //@line 8785
   HEAP32[$330 >> 2] = $106; //@line 8786
   $331 = $ReallocAsyncCtx2 + 212 | 0; //@line 8787
   HEAP32[$331 >> 2] = $108; //@line 8788
   $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 8789
   HEAP32[$332 >> 2] = $110; //@line 8790
   $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 8791
   HEAP32[$333 >> 2] = $112; //@line 8792
   $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 8793
   HEAP32[$334 >> 2] = $114; //@line 8794
   $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 8795
   HEAP32[$335 >> 2] = $116; //@line 8796
   $336 = $ReallocAsyncCtx2 + 232 | 0; //@line 8797
   HEAP32[$336 >> 2] = $118; //@line 8798
   $337 = $ReallocAsyncCtx2 + 236 | 0; //@line 8799
   HEAP32[$337 >> 2] = $120; //@line 8800
   $338 = $ReallocAsyncCtx2 + 240 | 0; //@line 8801
   HEAP32[$338 >> 2] = $122; //@line 8802
   $339 = $ReallocAsyncCtx2 + 244 | 0; //@line 8803
   HEAP32[$339 >> 2] = $124; //@line 8804
   $340 = $ReallocAsyncCtx2 + 248 | 0; //@line 8805
   HEAP32[$340 >> 2] = $126; //@line 8806
   $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 8807
   HEAP32[$341 >> 2] = $128; //@line 8808
   $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 8809
   HEAP32[$342 >> 2] = $130; //@line 8810
   $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 8811
   HEAP32[$343 >> 2] = $132; //@line 8812
   $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 8813
   HEAP32[$344 >> 2] = $134; //@line 8814
   sp = STACKTOP; //@line 8815
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 8819
  ___async_unwind = 0; //@line 8820
  HEAP32[$ReallocAsyncCtx2 >> 2] = 591; //@line 8821
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 8822
  HEAP32[$278 >> 2] = $2; //@line 8823
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 8824
  HEAP32[$279 >> 2] = $4; //@line 8825
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 8826
  HEAP32[$280 >> 2] = $6; //@line 8827
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 8828
  HEAP32[$281 >> 2] = $8; //@line 8829
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 8830
  HEAP32[$282 >> 2] = $10; //@line 8831
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 8832
  HEAP32[$283 >> 2] = $12; //@line 8833
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 8834
  HEAP32[$284 >> 2] = $14; //@line 8835
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 8836
  HEAP8[$285 >> 0] = $16; //@line 8837
  $286 = $ReallocAsyncCtx2 + 33 | 0; //@line 8838
  HEAP8[$286 >> 0] = $18; //@line 8839
  $287 = $ReallocAsyncCtx2 + 36 | 0; //@line 8840
  HEAP32[$287 >> 2] = $20; //@line 8841
  $288 = $ReallocAsyncCtx2 + 40 | 0; //@line 8842
  HEAP32[$288 >> 2] = $22; //@line 8843
  $289 = $ReallocAsyncCtx2 + 44 | 0; //@line 8844
  HEAP32[$289 >> 2] = $24; //@line 8845
  $290 = $ReallocAsyncCtx2 + 48 | 0; //@line 8846
  HEAP8[$290 >> 0] = $26; //@line 8847
  $291 = $ReallocAsyncCtx2 + 52 | 0; //@line 8848
  HEAP32[$291 >> 2] = $28; //@line 8849
  $292 = $ReallocAsyncCtx2 + 56 | 0; //@line 8850
  HEAP32[$292 >> 2] = $30; //@line 8851
  $293 = $ReallocAsyncCtx2 + 60 | 0; //@line 8852
  HEAP32[$293 >> 2] = $32; //@line 8853
  $294 = $ReallocAsyncCtx2 + 64 | 0; //@line 8854
  HEAP32[$294 >> 2] = $34; //@line 8855
  $295 = $ReallocAsyncCtx2 + 68 | 0; //@line 8856
  HEAP8[$295 >> 0] = $266; //@line 8857
  $296 = $ReallocAsyncCtx2 + 72 | 0; //@line 8858
  HEAP32[$296 >> 2] = $36; //@line 8859
  $297 = $ReallocAsyncCtx2 + 76 | 0; //@line 8860
  HEAP32[$297 >> 2] = $38; //@line 8861
  $298 = $ReallocAsyncCtx2 + 80 | 0; //@line 8862
  HEAP32[$298 >> 2] = $40; //@line 8863
  $299 = $ReallocAsyncCtx2 + 84 | 0; //@line 8864
  HEAP32[$299 >> 2] = $42; //@line 8865
  $300 = $ReallocAsyncCtx2 + 88 | 0; //@line 8866
  HEAP32[$300 >> 2] = $44; //@line 8867
  $301 = $ReallocAsyncCtx2 + 92 | 0; //@line 8868
  HEAP32[$301 >> 2] = $46; //@line 8869
  $302 = $ReallocAsyncCtx2 + 96 | 0; //@line 8870
  HEAP32[$302 >> 2] = $48; //@line 8871
  $303 = $ReallocAsyncCtx2 + 100 | 0; //@line 8872
  HEAP32[$303 >> 2] = $50; //@line 8873
  $304 = $ReallocAsyncCtx2 + 104 | 0; //@line 8874
  HEAP32[$304 >> 2] = $52; //@line 8875
  $305 = $ReallocAsyncCtx2 + 108 | 0; //@line 8876
  HEAP32[$305 >> 2] = $54; //@line 8877
  $306 = $ReallocAsyncCtx2 + 112 | 0; //@line 8878
  HEAP32[$306 >> 2] = $56; //@line 8879
  $307 = $ReallocAsyncCtx2 + 116 | 0; //@line 8880
  HEAP32[$307 >> 2] = $58; //@line 8881
  $308 = $ReallocAsyncCtx2 + 120 | 0; //@line 8882
  HEAP32[$308 >> 2] = $60; //@line 8883
  $309 = $ReallocAsyncCtx2 + 124 | 0; //@line 8884
  HEAP32[$309 >> 2] = $62; //@line 8885
  $310 = $ReallocAsyncCtx2 + 128 | 0; //@line 8886
  HEAP32[$310 >> 2] = $64; //@line 8887
  $311 = $ReallocAsyncCtx2 + 132 | 0; //@line 8888
  HEAP32[$311 >> 2] = $66; //@line 8889
  $312 = $ReallocAsyncCtx2 + 136 | 0; //@line 8890
  HEAP32[$312 >> 2] = $68; //@line 8891
  $313 = $ReallocAsyncCtx2 + 140 | 0; //@line 8892
  HEAP32[$313 >> 2] = $70; //@line 8893
  $314 = $ReallocAsyncCtx2 + 144 | 0; //@line 8894
  HEAP32[$314 >> 2] = $72; //@line 8895
  $315 = $ReallocAsyncCtx2 + 148 | 0; //@line 8896
  HEAP32[$315 >> 2] = $74; //@line 8897
  $316 = $ReallocAsyncCtx2 + 152 | 0; //@line 8898
  HEAP32[$316 >> 2] = $76; //@line 8899
  $317 = $ReallocAsyncCtx2 + 156 | 0; //@line 8900
  HEAP32[$317 >> 2] = $78; //@line 8901
  $318 = $ReallocAsyncCtx2 + 160 | 0; //@line 8902
  HEAP32[$318 >> 2] = $80; //@line 8903
  $319 = $ReallocAsyncCtx2 + 164 | 0; //@line 8904
  HEAP32[$319 >> 2] = $82; //@line 8905
  $320 = $ReallocAsyncCtx2 + 168 | 0; //@line 8906
  HEAP32[$320 >> 2] = $84; //@line 8907
  $321 = $ReallocAsyncCtx2 + 172 | 0; //@line 8908
  HEAP32[$321 >> 2] = $86; //@line 8909
  $322 = $ReallocAsyncCtx2 + 176 | 0; //@line 8910
  HEAP32[$322 >> 2] = $88; //@line 8911
  $323 = $ReallocAsyncCtx2 + 180 | 0; //@line 8912
  HEAP32[$323 >> 2] = $90; //@line 8913
  $324 = $ReallocAsyncCtx2 + 184 | 0; //@line 8914
  HEAP32[$324 >> 2] = $94; //@line 8915
  $325 = $ReallocAsyncCtx2 + 188 | 0; //@line 8916
  HEAP32[$325 >> 2] = $96; //@line 8917
  $326 = $ReallocAsyncCtx2 + 192 | 0; //@line 8918
  HEAP32[$326 >> 2] = $98; //@line 8919
  $327 = $ReallocAsyncCtx2 + 196 | 0; //@line 8920
  HEAP32[$327 >> 2] = $100; //@line 8921
  $328 = $ReallocAsyncCtx2 + 200 | 0; //@line 8922
  HEAP32[$328 >> 2] = $102; //@line 8923
  $329 = $ReallocAsyncCtx2 + 204 | 0; //@line 8924
  HEAP32[$329 >> 2] = $104; //@line 8925
  $330 = $ReallocAsyncCtx2 + 208 | 0; //@line 8926
  HEAP32[$330 >> 2] = $106; //@line 8927
  $331 = $ReallocAsyncCtx2 + 212 | 0; //@line 8928
  HEAP32[$331 >> 2] = $108; //@line 8929
  $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 8930
  HEAP32[$332 >> 2] = $110; //@line 8931
  $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 8932
  HEAP32[$333 >> 2] = $112; //@line 8933
  $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 8934
  HEAP32[$334 >> 2] = $114; //@line 8935
  $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 8936
  HEAP32[$335 >> 2] = $116; //@line 8937
  $336 = $ReallocAsyncCtx2 + 232 | 0; //@line 8938
  HEAP32[$336 >> 2] = $118; //@line 8939
  $337 = $ReallocAsyncCtx2 + 236 | 0; //@line 8940
  HEAP32[$337 >> 2] = $120; //@line 8941
  $338 = $ReallocAsyncCtx2 + 240 | 0; //@line 8942
  HEAP32[$338 >> 2] = $122; //@line 8943
  $339 = $ReallocAsyncCtx2 + 244 | 0; //@line 8944
  HEAP32[$339 >> 2] = $124; //@line 8945
  $340 = $ReallocAsyncCtx2 + 248 | 0; //@line 8946
  HEAP32[$340 >> 2] = $126; //@line 8947
  $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 8948
  HEAP32[$341 >> 2] = $128; //@line 8949
  $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 8950
  HEAP32[$342 >> 2] = $130; //@line 8951
  $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 8952
  HEAP32[$343 >> 2] = $132; //@line 8953
  $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 8954
  HEAP32[$344 >> 2] = $134; //@line 8955
  sp = STACKTOP; //@line 8956
  return;
 } else if ((label | 0) == 14) {
  HEAP8[$66 >> 0] = HEAP8[$12 + ($137 & 255) >> 0] | 0; //@line 8964
  HEAP32[$56 >> 2] = $128; //@line 8965
  HEAP32[$104 >> 2] = (HEAPU8[$12 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$12 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$12 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 8986
  HEAP32[$96 >> 2] = 0; //@line 8987
  $385 = $$0$be + 6 << 24 >> 24; //@line 8988
  HEAP8[$94 >> 0] = HEAP8[$12 + ($$0$be + 5 & 255) >> 0] | 0; //@line 8992
  $391 = HEAP32[(HEAP32[$82 >> 2] | 0) + 8 >> 2] | 0; //@line 8995
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 8996
  $392 = FUNCTION_TABLE_iii[$391 & 31]($34, $54) | 0; //@line 8997
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 592; //@line 9000
   $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 9001
   HEAP32[$393 >> 2] = $2; //@line 9002
   $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 9003
   HEAP32[$394 >> 2] = $4; //@line 9004
   $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 9005
   HEAP32[$395 >> 2] = $6; //@line 9006
   $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 9007
   HEAP32[$396 >> 2] = $8; //@line 9008
   $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 9009
   HEAP32[$397 >> 2] = $10; //@line 9010
   $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 9011
   HEAP32[$398 >> 2] = $12; //@line 9012
   $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 9013
   HEAP32[$399 >> 2] = $14; //@line 9014
   $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 9015
   HEAP8[$400 >> 0] = $16; //@line 9016
   $401 = $ReallocAsyncCtx3 + 33 | 0; //@line 9017
   HEAP8[$401 >> 0] = $18; //@line 9018
   $402 = $ReallocAsyncCtx3 + 36 | 0; //@line 9019
   HEAP32[$402 >> 2] = $20; //@line 9020
   $403 = $ReallocAsyncCtx3 + 40 | 0; //@line 9021
   HEAP32[$403 >> 2] = $22; //@line 9022
   $404 = $ReallocAsyncCtx3 + 44 | 0; //@line 9023
   HEAP32[$404 >> 2] = $24; //@line 9024
   $405 = $ReallocAsyncCtx3 + 48 | 0; //@line 9025
   HEAP8[$405 >> 0] = $26; //@line 9026
   $406 = $ReallocAsyncCtx3 + 52 | 0; //@line 9027
   HEAP32[$406 >> 2] = $28; //@line 9028
   $407 = $ReallocAsyncCtx3 + 56 | 0; //@line 9029
   HEAP32[$407 >> 2] = $30; //@line 9030
   $408 = $ReallocAsyncCtx3 + 60 | 0; //@line 9031
   HEAP32[$408 >> 2] = $32; //@line 9032
   $409 = $ReallocAsyncCtx3 + 64 | 0; //@line 9033
   HEAP32[$409 >> 2] = $34; //@line 9034
   $410 = $ReallocAsyncCtx3 + 68 | 0; //@line 9035
   HEAP32[$410 >> 2] = $36; //@line 9036
   $411 = $ReallocAsyncCtx3 + 72 | 0; //@line 9037
   HEAP32[$411 >> 2] = $38; //@line 9038
   $412 = $ReallocAsyncCtx3 + 76 | 0; //@line 9039
   HEAP32[$412 >> 2] = $40; //@line 9040
   $413 = $ReallocAsyncCtx3 + 80 | 0; //@line 9041
   HEAP32[$413 >> 2] = $42; //@line 9042
   $414 = $ReallocAsyncCtx3 + 84 | 0; //@line 9043
   HEAP32[$414 >> 2] = $44; //@line 9044
   $415 = $ReallocAsyncCtx3 + 88 | 0; //@line 9045
   HEAP32[$415 >> 2] = $46; //@line 9046
   $416 = $ReallocAsyncCtx3 + 92 | 0; //@line 9047
   HEAP32[$416 >> 2] = $48; //@line 9048
   $417 = $ReallocAsyncCtx3 + 96 | 0; //@line 9049
   HEAP32[$417 >> 2] = $50; //@line 9050
   $418 = $ReallocAsyncCtx3 + 100 | 0; //@line 9051
   HEAP32[$418 >> 2] = $52; //@line 9052
   $419 = $ReallocAsyncCtx3 + 104 | 0; //@line 9053
   HEAP32[$419 >> 2] = $54; //@line 9054
   $420 = $ReallocAsyncCtx3 + 108 | 0; //@line 9055
   HEAP32[$420 >> 2] = $56; //@line 9056
   $421 = $ReallocAsyncCtx3 + 112 | 0; //@line 9057
   HEAP32[$421 >> 2] = $58; //@line 9058
   $422 = $ReallocAsyncCtx3 + 116 | 0; //@line 9059
   HEAP32[$422 >> 2] = $60; //@line 9060
   $423 = $ReallocAsyncCtx3 + 120 | 0; //@line 9061
   HEAP32[$423 >> 2] = $62; //@line 9062
   $424 = $ReallocAsyncCtx3 + 124 | 0; //@line 9063
   HEAP32[$424 >> 2] = $64; //@line 9064
   $425 = $ReallocAsyncCtx3 + 128 | 0; //@line 9065
   HEAP32[$425 >> 2] = $66; //@line 9066
   $426 = $ReallocAsyncCtx3 + 132 | 0; //@line 9067
   HEAP32[$426 >> 2] = $68; //@line 9068
   $427 = $ReallocAsyncCtx3 + 136 | 0; //@line 9069
   HEAP32[$427 >> 2] = $70; //@line 9070
   $428 = $ReallocAsyncCtx3 + 140 | 0; //@line 9071
   HEAP32[$428 >> 2] = $72; //@line 9072
   $429 = $ReallocAsyncCtx3 + 144 | 0; //@line 9073
   HEAP32[$429 >> 2] = $74; //@line 9074
   $430 = $ReallocAsyncCtx3 + 148 | 0; //@line 9075
   HEAP32[$430 >> 2] = $76; //@line 9076
   $431 = $ReallocAsyncCtx3 + 152 | 0; //@line 9077
   HEAP32[$431 >> 2] = $78; //@line 9078
   $432 = $ReallocAsyncCtx3 + 156 | 0; //@line 9079
   HEAP32[$432 >> 2] = $80; //@line 9080
   $433 = $ReallocAsyncCtx3 + 160 | 0; //@line 9081
   HEAP32[$433 >> 2] = $82; //@line 9082
   $434 = $ReallocAsyncCtx3 + 164 | 0; //@line 9083
   HEAP32[$434 >> 2] = $84; //@line 9084
   $435 = $ReallocAsyncCtx3 + 168 | 0; //@line 9085
   HEAP32[$435 >> 2] = $86; //@line 9086
   $436 = $ReallocAsyncCtx3 + 172 | 0; //@line 9087
   HEAP32[$436 >> 2] = $88; //@line 9088
   $437 = $ReallocAsyncCtx3 + 176 | 0; //@line 9089
   HEAP32[$437 >> 2] = $90; //@line 9090
   $438 = $ReallocAsyncCtx3 + 180 | 0; //@line 9091
   HEAP32[$438 >> 2] = $94; //@line 9092
   $439 = $ReallocAsyncCtx3 + 184 | 0; //@line 9093
   HEAP32[$439 >> 2] = $96; //@line 9094
   $440 = $ReallocAsyncCtx3 + 188 | 0; //@line 9095
   HEAP32[$440 >> 2] = $98; //@line 9096
   $441 = $ReallocAsyncCtx3 + 192 | 0; //@line 9097
   HEAP32[$441 >> 2] = $100; //@line 9098
   $442 = $ReallocAsyncCtx3 + 196 | 0; //@line 9099
   HEAP32[$442 >> 2] = $102; //@line 9100
   $443 = $ReallocAsyncCtx3 + 200 | 0; //@line 9101
   HEAP32[$443 >> 2] = $104; //@line 9102
   $444 = $ReallocAsyncCtx3 + 204 | 0; //@line 9103
   HEAP32[$444 >> 2] = $106; //@line 9104
   $445 = $ReallocAsyncCtx3 + 208 | 0; //@line 9105
   HEAP32[$445 >> 2] = $108; //@line 9106
   $446 = $ReallocAsyncCtx3 + 212 | 0; //@line 9107
   HEAP32[$446 >> 2] = $110; //@line 9108
   $447 = $ReallocAsyncCtx3 + 216 | 0; //@line 9109
   HEAP8[$447 >> 0] = $385; //@line 9110
   $448 = $ReallocAsyncCtx3 + 220 | 0; //@line 9111
   HEAP32[$448 >> 2] = $112; //@line 9112
   $449 = $ReallocAsyncCtx3 + 224 | 0; //@line 9113
   HEAP32[$449 >> 2] = $114; //@line 9114
   $450 = $ReallocAsyncCtx3 + 228 | 0; //@line 9115
   HEAP32[$450 >> 2] = $116; //@line 9116
   $451 = $ReallocAsyncCtx3 + 232 | 0; //@line 9117
   HEAP32[$451 >> 2] = $118; //@line 9118
   $452 = $ReallocAsyncCtx3 + 236 | 0; //@line 9119
   HEAP32[$452 >> 2] = $120; //@line 9120
   $453 = $ReallocAsyncCtx3 + 240 | 0; //@line 9121
   HEAP32[$453 >> 2] = $122; //@line 9122
   $454 = $ReallocAsyncCtx3 + 244 | 0; //@line 9123
   HEAP32[$454 >> 2] = $124; //@line 9124
   $455 = $ReallocAsyncCtx3 + 248 | 0; //@line 9125
   HEAP32[$455 >> 2] = $126; //@line 9126
   $456 = $ReallocAsyncCtx3 + 252 | 0; //@line 9127
   HEAP32[$456 >> 2] = $128; //@line 9128
   $457 = $ReallocAsyncCtx3 + 256 | 0; //@line 9129
   HEAP32[$457 >> 2] = $130; //@line 9130
   $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 9131
   HEAP32[$458 >> 2] = $132; //@line 9132
   $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 9133
   HEAP32[$459 >> 2] = $134; //@line 9134
   sp = STACKTOP; //@line 9135
   return;
  }
  HEAP8[___async_retval >> 0] = $392; //@line 9139
  ___async_unwind = 0; //@line 9140
  HEAP32[$ReallocAsyncCtx3 >> 2] = 592; //@line 9141
  $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 9142
  HEAP32[$393 >> 2] = $2; //@line 9143
  $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 9144
  HEAP32[$394 >> 2] = $4; //@line 9145
  $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 9146
  HEAP32[$395 >> 2] = $6; //@line 9147
  $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 9148
  HEAP32[$396 >> 2] = $8; //@line 9149
  $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 9150
  HEAP32[$397 >> 2] = $10; //@line 9151
  $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 9152
  HEAP32[$398 >> 2] = $12; //@line 9153
  $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 9154
  HEAP32[$399 >> 2] = $14; //@line 9155
  $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 9156
  HEAP8[$400 >> 0] = $16; //@line 9157
  $401 = $ReallocAsyncCtx3 + 33 | 0; //@line 9158
  HEAP8[$401 >> 0] = $18; //@line 9159
  $402 = $ReallocAsyncCtx3 + 36 | 0; //@line 9160
  HEAP32[$402 >> 2] = $20; //@line 9161
  $403 = $ReallocAsyncCtx3 + 40 | 0; //@line 9162
  HEAP32[$403 >> 2] = $22; //@line 9163
  $404 = $ReallocAsyncCtx3 + 44 | 0; //@line 9164
  HEAP32[$404 >> 2] = $24; //@line 9165
  $405 = $ReallocAsyncCtx3 + 48 | 0; //@line 9166
  HEAP8[$405 >> 0] = $26; //@line 9167
  $406 = $ReallocAsyncCtx3 + 52 | 0; //@line 9168
  HEAP32[$406 >> 2] = $28; //@line 9169
  $407 = $ReallocAsyncCtx3 + 56 | 0; //@line 9170
  HEAP32[$407 >> 2] = $30; //@line 9171
  $408 = $ReallocAsyncCtx3 + 60 | 0; //@line 9172
  HEAP32[$408 >> 2] = $32; //@line 9173
  $409 = $ReallocAsyncCtx3 + 64 | 0; //@line 9174
  HEAP32[$409 >> 2] = $34; //@line 9175
  $410 = $ReallocAsyncCtx3 + 68 | 0; //@line 9176
  HEAP32[$410 >> 2] = $36; //@line 9177
  $411 = $ReallocAsyncCtx3 + 72 | 0; //@line 9178
  HEAP32[$411 >> 2] = $38; //@line 9179
  $412 = $ReallocAsyncCtx3 + 76 | 0; //@line 9180
  HEAP32[$412 >> 2] = $40; //@line 9181
  $413 = $ReallocAsyncCtx3 + 80 | 0; //@line 9182
  HEAP32[$413 >> 2] = $42; //@line 9183
  $414 = $ReallocAsyncCtx3 + 84 | 0; //@line 9184
  HEAP32[$414 >> 2] = $44; //@line 9185
  $415 = $ReallocAsyncCtx3 + 88 | 0; //@line 9186
  HEAP32[$415 >> 2] = $46; //@line 9187
  $416 = $ReallocAsyncCtx3 + 92 | 0; //@line 9188
  HEAP32[$416 >> 2] = $48; //@line 9189
  $417 = $ReallocAsyncCtx3 + 96 | 0; //@line 9190
  HEAP32[$417 >> 2] = $50; //@line 9191
  $418 = $ReallocAsyncCtx3 + 100 | 0; //@line 9192
  HEAP32[$418 >> 2] = $52; //@line 9193
  $419 = $ReallocAsyncCtx3 + 104 | 0; //@line 9194
  HEAP32[$419 >> 2] = $54; //@line 9195
  $420 = $ReallocAsyncCtx3 + 108 | 0; //@line 9196
  HEAP32[$420 >> 2] = $56; //@line 9197
  $421 = $ReallocAsyncCtx3 + 112 | 0; //@line 9198
  HEAP32[$421 >> 2] = $58; //@line 9199
  $422 = $ReallocAsyncCtx3 + 116 | 0; //@line 9200
  HEAP32[$422 >> 2] = $60; //@line 9201
  $423 = $ReallocAsyncCtx3 + 120 | 0; //@line 9202
  HEAP32[$423 >> 2] = $62; //@line 9203
  $424 = $ReallocAsyncCtx3 + 124 | 0; //@line 9204
  HEAP32[$424 >> 2] = $64; //@line 9205
  $425 = $ReallocAsyncCtx3 + 128 | 0; //@line 9206
  HEAP32[$425 >> 2] = $66; //@line 9207
  $426 = $ReallocAsyncCtx3 + 132 | 0; //@line 9208
  HEAP32[$426 >> 2] = $68; //@line 9209
  $427 = $ReallocAsyncCtx3 + 136 | 0; //@line 9210
  HEAP32[$427 >> 2] = $70; //@line 9211
  $428 = $ReallocAsyncCtx3 + 140 | 0; //@line 9212
  HEAP32[$428 >> 2] = $72; //@line 9213
  $429 = $ReallocAsyncCtx3 + 144 | 0; //@line 9214
  HEAP32[$429 >> 2] = $74; //@line 9215
  $430 = $ReallocAsyncCtx3 + 148 | 0; //@line 9216
  HEAP32[$430 >> 2] = $76; //@line 9217
  $431 = $ReallocAsyncCtx3 + 152 | 0; //@line 9218
  HEAP32[$431 >> 2] = $78; //@line 9219
  $432 = $ReallocAsyncCtx3 + 156 | 0; //@line 9220
  HEAP32[$432 >> 2] = $80; //@line 9221
  $433 = $ReallocAsyncCtx3 + 160 | 0; //@line 9222
  HEAP32[$433 >> 2] = $82; //@line 9223
  $434 = $ReallocAsyncCtx3 + 164 | 0; //@line 9224
  HEAP32[$434 >> 2] = $84; //@line 9225
  $435 = $ReallocAsyncCtx3 + 168 | 0; //@line 9226
  HEAP32[$435 >> 2] = $86; //@line 9227
  $436 = $ReallocAsyncCtx3 + 172 | 0; //@line 9228
  HEAP32[$436 >> 2] = $88; //@line 9229
  $437 = $ReallocAsyncCtx3 + 176 | 0; //@line 9230
  HEAP32[$437 >> 2] = $90; //@line 9231
  $438 = $ReallocAsyncCtx3 + 180 | 0; //@line 9232
  HEAP32[$438 >> 2] = $94; //@line 9233
  $439 = $ReallocAsyncCtx3 + 184 | 0; //@line 9234
  HEAP32[$439 >> 2] = $96; //@line 9235
  $440 = $ReallocAsyncCtx3 + 188 | 0; //@line 9236
  HEAP32[$440 >> 2] = $98; //@line 9237
  $441 = $ReallocAsyncCtx3 + 192 | 0; //@line 9238
  HEAP32[$441 >> 2] = $100; //@line 9239
  $442 = $ReallocAsyncCtx3 + 196 | 0; //@line 9240
  HEAP32[$442 >> 2] = $102; //@line 9241
  $443 = $ReallocAsyncCtx3 + 200 | 0; //@line 9242
  HEAP32[$443 >> 2] = $104; //@line 9243
  $444 = $ReallocAsyncCtx3 + 204 | 0; //@line 9244
  HEAP32[$444 >> 2] = $106; //@line 9245
  $445 = $ReallocAsyncCtx3 + 208 | 0; //@line 9246
  HEAP32[$445 >> 2] = $108; //@line 9247
  $446 = $ReallocAsyncCtx3 + 212 | 0; //@line 9248
  HEAP32[$446 >> 2] = $110; //@line 9249
  $447 = $ReallocAsyncCtx3 + 216 | 0; //@line 9250
  HEAP8[$447 >> 0] = $385; //@line 9251
  $448 = $ReallocAsyncCtx3 + 220 | 0; //@line 9252
  HEAP32[$448 >> 2] = $112; //@line 9253
  $449 = $ReallocAsyncCtx3 + 224 | 0; //@line 9254
  HEAP32[$449 >> 2] = $114; //@line 9255
  $450 = $ReallocAsyncCtx3 + 228 | 0; //@line 9256
  HEAP32[$450 >> 2] = $116; //@line 9257
  $451 = $ReallocAsyncCtx3 + 232 | 0; //@line 9258
  HEAP32[$451 >> 2] = $118; //@line 9259
  $452 = $ReallocAsyncCtx3 + 236 | 0; //@line 9260
  HEAP32[$452 >> 2] = $120; //@line 9261
  $453 = $ReallocAsyncCtx3 + 240 | 0; //@line 9262
  HEAP32[$453 >> 2] = $122; //@line 9263
  $454 = $ReallocAsyncCtx3 + 244 | 0; //@line 9264
  HEAP32[$454 >> 2] = $124; //@line 9265
  $455 = $ReallocAsyncCtx3 + 248 | 0; //@line 9266
  HEAP32[$455 >> 2] = $126; //@line 9267
  $456 = $ReallocAsyncCtx3 + 252 | 0; //@line 9268
  HEAP32[$456 >> 2] = $128; //@line 9269
  $457 = $ReallocAsyncCtx3 + 256 | 0; //@line 9270
  HEAP32[$457 >> 2] = $130; //@line 9271
  $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 9272
  HEAP32[$458 >> 2] = $132; //@line 9273
  $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 9274
  HEAP32[$459 >> 2] = $134; //@line 9275
  sp = STACKTOP; //@line 9276
  return;
 } else if ((label | 0) == 19) {
  $478 = $$0$be + 2 << 24 >> 24; //@line 9280
  $481 = HEAP8[$12 + ($137 & 255) >> 0] | 0; //@line 9283
  HEAP8[$118 >> 0] = 0; //@line 9284
  $482 = $481 & 255; //@line 9285
  HEAP8[$114 >> 0] = $482 >>> 5 & 1; //@line 9289
  if ($482 & 16 | 0) {
   HEAP8[$118 >> 0] = 1; //@line 9293
  }
  HEAP8[$40 >> 0] = $482 & 15; //@line 9297
  $491 = HEAP32[(HEAP32[$32 >> 2] | 0) + 44 >> 2] | 0; //@line 9300
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 9301
  $492 = FUNCTION_TABLE_iii[$491 & 31]($34, $84) | 0; //@line 9302
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 593; //@line 9305
   $493 = $ReallocAsyncCtx4 + 4 | 0; //@line 9306
   HEAP32[$493 >> 2] = $2; //@line 9307
   $494 = $ReallocAsyncCtx4 + 8 | 0; //@line 9308
   HEAP32[$494 >> 2] = $4; //@line 9309
   $495 = $ReallocAsyncCtx4 + 12 | 0; //@line 9310
   HEAP32[$495 >> 2] = $6; //@line 9311
   $496 = $ReallocAsyncCtx4 + 16 | 0; //@line 9312
   HEAP8[$496 >> 0] = $478; //@line 9313
   $497 = $ReallocAsyncCtx4 + 20 | 0; //@line 9314
   HEAP32[$497 >> 2] = $8; //@line 9315
   $498 = $ReallocAsyncCtx4 + 24 | 0; //@line 9316
   HEAP32[$498 >> 2] = $10; //@line 9317
   $499 = $ReallocAsyncCtx4 + 28 | 0; //@line 9318
   HEAP32[$499 >> 2] = $12; //@line 9319
   $500 = $ReallocAsyncCtx4 + 32 | 0; //@line 9320
   HEAP32[$500 >> 2] = $14; //@line 9321
   $501 = $ReallocAsyncCtx4 + 36 | 0; //@line 9322
   HEAP8[$501 >> 0] = $16; //@line 9323
   $502 = $ReallocAsyncCtx4 + 37 | 0; //@line 9324
   HEAP8[$502 >> 0] = $18; //@line 9325
   $503 = $ReallocAsyncCtx4 + 40 | 0; //@line 9326
   HEAP32[$503 >> 2] = $20; //@line 9327
   $504 = $ReallocAsyncCtx4 + 44 | 0; //@line 9328
   HEAP32[$504 >> 2] = $22; //@line 9329
   $505 = $ReallocAsyncCtx4 + 48 | 0; //@line 9330
   HEAP32[$505 >> 2] = $24; //@line 9331
   $506 = $ReallocAsyncCtx4 + 52 | 0; //@line 9332
   HEAP8[$506 >> 0] = $26; //@line 9333
   $507 = $ReallocAsyncCtx4 + 56 | 0; //@line 9334
   HEAP32[$507 >> 2] = $28; //@line 9335
   $508 = $ReallocAsyncCtx4 + 60 | 0; //@line 9336
   HEAP32[$508 >> 2] = $30; //@line 9337
   $509 = $ReallocAsyncCtx4 + 64 | 0; //@line 9338
   HEAP32[$509 >> 2] = $32; //@line 9339
   $510 = $ReallocAsyncCtx4 + 68 | 0; //@line 9340
   HEAP32[$510 >> 2] = $34; //@line 9341
   $511 = $ReallocAsyncCtx4 + 72 | 0; //@line 9342
   HEAP32[$511 >> 2] = $36; //@line 9343
   $512 = $ReallocAsyncCtx4 + 76 | 0; //@line 9344
   HEAP32[$512 >> 2] = $38; //@line 9345
   $513 = $ReallocAsyncCtx4 + 80 | 0; //@line 9346
   HEAP32[$513 >> 2] = $40; //@line 9347
   $514 = $ReallocAsyncCtx4 + 84 | 0; //@line 9348
   HEAP32[$514 >> 2] = $42; //@line 9349
   $515 = $ReallocAsyncCtx4 + 88 | 0; //@line 9350
   HEAP32[$515 >> 2] = $44; //@line 9351
   $516 = $ReallocAsyncCtx4 + 92 | 0; //@line 9352
   HEAP32[$516 >> 2] = $46; //@line 9353
   $517 = $ReallocAsyncCtx4 + 96 | 0; //@line 9354
   HEAP32[$517 >> 2] = $48; //@line 9355
   $518 = $ReallocAsyncCtx4 + 100 | 0; //@line 9356
   HEAP32[$518 >> 2] = $50; //@line 9357
   $519 = $ReallocAsyncCtx4 + 104 | 0; //@line 9358
   HEAP32[$519 >> 2] = $52; //@line 9359
   $520 = $ReallocAsyncCtx4 + 108 | 0; //@line 9360
   HEAP32[$520 >> 2] = $54; //@line 9361
   $521 = $ReallocAsyncCtx4 + 112 | 0; //@line 9362
   HEAP32[$521 >> 2] = $56; //@line 9363
   $522 = $ReallocAsyncCtx4 + 116 | 0; //@line 9364
   HEAP32[$522 >> 2] = $58; //@line 9365
   $523 = $ReallocAsyncCtx4 + 120 | 0; //@line 9366
   HEAP32[$523 >> 2] = $60; //@line 9367
   $524 = $ReallocAsyncCtx4 + 124 | 0; //@line 9368
   HEAP32[$524 >> 2] = $62; //@line 9369
   $525 = $ReallocAsyncCtx4 + 128 | 0; //@line 9370
   HEAP32[$525 >> 2] = $64; //@line 9371
   $526 = $ReallocAsyncCtx4 + 132 | 0; //@line 9372
   HEAP32[$526 >> 2] = $66; //@line 9373
   $527 = $ReallocAsyncCtx4 + 136 | 0; //@line 9374
   HEAP32[$527 >> 2] = $68; //@line 9375
   $528 = $ReallocAsyncCtx4 + 140 | 0; //@line 9376
   HEAP32[$528 >> 2] = $70; //@line 9377
   $529 = $ReallocAsyncCtx4 + 144 | 0; //@line 9378
   HEAP32[$529 >> 2] = $72; //@line 9379
   $530 = $ReallocAsyncCtx4 + 148 | 0; //@line 9380
   HEAP32[$530 >> 2] = $74; //@line 9381
   $531 = $ReallocAsyncCtx4 + 152 | 0; //@line 9382
   HEAP32[$531 >> 2] = $76; //@line 9383
   $532 = $ReallocAsyncCtx4 + 156 | 0; //@line 9384
   HEAP32[$532 >> 2] = $78; //@line 9385
   $533 = $ReallocAsyncCtx4 + 160 | 0; //@line 9386
   HEAP32[$533 >> 2] = $80; //@line 9387
   $534 = $ReallocAsyncCtx4 + 164 | 0; //@line 9388
   HEAP32[$534 >> 2] = $82; //@line 9389
   $535 = $ReallocAsyncCtx4 + 168 | 0; //@line 9390
   HEAP32[$535 >> 2] = $84; //@line 9391
   $536 = $ReallocAsyncCtx4 + 172 | 0; //@line 9392
   HEAP32[$536 >> 2] = $86; //@line 9393
   $537 = $ReallocAsyncCtx4 + 176 | 0; //@line 9394
   HEAP32[$537 >> 2] = $88; //@line 9395
   $538 = $ReallocAsyncCtx4 + 180 | 0; //@line 9396
   HEAP32[$538 >> 2] = $90; //@line 9397
   $539 = $ReallocAsyncCtx4 + 184 | 0; //@line 9398
   HEAP32[$539 >> 2] = $94; //@line 9399
   $540 = $ReallocAsyncCtx4 + 188 | 0; //@line 9400
   HEAP32[$540 >> 2] = $96; //@line 9401
   $541 = $ReallocAsyncCtx4 + 192 | 0; //@line 9402
   HEAP32[$541 >> 2] = $98; //@line 9403
   $542 = $ReallocAsyncCtx4 + 196 | 0; //@line 9404
   HEAP32[$542 >> 2] = $$096$be; //@line 9405
   $543 = $ReallocAsyncCtx4 + 200 | 0; //@line 9406
   HEAP32[$543 >> 2] = $100; //@line 9407
   $544 = $ReallocAsyncCtx4 + 204 | 0; //@line 9408
   HEAP32[$544 >> 2] = $102; //@line 9409
   $545 = $ReallocAsyncCtx4 + 208 | 0; //@line 9410
   HEAP32[$545 >> 2] = $104; //@line 9411
   $546 = $ReallocAsyncCtx4 + 212 | 0; //@line 9412
   HEAP32[$546 >> 2] = $106; //@line 9413
   $547 = $ReallocAsyncCtx4 + 216 | 0; //@line 9414
   HEAP32[$547 >> 2] = $108; //@line 9415
   $548 = $ReallocAsyncCtx4 + 220 | 0; //@line 9416
   HEAP32[$548 >> 2] = $110; //@line 9417
   $549 = $ReallocAsyncCtx4 + 224 | 0; //@line 9418
   HEAP32[$549 >> 2] = $112; //@line 9419
   $550 = $ReallocAsyncCtx4 + 228 | 0; //@line 9420
   HEAP32[$550 >> 2] = $114; //@line 9421
   $551 = $ReallocAsyncCtx4 + 232 | 0; //@line 9422
   HEAP32[$551 >> 2] = $116; //@line 9423
   $552 = $ReallocAsyncCtx4 + 236 | 0; //@line 9424
   HEAP32[$552 >> 2] = $118; //@line 9425
   $553 = $ReallocAsyncCtx4 + 240 | 0; //@line 9426
   HEAP32[$553 >> 2] = $120; //@line 9427
   $554 = $ReallocAsyncCtx4 + 244 | 0; //@line 9428
   HEAP32[$554 >> 2] = $122; //@line 9429
   $555 = $ReallocAsyncCtx4 + 248 | 0; //@line 9430
   HEAP32[$555 >> 2] = $124; //@line 9431
   $556 = $ReallocAsyncCtx4 + 252 | 0; //@line 9432
   HEAP32[$556 >> 2] = $126; //@line 9433
   $557 = $ReallocAsyncCtx4 + 256 | 0; //@line 9434
   HEAP32[$557 >> 2] = $128; //@line 9435
   $558 = $ReallocAsyncCtx4 + 260 | 0; //@line 9436
   HEAP32[$558 >> 2] = $130; //@line 9437
   $559 = $ReallocAsyncCtx4 + 264 | 0; //@line 9438
   HEAP32[$559 >> 2] = $132; //@line 9439
   $560 = $ReallocAsyncCtx4 + 268 | 0; //@line 9440
   HEAP32[$560 >> 2] = $134; //@line 9441
   sp = STACKTOP; //@line 9442
   return;
  }
  HEAP8[___async_retval >> 0] = $492 & 1; //@line 9447
  ___async_unwind = 0; //@line 9448
  HEAP32[$ReallocAsyncCtx4 >> 2] = 593; //@line 9449
  $493 = $ReallocAsyncCtx4 + 4 | 0; //@line 9450
  HEAP32[$493 >> 2] = $2; //@line 9451
  $494 = $ReallocAsyncCtx4 + 8 | 0; //@line 9452
  HEAP32[$494 >> 2] = $4; //@line 9453
  $495 = $ReallocAsyncCtx4 + 12 | 0; //@line 9454
  HEAP32[$495 >> 2] = $6; //@line 9455
  $496 = $ReallocAsyncCtx4 + 16 | 0; //@line 9456
  HEAP8[$496 >> 0] = $478; //@line 9457
  $497 = $ReallocAsyncCtx4 + 20 | 0; //@line 9458
  HEAP32[$497 >> 2] = $8; //@line 9459
  $498 = $ReallocAsyncCtx4 + 24 | 0; //@line 9460
  HEAP32[$498 >> 2] = $10; //@line 9461
  $499 = $ReallocAsyncCtx4 + 28 | 0; //@line 9462
  HEAP32[$499 >> 2] = $12; //@line 9463
  $500 = $ReallocAsyncCtx4 + 32 | 0; //@line 9464
  HEAP32[$500 >> 2] = $14; //@line 9465
  $501 = $ReallocAsyncCtx4 + 36 | 0; //@line 9466
  HEAP8[$501 >> 0] = $16; //@line 9467
  $502 = $ReallocAsyncCtx4 + 37 | 0; //@line 9468
  HEAP8[$502 >> 0] = $18; //@line 9469
  $503 = $ReallocAsyncCtx4 + 40 | 0; //@line 9470
  HEAP32[$503 >> 2] = $20; //@line 9471
  $504 = $ReallocAsyncCtx4 + 44 | 0; //@line 9472
  HEAP32[$504 >> 2] = $22; //@line 9473
  $505 = $ReallocAsyncCtx4 + 48 | 0; //@line 9474
  HEAP32[$505 >> 2] = $24; //@line 9475
  $506 = $ReallocAsyncCtx4 + 52 | 0; //@line 9476
  HEAP8[$506 >> 0] = $26; //@line 9477
  $507 = $ReallocAsyncCtx4 + 56 | 0; //@line 9478
  HEAP32[$507 >> 2] = $28; //@line 9479
  $508 = $ReallocAsyncCtx4 + 60 | 0; //@line 9480
  HEAP32[$508 >> 2] = $30; //@line 9481
  $509 = $ReallocAsyncCtx4 + 64 | 0; //@line 9482
  HEAP32[$509 >> 2] = $32; //@line 9483
  $510 = $ReallocAsyncCtx4 + 68 | 0; //@line 9484
  HEAP32[$510 >> 2] = $34; //@line 9485
  $511 = $ReallocAsyncCtx4 + 72 | 0; //@line 9486
  HEAP32[$511 >> 2] = $36; //@line 9487
  $512 = $ReallocAsyncCtx4 + 76 | 0; //@line 9488
  HEAP32[$512 >> 2] = $38; //@line 9489
  $513 = $ReallocAsyncCtx4 + 80 | 0; //@line 9490
  HEAP32[$513 >> 2] = $40; //@line 9491
  $514 = $ReallocAsyncCtx4 + 84 | 0; //@line 9492
  HEAP32[$514 >> 2] = $42; //@line 9493
  $515 = $ReallocAsyncCtx4 + 88 | 0; //@line 9494
  HEAP32[$515 >> 2] = $44; //@line 9495
  $516 = $ReallocAsyncCtx4 + 92 | 0; //@line 9496
  HEAP32[$516 >> 2] = $46; //@line 9497
  $517 = $ReallocAsyncCtx4 + 96 | 0; //@line 9498
  HEAP32[$517 >> 2] = $48; //@line 9499
  $518 = $ReallocAsyncCtx4 + 100 | 0; //@line 9500
  HEAP32[$518 >> 2] = $50; //@line 9501
  $519 = $ReallocAsyncCtx4 + 104 | 0; //@line 9502
  HEAP32[$519 >> 2] = $52; //@line 9503
  $520 = $ReallocAsyncCtx4 + 108 | 0; //@line 9504
  HEAP32[$520 >> 2] = $54; //@line 9505
  $521 = $ReallocAsyncCtx4 + 112 | 0; //@line 9506
  HEAP32[$521 >> 2] = $56; //@line 9507
  $522 = $ReallocAsyncCtx4 + 116 | 0; //@line 9508
  HEAP32[$522 >> 2] = $58; //@line 9509
  $523 = $ReallocAsyncCtx4 + 120 | 0; //@line 9510
  HEAP32[$523 >> 2] = $60; //@line 9511
  $524 = $ReallocAsyncCtx4 + 124 | 0; //@line 9512
  HEAP32[$524 >> 2] = $62; //@line 9513
  $525 = $ReallocAsyncCtx4 + 128 | 0; //@line 9514
  HEAP32[$525 >> 2] = $64; //@line 9515
  $526 = $ReallocAsyncCtx4 + 132 | 0; //@line 9516
  HEAP32[$526 >> 2] = $66; //@line 9517
  $527 = $ReallocAsyncCtx4 + 136 | 0; //@line 9518
  HEAP32[$527 >> 2] = $68; //@line 9519
  $528 = $ReallocAsyncCtx4 + 140 | 0; //@line 9520
  HEAP32[$528 >> 2] = $70; //@line 9521
  $529 = $ReallocAsyncCtx4 + 144 | 0; //@line 9522
  HEAP32[$529 >> 2] = $72; //@line 9523
  $530 = $ReallocAsyncCtx4 + 148 | 0; //@line 9524
  HEAP32[$530 >> 2] = $74; //@line 9525
  $531 = $ReallocAsyncCtx4 + 152 | 0; //@line 9526
  HEAP32[$531 >> 2] = $76; //@line 9527
  $532 = $ReallocAsyncCtx4 + 156 | 0; //@line 9528
  HEAP32[$532 >> 2] = $78; //@line 9529
  $533 = $ReallocAsyncCtx4 + 160 | 0; //@line 9530
  HEAP32[$533 >> 2] = $80; //@line 9531
  $534 = $ReallocAsyncCtx4 + 164 | 0; //@line 9532
  HEAP32[$534 >> 2] = $82; //@line 9533
  $535 = $ReallocAsyncCtx4 + 168 | 0; //@line 9534
  HEAP32[$535 >> 2] = $84; //@line 9535
  $536 = $ReallocAsyncCtx4 + 172 | 0; //@line 9536
  HEAP32[$536 >> 2] = $86; //@line 9537
  $537 = $ReallocAsyncCtx4 + 176 | 0; //@line 9538
  HEAP32[$537 >> 2] = $88; //@line 9539
  $538 = $ReallocAsyncCtx4 + 180 | 0; //@line 9540
  HEAP32[$538 >> 2] = $90; //@line 9541
  $539 = $ReallocAsyncCtx4 + 184 | 0; //@line 9542
  HEAP32[$539 >> 2] = $94; //@line 9543
  $540 = $ReallocAsyncCtx4 + 188 | 0; //@line 9544
  HEAP32[$540 >> 2] = $96; //@line 9545
  $541 = $ReallocAsyncCtx4 + 192 | 0; //@line 9546
  HEAP32[$541 >> 2] = $98; //@line 9547
  $542 = $ReallocAsyncCtx4 + 196 | 0; //@line 9548
  HEAP32[$542 >> 2] = $$096$be; //@line 9549
  $543 = $ReallocAsyncCtx4 + 200 | 0; //@line 9550
  HEAP32[$543 >> 2] = $100; //@line 9551
  $544 = $ReallocAsyncCtx4 + 204 | 0; //@line 9552
  HEAP32[$544 >> 2] = $102; //@line 9553
  $545 = $ReallocAsyncCtx4 + 208 | 0; //@line 9554
  HEAP32[$545 >> 2] = $104; //@line 9555
  $546 = $ReallocAsyncCtx4 + 212 | 0; //@line 9556
  HEAP32[$546 >> 2] = $106; //@line 9557
  $547 = $ReallocAsyncCtx4 + 216 | 0; //@line 9558
  HEAP32[$547 >> 2] = $108; //@line 9559
  $548 = $ReallocAsyncCtx4 + 220 | 0; //@line 9560
  HEAP32[$548 >> 2] = $110; //@line 9561
  $549 = $ReallocAsyncCtx4 + 224 | 0; //@line 9562
  HEAP32[$549 >> 2] = $112; //@line 9563
  $550 = $ReallocAsyncCtx4 + 228 | 0; //@line 9564
  HEAP32[$550 >> 2] = $114; //@line 9565
  $551 = $ReallocAsyncCtx4 + 232 | 0; //@line 9566
  HEAP32[$551 >> 2] = $116; //@line 9567
  $552 = $ReallocAsyncCtx4 + 236 | 0; //@line 9568
  HEAP32[$552 >> 2] = $118; //@line 9569
  $553 = $ReallocAsyncCtx4 + 240 | 0; //@line 9570
  HEAP32[$553 >> 2] = $120; //@line 9571
  $554 = $ReallocAsyncCtx4 + 244 | 0; //@line 9572
  HEAP32[$554 >> 2] = $122; //@line 9573
  $555 = $ReallocAsyncCtx4 + 248 | 0; //@line 9574
  HEAP32[$555 >> 2] = $124; //@line 9575
  $556 = $ReallocAsyncCtx4 + 252 | 0; //@line 9576
  HEAP32[$556 >> 2] = $126; //@line 9577
  $557 = $ReallocAsyncCtx4 + 256 | 0; //@line 9578
  HEAP32[$557 >> 2] = $128; //@line 9579
  $558 = $ReallocAsyncCtx4 + 260 | 0; //@line 9580
  HEAP32[$558 >> 2] = $130; //@line 9581
  $559 = $ReallocAsyncCtx4 + 264 | 0; //@line 9582
  HEAP32[$559 >> 2] = $132; //@line 9583
  $560 = $ReallocAsyncCtx4 + 268 | 0; //@line 9584
  HEAP32[$560 >> 2] = $134; //@line 9585
  sp = STACKTOP; //@line 9586
  return;
 } else if ((label | 0) == 24) {
  HEAP8[$72 >> 0] = HEAP8[$12 + ($137 & 255) >> 0] | 0; //@line 9594
  $578 = $$0$be + 5 << 24 >> 24; //@line 9607
  HEAP32[$50 >> 2] = (HEAPU8[$12 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$12 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$12 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 9615
  $588 = HEAP32[(HEAP32[$52 >> 2] | 0) + 48 >> 2] | 0; //@line 9618
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 9619
  $589 = FUNCTION_TABLE_iii[$588 & 31]($34, $80) | 0; //@line 9620
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 594; //@line 9623
   $590 = $ReallocAsyncCtx5 + 4 | 0; //@line 9624
   HEAP32[$590 >> 2] = $2; //@line 9625
   $591 = $ReallocAsyncCtx5 + 8 | 0; //@line 9626
   HEAP32[$591 >> 2] = $4; //@line 9627
   $592 = $ReallocAsyncCtx5 + 12 | 0; //@line 9628
   HEAP32[$592 >> 2] = $6; //@line 9629
   $593 = $ReallocAsyncCtx5 + 16 | 0; //@line 9630
   HEAP32[$593 >> 2] = $8; //@line 9631
   $594 = $ReallocAsyncCtx5 + 20 | 0; //@line 9632
   HEAP32[$594 >> 2] = $10; //@line 9633
   $595 = $ReallocAsyncCtx5 + 24 | 0; //@line 9634
   HEAP32[$595 >> 2] = $12; //@line 9635
   $596 = $ReallocAsyncCtx5 + 28 | 0; //@line 9636
   HEAP32[$596 >> 2] = $14; //@line 9637
   $597 = $ReallocAsyncCtx5 + 32 | 0; //@line 9638
   HEAP8[$597 >> 0] = $16; //@line 9639
   $598 = $ReallocAsyncCtx5 + 33 | 0; //@line 9640
   HEAP8[$598 >> 0] = $18; //@line 9641
   $599 = $ReallocAsyncCtx5 + 36 | 0; //@line 9642
   HEAP32[$599 >> 2] = $20; //@line 9643
   $600 = $ReallocAsyncCtx5 + 40 | 0; //@line 9644
   HEAP32[$600 >> 2] = $22; //@line 9645
   $601 = $ReallocAsyncCtx5 + 44 | 0; //@line 9646
   HEAP32[$601 >> 2] = $24; //@line 9647
   $602 = $ReallocAsyncCtx5 + 48 | 0; //@line 9648
   HEAP8[$602 >> 0] = $26; //@line 9649
   $603 = $ReallocAsyncCtx5 + 52 | 0; //@line 9650
   HEAP32[$603 >> 2] = $28; //@line 9651
   $604 = $ReallocAsyncCtx5 + 56 | 0; //@line 9652
   HEAP32[$604 >> 2] = $30; //@line 9653
   $605 = $ReallocAsyncCtx5 + 60 | 0; //@line 9654
   HEAP32[$605 >> 2] = $32; //@line 9655
   $606 = $ReallocAsyncCtx5 + 64 | 0; //@line 9656
   HEAP32[$606 >> 2] = $34; //@line 9657
   $607 = $ReallocAsyncCtx5 + 68 | 0; //@line 9658
   HEAP32[$607 >> 2] = $36; //@line 9659
   $608 = $ReallocAsyncCtx5 + 72 | 0; //@line 9660
   HEAP32[$608 >> 2] = $38; //@line 9661
   $609 = $ReallocAsyncCtx5 + 76 | 0; //@line 9662
   HEAP32[$609 >> 2] = $40; //@line 9663
   $610 = $ReallocAsyncCtx5 + 80 | 0; //@line 9664
   HEAP32[$610 >> 2] = $42; //@line 9665
   $611 = $ReallocAsyncCtx5 + 84 | 0; //@line 9666
   HEAP32[$611 >> 2] = $44; //@line 9667
   $612 = $ReallocAsyncCtx5 + 88 | 0; //@line 9668
   HEAP32[$612 >> 2] = $46; //@line 9669
   $613 = $ReallocAsyncCtx5 + 92 | 0; //@line 9670
   HEAP32[$613 >> 2] = $48; //@line 9671
   $614 = $ReallocAsyncCtx5 + 96 | 0; //@line 9672
   HEAP32[$614 >> 2] = $50; //@line 9673
   $615 = $ReallocAsyncCtx5 + 100 | 0; //@line 9674
   HEAP32[$615 >> 2] = $52; //@line 9675
   $616 = $ReallocAsyncCtx5 + 104 | 0; //@line 9676
   HEAP32[$616 >> 2] = $54; //@line 9677
   $617 = $ReallocAsyncCtx5 + 108 | 0; //@line 9678
   HEAP32[$617 >> 2] = $56; //@line 9679
   $618 = $ReallocAsyncCtx5 + 112 | 0; //@line 9680
   HEAP32[$618 >> 2] = $58; //@line 9681
   $619 = $ReallocAsyncCtx5 + 116 | 0; //@line 9682
   HEAP32[$619 >> 2] = $60; //@line 9683
   $620 = $ReallocAsyncCtx5 + 120 | 0; //@line 9684
   HEAP32[$620 >> 2] = $62; //@line 9685
   $621 = $ReallocAsyncCtx5 + 124 | 0; //@line 9686
   HEAP32[$621 >> 2] = $64; //@line 9687
   $622 = $ReallocAsyncCtx5 + 128 | 0; //@line 9688
   HEAP32[$622 >> 2] = $66; //@line 9689
   $623 = $ReallocAsyncCtx5 + 132 | 0; //@line 9690
   HEAP32[$623 >> 2] = $68; //@line 9691
   $624 = $ReallocAsyncCtx5 + 136 | 0; //@line 9692
   HEAP32[$624 >> 2] = $70; //@line 9693
   $625 = $ReallocAsyncCtx5 + 140 | 0; //@line 9694
   HEAP32[$625 >> 2] = $72; //@line 9695
   $626 = $ReallocAsyncCtx5 + 144 | 0; //@line 9696
   HEAP32[$626 >> 2] = $74; //@line 9697
   $627 = $ReallocAsyncCtx5 + 148 | 0; //@line 9698
   HEAP32[$627 >> 2] = $76; //@line 9699
   $628 = $ReallocAsyncCtx5 + 152 | 0; //@line 9700
   HEAP32[$628 >> 2] = $78; //@line 9701
   $629 = $ReallocAsyncCtx5 + 156 | 0; //@line 9702
   HEAP32[$629 >> 2] = $80; //@line 9703
   $630 = $ReallocAsyncCtx5 + 160 | 0; //@line 9704
   HEAP32[$630 >> 2] = $82; //@line 9705
   $631 = $ReallocAsyncCtx5 + 164 | 0; //@line 9706
   HEAP32[$631 >> 2] = $84; //@line 9707
   $632 = $ReallocAsyncCtx5 + 168 | 0; //@line 9708
   HEAP32[$632 >> 2] = $86; //@line 9709
   $633 = $ReallocAsyncCtx5 + 172 | 0; //@line 9710
   HEAP32[$633 >> 2] = $88; //@line 9711
   $634 = $ReallocAsyncCtx5 + 176 | 0; //@line 9712
   HEAP32[$634 >> 2] = $90; //@line 9713
   $635 = $ReallocAsyncCtx5 + 180 | 0; //@line 9714
   HEAP8[$635 >> 0] = $578; //@line 9715
   $636 = $ReallocAsyncCtx5 + 184 | 0; //@line 9716
   HEAP32[$636 >> 2] = $94; //@line 9717
   $637 = $ReallocAsyncCtx5 + 188 | 0; //@line 9718
   HEAP32[$637 >> 2] = $96; //@line 9719
   $638 = $ReallocAsyncCtx5 + 192 | 0; //@line 9720
   HEAP32[$638 >> 2] = $98; //@line 9721
   $639 = $ReallocAsyncCtx5 + 196 | 0; //@line 9722
   HEAP32[$639 >> 2] = $100; //@line 9723
   $640 = $ReallocAsyncCtx5 + 200 | 0; //@line 9724
   HEAP32[$640 >> 2] = $102; //@line 9725
   $641 = $ReallocAsyncCtx5 + 204 | 0; //@line 9726
   HEAP32[$641 >> 2] = $104; //@line 9727
   $642 = $ReallocAsyncCtx5 + 208 | 0; //@line 9728
   HEAP32[$642 >> 2] = $106; //@line 9729
   $643 = $ReallocAsyncCtx5 + 212 | 0; //@line 9730
   HEAP32[$643 >> 2] = $108; //@line 9731
   $644 = $ReallocAsyncCtx5 + 216 | 0; //@line 9732
   HEAP32[$644 >> 2] = $110; //@line 9733
   $645 = $ReallocAsyncCtx5 + 220 | 0; //@line 9734
   HEAP32[$645 >> 2] = $112; //@line 9735
   $646 = $ReallocAsyncCtx5 + 224 | 0; //@line 9736
   HEAP32[$646 >> 2] = $114; //@line 9737
   $647 = $ReallocAsyncCtx5 + 228 | 0; //@line 9738
   HEAP32[$647 >> 2] = $116; //@line 9739
   $648 = $ReallocAsyncCtx5 + 232 | 0; //@line 9740
   HEAP32[$648 >> 2] = $118; //@line 9741
   $649 = $ReallocAsyncCtx5 + 236 | 0; //@line 9742
   HEAP32[$649 >> 2] = $120; //@line 9743
   $650 = $ReallocAsyncCtx5 + 240 | 0; //@line 9744
   HEAP32[$650 >> 2] = $122; //@line 9745
   $651 = $ReallocAsyncCtx5 + 244 | 0; //@line 9746
   HEAP32[$651 >> 2] = $124; //@line 9747
   $652 = $ReallocAsyncCtx5 + 248 | 0; //@line 9748
   HEAP32[$652 >> 2] = $126; //@line 9749
   $653 = $ReallocAsyncCtx5 + 252 | 0; //@line 9750
   HEAP32[$653 >> 2] = $128; //@line 9751
   $654 = $ReallocAsyncCtx5 + 256 | 0; //@line 9752
   HEAP32[$654 >> 2] = $130; //@line 9753
   $655 = $ReallocAsyncCtx5 + 260 | 0; //@line 9754
   HEAP32[$655 >> 2] = $132; //@line 9755
   $656 = $ReallocAsyncCtx5 + 264 | 0; //@line 9756
   HEAP32[$656 >> 2] = $134; //@line 9757
   sp = STACKTOP; //@line 9758
   return;
  }
  HEAP8[___async_retval >> 0] = $589; //@line 9762
  ___async_unwind = 0; //@line 9763
  HEAP32[$ReallocAsyncCtx5 >> 2] = 594; //@line 9764
  $590 = $ReallocAsyncCtx5 + 4 | 0; //@line 9765
  HEAP32[$590 >> 2] = $2; //@line 9766
  $591 = $ReallocAsyncCtx5 + 8 | 0; //@line 9767
  HEAP32[$591 >> 2] = $4; //@line 9768
  $592 = $ReallocAsyncCtx5 + 12 | 0; //@line 9769
  HEAP32[$592 >> 2] = $6; //@line 9770
  $593 = $ReallocAsyncCtx5 + 16 | 0; //@line 9771
  HEAP32[$593 >> 2] = $8; //@line 9772
  $594 = $ReallocAsyncCtx5 + 20 | 0; //@line 9773
  HEAP32[$594 >> 2] = $10; //@line 9774
  $595 = $ReallocAsyncCtx5 + 24 | 0; //@line 9775
  HEAP32[$595 >> 2] = $12; //@line 9776
  $596 = $ReallocAsyncCtx5 + 28 | 0; //@line 9777
  HEAP32[$596 >> 2] = $14; //@line 9778
  $597 = $ReallocAsyncCtx5 + 32 | 0; //@line 9779
  HEAP8[$597 >> 0] = $16; //@line 9780
  $598 = $ReallocAsyncCtx5 + 33 | 0; //@line 9781
  HEAP8[$598 >> 0] = $18; //@line 9782
  $599 = $ReallocAsyncCtx5 + 36 | 0; //@line 9783
  HEAP32[$599 >> 2] = $20; //@line 9784
  $600 = $ReallocAsyncCtx5 + 40 | 0; //@line 9785
  HEAP32[$600 >> 2] = $22; //@line 9786
  $601 = $ReallocAsyncCtx5 + 44 | 0; //@line 9787
  HEAP32[$601 >> 2] = $24; //@line 9788
  $602 = $ReallocAsyncCtx5 + 48 | 0; //@line 9789
  HEAP8[$602 >> 0] = $26; //@line 9790
  $603 = $ReallocAsyncCtx5 + 52 | 0; //@line 9791
  HEAP32[$603 >> 2] = $28; //@line 9792
  $604 = $ReallocAsyncCtx5 + 56 | 0; //@line 9793
  HEAP32[$604 >> 2] = $30; //@line 9794
  $605 = $ReallocAsyncCtx5 + 60 | 0; //@line 9795
  HEAP32[$605 >> 2] = $32; //@line 9796
  $606 = $ReallocAsyncCtx5 + 64 | 0; //@line 9797
  HEAP32[$606 >> 2] = $34; //@line 9798
  $607 = $ReallocAsyncCtx5 + 68 | 0; //@line 9799
  HEAP32[$607 >> 2] = $36; //@line 9800
  $608 = $ReallocAsyncCtx5 + 72 | 0; //@line 9801
  HEAP32[$608 >> 2] = $38; //@line 9802
  $609 = $ReallocAsyncCtx5 + 76 | 0; //@line 9803
  HEAP32[$609 >> 2] = $40; //@line 9804
  $610 = $ReallocAsyncCtx5 + 80 | 0; //@line 9805
  HEAP32[$610 >> 2] = $42; //@line 9806
  $611 = $ReallocAsyncCtx5 + 84 | 0; //@line 9807
  HEAP32[$611 >> 2] = $44; //@line 9808
  $612 = $ReallocAsyncCtx5 + 88 | 0; //@line 9809
  HEAP32[$612 >> 2] = $46; //@line 9810
  $613 = $ReallocAsyncCtx5 + 92 | 0; //@line 9811
  HEAP32[$613 >> 2] = $48; //@line 9812
  $614 = $ReallocAsyncCtx5 + 96 | 0; //@line 9813
  HEAP32[$614 >> 2] = $50; //@line 9814
  $615 = $ReallocAsyncCtx5 + 100 | 0; //@line 9815
  HEAP32[$615 >> 2] = $52; //@line 9816
  $616 = $ReallocAsyncCtx5 + 104 | 0; //@line 9817
  HEAP32[$616 >> 2] = $54; //@line 9818
  $617 = $ReallocAsyncCtx5 + 108 | 0; //@line 9819
  HEAP32[$617 >> 2] = $56; //@line 9820
  $618 = $ReallocAsyncCtx5 + 112 | 0; //@line 9821
  HEAP32[$618 >> 2] = $58; //@line 9822
  $619 = $ReallocAsyncCtx5 + 116 | 0; //@line 9823
  HEAP32[$619 >> 2] = $60; //@line 9824
  $620 = $ReallocAsyncCtx5 + 120 | 0; //@line 9825
  HEAP32[$620 >> 2] = $62; //@line 9826
  $621 = $ReallocAsyncCtx5 + 124 | 0; //@line 9827
  HEAP32[$621 >> 2] = $64; //@line 9828
  $622 = $ReallocAsyncCtx5 + 128 | 0; //@line 9829
  HEAP32[$622 >> 2] = $66; //@line 9830
  $623 = $ReallocAsyncCtx5 + 132 | 0; //@line 9831
  HEAP32[$623 >> 2] = $68; //@line 9832
  $624 = $ReallocAsyncCtx5 + 136 | 0; //@line 9833
  HEAP32[$624 >> 2] = $70; //@line 9834
  $625 = $ReallocAsyncCtx5 + 140 | 0; //@line 9835
  HEAP32[$625 >> 2] = $72; //@line 9836
  $626 = $ReallocAsyncCtx5 + 144 | 0; //@line 9837
  HEAP32[$626 >> 2] = $74; //@line 9838
  $627 = $ReallocAsyncCtx5 + 148 | 0; //@line 9839
  HEAP32[$627 >> 2] = $76; //@line 9840
  $628 = $ReallocAsyncCtx5 + 152 | 0; //@line 9841
  HEAP32[$628 >> 2] = $78; //@line 9842
  $629 = $ReallocAsyncCtx5 + 156 | 0; //@line 9843
  HEAP32[$629 >> 2] = $80; //@line 9844
  $630 = $ReallocAsyncCtx5 + 160 | 0; //@line 9845
  HEAP32[$630 >> 2] = $82; //@line 9846
  $631 = $ReallocAsyncCtx5 + 164 | 0; //@line 9847
  HEAP32[$631 >> 2] = $84; //@line 9848
  $632 = $ReallocAsyncCtx5 + 168 | 0; //@line 9849
  HEAP32[$632 >> 2] = $86; //@line 9850
  $633 = $ReallocAsyncCtx5 + 172 | 0; //@line 9851
  HEAP32[$633 >> 2] = $88; //@line 9852
  $634 = $ReallocAsyncCtx5 + 176 | 0; //@line 9853
  HEAP32[$634 >> 2] = $90; //@line 9854
  $635 = $ReallocAsyncCtx5 + 180 | 0; //@line 9855
  HEAP8[$635 >> 0] = $578; //@line 9856
  $636 = $ReallocAsyncCtx5 + 184 | 0; //@line 9857
  HEAP32[$636 >> 2] = $94; //@line 9858
  $637 = $ReallocAsyncCtx5 + 188 | 0; //@line 9859
  HEAP32[$637 >> 2] = $96; //@line 9860
  $638 = $ReallocAsyncCtx5 + 192 | 0; //@line 9861
  HEAP32[$638 >> 2] = $98; //@line 9862
  $639 = $ReallocAsyncCtx5 + 196 | 0; //@line 9863
  HEAP32[$639 >> 2] = $100; //@line 9864
  $640 = $ReallocAsyncCtx5 + 200 | 0; //@line 9865
  HEAP32[$640 >> 2] = $102; //@line 9866
  $641 = $ReallocAsyncCtx5 + 204 | 0; //@line 9867
  HEAP32[$641 >> 2] = $104; //@line 9868
  $642 = $ReallocAsyncCtx5 + 208 | 0; //@line 9869
  HEAP32[$642 >> 2] = $106; //@line 9870
  $643 = $ReallocAsyncCtx5 + 212 | 0; //@line 9871
  HEAP32[$643 >> 2] = $108; //@line 9872
  $644 = $ReallocAsyncCtx5 + 216 | 0; //@line 9873
  HEAP32[$644 >> 2] = $110; //@line 9874
  $645 = $ReallocAsyncCtx5 + 220 | 0; //@line 9875
  HEAP32[$645 >> 2] = $112; //@line 9876
  $646 = $ReallocAsyncCtx5 + 224 | 0; //@line 9877
  HEAP32[$646 >> 2] = $114; //@line 9878
  $647 = $ReallocAsyncCtx5 + 228 | 0; //@line 9879
  HEAP32[$647 >> 2] = $116; //@line 9880
  $648 = $ReallocAsyncCtx5 + 232 | 0; //@line 9881
  HEAP32[$648 >> 2] = $118; //@line 9882
  $649 = $ReallocAsyncCtx5 + 236 | 0; //@line 9883
  HEAP32[$649 >> 2] = $120; //@line 9884
  $650 = $ReallocAsyncCtx5 + 240 | 0; //@line 9885
  HEAP32[$650 >> 2] = $122; //@line 9886
  $651 = $ReallocAsyncCtx5 + 244 | 0; //@line 9887
  HEAP32[$651 >> 2] = $124; //@line 9888
  $652 = $ReallocAsyncCtx5 + 248 | 0; //@line 9889
  HEAP32[$652 >> 2] = $126; //@line 9890
  $653 = $ReallocAsyncCtx5 + 252 | 0; //@line 9891
  HEAP32[$653 >> 2] = $128; //@line 9892
  $654 = $ReallocAsyncCtx5 + 256 | 0; //@line 9893
  HEAP32[$654 >> 2] = $130; //@line 9894
  $655 = $ReallocAsyncCtx5 + 260 | 0; //@line 9895
  HEAP32[$655 >> 2] = $132; //@line 9896
  $656 = $ReallocAsyncCtx5 + 264 | 0; //@line 9897
  HEAP32[$656 >> 2] = $134; //@line 9898
  sp = STACKTOP; //@line 9899
  return;
 } else if ((label | 0) == 31) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 9904
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_227($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i108 = 0, $$096$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $234 = 0, $239 = 0, $24 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $347 = 0, $348 = 0, $36 = 0, $38 = 0, $385 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $462 = 0, $463 = 0, $473 = 0, $477 = 0, $48 = 0, $481 = 0, $484 = 0, $490 = 0, $493 = 0, $494 = 0, $50 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $58 = 0, $590 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4163
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4165
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4167
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4169
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4171
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4173
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4175
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4177
 $16 = HEAP8[$0 + 32 >> 0] | 0; //@line 4179
 $18 = HEAP8[$0 + 33 >> 0] | 0; //@line 4181
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 4183
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 4185
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 4187
 $26 = HEAP8[$0 + 48 >> 0] | 0; //@line 4189
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 4191
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 4193
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 4195
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 4197
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 4199
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 4201
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 4203
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 4205
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 4207
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 4209
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 4211
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 4213
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 4215
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 4217
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 4219
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 4221
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 4223
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 4225
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 4227
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 4229
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 4231
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 4233
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 4235
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 4237
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 4239
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 4241
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 4243
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 4245
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 4247
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 4249
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 4251
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 4253
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 4255
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 4257
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 4259
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 4261
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 4263
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 4265
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 4267
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 4269
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 4271
 $110 = HEAP8[$0 + 216 >> 0] | 0; //@line 4273
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 4275
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 4277
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 4279
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 4281
 $120 = HEAP32[$0 + 236 >> 2] | 0; //@line 4283
 $122 = HEAP32[$0 + 240 >> 2] | 0; //@line 4285
 $124 = HEAP32[$0 + 244 >> 2] | 0; //@line 4287
 $126 = HEAP32[$0 + 248 >> 2] | 0; //@line 4289
 $128 = HEAP32[$0 + 252 >> 2] | 0; //@line 4291
 $130 = HEAP32[$0 + 256 >> 2] | 0; //@line 4293
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 4295
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 4297
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 4299
 $462 = HEAP8[$48 >> 0] | 0; //@line 4301
 $463 = $462 & 255; //@line 4302
 if (((-128 - (HEAP8[$42 >> 0] | 0) & 255) + -1 | 0) > ($463 | 0)) {
  HEAP8[$8 + 4 + $463 >> 0] = 7; //@line 4313
  HEAP8[$48 >> 0] = $462 + 2 << 24 >> 24; //@line 4314
  HEAP8[($462 + 1 & 255) + ($8 + 4) >> 0] = $AsyncRetVal; //@line 4315
  HEAP8[$98 >> 0] = 1; //@line 4316
  $$0$i108 = 0; //@line 4317
 } else {
  $$0$i108 = -1e3; //@line 4319
 }
 $$0$be = $110; //@line 4321
 $$096$be = $$0$i108; //@line 4321
 L5 : while (1) {
  if (($$0$be & 255) >= ($18 & 255)) {
   label = 31; //@line 4325
   break;
  }
  $137 = $$0$be + 1 << 24 >> 24; //@line 4329
  switch (HEAP8[$12 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 4334
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 4339
    break L5;
    break;
   }
  case 7:
   {
    label = 14; //@line 4344
    break L5;
    break;
   }
  case 9:
   {
    label = 22; //@line 4349
    break L5;
    break;
   }
  case 10:
   {
    label = 27; //@line 4354
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$24 >> 2] = 0; //@line 4359
    HEAP8[$44 >> 0] = HEAP8[$12 + ($137 & 255) >> 0] | 0; //@line 4364
    HEAP8[$74 >> 0] = HEAP8[$12 + ($$0$be + 2 & 255) >> 0] | 0; //@line 4369
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 4370
    continue L5;
    break;
   }
  case 4:
   {
    $231 = $$0$be + 2 << 24 >> 24; //@line 4375
    $234 = HEAP8[$12 + ($137 & 255) >> 0] | 0; //@line 4378
    HEAP8[$106 >> 0] = $234; //@line 4379
    HEAP16[$76 >> 1] = 1 << ($234 & 255); //@line 4383
    $239 = HEAP8[$48 >> 0] | 0; //@line 4385
    if (($239 & 255) >= (-128 - (HEAP8[$42 >> 0] | 0) & 255)) {
     $$0$be = $231; //@line 4389
     $$096$be = -1e3; //@line 4389
     continue L5;
    }
    HEAP8[$48 >> 0] = $239 + 1 << 24 >> 24; //@line 4395
    HEAP8[($239 & 255) + ($8 + 4) >> 0] = 4; //@line 4396
    HEAP8[$98 >> 0] = 1; //@line 4397
    $$0$be = $231; //@line 4398
    $$096$be = 0; //@line 4398
    continue L5;
    break;
   }
  case 6:
   {
    $347 = HEAP8[$48 >> 0] | 0; //@line 4404
    $348 = $347 & 255; //@line 4405
    if (((-128 - (HEAP8[$42 >> 0] | 0) & 255) + -2 | 0) <= ($348 | 0)) {
     $$0$be = $137; //@line 4411
     $$096$be = -1e3; //@line 4411
     continue L5;
    }
    HEAP8[$8 + 4 + $348 >> 0] = 6; //@line 4416
    HEAP8[($347 + 1 & 255) + ($8 + 4) >> 0] = -1; //@line 4420
    HEAP8[$48 >> 0] = $347 + 3 << 24 >> 24; //@line 4422
    HEAP8[($347 + 2 & 255) + ($8 + 4) >> 0] = $26; //@line 4425
    HEAP8[$98 >> 0] = 1; //@line 4426
    $$0$be = $137; //@line 4427
    $$096$be = 0; //@line 4427
    continue L5;
    break;
   }
  case 8:
   {
    $473 = $$0$be + 2 << 24 >> 24; //@line 4432
    $477 = HEAP8[$12 + ($137 & 255) >> 0] & 15; //@line 4436
    $481 = ($477 + ($477 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 4441
    HEAP32[$130 >> 2] = $481; //@line 4442
    HEAP32[$126 >> 2] = $481 + 1e3; //@line 4444
    $484 = HEAP8[$48 >> 0] | 0; //@line 4446
    if (($484 & 255) >= (-128 - (HEAP8[$42 >> 0] | 0) & 255)) {
     $$0$be = $473; //@line 4450
     $$096$be = -1e3; //@line 4450
     continue L5;
    }
    HEAP8[$48 >> 0] = $484 + 1 << 24 >> 24; //@line 4456
    HEAP8[($484 & 255) + ($8 + 4) >> 0] = 8; //@line 4457
    HEAP8[$10 >> 0] = 1; //@line 4458
    HEAP8[$98 >> 0] = 1; //@line 4459
    $$0$be = $473; //@line 4460
    $$096$be = 0; //@line 4460
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $137; //@line 4465
    $$096$be = -1013; //@line 4465
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$36 >> 0] = 0; //@line 4471
  HEAP8[$88 >> 0] = 0; //@line 4472
  HEAP8[$96 >> 0] = 0; //@line 4473
  HEAP8[$104 >> 0] = 0; //@line 4474
  $148 = $137 & 255; //@line 4475
  $149 = $148 + -1 | 0; //@line 4476
  HEAP32[$60 >> 2] = $12 + $149; //@line 4478
  HEAP8[$100 >> 0] = $22 - $149; //@line 4481
  HEAP8[$90 >> 0] = HEAP8[$78 >> 0] | 0; //@line 4483
  HEAP8[$134 >> 0] = HEAP8[$122 >> 0] | 0; //@line 4485
  HEAP8[$120 >> 0] = HEAP8[$112 >> 0] | 0; //@line 4487
  HEAP8[$2 >> 0] = HEAP8[$28 >> 0] | 0; //@line 4489
  HEAP8[$62 >> 0] = HEAP8[$14 >> 0] | 0; //@line 4491
  $160 = HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] | 0; //@line 4494
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 4495
  $161 = FUNCTION_TABLE_iiiiiii[$160 & 3]($34, $30, $36, $88, $96, $104) | 0; //@line 4496
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 4499
   $162 = $ReallocAsyncCtx + 4 | 0; //@line 4500
   HEAP32[$162 >> 2] = $2; //@line 4501
   $163 = $ReallocAsyncCtx + 8 | 0; //@line 4502
   HEAP32[$163 >> 2] = $4; //@line 4503
   $164 = $ReallocAsyncCtx + 12 | 0; //@line 4504
   HEAP32[$164 >> 2] = $6; //@line 4505
   $165 = $ReallocAsyncCtx + 16 | 0; //@line 4506
   HEAP32[$165 >> 2] = $8; //@line 4507
   $166 = $ReallocAsyncCtx + 20 | 0; //@line 4508
   HEAP32[$166 >> 2] = $22; //@line 4509
   $167 = $ReallocAsyncCtx + 24 | 0; //@line 4510
   HEAP32[$167 >> 2] = $12; //@line 4511
   $168 = $ReallocAsyncCtx + 28 | 0; //@line 4512
   HEAP32[$168 >> 2] = $14; //@line 4513
   $169 = $ReallocAsyncCtx + 32 | 0; //@line 4514
   HEAP32[$169 >> 2] = $10; //@line 4515
   $170 = $ReallocAsyncCtx + 36 | 0; //@line 4516
   HEAP8[$170 >> 0] = $18; //@line 4517
   $171 = $ReallocAsyncCtx + 40 | 0; //@line 4518
   HEAP32[$171 >> 2] = $20; //@line 4519
   $172 = $ReallocAsyncCtx + 44 | 0; //@line 4520
   HEAP32[$172 >> 2] = $24; //@line 4521
   $173 = $ReallocAsyncCtx + 48 | 0; //@line 4522
   HEAP8[$173 >> 0] = $16; //@line 4523
   $174 = $ReallocAsyncCtx + 49 | 0; //@line 4524
   HEAP8[$174 >> 0] = $26; //@line 4525
   $175 = $ReallocAsyncCtx + 52 | 0; //@line 4526
   HEAP32[$175 >> 2] = $28; //@line 4527
   $176 = $ReallocAsyncCtx + 56 | 0; //@line 4528
   HEAP32[$176 >> 2] = $30; //@line 4529
   $177 = $ReallocAsyncCtx + 60 | 0; //@line 4530
   HEAP32[$177 >> 2] = $32; //@line 4531
   $178 = $ReallocAsyncCtx + 64 | 0; //@line 4532
   HEAP32[$178 >> 2] = $34; //@line 4533
   $179 = $ReallocAsyncCtx + 68 | 0; //@line 4534
   HEAP32[$179 >> 2] = $36; //@line 4535
   $180 = $ReallocAsyncCtx + 72 | 0; //@line 4536
   HEAP32[$180 >> 2] = $38; //@line 4537
   $181 = $ReallocAsyncCtx + 76 | 0; //@line 4538
   HEAP32[$181 >> 2] = $40; //@line 4539
   $182 = $ReallocAsyncCtx + 80 | 0; //@line 4540
   HEAP32[$182 >> 2] = $42; //@line 4541
   $183 = $ReallocAsyncCtx + 84 | 0; //@line 4542
   HEAP32[$183 >> 2] = $44; //@line 4543
   $184 = $ReallocAsyncCtx + 88 | 0; //@line 4544
   HEAP32[$184 >> 2] = $46; //@line 4545
   $185 = $ReallocAsyncCtx + 92 | 0; //@line 4546
   HEAP32[$185 >> 2] = $48; //@line 4547
   $186 = $ReallocAsyncCtx + 96 | 0; //@line 4548
   HEAP32[$186 >> 2] = $50; //@line 4549
   $187 = $ReallocAsyncCtx + 100 | 0; //@line 4550
   HEAP32[$187 >> 2] = $52; //@line 4551
   $188 = $ReallocAsyncCtx + 104 | 0; //@line 4552
   HEAP32[$188 >> 2] = $54; //@line 4553
   $189 = $ReallocAsyncCtx + 108 | 0; //@line 4554
   HEAP32[$189 >> 2] = $56; //@line 4555
   $190 = $ReallocAsyncCtx + 112 | 0; //@line 4556
   HEAP32[$190 >> 2] = $60; //@line 4557
   $191 = $ReallocAsyncCtx + 116 | 0; //@line 4558
   HEAP32[$191 >> 2] = $62; //@line 4559
   $192 = $ReallocAsyncCtx + 120 | 0; //@line 4560
   HEAP32[$192 >> 2] = $58; //@line 4561
   $193 = $ReallocAsyncCtx + 124 | 0; //@line 4562
   HEAP32[$193 >> 2] = $64; //@line 4563
   $194 = $ReallocAsyncCtx + 128 | 0; //@line 4564
   HEAP32[$194 >> 2] = $68; //@line 4565
   $195 = $ReallocAsyncCtx + 132 | 0; //@line 4566
   HEAP32[$195 >> 2] = $66; //@line 4567
   $196 = $ReallocAsyncCtx + 136 | 0; //@line 4568
   HEAP32[$196 >> 2] = $70; //@line 4569
   $197 = $ReallocAsyncCtx + 140 | 0; //@line 4570
   HEAP32[$197 >> 2] = $72; //@line 4571
   $198 = $ReallocAsyncCtx + 144 | 0; //@line 4572
   HEAP32[$198 >> 2] = $74; //@line 4573
   $199 = $ReallocAsyncCtx + 148 | 0; //@line 4574
   HEAP32[$199 >> 2] = $76; //@line 4575
   $200 = $ReallocAsyncCtx + 152 | 0; //@line 4576
   HEAP32[$200 >> 2] = $78; //@line 4577
   $201 = $ReallocAsyncCtx + 156 | 0; //@line 4578
   HEAP32[$201 >> 2] = $80; //@line 4579
   $202 = $ReallocAsyncCtx + 160 | 0; //@line 4580
   HEAP32[$202 >> 2] = $82; //@line 4581
   $203 = $ReallocAsyncCtx + 164 | 0; //@line 4582
   HEAP32[$203 >> 2] = $84; //@line 4583
   $204 = $ReallocAsyncCtx + 168 | 0; //@line 4584
   HEAP32[$204 >> 2] = $88; //@line 4585
   $205 = $ReallocAsyncCtx + 172 | 0; //@line 4586
   HEAP32[$205 >> 2] = $90; //@line 4587
   $206 = $ReallocAsyncCtx + 176 | 0; //@line 4588
   HEAP32[$206 >> 2] = $86; //@line 4589
   $207 = $ReallocAsyncCtx + 180 | 0; //@line 4590
   HEAP32[$207 >> 2] = $92; //@line 4591
   $208 = $ReallocAsyncCtx + 184 | 0; //@line 4592
   HEAP32[$208 >> 2] = $94; //@line 4593
   $209 = $ReallocAsyncCtx + 188 | 0; //@line 4594
   HEAP32[$209 >> 2] = $96; //@line 4595
   $210 = $ReallocAsyncCtx + 192 | 0; //@line 4596
   HEAP32[$210 >> 2] = $$096$be; //@line 4597
   $211 = $ReallocAsyncCtx + 196 | 0; //@line 4598
   HEAP32[$211 >> 2] = $98; //@line 4599
   $212 = $ReallocAsyncCtx + 200 | 0; //@line 4600
   HEAP32[$212 >> 2] = $100; //@line 4601
   $213 = $ReallocAsyncCtx + 204 | 0; //@line 4602
   HEAP32[$213 >> 2] = $102; //@line 4603
   $214 = $ReallocAsyncCtx + 208 | 0; //@line 4604
   HEAP32[$214 >> 2] = $148; //@line 4605
   $215 = $ReallocAsyncCtx + 212 | 0; //@line 4606
   HEAP32[$215 >> 2] = $104; //@line 4607
   $216 = $ReallocAsyncCtx + 216 | 0; //@line 4608
   HEAP32[$216 >> 2] = $106; //@line 4609
   $217 = $ReallocAsyncCtx + 220 | 0; //@line 4610
   HEAP32[$217 >> 2] = $108; //@line 4611
   $218 = $ReallocAsyncCtx + 224 | 0; //@line 4612
   HEAP32[$218 >> 2] = $112; //@line 4613
   $219 = $ReallocAsyncCtx + 228 | 0; //@line 4614
   HEAP32[$219 >> 2] = $114; //@line 4615
   $220 = $ReallocAsyncCtx + 232 | 0; //@line 4616
   HEAP32[$220 >> 2] = $116; //@line 4617
   $221 = $ReallocAsyncCtx + 236 | 0; //@line 4618
   HEAP32[$221 >> 2] = $118; //@line 4619
   $222 = $ReallocAsyncCtx + 240 | 0; //@line 4620
   HEAP32[$222 >> 2] = $120; //@line 4621
   $223 = $ReallocAsyncCtx + 244 | 0; //@line 4622
   HEAP32[$223 >> 2] = $122; //@line 4623
   $224 = $ReallocAsyncCtx + 248 | 0; //@line 4624
   HEAP32[$224 >> 2] = $124; //@line 4625
   $225 = $ReallocAsyncCtx + 252 | 0; //@line 4626
   HEAP32[$225 >> 2] = $126; //@line 4627
   $226 = $ReallocAsyncCtx + 256 | 0; //@line 4628
   HEAP32[$226 >> 2] = $128; //@line 4629
   $227 = $ReallocAsyncCtx + 260 | 0; //@line 4630
   HEAP32[$227 >> 2] = $130; //@line 4631
   $228 = $ReallocAsyncCtx + 264 | 0; //@line 4632
   HEAP32[$228 >> 2] = $132; //@line 4633
   $229 = $ReallocAsyncCtx + 268 | 0; //@line 4634
   HEAP32[$229 >> 2] = $134; //@line 4635
   sp = STACKTOP; //@line 4636
   return;
  }
  HEAP8[___async_retval >> 0] = $161; //@line 4640
  ___async_unwind = 0; //@line 4641
  HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 4642
  $162 = $ReallocAsyncCtx + 4 | 0; //@line 4643
  HEAP32[$162 >> 2] = $2; //@line 4644
  $163 = $ReallocAsyncCtx + 8 | 0; //@line 4645
  HEAP32[$163 >> 2] = $4; //@line 4646
  $164 = $ReallocAsyncCtx + 12 | 0; //@line 4647
  HEAP32[$164 >> 2] = $6; //@line 4648
  $165 = $ReallocAsyncCtx + 16 | 0; //@line 4649
  HEAP32[$165 >> 2] = $8; //@line 4650
  $166 = $ReallocAsyncCtx + 20 | 0; //@line 4651
  HEAP32[$166 >> 2] = $22; //@line 4652
  $167 = $ReallocAsyncCtx + 24 | 0; //@line 4653
  HEAP32[$167 >> 2] = $12; //@line 4654
  $168 = $ReallocAsyncCtx + 28 | 0; //@line 4655
  HEAP32[$168 >> 2] = $14; //@line 4656
  $169 = $ReallocAsyncCtx + 32 | 0; //@line 4657
  HEAP32[$169 >> 2] = $10; //@line 4658
  $170 = $ReallocAsyncCtx + 36 | 0; //@line 4659
  HEAP8[$170 >> 0] = $18; //@line 4660
  $171 = $ReallocAsyncCtx + 40 | 0; //@line 4661
  HEAP32[$171 >> 2] = $20; //@line 4662
  $172 = $ReallocAsyncCtx + 44 | 0; //@line 4663
  HEAP32[$172 >> 2] = $24; //@line 4664
  $173 = $ReallocAsyncCtx + 48 | 0; //@line 4665
  HEAP8[$173 >> 0] = $16; //@line 4666
  $174 = $ReallocAsyncCtx + 49 | 0; //@line 4667
  HEAP8[$174 >> 0] = $26; //@line 4668
  $175 = $ReallocAsyncCtx + 52 | 0; //@line 4669
  HEAP32[$175 >> 2] = $28; //@line 4670
  $176 = $ReallocAsyncCtx + 56 | 0; //@line 4671
  HEAP32[$176 >> 2] = $30; //@line 4672
  $177 = $ReallocAsyncCtx + 60 | 0; //@line 4673
  HEAP32[$177 >> 2] = $32; //@line 4674
  $178 = $ReallocAsyncCtx + 64 | 0; //@line 4675
  HEAP32[$178 >> 2] = $34; //@line 4676
  $179 = $ReallocAsyncCtx + 68 | 0; //@line 4677
  HEAP32[$179 >> 2] = $36; //@line 4678
  $180 = $ReallocAsyncCtx + 72 | 0; //@line 4679
  HEAP32[$180 >> 2] = $38; //@line 4680
  $181 = $ReallocAsyncCtx + 76 | 0; //@line 4681
  HEAP32[$181 >> 2] = $40; //@line 4682
  $182 = $ReallocAsyncCtx + 80 | 0; //@line 4683
  HEAP32[$182 >> 2] = $42; //@line 4684
  $183 = $ReallocAsyncCtx + 84 | 0; //@line 4685
  HEAP32[$183 >> 2] = $44; //@line 4686
  $184 = $ReallocAsyncCtx + 88 | 0; //@line 4687
  HEAP32[$184 >> 2] = $46; //@line 4688
  $185 = $ReallocAsyncCtx + 92 | 0; //@line 4689
  HEAP32[$185 >> 2] = $48; //@line 4690
  $186 = $ReallocAsyncCtx + 96 | 0; //@line 4691
  HEAP32[$186 >> 2] = $50; //@line 4692
  $187 = $ReallocAsyncCtx + 100 | 0; //@line 4693
  HEAP32[$187 >> 2] = $52; //@line 4694
  $188 = $ReallocAsyncCtx + 104 | 0; //@line 4695
  HEAP32[$188 >> 2] = $54; //@line 4696
  $189 = $ReallocAsyncCtx + 108 | 0; //@line 4697
  HEAP32[$189 >> 2] = $56; //@line 4698
  $190 = $ReallocAsyncCtx + 112 | 0; //@line 4699
  HEAP32[$190 >> 2] = $60; //@line 4700
  $191 = $ReallocAsyncCtx + 116 | 0; //@line 4701
  HEAP32[$191 >> 2] = $62; //@line 4702
  $192 = $ReallocAsyncCtx + 120 | 0; //@line 4703
  HEAP32[$192 >> 2] = $58; //@line 4704
  $193 = $ReallocAsyncCtx + 124 | 0; //@line 4705
  HEAP32[$193 >> 2] = $64; //@line 4706
  $194 = $ReallocAsyncCtx + 128 | 0; //@line 4707
  HEAP32[$194 >> 2] = $68; //@line 4708
  $195 = $ReallocAsyncCtx + 132 | 0; //@line 4709
  HEAP32[$195 >> 2] = $66; //@line 4710
  $196 = $ReallocAsyncCtx + 136 | 0; //@line 4711
  HEAP32[$196 >> 2] = $70; //@line 4712
  $197 = $ReallocAsyncCtx + 140 | 0; //@line 4713
  HEAP32[$197 >> 2] = $72; //@line 4714
  $198 = $ReallocAsyncCtx + 144 | 0; //@line 4715
  HEAP32[$198 >> 2] = $74; //@line 4716
  $199 = $ReallocAsyncCtx + 148 | 0; //@line 4717
  HEAP32[$199 >> 2] = $76; //@line 4718
  $200 = $ReallocAsyncCtx + 152 | 0; //@line 4719
  HEAP32[$200 >> 2] = $78; //@line 4720
  $201 = $ReallocAsyncCtx + 156 | 0; //@line 4721
  HEAP32[$201 >> 2] = $80; //@line 4722
  $202 = $ReallocAsyncCtx + 160 | 0; //@line 4723
  HEAP32[$202 >> 2] = $82; //@line 4724
  $203 = $ReallocAsyncCtx + 164 | 0; //@line 4725
  HEAP32[$203 >> 2] = $84; //@line 4726
  $204 = $ReallocAsyncCtx + 168 | 0; //@line 4727
  HEAP32[$204 >> 2] = $88; //@line 4728
  $205 = $ReallocAsyncCtx + 172 | 0; //@line 4729
  HEAP32[$205 >> 2] = $90; //@line 4730
  $206 = $ReallocAsyncCtx + 176 | 0; //@line 4731
  HEAP32[$206 >> 2] = $86; //@line 4732
  $207 = $ReallocAsyncCtx + 180 | 0; //@line 4733
  HEAP32[$207 >> 2] = $92; //@line 4734
  $208 = $ReallocAsyncCtx + 184 | 0; //@line 4735
  HEAP32[$208 >> 2] = $94; //@line 4736
  $209 = $ReallocAsyncCtx + 188 | 0; //@line 4737
  HEAP32[$209 >> 2] = $96; //@line 4738
  $210 = $ReallocAsyncCtx + 192 | 0; //@line 4739
  HEAP32[$210 >> 2] = $$096$be; //@line 4740
  $211 = $ReallocAsyncCtx + 196 | 0; //@line 4741
  HEAP32[$211 >> 2] = $98; //@line 4742
  $212 = $ReallocAsyncCtx + 200 | 0; //@line 4743
  HEAP32[$212 >> 2] = $100; //@line 4744
  $213 = $ReallocAsyncCtx + 204 | 0; //@line 4745
  HEAP32[$213 >> 2] = $102; //@line 4746
  $214 = $ReallocAsyncCtx + 208 | 0; //@line 4747
  HEAP32[$214 >> 2] = $148; //@line 4748
  $215 = $ReallocAsyncCtx + 212 | 0; //@line 4749
  HEAP32[$215 >> 2] = $104; //@line 4750
  $216 = $ReallocAsyncCtx + 216 | 0; //@line 4751
  HEAP32[$216 >> 2] = $106; //@line 4752
  $217 = $ReallocAsyncCtx + 220 | 0; //@line 4753
  HEAP32[$217 >> 2] = $108; //@line 4754
  $218 = $ReallocAsyncCtx + 224 | 0; //@line 4755
  HEAP32[$218 >> 2] = $112; //@line 4756
  $219 = $ReallocAsyncCtx + 228 | 0; //@line 4757
  HEAP32[$219 >> 2] = $114; //@line 4758
  $220 = $ReallocAsyncCtx + 232 | 0; //@line 4759
  HEAP32[$220 >> 2] = $116; //@line 4760
  $221 = $ReallocAsyncCtx + 236 | 0; //@line 4761
  HEAP32[$221 >> 2] = $118; //@line 4762
  $222 = $ReallocAsyncCtx + 240 | 0; //@line 4763
  HEAP32[$222 >> 2] = $120; //@line 4764
  $223 = $ReallocAsyncCtx + 244 | 0; //@line 4765
  HEAP32[$223 >> 2] = $122; //@line 4766
  $224 = $ReallocAsyncCtx + 248 | 0; //@line 4767
  HEAP32[$224 >> 2] = $124; //@line 4768
  $225 = $ReallocAsyncCtx + 252 | 0; //@line 4769
  HEAP32[$225 >> 2] = $126; //@line 4770
  $226 = $ReallocAsyncCtx + 256 | 0; //@line 4771
  HEAP32[$226 >> 2] = $128; //@line 4772
  $227 = $ReallocAsyncCtx + 260 | 0; //@line 4773
  HEAP32[$227 >> 2] = $130; //@line 4774
  $228 = $ReallocAsyncCtx + 264 | 0; //@line 4775
  HEAP32[$228 >> 2] = $132; //@line 4776
  $229 = $ReallocAsyncCtx + 268 | 0; //@line 4777
  HEAP32[$229 >> 2] = $134; //@line 4778
  sp = STACKTOP; //@line 4779
  return;
 } else if ((label | 0) == 9) {
  $247 = HEAP8[$12 + ($137 & 255) >> 0] | 0; //@line 4785
  HEAP8[$124 >> 0] = ($247 & 255) >>> 4 & 7; //@line 4790
  HEAP8[$86 >> 0] = $247 & 15; //@line 4792
  $266 = $$0$be + 5 << 24 >> 24; //@line 4806
  HEAP32[$132 >> 2] = (HEAPU8[$12 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$12 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$12 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 4814
  $276 = HEAP32[(HEAP32[$108 >> 2] | 0) + 40 >> 2] | 0; //@line 4817
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 4818
  $277 = FUNCTION_TABLE_iii[$276 & 31]($34, $46) | 0; //@line 4819
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 591; //@line 4822
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 4823
   HEAP32[$278 >> 2] = $2; //@line 4824
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 4825
   HEAP32[$279 >> 2] = $4; //@line 4826
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 4827
   HEAP32[$280 >> 2] = $6; //@line 4828
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 4829
   HEAP32[$281 >> 2] = $8; //@line 4830
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 4831
   HEAP32[$282 >> 2] = $10; //@line 4832
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 4833
   HEAP32[$283 >> 2] = $12; //@line 4834
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 4835
   HEAP32[$284 >> 2] = $14; //@line 4836
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 4837
   HEAP8[$285 >> 0] = $16; //@line 4838
   $286 = $ReallocAsyncCtx2 + 33 | 0; //@line 4839
   HEAP8[$286 >> 0] = $18; //@line 4840
   $287 = $ReallocAsyncCtx2 + 36 | 0; //@line 4841
   HEAP32[$287 >> 2] = $20; //@line 4842
   $288 = $ReallocAsyncCtx2 + 40 | 0; //@line 4843
   HEAP32[$288 >> 2] = $22; //@line 4844
   $289 = $ReallocAsyncCtx2 + 44 | 0; //@line 4845
   HEAP32[$289 >> 2] = $24; //@line 4846
   $290 = $ReallocAsyncCtx2 + 48 | 0; //@line 4847
   HEAP8[$290 >> 0] = $26; //@line 4848
   $291 = $ReallocAsyncCtx2 + 52 | 0; //@line 4849
   HEAP32[$291 >> 2] = $28; //@line 4850
   $292 = $ReallocAsyncCtx2 + 56 | 0; //@line 4851
   HEAP32[$292 >> 2] = $30; //@line 4852
   $293 = $ReallocAsyncCtx2 + 60 | 0; //@line 4853
   HEAP32[$293 >> 2] = $32; //@line 4854
   $294 = $ReallocAsyncCtx2 + 64 | 0; //@line 4855
   HEAP32[$294 >> 2] = $34; //@line 4856
   $295 = $ReallocAsyncCtx2 + 68 | 0; //@line 4857
   HEAP8[$295 >> 0] = $266; //@line 4858
   $296 = $ReallocAsyncCtx2 + 72 | 0; //@line 4859
   HEAP32[$296 >> 2] = $36; //@line 4860
   $297 = $ReallocAsyncCtx2 + 76 | 0; //@line 4861
   HEAP32[$297 >> 2] = $38; //@line 4862
   $298 = $ReallocAsyncCtx2 + 80 | 0; //@line 4863
   HEAP32[$298 >> 2] = $40; //@line 4864
   $299 = $ReallocAsyncCtx2 + 84 | 0; //@line 4865
   HEAP32[$299 >> 2] = $42; //@line 4866
   $300 = $ReallocAsyncCtx2 + 88 | 0; //@line 4867
   HEAP32[$300 >> 2] = $44; //@line 4868
   $301 = $ReallocAsyncCtx2 + 92 | 0; //@line 4869
   HEAP32[$301 >> 2] = $46; //@line 4870
   $302 = $ReallocAsyncCtx2 + 96 | 0; //@line 4871
   HEAP32[$302 >> 2] = $48; //@line 4872
   $303 = $ReallocAsyncCtx2 + 100 | 0; //@line 4873
   HEAP32[$303 >> 2] = $50; //@line 4874
   $304 = $ReallocAsyncCtx2 + 104 | 0; //@line 4875
   HEAP32[$304 >> 2] = $52; //@line 4876
   $305 = $ReallocAsyncCtx2 + 108 | 0; //@line 4877
   HEAP32[$305 >> 2] = $54; //@line 4878
   $306 = $ReallocAsyncCtx2 + 112 | 0; //@line 4879
   HEAP32[$306 >> 2] = $56; //@line 4880
   $307 = $ReallocAsyncCtx2 + 116 | 0; //@line 4881
   HEAP32[$307 >> 2] = $58; //@line 4882
   $308 = $ReallocAsyncCtx2 + 120 | 0; //@line 4883
   HEAP32[$308 >> 2] = $60; //@line 4884
   $309 = $ReallocAsyncCtx2 + 124 | 0; //@line 4885
   HEAP32[$309 >> 2] = $62; //@line 4886
   $310 = $ReallocAsyncCtx2 + 128 | 0; //@line 4887
   HEAP32[$310 >> 2] = $64; //@line 4888
   $311 = $ReallocAsyncCtx2 + 132 | 0; //@line 4889
   HEAP32[$311 >> 2] = $66; //@line 4890
   $312 = $ReallocAsyncCtx2 + 136 | 0; //@line 4891
   HEAP32[$312 >> 2] = $68; //@line 4892
   $313 = $ReallocAsyncCtx2 + 140 | 0; //@line 4893
   HEAP32[$313 >> 2] = $70; //@line 4894
   $314 = $ReallocAsyncCtx2 + 144 | 0; //@line 4895
   HEAP32[$314 >> 2] = $72; //@line 4896
   $315 = $ReallocAsyncCtx2 + 148 | 0; //@line 4897
   HEAP32[$315 >> 2] = $74; //@line 4898
   $316 = $ReallocAsyncCtx2 + 152 | 0; //@line 4899
   HEAP32[$316 >> 2] = $76; //@line 4900
   $317 = $ReallocAsyncCtx2 + 156 | 0; //@line 4901
   HEAP32[$317 >> 2] = $78; //@line 4902
   $318 = $ReallocAsyncCtx2 + 160 | 0; //@line 4903
   HEAP32[$318 >> 2] = $80; //@line 4904
   $319 = $ReallocAsyncCtx2 + 164 | 0; //@line 4905
   HEAP32[$319 >> 2] = $82; //@line 4906
   $320 = $ReallocAsyncCtx2 + 168 | 0; //@line 4907
   HEAP32[$320 >> 2] = $84; //@line 4908
   $321 = $ReallocAsyncCtx2 + 172 | 0; //@line 4909
   HEAP32[$321 >> 2] = $86; //@line 4910
   $322 = $ReallocAsyncCtx2 + 176 | 0; //@line 4911
   HEAP32[$322 >> 2] = $88; //@line 4912
   $323 = $ReallocAsyncCtx2 + 180 | 0; //@line 4913
   HEAP32[$323 >> 2] = $90; //@line 4914
   $324 = $ReallocAsyncCtx2 + 184 | 0; //@line 4915
   HEAP32[$324 >> 2] = $92; //@line 4916
   $325 = $ReallocAsyncCtx2 + 188 | 0; //@line 4917
   HEAP32[$325 >> 2] = $94; //@line 4918
   $326 = $ReallocAsyncCtx2 + 192 | 0; //@line 4919
   HEAP32[$326 >> 2] = $96; //@line 4920
   $327 = $ReallocAsyncCtx2 + 196 | 0; //@line 4921
   HEAP32[$327 >> 2] = $98; //@line 4922
   $328 = $ReallocAsyncCtx2 + 200 | 0; //@line 4923
   HEAP32[$328 >> 2] = $100; //@line 4924
   $329 = $ReallocAsyncCtx2 + 204 | 0; //@line 4925
   HEAP32[$329 >> 2] = $102; //@line 4926
   $330 = $ReallocAsyncCtx2 + 208 | 0; //@line 4927
   HEAP32[$330 >> 2] = $104; //@line 4928
   $331 = $ReallocAsyncCtx2 + 212 | 0; //@line 4929
   HEAP32[$331 >> 2] = $106; //@line 4930
   $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 4931
   HEAP32[$332 >> 2] = $108; //@line 4932
   $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 4933
   HEAP32[$333 >> 2] = $112; //@line 4934
   $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 4935
   HEAP32[$334 >> 2] = $114; //@line 4936
   $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 4937
   HEAP32[$335 >> 2] = $116; //@line 4938
   $336 = $ReallocAsyncCtx2 + 232 | 0; //@line 4939
   HEAP32[$336 >> 2] = $118; //@line 4940
   $337 = $ReallocAsyncCtx2 + 236 | 0; //@line 4941
   HEAP32[$337 >> 2] = $120; //@line 4942
   $338 = $ReallocAsyncCtx2 + 240 | 0; //@line 4943
   HEAP32[$338 >> 2] = $122; //@line 4944
   $339 = $ReallocAsyncCtx2 + 244 | 0; //@line 4945
   HEAP32[$339 >> 2] = $124; //@line 4946
   $340 = $ReallocAsyncCtx2 + 248 | 0; //@line 4947
   HEAP32[$340 >> 2] = $126; //@line 4948
   $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 4949
   HEAP32[$341 >> 2] = $128; //@line 4950
   $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 4951
   HEAP32[$342 >> 2] = $130; //@line 4952
   $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 4953
   HEAP32[$343 >> 2] = $132; //@line 4954
   $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 4955
   HEAP32[$344 >> 2] = $134; //@line 4956
   sp = STACKTOP; //@line 4957
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 4961
  ___async_unwind = 0; //@line 4962
  HEAP32[$ReallocAsyncCtx2 >> 2] = 591; //@line 4963
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 4964
  HEAP32[$278 >> 2] = $2; //@line 4965
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 4966
  HEAP32[$279 >> 2] = $4; //@line 4967
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 4968
  HEAP32[$280 >> 2] = $6; //@line 4969
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 4970
  HEAP32[$281 >> 2] = $8; //@line 4971
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 4972
  HEAP32[$282 >> 2] = $10; //@line 4973
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 4974
  HEAP32[$283 >> 2] = $12; //@line 4975
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 4976
  HEAP32[$284 >> 2] = $14; //@line 4977
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 4978
  HEAP8[$285 >> 0] = $16; //@line 4979
  $286 = $ReallocAsyncCtx2 + 33 | 0; //@line 4980
  HEAP8[$286 >> 0] = $18; //@line 4981
  $287 = $ReallocAsyncCtx2 + 36 | 0; //@line 4982
  HEAP32[$287 >> 2] = $20; //@line 4983
  $288 = $ReallocAsyncCtx2 + 40 | 0; //@line 4984
  HEAP32[$288 >> 2] = $22; //@line 4985
  $289 = $ReallocAsyncCtx2 + 44 | 0; //@line 4986
  HEAP32[$289 >> 2] = $24; //@line 4987
  $290 = $ReallocAsyncCtx2 + 48 | 0; //@line 4988
  HEAP8[$290 >> 0] = $26; //@line 4989
  $291 = $ReallocAsyncCtx2 + 52 | 0; //@line 4990
  HEAP32[$291 >> 2] = $28; //@line 4991
  $292 = $ReallocAsyncCtx2 + 56 | 0; //@line 4992
  HEAP32[$292 >> 2] = $30; //@line 4993
  $293 = $ReallocAsyncCtx2 + 60 | 0; //@line 4994
  HEAP32[$293 >> 2] = $32; //@line 4995
  $294 = $ReallocAsyncCtx2 + 64 | 0; //@line 4996
  HEAP32[$294 >> 2] = $34; //@line 4997
  $295 = $ReallocAsyncCtx2 + 68 | 0; //@line 4998
  HEAP8[$295 >> 0] = $266; //@line 4999
  $296 = $ReallocAsyncCtx2 + 72 | 0; //@line 5000
  HEAP32[$296 >> 2] = $36; //@line 5001
  $297 = $ReallocAsyncCtx2 + 76 | 0; //@line 5002
  HEAP32[$297 >> 2] = $38; //@line 5003
  $298 = $ReallocAsyncCtx2 + 80 | 0; //@line 5004
  HEAP32[$298 >> 2] = $40; //@line 5005
  $299 = $ReallocAsyncCtx2 + 84 | 0; //@line 5006
  HEAP32[$299 >> 2] = $42; //@line 5007
  $300 = $ReallocAsyncCtx2 + 88 | 0; //@line 5008
  HEAP32[$300 >> 2] = $44; //@line 5009
  $301 = $ReallocAsyncCtx2 + 92 | 0; //@line 5010
  HEAP32[$301 >> 2] = $46; //@line 5011
  $302 = $ReallocAsyncCtx2 + 96 | 0; //@line 5012
  HEAP32[$302 >> 2] = $48; //@line 5013
  $303 = $ReallocAsyncCtx2 + 100 | 0; //@line 5014
  HEAP32[$303 >> 2] = $50; //@line 5015
  $304 = $ReallocAsyncCtx2 + 104 | 0; //@line 5016
  HEAP32[$304 >> 2] = $52; //@line 5017
  $305 = $ReallocAsyncCtx2 + 108 | 0; //@line 5018
  HEAP32[$305 >> 2] = $54; //@line 5019
  $306 = $ReallocAsyncCtx2 + 112 | 0; //@line 5020
  HEAP32[$306 >> 2] = $56; //@line 5021
  $307 = $ReallocAsyncCtx2 + 116 | 0; //@line 5022
  HEAP32[$307 >> 2] = $58; //@line 5023
  $308 = $ReallocAsyncCtx2 + 120 | 0; //@line 5024
  HEAP32[$308 >> 2] = $60; //@line 5025
  $309 = $ReallocAsyncCtx2 + 124 | 0; //@line 5026
  HEAP32[$309 >> 2] = $62; //@line 5027
  $310 = $ReallocAsyncCtx2 + 128 | 0; //@line 5028
  HEAP32[$310 >> 2] = $64; //@line 5029
  $311 = $ReallocAsyncCtx2 + 132 | 0; //@line 5030
  HEAP32[$311 >> 2] = $66; //@line 5031
  $312 = $ReallocAsyncCtx2 + 136 | 0; //@line 5032
  HEAP32[$312 >> 2] = $68; //@line 5033
  $313 = $ReallocAsyncCtx2 + 140 | 0; //@line 5034
  HEAP32[$313 >> 2] = $70; //@line 5035
  $314 = $ReallocAsyncCtx2 + 144 | 0; //@line 5036
  HEAP32[$314 >> 2] = $72; //@line 5037
  $315 = $ReallocAsyncCtx2 + 148 | 0; //@line 5038
  HEAP32[$315 >> 2] = $74; //@line 5039
  $316 = $ReallocAsyncCtx2 + 152 | 0; //@line 5040
  HEAP32[$316 >> 2] = $76; //@line 5041
  $317 = $ReallocAsyncCtx2 + 156 | 0; //@line 5042
  HEAP32[$317 >> 2] = $78; //@line 5043
  $318 = $ReallocAsyncCtx2 + 160 | 0; //@line 5044
  HEAP32[$318 >> 2] = $80; //@line 5045
  $319 = $ReallocAsyncCtx2 + 164 | 0; //@line 5046
  HEAP32[$319 >> 2] = $82; //@line 5047
  $320 = $ReallocAsyncCtx2 + 168 | 0; //@line 5048
  HEAP32[$320 >> 2] = $84; //@line 5049
  $321 = $ReallocAsyncCtx2 + 172 | 0; //@line 5050
  HEAP32[$321 >> 2] = $86; //@line 5051
  $322 = $ReallocAsyncCtx2 + 176 | 0; //@line 5052
  HEAP32[$322 >> 2] = $88; //@line 5053
  $323 = $ReallocAsyncCtx2 + 180 | 0; //@line 5054
  HEAP32[$323 >> 2] = $90; //@line 5055
  $324 = $ReallocAsyncCtx2 + 184 | 0; //@line 5056
  HEAP32[$324 >> 2] = $92; //@line 5057
  $325 = $ReallocAsyncCtx2 + 188 | 0; //@line 5058
  HEAP32[$325 >> 2] = $94; //@line 5059
  $326 = $ReallocAsyncCtx2 + 192 | 0; //@line 5060
  HEAP32[$326 >> 2] = $96; //@line 5061
  $327 = $ReallocAsyncCtx2 + 196 | 0; //@line 5062
  HEAP32[$327 >> 2] = $98; //@line 5063
  $328 = $ReallocAsyncCtx2 + 200 | 0; //@line 5064
  HEAP32[$328 >> 2] = $100; //@line 5065
  $329 = $ReallocAsyncCtx2 + 204 | 0; //@line 5066
  HEAP32[$329 >> 2] = $102; //@line 5067
  $330 = $ReallocAsyncCtx2 + 208 | 0; //@line 5068
  HEAP32[$330 >> 2] = $104; //@line 5069
  $331 = $ReallocAsyncCtx2 + 212 | 0; //@line 5070
  HEAP32[$331 >> 2] = $106; //@line 5071
  $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 5072
  HEAP32[$332 >> 2] = $108; //@line 5073
  $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 5074
  HEAP32[$333 >> 2] = $112; //@line 5075
  $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 5076
  HEAP32[$334 >> 2] = $114; //@line 5077
  $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 5078
  HEAP32[$335 >> 2] = $116; //@line 5079
  $336 = $ReallocAsyncCtx2 + 232 | 0; //@line 5080
  HEAP32[$336 >> 2] = $118; //@line 5081
  $337 = $ReallocAsyncCtx2 + 236 | 0; //@line 5082
  HEAP32[$337 >> 2] = $120; //@line 5083
  $338 = $ReallocAsyncCtx2 + 240 | 0; //@line 5084
  HEAP32[$338 >> 2] = $122; //@line 5085
  $339 = $ReallocAsyncCtx2 + 244 | 0; //@line 5086
  HEAP32[$339 >> 2] = $124; //@line 5087
  $340 = $ReallocAsyncCtx2 + 248 | 0; //@line 5088
  HEAP32[$340 >> 2] = $126; //@line 5089
  $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 5090
  HEAP32[$341 >> 2] = $128; //@line 5091
  $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 5092
  HEAP32[$342 >> 2] = $130; //@line 5093
  $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 5094
  HEAP32[$343 >> 2] = $132; //@line 5095
  $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 5096
  HEAP32[$344 >> 2] = $134; //@line 5097
  sp = STACKTOP; //@line 5098
  return;
 } else if ((label | 0) == 14) {
  HEAP8[$66 >> 0] = HEAP8[$12 + ($137 & 255) >> 0] | 0; //@line 5106
  HEAP32[$56 >> 2] = $128; //@line 5107
  HEAP32[$102 >> 2] = (HEAPU8[$12 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$12 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$12 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 5128
  HEAP32[$94 >> 2] = 0; //@line 5129
  $385 = $$0$be + 6 << 24 >> 24; //@line 5130
  HEAP8[$92 >> 0] = HEAP8[$12 + ($$0$be + 5 & 255) >> 0] | 0; //@line 5134
  $391 = HEAP32[(HEAP32[$82 >> 2] | 0) + 8 >> 2] | 0; //@line 5137
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 5138
  $392 = FUNCTION_TABLE_iii[$391 & 31]($34, $54) | 0; //@line 5139
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 592; //@line 5142
   $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 5143
   HEAP32[$393 >> 2] = $2; //@line 5144
   $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 5145
   HEAP32[$394 >> 2] = $4; //@line 5146
   $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 5147
   HEAP32[$395 >> 2] = $6; //@line 5148
   $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 5149
   HEAP32[$396 >> 2] = $8; //@line 5150
   $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 5151
   HEAP32[$397 >> 2] = $10; //@line 5152
   $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 5153
   HEAP32[$398 >> 2] = $12; //@line 5154
   $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 5155
   HEAP32[$399 >> 2] = $14; //@line 5156
   $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 5157
   HEAP8[$400 >> 0] = $16; //@line 5158
   $401 = $ReallocAsyncCtx3 + 33 | 0; //@line 5159
   HEAP8[$401 >> 0] = $18; //@line 5160
   $402 = $ReallocAsyncCtx3 + 36 | 0; //@line 5161
   HEAP32[$402 >> 2] = $20; //@line 5162
   $403 = $ReallocAsyncCtx3 + 40 | 0; //@line 5163
   HEAP32[$403 >> 2] = $22; //@line 5164
   $404 = $ReallocAsyncCtx3 + 44 | 0; //@line 5165
   HEAP32[$404 >> 2] = $24; //@line 5166
   $405 = $ReallocAsyncCtx3 + 48 | 0; //@line 5167
   HEAP8[$405 >> 0] = $26; //@line 5168
   $406 = $ReallocAsyncCtx3 + 52 | 0; //@line 5169
   HEAP32[$406 >> 2] = $28; //@line 5170
   $407 = $ReallocAsyncCtx3 + 56 | 0; //@line 5171
   HEAP32[$407 >> 2] = $30; //@line 5172
   $408 = $ReallocAsyncCtx3 + 60 | 0; //@line 5173
   HEAP32[$408 >> 2] = $32; //@line 5174
   $409 = $ReallocAsyncCtx3 + 64 | 0; //@line 5175
   HEAP32[$409 >> 2] = $34; //@line 5176
   $410 = $ReallocAsyncCtx3 + 68 | 0; //@line 5177
   HEAP32[$410 >> 2] = $36; //@line 5178
   $411 = $ReallocAsyncCtx3 + 72 | 0; //@line 5179
   HEAP32[$411 >> 2] = $38; //@line 5180
   $412 = $ReallocAsyncCtx3 + 76 | 0; //@line 5181
   HEAP32[$412 >> 2] = $40; //@line 5182
   $413 = $ReallocAsyncCtx3 + 80 | 0; //@line 5183
   HEAP32[$413 >> 2] = $42; //@line 5184
   $414 = $ReallocAsyncCtx3 + 84 | 0; //@line 5185
   HEAP32[$414 >> 2] = $44; //@line 5186
   $415 = $ReallocAsyncCtx3 + 88 | 0; //@line 5187
   HEAP32[$415 >> 2] = $46; //@line 5188
   $416 = $ReallocAsyncCtx3 + 92 | 0; //@line 5189
   HEAP32[$416 >> 2] = $48; //@line 5190
   $417 = $ReallocAsyncCtx3 + 96 | 0; //@line 5191
   HEAP32[$417 >> 2] = $50; //@line 5192
   $418 = $ReallocAsyncCtx3 + 100 | 0; //@line 5193
   HEAP32[$418 >> 2] = $52; //@line 5194
   $419 = $ReallocAsyncCtx3 + 104 | 0; //@line 5195
   HEAP32[$419 >> 2] = $54; //@line 5196
   $420 = $ReallocAsyncCtx3 + 108 | 0; //@line 5197
   HEAP32[$420 >> 2] = $56; //@line 5198
   $421 = $ReallocAsyncCtx3 + 112 | 0; //@line 5199
   HEAP32[$421 >> 2] = $58; //@line 5200
   $422 = $ReallocAsyncCtx3 + 116 | 0; //@line 5201
   HEAP32[$422 >> 2] = $60; //@line 5202
   $423 = $ReallocAsyncCtx3 + 120 | 0; //@line 5203
   HEAP32[$423 >> 2] = $62; //@line 5204
   $424 = $ReallocAsyncCtx3 + 124 | 0; //@line 5205
   HEAP32[$424 >> 2] = $64; //@line 5206
   $425 = $ReallocAsyncCtx3 + 128 | 0; //@line 5207
   HEAP32[$425 >> 2] = $66; //@line 5208
   $426 = $ReallocAsyncCtx3 + 132 | 0; //@line 5209
   HEAP32[$426 >> 2] = $68; //@line 5210
   $427 = $ReallocAsyncCtx3 + 136 | 0; //@line 5211
   HEAP32[$427 >> 2] = $70; //@line 5212
   $428 = $ReallocAsyncCtx3 + 140 | 0; //@line 5213
   HEAP32[$428 >> 2] = $72; //@line 5214
   $429 = $ReallocAsyncCtx3 + 144 | 0; //@line 5215
   HEAP32[$429 >> 2] = $74; //@line 5216
   $430 = $ReallocAsyncCtx3 + 148 | 0; //@line 5217
   HEAP32[$430 >> 2] = $76; //@line 5218
   $431 = $ReallocAsyncCtx3 + 152 | 0; //@line 5219
   HEAP32[$431 >> 2] = $78; //@line 5220
   $432 = $ReallocAsyncCtx3 + 156 | 0; //@line 5221
   HEAP32[$432 >> 2] = $80; //@line 5222
   $433 = $ReallocAsyncCtx3 + 160 | 0; //@line 5223
   HEAP32[$433 >> 2] = $82; //@line 5224
   $434 = $ReallocAsyncCtx3 + 164 | 0; //@line 5225
   HEAP32[$434 >> 2] = $84; //@line 5226
   $435 = $ReallocAsyncCtx3 + 168 | 0; //@line 5227
   HEAP32[$435 >> 2] = $86; //@line 5228
   $436 = $ReallocAsyncCtx3 + 172 | 0; //@line 5229
   HEAP32[$436 >> 2] = $88; //@line 5230
   $437 = $ReallocAsyncCtx3 + 176 | 0; //@line 5231
   HEAP32[$437 >> 2] = $90; //@line 5232
   $438 = $ReallocAsyncCtx3 + 180 | 0; //@line 5233
   HEAP32[$438 >> 2] = $92; //@line 5234
   $439 = $ReallocAsyncCtx3 + 184 | 0; //@line 5235
   HEAP32[$439 >> 2] = $94; //@line 5236
   $440 = $ReallocAsyncCtx3 + 188 | 0; //@line 5237
   HEAP32[$440 >> 2] = $96; //@line 5238
   $441 = $ReallocAsyncCtx3 + 192 | 0; //@line 5239
   HEAP32[$441 >> 2] = $98; //@line 5240
   $442 = $ReallocAsyncCtx3 + 196 | 0; //@line 5241
   HEAP32[$442 >> 2] = $100; //@line 5242
   $443 = $ReallocAsyncCtx3 + 200 | 0; //@line 5243
   HEAP32[$443 >> 2] = $102; //@line 5244
   $444 = $ReallocAsyncCtx3 + 204 | 0; //@line 5245
   HEAP32[$444 >> 2] = $104; //@line 5246
   $445 = $ReallocAsyncCtx3 + 208 | 0; //@line 5247
   HEAP32[$445 >> 2] = $106; //@line 5248
   $446 = $ReallocAsyncCtx3 + 212 | 0; //@line 5249
   HEAP32[$446 >> 2] = $108; //@line 5250
   $447 = $ReallocAsyncCtx3 + 216 | 0; //@line 5251
   HEAP8[$447 >> 0] = $385; //@line 5252
   $448 = $ReallocAsyncCtx3 + 220 | 0; //@line 5253
   HEAP32[$448 >> 2] = $112; //@line 5254
   $449 = $ReallocAsyncCtx3 + 224 | 0; //@line 5255
   HEAP32[$449 >> 2] = $114; //@line 5256
   $450 = $ReallocAsyncCtx3 + 228 | 0; //@line 5257
   HEAP32[$450 >> 2] = $116; //@line 5258
   $451 = $ReallocAsyncCtx3 + 232 | 0; //@line 5259
   HEAP32[$451 >> 2] = $118; //@line 5260
   $452 = $ReallocAsyncCtx3 + 236 | 0; //@line 5261
   HEAP32[$452 >> 2] = $120; //@line 5262
   $453 = $ReallocAsyncCtx3 + 240 | 0; //@line 5263
   HEAP32[$453 >> 2] = $122; //@line 5264
   $454 = $ReallocAsyncCtx3 + 244 | 0; //@line 5265
   HEAP32[$454 >> 2] = $124; //@line 5266
   $455 = $ReallocAsyncCtx3 + 248 | 0; //@line 5267
   HEAP32[$455 >> 2] = $126; //@line 5268
   $456 = $ReallocAsyncCtx3 + 252 | 0; //@line 5269
   HEAP32[$456 >> 2] = $128; //@line 5270
   $457 = $ReallocAsyncCtx3 + 256 | 0; //@line 5271
   HEAP32[$457 >> 2] = $130; //@line 5272
   $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 5273
   HEAP32[$458 >> 2] = $132; //@line 5274
   $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 5275
   HEAP32[$459 >> 2] = $134; //@line 5276
   sp = STACKTOP; //@line 5277
   return;
  }
  HEAP8[___async_retval >> 0] = $392; //@line 5281
  ___async_unwind = 0; //@line 5282
  HEAP32[$ReallocAsyncCtx3 >> 2] = 592; //@line 5283
  $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 5284
  HEAP32[$393 >> 2] = $2; //@line 5285
  $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 5286
  HEAP32[$394 >> 2] = $4; //@line 5287
  $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 5288
  HEAP32[$395 >> 2] = $6; //@line 5289
  $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 5290
  HEAP32[$396 >> 2] = $8; //@line 5291
  $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 5292
  HEAP32[$397 >> 2] = $10; //@line 5293
  $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 5294
  HEAP32[$398 >> 2] = $12; //@line 5295
  $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 5296
  HEAP32[$399 >> 2] = $14; //@line 5297
  $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 5298
  HEAP8[$400 >> 0] = $16; //@line 5299
  $401 = $ReallocAsyncCtx3 + 33 | 0; //@line 5300
  HEAP8[$401 >> 0] = $18; //@line 5301
  $402 = $ReallocAsyncCtx3 + 36 | 0; //@line 5302
  HEAP32[$402 >> 2] = $20; //@line 5303
  $403 = $ReallocAsyncCtx3 + 40 | 0; //@line 5304
  HEAP32[$403 >> 2] = $22; //@line 5305
  $404 = $ReallocAsyncCtx3 + 44 | 0; //@line 5306
  HEAP32[$404 >> 2] = $24; //@line 5307
  $405 = $ReallocAsyncCtx3 + 48 | 0; //@line 5308
  HEAP8[$405 >> 0] = $26; //@line 5309
  $406 = $ReallocAsyncCtx3 + 52 | 0; //@line 5310
  HEAP32[$406 >> 2] = $28; //@line 5311
  $407 = $ReallocAsyncCtx3 + 56 | 0; //@line 5312
  HEAP32[$407 >> 2] = $30; //@line 5313
  $408 = $ReallocAsyncCtx3 + 60 | 0; //@line 5314
  HEAP32[$408 >> 2] = $32; //@line 5315
  $409 = $ReallocAsyncCtx3 + 64 | 0; //@line 5316
  HEAP32[$409 >> 2] = $34; //@line 5317
  $410 = $ReallocAsyncCtx3 + 68 | 0; //@line 5318
  HEAP32[$410 >> 2] = $36; //@line 5319
  $411 = $ReallocAsyncCtx3 + 72 | 0; //@line 5320
  HEAP32[$411 >> 2] = $38; //@line 5321
  $412 = $ReallocAsyncCtx3 + 76 | 0; //@line 5322
  HEAP32[$412 >> 2] = $40; //@line 5323
  $413 = $ReallocAsyncCtx3 + 80 | 0; //@line 5324
  HEAP32[$413 >> 2] = $42; //@line 5325
  $414 = $ReallocAsyncCtx3 + 84 | 0; //@line 5326
  HEAP32[$414 >> 2] = $44; //@line 5327
  $415 = $ReallocAsyncCtx3 + 88 | 0; //@line 5328
  HEAP32[$415 >> 2] = $46; //@line 5329
  $416 = $ReallocAsyncCtx3 + 92 | 0; //@line 5330
  HEAP32[$416 >> 2] = $48; //@line 5331
  $417 = $ReallocAsyncCtx3 + 96 | 0; //@line 5332
  HEAP32[$417 >> 2] = $50; //@line 5333
  $418 = $ReallocAsyncCtx3 + 100 | 0; //@line 5334
  HEAP32[$418 >> 2] = $52; //@line 5335
  $419 = $ReallocAsyncCtx3 + 104 | 0; //@line 5336
  HEAP32[$419 >> 2] = $54; //@line 5337
  $420 = $ReallocAsyncCtx3 + 108 | 0; //@line 5338
  HEAP32[$420 >> 2] = $56; //@line 5339
  $421 = $ReallocAsyncCtx3 + 112 | 0; //@line 5340
  HEAP32[$421 >> 2] = $58; //@line 5341
  $422 = $ReallocAsyncCtx3 + 116 | 0; //@line 5342
  HEAP32[$422 >> 2] = $60; //@line 5343
  $423 = $ReallocAsyncCtx3 + 120 | 0; //@line 5344
  HEAP32[$423 >> 2] = $62; //@line 5345
  $424 = $ReallocAsyncCtx3 + 124 | 0; //@line 5346
  HEAP32[$424 >> 2] = $64; //@line 5347
  $425 = $ReallocAsyncCtx3 + 128 | 0; //@line 5348
  HEAP32[$425 >> 2] = $66; //@line 5349
  $426 = $ReallocAsyncCtx3 + 132 | 0; //@line 5350
  HEAP32[$426 >> 2] = $68; //@line 5351
  $427 = $ReallocAsyncCtx3 + 136 | 0; //@line 5352
  HEAP32[$427 >> 2] = $70; //@line 5353
  $428 = $ReallocAsyncCtx3 + 140 | 0; //@line 5354
  HEAP32[$428 >> 2] = $72; //@line 5355
  $429 = $ReallocAsyncCtx3 + 144 | 0; //@line 5356
  HEAP32[$429 >> 2] = $74; //@line 5357
  $430 = $ReallocAsyncCtx3 + 148 | 0; //@line 5358
  HEAP32[$430 >> 2] = $76; //@line 5359
  $431 = $ReallocAsyncCtx3 + 152 | 0; //@line 5360
  HEAP32[$431 >> 2] = $78; //@line 5361
  $432 = $ReallocAsyncCtx3 + 156 | 0; //@line 5362
  HEAP32[$432 >> 2] = $80; //@line 5363
  $433 = $ReallocAsyncCtx3 + 160 | 0; //@line 5364
  HEAP32[$433 >> 2] = $82; //@line 5365
  $434 = $ReallocAsyncCtx3 + 164 | 0; //@line 5366
  HEAP32[$434 >> 2] = $84; //@line 5367
  $435 = $ReallocAsyncCtx3 + 168 | 0; //@line 5368
  HEAP32[$435 >> 2] = $86; //@line 5369
  $436 = $ReallocAsyncCtx3 + 172 | 0; //@line 5370
  HEAP32[$436 >> 2] = $88; //@line 5371
  $437 = $ReallocAsyncCtx3 + 176 | 0; //@line 5372
  HEAP32[$437 >> 2] = $90; //@line 5373
  $438 = $ReallocAsyncCtx3 + 180 | 0; //@line 5374
  HEAP32[$438 >> 2] = $92; //@line 5375
  $439 = $ReallocAsyncCtx3 + 184 | 0; //@line 5376
  HEAP32[$439 >> 2] = $94; //@line 5377
  $440 = $ReallocAsyncCtx3 + 188 | 0; //@line 5378
  HEAP32[$440 >> 2] = $96; //@line 5379
  $441 = $ReallocAsyncCtx3 + 192 | 0; //@line 5380
  HEAP32[$441 >> 2] = $98; //@line 5381
  $442 = $ReallocAsyncCtx3 + 196 | 0; //@line 5382
  HEAP32[$442 >> 2] = $100; //@line 5383
  $443 = $ReallocAsyncCtx3 + 200 | 0; //@line 5384
  HEAP32[$443 >> 2] = $102; //@line 5385
  $444 = $ReallocAsyncCtx3 + 204 | 0; //@line 5386
  HEAP32[$444 >> 2] = $104; //@line 5387
  $445 = $ReallocAsyncCtx3 + 208 | 0; //@line 5388
  HEAP32[$445 >> 2] = $106; //@line 5389
  $446 = $ReallocAsyncCtx3 + 212 | 0; //@line 5390
  HEAP32[$446 >> 2] = $108; //@line 5391
  $447 = $ReallocAsyncCtx3 + 216 | 0; //@line 5392
  HEAP8[$447 >> 0] = $385; //@line 5393
  $448 = $ReallocAsyncCtx3 + 220 | 0; //@line 5394
  HEAP32[$448 >> 2] = $112; //@line 5395
  $449 = $ReallocAsyncCtx3 + 224 | 0; //@line 5396
  HEAP32[$449 >> 2] = $114; //@line 5397
  $450 = $ReallocAsyncCtx3 + 228 | 0; //@line 5398
  HEAP32[$450 >> 2] = $116; //@line 5399
  $451 = $ReallocAsyncCtx3 + 232 | 0; //@line 5400
  HEAP32[$451 >> 2] = $118; //@line 5401
  $452 = $ReallocAsyncCtx3 + 236 | 0; //@line 5402
  HEAP32[$452 >> 2] = $120; //@line 5403
  $453 = $ReallocAsyncCtx3 + 240 | 0; //@line 5404
  HEAP32[$453 >> 2] = $122; //@line 5405
  $454 = $ReallocAsyncCtx3 + 244 | 0; //@line 5406
  HEAP32[$454 >> 2] = $124; //@line 5407
  $455 = $ReallocAsyncCtx3 + 248 | 0; //@line 5408
  HEAP32[$455 >> 2] = $126; //@line 5409
  $456 = $ReallocAsyncCtx3 + 252 | 0; //@line 5410
  HEAP32[$456 >> 2] = $128; //@line 5411
  $457 = $ReallocAsyncCtx3 + 256 | 0; //@line 5412
  HEAP32[$457 >> 2] = $130; //@line 5413
  $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 5414
  HEAP32[$458 >> 2] = $132; //@line 5415
  $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 5416
  HEAP32[$459 >> 2] = $134; //@line 5417
  sp = STACKTOP; //@line 5418
  return;
 } else if ((label | 0) == 22) {
  $490 = $$0$be + 2 << 24 >> 24; //@line 5422
  $493 = HEAP8[$12 + ($137 & 255) >> 0] | 0; //@line 5425
  HEAP8[$118 >> 0] = 0; //@line 5426
  $494 = $493 & 255; //@line 5427
  HEAP8[$114 >> 0] = $494 >>> 5 & 1; //@line 5431
  if ($494 & 16 | 0) {
   HEAP8[$118 >> 0] = 1; //@line 5435
  }
  HEAP8[$40 >> 0] = $494 & 15; //@line 5439
  $503 = HEAP32[(HEAP32[$32 >> 2] | 0) + 44 >> 2] | 0; //@line 5442
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 5443
  $504 = FUNCTION_TABLE_iii[$503 & 31]($34, $84) | 0; //@line 5444
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 593; //@line 5447
   $505 = $ReallocAsyncCtx4 + 4 | 0; //@line 5448
   HEAP32[$505 >> 2] = $2; //@line 5449
   $506 = $ReallocAsyncCtx4 + 8 | 0; //@line 5450
   HEAP32[$506 >> 2] = $4; //@line 5451
   $507 = $ReallocAsyncCtx4 + 12 | 0; //@line 5452
   HEAP32[$507 >> 2] = $6; //@line 5453
   $508 = $ReallocAsyncCtx4 + 16 | 0; //@line 5454
   HEAP8[$508 >> 0] = $490; //@line 5455
   $509 = $ReallocAsyncCtx4 + 20 | 0; //@line 5456
   HEAP32[$509 >> 2] = $8; //@line 5457
   $510 = $ReallocAsyncCtx4 + 24 | 0; //@line 5458
   HEAP32[$510 >> 2] = $10; //@line 5459
   $511 = $ReallocAsyncCtx4 + 28 | 0; //@line 5460
   HEAP32[$511 >> 2] = $12; //@line 5461
   $512 = $ReallocAsyncCtx4 + 32 | 0; //@line 5462
   HEAP32[$512 >> 2] = $14; //@line 5463
   $513 = $ReallocAsyncCtx4 + 36 | 0; //@line 5464
   HEAP8[$513 >> 0] = $16; //@line 5465
   $514 = $ReallocAsyncCtx4 + 37 | 0; //@line 5466
   HEAP8[$514 >> 0] = $18; //@line 5467
   $515 = $ReallocAsyncCtx4 + 40 | 0; //@line 5468
   HEAP32[$515 >> 2] = $20; //@line 5469
   $516 = $ReallocAsyncCtx4 + 44 | 0; //@line 5470
   HEAP32[$516 >> 2] = $22; //@line 5471
   $517 = $ReallocAsyncCtx4 + 48 | 0; //@line 5472
   HEAP32[$517 >> 2] = $24; //@line 5473
   $518 = $ReallocAsyncCtx4 + 52 | 0; //@line 5474
   HEAP8[$518 >> 0] = $26; //@line 5475
   $519 = $ReallocAsyncCtx4 + 56 | 0; //@line 5476
   HEAP32[$519 >> 2] = $28; //@line 5477
   $520 = $ReallocAsyncCtx4 + 60 | 0; //@line 5478
   HEAP32[$520 >> 2] = $30; //@line 5479
   $521 = $ReallocAsyncCtx4 + 64 | 0; //@line 5480
   HEAP32[$521 >> 2] = $32; //@line 5481
   $522 = $ReallocAsyncCtx4 + 68 | 0; //@line 5482
   HEAP32[$522 >> 2] = $34; //@line 5483
   $523 = $ReallocAsyncCtx4 + 72 | 0; //@line 5484
   HEAP32[$523 >> 2] = $36; //@line 5485
   $524 = $ReallocAsyncCtx4 + 76 | 0; //@line 5486
   HEAP32[$524 >> 2] = $38; //@line 5487
   $525 = $ReallocAsyncCtx4 + 80 | 0; //@line 5488
   HEAP32[$525 >> 2] = $40; //@line 5489
   $526 = $ReallocAsyncCtx4 + 84 | 0; //@line 5490
   HEAP32[$526 >> 2] = $42; //@line 5491
   $527 = $ReallocAsyncCtx4 + 88 | 0; //@line 5492
   HEAP32[$527 >> 2] = $44; //@line 5493
   $528 = $ReallocAsyncCtx4 + 92 | 0; //@line 5494
   HEAP32[$528 >> 2] = $46; //@line 5495
   $529 = $ReallocAsyncCtx4 + 96 | 0; //@line 5496
   HEAP32[$529 >> 2] = $48; //@line 5497
   $530 = $ReallocAsyncCtx4 + 100 | 0; //@line 5498
   HEAP32[$530 >> 2] = $50; //@line 5499
   $531 = $ReallocAsyncCtx4 + 104 | 0; //@line 5500
   HEAP32[$531 >> 2] = $52; //@line 5501
   $532 = $ReallocAsyncCtx4 + 108 | 0; //@line 5502
   HEAP32[$532 >> 2] = $54; //@line 5503
   $533 = $ReallocAsyncCtx4 + 112 | 0; //@line 5504
   HEAP32[$533 >> 2] = $56; //@line 5505
   $534 = $ReallocAsyncCtx4 + 116 | 0; //@line 5506
   HEAP32[$534 >> 2] = $58; //@line 5507
   $535 = $ReallocAsyncCtx4 + 120 | 0; //@line 5508
   HEAP32[$535 >> 2] = $60; //@line 5509
   $536 = $ReallocAsyncCtx4 + 124 | 0; //@line 5510
   HEAP32[$536 >> 2] = $62; //@line 5511
   $537 = $ReallocAsyncCtx4 + 128 | 0; //@line 5512
   HEAP32[$537 >> 2] = $64; //@line 5513
   $538 = $ReallocAsyncCtx4 + 132 | 0; //@line 5514
   HEAP32[$538 >> 2] = $66; //@line 5515
   $539 = $ReallocAsyncCtx4 + 136 | 0; //@line 5516
   HEAP32[$539 >> 2] = $68; //@line 5517
   $540 = $ReallocAsyncCtx4 + 140 | 0; //@line 5518
   HEAP32[$540 >> 2] = $70; //@line 5519
   $541 = $ReallocAsyncCtx4 + 144 | 0; //@line 5520
   HEAP32[$541 >> 2] = $72; //@line 5521
   $542 = $ReallocAsyncCtx4 + 148 | 0; //@line 5522
   HEAP32[$542 >> 2] = $74; //@line 5523
   $543 = $ReallocAsyncCtx4 + 152 | 0; //@line 5524
   HEAP32[$543 >> 2] = $76; //@line 5525
   $544 = $ReallocAsyncCtx4 + 156 | 0; //@line 5526
   HEAP32[$544 >> 2] = $78; //@line 5527
   $545 = $ReallocAsyncCtx4 + 160 | 0; //@line 5528
   HEAP32[$545 >> 2] = $80; //@line 5529
   $546 = $ReallocAsyncCtx4 + 164 | 0; //@line 5530
   HEAP32[$546 >> 2] = $82; //@line 5531
   $547 = $ReallocAsyncCtx4 + 168 | 0; //@line 5532
   HEAP32[$547 >> 2] = $84; //@line 5533
   $548 = $ReallocAsyncCtx4 + 172 | 0; //@line 5534
   HEAP32[$548 >> 2] = $86; //@line 5535
   $549 = $ReallocAsyncCtx4 + 176 | 0; //@line 5536
   HEAP32[$549 >> 2] = $88; //@line 5537
   $550 = $ReallocAsyncCtx4 + 180 | 0; //@line 5538
   HEAP32[$550 >> 2] = $90; //@line 5539
   $551 = $ReallocAsyncCtx4 + 184 | 0; //@line 5540
   HEAP32[$551 >> 2] = $92; //@line 5541
   $552 = $ReallocAsyncCtx4 + 188 | 0; //@line 5542
   HEAP32[$552 >> 2] = $94; //@line 5543
   $553 = $ReallocAsyncCtx4 + 192 | 0; //@line 5544
   HEAP32[$553 >> 2] = $96; //@line 5545
   $554 = $ReallocAsyncCtx4 + 196 | 0; //@line 5546
   HEAP32[$554 >> 2] = $$096$be; //@line 5547
   $555 = $ReallocAsyncCtx4 + 200 | 0; //@line 5548
   HEAP32[$555 >> 2] = $98; //@line 5549
   $556 = $ReallocAsyncCtx4 + 204 | 0; //@line 5550
   HEAP32[$556 >> 2] = $100; //@line 5551
   $557 = $ReallocAsyncCtx4 + 208 | 0; //@line 5552
   HEAP32[$557 >> 2] = $102; //@line 5553
   $558 = $ReallocAsyncCtx4 + 212 | 0; //@line 5554
   HEAP32[$558 >> 2] = $104; //@line 5555
   $559 = $ReallocAsyncCtx4 + 216 | 0; //@line 5556
   HEAP32[$559 >> 2] = $106; //@line 5557
   $560 = $ReallocAsyncCtx4 + 220 | 0; //@line 5558
   HEAP32[$560 >> 2] = $108; //@line 5559
   $561 = $ReallocAsyncCtx4 + 224 | 0; //@line 5560
   HEAP32[$561 >> 2] = $112; //@line 5561
   $562 = $ReallocAsyncCtx4 + 228 | 0; //@line 5562
   HEAP32[$562 >> 2] = $114; //@line 5563
   $563 = $ReallocAsyncCtx4 + 232 | 0; //@line 5564
   HEAP32[$563 >> 2] = $116; //@line 5565
   $564 = $ReallocAsyncCtx4 + 236 | 0; //@line 5566
   HEAP32[$564 >> 2] = $118; //@line 5567
   $565 = $ReallocAsyncCtx4 + 240 | 0; //@line 5568
   HEAP32[$565 >> 2] = $120; //@line 5569
   $566 = $ReallocAsyncCtx4 + 244 | 0; //@line 5570
   HEAP32[$566 >> 2] = $122; //@line 5571
   $567 = $ReallocAsyncCtx4 + 248 | 0; //@line 5572
   HEAP32[$567 >> 2] = $124; //@line 5573
   $568 = $ReallocAsyncCtx4 + 252 | 0; //@line 5574
   HEAP32[$568 >> 2] = $126; //@line 5575
   $569 = $ReallocAsyncCtx4 + 256 | 0; //@line 5576
   HEAP32[$569 >> 2] = $128; //@line 5577
   $570 = $ReallocAsyncCtx4 + 260 | 0; //@line 5578
   HEAP32[$570 >> 2] = $130; //@line 5579
   $571 = $ReallocAsyncCtx4 + 264 | 0; //@line 5580
   HEAP32[$571 >> 2] = $132; //@line 5581
   $572 = $ReallocAsyncCtx4 + 268 | 0; //@line 5582
   HEAP32[$572 >> 2] = $134; //@line 5583
   sp = STACKTOP; //@line 5584
   return;
  }
  HEAP8[___async_retval >> 0] = $504 & 1; //@line 5589
  ___async_unwind = 0; //@line 5590
  HEAP32[$ReallocAsyncCtx4 >> 2] = 593; //@line 5591
  $505 = $ReallocAsyncCtx4 + 4 | 0; //@line 5592
  HEAP32[$505 >> 2] = $2; //@line 5593
  $506 = $ReallocAsyncCtx4 + 8 | 0; //@line 5594
  HEAP32[$506 >> 2] = $4; //@line 5595
  $507 = $ReallocAsyncCtx4 + 12 | 0; //@line 5596
  HEAP32[$507 >> 2] = $6; //@line 5597
  $508 = $ReallocAsyncCtx4 + 16 | 0; //@line 5598
  HEAP8[$508 >> 0] = $490; //@line 5599
  $509 = $ReallocAsyncCtx4 + 20 | 0; //@line 5600
  HEAP32[$509 >> 2] = $8; //@line 5601
  $510 = $ReallocAsyncCtx4 + 24 | 0; //@line 5602
  HEAP32[$510 >> 2] = $10; //@line 5603
  $511 = $ReallocAsyncCtx4 + 28 | 0; //@line 5604
  HEAP32[$511 >> 2] = $12; //@line 5605
  $512 = $ReallocAsyncCtx4 + 32 | 0; //@line 5606
  HEAP32[$512 >> 2] = $14; //@line 5607
  $513 = $ReallocAsyncCtx4 + 36 | 0; //@line 5608
  HEAP8[$513 >> 0] = $16; //@line 5609
  $514 = $ReallocAsyncCtx4 + 37 | 0; //@line 5610
  HEAP8[$514 >> 0] = $18; //@line 5611
  $515 = $ReallocAsyncCtx4 + 40 | 0; //@line 5612
  HEAP32[$515 >> 2] = $20; //@line 5613
  $516 = $ReallocAsyncCtx4 + 44 | 0; //@line 5614
  HEAP32[$516 >> 2] = $22; //@line 5615
  $517 = $ReallocAsyncCtx4 + 48 | 0; //@line 5616
  HEAP32[$517 >> 2] = $24; //@line 5617
  $518 = $ReallocAsyncCtx4 + 52 | 0; //@line 5618
  HEAP8[$518 >> 0] = $26; //@line 5619
  $519 = $ReallocAsyncCtx4 + 56 | 0; //@line 5620
  HEAP32[$519 >> 2] = $28; //@line 5621
  $520 = $ReallocAsyncCtx4 + 60 | 0; //@line 5622
  HEAP32[$520 >> 2] = $30; //@line 5623
  $521 = $ReallocAsyncCtx4 + 64 | 0; //@line 5624
  HEAP32[$521 >> 2] = $32; //@line 5625
  $522 = $ReallocAsyncCtx4 + 68 | 0; //@line 5626
  HEAP32[$522 >> 2] = $34; //@line 5627
  $523 = $ReallocAsyncCtx4 + 72 | 0; //@line 5628
  HEAP32[$523 >> 2] = $36; //@line 5629
  $524 = $ReallocAsyncCtx4 + 76 | 0; //@line 5630
  HEAP32[$524 >> 2] = $38; //@line 5631
  $525 = $ReallocAsyncCtx4 + 80 | 0; //@line 5632
  HEAP32[$525 >> 2] = $40; //@line 5633
  $526 = $ReallocAsyncCtx4 + 84 | 0; //@line 5634
  HEAP32[$526 >> 2] = $42; //@line 5635
  $527 = $ReallocAsyncCtx4 + 88 | 0; //@line 5636
  HEAP32[$527 >> 2] = $44; //@line 5637
  $528 = $ReallocAsyncCtx4 + 92 | 0; //@line 5638
  HEAP32[$528 >> 2] = $46; //@line 5639
  $529 = $ReallocAsyncCtx4 + 96 | 0; //@line 5640
  HEAP32[$529 >> 2] = $48; //@line 5641
  $530 = $ReallocAsyncCtx4 + 100 | 0; //@line 5642
  HEAP32[$530 >> 2] = $50; //@line 5643
  $531 = $ReallocAsyncCtx4 + 104 | 0; //@line 5644
  HEAP32[$531 >> 2] = $52; //@line 5645
  $532 = $ReallocAsyncCtx4 + 108 | 0; //@line 5646
  HEAP32[$532 >> 2] = $54; //@line 5647
  $533 = $ReallocAsyncCtx4 + 112 | 0; //@line 5648
  HEAP32[$533 >> 2] = $56; //@line 5649
  $534 = $ReallocAsyncCtx4 + 116 | 0; //@line 5650
  HEAP32[$534 >> 2] = $58; //@line 5651
  $535 = $ReallocAsyncCtx4 + 120 | 0; //@line 5652
  HEAP32[$535 >> 2] = $60; //@line 5653
  $536 = $ReallocAsyncCtx4 + 124 | 0; //@line 5654
  HEAP32[$536 >> 2] = $62; //@line 5655
  $537 = $ReallocAsyncCtx4 + 128 | 0; //@line 5656
  HEAP32[$537 >> 2] = $64; //@line 5657
  $538 = $ReallocAsyncCtx4 + 132 | 0; //@line 5658
  HEAP32[$538 >> 2] = $66; //@line 5659
  $539 = $ReallocAsyncCtx4 + 136 | 0; //@line 5660
  HEAP32[$539 >> 2] = $68; //@line 5661
  $540 = $ReallocAsyncCtx4 + 140 | 0; //@line 5662
  HEAP32[$540 >> 2] = $70; //@line 5663
  $541 = $ReallocAsyncCtx4 + 144 | 0; //@line 5664
  HEAP32[$541 >> 2] = $72; //@line 5665
  $542 = $ReallocAsyncCtx4 + 148 | 0; //@line 5666
  HEAP32[$542 >> 2] = $74; //@line 5667
  $543 = $ReallocAsyncCtx4 + 152 | 0; //@line 5668
  HEAP32[$543 >> 2] = $76; //@line 5669
  $544 = $ReallocAsyncCtx4 + 156 | 0; //@line 5670
  HEAP32[$544 >> 2] = $78; //@line 5671
  $545 = $ReallocAsyncCtx4 + 160 | 0; //@line 5672
  HEAP32[$545 >> 2] = $80; //@line 5673
  $546 = $ReallocAsyncCtx4 + 164 | 0; //@line 5674
  HEAP32[$546 >> 2] = $82; //@line 5675
  $547 = $ReallocAsyncCtx4 + 168 | 0; //@line 5676
  HEAP32[$547 >> 2] = $84; //@line 5677
  $548 = $ReallocAsyncCtx4 + 172 | 0; //@line 5678
  HEAP32[$548 >> 2] = $86; //@line 5679
  $549 = $ReallocAsyncCtx4 + 176 | 0; //@line 5680
  HEAP32[$549 >> 2] = $88; //@line 5681
  $550 = $ReallocAsyncCtx4 + 180 | 0; //@line 5682
  HEAP32[$550 >> 2] = $90; //@line 5683
  $551 = $ReallocAsyncCtx4 + 184 | 0; //@line 5684
  HEAP32[$551 >> 2] = $92; //@line 5685
  $552 = $ReallocAsyncCtx4 + 188 | 0; //@line 5686
  HEAP32[$552 >> 2] = $94; //@line 5687
  $553 = $ReallocAsyncCtx4 + 192 | 0; //@line 5688
  HEAP32[$553 >> 2] = $96; //@line 5689
  $554 = $ReallocAsyncCtx4 + 196 | 0; //@line 5690
  HEAP32[$554 >> 2] = $$096$be; //@line 5691
  $555 = $ReallocAsyncCtx4 + 200 | 0; //@line 5692
  HEAP32[$555 >> 2] = $98; //@line 5693
  $556 = $ReallocAsyncCtx4 + 204 | 0; //@line 5694
  HEAP32[$556 >> 2] = $100; //@line 5695
  $557 = $ReallocAsyncCtx4 + 208 | 0; //@line 5696
  HEAP32[$557 >> 2] = $102; //@line 5697
  $558 = $ReallocAsyncCtx4 + 212 | 0; //@line 5698
  HEAP32[$558 >> 2] = $104; //@line 5699
  $559 = $ReallocAsyncCtx4 + 216 | 0; //@line 5700
  HEAP32[$559 >> 2] = $106; //@line 5701
  $560 = $ReallocAsyncCtx4 + 220 | 0; //@line 5702
  HEAP32[$560 >> 2] = $108; //@line 5703
  $561 = $ReallocAsyncCtx4 + 224 | 0; //@line 5704
  HEAP32[$561 >> 2] = $112; //@line 5705
  $562 = $ReallocAsyncCtx4 + 228 | 0; //@line 5706
  HEAP32[$562 >> 2] = $114; //@line 5707
  $563 = $ReallocAsyncCtx4 + 232 | 0; //@line 5708
  HEAP32[$563 >> 2] = $116; //@line 5709
  $564 = $ReallocAsyncCtx4 + 236 | 0; //@line 5710
  HEAP32[$564 >> 2] = $118; //@line 5711
  $565 = $ReallocAsyncCtx4 + 240 | 0; //@line 5712
  HEAP32[$565 >> 2] = $120; //@line 5713
  $566 = $ReallocAsyncCtx4 + 244 | 0; //@line 5714
  HEAP32[$566 >> 2] = $122; //@line 5715
  $567 = $ReallocAsyncCtx4 + 248 | 0; //@line 5716
  HEAP32[$567 >> 2] = $124; //@line 5717
  $568 = $ReallocAsyncCtx4 + 252 | 0; //@line 5718
  HEAP32[$568 >> 2] = $126; //@line 5719
  $569 = $ReallocAsyncCtx4 + 256 | 0; //@line 5720
  HEAP32[$569 >> 2] = $128; //@line 5721
  $570 = $ReallocAsyncCtx4 + 260 | 0; //@line 5722
  HEAP32[$570 >> 2] = $130; //@line 5723
  $571 = $ReallocAsyncCtx4 + 264 | 0; //@line 5724
  HEAP32[$571 >> 2] = $132; //@line 5725
  $572 = $ReallocAsyncCtx4 + 268 | 0; //@line 5726
  HEAP32[$572 >> 2] = $134; //@line 5727
  sp = STACKTOP; //@line 5728
  return;
 } else if ((label | 0) == 27) {
  HEAP8[$72 >> 0] = HEAP8[$12 + ($137 & 255) >> 0] | 0; //@line 5736
  $590 = $$0$be + 5 << 24 >> 24; //@line 5749
  HEAP32[$50 >> 2] = (HEAPU8[$12 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$12 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$12 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 5757
  $600 = HEAP32[(HEAP32[$52 >> 2] | 0) + 48 >> 2] | 0; //@line 5760
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 5761
  $601 = FUNCTION_TABLE_iii[$600 & 31]($34, $80) | 0; //@line 5762
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 594; //@line 5765
   $602 = $ReallocAsyncCtx5 + 4 | 0; //@line 5766
   HEAP32[$602 >> 2] = $2; //@line 5767
   $603 = $ReallocAsyncCtx5 + 8 | 0; //@line 5768
   HEAP32[$603 >> 2] = $4; //@line 5769
   $604 = $ReallocAsyncCtx5 + 12 | 0; //@line 5770
   HEAP32[$604 >> 2] = $6; //@line 5771
   $605 = $ReallocAsyncCtx5 + 16 | 0; //@line 5772
   HEAP32[$605 >> 2] = $8; //@line 5773
   $606 = $ReallocAsyncCtx5 + 20 | 0; //@line 5774
   HEAP32[$606 >> 2] = $10; //@line 5775
   $607 = $ReallocAsyncCtx5 + 24 | 0; //@line 5776
   HEAP32[$607 >> 2] = $12; //@line 5777
   $608 = $ReallocAsyncCtx5 + 28 | 0; //@line 5778
   HEAP32[$608 >> 2] = $14; //@line 5779
   $609 = $ReallocAsyncCtx5 + 32 | 0; //@line 5780
   HEAP8[$609 >> 0] = $16; //@line 5781
   $610 = $ReallocAsyncCtx5 + 33 | 0; //@line 5782
   HEAP8[$610 >> 0] = $18; //@line 5783
   $611 = $ReallocAsyncCtx5 + 36 | 0; //@line 5784
   HEAP32[$611 >> 2] = $20; //@line 5785
   $612 = $ReallocAsyncCtx5 + 40 | 0; //@line 5786
   HEAP32[$612 >> 2] = $22; //@line 5787
   $613 = $ReallocAsyncCtx5 + 44 | 0; //@line 5788
   HEAP32[$613 >> 2] = $24; //@line 5789
   $614 = $ReallocAsyncCtx5 + 48 | 0; //@line 5790
   HEAP8[$614 >> 0] = $26; //@line 5791
   $615 = $ReallocAsyncCtx5 + 52 | 0; //@line 5792
   HEAP32[$615 >> 2] = $28; //@line 5793
   $616 = $ReallocAsyncCtx5 + 56 | 0; //@line 5794
   HEAP32[$616 >> 2] = $30; //@line 5795
   $617 = $ReallocAsyncCtx5 + 60 | 0; //@line 5796
   HEAP32[$617 >> 2] = $32; //@line 5797
   $618 = $ReallocAsyncCtx5 + 64 | 0; //@line 5798
   HEAP32[$618 >> 2] = $34; //@line 5799
   $619 = $ReallocAsyncCtx5 + 68 | 0; //@line 5800
   HEAP32[$619 >> 2] = $36; //@line 5801
   $620 = $ReallocAsyncCtx5 + 72 | 0; //@line 5802
   HEAP32[$620 >> 2] = $38; //@line 5803
   $621 = $ReallocAsyncCtx5 + 76 | 0; //@line 5804
   HEAP32[$621 >> 2] = $40; //@line 5805
   $622 = $ReallocAsyncCtx5 + 80 | 0; //@line 5806
   HEAP32[$622 >> 2] = $42; //@line 5807
   $623 = $ReallocAsyncCtx5 + 84 | 0; //@line 5808
   HEAP32[$623 >> 2] = $44; //@line 5809
   $624 = $ReallocAsyncCtx5 + 88 | 0; //@line 5810
   HEAP32[$624 >> 2] = $46; //@line 5811
   $625 = $ReallocAsyncCtx5 + 92 | 0; //@line 5812
   HEAP32[$625 >> 2] = $48; //@line 5813
   $626 = $ReallocAsyncCtx5 + 96 | 0; //@line 5814
   HEAP32[$626 >> 2] = $50; //@line 5815
   $627 = $ReallocAsyncCtx5 + 100 | 0; //@line 5816
   HEAP32[$627 >> 2] = $52; //@line 5817
   $628 = $ReallocAsyncCtx5 + 104 | 0; //@line 5818
   HEAP32[$628 >> 2] = $54; //@line 5819
   $629 = $ReallocAsyncCtx5 + 108 | 0; //@line 5820
   HEAP32[$629 >> 2] = $56; //@line 5821
   $630 = $ReallocAsyncCtx5 + 112 | 0; //@line 5822
   HEAP32[$630 >> 2] = $58; //@line 5823
   $631 = $ReallocAsyncCtx5 + 116 | 0; //@line 5824
   HEAP32[$631 >> 2] = $60; //@line 5825
   $632 = $ReallocAsyncCtx5 + 120 | 0; //@line 5826
   HEAP32[$632 >> 2] = $62; //@line 5827
   $633 = $ReallocAsyncCtx5 + 124 | 0; //@line 5828
   HEAP32[$633 >> 2] = $64; //@line 5829
   $634 = $ReallocAsyncCtx5 + 128 | 0; //@line 5830
   HEAP32[$634 >> 2] = $66; //@line 5831
   $635 = $ReallocAsyncCtx5 + 132 | 0; //@line 5832
   HEAP32[$635 >> 2] = $68; //@line 5833
   $636 = $ReallocAsyncCtx5 + 136 | 0; //@line 5834
   HEAP32[$636 >> 2] = $70; //@line 5835
   $637 = $ReallocAsyncCtx5 + 140 | 0; //@line 5836
   HEAP32[$637 >> 2] = $72; //@line 5837
   $638 = $ReallocAsyncCtx5 + 144 | 0; //@line 5838
   HEAP32[$638 >> 2] = $74; //@line 5839
   $639 = $ReallocAsyncCtx5 + 148 | 0; //@line 5840
   HEAP32[$639 >> 2] = $76; //@line 5841
   $640 = $ReallocAsyncCtx5 + 152 | 0; //@line 5842
   HEAP32[$640 >> 2] = $78; //@line 5843
   $641 = $ReallocAsyncCtx5 + 156 | 0; //@line 5844
   HEAP32[$641 >> 2] = $80; //@line 5845
   $642 = $ReallocAsyncCtx5 + 160 | 0; //@line 5846
   HEAP32[$642 >> 2] = $82; //@line 5847
   $643 = $ReallocAsyncCtx5 + 164 | 0; //@line 5848
   HEAP32[$643 >> 2] = $84; //@line 5849
   $644 = $ReallocAsyncCtx5 + 168 | 0; //@line 5850
   HEAP32[$644 >> 2] = $86; //@line 5851
   $645 = $ReallocAsyncCtx5 + 172 | 0; //@line 5852
   HEAP32[$645 >> 2] = $88; //@line 5853
   $646 = $ReallocAsyncCtx5 + 176 | 0; //@line 5854
   HEAP32[$646 >> 2] = $90; //@line 5855
   $647 = $ReallocAsyncCtx5 + 180 | 0; //@line 5856
   HEAP8[$647 >> 0] = $590; //@line 5857
   $648 = $ReallocAsyncCtx5 + 184 | 0; //@line 5858
   HEAP32[$648 >> 2] = $92; //@line 5859
   $649 = $ReallocAsyncCtx5 + 188 | 0; //@line 5860
   HEAP32[$649 >> 2] = $94; //@line 5861
   $650 = $ReallocAsyncCtx5 + 192 | 0; //@line 5862
   HEAP32[$650 >> 2] = $96; //@line 5863
   $651 = $ReallocAsyncCtx5 + 196 | 0; //@line 5864
   HEAP32[$651 >> 2] = $98; //@line 5865
   $652 = $ReallocAsyncCtx5 + 200 | 0; //@line 5866
   HEAP32[$652 >> 2] = $100; //@line 5867
   $653 = $ReallocAsyncCtx5 + 204 | 0; //@line 5868
   HEAP32[$653 >> 2] = $102; //@line 5869
   $654 = $ReallocAsyncCtx5 + 208 | 0; //@line 5870
   HEAP32[$654 >> 2] = $104; //@line 5871
   $655 = $ReallocAsyncCtx5 + 212 | 0; //@line 5872
   HEAP32[$655 >> 2] = $106; //@line 5873
   $656 = $ReallocAsyncCtx5 + 216 | 0; //@line 5874
   HEAP32[$656 >> 2] = $108; //@line 5875
   $657 = $ReallocAsyncCtx5 + 220 | 0; //@line 5876
   HEAP32[$657 >> 2] = $112; //@line 5877
   $658 = $ReallocAsyncCtx5 + 224 | 0; //@line 5878
   HEAP32[$658 >> 2] = $114; //@line 5879
   $659 = $ReallocAsyncCtx5 + 228 | 0; //@line 5880
   HEAP32[$659 >> 2] = $116; //@line 5881
   $660 = $ReallocAsyncCtx5 + 232 | 0; //@line 5882
   HEAP32[$660 >> 2] = $118; //@line 5883
   $661 = $ReallocAsyncCtx5 + 236 | 0; //@line 5884
   HEAP32[$661 >> 2] = $120; //@line 5885
   $662 = $ReallocAsyncCtx5 + 240 | 0; //@line 5886
   HEAP32[$662 >> 2] = $122; //@line 5887
   $663 = $ReallocAsyncCtx5 + 244 | 0; //@line 5888
   HEAP32[$663 >> 2] = $124; //@line 5889
   $664 = $ReallocAsyncCtx5 + 248 | 0; //@line 5890
   HEAP32[$664 >> 2] = $126; //@line 5891
   $665 = $ReallocAsyncCtx5 + 252 | 0; //@line 5892
   HEAP32[$665 >> 2] = $128; //@line 5893
   $666 = $ReallocAsyncCtx5 + 256 | 0; //@line 5894
   HEAP32[$666 >> 2] = $130; //@line 5895
   $667 = $ReallocAsyncCtx5 + 260 | 0; //@line 5896
   HEAP32[$667 >> 2] = $132; //@line 5897
   $668 = $ReallocAsyncCtx5 + 264 | 0; //@line 5898
   HEAP32[$668 >> 2] = $134; //@line 5899
   sp = STACKTOP; //@line 5900
   return;
  }
  HEAP8[___async_retval >> 0] = $601; //@line 5904
  ___async_unwind = 0; //@line 5905
  HEAP32[$ReallocAsyncCtx5 >> 2] = 594; //@line 5906
  $602 = $ReallocAsyncCtx5 + 4 | 0; //@line 5907
  HEAP32[$602 >> 2] = $2; //@line 5908
  $603 = $ReallocAsyncCtx5 + 8 | 0; //@line 5909
  HEAP32[$603 >> 2] = $4; //@line 5910
  $604 = $ReallocAsyncCtx5 + 12 | 0; //@line 5911
  HEAP32[$604 >> 2] = $6; //@line 5912
  $605 = $ReallocAsyncCtx5 + 16 | 0; //@line 5913
  HEAP32[$605 >> 2] = $8; //@line 5914
  $606 = $ReallocAsyncCtx5 + 20 | 0; //@line 5915
  HEAP32[$606 >> 2] = $10; //@line 5916
  $607 = $ReallocAsyncCtx5 + 24 | 0; //@line 5917
  HEAP32[$607 >> 2] = $12; //@line 5918
  $608 = $ReallocAsyncCtx5 + 28 | 0; //@line 5919
  HEAP32[$608 >> 2] = $14; //@line 5920
  $609 = $ReallocAsyncCtx5 + 32 | 0; //@line 5921
  HEAP8[$609 >> 0] = $16; //@line 5922
  $610 = $ReallocAsyncCtx5 + 33 | 0; //@line 5923
  HEAP8[$610 >> 0] = $18; //@line 5924
  $611 = $ReallocAsyncCtx5 + 36 | 0; //@line 5925
  HEAP32[$611 >> 2] = $20; //@line 5926
  $612 = $ReallocAsyncCtx5 + 40 | 0; //@line 5927
  HEAP32[$612 >> 2] = $22; //@line 5928
  $613 = $ReallocAsyncCtx5 + 44 | 0; //@line 5929
  HEAP32[$613 >> 2] = $24; //@line 5930
  $614 = $ReallocAsyncCtx5 + 48 | 0; //@line 5931
  HEAP8[$614 >> 0] = $26; //@line 5932
  $615 = $ReallocAsyncCtx5 + 52 | 0; //@line 5933
  HEAP32[$615 >> 2] = $28; //@line 5934
  $616 = $ReallocAsyncCtx5 + 56 | 0; //@line 5935
  HEAP32[$616 >> 2] = $30; //@line 5936
  $617 = $ReallocAsyncCtx5 + 60 | 0; //@line 5937
  HEAP32[$617 >> 2] = $32; //@line 5938
  $618 = $ReallocAsyncCtx5 + 64 | 0; //@line 5939
  HEAP32[$618 >> 2] = $34; //@line 5940
  $619 = $ReallocAsyncCtx5 + 68 | 0; //@line 5941
  HEAP32[$619 >> 2] = $36; //@line 5942
  $620 = $ReallocAsyncCtx5 + 72 | 0; //@line 5943
  HEAP32[$620 >> 2] = $38; //@line 5944
  $621 = $ReallocAsyncCtx5 + 76 | 0; //@line 5945
  HEAP32[$621 >> 2] = $40; //@line 5946
  $622 = $ReallocAsyncCtx5 + 80 | 0; //@line 5947
  HEAP32[$622 >> 2] = $42; //@line 5948
  $623 = $ReallocAsyncCtx5 + 84 | 0; //@line 5949
  HEAP32[$623 >> 2] = $44; //@line 5950
  $624 = $ReallocAsyncCtx5 + 88 | 0; //@line 5951
  HEAP32[$624 >> 2] = $46; //@line 5952
  $625 = $ReallocAsyncCtx5 + 92 | 0; //@line 5953
  HEAP32[$625 >> 2] = $48; //@line 5954
  $626 = $ReallocAsyncCtx5 + 96 | 0; //@line 5955
  HEAP32[$626 >> 2] = $50; //@line 5956
  $627 = $ReallocAsyncCtx5 + 100 | 0; //@line 5957
  HEAP32[$627 >> 2] = $52; //@line 5958
  $628 = $ReallocAsyncCtx5 + 104 | 0; //@line 5959
  HEAP32[$628 >> 2] = $54; //@line 5960
  $629 = $ReallocAsyncCtx5 + 108 | 0; //@line 5961
  HEAP32[$629 >> 2] = $56; //@line 5962
  $630 = $ReallocAsyncCtx5 + 112 | 0; //@line 5963
  HEAP32[$630 >> 2] = $58; //@line 5964
  $631 = $ReallocAsyncCtx5 + 116 | 0; //@line 5965
  HEAP32[$631 >> 2] = $60; //@line 5966
  $632 = $ReallocAsyncCtx5 + 120 | 0; //@line 5967
  HEAP32[$632 >> 2] = $62; //@line 5968
  $633 = $ReallocAsyncCtx5 + 124 | 0; //@line 5969
  HEAP32[$633 >> 2] = $64; //@line 5970
  $634 = $ReallocAsyncCtx5 + 128 | 0; //@line 5971
  HEAP32[$634 >> 2] = $66; //@line 5972
  $635 = $ReallocAsyncCtx5 + 132 | 0; //@line 5973
  HEAP32[$635 >> 2] = $68; //@line 5974
  $636 = $ReallocAsyncCtx5 + 136 | 0; //@line 5975
  HEAP32[$636 >> 2] = $70; //@line 5976
  $637 = $ReallocAsyncCtx5 + 140 | 0; //@line 5977
  HEAP32[$637 >> 2] = $72; //@line 5978
  $638 = $ReallocAsyncCtx5 + 144 | 0; //@line 5979
  HEAP32[$638 >> 2] = $74; //@line 5980
  $639 = $ReallocAsyncCtx5 + 148 | 0; //@line 5981
  HEAP32[$639 >> 2] = $76; //@line 5982
  $640 = $ReallocAsyncCtx5 + 152 | 0; //@line 5983
  HEAP32[$640 >> 2] = $78; //@line 5984
  $641 = $ReallocAsyncCtx5 + 156 | 0; //@line 5985
  HEAP32[$641 >> 2] = $80; //@line 5986
  $642 = $ReallocAsyncCtx5 + 160 | 0; //@line 5987
  HEAP32[$642 >> 2] = $82; //@line 5988
  $643 = $ReallocAsyncCtx5 + 164 | 0; //@line 5989
  HEAP32[$643 >> 2] = $84; //@line 5990
  $644 = $ReallocAsyncCtx5 + 168 | 0; //@line 5991
  HEAP32[$644 >> 2] = $86; //@line 5992
  $645 = $ReallocAsyncCtx5 + 172 | 0; //@line 5993
  HEAP32[$645 >> 2] = $88; //@line 5994
  $646 = $ReallocAsyncCtx5 + 176 | 0; //@line 5995
  HEAP32[$646 >> 2] = $90; //@line 5996
  $647 = $ReallocAsyncCtx5 + 180 | 0; //@line 5997
  HEAP8[$647 >> 0] = $590; //@line 5998
  $648 = $ReallocAsyncCtx5 + 184 | 0; //@line 5999
  HEAP32[$648 >> 2] = $92; //@line 6000
  $649 = $ReallocAsyncCtx5 + 188 | 0; //@line 6001
  HEAP32[$649 >> 2] = $94; //@line 6002
  $650 = $ReallocAsyncCtx5 + 192 | 0; //@line 6003
  HEAP32[$650 >> 2] = $96; //@line 6004
  $651 = $ReallocAsyncCtx5 + 196 | 0; //@line 6005
  HEAP32[$651 >> 2] = $98; //@line 6006
  $652 = $ReallocAsyncCtx5 + 200 | 0; //@line 6007
  HEAP32[$652 >> 2] = $100; //@line 6008
  $653 = $ReallocAsyncCtx5 + 204 | 0; //@line 6009
  HEAP32[$653 >> 2] = $102; //@line 6010
  $654 = $ReallocAsyncCtx5 + 208 | 0; //@line 6011
  HEAP32[$654 >> 2] = $104; //@line 6012
  $655 = $ReallocAsyncCtx5 + 212 | 0; //@line 6013
  HEAP32[$655 >> 2] = $106; //@line 6014
  $656 = $ReallocAsyncCtx5 + 216 | 0; //@line 6015
  HEAP32[$656 >> 2] = $108; //@line 6016
  $657 = $ReallocAsyncCtx5 + 220 | 0; //@line 6017
  HEAP32[$657 >> 2] = $112; //@line 6018
  $658 = $ReallocAsyncCtx5 + 224 | 0; //@line 6019
  HEAP32[$658 >> 2] = $114; //@line 6020
  $659 = $ReallocAsyncCtx5 + 228 | 0; //@line 6021
  HEAP32[$659 >> 2] = $116; //@line 6022
  $660 = $ReallocAsyncCtx5 + 232 | 0; //@line 6023
  HEAP32[$660 >> 2] = $118; //@line 6024
  $661 = $ReallocAsyncCtx5 + 236 | 0; //@line 6025
  HEAP32[$661 >> 2] = $120; //@line 6026
  $662 = $ReallocAsyncCtx5 + 240 | 0; //@line 6027
  HEAP32[$662 >> 2] = $122; //@line 6028
  $663 = $ReallocAsyncCtx5 + 244 | 0; //@line 6029
  HEAP32[$663 >> 2] = $124; //@line 6030
  $664 = $ReallocAsyncCtx5 + 248 | 0; //@line 6031
  HEAP32[$664 >> 2] = $126; //@line 6032
  $665 = $ReallocAsyncCtx5 + 252 | 0; //@line 6033
  HEAP32[$665 >> 2] = $128; //@line 6034
  $666 = $ReallocAsyncCtx5 + 256 | 0; //@line 6035
  HEAP32[$666 >> 2] = $130; //@line 6036
  $667 = $ReallocAsyncCtx5 + 260 | 0; //@line 6037
  HEAP32[$667 >> 2] = $132; //@line 6038
  $668 = $ReallocAsyncCtx5 + 264 | 0; //@line 6039
  HEAP32[$668 >> 2] = $134; //@line 6040
  sp = STACKTOP; //@line 6041
  return;
 } else if ((label | 0) == 31) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 6046
  return;
 }
}
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 7069
 STACKTOP = STACKTOP + 16 | 0; //@line 7070
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7070
 $1 = sp; //@line 7071
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 7078
   $7 = $6 >>> 3; //@line 7079
   $8 = HEAP32[5814] | 0; //@line 7080
   $9 = $8 >>> $7; //@line 7081
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 7087
    $16 = 23296 + ($14 << 1 << 2) | 0; //@line 7089
    $17 = $16 + 8 | 0; //@line 7090
    $18 = HEAP32[$17 >> 2] | 0; //@line 7091
    $19 = $18 + 8 | 0; //@line 7092
    $20 = HEAP32[$19 >> 2] | 0; //@line 7093
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[5814] = $8 & ~(1 << $14); //@line 7100
     } else {
      if ((HEAP32[5818] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 7105
      }
      $27 = $20 + 12 | 0; //@line 7108
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 7112
       HEAP32[$17 >> 2] = $20; //@line 7113
       break;
      } else {
       _abort(); //@line 7116
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 7121
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 7124
    $34 = $18 + $30 + 4 | 0; //@line 7126
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 7129
    $$0 = $19; //@line 7130
    STACKTOP = sp; //@line 7131
    return $$0 | 0; //@line 7131
   }
   $37 = HEAP32[5816] | 0; //@line 7133
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 7139
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 7142
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 7145
     $49 = $47 >>> 12 & 16; //@line 7147
     $50 = $47 >>> $49; //@line 7148
     $52 = $50 >>> 5 & 8; //@line 7150
     $54 = $50 >>> $52; //@line 7152
     $56 = $54 >>> 2 & 4; //@line 7154
     $58 = $54 >>> $56; //@line 7156
     $60 = $58 >>> 1 & 2; //@line 7158
     $62 = $58 >>> $60; //@line 7160
     $64 = $62 >>> 1 & 1; //@line 7162
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 7165
     $69 = 23296 + ($67 << 1 << 2) | 0; //@line 7167
     $70 = $69 + 8 | 0; //@line 7168
     $71 = HEAP32[$70 >> 2] | 0; //@line 7169
     $72 = $71 + 8 | 0; //@line 7170
     $73 = HEAP32[$72 >> 2] | 0; //@line 7171
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 7177
       HEAP32[5814] = $77; //@line 7178
       $98 = $77; //@line 7179
      } else {
       if ((HEAP32[5818] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 7184
       }
       $80 = $73 + 12 | 0; //@line 7187
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 7191
        HEAP32[$70 >> 2] = $73; //@line 7192
        $98 = $8; //@line 7193
        break;
       } else {
        _abort(); //@line 7196
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 7201
     $84 = $83 - $6 | 0; //@line 7202
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 7205
     $87 = $71 + $6 | 0; //@line 7206
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 7209
     HEAP32[$71 + $83 >> 2] = $84; //@line 7211
     if ($37 | 0) {
      $92 = HEAP32[5819] | 0; //@line 7214
      $93 = $37 >>> 3; //@line 7215
      $95 = 23296 + ($93 << 1 << 2) | 0; //@line 7217
      $96 = 1 << $93; //@line 7218
      if (!($98 & $96)) {
       HEAP32[5814] = $98 | $96; //@line 7223
       $$0199 = $95; //@line 7225
       $$pre$phiZ2D = $95 + 8 | 0; //@line 7225
      } else {
       $101 = $95 + 8 | 0; //@line 7227
       $102 = HEAP32[$101 >> 2] | 0; //@line 7228
       if ((HEAP32[5818] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 7232
       } else {
        $$0199 = $102; //@line 7235
        $$pre$phiZ2D = $101; //@line 7235
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 7238
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 7240
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 7242
      HEAP32[$92 + 12 >> 2] = $95; //@line 7244
     }
     HEAP32[5816] = $84; //@line 7246
     HEAP32[5819] = $87; //@line 7247
     $$0 = $72; //@line 7248
     STACKTOP = sp; //@line 7249
     return $$0 | 0; //@line 7249
    }
    $108 = HEAP32[5815] | 0; //@line 7251
    if (!$108) {
     $$0197 = $6; //@line 7254
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 7258
     $114 = $112 >>> 12 & 16; //@line 7260
     $115 = $112 >>> $114; //@line 7261
     $117 = $115 >>> 5 & 8; //@line 7263
     $119 = $115 >>> $117; //@line 7265
     $121 = $119 >>> 2 & 4; //@line 7267
     $123 = $119 >>> $121; //@line 7269
     $125 = $123 >>> 1 & 2; //@line 7271
     $127 = $123 >>> $125; //@line 7273
     $129 = $127 >>> 1 & 1; //@line 7275
     $134 = HEAP32[23560 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 7280
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 7284
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 7290
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 7293
      $$0193$lcssa$i = $138; //@line 7293
     } else {
      $$01926$i = $134; //@line 7295
      $$01935$i = $138; //@line 7295
      $146 = $143; //@line 7295
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 7300
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 7301
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 7302
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 7303
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 7309
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 7312
        $$0193$lcssa$i = $$$0193$i; //@line 7312
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 7315
        $$01935$i = $$$0193$i; //@line 7315
       }
      }
     }
     $157 = HEAP32[5818] | 0; //@line 7319
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 7322
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 7325
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 7328
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 7332
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 7334
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 7338
       $176 = HEAP32[$175 >> 2] | 0; //@line 7339
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 7342
        $179 = HEAP32[$178 >> 2] | 0; //@line 7343
        if (!$179) {
         $$3$i = 0; //@line 7346
         break;
        } else {
         $$1196$i = $179; //@line 7349
         $$1198$i = $178; //@line 7349
        }
       } else {
        $$1196$i = $176; //@line 7352
        $$1198$i = $175; //@line 7352
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 7355
        $182 = HEAP32[$181 >> 2] | 0; //@line 7356
        if ($182 | 0) {
         $$1196$i = $182; //@line 7359
         $$1198$i = $181; //@line 7359
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 7362
        $185 = HEAP32[$184 >> 2] | 0; //@line 7363
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 7368
         $$1198$i = $184; //@line 7368
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 7373
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 7376
        $$3$i = $$1196$i; //@line 7377
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 7382
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 7385
       }
       $169 = $167 + 12 | 0; //@line 7388
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 7392
       }
       $172 = $164 + 8 | 0; //@line 7395
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 7399
        HEAP32[$172 >> 2] = $167; //@line 7400
        $$3$i = $164; //@line 7401
        break;
       } else {
        _abort(); //@line 7404
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 7413
       $191 = 23560 + ($190 << 2) | 0; //@line 7414
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 7419
         if (!$$3$i) {
          HEAP32[5815] = $108 & ~(1 << $190); //@line 7425
          break L73;
         }
        } else {
         if ((HEAP32[5818] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 7432
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 7440
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[5818] | 0; //@line 7450
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 7453
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 7457
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 7459
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 7465
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 7469
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 7471
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 7477
       if ($214 | 0) {
        if ((HEAP32[5818] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 7483
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 7487
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 7489
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 7497
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 7500
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 7502
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 7505
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 7509
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 7512
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 7514
      if ($37 | 0) {
       $234 = HEAP32[5819] | 0; //@line 7517
       $235 = $37 >>> 3; //@line 7518
       $237 = 23296 + ($235 << 1 << 2) | 0; //@line 7520
       $238 = 1 << $235; //@line 7521
       if (!($8 & $238)) {
        HEAP32[5814] = $8 | $238; //@line 7526
        $$0189$i = $237; //@line 7528
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 7528
       } else {
        $242 = $237 + 8 | 0; //@line 7530
        $243 = HEAP32[$242 >> 2] | 0; //@line 7531
        if ((HEAP32[5818] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 7535
        } else {
         $$0189$i = $243; //@line 7538
         $$pre$phi$iZ2D = $242; //@line 7538
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 7541
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 7543
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 7545
       HEAP32[$234 + 12 >> 2] = $237; //@line 7547
      }
      HEAP32[5816] = $$0193$lcssa$i; //@line 7549
      HEAP32[5819] = $159; //@line 7550
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 7553
     STACKTOP = sp; //@line 7554
     return $$0 | 0; //@line 7554
    }
   } else {
    $$0197 = $6; //@line 7557
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 7562
   } else {
    $251 = $0 + 11 | 0; //@line 7564
    $252 = $251 & -8; //@line 7565
    $253 = HEAP32[5815] | 0; //@line 7566
    if (!$253) {
     $$0197 = $252; //@line 7569
    } else {
     $255 = 0 - $252 | 0; //@line 7571
     $256 = $251 >>> 8; //@line 7572
     if (!$256) {
      $$0358$i = 0; //@line 7575
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 7579
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 7583
       $262 = $256 << $261; //@line 7584
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 7587
       $267 = $262 << $265; //@line 7589
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 7592
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 7597
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 7603
      }
     }
     $282 = HEAP32[23560 + ($$0358$i << 2) >> 2] | 0; //@line 7607
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 7611
       $$3$i203 = 0; //@line 7611
       $$3350$i = $255; //@line 7611
       label = 81; //@line 7612
      } else {
       $$0342$i = 0; //@line 7619
       $$0347$i = $255; //@line 7619
       $$0353$i = $282; //@line 7619
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 7619
       $$0362$i = 0; //@line 7619
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 7624
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 7629
          $$435113$i = 0; //@line 7629
          $$435712$i = $$0353$i; //@line 7629
          label = 85; //@line 7630
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 7633
          $$1348$i = $292; //@line 7633
         }
        } else {
         $$1343$i = $$0342$i; //@line 7636
         $$1348$i = $$0347$i; //@line 7636
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 7639
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 7642
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 7646
        $302 = ($$0353$i | 0) == 0; //@line 7647
        if ($302) {
         $$2355$i = $$1363$i; //@line 7652
         $$3$i203 = $$1343$i; //@line 7652
         $$3350$i = $$1348$i; //@line 7652
         label = 81; //@line 7653
         break;
        } else {
         $$0342$i = $$1343$i; //@line 7656
         $$0347$i = $$1348$i; //@line 7656
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 7656
         $$0362$i = $$1363$i; //@line 7656
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 7666
       $309 = $253 & ($306 | 0 - $306); //@line 7669
       if (!$309) {
        $$0197 = $252; //@line 7672
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 7677
       $315 = $313 >>> 12 & 16; //@line 7679
       $316 = $313 >>> $315; //@line 7680
       $318 = $316 >>> 5 & 8; //@line 7682
       $320 = $316 >>> $318; //@line 7684
       $322 = $320 >>> 2 & 4; //@line 7686
       $324 = $320 >>> $322; //@line 7688
       $326 = $324 >>> 1 & 2; //@line 7690
       $328 = $324 >>> $326; //@line 7692
       $330 = $328 >>> 1 & 1; //@line 7694
       $$4$ph$i = 0; //@line 7700
       $$4357$ph$i = HEAP32[23560 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 7700
      } else {
       $$4$ph$i = $$3$i203; //@line 7702
       $$4357$ph$i = $$2355$i; //@line 7702
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 7706
       $$4351$lcssa$i = $$3350$i; //@line 7706
      } else {
       $$414$i = $$4$ph$i; //@line 7708
       $$435113$i = $$3350$i; //@line 7708
       $$435712$i = $$4357$ph$i; //@line 7708
       label = 85; //@line 7709
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 7714
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 7718
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 7719
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 7720
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 7721
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 7727
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 7730
        $$4351$lcssa$i = $$$4351$i; //@line 7730
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 7733
        $$435113$i = $$$4351$i; //@line 7733
        label = 85; //@line 7734
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 7740
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[5816] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[5818] | 0; //@line 7746
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 7749
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 7752
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 7755
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 7759
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 7761
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 7765
         $371 = HEAP32[$370 >> 2] | 0; //@line 7766
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 7769
          $374 = HEAP32[$373 >> 2] | 0; //@line 7770
          if (!$374) {
           $$3372$i = 0; //@line 7773
           break;
          } else {
           $$1370$i = $374; //@line 7776
           $$1374$i = $373; //@line 7776
          }
         } else {
          $$1370$i = $371; //@line 7779
          $$1374$i = $370; //@line 7779
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 7782
          $377 = HEAP32[$376 >> 2] | 0; //@line 7783
          if ($377 | 0) {
           $$1370$i = $377; //@line 7786
           $$1374$i = $376; //@line 7786
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 7789
          $380 = HEAP32[$379 >> 2] | 0; //@line 7790
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 7795
           $$1374$i = $379; //@line 7795
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 7800
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 7803
          $$3372$i = $$1370$i; //@line 7804
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 7809
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 7812
         }
         $364 = $362 + 12 | 0; //@line 7815
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 7819
         }
         $367 = $359 + 8 | 0; //@line 7822
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 7826
          HEAP32[$367 >> 2] = $362; //@line 7827
          $$3372$i = $359; //@line 7828
          break;
         } else {
          _abort(); //@line 7831
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 7839
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 7842
         $386 = 23560 + ($385 << 2) | 0; //@line 7843
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 7848
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 7853
            HEAP32[5815] = $391; //@line 7854
            $475 = $391; //@line 7855
            break L164;
           }
          } else {
           if ((HEAP32[5818] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 7862
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 7870
            if (!$$3372$i) {
             $475 = $253; //@line 7873
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[5818] | 0; //@line 7881
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 7884
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 7888
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 7890
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 7896
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 7900
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 7902
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 7908
         if (!$409) {
          $475 = $253; //@line 7911
         } else {
          if ((HEAP32[5818] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 7916
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 7920
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 7922
           $475 = $253; //@line 7923
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 7932
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 7935
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 7937
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 7940
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 7944
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 7947
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 7949
         $428 = $$4351$lcssa$i >>> 3; //@line 7950
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 23296 + ($428 << 1 << 2) | 0; //@line 7954
          $432 = HEAP32[5814] | 0; //@line 7955
          $433 = 1 << $428; //@line 7956
          if (!($432 & $433)) {
           HEAP32[5814] = $432 | $433; //@line 7961
           $$0368$i = $431; //@line 7963
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 7963
          } else {
           $437 = $431 + 8 | 0; //@line 7965
           $438 = HEAP32[$437 >> 2] | 0; //@line 7966
           if ((HEAP32[5818] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 7970
           } else {
            $$0368$i = $438; //@line 7973
            $$pre$phi$i211Z2D = $437; //@line 7973
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 7976
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 7978
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 7980
          HEAP32[$354 + 12 >> 2] = $431; //@line 7982
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 7985
         if (!$444) {
          $$0361$i = 0; //@line 7988
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 7992
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 7996
           $450 = $444 << $449; //@line 7997
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 8000
           $455 = $450 << $453; //@line 8002
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 8005
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 8010
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 8016
          }
         }
         $469 = 23560 + ($$0361$i << 2) | 0; //@line 8019
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 8021
         $471 = $354 + 16 | 0; //@line 8022
         HEAP32[$471 + 4 >> 2] = 0; //@line 8024
         HEAP32[$471 >> 2] = 0; //@line 8025
         $473 = 1 << $$0361$i; //@line 8026
         if (!($475 & $473)) {
          HEAP32[5815] = $475 | $473; //@line 8031
          HEAP32[$469 >> 2] = $354; //@line 8032
          HEAP32[$354 + 24 >> 2] = $469; //@line 8034
          HEAP32[$354 + 12 >> 2] = $354; //@line 8036
          HEAP32[$354 + 8 >> 2] = $354; //@line 8038
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 8047
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 8047
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 8054
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 8058
          $494 = HEAP32[$492 >> 2] | 0; //@line 8060
          if (!$494) {
           label = 136; //@line 8063
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 8066
           $$0345$i = $494; //@line 8066
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[5818] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 8073
          } else {
           HEAP32[$492 >> 2] = $354; //@line 8076
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 8078
           HEAP32[$354 + 12 >> 2] = $354; //@line 8080
           HEAP32[$354 + 8 >> 2] = $354; //@line 8082
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 8087
          $502 = HEAP32[$501 >> 2] | 0; //@line 8088
          $503 = HEAP32[5818] | 0; //@line 8089
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 8095
           HEAP32[$501 >> 2] = $354; //@line 8096
           HEAP32[$354 + 8 >> 2] = $502; //@line 8098
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 8100
           HEAP32[$354 + 24 >> 2] = 0; //@line 8102
           break;
          } else {
           _abort(); //@line 8105
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 8112
       STACKTOP = sp; //@line 8113
       return $$0 | 0; //@line 8113
      } else {
       $$0197 = $252; //@line 8115
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[5816] | 0; //@line 8122
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 8125
  $515 = HEAP32[5819] | 0; //@line 8126
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 8129
   HEAP32[5819] = $517; //@line 8130
   HEAP32[5816] = $514; //@line 8131
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 8134
   HEAP32[$515 + $512 >> 2] = $514; //@line 8136
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 8139
  } else {
   HEAP32[5816] = 0; //@line 8141
   HEAP32[5819] = 0; //@line 8142
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 8145
   $526 = $515 + $512 + 4 | 0; //@line 8147
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 8150
  }
  $$0 = $515 + 8 | 0; //@line 8153
  STACKTOP = sp; //@line 8154
  return $$0 | 0; //@line 8154
 }
 $530 = HEAP32[5817] | 0; //@line 8156
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 8159
  HEAP32[5817] = $532; //@line 8160
  $533 = HEAP32[5820] | 0; //@line 8161
  $534 = $533 + $$0197 | 0; //@line 8162
  HEAP32[5820] = $534; //@line 8163
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 8166
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 8169
  $$0 = $533 + 8 | 0; //@line 8171
  STACKTOP = sp; //@line 8172
  return $$0 | 0; //@line 8172
 }
 if (!(HEAP32[5932] | 0)) {
  HEAP32[5934] = 4096; //@line 8177
  HEAP32[5933] = 4096; //@line 8178
  HEAP32[5935] = -1; //@line 8179
  HEAP32[5936] = -1; //@line 8180
  HEAP32[5937] = 0; //@line 8181
  HEAP32[5925] = 0; //@line 8182
  HEAP32[5932] = $1 & -16 ^ 1431655768; //@line 8186
  $548 = 4096; //@line 8187
 } else {
  $548 = HEAP32[5934] | 0; //@line 8190
 }
 $545 = $$0197 + 48 | 0; //@line 8192
 $546 = $$0197 + 47 | 0; //@line 8193
 $547 = $548 + $546 | 0; //@line 8194
 $549 = 0 - $548 | 0; //@line 8195
 $550 = $547 & $549; //@line 8196
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 8199
  STACKTOP = sp; //@line 8200
  return $$0 | 0; //@line 8200
 }
 $552 = HEAP32[5924] | 0; //@line 8202
 if ($552 | 0) {
  $554 = HEAP32[5922] | 0; //@line 8205
  $555 = $554 + $550 | 0; //@line 8206
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 8211
   STACKTOP = sp; //@line 8212
   return $$0 | 0; //@line 8212
  }
 }
 L244 : do {
  if (!(HEAP32[5925] & 4)) {
   $561 = HEAP32[5820] | 0; //@line 8220
   L246 : do {
    if (!$561) {
     label = 163; //@line 8224
    } else {
     $$0$i$i = 23704; //@line 8226
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 8228
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 8231
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 8240
      if (!$570) {
       label = 163; //@line 8243
       break L246;
      } else {
       $$0$i$i = $570; //@line 8246
      }
     }
     $595 = $547 - $530 & $549; //@line 8250
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 8253
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 8261
       } else {
        $$723947$i = $595; //@line 8263
        $$748$i = $597; //@line 8263
        label = 180; //@line 8264
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 8268
       $$2253$ph$i = $595; //@line 8268
       label = 171; //@line 8269
      }
     } else {
      $$2234243136$i = 0; //@line 8272
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 8278
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 8281
     } else {
      $574 = $572; //@line 8283
      $575 = HEAP32[5933] | 0; //@line 8284
      $576 = $575 + -1 | 0; //@line 8285
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 8293
      $584 = HEAP32[5922] | 0; //@line 8294
      $585 = $$$i + $584 | 0; //@line 8295
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[5924] | 0; //@line 8300
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 8307
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 8311
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 8314
        $$748$i = $572; //@line 8314
        label = 180; //@line 8315
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 8318
        $$2253$ph$i = $$$i; //@line 8318
        label = 171; //@line 8319
       }
      } else {
       $$2234243136$i = 0; //@line 8322
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 8329
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 8338
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 8341
       $$748$i = $$2247$ph$i; //@line 8341
       label = 180; //@line 8342
       break L244;
      }
     }
     $607 = HEAP32[5934] | 0; //@line 8346
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 8350
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 8353
      $$748$i = $$2247$ph$i; //@line 8353
      label = 180; //@line 8354
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 8360
      $$2234243136$i = 0; //@line 8361
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 8365
      $$748$i = $$2247$ph$i; //@line 8365
      label = 180; //@line 8366
      break L244;
     }
    }
   } while (0);
   HEAP32[5925] = HEAP32[5925] | 4; //@line 8373
   $$4236$i = $$2234243136$i; //@line 8374
   label = 178; //@line 8375
  } else {
   $$4236$i = 0; //@line 8377
   label = 178; //@line 8378
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 8384
   $621 = _sbrk(0) | 0; //@line 8385
   $627 = $621 - $620 | 0; //@line 8393
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 8395
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 8403
    $$748$i = $620; //@line 8403
    label = 180; //@line 8404
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[5922] | 0) + $$723947$i | 0; //@line 8410
  HEAP32[5922] = $633; //@line 8411
  if ($633 >>> 0 > (HEAP32[5923] | 0) >>> 0) {
   HEAP32[5923] = $633; //@line 8415
  }
  $636 = HEAP32[5820] | 0; //@line 8417
  do {
   if (!$636) {
    $638 = HEAP32[5818] | 0; //@line 8421
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[5818] = $$748$i; //@line 8426
    }
    HEAP32[5926] = $$748$i; //@line 8428
    HEAP32[5927] = $$723947$i; //@line 8429
    HEAP32[5929] = 0; //@line 8430
    HEAP32[5823] = HEAP32[5932]; //@line 8432
    HEAP32[5822] = -1; //@line 8433
    HEAP32[5827] = 23296; //@line 8434
    HEAP32[5826] = 23296; //@line 8435
    HEAP32[5829] = 23304; //@line 8436
    HEAP32[5828] = 23304; //@line 8437
    HEAP32[5831] = 23312; //@line 8438
    HEAP32[5830] = 23312; //@line 8439
    HEAP32[5833] = 23320; //@line 8440
    HEAP32[5832] = 23320; //@line 8441
    HEAP32[5835] = 23328; //@line 8442
    HEAP32[5834] = 23328; //@line 8443
    HEAP32[5837] = 23336; //@line 8444
    HEAP32[5836] = 23336; //@line 8445
    HEAP32[5839] = 23344; //@line 8446
    HEAP32[5838] = 23344; //@line 8447
    HEAP32[5841] = 23352; //@line 8448
    HEAP32[5840] = 23352; //@line 8449
    HEAP32[5843] = 23360; //@line 8450
    HEAP32[5842] = 23360; //@line 8451
    HEAP32[5845] = 23368; //@line 8452
    HEAP32[5844] = 23368; //@line 8453
    HEAP32[5847] = 23376; //@line 8454
    HEAP32[5846] = 23376; //@line 8455
    HEAP32[5849] = 23384; //@line 8456
    HEAP32[5848] = 23384; //@line 8457
    HEAP32[5851] = 23392; //@line 8458
    HEAP32[5850] = 23392; //@line 8459
    HEAP32[5853] = 23400; //@line 8460
    HEAP32[5852] = 23400; //@line 8461
    HEAP32[5855] = 23408; //@line 8462
    HEAP32[5854] = 23408; //@line 8463
    HEAP32[5857] = 23416; //@line 8464
    HEAP32[5856] = 23416; //@line 8465
    HEAP32[5859] = 23424; //@line 8466
    HEAP32[5858] = 23424; //@line 8467
    HEAP32[5861] = 23432; //@line 8468
    HEAP32[5860] = 23432; //@line 8469
    HEAP32[5863] = 23440; //@line 8470
    HEAP32[5862] = 23440; //@line 8471
    HEAP32[5865] = 23448; //@line 8472
    HEAP32[5864] = 23448; //@line 8473
    HEAP32[5867] = 23456; //@line 8474
    HEAP32[5866] = 23456; //@line 8475
    HEAP32[5869] = 23464; //@line 8476
    HEAP32[5868] = 23464; //@line 8477
    HEAP32[5871] = 23472; //@line 8478
    HEAP32[5870] = 23472; //@line 8479
    HEAP32[5873] = 23480; //@line 8480
    HEAP32[5872] = 23480; //@line 8481
    HEAP32[5875] = 23488; //@line 8482
    HEAP32[5874] = 23488; //@line 8483
    HEAP32[5877] = 23496; //@line 8484
    HEAP32[5876] = 23496; //@line 8485
    HEAP32[5879] = 23504; //@line 8486
    HEAP32[5878] = 23504; //@line 8487
    HEAP32[5881] = 23512; //@line 8488
    HEAP32[5880] = 23512; //@line 8489
    HEAP32[5883] = 23520; //@line 8490
    HEAP32[5882] = 23520; //@line 8491
    HEAP32[5885] = 23528; //@line 8492
    HEAP32[5884] = 23528; //@line 8493
    HEAP32[5887] = 23536; //@line 8494
    HEAP32[5886] = 23536; //@line 8495
    HEAP32[5889] = 23544; //@line 8496
    HEAP32[5888] = 23544; //@line 8497
    $642 = $$723947$i + -40 | 0; //@line 8498
    $644 = $$748$i + 8 | 0; //@line 8500
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 8505
    $650 = $$748$i + $649 | 0; //@line 8506
    $651 = $642 - $649 | 0; //@line 8507
    HEAP32[5820] = $650; //@line 8508
    HEAP32[5817] = $651; //@line 8509
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 8512
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 8515
    HEAP32[5821] = HEAP32[5936]; //@line 8517
   } else {
    $$024367$i = 23704; //@line 8519
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 8521
     $658 = $$024367$i + 4 | 0; //@line 8522
     $659 = HEAP32[$658 >> 2] | 0; //@line 8523
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 8527
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 8531
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 8536
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 8550
       $673 = (HEAP32[5817] | 0) + $$723947$i | 0; //@line 8552
       $675 = $636 + 8 | 0; //@line 8554
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 8559
       $681 = $636 + $680 | 0; //@line 8560
       $682 = $673 - $680 | 0; //@line 8561
       HEAP32[5820] = $681; //@line 8562
       HEAP32[5817] = $682; //@line 8563
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 8566
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 8569
       HEAP32[5821] = HEAP32[5936]; //@line 8571
       break;
      }
     }
    }
    $688 = HEAP32[5818] | 0; //@line 8576
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[5818] = $$748$i; //@line 8579
     $753 = $$748$i; //@line 8580
    } else {
     $753 = $688; //@line 8582
    }
    $690 = $$748$i + $$723947$i | 0; //@line 8584
    $$124466$i = 23704; //@line 8585
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 8590
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 8594
     if (!$694) {
      $$0$i$i$i = 23704; //@line 8597
      break;
     } else {
      $$124466$i = $694; //@line 8600
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 8609
      $700 = $$124466$i + 4 | 0; //@line 8610
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 8613
      $704 = $$748$i + 8 | 0; //@line 8615
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 8621
      $712 = $690 + 8 | 0; //@line 8623
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 8629
      $722 = $710 + $$0197 | 0; //@line 8633
      $723 = $718 - $710 - $$0197 | 0; //@line 8634
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 8637
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[5817] | 0) + $723 | 0; //@line 8642
        HEAP32[5817] = $728; //@line 8643
        HEAP32[5820] = $722; //@line 8644
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 8647
       } else {
        if ((HEAP32[5819] | 0) == ($718 | 0)) {
         $734 = (HEAP32[5816] | 0) + $723 | 0; //@line 8653
         HEAP32[5816] = $734; //@line 8654
         HEAP32[5819] = $722; //@line 8655
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 8658
         HEAP32[$722 + $734 >> 2] = $734; //@line 8660
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 8664
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 8668
         $743 = $739 >>> 3; //@line 8669
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 8674
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 8676
           $750 = 23296 + ($743 << 1 << 2) | 0; //@line 8678
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 8684
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 8693
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[5814] = HEAP32[5814] & ~(1 << $743); //@line 8703
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 8710
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 8714
             }
             $764 = $748 + 8 | 0; //@line 8717
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 8721
              break;
             }
             _abort(); //@line 8724
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 8729
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 8730
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 8733
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 8735
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 8739
             $783 = $782 + 4 | 0; //@line 8740
             $784 = HEAP32[$783 >> 2] | 0; //@line 8741
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 8744
              if (!$786) {
               $$3$i$i = 0; //@line 8747
               break;
              } else {
               $$1291$i$i = $786; //@line 8750
               $$1293$i$i = $782; //@line 8750
              }
             } else {
              $$1291$i$i = $784; //@line 8753
              $$1293$i$i = $783; //@line 8753
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 8756
              $789 = HEAP32[$788 >> 2] | 0; //@line 8757
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 8760
               $$1293$i$i = $788; //@line 8760
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 8763
              $792 = HEAP32[$791 >> 2] | 0; //@line 8764
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 8769
               $$1293$i$i = $791; //@line 8769
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 8774
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 8777
              $$3$i$i = $$1291$i$i; //@line 8778
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 8783
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 8786
             }
             $776 = $774 + 12 | 0; //@line 8789
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 8793
             }
             $779 = $771 + 8 | 0; //@line 8796
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 8800
              HEAP32[$779 >> 2] = $774; //@line 8801
              $$3$i$i = $771; //@line 8802
              break;
             } else {
              _abort(); //@line 8805
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 8815
           $798 = 23560 + ($797 << 2) | 0; //@line 8816
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 8821
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[5815] = HEAP32[5815] & ~(1 << $797); //@line 8830
             break L311;
            } else {
             if ((HEAP32[5818] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 8836
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 8844
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[5818] | 0; //@line 8854
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 8857
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 8861
           $815 = $718 + 16 | 0; //@line 8862
           $816 = HEAP32[$815 >> 2] | 0; //@line 8863
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 8869
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 8873
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 8875
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 8881
           if (!$822) {
            break;
           }
           if ((HEAP32[5818] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 8889
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 8893
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 8895
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 8902
         $$0287$i$i = $742 + $723 | 0; //@line 8902
        } else {
         $$0$i17$i = $718; //@line 8904
         $$0287$i$i = $723; //@line 8904
        }
        $830 = $$0$i17$i + 4 | 0; //@line 8906
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 8909
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 8912
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 8914
        $836 = $$0287$i$i >>> 3; //@line 8915
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 23296 + ($836 << 1 << 2) | 0; //@line 8919
         $840 = HEAP32[5814] | 0; //@line 8920
         $841 = 1 << $836; //@line 8921
         do {
          if (!($840 & $841)) {
           HEAP32[5814] = $840 | $841; //@line 8927
           $$0295$i$i = $839; //@line 8929
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 8929
          } else {
           $845 = $839 + 8 | 0; //@line 8931
           $846 = HEAP32[$845 >> 2] | 0; //@line 8932
           if ((HEAP32[5818] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 8936
            $$pre$phi$i19$iZ2D = $845; //@line 8936
            break;
           }
           _abort(); //@line 8939
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 8943
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 8945
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 8947
         HEAP32[$722 + 12 >> 2] = $839; //@line 8949
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 8952
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 8956
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 8960
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 8965
          $858 = $852 << $857; //@line 8966
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 8969
          $863 = $858 << $861; //@line 8971
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 8974
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 8979
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 8985
         }
        } while (0);
        $877 = 23560 + ($$0296$i$i << 2) | 0; //@line 8988
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 8990
        $879 = $722 + 16 | 0; //@line 8991
        HEAP32[$879 + 4 >> 2] = 0; //@line 8993
        HEAP32[$879 >> 2] = 0; //@line 8994
        $881 = HEAP32[5815] | 0; //@line 8995
        $882 = 1 << $$0296$i$i; //@line 8996
        if (!($881 & $882)) {
         HEAP32[5815] = $881 | $882; //@line 9001
         HEAP32[$877 >> 2] = $722; //@line 9002
         HEAP32[$722 + 24 >> 2] = $877; //@line 9004
         HEAP32[$722 + 12 >> 2] = $722; //@line 9006
         HEAP32[$722 + 8 >> 2] = $722; //@line 9008
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 9017
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 9017
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 9024
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 9028
         $902 = HEAP32[$900 >> 2] | 0; //@line 9030
         if (!$902) {
          label = 260; //@line 9033
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 9036
          $$0289$i$i = $902; //@line 9036
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[5818] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 9043
         } else {
          HEAP32[$900 >> 2] = $722; //@line 9046
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 9048
          HEAP32[$722 + 12 >> 2] = $722; //@line 9050
          HEAP32[$722 + 8 >> 2] = $722; //@line 9052
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 9057
         $910 = HEAP32[$909 >> 2] | 0; //@line 9058
         $911 = HEAP32[5818] | 0; //@line 9059
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 9065
          HEAP32[$909 >> 2] = $722; //@line 9066
          HEAP32[$722 + 8 >> 2] = $910; //@line 9068
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 9070
          HEAP32[$722 + 24 >> 2] = 0; //@line 9072
          break;
         } else {
          _abort(); //@line 9075
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 9082
      STACKTOP = sp; //@line 9083
      return $$0 | 0; //@line 9083
     } else {
      $$0$i$i$i = 23704; //@line 9085
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 9089
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 9094
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 9102
    }
    $927 = $923 + -47 | 0; //@line 9104
    $929 = $927 + 8 | 0; //@line 9106
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 9112
    $936 = $636 + 16 | 0; //@line 9113
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 9115
    $939 = $938 + 8 | 0; //@line 9116
    $940 = $938 + 24 | 0; //@line 9117
    $941 = $$723947$i + -40 | 0; //@line 9118
    $943 = $$748$i + 8 | 0; //@line 9120
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 9125
    $949 = $$748$i + $948 | 0; //@line 9126
    $950 = $941 - $948 | 0; //@line 9127
    HEAP32[5820] = $949; //@line 9128
    HEAP32[5817] = $950; //@line 9129
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 9132
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 9135
    HEAP32[5821] = HEAP32[5936]; //@line 9137
    $956 = $938 + 4 | 0; //@line 9138
    HEAP32[$956 >> 2] = 27; //@line 9139
    HEAP32[$939 >> 2] = HEAP32[5926]; //@line 9140
    HEAP32[$939 + 4 >> 2] = HEAP32[5927]; //@line 9140
    HEAP32[$939 + 8 >> 2] = HEAP32[5928]; //@line 9140
    HEAP32[$939 + 12 >> 2] = HEAP32[5929]; //@line 9140
    HEAP32[5926] = $$748$i; //@line 9141
    HEAP32[5927] = $$723947$i; //@line 9142
    HEAP32[5929] = 0; //@line 9143
    HEAP32[5928] = $939; //@line 9144
    $958 = $940; //@line 9145
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 9147
     HEAP32[$958 >> 2] = 7; //@line 9148
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 9161
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 9164
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 9167
     HEAP32[$938 >> 2] = $964; //@line 9168
     $969 = $964 >>> 3; //@line 9169
     if ($964 >>> 0 < 256) {
      $972 = 23296 + ($969 << 1 << 2) | 0; //@line 9173
      $973 = HEAP32[5814] | 0; //@line 9174
      $974 = 1 << $969; //@line 9175
      if (!($973 & $974)) {
       HEAP32[5814] = $973 | $974; //@line 9180
       $$0211$i$i = $972; //@line 9182
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 9182
      } else {
       $978 = $972 + 8 | 0; //@line 9184
       $979 = HEAP32[$978 >> 2] | 0; //@line 9185
       if ((HEAP32[5818] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 9189
       } else {
        $$0211$i$i = $979; //@line 9192
        $$pre$phi$i$iZ2D = $978; //@line 9192
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 9195
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 9197
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 9199
      HEAP32[$636 + 12 >> 2] = $972; //@line 9201
      break;
     }
     $985 = $964 >>> 8; //@line 9204
     if (!$985) {
      $$0212$i$i = 0; //@line 9207
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 9211
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 9215
       $991 = $985 << $990; //@line 9216
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 9219
       $996 = $991 << $994; //@line 9221
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 9224
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 9229
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 9235
      }
     }
     $1010 = 23560 + ($$0212$i$i << 2) | 0; //@line 9238
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 9240
     HEAP32[$636 + 20 >> 2] = 0; //@line 9242
     HEAP32[$936 >> 2] = 0; //@line 9243
     $1013 = HEAP32[5815] | 0; //@line 9244
     $1014 = 1 << $$0212$i$i; //@line 9245
     if (!($1013 & $1014)) {
      HEAP32[5815] = $1013 | $1014; //@line 9250
      HEAP32[$1010 >> 2] = $636; //@line 9251
      HEAP32[$636 + 24 >> 2] = $1010; //@line 9253
      HEAP32[$636 + 12 >> 2] = $636; //@line 9255
      HEAP32[$636 + 8 >> 2] = $636; //@line 9257
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 9266
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 9266
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 9273
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 9277
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 9279
      if (!$1034) {
       label = 286; //@line 9282
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 9285
       $$0207$i$i = $1034; //@line 9285
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[5818] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 9292
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 9295
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 9297
       HEAP32[$636 + 12 >> 2] = $636; //@line 9299
       HEAP32[$636 + 8 >> 2] = $636; //@line 9301
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 9306
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 9307
      $1043 = HEAP32[5818] | 0; //@line 9308
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 9314
       HEAP32[$1041 >> 2] = $636; //@line 9315
       HEAP32[$636 + 8 >> 2] = $1042; //@line 9317
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 9319
       HEAP32[$636 + 24 >> 2] = 0; //@line 9321
       break;
      } else {
       _abort(); //@line 9324
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[5817] | 0; //@line 9331
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 9334
   HEAP32[5817] = $1054; //@line 9335
   $1055 = HEAP32[5820] | 0; //@line 9336
   $1056 = $1055 + $$0197 | 0; //@line 9337
   HEAP32[5820] = $1056; //@line 9338
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 9341
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 9344
   $$0 = $1055 + 8 | 0; //@line 9346
   STACKTOP = sp; //@line 9347
   return $$0 | 0; //@line 9347
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 9351
 $$0 = 0; //@line 9352
 STACKTOP = sp; //@line 9353
 return $$0 | 0; //@line 9353
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_319($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy24 = 0, $$pre20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $118 = 0, $12 = 0, $124 = 0, $130 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $159 = 0, $16 = 0, $170 = 0, $174 = 0, $178 = 0, $18 = 0, $183 = 0, $189 = 0, $190 = 0, $195 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $220 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $243 = 0, $245 = 0, $246 = 0, $251 = 0, $253 = 0, $254 = 0, $255 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $287 = 0, $288 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $340 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $351 = 0, $352 = 0, $354 = 0, $355 = 0, $356 = 0, $358 = 0, $359 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $368 = 0, $372 = 0, $373 = 0, $375 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $39 = 0, $4 = 0, $53 = 0, $6 = 0, $61 = 0, $64 = 0, $69 = 0, $73 = 0, $74 = 0, $8 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19160
 STACKTOP = STACKTOP + 16 | 0; //@line 19161
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19161
 $$byval_copy24 = sp + 8 | 0; //@line 19162
 $$byval_copy = sp; //@line 19163
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19165
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19167
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19169
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19171
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19173
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19175
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19177
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19179
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19181
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19183
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19185
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19187
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19189
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19191
 $29 = $4 + 944 | 0; //@line 19192
 $30 = HEAP8[$29 >> 0] | 0; //@line 19193
 $$pre20 = $4 + 968 | 0; //@line 19196
 if ($30 & 32) {
  $33 = HEAP32[$$pre20 >> 2] | 0; //@line 19198
  if ($33 & 64 | 0) {
   HEAP32[$$pre20 >> 2] = $33 & -66; //@line 19203
  }
  do {
   if (!($30 & 9)) {
    label = 9; //@line 19209
   } else {
    $39 = $4 + 288 | 0; //@line 19211
    if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($39) | 0) + 4 >> 2] | 0) != 2) {
     if ((HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] | 0) != 2) {
      label = 9; //@line 19223
      break;
     }
    }
    HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 19229
    __ZN14LoRaMacCommand20clear_command_bufferEv($4 + 4 | 0); //@line 19231
    $53 = HEAP8[$4 + 895 >> 0] | 0; //@line 19233
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($39) | 0) + 11 >> 0] = $53; //@line 19236
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($39) | 0) + 10 >> 0] = 0; //@line 19239
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($39) | 0) + 12 >> 2] = 0; //@line 19242
    $170 = $4 + 373 | 0; //@line 19244
   }
  } while (0);
  do {
   if ((label | 0) == 9) {
    $61 = $4 + 373 | 0; //@line 19249
    if (!(HEAP8[$61 >> 0] | 0)) {
     $64 = HEAP8[$29 >> 0] | 0; //@line 19253
     if (!($64 & 9)) {
      $170 = $61; //@line 19257
     } else {
      if ($64 & 8) {
       $69 = $4 + 264 | 0; //@line 19262
       if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($69) | 0) >> 2] | 0)) {
        $73 = $4 + 897 | 0; //@line 19267
        $74 = HEAP8[$73 >> 0] | 0; //@line 19268
        HEAP8[(__ZN11LoRaMacMlme16get_confirmationEv($69) | 0) + 14 >> 0] = $74; //@line 19271
        if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($69) | 0) + 4 >> 2] | 0)) {
         HEAP32[$4 + 956 >> 2] = 0; //@line 19278
         HEAP8[$4 + 380 >> 0] = 0; //@line 19280
         HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 19283
         $170 = $61; //@line 19284
         break;
        }
        if ((HEAPU8[$73 >> 0] | 0) >= (HEAPU8[$4 + 896 >> 0] | 0)) {
         HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 19294
         $170 = $61; //@line 19295
         break;
        }
        HEAP8[$29 >> 0] = HEAP8[$29 >> 0] & -33; //@line 19300
        $94 = HEAP32[$4 + 1328 >> 2] | 0; //@line 19302
        HEAP32[$2 >> 2] = 460; //@line 19303
        HEAP32[$2 + 4 >> 2] = 0; //@line 19305
        $ReallocAsyncCtx12 = _emscripten_realloc_async_context(68) | 0; //@line 19306
        HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 19307
        HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 19307
        $95 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($94, $4, $$byval_copy) | 0; //@line 19308
        if (___async) {
         HEAP32[$ReallocAsyncCtx12 >> 2] = 461; //@line 19311
         $96 = $ReallocAsyncCtx12 + 4 | 0; //@line 19312
         HEAP32[$96 >> 2] = $$pre20; //@line 19313
         $97 = $ReallocAsyncCtx12 + 8 | 0; //@line 19314
         HEAP32[$97 >> 2] = $4; //@line 19315
         $98 = $ReallocAsyncCtx12 + 12 | 0; //@line 19316
         HEAP32[$98 >> 2] = $29; //@line 19317
         $99 = $ReallocAsyncCtx12 + 16 | 0; //@line 19318
         HEAP32[$99 >> 2] = $6; //@line 19319
         $100 = $ReallocAsyncCtx12 + 20 | 0; //@line 19320
         HEAP32[$100 >> 2] = $8; //@line 19321
         $101 = $ReallocAsyncCtx12 + 24 | 0; //@line 19322
         HEAP32[$101 >> 2] = $10; //@line 19323
         $102 = $ReallocAsyncCtx12 + 28 | 0; //@line 19324
         HEAP32[$102 >> 2] = $12; //@line 19325
         $103 = $ReallocAsyncCtx12 + 32 | 0; //@line 19326
         HEAP32[$103 >> 2] = $14; //@line 19327
         $104 = $ReallocAsyncCtx12 + 36 | 0; //@line 19328
         HEAP32[$104 >> 2] = $16; //@line 19329
         $105 = $ReallocAsyncCtx12 + 40 | 0; //@line 19330
         HEAP32[$105 >> 2] = $18; //@line 19331
         $106 = $ReallocAsyncCtx12 + 44 | 0; //@line 19332
         HEAP32[$106 >> 2] = $20; //@line 19333
         $107 = $ReallocAsyncCtx12 + 48 | 0; //@line 19334
         HEAP32[$107 >> 2] = $22; //@line 19335
         $108 = $ReallocAsyncCtx12 + 52 | 0; //@line 19336
         HEAP32[$108 >> 2] = $24; //@line 19337
         $109 = $ReallocAsyncCtx12 + 56 | 0; //@line 19338
         HEAP32[$109 >> 2] = $26; //@line 19339
         $110 = $ReallocAsyncCtx12 + 60 | 0; //@line 19340
         HEAP32[$110 >> 2] = $2; //@line 19341
         $111 = $ReallocAsyncCtx12 + 64 | 0; //@line 19342
         HEAP32[$111 >> 2] = $61; //@line 19343
         sp = STACKTOP; //@line 19344
         STACKTOP = sp; //@line 19345
         return;
        }
        HEAP32[___async_retval >> 2] = $95; //@line 19348
        ___async_unwind = 0; //@line 19349
        HEAP32[$ReallocAsyncCtx12 >> 2] = 461; //@line 19350
        $96 = $ReallocAsyncCtx12 + 4 | 0; //@line 19351
        HEAP32[$96 >> 2] = $$pre20; //@line 19352
        $97 = $ReallocAsyncCtx12 + 8 | 0; //@line 19353
        HEAP32[$97 >> 2] = $4; //@line 19354
        $98 = $ReallocAsyncCtx12 + 12 | 0; //@line 19355
        HEAP32[$98 >> 2] = $29; //@line 19356
        $99 = $ReallocAsyncCtx12 + 16 | 0; //@line 19357
        HEAP32[$99 >> 2] = $6; //@line 19358
        $100 = $ReallocAsyncCtx12 + 20 | 0; //@line 19359
        HEAP32[$100 >> 2] = $8; //@line 19360
        $101 = $ReallocAsyncCtx12 + 24 | 0; //@line 19361
        HEAP32[$101 >> 2] = $10; //@line 19362
        $102 = $ReallocAsyncCtx12 + 28 | 0; //@line 19363
        HEAP32[$102 >> 2] = $12; //@line 19364
        $103 = $ReallocAsyncCtx12 + 32 | 0; //@line 19365
        HEAP32[$103 >> 2] = $14; //@line 19366
        $104 = $ReallocAsyncCtx12 + 36 | 0; //@line 19367
        HEAP32[$104 >> 2] = $16; //@line 19368
        $105 = $ReallocAsyncCtx12 + 40 | 0; //@line 19369
        HEAP32[$105 >> 2] = $18; //@line 19370
        $106 = $ReallocAsyncCtx12 + 44 | 0; //@line 19371
        HEAP32[$106 >> 2] = $20; //@line 19372
        $107 = $ReallocAsyncCtx12 + 48 | 0; //@line 19373
        HEAP32[$107 >> 2] = $22; //@line 19374
        $108 = $ReallocAsyncCtx12 + 52 | 0; //@line 19375
        HEAP32[$108 >> 2] = $24; //@line 19376
        $109 = $ReallocAsyncCtx12 + 56 | 0; //@line 19377
        HEAP32[$109 >> 2] = $26; //@line 19378
        $110 = $ReallocAsyncCtx12 + 60 | 0; //@line 19379
        HEAP32[$110 >> 2] = $2; //@line 19380
        $111 = $ReallocAsyncCtx12 + 64 | 0; //@line 19381
        HEAP32[$111 >> 2] = $61; //@line 19382
        sp = STACKTOP; //@line 19383
        STACKTOP = sp; //@line 19384
        return;
       }
      }
      $113 = $4 + 380 | 0; //@line 19387
      $118 = HEAP8[$29 >> 0] | 0; //@line 19392
      if (($118 & 2) == 0 ? (HEAPU8[$113 >> 0] | 0) < (HEAPU8[$4 + 1128 >> 0] | 0) : 0) {
       HEAP8[$29 >> 0] = $118 & -33; //@line 19398
       $137 = HEAP32[$4 + 1328 >> 2] | 0; //@line 19400
       HEAP32[$28 >> 2] = 460; //@line 19401
       HEAP32[$28 + 4 >> 2] = 0; //@line 19403
       $ReallocAsyncCtx11 = _emscripten_realloc_async_context(68) | 0; //@line 19404
       HEAP32[$$byval_copy24 >> 2] = HEAP32[$28 >> 2]; //@line 19405
       HEAP32[$$byval_copy24 + 4 >> 2] = HEAP32[$28 + 4 >> 2]; //@line 19405
       $138 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($137, $4, $$byval_copy24) | 0; //@line 19406
       if (___async) {
        HEAP32[$ReallocAsyncCtx11 >> 2] = 463; //@line 19409
        $139 = $ReallocAsyncCtx11 + 4 | 0; //@line 19410
        HEAP32[$139 >> 2] = $$pre20; //@line 19411
        $140 = $ReallocAsyncCtx11 + 8 | 0; //@line 19412
        HEAP32[$140 >> 2] = $4; //@line 19413
        $141 = $ReallocAsyncCtx11 + 12 | 0; //@line 19414
        HEAP32[$141 >> 2] = $29; //@line 19415
        $142 = $ReallocAsyncCtx11 + 16 | 0; //@line 19416
        HEAP32[$142 >> 2] = $6; //@line 19417
        $143 = $ReallocAsyncCtx11 + 20 | 0; //@line 19418
        HEAP32[$143 >> 2] = $8; //@line 19419
        $144 = $ReallocAsyncCtx11 + 24 | 0; //@line 19420
        HEAP32[$144 >> 2] = $10; //@line 19421
        $145 = $ReallocAsyncCtx11 + 28 | 0; //@line 19422
        HEAP32[$145 >> 2] = $12; //@line 19423
        $146 = $ReallocAsyncCtx11 + 32 | 0; //@line 19424
        HEAP32[$146 >> 2] = $14; //@line 19425
        $147 = $ReallocAsyncCtx11 + 36 | 0; //@line 19426
        HEAP32[$147 >> 2] = $16; //@line 19427
        $148 = $ReallocAsyncCtx11 + 40 | 0; //@line 19428
        HEAP32[$148 >> 2] = $18; //@line 19429
        $149 = $ReallocAsyncCtx11 + 44 | 0; //@line 19430
        HEAP32[$149 >> 2] = $20; //@line 19431
        $150 = $ReallocAsyncCtx11 + 48 | 0; //@line 19432
        HEAP32[$150 >> 2] = $22; //@line 19433
        $151 = $ReallocAsyncCtx11 + 52 | 0; //@line 19434
        HEAP32[$151 >> 2] = $24; //@line 19435
        $152 = $ReallocAsyncCtx11 + 56 | 0; //@line 19436
        HEAP32[$152 >> 2] = $26; //@line 19437
        $153 = $ReallocAsyncCtx11 + 60 | 0; //@line 19438
        HEAP32[$153 >> 2] = $61; //@line 19439
        $154 = $ReallocAsyncCtx11 + 64 | 0; //@line 19440
        HEAP32[$154 >> 2] = $28; //@line 19441
        sp = STACKTOP; //@line 19442
        STACKTOP = sp; //@line 19443
        return;
       }
       HEAP32[___async_retval >> 2] = $138; //@line 19446
       ___async_unwind = 0; //@line 19447
       HEAP32[$ReallocAsyncCtx11 >> 2] = 463; //@line 19448
       $139 = $ReallocAsyncCtx11 + 4 | 0; //@line 19449
       HEAP32[$139 >> 2] = $$pre20; //@line 19450
       $140 = $ReallocAsyncCtx11 + 8 | 0; //@line 19451
       HEAP32[$140 >> 2] = $4; //@line 19452
       $141 = $ReallocAsyncCtx11 + 12 | 0; //@line 19453
       HEAP32[$141 >> 2] = $29; //@line 19454
       $142 = $ReallocAsyncCtx11 + 16 | 0; //@line 19455
       HEAP32[$142 >> 2] = $6; //@line 19456
       $143 = $ReallocAsyncCtx11 + 20 | 0; //@line 19457
       HEAP32[$143 >> 2] = $8; //@line 19458
       $144 = $ReallocAsyncCtx11 + 24 | 0; //@line 19459
       HEAP32[$144 >> 2] = $10; //@line 19460
       $145 = $ReallocAsyncCtx11 + 28 | 0; //@line 19461
       HEAP32[$145 >> 2] = $12; //@line 19462
       $146 = $ReallocAsyncCtx11 + 32 | 0; //@line 19463
       HEAP32[$146 >> 2] = $14; //@line 19464
       $147 = $ReallocAsyncCtx11 + 36 | 0; //@line 19465
       HEAP32[$147 >> 2] = $16; //@line 19466
       $148 = $ReallocAsyncCtx11 + 40 | 0; //@line 19467
       HEAP32[$148 >> 2] = $18; //@line 19468
       $149 = $ReallocAsyncCtx11 + 44 | 0; //@line 19469
       HEAP32[$149 >> 2] = $20; //@line 19470
       $150 = $ReallocAsyncCtx11 + 48 | 0; //@line 19471
       HEAP32[$150 >> 2] = $22; //@line 19472
       $151 = $ReallocAsyncCtx11 + 52 | 0; //@line 19473
       HEAP32[$151 >> 2] = $24; //@line 19474
       $152 = $ReallocAsyncCtx11 + 56 | 0; //@line 19475
       HEAP32[$152 >> 2] = $26; //@line 19476
       $153 = $ReallocAsyncCtx11 + 60 | 0; //@line 19477
       HEAP32[$153 >> 2] = $61; //@line 19478
       $154 = $ReallocAsyncCtx11 + 64 | 0; //@line 19479
       HEAP32[$154 >> 2] = $28; //@line 19480
       sp = STACKTOP; //@line 19481
       STACKTOP = sp; //@line 19482
       return;
      }
      if (!($118 & 2)) {
       __ZN14LoRaMacCommand20clear_command_bufferEv($4 + 4 | 0); //@line 19488
       $124 = $4 + 964 | 0; //@line 19489
       HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + 1; //@line 19492
      }
      HEAP8[$113 >> 0] = 0; //@line 19494
      if (!(HEAP8[$4 + 370 >> 0] | 0)) {
       $130 = $4 + 956 | 0; //@line 19499
       HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 1; //@line 19502
      }
      HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 19506
      $170 = $61; //@line 19507
     }
    } else {
     $170 = $61; //@line 19510
    }
   }
  } while (0);
  do {
   if (HEAP8[$29 >> 0] & 2) {
    $159 = $4 + 288 | 0; //@line 19519
    if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($159) | 0) + 10 >> 0] | 0)) {
     if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
      break;
     }
    }
    HEAP8[$4 + 377 >> 0] = 0; //@line 19535
    HEAP8[$170 >> 0] = 0; //@line 19536
    if (!(HEAP8[$4 + 370 >> 0] | 0)) {
     $174 = $4 + 956 | 0; //@line 19541
     HEAP32[$174 >> 2] = (HEAP32[$174 >> 2] | 0) + 1; //@line 19544
    }
    $178 = HEAP8[$4 + 895 >> 0] | 0; //@line 19547
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($159) | 0) + 11 >> 0] = $178; //@line 19550
    HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 19553
   }
  } while (0);
  $183 = $4 + 377 | 0; //@line 19556
  if (HEAP8[$183 >> 0] | 0) {
   if (!(HEAP32[$$pre20 >> 2] & 16)) {
    HEAP8[$183 >> 0] = 0; //@line 19564
    $189 = $4 + 895 | 0; //@line 19565
    $190 = HEAP8[$189 >> 0] | 0; //@line 19566
    if (!(($190 & 255) < 9 ? ($190 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
     $220 = HEAP32[$4 >> 2] | 0; //@line 19573
     $223 = HEAP32[(HEAP32[$220 >> 2] | 0) + 16 >> 2] | 0; //@line 19576
     $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 19577
     FUNCTION_TABLE_vi[$223 & 1023]($220); //@line 19578
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 466; //@line 19581
      $224 = $ReallocAsyncCtx + 4 | 0; //@line 19582
      HEAP32[$224 >> 2] = $29; //@line 19583
      $225 = $ReallocAsyncCtx + 8 | 0; //@line 19584
      HEAP32[$225 >> 2] = $4; //@line 19585
      $226 = $ReallocAsyncCtx + 12 | 0; //@line 19586
      HEAP32[$226 >> 2] = $$pre20; //@line 19587
      $227 = $ReallocAsyncCtx + 16 | 0; //@line 19588
      HEAP32[$227 >> 2] = $6; //@line 19589
      $228 = $ReallocAsyncCtx + 20 | 0; //@line 19590
      HEAP32[$228 >> 2] = $8; //@line 19591
      $229 = $ReallocAsyncCtx + 24 | 0; //@line 19592
      HEAP32[$229 >> 2] = $10; //@line 19593
      $230 = $ReallocAsyncCtx + 28 | 0; //@line 19594
      HEAP32[$230 >> 2] = $12; //@line 19595
      $231 = $ReallocAsyncCtx + 32 | 0; //@line 19596
      HEAP32[$231 >> 2] = $14; //@line 19597
      $232 = $ReallocAsyncCtx + 36 | 0; //@line 19598
      HEAP32[$232 >> 2] = $16; //@line 19599
      $233 = $ReallocAsyncCtx + 40 | 0; //@line 19600
      HEAP32[$233 >> 2] = $18; //@line 19601
      $234 = $ReallocAsyncCtx + 44 | 0; //@line 19602
      HEAP32[$234 >> 2] = $20; //@line 19603
      $235 = $ReallocAsyncCtx + 48 | 0; //@line 19604
      HEAP32[$235 >> 2] = $22; //@line 19605
      $236 = $ReallocAsyncCtx + 52 | 0; //@line 19606
      HEAP32[$236 >> 2] = $24; //@line 19607
      $237 = $ReallocAsyncCtx + 56 | 0; //@line 19608
      HEAP32[$237 >> 2] = $26; //@line 19609
      $238 = $ReallocAsyncCtx + 60 | 0; //@line 19610
      HEAP32[$238 >> 2] = $170; //@line 19611
      $239 = $ReallocAsyncCtx + 64 | 0; //@line 19612
      HEAP32[$239 >> 2] = $189; //@line 19613
      sp = STACKTOP; //@line 19614
      STACKTOP = sp; //@line 19615
      return;
     }
     ___async_unwind = 0; //@line 19617
     HEAP32[$ReallocAsyncCtx >> 2] = 466; //@line 19618
     $224 = $ReallocAsyncCtx + 4 | 0; //@line 19619
     HEAP32[$224 >> 2] = $29; //@line 19620
     $225 = $ReallocAsyncCtx + 8 | 0; //@line 19621
     HEAP32[$225 >> 2] = $4; //@line 19622
     $226 = $ReallocAsyncCtx + 12 | 0; //@line 19623
     HEAP32[$226 >> 2] = $$pre20; //@line 19624
     $227 = $ReallocAsyncCtx + 16 | 0; //@line 19625
     HEAP32[$227 >> 2] = $6; //@line 19626
     $228 = $ReallocAsyncCtx + 20 | 0; //@line 19627
     HEAP32[$228 >> 2] = $8; //@line 19628
     $229 = $ReallocAsyncCtx + 24 | 0; //@line 19629
     HEAP32[$229 >> 2] = $10; //@line 19630
     $230 = $ReallocAsyncCtx + 28 | 0; //@line 19631
     HEAP32[$230 >> 2] = $12; //@line 19632
     $231 = $ReallocAsyncCtx + 32 | 0; //@line 19633
     HEAP32[$231 >> 2] = $14; //@line 19634
     $232 = $ReallocAsyncCtx + 36 | 0; //@line 19635
     HEAP32[$232 >> 2] = $16; //@line 19636
     $233 = $ReallocAsyncCtx + 40 | 0; //@line 19637
     HEAP32[$233 >> 2] = $18; //@line 19638
     $234 = $ReallocAsyncCtx + 44 | 0; //@line 19639
     HEAP32[$234 >> 2] = $20; //@line 19640
     $235 = $ReallocAsyncCtx + 48 | 0; //@line 19641
     HEAP32[$235 >> 2] = $22; //@line 19642
     $236 = $ReallocAsyncCtx + 52 | 0; //@line 19643
     HEAP32[$236 >> 2] = $24; //@line 19644
     $237 = $ReallocAsyncCtx + 56 | 0; //@line 19645
     HEAP32[$237 >> 2] = $26; //@line 19646
     $238 = $ReallocAsyncCtx + 60 | 0; //@line 19647
     HEAP32[$238 >> 2] = $170; //@line 19648
     $239 = $ReallocAsyncCtx + 64 | 0; //@line 19649
     HEAP32[$239 >> 2] = $189; //@line 19650
     sp = STACKTOP; //@line 19651
     STACKTOP = sp; //@line 19652
     return;
    }
    $195 = $190 + 1 << 24 >> 24; //@line 19654
    HEAP8[$189 >> 0] = $195; //@line 19655
    if ($195 & 1) {
     $199 = $4 + 1097 | 0; //@line 19660
     HEAP8[$199 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$199 >> 0] | 0) | 0; //@line 19663
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 19665
    $202 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 19666
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 465; //@line 19669
     $203 = $ReallocAsyncCtx9 + 4 | 0; //@line 19670
     HEAP32[$203 >> 2] = $29; //@line 19671
     $204 = $ReallocAsyncCtx9 + 8 | 0; //@line 19672
     HEAP32[$204 >> 2] = $4; //@line 19673
     $205 = $ReallocAsyncCtx9 + 12 | 0; //@line 19674
     HEAP32[$205 >> 2] = $$pre20; //@line 19675
     $206 = $ReallocAsyncCtx9 + 16 | 0; //@line 19676
     HEAP32[$206 >> 2] = $6; //@line 19677
     $207 = $ReallocAsyncCtx9 + 20 | 0; //@line 19678
     HEAP32[$207 >> 2] = $8; //@line 19679
     $208 = $ReallocAsyncCtx9 + 24 | 0; //@line 19680
     HEAP32[$208 >> 2] = $10; //@line 19681
     $209 = $ReallocAsyncCtx9 + 28 | 0; //@line 19682
     HEAP32[$209 >> 2] = $12; //@line 19683
     $210 = $ReallocAsyncCtx9 + 32 | 0; //@line 19684
     HEAP32[$210 >> 2] = $14; //@line 19685
     $211 = $ReallocAsyncCtx9 + 36 | 0; //@line 19686
     HEAP32[$211 >> 2] = $16; //@line 19687
     $212 = $ReallocAsyncCtx9 + 40 | 0; //@line 19688
     HEAP32[$212 >> 2] = $18; //@line 19689
     $213 = $ReallocAsyncCtx9 + 44 | 0; //@line 19690
     HEAP32[$213 >> 2] = $20; //@line 19691
     $214 = $ReallocAsyncCtx9 + 48 | 0; //@line 19692
     HEAP32[$214 >> 2] = $22; //@line 19693
     $215 = $ReallocAsyncCtx9 + 52 | 0; //@line 19694
     HEAP32[$215 >> 2] = $24; //@line 19695
     $216 = $ReallocAsyncCtx9 + 56 | 0; //@line 19696
     HEAP32[$216 >> 2] = $26; //@line 19697
     $217 = $ReallocAsyncCtx9 + 60 | 0; //@line 19698
     HEAP32[$217 >> 2] = $170; //@line 19699
     $218 = $ReallocAsyncCtx9 + 64 | 0; //@line 19700
     HEAP32[$218 >> 2] = $189; //@line 19701
     sp = STACKTOP; //@line 19702
     STACKTOP = sp; //@line 19703
     return;
    }
    HEAP32[___async_retval >> 2] = $202; //@line 19706
    ___async_unwind = 0; //@line 19707
    HEAP32[$ReallocAsyncCtx9 >> 2] = 465; //@line 19708
    $203 = $ReallocAsyncCtx9 + 4 | 0; //@line 19709
    HEAP32[$203 >> 2] = $29; //@line 19710
    $204 = $ReallocAsyncCtx9 + 8 | 0; //@line 19711
    HEAP32[$204 >> 2] = $4; //@line 19712
    $205 = $ReallocAsyncCtx9 + 12 | 0; //@line 19713
    HEAP32[$205 >> 2] = $$pre20; //@line 19714
    $206 = $ReallocAsyncCtx9 + 16 | 0; //@line 19715
    HEAP32[$206 >> 2] = $6; //@line 19716
    $207 = $ReallocAsyncCtx9 + 20 | 0; //@line 19717
    HEAP32[$207 >> 2] = $8; //@line 19718
    $208 = $ReallocAsyncCtx9 + 24 | 0; //@line 19719
    HEAP32[$208 >> 2] = $10; //@line 19720
    $209 = $ReallocAsyncCtx9 + 28 | 0; //@line 19721
    HEAP32[$209 >> 2] = $12; //@line 19722
    $210 = $ReallocAsyncCtx9 + 32 | 0; //@line 19723
    HEAP32[$210 >> 2] = $14; //@line 19724
    $211 = $ReallocAsyncCtx9 + 36 | 0; //@line 19725
    HEAP32[$211 >> 2] = $16; //@line 19726
    $212 = $ReallocAsyncCtx9 + 40 | 0; //@line 19727
    HEAP32[$212 >> 2] = $18; //@line 19728
    $213 = $ReallocAsyncCtx9 + 44 | 0; //@line 19729
    HEAP32[$213 >> 2] = $20; //@line 19730
    $214 = $ReallocAsyncCtx9 + 48 | 0; //@line 19731
    HEAP32[$214 >> 2] = $22; //@line 19732
    $215 = $ReallocAsyncCtx9 + 52 | 0; //@line 19733
    HEAP32[$215 >> 2] = $24; //@line 19734
    $216 = $ReallocAsyncCtx9 + 56 | 0; //@line 19735
    HEAP32[$216 >> 2] = $26; //@line 19736
    $217 = $ReallocAsyncCtx9 + 60 | 0; //@line 19737
    HEAP32[$217 >> 2] = $170; //@line 19738
    $218 = $ReallocAsyncCtx9 + 64 | 0; //@line 19739
    HEAP32[$218 >> 2] = $189; //@line 19740
    sp = STACKTOP; //@line 19741
    STACKTOP = sp; //@line 19742
    return;
   }
  }
 }
 $240 = HEAP32[$$pre20 >> 2] | 0; //@line 19746
 $243 = $240 & -3; //@line 19749
 if (!($240 & 2)) {
  $245 = $240; //@line 19751
 } else {
  HEAP32[$$pre20 >> 2] = $243; //@line 19753
  $245 = $243; //@line 19754
 }
 if ($245 | 0) {
  $330 = HEAP32[$24 >> 2] | 0; //@line 19758
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 19759
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($330, $26, 1e3); //@line 19760
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 19763
   $331 = $ReallocAsyncCtx8 + 4 | 0; //@line 19764
   HEAP32[$331 >> 2] = $29; //@line 19765
   $332 = $ReallocAsyncCtx8 + 8 | 0; //@line 19766
   HEAP32[$332 >> 2] = $4; //@line 19767
   $333 = $ReallocAsyncCtx8 + 12 | 0; //@line 19768
   HEAP32[$333 >> 2] = $14; //@line 19769
   $334 = $ReallocAsyncCtx8 + 16 | 0; //@line 19770
   HEAP32[$334 >> 2] = $16; //@line 19771
   $335 = $ReallocAsyncCtx8 + 20 | 0; //@line 19772
   HEAP32[$335 >> 2] = $18; //@line 19773
   $336 = $ReallocAsyncCtx8 + 24 | 0; //@line 19774
   HEAP32[$336 >> 2] = $20; //@line 19775
   $337 = $ReallocAsyncCtx8 + 28 | 0; //@line 19776
   HEAP32[$337 >> 2] = $22; //@line 19777
   sp = STACKTOP; //@line 19778
   STACKTOP = sp; //@line 19779
   return;
  }
  ___async_unwind = 0; //@line 19781
  HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 19782
  $331 = $ReallocAsyncCtx8 + 4 | 0; //@line 19783
  HEAP32[$331 >> 2] = $29; //@line 19784
  $332 = $ReallocAsyncCtx8 + 8 | 0; //@line 19785
  HEAP32[$332 >> 2] = $4; //@line 19786
  $333 = $ReallocAsyncCtx8 + 12 | 0; //@line 19787
  HEAP32[$333 >> 2] = $14; //@line 19788
  $334 = $ReallocAsyncCtx8 + 16 | 0; //@line 19789
  HEAP32[$334 >> 2] = $16; //@line 19790
  $335 = $ReallocAsyncCtx8 + 20 | 0; //@line 19791
  HEAP32[$335 >> 2] = $18; //@line 19792
  $336 = $ReallocAsyncCtx8 + 24 | 0; //@line 19793
  HEAP32[$336 >> 2] = $20; //@line 19794
  $337 = $ReallocAsyncCtx8 + 28 | 0; //@line 19795
  HEAP32[$337 >> 2] = $22; //@line 19796
  sp = STACKTOP; //@line 19797
  STACKTOP = sp; //@line 19798
  return;
 }
 $246 = HEAP8[$29 >> 0] | 0; //@line 19800
 if ($246 & 1) {
  HEAP8[$29 >> 0] = $246 & -2; //@line 19805
  $251 = HEAP32[$4 + 1324 >> 2] | 0; //@line 19807
  $253 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 19809
  $254 = $251 + 12 | 0; //@line 19810
  $255 = HEAP32[$254 >> 2] | 0; //@line 19811
  if (!$255) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 19814
   _mbed_assert_internal(15061, 15066, 1102); //@line 19815
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 19818
    $257 = $ReallocAsyncCtx18 + 4 | 0; //@line 19819
    HEAP32[$257 >> 2] = $29; //@line 19820
    $258 = $ReallocAsyncCtx18 + 8 | 0; //@line 19821
    HEAP32[$258 >> 2] = $4; //@line 19822
    $259 = $ReallocAsyncCtx18 + 12 | 0; //@line 19823
    HEAP32[$259 >> 2] = $6; //@line 19824
    $260 = $ReallocAsyncCtx18 + 16 | 0; //@line 19825
    HEAP32[$260 >> 2] = $8; //@line 19826
    $261 = $ReallocAsyncCtx18 + 20 | 0; //@line 19827
    HEAP32[$261 >> 2] = $10; //@line 19828
    $262 = $ReallocAsyncCtx18 + 24 | 0; //@line 19829
    HEAP32[$262 >> 2] = $12; //@line 19830
    $263 = $ReallocAsyncCtx18 + 28 | 0; //@line 19831
    HEAP32[$263 >> 2] = $14; //@line 19832
    $264 = $ReallocAsyncCtx18 + 32 | 0; //@line 19833
    HEAP32[$264 >> 2] = $16; //@line 19834
    $265 = $ReallocAsyncCtx18 + 36 | 0; //@line 19835
    HEAP32[$265 >> 2] = $18; //@line 19836
    $266 = $ReallocAsyncCtx18 + 40 | 0; //@line 19837
    HEAP32[$266 >> 2] = $20; //@line 19838
    $267 = $ReallocAsyncCtx18 + 44 | 0; //@line 19839
    HEAP32[$267 >> 2] = $22; //@line 19840
    $268 = $ReallocAsyncCtx18 + 48 | 0; //@line 19841
    HEAP32[$268 >> 2] = $251; //@line 19842
    $269 = $ReallocAsyncCtx18 + 52 | 0; //@line 19843
    HEAP32[$269 >> 2] = $253; //@line 19844
    $270 = $ReallocAsyncCtx18 + 56 | 0; //@line 19845
    HEAP32[$270 >> 2] = $254; //@line 19846
    sp = STACKTOP; //@line 19847
    STACKTOP = sp; //@line 19848
    return;
   }
   ___async_unwind = 0; //@line 19850
   HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 19851
   $257 = $ReallocAsyncCtx18 + 4 | 0; //@line 19852
   HEAP32[$257 >> 2] = $29; //@line 19853
   $258 = $ReallocAsyncCtx18 + 8 | 0; //@line 19854
   HEAP32[$258 >> 2] = $4; //@line 19855
   $259 = $ReallocAsyncCtx18 + 12 | 0; //@line 19856
   HEAP32[$259 >> 2] = $6; //@line 19857
   $260 = $ReallocAsyncCtx18 + 16 | 0; //@line 19858
   HEAP32[$260 >> 2] = $8; //@line 19859
   $261 = $ReallocAsyncCtx18 + 20 | 0; //@line 19860
   HEAP32[$261 >> 2] = $10; //@line 19861
   $262 = $ReallocAsyncCtx18 + 24 | 0; //@line 19862
   HEAP32[$262 >> 2] = $12; //@line 19863
   $263 = $ReallocAsyncCtx18 + 28 | 0; //@line 19864
   HEAP32[$263 >> 2] = $14; //@line 19865
   $264 = $ReallocAsyncCtx18 + 32 | 0; //@line 19866
   HEAP32[$264 >> 2] = $16; //@line 19867
   $265 = $ReallocAsyncCtx18 + 36 | 0; //@line 19868
   HEAP32[$265 >> 2] = $18; //@line 19869
   $266 = $ReallocAsyncCtx18 + 40 | 0; //@line 19870
   HEAP32[$266 >> 2] = $20; //@line 19871
   $267 = $ReallocAsyncCtx18 + 44 | 0; //@line 19872
   HEAP32[$267 >> 2] = $22; //@line 19873
   $268 = $ReallocAsyncCtx18 + 48 | 0; //@line 19874
   HEAP32[$268 >> 2] = $251; //@line 19875
   $269 = $ReallocAsyncCtx18 + 52 | 0; //@line 19876
   HEAP32[$269 >> 2] = $253; //@line 19877
   $270 = $ReallocAsyncCtx18 + 56 | 0; //@line 19878
   HEAP32[$270 >> 2] = $254; //@line 19879
   sp = STACKTOP; //@line 19880
   STACKTOP = sp; //@line 19881
   return;
  } else {
   $271 = HEAP32[$255 >> 2] | 0; //@line 19883
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 19884
   FUNCTION_TABLE_vii[$271 & 31]($251, $253); //@line 19885
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 19888
    $272 = $ReallocAsyncCtx2 + 4 | 0; //@line 19889
    HEAP32[$272 >> 2] = $29; //@line 19890
    $273 = $ReallocAsyncCtx2 + 8 | 0; //@line 19891
    HEAP32[$273 >> 2] = $4; //@line 19892
    $274 = $ReallocAsyncCtx2 + 12 | 0; //@line 19893
    HEAP32[$274 >> 2] = $6; //@line 19894
    $275 = $ReallocAsyncCtx2 + 16 | 0; //@line 19895
    HEAP32[$275 >> 2] = $8; //@line 19896
    $276 = $ReallocAsyncCtx2 + 20 | 0; //@line 19897
    HEAP32[$276 >> 2] = $10; //@line 19898
    $277 = $ReallocAsyncCtx2 + 24 | 0; //@line 19899
    HEAP32[$277 >> 2] = $12; //@line 19900
    $278 = $ReallocAsyncCtx2 + 28 | 0; //@line 19901
    HEAP32[$278 >> 2] = $14; //@line 19902
    $279 = $ReallocAsyncCtx2 + 32 | 0; //@line 19903
    HEAP32[$279 >> 2] = $16; //@line 19904
    $280 = $ReallocAsyncCtx2 + 36 | 0; //@line 19905
    HEAP32[$280 >> 2] = $18; //@line 19906
    $281 = $ReallocAsyncCtx2 + 40 | 0; //@line 19907
    HEAP32[$281 >> 2] = $20; //@line 19908
    $282 = $ReallocAsyncCtx2 + 44 | 0; //@line 19909
    HEAP32[$282 >> 2] = $22; //@line 19910
    sp = STACKTOP; //@line 19911
    STACKTOP = sp; //@line 19912
    return;
   }
   ___async_unwind = 0; //@line 19914
   HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 19915
   $272 = $ReallocAsyncCtx2 + 4 | 0; //@line 19916
   HEAP32[$272 >> 2] = $29; //@line 19917
   $273 = $ReallocAsyncCtx2 + 8 | 0; //@line 19918
   HEAP32[$273 >> 2] = $4; //@line 19919
   $274 = $ReallocAsyncCtx2 + 12 | 0; //@line 19920
   HEAP32[$274 >> 2] = $6; //@line 19921
   $275 = $ReallocAsyncCtx2 + 16 | 0; //@line 19922
   HEAP32[$275 >> 2] = $8; //@line 19923
   $276 = $ReallocAsyncCtx2 + 20 | 0; //@line 19924
   HEAP32[$276 >> 2] = $10; //@line 19925
   $277 = $ReallocAsyncCtx2 + 24 | 0; //@line 19926
   HEAP32[$277 >> 2] = $12; //@line 19927
   $278 = $ReallocAsyncCtx2 + 28 | 0; //@line 19928
   HEAP32[$278 >> 2] = $14; //@line 19929
   $279 = $ReallocAsyncCtx2 + 32 | 0; //@line 19930
   HEAP32[$279 >> 2] = $16; //@line 19931
   $280 = $ReallocAsyncCtx2 + 36 | 0; //@line 19932
   HEAP32[$280 >> 2] = $18; //@line 19933
   $281 = $ReallocAsyncCtx2 + 40 | 0; //@line 19934
   HEAP32[$281 >> 2] = $20; //@line 19935
   $282 = $ReallocAsyncCtx2 + 44 | 0; //@line 19936
   HEAP32[$282 >> 2] = $22; //@line 19937
   sp = STACKTOP; //@line 19938
   STACKTOP = sp; //@line 19939
   return;
  }
 }
 if ($246 & 8) {
  HEAP8[$29 >> 0] = $246 & -9; //@line 19946
  $287 = HEAP32[$4 + 1324 >> 2] | 0; //@line 19948
  $288 = $287 + 32 | 0; //@line 19949
  $290 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 19951
  $291 = $287 + 44 | 0; //@line 19952
  $292 = HEAP32[$291 >> 2] | 0; //@line 19953
  if (!$292) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 19956
   _mbed_assert_internal(15061, 15066, 1102); //@line 19957
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 19960
    $294 = $ReallocAsyncCtx17 + 4 | 0; //@line 19961
    HEAP32[$294 >> 2] = $29; //@line 19962
    $295 = $ReallocAsyncCtx17 + 8 | 0; //@line 19963
    HEAP32[$295 >> 2] = $4; //@line 19964
    $296 = $ReallocAsyncCtx17 + 12 | 0; //@line 19965
    HEAP32[$296 >> 2] = $288; //@line 19966
    $297 = $ReallocAsyncCtx17 + 16 | 0; //@line 19967
    HEAP32[$297 >> 2] = $290; //@line 19968
    $298 = $ReallocAsyncCtx17 + 20 | 0; //@line 19969
    HEAP32[$298 >> 2] = $6; //@line 19970
    $299 = $ReallocAsyncCtx17 + 24 | 0; //@line 19971
    HEAP32[$299 >> 2] = $8; //@line 19972
    $300 = $ReallocAsyncCtx17 + 28 | 0; //@line 19973
    HEAP32[$300 >> 2] = $10; //@line 19974
    $301 = $ReallocAsyncCtx17 + 32 | 0; //@line 19975
    HEAP32[$301 >> 2] = $12; //@line 19976
    $302 = $ReallocAsyncCtx17 + 36 | 0; //@line 19977
    HEAP32[$302 >> 2] = $14; //@line 19978
    $303 = $ReallocAsyncCtx17 + 40 | 0; //@line 19979
    HEAP32[$303 >> 2] = $16; //@line 19980
    $304 = $ReallocAsyncCtx17 + 44 | 0; //@line 19981
    HEAP32[$304 >> 2] = $18; //@line 19982
    $305 = $ReallocAsyncCtx17 + 48 | 0; //@line 19983
    HEAP32[$305 >> 2] = $20; //@line 19984
    $306 = $ReallocAsyncCtx17 + 52 | 0; //@line 19985
    HEAP32[$306 >> 2] = $22; //@line 19986
    $307 = $ReallocAsyncCtx17 + 56 | 0; //@line 19987
    HEAP32[$307 >> 2] = $291; //@line 19988
    sp = STACKTOP; //@line 19989
    STACKTOP = sp; //@line 19990
    return;
   }
   ___async_unwind = 0; //@line 19992
   HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 19993
   $294 = $ReallocAsyncCtx17 + 4 | 0; //@line 19994
   HEAP32[$294 >> 2] = $29; //@line 19995
   $295 = $ReallocAsyncCtx17 + 8 | 0; //@line 19996
   HEAP32[$295 >> 2] = $4; //@line 19997
   $296 = $ReallocAsyncCtx17 + 12 | 0; //@line 19998
   HEAP32[$296 >> 2] = $288; //@line 19999
   $297 = $ReallocAsyncCtx17 + 16 | 0; //@line 20000
   HEAP32[$297 >> 2] = $290; //@line 20001
   $298 = $ReallocAsyncCtx17 + 20 | 0; //@line 20002
   HEAP32[$298 >> 2] = $6; //@line 20003
   $299 = $ReallocAsyncCtx17 + 24 | 0; //@line 20004
   HEAP32[$299 >> 2] = $8; //@line 20005
   $300 = $ReallocAsyncCtx17 + 28 | 0; //@line 20006
   HEAP32[$300 >> 2] = $10; //@line 20007
   $301 = $ReallocAsyncCtx17 + 32 | 0; //@line 20008
   HEAP32[$301 >> 2] = $12; //@line 20009
   $302 = $ReallocAsyncCtx17 + 36 | 0; //@line 20010
   HEAP32[$302 >> 2] = $14; //@line 20011
   $303 = $ReallocAsyncCtx17 + 40 | 0; //@line 20012
   HEAP32[$303 >> 2] = $16; //@line 20013
   $304 = $ReallocAsyncCtx17 + 44 | 0; //@line 20014
   HEAP32[$304 >> 2] = $18; //@line 20015
   $305 = $ReallocAsyncCtx17 + 48 | 0; //@line 20016
   HEAP32[$305 >> 2] = $20; //@line 20017
   $306 = $ReallocAsyncCtx17 + 52 | 0; //@line 20018
   HEAP32[$306 >> 2] = $22; //@line 20019
   $307 = $ReallocAsyncCtx17 + 56 | 0; //@line 20020
   HEAP32[$307 >> 2] = $291; //@line 20021
   sp = STACKTOP; //@line 20022
   STACKTOP = sp; //@line 20023
   return;
  } else {
   $308 = HEAP32[$292 >> 2] | 0; //@line 20025
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 20026
   FUNCTION_TABLE_vii[$308 & 31]($288, $290); //@line 20027
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 20030
    $309 = $ReallocAsyncCtx3 + 4 | 0; //@line 20031
    HEAP32[$309 >> 2] = $4; //@line 20032
    $310 = $ReallocAsyncCtx3 + 8 | 0; //@line 20033
    HEAP32[$310 >> 2] = $29; //@line 20034
    $311 = $ReallocAsyncCtx3 + 12 | 0; //@line 20035
    HEAP32[$311 >> 2] = $6; //@line 20036
    $312 = $ReallocAsyncCtx3 + 16 | 0; //@line 20037
    HEAP32[$312 >> 2] = $8; //@line 20038
    $313 = $ReallocAsyncCtx3 + 20 | 0; //@line 20039
    HEAP32[$313 >> 2] = $10; //@line 20040
    $314 = $ReallocAsyncCtx3 + 24 | 0; //@line 20041
    HEAP32[$314 >> 2] = $12; //@line 20042
    $315 = $ReallocAsyncCtx3 + 28 | 0; //@line 20043
    HEAP32[$315 >> 2] = $14; //@line 20044
    $316 = $ReallocAsyncCtx3 + 32 | 0; //@line 20045
    HEAP32[$316 >> 2] = $16; //@line 20046
    $317 = $ReallocAsyncCtx3 + 36 | 0; //@line 20047
    HEAP32[$317 >> 2] = $18; //@line 20048
    $318 = $ReallocAsyncCtx3 + 40 | 0; //@line 20049
    HEAP32[$318 >> 2] = $20; //@line 20050
    $319 = $ReallocAsyncCtx3 + 44 | 0; //@line 20051
    HEAP32[$319 >> 2] = $22; //@line 20052
    sp = STACKTOP; //@line 20053
    STACKTOP = sp; //@line 20054
    return;
   }
   ___async_unwind = 0; //@line 20056
   HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 20057
   $309 = $ReallocAsyncCtx3 + 4 | 0; //@line 20058
   HEAP32[$309 >> 2] = $4; //@line 20059
   $310 = $ReallocAsyncCtx3 + 8 | 0; //@line 20060
   HEAP32[$310 >> 2] = $29; //@line 20061
   $311 = $ReallocAsyncCtx3 + 12 | 0; //@line 20062
   HEAP32[$311 >> 2] = $6; //@line 20063
   $312 = $ReallocAsyncCtx3 + 16 | 0; //@line 20064
   HEAP32[$312 >> 2] = $8; //@line 20065
   $313 = $ReallocAsyncCtx3 + 20 | 0; //@line 20066
   HEAP32[$313 >> 2] = $10; //@line 20067
   $314 = $ReallocAsyncCtx3 + 24 | 0; //@line 20068
   HEAP32[$314 >> 2] = $12; //@line 20069
   $315 = $ReallocAsyncCtx3 + 28 | 0; //@line 20070
   HEAP32[$315 >> 2] = $14; //@line 20071
   $316 = $ReallocAsyncCtx3 + 32 | 0; //@line 20072
   HEAP32[$316 >> 2] = $16; //@line 20073
   $317 = $ReallocAsyncCtx3 + 36 | 0; //@line 20074
   HEAP32[$317 >> 2] = $18; //@line 20075
   $318 = $ReallocAsyncCtx3 + 40 | 0; //@line 20076
   HEAP32[$318 >> 2] = $20; //@line 20077
   $319 = $ReallocAsyncCtx3 + 44 | 0; //@line 20078
   HEAP32[$319 >> 2] = $22; //@line 20079
   sp = STACKTOP; //@line 20080
   STACKTOP = sp; //@line 20081
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(12967, $6) | 0; //@line 20087
  _printf(13114, $10) | 0; //@line 20088
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 20089
  _putchar(10) | 0; //@line 20090
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 20093
   $322 = $ReallocAsyncCtx7 + 4 | 0; //@line 20094
   HEAP32[$322 >> 2] = $4; //@line 20095
   $323 = $ReallocAsyncCtx7 + 8 | 0; //@line 20096
   HEAP32[$323 >> 2] = $29; //@line 20097
   $324 = $ReallocAsyncCtx7 + 12 | 0; //@line 20098
   HEAP32[$324 >> 2] = $14; //@line 20099
   $325 = $ReallocAsyncCtx7 + 16 | 0; //@line 20100
   HEAP32[$325 >> 2] = $16; //@line 20101
   $326 = $ReallocAsyncCtx7 + 20 | 0; //@line 20102
   HEAP32[$326 >> 2] = $18; //@line 20103
   $327 = $ReallocAsyncCtx7 + 24 | 0; //@line 20104
   HEAP32[$327 >> 2] = $20; //@line 20105
   $328 = $ReallocAsyncCtx7 + 28 | 0; //@line 20106
   HEAP32[$328 >> 2] = $22; //@line 20107
   sp = STACKTOP; //@line 20108
   STACKTOP = sp; //@line 20109
   return;
  }
  ___async_unwind = 0; //@line 20111
  HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 20112
  $322 = $ReallocAsyncCtx7 + 4 | 0; //@line 20113
  HEAP32[$322 >> 2] = $4; //@line 20114
  $323 = $ReallocAsyncCtx7 + 8 | 0; //@line 20115
  HEAP32[$323 >> 2] = $29; //@line 20116
  $324 = $ReallocAsyncCtx7 + 12 | 0; //@line 20117
  HEAP32[$324 >> 2] = $14; //@line 20118
  $325 = $ReallocAsyncCtx7 + 16 | 0; //@line 20119
  HEAP32[$325 >> 2] = $16; //@line 20120
  $326 = $ReallocAsyncCtx7 + 20 | 0; //@line 20121
  HEAP32[$326 >> 2] = $18; //@line 20122
  $327 = $ReallocAsyncCtx7 + 24 | 0; //@line 20123
  HEAP32[$327 >> 2] = $20; //@line 20124
  $328 = $ReallocAsyncCtx7 + 28 | 0; //@line 20125
  HEAP32[$328 >> 2] = $22; //@line 20126
  sp = STACKTOP; //@line 20127
  STACKTOP = sp; //@line 20128
  return;
 }
 $329 = HEAP8[$29 >> 0] & -33; //@line 20131
 HEAP8[$29 >> 0] = $329; //@line 20132
 do {
  if (!($329 & 2)) {
   $368 = $329; //@line 20137
  } else {
   $340 = $329 & -3; //@line 20139
   HEAP8[$29 >> 0] = $340; //@line 20140
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12967, $16) | 0; //@line 20145
    _printf(12994, $20) | 0; //@line 20146
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 20147
    _putchar(10) | 0; //@line 20148
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 20151
     $344 = $ReallocAsyncCtx6 + 4 | 0; //@line 20152
     HEAP32[$344 >> 2] = $29; //@line 20153
     $345 = $ReallocAsyncCtx6 + 8 | 0; //@line 20154
     HEAP32[$345 >> 2] = $14; //@line 20155
     $346 = $ReallocAsyncCtx6 + 12 | 0; //@line 20156
     HEAP32[$346 >> 2] = $4; //@line 20157
     $347 = $ReallocAsyncCtx6 + 16 | 0; //@line 20158
     HEAP32[$347 >> 2] = $14; //@line 20159
     sp = STACKTOP; //@line 20160
     STACKTOP = sp; //@line 20161
     return;
    }
    ___async_unwind = 0; //@line 20163
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 20164
    $344 = $ReallocAsyncCtx6 + 4 | 0; //@line 20165
    HEAP32[$344 >> 2] = $29; //@line 20166
    $345 = $ReallocAsyncCtx6 + 8 | 0; //@line 20167
    HEAP32[$345 >> 2] = $14; //@line 20168
    $346 = $ReallocAsyncCtx6 + 12 | 0; //@line 20169
    HEAP32[$346 >> 2] = $4; //@line 20170
    $347 = $ReallocAsyncCtx6 + 16 | 0; //@line 20171
    HEAP32[$347 >> 2] = $14; //@line 20172
    sp = STACKTOP; //@line 20173
    STACKTOP = sp; //@line 20174
    return;
   }
   if ($340 & 4) {
    $366 = $340 & -5; //@line 20179
    HEAP8[$29 >> 0] = $366; //@line 20180
    $368 = $366; //@line 20181
    break;
   }
   $351 = HEAP32[$4 + 1324 >> 2] | 0; //@line 20185
   $352 = $351 + 16 | 0; //@line 20186
   $354 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 20188
   $355 = $351 + 28 | 0; //@line 20189
   $356 = HEAP32[$355 >> 2] | 0; //@line 20190
   if (!$356) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 20193
    _mbed_assert_internal(15061, 15066, 1102); //@line 20194
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 20197
     $358 = $ReallocAsyncCtx15 + 4 | 0; //@line 20198
     HEAP32[$358 >> 2] = $355; //@line 20199
     $359 = $ReallocAsyncCtx15 + 8 | 0; //@line 20200
     HEAP32[$359 >> 2] = $352; //@line 20201
     $360 = $ReallocAsyncCtx15 + 12 | 0; //@line 20202
     HEAP32[$360 >> 2] = $354; //@line 20203
     $361 = $ReallocAsyncCtx15 + 16 | 0; //@line 20204
     HEAP32[$361 >> 2] = $29; //@line 20205
     $362 = $ReallocAsyncCtx15 + 20 | 0; //@line 20206
     HEAP32[$362 >> 2] = $4; //@line 20207
     sp = STACKTOP; //@line 20208
     STACKTOP = sp; //@line 20209
     return;
    }
    ___async_unwind = 0; //@line 20211
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 20212
    $358 = $ReallocAsyncCtx15 + 4 | 0; //@line 20213
    HEAP32[$358 >> 2] = $355; //@line 20214
    $359 = $ReallocAsyncCtx15 + 8 | 0; //@line 20215
    HEAP32[$359 >> 2] = $352; //@line 20216
    $360 = $ReallocAsyncCtx15 + 12 | 0; //@line 20217
    HEAP32[$360 >> 2] = $354; //@line 20218
    $361 = $ReallocAsyncCtx15 + 16 | 0; //@line 20219
    HEAP32[$361 >> 2] = $29; //@line 20220
    $362 = $ReallocAsyncCtx15 + 20 | 0; //@line 20221
    HEAP32[$362 >> 2] = $4; //@line 20222
    sp = STACKTOP; //@line 20223
    STACKTOP = sp; //@line 20224
    return;
   } else {
    $363 = HEAP32[$356 >> 2] | 0; //@line 20226
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 20227
    FUNCTION_TABLE_vii[$363 & 31]($352, $354); //@line 20228
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 20231
     $364 = $ReallocAsyncCtx4 + 4 | 0; //@line 20232
     HEAP32[$364 >> 2] = $29; //@line 20233
     $365 = $ReallocAsyncCtx4 + 8 | 0; //@line 20234
     HEAP32[$365 >> 2] = $4; //@line 20235
     sp = STACKTOP; //@line 20236
     STACKTOP = sp; //@line 20237
     return;
    }
    ___async_unwind = 0; //@line 20239
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 20240
    $364 = $ReallocAsyncCtx4 + 4 | 0; //@line 20241
    HEAP32[$364 >> 2] = $29; //@line 20242
    $365 = $ReallocAsyncCtx4 + 8 | 0; //@line 20243
    HEAP32[$365 >> 2] = $4; //@line 20244
    sp = STACKTOP; //@line 20245
    STACKTOP = sp; //@line 20246
    return;
   }
  }
 } while (0);
 if (!($368 & 16)) {
  STACKTOP = sp; //@line 20253
  return;
 }
 HEAP8[$29 >> 0] = $368 & -17; //@line 20256
 $372 = HEAP32[$4 + 1324 >> 2] | 0; //@line 20258
 $373 = $372 + 48 | 0; //@line 20259
 $375 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 20261
 $376 = $372 + 60 | 0; //@line 20262
 $377 = HEAP32[$376 >> 2] | 0; //@line 20263
 if (!$377) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 20266
  _mbed_assert_internal(15061, 15066, 1102); //@line 20267
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 20270
   $379 = $ReallocAsyncCtx14 + 4 | 0; //@line 20271
   HEAP32[$379 >> 2] = $376; //@line 20272
   $380 = $ReallocAsyncCtx14 + 8 | 0; //@line 20273
   HEAP32[$380 >> 2] = $373; //@line 20274
   $381 = $ReallocAsyncCtx14 + 12 | 0; //@line 20275
   HEAP32[$381 >> 2] = $375; //@line 20276
   sp = STACKTOP; //@line 20277
   STACKTOP = sp; //@line 20278
   return;
  }
  ___async_unwind = 0; //@line 20280
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 20281
  $379 = $ReallocAsyncCtx14 + 4 | 0; //@line 20282
  HEAP32[$379 >> 2] = $376; //@line 20283
  $380 = $ReallocAsyncCtx14 + 8 | 0; //@line 20284
  HEAP32[$380 >> 2] = $373; //@line 20285
  $381 = $ReallocAsyncCtx14 + 12 | 0; //@line 20286
  HEAP32[$381 >> 2] = $375; //@line 20287
  sp = STACKTOP; //@line 20288
  STACKTOP = sp; //@line 20289
  return;
 } else {
  $382 = HEAP32[$377 >> 2] | 0; //@line 20291
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 20292
  FUNCTION_TABLE_vii[$382 & 31]($373, $375); //@line 20293
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 20296
   sp = STACKTOP; //@line 20297
   STACKTOP = sp; //@line 20298
   return;
  }
  ___async_unwind = 0; //@line 20300
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 20301
  sp = STACKTOP; //@line 20302
  STACKTOP = sp; //@line 20303
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0174 = 0, $$0174209 = 0, $$0174210 = 0, $$1$off0 = 0, $$1169 = 0, $$1171 = 0, $$1173 = 0, $$1175 = 0, $$3$off0204 = 0, $$3179 = 0, $$sink = 0, $$sink200 = 0, $$sink207 = 0, $110 = 0, $111 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $131 = 0, $132 = 0, $215 = 0, $225 = 0, $229 = 0, $236 = 0, $239 = 0, $258 = 0, $27 = 0, $28 = 0, $285 = 0, $29 = 0, $303 = 0, $305 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $339 = 0, $340 = 0, $341 = 0, $343 = 0, $37 = 0, $385 = 0, $425 = 0, $429 = 0, $431 = 0, $451 = 0, $454 = 0, $455 = 0, $465 = 0, $467 = 0, $468 = 0, $472 = 0, $473 = 0, $488 = 0, $490 = 0, $491 = 0, $492 = 0, $496 = 0, $5 = 0, $500 = 0, $505 = 0, $506 = 0, $508 = 0, $509 = 0, $537 = 0, $540 = 0, $541 = 0, $543 = 0, $544 = 0, $57 = 0, $584 = 0, $589 = 0, $590 = 0, $602 = 0, $603 = 0, $605 = 0, $606 = 0, $634 = 0, $640 = 0, $643 = 0, $654 = 0, $660 = 0, $666 = 0, $677 = 0, $686 = 0, $689 = 0, $82 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx102 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $AsyncCtx32 = 0, $AsyncCtx36 = 0, $AsyncCtx40 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx50 = 0, $AsyncCtx53 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $AsyncCtx68 = 0, $AsyncCtx72 = 0, $AsyncCtx76 = 0, $AsyncCtx79 = 0, $AsyncCtx83 = 0, $AsyncCtx87 = 0, $AsyncCtx91 = 0, $AsyncCtx95 = 0, $AsyncCtx99 = 0, $sext = 0, $trunc = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12019
 STACKTOP = STACKTOP + 80 | 0; //@line 12020
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 12020
 $vararg_buffer16 = sp + 64 | 0; //@line 12021
 $vararg_buffer14 = sp + 56 | 0; //@line 12022
 $vararg_buffer12 = sp + 48 | 0; //@line 12023
 $vararg_buffer10 = sp + 40 | 0; //@line 12024
 $vararg_buffer8 = sp + 32 | 0; //@line 12025
 $vararg_buffer6 = sp + 24 | 0; //@line 12026
 $vararg_buffer1 = sp + 8 | 0; //@line 12027
 $vararg_buffer = sp; //@line 12028
 _printf(12967, $vararg_buffer) | 0; //@line 12029
 $5 = $2 & 65535; //@line 12030
 HEAP32[$vararg_buffer1 >> 2] = $1; //@line 12033
 HEAP32[$vararg_buffer1 + 4 >> 2] = $5; //@line 12035
 HEAP32[$vararg_buffer1 + 8 >> 2] = $3 << 16 >> 16; //@line 12037
 HEAP32[$vararg_buffer1 + 12 >> 2] = $4 << 24 >> 24; //@line 12039
 _printf(13059, $vararg_buffer1) | 0; //@line 12040
 $AsyncCtx32 = _emscripten_alloc_async_context(76, sp) | 0; //@line 12041
 _putchar(10) | 0; //@line 12042
 if (___async) {
  HEAP32[$AsyncCtx32 >> 2] = 386; //@line 12045
  HEAP32[$AsyncCtx32 + 4 >> 2] = $0; //@line 12047
  HEAP32[$AsyncCtx32 + 8 >> 2] = $vararg_buffer1; //@line 12049
  HEAP32[$AsyncCtx32 + 12 >> 2] = $5; //@line 12051
  HEAP32[$AsyncCtx32 + 16 >> 2] = $1; //@line 12053
  HEAP32[$AsyncCtx32 + 20 >> 2] = $vararg_buffer; //@line 12055
  HEAP32[$AsyncCtx32 + 24 >> 2] = $vararg_buffer14; //@line 12057
  HEAP32[$AsyncCtx32 + 28 >> 2] = $vararg_buffer14; //@line 12059
  HEAP32[$AsyncCtx32 + 32 >> 2] = $vararg_buffer16; //@line 12061
  HEAP32[$AsyncCtx32 + 36 >> 2] = $vararg_buffer16; //@line 12063
  HEAP8[$AsyncCtx32 + 40 >> 0] = $4; //@line 12065
  HEAP16[$AsyncCtx32 + 42 >> 1] = $3; //@line 12067
  HEAP32[$AsyncCtx32 + 44 >> 2] = $vararg_buffer6; //@line 12069
  HEAP32[$AsyncCtx32 + 48 >> 2] = $vararg_buffer6; //@line 12071
  HEAP32[$AsyncCtx32 + 52 >> 2] = $vararg_buffer8; //@line 12073
  HEAP32[$AsyncCtx32 + 56 >> 2] = $vararg_buffer8; //@line 12075
  HEAP32[$AsyncCtx32 + 60 >> 2] = $vararg_buffer10; //@line 12077
  HEAP32[$AsyncCtx32 + 64 >> 2] = $vararg_buffer10; //@line 12079
  HEAP32[$AsyncCtx32 + 68 >> 2] = $vararg_buffer12; //@line 12081
  HEAP32[$AsyncCtx32 + 72 >> 2] = $vararg_buffer12; //@line 12083
  sp = STACKTOP; //@line 12084
  STACKTOP = sp; //@line 12085
  return;
 }
 _emscripten_free_async_context($AsyncCtx32 | 0); //@line 12087
 HEAP32[$vararg_buffer >> 2] = 0; //@line 12088
 $27 = $0 + 912 | 0; //@line 12089
 $28 = $0 + 928 | 0; //@line 12090
 $29 = $0 + 288 | 0; //@line 12091
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 10 >> 0] = 0; //@line 12094
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 20 >> 1] = $3; //@line 12097
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 22 >> 0] = $4; //@line 12100
 $37 = HEAP32[$0 + 364 >> 2] | 0; //@line 12102
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 24 >> 2] = $37; //@line 12105
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 9 >> 0] = 0; //@line 12108
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 8 >> 0] = 0; //@line 12111
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 11 >> 0] = 0; //@line 12114
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 12 >> 2] = 0; //@line 12117
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 16 >> 1] = 0; //@line 12120
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 18 >> 0] = 0; //@line 12123
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 28 >> 0] = 0; //@line 12126
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 32 >> 2] = 0; //@line 12129
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) >> 2] = 0; //@line 12131
 $57 = HEAP32[$0 >> 2] | 0; //@line 12132
 $AsyncCtx79 = _emscripten_alloc_async_context(100, sp) | 0; //@line 12133
 __ZN7LoRaPHY18put_radio_to_sleepEv($57); //@line 12134
 if (___async) {
  HEAP32[$AsyncCtx79 >> 2] = 387; //@line 12137
  HEAP32[$AsyncCtx79 + 4 >> 2] = $29; //@line 12139
  HEAP32[$AsyncCtx79 + 8 >> 2] = $0; //@line 12141
  HEAP32[$AsyncCtx79 + 12 >> 2] = $vararg_buffer; //@line 12143
  HEAP32[$AsyncCtx79 + 16 >> 2] = $vararg_buffer1; //@line 12145
  HEAP32[$AsyncCtx79 + 20 >> 2] = $vararg_buffer1; //@line 12147
  HEAP32[$AsyncCtx79 + 24 >> 2] = $5; //@line 12149
  HEAP32[$AsyncCtx79 + 28 >> 2] = $0; //@line 12151
  HEAP32[$AsyncCtx79 + 32 >> 2] = $1; //@line 12153
  HEAP32[$AsyncCtx79 + 36 >> 2] = $vararg_buffer16; //@line 12155
  HEAP32[$AsyncCtx79 + 40 >> 2] = $vararg_buffer16; //@line 12157
  HEAP32[$AsyncCtx79 + 44 >> 2] = $vararg_buffer8; //@line 12159
  HEAP32[$AsyncCtx79 + 48 >> 2] = $vararg_buffer14; //@line 12161
  HEAP32[$AsyncCtx79 + 52 >> 2] = $vararg_buffer6; //@line 12163
  HEAP32[$AsyncCtx79 + 56 >> 2] = $vararg_buffer6; //@line 12165
  HEAP32[$AsyncCtx79 + 60 >> 2] = $vararg_buffer; //@line 12167
  HEAP32[$AsyncCtx79 + 64 >> 2] = $vararg_buffer12; //@line 12169
  HEAP32[$AsyncCtx79 + 68 >> 2] = $vararg_buffer12; //@line 12171
  HEAP8[$AsyncCtx79 + 72 >> 0] = $4; //@line 12173
  HEAP32[$AsyncCtx79 + 76 >> 2] = $vararg_buffer10; //@line 12175
  HEAP32[$AsyncCtx79 + 80 >> 2] = $vararg_buffer10; //@line 12177
  HEAP32[$AsyncCtx79 + 84 >> 2] = $vararg_buffer14; //@line 12179
  HEAP32[$AsyncCtx79 + 88 >> 2] = $vararg_buffer8; //@line 12181
  HEAP32[$AsyncCtx79 + 92 >> 2] = $27; //@line 12183
  HEAP32[$AsyncCtx79 + 96 >> 2] = $28; //@line 12185
  sp = STACKTOP; //@line 12186
  STACKTOP = sp; //@line 12187
  return;
 }
 _emscripten_free_async_context($AsyncCtx79 | 0); //@line 12189
 $82 = $0 + 356 | 0; //@line 12190
 $83 = HEAP32[$82 >> 2] | 0; //@line 12191
 $AsyncCtx102 = _emscripten_alloc_async_context(104, sp) | 0; //@line 12193
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($83, $0 + 1056 | 0); //@line 12194
 if (___async) {
  HEAP32[$AsyncCtx102 >> 2] = 388; //@line 12197
  HEAP32[$AsyncCtx102 + 4 >> 2] = $29; //@line 12199
  HEAP32[$AsyncCtx102 + 8 >> 2] = $0; //@line 12201
  HEAP32[$AsyncCtx102 + 12 >> 2] = $82; //@line 12203
  HEAP32[$AsyncCtx102 + 16 >> 2] = $vararg_buffer; //@line 12205
  HEAP32[$AsyncCtx102 + 20 >> 2] = $vararg_buffer1; //@line 12207
  HEAP32[$AsyncCtx102 + 24 >> 2] = $vararg_buffer1; //@line 12209
  HEAP32[$AsyncCtx102 + 28 >> 2] = $5; //@line 12211
  HEAP32[$AsyncCtx102 + 32 >> 2] = $0; //@line 12213
  HEAP32[$AsyncCtx102 + 36 >> 2] = $1; //@line 12215
  HEAP32[$AsyncCtx102 + 40 >> 2] = $vararg_buffer10; //@line 12217
  HEAP32[$AsyncCtx102 + 44 >> 2] = $vararg_buffer10; //@line 12219
  HEAP32[$AsyncCtx102 + 48 >> 2] = $vararg_buffer12; //@line 12221
  HEAP32[$AsyncCtx102 + 52 >> 2] = $vararg_buffer12; //@line 12223
  HEAP32[$AsyncCtx102 + 56 >> 2] = $vararg_buffer16; //@line 12225
  HEAP32[$AsyncCtx102 + 60 >> 2] = $vararg_buffer16; //@line 12227
  HEAP32[$AsyncCtx102 + 64 >> 2] = $vararg_buffer8; //@line 12229
  HEAP32[$AsyncCtx102 + 68 >> 2] = $vararg_buffer14; //@line 12231
  HEAP32[$AsyncCtx102 + 72 >> 2] = $vararg_buffer6; //@line 12233
  HEAP32[$AsyncCtx102 + 76 >> 2] = $vararg_buffer6; //@line 12235
  HEAP32[$AsyncCtx102 + 80 >> 2] = $vararg_buffer; //@line 12237
  HEAP8[$AsyncCtx102 + 84 >> 0] = $4; //@line 12239
  HEAP32[$AsyncCtx102 + 88 >> 2] = $vararg_buffer14; //@line 12241
  HEAP32[$AsyncCtx102 + 92 >> 2] = $vararg_buffer8; //@line 12243
  HEAP32[$AsyncCtx102 + 96 >> 2] = $27; //@line 12245
  HEAP32[$AsyncCtx102 + 100 >> 2] = $28; //@line 12247
  sp = STACKTOP; //@line 12248
  STACKTOP = sp; //@line 12249
  return;
 }
 _emscripten_free_async_context($AsyncCtx102 | 0); //@line 12251
 $110 = HEAP8[$1 >> 0] | 0; //@line 12252
 $trunc = ($110 & 255) >>> 5; //@line 12253
 L10 : do {
  switch ($trunc & 7) {
  case 1:
   {
    $111 = $0 + 372 | 0; //@line 12258
    if (HEAP8[$111 >> 0] | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 12264
     $AsyncCtx60 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12265
     __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12266
     if (___async) {
      HEAP32[$AsyncCtx60 >> 2] = 389; //@line 12269
      HEAP32[$AsyncCtx60 + 4 >> 2] = $vararg_buffer; //@line 12271
      HEAP32[$AsyncCtx60 + 8 >> 2] = $vararg_buffer1; //@line 12273
      sp = STACKTOP; //@line 12274
      STACKTOP = sp; //@line 12275
      return;
     }
     _emscripten_free_async_context($AsyncCtx60 | 0); //@line 12277
     STACKTOP = sp; //@line 12278
     return;
    }
    $121 = $0 + 908 | 0; //@line 12283
    $123 = $0 + 638 | 0; //@line 12285
    $124 = $0 + 639 | 0; //@line 12286
    if (__Z18decrypt_join_framePKhtS0_Ph($1 + 1 | 0, $5 + 65535 & 65535, HEAP32[$121 >> 2] | 0, $124) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 13; //@line 12292
     STACKTOP = sp; //@line 12293
     return;
    }
    HEAP8[$123 >> 0] = $110; //@line 12295
    $129 = $5 + -4 | 0; //@line 12296
    $131 = HEAP32[$121 >> 2] | 0; //@line 12298
    $AsyncCtx72 = _emscripten_alloc_async_context(64, sp) | 0; //@line 12299
    $132 = __Z22compute_join_frame_micPKhtS0_Pj($123, $129 & 65535, $131, $vararg_buffer) | 0; //@line 12300
    if (___async) {
     HEAP32[$AsyncCtx72 >> 2] = 390; //@line 12303
     HEAP32[$AsyncCtx72 + 4 >> 2] = $0; //@line 12305
     HEAP32[$AsyncCtx72 + 8 >> 2] = $129; //@line 12307
     HEAP32[$AsyncCtx72 + 12 >> 2] = $5; //@line 12309
     HEAP32[$AsyncCtx72 + 16 >> 2] = $vararg_buffer; //@line 12311
     HEAP32[$AsyncCtx72 + 20 >> 2] = $29; //@line 12313
     HEAP32[$AsyncCtx72 + 24 >> 2] = $vararg_buffer; //@line 12315
     HEAP32[$AsyncCtx72 + 28 >> 2] = $vararg_buffer1; //@line 12317
     HEAP32[$AsyncCtx72 + 32 >> 2] = $121; //@line 12319
     HEAP32[$AsyncCtx72 + 36 >> 2] = $124; //@line 12321
     HEAP32[$AsyncCtx72 + 40 >> 2] = $27; //@line 12323
     HEAP32[$AsyncCtx72 + 44 >> 2] = $28; //@line 12325
     HEAP32[$AsyncCtx72 + 48 >> 2] = $82; //@line 12327
     HEAP32[$AsyncCtx72 + 52 >> 2] = $vararg_buffer1; //@line 12329
     HEAP32[$AsyncCtx72 + 56 >> 2] = $0; //@line 12331
     HEAP32[$AsyncCtx72 + 60 >> 2] = $111; //@line 12333
     sp = STACKTOP; //@line 12334
     STACKTOP = sp; //@line 12335
     return;
    }
    _emscripten_free_async_context($AsyncCtx72 | 0); //@line 12337
    if ($132 | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 13; //@line 12342
     STACKTOP = sp; //@line 12343
     return;
    }
    if ((HEAPU8[$5 + -3 + ($0 + 638) >> 0] << 8 | HEAPU8[$0 + 638 + $129 >> 0] | HEAPU8[$5 + -2 + ($0 + 638) >> 0] << 16 | HEAPU8[$5 + -1 + ($0 + 638) >> 0] << 24 | 0) != (HEAP32[$vararg_buffer >> 2] | 0)) {
     HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 7; //@line 12372
     break L10;
    }
    if (__Z28compute_skeys_for_join_framePKhS0_tPhS1_(HEAP32[$121 >> 2] | 0, $124, HEAP16[$0 + 946 >> 1] | 0, $27, $28) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 13; //@line 12383
     STACKTOP = sp; //@line 12384
     return;
    }
    HEAP32[$0 + 948 >> 2] = HEAPU8[$0 + 644 >> 0] << 16 | (HEAPU8[$0 + 643 >> 0] << 8 | HEAPU8[$0 + 642 >> 0]); //@line 12400
    HEAP32[$0 + 952 >> 2] = HEAPU8[$0 + 648 >> 0] << 24 | (HEAPU8[$0 + 647 >> 0] << 16 | (HEAPU8[$0 + 646 >> 0] << 8 | HEAPU8[$0 + 645 >> 0])); //@line 12420
    $215 = HEAP8[$0 + 649 >> 0] | 0; //@line 12422
    HEAP8[$0 + 1129 >> 0] = ($215 & 255) >>> 4 & 7; //@line 12428
    HEAP8[$0 + 1136 >> 0] = $215 & 15; //@line 12431
    $225 = HEAP8[$0 + 650 >> 0] & 15; //@line 12434
    $229 = $225 << 24 >> 24 == 0 ? 1e3 : ($225 & 255) * 1e3 | 0; //@line 12439
    HEAP32[$0 + 1112 >> 2] = $229; //@line 12440
    HEAP32[$0 + 1116 >> 2] = $229 + 1e3; //@line 12443
    HEAP32[$vararg_buffer1 >> 2] = $0 + 651; //@line 12445
    HEAP8[$vararg_buffer1 + 4 >> 0] = $5 + 239; //@line 12449
    $236 = HEAP32[$0 >> 2] | 0; //@line 12450
    $239 = HEAP32[(HEAP32[$236 >> 2] | 0) + 20 >> 2] | 0; //@line 12453
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 12454
    FUNCTION_TABLE_vii[$239 & 31]($236, $vararg_buffer1); //@line 12455
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 391; //@line 12458
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12460
     HEAP32[$AsyncCtx + 8 >> 2] = $111; //@line 12462
     HEAP32[$AsyncCtx + 12 >> 2] = $82; //@line 12464
     HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 12466
     HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer1; //@line 12468
     sp = STACKTOP; //@line 12469
     STACKTOP = sp; //@line 12470
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 12472
     HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 0; //@line 12476
     HEAP8[$111 >> 0] = 1; //@line 12477
     break L10;
    }
    break;
   }
  case 3:
  case 5:
   {
    $258 = __ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 10 >> 0] | 0, (HEAP8[$0 + 369 >> 0] | 0) != 0) | 0; //@line 12490
    $sext = ($5 << 16) + -851968 | 0; //@line 12492
    if (((($sext | 0) < 0 ? 0 : $sext >> 16) | 0) > ($258 & 255 | 0)) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 12501
     $AsyncCtx56 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12502
     __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12503
     if (___async) {
      HEAP32[$AsyncCtx56 >> 2] = 392; //@line 12506
      HEAP32[$AsyncCtx56 + 4 >> 2] = $vararg_buffer; //@line 12508
      HEAP32[$AsyncCtx56 + 8 >> 2] = $vararg_buffer1; //@line 12510
      sp = STACKTOP; //@line 12511
      STACKTOP = sp; //@line 12512
      return;
     }
     _emscripten_free_async_context($AsyncCtx56 | 0); //@line 12514
     STACKTOP = sp; //@line 12515
     return;
    }
    $285 = HEAPU8[$1 + 2 >> 0] << 8 | HEAPU8[$1 + 1 >> 0] | HEAPU8[$1 + 3 >> 0] << 16 | HEAPU8[$1 + 4 >> 0] << 24; //@line 12534
    L52 : do {
     if (($285 | 0) == (HEAP32[$0 + 952 >> 2] | 0)) {
      $$1169 = 0; //@line 12541
      $$1171 = $28; //@line 12541
      $$1173 = $27; //@line 12541
      $$1175 = 0; //@line 12541
      $$sink207 = $0 + 960 | 0; //@line 12541
     } else {
      $$0174209 = HEAP32[$0 + 1208 >> 2] | 0; //@line 12544
      L55 : do {
       if ($$0174209 | 0) {
        $$0174210 = $$0174209; //@line 12548
        while (1) {
         if (($285 | 0) == (HEAP32[$$0174210 >> 2] | 0)) {
          break;
         }
         $$0174 = HEAP32[$$0174210 + 40 >> 2] | 0; //@line 12556
         if (!$$0174) {
          break L55;
         } else {
          $$0174210 = $$0174; //@line 12561
         }
        }
        $$1169 = 1; //@line 12567
        $$1171 = $$0174210 + 20 | 0; //@line 12567
        $$1173 = $$0174210 + 4 | 0; //@line 12567
        $$1175 = $$0174210; //@line 12567
        $$sink207 = $$0174210 + 36 | 0; //@line 12567
        break L52;
       }
      } while (0);
      HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 11; //@line 12573
      $AsyncCtx53 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12574
      __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12575
      if (___async) {
       HEAP32[$AsyncCtx53 >> 2] = 393; //@line 12578
       HEAP32[$AsyncCtx53 + 4 >> 2] = $vararg_buffer; //@line 12580
       HEAP32[$AsyncCtx53 + 8 >> 2] = $vararg_buffer1; //@line 12582
       sp = STACKTOP; //@line 12583
       STACKTOP = sp; //@line 12584
       return;
      }
      _emscripten_free_async_context($AsyncCtx53 | 0); //@line 12586
      STACKTOP = sp; //@line 12587
      return;
     }
    } while (0);
    $303 = HEAP32[$$sink207 >> 2] | 0; //@line 12590
    $305 = HEAP8[$1 + 5 >> 0] | 0; //@line 12592
    $314 = $305 & 15; //@line 12601
    $315 = $314 & 255; //@line 12602
    $316 = $315 + 8 | 0; //@line 12603
    $317 = $316 & 255; //@line 12604
    $318 = $5 + -4 | 0; //@line 12605
    $339 = HEAPU8[$1 + ($5 + -3) >> 0] << 8 | HEAPU8[$1 + $318 >> 0] | HEAPU8[$1 + ($5 + -2) >> 0] << 16 | HEAPU8[$1 + ($5 + -1) >> 0] << 24; //@line 12626
    $340 = (HEAPU8[$1 + 7 >> 0] << 8 | HEAPU8[$1 + 6 >> 0]) - $303 | 0; //@line 12627
    $341 = $340 & 65535; //@line 12628
    do {
     if ($341 >>> 0 < 32768) {
      $343 = $341 + $303 | 0; //@line 12632
      $AsyncCtx68 = _emscripten_alloc_async_context(148, sp) | 0; //@line 12634
      __Z11compute_micPKhtS0_jhjPj($1, $318 & 65535, $$1173, $285, 1, $343, $vararg_buffer) | 0; //@line 12635
      if (___async) {
       HEAP32[$AsyncCtx68 >> 2] = 394; //@line 12638
       HEAP32[$AsyncCtx68 + 4 >> 2] = $vararg_buffer16; //@line 12640
       HEAP8[$AsyncCtx68 + 8 >> 0] = $305; //@line 12642
       HEAP32[$AsyncCtx68 + 12 >> 2] = $343; //@line 12644
       HEAP32[$AsyncCtx68 + 16 >> 2] = $vararg_buffer16; //@line 12646
       HEAP32[$AsyncCtx68 + 20 >> 2] = $$1175; //@line 12648
       HEAP32[$AsyncCtx68 + 24 >> 2] = $vararg_buffer8; //@line 12650
       HEAP8[$AsyncCtx68 + 28 >> 0] = $317; //@line 12652
       HEAP32[$AsyncCtx68 + 32 >> 2] = $29; //@line 12654
       HEAP32[$AsyncCtx68 + 36 >> 2] = $vararg_buffer14; //@line 12656
       HEAP32[$AsyncCtx68 + 40 >> 2] = $316; //@line 12658
       HEAP32[$AsyncCtx68 + 44 >> 2] = $0; //@line 12660
       HEAP32[$AsyncCtx68 + 48 >> 2] = $285; //@line 12662
       HEAP32[$AsyncCtx68 + 52 >> 2] = $vararg_buffer6; //@line 12664
       HEAP32[$AsyncCtx68 + 56 >> 2] = $341; //@line 12666
       HEAP32[$AsyncCtx68 + 60 >> 2] = $82; //@line 12668
       HEAP32[$AsyncCtx68 + 64 >> 2] = $vararg_buffer6; //@line 12670
       HEAP32[$AsyncCtx68 + 68 >> 2] = $vararg_buffer; //@line 12672
       HEAP32[$AsyncCtx68 + 72 >> 2] = $vararg_buffer12; //@line 12674
       HEAP32[$AsyncCtx68 + 76 >> 2] = $vararg_buffer12; //@line 12676
       HEAP8[$AsyncCtx68 + 80 >> 0] = $$1169; //@line 12678
       HEAP32[$AsyncCtx68 + 84 >> 2] = $$1173; //@line 12680
       HEAP32[$AsyncCtx68 + 88 >> 2] = $$1171; //@line 12682
       HEAP32[$AsyncCtx68 + 92 >> 2] = $318; //@line 12684
       HEAP32[$AsyncCtx68 + 96 >> 2] = $339; //@line 12686
       HEAP8[$AsyncCtx68 + 100 >> 0] = $4; //@line 12688
       HEAP32[$AsyncCtx68 + 104 >> 2] = $vararg_buffer10; //@line 12690
       HEAP32[$AsyncCtx68 + 108 >> 2] = $1; //@line 12692
       HEAP32[$AsyncCtx68 + 112 >> 2] = $0; //@line 12694
       HEAP32[$AsyncCtx68 + 116 >> 2] = $vararg_buffer1; //@line 12696
       HEAP32[$AsyncCtx68 + 120 >> 2] = $vararg_buffer10; //@line 12698
       HEAP32[$AsyncCtx68 + 124 >> 2] = $315; //@line 12700
       HEAP32[$AsyncCtx68 + 128 >> 2] = $vararg_buffer14; //@line 12702
       HEAP8[$AsyncCtx68 + 132 >> 0] = $314; //@line 12704
       HEAP32[$AsyncCtx68 + 136 >> 2] = $vararg_buffer8; //@line 12706
       HEAP32[$AsyncCtx68 + 140 >> 2] = $vararg_buffer; //@line 12708
       HEAP8[$AsyncCtx68 + 144 >> 0] = $trunc; //@line 12710
       sp = STACKTOP; //@line 12711
       STACKTOP = sp; //@line 12712
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx68 | 0); //@line 12714
       $$3179 = $343; //@line 12717
       $$sink200 = ($339 | 0) == (HEAP32[$vararg_buffer >> 2] | 0); //@line 12717
       break;
      }
     } else {
      $385 = $303 + 65536 + ($340 << 16 >> 16) | 0; //@line 12724
      $AsyncCtx64 = _emscripten_alloc_async_context(152, sp) | 0; //@line 12726
      __Z11compute_micPKhtS0_jhjPj($1, $318 & 65535, $$1173, $285, 1, $385, $vararg_buffer) | 0; //@line 12727
      if (___async) {
       HEAP32[$AsyncCtx64 >> 2] = 395; //@line 12730
       HEAP32[$AsyncCtx64 + 4 >> 2] = $vararg_buffer16; //@line 12732
       HEAP8[$AsyncCtx64 + 8 >> 0] = $305; //@line 12734
       HEAP32[$AsyncCtx64 + 12 >> 2] = $vararg_buffer16; //@line 12736
       HEAP32[$AsyncCtx64 + 16 >> 2] = $$1175; //@line 12738
       HEAP32[$AsyncCtx64 + 20 >> 2] = $vararg_buffer8; //@line 12740
       HEAP32[$AsyncCtx64 + 24 >> 2] = $385; //@line 12742
       HEAP8[$AsyncCtx64 + 28 >> 0] = $317; //@line 12744
       HEAP32[$AsyncCtx64 + 32 >> 2] = $29; //@line 12746
       HEAP32[$AsyncCtx64 + 36 >> 2] = $vararg_buffer14; //@line 12748
       HEAP32[$AsyncCtx64 + 40 >> 2] = $316; //@line 12750
       HEAP32[$AsyncCtx64 + 44 >> 2] = $0; //@line 12752
       HEAP32[$AsyncCtx64 + 48 >> 2] = $285; //@line 12754
       HEAP32[$AsyncCtx64 + 52 >> 2] = $vararg_buffer6; //@line 12756
       HEAP32[$AsyncCtx64 + 56 >> 2] = $341; //@line 12758
       HEAP32[$AsyncCtx64 + 60 >> 2] = $82; //@line 12760
       HEAP32[$AsyncCtx64 + 64 >> 2] = $vararg_buffer6; //@line 12762
       HEAP32[$AsyncCtx64 + 68 >> 2] = $vararg_buffer12; //@line 12764
       HEAP32[$AsyncCtx64 + 72 >> 2] = $vararg_buffer; //@line 12766
       HEAP32[$AsyncCtx64 + 76 >> 2] = $vararg_buffer12; //@line 12768
       HEAP8[$AsyncCtx64 + 80 >> 0] = $$1169; //@line 12770
       HEAP32[$AsyncCtx64 + 84 >> 2] = $$1173; //@line 12772
       HEAP32[$AsyncCtx64 + 88 >> 2] = $$1171; //@line 12774
       HEAP32[$AsyncCtx64 + 92 >> 2] = $318; //@line 12776
       HEAP32[$AsyncCtx64 + 96 >> 2] = $339; //@line 12778
       HEAP8[$AsyncCtx64 + 100 >> 0] = $4; //@line 12780
       HEAP32[$AsyncCtx64 + 104 >> 2] = $vararg_buffer10; //@line 12782
       HEAP32[$AsyncCtx64 + 108 >> 2] = $1; //@line 12784
       HEAP32[$AsyncCtx64 + 112 >> 2] = $0; //@line 12786
       HEAP32[$AsyncCtx64 + 116 >> 2] = $vararg_buffer1; //@line 12788
       HEAP32[$AsyncCtx64 + 120 >> 2] = $303; //@line 12790
       HEAP32[$AsyncCtx64 + 124 >> 2] = $vararg_buffer10; //@line 12792
       HEAP32[$AsyncCtx64 + 128 >> 2] = $315; //@line 12794
       HEAP32[$AsyncCtx64 + 132 >> 2] = $vararg_buffer14; //@line 12796
       HEAP8[$AsyncCtx64 + 136 >> 0] = $314; //@line 12798
       HEAP32[$AsyncCtx64 + 140 >> 2] = $vararg_buffer8; //@line 12800
       HEAP32[$AsyncCtx64 + 144 >> 2] = $vararg_buffer; //@line 12802
       HEAP8[$AsyncCtx64 + 148 >> 0] = $trunc; //@line 12804
       sp = STACKTOP; //@line 12805
       STACKTOP = sp; //@line 12806
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx64 | 0); //@line 12808
       $425 = ($339 | 0) == (HEAP32[$vararg_buffer >> 2] | 0); //@line 12810
       $$3179 = $425 ? $385 : $303; //@line 12812
       $$sink200 = $425; //@line 12812
       break;
      }
     }
    } while (0);
    $429 = $341 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv(HEAP32[$0 >> 2] | 0) | 0) & 65535) >>> 0; //@line 12820
    $431 = (__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 | 0; //@line 12822
    if (!$429) {
     HEAP32[$431 >> 2] = 10; //@line 12824
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 32 >> 2] = $$3179; //@line 12827
     $AsyncCtx50 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12828
     __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12829
     if (___async) {
      HEAP32[$AsyncCtx50 >> 2] = 396; //@line 12832
      HEAP32[$AsyncCtx50 + 4 >> 2] = $vararg_buffer; //@line 12834
      HEAP32[$AsyncCtx50 + 8 >> 2] = $vararg_buffer1; //@line 12836
      sp = STACKTOP; //@line 12837
      STACKTOP = sp; //@line 12838
      return;
     }
     _emscripten_free_async_context($AsyncCtx50 | 0); //@line 12840
     STACKTOP = sp; //@line 12841
     return;
    }
    if (!$$sink200) {
     HEAP32[$431 >> 2] = 12; //@line 12844
     $AsyncCtx40 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12845
     __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12846
     if (___async) {
      HEAP32[$AsyncCtx40 >> 2] = 407; //@line 12849
      HEAP32[$AsyncCtx40 + 4 >> 2] = $vararg_buffer; //@line 12851
      HEAP32[$AsyncCtx40 + 8 >> 2] = $vararg_buffer1; //@line 12853
      sp = STACKTOP; //@line 12854
      STACKTOP = sp; //@line 12855
      return;
     }
     _emscripten_free_async_context($AsyncCtx40 | 0); //@line 12857
     STACKTOP = sp; //@line 12858
     return;
    }
    HEAP32[$431 >> 2] = 0; //@line 12860
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 8 >> 0] = $$1169; //@line 12863
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 11 >> 0] = ($305 & 255) >>> 4 & 1; //@line 12868
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 12 >> 2] = 0; //@line 12871
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 16 >> 1] = 0; //@line 12874
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 32 >> 2] = $$3179; //@line 12877
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 4 >> 2] = 0; //@line 12880
    HEAP32[$0 + 964 >> 2] = 0; //@line 12882
    $451 = $0 + 4 | 0; //@line 12883
    __ZN14LoRaMacCommand19clear_repeat_bufferEv($451); //@line 12884
    do {
     if ($$1169 << 24 >> 24 == 1) {
      HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) >> 2] = 2; //@line 12889
      $454 = $$1175 + 36 | 0; //@line 12890
      $455 = HEAP32[$454 >> 2] | 0; //@line 12891
      if (($455 | 0) != ($$3179 | 0) | ($455 | 0) == 0) {
       $$1$off0 = 0; //@line 12896
       $$sink = $454; //@line 12896
      } else {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 8; //@line 12900
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 32 >> 2] = $$3179; //@line 12903
       $AsyncCtx47 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12904
       __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12905
       if (___async) {
        HEAP32[$AsyncCtx47 >> 2] = 397; //@line 12908
        HEAP32[$AsyncCtx47 + 4 >> 2] = $vararg_buffer; //@line 12910
        HEAP32[$AsyncCtx47 + 8 >> 2] = $vararg_buffer1; //@line 12912
        sp = STACKTOP; //@line 12913
        STACKTOP = sp; //@line 12914
        return;
       }
       _emscripten_free_async_context($AsyncCtx47 | 0); //@line 12916
       STACKTOP = sp; //@line 12917
       return;
      }
     } else {
      $465 = $0 + 374 | 0; //@line 12921
      if ($trunc << 24 >> 24 == 5) {
       HEAP8[$465 >> 0] = 1; //@line 12923
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) >> 2] = 1; //@line 12925
       $467 = $0 + 960 | 0; //@line 12926
       $468 = HEAP32[$467 >> 2] | 0; //@line 12927
       $$1$off0 = ($468 | 0) != 0 & ($468 | 0) == ($$3179 | 0); //@line 12931
       $$sink = $467; //@line 12931
       break;
      }
      HEAP8[$465 >> 0] = 0; //@line 12934
      HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) >> 2] = 0; //@line 12936
      $472 = $0 + 960 | 0; //@line 12937
      $473 = HEAP32[$472 >> 2] | 0; //@line 12938
      if (($473 | 0) != ($$3179 | 0) | ($473 | 0) == 0) {
       $$1$off0 = 0; //@line 12943
       $$sink = $472; //@line 12943
      } else {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 8; //@line 12947
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 32 >> 2] = $$3179; //@line 12950
       $AsyncCtx44 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12951
       __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12952
       if (___async) {
        HEAP32[$AsyncCtx44 >> 2] = 398; //@line 12955
        HEAP32[$AsyncCtx44 + 4 >> 2] = $vararg_buffer; //@line 12957
        HEAP32[$AsyncCtx44 + 8 >> 2] = $vararg_buffer1; //@line 12959
        sp = STACKTOP; //@line 12960
        STACKTOP = sp; //@line 12961
        return;
       }
       _emscripten_free_async_context($AsyncCtx44 | 0); //@line 12963
       STACKTOP = sp; //@line 12964
       return;
      }
     }
    } while (0);
    HEAP32[$$sink >> 2] = $$3179; //@line 12968
    if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) >> 2] | 0) == 1) {
     if ($305 & 32) {
      __ZN14LoRaMacCommand20clear_command_bufferEv($451); //@line 12976
     }
    } else {
     __ZN14LoRaMacCommand20clear_command_bufferEv($451); //@line 12979
    }
    do {
     if (($318 | 0) > ($316 | 0)) {
      $488 = $315 + 9 | 0; //@line 12984
      $490 = HEAP8[$1 + $316 >> 0] | 0; //@line 12986
      $491 = $318 - $488 | 0; //@line 12987
      $492 = $491 & 255; //@line 12988
      HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 9 >> 0] = $490; //@line 12991
      $496 = $314 << 24 >> 24 == 0; //@line 12993
      if (!($490 << 24 >> 24)) {
       if (!$496) {
        $$3$off0204 = 6; //@line 12996
        break;
       }
       $500 = $0 + 638 | 0; //@line 13002
       if (__Z15decrypt_payloadPKhtS0_jhjPh($1 + $488 | 0, $491 & 255, $$1173, $285, 1, $$3179, $500) | 0) {
        HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 13; //@line 13008
       }
       $505 = $0 + 264 | 0; //@line 13010
       $506 = __ZN11LoRaMacMlme16get_confirmationEv($505) | 0; //@line 13011
       $508 = HEAP32[$0 >> 2] | 0; //@line 13013
       $AsyncCtx91 = _emscripten_alloc_async_context(56, sp) | 0; //@line 13014
       $509 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($451, $500, 0, $492, $4, $506, $0 + 1096 | 0, $508) | 0; //@line 13015
       if (___async) {
        HEAP32[$AsyncCtx91 >> 2] = 399; //@line 13018
        HEAP32[$AsyncCtx91 + 4 >> 2] = $29; //@line 13020
        HEAP8[$AsyncCtx91 + 8 >> 0] = $$1$off0 & 1; //@line 13023
        HEAP32[$AsyncCtx91 + 12 >> 2] = $505; //@line 13025
        HEAP32[$AsyncCtx91 + 16 >> 2] = $0; //@line 13027
        HEAP32[$AsyncCtx91 + 20 >> 2] = $451; //@line 13029
        HEAP8[$AsyncCtx91 + 24 >> 0] = $305; //@line 13031
        HEAP32[$AsyncCtx91 + 28 >> 2] = $82; //@line 13033
        HEAP32[$AsyncCtx91 + 32 >> 2] = $vararg_buffer; //@line 13035
        HEAP32[$AsyncCtx91 + 36 >> 2] = $vararg_buffer1; //@line 13037
        HEAP32[$AsyncCtx91 + 40 >> 2] = $vararg_buffer6; //@line 13039
        HEAP32[$AsyncCtx91 + 44 >> 2] = $vararg_buffer6; //@line 13041
        HEAP32[$AsyncCtx91 + 48 >> 2] = $vararg_buffer8; //@line 13043
        HEAP32[$AsyncCtx91 + 52 >> 2] = $vararg_buffer8; //@line 13045
        sp = STACKTOP; //@line 13046
        STACKTOP = sp; //@line 13047
        return;
       }
       _emscripten_free_async_context($AsyncCtx91 | 0); //@line 13049
       if ($509 | 0) {
        HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 13054
        if ($$1$off0) {
         $$3$off0204 = 6; //@line 13056
         break;
        } else {
         label = 101; //@line 13059
         break;
        }
       }
       if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($451) | 0)) {
        label = 100; //@line 13065
        break;
       }
       _printf(12967, $vararg_buffer6) | 0; //@line 13068
       _printf(13114, $vararg_buffer8) | 0; //@line 13069
       $AsyncCtx28 = _emscripten_alloc_async_context(36, sp) | 0; //@line 13070
       _putchar(10) | 0; //@line 13071
       if (___async) {
        HEAP32[$AsyncCtx28 >> 2] = 400; //@line 13074
        HEAP32[$AsyncCtx28 + 4 >> 2] = $505; //@line 13076
        HEAP32[$AsyncCtx28 + 8 >> 2] = $0; //@line 13078
        HEAP32[$AsyncCtx28 + 12 >> 2] = $451; //@line 13080
        HEAP8[$AsyncCtx28 + 16 >> 0] = $$1$off0 & 1; //@line 13083
        HEAP8[$AsyncCtx28 + 17 >> 0] = $305; //@line 13085
        HEAP32[$AsyncCtx28 + 20 >> 2] = $29; //@line 13087
        HEAP32[$AsyncCtx28 + 24 >> 2] = $82; //@line 13089
        HEAP32[$AsyncCtx28 + 28 >> 2] = $vararg_buffer; //@line 13091
        HEAP32[$AsyncCtx28 + 32 >> 2] = $vararg_buffer1; //@line 13093
        sp = STACKTOP; //@line 13094
        STACKTOP = sp; //@line 13095
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx28 | 0); //@line 13097
        HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($505) | 0) >> 2] = 4; //@line 13099
        $537 = $0 + 944 | 0; //@line 13100
        HEAP8[$537 >> 0] = HEAP8[$537 >> 0] | 16; //@line 13103
        __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($451); //@line 13104
        if ($$1$off0) {
         $$3$off0204 = 6; //@line 13106
         break;
        } else {
         label = 101; //@line 13109
         break;
        }
       }
      }
      do {
       if (!$496) {
        $540 = $0 + 264 | 0; //@line 13116
        $541 = __ZN11LoRaMacMlme16get_confirmationEv($540) | 0; //@line 13117
        $543 = HEAP32[$0 >> 2] | 0; //@line 13119
        $AsyncCtx87 = _emscripten_alloc_async_context(80, sp) | 0; //@line 13120
        $544 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($451, $1, 8, $317, $4, $541, $0 + 1096 | 0, $543) | 0; //@line 13121
        if (___async) {
         HEAP32[$AsyncCtx87 >> 2] = 401; //@line 13124
         HEAP32[$AsyncCtx87 + 4 >> 2] = $451; //@line 13126
         HEAP32[$AsyncCtx87 + 8 >> 2] = $29; //@line 13128
         HEAP32[$AsyncCtx87 + 12 >> 2] = $1; //@line 13130
         HEAP32[$AsyncCtx87 + 16 >> 2] = $488; //@line 13132
         HEAP32[$AsyncCtx87 + 20 >> 2] = $491; //@line 13134
         HEAP32[$AsyncCtx87 + 24 >> 2] = $0; //@line 13136
         HEAP32[$AsyncCtx87 + 28 >> 2] = $$1171; //@line 13138
         HEAP32[$AsyncCtx87 + 32 >> 2] = $285; //@line 13140
         HEAP32[$AsyncCtx87 + 36 >> 2] = $$3179; //@line 13142
         HEAP32[$AsyncCtx87 + 40 >> 2] = $540; //@line 13144
         HEAP32[$AsyncCtx87 + 44 >> 2] = $vararg_buffer10; //@line 13146
         HEAP32[$AsyncCtx87 + 48 >> 2] = $vararg_buffer10; //@line 13148
         HEAP32[$AsyncCtx87 + 52 >> 2] = $vararg_buffer12; //@line 13150
         HEAP32[$AsyncCtx87 + 56 >> 2] = $vararg_buffer12; //@line 13152
         HEAP8[$AsyncCtx87 + 60 >> 0] = $$1$off0 & 1; //@line 13155
         HEAP32[$AsyncCtx87 + 64 >> 2] = $82; //@line 13157
         HEAP8[$AsyncCtx87 + 68 >> 0] = $305; //@line 13159
         HEAP32[$AsyncCtx87 + 72 >> 2] = $vararg_buffer; //@line 13161
         HEAP32[$AsyncCtx87 + 76 >> 2] = $vararg_buffer1; //@line 13163
         sp = STACKTOP; //@line 13164
         STACKTOP = sp; //@line 13165
         return;
        }
        _emscripten_free_async_context($AsyncCtx87 | 0); //@line 13167
        if ($544 | 0) {
         HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 13172
         break;
        }
        if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($451) | 0) {
         _printf(12967, $vararg_buffer10) | 0; //@line 13177
         _printf(13114, $vararg_buffer12) | 0; //@line 13178
         $AsyncCtx24 = _emscripten_alloc_async_context(64, sp) | 0; //@line 13179
         _putchar(10) | 0; //@line 13180
         if (___async) {
          HEAP32[$AsyncCtx24 >> 2] = 402; //@line 13183
          HEAP32[$AsyncCtx24 + 4 >> 2] = $540; //@line 13185
          HEAP32[$AsyncCtx24 + 8 >> 2] = $0; //@line 13187
          HEAP32[$AsyncCtx24 + 12 >> 2] = $451; //@line 13189
          HEAP32[$AsyncCtx24 + 16 >> 2] = $1; //@line 13191
          HEAP32[$AsyncCtx24 + 20 >> 2] = $488; //@line 13193
          HEAP32[$AsyncCtx24 + 24 >> 2] = $491; //@line 13195
          HEAP32[$AsyncCtx24 + 28 >> 2] = $$1171; //@line 13197
          HEAP32[$AsyncCtx24 + 32 >> 2] = $285; //@line 13199
          HEAP32[$AsyncCtx24 + 36 >> 2] = $$3179; //@line 13201
          HEAP8[$AsyncCtx24 + 40 >> 0] = $$1$off0 & 1; //@line 13204
          HEAP32[$AsyncCtx24 + 44 >> 2] = $29; //@line 13206
          HEAP32[$AsyncCtx24 + 48 >> 2] = $82; //@line 13208
          HEAP8[$AsyncCtx24 + 52 >> 0] = $305; //@line 13210
          HEAP32[$AsyncCtx24 + 56 >> 2] = $vararg_buffer; //@line 13212
          HEAP32[$AsyncCtx24 + 60 >> 2] = $vararg_buffer1; //@line 13214
          sp = STACKTOP; //@line 13215
          STACKTOP = sp; //@line 13216
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx24 | 0); //@line 13218
          HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($540) | 0) >> 2] = 4; //@line 13220
          $584 = $0 + 944 | 0; //@line 13221
          HEAP8[$584 >> 0] = HEAP8[$584 >> 0] | 16; //@line 13224
          __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($451); //@line 13225
          break;
         }
        }
       }
      } while (0);
      $589 = $491 & 255; //@line 13233
      $590 = $0 + 638 | 0; //@line 13234
      if (__Z15decrypt_payloadPKhtS0_jhjPh($1 + $488 | 0, $589, $$1171, $285, 1, $$3179, $590) | 0) {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 13; //@line 13240
      }
      if ($$1$off0) {
       $$3$off0204 = 6; //@line 13243
      } else {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 12 >> 2] = $590; //@line 13247
       HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 16 >> 1] = $589; //@line 13250
       HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 18 >> 0] = 1; //@line 13253
       label = 101; //@line 13254
      }
     } else {
      if (!($314 << 24 >> 24)) {
       label = 100; //@line 13259
      } else {
       $602 = $0 + 264 | 0; //@line 13261
       $603 = __ZN11LoRaMacMlme16get_confirmationEv($602) | 0; //@line 13262
       $605 = HEAP32[$0 >> 2] | 0; //@line 13264
       $AsyncCtx83 = _emscripten_alloc_async_context(52, sp) | 0; //@line 13265
       $606 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($451, $1, 8, $317, $4, $603, $0 + 1096 | 0, $605) | 0; //@line 13266
       if (___async) {
        HEAP32[$AsyncCtx83 >> 2] = 403; //@line 13269
        HEAP32[$AsyncCtx83 + 4 >> 2] = $602; //@line 13271
        HEAP32[$AsyncCtx83 + 8 >> 2] = $0; //@line 13273
        HEAP32[$AsyncCtx83 + 12 >> 2] = $451; //@line 13275
        HEAP8[$AsyncCtx83 + 16 >> 0] = $$1$off0 & 1; //@line 13278
        HEAP8[$AsyncCtx83 + 17 >> 0] = $305; //@line 13280
        HEAP32[$AsyncCtx83 + 20 >> 2] = $29; //@line 13282
        HEAP32[$AsyncCtx83 + 24 >> 2] = $82; //@line 13284
        HEAP32[$AsyncCtx83 + 28 >> 2] = $vararg_buffer; //@line 13286
        HEAP32[$AsyncCtx83 + 32 >> 2] = $vararg_buffer1; //@line 13288
        HEAP32[$AsyncCtx83 + 36 >> 2] = $vararg_buffer14; //@line 13290
        HEAP32[$AsyncCtx83 + 40 >> 2] = $vararg_buffer14; //@line 13292
        HEAP32[$AsyncCtx83 + 44 >> 2] = $vararg_buffer16; //@line 13294
        HEAP32[$AsyncCtx83 + 48 >> 2] = $vararg_buffer16; //@line 13296
        sp = STACKTOP; //@line 13297
        STACKTOP = sp; //@line 13298
        return;
       }
       _emscripten_free_async_context($AsyncCtx83 | 0); //@line 13300
       if ($606 | 0) {
        HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 13305
        if ($$1$off0) {
         $$3$off0204 = 6; //@line 13307
         break;
        } else {
         label = 101; //@line 13310
         break;
        }
       }
       if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($451) | 0) {
        _printf(12967, $vararg_buffer14) | 0; //@line 13316
        _printf(13114, $vararg_buffer16) | 0; //@line 13317
        $AsyncCtx20 = _emscripten_alloc_async_context(36, sp) | 0; //@line 13318
        _putchar(10) | 0; //@line 13319
        if (___async) {
         HEAP32[$AsyncCtx20 >> 2] = 404; //@line 13322
         HEAP32[$AsyncCtx20 + 4 >> 2] = $602; //@line 13324
         HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 13326
         HEAP32[$AsyncCtx20 + 12 >> 2] = $451; //@line 13328
         HEAP8[$AsyncCtx20 + 16 >> 0] = $$1$off0 & 1; //@line 13331
         HEAP8[$AsyncCtx20 + 17 >> 0] = $305; //@line 13333
         HEAP32[$AsyncCtx20 + 20 >> 2] = $29; //@line 13335
         HEAP32[$AsyncCtx20 + 24 >> 2] = $82; //@line 13337
         HEAP32[$AsyncCtx20 + 28 >> 2] = $vararg_buffer; //@line 13339
         HEAP32[$AsyncCtx20 + 32 >> 2] = $vararg_buffer1; //@line 13341
         sp = STACKTOP; //@line 13342
         STACKTOP = sp; //@line 13343
         return;
        } else {
         _emscripten_free_async_context($AsyncCtx20 | 0); //@line 13345
         HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($602) | 0) >> 2] = 4; //@line 13347
         $634 = $0 + 944 | 0; //@line 13348
         HEAP8[$634 >> 0] = HEAP8[$634 >> 0] | 16; //@line 13351
         __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($451); //@line 13352
         if ($$1$off0) {
          $$3$off0204 = 6; //@line 13354
          break;
         } else {
          label = 101; //@line 13357
          break;
         }
        }
       } else {
        label = 100; //@line 13362
       }
      }
     }
    } while (0);
    if ((label | 0) == 100) {
     if ($$1$off0) {
      $$3$off0204 = 6; //@line 13369
     } else {
      label = 101; //@line 13371
     }
    }
    do {
     if ((label | 0) == 101) {
      $640 = (__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 10 | 0; //@line 13379
      if ($305 & 32) {
       HEAP8[$640 >> 0] = 1; //@line 13381
       HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 28 >> 0] = 1; //@line 13384
       $643 = HEAP32[$82 >> 2] | 0; //@line 13385
       $AsyncCtx99 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13387
       __ZN18LoRaWANTimeHandler4stopER13timer_event_t($643, $0 + 1076 | 0); //@line 13388
       if (___async) {
        HEAP32[$AsyncCtx99 >> 2] = 405; //@line 13391
        HEAP32[$AsyncCtx99 + 4 >> 2] = $0; //@line 13393
        HEAP32[$AsyncCtx99 + 8 >> 2] = $82; //@line 13395
        HEAP32[$AsyncCtx99 + 12 >> 2] = $vararg_buffer; //@line 13397
        HEAP32[$AsyncCtx99 + 16 >> 2] = $vararg_buffer1; //@line 13399
        sp = STACKTOP; //@line 13400
        STACKTOP = sp; //@line 13401
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx99 | 0); //@line 13403
        $$3$off0204 = 2; //@line 13404
        break;
       }
      }
      HEAP8[$640 >> 0] = 0; //@line 13408
      if ((HEAPU8[$0 + 895 >> 0] | 0) > (HEAPU8[$0 + 894 >> 0] | 0)) {
       $654 = HEAP32[$82 >> 2] | 0; //@line 13415
       $AsyncCtx95 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13417
       __ZN18LoRaWANTimeHandler4stopER13timer_event_t($654, $0 + 1076 | 0); //@line 13418
       if (___async) {
        HEAP32[$AsyncCtx95 >> 2] = 406; //@line 13421
        HEAP32[$AsyncCtx95 + 4 >> 2] = $0; //@line 13423
        HEAP32[$AsyncCtx95 + 8 >> 2] = $82; //@line 13425
        HEAP32[$AsyncCtx95 + 12 >> 2] = $vararg_buffer; //@line 13427
        HEAP32[$AsyncCtx95 + 16 >> 2] = $vararg_buffer1; //@line 13429
        sp = STACKTOP; //@line 13430
        STACKTOP = sp; //@line 13431
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx95 | 0); //@line 13433
        $$3$off0204 = 2; //@line 13434
        break;
       }
      } else {
       $$3$off0204 = 2; //@line 13438
      }
     }
    } while (0);
    $660 = $0 + 944 | 0; //@line 13442
    HEAP8[$660 >> 0] = $$3$off0204 | HEAP8[$660 >> 0] & -7; //@line 13446
    break;
   }
  case 7:
   {
    $666 = $0 + 638 | 0; //@line 13450
    _memcpy($666 | 0, $1 + 1 | 0, $5 | 0) | 0; //@line 13452
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) >> 2] = 3; //@line 13454
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 0; //@line 13457
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 12 >> 2] = $666; //@line 13460
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 16 >> 1] = $5 + 65535; //@line 13465
    $677 = $0 + 944 | 0; //@line 13466
    HEAP8[$677 >> 0] = HEAP8[$677 >> 0] | 2; //@line 13469
    break;
   }
  default:
   {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 13475
    $AsyncCtx36 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13476
    __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 13477
    if (___async) {
     HEAP32[$AsyncCtx36 >> 2] = 408; //@line 13480
     HEAP32[$AsyncCtx36 + 4 >> 2] = $0; //@line 13482
     HEAP32[$AsyncCtx36 + 8 >> 2] = $82; //@line 13484
     HEAP32[$AsyncCtx36 + 12 >> 2] = $vararg_buffer; //@line 13486
     HEAP32[$AsyncCtx36 + 16 >> 2] = $vararg_buffer1; //@line 13488
     sp = STACKTOP; //@line 13489
     STACKTOP = sp; //@line 13490
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx36 | 0); //@line 13492
     break L10;
    }
   }
  }
 } while (0);
 $686 = $0 + 944 | 0; //@line 13498
 HEAP8[$686 >> 0] = HEAP8[$686 >> 0] | 32; //@line 13501
 $689 = HEAP32[$82 >> 2] | 0; //@line 13502
 $AsyncCtx76 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13504
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($689, $0 + 996 | 0, 1); //@line 13505
 if (___async) {
  HEAP32[$AsyncCtx76 >> 2] = 409; //@line 13508
  HEAP32[$AsyncCtx76 + 4 >> 2] = $vararg_buffer; //@line 13510
  HEAP32[$AsyncCtx76 + 8 >> 2] = $vararg_buffer1; //@line 13512
  sp = STACKTOP; //@line 13513
  STACKTOP = sp; //@line 13514
  return;
 }
 _emscripten_free_async_context($AsyncCtx76 | 0); //@line 13516
 STACKTOP = sp; //@line 13517
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_318($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $145 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $234 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $245 = 0, $246 = 0, $248 = 0, $249 = 0, $250 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $262 = 0, $266 = 0, $267 = 0, $269 = 0, $270 = 0, $271 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $54 = 0, $6 = 0, $68 = 0, $72 = 0, $77 = 0, $8 = 0, $83 = 0, $84 = 0, $89 = 0, $93 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 18231
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18233
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18235
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18237
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18239
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18241
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18243
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18245
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18247
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18249
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18251
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18253
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18255
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18257
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 18259
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 18261
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 18263
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx20 = _emscripten_realloc_async_context(68) | 0; //@line 18268
  _mbed_assert_internal(12851, 12860, 194); //@line 18269
  if (___async) {
   HEAP32[$ReallocAsyncCtx20 >> 2] = 462; //@line 18272
   $35 = $ReallocAsyncCtx20 + 4 | 0; //@line 18273
   HEAP32[$35 >> 2] = $2; //@line 18274
   $36 = $ReallocAsyncCtx20 + 8 | 0; //@line 18275
   HEAP32[$36 >> 2] = $4; //@line 18276
   $37 = $ReallocAsyncCtx20 + 12 | 0; //@line 18277
   HEAP32[$37 >> 2] = $6; //@line 18278
   $38 = $ReallocAsyncCtx20 + 16 | 0; //@line 18279
   HEAP32[$38 >> 2] = $8; //@line 18280
   $39 = $ReallocAsyncCtx20 + 20 | 0; //@line 18281
   HEAP32[$39 >> 2] = $10; //@line 18282
   $40 = $ReallocAsyncCtx20 + 24 | 0; //@line 18283
   HEAP32[$40 >> 2] = $12; //@line 18284
   $41 = $ReallocAsyncCtx20 + 28 | 0; //@line 18285
   HEAP32[$41 >> 2] = $14; //@line 18286
   $42 = $ReallocAsyncCtx20 + 32 | 0; //@line 18287
   HEAP32[$42 >> 2] = $16; //@line 18288
   $43 = $ReallocAsyncCtx20 + 36 | 0; //@line 18289
   HEAP32[$43 >> 2] = $18; //@line 18290
   $44 = $ReallocAsyncCtx20 + 40 | 0; //@line 18291
   HEAP32[$44 >> 2] = $20; //@line 18292
   $45 = $ReallocAsyncCtx20 + 44 | 0; //@line 18293
   HEAP32[$45 >> 2] = $22; //@line 18294
   $46 = $ReallocAsyncCtx20 + 48 | 0; //@line 18295
   HEAP32[$46 >> 2] = $24; //@line 18296
   $47 = $ReallocAsyncCtx20 + 52 | 0; //@line 18297
   HEAP32[$47 >> 2] = $26; //@line 18298
   $48 = $ReallocAsyncCtx20 + 56 | 0; //@line 18299
   HEAP32[$48 >> 2] = $28; //@line 18300
   $49 = $ReallocAsyncCtx20 + 60 | 0; //@line 18301
   HEAP32[$49 >> 2] = $30; //@line 18302
   $50 = $ReallocAsyncCtx20 + 64 | 0; //@line 18303
   HEAP32[$50 >> 2] = $32; //@line 18304
   sp = STACKTOP; //@line 18305
   return;
  }
  ___async_unwind = 0; //@line 18308
  HEAP32[$ReallocAsyncCtx20 >> 2] = 462; //@line 18309
  $35 = $ReallocAsyncCtx20 + 4 | 0; //@line 18310
  HEAP32[$35 >> 2] = $2; //@line 18311
  $36 = $ReallocAsyncCtx20 + 8 | 0; //@line 18312
  HEAP32[$36 >> 2] = $4; //@line 18313
  $37 = $ReallocAsyncCtx20 + 12 | 0; //@line 18314
  HEAP32[$37 >> 2] = $6; //@line 18315
  $38 = $ReallocAsyncCtx20 + 16 | 0; //@line 18316
  HEAP32[$38 >> 2] = $8; //@line 18317
  $39 = $ReallocAsyncCtx20 + 20 | 0; //@line 18318
  HEAP32[$39 >> 2] = $10; //@line 18319
  $40 = $ReallocAsyncCtx20 + 24 | 0; //@line 18320
  HEAP32[$40 >> 2] = $12; //@line 18321
  $41 = $ReallocAsyncCtx20 + 28 | 0; //@line 18322
  HEAP32[$41 >> 2] = $14; //@line 18323
  $42 = $ReallocAsyncCtx20 + 32 | 0; //@line 18324
  HEAP32[$42 >> 2] = $16; //@line 18325
  $43 = $ReallocAsyncCtx20 + 36 | 0; //@line 18326
  HEAP32[$43 >> 2] = $18; //@line 18327
  $44 = $ReallocAsyncCtx20 + 40 | 0; //@line 18328
  HEAP32[$44 >> 2] = $20; //@line 18329
  $45 = $ReallocAsyncCtx20 + 44 | 0; //@line 18330
  HEAP32[$45 >> 2] = $22; //@line 18331
  $46 = $ReallocAsyncCtx20 + 48 | 0; //@line 18332
  HEAP32[$46 >> 2] = $24; //@line 18333
  $47 = $ReallocAsyncCtx20 + 52 | 0; //@line 18334
  HEAP32[$47 >> 2] = $26; //@line 18335
  $48 = $ReallocAsyncCtx20 + 56 | 0; //@line 18336
  HEAP32[$48 >> 2] = $28; //@line 18337
  $49 = $ReallocAsyncCtx20 + 60 | 0; //@line 18338
  HEAP32[$49 >> 2] = $30; //@line 18339
  $50 = $ReallocAsyncCtx20 + 64 | 0; //@line 18340
  HEAP32[$50 >> 2] = $32; //@line 18341
  sp = STACKTOP; //@line 18342
  return;
 }
 do {
  if (HEAP8[$6 >> 0] & 2) {
   $54 = $4 + 288 | 0; //@line 18350
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($54) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 18366
   HEAP8[$32 >> 0] = 0; //@line 18367
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $68 = $4 + 956 | 0; //@line 18372
    HEAP32[$68 >> 2] = (HEAP32[$68 >> 2] | 0) + 1; //@line 18375
   }
   $72 = HEAP8[$4 + 895 >> 0] | 0; //@line 18378
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($54) | 0) + 11 >> 0] = $72; //@line 18381
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] & -2; //@line 18384
  }
 } while (0);
 $77 = $4 + 377 | 0; //@line 18387
 if (HEAP8[$77 >> 0] | 0) {
  if (!(HEAP32[$2 >> 2] & 16)) {
   HEAP8[$77 >> 0] = 0; //@line 18395
   $83 = $4 + 895 | 0; //@line 18396
   $84 = HEAP8[$83 >> 0] | 0; //@line 18397
   if (!(($84 & 255) < 9 ? ($84 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $114 = HEAP32[$4 >> 2] | 0; //@line 18404
    $117 = HEAP32[(HEAP32[$114 >> 2] | 0) + 16 >> 2] | 0; //@line 18407
    $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 18408
    FUNCTION_TABLE_vi[$117 & 1023]($114); //@line 18409
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 466; //@line 18412
     $118 = $ReallocAsyncCtx + 4 | 0; //@line 18413
     HEAP32[$118 >> 2] = $6; //@line 18414
     $119 = $ReallocAsyncCtx + 8 | 0; //@line 18415
     HEAP32[$119 >> 2] = $4; //@line 18416
     $120 = $ReallocAsyncCtx + 12 | 0; //@line 18417
     HEAP32[$120 >> 2] = $2; //@line 18418
     $121 = $ReallocAsyncCtx + 16 | 0; //@line 18419
     HEAP32[$121 >> 2] = $8; //@line 18420
     $122 = $ReallocAsyncCtx + 20 | 0; //@line 18421
     HEAP32[$122 >> 2] = $10; //@line 18422
     $123 = $ReallocAsyncCtx + 24 | 0; //@line 18423
     HEAP32[$123 >> 2] = $12; //@line 18424
     $124 = $ReallocAsyncCtx + 28 | 0; //@line 18425
     HEAP32[$124 >> 2] = $14; //@line 18426
     $125 = $ReallocAsyncCtx + 32 | 0; //@line 18427
     HEAP32[$125 >> 2] = $16; //@line 18428
     $126 = $ReallocAsyncCtx + 36 | 0; //@line 18429
     HEAP32[$126 >> 2] = $18; //@line 18430
     $127 = $ReallocAsyncCtx + 40 | 0; //@line 18431
     HEAP32[$127 >> 2] = $20; //@line 18432
     $128 = $ReallocAsyncCtx + 44 | 0; //@line 18433
     HEAP32[$128 >> 2] = $22; //@line 18434
     $129 = $ReallocAsyncCtx + 48 | 0; //@line 18435
     HEAP32[$129 >> 2] = $24; //@line 18436
     $130 = $ReallocAsyncCtx + 52 | 0; //@line 18437
     HEAP32[$130 >> 2] = $26; //@line 18438
     $131 = $ReallocAsyncCtx + 56 | 0; //@line 18439
     HEAP32[$131 >> 2] = $28; //@line 18440
     $132 = $ReallocAsyncCtx + 60 | 0; //@line 18441
     HEAP32[$132 >> 2] = $32; //@line 18442
     $133 = $ReallocAsyncCtx + 64 | 0; //@line 18443
     HEAP32[$133 >> 2] = $83; //@line 18444
     sp = STACKTOP; //@line 18445
     return;
    }
    ___async_unwind = 0; //@line 18448
    HEAP32[$ReallocAsyncCtx >> 2] = 466; //@line 18449
    $118 = $ReallocAsyncCtx + 4 | 0; //@line 18450
    HEAP32[$118 >> 2] = $6; //@line 18451
    $119 = $ReallocAsyncCtx + 8 | 0; //@line 18452
    HEAP32[$119 >> 2] = $4; //@line 18453
    $120 = $ReallocAsyncCtx + 12 | 0; //@line 18454
    HEAP32[$120 >> 2] = $2; //@line 18455
    $121 = $ReallocAsyncCtx + 16 | 0; //@line 18456
    HEAP32[$121 >> 2] = $8; //@line 18457
    $122 = $ReallocAsyncCtx + 20 | 0; //@line 18458
    HEAP32[$122 >> 2] = $10; //@line 18459
    $123 = $ReallocAsyncCtx + 24 | 0; //@line 18460
    HEAP32[$123 >> 2] = $12; //@line 18461
    $124 = $ReallocAsyncCtx + 28 | 0; //@line 18462
    HEAP32[$124 >> 2] = $14; //@line 18463
    $125 = $ReallocAsyncCtx + 32 | 0; //@line 18464
    HEAP32[$125 >> 2] = $16; //@line 18465
    $126 = $ReallocAsyncCtx + 36 | 0; //@line 18466
    HEAP32[$126 >> 2] = $18; //@line 18467
    $127 = $ReallocAsyncCtx + 40 | 0; //@line 18468
    HEAP32[$127 >> 2] = $20; //@line 18469
    $128 = $ReallocAsyncCtx + 44 | 0; //@line 18470
    HEAP32[$128 >> 2] = $22; //@line 18471
    $129 = $ReallocAsyncCtx + 48 | 0; //@line 18472
    HEAP32[$129 >> 2] = $24; //@line 18473
    $130 = $ReallocAsyncCtx + 52 | 0; //@line 18474
    HEAP32[$130 >> 2] = $26; //@line 18475
    $131 = $ReallocAsyncCtx + 56 | 0; //@line 18476
    HEAP32[$131 >> 2] = $28; //@line 18477
    $132 = $ReallocAsyncCtx + 60 | 0; //@line 18478
    HEAP32[$132 >> 2] = $32; //@line 18479
    $133 = $ReallocAsyncCtx + 64 | 0; //@line 18480
    HEAP32[$133 >> 2] = $83; //@line 18481
    sp = STACKTOP; //@line 18482
    return;
   }
   $89 = $84 + 1 << 24 >> 24; //@line 18485
   HEAP8[$83 >> 0] = $89; //@line 18486
   if ($89 & 1) {
    $93 = $4 + 1097 | 0; //@line 18491
    HEAP8[$93 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$93 >> 0] | 0) | 0; //@line 18494
   }
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 18496
   $96 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 18497
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 465; //@line 18500
    $97 = $ReallocAsyncCtx9 + 4 | 0; //@line 18501
    HEAP32[$97 >> 2] = $6; //@line 18502
    $98 = $ReallocAsyncCtx9 + 8 | 0; //@line 18503
    HEAP32[$98 >> 2] = $4; //@line 18504
    $99 = $ReallocAsyncCtx9 + 12 | 0; //@line 18505
    HEAP32[$99 >> 2] = $2; //@line 18506
    $100 = $ReallocAsyncCtx9 + 16 | 0; //@line 18507
    HEAP32[$100 >> 2] = $8; //@line 18508
    $101 = $ReallocAsyncCtx9 + 20 | 0; //@line 18509
    HEAP32[$101 >> 2] = $10; //@line 18510
    $102 = $ReallocAsyncCtx9 + 24 | 0; //@line 18511
    HEAP32[$102 >> 2] = $12; //@line 18512
    $103 = $ReallocAsyncCtx9 + 28 | 0; //@line 18513
    HEAP32[$103 >> 2] = $14; //@line 18514
    $104 = $ReallocAsyncCtx9 + 32 | 0; //@line 18515
    HEAP32[$104 >> 2] = $16; //@line 18516
    $105 = $ReallocAsyncCtx9 + 36 | 0; //@line 18517
    HEAP32[$105 >> 2] = $18; //@line 18518
    $106 = $ReallocAsyncCtx9 + 40 | 0; //@line 18519
    HEAP32[$106 >> 2] = $20; //@line 18520
    $107 = $ReallocAsyncCtx9 + 44 | 0; //@line 18521
    HEAP32[$107 >> 2] = $22; //@line 18522
    $108 = $ReallocAsyncCtx9 + 48 | 0; //@line 18523
    HEAP32[$108 >> 2] = $24; //@line 18524
    $109 = $ReallocAsyncCtx9 + 52 | 0; //@line 18525
    HEAP32[$109 >> 2] = $26; //@line 18526
    $110 = $ReallocAsyncCtx9 + 56 | 0; //@line 18527
    HEAP32[$110 >> 2] = $28; //@line 18528
    $111 = $ReallocAsyncCtx9 + 60 | 0; //@line 18529
    HEAP32[$111 >> 2] = $32; //@line 18530
    $112 = $ReallocAsyncCtx9 + 64 | 0; //@line 18531
    HEAP32[$112 >> 2] = $83; //@line 18532
    sp = STACKTOP; //@line 18533
    return;
   }
   HEAP32[___async_retval >> 2] = $96; //@line 18537
   ___async_unwind = 0; //@line 18538
   HEAP32[$ReallocAsyncCtx9 >> 2] = 465; //@line 18539
   $97 = $ReallocAsyncCtx9 + 4 | 0; //@line 18540
   HEAP32[$97 >> 2] = $6; //@line 18541
   $98 = $ReallocAsyncCtx9 + 8 | 0; //@line 18542
   HEAP32[$98 >> 2] = $4; //@line 18543
   $99 = $ReallocAsyncCtx9 + 12 | 0; //@line 18544
   HEAP32[$99 >> 2] = $2; //@line 18545
   $100 = $ReallocAsyncCtx9 + 16 | 0; //@line 18546
   HEAP32[$100 >> 2] = $8; //@line 18547
   $101 = $ReallocAsyncCtx9 + 20 | 0; //@line 18548
   HEAP32[$101 >> 2] = $10; //@line 18549
   $102 = $ReallocAsyncCtx9 + 24 | 0; //@line 18550
   HEAP32[$102 >> 2] = $12; //@line 18551
   $103 = $ReallocAsyncCtx9 + 28 | 0; //@line 18552
   HEAP32[$103 >> 2] = $14; //@line 18553
   $104 = $ReallocAsyncCtx9 + 32 | 0; //@line 18554
   HEAP32[$104 >> 2] = $16; //@line 18555
   $105 = $ReallocAsyncCtx9 + 36 | 0; //@line 18556
   HEAP32[$105 >> 2] = $18; //@line 18557
   $106 = $ReallocAsyncCtx9 + 40 | 0; //@line 18558
   HEAP32[$106 >> 2] = $20; //@line 18559
   $107 = $ReallocAsyncCtx9 + 44 | 0; //@line 18560
   HEAP32[$107 >> 2] = $22; //@line 18561
   $108 = $ReallocAsyncCtx9 + 48 | 0; //@line 18562
   HEAP32[$108 >> 2] = $24; //@line 18563
   $109 = $ReallocAsyncCtx9 + 52 | 0; //@line 18564
   HEAP32[$109 >> 2] = $26; //@line 18565
   $110 = $ReallocAsyncCtx9 + 56 | 0; //@line 18566
   HEAP32[$110 >> 2] = $28; //@line 18567
   $111 = $ReallocAsyncCtx9 + 60 | 0; //@line 18568
   HEAP32[$111 >> 2] = $32; //@line 18569
   $112 = $ReallocAsyncCtx9 + 64 | 0; //@line 18570
   HEAP32[$112 >> 2] = $83; //@line 18571
   sp = STACKTOP; //@line 18572
   return;
  }
 }
 $134 = HEAP32[$2 >> 2] | 0; //@line 18576
 $137 = $134 & -3; //@line 18579
 if (!($134 & 2)) {
  $139 = $134; //@line 18581
 } else {
  HEAP32[$2 >> 2] = $137; //@line 18583
  $139 = $137; //@line 18584
 }
 if ($139 | 0) {
  $224 = HEAP32[$26 >> 2] | 0; //@line 18588
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 18589
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($224, $28, 1e3); //@line 18590
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 18593
   $225 = $ReallocAsyncCtx8 + 4 | 0; //@line 18594
   HEAP32[$225 >> 2] = $6; //@line 18595
   $226 = $ReallocAsyncCtx8 + 8 | 0; //@line 18596
   HEAP32[$226 >> 2] = $4; //@line 18597
   $227 = $ReallocAsyncCtx8 + 12 | 0; //@line 18598
   HEAP32[$227 >> 2] = $16; //@line 18599
   $228 = $ReallocAsyncCtx8 + 16 | 0; //@line 18600
   HEAP32[$228 >> 2] = $18; //@line 18601
   $229 = $ReallocAsyncCtx8 + 20 | 0; //@line 18602
   HEAP32[$229 >> 2] = $20; //@line 18603
   $230 = $ReallocAsyncCtx8 + 24 | 0; //@line 18604
   HEAP32[$230 >> 2] = $22; //@line 18605
   $231 = $ReallocAsyncCtx8 + 28 | 0; //@line 18606
   HEAP32[$231 >> 2] = $24; //@line 18607
   sp = STACKTOP; //@line 18608
   return;
  }
  ___async_unwind = 0; //@line 18611
  HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 18612
  $225 = $ReallocAsyncCtx8 + 4 | 0; //@line 18613
  HEAP32[$225 >> 2] = $6; //@line 18614
  $226 = $ReallocAsyncCtx8 + 8 | 0; //@line 18615
  HEAP32[$226 >> 2] = $4; //@line 18616
  $227 = $ReallocAsyncCtx8 + 12 | 0; //@line 18617
  HEAP32[$227 >> 2] = $16; //@line 18618
  $228 = $ReallocAsyncCtx8 + 16 | 0; //@line 18619
  HEAP32[$228 >> 2] = $18; //@line 18620
  $229 = $ReallocAsyncCtx8 + 20 | 0; //@line 18621
  HEAP32[$229 >> 2] = $20; //@line 18622
  $230 = $ReallocAsyncCtx8 + 24 | 0; //@line 18623
  HEAP32[$230 >> 2] = $22; //@line 18624
  $231 = $ReallocAsyncCtx8 + 28 | 0; //@line 18625
  HEAP32[$231 >> 2] = $24; //@line 18626
  sp = STACKTOP; //@line 18627
  return;
 }
 $140 = HEAP8[$6 >> 0] | 0; //@line 18630
 if ($140 & 1) {
  HEAP8[$6 >> 0] = $140 & -2; //@line 18635
  $145 = HEAP32[$4 + 1324 >> 2] | 0; //@line 18637
  $147 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 18639
  $148 = $145 + 12 | 0; //@line 18640
  $149 = HEAP32[$148 >> 2] | 0; //@line 18641
  if (!$149) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 18644
   _mbed_assert_internal(15061, 15066, 1102); //@line 18645
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 18648
    $151 = $ReallocAsyncCtx18 + 4 | 0; //@line 18649
    HEAP32[$151 >> 2] = $6; //@line 18650
    $152 = $ReallocAsyncCtx18 + 8 | 0; //@line 18651
    HEAP32[$152 >> 2] = $4; //@line 18652
    $153 = $ReallocAsyncCtx18 + 12 | 0; //@line 18653
    HEAP32[$153 >> 2] = $8; //@line 18654
    $154 = $ReallocAsyncCtx18 + 16 | 0; //@line 18655
    HEAP32[$154 >> 2] = $10; //@line 18656
    $155 = $ReallocAsyncCtx18 + 20 | 0; //@line 18657
    HEAP32[$155 >> 2] = $12; //@line 18658
    $156 = $ReallocAsyncCtx18 + 24 | 0; //@line 18659
    HEAP32[$156 >> 2] = $14; //@line 18660
    $157 = $ReallocAsyncCtx18 + 28 | 0; //@line 18661
    HEAP32[$157 >> 2] = $16; //@line 18662
    $158 = $ReallocAsyncCtx18 + 32 | 0; //@line 18663
    HEAP32[$158 >> 2] = $18; //@line 18664
    $159 = $ReallocAsyncCtx18 + 36 | 0; //@line 18665
    HEAP32[$159 >> 2] = $20; //@line 18666
    $160 = $ReallocAsyncCtx18 + 40 | 0; //@line 18667
    HEAP32[$160 >> 2] = $22; //@line 18668
    $161 = $ReallocAsyncCtx18 + 44 | 0; //@line 18669
    HEAP32[$161 >> 2] = $24; //@line 18670
    $162 = $ReallocAsyncCtx18 + 48 | 0; //@line 18671
    HEAP32[$162 >> 2] = $145; //@line 18672
    $163 = $ReallocAsyncCtx18 + 52 | 0; //@line 18673
    HEAP32[$163 >> 2] = $147; //@line 18674
    $164 = $ReallocAsyncCtx18 + 56 | 0; //@line 18675
    HEAP32[$164 >> 2] = $148; //@line 18676
    sp = STACKTOP; //@line 18677
    return;
   }
   ___async_unwind = 0; //@line 18680
   HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 18681
   $151 = $ReallocAsyncCtx18 + 4 | 0; //@line 18682
   HEAP32[$151 >> 2] = $6; //@line 18683
   $152 = $ReallocAsyncCtx18 + 8 | 0; //@line 18684
   HEAP32[$152 >> 2] = $4; //@line 18685
   $153 = $ReallocAsyncCtx18 + 12 | 0; //@line 18686
   HEAP32[$153 >> 2] = $8; //@line 18687
   $154 = $ReallocAsyncCtx18 + 16 | 0; //@line 18688
   HEAP32[$154 >> 2] = $10; //@line 18689
   $155 = $ReallocAsyncCtx18 + 20 | 0; //@line 18690
   HEAP32[$155 >> 2] = $12; //@line 18691
   $156 = $ReallocAsyncCtx18 + 24 | 0; //@line 18692
   HEAP32[$156 >> 2] = $14; //@line 18693
   $157 = $ReallocAsyncCtx18 + 28 | 0; //@line 18694
   HEAP32[$157 >> 2] = $16; //@line 18695
   $158 = $ReallocAsyncCtx18 + 32 | 0; //@line 18696
   HEAP32[$158 >> 2] = $18; //@line 18697
   $159 = $ReallocAsyncCtx18 + 36 | 0; //@line 18698
   HEAP32[$159 >> 2] = $20; //@line 18699
   $160 = $ReallocAsyncCtx18 + 40 | 0; //@line 18700
   HEAP32[$160 >> 2] = $22; //@line 18701
   $161 = $ReallocAsyncCtx18 + 44 | 0; //@line 18702
   HEAP32[$161 >> 2] = $24; //@line 18703
   $162 = $ReallocAsyncCtx18 + 48 | 0; //@line 18704
   HEAP32[$162 >> 2] = $145; //@line 18705
   $163 = $ReallocAsyncCtx18 + 52 | 0; //@line 18706
   HEAP32[$163 >> 2] = $147; //@line 18707
   $164 = $ReallocAsyncCtx18 + 56 | 0; //@line 18708
   HEAP32[$164 >> 2] = $148; //@line 18709
   sp = STACKTOP; //@line 18710
   return;
  } else {
   $165 = HEAP32[$149 >> 2] | 0; //@line 18713
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 18714
   FUNCTION_TABLE_vii[$165 & 31]($145, $147); //@line 18715
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 18718
    $166 = $ReallocAsyncCtx2 + 4 | 0; //@line 18719
    HEAP32[$166 >> 2] = $6; //@line 18720
    $167 = $ReallocAsyncCtx2 + 8 | 0; //@line 18721
    HEAP32[$167 >> 2] = $4; //@line 18722
    $168 = $ReallocAsyncCtx2 + 12 | 0; //@line 18723
    HEAP32[$168 >> 2] = $8; //@line 18724
    $169 = $ReallocAsyncCtx2 + 16 | 0; //@line 18725
    HEAP32[$169 >> 2] = $10; //@line 18726
    $170 = $ReallocAsyncCtx2 + 20 | 0; //@line 18727
    HEAP32[$170 >> 2] = $12; //@line 18728
    $171 = $ReallocAsyncCtx2 + 24 | 0; //@line 18729
    HEAP32[$171 >> 2] = $14; //@line 18730
    $172 = $ReallocAsyncCtx2 + 28 | 0; //@line 18731
    HEAP32[$172 >> 2] = $16; //@line 18732
    $173 = $ReallocAsyncCtx2 + 32 | 0; //@line 18733
    HEAP32[$173 >> 2] = $18; //@line 18734
    $174 = $ReallocAsyncCtx2 + 36 | 0; //@line 18735
    HEAP32[$174 >> 2] = $20; //@line 18736
    $175 = $ReallocAsyncCtx2 + 40 | 0; //@line 18737
    HEAP32[$175 >> 2] = $22; //@line 18738
    $176 = $ReallocAsyncCtx2 + 44 | 0; //@line 18739
    HEAP32[$176 >> 2] = $24; //@line 18740
    sp = STACKTOP; //@line 18741
    return;
   }
   ___async_unwind = 0; //@line 18744
   HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 18745
   $166 = $ReallocAsyncCtx2 + 4 | 0; //@line 18746
   HEAP32[$166 >> 2] = $6; //@line 18747
   $167 = $ReallocAsyncCtx2 + 8 | 0; //@line 18748
   HEAP32[$167 >> 2] = $4; //@line 18749
   $168 = $ReallocAsyncCtx2 + 12 | 0; //@line 18750
   HEAP32[$168 >> 2] = $8; //@line 18751
   $169 = $ReallocAsyncCtx2 + 16 | 0; //@line 18752
   HEAP32[$169 >> 2] = $10; //@line 18753
   $170 = $ReallocAsyncCtx2 + 20 | 0; //@line 18754
   HEAP32[$170 >> 2] = $12; //@line 18755
   $171 = $ReallocAsyncCtx2 + 24 | 0; //@line 18756
   HEAP32[$171 >> 2] = $14; //@line 18757
   $172 = $ReallocAsyncCtx2 + 28 | 0; //@line 18758
   HEAP32[$172 >> 2] = $16; //@line 18759
   $173 = $ReallocAsyncCtx2 + 32 | 0; //@line 18760
   HEAP32[$173 >> 2] = $18; //@line 18761
   $174 = $ReallocAsyncCtx2 + 36 | 0; //@line 18762
   HEAP32[$174 >> 2] = $20; //@line 18763
   $175 = $ReallocAsyncCtx2 + 40 | 0; //@line 18764
   HEAP32[$175 >> 2] = $22; //@line 18765
   $176 = $ReallocAsyncCtx2 + 44 | 0; //@line 18766
   HEAP32[$176 >> 2] = $24; //@line 18767
   sp = STACKTOP; //@line 18768
   return;
  }
 }
 if ($140 & 8) {
  HEAP8[$6 >> 0] = $140 & -9; //@line 18776
  $181 = HEAP32[$4 + 1324 >> 2] | 0; //@line 18778
  $182 = $181 + 32 | 0; //@line 18779
  $184 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 18781
  $185 = $181 + 44 | 0; //@line 18782
  $186 = HEAP32[$185 >> 2] | 0; //@line 18783
  if (!$186) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 18786
   _mbed_assert_internal(15061, 15066, 1102); //@line 18787
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 18790
    $188 = $ReallocAsyncCtx17 + 4 | 0; //@line 18791
    HEAP32[$188 >> 2] = $6; //@line 18792
    $189 = $ReallocAsyncCtx17 + 8 | 0; //@line 18793
    HEAP32[$189 >> 2] = $4; //@line 18794
    $190 = $ReallocAsyncCtx17 + 12 | 0; //@line 18795
    HEAP32[$190 >> 2] = $182; //@line 18796
    $191 = $ReallocAsyncCtx17 + 16 | 0; //@line 18797
    HEAP32[$191 >> 2] = $184; //@line 18798
    $192 = $ReallocAsyncCtx17 + 20 | 0; //@line 18799
    HEAP32[$192 >> 2] = $8; //@line 18800
    $193 = $ReallocAsyncCtx17 + 24 | 0; //@line 18801
    HEAP32[$193 >> 2] = $10; //@line 18802
    $194 = $ReallocAsyncCtx17 + 28 | 0; //@line 18803
    HEAP32[$194 >> 2] = $12; //@line 18804
    $195 = $ReallocAsyncCtx17 + 32 | 0; //@line 18805
    HEAP32[$195 >> 2] = $14; //@line 18806
    $196 = $ReallocAsyncCtx17 + 36 | 0; //@line 18807
    HEAP32[$196 >> 2] = $16; //@line 18808
    $197 = $ReallocAsyncCtx17 + 40 | 0; //@line 18809
    HEAP32[$197 >> 2] = $18; //@line 18810
    $198 = $ReallocAsyncCtx17 + 44 | 0; //@line 18811
    HEAP32[$198 >> 2] = $20; //@line 18812
    $199 = $ReallocAsyncCtx17 + 48 | 0; //@line 18813
    HEAP32[$199 >> 2] = $22; //@line 18814
    $200 = $ReallocAsyncCtx17 + 52 | 0; //@line 18815
    HEAP32[$200 >> 2] = $24; //@line 18816
    $201 = $ReallocAsyncCtx17 + 56 | 0; //@line 18817
    HEAP32[$201 >> 2] = $185; //@line 18818
    sp = STACKTOP; //@line 18819
    return;
   }
   ___async_unwind = 0; //@line 18822
   HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 18823
   $188 = $ReallocAsyncCtx17 + 4 | 0; //@line 18824
   HEAP32[$188 >> 2] = $6; //@line 18825
   $189 = $ReallocAsyncCtx17 + 8 | 0; //@line 18826
   HEAP32[$189 >> 2] = $4; //@line 18827
   $190 = $ReallocAsyncCtx17 + 12 | 0; //@line 18828
   HEAP32[$190 >> 2] = $182; //@line 18829
   $191 = $ReallocAsyncCtx17 + 16 | 0; //@line 18830
   HEAP32[$191 >> 2] = $184; //@line 18831
   $192 = $ReallocAsyncCtx17 + 20 | 0; //@line 18832
   HEAP32[$192 >> 2] = $8; //@line 18833
   $193 = $ReallocAsyncCtx17 + 24 | 0; //@line 18834
   HEAP32[$193 >> 2] = $10; //@line 18835
   $194 = $ReallocAsyncCtx17 + 28 | 0; //@line 18836
   HEAP32[$194 >> 2] = $12; //@line 18837
   $195 = $ReallocAsyncCtx17 + 32 | 0; //@line 18838
   HEAP32[$195 >> 2] = $14; //@line 18839
   $196 = $ReallocAsyncCtx17 + 36 | 0; //@line 18840
   HEAP32[$196 >> 2] = $16; //@line 18841
   $197 = $ReallocAsyncCtx17 + 40 | 0; //@line 18842
   HEAP32[$197 >> 2] = $18; //@line 18843
   $198 = $ReallocAsyncCtx17 + 44 | 0; //@line 18844
   HEAP32[$198 >> 2] = $20; //@line 18845
   $199 = $ReallocAsyncCtx17 + 48 | 0; //@line 18846
   HEAP32[$199 >> 2] = $22; //@line 18847
   $200 = $ReallocAsyncCtx17 + 52 | 0; //@line 18848
   HEAP32[$200 >> 2] = $24; //@line 18849
   $201 = $ReallocAsyncCtx17 + 56 | 0; //@line 18850
   HEAP32[$201 >> 2] = $185; //@line 18851
   sp = STACKTOP; //@line 18852
   return;
  } else {
   $202 = HEAP32[$186 >> 2] | 0; //@line 18855
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 18856
   FUNCTION_TABLE_vii[$202 & 31]($182, $184); //@line 18857
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 18860
    $203 = $ReallocAsyncCtx3 + 4 | 0; //@line 18861
    HEAP32[$203 >> 2] = $4; //@line 18862
    $204 = $ReallocAsyncCtx3 + 8 | 0; //@line 18863
    HEAP32[$204 >> 2] = $6; //@line 18864
    $205 = $ReallocAsyncCtx3 + 12 | 0; //@line 18865
    HEAP32[$205 >> 2] = $8; //@line 18866
    $206 = $ReallocAsyncCtx3 + 16 | 0; //@line 18867
    HEAP32[$206 >> 2] = $10; //@line 18868
    $207 = $ReallocAsyncCtx3 + 20 | 0; //@line 18869
    HEAP32[$207 >> 2] = $12; //@line 18870
    $208 = $ReallocAsyncCtx3 + 24 | 0; //@line 18871
    HEAP32[$208 >> 2] = $14; //@line 18872
    $209 = $ReallocAsyncCtx3 + 28 | 0; //@line 18873
    HEAP32[$209 >> 2] = $16; //@line 18874
    $210 = $ReallocAsyncCtx3 + 32 | 0; //@line 18875
    HEAP32[$210 >> 2] = $18; //@line 18876
    $211 = $ReallocAsyncCtx3 + 36 | 0; //@line 18877
    HEAP32[$211 >> 2] = $20; //@line 18878
    $212 = $ReallocAsyncCtx3 + 40 | 0; //@line 18879
    HEAP32[$212 >> 2] = $22; //@line 18880
    $213 = $ReallocAsyncCtx3 + 44 | 0; //@line 18881
    HEAP32[$213 >> 2] = $24; //@line 18882
    sp = STACKTOP; //@line 18883
    return;
   }
   ___async_unwind = 0; //@line 18886
   HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 18887
   $203 = $ReallocAsyncCtx3 + 4 | 0; //@line 18888
   HEAP32[$203 >> 2] = $4; //@line 18889
   $204 = $ReallocAsyncCtx3 + 8 | 0; //@line 18890
   HEAP32[$204 >> 2] = $6; //@line 18891
   $205 = $ReallocAsyncCtx3 + 12 | 0; //@line 18892
   HEAP32[$205 >> 2] = $8; //@line 18893
   $206 = $ReallocAsyncCtx3 + 16 | 0; //@line 18894
   HEAP32[$206 >> 2] = $10; //@line 18895
   $207 = $ReallocAsyncCtx3 + 20 | 0; //@line 18896
   HEAP32[$207 >> 2] = $12; //@line 18897
   $208 = $ReallocAsyncCtx3 + 24 | 0; //@line 18898
   HEAP32[$208 >> 2] = $14; //@line 18899
   $209 = $ReallocAsyncCtx3 + 28 | 0; //@line 18900
   HEAP32[$209 >> 2] = $16; //@line 18901
   $210 = $ReallocAsyncCtx3 + 32 | 0; //@line 18902
   HEAP32[$210 >> 2] = $18; //@line 18903
   $211 = $ReallocAsyncCtx3 + 36 | 0; //@line 18904
   HEAP32[$211 >> 2] = $20; //@line 18905
   $212 = $ReallocAsyncCtx3 + 40 | 0; //@line 18906
   HEAP32[$212 >> 2] = $22; //@line 18907
   $213 = $ReallocAsyncCtx3 + 44 | 0; //@line 18908
   HEAP32[$213 >> 2] = $24; //@line 18909
   sp = STACKTOP; //@line 18910
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(12967, $8) | 0; //@line 18917
  _printf(13114, $12) | 0; //@line 18918
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 18919
  _putchar(10) | 0; //@line 18920
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 18923
   $216 = $ReallocAsyncCtx7 + 4 | 0; //@line 18924
   HEAP32[$216 >> 2] = $4; //@line 18925
   $217 = $ReallocAsyncCtx7 + 8 | 0; //@line 18926
   HEAP32[$217 >> 2] = $6; //@line 18927
   $218 = $ReallocAsyncCtx7 + 12 | 0; //@line 18928
   HEAP32[$218 >> 2] = $16; //@line 18929
   $219 = $ReallocAsyncCtx7 + 16 | 0; //@line 18930
   HEAP32[$219 >> 2] = $18; //@line 18931
   $220 = $ReallocAsyncCtx7 + 20 | 0; //@line 18932
   HEAP32[$220 >> 2] = $20; //@line 18933
   $221 = $ReallocAsyncCtx7 + 24 | 0; //@line 18934
   HEAP32[$221 >> 2] = $22; //@line 18935
   $222 = $ReallocAsyncCtx7 + 28 | 0; //@line 18936
   HEAP32[$222 >> 2] = $24; //@line 18937
   sp = STACKTOP; //@line 18938
   return;
  }
  ___async_unwind = 0; //@line 18941
  HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 18942
  $216 = $ReallocAsyncCtx7 + 4 | 0; //@line 18943
  HEAP32[$216 >> 2] = $4; //@line 18944
  $217 = $ReallocAsyncCtx7 + 8 | 0; //@line 18945
  HEAP32[$217 >> 2] = $6; //@line 18946
  $218 = $ReallocAsyncCtx7 + 12 | 0; //@line 18947
  HEAP32[$218 >> 2] = $16; //@line 18948
  $219 = $ReallocAsyncCtx7 + 16 | 0; //@line 18949
  HEAP32[$219 >> 2] = $18; //@line 18950
  $220 = $ReallocAsyncCtx7 + 20 | 0; //@line 18951
  HEAP32[$220 >> 2] = $20; //@line 18952
  $221 = $ReallocAsyncCtx7 + 24 | 0; //@line 18953
  HEAP32[$221 >> 2] = $22; //@line 18954
  $222 = $ReallocAsyncCtx7 + 28 | 0; //@line 18955
  HEAP32[$222 >> 2] = $24; //@line 18956
  sp = STACKTOP; //@line 18957
  return;
 }
 $223 = HEAP8[$6 >> 0] & -33; //@line 18961
 HEAP8[$6 >> 0] = $223; //@line 18962
 do {
  if (!($223 & 2)) {
   $262 = $223; //@line 18967
  } else {
   $234 = $223 & -3; //@line 18969
   HEAP8[$6 >> 0] = $234; //@line 18970
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12967, $18) | 0; //@line 18975
    _printf(12994, $22) | 0; //@line 18976
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 18977
    _putchar(10) | 0; //@line 18978
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 18981
     $238 = $ReallocAsyncCtx6 + 4 | 0; //@line 18982
     HEAP32[$238 >> 2] = $6; //@line 18983
     $239 = $ReallocAsyncCtx6 + 8 | 0; //@line 18984
     HEAP32[$239 >> 2] = $16; //@line 18985
     $240 = $ReallocAsyncCtx6 + 12 | 0; //@line 18986
     HEAP32[$240 >> 2] = $4; //@line 18987
     $241 = $ReallocAsyncCtx6 + 16 | 0; //@line 18988
     HEAP32[$241 >> 2] = $16; //@line 18989
     sp = STACKTOP; //@line 18990
     return;
    }
    ___async_unwind = 0; //@line 18993
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 18994
    $238 = $ReallocAsyncCtx6 + 4 | 0; //@line 18995
    HEAP32[$238 >> 2] = $6; //@line 18996
    $239 = $ReallocAsyncCtx6 + 8 | 0; //@line 18997
    HEAP32[$239 >> 2] = $16; //@line 18998
    $240 = $ReallocAsyncCtx6 + 12 | 0; //@line 18999
    HEAP32[$240 >> 2] = $4; //@line 19000
    $241 = $ReallocAsyncCtx6 + 16 | 0; //@line 19001
    HEAP32[$241 >> 2] = $16; //@line 19002
    sp = STACKTOP; //@line 19003
    return;
   }
   if ($234 & 4) {
    $260 = $234 & -5; //@line 19009
    HEAP8[$6 >> 0] = $260; //@line 19010
    $262 = $260; //@line 19011
    break;
   }
   $245 = HEAP32[$4 + 1324 >> 2] | 0; //@line 19015
   $246 = $245 + 16 | 0; //@line 19016
   $248 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 19018
   $249 = $245 + 28 | 0; //@line 19019
   $250 = HEAP32[$249 >> 2] | 0; //@line 19020
   if (!$250) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 19023
    _mbed_assert_internal(15061, 15066, 1102); //@line 19024
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 19027
     $252 = $ReallocAsyncCtx15 + 4 | 0; //@line 19028
     HEAP32[$252 >> 2] = $249; //@line 19029
     $253 = $ReallocAsyncCtx15 + 8 | 0; //@line 19030
     HEAP32[$253 >> 2] = $246; //@line 19031
     $254 = $ReallocAsyncCtx15 + 12 | 0; //@line 19032
     HEAP32[$254 >> 2] = $248; //@line 19033
     $255 = $ReallocAsyncCtx15 + 16 | 0; //@line 19034
     HEAP32[$255 >> 2] = $6; //@line 19035
     $256 = $ReallocAsyncCtx15 + 20 | 0; //@line 19036
     HEAP32[$256 >> 2] = $4; //@line 19037
     sp = STACKTOP; //@line 19038
     return;
    }
    ___async_unwind = 0; //@line 19041
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 19042
    $252 = $ReallocAsyncCtx15 + 4 | 0; //@line 19043
    HEAP32[$252 >> 2] = $249; //@line 19044
    $253 = $ReallocAsyncCtx15 + 8 | 0; //@line 19045
    HEAP32[$253 >> 2] = $246; //@line 19046
    $254 = $ReallocAsyncCtx15 + 12 | 0; //@line 19047
    HEAP32[$254 >> 2] = $248; //@line 19048
    $255 = $ReallocAsyncCtx15 + 16 | 0; //@line 19049
    HEAP32[$255 >> 2] = $6; //@line 19050
    $256 = $ReallocAsyncCtx15 + 20 | 0; //@line 19051
    HEAP32[$256 >> 2] = $4; //@line 19052
    sp = STACKTOP; //@line 19053
    return;
   } else {
    $257 = HEAP32[$250 >> 2] | 0; //@line 19056
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 19057
    FUNCTION_TABLE_vii[$257 & 31]($246, $248); //@line 19058
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 19061
     $258 = $ReallocAsyncCtx4 + 4 | 0; //@line 19062
     HEAP32[$258 >> 2] = $6; //@line 19063
     $259 = $ReallocAsyncCtx4 + 8 | 0; //@line 19064
     HEAP32[$259 >> 2] = $4; //@line 19065
     sp = STACKTOP; //@line 19066
     return;
    }
    ___async_unwind = 0; //@line 19069
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 19070
    $258 = $ReallocAsyncCtx4 + 4 | 0; //@line 19071
    HEAP32[$258 >> 2] = $6; //@line 19072
    $259 = $ReallocAsyncCtx4 + 8 | 0; //@line 19073
    HEAP32[$259 >> 2] = $4; //@line 19074
    sp = STACKTOP; //@line 19075
    return;
   }
  }
 } while (0);
 if (!($262 & 16)) {
  return;
 }
 HEAP8[$6 >> 0] = $262 & -17; //@line 19086
 $266 = HEAP32[$4 + 1324 >> 2] | 0; //@line 19088
 $267 = $266 + 48 | 0; //@line 19089
 $269 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 19091
 $270 = $266 + 60 | 0; //@line 19092
 $271 = HEAP32[$270 >> 2] | 0; //@line 19093
 if (!$271) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 19096
  _mbed_assert_internal(15061, 15066, 1102); //@line 19097
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 19100
   $273 = $ReallocAsyncCtx14 + 4 | 0; //@line 19101
   HEAP32[$273 >> 2] = $270; //@line 19102
   $274 = $ReallocAsyncCtx14 + 8 | 0; //@line 19103
   HEAP32[$274 >> 2] = $267; //@line 19104
   $275 = $ReallocAsyncCtx14 + 12 | 0; //@line 19105
   HEAP32[$275 >> 2] = $269; //@line 19106
   sp = STACKTOP; //@line 19107
   return;
  }
  ___async_unwind = 0; //@line 19110
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 19111
  $273 = $ReallocAsyncCtx14 + 4 | 0; //@line 19112
  HEAP32[$273 >> 2] = $270; //@line 19113
  $274 = $ReallocAsyncCtx14 + 8 | 0; //@line 19114
  HEAP32[$274 >> 2] = $267; //@line 19115
  $275 = $ReallocAsyncCtx14 + 12 | 0; //@line 19116
  HEAP32[$275 >> 2] = $269; //@line 19117
  sp = STACKTOP; //@line 19118
  return;
 } else {
  $276 = HEAP32[$271 >> 2] | 0; //@line 19121
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 19122
  FUNCTION_TABLE_vii[$276 & 31]($267, $269); //@line 19123
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 19126
   sp = STACKTOP; //@line 19127
   return;
  }
  ___async_unwind = 0; //@line 19130
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 19131
  sp = STACKTOP; //@line 19132
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_317($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $145 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $234 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $245 = 0, $246 = 0, $248 = 0, $249 = 0, $250 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $262 = 0, $266 = 0, $267 = 0, $269 = 0, $270 = 0, $271 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $54 = 0, $6 = 0, $68 = 0, $72 = 0, $77 = 0, $8 = 0, $83 = 0, $84 = 0, $89 = 0, $93 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 17308
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17310
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17312
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17314
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17316
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17318
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17320
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17322
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17324
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17326
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17328
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17330
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 17332
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 17334
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 17336
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 17338
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 17340
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx19 = _emscripten_realloc_async_context(68) | 0; //@line 17345
  _mbed_assert_internal(12851, 12860, 194); //@line 17346
  if (___async) {
   HEAP32[$ReallocAsyncCtx19 >> 2] = 464; //@line 17349
   $35 = $ReallocAsyncCtx19 + 4 | 0; //@line 17350
   HEAP32[$35 >> 2] = $2; //@line 17351
   $36 = $ReallocAsyncCtx19 + 8 | 0; //@line 17352
   HEAP32[$36 >> 2] = $4; //@line 17353
   $37 = $ReallocAsyncCtx19 + 12 | 0; //@line 17354
   HEAP32[$37 >> 2] = $6; //@line 17355
   $38 = $ReallocAsyncCtx19 + 16 | 0; //@line 17356
   HEAP32[$38 >> 2] = $16; //@line 17357
   $39 = $ReallocAsyncCtx19 + 20 | 0; //@line 17358
   HEAP32[$39 >> 2] = $18; //@line 17359
   $40 = $ReallocAsyncCtx19 + 24 | 0; //@line 17360
   HEAP32[$40 >> 2] = $20; //@line 17361
   $41 = $ReallocAsyncCtx19 + 28 | 0; //@line 17362
   HEAP32[$41 >> 2] = $22; //@line 17363
   $42 = $ReallocAsyncCtx19 + 32 | 0; //@line 17364
   HEAP32[$42 >> 2] = $24; //@line 17365
   $43 = $ReallocAsyncCtx19 + 36 | 0; //@line 17366
   HEAP32[$43 >> 2] = $8; //@line 17367
   $44 = $ReallocAsyncCtx19 + 40 | 0; //@line 17368
   HEAP32[$44 >> 2] = $10; //@line 17369
   $45 = $ReallocAsyncCtx19 + 44 | 0; //@line 17370
   HEAP32[$45 >> 2] = $12; //@line 17371
   $46 = $ReallocAsyncCtx19 + 48 | 0; //@line 17372
   HEAP32[$46 >> 2] = $14; //@line 17373
   $47 = $ReallocAsyncCtx19 + 52 | 0; //@line 17374
   HEAP32[$47 >> 2] = $26; //@line 17375
   $48 = $ReallocAsyncCtx19 + 56 | 0; //@line 17376
   HEAP32[$48 >> 2] = $28; //@line 17377
   $49 = $ReallocAsyncCtx19 + 60 | 0; //@line 17378
   HEAP32[$49 >> 2] = $30; //@line 17379
   $50 = $ReallocAsyncCtx19 + 64 | 0; //@line 17380
   HEAP32[$50 >> 2] = $32; //@line 17381
   sp = STACKTOP; //@line 17382
   return;
  }
  ___async_unwind = 0; //@line 17385
  HEAP32[$ReallocAsyncCtx19 >> 2] = 464; //@line 17386
  $35 = $ReallocAsyncCtx19 + 4 | 0; //@line 17387
  HEAP32[$35 >> 2] = $2; //@line 17388
  $36 = $ReallocAsyncCtx19 + 8 | 0; //@line 17389
  HEAP32[$36 >> 2] = $4; //@line 17390
  $37 = $ReallocAsyncCtx19 + 12 | 0; //@line 17391
  HEAP32[$37 >> 2] = $6; //@line 17392
  $38 = $ReallocAsyncCtx19 + 16 | 0; //@line 17393
  HEAP32[$38 >> 2] = $16; //@line 17394
  $39 = $ReallocAsyncCtx19 + 20 | 0; //@line 17395
  HEAP32[$39 >> 2] = $18; //@line 17396
  $40 = $ReallocAsyncCtx19 + 24 | 0; //@line 17397
  HEAP32[$40 >> 2] = $20; //@line 17398
  $41 = $ReallocAsyncCtx19 + 28 | 0; //@line 17399
  HEAP32[$41 >> 2] = $22; //@line 17400
  $42 = $ReallocAsyncCtx19 + 32 | 0; //@line 17401
  HEAP32[$42 >> 2] = $24; //@line 17402
  $43 = $ReallocAsyncCtx19 + 36 | 0; //@line 17403
  HEAP32[$43 >> 2] = $8; //@line 17404
  $44 = $ReallocAsyncCtx19 + 40 | 0; //@line 17405
  HEAP32[$44 >> 2] = $10; //@line 17406
  $45 = $ReallocAsyncCtx19 + 44 | 0; //@line 17407
  HEAP32[$45 >> 2] = $12; //@line 17408
  $46 = $ReallocAsyncCtx19 + 48 | 0; //@line 17409
  HEAP32[$46 >> 2] = $14; //@line 17410
  $47 = $ReallocAsyncCtx19 + 52 | 0; //@line 17411
  HEAP32[$47 >> 2] = $26; //@line 17412
  $48 = $ReallocAsyncCtx19 + 56 | 0; //@line 17413
  HEAP32[$48 >> 2] = $28; //@line 17414
  $49 = $ReallocAsyncCtx19 + 60 | 0; //@line 17415
  HEAP32[$49 >> 2] = $30; //@line 17416
  $50 = $ReallocAsyncCtx19 + 64 | 0; //@line 17417
  HEAP32[$50 >> 2] = $32; //@line 17418
  sp = STACKTOP; //@line 17419
  return;
 }
 do {
  if (HEAP8[$6 >> 0] & 2) {
   $54 = $4 + 288 | 0; //@line 17427
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($54) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 17443
   HEAP8[$30 >> 0] = 0; //@line 17444
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $68 = $4 + 956 | 0; //@line 17449
    HEAP32[$68 >> 2] = (HEAP32[$68 >> 2] | 0) + 1; //@line 17452
   }
   $72 = HEAP8[$4 + 895 >> 0] | 0; //@line 17455
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($54) | 0) + 11 >> 0] = $72; //@line 17458
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] & -2; //@line 17461
  }
 } while (0);
 $77 = $4 + 377 | 0; //@line 17464
 if (HEAP8[$77 >> 0] | 0) {
  if (!(HEAP32[$2 >> 2] & 16)) {
   HEAP8[$77 >> 0] = 0; //@line 17472
   $83 = $4 + 895 | 0; //@line 17473
   $84 = HEAP8[$83 >> 0] | 0; //@line 17474
   if (!(($84 & 255) < 9 ? ($84 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $114 = HEAP32[$4 >> 2] | 0; //@line 17481
    $117 = HEAP32[(HEAP32[$114 >> 2] | 0) + 16 >> 2] | 0; //@line 17484
    $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 17485
    FUNCTION_TABLE_vi[$117 & 1023]($114); //@line 17486
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 466; //@line 17489
     $118 = $ReallocAsyncCtx + 4 | 0; //@line 17490
     HEAP32[$118 >> 2] = $6; //@line 17491
     $119 = $ReallocAsyncCtx + 8 | 0; //@line 17492
     HEAP32[$119 >> 2] = $4; //@line 17493
     $120 = $ReallocAsyncCtx + 12 | 0; //@line 17494
     HEAP32[$120 >> 2] = $2; //@line 17495
     $121 = $ReallocAsyncCtx + 16 | 0; //@line 17496
     HEAP32[$121 >> 2] = $8; //@line 17497
     $122 = $ReallocAsyncCtx + 20 | 0; //@line 17498
     HEAP32[$122 >> 2] = $10; //@line 17499
     $123 = $ReallocAsyncCtx + 24 | 0; //@line 17500
     HEAP32[$123 >> 2] = $12; //@line 17501
     $124 = $ReallocAsyncCtx + 28 | 0; //@line 17502
     HEAP32[$124 >> 2] = $14; //@line 17503
     $125 = $ReallocAsyncCtx + 32 | 0; //@line 17504
     HEAP32[$125 >> 2] = $16; //@line 17505
     $126 = $ReallocAsyncCtx + 36 | 0; //@line 17506
     HEAP32[$126 >> 2] = $18; //@line 17507
     $127 = $ReallocAsyncCtx + 40 | 0; //@line 17508
     HEAP32[$127 >> 2] = $20; //@line 17509
     $128 = $ReallocAsyncCtx + 44 | 0; //@line 17510
     HEAP32[$128 >> 2] = $22; //@line 17511
     $129 = $ReallocAsyncCtx + 48 | 0; //@line 17512
     HEAP32[$129 >> 2] = $24; //@line 17513
     $130 = $ReallocAsyncCtx + 52 | 0; //@line 17514
     HEAP32[$130 >> 2] = $26; //@line 17515
     $131 = $ReallocAsyncCtx + 56 | 0; //@line 17516
     HEAP32[$131 >> 2] = $28; //@line 17517
     $132 = $ReallocAsyncCtx + 60 | 0; //@line 17518
     HEAP32[$132 >> 2] = $30; //@line 17519
     $133 = $ReallocAsyncCtx + 64 | 0; //@line 17520
     HEAP32[$133 >> 2] = $83; //@line 17521
     sp = STACKTOP; //@line 17522
     return;
    }
    ___async_unwind = 0; //@line 17525
    HEAP32[$ReallocAsyncCtx >> 2] = 466; //@line 17526
    $118 = $ReallocAsyncCtx + 4 | 0; //@line 17527
    HEAP32[$118 >> 2] = $6; //@line 17528
    $119 = $ReallocAsyncCtx + 8 | 0; //@line 17529
    HEAP32[$119 >> 2] = $4; //@line 17530
    $120 = $ReallocAsyncCtx + 12 | 0; //@line 17531
    HEAP32[$120 >> 2] = $2; //@line 17532
    $121 = $ReallocAsyncCtx + 16 | 0; //@line 17533
    HEAP32[$121 >> 2] = $8; //@line 17534
    $122 = $ReallocAsyncCtx + 20 | 0; //@line 17535
    HEAP32[$122 >> 2] = $10; //@line 17536
    $123 = $ReallocAsyncCtx + 24 | 0; //@line 17537
    HEAP32[$123 >> 2] = $12; //@line 17538
    $124 = $ReallocAsyncCtx + 28 | 0; //@line 17539
    HEAP32[$124 >> 2] = $14; //@line 17540
    $125 = $ReallocAsyncCtx + 32 | 0; //@line 17541
    HEAP32[$125 >> 2] = $16; //@line 17542
    $126 = $ReallocAsyncCtx + 36 | 0; //@line 17543
    HEAP32[$126 >> 2] = $18; //@line 17544
    $127 = $ReallocAsyncCtx + 40 | 0; //@line 17545
    HEAP32[$127 >> 2] = $20; //@line 17546
    $128 = $ReallocAsyncCtx + 44 | 0; //@line 17547
    HEAP32[$128 >> 2] = $22; //@line 17548
    $129 = $ReallocAsyncCtx + 48 | 0; //@line 17549
    HEAP32[$129 >> 2] = $24; //@line 17550
    $130 = $ReallocAsyncCtx + 52 | 0; //@line 17551
    HEAP32[$130 >> 2] = $26; //@line 17552
    $131 = $ReallocAsyncCtx + 56 | 0; //@line 17553
    HEAP32[$131 >> 2] = $28; //@line 17554
    $132 = $ReallocAsyncCtx + 60 | 0; //@line 17555
    HEAP32[$132 >> 2] = $30; //@line 17556
    $133 = $ReallocAsyncCtx + 64 | 0; //@line 17557
    HEAP32[$133 >> 2] = $83; //@line 17558
    sp = STACKTOP; //@line 17559
    return;
   }
   $89 = $84 + 1 << 24 >> 24; //@line 17562
   HEAP8[$83 >> 0] = $89; //@line 17563
   if ($89 & 1) {
    $93 = $4 + 1097 | 0; //@line 17568
    HEAP8[$93 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$93 >> 0] | 0) | 0; //@line 17571
   }
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 17573
   $96 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 17574
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 465; //@line 17577
    $97 = $ReallocAsyncCtx9 + 4 | 0; //@line 17578
    HEAP32[$97 >> 2] = $6; //@line 17579
    $98 = $ReallocAsyncCtx9 + 8 | 0; //@line 17580
    HEAP32[$98 >> 2] = $4; //@line 17581
    $99 = $ReallocAsyncCtx9 + 12 | 0; //@line 17582
    HEAP32[$99 >> 2] = $2; //@line 17583
    $100 = $ReallocAsyncCtx9 + 16 | 0; //@line 17584
    HEAP32[$100 >> 2] = $8; //@line 17585
    $101 = $ReallocAsyncCtx9 + 20 | 0; //@line 17586
    HEAP32[$101 >> 2] = $10; //@line 17587
    $102 = $ReallocAsyncCtx9 + 24 | 0; //@line 17588
    HEAP32[$102 >> 2] = $12; //@line 17589
    $103 = $ReallocAsyncCtx9 + 28 | 0; //@line 17590
    HEAP32[$103 >> 2] = $14; //@line 17591
    $104 = $ReallocAsyncCtx9 + 32 | 0; //@line 17592
    HEAP32[$104 >> 2] = $16; //@line 17593
    $105 = $ReallocAsyncCtx9 + 36 | 0; //@line 17594
    HEAP32[$105 >> 2] = $18; //@line 17595
    $106 = $ReallocAsyncCtx9 + 40 | 0; //@line 17596
    HEAP32[$106 >> 2] = $20; //@line 17597
    $107 = $ReallocAsyncCtx9 + 44 | 0; //@line 17598
    HEAP32[$107 >> 2] = $22; //@line 17599
    $108 = $ReallocAsyncCtx9 + 48 | 0; //@line 17600
    HEAP32[$108 >> 2] = $24; //@line 17601
    $109 = $ReallocAsyncCtx9 + 52 | 0; //@line 17602
    HEAP32[$109 >> 2] = $26; //@line 17603
    $110 = $ReallocAsyncCtx9 + 56 | 0; //@line 17604
    HEAP32[$110 >> 2] = $28; //@line 17605
    $111 = $ReallocAsyncCtx9 + 60 | 0; //@line 17606
    HEAP32[$111 >> 2] = $30; //@line 17607
    $112 = $ReallocAsyncCtx9 + 64 | 0; //@line 17608
    HEAP32[$112 >> 2] = $83; //@line 17609
    sp = STACKTOP; //@line 17610
    return;
   }
   HEAP32[___async_retval >> 2] = $96; //@line 17614
   ___async_unwind = 0; //@line 17615
   HEAP32[$ReallocAsyncCtx9 >> 2] = 465; //@line 17616
   $97 = $ReallocAsyncCtx9 + 4 | 0; //@line 17617
   HEAP32[$97 >> 2] = $6; //@line 17618
   $98 = $ReallocAsyncCtx9 + 8 | 0; //@line 17619
   HEAP32[$98 >> 2] = $4; //@line 17620
   $99 = $ReallocAsyncCtx9 + 12 | 0; //@line 17621
   HEAP32[$99 >> 2] = $2; //@line 17622
   $100 = $ReallocAsyncCtx9 + 16 | 0; //@line 17623
   HEAP32[$100 >> 2] = $8; //@line 17624
   $101 = $ReallocAsyncCtx9 + 20 | 0; //@line 17625
   HEAP32[$101 >> 2] = $10; //@line 17626
   $102 = $ReallocAsyncCtx9 + 24 | 0; //@line 17627
   HEAP32[$102 >> 2] = $12; //@line 17628
   $103 = $ReallocAsyncCtx9 + 28 | 0; //@line 17629
   HEAP32[$103 >> 2] = $14; //@line 17630
   $104 = $ReallocAsyncCtx9 + 32 | 0; //@line 17631
   HEAP32[$104 >> 2] = $16; //@line 17632
   $105 = $ReallocAsyncCtx9 + 36 | 0; //@line 17633
   HEAP32[$105 >> 2] = $18; //@line 17634
   $106 = $ReallocAsyncCtx9 + 40 | 0; //@line 17635
   HEAP32[$106 >> 2] = $20; //@line 17636
   $107 = $ReallocAsyncCtx9 + 44 | 0; //@line 17637
   HEAP32[$107 >> 2] = $22; //@line 17638
   $108 = $ReallocAsyncCtx9 + 48 | 0; //@line 17639
   HEAP32[$108 >> 2] = $24; //@line 17640
   $109 = $ReallocAsyncCtx9 + 52 | 0; //@line 17641
   HEAP32[$109 >> 2] = $26; //@line 17642
   $110 = $ReallocAsyncCtx9 + 56 | 0; //@line 17643
   HEAP32[$110 >> 2] = $28; //@line 17644
   $111 = $ReallocAsyncCtx9 + 60 | 0; //@line 17645
   HEAP32[$111 >> 2] = $30; //@line 17646
   $112 = $ReallocAsyncCtx9 + 64 | 0; //@line 17647
   HEAP32[$112 >> 2] = $83; //@line 17648
   sp = STACKTOP; //@line 17649
   return;
  }
 }
 $134 = HEAP32[$2 >> 2] | 0; //@line 17653
 $137 = $134 & -3; //@line 17656
 if (!($134 & 2)) {
  $139 = $134; //@line 17658
 } else {
  HEAP32[$2 >> 2] = $137; //@line 17660
  $139 = $137; //@line 17661
 }
 if ($139 | 0) {
  $224 = HEAP32[$26 >> 2] | 0; //@line 17665
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 17666
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($224, $28, 1e3); //@line 17667
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 17670
   $225 = $ReallocAsyncCtx8 + 4 | 0; //@line 17671
   HEAP32[$225 >> 2] = $6; //@line 17672
   $226 = $ReallocAsyncCtx8 + 8 | 0; //@line 17673
   HEAP32[$226 >> 2] = $4; //@line 17674
   $227 = $ReallocAsyncCtx8 + 12 | 0; //@line 17675
   HEAP32[$227 >> 2] = $16; //@line 17676
   $228 = $ReallocAsyncCtx8 + 16 | 0; //@line 17677
   HEAP32[$228 >> 2] = $18; //@line 17678
   $229 = $ReallocAsyncCtx8 + 20 | 0; //@line 17679
   HEAP32[$229 >> 2] = $20; //@line 17680
   $230 = $ReallocAsyncCtx8 + 24 | 0; //@line 17681
   HEAP32[$230 >> 2] = $22; //@line 17682
   $231 = $ReallocAsyncCtx8 + 28 | 0; //@line 17683
   HEAP32[$231 >> 2] = $24; //@line 17684
   sp = STACKTOP; //@line 17685
   return;
  }
  ___async_unwind = 0; //@line 17688
  HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 17689
  $225 = $ReallocAsyncCtx8 + 4 | 0; //@line 17690
  HEAP32[$225 >> 2] = $6; //@line 17691
  $226 = $ReallocAsyncCtx8 + 8 | 0; //@line 17692
  HEAP32[$226 >> 2] = $4; //@line 17693
  $227 = $ReallocAsyncCtx8 + 12 | 0; //@line 17694
  HEAP32[$227 >> 2] = $16; //@line 17695
  $228 = $ReallocAsyncCtx8 + 16 | 0; //@line 17696
  HEAP32[$228 >> 2] = $18; //@line 17697
  $229 = $ReallocAsyncCtx8 + 20 | 0; //@line 17698
  HEAP32[$229 >> 2] = $20; //@line 17699
  $230 = $ReallocAsyncCtx8 + 24 | 0; //@line 17700
  HEAP32[$230 >> 2] = $22; //@line 17701
  $231 = $ReallocAsyncCtx8 + 28 | 0; //@line 17702
  HEAP32[$231 >> 2] = $24; //@line 17703
  sp = STACKTOP; //@line 17704
  return;
 }
 $140 = HEAP8[$6 >> 0] | 0; //@line 17707
 if ($140 & 1) {
  HEAP8[$6 >> 0] = $140 & -2; //@line 17712
  $145 = HEAP32[$4 + 1324 >> 2] | 0; //@line 17714
  $147 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 17716
  $148 = $145 + 12 | 0; //@line 17717
  $149 = HEAP32[$148 >> 2] | 0; //@line 17718
  if (!$149) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 17721
   _mbed_assert_internal(15061, 15066, 1102); //@line 17722
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 17725
    $151 = $ReallocAsyncCtx18 + 4 | 0; //@line 17726
    HEAP32[$151 >> 2] = $6; //@line 17727
    $152 = $ReallocAsyncCtx18 + 8 | 0; //@line 17728
    HEAP32[$152 >> 2] = $4; //@line 17729
    $153 = $ReallocAsyncCtx18 + 12 | 0; //@line 17730
    HEAP32[$153 >> 2] = $8; //@line 17731
    $154 = $ReallocAsyncCtx18 + 16 | 0; //@line 17732
    HEAP32[$154 >> 2] = $10; //@line 17733
    $155 = $ReallocAsyncCtx18 + 20 | 0; //@line 17734
    HEAP32[$155 >> 2] = $12; //@line 17735
    $156 = $ReallocAsyncCtx18 + 24 | 0; //@line 17736
    HEAP32[$156 >> 2] = $14; //@line 17737
    $157 = $ReallocAsyncCtx18 + 28 | 0; //@line 17738
    HEAP32[$157 >> 2] = $16; //@line 17739
    $158 = $ReallocAsyncCtx18 + 32 | 0; //@line 17740
    HEAP32[$158 >> 2] = $18; //@line 17741
    $159 = $ReallocAsyncCtx18 + 36 | 0; //@line 17742
    HEAP32[$159 >> 2] = $20; //@line 17743
    $160 = $ReallocAsyncCtx18 + 40 | 0; //@line 17744
    HEAP32[$160 >> 2] = $22; //@line 17745
    $161 = $ReallocAsyncCtx18 + 44 | 0; //@line 17746
    HEAP32[$161 >> 2] = $24; //@line 17747
    $162 = $ReallocAsyncCtx18 + 48 | 0; //@line 17748
    HEAP32[$162 >> 2] = $145; //@line 17749
    $163 = $ReallocAsyncCtx18 + 52 | 0; //@line 17750
    HEAP32[$163 >> 2] = $147; //@line 17751
    $164 = $ReallocAsyncCtx18 + 56 | 0; //@line 17752
    HEAP32[$164 >> 2] = $148; //@line 17753
    sp = STACKTOP; //@line 17754
    return;
   }
   ___async_unwind = 0; //@line 17757
   HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 17758
   $151 = $ReallocAsyncCtx18 + 4 | 0; //@line 17759
   HEAP32[$151 >> 2] = $6; //@line 17760
   $152 = $ReallocAsyncCtx18 + 8 | 0; //@line 17761
   HEAP32[$152 >> 2] = $4; //@line 17762
   $153 = $ReallocAsyncCtx18 + 12 | 0; //@line 17763
   HEAP32[$153 >> 2] = $8; //@line 17764
   $154 = $ReallocAsyncCtx18 + 16 | 0; //@line 17765
   HEAP32[$154 >> 2] = $10; //@line 17766
   $155 = $ReallocAsyncCtx18 + 20 | 0; //@line 17767
   HEAP32[$155 >> 2] = $12; //@line 17768
   $156 = $ReallocAsyncCtx18 + 24 | 0; //@line 17769
   HEAP32[$156 >> 2] = $14; //@line 17770
   $157 = $ReallocAsyncCtx18 + 28 | 0; //@line 17771
   HEAP32[$157 >> 2] = $16; //@line 17772
   $158 = $ReallocAsyncCtx18 + 32 | 0; //@line 17773
   HEAP32[$158 >> 2] = $18; //@line 17774
   $159 = $ReallocAsyncCtx18 + 36 | 0; //@line 17775
   HEAP32[$159 >> 2] = $20; //@line 17776
   $160 = $ReallocAsyncCtx18 + 40 | 0; //@line 17777
   HEAP32[$160 >> 2] = $22; //@line 17778
   $161 = $ReallocAsyncCtx18 + 44 | 0; //@line 17779
   HEAP32[$161 >> 2] = $24; //@line 17780
   $162 = $ReallocAsyncCtx18 + 48 | 0; //@line 17781
   HEAP32[$162 >> 2] = $145; //@line 17782
   $163 = $ReallocAsyncCtx18 + 52 | 0; //@line 17783
   HEAP32[$163 >> 2] = $147; //@line 17784
   $164 = $ReallocAsyncCtx18 + 56 | 0; //@line 17785
   HEAP32[$164 >> 2] = $148; //@line 17786
   sp = STACKTOP; //@line 17787
   return;
  } else {
   $165 = HEAP32[$149 >> 2] | 0; //@line 17790
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 17791
   FUNCTION_TABLE_vii[$165 & 31]($145, $147); //@line 17792
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 17795
    $166 = $ReallocAsyncCtx2 + 4 | 0; //@line 17796
    HEAP32[$166 >> 2] = $6; //@line 17797
    $167 = $ReallocAsyncCtx2 + 8 | 0; //@line 17798
    HEAP32[$167 >> 2] = $4; //@line 17799
    $168 = $ReallocAsyncCtx2 + 12 | 0; //@line 17800
    HEAP32[$168 >> 2] = $8; //@line 17801
    $169 = $ReallocAsyncCtx2 + 16 | 0; //@line 17802
    HEAP32[$169 >> 2] = $10; //@line 17803
    $170 = $ReallocAsyncCtx2 + 20 | 0; //@line 17804
    HEAP32[$170 >> 2] = $12; //@line 17805
    $171 = $ReallocAsyncCtx2 + 24 | 0; //@line 17806
    HEAP32[$171 >> 2] = $14; //@line 17807
    $172 = $ReallocAsyncCtx2 + 28 | 0; //@line 17808
    HEAP32[$172 >> 2] = $16; //@line 17809
    $173 = $ReallocAsyncCtx2 + 32 | 0; //@line 17810
    HEAP32[$173 >> 2] = $18; //@line 17811
    $174 = $ReallocAsyncCtx2 + 36 | 0; //@line 17812
    HEAP32[$174 >> 2] = $20; //@line 17813
    $175 = $ReallocAsyncCtx2 + 40 | 0; //@line 17814
    HEAP32[$175 >> 2] = $22; //@line 17815
    $176 = $ReallocAsyncCtx2 + 44 | 0; //@line 17816
    HEAP32[$176 >> 2] = $24; //@line 17817
    sp = STACKTOP; //@line 17818
    return;
   }
   ___async_unwind = 0; //@line 17821
   HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 17822
   $166 = $ReallocAsyncCtx2 + 4 | 0; //@line 17823
   HEAP32[$166 >> 2] = $6; //@line 17824
   $167 = $ReallocAsyncCtx2 + 8 | 0; //@line 17825
   HEAP32[$167 >> 2] = $4; //@line 17826
   $168 = $ReallocAsyncCtx2 + 12 | 0; //@line 17827
   HEAP32[$168 >> 2] = $8; //@line 17828
   $169 = $ReallocAsyncCtx2 + 16 | 0; //@line 17829
   HEAP32[$169 >> 2] = $10; //@line 17830
   $170 = $ReallocAsyncCtx2 + 20 | 0; //@line 17831
   HEAP32[$170 >> 2] = $12; //@line 17832
   $171 = $ReallocAsyncCtx2 + 24 | 0; //@line 17833
   HEAP32[$171 >> 2] = $14; //@line 17834
   $172 = $ReallocAsyncCtx2 + 28 | 0; //@line 17835
   HEAP32[$172 >> 2] = $16; //@line 17836
   $173 = $ReallocAsyncCtx2 + 32 | 0; //@line 17837
   HEAP32[$173 >> 2] = $18; //@line 17838
   $174 = $ReallocAsyncCtx2 + 36 | 0; //@line 17839
   HEAP32[$174 >> 2] = $20; //@line 17840
   $175 = $ReallocAsyncCtx2 + 40 | 0; //@line 17841
   HEAP32[$175 >> 2] = $22; //@line 17842
   $176 = $ReallocAsyncCtx2 + 44 | 0; //@line 17843
   HEAP32[$176 >> 2] = $24; //@line 17844
   sp = STACKTOP; //@line 17845
   return;
  }
 }
 if ($140 & 8) {
  HEAP8[$6 >> 0] = $140 & -9; //@line 17853
  $181 = HEAP32[$4 + 1324 >> 2] | 0; //@line 17855
  $182 = $181 + 32 | 0; //@line 17856
  $184 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 17858
  $185 = $181 + 44 | 0; //@line 17859
  $186 = HEAP32[$185 >> 2] | 0; //@line 17860
  if (!$186) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 17863
   _mbed_assert_internal(15061, 15066, 1102); //@line 17864
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 17867
    $188 = $ReallocAsyncCtx17 + 4 | 0; //@line 17868
    HEAP32[$188 >> 2] = $6; //@line 17869
    $189 = $ReallocAsyncCtx17 + 8 | 0; //@line 17870
    HEAP32[$189 >> 2] = $4; //@line 17871
    $190 = $ReallocAsyncCtx17 + 12 | 0; //@line 17872
    HEAP32[$190 >> 2] = $182; //@line 17873
    $191 = $ReallocAsyncCtx17 + 16 | 0; //@line 17874
    HEAP32[$191 >> 2] = $184; //@line 17875
    $192 = $ReallocAsyncCtx17 + 20 | 0; //@line 17876
    HEAP32[$192 >> 2] = $8; //@line 17877
    $193 = $ReallocAsyncCtx17 + 24 | 0; //@line 17878
    HEAP32[$193 >> 2] = $10; //@line 17879
    $194 = $ReallocAsyncCtx17 + 28 | 0; //@line 17880
    HEAP32[$194 >> 2] = $12; //@line 17881
    $195 = $ReallocAsyncCtx17 + 32 | 0; //@line 17882
    HEAP32[$195 >> 2] = $14; //@line 17883
    $196 = $ReallocAsyncCtx17 + 36 | 0; //@line 17884
    HEAP32[$196 >> 2] = $16; //@line 17885
    $197 = $ReallocAsyncCtx17 + 40 | 0; //@line 17886
    HEAP32[$197 >> 2] = $18; //@line 17887
    $198 = $ReallocAsyncCtx17 + 44 | 0; //@line 17888
    HEAP32[$198 >> 2] = $20; //@line 17889
    $199 = $ReallocAsyncCtx17 + 48 | 0; //@line 17890
    HEAP32[$199 >> 2] = $22; //@line 17891
    $200 = $ReallocAsyncCtx17 + 52 | 0; //@line 17892
    HEAP32[$200 >> 2] = $24; //@line 17893
    $201 = $ReallocAsyncCtx17 + 56 | 0; //@line 17894
    HEAP32[$201 >> 2] = $185; //@line 17895
    sp = STACKTOP; //@line 17896
    return;
   }
   ___async_unwind = 0; //@line 17899
   HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 17900
   $188 = $ReallocAsyncCtx17 + 4 | 0; //@line 17901
   HEAP32[$188 >> 2] = $6; //@line 17902
   $189 = $ReallocAsyncCtx17 + 8 | 0; //@line 17903
   HEAP32[$189 >> 2] = $4; //@line 17904
   $190 = $ReallocAsyncCtx17 + 12 | 0; //@line 17905
   HEAP32[$190 >> 2] = $182; //@line 17906
   $191 = $ReallocAsyncCtx17 + 16 | 0; //@line 17907
   HEAP32[$191 >> 2] = $184; //@line 17908
   $192 = $ReallocAsyncCtx17 + 20 | 0; //@line 17909
   HEAP32[$192 >> 2] = $8; //@line 17910
   $193 = $ReallocAsyncCtx17 + 24 | 0; //@line 17911
   HEAP32[$193 >> 2] = $10; //@line 17912
   $194 = $ReallocAsyncCtx17 + 28 | 0; //@line 17913
   HEAP32[$194 >> 2] = $12; //@line 17914
   $195 = $ReallocAsyncCtx17 + 32 | 0; //@line 17915
   HEAP32[$195 >> 2] = $14; //@line 17916
   $196 = $ReallocAsyncCtx17 + 36 | 0; //@line 17917
   HEAP32[$196 >> 2] = $16; //@line 17918
   $197 = $ReallocAsyncCtx17 + 40 | 0; //@line 17919
   HEAP32[$197 >> 2] = $18; //@line 17920
   $198 = $ReallocAsyncCtx17 + 44 | 0; //@line 17921
   HEAP32[$198 >> 2] = $20; //@line 17922
   $199 = $ReallocAsyncCtx17 + 48 | 0; //@line 17923
   HEAP32[$199 >> 2] = $22; //@line 17924
   $200 = $ReallocAsyncCtx17 + 52 | 0; //@line 17925
   HEAP32[$200 >> 2] = $24; //@line 17926
   $201 = $ReallocAsyncCtx17 + 56 | 0; //@line 17927
   HEAP32[$201 >> 2] = $185; //@line 17928
   sp = STACKTOP; //@line 17929
   return;
  } else {
   $202 = HEAP32[$186 >> 2] | 0; //@line 17932
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 17933
   FUNCTION_TABLE_vii[$202 & 31]($182, $184); //@line 17934
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 17937
    $203 = $ReallocAsyncCtx3 + 4 | 0; //@line 17938
    HEAP32[$203 >> 2] = $4; //@line 17939
    $204 = $ReallocAsyncCtx3 + 8 | 0; //@line 17940
    HEAP32[$204 >> 2] = $6; //@line 17941
    $205 = $ReallocAsyncCtx3 + 12 | 0; //@line 17942
    HEAP32[$205 >> 2] = $8; //@line 17943
    $206 = $ReallocAsyncCtx3 + 16 | 0; //@line 17944
    HEAP32[$206 >> 2] = $10; //@line 17945
    $207 = $ReallocAsyncCtx3 + 20 | 0; //@line 17946
    HEAP32[$207 >> 2] = $12; //@line 17947
    $208 = $ReallocAsyncCtx3 + 24 | 0; //@line 17948
    HEAP32[$208 >> 2] = $14; //@line 17949
    $209 = $ReallocAsyncCtx3 + 28 | 0; //@line 17950
    HEAP32[$209 >> 2] = $16; //@line 17951
    $210 = $ReallocAsyncCtx3 + 32 | 0; //@line 17952
    HEAP32[$210 >> 2] = $18; //@line 17953
    $211 = $ReallocAsyncCtx3 + 36 | 0; //@line 17954
    HEAP32[$211 >> 2] = $20; //@line 17955
    $212 = $ReallocAsyncCtx3 + 40 | 0; //@line 17956
    HEAP32[$212 >> 2] = $22; //@line 17957
    $213 = $ReallocAsyncCtx3 + 44 | 0; //@line 17958
    HEAP32[$213 >> 2] = $24; //@line 17959
    sp = STACKTOP; //@line 17960
    return;
   }
   ___async_unwind = 0; //@line 17963
   HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 17964
   $203 = $ReallocAsyncCtx3 + 4 | 0; //@line 17965
   HEAP32[$203 >> 2] = $4; //@line 17966
   $204 = $ReallocAsyncCtx3 + 8 | 0; //@line 17967
   HEAP32[$204 >> 2] = $6; //@line 17968
   $205 = $ReallocAsyncCtx3 + 12 | 0; //@line 17969
   HEAP32[$205 >> 2] = $8; //@line 17970
   $206 = $ReallocAsyncCtx3 + 16 | 0; //@line 17971
   HEAP32[$206 >> 2] = $10; //@line 17972
   $207 = $ReallocAsyncCtx3 + 20 | 0; //@line 17973
   HEAP32[$207 >> 2] = $12; //@line 17974
   $208 = $ReallocAsyncCtx3 + 24 | 0; //@line 17975
   HEAP32[$208 >> 2] = $14; //@line 17976
   $209 = $ReallocAsyncCtx3 + 28 | 0; //@line 17977
   HEAP32[$209 >> 2] = $16; //@line 17978
   $210 = $ReallocAsyncCtx3 + 32 | 0; //@line 17979
   HEAP32[$210 >> 2] = $18; //@line 17980
   $211 = $ReallocAsyncCtx3 + 36 | 0; //@line 17981
   HEAP32[$211 >> 2] = $20; //@line 17982
   $212 = $ReallocAsyncCtx3 + 40 | 0; //@line 17983
   HEAP32[$212 >> 2] = $22; //@line 17984
   $213 = $ReallocAsyncCtx3 + 44 | 0; //@line 17985
   HEAP32[$213 >> 2] = $24; //@line 17986
   sp = STACKTOP; //@line 17987
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(12967, $8) | 0; //@line 17994
  _printf(13114, $12) | 0; //@line 17995
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 17996
  _putchar(10) | 0; //@line 17997
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 18000
   $216 = $ReallocAsyncCtx7 + 4 | 0; //@line 18001
   HEAP32[$216 >> 2] = $4; //@line 18002
   $217 = $ReallocAsyncCtx7 + 8 | 0; //@line 18003
   HEAP32[$217 >> 2] = $6; //@line 18004
   $218 = $ReallocAsyncCtx7 + 12 | 0; //@line 18005
   HEAP32[$218 >> 2] = $16; //@line 18006
   $219 = $ReallocAsyncCtx7 + 16 | 0; //@line 18007
   HEAP32[$219 >> 2] = $18; //@line 18008
   $220 = $ReallocAsyncCtx7 + 20 | 0; //@line 18009
   HEAP32[$220 >> 2] = $20; //@line 18010
   $221 = $ReallocAsyncCtx7 + 24 | 0; //@line 18011
   HEAP32[$221 >> 2] = $22; //@line 18012
   $222 = $ReallocAsyncCtx7 + 28 | 0; //@line 18013
   HEAP32[$222 >> 2] = $24; //@line 18014
   sp = STACKTOP; //@line 18015
   return;
  }
  ___async_unwind = 0; //@line 18018
  HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 18019
  $216 = $ReallocAsyncCtx7 + 4 | 0; //@line 18020
  HEAP32[$216 >> 2] = $4; //@line 18021
  $217 = $ReallocAsyncCtx7 + 8 | 0; //@line 18022
  HEAP32[$217 >> 2] = $6; //@line 18023
  $218 = $ReallocAsyncCtx7 + 12 | 0; //@line 18024
  HEAP32[$218 >> 2] = $16; //@line 18025
  $219 = $ReallocAsyncCtx7 + 16 | 0; //@line 18026
  HEAP32[$219 >> 2] = $18; //@line 18027
  $220 = $ReallocAsyncCtx7 + 20 | 0; //@line 18028
  HEAP32[$220 >> 2] = $20; //@line 18029
  $221 = $ReallocAsyncCtx7 + 24 | 0; //@line 18030
  HEAP32[$221 >> 2] = $22; //@line 18031
  $222 = $ReallocAsyncCtx7 + 28 | 0; //@line 18032
  HEAP32[$222 >> 2] = $24; //@line 18033
  sp = STACKTOP; //@line 18034
  return;
 }
 $223 = HEAP8[$6 >> 0] & -33; //@line 18038
 HEAP8[$6 >> 0] = $223; //@line 18039
 do {
  if (!($223 & 2)) {
   $262 = $223; //@line 18044
  } else {
   $234 = $223 & -3; //@line 18046
   HEAP8[$6 >> 0] = $234; //@line 18047
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12967, $18) | 0; //@line 18052
    _printf(12994, $22) | 0; //@line 18053
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 18054
    _putchar(10) | 0; //@line 18055
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 18058
     $238 = $ReallocAsyncCtx6 + 4 | 0; //@line 18059
     HEAP32[$238 >> 2] = $6; //@line 18060
     $239 = $ReallocAsyncCtx6 + 8 | 0; //@line 18061
     HEAP32[$239 >> 2] = $16; //@line 18062
     $240 = $ReallocAsyncCtx6 + 12 | 0; //@line 18063
     HEAP32[$240 >> 2] = $4; //@line 18064
     $241 = $ReallocAsyncCtx6 + 16 | 0; //@line 18065
     HEAP32[$241 >> 2] = $16; //@line 18066
     sp = STACKTOP; //@line 18067
     return;
    }
    ___async_unwind = 0; //@line 18070
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 18071
    $238 = $ReallocAsyncCtx6 + 4 | 0; //@line 18072
    HEAP32[$238 >> 2] = $6; //@line 18073
    $239 = $ReallocAsyncCtx6 + 8 | 0; //@line 18074
    HEAP32[$239 >> 2] = $16; //@line 18075
    $240 = $ReallocAsyncCtx6 + 12 | 0; //@line 18076
    HEAP32[$240 >> 2] = $4; //@line 18077
    $241 = $ReallocAsyncCtx6 + 16 | 0; //@line 18078
    HEAP32[$241 >> 2] = $16; //@line 18079
    sp = STACKTOP; //@line 18080
    return;
   }
   if ($234 & 4) {
    $260 = $234 & -5; //@line 18086
    HEAP8[$6 >> 0] = $260; //@line 18087
    $262 = $260; //@line 18088
    break;
   }
   $245 = HEAP32[$4 + 1324 >> 2] | 0; //@line 18092
   $246 = $245 + 16 | 0; //@line 18093
   $248 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 18095
   $249 = $245 + 28 | 0; //@line 18096
   $250 = HEAP32[$249 >> 2] | 0; //@line 18097
   if (!$250) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 18100
    _mbed_assert_internal(15061, 15066, 1102); //@line 18101
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 18104
     $252 = $ReallocAsyncCtx15 + 4 | 0; //@line 18105
     HEAP32[$252 >> 2] = $249; //@line 18106
     $253 = $ReallocAsyncCtx15 + 8 | 0; //@line 18107
     HEAP32[$253 >> 2] = $246; //@line 18108
     $254 = $ReallocAsyncCtx15 + 12 | 0; //@line 18109
     HEAP32[$254 >> 2] = $248; //@line 18110
     $255 = $ReallocAsyncCtx15 + 16 | 0; //@line 18111
     HEAP32[$255 >> 2] = $6; //@line 18112
     $256 = $ReallocAsyncCtx15 + 20 | 0; //@line 18113
     HEAP32[$256 >> 2] = $4; //@line 18114
     sp = STACKTOP; //@line 18115
     return;
    }
    ___async_unwind = 0; //@line 18118
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 18119
    $252 = $ReallocAsyncCtx15 + 4 | 0; //@line 18120
    HEAP32[$252 >> 2] = $249; //@line 18121
    $253 = $ReallocAsyncCtx15 + 8 | 0; //@line 18122
    HEAP32[$253 >> 2] = $246; //@line 18123
    $254 = $ReallocAsyncCtx15 + 12 | 0; //@line 18124
    HEAP32[$254 >> 2] = $248; //@line 18125
    $255 = $ReallocAsyncCtx15 + 16 | 0; //@line 18126
    HEAP32[$255 >> 2] = $6; //@line 18127
    $256 = $ReallocAsyncCtx15 + 20 | 0; //@line 18128
    HEAP32[$256 >> 2] = $4; //@line 18129
    sp = STACKTOP; //@line 18130
    return;
   } else {
    $257 = HEAP32[$250 >> 2] | 0; //@line 18133
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 18134
    FUNCTION_TABLE_vii[$257 & 31]($246, $248); //@line 18135
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 18138
     $258 = $ReallocAsyncCtx4 + 4 | 0; //@line 18139
     HEAP32[$258 >> 2] = $6; //@line 18140
     $259 = $ReallocAsyncCtx4 + 8 | 0; //@line 18141
     HEAP32[$259 >> 2] = $4; //@line 18142
     sp = STACKTOP; //@line 18143
     return;
    }
    ___async_unwind = 0; //@line 18146
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 18147
    $258 = $ReallocAsyncCtx4 + 4 | 0; //@line 18148
    HEAP32[$258 >> 2] = $6; //@line 18149
    $259 = $ReallocAsyncCtx4 + 8 | 0; //@line 18150
    HEAP32[$259 >> 2] = $4; //@line 18151
    sp = STACKTOP; //@line 18152
    return;
   }
  }
 } while (0);
 if (!($262 & 16)) {
  return;
 }
 HEAP8[$6 >> 0] = $262 & -17; //@line 18163
 $266 = HEAP32[$4 + 1324 >> 2] | 0; //@line 18165
 $267 = $266 + 48 | 0; //@line 18166
 $269 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 18168
 $270 = $266 + 60 | 0; //@line 18169
 $271 = HEAP32[$270 >> 2] | 0; //@line 18170
 if (!$271) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 18173
  _mbed_assert_internal(15061, 15066, 1102); //@line 18174
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 18177
   $273 = $ReallocAsyncCtx14 + 4 | 0; //@line 18178
   HEAP32[$273 >> 2] = $270; //@line 18179
   $274 = $ReallocAsyncCtx14 + 8 | 0; //@line 18180
   HEAP32[$274 >> 2] = $267; //@line 18181
   $275 = $ReallocAsyncCtx14 + 12 | 0; //@line 18182
   HEAP32[$275 >> 2] = $269; //@line 18183
   sp = STACKTOP; //@line 18184
   return;
  }
  ___async_unwind = 0; //@line 18187
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 18188
  $273 = $ReallocAsyncCtx14 + 4 | 0; //@line 18189
  HEAP32[$273 >> 2] = $270; //@line 18190
  $274 = $ReallocAsyncCtx14 + 8 | 0; //@line 18191
  HEAP32[$274 >> 2] = $267; //@line 18192
  $275 = $ReallocAsyncCtx14 + 12 | 0; //@line 18193
  HEAP32[$275 >> 2] = $269; //@line 18194
  sp = STACKTOP; //@line 18195
  return;
 } else {
  $276 = HEAP32[$271 >> 2] | 0; //@line 18198
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 18199
  FUNCTION_TABLE_vii[$276 & 31]($267, $269); //@line 18200
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 18203
   sp = STACKTOP; //@line 18204
   return;
  }
  ___async_unwind = 0; //@line 18207
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 18208
  sp = STACKTOP; //@line 18209
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy98 = 0, $$pre20 = 0, $1 = 0, $119 = 0, $124 = 0, $130 = 0, $136 = 0, $143 = 0, $144 = 0, $181 = 0, $19 = 0, $192 = 0, $196 = 0, $2 = 0, $20 = 0, $200 = 0, $205 = 0, $211 = 0, $212 = 0, $217 = 0, $221 = 0, $224 = 0, $23 = 0, $244 = 0, $252 = 0, $256 = 0, $262 = 0, $265 = 0, $268 = 0, $288 = 0, $29 = 0, $291 = 0, $297 = 0, $3 = 0, $300 = 0, $303 = 0, $305 = 0, $306 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $331 = 0, $332 = 0, $345 = 0, $349 = 0, $350 = 0, $352 = 0, $353 = 0, $354 = 0, $370 = 0, $371 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $4 = 0, $407 = 0, $409 = 0, $418 = 0, $419 = 0, $429 = 0, $43 = 0, $432 = 0, $433 = 0, $435 = 0, $436 = 0, $437 = 0, $444 = 0, $445 = 0, $448 = 0, $449 = 0, $451 = 0, $455 = 0, $456 = 0, $458 = 0, $459 = 0, $460 = 0, $465 = 0, $466 = 0, $51 = 0, $54 = 0, $59 = 0, $63 = 0, $64 = 0, $84 = 0, $85 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx36 = 0, $AsyncCtx40 = 0, $AsyncCtx44 = 0, $AsyncCtx48 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $AsyncCtx68 = 0, $AsyncCtx72 = 0, $AsyncCtx76 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14741
 STACKTOP = STACKTOP + 48 | 0; //@line 14742
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 14742
 $$byval_copy98 = sp + 40 | 0; //@line 14743
 $vararg_buffer5 = sp + 24 | 0; //@line 14744
 $vararg_buffer3 = sp + 16 | 0; //@line 14745
 $vararg_buffer1 = sp + 8 | 0; //@line 14746
 $vararg_buffer = sp; //@line 14747
 $1 = sp + 32 | 0; //@line 14748
 $2 = $0 + 356 | 0; //@line 14749
 $3 = HEAP32[$2 >> 2] | 0; //@line 14750
 $4 = $0 + 996 | 0; //@line 14751
 $AsyncCtx48 = _emscripten_alloc_async_context(60, sp) | 0; //@line 14752
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($3, $4); //@line 14753
 if (___async) {
  HEAP32[$AsyncCtx48 >> 2] = 459; //@line 14756
  HEAP32[$AsyncCtx48 + 4 >> 2] = $1; //@line 14758
  HEAP32[$AsyncCtx48 + 8 >> 2] = $0; //@line 14760
  HEAP32[$AsyncCtx48 + 12 >> 2] = $vararg_buffer; //@line 14762
  HEAP32[$AsyncCtx48 + 16 >> 2] = $vararg_buffer; //@line 14764
  HEAP32[$AsyncCtx48 + 20 >> 2] = $vararg_buffer1; //@line 14766
  HEAP32[$AsyncCtx48 + 24 >> 2] = $vararg_buffer1; //@line 14768
  HEAP32[$AsyncCtx48 + 28 >> 2] = $1; //@line 14770
  HEAP32[$AsyncCtx48 + 32 >> 2] = $vararg_buffer3; //@line 14772
  HEAP32[$AsyncCtx48 + 36 >> 2] = $vararg_buffer3; //@line 14774
  HEAP32[$AsyncCtx48 + 40 >> 2] = $vararg_buffer5; //@line 14776
  HEAP32[$AsyncCtx48 + 44 >> 2] = $vararg_buffer5; //@line 14778
  HEAP32[$AsyncCtx48 + 48 >> 2] = $2; //@line 14780
  HEAP32[$AsyncCtx48 + 52 >> 2] = $4; //@line 14782
  HEAP32[$AsyncCtx48 + 56 >> 2] = $1; //@line 14784
  sp = STACKTOP; //@line 14785
  STACKTOP = sp; //@line 14786
  return;
 }
 _emscripten_free_async_context($AsyncCtx48 | 0); //@line 14788
 $19 = $0 + 944 | 0; //@line 14789
 $20 = HEAP8[$19 >> 0] | 0; //@line 14790
 $$pre20 = $0 + 968 | 0; //@line 14793
 do {
  if ($20 & 32) {
   $23 = HEAP32[$$pre20 >> 2] | 0; //@line 14796
   if ($23 & 64 | 0) {
    HEAP32[$$pre20 >> 2] = $23 & -66; //@line 14801
   }
   do {
    if (!($20 & 9)) {
     label = 10; //@line 14807
    } else {
     $29 = $0 + 288 | 0; //@line 14809
     if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 4 >> 2] | 0) != 2) {
      if ((HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] | 0) != 2) {
       label = 10; //@line 14821
       break;
      }
     }
     HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 14827
     __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 14829
     $43 = HEAP8[$0 + 895 >> 0] | 0; //@line 14831
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 11 >> 0] = $43; //@line 14834
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 10 >> 0] = 0; //@line 14837
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 12 >> 2] = 0; //@line 14840
     $192 = $0 + 373 | 0; //@line 14842
    }
   } while (0);
   do {
    if ((label | 0) == 10) {
     $51 = $0 + 373 | 0; //@line 14847
     if (!(HEAP8[$51 >> 0] | 0)) {
      $54 = HEAP8[$19 >> 0] | 0; //@line 14851
      if (!($54 & 9)) {
       $192 = $51; //@line 14855
      } else {
       if ($54 & 8) {
        $59 = $0 + 264 | 0; //@line 14860
        if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($59) | 0) >> 2] | 0)) {
         $63 = $0 + 897 | 0; //@line 14865
         $64 = HEAP8[$63 >> 0] | 0; //@line 14866
         HEAP8[(__ZN11LoRaMacMlme16get_confirmationEv($59) | 0) + 14 >> 0] = $64; //@line 14869
         if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($59) | 0) + 4 >> 2] | 0)) {
          HEAP32[$0 + 956 >> 2] = 0; //@line 14876
          HEAP8[$0 + 380 >> 0] = 0; //@line 14878
          HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 14881
          $192 = $51; //@line 14882
          break;
         }
         if ((HEAPU8[$63 >> 0] | 0) >= (HEAPU8[$0 + 896 >> 0] | 0)) {
          HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 14892
          $192 = $51; //@line 14893
          break;
         }
         HEAP8[$19 >> 0] = HEAP8[$19 >> 0] & -33; //@line 14898
         $84 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14900
         HEAP32[$1 >> 2] = 460; //@line 14901
         HEAP32[$1 + 4 >> 2] = 0; //@line 14903
         $AsyncCtx44 = _emscripten_alloc_async_context(68, sp) | 0; //@line 14904
         HEAP32[$$byval_copy98 >> 2] = HEAP32[$1 >> 2]; //@line 14905
         HEAP32[$$byval_copy98 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14905
         $85 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($84, $0, $$byval_copy98) | 0; //@line 14906
         if (___async) {
          HEAP32[$AsyncCtx44 >> 2] = 461; //@line 14909
          HEAP32[$AsyncCtx44 + 4 >> 2] = $$pre20; //@line 14911
          HEAP32[$AsyncCtx44 + 8 >> 2] = $0; //@line 14913
          HEAP32[$AsyncCtx44 + 12 >> 2] = $19; //@line 14915
          HEAP32[$AsyncCtx44 + 16 >> 2] = $vararg_buffer; //@line 14917
          HEAP32[$AsyncCtx44 + 20 >> 2] = $vararg_buffer; //@line 14919
          HEAP32[$AsyncCtx44 + 24 >> 2] = $vararg_buffer1; //@line 14921
          HEAP32[$AsyncCtx44 + 28 >> 2] = $vararg_buffer1; //@line 14923
          HEAP32[$AsyncCtx44 + 32 >> 2] = $1; //@line 14925
          HEAP32[$AsyncCtx44 + 36 >> 2] = $vararg_buffer3; //@line 14927
          HEAP32[$AsyncCtx44 + 40 >> 2] = $vararg_buffer3; //@line 14929
          HEAP32[$AsyncCtx44 + 44 >> 2] = $vararg_buffer5; //@line 14931
          HEAP32[$AsyncCtx44 + 48 >> 2] = $vararg_buffer5; //@line 14933
          HEAP32[$AsyncCtx44 + 52 >> 2] = $2; //@line 14935
          HEAP32[$AsyncCtx44 + 56 >> 2] = $4; //@line 14937
          HEAP32[$AsyncCtx44 + 60 >> 2] = $1; //@line 14939
          HEAP32[$AsyncCtx44 + 64 >> 2] = $51; //@line 14941
          sp = STACKTOP; //@line 14942
          STACKTOP = sp; //@line 14943
          return;
         }
         _emscripten_free_async_context($AsyncCtx44 | 0); //@line 14945
         do {
          if (!$85) {
           $AsyncCtx76 = _emscripten_alloc_async_context(68, sp) | 0; //@line 14949
           _mbed_assert_internal(12851, 12860, 194); //@line 14950
           if (___async) {
            HEAP32[$AsyncCtx76 >> 2] = 462; //@line 14953
            HEAP32[$AsyncCtx76 + 4 >> 2] = $$pre20; //@line 14955
            HEAP32[$AsyncCtx76 + 8 >> 2] = $0; //@line 14957
            HEAP32[$AsyncCtx76 + 12 >> 2] = $19; //@line 14959
            HEAP32[$AsyncCtx76 + 16 >> 2] = $vararg_buffer; //@line 14961
            HEAP32[$AsyncCtx76 + 20 >> 2] = $vararg_buffer; //@line 14963
            HEAP32[$AsyncCtx76 + 24 >> 2] = $vararg_buffer1; //@line 14965
            HEAP32[$AsyncCtx76 + 28 >> 2] = $vararg_buffer1; //@line 14967
            HEAP32[$AsyncCtx76 + 32 >> 2] = $1; //@line 14969
            HEAP32[$AsyncCtx76 + 36 >> 2] = $vararg_buffer3; //@line 14971
            HEAP32[$AsyncCtx76 + 40 >> 2] = $vararg_buffer3; //@line 14973
            HEAP32[$AsyncCtx76 + 44 >> 2] = $vararg_buffer5; //@line 14975
            HEAP32[$AsyncCtx76 + 48 >> 2] = $vararg_buffer5; //@line 14977
            HEAP32[$AsyncCtx76 + 52 >> 2] = $2; //@line 14979
            HEAP32[$AsyncCtx76 + 56 >> 2] = $4; //@line 14981
            HEAP32[$AsyncCtx76 + 60 >> 2] = $1; //@line 14983
            HEAP32[$AsyncCtx76 + 64 >> 2] = $51; //@line 14985
            sp = STACKTOP; //@line 14986
            STACKTOP = sp; //@line 14987
            return;
           } else {
            _emscripten_free_async_context($AsyncCtx76 | 0); //@line 14989
            break;
           }
          }
         } while (0);
         $192 = $51; //@line 14994
         break;
        }
       }
       $119 = $0 + 380 | 0; //@line 14998
       $124 = HEAP8[$19 >> 0] | 0; //@line 15003
       if (!(($124 & 2) == 0 ? (HEAPU8[$119 >> 0] | 0) < (HEAPU8[$0 + 1128 >> 0] | 0) : 0)) {
        if (!($124 & 2)) {
         __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 15012
         $130 = $0 + 964 | 0; //@line 15013
         HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 1; //@line 15016
        }
        HEAP8[$119 >> 0] = 0; //@line 15018
        if (!(HEAP8[$0 + 370 >> 0] | 0)) {
         $136 = $0 + 956 | 0; //@line 15023
         HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + 1; //@line 15026
        }
        HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 15030
        $192 = $51; //@line 15031
        break;
       }
       HEAP8[$19 >> 0] = $124 & -33; //@line 15035
       $143 = HEAP32[$0 + 1328 >> 2] | 0; //@line 15037
       HEAP32[$1 >> 2] = 460; //@line 15038
       HEAP32[$1 + 4 >> 2] = 0; //@line 15040
       $AsyncCtx40 = _emscripten_alloc_async_context(68, sp) | 0; //@line 15041
       HEAP32[$$byval_copy98 >> 2] = HEAP32[$1 >> 2]; //@line 15042
       HEAP32[$$byval_copy98 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 15042
       $144 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($143, $0, $$byval_copy98) | 0; //@line 15043
       if (___async) {
        HEAP32[$AsyncCtx40 >> 2] = 463; //@line 15046
        HEAP32[$AsyncCtx40 + 4 >> 2] = $$pre20; //@line 15048
        HEAP32[$AsyncCtx40 + 8 >> 2] = $0; //@line 15050
        HEAP32[$AsyncCtx40 + 12 >> 2] = $19; //@line 15052
        HEAP32[$AsyncCtx40 + 16 >> 2] = $vararg_buffer; //@line 15054
        HEAP32[$AsyncCtx40 + 20 >> 2] = $vararg_buffer; //@line 15056
        HEAP32[$AsyncCtx40 + 24 >> 2] = $vararg_buffer1; //@line 15058
        HEAP32[$AsyncCtx40 + 28 >> 2] = $vararg_buffer1; //@line 15060
        HEAP32[$AsyncCtx40 + 32 >> 2] = $1; //@line 15062
        HEAP32[$AsyncCtx40 + 36 >> 2] = $vararg_buffer3; //@line 15064
        HEAP32[$AsyncCtx40 + 40 >> 2] = $vararg_buffer3; //@line 15066
        HEAP32[$AsyncCtx40 + 44 >> 2] = $vararg_buffer5; //@line 15068
        HEAP32[$AsyncCtx40 + 48 >> 2] = $vararg_buffer5; //@line 15070
        HEAP32[$AsyncCtx40 + 52 >> 2] = $2; //@line 15072
        HEAP32[$AsyncCtx40 + 56 >> 2] = $4; //@line 15074
        HEAP32[$AsyncCtx40 + 60 >> 2] = $51; //@line 15076
        HEAP32[$AsyncCtx40 + 64 >> 2] = $1; //@line 15078
        sp = STACKTOP; //@line 15079
        STACKTOP = sp; //@line 15080
        return;
       }
       _emscripten_free_async_context($AsyncCtx40 | 0); //@line 15082
       do {
        if (!$144) {
         $AsyncCtx72 = _emscripten_alloc_async_context(68, sp) | 0; //@line 15086
         _mbed_assert_internal(12851, 12860, 194); //@line 15087
         if (___async) {
          HEAP32[$AsyncCtx72 >> 2] = 464; //@line 15090
          HEAP32[$AsyncCtx72 + 4 >> 2] = $$pre20; //@line 15092
          HEAP32[$AsyncCtx72 + 8 >> 2] = $0; //@line 15094
          HEAP32[$AsyncCtx72 + 12 >> 2] = $19; //@line 15096
          HEAP32[$AsyncCtx72 + 16 >> 2] = $1; //@line 15098
          HEAP32[$AsyncCtx72 + 20 >> 2] = $vararg_buffer3; //@line 15100
          HEAP32[$AsyncCtx72 + 24 >> 2] = $vararg_buffer3; //@line 15102
          HEAP32[$AsyncCtx72 + 28 >> 2] = $vararg_buffer5; //@line 15104
          HEAP32[$AsyncCtx72 + 32 >> 2] = $vararg_buffer5; //@line 15106
          HEAP32[$AsyncCtx72 + 36 >> 2] = $vararg_buffer; //@line 15108
          HEAP32[$AsyncCtx72 + 40 >> 2] = $vararg_buffer; //@line 15110
          HEAP32[$AsyncCtx72 + 44 >> 2] = $vararg_buffer1; //@line 15112
          HEAP32[$AsyncCtx72 + 48 >> 2] = $vararg_buffer1; //@line 15114
          HEAP32[$AsyncCtx72 + 52 >> 2] = $2; //@line 15116
          HEAP32[$AsyncCtx72 + 56 >> 2] = $4; //@line 15118
          HEAP32[$AsyncCtx72 + 60 >> 2] = $51; //@line 15120
          HEAP32[$AsyncCtx72 + 64 >> 2] = $1; //@line 15122
          sp = STACKTOP; //@line 15123
          STACKTOP = sp; //@line 15124
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx72 | 0); //@line 15126
          break;
         }
        }
       } while (0);
       $192 = $51; //@line 15131
      }
     } else {
      $192 = $51; //@line 15134
     }
    }
   } while (0);
   do {
    if (HEAP8[$19 >> 0] & 2) {
     $181 = $0 + 288 | 0; //@line 15143
     if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($181) | 0) + 10 >> 0] | 0)) {
      if ((HEAPU8[$0 + 895 >> 0] | 0) <= (HEAPU8[$0 + 894 >> 0] | 0)) {
       break;
      }
     }
     HEAP8[$0 + 377 >> 0] = 0; //@line 15159
     HEAP8[$192 >> 0] = 0; //@line 15160
     if (!(HEAP8[$0 + 370 >> 0] | 0)) {
      $196 = $0 + 956 | 0; //@line 15165
      HEAP32[$196 >> 2] = (HEAP32[$196 >> 2] | 0) + 1; //@line 15168
     }
     $200 = HEAP8[$0 + 895 >> 0] | 0; //@line 15171
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($181) | 0) + 11 >> 0] = $200; //@line 15174
     HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 15177
    }
   } while (0);
   $205 = $0 + 377 | 0; //@line 15180
   if (HEAP8[$205 >> 0] | 0) {
    if (!(HEAP32[$$pre20 >> 2] & 16)) {
     HEAP8[$205 >> 0] = 0; //@line 15188
     $211 = $0 + 895 | 0; //@line 15189
     $212 = HEAP8[$211 >> 0] | 0; //@line 15190
     if (!(($212 & 255) < 9 ? ($212 & 255) < (HEAPU8[$0 + 894 >> 0] | 0) : 0)) {
      $265 = HEAP32[$0 >> 2] | 0; //@line 15197
      $268 = HEAP32[(HEAP32[$265 >> 2] | 0) + 16 >> 2] | 0; //@line 15200
      $AsyncCtx = _emscripten_alloc_async_context(68, sp) | 0; //@line 15201
      FUNCTION_TABLE_vi[$268 & 1023]($265); //@line 15202
      if (___async) {
       HEAP32[$AsyncCtx >> 2] = 466; //@line 15205
       HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 15207
       HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 15209
       HEAP32[$AsyncCtx + 12 >> 2] = $$pre20; //@line 15211
       HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 15213
       HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 15215
       HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer1; //@line 15217
       HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer1; //@line 15219
       HEAP32[$AsyncCtx + 32 >> 2] = $1; //@line 15221
       HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer3; //@line 15223
       HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer3; //@line 15225
       HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer5; //@line 15227
       HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer5; //@line 15229
       HEAP32[$AsyncCtx + 52 >> 2] = $2; //@line 15231
       HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 15233
       HEAP32[$AsyncCtx + 60 >> 2] = $192; //@line 15235
       HEAP32[$AsyncCtx + 64 >> 2] = $211; //@line 15237
       sp = STACKTOP; //@line 15238
       STACKTOP = sp; //@line 15239
       return;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 15241
      HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 15244
      __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 15246
      HEAP8[$192 >> 0] = 0; //@line 15247
      $288 = $0 + 288 | 0; //@line 15248
      HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($288) | 0) + 10 >> 0] = 0; //@line 15251
      $291 = HEAP8[$211 >> 0] | 0; //@line 15252
      HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($288) | 0) + 11 >> 0] = $291; //@line 15255
      if (HEAP8[$0 + 370 >> 0] | 0) {
       break;
      }
      $297 = $0 + 956 | 0; //@line 15262
      HEAP32[$297 >> 2] = (HEAP32[$297 >> 2] | 0) + 1; //@line 15265
      break;
     }
     $217 = $212 + 1 << 24 >> 24; //@line 15268
     HEAP8[$211 >> 0] = $217; //@line 15269
     if ($217 & 1) {
      $221 = $0 + 1097 | 0; //@line 15274
      HEAP8[$221 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$0 >> 2] | 0, HEAP8[$221 >> 0] | 0) | 0; //@line 15277
     }
     $AsyncCtx33 = _emscripten_alloc_async_context(68, sp) | 0; //@line 15279
     $224 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 15280
     if (___async) {
      HEAP32[$AsyncCtx33 >> 2] = 465; //@line 15283
      HEAP32[$AsyncCtx33 + 4 >> 2] = $19; //@line 15285
      HEAP32[$AsyncCtx33 + 8 >> 2] = $0; //@line 15287
      HEAP32[$AsyncCtx33 + 12 >> 2] = $$pre20; //@line 15289
      HEAP32[$AsyncCtx33 + 16 >> 2] = $vararg_buffer; //@line 15291
      HEAP32[$AsyncCtx33 + 20 >> 2] = $vararg_buffer; //@line 15293
      HEAP32[$AsyncCtx33 + 24 >> 2] = $vararg_buffer1; //@line 15295
      HEAP32[$AsyncCtx33 + 28 >> 2] = $vararg_buffer1; //@line 15297
      HEAP32[$AsyncCtx33 + 32 >> 2] = $1; //@line 15299
      HEAP32[$AsyncCtx33 + 36 >> 2] = $vararg_buffer3; //@line 15301
      HEAP32[$AsyncCtx33 + 40 >> 2] = $vararg_buffer3; //@line 15303
      HEAP32[$AsyncCtx33 + 44 >> 2] = $vararg_buffer5; //@line 15305
      HEAP32[$AsyncCtx33 + 48 >> 2] = $vararg_buffer5; //@line 15307
      HEAP32[$AsyncCtx33 + 52 >> 2] = $2; //@line 15309
      HEAP32[$AsyncCtx33 + 56 >> 2] = $4; //@line 15311
      HEAP32[$AsyncCtx33 + 60 >> 2] = $192; //@line 15313
      HEAP32[$AsyncCtx33 + 64 >> 2] = $211; //@line 15315
      sp = STACKTOP; //@line 15316
      STACKTOP = sp; //@line 15317
      return;
     }
     _emscripten_free_async_context($AsyncCtx33 | 0); //@line 15319
     if (!$224) {
      HEAP8[$19 >> 0] = HEAP8[$19 >> 0] & -33; //@line 15324
      break;
     }
     $244 = $0 + 288 | 0; //@line 15327
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($244) | 0) + 4 >> 2] = 9; //@line 15330
     __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 15332
     HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 15335
     HEAP8[$192 >> 0] = 0; //@line 15336
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($244) | 0) + 10 >> 0] = 0; //@line 15339
     $252 = HEAP8[$211 >> 0] | 0; //@line 15340
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($244) | 0) + 11 >> 0] = $252; //@line 15343
     $256 = HEAP8[$0 + 1097 >> 0] | 0; //@line 15345
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($244) | 0) + 8 >> 0] = $256; //@line 15348
     if (!(HEAP8[$0 + 370 >> 0] | 0)) {
      $262 = $0 + 956 | 0; //@line 15353
      HEAP32[$262 >> 2] = (HEAP32[$262 >> 2] | 0) + 1; //@line 15356
     }
    }
   }
  }
 } while (0);
 $300 = HEAP32[$$pre20 >> 2] | 0; //@line 15362
 $303 = $300 & -3; //@line 15365
 if (!($300 & 2)) {
  $305 = $300; //@line 15367
 } else {
  HEAP32[$$pre20 >> 2] = $303; //@line 15369
  $305 = $303; //@line 15370
 }
 do {
  if (!$305) {
   $306 = HEAP8[$19 >> 0] | 0; //@line 15375
   do {
    if (!($306 & 1)) {
     $345 = $306; //@line 15380
    } else {
     HEAP8[$19 >> 0] = $306 & -2; //@line 15383
     $311 = HEAP32[$0 + 1324 >> 2] | 0; //@line 15385
     $313 = __ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0; //@line 15387
     $314 = $311 + 12 | 0; //@line 15388
     $315 = HEAP32[$314 >> 2] | 0; //@line 15389
     do {
      if (!$315) {
       $AsyncCtx68 = _emscripten_alloc_async_context(60, sp) | 0; //@line 15393
       _mbed_assert_internal(15061, 15066, 1102); //@line 15394
       if (___async) {
        HEAP32[$AsyncCtx68 >> 2] = 467; //@line 15397
        HEAP32[$AsyncCtx68 + 4 >> 2] = $19; //@line 15399
        HEAP32[$AsyncCtx68 + 8 >> 2] = $0; //@line 15401
        HEAP32[$AsyncCtx68 + 12 >> 2] = $vararg_buffer; //@line 15403
        HEAP32[$AsyncCtx68 + 16 >> 2] = $vararg_buffer; //@line 15405
        HEAP32[$AsyncCtx68 + 20 >> 2] = $vararg_buffer1; //@line 15407
        HEAP32[$AsyncCtx68 + 24 >> 2] = $vararg_buffer1; //@line 15409
        HEAP32[$AsyncCtx68 + 28 >> 2] = $1; //@line 15411
        HEAP32[$AsyncCtx68 + 32 >> 2] = $vararg_buffer3; //@line 15413
        HEAP32[$AsyncCtx68 + 36 >> 2] = $vararg_buffer3; //@line 15415
        HEAP32[$AsyncCtx68 + 40 >> 2] = $vararg_buffer5; //@line 15417
        HEAP32[$AsyncCtx68 + 44 >> 2] = $vararg_buffer5; //@line 15419
        HEAP32[$AsyncCtx68 + 48 >> 2] = $311; //@line 15421
        HEAP32[$AsyncCtx68 + 52 >> 2] = $313; //@line 15423
        HEAP32[$AsyncCtx68 + 56 >> 2] = $314; //@line 15425
        sp = STACKTOP; //@line 15426
        STACKTOP = sp; //@line 15427
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx68 | 0); //@line 15429
        $332 = HEAP32[$314 >> 2] | 0; //@line 15431
        break;
       }
      } else {
       $332 = $315; //@line 15435
      }
     } while (0);
     $331 = HEAP32[$332 >> 2] | 0; //@line 15438
     $AsyncCtx8 = _emscripten_alloc_async_context(48, sp) | 0; //@line 15439
     FUNCTION_TABLE_vii[$331 & 31]($311, $313); //@line 15440
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 468; //@line 15443
      HEAP32[$AsyncCtx8 + 4 >> 2] = $19; //@line 15445
      HEAP32[$AsyncCtx8 + 8 >> 2] = $0; //@line 15447
      HEAP32[$AsyncCtx8 + 12 >> 2] = $vararg_buffer; //@line 15449
      HEAP32[$AsyncCtx8 + 16 >> 2] = $vararg_buffer; //@line 15451
      HEAP32[$AsyncCtx8 + 20 >> 2] = $vararg_buffer1; //@line 15453
      HEAP32[$AsyncCtx8 + 24 >> 2] = $vararg_buffer1; //@line 15455
      HEAP32[$AsyncCtx8 + 28 >> 2] = $1; //@line 15457
      HEAP32[$AsyncCtx8 + 32 >> 2] = $vararg_buffer3; //@line 15459
      HEAP32[$AsyncCtx8 + 36 >> 2] = $vararg_buffer3; //@line 15461
      HEAP32[$AsyncCtx8 + 40 >> 2] = $vararg_buffer5; //@line 15463
      HEAP32[$AsyncCtx8 + 44 >> 2] = $vararg_buffer5; //@line 15465
      sp = STACKTOP; //@line 15466
      STACKTOP = sp; //@line 15467
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 15469
      $345 = HEAP8[$19 >> 0] | 0; //@line 15471
      break;
     }
    }
   } while (0);
   do {
    if ($345 & 8) {
     HEAP8[$19 >> 0] = $345 & -9; //@line 15481
     $349 = HEAP32[$0 + 1324 >> 2] | 0; //@line 15483
     $350 = $349 + 32 | 0; //@line 15484
     $352 = __ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0; //@line 15486
     $353 = $349 + 44 | 0; //@line 15487
     $354 = HEAP32[$353 >> 2] | 0; //@line 15488
     do {
      if (!$354) {
       $AsyncCtx64 = _emscripten_alloc_async_context(60, sp) | 0; //@line 15492
       _mbed_assert_internal(15061, 15066, 1102); //@line 15493
       if (___async) {
        HEAP32[$AsyncCtx64 >> 2] = 469; //@line 15496
        HEAP32[$AsyncCtx64 + 4 >> 2] = $19; //@line 15498
        HEAP32[$AsyncCtx64 + 8 >> 2] = $0; //@line 15500
        HEAP32[$AsyncCtx64 + 12 >> 2] = $350; //@line 15502
        HEAP32[$AsyncCtx64 + 16 >> 2] = $352; //@line 15504
        HEAP32[$AsyncCtx64 + 20 >> 2] = $vararg_buffer; //@line 15506
        HEAP32[$AsyncCtx64 + 24 >> 2] = $vararg_buffer; //@line 15508
        HEAP32[$AsyncCtx64 + 28 >> 2] = $vararg_buffer1; //@line 15510
        HEAP32[$AsyncCtx64 + 32 >> 2] = $vararg_buffer1; //@line 15512
        HEAP32[$AsyncCtx64 + 36 >> 2] = $1; //@line 15514
        HEAP32[$AsyncCtx64 + 40 >> 2] = $vararg_buffer3; //@line 15516
        HEAP32[$AsyncCtx64 + 44 >> 2] = $vararg_buffer3; //@line 15518
        HEAP32[$AsyncCtx64 + 48 >> 2] = $vararg_buffer5; //@line 15520
        HEAP32[$AsyncCtx64 + 52 >> 2] = $vararg_buffer5; //@line 15522
        HEAP32[$AsyncCtx64 + 56 >> 2] = $353; //@line 15524
        sp = STACKTOP; //@line 15525
        STACKTOP = sp; //@line 15526
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx64 | 0); //@line 15528
        $371 = HEAP32[$353 >> 2] | 0; //@line 15530
        break;
       }
      } else {
       $371 = $354; //@line 15534
      }
     } while (0);
     $370 = HEAP32[$371 >> 2] | 0; //@line 15537
     $AsyncCtx11 = _emscripten_alloc_async_context(48, sp) | 0; //@line 15538
     FUNCTION_TABLE_vii[$370 & 31]($350, $352); //@line 15539
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 470; //@line 15542
      HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 15544
      HEAP32[$AsyncCtx11 + 8 >> 2] = $19; //@line 15546
      HEAP32[$AsyncCtx11 + 12 >> 2] = $vararg_buffer; //@line 15548
      HEAP32[$AsyncCtx11 + 16 >> 2] = $vararg_buffer; //@line 15550
      HEAP32[$AsyncCtx11 + 20 >> 2] = $vararg_buffer1; //@line 15552
      HEAP32[$AsyncCtx11 + 24 >> 2] = $vararg_buffer1; //@line 15554
      HEAP32[$AsyncCtx11 + 28 >> 2] = $1; //@line 15556
      HEAP32[$AsyncCtx11 + 32 >> 2] = $vararg_buffer3; //@line 15558
      HEAP32[$AsyncCtx11 + 36 >> 2] = $vararg_buffer3; //@line 15560
      HEAP32[$AsyncCtx11 + 40 >> 2] = $vararg_buffer5; //@line 15562
      HEAP32[$AsyncCtx11 + 44 >> 2] = $vararg_buffer5; //@line 15564
      sp = STACKTOP; //@line 15565
      STACKTOP = sp; //@line 15566
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15568
      break;
     }
    }
   } while (0);
   do {
    if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($0 + 4 | 0) | 0) {
     _printf(12967, $vararg_buffer) | 0; //@line 15577
     _printf(13114, $vararg_buffer1) | 0; //@line 15578
     $AsyncCtx25 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15579
     _putchar(10) | 0; //@line 15580
     if (___async) {
      HEAP32[$AsyncCtx25 >> 2] = 471; //@line 15583
      HEAP32[$AsyncCtx25 + 4 >> 2] = $0; //@line 15585
      HEAP32[$AsyncCtx25 + 8 >> 2] = $19; //@line 15587
      HEAP32[$AsyncCtx25 + 12 >> 2] = $1; //@line 15589
      HEAP32[$AsyncCtx25 + 16 >> 2] = $vararg_buffer3; //@line 15591
      HEAP32[$AsyncCtx25 + 20 >> 2] = $vararg_buffer3; //@line 15593
      HEAP32[$AsyncCtx25 + 24 >> 2] = $vararg_buffer5; //@line 15595
      HEAP32[$AsyncCtx25 + 28 >> 2] = $vararg_buffer5; //@line 15597
      sp = STACKTOP; //@line 15598
      STACKTOP = sp; //@line 15599
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx25 | 0); //@line 15601
      HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($0 + 264 | 0) | 0) >> 2] = 4; //@line 15604
      $395 = HEAP8[$19 >> 0] | 16; //@line 15606
      HEAP8[$19 >> 0] = $395; //@line 15607
      $397 = $395; //@line 15608
      break;
     }
    } else {
     $397 = HEAP8[$19 >> 0] | 0; //@line 15613
    }
   } while (0);
   $396 = $397 & -33; //@line 15616
   HEAP8[$19 >> 0] = $396; //@line 15617
   $407 = $396; //@line 15618
  } else {
   $398 = HEAP32[$2 >> 2] | 0; //@line 15620
   $AsyncCtx29 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15621
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($398, $4, 1e3); //@line 15622
   if (___async) {
    HEAP32[$AsyncCtx29 >> 2] = 472; //@line 15625
    HEAP32[$AsyncCtx29 + 4 >> 2] = $19; //@line 15627
    HEAP32[$AsyncCtx29 + 8 >> 2] = $0; //@line 15629
    HEAP32[$AsyncCtx29 + 12 >> 2] = $1; //@line 15631
    HEAP32[$AsyncCtx29 + 16 >> 2] = $vararg_buffer3; //@line 15633
    HEAP32[$AsyncCtx29 + 20 >> 2] = $vararg_buffer3; //@line 15635
    HEAP32[$AsyncCtx29 + 24 >> 2] = $vararg_buffer5; //@line 15637
    HEAP32[$AsyncCtx29 + 28 >> 2] = $vararg_buffer5; //@line 15639
    sp = STACKTOP; //@line 15640
    STACKTOP = sp; //@line 15641
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx29 | 0); //@line 15643
    $407 = HEAP8[$19 >> 0] | 0; //@line 15645
    break;
   }
  }
 } while (0);
 if (!($407 & 2)) {
  $451 = $407; //@line 15653
 } else {
  $409 = $407 & -3; //@line 15655
  HEAP8[$19 >> 0] = $409; //@line 15656
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   _printf(12967, $vararg_buffer3) | 0; //@line 15661
   _printf(12994, $vararg_buffer5) | 0; //@line 15662
   $AsyncCtx21 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15663
   _putchar(10) | 0; //@line 15664
   if (___async) {
    HEAP32[$AsyncCtx21 >> 2] = 473; //@line 15667
    HEAP32[$AsyncCtx21 + 4 >> 2] = $19; //@line 15669
    HEAP32[$AsyncCtx21 + 8 >> 2] = $1; //@line 15671
    HEAP32[$AsyncCtx21 + 12 >> 2] = $0; //@line 15673
    HEAP32[$AsyncCtx21 + 16 >> 2] = $1; //@line 15675
    sp = STACKTOP; //@line 15676
    STACKTOP = sp; //@line 15677
    return;
   }
   _emscripten_free_async_context($AsyncCtx21 | 0); //@line 15679
   $418 = HEAP32[$0 + 1328 >> 2] | 0; //@line 15681
   HEAP32[$1 >> 2] = 361; //@line 15682
   HEAP32[$1 + 4 >> 2] = 0; //@line 15684
   $AsyncCtx36 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15685
   HEAP32[$$byval_copy98 >> 2] = HEAP32[$1 >> 2]; //@line 15686
   HEAP32[$$byval_copy98 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 15686
   $419 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($418, $0, $$byval_copy98) | 0; //@line 15687
   if (___async) {
    HEAP32[$AsyncCtx36 >> 2] = 474; //@line 15690
    HEAP32[$AsyncCtx36 + 4 >> 2] = $19; //@line 15692
    HEAP32[$AsyncCtx36 + 8 >> 2] = $1; //@line 15694
    HEAP32[$AsyncCtx36 + 12 >> 2] = $0; //@line 15696
    sp = STACKTOP; //@line 15697
    STACKTOP = sp; //@line 15698
    return;
   }
   _emscripten_free_async_context($AsyncCtx36 | 0); //@line 15700
   do {
    if (!$419) {
     $AsyncCtx60 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15704
     _mbed_assert_internal(12851, 12860, 217); //@line 15705
     if (___async) {
      HEAP32[$AsyncCtx60 >> 2] = 475; //@line 15708
      HEAP32[$AsyncCtx60 + 4 >> 2] = $19; //@line 15710
      HEAP32[$AsyncCtx60 + 8 >> 2] = $1; //@line 15712
      HEAP32[$AsyncCtx60 + 12 >> 2] = $0; //@line 15714
      sp = STACKTOP; //@line 15715
      STACKTOP = sp; //@line 15716
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx60 | 0); //@line 15718
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 15724
   $429 = HEAP8[$19 >> 0] | 0; //@line 15726
  } else {
   $429 = $409; //@line 15728
  }
  do {
   if (!($429 & 4)) {
    $432 = HEAP32[$0 + 1324 >> 2] | 0; //@line 15735
    $433 = $432 + 16 | 0; //@line 15736
    $435 = __ZN11LoRaMacMcps14get_indicationEv($0 + 288 | 0) | 0; //@line 15738
    $436 = $432 + 28 | 0; //@line 15739
    $437 = HEAP32[$436 >> 2] | 0; //@line 15740
    do {
     if (!$437) {
      $AsyncCtx56 = _emscripten_alloc_async_context(24, sp) | 0; //@line 15744
      _mbed_assert_internal(15061, 15066, 1102); //@line 15745
      if (___async) {
       HEAP32[$AsyncCtx56 >> 2] = 476; //@line 15748
       HEAP32[$AsyncCtx56 + 4 >> 2] = $436; //@line 15750
       HEAP32[$AsyncCtx56 + 8 >> 2] = $433; //@line 15752
       HEAP32[$AsyncCtx56 + 12 >> 2] = $435; //@line 15754
       HEAP32[$AsyncCtx56 + 16 >> 2] = $19; //@line 15756
       HEAP32[$AsyncCtx56 + 20 >> 2] = $0; //@line 15758
       sp = STACKTOP; //@line 15759
       STACKTOP = sp; //@line 15760
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx56 | 0); //@line 15762
       $445 = HEAP32[$436 >> 2] | 0; //@line 15764
       break;
      }
     } else {
      $445 = $437; //@line 15768
     }
    } while (0);
    $444 = HEAP32[$445 >> 2] | 0; //@line 15771
    $AsyncCtx14 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15772
    FUNCTION_TABLE_vii[$444 & 31]($433, $435); //@line 15773
    if (___async) {
     HEAP32[$AsyncCtx14 >> 2] = 477; //@line 15776
     HEAP32[$AsyncCtx14 + 4 >> 2] = $19; //@line 15778
     HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 15780
     sp = STACKTOP; //@line 15781
     STACKTOP = sp; //@line 15782
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx14 | 0); //@line 15784
     $449 = HEAP8[$19 >> 0] | 0; //@line 15786
     break;
    }
   } else {
    $449 = $429; //@line 15790
   }
  } while (0);
  $448 = $449 & -5; //@line 15793
  HEAP8[$19 >> 0] = $448; //@line 15794
  $451 = $448; //@line 15795
 }
 if (!($451 & 16)) {
  STACKTOP = sp; //@line 15800
  return;
 }
 HEAP8[$19 >> 0] = $451 & -17; //@line 15803
 $455 = HEAP32[$0 + 1324 >> 2] | 0; //@line 15805
 $456 = $455 + 48 | 0; //@line 15806
 $458 = __ZN11LoRaMacMlme14get_indicationEv($0 + 264 | 0) | 0; //@line 15808
 $459 = $455 + 60 | 0; //@line 15809
 $460 = HEAP32[$459 >> 2] | 0; //@line 15810
 do {
  if (!$460) {
   $AsyncCtx52 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15814
   _mbed_assert_internal(15061, 15066, 1102); //@line 15815
   if (___async) {
    HEAP32[$AsyncCtx52 >> 2] = 478; //@line 15818
    HEAP32[$AsyncCtx52 + 4 >> 2] = $459; //@line 15820
    HEAP32[$AsyncCtx52 + 8 >> 2] = $456; //@line 15822
    HEAP32[$AsyncCtx52 + 12 >> 2] = $458; //@line 15824
    sp = STACKTOP; //@line 15825
    STACKTOP = sp; //@line 15826
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx52 | 0); //@line 15828
    $466 = HEAP32[$459 >> 2] | 0; //@line 15830
    break;
   }
  } else {
   $466 = $460; //@line 15834
  }
 } while (0);
 $465 = HEAP32[$466 >> 2] | 0; //@line 15837
 $AsyncCtx17 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15838
 FUNCTION_TABLE_vii[$465 & 31]($456, $458); //@line 15839
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 479; //@line 15842
  sp = STACKTOP; //@line 15843
  STACKTOP = sp; //@line 15844
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 15846
 STACKTOP = sp; //@line 15847
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_326($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $127 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $216 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $227 = 0, $228 = 0, $230 = 0, $231 = 0, $232 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $244 = 0, $248 = 0, $249 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $28 = 0, $32 = 0, $36 = 0, $4 = 0, $50 = 0, $54 = 0, $59 = 0, $6 = 0, $65 = 0, $66 = 0, $71 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 21496
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21498
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21500
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21502
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21504
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21506
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21508
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21510
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21512
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21514
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21516
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21518
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21520
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21522
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21524
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 21528
 do {
  if (HEAP8[$6 >> 0] & 2) {
   $36 = $4 + 288 | 0; //@line 21534
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 21550
   HEAP8[$32 >> 0] = 0; //@line 21551
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $50 = $4 + 956 | 0; //@line 21556
    HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + 1; //@line 21559
   }
   $54 = HEAP8[$4 + 895 >> 0] | 0; //@line 21562
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 11 >> 0] = $54; //@line 21565
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] & -2; //@line 21568
  }
 } while (0);
 $59 = $4 + 377 | 0; //@line 21571
 if (HEAP8[$59 >> 0] | 0) {
  if (!(HEAP32[$2 >> 2] & 16)) {
   HEAP8[$59 >> 0] = 0; //@line 21579
   $65 = $4 + 895 | 0; //@line 21580
   $66 = HEAP8[$65 >> 0] | 0; //@line 21581
   if (!(($66 & 255) < 9 ? ($66 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $96 = HEAP32[$4 >> 2] | 0; //@line 21588
    $99 = HEAP32[(HEAP32[$96 >> 2] | 0) + 16 >> 2] | 0; //@line 21591
    $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 21592
    FUNCTION_TABLE_vi[$99 & 1023]($96); //@line 21593
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 466; //@line 21596
     $100 = $ReallocAsyncCtx + 4 | 0; //@line 21597
     HEAP32[$100 >> 2] = $6; //@line 21598
     $101 = $ReallocAsyncCtx + 8 | 0; //@line 21599
     HEAP32[$101 >> 2] = $4; //@line 21600
     $102 = $ReallocAsyncCtx + 12 | 0; //@line 21601
     HEAP32[$102 >> 2] = $2; //@line 21602
     $103 = $ReallocAsyncCtx + 16 | 0; //@line 21603
     HEAP32[$103 >> 2] = $8; //@line 21604
     $104 = $ReallocAsyncCtx + 20 | 0; //@line 21605
     HEAP32[$104 >> 2] = $10; //@line 21606
     $105 = $ReallocAsyncCtx + 24 | 0; //@line 21607
     HEAP32[$105 >> 2] = $12; //@line 21608
     $106 = $ReallocAsyncCtx + 28 | 0; //@line 21609
     HEAP32[$106 >> 2] = $14; //@line 21610
     $107 = $ReallocAsyncCtx + 32 | 0; //@line 21611
     HEAP32[$107 >> 2] = $16; //@line 21612
     $108 = $ReallocAsyncCtx + 36 | 0; //@line 21613
     HEAP32[$108 >> 2] = $18; //@line 21614
     $109 = $ReallocAsyncCtx + 40 | 0; //@line 21615
     HEAP32[$109 >> 2] = $20; //@line 21616
     $110 = $ReallocAsyncCtx + 44 | 0; //@line 21617
     HEAP32[$110 >> 2] = $22; //@line 21618
     $111 = $ReallocAsyncCtx + 48 | 0; //@line 21619
     HEAP32[$111 >> 2] = $24; //@line 21620
     $112 = $ReallocAsyncCtx + 52 | 0; //@line 21621
     HEAP32[$112 >> 2] = $26; //@line 21622
     $113 = $ReallocAsyncCtx + 56 | 0; //@line 21623
     HEAP32[$113 >> 2] = $28; //@line 21624
     $114 = $ReallocAsyncCtx + 60 | 0; //@line 21625
     HEAP32[$114 >> 2] = $32; //@line 21626
     $115 = $ReallocAsyncCtx + 64 | 0; //@line 21627
     HEAP32[$115 >> 2] = $65; //@line 21628
     sp = STACKTOP; //@line 21629
     return;
    }
    ___async_unwind = 0; //@line 21632
    HEAP32[$ReallocAsyncCtx >> 2] = 466; //@line 21633
    $100 = $ReallocAsyncCtx + 4 | 0; //@line 21634
    HEAP32[$100 >> 2] = $6; //@line 21635
    $101 = $ReallocAsyncCtx + 8 | 0; //@line 21636
    HEAP32[$101 >> 2] = $4; //@line 21637
    $102 = $ReallocAsyncCtx + 12 | 0; //@line 21638
    HEAP32[$102 >> 2] = $2; //@line 21639
    $103 = $ReallocAsyncCtx + 16 | 0; //@line 21640
    HEAP32[$103 >> 2] = $8; //@line 21641
    $104 = $ReallocAsyncCtx + 20 | 0; //@line 21642
    HEAP32[$104 >> 2] = $10; //@line 21643
    $105 = $ReallocAsyncCtx + 24 | 0; //@line 21644
    HEAP32[$105 >> 2] = $12; //@line 21645
    $106 = $ReallocAsyncCtx + 28 | 0; //@line 21646
    HEAP32[$106 >> 2] = $14; //@line 21647
    $107 = $ReallocAsyncCtx + 32 | 0; //@line 21648
    HEAP32[$107 >> 2] = $16; //@line 21649
    $108 = $ReallocAsyncCtx + 36 | 0; //@line 21650
    HEAP32[$108 >> 2] = $18; //@line 21651
    $109 = $ReallocAsyncCtx + 40 | 0; //@line 21652
    HEAP32[$109 >> 2] = $20; //@line 21653
    $110 = $ReallocAsyncCtx + 44 | 0; //@line 21654
    HEAP32[$110 >> 2] = $22; //@line 21655
    $111 = $ReallocAsyncCtx + 48 | 0; //@line 21656
    HEAP32[$111 >> 2] = $24; //@line 21657
    $112 = $ReallocAsyncCtx + 52 | 0; //@line 21658
    HEAP32[$112 >> 2] = $26; //@line 21659
    $113 = $ReallocAsyncCtx + 56 | 0; //@line 21660
    HEAP32[$113 >> 2] = $28; //@line 21661
    $114 = $ReallocAsyncCtx + 60 | 0; //@line 21662
    HEAP32[$114 >> 2] = $32; //@line 21663
    $115 = $ReallocAsyncCtx + 64 | 0; //@line 21664
    HEAP32[$115 >> 2] = $65; //@line 21665
    sp = STACKTOP; //@line 21666
    return;
   }
   $71 = $66 + 1 << 24 >> 24; //@line 21669
   HEAP8[$65 >> 0] = $71; //@line 21670
   if ($71 & 1) {
    $75 = $4 + 1097 | 0; //@line 21675
    HEAP8[$75 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$75 >> 0] | 0) | 0; //@line 21678
   }
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 21680
   $78 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 21681
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 465; //@line 21684
    $79 = $ReallocAsyncCtx9 + 4 | 0; //@line 21685
    HEAP32[$79 >> 2] = $6; //@line 21686
    $80 = $ReallocAsyncCtx9 + 8 | 0; //@line 21687
    HEAP32[$80 >> 2] = $4; //@line 21688
    $81 = $ReallocAsyncCtx9 + 12 | 0; //@line 21689
    HEAP32[$81 >> 2] = $2; //@line 21690
    $82 = $ReallocAsyncCtx9 + 16 | 0; //@line 21691
    HEAP32[$82 >> 2] = $8; //@line 21692
    $83 = $ReallocAsyncCtx9 + 20 | 0; //@line 21693
    HEAP32[$83 >> 2] = $10; //@line 21694
    $84 = $ReallocAsyncCtx9 + 24 | 0; //@line 21695
    HEAP32[$84 >> 2] = $12; //@line 21696
    $85 = $ReallocAsyncCtx9 + 28 | 0; //@line 21697
    HEAP32[$85 >> 2] = $14; //@line 21698
    $86 = $ReallocAsyncCtx9 + 32 | 0; //@line 21699
    HEAP32[$86 >> 2] = $16; //@line 21700
    $87 = $ReallocAsyncCtx9 + 36 | 0; //@line 21701
    HEAP32[$87 >> 2] = $18; //@line 21702
    $88 = $ReallocAsyncCtx9 + 40 | 0; //@line 21703
    HEAP32[$88 >> 2] = $20; //@line 21704
    $89 = $ReallocAsyncCtx9 + 44 | 0; //@line 21705
    HEAP32[$89 >> 2] = $22; //@line 21706
    $90 = $ReallocAsyncCtx9 + 48 | 0; //@line 21707
    HEAP32[$90 >> 2] = $24; //@line 21708
    $91 = $ReallocAsyncCtx9 + 52 | 0; //@line 21709
    HEAP32[$91 >> 2] = $26; //@line 21710
    $92 = $ReallocAsyncCtx9 + 56 | 0; //@line 21711
    HEAP32[$92 >> 2] = $28; //@line 21712
    $93 = $ReallocAsyncCtx9 + 60 | 0; //@line 21713
    HEAP32[$93 >> 2] = $32; //@line 21714
    $94 = $ReallocAsyncCtx9 + 64 | 0; //@line 21715
    HEAP32[$94 >> 2] = $65; //@line 21716
    sp = STACKTOP; //@line 21717
    return;
   }
   HEAP32[___async_retval >> 2] = $78; //@line 21721
   ___async_unwind = 0; //@line 21722
   HEAP32[$ReallocAsyncCtx9 >> 2] = 465; //@line 21723
   $79 = $ReallocAsyncCtx9 + 4 | 0; //@line 21724
   HEAP32[$79 >> 2] = $6; //@line 21725
   $80 = $ReallocAsyncCtx9 + 8 | 0; //@line 21726
   HEAP32[$80 >> 2] = $4; //@line 21727
   $81 = $ReallocAsyncCtx9 + 12 | 0; //@line 21728
   HEAP32[$81 >> 2] = $2; //@line 21729
   $82 = $ReallocAsyncCtx9 + 16 | 0; //@line 21730
   HEAP32[$82 >> 2] = $8; //@line 21731
   $83 = $ReallocAsyncCtx9 + 20 | 0; //@line 21732
   HEAP32[$83 >> 2] = $10; //@line 21733
   $84 = $ReallocAsyncCtx9 + 24 | 0; //@line 21734
   HEAP32[$84 >> 2] = $12; //@line 21735
   $85 = $ReallocAsyncCtx9 + 28 | 0; //@line 21736
   HEAP32[$85 >> 2] = $14; //@line 21737
   $86 = $ReallocAsyncCtx9 + 32 | 0; //@line 21738
   HEAP32[$86 >> 2] = $16; //@line 21739
   $87 = $ReallocAsyncCtx9 + 36 | 0; //@line 21740
   HEAP32[$87 >> 2] = $18; //@line 21741
   $88 = $ReallocAsyncCtx9 + 40 | 0; //@line 21742
   HEAP32[$88 >> 2] = $20; //@line 21743
   $89 = $ReallocAsyncCtx9 + 44 | 0; //@line 21744
   HEAP32[$89 >> 2] = $22; //@line 21745
   $90 = $ReallocAsyncCtx9 + 48 | 0; //@line 21746
   HEAP32[$90 >> 2] = $24; //@line 21747
   $91 = $ReallocAsyncCtx9 + 52 | 0; //@line 21748
   HEAP32[$91 >> 2] = $26; //@line 21749
   $92 = $ReallocAsyncCtx9 + 56 | 0; //@line 21750
   HEAP32[$92 >> 2] = $28; //@line 21751
   $93 = $ReallocAsyncCtx9 + 60 | 0; //@line 21752
   HEAP32[$93 >> 2] = $32; //@line 21753
   $94 = $ReallocAsyncCtx9 + 64 | 0; //@line 21754
   HEAP32[$94 >> 2] = $65; //@line 21755
   sp = STACKTOP; //@line 21756
   return;
  }
 }
 $116 = HEAP32[$2 >> 2] | 0; //@line 21760
 $119 = $116 & -3; //@line 21763
 if (!($116 & 2)) {
  $121 = $116; //@line 21765
 } else {
  HEAP32[$2 >> 2] = $119; //@line 21767
  $121 = $119; //@line 21768
 }
 if ($121 | 0) {
  $206 = HEAP32[$26 >> 2] | 0; //@line 21772
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 21773
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($206, $28, 1e3); //@line 21774
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 21777
   $207 = $ReallocAsyncCtx8 + 4 | 0; //@line 21778
   HEAP32[$207 >> 2] = $6; //@line 21779
   $208 = $ReallocAsyncCtx8 + 8 | 0; //@line 21780
   HEAP32[$208 >> 2] = $4; //@line 21781
   $209 = $ReallocAsyncCtx8 + 12 | 0; //@line 21782
   HEAP32[$209 >> 2] = $16; //@line 21783
   $210 = $ReallocAsyncCtx8 + 16 | 0; //@line 21784
   HEAP32[$210 >> 2] = $18; //@line 21785
   $211 = $ReallocAsyncCtx8 + 20 | 0; //@line 21786
   HEAP32[$211 >> 2] = $20; //@line 21787
   $212 = $ReallocAsyncCtx8 + 24 | 0; //@line 21788
   HEAP32[$212 >> 2] = $22; //@line 21789
   $213 = $ReallocAsyncCtx8 + 28 | 0; //@line 21790
   HEAP32[$213 >> 2] = $24; //@line 21791
   sp = STACKTOP; //@line 21792
   return;
  }
  ___async_unwind = 0; //@line 21795
  HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 21796
  $207 = $ReallocAsyncCtx8 + 4 | 0; //@line 21797
  HEAP32[$207 >> 2] = $6; //@line 21798
  $208 = $ReallocAsyncCtx8 + 8 | 0; //@line 21799
  HEAP32[$208 >> 2] = $4; //@line 21800
  $209 = $ReallocAsyncCtx8 + 12 | 0; //@line 21801
  HEAP32[$209 >> 2] = $16; //@line 21802
  $210 = $ReallocAsyncCtx8 + 16 | 0; //@line 21803
  HEAP32[$210 >> 2] = $18; //@line 21804
  $211 = $ReallocAsyncCtx8 + 20 | 0; //@line 21805
  HEAP32[$211 >> 2] = $20; //@line 21806
  $212 = $ReallocAsyncCtx8 + 24 | 0; //@line 21807
  HEAP32[$212 >> 2] = $22; //@line 21808
  $213 = $ReallocAsyncCtx8 + 28 | 0; //@line 21809
  HEAP32[$213 >> 2] = $24; //@line 21810
  sp = STACKTOP; //@line 21811
  return;
 }
 $122 = HEAP8[$6 >> 0] | 0; //@line 21814
 if ($122 & 1) {
  HEAP8[$6 >> 0] = $122 & -2; //@line 21819
  $127 = HEAP32[$4 + 1324 >> 2] | 0; //@line 21821
  $129 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 21823
  $130 = $127 + 12 | 0; //@line 21824
  $131 = HEAP32[$130 >> 2] | 0; //@line 21825
  if (!$131) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 21828
   _mbed_assert_internal(15061, 15066, 1102); //@line 21829
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 21832
    $133 = $ReallocAsyncCtx18 + 4 | 0; //@line 21833
    HEAP32[$133 >> 2] = $6; //@line 21834
    $134 = $ReallocAsyncCtx18 + 8 | 0; //@line 21835
    HEAP32[$134 >> 2] = $4; //@line 21836
    $135 = $ReallocAsyncCtx18 + 12 | 0; //@line 21837
    HEAP32[$135 >> 2] = $8; //@line 21838
    $136 = $ReallocAsyncCtx18 + 16 | 0; //@line 21839
    HEAP32[$136 >> 2] = $10; //@line 21840
    $137 = $ReallocAsyncCtx18 + 20 | 0; //@line 21841
    HEAP32[$137 >> 2] = $12; //@line 21842
    $138 = $ReallocAsyncCtx18 + 24 | 0; //@line 21843
    HEAP32[$138 >> 2] = $14; //@line 21844
    $139 = $ReallocAsyncCtx18 + 28 | 0; //@line 21845
    HEAP32[$139 >> 2] = $16; //@line 21846
    $140 = $ReallocAsyncCtx18 + 32 | 0; //@line 21847
    HEAP32[$140 >> 2] = $18; //@line 21848
    $141 = $ReallocAsyncCtx18 + 36 | 0; //@line 21849
    HEAP32[$141 >> 2] = $20; //@line 21850
    $142 = $ReallocAsyncCtx18 + 40 | 0; //@line 21851
    HEAP32[$142 >> 2] = $22; //@line 21852
    $143 = $ReallocAsyncCtx18 + 44 | 0; //@line 21853
    HEAP32[$143 >> 2] = $24; //@line 21854
    $144 = $ReallocAsyncCtx18 + 48 | 0; //@line 21855
    HEAP32[$144 >> 2] = $127; //@line 21856
    $145 = $ReallocAsyncCtx18 + 52 | 0; //@line 21857
    HEAP32[$145 >> 2] = $129; //@line 21858
    $146 = $ReallocAsyncCtx18 + 56 | 0; //@line 21859
    HEAP32[$146 >> 2] = $130; //@line 21860
    sp = STACKTOP; //@line 21861
    return;
   }
   ___async_unwind = 0; //@line 21864
   HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 21865
   $133 = $ReallocAsyncCtx18 + 4 | 0; //@line 21866
   HEAP32[$133 >> 2] = $6; //@line 21867
   $134 = $ReallocAsyncCtx18 + 8 | 0; //@line 21868
   HEAP32[$134 >> 2] = $4; //@line 21869
   $135 = $ReallocAsyncCtx18 + 12 | 0; //@line 21870
   HEAP32[$135 >> 2] = $8; //@line 21871
   $136 = $ReallocAsyncCtx18 + 16 | 0; //@line 21872
   HEAP32[$136 >> 2] = $10; //@line 21873
   $137 = $ReallocAsyncCtx18 + 20 | 0; //@line 21874
   HEAP32[$137 >> 2] = $12; //@line 21875
   $138 = $ReallocAsyncCtx18 + 24 | 0; //@line 21876
   HEAP32[$138 >> 2] = $14; //@line 21877
   $139 = $ReallocAsyncCtx18 + 28 | 0; //@line 21878
   HEAP32[$139 >> 2] = $16; //@line 21879
   $140 = $ReallocAsyncCtx18 + 32 | 0; //@line 21880
   HEAP32[$140 >> 2] = $18; //@line 21881
   $141 = $ReallocAsyncCtx18 + 36 | 0; //@line 21882
   HEAP32[$141 >> 2] = $20; //@line 21883
   $142 = $ReallocAsyncCtx18 + 40 | 0; //@line 21884
   HEAP32[$142 >> 2] = $22; //@line 21885
   $143 = $ReallocAsyncCtx18 + 44 | 0; //@line 21886
   HEAP32[$143 >> 2] = $24; //@line 21887
   $144 = $ReallocAsyncCtx18 + 48 | 0; //@line 21888
   HEAP32[$144 >> 2] = $127; //@line 21889
   $145 = $ReallocAsyncCtx18 + 52 | 0; //@line 21890
   HEAP32[$145 >> 2] = $129; //@line 21891
   $146 = $ReallocAsyncCtx18 + 56 | 0; //@line 21892
   HEAP32[$146 >> 2] = $130; //@line 21893
   sp = STACKTOP; //@line 21894
   return;
  } else {
   $147 = HEAP32[$131 >> 2] | 0; //@line 21897
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 21898
   FUNCTION_TABLE_vii[$147 & 31]($127, $129); //@line 21899
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 21902
    $148 = $ReallocAsyncCtx2 + 4 | 0; //@line 21903
    HEAP32[$148 >> 2] = $6; //@line 21904
    $149 = $ReallocAsyncCtx2 + 8 | 0; //@line 21905
    HEAP32[$149 >> 2] = $4; //@line 21906
    $150 = $ReallocAsyncCtx2 + 12 | 0; //@line 21907
    HEAP32[$150 >> 2] = $8; //@line 21908
    $151 = $ReallocAsyncCtx2 + 16 | 0; //@line 21909
    HEAP32[$151 >> 2] = $10; //@line 21910
    $152 = $ReallocAsyncCtx2 + 20 | 0; //@line 21911
    HEAP32[$152 >> 2] = $12; //@line 21912
    $153 = $ReallocAsyncCtx2 + 24 | 0; //@line 21913
    HEAP32[$153 >> 2] = $14; //@line 21914
    $154 = $ReallocAsyncCtx2 + 28 | 0; //@line 21915
    HEAP32[$154 >> 2] = $16; //@line 21916
    $155 = $ReallocAsyncCtx2 + 32 | 0; //@line 21917
    HEAP32[$155 >> 2] = $18; //@line 21918
    $156 = $ReallocAsyncCtx2 + 36 | 0; //@line 21919
    HEAP32[$156 >> 2] = $20; //@line 21920
    $157 = $ReallocAsyncCtx2 + 40 | 0; //@line 21921
    HEAP32[$157 >> 2] = $22; //@line 21922
    $158 = $ReallocAsyncCtx2 + 44 | 0; //@line 21923
    HEAP32[$158 >> 2] = $24; //@line 21924
    sp = STACKTOP; //@line 21925
    return;
   }
   ___async_unwind = 0; //@line 21928
   HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 21929
   $148 = $ReallocAsyncCtx2 + 4 | 0; //@line 21930
   HEAP32[$148 >> 2] = $6; //@line 21931
   $149 = $ReallocAsyncCtx2 + 8 | 0; //@line 21932
   HEAP32[$149 >> 2] = $4; //@line 21933
   $150 = $ReallocAsyncCtx2 + 12 | 0; //@line 21934
   HEAP32[$150 >> 2] = $8; //@line 21935
   $151 = $ReallocAsyncCtx2 + 16 | 0; //@line 21936
   HEAP32[$151 >> 2] = $10; //@line 21937
   $152 = $ReallocAsyncCtx2 + 20 | 0; //@line 21938
   HEAP32[$152 >> 2] = $12; //@line 21939
   $153 = $ReallocAsyncCtx2 + 24 | 0; //@line 21940
   HEAP32[$153 >> 2] = $14; //@line 21941
   $154 = $ReallocAsyncCtx2 + 28 | 0; //@line 21942
   HEAP32[$154 >> 2] = $16; //@line 21943
   $155 = $ReallocAsyncCtx2 + 32 | 0; //@line 21944
   HEAP32[$155 >> 2] = $18; //@line 21945
   $156 = $ReallocAsyncCtx2 + 36 | 0; //@line 21946
   HEAP32[$156 >> 2] = $20; //@line 21947
   $157 = $ReallocAsyncCtx2 + 40 | 0; //@line 21948
   HEAP32[$157 >> 2] = $22; //@line 21949
   $158 = $ReallocAsyncCtx2 + 44 | 0; //@line 21950
   HEAP32[$158 >> 2] = $24; //@line 21951
   sp = STACKTOP; //@line 21952
   return;
  }
 }
 if ($122 & 8) {
  HEAP8[$6 >> 0] = $122 & -9; //@line 21960
  $163 = HEAP32[$4 + 1324 >> 2] | 0; //@line 21962
  $164 = $163 + 32 | 0; //@line 21963
  $166 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 21965
  $167 = $163 + 44 | 0; //@line 21966
  $168 = HEAP32[$167 >> 2] | 0; //@line 21967
  if (!$168) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 21970
   _mbed_assert_internal(15061, 15066, 1102); //@line 21971
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 21974
    $170 = $ReallocAsyncCtx17 + 4 | 0; //@line 21975
    HEAP32[$170 >> 2] = $6; //@line 21976
    $171 = $ReallocAsyncCtx17 + 8 | 0; //@line 21977
    HEAP32[$171 >> 2] = $4; //@line 21978
    $172 = $ReallocAsyncCtx17 + 12 | 0; //@line 21979
    HEAP32[$172 >> 2] = $164; //@line 21980
    $173 = $ReallocAsyncCtx17 + 16 | 0; //@line 21981
    HEAP32[$173 >> 2] = $166; //@line 21982
    $174 = $ReallocAsyncCtx17 + 20 | 0; //@line 21983
    HEAP32[$174 >> 2] = $8; //@line 21984
    $175 = $ReallocAsyncCtx17 + 24 | 0; //@line 21985
    HEAP32[$175 >> 2] = $10; //@line 21986
    $176 = $ReallocAsyncCtx17 + 28 | 0; //@line 21987
    HEAP32[$176 >> 2] = $12; //@line 21988
    $177 = $ReallocAsyncCtx17 + 32 | 0; //@line 21989
    HEAP32[$177 >> 2] = $14; //@line 21990
    $178 = $ReallocAsyncCtx17 + 36 | 0; //@line 21991
    HEAP32[$178 >> 2] = $16; //@line 21992
    $179 = $ReallocAsyncCtx17 + 40 | 0; //@line 21993
    HEAP32[$179 >> 2] = $18; //@line 21994
    $180 = $ReallocAsyncCtx17 + 44 | 0; //@line 21995
    HEAP32[$180 >> 2] = $20; //@line 21996
    $181 = $ReallocAsyncCtx17 + 48 | 0; //@line 21997
    HEAP32[$181 >> 2] = $22; //@line 21998
    $182 = $ReallocAsyncCtx17 + 52 | 0; //@line 21999
    HEAP32[$182 >> 2] = $24; //@line 22000
    $183 = $ReallocAsyncCtx17 + 56 | 0; //@line 22001
    HEAP32[$183 >> 2] = $167; //@line 22002
    sp = STACKTOP; //@line 22003
    return;
   }
   ___async_unwind = 0; //@line 22006
   HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 22007
   $170 = $ReallocAsyncCtx17 + 4 | 0; //@line 22008
   HEAP32[$170 >> 2] = $6; //@line 22009
   $171 = $ReallocAsyncCtx17 + 8 | 0; //@line 22010
   HEAP32[$171 >> 2] = $4; //@line 22011
   $172 = $ReallocAsyncCtx17 + 12 | 0; //@line 22012
   HEAP32[$172 >> 2] = $164; //@line 22013
   $173 = $ReallocAsyncCtx17 + 16 | 0; //@line 22014
   HEAP32[$173 >> 2] = $166; //@line 22015
   $174 = $ReallocAsyncCtx17 + 20 | 0; //@line 22016
   HEAP32[$174 >> 2] = $8; //@line 22017
   $175 = $ReallocAsyncCtx17 + 24 | 0; //@line 22018
   HEAP32[$175 >> 2] = $10; //@line 22019
   $176 = $ReallocAsyncCtx17 + 28 | 0; //@line 22020
   HEAP32[$176 >> 2] = $12; //@line 22021
   $177 = $ReallocAsyncCtx17 + 32 | 0; //@line 22022
   HEAP32[$177 >> 2] = $14; //@line 22023
   $178 = $ReallocAsyncCtx17 + 36 | 0; //@line 22024
   HEAP32[$178 >> 2] = $16; //@line 22025
   $179 = $ReallocAsyncCtx17 + 40 | 0; //@line 22026
   HEAP32[$179 >> 2] = $18; //@line 22027
   $180 = $ReallocAsyncCtx17 + 44 | 0; //@line 22028
   HEAP32[$180 >> 2] = $20; //@line 22029
   $181 = $ReallocAsyncCtx17 + 48 | 0; //@line 22030
   HEAP32[$181 >> 2] = $22; //@line 22031
   $182 = $ReallocAsyncCtx17 + 52 | 0; //@line 22032
   HEAP32[$182 >> 2] = $24; //@line 22033
   $183 = $ReallocAsyncCtx17 + 56 | 0; //@line 22034
   HEAP32[$183 >> 2] = $167; //@line 22035
   sp = STACKTOP; //@line 22036
   return;
  } else {
   $184 = HEAP32[$168 >> 2] | 0; //@line 22039
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 22040
   FUNCTION_TABLE_vii[$184 & 31]($164, $166); //@line 22041
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 22044
    $185 = $ReallocAsyncCtx3 + 4 | 0; //@line 22045
    HEAP32[$185 >> 2] = $4; //@line 22046
    $186 = $ReallocAsyncCtx3 + 8 | 0; //@line 22047
    HEAP32[$186 >> 2] = $6; //@line 22048
    $187 = $ReallocAsyncCtx3 + 12 | 0; //@line 22049
    HEAP32[$187 >> 2] = $8; //@line 22050
    $188 = $ReallocAsyncCtx3 + 16 | 0; //@line 22051
    HEAP32[$188 >> 2] = $10; //@line 22052
    $189 = $ReallocAsyncCtx3 + 20 | 0; //@line 22053
    HEAP32[$189 >> 2] = $12; //@line 22054
    $190 = $ReallocAsyncCtx3 + 24 | 0; //@line 22055
    HEAP32[$190 >> 2] = $14; //@line 22056
    $191 = $ReallocAsyncCtx3 + 28 | 0; //@line 22057
    HEAP32[$191 >> 2] = $16; //@line 22058
    $192 = $ReallocAsyncCtx3 + 32 | 0; //@line 22059
    HEAP32[$192 >> 2] = $18; //@line 22060
    $193 = $ReallocAsyncCtx3 + 36 | 0; //@line 22061
    HEAP32[$193 >> 2] = $20; //@line 22062
    $194 = $ReallocAsyncCtx3 + 40 | 0; //@line 22063
    HEAP32[$194 >> 2] = $22; //@line 22064
    $195 = $ReallocAsyncCtx3 + 44 | 0; //@line 22065
    HEAP32[$195 >> 2] = $24; //@line 22066
    sp = STACKTOP; //@line 22067
    return;
   }
   ___async_unwind = 0; //@line 22070
   HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 22071
   $185 = $ReallocAsyncCtx3 + 4 | 0; //@line 22072
   HEAP32[$185 >> 2] = $4; //@line 22073
   $186 = $ReallocAsyncCtx3 + 8 | 0; //@line 22074
   HEAP32[$186 >> 2] = $6; //@line 22075
   $187 = $ReallocAsyncCtx3 + 12 | 0; //@line 22076
   HEAP32[$187 >> 2] = $8; //@line 22077
   $188 = $ReallocAsyncCtx3 + 16 | 0; //@line 22078
   HEAP32[$188 >> 2] = $10; //@line 22079
   $189 = $ReallocAsyncCtx3 + 20 | 0; //@line 22080
   HEAP32[$189 >> 2] = $12; //@line 22081
   $190 = $ReallocAsyncCtx3 + 24 | 0; //@line 22082
   HEAP32[$190 >> 2] = $14; //@line 22083
   $191 = $ReallocAsyncCtx3 + 28 | 0; //@line 22084
   HEAP32[$191 >> 2] = $16; //@line 22085
   $192 = $ReallocAsyncCtx3 + 32 | 0; //@line 22086
   HEAP32[$192 >> 2] = $18; //@line 22087
   $193 = $ReallocAsyncCtx3 + 36 | 0; //@line 22088
   HEAP32[$193 >> 2] = $20; //@line 22089
   $194 = $ReallocAsyncCtx3 + 40 | 0; //@line 22090
   HEAP32[$194 >> 2] = $22; //@line 22091
   $195 = $ReallocAsyncCtx3 + 44 | 0; //@line 22092
   HEAP32[$195 >> 2] = $24; //@line 22093
   sp = STACKTOP; //@line 22094
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(12967, $8) | 0; //@line 22101
  _printf(13114, $12) | 0; //@line 22102
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 22103
  _putchar(10) | 0; //@line 22104
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 22107
   $198 = $ReallocAsyncCtx7 + 4 | 0; //@line 22108
   HEAP32[$198 >> 2] = $4; //@line 22109
   $199 = $ReallocAsyncCtx7 + 8 | 0; //@line 22110
   HEAP32[$199 >> 2] = $6; //@line 22111
   $200 = $ReallocAsyncCtx7 + 12 | 0; //@line 22112
   HEAP32[$200 >> 2] = $16; //@line 22113
   $201 = $ReallocAsyncCtx7 + 16 | 0; //@line 22114
   HEAP32[$201 >> 2] = $18; //@line 22115
   $202 = $ReallocAsyncCtx7 + 20 | 0; //@line 22116
   HEAP32[$202 >> 2] = $20; //@line 22117
   $203 = $ReallocAsyncCtx7 + 24 | 0; //@line 22118
   HEAP32[$203 >> 2] = $22; //@line 22119
   $204 = $ReallocAsyncCtx7 + 28 | 0; //@line 22120
   HEAP32[$204 >> 2] = $24; //@line 22121
   sp = STACKTOP; //@line 22122
   return;
  }
  ___async_unwind = 0; //@line 22125
  HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 22126
  $198 = $ReallocAsyncCtx7 + 4 | 0; //@line 22127
  HEAP32[$198 >> 2] = $4; //@line 22128
  $199 = $ReallocAsyncCtx7 + 8 | 0; //@line 22129
  HEAP32[$199 >> 2] = $6; //@line 22130
  $200 = $ReallocAsyncCtx7 + 12 | 0; //@line 22131
  HEAP32[$200 >> 2] = $16; //@line 22132
  $201 = $ReallocAsyncCtx7 + 16 | 0; //@line 22133
  HEAP32[$201 >> 2] = $18; //@line 22134
  $202 = $ReallocAsyncCtx7 + 20 | 0; //@line 22135
  HEAP32[$202 >> 2] = $20; //@line 22136
  $203 = $ReallocAsyncCtx7 + 24 | 0; //@line 22137
  HEAP32[$203 >> 2] = $22; //@line 22138
  $204 = $ReallocAsyncCtx7 + 28 | 0; //@line 22139
  HEAP32[$204 >> 2] = $24; //@line 22140
  sp = STACKTOP; //@line 22141
  return;
 }
 $205 = HEAP8[$6 >> 0] & -33; //@line 22145
 HEAP8[$6 >> 0] = $205; //@line 22146
 do {
  if (!($205 & 2)) {
   $244 = $205; //@line 22151
  } else {
   $216 = $205 & -3; //@line 22153
   HEAP8[$6 >> 0] = $216; //@line 22154
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12967, $18) | 0; //@line 22159
    _printf(12994, $22) | 0; //@line 22160
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 22161
    _putchar(10) | 0; //@line 22162
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 22165
     $220 = $ReallocAsyncCtx6 + 4 | 0; //@line 22166
     HEAP32[$220 >> 2] = $6; //@line 22167
     $221 = $ReallocAsyncCtx6 + 8 | 0; //@line 22168
     HEAP32[$221 >> 2] = $16; //@line 22169
     $222 = $ReallocAsyncCtx6 + 12 | 0; //@line 22170
     HEAP32[$222 >> 2] = $4; //@line 22171
     $223 = $ReallocAsyncCtx6 + 16 | 0; //@line 22172
     HEAP32[$223 >> 2] = $16; //@line 22173
     sp = STACKTOP; //@line 22174
     return;
    }
    ___async_unwind = 0; //@line 22177
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 22178
    $220 = $ReallocAsyncCtx6 + 4 | 0; //@line 22179
    HEAP32[$220 >> 2] = $6; //@line 22180
    $221 = $ReallocAsyncCtx6 + 8 | 0; //@line 22181
    HEAP32[$221 >> 2] = $16; //@line 22182
    $222 = $ReallocAsyncCtx6 + 12 | 0; //@line 22183
    HEAP32[$222 >> 2] = $4; //@line 22184
    $223 = $ReallocAsyncCtx6 + 16 | 0; //@line 22185
    HEAP32[$223 >> 2] = $16; //@line 22186
    sp = STACKTOP; //@line 22187
    return;
   }
   if ($216 & 4) {
    $242 = $216 & -5; //@line 22193
    HEAP8[$6 >> 0] = $242; //@line 22194
    $244 = $242; //@line 22195
    break;
   }
   $227 = HEAP32[$4 + 1324 >> 2] | 0; //@line 22199
   $228 = $227 + 16 | 0; //@line 22200
   $230 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 22202
   $231 = $227 + 28 | 0; //@line 22203
   $232 = HEAP32[$231 >> 2] | 0; //@line 22204
   if (!$232) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 22207
    _mbed_assert_internal(15061, 15066, 1102); //@line 22208
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 22211
     $234 = $ReallocAsyncCtx15 + 4 | 0; //@line 22212
     HEAP32[$234 >> 2] = $231; //@line 22213
     $235 = $ReallocAsyncCtx15 + 8 | 0; //@line 22214
     HEAP32[$235 >> 2] = $228; //@line 22215
     $236 = $ReallocAsyncCtx15 + 12 | 0; //@line 22216
     HEAP32[$236 >> 2] = $230; //@line 22217
     $237 = $ReallocAsyncCtx15 + 16 | 0; //@line 22218
     HEAP32[$237 >> 2] = $6; //@line 22219
     $238 = $ReallocAsyncCtx15 + 20 | 0; //@line 22220
     HEAP32[$238 >> 2] = $4; //@line 22221
     sp = STACKTOP; //@line 22222
     return;
    }
    ___async_unwind = 0; //@line 22225
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 22226
    $234 = $ReallocAsyncCtx15 + 4 | 0; //@line 22227
    HEAP32[$234 >> 2] = $231; //@line 22228
    $235 = $ReallocAsyncCtx15 + 8 | 0; //@line 22229
    HEAP32[$235 >> 2] = $228; //@line 22230
    $236 = $ReallocAsyncCtx15 + 12 | 0; //@line 22231
    HEAP32[$236 >> 2] = $230; //@line 22232
    $237 = $ReallocAsyncCtx15 + 16 | 0; //@line 22233
    HEAP32[$237 >> 2] = $6; //@line 22234
    $238 = $ReallocAsyncCtx15 + 20 | 0; //@line 22235
    HEAP32[$238 >> 2] = $4; //@line 22236
    sp = STACKTOP; //@line 22237
    return;
   } else {
    $239 = HEAP32[$232 >> 2] | 0; //@line 22240
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 22241
    FUNCTION_TABLE_vii[$239 & 31]($228, $230); //@line 22242
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 22245
     $240 = $ReallocAsyncCtx4 + 4 | 0; //@line 22246
     HEAP32[$240 >> 2] = $6; //@line 22247
     $241 = $ReallocAsyncCtx4 + 8 | 0; //@line 22248
     HEAP32[$241 >> 2] = $4; //@line 22249
     sp = STACKTOP; //@line 22250
     return;
    }
    ___async_unwind = 0; //@line 22253
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 22254
    $240 = $ReallocAsyncCtx4 + 4 | 0; //@line 22255
    HEAP32[$240 >> 2] = $6; //@line 22256
    $241 = $ReallocAsyncCtx4 + 8 | 0; //@line 22257
    HEAP32[$241 >> 2] = $4; //@line 22258
    sp = STACKTOP; //@line 22259
    return;
   }
  }
 } while (0);
 if (!($244 & 16)) {
  return;
 }
 HEAP8[$6 >> 0] = $244 & -17; //@line 22270
 $248 = HEAP32[$4 + 1324 >> 2] | 0; //@line 22272
 $249 = $248 + 48 | 0; //@line 22273
 $251 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 22275
 $252 = $248 + 60 | 0; //@line 22276
 $253 = HEAP32[$252 >> 2] | 0; //@line 22277
 if (!$253) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 22280
  _mbed_assert_internal(15061, 15066, 1102); //@line 22281
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 22284
   $255 = $ReallocAsyncCtx14 + 4 | 0; //@line 22285
   HEAP32[$255 >> 2] = $252; //@line 22286
   $256 = $ReallocAsyncCtx14 + 8 | 0; //@line 22287
   HEAP32[$256 >> 2] = $249; //@line 22288
   $257 = $ReallocAsyncCtx14 + 12 | 0; //@line 22289
   HEAP32[$257 >> 2] = $251; //@line 22290
   sp = STACKTOP; //@line 22291
   return;
  }
  ___async_unwind = 0; //@line 22294
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 22295
  $255 = $ReallocAsyncCtx14 + 4 | 0; //@line 22296
  HEAP32[$255 >> 2] = $252; //@line 22297
  $256 = $ReallocAsyncCtx14 + 8 | 0; //@line 22298
  HEAP32[$256 >> 2] = $249; //@line 22299
  $257 = $ReallocAsyncCtx14 + 12 | 0; //@line 22300
  HEAP32[$257 >> 2] = $251; //@line 22301
  sp = STACKTOP; //@line 22302
  return;
 } else {
  $258 = HEAP32[$253 >> 2] | 0; //@line 22305
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 22306
  FUNCTION_TABLE_vii[$258 & 31]($249, $251); //@line 22307
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 22310
   sp = STACKTOP; //@line 22311
   return;
  }
  ___async_unwind = 0; //@line 22314
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 22315
  sp = STACKTOP; //@line 22316
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_325($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $127 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $216 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $227 = 0, $228 = 0, $230 = 0, $231 = 0, $232 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $244 = 0, $248 = 0, $249 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $28 = 0, $30 = 0, $36 = 0, $4 = 0, $50 = 0, $54 = 0, $59 = 0, $6 = 0, $65 = 0, $66 = 0, $71 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 20655
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20657
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20659
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20661
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20663
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20665
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20667
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20669
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20671
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20673
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20675
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20677
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20679
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20681
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20683
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20685
 do {
  if (HEAP8[$6 >> 0] & 2) {
   $36 = $4 + 288 | 0; //@line 20693
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 20709
   HEAP8[$30 >> 0] = 0; //@line 20710
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $50 = $4 + 956 | 0; //@line 20715
    HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + 1; //@line 20718
   }
   $54 = HEAP8[$4 + 895 >> 0] | 0; //@line 20721
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 11 >> 0] = $54; //@line 20724
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] & -2; //@line 20727
  }
 } while (0);
 $59 = $4 + 377 | 0; //@line 20730
 if (HEAP8[$59 >> 0] | 0) {
  if (!(HEAP32[$2 >> 2] & 16)) {
   HEAP8[$59 >> 0] = 0; //@line 20738
   $65 = $4 + 895 | 0; //@line 20739
   $66 = HEAP8[$65 >> 0] | 0; //@line 20740
   if (!(($66 & 255) < 9 ? ($66 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $96 = HEAP32[$4 >> 2] | 0; //@line 20747
    $99 = HEAP32[(HEAP32[$96 >> 2] | 0) + 16 >> 2] | 0; //@line 20750
    $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 20751
    FUNCTION_TABLE_vi[$99 & 1023]($96); //@line 20752
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 466; //@line 20755
     $100 = $ReallocAsyncCtx + 4 | 0; //@line 20756
     HEAP32[$100 >> 2] = $6; //@line 20757
     $101 = $ReallocAsyncCtx + 8 | 0; //@line 20758
     HEAP32[$101 >> 2] = $4; //@line 20759
     $102 = $ReallocAsyncCtx + 12 | 0; //@line 20760
     HEAP32[$102 >> 2] = $2; //@line 20761
     $103 = $ReallocAsyncCtx + 16 | 0; //@line 20762
     HEAP32[$103 >> 2] = $18; //@line 20763
     $104 = $ReallocAsyncCtx + 20 | 0; //@line 20764
     HEAP32[$104 >> 2] = $20; //@line 20765
     $105 = $ReallocAsyncCtx + 24 | 0; //@line 20766
     HEAP32[$105 >> 2] = $22; //@line 20767
     $106 = $ReallocAsyncCtx + 28 | 0; //@line 20768
     HEAP32[$106 >> 2] = $24; //@line 20769
     $107 = $ReallocAsyncCtx + 32 | 0; //@line 20770
     HEAP32[$107 >> 2] = $8; //@line 20771
     $108 = $ReallocAsyncCtx + 36 | 0; //@line 20772
     HEAP32[$108 >> 2] = $10; //@line 20773
     $109 = $ReallocAsyncCtx + 40 | 0; //@line 20774
     HEAP32[$109 >> 2] = $12; //@line 20775
     $110 = $ReallocAsyncCtx + 44 | 0; //@line 20776
     HEAP32[$110 >> 2] = $14; //@line 20777
     $111 = $ReallocAsyncCtx + 48 | 0; //@line 20778
     HEAP32[$111 >> 2] = $16; //@line 20779
     $112 = $ReallocAsyncCtx + 52 | 0; //@line 20780
     HEAP32[$112 >> 2] = $26; //@line 20781
     $113 = $ReallocAsyncCtx + 56 | 0; //@line 20782
     HEAP32[$113 >> 2] = $28; //@line 20783
     $114 = $ReallocAsyncCtx + 60 | 0; //@line 20784
     HEAP32[$114 >> 2] = $30; //@line 20785
     $115 = $ReallocAsyncCtx + 64 | 0; //@line 20786
     HEAP32[$115 >> 2] = $65; //@line 20787
     sp = STACKTOP; //@line 20788
     return;
    }
    ___async_unwind = 0; //@line 20791
    HEAP32[$ReallocAsyncCtx >> 2] = 466; //@line 20792
    $100 = $ReallocAsyncCtx + 4 | 0; //@line 20793
    HEAP32[$100 >> 2] = $6; //@line 20794
    $101 = $ReallocAsyncCtx + 8 | 0; //@line 20795
    HEAP32[$101 >> 2] = $4; //@line 20796
    $102 = $ReallocAsyncCtx + 12 | 0; //@line 20797
    HEAP32[$102 >> 2] = $2; //@line 20798
    $103 = $ReallocAsyncCtx + 16 | 0; //@line 20799
    HEAP32[$103 >> 2] = $18; //@line 20800
    $104 = $ReallocAsyncCtx + 20 | 0; //@line 20801
    HEAP32[$104 >> 2] = $20; //@line 20802
    $105 = $ReallocAsyncCtx + 24 | 0; //@line 20803
    HEAP32[$105 >> 2] = $22; //@line 20804
    $106 = $ReallocAsyncCtx + 28 | 0; //@line 20805
    HEAP32[$106 >> 2] = $24; //@line 20806
    $107 = $ReallocAsyncCtx + 32 | 0; //@line 20807
    HEAP32[$107 >> 2] = $8; //@line 20808
    $108 = $ReallocAsyncCtx + 36 | 0; //@line 20809
    HEAP32[$108 >> 2] = $10; //@line 20810
    $109 = $ReallocAsyncCtx + 40 | 0; //@line 20811
    HEAP32[$109 >> 2] = $12; //@line 20812
    $110 = $ReallocAsyncCtx + 44 | 0; //@line 20813
    HEAP32[$110 >> 2] = $14; //@line 20814
    $111 = $ReallocAsyncCtx + 48 | 0; //@line 20815
    HEAP32[$111 >> 2] = $16; //@line 20816
    $112 = $ReallocAsyncCtx + 52 | 0; //@line 20817
    HEAP32[$112 >> 2] = $26; //@line 20818
    $113 = $ReallocAsyncCtx + 56 | 0; //@line 20819
    HEAP32[$113 >> 2] = $28; //@line 20820
    $114 = $ReallocAsyncCtx + 60 | 0; //@line 20821
    HEAP32[$114 >> 2] = $30; //@line 20822
    $115 = $ReallocAsyncCtx + 64 | 0; //@line 20823
    HEAP32[$115 >> 2] = $65; //@line 20824
    sp = STACKTOP; //@line 20825
    return;
   }
   $71 = $66 + 1 << 24 >> 24; //@line 20828
   HEAP8[$65 >> 0] = $71; //@line 20829
   if ($71 & 1) {
    $75 = $4 + 1097 | 0; //@line 20834
    HEAP8[$75 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$75 >> 0] | 0) | 0; //@line 20837
   }
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 20839
   $78 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 20840
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 465; //@line 20843
    $79 = $ReallocAsyncCtx9 + 4 | 0; //@line 20844
    HEAP32[$79 >> 2] = $6; //@line 20845
    $80 = $ReallocAsyncCtx9 + 8 | 0; //@line 20846
    HEAP32[$80 >> 2] = $4; //@line 20847
    $81 = $ReallocAsyncCtx9 + 12 | 0; //@line 20848
    HEAP32[$81 >> 2] = $2; //@line 20849
    $82 = $ReallocAsyncCtx9 + 16 | 0; //@line 20850
    HEAP32[$82 >> 2] = $18; //@line 20851
    $83 = $ReallocAsyncCtx9 + 20 | 0; //@line 20852
    HEAP32[$83 >> 2] = $20; //@line 20853
    $84 = $ReallocAsyncCtx9 + 24 | 0; //@line 20854
    HEAP32[$84 >> 2] = $22; //@line 20855
    $85 = $ReallocAsyncCtx9 + 28 | 0; //@line 20856
    HEAP32[$85 >> 2] = $24; //@line 20857
    $86 = $ReallocAsyncCtx9 + 32 | 0; //@line 20858
    HEAP32[$86 >> 2] = $8; //@line 20859
    $87 = $ReallocAsyncCtx9 + 36 | 0; //@line 20860
    HEAP32[$87 >> 2] = $10; //@line 20861
    $88 = $ReallocAsyncCtx9 + 40 | 0; //@line 20862
    HEAP32[$88 >> 2] = $12; //@line 20863
    $89 = $ReallocAsyncCtx9 + 44 | 0; //@line 20864
    HEAP32[$89 >> 2] = $14; //@line 20865
    $90 = $ReallocAsyncCtx9 + 48 | 0; //@line 20866
    HEAP32[$90 >> 2] = $16; //@line 20867
    $91 = $ReallocAsyncCtx9 + 52 | 0; //@line 20868
    HEAP32[$91 >> 2] = $26; //@line 20869
    $92 = $ReallocAsyncCtx9 + 56 | 0; //@line 20870
    HEAP32[$92 >> 2] = $28; //@line 20871
    $93 = $ReallocAsyncCtx9 + 60 | 0; //@line 20872
    HEAP32[$93 >> 2] = $30; //@line 20873
    $94 = $ReallocAsyncCtx9 + 64 | 0; //@line 20874
    HEAP32[$94 >> 2] = $65; //@line 20875
    sp = STACKTOP; //@line 20876
    return;
   }
   HEAP32[___async_retval >> 2] = $78; //@line 20880
   ___async_unwind = 0; //@line 20881
   HEAP32[$ReallocAsyncCtx9 >> 2] = 465; //@line 20882
   $79 = $ReallocAsyncCtx9 + 4 | 0; //@line 20883
   HEAP32[$79 >> 2] = $6; //@line 20884
   $80 = $ReallocAsyncCtx9 + 8 | 0; //@line 20885
   HEAP32[$80 >> 2] = $4; //@line 20886
   $81 = $ReallocAsyncCtx9 + 12 | 0; //@line 20887
   HEAP32[$81 >> 2] = $2; //@line 20888
   $82 = $ReallocAsyncCtx9 + 16 | 0; //@line 20889
   HEAP32[$82 >> 2] = $18; //@line 20890
   $83 = $ReallocAsyncCtx9 + 20 | 0; //@line 20891
   HEAP32[$83 >> 2] = $20; //@line 20892
   $84 = $ReallocAsyncCtx9 + 24 | 0; //@line 20893
   HEAP32[$84 >> 2] = $22; //@line 20894
   $85 = $ReallocAsyncCtx9 + 28 | 0; //@line 20895
   HEAP32[$85 >> 2] = $24; //@line 20896
   $86 = $ReallocAsyncCtx9 + 32 | 0; //@line 20897
   HEAP32[$86 >> 2] = $8; //@line 20898
   $87 = $ReallocAsyncCtx9 + 36 | 0; //@line 20899
   HEAP32[$87 >> 2] = $10; //@line 20900
   $88 = $ReallocAsyncCtx9 + 40 | 0; //@line 20901
   HEAP32[$88 >> 2] = $12; //@line 20902
   $89 = $ReallocAsyncCtx9 + 44 | 0; //@line 20903
   HEAP32[$89 >> 2] = $14; //@line 20904
   $90 = $ReallocAsyncCtx9 + 48 | 0; //@line 20905
   HEAP32[$90 >> 2] = $16; //@line 20906
   $91 = $ReallocAsyncCtx9 + 52 | 0; //@line 20907
   HEAP32[$91 >> 2] = $26; //@line 20908
   $92 = $ReallocAsyncCtx9 + 56 | 0; //@line 20909
   HEAP32[$92 >> 2] = $28; //@line 20910
   $93 = $ReallocAsyncCtx9 + 60 | 0; //@line 20911
   HEAP32[$93 >> 2] = $30; //@line 20912
   $94 = $ReallocAsyncCtx9 + 64 | 0; //@line 20913
   HEAP32[$94 >> 2] = $65; //@line 20914
   sp = STACKTOP; //@line 20915
   return;
  }
 }
 $116 = HEAP32[$2 >> 2] | 0; //@line 20919
 $119 = $116 & -3; //@line 20922
 if (!($116 & 2)) {
  $121 = $116; //@line 20924
 } else {
  HEAP32[$2 >> 2] = $119; //@line 20926
  $121 = $119; //@line 20927
 }
 if ($121 | 0) {
  $206 = HEAP32[$26 >> 2] | 0; //@line 20931
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 20932
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($206, $28, 1e3); //@line 20933
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 20936
   $207 = $ReallocAsyncCtx8 + 4 | 0; //@line 20937
   HEAP32[$207 >> 2] = $6; //@line 20938
   $208 = $ReallocAsyncCtx8 + 8 | 0; //@line 20939
   HEAP32[$208 >> 2] = $4; //@line 20940
   $209 = $ReallocAsyncCtx8 + 12 | 0; //@line 20941
   HEAP32[$209 >> 2] = $8; //@line 20942
   $210 = $ReallocAsyncCtx8 + 16 | 0; //@line 20943
   HEAP32[$210 >> 2] = $10; //@line 20944
   $211 = $ReallocAsyncCtx8 + 20 | 0; //@line 20945
   HEAP32[$211 >> 2] = $12; //@line 20946
   $212 = $ReallocAsyncCtx8 + 24 | 0; //@line 20947
   HEAP32[$212 >> 2] = $14; //@line 20948
   $213 = $ReallocAsyncCtx8 + 28 | 0; //@line 20949
   HEAP32[$213 >> 2] = $16; //@line 20950
   sp = STACKTOP; //@line 20951
   return;
  }
  ___async_unwind = 0; //@line 20954
  HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 20955
  $207 = $ReallocAsyncCtx8 + 4 | 0; //@line 20956
  HEAP32[$207 >> 2] = $6; //@line 20957
  $208 = $ReallocAsyncCtx8 + 8 | 0; //@line 20958
  HEAP32[$208 >> 2] = $4; //@line 20959
  $209 = $ReallocAsyncCtx8 + 12 | 0; //@line 20960
  HEAP32[$209 >> 2] = $8; //@line 20961
  $210 = $ReallocAsyncCtx8 + 16 | 0; //@line 20962
  HEAP32[$210 >> 2] = $10; //@line 20963
  $211 = $ReallocAsyncCtx8 + 20 | 0; //@line 20964
  HEAP32[$211 >> 2] = $12; //@line 20965
  $212 = $ReallocAsyncCtx8 + 24 | 0; //@line 20966
  HEAP32[$212 >> 2] = $14; //@line 20967
  $213 = $ReallocAsyncCtx8 + 28 | 0; //@line 20968
  HEAP32[$213 >> 2] = $16; //@line 20969
  sp = STACKTOP; //@line 20970
  return;
 }
 $122 = HEAP8[$6 >> 0] | 0; //@line 20973
 if ($122 & 1) {
  HEAP8[$6 >> 0] = $122 & -2; //@line 20978
  $127 = HEAP32[$4 + 1324 >> 2] | 0; //@line 20980
  $129 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 20982
  $130 = $127 + 12 | 0; //@line 20983
  $131 = HEAP32[$130 >> 2] | 0; //@line 20984
  if (!$131) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 20987
   _mbed_assert_internal(15061, 15066, 1102); //@line 20988
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 20991
    $133 = $ReallocAsyncCtx18 + 4 | 0; //@line 20992
    HEAP32[$133 >> 2] = $6; //@line 20993
    $134 = $ReallocAsyncCtx18 + 8 | 0; //@line 20994
    HEAP32[$134 >> 2] = $4; //@line 20995
    $135 = $ReallocAsyncCtx18 + 12 | 0; //@line 20996
    HEAP32[$135 >> 2] = $18; //@line 20997
    $136 = $ReallocAsyncCtx18 + 16 | 0; //@line 20998
    HEAP32[$136 >> 2] = $20; //@line 20999
    $137 = $ReallocAsyncCtx18 + 20 | 0; //@line 21000
    HEAP32[$137 >> 2] = $22; //@line 21001
    $138 = $ReallocAsyncCtx18 + 24 | 0; //@line 21002
    HEAP32[$138 >> 2] = $24; //@line 21003
    $139 = $ReallocAsyncCtx18 + 28 | 0; //@line 21004
    HEAP32[$139 >> 2] = $8; //@line 21005
    $140 = $ReallocAsyncCtx18 + 32 | 0; //@line 21006
    HEAP32[$140 >> 2] = $10; //@line 21007
    $141 = $ReallocAsyncCtx18 + 36 | 0; //@line 21008
    HEAP32[$141 >> 2] = $12; //@line 21009
    $142 = $ReallocAsyncCtx18 + 40 | 0; //@line 21010
    HEAP32[$142 >> 2] = $14; //@line 21011
    $143 = $ReallocAsyncCtx18 + 44 | 0; //@line 21012
    HEAP32[$143 >> 2] = $16; //@line 21013
    $144 = $ReallocAsyncCtx18 + 48 | 0; //@line 21014
    HEAP32[$144 >> 2] = $127; //@line 21015
    $145 = $ReallocAsyncCtx18 + 52 | 0; //@line 21016
    HEAP32[$145 >> 2] = $129; //@line 21017
    $146 = $ReallocAsyncCtx18 + 56 | 0; //@line 21018
    HEAP32[$146 >> 2] = $130; //@line 21019
    sp = STACKTOP; //@line 21020
    return;
   }
   ___async_unwind = 0; //@line 21023
   HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 21024
   $133 = $ReallocAsyncCtx18 + 4 | 0; //@line 21025
   HEAP32[$133 >> 2] = $6; //@line 21026
   $134 = $ReallocAsyncCtx18 + 8 | 0; //@line 21027
   HEAP32[$134 >> 2] = $4; //@line 21028
   $135 = $ReallocAsyncCtx18 + 12 | 0; //@line 21029
   HEAP32[$135 >> 2] = $18; //@line 21030
   $136 = $ReallocAsyncCtx18 + 16 | 0; //@line 21031
   HEAP32[$136 >> 2] = $20; //@line 21032
   $137 = $ReallocAsyncCtx18 + 20 | 0; //@line 21033
   HEAP32[$137 >> 2] = $22; //@line 21034
   $138 = $ReallocAsyncCtx18 + 24 | 0; //@line 21035
   HEAP32[$138 >> 2] = $24; //@line 21036
   $139 = $ReallocAsyncCtx18 + 28 | 0; //@line 21037
   HEAP32[$139 >> 2] = $8; //@line 21038
   $140 = $ReallocAsyncCtx18 + 32 | 0; //@line 21039
   HEAP32[$140 >> 2] = $10; //@line 21040
   $141 = $ReallocAsyncCtx18 + 36 | 0; //@line 21041
   HEAP32[$141 >> 2] = $12; //@line 21042
   $142 = $ReallocAsyncCtx18 + 40 | 0; //@line 21043
   HEAP32[$142 >> 2] = $14; //@line 21044
   $143 = $ReallocAsyncCtx18 + 44 | 0; //@line 21045
   HEAP32[$143 >> 2] = $16; //@line 21046
   $144 = $ReallocAsyncCtx18 + 48 | 0; //@line 21047
   HEAP32[$144 >> 2] = $127; //@line 21048
   $145 = $ReallocAsyncCtx18 + 52 | 0; //@line 21049
   HEAP32[$145 >> 2] = $129; //@line 21050
   $146 = $ReallocAsyncCtx18 + 56 | 0; //@line 21051
   HEAP32[$146 >> 2] = $130; //@line 21052
   sp = STACKTOP; //@line 21053
   return;
  } else {
   $147 = HEAP32[$131 >> 2] | 0; //@line 21056
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 21057
   FUNCTION_TABLE_vii[$147 & 31]($127, $129); //@line 21058
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 21061
    $148 = $ReallocAsyncCtx2 + 4 | 0; //@line 21062
    HEAP32[$148 >> 2] = $6; //@line 21063
    $149 = $ReallocAsyncCtx2 + 8 | 0; //@line 21064
    HEAP32[$149 >> 2] = $4; //@line 21065
    $150 = $ReallocAsyncCtx2 + 12 | 0; //@line 21066
    HEAP32[$150 >> 2] = $18; //@line 21067
    $151 = $ReallocAsyncCtx2 + 16 | 0; //@line 21068
    HEAP32[$151 >> 2] = $20; //@line 21069
    $152 = $ReallocAsyncCtx2 + 20 | 0; //@line 21070
    HEAP32[$152 >> 2] = $22; //@line 21071
    $153 = $ReallocAsyncCtx2 + 24 | 0; //@line 21072
    HEAP32[$153 >> 2] = $24; //@line 21073
    $154 = $ReallocAsyncCtx2 + 28 | 0; //@line 21074
    HEAP32[$154 >> 2] = $8; //@line 21075
    $155 = $ReallocAsyncCtx2 + 32 | 0; //@line 21076
    HEAP32[$155 >> 2] = $10; //@line 21077
    $156 = $ReallocAsyncCtx2 + 36 | 0; //@line 21078
    HEAP32[$156 >> 2] = $12; //@line 21079
    $157 = $ReallocAsyncCtx2 + 40 | 0; //@line 21080
    HEAP32[$157 >> 2] = $14; //@line 21081
    $158 = $ReallocAsyncCtx2 + 44 | 0; //@line 21082
    HEAP32[$158 >> 2] = $16; //@line 21083
    sp = STACKTOP; //@line 21084
    return;
   }
   ___async_unwind = 0; //@line 21087
   HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 21088
   $148 = $ReallocAsyncCtx2 + 4 | 0; //@line 21089
   HEAP32[$148 >> 2] = $6; //@line 21090
   $149 = $ReallocAsyncCtx2 + 8 | 0; //@line 21091
   HEAP32[$149 >> 2] = $4; //@line 21092
   $150 = $ReallocAsyncCtx2 + 12 | 0; //@line 21093
   HEAP32[$150 >> 2] = $18; //@line 21094
   $151 = $ReallocAsyncCtx2 + 16 | 0; //@line 21095
   HEAP32[$151 >> 2] = $20; //@line 21096
   $152 = $ReallocAsyncCtx2 + 20 | 0; //@line 21097
   HEAP32[$152 >> 2] = $22; //@line 21098
   $153 = $ReallocAsyncCtx2 + 24 | 0; //@line 21099
   HEAP32[$153 >> 2] = $24; //@line 21100
   $154 = $ReallocAsyncCtx2 + 28 | 0; //@line 21101
   HEAP32[$154 >> 2] = $8; //@line 21102
   $155 = $ReallocAsyncCtx2 + 32 | 0; //@line 21103
   HEAP32[$155 >> 2] = $10; //@line 21104
   $156 = $ReallocAsyncCtx2 + 36 | 0; //@line 21105
   HEAP32[$156 >> 2] = $12; //@line 21106
   $157 = $ReallocAsyncCtx2 + 40 | 0; //@line 21107
   HEAP32[$157 >> 2] = $14; //@line 21108
   $158 = $ReallocAsyncCtx2 + 44 | 0; //@line 21109
   HEAP32[$158 >> 2] = $16; //@line 21110
   sp = STACKTOP; //@line 21111
   return;
  }
 }
 if ($122 & 8) {
  HEAP8[$6 >> 0] = $122 & -9; //@line 21119
  $163 = HEAP32[$4 + 1324 >> 2] | 0; //@line 21121
  $164 = $163 + 32 | 0; //@line 21122
  $166 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 21124
  $167 = $163 + 44 | 0; //@line 21125
  $168 = HEAP32[$167 >> 2] | 0; //@line 21126
  if (!$168) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 21129
   _mbed_assert_internal(15061, 15066, 1102); //@line 21130
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 21133
    $170 = $ReallocAsyncCtx17 + 4 | 0; //@line 21134
    HEAP32[$170 >> 2] = $6; //@line 21135
    $171 = $ReallocAsyncCtx17 + 8 | 0; //@line 21136
    HEAP32[$171 >> 2] = $4; //@line 21137
    $172 = $ReallocAsyncCtx17 + 12 | 0; //@line 21138
    HEAP32[$172 >> 2] = $164; //@line 21139
    $173 = $ReallocAsyncCtx17 + 16 | 0; //@line 21140
    HEAP32[$173 >> 2] = $166; //@line 21141
    $174 = $ReallocAsyncCtx17 + 20 | 0; //@line 21142
    HEAP32[$174 >> 2] = $18; //@line 21143
    $175 = $ReallocAsyncCtx17 + 24 | 0; //@line 21144
    HEAP32[$175 >> 2] = $20; //@line 21145
    $176 = $ReallocAsyncCtx17 + 28 | 0; //@line 21146
    HEAP32[$176 >> 2] = $22; //@line 21147
    $177 = $ReallocAsyncCtx17 + 32 | 0; //@line 21148
    HEAP32[$177 >> 2] = $24; //@line 21149
    $178 = $ReallocAsyncCtx17 + 36 | 0; //@line 21150
    HEAP32[$178 >> 2] = $8; //@line 21151
    $179 = $ReallocAsyncCtx17 + 40 | 0; //@line 21152
    HEAP32[$179 >> 2] = $10; //@line 21153
    $180 = $ReallocAsyncCtx17 + 44 | 0; //@line 21154
    HEAP32[$180 >> 2] = $12; //@line 21155
    $181 = $ReallocAsyncCtx17 + 48 | 0; //@line 21156
    HEAP32[$181 >> 2] = $14; //@line 21157
    $182 = $ReallocAsyncCtx17 + 52 | 0; //@line 21158
    HEAP32[$182 >> 2] = $16; //@line 21159
    $183 = $ReallocAsyncCtx17 + 56 | 0; //@line 21160
    HEAP32[$183 >> 2] = $167; //@line 21161
    sp = STACKTOP; //@line 21162
    return;
   }
   ___async_unwind = 0; //@line 21165
   HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 21166
   $170 = $ReallocAsyncCtx17 + 4 | 0; //@line 21167
   HEAP32[$170 >> 2] = $6; //@line 21168
   $171 = $ReallocAsyncCtx17 + 8 | 0; //@line 21169
   HEAP32[$171 >> 2] = $4; //@line 21170
   $172 = $ReallocAsyncCtx17 + 12 | 0; //@line 21171
   HEAP32[$172 >> 2] = $164; //@line 21172
   $173 = $ReallocAsyncCtx17 + 16 | 0; //@line 21173
   HEAP32[$173 >> 2] = $166; //@line 21174
   $174 = $ReallocAsyncCtx17 + 20 | 0; //@line 21175
   HEAP32[$174 >> 2] = $18; //@line 21176
   $175 = $ReallocAsyncCtx17 + 24 | 0; //@line 21177
   HEAP32[$175 >> 2] = $20; //@line 21178
   $176 = $ReallocAsyncCtx17 + 28 | 0; //@line 21179
   HEAP32[$176 >> 2] = $22; //@line 21180
   $177 = $ReallocAsyncCtx17 + 32 | 0; //@line 21181
   HEAP32[$177 >> 2] = $24; //@line 21182
   $178 = $ReallocAsyncCtx17 + 36 | 0; //@line 21183
   HEAP32[$178 >> 2] = $8; //@line 21184
   $179 = $ReallocAsyncCtx17 + 40 | 0; //@line 21185
   HEAP32[$179 >> 2] = $10; //@line 21186
   $180 = $ReallocAsyncCtx17 + 44 | 0; //@line 21187
   HEAP32[$180 >> 2] = $12; //@line 21188
   $181 = $ReallocAsyncCtx17 + 48 | 0; //@line 21189
   HEAP32[$181 >> 2] = $14; //@line 21190
   $182 = $ReallocAsyncCtx17 + 52 | 0; //@line 21191
   HEAP32[$182 >> 2] = $16; //@line 21192
   $183 = $ReallocAsyncCtx17 + 56 | 0; //@line 21193
   HEAP32[$183 >> 2] = $167; //@line 21194
   sp = STACKTOP; //@line 21195
   return;
  } else {
   $184 = HEAP32[$168 >> 2] | 0; //@line 21198
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 21199
   FUNCTION_TABLE_vii[$184 & 31]($164, $166); //@line 21200
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 21203
    $185 = $ReallocAsyncCtx3 + 4 | 0; //@line 21204
    HEAP32[$185 >> 2] = $4; //@line 21205
    $186 = $ReallocAsyncCtx3 + 8 | 0; //@line 21206
    HEAP32[$186 >> 2] = $6; //@line 21207
    $187 = $ReallocAsyncCtx3 + 12 | 0; //@line 21208
    HEAP32[$187 >> 2] = $18; //@line 21209
    $188 = $ReallocAsyncCtx3 + 16 | 0; //@line 21210
    HEAP32[$188 >> 2] = $20; //@line 21211
    $189 = $ReallocAsyncCtx3 + 20 | 0; //@line 21212
    HEAP32[$189 >> 2] = $22; //@line 21213
    $190 = $ReallocAsyncCtx3 + 24 | 0; //@line 21214
    HEAP32[$190 >> 2] = $24; //@line 21215
    $191 = $ReallocAsyncCtx3 + 28 | 0; //@line 21216
    HEAP32[$191 >> 2] = $8; //@line 21217
    $192 = $ReallocAsyncCtx3 + 32 | 0; //@line 21218
    HEAP32[$192 >> 2] = $10; //@line 21219
    $193 = $ReallocAsyncCtx3 + 36 | 0; //@line 21220
    HEAP32[$193 >> 2] = $12; //@line 21221
    $194 = $ReallocAsyncCtx3 + 40 | 0; //@line 21222
    HEAP32[$194 >> 2] = $14; //@line 21223
    $195 = $ReallocAsyncCtx3 + 44 | 0; //@line 21224
    HEAP32[$195 >> 2] = $16; //@line 21225
    sp = STACKTOP; //@line 21226
    return;
   }
   ___async_unwind = 0; //@line 21229
   HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 21230
   $185 = $ReallocAsyncCtx3 + 4 | 0; //@line 21231
   HEAP32[$185 >> 2] = $4; //@line 21232
   $186 = $ReallocAsyncCtx3 + 8 | 0; //@line 21233
   HEAP32[$186 >> 2] = $6; //@line 21234
   $187 = $ReallocAsyncCtx3 + 12 | 0; //@line 21235
   HEAP32[$187 >> 2] = $18; //@line 21236
   $188 = $ReallocAsyncCtx3 + 16 | 0; //@line 21237
   HEAP32[$188 >> 2] = $20; //@line 21238
   $189 = $ReallocAsyncCtx3 + 20 | 0; //@line 21239
   HEAP32[$189 >> 2] = $22; //@line 21240
   $190 = $ReallocAsyncCtx3 + 24 | 0; //@line 21241
   HEAP32[$190 >> 2] = $24; //@line 21242
   $191 = $ReallocAsyncCtx3 + 28 | 0; //@line 21243
   HEAP32[$191 >> 2] = $8; //@line 21244
   $192 = $ReallocAsyncCtx3 + 32 | 0; //@line 21245
   HEAP32[$192 >> 2] = $10; //@line 21246
   $193 = $ReallocAsyncCtx3 + 36 | 0; //@line 21247
   HEAP32[$193 >> 2] = $12; //@line 21248
   $194 = $ReallocAsyncCtx3 + 40 | 0; //@line 21249
   HEAP32[$194 >> 2] = $14; //@line 21250
   $195 = $ReallocAsyncCtx3 + 44 | 0; //@line 21251
   HEAP32[$195 >> 2] = $16; //@line 21252
   sp = STACKTOP; //@line 21253
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(12967, $18) | 0; //@line 21260
  _printf(13114, $22) | 0; //@line 21261
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 21262
  _putchar(10) | 0; //@line 21263
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 21266
   $198 = $ReallocAsyncCtx7 + 4 | 0; //@line 21267
   HEAP32[$198 >> 2] = $4; //@line 21268
   $199 = $ReallocAsyncCtx7 + 8 | 0; //@line 21269
   HEAP32[$199 >> 2] = $6; //@line 21270
   $200 = $ReallocAsyncCtx7 + 12 | 0; //@line 21271
   HEAP32[$200 >> 2] = $8; //@line 21272
   $201 = $ReallocAsyncCtx7 + 16 | 0; //@line 21273
   HEAP32[$201 >> 2] = $10; //@line 21274
   $202 = $ReallocAsyncCtx7 + 20 | 0; //@line 21275
   HEAP32[$202 >> 2] = $12; //@line 21276
   $203 = $ReallocAsyncCtx7 + 24 | 0; //@line 21277
   HEAP32[$203 >> 2] = $14; //@line 21278
   $204 = $ReallocAsyncCtx7 + 28 | 0; //@line 21279
   HEAP32[$204 >> 2] = $16; //@line 21280
   sp = STACKTOP; //@line 21281
   return;
  }
  ___async_unwind = 0; //@line 21284
  HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 21285
  $198 = $ReallocAsyncCtx7 + 4 | 0; //@line 21286
  HEAP32[$198 >> 2] = $4; //@line 21287
  $199 = $ReallocAsyncCtx7 + 8 | 0; //@line 21288
  HEAP32[$199 >> 2] = $6; //@line 21289
  $200 = $ReallocAsyncCtx7 + 12 | 0; //@line 21290
  HEAP32[$200 >> 2] = $8; //@line 21291
  $201 = $ReallocAsyncCtx7 + 16 | 0; //@line 21292
  HEAP32[$201 >> 2] = $10; //@line 21293
  $202 = $ReallocAsyncCtx7 + 20 | 0; //@line 21294
  HEAP32[$202 >> 2] = $12; //@line 21295
  $203 = $ReallocAsyncCtx7 + 24 | 0; //@line 21296
  HEAP32[$203 >> 2] = $14; //@line 21297
  $204 = $ReallocAsyncCtx7 + 28 | 0; //@line 21298
  HEAP32[$204 >> 2] = $16; //@line 21299
  sp = STACKTOP; //@line 21300
  return;
 }
 $205 = HEAP8[$6 >> 0] & -33; //@line 21304
 HEAP8[$6 >> 0] = $205; //@line 21305
 do {
  if (!($205 & 2)) {
   $244 = $205; //@line 21310
  } else {
   $216 = $205 & -3; //@line 21312
   HEAP8[$6 >> 0] = $216; //@line 21313
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12967, $10) | 0; //@line 21318
    _printf(12994, $14) | 0; //@line 21319
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 21320
    _putchar(10) | 0; //@line 21321
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 21324
     $220 = $ReallocAsyncCtx6 + 4 | 0; //@line 21325
     HEAP32[$220 >> 2] = $6; //@line 21326
     $221 = $ReallocAsyncCtx6 + 8 | 0; //@line 21327
     HEAP32[$221 >> 2] = $8; //@line 21328
     $222 = $ReallocAsyncCtx6 + 12 | 0; //@line 21329
     HEAP32[$222 >> 2] = $4; //@line 21330
     $223 = $ReallocAsyncCtx6 + 16 | 0; //@line 21331
     HEAP32[$223 >> 2] = $8; //@line 21332
     sp = STACKTOP; //@line 21333
     return;
    }
    ___async_unwind = 0; //@line 21336
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 21337
    $220 = $ReallocAsyncCtx6 + 4 | 0; //@line 21338
    HEAP32[$220 >> 2] = $6; //@line 21339
    $221 = $ReallocAsyncCtx6 + 8 | 0; //@line 21340
    HEAP32[$221 >> 2] = $8; //@line 21341
    $222 = $ReallocAsyncCtx6 + 12 | 0; //@line 21342
    HEAP32[$222 >> 2] = $4; //@line 21343
    $223 = $ReallocAsyncCtx6 + 16 | 0; //@line 21344
    HEAP32[$223 >> 2] = $8; //@line 21345
    sp = STACKTOP; //@line 21346
    return;
   }
   if ($216 & 4) {
    $242 = $216 & -5; //@line 21352
    HEAP8[$6 >> 0] = $242; //@line 21353
    $244 = $242; //@line 21354
    break;
   }
   $227 = HEAP32[$4 + 1324 >> 2] | 0; //@line 21358
   $228 = $227 + 16 | 0; //@line 21359
   $230 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 21361
   $231 = $227 + 28 | 0; //@line 21362
   $232 = HEAP32[$231 >> 2] | 0; //@line 21363
   if (!$232) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 21366
    _mbed_assert_internal(15061, 15066, 1102); //@line 21367
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 21370
     $234 = $ReallocAsyncCtx15 + 4 | 0; //@line 21371
     HEAP32[$234 >> 2] = $231; //@line 21372
     $235 = $ReallocAsyncCtx15 + 8 | 0; //@line 21373
     HEAP32[$235 >> 2] = $228; //@line 21374
     $236 = $ReallocAsyncCtx15 + 12 | 0; //@line 21375
     HEAP32[$236 >> 2] = $230; //@line 21376
     $237 = $ReallocAsyncCtx15 + 16 | 0; //@line 21377
     HEAP32[$237 >> 2] = $6; //@line 21378
     $238 = $ReallocAsyncCtx15 + 20 | 0; //@line 21379
     HEAP32[$238 >> 2] = $4; //@line 21380
     sp = STACKTOP; //@line 21381
     return;
    }
    ___async_unwind = 0; //@line 21384
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 21385
    $234 = $ReallocAsyncCtx15 + 4 | 0; //@line 21386
    HEAP32[$234 >> 2] = $231; //@line 21387
    $235 = $ReallocAsyncCtx15 + 8 | 0; //@line 21388
    HEAP32[$235 >> 2] = $228; //@line 21389
    $236 = $ReallocAsyncCtx15 + 12 | 0; //@line 21390
    HEAP32[$236 >> 2] = $230; //@line 21391
    $237 = $ReallocAsyncCtx15 + 16 | 0; //@line 21392
    HEAP32[$237 >> 2] = $6; //@line 21393
    $238 = $ReallocAsyncCtx15 + 20 | 0; //@line 21394
    HEAP32[$238 >> 2] = $4; //@line 21395
    sp = STACKTOP; //@line 21396
    return;
   } else {
    $239 = HEAP32[$232 >> 2] | 0; //@line 21399
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 21400
    FUNCTION_TABLE_vii[$239 & 31]($228, $230); //@line 21401
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 21404
     $240 = $ReallocAsyncCtx4 + 4 | 0; //@line 21405
     HEAP32[$240 >> 2] = $6; //@line 21406
     $241 = $ReallocAsyncCtx4 + 8 | 0; //@line 21407
     HEAP32[$241 >> 2] = $4; //@line 21408
     sp = STACKTOP; //@line 21409
     return;
    }
    ___async_unwind = 0; //@line 21412
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 21413
    $240 = $ReallocAsyncCtx4 + 4 | 0; //@line 21414
    HEAP32[$240 >> 2] = $6; //@line 21415
    $241 = $ReallocAsyncCtx4 + 8 | 0; //@line 21416
    HEAP32[$241 >> 2] = $4; //@line 21417
    sp = STACKTOP; //@line 21418
    return;
   }
  }
 } while (0);
 if (!($244 & 16)) {
  return;
 }
 HEAP8[$6 >> 0] = $244 & -17; //@line 21429
 $248 = HEAP32[$4 + 1324 >> 2] | 0; //@line 21431
 $249 = $248 + 48 | 0; //@line 21432
 $251 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 21434
 $252 = $248 + 60 | 0; //@line 21435
 $253 = HEAP32[$252 >> 2] | 0; //@line 21436
 if (!$253) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 21439
  _mbed_assert_internal(15061, 15066, 1102); //@line 21440
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 21443
   $255 = $ReallocAsyncCtx14 + 4 | 0; //@line 21444
   HEAP32[$255 >> 2] = $252; //@line 21445
   $256 = $ReallocAsyncCtx14 + 8 | 0; //@line 21446
   HEAP32[$256 >> 2] = $249; //@line 21447
   $257 = $ReallocAsyncCtx14 + 12 | 0; //@line 21448
   HEAP32[$257 >> 2] = $251; //@line 21449
   sp = STACKTOP; //@line 21450
   return;
  }
  ___async_unwind = 0; //@line 21453
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 21454
  $255 = $ReallocAsyncCtx14 + 4 | 0; //@line 21455
  HEAP32[$255 >> 2] = $252; //@line 21456
  $256 = $ReallocAsyncCtx14 + 8 | 0; //@line 21457
  HEAP32[$256 >> 2] = $249; //@line 21458
  $257 = $ReallocAsyncCtx14 + 12 | 0; //@line 21459
  HEAP32[$257 >> 2] = $251; //@line 21460
  sp = STACKTOP; //@line 21461
  return;
 } else {
  $258 = HEAP32[$253 >> 2] | 0; //@line 21464
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 21465
  FUNCTION_TABLE_vii[$258 & 31]($249, $251); //@line 21466
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 21469
   sp = STACKTOP; //@line 21470
   return;
  }
  ___async_unwind = 0; //@line 21473
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 21474
  sp = STACKTOP; //@line 21475
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0$be = 0, $$0$i = 0, $$0$i104 = 0, $$0$i108 = 0, $$0$i98 = 0, $$0116 = 0, $$095113 = 0, $$096$be = 0, $$096$lcssa = 0, $$096115 = 0, $$1$lcssa = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $147 = 0, $15 = 0, $151 = 0, $156 = 0, $157 = 0, $16 = 0, $160 = 0, $166 = 0, $169 = 0, $17 = 0, $174 = 0, $18 = 0, $182 = 0, $19 = 0, $20 = 0, $201 = 0, $21 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $286 = 0, $287 = 0, $29 = 0, $298 = 0, $299 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $336 = 0, $34 = 0, $342 = 0, $343 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $412 = 0, $413 = 0, $42 = 0, $423 = 0, $427 = 0, $43 = 0, $431 = 0, $434 = 0, $44 = 0, $440 = 0, $443 = 0, $444 = 0, $45 = 0, $453 = 0, $454 = 0, $46 = 0, $47 = 0, $49 = 0, $531 = 0, $553 = 0, $563 = 0, $564 = 0, $60 = 0, $61 = 0, $633 = 0, $643 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20776
 STACKTOP = STACKTOP + 32 | 0; //@line 20777
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 20777
 $8 = sp + 12 | 0; //@line 20778
 $9 = sp; //@line 20779
 $10 = sp + 26 | 0; //@line 20780
 $11 = sp + 25 | 0; //@line 20781
 $12 = sp + 24 | 0; //@line 20782
 $13 = $3 & 255; //@line 20783
 if (($2 & 255) >= ($3 & 255)) {
  $$096$lcssa = 0; //@line 20786
  STACKTOP = sp; //@line 20787
  return $$096$lcssa | 0; //@line 20787
 }
 $15 = $5 + 4 | 0; //@line 20789
 $16 = $5 + 12 | 0; //@line 20790
 $17 = $5 + 13 | 0; //@line 20791
 $18 = $8 + 4 | 0; //@line 20792
 $19 = $6 + 60 | 0; //@line 20793
 $20 = $8 + 6 | 0; //@line 20794
 $21 = $6 + 44 | 0; //@line 20795
 $22 = $8 + 5 | 0; //@line 20796
 $23 = $6 + 1 | 0; //@line 20797
 $24 = $8 + 7 | 0; //@line 20798
 $25 = $8 + 8 | 0; //@line 20799
 $26 = $6 + 32 | 0; //@line 20800
 $27 = $8 + 9 | 0; //@line 20801
 $28 = $0 + 3 | 0; //@line 20802
 $29 = $0 + 2 | 0; //@line 20803
 $30 = $6 + 56 | 0; //@line 20804
 $31 = $6 + 58 | 0; //@line 20805
 $32 = $8 + 1 | 0; //@line 20806
 $33 = $8 + 4 | 0; //@line 20807
 $34 = $6 + 40 | 0; //@line 20808
 $35 = $6 + 36 | 0; //@line 20809
 $36 = $6 + 33 | 0; //@line 20810
 $37 = $0 + 1 | 0; //@line 20811
 $38 = $8 + 4 | 0; //@line 20812
 $39 = $9 + 4 | 0; //@line 20813
 $40 = $9 + 8 | 0; //@line 20814
 $41 = $6 + 16 | 0; //@line 20815
 $42 = $6 + 20 | 0; //@line 20816
 $43 = $8 + 1 | 0; //@line 20817
 $44 = $8 + 2 | 0; //@line 20818
 $45 = $6 + 45 | 0; //@line 20819
 $46 = $6 + 48 | 0; //@line 20820
 $47 = $8 + 4 | 0; //@line 20821
 $$0116 = $2; //@line 20822
 $$096115 = 0; //@line 20822
 L4 : while (1) {
  $49 = $$0116 + 1 << 24 >> 24; //@line 20825
  switch (HEAP8[$1 + ($$0116 & 255) >> 0] | 0) {
  case 2:
   {
    HEAP32[$15 >> 2] = 0; //@line 20830
    HEAP8[$16 >> 0] = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 20835
    HEAP8[$17 >> 0] = HEAP8[$1 + ($$0116 + 2 & 255) >> 0] | 0; //@line 20840
    $$0$be = $$0116 + 3 << 24 >> 24; //@line 20841
    $$096$be = $$096115; //@line 20841
    break;
   }
  case 3:
   {
    HEAP8[$9 >> 0] = 0; //@line 20845
    HEAP8[$10 >> 0] = 0; //@line 20846
    HEAP8[$11 >> 0] = 0; //@line 20847
    HEAP8[$12 >> 0] = 0; //@line 20848
    $60 = $49 & 255; //@line 20849
    $61 = $60 + -1 | 0; //@line 20850
    HEAP32[$8 >> 2] = $1 + $61; //@line 20852
    HEAP8[$18 >> 0] = $13 - $61; //@line 20855
    HEAP8[$20 >> 0] = HEAP8[$19 >> 0] | 0; //@line 20857
    HEAP8[$22 >> 0] = HEAP8[$21 >> 0] | 0; //@line 20859
    HEAP8[$24 >> 0] = HEAP8[$23 >> 0] | 0; //@line 20861
    HEAP8[$25 >> 0] = HEAP8[$6 >> 0] | 0; //@line 20863
    HEAP8[$27 >> 0] = HEAP8[$26 >> 0] | 0; //@line 20865
    $72 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 20868
    $AsyncCtx = _emscripten_alloc_async_context(272, sp) | 0; //@line 20869
    $73 = FUNCTION_TABLE_iiiiiii[$72 & 3]($7, $8, $9, $10, $11, $12) | 0; //@line 20870
    if (___async) {
     label = 6; //@line 20873
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 20876
    if (($73 & 7) == 7) {
     HEAP8[$23 >> 0] = HEAP8[$9 >> 0] | 0; //@line 20881
     HEAP8[$6 >> 0] = HEAP8[$10 >> 0] | 0; //@line 20883
     HEAP8[$26 >> 0] = HEAP8[$11 >> 0] | 0; //@line 20885
    }
    $147 = HEAP8[$12 >> 0] | 0; //@line 20887
    if (($147 & 255) > 4) {
     $div = ($147 & 255) / 5 | 0; //@line 20890
     $151 = (-128 - (HEAP8[$28 >> 0] | 0) & 255) + -1 | 0; //@line 20895
     $$095113 = 0; //@line 20896
     $157 = HEAP8[$29 >> 0] | 0; //@line 20896
     while (1) {
      $156 = $157 & 255; //@line 20898
      if (($151 | 0) > ($156 | 0)) {
       $160 = $157 + 2 << 24 >> 24; //@line 20902
       HEAP8[$0 + 4 + $156 >> 0] = 3; //@line 20906
       HEAP8[$29 >> 0] = $160; //@line 20907
       HEAP8[($157 + 1 & 255) + ($0 + 4) >> 0] = $73; //@line 20908
       HEAP8[$0 >> 0] = 1; //@line 20909
       $$0$i = 0; //@line 20910
       $643 = $160; //@line 20910
      } else {
       $$0$i = -1e3; //@line 20912
       $643 = $157; //@line 20912
      }
      $$095113 = $$095113 + 1 << 24 >> 24; //@line 20914
      if (($$095113 & 255) >= ($div & 255)) {
       $$1$lcssa = $$0$i; //@line 20919
       break;
      } else {
       $157 = $643; //@line 20917
      }
     }
    } else {
     $$1$lcssa = $$096115; //@line 20924
    }
    $$0$be = $60 + 255 + ($147 & 255) & 255; //@line 20930
    $$096$be = $$1$lcssa; //@line 20930
    break;
   }
  case 4:
   {
    $166 = $$0116 + 2 << 24 >> 24; //@line 20934
    $169 = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 20937
    HEAP8[$30 >> 0] = $169; //@line 20938
    HEAP16[$31 >> 1] = 1 << ($169 & 255); //@line 20942
    $174 = HEAP8[$29 >> 0] | 0; //@line 20944
    if (($174 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
     HEAP8[$29 >> 0] = $174 + 1 << 24 >> 24; //@line 20951
     HEAP8[($174 & 255) + ($0 + 4) >> 0] = 4; //@line 20952
     HEAP8[$0 >> 0] = 1; //@line 20953
     $$0$be = $166; //@line 20954
     $$096$be = 0; //@line 20954
    } else {
     $$0$be = $166; //@line 20956
     $$096$be = -1e3; //@line 20956
    }
    break;
   }
  case 5:
   {
    $182 = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 20963
    HEAP8[$32 >> 0] = ($182 & 255) >>> 4 & 7; //@line 20968
    HEAP8[$8 >> 0] = $182 & 15; //@line 20970
    $201 = $$0116 + 5 << 24 >> 24; //@line 20984
    HEAP32[$33 >> 2] = (HEAPU8[$1 + ($$0116 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0116 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0116 + 2 & 255) >> 0])) * 100; //@line 20992
    $211 = HEAP32[(HEAP32[$7 >> 2] | 0) + 40 >> 2] | 0; //@line 20995
    $AsyncCtx3 = _emscripten_alloc_async_context(268, sp) | 0; //@line 20996
    $212 = FUNCTION_TABLE_iii[$211 & 31]($7, $8) | 0; //@line 20997
    if (___async) {
     label = 18; //@line 21000
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 21003
    if (($212 & 7) == 7) {
     HEAP8[$34 >> 0] = HEAP8[$8 >> 0] | 0; //@line 21008
     HEAP32[$35 >> 2] = HEAP32[$33 >> 2]; //@line 21010
     HEAP8[$36 >> 0] = HEAP8[$32 >> 0] | 0; //@line 21012
    }
    $286 = HEAP8[$29 >> 0] | 0; //@line 21015
    $287 = $286 & 255; //@line 21016
    if (((-128 - (HEAP8[$28 >> 0] | 0) & 255) + -1 | 0) > ($287 | 0)) {
     HEAP8[$0 + 4 + $287 >> 0] = 5; //@line 21024
     HEAP8[$29 >> 0] = $286 + 2 << 24 >> 24; //@line 21026
     HEAP8[($286 + 1 & 255) + ($0 + 4) >> 0] = $212; //@line 21029
     HEAP8[$37 >> 0] = 1; //@line 21030
     HEAP8[$0 >> 0] = 1; //@line 21031
     $$0$i104 = 0; //@line 21032
    } else {
     $$0$i104 = -1e3; //@line 21034
    }
    $$0$be = $201; //@line 21036
    $$096$be = $$0$i104; //@line 21036
    break;
   }
  case 6:
   {
    $298 = HEAP8[$29 >> 0] | 0; //@line 21041
    $299 = $298 & 255; //@line 21042
    if (((-128 - (HEAP8[$28 >> 0] | 0) & 255) + -2 | 0) > ($299 | 0)) {
     HEAP8[$0 + 4 + $299 >> 0] = 6; //@line 21050
     HEAP8[($298 + 1 & 255) + ($0 + 4) >> 0] = -1; //@line 21054
     HEAP8[$29 >> 0] = $298 + 3 << 24 >> 24; //@line 21056
     HEAP8[($298 + 2 & 255) + ($0 + 4) >> 0] = $4; //@line 21059
     HEAP8[$0 >> 0] = 1; //@line 21060
     $$0$be = $49; //@line 21061
     $$096$be = 0; //@line 21061
    } else {
     $$0$be = $49; //@line 21063
     $$096$be = -1e3; //@line 21063
    }
    break;
   }
  case 7:
   {
    HEAP8[$38 >> 0] = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 21072
    HEAP32[$8 >> 2] = $9; //@line 21073
    HEAP32[$9 >> 2] = (HEAPU8[$1 + ($$0116 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0116 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0116 + 2 & 255) >> 0])) * 100; //@line 21094
    HEAP32[$39 >> 2] = 0; //@line 21095
    $336 = $$0116 + 6 << 24 >> 24; //@line 21096
    HEAP8[$40 >> 0] = HEAP8[$1 + ($$0116 + 5 & 255) >> 0] | 0; //@line 21100
    $342 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 21103
    $AsyncCtx7 = _emscripten_alloc_async_context(268, sp) | 0; //@line 21104
    $343 = FUNCTION_TABLE_iii[$342 & 31]($7, $8) | 0; //@line 21105
    if (___async) {
     label = 27; //@line 21108
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 21111
    $412 = HEAP8[$29 >> 0] | 0; //@line 21113
    $413 = $412 & 255; //@line 21114
    if (((-128 - (HEAP8[$28 >> 0] | 0) & 255) + -1 | 0) > ($413 | 0)) {
     HEAP8[$0 + 4 + $413 >> 0] = 7; //@line 21125
     HEAP8[$29 >> 0] = $412 + 2 << 24 >> 24; //@line 21126
     HEAP8[($412 + 1 & 255) + ($0 + 4) >> 0] = $343; //@line 21127
     HEAP8[$0 >> 0] = 1; //@line 21128
     $$0$i108 = 0; //@line 21129
    } else {
     $$0$i108 = -1e3; //@line 21131
    }
    $$0$be = $336; //@line 21133
    $$096$be = $$0$i108; //@line 21133
    break;
   }
  case 8:
   {
    $423 = $$0116 + 2 << 24 >> 24; //@line 21137
    $427 = HEAP8[$1 + ($49 & 255) >> 0] & 15; //@line 21141
    $431 = ($427 + ($427 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 21146
    HEAP32[$41 >> 2] = $431; //@line 21147
    HEAP32[$42 >> 2] = $431 + 1e3; //@line 21149
    $434 = HEAP8[$29 >> 0] | 0; //@line 21151
    if (($434 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
     HEAP8[$29 >> 0] = $434 + 1 << 24 >> 24; //@line 21158
     HEAP8[($434 & 255) + ($0 + 4) >> 0] = 8; //@line 21159
     HEAP8[$37 >> 0] = 1; //@line 21160
     HEAP8[$0 >> 0] = 1; //@line 21161
     $$0$be = $423; //@line 21162
     $$096$be = 0; //@line 21162
    } else {
     $$0$be = $423; //@line 21164
     $$096$be = -1e3; //@line 21164
    }
    break;
   }
  case 9:
   {
    $440 = $$0116 + 2 << 24 >> 24; //@line 21169
    $443 = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 21172
    HEAP8[$8 >> 0] = 0; //@line 21173
    $444 = $443 & 255; //@line 21174
    HEAP8[$43 >> 0] = $444 >>> 5 & 1; //@line 21178
    if ($444 & 16 | 0) {
     HEAP8[$8 >> 0] = 1; //@line 21182
    }
    HEAP8[$44 >> 0] = $444 & 15; //@line 21186
    $453 = HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] | 0; //@line 21189
    $AsyncCtx11 = _emscripten_alloc_async_context(272, sp) | 0; //@line 21190
    $454 = FUNCTION_TABLE_iii[$453 & 31]($7, $8) | 0; //@line 21191
    if (___async) {
     label = 36; //@line 21194
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 21197
    if ($454) {
     HEAP8[$21 >> 0] = HEAP8[$8 >> 0] | 0; //@line 21200
     HEAP8[$45 >> 0] = HEAP8[$43 >> 0] | 0; //@line 21202
     HEAPF32[$46 >> 2] = +(HEAPU8[13572 + (HEAPU8[$44 >> 0] | 0) >> 0] | 0); //@line 21208
     $531 = HEAP8[$29 >> 0] | 0; //@line 21210
     if (($531 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
      HEAP8[$29 >> 0] = $531 + 1 << 24 >> 24; //@line 21217
      HEAP8[($531 & 255) + ($0 + 4) >> 0] = 9; //@line 21218
      HEAP8[$0 >> 0] = 1; //@line 21219
      $$2 = 0; //@line 21220
     } else {
      $$2 = -1e3; //@line 21222
     }
    } else {
     $$2 = $$096115; //@line 21225
    }
    $$0$be = $440; //@line 21227
    $$096$be = $$2; //@line 21227
    break;
   }
  case 10:
   {
    HEAP8[$8 >> 0] = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 21235
    $553 = $$0116 + 5 << 24 >> 24; //@line 21248
    HEAP32[$47 >> 2] = (HEAPU8[$1 + ($$0116 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0116 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0116 + 2 & 255) >> 0])) * 100; //@line 21256
    $563 = HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] | 0; //@line 21259
    $AsyncCtx15 = _emscripten_alloc_async_context(268, sp) | 0; //@line 21260
    $564 = FUNCTION_TABLE_iii[$563 & 31]($7, $8) | 0; //@line 21261
    if (___async) {
     label = 42; //@line 21264
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 21267
    $633 = HEAP8[$29 >> 0] | 0; //@line 21269
    if (($633 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
     HEAP8[($633 & 255) + ($0 + 4) >> 0] = 10; //@line 21276
     HEAP8[$29 >> 0] = $633 + 2 << 24 >> 24; //@line 21278
     HEAP8[($633 + 1 & 255) + ($0 + 4) >> 0] = $564; //@line 21281
     HEAP8[$37 >> 0] = 1; //@line 21282
     HEAP8[$0 >> 0] = 1; //@line 21283
     $$0$i98 = 0; //@line 21284
    } else {
     $$0$i98 = -1e3; //@line 21286
    }
    $$0$be = $553; //@line 21288
    $$096$be = $$0$i98; //@line 21288
    break;
   }
  default:
   {
    $$0$be = $49; //@line 21292
    $$096$be = -1013; //@line 21292
   }
  }
  if (($$0$be & 255) < ($3 & 255)) {
   $$0116 = $$0$be; //@line 21297
   $$096115 = $$096$be; //@line 21297
  } else {
   $$096$lcssa = $$096$be; //@line 21299
   label = 47; //@line 21300
   break;
  }
 }
 if ((label | 0) == 6) {
  HEAP32[$AsyncCtx >> 2] = 590; //@line 21305
  HEAP32[$AsyncCtx + 4 >> 2] = $25; //@line 21307
  HEAP32[$AsyncCtx + 8 >> 2] = $46; //@line 21309
  HEAP32[$AsyncCtx + 12 >> 2] = $36; //@line 21311
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 21313
  HEAP32[$AsyncCtx + 20 >> 2] = $13; //@line 21315
  HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 21317
  HEAP32[$AsyncCtx + 28 >> 2] = $26; //@line 21319
  HEAP32[$AsyncCtx + 32 >> 2] = $37; //@line 21321
  HEAP8[$AsyncCtx + 36 >> 0] = $3; //@line 21323
  HEAP32[$AsyncCtx + 40 >> 2] = $45; //@line 21325
  HEAP32[$AsyncCtx + 44 >> 2] = $15; //@line 21327
  HEAP8[$AsyncCtx + 48 >> 0] = $2; //@line 21329
  HEAP8[$AsyncCtx + 49 >> 0] = $4; //@line 21331
  HEAP32[$AsyncCtx + 52 >> 2] = $6; //@line 21333
  HEAP32[$AsyncCtx + 56 >> 2] = $8; //@line 21335
  HEAP32[$AsyncCtx + 60 >> 2] = $7; //@line 21337
  HEAP32[$AsyncCtx + 64 >> 2] = $7; //@line 21339
  HEAP32[$AsyncCtx + 68 >> 2] = $9; //@line 21341
  HEAP32[$AsyncCtx + 72 >> 2] = $35; //@line 21343
  HEAP32[$AsyncCtx + 76 >> 2] = $44; //@line 21345
  HEAP32[$AsyncCtx + 80 >> 2] = $28; //@line 21347
  HEAP32[$AsyncCtx + 84 >> 2] = $16; //@line 21349
  HEAP32[$AsyncCtx + 88 >> 2] = $8; //@line 21351
  HEAP32[$AsyncCtx + 92 >> 2] = $29; //@line 21353
  HEAP32[$AsyncCtx + 96 >> 2] = $47; //@line 21355
  HEAP32[$AsyncCtx + 100 >> 2] = $7; //@line 21357
  HEAP32[$AsyncCtx + 104 >> 2] = $8; //@line 21359
  HEAP32[$AsyncCtx + 108 >> 2] = $8; //@line 21361
  HEAP32[$AsyncCtx + 112 >> 2] = $8; //@line 21363
  HEAP32[$AsyncCtx + 116 >> 2] = $27; //@line 21365
  HEAP32[$AsyncCtx + 120 >> 2] = $9; //@line 21367
  HEAP32[$AsyncCtx + 124 >> 2] = $8; //@line 21369
  HEAP32[$AsyncCtx + 128 >> 2] = $8; //@line 21371
  HEAP32[$AsyncCtx + 132 >> 2] = $38; //@line 21373
  HEAP32[$AsyncCtx + 136 >> 2] = $7; //@line 21375
  HEAP32[$AsyncCtx + 140 >> 2] = $8; //@line 21377
  HEAP32[$AsyncCtx + 144 >> 2] = $17; //@line 21379
  HEAP32[$AsyncCtx + 148 >> 2] = $31; //@line 21381
  HEAP32[$AsyncCtx + 152 >> 2] = $19; //@line 21383
  HEAP32[$AsyncCtx + 156 >> 2] = $8; //@line 21385
  HEAP32[$AsyncCtx + 160 >> 2] = $7; //@line 21387
  HEAP32[$AsyncCtx + 164 >> 2] = $8; //@line 21389
  HEAP32[$AsyncCtx + 168 >> 2] = $10; //@line 21391
  HEAP32[$AsyncCtx + 172 >> 2] = $20; //@line 21393
  HEAP32[$AsyncCtx + 176 >> 2] = $8; //@line 21395
  HEAP32[$AsyncCtx + 180 >> 2] = $40; //@line 21397
  HEAP32[$AsyncCtx + 184 >> 2] = $39; //@line 21399
  HEAP32[$AsyncCtx + 188 >> 2] = $11; //@line 21401
  HEAP32[$AsyncCtx + 192 >> 2] = $$096115; //@line 21403
  HEAP32[$AsyncCtx + 196 >> 2] = $0; //@line 21405
  HEAP32[$AsyncCtx + 200 >> 2] = $18; //@line 21407
  HEAP32[$AsyncCtx + 204 >> 2] = $9; //@line 21409
  HEAP32[$AsyncCtx + 208 >> 2] = $60; //@line 21411
  HEAP32[$AsyncCtx + 212 >> 2] = $12; //@line 21413
  HEAP32[$AsyncCtx + 216 >> 2] = $30; //@line 21415
  HEAP32[$AsyncCtx + 220 >> 2] = $7; //@line 21417
  HEAP32[$AsyncCtx + 224 >> 2] = $23; //@line 21419
  HEAP32[$AsyncCtx + 228 >> 2] = $43; //@line 21421
  HEAP32[$AsyncCtx + 232 >> 2] = $34; //@line 21423
  HEAP32[$AsyncCtx + 236 >> 2] = $8; //@line 21425
  HEAP32[$AsyncCtx + 240 >> 2] = $24; //@line 21427
  HEAP32[$AsyncCtx + 244 >> 2] = $21; //@line 21429
  HEAP32[$AsyncCtx + 248 >> 2] = $32; //@line 21431
  HEAP32[$AsyncCtx + 252 >> 2] = $42; //@line 21433
  HEAP32[$AsyncCtx + 256 >> 2] = $9; //@line 21435
  HEAP32[$AsyncCtx + 260 >> 2] = $41; //@line 21437
  HEAP32[$AsyncCtx + 264 >> 2] = $33; //@line 21439
  HEAP32[$AsyncCtx + 268 >> 2] = $22; //@line 21441
  sp = STACKTOP; //@line 21442
  STACKTOP = sp; //@line 21443
  return 0; //@line 21443
 } else if ((label | 0) == 18) {
  HEAP32[$AsyncCtx3 >> 2] = 591; //@line 21446
  HEAP32[$AsyncCtx3 + 4 >> 2] = $25; //@line 21448
  HEAP32[$AsyncCtx3 + 8 >> 2] = $46; //@line 21450
  HEAP32[$AsyncCtx3 + 12 >> 2] = $36; //@line 21452
  HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 21454
  HEAP32[$AsyncCtx3 + 20 >> 2] = $37; //@line 21456
  HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 21458
  HEAP32[$AsyncCtx3 + 28 >> 2] = $26; //@line 21460
  HEAP8[$AsyncCtx3 + 32 >> 0] = $2; //@line 21462
  HEAP8[$AsyncCtx3 + 33 >> 0] = $3; //@line 21464
  HEAP32[$AsyncCtx3 + 36 >> 2] = $45; //@line 21466
  HEAP32[$AsyncCtx3 + 40 >> 2] = $13; //@line 21468
  HEAP32[$AsyncCtx3 + 44 >> 2] = $15; //@line 21470
  HEAP8[$AsyncCtx3 + 48 >> 0] = $4; //@line 21472
  HEAP32[$AsyncCtx3 + 52 >> 2] = $6; //@line 21474
  HEAP32[$AsyncCtx3 + 56 >> 2] = $8; //@line 21476
  HEAP32[$AsyncCtx3 + 60 >> 2] = $7; //@line 21478
  HEAP32[$AsyncCtx3 + 64 >> 2] = $7; //@line 21480
  HEAP8[$AsyncCtx3 + 68 >> 0] = $201; //@line 21482
  HEAP32[$AsyncCtx3 + 72 >> 2] = $9; //@line 21484
  HEAP32[$AsyncCtx3 + 76 >> 2] = $35; //@line 21486
  HEAP32[$AsyncCtx3 + 80 >> 2] = $44; //@line 21488
  HEAP32[$AsyncCtx3 + 84 >> 2] = $28; //@line 21490
  HEAP32[$AsyncCtx3 + 88 >> 2] = $16; //@line 21492
  HEAP32[$AsyncCtx3 + 92 >> 2] = $8; //@line 21494
  HEAP32[$AsyncCtx3 + 96 >> 2] = $29; //@line 21496
  HEAP32[$AsyncCtx3 + 100 >> 2] = $47; //@line 21498
  HEAP32[$AsyncCtx3 + 104 >> 2] = $7; //@line 21500
  HEAP32[$AsyncCtx3 + 108 >> 2] = $8; //@line 21502
  HEAP32[$AsyncCtx3 + 112 >> 2] = $8; //@line 21504
  HEAP32[$AsyncCtx3 + 116 >> 2] = $9; //@line 21506
  HEAP32[$AsyncCtx3 + 120 >> 2] = $8; //@line 21508
  HEAP32[$AsyncCtx3 + 124 >> 2] = $27; //@line 21510
  HEAP32[$AsyncCtx3 + 128 >> 2] = $8; //@line 21512
  HEAP32[$AsyncCtx3 + 132 >> 2] = $38; //@line 21514
  HEAP32[$AsyncCtx3 + 136 >> 2] = $8; //@line 21516
  HEAP32[$AsyncCtx3 + 140 >> 2] = $7; //@line 21518
  HEAP32[$AsyncCtx3 + 144 >> 2] = $8; //@line 21520
  HEAP32[$AsyncCtx3 + 148 >> 2] = $17; //@line 21522
  HEAP32[$AsyncCtx3 + 152 >> 2] = $31; //@line 21524
  HEAP32[$AsyncCtx3 + 156 >> 2] = $19; //@line 21526
  HEAP32[$AsyncCtx3 + 160 >> 2] = $8; //@line 21528
  HEAP32[$AsyncCtx3 + 164 >> 2] = $7; //@line 21530
  HEAP32[$AsyncCtx3 + 168 >> 2] = $8; //@line 21532
  HEAP32[$AsyncCtx3 + 172 >> 2] = $8; //@line 21534
  HEAP32[$AsyncCtx3 + 176 >> 2] = $10; //@line 21536
  HEAP32[$AsyncCtx3 + 180 >> 2] = $20; //@line 21538
  HEAP32[$AsyncCtx3 + 184 >> 2] = $40; //@line 21540
  HEAP32[$AsyncCtx3 + 188 >> 2] = $39; //@line 21542
  HEAP32[$AsyncCtx3 + 192 >> 2] = $11; //@line 21544
  HEAP32[$AsyncCtx3 + 196 >> 2] = $0; //@line 21546
  HEAP32[$AsyncCtx3 + 200 >> 2] = $18; //@line 21548
  HEAP32[$AsyncCtx3 + 204 >> 2] = $9; //@line 21550
  HEAP32[$AsyncCtx3 + 208 >> 2] = $12; //@line 21552
  HEAP32[$AsyncCtx3 + 212 >> 2] = $30; //@line 21554
  HEAP32[$AsyncCtx3 + 216 >> 2] = $7; //@line 21556
  HEAP32[$AsyncCtx3 + 220 >> 2] = $23; //@line 21558
  HEAP32[$AsyncCtx3 + 224 >> 2] = $43; //@line 21560
  HEAP32[$AsyncCtx3 + 228 >> 2] = $34; //@line 21562
  HEAP32[$AsyncCtx3 + 232 >> 2] = $8; //@line 21564
  HEAP32[$AsyncCtx3 + 236 >> 2] = $24; //@line 21566
  HEAP32[$AsyncCtx3 + 240 >> 2] = $21; //@line 21568
  HEAP32[$AsyncCtx3 + 244 >> 2] = $32; //@line 21570
  HEAP32[$AsyncCtx3 + 248 >> 2] = $42; //@line 21572
  HEAP32[$AsyncCtx3 + 252 >> 2] = $9; //@line 21574
  HEAP32[$AsyncCtx3 + 256 >> 2] = $41; //@line 21576
  HEAP32[$AsyncCtx3 + 260 >> 2] = $33; //@line 21578
  HEAP32[$AsyncCtx3 + 264 >> 2] = $22; //@line 21580
  sp = STACKTOP; //@line 21581
  STACKTOP = sp; //@line 21582
  return 0; //@line 21582
 } else if ((label | 0) == 27) {
  HEAP32[$AsyncCtx7 >> 2] = 592; //@line 21585
  HEAP32[$AsyncCtx7 + 4 >> 2] = $25; //@line 21587
  HEAP32[$AsyncCtx7 + 8 >> 2] = $46; //@line 21589
  HEAP32[$AsyncCtx7 + 12 >> 2] = $36; //@line 21591
  HEAP32[$AsyncCtx7 + 16 >> 2] = $0; //@line 21593
  HEAP32[$AsyncCtx7 + 20 >> 2] = $37; //@line 21595
  HEAP32[$AsyncCtx7 + 24 >> 2] = $1; //@line 21597
  HEAP32[$AsyncCtx7 + 28 >> 2] = $26; //@line 21599
  HEAP8[$AsyncCtx7 + 32 >> 0] = $2; //@line 21601
  HEAP8[$AsyncCtx7 + 33 >> 0] = $3; //@line 21603
  HEAP32[$AsyncCtx7 + 36 >> 2] = $45; //@line 21605
  HEAP32[$AsyncCtx7 + 40 >> 2] = $13; //@line 21607
  HEAP32[$AsyncCtx7 + 44 >> 2] = $15; //@line 21609
  HEAP8[$AsyncCtx7 + 48 >> 0] = $4; //@line 21611
  HEAP32[$AsyncCtx7 + 52 >> 2] = $6; //@line 21613
  HEAP32[$AsyncCtx7 + 56 >> 2] = $8; //@line 21615
  HEAP32[$AsyncCtx7 + 60 >> 2] = $7; //@line 21617
  HEAP32[$AsyncCtx7 + 64 >> 2] = $7; //@line 21619
  HEAP32[$AsyncCtx7 + 68 >> 2] = $9; //@line 21621
  HEAP32[$AsyncCtx7 + 72 >> 2] = $35; //@line 21623
  HEAP32[$AsyncCtx7 + 76 >> 2] = $44; //@line 21625
  HEAP32[$AsyncCtx7 + 80 >> 2] = $28; //@line 21627
  HEAP32[$AsyncCtx7 + 84 >> 2] = $16; //@line 21629
  HEAP32[$AsyncCtx7 + 88 >> 2] = $8; //@line 21631
  HEAP32[$AsyncCtx7 + 92 >> 2] = $29; //@line 21633
  HEAP32[$AsyncCtx7 + 96 >> 2] = $47; //@line 21635
  HEAP32[$AsyncCtx7 + 100 >> 2] = $7; //@line 21637
  HEAP32[$AsyncCtx7 + 104 >> 2] = $8; //@line 21639
  HEAP32[$AsyncCtx7 + 108 >> 2] = $8; //@line 21641
  HEAP32[$AsyncCtx7 + 112 >> 2] = $9; //@line 21643
  HEAP32[$AsyncCtx7 + 116 >> 2] = $8; //@line 21645
  HEAP32[$AsyncCtx7 + 120 >> 2] = $27; //@line 21647
  HEAP32[$AsyncCtx7 + 124 >> 2] = $8; //@line 21649
  HEAP32[$AsyncCtx7 + 128 >> 2] = $38; //@line 21651
  HEAP32[$AsyncCtx7 + 132 >> 2] = $8; //@line 21653
  HEAP32[$AsyncCtx7 + 136 >> 2] = $7; //@line 21655
  HEAP32[$AsyncCtx7 + 140 >> 2] = $8; //@line 21657
  HEAP32[$AsyncCtx7 + 144 >> 2] = $17; //@line 21659
  HEAP32[$AsyncCtx7 + 148 >> 2] = $31; //@line 21661
  HEAP32[$AsyncCtx7 + 152 >> 2] = $19; //@line 21663
  HEAP32[$AsyncCtx7 + 156 >> 2] = $8; //@line 21665
  HEAP32[$AsyncCtx7 + 160 >> 2] = $7; //@line 21667
  HEAP32[$AsyncCtx7 + 164 >> 2] = $8; //@line 21669
  HEAP32[$AsyncCtx7 + 168 >> 2] = $8; //@line 21671
  HEAP32[$AsyncCtx7 + 172 >> 2] = $10; //@line 21673
  HEAP32[$AsyncCtx7 + 176 >> 2] = $20; //@line 21675
  HEAP32[$AsyncCtx7 + 180 >> 2] = $40; //@line 21677
  HEAP32[$AsyncCtx7 + 184 >> 2] = $39; //@line 21679
  HEAP32[$AsyncCtx7 + 188 >> 2] = $11; //@line 21681
  HEAP32[$AsyncCtx7 + 192 >> 2] = $0; //@line 21683
  HEAP32[$AsyncCtx7 + 196 >> 2] = $18; //@line 21685
  HEAP32[$AsyncCtx7 + 200 >> 2] = $9; //@line 21687
  HEAP32[$AsyncCtx7 + 204 >> 2] = $12; //@line 21689
  HEAP32[$AsyncCtx7 + 208 >> 2] = $30; //@line 21691
  HEAP32[$AsyncCtx7 + 212 >> 2] = $7; //@line 21693
  HEAP8[$AsyncCtx7 + 216 >> 0] = $336; //@line 21695
  HEAP32[$AsyncCtx7 + 220 >> 2] = $23; //@line 21697
  HEAP32[$AsyncCtx7 + 224 >> 2] = $43; //@line 21699
  HEAP32[$AsyncCtx7 + 228 >> 2] = $34; //@line 21701
  HEAP32[$AsyncCtx7 + 232 >> 2] = $8; //@line 21703
  HEAP32[$AsyncCtx7 + 236 >> 2] = $24; //@line 21705
  HEAP32[$AsyncCtx7 + 240 >> 2] = $21; //@line 21707
  HEAP32[$AsyncCtx7 + 244 >> 2] = $32; //@line 21709
  HEAP32[$AsyncCtx7 + 248 >> 2] = $42; //@line 21711
  HEAP32[$AsyncCtx7 + 252 >> 2] = $9; //@line 21713
  HEAP32[$AsyncCtx7 + 256 >> 2] = $41; //@line 21715
  HEAP32[$AsyncCtx7 + 260 >> 2] = $33; //@line 21717
  HEAP32[$AsyncCtx7 + 264 >> 2] = $22; //@line 21719
  sp = STACKTOP; //@line 21720
  STACKTOP = sp; //@line 21721
  return 0; //@line 21721
 } else if ((label | 0) == 36) {
  HEAP32[$AsyncCtx11 >> 2] = 593; //@line 21724
  HEAP32[$AsyncCtx11 + 4 >> 2] = $25; //@line 21726
  HEAP32[$AsyncCtx11 + 8 >> 2] = $46; //@line 21728
  HEAP32[$AsyncCtx11 + 12 >> 2] = $36; //@line 21730
  HEAP8[$AsyncCtx11 + 16 >> 0] = $440; //@line 21732
  HEAP32[$AsyncCtx11 + 20 >> 2] = $0; //@line 21734
  HEAP32[$AsyncCtx11 + 24 >> 2] = $37; //@line 21736
  HEAP32[$AsyncCtx11 + 28 >> 2] = $1; //@line 21738
  HEAP32[$AsyncCtx11 + 32 >> 2] = $26; //@line 21740
  HEAP8[$AsyncCtx11 + 36 >> 0] = $2; //@line 21742
  HEAP8[$AsyncCtx11 + 37 >> 0] = $3; //@line 21744
  HEAP32[$AsyncCtx11 + 40 >> 2] = $45; //@line 21746
  HEAP32[$AsyncCtx11 + 44 >> 2] = $13; //@line 21748
  HEAP32[$AsyncCtx11 + 48 >> 2] = $15; //@line 21750
  HEAP8[$AsyncCtx11 + 52 >> 0] = $4; //@line 21752
  HEAP32[$AsyncCtx11 + 56 >> 2] = $6; //@line 21754
  HEAP32[$AsyncCtx11 + 60 >> 2] = $8; //@line 21756
  HEAP32[$AsyncCtx11 + 64 >> 2] = $7; //@line 21758
  HEAP32[$AsyncCtx11 + 68 >> 2] = $7; //@line 21760
  HEAP32[$AsyncCtx11 + 72 >> 2] = $9; //@line 21762
  HEAP32[$AsyncCtx11 + 76 >> 2] = $35; //@line 21764
  HEAP32[$AsyncCtx11 + 80 >> 2] = $44; //@line 21766
  HEAP32[$AsyncCtx11 + 84 >> 2] = $28; //@line 21768
  HEAP32[$AsyncCtx11 + 88 >> 2] = $16; //@line 21770
  HEAP32[$AsyncCtx11 + 92 >> 2] = $8; //@line 21772
  HEAP32[$AsyncCtx11 + 96 >> 2] = $29; //@line 21774
  HEAP32[$AsyncCtx11 + 100 >> 2] = $47; //@line 21776
  HEAP32[$AsyncCtx11 + 104 >> 2] = $7; //@line 21778
  HEAP32[$AsyncCtx11 + 108 >> 2] = $8; //@line 21780
  HEAP32[$AsyncCtx11 + 112 >> 2] = $8; //@line 21782
  HEAP32[$AsyncCtx11 + 116 >> 2] = $9; //@line 21784
  HEAP32[$AsyncCtx11 + 120 >> 2] = $8; //@line 21786
  HEAP32[$AsyncCtx11 + 124 >> 2] = $27; //@line 21788
  HEAP32[$AsyncCtx11 + 128 >> 2] = $8; //@line 21790
  HEAP32[$AsyncCtx11 + 132 >> 2] = $38; //@line 21792
  HEAP32[$AsyncCtx11 + 136 >> 2] = $8; //@line 21794
  HEAP32[$AsyncCtx11 + 140 >> 2] = $7; //@line 21796
  HEAP32[$AsyncCtx11 + 144 >> 2] = $8; //@line 21798
  HEAP32[$AsyncCtx11 + 148 >> 2] = $17; //@line 21800
  HEAP32[$AsyncCtx11 + 152 >> 2] = $31; //@line 21802
  HEAP32[$AsyncCtx11 + 156 >> 2] = $19; //@line 21804
  HEAP32[$AsyncCtx11 + 160 >> 2] = $8; //@line 21806
  HEAP32[$AsyncCtx11 + 164 >> 2] = $7; //@line 21808
  HEAP32[$AsyncCtx11 + 168 >> 2] = $8; //@line 21810
  HEAP32[$AsyncCtx11 + 172 >> 2] = $8; //@line 21812
  HEAP32[$AsyncCtx11 + 176 >> 2] = $10; //@line 21814
  HEAP32[$AsyncCtx11 + 180 >> 2] = $20; //@line 21816
  HEAP32[$AsyncCtx11 + 184 >> 2] = $40; //@line 21818
  HEAP32[$AsyncCtx11 + 188 >> 2] = $39; //@line 21820
  HEAP32[$AsyncCtx11 + 192 >> 2] = $11; //@line 21822
  HEAP32[$AsyncCtx11 + 196 >> 2] = $$096115; //@line 21824
  HEAP32[$AsyncCtx11 + 200 >> 2] = $0; //@line 21826
  HEAP32[$AsyncCtx11 + 204 >> 2] = $18; //@line 21828
  HEAP32[$AsyncCtx11 + 208 >> 2] = $9; //@line 21830
  HEAP32[$AsyncCtx11 + 212 >> 2] = $12; //@line 21832
  HEAP32[$AsyncCtx11 + 216 >> 2] = $30; //@line 21834
  HEAP32[$AsyncCtx11 + 220 >> 2] = $7; //@line 21836
  HEAP32[$AsyncCtx11 + 224 >> 2] = $23; //@line 21838
  HEAP32[$AsyncCtx11 + 228 >> 2] = $43; //@line 21840
  HEAP32[$AsyncCtx11 + 232 >> 2] = $34; //@line 21842
  HEAP32[$AsyncCtx11 + 236 >> 2] = $8; //@line 21844
  HEAP32[$AsyncCtx11 + 240 >> 2] = $24; //@line 21846
  HEAP32[$AsyncCtx11 + 244 >> 2] = $21; //@line 21848
  HEAP32[$AsyncCtx11 + 248 >> 2] = $32; //@line 21850
  HEAP32[$AsyncCtx11 + 252 >> 2] = $42; //@line 21852
  HEAP32[$AsyncCtx11 + 256 >> 2] = $9; //@line 21854
  HEAP32[$AsyncCtx11 + 260 >> 2] = $41; //@line 21856
  HEAP32[$AsyncCtx11 + 264 >> 2] = $33; //@line 21858
  HEAP32[$AsyncCtx11 + 268 >> 2] = $22; //@line 21860
  sp = STACKTOP; //@line 21861
  STACKTOP = sp; //@line 21862
  return 0; //@line 21862
 } else if ((label | 0) == 42) {
  HEAP32[$AsyncCtx15 >> 2] = 594; //@line 21865
  HEAP32[$AsyncCtx15 + 4 >> 2] = $25; //@line 21867
  HEAP32[$AsyncCtx15 + 8 >> 2] = $46; //@line 21869
  HEAP32[$AsyncCtx15 + 12 >> 2] = $36; //@line 21871
  HEAP32[$AsyncCtx15 + 16 >> 2] = $0; //@line 21873
  HEAP32[$AsyncCtx15 + 20 >> 2] = $37; //@line 21875
  HEAP32[$AsyncCtx15 + 24 >> 2] = $1; //@line 21877
  HEAP32[$AsyncCtx15 + 28 >> 2] = $26; //@line 21879
  HEAP8[$AsyncCtx15 + 32 >> 0] = $2; //@line 21881
  HEAP8[$AsyncCtx15 + 33 >> 0] = $3; //@line 21883
  HEAP32[$AsyncCtx15 + 36 >> 2] = $45; //@line 21885
  HEAP32[$AsyncCtx15 + 40 >> 2] = $13; //@line 21887
  HEAP32[$AsyncCtx15 + 44 >> 2] = $15; //@line 21889
  HEAP8[$AsyncCtx15 + 48 >> 0] = $4; //@line 21891
  HEAP32[$AsyncCtx15 + 52 >> 2] = $6; //@line 21893
  HEAP32[$AsyncCtx15 + 56 >> 2] = $8; //@line 21895
  HEAP32[$AsyncCtx15 + 60 >> 2] = $7; //@line 21897
  HEAP32[$AsyncCtx15 + 64 >> 2] = $7; //@line 21899
  HEAP32[$AsyncCtx15 + 68 >> 2] = $9; //@line 21901
  HEAP32[$AsyncCtx15 + 72 >> 2] = $35; //@line 21903
  HEAP32[$AsyncCtx15 + 76 >> 2] = $44; //@line 21905
  HEAP32[$AsyncCtx15 + 80 >> 2] = $28; //@line 21907
  HEAP32[$AsyncCtx15 + 84 >> 2] = $16; //@line 21909
  HEAP32[$AsyncCtx15 + 88 >> 2] = $8; //@line 21911
  HEAP32[$AsyncCtx15 + 92 >> 2] = $29; //@line 21913
  HEAP32[$AsyncCtx15 + 96 >> 2] = $47; //@line 21915
  HEAP32[$AsyncCtx15 + 100 >> 2] = $7; //@line 21917
  HEAP32[$AsyncCtx15 + 104 >> 2] = $8; //@line 21919
  HEAP32[$AsyncCtx15 + 108 >> 2] = $8; //@line 21921
  HEAP32[$AsyncCtx15 + 112 >> 2] = $9; //@line 21923
  HEAP32[$AsyncCtx15 + 116 >> 2] = $8; //@line 21925
  HEAP32[$AsyncCtx15 + 120 >> 2] = $27; //@line 21927
  HEAP32[$AsyncCtx15 + 124 >> 2] = $8; //@line 21929
  HEAP32[$AsyncCtx15 + 128 >> 2] = $38; //@line 21931
  HEAP32[$AsyncCtx15 + 132 >> 2] = $8; //@line 21933
  HEAP32[$AsyncCtx15 + 136 >> 2] = $7; //@line 21935
  HEAP32[$AsyncCtx15 + 140 >> 2] = $8; //@line 21937
  HEAP32[$AsyncCtx15 + 144 >> 2] = $17; //@line 21939
  HEAP32[$AsyncCtx15 + 148 >> 2] = $31; //@line 21941
  HEAP32[$AsyncCtx15 + 152 >> 2] = $19; //@line 21943
  HEAP32[$AsyncCtx15 + 156 >> 2] = $8; //@line 21945
  HEAP32[$AsyncCtx15 + 160 >> 2] = $7; //@line 21947
  HEAP32[$AsyncCtx15 + 164 >> 2] = $8; //@line 21949
  HEAP32[$AsyncCtx15 + 168 >> 2] = $8; //@line 21951
  HEAP32[$AsyncCtx15 + 172 >> 2] = $10; //@line 21953
  HEAP32[$AsyncCtx15 + 176 >> 2] = $20; //@line 21955
  HEAP8[$AsyncCtx15 + 180 >> 0] = $553; //@line 21957
  HEAP32[$AsyncCtx15 + 184 >> 2] = $40; //@line 21959
  HEAP32[$AsyncCtx15 + 188 >> 2] = $39; //@line 21961
  HEAP32[$AsyncCtx15 + 192 >> 2] = $11; //@line 21963
  HEAP32[$AsyncCtx15 + 196 >> 2] = $0; //@line 21965
  HEAP32[$AsyncCtx15 + 200 >> 2] = $18; //@line 21967
  HEAP32[$AsyncCtx15 + 204 >> 2] = $9; //@line 21969
  HEAP32[$AsyncCtx15 + 208 >> 2] = $12; //@line 21971
  HEAP32[$AsyncCtx15 + 212 >> 2] = $30; //@line 21973
  HEAP32[$AsyncCtx15 + 216 >> 2] = $7; //@line 21975
  HEAP32[$AsyncCtx15 + 220 >> 2] = $23; //@line 21977
  HEAP32[$AsyncCtx15 + 224 >> 2] = $43; //@line 21979
  HEAP32[$AsyncCtx15 + 228 >> 2] = $34; //@line 21981
  HEAP32[$AsyncCtx15 + 232 >> 2] = $8; //@line 21983
  HEAP32[$AsyncCtx15 + 236 >> 2] = $24; //@line 21985
  HEAP32[$AsyncCtx15 + 240 >> 2] = $21; //@line 21987
  HEAP32[$AsyncCtx15 + 244 >> 2] = $32; //@line 21989
  HEAP32[$AsyncCtx15 + 248 >> 2] = $42; //@line 21991
  HEAP32[$AsyncCtx15 + 252 >> 2] = $9; //@line 21993
  HEAP32[$AsyncCtx15 + 256 >> 2] = $41; //@line 21995
  HEAP32[$AsyncCtx15 + 260 >> 2] = $33; //@line 21997
  HEAP32[$AsyncCtx15 + 264 >> 2] = $22; //@line 21999
  sp = STACKTOP; //@line 22000
  STACKTOP = sp; //@line 22001
  return 0; //@line 22001
 } else if ((label | 0) == 47) {
  STACKTOP = sp; //@line 22004
  return $$096$lcssa | 0; //@line 22004
 }
 return 0; //@line 22006
}
function __ZN12LoRaWANStack18lora_state_machineEv($0) {
 $0 = $0 | 0;
 var $$029 = 0, $$1 = 0, $1 = 0, $102 = 0, $104 = 0, $110 = 0, $111 = 0, $115 = 0, $118 = 0, $125 = 0, $126 = 0, $168 = 0, $169 = 0, $173 = 0, $175 = 0, $181 = 0, $182 = 0, $186 = 0, $189 = 0, $194 = 0, $197 = 0, $2 = 0, $215 = 0, $216 = 0, $220 = 0, $222 = 0, $229 = 0, $230 = 0, $235 = 0, $238 = 0, $250 = 0, $251 = 0, $255 = 0, $257 = 0, $265 = 0, $266 = 0, $272 = 0, $275 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $50 = 0, $51 = 0, $55 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $68 = 0, $7 = 0, $71 = 0, $92 = 0, $97 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx100 = 0, $AsyncCtx103 = 0, $AsyncCtx106 = 0, $AsyncCtx110 = 0, $AsyncCtx114 = 0, $AsyncCtx118 = 0, $AsyncCtx12 = 0, $AsyncCtx122 = 0, $AsyncCtx126 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx36 = 0, $AsyncCtx40 = 0, $AsyncCtx44 = 0, $AsyncCtx48 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $AsyncCtx68 = 0, $AsyncCtx72 = 0, $AsyncCtx76 = 0, $AsyncCtx79 = 0, $AsyncCtx83 = 0, $AsyncCtx87 = 0, $AsyncCtx91 = 0, $AsyncCtx94 = 0, $AsyncCtx97 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 7343
 STACKTOP = STACKTOP + 160 | 0; //@line 7344
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160); //@line 7344
 $vararg_buffer9 = sp + 56 | 0; //@line 7345
 $vararg_buffer7 = sp + 48 | 0; //@line 7346
 $vararg_buffer5 = sp + 40 | 0; //@line 7347
 $vararg_buffer3 = sp + 32 | 0; //@line 7348
 $vararg_buffer1 = sp + 8 | 0; //@line 7349
 $1 = sp + 144 | 0; //@line 7351
 $2 = sp + 128 | 0; //@line 7352
 $3 = sp + 112 | 0; //@line 7353
 $4 = sp + 96 | 0; //@line 7354
 $5 = sp + 80 | 0; //@line 7355
 $6 = sp + 64 | 0; //@line 7356
 _printf(12139, sp) | 0; //@line 7357
 $7 = $0 + 1876 | 0; //@line 7358
 HEAP32[$vararg_buffer1 >> 2] = HEAP32[$7 >> 2]; //@line 7360
 _printf(12152, $vararg_buffer1) | 0; //@line 7361
 $AsyncCtx52 = _emscripten_alloc_async_context(76, sp) | 0; //@line 7362
 _putchar(10) | 0; //@line 7363
 if (___async) {
  HEAP32[$AsyncCtx52 >> 2] = 238; //@line 7366
  HEAP32[$AsyncCtx52 + 4 >> 2] = $0; //@line 7368
  HEAP32[$AsyncCtx52 + 8 >> 2] = $6; //@line 7370
  HEAP32[$AsyncCtx52 + 12 >> 2] = $3; //@line 7372
  HEAP32[$AsyncCtx52 + 16 >> 2] = $1; //@line 7374
  HEAP32[$AsyncCtx52 + 20 >> 2] = $vararg_buffer7; //@line 7376
  HEAP32[$AsyncCtx52 + 24 >> 2] = $vararg_buffer7; //@line 7378
  HEAP32[$AsyncCtx52 + 28 >> 2] = $vararg_buffer9; //@line 7380
  HEAP32[$AsyncCtx52 + 32 >> 2] = $vararg_buffer9; //@line 7382
  HEAP32[$AsyncCtx52 + 36 >> 2] = $1; //@line 7384
  HEAP32[$AsyncCtx52 + 40 >> 2] = $4; //@line 7386
  HEAP32[$AsyncCtx52 + 44 >> 2] = $2; //@line 7388
  HEAP32[$AsyncCtx52 + 48 >> 2] = $7; //@line 7390
  HEAP32[$AsyncCtx52 + 52 >> 2] = $vararg_buffer1; //@line 7392
  HEAP32[$AsyncCtx52 + 56 >> 2] = $5; //@line 7394
  HEAP32[$AsyncCtx52 + 60 >> 2] = $vararg_buffer3; //@line 7396
  HEAP32[$AsyncCtx52 + 64 >> 2] = $vararg_buffer3; //@line 7398
  HEAP32[$AsyncCtx52 + 68 >> 2] = $vararg_buffer5; //@line 7400
  HEAP32[$AsyncCtx52 + 72 >> 2] = $vararg_buffer5; //@line 7402
  sp = STACKTOP; //@line 7403
  STACKTOP = sp; //@line 7404
  return 0; //@line 7404
 }
 _emscripten_free_async_context($AsyncCtx52 | 0); //@line 7406
 switch (HEAP32[$7 >> 2] | 0) {
 case 7:
  {
   $28 = $0 + 4 | 0; //@line 7410
   $AsyncCtx87 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7411
   __ZN7LoRaMac19remove_channel_planEv($28) | 0; //@line 7412
   if (___async) {
    HEAP32[$AsyncCtx87 >> 2] = 239; //@line 7415
    HEAP32[$AsyncCtx87 + 4 >> 2] = $1; //@line 7417
    HEAP32[$AsyncCtx87 + 8 >> 2] = $28; //@line 7419
    HEAP32[$AsyncCtx87 + 12 >> 2] = $0; //@line 7421
    HEAP32[$AsyncCtx87 + 16 >> 2] = $1; //@line 7423
    HEAP32[$AsyncCtx87 + 20 >> 2] = $2; //@line 7425
    sp = STACKTOP; //@line 7426
    STACKTOP = sp; //@line 7427
    return 0; //@line 7427
   }
   _emscripten_free_async_context($AsyncCtx87 | 0); //@line 7429
   $AsyncCtx83 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7430
   __ZN7LoRaMac10disconnectEv($28); //@line 7431
   if (___async) {
    HEAP32[$AsyncCtx83 >> 2] = 240; //@line 7434
    HEAP32[$AsyncCtx83 + 4 >> 2] = $1; //@line 7436
    HEAP32[$AsyncCtx83 + 8 >> 2] = $28; //@line 7438
    HEAP32[$AsyncCtx83 + 12 >> 2] = $0; //@line 7440
    HEAP32[$AsyncCtx83 + 16 >> 2] = $1; //@line 7442
    HEAP32[$AsyncCtx83 + 20 >> 2] = $2; //@line 7444
    sp = STACKTOP; //@line 7445
    STACKTOP = sp; //@line 7446
    return 0; //@line 7446
   }
   _emscripten_free_async_context($AsyncCtx83 | 0); //@line 7448
   HEAP32[$1 >> 2] = 1; //@line 7449
   HEAP8[$1 + 4 >> 0] = 0; //@line 7451
   $AsyncCtx79 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7452
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($28, $1) | 0; //@line 7453
   if (___async) {
    HEAP32[$AsyncCtx79 >> 2] = 241; //@line 7456
    HEAP32[$AsyncCtx79 + 4 >> 2] = $0; //@line 7458
    HEAP32[$AsyncCtx79 + 8 >> 2] = $1; //@line 7460
    HEAP32[$AsyncCtx79 + 12 >> 2] = $2; //@line 7462
    sp = STACKTOP; //@line 7463
    STACKTOP = sp; //@line 7464
    return 0; //@line 7464
   }
   _emscripten_free_async_context($AsyncCtx79 | 0); //@line 7466
   HEAP8[$0 + 1964 >> 0] = 0; //@line 7469
   HEAP32[$0 + 2256 >> 2] = 0; //@line 7471
   HEAP8[$0 + 2236 >> 0] = 0; //@line 7473
   HEAP16[$0 + 2282 >> 1] = 0; //@line 7475
   HEAP16[$0 + 2260 >> 1] = 0; //@line 7477
   HEAP8[$0 + 1932 >> 0] = 0; //@line 7479
   $50 = $0 + 1892 | 0; //@line 7480
   _memset($0 + 1975 | 0, 0, 259) | 0; //@line 7481
   $51 = HEAP32[$50 >> 2] | 0; //@line 7482
   if (!$51) {
    $$1 = -1011; //@line 7485
    STACKTOP = sp; //@line 7486
    return $$1 | 0; //@line 7486
   }
   $55 = HEAP32[$0 + 2288 >> 2] | 0; //@line 7490
   $57 = HEAP32[$51 + 4 >> 2] | 0; //@line 7492
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 7493
   FUNCTION_TABLE_vii[$57 & 31]($2, $0 + 1880 | 0); //@line 7494
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 242; //@line 7497
    HEAP32[$AsyncCtx + 4 >> 2] = $50; //@line 7499
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 7501
    HEAP32[$AsyncCtx + 12 >> 2] = $55; //@line 7503
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 7505
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 7507
    sp = STACKTOP; //@line 7508
    STACKTOP = sp; //@line 7509
    return 0; //@line 7509
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7511
   $63 = $2 + 12 | 0; //@line 7513
   HEAP32[$63 >> 2] = HEAP32[$50 >> 2]; //@line 7514
   $AsyncCtx106 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7515
   $64 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($55, $2, 1) | 0; //@line 7516
   if (___async) {
    HEAP32[$AsyncCtx106 >> 2] = 243; //@line 7519
    HEAP32[$AsyncCtx106 + 4 >> 2] = $63; //@line 7521
    HEAP32[$AsyncCtx106 + 8 >> 2] = $2; //@line 7523
    HEAP32[$AsyncCtx106 + 12 >> 2] = $1; //@line 7525
    sp = STACKTOP; //@line 7526
    STACKTOP = sp; //@line 7527
    return 0; //@line 7527
   }
   _emscripten_free_async_context($AsyncCtx106 | 0); //@line 7529
   $68 = HEAP32[$63 >> 2] | 0; //@line 7530
   do {
    if ($68 | 0) {
     $71 = HEAP32[$68 + 8 >> 2] | 0; //@line 7535
     $AsyncCtx12 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7536
     FUNCTION_TABLE_vi[$71 & 1023]($2); //@line 7537
     if (___async) {
      HEAP32[$AsyncCtx12 >> 2] = 244; //@line 7540
      HEAP32[$AsyncCtx12 + 4 >> 2] = $64; //@line 7542
      HEAP32[$AsyncCtx12 + 8 >> 2] = $1; //@line 7544
      sp = STACKTOP; //@line 7545
      STACKTOP = sp; //@line 7546
      return 0; //@line 7546
     } else {
      _emscripten_free_async_context($AsyncCtx12 | 0); //@line 7548
      break;
     }
    }
   } while (0);
   if ($64 | 0) {
    $$1 = -1011; //@line 7555
    STACKTOP = sp; //@line 7556
    return $$1 | 0; //@line 7556
   }
   $AsyncCtx126 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7558
   _mbed_assert_internal(12851, 11935, 1141); //@line 7559
   if (___async) {
    HEAP32[$AsyncCtx126 >> 2] = 245; //@line 7562
    HEAP32[$AsyncCtx126 + 4 >> 2] = $1; //@line 7564
    sp = STACKTOP; //@line 7565
    STACKTOP = sp; //@line 7566
    return 0; //@line 7566
   }
   _emscripten_free_async_context($AsyncCtx126 | 0); //@line 7568
   $$1 = -1011; //@line 7569
   STACKTOP = sp; //@line 7570
   return $$1 | 0; //@line 7570
  }
 case 1:
  {
   $$1 = 0; //@line 7574
   STACKTOP = sp; //@line 7575
   return $$1 | 0; //@line 7575
  }
 case 2:
  {
   if (HEAP8[$0 + 1936 >> 0] | 0) {
    $$1 = -1003; //@line 7583
    STACKTOP = sp; //@line 7584
    return $$1 | 0; //@line 7584
   }
   HEAP32[$vararg_buffer1 >> 2] = 0; //@line 7586
   HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[$0 + 1940 >> 2]; //@line 7590
   HEAP32[$vararg_buffer1 + 8 >> 2] = HEAP32[$0 + 1944 >> 2]; //@line 7594
   HEAP32[$vararg_buffer1 + 12 >> 2] = HEAP32[$0 + 1948 >> 2]; //@line 7598
   HEAP8[$vararg_buffer1 + 16 >> 0] = HEAP8[$0 + 1952 >> 0] | 0; //@line 7602
   $AsyncCtx91 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7604
   $92 = __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($0 + 4 | 0, $vararg_buffer1) | 0; //@line 7605
   if (___async) {
    HEAP32[$AsyncCtx91 >> 2] = 246; //@line 7608
    HEAP32[$AsyncCtx91 + 4 >> 2] = $vararg_buffer1; //@line 7610
    HEAP32[$AsyncCtx91 + 8 >> 2] = $1; //@line 7612
    sp = STACKTOP; //@line 7613
    STACKTOP = sp; //@line 7614
    return 0; //@line 7614
   }
   _emscripten_free_async_context($AsyncCtx91 | 0); //@line 7616
   $$1 = ($92 | 0) == 0 ? -1016 : $92; //@line 7619
   STACKTOP = sp; //@line 7620
   return $$1 | 0; //@line 7620
  }
 case 4:
  {
   HEAP8[$0 + 1932 >> 0] = 1; //@line 7625
   $97 = $0 + 1892 | 0; //@line 7626
   $98 = HEAP32[$97 >> 2] | 0; //@line 7627
   if (!$98) {
    $$1 = 0; //@line 7630
    STACKTOP = sp; //@line 7631
    return $$1 | 0; //@line 7631
   }
   $102 = HEAP32[$0 + 2288 >> 2] | 0; //@line 7635
   $104 = HEAP32[$98 + 4 >> 2] | 0; //@line 7637
   $AsyncCtx15 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7638
   FUNCTION_TABLE_vii[$104 & 31]($3, $0 + 1880 | 0); //@line 7639
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 247; //@line 7642
    HEAP32[$AsyncCtx15 + 4 >> 2] = $97; //@line 7644
    HEAP32[$AsyncCtx15 + 8 >> 2] = $3; //@line 7646
    HEAP32[$AsyncCtx15 + 12 >> 2] = $102; //@line 7648
    HEAP32[$AsyncCtx15 + 16 >> 2] = $3; //@line 7650
    HEAP32[$AsyncCtx15 + 20 >> 2] = $1; //@line 7652
    sp = STACKTOP; //@line 7653
    STACKTOP = sp; //@line 7654
    return 0; //@line 7654
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7656
   $110 = $3 + 12 | 0; //@line 7658
   HEAP32[$110 >> 2] = HEAP32[$97 >> 2]; //@line 7659
   $AsyncCtx103 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7660
   $111 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($102, $3, 0) | 0; //@line 7661
   if (___async) {
    HEAP32[$AsyncCtx103 >> 2] = 248; //@line 7664
    HEAP32[$AsyncCtx103 + 4 >> 2] = $110; //@line 7666
    HEAP32[$AsyncCtx103 + 8 >> 2] = $3; //@line 7668
    HEAP32[$AsyncCtx103 + 12 >> 2] = $1; //@line 7670
    sp = STACKTOP; //@line 7671
    STACKTOP = sp; //@line 7672
    return 0; //@line 7672
   }
   _emscripten_free_async_context($AsyncCtx103 | 0); //@line 7674
   $115 = HEAP32[$110 >> 2] | 0; //@line 7675
   do {
    if ($115 | 0) {
     $118 = HEAP32[$115 + 8 >> 2] | 0; //@line 7680
     $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7681
     FUNCTION_TABLE_vi[$118 & 1023]($3); //@line 7682
     if (___async) {
      HEAP32[$AsyncCtx19 >> 2] = 249; //@line 7685
      HEAP32[$AsyncCtx19 + 4 >> 2] = $111; //@line 7687
      HEAP32[$AsyncCtx19 + 8 >> 2] = $1; //@line 7689
      sp = STACKTOP; //@line 7690
      STACKTOP = sp; //@line 7691
      return 0; //@line 7691
     } else {
      _emscripten_free_async_context($AsyncCtx19 | 0); //@line 7693
      break;
     }
    }
   } while (0);
   if ($111 | 0) {
    $$1 = 0; //@line 7700
    STACKTOP = sp; //@line 7701
    return $$1 | 0; //@line 7701
   }
   $AsyncCtx122 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7703
   _mbed_assert_internal(12851, 11935, 1186); //@line 7704
   if (___async) {
    HEAP32[$AsyncCtx122 >> 2] = 250; //@line 7707
    HEAP32[$AsyncCtx122 + 4 >> 2] = $1; //@line 7709
    sp = STACKTOP; //@line 7710
    STACKTOP = sp; //@line 7711
    return 0; //@line 7711
   }
   _emscripten_free_async_context($AsyncCtx122 | 0); //@line 7713
   $$1 = 0; //@line 7714
   STACKTOP = sp; //@line 7715
   return $$1 | 0; //@line 7715
  }
 case 3:
  {
   HEAP32[$1 >> 2] = 3; //@line 7719
   $125 = $1 + 4 | 0; //@line 7722
   HEAP32[$125 >> 2] = HEAP32[$0 + 1940 >> 2]; //@line 7723
   $126 = $0 + 4 | 0; //@line 7724
   $AsyncCtx76 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7725
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($126, $1) | 0; //@line 7726
   if (___async) {
    HEAP32[$AsyncCtx76 >> 2] = 251; //@line 7729
    HEAP32[$AsyncCtx76 + 4 >> 2] = $1; //@line 7731
    HEAP32[$AsyncCtx76 + 8 >> 2] = $0; //@line 7733
    HEAP32[$AsyncCtx76 + 12 >> 2] = $125; //@line 7735
    HEAP32[$AsyncCtx76 + 16 >> 2] = $126; //@line 7737
    HEAP32[$AsyncCtx76 + 20 >> 2] = $1; //@line 7739
    HEAP32[$AsyncCtx76 + 24 >> 2] = $4; //@line 7741
    HEAP32[$AsyncCtx76 + 28 >> 2] = $1; //@line 7743
    HEAP32[$AsyncCtx76 + 32 >> 2] = $125; //@line 7745
    sp = STACKTOP; //@line 7746
    STACKTOP = sp; //@line 7747
    return 0; //@line 7747
   }
   _emscripten_free_async_context($AsyncCtx76 | 0); //@line 7749
   HEAP32[$1 >> 2] = 4; //@line 7750
   HEAP32[$125 >> 2] = HEAP32[$0 + 1944 >> 2]; //@line 7753
   $AsyncCtx72 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7754
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($126, $1) | 0; //@line 7755
   if (___async) {
    HEAP32[$AsyncCtx72 >> 2] = 252; //@line 7758
    HEAP32[$AsyncCtx72 + 4 >> 2] = $1; //@line 7760
    HEAP32[$AsyncCtx72 + 8 >> 2] = $0; //@line 7762
    HEAP32[$AsyncCtx72 + 12 >> 2] = $125; //@line 7764
    HEAP32[$AsyncCtx72 + 16 >> 2] = $126; //@line 7766
    HEAP32[$AsyncCtx72 + 20 >> 2] = $1; //@line 7768
    HEAP32[$AsyncCtx72 + 24 >> 2] = $4; //@line 7770
    HEAP32[$AsyncCtx72 + 28 >> 2] = $1; //@line 7772
    HEAP32[$AsyncCtx72 + 32 >> 2] = $125; //@line 7774
    sp = STACKTOP; //@line 7775
    STACKTOP = sp; //@line 7776
    return 0; //@line 7776
   }
   _emscripten_free_async_context($AsyncCtx72 | 0); //@line 7778
   HEAP32[$1 >> 2] = 5; //@line 7779
   HEAP32[$125 >> 2] = HEAP32[$0 + 1948 >> 2]; //@line 7782
   $AsyncCtx68 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7783
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($126, $1) | 0; //@line 7784
   if (___async) {
    HEAP32[$AsyncCtx68 >> 2] = 253; //@line 7787
    HEAP32[$AsyncCtx68 + 4 >> 2] = $1; //@line 7789
    HEAP32[$AsyncCtx68 + 8 >> 2] = $0; //@line 7791
    HEAP32[$AsyncCtx68 + 12 >> 2] = $125; //@line 7793
    HEAP32[$AsyncCtx68 + 16 >> 2] = $126; //@line 7795
    HEAP32[$AsyncCtx68 + 20 >> 2] = $1; //@line 7797
    HEAP32[$AsyncCtx68 + 24 >> 2] = $4; //@line 7799
    HEAP32[$AsyncCtx68 + 28 >> 2] = $1; //@line 7801
    HEAP32[$AsyncCtx68 + 32 >> 2] = $125; //@line 7803
    sp = STACKTOP; //@line 7804
    STACKTOP = sp; //@line 7805
    return 0; //@line 7805
   }
   _emscripten_free_async_context($AsyncCtx68 | 0); //@line 7807
   HEAP32[$1 >> 2] = 6; //@line 7808
   HEAP32[$125 >> 2] = HEAP32[$0 + 1952 >> 2]; //@line 7811
   $AsyncCtx64 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7812
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($126, $1) | 0; //@line 7813
   if (___async) {
    HEAP32[$AsyncCtx64 >> 2] = 254; //@line 7816
    HEAP32[$AsyncCtx64 + 4 >> 2] = $1; //@line 7818
    HEAP32[$AsyncCtx64 + 8 >> 2] = $125; //@line 7820
    HEAP32[$AsyncCtx64 + 12 >> 2] = $126; //@line 7822
    HEAP32[$AsyncCtx64 + 16 >> 2] = $1; //@line 7824
    HEAP32[$AsyncCtx64 + 20 >> 2] = $0; //@line 7826
    HEAP32[$AsyncCtx64 + 24 >> 2] = $1; //@line 7828
    HEAP32[$AsyncCtx64 + 28 >> 2] = $4; //@line 7830
    sp = STACKTOP; //@line 7831
    STACKTOP = sp; //@line 7832
    return 0; //@line 7832
   }
   _emscripten_free_async_context($AsyncCtx64 | 0); //@line 7834
   HEAP32[$1 >> 2] = 1; //@line 7835
   HEAP8[$125 >> 0] = 1; //@line 7836
   $AsyncCtx60 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7837
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($126, $1) | 0; //@line 7838
   if (___async) {
    HEAP32[$AsyncCtx60 >> 2] = 255; //@line 7841
    HEAP32[$AsyncCtx60 + 4 >> 2] = $0; //@line 7843
    HEAP32[$AsyncCtx60 + 8 >> 2] = $1; //@line 7845
    HEAP32[$AsyncCtx60 + 12 >> 2] = $4; //@line 7847
    sp = STACKTOP; //@line 7848
    STACKTOP = sp; //@line 7849
    return 0; //@line 7849
   }
   _emscripten_free_async_context($AsyncCtx60 | 0); //@line 7851
   HEAP8[$0 + 1932 >> 0] = 1; //@line 7853
   $168 = $0 + 1892 | 0; //@line 7854
   $169 = HEAP32[$168 >> 2] | 0; //@line 7855
   if (!$169) {
    $$1 = 0; //@line 7858
    STACKTOP = sp; //@line 7859
    return $$1 | 0; //@line 7859
   }
   $173 = HEAP32[$0 + 2288 >> 2] | 0; //@line 7863
   $175 = HEAP32[$169 + 4 >> 2] | 0; //@line 7865
   $AsyncCtx22 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7866
   FUNCTION_TABLE_vii[$175 & 31]($4, $0 + 1880 | 0); //@line 7867
   if (___async) {
    HEAP32[$AsyncCtx22 >> 2] = 256; //@line 7870
    HEAP32[$AsyncCtx22 + 4 >> 2] = $168; //@line 7872
    HEAP32[$AsyncCtx22 + 8 >> 2] = $4; //@line 7874
    HEAP32[$AsyncCtx22 + 12 >> 2] = $173; //@line 7876
    HEAP32[$AsyncCtx22 + 16 >> 2] = $4; //@line 7878
    HEAP32[$AsyncCtx22 + 20 >> 2] = $1; //@line 7880
    sp = STACKTOP; //@line 7881
    STACKTOP = sp; //@line 7882
    return 0; //@line 7882
   }
   _emscripten_free_async_context($AsyncCtx22 | 0); //@line 7884
   $181 = $4 + 12 | 0; //@line 7886
   HEAP32[$181 >> 2] = HEAP32[$168 >> 2]; //@line 7887
   $AsyncCtx100 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7888
   $182 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($173, $4, 0) | 0; //@line 7889
   if (___async) {
    HEAP32[$AsyncCtx100 >> 2] = 257; //@line 7892
    HEAP32[$AsyncCtx100 + 4 >> 2] = $181; //@line 7894
    HEAP32[$AsyncCtx100 + 8 >> 2] = $4; //@line 7896
    HEAP32[$AsyncCtx100 + 12 >> 2] = $1; //@line 7898
    sp = STACKTOP; //@line 7899
    STACKTOP = sp; //@line 7900
    return 0; //@line 7900
   }
   _emscripten_free_async_context($AsyncCtx100 | 0); //@line 7902
   $186 = HEAP32[$181 >> 2] | 0; //@line 7903
   do {
    if ($186 | 0) {
     $189 = HEAP32[$186 + 8 >> 2] | 0; //@line 7908
     $AsyncCtx26 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7909
     FUNCTION_TABLE_vi[$189 & 1023]($4); //@line 7910
     if (___async) {
      HEAP32[$AsyncCtx26 >> 2] = 258; //@line 7913
      HEAP32[$AsyncCtx26 + 4 >> 2] = $182; //@line 7915
      HEAP32[$AsyncCtx26 + 8 >> 2] = $1; //@line 7917
      sp = STACKTOP; //@line 7918
      STACKTOP = sp; //@line 7919
      return 0; //@line 7919
     } else {
      _emscripten_free_async_context($AsyncCtx26 | 0); //@line 7921
      break;
     }
    }
   } while (0);
   if ($182 | 0) {
    $$1 = 0; //@line 7928
    STACKTOP = sp; //@line 7929
    return $$1 | 0; //@line 7929
   }
   $AsyncCtx118 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7931
   _mbed_assert_internal(12851, 11935, 1223); //@line 7932
   if (___async) {
    HEAP32[$AsyncCtx118 >> 2] = 259; //@line 7935
    HEAP32[$AsyncCtx118 + 4 >> 2] = $1; //@line 7937
    sp = STACKTOP; //@line 7938
    STACKTOP = sp; //@line 7939
    return 0; //@line 7939
   }
   _emscripten_free_async_context($AsyncCtx118 | 0); //@line 7941
   $$1 = 0; //@line 7942
   STACKTOP = sp; //@line 7943
   return $$1 | 0; //@line 7943
  }
 case 5:
  {
   $194 = $0 + 1964 | 0; //@line 7947
   L111 : do {
    if (!(HEAP8[$194 >> 0] | 0)) {
     HEAP8[$194 >> 0] = 1; //@line 7952
     $AsyncCtx56 = _emscripten_alloc_async_context(56, sp) | 0; //@line 7953
     $197 = __ZN12LoRaWANStack17send_frame_to_macEv($0) | 0; //@line 7954
     if (___async) {
      HEAP32[$AsyncCtx56 >> 2] = 260; //@line 7957
      HEAP32[$AsyncCtx56 + 4 >> 2] = $0; //@line 7959
      HEAP32[$AsyncCtx56 + 8 >> 2] = $6; //@line 7961
      HEAP32[$AsyncCtx56 + 12 >> 2] = $vararg_buffer7; //@line 7963
      HEAP32[$AsyncCtx56 + 16 >> 2] = $vararg_buffer7; //@line 7965
      HEAP32[$AsyncCtx56 + 20 >> 2] = $vararg_buffer9; //@line 7967
      HEAP32[$AsyncCtx56 + 24 >> 2] = $vararg_buffer9; //@line 7969
      HEAP32[$AsyncCtx56 + 28 >> 2] = $7; //@line 7971
      HEAP32[$AsyncCtx56 + 32 >> 2] = $5; //@line 7973
      HEAP32[$AsyncCtx56 + 36 >> 2] = $1; //@line 7975
      HEAP32[$AsyncCtx56 + 40 >> 2] = $vararg_buffer3; //@line 7977
      HEAP32[$AsyncCtx56 + 44 >> 2] = $vararg_buffer3; //@line 7979
      HEAP32[$AsyncCtx56 + 48 >> 2] = $vararg_buffer5; //@line 7981
      HEAP32[$AsyncCtx56 + 52 >> 2] = $vararg_buffer5; //@line 7983
      sp = STACKTOP; //@line 7984
      STACKTOP = sp; //@line 7985
      return 0; //@line 7985
     }
     _emscripten_free_async_context($AsyncCtx56 | 0); //@line 7987
     switch ($197 | 0) {
     case 0:
      {
       $$029 = 0; //@line 7990
       break L111;
       break;
      }
     case -1014:
      {
       _printf(11887, $vararg_buffer3) | 0; //@line 7995
       _printf(12174, $vararg_buffer5) | 0; //@line 7996
       $AsyncCtx48 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7997
       _putchar(10) | 0; //@line 7998
       if (___async) {
        HEAP32[$AsyncCtx48 >> 2] = 261; //@line 8001
        HEAP32[$AsyncCtx48 + 4 >> 2] = $0; //@line 8003
        HEAP32[$AsyncCtx48 + 8 >> 2] = $7; //@line 8005
        HEAP32[$AsyncCtx48 + 12 >> 2] = $5; //@line 8007
        HEAP32[$AsyncCtx48 + 16 >> 2] = $1; //@line 8009
        sp = STACKTOP; //@line 8010
        STACKTOP = sp; //@line 8011
        return 0; //@line 8011
       }
       _emscripten_free_async_context($AsyncCtx48 | 0); //@line 8013
       $215 = $0 + 1892 | 0; //@line 8014
       $216 = HEAP32[$215 >> 2] | 0; //@line 8015
       if (!$216) {
        $$029 = -1014; //@line 8018
        break L111;
       }
       $220 = HEAP32[$0 + 2288 >> 2] | 0; //@line 8023
       $222 = HEAP32[$216 + 4 >> 2] | 0; //@line 8025
       $AsyncCtx29 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8026
       FUNCTION_TABLE_vii[$222 & 31]($5, $0 + 1880 | 0); //@line 8027
       if (___async) {
        HEAP32[$AsyncCtx29 >> 2] = 262; //@line 8030
        HEAP32[$AsyncCtx29 + 4 >> 2] = $215; //@line 8032
        HEAP32[$AsyncCtx29 + 8 >> 2] = $5; //@line 8034
        HEAP32[$AsyncCtx29 + 12 >> 2] = $220; //@line 8036
        HEAP32[$AsyncCtx29 + 16 >> 2] = $5; //@line 8038
        HEAP32[$AsyncCtx29 + 20 >> 2] = $7; //@line 8040
        HEAP32[$AsyncCtx29 + 24 >> 2] = $1; //@line 8042
        sp = STACKTOP; //@line 8043
        STACKTOP = sp; //@line 8044
        return 0; //@line 8044
       }
       _emscripten_free_async_context($AsyncCtx29 | 0); //@line 8046
       $229 = $5 + 12 | 0; //@line 8048
       HEAP32[$229 >> 2] = HEAP32[$215 >> 2]; //@line 8049
       $AsyncCtx97 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8050
       $230 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($220, $5, 5) | 0; //@line 8051
       if (___async) {
        HEAP32[$AsyncCtx97 >> 2] = 263; //@line 8054
        HEAP32[$AsyncCtx97 + 4 >> 2] = $229; //@line 8056
        HEAP32[$AsyncCtx97 + 8 >> 2] = $5; //@line 8058
        HEAP32[$AsyncCtx97 + 12 >> 2] = $7; //@line 8060
        HEAP32[$AsyncCtx97 + 16 >> 2] = $1; //@line 8062
        sp = STACKTOP; //@line 8063
        STACKTOP = sp; //@line 8064
        return 0; //@line 8064
       }
       _emscripten_free_async_context($AsyncCtx97 | 0); //@line 8066
       $235 = HEAP32[$229 >> 2] | 0; //@line 8067
       do {
        if ($235 | 0) {
         $238 = HEAP32[$235 + 8 >> 2] | 0; //@line 8072
         $AsyncCtx33 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8073
         FUNCTION_TABLE_vi[$238 & 1023]($5); //@line 8074
         if (___async) {
          HEAP32[$AsyncCtx33 >> 2] = 264; //@line 8077
          HEAP32[$AsyncCtx33 + 4 >> 2] = $230; //@line 8079
          HEAP32[$AsyncCtx33 + 8 >> 2] = $7; //@line 8081
          HEAP32[$AsyncCtx33 + 12 >> 2] = $1; //@line 8083
          sp = STACKTOP; //@line 8084
          STACKTOP = sp; //@line 8085
          return 0; //@line 8085
         } else {
          _emscripten_free_async_context($AsyncCtx33 | 0); //@line 8087
          break;
         }
        }
       } while (0);
       if ($230 | 0) {
        $$029 = -1014; //@line 8094
        break L111;
       }
       $AsyncCtx114 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8097
       _mbed_assert_internal(12851, 11935, 1243); //@line 8098
       if (___async) {
        HEAP32[$AsyncCtx114 >> 2] = 265; //@line 8101
        HEAP32[$AsyncCtx114 + 4 >> 2] = $7; //@line 8103
        HEAP32[$AsyncCtx114 + 8 >> 2] = $1; //@line 8105
        sp = STACKTOP; //@line 8106
        STACKTOP = sp; //@line 8107
        return 0; //@line 8107
       } else {
        _emscripten_free_async_context($AsyncCtx114 | 0); //@line 8109
        $$029 = -1014; //@line 8110
        break L111;
       }
       break;
      }
     default:
      {
       _printf(11887, $vararg_buffer7) | 0; //@line 8116
       _printf(12209, $vararg_buffer9) | 0; //@line 8117
       $AsyncCtx44 = _emscripten_alloc_async_context(24, sp) | 0; //@line 8118
       _putchar(10) | 0; //@line 8119
       if (___async) {
        HEAP32[$AsyncCtx44 >> 2] = 266; //@line 8122
        HEAP32[$AsyncCtx44 + 4 >> 2] = $0; //@line 8124
        HEAP32[$AsyncCtx44 + 8 >> 2] = $197; //@line 8126
        HEAP32[$AsyncCtx44 + 12 >> 2] = $7; //@line 8128
        HEAP32[$AsyncCtx44 + 16 >> 2] = $6; //@line 8130
        HEAP32[$AsyncCtx44 + 20 >> 2] = $1; //@line 8132
        sp = STACKTOP; //@line 8133
        STACKTOP = sp; //@line 8134
        return 0; //@line 8134
       }
       _emscripten_free_async_context($AsyncCtx44 | 0); //@line 8136
       $250 = $0 + 1892 | 0; //@line 8137
       $251 = HEAP32[$250 >> 2] | 0; //@line 8138
       if (!$251) {
        $$029 = $197; //@line 8141
        break L111;
       }
       $255 = HEAP32[$0 + 2288 >> 2] | 0; //@line 8146
       $257 = HEAP32[$251 + 4 >> 2] | 0; //@line 8148
       $AsyncCtx36 = _emscripten_alloc_async_context(32, sp) | 0; //@line 8149
       FUNCTION_TABLE_vii[$257 & 31]($6, $0 + 1880 | 0); //@line 8150
       if (___async) {
        HEAP32[$AsyncCtx36 >> 2] = 267; //@line 8153
        HEAP32[$AsyncCtx36 + 4 >> 2] = $250; //@line 8155
        HEAP32[$AsyncCtx36 + 8 >> 2] = $6; //@line 8157
        HEAP32[$AsyncCtx36 + 12 >> 2] = $255; //@line 8159
        HEAP32[$AsyncCtx36 + 16 >> 2] = $6; //@line 8161
        HEAP32[$AsyncCtx36 + 20 >> 2] = $197; //@line 8163
        HEAP32[$AsyncCtx36 + 24 >> 2] = $7; //@line 8165
        HEAP32[$AsyncCtx36 + 28 >> 2] = $1; //@line 8167
        sp = STACKTOP; //@line 8168
        STACKTOP = sp; //@line 8169
        return 0; //@line 8169
       }
       _emscripten_free_async_context($AsyncCtx36 | 0); //@line 8171
       $265 = $6 + 12 | 0; //@line 8173
       HEAP32[$265 >> 2] = HEAP32[$250 >> 2]; //@line 8174
       $AsyncCtx94 = _emscripten_alloc_async_context(24, sp) | 0; //@line 8175
       $266 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($255, $6, 6) | 0; //@line 8176
       if (___async) {
        HEAP32[$AsyncCtx94 >> 2] = 268; //@line 8179
        HEAP32[$AsyncCtx94 + 4 >> 2] = $265; //@line 8181
        HEAP32[$AsyncCtx94 + 8 >> 2] = $6; //@line 8183
        HEAP32[$AsyncCtx94 + 12 >> 2] = $197; //@line 8185
        HEAP32[$AsyncCtx94 + 16 >> 2] = $7; //@line 8187
        HEAP32[$AsyncCtx94 + 20 >> 2] = $1; //@line 8189
        sp = STACKTOP; //@line 8190
        STACKTOP = sp; //@line 8191
        return 0; //@line 8191
       }
       _emscripten_free_async_context($AsyncCtx94 | 0); //@line 8193
       $272 = HEAP32[$265 >> 2] | 0; //@line 8194
       do {
        if ($272 | 0) {
         $275 = HEAP32[$272 + 8 >> 2] | 0; //@line 8199
         $AsyncCtx40 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8200
         FUNCTION_TABLE_vi[$275 & 1023]($6); //@line 8201
         if (___async) {
          HEAP32[$AsyncCtx40 >> 2] = 269; //@line 8204
          HEAP32[$AsyncCtx40 + 4 >> 2] = $266; //@line 8206
          HEAP32[$AsyncCtx40 + 8 >> 2] = $197; //@line 8208
          HEAP32[$AsyncCtx40 + 12 >> 2] = $7; //@line 8210
          HEAP32[$AsyncCtx40 + 16 >> 2] = $1; //@line 8212
          sp = STACKTOP; //@line 8213
          STACKTOP = sp; //@line 8214
          return 0; //@line 8214
         } else {
          _emscripten_free_async_context($AsyncCtx40 | 0); //@line 8216
          break;
         }
        }
       } while (0);
       if ($266 | 0) {
        $$029 = $197; //@line 8223
        break L111;
       }
       $AsyncCtx110 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8226
       _mbed_assert_internal(12851, 11935, 1251); //@line 8227
       if (___async) {
        HEAP32[$AsyncCtx110 >> 2] = 270; //@line 8230
        HEAP32[$AsyncCtx110 + 4 >> 2] = $197; //@line 8232
        HEAP32[$AsyncCtx110 + 8 >> 2] = $7; //@line 8234
        HEAP32[$AsyncCtx110 + 12 >> 2] = $1; //@line 8236
        sp = STACKTOP; //@line 8237
        STACKTOP = sp; //@line 8238
        return 0; //@line 8238
       } else {
        _emscripten_free_async_context($AsyncCtx110 | 0); //@line 8240
        $$029 = $197; //@line 8241
        break L111;
       }
      }
     }
    } else {
     $$029 = 0; //@line 8247
    }
   } while (0);
   HEAP32[$7 >> 2] = 6; //@line 8250
   $$1 = $$029; //@line 8251
   STACKTOP = sp; //@line 8252
   return $$1 | 0; //@line 8252
  }
 case 6:
  {
   $$1 = -1018; //@line 8256
   STACKTOP = sp; //@line 8257
   return $$1 | 0; //@line 8257
  }
 case 0:
  {
   $$1 = -1011; //@line 8261
   STACKTOP = sp; //@line 8262
   return $$1 | 0; //@line 8262
  }
 default:
  {
   $$1 = -1002; //@line 8266
   STACKTOP = sp; //@line 8267
   return $$1 | 0; //@line 8267
  }
 }
 return 0; //@line 8270
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_44($0) {
 $0 = $0 | 0;
 var $$0174 = 0, $$0174209 = 0, $$0174210 = 0, $$1169 = 0, $$1171 = 0, $$1173 = 0, $$1175 = 0, $$sink207 = 0, $10 = 0, $105 = 0, $106 = 0, $12 = 0, $124 = 0, $139 = 0, $14 = 0, $140 = 0, $142 = 0, $144 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $222 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $272 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $284 = 0, $286 = 0, $287 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $90 = 0, $97 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx6 = 0, $sext = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 21044
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21046
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21048
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21050
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21052
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21054
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21056
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21058
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21060
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21062
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21064
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21066
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21068
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21070
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21072
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21074
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 21076
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 21078
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 21080
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 21082
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 21084
 $42 = HEAP8[$0 + 84 >> 0] | 0; //@line 21086
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 21088
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 21090
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 21092
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 21094
 $51 = HEAP8[$18 >> 0] | 0; //@line 21095
 $trunc = ($51 & 255) >>> 5; //@line 21096
 switch ($trunc & 7) {
 case 1:
  {
   $52 = $4 + 372 | 0; //@line 21100
   if (HEAP8[$52 >> 0] | 0) {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) + 4 >> 2] = 1; //@line 21106
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 21107
    __ZN7LoRaMac21prepare_rx_done_abortEv($4); //@line 21108
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 389; //@line 21111
     $57 = $ReallocAsyncCtx13 + 4 | 0; //@line 21112
     HEAP32[$57 >> 2] = $8; //@line 21113
     $58 = $ReallocAsyncCtx13 + 8 | 0; //@line 21114
     HEAP32[$58 >> 2] = $10; //@line 21115
     sp = STACKTOP; //@line 21116
     return;
    }
    ___async_unwind = 0; //@line 21119
    HEAP32[$ReallocAsyncCtx13 >> 2] = 389; //@line 21120
    $57 = $ReallocAsyncCtx13 + 4 | 0; //@line 21121
    HEAP32[$57 >> 2] = $8; //@line 21122
    $58 = $ReallocAsyncCtx13 + 8 | 0; //@line 21123
    HEAP32[$58 >> 2] = $10; //@line 21124
    sp = STACKTOP; //@line 21125
    return;
   }
   $62 = $4 + 908 | 0; //@line 21131
   $64 = $4 + 638 | 0; //@line 21133
   $65 = $4 + 639 | 0; //@line 21134
   if (__Z18decrypt_join_framePKhtS0_Ph($18 + 1 | 0, $14 + 65535 & 65535, HEAP32[$62 >> 2] | 0, $65) | 0) {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) + 4 >> 2] = 13; //@line 21140
    return;
   }
   HEAP8[$64 >> 0] = $51; //@line 21143
   $70 = $14 + -4 | 0; //@line 21144
   $72 = HEAP32[$62 >> 2] | 0; //@line 21146
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(64) | 0; //@line 21147
   $73 = __Z22compute_join_frame_micPKhtS0_Pj($64, $70 & 65535, $72, $40) | 0; //@line 21148
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 390; //@line 21151
    $74 = $ReallocAsyncCtx16 + 4 | 0; //@line 21152
    HEAP32[$74 >> 2] = $4; //@line 21153
    $75 = $ReallocAsyncCtx16 + 8 | 0; //@line 21154
    HEAP32[$75 >> 2] = $70; //@line 21155
    $76 = $ReallocAsyncCtx16 + 12 | 0; //@line 21156
    HEAP32[$76 >> 2] = $14; //@line 21157
    $77 = $ReallocAsyncCtx16 + 16 | 0; //@line 21158
    HEAP32[$77 >> 2] = $40; //@line 21159
    $78 = $ReallocAsyncCtx16 + 20 | 0; //@line 21160
    HEAP32[$78 >> 2] = $2; //@line 21161
    $79 = $ReallocAsyncCtx16 + 24 | 0; //@line 21162
    HEAP32[$79 >> 2] = $8; //@line 21163
    $80 = $ReallocAsyncCtx16 + 28 | 0; //@line 21164
    HEAP32[$80 >> 2] = $10; //@line 21165
    $81 = $ReallocAsyncCtx16 + 32 | 0; //@line 21166
    HEAP32[$81 >> 2] = $62; //@line 21167
    $82 = $ReallocAsyncCtx16 + 36 | 0; //@line 21168
    HEAP32[$82 >> 2] = $65; //@line 21169
    $83 = $ReallocAsyncCtx16 + 40 | 0; //@line 21170
    HEAP32[$83 >> 2] = $48; //@line 21171
    $84 = $ReallocAsyncCtx16 + 44 | 0; //@line 21172
    HEAP32[$84 >> 2] = $50; //@line 21173
    $85 = $ReallocAsyncCtx16 + 48 | 0; //@line 21174
    HEAP32[$85 >> 2] = $6; //@line 21175
    $86 = $ReallocAsyncCtx16 + 52 | 0; //@line 21176
    HEAP32[$86 >> 2] = $12; //@line 21177
    $87 = $ReallocAsyncCtx16 + 56 | 0; //@line 21178
    HEAP32[$87 >> 2] = $16; //@line 21179
    $88 = $ReallocAsyncCtx16 + 60 | 0; //@line 21180
    HEAP32[$88 >> 2] = $52; //@line 21181
    sp = STACKTOP; //@line 21182
    return;
   }
   HEAP32[___async_retval >> 2] = $73; //@line 21186
   ___async_unwind = 0; //@line 21187
   HEAP32[$ReallocAsyncCtx16 >> 2] = 390; //@line 21188
   $74 = $ReallocAsyncCtx16 + 4 | 0; //@line 21189
   HEAP32[$74 >> 2] = $4; //@line 21190
   $75 = $ReallocAsyncCtx16 + 8 | 0; //@line 21191
   HEAP32[$75 >> 2] = $70; //@line 21192
   $76 = $ReallocAsyncCtx16 + 12 | 0; //@line 21193
   HEAP32[$76 >> 2] = $14; //@line 21194
   $77 = $ReallocAsyncCtx16 + 16 | 0; //@line 21195
   HEAP32[$77 >> 2] = $40; //@line 21196
   $78 = $ReallocAsyncCtx16 + 20 | 0; //@line 21197
   HEAP32[$78 >> 2] = $2; //@line 21198
   $79 = $ReallocAsyncCtx16 + 24 | 0; //@line 21199
   HEAP32[$79 >> 2] = $8; //@line 21200
   $80 = $ReallocAsyncCtx16 + 28 | 0; //@line 21201
   HEAP32[$80 >> 2] = $10; //@line 21202
   $81 = $ReallocAsyncCtx16 + 32 | 0; //@line 21203
   HEAP32[$81 >> 2] = $62; //@line 21204
   $82 = $ReallocAsyncCtx16 + 36 | 0; //@line 21205
   HEAP32[$82 >> 2] = $65; //@line 21206
   $83 = $ReallocAsyncCtx16 + 40 | 0; //@line 21207
   HEAP32[$83 >> 2] = $48; //@line 21208
   $84 = $ReallocAsyncCtx16 + 44 | 0; //@line 21209
   HEAP32[$84 >> 2] = $50; //@line 21210
   $85 = $ReallocAsyncCtx16 + 48 | 0; //@line 21211
   HEAP32[$85 >> 2] = $6; //@line 21212
   $86 = $ReallocAsyncCtx16 + 52 | 0; //@line 21213
   HEAP32[$86 >> 2] = $12; //@line 21214
   $87 = $ReallocAsyncCtx16 + 56 | 0; //@line 21215
   HEAP32[$87 >> 2] = $16; //@line 21216
   $88 = $ReallocAsyncCtx16 + 60 | 0; //@line 21217
   HEAP32[$88 >> 2] = $52; //@line 21218
   sp = STACKTOP; //@line 21219
   return;
  }
 case 3:
 case 5:
  {
   $90 = HEAP32[$16 >> 2] | 0; //@line 21224
   $97 = __ZN7LoRaPHY15get_max_payloadEhb($90, HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) + 10 >> 0] | 0, (HEAP8[$4 + 369 >> 0] | 0) != 0) | 0; //@line 21231
   $sext = ($14 << 16) + -851968 | 0; //@line 21233
   if (((($sext | 0) < 0 ? 0 : $sext >> 16) | 0) > ($97 & 255 | 0)) {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) + 4 >> 2] = 1; //@line 21242
    $ReallocAsyncCtx12 = _emscripten_realloc_async_context(12) | 0; //@line 21243
    __ZN7LoRaMac21prepare_rx_done_abortEv($4); //@line 21244
    if (___async) {
     HEAP32[$ReallocAsyncCtx12 >> 2] = 392; //@line 21247
     $105 = $ReallocAsyncCtx12 + 4 | 0; //@line 21248
     HEAP32[$105 >> 2] = $8; //@line 21249
     $106 = $ReallocAsyncCtx12 + 8 | 0; //@line 21250
     HEAP32[$106 >> 2] = $10; //@line 21251
     sp = STACKTOP; //@line 21252
     return;
    }
    ___async_unwind = 0; //@line 21255
    HEAP32[$ReallocAsyncCtx12 >> 2] = 392; //@line 21256
    $105 = $ReallocAsyncCtx12 + 4 | 0; //@line 21257
    HEAP32[$105 >> 2] = $8; //@line 21258
    $106 = $ReallocAsyncCtx12 + 8 | 0; //@line 21259
    HEAP32[$106 >> 2] = $10; //@line 21260
    sp = STACKTOP; //@line 21261
    return;
   }
   $124 = HEAPU8[$18 + 2 >> 0] << 8 | HEAPU8[$18 + 1 >> 0] | HEAPU8[$18 + 3 >> 0] << 16 | HEAPU8[$18 + 4 >> 0] << 24; //@line 21281
   L32 : do {
    if (($124 | 0) == (HEAP32[$4 + 952 >> 2] | 0)) {
     $$1169 = 0; //@line 21288
     $$1171 = $50; //@line 21288
     $$1173 = $48; //@line 21288
     $$1175 = 0; //@line 21288
     $$sink207 = $4 + 960 | 0; //@line 21288
    } else {
     $$0174209 = HEAP32[$4 + 1208 >> 2] | 0; //@line 21291
     L35 : do {
      if ($$0174209 | 0) {
       $$0174210 = $$0174209; //@line 21295
       while (1) {
        if (($124 | 0) == (HEAP32[$$0174210 >> 2] | 0)) {
         break;
        }
        $$0174 = HEAP32[$$0174210 + 40 >> 2] | 0; //@line 21303
        if (!$$0174) {
         break L35;
        } else {
         $$0174210 = $$0174; //@line 21308
        }
       }
       $$1169 = 1; //@line 21314
       $$1171 = $$0174210 + 20 | 0; //@line 21314
       $$1173 = $$0174210 + 4 | 0; //@line 21314
       $$1175 = $$0174210; //@line 21314
       $$sink207 = $$0174210 + 36 | 0; //@line 21314
       break L32;
      }
     } while (0);
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) + 4 >> 2] = 11; //@line 21320
     $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 21321
     __ZN7LoRaMac21prepare_rx_done_abortEv($4); //@line 21322
     if (___async) {
      HEAP32[$ReallocAsyncCtx11 >> 2] = 393; //@line 21325
      $139 = $ReallocAsyncCtx11 + 4 | 0; //@line 21326
      HEAP32[$139 >> 2] = $8; //@line 21327
      $140 = $ReallocAsyncCtx11 + 8 | 0; //@line 21328
      HEAP32[$140 >> 2] = $10; //@line 21329
      sp = STACKTOP; //@line 21330
      return;
     }
     ___async_unwind = 0; //@line 21333
     HEAP32[$ReallocAsyncCtx11 >> 2] = 393; //@line 21334
     $139 = $ReallocAsyncCtx11 + 4 | 0; //@line 21335
     HEAP32[$139 >> 2] = $8; //@line 21336
     $140 = $ReallocAsyncCtx11 + 8 | 0; //@line 21337
     HEAP32[$140 >> 2] = $10; //@line 21338
     sp = STACKTOP; //@line 21339
     return;
    }
   } while (0);
   $142 = HEAP32[$$sink207 >> 2] | 0; //@line 21343
   $144 = HEAP8[$18 + 5 >> 0] | 0; //@line 21345
   $153 = $144 & 15; //@line 21354
   $154 = $153 & 255; //@line 21355
   $155 = $154 + 8 | 0; //@line 21356
   $156 = $155 & 255; //@line 21357
   $157 = $14 + -4 | 0; //@line 21358
   $178 = HEAPU8[$18 + ($14 + -3) >> 0] << 8 | HEAPU8[$18 + $157 >> 0] | HEAPU8[$18 + ($14 + -2) >> 0] << 16 | HEAPU8[$18 + ($14 + -1) >> 0] << 24; //@line 21379
   $179 = (HEAPU8[$18 + 7 >> 0] << 8 | HEAPU8[$18 + 6 >> 0]) - $142 | 0; //@line 21380
   $180 = $179 & 65535; //@line 21381
   if ($180 >>> 0 < 32768) {
    $182 = $180 + $142 | 0; //@line 21384
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(148) | 0; //@line 21386
    __Z11compute_micPKhtS0_jhjPj($18, $157 & 65535, $$1173, $124, 1, $182, $40) | 0; //@line 21387
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 394; //@line 21390
     $184 = $ReallocAsyncCtx15 + 4 | 0; //@line 21391
     HEAP32[$184 >> 2] = $28; //@line 21392
     $185 = $ReallocAsyncCtx15 + 8 | 0; //@line 21393
     HEAP8[$185 >> 0] = $144; //@line 21394
     $186 = $ReallocAsyncCtx15 + 12 | 0; //@line 21395
     HEAP32[$186 >> 2] = $182; //@line 21396
     $187 = $ReallocAsyncCtx15 + 16 | 0; //@line 21397
     HEAP32[$187 >> 2] = $30; //@line 21398
     $188 = $ReallocAsyncCtx15 + 20 | 0; //@line 21399
     HEAP32[$188 >> 2] = $$1175; //@line 21400
     $189 = $ReallocAsyncCtx15 + 24 | 0; //@line 21401
     HEAP32[$189 >> 2] = $32; //@line 21402
     $190 = $ReallocAsyncCtx15 + 28 | 0; //@line 21403
     HEAP8[$190 >> 0] = $156; //@line 21404
     $191 = $ReallocAsyncCtx15 + 32 | 0; //@line 21405
     HEAP32[$191 >> 2] = $2; //@line 21406
     $192 = $ReallocAsyncCtx15 + 36 | 0; //@line 21407
     HEAP32[$192 >> 2] = $34; //@line 21408
     $193 = $ReallocAsyncCtx15 + 40 | 0; //@line 21409
     HEAP32[$193 >> 2] = $155; //@line 21410
     $194 = $ReallocAsyncCtx15 + 44 | 0; //@line 21411
     HEAP32[$194 >> 2] = $16; //@line 21412
     $195 = $ReallocAsyncCtx15 + 48 | 0; //@line 21413
     HEAP32[$195 >> 2] = $124; //@line 21414
     $196 = $ReallocAsyncCtx15 + 52 | 0; //@line 21415
     HEAP32[$196 >> 2] = $36; //@line 21416
     $197 = $ReallocAsyncCtx15 + 56 | 0; //@line 21417
     HEAP32[$197 >> 2] = $180; //@line 21418
     $198 = $ReallocAsyncCtx15 + 60 | 0; //@line 21419
     HEAP32[$198 >> 2] = $6; //@line 21420
     $199 = $ReallocAsyncCtx15 + 64 | 0; //@line 21421
     HEAP32[$199 >> 2] = $38; //@line 21422
     $200 = $ReallocAsyncCtx15 + 68 | 0; //@line 21423
     HEAP32[$200 >> 2] = $40; //@line 21424
     $201 = $ReallocAsyncCtx15 + 72 | 0; //@line 21425
     HEAP32[$201 >> 2] = $24; //@line 21426
     $202 = $ReallocAsyncCtx15 + 76 | 0; //@line 21427
     HEAP32[$202 >> 2] = $26; //@line 21428
     $203 = $ReallocAsyncCtx15 + 80 | 0; //@line 21429
     HEAP8[$203 >> 0] = $$1169; //@line 21430
     $204 = $ReallocAsyncCtx15 + 84 | 0; //@line 21431
     HEAP32[$204 >> 2] = $$1173; //@line 21432
     $205 = $ReallocAsyncCtx15 + 88 | 0; //@line 21433
     HEAP32[$205 >> 2] = $$1171; //@line 21434
     $206 = $ReallocAsyncCtx15 + 92 | 0; //@line 21435
     HEAP32[$206 >> 2] = $157; //@line 21436
     $207 = $ReallocAsyncCtx15 + 96 | 0; //@line 21437
     HEAP32[$207 >> 2] = $178; //@line 21438
     $208 = $ReallocAsyncCtx15 + 100 | 0; //@line 21439
     HEAP8[$208 >> 0] = $42; //@line 21440
     $209 = $ReallocAsyncCtx15 + 104 | 0; //@line 21441
     HEAP32[$209 >> 2] = $22; //@line 21442
     $210 = $ReallocAsyncCtx15 + 108 | 0; //@line 21443
     HEAP32[$210 >> 2] = $18; //@line 21444
     $211 = $ReallocAsyncCtx15 + 112 | 0; //@line 21445
     HEAP32[$211 >> 2] = $4; //@line 21446
     $212 = $ReallocAsyncCtx15 + 116 | 0; //@line 21447
     HEAP32[$212 >> 2] = $10; //@line 21448
     $213 = $ReallocAsyncCtx15 + 120 | 0; //@line 21449
     HEAP32[$213 >> 2] = $20; //@line 21450
     $214 = $ReallocAsyncCtx15 + 124 | 0; //@line 21451
     HEAP32[$214 >> 2] = $154; //@line 21452
     $215 = $ReallocAsyncCtx15 + 128 | 0; //@line 21453
     HEAP32[$215 >> 2] = $44; //@line 21454
     $216 = $ReallocAsyncCtx15 + 132 | 0; //@line 21455
     HEAP8[$216 >> 0] = $153; //@line 21456
     $217 = $ReallocAsyncCtx15 + 136 | 0; //@line 21457
     HEAP32[$217 >> 2] = $46; //@line 21458
     $218 = $ReallocAsyncCtx15 + 140 | 0; //@line 21459
     HEAP32[$218 >> 2] = $8; //@line 21460
     $219 = $ReallocAsyncCtx15 + 144 | 0; //@line 21461
     HEAP8[$219 >> 0] = $trunc; //@line 21462
     sp = STACKTOP; //@line 21463
     return;
    }
    ___async_unwind = 0; //@line 21466
    HEAP32[$ReallocAsyncCtx15 >> 2] = 394; //@line 21467
    $184 = $ReallocAsyncCtx15 + 4 | 0; //@line 21468
    HEAP32[$184 >> 2] = $28; //@line 21469
    $185 = $ReallocAsyncCtx15 + 8 | 0; //@line 21470
    HEAP8[$185 >> 0] = $144; //@line 21471
    $186 = $ReallocAsyncCtx15 + 12 | 0; //@line 21472
    HEAP32[$186 >> 2] = $182; //@line 21473
    $187 = $ReallocAsyncCtx15 + 16 | 0; //@line 21474
    HEAP32[$187 >> 2] = $30; //@line 21475
    $188 = $ReallocAsyncCtx15 + 20 | 0; //@line 21476
    HEAP32[$188 >> 2] = $$1175; //@line 21477
    $189 = $ReallocAsyncCtx15 + 24 | 0; //@line 21478
    HEAP32[$189 >> 2] = $32; //@line 21479
    $190 = $ReallocAsyncCtx15 + 28 | 0; //@line 21480
    HEAP8[$190 >> 0] = $156; //@line 21481
    $191 = $ReallocAsyncCtx15 + 32 | 0; //@line 21482
    HEAP32[$191 >> 2] = $2; //@line 21483
    $192 = $ReallocAsyncCtx15 + 36 | 0; //@line 21484
    HEAP32[$192 >> 2] = $34; //@line 21485
    $193 = $ReallocAsyncCtx15 + 40 | 0; //@line 21486
    HEAP32[$193 >> 2] = $155; //@line 21487
    $194 = $ReallocAsyncCtx15 + 44 | 0; //@line 21488
    HEAP32[$194 >> 2] = $16; //@line 21489
    $195 = $ReallocAsyncCtx15 + 48 | 0; //@line 21490
    HEAP32[$195 >> 2] = $124; //@line 21491
    $196 = $ReallocAsyncCtx15 + 52 | 0; //@line 21492
    HEAP32[$196 >> 2] = $36; //@line 21493
    $197 = $ReallocAsyncCtx15 + 56 | 0; //@line 21494
    HEAP32[$197 >> 2] = $180; //@line 21495
    $198 = $ReallocAsyncCtx15 + 60 | 0; //@line 21496
    HEAP32[$198 >> 2] = $6; //@line 21497
    $199 = $ReallocAsyncCtx15 + 64 | 0; //@line 21498
    HEAP32[$199 >> 2] = $38; //@line 21499
    $200 = $ReallocAsyncCtx15 + 68 | 0; //@line 21500
    HEAP32[$200 >> 2] = $40; //@line 21501
    $201 = $ReallocAsyncCtx15 + 72 | 0; //@line 21502
    HEAP32[$201 >> 2] = $24; //@line 21503
    $202 = $ReallocAsyncCtx15 + 76 | 0; //@line 21504
    HEAP32[$202 >> 2] = $26; //@line 21505
    $203 = $ReallocAsyncCtx15 + 80 | 0; //@line 21506
    HEAP8[$203 >> 0] = $$1169; //@line 21507
    $204 = $ReallocAsyncCtx15 + 84 | 0; //@line 21508
    HEAP32[$204 >> 2] = $$1173; //@line 21509
    $205 = $ReallocAsyncCtx15 + 88 | 0; //@line 21510
    HEAP32[$205 >> 2] = $$1171; //@line 21511
    $206 = $ReallocAsyncCtx15 + 92 | 0; //@line 21512
    HEAP32[$206 >> 2] = $157; //@line 21513
    $207 = $ReallocAsyncCtx15 + 96 | 0; //@line 21514
    HEAP32[$207 >> 2] = $178; //@line 21515
    $208 = $ReallocAsyncCtx15 + 100 | 0; //@line 21516
    HEAP8[$208 >> 0] = $42; //@line 21517
    $209 = $ReallocAsyncCtx15 + 104 | 0; //@line 21518
    HEAP32[$209 >> 2] = $22; //@line 21519
    $210 = $ReallocAsyncCtx15 + 108 | 0; //@line 21520
    HEAP32[$210 >> 2] = $18; //@line 21521
    $211 = $ReallocAsyncCtx15 + 112 | 0; //@line 21522
    HEAP32[$211 >> 2] = $4; //@line 21523
    $212 = $ReallocAsyncCtx15 + 116 | 0; //@line 21524
    HEAP32[$212 >> 2] = $10; //@line 21525
    $213 = $ReallocAsyncCtx15 + 120 | 0; //@line 21526
    HEAP32[$213 >> 2] = $20; //@line 21527
    $214 = $ReallocAsyncCtx15 + 124 | 0; //@line 21528
    HEAP32[$214 >> 2] = $154; //@line 21529
    $215 = $ReallocAsyncCtx15 + 128 | 0; //@line 21530
    HEAP32[$215 >> 2] = $44; //@line 21531
    $216 = $ReallocAsyncCtx15 + 132 | 0; //@line 21532
    HEAP8[$216 >> 0] = $153; //@line 21533
    $217 = $ReallocAsyncCtx15 + 136 | 0; //@line 21534
    HEAP32[$217 >> 2] = $46; //@line 21535
    $218 = $ReallocAsyncCtx15 + 140 | 0; //@line 21536
    HEAP32[$218 >> 2] = $8; //@line 21537
    $219 = $ReallocAsyncCtx15 + 144 | 0; //@line 21538
    HEAP8[$219 >> 0] = $trunc; //@line 21539
    sp = STACKTOP; //@line 21540
    return;
   } else {
    $222 = $142 + 65536 + ($179 << 16 >> 16) | 0; //@line 21546
    $ReallocAsyncCtx14 = _emscripten_realloc_async_context(152) | 0; //@line 21548
    __Z11compute_micPKhtS0_jhjPj($18, $157 & 65535, $$1173, $124, 1, $222, $40) | 0; //@line 21549
    if (___async) {
     HEAP32[$ReallocAsyncCtx14 >> 2] = 395; //@line 21552
     $224 = $ReallocAsyncCtx14 + 4 | 0; //@line 21553
     HEAP32[$224 >> 2] = $28; //@line 21554
     $225 = $ReallocAsyncCtx14 + 8 | 0; //@line 21555
     HEAP8[$225 >> 0] = $144; //@line 21556
     $226 = $ReallocAsyncCtx14 + 12 | 0; //@line 21557
     HEAP32[$226 >> 2] = $30; //@line 21558
     $227 = $ReallocAsyncCtx14 + 16 | 0; //@line 21559
     HEAP32[$227 >> 2] = $$1175; //@line 21560
     $228 = $ReallocAsyncCtx14 + 20 | 0; //@line 21561
     HEAP32[$228 >> 2] = $32; //@line 21562
     $229 = $ReallocAsyncCtx14 + 24 | 0; //@line 21563
     HEAP32[$229 >> 2] = $222; //@line 21564
     $230 = $ReallocAsyncCtx14 + 28 | 0; //@line 21565
     HEAP8[$230 >> 0] = $156; //@line 21566
     $231 = $ReallocAsyncCtx14 + 32 | 0; //@line 21567
     HEAP32[$231 >> 2] = $2; //@line 21568
     $232 = $ReallocAsyncCtx14 + 36 | 0; //@line 21569
     HEAP32[$232 >> 2] = $34; //@line 21570
     $233 = $ReallocAsyncCtx14 + 40 | 0; //@line 21571
     HEAP32[$233 >> 2] = $155; //@line 21572
     $234 = $ReallocAsyncCtx14 + 44 | 0; //@line 21573
     HEAP32[$234 >> 2] = $16; //@line 21574
     $235 = $ReallocAsyncCtx14 + 48 | 0; //@line 21575
     HEAP32[$235 >> 2] = $124; //@line 21576
     $236 = $ReallocAsyncCtx14 + 52 | 0; //@line 21577
     HEAP32[$236 >> 2] = $36; //@line 21578
     $237 = $ReallocAsyncCtx14 + 56 | 0; //@line 21579
     HEAP32[$237 >> 2] = $180; //@line 21580
     $238 = $ReallocAsyncCtx14 + 60 | 0; //@line 21581
     HEAP32[$238 >> 2] = $6; //@line 21582
     $239 = $ReallocAsyncCtx14 + 64 | 0; //@line 21583
     HEAP32[$239 >> 2] = $38; //@line 21584
     $240 = $ReallocAsyncCtx14 + 68 | 0; //@line 21585
     HEAP32[$240 >> 2] = $24; //@line 21586
     $241 = $ReallocAsyncCtx14 + 72 | 0; //@line 21587
     HEAP32[$241 >> 2] = $40; //@line 21588
     $242 = $ReallocAsyncCtx14 + 76 | 0; //@line 21589
     HEAP32[$242 >> 2] = $26; //@line 21590
     $243 = $ReallocAsyncCtx14 + 80 | 0; //@line 21591
     HEAP8[$243 >> 0] = $$1169; //@line 21592
     $244 = $ReallocAsyncCtx14 + 84 | 0; //@line 21593
     HEAP32[$244 >> 2] = $$1173; //@line 21594
     $245 = $ReallocAsyncCtx14 + 88 | 0; //@line 21595
     HEAP32[$245 >> 2] = $$1171; //@line 21596
     $246 = $ReallocAsyncCtx14 + 92 | 0; //@line 21597
     HEAP32[$246 >> 2] = $157; //@line 21598
     $247 = $ReallocAsyncCtx14 + 96 | 0; //@line 21599
     HEAP32[$247 >> 2] = $178; //@line 21600
     $248 = $ReallocAsyncCtx14 + 100 | 0; //@line 21601
     HEAP8[$248 >> 0] = $42; //@line 21602
     $249 = $ReallocAsyncCtx14 + 104 | 0; //@line 21603
     HEAP32[$249 >> 2] = $22; //@line 21604
     $250 = $ReallocAsyncCtx14 + 108 | 0; //@line 21605
     HEAP32[$250 >> 2] = $18; //@line 21606
     $251 = $ReallocAsyncCtx14 + 112 | 0; //@line 21607
     HEAP32[$251 >> 2] = $4; //@line 21608
     $252 = $ReallocAsyncCtx14 + 116 | 0; //@line 21609
     HEAP32[$252 >> 2] = $10; //@line 21610
     $253 = $ReallocAsyncCtx14 + 120 | 0; //@line 21611
     HEAP32[$253 >> 2] = $142; //@line 21612
     $254 = $ReallocAsyncCtx14 + 124 | 0; //@line 21613
     HEAP32[$254 >> 2] = $20; //@line 21614
     $255 = $ReallocAsyncCtx14 + 128 | 0; //@line 21615
     HEAP32[$255 >> 2] = $154; //@line 21616
     $256 = $ReallocAsyncCtx14 + 132 | 0; //@line 21617
     HEAP32[$256 >> 2] = $44; //@line 21618
     $257 = $ReallocAsyncCtx14 + 136 | 0; //@line 21619
     HEAP8[$257 >> 0] = $153; //@line 21620
     $258 = $ReallocAsyncCtx14 + 140 | 0; //@line 21621
     HEAP32[$258 >> 2] = $46; //@line 21622
     $259 = $ReallocAsyncCtx14 + 144 | 0; //@line 21623
     HEAP32[$259 >> 2] = $8; //@line 21624
     $260 = $ReallocAsyncCtx14 + 148 | 0; //@line 21625
     HEAP8[$260 >> 0] = $trunc; //@line 21626
     sp = STACKTOP; //@line 21627
     return;
    }
    ___async_unwind = 0; //@line 21630
    HEAP32[$ReallocAsyncCtx14 >> 2] = 395; //@line 21631
    $224 = $ReallocAsyncCtx14 + 4 | 0; //@line 21632
    HEAP32[$224 >> 2] = $28; //@line 21633
    $225 = $ReallocAsyncCtx14 + 8 | 0; //@line 21634
    HEAP8[$225 >> 0] = $144; //@line 21635
    $226 = $ReallocAsyncCtx14 + 12 | 0; //@line 21636
    HEAP32[$226 >> 2] = $30; //@line 21637
    $227 = $ReallocAsyncCtx14 + 16 | 0; //@line 21638
    HEAP32[$227 >> 2] = $$1175; //@line 21639
    $228 = $ReallocAsyncCtx14 + 20 | 0; //@line 21640
    HEAP32[$228 >> 2] = $32; //@line 21641
    $229 = $ReallocAsyncCtx14 + 24 | 0; //@line 21642
    HEAP32[$229 >> 2] = $222; //@line 21643
    $230 = $ReallocAsyncCtx14 + 28 | 0; //@line 21644
    HEAP8[$230 >> 0] = $156; //@line 21645
    $231 = $ReallocAsyncCtx14 + 32 | 0; //@line 21646
    HEAP32[$231 >> 2] = $2; //@line 21647
    $232 = $ReallocAsyncCtx14 + 36 | 0; //@line 21648
    HEAP32[$232 >> 2] = $34; //@line 21649
    $233 = $ReallocAsyncCtx14 + 40 | 0; //@line 21650
    HEAP32[$233 >> 2] = $155; //@line 21651
    $234 = $ReallocAsyncCtx14 + 44 | 0; //@line 21652
    HEAP32[$234 >> 2] = $16; //@line 21653
    $235 = $ReallocAsyncCtx14 + 48 | 0; //@line 21654
    HEAP32[$235 >> 2] = $124; //@line 21655
    $236 = $ReallocAsyncCtx14 + 52 | 0; //@line 21656
    HEAP32[$236 >> 2] = $36; //@line 21657
    $237 = $ReallocAsyncCtx14 + 56 | 0; //@line 21658
    HEAP32[$237 >> 2] = $180; //@line 21659
    $238 = $ReallocAsyncCtx14 + 60 | 0; //@line 21660
    HEAP32[$238 >> 2] = $6; //@line 21661
    $239 = $ReallocAsyncCtx14 + 64 | 0; //@line 21662
    HEAP32[$239 >> 2] = $38; //@line 21663
    $240 = $ReallocAsyncCtx14 + 68 | 0; //@line 21664
    HEAP32[$240 >> 2] = $24; //@line 21665
    $241 = $ReallocAsyncCtx14 + 72 | 0; //@line 21666
    HEAP32[$241 >> 2] = $40; //@line 21667
    $242 = $ReallocAsyncCtx14 + 76 | 0; //@line 21668
    HEAP32[$242 >> 2] = $26; //@line 21669
    $243 = $ReallocAsyncCtx14 + 80 | 0; //@line 21670
    HEAP8[$243 >> 0] = $$1169; //@line 21671
    $244 = $ReallocAsyncCtx14 + 84 | 0; //@line 21672
    HEAP32[$244 >> 2] = $$1173; //@line 21673
    $245 = $ReallocAsyncCtx14 + 88 | 0; //@line 21674
    HEAP32[$245 >> 2] = $$1171; //@line 21675
    $246 = $ReallocAsyncCtx14 + 92 | 0; //@line 21676
    HEAP32[$246 >> 2] = $157; //@line 21677
    $247 = $ReallocAsyncCtx14 + 96 | 0; //@line 21678
    HEAP32[$247 >> 2] = $178; //@line 21679
    $248 = $ReallocAsyncCtx14 + 100 | 0; //@line 21680
    HEAP8[$248 >> 0] = $42; //@line 21681
    $249 = $ReallocAsyncCtx14 + 104 | 0; //@line 21682
    HEAP32[$249 >> 2] = $22; //@line 21683
    $250 = $ReallocAsyncCtx14 + 108 | 0; //@line 21684
    HEAP32[$250 >> 2] = $18; //@line 21685
    $251 = $ReallocAsyncCtx14 + 112 | 0; //@line 21686
    HEAP32[$251 >> 2] = $4; //@line 21687
    $252 = $ReallocAsyncCtx14 + 116 | 0; //@line 21688
    HEAP32[$252 >> 2] = $10; //@line 21689
    $253 = $ReallocAsyncCtx14 + 120 | 0; //@line 21690
    HEAP32[$253 >> 2] = $142; //@line 21691
    $254 = $ReallocAsyncCtx14 + 124 | 0; //@line 21692
    HEAP32[$254 >> 2] = $20; //@line 21693
    $255 = $ReallocAsyncCtx14 + 128 | 0; //@line 21694
    HEAP32[$255 >> 2] = $154; //@line 21695
    $256 = $ReallocAsyncCtx14 + 132 | 0; //@line 21696
    HEAP32[$256 >> 2] = $44; //@line 21697
    $257 = $ReallocAsyncCtx14 + 136 | 0; //@line 21698
    HEAP8[$257 >> 0] = $153; //@line 21699
    $258 = $ReallocAsyncCtx14 + 140 | 0; //@line 21700
    HEAP32[$258 >> 2] = $46; //@line 21701
    $259 = $ReallocAsyncCtx14 + 144 | 0; //@line 21702
    HEAP32[$259 >> 2] = $8; //@line 21703
    $260 = $ReallocAsyncCtx14 + 148 | 0; //@line 21704
    HEAP8[$260 >> 0] = $trunc; //@line 21705
    sp = STACKTOP; //@line 21706
    return;
   }
   break;
  }
 case 7:
  {
   $261 = $4 + 638 | 0; //@line 21712
   _memcpy($261 | 0, $18 + 1 | 0, $14 | 0) | 0; //@line 21714
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) >> 2] = 3; //@line 21716
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) + 4 >> 2] = 0; //@line 21719
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) + 12 >> 2] = $261; //@line 21722
   HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) + 16 >> 1] = $14 + 65535; //@line 21727
   $272 = $4 + 944 | 0; //@line 21728
   HEAP8[$272 >> 0] = HEAP8[$272 >> 0] | 2; //@line 21731
   $281 = $4 + 944 | 0; //@line 21732
   HEAP8[$281 >> 0] = HEAP8[$281 >> 0] | 32; //@line 21735
   $284 = HEAP32[$6 >> 2] | 0; //@line 21736
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 21738
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($284, $4 + 996 | 0, 1); //@line 21739
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 21742
    $286 = $ReallocAsyncCtx17 + 4 | 0; //@line 21743
    HEAP32[$286 >> 2] = $8; //@line 21744
    $287 = $ReallocAsyncCtx17 + 8 | 0; //@line 21745
    HEAP32[$287 >> 2] = $10; //@line 21746
    sp = STACKTOP; //@line 21747
    return;
   }
   ___async_unwind = 0; //@line 21750
   HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 21751
   $286 = $ReallocAsyncCtx17 + 4 | 0; //@line 21752
   HEAP32[$286 >> 2] = $8; //@line 21753
   $287 = $ReallocAsyncCtx17 + 8 | 0; //@line 21754
   HEAP32[$287 >> 2] = $10; //@line 21755
   sp = STACKTOP; //@line 21756
   return;
  }
 default:
  {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) + 4 >> 2] = 1; //@line 21763
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 21764
   __ZN7LoRaMac21prepare_rx_done_abortEv($4); //@line 21765
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 408; //@line 21768
    $277 = $ReallocAsyncCtx6 + 4 | 0; //@line 21769
    HEAP32[$277 >> 2] = $4; //@line 21770
    $278 = $ReallocAsyncCtx6 + 8 | 0; //@line 21771
    HEAP32[$278 >> 2] = $6; //@line 21772
    $279 = $ReallocAsyncCtx6 + 12 | 0; //@line 21773
    HEAP32[$279 >> 2] = $8; //@line 21774
    $280 = $ReallocAsyncCtx6 + 16 | 0; //@line 21775
    HEAP32[$280 >> 2] = $10; //@line 21776
    sp = STACKTOP; //@line 21777
    return;
   }
   ___async_unwind = 0; //@line 21780
   HEAP32[$ReallocAsyncCtx6 >> 2] = 408; //@line 21781
   $277 = $ReallocAsyncCtx6 + 4 | 0; //@line 21782
   HEAP32[$277 >> 2] = $4; //@line 21783
   $278 = $ReallocAsyncCtx6 + 8 | 0; //@line 21784
   HEAP32[$278 >> 2] = $6; //@line 21785
   $279 = $ReallocAsyncCtx6 + 12 | 0; //@line 21786
   HEAP32[$279 >> 2] = $8; //@line 21787
   $280 = $ReallocAsyncCtx6 + 16 | 0; //@line 21788
   HEAP32[$280 >> 2] = $10; //@line 21789
   sp = STACKTOP; //@line 21790
   return;
  }
 }
}
function _equeue_dispatch__async_cb_107($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$03956$i = 0, $$03956$i$phi = 0, $$04055$i = 0, $$0405571$i = 0, $$04063$i = 0, $$04159$i = 0, $$04258$i = 0, $$057$i = 0, $$065 = 0, $$06790 = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val13 = 0, $$expand_i1_val9 = 0, $$sink$in$i$i = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $127 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $16 = 0, $165 = 0, $166 = 0, $168 = 0, $171 = 0, $173 = 0, $176 = 0, $179 = 0, $18 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $190 = 0, $193 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $44 = 0, $45 = 0, $48 = 0, $54 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $69 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $93 = 0, $95 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0, $$04159$i$looptemp = 0, $$04258$i$looptemp = 0;
 sp = STACKTOP; //@line 28963
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28965
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28967
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28969
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28971
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28973
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28975
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28977
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28979
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28981
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28983
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28985
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28987
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28989
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 28992
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 28994
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 28996
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 28998
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 29000
 _equeue_mutex_lock($16); //@line 29001
 HEAP8[$30 >> 0] = (HEAPU8[$30 >> 0] | 0) + 1; //@line 29006
 if (((HEAP32[$24 >> 2] | 0) - $36 | 0) < 1) {
  HEAP32[$24 >> 2] = $36; //@line 29011
 }
 $44 = HEAP32[$20 >> 2] | 0; //@line 29013
 HEAP32[$22 >> 2] = $44; //@line 29014
 $45 = $44; //@line 29015
 L6 : do {
  if (!$44) {
   $$04055$i = $10; //@line 29019
   $54 = $45; //@line 29019
   label = 8; //@line 29020
  } else {
   $$04063$i = $10; //@line 29022
   $48 = $45; //@line 29022
   do {
    if (((HEAP32[$48 + 20 >> 2] | 0) - $36 | 0) >= 1) {
     $$04055$i = $$04063$i; //@line 29029
     $54 = $48; //@line 29029
     label = 8; //@line 29030
     break L6;
    }
    $$04063$i = $48 + 8 | 0; //@line 29033
    $48 = HEAP32[$$04063$i >> 2] | 0; //@line 29034
   } while (($48 | 0) != 0);
   HEAP32[$26 >> 2] = 0; //@line 29042
   $$0405571$i = $$04063$i; //@line 29043
  }
 } while (0);
 if ((label | 0) == 8) {
  HEAP32[$26 >> 2] = $54; //@line 29047
  if (!$54) {
   $$0405571$i = $$04055$i; //@line 29050
  } else {
   HEAP32[$54 + 16 >> 2] = $26; //@line 29053
   $$0405571$i = $$04055$i; //@line 29054
  }
 }
 HEAP32[$$0405571$i >> 2] = 0; //@line 29057
 _equeue_mutex_unlock($16); //@line 29058
 $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72 = HEAP32[$10 >> 2] | 0; //@line 29059
 L15 : do {
  if (!$$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72) {} else {
   $$04159$i = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72; //@line 29064
   $$04258$i = $10; //@line 29064
   do {
    $$04258$i$looptemp = $$04258$i;
    $$04258$i = $$04159$i + 8 | 0; //@line 29066
    $$04159$i$looptemp = $$04159$i;
    $$04159$i = HEAP32[$$04258$i >> 2] | 0; //@line 29067
    $$03956$i = 0; //@line 29068
    $$057$i = $$04159$i$looptemp; //@line 29068
    while (1) {
     HEAP32[$$057$i + 8 >> 2] = $$03956$i; //@line 29071
     $63 = HEAP32[$$057$i + 12 >> 2] | 0; //@line 29073
     if (!$63) {
      break;
     } else {
      $$03956$i$phi = $$057$i; //@line 29078
      $$057$i = $63; //@line 29078
      $$03956$i = $$03956$i$phi; //@line 29078
     }
    }
    HEAP32[$$04258$i$looptemp >> 2] = $$057$i; //@line 29081
   } while (($$04159$i | 0) != 0);
   $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 = HEAP32[$10 >> 2] | 0; //@line 29089
   if ($$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 | 0) {
    $$06790 = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73; //@line 29092
    while (1) {
     $66 = $$06790 + 8 | 0; //@line 29094
     $67 = HEAP32[$66 >> 2] | 0; //@line 29095
     $69 = HEAP32[$$06790 + 32 >> 2] | 0; //@line 29097
     if ($69 | 0) {
      label = 17; //@line 29100
      break;
     }
     $93 = HEAP32[$$06790 + 24 >> 2] | 0; //@line 29104
     if (($93 | 0) > -1) {
      label = 21; //@line 29107
      break;
     }
     $117 = $$06790 + 4 | 0; //@line 29111
     $118 = HEAP8[$117 >> 0] | 0; //@line 29112
     HEAP8[$117 >> 0] = (($118 + 1 & 255) << HEAP32[$8 >> 2] | 0) == 0 ? 1 : ($118 & 255) + 1 & 255; //@line 29121
     $127 = HEAP32[$$06790 + 28 >> 2] | 0; //@line 29123
     if ($127 | 0) {
      label = 25; //@line 29126
      break;
     }
     _equeue_mutex_lock($2); //@line 29129
     $150 = HEAP32[$4 >> 2] | 0; //@line 29130
     L28 : do {
      if (!$150) {
       $$02329$i$i = $4; //@line 29134
       label = 34; //@line 29135
      } else {
       $152 = HEAP32[$$06790 >> 2] | 0; //@line 29137
       $$025$i$i = $4; //@line 29138
       $154 = $150; //@line 29138
       while (1) {
        $153 = HEAP32[$154 >> 2] | 0; //@line 29140
        if ($153 >>> 0 >= $152 >>> 0) {
         break;
        }
        $156 = $154 + 8 | 0; //@line 29145
        $157 = HEAP32[$156 >> 2] | 0; //@line 29146
        if (!$157) {
         $$02329$i$i = $156; //@line 29149
         label = 34; //@line 29150
         break L28;
        } else {
         $$025$i$i = $156; //@line 29153
         $154 = $157; //@line 29153
        }
       }
       if (($153 | 0) == ($152 | 0)) {
        HEAP32[$$06790 + 12 >> 2] = $154; //@line 29159
        $$02330$i$i = $$025$i$i; //@line 29162
        $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 29162
       } else {
        $$02329$i$i = $$025$i$i; //@line 29164
        label = 34; //@line 29165
       }
      }
     } while (0);
     if ((label | 0) == 34) {
      label = 0; //@line 29170
      HEAP32[$$06790 + 12 >> 2] = 0; //@line 29172
      $$02330$i$i = $$02329$i$i; //@line 29173
      $$sink$in$i$i = $$02329$i$i; //@line 29173
     }
     HEAP32[$66 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 29176
     HEAP32[$$02330$i$i >> 2] = $$06790; //@line 29177
     _equeue_mutex_unlock($2); //@line 29178
     if (!$67) {
      break L15;
     } else {
      $$06790 = $67; //@line 29183
     }
    }
    if ((label | 0) == 17) {
     $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 29188
     FUNCTION_TABLE_vi[$69 & 1023]($$06790 + 36 | 0); //@line 29189
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 180; //@line 29192
      $72 = $ReallocAsyncCtx + 4 | 0; //@line 29193
      HEAP32[$72 >> 2] = $$06790; //@line 29194
      $73 = $ReallocAsyncCtx + 8 | 0; //@line 29195
      HEAP32[$73 >> 2] = $2; //@line 29196
      $74 = $ReallocAsyncCtx + 12 | 0; //@line 29197
      HEAP32[$74 >> 2] = $4; //@line 29198
      $75 = $ReallocAsyncCtx + 16 | 0; //@line 29199
      HEAP32[$75 >> 2] = $6; //@line 29200
      $76 = $ReallocAsyncCtx + 20 | 0; //@line 29201
      HEAP32[$76 >> 2] = $8; //@line 29202
      $77 = $ReallocAsyncCtx + 24 | 0; //@line 29203
      HEAP32[$77 >> 2] = $10; //@line 29204
      $78 = $ReallocAsyncCtx + 28 | 0; //@line 29205
      HEAP32[$78 >> 2] = $12; //@line 29206
      $79 = $ReallocAsyncCtx + 32 | 0; //@line 29207
      HEAP32[$79 >> 2] = $67; //@line 29208
      $80 = $ReallocAsyncCtx + 36 | 0; //@line 29209
      HEAP32[$80 >> 2] = $66; //@line 29210
      $81 = $ReallocAsyncCtx + 40 | 0; //@line 29211
      HEAP32[$81 >> 2] = $20; //@line 29212
      $82 = $ReallocAsyncCtx + 44 | 0; //@line 29213
      HEAP32[$82 >> 2] = $22; //@line 29214
      $83 = $ReallocAsyncCtx + 48 | 0; //@line 29215
      HEAP32[$83 >> 2] = $14; //@line 29216
      $84 = $ReallocAsyncCtx + 52 | 0; //@line 29217
      HEAP32[$84 >> 2] = $16; //@line 29218
      $85 = $ReallocAsyncCtx + 56 | 0; //@line 29219
      HEAP32[$85 >> 2] = $24; //@line 29220
      $86 = $ReallocAsyncCtx + 60 | 0; //@line 29221
      HEAP32[$86 >> 2] = $18; //@line 29222
      $87 = $ReallocAsyncCtx + 64 | 0; //@line 29223
      HEAP32[$87 >> 2] = $26; //@line 29224
      $88 = $ReallocAsyncCtx + 68 | 0; //@line 29225
      $$expand_i1_val = $28 & 1; //@line 29226
      HEAP8[$88 >> 0] = $$expand_i1_val; //@line 29227
      $89 = $ReallocAsyncCtx + 72 | 0; //@line 29228
      HEAP32[$89 >> 2] = $30; //@line 29229
      $90 = $ReallocAsyncCtx + 76 | 0; //@line 29230
      HEAP32[$90 >> 2] = $32; //@line 29231
      $91 = $ReallocAsyncCtx + 80 | 0; //@line 29232
      HEAP32[$91 >> 2] = $34; //@line 29233
      sp = STACKTOP; //@line 29234
      return;
     }
     ___async_unwind = 0; //@line 29237
     HEAP32[$ReallocAsyncCtx >> 2] = 180; //@line 29238
     $72 = $ReallocAsyncCtx + 4 | 0; //@line 29239
     HEAP32[$72 >> 2] = $$06790; //@line 29240
     $73 = $ReallocAsyncCtx + 8 | 0; //@line 29241
     HEAP32[$73 >> 2] = $2; //@line 29242
     $74 = $ReallocAsyncCtx + 12 | 0; //@line 29243
     HEAP32[$74 >> 2] = $4; //@line 29244
     $75 = $ReallocAsyncCtx + 16 | 0; //@line 29245
     HEAP32[$75 >> 2] = $6; //@line 29246
     $76 = $ReallocAsyncCtx + 20 | 0; //@line 29247
     HEAP32[$76 >> 2] = $8; //@line 29248
     $77 = $ReallocAsyncCtx + 24 | 0; //@line 29249
     HEAP32[$77 >> 2] = $10; //@line 29250
     $78 = $ReallocAsyncCtx + 28 | 0; //@line 29251
     HEAP32[$78 >> 2] = $12; //@line 29252
     $79 = $ReallocAsyncCtx + 32 | 0; //@line 29253
     HEAP32[$79 >> 2] = $67; //@line 29254
     $80 = $ReallocAsyncCtx + 36 | 0; //@line 29255
     HEAP32[$80 >> 2] = $66; //@line 29256
     $81 = $ReallocAsyncCtx + 40 | 0; //@line 29257
     HEAP32[$81 >> 2] = $20; //@line 29258
     $82 = $ReallocAsyncCtx + 44 | 0; //@line 29259
     HEAP32[$82 >> 2] = $22; //@line 29260
     $83 = $ReallocAsyncCtx + 48 | 0; //@line 29261
     HEAP32[$83 >> 2] = $14; //@line 29262
     $84 = $ReallocAsyncCtx + 52 | 0; //@line 29263
     HEAP32[$84 >> 2] = $16; //@line 29264
     $85 = $ReallocAsyncCtx + 56 | 0; //@line 29265
     HEAP32[$85 >> 2] = $24; //@line 29266
     $86 = $ReallocAsyncCtx + 60 | 0; //@line 29267
     HEAP32[$86 >> 2] = $18; //@line 29268
     $87 = $ReallocAsyncCtx + 64 | 0; //@line 29269
     HEAP32[$87 >> 2] = $26; //@line 29270
     $88 = $ReallocAsyncCtx + 68 | 0; //@line 29271
     $$expand_i1_val = $28 & 1; //@line 29272
     HEAP8[$88 >> 0] = $$expand_i1_val; //@line 29273
     $89 = $ReallocAsyncCtx + 72 | 0; //@line 29274
     HEAP32[$89 >> 2] = $30; //@line 29275
     $90 = $ReallocAsyncCtx + 76 | 0; //@line 29276
     HEAP32[$90 >> 2] = $32; //@line 29277
     $91 = $ReallocAsyncCtx + 80 | 0; //@line 29278
     HEAP32[$91 >> 2] = $34; //@line 29279
     sp = STACKTOP; //@line 29280
     return;
    } else if ((label | 0) == 21) {
     $95 = $$06790 + 20 | 0; //@line 29284
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $93; //@line 29287
     $98 = _equeue_tick() | 0; //@line 29288
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 29289
     _equeue_enqueue($6, $$06790, $98) | 0; //@line 29290
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 181; //@line 29293
      $99 = $ReallocAsyncCtx4 + 4 | 0; //@line 29294
      HEAP32[$99 >> 2] = $2; //@line 29295
      $100 = $ReallocAsyncCtx4 + 8 | 0; //@line 29296
      HEAP32[$100 >> 2] = $4; //@line 29297
      $101 = $ReallocAsyncCtx4 + 12 | 0; //@line 29298
      HEAP32[$101 >> 2] = $6; //@line 29299
      $102 = $ReallocAsyncCtx4 + 16 | 0; //@line 29300
      HEAP32[$102 >> 2] = $8; //@line 29301
      $103 = $ReallocAsyncCtx4 + 20 | 0; //@line 29302
      HEAP32[$103 >> 2] = $10; //@line 29303
      $104 = $ReallocAsyncCtx4 + 24 | 0; //@line 29304
      HEAP32[$104 >> 2] = $12; //@line 29305
      $105 = $ReallocAsyncCtx4 + 28 | 0; //@line 29306
      HEAP32[$105 >> 2] = $67; //@line 29307
      $106 = $ReallocAsyncCtx4 + 32 | 0; //@line 29308
      HEAP32[$106 >> 2] = $14; //@line 29309
      $107 = $ReallocAsyncCtx4 + 36 | 0; //@line 29310
      HEAP32[$107 >> 2] = $16; //@line 29311
      $108 = $ReallocAsyncCtx4 + 40 | 0; //@line 29312
      HEAP32[$108 >> 2] = $18; //@line 29313
      $109 = $ReallocAsyncCtx4 + 44 | 0; //@line 29314
      HEAP32[$109 >> 2] = $20; //@line 29315
      $110 = $ReallocAsyncCtx4 + 48 | 0; //@line 29316
      HEAP32[$110 >> 2] = $22; //@line 29317
      $111 = $ReallocAsyncCtx4 + 52 | 0; //@line 29318
      HEAP32[$111 >> 2] = $24; //@line 29319
      $112 = $ReallocAsyncCtx4 + 56 | 0; //@line 29320
      HEAP32[$112 >> 2] = $26; //@line 29321
      $113 = $ReallocAsyncCtx4 + 60 | 0; //@line 29322
      $$expand_i1_val9 = $28 & 1; //@line 29323
      HEAP8[$113 >> 0] = $$expand_i1_val9; //@line 29324
      $114 = $ReallocAsyncCtx4 + 64 | 0; //@line 29325
      HEAP32[$114 >> 2] = $30; //@line 29326
      $115 = $ReallocAsyncCtx4 + 68 | 0; //@line 29327
      HEAP32[$115 >> 2] = $32; //@line 29328
      $116 = $ReallocAsyncCtx4 + 72 | 0; //@line 29329
      HEAP32[$116 >> 2] = $34; //@line 29330
      sp = STACKTOP; //@line 29331
      return;
     }
     ___async_unwind = 0; //@line 29334
     HEAP32[$ReallocAsyncCtx4 >> 2] = 181; //@line 29335
     $99 = $ReallocAsyncCtx4 + 4 | 0; //@line 29336
     HEAP32[$99 >> 2] = $2; //@line 29337
     $100 = $ReallocAsyncCtx4 + 8 | 0; //@line 29338
     HEAP32[$100 >> 2] = $4; //@line 29339
     $101 = $ReallocAsyncCtx4 + 12 | 0; //@line 29340
     HEAP32[$101 >> 2] = $6; //@line 29341
     $102 = $ReallocAsyncCtx4 + 16 | 0; //@line 29342
     HEAP32[$102 >> 2] = $8; //@line 29343
     $103 = $ReallocAsyncCtx4 + 20 | 0; //@line 29344
     HEAP32[$103 >> 2] = $10; //@line 29345
     $104 = $ReallocAsyncCtx4 + 24 | 0; //@line 29346
     HEAP32[$104 >> 2] = $12; //@line 29347
     $105 = $ReallocAsyncCtx4 + 28 | 0; //@line 29348
     HEAP32[$105 >> 2] = $67; //@line 29349
     $106 = $ReallocAsyncCtx4 + 32 | 0; //@line 29350
     HEAP32[$106 >> 2] = $14; //@line 29351
     $107 = $ReallocAsyncCtx4 + 36 | 0; //@line 29352
     HEAP32[$107 >> 2] = $16; //@line 29353
     $108 = $ReallocAsyncCtx4 + 40 | 0; //@line 29354
     HEAP32[$108 >> 2] = $18; //@line 29355
     $109 = $ReallocAsyncCtx4 + 44 | 0; //@line 29356
     HEAP32[$109 >> 2] = $20; //@line 29357
     $110 = $ReallocAsyncCtx4 + 48 | 0; //@line 29358
     HEAP32[$110 >> 2] = $22; //@line 29359
     $111 = $ReallocAsyncCtx4 + 52 | 0; //@line 29360
     HEAP32[$111 >> 2] = $24; //@line 29361
     $112 = $ReallocAsyncCtx4 + 56 | 0; //@line 29362
     HEAP32[$112 >> 2] = $26; //@line 29363
     $113 = $ReallocAsyncCtx4 + 60 | 0; //@line 29364
     $$expand_i1_val9 = $28 & 1; //@line 29365
     HEAP8[$113 >> 0] = $$expand_i1_val9; //@line 29366
     $114 = $ReallocAsyncCtx4 + 64 | 0; //@line 29367
     HEAP32[$114 >> 2] = $30; //@line 29368
     $115 = $ReallocAsyncCtx4 + 68 | 0; //@line 29369
     HEAP32[$115 >> 2] = $32; //@line 29370
     $116 = $ReallocAsyncCtx4 + 72 | 0; //@line 29371
     HEAP32[$116 >> 2] = $34; //@line 29372
     sp = STACKTOP; //@line 29373
     return;
    } else if ((label | 0) == 25) {
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 29378
     FUNCTION_TABLE_vi[$127 & 1023]($$06790 + 36 | 0); //@line 29379
     if (___async) {
      HEAP32[$ReallocAsyncCtx2 >> 2] = 182; //@line 29382
      $130 = $ReallocAsyncCtx2 + 4 | 0; //@line 29383
      HEAP32[$130 >> 2] = $2; //@line 29384
      $131 = $ReallocAsyncCtx2 + 8 | 0; //@line 29385
      HEAP32[$131 >> 2] = $4; //@line 29386
      $132 = $ReallocAsyncCtx2 + 12 | 0; //@line 29387
      HEAP32[$132 >> 2] = $6; //@line 29388
      $133 = $ReallocAsyncCtx2 + 16 | 0; //@line 29389
      HEAP32[$133 >> 2] = $8; //@line 29390
      $134 = $ReallocAsyncCtx2 + 20 | 0; //@line 29391
      HEAP32[$134 >> 2] = $10; //@line 29392
      $135 = $ReallocAsyncCtx2 + 24 | 0; //@line 29393
      HEAP32[$135 >> 2] = $12; //@line 29394
      $136 = $ReallocAsyncCtx2 + 28 | 0; //@line 29395
      HEAP32[$136 >> 2] = $67; //@line 29396
      $137 = $ReallocAsyncCtx2 + 32 | 0; //@line 29397
      HEAP32[$137 >> 2] = $66; //@line 29398
      $138 = $ReallocAsyncCtx2 + 36 | 0; //@line 29399
      HEAP32[$138 >> 2] = $$06790; //@line 29400
      $139 = $ReallocAsyncCtx2 + 40 | 0; //@line 29401
      HEAP32[$139 >> 2] = $20; //@line 29402
      $140 = $ReallocAsyncCtx2 + 44 | 0; //@line 29403
      HEAP32[$140 >> 2] = $22; //@line 29404
      $141 = $ReallocAsyncCtx2 + 48 | 0; //@line 29405
      HEAP32[$141 >> 2] = $14; //@line 29406
      $142 = $ReallocAsyncCtx2 + 52 | 0; //@line 29407
      HEAP32[$142 >> 2] = $16; //@line 29408
      $143 = $ReallocAsyncCtx2 + 56 | 0; //@line 29409
      HEAP32[$143 >> 2] = $24; //@line 29410
      $144 = $ReallocAsyncCtx2 + 60 | 0; //@line 29411
      HEAP32[$144 >> 2] = $18; //@line 29412
      $145 = $ReallocAsyncCtx2 + 64 | 0; //@line 29413
      HEAP32[$145 >> 2] = $26; //@line 29414
      $146 = $ReallocAsyncCtx2 + 68 | 0; //@line 29415
      $$expand_i1_val11 = $28 & 1; //@line 29416
      HEAP8[$146 >> 0] = $$expand_i1_val11; //@line 29417
      $147 = $ReallocAsyncCtx2 + 72 | 0; //@line 29418
      HEAP32[$147 >> 2] = $30; //@line 29419
      $148 = $ReallocAsyncCtx2 + 76 | 0; //@line 29420
      HEAP32[$148 >> 2] = $32; //@line 29421
      $149 = $ReallocAsyncCtx2 + 80 | 0; //@line 29422
      HEAP32[$149 >> 2] = $34; //@line 29423
      sp = STACKTOP; //@line 29424
      return;
     }
     ___async_unwind = 0; //@line 29427
     HEAP32[$ReallocAsyncCtx2 >> 2] = 182; //@line 29428
     $130 = $ReallocAsyncCtx2 + 4 | 0; //@line 29429
     HEAP32[$130 >> 2] = $2; //@line 29430
     $131 = $ReallocAsyncCtx2 + 8 | 0; //@line 29431
     HEAP32[$131 >> 2] = $4; //@line 29432
     $132 = $ReallocAsyncCtx2 + 12 | 0; //@line 29433
     HEAP32[$132 >> 2] = $6; //@line 29434
     $133 = $ReallocAsyncCtx2 + 16 | 0; //@line 29435
     HEAP32[$133 >> 2] = $8; //@line 29436
     $134 = $ReallocAsyncCtx2 + 20 | 0; //@line 29437
     HEAP32[$134 >> 2] = $10; //@line 29438
     $135 = $ReallocAsyncCtx2 + 24 | 0; //@line 29439
     HEAP32[$135 >> 2] = $12; //@line 29440
     $136 = $ReallocAsyncCtx2 + 28 | 0; //@line 29441
     HEAP32[$136 >> 2] = $67; //@line 29442
     $137 = $ReallocAsyncCtx2 + 32 | 0; //@line 29443
     HEAP32[$137 >> 2] = $66; //@line 29444
     $138 = $ReallocAsyncCtx2 + 36 | 0; //@line 29445
     HEAP32[$138 >> 2] = $$06790; //@line 29446
     $139 = $ReallocAsyncCtx2 + 40 | 0; //@line 29447
     HEAP32[$139 >> 2] = $20; //@line 29448
     $140 = $ReallocAsyncCtx2 + 44 | 0; //@line 29449
     HEAP32[$140 >> 2] = $22; //@line 29450
     $141 = $ReallocAsyncCtx2 + 48 | 0; //@line 29451
     HEAP32[$141 >> 2] = $14; //@line 29452
     $142 = $ReallocAsyncCtx2 + 52 | 0; //@line 29453
     HEAP32[$142 >> 2] = $16; //@line 29454
     $143 = $ReallocAsyncCtx2 + 56 | 0; //@line 29455
     HEAP32[$143 >> 2] = $24; //@line 29456
     $144 = $ReallocAsyncCtx2 + 60 | 0; //@line 29457
     HEAP32[$144 >> 2] = $18; //@line 29458
     $145 = $ReallocAsyncCtx2 + 64 | 0; //@line 29459
     HEAP32[$145 >> 2] = $26; //@line 29460
     $146 = $ReallocAsyncCtx2 + 68 | 0; //@line 29461
     $$expand_i1_val11 = $28 & 1; //@line 29462
     HEAP8[$146 >> 0] = $$expand_i1_val11; //@line 29463
     $147 = $ReallocAsyncCtx2 + 72 | 0; //@line 29464
     HEAP32[$147 >> 2] = $30; //@line 29465
     $148 = $ReallocAsyncCtx2 + 76 | 0; //@line 29466
     HEAP32[$148 >> 2] = $32; //@line 29467
     $149 = $ReallocAsyncCtx2 + 80 | 0; //@line 29468
     HEAP32[$149 >> 2] = $34; //@line 29469
     sp = STACKTOP; //@line 29470
     return;
    }
   }
  }
 } while (0);
 $165 = _equeue_tick() | 0; //@line 29476
 if ($28) {
  $166 = $32 - $165 | 0; //@line 29478
  if (($166 | 0) < 1) {
   $168 = $6 + 40 | 0; //@line 29481
   if (HEAP32[$168 >> 2] | 0) {
    _equeue_mutex_lock($16); //@line 29485
    $171 = HEAP32[$168 >> 2] | 0; //@line 29486
    if ($171 | 0) {
     $173 = HEAP32[$26 >> 2] | 0; //@line 29489
     if ($173 | 0) {
      $176 = HEAP32[$6 + 44 >> 2] | 0; //@line 29493
      $179 = (HEAP32[$173 + 20 >> 2] | 0) - $165 | 0; //@line 29496
      $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 29500
      FUNCTION_TABLE_vii[$171 & 31]($176, $179 & ~($179 >> 31)); //@line 29501
      if (___async) {
       HEAP32[$ReallocAsyncCtx3 >> 2] = 183; //@line 29504
       $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 29505
       HEAP32[$183 >> 2] = $14; //@line 29506
       $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 29507
       HEAP32[$184 >> 2] = $16; //@line 29508
       $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 29509
       HEAP32[$185 >> 2] = $18; //@line 29510
       sp = STACKTOP; //@line 29511
       return;
      }
      ___async_unwind = 0; //@line 29514
      HEAP32[$ReallocAsyncCtx3 >> 2] = 183; //@line 29515
      $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 29516
      HEAP32[$183 >> 2] = $14; //@line 29517
      $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 29518
      HEAP32[$184 >> 2] = $16; //@line 29519
      $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 29520
      HEAP32[$185 >> 2] = $18; //@line 29521
      sp = STACKTOP; //@line 29522
      return;
     }
    }
    HEAP8[$14 >> 0] = 1; //@line 29526
    _equeue_mutex_unlock($16); //@line 29527
   }
   HEAP8[$18 >> 0] = 0; //@line 29529
   return;
  } else {
   $$065 = $166; //@line 29532
  }
 } else {
  $$065 = -1; //@line 29535
 }
 _equeue_mutex_lock($16); //@line 29537
 $186 = HEAP32[$26 >> 2] | 0; //@line 29538
 if (!$186) {
  $$2 = $$065; //@line 29541
 } else {
  $190 = (HEAP32[$186 + 20 >> 2] | 0) - $165 | 0; //@line 29545
  $193 = $190 & ~($190 >> 31); //@line 29548
  $$2 = $193 >>> 0 < $$065 >>> 0 ? $193 : $$065; //@line 29551
 }
 _equeue_mutex_unlock($16); //@line 29553
 _equeue_sema_wait($34, $$2) | 0; //@line 29554
 do {
  if (HEAP8[$18 >> 0] | 0) {
   _equeue_mutex_lock($16); //@line 29559
   if (!(HEAP8[$18 >> 0] | 0)) {
    _equeue_mutex_unlock($16); //@line 29563
    break;
   }
   HEAP8[$18 >> 0] = 0; //@line 29566
   _equeue_mutex_unlock($16); //@line 29567
   return;
  }
 } while (0);
 $199 = _equeue_tick() | 0; //@line 29571
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 29572
 _wait_ms(20); //@line 29573
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 184; //@line 29576
  $200 = $ReallocAsyncCtx5 + 4 | 0; //@line 29577
  HEAP32[$200 >> 2] = $2; //@line 29578
  $201 = $ReallocAsyncCtx5 + 8 | 0; //@line 29579
  HEAP32[$201 >> 2] = $4; //@line 29580
  $202 = $ReallocAsyncCtx5 + 12 | 0; //@line 29581
  HEAP32[$202 >> 2] = $6; //@line 29582
  $203 = $ReallocAsyncCtx5 + 16 | 0; //@line 29583
  HEAP32[$203 >> 2] = $8; //@line 29584
  $204 = $ReallocAsyncCtx5 + 20 | 0; //@line 29585
  HEAP32[$204 >> 2] = $10; //@line 29586
  $205 = $ReallocAsyncCtx5 + 24 | 0; //@line 29587
  HEAP32[$205 >> 2] = $12; //@line 29588
  $206 = $ReallocAsyncCtx5 + 28 | 0; //@line 29589
  HEAP32[$206 >> 2] = $14; //@line 29590
  $207 = $ReallocAsyncCtx5 + 32 | 0; //@line 29591
  HEAP32[$207 >> 2] = $16; //@line 29592
  $208 = $ReallocAsyncCtx5 + 36 | 0; //@line 29593
  HEAP32[$208 >> 2] = $18; //@line 29594
  $209 = $ReallocAsyncCtx5 + 40 | 0; //@line 29595
  HEAP32[$209 >> 2] = $20; //@line 29596
  $210 = $ReallocAsyncCtx5 + 44 | 0; //@line 29597
  HEAP32[$210 >> 2] = $22; //@line 29598
  $211 = $ReallocAsyncCtx5 + 48 | 0; //@line 29599
  HEAP32[$211 >> 2] = $24; //@line 29600
  $212 = $ReallocAsyncCtx5 + 52 | 0; //@line 29601
  HEAP32[$212 >> 2] = $26; //@line 29602
  $213 = $ReallocAsyncCtx5 + 56 | 0; //@line 29603
  $$expand_i1_val13 = $28 & 1; //@line 29604
  HEAP8[$213 >> 0] = $$expand_i1_val13; //@line 29605
  $214 = $ReallocAsyncCtx5 + 60 | 0; //@line 29606
  HEAP32[$214 >> 2] = $30; //@line 29607
  $215 = $ReallocAsyncCtx5 + 64 | 0; //@line 29608
  HEAP32[$215 >> 2] = $32; //@line 29609
  $216 = $ReallocAsyncCtx5 + 68 | 0; //@line 29610
  HEAP32[$216 >> 2] = $34; //@line 29611
  $217 = $ReallocAsyncCtx5 + 72 | 0; //@line 29612
  HEAP32[$217 >> 2] = $199; //@line 29613
  sp = STACKTOP; //@line 29614
  return;
 }
 ___async_unwind = 0; //@line 29617
 HEAP32[$ReallocAsyncCtx5 >> 2] = 184; //@line 29618
 $200 = $ReallocAsyncCtx5 + 4 | 0; //@line 29619
 HEAP32[$200 >> 2] = $2; //@line 29620
 $201 = $ReallocAsyncCtx5 + 8 | 0; //@line 29621
 HEAP32[$201 >> 2] = $4; //@line 29622
 $202 = $ReallocAsyncCtx5 + 12 | 0; //@line 29623
 HEAP32[$202 >> 2] = $6; //@line 29624
 $203 = $ReallocAsyncCtx5 + 16 | 0; //@line 29625
 HEAP32[$203 >> 2] = $8; //@line 29626
 $204 = $ReallocAsyncCtx5 + 20 | 0; //@line 29627
 HEAP32[$204 >> 2] = $10; //@line 29628
 $205 = $ReallocAsyncCtx5 + 24 | 0; //@line 29629
 HEAP32[$205 >> 2] = $12; //@line 29630
 $206 = $ReallocAsyncCtx5 + 28 | 0; //@line 29631
 HEAP32[$206 >> 2] = $14; //@line 29632
 $207 = $ReallocAsyncCtx5 + 32 | 0; //@line 29633
 HEAP32[$207 >> 2] = $16; //@line 29634
 $208 = $ReallocAsyncCtx5 + 36 | 0; //@line 29635
 HEAP32[$208 >> 2] = $18; //@line 29636
 $209 = $ReallocAsyncCtx5 + 40 | 0; //@line 29637
 HEAP32[$209 >> 2] = $20; //@line 29638
 $210 = $ReallocAsyncCtx5 + 44 | 0; //@line 29639
 HEAP32[$210 >> 2] = $22; //@line 29640
 $211 = $ReallocAsyncCtx5 + 48 | 0; //@line 29641
 HEAP32[$211 >> 2] = $24; //@line 29642
 $212 = $ReallocAsyncCtx5 + 52 | 0; //@line 29643
 HEAP32[$212 >> 2] = $26; //@line 29644
 $213 = $ReallocAsyncCtx5 + 56 | 0; //@line 29645
 $$expand_i1_val13 = $28 & 1; //@line 29646
 HEAP8[$213 >> 0] = $$expand_i1_val13; //@line 29647
 $214 = $ReallocAsyncCtx5 + 60 | 0; //@line 29648
 HEAP32[$214 >> 2] = $30; //@line 29649
 $215 = $ReallocAsyncCtx5 + 64 | 0; //@line 29650
 HEAP32[$215 >> 2] = $32; //@line 29651
 $216 = $ReallocAsyncCtx5 + 68 | 0; //@line 29652
 HEAP32[$216 >> 2] = $34; //@line 29653
 $217 = $ReallocAsyncCtx5 + 72 | 0; //@line 29654
 HEAP32[$217 >> 2] = $199; //@line 29655
 sp = STACKTOP; //@line 29656
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_34($0) {
 $0 = $0 | 0;
 var $$$1177 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val29 = 0, $$1$off0$expand_i1_val31 = 0, $$3$off0204 = 0, $$sink = 0, $10 = 0, $102 = 0, $105 = 0, $106 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $119 = 0, $123 = 0, $124 = 0, $131 = 0, $132 = 0, $139 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $147 = 0, $151 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $215 = 0, $216 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $237 = 0, $24 = 0, $240 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $251 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $261 = 0, $262 = 0, $263 = 0, $266 = 0, $268 = 0, $269 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $8 = 0, $80 = 0, $82 = 0, $85 = 0, $86 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18467
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18469
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 18471
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18473
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18475
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18477
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 18481
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18483
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18485
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18487
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18489
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18491
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18493
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 18495
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 18497
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 18499
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 18501
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 18505
 $40 = HEAP8[$0 + 80 >> 0] | 0; //@line 18507
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 18509
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 18511
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 18513
 $50 = HEAP8[$0 + 100 >> 0] | 0; //@line 18517
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 18519
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 18521
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 18523
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 18525
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 18529
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 18531
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 18533
 $68 = HEAP8[$0 + 136 >> 0] | 0; //@line 18535
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 18537
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 18539
 $74 = HEAP8[$0 + 148 >> 0] | 0; //@line 18541
 $76 = (HEAP32[$0 + 96 >> 2] | 0) == (HEAP32[HEAP32[$0 + 72 >> 2] >> 2] | 0); //@line 18543
 $$$1177 = $76 ? HEAP32[$0 + 24 >> 2] | 0 : HEAP32[$0 + 120 >> 2] | 0; //@line 18544
 $80 = $28 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv(HEAP32[$22 >> 2] | 0) | 0) & 65535) >>> 0; //@line 18548
 $82 = (__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 4 | 0; //@line 18550
 if (!$80) {
  HEAP32[$82 >> 2] = 10; //@line 18552
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 32 >> 2] = $$$1177; //@line 18555
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 18556
  __ZN7LoRaMac21prepare_rx_done_abortEv($56); //@line 18557
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 396; //@line 18560
   $85 = $ReallocAsyncCtx10 + 4 | 0; //@line 18561
   HEAP32[$85 >> 2] = $72; //@line 18562
   $86 = $ReallocAsyncCtx10 + 8 | 0; //@line 18563
   HEAP32[$86 >> 2] = $58; //@line 18564
   sp = STACKTOP; //@line 18565
   return;
  }
  ___async_unwind = 0; //@line 18568
  HEAP32[$ReallocAsyncCtx10 >> 2] = 396; //@line 18569
  $85 = $ReallocAsyncCtx10 + 4 | 0; //@line 18570
  HEAP32[$85 >> 2] = $72; //@line 18571
  $86 = $ReallocAsyncCtx10 + 8 | 0; //@line 18572
  HEAP32[$86 >> 2] = $58; //@line 18573
  sp = STACKTOP; //@line 18574
  return;
 }
 if (!$76) {
  HEAP32[$82 >> 2] = 12; //@line 18578
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 18579
  __ZN7LoRaMac21prepare_rx_done_abortEv($56); //@line 18580
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 407; //@line 18583
   $261 = $ReallocAsyncCtx7 + 4 | 0; //@line 18584
   HEAP32[$261 >> 2] = $72; //@line 18585
   $262 = $ReallocAsyncCtx7 + 8 | 0; //@line 18586
   HEAP32[$262 >> 2] = $58; //@line 18587
   sp = STACKTOP; //@line 18588
   return;
  }
  ___async_unwind = 0; //@line 18591
  HEAP32[$ReallocAsyncCtx7 >> 2] = 407; //@line 18592
  $261 = $ReallocAsyncCtx7 + 4 | 0; //@line 18593
  HEAP32[$261 >> 2] = $72; //@line 18594
  $262 = $ReallocAsyncCtx7 + 8 | 0; //@line 18595
  HEAP32[$262 >> 2] = $58; //@line 18596
  sp = STACKTOP; //@line 18597
  return;
 }
 HEAP32[$82 >> 2] = 0; //@line 18600
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 8 >> 0] = $40; //@line 18603
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 11 >> 0] = ($4 & 255) >>> 4 & 1; //@line 18608
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 12 >> 2] = 0; //@line 18611
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 16 >> 1] = 0; //@line 18614
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 32 >> 2] = $$$1177; //@line 18617
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) + 4 >> 2] = 0; //@line 18620
 HEAP32[$56 + 964 >> 2] = 0; //@line 18622
 $102 = $56 + 4 | 0; //@line 18623
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($102); //@line 18624
 do {
  if ($40 << 24 >> 24 == 1) {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) >> 2] = 2; //@line 18629
   $105 = $8 + 36 | 0; //@line 18630
   $106 = HEAP32[$105 >> 2] | 0; //@line 18631
   if (($106 | 0) != ($$$1177 | 0) | ($106 | 0) == 0) {
    $$1$off0 = 0; //@line 18636
    $$sink = $105; //@line 18636
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 4 >> 2] = 8; //@line 18640
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 32 >> 2] = $$$1177; //@line 18643
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 18644
    __ZN7LoRaMac21prepare_rx_done_abortEv($56); //@line 18645
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 397; //@line 18648
     $113 = $ReallocAsyncCtx9 + 4 | 0; //@line 18649
     HEAP32[$113 >> 2] = $72; //@line 18650
     $114 = $ReallocAsyncCtx9 + 8 | 0; //@line 18651
     HEAP32[$114 >> 2] = $58; //@line 18652
     sp = STACKTOP; //@line 18653
     return;
    }
    ___async_unwind = 0; //@line 18656
    HEAP32[$ReallocAsyncCtx9 >> 2] = 397; //@line 18657
    $113 = $ReallocAsyncCtx9 + 4 | 0; //@line 18658
    HEAP32[$113 >> 2] = $72; //@line 18659
    $114 = $ReallocAsyncCtx9 + 8 | 0; //@line 18660
    HEAP32[$114 >> 2] = $58; //@line 18661
    sp = STACKTOP; //@line 18662
    return;
   }
  } else {
   $116 = $56 + 374 | 0; //@line 18667
   if ($74 << 24 >> 24 == 5) {
    HEAP8[$116 >> 0] = 1; //@line 18669
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) >> 2] = 1; //@line 18671
    $118 = $56 + 960 | 0; //@line 18672
    $119 = HEAP32[$118 >> 2] | 0; //@line 18673
    $$1$off0 = ($119 | 0) != 0 & ($119 | 0) == ($$$1177 | 0); //@line 18677
    $$sink = $118; //@line 18677
    break;
   }
   HEAP8[$116 >> 0] = 0; //@line 18680
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) >> 2] = 0; //@line 18682
   $123 = $56 + 960 | 0; //@line 18683
   $124 = HEAP32[$123 >> 2] | 0; //@line 18684
   if (($124 | 0) != ($$$1177 | 0) | ($124 | 0) == 0) {
    $$1$off0 = 0; //@line 18689
    $$sink = $123; //@line 18689
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 4 >> 2] = 8; //@line 18693
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 32 >> 2] = $$$1177; //@line 18696
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 18697
    __ZN7LoRaMac21prepare_rx_done_abortEv($56); //@line 18698
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 398; //@line 18701
     $131 = $ReallocAsyncCtx8 + 4 | 0; //@line 18702
     HEAP32[$131 >> 2] = $72; //@line 18703
     $132 = $ReallocAsyncCtx8 + 8 | 0; //@line 18704
     HEAP32[$132 >> 2] = $58; //@line 18705
     sp = STACKTOP; //@line 18706
     return;
    }
    ___async_unwind = 0; //@line 18709
    HEAP32[$ReallocAsyncCtx8 >> 2] = 398; //@line 18710
    $131 = $ReallocAsyncCtx8 + 4 | 0; //@line 18711
    HEAP32[$131 >> 2] = $72; //@line 18712
    $132 = $ReallocAsyncCtx8 + 8 | 0; //@line 18713
    HEAP32[$132 >> 2] = $58; //@line 18714
    sp = STACKTOP; //@line 18715
    return;
   }
  }
 } while (0);
 HEAP32[$$sink >> 2] = $$$1177; //@line 18720
 if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) >> 2] | 0) == 1) {
  if ($4 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($102); //@line 18728
  }
 } else {
  __ZN14LoRaMacCommand20clear_command_bufferEv($102); //@line 18731
 }
 do {
  if (($46 | 0) > ($20 | 0)) {
   $139 = $64 + 9 | 0; //@line 18736
   $141 = HEAP8[$54 + $20 >> 0] | 0; //@line 18738
   $142 = $46 - $139 | 0; //@line 18739
   $143 = $142 & 255; //@line 18740
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 9 >> 0] = $141; //@line 18743
   $147 = $68 << 24 >> 24 == 0; //@line 18745
   if (!($141 << 24 >> 24)) {
    if (!$147) {
     $$3$off0204 = 6; //@line 18748
     break;
    }
    $151 = $56 + 638 | 0; //@line 18754
    if (__Z15decrypt_payloadPKhtS0_jhjPh($54 + $139 | 0, $142 & 255, $42, $24, 1, $$$1177, $151) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 4 >> 2] = 13; //@line 18760
    }
    $156 = $56 + 264 | 0; //@line 18762
    $157 = __ZN11LoRaMacMlme16get_confirmationEv($156) | 0; //@line 18763
    $159 = HEAP32[$22 >> 2] | 0; //@line 18765
    $ReallocAsyncCtx21 = _emscripten_realloc_async_context(56) | 0; //@line 18766
    $160 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($102, $151, 0, $143, $50, $157, $56 + 1096 | 0, $159) | 0; //@line 18767
    if (___async) {
     HEAP32[$ReallocAsyncCtx21 >> 2] = 399; //@line 18770
     $161 = $ReallocAsyncCtx21 + 4 | 0; //@line 18771
     HEAP32[$161 >> 2] = $16; //@line 18772
     $162 = $ReallocAsyncCtx21 + 8 | 0; //@line 18773
     $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 18774
     HEAP8[$162 >> 0] = $$1$off0$expand_i1_val; //@line 18775
     $163 = $ReallocAsyncCtx21 + 12 | 0; //@line 18776
     HEAP32[$163 >> 2] = $156; //@line 18777
     $164 = $ReallocAsyncCtx21 + 16 | 0; //@line 18778
     HEAP32[$164 >> 2] = $56; //@line 18779
     $165 = $ReallocAsyncCtx21 + 20 | 0; //@line 18780
     HEAP32[$165 >> 2] = $102; //@line 18781
     $166 = $ReallocAsyncCtx21 + 24 | 0; //@line 18782
     HEAP8[$166 >> 0] = $4; //@line 18783
     $167 = $ReallocAsyncCtx21 + 28 | 0; //@line 18784
     HEAP32[$167 >> 2] = $30; //@line 18785
     $168 = $ReallocAsyncCtx21 + 32 | 0; //@line 18786
     HEAP32[$168 >> 2] = $72; //@line 18787
     $169 = $ReallocAsyncCtx21 + 36 | 0; //@line 18788
     HEAP32[$169 >> 2] = $58; //@line 18789
     $170 = $ReallocAsyncCtx21 + 40 | 0; //@line 18790
     HEAP32[$170 >> 2] = $26; //@line 18791
     $171 = $ReallocAsyncCtx21 + 44 | 0; //@line 18792
     HEAP32[$171 >> 2] = $32; //@line 18793
     $172 = $ReallocAsyncCtx21 + 48 | 0; //@line 18794
     HEAP32[$172 >> 2] = $10; //@line 18795
     $173 = $ReallocAsyncCtx21 + 52 | 0; //@line 18796
     HEAP32[$173 >> 2] = $70; //@line 18797
     sp = STACKTOP; //@line 18798
     return;
    }
    HEAP32[___async_retval >> 2] = $160; //@line 18802
    ___async_unwind = 0; //@line 18803
    HEAP32[$ReallocAsyncCtx21 >> 2] = 399; //@line 18804
    $161 = $ReallocAsyncCtx21 + 4 | 0; //@line 18805
    HEAP32[$161 >> 2] = $16; //@line 18806
    $162 = $ReallocAsyncCtx21 + 8 | 0; //@line 18807
    $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 18808
    HEAP8[$162 >> 0] = $$1$off0$expand_i1_val; //@line 18809
    $163 = $ReallocAsyncCtx21 + 12 | 0; //@line 18810
    HEAP32[$163 >> 2] = $156; //@line 18811
    $164 = $ReallocAsyncCtx21 + 16 | 0; //@line 18812
    HEAP32[$164 >> 2] = $56; //@line 18813
    $165 = $ReallocAsyncCtx21 + 20 | 0; //@line 18814
    HEAP32[$165 >> 2] = $102; //@line 18815
    $166 = $ReallocAsyncCtx21 + 24 | 0; //@line 18816
    HEAP8[$166 >> 0] = $4; //@line 18817
    $167 = $ReallocAsyncCtx21 + 28 | 0; //@line 18818
    HEAP32[$167 >> 2] = $30; //@line 18819
    $168 = $ReallocAsyncCtx21 + 32 | 0; //@line 18820
    HEAP32[$168 >> 2] = $72; //@line 18821
    $169 = $ReallocAsyncCtx21 + 36 | 0; //@line 18822
    HEAP32[$169 >> 2] = $58; //@line 18823
    $170 = $ReallocAsyncCtx21 + 40 | 0; //@line 18824
    HEAP32[$170 >> 2] = $26; //@line 18825
    $171 = $ReallocAsyncCtx21 + 44 | 0; //@line 18826
    HEAP32[$171 >> 2] = $32; //@line 18827
    $172 = $ReallocAsyncCtx21 + 48 | 0; //@line 18828
    HEAP32[$172 >> 2] = $10; //@line 18829
    $173 = $ReallocAsyncCtx21 + 52 | 0; //@line 18830
    HEAP32[$173 >> 2] = $70; //@line 18831
    sp = STACKTOP; //@line 18832
    return;
   }
   if ($147) {
    $202 = $142 & 255; //@line 18838
    $203 = $56 + 638 | 0; //@line 18839
    if (__Z15decrypt_payloadPKhtS0_jhjPh($54 + $139 | 0, $202, $44, $24, 1, $$$1177, $203) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 4 >> 2] = 13; //@line 18845
    }
    if ($$1$off0) {
     $$3$off0204 = 6; //@line 18848
     break;
    }
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 12 >> 2] = $203; //@line 18853
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 16 >> 1] = $202; //@line 18856
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 18 >> 0] = 1; //@line 18859
    label = 44; //@line 18860
    break;
   } else {
    $175 = $56 + 264 | 0; //@line 18863
    $176 = __ZN11LoRaMacMlme16get_confirmationEv($175) | 0; //@line 18864
    $178 = HEAP32[$22 >> 2] | 0; //@line 18866
    $ReallocAsyncCtx20 = _emscripten_realloc_async_context(80) | 0; //@line 18867
    $179 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($102, $54, 8, $14, $50, $176, $56 + 1096 | 0, $178) | 0; //@line 18868
    if (___async) {
     HEAP32[$ReallocAsyncCtx20 >> 2] = 401; //@line 18871
     $180 = $ReallocAsyncCtx20 + 4 | 0; //@line 18872
     HEAP32[$180 >> 2] = $102; //@line 18873
     $181 = $ReallocAsyncCtx20 + 8 | 0; //@line 18874
     HEAP32[$181 >> 2] = $16; //@line 18875
     $182 = $ReallocAsyncCtx20 + 12 | 0; //@line 18876
     HEAP32[$182 >> 2] = $54; //@line 18877
     $183 = $ReallocAsyncCtx20 + 16 | 0; //@line 18878
     HEAP32[$183 >> 2] = $139; //@line 18879
     $184 = $ReallocAsyncCtx20 + 20 | 0; //@line 18880
     HEAP32[$184 >> 2] = $142; //@line 18881
     $185 = $ReallocAsyncCtx20 + 24 | 0; //@line 18882
     HEAP32[$185 >> 2] = $56; //@line 18883
     $186 = $ReallocAsyncCtx20 + 28 | 0; //@line 18884
     HEAP32[$186 >> 2] = $44; //@line 18885
     $187 = $ReallocAsyncCtx20 + 32 | 0; //@line 18886
     HEAP32[$187 >> 2] = $24; //@line 18887
     $188 = $ReallocAsyncCtx20 + 36 | 0; //@line 18888
     HEAP32[$188 >> 2] = $$$1177; //@line 18889
     $189 = $ReallocAsyncCtx20 + 40 | 0; //@line 18890
     HEAP32[$189 >> 2] = $175; //@line 18891
     $190 = $ReallocAsyncCtx20 + 44 | 0; //@line 18892
     HEAP32[$190 >> 2] = $62; //@line 18893
     $191 = $ReallocAsyncCtx20 + 48 | 0; //@line 18894
     HEAP32[$191 >> 2] = $52; //@line 18895
     $192 = $ReallocAsyncCtx20 + 52 | 0; //@line 18896
     HEAP32[$192 >> 2] = $34; //@line 18897
     $193 = $ReallocAsyncCtx20 + 56 | 0; //@line 18898
     HEAP32[$193 >> 2] = $38; //@line 18899
     $194 = $ReallocAsyncCtx20 + 60 | 0; //@line 18900
     $$1$off0$expand_i1_val29 = $$1$off0 & 1; //@line 18901
     HEAP8[$194 >> 0] = $$1$off0$expand_i1_val29; //@line 18902
     $195 = $ReallocAsyncCtx20 + 64 | 0; //@line 18903
     HEAP32[$195 >> 2] = $30; //@line 18904
     $196 = $ReallocAsyncCtx20 + 68 | 0; //@line 18905
     HEAP8[$196 >> 0] = $4; //@line 18906
     $197 = $ReallocAsyncCtx20 + 72 | 0; //@line 18907
     HEAP32[$197 >> 2] = $72; //@line 18908
     $198 = $ReallocAsyncCtx20 + 76 | 0; //@line 18909
     HEAP32[$198 >> 2] = $58; //@line 18910
     sp = STACKTOP; //@line 18911
     return;
    }
    HEAP32[___async_retval >> 2] = $179; //@line 18915
    ___async_unwind = 0; //@line 18916
    HEAP32[$ReallocAsyncCtx20 >> 2] = 401; //@line 18917
    $180 = $ReallocAsyncCtx20 + 4 | 0; //@line 18918
    HEAP32[$180 >> 2] = $102; //@line 18919
    $181 = $ReallocAsyncCtx20 + 8 | 0; //@line 18920
    HEAP32[$181 >> 2] = $16; //@line 18921
    $182 = $ReallocAsyncCtx20 + 12 | 0; //@line 18922
    HEAP32[$182 >> 2] = $54; //@line 18923
    $183 = $ReallocAsyncCtx20 + 16 | 0; //@line 18924
    HEAP32[$183 >> 2] = $139; //@line 18925
    $184 = $ReallocAsyncCtx20 + 20 | 0; //@line 18926
    HEAP32[$184 >> 2] = $142; //@line 18927
    $185 = $ReallocAsyncCtx20 + 24 | 0; //@line 18928
    HEAP32[$185 >> 2] = $56; //@line 18929
    $186 = $ReallocAsyncCtx20 + 28 | 0; //@line 18930
    HEAP32[$186 >> 2] = $44; //@line 18931
    $187 = $ReallocAsyncCtx20 + 32 | 0; //@line 18932
    HEAP32[$187 >> 2] = $24; //@line 18933
    $188 = $ReallocAsyncCtx20 + 36 | 0; //@line 18934
    HEAP32[$188 >> 2] = $$$1177; //@line 18935
    $189 = $ReallocAsyncCtx20 + 40 | 0; //@line 18936
    HEAP32[$189 >> 2] = $175; //@line 18937
    $190 = $ReallocAsyncCtx20 + 44 | 0; //@line 18938
    HEAP32[$190 >> 2] = $62; //@line 18939
    $191 = $ReallocAsyncCtx20 + 48 | 0; //@line 18940
    HEAP32[$191 >> 2] = $52; //@line 18941
    $192 = $ReallocAsyncCtx20 + 52 | 0; //@line 18942
    HEAP32[$192 >> 2] = $34; //@line 18943
    $193 = $ReallocAsyncCtx20 + 56 | 0; //@line 18944
    HEAP32[$193 >> 2] = $38; //@line 18945
    $194 = $ReallocAsyncCtx20 + 60 | 0; //@line 18946
    $$1$off0$expand_i1_val29 = $$1$off0 & 1; //@line 18947
    HEAP8[$194 >> 0] = $$1$off0$expand_i1_val29; //@line 18948
    $195 = $ReallocAsyncCtx20 + 64 | 0; //@line 18949
    HEAP32[$195 >> 2] = $30; //@line 18950
    $196 = $ReallocAsyncCtx20 + 68 | 0; //@line 18951
    HEAP8[$196 >> 0] = $4; //@line 18952
    $197 = $ReallocAsyncCtx20 + 72 | 0; //@line 18953
    HEAP32[$197 >> 2] = $72; //@line 18954
    $198 = $ReallocAsyncCtx20 + 76 | 0; //@line 18955
    HEAP32[$198 >> 2] = $58; //@line 18956
    sp = STACKTOP; //@line 18957
    return;
   }
  } else {
   if (!($68 << 24 >> 24)) {
    if ($$1$off0) {
     $$3$off0204 = 6; //@line 18964
     break;
    } else {
     label = 44; //@line 18967
     break;
    }
   }
   $215 = $56 + 264 | 0; //@line 18971
   $216 = __ZN11LoRaMacMlme16get_confirmationEv($215) | 0; //@line 18972
   $218 = HEAP32[$22 >> 2] | 0; //@line 18974
   $ReallocAsyncCtx19 = _emscripten_realloc_async_context(52) | 0; //@line 18975
   $219 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($102, $54, 8, $14, $50, $216, $56 + 1096 | 0, $218) | 0; //@line 18976
   if (___async) {
    HEAP32[$ReallocAsyncCtx19 >> 2] = 403; //@line 18979
    $220 = $ReallocAsyncCtx19 + 4 | 0; //@line 18980
    HEAP32[$220 >> 2] = $215; //@line 18981
    $221 = $ReallocAsyncCtx19 + 8 | 0; //@line 18982
    HEAP32[$221 >> 2] = $56; //@line 18983
    $222 = $ReallocAsyncCtx19 + 12 | 0; //@line 18984
    HEAP32[$222 >> 2] = $102; //@line 18985
    $223 = $ReallocAsyncCtx19 + 16 | 0; //@line 18986
    $$1$off0$expand_i1_val31 = $$1$off0 & 1; //@line 18987
    HEAP8[$223 >> 0] = $$1$off0$expand_i1_val31; //@line 18988
    $224 = $ReallocAsyncCtx19 + 17 | 0; //@line 18989
    HEAP8[$224 >> 0] = $4; //@line 18990
    $225 = $ReallocAsyncCtx19 + 20 | 0; //@line 18991
    HEAP32[$225 >> 2] = $16; //@line 18992
    $226 = $ReallocAsyncCtx19 + 24 | 0; //@line 18993
    HEAP32[$226 >> 2] = $30; //@line 18994
    $227 = $ReallocAsyncCtx19 + 28 | 0; //@line 18995
    HEAP32[$227 >> 2] = $72; //@line 18996
    $228 = $ReallocAsyncCtx19 + 32 | 0; //@line 18997
    HEAP32[$228 >> 2] = $58; //@line 18998
    $229 = $ReallocAsyncCtx19 + 36 | 0; //@line 18999
    HEAP32[$229 >> 2] = $18; //@line 19000
    $230 = $ReallocAsyncCtx19 + 40 | 0; //@line 19001
    HEAP32[$230 >> 2] = $66; //@line 19002
    $231 = $ReallocAsyncCtx19 + 44 | 0; //@line 19003
    HEAP32[$231 >> 2] = $6; //@line 19004
    $232 = $ReallocAsyncCtx19 + 48 | 0; //@line 19005
    HEAP32[$232 >> 2] = $2; //@line 19006
    sp = STACKTOP; //@line 19007
    return;
   }
   HEAP32[___async_retval >> 2] = $219; //@line 19011
   ___async_unwind = 0; //@line 19012
   HEAP32[$ReallocAsyncCtx19 >> 2] = 403; //@line 19013
   $220 = $ReallocAsyncCtx19 + 4 | 0; //@line 19014
   HEAP32[$220 >> 2] = $215; //@line 19015
   $221 = $ReallocAsyncCtx19 + 8 | 0; //@line 19016
   HEAP32[$221 >> 2] = $56; //@line 19017
   $222 = $ReallocAsyncCtx19 + 12 | 0; //@line 19018
   HEAP32[$222 >> 2] = $102; //@line 19019
   $223 = $ReallocAsyncCtx19 + 16 | 0; //@line 19020
   $$1$off0$expand_i1_val31 = $$1$off0 & 1; //@line 19021
   HEAP8[$223 >> 0] = $$1$off0$expand_i1_val31; //@line 19022
   $224 = $ReallocAsyncCtx19 + 17 | 0; //@line 19023
   HEAP8[$224 >> 0] = $4; //@line 19024
   $225 = $ReallocAsyncCtx19 + 20 | 0; //@line 19025
   HEAP32[$225 >> 2] = $16; //@line 19026
   $226 = $ReallocAsyncCtx19 + 24 | 0; //@line 19027
   HEAP32[$226 >> 2] = $30; //@line 19028
   $227 = $ReallocAsyncCtx19 + 28 | 0; //@line 19029
   HEAP32[$227 >> 2] = $72; //@line 19030
   $228 = $ReallocAsyncCtx19 + 32 | 0; //@line 19031
   HEAP32[$228 >> 2] = $58; //@line 19032
   $229 = $ReallocAsyncCtx19 + 36 | 0; //@line 19033
   HEAP32[$229 >> 2] = $18; //@line 19034
   $230 = $ReallocAsyncCtx19 + 40 | 0; //@line 19035
   HEAP32[$230 >> 2] = $66; //@line 19036
   $231 = $ReallocAsyncCtx19 + 44 | 0; //@line 19037
   HEAP32[$231 >> 2] = $6; //@line 19038
   $232 = $ReallocAsyncCtx19 + 48 | 0; //@line 19039
   HEAP32[$232 >> 2] = $2; //@line 19040
   sp = STACKTOP; //@line 19041
   return;
  }
 } while (0);
 if ((label | 0) == 44) {
  $237 = (__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) + 10 | 0; //@line 19049
  if ($4 & 32) {
   HEAP8[$237 >> 0] = 1; //@line 19051
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 28 >> 0] = 1; //@line 19054
   $240 = HEAP32[$30 >> 2] | 0; //@line 19055
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 19057
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($240, $56 + 1076 | 0); //@line 19058
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 19061
    $242 = $ReallocAsyncCtx23 + 4 | 0; //@line 19062
    HEAP32[$242 >> 2] = $56; //@line 19063
    $243 = $ReallocAsyncCtx23 + 8 | 0; //@line 19064
    HEAP32[$243 >> 2] = $30; //@line 19065
    $244 = $ReallocAsyncCtx23 + 12 | 0; //@line 19066
    HEAP32[$244 >> 2] = $72; //@line 19067
    $245 = $ReallocAsyncCtx23 + 16 | 0; //@line 19068
    HEAP32[$245 >> 2] = $58; //@line 19069
    sp = STACKTOP; //@line 19070
    return;
   }
   ___async_unwind = 0; //@line 19073
   HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 19074
   $242 = $ReallocAsyncCtx23 + 4 | 0; //@line 19075
   HEAP32[$242 >> 2] = $56; //@line 19076
   $243 = $ReallocAsyncCtx23 + 8 | 0; //@line 19077
   HEAP32[$243 >> 2] = $30; //@line 19078
   $244 = $ReallocAsyncCtx23 + 12 | 0; //@line 19079
   HEAP32[$244 >> 2] = $72; //@line 19080
   $245 = $ReallocAsyncCtx23 + 16 | 0; //@line 19081
   HEAP32[$245 >> 2] = $58; //@line 19082
   sp = STACKTOP; //@line 19083
   return;
  }
  HEAP8[$237 >> 0] = 0; //@line 19086
  if ((HEAPU8[$56 + 895 >> 0] | 0) > (HEAPU8[$56 + 894 >> 0] | 0)) {
   $251 = HEAP32[$30 >> 2] | 0; //@line 19093
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 19095
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($251, $56 + 1076 | 0); //@line 19096
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 19099
    $253 = $ReallocAsyncCtx22 + 4 | 0; //@line 19100
    HEAP32[$253 >> 2] = $56; //@line 19101
    $254 = $ReallocAsyncCtx22 + 8 | 0; //@line 19102
    HEAP32[$254 >> 2] = $30; //@line 19103
    $255 = $ReallocAsyncCtx22 + 12 | 0; //@line 19104
    HEAP32[$255 >> 2] = $72; //@line 19105
    $256 = $ReallocAsyncCtx22 + 16 | 0; //@line 19106
    HEAP32[$256 >> 2] = $58; //@line 19107
    sp = STACKTOP; //@line 19108
    return;
   }
   ___async_unwind = 0; //@line 19111
   HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 19112
   $253 = $ReallocAsyncCtx22 + 4 | 0; //@line 19113
   HEAP32[$253 >> 2] = $56; //@line 19114
   $254 = $ReallocAsyncCtx22 + 8 | 0; //@line 19115
   HEAP32[$254 >> 2] = $30; //@line 19116
   $255 = $ReallocAsyncCtx22 + 12 | 0; //@line 19117
   HEAP32[$255 >> 2] = $72; //@line 19118
   $256 = $ReallocAsyncCtx22 + 16 | 0; //@line 19119
   HEAP32[$256 >> 2] = $58; //@line 19120
   sp = STACKTOP; //@line 19121
   return;
  } else {
   $$3$off0204 = 2; //@line 19124
  }
 }
 $257 = $56 + 944 | 0; //@line 19127
 HEAP8[$257 >> 0] = $$3$off0204 | HEAP8[$257 >> 0] & -7; //@line 19131
 $263 = $56 + 944 | 0; //@line 19132
 HEAP8[$263 >> 0] = HEAP8[$263 >> 0] | 32; //@line 19135
 $266 = HEAP32[$30 >> 2] | 0; //@line 19136
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 19138
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($266, $56 + 996 | 0, 1); //@line 19139
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 19142
  $268 = $ReallocAsyncCtx17 + 4 | 0; //@line 19143
  HEAP32[$268 >> 2] = $72; //@line 19144
  $269 = $ReallocAsyncCtx17 + 8 | 0; //@line 19145
  HEAP32[$269 >> 2] = $58; //@line 19146
  sp = STACKTOP; //@line 19147
  return;
 }
 ___async_unwind = 0; //@line 19150
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 19151
 $268 = $ReallocAsyncCtx17 + 4 | 0; //@line 19152
 HEAP32[$268 >> 2] = $72; //@line 19153
 $269 = $ReallocAsyncCtx17 + 8 | 0; //@line 19154
 HEAP32[$269 >> 2] = $58; //@line 19155
 sp = STACKTOP; //@line 19156
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_35($0) {
 $0 = $0 | 0;
 var $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val29 = 0, $$1$off0$expand_i1_val31 = 0, $$3$off0204 = 0, $$sink = 0, $10 = 0, $100 = 0, $103 = 0, $104 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $117 = 0, $12 = 0, $121 = 0, $122 = 0, $129 = 0, $130 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $145 = 0, $149 = 0, $154 = 0, $155 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $213 = 0, $214 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $235 = 0, $238 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $249 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $264 = 0, $266 = 0, $267 = 0, $28 = 0, $30 = 0, $32 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $78 = 0, $8 = 0, $80 = 0, $83 = 0, $84 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19176
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19178
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 19180
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19182
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19184
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19186
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19188
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 19190
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19192
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19194
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19196
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19198
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19200
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19202
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19204
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 19206
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 19208
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 19212
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 19214
 $40 = HEAP8[$0 + 80 >> 0] | 0; //@line 19216
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 19218
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 19220
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 19222
 $50 = HEAP8[$0 + 100 >> 0] | 0; //@line 19226
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 19228
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 19230
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 19232
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 19234
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 19236
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 19238
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 19240
 $66 = HEAP8[$0 + 132 >> 0] | 0; //@line 19242
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 19244
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 19246
 $72 = HEAP8[$0 + 144 >> 0] | 0; //@line 19248
 $74 = (HEAP32[$0 + 96 >> 2] | 0) == (HEAP32[HEAP32[$0 + 68 >> 2] >> 2] | 0); //@line 19250
 $78 = $28 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv(HEAP32[$22 >> 2] | 0) | 0) & 65535) >>> 0; //@line 19254
 $80 = (__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 4 | 0; //@line 19256
 if (!$78) {
  HEAP32[$80 >> 2] = 10; //@line 19258
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 32 >> 2] = $6; //@line 19261
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 19262
  __ZN7LoRaMac21prepare_rx_done_abortEv($56); //@line 19263
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 396; //@line 19266
   $83 = $ReallocAsyncCtx10 + 4 | 0; //@line 19267
   HEAP32[$83 >> 2] = $70; //@line 19268
   $84 = $ReallocAsyncCtx10 + 8 | 0; //@line 19269
   HEAP32[$84 >> 2] = $58; //@line 19270
   sp = STACKTOP; //@line 19271
   return;
  }
  ___async_unwind = 0; //@line 19274
  HEAP32[$ReallocAsyncCtx10 >> 2] = 396; //@line 19275
  $83 = $ReallocAsyncCtx10 + 4 | 0; //@line 19276
  HEAP32[$83 >> 2] = $70; //@line 19277
  $84 = $ReallocAsyncCtx10 + 8 | 0; //@line 19278
  HEAP32[$84 >> 2] = $58; //@line 19279
  sp = STACKTOP; //@line 19280
  return;
 }
 if (!$74) {
  HEAP32[$80 >> 2] = 12; //@line 19284
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 19285
  __ZN7LoRaMac21prepare_rx_done_abortEv($56); //@line 19286
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 407; //@line 19289
   $259 = $ReallocAsyncCtx7 + 4 | 0; //@line 19290
   HEAP32[$259 >> 2] = $70; //@line 19291
   $260 = $ReallocAsyncCtx7 + 8 | 0; //@line 19292
   HEAP32[$260 >> 2] = $58; //@line 19293
   sp = STACKTOP; //@line 19294
   return;
  }
  ___async_unwind = 0; //@line 19297
  HEAP32[$ReallocAsyncCtx7 >> 2] = 407; //@line 19298
  $259 = $ReallocAsyncCtx7 + 4 | 0; //@line 19299
  HEAP32[$259 >> 2] = $70; //@line 19300
  $260 = $ReallocAsyncCtx7 + 8 | 0; //@line 19301
  HEAP32[$260 >> 2] = $58; //@line 19302
  sp = STACKTOP; //@line 19303
  return;
 }
 HEAP32[$80 >> 2] = 0; //@line 19306
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 8 >> 0] = $40; //@line 19309
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 11 >> 0] = ($4 & 255) >>> 4 & 1; //@line 19314
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 12 >> 2] = 0; //@line 19317
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 16 >> 1] = 0; //@line 19320
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 32 >> 2] = $6; //@line 19323
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) + 4 >> 2] = 0; //@line 19326
 HEAP32[$56 + 964 >> 2] = 0; //@line 19328
 $100 = $56 + 4 | 0; //@line 19329
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($100); //@line 19330
 do {
  if ($40 << 24 >> 24 == 1) {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) >> 2] = 2; //@line 19335
   $103 = $10 + 36 | 0; //@line 19336
   $104 = HEAP32[$103 >> 2] | 0; //@line 19337
   if (($104 | 0) != ($6 | 0) | ($104 | 0) == 0) {
    $$1$off0 = 0; //@line 19342
    $$sink = $103; //@line 19342
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 4 >> 2] = 8; //@line 19346
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 32 >> 2] = $6; //@line 19349
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 19350
    __ZN7LoRaMac21prepare_rx_done_abortEv($56); //@line 19351
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 397; //@line 19354
     $111 = $ReallocAsyncCtx9 + 4 | 0; //@line 19355
     HEAP32[$111 >> 2] = $70; //@line 19356
     $112 = $ReallocAsyncCtx9 + 8 | 0; //@line 19357
     HEAP32[$112 >> 2] = $58; //@line 19358
     sp = STACKTOP; //@line 19359
     return;
    }
    ___async_unwind = 0; //@line 19362
    HEAP32[$ReallocAsyncCtx9 >> 2] = 397; //@line 19363
    $111 = $ReallocAsyncCtx9 + 4 | 0; //@line 19364
    HEAP32[$111 >> 2] = $70; //@line 19365
    $112 = $ReallocAsyncCtx9 + 8 | 0; //@line 19366
    HEAP32[$112 >> 2] = $58; //@line 19367
    sp = STACKTOP; //@line 19368
    return;
   }
  } else {
   $114 = $56 + 374 | 0; //@line 19373
   if ($72 << 24 >> 24 == 5) {
    HEAP8[$114 >> 0] = 1; //@line 19375
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) >> 2] = 1; //@line 19377
    $116 = $56 + 960 | 0; //@line 19378
    $117 = HEAP32[$116 >> 2] | 0; //@line 19379
    $$1$off0 = ($117 | 0) != 0 & ($117 | 0) == ($6 | 0); //@line 19383
    $$sink = $116; //@line 19383
    break;
   }
   HEAP8[$114 >> 0] = 0; //@line 19386
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) >> 2] = 0; //@line 19388
   $121 = $56 + 960 | 0; //@line 19389
   $122 = HEAP32[$121 >> 2] | 0; //@line 19390
   if (($122 | 0) != ($6 | 0) | ($122 | 0) == 0) {
    $$1$off0 = 0; //@line 19395
    $$sink = $121; //@line 19395
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 4 >> 2] = 8; //@line 19399
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 32 >> 2] = $6; //@line 19402
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 19403
    __ZN7LoRaMac21prepare_rx_done_abortEv($56); //@line 19404
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 398; //@line 19407
     $129 = $ReallocAsyncCtx8 + 4 | 0; //@line 19408
     HEAP32[$129 >> 2] = $70; //@line 19409
     $130 = $ReallocAsyncCtx8 + 8 | 0; //@line 19410
     HEAP32[$130 >> 2] = $58; //@line 19411
     sp = STACKTOP; //@line 19412
     return;
    }
    ___async_unwind = 0; //@line 19415
    HEAP32[$ReallocAsyncCtx8 >> 2] = 398; //@line 19416
    $129 = $ReallocAsyncCtx8 + 4 | 0; //@line 19417
    HEAP32[$129 >> 2] = $70; //@line 19418
    $130 = $ReallocAsyncCtx8 + 8 | 0; //@line 19419
    HEAP32[$130 >> 2] = $58; //@line 19420
    sp = STACKTOP; //@line 19421
    return;
   }
  }
 } while (0);
 HEAP32[$$sink >> 2] = $6; //@line 19426
 if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) >> 2] | 0) == 1) {
  if ($4 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($100); //@line 19434
  }
 } else {
  __ZN14LoRaMacCommand20clear_command_bufferEv($100); //@line 19437
 }
 do {
  if (($46 | 0) > ($20 | 0)) {
   $137 = $62 + 9 | 0; //@line 19442
   $139 = HEAP8[$54 + $20 >> 0] | 0; //@line 19444
   $140 = $46 - $137 | 0; //@line 19445
   $141 = $140 & 255; //@line 19446
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 9 >> 0] = $139; //@line 19449
   $145 = $66 << 24 >> 24 == 0; //@line 19451
   if (!($139 << 24 >> 24)) {
    if (!$145) {
     $$3$off0204 = 6; //@line 19454
     break;
    }
    $149 = $56 + 638 | 0; //@line 19460
    if (__Z15decrypt_payloadPKhtS0_jhjPh($54 + $137 | 0, $140 & 255, $42, $24, 1, $6, $149) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 4 >> 2] = 13; //@line 19466
    }
    $154 = $56 + 264 | 0; //@line 19468
    $155 = __ZN11LoRaMacMlme16get_confirmationEv($154) | 0; //@line 19469
    $157 = HEAP32[$22 >> 2] | 0; //@line 19471
    $ReallocAsyncCtx21 = _emscripten_realloc_async_context(56) | 0; //@line 19472
    $158 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($100, $149, 0, $141, $50, $155, $56 + 1096 | 0, $157) | 0; //@line 19473
    if (___async) {
     HEAP32[$ReallocAsyncCtx21 >> 2] = 399; //@line 19476
     $159 = $ReallocAsyncCtx21 + 4 | 0; //@line 19477
     HEAP32[$159 >> 2] = $16; //@line 19478
     $160 = $ReallocAsyncCtx21 + 8 | 0; //@line 19479
     $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 19480
     HEAP8[$160 >> 0] = $$1$off0$expand_i1_val; //@line 19481
     $161 = $ReallocAsyncCtx21 + 12 | 0; //@line 19482
     HEAP32[$161 >> 2] = $154; //@line 19483
     $162 = $ReallocAsyncCtx21 + 16 | 0; //@line 19484
     HEAP32[$162 >> 2] = $56; //@line 19485
     $163 = $ReallocAsyncCtx21 + 20 | 0; //@line 19486
     HEAP32[$163 >> 2] = $100; //@line 19487
     $164 = $ReallocAsyncCtx21 + 24 | 0; //@line 19488
     HEAP8[$164 >> 0] = $4; //@line 19489
     $165 = $ReallocAsyncCtx21 + 28 | 0; //@line 19490
     HEAP32[$165 >> 2] = $30; //@line 19491
     $166 = $ReallocAsyncCtx21 + 32 | 0; //@line 19492
     HEAP32[$166 >> 2] = $70; //@line 19493
     $167 = $ReallocAsyncCtx21 + 36 | 0; //@line 19494
     HEAP32[$167 >> 2] = $58; //@line 19495
     $168 = $ReallocAsyncCtx21 + 40 | 0; //@line 19496
     HEAP32[$168 >> 2] = $26; //@line 19497
     $169 = $ReallocAsyncCtx21 + 44 | 0; //@line 19498
     HEAP32[$169 >> 2] = $32; //@line 19499
     $170 = $ReallocAsyncCtx21 + 48 | 0; //@line 19500
     HEAP32[$170 >> 2] = $12; //@line 19501
     $171 = $ReallocAsyncCtx21 + 52 | 0; //@line 19502
     HEAP32[$171 >> 2] = $68; //@line 19503
     sp = STACKTOP; //@line 19504
     return;
    }
    HEAP32[___async_retval >> 2] = $158; //@line 19508
    ___async_unwind = 0; //@line 19509
    HEAP32[$ReallocAsyncCtx21 >> 2] = 399; //@line 19510
    $159 = $ReallocAsyncCtx21 + 4 | 0; //@line 19511
    HEAP32[$159 >> 2] = $16; //@line 19512
    $160 = $ReallocAsyncCtx21 + 8 | 0; //@line 19513
    $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 19514
    HEAP8[$160 >> 0] = $$1$off0$expand_i1_val; //@line 19515
    $161 = $ReallocAsyncCtx21 + 12 | 0; //@line 19516
    HEAP32[$161 >> 2] = $154; //@line 19517
    $162 = $ReallocAsyncCtx21 + 16 | 0; //@line 19518
    HEAP32[$162 >> 2] = $56; //@line 19519
    $163 = $ReallocAsyncCtx21 + 20 | 0; //@line 19520
    HEAP32[$163 >> 2] = $100; //@line 19521
    $164 = $ReallocAsyncCtx21 + 24 | 0; //@line 19522
    HEAP8[$164 >> 0] = $4; //@line 19523
    $165 = $ReallocAsyncCtx21 + 28 | 0; //@line 19524
    HEAP32[$165 >> 2] = $30; //@line 19525
    $166 = $ReallocAsyncCtx21 + 32 | 0; //@line 19526
    HEAP32[$166 >> 2] = $70; //@line 19527
    $167 = $ReallocAsyncCtx21 + 36 | 0; //@line 19528
    HEAP32[$167 >> 2] = $58; //@line 19529
    $168 = $ReallocAsyncCtx21 + 40 | 0; //@line 19530
    HEAP32[$168 >> 2] = $26; //@line 19531
    $169 = $ReallocAsyncCtx21 + 44 | 0; //@line 19532
    HEAP32[$169 >> 2] = $32; //@line 19533
    $170 = $ReallocAsyncCtx21 + 48 | 0; //@line 19534
    HEAP32[$170 >> 2] = $12; //@line 19535
    $171 = $ReallocAsyncCtx21 + 52 | 0; //@line 19536
    HEAP32[$171 >> 2] = $68; //@line 19537
    sp = STACKTOP; //@line 19538
    return;
   }
   if ($145) {
    $200 = $140 & 255; //@line 19544
    $201 = $56 + 638 | 0; //@line 19545
    if (__Z15decrypt_payloadPKhtS0_jhjPh($54 + $137 | 0, $200, $44, $24, 1, $6, $201) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 4 >> 2] = 13; //@line 19551
    }
    if ($$1$off0) {
     $$3$off0204 = 6; //@line 19554
     break;
    }
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 12 >> 2] = $201; //@line 19559
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 16 >> 1] = $200; //@line 19562
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 18 >> 0] = 1; //@line 19565
    label = 44; //@line 19566
    break;
   } else {
    $173 = $56 + 264 | 0; //@line 19569
    $174 = __ZN11LoRaMacMlme16get_confirmationEv($173) | 0; //@line 19570
    $176 = HEAP32[$22 >> 2] | 0; //@line 19572
    $ReallocAsyncCtx20 = _emscripten_realloc_async_context(80) | 0; //@line 19573
    $177 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($100, $54, 8, $14, $50, $174, $56 + 1096 | 0, $176) | 0; //@line 19574
    if (___async) {
     HEAP32[$ReallocAsyncCtx20 >> 2] = 401; //@line 19577
     $178 = $ReallocAsyncCtx20 + 4 | 0; //@line 19578
     HEAP32[$178 >> 2] = $100; //@line 19579
     $179 = $ReallocAsyncCtx20 + 8 | 0; //@line 19580
     HEAP32[$179 >> 2] = $16; //@line 19581
     $180 = $ReallocAsyncCtx20 + 12 | 0; //@line 19582
     HEAP32[$180 >> 2] = $54; //@line 19583
     $181 = $ReallocAsyncCtx20 + 16 | 0; //@line 19584
     HEAP32[$181 >> 2] = $137; //@line 19585
     $182 = $ReallocAsyncCtx20 + 20 | 0; //@line 19586
     HEAP32[$182 >> 2] = $140; //@line 19587
     $183 = $ReallocAsyncCtx20 + 24 | 0; //@line 19588
     HEAP32[$183 >> 2] = $56; //@line 19589
     $184 = $ReallocAsyncCtx20 + 28 | 0; //@line 19590
     HEAP32[$184 >> 2] = $44; //@line 19591
     $185 = $ReallocAsyncCtx20 + 32 | 0; //@line 19592
     HEAP32[$185 >> 2] = $24; //@line 19593
     $186 = $ReallocAsyncCtx20 + 36 | 0; //@line 19594
     HEAP32[$186 >> 2] = $6; //@line 19595
     $187 = $ReallocAsyncCtx20 + 40 | 0; //@line 19596
     HEAP32[$187 >> 2] = $173; //@line 19597
     $188 = $ReallocAsyncCtx20 + 44 | 0; //@line 19598
     HEAP32[$188 >> 2] = $60; //@line 19599
     $189 = $ReallocAsyncCtx20 + 48 | 0; //@line 19600
     HEAP32[$189 >> 2] = $52; //@line 19601
     $190 = $ReallocAsyncCtx20 + 52 | 0; //@line 19602
     HEAP32[$190 >> 2] = $36; //@line 19603
     $191 = $ReallocAsyncCtx20 + 56 | 0; //@line 19604
     HEAP32[$191 >> 2] = $38; //@line 19605
     $192 = $ReallocAsyncCtx20 + 60 | 0; //@line 19606
     $$1$off0$expand_i1_val29 = $$1$off0 & 1; //@line 19607
     HEAP8[$192 >> 0] = $$1$off0$expand_i1_val29; //@line 19608
     $193 = $ReallocAsyncCtx20 + 64 | 0; //@line 19609
     HEAP32[$193 >> 2] = $30; //@line 19610
     $194 = $ReallocAsyncCtx20 + 68 | 0; //@line 19611
     HEAP8[$194 >> 0] = $4; //@line 19612
     $195 = $ReallocAsyncCtx20 + 72 | 0; //@line 19613
     HEAP32[$195 >> 2] = $70; //@line 19614
     $196 = $ReallocAsyncCtx20 + 76 | 0; //@line 19615
     HEAP32[$196 >> 2] = $58; //@line 19616
     sp = STACKTOP; //@line 19617
     return;
    }
    HEAP32[___async_retval >> 2] = $177; //@line 19621
    ___async_unwind = 0; //@line 19622
    HEAP32[$ReallocAsyncCtx20 >> 2] = 401; //@line 19623
    $178 = $ReallocAsyncCtx20 + 4 | 0; //@line 19624
    HEAP32[$178 >> 2] = $100; //@line 19625
    $179 = $ReallocAsyncCtx20 + 8 | 0; //@line 19626
    HEAP32[$179 >> 2] = $16; //@line 19627
    $180 = $ReallocAsyncCtx20 + 12 | 0; //@line 19628
    HEAP32[$180 >> 2] = $54; //@line 19629
    $181 = $ReallocAsyncCtx20 + 16 | 0; //@line 19630
    HEAP32[$181 >> 2] = $137; //@line 19631
    $182 = $ReallocAsyncCtx20 + 20 | 0; //@line 19632
    HEAP32[$182 >> 2] = $140; //@line 19633
    $183 = $ReallocAsyncCtx20 + 24 | 0; //@line 19634
    HEAP32[$183 >> 2] = $56; //@line 19635
    $184 = $ReallocAsyncCtx20 + 28 | 0; //@line 19636
    HEAP32[$184 >> 2] = $44; //@line 19637
    $185 = $ReallocAsyncCtx20 + 32 | 0; //@line 19638
    HEAP32[$185 >> 2] = $24; //@line 19639
    $186 = $ReallocAsyncCtx20 + 36 | 0; //@line 19640
    HEAP32[$186 >> 2] = $6; //@line 19641
    $187 = $ReallocAsyncCtx20 + 40 | 0; //@line 19642
    HEAP32[$187 >> 2] = $173; //@line 19643
    $188 = $ReallocAsyncCtx20 + 44 | 0; //@line 19644
    HEAP32[$188 >> 2] = $60; //@line 19645
    $189 = $ReallocAsyncCtx20 + 48 | 0; //@line 19646
    HEAP32[$189 >> 2] = $52; //@line 19647
    $190 = $ReallocAsyncCtx20 + 52 | 0; //@line 19648
    HEAP32[$190 >> 2] = $36; //@line 19649
    $191 = $ReallocAsyncCtx20 + 56 | 0; //@line 19650
    HEAP32[$191 >> 2] = $38; //@line 19651
    $192 = $ReallocAsyncCtx20 + 60 | 0; //@line 19652
    $$1$off0$expand_i1_val29 = $$1$off0 & 1; //@line 19653
    HEAP8[$192 >> 0] = $$1$off0$expand_i1_val29; //@line 19654
    $193 = $ReallocAsyncCtx20 + 64 | 0; //@line 19655
    HEAP32[$193 >> 2] = $30; //@line 19656
    $194 = $ReallocAsyncCtx20 + 68 | 0; //@line 19657
    HEAP8[$194 >> 0] = $4; //@line 19658
    $195 = $ReallocAsyncCtx20 + 72 | 0; //@line 19659
    HEAP32[$195 >> 2] = $70; //@line 19660
    $196 = $ReallocAsyncCtx20 + 76 | 0; //@line 19661
    HEAP32[$196 >> 2] = $58; //@line 19662
    sp = STACKTOP; //@line 19663
    return;
   }
  } else {
   if (!($66 << 24 >> 24)) {
    if ($$1$off0) {
     $$3$off0204 = 6; //@line 19670
     break;
    } else {
     label = 44; //@line 19673
     break;
    }
   }
   $213 = $56 + 264 | 0; //@line 19677
   $214 = __ZN11LoRaMacMlme16get_confirmationEv($213) | 0; //@line 19678
   $216 = HEAP32[$22 >> 2] | 0; //@line 19680
   $ReallocAsyncCtx19 = _emscripten_realloc_async_context(52) | 0; //@line 19681
   $217 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($100, $54, 8, $14, $50, $214, $56 + 1096 | 0, $216) | 0; //@line 19682
   if (___async) {
    HEAP32[$ReallocAsyncCtx19 >> 2] = 403; //@line 19685
    $218 = $ReallocAsyncCtx19 + 4 | 0; //@line 19686
    HEAP32[$218 >> 2] = $213; //@line 19687
    $219 = $ReallocAsyncCtx19 + 8 | 0; //@line 19688
    HEAP32[$219 >> 2] = $56; //@line 19689
    $220 = $ReallocAsyncCtx19 + 12 | 0; //@line 19690
    HEAP32[$220 >> 2] = $100; //@line 19691
    $221 = $ReallocAsyncCtx19 + 16 | 0; //@line 19692
    $$1$off0$expand_i1_val31 = $$1$off0 & 1; //@line 19693
    HEAP8[$221 >> 0] = $$1$off0$expand_i1_val31; //@line 19694
    $222 = $ReallocAsyncCtx19 + 17 | 0; //@line 19695
    HEAP8[$222 >> 0] = $4; //@line 19696
    $223 = $ReallocAsyncCtx19 + 20 | 0; //@line 19697
    HEAP32[$223 >> 2] = $16; //@line 19698
    $224 = $ReallocAsyncCtx19 + 24 | 0; //@line 19699
    HEAP32[$224 >> 2] = $30; //@line 19700
    $225 = $ReallocAsyncCtx19 + 28 | 0; //@line 19701
    HEAP32[$225 >> 2] = $70; //@line 19702
    $226 = $ReallocAsyncCtx19 + 32 | 0; //@line 19703
    HEAP32[$226 >> 2] = $58; //@line 19704
    $227 = $ReallocAsyncCtx19 + 36 | 0; //@line 19705
    HEAP32[$227 >> 2] = $18; //@line 19706
    $228 = $ReallocAsyncCtx19 + 40 | 0; //@line 19707
    HEAP32[$228 >> 2] = $64; //@line 19708
    $229 = $ReallocAsyncCtx19 + 44 | 0; //@line 19709
    HEAP32[$229 >> 2] = $8; //@line 19710
    $230 = $ReallocAsyncCtx19 + 48 | 0; //@line 19711
    HEAP32[$230 >> 2] = $2; //@line 19712
    sp = STACKTOP; //@line 19713
    return;
   }
   HEAP32[___async_retval >> 2] = $217; //@line 19717
   ___async_unwind = 0; //@line 19718
   HEAP32[$ReallocAsyncCtx19 >> 2] = 403; //@line 19719
   $218 = $ReallocAsyncCtx19 + 4 | 0; //@line 19720
   HEAP32[$218 >> 2] = $213; //@line 19721
   $219 = $ReallocAsyncCtx19 + 8 | 0; //@line 19722
   HEAP32[$219 >> 2] = $56; //@line 19723
   $220 = $ReallocAsyncCtx19 + 12 | 0; //@line 19724
   HEAP32[$220 >> 2] = $100; //@line 19725
   $221 = $ReallocAsyncCtx19 + 16 | 0; //@line 19726
   $$1$off0$expand_i1_val31 = $$1$off0 & 1; //@line 19727
   HEAP8[$221 >> 0] = $$1$off0$expand_i1_val31; //@line 19728
   $222 = $ReallocAsyncCtx19 + 17 | 0; //@line 19729
   HEAP8[$222 >> 0] = $4; //@line 19730
   $223 = $ReallocAsyncCtx19 + 20 | 0; //@line 19731
   HEAP32[$223 >> 2] = $16; //@line 19732
   $224 = $ReallocAsyncCtx19 + 24 | 0; //@line 19733
   HEAP32[$224 >> 2] = $30; //@line 19734
   $225 = $ReallocAsyncCtx19 + 28 | 0; //@line 19735
   HEAP32[$225 >> 2] = $70; //@line 19736
   $226 = $ReallocAsyncCtx19 + 32 | 0; //@line 19737
   HEAP32[$226 >> 2] = $58; //@line 19738
   $227 = $ReallocAsyncCtx19 + 36 | 0; //@line 19739
   HEAP32[$227 >> 2] = $18; //@line 19740
   $228 = $ReallocAsyncCtx19 + 40 | 0; //@line 19741
   HEAP32[$228 >> 2] = $64; //@line 19742
   $229 = $ReallocAsyncCtx19 + 44 | 0; //@line 19743
   HEAP32[$229 >> 2] = $8; //@line 19744
   $230 = $ReallocAsyncCtx19 + 48 | 0; //@line 19745
   HEAP32[$230 >> 2] = $2; //@line 19746
   sp = STACKTOP; //@line 19747
   return;
  }
 } while (0);
 if ((label | 0) == 44) {
  $235 = (__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) + 10 | 0; //@line 19755
  if ($4 & 32) {
   HEAP8[$235 >> 0] = 1; //@line 19757
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 28 >> 0] = 1; //@line 19760
   $238 = HEAP32[$30 >> 2] | 0; //@line 19761
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 19763
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($238, $56 + 1076 | 0); //@line 19764
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 19767
    $240 = $ReallocAsyncCtx23 + 4 | 0; //@line 19768
    HEAP32[$240 >> 2] = $56; //@line 19769
    $241 = $ReallocAsyncCtx23 + 8 | 0; //@line 19770
    HEAP32[$241 >> 2] = $30; //@line 19771
    $242 = $ReallocAsyncCtx23 + 12 | 0; //@line 19772
    HEAP32[$242 >> 2] = $70; //@line 19773
    $243 = $ReallocAsyncCtx23 + 16 | 0; //@line 19774
    HEAP32[$243 >> 2] = $58; //@line 19775
    sp = STACKTOP; //@line 19776
    return;
   }
   ___async_unwind = 0; //@line 19779
   HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 19780
   $240 = $ReallocAsyncCtx23 + 4 | 0; //@line 19781
   HEAP32[$240 >> 2] = $56; //@line 19782
   $241 = $ReallocAsyncCtx23 + 8 | 0; //@line 19783
   HEAP32[$241 >> 2] = $30; //@line 19784
   $242 = $ReallocAsyncCtx23 + 12 | 0; //@line 19785
   HEAP32[$242 >> 2] = $70; //@line 19786
   $243 = $ReallocAsyncCtx23 + 16 | 0; //@line 19787
   HEAP32[$243 >> 2] = $58; //@line 19788
   sp = STACKTOP; //@line 19789
   return;
  }
  HEAP8[$235 >> 0] = 0; //@line 19792
  if ((HEAPU8[$56 + 895 >> 0] | 0) > (HEAPU8[$56 + 894 >> 0] | 0)) {
   $249 = HEAP32[$30 >> 2] | 0; //@line 19799
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 19801
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($249, $56 + 1076 | 0); //@line 19802
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 19805
    $251 = $ReallocAsyncCtx22 + 4 | 0; //@line 19806
    HEAP32[$251 >> 2] = $56; //@line 19807
    $252 = $ReallocAsyncCtx22 + 8 | 0; //@line 19808
    HEAP32[$252 >> 2] = $30; //@line 19809
    $253 = $ReallocAsyncCtx22 + 12 | 0; //@line 19810
    HEAP32[$253 >> 2] = $70; //@line 19811
    $254 = $ReallocAsyncCtx22 + 16 | 0; //@line 19812
    HEAP32[$254 >> 2] = $58; //@line 19813
    sp = STACKTOP; //@line 19814
    return;
   }
   ___async_unwind = 0; //@line 19817
   HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 19818
   $251 = $ReallocAsyncCtx22 + 4 | 0; //@line 19819
   HEAP32[$251 >> 2] = $56; //@line 19820
   $252 = $ReallocAsyncCtx22 + 8 | 0; //@line 19821
   HEAP32[$252 >> 2] = $30; //@line 19822
   $253 = $ReallocAsyncCtx22 + 12 | 0; //@line 19823
   HEAP32[$253 >> 2] = $70; //@line 19824
   $254 = $ReallocAsyncCtx22 + 16 | 0; //@line 19825
   HEAP32[$254 >> 2] = $58; //@line 19826
   sp = STACKTOP; //@line 19827
   return;
  } else {
   $$3$off0204 = 2; //@line 19830
  }
 }
 $255 = $56 + 944 | 0; //@line 19833
 HEAP8[$255 >> 0] = $$3$off0204 | HEAP8[$255 >> 0] & -7; //@line 19837
 $261 = $56 + 944 | 0; //@line 19838
 HEAP8[$261 >> 0] = HEAP8[$261 >> 0] | 32; //@line 19841
 $264 = HEAP32[$30 >> 2] | 0; //@line 19842
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 19844
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($264, $56 + 996 | 0, 1); //@line 19845
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 19848
  $266 = $ReallocAsyncCtx17 + 4 | 0; //@line 19849
  HEAP32[$266 >> 2] = $70; //@line 19850
  $267 = $ReallocAsyncCtx17 + 8 | 0; //@line 19851
  HEAP32[$267 >> 2] = $58; //@line 19852
  sp = STACKTOP; //@line 19853
  return;
 }
 ___async_unwind = 0; //@line 19856
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 19857
 $266 = $ReallocAsyncCtx17 + 4 | 0; //@line 19858
 HEAP32[$266 >> 2] = $70; //@line 19859
 $267 = $ReallocAsyncCtx17 + 8 | 0; //@line 19860
 HEAP32[$267 >> 2] = $58; //@line 19861
 sp = STACKTOP; //@line 19862
 return;
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12997
 STACKTOP = STACKTOP + 560 | 0; //@line 12998
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 12998
 $6 = sp + 8 | 0; //@line 12999
 $7 = sp; //@line 13000
 $8 = sp + 524 | 0; //@line 13001
 $9 = $8; //@line 13002
 $10 = sp + 512 | 0; //@line 13003
 HEAP32[$7 >> 2] = 0; //@line 13004
 $11 = $10 + 12 | 0; //@line 13005
 ___DOUBLE_BITS_677($1) | 0; //@line 13006
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 13011
  $$0520 = 1; //@line 13011
  $$0521 = 16422; //@line 13011
 } else {
  $$0471 = $1; //@line 13022
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 13022
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 16423 : 16428 : 16425; //@line 13022
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 13024
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 13033
   $31 = $$0520 + 3 | 0; //@line 13038
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 13040
   _out_670($0, $$0521, $$0520); //@line 13041
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 16449 : 16453 : $27 ? 16441 : 16445, 3); //@line 13042
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 13044
   $$sink560 = $31; //@line 13045
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 13048
   $36 = $35 != 0.0; //@line 13049
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 13053
   }
   $39 = $5 | 32; //@line 13055
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 13058
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 13061
    $44 = $$0520 | 2; //@line 13062
    $46 = 12 - $3 | 0; //@line 13064
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 13069
     } else {
      $$0509585 = 8.0; //@line 13071
      $$1508586 = $46; //@line 13071
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 13073
       $$0509585 = $$0509585 * 16.0; //@line 13074
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 13089
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 13094
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 13099
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 13102
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 13105
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 13108
     HEAP8[$68 >> 0] = 48; //@line 13109
     $$0511 = $68; //@line 13110
    } else {
     $$0511 = $66; //@line 13112
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 13119
    $76 = $$0511 + -2 | 0; //@line 13122
    HEAP8[$76 >> 0] = $5 + 15; //@line 13123
    $77 = ($3 | 0) < 1; //@line 13124
    $79 = ($4 & 8 | 0) == 0; //@line 13126
    $$0523 = $8; //@line 13127
    $$2473 = $$1472; //@line 13127
    while (1) {
     $80 = ~~$$2473; //@line 13129
     $86 = $$0523 + 1 | 0; //@line 13135
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[16457 + $80 >> 0]; //@line 13136
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 13139
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 13148
      } else {
       HEAP8[$86 >> 0] = 46; //@line 13151
       $$1524 = $$0523 + 2 | 0; //@line 13152
      }
     } else {
      $$1524 = $86; //@line 13155
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 13159
     }
    }
    $$pre693 = $$1524; //@line 13165
    if (!$3) {
     label = 24; //@line 13167
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 13175
      $$sink = $3 + 2 | 0; //@line 13175
     } else {
      label = 24; //@line 13177
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 13181
     $$pre$phi691Z2D = $101; //@line 13182
     $$sink = $101; //@line 13182
    }
    $104 = $11 - $76 | 0; //@line 13186
    $106 = $104 + $44 + $$sink | 0; //@line 13188
    _pad_676($0, 32, $2, $106, $4); //@line 13189
    _out_670($0, $$0521$, $44); //@line 13190
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 13192
    _out_670($0, $8, $$pre$phi691Z2D); //@line 13193
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 13195
    _out_670($0, $76, $104); //@line 13196
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 13198
    $$sink560 = $106; //@line 13199
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 13203
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 13207
    HEAP32[$7 >> 2] = $113; //@line 13208
    $$3 = $35 * 268435456.0; //@line 13209
    $$pr = $113; //@line 13209
   } else {
    $$3 = $35; //@line 13212
    $$pr = HEAP32[$7 >> 2] | 0; //@line 13212
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 13216
   $$0498 = $$561; //@line 13217
   $$4 = $$3; //@line 13217
   do {
    $116 = ~~$$4 >>> 0; //@line 13219
    HEAP32[$$0498 >> 2] = $116; //@line 13220
    $$0498 = $$0498 + 4 | 0; //@line 13221
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 13224
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 13234
    $$1499662 = $$0498; //@line 13234
    $124 = $$pr; //@line 13234
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 13237
     $$0488655 = $$1499662 + -4 | 0; //@line 13238
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 13241
     } else {
      $$0488657 = $$0488655; //@line 13243
      $$0497656 = 0; //@line 13243
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 13246
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 13248
       $131 = tempRet0; //@line 13249
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 13250
       HEAP32[$$0488657 >> 2] = $132; //@line 13252
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 13253
       $$0488657 = $$0488657 + -4 | 0; //@line 13255
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 13265
      } else {
       $138 = $$1482663 + -4 | 0; //@line 13267
       HEAP32[$138 >> 2] = $$0497656; //@line 13268
       $$2483$ph = $138; //@line 13269
      }
     }
     $$2500 = $$1499662; //@line 13272
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 13278
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 13282
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 13288
     HEAP32[$7 >> 2] = $144; //@line 13289
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 13292
      $$1499662 = $$2500; //@line 13292
      $124 = $144; //@line 13292
     } else {
      $$1482$lcssa = $$2483$ph; //@line 13294
      $$1499$lcssa = $$2500; //@line 13294
      $$pr566 = $144; //@line 13294
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 13299
    $$1499$lcssa = $$0498; //@line 13299
    $$pr566 = $$pr; //@line 13299
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 13305
    $150 = ($39 | 0) == 102; //@line 13306
    $$3484650 = $$1482$lcssa; //@line 13307
    $$3501649 = $$1499$lcssa; //@line 13307
    $152 = $$pr566; //@line 13307
    while (1) {
     $151 = 0 - $152 | 0; //@line 13309
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 13311
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 13315
      $161 = 1e9 >>> $154; //@line 13316
      $$0487644 = 0; //@line 13317
      $$1489643 = $$3484650; //@line 13317
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 13319
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 13323
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 13324
       $$1489643 = $$1489643 + 4 | 0; //@line 13325
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 13336
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 13339
       $$4502 = $$3501649; //@line 13339
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 13342
       $$$3484700 = $$$3484; //@line 13343
       $$4502 = $$3501649 + 4 | 0; //@line 13343
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 13350
      $$4502 = $$3501649; //@line 13350
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 13352
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 13359
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 13361
     HEAP32[$7 >> 2] = $152; //@line 13362
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 13367
      $$3501$lcssa = $$$4502; //@line 13367
      break;
     } else {
      $$3484650 = $$$3484700; //@line 13365
      $$3501649 = $$$4502; //@line 13365
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 13372
    $$3501$lcssa = $$1499$lcssa; //@line 13372
   }
   $185 = $$561; //@line 13375
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 13380
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 13381
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 13384
    } else {
     $$0514639 = $189; //@line 13386
     $$0530638 = 10; //@line 13386
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 13388
      $193 = $$0514639 + 1 | 0; //@line 13389
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 13392
       break;
      } else {
       $$0514639 = $193; //@line 13395
      }
     }
    }
   } else {
    $$1515 = 0; //@line 13400
   }
   $198 = ($39 | 0) == 103; //@line 13405
   $199 = ($$540 | 0) != 0; //@line 13406
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 13409
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 13418
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 13421
    $213 = ($209 | 0) % 9 | 0; //@line 13422
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 13425
     $$1531632 = 10; //@line 13425
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 13428
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 13431
       $$1531632 = $215; //@line 13431
      } else {
       $$1531$lcssa = $215; //@line 13433
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 13438
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 13440
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 13441
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 13444
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 13447
     $$4518 = $$1515; //@line 13447
     $$8 = $$3484$lcssa; //@line 13447
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 13452
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 13453
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 13458
     if (!$$0520) {
      $$1467 = $$$564; //@line 13461
      $$1469 = $$543; //@line 13461
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 13464
      $$1467 = $230 ? -$$$564 : $$$564; //@line 13469
      $$1469 = $230 ? -$$543 : $$543; //@line 13469
     }
     $233 = $217 - $218 | 0; //@line 13471
     HEAP32[$212 >> 2] = $233; //@line 13472
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 13476
      HEAP32[$212 >> 2] = $236; //@line 13477
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 13480
       $$sink547625 = $212; //@line 13480
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 13482
        HEAP32[$$sink547625 >> 2] = 0; //@line 13483
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 13486
         HEAP32[$240 >> 2] = 0; //@line 13487
         $$6 = $240; //@line 13488
        } else {
         $$6 = $$5486626; //@line 13490
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 13493
        HEAP32[$238 >> 2] = $242; //@line 13494
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 13497
         $$sink547625 = $238; //@line 13497
        } else {
         $$5486$lcssa = $$6; //@line 13499
         $$sink547$lcssa = $238; //@line 13499
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 13504
       $$sink547$lcssa = $212; //@line 13504
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 13509
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 13510
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 13513
       $$4518 = $247; //@line 13513
       $$8 = $$5486$lcssa; //@line 13513
      } else {
       $$2516621 = $247; //@line 13515
       $$2532620 = 10; //@line 13515
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 13517
        $251 = $$2516621 + 1 | 0; //@line 13518
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 13521
         $$4518 = $251; //@line 13521
         $$8 = $$5486$lcssa; //@line 13521
         break;
        } else {
         $$2516621 = $251; //@line 13524
        }
       }
      }
     } else {
      $$4492 = $212; //@line 13529
      $$4518 = $$1515; //@line 13529
      $$8 = $$3484$lcssa; //@line 13529
     }
    }
    $253 = $$4492 + 4 | 0; //@line 13532
    $$5519$ph = $$4518; //@line 13535
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 13535
    $$9$ph = $$8; //@line 13535
   } else {
    $$5519$ph = $$1515; //@line 13537
    $$7505$ph = $$3501$lcssa; //@line 13537
    $$9$ph = $$3484$lcssa; //@line 13537
   }
   $$7505 = $$7505$ph; //@line 13539
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 13543
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 13546
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 13550
    } else {
     $$lcssa675 = 1; //@line 13552
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 13556
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 13561
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 13569
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 13569
     } else {
      $$0479 = $5 + -2 | 0; //@line 13573
      $$2476 = $$540$ + -1 | 0; //@line 13573
     }
     $267 = $4 & 8; //@line 13575
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 13580
       if (!$270) {
        $$2529 = 9; //@line 13583
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 13588
         $$3533616 = 10; //@line 13588
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 13590
          $275 = $$1528617 + 1 | 0; //@line 13591
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 13597
           break;
          } else {
           $$1528617 = $275; //@line 13595
          }
         }
        } else {
         $$2529 = 0; //@line 13602
        }
       }
      } else {
       $$2529 = 9; //@line 13606
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 13614
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 13616
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 13618
       $$1480 = $$0479; //@line 13621
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 13621
       $$pre$phi698Z2D = 0; //@line 13621
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 13625
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 13627
       $$1480 = $$0479; //@line 13630
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 13630
       $$pre$phi698Z2D = 0; //@line 13630
       break;
      }
     } else {
      $$1480 = $$0479; //@line 13634
      $$3477 = $$2476; //@line 13634
      $$pre$phi698Z2D = $267; //@line 13634
     }
    } else {
     $$1480 = $5; //@line 13638
     $$3477 = $$540; //@line 13638
     $$pre$phi698Z2D = $4 & 8; //@line 13638
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 13641
   $294 = ($292 | 0) != 0 & 1; //@line 13643
   $296 = ($$1480 | 32 | 0) == 102; //@line 13645
   if ($296) {
    $$2513 = 0; //@line 13649
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 13649
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 13652
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 13655
    $304 = $11; //@line 13656
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 13661
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 13663
      HEAP8[$308 >> 0] = 48; //@line 13664
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 13669
      } else {
       $$1512$lcssa = $308; //@line 13671
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 13676
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 13683
    $318 = $$1512$lcssa + -2 | 0; //@line 13685
    HEAP8[$318 >> 0] = $$1480; //@line 13686
    $$2513 = $318; //@line 13689
    $$pn = $304 - $318 | 0; //@line 13689
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 13694
   _pad_676($0, 32, $2, $323, $4); //@line 13695
   _out_670($0, $$0521, $$0520); //@line 13696
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 13698
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 13701
    $326 = $8 + 9 | 0; //@line 13702
    $327 = $326; //@line 13703
    $328 = $8 + 8 | 0; //@line 13704
    $$5493600 = $$0496$$9; //@line 13705
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 13708
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 13713
       $$1465 = $328; //@line 13714
      } else {
       $$1465 = $330; //@line 13716
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 13723
       $$0464597 = $330; //@line 13724
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 13726
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 13729
        } else {
         $$1465 = $335; //@line 13731
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 13736
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 13741
     $$5493600 = $$5493600 + 4 | 0; //@line 13742
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 16473, 1); //@line 13752
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 13758
     $$6494592 = $$5493600; //@line 13758
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 13761
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 13766
       $$0463587 = $347; //@line 13767
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 13769
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 13772
        } else {
         $$0463$lcssa = $351; //@line 13774
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 13779
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 13783
      $$6494592 = $$6494592 + 4 | 0; //@line 13784
      $356 = $$4478593 + -9 | 0; //@line 13785
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 13792
       break;
      } else {
       $$4478593 = $356; //@line 13790
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 13797
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 13800
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 13803
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 13806
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 13807
     $365 = $363; //@line 13808
     $366 = 0 - $9 | 0; //@line 13809
     $367 = $8 + 8 | 0; //@line 13810
     $$5605 = $$3477; //@line 13811
     $$7495604 = $$9$ph; //@line 13811
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 13814
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 13817
       $$0 = $367; //@line 13818
      } else {
       $$0 = $369; //@line 13820
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 13825
        _out_670($0, $$0, 1); //@line 13826
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 13830
         break;
        }
        _out_670($0, 16473, 1); //@line 13833
        $$2 = $375; //@line 13834
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 13838
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 13843
        $$1601 = $$0; //@line 13844
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 13846
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 13849
         } else {
          $$2 = $373; //@line 13851
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 13858
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 13861
      $381 = $$5605 - $378 | 0; //@line 13862
      $$7495604 = $$7495604 + 4 | 0; //@line 13863
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 13870
       break;
      } else {
       $$5605 = $381; //@line 13868
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 13875
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 13878
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 13882
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 13885
   $$sink560 = $323; //@line 13886
  }
 } while (0);
 STACKTOP = sp; //@line 13891
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 13891
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_315($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $110 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $158 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $169 = 0, $170 = 0, $172 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $186 = 0, $190 = 0, $191 = 0, $193 = 0, $194 = 0, $195 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $37 = 0, $4 = 0, $45 = 0, $49 = 0, $55 = 0, $58 = 0, $6 = 0, $61 = 0, $63 = 0, $64 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 16487
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16489
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16491
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16493
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16495
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16497
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16499
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16501
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16503
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16505
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16507
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16509
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 16511
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 16513
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 16515
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 16517
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 16519
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP8[$2 >> 0] = HEAP8[$2 >> 0] & -33; //@line 16526
 } else {
  $37 = $4 + 288 | 0; //@line 16528
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($37) | 0) + 4 >> 2] = 9; //@line 16531
  __ZN14LoRaMacCommand20clear_command_bufferEv($4 + 4 | 0); //@line 16533
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -2; //@line 16536
  HEAP8[$30 >> 0] = 0; //@line 16537
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($37) | 0) + 10 >> 0] = 0; //@line 16540
  $45 = HEAP8[$32 >> 0] | 0; //@line 16541
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($37) | 0) + 11 >> 0] = $45; //@line 16544
  $49 = HEAP8[$4 + 1097 >> 0] | 0; //@line 16546
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($37) | 0) + 8 >> 0] = $49; //@line 16549
  if (!(HEAP8[$4 + 370 >> 0] | 0)) {
   $55 = $4 + 956 | 0; //@line 16554
   HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + 1; //@line 16557
  }
 }
 $58 = HEAP32[$6 >> 2] | 0; //@line 16560
 $61 = $58 & -3; //@line 16563
 if (!($58 & 2)) {
  $63 = $58; //@line 16565
 } else {
  HEAP32[$6 >> 2] = $61; //@line 16567
  $63 = $61; //@line 16568
 }
 if ($63 | 0) {
  $148 = HEAP32[$26 >> 2] | 0; //@line 16572
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 16573
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($148, $28, 1e3); //@line 16574
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 16577
   $149 = $ReallocAsyncCtx8 + 4 | 0; //@line 16578
   HEAP32[$149 >> 2] = $2; //@line 16579
   $150 = $ReallocAsyncCtx8 + 8 | 0; //@line 16580
   HEAP32[$150 >> 2] = $4; //@line 16581
   $151 = $ReallocAsyncCtx8 + 12 | 0; //@line 16582
   HEAP32[$151 >> 2] = $16; //@line 16583
   $152 = $ReallocAsyncCtx8 + 16 | 0; //@line 16584
   HEAP32[$152 >> 2] = $18; //@line 16585
   $153 = $ReallocAsyncCtx8 + 20 | 0; //@line 16586
   HEAP32[$153 >> 2] = $20; //@line 16587
   $154 = $ReallocAsyncCtx8 + 24 | 0; //@line 16588
   HEAP32[$154 >> 2] = $22; //@line 16589
   $155 = $ReallocAsyncCtx8 + 28 | 0; //@line 16590
   HEAP32[$155 >> 2] = $24; //@line 16591
   sp = STACKTOP; //@line 16592
   return;
  }
  ___async_unwind = 0; //@line 16595
  HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 16596
  $149 = $ReallocAsyncCtx8 + 4 | 0; //@line 16597
  HEAP32[$149 >> 2] = $2; //@line 16598
  $150 = $ReallocAsyncCtx8 + 8 | 0; //@line 16599
  HEAP32[$150 >> 2] = $4; //@line 16600
  $151 = $ReallocAsyncCtx8 + 12 | 0; //@line 16601
  HEAP32[$151 >> 2] = $16; //@line 16602
  $152 = $ReallocAsyncCtx8 + 16 | 0; //@line 16603
  HEAP32[$152 >> 2] = $18; //@line 16604
  $153 = $ReallocAsyncCtx8 + 20 | 0; //@line 16605
  HEAP32[$153 >> 2] = $20; //@line 16606
  $154 = $ReallocAsyncCtx8 + 24 | 0; //@line 16607
  HEAP32[$154 >> 2] = $22; //@line 16608
  $155 = $ReallocAsyncCtx8 + 28 | 0; //@line 16609
  HEAP32[$155 >> 2] = $24; //@line 16610
  sp = STACKTOP; //@line 16611
  return;
 }
 $64 = HEAP8[$2 >> 0] | 0; //@line 16614
 if ($64 & 1) {
  HEAP8[$2 >> 0] = $64 & -2; //@line 16619
  $69 = HEAP32[$4 + 1324 >> 2] | 0; //@line 16621
  $71 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 16623
  $72 = $69 + 12 | 0; //@line 16624
  $73 = HEAP32[$72 >> 2] | 0; //@line 16625
  if (!$73) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 16628
   _mbed_assert_internal(15061, 15066, 1102); //@line 16629
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 16632
    $75 = $ReallocAsyncCtx18 + 4 | 0; //@line 16633
    HEAP32[$75 >> 2] = $2; //@line 16634
    $76 = $ReallocAsyncCtx18 + 8 | 0; //@line 16635
    HEAP32[$76 >> 2] = $4; //@line 16636
    $77 = $ReallocAsyncCtx18 + 12 | 0; //@line 16637
    HEAP32[$77 >> 2] = $8; //@line 16638
    $78 = $ReallocAsyncCtx18 + 16 | 0; //@line 16639
    HEAP32[$78 >> 2] = $10; //@line 16640
    $79 = $ReallocAsyncCtx18 + 20 | 0; //@line 16641
    HEAP32[$79 >> 2] = $12; //@line 16642
    $80 = $ReallocAsyncCtx18 + 24 | 0; //@line 16643
    HEAP32[$80 >> 2] = $14; //@line 16644
    $81 = $ReallocAsyncCtx18 + 28 | 0; //@line 16645
    HEAP32[$81 >> 2] = $16; //@line 16646
    $82 = $ReallocAsyncCtx18 + 32 | 0; //@line 16647
    HEAP32[$82 >> 2] = $18; //@line 16648
    $83 = $ReallocAsyncCtx18 + 36 | 0; //@line 16649
    HEAP32[$83 >> 2] = $20; //@line 16650
    $84 = $ReallocAsyncCtx18 + 40 | 0; //@line 16651
    HEAP32[$84 >> 2] = $22; //@line 16652
    $85 = $ReallocAsyncCtx18 + 44 | 0; //@line 16653
    HEAP32[$85 >> 2] = $24; //@line 16654
    $86 = $ReallocAsyncCtx18 + 48 | 0; //@line 16655
    HEAP32[$86 >> 2] = $69; //@line 16656
    $87 = $ReallocAsyncCtx18 + 52 | 0; //@line 16657
    HEAP32[$87 >> 2] = $71; //@line 16658
    $88 = $ReallocAsyncCtx18 + 56 | 0; //@line 16659
    HEAP32[$88 >> 2] = $72; //@line 16660
    sp = STACKTOP; //@line 16661
    return;
   }
   ___async_unwind = 0; //@line 16664
   HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 16665
   $75 = $ReallocAsyncCtx18 + 4 | 0; //@line 16666
   HEAP32[$75 >> 2] = $2; //@line 16667
   $76 = $ReallocAsyncCtx18 + 8 | 0; //@line 16668
   HEAP32[$76 >> 2] = $4; //@line 16669
   $77 = $ReallocAsyncCtx18 + 12 | 0; //@line 16670
   HEAP32[$77 >> 2] = $8; //@line 16671
   $78 = $ReallocAsyncCtx18 + 16 | 0; //@line 16672
   HEAP32[$78 >> 2] = $10; //@line 16673
   $79 = $ReallocAsyncCtx18 + 20 | 0; //@line 16674
   HEAP32[$79 >> 2] = $12; //@line 16675
   $80 = $ReallocAsyncCtx18 + 24 | 0; //@line 16676
   HEAP32[$80 >> 2] = $14; //@line 16677
   $81 = $ReallocAsyncCtx18 + 28 | 0; //@line 16678
   HEAP32[$81 >> 2] = $16; //@line 16679
   $82 = $ReallocAsyncCtx18 + 32 | 0; //@line 16680
   HEAP32[$82 >> 2] = $18; //@line 16681
   $83 = $ReallocAsyncCtx18 + 36 | 0; //@line 16682
   HEAP32[$83 >> 2] = $20; //@line 16683
   $84 = $ReallocAsyncCtx18 + 40 | 0; //@line 16684
   HEAP32[$84 >> 2] = $22; //@line 16685
   $85 = $ReallocAsyncCtx18 + 44 | 0; //@line 16686
   HEAP32[$85 >> 2] = $24; //@line 16687
   $86 = $ReallocAsyncCtx18 + 48 | 0; //@line 16688
   HEAP32[$86 >> 2] = $69; //@line 16689
   $87 = $ReallocAsyncCtx18 + 52 | 0; //@line 16690
   HEAP32[$87 >> 2] = $71; //@line 16691
   $88 = $ReallocAsyncCtx18 + 56 | 0; //@line 16692
   HEAP32[$88 >> 2] = $72; //@line 16693
   sp = STACKTOP; //@line 16694
   return;
  } else {
   $89 = HEAP32[$73 >> 2] | 0; //@line 16697
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 16698
   FUNCTION_TABLE_vii[$89 & 31]($69, $71); //@line 16699
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 16702
    $90 = $ReallocAsyncCtx2 + 4 | 0; //@line 16703
    HEAP32[$90 >> 2] = $2; //@line 16704
    $91 = $ReallocAsyncCtx2 + 8 | 0; //@line 16705
    HEAP32[$91 >> 2] = $4; //@line 16706
    $92 = $ReallocAsyncCtx2 + 12 | 0; //@line 16707
    HEAP32[$92 >> 2] = $8; //@line 16708
    $93 = $ReallocAsyncCtx2 + 16 | 0; //@line 16709
    HEAP32[$93 >> 2] = $10; //@line 16710
    $94 = $ReallocAsyncCtx2 + 20 | 0; //@line 16711
    HEAP32[$94 >> 2] = $12; //@line 16712
    $95 = $ReallocAsyncCtx2 + 24 | 0; //@line 16713
    HEAP32[$95 >> 2] = $14; //@line 16714
    $96 = $ReallocAsyncCtx2 + 28 | 0; //@line 16715
    HEAP32[$96 >> 2] = $16; //@line 16716
    $97 = $ReallocAsyncCtx2 + 32 | 0; //@line 16717
    HEAP32[$97 >> 2] = $18; //@line 16718
    $98 = $ReallocAsyncCtx2 + 36 | 0; //@line 16719
    HEAP32[$98 >> 2] = $20; //@line 16720
    $99 = $ReallocAsyncCtx2 + 40 | 0; //@line 16721
    HEAP32[$99 >> 2] = $22; //@line 16722
    $100 = $ReallocAsyncCtx2 + 44 | 0; //@line 16723
    HEAP32[$100 >> 2] = $24; //@line 16724
    sp = STACKTOP; //@line 16725
    return;
   }
   ___async_unwind = 0; //@line 16728
   HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 16729
   $90 = $ReallocAsyncCtx2 + 4 | 0; //@line 16730
   HEAP32[$90 >> 2] = $2; //@line 16731
   $91 = $ReallocAsyncCtx2 + 8 | 0; //@line 16732
   HEAP32[$91 >> 2] = $4; //@line 16733
   $92 = $ReallocAsyncCtx2 + 12 | 0; //@line 16734
   HEAP32[$92 >> 2] = $8; //@line 16735
   $93 = $ReallocAsyncCtx2 + 16 | 0; //@line 16736
   HEAP32[$93 >> 2] = $10; //@line 16737
   $94 = $ReallocAsyncCtx2 + 20 | 0; //@line 16738
   HEAP32[$94 >> 2] = $12; //@line 16739
   $95 = $ReallocAsyncCtx2 + 24 | 0; //@line 16740
   HEAP32[$95 >> 2] = $14; //@line 16741
   $96 = $ReallocAsyncCtx2 + 28 | 0; //@line 16742
   HEAP32[$96 >> 2] = $16; //@line 16743
   $97 = $ReallocAsyncCtx2 + 32 | 0; //@line 16744
   HEAP32[$97 >> 2] = $18; //@line 16745
   $98 = $ReallocAsyncCtx2 + 36 | 0; //@line 16746
   HEAP32[$98 >> 2] = $20; //@line 16747
   $99 = $ReallocAsyncCtx2 + 40 | 0; //@line 16748
   HEAP32[$99 >> 2] = $22; //@line 16749
   $100 = $ReallocAsyncCtx2 + 44 | 0; //@line 16750
   HEAP32[$100 >> 2] = $24; //@line 16751
   sp = STACKTOP; //@line 16752
   return;
  }
 }
 if ($64 & 8) {
  HEAP8[$2 >> 0] = $64 & -9; //@line 16760
  $105 = HEAP32[$4 + 1324 >> 2] | 0; //@line 16762
  $106 = $105 + 32 | 0; //@line 16763
  $108 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 16765
  $109 = $105 + 44 | 0; //@line 16766
  $110 = HEAP32[$109 >> 2] | 0; //@line 16767
  if (!$110) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 16770
   _mbed_assert_internal(15061, 15066, 1102); //@line 16771
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 16774
    $112 = $ReallocAsyncCtx17 + 4 | 0; //@line 16775
    HEAP32[$112 >> 2] = $2; //@line 16776
    $113 = $ReallocAsyncCtx17 + 8 | 0; //@line 16777
    HEAP32[$113 >> 2] = $4; //@line 16778
    $114 = $ReallocAsyncCtx17 + 12 | 0; //@line 16779
    HEAP32[$114 >> 2] = $106; //@line 16780
    $115 = $ReallocAsyncCtx17 + 16 | 0; //@line 16781
    HEAP32[$115 >> 2] = $108; //@line 16782
    $116 = $ReallocAsyncCtx17 + 20 | 0; //@line 16783
    HEAP32[$116 >> 2] = $8; //@line 16784
    $117 = $ReallocAsyncCtx17 + 24 | 0; //@line 16785
    HEAP32[$117 >> 2] = $10; //@line 16786
    $118 = $ReallocAsyncCtx17 + 28 | 0; //@line 16787
    HEAP32[$118 >> 2] = $12; //@line 16788
    $119 = $ReallocAsyncCtx17 + 32 | 0; //@line 16789
    HEAP32[$119 >> 2] = $14; //@line 16790
    $120 = $ReallocAsyncCtx17 + 36 | 0; //@line 16791
    HEAP32[$120 >> 2] = $16; //@line 16792
    $121 = $ReallocAsyncCtx17 + 40 | 0; //@line 16793
    HEAP32[$121 >> 2] = $18; //@line 16794
    $122 = $ReallocAsyncCtx17 + 44 | 0; //@line 16795
    HEAP32[$122 >> 2] = $20; //@line 16796
    $123 = $ReallocAsyncCtx17 + 48 | 0; //@line 16797
    HEAP32[$123 >> 2] = $22; //@line 16798
    $124 = $ReallocAsyncCtx17 + 52 | 0; //@line 16799
    HEAP32[$124 >> 2] = $24; //@line 16800
    $125 = $ReallocAsyncCtx17 + 56 | 0; //@line 16801
    HEAP32[$125 >> 2] = $109; //@line 16802
    sp = STACKTOP; //@line 16803
    return;
   }
   ___async_unwind = 0; //@line 16806
   HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 16807
   $112 = $ReallocAsyncCtx17 + 4 | 0; //@line 16808
   HEAP32[$112 >> 2] = $2; //@line 16809
   $113 = $ReallocAsyncCtx17 + 8 | 0; //@line 16810
   HEAP32[$113 >> 2] = $4; //@line 16811
   $114 = $ReallocAsyncCtx17 + 12 | 0; //@line 16812
   HEAP32[$114 >> 2] = $106; //@line 16813
   $115 = $ReallocAsyncCtx17 + 16 | 0; //@line 16814
   HEAP32[$115 >> 2] = $108; //@line 16815
   $116 = $ReallocAsyncCtx17 + 20 | 0; //@line 16816
   HEAP32[$116 >> 2] = $8; //@line 16817
   $117 = $ReallocAsyncCtx17 + 24 | 0; //@line 16818
   HEAP32[$117 >> 2] = $10; //@line 16819
   $118 = $ReallocAsyncCtx17 + 28 | 0; //@line 16820
   HEAP32[$118 >> 2] = $12; //@line 16821
   $119 = $ReallocAsyncCtx17 + 32 | 0; //@line 16822
   HEAP32[$119 >> 2] = $14; //@line 16823
   $120 = $ReallocAsyncCtx17 + 36 | 0; //@line 16824
   HEAP32[$120 >> 2] = $16; //@line 16825
   $121 = $ReallocAsyncCtx17 + 40 | 0; //@line 16826
   HEAP32[$121 >> 2] = $18; //@line 16827
   $122 = $ReallocAsyncCtx17 + 44 | 0; //@line 16828
   HEAP32[$122 >> 2] = $20; //@line 16829
   $123 = $ReallocAsyncCtx17 + 48 | 0; //@line 16830
   HEAP32[$123 >> 2] = $22; //@line 16831
   $124 = $ReallocAsyncCtx17 + 52 | 0; //@line 16832
   HEAP32[$124 >> 2] = $24; //@line 16833
   $125 = $ReallocAsyncCtx17 + 56 | 0; //@line 16834
   HEAP32[$125 >> 2] = $109; //@line 16835
   sp = STACKTOP; //@line 16836
   return;
  } else {
   $126 = HEAP32[$110 >> 2] | 0; //@line 16839
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 16840
   FUNCTION_TABLE_vii[$126 & 31]($106, $108); //@line 16841
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 16844
    $127 = $ReallocAsyncCtx3 + 4 | 0; //@line 16845
    HEAP32[$127 >> 2] = $4; //@line 16846
    $128 = $ReallocAsyncCtx3 + 8 | 0; //@line 16847
    HEAP32[$128 >> 2] = $2; //@line 16848
    $129 = $ReallocAsyncCtx3 + 12 | 0; //@line 16849
    HEAP32[$129 >> 2] = $8; //@line 16850
    $130 = $ReallocAsyncCtx3 + 16 | 0; //@line 16851
    HEAP32[$130 >> 2] = $10; //@line 16852
    $131 = $ReallocAsyncCtx3 + 20 | 0; //@line 16853
    HEAP32[$131 >> 2] = $12; //@line 16854
    $132 = $ReallocAsyncCtx3 + 24 | 0; //@line 16855
    HEAP32[$132 >> 2] = $14; //@line 16856
    $133 = $ReallocAsyncCtx3 + 28 | 0; //@line 16857
    HEAP32[$133 >> 2] = $16; //@line 16858
    $134 = $ReallocAsyncCtx3 + 32 | 0; //@line 16859
    HEAP32[$134 >> 2] = $18; //@line 16860
    $135 = $ReallocAsyncCtx3 + 36 | 0; //@line 16861
    HEAP32[$135 >> 2] = $20; //@line 16862
    $136 = $ReallocAsyncCtx3 + 40 | 0; //@line 16863
    HEAP32[$136 >> 2] = $22; //@line 16864
    $137 = $ReallocAsyncCtx3 + 44 | 0; //@line 16865
    HEAP32[$137 >> 2] = $24; //@line 16866
    sp = STACKTOP; //@line 16867
    return;
   }
   ___async_unwind = 0; //@line 16870
   HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 16871
   $127 = $ReallocAsyncCtx3 + 4 | 0; //@line 16872
   HEAP32[$127 >> 2] = $4; //@line 16873
   $128 = $ReallocAsyncCtx3 + 8 | 0; //@line 16874
   HEAP32[$128 >> 2] = $2; //@line 16875
   $129 = $ReallocAsyncCtx3 + 12 | 0; //@line 16876
   HEAP32[$129 >> 2] = $8; //@line 16877
   $130 = $ReallocAsyncCtx3 + 16 | 0; //@line 16878
   HEAP32[$130 >> 2] = $10; //@line 16879
   $131 = $ReallocAsyncCtx3 + 20 | 0; //@line 16880
   HEAP32[$131 >> 2] = $12; //@line 16881
   $132 = $ReallocAsyncCtx3 + 24 | 0; //@line 16882
   HEAP32[$132 >> 2] = $14; //@line 16883
   $133 = $ReallocAsyncCtx3 + 28 | 0; //@line 16884
   HEAP32[$133 >> 2] = $16; //@line 16885
   $134 = $ReallocAsyncCtx3 + 32 | 0; //@line 16886
   HEAP32[$134 >> 2] = $18; //@line 16887
   $135 = $ReallocAsyncCtx3 + 36 | 0; //@line 16888
   HEAP32[$135 >> 2] = $20; //@line 16889
   $136 = $ReallocAsyncCtx3 + 40 | 0; //@line 16890
   HEAP32[$136 >> 2] = $22; //@line 16891
   $137 = $ReallocAsyncCtx3 + 44 | 0; //@line 16892
   HEAP32[$137 >> 2] = $24; //@line 16893
   sp = STACKTOP; //@line 16894
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(12967, $8) | 0; //@line 16901
  _printf(13114, $12) | 0; //@line 16902
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 16903
  _putchar(10) | 0; //@line 16904
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 16907
   $140 = $ReallocAsyncCtx7 + 4 | 0; //@line 16908
   HEAP32[$140 >> 2] = $4; //@line 16909
   $141 = $ReallocAsyncCtx7 + 8 | 0; //@line 16910
   HEAP32[$141 >> 2] = $2; //@line 16911
   $142 = $ReallocAsyncCtx7 + 12 | 0; //@line 16912
   HEAP32[$142 >> 2] = $16; //@line 16913
   $143 = $ReallocAsyncCtx7 + 16 | 0; //@line 16914
   HEAP32[$143 >> 2] = $18; //@line 16915
   $144 = $ReallocAsyncCtx7 + 20 | 0; //@line 16916
   HEAP32[$144 >> 2] = $20; //@line 16917
   $145 = $ReallocAsyncCtx7 + 24 | 0; //@line 16918
   HEAP32[$145 >> 2] = $22; //@line 16919
   $146 = $ReallocAsyncCtx7 + 28 | 0; //@line 16920
   HEAP32[$146 >> 2] = $24; //@line 16921
   sp = STACKTOP; //@line 16922
   return;
  }
  ___async_unwind = 0; //@line 16925
  HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 16926
  $140 = $ReallocAsyncCtx7 + 4 | 0; //@line 16927
  HEAP32[$140 >> 2] = $4; //@line 16928
  $141 = $ReallocAsyncCtx7 + 8 | 0; //@line 16929
  HEAP32[$141 >> 2] = $2; //@line 16930
  $142 = $ReallocAsyncCtx7 + 12 | 0; //@line 16931
  HEAP32[$142 >> 2] = $16; //@line 16932
  $143 = $ReallocAsyncCtx7 + 16 | 0; //@line 16933
  HEAP32[$143 >> 2] = $18; //@line 16934
  $144 = $ReallocAsyncCtx7 + 20 | 0; //@line 16935
  HEAP32[$144 >> 2] = $20; //@line 16936
  $145 = $ReallocAsyncCtx7 + 24 | 0; //@line 16937
  HEAP32[$145 >> 2] = $22; //@line 16938
  $146 = $ReallocAsyncCtx7 + 28 | 0; //@line 16939
  HEAP32[$146 >> 2] = $24; //@line 16940
  sp = STACKTOP; //@line 16941
  return;
 }
 $147 = HEAP8[$2 >> 0] & -33; //@line 16945
 HEAP8[$2 >> 0] = $147; //@line 16946
 do {
  if (!($147 & 2)) {
   $186 = $147; //@line 16951
  } else {
   $158 = $147 & -3; //@line 16953
   HEAP8[$2 >> 0] = $158; //@line 16954
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12967, $18) | 0; //@line 16959
    _printf(12994, $22) | 0; //@line 16960
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 16961
    _putchar(10) | 0; //@line 16962
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 16965
     $162 = $ReallocAsyncCtx6 + 4 | 0; //@line 16966
     HEAP32[$162 >> 2] = $2; //@line 16967
     $163 = $ReallocAsyncCtx6 + 8 | 0; //@line 16968
     HEAP32[$163 >> 2] = $16; //@line 16969
     $164 = $ReallocAsyncCtx6 + 12 | 0; //@line 16970
     HEAP32[$164 >> 2] = $4; //@line 16971
     $165 = $ReallocAsyncCtx6 + 16 | 0; //@line 16972
     HEAP32[$165 >> 2] = $16; //@line 16973
     sp = STACKTOP; //@line 16974
     return;
    }
    ___async_unwind = 0; //@line 16977
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 16978
    $162 = $ReallocAsyncCtx6 + 4 | 0; //@line 16979
    HEAP32[$162 >> 2] = $2; //@line 16980
    $163 = $ReallocAsyncCtx6 + 8 | 0; //@line 16981
    HEAP32[$163 >> 2] = $16; //@line 16982
    $164 = $ReallocAsyncCtx6 + 12 | 0; //@line 16983
    HEAP32[$164 >> 2] = $4; //@line 16984
    $165 = $ReallocAsyncCtx6 + 16 | 0; //@line 16985
    HEAP32[$165 >> 2] = $16; //@line 16986
    sp = STACKTOP; //@line 16987
    return;
   }
   if ($158 & 4) {
    $184 = $158 & -5; //@line 16993
    HEAP8[$2 >> 0] = $184; //@line 16994
    $186 = $184; //@line 16995
    break;
   }
   $169 = HEAP32[$4 + 1324 >> 2] | 0; //@line 16999
   $170 = $169 + 16 | 0; //@line 17000
   $172 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 17002
   $173 = $169 + 28 | 0; //@line 17003
   $174 = HEAP32[$173 >> 2] | 0; //@line 17004
   if (!$174) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 17007
    _mbed_assert_internal(15061, 15066, 1102); //@line 17008
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 17011
     $176 = $ReallocAsyncCtx15 + 4 | 0; //@line 17012
     HEAP32[$176 >> 2] = $173; //@line 17013
     $177 = $ReallocAsyncCtx15 + 8 | 0; //@line 17014
     HEAP32[$177 >> 2] = $170; //@line 17015
     $178 = $ReallocAsyncCtx15 + 12 | 0; //@line 17016
     HEAP32[$178 >> 2] = $172; //@line 17017
     $179 = $ReallocAsyncCtx15 + 16 | 0; //@line 17018
     HEAP32[$179 >> 2] = $2; //@line 17019
     $180 = $ReallocAsyncCtx15 + 20 | 0; //@line 17020
     HEAP32[$180 >> 2] = $4; //@line 17021
     sp = STACKTOP; //@line 17022
     return;
    }
    ___async_unwind = 0; //@line 17025
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 17026
    $176 = $ReallocAsyncCtx15 + 4 | 0; //@line 17027
    HEAP32[$176 >> 2] = $173; //@line 17028
    $177 = $ReallocAsyncCtx15 + 8 | 0; //@line 17029
    HEAP32[$177 >> 2] = $170; //@line 17030
    $178 = $ReallocAsyncCtx15 + 12 | 0; //@line 17031
    HEAP32[$178 >> 2] = $172; //@line 17032
    $179 = $ReallocAsyncCtx15 + 16 | 0; //@line 17033
    HEAP32[$179 >> 2] = $2; //@line 17034
    $180 = $ReallocAsyncCtx15 + 20 | 0; //@line 17035
    HEAP32[$180 >> 2] = $4; //@line 17036
    sp = STACKTOP; //@line 17037
    return;
   } else {
    $181 = HEAP32[$174 >> 2] | 0; //@line 17040
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 17041
    FUNCTION_TABLE_vii[$181 & 31]($170, $172); //@line 17042
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 17045
     $182 = $ReallocAsyncCtx4 + 4 | 0; //@line 17046
     HEAP32[$182 >> 2] = $2; //@line 17047
     $183 = $ReallocAsyncCtx4 + 8 | 0; //@line 17048
     HEAP32[$183 >> 2] = $4; //@line 17049
     sp = STACKTOP; //@line 17050
     return;
    }
    ___async_unwind = 0; //@line 17053
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 17054
    $182 = $ReallocAsyncCtx4 + 4 | 0; //@line 17055
    HEAP32[$182 >> 2] = $2; //@line 17056
    $183 = $ReallocAsyncCtx4 + 8 | 0; //@line 17057
    HEAP32[$183 >> 2] = $4; //@line 17058
    sp = STACKTOP; //@line 17059
    return;
   }
  }
 } while (0);
 if (!($186 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $186 & -17; //@line 17070
 $190 = HEAP32[$4 + 1324 >> 2] | 0; //@line 17072
 $191 = $190 + 48 | 0; //@line 17073
 $193 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 17075
 $194 = $190 + 60 | 0; //@line 17076
 $195 = HEAP32[$194 >> 2] | 0; //@line 17077
 if (!$195) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 17080
  _mbed_assert_internal(15061, 15066, 1102); //@line 17081
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 17084
   $197 = $ReallocAsyncCtx14 + 4 | 0; //@line 17085
   HEAP32[$197 >> 2] = $194; //@line 17086
   $198 = $ReallocAsyncCtx14 + 8 | 0; //@line 17087
   HEAP32[$198 >> 2] = $191; //@line 17088
   $199 = $ReallocAsyncCtx14 + 12 | 0; //@line 17089
   HEAP32[$199 >> 2] = $193; //@line 17090
   sp = STACKTOP; //@line 17091
   return;
  }
  ___async_unwind = 0; //@line 17094
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 17095
  $197 = $ReallocAsyncCtx14 + 4 | 0; //@line 17096
  HEAP32[$197 >> 2] = $194; //@line 17097
  $198 = $ReallocAsyncCtx14 + 8 | 0; //@line 17098
  HEAP32[$198 >> 2] = $191; //@line 17099
  $199 = $ReallocAsyncCtx14 + 12 | 0; //@line 17100
  HEAP32[$199 >> 2] = $193; //@line 17101
  sp = STACKTOP; //@line 17102
  return;
 } else {
  $200 = HEAP32[$195 >> 2] | 0; //@line 17105
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 17106
  FUNCTION_TABLE_vii[$200 & 31]($191, $193); //@line 17107
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 17110
   sp = STACKTOP; //@line 17111
   return;
  }
  ___async_unwind = 0; //@line 17114
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 17115
  sp = STACKTOP; //@line 17116
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $148 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $159 = 0, $16 = 0, $160 = 0, $162 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $176 = 0, $18 = 0, $180 = 0, $181 = 0, $183 = 0, $184 = 0, $185 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $36 = 0, $39 = 0, $4 = 0, $45 = 0, $48 = 0, $51 = 0, $53 = 0, $54 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $95 = 0, $96 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 14689
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14691
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14693
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14695
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14697
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14699
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14701
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14703
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14705
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14707
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 14709
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 14711
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 14713
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 14715
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 14717
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 14719
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 14721
 HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -2; //@line 14724
 __ZN14LoRaMacCommand20clear_command_bufferEv($4 + 4 | 0); //@line 14726
 HEAP8[$30 >> 0] = 0; //@line 14727
 $36 = $4 + 288 | 0; //@line 14728
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 10 >> 0] = 0; //@line 14731
 $39 = HEAP8[$32 >> 0] | 0; //@line 14732
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 11 >> 0] = $39; //@line 14735
 if (!(HEAP8[$4 + 370 >> 0] | 0)) {
  $45 = $4 + 956 | 0; //@line 14740
  HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + 1; //@line 14743
 }
 $48 = HEAP32[$6 >> 2] | 0; //@line 14745
 $51 = $48 & -3; //@line 14748
 if (!($48 & 2)) {
  $53 = $48; //@line 14750
 } else {
  HEAP32[$6 >> 2] = $51; //@line 14752
  $53 = $51; //@line 14753
 }
 if ($53 | 0) {
  $138 = HEAP32[$26 >> 2] | 0; //@line 14757
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 14758
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($138, $28, 1e3); //@line 14759
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 14762
   $139 = $ReallocAsyncCtx8 + 4 | 0; //@line 14763
   HEAP32[$139 >> 2] = $2; //@line 14764
   $140 = $ReallocAsyncCtx8 + 8 | 0; //@line 14765
   HEAP32[$140 >> 2] = $4; //@line 14766
   $141 = $ReallocAsyncCtx8 + 12 | 0; //@line 14767
   HEAP32[$141 >> 2] = $16; //@line 14768
   $142 = $ReallocAsyncCtx8 + 16 | 0; //@line 14769
   HEAP32[$142 >> 2] = $18; //@line 14770
   $143 = $ReallocAsyncCtx8 + 20 | 0; //@line 14771
   HEAP32[$143 >> 2] = $20; //@line 14772
   $144 = $ReallocAsyncCtx8 + 24 | 0; //@line 14773
   HEAP32[$144 >> 2] = $22; //@line 14774
   $145 = $ReallocAsyncCtx8 + 28 | 0; //@line 14775
   HEAP32[$145 >> 2] = $24; //@line 14776
   sp = STACKTOP; //@line 14777
   return;
  }
  ___async_unwind = 0; //@line 14780
  HEAP32[$ReallocAsyncCtx8 >> 2] = 472; //@line 14781
  $139 = $ReallocAsyncCtx8 + 4 | 0; //@line 14782
  HEAP32[$139 >> 2] = $2; //@line 14783
  $140 = $ReallocAsyncCtx8 + 8 | 0; //@line 14784
  HEAP32[$140 >> 2] = $4; //@line 14785
  $141 = $ReallocAsyncCtx8 + 12 | 0; //@line 14786
  HEAP32[$141 >> 2] = $16; //@line 14787
  $142 = $ReallocAsyncCtx8 + 16 | 0; //@line 14788
  HEAP32[$142 >> 2] = $18; //@line 14789
  $143 = $ReallocAsyncCtx8 + 20 | 0; //@line 14790
  HEAP32[$143 >> 2] = $20; //@line 14791
  $144 = $ReallocAsyncCtx8 + 24 | 0; //@line 14792
  HEAP32[$144 >> 2] = $22; //@line 14793
  $145 = $ReallocAsyncCtx8 + 28 | 0; //@line 14794
  HEAP32[$145 >> 2] = $24; //@line 14795
  sp = STACKTOP; //@line 14796
  return;
 }
 $54 = HEAP8[$2 >> 0] | 0; //@line 14799
 if ($54 & 1) {
  HEAP8[$2 >> 0] = $54 & -2; //@line 14804
  $59 = HEAP32[$4 + 1324 >> 2] | 0; //@line 14806
  $61 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 14808
  $62 = $59 + 12 | 0; //@line 14809
  $63 = HEAP32[$62 >> 2] | 0; //@line 14810
  if (!$63) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 14813
   _mbed_assert_internal(15061, 15066, 1102); //@line 14814
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 14817
    $65 = $ReallocAsyncCtx18 + 4 | 0; //@line 14818
    HEAP32[$65 >> 2] = $2; //@line 14819
    $66 = $ReallocAsyncCtx18 + 8 | 0; //@line 14820
    HEAP32[$66 >> 2] = $4; //@line 14821
    $67 = $ReallocAsyncCtx18 + 12 | 0; //@line 14822
    HEAP32[$67 >> 2] = $8; //@line 14823
    $68 = $ReallocAsyncCtx18 + 16 | 0; //@line 14824
    HEAP32[$68 >> 2] = $10; //@line 14825
    $69 = $ReallocAsyncCtx18 + 20 | 0; //@line 14826
    HEAP32[$69 >> 2] = $12; //@line 14827
    $70 = $ReallocAsyncCtx18 + 24 | 0; //@line 14828
    HEAP32[$70 >> 2] = $14; //@line 14829
    $71 = $ReallocAsyncCtx18 + 28 | 0; //@line 14830
    HEAP32[$71 >> 2] = $16; //@line 14831
    $72 = $ReallocAsyncCtx18 + 32 | 0; //@line 14832
    HEAP32[$72 >> 2] = $18; //@line 14833
    $73 = $ReallocAsyncCtx18 + 36 | 0; //@line 14834
    HEAP32[$73 >> 2] = $20; //@line 14835
    $74 = $ReallocAsyncCtx18 + 40 | 0; //@line 14836
    HEAP32[$74 >> 2] = $22; //@line 14837
    $75 = $ReallocAsyncCtx18 + 44 | 0; //@line 14838
    HEAP32[$75 >> 2] = $24; //@line 14839
    $76 = $ReallocAsyncCtx18 + 48 | 0; //@line 14840
    HEAP32[$76 >> 2] = $59; //@line 14841
    $77 = $ReallocAsyncCtx18 + 52 | 0; //@line 14842
    HEAP32[$77 >> 2] = $61; //@line 14843
    $78 = $ReallocAsyncCtx18 + 56 | 0; //@line 14844
    HEAP32[$78 >> 2] = $62; //@line 14845
    sp = STACKTOP; //@line 14846
    return;
   }
   ___async_unwind = 0; //@line 14849
   HEAP32[$ReallocAsyncCtx18 >> 2] = 467; //@line 14850
   $65 = $ReallocAsyncCtx18 + 4 | 0; //@line 14851
   HEAP32[$65 >> 2] = $2; //@line 14852
   $66 = $ReallocAsyncCtx18 + 8 | 0; //@line 14853
   HEAP32[$66 >> 2] = $4; //@line 14854
   $67 = $ReallocAsyncCtx18 + 12 | 0; //@line 14855
   HEAP32[$67 >> 2] = $8; //@line 14856
   $68 = $ReallocAsyncCtx18 + 16 | 0; //@line 14857
   HEAP32[$68 >> 2] = $10; //@line 14858
   $69 = $ReallocAsyncCtx18 + 20 | 0; //@line 14859
   HEAP32[$69 >> 2] = $12; //@line 14860
   $70 = $ReallocAsyncCtx18 + 24 | 0; //@line 14861
   HEAP32[$70 >> 2] = $14; //@line 14862
   $71 = $ReallocAsyncCtx18 + 28 | 0; //@line 14863
   HEAP32[$71 >> 2] = $16; //@line 14864
   $72 = $ReallocAsyncCtx18 + 32 | 0; //@line 14865
   HEAP32[$72 >> 2] = $18; //@line 14866
   $73 = $ReallocAsyncCtx18 + 36 | 0; //@line 14867
   HEAP32[$73 >> 2] = $20; //@line 14868
   $74 = $ReallocAsyncCtx18 + 40 | 0; //@line 14869
   HEAP32[$74 >> 2] = $22; //@line 14870
   $75 = $ReallocAsyncCtx18 + 44 | 0; //@line 14871
   HEAP32[$75 >> 2] = $24; //@line 14872
   $76 = $ReallocAsyncCtx18 + 48 | 0; //@line 14873
   HEAP32[$76 >> 2] = $59; //@line 14874
   $77 = $ReallocAsyncCtx18 + 52 | 0; //@line 14875
   HEAP32[$77 >> 2] = $61; //@line 14876
   $78 = $ReallocAsyncCtx18 + 56 | 0; //@line 14877
   HEAP32[$78 >> 2] = $62; //@line 14878
   sp = STACKTOP; //@line 14879
   return;
  } else {
   $79 = HEAP32[$63 >> 2] | 0; //@line 14882
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 14883
   FUNCTION_TABLE_vii[$79 & 31]($59, $61); //@line 14884
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 14887
    $80 = $ReallocAsyncCtx2 + 4 | 0; //@line 14888
    HEAP32[$80 >> 2] = $2; //@line 14889
    $81 = $ReallocAsyncCtx2 + 8 | 0; //@line 14890
    HEAP32[$81 >> 2] = $4; //@line 14891
    $82 = $ReallocAsyncCtx2 + 12 | 0; //@line 14892
    HEAP32[$82 >> 2] = $8; //@line 14893
    $83 = $ReallocAsyncCtx2 + 16 | 0; //@line 14894
    HEAP32[$83 >> 2] = $10; //@line 14895
    $84 = $ReallocAsyncCtx2 + 20 | 0; //@line 14896
    HEAP32[$84 >> 2] = $12; //@line 14897
    $85 = $ReallocAsyncCtx2 + 24 | 0; //@line 14898
    HEAP32[$85 >> 2] = $14; //@line 14899
    $86 = $ReallocAsyncCtx2 + 28 | 0; //@line 14900
    HEAP32[$86 >> 2] = $16; //@line 14901
    $87 = $ReallocAsyncCtx2 + 32 | 0; //@line 14902
    HEAP32[$87 >> 2] = $18; //@line 14903
    $88 = $ReallocAsyncCtx2 + 36 | 0; //@line 14904
    HEAP32[$88 >> 2] = $20; //@line 14905
    $89 = $ReallocAsyncCtx2 + 40 | 0; //@line 14906
    HEAP32[$89 >> 2] = $22; //@line 14907
    $90 = $ReallocAsyncCtx2 + 44 | 0; //@line 14908
    HEAP32[$90 >> 2] = $24; //@line 14909
    sp = STACKTOP; //@line 14910
    return;
   }
   ___async_unwind = 0; //@line 14913
   HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 14914
   $80 = $ReallocAsyncCtx2 + 4 | 0; //@line 14915
   HEAP32[$80 >> 2] = $2; //@line 14916
   $81 = $ReallocAsyncCtx2 + 8 | 0; //@line 14917
   HEAP32[$81 >> 2] = $4; //@line 14918
   $82 = $ReallocAsyncCtx2 + 12 | 0; //@line 14919
   HEAP32[$82 >> 2] = $8; //@line 14920
   $83 = $ReallocAsyncCtx2 + 16 | 0; //@line 14921
   HEAP32[$83 >> 2] = $10; //@line 14922
   $84 = $ReallocAsyncCtx2 + 20 | 0; //@line 14923
   HEAP32[$84 >> 2] = $12; //@line 14924
   $85 = $ReallocAsyncCtx2 + 24 | 0; //@line 14925
   HEAP32[$85 >> 2] = $14; //@line 14926
   $86 = $ReallocAsyncCtx2 + 28 | 0; //@line 14927
   HEAP32[$86 >> 2] = $16; //@line 14928
   $87 = $ReallocAsyncCtx2 + 32 | 0; //@line 14929
   HEAP32[$87 >> 2] = $18; //@line 14930
   $88 = $ReallocAsyncCtx2 + 36 | 0; //@line 14931
   HEAP32[$88 >> 2] = $20; //@line 14932
   $89 = $ReallocAsyncCtx2 + 40 | 0; //@line 14933
   HEAP32[$89 >> 2] = $22; //@line 14934
   $90 = $ReallocAsyncCtx2 + 44 | 0; //@line 14935
   HEAP32[$90 >> 2] = $24; //@line 14936
   sp = STACKTOP; //@line 14937
   return;
  }
 }
 if ($54 & 8) {
  HEAP8[$2 >> 0] = $54 & -9; //@line 14945
  $95 = HEAP32[$4 + 1324 >> 2] | 0; //@line 14947
  $96 = $95 + 32 | 0; //@line 14948
  $98 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 14950
  $99 = $95 + 44 | 0; //@line 14951
  $100 = HEAP32[$99 >> 2] | 0; //@line 14952
  if (!$100) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 14955
   _mbed_assert_internal(15061, 15066, 1102); //@line 14956
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 14959
    $102 = $ReallocAsyncCtx17 + 4 | 0; //@line 14960
    HEAP32[$102 >> 2] = $2; //@line 14961
    $103 = $ReallocAsyncCtx17 + 8 | 0; //@line 14962
    HEAP32[$103 >> 2] = $4; //@line 14963
    $104 = $ReallocAsyncCtx17 + 12 | 0; //@line 14964
    HEAP32[$104 >> 2] = $96; //@line 14965
    $105 = $ReallocAsyncCtx17 + 16 | 0; //@line 14966
    HEAP32[$105 >> 2] = $98; //@line 14967
    $106 = $ReallocAsyncCtx17 + 20 | 0; //@line 14968
    HEAP32[$106 >> 2] = $8; //@line 14969
    $107 = $ReallocAsyncCtx17 + 24 | 0; //@line 14970
    HEAP32[$107 >> 2] = $10; //@line 14971
    $108 = $ReallocAsyncCtx17 + 28 | 0; //@line 14972
    HEAP32[$108 >> 2] = $12; //@line 14973
    $109 = $ReallocAsyncCtx17 + 32 | 0; //@line 14974
    HEAP32[$109 >> 2] = $14; //@line 14975
    $110 = $ReallocAsyncCtx17 + 36 | 0; //@line 14976
    HEAP32[$110 >> 2] = $16; //@line 14977
    $111 = $ReallocAsyncCtx17 + 40 | 0; //@line 14978
    HEAP32[$111 >> 2] = $18; //@line 14979
    $112 = $ReallocAsyncCtx17 + 44 | 0; //@line 14980
    HEAP32[$112 >> 2] = $20; //@line 14981
    $113 = $ReallocAsyncCtx17 + 48 | 0; //@line 14982
    HEAP32[$113 >> 2] = $22; //@line 14983
    $114 = $ReallocAsyncCtx17 + 52 | 0; //@line 14984
    HEAP32[$114 >> 2] = $24; //@line 14985
    $115 = $ReallocAsyncCtx17 + 56 | 0; //@line 14986
    HEAP32[$115 >> 2] = $99; //@line 14987
    sp = STACKTOP; //@line 14988
    return;
   }
   ___async_unwind = 0; //@line 14991
   HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 14992
   $102 = $ReallocAsyncCtx17 + 4 | 0; //@line 14993
   HEAP32[$102 >> 2] = $2; //@line 14994
   $103 = $ReallocAsyncCtx17 + 8 | 0; //@line 14995
   HEAP32[$103 >> 2] = $4; //@line 14996
   $104 = $ReallocAsyncCtx17 + 12 | 0; //@line 14997
   HEAP32[$104 >> 2] = $96; //@line 14998
   $105 = $ReallocAsyncCtx17 + 16 | 0; //@line 14999
   HEAP32[$105 >> 2] = $98; //@line 15000
   $106 = $ReallocAsyncCtx17 + 20 | 0; //@line 15001
   HEAP32[$106 >> 2] = $8; //@line 15002
   $107 = $ReallocAsyncCtx17 + 24 | 0; //@line 15003
   HEAP32[$107 >> 2] = $10; //@line 15004
   $108 = $ReallocAsyncCtx17 + 28 | 0; //@line 15005
   HEAP32[$108 >> 2] = $12; //@line 15006
   $109 = $ReallocAsyncCtx17 + 32 | 0; //@line 15007
   HEAP32[$109 >> 2] = $14; //@line 15008
   $110 = $ReallocAsyncCtx17 + 36 | 0; //@line 15009
   HEAP32[$110 >> 2] = $16; //@line 15010
   $111 = $ReallocAsyncCtx17 + 40 | 0; //@line 15011
   HEAP32[$111 >> 2] = $18; //@line 15012
   $112 = $ReallocAsyncCtx17 + 44 | 0; //@line 15013
   HEAP32[$112 >> 2] = $20; //@line 15014
   $113 = $ReallocAsyncCtx17 + 48 | 0; //@line 15015
   HEAP32[$113 >> 2] = $22; //@line 15016
   $114 = $ReallocAsyncCtx17 + 52 | 0; //@line 15017
   HEAP32[$114 >> 2] = $24; //@line 15018
   $115 = $ReallocAsyncCtx17 + 56 | 0; //@line 15019
   HEAP32[$115 >> 2] = $99; //@line 15020
   sp = STACKTOP; //@line 15021
   return;
  } else {
   $116 = HEAP32[$100 >> 2] | 0; //@line 15024
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 15025
   FUNCTION_TABLE_vii[$116 & 31]($96, $98); //@line 15026
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 15029
    $117 = $ReallocAsyncCtx3 + 4 | 0; //@line 15030
    HEAP32[$117 >> 2] = $4; //@line 15031
    $118 = $ReallocAsyncCtx3 + 8 | 0; //@line 15032
    HEAP32[$118 >> 2] = $2; //@line 15033
    $119 = $ReallocAsyncCtx3 + 12 | 0; //@line 15034
    HEAP32[$119 >> 2] = $8; //@line 15035
    $120 = $ReallocAsyncCtx3 + 16 | 0; //@line 15036
    HEAP32[$120 >> 2] = $10; //@line 15037
    $121 = $ReallocAsyncCtx3 + 20 | 0; //@line 15038
    HEAP32[$121 >> 2] = $12; //@line 15039
    $122 = $ReallocAsyncCtx3 + 24 | 0; //@line 15040
    HEAP32[$122 >> 2] = $14; //@line 15041
    $123 = $ReallocAsyncCtx3 + 28 | 0; //@line 15042
    HEAP32[$123 >> 2] = $16; //@line 15043
    $124 = $ReallocAsyncCtx3 + 32 | 0; //@line 15044
    HEAP32[$124 >> 2] = $18; //@line 15045
    $125 = $ReallocAsyncCtx3 + 36 | 0; //@line 15046
    HEAP32[$125 >> 2] = $20; //@line 15047
    $126 = $ReallocAsyncCtx3 + 40 | 0; //@line 15048
    HEAP32[$126 >> 2] = $22; //@line 15049
    $127 = $ReallocAsyncCtx3 + 44 | 0; //@line 15050
    HEAP32[$127 >> 2] = $24; //@line 15051
    sp = STACKTOP; //@line 15052
    return;
   }
   ___async_unwind = 0; //@line 15055
   HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 15056
   $117 = $ReallocAsyncCtx3 + 4 | 0; //@line 15057
   HEAP32[$117 >> 2] = $4; //@line 15058
   $118 = $ReallocAsyncCtx3 + 8 | 0; //@line 15059
   HEAP32[$118 >> 2] = $2; //@line 15060
   $119 = $ReallocAsyncCtx3 + 12 | 0; //@line 15061
   HEAP32[$119 >> 2] = $8; //@line 15062
   $120 = $ReallocAsyncCtx3 + 16 | 0; //@line 15063
   HEAP32[$120 >> 2] = $10; //@line 15064
   $121 = $ReallocAsyncCtx3 + 20 | 0; //@line 15065
   HEAP32[$121 >> 2] = $12; //@line 15066
   $122 = $ReallocAsyncCtx3 + 24 | 0; //@line 15067
   HEAP32[$122 >> 2] = $14; //@line 15068
   $123 = $ReallocAsyncCtx3 + 28 | 0; //@line 15069
   HEAP32[$123 >> 2] = $16; //@line 15070
   $124 = $ReallocAsyncCtx3 + 32 | 0; //@line 15071
   HEAP32[$124 >> 2] = $18; //@line 15072
   $125 = $ReallocAsyncCtx3 + 36 | 0; //@line 15073
   HEAP32[$125 >> 2] = $20; //@line 15074
   $126 = $ReallocAsyncCtx3 + 40 | 0; //@line 15075
   HEAP32[$126 >> 2] = $22; //@line 15076
   $127 = $ReallocAsyncCtx3 + 44 | 0; //@line 15077
   HEAP32[$127 >> 2] = $24; //@line 15078
   sp = STACKTOP; //@line 15079
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(12967, $8) | 0; //@line 15086
  _printf(13114, $12) | 0; //@line 15087
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 15088
  _putchar(10) | 0; //@line 15089
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 15092
   $130 = $ReallocAsyncCtx7 + 4 | 0; //@line 15093
   HEAP32[$130 >> 2] = $4; //@line 15094
   $131 = $ReallocAsyncCtx7 + 8 | 0; //@line 15095
   HEAP32[$131 >> 2] = $2; //@line 15096
   $132 = $ReallocAsyncCtx7 + 12 | 0; //@line 15097
   HEAP32[$132 >> 2] = $16; //@line 15098
   $133 = $ReallocAsyncCtx7 + 16 | 0; //@line 15099
   HEAP32[$133 >> 2] = $18; //@line 15100
   $134 = $ReallocAsyncCtx7 + 20 | 0; //@line 15101
   HEAP32[$134 >> 2] = $20; //@line 15102
   $135 = $ReallocAsyncCtx7 + 24 | 0; //@line 15103
   HEAP32[$135 >> 2] = $22; //@line 15104
   $136 = $ReallocAsyncCtx7 + 28 | 0; //@line 15105
   HEAP32[$136 >> 2] = $24; //@line 15106
   sp = STACKTOP; //@line 15107
   return;
  }
  ___async_unwind = 0; //@line 15110
  HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 15111
  $130 = $ReallocAsyncCtx7 + 4 | 0; //@line 15112
  HEAP32[$130 >> 2] = $4; //@line 15113
  $131 = $ReallocAsyncCtx7 + 8 | 0; //@line 15114
  HEAP32[$131 >> 2] = $2; //@line 15115
  $132 = $ReallocAsyncCtx7 + 12 | 0; //@line 15116
  HEAP32[$132 >> 2] = $16; //@line 15117
  $133 = $ReallocAsyncCtx7 + 16 | 0; //@line 15118
  HEAP32[$133 >> 2] = $18; //@line 15119
  $134 = $ReallocAsyncCtx7 + 20 | 0; //@line 15120
  HEAP32[$134 >> 2] = $20; //@line 15121
  $135 = $ReallocAsyncCtx7 + 24 | 0; //@line 15122
  HEAP32[$135 >> 2] = $22; //@line 15123
  $136 = $ReallocAsyncCtx7 + 28 | 0; //@line 15124
  HEAP32[$136 >> 2] = $24; //@line 15125
  sp = STACKTOP; //@line 15126
  return;
 }
 $137 = HEAP8[$2 >> 0] & -33; //@line 15130
 HEAP8[$2 >> 0] = $137; //@line 15131
 do {
  if (!($137 & 2)) {
   $176 = $137; //@line 15136
  } else {
   $148 = $137 & -3; //@line 15138
   HEAP8[$2 >> 0] = $148; //@line 15139
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12967, $18) | 0; //@line 15144
    _printf(12994, $22) | 0; //@line 15145
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 15146
    _putchar(10) | 0; //@line 15147
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 15150
     $152 = $ReallocAsyncCtx6 + 4 | 0; //@line 15151
     HEAP32[$152 >> 2] = $2; //@line 15152
     $153 = $ReallocAsyncCtx6 + 8 | 0; //@line 15153
     HEAP32[$153 >> 2] = $16; //@line 15154
     $154 = $ReallocAsyncCtx6 + 12 | 0; //@line 15155
     HEAP32[$154 >> 2] = $4; //@line 15156
     $155 = $ReallocAsyncCtx6 + 16 | 0; //@line 15157
     HEAP32[$155 >> 2] = $16; //@line 15158
     sp = STACKTOP; //@line 15159
     return;
    }
    ___async_unwind = 0; //@line 15162
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 15163
    $152 = $ReallocAsyncCtx6 + 4 | 0; //@line 15164
    HEAP32[$152 >> 2] = $2; //@line 15165
    $153 = $ReallocAsyncCtx6 + 8 | 0; //@line 15166
    HEAP32[$153 >> 2] = $16; //@line 15167
    $154 = $ReallocAsyncCtx6 + 12 | 0; //@line 15168
    HEAP32[$154 >> 2] = $4; //@line 15169
    $155 = $ReallocAsyncCtx6 + 16 | 0; //@line 15170
    HEAP32[$155 >> 2] = $16; //@line 15171
    sp = STACKTOP; //@line 15172
    return;
   }
   if ($148 & 4) {
    $174 = $148 & -5; //@line 15178
    HEAP8[$2 >> 0] = $174; //@line 15179
    $176 = $174; //@line 15180
    break;
   }
   $159 = HEAP32[$4 + 1324 >> 2] | 0; //@line 15184
   $160 = $159 + 16 | 0; //@line 15185
   $162 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 15187
   $163 = $159 + 28 | 0; //@line 15188
   $164 = HEAP32[$163 >> 2] | 0; //@line 15189
   if (!$164) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 15192
    _mbed_assert_internal(15061, 15066, 1102); //@line 15193
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 15196
     $166 = $ReallocAsyncCtx15 + 4 | 0; //@line 15197
     HEAP32[$166 >> 2] = $163; //@line 15198
     $167 = $ReallocAsyncCtx15 + 8 | 0; //@line 15199
     HEAP32[$167 >> 2] = $160; //@line 15200
     $168 = $ReallocAsyncCtx15 + 12 | 0; //@line 15201
     HEAP32[$168 >> 2] = $162; //@line 15202
     $169 = $ReallocAsyncCtx15 + 16 | 0; //@line 15203
     HEAP32[$169 >> 2] = $2; //@line 15204
     $170 = $ReallocAsyncCtx15 + 20 | 0; //@line 15205
     HEAP32[$170 >> 2] = $4; //@line 15206
     sp = STACKTOP; //@line 15207
     return;
    }
    ___async_unwind = 0; //@line 15210
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 15211
    $166 = $ReallocAsyncCtx15 + 4 | 0; //@line 15212
    HEAP32[$166 >> 2] = $163; //@line 15213
    $167 = $ReallocAsyncCtx15 + 8 | 0; //@line 15214
    HEAP32[$167 >> 2] = $160; //@line 15215
    $168 = $ReallocAsyncCtx15 + 12 | 0; //@line 15216
    HEAP32[$168 >> 2] = $162; //@line 15217
    $169 = $ReallocAsyncCtx15 + 16 | 0; //@line 15218
    HEAP32[$169 >> 2] = $2; //@line 15219
    $170 = $ReallocAsyncCtx15 + 20 | 0; //@line 15220
    HEAP32[$170 >> 2] = $4; //@line 15221
    sp = STACKTOP; //@line 15222
    return;
   } else {
    $171 = HEAP32[$164 >> 2] | 0; //@line 15225
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 15226
    FUNCTION_TABLE_vii[$171 & 31]($160, $162); //@line 15227
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 15230
     $172 = $ReallocAsyncCtx4 + 4 | 0; //@line 15231
     HEAP32[$172 >> 2] = $2; //@line 15232
     $173 = $ReallocAsyncCtx4 + 8 | 0; //@line 15233
     HEAP32[$173 >> 2] = $4; //@line 15234
     sp = STACKTOP; //@line 15235
     return;
    }
    ___async_unwind = 0; //@line 15238
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 15239
    $172 = $ReallocAsyncCtx4 + 4 | 0; //@line 15240
    HEAP32[$172 >> 2] = $2; //@line 15241
    $173 = $ReallocAsyncCtx4 + 8 | 0; //@line 15242
    HEAP32[$173 >> 2] = $4; //@line 15243
    sp = STACKTOP; //@line 15244
    return;
   }
  }
 } while (0);
 if (!($176 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $176 & -17; //@line 15255
 $180 = HEAP32[$4 + 1324 >> 2] | 0; //@line 15257
 $181 = $180 + 48 | 0; //@line 15258
 $183 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 15260
 $184 = $180 + 60 | 0; //@line 15261
 $185 = HEAP32[$184 >> 2] | 0; //@line 15262
 if (!$185) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 15265
  _mbed_assert_internal(15061, 15066, 1102); //@line 15266
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 15269
   $187 = $ReallocAsyncCtx14 + 4 | 0; //@line 15270
   HEAP32[$187 >> 2] = $184; //@line 15271
   $188 = $ReallocAsyncCtx14 + 8 | 0; //@line 15272
   HEAP32[$188 >> 2] = $181; //@line 15273
   $189 = $ReallocAsyncCtx14 + 12 | 0; //@line 15274
   HEAP32[$189 >> 2] = $183; //@line 15275
   sp = STACKTOP; //@line 15276
   return;
  }
  ___async_unwind = 0; //@line 15279
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 15280
  $187 = $ReallocAsyncCtx14 + 4 | 0; //@line 15281
  HEAP32[$187 >> 2] = $184; //@line 15282
  $188 = $ReallocAsyncCtx14 + 8 | 0; //@line 15283
  HEAP32[$188 >> 2] = $181; //@line 15284
  $189 = $ReallocAsyncCtx14 + 12 | 0; //@line 15285
  HEAP32[$189 >> 2] = $183; //@line 15286
  sp = STACKTOP; //@line 15287
  return;
 } else {
  $190 = HEAP32[$185 >> 2] | 0; //@line 15290
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 15291
  FUNCTION_TABLE_vii[$190 & 31]($181, $183); //@line 15292
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 15295
   sp = STACKTOP; //@line 15296
   return;
  }
  ___async_unwind = 0; //@line 15299
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 15300
  sp = STACKTOP; //@line 15301
  return;
 }
}
function _equeue_dispatch__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$065 = 0, $$06790$reg2mem$0 = 0, $$06790$reg2mem$0$phi = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val31 = 0, $$expand_i1_val33 = 0, $$expand_i1_val35 = 0, $$reg2mem$0 = 0, $$reg2mem24$0 = 0, $$sink$in$i$i = 0, $10 = 0, $102 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $14 = 0, $140 = 0, $141 = 0, $143 = 0, $146 = 0, $148 = 0, $151 = 0, $154 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $165 = 0, $168 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 27084
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27088
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27090
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27092
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27094
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27096
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27098
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27104
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 27106
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 27108
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 27110
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 27112
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 27114
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 27116
 $34 = HEAP8[$0 + 68 >> 0] & 1; //@line 27119
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 27121
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 27123
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 27125
 $$06790$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 27126
 $$reg2mem$0 = HEAP32[$0 + 32 >> 2] | 0; //@line 27126
 $$reg2mem24$0 = HEAP32[$0 + 36 >> 2] | 0; //@line 27126
 while (1) {
  $68 = HEAP32[$$06790$reg2mem$0 + 24 >> 2] | 0; //@line 27129
  if (($68 | 0) > -1) {
   label = 8; //@line 27132
   break;
  }
  $92 = $$06790$reg2mem$0 + 4 | 0; //@line 27136
  $93 = HEAP8[$92 >> 0] | 0; //@line 27137
  HEAP8[$92 >> 0] = (($93 + 1 & 255) << HEAP32[$10 >> 2] | 0) == 0 ? 1 : ($93 & 255) + 1 & 255; //@line 27146
  $102 = HEAP32[$$06790$reg2mem$0 + 28 >> 2] | 0; //@line 27148
  if ($102 | 0) {
   label = 12; //@line 27151
   break;
  }
  _equeue_mutex_lock($4); //@line 27154
  $125 = HEAP32[$6 >> 2] | 0; //@line 27155
  L6 : do {
   if (!$125) {
    $$02329$i$i = $6; //@line 27159
    label = 21; //@line 27160
   } else {
    $127 = HEAP32[$$06790$reg2mem$0 >> 2] | 0; //@line 27162
    $$025$i$i = $6; //@line 27163
    $129 = $125; //@line 27163
    while (1) {
     $128 = HEAP32[$129 >> 2] | 0; //@line 27165
     if ($128 >>> 0 >= $127 >>> 0) {
      break;
     }
     $131 = $129 + 8 | 0; //@line 27170
     $132 = HEAP32[$131 >> 2] | 0; //@line 27171
     if (!$132) {
      $$02329$i$i = $131; //@line 27174
      label = 21; //@line 27175
      break L6;
     } else {
      $$025$i$i = $131; //@line 27178
      $129 = $132; //@line 27178
     }
    }
    if (($128 | 0) == ($127 | 0)) {
     HEAP32[$$06790$reg2mem$0 + 12 >> 2] = $129; //@line 27184
     $$02330$i$i = $$025$i$i; //@line 27187
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 27187
    } else {
     $$02329$i$i = $$025$i$i; //@line 27189
     label = 21; //@line 27190
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 27195
   HEAP32[$$06790$reg2mem$0 + 12 >> 2] = 0; //@line 27197
   $$02330$i$i = $$02329$i$i; //@line 27198
   $$sink$in$i$i = $$02329$i$i; //@line 27198
  }
  HEAP32[$$reg2mem24$0 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 27201
  HEAP32[$$02330$i$i >> 2] = $$06790$reg2mem$0; //@line 27202
  _equeue_mutex_unlock($4); //@line 27203
  if (!$$reg2mem$0) {
   label = 24; //@line 27206
   break;
  }
  $41 = $$reg2mem$0 + 8 | 0; //@line 27209
  $42 = HEAP32[$41 >> 2] | 0; //@line 27210
  $44 = HEAP32[$$reg2mem$0 + 32 >> 2] | 0; //@line 27212
  if (!$44) {
   $$06790$reg2mem$0$phi = $$reg2mem$0; //@line 27215
   $$reg2mem$0 = $42; //@line 27215
   $$reg2mem24$0 = $41; //@line 27215
   $$06790$reg2mem$0 = $$06790$reg2mem$0$phi; //@line 27215
  } else {
   label = 3; //@line 27217
   break;
  }
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 27223
  FUNCTION_TABLE_vi[$44 & 1023]($$reg2mem$0 + 36 | 0); //@line 27224
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 180; //@line 27227
   $47 = $ReallocAsyncCtx + 4 | 0; //@line 27228
   HEAP32[$47 >> 2] = $$reg2mem$0; //@line 27229
   $48 = $ReallocAsyncCtx + 8 | 0; //@line 27230
   HEAP32[$48 >> 2] = $4; //@line 27231
   $49 = $ReallocAsyncCtx + 12 | 0; //@line 27232
   HEAP32[$49 >> 2] = $6; //@line 27233
   $50 = $ReallocAsyncCtx + 16 | 0; //@line 27234
   HEAP32[$50 >> 2] = $8; //@line 27235
   $51 = $ReallocAsyncCtx + 20 | 0; //@line 27236
   HEAP32[$51 >> 2] = $10; //@line 27237
   $52 = $ReallocAsyncCtx + 24 | 0; //@line 27238
   HEAP32[$52 >> 2] = $12; //@line 27239
   $53 = $ReallocAsyncCtx + 28 | 0; //@line 27240
   HEAP32[$53 >> 2] = $14; //@line 27241
   $54 = $ReallocAsyncCtx + 32 | 0; //@line 27242
   HEAP32[$54 >> 2] = $42; //@line 27243
   $55 = $ReallocAsyncCtx + 36 | 0; //@line 27244
   HEAP32[$55 >> 2] = $41; //@line 27245
   $56 = $ReallocAsyncCtx + 40 | 0; //@line 27246
   HEAP32[$56 >> 2] = $20; //@line 27247
   $57 = $ReallocAsyncCtx + 44 | 0; //@line 27248
   HEAP32[$57 >> 2] = $22; //@line 27249
   $58 = $ReallocAsyncCtx + 48 | 0; //@line 27250
   HEAP32[$58 >> 2] = $24; //@line 27251
   $59 = $ReallocAsyncCtx + 52 | 0; //@line 27252
   HEAP32[$59 >> 2] = $26; //@line 27253
   $60 = $ReallocAsyncCtx + 56 | 0; //@line 27254
   HEAP32[$60 >> 2] = $28; //@line 27255
   $61 = $ReallocAsyncCtx + 60 | 0; //@line 27256
   HEAP32[$61 >> 2] = $30; //@line 27257
   $62 = $ReallocAsyncCtx + 64 | 0; //@line 27258
   HEAP32[$62 >> 2] = $32; //@line 27259
   $63 = $ReallocAsyncCtx + 68 | 0; //@line 27260
   $$expand_i1_val = $34 & 1; //@line 27261
   HEAP8[$63 >> 0] = $$expand_i1_val; //@line 27262
   $64 = $ReallocAsyncCtx + 72 | 0; //@line 27263
   HEAP32[$64 >> 2] = $36; //@line 27264
   $65 = $ReallocAsyncCtx + 76 | 0; //@line 27265
   HEAP32[$65 >> 2] = $38; //@line 27266
   $66 = $ReallocAsyncCtx + 80 | 0; //@line 27267
   HEAP32[$66 >> 2] = $40; //@line 27268
   sp = STACKTOP; //@line 27269
   return;
  }
  ___async_unwind = 0; //@line 27272
  HEAP32[$ReallocAsyncCtx >> 2] = 180; //@line 27273
  $47 = $ReallocAsyncCtx + 4 | 0; //@line 27274
  HEAP32[$47 >> 2] = $$reg2mem$0; //@line 27275
  $48 = $ReallocAsyncCtx + 8 | 0; //@line 27276
  HEAP32[$48 >> 2] = $4; //@line 27277
  $49 = $ReallocAsyncCtx + 12 | 0; //@line 27278
  HEAP32[$49 >> 2] = $6; //@line 27279
  $50 = $ReallocAsyncCtx + 16 | 0; //@line 27280
  HEAP32[$50 >> 2] = $8; //@line 27281
  $51 = $ReallocAsyncCtx + 20 | 0; //@line 27282
  HEAP32[$51 >> 2] = $10; //@line 27283
  $52 = $ReallocAsyncCtx + 24 | 0; //@line 27284
  HEAP32[$52 >> 2] = $12; //@line 27285
  $53 = $ReallocAsyncCtx + 28 | 0; //@line 27286
  HEAP32[$53 >> 2] = $14; //@line 27287
  $54 = $ReallocAsyncCtx + 32 | 0; //@line 27288
  HEAP32[$54 >> 2] = $42; //@line 27289
  $55 = $ReallocAsyncCtx + 36 | 0; //@line 27290
  HEAP32[$55 >> 2] = $41; //@line 27291
  $56 = $ReallocAsyncCtx + 40 | 0; //@line 27292
  HEAP32[$56 >> 2] = $20; //@line 27293
  $57 = $ReallocAsyncCtx + 44 | 0; //@line 27294
  HEAP32[$57 >> 2] = $22; //@line 27295
  $58 = $ReallocAsyncCtx + 48 | 0; //@line 27296
  HEAP32[$58 >> 2] = $24; //@line 27297
  $59 = $ReallocAsyncCtx + 52 | 0; //@line 27298
  HEAP32[$59 >> 2] = $26; //@line 27299
  $60 = $ReallocAsyncCtx + 56 | 0; //@line 27300
  HEAP32[$60 >> 2] = $28; //@line 27301
  $61 = $ReallocAsyncCtx + 60 | 0; //@line 27302
  HEAP32[$61 >> 2] = $30; //@line 27303
  $62 = $ReallocAsyncCtx + 64 | 0; //@line 27304
  HEAP32[$62 >> 2] = $32; //@line 27305
  $63 = $ReallocAsyncCtx + 68 | 0; //@line 27306
  $$expand_i1_val = $34 & 1; //@line 27307
  HEAP8[$63 >> 0] = $$expand_i1_val; //@line 27308
  $64 = $ReallocAsyncCtx + 72 | 0; //@line 27309
  HEAP32[$64 >> 2] = $36; //@line 27310
  $65 = $ReallocAsyncCtx + 76 | 0; //@line 27311
  HEAP32[$65 >> 2] = $38; //@line 27312
  $66 = $ReallocAsyncCtx + 80 | 0; //@line 27313
  HEAP32[$66 >> 2] = $40; //@line 27314
  sp = STACKTOP; //@line 27315
  return;
 } else if ((label | 0) == 8) {
  $70 = $$06790$reg2mem$0 + 20 | 0; //@line 27319
  HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + $68; //@line 27322
  $73 = _equeue_tick() | 0; //@line 27323
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 27324
  _equeue_enqueue($8, $$06790$reg2mem$0, $73) | 0; //@line 27325
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 181; //@line 27328
   $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 27329
   HEAP32[$74 >> 2] = $4; //@line 27330
   $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 27331
   HEAP32[$75 >> 2] = $6; //@line 27332
   $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 27333
   HEAP32[$76 >> 2] = $8; //@line 27334
   $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 27335
   HEAP32[$77 >> 2] = $10; //@line 27336
   $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 27337
   HEAP32[$78 >> 2] = $12; //@line 27338
   $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 27339
   HEAP32[$79 >> 2] = $14; //@line 27340
   $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 27341
   HEAP32[$80 >> 2] = $$reg2mem$0; //@line 27342
   $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 27343
   HEAP32[$81 >> 2] = $24; //@line 27344
   $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 27345
   HEAP32[$82 >> 2] = $26; //@line 27346
   $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 27347
   HEAP32[$83 >> 2] = $30; //@line 27348
   $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 27349
   HEAP32[$84 >> 2] = $20; //@line 27350
   $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 27351
   HEAP32[$85 >> 2] = $22; //@line 27352
   $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 27353
   HEAP32[$86 >> 2] = $28; //@line 27354
   $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 27355
   HEAP32[$87 >> 2] = $32; //@line 27356
   $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 27357
   $$expand_i1_val31 = $34 & 1; //@line 27358
   HEAP8[$88 >> 0] = $$expand_i1_val31; //@line 27359
   $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 27360
   HEAP32[$89 >> 2] = $36; //@line 27361
   $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 27362
   HEAP32[$90 >> 2] = $38; //@line 27363
   $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 27364
   HEAP32[$91 >> 2] = $40; //@line 27365
   sp = STACKTOP; //@line 27366
   return;
  }
  ___async_unwind = 0; //@line 27369
  HEAP32[$ReallocAsyncCtx4 >> 2] = 181; //@line 27370
  $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 27371
  HEAP32[$74 >> 2] = $4; //@line 27372
  $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 27373
  HEAP32[$75 >> 2] = $6; //@line 27374
  $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 27375
  HEAP32[$76 >> 2] = $8; //@line 27376
  $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 27377
  HEAP32[$77 >> 2] = $10; //@line 27378
  $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 27379
  HEAP32[$78 >> 2] = $12; //@line 27380
  $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 27381
  HEAP32[$79 >> 2] = $14; //@line 27382
  $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 27383
  HEAP32[$80 >> 2] = $$reg2mem$0; //@line 27384
  $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 27385
  HEAP32[$81 >> 2] = $24; //@line 27386
  $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 27387
  HEAP32[$82 >> 2] = $26; //@line 27388
  $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 27389
  HEAP32[$83 >> 2] = $30; //@line 27390
  $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 27391
  HEAP32[$84 >> 2] = $20; //@line 27392
  $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 27393
  HEAP32[$85 >> 2] = $22; //@line 27394
  $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 27395
  HEAP32[$86 >> 2] = $28; //@line 27396
  $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 27397
  HEAP32[$87 >> 2] = $32; //@line 27398
  $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 27399
  $$expand_i1_val31 = $34 & 1; //@line 27400
  HEAP8[$88 >> 0] = $$expand_i1_val31; //@line 27401
  $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 27402
  HEAP32[$89 >> 2] = $36; //@line 27403
  $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 27404
  HEAP32[$90 >> 2] = $38; //@line 27405
  $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 27406
  HEAP32[$91 >> 2] = $40; //@line 27407
  sp = STACKTOP; //@line 27408
  return;
 } else if ((label | 0) == 12) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 27413
  FUNCTION_TABLE_vi[$102 & 1023]($$06790$reg2mem$0 + 36 | 0); //@line 27414
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 182; //@line 27417
   $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 27418
   HEAP32[$105 >> 2] = $4; //@line 27419
   $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 27420
   HEAP32[$106 >> 2] = $6; //@line 27421
   $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 27422
   HEAP32[$107 >> 2] = $8; //@line 27423
   $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 27424
   HEAP32[$108 >> 2] = $10; //@line 27425
   $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 27426
   HEAP32[$109 >> 2] = $12; //@line 27427
   $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 27428
   HEAP32[$110 >> 2] = $14; //@line 27429
   $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 27430
   HEAP32[$111 >> 2] = $$reg2mem$0; //@line 27431
   $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 27432
   HEAP32[$112 >> 2] = $$reg2mem24$0; //@line 27433
   $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 27434
   HEAP32[$113 >> 2] = $$06790$reg2mem$0; //@line 27435
   $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 27436
   HEAP32[$114 >> 2] = $20; //@line 27437
   $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 27438
   HEAP32[$115 >> 2] = $22; //@line 27439
   $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 27440
   HEAP32[$116 >> 2] = $24; //@line 27441
   $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 27442
   HEAP32[$117 >> 2] = $26; //@line 27443
   $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 27444
   HEAP32[$118 >> 2] = $28; //@line 27445
   $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 27446
   HEAP32[$119 >> 2] = $30; //@line 27447
   $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 27448
   HEAP32[$120 >> 2] = $32; //@line 27449
   $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 27450
   $$expand_i1_val33 = $34 & 1; //@line 27451
   HEAP8[$121 >> 0] = $$expand_i1_val33; //@line 27452
   $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 27453
   HEAP32[$122 >> 2] = $36; //@line 27454
   $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 27455
   HEAP32[$123 >> 2] = $38; //@line 27456
   $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 27457
   HEAP32[$124 >> 2] = $40; //@line 27458
   sp = STACKTOP; //@line 27459
   return;
  }
  ___async_unwind = 0; //@line 27462
  HEAP32[$ReallocAsyncCtx2 >> 2] = 182; //@line 27463
  $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 27464
  HEAP32[$105 >> 2] = $4; //@line 27465
  $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 27466
  HEAP32[$106 >> 2] = $6; //@line 27467
  $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 27468
  HEAP32[$107 >> 2] = $8; //@line 27469
  $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 27470
  HEAP32[$108 >> 2] = $10; //@line 27471
  $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 27472
  HEAP32[$109 >> 2] = $12; //@line 27473
  $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 27474
  HEAP32[$110 >> 2] = $14; //@line 27475
  $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 27476
  HEAP32[$111 >> 2] = $$reg2mem$0; //@line 27477
  $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 27478
  HEAP32[$112 >> 2] = $$reg2mem24$0; //@line 27479
  $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 27480
  HEAP32[$113 >> 2] = $$06790$reg2mem$0; //@line 27481
  $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 27482
  HEAP32[$114 >> 2] = $20; //@line 27483
  $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 27484
  HEAP32[$115 >> 2] = $22; //@line 27485
  $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 27486
  HEAP32[$116 >> 2] = $24; //@line 27487
  $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 27488
  HEAP32[$117 >> 2] = $26; //@line 27489
  $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 27490
  HEAP32[$118 >> 2] = $28; //@line 27491
  $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 27492
  HEAP32[$119 >> 2] = $30; //@line 27493
  $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 27494
  HEAP32[$120 >> 2] = $32; //@line 27495
  $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 27496
  $$expand_i1_val33 = $34 & 1; //@line 27497
  HEAP8[$121 >> 0] = $$expand_i1_val33; //@line 27498
  $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 27499
  HEAP32[$122 >> 2] = $36; //@line 27500
  $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 27501
  HEAP32[$123 >> 2] = $38; //@line 27502
  $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 27503
  HEAP32[$124 >> 2] = $40; //@line 27504
  sp = STACKTOP; //@line 27505
  return;
 } else if ((label | 0) == 24) {
  $140 = _equeue_tick() | 0; //@line 27509
  if ($34) {
   $141 = $38 - $140 | 0; //@line 27511
   if (($141 | 0) < 1) {
    $143 = $8 + 40 | 0; //@line 27514
    if (HEAP32[$143 >> 2] | 0) {
     _equeue_mutex_lock($26); //@line 27518
     $146 = HEAP32[$143 >> 2] | 0; //@line 27519
     if ($146 | 0) {
      $148 = HEAP32[$32 >> 2] | 0; //@line 27522
      if ($148 | 0) {
       $151 = HEAP32[$8 + 44 >> 2] | 0; //@line 27526
       $154 = (HEAP32[$148 + 20 >> 2] | 0) - $140 | 0; //@line 27529
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 27533
       FUNCTION_TABLE_vii[$146 & 31]($151, $154 & ~($154 >> 31)); //@line 27534
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 183; //@line 27537
        $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 27538
        HEAP32[$158 >> 2] = $24; //@line 27539
        $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 27540
        HEAP32[$159 >> 2] = $26; //@line 27541
        $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 27542
        HEAP32[$160 >> 2] = $30; //@line 27543
        sp = STACKTOP; //@line 27544
        return;
       }
       ___async_unwind = 0; //@line 27547
       HEAP32[$ReallocAsyncCtx3 >> 2] = 183; //@line 27548
       $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 27549
       HEAP32[$158 >> 2] = $24; //@line 27550
       $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 27551
       HEAP32[$159 >> 2] = $26; //@line 27552
       $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 27553
       HEAP32[$160 >> 2] = $30; //@line 27554
       sp = STACKTOP; //@line 27555
       return;
      }
     }
     HEAP8[$24 >> 0] = 1; //@line 27559
     _equeue_mutex_unlock($26); //@line 27560
    }
    HEAP8[$30 >> 0] = 0; //@line 27562
    return;
   } else {
    $$065 = $141; //@line 27565
   }
  } else {
   $$065 = -1; //@line 27568
  }
  _equeue_mutex_lock($26); //@line 27570
  $161 = HEAP32[$32 >> 2] | 0; //@line 27571
  if (!$161) {
   $$2 = $$065; //@line 27574
  } else {
   $165 = (HEAP32[$161 + 20 >> 2] | 0) - $140 | 0; //@line 27578
   $168 = $165 & ~($165 >> 31); //@line 27581
   $$2 = $168 >>> 0 < $$065 >>> 0 ? $168 : $$065; //@line 27584
  }
  _equeue_mutex_unlock($26); //@line 27586
  _equeue_sema_wait($40, $$2) | 0; //@line 27587
  do {
   if (HEAP8[$30 >> 0] | 0) {
    _equeue_mutex_lock($26); //@line 27592
    if (!(HEAP8[$30 >> 0] | 0)) {
     _equeue_mutex_unlock($26); //@line 27596
     break;
    }
    HEAP8[$30 >> 0] = 0; //@line 27599
    _equeue_mutex_unlock($26); //@line 27600
    return;
   }
  } while (0);
  $174 = _equeue_tick() | 0; //@line 27604
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 27605
  _wait_ms(20); //@line 27606
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 184; //@line 27609
   $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 27610
   HEAP32[$175 >> 2] = $4; //@line 27611
   $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 27612
   HEAP32[$176 >> 2] = $6; //@line 27613
   $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 27614
   HEAP32[$177 >> 2] = $8; //@line 27615
   $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 27616
   HEAP32[$178 >> 2] = $10; //@line 27617
   $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 27618
   HEAP32[$179 >> 2] = $12; //@line 27619
   $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 27620
   HEAP32[$180 >> 2] = $14; //@line 27621
   $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 27622
   HEAP32[$181 >> 2] = $24; //@line 27623
   $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 27624
   HEAP32[$182 >> 2] = $26; //@line 27625
   $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 27626
   HEAP32[$183 >> 2] = $30; //@line 27627
   $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 27628
   HEAP32[$184 >> 2] = $20; //@line 27629
   $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 27630
   HEAP32[$185 >> 2] = $22; //@line 27631
   $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 27632
   HEAP32[$186 >> 2] = $28; //@line 27633
   $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 27634
   HEAP32[$187 >> 2] = $32; //@line 27635
   $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 27636
   $$expand_i1_val35 = $34 & 1; //@line 27637
   HEAP8[$188 >> 0] = $$expand_i1_val35; //@line 27638
   $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 27639
   HEAP32[$189 >> 2] = $36; //@line 27640
   $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 27641
   HEAP32[$190 >> 2] = $38; //@line 27642
   $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 27643
   HEAP32[$191 >> 2] = $40; //@line 27644
   $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 27645
   HEAP32[$192 >> 2] = $174; //@line 27646
   sp = STACKTOP; //@line 27647
   return;
  }
  ___async_unwind = 0; //@line 27650
  HEAP32[$ReallocAsyncCtx5 >> 2] = 184; //@line 27651
  $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 27652
  HEAP32[$175 >> 2] = $4; //@line 27653
  $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 27654
  HEAP32[$176 >> 2] = $6; //@line 27655
  $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 27656
  HEAP32[$177 >> 2] = $8; //@line 27657
  $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 27658
  HEAP32[$178 >> 2] = $10; //@line 27659
  $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 27660
  HEAP32[$179 >> 2] = $12; //@line 27661
  $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 27662
  HEAP32[$180 >> 2] = $14; //@line 27663
  $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 27664
  HEAP32[$181 >> 2] = $24; //@line 27665
  $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 27666
  HEAP32[$182 >> 2] = $26; //@line 27667
  $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 27668
  HEAP32[$183 >> 2] = $30; //@line 27669
  $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 27670
  HEAP32[$184 >> 2] = $20; //@line 27671
  $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 27672
  HEAP32[$185 >> 2] = $22; //@line 27673
  $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 27674
  HEAP32[$186 >> 2] = $28; //@line 27675
  $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 27676
  HEAP32[$187 >> 2] = $32; //@line 27677
  $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 27678
  $$expand_i1_val35 = $34 & 1; //@line 27679
  HEAP8[$188 >> 0] = $$expand_i1_val35; //@line 27680
  $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 27681
  HEAP32[$189 >> 2] = $36; //@line 27682
  $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 27683
  HEAP32[$190 >> 2] = $38; //@line 27684
  $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 27685
  HEAP32[$191 >> 2] = $40; //@line 27686
  $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 27687
  HEAP32[$192 >> 2] = $174; //@line 27688
  sp = STACKTOP; //@line 27689
  return;
 }
}
function _equeue_dispatch__async_cb_104($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$065 = 0, $$06790$reg2mem$0 = 0, $$06790$reg2mem$0$phi = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val31 = 0, $$expand_i1_val33 = 0, $$expand_i1_val35 = 0, $$reg2mem$0 = 0, $$reg2mem10$0 = 0, $$sink$in$i$i = 0, $10 = 0, $102 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $140 = 0, $141 = 0, $143 = 0, $146 = 0, $148 = 0, $151 = 0, $154 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $165 = 0, $168 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 27707
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27709
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27711
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27713
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27715
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27717
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27719
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27727
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 27729
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 27731
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 27733
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 27735
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 27737
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 27739
 $34 = HEAP8[$0 + 68 >> 0] & 1; //@line 27742
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 27744
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 27746
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 27748
 $$06790$reg2mem$0 = HEAP32[$0 + 36 >> 2] | 0; //@line 27749
 $$reg2mem$0 = HEAP32[$0 + 28 >> 2] | 0; //@line 27749
 $$reg2mem10$0 = HEAP32[$0 + 32 >> 2] | 0; //@line 27749
 while (1) {
  _equeue_mutex_lock($2); //@line 27751
  $125 = HEAP32[$4 >> 2] | 0; //@line 27752
  L4 : do {
   if (!$125) {
    $$02329$i$i = $4; //@line 27756
    label = 21; //@line 27757
   } else {
    $127 = HEAP32[$$06790$reg2mem$0 >> 2] | 0; //@line 27759
    $$025$i$i = $4; //@line 27760
    $129 = $125; //@line 27760
    while (1) {
     $128 = HEAP32[$129 >> 2] | 0; //@line 27762
     if ($128 >>> 0 >= $127 >>> 0) {
      break;
     }
     $131 = $129 + 8 | 0; //@line 27767
     $132 = HEAP32[$131 >> 2] | 0; //@line 27768
     if (!$132) {
      $$02329$i$i = $131; //@line 27771
      label = 21; //@line 27772
      break L4;
     } else {
      $$025$i$i = $131; //@line 27775
      $129 = $132; //@line 27775
     }
    }
    if (($128 | 0) == ($127 | 0)) {
     HEAP32[$$06790$reg2mem$0 + 12 >> 2] = $129; //@line 27781
     $$02330$i$i = $$025$i$i; //@line 27784
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 27784
    } else {
     $$02329$i$i = $$025$i$i; //@line 27786
     label = 21; //@line 27787
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 27792
   HEAP32[$$06790$reg2mem$0 + 12 >> 2] = 0; //@line 27794
   $$02330$i$i = $$02329$i$i; //@line 27795
   $$sink$in$i$i = $$02329$i$i; //@line 27795
  }
  HEAP32[$$reg2mem10$0 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 27798
  HEAP32[$$02330$i$i >> 2] = $$06790$reg2mem$0; //@line 27799
  _equeue_mutex_unlock($2); //@line 27800
  if (!$$reg2mem$0) {
   label = 24; //@line 27803
   break;
  }
  $$reg2mem10$0 = $$reg2mem$0 + 8 | 0; //@line 27806
  $42 = HEAP32[$$reg2mem10$0 >> 2] | 0; //@line 27807
  $44 = HEAP32[$$reg2mem$0 + 32 >> 2] | 0; //@line 27809
  if ($44 | 0) {
   label = 3; //@line 27812
   break;
  }
  $68 = HEAP32[$$reg2mem$0 + 24 >> 2] | 0; //@line 27816
  if (($68 | 0) > -1) {
   label = 7; //@line 27819
   break;
  }
  $92 = $$reg2mem$0 + 4 | 0; //@line 27823
  $93 = HEAP8[$92 >> 0] | 0; //@line 27824
  HEAP8[$92 >> 0] = (($93 + 1 & 255) << HEAP32[$8 >> 2] | 0) == 0 ? 1 : ($93 & 255) + 1 & 255; //@line 27833
  $102 = HEAP32[$$reg2mem$0 + 28 >> 2] | 0; //@line 27835
  if ($102 | 0) {
   label = 11; //@line 27840
   break;
  } else {
   $$06790$reg2mem$0$phi = $$reg2mem$0; //@line 27838
   $$reg2mem$0 = $42; //@line 27838
   $$06790$reg2mem$0 = $$06790$reg2mem$0$phi; //@line 27838
  }
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 27846
  FUNCTION_TABLE_vi[$44 & 1023]($$reg2mem$0 + 36 | 0); //@line 27847
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 180; //@line 27850
   $47 = $ReallocAsyncCtx + 4 | 0; //@line 27851
   HEAP32[$47 >> 2] = $$reg2mem$0; //@line 27852
   $48 = $ReallocAsyncCtx + 8 | 0; //@line 27853
   HEAP32[$48 >> 2] = $2; //@line 27854
   $49 = $ReallocAsyncCtx + 12 | 0; //@line 27855
   HEAP32[$49 >> 2] = $4; //@line 27856
   $50 = $ReallocAsyncCtx + 16 | 0; //@line 27857
   HEAP32[$50 >> 2] = $6; //@line 27858
   $51 = $ReallocAsyncCtx + 20 | 0; //@line 27859
   HEAP32[$51 >> 2] = $8; //@line 27860
   $52 = $ReallocAsyncCtx + 24 | 0; //@line 27861
   HEAP32[$52 >> 2] = $10; //@line 27862
   $53 = $ReallocAsyncCtx + 28 | 0; //@line 27863
   HEAP32[$53 >> 2] = $12; //@line 27864
   $54 = $ReallocAsyncCtx + 32 | 0; //@line 27865
   HEAP32[$54 >> 2] = $42; //@line 27866
   $55 = $ReallocAsyncCtx + 36 | 0; //@line 27867
   HEAP32[$55 >> 2] = $$reg2mem10$0; //@line 27868
   $56 = $ReallocAsyncCtx + 40 | 0; //@line 27869
   HEAP32[$56 >> 2] = $20; //@line 27870
   $57 = $ReallocAsyncCtx + 44 | 0; //@line 27871
   HEAP32[$57 >> 2] = $22; //@line 27872
   $58 = $ReallocAsyncCtx + 48 | 0; //@line 27873
   HEAP32[$58 >> 2] = $24; //@line 27874
   $59 = $ReallocAsyncCtx + 52 | 0; //@line 27875
   HEAP32[$59 >> 2] = $26; //@line 27876
   $60 = $ReallocAsyncCtx + 56 | 0; //@line 27877
   HEAP32[$60 >> 2] = $28; //@line 27878
   $61 = $ReallocAsyncCtx + 60 | 0; //@line 27879
   HEAP32[$61 >> 2] = $30; //@line 27880
   $62 = $ReallocAsyncCtx + 64 | 0; //@line 27881
   HEAP32[$62 >> 2] = $32; //@line 27882
   $63 = $ReallocAsyncCtx + 68 | 0; //@line 27883
   $$expand_i1_val = $34 & 1; //@line 27884
   HEAP8[$63 >> 0] = $$expand_i1_val; //@line 27885
   $64 = $ReallocAsyncCtx + 72 | 0; //@line 27886
   HEAP32[$64 >> 2] = $36; //@line 27887
   $65 = $ReallocAsyncCtx + 76 | 0; //@line 27888
   HEAP32[$65 >> 2] = $38; //@line 27889
   $66 = $ReallocAsyncCtx + 80 | 0; //@line 27890
   HEAP32[$66 >> 2] = $40; //@line 27891
   sp = STACKTOP; //@line 27892
   return;
  }
  ___async_unwind = 0; //@line 27895
  HEAP32[$ReallocAsyncCtx >> 2] = 180; //@line 27896
  $47 = $ReallocAsyncCtx + 4 | 0; //@line 27897
  HEAP32[$47 >> 2] = $$reg2mem$0; //@line 27898
  $48 = $ReallocAsyncCtx + 8 | 0; //@line 27899
  HEAP32[$48 >> 2] = $2; //@line 27900
  $49 = $ReallocAsyncCtx + 12 | 0; //@line 27901
  HEAP32[$49 >> 2] = $4; //@line 27902
  $50 = $ReallocAsyncCtx + 16 | 0; //@line 27903
  HEAP32[$50 >> 2] = $6; //@line 27904
  $51 = $ReallocAsyncCtx + 20 | 0; //@line 27905
  HEAP32[$51 >> 2] = $8; //@line 27906
  $52 = $ReallocAsyncCtx + 24 | 0; //@line 27907
  HEAP32[$52 >> 2] = $10; //@line 27908
  $53 = $ReallocAsyncCtx + 28 | 0; //@line 27909
  HEAP32[$53 >> 2] = $12; //@line 27910
  $54 = $ReallocAsyncCtx + 32 | 0; //@line 27911
  HEAP32[$54 >> 2] = $42; //@line 27912
  $55 = $ReallocAsyncCtx + 36 | 0; //@line 27913
  HEAP32[$55 >> 2] = $$reg2mem10$0; //@line 27914
  $56 = $ReallocAsyncCtx + 40 | 0; //@line 27915
  HEAP32[$56 >> 2] = $20; //@line 27916
  $57 = $ReallocAsyncCtx + 44 | 0; //@line 27917
  HEAP32[$57 >> 2] = $22; //@line 27918
  $58 = $ReallocAsyncCtx + 48 | 0; //@line 27919
  HEAP32[$58 >> 2] = $24; //@line 27920
  $59 = $ReallocAsyncCtx + 52 | 0; //@line 27921
  HEAP32[$59 >> 2] = $26; //@line 27922
  $60 = $ReallocAsyncCtx + 56 | 0; //@line 27923
  HEAP32[$60 >> 2] = $28; //@line 27924
  $61 = $ReallocAsyncCtx + 60 | 0; //@line 27925
  HEAP32[$61 >> 2] = $30; //@line 27926
  $62 = $ReallocAsyncCtx + 64 | 0; //@line 27927
  HEAP32[$62 >> 2] = $32; //@line 27928
  $63 = $ReallocAsyncCtx + 68 | 0; //@line 27929
  $$expand_i1_val = $34 & 1; //@line 27930
  HEAP8[$63 >> 0] = $$expand_i1_val; //@line 27931
  $64 = $ReallocAsyncCtx + 72 | 0; //@line 27932
  HEAP32[$64 >> 2] = $36; //@line 27933
  $65 = $ReallocAsyncCtx + 76 | 0; //@line 27934
  HEAP32[$65 >> 2] = $38; //@line 27935
  $66 = $ReallocAsyncCtx + 80 | 0; //@line 27936
  HEAP32[$66 >> 2] = $40; //@line 27937
  sp = STACKTOP; //@line 27938
  return;
 } else if ((label | 0) == 7) {
  $70 = $$reg2mem$0 + 20 | 0; //@line 27942
  HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + $68; //@line 27945
  $73 = _equeue_tick() | 0; //@line 27946
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 27947
  _equeue_enqueue($6, $$reg2mem$0, $73) | 0; //@line 27948
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 181; //@line 27951
   $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 27952
   HEAP32[$74 >> 2] = $2; //@line 27953
   $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 27954
   HEAP32[$75 >> 2] = $4; //@line 27955
   $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 27956
   HEAP32[$76 >> 2] = $6; //@line 27957
   $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 27958
   HEAP32[$77 >> 2] = $8; //@line 27959
   $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 27960
   HEAP32[$78 >> 2] = $10; //@line 27961
   $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 27962
   HEAP32[$79 >> 2] = $12; //@line 27963
   $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 27964
   HEAP32[$80 >> 2] = $42; //@line 27965
   $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 27966
   HEAP32[$81 >> 2] = $24; //@line 27967
   $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 27968
   HEAP32[$82 >> 2] = $26; //@line 27969
   $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 27970
   HEAP32[$83 >> 2] = $30; //@line 27971
   $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 27972
   HEAP32[$84 >> 2] = $20; //@line 27973
   $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 27974
   HEAP32[$85 >> 2] = $22; //@line 27975
   $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 27976
   HEAP32[$86 >> 2] = $28; //@line 27977
   $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 27978
   HEAP32[$87 >> 2] = $32; //@line 27979
   $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 27980
   $$expand_i1_val31 = $34 & 1; //@line 27981
   HEAP8[$88 >> 0] = $$expand_i1_val31; //@line 27982
   $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 27983
   HEAP32[$89 >> 2] = $36; //@line 27984
   $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 27985
   HEAP32[$90 >> 2] = $38; //@line 27986
   $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 27987
   HEAP32[$91 >> 2] = $40; //@line 27988
   sp = STACKTOP; //@line 27989
   return;
  }
  ___async_unwind = 0; //@line 27992
  HEAP32[$ReallocAsyncCtx4 >> 2] = 181; //@line 27993
  $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 27994
  HEAP32[$74 >> 2] = $2; //@line 27995
  $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 27996
  HEAP32[$75 >> 2] = $4; //@line 27997
  $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 27998
  HEAP32[$76 >> 2] = $6; //@line 27999
  $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 28000
  HEAP32[$77 >> 2] = $8; //@line 28001
  $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 28002
  HEAP32[$78 >> 2] = $10; //@line 28003
  $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 28004
  HEAP32[$79 >> 2] = $12; //@line 28005
  $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 28006
  HEAP32[$80 >> 2] = $42; //@line 28007
  $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 28008
  HEAP32[$81 >> 2] = $24; //@line 28009
  $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 28010
  HEAP32[$82 >> 2] = $26; //@line 28011
  $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 28012
  HEAP32[$83 >> 2] = $30; //@line 28013
  $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 28014
  HEAP32[$84 >> 2] = $20; //@line 28015
  $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 28016
  HEAP32[$85 >> 2] = $22; //@line 28017
  $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 28018
  HEAP32[$86 >> 2] = $28; //@line 28019
  $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 28020
  HEAP32[$87 >> 2] = $32; //@line 28021
  $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 28022
  $$expand_i1_val31 = $34 & 1; //@line 28023
  HEAP8[$88 >> 0] = $$expand_i1_val31; //@line 28024
  $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 28025
  HEAP32[$89 >> 2] = $36; //@line 28026
  $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 28027
  HEAP32[$90 >> 2] = $38; //@line 28028
  $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 28029
  HEAP32[$91 >> 2] = $40; //@line 28030
  sp = STACKTOP; //@line 28031
  return;
 } else if ((label | 0) == 11) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 28036
  FUNCTION_TABLE_vi[$102 & 1023]($$reg2mem$0 + 36 | 0); //@line 28037
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 182; //@line 28040
   $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 28041
   HEAP32[$105 >> 2] = $2; //@line 28042
   $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 28043
   HEAP32[$106 >> 2] = $4; //@line 28044
   $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 28045
   HEAP32[$107 >> 2] = $6; //@line 28046
   $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 28047
   HEAP32[$108 >> 2] = $8; //@line 28048
   $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 28049
   HEAP32[$109 >> 2] = $10; //@line 28050
   $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 28051
   HEAP32[$110 >> 2] = $12; //@line 28052
   $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 28053
   HEAP32[$111 >> 2] = $42; //@line 28054
   $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 28055
   HEAP32[$112 >> 2] = $$reg2mem10$0; //@line 28056
   $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 28057
   HEAP32[$113 >> 2] = $$reg2mem$0; //@line 28058
   $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 28059
   HEAP32[$114 >> 2] = $20; //@line 28060
   $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 28061
   HEAP32[$115 >> 2] = $22; //@line 28062
   $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 28063
   HEAP32[$116 >> 2] = $24; //@line 28064
   $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 28065
   HEAP32[$117 >> 2] = $26; //@line 28066
   $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 28067
   HEAP32[$118 >> 2] = $28; //@line 28068
   $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 28069
   HEAP32[$119 >> 2] = $30; //@line 28070
   $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 28071
   HEAP32[$120 >> 2] = $32; //@line 28072
   $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 28073
   $$expand_i1_val33 = $34 & 1; //@line 28074
   HEAP8[$121 >> 0] = $$expand_i1_val33; //@line 28075
   $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 28076
   HEAP32[$122 >> 2] = $36; //@line 28077
   $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 28078
   HEAP32[$123 >> 2] = $38; //@line 28079
   $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 28080
   HEAP32[$124 >> 2] = $40; //@line 28081
   sp = STACKTOP; //@line 28082
   return;
  }
  ___async_unwind = 0; //@line 28085
  HEAP32[$ReallocAsyncCtx2 >> 2] = 182; //@line 28086
  $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 28087
  HEAP32[$105 >> 2] = $2; //@line 28088
  $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 28089
  HEAP32[$106 >> 2] = $4; //@line 28090
  $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 28091
  HEAP32[$107 >> 2] = $6; //@line 28092
  $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 28093
  HEAP32[$108 >> 2] = $8; //@line 28094
  $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 28095
  HEAP32[$109 >> 2] = $10; //@line 28096
  $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 28097
  HEAP32[$110 >> 2] = $12; //@line 28098
  $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 28099
  HEAP32[$111 >> 2] = $42; //@line 28100
  $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 28101
  HEAP32[$112 >> 2] = $$reg2mem10$0; //@line 28102
  $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 28103
  HEAP32[$113 >> 2] = $$reg2mem$0; //@line 28104
  $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 28105
  HEAP32[$114 >> 2] = $20; //@line 28106
  $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 28107
  HEAP32[$115 >> 2] = $22; //@line 28108
  $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 28109
  HEAP32[$116 >> 2] = $24; //@line 28110
  $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 28111
  HEAP32[$117 >> 2] = $26; //@line 28112
  $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 28113
  HEAP32[$118 >> 2] = $28; //@line 28114
  $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 28115
  HEAP32[$119 >> 2] = $30; //@line 28116
  $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 28117
  HEAP32[$120 >> 2] = $32; //@line 28118
  $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 28119
  $$expand_i1_val33 = $34 & 1; //@line 28120
  HEAP8[$121 >> 0] = $$expand_i1_val33; //@line 28121
  $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 28122
  HEAP32[$122 >> 2] = $36; //@line 28123
  $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 28124
  HEAP32[$123 >> 2] = $38; //@line 28125
  $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 28126
  HEAP32[$124 >> 2] = $40; //@line 28127
  sp = STACKTOP; //@line 28128
  return;
 } else if ((label | 0) == 24) {
  $140 = _equeue_tick() | 0; //@line 28132
  if ($34) {
   $141 = $38 - $140 | 0; //@line 28134
   if (($141 | 0) < 1) {
    $143 = $6 + 40 | 0; //@line 28137
    if (HEAP32[$143 >> 2] | 0) {
     _equeue_mutex_lock($26); //@line 28141
     $146 = HEAP32[$143 >> 2] | 0; //@line 28142
     if ($146 | 0) {
      $148 = HEAP32[$32 >> 2] | 0; //@line 28145
      if ($148 | 0) {
       $151 = HEAP32[$6 + 44 >> 2] | 0; //@line 28149
       $154 = (HEAP32[$148 + 20 >> 2] | 0) - $140 | 0; //@line 28152
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 28156
       FUNCTION_TABLE_vii[$146 & 31]($151, $154 & ~($154 >> 31)); //@line 28157
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 183; //@line 28160
        $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 28161
        HEAP32[$158 >> 2] = $24; //@line 28162
        $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 28163
        HEAP32[$159 >> 2] = $26; //@line 28164
        $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 28165
        HEAP32[$160 >> 2] = $30; //@line 28166
        sp = STACKTOP; //@line 28167
        return;
       }
       ___async_unwind = 0; //@line 28170
       HEAP32[$ReallocAsyncCtx3 >> 2] = 183; //@line 28171
       $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 28172
       HEAP32[$158 >> 2] = $24; //@line 28173
       $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 28174
       HEAP32[$159 >> 2] = $26; //@line 28175
       $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 28176
       HEAP32[$160 >> 2] = $30; //@line 28177
       sp = STACKTOP; //@line 28178
       return;
      }
     }
     HEAP8[$24 >> 0] = 1; //@line 28182
     _equeue_mutex_unlock($26); //@line 28183
    }
    HEAP8[$30 >> 0] = 0; //@line 28185
    return;
   } else {
    $$065 = $141; //@line 28188
   }
  } else {
   $$065 = -1; //@line 28191
  }
  _equeue_mutex_lock($26); //@line 28193
  $161 = HEAP32[$32 >> 2] | 0; //@line 28194
  if (!$161) {
   $$2 = $$065; //@line 28197
  } else {
   $165 = (HEAP32[$161 + 20 >> 2] | 0) - $140 | 0; //@line 28201
   $168 = $165 & ~($165 >> 31); //@line 28204
   $$2 = $168 >>> 0 < $$065 >>> 0 ? $168 : $$065; //@line 28207
  }
  _equeue_mutex_unlock($26); //@line 28209
  _equeue_sema_wait($40, $$2) | 0; //@line 28210
  do {
   if (HEAP8[$30 >> 0] | 0) {
    _equeue_mutex_lock($26); //@line 28215
    if (!(HEAP8[$30 >> 0] | 0)) {
     _equeue_mutex_unlock($26); //@line 28219
     break;
    }
    HEAP8[$30 >> 0] = 0; //@line 28222
    _equeue_mutex_unlock($26); //@line 28223
    return;
   }
  } while (0);
  $174 = _equeue_tick() | 0; //@line 28227
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 28228
  _wait_ms(20); //@line 28229
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 184; //@line 28232
   $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 28233
   HEAP32[$175 >> 2] = $2; //@line 28234
   $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 28235
   HEAP32[$176 >> 2] = $4; //@line 28236
   $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 28237
   HEAP32[$177 >> 2] = $6; //@line 28238
   $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 28239
   HEAP32[$178 >> 2] = $8; //@line 28240
   $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 28241
   HEAP32[$179 >> 2] = $10; //@line 28242
   $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 28243
   HEAP32[$180 >> 2] = $12; //@line 28244
   $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 28245
   HEAP32[$181 >> 2] = $24; //@line 28246
   $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 28247
   HEAP32[$182 >> 2] = $26; //@line 28248
   $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 28249
   HEAP32[$183 >> 2] = $30; //@line 28250
   $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 28251
   HEAP32[$184 >> 2] = $20; //@line 28252
   $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 28253
   HEAP32[$185 >> 2] = $22; //@line 28254
   $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 28255
   HEAP32[$186 >> 2] = $28; //@line 28256
   $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 28257
   HEAP32[$187 >> 2] = $32; //@line 28258
   $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 28259
   $$expand_i1_val35 = $34 & 1; //@line 28260
   HEAP8[$188 >> 0] = $$expand_i1_val35; //@line 28261
   $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 28262
   HEAP32[$189 >> 2] = $36; //@line 28263
   $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 28264
   HEAP32[$190 >> 2] = $38; //@line 28265
   $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 28266
   HEAP32[$191 >> 2] = $40; //@line 28267
   $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 28268
   HEAP32[$192 >> 2] = $174; //@line 28269
   sp = STACKTOP; //@line 28270
   return;
  }
  ___async_unwind = 0; //@line 28273
  HEAP32[$ReallocAsyncCtx5 >> 2] = 184; //@line 28274
  $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 28275
  HEAP32[$175 >> 2] = $2; //@line 28276
  $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 28277
  HEAP32[$176 >> 2] = $4; //@line 28278
  $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 28279
  HEAP32[$177 >> 2] = $6; //@line 28280
  $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 28281
  HEAP32[$178 >> 2] = $8; //@line 28282
  $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 28283
  HEAP32[$179 >> 2] = $10; //@line 28284
  $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 28285
  HEAP32[$180 >> 2] = $12; //@line 28286
  $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 28287
  HEAP32[$181 >> 2] = $24; //@line 28288
  $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 28289
  HEAP32[$182 >> 2] = $26; //@line 28290
  $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 28291
  HEAP32[$183 >> 2] = $30; //@line 28292
  $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 28293
  HEAP32[$184 >> 2] = $20; //@line 28294
  $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 28295
  HEAP32[$185 >> 2] = $22; //@line 28296
  $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 28297
  HEAP32[$186 >> 2] = $28; //@line 28298
  $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 28299
  HEAP32[$187 >> 2] = $32; //@line 28300
  $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 28301
  $$expand_i1_val35 = $34 & 1; //@line 28302
  HEAP8[$188 >> 0] = $$expand_i1_val35; //@line 28303
  $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 28304
  HEAP32[$189 >> 2] = $36; //@line 28305
  $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 28306
  HEAP32[$190 >> 2] = $38; //@line 28307
  $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 28308
  HEAP32[$191 >> 2] = $40; //@line 28309
  $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 28310
  HEAP32[$192 >> 2] = $174; //@line 28311
  sp = STACKTOP; //@line 28312
  return;
 }
}
function _equeue_dispatch__async_cb_106($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$065 = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val16 = 0, $$reg2mem$0 = 0, $$sink$in$i$i = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $136 = 0, $137 = 0, $139 = 0, $142 = 0, $144 = 0, $147 = 0, $150 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $164 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $66 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 28344
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28346
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28348
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28350
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28352
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28354
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28356
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28360
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28362
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28364
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28366
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28368
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28370
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28372
 $30 = HEAP8[$0 + 60 >> 0] & 1; //@line 28375
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 28377
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 28379
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 28381
 $$reg2mem$0 = HEAP32[$0 + 28 >> 2] | 0; //@line 28382
 while (1) {
  if (!$$reg2mem$0) {
   label = 24; //@line 28386
   break;
  }
  $37 = $$reg2mem$0 + 8 | 0; //@line 28389
  $38 = HEAP32[$37 >> 2] | 0; //@line 28390
  $40 = HEAP32[$$reg2mem$0 + 32 >> 2] | 0; //@line 28392
  if ($40 | 0) {
   label = 3; //@line 28395
   break;
  }
  $64 = HEAP32[$$reg2mem$0 + 24 >> 2] | 0; //@line 28399
  if (($64 | 0) > -1) {
   label = 7; //@line 28402
   break;
  }
  $88 = $$reg2mem$0 + 4 | 0; //@line 28406
  $89 = HEAP8[$88 >> 0] | 0; //@line 28407
  HEAP8[$88 >> 0] = (($89 + 1 & 255) << HEAP32[$8 >> 2] | 0) == 0 ? 1 : ($89 & 255) + 1 & 255; //@line 28416
  $98 = HEAP32[$$reg2mem$0 + 28 >> 2] | 0; //@line 28418
  if ($98 | 0) {
   label = 12; //@line 28421
   break;
  }
  _equeue_mutex_lock($2); //@line 28424
  $121 = HEAP32[$4 >> 2] | 0; //@line 28425
  L8 : do {
   if (!$121) {
    $$02329$i$i = $4; //@line 28429
    label = 21; //@line 28430
   } else {
    $123 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 28432
    $$025$i$i = $4; //@line 28433
    $125 = $121; //@line 28433
    while (1) {
     $124 = HEAP32[$125 >> 2] | 0; //@line 28435
     if ($124 >>> 0 >= $123 >>> 0) {
      break;
     }
     $127 = $125 + 8 | 0; //@line 28440
     $128 = HEAP32[$127 >> 2] | 0; //@line 28441
     if (!$128) {
      $$02329$i$i = $127; //@line 28444
      label = 21; //@line 28445
      break L8;
     } else {
      $$025$i$i = $127; //@line 28448
      $125 = $128; //@line 28448
     }
    }
    if (($124 | 0) == ($123 | 0)) {
     HEAP32[$$reg2mem$0 + 12 >> 2] = $125; //@line 28454
     $$02330$i$i = $$025$i$i; //@line 28457
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 28457
    } else {
     $$02329$i$i = $$025$i$i; //@line 28459
     label = 21; //@line 28460
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 28465
   HEAP32[$$reg2mem$0 + 12 >> 2] = 0; //@line 28467
   $$02330$i$i = $$02329$i$i; //@line 28468
   $$sink$in$i$i = $$02329$i$i; //@line 28468
  }
  HEAP32[$37 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 28471
  HEAP32[$$02330$i$i >> 2] = $$reg2mem$0; //@line 28472
  _equeue_mutex_unlock($2); //@line 28473
  $$reg2mem$0 = $38; //@line 28474
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 28478
  FUNCTION_TABLE_vi[$40 & 1023]($$reg2mem$0 + 36 | 0); //@line 28479
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 180; //@line 28482
   $43 = $ReallocAsyncCtx + 4 | 0; //@line 28483
   HEAP32[$43 >> 2] = $$reg2mem$0; //@line 28484
   $44 = $ReallocAsyncCtx + 8 | 0; //@line 28485
   HEAP32[$44 >> 2] = $2; //@line 28486
   $45 = $ReallocAsyncCtx + 12 | 0; //@line 28487
   HEAP32[$45 >> 2] = $4; //@line 28488
   $46 = $ReallocAsyncCtx + 16 | 0; //@line 28489
   HEAP32[$46 >> 2] = $6; //@line 28490
   $47 = $ReallocAsyncCtx + 20 | 0; //@line 28491
   HEAP32[$47 >> 2] = $8; //@line 28492
   $48 = $ReallocAsyncCtx + 24 | 0; //@line 28493
   HEAP32[$48 >> 2] = $10; //@line 28494
   $49 = $ReallocAsyncCtx + 28 | 0; //@line 28495
   HEAP32[$49 >> 2] = $12; //@line 28496
   $50 = $ReallocAsyncCtx + 32 | 0; //@line 28497
   HEAP32[$50 >> 2] = $38; //@line 28498
   $51 = $ReallocAsyncCtx + 36 | 0; //@line 28499
   HEAP32[$51 >> 2] = $37; //@line 28500
   $52 = $ReallocAsyncCtx + 40 | 0; //@line 28501
   HEAP32[$52 >> 2] = $22; //@line 28502
   $53 = $ReallocAsyncCtx + 44 | 0; //@line 28503
   HEAP32[$53 >> 2] = $24; //@line 28504
   $54 = $ReallocAsyncCtx + 48 | 0; //@line 28505
   HEAP32[$54 >> 2] = $16; //@line 28506
   $55 = $ReallocAsyncCtx + 52 | 0; //@line 28507
   HEAP32[$55 >> 2] = $18; //@line 28508
   $56 = $ReallocAsyncCtx + 56 | 0; //@line 28509
   HEAP32[$56 >> 2] = $26; //@line 28510
   $57 = $ReallocAsyncCtx + 60 | 0; //@line 28511
   HEAP32[$57 >> 2] = $20; //@line 28512
   $58 = $ReallocAsyncCtx + 64 | 0; //@line 28513
   HEAP32[$58 >> 2] = $28; //@line 28514
   $59 = $ReallocAsyncCtx + 68 | 0; //@line 28515
   $$expand_i1_val = $30 & 1; //@line 28516
   HEAP8[$59 >> 0] = $$expand_i1_val; //@line 28517
   $60 = $ReallocAsyncCtx + 72 | 0; //@line 28518
   HEAP32[$60 >> 2] = $32; //@line 28519
   $61 = $ReallocAsyncCtx + 76 | 0; //@line 28520
   HEAP32[$61 >> 2] = $34; //@line 28521
   $62 = $ReallocAsyncCtx + 80 | 0; //@line 28522
   HEAP32[$62 >> 2] = $36; //@line 28523
   sp = STACKTOP; //@line 28524
   return;
  }
  ___async_unwind = 0; //@line 28527
  HEAP32[$ReallocAsyncCtx >> 2] = 180; //@line 28528
  $43 = $ReallocAsyncCtx + 4 | 0; //@line 28529
  HEAP32[$43 >> 2] = $$reg2mem$0; //@line 28530
  $44 = $ReallocAsyncCtx + 8 | 0; //@line 28531
  HEAP32[$44 >> 2] = $2; //@line 28532
  $45 = $ReallocAsyncCtx + 12 | 0; //@line 28533
  HEAP32[$45 >> 2] = $4; //@line 28534
  $46 = $ReallocAsyncCtx + 16 | 0; //@line 28535
  HEAP32[$46 >> 2] = $6; //@line 28536
  $47 = $ReallocAsyncCtx + 20 | 0; //@line 28537
  HEAP32[$47 >> 2] = $8; //@line 28538
  $48 = $ReallocAsyncCtx + 24 | 0; //@line 28539
  HEAP32[$48 >> 2] = $10; //@line 28540
  $49 = $ReallocAsyncCtx + 28 | 0; //@line 28541
  HEAP32[$49 >> 2] = $12; //@line 28542
  $50 = $ReallocAsyncCtx + 32 | 0; //@line 28543
  HEAP32[$50 >> 2] = $38; //@line 28544
  $51 = $ReallocAsyncCtx + 36 | 0; //@line 28545
  HEAP32[$51 >> 2] = $37; //@line 28546
  $52 = $ReallocAsyncCtx + 40 | 0; //@line 28547
  HEAP32[$52 >> 2] = $22; //@line 28548
  $53 = $ReallocAsyncCtx + 44 | 0; //@line 28549
  HEAP32[$53 >> 2] = $24; //@line 28550
  $54 = $ReallocAsyncCtx + 48 | 0; //@line 28551
  HEAP32[$54 >> 2] = $16; //@line 28552
  $55 = $ReallocAsyncCtx + 52 | 0; //@line 28553
  HEAP32[$55 >> 2] = $18; //@line 28554
  $56 = $ReallocAsyncCtx + 56 | 0; //@line 28555
  HEAP32[$56 >> 2] = $26; //@line 28556
  $57 = $ReallocAsyncCtx + 60 | 0; //@line 28557
  HEAP32[$57 >> 2] = $20; //@line 28558
  $58 = $ReallocAsyncCtx + 64 | 0; //@line 28559
  HEAP32[$58 >> 2] = $28; //@line 28560
  $59 = $ReallocAsyncCtx + 68 | 0; //@line 28561
  $$expand_i1_val = $30 & 1; //@line 28562
  HEAP8[$59 >> 0] = $$expand_i1_val; //@line 28563
  $60 = $ReallocAsyncCtx + 72 | 0; //@line 28564
  HEAP32[$60 >> 2] = $32; //@line 28565
  $61 = $ReallocAsyncCtx + 76 | 0; //@line 28566
  HEAP32[$61 >> 2] = $34; //@line 28567
  $62 = $ReallocAsyncCtx + 80 | 0; //@line 28568
  HEAP32[$62 >> 2] = $36; //@line 28569
  sp = STACKTOP; //@line 28570
  return;
 } else if ((label | 0) == 7) {
  $66 = $$reg2mem$0 + 20 | 0; //@line 28574
  HEAP32[$66 >> 2] = (HEAP32[$66 >> 2] | 0) + $64; //@line 28577
  $69 = _equeue_tick() | 0; //@line 28578
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 28579
  _equeue_enqueue($6, $$reg2mem$0, $69) | 0; //@line 28580
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 181; //@line 28583
   $70 = $ReallocAsyncCtx4 + 4 | 0; //@line 28584
   HEAP32[$70 >> 2] = $2; //@line 28585
   $71 = $ReallocAsyncCtx4 + 8 | 0; //@line 28586
   HEAP32[$71 >> 2] = $4; //@line 28587
   $72 = $ReallocAsyncCtx4 + 12 | 0; //@line 28588
   HEAP32[$72 >> 2] = $6; //@line 28589
   $73 = $ReallocAsyncCtx4 + 16 | 0; //@line 28590
   HEAP32[$73 >> 2] = $8; //@line 28591
   $74 = $ReallocAsyncCtx4 + 20 | 0; //@line 28592
   HEAP32[$74 >> 2] = $10; //@line 28593
   $75 = $ReallocAsyncCtx4 + 24 | 0; //@line 28594
   HEAP32[$75 >> 2] = $12; //@line 28595
   $76 = $ReallocAsyncCtx4 + 28 | 0; //@line 28596
   HEAP32[$76 >> 2] = $38; //@line 28597
   $77 = $ReallocAsyncCtx4 + 32 | 0; //@line 28598
   HEAP32[$77 >> 2] = $16; //@line 28599
   $78 = $ReallocAsyncCtx4 + 36 | 0; //@line 28600
   HEAP32[$78 >> 2] = $18; //@line 28601
   $79 = $ReallocAsyncCtx4 + 40 | 0; //@line 28602
   HEAP32[$79 >> 2] = $20; //@line 28603
   $80 = $ReallocAsyncCtx4 + 44 | 0; //@line 28604
   HEAP32[$80 >> 2] = $22; //@line 28605
   $81 = $ReallocAsyncCtx4 + 48 | 0; //@line 28606
   HEAP32[$81 >> 2] = $24; //@line 28607
   $82 = $ReallocAsyncCtx4 + 52 | 0; //@line 28608
   HEAP32[$82 >> 2] = $26; //@line 28609
   $83 = $ReallocAsyncCtx4 + 56 | 0; //@line 28610
   HEAP32[$83 >> 2] = $28; //@line 28611
   $84 = $ReallocAsyncCtx4 + 60 | 0; //@line 28612
   $$expand_i1_val12 = $30 & 1; //@line 28613
   HEAP8[$84 >> 0] = $$expand_i1_val12; //@line 28614
   $85 = $ReallocAsyncCtx4 + 64 | 0; //@line 28615
   HEAP32[$85 >> 2] = $32; //@line 28616
   $86 = $ReallocAsyncCtx4 + 68 | 0; //@line 28617
   HEAP32[$86 >> 2] = $34; //@line 28618
   $87 = $ReallocAsyncCtx4 + 72 | 0; //@line 28619
   HEAP32[$87 >> 2] = $36; //@line 28620
   sp = STACKTOP; //@line 28621
   return;
  }
  ___async_unwind = 0; //@line 28624
  HEAP32[$ReallocAsyncCtx4 >> 2] = 181; //@line 28625
  $70 = $ReallocAsyncCtx4 + 4 | 0; //@line 28626
  HEAP32[$70 >> 2] = $2; //@line 28627
  $71 = $ReallocAsyncCtx4 + 8 | 0; //@line 28628
  HEAP32[$71 >> 2] = $4; //@line 28629
  $72 = $ReallocAsyncCtx4 + 12 | 0; //@line 28630
  HEAP32[$72 >> 2] = $6; //@line 28631
  $73 = $ReallocAsyncCtx4 + 16 | 0; //@line 28632
  HEAP32[$73 >> 2] = $8; //@line 28633
  $74 = $ReallocAsyncCtx4 + 20 | 0; //@line 28634
  HEAP32[$74 >> 2] = $10; //@line 28635
  $75 = $ReallocAsyncCtx4 + 24 | 0; //@line 28636
  HEAP32[$75 >> 2] = $12; //@line 28637
  $76 = $ReallocAsyncCtx4 + 28 | 0; //@line 28638
  HEAP32[$76 >> 2] = $38; //@line 28639
  $77 = $ReallocAsyncCtx4 + 32 | 0; //@line 28640
  HEAP32[$77 >> 2] = $16; //@line 28641
  $78 = $ReallocAsyncCtx4 + 36 | 0; //@line 28642
  HEAP32[$78 >> 2] = $18; //@line 28643
  $79 = $ReallocAsyncCtx4 + 40 | 0; //@line 28644
  HEAP32[$79 >> 2] = $20; //@line 28645
  $80 = $ReallocAsyncCtx4 + 44 | 0; //@line 28646
  HEAP32[$80 >> 2] = $22; //@line 28647
  $81 = $ReallocAsyncCtx4 + 48 | 0; //@line 28648
  HEAP32[$81 >> 2] = $24; //@line 28649
  $82 = $ReallocAsyncCtx4 + 52 | 0; //@line 28650
  HEAP32[$82 >> 2] = $26; //@line 28651
  $83 = $ReallocAsyncCtx4 + 56 | 0; //@line 28652
  HEAP32[$83 >> 2] = $28; //@line 28653
  $84 = $ReallocAsyncCtx4 + 60 | 0; //@line 28654
  $$expand_i1_val12 = $30 & 1; //@line 28655
  HEAP8[$84 >> 0] = $$expand_i1_val12; //@line 28656
  $85 = $ReallocAsyncCtx4 + 64 | 0; //@line 28657
  HEAP32[$85 >> 2] = $32; //@line 28658
  $86 = $ReallocAsyncCtx4 + 68 | 0; //@line 28659
  HEAP32[$86 >> 2] = $34; //@line 28660
  $87 = $ReallocAsyncCtx4 + 72 | 0; //@line 28661
  HEAP32[$87 >> 2] = $36; //@line 28662
  sp = STACKTOP; //@line 28663
  return;
 } else if ((label | 0) == 12) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 28668
  FUNCTION_TABLE_vi[$98 & 1023]($$reg2mem$0 + 36 | 0); //@line 28669
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 182; //@line 28672
   $101 = $ReallocAsyncCtx2 + 4 | 0; //@line 28673
   HEAP32[$101 >> 2] = $2; //@line 28674
   $102 = $ReallocAsyncCtx2 + 8 | 0; //@line 28675
   HEAP32[$102 >> 2] = $4; //@line 28676
   $103 = $ReallocAsyncCtx2 + 12 | 0; //@line 28677
   HEAP32[$103 >> 2] = $6; //@line 28678
   $104 = $ReallocAsyncCtx2 + 16 | 0; //@line 28679
   HEAP32[$104 >> 2] = $8; //@line 28680
   $105 = $ReallocAsyncCtx2 + 20 | 0; //@line 28681
   HEAP32[$105 >> 2] = $10; //@line 28682
   $106 = $ReallocAsyncCtx2 + 24 | 0; //@line 28683
   HEAP32[$106 >> 2] = $12; //@line 28684
   $107 = $ReallocAsyncCtx2 + 28 | 0; //@line 28685
   HEAP32[$107 >> 2] = $38; //@line 28686
   $108 = $ReallocAsyncCtx2 + 32 | 0; //@line 28687
   HEAP32[$108 >> 2] = $37; //@line 28688
   $109 = $ReallocAsyncCtx2 + 36 | 0; //@line 28689
   HEAP32[$109 >> 2] = $$reg2mem$0; //@line 28690
   $110 = $ReallocAsyncCtx2 + 40 | 0; //@line 28691
   HEAP32[$110 >> 2] = $22; //@line 28692
   $111 = $ReallocAsyncCtx2 + 44 | 0; //@line 28693
   HEAP32[$111 >> 2] = $24; //@line 28694
   $112 = $ReallocAsyncCtx2 + 48 | 0; //@line 28695
   HEAP32[$112 >> 2] = $16; //@line 28696
   $113 = $ReallocAsyncCtx2 + 52 | 0; //@line 28697
   HEAP32[$113 >> 2] = $18; //@line 28698
   $114 = $ReallocAsyncCtx2 + 56 | 0; //@line 28699
   HEAP32[$114 >> 2] = $26; //@line 28700
   $115 = $ReallocAsyncCtx2 + 60 | 0; //@line 28701
   HEAP32[$115 >> 2] = $20; //@line 28702
   $116 = $ReallocAsyncCtx2 + 64 | 0; //@line 28703
   HEAP32[$116 >> 2] = $28; //@line 28704
   $117 = $ReallocAsyncCtx2 + 68 | 0; //@line 28705
   $$expand_i1_val14 = $30 & 1; //@line 28706
   HEAP8[$117 >> 0] = $$expand_i1_val14; //@line 28707
   $118 = $ReallocAsyncCtx2 + 72 | 0; //@line 28708
   HEAP32[$118 >> 2] = $32; //@line 28709
   $119 = $ReallocAsyncCtx2 + 76 | 0; //@line 28710
   HEAP32[$119 >> 2] = $34; //@line 28711
   $120 = $ReallocAsyncCtx2 + 80 | 0; //@line 28712
   HEAP32[$120 >> 2] = $36; //@line 28713
   sp = STACKTOP; //@line 28714
   return;
  }
  ___async_unwind = 0; //@line 28717
  HEAP32[$ReallocAsyncCtx2 >> 2] = 182; //@line 28718
  $101 = $ReallocAsyncCtx2 + 4 | 0; //@line 28719
  HEAP32[$101 >> 2] = $2; //@line 28720
  $102 = $ReallocAsyncCtx2 + 8 | 0; //@line 28721
  HEAP32[$102 >> 2] = $4; //@line 28722
  $103 = $ReallocAsyncCtx2 + 12 | 0; //@line 28723
  HEAP32[$103 >> 2] = $6; //@line 28724
  $104 = $ReallocAsyncCtx2 + 16 | 0; //@line 28725
  HEAP32[$104 >> 2] = $8; //@line 28726
  $105 = $ReallocAsyncCtx2 + 20 | 0; //@line 28727
  HEAP32[$105 >> 2] = $10; //@line 28728
  $106 = $ReallocAsyncCtx2 + 24 | 0; //@line 28729
  HEAP32[$106 >> 2] = $12; //@line 28730
  $107 = $ReallocAsyncCtx2 + 28 | 0; //@line 28731
  HEAP32[$107 >> 2] = $38; //@line 28732
  $108 = $ReallocAsyncCtx2 + 32 | 0; //@line 28733
  HEAP32[$108 >> 2] = $37; //@line 28734
  $109 = $ReallocAsyncCtx2 + 36 | 0; //@line 28735
  HEAP32[$109 >> 2] = $$reg2mem$0; //@line 28736
  $110 = $ReallocAsyncCtx2 + 40 | 0; //@line 28737
  HEAP32[$110 >> 2] = $22; //@line 28738
  $111 = $ReallocAsyncCtx2 + 44 | 0; //@line 28739
  HEAP32[$111 >> 2] = $24; //@line 28740
  $112 = $ReallocAsyncCtx2 + 48 | 0; //@line 28741
  HEAP32[$112 >> 2] = $16; //@line 28742
  $113 = $ReallocAsyncCtx2 + 52 | 0; //@line 28743
  HEAP32[$113 >> 2] = $18; //@line 28744
  $114 = $ReallocAsyncCtx2 + 56 | 0; //@line 28745
  HEAP32[$114 >> 2] = $26; //@line 28746
  $115 = $ReallocAsyncCtx2 + 60 | 0; //@line 28747
  HEAP32[$115 >> 2] = $20; //@line 28748
  $116 = $ReallocAsyncCtx2 + 64 | 0; //@line 28749
  HEAP32[$116 >> 2] = $28; //@line 28750
  $117 = $ReallocAsyncCtx2 + 68 | 0; //@line 28751
  $$expand_i1_val14 = $30 & 1; //@line 28752
  HEAP8[$117 >> 0] = $$expand_i1_val14; //@line 28753
  $118 = $ReallocAsyncCtx2 + 72 | 0; //@line 28754
  HEAP32[$118 >> 2] = $32; //@line 28755
  $119 = $ReallocAsyncCtx2 + 76 | 0; //@line 28756
  HEAP32[$119 >> 2] = $34; //@line 28757
  $120 = $ReallocAsyncCtx2 + 80 | 0; //@line 28758
  HEAP32[$120 >> 2] = $36; //@line 28759
  sp = STACKTOP; //@line 28760
  return;
 } else if ((label | 0) == 24) {
  $136 = _equeue_tick() | 0; //@line 28764
  if ($30) {
   $137 = $34 - $136 | 0; //@line 28766
   if (($137 | 0) < 1) {
    $139 = $6 + 40 | 0; //@line 28769
    if (HEAP32[$139 >> 2] | 0) {
     _equeue_mutex_lock($18); //@line 28773
     $142 = HEAP32[$139 >> 2] | 0; //@line 28774
     if ($142 | 0) {
      $144 = HEAP32[$28 >> 2] | 0; //@line 28777
      if ($144 | 0) {
       $147 = HEAP32[$6 + 44 >> 2] | 0; //@line 28781
       $150 = (HEAP32[$144 + 20 >> 2] | 0) - $136 | 0; //@line 28784
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 28788
       FUNCTION_TABLE_vii[$142 & 31]($147, $150 & ~($150 >> 31)); //@line 28789
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 183; //@line 28792
        $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 28793
        HEAP32[$154 >> 2] = $16; //@line 28794
        $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 28795
        HEAP32[$155 >> 2] = $18; //@line 28796
        $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 28797
        HEAP32[$156 >> 2] = $20; //@line 28798
        sp = STACKTOP; //@line 28799
        return;
       }
       ___async_unwind = 0; //@line 28802
       HEAP32[$ReallocAsyncCtx3 >> 2] = 183; //@line 28803
       $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 28804
       HEAP32[$154 >> 2] = $16; //@line 28805
       $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 28806
       HEAP32[$155 >> 2] = $18; //@line 28807
       $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 28808
       HEAP32[$156 >> 2] = $20; //@line 28809
       sp = STACKTOP; //@line 28810
       return;
      }
     }
     HEAP8[$16 >> 0] = 1; //@line 28814
     _equeue_mutex_unlock($18); //@line 28815
    }
    HEAP8[$20 >> 0] = 0; //@line 28817
    return;
   } else {
    $$065 = $137; //@line 28820
   }
  } else {
   $$065 = -1; //@line 28823
  }
  _equeue_mutex_lock($18); //@line 28825
  $157 = HEAP32[$28 >> 2] | 0; //@line 28826
  if (!$157) {
   $$2 = $$065; //@line 28829
  } else {
   $161 = (HEAP32[$157 + 20 >> 2] | 0) - $136 | 0; //@line 28833
   $164 = $161 & ~($161 >> 31); //@line 28836
   $$2 = $164 >>> 0 < $$065 >>> 0 ? $164 : $$065; //@line 28839
  }
  _equeue_mutex_unlock($18); //@line 28841
  _equeue_sema_wait($36, $$2) | 0; //@line 28842
  do {
   if (HEAP8[$20 >> 0] | 0) {
    _equeue_mutex_lock($18); //@line 28847
    if (!(HEAP8[$20 >> 0] | 0)) {
     _equeue_mutex_unlock($18); //@line 28851
     break;
    }
    HEAP8[$20 >> 0] = 0; //@line 28854
    _equeue_mutex_unlock($18); //@line 28855
    return;
   }
  } while (0);
  $170 = _equeue_tick() | 0; //@line 28859
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 28860
  _wait_ms(20); //@line 28861
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 184; //@line 28864
   $171 = $ReallocAsyncCtx5 + 4 | 0; //@line 28865
   HEAP32[$171 >> 2] = $2; //@line 28866
   $172 = $ReallocAsyncCtx5 + 8 | 0; //@line 28867
   HEAP32[$172 >> 2] = $4; //@line 28868
   $173 = $ReallocAsyncCtx5 + 12 | 0; //@line 28869
   HEAP32[$173 >> 2] = $6; //@line 28870
   $174 = $ReallocAsyncCtx5 + 16 | 0; //@line 28871
   HEAP32[$174 >> 2] = $8; //@line 28872
   $175 = $ReallocAsyncCtx5 + 20 | 0; //@line 28873
   HEAP32[$175 >> 2] = $10; //@line 28874
   $176 = $ReallocAsyncCtx5 + 24 | 0; //@line 28875
   HEAP32[$176 >> 2] = $12; //@line 28876
   $177 = $ReallocAsyncCtx5 + 28 | 0; //@line 28877
   HEAP32[$177 >> 2] = $16; //@line 28878
   $178 = $ReallocAsyncCtx5 + 32 | 0; //@line 28879
   HEAP32[$178 >> 2] = $18; //@line 28880
   $179 = $ReallocAsyncCtx5 + 36 | 0; //@line 28881
   HEAP32[$179 >> 2] = $20; //@line 28882
   $180 = $ReallocAsyncCtx5 + 40 | 0; //@line 28883
   HEAP32[$180 >> 2] = $22; //@line 28884
   $181 = $ReallocAsyncCtx5 + 44 | 0; //@line 28885
   HEAP32[$181 >> 2] = $24; //@line 28886
   $182 = $ReallocAsyncCtx5 + 48 | 0; //@line 28887
   HEAP32[$182 >> 2] = $26; //@line 28888
   $183 = $ReallocAsyncCtx5 + 52 | 0; //@line 28889
   HEAP32[$183 >> 2] = $28; //@line 28890
   $184 = $ReallocAsyncCtx5 + 56 | 0; //@line 28891
   $$expand_i1_val16 = $30 & 1; //@line 28892
   HEAP8[$184 >> 0] = $$expand_i1_val16; //@line 28893
   $185 = $ReallocAsyncCtx5 + 60 | 0; //@line 28894
   HEAP32[$185 >> 2] = $32; //@line 28895
   $186 = $ReallocAsyncCtx5 + 64 | 0; //@line 28896
   HEAP32[$186 >> 2] = $34; //@line 28897
   $187 = $ReallocAsyncCtx5 + 68 | 0; //@line 28898
   HEAP32[$187 >> 2] = $36; //@line 28899
   $188 = $ReallocAsyncCtx5 + 72 | 0; //@line 28900
   HEAP32[$188 >> 2] = $170; //@line 28901
   sp = STACKTOP; //@line 28902
   return;
  }
  ___async_unwind = 0; //@line 28905
  HEAP32[$ReallocAsyncCtx5 >> 2] = 184; //@line 28906
  $171 = $ReallocAsyncCtx5 + 4 | 0; //@line 28907
  HEAP32[$171 >> 2] = $2; //@line 28908
  $172 = $ReallocAsyncCtx5 + 8 | 0; //@line 28909
  HEAP32[$172 >> 2] = $4; //@line 28910
  $173 = $ReallocAsyncCtx5 + 12 | 0; //@line 28911
  HEAP32[$173 >> 2] = $6; //@line 28912
  $174 = $ReallocAsyncCtx5 + 16 | 0; //@line 28913
  HEAP32[$174 >> 2] = $8; //@line 28914
  $175 = $ReallocAsyncCtx5 + 20 | 0; //@line 28915
  HEAP32[$175 >> 2] = $10; //@line 28916
  $176 = $ReallocAsyncCtx5 + 24 | 0; //@line 28917
  HEAP32[$176 >> 2] = $12; //@line 28918
  $177 = $ReallocAsyncCtx5 + 28 | 0; //@line 28919
  HEAP32[$177 >> 2] = $16; //@line 28920
  $178 = $ReallocAsyncCtx5 + 32 | 0; //@line 28921
  HEAP32[$178 >> 2] = $18; //@line 28922
  $179 = $ReallocAsyncCtx5 + 36 | 0; //@line 28923
  HEAP32[$179 >> 2] = $20; //@line 28924
  $180 = $ReallocAsyncCtx5 + 40 | 0; //@line 28925
  HEAP32[$180 >> 2] = $22; //@line 28926
  $181 = $ReallocAsyncCtx5 + 44 | 0; //@line 28927
  HEAP32[$181 >> 2] = $24; //@line 28928
  $182 = $ReallocAsyncCtx5 + 48 | 0; //@line 28929
  HEAP32[$182 >> 2] = $26; //@line 28930
  $183 = $ReallocAsyncCtx5 + 52 | 0; //@line 28931
  HEAP32[$183 >> 2] = $28; //@line 28932
  $184 = $ReallocAsyncCtx5 + 56 | 0; //@line 28933
  $$expand_i1_val16 = $30 & 1; //@line 28934
  HEAP8[$184 >> 0] = $$expand_i1_val16; //@line 28935
  $185 = $ReallocAsyncCtx5 + 60 | 0; //@line 28936
  HEAP32[$185 >> 2] = $32; //@line 28937
  $186 = $ReallocAsyncCtx5 + 64 | 0; //@line 28938
  HEAP32[$186 >> 2] = $34; //@line 28939
  $187 = $ReallocAsyncCtx5 + 68 | 0; //@line 28940
  HEAP32[$187 >> 2] = $36; //@line 28941
  $188 = $ReallocAsyncCtx5 + 72 | 0; //@line 28942
  HEAP32[$188 >> 2] = $170; //@line 28943
  sp = STACKTOP; //@line 28944
  return;
 }
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 11569
 STACKTOP = STACKTOP + 64 | 0; //@line 11570
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 11570
 $5 = sp + 16 | 0; //@line 11571
 $6 = sp; //@line 11572
 $7 = sp + 24 | 0; //@line 11573
 $8 = sp + 8 | 0; //@line 11574
 $9 = sp + 20 | 0; //@line 11575
 HEAP32[$5 >> 2] = $1; //@line 11576
 $10 = ($0 | 0) != 0; //@line 11577
 $11 = $7 + 40 | 0; //@line 11578
 $12 = $11; //@line 11579
 $13 = $7 + 39 | 0; //@line 11580
 $14 = $8 + 4 | 0; //@line 11581
 $$0243 = 0; //@line 11582
 $$0247 = 0; //@line 11582
 $$0269 = 0; //@line 11582
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 11591
     $$1248 = -1; //@line 11592
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 11596
     break;
    }
   } else {
    $$1248 = $$0247; //@line 11600
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 11603
  $21 = HEAP8[$20 >> 0] | 0; //@line 11604
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 11607
   break;
  } else {
   $23 = $21; //@line 11610
   $25 = $20; //@line 11610
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 11615
     $27 = $25; //@line 11615
     label = 9; //@line 11616
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 11621
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 11628
   HEAP32[$5 >> 2] = $24; //@line 11629
   $23 = HEAP8[$24 >> 0] | 0; //@line 11631
   $25 = $24; //@line 11631
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 11636
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 11641
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 11644
     $27 = $27 + 2 | 0; //@line 11645
     HEAP32[$5 >> 2] = $27; //@line 11646
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 11653
      break;
     } else {
      $$0249303 = $30; //@line 11650
      label = 9; //@line 11651
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 11661
  if ($10) {
   _out_670($0, $20, $36); //@line 11663
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 11667
   $$0247 = $$1248; //@line 11667
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 11675
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 11676
  if ($43) {
   $$0253 = -1; //@line 11678
   $$1270 = $$0269; //@line 11678
   $$sink = 1; //@line 11678
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 11688
    $$1270 = 1; //@line 11688
    $$sink = 3; //@line 11688
   } else {
    $$0253 = -1; //@line 11690
    $$1270 = $$0269; //@line 11690
    $$sink = 1; //@line 11690
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 11693
  HEAP32[$5 >> 2] = $51; //@line 11694
  $52 = HEAP8[$51 >> 0] | 0; //@line 11695
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 11697
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 11704
   $$lcssa291 = $52; //@line 11704
   $$lcssa292 = $51; //@line 11704
  } else {
   $$0262309 = 0; //@line 11706
   $60 = $52; //@line 11706
   $65 = $51; //@line 11706
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 11711
    $64 = $65 + 1 | 0; //@line 11712
    HEAP32[$5 >> 2] = $64; //@line 11713
    $66 = HEAP8[$64 >> 0] | 0; //@line 11714
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 11716
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 11723
     $$lcssa291 = $66; //@line 11723
     $$lcssa292 = $64; //@line 11723
     break;
    } else {
     $$0262309 = $63; //@line 11726
     $60 = $66; //@line 11726
     $65 = $64; //@line 11726
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 11738
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 11740
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 11745
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 11750
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 11762
     $$2271 = 1; //@line 11762
     $storemerge274 = $79 + 3 | 0; //@line 11762
    } else {
     label = 23; //@line 11764
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 11768
    if ($$1270 | 0) {
     $$0 = -1; //@line 11771
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11786
     $106 = HEAP32[$105 >> 2] | 0; //@line 11787
     HEAP32[$2 >> 2] = $105 + 4; //@line 11789
     $363 = $106; //@line 11790
    } else {
     $363 = 0; //@line 11792
    }
    $$0259 = $363; //@line 11796
    $$2271 = 0; //@line 11796
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 11796
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 11798
   $109 = ($$0259 | 0) < 0; //@line 11799
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 11804
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 11804
   $$3272 = $$2271; //@line 11804
   $115 = $storemerge274; //@line 11804
  } else {
   $112 = _getint_671($5) | 0; //@line 11806
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 11809
    break;
   }
   $$1260 = $112; //@line 11813
   $$1263 = $$0262$lcssa; //@line 11813
   $$3272 = $$1270; //@line 11813
   $115 = HEAP32[$5 >> 2] | 0; //@line 11813
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 11824
     $156 = _getint_671($5) | 0; //@line 11825
     $$0254 = $156; //@line 11827
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 11827
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 11836
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 11841
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 11846
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 11853
      $144 = $125 + 4 | 0; //@line 11857
      HEAP32[$5 >> 2] = $144; //@line 11858
      $$0254 = $140; //@line 11859
      $$pre345 = $144; //@line 11859
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 11865
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11880
     $152 = HEAP32[$151 >> 2] | 0; //@line 11881
     HEAP32[$2 >> 2] = $151 + 4; //@line 11883
     $364 = $152; //@line 11884
    } else {
     $364 = 0; //@line 11886
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 11889
    HEAP32[$5 >> 2] = $154; //@line 11890
    $$0254 = $364; //@line 11891
    $$pre345 = $154; //@line 11891
   } else {
    $$0254 = -1; //@line 11893
    $$pre345 = $115; //@line 11893
   }
  } while (0);
  $$0252 = 0; //@line 11896
  $158 = $$pre345; //@line 11896
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 11903
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 11906
   HEAP32[$5 >> 2] = $158; //@line 11907
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (15941 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 11912
   $168 = $167 & 255; //@line 11913
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 11917
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 11924
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 11928
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 11932
     break L1;
    } else {
     label = 50; //@line 11935
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 11940
     $176 = $3 + ($$0253 << 3) | 0; //@line 11942
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 11947
     $182 = $6; //@line 11948
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 11950
     HEAP32[$182 + 4 >> 2] = $181; //@line 11953
     label = 50; //@line 11954
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 11958
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 11961
    $187 = HEAP32[$5 >> 2] | 0; //@line 11963
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 11967
   if ($10) {
    $187 = $158; //@line 11969
   } else {
    $$0243 = 0; //@line 11971
    $$0247 = $$1248; //@line 11971
    $$0269 = $$3272; //@line 11971
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 11977
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 11983
  $196 = $$1263 & -65537; //@line 11986
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 11987
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 11995
       $$0243 = 0; //@line 11996
       $$0247 = $$1248; //@line 11996
       $$0269 = $$3272; //@line 11996
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12002
       $$0243 = 0; //@line 12003
       $$0247 = $$1248; //@line 12003
       $$0269 = $$3272; //@line 12003
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 12011
       HEAP32[$208 >> 2] = $$1248; //@line 12013
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 12016
       $$0243 = 0; //@line 12017
       $$0247 = $$1248; //@line 12017
       $$0269 = $$3272; //@line 12017
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 12024
       $$0243 = 0; //@line 12025
       $$0247 = $$1248; //@line 12025
       $$0269 = $$3272; //@line 12025
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 12032
       $$0243 = 0; //@line 12033
       $$0247 = $$1248; //@line 12033
       $$0269 = $$3272; //@line 12033
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12039
       $$0243 = 0; //@line 12040
       $$0247 = $$1248; //@line 12040
       $$0269 = $$3272; //@line 12040
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 12048
       HEAP32[$220 >> 2] = $$1248; //@line 12050
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 12053
       $$0243 = 0; //@line 12054
       $$0247 = $$1248; //@line 12054
       $$0269 = $$3272; //@line 12054
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 12059
       $$0247 = $$1248; //@line 12059
       $$0269 = $$3272; //@line 12059
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 12069
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 12069
     $$3265 = $$1263$ | 8; //@line 12069
     label = 62; //@line 12070
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 12074
     $$1255 = $$0254; //@line 12074
     $$3265 = $$1263$; //@line 12074
     label = 62; //@line 12075
     break;
    }
   case 111:
    {
     $242 = $6; //@line 12079
     $244 = HEAP32[$242 >> 2] | 0; //@line 12081
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 12084
     $248 = _fmt_o($244, $247, $11) | 0; //@line 12085
     $252 = $12 - $248 | 0; //@line 12089
     $$0228 = $248; //@line 12094
     $$1233 = 0; //@line 12094
     $$1238 = 16405; //@line 12094
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 12094
     $$4266 = $$1263$; //@line 12094
     $281 = $244; //@line 12094
     $283 = $247; //@line 12094
     label = 68; //@line 12095
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 12099
     $258 = HEAP32[$256 >> 2] | 0; //@line 12101
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 12104
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 12107
      $264 = tempRet0; //@line 12108
      $265 = $6; //@line 12109
      HEAP32[$265 >> 2] = $263; //@line 12111
      HEAP32[$265 + 4 >> 2] = $264; //@line 12114
      $$0232 = 1; //@line 12115
      $$0237 = 16405; //@line 12115
      $275 = $263; //@line 12115
      $276 = $264; //@line 12115
      label = 67; //@line 12116
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 12128
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 16405 : 16407 : 16406; //@line 12128
      $275 = $258; //@line 12128
      $276 = $261; //@line 12128
      label = 67; //@line 12129
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 12135
     $$0232 = 0; //@line 12141
     $$0237 = 16405; //@line 12141
     $275 = HEAP32[$197 >> 2] | 0; //@line 12141
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 12141
     label = 67; //@line 12142
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 12153
     $$2 = $13; //@line 12154
     $$2234 = 0; //@line 12154
     $$2239 = 16405; //@line 12154
     $$2251 = $11; //@line 12154
     $$5 = 1; //@line 12154
     $$6268 = $196; //@line 12154
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 12161
     label = 72; //@line 12162
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 12166
     $$1 = $302 | 0 ? $302 : 16415; //@line 12169
     label = 72; //@line 12170
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 12180
     HEAP32[$14 >> 2] = 0; //@line 12181
     HEAP32[$6 >> 2] = $8; //@line 12182
     $$4258354 = -1; //@line 12183
     $365 = $8; //@line 12183
     label = 76; //@line 12184
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 12188
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 12191
      $$0240$lcssa356 = 0; //@line 12192
      label = 85; //@line 12193
     } else {
      $$4258354 = $$0254; //@line 12195
      $365 = $$pre348; //@line 12195
      label = 76; //@line 12196
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 12203
     $$0247 = $$1248; //@line 12203
     $$0269 = $$3272; //@line 12203
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 12208
     $$2234 = 0; //@line 12208
     $$2239 = 16405; //@line 12208
     $$2251 = $11; //@line 12208
     $$5 = $$0254; //@line 12208
     $$6268 = $$1263$; //@line 12208
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 12214
    $227 = $6; //@line 12215
    $229 = HEAP32[$227 >> 2] | 0; //@line 12217
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 12220
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 12222
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 12228
    $$0228 = $234; //@line 12233
    $$1233 = $or$cond278 ? 0 : 2; //@line 12233
    $$1238 = $or$cond278 ? 16405 : 16405 + ($$1236 >> 4) | 0; //@line 12233
    $$2256 = $$1255; //@line 12233
    $$4266 = $$3265; //@line 12233
    $281 = $229; //@line 12233
    $283 = $232; //@line 12233
    label = 68; //@line 12234
   } else if ((label | 0) == 67) {
    label = 0; //@line 12237
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 12239
    $$1233 = $$0232; //@line 12239
    $$1238 = $$0237; //@line 12239
    $$2256 = $$0254; //@line 12239
    $$4266 = $$1263$; //@line 12239
    $281 = $275; //@line 12239
    $283 = $276; //@line 12239
    label = 68; //@line 12240
   } else if ((label | 0) == 72) {
    label = 0; //@line 12243
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 12244
    $306 = ($305 | 0) == 0; //@line 12245
    $$2 = $$1; //@line 12252
    $$2234 = 0; //@line 12252
    $$2239 = 16405; //@line 12252
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 12252
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 12252
    $$6268 = $196; //@line 12252
   } else if ((label | 0) == 76) {
    label = 0; //@line 12255
    $$0229316 = $365; //@line 12256
    $$0240315 = 0; //@line 12256
    $$1244314 = 0; //@line 12256
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 12258
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 12261
      $$2245 = $$1244314; //@line 12261
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 12264
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 12270
      $$2245 = $320; //@line 12270
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 12274
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 12277
      $$0240315 = $325; //@line 12277
      $$1244314 = $320; //@line 12277
     } else {
      $$0240$lcssa = $325; //@line 12279
      $$2245 = $320; //@line 12279
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 12285
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 12288
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 12291
     label = 85; //@line 12292
    } else {
     $$1230327 = $365; //@line 12294
     $$1241326 = 0; //@line 12294
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 12296
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 12299
       label = 85; //@line 12300
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 12303
      $$1241326 = $331 + $$1241326 | 0; //@line 12304
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 12307
       label = 85; //@line 12308
       break L97;
      }
      _out_670($0, $9, $331); //@line 12312
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 12317
       label = 85; //@line 12318
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 12315
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 12326
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 12332
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 12334
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 12339
   $$2 = $or$cond ? $$0228 : $11; //@line 12344
   $$2234 = $$1233; //@line 12344
   $$2239 = $$1238; //@line 12344
   $$2251 = $11; //@line 12344
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 12344
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 12344
  } else if ((label | 0) == 85) {
   label = 0; //@line 12347
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 12349
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 12352
   $$0247 = $$1248; //@line 12352
   $$0269 = $$3272; //@line 12352
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 12357
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 12359
  $345 = $$$5 + $$2234 | 0; //@line 12360
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 12362
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 12363
  _out_670($0, $$2239, $$2234); //@line 12364
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 12366
  _pad_676($0, 48, $$$5, $343, 0); //@line 12367
  _out_670($0, $$2, $343); //@line 12368
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 12370
  $$0243 = $$2261; //@line 12371
  $$0247 = $$1248; //@line 12371
  $$0269 = $$3272; //@line 12371
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 12379
    } else {
     $$2242302 = 1; //@line 12381
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 12384
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 12387
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 12391
      $356 = $$2242302 + 1 | 0; //@line 12392
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 12395
      } else {
       $$2242$lcssa = $356; //@line 12397
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 12403
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 12409
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 12415
       } else {
        $$0 = 1; //@line 12417
        break;
       }
      }
     } else {
      $$0 = 1; //@line 12422
     }
    }
   } else {
    $$0 = $$1248; //@line 12426
   }
  }
 } while (0);
 STACKTOP = sp; //@line 12430
 return $$0 | 0; //@line 12430
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_222($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 36912
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36914
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36916
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36918
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36920
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36922
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 36924
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 36926
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 36928
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 36930
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 36932
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 36934
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 36936
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 36938
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 36940
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 36942
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 36944
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 36946
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 36948
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 36950
 HEAP8[$6 + 688 >> 0] = 1; //@line 36952
 if (HEAP8[$38 >> 0] | 0) {
  HEAP8[$38 >> 0] = 0; //@line 36956
  $42 = $6 + 1112 | 0; //@line 36957
  $43 = $2 + 12 | 0; //@line 36958
  HEAP32[$2 >> 2] = 69; //@line 36959
  HEAP32[$2 + 4 >> 2] = 0; //@line 36961
  HEAP32[$2 + 8 >> 2] = $6; //@line 36963
  HEAP32[$43 >> 2] = 648; //@line 36964
  $44 = $6 + 1152 | 0; //@line 36965
  do {
   if (($44 | 0) != ($2 | 0)) {
    $46 = $6 + 1164 | 0; //@line 36969
    $47 = HEAP32[$46 >> 2] | 0; //@line 36970
    if ($47 | 0) {
     $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 36974
     $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 36975
     FUNCTION_TABLE_vi[$50 & 1023]($44); //@line 36976
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 70; //@line 36979
      $51 = $ReallocAsyncCtx + 4 | 0; //@line 36980
      HEAP32[$51 >> 2] = $43; //@line 36981
      $52 = $ReallocAsyncCtx + 8 | 0; //@line 36982
      HEAP32[$52 >> 2] = $46; //@line 36983
      $53 = $ReallocAsyncCtx + 12 | 0; //@line 36984
      HEAP32[$53 >> 2] = $44; //@line 36985
      $54 = $ReallocAsyncCtx + 16 | 0; //@line 36986
      HEAP32[$54 >> 2] = $2; //@line 36987
      $55 = $ReallocAsyncCtx + 20 | 0; //@line 36988
      HEAP32[$55 >> 2] = $42; //@line 36989
      sp = STACKTOP; //@line 36990
      return;
     }
     ___async_unwind = 0; //@line 36993
     HEAP32[$ReallocAsyncCtx >> 2] = 70; //@line 36994
     $51 = $ReallocAsyncCtx + 4 | 0; //@line 36995
     HEAP32[$51 >> 2] = $43; //@line 36996
     $52 = $ReallocAsyncCtx + 8 | 0; //@line 36997
     HEAP32[$52 >> 2] = $46; //@line 36998
     $53 = $ReallocAsyncCtx + 12 | 0; //@line 36999
     HEAP32[$53 >> 2] = $44; //@line 37000
     $54 = $ReallocAsyncCtx + 16 | 0; //@line 37001
     HEAP32[$54 >> 2] = $2; //@line 37002
     $55 = $ReallocAsyncCtx + 20 | 0; //@line 37003
     HEAP32[$55 >> 2] = $42; //@line 37004
     sp = STACKTOP; //@line 37005
     return;
    }
    $56 = HEAP32[$43 >> 2] | 0; //@line 37008
    if (!$56) {
     HEAP32[$46 >> 2] = 0; //@line 37011
     break;
    }
    $59 = HEAP32[$56 + 4 >> 2] | 0; //@line 37015
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 37016
    FUNCTION_TABLE_vii[$59 & 31]($44, $2); //@line 37017
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 71; //@line 37020
     $60 = $ReallocAsyncCtx2 + 4 | 0; //@line 37021
     HEAP32[$60 >> 2] = $43; //@line 37022
     $61 = $ReallocAsyncCtx2 + 8 | 0; //@line 37023
     HEAP32[$61 >> 2] = $46; //@line 37024
     $62 = $ReallocAsyncCtx2 + 12 | 0; //@line 37025
     HEAP32[$62 >> 2] = $42; //@line 37026
     $63 = $ReallocAsyncCtx2 + 16 | 0; //@line 37027
     HEAP32[$63 >> 2] = $2; //@line 37028
     sp = STACKTOP; //@line 37029
     return;
    }
    ___async_unwind = 0; //@line 37032
    HEAP32[$ReallocAsyncCtx2 >> 2] = 71; //@line 37033
    $60 = $ReallocAsyncCtx2 + 4 | 0; //@line 37034
    HEAP32[$60 >> 2] = $43; //@line 37035
    $61 = $ReallocAsyncCtx2 + 8 | 0; //@line 37036
    HEAP32[$61 >> 2] = $46; //@line 37037
    $62 = $ReallocAsyncCtx2 + 12 | 0; //@line 37038
    HEAP32[$62 >> 2] = $42; //@line 37039
    $63 = $ReallocAsyncCtx2 + 16 | 0; //@line 37040
    HEAP32[$63 >> 2] = $2; //@line 37041
    sp = STACKTOP; //@line 37042
    return;
   }
  } while (0);
  __ZN4mbed6Ticker5setupEy($42, 2e5, 0); //@line 37046
  $64 = HEAP32[$43 >> 2] | 0; //@line 37047
  if (!$64) {
   return;
  }
  $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 37053
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 37054
  FUNCTION_TABLE_vi[$67 & 1023]($2); //@line 37055
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 72; //@line 37058
   sp = STACKTOP; //@line 37059
   return;
  }
  ___async_unwind = 0; //@line 37062
  HEAP32[$ReallocAsyncCtx3 >> 2] = 72; //@line 37063
  sp = STACKTOP; //@line 37064
  return;
 }
 if ($4 | 0) {
  $69 = $6 + 1112 | 0; //@line 37069
  $70 = $8 + 12 | 0; //@line 37070
  HEAP32[$8 >> 2] = 73; //@line 37071
  HEAP32[$8 + 4 >> 2] = 0; //@line 37073
  HEAP32[$8 + 8 >> 2] = $6; //@line 37075
  HEAP32[$70 >> 2] = 648; //@line 37076
  $71 = ___muldi3($4 | 0, 0, 1e3, 0) | 0; //@line 37077
  $72 = tempRet0; //@line 37078
  $73 = $6 + 1152 | 0; //@line 37079
  do {
   if (($73 | 0) != ($8 | 0)) {
    $75 = $6 + 1164 | 0; //@line 37083
    $76 = HEAP32[$75 >> 2] | 0; //@line 37084
    if ($76 | 0) {
     $79 = HEAP32[$76 + 8 >> 2] | 0; //@line 37088
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(96) | 0; //@line 37089
     FUNCTION_TABLE_vi[$79 & 1023]($73); //@line 37090
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 74; //@line 37093
      $80 = $ReallocAsyncCtx4 + 4 | 0; //@line 37094
      HEAP32[$80 >> 2] = $10; //@line 37095
      $81 = $ReallocAsyncCtx4 + 8 | 0; //@line 37096
      HEAP32[$81 >> 2] = $12; //@line 37097
      $82 = $ReallocAsyncCtx4 + 12 | 0; //@line 37098
      HEAP32[$82 >> 2] = $14; //@line 37099
      $83 = $ReallocAsyncCtx4 + 16 | 0; //@line 37100
      HEAP32[$83 >> 2] = $16; //@line 37101
      $84 = $ReallocAsyncCtx4 + 20 | 0; //@line 37102
      HEAP32[$84 >> 2] = $73; //@line 37103
      $85 = $ReallocAsyncCtx4 + 24 | 0; //@line 37104
      HEAP32[$85 >> 2] = $8; //@line 37105
      $86 = $ReallocAsyncCtx4 + 28 | 0; //@line 37106
      HEAP32[$86 >> 2] = $70; //@line 37107
      $87 = $ReallocAsyncCtx4 + 32 | 0; //@line 37108
      HEAP32[$87 >> 2] = $75; //@line 37109
      $88 = $ReallocAsyncCtx4 + 36 | 0; //@line 37110
      HEAP32[$88 >> 2] = $69; //@line 37111
      $89 = $ReallocAsyncCtx4 + 40 | 0; //@line 37112
      $90 = $89; //@line 37113
      $91 = $90; //@line 37114
      HEAP32[$91 >> 2] = $71; //@line 37115
      $92 = $90 + 4 | 0; //@line 37116
      $93 = $92; //@line 37117
      HEAP32[$93 >> 2] = $72; //@line 37118
      $94 = $ReallocAsyncCtx4 + 48 | 0; //@line 37119
      HEAP32[$94 >> 2] = $18; //@line 37120
      $95 = $ReallocAsyncCtx4 + 52 | 0; //@line 37121
      HEAP32[$95 >> 2] = $20; //@line 37122
      $96 = $ReallocAsyncCtx4 + 56 | 0; //@line 37123
      HEAP32[$96 >> 2] = $6; //@line 37124
      $97 = $ReallocAsyncCtx4 + 60 | 0; //@line 37125
      HEAP32[$97 >> 2] = $22; //@line 37126
      $98 = $ReallocAsyncCtx4 + 64 | 0; //@line 37127
      HEAP32[$98 >> 2] = $24; //@line 37128
      $99 = $ReallocAsyncCtx4 + 68 | 0; //@line 37129
      HEAP32[$99 >> 2] = $26; //@line 37130
      $100 = $ReallocAsyncCtx4 + 72 | 0; //@line 37131
      HEAP32[$100 >> 2] = $28; //@line 37132
      $101 = $ReallocAsyncCtx4 + 76 | 0; //@line 37133
      HEAP32[$101 >> 2] = $30; //@line 37134
      $102 = $ReallocAsyncCtx4 + 80 | 0; //@line 37135
      HEAP32[$102 >> 2] = $32; //@line 37136
      $103 = $ReallocAsyncCtx4 + 84 | 0; //@line 37137
      HEAP32[$103 >> 2] = $34; //@line 37138
      $104 = $ReallocAsyncCtx4 + 88 | 0; //@line 37139
      HEAP32[$104 >> 2] = $36; //@line 37140
      sp = STACKTOP; //@line 37141
      return;
     }
     ___async_unwind = 0; //@line 37144
     HEAP32[$ReallocAsyncCtx4 >> 2] = 74; //@line 37145
     $80 = $ReallocAsyncCtx4 + 4 | 0; //@line 37146
     HEAP32[$80 >> 2] = $10; //@line 37147
     $81 = $ReallocAsyncCtx4 + 8 | 0; //@line 37148
     HEAP32[$81 >> 2] = $12; //@line 37149
     $82 = $ReallocAsyncCtx4 + 12 | 0; //@line 37150
     HEAP32[$82 >> 2] = $14; //@line 37151
     $83 = $ReallocAsyncCtx4 + 16 | 0; //@line 37152
     HEAP32[$83 >> 2] = $16; //@line 37153
     $84 = $ReallocAsyncCtx4 + 20 | 0; //@line 37154
     HEAP32[$84 >> 2] = $73; //@line 37155
     $85 = $ReallocAsyncCtx4 + 24 | 0; //@line 37156
     HEAP32[$85 >> 2] = $8; //@line 37157
     $86 = $ReallocAsyncCtx4 + 28 | 0; //@line 37158
     HEAP32[$86 >> 2] = $70; //@line 37159
     $87 = $ReallocAsyncCtx4 + 32 | 0; //@line 37160
     HEAP32[$87 >> 2] = $75; //@line 37161
     $88 = $ReallocAsyncCtx4 + 36 | 0; //@line 37162
     HEAP32[$88 >> 2] = $69; //@line 37163
     $89 = $ReallocAsyncCtx4 + 40 | 0; //@line 37164
     $90 = $89; //@line 37165
     $91 = $90; //@line 37166
     HEAP32[$91 >> 2] = $71; //@line 37167
     $92 = $90 + 4 | 0; //@line 37168
     $93 = $92; //@line 37169
     HEAP32[$93 >> 2] = $72; //@line 37170
     $94 = $ReallocAsyncCtx4 + 48 | 0; //@line 37171
     HEAP32[$94 >> 2] = $18; //@line 37172
     $95 = $ReallocAsyncCtx4 + 52 | 0; //@line 37173
     HEAP32[$95 >> 2] = $20; //@line 37174
     $96 = $ReallocAsyncCtx4 + 56 | 0; //@line 37175
     HEAP32[$96 >> 2] = $6; //@line 37176
     $97 = $ReallocAsyncCtx4 + 60 | 0; //@line 37177
     HEAP32[$97 >> 2] = $22; //@line 37178
     $98 = $ReallocAsyncCtx4 + 64 | 0; //@line 37179
     HEAP32[$98 >> 2] = $24; //@line 37180
     $99 = $ReallocAsyncCtx4 + 68 | 0; //@line 37181
     HEAP32[$99 >> 2] = $26; //@line 37182
     $100 = $ReallocAsyncCtx4 + 72 | 0; //@line 37183
     HEAP32[$100 >> 2] = $28; //@line 37184
     $101 = $ReallocAsyncCtx4 + 76 | 0; //@line 37185
     HEAP32[$101 >> 2] = $30; //@line 37186
     $102 = $ReallocAsyncCtx4 + 80 | 0; //@line 37187
     HEAP32[$102 >> 2] = $32; //@line 37188
     $103 = $ReallocAsyncCtx4 + 84 | 0; //@line 37189
     HEAP32[$103 >> 2] = $34; //@line 37190
     $104 = $ReallocAsyncCtx4 + 88 | 0; //@line 37191
     HEAP32[$104 >> 2] = $36; //@line 37192
     sp = STACKTOP; //@line 37193
     return;
    }
    $105 = HEAP32[$70 >> 2] | 0; //@line 37196
    if (!$105) {
     HEAP32[$75 >> 2] = 0; //@line 37199
     break;
    }
    $108 = HEAP32[$105 + 4 >> 2] | 0; //@line 37203
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(96) | 0; //@line 37204
    FUNCTION_TABLE_vii[$108 & 31]($73, $8); //@line 37205
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 75; //@line 37208
     $109 = $ReallocAsyncCtx5 + 4 | 0; //@line 37209
     HEAP32[$109 >> 2] = $10; //@line 37210
     $110 = $ReallocAsyncCtx5 + 8 | 0; //@line 37211
     HEAP32[$110 >> 2] = $12; //@line 37212
     $111 = $ReallocAsyncCtx5 + 12 | 0; //@line 37213
     HEAP32[$111 >> 2] = $14; //@line 37214
     $112 = $ReallocAsyncCtx5 + 16 | 0; //@line 37215
     HEAP32[$112 >> 2] = $16; //@line 37216
     $113 = $ReallocAsyncCtx5 + 20 | 0; //@line 37217
     HEAP32[$113 >> 2] = $75; //@line 37218
     $114 = $ReallocAsyncCtx5 + 24 | 0; //@line 37219
     HEAP32[$114 >> 2] = $69; //@line 37220
     $115 = $ReallocAsyncCtx5 + 32 | 0; //@line 37221
     $116 = $115; //@line 37222
     $117 = $116; //@line 37223
     HEAP32[$117 >> 2] = $71; //@line 37224
     $118 = $116 + 4 | 0; //@line 37225
     $119 = $118; //@line 37226
     HEAP32[$119 >> 2] = $72; //@line 37227
     $120 = $ReallocAsyncCtx5 + 40 | 0; //@line 37228
     HEAP32[$120 >> 2] = $70; //@line 37229
     $121 = $ReallocAsyncCtx5 + 44 | 0; //@line 37230
     HEAP32[$121 >> 2] = $8; //@line 37231
     $122 = $ReallocAsyncCtx5 + 48 | 0; //@line 37232
     HEAP32[$122 >> 2] = $18; //@line 37233
     $123 = $ReallocAsyncCtx5 + 52 | 0; //@line 37234
     HEAP32[$123 >> 2] = $20; //@line 37235
     $124 = $ReallocAsyncCtx5 + 56 | 0; //@line 37236
     HEAP32[$124 >> 2] = $6; //@line 37237
     $125 = $ReallocAsyncCtx5 + 60 | 0; //@line 37238
     HEAP32[$125 >> 2] = $22; //@line 37239
     $126 = $ReallocAsyncCtx5 + 64 | 0; //@line 37240
     HEAP32[$126 >> 2] = $24; //@line 37241
     $127 = $ReallocAsyncCtx5 + 68 | 0; //@line 37242
     HEAP32[$127 >> 2] = $26; //@line 37243
     $128 = $ReallocAsyncCtx5 + 72 | 0; //@line 37244
     HEAP32[$128 >> 2] = $28; //@line 37245
     $129 = $ReallocAsyncCtx5 + 76 | 0; //@line 37246
     HEAP32[$129 >> 2] = $30; //@line 37247
     $130 = $ReallocAsyncCtx5 + 80 | 0; //@line 37248
     HEAP32[$130 >> 2] = $32; //@line 37249
     $131 = $ReallocAsyncCtx5 + 84 | 0; //@line 37250
     HEAP32[$131 >> 2] = $34; //@line 37251
     $132 = $ReallocAsyncCtx5 + 88 | 0; //@line 37252
     HEAP32[$132 >> 2] = $36; //@line 37253
     sp = STACKTOP; //@line 37254
     return;
    }
    ___async_unwind = 0; //@line 37257
    HEAP32[$ReallocAsyncCtx5 >> 2] = 75; //@line 37258
    $109 = $ReallocAsyncCtx5 + 4 | 0; //@line 37259
    HEAP32[$109 >> 2] = $10; //@line 37260
    $110 = $ReallocAsyncCtx5 + 8 | 0; //@line 37261
    HEAP32[$110 >> 2] = $12; //@line 37262
    $111 = $ReallocAsyncCtx5 + 12 | 0; //@line 37263
    HEAP32[$111 >> 2] = $14; //@line 37264
    $112 = $ReallocAsyncCtx5 + 16 | 0; //@line 37265
    HEAP32[$112 >> 2] = $16; //@line 37266
    $113 = $ReallocAsyncCtx5 + 20 | 0; //@line 37267
    HEAP32[$113 >> 2] = $75; //@line 37268
    $114 = $ReallocAsyncCtx5 + 24 | 0; //@line 37269
    HEAP32[$114 >> 2] = $69; //@line 37270
    $115 = $ReallocAsyncCtx5 + 32 | 0; //@line 37271
    $116 = $115; //@line 37272
    $117 = $116; //@line 37273
    HEAP32[$117 >> 2] = $71; //@line 37274
    $118 = $116 + 4 | 0; //@line 37275
    $119 = $118; //@line 37276
    HEAP32[$119 >> 2] = $72; //@line 37277
    $120 = $ReallocAsyncCtx5 + 40 | 0; //@line 37278
    HEAP32[$120 >> 2] = $70; //@line 37279
    $121 = $ReallocAsyncCtx5 + 44 | 0; //@line 37280
    HEAP32[$121 >> 2] = $8; //@line 37281
    $122 = $ReallocAsyncCtx5 + 48 | 0; //@line 37282
    HEAP32[$122 >> 2] = $18; //@line 37283
    $123 = $ReallocAsyncCtx5 + 52 | 0; //@line 37284
    HEAP32[$123 >> 2] = $20; //@line 37285
    $124 = $ReallocAsyncCtx5 + 56 | 0; //@line 37286
    HEAP32[$124 >> 2] = $6; //@line 37287
    $125 = $ReallocAsyncCtx5 + 60 | 0; //@line 37288
    HEAP32[$125 >> 2] = $22; //@line 37289
    $126 = $ReallocAsyncCtx5 + 64 | 0; //@line 37290
    HEAP32[$126 >> 2] = $24; //@line 37291
    $127 = $ReallocAsyncCtx5 + 68 | 0; //@line 37292
    HEAP32[$127 >> 2] = $26; //@line 37293
    $128 = $ReallocAsyncCtx5 + 72 | 0; //@line 37294
    HEAP32[$128 >> 2] = $28; //@line 37295
    $129 = $ReallocAsyncCtx5 + 76 | 0; //@line 37296
    HEAP32[$129 >> 2] = $30; //@line 37297
    $130 = $ReallocAsyncCtx5 + 80 | 0; //@line 37298
    HEAP32[$130 >> 2] = $32; //@line 37299
    $131 = $ReallocAsyncCtx5 + 84 | 0; //@line 37300
    HEAP32[$131 >> 2] = $34; //@line 37301
    $132 = $ReallocAsyncCtx5 + 88 | 0; //@line 37302
    HEAP32[$132 >> 2] = $36; //@line 37303
    sp = STACKTOP; //@line 37304
    return;
   }
  } while (0);
  __ZN4mbed6Ticker5setupEy($69, $71, $72); //@line 37308
  $133 = HEAP32[$70 >> 2] | 0; //@line 37309
  if ($133 | 0) {
   $136 = HEAP32[$133 + 8 >> 2] | 0; //@line 37313
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 37314
   FUNCTION_TABLE_vi[$136 & 1023]($8); //@line 37315
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 76; //@line 37318
    $137 = $ReallocAsyncCtx6 + 4 | 0; //@line 37319
    HEAP32[$137 >> 2] = $10; //@line 37320
    $138 = $ReallocAsyncCtx6 + 8 | 0; //@line 37321
    HEAP32[$138 >> 2] = $12; //@line 37322
    $139 = $ReallocAsyncCtx6 + 12 | 0; //@line 37323
    HEAP32[$139 >> 2] = $14; //@line 37324
    $140 = $ReallocAsyncCtx6 + 16 | 0; //@line 37325
    HEAP32[$140 >> 2] = $16; //@line 37326
    $141 = $ReallocAsyncCtx6 + 20 | 0; //@line 37327
    HEAP32[$141 >> 2] = $18; //@line 37328
    $142 = $ReallocAsyncCtx6 + 24 | 0; //@line 37329
    HEAP32[$142 >> 2] = $20; //@line 37330
    $143 = $ReallocAsyncCtx6 + 28 | 0; //@line 37331
    HEAP32[$143 >> 2] = $6; //@line 37332
    $144 = $ReallocAsyncCtx6 + 32 | 0; //@line 37333
    HEAP32[$144 >> 2] = $22; //@line 37334
    $145 = $ReallocAsyncCtx6 + 36 | 0; //@line 37335
    HEAP32[$145 >> 2] = $24; //@line 37336
    $146 = $ReallocAsyncCtx6 + 40 | 0; //@line 37337
    HEAP32[$146 >> 2] = $26; //@line 37338
    $147 = $ReallocAsyncCtx6 + 44 | 0; //@line 37339
    HEAP32[$147 >> 2] = $28; //@line 37340
    $148 = $ReallocAsyncCtx6 + 48 | 0; //@line 37341
    HEAP32[$148 >> 2] = $30; //@line 37342
    $149 = $ReallocAsyncCtx6 + 52 | 0; //@line 37343
    HEAP32[$149 >> 2] = $32; //@line 37344
    $150 = $ReallocAsyncCtx6 + 56 | 0; //@line 37345
    HEAP32[$150 >> 2] = $34; //@line 37346
    $151 = $ReallocAsyncCtx6 + 60 | 0; //@line 37347
    HEAP32[$151 >> 2] = $36; //@line 37348
    sp = STACKTOP; //@line 37349
    return;
   }
   ___async_unwind = 0; //@line 37352
   HEAP32[$ReallocAsyncCtx6 >> 2] = 76; //@line 37353
   $137 = $ReallocAsyncCtx6 + 4 | 0; //@line 37354
   HEAP32[$137 >> 2] = $10; //@line 37355
   $138 = $ReallocAsyncCtx6 + 8 | 0; //@line 37356
   HEAP32[$138 >> 2] = $12; //@line 37357
   $139 = $ReallocAsyncCtx6 + 12 | 0; //@line 37358
   HEAP32[$139 >> 2] = $14; //@line 37359
   $140 = $ReallocAsyncCtx6 + 16 | 0; //@line 37360
   HEAP32[$140 >> 2] = $16; //@line 37361
   $141 = $ReallocAsyncCtx6 + 20 | 0; //@line 37362
   HEAP32[$141 >> 2] = $18; //@line 37363
   $142 = $ReallocAsyncCtx6 + 24 | 0; //@line 37364
   HEAP32[$142 >> 2] = $20; //@line 37365
   $143 = $ReallocAsyncCtx6 + 28 | 0; //@line 37366
   HEAP32[$143 >> 2] = $6; //@line 37367
   $144 = $ReallocAsyncCtx6 + 32 | 0; //@line 37368
   HEAP32[$144 >> 2] = $22; //@line 37369
   $145 = $ReallocAsyncCtx6 + 36 | 0; //@line 37370
   HEAP32[$145 >> 2] = $24; //@line 37371
   $146 = $ReallocAsyncCtx6 + 40 | 0; //@line 37372
   HEAP32[$146 >> 2] = $26; //@line 37373
   $147 = $ReallocAsyncCtx6 + 44 | 0; //@line 37374
   HEAP32[$147 >> 2] = $28; //@line 37375
   $148 = $ReallocAsyncCtx6 + 48 | 0; //@line 37376
   HEAP32[$148 >> 2] = $30; //@line 37377
   $149 = $ReallocAsyncCtx6 + 52 | 0; //@line 37378
   HEAP32[$149 >> 2] = $32; //@line 37379
   $150 = $ReallocAsyncCtx6 + 56 | 0; //@line 37380
   HEAP32[$150 >> 2] = $34; //@line 37381
   $151 = $ReallocAsyncCtx6 + 60 | 0; //@line 37382
   HEAP32[$151 >> 2] = $36; //@line 37383
   sp = STACKTOP; //@line 37384
   return;
  }
 }
 $154 = (HEAP8[$6 + 770 >> 0] | 0) == 0; //@line 37390
 _printf(10904, $22) | 0; //@line 37391
 if ($154) {
  HEAP32[$18 >> 2] = 6; //@line 37393
  _printf(10970, $18) | 0; //@line 37394
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 37395
  _putchar(10) | 0; //@line 37396
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 80; //@line 37399
   $160 = $ReallocAsyncCtx8 + 4 | 0; //@line 37400
   HEAP32[$160 >> 2] = $6; //@line 37401
   $161 = $ReallocAsyncCtx8 + 8 | 0; //@line 37402
   HEAP32[$161 >> 2] = $30; //@line 37403
   $162 = $ReallocAsyncCtx8 + 12 | 0; //@line 37404
   HEAP32[$162 >> 2] = $32; //@line 37405
   $163 = $ReallocAsyncCtx8 + 16 | 0; //@line 37406
   HEAP32[$163 >> 2] = $34; //@line 37407
   $164 = $ReallocAsyncCtx8 + 20 | 0; //@line 37408
   HEAP32[$164 >> 2] = $36; //@line 37409
   sp = STACKTOP; //@line 37410
   return;
  }
  ___async_unwind = 0; //@line 37413
  HEAP32[$ReallocAsyncCtx8 >> 2] = 80; //@line 37414
  $160 = $ReallocAsyncCtx8 + 4 | 0; //@line 37415
  HEAP32[$160 >> 2] = $6; //@line 37416
  $161 = $ReallocAsyncCtx8 + 8 | 0; //@line 37417
  HEAP32[$161 >> 2] = $30; //@line 37418
  $162 = $ReallocAsyncCtx8 + 12 | 0; //@line 37419
  HEAP32[$162 >> 2] = $32; //@line 37420
  $163 = $ReallocAsyncCtx8 + 16 | 0; //@line 37421
  HEAP32[$163 >> 2] = $34; //@line 37422
  $164 = $ReallocAsyncCtx8 + 20 | 0; //@line 37423
  HEAP32[$164 >> 2] = $36; //@line 37424
  sp = STACKTOP; //@line 37425
  return;
 } else {
  HEAP32[$26 >> 2] = 5; //@line 37428
  _printf(10970, $26) | 0; //@line 37429
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 37430
  _putchar(10) | 0; //@line 37431
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 77; //@line 37434
   $155 = $ReallocAsyncCtx10 + 4 | 0; //@line 37435
   HEAP32[$155 >> 2] = $6; //@line 37436
   $156 = $ReallocAsyncCtx10 + 8 | 0; //@line 37437
   HEAP32[$156 >> 2] = $10; //@line 37438
   $157 = $ReallocAsyncCtx10 + 12 | 0; //@line 37439
   HEAP32[$157 >> 2] = $12; //@line 37440
   $158 = $ReallocAsyncCtx10 + 16 | 0; //@line 37441
   HEAP32[$158 >> 2] = $14; //@line 37442
   $159 = $ReallocAsyncCtx10 + 20 | 0; //@line 37443
   HEAP32[$159 >> 2] = $16; //@line 37444
   sp = STACKTOP; //@line 37445
   return;
  }
  ___async_unwind = 0; //@line 37448
  HEAP32[$ReallocAsyncCtx10 >> 2] = 77; //@line 37449
  $155 = $ReallocAsyncCtx10 + 4 | 0; //@line 37450
  HEAP32[$155 >> 2] = $6; //@line 37451
  $156 = $ReallocAsyncCtx10 + 8 | 0; //@line 37452
  HEAP32[$156 >> 2] = $10; //@line 37453
  $157 = $ReallocAsyncCtx10 + 12 | 0; //@line 37454
  HEAP32[$157 >> 2] = $12; //@line 37455
  $158 = $ReallocAsyncCtx10 + 16 | 0; //@line 37456
  HEAP32[$158 >> 2] = $14; //@line 37457
  $159 = $ReallocAsyncCtx10 + 20 | 0; //@line 37458
  HEAP32[$159 >> 2] = $16; //@line 37459
  sp = STACKTOP; //@line 37460
  return;
 }
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$off0 = 0, $162 = 0, $175 = 0, $195 = 0, $32 = 0, $58 = 0, $AsyncCtx = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx55 = 0, $AsyncCtx58 = 0, $AsyncCtx61 = 0, $AsyncCtx64 = 0, $AsyncCtx68 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1653
 STACKTOP = STACKTOP + 128 | 0; //@line 1654
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 1654
 $vararg_buffer23 = sp + 112 | 0; //@line 1655
 $vararg_buffer21 = sp + 104 | 0; //@line 1656
 $vararg_buffer19 = sp + 96 | 0; //@line 1657
 $vararg_buffer17 = sp + 88 | 0; //@line 1658
 $vararg_buffer14 = sp + 56 | 0; //@line 1659
 $vararg_buffer12 = sp + 48 | 0; //@line 1660
 $vararg_buffer9 = sp + 40 | 0; //@line 1661
 $vararg_buffer7 = sp + 32 | 0; //@line 1662
 $vararg_buffer5 = sp + 24 | 0; //@line 1663
 $vararg_buffer3 = sp + 16 | 0; //@line 1664
 _printf(10904, sp) | 0; //@line 1667
 _printf(11057, sp + 8 | 0) | 0; //@line 1668
 $AsyncCtx49 = _emscripten_alloc_async_context(108, sp) | 0; //@line 1669
 _putchar(10) | 0; //@line 1670
 if (___async) {
  HEAP32[$AsyncCtx49 >> 2] = 91; //@line 1673
  HEAP16[$AsyncCtx49 + 4 >> 1] = $3; //@line 1675
  HEAP32[$AsyncCtx49 + 8 >> 2] = $0; //@line 1677
  HEAP32[$AsyncCtx49 + 12 >> 2] = $vararg_buffer14; //@line 1679
  HEAP32[$AsyncCtx49 + 16 >> 2] = $vararg_buffer21; //@line 1681
  HEAP32[$AsyncCtx49 + 20 >> 2] = $vararg_buffer21; //@line 1683
  HEAP32[$AsyncCtx49 + 24 >> 2] = $vararg_buffer23; //@line 1685
  HEAP32[$AsyncCtx49 + 28 >> 2] = $vararg_buffer23; //@line 1687
  HEAP32[$AsyncCtx49 + 32 >> 2] = $vararg_buffer7; //@line 1689
  HEAP32[$AsyncCtx49 + 36 >> 2] = $vararg_buffer7; //@line 1691
  HEAP32[$AsyncCtx49 + 40 >> 2] = $vararg_buffer9; //@line 1693
  HEAP32[$AsyncCtx49 + 44 >> 2] = $vararg_buffer9; //@line 1695
  HEAP32[$AsyncCtx49 + 48 >> 2] = $4; //@line 1697
  HEAP32[$AsyncCtx49 + 52 >> 2] = $vararg_buffer12; //@line 1699
  HEAP32[$AsyncCtx49 + 56 >> 2] = $vararg_buffer12; //@line 1701
  HEAP32[$AsyncCtx49 + 60 >> 2] = $vararg_buffer14; //@line 1703
  HEAP32[$AsyncCtx49 + 64 >> 2] = $vararg_buffer14; //@line 1705
  HEAP32[$AsyncCtx49 + 68 >> 2] = $vararg_buffer17; //@line 1707
  HEAP32[$AsyncCtx49 + 72 >> 2] = $vararg_buffer17; //@line 1709
  HEAP32[$AsyncCtx49 + 76 >> 2] = $vararg_buffer19; //@line 1711
  HEAP32[$AsyncCtx49 + 80 >> 2] = $vararg_buffer19; //@line 1713
  HEAP32[$AsyncCtx49 + 84 >> 2] = $1; //@line 1715
  HEAP32[$AsyncCtx49 + 88 >> 2] = $vararg_buffer3; //@line 1717
  HEAP32[$AsyncCtx49 + 92 >> 2] = $vararg_buffer3; //@line 1719
  HEAP32[$AsyncCtx49 + 96 >> 2] = $vararg_buffer5; //@line 1721
  HEAP32[$AsyncCtx49 + 100 >> 2] = $vararg_buffer5; //@line 1723
  HEAP32[$AsyncCtx49 + 104 >> 2] = $2; //@line 1725
  sp = STACKTOP; //@line 1726
  STACKTOP = sp; //@line 1727
  return 0; //@line 1727
 }
 _emscripten_free_async_context($AsyncCtx49 | 0); //@line 1729
 $32 = $0 + 689 | 0; //@line 1731
 HEAP8[$32 >> 0] = $1; //@line 1732
 _printf(10904, $vararg_buffer3) | 0; //@line 1733
 HEAP32[$vararg_buffer5 >> 2] = HEAPU8[$32 >> 0]; //@line 1736
 _printf(11079, $vararg_buffer5) | 0; //@line 1737
 $AsyncCtx45 = _emscripten_alloc_async_context(88, sp) | 0; //@line 1738
 _putchar(10) | 0; //@line 1739
 if (___async) {
  HEAP32[$AsyncCtx45 >> 2] = 92; //@line 1742
  HEAP16[$AsyncCtx45 + 4 >> 1] = $3; //@line 1744
  HEAP32[$AsyncCtx45 + 8 >> 2] = $0; //@line 1746
  HEAP32[$AsyncCtx45 + 12 >> 2] = $vararg_buffer14; //@line 1748
  HEAP32[$AsyncCtx45 + 16 >> 2] = $vararg_buffer21; //@line 1750
  HEAP32[$AsyncCtx45 + 20 >> 2] = $vararg_buffer21; //@line 1752
  HEAP32[$AsyncCtx45 + 24 >> 2] = $vararg_buffer23; //@line 1754
  HEAP32[$AsyncCtx45 + 28 >> 2] = $vararg_buffer23; //@line 1756
  HEAP32[$AsyncCtx45 + 32 >> 2] = $vararg_buffer7; //@line 1758
  HEAP32[$AsyncCtx45 + 36 >> 2] = $vararg_buffer7; //@line 1760
  HEAP32[$AsyncCtx45 + 40 >> 2] = $vararg_buffer9; //@line 1762
  HEAP32[$AsyncCtx45 + 44 >> 2] = $vararg_buffer9; //@line 1764
  HEAP32[$AsyncCtx45 + 48 >> 2] = $4; //@line 1766
  HEAP32[$AsyncCtx45 + 52 >> 2] = $vararg_buffer12; //@line 1768
  HEAP32[$AsyncCtx45 + 56 >> 2] = $vararg_buffer12; //@line 1770
  HEAP32[$AsyncCtx45 + 60 >> 2] = $vararg_buffer14; //@line 1772
  HEAP32[$AsyncCtx45 + 64 >> 2] = $vararg_buffer14; //@line 1774
  HEAP32[$AsyncCtx45 + 68 >> 2] = $vararg_buffer17; //@line 1776
  HEAP32[$AsyncCtx45 + 72 >> 2] = $vararg_buffer17; //@line 1778
  HEAP32[$AsyncCtx45 + 76 >> 2] = $vararg_buffer19; //@line 1780
  HEAP32[$AsyncCtx45 + 80 >> 2] = $vararg_buffer19; //@line 1782
  HEAP32[$AsyncCtx45 + 84 >> 2] = $2; //@line 1784
  sp = STACKTOP; //@line 1785
  STACKTOP = sp; //@line 1786
  return 0; //@line 1786
 }
 _emscripten_free_async_context($AsyncCtx45 | 0); //@line 1788
 $58 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 1791
 $AsyncCtx = _emscripten_alloc_async_context(84, sp) | 0; //@line 1792
 FUNCTION_TABLE_vii[$58 & 31]($0, $2); //@line 1793
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 93; //@line 1796
  HEAP16[$AsyncCtx + 4 >> 1] = $3; //@line 1798
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 1800
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer14; //@line 1802
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer21; //@line 1804
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer21; //@line 1806
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer23; //@line 1808
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer23; //@line 1810
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer7; //@line 1812
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer7; //@line 1814
  HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer9; //@line 1816
  HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer9; //@line 1818
  HEAP32[$AsyncCtx + 48 >> 2] = $4; //@line 1820
  HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer12; //@line 1822
  HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer12; //@line 1824
  HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer14; //@line 1826
  HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer14; //@line 1828
  HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer17; //@line 1830
  HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer17; //@line 1832
  HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer19; //@line 1834
  HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer19; //@line 1836
  sp = STACKTOP; //@line 1837
  STACKTOP = sp; //@line 1838
  return 0; //@line 1838
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1840
 _printf(10904, $vararg_buffer7) | 0; //@line 1841
 HEAP32[$vararg_buffer9 >> 2] = 5; //@line 1842
 _printf(10970, $vararg_buffer9) | 0; //@line 1843
 $AsyncCtx41 = _emscripten_alloc_async_context(68, sp) | 0; //@line 1844
 _putchar(10) | 0; //@line 1845
 if (___async) {
  HEAP32[$AsyncCtx41 >> 2] = 94; //@line 1848
  HEAP16[$AsyncCtx41 + 4 >> 1] = $3; //@line 1850
  HEAP32[$AsyncCtx41 + 8 >> 2] = $vararg_buffer14; //@line 1852
  HEAP32[$AsyncCtx41 + 12 >> 2] = $0; //@line 1854
  HEAP32[$AsyncCtx41 + 16 >> 2] = $vararg_buffer21; //@line 1856
  HEAP32[$AsyncCtx41 + 20 >> 2] = $vararg_buffer21; //@line 1858
  HEAP32[$AsyncCtx41 + 24 >> 2] = $vararg_buffer23; //@line 1860
  HEAP32[$AsyncCtx41 + 28 >> 2] = $vararg_buffer23; //@line 1862
  HEAP32[$AsyncCtx41 + 32 >> 2] = $4; //@line 1864
  HEAP32[$AsyncCtx41 + 36 >> 2] = $vararg_buffer17; //@line 1866
  HEAP32[$AsyncCtx41 + 40 >> 2] = $vararg_buffer17; //@line 1868
  HEAP32[$AsyncCtx41 + 44 >> 2] = $vararg_buffer19; //@line 1870
  HEAP32[$AsyncCtx41 + 48 >> 2] = $vararg_buffer19; //@line 1872
  HEAP32[$AsyncCtx41 + 52 >> 2] = $vararg_buffer12; //@line 1874
  HEAP32[$AsyncCtx41 + 56 >> 2] = $vararg_buffer12; //@line 1876
  HEAP32[$AsyncCtx41 + 60 >> 2] = $vararg_buffer14; //@line 1878
  HEAP32[$AsyncCtx41 + 64 >> 2] = $vararg_buffer14; //@line 1880
  sp = STACKTOP; //@line 1881
  STACKTOP = sp; //@line 1882
  return 0; //@line 1882
 }
 _emscripten_free_async_context($AsyncCtx41 | 0); //@line 1884
 $AsyncCtx52 = _emscripten_alloc_async_context(68, sp) | 0; //@line 1885
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1886
 if (___async) {
  HEAP32[$AsyncCtx52 >> 2] = 95; //@line 1889
  HEAP16[$AsyncCtx52 + 4 >> 1] = $3; //@line 1891
  HEAP32[$AsyncCtx52 + 8 >> 2] = $vararg_buffer14; //@line 1893
  HEAP32[$AsyncCtx52 + 12 >> 2] = $0; //@line 1895
  HEAP32[$AsyncCtx52 + 16 >> 2] = $vararg_buffer21; //@line 1897
  HEAP32[$AsyncCtx52 + 20 >> 2] = $vararg_buffer21; //@line 1899
  HEAP32[$AsyncCtx52 + 24 >> 2] = $vararg_buffer23; //@line 1901
  HEAP32[$AsyncCtx52 + 28 >> 2] = $vararg_buffer23; //@line 1903
  HEAP32[$AsyncCtx52 + 32 >> 2] = $4; //@line 1905
  HEAP32[$AsyncCtx52 + 36 >> 2] = $vararg_buffer17; //@line 1907
  HEAP32[$AsyncCtx52 + 40 >> 2] = $vararg_buffer17; //@line 1909
  HEAP32[$AsyncCtx52 + 44 >> 2] = $vararg_buffer19; //@line 1911
  HEAP32[$AsyncCtx52 + 48 >> 2] = $vararg_buffer19; //@line 1913
  HEAP32[$AsyncCtx52 + 52 >> 2] = $vararg_buffer12; //@line 1915
  HEAP32[$AsyncCtx52 + 56 >> 2] = $vararg_buffer12; //@line 1917
  HEAP32[$AsyncCtx52 + 60 >> 2] = $vararg_buffer14; //@line 1919
  HEAP32[$AsyncCtx52 + 64 >> 2] = $vararg_buffer14; //@line 1921
  sp = STACKTOP; //@line 1922
  STACKTOP = sp; //@line 1923
  return 0; //@line 1923
 }
 _emscripten_free_async_context($AsyncCtx52 | 0); //@line 1925
 _printf(10904, $vararg_buffer12) | 0; //@line 1926
 HEAP32[$vararg_buffer14 >> 2] = 5; //@line 1927
 _printf(10999, $vararg_buffer14) | 0; //@line 1928
 $AsyncCtx37 = _emscripten_alloc_async_context(52, sp) | 0; //@line 1929
 _putchar(10) | 0; //@line 1930
 if (___async) {
  HEAP32[$AsyncCtx37 >> 2] = 96; //@line 1933
  HEAP16[$AsyncCtx37 + 4 >> 1] = $3; //@line 1935
  HEAP32[$AsyncCtx37 + 8 >> 2] = $vararg_buffer14; //@line 1937
  HEAP32[$AsyncCtx37 + 12 >> 2] = $0; //@line 1939
  HEAP32[$AsyncCtx37 + 16 >> 2] = $vararg_buffer21; //@line 1941
  HEAP32[$AsyncCtx37 + 20 >> 2] = $vararg_buffer21; //@line 1943
  HEAP32[$AsyncCtx37 + 24 >> 2] = $vararg_buffer23; //@line 1945
  HEAP32[$AsyncCtx37 + 28 >> 2] = $vararg_buffer23; //@line 1947
  HEAP32[$AsyncCtx37 + 32 >> 2] = $4; //@line 1949
  HEAP32[$AsyncCtx37 + 36 >> 2] = $vararg_buffer17; //@line 1951
  HEAP32[$AsyncCtx37 + 40 >> 2] = $vararg_buffer17; //@line 1953
  HEAP32[$AsyncCtx37 + 44 >> 2] = $vararg_buffer19; //@line 1955
  HEAP32[$AsyncCtx37 + 48 >> 2] = $vararg_buffer19; //@line 1957
  sp = STACKTOP; //@line 1958
  STACKTOP = sp; //@line 1959
  return 0; //@line 1959
 }
 _emscripten_free_async_context($AsyncCtx37 | 0); //@line 1961
 $AsyncCtx68 = _emscripten_alloc_async_context(52, sp) | 0; //@line 1962
 _wait_ms(1); //@line 1963
 if (___async) {
  HEAP32[$AsyncCtx68 >> 2] = 97; //@line 1966
  HEAP16[$AsyncCtx68 + 4 >> 1] = $3; //@line 1968
  HEAP32[$AsyncCtx68 + 8 >> 2] = $vararg_buffer14; //@line 1970
  HEAP32[$AsyncCtx68 + 12 >> 2] = $0; //@line 1972
  HEAP32[$AsyncCtx68 + 16 >> 2] = $vararg_buffer21; //@line 1974
  HEAP32[$AsyncCtx68 + 20 >> 2] = $vararg_buffer21; //@line 1976
  HEAP32[$AsyncCtx68 + 24 >> 2] = $vararg_buffer23; //@line 1978
  HEAP32[$AsyncCtx68 + 28 >> 2] = $vararg_buffer23; //@line 1980
  HEAP32[$AsyncCtx68 + 32 >> 2] = $4; //@line 1982
  HEAP32[$AsyncCtx68 + 36 >> 2] = $vararg_buffer17; //@line 1984
  HEAP32[$AsyncCtx68 + 40 >> 2] = $vararg_buffer17; //@line 1986
  HEAP32[$AsyncCtx68 + 44 >> 2] = $vararg_buffer19; //@line 1988
  HEAP32[$AsyncCtx68 + 48 >> 2] = $vararg_buffer19; //@line 1990
  sp = STACKTOP; //@line 1991
  STACKTOP = sp; //@line 1992
  return 0; //@line 1992
 }
 _emscripten_free_async_context($AsyncCtx68 | 0); //@line 1994
 $AsyncCtx55 = _emscripten_alloc_async_context(56, sp) | 0; //@line 1995
 __ZN4mbed5TimerC2Ev($vararg_buffer14); //@line 1996
 if (___async) {
  HEAP32[$AsyncCtx55 >> 2] = 98; //@line 1999
  HEAP16[$AsyncCtx55 + 4 >> 1] = $3; //@line 2001
  HEAP32[$AsyncCtx55 + 8 >> 2] = $vararg_buffer14; //@line 2003
  HEAP32[$AsyncCtx55 + 12 >> 2] = $vararg_buffer14; //@line 2005
  HEAP32[$AsyncCtx55 + 16 >> 2] = $0; //@line 2007
  HEAP32[$AsyncCtx55 + 20 >> 2] = $vararg_buffer21; //@line 2009
  HEAP32[$AsyncCtx55 + 24 >> 2] = $vararg_buffer21; //@line 2011
  HEAP32[$AsyncCtx55 + 28 >> 2] = $vararg_buffer23; //@line 2013
  HEAP32[$AsyncCtx55 + 32 >> 2] = $vararg_buffer23; //@line 2015
  HEAP32[$AsyncCtx55 + 36 >> 2] = $4; //@line 2017
  HEAP32[$AsyncCtx55 + 40 >> 2] = $vararg_buffer17; //@line 2019
  HEAP32[$AsyncCtx55 + 44 >> 2] = $vararg_buffer17; //@line 2021
  HEAP32[$AsyncCtx55 + 48 >> 2] = $vararg_buffer19; //@line 2023
  HEAP32[$AsyncCtx55 + 52 >> 2] = $vararg_buffer19; //@line 2025
  sp = STACKTOP; //@line 2026
  STACKTOP = sp; //@line 2027
  return 0; //@line 2027
 }
 _emscripten_free_async_context($AsyncCtx55 | 0); //@line 2029
 $AsyncCtx58 = _emscripten_alloc_async_context(56, sp) | 0; //@line 2030
 __ZN4mbed5Timer5startEv($vararg_buffer14); //@line 2031
 if (___async) {
  HEAP32[$AsyncCtx58 >> 2] = 99; //@line 2034
  HEAP16[$AsyncCtx58 + 4 >> 1] = $3; //@line 2036
  HEAP32[$AsyncCtx58 + 8 >> 2] = $vararg_buffer14; //@line 2038
  HEAP32[$AsyncCtx58 + 12 >> 2] = $4; //@line 2040
  HEAP32[$AsyncCtx58 + 16 >> 2] = $vararg_buffer21; //@line 2042
  HEAP32[$AsyncCtx58 + 20 >> 2] = $vararg_buffer21; //@line 2044
  HEAP32[$AsyncCtx58 + 24 >> 2] = $vararg_buffer23; //@line 2046
  HEAP32[$AsyncCtx58 + 28 >> 2] = $vararg_buffer23; //@line 2048
  HEAP32[$AsyncCtx58 + 32 >> 2] = $0; //@line 2050
  HEAP32[$AsyncCtx58 + 36 >> 2] = $vararg_buffer14; //@line 2052
  HEAP32[$AsyncCtx58 + 40 >> 2] = $vararg_buffer17; //@line 2054
  HEAP32[$AsyncCtx58 + 44 >> 2] = $vararg_buffer17; //@line 2056
  HEAP32[$AsyncCtx58 + 48 >> 2] = $vararg_buffer19; //@line 2058
  HEAP32[$AsyncCtx58 + 52 >> 2] = $vararg_buffer19; //@line 2060
  sp = STACKTOP; //@line 2061
  STACKTOP = sp; //@line 2062
  return 0; //@line 2062
 }
 _emscripten_free_async_context($AsyncCtx58 | 0); //@line 2064
 L28 : do {
  if ($3 << 16 >> 16 < -1) {
   $AsyncCtx64 = _emscripten_alloc_async_context(36, sp) | 0; //@line 2068
   $162 = __ZN4mbed5Timer7read_msEv($vararg_buffer14) | 0; //@line 2069
   if (___async) {
    HEAP32[$AsyncCtx64 >> 2] = 100; //@line 2072
    HEAP32[$AsyncCtx64 + 4 >> 2] = $4; //@line 2074
    HEAP32[$AsyncCtx64 + 8 >> 2] = $vararg_buffer17; //@line 2076
    HEAP32[$AsyncCtx64 + 12 >> 2] = $vararg_buffer17; //@line 2078
    HEAP32[$AsyncCtx64 + 16 >> 2] = $vararg_buffer19; //@line 2080
    HEAP32[$AsyncCtx64 + 20 >> 2] = $vararg_buffer19; //@line 2082
    HEAP32[$AsyncCtx64 + 24 >> 2] = $0; //@line 2084
    HEAP32[$AsyncCtx64 + 28 >> 2] = $vararg_buffer14; //@line 2086
    HEAP32[$AsyncCtx64 + 32 >> 2] = $vararg_buffer14; //@line 2088
    sp = STACKTOP; //@line 2089
    STACKTOP = sp; //@line 2090
    return 0; //@line 2090
   }
   _emscripten_free_async_context($AsyncCtx64 | 0); //@line 2092
   if (($162 | 0) < ($4 | 0)) {
    _printf(10904, $vararg_buffer17) | 0; //@line 2095
    _printf(11092, $vararg_buffer19) | 0; //@line 2096
    $AsyncCtx34 = _emscripten_alloc_async_context(16, sp) | 0; //@line 2097
    _putchar(10) | 0; //@line 2098
    if (___async) {
     HEAP32[$AsyncCtx34 >> 2] = 101; //@line 2101
     HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 2103
     HEAP32[$AsyncCtx34 + 8 >> 2] = $vararg_buffer14; //@line 2105
     HEAP32[$AsyncCtx34 + 12 >> 2] = $vararg_buffer14; //@line 2107
     sp = STACKTOP; //@line 2108
     STACKTOP = sp; //@line 2109
     return 0; //@line 2109
    } else {
     _emscripten_free_async_context($AsyncCtx34 | 0); //@line 2111
     $$0$off0 = 0; //@line 2112
     break;
    }
   } else {
    $$0$off0 = 1; //@line 2116
   }
  } else {
   while (1) {
    $AsyncCtx61 = _emscripten_alloc_async_context(36, sp) | 0; //@line 2120
    $175 = __ZN4mbed5Timer7read_msEv($vararg_buffer14) | 0; //@line 2121
    if (___async) {
     label = 27; //@line 2124
     break;
    }
    _emscripten_free_async_context($AsyncCtx61 | 0); //@line 2127
    if (($175 | 0) >= ($4 | 0)) {
     $$0$off0 = 1; //@line 2130
     break L28;
    }
    _printf(10904, $vararg_buffer21) | 0; //@line 2133
    _printf(11092, $vararg_buffer23) | 0; //@line 2134
    $AsyncCtx30 = _emscripten_alloc_async_context(36, sp) | 0; //@line 2135
    _putchar(10) | 0; //@line 2136
    if (___async) {
     label = 30; //@line 2139
     break;
    }
    _emscripten_free_async_context($AsyncCtx30 | 0); //@line 2142
   }
   if ((label | 0) == 27) {
    HEAP32[$AsyncCtx61 >> 2] = 102; //@line 2145
    HEAP32[$AsyncCtx61 + 4 >> 2] = $4; //@line 2147
    HEAP32[$AsyncCtx61 + 8 >> 2] = $vararg_buffer21; //@line 2149
    HEAP32[$AsyncCtx61 + 12 >> 2] = $vararg_buffer21; //@line 2151
    HEAP32[$AsyncCtx61 + 16 >> 2] = $vararg_buffer23; //@line 2153
    HEAP32[$AsyncCtx61 + 20 >> 2] = $vararg_buffer23; //@line 2155
    HEAP32[$AsyncCtx61 + 24 >> 2] = $0; //@line 2157
    HEAP32[$AsyncCtx61 + 28 >> 2] = $vararg_buffer14; //@line 2159
    HEAP32[$AsyncCtx61 + 32 >> 2] = $vararg_buffer14; //@line 2161
    sp = STACKTOP; //@line 2162
    STACKTOP = sp; //@line 2163
    return 0; //@line 2163
   } else if ((label | 0) == 30) {
    HEAP32[$AsyncCtx30 >> 2] = 103; //@line 2166
    HEAP32[$AsyncCtx30 + 4 >> 2] = $vararg_buffer14; //@line 2168
    HEAP32[$AsyncCtx30 + 8 >> 2] = $4; //@line 2170
    HEAP32[$AsyncCtx30 + 12 >> 2] = $vararg_buffer21; //@line 2172
    HEAP32[$AsyncCtx30 + 16 >> 2] = $vararg_buffer21; //@line 2174
    HEAP32[$AsyncCtx30 + 20 >> 2] = $vararg_buffer23; //@line 2176
    HEAP32[$AsyncCtx30 + 24 >> 2] = $vararg_buffer23; //@line 2178
    HEAP32[$AsyncCtx30 + 28 >> 2] = $0; //@line 2180
    HEAP32[$AsyncCtx30 + 32 >> 2] = $vararg_buffer14; //@line 2182
    sp = STACKTOP; //@line 2183
    STACKTOP = sp; //@line 2184
    return 0; //@line 2184
   }
  }
 } while (0);
 $195 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 2190
 $AsyncCtx27 = _emscripten_alloc_async_context(16, sp) | 0; //@line 2191
 FUNCTION_TABLE_vi[$195 & 1023]($0); //@line 2192
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 104; //@line 2195
  HEAP32[$AsyncCtx27 + 4 >> 2] = $vararg_buffer14; //@line 2197
  HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer14; //@line 2199
  HEAP8[$AsyncCtx27 + 12 >> 0] = $$0$off0 & 1; //@line 2202
  sp = STACKTOP; //@line 2203
  STACKTOP = sp; //@line 2204
  return 0; //@line 2204
 } else {
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 2206
  __ZN4mbed5TimerD2Ev($vararg_buffer14); //@line 2207
  STACKTOP = sp; //@line 2208
  return $$0$off0 | 0; //@line 2208
 }
 return 0; //@line 2210
}
function __ZN12LoRaWANStack9handle_txEhPKhth($0, $1, $2, $3, $trunc) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $trunc = $trunc | 0;
 var $$0 = 0, $$0$i43 = 0, $$1 = 0, $123 = 0, $130 = 0, $154 = 0, $155 = 0, $156 = 0, $191 = 0, $196 = 0, $205 = 0, $220 = 0, $4 = 0, $48 = 0, $49 = 0, $50 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx36 = 0, $AsyncCtx40 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx63 = 0, $AsyncCtx66 = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9091
 STACKTOP = STACKTOP + 128 | 0; //@line 9092
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 9092
 $vararg_buffer31 = sp + 112 | 0; //@line 9093
 $vararg_buffer29 = sp + 104 | 0; //@line 9094
 $vararg_buffer25 = sp + 96 | 0; //@line 9095
 $vararg_buffer23 = sp + 88 | 0; //@line 9096
 $vararg_buffer19 = sp + 80 | 0; //@line 9097
 $vararg_buffer17 = sp + 72 | 0; //@line 9098
 $vararg_buffer15 = sp + 64 | 0; //@line 9099
 $vararg_buffer13 = sp + 56 | 0; //@line 9100
 $vararg_buffer11 = sp + 48 | 0; //@line 9101
 $vararg_buffer9 = sp + 40 | 0; //@line 9102
 $vararg_buffer6 = sp + 32 | 0; //@line 9103
 $vararg_buffer4 = sp + 24 | 0; //@line 9104
 $vararg_buffer1 = sp + 8 | 0; //@line 9105
 _printf(12139, sp) | 0; //@line 9107
 $4 = $0 + 1932 | 0; //@line 9108
 $7 = $0 + 1964 | 0; //@line 9111
 $9 = HEAPU8[$7 >> 0] | 0; //@line 9113
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$4 >> 0]; //@line 9114
 HEAP32[$vararg_buffer1 + 4 >> 2] = $9; //@line 9116
 _printf(12306, $vararg_buffer1) | 0; //@line 9117
 $AsyncCtx55 = _emscripten_alloc_async_context(132, sp) | 0; //@line 9118
 _putchar(10) | 0; //@line 9119
 if (___async) {
  HEAP32[$AsyncCtx55 >> 2] = 298; //@line 9122
  HEAP32[$AsyncCtx55 + 4 >> 2] = $vararg_buffer25; //@line 9124
  HEAP32[$AsyncCtx55 + 8 >> 2] = $vararg_buffer23; //@line 9126
  HEAP32[$AsyncCtx55 + 12 >> 2] = $vararg_buffer17; //@line 9128
  HEAP32[$AsyncCtx55 + 16 >> 2] = $vararg_buffer23; //@line 9130
  HEAP32[$AsyncCtx55 + 20 >> 2] = $vararg_buffer9; //@line 9132
  HEAP32[$AsyncCtx55 + 24 >> 2] = $vararg_buffer25; //@line 9134
  HEAP32[$AsyncCtx55 + 28 >> 2] = $vararg_buffer29; //@line 9136
  HEAP32[$AsyncCtx55 + 32 >> 2] = $vararg_buffer1; //@line 9138
  HEAP32[$AsyncCtx55 + 36 >> 2] = $vararg_buffer6; //@line 9140
  HEAP32[$AsyncCtx55 + 40 >> 2] = $vararg_buffer11; //@line 9142
  HEAP32[$AsyncCtx55 + 44 >> 2] = $7; //@line 9144
  HEAP32[$AsyncCtx55 + 48 >> 2] = $vararg_buffer31; //@line 9146
  HEAP32[$AsyncCtx55 + 52 >> 2] = $vararg_buffer11; //@line 9148
  HEAP32[$AsyncCtx55 + 56 >> 2] = $vararg_buffer19; //@line 9150
  HEAP32[$AsyncCtx55 + 60 >> 2] = $vararg_buffer13; //@line 9152
  HEAP32[$AsyncCtx55 + 64 >> 2] = $vararg_buffer13; //@line 9154
  HEAP32[$AsyncCtx55 + 68 >> 2] = $vararg_buffer6; //@line 9156
  HEAP32[$AsyncCtx55 + 72 >> 2] = $vararg_buffer6; //@line 9158
  HEAP32[$AsyncCtx55 + 76 >> 2] = $vararg_buffer17; //@line 9160
  HEAP32[$AsyncCtx55 + 80 >> 2] = $vararg_buffer31; //@line 9162
  HEAP8[$AsyncCtx55 + 84 >> 0] = $trunc; //@line 9164
  HEAP16[$AsyncCtx55 + 86 >> 1] = $3; //@line 9166
  HEAP32[$AsyncCtx55 + 88 >> 2] = $2; //@line 9168
  HEAP32[$AsyncCtx55 + 92 >> 2] = $vararg_buffer4; //@line 9170
  HEAP32[$AsyncCtx55 + 96 >> 2] = $vararg_buffer4; //@line 9172
  HEAP32[$AsyncCtx55 + 100 >> 2] = $vararg_buffer29; //@line 9174
  HEAP32[$AsyncCtx55 + 104 >> 2] = $vararg_buffer15; //@line 9176
  HEAP32[$AsyncCtx55 + 108 >> 2] = $4; //@line 9178
  HEAP32[$AsyncCtx55 + 112 >> 2] = $vararg_buffer19; //@line 9180
  HEAP32[$AsyncCtx55 + 116 >> 2] = $vararg_buffer15; //@line 9182
  HEAP8[$AsyncCtx55 + 120 >> 0] = $1; //@line 9184
  HEAP32[$AsyncCtx55 + 124 >> 2] = $0; //@line 9186
  HEAP32[$AsyncCtx55 + 128 >> 2] = $vararg_buffer9; //@line 9188
  sp = STACKTOP; //@line 9189
  STACKTOP = sp; //@line 9190
  return 0; //@line 9190
 }
 _emscripten_free_async_context($AsyncCtx55 | 0); //@line 9192
 if (!(HEAP8[$4 >> 0] | 0)) {
  $$1 = -1017; //@line 9196
  STACKTOP = sp; //@line 9197
  return $$1 | 0; //@line 9197
 }
 if (HEAP8[$7 >> 0] | 0) {
  $$1 = -1001; //@line 9202
  STACKTOP = sp; //@line 9203
  return $$1 | 0; //@line 9203
 }
 $48 = $3 << 16 >> 16 == 0; //@line 9206
 if (!(($2 | 0) != 0 | $48)) {
  $$1 = -1003; //@line 9209
  STACKTOP = sp; //@line 9210
  return $$1 | 0; //@line 9210
 }
 HEAP32[$vararg_buffer1 >> 2] = 1; //@line 9212
 $49 = $0 + 4 | 0; //@line 9213
 $AsyncCtx63 = _emscripten_alloc_async_context(132, sp) | 0; //@line 9214
 $50 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($49, $vararg_buffer1) | 0; //@line 9215
 if (___async) {
  HEAP32[$AsyncCtx63 >> 2] = 299; //@line 9218
  HEAP32[$AsyncCtx63 + 4 >> 2] = $vararg_buffer25; //@line 9220
  HEAP32[$AsyncCtx63 + 8 >> 2] = $49; //@line 9222
  HEAP32[$AsyncCtx63 + 12 >> 2] = $vararg_buffer23; //@line 9224
  HEAP32[$AsyncCtx63 + 16 >> 2] = $vararg_buffer17; //@line 9226
  HEAP32[$AsyncCtx63 + 20 >> 2] = $vararg_buffer23; //@line 9228
  HEAP32[$AsyncCtx63 + 24 >> 2] = $vararg_buffer9; //@line 9230
  HEAP32[$AsyncCtx63 + 28 >> 2] = $vararg_buffer25; //@line 9232
  HEAP32[$AsyncCtx63 + 32 >> 2] = $vararg_buffer29; //@line 9234
  HEAP32[$AsyncCtx63 + 36 >> 2] = $vararg_buffer1; //@line 9236
  HEAP32[$AsyncCtx63 + 40 >> 2] = $vararg_buffer6; //@line 9238
  HEAP32[$AsyncCtx63 + 44 >> 2] = $vararg_buffer11; //@line 9240
  HEAP32[$AsyncCtx63 + 48 >> 2] = $vararg_buffer31; //@line 9242
  HEAP32[$AsyncCtx63 + 52 >> 2] = $vararg_buffer11; //@line 9244
  HEAP32[$AsyncCtx63 + 56 >> 2] = $vararg_buffer19; //@line 9246
  HEAP32[$AsyncCtx63 + 60 >> 2] = $vararg_buffer1; //@line 9248
  HEAP32[$AsyncCtx63 + 64 >> 2] = $vararg_buffer13; //@line 9250
  HEAP32[$AsyncCtx63 + 68 >> 2] = $vararg_buffer13; //@line 9252
  HEAP32[$AsyncCtx63 + 72 >> 2] = $vararg_buffer6; //@line 9254
  HEAP32[$AsyncCtx63 + 76 >> 2] = $vararg_buffer6; //@line 9256
  HEAP32[$AsyncCtx63 + 80 >> 2] = $vararg_buffer17; //@line 9258
  HEAP32[$AsyncCtx63 + 84 >> 2] = $vararg_buffer31; //@line 9260
  HEAP8[$AsyncCtx63 + 88 >> 0] = $trunc; //@line 9262
  HEAP8[$AsyncCtx63 + 89 >> 0] = $48 & 1; //@line 9265
  HEAP16[$AsyncCtx63 + 90 >> 1] = $3; //@line 9267
  HEAP32[$AsyncCtx63 + 92 >> 2] = $2; //@line 9269
  HEAP32[$AsyncCtx63 + 96 >> 2] = $vararg_buffer4; //@line 9271
  HEAP32[$AsyncCtx63 + 100 >> 2] = $vararg_buffer4; //@line 9273
  HEAP32[$AsyncCtx63 + 104 >> 2] = $vararg_buffer29; //@line 9275
  HEAP32[$AsyncCtx63 + 108 >> 2] = $vararg_buffer15; //@line 9277
  HEAP32[$AsyncCtx63 + 112 >> 2] = $vararg_buffer19; //@line 9279
  HEAP32[$AsyncCtx63 + 116 >> 2] = $vararg_buffer15; //@line 9281
  HEAP8[$AsyncCtx63 + 120 >> 0] = $1; //@line 9283
  HEAP32[$AsyncCtx63 + 124 >> 2] = $0; //@line 9285
  HEAP32[$AsyncCtx63 + 128 >> 2] = $vararg_buffer9; //@line 9287
  sp = STACKTOP; //@line 9288
  STACKTOP = sp; //@line 9289
  return 0; //@line 9289
 }
 _emscripten_free_async_context($AsyncCtx63 | 0); //@line 9291
 _printf(12139, $vararg_buffer4) | 0; //@line 9292
 HEAP32[$vararg_buffer6 >> 2] = $50; //@line 9293
 _printf(12359, $vararg_buffer6) | 0; //@line 9294
 $AsyncCtx51 = _emscripten_alloc_async_context(128, sp) | 0; //@line 9295
 _putchar(10) | 0; //@line 9296
 if (___async) {
  HEAP32[$AsyncCtx51 >> 2] = 300; //@line 9299
  HEAP32[$AsyncCtx51 + 4 >> 2] = $vararg_buffer13; //@line 9301
  HEAP32[$AsyncCtx51 + 8 >> 2] = $vararg_buffer13; //@line 9303
  HEAP32[$AsyncCtx51 + 12 >> 2] = $vararg_buffer15; //@line 9305
  HEAP32[$AsyncCtx51 + 16 >> 2] = $vararg_buffer15; //@line 9307
  HEAP32[$AsyncCtx51 + 20 >> 2] = $0; //@line 9309
  HEAP8[$AsyncCtx51 + 24 >> 0] = $1; //@line 9311
  HEAP32[$AsyncCtx51 + 28 >> 2] = $vararg_buffer6; //@line 9313
  HEAP16[$AsyncCtx51 + 32 >> 1] = $3; //@line 9315
  HEAP32[$AsyncCtx51 + 36 >> 2] = $49; //@line 9317
  HEAP32[$AsyncCtx51 + 40 >> 2] = $vararg_buffer9; //@line 9319
  HEAP32[$AsyncCtx51 + 44 >> 2] = $vararg_buffer9; //@line 9321
  HEAP32[$AsyncCtx51 + 48 >> 2] = $vararg_buffer11; //@line 9323
  HEAP32[$AsyncCtx51 + 52 >> 2] = $vararg_buffer11; //@line 9325
  HEAP32[$AsyncCtx51 + 56 >> 2] = $2; //@line 9327
  HEAP8[$AsyncCtx51 + 60 >> 0] = $trunc; //@line 9329
  HEAP32[$AsyncCtx51 + 64 >> 2] = $vararg_buffer29; //@line 9331
  HEAP32[$AsyncCtx51 + 68 >> 2] = $vararg_buffer29; //@line 9333
  HEAP32[$AsyncCtx51 + 72 >> 2] = $vararg_buffer31; //@line 9335
  HEAP32[$AsyncCtx51 + 76 >> 2] = $vararg_buffer31; //@line 9337
  HEAP32[$AsyncCtx51 + 80 >> 2] = $vararg_buffer1; //@line 9339
  HEAP32[$AsyncCtx51 + 84 >> 2] = $vararg_buffer1; //@line 9341
  HEAP32[$AsyncCtx51 + 88 >> 2] = $vararg_buffer23; //@line 9343
  HEAP32[$AsyncCtx51 + 92 >> 2] = $vararg_buffer23; //@line 9345
  HEAP32[$AsyncCtx51 + 96 >> 2] = $vararg_buffer25; //@line 9347
  HEAP32[$AsyncCtx51 + 100 >> 2] = $vararg_buffer25; //@line 9349
  HEAP32[$AsyncCtx51 + 104 >> 2] = $vararg_buffer17; //@line 9351
  HEAP32[$AsyncCtx51 + 108 >> 2] = $vararg_buffer17; //@line 9353
  HEAP32[$AsyncCtx51 + 112 >> 2] = $vararg_buffer19; //@line 9355
  HEAP32[$AsyncCtx51 + 116 >> 2] = $vararg_buffer19; //@line 9357
  HEAP8[$AsyncCtx51 + 120 >> 0] = $48 & 1; //@line 9360
  HEAP32[$AsyncCtx51 + 124 >> 2] = $50; //@line 9362
  sp = STACKTOP; //@line 9363
  STACKTOP = sp; //@line 9364
  return 0; //@line 9364
 }
 _emscripten_free_async_context($AsyncCtx51 | 0); //@line 9366
 if (!$50) {
  if (!(HEAP8[$vararg_buffer1 + 4 >> 0] | 0)) {
   $$0 = -1009; //@line 9373
  } else {
   label = 12; //@line 9375
  }
 } else {
  label = 12; //@line 9378
 }
 do {
  if ((label | 0) == 12) {
   if (($1 + -1 & 255) >= 223) {
    _printf(11887, $vararg_buffer9) | 0; //@line 9385
    _printf(12376, $vararg_buffer11) | 0; //@line 9386
    $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9387
    _putchar(10) | 0; //@line 9388
    if (___async) {
     HEAP32[$AsyncCtx47 >> 2] = 301; //@line 9391
     HEAP32[$AsyncCtx47 + 4 >> 2] = $vararg_buffer1; //@line 9393
     sp = STACKTOP; //@line 9394
     STACKTOP = sp; //@line 9395
     return 0; //@line 9395
    } else {
     _emscripten_free_async_context($AsyncCtx47 | 0); //@line 9397
     $$0 = -1015; //@line 9398
     break;
    }
   }
   $123 = $0 + 2285 | 0; //@line 9402
   HEAP8[$123 >> 0] = $1; //@line 9403
   if ($trunc << 24 >> 24 == 0 | ($trunc & 15) == 3) {
    _printf(11887, $vararg_buffer13) | 0; //@line 9409
    _printf(12413, $vararg_buffer15) | 0; //@line 9410
    $AsyncCtx44 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9411
    _putchar(10) | 0; //@line 9412
    if (___async) {
     HEAP32[$AsyncCtx44 >> 2] = 302; //@line 9415
     HEAP32[$AsyncCtx44 + 4 >> 2] = $vararg_buffer1; //@line 9417
     sp = STACKTOP; //@line 9418
     STACKTOP = sp; //@line 9419
     return 0; //@line 9419
    } else {
     _emscripten_free_async_context($AsyncCtx44 | 0); //@line 9421
     $$0 = -1003; //@line 9422
     break;
    }
   }
   HEAP8[$0 + 1965 >> 0] = $1; //@line 9427
   $AsyncCtx59 = _emscripten_alloc_async_context(88, sp) | 0; //@line 9429
   $130 = __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t($49, $3 & 255, $vararg_buffer6) | 0; //@line 9430
   if (___async) {
    HEAP32[$AsyncCtx59 >> 2] = 303; //@line 9433
    HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 9435
    HEAP32[$AsyncCtx59 + 8 >> 2] = $2; //@line 9437
    HEAP32[$AsyncCtx59 + 12 >> 2] = $vararg_buffer29; //@line 9439
    HEAP32[$AsyncCtx59 + 16 >> 2] = $vararg_buffer29; //@line 9441
    HEAP32[$AsyncCtx59 + 20 >> 2] = $vararg_buffer31; //@line 9443
    HEAP32[$AsyncCtx59 + 24 >> 2] = $vararg_buffer31; //@line 9445
    HEAP32[$AsyncCtx59 + 28 >> 2] = $vararg_buffer1; //@line 9447
    HEAP32[$AsyncCtx59 + 32 >> 2] = $vararg_buffer6; //@line 9449
    HEAP32[$AsyncCtx59 + 36 >> 2] = $vararg_buffer6; //@line 9451
    HEAP16[$AsyncCtx59 + 40 >> 1] = $3; //@line 9453
    HEAP32[$AsyncCtx59 + 44 >> 2] = $vararg_buffer23; //@line 9455
    HEAP32[$AsyncCtx59 + 48 >> 2] = $vararg_buffer23; //@line 9457
    HEAP32[$AsyncCtx59 + 52 >> 2] = $vararg_buffer25; //@line 9459
    HEAP32[$AsyncCtx59 + 56 >> 2] = $vararg_buffer25; //@line 9461
    HEAP32[$AsyncCtx59 + 60 >> 2] = $123; //@line 9463
    HEAP8[$AsyncCtx59 + 64 >> 0] = $trunc; //@line 9465
    HEAP32[$AsyncCtx59 + 68 >> 2] = $vararg_buffer17; //@line 9467
    HEAP32[$AsyncCtx59 + 72 >> 2] = $vararg_buffer17; //@line 9469
    HEAP32[$AsyncCtx59 + 76 >> 2] = $vararg_buffer19; //@line 9471
    HEAP32[$AsyncCtx59 + 80 >> 2] = $vararg_buffer19; //@line 9473
    HEAP8[$AsyncCtx59 + 84 >> 0] = $48 & 1; //@line 9476
    sp = STACKTOP; //@line 9477
    STACKTOP = sp; //@line 9478
    return 0; //@line 9478
   }
   _emscripten_free_async_context($AsyncCtx59 | 0); //@line 9480
   $154 = ($130 | 0) == -1010 ? HEAP8[$vararg_buffer6 >> 0] | 0 : HEAP8[$vararg_buffer6 + 1 >> 0] | 0; //@line 9485
   $$0$i43 = $154 & 255; //@line 9486
   $155 = $154 & 255; //@line 9487
   $156 = $3 & 65535; //@line 9488
   do {
    if (($$0$i43 & 65535) < ($3 & 65535)) {
     _printf(12139, $vararg_buffer17) | 0; //@line 9492
     HEAP32[$vararg_buffer19 >> 2] = $156; //@line 9493
     HEAP32[$vararg_buffer19 + 4 >> 2] = $155; //@line 9495
     _printf(12473, $vararg_buffer19) | 0; //@line 9496
     $AsyncCtx40 = _emscripten_alloc_async_context(68, sp) | 0; //@line 9497
     _putchar(10) | 0; //@line 9498
     if (___async) {
      HEAP32[$AsyncCtx40 >> 2] = 304; //@line 9501
      HEAP32[$AsyncCtx40 + 4 >> 2] = $156; //@line 9503
      HEAP32[$AsyncCtx40 + 8 >> 2] = $155; //@line 9505
      HEAP32[$AsyncCtx40 + 12 >> 2] = $0; //@line 9507
      HEAP16[$AsyncCtx40 + 16 >> 1] = $$0$i43; //@line 9509
      HEAP32[$AsyncCtx40 + 20 >> 2] = $2; //@line 9511
      HEAP8[$AsyncCtx40 + 24 >> 0] = $trunc; //@line 9513
      HEAP32[$AsyncCtx40 + 28 >> 2] = $vararg_buffer23; //@line 9515
      HEAP32[$AsyncCtx40 + 32 >> 2] = $vararg_buffer23; //@line 9517
      HEAP32[$AsyncCtx40 + 36 >> 2] = $vararg_buffer25; //@line 9519
      HEAP32[$AsyncCtx40 + 40 >> 2] = $vararg_buffer25; //@line 9521
      HEAP32[$AsyncCtx40 + 44 >> 2] = $123; //@line 9523
      HEAP32[$AsyncCtx40 + 48 >> 2] = $vararg_buffer29; //@line 9525
      HEAP32[$AsyncCtx40 + 52 >> 2] = $vararg_buffer29; //@line 9527
      HEAP32[$AsyncCtx40 + 56 >> 2] = $vararg_buffer31; //@line 9529
      HEAP32[$AsyncCtx40 + 60 >> 2] = $vararg_buffer31; //@line 9531
      HEAP32[$AsyncCtx40 + 64 >> 2] = $vararg_buffer1; //@line 9533
      sp = STACKTOP; //@line 9534
      STACKTOP = sp; //@line 9535
      return 0; //@line 9535
     } else {
      _emscripten_free_async_context($AsyncCtx40 | 0); //@line 9537
      HEAP16[$0 + 2232 >> 1] = $156 - $155; //@line 9541
      HEAP16[$0 + 2230 >> 1] = $$0$i43; //@line 9543
      _memcpy($0 + 1975 | 0, $2 | 0, $155 | 0) | 0; //@line 9545
      break;
     }
    } else {
     HEAP16[$0 + 2230 >> 1] = $3; //@line 9550
     HEAP16[$0 + 2232 >> 1] = 0; //@line 9552
     if (!$48) {
      _memcpy($0 + 1975 | 0, $2 | 0, $156 | 0) | 0; //@line 9555
     }
    }
   } while (0);
   switch ($trunc & 15) {
   case 9:
   case 5:
   case 1:
    {
     HEAP32[$0 + 1968 >> 2] = 0; //@line 9563
     HEAP8[$0 + 1972 >> 0] = HEAP8[$123 >> 0] | 0; //@line 9566
     switch ($trunc & 15) {
     case 6:
     case 2:
      {
       label = 30; //@line 9570
       break;
      }
     default:
      {}
     }
     break;
    }
   case 10:
   case 6:
   case 2:
    {
     label = 30; //@line 9579
     break;
    }
   default:
    {}
   }
   if ((label | 0) == 30) {
    HEAP32[$0 + 1968 >> 2] = 1; //@line 9587
    HEAP8[$0 + 1972 >> 0] = HEAP8[$123 >> 0] | 0; //@line 9590
    HEAP8[$0 + 1974 >> 0] = HEAP8[$0 + 2284 >> 0] | 0; //@line 9594
   }
   _printf(12139, $vararg_buffer23) | 0; //@line 9596
   $191 = $0 + 2230 | 0; //@line 9597
   $196 = HEAPU16[$0 + 2232 >> 1] | 0; //@line 9602
   HEAP32[$vararg_buffer25 >> 2] = HEAPU16[$191 >> 1]; //@line 9603
   HEAP32[$vararg_buffer25 + 4 >> 2] = $196; //@line 9605
   _printf(12528, $vararg_buffer25) | 0; //@line 9606
   $AsyncCtx36 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9607
   _putchar(10) | 0; //@line 9608
   if (___async) {
    HEAP32[$AsyncCtx36 >> 2] = 305; //@line 9611
    HEAP32[$AsyncCtx36 + 4 >> 2] = $0; //@line 9613
    HEAP32[$AsyncCtx36 + 8 >> 2] = $vararg_buffer29; //@line 9615
    HEAP32[$AsyncCtx36 + 12 >> 2] = $vararg_buffer29; //@line 9617
    HEAP32[$AsyncCtx36 + 16 >> 2] = $vararg_buffer31; //@line 9619
    HEAP32[$AsyncCtx36 + 20 >> 2] = $vararg_buffer31; //@line 9621
    HEAP32[$AsyncCtx36 + 24 >> 2] = $191; //@line 9623
    HEAP32[$AsyncCtx36 + 28 >> 2] = $vararg_buffer1; //@line 9625
    sp = STACKTOP; //@line 9626
    STACKTOP = sp; //@line 9627
    return 0; //@line 9627
   }
   _emscripten_free_async_context($AsyncCtx36 | 0); //@line 9629
   HEAP32[$0 + 1876 >> 2] = 5; //@line 9631
   $AsyncCtx66 = _emscripten_alloc_async_context(28, sp) | 0; //@line 9632
   $205 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 9633
   if (___async) {
    HEAP32[$AsyncCtx66 >> 2] = 306; //@line 9636
    HEAP32[$AsyncCtx66 + 4 >> 2] = $vararg_buffer29; //@line 9638
    HEAP32[$AsyncCtx66 + 8 >> 2] = $vararg_buffer29; //@line 9640
    HEAP32[$AsyncCtx66 + 12 >> 2] = $vararg_buffer31; //@line 9642
    HEAP32[$AsyncCtx66 + 16 >> 2] = $vararg_buffer31; //@line 9644
    HEAP32[$AsyncCtx66 + 20 >> 2] = $191; //@line 9646
    HEAP32[$AsyncCtx66 + 24 >> 2] = $vararg_buffer1; //@line 9648
    sp = STACKTOP; //@line 9649
    STACKTOP = sp; //@line 9650
    return 0; //@line 9650
   }
   _emscripten_free_async_context($AsyncCtx66 | 0); //@line 9652
   _printf(12139, $vararg_buffer29) | 0; //@line 9653
   HEAP32[$vararg_buffer31 >> 2] = $205; //@line 9654
   _printf(12554, $vararg_buffer31) | 0; //@line 9655
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 9656
   _putchar(10) | 0; //@line 9657
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 307; //@line 9660
    HEAP32[$AsyncCtx + 4 >> 2] = $205; //@line 9662
    HEAP32[$AsyncCtx + 8 >> 2] = $191; //@line 9664
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 9666
    sp = STACKTOP; //@line 9667
    STACKTOP = sp; //@line 9668
    return 0; //@line 9668
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 9670
   if (!$205) {
    $220 = HEAPU16[$191 >> 1] | 0; //@line 9675
   } else {
    $220 = $205 << 16 >> 16; //@line 9679
   }
   $$0 = $220 & 65535; //@line 9682
  }
 } while (0);
 $$1 = $$0; //@line 9685
 STACKTOP = sp; //@line 9686
 return $$1 | 0; //@line 9686
}
function __ZN7LoRaMac11schedule_txEv($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$pre$phiZ2D = 0, $$sink = 0, $1 = 0, $108 = 0, $11 = 0, $126 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $14 = 0, $151 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $179 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $2 = 0, $20 = 0, $215 = 0, $216 = 0, $218 = 0, $240 = 0, $258 = 0, $261 = 0, $270 = 0, $272 = 0, $28 = 0, $3 = 0, $34 = 0, $35 = 0, $37 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 16108
 STACKTOP = STACKTOP + 80 | 0; //@line 16109
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 16109
 $vararg_buffer10 = sp + 40 | 0; //@line 16110
 $vararg_buffer8 = sp + 32 | 0; //@line 16111
 $vararg_buffer6 = sp + 24 | 0; //@line 16112
 $vararg_buffer4 = sp + 16 | 0; //@line 16113
 $vararg_buffer1 = sp + 8 | 0; //@line 16114
 $vararg_buffer = sp; //@line 16115
 $1 = sp + 60 | 0; //@line 16116
 $2 = sp + 56 | 0; //@line 16117
 $3 = sp + 44 | 0; //@line 16118
 HEAP32[$2 >> 2] = 0; //@line 16119
 switch (HEAP8[$0 + 1152 >> 0] | 0) {
 case 0:
  {
   $6 = $0 + 984 | 0; //@line 16124
   HEAP32[$6 >> 2] = 0; //@line 16125
   $$pre$phiZ2D = $6; //@line 16126
   break;
  }
 case -1:
  {
   $$1 = -1011; //@line 16130
   STACKTOP = sp; //@line 16131
   return $$1 | 0; //@line 16131
  }
 default:
  {
   $$pre$phiZ2D = $0 + 984 | 0; //@line 16136
  }
 }
 $8 = HEAP8[$0 + 379 >> 0] | 0; //@line 16140
 $9 = $0 + 372 | 0; //@line 16141
 HEAP8[$1 >> 0] = HEAP8[$9 >> 0] | 0; //@line 16143
 $11 = $0 + 375 | 0; //@line 16144
 HEAP8[$11 >> 0] = 1; //@line 16145
 HEAP8[$1 + 2 >> 0] = 1; //@line 16147
 HEAP8[$1 + 3 >> 0] = $8; //@line 16149
 $14 = $0 + 356 | 0; //@line 16150
 HEAP32[$1 + 4 >> 2] = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$14 >> 2] | 0, HEAP32[$0 + 988 >> 2] | 0) | 0; //@line 16156
 $20 = $0 + 992 | 0; //@line 16157
 HEAP32[$1 + 8 >> 2] = HEAP32[$20 >> 2]; //@line 16160
 HEAP8[$1 + 1 >> 0] = HEAP8[$0 + 376 >> 0] | 0; //@line 16164
 __ZN7LoRaPHY17calculate_backoffEP16backoff_params_s(HEAP32[$0 >> 2] | 0, $1); //@line 16166
 $28 = HEAP32[$20 >> 2] | 0; //@line 16168
 $34 = (Math_imul($28, HEAPU16[$0 + 1154 >> 1] | 0) | 0) + ((HEAP32[$$pre$phiZ2D >> 2] | 0) - $28) | 0; //@line 16174
 HEAP32[$$pre$phiZ2D >> 2] = $34; //@line 16175
 HEAP32[$3 >> 2] = $34; //@line 16176
 $35 = $0 + 1097 | 0; //@line 16177
 $37 = $3 + 8 | 0; //@line 16179
 HEAP8[$37 >> 0] = HEAP8[$35 >> 0] | 0; //@line 16180
 HEAP8[$11 >> 0] = 1; //@line 16181
 HEAP8[$3 + 10 >> 0] = 1; //@line 16183
 HEAP8[$3 + 9 >> 0] = HEAP8[$9 >> 0] | 0; //@line 16186
 HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 980 >> 2]; //@line 16190
 $44 = HEAP32[$0 >> 2] | 0; //@line 16191
 $47 = HEAP32[(HEAP32[$44 >> 2] | 0) + 56 >> 2] | 0; //@line 16194
 $48 = $0 + 378 | 0; //@line 16195
 $AsyncCtx = _emscripten_alloc_async_context(100, sp) | 0; //@line 16196
 $49 = FUNCTION_TABLE_iiiiii[$47 & 7]($44, $3, $48, $2, $$pre$phiZ2D) | 0; //@line 16197
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 486; //@line 16200
  HEAP32[$AsyncCtx + 4 >> 2] = $14; //@line 16202
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 16204
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 16206
  HEAP32[$AsyncCtx + 16 >> 2] = $9; //@line 16208
  HEAP32[$AsyncCtx + 20 >> 2] = $35; //@line 16210
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer4; //@line 16212
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer4; //@line 16214
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer6; //@line 16216
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer6; //@line 16218
  HEAP32[$AsyncCtx + 40 >> 2] = $3; //@line 16220
  HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 16222
  HEAP32[$AsyncCtx + 48 >> 2] = $0; //@line 16224
  HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer8; //@line 16226
  HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer8; //@line 16228
  HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer10; //@line 16230
  HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer10; //@line 16232
  HEAP32[$AsyncCtx + 68 >> 2] = $48; //@line 16234
  HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer; //@line 16236
  HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer; //@line 16238
  HEAP32[$AsyncCtx + 80 >> 2] = $37; //@line 16240
  HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer1; //@line 16242
  HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer1; //@line 16244
  HEAP32[$AsyncCtx + 92 >> 2] = $3; //@line 16246
  HEAP32[$AsyncCtx + 96 >> 2] = $$pre$phiZ2D; //@line 16248
  sp = STACKTOP; //@line 16249
  STACKTOP = sp; //@line 16250
  return 0; //@line 16250
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16252
 L9 : do {
  if (!$49) {
   while (1) {
    $75 = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 16257
    HEAP8[$35 >> 0] = $75; //@line 16258
    HEAP8[$37 >> 0] = $75; //@line 16259
    $76 = HEAP32[$0 >> 2] | 0; //@line 16260
    $79 = HEAP32[(HEAP32[$76 >> 2] | 0) + 56 >> 2] | 0; //@line 16263
    $AsyncCtx14 = _emscripten_alloc_async_context(100, sp) | 0; //@line 16264
    $80 = FUNCTION_TABLE_iiiiii[$79 & 7]($76, $3, $48, $2, $$pre$phiZ2D) | 0; //@line 16265
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 16270
    if ($80) {
     break L9;
    }
   }
   HEAP32[$AsyncCtx14 >> 2] = 487; //@line 16275
   HEAP32[$AsyncCtx14 + 4 >> 2] = $14; //@line 16277
   HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 16279
   HEAP32[$AsyncCtx14 + 12 >> 2] = $2; //@line 16281
   HEAP32[$AsyncCtx14 + 16 >> 2] = $9; //@line 16283
   HEAP32[$AsyncCtx14 + 20 >> 2] = $35; //@line 16285
   HEAP32[$AsyncCtx14 + 24 >> 2] = $vararg_buffer4; //@line 16287
   HEAP32[$AsyncCtx14 + 28 >> 2] = $vararg_buffer4; //@line 16289
   HEAP32[$AsyncCtx14 + 32 >> 2] = $vararg_buffer6; //@line 16291
   HEAP32[$AsyncCtx14 + 36 >> 2] = $vararg_buffer6; //@line 16293
   HEAP32[$AsyncCtx14 + 40 >> 2] = $3; //@line 16295
   HEAP32[$AsyncCtx14 + 44 >> 2] = $2; //@line 16297
   HEAP32[$AsyncCtx14 + 48 >> 2] = $0; //@line 16299
   HEAP32[$AsyncCtx14 + 52 >> 2] = $vararg_buffer8; //@line 16301
   HEAP32[$AsyncCtx14 + 56 >> 2] = $vararg_buffer8; //@line 16303
   HEAP32[$AsyncCtx14 + 60 >> 2] = $vararg_buffer10; //@line 16305
   HEAP32[$AsyncCtx14 + 64 >> 2] = $vararg_buffer10; //@line 16307
   HEAP32[$AsyncCtx14 + 68 >> 2] = $48; //@line 16309
   HEAP32[$AsyncCtx14 + 72 >> 2] = $vararg_buffer; //@line 16311
   HEAP32[$AsyncCtx14 + 76 >> 2] = $vararg_buffer; //@line 16313
   HEAP32[$AsyncCtx14 + 80 >> 2] = $37; //@line 16315
   HEAP32[$AsyncCtx14 + 84 >> 2] = $vararg_buffer1; //@line 16317
   HEAP32[$AsyncCtx14 + 88 >> 2] = $vararg_buffer1; //@line 16319
   HEAP32[$AsyncCtx14 + 92 >> 2] = $3; //@line 16321
   HEAP32[$AsyncCtx14 + 96 >> 2] = $$pre$phiZ2D; //@line 16323
   sp = STACKTOP; //@line 16324
   STACKTOP = sp; //@line 16325
   return 0; //@line 16325
  }
 } while (0);
 _printf(13253, $vararg_buffer) | 0; //@line 16328
 $108 = HEAP8[$37 >> 0] | 0; //@line 16332
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$48 >> 0]; //@line 16333
 HEAP32[$vararg_buffer1 + 4 >> 2] = $108; //@line 16335
 _printf(13266, $vararg_buffer1) | 0; //@line 16336
 $AsyncCtx35 = _emscripten_alloc_async_context(72, sp) | 0; //@line 16337
 _putchar(10) | 0; //@line 16338
 if (___async) {
  HEAP32[$AsyncCtx35 >> 2] = 488; //@line 16341
  HEAP32[$AsyncCtx35 + 4 >> 2] = $14; //@line 16343
  HEAP32[$AsyncCtx35 + 8 >> 2] = $0; //@line 16345
  HEAP32[$AsyncCtx35 + 12 >> 2] = $2; //@line 16347
  HEAP32[$AsyncCtx35 + 16 >> 2] = $9; //@line 16349
  HEAP32[$AsyncCtx35 + 20 >> 2] = $35; //@line 16351
  HEAP32[$AsyncCtx35 + 24 >> 2] = $vararg_buffer4; //@line 16353
  HEAP32[$AsyncCtx35 + 28 >> 2] = $vararg_buffer4; //@line 16355
  HEAP32[$AsyncCtx35 + 32 >> 2] = $vararg_buffer6; //@line 16357
  HEAP32[$AsyncCtx35 + 36 >> 2] = $vararg_buffer6; //@line 16359
  HEAP32[$AsyncCtx35 + 40 >> 2] = $0; //@line 16361
  HEAP32[$AsyncCtx35 + 44 >> 2] = $3; //@line 16363
  HEAP32[$AsyncCtx35 + 48 >> 2] = $2; //@line 16365
  HEAP32[$AsyncCtx35 + 52 >> 2] = $48; //@line 16367
  HEAP32[$AsyncCtx35 + 56 >> 2] = $vararg_buffer8; //@line 16369
  HEAP32[$AsyncCtx35 + 60 >> 2] = $vararg_buffer8; //@line 16371
  HEAP32[$AsyncCtx35 + 64 >> 2] = $vararg_buffer10; //@line 16373
  HEAP32[$AsyncCtx35 + 68 >> 2] = $vararg_buffer10; //@line 16375
  sp = STACKTOP; //@line 16376
  STACKTOP = sp; //@line 16377
  return 0; //@line 16377
 }
 _emscripten_free_async_context($AsyncCtx35 | 0); //@line 16379
 $126 = HEAP32[$0 >> 2] | 0; //@line 16380
 $129 = HEAP32[(HEAP32[$126 >> 2] | 0) + 72 >> 2] | 0; //@line 16383
 $130 = HEAP8[$35 >> 0] | 0; //@line 16384
 $132 = HEAP8[$0 + 1129 >> 0] | 0; //@line 16386
 $AsyncCtx17 = _emscripten_alloc_async_context(72, sp) | 0; //@line 16387
 $133 = FUNCTION_TABLE_iiii[$129 & 15]($126, $130, $132) | 0; //@line 16388
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 489; //@line 16391
  HEAP32[$AsyncCtx17 + 4 >> 2] = $14; //@line 16393
  HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 16395
  HEAP32[$AsyncCtx17 + 12 >> 2] = $2; //@line 16397
  HEAP32[$AsyncCtx17 + 16 >> 2] = $9; //@line 16399
  HEAP32[$AsyncCtx17 + 20 >> 2] = $35; //@line 16401
  HEAP32[$AsyncCtx17 + 24 >> 2] = $vararg_buffer4; //@line 16403
  HEAP32[$AsyncCtx17 + 28 >> 2] = $vararg_buffer4; //@line 16405
  HEAP32[$AsyncCtx17 + 32 >> 2] = $vararg_buffer6; //@line 16407
  HEAP32[$AsyncCtx17 + 36 >> 2] = $vararg_buffer6; //@line 16409
  HEAP32[$AsyncCtx17 + 40 >> 2] = $3; //@line 16411
  HEAP32[$AsyncCtx17 + 44 >> 2] = $2; //@line 16413
  HEAP32[$AsyncCtx17 + 48 >> 2] = $vararg_buffer8; //@line 16415
  HEAP32[$AsyncCtx17 + 52 >> 2] = $vararg_buffer8; //@line 16417
  HEAP32[$AsyncCtx17 + 56 >> 2] = $vararg_buffer10; //@line 16419
  HEAP32[$AsyncCtx17 + 60 >> 2] = $vararg_buffer10; //@line 16421
  HEAP32[$AsyncCtx17 + 64 >> 2] = $48; //@line 16423
  HEAP32[$AsyncCtx17 + 68 >> 2] = $0; //@line 16425
  sp = STACKTOP; //@line 16426
  STACKTOP = sp; //@line 16427
  return 0; //@line 16427
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 16429
 $151 = HEAP32[$0 >> 2] | 0; //@line 16430
 $154 = HEAP32[(HEAP32[$151 >> 2] | 0) + 28 >> 2] | 0; //@line 16433
 $155 = $0 + 1104 | 0; //@line 16434
 $156 = HEAP8[$155 >> 0] | 0; //@line 16435
 $157 = $0 + 1100 | 0; //@line 16436
 $158 = HEAP32[$157 >> 2] | 0; //@line 16437
 $AsyncCtx20 = _emscripten_alloc_async_context(80, sp) | 0; //@line 16439
 FUNCTION_TABLE_viiiii[$154 & 7]($151, $133, $156, $158, $0 + 1160 | 0); //@line 16440
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 490; //@line 16443
  HEAP32[$AsyncCtx20 + 4 >> 2] = $14; //@line 16445
  HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 16447
  HEAP32[$AsyncCtx20 + 12 >> 2] = $2; //@line 16449
  HEAP32[$AsyncCtx20 + 16 >> 2] = $9; //@line 16451
  HEAP32[$AsyncCtx20 + 20 >> 2] = $35; //@line 16453
  HEAP32[$AsyncCtx20 + 24 >> 2] = $vararg_buffer4; //@line 16455
  HEAP32[$AsyncCtx20 + 28 >> 2] = $vararg_buffer4; //@line 16457
  HEAP32[$AsyncCtx20 + 32 >> 2] = $vararg_buffer6; //@line 16459
  HEAP32[$AsyncCtx20 + 36 >> 2] = $vararg_buffer6; //@line 16461
  HEAP32[$AsyncCtx20 + 40 >> 2] = $3; //@line 16463
  HEAP32[$AsyncCtx20 + 44 >> 2] = $2; //@line 16465
  HEAP32[$AsyncCtx20 + 48 >> 2] = $vararg_buffer8; //@line 16467
  HEAP32[$AsyncCtx20 + 52 >> 2] = $vararg_buffer8; //@line 16469
  HEAP32[$AsyncCtx20 + 56 >> 2] = $vararg_buffer10; //@line 16471
  HEAP32[$AsyncCtx20 + 60 >> 2] = $vararg_buffer10; //@line 16473
  HEAP32[$AsyncCtx20 + 64 >> 2] = $48; //@line 16475
  HEAP32[$AsyncCtx20 + 68 >> 2] = $0; //@line 16477
  HEAP32[$AsyncCtx20 + 72 >> 2] = $155; //@line 16479
  HEAP32[$AsyncCtx20 + 76 >> 2] = $157; //@line 16481
  sp = STACKTOP; //@line 16482
  STACKTOP = sp; //@line 16483
  return 0; //@line 16483
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 16485
 $179 = HEAP32[$0 >> 2] | 0; //@line 16486
 $182 = HEAP32[(HEAP32[$179 >> 2] | 0) + 28 >> 2] | 0; //@line 16489
 $184 = HEAP8[$0 + 1136 >> 0] | 0; //@line 16491
 $185 = HEAP8[$155 >> 0] | 0; //@line 16492
 $186 = HEAP32[$157 >> 2] | 0; //@line 16493
 $AsyncCtx23 = _emscripten_alloc_async_context(72, sp) | 0; //@line 16495
 FUNCTION_TABLE_viiiii[$182 & 7]($179, $184, $185, $186, $0 + 1184 | 0); //@line 16496
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 491; //@line 16499
  HEAP32[$AsyncCtx23 + 4 >> 2] = $9; //@line 16501
  HEAP32[$AsyncCtx23 + 8 >> 2] = $0; //@line 16503
  HEAP32[$AsyncCtx23 + 12 >> 2] = $35; //@line 16505
  HEAP32[$AsyncCtx23 + 16 >> 2] = $vararg_buffer4; //@line 16507
  HEAP32[$AsyncCtx23 + 20 >> 2] = $vararg_buffer4; //@line 16509
  HEAP32[$AsyncCtx23 + 24 >> 2] = $vararg_buffer6; //@line 16511
  HEAP32[$AsyncCtx23 + 28 >> 2] = $vararg_buffer6; //@line 16513
  HEAP32[$AsyncCtx23 + 32 >> 2] = $0; //@line 16515
  HEAP32[$AsyncCtx23 + 36 >> 2] = $3; //@line 16517
  HEAP32[$AsyncCtx23 + 40 >> 2] = $2; //@line 16519
  HEAP32[$AsyncCtx23 + 44 >> 2] = $2; //@line 16521
  HEAP32[$AsyncCtx23 + 48 >> 2] = $48; //@line 16523
  HEAP32[$AsyncCtx23 + 52 >> 2] = $vararg_buffer8; //@line 16525
  HEAP32[$AsyncCtx23 + 56 >> 2] = $vararg_buffer8; //@line 16527
  HEAP32[$AsyncCtx23 + 60 >> 2] = $vararg_buffer10; //@line 16529
  HEAP32[$AsyncCtx23 + 64 >> 2] = $vararg_buffer10; //@line 16531
  HEAP32[$AsyncCtx23 + 68 >> 2] = $14; //@line 16533
  sp = STACKTOP; //@line 16534
  STACKTOP = sp; //@line 16535
  return 0; //@line 16535
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 16537
 do {
  if (!(HEAP8[$9 >> 0] | 0)) {
   HEAP32[$0 + 972 >> 2] = (HEAP32[$0 + 1172 >> 2] | 0) + (HEAP32[$0 + 1120 >> 2] | 0); //@line 16548
   $$sink = $0 + 1124 | 0; //@line 16550
  } else {
   $215 = HEAP8[$0 + 893 >> 0] | 0; //@line 16553
   $216 = HEAP8[$35 >> 0] | 0; //@line 16554
   $218 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0 + 4 | 0) | 0; //@line 16556
   _printf(12967, $vararg_buffer4) | 0; //@line 16557
   _printf(13293, $vararg_buffer6) | 0; //@line 16558
   $AsyncCtx31 = _emscripten_alloc_async_context(52, sp) | 0; //@line 16559
   _putchar(10) | 0; //@line 16560
   if (___async) {
    HEAP32[$AsyncCtx31 >> 2] = 492; //@line 16563
    HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 16565
    HEAP32[$AsyncCtx31 + 8 >> 2] = $0; //@line 16567
    HEAP8[$AsyncCtx31 + 12 >> 0] = $216; //@line 16569
    HEAP8[$AsyncCtx31 + 13 >> 0] = $215; //@line 16571
    HEAP8[$AsyncCtx31 + 14 >> 0] = $218; //@line 16573
    HEAP32[$AsyncCtx31 + 16 >> 2] = $3; //@line 16575
    HEAP32[$AsyncCtx31 + 20 >> 2] = $2; //@line 16577
    HEAP32[$AsyncCtx31 + 24 >> 2] = $2; //@line 16579
    HEAP32[$AsyncCtx31 + 28 >> 2] = $48; //@line 16581
    HEAP32[$AsyncCtx31 + 32 >> 2] = $vararg_buffer8; //@line 16583
    HEAP32[$AsyncCtx31 + 36 >> 2] = $vararg_buffer8; //@line 16585
    HEAP32[$AsyncCtx31 + 40 >> 2] = $vararg_buffer10; //@line 16587
    HEAP32[$AsyncCtx31 + 44 >> 2] = $vararg_buffer10; //@line 16589
    HEAP32[$AsyncCtx31 + 48 >> 2] = $14; //@line 16591
    sp = STACKTOP; //@line 16592
    STACKTOP = sp; //@line 16593
    return 0; //@line 16593
   }
   _emscripten_free_async_context($AsyncCtx31 | 0); //@line 16595
   $240 = ($218 & 255) + ($215 & 255) | 0; //@line 16603
   if ($240 >>> 0 < 256 & $240 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, $216, (HEAP8[$0 + 369 >> 0] | 0) != 0) | 0) & 255) >>> 0) {
    HEAP32[$0 + 972 >> 2] = (HEAP32[$0 + 1172 >> 2] | 0) + (HEAP32[$0 + 1112 >> 2] | 0); //@line 16615
    $$sink = $0 + 1116 | 0; //@line 16617
    break;
   } else {
    $$1 = -1010; //@line 16620
    STACKTOP = sp; //@line 16621
    return $$1 | 0; //@line 16621
   }
  }
 } while (0);
 HEAP32[$0 + 976 >> 2] = (HEAP32[$0 + 1196 >> 2] | 0) + (HEAP32[$$sink >> 2] | 0); //@line 16630
 if (!(HEAP32[$2 >> 2] | 0)) {
  $258 = HEAP8[$48 >> 0] | 0; //@line 16634
  $AsyncCtx42 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16635
  __ZN7LoRaMac21send_frame_on_channelEh($0, $258) | 0; //@line 16636
  if (___async) {
   HEAP32[$AsyncCtx42 >> 2] = 493; //@line 16639
   HEAP32[$AsyncCtx42 + 4 >> 2] = $3; //@line 16641
   HEAP32[$AsyncCtx42 + 8 >> 2] = $2; //@line 16643
   sp = STACKTOP; //@line 16644
   STACKTOP = sp; //@line 16645
   return 0; //@line 16645
  }
  _emscripten_free_async_context($AsyncCtx42 | 0); //@line 16647
  $$1 = 0; //@line 16648
  STACKTOP = sp; //@line 16649
  return $$1 | 0; //@line 16649
 }
 $261 = $0 + 968 | 0; //@line 16651
 HEAP32[$261 >> 2] = HEAP32[$261 >> 2] | 16; //@line 16654
 _printf(13253, $vararg_buffer8) | 0; //@line 16655
 HEAP32[$vararg_buffer10 >> 2] = HEAP32[$2 >> 2]; //@line 16657
 _printf(13317, $vararg_buffer10) | 0; //@line 16658
 $AsyncCtx27 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16659
 _putchar(10) | 0; //@line 16660
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 494; //@line 16663
  HEAP32[$AsyncCtx27 + 4 >> 2] = $14; //@line 16665
  HEAP32[$AsyncCtx27 + 8 >> 2] = $0; //@line 16667
  HEAP32[$AsyncCtx27 + 12 >> 2] = $2; //@line 16669
  HEAP32[$AsyncCtx27 + 16 >> 2] = $3; //@line 16671
  HEAP32[$AsyncCtx27 + 20 >> 2] = $2; //@line 16673
  sp = STACKTOP; //@line 16674
  STACKTOP = sp; //@line 16675
  return 0; //@line 16675
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 16677
 $270 = HEAP32[$14 >> 2] | 0; //@line 16678
 $272 = HEAP32[$2 >> 2] | 0; //@line 16680
 $AsyncCtx38 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16681
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($270, $0 + 1016 | 0, $272); //@line 16682
 if (___async) {
  HEAP32[$AsyncCtx38 >> 2] = 495; //@line 16685
  HEAP32[$AsyncCtx38 + 4 >> 2] = $3; //@line 16687
  HEAP32[$AsyncCtx38 + 8 >> 2] = $2; //@line 16689
  sp = STACKTOP; //@line 16690
  STACKTOP = sp; //@line 16691
  return 0; //@line 16691
 }
 _emscripten_free_async_context($AsyncCtx38 | 0); //@line 16693
 $$1 = 0; //@line 16694
 STACKTOP = sp; //@line 16695
 return $$1 | 0; //@line 16695
}
function __ZN7LoRaMac22get_phy_event_handlersEv($0) {
 $0 = $0 | 0;
 var $$pre = 0, $$pre$i$i = 0, $$pre$i$i21 = 0, $$pre$i$i34 = 0, $$pre$i$i50 = 0, $$pre$i$i66 = 0, $$pre119 = 0, $$pre120 = 0, $$pre121 = 0, $$pre122 = 0, $1 = 0, $102 = 0, $103 = 0, $114 = 0, $115 = 0, $121 = 0, $122 = 0, $124 = 0, $125 = 0, $128 = 0, $138 = 0, $139 = 0, $149 = 0, $150 = 0, $155 = 0, $156 = 0, $158 = 0, $159 = 0, $162 = 0, $170 = 0, $171 = 0, $179 = 0, $180 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $35 = 0, $36 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $6 = 0, $63 = 0, $64 = 0, $76 = 0, $77 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $9 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx41 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19329
 STACKTOP = STACKTOP + 16 | 0; //@line 19330
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19330
 $1 = sp; //@line 19331
 $2 = $1 + 12 | 0; //@line 19332
 HEAP32[$1 >> 2] = 566; //@line 19333
 HEAP32[$1 + 4 >> 2] = 0; //@line 19335
 HEAP32[$1 + 8 >> 2] = $0; //@line 19337
 HEAP32[$2 >> 2] = 848; //@line 19338
 $3 = $0 + 1212 | 0; //@line 19339
 do {
  if (($3 | 0) == ($1 | 0)) {
   $35 = 848; //@line 19343
   label = 10; //@line 19344
  } else {
   $5 = $0 + 1224 | 0; //@line 19346
   $6 = HEAP32[$5 >> 2] | 0; //@line 19347
   if (!$6) {
    $21 = 848; //@line 19350
   } else {
    $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 19353
    $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 19354
    FUNCTION_TABLE_vi[$9 & 1023]($3); //@line 19355
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 567; //@line 19358
     HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 19360
     HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 19362
     HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 19364
     HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 19366
     HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 19368
     HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 19370
     HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 19372
     HEAP32[$AsyncCtx + 32 >> 2] = $1; //@line 19374
     HEAP32[$AsyncCtx + 36 >> 2] = $1; //@line 19376
     sp = STACKTOP; //@line 19377
     STACKTOP = sp; //@line 19378
     return 0; //@line 19378
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 19380
    $$pre = HEAP32[$2 >> 2] | 0; //@line 19381
    if (!$$pre) {
     HEAP32[$5 >> 2] = 0; //@line 19384
     break;
    } else {
     $21 = $$pre; //@line 19387
    }
   }
   $22 = HEAP32[$21 + 4 >> 2] | 0; //@line 19391
   $AsyncCtx2 = _emscripten_alloc_async_context(40, sp) | 0; //@line 19392
   FUNCTION_TABLE_vii[$22 & 31]($3, $1); //@line 19393
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 568; //@line 19396
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 19398
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 19400
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 19402
    HEAP32[$AsyncCtx2 + 16 >> 2] = $5; //@line 19404
    HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 19406
    HEAP32[$AsyncCtx2 + 24 >> 2] = $1; //@line 19408
    HEAP32[$AsyncCtx2 + 28 >> 2] = $3; //@line 19410
    HEAP32[$AsyncCtx2 + 32 >> 2] = $1; //@line 19412
    HEAP32[$AsyncCtx2 + 36 >> 2] = $1; //@line 19414
    sp = STACKTOP; //@line 19415
    STACKTOP = sp; //@line 19416
    return 0; //@line 19416
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 19418
    $$pre$i$i = HEAP32[$2 >> 2] | 0; //@line 19419
    HEAP32[$5 >> 2] = $$pre$i$i; //@line 19421
    if (!$$pre$i$i) {
     break;
    } else {
     $35 = $$pre$i$i; //@line 19426
     label = 10; //@line 19427
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 10) {
   $36 = HEAP32[$35 + 8 >> 2] | 0; //@line 19436
   $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 19437
   FUNCTION_TABLE_vi[$36 & 1023]($1); //@line 19438
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 569; //@line 19441
    HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 19443
    HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 19445
    HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 19447
    HEAP32[$AsyncCtx5 + 16 >> 2] = $1; //@line 19449
    HEAP32[$AsyncCtx5 + 20 >> 2] = $3; //@line 19451
    HEAP32[$AsyncCtx5 + 24 >> 2] = $1; //@line 19453
    HEAP32[$AsyncCtx5 + 28 >> 2] = $1; //@line 19455
    sp = STACKTOP; //@line 19456
    STACKTOP = sp; //@line 19457
    return 0; //@line 19457
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 19459
    break;
   }
  }
 } while (0);
 $44 = $1 + 12 | 0; //@line 19464
 HEAP32[$1 >> 2] = 7; //@line 19465
 HEAP32[$1 + 4 >> 2] = 0; //@line 19467
 HEAP32[$1 + 8 >> 2] = $0; //@line 19469
 HEAP32[$44 >> 2] = 860; //@line 19470
 $45 = $0 + 1244 | 0; //@line 19471
 do {
  if (($45 | 0) == ($1 | 0)) {
   $76 = 860; //@line 19475
   label = 22; //@line 19476
  } else {
   $47 = $0 + 1256 | 0; //@line 19478
   $48 = HEAP32[$47 >> 2] | 0; //@line 19479
   if (!$48) {
    $63 = 860; //@line 19482
   } else {
    $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 19485
    $AsyncCtx8 = _emscripten_alloc_async_context(40, sp) | 0; //@line 19486
    FUNCTION_TABLE_vi[$51 & 1023]($45); //@line 19487
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 570; //@line 19490
     HEAP32[$AsyncCtx8 + 4 >> 2] = $1; //@line 19492
     HEAP32[$AsyncCtx8 + 8 >> 2] = $0; //@line 19494
     HEAP32[$AsyncCtx8 + 12 >> 2] = $1; //@line 19496
     HEAP32[$AsyncCtx8 + 16 >> 2] = $44; //@line 19498
     HEAP32[$AsyncCtx8 + 20 >> 2] = $45; //@line 19500
     HEAP32[$AsyncCtx8 + 24 >> 2] = $1; //@line 19502
     HEAP32[$AsyncCtx8 + 28 >> 2] = $1; //@line 19504
     HEAP32[$AsyncCtx8 + 32 >> 2] = $47; //@line 19506
     HEAP32[$AsyncCtx8 + 36 >> 2] = $3; //@line 19508
     sp = STACKTOP; //@line 19509
     STACKTOP = sp; //@line 19510
     return 0; //@line 19510
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 19512
    $$pre119 = HEAP32[$44 >> 2] | 0; //@line 19513
    if (!$$pre119) {
     HEAP32[$47 >> 2] = 0; //@line 19516
     break;
    } else {
     $63 = $$pre119; //@line 19519
    }
   }
   $64 = HEAP32[$63 + 4 >> 2] | 0; //@line 19523
   $AsyncCtx11 = _emscripten_alloc_async_context(36, sp) | 0; //@line 19524
   FUNCTION_TABLE_vii[$64 & 31]($45, $1); //@line 19525
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 571; //@line 19528
    HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 19530
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 19532
    HEAP32[$AsyncCtx11 + 12 >> 2] = $1; //@line 19534
    HEAP32[$AsyncCtx11 + 16 >> 2] = $1; //@line 19536
    HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 19538
    HEAP32[$AsyncCtx11 + 24 >> 2] = $3; //@line 19540
    HEAP32[$AsyncCtx11 + 28 >> 2] = $44; //@line 19542
    HEAP32[$AsyncCtx11 + 32 >> 2] = $47; //@line 19544
    sp = STACKTOP; //@line 19545
    STACKTOP = sp; //@line 19546
    return 0; //@line 19546
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 19548
    $$pre$i$i21 = HEAP32[$44 >> 2] | 0; //@line 19549
    HEAP32[$47 >> 2] = $$pre$i$i21; //@line 19551
    if (!$$pre$i$i21) {
     break;
    } else {
     $76 = $$pre$i$i21; //@line 19556
     label = 22; //@line 19557
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 22) {
   $77 = HEAP32[$76 + 8 >> 2] | 0; //@line 19566
   $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 19567
   FUNCTION_TABLE_vi[$77 & 1023]($1); //@line 19568
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 572; //@line 19571
    HEAP32[$AsyncCtx14 + 4 >> 2] = $1; //@line 19573
    HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 19575
    HEAP32[$AsyncCtx14 + 12 >> 2] = $1; //@line 19577
    HEAP32[$AsyncCtx14 + 16 >> 2] = $1; //@line 19579
    HEAP32[$AsyncCtx14 + 20 >> 2] = $1; //@line 19581
    HEAP32[$AsyncCtx14 + 24 >> 2] = $3; //@line 19583
    sp = STACKTOP; //@line 19584
    STACKTOP = sp; //@line 19585
    return 0; //@line 19585
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 19587
    break;
   }
  }
 } while (0);
 $84 = $1 + 12 | 0; //@line 19592
 HEAP32[$1 >> 2] = 573; //@line 19593
 HEAP32[$1 + 4 >> 2] = 0; //@line 19595
 HEAP32[$1 + 8 >> 2] = $0; //@line 19597
 HEAP32[$84 >> 2] = 848; //@line 19598
 $85 = $0 + 1276 | 0; //@line 19599
 do {
  if (($85 | 0) == ($1 | 0)) {
   $114 = 848; //@line 19603
   label = 34; //@line 19604
  } else {
   $87 = $0 + 1288 | 0; //@line 19606
   $88 = HEAP32[$87 >> 2] | 0; //@line 19607
   if (!$88) {
    $102 = 848; //@line 19610
   } else {
    $91 = HEAP32[$88 + 8 >> 2] | 0; //@line 19613
    $AsyncCtx17 = _emscripten_alloc_async_context(36, sp) | 0; //@line 19614
    FUNCTION_TABLE_vi[$91 & 1023]($85); //@line 19615
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 574; //@line 19618
     HEAP32[$AsyncCtx17 + 4 >> 2] = $1; //@line 19620
     HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 19622
     HEAP32[$AsyncCtx17 + 12 >> 2] = $1; //@line 19624
     HEAP32[$AsyncCtx17 + 16 >> 2] = $1; //@line 19626
     HEAP32[$AsyncCtx17 + 20 >> 2] = $85; //@line 19628
     HEAP32[$AsyncCtx17 + 24 >> 2] = $87; //@line 19630
     HEAP32[$AsyncCtx17 + 28 >> 2] = $84; //@line 19632
     HEAP32[$AsyncCtx17 + 32 >> 2] = $3; //@line 19634
     sp = STACKTOP; //@line 19635
     STACKTOP = sp; //@line 19636
     return 0; //@line 19636
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 19638
    $$pre120 = HEAP32[$84 >> 2] | 0; //@line 19639
    if (!$$pre120) {
     HEAP32[$87 >> 2] = 0; //@line 19642
     break;
    } else {
     $102 = $$pre120; //@line 19645
    }
   }
   $103 = HEAP32[$102 + 4 >> 2] | 0; //@line 19649
   $AsyncCtx20 = _emscripten_alloc_async_context(32, sp) | 0; //@line 19650
   FUNCTION_TABLE_vii[$103 & 31]($85, $1); //@line 19651
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 575; //@line 19654
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 19656
    HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 19658
    HEAP32[$AsyncCtx20 + 12 >> 2] = $1; //@line 19660
    HEAP32[$AsyncCtx20 + 16 >> 2] = $1; //@line 19662
    HEAP32[$AsyncCtx20 + 20 >> 2] = $84; //@line 19664
    HEAP32[$AsyncCtx20 + 24 >> 2] = $87; //@line 19666
    HEAP32[$AsyncCtx20 + 28 >> 2] = $3; //@line 19668
    sp = STACKTOP; //@line 19669
    STACKTOP = sp; //@line 19670
    return 0; //@line 19670
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 19672
    $$pre$i$i34 = HEAP32[$84 >> 2] | 0; //@line 19673
    HEAP32[$87 >> 2] = $$pre$i$i34; //@line 19675
    if (!$$pre$i$i34) {
     break;
    } else {
     $114 = $$pre$i$i34; //@line 19680
     label = 34; //@line 19681
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 34) {
   $115 = HEAP32[$114 + 8 >> 2] | 0; //@line 19690
   $AsyncCtx23 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19691
   FUNCTION_TABLE_vi[$115 & 1023]($1); //@line 19692
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 576; //@line 19695
    HEAP32[$AsyncCtx23 + 4 >> 2] = $1; //@line 19697
    HEAP32[$AsyncCtx23 + 8 >> 2] = $0; //@line 19699
    HEAP32[$AsyncCtx23 + 12 >> 2] = $1; //@line 19701
    HEAP32[$AsyncCtx23 + 16 >> 2] = $1; //@line 19703
    HEAP32[$AsyncCtx23 + 20 >> 2] = $3; //@line 19705
    sp = STACKTOP; //@line 19706
    STACKTOP = sp; //@line 19707
    return 0; //@line 19707
   } else {
    _emscripten_free_async_context($AsyncCtx23 | 0); //@line 19709
    break;
   }
  }
 } while (0);
 $121 = $1 + 12 | 0; //@line 19714
 HEAP32[$1 >> 2] = 577; //@line 19715
 HEAP32[$1 + 4 >> 2] = 0; //@line 19717
 HEAP32[$1 + 8 >> 2] = $0; //@line 19719
 HEAP32[$121 >> 2] = 848; //@line 19720
 $122 = $0 + 1228 | 0; //@line 19721
 do {
  if (($122 | 0) == ($1 | 0)) {
   $149 = 848; //@line 19725
   label = 46; //@line 19726
  } else {
   $124 = $0 + 1240 | 0; //@line 19728
   $125 = HEAP32[$124 >> 2] | 0; //@line 19729
   if (!$125) {
    $138 = 848; //@line 19732
   } else {
    $128 = HEAP32[$125 + 8 >> 2] | 0; //@line 19735
    $AsyncCtx26 = _emscripten_alloc_async_context(32, sp) | 0; //@line 19736
    FUNCTION_TABLE_vi[$128 & 1023]($122); //@line 19737
    if (___async) {
     HEAP32[$AsyncCtx26 >> 2] = 578; //@line 19740
     HEAP32[$AsyncCtx26 + 4 >> 2] = $1; //@line 19742
     HEAP32[$AsyncCtx26 + 8 >> 2] = $1; //@line 19744
     HEAP32[$AsyncCtx26 + 12 >> 2] = $0; //@line 19746
     HEAP32[$AsyncCtx26 + 16 >> 2] = $122; //@line 19748
     HEAP32[$AsyncCtx26 + 20 >> 2] = $124; //@line 19750
     HEAP32[$AsyncCtx26 + 24 >> 2] = $121; //@line 19752
     HEAP32[$AsyncCtx26 + 28 >> 2] = $3; //@line 19754
     sp = STACKTOP; //@line 19755
     STACKTOP = sp; //@line 19756
     return 0; //@line 19756
    }
    _emscripten_free_async_context($AsyncCtx26 | 0); //@line 19758
    $$pre121 = HEAP32[$121 >> 2] | 0; //@line 19759
    if (!$$pre121) {
     HEAP32[$124 >> 2] = 0; //@line 19762
     break;
    } else {
     $138 = $$pre121; //@line 19765
    }
   }
   $139 = HEAP32[$138 + 4 >> 2] | 0; //@line 19769
   $AsyncCtx29 = _emscripten_alloc_async_context(28, sp) | 0; //@line 19770
   FUNCTION_TABLE_vii[$139 & 31]($122, $1); //@line 19771
   if (___async) {
    HEAP32[$AsyncCtx29 >> 2] = 579; //@line 19774
    HEAP32[$AsyncCtx29 + 4 >> 2] = $1; //@line 19776
    HEAP32[$AsyncCtx29 + 8 >> 2] = $1; //@line 19778
    HEAP32[$AsyncCtx29 + 12 >> 2] = $0; //@line 19780
    HEAP32[$AsyncCtx29 + 16 >> 2] = $121; //@line 19782
    HEAP32[$AsyncCtx29 + 20 >> 2] = $124; //@line 19784
    HEAP32[$AsyncCtx29 + 24 >> 2] = $3; //@line 19786
    sp = STACKTOP; //@line 19787
    STACKTOP = sp; //@line 19788
    return 0; //@line 19788
   } else {
    _emscripten_free_async_context($AsyncCtx29 | 0); //@line 19790
    $$pre$i$i50 = HEAP32[$121 >> 2] | 0; //@line 19791
    HEAP32[$124 >> 2] = $$pre$i$i50; //@line 19793
    if (!$$pre$i$i50) {
     break;
    } else {
     $149 = $$pre$i$i50; //@line 19798
     label = 46; //@line 19799
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 46) {
   $150 = HEAP32[$149 + 8 >> 2] | 0; //@line 19808
   $AsyncCtx32 = _emscripten_alloc_async_context(20, sp) | 0; //@line 19809
   FUNCTION_TABLE_vi[$150 & 1023]($1); //@line 19810
   if (___async) {
    HEAP32[$AsyncCtx32 >> 2] = 580; //@line 19813
    HEAP32[$AsyncCtx32 + 4 >> 2] = $1; //@line 19815
    HEAP32[$AsyncCtx32 + 8 >> 2] = $1; //@line 19817
    HEAP32[$AsyncCtx32 + 12 >> 2] = $0; //@line 19819
    HEAP32[$AsyncCtx32 + 16 >> 2] = $3; //@line 19821
    sp = STACKTOP; //@line 19822
    STACKTOP = sp; //@line 19823
    return 0; //@line 19823
   } else {
    _emscripten_free_async_context($AsyncCtx32 | 0); //@line 19825
    break;
   }
  }
 } while (0);
 $155 = $1 + 12 | 0; //@line 19830
 HEAP32[$1 >> 2] = 581; //@line 19831
 HEAP32[$1 + 4 >> 2] = 0; //@line 19833
 HEAP32[$1 + 8 >> 2] = $0; //@line 19835
 HEAP32[$155 >> 2] = 848; //@line 19836
 $156 = $0 + 1260 | 0; //@line 19837
 if (($156 | 0) == ($1 | 0)) {
  $179 = 848; //@line 19840
 } else {
  $158 = $0 + 1272 | 0; //@line 19842
  $159 = HEAP32[$158 >> 2] | 0; //@line 19843
  if (!$159) {
   $170 = 848; //@line 19846
  } else {
   $162 = HEAP32[$159 + 8 >> 2] | 0; //@line 19849
   $AsyncCtx35 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19850
   FUNCTION_TABLE_vi[$162 & 1023]($156); //@line 19851
   if (___async) {
    HEAP32[$AsyncCtx35 >> 2] = 582; //@line 19854
    HEAP32[$AsyncCtx35 + 4 >> 2] = $155; //@line 19856
    HEAP32[$AsyncCtx35 + 8 >> 2] = $158; //@line 19858
    HEAP32[$AsyncCtx35 + 12 >> 2] = $156; //@line 19860
    HEAP32[$AsyncCtx35 + 16 >> 2] = $1; //@line 19862
    HEAP32[$AsyncCtx35 + 20 >> 2] = $3; //@line 19864
    sp = STACKTOP; //@line 19865
    STACKTOP = sp; //@line 19866
    return 0; //@line 19866
   }
   _emscripten_free_async_context($AsyncCtx35 | 0); //@line 19868
   $$pre122 = HEAP32[$155 >> 2] | 0; //@line 19869
   if (!$$pre122) {
    HEAP32[$158 >> 2] = 0; //@line 19872
    STACKTOP = sp; //@line 19873
    return $3 | 0; //@line 19873
   } else {
    $170 = $$pre122; //@line 19875
   }
  }
  $171 = HEAP32[$170 + 4 >> 2] | 0; //@line 19879
  $AsyncCtx38 = _emscripten_alloc_async_context(20, sp) | 0; //@line 19880
  FUNCTION_TABLE_vii[$171 & 31]($156, $1); //@line 19881
  if (___async) {
   HEAP32[$AsyncCtx38 >> 2] = 583; //@line 19884
   HEAP32[$AsyncCtx38 + 4 >> 2] = $155; //@line 19886
   HEAP32[$AsyncCtx38 + 8 >> 2] = $158; //@line 19888
   HEAP32[$AsyncCtx38 + 12 >> 2] = $1; //@line 19890
   HEAP32[$AsyncCtx38 + 16 >> 2] = $3; //@line 19892
   sp = STACKTOP; //@line 19893
   STACKTOP = sp; //@line 19894
   return 0; //@line 19894
  }
  _emscripten_free_async_context($AsyncCtx38 | 0); //@line 19896
  $$pre$i$i66 = HEAP32[$155 >> 2] | 0; //@line 19897
  HEAP32[$158 >> 2] = $$pre$i$i66; //@line 19899
  if (!$$pre$i$i66) {
   STACKTOP = sp; //@line 19902
   return $3 | 0; //@line 19902
  } else {
   $179 = $$pre$i$i66; //@line 19904
  }
 }
 $180 = HEAP32[$179 + 8 >> 2] | 0; //@line 19908
 $AsyncCtx41 = _emscripten_alloc_async_context(12, sp) | 0; //@line 19909
 FUNCTION_TABLE_vi[$180 & 1023]($1); //@line 19910
 if (___async) {
  HEAP32[$AsyncCtx41 >> 2] = 584; //@line 19913
  HEAP32[$AsyncCtx41 + 4 >> 2] = $1; //@line 19915
  HEAP32[$AsyncCtx41 + 8 >> 2] = $3; //@line 19917
  sp = STACKTOP; //@line 19918
  STACKTOP = sp; //@line 19919
  return 0; //@line 19919
 }
 _emscripten_free_async_context($AsyncCtx41 | 0); //@line 19921
 STACKTOP = sp; //@line 19922
 return $3 | 0; //@line 19922
}
function _mbedtls_cipher_cmac_finish($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$013$i = 0, $$01720$i55 = 0, $$019$i = 0, $$019$i52 = 0, $$021$i54 = 0, $$09$i = 0, $$09$i41 = 0, $$09$i45 = 0, $$sink$sink$i = 0, $12 = 0, $129 = 0, $132 = 0, $145 = 0, $148 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $170 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0, $202 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, label = 0, sp = 0, $156$looptemp = 0;
 sp = STACKTOP; //@line 2918
 STACKTOP = STACKTOP + 80 | 0; //@line 2919
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 2919
 $2 = sp + 56 | 0; //@line 2920
 $3 = sp + 4 | 0; //@line 2921
 $4 = sp + 40 | 0; //@line 2922
 $5 = sp + 24 | 0; //@line 2923
 $6 = sp + 8 | 0; //@line 2924
 $7 = sp; //@line 2925
 if (!$0) {
  $$0 = -24832; //@line 2928
  STACKTOP = sp; //@line 2929
  return $$0 | 0; //@line 2929
 }
 $9 = HEAP32[$0 >> 2] | 0; //@line 2931
 if (!$9) {
  $$0 = -24832; //@line 2934
  STACKTOP = sp; //@line 2935
  return $$0 | 0; //@line 2935
 }
 $12 = HEAP32[$0 + 64 >> 2] | 0; //@line 2938
 if (($1 | 0) == 0 | ($12 | 0) == 0) {
  $$0 = -24832; //@line 2943
  STACKTOP = sp; //@line 2944
  return $$0 | 0; //@line 2944
 }
 $16 = HEAP32[$9 + 24 >> 2] | 0; //@line 2947
 $17 = $4 + 1 | 0; //@line 2948
 HEAP8[$4 >> 0] = 0; //@line 2949
 $18 = $4 + 2 | 0; //@line 2950
 HEAP8[$17 >> 0] = 0; //@line 2951
 $19 = $4 + 3 | 0; //@line 2952
 HEAP8[$18 >> 0] = 0; //@line 2953
 $20 = $4 + 4 | 0; //@line 2954
 HEAP8[$19 >> 0] = 0; //@line 2955
 $21 = $4 + 5 | 0; //@line 2956
 HEAP8[$20 >> 0] = 0; //@line 2957
 $22 = $4 + 6 | 0; //@line 2958
 HEAP8[$21 >> 0] = 0; //@line 2959
 $23 = $4 + 7 | 0; //@line 2960
 HEAP8[$22 >> 0] = 0; //@line 2961
 $24 = $4 + 8 | 0; //@line 2962
 HEAP8[$23 >> 0] = 0; //@line 2963
 $25 = $4 + 9 | 0; //@line 2964
 HEAP8[$24 >> 0] = 0; //@line 2965
 $26 = $4 + 10 | 0; //@line 2966
 HEAP8[$25 >> 0] = 0; //@line 2967
 $27 = $4 + 11 | 0; //@line 2968
 HEAP8[$26 >> 0] = 0; //@line 2969
 $28 = $4 + 12 | 0; //@line 2970
 HEAP8[$27 >> 0] = 0; //@line 2971
 $29 = $4 + 13 | 0; //@line 2972
 HEAP8[$28 >> 0] = 0; //@line 2973
 $30 = $4 + 14 | 0; //@line 2974
 HEAP8[$29 >> 0] = 0; //@line 2975
 $31 = $4 + 15 | 0; //@line 2976
 HEAP8[$30 >> 0] = 0; //@line 2977
 HEAP8[$31 >> 0] = 0; //@line 2978
 $32 = $5 + 1 | 0; //@line 2979
 HEAP8[$5 >> 0] = 0; //@line 2980
 $33 = $5 + 2 | 0; //@line 2981
 HEAP8[$32 >> 0] = 0; //@line 2982
 $34 = $5 + 3 | 0; //@line 2983
 HEAP8[$33 >> 0] = 0; //@line 2984
 $35 = $5 + 4 | 0; //@line 2985
 HEAP8[$34 >> 0] = 0; //@line 2986
 $36 = $5 + 5 | 0; //@line 2987
 HEAP8[$35 >> 0] = 0; //@line 2988
 $37 = $5 + 6 | 0; //@line 2989
 HEAP8[$36 >> 0] = 0; //@line 2990
 $38 = $5 + 7 | 0; //@line 2991
 HEAP8[$37 >> 0] = 0; //@line 2992
 $39 = $5 + 8 | 0; //@line 2993
 HEAP8[$38 >> 0] = 0; //@line 2994
 $40 = $5 + 9 | 0; //@line 2995
 HEAP8[$39 >> 0] = 0; //@line 2996
 $41 = $5 + 10 | 0; //@line 2997
 HEAP8[$40 >> 0] = 0; //@line 2998
 $42 = $5 + 11 | 0; //@line 2999
 HEAP8[$41 >> 0] = 0; //@line 3000
 $43 = $5 + 12 | 0; //@line 3001
 HEAP8[$42 >> 0] = 0; //@line 3002
 $44 = $5 + 13 | 0; //@line 3003
 HEAP8[$43 >> 0] = 0; //@line 3004
 $45 = $5 + 14 | 0; //@line 3005
 HEAP8[$44 >> 0] = 0; //@line 3006
 $46 = $5 + 15 | 0; //@line 3007
 HEAP8[$45 >> 0] = 0; //@line 3008
 HEAP8[$46 >> 0] = 0; //@line 3009
 $47 = $2 + 1 | 0; //@line 3010
 HEAP8[$2 >> 0] = 0; //@line 3011
 $48 = $2 + 2 | 0; //@line 3012
 HEAP8[$47 >> 0] = 0; //@line 3013
 $49 = $2 + 3 | 0; //@line 3014
 HEAP8[$48 >> 0] = 0; //@line 3015
 $50 = $2 + 4 | 0; //@line 3016
 HEAP8[$49 >> 0] = 0; //@line 3017
 $51 = $2 + 5 | 0; //@line 3018
 HEAP8[$50 >> 0] = 0; //@line 3019
 $52 = $2 + 6 | 0; //@line 3020
 HEAP8[$51 >> 0] = 0; //@line 3021
 $53 = $2 + 7 | 0; //@line 3022
 HEAP8[$52 >> 0] = 0; //@line 3023
 $54 = $2 + 8 | 0; //@line 3024
 HEAP8[$53 >> 0] = 0; //@line 3025
 $55 = $2 + 9 | 0; //@line 3026
 HEAP8[$54 >> 0] = 0; //@line 3027
 $56 = $2 + 10 | 0; //@line 3028
 HEAP8[$55 >> 0] = 0; //@line 3029
 $57 = $2 + 11 | 0; //@line 3030
 HEAP8[$56 >> 0] = 0; //@line 3031
 $58 = $2 + 12 | 0; //@line 3032
 HEAP8[$57 >> 0] = 0; //@line 3033
 $59 = $2 + 13 | 0; //@line 3034
 HEAP8[$58 >> 0] = 0; //@line 3035
 $60 = $2 + 14 | 0; //@line 3036
 HEAP8[$59 >> 0] = 0; //@line 3037
 $61 = $2 + 15 | 0; //@line 3038
 HEAP8[$60 >> 0] = 0; //@line 3039
 HEAP8[$61 >> 0] = 0; //@line 3040
 $64 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 3043
 $AsyncCtx2 = _emscripten_alloc_async_context(252, sp) | 0; //@line 3044
 $65 = _mbedtls_cipher_update($0, $2, $64, $2, $3) | 0; //@line 3045
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 688; //@line 3048
  HEAP32[$AsyncCtx2 + 4 >> 2] = $12; //@line 3050
  HEAP32[$AsyncCtx2 + 8 >> 2] = $20; //@line 3052
  HEAP32[$AsyncCtx2 + 12 >> 2] = $23; //@line 3054
  HEAP32[$AsyncCtx2 + 16 >> 2] = $41; //@line 3056
  HEAP32[$AsyncCtx2 + 20 >> 2] = $44; //@line 3058
  HEAP32[$AsyncCtx2 + 24 >> 2] = $49; //@line 3060
  HEAP32[$AsyncCtx2 + 28 >> 2] = $25; //@line 3062
  HEAP32[$AsyncCtx2 + 32 >> 2] = $5; //@line 3064
  HEAP32[$AsyncCtx2 + 36 >> 2] = $46; //@line 3066
  HEAP32[$AsyncCtx2 + 40 >> 2] = $32; //@line 3068
  HEAP32[$AsyncCtx2 + 44 >> 2] = $52; //@line 3070
  HEAP32[$AsyncCtx2 + 48 >> 2] = $2; //@line 3072
  HEAP32[$AsyncCtx2 + 52 >> 2] = $34; //@line 3074
  HEAP32[$AsyncCtx2 + 56 >> 2] = $48; //@line 3076
  HEAP32[$AsyncCtx2 + 60 >> 2] = $51; //@line 3078
  HEAP32[$AsyncCtx2 + 64 >> 2] = $54; //@line 3080
  HEAP32[$AsyncCtx2 + 68 >> 2] = $28; //@line 3082
  HEAP32[$AsyncCtx2 + 72 >> 2] = $1; //@line 3084
  HEAP32[$AsyncCtx2 + 76 >> 2] = $0; //@line 3086
  HEAP32[$AsyncCtx2 + 80 >> 2] = $61; //@line 3088
  HEAP32[$AsyncCtx2 + 84 >> 2] = $35; //@line 3090
  HEAP32[$AsyncCtx2 + 88 >> 2] = $38; //@line 3092
  HEAP32[$AsyncCtx2 + 92 >> 2] = $16; //@line 3094
  HEAP32[$AsyncCtx2 + 96 >> 2] = $4; //@line 3096
  HEAP32[$AsyncCtx2 + 100 >> 2] = $4; //@line 3098
  HEAP32[$AsyncCtx2 + 104 >> 2] = $31; //@line 3100
  HEAP32[$AsyncCtx2 + 108 >> 2] = $45; //@line 3102
  HEAP32[$AsyncCtx2 + 112 >> 2] = $17; //@line 3104
  HEAP32[$AsyncCtx2 + 116 >> 2] = $24; //@line 3106
  HEAP32[$AsyncCtx2 + 120 >> 2] = $27; //@line 3108
  HEAP32[$AsyncCtx2 + 124 >> 2] = $30; //@line 3110
  HEAP32[$AsyncCtx2 + 128 >> 2] = $55; //@line 3112
  HEAP32[$AsyncCtx2 + 132 >> 2] = $36; //@line 3114
  HEAP32[$AsyncCtx2 + 136 >> 2] = $42; //@line 3116
  HEAP32[$AsyncCtx2 + 140 >> 2] = $58; //@line 3118
  HEAP32[$AsyncCtx2 + 144 >> 2] = $50; //@line 3120
  HEAP32[$AsyncCtx2 + 148 >> 2] = $56; //@line 3122
  HEAP32[$AsyncCtx2 + 152 >> 2] = $21; //@line 3124
  HEAP32[$AsyncCtx2 + 156 >> 2] = $2; //@line 3126
  HEAP32[$AsyncCtx2 + 160 >> 2] = $39; //@line 3128
  HEAP32[$AsyncCtx2 + 164 >> 2] = $5; //@line 3130
  HEAP32[$AsyncCtx2 + 168 >> 2] = $47; //@line 3132
  HEAP32[$AsyncCtx2 + 172 >> 2] = $59; //@line 3134
  HEAP32[$AsyncCtx2 + 176 >> 2] = $7; //@line 3136
  HEAP32[$AsyncCtx2 + 180 >> 2] = $18; //@line 3138
  HEAP32[$AsyncCtx2 + 184 >> 2] = $57; //@line 3140
  HEAP32[$AsyncCtx2 + 188 >> 2] = $60; //@line 3142
  HEAP32[$AsyncCtx2 + 192 >> 2] = $6; //@line 3144
  HEAP32[$AsyncCtx2 + 196 >> 2] = $12; //@line 3146
  HEAP32[$AsyncCtx2 + 200 >> 2] = $22; //@line 3148
  HEAP32[$AsyncCtx2 + 204 >> 2] = $3; //@line 3150
  HEAP32[$AsyncCtx2 + 208 >> 2] = $37; //@line 3152
  HEAP32[$AsyncCtx2 + 212 >> 2] = $7; //@line 3154
  HEAP32[$AsyncCtx2 + 216 >> 2] = $43; //@line 3156
  HEAP32[$AsyncCtx2 + 220 >> 2] = $64; //@line 3158
  HEAP32[$AsyncCtx2 + 224 >> 2] = $26; //@line 3160
  HEAP32[$AsyncCtx2 + 228 >> 2] = $29; //@line 3162
  HEAP32[$AsyncCtx2 + 232 >> 2] = $33; //@line 3164
  HEAP32[$AsyncCtx2 + 236 >> 2] = $19; //@line 3166
  HEAP32[$AsyncCtx2 + 240 >> 2] = $40; //@line 3168
  HEAP32[$AsyncCtx2 + 244 >> 2] = $53; //@line 3170
  HEAP32[$AsyncCtx2 + 248 >> 2] = $6; //@line 3172
  sp = STACKTOP; //@line 3173
  STACKTOP = sp; //@line 3174
  return 0; //@line 3174
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3176
 L13 : do {
  if (!$65) {
   switch ($64 | 0) {
   case 16:
    {
     $$019$i52 = 135; //@line 3182
     break;
    }
   case 8:
    {
     $$019$i52 = 27; //@line 3186
     break;
    }
   default:
    {
     break L13;
    }
   }
   $129 = $64 + -1 | 0; //@line 3193
   $$01720$i55 = 0; //@line 3194
   $$021$i54 = $129; //@line 3194
   while (1) {
    $132 = HEAPU8[$2 + $$021$i54 >> 0] | 0; //@line 3198
    HEAP8[$4 + $$021$i54 >> 0] = $132 << 1 | $$01720$i55; //@line 3203
    if (($$021$i54 | 0) > 0) {
     $$01720$i55 = $132 >>> 7; //@line 3208
     $$021$i54 = $$021$i54 + -1 | 0; //@line 3208
    } else {
     break;
    }
   }
   $145 = $4 + $129 | 0; //@line 3218
   $148 = $$019$i52 & 0 - ((HEAPU8[$2 >> 0] | 0) >>> 7) ^ (HEAPU8[$145 >> 0] | 0); //@line 3221
   HEAP8[$145 >> 0] = $148; //@line 3223
   switch ($64 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 3226
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 3230
     break;
    }
   default:
    {
     break L13;
    }
   }
   HEAP8[$5 + $129 >> 0] = $148 << 1; //@line 3240
   if (($129 | 0) > 0) {
    $156 = $148; //@line 3244
    $157 = $64 + -2 | 0; //@line 3244
    while (1) {
     $156$looptemp = $156;
     $156 = HEAPU8[$4 + $157 >> 0] | 0; //@line 3249
     HEAP8[$5 + $157 >> 0] = $156 << 1 | $156$looptemp >>> 7; //@line 3254
     if (($157 | 0) <= 0) {
      break;
     } else {
      $157 = $157 + -1 | 0; //@line 3258
     }
    }
   }
   $170 = $5 + $129 | 0; //@line 3269
   HEAP8[$170 >> 0] = $$019$i & 0 - ((HEAPU8[$4 >> 0] | 0) >>> 7) ^ (HEAPU8[$170 >> 0] | 0); //@line 3274
  }
 } while (0);
 HEAP8[$2 >> 0] = 0; //@line 3277
 HEAP8[$47 >> 0] = 0; //@line 3278
 HEAP8[$48 >> 0] = 0; //@line 3279
 HEAP8[$49 >> 0] = 0; //@line 3280
 HEAP8[$50 >> 0] = 0; //@line 3281
 HEAP8[$51 >> 0] = 0; //@line 3282
 HEAP8[$52 >> 0] = 0; //@line 3283
 HEAP8[$53 >> 0] = 0; //@line 3284
 HEAP8[$54 >> 0] = 0; //@line 3285
 HEAP8[$55 >> 0] = 0; //@line 3286
 HEAP8[$56 >> 0] = 0; //@line 3287
 HEAP8[$57 >> 0] = 0; //@line 3288
 HEAP8[$58 >> 0] = 0; //@line 3289
 HEAP8[$59 >> 0] = 0; //@line 3290
 HEAP8[$60 >> 0] = 0; //@line 3291
 HEAP8[$61 >> 0] = 0; //@line 3292
 $175 = $12 + 16 | 0; //@line 3293
 $176 = $12 + 32 | 0; //@line 3294
 $177 = HEAP32[$176 >> 2] | 0; //@line 3295
 if ($177 >>> 0 < $16 >>> 0) {
  $$013$i = 0; //@line 3298
  do {
   if ($$013$i >>> 0 < $177 >>> 0) {
    $$sink$sink$i = HEAP8[$12 + 16 + $$013$i >> 0] | 0; //@line 3304
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($177 | 0) ? -128 : 0; //@line 3308
   }
   HEAP8[$6 + $$013$i >> 0] = $$sink$sink$i; //@line 3311
   $$013$i = $$013$i + 1 | 0; //@line 3312
  } while (($$013$i | 0) != ($16 | 0));
  $$09$i45 = 0; //@line 3315
  do {
   $185 = $6 + $$09$i45 | 0; //@line 3322
   HEAP8[$185 >> 0] = HEAP8[$5 + $$09$i45 >> 0] ^ HEAP8[$185 >> 0]; //@line 3327
   $$09$i45 = $$09$i45 + 1 | 0; //@line 3328
  } while (($$09$i45 | 0) != ($16 | 0));
  label = 25; //@line 3331
 } else {
  if ($16 | 0) {
   $$09$i41 = 0; //@line 3340
   do {
    HEAP8[$6 + $$09$i41 >> 0] = HEAP8[$4 + $$09$i41 >> 0] ^ HEAP8[$12 + 16 + $$09$i41 >> 0]; //@line 3348
    $$09$i41 = $$09$i41 + 1 | 0; //@line 3349
   } while (($$09$i41 | 0) != ($16 | 0));
   label = 25; //@line 3352
  }
 }
 if ((label | 0) == 25) {
  if ($16 | 0) {
   $$09$i = 0; //@line 3363
   do {
    $202 = $12 + $$09$i | 0; //@line 3367
    HEAP8[$202 >> 0] = HEAP8[$202 >> 0] ^ HEAP8[$6 + $$09$i >> 0]; //@line 3370
    $$09$i = $$09$i + 1 | 0; //@line 3371
   } while (($$09$i | 0) != ($16 | 0));
  }
 }
 $AsyncCtx = _emscripten_alloc_async_context(164, sp) | 0; //@line 3381
 $206 = _mbedtls_cipher_update($0, $12, $16, $12, $7) | 0; //@line 3382
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 689; //@line 3385
  HEAP32[$AsyncCtx + 4 >> 2] = $12; //@line 3387
  HEAP32[$AsyncCtx + 8 >> 2] = $20; //@line 3389
  HEAP32[$AsyncCtx + 12 >> 2] = $23; //@line 3391
  HEAP32[$AsyncCtx + 16 >> 2] = $41; //@line 3393
  HEAP32[$AsyncCtx + 20 >> 2] = $44; //@line 3395
  HEAP32[$AsyncCtx + 24 >> 2] = $25; //@line 3397
  HEAP32[$AsyncCtx + 28 >> 2] = $5; //@line 3399
  HEAP32[$AsyncCtx + 32 >> 2] = $46; //@line 3401
  HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 3403
  HEAP32[$AsyncCtx + 40 >> 2] = $34; //@line 3405
  HEAP32[$AsyncCtx + 44 >> 2] = $175; //@line 3407
  HEAP32[$AsyncCtx + 48 >> 2] = $1; //@line 3409
  HEAP32[$AsyncCtx + 52 >> 2] = $28; //@line 3411
  HEAP32[$AsyncCtx + 56 >> 2] = $35; //@line 3413
  HEAP32[$AsyncCtx + 60 >> 2] = $38; //@line 3415
  HEAP32[$AsyncCtx + 64 >> 2] = $16; //@line 3417
  HEAP32[$AsyncCtx + 68 >> 2] = $45; //@line 3419
  HEAP32[$AsyncCtx + 72 >> 2] = $4; //@line 3421
  HEAP32[$AsyncCtx + 76 >> 2] = $31; //@line 3423
  HEAP32[$AsyncCtx + 80 >> 2] = $17; //@line 3425
  HEAP32[$AsyncCtx + 84 >> 2] = $24; //@line 3427
  HEAP32[$AsyncCtx + 88 >> 2] = $27; //@line 3429
  HEAP32[$AsyncCtx + 92 >> 2] = $30; //@line 3431
  HEAP32[$AsyncCtx + 96 >> 2] = $36; //@line 3433
  HEAP32[$AsyncCtx + 100 >> 2] = $42; //@line 3435
  HEAP32[$AsyncCtx + 104 >> 2] = $176; //@line 3437
  HEAP32[$AsyncCtx + 108 >> 2] = $21; //@line 3439
  HEAP32[$AsyncCtx + 112 >> 2] = $39; //@line 3441
  HEAP32[$AsyncCtx + 116 >> 2] = $7; //@line 3443
  HEAP32[$AsyncCtx + 120 >> 2] = $18; //@line 3445
  HEAP32[$AsyncCtx + 124 >> 2] = $12; //@line 3447
  HEAP32[$AsyncCtx + 128 >> 2] = $22; //@line 3449
  HEAP32[$AsyncCtx + 132 >> 2] = $37; //@line 3451
  HEAP32[$AsyncCtx + 136 >> 2] = $43; //@line 3453
  HEAP32[$AsyncCtx + 140 >> 2] = $26; //@line 3455
  HEAP32[$AsyncCtx + 144 >> 2] = $29; //@line 3457
  HEAP32[$AsyncCtx + 148 >> 2] = $33; //@line 3459
  HEAP32[$AsyncCtx + 152 >> 2] = $19; //@line 3461
  HEAP32[$AsyncCtx + 156 >> 2] = $40; //@line 3463
  HEAP32[$AsyncCtx + 160 >> 2] = $6; //@line 3465
  sp = STACKTOP; //@line 3466
  STACKTOP = sp; //@line 3467
  return 0; //@line 3467
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3469
 if (!$206) {
  _memcpy($1 | 0, $12 | 0, $16 | 0) | 0; //@line 3472
 }
 HEAP8[$4 >> 0] = 0; //@line 3474
 HEAP8[$17 >> 0] = 0; //@line 3475
 HEAP8[$18 >> 0] = 0; //@line 3476
 HEAP8[$19 >> 0] = 0; //@line 3477
 HEAP8[$20 >> 0] = 0; //@line 3478
 HEAP8[$21 >> 0] = 0; //@line 3479
 HEAP8[$22 >> 0] = 0; //@line 3480
 HEAP8[$23 >> 0] = 0; //@line 3481
 HEAP8[$24 >> 0] = 0; //@line 3482
 HEAP8[$25 >> 0] = 0; //@line 3483
 HEAP8[$26 >> 0] = 0; //@line 3484
 HEAP8[$27 >> 0] = 0; //@line 3485
 HEAP8[$28 >> 0] = 0; //@line 3486
 HEAP8[$29 >> 0] = 0; //@line 3487
 HEAP8[$30 >> 0] = 0; //@line 3488
 HEAP8[$31 >> 0] = 0; //@line 3489
 HEAP8[$5 >> 0] = 0; //@line 3490
 HEAP8[$32 >> 0] = 0; //@line 3491
 HEAP8[$33 >> 0] = 0; //@line 3492
 HEAP8[$34 >> 0] = 0; //@line 3493
 HEAP8[$35 >> 0] = 0; //@line 3494
 HEAP8[$36 >> 0] = 0; //@line 3495
 HEAP8[$37 >> 0] = 0; //@line 3496
 HEAP8[$38 >> 0] = 0; //@line 3497
 HEAP8[$39 >> 0] = 0; //@line 3498
 HEAP8[$40 >> 0] = 0; //@line 3499
 HEAP8[$41 >> 0] = 0; //@line 3500
 HEAP8[$42 >> 0] = 0; //@line 3501
 HEAP8[$43 >> 0] = 0; //@line 3502
 HEAP8[$44 >> 0] = 0; //@line 3503
 HEAP8[$45 >> 0] = 0; //@line 3504
 HEAP8[$46 >> 0] = 0; //@line 3505
 HEAP32[$176 >> 2] = 0; //@line 3506
 HEAP8[$175 >> 0] = 0; //@line 3508
 HEAP8[$12 + 17 >> 0] = 0; //@line 3510
 HEAP8[$12 + 18 >> 0] = 0; //@line 3512
 HEAP8[$12 + 19 >> 0] = 0; //@line 3514
 HEAP8[$12 + 20 >> 0] = 0; //@line 3516
 HEAP8[$12 + 21 >> 0] = 0; //@line 3518
 HEAP8[$12 + 22 >> 0] = 0; //@line 3520
 HEAP8[$12 + 23 >> 0] = 0; //@line 3522
 HEAP8[$12 + 24 >> 0] = 0; //@line 3524
 HEAP8[$12 + 25 >> 0] = 0; //@line 3526
 HEAP8[$12 + 26 >> 0] = 0; //@line 3528
 HEAP8[$12 + 27 >> 0] = 0; //@line 3530
 HEAP8[$12 + 28 >> 0] = 0; //@line 3532
 HEAP8[$12 + 29 >> 0] = 0; //@line 3534
 HEAP8[$12 + 30 >> 0] = 0; //@line 3536
 HEAP8[$12 + 31 >> 0] = 0; //@line 3537
 HEAP8[$12 >> 0] = 0; //@line 3539
 HEAP8[$12 + 1 >> 0] = 0; //@line 3541
 HEAP8[$12 + 2 >> 0] = 0; //@line 3543
 HEAP8[$12 + 3 >> 0] = 0; //@line 3545
 HEAP8[$12 + 4 >> 0] = 0; //@line 3547
 HEAP8[$12 + 5 >> 0] = 0; //@line 3549
 HEAP8[$12 + 6 >> 0] = 0; //@line 3551
 HEAP8[$12 + 7 >> 0] = 0; //@line 3553
 HEAP8[$12 + 8 >> 0] = 0; //@line 3555
 HEAP8[$12 + 9 >> 0] = 0; //@line 3557
 HEAP8[$12 + 10 >> 0] = 0; //@line 3559
 HEAP8[$12 + 11 >> 0] = 0; //@line 3561
 HEAP8[$12 + 12 >> 0] = 0; //@line 3563
 HEAP8[$12 + 13 >> 0] = 0; //@line 3565
 HEAP8[$12 + 14 >> 0] = 0; //@line 3567
 HEAP8[$12 + 15 >> 0] = 0; //@line 3568
 $$0 = $206; //@line 3569
 STACKTOP = sp; //@line 3570
 return $$0 | 0; //@line 3570
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 9380
 $3 = HEAP32[5818] | 0; //@line 9381
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 9384
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 9388
 $7 = $6 & 3; //@line 9389
 if (($7 | 0) == 1) {
  _abort(); //@line 9392
 }
 $9 = $6 & -8; //@line 9395
 $10 = $2 + $9 | 0; //@line 9396
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 9401
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 9407
   $17 = $13 + $9 | 0; //@line 9408
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 9411
   }
   if ((HEAP32[5819] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 9417
    $106 = HEAP32[$105 >> 2] | 0; //@line 9418
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 9422
     $$1382 = $17; //@line 9422
     $114 = $16; //@line 9422
     break;
    }
    HEAP32[5816] = $17; //@line 9425
    HEAP32[$105 >> 2] = $106 & -2; //@line 9427
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 9430
    HEAP32[$16 + $17 >> 2] = $17; //@line 9432
    return;
   }
   $21 = $13 >>> 3; //@line 9435
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 9439
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 9441
    $28 = 23296 + ($21 << 1 << 2) | 0; //@line 9443
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 9448
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 9455
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[5814] = HEAP32[5814] & ~(1 << $21); //@line 9465
     $$1 = $16; //@line 9466
     $$1382 = $17; //@line 9466
     $114 = $16; //@line 9466
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 9472
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 9476
     }
     $41 = $26 + 8 | 0; //@line 9479
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 9483
     } else {
      _abort(); //@line 9485
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 9490
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 9491
    $$1 = $16; //@line 9492
    $$1382 = $17; //@line 9492
    $114 = $16; //@line 9492
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 9496
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 9498
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 9502
     $60 = $59 + 4 | 0; //@line 9503
     $61 = HEAP32[$60 >> 2] | 0; //@line 9504
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 9507
      if (!$63) {
       $$3 = 0; //@line 9510
       break;
      } else {
       $$1387 = $63; //@line 9513
       $$1390 = $59; //@line 9513
      }
     } else {
      $$1387 = $61; //@line 9516
      $$1390 = $60; //@line 9516
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 9519
      $66 = HEAP32[$65 >> 2] | 0; //@line 9520
      if ($66 | 0) {
       $$1387 = $66; //@line 9523
       $$1390 = $65; //@line 9523
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 9526
      $69 = HEAP32[$68 >> 2] | 0; //@line 9527
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 9532
       $$1390 = $68; //@line 9532
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 9537
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 9540
      $$3 = $$1387; //@line 9541
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 9546
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 9549
     }
     $53 = $51 + 12 | 0; //@line 9552
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 9556
     }
     $56 = $48 + 8 | 0; //@line 9559
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 9563
      HEAP32[$56 >> 2] = $51; //@line 9564
      $$3 = $48; //@line 9565
      break;
     } else {
      _abort(); //@line 9568
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 9575
    $$1382 = $17; //@line 9575
    $114 = $16; //@line 9575
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 9578
    $75 = 23560 + ($74 << 2) | 0; //@line 9579
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 9584
      if (!$$3) {
       HEAP32[5815] = HEAP32[5815] & ~(1 << $74); //@line 9591
       $$1 = $16; //@line 9592
       $$1382 = $17; //@line 9592
       $114 = $16; //@line 9592
       break L10;
      }
     } else {
      if ((HEAP32[5818] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 9599
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 9607
       if (!$$3) {
        $$1 = $16; //@line 9610
        $$1382 = $17; //@line 9610
        $114 = $16; //@line 9610
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[5818] | 0; //@line 9618
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 9621
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 9625
    $92 = $16 + 16 | 0; //@line 9626
    $93 = HEAP32[$92 >> 2] | 0; //@line 9627
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 9633
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 9637
       HEAP32[$93 + 24 >> 2] = $$3; //@line 9639
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 9645
    if (!$99) {
     $$1 = $16; //@line 9648
     $$1382 = $17; //@line 9648
     $114 = $16; //@line 9648
    } else {
     if ((HEAP32[5818] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 9653
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 9657
      HEAP32[$99 + 24 >> 2] = $$3; //@line 9659
      $$1 = $16; //@line 9660
      $$1382 = $17; //@line 9660
      $114 = $16; //@line 9660
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 9666
   $$1382 = $9; //@line 9666
   $114 = $2; //@line 9666
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 9671
 }
 $115 = $10 + 4 | 0; //@line 9674
 $116 = HEAP32[$115 >> 2] | 0; //@line 9675
 if (!($116 & 1)) {
  _abort(); //@line 9679
 }
 if (!($116 & 2)) {
  if ((HEAP32[5820] | 0) == ($10 | 0)) {
   $124 = (HEAP32[5817] | 0) + $$1382 | 0; //@line 9689
   HEAP32[5817] = $124; //@line 9690
   HEAP32[5820] = $$1; //@line 9691
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 9694
   if (($$1 | 0) != (HEAP32[5819] | 0)) {
    return;
   }
   HEAP32[5819] = 0; //@line 9700
   HEAP32[5816] = 0; //@line 9701
   return;
  }
  if ((HEAP32[5819] | 0) == ($10 | 0)) {
   $132 = (HEAP32[5816] | 0) + $$1382 | 0; //@line 9708
   HEAP32[5816] = $132; //@line 9709
   HEAP32[5819] = $114; //@line 9710
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 9713
   HEAP32[$114 + $132 >> 2] = $132; //@line 9715
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 9719
  $138 = $116 >>> 3; //@line 9720
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 9725
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 9727
    $145 = 23296 + ($138 << 1 << 2) | 0; //@line 9729
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[5818] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 9735
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 9742
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[5814] = HEAP32[5814] & ~(1 << $138); //@line 9752
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 9758
    } else {
     if ((HEAP32[5818] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 9763
     }
     $160 = $143 + 8 | 0; //@line 9766
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 9770
     } else {
      _abort(); //@line 9772
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 9777
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 9778
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 9781
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 9783
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 9787
      $180 = $179 + 4 | 0; //@line 9788
      $181 = HEAP32[$180 >> 2] | 0; //@line 9789
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 9792
       if (!$183) {
        $$3400 = 0; //@line 9795
        break;
       } else {
        $$1398 = $183; //@line 9798
        $$1402 = $179; //@line 9798
       }
      } else {
       $$1398 = $181; //@line 9801
       $$1402 = $180; //@line 9801
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 9804
       $186 = HEAP32[$185 >> 2] | 0; //@line 9805
       if ($186 | 0) {
        $$1398 = $186; //@line 9808
        $$1402 = $185; //@line 9808
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 9811
       $189 = HEAP32[$188 >> 2] | 0; //@line 9812
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 9817
        $$1402 = $188; //@line 9817
       }
      }
      if ((HEAP32[5818] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 9823
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 9826
       $$3400 = $$1398; //@line 9827
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 9832
      if ((HEAP32[5818] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 9836
      }
      $173 = $170 + 12 | 0; //@line 9839
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 9843
      }
      $176 = $167 + 8 | 0; //@line 9846
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 9850
       HEAP32[$176 >> 2] = $170; //@line 9851
       $$3400 = $167; //@line 9852
       break;
      } else {
       _abort(); //@line 9855
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 9863
     $196 = 23560 + ($195 << 2) | 0; //@line 9864
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 9869
       if (!$$3400) {
        HEAP32[5815] = HEAP32[5815] & ~(1 << $195); //@line 9876
        break L108;
       }
      } else {
       if ((HEAP32[5818] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 9883
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 9891
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[5818] | 0; //@line 9901
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 9904
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 9908
     $213 = $10 + 16 | 0; //@line 9909
     $214 = HEAP32[$213 >> 2] | 0; //@line 9910
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 9916
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 9920
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 9922
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 9928
     if ($220 | 0) {
      if ((HEAP32[5818] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 9934
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 9938
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 9940
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 9949
  HEAP32[$114 + $137 >> 2] = $137; //@line 9951
  if (($$1 | 0) == (HEAP32[5819] | 0)) {
   HEAP32[5816] = $137; //@line 9955
   return;
  } else {
   $$2 = $137; //@line 9958
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 9962
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 9965
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 9967
  $$2 = $$1382; //@line 9968
 }
 $235 = $$2 >>> 3; //@line 9970
 if ($$2 >>> 0 < 256) {
  $238 = 23296 + ($235 << 1 << 2) | 0; //@line 9974
  $239 = HEAP32[5814] | 0; //@line 9975
  $240 = 1 << $235; //@line 9976
  if (!($239 & $240)) {
   HEAP32[5814] = $239 | $240; //@line 9981
   $$0403 = $238; //@line 9983
   $$pre$phiZ2D = $238 + 8 | 0; //@line 9983
  } else {
   $244 = $238 + 8 | 0; //@line 9985
   $245 = HEAP32[$244 >> 2] | 0; //@line 9986
   if ((HEAP32[5818] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 9990
   } else {
    $$0403 = $245; //@line 9993
    $$pre$phiZ2D = $244; //@line 9993
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 9996
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 9998
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 10000
  HEAP32[$$1 + 12 >> 2] = $238; //@line 10002
  return;
 }
 $251 = $$2 >>> 8; //@line 10005
 if (!$251) {
  $$0396 = 0; //@line 10008
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 10012
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 10016
   $257 = $251 << $256; //@line 10017
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 10020
   $262 = $257 << $260; //@line 10022
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 10025
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 10030
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 10036
  }
 }
 $276 = 23560 + ($$0396 << 2) | 0; //@line 10039
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 10041
 HEAP32[$$1 + 20 >> 2] = 0; //@line 10044
 HEAP32[$$1 + 16 >> 2] = 0; //@line 10045
 $280 = HEAP32[5815] | 0; //@line 10046
 $281 = 1 << $$0396; //@line 10047
 do {
  if (!($280 & $281)) {
   HEAP32[5815] = $280 | $281; //@line 10053
   HEAP32[$276 >> 2] = $$1; //@line 10054
   HEAP32[$$1 + 24 >> 2] = $276; //@line 10056
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 10058
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 10060
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 10068
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 10068
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 10075
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 10079
    $301 = HEAP32[$299 >> 2] | 0; //@line 10081
    if (!$301) {
     label = 121; //@line 10084
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 10087
     $$0384 = $301; //@line 10087
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[5818] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 10094
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 10097
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 10099
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 10101
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 10103
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 10108
    $309 = HEAP32[$308 >> 2] | 0; //@line 10109
    $310 = HEAP32[5818] | 0; //@line 10110
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 10116
     HEAP32[$308 >> 2] = $$1; //@line 10117
     HEAP32[$$1 + 8 >> 2] = $309; //@line 10119
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 10121
     HEAP32[$$1 + 24 >> 2] = 0; //@line 10123
     break;
    } else {
     _abort(); //@line 10126
    }
   }
  }
 } while (0);
 $319 = (HEAP32[5822] | 0) + -1 | 0; //@line 10133
 HEAP32[5822] = $319; //@line 10134
 if (!$319) {
  $$0212$in$i = 23712; //@line 10137
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 10142
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 10148
  }
 }
 HEAP32[5822] = -1; //@line 10151
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_406($0) {
 $0 = $0 | 0;
 var $$013$i = 0, $$01720$i55 = 0, $$019$i = 0, $$019$i52 = 0, $$021$i54 = 0, $$09$i = 0, $$09$i41 = 0, $$09$i45 = 0, $$sink$sink$i = 0, $10 = 0, $100 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $127 = 0, $130 = 0, $14 = 0, $143 = 0, $146 = 0, $154 = 0, $155 = 0, $16 = 0, $168 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $183 = 0, $2 = 0, $20 = 0, $200 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0, $154$looptemp = 0;
 sp = STACKTOP; //@line 28892
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28894
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28896
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28898
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28900
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28902
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28904
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28906
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28908
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28910
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28912
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28914
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28916
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28918
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28920
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 28922
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 28924
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 28926
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 28928
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 28930
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 28932
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 28934
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 28936
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 28938
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 28940
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 28942
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 28944
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 28946
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 28948
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 28950
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 28952
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 28954
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 28956
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 28958
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 28960
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 28962
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 28964
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 28966
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 28968
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 28970
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 28972
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 28974
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 28976
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 28978
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 28980
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 28982
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 28984
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 28986
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 28988
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 28990
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 28992
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 28996
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 28998
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 29000
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 29002
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 29004
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 29006
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 29008
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 29010
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 29012
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 29014
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 29016
 L2 : do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   switch ($110 | 0) {
   case 16:
    {
     $$019$i52 = 135; //@line 29024
     break;
    }
   case 8:
    {
     $$019$i52 = 27; //@line 29028
     break;
    }
   default:
    {
     break L2;
    }
   }
   $127 = $110 + -1 | 0; //@line 29035
   $$01720$i55 = 0; //@line 29036
   $$021$i54 = $127; //@line 29036
   while (1) {
    $130 = HEAPU8[$24 + $$021$i54 >> 0] | 0; //@line 29040
    HEAP8[$48 + $$021$i54 >> 0] = $130 << 1 | $$01720$i55; //@line 29045
    if (($$021$i54 | 0) > 0) {
     $$01720$i55 = $130 >>> 7; //@line 29050
     $$021$i54 = $$021$i54 + -1 | 0; //@line 29050
    } else {
     break;
    }
   }
   $143 = $48 + $127 | 0; //@line 29060
   $146 = $$019$i52 & 0 - ((HEAPU8[$78 >> 0] | 0) >>> 7) ^ (HEAPU8[$143 >> 0] | 0); //@line 29063
   HEAP8[$143 >> 0] = $146; //@line 29065
   switch ($110 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 29068
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 29072
     break;
    }
   default:
    {
     break L2;
    }
   }
   HEAP8[$82 + $127 >> 0] = $146 << 1; //@line 29082
   if (($127 | 0) > 0) {
    $154 = $146; //@line 29086
    $155 = $110 + -2 | 0; //@line 29086
    while (1) {
     $154$looptemp = $154;
     $154 = HEAPU8[$48 + $155 >> 0] | 0; //@line 29091
     HEAP8[$82 + $155 >> 0] = $154 << 1 | $154$looptemp >>> 7; //@line 29096
     if (($155 | 0) <= 0) {
      break;
     } else {
      $155 = $155 + -1 | 0; //@line 29100
     }
    }
   }
   $168 = $82 + $127 | 0; //@line 29111
   HEAP8[$168 >> 0] = $$019$i & 0 - ((HEAPU8[$50 >> 0] | 0) >>> 7) ^ (HEAPU8[$168 >> 0] | 0); //@line 29116
  }
 } while (0);
 HEAP8[$78 >> 0] = 0; //@line 29119
 HEAP8[$84 >> 0] = 0; //@line 29120
 HEAP8[$28 >> 0] = 0; //@line 29121
 HEAP8[$12 >> 0] = 0; //@line 29122
 HEAP8[$72 >> 0] = 0; //@line 29123
 HEAP8[$30 >> 0] = 0; //@line 29124
 HEAP8[$22 >> 0] = 0; //@line 29125
 HEAP8[$122 >> 0] = 0; //@line 29126
 HEAP8[$32 >> 0] = 0; //@line 29127
 HEAP8[$64 >> 0] = 0; //@line 29128
 HEAP8[$74 >> 0] = 0; //@line 29129
 HEAP8[$92 >> 0] = 0; //@line 29130
 HEAP8[$70 >> 0] = 0; //@line 29131
 HEAP8[$86 >> 0] = 0; //@line 29132
 HEAP8[$94 >> 0] = 0; //@line 29133
 HEAP8[$40 >> 0] = 0; //@line 29134
 $173 = $98 + 16 | 0; //@line 29135
 $174 = $98 + 32 | 0; //@line 29136
 $175 = HEAP32[$174 >> 2] | 0; //@line 29137
 if ($175 >>> 0 < $46 >>> 0) {
  $$013$i = 0; //@line 29140
  do {
   if ($$013$i >>> 0 < $175 >>> 0) {
    $$sink$sink$i = HEAP8[$98 + 16 + $$013$i >> 0] | 0; //@line 29146
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($175 | 0) ? -128 : 0; //@line 29150
   }
   HEAP8[$96 + $$013$i >> 0] = $$sink$sink$i; //@line 29153
   $$013$i = $$013$i + 1 | 0; //@line 29154
  } while (($$013$i | 0) != ($46 | 0));
  $$09$i45 = 0; //@line 29157
  do {
   $183 = $96 + $$09$i45 | 0; //@line 29164
   HEAP8[$183 >> 0] = HEAP8[$82 + $$09$i45 >> 0] ^ HEAP8[$183 >> 0]; //@line 29169
   $$09$i45 = $$09$i45 + 1 | 0; //@line 29170
  } while (($$09$i45 | 0) != ($46 | 0));
  label = 21; //@line 29173
 } else {
  if ($46 | 0) {
   $$09$i41 = 0; //@line 29182
   do {
    HEAP8[$96 + $$09$i41 >> 0] = HEAP8[$48 + $$09$i41 >> 0] ^ HEAP8[$98 + 16 + $$09$i41 >> 0]; //@line 29190
    $$09$i41 = $$09$i41 + 1 | 0; //@line 29191
   } while (($$09$i41 | 0) != ($46 | 0));
   label = 21; //@line 29194
  }
 }
 if ((label | 0) == 21) {
  if ($46 | 0) {
   $$09$i = 0; //@line 29205
   do {
    $200 = $98 + $$09$i | 0; //@line 29209
    HEAP8[$200 >> 0] = HEAP8[$200 >> 0] ^ HEAP8[$96 + $$09$i >> 0]; //@line 29212
    $$09$i = $$09$i + 1 | 0; //@line 29213
   } while (($$09$i | 0) != ($46 | 0));
  }
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(164) | 0; //@line 29223
 $204 = _mbedtls_cipher_update($38, $2, $46, $2, $106) | 0; //@line 29224
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 689; //@line 29227
  $205 = $ReallocAsyncCtx + 4 | 0; //@line 29228
  HEAP32[$205 >> 2] = $2; //@line 29229
  $206 = $ReallocAsyncCtx + 8 | 0; //@line 29230
  HEAP32[$206 >> 2] = $4; //@line 29231
  $207 = $ReallocAsyncCtx + 12 | 0; //@line 29232
  HEAP32[$207 >> 2] = $6; //@line 29233
  $208 = $ReallocAsyncCtx + 16 | 0; //@line 29234
  HEAP32[$208 >> 2] = $8; //@line 29235
  $209 = $ReallocAsyncCtx + 20 | 0; //@line 29236
  HEAP32[$209 >> 2] = $10; //@line 29237
  $210 = $ReallocAsyncCtx + 24 | 0; //@line 29238
  HEAP32[$210 >> 2] = $14; //@line 29239
  $211 = $ReallocAsyncCtx + 28 | 0; //@line 29240
  HEAP32[$211 >> 2] = $16; //@line 29241
  $212 = $ReallocAsyncCtx + 32 | 0; //@line 29242
  HEAP32[$212 >> 2] = $18; //@line 29243
  $213 = $ReallocAsyncCtx + 36 | 0; //@line 29244
  HEAP32[$213 >> 2] = $20; //@line 29245
  $214 = $ReallocAsyncCtx + 40 | 0; //@line 29246
  HEAP32[$214 >> 2] = $26; //@line 29247
  $215 = $ReallocAsyncCtx + 44 | 0; //@line 29248
  HEAP32[$215 >> 2] = $173; //@line 29249
  $216 = $ReallocAsyncCtx + 48 | 0; //@line 29250
  HEAP32[$216 >> 2] = $36; //@line 29251
  $217 = $ReallocAsyncCtx + 52 | 0; //@line 29252
  HEAP32[$217 >> 2] = $34; //@line 29253
  $218 = $ReallocAsyncCtx + 56 | 0; //@line 29254
  HEAP32[$218 >> 2] = $42; //@line 29255
  $219 = $ReallocAsyncCtx + 60 | 0; //@line 29256
  HEAP32[$219 >> 2] = $44; //@line 29257
  $220 = $ReallocAsyncCtx + 64 | 0; //@line 29258
  HEAP32[$220 >> 2] = $46; //@line 29259
  $221 = $ReallocAsyncCtx + 68 | 0; //@line 29260
  HEAP32[$221 >> 2] = $54; //@line 29261
  $222 = $ReallocAsyncCtx + 72 | 0; //@line 29262
  HEAP32[$222 >> 2] = $50; //@line 29263
  $223 = $ReallocAsyncCtx + 76 | 0; //@line 29264
  HEAP32[$223 >> 2] = $52; //@line 29265
  $224 = $ReallocAsyncCtx + 80 | 0; //@line 29266
  HEAP32[$224 >> 2] = $56; //@line 29267
  $225 = $ReallocAsyncCtx + 84 | 0; //@line 29268
  HEAP32[$225 >> 2] = $58; //@line 29269
  $226 = $ReallocAsyncCtx + 88 | 0; //@line 29270
  HEAP32[$226 >> 2] = $60; //@line 29271
  $227 = $ReallocAsyncCtx + 92 | 0; //@line 29272
  HEAP32[$227 >> 2] = $62; //@line 29273
  $228 = $ReallocAsyncCtx + 96 | 0; //@line 29274
  HEAP32[$228 >> 2] = $66; //@line 29275
  $229 = $ReallocAsyncCtx + 100 | 0; //@line 29276
  HEAP32[$229 >> 2] = $68; //@line 29277
  $230 = $ReallocAsyncCtx + 104 | 0; //@line 29278
  HEAP32[$230 >> 2] = $174; //@line 29279
  $231 = $ReallocAsyncCtx + 108 | 0; //@line 29280
  HEAP32[$231 >> 2] = $76; //@line 29281
  $232 = $ReallocAsyncCtx + 112 | 0; //@line 29282
  HEAP32[$232 >> 2] = $80; //@line 29283
  $233 = $ReallocAsyncCtx + 116 | 0; //@line 29284
  HEAP32[$233 >> 2] = $88; //@line 29285
  $234 = $ReallocAsyncCtx + 120 | 0; //@line 29286
  HEAP32[$234 >> 2] = $90; //@line 29287
  $235 = $ReallocAsyncCtx + 124 | 0; //@line 29288
  HEAP32[$235 >> 2] = $98; //@line 29289
  $236 = $ReallocAsyncCtx + 128 | 0; //@line 29290
  HEAP32[$236 >> 2] = $100; //@line 29291
  $237 = $ReallocAsyncCtx + 132 | 0; //@line 29292
  HEAP32[$237 >> 2] = $104; //@line 29293
  $238 = $ReallocAsyncCtx + 136 | 0; //@line 29294
  HEAP32[$238 >> 2] = $108; //@line 29295
  $239 = $ReallocAsyncCtx + 140 | 0; //@line 29296
  HEAP32[$239 >> 2] = $112; //@line 29297
  $240 = $ReallocAsyncCtx + 144 | 0; //@line 29298
  HEAP32[$240 >> 2] = $114; //@line 29299
  $241 = $ReallocAsyncCtx + 148 | 0; //@line 29300
  HEAP32[$241 >> 2] = $116; //@line 29301
  $242 = $ReallocAsyncCtx + 152 | 0; //@line 29302
  HEAP32[$242 >> 2] = $118; //@line 29303
  $243 = $ReallocAsyncCtx + 156 | 0; //@line 29304
  HEAP32[$243 >> 2] = $120; //@line 29305
  $244 = $ReallocAsyncCtx + 160 | 0; //@line 29306
  HEAP32[$244 >> 2] = $124; //@line 29307
  sp = STACKTOP; //@line 29308
  return;
 }
 HEAP32[___async_retval >> 2] = $204; //@line 29312
 ___async_unwind = 0; //@line 29313
 HEAP32[$ReallocAsyncCtx >> 2] = 689; //@line 29314
 $205 = $ReallocAsyncCtx + 4 | 0; //@line 29315
 HEAP32[$205 >> 2] = $2; //@line 29316
 $206 = $ReallocAsyncCtx + 8 | 0; //@line 29317
 HEAP32[$206 >> 2] = $4; //@line 29318
 $207 = $ReallocAsyncCtx + 12 | 0; //@line 29319
 HEAP32[$207 >> 2] = $6; //@line 29320
 $208 = $ReallocAsyncCtx + 16 | 0; //@line 29321
 HEAP32[$208 >> 2] = $8; //@line 29322
 $209 = $ReallocAsyncCtx + 20 | 0; //@line 29323
 HEAP32[$209 >> 2] = $10; //@line 29324
 $210 = $ReallocAsyncCtx + 24 | 0; //@line 29325
 HEAP32[$210 >> 2] = $14; //@line 29326
 $211 = $ReallocAsyncCtx + 28 | 0; //@line 29327
 HEAP32[$211 >> 2] = $16; //@line 29328
 $212 = $ReallocAsyncCtx + 32 | 0; //@line 29329
 HEAP32[$212 >> 2] = $18; //@line 29330
 $213 = $ReallocAsyncCtx + 36 | 0; //@line 29331
 HEAP32[$213 >> 2] = $20; //@line 29332
 $214 = $ReallocAsyncCtx + 40 | 0; //@line 29333
 HEAP32[$214 >> 2] = $26; //@line 29334
 $215 = $ReallocAsyncCtx + 44 | 0; //@line 29335
 HEAP32[$215 >> 2] = $173; //@line 29336
 $216 = $ReallocAsyncCtx + 48 | 0; //@line 29337
 HEAP32[$216 >> 2] = $36; //@line 29338
 $217 = $ReallocAsyncCtx + 52 | 0; //@line 29339
 HEAP32[$217 >> 2] = $34; //@line 29340
 $218 = $ReallocAsyncCtx + 56 | 0; //@line 29341
 HEAP32[$218 >> 2] = $42; //@line 29342
 $219 = $ReallocAsyncCtx + 60 | 0; //@line 29343
 HEAP32[$219 >> 2] = $44; //@line 29344
 $220 = $ReallocAsyncCtx + 64 | 0; //@line 29345
 HEAP32[$220 >> 2] = $46; //@line 29346
 $221 = $ReallocAsyncCtx + 68 | 0; //@line 29347
 HEAP32[$221 >> 2] = $54; //@line 29348
 $222 = $ReallocAsyncCtx + 72 | 0; //@line 29349
 HEAP32[$222 >> 2] = $50; //@line 29350
 $223 = $ReallocAsyncCtx + 76 | 0; //@line 29351
 HEAP32[$223 >> 2] = $52; //@line 29352
 $224 = $ReallocAsyncCtx + 80 | 0; //@line 29353
 HEAP32[$224 >> 2] = $56; //@line 29354
 $225 = $ReallocAsyncCtx + 84 | 0; //@line 29355
 HEAP32[$225 >> 2] = $58; //@line 29356
 $226 = $ReallocAsyncCtx + 88 | 0; //@line 29357
 HEAP32[$226 >> 2] = $60; //@line 29358
 $227 = $ReallocAsyncCtx + 92 | 0; //@line 29359
 HEAP32[$227 >> 2] = $62; //@line 29360
 $228 = $ReallocAsyncCtx + 96 | 0; //@line 29361
 HEAP32[$228 >> 2] = $66; //@line 29362
 $229 = $ReallocAsyncCtx + 100 | 0; //@line 29363
 HEAP32[$229 >> 2] = $68; //@line 29364
 $230 = $ReallocAsyncCtx + 104 | 0; //@line 29365
 HEAP32[$230 >> 2] = $174; //@line 29366
 $231 = $ReallocAsyncCtx + 108 | 0; //@line 29367
 HEAP32[$231 >> 2] = $76; //@line 29368
 $232 = $ReallocAsyncCtx + 112 | 0; //@line 29369
 HEAP32[$232 >> 2] = $80; //@line 29370
 $233 = $ReallocAsyncCtx + 116 | 0; //@line 29371
 HEAP32[$233 >> 2] = $88; //@line 29372
 $234 = $ReallocAsyncCtx + 120 | 0; //@line 29373
 HEAP32[$234 >> 2] = $90; //@line 29374
 $235 = $ReallocAsyncCtx + 124 | 0; //@line 29375
 HEAP32[$235 >> 2] = $98; //@line 29376
 $236 = $ReallocAsyncCtx + 128 | 0; //@line 29377
 HEAP32[$236 >> 2] = $100; //@line 29378
 $237 = $ReallocAsyncCtx + 132 | 0; //@line 29379
 HEAP32[$237 >> 2] = $104; //@line 29380
 $238 = $ReallocAsyncCtx + 136 | 0; //@line 29381
 HEAP32[$238 >> 2] = $108; //@line 29382
 $239 = $ReallocAsyncCtx + 140 | 0; //@line 29383
 HEAP32[$239 >> 2] = $112; //@line 29384
 $240 = $ReallocAsyncCtx + 144 | 0; //@line 29385
 HEAP32[$240 >> 2] = $114; //@line 29386
 $241 = $ReallocAsyncCtx + 148 | 0; //@line 29387
 HEAP32[$241 >> 2] = $116; //@line 29388
 $242 = $ReallocAsyncCtx + 152 | 0; //@line 29389
 HEAP32[$242 >> 2] = $118; //@line 29390
 $243 = $ReallocAsyncCtx + 156 | 0; //@line 29391
 HEAP32[$243 >> 2] = $120; //@line 29392
 $244 = $ReallocAsyncCtx + 160 | 0; //@line 29393
 HEAP32[$244 >> 2] = $124; //@line 29394
 sp = STACKTOP; //@line 29395
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $104 = 0, $121 = 0, $122 = 0, $125 = 0, $143 = 0, $2 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $43 = 0, $46 = 0, $51 = 0, $52 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $67 = 0, $78 = 0, $93 = 0, $96 = 0, $AsyncCtx = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx50 = 0, $AsyncCtx54 = 0, $AsyncCtx58 = 0, $AsyncCtx61 = 0, $AsyncCtx64 = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 835
 STACKTOP = STACKTOP + 112 | 0; //@line 836
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 836
 $vararg_buffer19 = sp + 64 | 0; //@line 837
 $vararg_buffer17 = sp + 56 | 0; //@line 838
 $vararg_buffer14 = sp + 48 | 0; //@line 839
 $vararg_buffer11 = sp + 40 | 0; //@line 840
 $vararg_buffer9 = sp + 32 | 0; //@line 841
 $vararg_buffer6 = sp + 24 | 0; //@line 842
 $vararg_buffer4 = sp + 16 | 0; //@line 843
 $vararg_buffer1 = sp + 8 | 0; //@line 844
 $2 = sp + 88 | 0; //@line 846
 $3 = sp + 72 | 0; //@line 847
 _printf(10904, sp) | 0; //@line 848
 $4 = $0 + 783 | 0; //@line 849
 $6 = HEAPU8[$4 >> 0] | 0; //@line 851
 HEAP32[$vararg_buffer1 >> 2] = $1; //@line 852
 HEAP32[$vararg_buffer1 + 4 >> 2] = $6; //@line 854
 _printf(11264, $vararg_buffer1) | 0; //@line 855
 $AsyncCtx58 = _emscripten_alloc_async_context(80, sp) | 0; //@line 856
 _putchar(10) | 0; //@line 857
 if (___async) {
  HEAP32[$AsyncCtx58 >> 2] = 68; //@line 860
  HEAP32[$AsyncCtx58 + 4 >> 2] = $2; //@line 862
  HEAP32[$AsyncCtx58 + 8 >> 2] = $1; //@line 864
  HEAP32[$AsyncCtx58 + 12 >> 2] = $0; //@line 866
  HEAP32[$AsyncCtx58 + 16 >> 2] = $3; //@line 868
  HEAP32[$AsyncCtx58 + 20 >> 2] = $vararg_buffer9; //@line 870
  HEAP32[$AsyncCtx58 + 24 >> 2] = $vararg_buffer9; //@line 872
  HEAP32[$AsyncCtx58 + 28 >> 2] = $vararg_buffer11; //@line 874
  HEAP32[$AsyncCtx58 + 32 >> 2] = $vararg_buffer11; //@line 876
  HEAP32[$AsyncCtx58 + 36 >> 2] = $vararg_buffer14; //@line 878
  HEAP32[$AsyncCtx58 + 40 >> 2] = $vararg_buffer14; //@line 880
  HEAP32[$AsyncCtx58 + 44 >> 2] = $vararg_buffer4; //@line 882
  HEAP32[$AsyncCtx58 + 48 >> 2] = $vararg_buffer4; //@line 884
  HEAP32[$AsyncCtx58 + 52 >> 2] = $vararg_buffer6; //@line 886
  HEAP32[$AsyncCtx58 + 56 >> 2] = $vararg_buffer6; //@line 888
  HEAP32[$AsyncCtx58 + 60 >> 2] = $vararg_buffer17; //@line 890
  HEAP32[$AsyncCtx58 + 64 >> 2] = $vararg_buffer17; //@line 892
  HEAP32[$AsyncCtx58 + 68 >> 2] = $vararg_buffer19; //@line 894
  HEAP32[$AsyncCtx58 + 72 >> 2] = $vararg_buffer19; //@line 896
  HEAP32[$AsyncCtx58 + 76 >> 2] = $4; //@line 898
  sp = STACKTOP; //@line 899
  STACKTOP = sp; //@line 900
  return;
 }
 _emscripten_free_async_context($AsyncCtx58 | 0); //@line 902
 HEAP8[$0 + 688 >> 0] = 1; //@line 904
 if (HEAP8[$4 >> 0] | 0) {
  HEAP8[$4 >> 0] = 0; //@line 908
  $29 = $0 + 1112 | 0; //@line 909
  $30 = $2 + 12 | 0; //@line 910
  HEAP32[$2 >> 2] = 69; //@line 911
  HEAP32[$2 + 4 >> 2] = 0; //@line 913
  HEAP32[$2 + 8 >> 2] = $0; //@line 915
  HEAP32[$30 >> 2] = 648; //@line 916
  $31 = $0 + 1152 | 0; //@line 917
  if (($31 | 0) != ($2 | 0)) {
   $33 = $0 + 1164 | 0; //@line 920
   $34 = HEAP32[$33 >> 2] | 0; //@line 921
   do {
    if ($34 | 0) {
     $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 926
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 927
     FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 928
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 70; //@line 931
      HEAP32[$AsyncCtx + 4 >> 2] = $30; //@line 933
      HEAP32[$AsyncCtx + 8 >> 2] = $33; //@line 935
      HEAP32[$AsyncCtx + 12 >> 2] = $31; //@line 937
      HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 939
      HEAP32[$AsyncCtx + 20 >> 2] = $29; //@line 941
      sp = STACKTOP; //@line 942
      STACKTOP = sp; //@line 943
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 945
      break;
     }
    }
   } while (0);
   $43 = HEAP32[$30 >> 2] | 0; //@line 950
   do {
    if (!$43) {
     $51 = 0; //@line 954
    } else {
     $46 = HEAP32[$43 + 4 >> 2] | 0; //@line 957
     $AsyncCtx23 = _emscripten_alloc_async_context(20, sp) | 0; //@line 958
     FUNCTION_TABLE_vii[$46 & 31]($31, $2); //@line 959
     if (___async) {
      HEAP32[$AsyncCtx23 >> 2] = 71; //@line 962
      HEAP32[$AsyncCtx23 + 4 >> 2] = $30; //@line 964
      HEAP32[$AsyncCtx23 + 8 >> 2] = $33; //@line 966
      HEAP32[$AsyncCtx23 + 12 >> 2] = $29; //@line 968
      HEAP32[$AsyncCtx23 + 16 >> 2] = $2; //@line 970
      sp = STACKTOP; //@line 971
      STACKTOP = sp; //@line 972
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx23 | 0); //@line 974
      $51 = HEAP32[$30 >> 2] | 0; //@line 976
      break;
     }
    }
   } while (0);
   HEAP32[$33 >> 2] = $51; //@line 981
  }
  __ZN4mbed6Ticker5setupEy($29, 2e5, 0); //@line 983
  $52 = HEAP32[$30 >> 2] | 0; //@line 984
  if (!$52) {
   STACKTOP = sp; //@line 987
   return;
  }
  $55 = HEAP32[$52 + 8 >> 2] | 0; //@line 990
  $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 991
  FUNCTION_TABLE_vi[$55 & 1023]($2); //@line 992
  if (___async) {
   HEAP32[$AsyncCtx27 >> 2] = 72; //@line 995
   sp = STACKTOP; //@line 996
   STACKTOP = sp; //@line 997
   return;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 999
  STACKTOP = sp; //@line 1000
  return;
 }
 do {
  if ($1 | 0) {
   $57 = $0 + 1112 | 0; //@line 1005
   $58 = $3 + 12 | 0; //@line 1006
   HEAP32[$3 >> 2] = 73; //@line 1007
   HEAP32[$3 + 4 >> 2] = 0; //@line 1009
   HEAP32[$3 + 8 >> 2] = $0; //@line 1011
   HEAP32[$58 >> 2] = 648; //@line 1012
   $59 = ___muldi3($1 | 0, 0, 1e3, 0) | 0; //@line 1013
   $60 = tempRet0; //@line 1014
   $61 = $0 + 1152 | 0; //@line 1015
   if (($61 | 0) != ($3 | 0)) {
    $63 = $0 + 1164 | 0; //@line 1018
    $64 = HEAP32[$63 >> 2] | 0; //@line 1019
    do {
     if ($64 | 0) {
      $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 1024
      $AsyncCtx31 = _emscripten_alloc_async_context(96, sp) | 0; //@line 1025
      FUNCTION_TABLE_vi[$67 & 1023]($61); //@line 1026
      if (___async) {
       HEAP32[$AsyncCtx31 >> 2] = 74; //@line 1029
       HEAP32[$AsyncCtx31 + 4 >> 2] = $vararg_buffer9; //@line 1031
       HEAP32[$AsyncCtx31 + 8 >> 2] = $vararg_buffer9; //@line 1033
       HEAP32[$AsyncCtx31 + 12 >> 2] = $vararg_buffer11; //@line 1035
       HEAP32[$AsyncCtx31 + 16 >> 2] = $vararg_buffer11; //@line 1037
       HEAP32[$AsyncCtx31 + 20 >> 2] = $61; //@line 1039
       HEAP32[$AsyncCtx31 + 24 >> 2] = $3; //@line 1041
       HEAP32[$AsyncCtx31 + 28 >> 2] = $58; //@line 1043
       HEAP32[$AsyncCtx31 + 32 >> 2] = $63; //@line 1045
       HEAP32[$AsyncCtx31 + 36 >> 2] = $57; //@line 1047
       $78 = $AsyncCtx31 + 40 | 0; //@line 1049
       HEAP32[$78 >> 2] = $59; //@line 1051
       HEAP32[$78 + 4 >> 2] = $60; //@line 1054
       HEAP32[$AsyncCtx31 + 48 >> 2] = $vararg_buffer14; //@line 1056
       HEAP32[$AsyncCtx31 + 52 >> 2] = $vararg_buffer14; //@line 1058
       HEAP32[$AsyncCtx31 + 56 >> 2] = $0; //@line 1060
       HEAP32[$AsyncCtx31 + 60 >> 2] = $vararg_buffer4; //@line 1062
       HEAP32[$AsyncCtx31 + 64 >> 2] = $vararg_buffer4; //@line 1064
       HEAP32[$AsyncCtx31 + 68 >> 2] = $vararg_buffer6; //@line 1066
       HEAP32[$AsyncCtx31 + 72 >> 2] = $vararg_buffer6; //@line 1068
       HEAP32[$AsyncCtx31 + 76 >> 2] = $vararg_buffer17; //@line 1070
       HEAP32[$AsyncCtx31 + 80 >> 2] = $vararg_buffer17; //@line 1072
       HEAP32[$AsyncCtx31 + 84 >> 2] = $vararg_buffer19; //@line 1074
       HEAP32[$AsyncCtx31 + 88 >> 2] = $vararg_buffer19; //@line 1076
       sp = STACKTOP; //@line 1077
       STACKTOP = sp; //@line 1078
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx31 | 0); //@line 1080
       break;
      }
     }
    } while (0);
    $93 = HEAP32[$58 >> 2] | 0; //@line 1085
    do {
     if (!$93) {
      $121 = 0; //@line 1089
     } else {
      $96 = HEAP32[$93 + 4 >> 2] | 0; //@line 1092
      $AsyncCtx34 = _emscripten_alloc_async_context(96, sp) | 0; //@line 1093
      FUNCTION_TABLE_vii[$96 & 31]($61, $3); //@line 1094
      if (___async) {
       HEAP32[$AsyncCtx34 >> 2] = 75; //@line 1097
       HEAP32[$AsyncCtx34 + 4 >> 2] = $vararg_buffer9; //@line 1099
       HEAP32[$AsyncCtx34 + 8 >> 2] = $vararg_buffer9; //@line 1101
       HEAP32[$AsyncCtx34 + 12 >> 2] = $vararg_buffer11; //@line 1103
       HEAP32[$AsyncCtx34 + 16 >> 2] = $vararg_buffer11; //@line 1105
       HEAP32[$AsyncCtx34 + 20 >> 2] = $63; //@line 1107
       HEAP32[$AsyncCtx34 + 24 >> 2] = $57; //@line 1109
       $104 = $AsyncCtx34 + 32 | 0; //@line 1111
       HEAP32[$104 >> 2] = $59; //@line 1113
       HEAP32[$104 + 4 >> 2] = $60; //@line 1116
       HEAP32[$AsyncCtx34 + 40 >> 2] = $58; //@line 1118
       HEAP32[$AsyncCtx34 + 44 >> 2] = $3; //@line 1120
       HEAP32[$AsyncCtx34 + 48 >> 2] = $vararg_buffer14; //@line 1122
       HEAP32[$AsyncCtx34 + 52 >> 2] = $vararg_buffer14; //@line 1124
       HEAP32[$AsyncCtx34 + 56 >> 2] = $0; //@line 1126
       HEAP32[$AsyncCtx34 + 60 >> 2] = $vararg_buffer4; //@line 1128
       HEAP32[$AsyncCtx34 + 64 >> 2] = $vararg_buffer4; //@line 1130
       HEAP32[$AsyncCtx34 + 68 >> 2] = $vararg_buffer6; //@line 1132
       HEAP32[$AsyncCtx34 + 72 >> 2] = $vararg_buffer6; //@line 1134
       HEAP32[$AsyncCtx34 + 76 >> 2] = $vararg_buffer17; //@line 1136
       HEAP32[$AsyncCtx34 + 80 >> 2] = $vararg_buffer17; //@line 1138
       HEAP32[$AsyncCtx34 + 84 >> 2] = $vararg_buffer19; //@line 1140
       HEAP32[$AsyncCtx34 + 88 >> 2] = $vararg_buffer19; //@line 1142
       sp = STACKTOP; //@line 1143
       STACKTOP = sp; //@line 1144
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx34 | 0); //@line 1146
       $121 = HEAP32[$58 >> 2] | 0; //@line 1148
       break;
      }
     }
    } while (0);
    HEAP32[$63 >> 2] = $121; //@line 1153
   }
   __ZN4mbed6Ticker5setupEy($57, $59, $60); //@line 1155
   $122 = HEAP32[$58 >> 2] | 0; //@line 1156
   if ($122 | 0) {
    $125 = HEAP32[$122 + 8 >> 2] | 0; //@line 1160
    $AsyncCtx38 = _emscripten_alloc_async_context(64, sp) | 0; //@line 1161
    FUNCTION_TABLE_vi[$125 & 1023]($3); //@line 1162
    if (___async) {
     HEAP32[$AsyncCtx38 >> 2] = 76; //@line 1165
     HEAP32[$AsyncCtx38 + 4 >> 2] = $vararg_buffer9; //@line 1167
     HEAP32[$AsyncCtx38 + 8 >> 2] = $vararg_buffer9; //@line 1169
     HEAP32[$AsyncCtx38 + 12 >> 2] = $vararg_buffer11; //@line 1171
     HEAP32[$AsyncCtx38 + 16 >> 2] = $vararg_buffer11; //@line 1173
     HEAP32[$AsyncCtx38 + 20 >> 2] = $vararg_buffer14; //@line 1175
     HEAP32[$AsyncCtx38 + 24 >> 2] = $vararg_buffer14; //@line 1177
     HEAP32[$AsyncCtx38 + 28 >> 2] = $0; //@line 1179
     HEAP32[$AsyncCtx38 + 32 >> 2] = $vararg_buffer4; //@line 1181
     HEAP32[$AsyncCtx38 + 36 >> 2] = $vararg_buffer4; //@line 1183
     HEAP32[$AsyncCtx38 + 40 >> 2] = $vararg_buffer6; //@line 1185
     HEAP32[$AsyncCtx38 + 44 >> 2] = $vararg_buffer6; //@line 1187
     HEAP32[$AsyncCtx38 + 48 >> 2] = $vararg_buffer17; //@line 1189
     HEAP32[$AsyncCtx38 + 52 >> 2] = $vararg_buffer17; //@line 1191
     HEAP32[$AsyncCtx38 + 56 >> 2] = $vararg_buffer19; //@line 1193
     HEAP32[$AsyncCtx38 + 60 >> 2] = $vararg_buffer19; //@line 1195
     sp = STACKTOP; //@line 1196
     STACKTOP = sp; //@line 1197
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx38 | 0); //@line 1199
     break;
    }
   }
  }
 } while (0);
 $143 = (HEAP8[$0 + 770 >> 0] | 0) == 0; //@line 1207
 _printf(10904, $vararg_buffer4) | 0; //@line 1208
 if ($143) {
  HEAP32[$vararg_buffer14 >> 2] = 6; //@line 1210
  _printf(10970, $vararg_buffer14) | 0; //@line 1211
  $AsyncCtx46 = _emscripten_alloc_async_context(24, sp) | 0; //@line 1212
  _putchar(10) | 0; //@line 1213
  if (___async) {
   HEAP32[$AsyncCtx46 >> 2] = 80; //@line 1216
   HEAP32[$AsyncCtx46 + 4 >> 2] = $0; //@line 1218
   HEAP32[$AsyncCtx46 + 8 >> 2] = $vararg_buffer17; //@line 1220
   HEAP32[$AsyncCtx46 + 12 >> 2] = $vararg_buffer17; //@line 1222
   HEAP32[$AsyncCtx46 + 16 >> 2] = $vararg_buffer19; //@line 1224
   HEAP32[$AsyncCtx46 + 20 >> 2] = $vararg_buffer19; //@line 1226
   sp = STACKTOP; //@line 1227
   STACKTOP = sp; //@line 1228
   return;
  }
  _emscripten_free_async_context($AsyncCtx46 | 0); //@line 1230
  $AsyncCtx61 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1231
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1232
  if (___async) {
   HEAP32[$AsyncCtx61 >> 2] = 81; //@line 1235
   HEAP32[$AsyncCtx61 + 4 >> 2] = $vararg_buffer17; //@line 1237
   HEAP32[$AsyncCtx61 + 8 >> 2] = $vararg_buffer17; //@line 1239
   HEAP32[$AsyncCtx61 + 12 >> 2] = $vararg_buffer19; //@line 1241
   HEAP32[$AsyncCtx61 + 16 >> 2] = $vararg_buffer19; //@line 1243
   sp = STACKTOP; //@line 1244
   STACKTOP = sp; //@line 1245
   return;
  }
  _emscripten_free_async_context($AsyncCtx61 | 0); //@line 1247
  _printf(10904, $vararg_buffer17) | 0; //@line 1248
  HEAP32[$vararg_buffer19 >> 2] = 6; //@line 1249
  _printf(10999, $vararg_buffer19) | 0; //@line 1250
  $AsyncCtx42 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1251
  _putchar(10) | 0; //@line 1252
  if (___async) {
   HEAP32[$AsyncCtx42 >> 2] = 82; //@line 1255
   sp = STACKTOP; //@line 1256
   STACKTOP = sp; //@line 1257
   return;
  }
  _emscripten_free_async_context($AsyncCtx42 | 0); //@line 1259
  STACKTOP = sp; //@line 1260
  return;
 } else {
  HEAP32[$vararg_buffer6 >> 2] = 5; //@line 1262
  _printf(10970, $vararg_buffer6) | 0; //@line 1263
  $AsyncCtx54 = _emscripten_alloc_async_context(24, sp) | 0; //@line 1264
  _putchar(10) | 0; //@line 1265
  if (___async) {
   HEAP32[$AsyncCtx54 >> 2] = 77; //@line 1268
   HEAP32[$AsyncCtx54 + 4 >> 2] = $0; //@line 1270
   HEAP32[$AsyncCtx54 + 8 >> 2] = $vararg_buffer9; //@line 1272
   HEAP32[$AsyncCtx54 + 12 >> 2] = $vararg_buffer9; //@line 1274
   HEAP32[$AsyncCtx54 + 16 >> 2] = $vararg_buffer11; //@line 1276
   HEAP32[$AsyncCtx54 + 20 >> 2] = $vararg_buffer11; //@line 1278
   sp = STACKTOP; //@line 1279
   STACKTOP = sp; //@line 1280
   return;
  }
  _emscripten_free_async_context($AsyncCtx54 | 0); //@line 1282
  $AsyncCtx64 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1283
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1284
  if (___async) {
   HEAP32[$AsyncCtx64 >> 2] = 78; //@line 1287
   HEAP32[$AsyncCtx64 + 4 >> 2] = $vararg_buffer9; //@line 1289
   HEAP32[$AsyncCtx64 + 8 >> 2] = $vararg_buffer9; //@line 1291
   HEAP32[$AsyncCtx64 + 12 >> 2] = $vararg_buffer11; //@line 1293
   HEAP32[$AsyncCtx64 + 16 >> 2] = $vararg_buffer11; //@line 1295
   sp = STACKTOP; //@line 1296
   STACKTOP = sp; //@line 1297
   return;
  }
  _emscripten_free_async_context($AsyncCtx64 | 0); //@line 1299
  _printf(10904, $vararg_buffer9) | 0; //@line 1300
  HEAP32[$vararg_buffer11 >> 2] = 5; //@line 1301
  _printf(10999, $vararg_buffer11) | 0; //@line 1302
  $AsyncCtx50 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1303
  _putchar(10) | 0; //@line 1304
  if (___async) {
   HEAP32[$AsyncCtx50 >> 2] = 79; //@line 1307
   sp = STACKTOP; //@line 1308
   STACKTOP = sp; //@line 1309
   return;
  }
  _emscripten_free_async_context($AsyncCtx50 | 0); //@line 1311
  STACKTOP = sp; //@line 1312
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_308($0) {
 $0 = $0 | 0;
 var $$pre13 = 0, $10 = 0, $100 = 0, $104 = 0, $105 = 0, $107 = 0, $108 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $72 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $88 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 15314
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15316
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15318
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15320
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15322
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15324
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15326
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15328
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15330
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15332
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15334
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 15336
 $$pre13 = HEAP8[$2 >> 0] | 0; //@line 15337
 if ($$pre13 & 8) {
  HEAP8[$2 >> 0] = $$pre13 & -9; //@line 15342
  $27 = HEAP32[$4 + 1324 >> 2] | 0; //@line 15344
  $28 = $27 + 32 | 0; //@line 15345
  $30 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 15347
  $31 = $27 + 44 | 0; //@line 15348
  $32 = HEAP32[$31 >> 2] | 0; //@line 15349
  if (!$32) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 15352
   _mbed_assert_internal(15061, 15066, 1102); //@line 15353
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 15356
    $34 = $ReallocAsyncCtx17 + 4 | 0; //@line 15357
    HEAP32[$34 >> 2] = $2; //@line 15358
    $35 = $ReallocAsyncCtx17 + 8 | 0; //@line 15359
    HEAP32[$35 >> 2] = $4; //@line 15360
    $36 = $ReallocAsyncCtx17 + 12 | 0; //@line 15361
    HEAP32[$36 >> 2] = $28; //@line 15362
    $37 = $ReallocAsyncCtx17 + 16 | 0; //@line 15363
    HEAP32[$37 >> 2] = $30; //@line 15364
    $38 = $ReallocAsyncCtx17 + 20 | 0; //@line 15365
    HEAP32[$38 >> 2] = $6; //@line 15366
    $39 = $ReallocAsyncCtx17 + 24 | 0; //@line 15367
    HEAP32[$39 >> 2] = $8; //@line 15368
    $40 = $ReallocAsyncCtx17 + 28 | 0; //@line 15369
    HEAP32[$40 >> 2] = $10; //@line 15370
    $41 = $ReallocAsyncCtx17 + 32 | 0; //@line 15371
    HEAP32[$41 >> 2] = $12; //@line 15372
    $42 = $ReallocAsyncCtx17 + 36 | 0; //@line 15373
    HEAP32[$42 >> 2] = $14; //@line 15374
    $43 = $ReallocAsyncCtx17 + 40 | 0; //@line 15375
    HEAP32[$43 >> 2] = $16; //@line 15376
    $44 = $ReallocAsyncCtx17 + 44 | 0; //@line 15377
    HEAP32[$44 >> 2] = $18; //@line 15378
    $45 = $ReallocAsyncCtx17 + 48 | 0; //@line 15379
    HEAP32[$45 >> 2] = $20; //@line 15380
    $46 = $ReallocAsyncCtx17 + 52 | 0; //@line 15381
    HEAP32[$46 >> 2] = $22; //@line 15382
    $47 = $ReallocAsyncCtx17 + 56 | 0; //@line 15383
    HEAP32[$47 >> 2] = $31; //@line 15384
    sp = STACKTOP; //@line 15385
    return;
   }
   ___async_unwind = 0; //@line 15388
   HEAP32[$ReallocAsyncCtx17 >> 2] = 469; //@line 15389
   $34 = $ReallocAsyncCtx17 + 4 | 0; //@line 15390
   HEAP32[$34 >> 2] = $2; //@line 15391
   $35 = $ReallocAsyncCtx17 + 8 | 0; //@line 15392
   HEAP32[$35 >> 2] = $4; //@line 15393
   $36 = $ReallocAsyncCtx17 + 12 | 0; //@line 15394
   HEAP32[$36 >> 2] = $28; //@line 15395
   $37 = $ReallocAsyncCtx17 + 16 | 0; //@line 15396
   HEAP32[$37 >> 2] = $30; //@line 15397
   $38 = $ReallocAsyncCtx17 + 20 | 0; //@line 15398
   HEAP32[$38 >> 2] = $6; //@line 15399
   $39 = $ReallocAsyncCtx17 + 24 | 0; //@line 15400
   HEAP32[$39 >> 2] = $8; //@line 15401
   $40 = $ReallocAsyncCtx17 + 28 | 0; //@line 15402
   HEAP32[$40 >> 2] = $10; //@line 15403
   $41 = $ReallocAsyncCtx17 + 32 | 0; //@line 15404
   HEAP32[$41 >> 2] = $12; //@line 15405
   $42 = $ReallocAsyncCtx17 + 36 | 0; //@line 15406
   HEAP32[$42 >> 2] = $14; //@line 15407
   $43 = $ReallocAsyncCtx17 + 40 | 0; //@line 15408
   HEAP32[$43 >> 2] = $16; //@line 15409
   $44 = $ReallocAsyncCtx17 + 44 | 0; //@line 15410
   HEAP32[$44 >> 2] = $18; //@line 15411
   $45 = $ReallocAsyncCtx17 + 48 | 0; //@line 15412
   HEAP32[$45 >> 2] = $20; //@line 15413
   $46 = $ReallocAsyncCtx17 + 52 | 0; //@line 15414
   HEAP32[$46 >> 2] = $22; //@line 15415
   $47 = $ReallocAsyncCtx17 + 56 | 0; //@line 15416
   HEAP32[$47 >> 2] = $31; //@line 15417
   sp = STACKTOP; //@line 15418
   return;
  } else {
   $48 = HEAP32[$32 >> 2] | 0; //@line 15421
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 15422
   FUNCTION_TABLE_vii[$48 & 31]($28, $30); //@line 15423
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 15426
    $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 15427
    HEAP32[$49 >> 2] = $4; //@line 15428
    $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 15429
    HEAP32[$50 >> 2] = $2; //@line 15430
    $51 = $ReallocAsyncCtx3 + 12 | 0; //@line 15431
    HEAP32[$51 >> 2] = $6; //@line 15432
    $52 = $ReallocAsyncCtx3 + 16 | 0; //@line 15433
    HEAP32[$52 >> 2] = $8; //@line 15434
    $53 = $ReallocAsyncCtx3 + 20 | 0; //@line 15435
    HEAP32[$53 >> 2] = $10; //@line 15436
    $54 = $ReallocAsyncCtx3 + 24 | 0; //@line 15437
    HEAP32[$54 >> 2] = $12; //@line 15438
    $55 = $ReallocAsyncCtx3 + 28 | 0; //@line 15439
    HEAP32[$55 >> 2] = $14; //@line 15440
    $56 = $ReallocAsyncCtx3 + 32 | 0; //@line 15441
    HEAP32[$56 >> 2] = $16; //@line 15442
    $57 = $ReallocAsyncCtx3 + 36 | 0; //@line 15443
    HEAP32[$57 >> 2] = $18; //@line 15444
    $58 = $ReallocAsyncCtx3 + 40 | 0; //@line 15445
    HEAP32[$58 >> 2] = $20; //@line 15446
    $59 = $ReallocAsyncCtx3 + 44 | 0; //@line 15447
    HEAP32[$59 >> 2] = $22; //@line 15448
    sp = STACKTOP; //@line 15449
    return;
   }
   ___async_unwind = 0; //@line 15452
   HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 15453
   $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 15454
   HEAP32[$49 >> 2] = $4; //@line 15455
   $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 15456
   HEAP32[$50 >> 2] = $2; //@line 15457
   $51 = $ReallocAsyncCtx3 + 12 | 0; //@line 15458
   HEAP32[$51 >> 2] = $6; //@line 15459
   $52 = $ReallocAsyncCtx3 + 16 | 0; //@line 15460
   HEAP32[$52 >> 2] = $8; //@line 15461
   $53 = $ReallocAsyncCtx3 + 20 | 0; //@line 15462
   HEAP32[$53 >> 2] = $10; //@line 15463
   $54 = $ReallocAsyncCtx3 + 24 | 0; //@line 15464
   HEAP32[$54 >> 2] = $12; //@line 15465
   $55 = $ReallocAsyncCtx3 + 28 | 0; //@line 15466
   HEAP32[$55 >> 2] = $14; //@line 15467
   $56 = $ReallocAsyncCtx3 + 32 | 0; //@line 15468
   HEAP32[$56 >> 2] = $16; //@line 15469
   $57 = $ReallocAsyncCtx3 + 36 | 0; //@line 15470
   HEAP32[$57 >> 2] = $18; //@line 15471
   $58 = $ReallocAsyncCtx3 + 40 | 0; //@line 15472
   HEAP32[$58 >> 2] = $20; //@line 15473
   $59 = $ReallocAsyncCtx3 + 44 | 0; //@line 15474
   HEAP32[$59 >> 2] = $22; //@line 15475
   sp = STACKTOP; //@line 15476
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(12967, $6) | 0; //@line 15483
  _printf(13114, $10) | 0; //@line 15484
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 15485
  _putchar(10) | 0; //@line 15486
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 15489
   $62 = $ReallocAsyncCtx7 + 4 | 0; //@line 15490
   HEAP32[$62 >> 2] = $4; //@line 15491
   $63 = $ReallocAsyncCtx7 + 8 | 0; //@line 15492
   HEAP32[$63 >> 2] = $2; //@line 15493
   $64 = $ReallocAsyncCtx7 + 12 | 0; //@line 15494
   HEAP32[$64 >> 2] = $14; //@line 15495
   $65 = $ReallocAsyncCtx7 + 16 | 0; //@line 15496
   HEAP32[$65 >> 2] = $16; //@line 15497
   $66 = $ReallocAsyncCtx7 + 20 | 0; //@line 15498
   HEAP32[$66 >> 2] = $18; //@line 15499
   $67 = $ReallocAsyncCtx7 + 24 | 0; //@line 15500
   HEAP32[$67 >> 2] = $20; //@line 15501
   $68 = $ReallocAsyncCtx7 + 28 | 0; //@line 15502
   HEAP32[$68 >> 2] = $22; //@line 15503
   sp = STACKTOP; //@line 15504
   return;
  }
  ___async_unwind = 0; //@line 15507
  HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 15508
  $62 = $ReallocAsyncCtx7 + 4 | 0; //@line 15509
  HEAP32[$62 >> 2] = $4; //@line 15510
  $63 = $ReallocAsyncCtx7 + 8 | 0; //@line 15511
  HEAP32[$63 >> 2] = $2; //@line 15512
  $64 = $ReallocAsyncCtx7 + 12 | 0; //@line 15513
  HEAP32[$64 >> 2] = $14; //@line 15514
  $65 = $ReallocAsyncCtx7 + 16 | 0; //@line 15515
  HEAP32[$65 >> 2] = $16; //@line 15516
  $66 = $ReallocAsyncCtx7 + 20 | 0; //@line 15517
  HEAP32[$66 >> 2] = $18; //@line 15518
  $67 = $ReallocAsyncCtx7 + 24 | 0; //@line 15519
  HEAP32[$67 >> 2] = $20; //@line 15520
  $68 = $ReallocAsyncCtx7 + 28 | 0; //@line 15521
  HEAP32[$68 >> 2] = $22; //@line 15522
  sp = STACKTOP; //@line 15523
  return;
 }
 $69 = HEAP8[$2 >> 0] & -33; //@line 15527
 HEAP8[$2 >> 0] = $69; //@line 15528
 do {
  if (!($69 & 2)) {
   $100 = $69; //@line 15533
  } else {
   $72 = $69 & -3; //@line 15535
   HEAP8[$2 >> 0] = $72; //@line 15536
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12967, $16) | 0; //@line 15541
    _printf(12994, $20) | 0; //@line 15542
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 15543
    _putchar(10) | 0; //@line 15544
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 15547
     $76 = $ReallocAsyncCtx6 + 4 | 0; //@line 15548
     HEAP32[$76 >> 2] = $2; //@line 15549
     $77 = $ReallocAsyncCtx6 + 8 | 0; //@line 15550
     HEAP32[$77 >> 2] = $14; //@line 15551
     $78 = $ReallocAsyncCtx6 + 12 | 0; //@line 15552
     HEAP32[$78 >> 2] = $4; //@line 15553
     $79 = $ReallocAsyncCtx6 + 16 | 0; //@line 15554
     HEAP32[$79 >> 2] = $14; //@line 15555
     sp = STACKTOP; //@line 15556
     return;
    }
    ___async_unwind = 0; //@line 15559
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 15560
    $76 = $ReallocAsyncCtx6 + 4 | 0; //@line 15561
    HEAP32[$76 >> 2] = $2; //@line 15562
    $77 = $ReallocAsyncCtx6 + 8 | 0; //@line 15563
    HEAP32[$77 >> 2] = $14; //@line 15564
    $78 = $ReallocAsyncCtx6 + 12 | 0; //@line 15565
    HEAP32[$78 >> 2] = $4; //@line 15566
    $79 = $ReallocAsyncCtx6 + 16 | 0; //@line 15567
    HEAP32[$79 >> 2] = $14; //@line 15568
    sp = STACKTOP; //@line 15569
    return;
   }
   if ($72 & 4) {
    $98 = $72 & -5; //@line 15575
    HEAP8[$2 >> 0] = $98; //@line 15576
    $100 = $98; //@line 15577
    break;
   }
   $83 = HEAP32[$4 + 1324 >> 2] | 0; //@line 15581
   $84 = $83 + 16 | 0; //@line 15582
   $86 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 15584
   $87 = $83 + 28 | 0; //@line 15585
   $88 = HEAP32[$87 >> 2] | 0; //@line 15586
   if (!$88) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 15589
    _mbed_assert_internal(15061, 15066, 1102); //@line 15590
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 15593
     $90 = $ReallocAsyncCtx15 + 4 | 0; //@line 15594
     HEAP32[$90 >> 2] = $87; //@line 15595
     $91 = $ReallocAsyncCtx15 + 8 | 0; //@line 15596
     HEAP32[$91 >> 2] = $84; //@line 15597
     $92 = $ReallocAsyncCtx15 + 12 | 0; //@line 15598
     HEAP32[$92 >> 2] = $86; //@line 15599
     $93 = $ReallocAsyncCtx15 + 16 | 0; //@line 15600
     HEAP32[$93 >> 2] = $2; //@line 15601
     $94 = $ReallocAsyncCtx15 + 20 | 0; //@line 15602
     HEAP32[$94 >> 2] = $4; //@line 15603
     sp = STACKTOP; //@line 15604
     return;
    }
    ___async_unwind = 0; //@line 15607
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 15608
    $90 = $ReallocAsyncCtx15 + 4 | 0; //@line 15609
    HEAP32[$90 >> 2] = $87; //@line 15610
    $91 = $ReallocAsyncCtx15 + 8 | 0; //@line 15611
    HEAP32[$91 >> 2] = $84; //@line 15612
    $92 = $ReallocAsyncCtx15 + 12 | 0; //@line 15613
    HEAP32[$92 >> 2] = $86; //@line 15614
    $93 = $ReallocAsyncCtx15 + 16 | 0; //@line 15615
    HEAP32[$93 >> 2] = $2; //@line 15616
    $94 = $ReallocAsyncCtx15 + 20 | 0; //@line 15617
    HEAP32[$94 >> 2] = $4; //@line 15618
    sp = STACKTOP; //@line 15619
    return;
   } else {
    $95 = HEAP32[$88 >> 2] | 0; //@line 15622
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 15623
    FUNCTION_TABLE_vii[$95 & 31]($84, $86); //@line 15624
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 15627
     $96 = $ReallocAsyncCtx4 + 4 | 0; //@line 15628
     HEAP32[$96 >> 2] = $2; //@line 15629
     $97 = $ReallocAsyncCtx4 + 8 | 0; //@line 15630
     HEAP32[$97 >> 2] = $4; //@line 15631
     sp = STACKTOP; //@line 15632
     return;
    }
    ___async_unwind = 0; //@line 15635
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 15636
    $96 = $ReallocAsyncCtx4 + 4 | 0; //@line 15637
    HEAP32[$96 >> 2] = $2; //@line 15638
    $97 = $ReallocAsyncCtx4 + 8 | 0; //@line 15639
    HEAP32[$97 >> 2] = $4; //@line 15640
    sp = STACKTOP; //@line 15641
    return;
   }
  }
 } while (0);
 if (!($100 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $100 & -17; //@line 15652
 $104 = HEAP32[$4 + 1324 >> 2] | 0; //@line 15654
 $105 = $104 + 48 | 0; //@line 15655
 $107 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 15657
 $108 = $104 + 60 | 0; //@line 15658
 $109 = HEAP32[$108 >> 2] | 0; //@line 15659
 if (!$109) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 15662
  _mbed_assert_internal(15061, 15066, 1102); //@line 15663
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 15666
   $111 = $ReallocAsyncCtx14 + 4 | 0; //@line 15667
   HEAP32[$111 >> 2] = $108; //@line 15668
   $112 = $ReallocAsyncCtx14 + 8 | 0; //@line 15669
   HEAP32[$112 >> 2] = $105; //@line 15670
   $113 = $ReallocAsyncCtx14 + 12 | 0; //@line 15671
   HEAP32[$113 >> 2] = $107; //@line 15672
   sp = STACKTOP; //@line 15673
   return;
  }
  ___async_unwind = 0; //@line 15676
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 15677
  $111 = $ReallocAsyncCtx14 + 4 | 0; //@line 15678
  HEAP32[$111 >> 2] = $108; //@line 15679
  $112 = $ReallocAsyncCtx14 + 8 | 0; //@line 15680
  HEAP32[$112 >> 2] = $105; //@line 15681
  $113 = $ReallocAsyncCtx14 + 12 | 0; //@line 15682
  HEAP32[$113 >> 2] = $107; //@line 15683
  sp = STACKTOP; //@line 15684
  return;
 } else {
  $114 = HEAP32[$109 >> 2] | 0; //@line 15687
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 15688
  FUNCTION_TABLE_vii[$114 & 31]($105, $107); //@line 15689
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 15692
   sp = STACKTOP; //@line 15693
   return;
  }
  ___async_unwind = 0; //@line 15696
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 15697
  sp = STACKTOP; //@line 15698
  return;
 }
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$016 = 0, $$05$i = 0, $$06$i = 0, $100 = 0, $108 = 0, $111 = 0, $117 = 0, $119 = 0, $126 = 0, $129 = 0, $134 = 0, $136 = 0, $142 = 0, $145 = 0, $149 = 0, $151 = 0, $156 = 0, $159 = 0, $17 = 0, $39 = 0, $4 = 0, $5 = 0, $51 = 0, $52 = 0, $6 = 0, $61 = 0, $69 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $88 = 0, $91 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx37 = 0, $AsyncCtx40 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 17751
 STACKTOP = STACKTOP + 80 | 0; //@line 17752
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 17752
 $4 = sp + 64 | 0; //@line 17753
 $5 = sp + 48 | 0; //@line 17754
 $6 = sp + 32 | 0; //@line 17755
 $7 = sp + 16 | 0; //@line 17756
 $8 = sp; //@line 17757
 HEAP32[$0 + 1328 >> 2] = $3; //@line 17759
 if (!$1) {
  $$016 = -1003; //@line 17762
  STACKTOP = sp; //@line 17763
  return $$016 | 0; //@line 17763
 }
 HEAP32[$0 >> 2] = $2; //@line 17765
 __ZN11LoRaMacMlme23activate_mlme_subsystemEP7LoRaPHY($0 + 264 | 0, $2); //@line 17767
 __ZN10LoRaMacMib22activate_mib_subsystemEP7LoRaPHY($0 + 348 | 0, HEAP32[$0 >> 2] | 0); //@line 17770
 __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0 + 352 | 0, HEAP32[$0 >> 2] | 0); //@line 17773
 HEAP32[$0 + 1324 >> 2] = $1; //@line 17775
 $17 = $0 + 360 | 0; //@line 17776
 HEAP8[$0 + 944 >> 0] = 0; //@line 17778
 HEAP32[$17 >> 2] = 0; //@line 17779
 HEAP32[$0 + 968 >> 2] = 0; //@line 17781
 HEAP8[$0 + 897 >> 0] = 0; //@line 17783
 HEAP8[$0 + 896 >> 0] = 1; //@line 17785
 HEAP8[$0 + 369 >> 0] = 0; //@line 17787
 HEAP32[$0 + 980 >> 2] = 0; //@line 17789
 HEAP32[$0 + 984 >> 2] = 0; //@line 17791
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $17, 1); //@line 17793
 HEAP32[$0 + 1100 >> 2] = 10; //@line 17795
 HEAP8[$0 + 1104 >> 0] = 6; //@line 17797
 HEAP8[$0 + 1128 >> 0] = 1; //@line 17799
 HEAP8[$0 + 372 >> 0] = 0; //@line 17801
 HEAP32[$0 + 956 >> 2] = 0; //@line 17803
 HEAP32[$0 + 960 >> 2] = 0; //@line 17805
 HEAP32[$0 + 964 >> 2] = 0; //@line 17807
 HEAP8[$0 + 380 >> 0] = 0; //@line 17809
 HEAP8[$0 + 894 >> 0] = 1; //@line 17811
 HEAP8[$0 + 895 >> 0] = 1; //@line 17813
 HEAP8[$0 + 377 >> 0] = 0; //@line 17815
 HEAP8[$0 + 1152 >> 0] = 0; //@line 17817
 HEAP16[$0 + 1154 >> 1] = 1; //@line 17819
 $39 = $0 + 4 | 0; //@line 17820
 __ZN14LoRaMacCommand20clear_command_bufferEv($39); //@line 17821
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($39); //@line 17822
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($39); //@line 17823
 HEAP8[$0 + 371 >> 0] = 1; //@line 17825
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $17, 0); //@line 17827
 HEAP8[$0 + 373 >> 0] = 0; //@line 17829
 HEAP8[$0 + 374 >> 0] = 0; //@line 17831
 $$05$i = HEAP32[$0 + 1208 >> 2] | 0; //@line 17833
 if ($$05$i | 0) {
  $$06$i = $$05$i; //@line 17836
  do {
   HEAP32[$$06$i + 36 >> 2] = 0; //@line 17839
   $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 17841
  } while (($$06$i | 0) != 0);
 }
 HEAP8[$0 + 378 >> 0] = 0; //@line 17851
 HEAP8[$0 + 379 >> 0] = 0; //@line 17853
 $51 = HEAP32[$0 >> 2] | 0; //@line 17854
 $AsyncCtx34 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17855
 $52 = __ZN7LoRaPHY13get_radio_rngEv($51) | 0; //@line 17856
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 520; //@line 17859
  HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 17861
  HEAP32[$AsyncCtx34 + 8 >> 2] = $8; //@line 17863
  HEAP32[$AsyncCtx34 + 12 >> 2] = $7; //@line 17865
  HEAP32[$AsyncCtx34 + 16 >> 2] = $6; //@line 17867
  HEAP32[$AsyncCtx34 + 20 >> 2] = $0; //@line 17869
  HEAP32[$AsyncCtx34 + 24 >> 2] = $5; //@line 17871
  HEAP32[$AsyncCtx34 + 28 >> 2] = $4; //@line 17873
  sp = STACKTOP; //@line 17874
  STACKTOP = sp; //@line 17875
  return 0; //@line 17875
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 17877
 _srand($52); //@line 17878
 HEAP8[$0 + 368 >> 0] = 1; //@line 17880
 $61 = HEAP32[$0 >> 2] | 0; //@line 17881
 $AsyncCtx37 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17882
 __ZN7LoRaPHY25setup_public_network_modeEb($61, 1); //@line 17883
 if (___async) {
  HEAP32[$AsyncCtx37 >> 2] = 521; //@line 17886
  HEAP32[$AsyncCtx37 + 4 >> 2] = $0; //@line 17888
  HEAP32[$AsyncCtx37 + 8 >> 2] = $8; //@line 17890
  HEAP32[$AsyncCtx37 + 12 >> 2] = $7; //@line 17892
  HEAP32[$AsyncCtx37 + 16 >> 2] = $6; //@line 17894
  HEAP32[$AsyncCtx37 + 20 >> 2] = $5; //@line 17896
  HEAP32[$AsyncCtx37 + 24 >> 2] = $4; //@line 17898
  HEAP32[$AsyncCtx37 + 28 >> 2] = $0; //@line 17900
  sp = STACKTOP; //@line 17901
  STACKTOP = sp; //@line 17902
  return 0; //@line 17902
 }
 _emscripten_free_async_context($AsyncCtx37 | 0); //@line 17904
 $69 = HEAP32[$0 >> 2] | 0; //@line 17905
 $AsyncCtx40 = _emscripten_alloc_async_context(28, sp) | 0; //@line 17906
 __ZN7LoRaPHY18put_radio_to_sleepEv($69); //@line 17907
 if (___async) {
  HEAP32[$AsyncCtx40 >> 2] = 522; //@line 17910
  HEAP32[$AsyncCtx40 + 4 >> 2] = $0; //@line 17912
  HEAP32[$AsyncCtx40 + 8 >> 2] = $8; //@line 17914
  HEAP32[$AsyncCtx40 + 12 >> 2] = $7; //@line 17916
  HEAP32[$AsyncCtx40 + 16 >> 2] = $6; //@line 17918
  HEAP32[$AsyncCtx40 + 20 >> 2] = $5; //@line 17920
  HEAP32[$AsyncCtx40 + 24 >> 2] = $4; //@line 17922
  sp = STACKTOP; //@line 17923
  STACKTOP = sp; //@line 17924
  return 0; //@line 17924
 }
 _emscripten_free_async_context($AsyncCtx40 | 0); //@line 17926
 $76 = $0 + 356 | 0; //@line 17927
 $77 = HEAP32[$76 >> 2] | 0; //@line 17928
 $79 = $4 + 12 | 0; //@line 17930
 HEAP32[$4 >> 2] = 523; //@line 17931
 HEAP32[$4 + 4 >> 2] = 0; //@line 17933
 HEAP32[$4 + 8 >> 2] = $0; //@line 17935
 HEAP32[$79 >> 2] = 848; //@line 17936
 $AsyncCtx30 = _emscripten_alloc_async_context(36, sp) | 0; //@line 17937
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($77, $0 + 996 | 0, $4); //@line 17938
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 524; //@line 17941
  HEAP32[$AsyncCtx30 + 4 >> 2] = $76; //@line 17943
  HEAP32[$AsyncCtx30 + 8 >> 2] = $0; //@line 17945
  HEAP32[$AsyncCtx30 + 12 >> 2] = $8; //@line 17947
  HEAP32[$AsyncCtx30 + 16 >> 2] = $7; //@line 17949
  HEAP32[$AsyncCtx30 + 20 >> 2] = $6; //@line 17951
  HEAP32[$AsyncCtx30 + 24 >> 2] = $5; //@line 17953
  HEAP32[$AsyncCtx30 + 28 >> 2] = $79; //@line 17955
  HEAP32[$AsyncCtx30 + 32 >> 2] = $4; //@line 17957
  sp = STACKTOP; //@line 17958
  STACKTOP = sp; //@line 17959
  return 0; //@line 17959
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 17961
 $88 = HEAP32[$79 >> 2] | 0; //@line 17962
 do {
  if ($88 | 0) {
   $91 = HEAP32[$88 + 8 >> 2] | 0; //@line 17967
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 17968
   FUNCTION_TABLE_vi[$91 & 1023]($4); //@line 17969
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 525; //@line 17972
    HEAP32[$AsyncCtx + 4 >> 2] = $76; //@line 17974
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 17976
    HEAP32[$AsyncCtx + 12 >> 2] = $7; //@line 17978
    HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 17980
    HEAP32[$AsyncCtx + 20 >> 2] = $8; //@line 17982
    HEAP32[$AsyncCtx + 24 >> 2] = $5; //@line 17984
    sp = STACKTOP; //@line 17985
    STACKTOP = sp; //@line 17986
    return 0; //@line 17986
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17988
    break;
   }
  }
 } while (0);
 $98 = HEAP32[$76 >> 2] | 0; //@line 17993
 $100 = $5 + 12 | 0; //@line 17995
 HEAP32[$5 >> 2] = 526; //@line 17996
 HEAP32[$5 + 4 >> 2] = 0; //@line 17998
 HEAP32[$5 + 8 >> 2] = $0; //@line 18000
 HEAP32[$100 >> 2] = 848; //@line 18001
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 18002
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($98, $0 + 1016 | 0, $5); //@line 18003
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 527; //@line 18006
  HEAP32[$AsyncCtx27 + 4 >> 2] = $100; //@line 18008
  HEAP32[$AsyncCtx27 + 8 >> 2] = $76; //@line 18010
  HEAP32[$AsyncCtx27 + 12 >> 2] = $0; //@line 18012
  HEAP32[$AsyncCtx27 + 16 >> 2] = $8; //@line 18014
  HEAP32[$AsyncCtx27 + 20 >> 2] = $7; //@line 18016
  HEAP32[$AsyncCtx27 + 24 >> 2] = $6; //@line 18018
  HEAP32[$AsyncCtx27 + 28 >> 2] = $5; //@line 18020
  sp = STACKTOP; //@line 18021
  STACKTOP = sp; //@line 18022
  return 0; //@line 18022
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 18024
 $108 = HEAP32[$100 >> 2] | 0; //@line 18025
 do {
  if ($108 | 0) {
   $111 = HEAP32[$108 + 8 >> 2] | 0; //@line 18030
   $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18031
   FUNCTION_TABLE_vi[$111 & 1023]($5); //@line 18032
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 528; //@line 18035
    HEAP32[$AsyncCtx3 + 4 >> 2] = $76; //@line 18037
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 18039
    HEAP32[$AsyncCtx3 + 12 >> 2] = $7; //@line 18041
    HEAP32[$AsyncCtx3 + 16 >> 2] = $6; //@line 18043
    HEAP32[$AsyncCtx3 + 20 >> 2] = $8; //@line 18045
    sp = STACKTOP; //@line 18046
    STACKTOP = sp; //@line 18047
    return 0; //@line 18047
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18049
    break;
   }
  }
 } while (0);
 $117 = HEAP32[$76 >> 2] | 0; //@line 18054
 $119 = $6 + 12 | 0; //@line 18056
 HEAP32[$6 >> 2] = 529; //@line 18057
 HEAP32[$6 + 4 >> 2] = 0; //@line 18059
 HEAP32[$6 + 8 >> 2] = $0; //@line 18061
 HEAP32[$119 >> 2] = 848; //@line 18062
 $AsyncCtx24 = _emscripten_alloc_async_context(28, sp) | 0; //@line 18063
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($117, $0 + 1036 | 0, $6); //@line 18064
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 530; //@line 18067
  HEAP32[$AsyncCtx24 + 4 >> 2] = $76; //@line 18069
  HEAP32[$AsyncCtx24 + 8 >> 2] = $0; //@line 18071
  HEAP32[$AsyncCtx24 + 12 >> 2] = $8; //@line 18073
  HEAP32[$AsyncCtx24 + 16 >> 2] = $7; //@line 18075
  HEAP32[$AsyncCtx24 + 20 >> 2] = $119; //@line 18077
  HEAP32[$AsyncCtx24 + 24 >> 2] = $6; //@line 18079
  sp = STACKTOP; //@line 18080
  STACKTOP = sp; //@line 18081
  return 0; //@line 18081
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 18083
 $126 = HEAP32[$119 >> 2] | 0; //@line 18084
 do {
  if ($126 | 0) {
   $129 = HEAP32[$126 + 8 >> 2] | 0; //@line 18089
   $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18090
   FUNCTION_TABLE_vi[$129 & 1023]($6); //@line 18091
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 531; //@line 18094
    HEAP32[$AsyncCtx7 + 4 >> 2] = $76; //@line 18096
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 18098
    HEAP32[$AsyncCtx7 + 12 >> 2] = $7; //@line 18100
    HEAP32[$AsyncCtx7 + 16 >> 2] = $8; //@line 18102
    sp = STACKTOP; //@line 18103
    STACKTOP = sp; //@line 18104
    return 0; //@line 18104
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 18106
    break;
   }
  }
 } while (0);
 $134 = HEAP32[$76 >> 2] | 0; //@line 18111
 $136 = $7 + 12 | 0; //@line 18113
 HEAP32[$7 >> 2] = 532; //@line 18114
 HEAP32[$7 + 4 >> 2] = 0; //@line 18116
 HEAP32[$7 + 8 >> 2] = $0; //@line 18118
 HEAP32[$136 >> 2] = 848; //@line 18119
 $AsyncCtx21 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18120
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($134, $0 + 1056 | 0, $7); //@line 18121
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 533; //@line 18124
  HEAP32[$AsyncCtx21 + 4 >> 2] = $136; //@line 18126
  HEAP32[$AsyncCtx21 + 8 >> 2] = $76; //@line 18128
  HEAP32[$AsyncCtx21 + 12 >> 2] = $0; //@line 18130
  HEAP32[$AsyncCtx21 + 16 >> 2] = $8; //@line 18132
  HEAP32[$AsyncCtx21 + 20 >> 2] = $7; //@line 18134
  sp = STACKTOP; //@line 18135
  STACKTOP = sp; //@line 18136
  return 0; //@line 18136
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 18138
 $142 = HEAP32[$136 >> 2] | 0; //@line 18139
 do {
  if ($142 | 0) {
   $145 = HEAP32[$142 + 8 >> 2] | 0; //@line 18144
   $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 18145
   FUNCTION_TABLE_vi[$145 & 1023]($7); //@line 18146
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 534; //@line 18149
    HEAP32[$AsyncCtx11 + 4 >> 2] = $76; //@line 18151
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 18153
    HEAP32[$AsyncCtx11 + 12 >> 2] = $8; //@line 18155
    sp = STACKTOP; //@line 18156
    STACKTOP = sp; //@line 18157
    return 0; //@line 18157
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 18159
    break;
   }
  }
 } while (0);
 $149 = HEAP32[$76 >> 2] | 0; //@line 18164
 $151 = $8 + 12 | 0; //@line 18166
 HEAP32[$8 >> 2] = 535; //@line 18167
 HEAP32[$8 + 4 >> 2] = 0; //@line 18169
 HEAP32[$8 + 8 >> 2] = $0; //@line 18171
 HEAP32[$151 >> 2] = 848; //@line 18172
 $AsyncCtx18 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18173
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($149, $0 + 1076 | 0, $8); //@line 18174
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 536; //@line 18177
  HEAP32[$AsyncCtx18 + 4 >> 2] = $151; //@line 18179
  HEAP32[$AsyncCtx18 + 8 >> 2] = $76; //@line 18181
  HEAP32[$AsyncCtx18 + 12 >> 2] = $0; //@line 18183
  HEAP32[$AsyncCtx18 + 16 >> 2] = $8; //@line 18185
  sp = STACKTOP; //@line 18186
  STACKTOP = sp; //@line 18187
  return 0; //@line 18187
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 18189
 $156 = HEAP32[$151 >> 2] | 0; //@line 18190
 do {
  if ($156 | 0) {
   $159 = HEAP32[$156 + 8 >> 2] | 0; //@line 18195
   $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18196
   FUNCTION_TABLE_vi[$159 & 1023]($8); //@line 18197
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 537; //@line 18200
    HEAP32[$AsyncCtx15 + 4 >> 2] = $76; //@line 18202
    HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 18204
    sp = STACKTOP; //@line 18205
    STACKTOP = sp; //@line 18206
    return 0; //@line 18206
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 18208
    break;
   }
  }
 } while (0);
 HEAP32[$0 + 988 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$76 >> 2] | 0) | 0; //@line 18216
 $$016 = 0; //@line 18217
 STACKTOP = sp; //@line 18218
 return $$016 | 0; //@line 18218
}
function _equeue_dispatch($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$03956$i = 0, $$03956$i$phi = 0, $$04055$i = 0, $$0405571$i = 0, $$04063$i = 0, $$04159$i = 0, $$04258$i = 0, $$057$i = 0, $$065 = 0, $$06790 = 0, $$2 = 0, $$idx = 0, $$sink$in$i$i = 0, $$sroa$0$i = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72 = 0, $10 = 0, $103 = 0, $11 = 0, $12 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $141 = 0, $142 = 0, $144 = 0, $147 = 0, $149 = 0, $152 = 0, $155 = 0, $162 = 0, $166 = 0, $169 = 0, $175 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $3 = 0, $30 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $45 = 0, $5 = 0, $6 = 0, $69 = 0, $7 = 0, $71 = 0, $74 = 0, $8 = 0, $9 = 0, $93 = 0, $94 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$04159$i$looptemp = 0, $$04258$i$looptemp = 0;
 sp = STACKTOP; //@line 5062
 STACKTOP = STACKTOP + 16 | 0; //@line 5063
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5063
 $$sroa$0$i = sp; //@line 5064
 $2 = _equeue_tick() | 0; //@line 5065
 $3 = $2 + $1 | 0; //@line 5066
 $4 = $0 + 36 | 0; //@line 5067
 HEAP8[$4 >> 0] = 0; //@line 5068
 $5 = $0 + 128 | 0; //@line 5069
 $6 = $0 + 9 | 0; //@line 5070
 $7 = $0 + 4 | 0; //@line 5071
 $8 = ($1 | 0) > -1; //@line 5072
 $9 = $0 + 48 | 0; //@line 5073
 $10 = $0 + 8 | 0; //@line 5074
 $$idx = $0 + 16 | 0; //@line 5075
 $11 = $0 + 156 | 0; //@line 5076
 $12 = $0 + 24 | 0; //@line 5077
 $$0 = $2; //@line 5078
 L1 : while (1) {
  _equeue_mutex_lock($5); //@line 5080
  HEAP8[$6 >> 0] = (HEAPU8[$6 >> 0] | 0) + 1; //@line 5085
  if (((HEAP32[$7 >> 2] | 0) - $$0 | 0) < 1) {
   HEAP32[$7 >> 2] = $$0; //@line 5090
  }
  $20 = HEAP32[$0 >> 2] | 0; //@line 5092
  HEAP32[$$sroa$0$i >> 2] = $20; //@line 5093
  $21 = $20; //@line 5094
  L6 : do {
   if (!$20) {
    $$04055$i = $$sroa$0$i; //@line 5098
    $30 = $21; //@line 5098
    label = 8; //@line 5099
   } else {
    $$04063$i = $$sroa$0$i; //@line 5101
    $24 = $21; //@line 5101
    do {
     if (((HEAP32[$24 + 20 >> 2] | 0) - $$0 | 0) >= 1) {
      $$04055$i = $$04063$i; //@line 5108
      $30 = $24; //@line 5108
      label = 8; //@line 5109
      break L6;
     }
     $$04063$i = $24 + 8 | 0; //@line 5112
     $24 = HEAP32[$$04063$i >> 2] | 0; //@line 5113
    } while (($24 | 0) != 0);
    HEAP32[$0 >> 2] = 0; //@line 5121
    $$0405571$i = $$04063$i; //@line 5122
   }
  } while (0);
  if ((label | 0) == 8) {
   label = 0; //@line 5126
   HEAP32[$0 >> 2] = $30; //@line 5127
   if (!$30) {
    $$0405571$i = $$04055$i; //@line 5130
   } else {
    HEAP32[$30 + 16 >> 2] = $0; //@line 5133
    $$0405571$i = $$04055$i; //@line 5134
   }
  }
  HEAP32[$$0405571$i >> 2] = 0; //@line 5137
  _equeue_mutex_unlock($5); //@line 5138
  $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72 = HEAP32[$$sroa$0$i >> 2] | 0; //@line 5139
  if (!$$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72) {} else {
   $$04159$i = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72; //@line 5143
   $$04258$i = $$sroa$0$i; //@line 5143
   do {
    $$04258$i$looptemp = $$04258$i;
    $$04258$i = $$04159$i + 8 | 0; //@line 5145
    $$04159$i$looptemp = $$04159$i;
    $$04159$i = HEAP32[$$04258$i >> 2] | 0; //@line 5146
    $$03956$i = 0; //@line 5147
    $$057$i = $$04159$i$looptemp; //@line 5147
    while (1) {
     HEAP32[$$057$i + 8 >> 2] = $$03956$i; //@line 5150
     $39 = HEAP32[$$057$i + 12 >> 2] | 0; //@line 5152
     if (!$39) {
      break;
     } else {
      $$03956$i$phi = $$057$i; //@line 5157
      $$057$i = $39; //@line 5157
      $$03956$i = $$03956$i$phi; //@line 5157
     }
    }
    HEAP32[$$04258$i$looptemp >> 2] = $$057$i; //@line 5160
   } while (($$04159$i | 0) != 0);
   $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 = HEAP32[$$sroa$0$i >> 2] | 0; //@line 5168
   if ($$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 | 0) {
    $$06790 = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73; //@line 5171
    while (1) {
     $42 = $$06790 + 8 | 0; //@line 5173
     $43 = HEAP32[$42 >> 2] | 0; //@line 5174
     $45 = HEAP32[$$06790 + 32 >> 2] | 0; //@line 5176
     if ($45 | 0) {
      $AsyncCtx = _emscripten_alloc_async_context(84, sp) | 0; //@line 5180
      FUNCTION_TABLE_vi[$45 & 1023]($$06790 + 36 | 0); //@line 5181
      if (___async) {
       label = 18; //@line 5184
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 5187
     }
     $69 = HEAP32[$$06790 + 24 >> 2] | 0; //@line 5190
     if (($69 | 0) > -1) {
      $71 = $$06790 + 20 | 0; //@line 5193
      HEAP32[$71 >> 2] = (HEAP32[$71 >> 2] | 0) + $69; //@line 5196
      $74 = _equeue_tick() | 0; //@line 5197
      $AsyncCtx11 = _emscripten_alloc_async_context(76, sp) | 0; //@line 5198
      _equeue_enqueue($0, $$06790, $74) | 0; //@line 5199
      if (___async) {
       label = 22; //@line 5202
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5205
     } else {
      $93 = $$06790 + 4 | 0; //@line 5208
      $94 = HEAP8[$93 >> 0] | 0; //@line 5209
      HEAP8[$93 >> 0] = (($94 + 1 & 255) << HEAP32[$$idx >> 2] | 0) == 0 ? 1 : ($94 & 255) + 1 & 255; //@line 5218
      $103 = HEAP32[$$06790 + 28 >> 2] | 0; //@line 5220
      if ($103 | 0) {
       $AsyncCtx3 = _emscripten_alloc_async_context(84, sp) | 0; //@line 5224
       FUNCTION_TABLE_vi[$103 & 1023]($$06790 + 36 | 0); //@line 5225
       if (___async) {
        label = 26; //@line 5228
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5231
      }
      _equeue_mutex_lock($11); //@line 5233
      $126 = HEAP32[$12 >> 2] | 0; //@line 5234
      L37 : do {
       if (!$126) {
        $$02329$i$i = $12; //@line 5238
        label = 34; //@line 5239
       } else {
        $128 = HEAP32[$$06790 >> 2] | 0; //@line 5241
        $$025$i$i = $12; //@line 5242
        $130 = $126; //@line 5242
        while (1) {
         $129 = HEAP32[$130 >> 2] | 0; //@line 5244
         if ($129 >>> 0 >= $128 >>> 0) {
          break;
         }
         $132 = $130 + 8 | 0; //@line 5249
         $133 = HEAP32[$132 >> 2] | 0; //@line 5250
         if (!$133) {
          $$02329$i$i = $132; //@line 5253
          label = 34; //@line 5254
          break L37;
         } else {
          $$025$i$i = $132; //@line 5257
          $130 = $133; //@line 5257
         }
        }
        if (($129 | 0) == ($128 | 0)) {
         HEAP32[$$06790 + 12 >> 2] = $130; //@line 5263
         $$02330$i$i = $$025$i$i; //@line 5266
         $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 5266
        } else {
         $$02329$i$i = $$025$i$i; //@line 5268
         label = 34; //@line 5269
        }
       }
      } while (0);
      if ((label | 0) == 34) {
       label = 0; //@line 5274
       HEAP32[$$06790 + 12 >> 2] = 0; //@line 5276
       $$02330$i$i = $$02329$i$i; //@line 5277
       $$sink$in$i$i = $$02329$i$i; //@line 5277
      }
      HEAP32[$42 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 5280
      HEAP32[$$02330$i$i >> 2] = $$06790; //@line 5281
      _equeue_mutex_unlock($11); //@line 5282
     }
     if (!$43) {
      break;
     } else {
      $$06790 = $43; //@line 5288
     }
    }
   }
  }
  $141 = _equeue_tick() | 0; //@line 5293
  if ($8) {
   $142 = $3 - $141 | 0; //@line 5295
   if (($142 | 0) < 1) {
    label = 39; //@line 5298
    break;
   } else {
    $$065 = $142; //@line 5301
   }
  } else {
   $$065 = -1; //@line 5304
  }
  _equeue_mutex_lock($5); //@line 5306
  $162 = HEAP32[$0 >> 2] | 0; //@line 5307
  if (!$162) {
   $$2 = $$065; //@line 5310
  } else {
   $166 = (HEAP32[$162 + 20 >> 2] | 0) - $141 | 0; //@line 5314
   $169 = $166 & ~($166 >> 31); //@line 5317
   $$2 = $169 >>> 0 < $$065 >>> 0 ? $169 : $$065; //@line 5320
  }
  _equeue_mutex_unlock($5); //@line 5322
  _equeue_sema_wait($9, $$2) | 0; //@line 5323
  if (HEAP8[$10 >> 0] | 0) {
   _equeue_mutex_lock($5); //@line 5327
   if (HEAP8[$10 >> 0] | 0) {
    label = 51; //@line 5331
    break;
   }
   _equeue_mutex_unlock($5); //@line 5334
  }
  $175 = _equeue_tick() | 0; //@line 5336
  $AsyncCtx15 = _emscripten_alloc_async_context(76, sp) | 0; //@line 5337
  _wait_ms(20); //@line 5338
  if (___async) {
   label = 54; //@line 5341
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 5344
  $$0 = $175; //@line 5345
 }
 if ((label | 0) == 18) {
  HEAP32[$AsyncCtx >> 2] = 180; //@line 5348
  HEAP32[$AsyncCtx + 4 >> 2] = $$06790; //@line 5350
  HEAP32[$AsyncCtx + 8 >> 2] = $11; //@line 5352
  HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 5354
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 5356
  HEAP32[$AsyncCtx + 20 >> 2] = $$idx; //@line 5358
  HEAP32[$AsyncCtx + 24 >> 2] = $$sroa$0$i; //@line 5360
  HEAP32[$AsyncCtx + 28 >> 2] = $$sroa$0$i; //@line 5362
  HEAP32[$AsyncCtx + 32 >> 2] = $43; //@line 5364
  HEAP32[$AsyncCtx + 36 >> 2] = $42; //@line 5366
  HEAP32[$AsyncCtx + 40 >> 2] = $0; //@line 5368
  HEAP32[$AsyncCtx + 44 >> 2] = $$sroa$0$i; //@line 5370
  HEAP32[$AsyncCtx + 48 >> 2] = $4; //@line 5372
  HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 5374
  HEAP32[$AsyncCtx + 56 >> 2] = $7; //@line 5376
  HEAP32[$AsyncCtx + 60 >> 2] = $10; //@line 5378
  HEAP32[$AsyncCtx + 64 >> 2] = $0; //@line 5380
  HEAP8[$AsyncCtx + 68 >> 0] = $8 & 1; //@line 5383
  HEAP32[$AsyncCtx + 72 >> 2] = $6; //@line 5385
  HEAP32[$AsyncCtx + 76 >> 2] = $3; //@line 5387
  HEAP32[$AsyncCtx + 80 >> 2] = $9; //@line 5389
  sp = STACKTOP; //@line 5390
  STACKTOP = sp; //@line 5391
  return;
 } else if ((label | 0) == 22) {
  HEAP32[$AsyncCtx11 >> 2] = 181; //@line 5394
  HEAP32[$AsyncCtx11 + 4 >> 2] = $11; //@line 5396
  HEAP32[$AsyncCtx11 + 8 >> 2] = $12; //@line 5398
  HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 5400
  HEAP32[$AsyncCtx11 + 16 >> 2] = $$idx; //@line 5402
  HEAP32[$AsyncCtx11 + 20 >> 2] = $$sroa$0$i; //@line 5404
  HEAP32[$AsyncCtx11 + 24 >> 2] = $$sroa$0$i; //@line 5406
  HEAP32[$AsyncCtx11 + 28 >> 2] = $43; //@line 5408
  HEAP32[$AsyncCtx11 + 32 >> 2] = $4; //@line 5410
  HEAP32[$AsyncCtx11 + 36 >> 2] = $5; //@line 5412
  HEAP32[$AsyncCtx11 + 40 >> 2] = $10; //@line 5414
  HEAP32[$AsyncCtx11 + 44 >> 2] = $0; //@line 5416
  HEAP32[$AsyncCtx11 + 48 >> 2] = $$sroa$0$i; //@line 5418
  HEAP32[$AsyncCtx11 + 52 >> 2] = $7; //@line 5420
  HEAP32[$AsyncCtx11 + 56 >> 2] = $0; //@line 5422
  HEAP8[$AsyncCtx11 + 60 >> 0] = $8 & 1; //@line 5425
  HEAP32[$AsyncCtx11 + 64 >> 2] = $6; //@line 5427
  HEAP32[$AsyncCtx11 + 68 >> 2] = $3; //@line 5429
  HEAP32[$AsyncCtx11 + 72 >> 2] = $9; //@line 5431
  sp = STACKTOP; //@line 5432
  STACKTOP = sp; //@line 5433
  return;
 } else if ((label | 0) == 26) {
  HEAP32[$AsyncCtx3 >> 2] = 182; //@line 5436
  HEAP32[$AsyncCtx3 + 4 >> 2] = $11; //@line 5438
  HEAP32[$AsyncCtx3 + 8 >> 2] = $12; //@line 5440
  HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 5442
  HEAP32[$AsyncCtx3 + 16 >> 2] = $$idx; //@line 5444
  HEAP32[$AsyncCtx3 + 20 >> 2] = $$sroa$0$i; //@line 5446
  HEAP32[$AsyncCtx3 + 24 >> 2] = $$sroa$0$i; //@line 5448
  HEAP32[$AsyncCtx3 + 28 >> 2] = $43; //@line 5450
  HEAP32[$AsyncCtx3 + 32 >> 2] = $42; //@line 5452
  HEAP32[$AsyncCtx3 + 36 >> 2] = $$06790; //@line 5454
  HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 5456
  HEAP32[$AsyncCtx3 + 44 >> 2] = $$sroa$0$i; //@line 5458
  HEAP32[$AsyncCtx3 + 48 >> 2] = $4; //@line 5460
  HEAP32[$AsyncCtx3 + 52 >> 2] = $5; //@line 5462
  HEAP32[$AsyncCtx3 + 56 >> 2] = $7; //@line 5464
  HEAP32[$AsyncCtx3 + 60 >> 2] = $10; //@line 5466
  HEAP32[$AsyncCtx3 + 64 >> 2] = $0; //@line 5468
  HEAP8[$AsyncCtx3 + 68 >> 0] = $8 & 1; //@line 5471
  HEAP32[$AsyncCtx3 + 72 >> 2] = $6; //@line 5473
  HEAP32[$AsyncCtx3 + 76 >> 2] = $3; //@line 5475
  HEAP32[$AsyncCtx3 + 80 >> 2] = $9; //@line 5477
  sp = STACKTOP; //@line 5478
  STACKTOP = sp; //@line 5479
  return;
 } else if ((label | 0) == 39) {
  $144 = $0 + 40 | 0; //@line 5482
  if (HEAP32[$144 >> 2] | 0) {
   _equeue_mutex_lock($5); //@line 5486
   $147 = HEAP32[$144 >> 2] | 0; //@line 5487
   do {
    if ($147 | 0) {
     $149 = HEAP32[$0 >> 2] | 0; //@line 5491
     if ($149 | 0) {
      $152 = HEAP32[$0 + 44 >> 2] | 0; //@line 5495
      $155 = (HEAP32[$149 + 20 >> 2] | 0) - $141 | 0; //@line 5498
      $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5502
      FUNCTION_TABLE_vii[$147 & 31]($152, $155 & ~($155 >> 31)); //@line 5503
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 183; //@line 5506
       HEAP32[$AsyncCtx7 + 4 >> 2] = $4; //@line 5508
       HEAP32[$AsyncCtx7 + 8 >> 2] = $5; //@line 5510
       HEAP32[$AsyncCtx7 + 12 >> 2] = $10; //@line 5512
       sp = STACKTOP; //@line 5513
       STACKTOP = sp; //@line 5514
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5516
       break;
      }
     }
    }
   } while (0);
   HEAP8[$4 >> 0] = 1; //@line 5522
   _equeue_mutex_unlock($5); //@line 5523
  }
  HEAP8[$10 >> 0] = 0; //@line 5525
  STACKTOP = sp; //@line 5526
  return;
 } else if ((label | 0) == 51) {
  HEAP8[$10 >> 0] = 0; //@line 5529
  _equeue_mutex_unlock($5); //@line 5530
  STACKTOP = sp; //@line 5531
  return;
 } else if ((label | 0) == 54) {
  HEAP32[$AsyncCtx15 >> 2] = 184; //@line 5534
  HEAP32[$AsyncCtx15 + 4 >> 2] = $11; //@line 5536
  HEAP32[$AsyncCtx15 + 8 >> 2] = $12; //@line 5538
  HEAP32[$AsyncCtx15 + 12 >> 2] = $0; //@line 5540
  HEAP32[$AsyncCtx15 + 16 >> 2] = $$idx; //@line 5542
  HEAP32[$AsyncCtx15 + 20 >> 2] = $$sroa$0$i; //@line 5544
  HEAP32[$AsyncCtx15 + 24 >> 2] = $$sroa$0$i; //@line 5546
  HEAP32[$AsyncCtx15 + 28 >> 2] = $4; //@line 5548
  HEAP32[$AsyncCtx15 + 32 >> 2] = $5; //@line 5550
  HEAP32[$AsyncCtx15 + 36 >> 2] = $10; //@line 5552
  HEAP32[$AsyncCtx15 + 40 >> 2] = $0; //@line 5554
  HEAP32[$AsyncCtx15 + 44 >> 2] = $$sroa$0$i; //@line 5556
  HEAP32[$AsyncCtx15 + 48 >> 2] = $7; //@line 5558
  HEAP32[$AsyncCtx15 + 52 >> 2] = $0; //@line 5560
  HEAP8[$AsyncCtx15 + 56 >> 0] = $8 & 1; //@line 5563
  HEAP32[$AsyncCtx15 + 60 >> 2] = $6; //@line 5565
  HEAP32[$AsyncCtx15 + 64 >> 2] = $3; //@line 5567
  HEAP32[$AsyncCtx15 + 68 >> 2] = $9; //@line 5569
  HEAP32[$AsyncCtx15 + 72 >> 2] = $175; //@line 5571
  sp = STACKTOP; //@line 5572
  STACKTOP = sp; //@line 5573
  return;
 }
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$054 = 0, $$055 = 0, $$05564 = 0, $$056 = 0, $$05663 = 0, $$05766 = 0, $$06065 = 0, $$158 = 0, $$15862 = 0, $$259 = 0, $$extract$t = 0, $$pre$phiZ2D = 0, $10 = 0, $103 = 0, $109 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $142 = 0, $147 = 0, $148 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $169 = 0, $170 = 0, $174 = 0, $176 = 0, $182 = 0, $183 = 0, $186 = 0, $188 = 0, $201 = 0, $213 = 0, $222 = 0, $227 = 0, $229 = 0, $230 = 0, $231 = 0, $238 = 0, $41 = 0, $6 = 0, $64 = 0, $65 = 0, $7 = 0, $72 = 0, $74 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $95 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16859
 STACKTOP = STACKTOP + 16 | 0; //@line 16860
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16860
 $6 = sp; //@line 16861
 HEAP32[$6 >> 2] = 0; //@line 16862
 $7 = $0 + 636 | 0; //@line 16863
 HEAP16[$7 >> 1] = 0; //@line 16864
 $8 = $0 + 373 | 0; //@line 16865
 HEAP8[$8 >> 0] = 0; //@line 16866
 $9 = ($4 | 0) == 0; //@line 16867
 $$extract$t = $9 ? 0 : $5 & 255; //@line 16869
 $10 = $0 + 893 | 0; //@line 16870
 HEAP8[$10 >> 0] = $$extract$t; //@line 16871
 $12 = $0 + 381 | 0; //@line 16873
 HEAP8[$12 >> 0] = HEAP8[$1 >> 0] | 0; //@line 16874
 switch ((HEAPU8[$1 >> 0] | 0) >>> 5 & 7) {
 case 0:
  {
   HEAP16[$7 >> 1] = 1; //@line 16880
   $16 = HEAP32[$0 + 904 >> 2] | 0; //@line 16883
   HEAP8[$0 + 389 >> 0] = HEAP8[$16 >> 0] | 0; //@line 16888
   HEAP8[$0 + 388 >> 0] = HEAP8[$16 + 1 >> 0] | 0; //@line 16892
   HEAP8[$0 + 387 >> 0] = HEAP8[$16 + 2 >> 0] | 0; //@line 16896
   HEAP8[$0 + 386 >> 0] = HEAP8[$16 + 3 >> 0] | 0; //@line 16900
   HEAP8[$0 + 385 >> 0] = HEAP8[$16 + 4 >> 0] | 0; //@line 16904
   HEAP8[$0 + 384 >> 0] = HEAP8[$16 + 5 >> 0] | 0; //@line 16908
   HEAP8[$0 + 383 >> 0] = HEAP8[$16 + 6 >> 0] | 0; //@line 16911
   HEAP8[$0 + 382 >> 0] = HEAP8[$16 + 7 >> 0] | 0; //@line 16913
   HEAP16[$7 >> 1] = 9; //@line 16914
   $41 = HEAP32[$0 + 900 >> 2] | 0; //@line 16917
   HEAP8[$0 + 397 >> 0] = HEAP8[$41 >> 0] | 0; //@line 16922
   HEAP8[$0 + 396 >> 0] = HEAP8[$41 + 1 >> 0] | 0; //@line 16926
   HEAP8[$0 + 395 >> 0] = HEAP8[$41 + 2 >> 0] | 0; //@line 16930
   HEAP8[$0 + 394 >> 0] = HEAP8[$41 + 3 >> 0] | 0; //@line 16934
   HEAP8[$0 + 393 >> 0] = HEAP8[$41 + 4 >> 0] | 0; //@line 16938
   HEAP8[$0 + 392 >> 0] = HEAP8[$41 + 5 >> 0] | 0; //@line 16942
   HEAP8[$0 + 391 >> 0] = HEAP8[$41 + 6 >> 0] | 0; //@line 16945
   HEAP8[$0 + 390 >> 0] = HEAP8[$41 + 7 >> 0] | 0; //@line 16947
   HEAP16[$7 >> 1] = 17; //@line 16948
   $64 = HEAP32[$0 >> 2] | 0; //@line 16949
   $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16950
   $65 = __ZN7LoRaPHY13get_radio_rngEv($64) | 0; //@line 16951
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 499; //@line 16954
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 16956
    HEAP32[$AsyncCtx11 + 8 >> 2] = $7; //@line 16958
    HEAP32[$AsyncCtx11 + 12 >> 2] = $12; //@line 16960
    HEAP32[$AsyncCtx11 + 16 >> 2] = $6; //@line 16962
    HEAP32[$AsyncCtx11 + 20 >> 2] = $6; //@line 16964
    sp = STACKTOP; //@line 16965
    STACKTOP = sp; //@line 16966
    return 0; //@line 16966
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 16968
   $72 = $0 + 946 | 0; //@line 16970
   HEAP16[$72 >> 1] = $65; //@line 16971
   $74 = HEAP16[$7 >> 1] | 0; //@line 16973
   HEAP16[$7 >> 1] = $74 + 1 << 16 >> 16; //@line 16975
   HEAP8[($74 & 65535) + ($0 + 381) >> 0] = $65; //@line 16978
   $80 = (HEAPU16[$72 >> 1] | 0) >>> 8 & 255; //@line 16981
   $81 = HEAP16[$7 >> 1] | 0; //@line 16982
   HEAP16[$7 >> 1] = $81 + 1 << 16 >> 16; //@line 16984
   HEAP8[($81 & 65535) + ($0 + 381) >> 0] = $80; //@line 16987
   $86 = HEAP16[$7 >> 1] & 255; //@line 16989
   $88 = HEAP32[$0 + 908 >> 2] | 0; //@line 16991
   $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 16992
   $89 = __Z22compute_join_frame_micPKhtS0_Pj($12, $86, $88, $6) | 0; //@line 16993
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 500; //@line 16996
    HEAP32[$AsyncCtx3 + 4 >> 2] = $6; //@line 16998
    HEAP32[$AsyncCtx3 + 8 >> 2] = $7; //@line 17000
    HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 17002
    HEAP32[$AsyncCtx3 + 16 >> 2] = $6; //@line 17004
    sp = STACKTOP; //@line 17005
    STACKTOP = sp; //@line 17006
    return 0; //@line 17006
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17008
   if ($89 | 0) {
    $$0 = -1014; //@line 17011
    STACKTOP = sp; //@line 17012
    return $$0 | 0; //@line 17012
   }
   $95 = HEAP32[$6 >> 2] | 0; //@line 17014
   $97 = HEAP16[$7 >> 1] | 0; //@line 17016
   HEAP16[$7 >> 1] = $97 + 1 << 16 >> 16; //@line 17018
   HEAP8[($97 & 65535) + ($0 + 381) >> 0] = $95; //@line 17021
   $103 = HEAP16[$7 >> 1] | 0; //@line 17024
   HEAP16[$7 >> 1] = $103 + 1 << 16 >> 16; //@line 17026
   HEAP8[($103 & 65535) + ($0 + 381) >> 0] = $95 >>> 8; //@line 17029
   $109 = HEAP16[$7 >> 1] | 0; //@line 17032
   HEAP16[$7 >> 1] = $109 + 1 << 16 >> 16; //@line 17034
   HEAP8[($109 & 65535) + ($0 + 381) >> 0] = $95 >>> 16; //@line 17037
   $115 = HEAP16[$7 >> 1] | 0; //@line 17040
   HEAP16[$7 >> 1] = $115 + 1 << 16 >> 16; //@line 17042
   HEAP8[($115 & 65535) + ($0 + 381) >> 0] = $95 >>> 24; //@line 17045
   $$0 = 0; //@line 17046
   STACKTOP = sp; //@line 17047
   return $$0 | 0; //@line 17047
  }
 case 4:
  {
   HEAP8[$8 >> 0] = 1; //@line 17051
   break;
  }
 case 2:
  {
   break;
  }
 case 7:
  {
   if ($9 | $$extract$t << 24 >> 24 == 0) {
    $$0 = 0; //@line 17061
    STACKTOP = sp; //@line 17062
    return $$0 | 0; //@line 17062
   }
   _memcpy($0 + 382 | 0, $4 | 0, $$extract$t & 255 | 0) | 0; //@line 17066
   HEAP16[$7 >> 1] = (HEAPU8[$10 >> 0] | 0) + 1; //@line 17071
   $$0 = 0; //@line 17072
   STACKTOP = sp; //@line 17073
   return $$0 | 0; //@line 17073
  }
 default:
  {
   $$0 = -1002; //@line 17077
   STACKTOP = sp; //@line 17078
   return $$0 | 0; //@line 17078
  }
 }
 if (!(HEAP8[$0 + 372 >> 0] | 0)) {
  $$0 = -1009; //@line 17085
  STACKTOP = sp; //@line 17086
  return $$0 | 0; //@line 17086
 }
 if (HEAP8[$0 + 1156 >> 0] | 0) {
  $125 = HEAP32[$0 >> 2] | 0; //@line 17092
  $AsyncCtx7 = _emscripten_alloc_async_context(40, sp) | 0; //@line 17096
  $129 = __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($125, 1, $0 + 1097 | 0, $0 + 1096 | 0, $0 + 964 | 0) | 0; //@line 17097
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 501; //@line 17100
   HEAP32[$AsyncCtx7 + 4 >> 2] = $6; //@line 17102
   HEAP32[$AsyncCtx7 + 8 >> 2] = $7; //@line 17104
   HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 17106
   HEAP32[$AsyncCtx7 + 16 >> 2] = $10; //@line 17108
   HEAP32[$AsyncCtx7 + 20 >> 2] = $4; //@line 17110
   HEAP8[$AsyncCtx7 + 24 >> 0] = $3; //@line 17112
   HEAP8[$AsyncCtx7 + 25 >> 0] = $9 & 1; //@line 17115
   HEAP32[$AsyncCtx7 + 28 >> 2] = $6; //@line 17117
   HEAP32[$AsyncCtx7 + 32 >> 2] = $2; //@line 17119
   HEAP32[$AsyncCtx7 + 36 >> 2] = $12; //@line 17121
   sp = STACKTOP; //@line 17122
   STACKTOP = sp; //@line 17123
   return 0; //@line 17123
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 17125
  if ($129) {
   HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 64; //@line 17129
  }
 }
 $142 = $0 + 374 | 0; //@line 17132
 if (!(HEAP8[$142 >> 0] | 0)) {
  $$pre$phiZ2D = $2; //@line 17136
 } else {
  HEAP8[$142 >> 0] = 0; //@line 17138
  HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 32; //@line 17141
  $$pre$phiZ2D = $2; //@line 17142
 }
 $147 = $0 + 952 | 0; //@line 17144
 $148 = HEAP32[$147 >> 2] | 0; //@line 17145
 HEAP8[$0 + 382 >> 0] = $148; //@line 17148
 HEAP8[$0 + 383 >> 0] = $148 >>> 8; //@line 17152
 HEAP8[$0 + 384 >> 0] = $148 >>> 16; //@line 17156
 HEAP8[$0 + 385 >> 0] = $148 >>> 24; //@line 17160
 $161 = $0 + 386 | 0; //@line 17162
 HEAP8[$161 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 17163
 $162 = $0 + 956 | 0; //@line 17164
 $163 = HEAP32[$162 >> 2] | 0; //@line 17165
 HEAP8[$0 + 387 >> 0] = $163; //@line 17168
 HEAP8[$0 + 388 >> 0] = $163 >>> 8; //@line 17172
 $169 = $0 + 4 | 0; //@line 17173
 __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($169); //@line 17174
 $170 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($169) | 0; //@line 17175
 do {
  if ($9) {
   label = 27; //@line 17178
  } else {
   if (!(HEAP8[$10 >> 0] | 0)) {
    label = 27; //@line 17183
   } else {
    if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($169) | 0)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($169); //@line 17187
     $$05564 = $3; //@line 17188
     $$05663 = $4; //@line 17188
     $$15862 = 8; //@line 17188
     label = 31; //@line 17189
     break;
    }
    $174 = $170 & 255; //@line 17192
    if (($170 & 255) >= 16) {
     HEAP8[$10 >> 0] = $170; //@line 17195
     $$055 = 0; //@line 17197
     $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($169) | 0; //@line 17197
     $$158 = 8; //@line 17197
     label = 30; //@line 17198
     break;
    }
    $176 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 17201
    $182 = ($176 & 255) + $174 & 15 | $176 & -16; //@line 17207
    HEAP8[$$pre$phiZ2D >> 0] = $182; //@line 17208
    HEAP8[$161 >> 0] = $182; //@line 17209
    $183 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($169) | 0; //@line 17210
    if (!($170 << 24 >> 24)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($169); //@line 17213
     $$05564 = $3; //@line 17214
     $$05663 = $4; //@line 17214
     $$15862 = 8; //@line 17214
     label = 31; //@line 17215
     break;
    } else {
     $$05766 = 8; //@line 17218
     $$06065 = 0; //@line 17218
     $186 = 0; //@line 17218
     while (1) {
      $188 = $$05766 + 1 << 24 >> 24; //@line 17222
      HEAP8[($$05766 & 255) + ($0 + 381) >> 0] = HEAP8[$183 + $186 >> 0] | 0; //@line 17225
      $$06065 = $$06065 + 1 << 16 >> 16; //@line 17226
      $186 = $$06065 & 65535; //@line 17227
      if ($186 >>> 0 >= $174 >>> 0) {
       $$055 = $3; //@line 17232
       $$056 = $4; //@line 17232
       $$158 = $188; //@line 17232
       label = 30; //@line 17233
       break;
      } else {
       $$05766 = $188; //@line 17230
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 27) {
  if (!($170 << 24 >> 24)) {
   $$055 = $3; //@line 17244
   $$056 = $4; //@line 17244
   $$158 = 8; //@line 17244
   label = 30; //@line 17245
  } else {
   if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($169) | 0) {
    HEAP8[$10 >> 0] = $170; //@line 17249
    $$055 = 0; //@line 17251
    $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($169) | 0; //@line 17251
    $$158 = 8; //@line 17251
    label = 30; //@line 17252
   } else {
    $$055 = $3; //@line 17254
    $$056 = $4; //@line 17254
    $$158 = 8; //@line 17254
    label = 30; //@line 17255
   }
  }
 }
 if ((label | 0) == 30) {
  __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($169); //@line 17260
  if (!$$056) {
   $$054 = 0; //@line 17263
   $$259 = $$158; //@line 17263
  } else {
   $$05564 = $$055; //@line 17265
   $$05663 = $$056; //@line 17265
   $$15862 = $$158; //@line 17265
   label = 31; //@line 17266
  }
 }
 do {
  if ((label | 0) == 31) {
   if (!(HEAP8[$10 >> 0] | 0)) {
    $$054 = 0; //@line 17274
    $$259 = $$15862; //@line 17274
   } else {
    $201 = $$15862 + 1 << 24 >> 24; //@line 17276
    HEAP8[($$15862 & 255) + ($0 + 381) >> 0] = $$05564; //@line 17279
    if (!($$05564 << 24 >> 24)) {
     __ZN14LoRaMacCommand20clear_command_bufferEv($169); //@line 17282
     $213 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$10 >> 0] | 0, $0 + 912 | 0, HEAP32[$147 >> 2] | 0, 0, HEAP32[$162 >> 2] | 0, ($201 & 255) + ($0 + 381) | 0) | 0) == 0; //@line 17291
     $$054 = $213 ? 0 : -1014; //@line 17293
     $$259 = $201; //@line 17293
     break;
    } else {
     $222 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$10 >> 0] | 0, $0 + 928 | 0, HEAP32[$147 >> 2] | 0, 0, HEAP32[$162 >> 2] | 0, ($201 & 255) + ($0 + 381) | 0) | 0) == 0; //@line 17304
     $$054 = $222 ? 0 : -1014; //@line 17306
     $$259 = $201; //@line 17306
     break;
    }
   }
  }
 } while (0);
 $227 = (HEAPU8[$10 >> 0] | 0) + ($$259 & 255) & 65535; //@line 17316
 HEAP16[$7 >> 1] = $227; //@line 17317
 $229 = HEAP32[$147 >> 2] | 0; //@line 17319
 $230 = HEAP32[$162 >> 2] | 0; //@line 17320
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 17321
 $231 = __Z11compute_micPKhtS0_jhjPj($12, $227, $0 + 912 | 0, $229, 0, $230, $6) | 0; //@line 17322
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 502; //@line 17325
  HEAP32[$AsyncCtx + 4 >> 2] = $$054; //@line 17327
  HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 17329
  HEAP32[$AsyncCtx + 12 >> 2] = $7; //@line 17331
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 17333
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 17335
  sp = STACKTOP; //@line 17336
  STACKTOP = sp; //@line 17337
  return 0; //@line 17337
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17339
 $238 = HEAP32[$6 >> 2] | 0; //@line 17342
 HEAP8[(HEAPU16[$7 >> 1] | 0) + ($0 + 381) >> 0] = $238; //@line 17347
 HEAP8[(HEAPU16[$7 >> 1] | 0) + 1 + ($0 + 381) >> 0] = $238 >>> 8; //@line 17354
 HEAP8[(HEAPU16[$7 >> 1] | 0) + 2 + ($0 + 381) >> 0] = $238 >>> 16; //@line 17361
 HEAP8[(HEAPU16[$7 >> 1] | 0) + 3 + ($0 + 381) >> 0] = $238 >>> 24; //@line 17368
 HEAP16[$7 >> 1] = (HEAPU16[$7 >> 1] | 0) + 4; //@line 17373
 $$0 = ($231 | 0) == 0 ? $$054 : -1014; //@line 17374
 STACKTOP = sp; //@line 17375
 return $$0 | 0; //@line 17375
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_215($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 36190
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36192
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36194
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36196
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36198
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36200
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 36202
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 36204
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 36206
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 36208
 $20 = $0 + 40 | 0; //@line 36210
 $22 = HEAP32[$20 >> 2] | 0; //@line 36212
 $25 = HEAP32[$20 + 4 >> 2] | 0; //@line 36215
 $27 = HEAP32[$0 + 48 >> 2] | 0; //@line 36217
 $29 = HEAP32[$0 + 52 >> 2] | 0; //@line 36219
 $31 = HEAP32[$0 + 56 >> 2] | 0; //@line 36221
 $33 = HEAP32[$0 + 60 >> 2] | 0; //@line 36223
 $35 = HEAP32[$0 + 64 >> 2] | 0; //@line 36225
 $37 = HEAP32[$0 + 68 >> 2] | 0; //@line 36227
 $39 = HEAP32[$0 + 72 >> 2] | 0; //@line 36229
 $41 = HEAP32[$0 + 76 >> 2] | 0; //@line 36231
 $43 = HEAP32[$0 + 80 >> 2] | 0; //@line 36233
 $45 = HEAP32[$0 + 84 >> 2] | 0; //@line 36235
 $47 = HEAP32[$0 + 88 >> 2] | 0; //@line 36237
 $48 = HEAP32[$14 >> 2] | 0; //@line 36238
 if ($48 | 0) {
  $51 = HEAP32[$48 + 4 >> 2] | 0; //@line 36242
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(96) | 0; //@line 36243
  FUNCTION_TABLE_vii[$51 & 31]($10, $12); //@line 36244
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 75; //@line 36247
   $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 36248
   HEAP32[$52 >> 2] = $2; //@line 36249
   $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 36250
   HEAP32[$53 >> 2] = $4; //@line 36251
   $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 36252
   HEAP32[$54 >> 2] = $6; //@line 36253
   $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 36254
   HEAP32[$55 >> 2] = $8; //@line 36255
   $56 = $ReallocAsyncCtx5 + 20 | 0; //@line 36256
   HEAP32[$56 >> 2] = $16; //@line 36257
   $57 = $ReallocAsyncCtx5 + 24 | 0; //@line 36258
   HEAP32[$57 >> 2] = $18; //@line 36259
   $58 = $ReallocAsyncCtx5 + 32 | 0; //@line 36260
   $59 = $58; //@line 36261
   $60 = $59; //@line 36262
   HEAP32[$60 >> 2] = $22; //@line 36263
   $61 = $59 + 4 | 0; //@line 36264
   $62 = $61; //@line 36265
   HEAP32[$62 >> 2] = $25; //@line 36266
   $63 = $ReallocAsyncCtx5 + 40 | 0; //@line 36267
   HEAP32[$63 >> 2] = $14; //@line 36268
   $64 = $ReallocAsyncCtx5 + 44 | 0; //@line 36269
   HEAP32[$64 >> 2] = $12; //@line 36270
   $65 = $ReallocAsyncCtx5 + 48 | 0; //@line 36271
   HEAP32[$65 >> 2] = $27; //@line 36272
   $66 = $ReallocAsyncCtx5 + 52 | 0; //@line 36273
   HEAP32[$66 >> 2] = $29; //@line 36274
   $67 = $ReallocAsyncCtx5 + 56 | 0; //@line 36275
   HEAP32[$67 >> 2] = $31; //@line 36276
   $68 = $ReallocAsyncCtx5 + 60 | 0; //@line 36277
   HEAP32[$68 >> 2] = $33; //@line 36278
   $69 = $ReallocAsyncCtx5 + 64 | 0; //@line 36279
   HEAP32[$69 >> 2] = $35; //@line 36280
   $70 = $ReallocAsyncCtx5 + 68 | 0; //@line 36281
   HEAP32[$70 >> 2] = $37; //@line 36282
   $71 = $ReallocAsyncCtx5 + 72 | 0; //@line 36283
   HEAP32[$71 >> 2] = $39; //@line 36284
   $72 = $ReallocAsyncCtx5 + 76 | 0; //@line 36285
   HEAP32[$72 >> 2] = $41; //@line 36286
   $73 = $ReallocAsyncCtx5 + 80 | 0; //@line 36287
   HEAP32[$73 >> 2] = $43; //@line 36288
   $74 = $ReallocAsyncCtx5 + 84 | 0; //@line 36289
   HEAP32[$74 >> 2] = $45; //@line 36290
   $75 = $ReallocAsyncCtx5 + 88 | 0; //@line 36291
   HEAP32[$75 >> 2] = $47; //@line 36292
   sp = STACKTOP; //@line 36293
   return;
  }
  ___async_unwind = 0; //@line 36296
  HEAP32[$ReallocAsyncCtx5 >> 2] = 75; //@line 36297
  $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 36298
  HEAP32[$52 >> 2] = $2; //@line 36299
  $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 36300
  HEAP32[$53 >> 2] = $4; //@line 36301
  $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 36302
  HEAP32[$54 >> 2] = $6; //@line 36303
  $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 36304
  HEAP32[$55 >> 2] = $8; //@line 36305
  $56 = $ReallocAsyncCtx5 + 20 | 0; //@line 36306
  HEAP32[$56 >> 2] = $16; //@line 36307
  $57 = $ReallocAsyncCtx5 + 24 | 0; //@line 36308
  HEAP32[$57 >> 2] = $18; //@line 36309
  $58 = $ReallocAsyncCtx5 + 32 | 0; //@line 36310
  $59 = $58; //@line 36311
  $60 = $59; //@line 36312
  HEAP32[$60 >> 2] = $22; //@line 36313
  $61 = $59 + 4 | 0; //@line 36314
  $62 = $61; //@line 36315
  HEAP32[$62 >> 2] = $25; //@line 36316
  $63 = $ReallocAsyncCtx5 + 40 | 0; //@line 36317
  HEAP32[$63 >> 2] = $14; //@line 36318
  $64 = $ReallocAsyncCtx5 + 44 | 0; //@line 36319
  HEAP32[$64 >> 2] = $12; //@line 36320
  $65 = $ReallocAsyncCtx5 + 48 | 0; //@line 36321
  HEAP32[$65 >> 2] = $27; //@line 36322
  $66 = $ReallocAsyncCtx5 + 52 | 0; //@line 36323
  HEAP32[$66 >> 2] = $29; //@line 36324
  $67 = $ReallocAsyncCtx5 + 56 | 0; //@line 36325
  HEAP32[$67 >> 2] = $31; //@line 36326
  $68 = $ReallocAsyncCtx5 + 60 | 0; //@line 36327
  HEAP32[$68 >> 2] = $33; //@line 36328
  $69 = $ReallocAsyncCtx5 + 64 | 0; //@line 36329
  HEAP32[$69 >> 2] = $35; //@line 36330
  $70 = $ReallocAsyncCtx5 + 68 | 0; //@line 36331
  HEAP32[$70 >> 2] = $37; //@line 36332
  $71 = $ReallocAsyncCtx5 + 72 | 0; //@line 36333
  HEAP32[$71 >> 2] = $39; //@line 36334
  $72 = $ReallocAsyncCtx5 + 76 | 0; //@line 36335
  HEAP32[$72 >> 2] = $41; //@line 36336
  $73 = $ReallocAsyncCtx5 + 80 | 0; //@line 36337
  HEAP32[$73 >> 2] = $43; //@line 36338
  $74 = $ReallocAsyncCtx5 + 84 | 0; //@line 36339
  HEAP32[$74 >> 2] = $45; //@line 36340
  $75 = $ReallocAsyncCtx5 + 88 | 0; //@line 36341
  HEAP32[$75 >> 2] = $47; //@line 36342
  sp = STACKTOP; //@line 36343
  return;
 }
 HEAP32[$16 >> 2] = 0; //@line 36346
 __ZN4mbed6Ticker5setupEy($18, $22, $25); //@line 36347
 $76 = HEAP32[$14 >> 2] | 0; //@line 36348
 if ($76 | 0) {
  $79 = HEAP32[$76 + 8 >> 2] | 0; //@line 36352
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 36353
  FUNCTION_TABLE_vi[$79 & 1023]($12); //@line 36354
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 76; //@line 36357
   $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 36358
   HEAP32[$80 >> 2] = $2; //@line 36359
   $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 36360
   HEAP32[$81 >> 2] = $4; //@line 36361
   $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 36362
   HEAP32[$82 >> 2] = $6; //@line 36363
   $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 36364
   HEAP32[$83 >> 2] = $8; //@line 36365
   $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 36366
   HEAP32[$84 >> 2] = $27; //@line 36367
   $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 36368
   HEAP32[$85 >> 2] = $29; //@line 36369
   $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 36370
   HEAP32[$86 >> 2] = $31; //@line 36371
   $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 36372
   HEAP32[$87 >> 2] = $33; //@line 36373
   $88 = $ReallocAsyncCtx6 + 36 | 0; //@line 36374
   HEAP32[$88 >> 2] = $35; //@line 36375
   $89 = $ReallocAsyncCtx6 + 40 | 0; //@line 36376
   HEAP32[$89 >> 2] = $37; //@line 36377
   $90 = $ReallocAsyncCtx6 + 44 | 0; //@line 36378
   HEAP32[$90 >> 2] = $39; //@line 36379
   $91 = $ReallocAsyncCtx6 + 48 | 0; //@line 36380
   HEAP32[$91 >> 2] = $41; //@line 36381
   $92 = $ReallocAsyncCtx6 + 52 | 0; //@line 36382
   HEAP32[$92 >> 2] = $43; //@line 36383
   $93 = $ReallocAsyncCtx6 + 56 | 0; //@line 36384
   HEAP32[$93 >> 2] = $45; //@line 36385
   $94 = $ReallocAsyncCtx6 + 60 | 0; //@line 36386
   HEAP32[$94 >> 2] = $47; //@line 36387
   sp = STACKTOP; //@line 36388
   return;
  }
  ___async_unwind = 0; //@line 36391
  HEAP32[$ReallocAsyncCtx6 >> 2] = 76; //@line 36392
  $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 36393
  HEAP32[$80 >> 2] = $2; //@line 36394
  $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 36395
  HEAP32[$81 >> 2] = $4; //@line 36396
  $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 36397
  HEAP32[$82 >> 2] = $6; //@line 36398
  $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 36399
  HEAP32[$83 >> 2] = $8; //@line 36400
  $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 36401
  HEAP32[$84 >> 2] = $27; //@line 36402
  $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 36403
  HEAP32[$85 >> 2] = $29; //@line 36404
  $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 36405
  HEAP32[$86 >> 2] = $31; //@line 36406
  $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 36407
  HEAP32[$87 >> 2] = $33; //@line 36408
  $88 = $ReallocAsyncCtx6 + 36 | 0; //@line 36409
  HEAP32[$88 >> 2] = $35; //@line 36410
  $89 = $ReallocAsyncCtx6 + 40 | 0; //@line 36411
  HEAP32[$89 >> 2] = $37; //@line 36412
  $90 = $ReallocAsyncCtx6 + 44 | 0; //@line 36413
  HEAP32[$90 >> 2] = $39; //@line 36414
  $91 = $ReallocAsyncCtx6 + 48 | 0; //@line 36415
  HEAP32[$91 >> 2] = $41; //@line 36416
  $92 = $ReallocAsyncCtx6 + 52 | 0; //@line 36417
  HEAP32[$92 >> 2] = $43; //@line 36418
  $93 = $ReallocAsyncCtx6 + 56 | 0; //@line 36419
  HEAP32[$93 >> 2] = $45; //@line 36420
  $94 = $ReallocAsyncCtx6 + 60 | 0; //@line 36421
  HEAP32[$94 >> 2] = $47; //@line 36422
  sp = STACKTOP; //@line 36423
  return;
 }
 $97 = (HEAP8[$31 + 770 >> 0] | 0) == 0; //@line 36428
 _printf(10904, $33) | 0; //@line 36429
 if ($97) {
  HEAP32[$27 >> 2] = 6; //@line 36431
  _printf(10970, $27) | 0; //@line 36432
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 36433
  _putchar(10) | 0; //@line 36434
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 80; //@line 36437
   $103 = $ReallocAsyncCtx8 + 4 | 0; //@line 36438
   HEAP32[$103 >> 2] = $31; //@line 36439
   $104 = $ReallocAsyncCtx8 + 8 | 0; //@line 36440
   HEAP32[$104 >> 2] = $41; //@line 36441
   $105 = $ReallocAsyncCtx8 + 12 | 0; //@line 36442
   HEAP32[$105 >> 2] = $43; //@line 36443
   $106 = $ReallocAsyncCtx8 + 16 | 0; //@line 36444
   HEAP32[$106 >> 2] = $45; //@line 36445
   $107 = $ReallocAsyncCtx8 + 20 | 0; //@line 36446
   HEAP32[$107 >> 2] = $47; //@line 36447
   sp = STACKTOP; //@line 36448
   return;
  }
  ___async_unwind = 0; //@line 36451
  HEAP32[$ReallocAsyncCtx8 >> 2] = 80; //@line 36452
  $103 = $ReallocAsyncCtx8 + 4 | 0; //@line 36453
  HEAP32[$103 >> 2] = $31; //@line 36454
  $104 = $ReallocAsyncCtx8 + 8 | 0; //@line 36455
  HEAP32[$104 >> 2] = $41; //@line 36456
  $105 = $ReallocAsyncCtx8 + 12 | 0; //@line 36457
  HEAP32[$105 >> 2] = $43; //@line 36458
  $106 = $ReallocAsyncCtx8 + 16 | 0; //@line 36459
  HEAP32[$106 >> 2] = $45; //@line 36460
  $107 = $ReallocAsyncCtx8 + 20 | 0; //@line 36461
  HEAP32[$107 >> 2] = $47; //@line 36462
  sp = STACKTOP; //@line 36463
  return;
 } else {
  HEAP32[$37 >> 2] = 5; //@line 36466
  _printf(10970, $37) | 0; //@line 36467
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 36468
  _putchar(10) | 0; //@line 36469
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 77; //@line 36472
   $98 = $ReallocAsyncCtx10 + 4 | 0; //@line 36473
   HEAP32[$98 >> 2] = $31; //@line 36474
   $99 = $ReallocAsyncCtx10 + 8 | 0; //@line 36475
   HEAP32[$99 >> 2] = $2; //@line 36476
   $100 = $ReallocAsyncCtx10 + 12 | 0; //@line 36477
   HEAP32[$100 >> 2] = $4; //@line 36478
   $101 = $ReallocAsyncCtx10 + 16 | 0; //@line 36479
   HEAP32[$101 >> 2] = $6; //@line 36480
   $102 = $ReallocAsyncCtx10 + 20 | 0; //@line 36481
   HEAP32[$102 >> 2] = $8; //@line 36482
   sp = STACKTOP; //@line 36483
   return;
  }
  ___async_unwind = 0; //@line 36486
  HEAP32[$ReallocAsyncCtx10 >> 2] = 77; //@line 36487
  $98 = $ReallocAsyncCtx10 + 4 | 0; //@line 36488
  HEAP32[$98 >> 2] = $31; //@line 36489
  $99 = $ReallocAsyncCtx10 + 8 | 0; //@line 36490
  HEAP32[$99 >> 2] = $2; //@line 36491
  $100 = $ReallocAsyncCtx10 + 12 | 0; //@line 36492
  HEAP32[$100 >> 2] = $4; //@line 36493
  $101 = $ReallocAsyncCtx10 + 16 | 0; //@line 36494
  HEAP32[$101 >> 2] = $6; //@line 36495
  $102 = $ReallocAsyncCtx10 + 20 | 0; //@line 36496
  HEAP32[$102 >> 2] = $8; //@line 36497
  sp = STACKTOP; //@line 36498
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_418($0) {
 $0 = $0 | 0;
 var $$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $108 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $65 = 0, $66 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29913
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29915
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29917
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29919
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29921
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29923
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29925
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29927
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29929
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29931
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29933
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29935
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29937
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 29939
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 29941
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 29943
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 29945
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 29947
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 29949
 switch (HEAP32[$24 >> 2] | 0) {
 case 7:
  {
   $38 = $2 + 4 | 0; //@line 29953
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(24) | 0; //@line 29954
   __ZN7LoRaMac19remove_channel_planEv($38) | 0; //@line 29955
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 239; //@line 29958
    $39 = $ReallocAsyncCtx22 + 4 | 0; //@line 29959
    HEAP32[$39 >> 2] = $18; //@line 29960
    $40 = $ReallocAsyncCtx22 + 8 | 0; //@line 29961
    HEAP32[$40 >> 2] = $38; //@line 29962
    $41 = $ReallocAsyncCtx22 + 12 | 0; //@line 29963
    HEAP32[$41 >> 2] = $2; //@line 29964
    $42 = $ReallocAsyncCtx22 + 16 | 0; //@line 29965
    HEAP32[$42 >> 2] = $8; //@line 29966
    $43 = $ReallocAsyncCtx22 + 20 | 0; //@line 29967
    HEAP32[$43 >> 2] = $22; //@line 29968
    sp = STACKTOP; //@line 29969
    return;
   }
   ___async_unwind = 0; //@line 29972
   HEAP32[$ReallocAsyncCtx22 >> 2] = 239; //@line 29973
   $39 = $ReallocAsyncCtx22 + 4 | 0; //@line 29974
   HEAP32[$39 >> 2] = $18; //@line 29975
   $40 = $ReallocAsyncCtx22 + 8 | 0; //@line 29976
   HEAP32[$40 >> 2] = $38; //@line 29977
   $41 = $ReallocAsyncCtx22 + 12 | 0; //@line 29978
   HEAP32[$41 >> 2] = $2; //@line 29979
   $42 = $ReallocAsyncCtx22 + 16 | 0; //@line 29980
   HEAP32[$42 >> 2] = $8; //@line 29981
   $43 = $ReallocAsyncCtx22 + 20 | 0; //@line 29982
   HEAP32[$43 >> 2] = $22; //@line 29983
   sp = STACKTOP; //@line 29984
   return;
  }
 case 1:
  {
   $$1 = 0; //@line 29989
   $108 = ___async_retval; //@line 29990
   HEAP32[$108 >> 2] = $$1; //@line 29991
   return;
  }
 case 2:
  {
   if (HEAP8[$2 + 1936 >> 0] | 0) {
    $$1 = -1003; //@line 30000
    $108 = ___async_retval; //@line 30001
    HEAP32[$108 >> 2] = $$1; //@line 30002
    return;
   }
   HEAP32[$26 >> 2] = 0; //@line 30005
   HEAP32[$26 + 4 >> 2] = HEAP32[$2 + 1940 >> 2]; //@line 30009
   HEAP32[$26 + 8 >> 2] = HEAP32[$2 + 1944 >> 2]; //@line 30013
   HEAP32[$26 + 12 >> 2] = HEAP32[$2 + 1948 >> 2]; //@line 30017
   HEAP8[$26 + 16 >> 0] = HEAP8[$2 + 1952 >> 0] | 0; //@line 30021
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(12) | 0; //@line 30023
   $60 = __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($2 + 4 | 0, $26) | 0; //@line 30024
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 246; //@line 30027
    $61 = $ReallocAsyncCtx23 + 4 | 0; //@line 30028
    HEAP32[$61 >> 2] = $26; //@line 30029
    $62 = $ReallocAsyncCtx23 + 8 | 0; //@line 30030
    HEAP32[$62 >> 2] = $8; //@line 30031
    sp = STACKTOP; //@line 30032
    return;
   }
   HEAP32[___async_retval >> 2] = $60; //@line 30036
   ___async_unwind = 0; //@line 30037
   HEAP32[$ReallocAsyncCtx23 >> 2] = 246; //@line 30038
   $61 = $ReallocAsyncCtx23 + 4 | 0; //@line 30039
   HEAP32[$61 >> 2] = $26; //@line 30040
   $62 = $ReallocAsyncCtx23 + 8 | 0; //@line 30041
   HEAP32[$62 >> 2] = $8; //@line 30042
   sp = STACKTOP; //@line 30043
   return;
  }
 case 4:
  {
   HEAP8[$2 + 1932 >> 0] = 1; //@line 30049
   $65 = $2 + 1892 | 0; //@line 30050
   $66 = HEAP32[$65 >> 2] | 0; //@line 30051
   if (!$66) {
    $$1 = 0; //@line 30054
    $108 = ___async_retval; //@line 30055
    HEAP32[$108 >> 2] = $$1; //@line 30056
    return;
   }
   $70 = HEAP32[$2 + 2288 >> 2] | 0; //@line 30061
   $72 = HEAP32[$66 + 4 >> 2] | 0; //@line 30063
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 30064
   FUNCTION_TABLE_vii[$72 & 31]($6, $2 + 1880 | 0); //@line 30065
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 247; //@line 30068
    $73 = $ReallocAsyncCtx3 + 4 | 0; //@line 30069
    HEAP32[$73 >> 2] = $65; //@line 30070
    $74 = $ReallocAsyncCtx3 + 8 | 0; //@line 30071
    HEAP32[$74 >> 2] = $6; //@line 30072
    $75 = $ReallocAsyncCtx3 + 12 | 0; //@line 30073
    HEAP32[$75 >> 2] = $70; //@line 30074
    $76 = $ReallocAsyncCtx3 + 16 | 0; //@line 30075
    HEAP32[$76 >> 2] = $6; //@line 30076
    $77 = $ReallocAsyncCtx3 + 20 | 0; //@line 30077
    HEAP32[$77 >> 2] = $8; //@line 30078
    sp = STACKTOP; //@line 30079
    return;
   }
   ___async_unwind = 0; //@line 30082
   HEAP32[$ReallocAsyncCtx3 >> 2] = 247; //@line 30083
   $73 = $ReallocAsyncCtx3 + 4 | 0; //@line 30084
   HEAP32[$73 >> 2] = $65; //@line 30085
   $74 = $ReallocAsyncCtx3 + 8 | 0; //@line 30086
   HEAP32[$74 >> 2] = $6; //@line 30087
   $75 = $ReallocAsyncCtx3 + 12 | 0; //@line 30088
   HEAP32[$75 >> 2] = $70; //@line 30089
   $76 = $ReallocAsyncCtx3 + 16 | 0; //@line 30090
   HEAP32[$76 >> 2] = $6; //@line 30091
   $77 = $ReallocAsyncCtx3 + 20 | 0; //@line 30092
   HEAP32[$77 >> 2] = $8; //@line 30093
   sp = STACKTOP; //@line 30094
   return;
  }
 case 3:
  {
   HEAP32[$18 >> 2] = 3; //@line 30099
   $80 = $18 + 4 | 0; //@line 30102
   HEAP32[$80 >> 2] = HEAP32[$2 + 1940 >> 2]; //@line 30103
   $81 = $2 + 4 | 0; //@line 30104
   $ReallocAsyncCtx19 = _emscripten_realloc_async_context(36) | 0; //@line 30105
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($81, $18) | 0; //@line 30106
   if (___async) {
    HEAP32[$ReallocAsyncCtx19 >> 2] = 251; //@line 30109
    $82 = $ReallocAsyncCtx19 + 4 | 0; //@line 30110
    HEAP32[$82 >> 2] = $18; //@line 30111
    $83 = $ReallocAsyncCtx19 + 8 | 0; //@line 30112
    HEAP32[$83 >> 2] = $2; //@line 30113
    $84 = $ReallocAsyncCtx19 + 12 | 0; //@line 30114
    HEAP32[$84 >> 2] = $80; //@line 30115
    $85 = $ReallocAsyncCtx19 + 16 | 0; //@line 30116
    HEAP32[$85 >> 2] = $81; //@line 30117
    $86 = $ReallocAsyncCtx19 + 20 | 0; //@line 30118
    HEAP32[$86 >> 2] = $18; //@line 30119
    $87 = $ReallocAsyncCtx19 + 24 | 0; //@line 30120
    HEAP32[$87 >> 2] = $20; //@line 30121
    $88 = $ReallocAsyncCtx19 + 28 | 0; //@line 30122
    HEAP32[$88 >> 2] = $8; //@line 30123
    $89 = $ReallocAsyncCtx19 + 32 | 0; //@line 30124
    HEAP32[$89 >> 2] = $80; //@line 30125
    sp = STACKTOP; //@line 30126
    return;
   }
   ___async_unwind = 0; //@line 30129
   HEAP32[$ReallocAsyncCtx19 >> 2] = 251; //@line 30130
   $82 = $ReallocAsyncCtx19 + 4 | 0; //@line 30131
   HEAP32[$82 >> 2] = $18; //@line 30132
   $83 = $ReallocAsyncCtx19 + 8 | 0; //@line 30133
   HEAP32[$83 >> 2] = $2; //@line 30134
   $84 = $ReallocAsyncCtx19 + 12 | 0; //@line 30135
   HEAP32[$84 >> 2] = $80; //@line 30136
   $85 = $ReallocAsyncCtx19 + 16 | 0; //@line 30137
   HEAP32[$85 >> 2] = $81; //@line 30138
   $86 = $ReallocAsyncCtx19 + 20 | 0; //@line 30139
   HEAP32[$86 >> 2] = $18; //@line 30140
   $87 = $ReallocAsyncCtx19 + 24 | 0; //@line 30141
   HEAP32[$87 >> 2] = $20; //@line 30142
   $88 = $ReallocAsyncCtx19 + 28 | 0; //@line 30143
   HEAP32[$88 >> 2] = $8; //@line 30144
   $89 = $ReallocAsyncCtx19 + 32 | 0; //@line 30145
   HEAP32[$89 >> 2] = $80; //@line 30146
   sp = STACKTOP; //@line 30147
   return;
  }
 case 5:
  {
   $90 = $2 + 1964 | 0; //@line 30152
   if (HEAP8[$90 >> 0] | 0) {
    HEAP32[$24 >> 2] = 6; //@line 30156
    $$1 = 0; //@line 30157
    $108 = ___async_retval; //@line 30158
    HEAP32[$108 >> 2] = $$1; //@line 30159
    return;
   }
   HEAP8[$90 >> 0] = 1; //@line 30162
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(56) | 0; //@line 30163
   $93 = __ZN12LoRaWANStack17send_frame_to_macEv($2) | 0; //@line 30164
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 260; //@line 30167
    $94 = $ReallocAsyncCtx14 + 4 | 0; //@line 30168
    HEAP32[$94 >> 2] = $2; //@line 30169
    $95 = $ReallocAsyncCtx14 + 8 | 0; //@line 30170
    HEAP32[$95 >> 2] = $4; //@line 30171
    $96 = $ReallocAsyncCtx14 + 12 | 0; //@line 30172
    HEAP32[$96 >> 2] = $10; //@line 30173
    $97 = $ReallocAsyncCtx14 + 16 | 0; //@line 30174
    HEAP32[$97 >> 2] = $12; //@line 30175
    $98 = $ReallocAsyncCtx14 + 20 | 0; //@line 30176
    HEAP32[$98 >> 2] = $14; //@line 30177
    $99 = $ReallocAsyncCtx14 + 24 | 0; //@line 30178
    HEAP32[$99 >> 2] = $16; //@line 30179
    $100 = $ReallocAsyncCtx14 + 28 | 0; //@line 30180
    HEAP32[$100 >> 2] = $24; //@line 30181
    $101 = $ReallocAsyncCtx14 + 32 | 0; //@line 30182
    HEAP32[$101 >> 2] = $28; //@line 30183
    $102 = $ReallocAsyncCtx14 + 36 | 0; //@line 30184
    HEAP32[$102 >> 2] = $8; //@line 30185
    $103 = $ReallocAsyncCtx14 + 40 | 0; //@line 30186
    HEAP32[$103 >> 2] = $30; //@line 30187
    $104 = $ReallocAsyncCtx14 + 44 | 0; //@line 30188
    HEAP32[$104 >> 2] = $32; //@line 30189
    $105 = $ReallocAsyncCtx14 + 48 | 0; //@line 30190
    HEAP32[$105 >> 2] = $34; //@line 30191
    $106 = $ReallocAsyncCtx14 + 52 | 0; //@line 30192
    HEAP32[$106 >> 2] = $36; //@line 30193
    sp = STACKTOP; //@line 30194
    return;
   }
   HEAP32[___async_retval >> 2] = $93; //@line 30198
   ___async_unwind = 0; //@line 30199
   HEAP32[$ReallocAsyncCtx14 >> 2] = 260; //@line 30200
   $94 = $ReallocAsyncCtx14 + 4 | 0; //@line 30201
   HEAP32[$94 >> 2] = $2; //@line 30202
   $95 = $ReallocAsyncCtx14 + 8 | 0; //@line 30203
   HEAP32[$95 >> 2] = $4; //@line 30204
   $96 = $ReallocAsyncCtx14 + 12 | 0; //@line 30205
   HEAP32[$96 >> 2] = $10; //@line 30206
   $97 = $ReallocAsyncCtx14 + 16 | 0; //@line 30207
   HEAP32[$97 >> 2] = $12; //@line 30208
   $98 = $ReallocAsyncCtx14 + 20 | 0; //@line 30209
   HEAP32[$98 >> 2] = $14; //@line 30210
   $99 = $ReallocAsyncCtx14 + 24 | 0; //@line 30211
   HEAP32[$99 >> 2] = $16; //@line 30212
   $100 = $ReallocAsyncCtx14 + 28 | 0; //@line 30213
   HEAP32[$100 >> 2] = $24; //@line 30214
   $101 = $ReallocAsyncCtx14 + 32 | 0; //@line 30215
   HEAP32[$101 >> 2] = $28; //@line 30216
   $102 = $ReallocAsyncCtx14 + 36 | 0; //@line 30217
   HEAP32[$102 >> 2] = $8; //@line 30218
   $103 = $ReallocAsyncCtx14 + 40 | 0; //@line 30219
   HEAP32[$103 >> 2] = $30; //@line 30220
   $104 = $ReallocAsyncCtx14 + 44 | 0; //@line 30221
   HEAP32[$104 >> 2] = $32; //@line 30222
   $105 = $ReallocAsyncCtx14 + 48 | 0; //@line 30223
   HEAP32[$105 >> 2] = $34; //@line 30224
   $106 = $ReallocAsyncCtx14 + 52 | 0; //@line 30225
   HEAP32[$106 >> 2] = $36; //@line 30226
   sp = STACKTOP; //@line 30227
   return;
  }
 case 6:
  {
   $$1 = -1018; //@line 30232
   $108 = ___async_retval; //@line 30233
   HEAP32[$108 >> 2] = $$1; //@line 30234
   return;
  }
 case 0:
  {
   $$1 = -1011; //@line 30239
   $108 = ___async_retval; //@line 30240
   HEAP32[$108 >> 2] = $$1; //@line 30241
   return;
  }
 default:
  {
   $$1 = -1002; //@line 30246
   $108 = ___async_retval; //@line 30247
   HEAP32[$108 >> 2] = $$1; //@line 30248
   return;
  }
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$pre$phiZ2D = 0, $$sroa$0$0$copyload = 0, $10 = 0, $101 = 0, $102 = 0, $105 = 0, $113 = 0, $119 = 0, $122 = 0, $13 = 0, $134 = 0, $137 = 0, $16 = 0, $34 = 0, $35 = 0, $57 = 0, $60 = 0, $70 = 0, $72 = 0, $73 = 0, $8 = 0, $86 = 0, $88 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $AsyncCtx32 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 11174
 STACKTOP = STACKTOP + 32 | 0; //@line 11175
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11175
 $$byval_copy = sp + 24 | 0; //@line 11176
 $vararg_buffer3 = sp + 16 | 0; //@line 11177
 $vararg_buffer1 = sp + 8 | 0; //@line 11178
 $vararg_buffer = sp; //@line 11179
 _printf(12967, $vararg_buffer) | 0; //@line 11180
 _printf(12980, $vararg_buffer1) | 0; //@line 11181
 $AsyncCtx13 = _emscripten_alloc_async_context(32, sp) | 0; //@line 11182
 _putchar(10) | 0; //@line 11183
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 358; //@line 11186
  HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 11188
  HEAP32[$AsyncCtx13 + 8 >> 2] = $vararg_buffer; //@line 11190
  HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer1; //@line 11192
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer3; //@line 11194
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer3; //@line 11196
  HEAP32[$AsyncCtx13 + 24 >> 2] = $$byval_copy; //@line 11198
  HEAP32[$AsyncCtx13 + 28 >> 2] = $$byval_copy; //@line 11200
  sp = STACKTOP; //@line 11201
  STACKTOP = sp; //@line 11202
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 11204
 $8 = $0 + 356 | 0; //@line 11205
 $10 = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$8 >> 2] | 0) | 0; //@line 11207
 $$sroa$0$0$copyload = HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) >> 2] | 0; //@line 11210
 $13 = $0 + 360 | 0; //@line 11211
 do {
  if ((HEAP32[$13 >> 2] | 0) == 2) {
   _printf(12967, $vararg_buffer3) | 0; //@line 11216
   _printf(12994, $$byval_copy) | 0; //@line 11217
   $AsyncCtx9 = _emscripten_alloc_async_context(40, sp) | 0; //@line 11218
   _putchar(10) | 0; //@line 11219
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 360; //@line 11222
    HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 11224
    HEAP32[$AsyncCtx9 + 8 >> 2] = $8; //@line 11226
    HEAP32[$AsyncCtx9 + 12 >> 2] = $13; //@line 11228
    HEAP32[$AsyncCtx9 + 16 >> 2] = $$sroa$0$0$copyload; //@line 11230
    HEAP32[$AsyncCtx9 + 20 >> 2] = $vararg_buffer; //@line 11232
    HEAP32[$AsyncCtx9 + 24 >> 2] = $vararg_buffer; //@line 11234
    HEAP32[$AsyncCtx9 + 28 >> 2] = $10; //@line 11236
    HEAP32[$AsyncCtx9 + 32 >> 2] = $vararg_buffer1; //@line 11238
    HEAP32[$AsyncCtx9 + 36 >> 2] = $vararg_buffer1; //@line 11240
    sp = STACKTOP; //@line 11241
    STACKTOP = sp; //@line 11242
    return;
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 11244
   $34 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11246
   HEAP32[$vararg_buffer1 >> 2] = 361; //@line 11247
   HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 11249
   $AsyncCtx35 = _emscripten_alloc_async_context(36, sp) | 0; //@line 11250
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 11251
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 11251
   $35 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($34, $0, $$byval_copy) | 0; //@line 11252
   if (___async) {
    HEAP32[$AsyncCtx35 >> 2] = 362; //@line 11255
    HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 11257
    HEAP32[$AsyncCtx35 + 8 >> 2] = $8; //@line 11259
    HEAP32[$AsyncCtx35 + 12 >> 2] = $13; //@line 11261
    HEAP32[$AsyncCtx35 + 16 >> 2] = $$sroa$0$0$copyload; //@line 11263
    HEAP32[$AsyncCtx35 + 20 >> 2] = $vararg_buffer; //@line 11265
    HEAP32[$AsyncCtx35 + 24 >> 2] = $vararg_buffer; //@line 11267
    HEAP32[$AsyncCtx35 + 28 >> 2] = $10; //@line 11269
    HEAP32[$AsyncCtx35 + 32 >> 2] = $vararg_buffer1; //@line 11271
    sp = STACKTOP; //@line 11272
    STACKTOP = sp; //@line 11273
    return;
   }
   _emscripten_free_async_context($AsyncCtx35 | 0); //@line 11275
   do {
    if (!$35) {
     $AsyncCtx39 = _emscripten_alloc_async_context(36, sp) | 0; //@line 11279
     _mbed_assert_internal(12851, 12860, 217); //@line 11280
     if (___async) {
      HEAP32[$AsyncCtx39 >> 2] = 363; //@line 11283
      HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 11285
      HEAP32[$AsyncCtx39 + 8 >> 2] = $8; //@line 11287
      HEAP32[$AsyncCtx39 + 12 >> 2] = $13; //@line 11289
      HEAP32[$AsyncCtx39 + 16 >> 2] = $$sroa$0$0$copyload; //@line 11291
      HEAP32[$AsyncCtx39 + 20 >> 2] = $vararg_buffer; //@line 11293
      HEAP32[$AsyncCtx39 + 24 >> 2] = $vararg_buffer; //@line 11295
      HEAP32[$AsyncCtx39 + 28 >> 2] = $10; //@line 11297
      HEAP32[$AsyncCtx39 + 32 >> 2] = $vararg_buffer1; //@line 11299
      sp = STACKTOP; //@line 11300
      STACKTOP = sp; //@line 11301
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx39 | 0); //@line 11303
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 11309
  } else {
   $16 = HEAP32[$0 >> 2] | 0; //@line 11311
   $AsyncCtx32 = _emscripten_alloc_async_context(32, sp) | 0; //@line 11312
   __ZN7LoRaPHY18put_radio_to_sleepEv($16); //@line 11313
   if (___async) {
    HEAP32[$AsyncCtx32 >> 2] = 359; //@line 11316
    HEAP32[$AsyncCtx32 + 4 >> 2] = $0; //@line 11318
    HEAP32[$AsyncCtx32 + 8 >> 2] = $8; //@line 11320
    HEAP32[$AsyncCtx32 + 12 >> 2] = $13; //@line 11322
    HEAP32[$AsyncCtx32 + 16 >> 2] = $$sroa$0$0$copyload; //@line 11324
    HEAP32[$AsyncCtx32 + 20 >> 2] = $vararg_buffer; //@line 11326
    HEAP32[$AsyncCtx32 + 24 >> 2] = $vararg_buffer; //@line 11328
    HEAP32[$AsyncCtx32 + 28 >> 2] = $10; //@line 11330
    sp = STACKTOP; //@line 11331
    STACKTOP = sp; //@line 11332
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx32 | 0); //@line 11334
    break;
   }
  }
 } while (0);
 do {
  if (!(HEAP8[$0 + 371 >> 0] | 0)) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 11347
   $101 = $0 + 944 | 0; //@line 11348
   $102 = HEAP8[$101 >> 0] | 0; //@line 11349
   if (!($102 << 24 >> 24)) {
    HEAP8[$101 >> 0] = 1; //@line 11352
    $105 = 1; //@line 11353
   } else {
    $105 = $102; //@line 11355
   }
   HEAP8[$101 >> 0] = $105 | 32; //@line 11358
  } else {
   $57 = HEAP32[$8 >> 2] | 0; //@line 11360
   $60 = HEAP32[$0 + 972 >> 2] | 0; //@line 11363
   $AsyncCtx28 = _emscripten_alloc_async_context(32, sp) | 0; //@line 11364
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($57, $0 + 1036 | 0, $60); //@line 11365
   if (___async) {
    HEAP32[$AsyncCtx28 >> 2] = 364; //@line 11368
    HEAP32[$AsyncCtx28 + 4 >> 2] = $13; //@line 11370
    HEAP32[$AsyncCtx28 + 8 >> 2] = $0; //@line 11372
    HEAP32[$AsyncCtx28 + 12 >> 2] = $8; //@line 11374
    HEAP32[$AsyncCtx28 + 16 >> 2] = $$sroa$0$0$copyload; //@line 11376
    HEAP32[$AsyncCtx28 + 20 >> 2] = $vararg_buffer; //@line 11378
    HEAP32[$AsyncCtx28 + 24 >> 2] = $vararg_buffer; //@line 11380
    HEAP32[$AsyncCtx28 + 28 >> 2] = $10; //@line 11382
    sp = STACKTOP; //@line 11383
    STACKTOP = sp; //@line 11384
    return;
   }
   _emscripten_free_async_context($AsyncCtx28 | 0); //@line 11386
   if ((HEAP32[$13 >> 2] | 0) == 2) {
    $$pre$phiZ2D = $0 + 976 | 0; //@line 11391
   } else {
    $70 = HEAP32[$8 >> 2] | 0; //@line 11393
    $72 = $0 + 976 | 0; //@line 11395
    $73 = HEAP32[$72 >> 2] | 0; //@line 11396
    $AsyncCtx24 = _emscripten_alloc_async_context(36, sp) | 0; //@line 11397
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($70, $0 + 1056 | 0, $73); //@line 11398
    if (___async) {
     HEAP32[$AsyncCtx24 >> 2] = 365; //@line 11401
     HEAP32[$AsyncCtx24 + 4 >> 2] = $13; //@line 11403
     HEAP32[$AsyncCtx24 + 8 >> 2] = $72; //@line 11405
     HEAP32[$AsyncCtx24 + 12 >> 2] = $8; //@line 11407
     HEAP32[$AsyncCtx24 + 16 >> 2] = $0; //@line 11409
     HEAP32[$AsyncCtx24 + 20 >> 2] = $$sroa$0$0$copyload; //@line 11411
     HEAP32[$AsyncCtx24 + 24 >> 2] = $vararg_buffer; //@line 11413
     HEAP32[$AsyncCtx24 + 28 >> 2] = $vararg_buffer; //@line 11415
     HEAP32[$AsyncCtx24 + 32 >> 2] = $10; //@line 11417
     sp = STACKTOP; //@line 11418
     STACKTOP = sp; //@line 11419
     return;
    }
    _emscripten_free_async_context($AsyncCtx24 | 0); //@line 11421
    if ((HEAP32[$13 >> 2] | 0) == 2) {
     $$pre$phiZ2D = $72; //@line 11425
    } else {
     if (!(HEAP8[$0 + 373 >> 0] | 0)) {
      break;
     } else {
      $$pre$phiZ2D = $72; //@line 11433
     }
    }
   }
   $86 = HEAP32[$8 >> 2] | 0; //@line 11437
   $88 = HEAP32[$$pre$phiZ2D >> 2] | 0; //@line 11439
   $91 = (__ZN7LoRaPHY15get_ack_timeoutEv(HEAP32[$0 >> 2] | 0) | 0) + $88 | 0; //@line 11442
   $AsyncCtx20 = _emscripten_alloc_async_context(28, sp) | 0; //@line 11443
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($86, $0 + 1076 | 0, $91); //@line 11444
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 366; //@line 11447
    HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 11449
    HEAP32[$AsyncCtx20 + 8 >> 2] = $$sroa$0$0$copyload; //@line 11451
    HEAP32[$AsyncCtx20 + 12 >> 2] = $vararg_buffer; //@line 11453
    HEAP32[$AsyncCtx20 + 16 >> 2] = $vararg_buffer; //@line 11455
    HEAP32[$AsyncCtx20 + 20 >> 2] = $10; //@line 11457
    HEAP32[$AsyncCtx20 + 24 >> 2] = $8; //@line 11459
    sp = STACKTOP; //@line 11460
    STACKTOP = sp; //@line 11461
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 11463
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 376 >> 0] = ($$sroa$0$0$copyload | 0) == 0 & (HEAP8[$0 + 944 >> 0] & 8) != 0 & 1; //@line 11476
 $113 = HEAP8[$0 + 378 >> 0] | 0; //@line 11478
 HEAP8[$0 + 379 >> 0] = $113; //@line 11480
 HEAP8[$vararg_buffer >> 0] = $113; //@line 11481
 HEAP8[$vararg_buffer + 1 >> 0] = HEAP8[$0 + 372 >> 0] | 0; //@line 11485
 HEAP32[$vararg_buffer + 4 >> 2] = $10; //@line 11487
 $119 = HEAP32[$0 >> 2] | 0; //@line 11488
 $122 = HEAP32[(HEAP32[$119 >> 2] | 0) + 12 >> 2] | 0; //@line 11491
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 11492
 FUNCTION_TABLE_vii[$122 & 31]($119, $vararg_buffer); //@line 11493
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 367; //@line 11496
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11498
  HEAP32[$AsyncCtx + 8 >> 2] = $10; //@line 11500
  HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 11502
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 11504
  sp = STACKTOP; //@line 11505
  STACKTOP = sp; //@line 11506
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11508
 HEAP32[$0 + 980 >> 2] = $10; //@line 11510
 if (!(HEAP8[$0 + 373 >> 0] | 0)) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 11518
  $134 = $0 + 380 | 0; //@line 11519
  HEAP8[$134 >> 0] = (HEAP8[$134 >> 0] | 0) + 1 << 24 >> 24; //@line 11522
 }
 $137 = HEAP32[$8 >> 2] | 0; //@line 11524
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11526
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($137, $0 + 996 | 0, 1); //@line 11527
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 368; //@line 11530
  HEAP32[$AsyncCtx17 + 4 >> 2] = $vararg_buffer; //@line 11532
  sp = STACKTOP; //@line 11533
  STACKTOP = sp; //@line 11534
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx17 | 0); //@line 11536
  STACKTOP = sp; //@line 11537
  return;
 }
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i22 = 0, $$024 = 0, $$05$i = 0, $$06$i = 0, $$1 = 0, $10 = 0, $100 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0.0, $114 = 0.0, $116 = 0, $12 = 0, $120 = 0, $127 = 0, $128 = 0, $132 = 0, $14 = 0, $140 = 0, $22 = 0, $24 = 0, $27 = 0, $30 = 0, $38 = 0, $39 = 0, $42 = 0, $43 = 0, $46 = 0, $55 = 0, $6 = 0, $67 = 0, $70 = 0, $74 = 0, $75 = 0, $85 = 0, $9 = 0, $92 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx4 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18580
 STACKTOP = STACKTOP + 16 | 0; //@line 18581
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18581
 $vararg_buffer1 = sp + 8 | 0; //@line 18582
 $vararg_buffer = sp; //@line 18583
 _printf(12967, $vararg_buffer) | 0; //@line 18584
 _printf(13498, $vararg_buffer1) | 0; //@line 18585
 $AsyncCtx4 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18586
 _putchar(10) | 0; //@line 18587
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 549; //@line 18590
  HEAP32[$AsyncCtx4 + 4 >> 2] = $0; //@line 18592
  HEAP32[$AsyncCtx4 + 8 >> 2] = $vararg_buffer; //@line 18594
  HEAP32[$AsyncCtx4 + 12 >> 2] = $vararg_buffer1; //@line 18596
  HEAP32[$AsyncCtx4 + 16 >> 2] = $1; //@line 18598
  sp = STACKTOP; //@line 18599
  STACKTOP = sp; //@line 18600
  return 0; //@line 18600
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 18602
 $6 = $0 + 968 | 0; //@line 18603
 if (HEAP32[$6 >> 2] | 0) {
  $$1 = -1e3; //@line 18607
  STACKTOP = sp; //@line 18608
  return $$1 | 0; //@line 18608
 }
 $9 = $0 + 264 | 0; //@line 18610
 __ZN11LoRaMacMlme18reset_confirmationEv($9); //@line 18611
 $10 = HEAP32[$1 >> 2] | 0; //@line 18612
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($9) | 0) >> 2] = $10; //@line 18614
 $12 = $0 + 944 | 0; //@line 18615
 $14 = HEAP8[$12 >> 0] | 8; //@line 18617
 HEAP8[$12 >> 0] = $14; //@line 18618
 switch (HEAP32[$1 >> 2] | 0) {
 case 1:
  {
   $$0 = __ZN14LoRaMacCommand15add_mac_commandEhhh($0 + 4 | 0, 2, 0, 0) | 0; //@line 18624
   label = 32; //@line 18625
   break;
  }
 case 0:
  {
   if (HEAP32[$6 >> 2] & 16 | 0) {
    $$1 = -1e3; //@line 18633
    STACKTOP = sp; //@line 18634
    return $$1 | 0; //@line 18634
   }
   $22 = HEAP32[$1 + 4 >> 2] | 0; //@line 18637
   if (!$22) {
    $$1 = -1003; //@line 18640
    STACKTOP = sp; //@line 18641
    return $$1 | 0; //@line 18641
   }
   $24 = $1 + 8 | 0; //@line 18643
   if (!(HEAP32[$24 >> 2] | 0)) {
    $$1 = -1003; //@line 18647
    STACKTOP = sp; //@line 18648
    return $$1 | 0; //@line 18648
   }
   $27 = $1 + 12 | 0; //@line 18650
   if (!(HEAP32[$27 >> 2] | 0)) {
    $$1 = -1003; //@line 18654
    STACKTOP = sp; //@line 18655
    return $$1 | 0; //@line 18655
   }
   $30 = $1 + 16 | 0; //@line 18657
   if (!(HEAP8[$30 >> 0] | 0)) {
    $$1 = -1003; //@line 18661
    STACKTOP = sp; //@line 18662
    return $$1 | 0; //@line 18662
   }
   HEAP32[$0 + 900 >> 2] = $22; //@line 18665
   HEAP32[$0 + 904 >> 2] = HEAP32[$24 >> 2]; //@line 18668
   HEAP32[$0 + 908 >> 2] = HEAP32[$27 >> 2]; //@line 18671
   $38 = HEAP8[$30 >> 0] | 0; //@line 18672
   $39 = $0 + 896 | 0; //@line 18673
   HEAP8[$39 >> 0] = $38; //@line 18674
   $42 = __ZN7LoRaPHY21verify_nb_join_trialsEh(HEAP32[$0 >> 2] | 0, HEAP8[$30 >> 0] | 0) | 0; //@line 18677
   HEAP8[$39 >> 0] = $42 ? $38 : 12; //@line 18679
   $43 = $0 + 897 | 0; //@line 18680
   HEAP8[$43 >> 0] = 0; //@line 18681
   HEAP8[$0 + 372 >> 0] = 0; //@line 18684
   $46 = $0 + 956 | 0; //@line 18685
   HEAP32[$46 >> 2] = 0; //@line 18686
   HEAP32[$0 + 960 >> 2] = 0; //@line 18688
   HEAP32[$0 + 964 >> 2] = 0; //@line 18690
   HEAP8[$0 + 380 >> 0] = 0; //@line 18692
   HEAP8[$0 + 894 >> 0] = 1; //@line 18694
   HEAP8[$0 + 895 >> 0] = 1; //@line 18696
   HEAP8[$0 + 377 >> 0] = 0; //@line 18698
   HEAP8[$0 + 1152 >> 0] = 0; //@line 18700
   HEAP16[$0 + 1154 >> 1] = 1; //@line 18702
   $55 = $0 + 4 | 0; //@line 18703
   __ZN14LoRaMacCommand20clear_command_bufferEv($55); //@line 18704
   __ZN14LoRaMacCommand19clear_repeat_bufferEv($55); //@line 18705
   __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($55); //@line 18706
   HEAP8[$0 + 371 >> 0] = 1; //@line 18708
   __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $0 + 360 | 0, 0); //@line 18710
   HEAP8[$0 + 373 >> 0] = 0; //@line 18712
   HEAP8[$0 + 374 >> 0] = 0; //@line 18714
   $$05$i = HEAP32[$0 + 1208 >> 2] | 0; //@line 18716
   if ($$05$i | 0) {
    $$06$i = $$05$i; //@line 18719
    do {
     HEAP32[$$06$i + 36 >> 2] = 0; //@line 18722
     $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 18724
    } while (($$06$i | 0) != 0);
   }
   HEAP8[$0 + 378 >> 0] = 0; //@line 18734
   HEAP8[$0 + 379 >> 0] = 0; //@line 18736
   $67 = HEAP32[$0 >> 2] | 0; //@line 18737
   $70 = HEAP32[(HEAP32[$67 >> 2] | 0) + 52 >> 2] | 0; //@line 18740
   $74 = (HEAPU8[$43 >> 0] | 0) + 1 & 255; //@line 18744
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 18745
   $75 = FUNCTION_TABLE_iii[$70 & 31]($67, $74) | 0; //@line 18746
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 550; //@line 18749
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 18751
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 18753
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 18755
    HEAP32[$AsyncCtx + 16 >> 2] = $46; //@line 18757
    HEAP32[$AsyncCtx + 20 >> 2] = $12; //@line 18759
    sp = STACKTOP; //@line 18760
    STACKTOP = sp; //@line 18761
    return 0; //@line 18761
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 18763
   HEAP8[$0 + 1097 >> 0] = $75; //@line 18765
   HEAP8[$vararg_buffer >> 0] = 0; //@line 18766
   HEAP8[$vararg_buffer1 >> 0] = HEAP8[$0 + 1156 >> 0] << 7; //@line 18770
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18771
   $85 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $vararg_buffer, $vararg_buffer1, 0, 0, 0) | 0; //@line 18772
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 551; //@line 18775
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 18777
    HEAP32[$AsyncCtx7 + 8 >> 2] = $46; //@line 18779
    HEAP32[$AsyncCtx7 + 12 >> 2] = $vararg_buffer1; //@line 18781
    HEAP32[$AsyncCtx7 + 16 >> 2] = $vararg_buffer; //@line 18783
    HEAP32[$AsyncCtx7 + 20 >> 2] = $12; //@line 18785
    sp = STACKTOP; //@line 18786
    STACKTOP = sp; //@line 18787
    return 0; //@line 18787
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 18789
   do {
    if (!$85) {
     $92 = $0 + 288 | 0; //@line 18793
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($92) | 0) + 11 >> 0] = 0; //@line 18796
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($92) | 0) + 10 >> 0] = 0; //@line 18799
     $97 = HEAP32[$46 >> 2] | 0; //@line 18800
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($92) | 0) + 16 >> 2] = $97; //@line 18803
     $AsyncCtx27 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18804
     $100 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 18805
     if (___async) {
      HEAP32[$AsyncCtx27 >> 2] = 552; //@line 18808
      HEAP32[$AsyncCtx27 + 4 >> 2] = $vararg_buffer1; //@line 18810
      HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer; //@line 18812
      HEAP32[$AsyncCtx27 + 12 >> 2] = $12; //@line 18814
      HEAP32[$AsyncCtx27 + 16 >> 2] = $0; //@line 18816
      sp = STACKTOP; //@line 18817
      STACKTOP = sp; //@line 18818
      return 0; //@line 18818
     } else {
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 18820
      $$0$i22 = $100; //@line 18821
      break;
     }
    } else {
     $$0$i22 = $85; //@line 18825
    }
   } while (0);
   $$0 = $$0$i22; //@line 18828
   label = 32; //@line 18829
   break;
  }
 case 2:
  {
   $106 = HEAP8[$0 + 378 >> 0] | 0; //@line 18834
   $108 = HEAP8[$0 + 1097 >> 0] | 0; //@line 18836
   $110 = HEAP8[$0 + 1096 >> 0] | 0; //@line 18838
   $112 = +HEAPF32[$0 + 1144 >> 2]; //@line 18840
   $114 = +HEAPF32[$0 + 1148 >> 2]; //@line 18842
   $116 = HEAP16[$1 + 4 >> 1] | 0; //@line 18844
   $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18845
   __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($9, $106, $108, $110, $112, $114, $116); //@line 18846
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 553; //@line 18849
    HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 18851
    HEAP32[$AsyncCtx23 + 8 >> 2] = $6; //@line 18853
    sp = STACKTOP; //@line 18854
    STACKTOP = sp; //@line 18855
    return 0; //@line 18855
   }
   _emscripten_free_async_context($AsyncCtx23 | 0); //@line 18857
   $120 = HEAP32[$0 + 356 >> 2] | 0; //@line 18859
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18861
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($120, $0 + 996 | 0, 1e3); //@line 18862
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 554; //@line 18865
    HEAP32[$AsyncCtx15 + 4 >> 2] = $6; //@line 18867
    sp = STACKTOP; //@line 18868
    STACKTOP = sp; //@line 18869
    return 0; //@line 18869
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 18871
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 1; //@line 18874
   $$1 = 0; //@line 18875
   STACKTOP = sp; //@line 18876
   return $$1 | 0; //@line 18876
  }
 case 3:
  {
   $127 = HEAP8[$1 + 12 >> 0] | 0; //@line 18882
   $128 = HEAP16[$1 + 4 >> 1] | 0; //@line 18883
   $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18884
   __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($9, 0, 0, $127, 0.0, 0.0, $128); //@line 18885
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 555; //@line 18888
    HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 18890
    HEAP32[$AsyncCtx19 + 8 >> 2] = $6; //@line 18892
    sp = STACKTOP; //@line 18893
    STACKTOP = sp; //@line 18894
    return 0; //@line 18894
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 18896
   $132 = HEAP32[$0 + 356 >> 2] | 0; //@line 18898
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18900
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($132, $0 + 996 | 0, 1e3); //@line 18901
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 556; //@line 18904
    HEAP32[$AsyncCtx11 + 4 >> 2] = $6; //@line 18906
    sp = STACKTOP; //@line 18907
    STACKTOP = sp; //@line 18908
    return 0; //@line 18908
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 18910
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 1; //@line 18913
   $$1 = 0; //@line 18914
   STACKTOP = sp; //@line 18915
   return $$1 | 0; //@line 18915
  }
 default:
  {
   $$024 = -1002; //@line 18919
   $140 = $14; //@line 18919
  }
 }
 do {
  if ((label | 0) == 32) {
   if (!$$0) {
    $$1 = 0; //@line 18926
    STACKTOP = sp; //@line 18927
    return $$1 | 0; //@line 18927
   } else {
    $$024 = $$0; //@line 18930
    $140 = HEAP8[$12 >> 0] | 0; //@line 18930
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 373 >> 0] = 0; //@line 18936
 HEAP8[$12 >> 0] = $140 & -9; //@line 18938
 $$1 = $$024; //@line 18939
 STACKTOP = sp; //@line 18940
 return $$1 | 0; //@line 18940
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$080 = 0, $100 = 0, $118 = 0, $12 = 0, $123 = 0, $128 = 0, $133 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $36 = 0, $4 = 0, $40 = 0, $44 = 0, $55 = 0, $60 = 0, $61 = 0, $70 = 0, $73 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $89 = 0, $94 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 22712
 L1 : do {
  if (!$1) {
   $$080 = -1003; //@line 22716
  } else {
   $4 = HEAP32[$0 >> 2] | 0; //@line 22718
   if (!$4) {
    $$080 = -1003; //@line 22721
   } else {
    do {
     switch (HEAP32[$1 >> 2] | 0) {
     case 0:
      {
       $8 = HEAP32[$1 + 4 >> 2] | 0; //@line 22728
       HEAP32[$2 >> 2] = $8; //@line 22729
       switch ($8 | 0) {
       case 0:
        {
         $AsyncCtx19 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22732
         __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 22733
         if (___async) {
          HEAP32[$AsyncCtx19 >> 2] = 606; //@line 22736
          sp = STACKTOP; //@line 22737
          return 0; //@line 22738
         } else {
          _emscripten_free_async_context($AsyncCtx19 | 0); //@line 22740
          $$080 = 0; //@line 22741
          break L1;
         }
         break;
        }
       case 2:
        {
         break;
        }
       default:
        {
         $$080 = 0; //@line 22750
         break L1;
        }
       }
       HEAP8[$2 + 13 >> 0] = 0; //@line 22755
       $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 22756
       __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 22757
       if (___async) {
        HEAP32[$AsyncCtx15 >> 2] = 607; //@line 22760
        HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 22762
        HEAP32[$AsyncCtx15 + 8 >> 2] = $2; //@line 22764
        sp = STACKTOP; //@line 22765
        return 0; //@line 22766
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 22768
       $12 = HEAP32[$0 >> 2] | 0; //@line 22769
       $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 22772
       $17 = HEAP8[$2 + 776 >> 0] | 0; //@line 22774
       $19 = HEAP8[$2 + 744 >> 0] | 0; //@line 22776
       $21 = HEAP32[$2 + 740 >> 2] | 0; //@line 22778
       $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 22780
       FUNCTION_TABLE_viiiii[$15 & 7]($12, $17, $19, $21, $2 + 824 | 0); //@line 22781
       if (___async) {
        HEAP32[$AsyncCtx >> 2] = 608; //@line 22784
        sp = STACKTOP; //@line 22785
        return 0; //@line 22786
       } else {
        _emscripten_free_async_context($AsyncCtx | 0); //@line 22788
        $$080 = 0; //@line 22789
        break L1;
       }
       break;
      }
     case 1:
      {
       HEAP8[$2 + 12 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 22798
       $$080 = 0; //@line 22799
       break L1;
       break;
      }
     case 2:
      {
       HEAP8[$2 + 796 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 22807
       $$080 = 0; //@line 22808
       break L1;
       break;
      }
     case 3:
      {
       HEAP32[$2 + 588 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 22816
       $$080 = 0; //@line 22817
       break L1;
       break;
      }
     case 4:
      {
       HEAP32[$2 + 592 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 22825
       $$080 = 0; //@line 22826
       break L1;
       break;
      }
     case 5:
      {
       $36 = HEAP32[$1 + 4 >> 2] | 0; //@line 22832
       if (!$36) {
        $$080 = -1003; //@line 22835
        break L1;
       }
       dest = $2 + 552 | 0; //@line 22839
       src = $36; //@line 22839
       stop = dest + 16 | 0; //@line 22839
       do {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 22839
        dest = dest + 1 | 0; //@line 22839
        src = src + 1 | 0; //@line 22839
       } while ((dest | 0) < (stop | 0));
       $$080 = 0; //@line 22840
       break L1;
       break;
      }
     case 6:
      {
       $40 = HEAP32[$1 + 4 >> 2] | 0; //@line 22846
       if (!$40) {
        $$080 = -1003; //@line 22849
        break L1;
       }
       dest = $2 + 568 | 0; //@line 22853
       src = $40; //@line 22853
       stop = dest + 16 | 0; //@line 22853
       do {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 22853
        dest = dest + 1 | 0; //@line 22853
        src = src + 1 | 0; //@line 22853
       } while ((dest | 0) < (stop | 0));
       $$080 = 0; //@line 22854
       break L1;
       break;
      }
     case 7:
      {
       $44 = HEAP8[$1 + 4 >> 0] | 0; //@line 22860
       HEAP8[$2 + 8 >> 0] = $44; //@line 22863
       $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22864
       __ZN7LoRaPHY25setup_public_network_modeEb($4, $44 << 24 >> 24 != 0); //@line 22865
       if (___async) {
        HEAP32[$AsyncCtx7 >> 2] = 609; //@line 22868
        sp = STACKTOP; //@line 22869
        return 0; //@line 22870
       } else {
        _emscripten_free_async_context($AsyncCtx7 | 0); //@line 22872
        $$080 = 0; //@line 22873
        break L1;
       }
       break;
      }
     case 8:
      {
       HEAP8[$2 + 9 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 22882
       $$080 = 0; //@line 22883
       break L1;
       break;
      }
     case 10:
      {
       if (!(__ZN7LoRaPHY18verify_rx_datarateEh($4, HEAP8[$1 + 8 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 22892
        break L1;
       }
       $55 = $1 + 4 | 0; //@line 22897
       $60 = HEAP32[$55 + 4 >> 2] | 0; //@line 22902
       $61 = $2 + 772 | 0; //@line 22903
       HEAP32[$61 >> 2] = HEAP32[$55 >> 2]; //@line 22905
       HEAP32[$61 + 4 >> 2] = $60; //@line 22908
       if ((HEAP32[$2 >> 2] | 0) != 2) {
        $$080 = 0; //@line 22912
        break L1;
       }
       if (!(HEAP8[$2 + 12 >> 0] | 0)) {
        $$080 = 0; //@line 22919
        break L1;
       }
       $70 = HEAP32[$0 >> 2] | 0; //@line 22922
       $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 22923
       __ZN7LoRaPHY18put_radio_to_sleepEv($70); //@line 22924
       if (___async) {
        HEAP32[$AsyncCtx11 >> 2] = 610; //@line 22927
        HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 22929
        HEAP32[$AsyncCtx11 + 8 >> 2] = $2; //@line 22931
        sp = STACKTOP; //@line 22932
        return 0; //@line 22933
       }
       _emscripten_free_async_context($AsyncCtx11 | 0); //@line 22935
       $73 = HEAP32[$0 >> 2] | 0; //@line 22936
       $76 = HEAP32[(HEAP32[$73 >> 2] | 0) + 28 >> 2] | 0; //@line 22939
       $78 = HEAP8[$2 + 776 >> 0] | 0; //@line 22941
       $80 = HEAP8[$2 + 744 >> 0] | 0; //@line 22943
       $82 = HEAP32[$2 + 740 >> 2] | 0; //@line 22945
       $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22947
       FUNCTION_TABLE_viiiii[$76 & 7]($73, $78, $80, $82, $2 + 824 | 0); //@line 22948
       if (___async) {
        HEAP32[$AsyncCtx3 >> 2] = 611; //@line 22951
        sp = STACKTOP; //@line 22952
        return 0; //@line 22953
       } else {
        _emscripten_free_async_context($AsyncCtx3 | 0); //@line 22955
        $$080 = 0; //@line 22956
        break L1;
       }
       break;
      }
     case 11:
      {
       if (!(__ZN7LoRaPHY18verify_rx_datarateEh($4, HEAP8[$1 + 8 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 22966
        break L1;
       }
       $89 = $1 + 4 | 0; //@line 22971
       $94 = HEAP32[$89 + 4 >> 2] | 0; //@line 22976
       $95 = $2 + 772 | 0; //@line 22977
       HEAP32[$95 >> 2] = HEAP32[$89 >> 2]; //@line 22979
       HEAP32[$95 + 4 >> 2] = $94; //@line 22982
       $$080 = 0; //@line 22983
       break L1;
       break;
      }
     case 29:
      {
       HEAP32[$2 + 788 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 22991
       $$080 = 0; //@line 22992
       break L1;
       break;
      }
     case 28:
      {
       HEAP8[$2 + 744 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 23000
       $$080 = 0; //@line 23001
       break L1;
       break;
      }
     case 14:
      {
       $100 = HEAP8[$1 + 4 >> 0] | 0; //@line 23007
       if (($100 + -1 & 255) >= 15) {
        $$080 = -1003; //@line 23011
        break L1;
       }
       HEAP8[$2 + 768 >> 0] = $100; //@line 23015
       $$080 = 0; //@line 23016
       break L1;
       break;
      }
     case 15:
      {
       HEAP32[$2 + 748 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23024
       $$080 = 0; //@line 23025
       break L1;
       break;
      }
     case 16:
      {
       HEAP32[$2 + 752 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23033
       $$080 = 0; //@line 23034
       break L1;
       break;
      }
     case 17:
      {
       HEAP32[$2 + 756 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23042
       $$080 = 0; //@line 23043
       break L1;
       break;
      }
     case 18:
      {
       HEAP32[$2 + 760 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23051
       $$080 = 0; //@line 23052
       break L1;
       break;
      }
     case 19:
      {
       HEAP32[$2 + 764 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23060
       $$080 = 0; //@line 23061
       break L1;
       break;
      }
     case 20:
      {
       $118 = $1 + 4 | 0; //@line 23066
       if (!(__ZN7LoRaPHY18verify_tx_datarateEhb($4, HEAP8[$118 >> 0] | 0, 1) | 0)) {
        $$080 = -1003; //@line 23070
        break L1;
       }
       HEAP8[$2 + 737 >> 0] = HEAP8[$118 >> 0] | 0; //@line 23075
       $$080 = 0; //@line 23076
       break L1;
       break;
      }
     case 21:
      {
       $123 = $1 + 4 | 0; //@line 23081
       if (!(__ZN7LoRaPHY18verify_tx_datarateEhb($4, HEAP8[$123 >> 0] | 0, 0) | 0)) {
        $$080 = -1003; //@line 23085
        break L1;
       }
       HEAP8[$2 + 737 >> 0] = HEAP8[$123 >> 0] | 0; //@line 23090
       $$080 = 0; //@line 23091
       break L1;
       break;
      }
     case 23:
      {
       $128 = $1 + 4 | 0; //@line 23096
       if (!(__ZN7LoRaPHY15verify_tx_powerEh($4, HEAP8[$128 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 23100
        break L1;
       }
       HEAP8[$2 + 736 >> 0] = HEAP8[$128 >> 0] | 0; //@line 23105
       $$080 = 0; //@line 23106
       break L1;
       break;
      }
     case 22:
      {
       $133 = $1 + 4 | 0; //@line 23111
       if (!(__ZN7LoRaPHY15verify_tx_powerEh($4, HEAP8[$133 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 23115
        break L1;
       }
       HEAP8[$2 + 736 >> 0] = HEAP8[$133 >> 0] | 0; //@line 23120
       $$080 = 0; //@line 23121
       break L1;
       break;
      }
     case 24:
      {
       HEAP32[$2 + 596 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23129
       $$080 = 0; //@line 23130
       break L1;
       break;
      }
     case 25:
      {
       HEAP32[$2 + 600 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23138
       $$080 = 0; //@line 23139
       break L1;
       break;
      }
     case 27:
      {
       HEAP32[$2 + 740 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23147
       $$080 = 0; //@line 23148
       break L1;
       break;
      }
     default:
      {
       $$080 = -1002; //@line 23153
       break L1;
      }
     }
    } while (0);
   }
  }
 } while (0);
 return $$080 | 0; //@line 23161
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $37 = 0, $4 = 0, $42 = 0, $43 = 0, $46 = 0, $49 = 0, $53 = 0, $55 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $67 = 0, $74 = 0, $75 = 0, $79 = 0, $81 = 0, $86 = 0, $87 = 0, $90 = 0, $93 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx48 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx63 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 6260
 STACKTOP = STACKTOP + 96 | 0; //@line 6261
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 6261
 $vararg_buffer9 = sp + 40 | 0; //@line 6262
 $vararg_buffer7 = sp + 32 | 0; //@line 6263
 $vararg_buffer5 = sp + 24 | 0; //@line 6264
 $vararg_buffer3 = sp + 16 | 0; //@line 6265
 $2 = sp + 80 | 0; //@line 6268
 $3 = sp + 64 | 0; //@line 6269
 $4 = sp + 48 | 0; //@line 6270
 if (!$1) {
  _printf(11887, sp) | 0; //@line 6273
  _printf(12579, sp + 8 | 0) | 0; //@line 6274
  $AsyncCtx39 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6275
  _putchar(10) | 0; //@line 6276
  if (___async) {
   HEAP32[$AsyncCtx39 >> 2] = 195; //@line 6279
   sp = STACKTOP; //@line 6280
   STACKTOP = sp; //@line 6281
   return;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 6283
  $AsyncCtx63 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6284
  _mbed_assert_internal(14513, 11935, 766); //@line 6285
  if (___async) {
   HEAP32[$AsyncCtx63 >> 2] = 196; //@line 6288
   sp = STACKTOP; //@line 6289
   STACKTOP = sp; //@line 6290
   return;
  }
  _emscripten_free_async_context($AsyncCtx63 | 0); //@line 6292
  STACKTOP = sp; //@line 6293
  return;
 }
 _printf(12139, $vararg_buffer3) | 0; //@line 6295
 $6 = $1 + 4 | 0; //@line 6296
 HEAP32[$vararg_buffer5 >> 2] = HEAP32[$6 >> 2]; //@line 6298
 _printf(12614, $vararg_buffer5) | 0; //@line 6299
 $AsyncCtx35 = _emscripten_alloc_async_context(44, sp) | 0; //@line 6300
 _putchar(10) | 0; //@line 6301
 if (___async) {
  HEAP32[$AsyncCtx35 >> 2] = 197; //@line 6304
  HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 6306
  HEAP32[$AsyncCtx35 + 8 >> 2] = $4; //@line 6308
  HEAP32[$AsyncCtx35 + 12 >> 2] = $1; //@line 6310
  HEAP32[$AsyncCtx35 + 16 >> 2] = $3; //@line 6312
  HEAP32[$AsyncCtx35 + 20 >> 2] = $2; //@line 6314
  HEAP32[$AsyncCtx35 + 24 >> 2] = $6; //@line 6316
  HEAP32[$AsyncCtx35 + 28 >> 2] = $vararg_buffer7; //@line 6318
  HEAP32[$AsyncCtx35 + 32 >> 2] = $vararg_buffer7; //@line 6320
  HEAP32[$AsyncCtx35 + 36 >> 2] = $vararg_buffer9; //@line 6322
  HEAP32[$AsyncCtx35 + 40 >> 2] = $vararg_buffer9; //@line 6324
  sp = STACKTOP; //@line 6325
  STACKTOP = sp; //@line 6326
  return;
 }
 _emscripten_free_async_context($AsyncCtx35 | 0); //@line 6328
 if (!(HEAP32[$6 >> 2] | 0)) {
  HEAP32[$0 + 1956 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 6335
  HEAP8[$0 + 1964 >> 0] = 0; //@line 6337
  $74 = $0 + 1892 | 0; //@line 6338
  $75 = HEAP32[$74 >> 2] | 0; //@line 6339
  if (!$75) {
   STACKTOP = sp; //@line 6342
   return;
  }
  $79 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6346
  $81 = HEAP32[$75 + 4 >> 2] | 0; //@line 6348
  $AsyncCtx23 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6349
  FUNCTION_TABLE_vii[$81 & 31]($4, $0 + 1880 | 0); //@line 6350
  if (___async) {
   HEAP32[$AsyncCtx23 >> 2] = 207; //@line 6353
   HEAP32[$AsyncCtx23 + 4 >> 2] = $74; //@line 6355
   HEAP32[$AsyncCtx23 + 8 >> 2] = $4; //@line 6357
   HEAP32[$AsyncCtx23 + 12 >> 2] = $79; //@line 6359
   HEAP32[$AsyncCtx23 + 16 >> 2] = $4; //@line 6361
   sp = STACKTOP; //@line 6362
   STACKTOP = sp; //@line 6363
   return;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6365
  $86 = $4 + 12 | 0; //@line 6367
  HEAP32[$86 >> 2] = HEAP32[$74 >> 2]; //@line 6368
  $AsyncCtx42 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6369
  $87 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($79, $4, 2) | 0; //@line 6370
  if (___async) {
   HEAP32[$AsyncCtx42 >> 2] = 208; //@line 6373
   HEAP32[$AsyncCtx42 + 4 >> 2] = $86; //@line 6375
   HEAP32[$AsyncCtx42 + 8 >> 2] = $4; //@line 6377
   sp = STACKTOP; //@line 6378
   STACKTOP = sp; //@line 6379
   return;
  }
  _emscripten_free_async_context($AsyncCtx42 | 0); //@line 6381
  $90 = HEAP32[$86 >> 2] | 0; //@line 6382
  do {
   if ($90 | 0) {
    $93 = HEAP32[$90 + 8 >> 2] | 0; //@line 6387
    $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6388
    FUNCTION_TABLE_vi[$93 & 1023]($4); //@line 6389
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 209; //@line 6392
     HEAP32[$AsyncCtx27 + 4 >> 2] = $87; //@line 6394
     sp = STACKTOP; //@line 6395
     STACKTOP = sp; //@line 6396
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6398
     break;
    }
   }
  } while (0);
  if ($87 | 0) {
   STACKTOP = sp; //@line 6405
   return;
  }
  $AsyncCtx52 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6407
  _mbed_assert_internal(12851, 11935, 821); //@line 6408
  if (___async) {
   HEAP32[$AsyncCtx52 >> 2] = 210; //@line 6411
   sp = STACKTOP; //@line 6412
   STACKTOP = sp; //@line 6413
   return;
  }
  _emscripten_free_async_context($AsyncCtx52 | 0); //@line 6415
  STACKTOP = sp; //@line 6416
  return;
 }
 HEAP8[$0 + 1964 >> 0] = 0; //@line 6419
 _memset($0 + 1975 | 0, 0, 255) | 0; //@line 6421
 HEAP16[$0 + 2230 >> 1] = 255; //@line 6423
 _printf(11887, $vararg_buffer7) | 0; //@line 6424
 HEAP32[$vararg_buffer9 >> 2] = HEAP32[$6 >> 2]; //@line 6426
 _printf(12646, $vararg_buffer9) | 0; //@line 6427
 $AsyncCtx31 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6428
 _putchar(10) | 0; //@line 6429
 if (___async) {
  HEAP32[$AsyncCtx31 >> 2] = 198; //@line 6432
  HEAP32[$AsyncCtx31 + 4 >> 2] = $3; //@line 6434
  HEAP32[$AsyncCtx31 + 8 >> 2] = $2; //@line 6436
  HEAP32[$AsyncCtx31 + 12 >> 2] = $0; //@line 6438
  HEAP32[$AsyncCtx31 + 16 >> 2] = $6; //@line 6440
  sp = STACKTOP; //@line 6441
  STACKTOP = sp; //@line 6442
  return;
 }
 _emscripten_free_async_context($AsyncCtx31 | 0); //@line 6444
 $30 = $0 + 1880 | 0; //@line 6447
 $31 = $0 + 1892 | 0; //@line 6448
 $32 = HEAP32[$31 >> 2] | 0; //@line 6449
 $33 = ($32 | 0) != 0; //@line 6450
 if ((HEAP32[$6 >> 2] | 0) == 2) {
  if (!$33) {
   STACKTOP = sp; //@line 6453
   return;
  }
  $35 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6456
  $37 = HEAP32[$32 + 4 >> 2] | 0; //@line 6458
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 6459
  FUNCTION_TABLE_vii[$37 & 31]($2, $30); //@line 6460
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 199; //@line 6463
   HEAP32[$AsyncCtx + 4 >> 2] = $31; //@line 6465
   HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6467
   HEAP32[$AsyncCtx + 12 >> 2] = $35; //@line 6469
   HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 6471
   sp = STACKTOP; //@line 6472
   STACKTOP = sp; //@line 6473
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6475
  $42 = $2 + 12 | 0; //@line 6477
  HEAP32[$42 >> 2] = HEAP32[$31 >> 2]; //@line 6478
  $AsyncCtx48 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6479
  $43 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($35, $2, 3) | 0; //@line 6480
  if (___async) {
   HEAP32[$AsyncCtx48 >> 2] = 200; //@line 6483
   HEAP32[$AsyncCtx48 + 4 >> 2] = $42; //@line 6485
   HEAP32[$AsyncCtx48 + 8 >> 2] = $2; //@line 6487
   sp = STACKTOP; //@line 6488
   STACKTOP = sp; //@line 6489
   return;
  }
  _emscripten_free_async_context($AsyncCtx48 | 0); //@line 6491
  $46 = HEAP32[$42 >> 2] | 0; //@line 6492
  do {
   if ($46 | 0) {
    $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 6497
    $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6498
    FUNCTION_TABLE_vi[$49 & 1023]($2); //@line 6499
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 201; //@line 6502
     HEAP32[$AsyncCtx13 + 4 >> 2] = $43; //@line 6504
     sp = STACKTOP; //@line 6505
     STACKTOP = sp; //@line 6506
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx13 | 0); //@line 6508
     break;
    }
   }
  } while (0);
  if ($43 | 0) {
   STACKTOP = sp; //@line 6515
   return;
  }
  $AsyncCtx60 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6517
  _mbed_assert_internal(12851, 11935, 786); //@line 6518
  if (___async) {
   HEAP32[$AsyncCtx60 >> 2] = 202; //@line 6521
   sp = STACKTOP; //@line 6522
   STACKTOP = sp; //@line 6523
   return;
  }
  _emscripten_free_async_context($AsyncCtx60 | 0); //@line 6525
  STACKTOP = sp; //@line 6526
  return;
 } else {
  if (!$33) {
   STACKTOP = sp; //@line 6529
   return;
  }
  $53 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6532
  $55 = HEAP32[$32 + 4 >> 2] | 0; //@line 6534
  $AsyncCtx16 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6535
  FUNCTION_TABLE_vii[$55 & 31]($3, $30); //@line 6536
  if (___async) {
   HEAP32[$AsyncCtx16 >> 2] = 203; //@line 6539
   HEAP32[$AsyncCtx16 + 4 >> 2] = $31; //@line 6541
   HEAP32[$AsyncCtx16 + 8 >> 2] = $3; //@line 6543
   HEAP32[$AsyncCtx16 + 12 >> 2] = $53; //@line 6545
   HEAP32[$AsyncCtx16 + 16 >> 2] = $3; //@line 6547
   sp = STACKTOP; //@line 6548
   STACKTOP = sp; //@line 6549
   return;
  }
  _emscripten_free_async_context($AsyncCtx16 | 0); //@line 6551
  $60 = $3 + 12 | 0; //@line 6553
  HEAP32[$60 >> 2] = HEAP32[$31 >> 2]; //@line 6554
  $AsyncCtx45 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6555
  $61 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($53, $3, 4) | 0; //@line 6556
  if (___async) {
   HEAP32[$AsyncCtx45 >> 2] = 204; //@line 6559
   HEAP32[$AsyncCtx45 + 4 >> 2] = $60; //@line 6561
   HEAP32[$AsyncCtx45 + 8 >> 2] = $3; //@line 6563
   sp = STACKTOP; //@line 6564
   STACKTOP = sp; //@line 6565
   return;
  }
  _emscripten_free_async_context($AsyncCtx45 | 0); //@line 6567
  $64 = HEAP32[$60 >> 2] | 0; //@line 6568
  do {
   if ($64 | 0) {
    $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 6573
    $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6574
    FUNCTION_TABLE_vi[$67 & 1023]($3); //@line 6575
    if (___async) {
     HEAP32[$AsyncCtx20 >> 2] = 205; //@line 6578
     HEAP32[$AsyncCtx20 + 4 >> 2] = $61; //@line 6580
     sp = STACKTOP; //@line 6581
     STACKTOP = sp; //@line 6582
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx20 | 0); //@line 6584
     break;
    }
   }
  } while (0);
  if ($61 | 0) {
   STACKTOP = sp; //@line 6591
   return;
  }
  $AsyncCtx56 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6593
  _mbed_assert_internal(12851, 11935, 797); //@line 6594
  if (___async) {
   HEAP32[$AsyncCtx56 >> 2] = 206; //@line 6597
   sp = STACKTOP; //@line 6598
   STACKTOP = sp; //@line 6599
   return;
  }
  _emscripten_free_async_context($AsyncCtx56 | 0); //@line 6601
  STACKTOP = sp; //@line 6602
  return;
 }
}
function _mbedtls_gcm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$i = 0, $108 = 0, $110 = 0, $115 = 0, $120 = 0, $125 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $141 = 0, $143 = 0, $148 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $166 = 0, $171 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $187 = 0, $189 = 0, $194 = 0, $198 = 0, $199 = 0, $201 = 0, $205 = 0, $206 = 0, $208 = 0, $212 = 0, $213 = 0, $215 = 0, $219 = 0, $220 = 0, $222 = 0, $226 = 0, $227 = 0, $229 = 0, $233 = 0, $234 = 0, $236 = 0, $240 = 0, $241 = 0, $243 = 0, $247 = 0, $248 = 0, $250 = 0, $257 = 0, $26 = 0, $264 = 0, $271 = 0, $278 = 0, $285 = 0, $292 = 0, $299 = 0, $306 = 0, $313 = 0, $32 = 0, $320 = 0, $327 = 0, $334 = 0, $341 = 0, $348 = 0, $4 = 0, $5 = 0, $54 = 0, $6 = 0, $72 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 3603
 STACKTOP = STACKTOP + 32 | 0; //@line 3604
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 3604
 $4 = sp + 8 | 0; //@line 3605
 $5 = sp; //@line 3606
 $6 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 3607
 if (!$6) {
  $$0 = -20; //@line 3610
  STACKTOP = sp; //@line 3611
  return $$0 | 0; //@line 3611
 }
 if ((HEAP32[$6 + 24 >> 2] | 0) != 16) {
  $$0 = -20; //@line 3617
  STACKTOP = sp; //@line 3618
  return $$0 | 0; //@line 3618
 }
 $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 3620
 _mbedtls_cipher_free($0); //@line 3621
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 690; //@line 3624
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 3626
  HEAP32[$AsyncCtx11 + 8 >> 2] = $6; //@line 3628
  HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 3630
  HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 3632
  HEAP32[$AsyncCtx11 + 20 >> 2] = $4; //@line 3634
  HEAP32[$AsyncCtx11 + 24 >> 2] = $5; //@line 3636
  HEAP32[$AsyncCtx11 + 28 >> 2] = $0; //@line 3638
  sp = STACKTOP; //@line 3639
  STACKTOP = sp; //@line 3640
  return 0; //@line 3640
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3642
 $AsyncCtx7 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3643
 $18 = _mbedtls_cipher_setup($0, $6) | 0; //@line 3644
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 691; //@line 3647
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 3649
  HEAP32[$AsyncCtx7 + 8 >> 2] = $2; //@line 3651
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 3653
  HEAP32[$AsyncCtx7 + 16 >> 2] = $4; //@line 3655
  HEAP32[$AsyncCtx7 + 20 >> 2] = $5; //@line 3657
  HEAP32[$AsyncCtx7 + 24 >> 2] = $0; //@line 3659
  sp = STACKTOP; //@line 3660
  STACKTOP = sp; //@line 3661
  return 0; //@line 3661
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 3663
 if ($18 | 0) {
  $$0 = $18; //@line 3666
  STACKTOP = sp; //@line 3667
  return $$0 | 0; //@line 3667
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3669
 $26 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 3670
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 692; //@line 3673
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 3675
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 3677
  HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 3679
  HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 3681
  sp = STACKTOP; //@line 3682
  STACKTOP = sp; //@line 3683
  return 0; //@line 3683
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3685
 if ($26 | 0) {
  $$0 = $26; //@line 3688
  STACKTOP = sp; //@line 3689
  return $$0 | 0; //@line 3689
 }
 HEAP32[$5 >> 2] = 0; //@line 3691
 dest = $4; //@line 3692
 stop = dest + 16 | 0; //@line 3692
 do {
  HEAP8[dest >> 0] = 0; //@line 3692
  dest = dest + 1 | 0; //@line 3692
 } while ((dest | 0) < (stop | 0));
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 3693
 $32 = _mbedtls_cipher_update($0, $4, 16, $4, $5) | 0; //@line 3694
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 693; //@line 3697
  HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 3699
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 3701
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 3703
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 3705
  sp = STACKTOP; //@line 3706
  STACKTOP = sp; //@line 3707
  return 0; //@line 3707
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3709
 if (!$32) {
  $54 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[$4 >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 3728
  $72 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 3746
  $90 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 3764
  $108 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 3782
  $110 = $0 + 136 | 0; //@line 3784
  HEAP32[$110 >> 2] = $108; //@line 3786
  HEAP32[$110 + 4 >> 2] = $90; //@line 3789
  $115 = $0 + 264 | 0; //@line 3791
  HEAP32[$115 >> 2] = $72; //@line 3793
  HEAP32[$115 + 4 >> 2] = $54; //@line 3796
  $120 = $0 + 200 | 0; //@line 3798
  HEAP32[$120 >> 2] = 0; //@line 3800
  HEAP32[$120 + 4 >> 2] = 0; //@line 3803
  $125 = $0 + 72 | 0; //@line 3805
  HEAP32[$125 >> 2] = 0; //@line 3807
  HEAP32[$125 + 4 >> 2] = 0; //@line 3810
  $130 = _i64Subtract(0, 0, $108 & 1 | 0, 0) | 0; //@line 3812
  $132 = _bitshift64Shl($72 | 0, 0, 63) | 0; //@line 3814
  $133 = tempRet0; //@line 3815
  $134 = _bitshift64Lshr($108 | 0, $90 | 0, 1) | 0; //@line 3816
  $136 = $134 | $132; //@line 3818
  $137 = tempRet0 | $133; //@line 3819
  $138 = _bitshift64Lshr($72 | 0, $54 | 0, 1) | 0; //@line 3820
  $139 = tempRet0; //@line 3821
  $141 = $130 & -520093696 ^ $139; //@line 3823
  $143 = $0 + 104 | 0; //@line 3825
  HEAP32[$143 >> 2] = $136; //@line 3827
  HEAP32[$143 + 4 >> 2] = $137; //@line 3830
  $148 = $0 + 232 | 0; //@line 3832
  HEAP32[$148 >> 2] = $138; //@line 3834
  HEAP32[$148 + 4 >> 2] = $141; //@line 3837
  $153 = _i64Subtract(0, 0, $134 & 1 | 0, 0) | 0; //@line 3839
  $155 = _bitshift64Shl($138 | 0, $139 | 0, 63) | 0; //@line 3841
  $156 = tempRet0; //@line 3842
  $157 = _bitshift64Lshr($136 | 0, $137 | 0, 1) | 0; //@line 3843
  $159 = $157 | $155; //@line 3845
  $160 = tempRet0 | $156; //@line 3846
  $161 = _bitshift64Lshr($138 | 0, $141 | 0, 1) | 0; //@line 3847
  $162 = tempRet0; //@line 3848
  $164 = $153 & -520093696 ^ $162; //@line 3850
  $166 = $0 + 88 | 0; //@line 3852
  HEAP32[$166 >> 2] = $159; //@line 3854
  HEAP32[$166 + 4 >> 2] = $160; //@line 3857
  $171 = $0 + 216 | 0; //@line 3859
  HEAP32[$171 >> 2] = $161; //@line 3861
  HEAP32[$171 + 4 >> 2] = $164; //@line 3864
  $176 = _i64Subtract(0, 0, $157 & 1 | 0, 0) | 0; //@line 3866
  $178 = _bitshift64Shl($161 | 0, $162 | 0, 63) | 0; //@line 3868
  $179 = tempRet0; //@line 3869
  $180 = _bitshift64Lshr($159 | 0, $160 | 0, 1) | 0; //@line 3870
  $182 = $178 | $180; //@line 3872
  $183 = $179 | tempRet0; //@line 3873
  $184 = _bitshift64Lshr($161 | 0, $164 | 0, 1) | 0; //@line 3874
  $187 = $176 & -520093696 ^ tempRet0; //@line 3877
  $189 = $0 + 80 | 0; //@line 3879
  HEAP32[$189 >> 2] = $182; //@line 3881
  HEAP32[$189 + 4 >> 2] = $183; //@line 3884
  $194 = $0 + 208 | 0; //@line 3886
  HEAP32[$194 >> 2] = $184; //@line 3888
  HEAP32[$194 + 4 >> 2] = $187; //@line 3891
  $198 = $184 ^ $161; //@line 3892
  $199 = $187 ^ $164; //@line 3893
  $201 = $0 + 224 | 0; //@line 3895
  HEAP32[$201 >> 2] = $198; //@line 3897
  HEAP32[$201 + 4 >> 2] = $199; //@line 3900
  $205 = $182 ^ $159; //@line 3901
  $206 = $183 ^ $160; //@line 3902
  $208 = $0 + 96 | 0; //@line 3904
  HEAP32[$208 >> 2] = $205; //@line 3906
  HEAP32[$208 + 4 >> 2] = $206; //@line 3909
  $212 = $184 ^ $138; //@line 3910
  $213 = $187 ^ $141; //@line 3911
  $215 = $0 + 240 | 0; //@line 3913
  HEAP32[$215 >> 2] = $212; //@line 3915
  HEAP32[$215 + 4 >> 2] = $213; //@line 3918
  $219 = $182 ^ $136; //@line 3919
  $220 = $183 ^ $137; //@line 3920
  $222 = $0 + 112 | 0; //@line 3922
  HEAP32[$222 >> 2] = $219; //@line 3924
  HEAP32[$222 + 4 >> 2] = $220; //@line 3927
  $226 = $161 ^ $138; //@line 3928
  $227 = $164 ^ $141; //@line 3929
  $229 = $0 + 248 | 0; //@line 3931
  HEAP32[$229 >> 2] = $226; //@line 3933
  HEAP32[$229 + 4 >> 2] = $227; //@line 3936
  $233 = $159 ^ $136; //@line 3937
  $234 = $160 ^ $137; //@line 3938
  $236 = $0 + 120 | 0; //@line 3940
  HEAP32[$236 >> 2] = $233; //@line 3942
  HEAP32[$236 + 4 >> 2] = $234; //@line 3945
  $240 = $198 ^ $138; //@line 3946
  $241 = $199 ^ $141; //@line 3947
  $243 = $0 + 256 | 0; //@line 3949
  HEAP32[$243 >> 2] = $240; //@line 3951
  HEAP32[$243 + 4 >> 2] = $241; //@line 3954
  $247 = $205 ^ $136; //@line 3955
  $248 = $206 ^ $137; //@line 3956
  $250 = $0 + 128 | 0; //@line 3958
  HEAP32[$250 >> 2] = $247; //@line 3960
  HEAP32[$250 + 4 >> 2] = $248; //@line 3963
  $257 = $0 + 272 | 0; //@line 3967
  HEAP32[$257 >> 2] = $184 ^ $72; //@line 3969
  HEAP32[$257 + 4 >> 2] = $187 ^ $54; //@line 3972
  $264 = $0 + 144 | 0; //@line 3976
  HEAP32[$264 >> 2] = $182 ^ $108; //@line 3978
  HEAP32[$264 + 4 >> 2] = $183 ^ $90; //@line 3981
  $271 = $0 + 280 | 0; //@line 3985
  HEAP32[$271 >> 2] = $161 ^ $72; //@line 3987
  HEAP32[$271 + 4 >> 2] = $164 ^ $54; //@line 3990
  $278 = $0 + 152 | 0; //@line 3994
  HEAP32[$278 >> 2] = $159 ^ $108; //@line 3996
  HEAP32[$278 + 4 >> 2] = $160 ^ $90; //@line 3999
  $285 = $0 + 288 | 0; //@line 4003
  HEAP32[$285 >> 2] = $198 ^ $72; //@line 4005
  HEAP32[$285 + 4 >> 2] = $199 ^ $54; //@line 4008
  $292 = $0 + 160 | 0; //@line 4012
  HEAP32[$292 >> 2] = $205 ^ $108; //@line 4014
  HEAP32[$292 + 4 >> 2] = $206 ^ $90; //@line 4017
  $299 = $0 + 296 | 0; //@line 4021
  HEAP32[$299 >> 2] = $138 ^ $72; //@line 4023
  HEAP32[$299 + 4 >> 2] = $141 ^ $54; //@line 4026
  $306 = $0 + 168 | 0; //@line 4030
  HEAP32[$306 >> 2] = $136 ^ $108; //@line 4032
  HEAP32[$306 + 4 >> 2] = $137 ^ $90; //@line 4035
  $313 = $0 + 304 | 0; //@line 4039
  HEAP32[$313 >> 2] = $212 ^ $72; //@line 4041
  HEAP32[$313 + 4 >> 2] = $213 ^ $54; //@line 4044
  $320 = $0 + 176 | 0; //@line 4048
  HEAP32[$320 >> 2] = $219 ^ $108; //@line 4050
  HEAP32[$320 + 4 >> 2] = $220 ^ $90; //@line 4053
  $327 = $0 + 312 | 0; //@line 4057
  HEAP32[$327 >> 2] = $226 ^ $72; //@line 4059
  HEAP32[$327 + 4 >> 2] = $227 ^ $54; //@line 4062
  $334 = $0 + 184 | 0; //@line 4066
  HEAP32[$334 >> 2] = $233 ^ $108; //@line 4068
  HEAP32[$334 + 4 >> 2] = $234 ^ $90; //@line 4071
  $341 = $0 + 320 | 0; //@line 4075
  HEAP32[$341 >> 2] = $240 ^ $72; //@line 4077
  HEAP32[$341 + 4 >> 2] = $241 ^ $54; //@line 4080
  $348 = $0 + 192 | 0; //@line 4084
  HEAP32[$348 >> 2] = $247 ^ $108; //@line 4086
  HEAP32[$348 + 4 >> 2] = $248 ^ $90; //@line 4089
  $$0$i = 0; //@line 4090
 } else {
  $$0$i = $32; //@line 4092
 }
 $$0 = $$0$i; //@line 4094
 STACKTOP = sp; //@line 4095
 return $$0 | 0; //@line 4095
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 37607
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 37608
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 37609
 $d_sroa_0_0_extract_trunc = $b$0; //@line 37610
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 37611
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 37612
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 37614
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 37617
    HEAP32[$rem + 4 >> 2] = 0; //@line 37618
   }
   $_0$1 = 0; //@line 37620
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 37621
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 37622
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 37625
    $_0$0 = 0; //@line 37626
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 37627
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 37629
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 37630
   $_0$1 = 0; //@line 37631
   $_0$0 = 0; //@line 37632
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 37633
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 37636
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 37641
     HEAP32[$rem + 4 >> 2] = 0; //@line 37642
    }
    $_0$1 = 0; //@line 37644
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 37645
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 37646
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 37650
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 37651
    }
    $_0$1 = 0; //@line 37653
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 37654
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 37655
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 37657
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 37660
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 37661
    }
    $_0$1 = 0; //@line 37663
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 37664
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 37665
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 37668
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 37670
    $58 = 31 - $51 | 0; //@line 37671
    $sr_1_ph = $57; //@line 37672
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 37673
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 37674
    $q_sroa_0_1_ph = 0; //@line 37675
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 37676
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 37680
    $_0$0 = 0; //@line 37681
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 37682
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 37684
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 37685
   $_0$1 = 0; //@line 37686
   $_0$0 = 0; //@line 37687
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 37688
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 37692
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 37694
     $126 = 31 - $119 | 0; //@line 37695
     $130 = $119 - 31 >> 31; //@line 37696
     $sr_1_ph = $125; //@line 37697
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 37698
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 37699
     $q_sroa_0_1_ph = 0; //@line 37700
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 37701
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 37705
     $_0$0 = 0; //@line 37706
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 37707
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 37709
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 37710
    $_0$1 = 0; //@line 37711
    $_0$0 = 0; //@line 37712
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 37713
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 37715
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 37718
    $89 = 64 - $88 | 0; //@line 37719
    $91 = 32 - $88 | 0; //@line 37720
    $92 = $91 >> 31; //@line 37721
    $95 = $88 - 32 | 0; //@line 37722
    $105 = $95 >> 31; //@line 37723
    $sr_1_ph = $88; //@line 37724
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 37725
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 37726
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 37727
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 37728
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 37732
    HEAP32[$rem + 4 >> 2] = 0; //@line 37733
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 37736
    $_0$0 = $a$0 | 0 | 0; //@line 37737
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 37738
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 37740
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 37741
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 37742
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 37743
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 37748
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 37749
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 37750
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 37751
  $carry_0_lcssa$1 = 0; //@line 37752
  $carry_0_lcssa$0 = 0; //@line 37753
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 37755
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 37756
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 37757
  $137$1 = tempRet0; //@line 37758
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 37759
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 37760
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 37761
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 37762
  $sr_1202 = $sr_1_ph; //@line 37763
  $carry_0203 = 0; //@line 37764
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 37766
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 37767
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 37768
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 37769
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 37770
   $150$1 = tempRet0; //@line 37771
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 37772
   $carry_0203 = $151$0 & 1; //@line 37773
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 37775
   $r_sroa_1_1200 = tempRet0; //@line 37776
   $sr_1202 = $sr_1202 - 1 | 0; //@line 37777
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 37789
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 37790
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 37791
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 37792
  $carry_0_lcssa$1 = 0; //@line 37793
  $carry_0_lcssa$0 = $carry_0203; //@line 37794
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 37796
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 37797
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 37800
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 37801
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 37803
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 37804
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 37805
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15678
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 15684
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 15693
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 15698
      $19 = $1 + 44 | 0; //@line 15699
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 15708
      $26 = $1 + 52 | 0; //@line 15709
      $27 = $1 + 53 | 0; //@line 15710
      $28 = $1 + 54 | 0; //@line 15711
      $29 = $0 + 8 | 0; //@line 15712
      $30 = $1 + 24 | 0; //@line 15713
      $$081$off0 = 0; //@line 15714
      $$084 = $0 + 16 | 0; //@line 15714
      $$085$off0 = 0; //@line 15714
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 15718
        label = 20; //@line 15719
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 15722
       HEAP8[$27 >> 0] = 0; //@line 15723
       $AsyncCtx15 = _emscripten_alloc_async_context(56, sp) | 0; //@line 15724
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 15725
       if (___async) {
        label = 12; //@line 15728
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 15731
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 15735
        label = 20; //@line 15736
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 15743
         $$186$off0 = $$085$off0; //@line 15743
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 15752
           label = 20; //@line 15753
           break L10;
          } else {
           $$182$off0 = 1; //@line 15756
           $$186$off0 = $$085$off0; //@line 15756
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 15763
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 15770
          break L10;
         } else {
          $$182$off0 = 1; //@line 15773
          $$186$off0 = 1; //@line 15773
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 15778
       $$084 = $$084 + 8 | 0; //@line 15778
       $$085$off0 = $$186$off0; //@line 15778
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 801; //@line 15781
       HEAP32[$AsyncCtx15 + 4 >> 2] = $28; //@line 15783
       HEAP32[$AsyncCtx15 + 8 >> 2] = $19; //@line 15785
       HEAP8[$AsyncCtx15 + 12 >> 0] = $$085$off0 & 1; //@line 15788
       HEAP8[$AsyncCtx15 + 13 >> 0] = $$081$off0 & 1; //@line 15791
       HEAP32[$AsyncCtx15 + 16 >> 2] = $$084; //@line 15793
       HEAP32[$AsyncCtx15 + 20 >> 2] = $2; //@line 15795
       HEAP32[$AsyncCtx15 + 24 >> 2] = $13; //@line 15797
       HEAP32[$AsyncCtx15 + 28 >> 2] = $1; //@line 15799
       HEAP32[$AsyncCtx15 + 32 >> 2] = $30; //@line 15801
       HEAP32[$AsyncCtx15 + 36 >> 2] = $27; //@line 15803
       HEAP32[$AsyncCtx15 + 40 >> 2] = $26; //@line 15805
       HEAP8[$AsyncCtx15 + 44 >> 0] = $4 & 1; //@line 15808
       HEAP32[$AsyncCtx15 + 48 >> 2] = $25; //@line 15810
       HEAP32[$AsyncCtx15 + 52 >> 2] = $29; //@line 15812
       sp = STACKTOP; //@line 15813
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 15819
         $61 = $1 + 40 | 0; //@line 15820
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 15823
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 15831
           if ($$283$off0) {
            label = 25; //@line 15833
            break;
           } else {
            $69 = 4; //@line 15836
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 15843
        } else {
         $69 = 4; //@line 15845
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 15850
      }
      HEAP32[$19 >> 2] = $69; //@line 15852
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 15861
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 15866
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 15867
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15868
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 15869
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 802; //@line 15872
    HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 15874
    HEAP32[$AsyncCtx11 + 8 >> 2] = $2; //@line 15876
    HEAP32[$AsyncCtx11 + 12 >> 2] = $3; //@line 15878
    HEAP8[$AsyncCtx11 + 16 >> 0] = $4 & 1; //@line 15881
    HEAP32[$AsyncCtx11 + 20 >> 2] = $0; //@line 15883
    HEAP32[$AsyncCtx11 + 24 >> 2] = $73; //@line 15885
    HEAP32[$AsyncCtx11 + 28 >> 2] = $72; //@line 15887
    sp = STACKTOP; //@line 15888
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15891
   $81 = $0 + 24 | 0; //@line 15892
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 15896
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 15900
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 15907
       $$2 = $81; //@line 15908
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 15920
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 15921
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 15926
        $136 = $$2 + 8 | 0; //@line 15927
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 15930
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 805; //@line 15935
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 15937
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 15939
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 15941
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 15943
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 15945
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 15947
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 15949
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 15952
       sp = STACKTOP; //@line 15953
       return;
      }
      $104 = $1 + 24 | 0; //@line 15956
      $105 = $1 + 54 | 0; //@line 15957
      $$1 = $81; //@line 15958
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 15974
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 15975
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15980
       $122 = $$1 + 8 | 0; //@line 15981
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 15984
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 804; //@line 15989
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 15991
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 15993
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 15995
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 15997
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 15999
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 16001
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 16003
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 16005
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 16008
      sp = STACKTOP; //@line 16009
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 16013
    $$0 = $81; //@line 16014
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16021
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 16022
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 16027
     $100 = $$0 + 8 | 0; //@line 16028
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 16031
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 803; //@line 16036
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 16038
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 16040
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 16042
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 16044
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 16046
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 16048
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 16051
    sp = STACKTOP; //@line 16052
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $16 = 0, $2 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $38 = 0, $39 = 0, $42 = 0, $45 = 0, $51 = 0, $52 = 0, $56 = 0, $58 = 0, $64 = 0, $66 = 0, $68 = 0, $69 = 0, $72 = 0, $75 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx34 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx53 = 0, $AsyncCtx56 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 6916
 STACKTOP = STACKTOP + 80 | 0; //@line 6917
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 6917
 $vararg_buffer9 = sp + 40 | 0; //@line 6918
 $vararg_buffer7 = sp + 32 | 0; //@line 6919
 $vararg_buffer5 = sp + 24 | 0; //@line 6920
 $vararg_buffer3 = sp + 16 | 0; //@line 6921
 $2 = sp + 64 | 0; //@line 6924
 $3 = sp + 48 | 0; //@line 6925
 if (!$1) {
  _printf(11887, sp) | 0; //@line 6928
  _printf(11900, sp + 8 | 0) | 0; //@line 6929
  $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6930
  _putchar(10) | 0; //@line 6931
  if (___async) {
   HEAP32[$AsyncCtx31 >> 2] = 222; //@line 6934
   sp = STACKTOP; //@line 6935
   STACKTOP = sp; //@line 6936
   return;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 6938
  $AsyncCtx56 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6939
  _mbed_assert_internal(14513, 11935, 694); //@line 6940
  if (___async) {
   HEAP32[$AsyncCtx56 >> 2] = 223; //@line 6943
   sp = STACKTOP; //@line 6944
   STACKTOP = sp; //@line 6945
   return;
  }
  _emscripten_free_async_context($AsyncCtx56 | 0); //@line 6947
  STACKTOP = sp; //@line 6948
  return;
 }
 switch (HEAP32[$1 >> 2] | 0) {
 case 0:
  {
   $9 = $0 + 1876 | 0; //@line 6956
   if (!(HEAP32[$1 + 4 >> 2] | 0)) {
    HEAP32[$9 >> 2] = 4; //@line 6958
    $AsyncCtx45 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6959
    $10 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 6960
    if (___async) {
     HEAP32[$AsyncCtx45 >> 2] = 224; //@line 6963
     HEAP32[$AsyncCtx45 + 4 >> 2] = $vararg_buffer3; //@line 6965
     HEAP32[$AsyncCtx45 + 8 >> 2] = $vararg_buffer3; //@line 6967
     HEAP32[$AsyncCtx45 + 12 >> 2] = $vararg_buffer5; //@line 6969
     HEAP32[$AsyncCtx45 + 16 >> 2] = $vararg_buffer5; //@line 6971
     sp = STACKTOP; //@line 6972
     STACKTOP = sp; //@line 6973
     return;
    }
    _emscripten_free_async_context($AsyncCtx45 | 0); //@line 6975
    if (!$10) {
     STACKTOP = sp; //@line 6978
     return;
    }
    _printf(11887, $vararg_buffer3) | 0; //@line 6980
    _printf(12033, $vararg_buffer5) | 0; //@line 6981
    $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6982
    _putchar(10) | 0; //@line 6983
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 225; //@line 6986
     sp = STACKTOP; //@line 6987
     STACKTOP = sp; //@line 6988
     return;
    }
    _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6990
    STACKTOP = sp; //@line 6991
    return;
   }
   HEAP32[$9 >> 2] = 6; //@line 6993
   $AsyncCtx41 = _emscripten_alloc_async_context(28, sp) | 0; //@line 6994
   $16 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 6995
   if (___async) {
    HEAP32[$AsyncCtx41 >> 2] = 226; //@line 6998
    HEAP32[$AsyncCtx41 + 4 >> 2] = $2; //@line 7000
    HEAP32[$AsyncCtx41 + 8 >> 2] = $0; //@line 7002
    HEAP32[$AsyncCtx41 + 12 >> 2] = $vararg_buffer7; //@line 7004
    HEAP32[$AsyncCtx41 + 16 >> 2] = $vararg_buffer7; //@line 7006
    HEAP32[$AsyncCtx41 + 20 >> 2] = $vararg_buffer9; //@line 7008
    HEAP32[$AsyncCtx41 + 24 >> 2] = $vararg_buffer9; //@line 7010
    sp = STACKTOP; //@line 7011
    STACKTOP = sp; //@line 7012
    return;
   }
   _emscripten_free_async_context($AsyncCtx41 | 0); //@line 7014
   do {
    if (($16 | 0) != -1018) {
     _printf(11887, $vararg_buffer7) | 0; //@line 7018
     _printf(12085, $vararg_buffer9) | 0; //@line 7019
     $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7020
     _putchar(10) | 0; //@line 7021
     if (___async) {
      HEAP32[$AsyncCtx23 >> 2] = 227; //@line 7024
      HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 7026
      HEAP32[$AsyncCtx23 + 8 >> 2] = $2; //@line 7028
      sp = STACKTOP; //@line 7029
      STACKTOP = sp; //@line 7030
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx23 | 0); //@line 7032
      break;
     }
    }
   } while (0);
   $26 = $0 + 1892 | 0; //@line 7037
   $27 = HEAP32[$26 >> 2] | 0; //@line 7038
   if (!$27) {
    STACKTOP = sp; //@line 7041
    return;
   }
   $31 = HEAP32[$0 + 2288 >> 2] | 0; //@line 7045
   $33 = HEAP32[$27 + 4 >> 2] | 0; //@line 7047
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 7048
   FUNCTION_TABLE_vii[$33 & 31]($2, $0 + 1880 | 0); //@line 7049
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 228; //@line 7052
    HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 7054
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 7056
    HEAP32[$AsyncCtx + 12 >> 2] = $31; //@line 7058
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 7060
    sp = STACKTOP; //@line 7061
    STACKTOP = sp; //@line 7062
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7064
   $38 = $2 + 12 | 0; //@line 7066
   HEAP32[$38 >> 2] = HEAP32[$26 >> 2]; //@line 7067
   $AsyncCtx37 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7068
   $39 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($31, $2, 10) | 0; //@line 7069
   if (___async) {
    HEAP32[$AsyncCtx37 >> 2] = 229; //@line 7072
    HEAP32[$AsyncCtx37 + 4 >> 2] = $38; //@line 7074
    HEAP32[$AsyncCtx37 + 8 >> 2] = $2; //@line 7076
    sp = STACKTOP; //@line 7077
    STACKTOP = sp; //@line 7078
    return;
   }
   _emscripten_free_async_context($AsyncCtx37 | 0); //@line 7080
   $42 = HEAP32[$38 >> 2] | 0; //@line 7081
   do {
    if ($42 | 0) {
     $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 7086
     $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7087
     FUNCTION_TABLE_vi[$45 & 1023]($2); //@line 7088
     if (___async) {
      HEAP32[$AsyncCtx12 >> 2] = 230; //@line 7091
      HEAP32[$AsyncCtx12 + 4 >> 2] = $39; //@line 7093
      sp = STACKTOP; //@line 7094
      STACKTOP = sp; //@line 7095
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx12 | 0); //@line 7097
      break;
     }
    }
   } while (0);
   if ($39 | 0) {
    STACKTOP = sp; //@line 7104
    return;
   }
   $AsyncCtx53 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7106
   _mbed_assert_internal(12851, 11935, 715); //@line 7107
   if (___async) {
    HEAP32[$AsyncCtx53 >> 2] = 231; //@line 7110
    sp = STACKTOP; //@line 7111
    STACKTOP = sp; //@line 7112
    return;
   }
   _emscripten_free_async_context($AsyncCtx53 | 0); //@line 7114
   STACKTOP = sp; //@line 7115
   return;
  }
 case 1:
  {
   if (HEAP32[$1 + 4 >> 2] | 0) {
    STACKTOP = sp; //@line 7123
    return;
   }
   $51 = $0 + 1908 | 0; //@line 7125
   $52 = HEAP32[$51 >> 2] | 0; //@line 7126
   if (!$52) {
    STACKTOP = sp; //@line 7129
    return;
   }
   $56 = HEAP32[$0 + 2288 >> 2] | 0; //@line 7133
   $58 = HEAP32[$52 + 4 >> 2] | 0; //@line 7135
   $AsyncCtx15 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7136
   FUNCTION_TABLE_vii[$58 & 31]($3, $0 + 1896 | 0); //@line 7137
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 232; //@line 7140
    HEAP32[$AsyncCtx15 + 4 >> 2] = $51; //@line 7142
    HEAP32[$AsyncCtx15 + 8 >> 2] = $3; //@line 7144
    HEAP32[$AsyncCtx15 + 12 >> 2] = $1; //@line 7146
    HEAP32[$AsyncCtx15 + 16 >> 2] = $56; //@line 7148
    HEAP32[$AsyncCtx15 + 20 >> 2] = $3; //@line 7150
    sp = STACKTOP; //@line 7151
    STACKTOP = sp; //@line 7152
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7154
   $64 = $3 + 12 | 0; //@line 7156
   HEAP32[$64 >> 2] = HEAP32[$51 >> 2]; //@line 7157
   $66 = HEAP8[$1 + 12 >> 0] | 0; //@line 7159
   $68 = HEAP8[$1 + 13 >> 0] | 0; //@line 7161
   $AsyncCtx34 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7162
   $69 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($56, $3, $66, $68) | 0; //@line 7163
   if (___async) {
    HEAP32[$AsyncCtx34 >> 2] = 233; //@line 7166
    HEAP32[$AsyncCtx34 + 4 >> 2] = $64; //@line 7168
    HEAP32[$AsyncCtx34 + 8 >> 2] = $3; //@line 7170
    sp = STACKTOP; //@line 7171
    STACKTOP = sp; //@line 7172
    return;
   }
   _emscripten_free_async_context($AsyncCtx34 | 0); //@line 7174
   $72 = HEAP32[$64 >> 2] | 0; //@line 7175
   do {
    if ($72 | 0) {
     $75 = HEAP32[$72 + 8 >> 2] | 0; //@line 7180
     $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7181
     FUNCTION_TABLE_vi[$75 & 1023]($3); //@line 7182
     if (___async) {
      HEAP32[$AsyncCtx19 >> 2] = 234; //@line 7185
      HEAP32[$AsyncCtx19 + 4 >> 2] = $69; //@line 7187
      sp = STACKTOP; //@line 7188
      STACKTOP = sp; //@line 7189
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx19 | 0); //@line 7191
      break;
     }
    }
   } while (0);
   if ($69 | 0) {
    STACKTOP = sp; //@line 7198
    return;
   }
   $AsyncCtx49 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7200
   _mbed_assert_internal(12851, 11935, 737); //@line 7201
   if (___async) {
    HEAP32[$AsyncCtx49 >> 2] = 235; //@line 7204
    sp = STACKTOP; //@line 7205
    STACKTOP = sp; //@line 7206
    return;
   }
   _emscripten_free_async_context($AsyncCtx49 | 0); //@line 7208
   STACKTOP = sp; //@line 7209
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 7213
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 var $106 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $47 = 0, $49 = 0, $62 = 0, $64 = 0, $77 = 0, $79 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 3423
 HEAP32[$0 >> 2] = 560; //@line 3424
 $19 = $0 + 4 | 0; //@line 3425
 HEAP32[$19 >> 2] = 0; //@line 3426
 HEAP32[$19 + 4 >> 2] = 0; //@line 3426
 HEAP32[$19 + 8 >> 2] = 0; //@line 3426
 HEAP32[$19 + 12 >> 2] = 0; //@line 3426
 HEAP32[$19 + 16 >> 2] = 0; //@line 3426
 HEAP32[$19 + 20 >> 2] = 0; //@line 3426
 _gpio_init_out_ex($19, $4, 1); //@line 3427
 $20 = $0 + 28 | 0; //@line 3428
 HEAP32[$20 >> 2] = 0; //@line 3429
 HEAP32[$20 + 4 >> 2] = 0; //@line 3429
 HEAP32[$20 + 8 >> 2] = 0; //@line 3429
 HEAP32[$20 + 12 >> 2] = 0; //@line 3429
 HEAP32[$20 + 16 >> 2] = 0; //@line 3429
 HEAP32[$20 + 20 >> 2] = 0; //@line 3429
 _gpio_init_in($20, $5); //@line 3430
 __ZN4mbed11InterruptInC2E7PinName($0 + 52 | 0, $6); //@line 3432
 __ZN4mbed11InterruptInC2E7PinName($0 + 124 | 0, $7); //@line 3434
 __ZN4mbed11InterruptInC2E7PinName($0 + 196 | 0, $8); //@line 3436
 __ZN4mbed11InterruptInC2E7PinName($0 + 268 | 0, $9); //@line 3438
 __ZN4mbed11InterruptInC2E7PinName($0 + 340 | 0, $10); //@line 3440
 __ZN4mbed11InterruptInC2E7PinName($0 + 412 | 0, $11); //@line 3442
 $27 = $0 + 484 | 0; //@line 3443
 HEAP32[$27 >> 2] = 0; //@line 3444
 HEAP32[$27 + 4 >> 2] = 0; //@line 3444
 HEAP32[$27 + 8 >> 2] = 0; //@line 3444
 HEAP32[$27 + 12 >> 2] = 0; //@line 3444
 HEAP32[$27 + 16 >> 2] = 0; //@line 3444
 HEAP32[$27 + 20 >> 2] = 0; //@line 3444
 _gpio_init_out_ex($27, $12, 0); //@line 3445
 $28 = $0 + 508 | 0; //@line 3446
 HEAP32[$28 >> 2] = 0; //@line 3447
 HEAP32[$28 + 4 >> 2] = 0; //@line 3447
 HEAP32[$28 + 8 >> 2] = 0; //@line 3447
 HEAP32[$28 + 12 >> 2] = 0; //@line 3447
 HEAP32[$28 + 16 >> 2] = 0; //@line 3447
 HEAP32[$28 + 20 >> 2] = 0; //@line 3447
 _gpio_init_out_ex($28, $13, 0); //@line 3448
 $29 = $0 + 532 | 0; //@line 3449
 HEAP32[$29 >> 2] = 0; //@line 3450
 HEAP32[$29 + 4 >> 2] = 0; //@line 3450
 HEAP32[$29 + 8 >> 2] = 0; //@line 3450
 HEAP32[$29 + 12 >> 2] = 0; //@line 3450
 HEAP32[$29 + 16 >> 2] = 0; //@line 3450
 HEAP32[$29 + 20 >> 2] = 0; //@line 3450
 _gpio_init_out_ex($29, $14, 0); //@line 3451
 $30 = $0 + 556 | 0; //@line 3452
 HEAP32[$30 >> 2] = 0; //@line 3453
 HEAP32[$30 + 4 >> 2] = 0; //@line 3453
 HEAP32[$30 + 8 >> 2] = 0; //@line 3453
 HEAP32[$30 + 12 >> 2] = 0; //@line 3453
 HEAP32[$30 + 16 >> 2] = 0; //@line 3453
 HEAP32[$30 + 20 >> 2] = 0; //@line 3453
 _gpio_init_out_ex($30, $15, 0); //@line 3454
 $31 = $0 + 580 | 0; //@line 3455
 HEAP32[$31 >> 2] = 0; //@line 3456
 HEAP32[$31 + 4 >> 2] = 0; //@line 3456
 HEAP32[$31 + 8 >> 2] = 0; //@line 3456
 HEAP32[$31 + 12 >> 2] = 0; //@line 3456
 HEAP32[$31 + 16 >> 2] = 0; //@line 3456
 HEAP32[$31 + 20 >> 2] = 0; //@line 3456
 _gpio_init_inout($31, $16, 0, 0, 0); //@line 3457
 $32 = $0 + 604 | 0; //@line 3458
 HEAP32[$32 >> 2] = 0; //@line 3459
 HEAP32[$32 + 4 >> 2] = 0; //@line 3459
 HEAP32[$32 + 8 >> 2] = 0; //@line 3459
 HEAP32[$32 + 12 >> 2] = 0; //@line 3459
 HEAP32[$32 + 16 >> 2] = 0; //@line 3459
 HEAP32[$32 + 20 >> 2] = 0; //@line 3459
 _gpio_init_out($32, $17); //@line 3460
 $33 = $0 + 628 | 0; //@line 3461
 HEAP32[$33 >> 2] = 0; //@line 3462
 HEAP32[$33 + 4 >> 2] = 0; //@line 3462
 HEAP32[$33 + 8 >> 2] = 0; //@line 3462
 HEAP32[$33 + 12 >> 2] = 0; //@line 3462
 HEAP32[$33 + 16 >> 2] = 0; //@line 3462
 HEAP32[$33 + 20 >> 2] = 0; //@line 3462
 _gpio_init_out($33, $18); //@line 3463
 $34 = $0 + 1048 | 0; //@line 3464
 $AsyncCtx11 = _emscripten_alloc_async_context(52, sp) | 0; //@line 3465
 __ZN4mbed10TimerEventC2Ev($34); //@line 3466
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 148; //@line 3469
  HEAP32[$AsyncCtx11 + 4 >> 2] = $34; //@line 3471
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 3473
  HEAP32[$AsyncCtx11 + 12 >> 2] = $16; //@line 3475
  HEAP32[$AsyncCtx11 + 16 >> 2] = $17; //@line 3477
  HEAP32[$AsyncCtx11 + 20 >> 2] = $12; //@line 3479
  HEAP32[$AsyncCtx11 + 24 >> 2] = $13; //@line 3481
  HEAP32[$AsyncCtx11 + 28 >> 2] = $15; //@line 3483
  HEAP32[$AsyncCtx11 + 32 >> 2] = $14; //@line 3485
  HEAP32[$AsyncCtx11 + 36 >> 2] = $18; //@line 3487
  HEAP32[$AsyncCtx11 + 40 >> 2] = $10; //@line 3489
  HEAP32[$AsyncCtx11 + 44 >> 2] = $11; //@line 3491
  HEAP32[$AsyncCtx11 + 48 >> 2] = $33; //@line 3493
  sp = STACKTOP; //@line 3494
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3497
 $47 = $0 + 1088 | 0; //@line 3498
 HEAP32[$47 >> 2] = 0; //@line 3499
 HEAP32[$47 + 4 >> 2] = 0; //@line 3499
 HEAP32[$47 + 8 >> 2] = 0; //@line 3499
 HEAP32[$47 + 12 >> 2] = 0; //@line 3499
 HEAP8[$0 + 1104 >> 0] = 1; //@line 3501
 HEAP32[$34 >> 2] = 684; //@line 3502
 $49 = $0 + 1112 | 0; //@line 3503
 $AsyncCtx7 = _emscripten_alloc_async_context(52, sp) | 0; //@line 3504
 __ZN4mbed10TimerEventC2Ev($49); //@line 3505
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 149; //@line 3508
  HEAP32[$AsyncCtx7 + 4 >> 2] = $49; //@line 3510
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 3512
  HEAP32[$AsyncCtx7 + 12 >> 2] = $16; //@line 3514
  HEAP32[$AsyncCtx7 + 16 >> 2] = $17; //@line 3516
  HEAP32[$AsyncCtx7 + 20 >> 2] = $12; //@line 3518
  HEAP32[$AsyncCtx7 + 24 >> 2] = $13; //@line 3520
  HEAP32[$AsyncCtx7 + 28 >> 2] = $15; //@line 3522
  HEAP32[$AsyncCtx7 + 32 >> 2] = $14; //@line 3524
  HEAP32[$AsyncCtx7 + 36 >> 2] = $18; //@line 3526
  HEAP32[$AsyncCtx7 + 40 >> 2] = $10; //@line 3528
  HEAP32[$AsyncCtx7 + 44 >> 2] = $11; //@line 3530
  HEAP32[$AsyncCtx7 + 48 >> 2] = $33; //@line 3532
  sp = STACKTOP; //@line 3533
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 3536
 $62 = $0 + 1152 | 0; //@line 3537
 HEAP32[$62 >> 2] = 0; //@line 3538
 HEAP32[$62 + 4 >> 2] = 0; //@line 3538
 HEAP32[$62 + 8 >> 2] = 0; //@line 3538
 HEAP32[$62 + 12 >> 2] = 0; //@line 3538
 HEAP8[$0 + 1168 >> 0] = 1; //@line 3540
 HEAP32[$49 >> 2] = 684; //@line 3541
 $64 = $0 + 1176 | 0; //@line 3542
 $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 3543
 __ZN4mbed10TimerEventC2Ev($64); //@line 3544
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 150; //@line 3547
  HEAP32[$AsyncCtx3 + 4 >> 2] = $64; //@line 3549
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 3551
  HEAP32[$AsyncCtx3 + 12 >> 2] = $16; //@line 3553
  HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 3555
  HEAP32[$AsyncCtx3 + 20 >> 2] = $12; //@line 3557
  HEAP32[$AsyncCtx3 + 24 >> 2] = $13; //@line 3559
  HEAP32[$AsyncCtx3 + 28 >> 2] = $15; //@line 3561
  HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 3563
  HEAP32[$AsyncCtx3 + 36 >> 2] = $18; //@line 3565
  HEAP32[$AsyncCtx3 + 40 >> 2] = $10; //@line 3567
  HEAP32[$AsyncCtx3 + 44 >> 2] = $11; //@line 3569
  HEAP32[$AsyncCtx3 + 48 >> 2] = $33; //@line 3571
  sp = STACKTOP; //@line 3572
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3575
 $77 = $0 + 1216 | 0; //@line 3576
 HEAP32[$77 >> 2] = 0; //@line 3577
 HEAP32[$77 + 4 >> 2] = 0; //@line 3577
 HEAP32[$77 + 8 >> 2] = 0; //@line 3577
 HEAP32[$77 + 12 >> 2] = 0; //@line 3577
 HEAP8[$0 + 1232 >> 0] = 1; //@line 3579
 HEAP32[$64 >> 2] = 684; //@line 3580
 $79 = $0 + 1240 | 0; //@line 3581
 $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 3582
 __ZN4mbed10TimerEventC2Ev($79); //@line 3583
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 151; //@line 3586
  HEAP32[$AsyncCtx + 4 >> 2] = $79; //@line 3588
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 3590
  HEAP32[$AsyncCtx + 12 >> 2] = $16; //@line 3592
  HEAP32[$AsyncCtx + 16 >> 2] = $17; //@line 3594
  HEAP32[$AsyncCtx + 20 >> 2] = $12; //@line 3596
  HEAP32[$AsyncCtx + 24 >> 2] = $13; //@line 3598
  HEAP32[$AsyncCtx + 28 >> 2] = $15; //@line 3600
  HEAP32[$AsyncCtx + 32 >> 2] = $14; //@line 3602
  HEAP32[$AsyncCtx + 36 >> 2] = $18; //@line 3604
  HEAP32[$AsyncCtx + 40 >> 2] = $10; //@line 3606
  HEAP32[$AsyncCtx + 44 >> 2] = $11; //@line 3608
  HEAP32[$AsyncCtx + 48 >> 2] = $33; //@line 3610
  sp = STACKTOP; //@line 3611
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3614
 $92 = $0 + 1280 | 0; //@line 3615
 HEAP32[$92 >> 2] = 0; //@line 3616
 HEAP32[$92 + 4 >> 2] = 0; //@line 3616
 HEAP32[$92 + 8 >> 2] = 0; //@line 3616
 HEAP32[$92 + 12 >> 2] = 0; //@line 3616
 HEAP8[$0 + 1296 >> 0] = 1; //@line 3618
 HEAP32[$79 >> 2] = 684; //@line 3619
 HEAP32[$0 + 668 >> 2] = $16; //@line 3621
 HEAP32[$0 + 672 >> 2] = $17; //@line 3623
 HEAP32[$0 + 652 >> 2] = $12; //@line 3625
 HEAP32[$0 + 656 >> 2] = $13; //@line 3627
 HEAP32[$0 + 664 >> 2] = $15; //@line 3629
 HEAP32[$0 + 660 >> 2] = $14; //@line 3631
 HEAP32[$0 + 676 >> 2] = $18; //@line 3633
 HEAP32[$0 + 680 >> 2] = $10; //@line 3635
 HEAP32[$0 + 684 >> 2] = $11; //@line 3637
 HEAP32[$0 + 784 >> 2] = 0; //@line 3639
 if (($18 | 0) == -1) {
  $106 = _emscripten_asm_const_ii(4, $0 | 0) | 0; //@line 3642
  return;
 }
 _emscripten_asm_const_iii(3, HEAP32[$33 >> 2] | 0, 1) | 0; //@line 3646
 $106 = _emscripten_asm_const_ii(4, $0 | 0) | 0; //@line 3647
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_40($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $$expand_i1_val = 0, $10 = 0, $100 = 0, $103 = 0, $105 = 0, $106 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $62 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20445
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20447
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20449
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20451
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20453
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20455
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20457
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20459
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20461
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20463
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20465
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20467
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20471
 $30 = HEAP8[$0 + 60 >> 0] & 1; //@line 20476
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20478
 $34 = HEAP8[$0 + 68 >> 0] | 0; //@line 20480
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20482
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20484
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($2) | 0) {
   _printf(12967, $22) | 0; //@line 20491
   _printf(13114, $26) | 0; //@line 20492
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(64) | 0; //@line 20493
   _putchar(10) | 0; //@line 20494
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 402; //@line 20497
    $44 = $ReallocAsyncCtx3 + 4 | 0; //@line 20498
    HEAP32[$44 >> 2] = $20; //@line 20499
    $45 = $ReallocAsyncCtx3 + 8 | 0; //@line 20500
    HEAP32[$45 >> 2] = $12; //@line 20501
    $46 = $ReallocAsyncCtx3 + 12 | 0; //@line 20502
    HEAP32[$46 >> 2] = $2; //@line 20503
    $47 = $ReallocAsyncCtx3 + 16 | 0; //@line 20504
    HEAP32[$47 >> 2] = $6; //@line 20505
    $48 = $ReallocAsyncCtx3 + 20 | 0; //@line 20506
    HEAP32[$48 >> 2] = $8; //@line 20507
    $49 = $ReallocAsyncCtx3 + 24 | 0; //@line 20508
    HEAP32[$49 >> 2] = $10; //@line 20509
    $50 = $ReallocAsyncCtx3 + 28 | 0; //@line 20510
    HEAP32[$50 >> 2] = $14; //@line 20511
    $51 = $ReallocAsyncCtx3 + 32 | 0; //@line 20512
    HEAP32[$51 >> 2] = $16; //@line 20513
    $52 = $ReallocAsyncCtx3 + 36 | 0; //@line 20514
    HEAP32[$52 >> 2] = $18; //@line 20515
    $53 = $ReallocAsyncCtx3 + 40 | 0; //@line 20516
    $$expand_i1_val = $30 & 1; //@line 20517
    HEAP8[$53 >> 0] = $$expand_i1_val; //@line 20518
    $54 = $ReallocAsyncCtx3 + 44 | 0; //@line 20519
    HEAP32[$54 >> 2] = $4; //@line 20520
    $55 = $ReallocAsyncCtx3 + 48 | 0; //@line 20521
    HEAP32[$55 >> 2] = $32; //@line 20522
    $56 = $ReallocAsyncCtx3 + 52 | 0; //@line 20523
    HEAP8[$56 >> 0] = $34; //@line 20524
    $57 = $ReallocAsyncCtx3 + 56 | 0; //@line 20525
    HEAP32[$57 >> 2] = $36; //@line 20526
    $58 = $ReallocAsyncCtx3 + 60 | 0; //@line 20527
    HEAP32[$58 >> 2] = $38; //@line 20528
    sp = STACKTOP; //@line 20529
    return;
   }
   ___async_unwind = 0; //@line 20532
   HEAP32[$ReallocAsyncCtx3 >> 2] = 402; //@line 20533
   $44 = $ReallocAsyncCtx3 + 4 | 0; //@line 20534
   HEAP32[$44 >> 2] = $20; //@line 20535
   $45 = $ReallocAsyncCtx3 + 8 | 0; //@line 20536
   HEAP32[$45 >> 2] = $12; //@line 20537
   $46 = $ReallocAsyncCtx3 + 12 | 0; //@line 20538
   HEAP32[$46 >> 2] = $2; //@line 20539
   $47 = $ReallocAsyncCtx3 + 16 | 0; //@line 20540
   HEAP32[$47 >> 2] = $6; //@line 20541
   $48 = $ReallocAsyncCtx3 + 20 | 0; //@line 20542
   HEAP32[$48 >> 2] = $8; //@line 20543
   $49 = $ReallocAsyncCtx3 + 24 | 0; //@line 20544
   HEAP32[$49 >> 2] = $10; //@line 20545
   $50 = $ReallocAsyncCtx3 + 28 | 0; //@line 20546
   HEAP32[$50 >> 2] = $14; //@line 20547
   $51 = $ReallocAsyncCtx3 + 32 | 0; //@line 20548
   HEAP32[$51 >> 2] = $16; //@line 20549
   $52 = $ReallocAsyncCtx3 + 36 | 0; //@line 20550
   HEAP32[$52 >> 2] = $18; //@line 20551
   $53 = $ReallocAsyncCtx3 + 40 | 0; //@line 20552
   $$expand_i1_val = $30 & 1; //@line 20553
   HEAP8[$53 >> 0] = $$expand_i1_val; //@line 20554
   $54 = $ReallocAsyncCtx3 + 44 | 0; //@line 20555
   HEAP32[$54 >> 2] = $4; //@line 20556
   $55 = $ReallocAsyncCtx3 + 48 | 0; //@line 20557
   HEAP32[$55 >> 2] = $32; //@line 20558
   $56 = $ReallocAsyncCtx3 + 52 | 0; //@line 20559
   HEAP8[$56 >> 0] = $34; //@line 20560
   $57 = $ReallocAsyncCtx3 + 56 | 0; //@line 20561
   HEAP32[$57 >> 2] = $36; //@line 20562
   $58 = $ReallocAsyncCtx3 + 60 | 0; //@line 20563
   HEAP32[$58 >> 2] = $38; //@line 20564
   sp = STACKTOP; //@line 20565
   return;
  }
 } else {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 4 >> 2] = 1; //@line 20571
 }
 $61 = $10 & 255; //@line 20575
 $62 = $12 + 638 | 0; //@line 20576
 if (__Z15decrypt_payloadPKhtS0_jhjPh($6 + $8 | 0, $61, $14, $16, 1, $18, $62) | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 4 >> 2] = 13; //@line 20582
 }
 if ($30) {
  $$3$off0204 = 6; //@line 20585
 } else {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 12 >> 2] = $62; //@line 20589
  HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 16 >> 1] = $61; //@line 20592
  HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 18 >> 0] = 1; //@line 20595
  $76 = (__ZN11LoRaMacMcps16get_confirmationEv($4) | 0) + 10 | 0; //@line 20599
  if ($34 & 32) {
   HEAP8[$76 >> 0] = 1; //@line 20601
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 28 >> 0] = 1; //@line 20604
   $79 = HEAP32[$32 >> 2] | 0; //@line 20605
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 20607
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($79, $12 + 1076 | 0); //@line 20608
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 20611
    $81 = $ReallocAsyncCtx23 + 4 | 0; //@line 20612
    HEAP32[$81 >> 2] = $12; //@line 20613
    $82 = $ReallocAsyncCtx23 + 8 | 0; //@line 20614
    HEAP32[$82 >> 2] = $32; //@line 20615
    $83 = $ReallocAsyncCtx23 + 12 | 0; //@line 20616
    HEAP32[$83 >> 2] = $36; //@line 20617
    $84 = $ReallocAsyncCtx23 + 16 | 0; //@line 20618
    HEAP32[$84 >> 2] = $38; //@line 20619
    sp = STACKTOP; //@line 20620
    return;
   }
   ___async_unwind = 0; //@line 20623
   HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 20624
   $81 = $ReallocAsyncCtx23 + 4 | 0; //@line 20625
   HEAP32[$81 >> 2] = $12; //@line 20626
   $82 = $ReallocAsyncCtx23 + 8 | 0; //@line 20627
   HEAP32[$82 >> 2] = $32; //@line 20628
   $83 = $ReallocAsyncCtx23 + 12 | 0; //@line 20629
   HEAP32[$83 >> 2] = $36; //@line 20630
   $84 = $ReallocAsyncCtx23 + 16 | 0; //@line 20631
   HEAP32[$84 >> 2] = $38; //@line 20632
   sp = STACKTOP; //@line 20633
   return;
  }
  HEAP8[$76 >> 0] = 0; //@line 20636
  if ((HEAPU8[$12 + 895 >> 0] | 0) > (HEAPU8[$12 + 894 >> 0] | 0)) {
   $90 = HEAP32[$32 >> 2] | 0; //@line 20643
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 20645
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($90, $12 + 1076 | 0); //@line 20646
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 20649
    $92 = $ReallocAsyncCtx22 + 4 | 0; //@line 20650
    HEAP32[$92 >> 2] = $12; //@line 20651
    $93 = $ReallocAsyncCtx22 + 8 | 0; //@line 20652
    HEAP32[$93 >> 2] = $32; //@line 20653
    $94 = $ReallocAsyncCtx22 + 12 | 0; //@line 20654
    HEAP32[$94 >> 2] = $36; //@line 20655
    $95 = $ReallocAsyncCtx22 + 16 | 0; //@line 20656
    HEAP32[$95 >> 2] = $38; //@line 20657
    sp = STACKTOP; //@line 20658
    return;
   }
   ___async_unwind = 0; //@line 20661
   HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 20662
   $92 = $ReallocAsyncCtx22 + 4 | 0; //@line 20663
   HEAP32[$92 >> 2] = $12; //@line 20664
   $93 = $ReallocAsyncCtx22 + 8 | 0; //@line 20665
   HEAP32[$93 >> 2] = $32; //@line 20666
   $94 = $ReallocAsyncCtx22 + 12 | 0; //@line 20667
   HEAP32[$94 >> 2] = $36; //@line 20668
   $95 = $ReallocAsyncCtx22 + 16 | 0; //@line 20669
   HEAP32[$95 >> 2] = $38; //@line 20670
   sp = STACKTOP; //@line 20671
   return;
  } else {
   $$3$off0204 = 2; //@line 20674
  }
 }
 $96 = $12 + 944 | 0; //@line 20677
 HEAP8[$96 >> 0] = $$3$off0204 | HEAP8[$96 >> 0] & -7; //@line 20681
 $100 = $12 + 944 | 0; //@line 20682
 HEAP8[$100 >> 0] = HEAP8[$100 >> 0] | 32; //@line 20685
 $103 = HEAP32[$32 >> 2] | 0; //@line 20686
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 20688
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($103, $12 + 996 | 0, 1); //@line 20689
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 20692
  $105 = $ReallocAsyncCtx17 + 4 | 0; //@line 20693
  HEAP32[$105 >> 2] = $36; //@line 20694
  $106 = $ReallocAsyncCtx17 + 8 | 0; //@line 20695
  HEAP32[$106 >> 2] = $38; //@line 20696
  sp = STACKTOP; //@line 20697
  return;
 }
 ___async_unwind = 0; //@line 20700
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 20701
 $105 = $ReallocAsyncCtx17 + 4 | 0; //@line 20702
 HEAP32[$105 >> 2] = $36; //@line 20703
 $106 = $ReallocAsyncCtx17 + 8 | 0; //@line 20704
 HEAP32[$106 >> 2] = $38; //@line 20705
 sp = STACKTOP; //@line 20706
 return;
}
function _initialize($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$037 = 0, $1 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $109 = 0, $115 = 0, $116 = 0, $117 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $140 = 0, $142 = 0, $148 = 0, $149 = 0, $150 = 0, $159 = 0, $160 = 0, $161 = 0, $163 = 0, $167 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $18 = 0, $25 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $52 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $70 = 0, $73 = 0, $77 = 0, $78 = 0, $85 = 0, $86 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4565
 $1 = $0 + 4 | 0; //@line 4566
 if (HEAP8[(HEAP32[$1 >> 2] | 0) + 56 >> 0] | 0) {
  return;
 }
 $7 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0; //@line 4575
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4576
 FUNCTION_TABLE_v[$7 & 15](); //@line 4577
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 697; //@line 4580
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4582
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 4584
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 4586
  sp = STACKTOP; //@line 4587
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4590
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 4593
 $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 4594
 $14 = FUNCTION_TABLE_i[$13 & 7]() | 0; //@line 4595
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 698; //@line 4598
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 4600
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 4602
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 4604
  sp = STACKTOP; //@line 4605
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4608
 $18 = HEAP32[$14 >> 2] | 0; //@line 4609
 do {
  if (!$18) {
   $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4613
   _mbed_assert_internal(14513, 14515, 41); //@line 4614
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 699; //@line 4617
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 4619
    HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 4621
    HEAP32[$AsyncCtx20 + 12 >> 2] = $0; //@line 4623
    HEAP32[$AsyncCtx20 + 16 >> 2] = $14; //@line 4625
    sp = STACKTOP; //@line 4626
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 4629
    $$0 = 1e6; //@line 4630
    break;
   }
  } else {
   $$0 = $18; //@line 4634
  }
 } while (0);
 $25 = HEAP32[$14 + 4 >> 2] | 0; //@line 4638
 do {
  if (($25 + -4 | 0) >>> 0 > 28) {
   $AsyncCtx16 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4643
   _mbed_assert_internal(14513, 14515, 47); //@line 4644
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 700; //@line 4647
    HEAP32[$AsyncCtx16 + 4 >> 2] = $$0; //@line 4649
    HEAP32[$AsyncCtx16 + 8 >> 2] = $1; //@line 4651
    HEAP32[$AsyncCtx16 + 12 >> 2] = $0; //@line 4653
    HEAP32[$AsyncCtx16 + 16 >> 2] = $0; //@line 4655
    sp = STACKTOP; //@line 4656
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 4659
    $$037 = 32; //@line 4660
    break;
   }
  } else {
   $$037 = $25; //@line 4664
  }
 } while (0);
 $32 = 7 << $$037 + -4; //@line 4668
 $33 = ___muldi3($32 | 0, 0, 1e6, 0) | 0; //@line 4669
 $34 = tempRet0; //@line 4670
 $35 = _i64Add($$0 | 0, 0, -1, -1) | 0; //@line 4671
 $37 = _i64Add($35 | 0, tempRet0 | 0, $33 | 0, $34 | 0) | 0; //@line 4673
 $39 = ___udivdi3($37 | 0, tempRet0 | 0, $$0 | 0, 0) | 0; //@line 4675
 $40 = tempRet0; //@line 4676
 $41 = HEAP32[$1 >> 2] | 0; //@line 4677
 HEAP32[$41 >> 2] = 0; //@line 4678
 HEAP32[$41 + 4 >> 2] = 0; //@line 4680
 $45 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 4683
 $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 4684
 $46 = FUNCTION_TABLE_i[$45 & 7]() | 0; //@line 4685
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 701; //@line 4688
  HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 4690
  HEAP32[$AsyncCtx6 + 8 >> 2] = $$0; //@line 4692
  HEAP32[$AsyncCtx6 + 12 >> 2] = $$037; //@line 4694
  HEAP32[$AsyncCtx6 + 16 >> 2] = $32; //@line 4696
  $52 = $AsyncCtx6 + 24 | 0; //@line 4698
  HEAP32[$52 >> 2] = $39; //@line 4700
  HEAP32[$52 + 4 >> 2] = $40; //@line 4703
  HEAP32[$AsyncCtx6 + 32 >> 2] = $0; //@line 4705
  HEAP32[$AsyncCtx6 + 36 >> 2] = $0; //@line 4707
  sp = STACKTOP; //@line 4708
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 4711
 $58 = HEAP32[$1 >> 2] | 0; //@line 4712
 $59 = $58 + 32 | 0; //@line 4713
 HEAP32[$59 >> 2] = $46; //@line 4714
 $60 = $58 + 40 | 0; //@line 4715
 $61 = $60; //@line 4716
 HEAP32[$61 >> 2] = 0; //@line 4718
 HEAP32[$61 + 4 >> 2] = 0; //@line 4721
 $65 = $58 + 8 | 0; //@line 4722
 HEAP32[$65 >> 2] = $$0; //@line 4723
 $66 = _bitshift64Shl(1, 0, $$037 | 0) | 0; //@line 4724
 $68 = _i64Add($66 | 0, tempRet0 | 0, -1, 0) | 0; //@line 4726
 $70 = $58 + 12 | 0; //@line 4728
 HEAP32[$70 >> 2] = $68; //@line 4729
 HEAP32[$58 + 16 >> 2] = $32; //@line 4731
 $73 = $58 + 24 | 0; //@line 4733
 HEAP32[$73 >> 2] = $39; //@line 4735
 HEAP32[$73 + 4 >> 2] = $40; //@line 4738
 $77 = $58 + 48 | 0; //@line 4739
 $78 = $77; //@line 4740
 HEAP32[$78 >> 2] = 0; //@line 4742
 HEAP32[$78 + 4 >> 2] = 0; //@line 4745
 HEAP8[$58 + 56 >> 0] = 1; //@line 4747
 $85 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 4750
 $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4751
 $86 = FUNCTION_TABLE_i[$85 & 7]() | 0; //@line 4752
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 702; //@line 4755
  HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 4757
  HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 4759
  HEAP32[$AsyncCtx9 + 12 >> 2] = $59; //@line 4761
  HEAP32[$AsyncCtx9 + 16 >> 2] = $70; //@line 4763
  HEAP32[$AsyncCtx9 + 20 >> 2] = $65; //@line 4765
  HEAP32[$AsyncCtx9 + 24 >> 2] = $60; //@line 4767
  HEAP32[$AsyncCtx9 + 28 >> 2] = $77; //@line 4769
  sp = STACKTOP; //@line 4770
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 4773
 if (($86 | 0) != (HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] | 0)) {
  $101 = $86 - (HEAP32[$59 >> 2] | 0) & HEAP32[$70 >> 2]; //@line 4782
  HEAP32[$59 >> 2] = $86; //@line 4783
  $102 = HEAP32[$65 >> 2] | 0; //@line 4784
  L30 : do {
   if (($102 | 0) < 1e6) {
    switch ($102 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 22; //@line 4793
      break L30;
     }
    }
    $103 = ___muldi3($101 | 0, 0, 1e6, 0) | 0; //@line 4797
    $105 = _bitshift64Lshr($103 | 0, tempRet0 | 0, 15) | 0; //@line 4799
    $106 = tempRet0; //@line 4800
    $109 = $60; //@line 4803
    $115 = _i64Add(HEAP32[$109 >> 2] | 0, HEAP32[$109 + 4 >> 2] | 0, $101 * 1e6 & 32704 | 0, 0) | 0; //@line 4809
    $116 = tempRet0; //@line 4810
    $117 = $60; //@line 4811
    HEAP32[$117 >> 2] = $115; //@line 4813
    HEAP32[$117 + 4 >> 2] = $116; //@line 4816
    if ($116 >>> 0 < 0 | ($116 | 0) == 0 & $115 >>> 0 < 32768) {
     $173 = $105; //@line 4823
     $174 = $106; //@line 4823
    } else {
     $126 = _i64Add($105 | 0, $106 | 0, 1, 0) | 0; //@line 4825
     $127 = tempRet0; //@line 4826
     $128 = _i64Add($115 | 0, $116 | 0, -32768, -1) | 0; //@line 4827
     $130 = $60; //@line 4829
     HEAP32[$130 >> 2] = $128; //@line 4831
     HEAP32[$130 + 4 >> 2] = tempRet0; //@line 4834
     $173 = $126; //@line 4835
     $174 = $127; //@line 4835
    }
   } else {
    switch ($102 | 0) {
    case 1e6:
     {
      $173 = $101; //@line 4840
      $174 = 0; //@line 4840
      break;
     }
    default:
     {
      label = 22; //@line 4844
     }
    }
   }
  } while (0);
  if ((label | 0) == 22) {
   $134 = ___muldi3($101 | 0, 0, 1e6, 0) | 0; //@line 4850
   $135 = tempRet0; //@line 4851
   $136 = ___udivdi3($134 | 0, $135 | 0, $102 | 0, 0) | 0; //@line 4852
   $137 = tempRet0; //@line 4853
   $138 = ___muldi3($136 | 0, $137 | 0, $102 | 0, 0) | 0; //@line 4854
   $140 = _i64Subtract($134 | 0, $135 | 0, $138 | 0, tempRet0 | 0) | 0; //@line 4856
   $142 = $60; //@line 4858
   $148 = _i64Add($140 | 0, tempRet0 | 0, HEAP32[$142 >> 2] | 0, HEAP32[$142 + 4 >> 2] | 0) | 0; //@line 4864
   $149 = tempRet0; //@line 4865
   $150 = $60; //@line 4866
   HEAP32[$150 >> 2] = $148; //@line 4868
   HEAP32[$150 + 4 >> 2] = $149; //@line 4871
   if ($149 >>> 0 < 0 | ($149 | 0) == 0 & $148 >>> 0 < $102 >>> 0) {
    $173 = $136; //@line 4878
    $174 = $137; //@line 4878
   } else {
    $159 = _i64Add($136 | 0, $137 | 0, 1, 0) | 0; //@line 4880
    $160 = tempRet0; //@line 4881
    $161 = _i64Subtract($148 | 0, $149 | 0, $102 | 0, 0) | 0; //@line 4882
    $163 = $60; //@line 4884
    HEAP32[$163 >> 2] = $161; //@line 4886
    HEAP32[$163 + 4 >> 2] = tempRet0; //@line 4889
    $173 = $159; //@line 4890
    $174 = $160; //@line 4890
   }
  }
  $167 = $77; //@line 4893
  $175 = _i64Add(HEAP32[$167 >> 2] | 0, HEAP32[$167 + 4 >> 2] | 0, $173 | 0, $174 | 0) | 0; //@line 4899
  $177 = $77; //@line 4901
  HEAP32[$177 >> 2] = $175; //@line 4903
  HEAP32[$177 + 4 >> 2] = tempRet0; //@line 4906
 }
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4908
 _schedule_interrupt($0); //@line 4909
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 703; //@line 4912
  sp = STACKTOP; //@line 4913
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 4916
 return;
}
function __ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$026$$026$i = 0, $$026$i = 0, $$028$i = 0, $$028$i4751 = 0, $$028$lcssa = 0, $$02862 = 0, $$029$be = 0, $$029$lcssa = 0, $$02961 = 0, $$1 = 0, $$127$i53 = 0, $$130$$$$i = 0, $$2$i = 0, $$2$i54 = 0, $$256 = 0, $$3 = 0, $$3$i52 = 0, $$lcssa76 = 0, $$lcssa77 = 0, $$pre = 0, $$sroa$034$0$lcssa = 0, $$sroa$034$058 = 0, $$sroa$1038$0$lcssa = 0, $$sroa$1038$060 = 0, $$sroa$636$0$lcssa = 0, $$sroa$636$059 = 0, $10 = 0, $107 = 0, $11 = 0, $112 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $121 = 0, $123 = 0, $127 = 0, $128 = 0, $13 = 0, $132 = 0, $17 = 0, $18 = 0, $19 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $42 = 0, $45 = 0, $52 = 0, $69 = 0, $7 = 0, $71 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $98 = 0, $indvars$iv = 0, $indvars$iv$i = 0, $indvars$iv$i31 = 0, $indvars$iv80 = 0, $wide$trip$count$i = 0, label = 0;
 $7 = HEAP8[$1 + 4 >> 0] | 0; //@line 24637
 L1 : do {
  if (!($7 << 24 >> 24)) {
   $$028$lcssa = 0; //@line 24641
   $$029$lcssa = 7; //@line 24641
   $$sroa$034$0$lcssa = 0; //@line 24641
   $$sroa$1038$0$lcssa = 0; //@line 24641
   $$sroa$636$0$lcssa = 0; //@line 24641
   $92 = 0; //@line 24641
  } else {
   $9 = HEAP32[$1 >> 2] | 0; //@line 24643
   $10 = $0 + 20 | 0; //@line 24644
   $11 = $0 + 112 | 0; //@line 24645
   $$02862 = 0; //@line 24646
   $$02961 = 7; //@line 24646
   $$lcssa76 = 0; //@line 24646
   $$sroa$034$058 = 0; //@line 24646
   $$sroa$1038$060 = 0; //@line 24646
   $$sroa$636$059 = 0; //@line 24646
   $13 = 0; //@line 24646
   while (1) {
    $12 = $9 + $13 | 0; //@line 24648
    if ((HEAP8[$12 >> 0] | 0) != 3) {
     $$028$lcssa = $$02862; //@line 24652
     $$029$lcssa = $$02961; //@line 24652
     $$sroa$034$0$lcssa = $$sroa$034$058; //@line 24652
     $$sroa$1038$0$lcssa = $$sroa$1038$060; //@line 24652
     $$sroa$636$0$lcssa = $$sroa$636$059; //@line 24652
     $92 = $$lcssa76; //@line 24652
     break L1;
    }
    $17 = HEAP8[$12 + 1 >> 0] | 0; //@line 24656
    $18 = $17 & 15; //@line 24657
    $19 = ($17 & 255) >>> 4; //@line 24658
    $27 = HEAPU8[$12 + 3 >> 0] << 8 | HEAPU8[$12 + 2 >> 0]; //@line 24666
    $28 = $27 & 65535; //@line 24667
    $30 = HEAP8[$12 + 4 >> 0] | 0; //@line 24669
    $32 = ($30 & 255) >>> 4; //@line 24671
    $34 = $32 & 7; //@line 24673
    $35 = $30 & 15; //@line 24674
    $36 = $13 + 5 | 0; //@line 24675
    $37 = $36 & 255; //@line 24676
    $$1 = $28 << 16 >> 16 == 0 & $34 << 24 >> 24 == 0 ? 6 : 7; //@line 24680
    L6 : do {
     switch ($32 & 7) {
     case 6:
     case 0:
      {
       $42 = HEAP8[$10 >> 0] | 0; //@line 24686
       if (!($42 << 24 >> 24)) {
        $$029$be = $$1; //@line 24689
        $$lcssa77 = $28; //@line 24689
       } else {
        $45 = $42 & 255; //@line 24692
        if ($34 << 24 >> 24 != 6) {
         $$256 = $$1; //@line 24694
         $indvars$iv = 0; //@line 24694
         while (1) {
          if (!($27 & 1 << ($indvars$iv & 15))) {
           $$3 = $$256; //@line 24701
          } else {
           $$3 = (HEAP32[(HEAP32[$11 >> 2] | 0) + ($indvars$iv * 12 | 0) >> 2] | 0) == 0 ? $$256 & -2 : $$256; //@line 24709
          }
          $indvars$iv = $indvars$iv + 1 | 0; //@line 24711
          if ($indvars$iv >>> 0 >= $45 >>> 0) {
           $$029$be = $$3; //@line 24716
           $$lcssa77 = $28; //@line 24716
           break L6;
          } else {
           $$256 = $$3; //@line 24714
          }
         }
        }
        $$pre = HEAP32[$11 >> 2] | 0; //@line 24721
        $52 = $28; //@line 24722
        $indvars$iv80 = 0; //@line 24722
        while (1) {
         if (!(HEAP32[$$pre + ($indvars$iv80 * 12 | 0) >> 2] | 0)) {
          $132 = $52; //@line 24728
         } else {
          $132 = (1 << ($indvars$iv80 & 15) | $52 & 65535) & 65535; //@line 24735
         }
         $indvars$iv80 = $indvars$iv80 + 1 | 0; //@line 24737
         if ($indvars$iv80 >>> 0 >= $45 >>> 0) {
          $$029$be = $$1; //@line 24742
          $$lcssa77 = $132; //@line 24742
          break;
         } else {
          $52 = $132; //@line 24740
         }
        }
       }
       break;
      }
     default:
      {
       $$029$be = 6; //@line 24750
       $$lcssa77 = $28; //@line 24750
      }
     }
    } while (0);
    if (($7 & 255) > ($37 & 255)) {
     $$02862 = $37; //@line 24757
     $$02961 = $$029$be; //@line 24757
     $$lcssa76 = $$lcssa77; //@line 24757
     $$sroa$034$058 = $35; //@line 24757
     $$sroa$1038$060 = $18; //@line 24757
     $$sroa$636$059 = $19; //@line 24757
     $13 = $36 & 255; //@line 24757
    } else {
     $$028$lcssa = $37; //@line 24759
     $$029$lcssa = $$029$be; //@line 24759
     $$sroa$034$0$lcssa = $35; //@line 24759
     $$sroa$1038$0$lcssa = $18; //@line 24759
     $$sroa$636$0$lcssa = $19; //@line 24759
     $92 = $$lcssa77; //@line 24759
     break L1;
    }
   }
  }
 } while (0);
 $69 = HEAP8[$1 + 7 >> 0] | 0; //@line 24768
 $71 = HEAP8[$1 + 8 >> 0] | 0; //@line 24770
 if (!(HEAP8[$1 + 6 >> 0] | 0)) {
  if ($$sroa$636$0$lcssa << 24 >> 24 == 15 & $$sroa$1038$0$lcssa << 24 >> 24 == 15) {
   $$026$i = $71; //@line 24779
   $$028$i = $69; //@line 24779
  } else {
   $$028$i4751 = $69; //@line 24781
   $$127$i53 = $71; //@line 24781
   $$2$i54 = HEAP8[$1 + 9 >> 0] | 0; //@line 24781
   $$3$i52 = 0; //@line 24781
   HEAP8[$2 >> 0] = $$028$i4751; //@line 24782
   HEAP8[$3 >> 0] = $$127$i53; //@line 24783
   HEAP8[$4 >> 0] = $$2$i54; //@line 24784
   HEAP8[$5 >> 0] = $$028$lcssa; //@line 24785
   return $$3$i52 | 0; //@line 24786
  }
 } else {
  $$026$i = $$sroa$1038$0$lcssa; //@line 24789
  $$028$i = $$sroa$636$0$lcssa; //@line 24789
 }
 if (!($$029$lcssa << 24 >> 24)) {
  $$028$i4751 = $$028$i; //@line 24793
  $$127$i53 = $$026$i; //@line 24793
  $$2$i54 = $$sroa$034$0$lcssa; //@line 24793
  $$3$i52 = 0; //@line 24793
  HEAP8[$2 >> 0] = $$028$i4751; //@line 24794
  HEAP8[$3 >> 0] = $$127$i53; //@line 24795
  HEAP8[$4 >> 0] = $$2$i54; //@line 24796
  HEAP8[$5 >> 0] = $$028$lcssa; //@line 24797
  return $$3$i52 | 0; //@line 24798
 }
 $83 = HEAP32[$0 + 112 >> 2] | 0; //@line 24805
 L30 : do {
  if ($$028$i << 24 >> 24 < (HEAP8[$0 + 26 >> 0] | 0) ? 1 : $$028$i << 24 >> 24 > (HEAP8[$0 + 27 >> 0] | 0)) {
   label = 24; //@line 24811
  } else {
   $88 = HEAP8[$0 + 20 >> 0] | 0; //@line 24814
   if (!($88 << 24 >> 24)) {
    label = 24; //@line 24817
   } else {
    $90 = $88 & 255; //@line 24819
    $91 = $92 & 65535; //@line 24820
    $indvars$iv$i31 = 0; //@line 24821
    while (1) {
     if (1 << ($indvars$iv$i31 & 15) & $91 | 0) {
      $98 = HEAP8[$83 + ($indvars$iv$i31 * 12 | 0) + 8 >> 0] | 0; //@line 24829
      if (!(($98 & 15) > $$028$i << 24 >> 24 ? 1 : ($98 & 255) >>> 4 << 24 >> 24 < $$028$i << 24 >> 24)) {
       $117 = $$029$lcssa; //@line 24836
       break L30;
      }
     }
     $indvars$iv$i31 = $indvars$iv$i31 + 1 | 0; //@line 24840
     if ($indvars$iv$i31 >>> 0 >= $90 >>> 0) {
      label = 24; //@line 24845
      break;
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 24) {
  $117 = $$029$lcssa & -3; //@line 24854
 }
 $107 = HEAP8[$0 + 22 >> 0] | 0; //@line 24857
 $112 = $$026$i << 24 >> 24 < $107 << 24 >> 24 ? 1 : $$026$i << 24 >> 24 > (HEAP8[$0 + 21 >> 0] | 0); //@line 24862
 $115 = ($107 & 255 | 0) > ($$026$i << 24 >> 24 | 0); //@line 24865
 $$130$$$$i = $112 ? $115 ? $117 : $117 & -5 : $117; //@line 24868
 $$$026$$026$i = $115 & $112 ? $107 : $$026$i; //@line 24870
 $119 = $$130$$$$i << 24 >> 24 == 7; //@line 24871
 $$2$i = $$sroa$034$0$lcssa << 24 >> 24 == 0 & $119 ? 1 : $$sroa$034$0$lcssa; //@line 24874
 if (!$119) {
  $$028$i4751 = $$028$i; //@line 24876
  $$127$i53 = $$$026$$026$i; //@line 24876
  $$2$i54 = $$2$i; //@line 24876
  $$3$i52 = $$130$$$$i; //@line 24876
  HEAP8[$2 >> 0] = $$028$i4751; //@line 24877
  HEAP8[$3 >> 0] = $$127$i53; //@line 24878
  HEAP8[$4 >> 0] = $$2$i54; //@line 24879
  HEAP8[$5 >> 0] = $$028$lcssa; //@line 24880
  return $$3$i52 | 0; //@line 24881
 }
 $121 = $0 + 120 | 0; //@line 24883
 $123 = $0 + 128 | 0; //@line 24885
 _memset(HEAP32[$121 >> 2] | 0, 0, HEAPU8[$123 >> 0] << 1 | 0) | 0; //@line 24889
 $127 = HEAP32[$121 >> 2] | 0; //@line 24890
 $128 = HEAP8[$123 >> 0] | 0; //@line 24891
 if (!(($127 | 0) != 0 & $128 << 24 >> 24 != 0)) {
  $$028$i4751 = $$028$i; //@line 24896
  $$127$i53 = $$$026$$026$i; //@line 24896
  $$2$i54 = $$2$i; //@line 24896
  $$3$i52 = 7; //@line 24896
  HEAP8[$2 >> 0] = $$028$i4751; //@line 24897
  HEAP8[$3 >> 0] = $$127$i53; //@line 24898
  HEAP8[$4 >> 0] = $$2$i54; //@line 24899
  HEAP8[$5 >> 0] = $$028$lcssa; //@line 24900
  return $$3$i52 | 0; //@line 24901
 }
 $wide$trip$count$i = $128 & 255; //@line 24903
 $indvars$iv$i = 0; //@line 24904
 do {
  HEAP16[$127 + ($indvars$iv$i << 1) >> 1] = $92; //@line 24907
  $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 24908
 } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
 $$028$i4751 = $$028$i; //@line 24911
 $$127$i53 = $$$026$$026$i; //@line 24911
 $$2$i54 = $$2$i; //@line 24911
 $$3$i52 = 7; //@line 24911
 HEAP8[$2 >> 0] = $$028$i4751; //@line 24917
 HEAP8[$3 >> 0] = $$127$i53; //@line 24918
 HEAP8[$4 >> 0] = $$2$i54; //@line 24919
 HEAP8[$5 >> 0] = $$028$lcssa; //@line 24920
 return $$3$i52 | 0; //@line 24921
}
function _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$04056 = 0, $$04255 = 0, $$044 = 0, $$04554 = 0, $$14160 = 0, $$14160$us = 0, $$14359 = 0, $$14359$us = 0, $$14658 = 0, $$14658$us = 0, $10 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $127 = 0, $13 = 0, $131 = 0, $135 = 0, $139 = 0, $14 = 0, $143 = 0, $147 = 0, $15 = 0, $151 = 0, $155 = 0, $159 = 0, $16 = 0, $163 = 0, $167 = 0, $17 = 0, $171 = 0, $175 = 0, $179 = 0, $18 = 0, $183 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 931
 STACKTOP = STACKTOP + 16 | 0; //@line 932
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 932
 $6 = sp; //@line 933
 if ($2 & 15 | 0) {
  $$044 = -34; //@line 937
  STACKTOP = sp; //@line 938
  return $$044 | 0; //@line 938
 }
 $10 = ($2 | 0) == 0; //@line 941
 if (!$1) {
  if ($10) {
   $$044 = 0; //@line 944
   STACKTOP = sp; //@line 945
   return $$044 | 0; //@line 945
  }
  $109 = $3 + 1 | 0; //@line 947
  $110 = $3 + 2 | 0; //@line 948
  $111 = $3 + 3 | 0; //@line 949
  $112 = $3 + 4 | 0; //@line 950
  $113 = $3 + 5 | 0; //@line 951
  $114 = $3 + 6 | 0; //@line 952
  $115 = $3 + 7 | 0; //@line 953
  $116 = $3 + 8 | 0; //@line 954
  $117 = $3 + 9 | 0; //@line 955
  $118 = $3 + 10 | 0; //@line 956
  $119 = $3 + 11 | 0; //@line 957
  $120 = $3 + 12 | 0; //@line 958
  $121 = $3 + 13 | 0; //@line 959
  $122 = $3 + 14 | 0; //@line 960
  $123 = $3 + 15 | 0; //@line 961
  $$04056 = $5; //@line 962
  $$04255 = $4; //@line 962
  $$04554 = $2; //@line 962
  while (1) {
   dest = $6; //@line 964
   src = $$04255; //@line 964
   stop = dest + 16 | 0; //@line 964
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 964
    dest = dest + 1 | 0; //@line 964
    src = src + 1 | 0; //@line 964
   } while ((dest | 0) < (stop | 0));
   _mbedtls_internal_aes_decrypt($0, $$04255, $$04056) | 0; //@line 965
   HEAP8[$$04056 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$04056 >> 0]; //@line 969
   $127 = $$04056 + 1 | 0; //@line 970
   HEAP8[$127 >> 0] = HEAP8[$109 >> 0] ^ HEAP8[$127 >> 0]; //@line 974
   $131 = $$04056 + 2 | 0; //@line 975
   HEAP8[$131 >> 0] = HEAP8[$110 >> 0] ^ HEAP8[$131 >> 0]; //@line 979
   $135 = $$04056 + 3 | 0; //@line 980
   HEAP8[$135 >> 0] = HEAP8[$111 >> 0] ^ HEAP8[$135 >> 0]; //@line 984
   $139 = $$04056 + 4 | 0; //@line 985
   HEAP8[$139 >> 0] = HEAP8[$112 >> 0] ^ HEAP8[$139 >> 0]; //@line 989
   $143 = $$04056 + 5 | 0; //@line 990
   HEAP8[$143 >> 0] = HEAP8[$113 >> 0] ^ HEAP8[$143 >> 0]; //@line 994
   $147 = $$04056 + 6 | 0; //@line 995
   HEAP8[$147 >> 0] = HEAP8[$114 >> 0] ^ HEAP8[$147 >> 0]; //@line 999
   $151 = $$04056 + 7 | 0; //@line 1000
   HEAP8[$151 >> 0] = HEAP8[$115 >> 0] ^ HEAP8[$151 >> 0]; //@line 1004
   $155 = $$04056 + 8 | 0; //@line 1005
   HEAP8[$155 >> 0] = HEAP8[$116 >> 0] ^ HEAP8[$155 >> 0]; //@line 1009
   $159 = $$04056 + 9 | 0; //@line 1010
   HEAP8[$159 >> 0] = HEAP8[$117 >> 0] ^ HEAP8[$159 >> 0]; //@line 1014
   $163 = $$04056 + 10 | 0; //@line 1015
   HEAP8[$163 >> 0] = HEAP8[$118 >> 0] ^ HEAP8[$163 >> 0]; //@line 1019
   $167 = $$04056 + 11 | 0; //@line 1020
   HEAP8[$167 >> 0] = HEAP8[$119 >> 0] ^ HEAP8[$167 >> 0]; //@line 1024
   $171 = $$04056 + 12 | 0; //@line 1025
   HEAP8[$171 >> 0] = HEAP8[$120 >> 0] ^ HEAP8[$171 >> 0]; //@line 1029
   $175 = $$04056 + 13 | 0; //@line 1030
   HEAP8[$175 >> 0] = HEAP8[$121 >> 0] ^ HEAP8[$175 >> 0]; //@line 1034
   $179 = $$04056 + 14 | 0; //@line 1035
   HEAP8[$179 >> 0] = HEAP8[$122 >> 0] ^ HEAP8[$179 >> 0]; //@line 1039
   $183 = $$04056 + 15 | 0; //@line 1040
   HEAP8[$183 >> 0] = HEAP8[$123 >> 0] ^ HEAP8[$183 >> 0]; //@line 1044
   dest = $3; //@line 1045
   src = $6; //@line 1045
   stop = dest + 16 | 0; //@line 1045
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1045
    dest = dest + 1 | 0; //@line 1045
    src = src + 1 | 0; //@line 1045
   } while ((dest | 0) < (stop | 0));
   $$04554 = $$04554 + -16 | 0; //@line 1048
   if (!$$04554) {
    $$044 = 0; //@line 1051
    break;
   } else {
    $$04056 = $$04056 + 16 | 0; //@line 1054
    $$04255 = $$04255 + 16 | 0; //@line 1054
   }
  }
  STACKTOP = sp; //@line 1057
  return $$044 | 0; //@line 1057
 }
 if ($10) {
  $$044 = 0; //@line 1060
  STACKTOP = sp; //@line 1061
  return $$044 | 0; //@line 1061
 }
 $12 = $3 + 1 | 0; //@line 1064
 $13 = $3 + 2 | 0; //@line 1065
 $14 = $3 + 3 | 0; //@line 1066
 $15 = $3 + 4 | 0; //@line 1067
 $16 = $3 + 5 | 0; //@line 1068
 $17 = $3 + 6 | 0; //@line 1069
 $18 = $3 + 7 | 0; //@line 1070
 $19 = $3 + 8 | 0; //@line 1071
 $20 = $3 + 9 | 0; //@line 1072
 $21 = $3 + 10 | 0; //@line 1073
 $22 = $3 + 11 | 0; //@line 1074
 $23 = $3 + 12 | 0; //@line 1075
 $24 = $3 + 13 | 0; //@line 1076
 $25 = $3 + 14 | 0; //@line 1077
 $26 = $3 + 15 | 0; //@line 1078
 if (($1 | 0) == 1) {
  $$14160$us = $5; //@line 1080
  $$14359$us = $4; //@line 1080
  $$14658$us = $2; //@line 1080
  while (1) {
   HEAP8[$$14160$us >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359$us >> 0]; //@line 1085
   HEAP8[$$14160$us + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359$us + 1 >> 0]; //@line 1091
   HEAP8[$$14160$us + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359$us + 2 >> 0]; //@line 1097
   HEAP8[$$14160$us + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359$us + 3 >> 0]; //@line 1103
   HEAP8[$$14160$us + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359$us + 4 >> 0]; //@line 1109
   HEAP8[$$14160$us + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359$us + 5 >> 0]; //@line 1115
   HEAP8[$$14160$us + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359$us + 6 >> 0]; //@line 1121
   HEAP8[$$14160$us + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359$us + 7 >> 0]; //@line 1127
   HEAP8[$$14160$us + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359$us + 8 >> 0]; //@line 1133
   HEAP8[$$14160$us + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359$us + 9 >> 0]; //@line 1139
   HEAP8[$$14160$us + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359$us + 10 >> 0]; //@line 1145
   HEAP8[$$14160$us + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359$us + 11 >> 0]; //@line 1151
   HEAP8[$$14160$us + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359$us + 12 >> 0]; //@line 1157
   HEAP8[$$14160$us + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359$us + 13 >> 0]; //@line 1163
   HEAP8[$$14160$us + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359$us + 14 >> 0]; //@line 1169
   HEAP8[$$14160$us + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359$us + 15 >> 0]; //@line 1175
   _mbedtls_internal_aes_encrypt($0, $$14160$us, $$14160$us) | 0; //@line 1176
   dest = $3; //@line 1177
   src = $$14160$us; //@line 1177
   stop = dest + 16 | 0; //@line 1177
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1177
    dest = dest + 1 | 0; //@line 1177
    src = src + 1 | 0; //@line 1177
   } while ((dest | 0) < (stop | 0));
   $$14658$us = $$14658$us + -16 | 0; //@line 1180
   if (!$$14658$us) {
    $$044 = 0; //@line 1183
    break;
   } else {
    $$14160$us = $$14160$us + 16 | 0; //@line 1186
    $$14359$us = $$14359$us + 16 | 0; //@line 1186
   }
  }
  STACKTOP = sp; //@line 1189
  return $$044 | 0; //@line 1189
 } else {
  $$14160 = $5; //@line 1191
  $$14359 = $4; //@line 1191
  $$14658 = $2; //@line 1191
  while (1) {
   HEAP8[$$14160 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359 >> 0]; //@line 1196
   HEAP8[$$14160 + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359 + 1 >> 0]; //@line 1202
   HEAP8[$$14160 + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359 + 2 >> 0]; //@line 1208
   HEAP8[$$14160 + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359 + 3 >> 0]; //@line 1214
   HEAP8[$$14160 + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359 + 4 >> 0]; //@line 1220
   HEAP8[$$14160 + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359 + 5 >> 0]; //@line 1226
   HEAP8[$$14160 + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359 + 6 >> 0]; //@line 1232
   HEAP8[$$14160 + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359 + 7 >> 0]; //@line 1238
   HEAP8[$$14160 + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359 + 8 >> 0]; //@line 1244
   HEAP8[$$14160 + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359 + 9 >> 0]; //@line 1250
   HEAP8[$$14160 + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359 + 10 >> 0]; //@line 1256
   HEAP8[$$14160 + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359 + 11 >> 0]; //@line 1262
   HEAP8[$$14160 + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359 + 12 >> 0]; //@line 1268
   HEAP8[$$14160 + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359 + 13 >> 0]; //@line 1274
   HEAP8[$$14160 + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359 + 14 >> 0]; //@line 1280
   HEAP8[$$14160 + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359 + 15 >> 0]; //@line 1286
   _mbedtls_internal_aes_decrypt($0, $$14160, $$14160) | 0; //@line 1287
   dest = $3; //@line 1288
   src = $$14160; //@line 1288
   stop = dest + 16 | 0; //@line 1288
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1288
    dest = dest + 1 | 0; //@line 1288
    src = src + 1 | 0; //@line 1288
   } while ((dest | 0) < (stop | 0));
   $$14658 = $$14658 + -16 | 0; //@line 1291
   if (!$$14658) {
    $$044 = 0; //@line 1294
    break;
   } else {
    $$14160 = $$14160 + 16 | 0; //@line 1297
    $$14359 = $$14359 + 16 | 0; //@line 1297
   }
  }
  STACKTOP = sp; //@line 1300
  return $$044 | 0; //@line 1300
 }
 return 0; //@line 1302
}
function _schedule_interrupt($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $1 = 0, $10 = 0, $104 = 0, $107 = 0, $109 = 0, $11 = 0, $112 = 0, $113 = 0, $115 = 0, $118 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $144 = 0, $146 = 0, $148 = 0, $151 = 0, $153 = 0, $160 = 0, $161 = 0, $164 = 0, $166 = 0, $168 = 0, $174 = 0, $175 = 0, $179 = 0, $187 = 0, $19 = 0, $195 = 0, $198 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $35 = 0, $36 = 0, $37 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $69 = 0, $70 = 0, $71 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $88 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4933
 $1 = $0 + 4 | 0; //@line 4934
 $2 = HEAP32[$1 >> 2] | 0; //@line 4935
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 4938
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4939
 $6 = FUNCTION_TABLE_i[$5 & 7]() | 0; //@line 4940
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 704; //@line 4943
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4945
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 4947
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 4949
  sp = STACKTOP; //@line 4950
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4953
 $10 = HEAP32[$1 >> 2] | 0; //@line 4954
 $11 = $10 + 32 | 0; //@line 4955
 if (($6 | 0) != (HEAP32[$11 >> 2] | 0)) {
  $14 = $2 + 32 | 0; //@line 4959
  $19 = $6 - (HEAP32[$14 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 4964
  HEAP32[$14 >> 2] = $6; //@line 4965
  $21 = HEAP32[$2 + 8 >> 2] | 0; //@line 4967
  L6 : do {
   if (($21 | 0) < 1e6) {
    switch ($21 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 7; //@line 4976
      break L6;
     }
    }
    $22 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 4980
    $24 = _bitshift64Lshr($22 | 0, tempRet0 | 0, 15) | 0; //@line 4982
    $25 = tempRet0; //@line 4983
    $28 = $2 + 40 | 0; //@line 4986
    $29 = $28; //@line 4987
    $35 = _i64Add(HEAP32[$29 >> 2] | 0, HEAP32[$29 + 4 >> 2] | 0, $19 * 1e6 & 32704 | 0, 0) | 0; //@line 4993
    $36 = tempRet0; //@line 4994
    $37 = $28; //@line 4995
    HEAP32[$37 >> 2] = $35; //@line 4997
    HEAP32[$37 + 4 >> 2] = $36; //@line 5000
    if ($36 >>> 0 < 0 | ($36 | 0) == 0 & $35 >>> 0 < 32768) {
     $95 = $24; //@line 5007
     $96 = $25; //@line 5007
    } else {
     $46 = _i64Add($24 | 0, $25 | 0, 1, 0) | 0; //@line 5009
     $47 = tempRet0; //@line 5010
     $48 = _i64Add($35 | 0, $36 | 0, -32768, -1) | 0; //@line 5011
     $50 = $28; //@line 5013
     HEAP32[$50 >> 2] = $48; //@line 5015
     HEAP32[$50 + 4 >> 2] = tempRet0; //@line 5018
     $95 = $46; //@line 5019
     $96 = $47; //@line 5019
    }
   } else {
    switch ($21 | 0) {
    case 1e6:
     {
      $95 = $19; //@line 5024
      $96 = 0; //@line 5024
      break;
     }
    default:
     {
      label = 7; //@line 5028
     }
    }
   }
  } while (0);
  if ((label | 0) == 7) {
   $54 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5034
   $55 = tempRet0; //@line 5035
   $56 = ___udivdi3($54 | 0, $55 | 0, $21 | 0, 0) | 0; //@line 5036
   $57 = tempRet0; //@line 5037
   $58 = ___muldi3($56 | 0, $57 | 0, $21 | 0, 0) | 0; //@line 5038
   $60 = _i64Subtract($54 | 0, $55 | 0, $58 | 0, tempRet0 | 0) | 0; //@line 5040
   $62 = $2 + 40 | 0; //@line 5042
   $63 = $62; //@line 5043
   $69 = _i64Add($60 | 0, tempRet0 | 0, HEAP32[$63 >> 2] | 0, HEAP32[$63 + 4 >> 2] | 0) | 0; //@line 5049
   $70 = tempRet0; //@line 5050
   $71 = $62; //@line 5051
   HEAP32[$71 >> 2] = $69; //@line 5053
   HEAP32[$71 + 4 >> 2] = $70; //@line 5056
   if ($70 >>> 0 < 0 | ($70 | 0) == 0 & $69 >>> 0 < $21 >>> 0) {
    $95 = $56; //@line 5063
    $96 = $57; //@line 5063
   } else {
    $80 = _i64Add($56 | 0, $57 | 0, 1, 0) | 0; //@line 5065
    $81 = tempRet0; //@line 5066
    $82 = _i64Subtract($69 | 0, $70 | 0, $21 | 0, 0) | 0; //@line 5067
    $84 = $62; //@line 5069
    HEAP32[$84 >> 2] = $82; //@line 5071
    HEAP32[$84 + 4 >> 2] = tempRet0; //@line 5074
    $95 = $80; //@line 5075
    $96 = $81; //@line 5075
   }
  }
  $88 = $2 + 48 | 0; //@line 5078
  $89 = $88; //@line 5079
  $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 5085
  $99 = $88; //@line 5087
  HEAP32[$99 >> 2] = $97; //@line 5089
  HEAP32[$99 + 4 >> 2] = tempRet0; //@line 5092
 }
 $104 = HEAP32[$10 + 4 >> 2] | 0; //@line 5095
 if (!$104) {
  $195 = (HEAP32[$2 + 16 >> 2] | 0) + (HEAP32[$2 + 32 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 5105
  $198 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 5108
  $AsyncCtx22 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5109
  FUNCTION_TABLE_vi[$198 & 1023]($195); //@line 5110
  if (___async) {
   HEAP32[$AsyncCtx22 >> 2] = 710; //@line 5113
   sp = STACKTOP; //@line 5114
   return;
  } else {
   _emscripten_free_async_context($AsyncCtx22 | 0); //@line 5117
   return;
  }
 }
 $107 = $10 + 48 | 0; //@line 5122
 $109 = HEAP32[$107 >> 2] | 0; //@line 5124
 $112 = HEAP32[$107 + 4 >> 2] | 0; //@line 5127
 $113 = $104; //@line 5128
 $115 = HEAP32[$113 >> 2] | 0; //@line 5130
 $118 = HEAP32[$113 + 4 >> 2] | 0; //@line 5133
 if (!($118 >>> 0 > $112 >>> 0 | ($118 | 0) == ($112 | 0) & $115 >>> 0 > $109 >>> 0)) {
  $126 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 5142
  $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5143
  FUNCTION_TABLE_v[$126 & 15](); //@line 5144
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 705; //@line 5147
   sp = STACKTOP; //@line 5148
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5151
  return;
 }
 $127 = _i64Subtract($115 | 0, $118 | 0, $109 | 0, $112 | 0) | 0; //@line 5154
 $128 = tempRet0; //@line 5155
 $130 = HEAP32[$10 + 16 >> 2] | 0; //@line 5157
 $132 = $10 + 24 | 0; //@line 5159
 $137 = HEAP32[$132 + 4 >> 2] | 0; //@line 5164
 L29 : do {
  if ($128 >>> 0 > $137 >>> 0 | (($128 | 0) == ($137 | 0) ? $127 >>> 0 > (HEAP32[$132 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $130; //@line 5172
  } else {
   $144 = HEAP32[$10 + 8 >> 2] | 0; //@line 5175
   L31 : do {
    if (($144 | 0) < 1e6) {
     switch ($144 | 0) {
     case 32768:
      {
       break;
      }
     default:
      {
       break L31;
      }
     }
     $146 = _bitshift64Shl($127 | 0, $128 | 0, 15) | 0; //@line 5187
     $148 = ___udivdi3($146 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 5189
     $$0$i = $130 >>> 0 < $148 >>> 0 ? $130 : $148; //@line 5193
     break L29;
    } else {
     switch ($144 | 0) {
     case 1e6:
      {
       break;
      }
     default:
      {
       break L31;
      }
     }
     $$0$i = $130 >>> 0 < $127 >>> 0 ? $130 : $127; //@line 5206
     break L29;
    }
   } while (0);
   $151 = ___muldi3($127 | 0, $128 | 0, $144 | 0, 0) | 0; //@line 5210
   $153 = ___udivdi3($151 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 5212
   $$0$i = $130 >>> 0 < $153 >>> 0 ? $130 : $153; //@line 5216
  }
 } while (0);
 $160 = (HEAP32[$11 >> 2] | 0) + $$0$i & HEAP32[$10 + 12 >> 2]; //@line 5223
 $161 = $2 + 32 | 0; //@line 5224
 $164 = HEAP32[$0 >> 2] | 0; //@line 5227
 if (($160 | 0) == (HEAP32[$161 >> 2] | 0)) {
  $166 = HEAP32[$164 + 20 >> 2] | 0; //@line 5230
  $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5231
  FUNCTION_TABLE_v[$166 & 15](); //@line 5232
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 706; //@line 5235
   sp = STACKTOP; //@line 5236
   return;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5239
  return;
 }
 $168 = HEAP32[$164 + 16 >> 2] | 0; //@line 5243
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5244
 FUNCTION_TABLE_vi[$168 & 1023]($160); //@line 5245
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 707; //@line 5248
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 5250
  HEAP32[$AsyncCtx11 + 8 >> 2] = $161; //@line 5252
  HEAP32[$AsyncCtx11 + 12 >> 2] = $160; //@line 5254
  sp = STACKTOP; //@line 5255
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5258
 $174 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5261
 $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5262
 $175 = FUNCTION_TABLE_i[$174 & 7]() | 0; //@line 5263
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 708; //@line 5266
  HEAP32[$AsyncCtx14 + 4 >> 2] = $161; //@line 5268
  HEAP32[$AsyncCtx14 + 8 >> 2] = $160; //@line 5270
  HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 5272
  sp = STACKTOP; //@line 5273
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 5276
 $179 = HEAP32[$161 >> 2] | 0; //@line 5277
 if ($160 >>> 0 > $179 >>> 0) {
  if (!($175 >>> 0 >= $160 >>> 0 | $175 >>> 0 < $179 >>> 0)) {
   return;
  }
 } else {
  if (!($175 >>> 0 >= $160 >>> 0 & $175 >>> 0 < $179 >>> 0)) {
   return;
  }
 }
 $187 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 5296
 $AsyncCtx18 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5297
 FUNCTION_TABLE_v[$187 & 15](); //@line 5298
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 709; //@line 5301
  sp = STACKTOP; //@line 5302
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 5305
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$038 = 0, $$040 = 0, $101 = 0, $104 = 0, $11 = 0, $112 = 0, $115 = 0, $118 = 0, $122 = 0, $125 = 0, $136 = 0, $139 = 0, $142 = 0, $146 = 0, $149 = 0, $18 = 0, $21 = 0, $22 = 0, $29 = 0, $30 = 0, $33 = 0, $4 = 0, $45 = 0, $47 = 0, $51 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $65 = 0, $7 = 0, $76 = 0, $79 = 0, $8 = 0, $93 = 0, $96 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 23929
 $4 = HEAP8[$1 + 1 >> 0] | 0; //@line 23931
 $6 = HEAP32[$1 + 4 >> 2] | 0; //@line 23933
 $7 = $0 + 4 | 0; //@line 23934
 $8 = HEAP32[$7 >> 2] | 0; //@line 23935
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 72 >> 2] | 0; //@line 23938
 $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 23939
 FUNCTION_TABLE_vi[$11 & 1023]($8); //@line 23940
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 617; //@line 23943
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 23945
  HEAP32[$AsyncCtx + 8 >> 2] = $7; //@line 23947
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 23949
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 23951
  HEAP8[$AsyncCtx + 20 >> 0] = $4; //@line 23953
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 23955
  sp = STACKTOP; //@line 23956
  return 0; //@line 23957
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 23959
 $18 = HEAP32[$7 >> 2] | 0; //@line 23960
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 40 >> 2] | 0; //@line 23963
 $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 23964
 $22 = FUNCTION_TABLE_ii[$21 & 15]($18) | 0; //@line 23965
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 618; //@line 23968
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 23970
  HEAP32[$AsyncCtx2 + 8 >> 2] = $7; //@line 23972
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 23974
  HEAP32[$AsyncCtx2 + 16 >> 2] = $6; //@line 23976
  HEAP8[$AsyncCtx2 + 20 >> 0] = $4; //@line 23978
  HEAP32[$AsyncCtx2 + 24 >> 2] = $2; //@line 23980
  sp = STACKTOP; //@line 23981
  return 0; //@line 23982
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 23984
 $29 = $22 << 24 >> 24 == 0; //@line 23985
 $30 = HEAP32[$7 >> 2] | 0; //@line 23986
 $33 = HEAP32[(HEAP32[$30 >> 2] | 0) + 76 >> 2] | 0; //@line 23989
 $AsyncCtx5 = _emscripten_alloc_async_context(28, sp) | 0; //@line 23990
 FUNCTION_TABLE_vi[$33 & 1023]($30); //@line 23991
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 619; //@line 23994
  HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 23996
  HEAP32[$AsyncCtx5 + 8 >> 2] = $7; //@line 23998
  HEAP32[$AsyncCtx5 + 12 >> 2] = $0; //@line 24000
  HEAP32[$AsyncCtx5 + 16 >> 2] = $6; //@line 24002
  HEAP8[$AsyncCtx5 + 20 >> 0] = $4; //@line 24004
  HEAP8[$AsyncCtx5 + 21 >> 0] = $29 & 1; //@line 24007
  HEAP32[$AsyncCtx5 + 24 >> 2] = $2; //@line 24009
  sp = STACKTOP; //@line 24010
  return 0; //@line 24011
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 24013
 if (!$29) {
  $$0 = 0; //@line 24015
  return $$0 | 0; //@line 24016
 }
 if (!(HEAP32[$1 + 20 >> 2] | 0)) {
  $45 = HEAP32[$0 + 112 >> 2] | 0; //@line 24023
  $47 = HEAPU8[$1 >> 0] | 0; //@line 24025
  $51 = HEAP32[$45 + ($47 * 12 | 0) + 4 >> 2] | 0; //@line 24029
  $$040 = ($51 | 0) == 0 ? HEAP32[$45 + ($47 * 12 | 0) >> 2] | 0 : $51; //@line 24032
 } else {
  $$040 = $6; //@line 24034
 }
 $56 = HEAP32[$0 + 96 >> 2] | 0; //@line 24039
 $58 = HEAP32[$0 + 104 >> 2] | 0; //@line 24041
 $59 = $4 & 255; //@line 24042
 $61 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $59 >> 0] | 0; //@line 24044
 $62 = HEAP32[$7 >> 2] | 0; //@line 24045
 $65 = HEAP32[(HEAP32[$62 >> 2] | 0) + 72 >> 2] | 0; //@line 24048
 $AsyncCtx9 = _emscripten_alloc_async_context(44, sp) | 0; //@line 24049
 FUNCTION_TABLE_vi[$65 & 1023]($62); //@line 24050
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 620; //@line 24053
  HEAP32[$AsyncCtx9 + 4 >> 2] = $7; //@line 24055
  HEAP32[$AsyncCtx9 + 8 >> 2] = $$040; //@line 24057
  HEAP8[$AsyncCtx9 + 12 >> 0] = $4; //@line 24059
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 24061
  HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 24063
  HEAP8[$AsyncCtx9 + 24 >> 0] = $61; //@line 24065
  HEAP32[$AsyncCtx9 + 28 >> 2] = $56; //@line 24067
  HEAP32[$AsyncCtx9 + 32 >> 2] = $58; //@line 24069
  HEAP32[$AsyncCtx9 + 36 >> 2] = $59; //@line 24071
  HEAP32[$AsyncCtx9 + 40 >> 2] = $2; //@line 24073
  sp = STACKTOP; //@line 24074
  return 0; //@line 24075
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 24077
 $76 = HEAP32[$7 >> 2] | 0; //@line 24078
 $79 = HEAP32[(HEAP32[$76 >> 2] | 0) + 32 >> 2] | 0; //@line 24081
 $AsyncCtx12 = _emscripten_alloc_async_context(40, sp) | 0; //@line 24082
 FUNCTION_TABLE_vii[$79 & 31]($76, $$040); //@line 24083
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 621; //@line 24086
  HEAP8[$AsyncCtx12 + 4 >> 0] = $4; //@line 24088
  HEAP32[$AsyncCtx12 + 8 >> 2] = $0; //@line 24090
  HEAP32[$AsyncCtx12 + 12 >> 2] = $7; //@line 24092
  HEAP32[$AsyncCtx12 + 16 >> 2] = $1; //@line 24094
  HEAP8[$AsyncCtx12 + 20 >> 0] = $61; //@line 24096
  HEAP32[$AsyncCtx12 + 24 >> 2] = $56; //@line 24098
  HEAP32[$AsyncCtx12 + 28 >> 2] = $58; //@line 24100
  HEAP32[$AsyncCtx12 + 32 >> 2] = $59; //@line 24102
  HEAP32[$AsyncCtx12 + 36 >> 2] = $2; //@line 24104
  sp = STACKTOP; //@line 24105
  return 0; //@line 24106
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 24108
 do {
  if ($4 << 24 >> 24 == 7) {
   if (!(HEAP8[$0 + 14 >> 0] | 0)) {
    label = 19; //@line 24116
   } else {
    $93 = HEAP32[$7 >> 2] | 0; //@line 24118
    $96 = HEAP32[(HEAP32[$93 >> 2] | 0) + 16 >> 2] | 0; //@line 24121
    $101 = HEAP32[$1 + 8 >> 2] & 65535; //@line 24126
    $104 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 24129
    $AsyncCtx16 = _emscripten_alloc_async_context(32, sp) | 0; //@line 24130
    FUNCTION_TABLE_viiiiiiiiiiiiiii[$96 & 1]($93, 0, 5e4, ($61 & 255) * 1e3 | 0, 0, 83333, 5, $101, 0, 0, 1, 0, 0, 0, $104); //@line 24131
    if (___async) {
     HEAP32[$AsyncCtx16 >> 2] = 622; //@line 24134
     HEAP32[$AsyncCtx16 + 4 >> 2] = $1; //@line 24136
     HEAP32[$AsyncCtx16 + 8 >> 2] = $56; //@line 24138
     HEAP32[$AsyncCtx16 + 12 >> 2] = $58; //@line 24140
     HEAP32[$AsyncCtx16 + 16 >> 2] = $59; //@line 24142
     HEAP32[$AsyncCtx16 + 20 >> 2] = $7; //@line 24144
     HEAP8[$AsyncCtx16 + 24 >> 0] = $61; //@line 24146
     HEAP32[$AsyncCtx16 + 28 >> 2] = $2; //@line 24148
     sp = STACKTOP; //@line 24149
     return 0; //@line 24150
    } else {
     _emscripten_free_async_context($AsyncCtx16 | 0); //@line 24152
     $$038 = 0; //@line 24153
     break;
    }
   }
  } else {
   label = 19; //@line 24158
  }
 } while (0);
 do {
  if ((label | 0) == 19) {
   $112 = HEAP32[$7 >> 2] | 0; //@line 24163
   $115 = HEAP32[(HEAP32[$112 >> 2] | 0) + 16 >> 2] | 0; //@line 24166
   $118 = HEAPU8[$1 + 2 >> 0] | 0; //@line 24169
   $122 = HEAP32[$1 + 8 >> 2] & 65535; //@line 24173
   $125 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 24176
   $AsyncCtx20 = _emscripten_alloc_async_context(32, sp) | 0; //@line 24177
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$115 & 1]($112, 1, $118, $61 & 255, 1, 0, 8, $122, 0, 0, 0, 0, 0, 1, $125); //@line 24178
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 623; //@line 24181
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 24183
    HEAP32[$AsyncCtx20 + 8 >> 2] = $56; //@line 24185
    HEAP32[$AsyncCtx20 + 12 >> 2] = $58; //@line 24187
    HEAP32[$AsyncCtx20 + 16 >> 2] = $59; //@line 24189
    HEAP32[$AsyncCtx20 + 20 >> 2] = $7; //@line 24191
    HEAP8[$AsyncCtx20 + 24 >> 0] = $61; //@line 24193
    HEAP32[$AsyncCtx20 + 28 >> 2] = $2; //@line 24195
    sp = STACKTOP; //@line 24196
    return 0; //@line 24197
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 24199
    $$038 = 1; //@line 24200
    break;
   }
  }
 } while (0);
 $136 = HEAP32[$7 >> 2] | 0; //@line 24211
 $139 = HEAP32[(HEAP32[$136 >> 2] | 0) + 44 >> 2] | 0; //@line 24214
 $142 = (HEAPU8[((HEAP8[$1 + 17 >> 0] | 0) == 0 ? $56 : $58) + $59 >> 0] | 0) + 13 & 255; //@line 24217
 $AsyncCtx24 = _emscripten_alloc_async_context(16, sp) | 0; //@line 24218
 FUNCTION_TABLE_viii[$139 & 7]($136, $$038, $142); //@line 24219
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 624; //@line 24222
  HEAP32[$AsyncCtx24 + 4 >> 2] = $7; //@line 24224
  HEAP8[$AsyncCtx24 + 8 >> 0] = $61; //@line 24226
  HEAP32[$AsyncCtx24 + 12 >> 2] = $2; //@line 24228
  sp = STACKTOP; //@line 24229
  return 0; //@line 24230
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 24232
 $146 = HEAP32[$7 >> 2] | 0; //@line 24233
 $149 = HEAP32[(HEAP32[$146 >> 2] | 0) + 76 >> 2] | 0; //@line 24236
 $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 24237
 FUNCTION_TABLE_vi[$149 & 1023]($146); //@line 24238
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 625; //@line 24241
  HEAP8[$AsyncCtx27 + 4 >> 0] = $61; //@line 24243
  HEAP32[$AsyncCtx27 + 8 >> 2] = $2; //@line 24245
  sp = STACKTOP; //@line 24246
  return 0; //@line 24247
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 24249
 HEAP8[$2 >> 0] = $61; //@line 24250
 $$0 = 1; //@line 24251
 return $$0 | 0; //@line 24252
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31438
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31440
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31442
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31444
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31446
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31448
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31450
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31452
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31454
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31456
 $$pre = HEAP32[$6 >> 2] | 0; //@line 31457
 if ($$pre | 0) {
  $21 = HEAP32[$$pre + 4 >> 2] | 0; //@line 31461
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 31462
  FUNCTION_TABLE_vii[$21 & 31]($14, $16); //@line 31463
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 568; //@line 31466
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 31467
   HEAP32[$22 >> 2] = $2; //@line 31468
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 31469
   HEAP32[$23 >> 2] = $4; //@line 31470
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 31471
   HEAP32[$24 >> 2] = $6; //@line 31472
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 31473
   HEAP32[$25 >> 2] = $8; //@line 31474
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 31475
   HEAP32[$26 >> 2] = $10; //@line 31476
   $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 31477
   HEAP32[$27 >> 2] = $12; //@line 31478
   $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 31479
   HEAP32[$28 >> 2] = $14; //@line 31480
   $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 31481
   HEAP32[$29 >> 2] = $16; //@line 31482
   $30 = $ReallocAsyncCtx2 + 36 | 0; //@line 31483
   HEAP32[$30 >> 2] = $18; //@line 31484
   sp = STACKTOP; //@line 31485
   return;
  }
  ___async_unwind = 0; //@line 31488
  HEAP32[$ReallocAsyncCtx2 >> 2] = 568; //@line 31489
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 31490
  HEAP32[$22 >> 2] = $2; //@line 31491
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 31492
  HEAP32[$23 >> 2] = $4; //@line 31493
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 31494
  HEAP32[$24 >> 2] = $6; //@line 31495
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 31496
  HEAP32[$25 >> 2] = $8; //@line 31497
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 31498
  HEAP32[$26 >> 2] = $10; //@line 31499
  $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 31500
  HEAP32[$27 >> 2] = $12; //@line 31501
  $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 31502
  HEAP32[$28 >> 2] = $14; //@line 31503
  $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 31504
  HEAP32[$29 >> 2] = $16; //@line 31505
  $30 = $ReallocAsyncCtx2 + 36 | 0; //@line 31506
  HEAP32[$30 >> 2] = $18; //@line 31507
  sp = STACKTOP; //@line 31508
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 31511
 $31 = $18 + 12 | 0; //@line 31512
 HEAP32[$18 >> 2] = 7; //@line 31513
 HEAP32[$18 + 4 >> 2] = 0; //@line 31515
 HEAP32[$18 + 8 >> 2] = $4; //@line 31517
 HEAP32[$31 >> 2] = 860; //@line 31518
 $32 = $4 + 1244 | 0; //@line 31519
 if (($32 | 0) == ($18 | 0)) {
  $59 = HEAP32[217] | 0; //@line 31523
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 31524
  FUNCTION_TABLE_vi[$59 & 1023]($18); //@line 31525
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 572; //@line 31528
   $60 = $ReallocAsyncCtx6 + 4 | 0; //@line 31529
   HEAP32[$60 >> 2] = $2; //@line 31530
   $61 = $ReallocAsyncCtx6 + 8 | 0; //@line 31531
   HEAP32[$61 >> 2] = $4; //@line 31532
   $62 = $ReallocAsyncCtx6 + 12 | 0; //@line 31533
   HEAP32[$62 >> 2] = $10; //@line 31534
   $63 = $ReallocAsyncCtx6 + 16 | 0; //@line 31535
   HEAP32[$63 >> 2] = $18; //@line 31536
   $64 = $ReallocAsyncCtx6 + 20 | 0; //@line 31537
   HEAP32[$64 >> 2] = $12; //@line 31538
   $65 = $ReallocAsyncCtx6 + 24 | 0; //@line 31539
   HEAP32[$65 >> 2] = $14; //@line 31540
   sp = STACKTOP; //@line 31541
   return;
  }
  ___async_unwind = 0; //@line 31544
  HEAP32[$ReallocAsyncCtx6 >> 2] = 572; //@line 31545
  $60 = $ReallocAsyncCtx6 + 4 | 0; //@line 31546
  HEAP32[$60 >> 2] = $2; //@line 31547
  $61 = $ReallocAsyncCtx6 + 8 | 0; //@line 31548
  HEAP32[$61 >> 2] = $4; //@line 31549
  $62 = $ReallocAsyncCtx6 + 12 | 0; //@line 31550
  HEAP32[$62 >> 2] = $10; //@line 31551
  $63 = $ReallocAsyncCtx6 + 16 | 0; //@line 31552
  HEAP32[$63 >> 2] = $18; //@line 31553
  $64 = $ReallocAsyncCtx6 + 20 | 0; //@line 31554
  HEAP32[$64 >> 2] = $12; //@line 31555
  $65 = $ReallocAsyncCtx6 + 24 | 0; //@line 31556
  HEAP32[$65 >> 2] = $14; //@line 31557
  sp = STACKTOP; //@line 31558
  return;
 }
 $34 = $4 + 1256 | 0; //@line 31561
 $35 = HEAP32[$34 >> 2] | 0; //@line 31562
 if (!$35) {
  $49 = HEAP32[216] | 0; //@line 31566
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 31567
  FUNCTION_TABLE_vii[$49 & 31]($32, $18); //@line 31568
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 571; //@line 31571
   $50 = $ReallocAsyncCtx5 + 4 | 0; //@line 31572
   HEAP32[$50 >> 2] = $2; //@line 31573
   $51 = $ReallocAsyncCtx5 + 8 | 0; //@line 31574
   HEAP32[$51 >> 2] = $4; //@line 31575
   $52 = $ReallocAsyncCtx5 + 12 | 0; //@line 31576
   HEAP32[$52 >> 2] = $10; //@line 31577
   $53 = $ReallocAsyncCtx5 + 16 | 0; //@line 31578
   HEAP32[$53 >> 2] = $18; //@line 31579
   $54 = $ReallocAsyncCtx5 + 20 | 0; //@line 31580
   HEAP32[$54 >> 2] = $12; //@line 31581
   $55 = $ReallocAsyncCtx5 + 24 | 0; //@line 31582
   HEAP32[$55 >> 2] = $14; //@line 31583
   $56 = $ReallocAsyncCtx5 + 28 | 0; //@line 31584
   HEAP32[$56 >> 2] = $31; //@line 31585
   $57 = $ReallocAsyncCtx5 + 32 | 0; //@line 31586
   HEAP32[$57 >> 2] = $34; //@line 31587
   sp = STACKTOP; //@line 31588
   return;
  }
  ___async_unwind = 0; //@line 31591
  HEAP32[$ReallocAsyncCtx5 >> 2] = 571; //@line 31592
  $50 = $ReallocAsyncCtx5 + 4 | 0; //@line 31593
  HEAP32[$50 >> 2] = $2; //@line 31594
  $51 = $ReallocAsyncCtx5 + 8 | 0; //@line 31595
  HEAP32[$51 >> 2] = $4; //@line 31596
  $52 = $ReallocAsyncCtx5 + 12 | 0; //@line 31597
  HEAP32[$52 >> 2] = $10; //@line 31598
  $53 = $ReallocAsyncCtx5 + 16 | 0; //@line 31599
  HEAP32[$53 >> 2] = $18; //@line 31600
  $54 = $ReallocAsyncCtx5 + 20 | 0; //@line 31601
  HEAP32[$54 >> 2] = $12; //@line 31602
  $55 = $ReallocAsyncCtx5 + 24 | 0; //@line 31603
  HEAP32[$55 >> 2] = $14; //@line 31604
  $56 = $ReallocAsyncCtx5 + 28 | 0; //@line 31605
  HEAP32[$56 >> 2] = $31; //@line 31606
  $57 = $ReallocAsyncCtx5 + 32 | 0; //@line 31607
  HEAP32[$57 >> 2] = $34; //@line 31608
  sp = STACKTOP; //@line 31609
  return;
 } else {
  $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 31613
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 31614
  FUNCTION_TABLE_vi[$38 & 1023]($32); //@line 31615
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 570; //@line 31618
   $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 31619
   HEAP32[$39 >> 2] = $2; //@line 31620
   $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 31621
   HEAP32[$40 >> 2] = $4; //@line 31622
   $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 31623
   HEAP32[$41 >> 2] = $10; //@line 31624
   $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 31625
   HEAP32[$42 >> 2] = $31; //@line 31626
   $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 31627
   HEAP32[$43 >> 2] = $32; //@line 31628
   $44 = $ReallocAsyncCtx4 + 24 | 0; //@line 31629
   HEAP32[$44 >> 2] = $18; //@line 31630
   $45 = $ReallocAsyncCtx4 + 28 | 0; //@line 31631
   HEAP32[$45 >> 2] = $12; //@line 31632
   $46 = $ReallocAsyncCtx4 + 32 | 0; //@line 31633
   HEAP32[$46 >> 2] = $34; //@line 31634
   $47 = $ReallocAsyncCtx4 + 36 | 0; //@line 31635
   HEAP32[$47 >> 2] = $14; //@line 31636
   sp = STACKTOP; //@line 31637
   return;
  }
  ___async_unwind = 0; //@line 31640
  HEAP32[$ReallocAsyncCtx4 >> 2] = 570; //@line 31641
  $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 31642
  HEAP32[$39 >> 2] = $2; //@line 31643
  $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 31644
  HEAP32[$40 >> 2] = $4; //@line 31645
  $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 31646
  HEAP32[$41 >> 2] = $10; //@line 31647
  $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 31648
  HEAP32[$42 >> 2] = $31; //@line 31649
  $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 31650
  HEAP32[$43 >> 2] = $32; //@line 31651
  $44 = $ReallocAsyncCtx4 + 24 | 0; //@line 31652
  HEAP32[$44 >> 2] = $18; //@line 31653
  $45 = $ReallocAsyncCtx4 + 28 | 0; //@line 31654
  HEAP32[$45 >> 2] = $12; //@line 31655
  $46 = $ReallocAsyncCtx4 + 32 | 0; //@line 31656
  HEAP32[$46 >> 2] = $34; //@line 31657
  $47 = $ReallocAsyncCtx4 + 36 | 0; //@line 31658
  HEAP32[$47 >> 2] = $14; //@line 31659
  sp = STACKTOP; //@line 31660
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $37 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $68 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22127
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22129
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22133
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22135
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 22137
 $12 = HEAP16[$0 + 22 >> 1] | 0; //@line 22139
 $14 = HEAP8[$0 + 24 >> 0] | 0; //@line 22141
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 22143
 $$pre$i = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 22144
 $17 = $2 + 12 | 0; //@line 22145
 HEAP32[$17 >> 2] = $$pre$i; //@line 22146
 if ($$pre$i | 0) {
  $20 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 22151
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 22152
  FUNCTION_TABLE_vii[$20 & 31]($6, $2); //@line 22153
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 411; //@line 22156
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 22157
   HEAP32[$21 >> 2] = $17; //@line 22158
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 22159
   HEAP32[$22 >> 2] = $2; //@line 22160
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 22161
   HEAP32[$23 >> 2] = $6; //@line 22162
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 22163
   HEAP32[$24 >> 2] = $17; //@line 22164
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 22165
   HEAP32[$25 >> 2] = $8; //@line 22166
   $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 22167
   HEAP16[$26 >> 1] = $10; //@line 22168
   $27 = $ReallocAsyncCtx2 + 26 | 0; //@line 22169
   HEAP16[$27 >> 1] = $12; //@line 22170
   $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 22171
   HEAP8[$28 >> 0] = $14; //@line 22172
   $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 22173
   HEAP32[$29 >> 2] = $16; //@line 22174
   sp = STACKTOP; //@line 22175
   return;
  }
  ___async_unwind = 0; //@line 22178
  HEAP32[$ReallocAsyncCtx2 >> 2] = 411; //@line 22179
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 22180
  HEAP32[$21 >> 2] = $17; //@line 22181
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 22182
  HEAP32[$22 >> 2] = $2; //@line 22183
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 22184
  HEAP32[$23 >> 2] = $6; //@line 22185
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 22186
  HEAP32[$24 >> 2] = $17; //@line 22187
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 22188
  HEAP32[$25 >> 2] = $8; //@line 22189
  $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 22190
  HEAP16[$26 >> 1] = $10; //@line 22191
  $27 = $ReallocAsyncCtx2 + 26 | 0; //@line 22192
  HEAP16[$27 >> 1] = $12; //@line 22193
  $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 22194
  HEAP8[$28 >> 0] = $14; //@line 22195
  $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 22196
  HEAP32[$29 >> 2] = $16; //@line 22197
  sp = STACKTOP; //@line 22198
  return;
 }
 $30 = $6 + 12 | 0; //@line 22201
 HEAP32[$30 >> 2] = 0; //@line 22202
 $31 = $6 + 16 | 0; //@line 22203
 HEAP32[$31 >> 2] = $8; //@line 22204
 HEAP16[$6 + 20 >> 1] = $10; //@line 22206
 HEAP16[$6 + 22 >> 1] = $12; //@line 22208
 HEAP8[$6 + 24 >> 0] = $14; //@line 22210
 $35 = _equeue_alloc($16, 28) | 0; //@line 22211
 if ($35 | 0) {
  $37 = HEAP32[$30 >> 2] | 0; //@line 22214
  if (!$37) {
   HEAP32[$35 + 12 >> 2] = 0; //@line 22218
   $50 = $35 + 16 | 0; //@line 22219
   HEAP32[$50 >> 2] = HEAP32[$31 >> 2]; //@line 22220
   HEAP32[$50 + 4 >> 2] = HEAP32[$31 + 4 >> 2]; //@line 22220
   HEAP8[$50 + 8 >> 0] = HEAP8[$31 + 8 >> 0] | 0; //@line 22220
   _equeue_event_dtor($35, 413); //@line 22221
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 22222
   $51 = _equeue_post($16, 414, $35) | 0; //@line 22223
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 415; //@line 22226
    $52 = $ReallocAsyncCtx6 + 4 | 0; //@line 22227
    HEAP32[$52 >> 2] = $30; //@line 22228
    $53 = $ReallocAsyncCtx6 + 8 | 0; //@line 22229
    HEAP32[$53 >> 2] = $17; //@line 22230
    $54 = $ReallocAsyncCtx6 + 12 | 0; //@line 22231
    HEAP32[$54 >> 2] = $6; //@line 22232
    $55 = $ReallocAsyncCtx6 + 16 | 0; //@line 22233
    HEAP32[$55 >> 2] = $2; //@line 22234
    sp = STACKTOP; //@line 22235
    return;
   }
   HEAP32[___async_retval >> 2] = $51; //@line 22239
   ___async_unwind = 0; //@line 22240
   HEAP32[$ReallocAsyncCtx6 >> 2] = 415; //@line 22241
   $52 = $ReallocAsyncCtx6 + 4 | 0; //@line 22242
   HEAP32[$52 >> 2] = $30; //@line 22243
   $53 = $ReallocAsyncCtx6 + 8 | 0; //@line 22244
   HEAP32[$53 >> 2] = $17; //@line 22245
   $54 = $ReallocAsyncCtx6 + 12 | 0; //@line 22246
   HEAP32[$54 >> 2] = $6; //@line 22247
   $55 = $ReallocAsyncCtx6 + 16 | 0; //@line 22248
   HEAP32[$55 >> 2] = $2; //@line 22249
   sp = STACKTOP; //@line 22250
   return;
  } else {
   $40 = HEAP32[$37 + 4 >> 2] | 0; //@line 22254
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 22255
   FUNCTION_TABLE_vii[$40 & 31]($35, $6); //@line 22256
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 412; //@line 22259
    $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 22260
    HEAP32[$41 >> 2] = $30; //@line 22261
    $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 22262
    HEAP32[$42 >> 2] = $35; //@line 22263
    $43 = $ReallocAsyncCtx3 + 12 | 0; //@line 22264
    HEAP32[$43 >> 2] = $31; //@line 22265
    $44 = $ReallocAsyncCtx3 + 16 | 0; //@line 22266
    HEAP32[$44 >> 2] = $16; //@line 22267
    $45 = $ReallocAsyncCtx3 + 20 | 0; //@line 22268
    HEAP32[$45 >> 2] = $30; //@line 22269
    $46 = $ReallocAsyncCtx3 + 24 | 0; //@line 22270
    HEAP32[$46 >> 2] = $17; //@line 22271
    $47 = $ReallocAsyncCtx3 + 28 | 0; //@line 22272
    HEAP32[$47 >> 2] = $6; //@line 22273
    $48 = $ReallocAsyncCtx3 + 32 | 0; //@line 22274
    HEAP32[$48 >> 2] = $2; //@line 22275
    sp = STACKTOP; //@line 22276
    return;
   }
   ___async_unwind = 0; //@line 22279
   HEAP32[$ReallocAsyncCtx3 >> 2] = 412; //@line 22280
   $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 22281
   HEAP32[$41 >> 2] = $30; //@line 22282
   $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 22283
   HEAP32[$42 >> 2] = $35; //@line 22284
   $43 = $ReallocAsyncCtx3 + 12 | 0; //@line 22285
   HEAP32[$43 >> 2] = $31; //@line 22286
   $44 = $ReallocAsyncCtx3 + 16 | 0; //@line 22287
   HEAP32[$44 >> 2] = $16; //@line 22288
   $45 = $ReallocAsyncCtx3 + 20 | 0; //@line 22289
   HEAP32[$45 >> 2] = $30; //@line 22290
   $46 = $ReallocAsyncCtx3 + 24 | 0; //@line 22291
   HEAP32[$46 >> 2] = $17; //@line 22292
   $47 = $ReallocAsyncCtx3 + 28 | 0; //@line 22293
   HEAP32[$47 >> 2] = $6; //@line 22294
   $48 = $ReallocAsyncCtx3 + 32 | 0; //@line 22295
   HEAP32[$48 >> 2] = $2; //@line 22296
   sp = STACKTOP; //@line 22297
   return;
  }
 }
 $57 = HEAP32[$30 >> 2] | 0; //@line 22301
 if ($57 | 0) {
  $60 = HEAP32[$57 + 8 >> 2] | 0; //@line 22305
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 22306
  FUNCTION_TABLE_vi[$60 & 1023]($6); //@line 22307
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 416; //@line 22310
   $61 = $ReallocAsyncCtx4 + 4 | 0; //@line 22311
   HEAP32[$61 >> 2] = $17; //@line 22312
   $62 = $ReallocAsyncCtx4 + 8 | 0; //@line 22313
   HEAP32[$62 >> 2] = 0; //@line 22314
   $63 = $ReallocAsyncCtx4 + 12 | 0; //@line 22315
   HEAP32[$63 >> 2] = $2; //@line 22316
   sp = STACKTOP; //@line 22317
   return;
  }
  ___async_unwind = 0; //@line 22320
  HEAP32[$ReallocAsyncCtx4 >> 2] = 416; //@line 22321
  $61 = $ReallocAsyncCtx4 + 4 | 0; //@line 22322
  HEAP32[$61 >> 2] = $17; //@line 22323
  $62 = $ReallocAsyncCtx4 + 8 | 0; //@line 22324
  HEAP32[$62 >> 2] = 0; //@line 22325
  $63 = $ReallocAsyncCtx4 + 12 | 0; //@line 22326
  HEAP32[$63 >> 2] = $2; //@line 22327
  sp = STACKTOP; //@line 22328
  return;
 }
 $64 = HEAP32[$17 >> 2] | 0; //@line 22331
 if (!$64) {
  HEAP32[___async_retval >> 2] = 0; //@line 22335
  return;
 }
 $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 22339
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 22340
 FUNCTION_TABLE_vi[$67 & 1023]($2); //@line 22341
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 417; //@line 22344
  $68 = $ReallocAsyncCtx5 + 4 | 0; //@line 22345
  HEAP32[$68 >> 2] = 0; //@line 22346
  sp = STACKTOP; //@line 22347
  return;
 }
 ___async_unwind = 0; //@line 22350
 HEAP32[$ReallocAsyncCtx5 >> 2] = 417; //@line 22351
 $68 = $ReallocAsyncCtx5 + 4 | 0; //@line 22352
 HEAP32[$68 >> 2] = 0; //@line 22353
 sp = STACKTOP; //@line 22354
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_309($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 15709
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15711
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15713
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15715
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15719
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15723
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15725
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15727
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15729
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 15731
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($2 + 4 | 0) | 0) {
  _printf(12967, $6) | 0; //@line 15735
  _printf(13114, $10) | 0; //@line 15736
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 15737
  _putchar(10) | 0; //@line 15738
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 15741
   $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 15742
   HEAP32[$25 >> 2] = $2; //@line 15743
   $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 15744
   HEAP32[$26 >> 2] = $4; //@line 15745
   $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 15746
   HEAP32[$27 >> 2] = $14; //@line 15747
   $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 15748
   HEAP32[$28 >> 2] = $16; //@line 15749
   $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 15750
   HEAP32[$29 >> 2] = $18; //@line 15751
   $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 15752
   HEAP32[$30 >> 2] = $20; //@line 15753
   $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 15754
   HEAP32[$31 >> 2] = $22; //@line 15755
   sp = STACKTOP; //@line 15756
   return;
  }
  ___async_unwind = 0; //@line 15759
  HEAP32[$ReallocAsyncCtx7 >> 2] = 471; //@line 15760
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 15761
  HEAP32[$25 >> 2] = $2; //@line 15762
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 15763
  HEAP32[$26 >> 2] = $4; //@line 15764
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 15765
  HEAP32[$27 >> 2] = $14; //@line 15766
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 15767
  HEAP32[$28 >> 2] = $16; //@line 15768
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 15769
  HEAP32[$29 >> 2] = $18; //@line 15770
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 15771
  HEAP32[$30 >> 2] = $20; //@line 15772
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 15773
  HEAP32[$31 >> 2] = $22; //@line 15774
  sp = STACKTOP; //@line 15775
  return;
 }
 $32 = HEAP8[$4 >> 0] & -33; //@line 15779
 HEAP8[$4 >> 0] = $32; //@line 15780
 do {
  if (!($32 & 2)) {
   $63 = $32; //@line 15785
  } else {
   $35 = $32 & -3; //@line 15787
   HEAP8[$4 >> 0] = $35; //@line 15788
   if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
    _printf(12967, $16) | 0; //@line 15793
    _printf(12994, $20) | 0; //@line 15794
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 15795
    _putchar(10) | 0; //@line 15796
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 15799
     $39 = $ReallocAsyncCtx6 + 4 | 0; //@line 15800
     HEAP32[$39 >> 2] = $4; //@line 15801
     $40 = $ReallocAsyncCtx6 + 8 | 0; //@line 15802
     HEAP32[$40 >> 2] = $14; //@line 15803
     $41 = $ReallocAsyncCtx6 + 12 | 0; //@line 15804
     HEAP32[$41 >> 2] = $2; //@line 15805
     $42 = $ReallocAsyncCtx6 + 16 | 0; //@line 15806
     HEAP32[$42 >> 2] = $14; //@line 15807
     sp = STACKTOP; //@line 15808
     return;
    }
    ___async_unwind = 0; //@line 15811
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 15812
    $39 = $ReallocAsyncCtx6 + 4 | 0; //@line 15813
    HEAP32[$39 >> 2] = $4; //@line 15814
    $40 = $ReallocAsyncCtx6 + 8 | 0; //@line 15815
    HEAP32[$40 >> 2] = $14; //@line 15816
    $41 = $ReallocAsyncCtx6 + 12 | 0; //@line 15817
    HEAP32[$41 >> 2] = $2; //@line 15818
    $42 = $ReallocAsyncCtx6 + 16 | 0; //@line 15819
    HEAP32[$42 >> 2] = $14; //@line 15820
    sp = STACKTOP; //@line 15821
    return;
   }
   if ($35 & 4) {
    $61 = $35 & -5; //@line 15827
    HEAP8[$4 >> 0] = $61; //@line 15828
    $63 = $61; //@line 15829
    break;
   }
   $46 = HEAP32[$2 + 1324 >> 2] | 0; //@line 15833
   $47 = $46 + 16 | 0; //@line 15834
   $49 = __ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0; //@line 15836
   $50 = $46 + 28 | 0; //@line 15837
   $51 = HEAP32[$50 >> 2] | 0; //@line 15838
   if (!$51) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 15841
    _mbed_assert_internal(15061, 15066, 1102); //@line 15842
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 15845
     $53 = $ReallocAsyncCtx15 + 4 | 0; //@line 15846
     HEAP32[$53 >> 2] = $50; //@line 15847
     $54 = $ReallocAsyncCtx15 + 8 | 0; //@line 15848
     HEAP32[$54 >> 2] = $47; //@line 15849
     $55 = $ReallocAsyncCtx15 + 12 | 0; //@line 15850
     HEAP32[$55 >> 2] = $49; //@line 15851
     $56 = $ReallocAsyncCtx15 + 16 | 0; //@line 15852
     HEAP32[$56 >> 2] = $4; //@line 15853
     $57 = $ReallocAsyncCtx15 + 20 | 0; //@line 15854
     HEAP32[$57 >> 2] = $2; //@line 15855
     sp = STACKTOP; //@line 15856
     return;
    }
    ___async_unwind = 0; //@line 15859
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 15860
    $53 = $ReallocAsyncCtx15 + 4 | 0; //@line 15861
    HEAP32[$53 >> 2] = $50; //@line 15862
    $54 = $ReallocAsyncCtx15 + 8 | 0; //@line 15863
    HEAP32[$54 >> 2] = $47; //@line 15864
    $55 = $ReallocAsyncCtx15 + 12 | 0; //@line 15865
    HEAP32[$55 >> 2] = $49; //@line 15866
    $56 = $ReallocAsyncCtx15 + 16 | 0; //@line 15867
    HEAP32[$56 >> 2] = $4; //@line 15868
    $57 = $ReallocAsyncCtx15 + 20 | 0; //@line 15869
    HEAP32[$57 >> 2] = $2; //@line 15870
    sp = STACKTOP; //@line 15871
    return;
   } else {
    $58 = HEAP32[$51 >> 2] | 0; //@line 15874
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 15875
    FUNCTION_TABLE_vii[$58 & 31]($47, $49); //@line 15876
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 15879
     $59 = $ReallocAsyncCtx4 + 4 | 0; //@line 15880
     HEAP32[$59 >> 2] = $4; //@line 15881
     $60 = $ReallocAsyncCtx4 + 8 | 0; //@line 15882
     HEAP32[$60 >> 2] = $2; //@line 15883
     sp = STACKTOP; //@line 15884
     return;
    }
    ___async_unwind = 0; //@line 15887
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 15888
    $59 = $ReallocAsyncCtx4 + 4 | 0; //@line 15889
    HEAP32[$59 >> 2] = $4; //@line 15890
    $60 = $ReallocAsyncCtx4 + 8 | 0; //@line 15891
    HEAP32[$60 >> 2] = $2; //@line 15892
    sp = STACKTOP; //@line 15893
    return;
   }
  }
 } while (0);
 if (!($63 & 16)) {
  return;
 }
 HEAP8[$4 >> 0] = $63 & -17; //@line 15904
 $67 = HEAP32[$2 + 1324 >> 2] | 0; //@line 15906
 $68 = $67 + 48 | 0; //@line 15907
 $70 = __ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0; //@line 15909
 $71 = $67 + 60 | 0; //@line 15910
 $72 = HEAP32[$71 >> 2] | 0; //@line 15911
 if (!$72) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 15914
  _mbed_assert_internal(15061, 15066, 1102); //@line 15915
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 15918
   $74 = $ReallocAsyncCtx14 + 4 | 0; //@line 15919
   HEAP32[$74 >> 2] = $71; //@line 15920
   $75 = $ReallocAsyncCtx14 + 8 | 0; //@line 15921
   HEAP32[$75 >> 2] = $68; //@line 15922
   $76 = $ReallocAsyncCtx14 + 12 | 0; //@line 15923
   HEAP32[$76 >> 2] = $70; //@line 15924
   sp = STACKTOP; //@line 15925
   return;
  }
  ___async_unwind = 0; //@line 15928
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 15929
  $74 = $ReallocAsyncCtx14 + 4 | 0; //@line 15930
  HEAP32[$74 >> 2] = $71; //@line 15931
  $75 = $ReallocAsyncCtx14 + 8 | 0; //@line 15932
  HEAP32[$75 >> 2] = $68; //@line 15933
  $76 = $ReallocAsyncCtx14 + 12 | 0; //@line 15934
  HEAP32[$76 >> 2] = $70; //@line 15935
  sp = STACKTOP; //@line 15936
  return;
 } else {
  $77 = HEAP32[$72 >> 2] | 0; //@line 15939
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 15940
  FUNCTION_TABLE_vii[$77 & 31]($68, $70); //@line 15941
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 15944
   sp = STACKTOP; //@line 15945
   return;
  }
  ___async_unwind = 0; //@line 15948
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 15949
  sp = STACKTOP; //@line 15950
  return;
 }
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $42 = 0, $43 = 0, $5 = 0, $58 = 0, $59 = 0, $63 = 0, $65 = 0, $73 = 0, $74 = 0, $80 = 0, $83 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx8 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 6615
 STACKTOP = STACKTOP + 64 | 0; //@line 6616
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 6616
 $vararg_buffer5 = sp + 24 | 0; //@line 6617
 $vararg_buffer3 = sp + 16 | 0; //@line 6618
 $2 = sp + 48 | 0; //@line 6621
 $3 = sp + 32 | 0; //@line 6622
 if (!$1) {
  _printf(11887, sp) | 0; //@line 6625
  _printf(12233, sp + 8 | 0) | 0; //@line 6626
  $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6627
  _putchar(10) | 0; //@line 6628
  if (___async) {
   HEAP32[$AsyncCtx23 >> 2] = 211; //@line 6631
   sp = STACKTOP; //@line 6632
   STACKTOP = sp; //@line 6633
   return;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6635
  STACKTOP = sp; //@line 6636
  return;
 }
 _printf(12139, $vararg_buffer3) | 0; //@line 6638
 $5 = $1 + 4 | 0; //@line 6639
 HEAP32[$vararg_buffer5 >> 2] = HEAP32[$5 >> 2]; //@line 6641
 _printf(12271, $vararg_buffer5) | 0; //@line 6642
 $AsyncCtx19 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6643
 _putchar(10) | 0; //@line 6644
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 212; //@line 6647
  HEAP32[$AsyncCtx19 + 4 >> 2] = $1; //@line 6649
  HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 6651
  HEAP32[$AsyncCtx19 + 12 >> 2] = $2; //@line 6653
  HEAP32[$AsyncCtx19 + 16 >> 2] = $3; //@line 6655
  HEAP32[$AsyncCtx19 + 20 >> 2] = $5; //@line 6657
  sp = STACKTOP; //@line 6658
  STACKTOP = sp; //@line 6659
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 6661
 if (HEAP32[$5 >> 2] | 0) {
  $14 = $0 + 1892 | 0; //@line 6665
  $15 = HEAP32[$14 >> 2] | 0; //@line 6666
  if (!$15) {
   STACKTOP = sp; //@line 6669
   return;
  }
  $19 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6673
  $21 = HEAP32[$15 + 4 >> 2] | 0; //@line 6675
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 6676
  FUNCTION_TABLE_vii[$21 & 31]($2, $0 + 1880 | 0); //@line 6677
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 213; //@line 6680
   HEAP32[$AsyncCtx + 4 >> 2] = $14; //@line 6682
   HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6684
   HEAP32[$AsyncCtx + 12 >> 2] = $19; //@line 6686
   HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 6688
   sp = STACKTOP; //@line 6689
   STACKTOP = sp; //@line 6690
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6692
  $26 = $2 + 12 | 0; //@line 6694
  HEAP32[$26 >> 2] = HEAP32[$14 >> 2]; //@line 6695
  $AsyncCtx33 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6696
  $27 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($19, $2, 9) | 0; //@line 6697
  if (___async) {
   HEAP32[$AsyncCtx33 >> 2] = 214; //@line 6700
   HEAP32[$AsyncCtx33 + 4 >> 2] = $26; //@line 6702
   HEAP32[$AsyncCtx33 + 8 >> 2] = $2; //@line 6704
   sp = STACKTOP; //@line 6705
   STACKTOP = sp; //@line 6706
   return;
  }
  _emscripten_free_async_context($AsyncCtx33 | 0); //@line 6708
  $30 = HEAP32[$26 >> 2] | 0; //@line 6709
  do {
   if ($30 | 0) {
    $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 6714
    $AsyncCtx8 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6715
    FUNCTION_TABLE_vi[$33 & 1023]($2); //@line 6716
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 215; //@line 6719
     HEAP32[$AsyncCtx8 + 4 >> 2] = $27; //@line 6721
     sp = STACKTOP; //@line 6722
     STACKTOP = sp; //@line 6723
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx8 | 0); //@line 6725
     break;
    }
   }
  } while (0);
  if ($27 | 0) {
   STACKTOP = sp; //@line 6732
   return;
  }
  $AsyncCtx41 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6734
  _mbed_assert_internal(12851, 11935, 843); //@line 6735
  if (___async) {
   HEAP32[$AsyncCtx41 >> 2] = 216; //@line 6738
   sp = STACKTOP; //@line 6739
   STACKTOP = sp; //@line 6740
   return;
  }
  _emscripten_free_async_context($AsyncCtx41 | 0); //@line 6742
  STACKTOP = sp; //@line 6743
  return;
 }
 $36 = $0 + 1960 | 0; //@line 6745
 HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 1; //@line 6748
 if (!(HEAP8[$1 + 18 >> 0] | 0)) {
  STACKTOP = sp; //@line 6753
  return;
 }
 $42 = $1 + 9 | 0; //@line 6755
 $43 = HEAP8[$42 >> 0] | 0; //@line 6756
 if ($43 << 24 >> 24 == -32) {
  STACKTOP = sp; //@line 6759
  return;
 }
 if (($43 + -1 & 255) >= 223) {
  if ((HEAP32[$1 >> 2] | 0) != 3) {
   STACKTOP = sp; //@line 6767
   return;
  }
 }
 HEAP32[$0 + 2240 >> 2] = 2; //@line 6771
 HEAP16[$0 + 2260 >> 1] = HEAP16[$1 + 16 >> 1] | 0; //@line 6775
 HEAP8[$0 + 2253 >> 0] = HEAP8[$42 >> 0] | 0; //@line 6778
 HEAP32[$0 + 2256 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 6782
 HEAP8[$0 + 2236 >> 0] = 1; //@line 6784
 $58 = $0 + 1892 | 0; //@line 6785
 $59 = HEAP32[$58 >> 2] | 0; //@line 6786
 do {
  if ($59 | 0) {
   $63 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6792
   $65 = HEAP32[$59 + 4 >> 2] | 0; //@line 6794
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6795
   FUNCTION_TABLE_vii[$65 & 31]($3, $0 + 1880 | 0); //@line 6796
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 217; //@line 6799
    HEAP32[$AsyncCtx11 + 4 >> 2] = $58; //@line 6801
    HEAP32[$AsyncCtx11 + 8 >> 2] = $3; //@line 6803
    HEAP32[$AsyncCtx11 + 12 >> 2] = $63; //@line 6805
    HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 6807
    HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 6809
    HEAP32[$AsyncCtx11 + 24 >> 2] = $42; //@line 6811
    HEAP32[$AsyncCtx11 + 28 >> 2] = $0; //@line 6813
    sp = STACKTOP; //@line 6814
    STACKTOP = sp; //@line 6815
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6817
   $73 = $3 + 12 | 0; //@line 6819
   HEAP32[$73 >> 2] = HEAP32[$58 >> 2]; //@line 6820
   $AsyncCtx30 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6821
   $74 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($63, $3, 7) | 0; //@line 6822
   if (___async) {
    HEAP32[$AsyncCtx30 >> 2] = 218; //@line 6825
    HEAP32[$AsyncCtx30 + 4 >> 2] = $73; //@line 6827
    HEAP32[$AsyncCtx30 + 8 >> 2] = $3; //@line 6829
    HEAP32[$AsyncCtx30 + 12 >> 2] = $1; //@line 6831
    HEAP32[$AsyncCtx30 + 16 >> 2] = $42; //@line 6833
    HEAP32[$AsyncCtx30 + 20 >> 2] = $0; //@line 6835
    sp = STACKTOP; //@line 6836
    STACKTOP = sp; //@line 6837
    return;
   }
   _emscripten_free_async_context($AsyncCtx30 | 0); //@line 6839
   $80 = HEAP32[$73 >> 2] | 0; //@line 6840
   do {
    if ($80 | 0) {
     $83 = HEAP32[$80 + 8 >> 2] | 0; //@line 6845
     $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6846
     FUNCTION_TABLE_vi[$83 & 1023]($3); //@line 6847
     if (___async) {
      HEAP32[$AsyncCtx15 >> 2] = 219; //@line 6850
      HEAP32[$AsyncCtx15 + 4 >> 2] = $74; //@line 6852
      HEAP32[$AsyncCtx15 + 8 >> 2] = $1; //@line 6854
      HEAP32[$AsyncCtx15 + 12 >> 2] = $42; //@line 6856
      HEAP32[$AsyncCtx15 + 16 >> 2] = $0; //@line 6858
      sp = STACKTOP; //@line 6859
      STACKTOP = sp; //@line 6860
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6862
      break;
     }
    }
   } while (0);
   if (!$74) {
    $AsyncCtx37 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6869
    _mbed_assert_internal(12851, 11935, 909); //@line 6870
    if (___async) {
     HEAP32[$AsyncCtx37 >> 2] = 220; //@line 6873
     HEAP32[$AsyncCtx37 + 4 >> 2] = $1; //@line 6875
     HEAP32[$AsyncCtx37 + 8 >> 2] = $42; //@line 6877
     HEAP32[$AsyncCtx37 + 12 >> 2] = $0; //@line 6879
     sp = STACKTOP; //@line 6880
     STACKTOP = sp; //@line 6881
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx37 | 0); //@line 6883
     break;
    }
   }
  }
 } while (0);
 if (!(HEAP8[$1 + 11 >> 0] | 0)) {
  STACKTOP = sp; //@line 6893
  return;
 }
 $95 = HEAP8[$42 >> 0] | 0; //@line 6895
 $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6896
 __ZN12LoRaWANStack9handle_txEhPKhth($0, $95, 0, 0, 2) | 0; //@line 6897
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 221; //@line 6900
  sp = STACKTOP; //@line 6901
  STACKTOP = sp; //@line 6902
  return;
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6904
 STACKTOP = sp; //@line 6905
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_55($0) {
 $0 = $0 | 0;
 var $$024 = 0, $$05$i = 0, $$06$i = 0, $$1 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $108 = 0, $109 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $25 = 0, $27 = 0, $30 = 0, $33 = 0, $4 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $49 = 0, $58 = 0, $6 = 0, $70 = 0, $73 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0.0, $94 = 0.0, $96 = 0, $97 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22853
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22855
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22857
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22859
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22861
 $9 = $2 + 968 | 0; //@line 22862
 if (HEAP32[$9 >> 2] | 0) {
  $$1 = -1e3; //@line 22866
  $109 = ___async_retval; //@line 22867
  HEAP32[$109 >> 2] = $$1; //@line 22868
  return;
 }
 $12 = $2 + 264 | 0; //@line 22871
 __ZN11LoRaMacMlme18reset_confirmationEv($12); //@line 22872
 $13 = HEAP32[$8 >> 2] | 0; //@line 22873
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($12) | 0) >> 2] = $13; //@line 22875
 $15 = $2 + 944 | 0; //@line 22876
 $17 = HEAP8[$15 >> 0] | 8; //@line 22878
 HEAP8[$15 >> 0] = $17; //@line 22879
 L5 : do {
  switch (HEAP32[$8 >> 2] | 0) {
  case 1:
   {
    $20 = __ZN14LoRaMacCommand15add_mac_commandEhhh($2 + 4 | 0, 2, 0, 0) | 0; //@line 22885
    if (!$20) {
     $$1 = 0; //@line 22888
     $109 = ___async_retval; //@line 22889
     HEAP32[$109 >> 2] = $$1; //@line 22890
     return;
    } else {
     $$024 = $20; //@line 22894
     $108 = HEAP8[$15 >> 0] | 0; //@line 22894
     break L5;
    }
    break;
   }
  case 0:
   {
    if (HEAP32[$9 >> 2] & 16 | 0) {
     $$1 = -1e3; //@line 22904
     $109 = ___async_retval; //@line 22905
     HEAP32[$109 >> 2] = $$1; //@line 22906
     return;
    }
    $25 = HEAP32[$8 + 4 >> 2] | 0; //@line 22910
    if (!$25) {
     $$1 = -1003; //@line 22913
     $109 = ___async_retval; //@line 22914
     HEAP32[$109 >> 2] = $$1; //@line 22915
     return;
    }
    $27 = $8 + 8 | 0; //@line 22918
    if (!(HEAP32[$27 >> 2] | 0)) {
     $$1 = -1003; //@line 22922
     $109 = ___async_retval; //@line 22923
     HEAP32[$109 >> 2] = $$1; //@line 22924
     return;
    }
    $30 = $8 + 12 | 0; //@line 22927
    if (!(HEAP32[$30 >> 2] | 0)) {
     $$1 = -1003; //@line 22931
     $109 = ___async_retval; //@line 22932
     HEAP32[$109 >> 2] = $$1; //@line 22933
     return;
    }
    $33 = $8 + 16 | 0; //@line 22936
    if (!(HEAP8[$33 >> 0] | 0)) {
     $$1 = -1003; //@line 22940
     $109 = ___async_retval; //@line 22941
     HEAP32[$109 >> 2] = $$1; //@line 22942
     return;
    }
    HEAP32[$2 + 900 >> 2] = $25; //@line 22946
    HEAP32[$2 + 904 >> 2] = HEAP32[$27 >> 2]; //@line 22949
    HEAP32[$2 + 908 >> 2] = HEAP32[$30 >> 2]; //@line 22952
    $41 = HEAP8[$33 >> 0] | 0; //@line 22953
    $42 = $2 + 896 | 0; //@line 22954
    HEAP8[$42 >> 0] = $41; //@line 22955
    $45 = __ZN7LoRaPHY21verify_nb_join_trialsEh(HEAP32[$2 >> 2] | 0, HEAP8[$33 >> 0] | 0) | 0; //@line 22958
    HEAP8[$42 >> 0] = $45 ? $41 : 12; //@line 22960
    $46 = $2 + 897 | 0; //@line 22961
    HEAP8[$46 >> 0] = 0; //@line 22962
    HEAP8[$2 + 372 >> 0] = 0; //@line 22965
    $49 = $2 + 956 | 0; //@line 22966
    HEAP32[$49 >> 2] = 0; //@line 22967
    HEAP32[$2 + 960 >> 2] = 0; //@line 22969
    HEAP32[$2 + 964 >> 2] = 0; //@line 22971
    HEAP8[$2 + 380 >> 0] = 0; //@line 22973
    HEAP8[$2 + 894 >> 0] = 1; //@line 22975
    HEAP8[$2 + 895 >> 0] = 1; //@line 22977
    HEAP8[$2 + 377 >> 0] = 0; //@line 22979
    HEAP8[$2 + 1152 >> 0] = 0; //@line 22981
    HEAP16[$2 + 1154 >> 1] = 1; //@line 22983
    $58 = $2 + 4 | 0; //@line 22984
    __ZN14LoRaMacCommand20clear_command_bufferEv($58); //@line 22985
    __ZN14LoRaMacCommand19clear_repeat_bufferEv($58); //@line 22986
    __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($58); //@line 22987
    HEAP8[$2 + 371 >> 0] = 1; //@line 22989
    __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$2 >> 2] | 0, $2 + 360 | 0, 0); //@line 22991
    HEAP8[$2 + 373 >> 0] = 0; //@line 22993
    HEAP8[$2 + 374 >> 0] = 0; //@line 22995
    $$05$i = HEAP32[$2 + 1208 >> 2] | 0; //@line 22997
    if ($$05$i | 0) {
     $$06$i = $$05$i; //@line 23000
     do {
      HEAP32[$$06$i + 36 >> 2] = 0; //@line 23003
      $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 23005
     } while (($$06$i | 0) != 0);
    }
    HEAP8[$2 + 378 >> 0] = 0; //@line 23015
    HEAP8[$2 + 379 >> 0] = 0; //@line 23017
    $70 = HEAP32[$2 >> 2] | 0; //@line 23018
    $73 = HEAP32[(HEAP32[$70 >> 2] | 0) + 52 >> 2] | 0; //@line 23021
    $77 = (HEAPU8[$46 >> 0] | 0) + 1 & 255; //@line 23025
    $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 23026
    $78 = FUNCTION_TABLE_iii[$73 & 31]($70, $77) | 0; //@line 23027
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 550; //@line 23030
     $79 = $ReallocAsyncCtx + 4 | 0; //@line 23031
     HEAP32[$79 >> 2] = $2; //@line 23032
     $80 = $ReallocAsyncCtx + 8 | 0; //@line 23033
     HEAP32[$80 >> 2] = $4; //@line 23034
     $81 = $ReallocAsyncCtx + 12 | 0; //@line 23035
     HEAP32[$81 >> 2] = $6; //@line 23036
     $82 = $ReallocAsyncCtx + 16 | 0; //@line 23037
     HEAP32[$82 >> 2] = $49; //@line 23038
     $83 = $ReallocAsyncCtx + 20 | 0; //@line 23039
     HEAP32[$83 >> 2] = $15; //@line 23040
     sp = STACKTOP; //@line 23041
     return;
    }
    HEAP8[___async_retval >> 0] = $78; //@line 23045
    ___async_unwind = 0; //@line 23046
    HEAP32[$ReallocAsyncCtx >> 2] = 550; //@line 23047
    $79 = $ReallocAsyncCtx + 4 | 0; //@line 23048
    HEAP32[$79 >> 2] = $2; //@line 23049
    $80 = $ReallocAsyncCtx + 8 | 0; //@line 23050
    HEAP32[$80 >> 2] = $4; //@line 23051
    $81 = $ReallocAsyncCtx + 12 | 0; //@line 23052
    HEAP32[$81 >> 2] = $6; //@line 23053
    $82 = $ReallocAsyncCtx + 16 | 0; //@line 23054
    HEAP32[$82 >> 2] = $49; //@line 23055
    $83 = $ReallocAsyncCtx + 20 | 0; //@line 23056
    HEAP32[$83 >> 2] = $15; //@line 23057
    sp = STACKTOP; //@line 23058
    return;
   }
  case 2:
   {
    $86 = HEAP8[$2 + 378 >> 0] | 0; //@line 23064
    $88 = HEAP8[$2 + 1097 >> 0] | 0; //@line 23066
    $90 = HEAP8[$2 + 1096 >> 0] | 0; //@line 23068
    $92 = +HEAPF32[$2 + 1144 >> 2]; //@line 23070
    $94 = +HEAPF32[$2 + 1148 >> 2]; //@line 23072
    $96 = HEAP16[$8 + 4 >> 1] | 0; //@line 23074
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 23075
    __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($12, $86, $88, $90, $92, $94, $96); //@line 23076
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 553; //@line 23079
     $97 = $ReallocAsyncCtx7 + 4 | 0; //@line 23080
     HEAP32[$97 >> 2] = $2; //@line 23081
     $98 = $ReallocAsyncCtx7 + 8 | 0; //@line 23082
     HEAP32[$98 >> 2] = $9; //@line 23083
     sp = STACKTOP; //@line 23084
     return;
    }
    ___async_unwind = 0; //@line 23087
    HEAP32[$ReallocAsyncCtx7 >> 2] = 553; //@line 23088
    $97 = $ReallocAsyncCtx7 + 4 | 0; //@line 23089
    HEAP32[$97 >> 2] = $2; //@line 23090
    $98 = $ReallocAsyncCtx7 + 8 | 0; //@line 23091
    HEAP32[$98 >> 2] = $9; //@line 23092
    sp = STACKTOP; //@line 23093
    return;
   }
  case 3:
   {
    $101 = HEAP8[$8 + 12 >> 0] | 0; //@line 23100
    $102 = HEAP16[$8 + 4 >> 1] | 0; //@line 23101
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 23102
    __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($12, 0, 0, $101, 0.0, 0.0, $102); //@line 23103
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 555; //@line 23106
     $103 = $ReallocAsyncCtx6 + 4 | 0; //@line 23107
     HEAP32[$103 >> 2] = $2; //@line 23108
     $104 = $ReallocAsyncCtx6 + 8 | 0; //@line 23109
     HEAP32[$104 >> 2] = $9; //@line 23110
     sp = STACKTOP; //@line 23111
     return;
    }
    ___async_unwind = 0; //@line 23114
    HEAP32[$ReallocAsyncCtx6 >> 2] = 555; //@line 23115
    $103 = $ReallocAsyncCtx6 + 4 | 0; //@line 23116
    HEAP32[$103 >> 2] = $2; //@line 23117
    $104 = $ReallocAsyncCtx6 + 8 | 0; //@line 23118
    HEAP32[$104 >> 2] = $9; //@line 23119
    sp = STACKTOP; //@line 23120
    return;
   }
  default:
   {
    $$024 = -1002; //@line 23125
    $108 = $17; //@line 23125
   }
  }
 } while (0);
 HEAP8[$2 + 373 >> 0] = 0; //@line 23130
 HEAP8[$15 >> 0] = $108 & -9; //@line 23132
 $$1 = $$024; //@line 23133
 $109 = ___async_retval; //@line 23134
 HEAP32[$109 >> 2] = $$1; //@line 23135
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_444($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31670
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31672
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31674
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31680
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31682
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31684
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31686
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31688
 $$pre$i$i = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 31689
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = $$pre$i$i; //@line 31691
 if ($$pre$i$i | 0) {
  $22 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 31695
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 31696
  FUNCTION_TABLE_vi[$22 & 1023]($16); //@line 31697
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 569; //@line 31700
   $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 31701
   HEAP32[$23 >> 2] = $2; //@line 31702
   $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 31703
   HEAP32[$24 >> 2] = $4; //@line 31704
   $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 31705
   HEAP32[$25 >> 2] = $10; //@line 31706
   $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 31707
   HEAP32[$26 >> 2] = $12; //@line 31708
   $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 31709
   HEAP32[$27 >> 2] = $14; //@line 31710
   $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 31711
   HEAP32[$28 >> 2] = $16; //@line 31712
   $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 31713
   HEAP32[$29 >> 2] = $18; //@line 31714
   sp = STACKTOP; //@line 31715
   return;
  }
  ___async_unwind = 0; //@line 31718
  HEAP32[$ReallocAsyncCtx3 >> 2] = 569; //@line 31719
  $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 31720
  HEAP32[$23 >> 2] = $2; //@line 31721
  $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 31722
  HEAP32[$24 >> 2] = $4; //@line 31723
  $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 31724
  HEAP32[$25 >> 2] = $10; //@line 31725
  $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 31726
  HEAP32[$26 >> 2] = $12; //@line 31727
  $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 31728
  HEAP32[$27 >> 2] = $14; //@line 31729
  $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 31730
  HEAP32[$28 >> 2] = $16; //@line 31731
  $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 31732
  HEAP32[$29 >> 2] = $18; //@line 31733
  sp = STACKTOP; //@line 31734
  return;
 }
 $30 = $18 + 12 | 0; //@line 31737
 HEAP32[$18 >> 2] = 7; //@line 31738
 HEAP32[$18 + 4 >> 2] = 0; //@line 31740
 HEAP32[$18 + 8 >> 2] = $4; //@line 31742
 HEAP32[$30 >> 2] = 860; //@line 31743
 $31 = $4 + 1244 | 0; //@line 31744
 if (($31 | 0) == ($18 | 0)) {
  $58 = HEAP32[217] | 0; //@line 31748
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 31749
  FUNCTION_TABLE_vi[$58 & 1023]($18); //@line 31750
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 572; //@line 31753
   $59 = $ReallocAsyncCtx6 + 4 | 0; //@line 31754
   HEAP32[$59 >> 2] = $2; //@line 31755
   $60 = $ReallocAsyncCtx6 + 8 | 0; //@line 31756
   HEAP32[$60 >> 2] = $4; //@line 31757
   $61 = $ReallocAsyncCtx6 + 12 | 0; //@line 31758
   HEAP32[$61 >> 2] = $10; //@line 31759
   $62 = $ReallocAsyncCtx6 + 16 | 0; //@line 31760
   HEAP32[$62 >> 2] = $18; //@line 31761
   $63 = $ReallocAsyncCtx6 + 20 | 0; //@line 31762
   HEAP32[$63 >> 2] = $12; //@line 31763
   $64 = $ReallocAsyncCtx6 + 24 | 0; //@line 31764
   HEAP32[$64 >> 2] = $14; //@line 31765
   sp = STACKTOP; //@line 31766
   return;
  }
  ___async_unwind = 0; //@line 31769
  HEAP32[$ReallocAsyncCtx6 >> 2] = 572; //@line 31770
  $59 = $ReallocAsyncCtx6 + 4 | 0; //@line 31771
  HEAP32[$59 >> 2] = $2; //@line 31772
  $60 = $ReallocAsyncCtx6 + 8 | 0; //@line 31773
  HEAP32[$60 >> 2] = $4; //@line 31774
  $61 = $ReallocAsyncCtx6 + 12 | 0; //@line 31775
  HEAP32[$61 >> 2] = $10; //@line 31776
  $62 = $ReallocAsyncCtx6 + 16 | 0; //@line 31777
  HEAP32[$62 >> 2] = $18; //@line 31778
  $63 = $ReallocAsyncCtx6 + 20 | 0; //@line 31779
  HEAP32[$63 >> 2] = $12; //@line 31780
  $64 = $ReallocAsyncCtx6 + 24 | 0; //@line 31781
  HEAP32[$64 >> 2] = $14; //@line 31782
  sp = STACKTOP; //@line 31783
  return;
 }
 $33 = $4 + 1256 | 0; //@line 31786
 $34 = HEAP32[$33 >> 2] | 0; //@line 31787
 if (!$34) {
  $48 = HEAP32[216] | 0; //@line 31791
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 31792
  FUNCTION_TABLE_vii[$48 & 31]($31, $18); //@line 31793
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 571; //@line 31796
   $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 31797
   HEAP32[$49 >> 2] = $2; //@line 31798
   $50 = $ReallocAsyncCtx5 + 8 | 0; //@line 31799
   HEAP32[$50 >> 2] = $4; //@line 31800
   $51 = $ReallocAsyncCtx5 + 12 | 0; //@line 31801
   HEAP32[$51 >> 2] = $10; //@line 31802
   $52 = $ReallocAsyncCtx5 + 16 | 0; //@line 31803
   HEAP32[$52 >> 2] = $18; //@line 31804
   $53 = $ReallocAsyncCtx5 + 20 | 0; //@line 31805
   HEAP32[$53 >> 2] = $12; //@line 31806
   $54 = $ReallocAsyncCtx5 + 24 | 0; //@line 31807
   HEAP32[$54 >> 2] = $14; //@line 31808
   $55 = $ReallocAsyncCtx5 + 28 | 0; //@line 31809
   HEAP32[$55 >> 2] = $30; //@line 31810
   $56 = $ReallocAsyncCtx5 + 32 | 0; //@line 31811
   HEAP32[$56 >> 2] = $33; //@line 31812
   sp = STACKTOP; //@line 31813
   return;
  }
  ___async_unwind = 0; //@line 31816
  HEAP32[$ReallocAsyncCtx5 >> 2] = 571; //@line 31817
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 31818
  HEAP32[$49 >> 2] = $2; //@line 31819
  $50 = $ReallocAsyncCtx5 + 8 | 0; //@line 31820
  HEAP32[$50 >> 2] = $4; //@line 31821
  $51 = $ReallocAsyncCtx5 + 12 | 0; //@line 31822
  HEAP32[$51 >> 2] = $10; //@line 31823
  $52 = $ReallocAsyncCtx5 + 16 | 0; //@line 31824
  HEAP32[$52 >> 2] = $18; //@line 31825
  $53 = $ReallocAsyncCtx5 + 20 | 0; //@line 31826
  HEAP32[$53 >> 2] = $12; //@line 31827
  $54 = $ReallocAsyncCtx5 + 24 | 0; //@line 31828
  HEAP32[$54 >> 2] = $14; //@line 31829
  $55 = $ReallocAsyncCtx5 + 28 | 0; //@line 31830
  HEAP32[$55 >> 2] = $30; //@line 31831
  $56 = $ReallocAsyncCtx5 + 32 | 0; //@line 31832
  HEAP32[$56 >> 2] = $33; //@line 31833
  sp = STACKTOP; //@line 31834
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 31838
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 31839
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 31840
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 570; //@line 31843
   $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 31844
   HEAP32[$38 >> 2] = $2; //@line 31845
   $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 31846
   HEAP32[$39 >> 2] = $4; //@line 31847
   $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 31848
   HEAP32[$40 >> 2] = $10; //@line 31849
   $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 31850
   HEAP32[$41 >> 2] = $30; //@line 31851
   $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 31852
   HEAP32[$42 >> 2] = $31; //@line 31853
   $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 31854
   HEAP32[$43 >> 2] = $18; //@line 31855
   $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 31856
   HEAP32[$44 >> 2] = $12; //@line 31857
   $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 31858
   HEAP32[$45 >> 2] = $33; //@line 31859
   $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 31860
   HEAP32[$46 >> 2] = $14; //@line 31861
   sp = STACKTOP; //@line 31862
   return;
  }
  ___async_unwind = 0; //@line 31865
  HEAP32[$ReallocAsyncCtx4 >> 2] = 570; //@line 31866
  $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 31867
  HEAP32[$38 >> 2] = $2; //@line 31868
  $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 31869
  HEAP32[$39 >> 2] = $4; //@line 31870
  $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 31871
  HEAP32[$40 >> 2] = $10; //@line 31872
  $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 31873
  HEAP32[$41 >> 2] = $30; //@line 31874
  $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 31875
  HEAP32[$42 >> 2] = $31; //@line 31876
  $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 31877
  HEAP32[$43 >> 2] = $18; //@line 31878
  $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 31879
  HEAP32[$44 >> 2] = $12; //@line 31880
  $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 31881
  HEAP32[$45 >> 2] = $33; //@line 31882
  $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 31883
  HEAP32[$46 >> 2] = $14; //@line 31884
  sp = STACKTOP; //@line 31885
  return;
 }
}
function _schedule_interrupt__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $102 = 0, $105 = 0, $107 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $12 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $130 = 0, $135 = 0, $142 = 0, $144 = 0, $146 = 0, $149 = 0, $151 = 0, $158 = 0, $159 = 0, $162 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $177 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $86 = 0, $87 = 0, $9 = 0, $93 = 0, $94 = 0, $95 = 0, $97 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11454
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11456
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11458
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11462
 $8 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 11463
 $9 = $8 + 32 | 0; //@line 11464
 if (($AsyncRetVal | 0) != (HEAP32[$9 >> 2] | 0)) {
  $12 = $4 + 32 | 0; //@line 11468
  $17 = $AsyncRetVal - (HEAP32[$12 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 11473
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 11474
  $19 = HEAP32[$4 + 8 >> 2] | 0; //@line 11476
  L4 : do {
   if (($19 | 0) < 1e6) {
    switch ($19 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 6; //@line 11485
      break L4;
     }
    }
    $20 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 11489
    $22 = _bitshift64Lshr($20 | 0, tempRet0 | 0, 15) | 0; //@line 11491
    $23 = tempRet0; //@line 11492
    $26 = $4 + 40 | 0; //@line 11495
    $27 = $26; //@line 11496
    $33 = _i64Add(HEAP32[$27 >> 2] | 0, HEAP32[$27 + 4 >> 2] | 0, $17 * 1e6 & 32704 | 0, 0) | 0; //@line 11502
    $34 = tempRet0; //@line 11503
    $35 = $26; //@line 11504
    HEAP32[$35 >> 2] = $33; //@line 11506
    HEAP32[$35 + 4 >> 2] = $34; //@line 11509
    if ($34 >>> 0 < 0 | ($34 | 0) == 0 & $33 >>> 0 < 32768) {
     $93 = $22; //@line 11516
     $94 = $23; //@line 11516
    } else {
     $44 = _i64Add($22 | 0, $23 | 0, 1, 0) | 0; //@line 11518
     $45 = tempRet0; //@line 11519
     $46 = _i64Add($33 | 0, $34 | 0, -32768, -1) | 0; //@line 11520
     $48 = $26; //@line 11522
     HEAP32[$48 >> 2] = $46; //@line 11524
     HEAP32[$48 + 4 >> 2] = tempRet0; //@line 11527
     $93 = $44; //@line 11528
     $94 = $45; //@line 11528
    }
   } else {
    switch ($19 | 0) {
    case 1e6:
     {
      $93 = $17; //@line 11533
      $94 = 0; //@line 11533
      break;
     }
    default:
     {
      label = 6; //@line 11537
     }
    }
   }
  } while (0);
  if ((label | 0) == 6) {
   $52 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 11543
   $53 = tempRet0; //@line 11544
   $54 = ___udivdi3($52 | 0, $53 | 0, $19 | 0, 0) | 0; //@line 11545
   $55 = tempRet0; //@line 11546
   $56 = ___muldi3($54 | 0, $55 | 0, $19 | 0, 0) | 0; //@line 11547
   $58 = _i64Subtract($52 | 0, $53 | 0, $56 | 0, tempRet0 | 0) | 0; //@line 11549
   $60 = $4 + 40 | 0; //@line 11551
   $61 = $60; //@line 11552
   $67 = _i64Add($58 | 0, tempRet0 | 0, HEAP32[$61 >> 2] | 0, HEAP32[$61 + 4 >> 2] | 0) | 0; //@line 11558
   $68 = tempRet0; //@line 11559
   $69 = $60; //@line 11560
   HEAP32[$69 >> 2] = $67; //@line 11562
   HEAP32[$69 + 4 >> 2] = $68; //@line 11565
   if ($68 >>> 0 < 0 | ($68 | 0) == 0 & $67 >>> 0 < $19 >>> 0) {
    $93 = $54; //@line 11572
    $94 = $55; //@line 11572
   } else {
    $78 = _i64Add($54 | 0, $55 | 0, 1, 0) | 0; //@line 11574
    $79 = tempRet0; //@line 11575
    $80 = _i64Subtract($67 | 0, $68 | 0, $19 | 0, 0) | 0; //@line 11576
    $82 = $60; //@line 11578
    HEAP32[$82 >> 2] = $80; //@line 11580
    HEAP32[$82 + 4 >> 2] = tempRet0; //@line 11583
    $93 = $78; //@line 11584
    $94 = $79; //@line 11584
   }
  }
  $86 = $4 + 48 | 0; //@line 11587
  $87 = $86; //@line 11588
  $95 = _i64Add(HEAP32[$87 >> 2] | 0, HEAP32[$87 + 4 >> 2] | 0, $93 | 0, $94 | 0) | 0; //@line 11594
  $97 = $86; //@line 11596
  HEAP32[$97 >> 2] = $95; //@line 11598
  HEAP32[$97 + 4 >> 2] = tempRet0; //@line 11601
 }
 $102 = HEAP32[$8 + 4 >> 2] | 0; //@line 11604
 if (!$102) {
  $177 = (HEAP32[$4 + 16 >> 2] | 0) + (HEAP32[$4 + 32 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 11614
  $180 = HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0; //@line 11617
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 11618
  FUNCTION_TABLE_vi[$180 & 1023]($177); //@line 11619
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 710; //@line 11622
   sp = STACKTOP; //@line 11623
   return;
  }
  ___async_unwind = 0; //@line 11626
  HEAP32[$ReallocAsyncCtx7 >> 2] = 710; //@line 11627
  sp = STACKTOP; //@line 11628
  return;
 }
 $105 = $8 + 48 | 0; //@line 11632
 $107 = HEAP32[$105 >> 2] | 0; //@line 11634
 $110 = HEAP32[$105 + 4 >> 2] | 0; //@line 11637
 $111 = $102; //@line 11638
 $113 = HEAP32[$111 >> 2] | 0; //@line 11640
 $116 = HEAP32[$111 + 4 >> 2] | 0; //@line 11643
 if (!($116 >>> 0 > $110 >>> 0 | ($116 | 0) == ($110 | 0) & $113 >>> 0 > $107 >>> 0)) {
  $124 = HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] | 0; //@line 11652
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 11653
  FUNCTION_TABLE_v[$124 & 15](); //@line 11654
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 705; //@line 11657
   sp = STACKTOP; //@line 11658
   return;
  }
  ___async_unwind = 0; //@line 11661
  HEAP32[$ReallocAsyncCtx2 >> 2] = 705; //@line 11662
  sp = STACKTOP; //@line 11663
  return;
 }
 $125 = _i64Subtract($113 | 0, $116 | 0, $107 | 0, $110 | 0) | 0; //@line 11666
 $126 = tempRet0; //@line 11667
 $128 = HEAP32[$8 + 16 >> 2] | 0; //@line 11669
 $130 = $8 + 24 | 0; //@line 11671
 $135 = HEAP32[$130 + 4 >> 2] | 0; //@line 11676
 L28 : do {
  if ($126 >>> 0 > $135 >>> 0 | (($126 | 0) == ($135 | 0) ? $125 >>> 0 > (HEAP32[$130 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $128; //@line 11684
  } else {
   $142 = HEAP32[$8 + 8 >> 2] | 0; //@line 11687
   L30 : do {
    if (($142 | 0) < 1e6) {
     switch ($142 | 0) {
     case 32768:
      {
       break;
      }
     default:
      {
       break L30;
      }
     }
     $144 = _bitshift64Shl($125 | 0, $126 | 0, 15) | 0; //@line 11699
     $146 = ___udivdi3($144 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 11701
     $$0$i = $128 >>> 0 < $146 >>> 0 ? $128 : $146; //@line 11705
     break L28;
    } else {
     switch ($142 | 0) {
     case 1e6:
      {
       break;
      }
     default:
      {
       break L30;
      }
     }
     $$0$i = $128 >>> 0 < $125 >>> 0 ? $128 : $125; //@line 11718
     break L28;
    }
   } while (0);
   $149 = ___muldi3($125 | 0, $126 | 0, $142 | 0, 0) | 0; //@line 11722
   $151 = ___udivdi3($149 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 11724
   $$0$i = $128 >>> 0 < $151 >>> 0 ? $128 : $151; //@line 11728
  }
 } while (0);
 $158 = (HEAP32[$9 >> 2] | 0) + $$0$i & HEAP32[$8 + 12 >> 2]; //@line 11735
 $159 = $4 + 32 | 0; //@line 11736
 $162 = HEAP32[$2 >> 2] | 0; //@line 11739
 if (($158 | 0) == (HEAP32[$159 >> 2] | 0)) {
  $164 = HEAP32[$162 + 20 >> 2] | 0; //@line 11742
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 11743
  FUNCTION_TABLE_v[$164 & 15](); //@line 11744
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 706; //@line 11747
   sp = STACKTOP; //@line 11748
   return;
  }
  ___async_unwind = 0; //@line 11751
  HEAP32[$ReallocAsyncCtx3 >> 2] = 706; //@line 11752
  sp = STACKTOP; //@line 11753
  return;
 } else {
  $166 = HEAP32[$162 + 16 >> 2] | 0; //@line 11757
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 11758
  FUNCTION_TABLE_vi[$166 & 1023]($158); //@line 11759
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 707; //@line 11762
   $167 = $ReallocAsyncCtx4 + 4 | 0; //@line 11763
   HEAP32[$167 >> 2] = $2; //@line 11764
   $168 = $ReallocAsyncCtx4 + 8 | 0; //@line 11765
   HEAP32[$168 >> 2] = $159; //@line 11766
   $169 = $ReallocAsyncCtx4 + 12 | 0; //@line 11767
   HEAP32[$169 >> 2] = $158; //@line 11768
   sp = STACKTOP; //@line 11769
   return;
  }
  ___async_unwind = 0; //@line 11772
  HEAP32[$ReallocAsyncCtx4 >> 2] = 707; //@line 11773
  $167 = $ReallocAsyncCtx4 + 4 | 0; //@line 11774
  HEAP32[$167 >> 2] = $2; //@line 11775
  $168 = $ReallocAsyncCtx4 + 8 | 0; //@line 11776
  HEAP32[$168 >> 2] = $159; //@line 11777
  $169 = $ReallocAsyncCtx4 + 12 | 0; //@line 11778
  HEAP32[$169 >> 2] = $158; //@line 11779
  sp = STACKTOP; //@line 11780
  return;
 }
}
function _main() {
 var $$0 = 0, $$1 = 0, $$pr = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $26 = 0, $30 = 0, $37 = 0, $40 = 0, $46 = 0, $50 = 0, $51 = 0, $54 = 0, $62 = 0, $63 = 0, $72 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx4 = 0, $AsyncCtx7 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6467
 STACKTOP = STACKTOP + 64 | 0; //@line 6468
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 6468
 $vararg_buffer1 = sp + 8 | 0; //@line 6469
 $0 = sp + 16 | 0; //@line 6471
 $1 = sp + 32 | 0; //@line 6472
 if (!((HEAP8[23906] | HEAP8[23905] | HEAP8[23907] | HEAP8[23908] | HEAP8[23909] | HEAP8[23910] | HEAP8[23911] | HEAP8[23912]) << 24 >> 24)) {
  _printf(15301, sp) | 0; //@line 6490
  $$1 = -1; //@line 6491
  STACKTOP = sp; //@line 6492
  return $$1 | 0; //@line 6492
 }
 $AsyncCtx27 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6494
 _puts(15337) | 0; //@line 6495
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 747; //@line 6498
  HEAP32[$AsyncCtx27 + 4 >> 2] = $1; //@line 6500
  HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer1; //@line 6502
  HEAP32[$AsyncCtx27 + 12 >> 2] = $vararg_buffer1; //@line 6504
  HEAP32[$AsyncCtx27 + 16 >> 2] = $1; //@line 6506
  HEAP32[$AsyncCtx27 + 20 >> 2] = $0; //@line 6508
  sp = STACKTOP; //@line 6509
  STACKTOP = sp; //@line 6510
  return 0; //@line 6510
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6512
 if (__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE(23200, 23e3) | 0) {
  $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6516
  _puts(15404) | 0; //@line 6517
  if (___async) {
   HEAP32[$AsyncCtx23 >> 2] = 748; //@line 6520
   sp = STACKTOP; //@line 6521
   STACKTOP = sp; //@line 6522
   return 0; //@line 6522
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6524
  $$1 = -1; //@line 6525
  STACKTOP = sp; //@line 6526
  return $$1 | 0; //@line 6526
 }
 $26 = $0 + 4 | 0; //@line 6529
 HEAP32[$26 >> 2] = 0; //@line 6531
 HEAP32[$26 + 4 >> 2] = 0; //@line 6534
 HEAP32[$0 >> 2] = 7; //@line 6535
 $30 = $0 + 12 | 0; //@line 6536
 HEAP32[$30 >> 2] = 10120; //@line 6537
 $AsyncCtx34 = _emscripten_alloc_async_context(28, sp) | 0; //@line 6538
 __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE(22928, $0); //@line 6539
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 749; //@line 6542
  HEAP32[$AsyncCtx34 + 4 >> 2] = $1; //@line 6544
  HEAP32[$AsyncCtx34 + 8 >> 2] = $vararg_buffer1; //@line 6546
  HEAP32[$AsyncCtx34 + 12 >> 2] = $vararg_buffer1; //@line 6548
  HEAP32[$AsyncCtx34 + 16 >> 2] = $1; //@line 6550
  HEAP32[$AsyncCtx34 + 20 >> 2] = $0; //@line 6552
  HEAP32[$AsyncCtx34 + 24 >> 2] = $30; //@line 6554
  sp = STACKTOP; //@line 6555
  STACKTOP = sp; //@line 6556
  return 0; //@line 6556
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 6558
 $37 = HEAP32[$30 >> 2] | 0; //@line 6559
 do {
  if ($37 | 0) {
   $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 6564
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 6565
   FUNCTION_TABLE_vi[$40 & 1023]($0); //@line 6566
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 750; //@line 6569
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6571
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 6573
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 6575
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 6577
    sp = STACKTOP; //@line 6578
    STACKTOP = sp; //@line 6579
    return 0; //@line 6579
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6581
    break;
   }
  }
 } while (0);
 $46 = $1 + 4 | 0; //@line 6587
 HEAP32[$46 >> 2] = 0; //@line 6589
 HEAP32[$46 + 4 >> 2] = 0; //@line 6592
 HEAP32[$1 >> 2] = 751; //@line 6593
 $50 = $1 + 12 | 0; //@line 6594
 HEAP32[$50 >> 2] = 10140; //@line 6595
 $51 = HEAP32[5805] | 0; //@line 6596
 if (!$51) {
  $62 = 10140; //@line 6599
  label = 20; //@line 6600
 } else {
  $54 = HEAP32[$51 + 8 >> 2] | 0; //@line 6603
  $AsyncCtx4 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6604
  FUNCTION_TABLE_vi[$54 & 1023](23208); //@line 6605
  if (___async) {
   HEAP32[$AsyncCtx4 >> 2] = 752; //@line 6608
   HEAP32[$AsyncCtx4 + 4 >> 2] = $1; //@line 6610
   HEAP32[$AsyncCtx4 + 8 >> 2] = $vararg_buffer1; //@line 6612
   HEAP32[$AsyncCtx4 + 12 >> 2] = $vararg_buffer1; //@line 6614
   HEAP32[$AsyncCtx4 + 16 >> 2] = $1; //@line 6616
   HEAP32[$AsyncCtx4 + 20 >> 2] = $50; //@line 6618
   sp = STACKTOP; //@line 6619
   STACKTOP = sp; //@line 6620
   return 0; //@line 6620
  }
  _emscripten_free_async_context($AsyncCtx4 | 0); //@line 6622
  $$pr = HEAP32[$50 >> 2] | 0; //@line 6623
  if (!$$pr) {
   HEAP32[5805] = 0; //@line 6626
  } else {
   $62 = $$pr; //@line 6628
   label = 20; //@line 6629
  }
 }
 do {
  if ((label | 0) == 20) {
   $63 = HEAP32[$62 + 4 >> 2] | 0; //@line 6635
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6636
   FUNCTION_TABLE_vii[$63 & 31](23208, $1); //@line 6637
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 753; //@line 6640
    HEAP32[$AsyncCtx7 + 4 >> 2] = $1; //@line 6642
    HEAP32[$AsyncCtx7 + 8 >> 2] = $vararg_buffer1; //@line 6644
    HEAP32[$AsyncCtx7 + 12 >> 2] = $vararg_buffer1; //@line 6646
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 6648
    HEAP32[$AsyncCtx7 + 20 >> 2] = $50; //@line 6650
    sp = STACKTOP; //@line 6651
    STACKTOP = sp; //@line 6652
    return 0; //@line 6652
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6654
   $$pre$i$i = HEAP32[$50 >> 2] | 0; //@line 6655
   HEAP32[5805] = $$pre$i$i; //@line 6656
   if ($$pre$i$i | 0) {
    $72 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 6661
    $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6662
    FUNCTION_TABLE_vi[$72 & 1023]($1); //@line 6663
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 754; //@line 6666
     HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 6668
     HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 6670
     HEAP32[$AsyncCtx11 + 12 >> 2] = $vararg_buffer1; //@line 6672
     HEAP32[$AsyncCtx11 + 16 >> 2] = $vararg_buffer1; //@line 6674
     sp = STACKTOP; //@line 6675
     STACKTOP = sp; //@line 6676
     return 0; //@line 6676
    } else {
     _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6678
     break;
    }
   }
  }
 } while (0);
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(23200, 23208) | 0; //@line 6684
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(23200) | 0) {
  $AsyncCtx19 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6688
  _puts(15432) | 0; //@line 6689
  if (___async) {
   HEAP32[$AsyncCtx19 >> 2] = 755; //@line 6692
   sp = STACKTOP; //@line 6693
   STACKTOP = sp; //@line 6694
   return 0; //@line 6694
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 6696
  $$1 = -1; //@line 6697
  STACKTOP = sp; //@line 6698
  return $$1 | 0; //@line 6698
 }
 __ZN16LoRaWANInterface12set_datarateEh(23200, 5) | 0; //@line 6700
 HEAP8[$1 >> 0] = 0; //@line 6701
 HEAP32[$1 + 4 >> 2] = 23905; //@line 6703
 HEAP32[$1 + 8 >> 2] = 23913; //@line 6705
 HEAP32[$1 + 12 >> 2] = 23921; //@line 6707
 HEAP8[$1 + 16 >> 0] = 3; //@line 6709
 $83 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(23200, $1) | 0; //@line 6710
 L47 : do {
  switch ($83 | 0) {
  case 0:
  case -1016:
   {
    $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6714
    _puts(15495) | 0; //@line 6715
    if (___async) {
     HEAP32[$AsyncCtx15 >> 2] = 756; //@line 6718
     HEAP32[$AsyncCtx15 + 4 >> 2] = $1; //@line 6720
     sp = STACKTOP; //@line 6721
     STACKTOP = sp; //@line 6722
     return 0; //@line 6722
    }
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6724
    $AsyncCtx30 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6725
    __ZN6events10EventQueue8dispatchEi(23e3, -1); //@line 6726
    if (___async) {
     HEAP32[$AsyncCtx30 >> 2] = 757; //@line 6729
     HEAP32[$AsyncCtx30 + 4 >> 2] = $1; //@line 6731
     sp = STACKTOP; //@line 6732
     STACKTOP = sp; //@line 6733
     return 0; //@line 6733
    } else {
     _emscripten_free_async_context($AsyncCtx30 | 0); //@line 6735
     $$0 = 0; //@line 6736
     break L47;
    }
    break;
   }
  default:
   {
    HEAP32[$vararg_buffer1 >> 2] = $83; //@line 6742
    _printf(15466, $vararg_buffer1) | 0; //@line 6743
    $$0 = -1; //@line 6744
   }
  }
 } while (0);
 $$1 = $$0; //@line 6748
 STACKTOP = sp; //@line 6749
 return $$1 | 0; //@line 6749
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5596
 STACKTOP = STACKTOP + 32 | 0; //@line 5597
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 5597
 $0 = sp; //@line 5598
 _gpio_init_out($0, 50); //@line 5599
 while (1) {
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5602
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5603
  _wait_ms(150); //@line 5604
  if (___async) {
   label = 3; //@line 5607
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 5610
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5612
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5613
  _wait_ms(150); //@line 5614
  if (___async) {
   label = 5; //@line 5617
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 5620
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5622
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5623
  _wait_ms(150); //@line 5624
  if (___async) {
   label = 7; //@line 5627
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 5630
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5632
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5633
  _wait_ms(150); //@line 5634
  if (___async) {
   label = 9; //@line 5637
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 5640
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5642
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5643
  _wait_ms(150); //@line 5644
  if (___async) {
   label = 11; //@line 5647
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 5650
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5652
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5653
  _wait_ms(150); //@line 5654
  if (___async) {
   label = 13; //@line 5657
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 5660
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5662
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5663
  _wait_ms(150); //@line 5664
  if (___async) {
   label = 15; //@line 5667
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 5670
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5672
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5673
  _wait_ms(150); //@line 5674
  if (___async) {
   label = 17; //@line 5677
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 5680
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5682
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5683
  _wait_ms(400); //@line 5684
  if (___async) {
   label = 19; //@line 5687
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 5690
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5692
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5693
  _wait_ms(400); //@line 5694
  if (___async) {
   label = 21; //@line 5697
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 5700
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5702
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5703
  _wait_ms(400); //@line 5704
  if (___async) {
   label = 23; //@line 5707
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 5710
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5712
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5713
  _wait_ms(400); //@line 5714
  if (___async) {
   label = 25; //@line 5717
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 5720
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5722
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5723
  _wait_ms(400); //@line 5724
  if (___async) {
   label = 27; //@line 5727
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5730
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5732
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5733
  _wait_ms(400); //@line 5734
  if (___async) {
   label = 29; //@line 5737
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5740
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5742
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5743
  _wait_ms(400); //@line 5744
  if (___async) {
   label = 31; //@line 5747
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5750
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5752
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5753
  _wait_ms(400); //@line 5754
  if (___async) {
   label = 33; //@line 5757
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5760
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 715; //@line 5764
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 5766
   sp = STACKTOP; //@line 5767
   STACKTOP = sp; //@line 5768
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 716; //@line 5772
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 5774
   sp = STACKTOP; //@line 5775
   STACKTOP = sp; //@line 5776
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 717; //@line 5780
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 5782
   sp = STACKTOP; //@line 5783
   STACKTOP = sp; //@line 5784
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 718; //@line 5788
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 5790
   sp = STACKTOP; //@line 5791
   STACKTOP = sp; //@line 5792
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 719; //@line 5796
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 5798
   sp = STACKTOP; //@line 5799
   STACKTOP = sp; //@line 5800
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 720; //@line 5804
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 5806
   sp = STACKTOP; //@line 5807
   STACKTOP = sp; //@line 5808
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 721; //@line 5812
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 5814
   sp = STACKTOP; //@line 5815
   STACKTOP = sp; //@line 5816
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 722; //@line 5820
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 5822
   sp = STACKTOP; //@line 5823
   STACKTOP = sp; //@line 5824
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 723; //@line 5828
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 5830
   sp = STACKTOP; //@line 5831
   STACKTOP = sp; //@line 5832
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 724; //@line 5836
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 5838
   sp = STACKTOP; //@line 5839
   STACKTOP = sp; //@line 5840
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 725; //@line 5844
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 5846
   sp = STACKTOP; //@line 5847
   STACKTOP = sp; //@line 5848
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 726; //@line 5852
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 5854
   sp = STACKTOP; //@line 5855
   STACKTOP = sp; //@line 5856
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 727; //@line 5860
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 5862
   sp = STACKTOP; //@line 5863
   STACKTOP = sp; //@line 5864
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 728; //@line 5868
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 5870
   sp = STACKTOP; //@line 5871
   STACKTOP = sp; //@line 5872
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 729; //@line 5876
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5878
   sp = STACKTOP; //@line 5879
   STACKTOP = sp; //@line 5880
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 730; //@line 5884
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5886
   sp = STACKTOP; //@line 5887
   STACKTOP = sp; //@line 5888
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_75($0) {
 $0 = $0 | 0;
 var $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $58 = 0, $59 = 0, $61 = 0, $64 = 0, $67 = 0, $69 = 0, $72 = 0, $75 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24062
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24064
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24066
 $5 = $2 + 688 | 0; //@line 24067
 switch (HEAP8[$5 >> 0] | 0) {
 case 1:
  {
   if (!(HEAP8[$2 + 689 >> 0] | 0)) {
    HEAP8[$2 + 732 >> 0] = 0; //@line 24076
    HEAP8[$2 + 733 >> 0] = 0; //@line 24078
    HEAP16[$2 + 744 >> 1] = 0; //@line 24080
    HEAP16[$2 + 742 >> 1] = 0; //@line 24082
    if (!(HEAP8[$2 + 722 >> 0] | 0)) {
     HEAP8[$5 >> 0] = 0; //@line 24087
     $17 = $2 + 1176 | 0; //@line 24088
     $18 = $4 + 12 | 0; //@line 24089
     HEAP32[$4 >> 2] = 73; //@line 24090
     HEAP32[$4 + 4 >> 2] = 0; //@line 24092
     HEAP32[$4 + 8 >> 2] = $2; //@line 24094
     HEAP32[$18 >> 2] = 648; //@line 24095
     $21 = ___muldi3(HEAP32[$2 + 728 >> 2] | 0, 0, 1e3, 0) | 0; //@line 24098
     $22 = tempRet0; //@line 24099
     $23 = $2 + 1216 | 0; //@line 24100
     do {
      if (($23 | 0) != ($4 | 0)) {
       $25 = $2 + 1228 | 0; //@line 24104
       $26 = HEAP32[$25 >> 2] | 0; //@line 24105
       if ($26 | 0) {
        $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 24109
        $ReallocAsyncCtx = _emscripten_realloc_async_context(40) | 0; //@line 24110
        FUNCTION_TABLE_vi[$29 & 1023]($23); //@line 24111
        if (___async) {
         HEAP32[$ReallocAsyncCtx >> 2] = 132; //@line 24114
         $30 = $ReallocAsyncCtx + 4 | 0; //@line 24115
         HEAP32[$30 >> 2] = $18; //@line 24116
         $31 = $ReallocAsyncCtx + 8 | 0; //@line 24117
         HEAP32[$31 >> 2] = $25; //@line 24118
         $32 = $ReallocAsyncCtx + 12 | 0; //@line 24119
         HEAP32[$32 >> 2] = $23; //@line 24120
         $33 = $ReallocAsyncCtx + 16 | 0; //@line 24121
         HEAP32[$33 >> 2] = $4; //@line 24122
         $34 = $ReallocAsyncCtx + 20 | 0; //@line 24123
         HEAP32[$34 >> 2] = $17; //@line 24124
         $35 = $ReallocAsyncCtx + 24 | 0; //@line 24125
         $36 = $35; //@line 24126
         $37 = $36; //@line 24127
         HEAP32[$37 >> 2] = $21; //@line 24128
         $38 = $36 + 4 | 0; //@line 24129
         $39 = $38; //@line 24130
         HEAP32[$39 >> 2] = $22; //@line 24131
         $40 = $ReallocAsyncCtx + 32 | 0; //@line 24132
         HEAP32[$40 >> 2] = $2; //@line 24133
         sp = STACKTOP; //@line 24134
         return;
        }
        ___async_unwind = 0; //@line 24137
        HEAP32[$ReallocAsyncCtx >> 2] = 132; //@line 24138
        $30 = $ReallocAsyncCtx + 4 | 0; //@line 24139
        HEAP32[$30 >> 2] = $18; //@line 24140
        $31 = $ReallocAsyncCtx + 8 | 0; //@line 24141
        HEAP32[$31 >> 2] = $25; //@line 24142
        $32 = $ReallocAsyncCtx + 12 | 0; //@line 24143
        HEAP32[$32 >> 2] = $23; //@line 24144
        $33 = $ReallocAsyncCtx + 16 | 0; //@line 24145
        HEAP32[$33 >> 2] = $4; //@line 24146
        $34 = $ReallocAsyncCtx + 20 | 0; //@line 24147
        HEAP32[$34 >> 2] = $17; //@line 24148
        $35 = $ReallocAsyncCtx + 24 | 0; //@line 24149
        $36 = $35; //@line 24150
        $37 = $36; //@line 24151
        HEAP32[$37 >> 2] = $21; //@line 24152
        $38 = $36 + 4 | 0; //@line 24153
        $39 = $38; //@line 24154
        HEAP32[$39 >> 2] = $22; //@line 24155
        $40 = $ReallocAsyncCtx + 32 | 0; //@line 24156
        HEAP32[$40 >> 2] = $2; //@line 24157
        sp = STACKTOP; //@line 24158
        return;
       }
       $41 = HEAP32[$18 >> 2] | 0; //@line 24161
       if (!$41) {
        HEAP32[$25 >> 2] = 0; //@line 24164
        break;
       }
       $44 = HEAP32[$41 + 4 >> 2] | 0; //@line 24168
       $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 24169
       FUNCTION_TABLE_vii[$44 & 31]($23, $4); //@line 24170
       if (___async) {
        HEAP32[$ReallocAsyncCtx2 >> 2] = 133; //@line 24173
        $45 = $ReallocAsyncCtx2 + 4 | 0; //@line 24174
        HEAP32[$45 >> 2] = $18; //@line 24175
        $46 = $ReallocAsyncCtx2 + 8 | 0; //@line 24176
        HEAP32[$46 >> 2] = $25; //@line 24177
        $47 = $ReallocAsyncCtx2 + 12 | 0; //@line 24178
        HEAP32[$47 >> 2] = $17; //@line 24179
        $48 = $ReallocAsyncCtx2 + 16 | 0; //@line 24180
        $49 = $48; //@line 24181
        $50 = $49; //@line 24182
        HEAP32[$50 >> 2] = $21; //@line 24183
        $51 = $49 + 4 | 0; //@line 24184
        $52 = $51; //@line 24185
        HEAP32[$52 >> 2] = $22; //@line 24186
        $53 = $ReallocAsyncCtx2 + 24 | 0; //@line 24187
        HEAP32[$53 >> 2] = $2; //@line 24188
        $54 = $ReallocAsyncCtx2 + 28 | 0; //@line 24189
        HEAP32[$54 >> 2] = $4; //@line 24190
        sp = STACKTOP; //@line 24191
        return;
       }
       ___async_unwind = 0; //@line 24194
       HEAP32[$ReallocAsyncCtx2 >> 2] = 133; //@line 24195
       $45 = $ReallocAsyncCtx2 + 4 | 0; //@line 24196
       HEAP32[$45 >> 2] = $18; //@line 24197
       $46 = $ReallocAsyncCtx2 + 8 | 0; //@line 24198
       HEAP32[$46 >> 2] = $25; //@line 24199
       $47 = $ReallocAsyncCtx2 + 12 | 0; //@line 24200
       HEAP32[$47 >> 2] = $17; //@line 24201
       $48 = $ReallocAsyncCtx2 + 16 | 0; //@line 24202
       $49 = $48; //@line 24203
       $50 = $49; //@line 24204
       HEAP32[$50 >> 2] = $21; //@line 24205
       $51 = $49 + 4 | 0; //@line 24206
       $52 = $51; //@line 24207
       HEAP32[$52 >> 2] = $22; //@line 24208
       $53 = $ReallocAsyncCtx2 + 24 | 0; //@line 24209
       HEAP32[$53 >> 2] = $2; //@line 24210
       $54 = $ReallocAsyncCtx2 + 28 | 0; //@line 24211
       HEAP32[$54 >> 2] = $4; //@line 24212
       sp = STACKTOP; //@line 24213
       return;
      }
     } while (0);
     __ZN4mbed6Ticker5setupEy($17, $21, $22); //@line 24217
     $55 = HEAP32[$18 >> 2] | 0; //@line 24218
     if ($55 | 0) {
      $58 = HEAP32[$55 + 8 >> 2] | 0; //@line 24222
      $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 24223
      FUNCTION_TABLE_vi[$58 & 1023]($4); //@line 24224
      if (___async) {
       HEAP32[$ReallocAsyncCtx3 >> 2] = 134; //@line 24227
       $59 = $ReallocAsyncCtx3 + 4 | 0; //@line 24228
       HEAP32[$59 >> 2] = $2; //@line 24229
       sp = STACKTOP; //@line 24230
       return;
      }
      ___async_unwind = 0; //@line 24233
      HEAP32[$ReallocAsyncCtx3 >> 2] = 134; //@line 24234
      $59 = $ReallocAsyncCtx3 + 4 | 0; //@line 24235
      HEAP32[$59 >> 2] = $2; //@line 24236
      sp = STACKTOP; //@line 24237
      return;
     }
    }
   }
   $61 = HEAP32[$2 + 784 >> 2] | 0; //@line 24243
   if (!$61) {
    return;
   }
   $64 = HEAP32[$61 + 60 >> 2] | 0; //@line 24249
   if (!$64) {
    return;
   }
   $67 = HEAP32[$64 >> 2] | 0; //@line 24255
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 24256
   FUNCTION_TABLE_vi[$67 & 1023]($61 + 48 | 0); //@line 24257
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 24260
    sp = STACKTOP; //@line 24261
    return;
   }
   ___async_unwind = 0; //@line 24264
   HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 24265
   sp = STACKTOP; //@line 24266
   return;
  }
 case 2:
  {
   HEAP8[$5 >> 0] = 0; //@line 24271
   $69 = HEAP32[$2 + 784 >> 2] | 0; //@line 24273
   if (!$69) {
    return;
   }
   $72 = HEAP32[$69 + 28 >> 2] | 0; //@line 24279
   if (!$72) {
    return;
   }
   $75 = HEAP32[$72 >> 2] | 0; //@line 24285
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 24286
   FUNCTION_TABLE_vi[$75 & 1023]($69 + 16 | 0); //@line 24287
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 136; //@line 24290
    sp = STACKTOP; //@line 24291
    return;
   }
   ___async_unwind = 0; //@line 24294
   HEAP32[$ReallocAsyncCtx5 >> 2] = 136; //@line 24295
   sp = STACKTOP; //@line 24296
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_446($0) {
 $0 = $0 | 0;
 var $$pre119 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 32067
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32069
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32071
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32073
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32075
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32077
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32079
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32081
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32083
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32085
 $$pre119 = HEAP32[$8 >> 2] | 0; //@line 32086
 if ($$pre119 | 0) {
  $21 = HEAP32[$$pre119 + 4 >> 2] | 0; //@line 32090
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 32091
  FUNCTION_TABLE_vii[$21 & 31]($10, $12); //@line 32092
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 571; //@line 32095
   $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 32096
   HEAP32[$22 >> 2] = $2; //@line 32097
   $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 32098
   HEAP32[$23 >> 2] = $4; //@line 32099
   $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 32100
   HEAP32[$24 >> 2] = $6; //@line 32101
   $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 32102
   HEAP32[$25 >> 2] = $12; //@line 32103
   $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 32104
   HEAP32[$26 >> 2] = $14; //@line 32105
   $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 32106
   HEAP32[$27 >> 2] = $18; //@line 32107
   $28 = $ReallocAsyncCtx5 + 28 | 0; //@line 32108
   HEAP32[$28 >> 2] = $8; //@line 32109
   $29 = $ReallocAsyncCtx5 + 32 | 0; //@line 32110
   HEAP32[$29 >> 2] = $16; //@line 32111
   sp = STACKTOP; //@line 32112
   return;
  }
  ___async_unwind = 0; //@line 32115
  HEAP32[$ReallocAsyncCtx5 >> 2] = 571; //@line 32116
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 32117
  HEAP32[$22 >> 2] = $2; //@line 32118
  $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 32119
  HEAP32[$23 >> 2] = $4; //@line 32120
  $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 32121
  HEAP32[$24 >> 2] = $6; //@line 32122
  $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 32123
  HEAP32[$25 >> 2] = $12; //@line 32124
  $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 32125
  HEAP32[$26 >> 2] = $14; //@line 32126
  $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 32127
  HEAP32[$27 >> 2] = $18; //@line 32128
  $28 = $ReallocAsyncCtx5 + 28 | 0; //@line 32129
  HEAP32[$28 >> 2] = $8; //@line 32130
  $29 = $ReallocAsyncCtx5 + 32 | 0; //@line 32131
  HEAP32[$29 >> 2] = $16; //@line 32132
  sp = STACKTOP; //@line 32133
  return;
 }
 HEAP32[$16 >> 2] = 0; //@line 32136
 $30 = $14 + 12 | 0; //@line 32137
 HEAP32[$14 >> 2] = 573; //@line 32138
 HEAP32[$14 + 4 >> 2] = 0; //@line 32140
 HEAP32[$14 + 8 >> 2] = $4; //@line 32142
 HEAP32[$30 >> 2] = 848; //@line 32143
 $31 = $4 + 1276 | 0; //@line 32144
 if (($31 | 0) == ($14 | 0)) {
  $56 = HEAP32[214] | 0; //@line 32148
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 32149
  FUNCTION_TABLE_vi[$56 & 1023]($14); //@line 32150
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 576; //@line 32153
   $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 32154
   HEAP32[$57 >> 2] = $2; //@line 32155
   $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 32156
   HEAP32[$58 >> 2] = $4; //@line 32157
   $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 32158
   HEAP32[$59 >> 2] = $14; //@line 32159
   $60 = $ReallocAsyncCtx9 + 16 | 0; //@line 32160
   HEAP32[$60 >> 2] = $6; //@line 32161
   $61 = $ReallocAsyncCtx9 + 20 | 0; //@line 32162
   HEAP32[$61 >> 2] = $18; //@line 32163
   sp = STACKTOP; //@line 32164
   return;
  }
  ___async_unwind = 0; //@line 32167
  HEAP32[$ReallocAsyncCtx9 >> 2] = 576; //@line 32168
  $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 32169
  HEAP32[$57 >> 2] = $2; //@line 32170
  $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 32171
  HEAP32[$58 >> 2] = $4; //@line 32172
  $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 32173
  HEAP32[$59 >> 2] = $14; //@line 32174
  $60 = $ReallocAsyncCtx9 + 16 | 0; //@line 32175
  HEAP32[$60 >> 2] = $6; //@line 32176
  $61 = $ReallocAsyncCtx9 + 20 | 0; //@line 32177
  HEAP32[$61 >> 2] = $18; //@line 32178
  sp = STACKTOP; //@line 32179
  return;
 }
 $33 = $4 + 1288 | 0; //@line 32182
 $34 = HEAP32[$33 >> 2] | 0; //@line 32183
 if (!$34) {
  $47 = HEAP32[213] | 0; //@line 32187
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 32188
  FUNCTION_TABLE_vii[$47 & 31]($31, $14); //@line 32189
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 575; //@line 32192
   $48 = $ReallocAsyncCtx8 + 4 | 0; //@line 32193
   HEAP32[$48 >> 2] = $2; //@line 32194
   $49 = $ReallocAsyncCtx8 + 8 | 0; //@line 32195
   HEAP32[$49 >> 2] = $4; //@line 32196
   $50 = $ReallocAsyncCtx8 + 12 | 0; //@line 32197
   HEAP32[$50 >> 2] = $14; //@line 32198
   $51 = $ReallocAsyncCtx8 + 16 | 0; //@line 32199
   HEAP32[$51 >> 2] = $6; //@line 32200
   $52 = $ReallocAsyncCtx8 + 20 | 0; //@line 32201
   HEAP32[$52 >> 2] = $30; //@line 32202
   $53 = $ReallocAsyncCtx8 + 24 | 0; //@line 32203
   HEAP32[$53 >> 2] = $33; //@line 32204
   $54 = $ReallocAsyncCtx8 + 28 | 0; //@line 32205
   HEAP32[$54 >> 2] = $18; //@line 32206
   sp = STACKTOP; //@line 32207
   return;
  }
  ___async_unwind = 0; //@line 32210
  HEAP32[$ReallocAsyncCtx8 >> 2] = 575; //@line 32211
  $48 = $ReallocAsyncCtx8 + 4 | 0; //@line 32212
  HEAP32[$48 >> 2] = $2; //@line 32213
  $49 = $ReallocAsyncCtx8 + 8 | 0; //@line 32214
  HEAP32[$49 >> 2] = $4; //@line 32215
  $50 = $ReallocAsyncCtx8 + 12 | 0; //@line 32216
  HEAP32[$50 >> 2] = $14; //@line 32217
  $51 = $ReallocAsyncCtx8 + 16 | 0; //@line 32218
  HEAP32[$51 >> 2] = $6; //@line 32219
  $52 = $ReallocAsyncCtx8 + 20 | 0; //@line 32220
  HEAP32[$52 >> 2] = $30; //@line 32221
  $53 = $ReallocAsyncCtx8 + 24 | 0; //@line 32222
  HEAP32[$53 >> 2] = $33; //@line 32223
  $54 = $ReallocAsyncCtx8 + 28 | 0; //@line 32224
  HEAP32[$54 >> 2] = $18; //@line 32225
  sp = STACKTOP; //@line 32226
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 32230
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 32231
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 32232
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 574; //@line 32235
   $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 32236
   HEAP32[$38 >> 2] = $2; //@line 32237
   $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 32238
   HEAP32[$39 >> 2] = $4; //@line 32239
   $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 32240
   HEAP32[$40 >> 2] = $14; //@line 32241
   $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 32242
   HEAP32[$41 >> 2] = $6; //@line 32243
   $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 32244
   HEAP32[$42 >> 2] = $31; //@line 32245
   $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 32246
   HEAP32[$43 >> 2] = $33; //@line 32247
   $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 32248
   HEAP32[$44 >> 2] = $30; //@line 32249
   $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 32250
   HEAP32[$45 >> 2] = $18; //@line 32251
   sp = STACKTOP; //@line 32252
   return;
  }
  ___async_unwind = 0; //@line 32255
  HEAP32[$ReallocAsyncCtx7 >> 2] = 574; //@line 32256
  $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 32257
  HEAP32[$38 >> 2] = $2; //@line 32258
  $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 32259
  HEAP32[$39 >> 2] = $4; //@line 32260
  $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 32261
  HEAP32[$40 >> 2] = $14; //@line 32262
  $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 32263
  HEAP32[$41 >> 2] = $6; //@line 32264
  $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 32265
  HEAP32[$42 >> 2] = $31; //@line 32266
  $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 32267
  HEAP32[$43 >> 2] = $33; //@line 32268
  $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 32269
  HEAP32[$44 >> 2] = $30; //@line 32270
  $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 32271
  HEAP32[$45 >> 2] = $18; //@line 32272
  sp = STACKTOP; //@line 32273
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24354
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24358
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24360
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 24362
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 24364
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 24366
 $$pre$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24367
 $13 = $4 + 12 | 0; //@line 24368
 HEAP32[$13 >> 2] = $$pre$i; //@line 24369
 if ($$pre$i | 0) {
  $16 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 24374
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 24375
  FUNCTION_TABLE_vii[$16 & 31]($6, $4); //@line 24376
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 280; //@line 24379
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 24380
   HEAP32[$17 >> 2] = $6; //@line 24381
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 24382
   HEAP32[$18 >> 2] = $13; //@line 24383
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 24384
   HEAP8[$19 >> 0] = $8; //@line 24385
   $20 = $ReallocAsyncCtx2 + 13 | 0; //@line 24386
   HEAP8[$20 >> 0] = $10; //@line 24387
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 24388
   HEAP32[$21 >> 2] = $12; //@line 24389
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 24390
   HEAP32[$22 >> 2] = $13; //@line 24391
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 24392
   HEAP32[$23 >> 2] = $4; //@line 24393
   sp = STACKTOP; //@line 24394
   return;
  }
  ___async_unwind = 0; //@line 24397
  HEAP32[$ReallocAsyncCtx2 >> 2] = 280; //@line 24398
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 24399
  HEAP32[$17 >> 2] = $6; //@line 24400
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 24401
  HEAP32[$18 >> 2] = $13; //@line 24402
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 24403
  HEAP8[$19 >> 0] = $8; //@line 24404
  $20 = $ReallocAsyncCtx2 + 13 | 0; //@line 24405
  HEAP8[$20 >> 0] = $10; //@line 24406
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 24407
  HEAP32[$21 >> 2] = $12; //@line 24408
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 24409
  HEAP32[$22 >> 2] = $13; //@line 24410
  $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 24411
  HEAP32[$23 >> 2] = $4; //@line 24412
  sp = STACKTOP; //@line 24413
  return;
 }
 $24 = $6 + 12 | 0; //@line 24416
 HEAP32[$24 >> 2] = 0; //@line 24417
 $25 = $6 + 16 | 0; //@line 24418
 HEAP8[$25 >> 0] = $8; //@line 24419
 HEAP8[$6 + 17 >> 0] = $10; //@line 24421
 $27 = _equeue_alloc($12, 20) | 0; //@line 24422
 if ($27 | 0) {
  $29 = HEAP32[$24 >> 2] | 0; //@line 24425
  if (!$29) {
   HEAP32[$27 + 12 >> 2] = 0; //@line 24429
   HEAP16[$27 + 16 >> 1] = HEAP16[$25 >> 1] | 0; //@line 24432
   _equeue_event_dtor($27, 282); //@line 24433
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 24434
   $44 = _equeue_post($12, 283, $27) | 0; //@line 24435
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 284; //@line 24438
    $45 = $ReallocAsyncCtx6 + 4 | 0; //@line 24439
    HEAP32[$45 >> 2] = $24; //@line 24440
    $46 = $ReallocAsyncCtx6 + 8 | 0; //@line 24441
    HEAP32[$46 >> 2] = $13; //@line 24442
    $47 = $ReallocAsyncCtx6 + 12 | 0; //@line 24443
    HEAP32[$47 >> 2] = $6; //@line 24444
    $48 = $ReallocAsyncCtx6 + 16 | 0; //@line 24445
    HEAP32[$48 >> 2] = $4; //@line 24446
    sp = STACKTOP; //@line 24447
    return;
   }
   HEAP32[___async_retval >> 2] = $44; //@line 24451
   ___async_unwind = 0; //@line 24452
   HEAP32[$ReallocAsyncCtx6 >> 2] = 284; //@line 24453
   $45 = $ReallocAsyncCtx6 + 4 | 0; //@line 24454
   HEAP32[$45 >> 2] = $24; //@line 24455
   $46 = $ReallocAsyncCtx6 + 8 | 0; //@line 24456
   HEAP32[$46 >> 2] = $13; //@line 24457
   $47 = $ReallocAsyncCtx6 + 12 | 0; //@line 24458
   HEAP32[$47 >> 2] = $6; //@line 24459
   $48 = $ReallocAsyncCtx6 + 16 | 0; //@line 24460
   HEAP32[$48 >> 2] = $4; //@line 24461
   sp = STACKTOP; //@line 24462
   return;
  } else {
   $32 = HEAP32[$29 + 4 >> 2] | 0; //@line 24466
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 24467
   FUNCTION_TABLE_vii[$32 & 31]($27, $6); //@line 24468
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 281; //@line 24471
    $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 24472
    HEAP32[$33 >> 2] = $24; //@line 24473
    $34 = $ReallocAsyncCtx3 + 8 | 0; //@line 24474
    HEAP32[$34 >> 2] = $27; //@line 24475
    $35 = $ReallocAsyncCtx3 + 12 | 0; //@line 24476
    HEAP32[$35 >> 2] = $25; //@line 24477
    $36 = $ReallocAsyncCtx3 + 16 | 0; //@line 24478
    HEAP32[$36 >> 2] = $12; //@line 24479
    $37 = $ReallocAsyncCtx3 + 20 | 0; //@line 24480
    HEAP32[$37 >> 2] = $24; //@line 24481
    $38 = $ReallocAsyncCtx3 + 24 | 0; //@line 24482
    HEAP32[$38 >> 2] = $13; //@line 24483
    $39 = $ReallocAsyncCtx3 + 28 | 0; //@line 24484
    HEAP32[$39 >> 2] = $6; //@line 24485
    $40 = $ReallocAsyncCtx3 + 32 | 0; //@line 24486
    HEAP32[$40 >> 2] = $4; //@line 24487
    sp = STACKTOP; //@line 24488
    return;
   }
   ___async_unwind = 0; //@line 24491
   HEAP32[$ReallocAsyncCtx3 >> 2] = 281; //@line 24492
   $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 24493
   HEAP32[$33 >> 2] = $24; //@line 24494
   $34 = $ReallocAsyncCtx3 + 8 | 0; //@line 24495
   HEAP32[$34 >> 2] = $27; //@line 24496
   $35 = $ReallocAsyncCtx3 + 12 | 0; //@line 24497
   HEAP32[$35 >> 2] = $25; //@line 24498
   $36 = $ReallocAsyncCtx3 + 16 | 0; //@line 24499
   HEAP32[$36 >> 2] = $12; //@line 24500
   $37 = $ReallocAsyncCtx3 + 20 | 0; //@line 24501
   HEAP32[$37 >> 2] = $24; //@line 24502
   $38 = $ReallocAsyncCtx3 + 24 | 0; //@line 24503
   HEAP32[$38 >> 2] = $13; //@line 24504
   $39 = $ReallocAsyncCtx3 + 28 | 0; //@line 24505
   HEAP32[$39 >> 2] = $6; //@line 24506
   $40 = $ReallocAsyncCtx3 + 32 | 0; //@line 24507
   HEAP32[$40 >> 2] = $4; //@line 24508
   sp = STACKTOP; //@line 24509
   return;
  }
 }
 $50 = HEAP32[$24 >> 2] | 0; //@line 24513
 if ($50 | 0) {
  $53 = HEAP32[$50 + 8 >> 2] | 0; //@line 24517
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 24518
  FUNCTION_TABLE_vi[$53 & 1023]($6); //@line 24519
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 285; //@line 24522
   $54 = $ReallocAsyncCtx4 + 4 | 0; //@line 24523
   HEAP32[$54 >> 2] = $13; //@line 24524
   $55 = $ReallocAsyncCtx4 + 8 | 0; //@line 24525
   HEAP32[$55 >> 2] = 0; //@line 24526
   $56 = $ReallocAsyncCtx4 + 12 | 0; //@line 24527
   HEAP32[$56 >> 2] = $4; //@line 24528
   sp = STACKTOP; //@line 24529
   return;
  }
  ___async_unwind = 0; //@line 24532
  HEAP32[$ReallocAsyncCtx4 >> 2] = 285; //@line 24533
  $54 = $ReallocAsyncCtx4 + 4 | 0; //@line 24534
  HEAP32[$54 >> 2] = $13; //@line 24535
  $55 = $ReallocAsyncCtx4 + 8 | 0; //@line 24536
  HEAP32[$55 >> 2] = 0; //@line 24537
  $56 = $ReallocAsyncCtx4 + 12 | 0; //@line 24538
  HEAP32[$56 >> 2] = $4; //@line 24539
  sp = STACKTOP; //@line 24540
  return;
 }
 $57 = HEAP32[$13 >> 2] | 0; //@line 24543
 if (!$57) {
  HEAP32[___async_retval >> 2] = 0; //@line 24547
  return;
 }
 $60 = HEAP32[$57 + 8 >> 2] | 0; //@line 24551
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 24552
 FUNCTION_TABLE_vi[$60 & 1023]($4); //@line 24553
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 286; //@line 24556
  $61 = $ReallocAsyncCtx5 + 4 | 0; //@line 24557
  HEAP32[$61 >> 2] = 0; //@line 24558
  sp = STACKTOP; //@line 24559
  return;
 }
 ___async_unwind = 0; //@line 24562
 HEAP32[$ReallocAsyncCtx5 >> 2] = 286; //@line 24563
 $61 = $ReallocAsyncCtx5 + 4 | 0; //@line 24564
 HEAP32[$61 >> 2] = 0; //@line 24565
 sp = STACKTOP; //@line 24566
 return;
}
function __ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb_100($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $48 = 0, $54 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26389
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26391
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 26397
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 26399
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 26401
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 26403
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 26405
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 26407
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 26409
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 26411
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 26413
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 26415
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 26417
 $34 = HEAP8[$2 >> 0] | 0; //@line 26418
 $39 = ($34 & 255) + (HEAPU8[$0 + 8 >> 0] | 0) & 255; //@line 26422
 $30 = (HEAP8[$0 + 9 >> 0] | 0) + 1 << 24 >> 24; //@line 26423
 if (($30 & 255) >= (HEAPU8[$8 >> 0] | 0)) {
  return;
 }
 if ((($34 & 255) + (HEAPU8[$10 >> 0] | 0) | 0) >>> 0 > ($30 & 255) >>> 0) {
  $37 = HEAP32[$14 >> 2] | 0; //@line 26436
  $38 = $39 & 255; //@line 26437
  $42 = HEAPU8[$37 + $38 >> 0] | 0; //@line 26440
  HEAP32[$16 >> 2] = $42; //@line 26441
  $48 = (HEAPU8[$37 + ($38 + 1) >> 0] | 0) << 8 | $42; //@line 26447
  HEAP32[$16 >> 2] = $48; //@line 26448
  $54 = (HEAPU8[$37 + ($38 + 2) >> 0] | 0) << 16 | $48; //@line 26454
  HEAP32[$16 >> 2] = $54 * 100; //@line 26456
  HEAP32[$18 >> 2] = 0; //@line 26457
  if ($54 | 0) {
   $59 = HEAP32[(HEAP32[$26 >> 2] | 0) + 60 >> 2] | 0; //@line 26462
   $ReallocAsyncCtx = _emscripten_realloc_async_context(56) | 0; //@line 26463
   FUNCTION_TABLE_iiii[$59 & 15]($24, $28, $30) | 0; //@line 26464
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 615; //@line 26467
    $60 = $ReallocAsyncCtx + 4 | 0; //@line 26468
    HEAP32[$60 >> 2] = $2; //@line 26469
    $61 = $ReallocAsyncCtx + 8 | 0; //@line 26470
    HEAP8[$61 >> 0] = $39; //@line 26471
    $62 = $ReallocAsyncCtx + 9 | 0; //@line 26472
    HEAP8[$62 >> 0] = $30; //@line 26473
    $63 = $ReallocAsyncCtx + 12 | 0; //@line 26474
    HEAP32[$63 >> 2] = $8; //@line 26475
    $64 = $ReallocAsyncCtx + 16 | 0; //@line 26476
    HEAP32[$64 >> 2] = $10; //@line 26477
    $65 = $ReallocAsyncCtx + 20 | 0; //@line 26478
    HEAP32[$65 >> 2] = $12; //@line 26479
    $66 = $ReallocAsyncCtx + 24 | 0; //@line 26480
    HEAP32[$66 >> 2] = $14; //@line 26481
    $67 = $ReallocAsyncCtx + 28 | 0; //@line 26482
    HEAP32[$67 >> 2] = $16; //@line 26483
    $68 = $ReallocAsyncCtx + 32 | 0; //@line 26484
    HEAP32[$68 >> 2] = $18; //@line 26485
    $69 = $ReallocAsyncCtx + 36 | 0; //@line 26486
    HEAP32[$69 >> 2] = $20; //@line 26487
    $70 = $ReallocAsyncCtx + 40 | 0; //@line 26488
    HEAP32[$70 >> 2] = $22; //@line 26489
    $71 = $ReallocAsyncCtx + 44 | 0; //@line 26490
    HEAP32[$71 >> 2] = $24; //@line 26491
    $72 = $ReallocAsyncCtx + 48 | 0; //@line 26492
    HEAP32[$72 >> 2] = $26; //@line 26493
    $73 = $ReallocAsyncCtx + 52 | 0; //@line 26494
    HEAP32[$73 >> 2] = $28; //@line 26495
    sp = STACKTOP; //@line 26496
    return;
   }
   ___async_unwind = 0; //@line 26499
   HEAP32[$ReallocAsyncCtx >> 2] = 615; //@line 26500
   $60 = $ReallocAsyncCtx + 4 | 0; //@line 26501
   HEAP32[$60 >> 2] = $2; //@line 26502
   $61 = $ReallocAsyncCtx + 8 | 0; //@line 26503
   HEAP8[$61 >> 0] = $39; //@line 26504
   $62 = $ReallocAsyncCtx + 9 | 0; //@line 26505
   HEAP8[$62 >> 0] = $30; //@line 26506
   $63 = $ReallocAsyncCtx + 12 | 0; //@line 26507
   HEAP32[$63 >> 2] = $8; //@line 26508
   $64 = $ReallocAsyncCtx + 16 | 0; //@line 26509
   HEAP32[$64 >> 2] = $10; //@line 26510
   $65 = $ReallocAsyncCtx + 20 | 0; //@line 26511
   HEAP32[$65 >> 2] = $12; //@line 26512
   $66 = $ReallocAsyncCtx + 24 | 0; //@line 26513
   HEAP32[$66 >> 2] = $14; //@line 26514
   $67 = $ReallocAsyncCtx + 28 | 0; //@line 26515
   HEAP32[$67 >> 2] = $16; //@line 26516
   $68 = $ReallocAsyncCtx + 32 | 0; //@line 26517
   HEAP32[$68 >> 2] = $18; //@line 26518
   $69 = $ReallocAsyncCtx + 36 | 0; //@line 26519
   HEAP32[$69 >> 2] = $20; //@line 26520
   $70 = $ReallocAsyncCtx + 40 | 0; //@line 26521
   HEAP32[$70 >> 2] = $22; //@line 26522
   $71 = $ReallocAsyncCtx + 44 | 0; //@line 26523
   HEAP32[$71 >> 2] = $24; //@line 26524
   $72 = $ReallocAsyncCtx + 48 | 0; //@line 26525
   HEAP32[$72 >> 2] = $26; //@line 26526
   $73 = $ReallocAsyncCtx + 52 | 0; //@line 26527
   HEAP32[$73 >> 2] = $28; //@line 26528
   sp = STACKTOP; //@line 26529
   return;
  }
 } else {
  HEAP32[$16 >> 2] = 0; //@line 26533
  HEAP8[$20 >> 0] = 0; //@line 26534
  HEAP32[$18 >> 2] = 0; //@line 26535
 }
 $76 = HEAP32[(HEAP32[$22 >> 2] | 0) + 64 >> 2] | 0; //@line 26539
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 26540
 FUNCTION_TABLE_iii[$76 & 31]($24, $30) | 0; //@line 26541
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 616; //@line 26544
  $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 26545
  HEAP32[$77 >> 2] = $2; //@line 26546
  $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 26547
  HEAP8[$78 >> 0] = $39; //@line 26548
  $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 26549
  HEAP8[$79 >> 0] = $30; //@line 26550
  $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 26551
  HEAP32[$80 >> 2] = $8; //@line 26552
  $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 26553
  HEAP32[$81 >> 2] = $10; //@line 26554
  $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 26555
  HEAP32[$82 >> 2] = $12; //@line 26556
  $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 26557
  HEAP32[$83 >> 2] = $14; //@line 26558
  $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 26559
  HEAP32[$84 >> 2] = $16; //@line 26560
  $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 26561
  HEAP32[$85 >> 2] = $18; //@line 26562
  $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 26563
  HEAP32[$86 >> 2] = $20; //@line 26564
  $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 26565
  HEAP32[$87 >> 2] = $22; //@line 26566
  $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 26567
  HEAP32[$88 >> 2] = $24; //@line 26568
  $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 26569
  HEAP32[$89 >> 2] = $26; //@line 26570
  $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 26571
  HEAP32[$90 >> 2] = $28; //@line 26572
  sp = STACKTOP; //@line 26573
  return;
 }
 ___async_unwind = 0; //@line 26576
 HEAP32[$ReallocAsyncCtx2 >> 2] = 616; //@line 26577
 $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 26578
 HEAP32[$77 >> 2] = $2; //@line 26579
 $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 26580
 HEAP8[$78 >> 0] = $39; //@line 26581
 $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 26582
 HEAP8[$79 >> 0] = $30; //@line 26583
 $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 26584
 HEAP32[$80 >> 2] = $8; //@line 26585
 $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 26586
 HEAP32[$81 >> 2] = $10; //@line 26587
 $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 26588
 HEAP32[$82 >> 2] = $12; //@line 26589
 $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 26590
 HEAP32[$83 >> 2] = $14; //@line 26591
 $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 26592
 HEAP32[$84 >> 2] = $16; //@line 26593
 $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 26594
 HEAP32[$85 >> 2] = $18; //@line 26595
 $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 26596
 HEAP32[$86 >> 2] = $20; //@line 26597
 $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 26598
 HEAP32[$87 >> 2] = $22; //@line 26599
 $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 26600
 HEAP32[$88 >> 2] = $24; //@line 26601
 $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 26602
 HEAP32[$89 >> 2] = $26; //@line 26603
 $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 26604
 HEAP32[$90 >> 2] = $28; //@line 26605
 sp = STACKTOP; //@line 26606
 return;
}
function __ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $48 = 0, $54 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26161
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26163
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 26169
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 26171
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 26173
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 26175
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 26177
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 26179
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 26181
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 26183
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 26185
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 26187
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 26189
 $34 = HEAP8[$2 >> 0] | 0; //@line 26190
 $39 = ($34 & 255) + (HEAPU8[$0 + 8 >> 0] | 0) & 255; //@line 26194
 $30 = (HEAP8[$0 + 9 >> 0] | 0) + 1 << 24 >> 24; //@line 26195
 if (($30 & 255) >= (HEAPU8[$8 >> 0] | 0)) {
  return;
 }
 if ((($34 & 255) + (HEAPU8[$10 >> 0] | 0) | 0) >>> 0 > ($30 & 255) >>> 0) {
  $37 = HEAP32[$14 >> 2] | 0; //@line 26208
  $38 = $39 & 255; //@line 26209
  $42 = HEAPU8[$37 + $38 >> 0] | 0; //@line 26212
  HEAP32[$16 >> 2] = $42; //@line 26213
  $48 = (HEAPU8[$37 + ($38 + 1) >> 0] | 0) << 8 | $42; //@line 26219
  HEAP32[$16 >> 2] = $48; //@line 26220
  $54 = (HEAPU8[$37 + ($38 + 2) >> 0] | 0) << 16 | $48; //@line 26226
  HEAP32[$16 >> 2] = $54 * 100; //@line 26228
  HEAP32[$18 >> 2] = 0; //@line 26229
  if ($54 | 0) {
   $59 = HEAP32[(HEAP32[$26 >> 2] | 0) + 60 >> 2] | 0; //@line 26234
   $ReallocAsyncCtx = _emscripten_realloc_async_context(56) | 0; //@line 26235
   FUNCTION_TABLE_iiii[$59 & 15]($24, $28, $30) | 0; //@line 26236
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 615; //@line 26239
    $60 = $ReallocAsyncCtx + 4 | 0; //@line 26240
    HEAP32[$60 >> 2] = $2; //@line 26241
    $61 = $ReallocAsyncCtx + 8 | 0; //@line 26242
    HEAP8[$61 >> 0] = $39; //@line 26243
    $62 = $ReallocAsyncCtx + 9 | 0; //@line 26244
    HEAP8[$62 >> 0] = $30; //@line 26245
    $63 = $ReallocAsyncCtx + 12 | 0; //@line 26246
    HEAP32[$63 >> 2] = $8; //@line 26247
    $64 = $ReallocAsyncCtx + 16 | 0; //@line 26248
    HEAP32[$64 >> 2] = $10; //@line 26249
    $65 = $ReallocAsyncCtx + 20 | 0; //@line 26250
    HEAP32[$65 >> 2] = $12; //@line 26251
    $66 = $ReallocAsyncCtx + 24 | 0; //@line 26252
    HEAP32[$66 >> 2] = $14; //@line 26253
    $67 = $ReallocAsyncCtx + 28 | 0; //@line 26254
    HEAP32[$67 >> 2] = $16; //@line 26255
    $68 = $ReallocAsyncCtx + 32 | 0; //@line 26256
    HEAP32[$68 >> 2] = $18; //@line 26257
    $69 = $ReallocAsyncCtx + 36 | 0; //@line 26258
    HEAP32[$69 >> 2] = $20; //@line 26259
    $70 = $ReallocAsyncCtx + 40 | 0; //@line 26260
    HEAP32[$70 >> 2] = $22; //@line 26261
    $71 = $ReallocAsyncCtx + 44 | 0; //@line 26262
    HEAP32[$71 >> 2] = $24; //@line 26263
    $72 = $ReallocAsyncCtx + 48 | 0; //@line 26264
    HEAP32[$72 >> 2] = $26; //@line 26265
    $73 = $ReallocAsyncCtx + 52 | 0; //@line 26266
    HEAP32[$73 >> 2] = $28; //@line 26267
    sp = STACKTOP; //@line 26268
    return;
   }
   ___async_unwind = 0; //@line 26271
   HEAP32[$ReallocAsyncCtx >> 2] = 615; //@line 26272
   $60 = $ReallocAsyncCtx + 4 | 0; //@line 26273
   HEAP32[$60 >> 2] = $2; //@line 26274
   $61 = $ReallocAsyncCtx + 8 | 0; //@line 26275
   HEAP8[$61 >> 0] = $39; //@line 26276
   $62 = $ReallocAsyncCtx + 9 | 0; //@line 26277
   HEAP8[$62 >> 0] = $30; //@line 26278
   $63 = $ReallocAsyncCtx + 12 | 0; //@line 26279
   HEAP32[$63 >> 2] = $8; //@line 26280
   $64 = $ReallocAsyncCtx + 16 | 0; //@line 26281
   HEAP32[$64 >> 2] = $10; //@line 26282
   $65 = $ReallocAsyncCtx + 20 | 0; //@line 26283
   HEAP32[$65 >> 2] = $12; //@line 26284
   $66 = $ReallocAsyncCtx + 24 | 0; //@line 26285
   HEAP32[$66 >> 2] = $14; //@line 26286
   $67 = $ReallocAsyncCtx + 28 | 0; //@line 26287
   HEAP32[$67 >> 2] = $16; //@line 26288
   $68 = $ReallocAsyncCtx + 32 | 0; //@line 26289
   HEAP32[$68 >> 2] = $18; //@line 26290
   $69 = $ReallocAsyncCtx + 36 | 0; //@line 26291
   HEAP32[$69 >> 2] = $20; //@line 26292
   $70 = $ReallocAsyncCtx + 40 | 0; //@line 26293
   HEAP32[$70 >> 2] = $22; //@line 26294
   $71 = $ReallocAsyncCtx + 44 | 0; //@line 26295
   HEAP32[$71 >> 2] = $24; //@line 26296
   $72 = $ReallocAsyncCtx + 48 | 0; //@line 26297
   HEAP32[$72 >> 2] = $26; //@line 26298
   $73 = $ReallocAsyncCtx + 52 | 0; //@line 26299
   HEAP32[$73 >> 2] = $28; //@line 26300
   sp = STACKTOP; //@line 26301
   return;
  }
 } else {
  HEAP32[$16 >> 2] = 0; //@line 26305
  HEAP8[$20 >> 0] = 0; //@line 26306
  HEAP32[$18 >> 2] = 0; //@line 26307
 }
 $76 = HEAP32[(HEAP32[$22 >> 2] | 0) + 64 >> 2] | 0; //@line 26311
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 26312
 FUNCTION_TABLE_iii[$76 & 31]($24, $30) | 0; //@line 26313
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 616; //@line 26316
  $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 26317
  HEAP32[$77 >> 2] = $2; //@line 26318
  $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 26319
  HEAP8[$78 >> 0] = $39; //@line 26320
  $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 26321
  HEAP8[$79 >> 0] = $30; //@line 26322
  $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 26323
  HEAP32[$80 >> 2] = $8; //@line 26324
  $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 26325
  HEAP32[$81 >> 2] = $10; //@line 26326
  $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 26327
  HEAP32[$82 >> 2] = $12; //@line 26328
  $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 26329
  HEAP32[$83 >> 2] = $14; //@line 26330
  $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 26331
  HEAP32[$84 >> 2] = $16; //@line 26332
  $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 26333
  HEAP32[$85 >> 2] = $18; //@line 26334
  $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 26335
  HEAP32[$86 >> 2] = $20; //@line 26336
  $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 26337
  HEAP32[$87 >> 2] = $22; //@line 26338
  $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 26339
  HEAP32[$88 >> 2] = $24; //@line 26340
  $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 26341
  HEAP32[$89 >> 2] = $26; //@line 26342
  $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 26343
  HEAP32[$90 >> 2] = $28; //@line 26344
  sp = STACKTOP; //@line 26345
  return;
 }
 ___async_unwind = 0; //@line 26348
 HEAP32[$ReallocAsyncCtx2 >> 2] = 616; //@line 26349
 $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 26350
 HEAP32[$77 >> 2] = $2; //@line 26351
 $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 26352
 HEAP8[$78 >> 0] = $39; //@line 26353
 $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 26354
 HEAP8[$79 >> 0] = $30; //@line 26355
 $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 26356
 HEAP32[$80 >> 2] = $8; //@line 26357
 $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 26358
 HEAP32[$81 >> 2] = $10; //@line 26359
 $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 26360
 HEAP32[$82 >> 2] = $12; //@line 26361
 $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 26362
 HEAP32[$83 >> 2] = $14; //@line 26363
 $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 26364
 HEAP32[$84 >> 2] = $16; //@line 26365
 $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 26366
 HEAP32[$85 >> 2] = $18; //@line 26367
 $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 26368
 HEAP32[$86 >> 2] = $20; //@line 26369
 $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 26370
 HEAP32[$87 >> 2] = $22; //@line 26371
 $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 26372
 HEAP32[$88 >> 2] = $24; //@line 26373
 $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 26374
 HEAP32[$89 >> 2] = $26; //@line 26375
 $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 26376
 HEAP32[$90 >> 2] = $28; //@line 26377
 sp = STACKTOP; //@line 26378
 return;
}
function _mbedtls_gcm_setkey__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $121 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $139 = 0, $144 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $160 = 0, $162 = 0, $167 = 0, $171 = 0, $172 = 0, $174 = 0, $178 = 0, $179 = 0, $181 = 0, $185 = 0, $186 = 0, $188 = 0, $192 = 0, $193 = 0, $195 = 0, $199 = 0, $200 = 0, $202 = 0, $206 = 0, $207 = 0, $209 = 0, $213 = 0, $214 = 0, $216 = 0, $220 = 0, $221 = 0, $223 = 0, $230 = 0, $237 = 0, $244 = 0, $251 = 0, $258 = 0, $265 = 0, $27 = 0, $272 = 0, $279 = 0, $286 = 0, $293 = 0, $300 = 0, $307 = 0, $314 = 0, $321 = 0, $4 = 0, $45 = 0, $6 = 0, $63 = 0, $81 = 0, $83 = 0, $88 = 0, $93 = 0, $98 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23722
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23724
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23728
 if (!$AsyncRetVal) {
  $27 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 23747
  $45 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 23765
  $63 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 23783
  $81 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 23801
  $83 = $6 + 136 | 0; //@line 23803
  HEAP32[$83 >> 2] = $81; //@line 23805
  HEAP32[$83 + 4 >> 2] = $63; //@line 23808
  $88 = $6 + 264 | 0; //@line 23810
  HEAP32[$88 >> 2] = $45; //@line 23812
  HEAP32[$88 + 4 >> 2] = $27; //@line 23815
  $93 = $6 + 200 | 0; //@line 23817
  HEAP32[$93 >> 2] = 0; //@line 23819
  HEAP32[$93 + 4 >> 2] = 0; //@line 23822
  $98 = $6 + 72 | 0; //@line 23824
  HEAP32[$98 >> 2] = 0; //@line 23826
  HEAP32[$98 + 4 >> 2] = 0; //@line 23829
  $103 = _i64Subtract(0, 0, $81 & 1 | 0, 0) | 0; //@line 23831
  $105 = _bitshift64Shl($45 | 0, 0, 63) | 0; //@line 23833
  $106 = tempRet0; //@line 23834
  $107 = _bitshift64Lshr($81 | 0, $63 | 0, 1) | 0; //@line 23835
  $109 = $107 | $105; //@line 23837
  $110 = tempRet0 | $106; //@line 23838
  $111 = _bitshift64Lshr($45 | 0, $27 | 0, 1) | 0; //@line 23839
  $112 = tempRet0; //@line 23840
  $114 = $103 & -520093696 ^ $112; //@line 23842
  $116 = $6 + 104 | 0; //@line 23844
  HEAP32[$116 >> 2] = $109; //@line 23846
  HEAP32[$116 + 4 >> 2] = $110; //@line 23849
  $121 = $6 + 232 | 0; //@line 23851
  HEAP32[$121 >> 2] = $111; //@line 23853
  HEAP32[$121 + 4 >> 2] = $114; //@line 23856
  $126 = _i64Subtract(0, 0, $107 & 1 | 0, 0) | 0; //@line 23858
  $128 = _bitshift64Shl($111 | 0, $112 | 0, 63) | 0; //@line 23860
  $129 = tempRet0; //@line 23861
  $130 = _bitshift64Lshr($109 | 0, $110 | 0, 1) | 0; //@line 23862
  $132 = $130 | $128; //@line 23864
  $133 = tempRet0 | $129; //@line 23865
  $134 = _bitshift64Lshr($111 | 0, $114 | 0, 1) | 0; //@line 23866
  $135 = tempRet0; //@line 23867
  $137 = $126 & -520093696 ^ $135; //@line 23869
  $139 = $6 + 88 | 0; //@line 23871
  HEAP32[$139 >> 2] = $132; //@line 23873
  HEAP32[$139 + 4 >> 2] = $133; //@line 23876
  $144 = $6 + 216 | 0; //@line 23878
  HEAP32[$144 >> 2] = $134; //@line 23880
  HEAP32[$144 + 4 >> 2] = $137; //@line 23883
  $149 = _i64Subtract(0, 0, $130 & 1 | 0, 0) | 0; //@line 23885
  $151 = _bitshift64Shl($134 | 0, $135 | 0, 63) | 0; //@line 23887
  $152 = tempRet0; //@line 23888
  $153 = _bitshift64Lshr($132 | 0, $133 | 0, 1) | 0; //@line 23889
  $155 = $151 | $153; //@line 23891
  $156 = $152 | tempRet0; //@line 23892
  $157 = _bitshift64Lshr($134 | 0, $137 | 0, 1) | 0; //@line 23893
  $160 = $149 & -520093696 ^ tempRet0; //@line 23896
  $162 = $6 + 80 | 0; //@line 23898
  HEAP32[$162 >> 2] = $155; //@line 23900
  HEAP32[$162 + 4 >> 2] = $156; //@line 23903
  $167 = $6 + 208 | 0; //@line 23905
  HEAP32[$167 >> 2] = $157; //@line 23907
  HEAP32[$167 + 4 >> 2] = $160; //@line 23910
  $171 = $157 ^ $134; //@line 23911
  $172 = $160 ^ $137; //@line 23912
  $174 = $6 + 224 | 0; //@line 23914
  HEAP32[$174 >> 2] = $171; //@line 23916
  HEAP32[$174 + 4 >> 2] = $172; //@line 23919
  $178 = $155 ^ $132; //@line 23920
  $179 = $156 ^ $133; //@line 23921
  $181 = $6 + 96 | 0; //@line 23923
  HEAP32[$181 >> 2] = $178; //@line 23925
  HEAP32[$181 + 4 >> 2] = $179; //@line 23928
  $185 = $157 ^ $111; //@line 23929
  $186 = $160 ^ $114; //@line 23930
  $188 = $6 + 240 | 0; //@line 23932
  HEAP32[$188 >> 2] = $185; //@line 23934
  HEAP32[$188 + 4 >> 2] = $186; //@line 23937
  $192 = $155 ^ $109; //@line 23938
  $193 = $156 ^ $110; //@line 23939
  $195 = $6 + 112 | 0; //@line 23941
  HEAP32[$195 >> 2] = $192; //@line 23943
  HEAP32[$195 + 4 >> 2] = $193; //@line 23946
  $199 = $134 ^ $111; //@line 23947
  $200 = $137 ^ $114; //@line 23948
  $202 = $6 + 248 | 0; //@line 23950
  HEAP32[$202 >> 2] = $199; //@line 23952
  HEAP32[$202 + 4 >> 2] = $200; //@line 23955
  $206 = $132 ^ $109; //@line 23956
  $207 = $133 ^ $110; //@line 23957
  $209 = $6 + 120 | 0; //@line 23959
  HEAP32[$209 >> 2] = $206; //@line 23961
  HEAP32[$209 + 4 >> 2] = $207; //@line 23964
  $213 = $171 ^ $111; //@line 23965
  $214 = $172 ^ $114; //@line 23966
  $216 = $6 + 256 | 0; //@line 23968
  HEAP32[$216 >> 2] = $213; //@line 23970
  HEAP32[$216 + 4 >> 2] = $214; //@line 23973
  $220 = $178 ^ $109; //@line 23974
  $221 = $179 ^ $110; //@line 23975
  $223 = $6 + 128 | 0; //@line 23977
  HEAP32[$223 >> 2] = $220; //@line 23979
  HEAP32[$223 + 4 >> 2] = $221; //@line 23982
  $230 = $6 + 272 | 0; //@line 23986
  HEAP32[$230 >> 2] = $157 ^ $45; //@line 23988
  HEAP32[$230 + 4 >> 2] = $160 ^ $27; //@line 23991
  $237 = $6 + 144 | 0; //@line 23995
  HEAP32[$237 >> 2] = $155 ^ $81; //@line 23997
  HEAP32[$237 + 4 >> 2] = $156 ^ $63; //@line 24000
  $244 = $6 + 280 | 0; //@line 24004
  HEAP32[$244 >> 2] = $134 ^ $45; //@line 24006
  HEAP32[$244 + 4 >> 2] = $137 ^ $27; //@line 24009
  $251 = $6 + 152 | 0; //@line 24013
  HEAP32[$251 >> 2] = $132 ^ $81; //@line 24015
  HEAP32[$251 + 4 >> 2] = $133 ^ $63; //@line 24018
  $258 = $6 + 288 | 0; //@line 24022
  HEAP32[$258 >> 2] = $171 ^ $45; //@line 24024
  HEAP32[$258 + 4 >> 2] = $172 ^ $27; //@line 24027
  $265 = $6 + 160 | 0; //@line 24031
  HEAP32[$265 >> 2] = $178 ^ $81; //@line 24033
  HEAP32[$265 + 4 >> 2] = $179 ^ $63; //@line 24036
  $272 = $6 + 296 | 0; //@line 24040
  HEAP32[$272 >> 2] = $111 ^ $45; //@line 24042
  HEAP32[$272 + 4 >> 2] = $114 ^ $27; //@line 24045
  $279 = $6 + 168 | 0; //@line 24049
  HEAP32[$279 >> 2] = $109 ^ $81; //@line 24051
  HEAP32[$279 + 4 >> 2] = $110 ^ $63; //@line 24054
  $286 = $6 + 304 | 0; //@line 24058
  HEAP32[$286 >> 2] = $185 ^ $45; //@line 24060
  HEAP32[$286 + 4 >> 2] = $186 ^ $27; //@line 24063
  $293 = $6 + 176 | 0; //@line 24067
  HEAP32[$293 >> 2] = $192 ^ $81; //@line 24069
  HEAP32[$293 + 4 >> 2] = $193 ^ $63; //@line 24072
  $300 = $6 + 312 | 0; //@line 24076
  HEAP32[$300 >> 2] = $199 ^ $45; //@line 24078
  HEAP32[$300 + 4 >> 2] = $200 ^ $27; //@line 24081
  $307 = $6 + 184 | 0; //@line 24085
  HEAP32[$307 >> 2] = $206 ^ $81; //@line 24087
  HEAP32[$307 + 4 >> 2] = $207 ^ $63; //@line 24090
  $314 = $6 + 320 | 0; //@line 24094
  HEAP32[$314 >> 2] = $213 ^ $45; //@line 24096
  HEAP32[$314 + 4 >> 2] = $214 ^ $27; //@line 24099
  $321 = $6 + 192 | 0; //@line 24103
  HEAP32[$321 >> 2] = $220 ^ $81; //@line 24105
  HEAP32[$321 + 4 >> 2] = $221 ^ $63; //@line 24108
  $$0$i = 0; //@line 24109
 } else {
  $$0$i = $AsyncRetVal; //@line 24111
 }
 HEAP32[___async_retval >> 2] = $$0$i; //@line 24114
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_447($0) {
 $0 = $0 | 0;
 var $$pre$i$i21 = 0, $10 = 0, $12 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 32283
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32285
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32287
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32289
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32291
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32293
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32295
 $$pre$i$i21 = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 32300
 HEAP32[HEAP32[$0 + 32 >> 2] >> 2] = $$pre$i$i21; //@line 32302
 if ($$pre$i$i21 | 0) {
  $20 = HEAP32[$$pre$i$i21 + 8 >> 2] | 0; //@line 32306
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 32307
  FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 32308
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 572; //@line 32311
   $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 32312
   HEAP32[$21 >> 2] = $2; //@line 32313
   $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 32314
   HEAP32[$22 >> 2] = $4; //@line 32315
   $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 32316
   HEAP32[$23 >> 2] = $6; //@line 32317
   $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 32318
   HEAP32[$24 >> 2] = $8; //@line 32319
   $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 32320
   HEAP32[$25 >> 2] = $10; //@line 32321
   $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 32322
   HEAP32[$26 >> 2] = $12; //@line 32323
   sp = STACKTOP; //@line 32324
   return;
  }
  ___async_unwind = 0; //@line 32327
  HEAP32[$ReallocAsyncCtx6 >> 2] = 572; //@line 32328
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 32329
  HEAP32[$21 >> 2] = $2; //@line 32330
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 32331
  HEAP32[$22 >> 2] = $4; //@line 32332
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 32333
  HEAP32[$23 >> 2] = $6; //@line 32334
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 32335
  HEAP32[$24 >> 2] = $8; //@line 32336
  $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 32337
  HEAP32[$25 >> 2] = $10; //@line 32338
  $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 32339
  HEAP32[$26 >> 2] = $12; //@line 32340
  sp = STACKTOP; //@line 32341
  return;
 }
 $27 = $10 + 12 | 0; //@line 32344
 HEAP32[$10 >> 2] = 573; //@line 32345
 HEAP32[$10 + 4 >> 2] = 0; //@line 32347
 HEAP32[$10 + 8 >> 2] = $4; //@line 32349
 HEAP32[$27 >> 2] = 848; //@line 32350
 $28 = $4 + 1276 | 0; //@line 32351
 if (($28 | 0) == ($10 | 0)) {
  $53 = HEAP32[214] | 0; //@line 32355
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 32356
  FUNCTION_TABLE_vi[$53 & 1023]($10); //@line 32357
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 576; //@line 32360
   $54 = $ReallocAsyncCtx9 + 4 | 0; //@line 32361
   HEAP32[$54 >> 2] = $2; //@line 32362
   $55 = $ReallocAsyncCtx9 + 8 | 0; //@line 32363
   HEAP32[$55 >> 2] = $4; //@line 32364
   $56 = $ReallocAsyncCtx9 + 12 | 0; //@line 32365
   HEAP32[$56 >> 2] = $10; //@line 32366
   $57 = $ReallocAsyncCtx9 + 16 | 0; //@line 32367
   HEAP32[$57 >> 2] = $6; //@line 32368
   $58 = $ReallocAsyncCtx9 + 20 | 0; //@line 32369
   HEAP32[$58 >> 2] = $12; //@line 32370
   sp = STACKTOP; //@line 32371
   return;
  }
  ___async_unwind = 0; //@line 32374
  HEAP32[$ReallocAsyncCtx9 >> 2] = 576; //@line 32375
  $54 = $ReallocAsyncCtx9 + 4 | 0; //@line 32376
  HEAP32[$54 >> 2] = $2; //@line 32377
  $55 = $ReallocAsyncCtx9 + 8 | 0; //@line 32378
  HEAP32[$55 >> 2] = $4; //@line 32379
  $56 = $ReallocAsyncCtx9 + 12 | 0; //@line 32380
  HEAP32[$56 >> 2] = $10; //@line 32381
  $57 = $ReallocAsyncCtx9 + 16 | 0; //@line 32382
  HEAP32[$57 >> 2] = $6; //@line 32383
  $58 = $ReallocAsyncCtx9 + 20 | 0; //@line 32384
  HEAP32[$58 >> 2] = $12; //@line 32385
  sp = STACKTOP; //@line 32386
  return;
 }
 $30 = $4 + 1288 | 0; //@line 32389
 $31 = HEAP32[$30 >> 2] | 0; //@line 32390
 if (!$31) {
  $44 = HEAP32[213] | 0; //@line 32394
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 32395
  FUNCTION_TABLE_vii[$44 & 31]($28, $10); //@line 32396
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 575; //@line 32399
   $45 = $ReallocAsyncCtx8 + 4 | 0; //@line 32400
   HEAP32[$45 >> 2] = $2; //@line 32401
   $46 = $ReallocAsyncCtx8 + 8 | 0; //@line 32402
   HEAP32[$46 >> 2] = $4; //@line 32403
   $47 = $ReallocAsyncCtx8 + 12 | 0; //@line 32404
   HEAP32[$47 >> 2] = $10; //@line 32405
   $48 = $ReallocAsyncCtx8 + 16 | 0; //@line 32406
   HEAP32[$48 >> 2] = $6; //@line 32407
   $49 = $ReallocAsyncCtx8 + 20 | 0; //@line 32408
   HEAP32[$49 >> 2] = $27; //@line 32409
   $50 = $ReallocAsyncCtx8 + 24 | 0; //@line 32410
   HEAP32[$50 >> 2] = $30; //@line 32411
   $51 = $ReallocAsyncCtx8 + 28 | 0; //@line 32412
   HEAP32[$51 >> 2] = $12; //@line 32413
   sp = STACKTOP; //@line 32414
   return;
  }
  ___async_unwind = 0; //@line 32417
  HEAP32[$ReallocAsyncCtx8 >> 2] = 575; //@line 32418
  $45 = $ReallocAsyncCtx8 + 4 | 0; //@line 32419
  HEAP32[$45 >> 2] = $2; //@line 32420
  $46 = $ReallocAsyncCtx8 + 8 | 0; //@line 32421
  HEAP32[$46 >> 2] = $4; //@line 32422
  $47 = $ReallocAsyncCtx8 + 12 | 0; //@line 32423
  HEAP32[$47 >> 2] = $10; //@line 32424
  $48 = $ReallocAsyncCtx8 + 16 | 0; //@line 32425
  HEAP32[$48 >> 2] = $6; //@line 32426
  $49 = $ReallocAsyncCtx8 + 20 | 0; //@line 32427
  HEAP32[$49 >> 2] = $27; //@line 32428
  $50 = $ReallocAsyncCtx8 + 24 | 0; //@line 32429
  HEAP32[$50 >> 2] = $30; //@line 32430
  $51 = $ReallocAsyncCtx8 + 28 | 0; //@line 32431
  HEAP32[$51 >> 2] = $12; //@line 32432
  sp = STACKTOP; //@line 32433
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 32437
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 32438
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 32439
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 574; //@line 32442
   $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 32443
   HEAP32[$35 >> 2] = $2; //@line 32444
   $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 32445
   HEAP32[$36 >> 2] = $4; //@line 32446
   $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 32447
   HEAP32[$37 >> 2] = $10; //@line 32448
   $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 32449
   HEAP32[$38 >> 2] = $6; //@line 32450
   $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 32451
   HEAP32[$39 >> 2] = $28; //@line 32452
   $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 32453
   HEAP32[$40 >> 2] = $30; //@line 32454
   $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 32455
   HEAP32[$41 >> 2] = $27; //@line 32456
   $42 = $ReallocAsyncCtx7 + 32 | 0; //@line 32457
   HEAP32[$42 >> 2] = $12; //@line 32458
   sp = STACKTOP; //@line 32459
   return;
  }
  ___async_unwind = 0; //@line 32462
  HEAP32[$ReallocAsyncCtx7 >> 2] = 574; //@line 32463
  $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 32464
  HEAP32[$35 >> 2] = $2; //@line 32465
  $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 32466
  HEAP32[$36 >> 2] = $4; //@line 32467
  $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 32468
  HEAP32[$37 >> 2] = $10; //@line 32469
  $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 32470
  HEAP32[$38 >> 2] = $6; //@line 32471
  $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 32472
  HEAP32[$39 >> 2] = $28; //@line 32473
  $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 32474
  HEAP32[$40 >> 2] = $30; //@line 32475
  $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 32476
  HEAP32[$41 >> 2] = $27; //@line 32477
  $42 = $ReallocAsyncCtx7 + 32 | 0; //@line 32478
  HEAP32[$42 >> 2] = $12; //@line 32479
  sp = STACKTOP; //@line 32480
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27508
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27510
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27514
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27516
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27518
 $$pre$i = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 27519
 $11 = $2 + 12 | 0; //@line 27520
 HEAP32[$11 >> 2] = $$pre$i; //@line 27521
 if ($$pre$i | 0) {
  $14 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 27526
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 27527
  FUNCTION_TABLE_vii[$14 & 31]($6, $2); //@line 27528
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 272; //@line 27531
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 27532
   HEAP32[$15 >> 2] = $2; //@line 27533
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 27534
   HEAP32[$16 >> 2] = $6; //@line 27535
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 27536
   HEAP32[$17 >> 2] = $11; //@line 27537
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 27538
   HEAP32[$18 >> 2] = $11; //@line 27539
   $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 27540
   HEAP32[$19 >> 2] = $8; //@line 27541
   $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 27542
   HEAP32[$20 >> 2] = $10; //@line 27543
   sp = STACKTOP; //@line 27544
   return;
  }
  ___async_unwind = 0; //@line 27547
  HEAP32[$ReallocAsyncCtx2 >> 2] = 272; //@line 27548
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 27549
  HEAP32[$15 >> 2] = $2; //@line 27550
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 27551
  HEAP32[$16 >> 2] = $6; //@line 27552
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 27553
  HEAP32[$17 >> 2] = $11; //@line 27554
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 27555
  HEAP32[$18 >> 2] = $11; //@line 27556
  $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 27557
  HEAP32[$19 >> 2] = $8; //@line 27558
  $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 27559
  HEAP32[$20 >> 2] = $10; //@line 27560
  sp = STACKTOP; //@line 27561
  return;
 }
 $21 = $6 + 12 | 0; //@line 27564
 HEAP32[$21 >> 2] = 0; //@line 27565
 $22 = $6 + 16 | 0; //@line 27566
 HEAP32[$22 >> 2] = $8; //@line 27567
 $23 = _equeue_alloc($10, 20) | 0; //@line 27568
 if ($23 | 0) {
  $25 = HEAP32[$21 >> 2] | 0; //@line 27571
  if (!$25) {
   HEAP32[$23 + 12 >> 2] = 0; //@line 27575
   HEAP32[$23 + 16 >> 2] = HEAP32[$22 >> 2]; //@line 27578
   _equeue_event_dtor($23, 274); //@line 27579
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 27580
   $40 = _equeue_post($10, 275, $23) | 0; //@line 27581
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 276; //@line 27584
    $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 27585
    HEAP32[$41 >> 2] = $21; //@line 27586
    $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 27587
    HEAP32[$42 >> 2] = $11; //@line 27588
    $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 27589
    HEAP32[$43 >> 2] = $6; //@line 27590
    $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 27591
    HEAP32[$44 >> 2] = $2; //@line 27592
    sp = STACKTOP; //@line 27593
    return;
   }
   HEAP32[___async_retval >> 2] = $40; //@line 27597
   ___async_unwind = 0; //@line 27598
   HEAP32[$ReallocAsyncCtx6 >> 2] = 276; //@line 27599
   $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 27600
   HEAP32[$41 >> 2] = $21; //@line 27601
   $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 27602
   HEAP32[$42 >> 2] = $11; //@line 27603
   $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 27604
   HEAP32[$43 >> 2] = $6; //@line 27605
   $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 27606
   HEAP32[$44 >> 2] = $2; //@line 27607
   sp = STACKTOP; //@line 27608
   return;
  } else {
   $28 = HEAP32[$25 + 4 >> 2] | 0; //@line 27612
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 27613
   FUNCTION_TABLE_vii[$28 & 31]($23, $6); //@line 27614
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 273; //@line 27617
    $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 27618
    HEAP32[$29 >> 2] = $21; //@line 27619
    $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 27620
    HEAP32[$30 >> 2] = $23; //@line 27621
    $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 27622
    HEAP32[$31 >> 2] = $22; //@line 27623
    $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 27624
    HEAP32[$32 >> 2] = $10; //@line 27625
    $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 27626
    HEAP32[$33 >> 2] = $21; //@line 27627
    $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 27628
    HEAP32[$34 >> 2] = $11; //@line 27629
    $35 = $ReallocAsyncCtx3 + 28 | 0; //@line 27630
    HEAP32[$35 >> 2] = $6; //@line 27631
    $36 = $ReallocAsyncCtx3 + 32 | 0; //@line 27632
    HEAP32[$36 >> 2] = $2; //@line 27633
    sp = STACKTOP; //@line 27634
    return;
   }
   ___async_unwind = 0; //@line 27637
   HEAP32[$ReallocAsyncCtx3 >> 2] = 273; //@line 27638
   $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 27639
   HEAP32[$29 >> 2] = $21; //@line 27640
   $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 27641
   HEAP32[$30 >> 2] = $23; //@line 27642
   $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 27643
   HEAP32[$31 >> 2] = $22; //@line 27644
   $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 27645
   HEAP32[$32 >> 2] = $10; //@line 27646
   $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 27647
   HEAP32[$33 >> 2] = $21; //@line 27648
   $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 27649
   HEAP32[$34 >> 2] = $11; //@line 27650
   $35 = $ReallocAsyncCtx3 + 28 | 0; //@line 27651
   HEAP32[$35 >> 2] = $6; //@line 27652
   $36 = $ReallocAsyncCtx3 + 32 | 0; //@line 27653
   HEAP32[$36 >> 2] = $2; //@line 27654
   sp = STACKTOP; //@line 27655
   return;
  }
 }
 $46 = HEAP32[$21 >> 2] | 0; //@line 27659
 if ($46 | 0) {
  $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 27663
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 27664
  FUNCTION_TABLE_vi[$49 & 1023]($6); //@line 27665
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 277; //@line 27668
   $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 27669
   HEAP32[$50 >> 2] = $11; //@line 27670
   $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 27671
   HEAP32[$51 >> 2] = 0; //@line 27672
   $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 27673
   HEAP32[$52 >> 2] = $2; //@line 27674
   sp = STACKTOP; //@line 27675
   return;
  }
  ___async_unwind = 0; //@line 27678
  HEAP32[$ReallocAsyncCtx4 >> 2] = 277; //@line 27679
  $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 27680
  HEAP32[$50 >> 2] = $11; //@line 27681
  $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 27682
  HEAP32[$51 >> 2] = 0; //@line 27683
  $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 27684
  HEAP32[$52 >> 2] = $2; //@line 27685
  sp = STACKTOP; //@line 27686
  return;
 }
 $53 = HEAP32[$11 >> 2] | 0; //@line 27689
 if (!$53) {
  HEAP32[___async_retval >> 2] = 0; //@line 27693
  return;
 }
 $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 27697
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 27698
 FUNCTION_TABLE_vi[$56 & 1023]($2); //@line 27699
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 27702
  $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 27703
  HEAP32[$57 >> 2] = 0; //@line 27704
  sp = STACKTOP; //@line 27705
  return;
 }
 ___async_unwind = 0; //@line 27708
 HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 27709
 $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 27710
 HEAP32[$57 >> 2] = 0; //@line 27711
 sp = STACKTOP; //@line 27712
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_216($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 36509
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36511
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36513
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36515
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36517
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 36521
 $14 = $0 + 32 | 0; //@line 36523
 $16 = HEAP32[$14 >> 2] | 0; //@line 36525
 $19 = HEAP32[$14 + 4 >> 2] | 0; //@line 36528
 $21 = HEAP32[$0 + 40 >> 2] | 0; //@line 36530
 $23 = HEAP32[$0 + 44 >> 2] | 0; //@line 36532
 $25 = HEAP32[$0 + 48 >> 2] | 0; //@line 36534
 $27 = HEAP32[$0 + 52 >> 2] | 0; //@line 36536
 $29 = HEAP32[$0 + 56 >> 2] | 0; //@line 36538
 $31 = HEAP32[$0 + 60 >> 2] | 0; //@line 36540
 $33 = HEAP32[$0 + 64 >> 2] | 0; //@line 36542
 $35 = HEAP32[$0 + 68 >> 2] | 0; //@line 36544
 $37 = HEAP32[$0 + 72 >> 2] | 0; //@line 36546
 $39 = HEAP32[$0 + 76 >> 2] | 0; //@line 36548
 $41 = HEAP32[$0 + 80 >> 2] | 0; //@line 36550
 $43 = HEAP32[$0 + 84 >> 2] | 0; //@line 36552
 $45 = HEAP32[$0 + 88 >> 2] | 0; //@line 36554
 HEAP32[HEAP32[$0 + 20 >> 2] >> 2] = HEAP32[$21 >> 2]; //@line 36556
 __ZN4mbed6Ticker5setupEy($12, $16, $19); //@line 36557
 $46 = HEAP32[$21 >> 2] | 0; //@line 36558
 if ($46 | 0) {
  $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 36562
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 36563
  FUNCTION_TABLE_vi[$49 & 1023]($23); //@line 36564
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 76; //@line 36567
   $50 = $ReallocAsyncCtx6 + 4 | 0; //@line 36568
   HEAP32[$50 >> 2] = $2; //@line 36569
   $51 = $ReallocAsyncCtx6 + 8 | 0; //@line 36570
   HEAP32[$51 >> 2] = $4; //@line 36571
   $52 = $ReallocAsyncCtx6 + 12 | 0; //@line 36572
   HEAP32[$52 >> 2] = $6; //@line 36573
   $53 = $ReallocAsyncCtx6 + 16 | 0; //@line 36574
   HEAP32[$53 >> 2] = $8; //@line 36575
   $54 = $ReallocAsyncCtx6 + 20 | 0; //@line 36576
   HEAP32[$54 >> 2] = $25; //@line 36577
   $55 = $ReallocAsyncCtx6 + 24 | 0; //@line 36578
   HEAP32[$55 >> 2] = $27; //@line 36579
   $56 = $ReallocAsyncCtx6 + 28 | 0; //@line 36580
   HEAP32[$56 >> 2] = $29; //@line 36581
   $57 = $ReallocAsyncCtx6 + 32 | 0; //@line 36582
   HEAP32[$57 >> 2] = $31; //@line 36583
   $58 = $ReallocAsyncCtx6 + 36 | 0; //@line 36584
   HEAP32[$58 >> 2] = $33; //@line 36585
   $59 = $ReallocAsyncCtx6 + 40 | 0; //@line 36586
   HEAP32[$59 >> 2] = $35; //@line 36587
   $60 = $ReallocAsyncCtx6 + 44 | 0; //@line 36588
   HEAP32[$60 >> 2] = $37; //@line 36589
   $61 = $ReallocAsyncCtx6 + 48 | 0; //@line 36590
   HEAP32[$61 >> 2] = $39; //@line 36591
   $62 = $ReallocAsyncCtx6 + 52 | 0; //@line 36592
   HEAP32[$62 >> 2] = $41; //@line 36593
   $63 = $ReallocAsyncCtx6 + 56 | 0; //@line 36594
   HEAP32[$63 >> 2] = $43; //@line 36595
   $64 = $ReallocAsyncCtx6 + 60 | 0; //@line 36596
   HEAP32[$64 >> 2] = $45; //@line 36597
   sp = STACKTOP; //@line 36598
   return;
  }
  ___async_unwind = 0; //@line 36601
  HEAP32[$ReallocAsyncCtx6 >> 2] = 76; //@line 36602
  $50 = $ReallocAsyncCtx6 + 4 | 0; //@line 36603
  HEAP32[$50 >> 2] = $2; //@line 36604
  $51 = $ReallocAsyncCtx6 + 8 | 0; //@line 36605
  HEAP32[$51 >> 2] = $4; //@line 36606
  $52 = $ReallocAsyncCtx6 + 12 | 0; //@line 36607
  HEAP32[$52 >> 2] = $6; //@line 36608
  $53 = $ReallocAsyncCtx6 + 16 | 0; //@line 36609
  HEAP32[$53 >> 2] = $8; //@line 36610
  $54 = $ReallocAsyncCtx6 + 20 | 0; //@line 36611
  HEAP32[$54 >> 2] = $25; //@line 36612
  $55 = $ReallocAsyncCtx6 + 24 | 0; //@line 36613
  HEAP32[$55 >> 2] = $27; //@line 36614
  $56 = $ReallocAsyncCtx6 + 28 | 0; //@line 36615
  HEAP32[$56 >> 2] = $29; //@line 36616
  $57 = $ReallocAsyncCtx6 + 32 | 0; //@line 36617
  HEAP32[$57 >> 2] = $31; //@line 36618
  $58 = $ReallocAsyncCtx6 + 36 | 0; //@line 36619
  HEAP32[$58 >> 2] = $33; //@line 36620
  $59 = $ReallocAsyncCtx6 + 40 | 0; //@line 36621
  HEAP32[$59 >> 2] = $35; //@line 36622
  $60 = $ReallocAsyncCtx6 + 44 | 0; //@line 36623
  HEAP32[$60 >> 2] = $37; //@line 36624
  $61 = $ReallocAsyncCtx6 + 48 | 0; //@line 36625
  HEAP32[$61 >> 2] = $39; //@line 36626
  $62 = $ReallocAsyncCtx6 + 52 | 0; //@line 36627
  HEAP32[$62 >> 2] = $41; //@line 36628
  $63 = $ReallocAsyncCtx6 + 56 | 0; //@line 36629
  HEAP32[$63 >> 2] = $43; //@line 36630
  $64 = $ReallocAsyncCtx6 + 60 | 0; //@line 36631
  HEAP32[$64 >> 2] = $45; //@line 36632
  sp = STACKTOP; //@line 36633
  return;
 }
 $67 = (HEAP8[$29 + 770 >> 0] | 0) == 0; //@line 36638
 _printf(10904, $31) | 0; //@line 36639
 if ($67) {
  HEAP32[$25 >> 2] = 6; //@line 36641
  _printf(10970, $25) | 0; //@line 36642
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 36643
  _putchar(10) | 0; //@line 36644
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 80; //@line 36647
   $73 = $ReallocAsyncCtx8 + 4 | 0; //@line 36648
   HEAP32[$73 >> 2] = $29; //@line 36649
   $74 = $ReallocAsyncCtx8 + 8 | 0; //@line 36650
   HEAP32[$74 >> 2] = $39; //@line 36651
   $75 = $ReallocAsyncCtx8 + 12 | 0; //@line 36652
   HEAP32[$75 >> 2] = $41; //@line 36653
   $76 = $ReallocAsyncCtx8 + 16 | 0; //@line 36654
   HEAP32[$76 >> 2] = $43; //@line 36655
   $77 = $ReallocAsyncCtx8 + 20 | 0; //@line 36656
   HEAP32[$77 >> 2] = $45; //@line 36657
   sp = STACKTOP; //@line 36658
   return;
  }
  ___async_unwind = 0; //@line 36661
  HEAP32[$ReallocAsyncCtx8 >> 2] = 80; //@line 36662
  $73 = $ReallocAsyncCtx8 + 4 | 0; //@line 36663
  HEAP32[$73 >> 2] = $29; //@line 36664
  $74 = $ReallocAsyncCtx8 + 8 | 0; //@line 36665
  HEAP32[$74 >> 2] = $39; //@line 36666
  $75 = $ReallocAsyncCtx8 + 12 | 0; //@line 36667
  HEAP32[$75 >> 2] = $41; //@line 36668
  $76 = $ReallocAsyncCtx8 + 16 | 0; //@line 36669
  HEAP32[$76 >> 2] = $43; //@line 36670
  $77 = $ReallocAsyncCtx8 + 20 | 0; //@line 36671
  HEAP32[$77 >> 2] = $45; //@line 36672
  sp = STACKTOP; //@line 36673
  return;
 } else {
  HEAP32[$35 >> 2] = 5; //@line 36676
  _printf(10970, $35) | 0; //@line 36677
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 36678
  _putchar(10) | 0; //@line 36679
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 77; //@line 36682
   $68 = $ReallocAsyncCtx10 + 4 | 0; //@line 36683
   HEAP32[$68 >> 2] = $29; //@line 36684
   $69 = $ReallocAsyncCtx10 + 8 | 0; //@line 36685
   HEAP32[$69 >> 2] = $2; //@line 36686
   $70 = $ReallocAsyncCtx10 + 12 | 0; //@line 36687
   HEAP32[$70 >> 2] = $4; //@line 36688
   $71 = $ReallocAsyncCtx10 + 16 | 0; //@line 36689
   HEAP32[$71 >> 2] = $6; //@line 36690
   $72 = $ReallocAsyncCtx10 + 20 | 0; //@line 36691
   HEAP32[$72 >> 2] = $8; //@line 36692
   sp = STACKTOP; //@line 36693
   return;
  }
  ___async_unwind = 0; //@line 36696
  HEAP32[$ReallocAsyncCtx10 >> 2] = 77; //@line 36697
  $68 = $ReallocAsyncCtx10 + 4 | 0; //@line 36698
  HEAP32[$68 >> 2] = $29; //@line 36699
  $69 = $ReallocAsyncCtx10 + 8 | 0; //@line 36700
  HEAP32[$69 >> 2] = $2; //@line 36701
  $70 = $ReallocAsyncCtx10 + 12 | 0; //@line 36702
  HEAP32[$70 >> 2] = $4; //@line 36703
  $71 = $ReallocAsyncCtx10 + 16 | 0; //@line 36704
  HEAP32[$71 >> 2] = $6; //@line 36705
  $72 = $ReallocAsyncCtx10 + 20 | 0; //@line 36706
  HEAP32[$72 >> 2] = $8; //@line 36707
  sp = STACKTOP; //@line 36708
  return;
 }
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $103 = 0, $106 = 0, $107 = 0, $109 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $127 = 0, $130 = 0, $19 = 0, $20 = 0, $23 = 0, $29 = 0, $35 = 0, $41 = 0, $42 = 0, $43 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $67 = 0, $7 = 0, $85 = 0, $88 = 0, $90 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx6 = 0, $switch$selectcmp$i = 0, $switch$selectcmp4$i = 0, sp = 0;
 sp = STACKTOP; //@line 24352
 $6 = $1 + 1 | 0; //@line 24355
 $7 = HEAP8[$6 >> 0] | 0; //@line 24356
 $10 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + ($7 << 24 >> 24) >> 0] | 0; //@line 24359
 $12 = HEAP32[$0 + 112 >> 2] | 0; //@line 24361
 $19 = $1 + 2 | 0; //@line 24368
 $20 = HEAP8[$19 >> 0] | 0; //@line 24369
 $23 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 24372
 if ($20 << 24 >> 24 > $23 << 24 >> 24) {
  HEAP8[$19 >> 0] = $23; //@line 24375
  $35 = $23; //@line 24376
 } else {
  $35 = $20; //@line 24378
 }
 $29 = HEAP32[(HEAP32[$0 + 80 >> 2] | 0) + (($7 & 255) << 2) >> 2] | 0; //@line 24384
 $switch$selectcmp$i = ($29 | 0) == 25e4; //@line 24385
 $switch$selectcmp4$i = ($29 | 0) == 5e5; //@line 24386
 $41 = ~~+Math_floor(+(+HEAPF32[$1 + 4 >> 2] - +($35 << 24 >> 24 << 1 >>> 0) - +HEAPF32[$1 + 8 >> 2])); //@line 24397
 $42 = $0 + 4 | 0; //@line 24398
 $43 = HEAP32[$42 >> 2] | 0; //@line 24399
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 72 >> 2] | 0; //@line 24402
 $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 24403
 FUNCTION_TABLE_vi[$46 & 1023]($43); //@line 24404
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 626; //@line 24407
  HEAP32[$AsyncCtx + 4 >> 2] = $42; //@line 24409
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 24411
  HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 24413
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 24415
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 24417
  HEAP8[$AsyncCtx + 24 >> 0] = $switch$selectcmp$i & 1; //@line 24420
  HEAP8[$AsyncCtx + 25 >> 0] = $switch$selectcmp4$i & 1; //@line 24423
  HEAP8[$AsyncCtx + 26 >> 0] = $10; //@line 24425
  HEAP8[$AsyncCtx + 27 >> 0] = $41; //@line 24427
  HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 24429
  HEAP32[$AsyncCtx + 32 >> 2] = $3; //@line 24431
  HEAP32[$AsyncCtx + 36 >> 2] = $19; //@line 24433
  HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 24435
  sp = STACKTOP; //@line 24436
  return 0; //@line 24437
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 24439
 $60 = HEAP32[$42 >> 2] | 0; //@line 24440
 $63 = HEAP32[(HEAP32[$60 >> 2] | 0) + 32 >> 2] | 0; //@line 24443
 $67 = HEAP32[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 24447
 $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 24448
 FUNCTION_TABLE_vii[$63 & 31]($60, $67); //@line 24449
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 627; //@line 24452
  HEAP32[$AsyncCtx2 + 4 >> 2] = $6; //@line 24454
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 24456
  HEAP32[$AsyncCtx2 + 12 >> 2] = $42; //@line 24458
  HEAP8[$AsyncCtx2 + 16 >> 0] = $switch$selectcmp$i & 1; //@line 24461
  HEAP8[$AsyncCtx2 + 17 >> 0] = $switch$selectcmp4$i & 1; //@line 24464
  HEAP8[$AsyncCtx2 + 18 >> 0] = $10; //@line 24466
  HEAP8[$AsyncCtx2 + 19 >> 0] = $41; //@line 24468
  HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 24470
  HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 24472
  HEAP32[$AsyncCtx2 + 28 >> 2] = $19; //@line 24474
  HEAP32[$AsyncCtx2 + 32 >> 2] = $2; //@line 24476
  sp = STACKTOP; //@line 24477
  return 0; //@line 24478
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 24480
 $85 = HEAP32[$42 >> 2] | 0; //@line 24487
 $88 = HEAP32[(HEAP32[$85 >> 2] | 0) + 20 >> 2] | 0; //@line 24490
 $90 = $switch$selectcmp4$i ? 2 : $switch$selectcmp$i & 1; //@line 24492
 $91 = $10 << 24 >> 24; //@line 24493
 do {
  if ((HEAP8[$6 >> 0] | 0) == (HEAPU8[$0 + 27 >> 0] | 0)) {
   $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 24497
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 0, $41, 25e3, $90, $91 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 24498
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 628; //@line 24501
    HEAP32[$AsyncCtx6 + 4 >> 2] = $42; //@line 24503
    HEAP32[$AsyncCtx6 + 8 >> 2] = $1; //@line 24505
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 24507
    HEAP32[$AsyncCtx6 + 16 >> 2] = $19; //@line 24509
    HEAP32[$AsyncCtx6 + 20 >> 2] = $2; //@line 24511
    sp = STACKTOP; //@line 24512
    return 0; //@line 24513
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 24515
    $$0 = 0; //@line 24516
    break;
   }
  } else {
   $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 24520
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 1, $41, 0, $90, $91, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 24521
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 629; //@line 24524
    HEAP32[$AsyncCtx10 + 4 >> 2] = $42; //@line 24526
    HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 24528
    HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 24530
    HEAP32[$AsyncCtx10 + 16 >> 2] = $19; //@line 24532
    HEAP32[$AsyncCtx10 + 20 >> 2] = $2; //@line 24534
    sp = STACKTOP; //@line 24535
    return 0; //@line 24536
   } else {
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 24538
    $$0 = 1; //@line 24539
    break;
   }
  }
 } while (0);
 $103 = HEAP32[$42 >> 2] | 0; //@line 24544
 $106 = HEAP32[(HEAP32[$103 >> 2] | 0) + 44 >> 2] | 0; //@line 24547
 $107 = $1 + 12 | 0; //@line 24548
 $109 = HEAP16[$107 >> 1] & 255; //@line 24550
 $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 24551
 FUNCTION_TABLE_viii[$106 & 7]($103, $$0, $109); //@line 24552
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 630; //@line 24555
  HEAP32[$AsyncCtx14 + 4 >> 2] = $42; //@line 24557
  HEAP32[$AsyncCtx14 + 8 >> 2] = $107; //@line 24559
  HEAP32[$AsyncCtx14 + 12 >> 2] = $$0; //@line 24561
  HEAP32[$AsyncCtx14 + 16 >> 2] = $3; //@line 24563
  HEAP32[$AsyncCtx14 + 20 >> 2] = $19; //@line 24565
  HEAP32[$AsyncCtx14 + 24 >> 2] = $2; //@line 24567
  sp = STACKTOP; //@line 24568
  return 0; //@line 24569
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 24571
 $116 = HEAP32[$42 >> 2] | 0; //@line 24572
 $119 = HEAP32[(HEAP32[$116 >> 2] | 0) + 52 >> 2] | 0; //@line 24575
 $121 = HEAP16[$107 >> 1] & 255; //@line 24577
 $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 24578
 $122 = FUNCTION_TABLE_iiii[$119 & 15]($116, $$0, $121) | 0; //@line 24579
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 631; //@line 24582
  HEAP32[$AsyncCtx17 + 4 >> 2] = $3; //@line 24584
  HEAP32[$AsyncCtx17 + 8 >> 2] = $42; //@line 24586
  HEAP32[$AsyncCtx17 + 12 >> 2] = $19; //@line 24588
  HEAP32[$AsyncCtx17 + 16 >> 2] = $2; //@line 24590
  sp = STACKTOP; //@line 24591
  return 0; //@line 24592
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 24594
 HEAP32[$3 >> 2] = $122; //@line 24595
 $127 = HEAP32[$42 >> 2] | 0; //@line 24596
 $130 = HEAP32[(HEAP32[$127 >> 2] | 0) + 76 >> 2] | 0; //@line 24599
 $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 24600
 FUNCTION_TABLE_vi[$130 & 1023]($127); //@line 24601
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 632; //@line 24604
  HEAP32[$AsyncCtx20 + 4 >> 2] = $19; //@line 24606
  HEAP32[$AsyncCtx20 + 8 >> 2] = $2; //@line 24608
  sp = STACKTOP; //@line 24609
  return 0; //@line 24610
 } else {
  _emscripten_free_async_context($AsyncCtx20 | 0); //@line 24612
  HEAP8[$2 >> 0] = HEAP8[$19 >> 0] | 0; //@line 24614
  return 1; //@line 24615
 }
 return 0; //@line 24617
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_202($0) {
 $0 = $0 | 0;
 var $$0$i43 = 0, $10 = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $37 = 0, $4 = 0, $41 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $77 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 35072
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35074
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35076
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35078
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35080
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35082
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 35084
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 35086
 $20 = HEAP16[$0 + 40 >> 1] | 0; //@line 35092
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 35094
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 35096
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 35098
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 35100
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 35102
 $trunc = HEAP8[$0 + 64 >> 0] | 0; //@line 35104
 $37 = HEAP32[$0 + 76 >> 2] | 0; //@line 35110
 $41 = HEAP8[$0 + 84 >> 0] & 1; //@line 35115
 $45 = (HEAP32[___async_retval >> 2] | 0) == -1010 ? HEAP8[HEAP32[$0 + 36 >> 2] >> 0] | 0 : HEAP8[(HEAP32[$0 + 32 >> 2] | 0) + 1 >> 0] | 0; //@line 35122
 $$0$i43 = $45 & 255; //@line 35123
 $46 = $45 & 255; //@line 35124
 $47 = $20 & 65535; //@line 35125
 if (($$0$i43 & 65535) < ($20 & 65535)) {
  _printf(12139, HEAP32[$0 + 68 >> 2] | 0) | 0; //@line 35128
  HEAP32[$37 >> 2] = $47; //@line 35129
  HEAP32[$37 + 4 >> 2] = $46; //@line 35131
  _printf(12473, $37) | 0; //@line 35132
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(68) | 0; //@line 35133
  _putchar(10) | 0; //@line 35134
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 304; //@line 35137
   $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 35138
   HEAP32[$49 >> 2] = $47; //@line 35139
   $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 35140
   HEAP32[$50 >> 2] = $46; //@line 35141
   $51 = $ReallocAsyncCtx3 + 12 | 0; //@line 35142
   HEAP32[$51 >> 2] = $2; //@line 35143
   $52 = $ReallocAsyncCtx3 + 16 | 0; //@line 35144
   HEAP16[$52 >> 1] = $$0$i43; //@line 35145
   $53 = $ReallocAsyncCtx3 + 20 | 0; //@line 35146
   HEAP32[$53 >> 2] = $4; //@line 35147
   $54 = $ReallocAsyncCtx3 + 24 | 0; //@line 35148
   HEAP8[$54 >> 0] = $trunc; //@line 35149
   $55 = $ReallocAsyncCtx3 + 28 | 0; //@line 35150
   HEAP32[$55 >> 2] = $22; //@line 35151
   $56 = $ReallocAsyncCtx3 + 32 | 0; //@line 35152
   HEAP32[$56 >> 2] = $24; //@line 35153
   $57 = $ReallocAsyncCtx3 + 36 | 0; //@line 35154
   HEAP32[$57 >> 2] = $26; //@line 35155
   $58 = $ReallocAsyncCtx3 + 40 | 0; //@line 35156
   HEAP32[$58 >> 2] = $28; //@line 35157
   $59 = $ReallocAsyncCtx3 + 44 | 0; //@line 35158
   HEAP32[$59 >> 2] = $30; //@line 35159
   $60 = $ReallocAsyncCtx3 + 48 | 0; //@line 35160
   HEAP32[$60 >> 2] = $6; //@line 35161
   $61 = $ReallocAsyncCtx3 + 52 | 0; //@line 35162
   HEAP32[$61 >> 2] = $8; //@line 35163
   $62 = $ReallocAsyncCtx3 + 56 | 0; //@line 35164
   HEAP32[$62 >> 2] = $10; //@line 35165
   $63 = $ReallocAsyncCtx3 + 60 | 0; //@line 35166
   HEAP32[$63 >> 2] = $12; //@line 35167
   $64 = $ReallocAsyncCtx3 + 64 | 0; //@line 35168
   HEAP32[$64 >> 2] = $14; //@line 35169
   sp = STACKTOP; //@line 35170
   return;
  }
  ___async_unwind = 0; //@line 35173
  HEAP32[$ReallocAsyncCtx3 >> 2] = 304; //@line 35174
  $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 35175
  HEAP32[$49 >> 2] = $47; //@line 35176
  $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 35177
  HEAP32[$50 >> 2] = $46; //@line 35178
  $51 = $ReallocAsyncCtx3 + 12 | 0; //@line 35179
  HEAP32[$51 >> 2] = $2; //@line 35180
  $52 = $ReallocAsyncCtx3 + 16 | 0; //@line 35181
  HEAP16[$52 >> 1] = $$0$i43; //@line 35182
  $53 = $ReallocAsyncCtx3 + 20 | 0; //@line 35183
  HEAP32[$53 >> 2] = $4; //@line 35184
  $54 = $ReallocAsyncCtx3 + 24 | 0; //@line 35185
  HEAP8[$54 >> 0] = $trunc; //@line 35186
  $55 = $ReallocAsyncCtx3 + 28 | 0; //@line 35187
  HEAP32[$55 >> 2] = $22; //@line 35188
  $56 = $ReallocAsyncCtx3 + 32 | 0; //@line 35189
  HEAP32[$56 >> 2] = $24; //@line 35190
  $57 = $ReallocAsyncCtx3 + 36 | 0; //@line 35191
  HEAP32[$57 >> 2] = $26; //@line 35192
  $58 = $ReallocAsyncCtx3 + 40 | 0; //@line 35193
  HEAP32[$58 >> 2] = $28; //@line 35194
  $59 = $ReallocAsyncCtx3 + 44 | 0; //@line 35195
  HEAP32[$59 >> 2] = $30; //@line 35196
  $60 = $ReallocAsyncCtx3 + 48 | 0; //@line 35197
  HEAP32[$60 >> 2] = $6; //@line 35198
  $61 = $ReallocAsyncCtx3 + 52 | 0; //@line 35199
  HEAP32[$61 >> 2] = $8; //@line 35200
  $62 = $ReallocAsyncCtx3 + 56 | 0; //@line 35201
  HEAP32[$62 >> 2] = $10; //@line 35202
  $63 = $ReallocAsyncCtx3 + 60 | 0; //@line 35203
  HEAP32[$63 >> 2] = $12; //@line 35204
  $64 = $ReallocAsyncCtx3 + 64 | 0; //@line 35205
  HEAP32[$64 >> 2] = $14; //@line 35206
  sp = STACKTOP; //@line 35207
  return;
 }
 HEAP16[$2 + 2230 >> 1] = $20; //@line 35211
 HEAP16[$2 + 2232 >> 1] = 0; //@line 35213
 if (!$41) {
  _memcpy($2 + 1975 | 0, $4 | 0, $47 | 0) | 0; //@line 35216
 }
 switch ($trunc & 15) {
 case 9:
 case 5:
 case 1:
  {
   HEAP32[$2 + 1968 >> 2] = 0; //@line 35222
   HEAP8[$2 + 1972 >> 0] = HEAP8[$30 >> 0] | 0; //@line 35225
   switch ($trunc & 15) {
   case 6:
   case 2:
    {
     label = 10; //@line 35229
     break;
    }
   default:
    {}
   }
   break;
  }
 case 10:
 case 6:
 case 2:
  {
   label = 10; //@line 35238
   break;
  }
 default:
  {}
 }
 if ((label | 0) == 10) {
  HEAP32[$2 + 1968 >> 2] = 1; //@line 35246
  HEAP8[$2 + 1972 >> 0] = HEAP8[$30 >> 0] | 0; //@line 35249
  HEAP8[$2 + 1974 >> 0] = HEAP8[$2 + 2284 >> 0] | 0; //@line 35253
 }
 _printf(12139, $22) | 0; //@line 35255
 $77 = $2 + 2230 | 0; //@line 35256
 $82 = HEAPU16[$2 + 2232 >> 1] | 0; //@line 35261
 HEAP32[$26 >> 2] = HEAPU16[$77 >> 1]; //@line 35262
 HEAP32[$26 + 4 >> 2] = $82; //@line 35264
 _printf(12528, $26) | 0; //@line 35265
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 35266
 _putchar(10) | 0; //@line 35267
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 305; //@line 35270
  $83 = $ReallocAsyncCtx2 + 4 | 0; //@line 35271
  HEAP32[$83 >> 2] = $2; //@line 35272
  $84 = $ReallocAsyncCtx2 + 8 | 0; //@line 35273
  HEAP32[$84 >> 2] = $6; //@line 35274
  $85 = $ReallocAsyncCtx2 + 12 | 0; //@line 35275
  HEAP32[$85 >> 2] = $8; //@line 35276
  $86 = $ReallocAsyncCtx2 + 16 | 0; //@line 35277
  HEAP32[$86 >> 2] = $10; //@line 35278
  $87 = $ReallocAsyncCtx2 + 20 | 0; //@line 35279
  HEAP32[$87 >> 2] = $12; //@line 35280
  $88 = $ReallocAsyncCtx2 + 24 | 0; //@line 35281
  HEAP32[$88 >> 2] = $77; //@line 35282
  $89 = $ReallocAsyncCtx2 + 28 | 0; //@line 35283
  HEAP32[$89 >> 2] = $14; //@line 35284
  sp = STACKTOP; //@line 35285
  return;
 }
 ___async_unwind = 0; //@line 35288
 HEAP32[$ReallocAsyncCtx2 >> 2] = 305; //@line 35289
 $83 = $ReallocAsyncCtx2 + 4 | 0; //@line 35290
 HEAP32[$83 >> 2] = $2; //@line 35291
 $84 = $ReallocAsyncCtx2 + 8 | 0; //@line 35292
 HEAP32[$84 >> 2] = $6; //@line 35293
 $85 = $ReallocAsyncCtx2 + 12 | 0; //@line 35294
 HEAP32[$85 >> 2] = $8; //@line 35295
 $86 = $ReallocAsyncCtx2 + 16 | 0; //@line 35296
 HEAP32[$86 >> 2] = $10; //@line 35297
 $87 = $ReallocAsyncCtx2 + 20 | 0; //@line 35298
 HEAP32[$87 >> 2] = $12; //@line 35299
 $88 = $ReallocAsyncCtx2 + 24 | 0; //@line 35300
 HEAP32[$88 >> 2] = $77; //@line 35301
 $89 = $ReallocAsyncCtx2 + 28 | 0; //@line 35302
 HEAP32[$89 >> 2] = $14; //@line 35303
 sp = STACKTOP; //@line 35304
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_39($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $71 = 0, $73 = 0, $74 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20217
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20219
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20221
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20223
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 20226
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 20228
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 20230
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 20232
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 20234
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 20236
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 20238
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 20242
 do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($6) | 0)) {
    if ($8) {
     $$3$off0204 = 6; //@line 20253
     break;
    } else {
     label = 9; //@line 20256
     break;
    }
   }
   _printf(12967, $20) | 0; //@line 20260
   _printf(13114, $24) | 0; //@line 20261
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 20262
   _putchar(10) | 0; //@line 20263
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 404; //@line 20266
    $32 = $ReallocAsyncCtx2 + 4 | 0; //@line 20267
    HEAP32[$32 >> 2] = $2; //@line 20268
    $33 = $ReallocAsyncCtx2 + 8 | 0; //@line 20269
    HEAP32[$33 >> 2] = $4; //@line 20270
    $34 = $ReallocAsyncCtx2 + 12 | 0; //@line 20271
    HEAP32[$34 >> 2] = $6; //@line 20272
    $35 = $ReallocAsyncCtx2 + 16 | 0; //@line 20273
    $$expand_i1_val = $8 & 1; //@line 20274
    HEAP8[$35 >> 0] = $$expand_i1_val; //@line 20275
    $36 = $ReallocAsyncCtx2 + 17 | 0; //@line 20276
    HEAP8[$36 >> 0] = $10; //@line 20277
    $37 = $ReallocAsyncCtx2 + 20 | 0; //@line 20278
    HEAP32[$37 >> 2] = $12; //@line 20279
    $38 = $ReallocAsyncCtx2 + 24 | 0; //@line 20280
    HEAP32[$38 >> 2] = $14; //@line 20281
    $39 = $ReallocAsyncCtx2 + 28 | 0; //@line 20282
    HEAP32[$39 >> 2] = $16; //@line 20283
    $40 = $ReallocAsyncCtx2 + 32 | 0; //@line 20284
    HEAP32[$40 >> 2] = $18; //@line 20285
    sp = STACKTOP; //@line 20286
    return;
   }
   ___async_unwind = 0; //@line 20289
   HEAP32[$ReallocAsyncCtx2 >> 2] = 404; //@line 20290
   $32 = $ReallocAsyncCtx2 + 4 | 0; //@line 20291
   HEAP32[$32 >> 2] = $2; //@line 20292
   $33 = $ReallocAsyncCtx2 + 8 | 0; //@line 20293
   HEAP32[$33 >> 2] = $4; //@line 20294
   $34 = $ReallocAsyncCtx2 + 12 | 0; //@line 20295
   HEAP32[$34 >> 2] = $6; //@line 20296
   $35 = $ReallocAsyncCtx2 + 16 | 0; //@line 20297
   $$expand_i1_val = $8 & 1; //@line 20298
   HEAP8[$35 >> 0] = $$expand_i1_val; //@line 20299
   $36 = $ReallocAsyncCtx2 + 17 | 0; //@line 20300
   HEAP8[$36 >> 0] = $10; //@line 20301
   $37 = $ReallocAsyncCtx2 + 20 | 0; //@line 20302
   HEAP32[$37 >> 2] = $12; //@line 20303
   $38 = $ReallocAsyncCtx2 + 24 | 0; //@line 20304
   HEAP32[$38 >> 2] = $14; //@line 20305
   $39 = $ReallocAsyncCtx2 + 28 | 0; //@line 20306
   HEAP32[$39 >> 2] = $16; //@line 20307
   $40 = $ReallocAsyncCtx2 + 32 | 0; //@line 20308
   HEAP32[$40 >> 2] = $18; //@line 20309
   sp = STACKTOP; //@line 20310
   return;
  } else {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 1; //@line 20315
   if ($8) {
    $$3$off0204 = 6; //@line 20317
   } else {
    label = 9; //@line 20319
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  $44 = (__ZN11LoRaMacMcps16get_confirmationEv($12) | 0) + 10 | 0; //@line 20327
  if ($10 & 32) {
   HEAP8[$44 >> 0] = 1; //@line 20329
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 28 >> 0] = 1; //@line 20332
   $47 = HEAP32[$14 >> 2] | 0; //@line 20333
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 20335
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($47, $4 + 1076 | 0); //@line 20336
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 20339
    $49 = $ReallocAsyncCtx23 + 4 | 0; //@line 20340
    HEAP32[$49 >> 2] = $4; //@line 20341
    $50 = $ReallocAsyncCtx23 + 8 | 0; //@line 20342
    HEAP32[$50 >> 2] = $14; //@line 20343
    $51 = $ReallocAsyncCtx23 + 12 | 0; //@line 20344
    HEAP32[$51 >> 2] = $16; //@line 20345
    $52 = $ReallocAsyncCtx23 + 16 | 0; //@line 20346
    HEAP32[$52 >> 2] = $18; //@line 20347
    sp = STACKTOP; //@line 20348
    return;
   }
   ___async_unwind = 0; //@line 20351
   HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 20352
   $49 = $ReallocAsyncCtx23 + 4 | 0; //@line 20353
   HEAP32[$49 >> 2] = $4; //@line 20354
   $50 = $ReallocAsyncCtx23 + 8 | 0; //@line 20355
   HEAP32[$50 >> 2] = $14; //@line 20356
   $51 = $ReallocAsyncCtx23 + 12 | 0; //@line 20357
   HEAP32[$51 >> 2] = $16; //@line 20358
   $52 = $ReallocAsyncCtx23 + 16 | 0; //@line 20359
   HEAP32[$52 >> 2] = $18; //@line 20360
   sp = STACKTOP; //@line 20361
   return;
  }
  HEAP8[$44 >> 0] = 0; //@line 20364
  if ((HEAPU8[$4 + 895 >> 0] | 0) > (HEAPU8[$4 + 894 >> 0] | 0)) {
   $58 = HEAP32[$14 >> 2] | 0; //@line 20371
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 20373
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($58, $4 + 1076 | 0); //@line 20374
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 20377
    $60 = $ReallocAsyncCtx22 + 4 | 0; //@line 20378
    HEAP32[$60 >> 2] = $4; //@line 20379
    $61 = $ReallocAsyncCtx22 + 8 | 0; //@line 20380
    HEAP32[$61 >> 2] = $14; //@line 20381
    $62 = $ReallocAsyncCtx22 + 12 | 0; //@line 20382
    HEAP32[$62 >> 2] = $16; //@line 20383
    $63 = $ReallocAsyncCtx22 + 16 | 0; //@line 20384
    HEAP32[$63 >> 2] = $18; //@line 20385
    sp = STACKTOP; //@line 20386
    return;
   }
   ___async_unwind = 0; //@line 20389
   HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 20390
   $60 = $ReallocAsyncCtx22 + 4 | 0; //@line 20391
   HEAP32[$60 >> 2] = $4; //@line 20392
   $61 = $ReallocAsyncCtx22 + 8 | 0; //@line 20393
   HEAP32[$61 >> 2] = $14; //@line 20394
   $62 = $ReallocAsyncCtx22 + 12 | 0; //@line 20395
   HEAP32[$62 >> 2] = $16; //@line 20396
   $63 = $ReallocAsyncCtx22 + 16 | 0; //@line 20397
   HEAP32[$63 >> 2] = $18; //@line 20398
   sp = STACKTOP; //@line 20399
   return;
  } else {
   $$3$off0204 = 2; //@line 20402
  }
 }
 $64 = $4 + 944 | 0; //@line 20405
 HEAP8[$64 >> 0] = $$3$off0204 | HEAP8[$64 >> 0] & -7; //@line 20409
 $68 = $4 + 944 | 0; //@line 20410
 HEAP8[$68 >> 0] = HEAP8[$68 >> 0] | 32; //@line 20413
 $71 = HEAP32[$14 >> 2] | 0; //@line 20414
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 20416
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($71, $4 + 996 | 0, 1); //@line 20417
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 20420
  $73 = $ReallocAsyncCtx17 + 4 | 0; //@line 20421
  HEAP32[$73 >> 2] = $16; //@line 20422
  $74 = $ReallocAsyncCtx17 + 8 | 0; //@line 20423
  HEAP32[$74 >> 2] = $18; //@line 20424
  sp = STACKTOP; //@line 20425
  return;
 }
 ___async_unwind = 0; //@line 20428
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 20429
 $73 = $ReallocAsyncCtx17 + 4 | 0; //@line 20430
 HEAP32[$73 >> 2] = $16; //@line 20431
 $74 = $ReallocAsyncCtx17 + 8 | 0; //@line 20432
 HEAP32[$74 >> 2] = $18; //@line 20433
 sp = STACKTOP; //@line 20434
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_41($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $71 = 0, $73 = 0, $74 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx4 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20716
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20718
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 20721
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20723
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20725
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20727
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 20729
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20731
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20733
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20735
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20737
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20741
 do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($10) | 0)) {
    if ($4) {
     $$3$off0204 = 6; //@line 20752
     break;
    } else {
     label = 9; //@line 20755
     break;
    }
   }
   _printf(12967, $20) | 0; //@line 20759
   _printf(13114, $24) | 0; //@line 20760
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 20761
   _putchar(10) | 0; //@line 20762
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 400; //@line 20765
    $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 20766
    HEAP32[$32 >> 2] = $6; //@line 20767
    $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 20768
    HEAP32[$33 >> 2] = $8; //@line 20769
    $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 20770
    HEAP32[$34 >> 2] = $10; //@line 20771
    $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 20772
    $$expand_i1_val = $4 & 1; //@line 20773
    HEAP8[$35 >> 0] = $$expand_i1_val; //@line 20774
    $36 = $ReallocAsyncCtx4 + 17 | 0; //@line 20775
    HEAP8[$36 >> 0] = $12; //@line 20776
    $37 = $ReallocAsyncCtx4 + 20 | 0; //@line 20777
    HEAP32[$37 >> 2] = $2; //@line 20778
    $38 = $ReallocAsyncCtx4 + 24 | 0; //@line 20779
    HEAP32[$38 >> 2] = $14; //@line 20780
    $39 = $ReallocAsyncCtx4 + 28 | 0; //@line 20781
    HEAP32[$39 >> 2] = $16; //@line 20782
    $40 = $ReallocAsyncCtx4 + 32 | 0; //@line 20783
    HEAP32[$40 >> 2] = $18; //@line 20784
    sp = STACKTOP; //@line 20785
    return;
   }
   ___async_unwind = 0; //@line 20788
   HEAP32[$ReallocAsyncCtx4 >> 2] = 400; //@line 20789
   $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 20790
   HEAP32[$32 >> 2] = $6; //@line 20791
   $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 20792
   HEAP32[$33 >> 2] = $8; //@line 20793
   $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 20794
   HEAP32[$34 >> 2] = $10; //@line 20795
   $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 20796
   $$expand_i1_val = $4 & 1; //@line 20797
   HEAP8[$35 >> 0] = $$expand_i1_val; //@line 20798
   $36 = $ReallocAsyncCtx4 + 17 | 0; //@line 20799
   HEAP8[$36 >> 0] = $12; //@line 20800
   $37 = $ReallocAsyncCtx4 + 20 | 0; //@line 20801
   HEAP32[$37 >> 2] = $2; //@line 20802
   $38 = $ReallocAsyncCtx4 + 24 | 0; //@line 20803
   HEAP32[$38 >> 2] = $14; //@line 20804
   $39 = $ReallocAsyncCtx4 + 28 | 0; //@line 20805
   HEAP32[$39 >> 2] = $16; //@line 20806
   $40 = $ReallocAsyncCtx4 + 32 | 0; //@line 20807
   HEAP32[$40 >> 2] = $18; //@line 20808
   sp = STACKTOP; //@line 20809
   return;
  } else {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) + 4 >> 2] = 1; //@line 20814
   if ($4) {
    $$3$off0204 = 6; //@line 20816
   } else {
    label = 9; //@line 20818
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  $44 = (__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 10 | 0; //@line 20826
  if ($12 & 32) {
   HEAP8[$44 >> 0] = 1; //@line 20828
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($2) | 0) + 28 >> 0] = 1; //@line 20831
   $47 = HEAP32[$14 >> 2] | 0; //@line 20832
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 20834
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($47, $8 + 1076 | 0); //@line 20835
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 20838
    $49 = $ReallocAsyncCtx23 + 4 | 0; //@line 20839
    HEAP32[$49 >> 2] = $8; //@line 20840
    $50 = $ReallocAsyncCtx23 + 8 | 0; //@line 20841
    HEAP32[$50 >> 2] = $14; //@line 20842
    $51 = $ReallocAsyncCtx23 + 12 | 0; //@line 20843
    HEAP32[$51 >> 2] = $16; //@line 20844
    $52 = $ReallocAsyncCtx23 + 16 | 0; //@line 20845
    HEAP32[$52 >> 2] = $18; //@line 20846
    sp = STACKTOP; //@line 20847
    return;
   }
   ___async_unwind = 0; //@line 20850
   HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 20851
   $49 = $ReallocAsyncCtx23 + 4 | 0; //@line 20852
   HEAP32[$49 >> 2] = $8; //@line 20853
   $50 = $ReallocAsyncCtx23 + 8 | 0; //@line 20854
   HEAP32[$50 >> 2] = $14; //@line 20855
   $51 = $ReallocAsyncCtx23 + 12 | 0; //@line 20856
   HEAP32[$51 >> 2] = $16; //@line 20857
   $52 = $ReallocAsyncCtx23 + 16 | 0; //@line 20858
   HEAP32[$52 >> 2] = $18; //@line 20859
   sp = STACKTOP; //@line 20860
   return;
  }
  HEAP8[$44 >> 0] = 0; //@line 20863
  if ((HEAPU8[$8 + 895 >> 0] | 0) > (HEAPU8[$8 + 894 >> 0] | 0)) {
   $58 = HEAP32[$14 >> 2] | 0; //@line 20870
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 20872
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($58, $8 + 1076 | 0); //@line 20873
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 20876
    $60 = $ReallocAsyncCtx22 + 4 | 0; //@line 20877
    HEAP32[$60 >> 2] = $8; //@line 20878
    $61 = $ReallocAsyncCtx22 + 8 | 0; //@line 20879
    HEAP32[$61 >> 2] = $14; //@line 20880
    $62 = $ReallocAsyncCtx22 + 12 | 0; //@line 20881
    HEAP32[$62 >> 2] = $16; //@line 20882
    $63 = $ReallocAsyncCtx22 + 16 | 0; //@line 20883
    HEAP32[$63 >> 2] = $18; //@line 20884
    sp = STACKTOP; //@line 20885
    return;
   }
   ___async_unwind = 0; //@line 20888
   HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 20889
   $60 = $ReallocAsyncCtx22 + 4 | 0; //@line 20890
   HEAP32[$60 >> 2] = $8; //@line 20891
   $61 = $ReallocAsyncCtx22 + 8 | 0; //@line 20892
   HEAP32[$61 >> 2] = $14; //@line 20893
   $62 = $ReallocAsyncCtx22 + 12 | 0; //@line 20894
   HEAP32[$62 >> 2] = $16; //@line 20895
   $63 = $ReallocAsyncCtx22 + 16 | 0; //@line 20896
   HEAP32[$63 >> 2] = $18; //@line 20897
   sp = STACKTOP; //@line 20898
   return;
  } else {
   $$3$off0204 = 2; //@line 20901
  }
 }
 $64 = $8 + 944 | 0; //@line 20904
 HEAP8[$64 >> 0] = $$3$off0204 | HEAP8[$64 >> 0] & -7; //@line 20908
 $68 = $8 + 944 | 0; //@line 20909
 HEAP8[$68 >> 0] = HEAP8[$68 >> 0] | 32; //@line 20912
 $71 = HEAP32[$14 >> 2] | 0; //@line 20913
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 20915
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($71, $8 + 996 | 0, 1); //@line 20916
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 20919
  $73 = $ReallocAsyncCtx17 + 4 | 0; //@line 20920
  HEAP32[$73 >> 2] = $16; //@line 20921
  $74 = $ReallocAsyncCtx17 + 8 | 0; //@line 20922
  HEAP32[$74 >> 2] = $18; //@line 20923
  sp = STACKTOP; //@line 20924
  return;
 }
 ___async_unwind = 0; //@line 20927
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 20928
 $73 = $ReallocAsyncCtx17 + 4 | 0; //@line 20929
 HEAP32[$73 >> 2] = $16; //@line 20930
 $74 = $ReallocAsyncCtx17 + 8 | 0; //@line 20931
 HEAP32[$74 >> 2] = $18; //@line 20932
 sp = STACKTOP; //@line 20933
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_102($0) {
 $0 = $0 | 0;
 var $$054 = 0, $$055 = 0, $$05564 = 0, $$056 = 0, $$05663 = 0, $$05766 = 0, $$06065 = 0, $$158 = 0, $$15862 = 0, $$259 = 0, $$pre$phiZ2D = 0, $10 = 0, $104 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $29 = 0, $30 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $51 = 0, $52 = 0, $56 = 0, $58 = 0, $6 = 0, $64 = 0, $65 = 0, $68 = 0, $70 = 0, $8 = 0, $83 = 0, $95 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 26739
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26741
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26743
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26745
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26747
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26749
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 26751
 $14 = HEAP8[$0 + 25 >> 0] & 1; //@line 26754
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 26756
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 26758
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 26760
 if (HEAP8[___async_retval >> 0] & 1) {
  HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 64; //@line 26767
 }
 $24 = $6 + 374 | 0; //@line 26769
 if (!(HEAP8[$24 >> 0] | 0)) {
  $$pre$phiZ2D = $18; //@line 26773
 } else {
  HEAP8[$24 >> 0] = 0; //@line 26775
  HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 32; //@line 26778
  $$pre$phiZ2D = $18; //@line 26779
 }
 $29 = $6 + 952 | 0; //@line 26781
 $30 = HEAP32[$29 >> 2] | 0; //@line 26782
 HEAP8[$6 + 382 >> 0] = $30; //@line 26785
 HEAP8[$6 + 383 >> 0] = $30 >>> 8; //@line 26789
 HEAP8[$6 + 384 >> 0] = $30 >>> 16; //@line 26793
 HEAP8[$6 + 385 >> 0] = $30 >>> 24; //@line 26797
 $43 = $6 + 386 | 0; //@line 26799
 HEAP8[$43 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 26800
 $44 = $6 + 956 | 0; //@line 26801
 $45 = HEAP32[$44 >> 2] | 0; //@line 26802
 HEAP8[$6 + 387 >> 0] = $45; //@line 26805
 HEAP8[$6 + 388 >> 0] = $45 >>> 8; //@line 26809
 $51 = $6 + 4 | 0; //@line 26810
 __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($51); //@line 26811
 $52 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($51) | 0; //@line 26812
 do {
  if ($14) {
   label = 16; //@line 26815
  } else {
   if (!(HEAP8[$8 >> 0] | 0)) {
    label = 16; //@line 26820
   } else {
    if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($51) | 0)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($51); //@line 26824
     $$05564 = $12; //@line 26825
     $$05663 = $10; //@line 26825
     $$15862 = 8; //@line 26825
     label = 20; //@line 26826
     break;
    }
    $56 = $52 & 255; //@line 26829
    if (($52 & 255) >= 16) {
     HEAP8[$8 >> 0] = $52; //@line 26832
     $$055 = 0; //@line 26834
     $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($51) | 0; //@line 26834
     $$158 = 8; //@line 26834
     label = 19; //@line 26835
     break;
    }
    $58 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 26838
    $64 = ($58 & 255) + $56 & 15 | $58 & -16; //@line 26844
    HEAP8[$$pre$phiZ2D >> 0] = $64; //@line 26845
    HEAP8[$43 >> 0] = $64; //@line 26846
    $65 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($51) | 0; //@line 26847
    if (!($52 << 24 >> 24)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($51); //@line 26850
     $$05564 = $12; //@line 26851
     $$05663 = $10; //@line 26851
     $$15862 = 8; //@line 26851
     label = 20; //@line 26852
     break;
    } else {
     $$05766 = 8; //@line 26855
     $$06065 = 0; //@line 26855
     $68 = 0; //@line 26855
     while (1) {
      $70 = $$05766 + 1 << 24 >> 24; //@line 26859
      HEAP8[($$05766 & 255) + ($6 + 381) >> 0] = HEAP8[$65 + $68 >> 0] | 0; //@line 26862
      $$06065 = $$06065 + 1 << 16 >> 16; //@line 26863
      $68 = $$06065 & 65535; //@line 26864
      if ($68 >>> 0 >= $56 >>> 0) {
       $$055 = $12; //@line 26869
       $$056 = $10; //@line 26869
       $$158 = $70; //@line 26869
       label = 19; //@line 26870
       break;
      } else {
       $$05766 = $70; //@line 26867
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 16) {
  if (!($52 << 24 >> 24)) {
   $$055 = $12; //@line 26881
   $$056 = $10; //@line 26881
   $$158 = 8; //@line 26881
   label = 19; //@line 26882
  } else {
   if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($51) | 0) {
    HEAP8[$8 >> 0] = $52; //@line 26886
    $$055 = 0; //@line 26888
    $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($51) | 0; //@line 26888
    $$158 = 8; //@line 26888
    label = 19; //@line 26889
   } else {
    $$055 = $12; //@line 26891
    $$056 = $10; //@line 26891
    $$158 = 8; //@line 26891
    label = 19; //@line 26892
   }
  }
 }
 if ((label | 0) == 19) {
  __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($51); //@line 26897
  if (!$$056) {
   $$054 = 0; //@line 26900
   $$259 = $$158; //@line 26900
  } else {
   $$05564 = $$055; //@line 26902
   $$05663 = $$056; //@line 26902
   $$15862 = $$158; //@line 26902
   label = 20; //@line 26903
  }
 }
 do {
  if ((label | 0) == 20) {
   if (!(HEAP8[$8 >> 0] | 0)) {
    $$054 = 0; //@line 26911
    $$259 = $$15862; //@line 26911
   } else {
    $83 = $$15862 + 1 << 24 >> 24; //@line 26913
    HEAP8[($$15862 & 255) + ($6 + 381) >> 0] = $$05564; //@line 26916
    if (!($$05564 << 24 >> 24)) {
     __ZN14LoRaMacCommand20clear_command_bufferEv($51); //@line 26919
     $95 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$8 >> 0] | 0, $6 + 912 | 0, HEAP32[$29 >> 2] | 0, 0, HEAP32[$44 >> 2] | 0, ($83 & 255) + ($6 + 381) | 0) | 0) == 0; //@line 26928
     $$054 = $95 ? 0 : -1014; //@line 26930
     $$259 = $83; //@line 26930
     break;
    } else {
     $104 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$8 >> 0] | 0, $6 + 928 | 0, HEAP32[$29 >> 2] | 0, 0, HEAP32[$44 >> 2] | 0, ($83 & 255) + ($6 + 381) | 0) | 0) == 0; //@line 26941
     $$054 = $104 ? 0 : -1014; //@line 26943
     $$259 = $83; //@line 26943
     break;
    }
   }
  }
 } while (0);
 $109 = (HEAPU8[$8 >> 0] | 0) + ($$259 & 255) & 65535; //@line 26953
 HEAP16[$4 >> 1] = $109; //@line 26954
 $111 = HEAP32[$29 >> 2] | 0; //@line 26956
 $112 = HEAP32[$44 >> 2] | 0; //@line 26957
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 26958
 $113 = __Z11compute_micPKhtS0_jhjPj($20, $109, $6 + 912 | 0, $111, 0, $112, $2) | 0; //@line 26959
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 502; //@line 26962
  $114 = $ReallocAsyncCtx + 4 | 0; //@line 26963
  HEAP32[$114 >> 2] = $$054; //@line 26964
  $115 = $ReallocAsyncCtx + 8 | 0; //@line 26965
  HEAP32[$115 >> 2] = $2; //@line 26966
  $116 = $ReallocAsyncCtx + 12 | 0; //@line 26967
  HEAP32[$116 >> 2] = $4; //@line 26968
  $117 = $ReallocAsyncCtx + 16 | 0; //@line 26969
  HEAP32[$117 >> 2] = $6; //@line 26970
  $118 = $ReallocAsyncCtx + 20 | 0; //@line 26971
  HEAP32[$118 >> 2] = $16; //@line 26972
  sp = STACKTOP; //@line 26973
  return;
 }
 HEAP32[___async_retval >> 2] = $113; //@line 26977
 ___async_unwind = 0; //@line 26978
 HEAP32[$ReallocAsyncCtx >> 2] = 502; //@line 26979
 $114 = $ReallocAsyncCtx + 4 | 0; //@line 26980
 HEAP32[$114 >> 2] = $$054; //@line 26981
 $115 = $ReallocAsyncCtx + 8 | 0; //@line 26982
 HEAP32[$115 >> 2] = $2; //@line 26983
 $116 = $ReallocAsyncCtx + 12 | 0; //@line 26984
 HEAP32[$116 >> 2] = $4; //@line 26985
 $117 = $ReallocAsyncCtx + 16 | 0; //@line 26986
 HEAP32[$117 >> 2] = $6; //@line 26987
 $118 = $ReallocAsyncCtx + 20 | 0; //@line 26988
 HEAP32[$118 >> 2] = $16; //@line 26989
 sp = STACKTOP; //@line 26990
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_449($0) {
 $0 = $0 | 0;
 var $$pre120 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 32648
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32650
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32652
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32654
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32656
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32658
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32660
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32662
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32664
 $$pre120 = HEAP32[$14 >> 2] | 0; //@line 32665
 if ($$pre120 | 0) {
  $19 = HEAP32[$$pre120 + 4 >> 2] | 0; //@line 32669
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 32670
  FUNCTION_TABLE_vii[$19 & 31]($10, $6); //@line 32671
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 575; //@line 32674
   $20 = $ReallocAsyncCtx8 + 4 | 0; //@line 32675
   HEAP32[$20 >> 2] = $2; //@line 32676
   $21 = $ReallocAsyncCtx8 + 8 | 0; //@line 32677
   HEAP32[$21 >> 2] = $4; //@line 32678
   $22 = $ReallocAsyncCtx8 + 12 | 0; //@line 32679
   HEAP32[$22 >> 2] = $6; //@line 32680
   $23 = $ReallocAsyncCtx8 + 16 | 0; //@line 32681
   HEAP32[$23 >> 2] = $8; //@line 32682
   $24 = $ReallocAsyncCtx8 + 20 | 0; //@line 32683
   HEAP32[$24 >> 2] = $14; //@line 32684
   $25 = $ReallocAsyncCtx8 + 24 | 0; //@line 32685
   HEAP32[$25 >> 2] = $12; //@line 32686
   $26 = $ReallocAsyncCtx8 + 28 | 0; //@line 32687
   HEAP32[$26 >> 2] = $16; //@line 32688
   sp = STACKTOP; //@line 32689
   return;
  }
  ___async_unwind = 0; //@line 32692
  HEAP32[$ReallocAsyncCtx8 >> 2] = 575; //@line 32693
  $20 = $ReallocAsyncCtx8 + 4 | 0; //@line 32694
  HEAP32[$20 >> 2] = $2; //@line 32695
  $21 = $ReallocAsyncCtx8 + 8 | 0; //@line 32696
  HEAP32[$21 >> 2] = $4; //@line 32697
  $22 = $ReallocAsyncCtx8 + 12 | 0; //@line 32698
  HEAP32[$22 >> 2] = $6; //@line 32699
  $23 = $ReallocAsyncCtx8 + 16 | 0; //@line 32700
  HEAP32[$23 >> 2] = $8; //@line 32701
  $24 = $ReallocAsyncCtx8 + 20 | 0; //@line 32702
  HEAP32[$24 >> 2] = $14; //@line 32703
  $25 = $ReallocAsyncCtx8 + 24 | 0; //@line 32704
  HEAP32[$25 >> 2] = $12; //@line 32705
  $26 = $ReallocAsyncCtx8 + 28 | 0; //@line 32706
  HEAP32[$26 >> 2] = $16; //@line 32707
  sp = STACKTOP; //@line 32708
  return;
 }
 HEAP32[$12 >> 2] = 0; //@line 32711
 $27 = $8 + 12 | 0; //@line 32712
 HEAP32[$8 >> 2] = 577; //@line 32713
 HEAP32[$8 + 4 >> 2] = 0; //@line 32715
 HEAP32[$8 + 8 >> 2] = $4; //@line 32717
 HEAP32[$27 >> 2] = 848; //@line 32718
 $28 = $4 + 1228 | 0; //@line 32719
 if (($28 | 0) == ($8 | 0)) {
  $51 = HEAP32[214] | 0; //@line 32723
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 32724
  FUNCTION_TABLE_vi[$51 & 1023]($8); //@line 32725
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 580; //@line 32728
   $52 = $ReallocAsyncCtx12 + 4 | 0; //@line 32729
   HEAP32[$52 >> 2] = $8; //@line 32730
   $53 = $ReallocAsyncCtx12 + 8 | 0; //@line 32731
   HEAP32[$53 >> 2] = $2; //@line 32732
   $54 = $ReallocAsyncCtx12 + 12 | 0; //@line 32733
   HEAP32[$54 >> 2] = $4; //@line 32734
   $55 = $ReallocAsyncCtx12 + 16 | 0; //@line 32735
   HEAP32[$55 >> 2] = $16; //@line 32736
   sp = STACKTOP; //@line 32737
   return;
  }
  ___async_unwind = 0; //@line 32740
  HEAP32[$ReallocAsyncCtx12 >> 2] = 580; //@line 32741
  $52 = $ReallocAsyncCtx12 + 4 | 0; //@line 32742
  HEAP32[$52 >> 2] = $8; //@line 32743
  $53 = $ReallocAsyncCtx12 + 8 | 0; //@line 32744
  HEAP32[$53 >> 2] = $2; //@line 32745
  $54 = $ReallocAsyncCtx12 + 12 | 0; //@line 32746
  HEAP32[$54 >> 2] = $4; //@line 32747
  $55 = $ReallocAsyncCtx12 + 16 | 0; //@line 32748
  HEAP32[$55 >> 2] = $16; //@line 32749
  sp = STACKTOP; //@line 32750
  return;
 }
 $30 = $4 + 1240 | 0; //@line 32753
 $31 = HEAP32[$30 >> 2] | 0; //@line 32754
 if (!$31) {
  $43 = HEAP32[213] | 0; //@line 32758
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 32759
  FUNCTION_TABLE_vii[$43 & 31]($28, $8); //@line 32760
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 579; //@line 32763
   $44 = $ReallocAsyncCtx11 + 4 | 0; //@line 32764
   HEAP32[$44 >> 2] = $8; //@line 32765
   $45 = $ReallocAsyncCtx11 + 8 | 0; //@line 32766
   HEAP32[$45 >> 2] = $2; //@line 32767
   $46 = $ReallocAsyncCtx11 + 12 | 0; //@line 32768
   HEAP32[$46 >> 2] = $4; //@line 32769
   $47 = $ReallocAsyncCtx11 + 16 | 0; //@line 32770
   HEAP32[$47 >> 2] = $27; //@line 32771
   $48 = $ReallocAsyncCtx11 + 20 | 0; //@line 32772
   HEAP32[$48 >> 2] = $30; //@line 32773
   $49 = $ReallocAsyncCtx11 + 24 | 0; //@line 32774
   HEAP32[$49 >> 2] = $16; //@line 32775
   sp = STACKTOP; //@line 32776
   return;
  }
  ___async_unwind = 0; //@line 32779
  HEAP32[$ReallocAsyncCtx11 >> 2] = 579; //@line 32780
  $44 = $ReallocAsyncCtx11 + 4 | 0; //@line 32781
  HEAP32[$44 >> 2] = $8; //@line 32782
  $45 = $ReallocAsyncCtx11 + 8 | 0; //@line 32783
  HEAP32[$45 >> 2] = $2; //@line 32784
  $46 = $ReallocAsyncCtx11 + 12 | 0; //@line 32785
  HEAP32[$46 >> 2] = $4; //@line 32786
  $47 = $ReallocAsyncCtx11 + 16 | 0; //@line 32787
  HEAP32[$47 >> 2] = $27; //@line 32788
  $48 = $ReallocAsyncCtx11 + 20 | 0; //@line 32789
  HEAP32[$48 >> 2] = $30; //@line 32790
  $49 = $ReallocAsyncCtx11 + 24 | 0; //@line 32791
  HEAP32[$49 >> 2] = $16; //@line 32792
  sp = STACKTOP; //@line 32793
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 32797
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 32798
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 32799
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 578; //@line 32802
   $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 32803
   HEAP32[$35 >> 2] = $8; //@line 32804
   $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 32805
   HEAP32[$36 >> 2] = $2; //@line 32806
   $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 32807
   HEAP32[$37 >> 2] = $4; //@line 32808
   $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 32809
   HEAP32[$38 >> 2] = $28; //@line 32810
   $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 32811
   HEAP32[$39 >> 2] = $30; //@line 32812
   $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 32813
   HEAP32[$40 >> 2] = $27; //@line 32814
   $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 32815
   HEAP32[$41 >> 2] = $16; //@line 32816
   sp = STACKTOP; //@line 32817
   return;
  }
  ___async_unwind = 0; //@line 32820
  HEAP32[$ReallocAsyncCtx10 >> 2] = 578; //@line 32821
  $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 32822
  HEAP32[$35 >> 2] = $8; //@line 32823
  $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 32824
  HEAP32[$36 >> 2] = $2; //@line 32825
  $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 32826
  HEAP32[$37 >> 2] = $4; //@line 32827
  $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 32828
  HEAP32[$38 >> 2] = $28; //@line 32829
  $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 32830
  HEAP32[$39 >> 2] = $30; //@line 32831
  $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 32832
  HEAP32[$40 >> 2] = $27; //@line 32833
  $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 32834
  HEAP32[$41 >> 2] = $16; //@line 32835
  sp = STACKTOP; //@line 32836
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 35574
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35576
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35578
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35580
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35582
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35584
 $$pre = HEAP32[$2 >> 2] | 0; //@line 35585
 if ($$pre | 0) {
  $13 = HEAP32[$$pre + 4 >> 2] | 0; //@line 35589
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 35590
  FUNCTION_TABLE_vii[$13 & 31]($10, $6); //@line 35591
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 316; //@line 35594
   $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 35595
   HEAP32[$14 >> 2] = $4; //@line 35596
   $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 35597
   HEAP32[$15 >> 2] = $6; //@line 35598
   $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 35599
   HEAP32[$16 >> 2] = $2; //@line 35600
   $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 35601
   HEAP32[$17 >> 2] = $8; //@line 35602
   sp = STACKTOP; //@line 35603
   return;
  }
  ___async_unwind = 0; //@line 35606
  HEAP32[$ReallocAsyncCtx2 >> 2] = 316; //@line 35607
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 35608
  HEAP32[$14 >> 2] = $4; //@line 35609
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 35610
  HEAP32[$15 >> 2] = $6; //@line 35611
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 35612
  HEAP32[$16 >> 2] = $2; //@line 35613
  $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 35614
  HEAP32[$17 >> 2] = $8; //@line 35615
  sp = STACKTOP; //@line 35616
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 35619
 $18 = $6 + 16 | 0; //@line 35620
 $19 = $6 + 28 | 0; //@line 35621
 $20 = HEAP32[$19 >> 2] | 0; //@line 35622
 if ($20 | 0) {
  $22 = $4 + 1896 | 0; //@line 35625
  if (($22 | 0) != ($18 | 0)) {
   $24 = $4 + 1908 | 0; //@line 35628
   $25 = HEAP32[$24 >> 2] | 0; //@line 35629
   if (!$25) {
    $36 = HEAP32[$20 + 4 >> 2] | 0; //@line 35633
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 35634
    FUNCTION_TABLE_vii[$36 & 31]($22, $18); //@line 35635
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 318; //@line 35638
     $37 = $ReallocAsyncCtx4 + 4 | 0; //@line 35639
     HEAP32[$37 >> 2] = $19; //@line 35640
     $38 = $ReallocAsyncCtx4 + 8 | 0; //@line 35641
     HEAP32[$38 >> 2] = $24; //@line 35642
     $39 = $ReallocAsyncCtx4 + 12 | 0; //@line 35643
     HEAP32[$39 >> 2] = $6; //@line 35644
     $40 = $ReallocAsyncCtx4 + 16 | 0; //@line 35645
     HEAP32[$40 >> 2] = $4; //@line 35646
     sp = STACKTOP; //@line 35647
     return;
    }
    ___async_unwind = 0; //@line 35650
    HEAP32[$ReallocAsyncCtx4 >> 2] = 318; //@line 35651
    $37 = $ReallocAsyncCtx4 + 4 | 0; //@line 35652
    HEAP32[$37 >> 2] = $19; //@line 35653
    $38 = $ReallocAsyncCtx4 + 8 | 0; //@line 35654
    HEAP32[$38 >> 2] = $24; //@line 35655
    $39 = $ReallocAsyncCtx4 + 12 | 0; //@line 35656
    HEAP32[$39 >> 2] = $6; //@line 35657
    $40 = $ReallocAsyncCtx4 + 16 | 0; //@line 35658
    HEAP32[$40 >> 2] = $4; //@line 35659
    sp = STACKTOP; //@line 35660
    return;
   } else {
    $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 35664
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 35665
    FUNCTION_TABLE_vi[$28 & 1023]($22); //@line 35666
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 317; //@line 35669
     $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 35670
     HEAP32[$29 >> 2] = $19; //@line 35671
     $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 35672
     HEAP32[$30 >> 2] = $24; //@line 35673
     $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 35674
     HEAP32[$31 >> 2] = $22; //@line 35675
     $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 35676
     HEAP32[$32 >> 2] = $18; //@line 35677
     $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 35678
     HEAP32[$33 >> 2] = $6; //@line 35679
     $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 35680
     HEAP32[$34 >> 2] = $4; //@line 35681
     sp = STACKTOP; //@line 35682
     return;
    }
    ___async_unwind = 0; //@line 35685
    HEAP32[$ReallocAsyncCtx3 >> 2] = 317; //@line 35686
    $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 35687
    HEAP32[$29 >> 2] = $19; //@line 35688
    $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 35689
    HEAP32[$30 >> 2] = $24; //@line 35690
    $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 35691
    HEAP32[$31 >> 2] = $22; //@line 35692
    $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 35693
    HEAP32[$32 >> 2] = $18; //@line 35694
    $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 35695
    HEAP32[$33 >> 2] = $6; //@line 35696
    $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 35697
    HEAP32[$34 >> 2] = $4; //@line 35698
    sp = STACKTOP; //@line 35699
    return;
   }
  }
 }
 $41 = $6 + 32 | 0; //@line 35704
 $42 = $6 + 44 | 0; //@line 35705
 $43 = HEAP32[$42 >> 2] | 0; //@line 35706
 if (!$43) {
  return;
 }
 $45 = $4 + 1912 | 0; //@line 35711
 if (($45 | 0) == ($41 | 0)) {
  return;
 }
 $47 = $4 + 1924 | 0; //@line 35716
 $48 = HEAP32[$47 >> 2] | 0; //@line 35717
 if (!$48) {
  $57 = HEAP32[$43 + 4 >> 2] | 0; //@line 35721
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 35722
  FUNCTION_TABLE_vii[$57 & 31]($45, $41); //@line 35723
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 320; //@line 35726
   $58 = $ReallocAsyncCtx6 + 4 | 0; //@line 35727
   HEAP32[$58 >> 2] = $42; //@line 35728
   $59 = $ReallocAsyncCtx6 + 8 | 0; //@line 35729
   HEAP32[$59 >> 2] = $47; //@line 35730
   sp = STACKTOP; //@line 35731
   return;
  }
  ___async_unwind = 0; //@line 35734
  HEAP32[$ReallocAsyncCtx6 >> 2] = 320; //@line 35735
  $58 = $ReallocAsyncCtx6 + 4 | 0; //@line 35736
  HEAP32[$58 >> 2] = $42; //@line 35737
  $59 = $ReallocAsyncCtx6 + 8 | 0; //@line 35738
  HEAP32[$59 >> 2] = $47; //@line 35739
  sp = STACKTOP; //@line 35740
  return;
 } else {
  $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 35744
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 35745
  FUNCTION_TABLE_vi[$51 & 1023]($45); //@line 35746
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 319; //@line 35749
   $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 35750
   HEAP32[$52 >> 2] = $42; //@line 35751
   $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 35752
   HEAP32[$53 >> 2] = $47; //@line 35753
   $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 35754
   HEAP32[$54 >> 2] = $45; //@line 35755
   $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 35756
   HEAP32[$55 >> 2] = $41; //@line 35757
   sp = STACKTOP; //@line 35758
   return;
  }
  ___async_unwind = 0; //@line 35761
  HEAP32[$ReallocAsyncCtx5 >> 2] = 319; //@line 35762
  $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 35763
  HEAP32[$52 >> 2] = $42; //@line 35764
  $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 35765
  HEAP32[$53 >> 2] = $47; //@line 35766
  $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 35767
  HEAP32[$54 >> 2] = $45; //@line 35768
  $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 35769
  HEAP32[$55 >> 2] = $41; //@line 35770
  sp = STACKTOP; //@line 35771
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_25($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $49 = 0, $6 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 18147
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18149
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18151
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18153
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18155
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18157
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18159
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18161
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18163
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18165
 $20 = HEAP8[$0 + 40 >> 0] | 0; //@line 18167
 $22 = HEAP16[$0 + 42 >> 1] | 0; //@line 18169
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 18171
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 18173
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 18175
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 18177
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 18179
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 18181
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 18183
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 18185
 HEAP32[$10 >> 2] = 0; //@line 18186
 $39 = $2 + 912 | 0; //@line 18187
 $40 = $2 + 928 | 0; //@line 18188
 $41 = $2 + 288 | 0; //@line 18189
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($41) | 0) + 10 >> 0] = 0; //@line 18192
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 20 >> 1] = $22; //@line 18195
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 22 >> 0] = $20; //@line 18198
 $49 = HEAP32[$2 + 364 >> 2] | 0; //@line 18200
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 24 >> 2] = $49; //@line 18203
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 9 >> 0] = 0; //@line 18206
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 8 >> 0] = 0; //@line 18209
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 11 >> 0] = 0; //@line 18212
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 12 >> 2] = 0; //@line 18215
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 16 >> 1] = 0; //@line 18218
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 18 >> 0] = 0; //@line 18221
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 28 >> 0] = 0; //@line 18224
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 32 >> 2] = 0; //@line 18227
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) >> 2] = 0; //@line 18229
 $69 = HEAP32[$2 >> 2] | 0; //@line 18230
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(100) | 0; //@line 18231
 __ZN7LoRaPHY18put_radio_to_sleepEv($69); //@line 18232
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 387; //@line 18235
  $70 = $ReallocAsyncCtx18 + 4 | 0; //@line 18236
  HEAP32[$70 >> 2] = $41; //@line 18237
  $71 = $ReallocAsyncCtx18 + 8 | 0; //@line 18238
  HEAP32[$71 >> 2] = $2; //@line 18239
  $72 = $ReallocAsyncCtx18 + 12 | 0; //@line 18240
  HEAP32[$72 >> 2] = $10; //@line 18241
  $73 = $ReallocAsyncCtx18 + 16 | 0; //@line 18242
  HEAP32[$73 >> 2] = $4; //@line 18243
  $74 = $ReallocAsyncCtx18 + 20 | 0; //@line 18244
  HEAP32[$74 >> 2] = $4; //@line 18245
  $75 = $ReallocAsyncCtx18 + 24 | 0; //@line 18246
  HEAP32[$75 >> 2] = $6; //@line 18247
  $76 = $ReallocAsyncCtx18 + 28 | 0; //@line 18248
  HEAP32[$76 >> 2] = $2; //@line 18249
  $77 = $ReallocAsyncCtx18 + 32 | 0; //@line 18250
  HEAP32[$77 >> 2] = $8; //@line 18251
  $78 = $ReallocAsyncCtx18 + 36 | 0; //@line 18252
  HEAP32[$78 >> 2] = $18; //@line 18253
  $79 = $ReallocAsyncCtx18 + 40 | 0; //@line 18254
  HEAP32[$79 >> 2] = $16; //@line 18255
  $80 = $ReallocAsyncCtx18 + 44 | 0; //@line 18256
  HEAP32[$80 >> 2] = $28; //@line 18257
  $81 = $ReallocAsyncCtx18 + 48 | 0; //@line 18258
  HEAP32[$81 >> 2] = $12; //@line 18259
  $82 = $ReallocAsyncCtx18 + 52 | 0; //@line 18260
  HEAP32[$82 >> 2] = $24; //@line 18261
  $83 = $ReallocAsyncCtx18 + 56 | 0; //@line 18262
  HEAP32[$83 >> 2] = $26; //@line 18263
  $84 = $ReallocAsyncCtx18 + 60 | 0; //@line 18264
  HEAP32[$84 >> 2] = $10; //@line 18265
  $85 = $ReallocAsyncCtx18 + 64 | 0; //@line 18266
  HEAP32[$85 >> 2] = $36; //@line 18267
  $86 = $ReallocAsyncCtx18 + 68 | 0; //@line 18268
  HEAP32[$86 >> 2] = $38; //@line 18269
  $87 = $ReallocAsyncCtx18 + 72 | 0; //@line 18270
  HEAP8[$87 >> 0] = $20; //@line 18271
  $88 = $ReallocAsyncCtx18 + 76 | 0; //@line 18272
  HEAP32[$88 >> 2] = $34; //@line 18273
  $89 = $ReallocAsyncCtx18 + 80 | 0; //@line 18274
  HEAP32[$89 >> 2] = $32; //@line 18275
  $90 = $ReallocAsyncCtx18 + 84 | 0; //@line 18276
  HEAP32[$90 >> 2] = $14; //@line 18277
  $91 = $ReallocAsyncCtx18 + 88 | 0; //@line 18278
  HEAP32[$91 >> 2] = $30; //@line 18279
  $92 = $ReallocAsyncCtx18 + 92 | 0; //@line 18280
  HEAP32[$92 >> 2] = $39; //@line 18281
  $93 = $ReallocAsyncCtx18 + 96 | 0; //@line 18282
  HEAP32[$93 >> 2] = $40; //@line 18283
  sp = STACKTOP; //@line 18284
  return;
 }
 ___async_unwind = 0; //@line 18287
 HEAP32[$ReallocAsyncCtx18 >> 2] = 387; //@line 18288
 $70 = $ReallocAsyncCtx18 + 4 | 0; //@line 18289
 HEAP32[$70 >> 2] = $41; //@line 18290
 $71 = $ReallocAsyncCtx18 + 8 | 0; //@line 18291
 HEAP32[$71 >> 2] = $2; //@line 18292
 $72 = $ReallocAsyncCtx18 + 12 | 0; //@line 18293
 HEAP32[$72 >> 2] = $10; //@line 18294
 $73 = $ReallocAsyncCtx18 + 16 | 0; //@line 18295
 HEAP32[$73 >> 2] = $4; //@line 18296
 $74 = $ReallocAsyncCtx18 + 20 | 0; //@line 18297
 HEAP32[$74 >> 2] = $4; //@line 18298
 $75 = $ReallocAsyncCtx18 + 24 | 0; //@line 18299
 HEAP32[$75 >> 2] = $6; //@line 18300
 $76 = $ReallocAsyncCtx18 + 28 | 0; //@line 18301
 HEAP32[$76 >> 2] = $2; //@line 18302
 $77 = $ReallocAsyncCtx18 + 32 | 0; //@line 18303
 HEAP32[$77 >> 2] = $8; //@line 18304
 $78 = $ReallocAsyncCtx18 + 36 | 0; //@line 18305
 HEAP32[$78 >> 2] = $18; //@line 18306
 $79 = $ReallocAsyncCtx18 + 40 | 0; //@line 18307
 HEAP32[$79 >> 2] = $16; //@line 18308
 $80 = $ReallocAsyncCtx18 + 44 | 0; //@line 18309
 HEAP32[$80 >> 2] = $28; //@line 18310
 $81 = $ReallocAsyncCtx18 + 48 | 0; //@line 18311
 HEAP32[$81 >> 2] = $12; //@line 18312
 $82 = $ReallocAsyncCtx18 + 52 | 0; //@line 18313
 HEAP32[$82 >> 2] = $24; //@line 18314
 $83 = $ReallocAsyncCtx18 + 56 | 0; //@line 18315
 HEAP32[$83 >> 2] = $26; //@line 18316
 $84 = $ReallocAsyncCtx18 + 60 | 0; //@line 18317
 HEAP32[$84 >> 2] = $10; //@line 18318
 $85 = $ReallocAsyncCtx18 + 64 | 0; //@line 18319
 HEAP32[$85 >> 2] = $36; //@line 18320
 $86 = $ReallocAsyncCtx18 + 68 | 0; //@line 18321
 HEAP32[$86 >> 2] = $38; //@line 18322
 $87 = $ReallocAsyncCtx18 + 72 | 0; //@line 18323
 HEAP8[$87 >> 0] = $20; //@line 18324
 $88 = $ReallocAsyncCtx18 + 76 | 0; //@line 18325
 HEAP32[$88 >> 2] = $34; //@line 18326
 $89 = $ReallocAsyncCtx18 + 80 | 0; //@line 18327
 HEAP32[$89 >> 2] = $32; //@line 18328
 $90 = $ReallocAsyncCtx18 + 84 | 0; //@line 18329
 HEAP32[$90 >> 2] = $14; //@line 18330
 $91 = $ReallocAsyncCtx18 + 88 | 0; //@line 18331
 HEAP32[$91 >> 2] = $30; //@line 18332
 $92 = $ReallocAsyncCtx18 + 92 | 0; //@line 18333
 HEAP32[$92 >> 2] = $39; //@line 18334
 $93 = $ReallocAsyncCtx18 + 96 | 0; //@line 18335
 HEAP32[$93 >> 2] = $40; //@line 18336
 sp = STACKTOP; //@line 18337
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_365($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 25150
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25152
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25154
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25156
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25158
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25160
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25162
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25164
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25166
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25168
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25170
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 25172
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 25174
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 25176
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 25178
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 25180
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 25182
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 25184
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 25186
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 25188
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 25190
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 25192
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 25194
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 25196
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 25198
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  $51 = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$24 >> 2] | 0) | 0; //@line 25204
  HEAP8[$10 >> 0] = $51; //@line 25205
  HEAP8[$40 >> 0] = $51; //@line 25206
  $52 = HEAP32[$24 >> 2] | 0; //@line 25207
  $55 = HEAP32[(HEAP32[$52 >> 2] | 0) + 56 >> 2] | 0; //@line 25210
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(100) | 0; //@line 25211
  $56 = FUNCTION_TABLE_iiiiii[$55 & 7]($52, $46, $34, $6, $48) | 0; //@line 25212
  if (!___async) {
   HEAP8[___async_retval >> 0] = $56 & 1; //@line 25217
   ___async_unwind = 0; //@line 25218
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 487; //@line 25220
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 25222
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 25224
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 25226
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 25228
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 25230
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 25232
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 25234
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 25236
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 25238
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 25240
  HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 25242
  HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 25244
  HEAP32[$ReallocAsyncCtx2 + 52 >> 2] = $26; //@line 25246
  HEAP32[$ReallocAsyncCtx2 + 56 >> 2] = $28; //@line 25248
  HEAP32[$ReallocAsyncCtx2 + 60 >> 2] = $30; //@line 25250
  HEAP32[$ReallocAsyncCtx2 + 64 >> 2] = $32; //@line 25252
  HEAP32[$ReallocAsyncCtx2 + 68 >> 2] = $34; //@line 25254
  HEAP32[$ReallocAsyncCtx2 + 72 >> 2] = $36; //@line 25256
  HEAP32[$ReallocAsyncCtx2 + 76 >> 2] = $38; //@line 25258
  HEAP32[$ReallocAsyncCtx2 + 80 >> 2] = $40; //@line 25260
  HEAP32[$ReallocAsyncCtx2 + 84 >> 2] = $42; //@line 25262
  HEAP32[$ReallocAsyncCtx2 + 88 >> 2] = $44; //@line 25264
  HEAP32[$ReallocAsyncCtx2 + 92 >> 2] = $46; //@line 25266
  HEAP32[$ReallocAsyncCtx2 + 96 >> 2] = $48; //@line 25268
  sp = STACKTOP; //@line 25269
  return;
 }
 _printf(13253, $36) | 0; //@line 25272
 $85 = HEAP8[$40 >> 0] | 0; //@line 25276
 HEAP32[$42 >> 2] = HEAPU8[$34 >> 0]; //@line 25277
 HEAP32[$42 + 4 >> 2] = $85; //@line 25279
 _printf(13266, $42) | 0; //@line 25280
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(72) | 0; //@line 25281
 _putchar(10) | 0; //@line 25282
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 488; //@line 25285
  $86 = $ReallocAsyncCtx8 + 4 | 0; //@line 25286
  HEAP32[$86 >> 2] = $2; //@line 25287
  $87 = $ReallocAsyncCtx8 + 8 | 0; //@line 25288
  HEAP32[$87 >> 2] = $4; //@line 25289
  $88 = $ReallocAsyncCtx8 + 12 | 0; //@line 25290
  HEAP32[$88 >> 2] = $6; //@line 25291
  $89 = $ReallocAsyncCtx8 + 16 | 0; //@line 25292
  HEAP32[$89 >> 2] = $8; //@line 25293
  $90 = $ReallocAsyncCtx8 + 20 | 0; //@line 25294
  HEAP32[$90 >> 2] = $10; //@line 25295
  $91 = $ReallocAsyncCtx8 + 24 | 0; //@line 25296
  HEAP32[$91 >> 2] = $12; //@line 25297
  $92 = $ReallocAsyncCtx8 + 28 | 0; //@line 25298
  HEAP32[$92 >> 2] = $14; //@line 25299
  $93 = $ReallocAsyncCtx8 + 32 | 0; //@line 25300
  HEAP32[$93 >> 2] = $16; //@line 25301
  $94 = $ReallocAsyncCtx8 + 36 | 0; //@line 25302
  HEAP32[$94 >> 2] = $18; //@line 25303
  $95 = $ReallocAsyncCtx8 + 40 | 0; //@line 25304
  HEAP32[$95 >> 2] = $24; //@line 25305
  $96 = $ReallocAsyncCtx8 + 44 | 0; //@line 25306
  HEAP32[$96 >> 2] = $20; //@line 25307
  $97 = $ReallocAsyncCtx8 + 48 | 0; //@line 25308
  HEAP32[$97 >> 2] = $22; //@line 25309
  $98 = $ReallocAsyncCtx8 + 52 | 0; //@line 25310
  HEAP32[$98 >> 2] = $34; //@line 25311
  $99 = $ReallocAsyncCtx8 + 56 | 0; //@line 25312
  HEAP32[$99 >> 2] = $26; //@line 25313
  $100 = $ReallocAsyncCtx8 + 60 | 0; //@line 25314
  HEAP32[$100 >> 2] = $28; //@line 25315
  $101 = $ReallocAsyncCtx8 + 64 | 0; //@line 25316
  HEAP32[$101 >> 2] = $30; //@line 25317
  $102 = $ReallocAsyncCtx8 + 68 | 0; //@line 25318
  HEAP32[$102 >> 2] = $32; //@line 25319
  sp = STACKTOP; //@line 25320
  return;
 }
 ___async_unwind = 0; //@line 25323
 HEAP32[$ReallocAsyncCtx8 >> 2] = 488; //@line 25324
 $86 = $ReallocAsyncCtx8 + 4 | 0; //@line 25325
 HEAP32[$86 >> 2] = $2; //@line 25326
 $87 = $ReallocAsyncCtx8 + 8 | 0; //@line 25327
 HEAP32[$87 >> 2] = $4; //@line 25328
 $88 = $ReallocAsyncCtx8 + 12 | 0; //@line 25329
 HEAP32[$88 >> 2] = $6; //@line 25330
 $89 = $ReallocAsyncCtx8 + 16 | 0; //@line 25331
 HEAP32[$89 >> 2] = $8; //@line 25332
 $90 = $ReallocAsyncCtx8 + 20 | 0; //@line 25333
 HEAP32[$90 >> 2] = $10; //@line 25334
 $91 = $ReallocAsyncCtx8 + 24 | 0; //@line 25335
 HEAP32[$91 >> 2] = $12; //@line 25336
 $92 = $ReallocAsyncCtx8 + 28 | 0; //@line 25337
 HEAP32[$92 >> 2] = $14; //@line 25338
 $93 = $ReallocAsyncCtx8 + 32 | 0; //@line 25339
 HEAP32[$93 >> 2] = $16; //@line 25340
 $94 = $ReallocAsyncCtx8 + 36 | 0; //@line 25341
 HEAP32[$94 >> 2] = $18; //@line 25342
 $95 = $ReallocAsyncCtx8 + 40 | 0; //@line 25343
 HEAP32[$95 >> 2] = $24; //@line 25344
 $96 = $ReallocAsyncCtx8 + 44 | 0; //@line 25345
 HEAP32[$96 >> 2] = $20; //@line 25346
 $97 = $ReallocAsyncCtx8 + 48 | 0; //@line 25347
 HEAP32[$97 >> 2] = $22; //@line 25348
 $98 = $ReallocAsyncCtx8 + 52 | 0; //@line 25349
 HEAP32[$98 >> 2] = $34; //@line 25350
 $99 = $ReallocAsyncCtx8 + 56 | 0; //@line 25351
 HEAP32[$99 >> 2] = $26; //@line 25352
 $100 = $ReallocAsyncCtx8 + 60 | 0; //@line 25353
 HEAP32[$100 >> 2] = $28; //@line 25354
 $101 = $ReallocAsyncCtx8 + 64 | 0; //@line 25355
 HEAP32[$101 >> 2] = $30; //@line 25356
 $102 = $ReallocAsyncCtx8 + 68 | 0; //@line 25357
 HEAP32[$102 >> 2] = $32; //@line 25358
 sp = STACKTOP; //@line 25359
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 24930
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24932
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24934
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24936
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24938
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24940
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24942
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24944
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24946
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24948
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24950
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24952
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 24954
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 24956
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 24958
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 24960
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 24962
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 24964
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 24966
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 24968
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 24970
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 24972
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 24974
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 24976
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 24978
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  $51 = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$24 >> 2] | 0) | 0; //@line 24984
  HEAP8[$10 >> 0] = $51; //@line 24985
  HEAP8[$40 >> 0] = $51; //@line 24986
  $52 = HEAP32[$24 >> 2] | 0; //@line 24987
  $55 = HEAP32[(HEAP32[$52 >> 2] | 0) + 56 >> 2] | 0; //@line 24990
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(100) | 0; //@line 24991
  $56 = FUNCTION_TABLE_iiiiii[$55 & 7]($52, $46, $34, $6, $48) | 0; //@line 24992
  if (!___async) {
   HEAP8[___async_retval >> 0] = $56 & 1; //@line 24997
   ___async_unwind = 0; //@line 24998
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 487; //@line 25000
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 25002
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 25004
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 25006
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 25008
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 25010
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 25012
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 25014
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 25016
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 25018
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 25020
  HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 25022
  HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 25024
  HEAP32[$ReallocAsyncCtx2 + 52 >> 2] = $26; //@line 25026
  HEAP32[$ReallocAsyncCtx2 + 56 >> 2] = $28; //@line 25028
  HEAP32[$ReallocAsyncCtx2 + 60 >> 2] = $30; //@line 25030
  HEAP32[$ReallocAsyncCtx2 + 64 >> 2] = $32; //@line 25032
  HEAP32[$ReallocAsyncCtx2 + 68 >> 2] = $34; //@line 25034
  HEAP32[$ReallocAsyncCtx2 + 72 >> 2] = $36; //@line 25036
  HEAP32[$ReallocAsyncCtx2 + 76 >> 2] = $38; //@line 25038
  HEAP32[$ReallocAsyncCtx2 + 80 >> 2] = $40; //@line 25040
  HEAP32[$ReallocAsyncCtx2 + 84 >> 2] = $42; //@line 25042
  HEAP32[$ReallocAsyncCtx2 + 88 >> 2] = $44; //@line 25044
  HEAP32[$ReallocAsyncCtx2 + 92 >> 2] = $46; //@line 25046
  HEAP32[$ReallocAsyncCtx2 + 96 >> 2] = $48; //@line 25048
  sp = STACKTOP; //@line 25049
  return;
 }
 _printf(13253, $36) | 0; //@line 25052
 $85 = HEAP8[$40 >> 0] | 0; //@line 25056
 HEAP32[$42 >> 2] = HEAPU8[$34 >> 0]; //@line 25057
 HEAP32[$42 + 4 >> 2] = $85; //@line 25059
 _printf(13266, $42) | 0; //@line 25060
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(72) | 0; //@line 25061
 _putchar(10) | 0; //@line 25062
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 488; //@line 25065
  $86 = $ReallocAsyncCtx8 + 4 | 0; //@line 25066
  HEAP32[$86 >> 2] = $2; //@line 25067
  $87 = $ReallocAsyncCtx8 + 8 | 0; //@line 25068
  HEAP32[$87 >> 2] = $4; //@line 25069
  $88 = $ReallocAsyncCtx8 + 12 | 0; //@line 25070
  HEAP32[$88 >> 2] = $6; //@line 25071
  $89 = $ReallocAsyncCtx8 + 16 | 0; //@line 25072
  HEAP32[$89 >> 2] = $8; //@line 25073
  $90 = $ReallocAsyncCtx8 + 20 | 0; //@line 25074
  HEAP32[$90 >> 2] = $10; //@line 25075
  $91 = $ReallocAsyncCtx8 + 24 | 0; //@line 25076
  HEAP32[$91 >> 2] = $12; //@line 25077
  $92 = $ReallocAsyncCtx8 + 28 | 0; //@line 25078
  HEAP32[$92 >> 2] = $14; //@line 25079
  $93 = $ReallocAsyncCtx8 + 32 | 0; //@line 25080
  HEAP32[$93 >> 2] = $16; //@line 25081
  $94 = $ReallocAsyncCtx8 + 36 | 0; //@line 25082
  HEAP32[$94 >> 2] = $18; //@line 25083
  $95 = $ReallocAsyncCtx8 + 40 | 0; //@line 25084
  HEAP32[$95 >> 2] = $24; //@line 25085
  $96 = $ReallocAsyncCtx8 + 44 | 0; //@line 25086
  HEAP32[$96 >> 2] = $20; //@line 25087
  $97 = $ReallocAsyncCtx8 + 48 | 0; //@line 25088
  HEAP32[$97 >> 2] = $22; //@line 25089
  $98 = $ReallocAsyncCtx8 + 52 | 0; //@line 25090
  HEAP32[$98 >> 2] = $34; //@line 25091
  $99 = $ReallocAsyncCtx8 + 56 | 0; //@line 25092
  HEAP32[$99 >> 2] = $26; //@line 25093
  $100 = $ReallocAsyncCtx8 + 60 | 0; //@line 25094
  HEAP32[$100 >> 2] = $28; //@line 25095
  $101 = $ReallocAsyncCtx8 + 64 | 0; //@line 25096
  HEAP32[$101 >> 2] = $30; //@line 25097
  $102 = $ReallocAsyncCtx8 + 68 | 0; //@line 25098
  HEAP32[$102 >> 2] = $32; //@line 25099
  sp = STACKTOP; //@line 25100
  return;
 }
 ___async_unwind = 0; //@line 25103
 HEAP32[$ReallocAsyncCtx8 >> 2] = 488; //@line 25104
 $86 = $ReallocAsyncCtx8 + 4 | 0; //@line 25105
 HEAP32[$86 >> 2] = $2; //@line 25106
 $87 = $ReallocAsyncCtx8 + 8 | 0; //@line 25107
 HEAP32[$87 >> 2] = $4; //@line 25108
 $88 = $ReallocAsyncCtx8 + 12 | 0; //@line 25109
 HEAP32[$88 >> 2] = $6; //@line 25110
 $89 = $ReallocAsyncCtx8 + 16 | 0; //@line 25111
 HEAP32[$89 >> 2] = $8; //@line 25112
 $90 = $ReallocAsyncCtx8 + 20 | 0; //@line 25113
 HEAP32[$90 >> 2] = $10; //@line 25114
 $91 = $ReallocAsyncCtx8 + 24 | 0; //@line 25115
 HEAP32[$91 >> 2] = $12; //@line 25116
 $92 = $ReallocAsyncCtx8 + 28 | 0; //@line 25117
 HEAP32[$92 >> 2] = $14; //@line 25118
 $93 = $ReallocAsyncCtx8 + 32 | 0; //@line 25119
 HEAP32[$93 >> 2] = $16; //@line 25120
 $94 = $ReallocAsyncCtx8 + 36 | 0; //@line 25121
 HEAP32[$94 >> 2] = $18; //@line 25122
 $95 = $ReallocAsyncCtx8 + 40 | 0; //@line 25123
 HEAP32[$95 >> 2] = $24; //@line 25124
 $96 = $ReallocAsyncCtx8 + 44 | 0; //@line 25125
 HEAP32[$96 >> 2] = $20; //@line 25126
 $97 = $ReallocAsyncCtx8 + 48 | 0; //@line 25127
 HEAP32[$97 >> 2] = $22; //@line 25128
 $98 = $ReallocAsyncCtx8 + 52 | 0; //@line 25129
 HEAP32[$98 >> 2] = $34; //@line 25130
 $99 = $ReallocAsyncCtx8 + 56 | 0; //@line 25131
 HEAP32[$99 >> 2] = $26; //@line 25132
 $100 = $ReallocAsyncCtx8 + 60 | 0; //@line 25133
 HEAP32[$100 >> 2] = $28; //@line 25134
 $101 = $ReallocAsyncCtx8 + 64 | 0; //@line 25135
 HEAP32[$101 >> 2] = $30; //@line 25136
 $102 = $ReallocAsyncCtx8 + 68 | 0; //@line 25137
 HEAP32[$102 >> 2] = $32; //@line 25138
 sp = STACKTOP; //@line 25139
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$05$i = 0, $$06$i = 0, $20 = 0, $42 = 0, $54 = 0, $57 = 0, $62 = 0, $63 = 0, $77 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 15857
 STACKTOP = STACKTOP + 32 | 0; //@line 15858
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15858
 $vararg_buffer5 = sp + 24 | 0; //@line 15859
 $vararg_buffer3 = sp + 16 | 0; //@line 15860
 $vararg_buffer1 = sp + 8 | 0; //@line 15861
 $vararg_buffer = sp; //@line 15862
 _printf(12967, $vararg_buffer) | 0; //@line 15863
 _printf(13367, $vararg_buffer1) | 0; //@line 15864
 $AsyncCtx12 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15865
 _putchar(10) | 0; //@line 15866
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 480; //@line 15869
  HEAP32[$AsyncCtx12 + 4 >> 2] = $0; //@line 15871
  HEAP32[$AsyncCtx12 + 8 >> 2] = $vararg_buffer1; //@line 15873
  HEAP32[$AsyncCtx12 + 12 >> 2] = $vararg_buffer; //@line 15875
  HEAP32[$AsyncCtx12 + 16 >> 2] = $vararg_buffer3; //@line 15877
  HEAP32[$AsyncCtx12 + 20 >> 2] = $vararg_buffer3; //@line 15879
  HEAP32[$AsyncCtx12 + 24 >> 2] = $vararg_buffer5; //@line 15881
  HEAP32[$AsyncCtx12 + 28 >> 2] = $vararg_buffer5; //@line 15883
  sp = STACKTOP; //@line 15884
  STACKTOP = sp; //@line 15885
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 15887
 $9 = HEAP32[$0 + 356 >> 2] | 0; //@line 15889
 $AsyncCtx21 = _emscripten_alloc_async_context(40, sp) | 0; //@line 15891
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($9, $0 + 1016 | 0); //@line 15892
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 481; //@line 15895
  HEAP32[$AsyncCtx21 + 4 >> 2] = $0; //@line 15897
  HEAP32[$AsyncCtx21 + 8 >> 2] = $vararg_buffer1; //@line 15899
  HEAP32[$AsyncCtx21 + 12 >> 2] = $vararg_buffer; //@line 15901
  HEAP32[$AsyncCtx21 + 16 >> 2] = $vararg_buffer1; //@line 15903
  HEAP32[$AsyncCtx21 + 20 >> 2] = $vararg_buffer; //@line 15905
  HEAP32[$AsyncCtx21 + 24 >> 2] = $vararg_buffer3; //@line 15907
  HEAP32[$AsyncCtx21 + 28 >> 2] = $vararg_buffer3; //@line 15909
  HEAP32[$AsyncCtx21 + 32 >> 2] = $vararg_buffer5; //@line 15911
  HEAP32[$AsyncCtx21 + 36 >> 2] = $vararg_buffer5; //@line 15913
  sp = STACKTOP; //@line 15914
  STACKTOP = sp; //@line 15915
  return;
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 15917
 $20 = $0 + 968 | 0; //@line 15918
 HEAP32[$20 >> 2] = HEAP32[$20 >> 2] & -17; //@line 15921
 if (HEAP8[$0 + 944 >> 0] & 8) {
  if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) >> 2] | 0)) {
   HEAP8[$0 + 372 >> 0] = 0; //@line 15934
   HEAP32[$0 + 956 >> 2] = 0; //@line 15936
   HEAP32[$0 + 960 >> 2] = 0; //@line 15938
   HEAP32[$0 + 964 >> 2] = 0; //@line 15940
   HEAP8[$0 + 380 >> 0] = 0; //@line 15942
   HEAP8[$0 + 894 >> 0] = 1; //@line 15944
   HEAP8[$0 + 895 >> 0] = 1; //@line 15946
   HEAP8[$0 + 377 >> 0] = 0; //@line 15948
   HEAP8[$0 + 1152 >> 0] = 0; //@line 15950
   HEAP16[$0 + 1154 >> 1] = 1; //@line 15952
   $42 = $0 + 4 | 0; //@line 15953
   __ZN14LoRaMacCommand20clear_command_bufferEv($42); //@line 15954
   __ZN14LoRaMacCommand19clear_repeat_bufferEv($42); //@line 15955
   __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($42); //@line 15956
   HEAP8[$0 + 371 >> 0] = 1; //@line 15958
   __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $0 + 360 | 0, 0); //@line 15960
   HEAP8[$0 + 373 >> 0] = 0; //@line 15962
   HEAP8[$0 + 374 >> 0] = 0; //@line 15964
   $$05$i = HEAP32[$0 + 1208 >> 2] | 0; //@line 15966
   if ($$05$i | 0) {
    $$06$i = $$05$i; //@line 15969
    do {
     HEAP32[$$06$i + 36 >> 2] = 0; //@line 15972
     $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 15974
    } while (($$06$i | 0) != 0);
   }
   HEAP8[$0 + 378 >> 0] = 0; //@line 15984
   HEAP8[$0 + 379 >> 0] = 0; //@line 15986
   $54 = HEAP32[$0 >> 2] | 0; //@line 15987
   $57 = HEAP32[(HEAP32[$54 >> 2] | 0) + 52 >> 2] | 0; //@line 15990
   $62 = (HEAPU8[$0 + 897 >> 0] | 0) + 1 & 255; //@line 15995
   $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 15996
   $63 = FUNCTION_TABLE_iii[$57 & 31]($54, $62) | 0; //@line 15997
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 482; //@line 16000
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16002
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 16004
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 16006
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 16008
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 16010
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer3; //@line 16012
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer3; //@line 16014
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer5; //@line 16016
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer5; //@line 16018
    sp = STACKTOP; //@line 16019
    STACKTOP = sp; //@line 16020
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 16022
   HEAP8[$0 + 1097 >> 0] = $63; //@line 16024
   HEAP8[$vararg_buffer1 >> 0] = 0; //@line 16025
   HEAP8[$vararg_buffer >> 0] = HEAP8[$0 + 1156 >> 0] << 7; //@line 16029
   $AsyncCtx15 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16030
   $77 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $vararg_buffer1, $vararg_buffer, 0, 0, 0) | 0; //@line 16031
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 483; //@line 16034
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 16036
    HEAP32[$AsyncCtx15 + 8 >> 2] = $vararg_buffer3; //@line 16038
    HEAP32[$AsyncCtx15 + 12 >> 2] = $vararg_buffer3; //@line 16040
    HEAP32[$AsyncCtx15 + 16 >> 2] = $vararg_buffer5; //@line 16042
    HEAP32[$AsyncCtx15 + 20 >> 2] = $vararg_buffer5; //@line 16044
    HEAP32[$AsyncCtx15 + 24 >> 2] = $vararg_buffer; //@line 16046
    HEAP32[$AsyncCtx15 + 28 >> 2] = $vararg_buffer1; //@line 16048
    sp = STACKTOP; //@line 16049
    STACKTOP = sp; //@line 16050
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 16052
   if ($77 | 0) {
    _printf(13393, $vararg_buffer3) | 0; //@line 16055
    HEAP32[$vararg_buffer5 >> 2] = $77; //@line 16056
    _printf(13406, $vararg_buffer5) | 0; //@line 16057
    $AsyncCtx8 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16058
    _putchar(10) | 0; //@line 16059
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 485; //@line 16062
     HEAP32[$AsyncCtx8 + 4 >> 2] = $vararg_buffer; //@line 16064
     HEAP32[$AsyncCtx8 + 8 >> 2] = $vararg_buffer1; //@line 16066
     sp = STACKTOP; //@line 16067
     STACKTOP = sp; //@line 16068
     return;
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 16070
    STACKTOP = sp; //@line 16071
    return;
   }
  }
 }
 $AsyncCtx18 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16075
 __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 16076
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 484; //@line 16079
  HEAP32[$AsyncCtx18 + 4 >> 2] = $vararg_buffer; //@line 16081
  HEAP32[$AsyncCtx18 + 8 >> 2] = $vararg_buffer1; //@line 16083
  sp = STACKTOP; //@line 16084
  STACKTOP = sp; //@line 16085
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 16087
 STACKTOP = sp; //@line 16088
 return;
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 var $$ = 0, $$sink = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $82 = 0, $AsyncCtx = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 521
 STACKTOP = STACKTOP + 64 | 0; //@line 522
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 522
 $vararg_buffer14 = sp + 56 | 0; //@line 523
 $vararg_buffer12 = sp + 48 | 0; //@line 524
 $vararg_buffer10 = sp + 40 | 0; //@line 525
 $vararg_buffer8 = sp + 32 | 0; //@line 526
 $vararg_buffer5 = sp + 24 | 0; //@line 527
 $vararg_buffer3 = sp + 16 | 0; //@line 528
 $vararg_buffer1 = sp + 8 | 0; //@line 529
 $14 = $8 & 1; //@line 531
 $15 = $9 & 1; //@line 532
 $16 = $10 & 1; //@line 533
 $17 = $12 & 1; //@line 534
 $19 = $0 + 689 | 0; //@line 536
 HEAP8[$19 >> 0] = $1; //@line 537
 _printf(10904, sp) | 0; //@line 538
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$19 >> 0]; //@line 541
 _printf(11079, $vararg_buffer1) | 0; //@line 542
 $AsyncCtx26 = _emscripten_alloc_async_context(92, sp) | 0; //@line 543
 _putchar(10) | 0; //@line 544
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 63; //@line 547
  HEAP32[$AsyncCtx26 + 4 >> 2] = $vararg_buffer3; //@line 549
  HEAP32[$AsyncCtx26 + 8 >> 2] = $vararg_buffer3; //@line 551
  HEAP8[$AsyncCtx26 + 12 >> 0] = $2; //@line 553
  HEAP32[$AsyncCtx26 + 16 >> 2] = $vararg_buffer5; //@line 555
  HEAP32[$AsyncCtx26 + 20 >> 2] = $vararg_buffer5; //@line 557
  HEAP32[$AsyncCtx26 + 24 >> 2] = $1; //@line 559
  HEAP32[$AsyncCtx26 + 28 >> 2] = $0; //@line 561
  HEAP32[$AsyncCtx26 + 32 >> 2] = $3; //@line 563
  HEAP32[$AsyncCtx26 + 36 >> 2] = $4; //@line 565
  HEAP32[$AsyncCtx26 + 40 >> 2] = $5; //@line 567
  HEAP16[$AsyncCtx26 + 44 >> 1] = $7; //@line 569
  HEAP8[$AsyncCtx26 + 46 >> 0] = $14; //@line 571
  HEAP8[$AsyncCtx26 + 47 >> 0] = $15; //@line 573
  HEAP8[$AsyncCtx26 + 48 >> 0] = $17; //@line 575
  HEAP32[$AsyncCtx26 + 52 >> 2] = $13; //@line 577
  HEAP32[$AsyncCtx26 + 56 >> 2] = $vararg_buffer8; //@line 579
  HEAP32[$AsyncCtx26 + 60 >> 2] = $vararg_buffer8; //@line 581
  HEAP32[$AsyncCtx26 + 64 >> 2] = $vararg_buffer10; //@line 583
  HEAP32[$AsyncCtx26 + 68 >> 2] = $vararg_buffer10; //@line 585
  HEAP8[$AsyncCtx26 + 72 >> 0] = $6; //@line 587
  HEAP8[$AsyncCtx26 + 73 >> 0] = $16; //@line 589
  HEAP8[$AsyncCtx26 + 74 >> 0] = $11; //@line 591
  HEAP32[$AsyncCtx26 + 76 >> 2] = $vararg_buffer12; //@line 593
  HEAP32[$AsyncCtx26 + 80 >> 2] = $vararg_buffer12; //@line 595
  HEAP32[$AsyncCtx26 + 84 >> 2] = $vararg_buffer14; //@line 597
  HEAP32[$AsyncCtx26 + 88 >> 2] = $vararg_buffer14; //@line 599
  sp = STACKTOP; //@line 600
  STACKTOP = sp; //@line 601
  return;
 }
 _emscripten_free_async_context($AsyncCtx26 | 0); //@line 603
 _printf(10904, $vararg_buffer3) | 0; //@line 604
 HEAP32[$vararg_buffer5 >> 2] = $2 << 24 >> 24; //@line 606
 _printf(11473, $vararg_buffer5) | 0; //@line 607
 $AsyncCtx22 = _emscripten_alloc_async_context(76, sp) | 0; //@line 608
 _putchar(10) | 0; //@line 609
 if (___async) {
  HEAP32[$AsyncCtx22 >> 2] = 64; //@line 612
  HEAP32[$AsyncCtx22 + 4 >> 2] = $1; //@line 614
  HEAP32[$AsyncCtx22 + 8 >> 2] = $0; //@line 616
  HEAP8[$AsyncCtx22 + 12 >> 0] = $2; //@line 618
  HEAP32[$AsyncCtx22 + 16 >> 2] = $3; //@line 620
  HEAP32[$AsyncCtx22 + 20 >> 2] = $4; //@line 622
  HEAP32[$AsyncCtx22 + 24 >> 2] = $5; //@line 624
  HEAP16[$AsyncCtx22 + 28 >> 1] = $7; //@line 626
  HEAP8[$AsyncCtx22 + 30 >> 0] = $14; //@line 628
  HEAP8[$AsyncCtx22 + 31 >> 0] = $15; //@line 630
  HEAP8[$AsyncCtx22 + 32 >> 0] = $17; //@line 632
  HEAP32[$AsyncCtx22 + 36 >> 2] = $13; //@line 634
  HEAP32[$AsyncCtx22 + 40 >> 2] = $vararg_buffer8; //@line 636
  HEAP32[$AsyncCtx22 + 44 >> 2] = $vararg_buffer8; //@line 638
  HEAP32[$AsyncCtx22 + 48 >> 2] = $vararg_buffer10; //@line 640
  HEAP32[$AsyncCtx22 + 52 >> 2] = $vararg_buffer10; //@line 642
  HEAP8[$AsyncCtx22 + 56 >> 0] = $6; //@line 644
  HEAP8[$AsyncCtx22 + 57 >> 0] = $16; //@line 646
  HEAP8[$AsyncCtx22 + 58 >> 0] = $11; //@line 648
  HEAP32[$AsyncCtx22 + 60 >> 2] = $vararg_buffer12; //@line 650
  HEAP32[$AsyncCtx22 + 64 >> 2] = $vararg_buffer12; //@line 652
  HEAP32[$AsyncCtx22 + 68 >> 2] = $vararg_buffer14; //@line 654
  HEAP32[$AsyncCtx22 + 72 >> 2] = $vararg_buffer14; //@line 656
  sp = STACKTOP; //@line 657
  STACKTOP = sp; //@line 658
  return;
 }
 _emscripten_free_async_context($AsyncCtx22 | 0); //@line 660
 switch ($1 | 0) {
 case 0:
  {
   HEAP8[$0 + 696 >> 0] = $2; //@line 664
   HEAP32[$0 + 700 >> 2] = $3; //@line 666
   HEAP32[$0 + 704 >> 2] = $4; //@line 668
   HEAP32[$0 + 712 >> 2] = $5; //@line 670
   HEAP16[$0 + 716 >> 1] = $7; //@line 672
   HEAP8[$0 + 718 >> 0] = $14; //@line 674
   HEAP8[$0 + 720 >> 0] = $15; //@line 676
   HEAP8[$0 + 721 >> 0] = $17; //@line 678
   HEAP32[$0 + 724 >> 2] = $13; //@line 680
   _printf(10904, $vararg_buffer8) | 0; //@line 681
   _printf(11500, $vararg_buffer10) | 0; //@line 682
   $AsyncCtx18 = _emscripten_alloc_async_context(4, sp) | 0; //@line 683
   _putchar(10) | 0; //@line 684
   if (___async) {
    HEAP32[$AsyncCtx18 >> 2] = 65; //@line 687
    sp = STACKTOP; //@line 688
    STACKTOP = sp; //@line 689
    return;
   }
   _emscripten_free_async_context($AsyncCtx18 | 0); //@line 691
   STACKTOP = sp; //@line 692
   return;
  }
 case 1:
  {
   HEAP8[$0 + 748 >> 0] = $2; //@line 697
   if ($4 >>> 0 > 2) {
    while (1) {}
   }
   $82 = $4 + 7 | 0; //@line 703
   HEAP32[$0 + 752 >> 2] = $82; //@line 705
   HEAP32[$0 + 756 >> 2] = $5; //@line 707
   HEAP8[$0 + 761 >> 0] = $6; //@line 709
   HEAP16[$0 + 762 >> 1] = $7; //@line 711
   HEAP8[$0 + 764 >> 0] = $14; //@line 713
   HEAP8[$0 + 767 >> 0] = $16; //@line 715
   HEAP8[$0 + 768 >> 0] = $11; //@line 717
   HEAP8[$0 + 766 >> 0] = $15; //@line 719
   HEAP8[$0 + 769 >> 0] = $17; //@line 721
   HEAP32[$0 + 772 >> 2] = $13; //@line 723
   $$ = $5 >>> 0 > 6 ? $5 : 6; //@line 725
   if (($4 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 13; //@line 733
   } else {
    if (($82 | 0) == 8 & $$ >>> 0 > 11) {
     label = 13; //@line 739
    } else {
     $$sink = 0; //@line 741
    }
   }
   if ((label | 0) == 13) {
    $$sink = 1; //@line 745
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 748
   _printf(10904, $vararg_buffer12) | 0; //@line 749
   _printf(11518, $vararg_buffer14) | 0; //@line 750
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 751
   _putchar(10) | 0; //@line 752
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 66; //@line 755
    sp = STACKTOP; //@line 756
    STACKTOP = sp; //@line 757
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 759
   STACKTOP = sp; //@line 760
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 764
   return;
  }
 }
}
function _mbedtls_cipher_update($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0102 = 0, $$0103 = 0, $$0105 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre$phi107Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $12 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $36 = 0, $37 = 0, $40 = 0, $41 = 0, $45 = 0, $49 = 0, $50 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $80 = 0, $85 = 0, $94 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2121
 if (!$0) {
  $$1 = -24832; //@line 2124
  return $$1 | 0; //@line 2125
 }
 $6 = HEAP32[$0 >> 2] | 0; //@line 2127
 if (($4 | 0) == 0 | ($6 | 0) == 0) {
  $$1 = -24832; //@line 2132
  return $$1 | 0; //@line 2133
 }
 HEAP32[$4 >> 2] = 0; //@line 2135
 $10 = HEAP32[$6 + 24 >> 2] | 0; //@line 2137
 $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 2139
 switch ($12 | 0) {
 case 1:
  {
   if (($10 | 0) != ($2 | 0)) {
    $$1 = -25216; //@line 2144
    return $$1 | 0; //@line 2145
   }
   HEAP32[$4 >> 2] = $2; //@line 2147
   $17 = HEAP32[(HEAP32[$6 + 28 >> 2] | 0) + 4 >> 2] | 0; //@line 2151
   $19 = HEAP32[$0 + 60 >> 2] | 0; //@line 2153
   $21 = HEAP32[$0 + 8 >> 2] | 0; //@line 2155
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2156
   $22 = FUNCTION_TABLE_iiiii[$17 & 3]($19, $21, $1, $3) | 0; //@line 2157
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 676; //@line 2160
    sp = STACKTOP; //@line 2161
    return 0; //@line 2162
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 2164
   $$1 = $22; //@line 2165
   return $$1 | 0; //@line 2166
  }
 case 6:
  {
   HEAP32[$4 >> 2] = $2; //@line 2170
   $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 2172
   $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2173
   $25 = _mbedtls_gcm_update($24, $2, $1, $3) | 0; //@line 2174
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 677; //@line 2177
    sp = STACKTOP; //@line 2178
    return 0; //@line 2179
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2181
   $$1 = $25; //@line 2182
   return $$1 | 0; //@line 2183
  }
 default:
  {
   if (!$10) {
    $$1 = -25472; //@line 2189
    return $$1 | 0; //@line 2190
   }
   if (($1 | 0) == ($3 | 0)) {
    if (HEAP32[$0 + 36 >> 2] | 0) {
     $$1 = -24832; //@line 2198
     return $$1 | 0; //@line 2199
    }
    if (($2 >>> 0) % ($10 >>> 0) | 0 | 0) {
     $$1 = -24832; //@line 2204
     return $$1 | 0; //@line 2205
    }
   }
   if (($12 | 0) != 2) {
    $$1 = -24704; //@line 2210
    return $$1 | 0; //@line 2211
   }
   $34 = $0 + 8 | 0; //@line 2213
   switch (HEAP32[$34 >> 2] | 0) {
   case 0:
    {
     $36 = $0 + 36 | 0; //@line 2217
     $37 = HEAP32[$36 >> 2] | 0; //@line 2218
     if (($10 - $37 | 0) >>> 0 < $2 >>> 0) {
      label = 18; //@line 2222
     } else {
      $$pre$phiZ2D = $36; //@line 2224
      $45 = $37; //@line 2224
      label = 20; //@line 2225
     }
     break;
    }
   case 1:
    {
     $40 = $0 + 36 | 0; //@line 2230
     $41 = HEAP32[$40 >> 2] | 0; //@line 2231
     if (($10 - $41 | 0) >>> 0 > $2 >>> 0) {
      $$pre$phiZ2D = $40; //@line 2235
      $45 = $41; //@line 2235
      label = 20; //@line 2236
     } else {
      $$pre$phi107Z2D = $40; //@line 2238
      $49 = $41; //@line 2238
     }
     break;
    }
   default:
    {
     label = 18; //@line 2243
    }
   }
   if ((label | 0) == 18) {
    $$phi$trans$insert = $0 + 36 | 0; //@line 2247
    $$pre$phi107Z2D = $$phi$trans$insert; //@line 2249
    $49 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 2249
   } else if ((label | 0) == 20) {
    _memcpy($0 + 20 + $45 | 0, $1 | 0, $2 | 0) | 0; //@line 2253
    HEAP32[$$pre$phiZ2D >> 2] = (HEAP32[$$pre$phiZ2D >> 2] | 0) + $2; //@line 2256
    $$1 = 0; //@line 2257
    return $$1 | 0; //@line 2258
   }
   do {
    if (!$49) {
     $$0102 = $3; //@line 2263
     $$0103 = $2; //@line 2263
     $$0105 = $1; //@line 2263
    } else {
     $50 = $10 - $49 | 0; //@line 2265
     _memcpy($0 + 20 + $49 | 0, $1 | 0, $50 | 0) | 0; //@line 2267
     $56 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 2272
     $58 = HEAP32[$0 + 60 >> 2] | 0; //@line 2274
     $59 = HEAP32[$34 >> 2] | 0; //@line 2275
     $AsyncCtx3 = _emscripten_alloc_async_context(44, sp) | 0; //@line 2278
     $62 = FUNCTION_TABLE_iiiiiii[$56 & 3]($58, $59, $10, $0 + 40 | 0, $0 + 20 | 0, $3) | 0; //@line 2279
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 678; //@line 2282
      HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 2284
      HEAP32[$AsyncCtx3 + 8 >> 2] = $10; //@line 2286
      HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 2288
      HEAP32[$AsyncCtx3 + 16 >> 2] = $$pre$phi107Z2D; //@line 2290
      HEAP32[$AsyncCtx3 + 20 >> 2] = $1; //@line 2292
      HEAP32[$AsyncCtx3 + 24 >> 2] = $50; //@line 2294
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 2296
      HEAP32[$AsyncCtx3 + 32 >> 2] = $34; //@line 2298
      HEAP32[$AsyncCtx3 + 36 >> 2] = $0; //@line 2300
      HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 2302
      sp = STACKTOP; //@line 2303
      return 0; //@line 2304
     }
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2306
     if (!$62) {
      HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $10; //@line 2311
      HEAP32[$$pre$phi107Z2D >> 2] = 0; //@line 2313
      $$0102 = $3 + $10 | 0; //@line 2316
      $$0103 = $2 - $50 | 0; //@line 2316
      $$0105 = $1 + $50 | 0; //@line 2316
      break;
     } else {
      $$1 = $62; //@line 2319
      return $$1 | 0; //@line 2320
     }
    }
   } while (0);
   if (!$$0103) {
    $$1 = 0; //@line 2326
    return $$1 | 0; //@line 2327
   }
   $80 = ($$0103 >>> 0) % ($10 >>> 0) | 0; //@line 2329
   if (!$80) {
    $$0 = (HEAP32[$34 >> 2] | 0) == 0 ? $10 : 0; //@line 2335
   } else {
    $$0 = $80; //@line 2337
   }
   $85 = $$0103 - $$0 | 0; //@line 2340
   _memcpy($0 + 20 | 0, $$0105 + $85 | 0, $$0 | 0) | 0; //@line 2342
   HEAP32[$$pre$phi107Z2D >> 2] = (HEAP32[$$pre$phi107Z2D >> 2] | 0) + $$0; //@line 2345
   if (!$85) {
    $$1 = 0; //@line 2348
    return $$1 | 0; //@line 2349
   }
   $94 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 2355
   $96 = HEAP32[$0 + 60 >> 2] | 0; //@line 2357
   $97 = HEAP32[$34 >> 2] | 0; //@line 2358
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2360
   $99 = FUNCTION_TABLE_iiiiiii[$94 & 3]($96, $97, $85, $0 + 40 | 0, $$0105, $$0102) | 0; //@line 2361
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 679; //@line 2364
    HEAP32[$AsyncCtx7 + 4 >> 2] = $4; //@line 2366
    HEAP32[$AsyncCtx7 + 8 >> 2] = $85; //@line 2368
    sp = STACKTOP; //@line 2369
    return 0; //@line 2370
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2372
   if ($99 | 0) {
    $$1 = $99; //@line 2375
    return $$1 | 0; //@line 2376
   }
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $85; //@line 2380
   $$1 = 0; //@line 2381
   return $$1 | 0; //@line 2382
  }
 }
 return 0; //@line 2385
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_450($0) {
 $0 = $0 | 0;
 var $$pre$i$i34 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 32846
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32848
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32850
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32852
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32854
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32860
 $$pre$i$i34 = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 32861
 HEAP32[HEAP32[$0 + 24 >> 2] >> 2] = $$pre$i$i34; //@line 32863
 if ($$pre$i$i34 | 0) {
  $18 = HEAP32[$$pre$i$i34 + 8 >> 2] | 0; //@line 32867
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 32868
  FUNCTION_TABLE_vi[$18 & 1023]($6); //@line 32869
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 576; //@line 32872
   $19 = $ReallocAsyncCtx9 + 4 | 0; //@line 32873
   HEAP32[$19 >> 2] = $2; //@line 32874
   $20 = $ReallocAsyncCtx9 + 8 | 0; //@line 32875
   HEAP32[$20 >> 2] = $4; //@line 32876
   $21 = $ReallocAsyncCtx9 + 12 | 0; //@line 32877
   HEAP32[$21 >> 2] = $6; //@line 32878
   $22 = $ReallocAsyncCtx9 + 16 | 0; //@line 32879
   HEAP32[$22 >> 2] = $8; //@line 32880
   $23 = $ReallocAsyncCtx9 + 20 | 0; //@line 32881
   HEAP32[$23 >> 2] = $14; //@line 32882
   sp = STACKTOP; //@line 32883
   return;
  }
  ___async_unwind = 0; //@line 32886
  HEAP32[$ReallocAsyncCtx9 >> 2] = 576; //@line 32887
  $19 = $ReallocAsyncCtx9 + 4 | 0; //@line 32888
  HEAP32[$19 >> 2] = $2; //@line 32889
  $20 = $ReallocAsyncCtx9 + 8 | 0; //@line 32890
  HEAP32[$20 >> 2] = $4; //@line 32891
  $21 = $ReallocAsyncCtx9 + 12 | 0; //@line 32892
  HEAP32[$21 >> 2] = $6; //@line 32893
  $22 = $ReallocAsyncCtx9 + 16 | 0; //@line 32894
  HEAP32[$22 >> 2] = $8; //@line 32895
  $23 = $ReallocAsyncCtx9 + 20 | 0; //@line 32896
  HEAP32[$23 >> 2] = $14; //@line 32897
  sp = STACKTOP; //@line 32898
  return;
 }
 $24 = $8 + 12 | 0; //@line 32901
 HEAP32[$8 >> 2] = 577; //@line 32902
 HEAP32[$8 + 4 >> 2] = 0; //@line 32904
 HEAP32[$8 + 8 >> 2] = $4; //@line 32906
 HEAP32[$24 >> 2] = 848; //@line 32907
 $25 = $4 + 1228 | 0; //@line 32908
 if (($25 | 0) == ($8 | 0)) {
  $48 = HEAP32[214] | 0; //@line 32912
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 32913
  FUNCTION_TABLE_vi[$48 & 1023]($8); //@line 32914
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 580; //@line 32917
   $49 = $ReallocAsyncCtx12 + 4 | 0; //@line 32918
   HEAP32[$49 >> 2] = $8; //@line 32919
   $50 = $ReallocAsyncCtx12 + 8 | 0; //@line 32920
   HEAP32[$50 >> 2] = $2; //@line 32921
   $51 = $ReallocAsyncCtx12 + 12 | 0; //@line 32922
   HEAP32[$51 >> 2] = $4; //@line 32923
   $52 = $ReallocAsyncCtx12 + 16 | 0; //@line 32924
   HEAP32[$52 >> 2] = $14; //@line 32925
   sp = STACKTOP; //@line 32926
   return;
  }
  ___async_unwind = 0; //@line 32929
  HEAP32[$ReallocAsyncCtx12 >> 2] = 580; //@line 32930
  $49 = $ReallocAsyncCtx12 + 4 | 0; //@line 32931
  HEAP32[$49 >> 2] = $8; //@line 32932
  $50 = $ReallocAsyncCtx12 + 8 | 0; //@line 32933
  HEAP32[$50 >> 2] = $2; //@line 32934
  $51 = $ReallocAsyncCtx12 + 12 | 0; //@line 32935
  HEAP32[$51 >> 2] = $4; //@line 32936
  $52 = $ReallocAsyncCtx12 + 16 | 0; //@line 32937
  HEAP32[$52 >> 2] = $14; //@line 32938
  sp = STACKTOP; //@line 32939
  return;
 }
 $27 = $4 + 1240 | 0; //@line 32942
 $28 = HEAP32[$27 >> 2] | 0; //@line 32943
 if (!$28) {
  $40 = HEAP32[213] | 0; //@line 32947
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 32948
  FUNCTION_TABLE_vii[$40 & 31]($25, $8); //@line 32949
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 579; //@line 32952
   $41 = $ReallocAsyncCtx11 + 4 | 0; //@line 32953
   HEAP32[$41 >> 2] = $8; //@line 32954
   $42 = $ReallocAsyncCtx11 + 8 | 0; //@line 32955
   HEAP32[$42 >> 2] = $2; //@line 32956
   $43 = $ReallocAsyncCtx11 + 12 | 0; //@line 32957
   HEAP32[$43 >> 2] = $4; //@line 32958
   $44 = $ReallocAsyncCtx11 + 16 | 0; //@line 32959
   HEAP32[$44 >> 2] = $24; //@line 32960
   $45 = $ReallocAsyncCtx11 + 20 | 0; //@line 32961
   HEAP32[$45 >> 2] = $27; //@line 32962
   $46 = $ReallocAsyncCtx11 + 24 | 0; //@line 32963
   HEAP32[$46 >> 2] = $14; //@line 32964
   sp = STACKTOP; //@line 32965
   return;
  }
  ___async_unwind = 0; //@line 32968
  HEAP32[$ReallocAsyncCtx11 >> 2] = 579; //@line 32969
  $41 = $ReallocAsyncCtx11 + 4 | 0; //@line 32970
  HEAP32[$41 >> 2] = $8; //@line 32971
  $42 = $ReallocAsyncCtx11 + 8 | 0; //@line 32972
  HEAP32[$42 >> 2] = $2; //@line 32973
  $43 = $ReallocAsyncCtx11 + 12 | 0; //@line 32974
  HEAP32[$43 >> 2] = $4; //@line 32975
  $44 = $ReallocAsyncCtx11 + 16 | 0; //@line 32976
  HEAP32[$44 >> 2] = $24; //@line 32977
  $45 = $ReallocAsyncCtx11 + 20 | 0; //@line 32978
  HEAP32[$45 >> 2] = $27; //@line 32979
  $46 = $ReallocAsyncCtx11 + 24 | 0; //@line 32980
  HEAP32[$46 >> 2] = $14; //@line 32981
  sp = STACKTOP; //@line 32982
  return;
 } else {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 32986
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 32987
  FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 32988
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 578; //@line 32991
   $32 = $ReallocAsyncCtx10 + 4 | 0; //@line 32992
   HEAP32[$32 >> 2] = $8; //@line 32993
   $33 = $ReallocAsyncCtx10 + 8 | 0; //@line 32994
   HEAP32[$33 >> 2] = $2; //@line 32995
   $34 = $ReallocAsyncCtx10 + 12 | 0; //@line 32996
   HEAP32[$34 >> 2] = $4; //@line 32997
   $35 = $ReallocAsyncCtx10 + 16 | 0; //@line 32998
   HEAP32[$35 >> 2] = $25; //@line 32999
   $36 = $ReallocAsyncCtx10 + 20 | 0; //@line 33000
   HEAP32[$36 >> 2] = $27; //@line 33001
   $37 = $ReallocAsyncCtx10 + 24 | 0; //@line 33002
   HEAP32[$37 >> 2] = $24; //@line 33003
   $38 = $ReallocAsyncCtx10 + 28 | 0; //@line 33004
   HEAP32[$38 >> 2] = $14; //@line 33005
   sp = STACKTOP; //@line 33006
   return;
  }
  ___async_unwind = 0; //@line 33009
  HEAP32[$ReallocAsyncCtx10 >> 2] = 578; //@line 33010
  $32 = $ReallocAsyncCtx10 + 4 | 0; //@line 33011
  HEAP32[$32 >> 2] = $8; //@line 33012
  $33 = $ReallocAsyncCtx10 + 8 | 0; //@line 33013
  HEAP32[$33 >> 2] = $2; //@line 33014
  $34 = $ReallocAsyncCtx10 + 12 | 0; //@line 33015
  HEAP32[$34 >> 2] = $4; //@line 33016
  $35 = $ReallocAsyncCtx10 + 16 | 0; //@line 33017
  HEAP32[$35 >> 2] = $25; //@line 33018
  $36 = $ReallocAsyncCtx10 + 20 | 0; //@line 33019
  HEAP32[$36 >> 2] = $27; //@line 33020
  $37 = $ReallocAsyncCtx10 + 24 | 0; //@line 33021
  HEAP32[$37 >> 2] = $24; //@line 33022
  $38 = $ReallocAsyncCtx10 + 28 | 0; //@line 33023
  HEAP32[$38 >> 2] = $14; //@line 33024
  sp = STACKTOP; //@line 33025
  return;
 }
}
function _mbedtls_cipher_cmac_update($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$06984 = 0, $$06984$us = 0, $$070 = 0, $$073 = 0, $$09$i = 0, $$09$i75 = 0, $$1$lcssa = 0, $$174$lcssa = 0, $$17481 = 0, $$182 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $22 = 0, $26 = 0, $3 = 0, $38 = 0, $43 = 0, $46 = 0, $5 = 0, $58 = 0, $62 = 0, $66 = 0, $79 = 0, $80 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2645
 STACKTOP = STACKTOP + 16 | 0; //@line 2646
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2646
 $3 = sp; //@line 2647
 if (!$0) {
  $$0 = -24832; //@line 2650
  STACKTOP = sp; //@line 2651
  return $$0 | 0; //@line 2651
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 2653
 if (($1 | 0) == 0 | ($5 | 0) == 0) {
  $$0 = -24832; //@line 2658
  STACKTOP = sp; //@line 2659
  return $$0 | 0; //@line 2659
 }
 $9 = HEAP32[$0 + 64 >> 2] | 0; //@line 2662
 if (!$9) {
  $$0 = -24832; //@line 2665
  STACKTOP = sp; //@line 2666
  return $$0 | 0; //@line 2666
 }
 $12 = HEAP32[$5 + 24 >> 2] | 0; //@line 2669
 $13 = $9 + 32 | 0; //@line 2670
 $14 = HEAP32[$13 >> 2] | 0; //@line 2671
 do {
  if (!$14) {
   $$070 = $1; //@line 2675
   $$073 = $2; //@line 2675
  } else {
   $16 = $12 - $14 | 0; //@line 2677
   if ($16 >>> 0 < $2 >>> 0) {
    _memcpy($9 + 16 + $14 | 0, $1 | 0, $16 | 0) | 0; //@line 2681
    if ($12 | 0) {
     $$09$i = 0; //@line 2684
     do {
      $22 = $9 + $$09$i | 0; //@line 2688
      HEAP8[$22 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$9 + 16 + $$09$i >> 0]; //@line 2691
      $$09$i = $$09$i + 1 | 0; //@line 2692
     } while (($$09$i | 0) != ($12 | 0));
    }
    $AsyncCtx5 = _emscripten_alloc_async_context(40, sp) | 0; //@line 2701
    $26 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 2702
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 685; //@line 2705
     HEAP32[$AsyncCtx5 + 4 >> 2] = $3; //@line 2707
     HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 2709
     HEAP32[$AsyncCtx5 + 12 >> 2] = $9; //@line 2711
     HEAP32[$AsyncCtx5 + 16 >> 2] = $3; //@line 2713
     HEAP32[$AsyncCtx5 + 20 >> 2] = $13; //@line 2715
     HEAP32[$AsyncCtx5 + 24 >> 2] = $9; //@line 2717
     HEAP32[$AsyncCtx5 + 28 >> 2] = $12; //@line 2719
     HEAP32[$AsyncCtx5 + 32 >> 2] = $1; //@line 2721
     HEAP32[$AsyncCtx5 + 36 >> 2] = $2; //@line 2723
     sp = STACKTOP; //@line 2724
     STACKTOP = sp; //@line 2725
     return 0; //@line 2725
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 2727
    if (!$26) {
     $38 = $12 - (HEAP32[$13 >> 2] | 0) | 0; //@line 2731
     HEAP32[$13 >> 2] = 0; //@line 2734
     $$070 = $1 + $38 | 0; //@line 2735
     $$073 = $2 - $38 | 0; //@line 2735
     break;
    } else {
     $$0 = $26; //@line 2738
     STACKTOP = sp; //@line 2739
     return $$0 | 0; //@line 2739
    }
   } else {
    $$070 = $1; //@line 2742
    $$073 = $2; //@line 2742
   }
  }
 } while (0);
 $43 = (($12 + -1 + $$073 | 0) >>> 0) / ($12 >>> 0) | 0; //@line 2748
 L24 : do {
  if ($43 >>> 0 > 1) {
   if (!$12) {
    $$06984$us = 1; //@line 2754
    while (1) {
     $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 2756
     $46 = _mbedtls_cipher_update($0, $9, 0, $9, $3) | 0; //@line 2757
     if (___async) {
      label = 15; //@line 2760
      break;
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2763
     if ($46 | 0) {
      $$0 = $46; //@line 2766
      label = 26; //@line 2767
      break;
     }
     $58 = $$06984$us + 1 | 0; //@line 2770
     if ($58 >>> 0 < $43 >>> 0) {
      $$06984$us = $58; //@line 2773
     } else {
      $$1$lcssa = $$070; //@line 2775
      $$174$lcssa = $$073; //@line 2775
      break L24;
     }
    }
    if ((label | 0) == 15) {
     HEAP32[$AsyncCtx2 >> 2] = 686; //@line 2780
     HEAP32[$AsyncCtx2 + 4 >> 2] = $$06984$us; //@line 2782
     HEAP32[$AsyncCtx2 + 8 >> 2] = $43; //@line 2784
     HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 2786
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 2788
     HEAP32[$AsyncCtx2 + 20 >> 2] = $9; //@line 2790
     HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 2792
     HEAP32[$AsyncCtx2 + 28 >> 2] = $$073; //@line 2794
     HEAP32[$AsyncCtx2 + 32 >> 2] = $$070; //@line 2796
     HEAP32[$AsyncCtx2 + 36 >> 2] = $13; //@line 2798
     HEAP32[$AsyncCtx2 + 40 >> 2] = $9; //@line 2800
     sp = STACKTOP; //@line 2801
     STACKTOP = sp; //@line 2802
     return 0; //@line 2802
    } else if ((label | 0) == 26) {
     STACKTOP = sp; //@line 2805
     return $$0 | 0; //@line 2805
    }
   } else {
    $$06984 = 1; //@line 2808
    $$17481 = $$073; //@line 2808
    $$182 = $$070; //@line 2808
   }
   while (1) {
    $$09$i75 = 0; //@line 2811
    do {
     $62 = $9 + $$09$i75 | 0; //@line 2815
     HEAP8[$62 >> 0] = HEAP8[$62 >> 0] ^ HEAP8[$$182 + $$09$i75 >> 0]; //@line 2818
     $$09$i75 = $$09$i75 + 1 | 0; //@line 2819
    } while (($$09$i75 | 0) != ($12 | 0));
    $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 2827
    $66 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 2828
    if (___async) {
     label = 21; //@line 2831
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2834
    if ($66 | 0) {
     $$0 = $66; //@line 2837
     label = 26; //@line 2838
     break;
    }
    $79 = $$17481 - $12 | 0; //@line 2841
    $80 = $$182 + $12 | 0; //@line 2842
    $81 = $$06984 + 1 | 0; //@line 2843
    if ($81 >>> 0 < $43 >>> 0) {
     $$06984 = $81; //@line 2846
     $$17481 = $79; //@line 2846
     $$182 = $80; //@line 2846
    } else {
     $$1$lcssa = $80; //@line 2848
     $$174$lcssa = $79; //@line 2848
     break L24;
    }
   }
   if ((label | 0) == 21) {
    HEAP32[$AsyncCtx >> 2] = 687; //@line 2853
    HEAP32[$AsyncCtx + 4 >> 2] = $$17481; //@line 2855
    HEAP32[$AsyncCtx + 8 >> 2] = $12; //@line 2857
    HEAP32[$AsyncCtx + 12 >> 2] = $$182; //@line 2859
    HEAP32[$AsyncCtx + 16 >> 2] = $$06984; //@line 2861
    HEAP32[$AsyncCtx + 20 >> 2] = $43; //@line 2863
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 2865
    HEAP32[$AsyncCtx + 28 >> 2] = $13; //@line 2867
    HEAP32[$AsyncCtx + 32 >> 2] = $9; //@line 2869
    HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 2871
    HEAP32[$AsyncCtx + 40 >> 2] = $9; //@line 2873
    HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 2875
    sp = STACKTOP; //@line 2876
    STACKTOP = sp; //@line 2877
    return 0; //@line 2877
   } else if ((label | 0) == 26) {
    STACKTOP = sp; //@line 2880
    return $$0 | 0; //@line 2880
   }
  } else {
   $$1$lcssa = $$070; //@line 2883
   $$174$lcssa = $$073; //@line 2883
  }
 } while (0);
 if (!$$174$lcssa) {
  $$0 = 0; //@line 2888
  STACKTOP = sp; //@line 2889
  return $$0 | 0; //@line 2889
 }
 _memcpy((HEAP32[$13 >> 2] | 0) + ($9 + 16) | 0, $$1$lcssa | 0, $$174$lcssa | 0) | 0; //@line 2893
 HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + $$174$lcssa; //@line 2896
 $$0 = 0; //@line 2897
 STACKTOP = sp; //@line 2898
 return $$0 | 0; //@line 2898
}
function __ZN7LoRaMac11schedule_txEv__async_cb_368($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $4 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25567
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25571
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25575
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25579
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25583
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25585
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25587
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 25589
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 25591
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 25593
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 25595
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 25597
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 25599
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 25601
 if (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) {
  $45 = HEAP8[$4 + 893 >> 0] | 0; //@line 25606
  $46 = HEAP8[HEAP32[$0 + 12 >> 2] >> 0] | 0; //@line 25607
  $48 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($4 + 4 | 0) | 0; //@line 25609
  _printf(12967, $8) | 0; //@line 25610
  _printf(13293, $12) | 0; //@line 25611
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(52) | 0; //@line 25612
  _putchar(10) | 0; //@line 25613
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 492; //@line 25616
   $49 = $ReallocAsyncCtx7 + 4 | 0; //@line 25617
   HEAP32[$49 >> 2] = $16; //@line 25618
   $50 = $ReallocAsyncCtx7 + 8 | 0; //@line 25619
   HEAP32[$50 >> 2] = $4; //@line 25620
   $51 = $ReallocAsyncCtx7 + 12 | 0; //@line 25621
   HEAP8[$51 >> 0] = $46; //@line 25622
   $52 = $ReallocAsyncCtx7 + 13 | 0; //@line 25623
   HEAP8[$52 >> 0] = $45; //@line 25624
   $53 = $ReallocAsyncCtx7 + 14 | 0; //@line 25625
   HEAP8[$53 >> 0] = $48; //@line 25626
   $54 = $ReallocAsyncCtx7 + 16 | 0; //@line 25627
   HEAP32[$54 >> 2] = $18; //@line 25628
   $55 = $ReallocAsyncCtx7 + 20 | 0; //@line 25629
   HEAP32[$55 >> 2] = $20; //@line 25630
   $56 = $ReallocAsyncCtx7 + 24 | 0; //@line 25631
   HEAP32[$56 >> 2] = $22; //@line 25632
   $57 = $ReallocAsyncCtx7 + 28 | 0; //@line 25633
   HEAP32[$57 >> 2] = $24; //@line 25634
   $58 = $ReallocAsyncCtx7 + 32 | 0; //@line 25635
   HEAP32[$58 >> 2] = $26; //@line 25636
   $59 = $ReallocAsyncCtx7 + 36 | 0; //@line 25637
   HEAP32[$59 >> 2] = $28; //@line 25638
   $60 = $ReallocAsyncCtx7 + 40 | 0; //@line 25639
   HEAP32[$60 >> 2] = $30; //@line 25640
   $61 = $ReallocAsyncCtx7 + 44 | 0; //@line 25641
   HEAP32[$61 >> 2] = $32; //@line 25642
   $62 = $ReallocAsyncCtx7 + 48 | 0; //@line 25643
   HEAP32[$62 >> 2] = $34; //@line 25644
   sp = STACKTOP; //@line 25645
   return;
  }
  ___async_unwind = 0; //@line 25648
  HEAP32[$ReallocAsyncCtx7 >> 2] = 492; //@line 25649
  $49 = $ReallocAsyncCtx7 + 4 | 0; //@line 25650
  HEAP32[$49 >> 2] = $16; //@line 25651
  $50 = $ReallocAsyncCtx7 + 8 | 0; //@line 25652
  HEAP32[$50 >> 2] = $4; //@line 25653
  $51 = $ReallocAsyncCtx7 + 12 | 0; //@line 25654
  HEAP8[$51 >> 0] = $46; //@line 25655
  $52 = $ReallocAsyncCtx7 + 13 | 0; //@line 25656
  HEAP8[$52 >> 0] = $45; //@line 25657
  $53 = $ReallocAsyncCtx7 + 14 | 0; //@line 25658
  HEAP8[$53 >> 0] = $48; //@line 25659
  $54 = $ReallocAsyncCtx7 + 16 | 0; //@line 25660
  HEAP32[$54 >> 2] = $18; //@line 25661
  $55 = $ReallocAsyncCtx7 + 20 | 0; //@line 25662
  HEAP32[$55 >> 2] = $20; //@line 25663
  $56 = $ReallocAsyncCtx7 + 24 | 0; //@line 25664
  HEAP32[$56 >> 2] = $22; //@line 25665
  $57 = $ReallocAsyncCtx7 + 28 | 0; //@line 25666
  HEAP32[$57 >> 2] = $24; //@line 25667
  $58 = $ReallocAsyncCtx7 + 32 | 0; //@line 25668
  HEAP32[$58 >> 2] = $26; //@line 25669
  $59 = $ReallocAsyncCtx7 + 36 | 0; //@line 25670
  HEAP32[$59 >> 2] = $28; //@line 25671
  $60 = $ReallocAsyncCtx7 + 40 | 0; //@line 25672
  HEAP32[$60 >> 2] = $30; //@line 25673
  $61 = $ReallocAsyncCtx7 + 44 | 0; //@line 25674
  HEAP32[$61 >> 2] = $32; //@line 25675
  $62 = $ReallocAsyncCtx7 + 48 | 0; //@line 25676
  HEAP32[$62 >> 2] = $34; //@line 25677
  sp = STACKTOP; //@line 25678
  return;
 }
 HEAP32[$4 + 972 >> 2] = (HEAP32[$4 + 1172 >> 2] | 0) + (HEAP32[$4 + 1120 >> 2] | 0); //@line 25687
 HEAP32[$4 + 976 >> 2] = (HEAP32[$4 + 1196 >> 2] | 0) + (HEAP32[$4 + 1124 >> 2] | 0); //@line 25694
 if (!(HEAP32[$22 >> 2] | 0)) {
  $70 = HEAP8[$24 >> 0] | 0; //@line 25698
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 25699
  __ZN7LoRaMac21send_frame_on_channelEh($4, $70) | 0; //@line 25700
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 493; //@line 25703
   $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 25704
   HEAP32[$71 >> 2] = $18; //@line 25705
   $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 25706
   HEAP32[$72 >> 2] = $20; //@line 25707
   sp = STACKTOP; //@line 25708
   return;
  }
  ___async_unwind = 0; //@line 25711
  HEAP32[$ReallocAsyncCtx10 >> 2] = 493; //@line 25712
  $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 25713
  HEAP32[$71 >> 2] = $18; //@line 25714
  $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 25715
  HEAP32[$72 >> 2] = $20; //@line 25716
  sp = STACKTOP; //@line 25717
  return;
 } else {
  $73 = $4 + 968 | 0; //@line 25720
  HEAP32[$73 >> 2] = HEAP32[$73 >> 2] | 16; //@line 25723
  _printf(13253, $26) | 0; //@line 25724
  HEAP32[$30 >> 2] = HEAP32[$22 >> 2]; //@line 25726
  _printf(13317, $30) | 0; //@line 25727
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 25728
  _putchar(10) | 0; //@line 25729
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 494; //@line 25732
   $77 = $ReallocAsyncCtx6 + 4 | 0; //@line 25733
   HEAP32[$77 >> 2] = $34; //@line 25734
   $78 = $ReallocAsyncCtx6 + 8 | 0; //@line 25735
   HEAP32[$78 >> 2] = $4; //@line 25736
   $79 = $ReallocAsyncCtx6 + 12 | 0; //@line 25737
   HEAP32[$79 >> 2] = $22; //@line 25738
   $80 = $ReallocAsyncCtx6 + 16 | 0; //@line 25739
   HEAP32[$80 >> 2] = $18; //@line 25740
   $81 = $ReallocAsyncCtx6 + 20 | 0; //@line 25741
   HEAP32[$81 >> 2] = $20; //@line 25742
   sp = STACKTOP; //@line 25743
   return;
  }
  ___async_unwind = 0; //@line 25746
  HEAP32[$ReallocAsyncCtx6 >> 2] = 494; //@line 25747
  $77 = $ReallocAsyncCtx6 + 4 | 0; //@line 25748
  HEAP32[$77 >> 2] = $34; //@line 25749
  $78 = $ReallocAsyncCtx6 + 8 | 0; //@line 25750
  HEAP32[$78 >> 2] = $4; //@line 25751
  $79 = $ReallocAsyncCtx6 + 12 | 0; //@line 25752
  HEAP32[$79 >> 2] = $22; //@line 25753
  $80 = $ReallocAsyncCtx6 + 16 | 0; //@line 25754
  HEAP32[$80 >> 2] = $18; //@line 25755
  $81 = $ReallocAsyncCtx6 + 20 | 0; //@line 25756
  HEAP32[$81 >> 2] = $20; //@line 25757
  sp = STACKTOP; //@line 25758
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_313($0) {
 $0 = $0 | 0;
 var $12 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 16082
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16084
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16086
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16088
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16090
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16094
 HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0) >> 2] = 4; //@line 16099
 $18 = HEAP8[$4 >> 0] | 16; //@line 16101
 HEAP8[$4 >> 0] = $18; //@line 16102
 $19 = $18 & -33; //@line 16103
 HEAP8[$4 >> 0] = $19; //@line 16104
 do {
  if (!($19 & 2)) {
   $50 = $19; //@line 16109
  } else {
   $22 = $19 & -3; //@line 16111
   HEAP8[$4 >> 0] = $22; //@line 16112
   if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
    _printf(12967, $8) | 0; //@line 16117
    _printf(12994, $12) | 0; //@line 16118
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 16119
    _putchar(10) | 0; //@line 16120
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 16123
     $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 16124
     HEAP32[$26 >> 2] = $4; //@line 16125
     $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 16126
     HEAP32[$27 >> 2] = $6; //@line 16127
     $28 = $ReallocAsyncCtx6 + 12 | 0; //@line 16128
     HEAP32[$28 >> 2] = $2; //@line 16129
     $29 = $ReallocAsyncCtx6 + 16 | 0; //@line 16130
     HEAP32[$29 >> 2] = $6; //@line 16131
     sp = STACKTOP; //@line 16132
     return;
    }
    ___async_unwind = 0; //@line 16135
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 16136
    $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 16137
    HEAP32[$26 >> 2] = $4; //@line 16138
    $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 16139
    HEAP32[$27 >> 2] = $6; //@line 16140
    $28 = $ReallocAsyncCtx6 + 12 | 0; //@line 16141
    HEAP32[$28 >> 2] = $2; //@line 16142
    $29 = $ReallocAsyncCtx6 + 16 | 0; //@line 16143
    HEAP32[$29 >> 2] = $6; //@line 16144
    sp = STACKTOP; //@line 16145
    return;
   }
   if ($22 & 4) {
    $48 = $22 & -5; //@line 16151
    HEAP8[$4 >> 0] = $48; //@line 16152
    $50 = $48; //@line 16153
    break;
   }
   $33 = HEAP32[$2 + 1324 >> 2] | 0; //@line 16157
   $34 = $33 + 16 | 0; //@line 16158
   $36 = __ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0; //@line 16160
   $37 = $33 + 28 | 0; //@line 16161
   $38 = HEAP32[$37 >> 2] | 0; //@line 16162
   if (!$38) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 16165
    _mbed_assert_internal(15061, 15066, 1102); //@line 16166
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 16169
     $40 = $ReallocAsyncCtx15 + 4 | 0; //@line 16170
     HEAP32[$40 >> 2] = $37; //@line 16171
     $41 = $ReallocAsyncCtx15 + 8 | 0; //@line 16172
     HEAP32[$41 >> 2] = $34; //@line 16173
     $42 = $ReallocAsyncCtx15 + 12 | 0; //@line 16174
     HEAP32[$42 >> 2] = $36; //@line 16175
     $43 = $ReallocAsyncCtx15 + 16 | 0; //@line 16176
     HEAP32[$43 >> 2] = $4; //@line 16177
     $44 = $ReallocAsyncCtx15 + 20 | 0; //@line 16178
     HEAP32[$44 >> 2] = $2; //@line 16179
     sp = STACKTOP; //@line 16180
     return;
    }
    ___async_unwind = 0; //@line 16183
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 16184
    $40 = $ReallocAsyncCtx15 + 4 | 0; //@line 16185
    HEAP32[$40 >> 2] = $37; //@line 16186
    $41 = $ReallocAsyncCtx15 + 8 | 0; //@line 16187
    HEAP32[$41 >> 2] = $34; //@line 16188
    $42 = $ReallocAsyncCtx15 + 12 | 0; //@line 16189
    HEAP32[$42 >> 2] = $36; //@line 16190
    $43 = $ReallocAsyncCtx15 + 16 | 0; //@line 16191
    HEAP32[$43 >> 2] = $4; //@line 16192
    $44 = $ReallocAsyncCtx15 + 20 | 0; //@line 16193
    HEAP32[$44 >> 2] = $2; //@line 16194
    sp = STACKTOP; //@line 16195
    return;
   } else {
    $45 = HEAP32[$38 >> 2] | 0; //@line 16198
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 16199
    FUNCTION_TABLE_vii[$45 & 31]($34, $36); //@line 16200
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 16203
     $46 = $ReallocAsyncCtx4 + 4 | 0; //@line 16204
     HEAP32[$46 >> 2] = $4; //@line 16205
     $47 = $ReallocAsyncCtx4 + 8 | 0; //@line 16206
     HEAP32[$47 >> 2] = $2; //@line 16207
     sp = STACKTOP; //@line 16208
     return;
    }
    ___async_unwind = 0; //@line 16211
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 16212
    $46 = $ReallocAsyncCtx4 + 4 | 0; //@line 16213
    HEAP32[$46 >> 2] = $4; //@line 16214
    $47 = $ReallocAsyncCtx4 + 8 | 0; //@line 16215
    HEAP32[$47 >> 2] = $2; //@line 16216
    sp = STACKTOP; //@line 16217
    return;
   }
  }
 } while (0);
 if (!($50 & 16)) {
  return;
 }
 HEAP8[$4 >> 0] = $50 & -17; //@line 16228
 $54 = HEAP32[$2 + 1324 >> 2] | 0; //@line 16230
 $55 = $54 + 48 | 0; //@line 16231
 $57 = __ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0; //@line 16233
 $58 = $54 + 60 | 0; //@line 16234
 $59 = HEAP32[$58 >> 2] | 0; //@line 16235
 if (!$59) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 16238
  _mbed_assert_internal(15061, 15066, 1102); //@line 16239
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 16242
   $61 = $ReallocAsyncCtx14 + 4 | 0; //@line 16243
   HEAP32[$61 >> 2] = $58; //@line 16244
   $62 = $ReallocAsyncCtx14 + 8 | 0; //@line 16245
   HEAP32[$62 >> 2] = $55; //@line 16246
   $63 = $ReallocAsyncCtx14 + 12 | 0; //@line 16247
   HEAP32[$63 >> 2] = $57; //@line 16248
   sp = STACKTOP; //@line 16249
   return;
  }
  ___async_unwind = 0; //@line 16252
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 16253
  $61 = $ReallocAsyncCtx14 + 4 | 0; //@line 16254
  HEAP32[$61 >> 2] = $58; //@line 16255
  $62 = $ReallocAsyncCtx14 + 8 | 0; //@line 16256
  HEAP32[$62 >> 2] = $55; //@line 16257
  $63 = $ReallocAsyncCtx14 + 12 | 0; //@line 16258
  HEAP32[$63 >> 2] = $57; //@line 16259
  sp = STACKTOP; //@line 16260
  return;
 } else {
  $64 = HEAP32[$59 >> 2] | 0; //@line 16263
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 16264
  FUNCTION_TABLE_vii[$64 & 31]($55, $57); //@line 16265
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 16268
   sp = STACKTOP; //@line 16269
   return;
  }
  ___async_unwind = 0; //@line 16272
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 16273
  sp = STACKTOP; //@line 16274
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $13 = 0, $22 = 0, $25 = 0, $35 = 0, $36 = 0, $37 = 0, $41 = 0, $43 = 0, $46 = 0, $53 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $64 = 0, $67 = 0, $7 = 0, $71 = 0, $74 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 13531
 STACKTOP = STACKTOP + 48 | 0; //@line 13532
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 13532
 $6 = sp + 16 | 0; //@line 13533
 $7 = sp; //@line 13534
 $8 = $1 + 12 | 0; //@line 13535
 $9 = HEAP32[$8 >> 2] | 0; //@line 13536
 do {
  if (!$9) {
   $11 = $7 + 12 | 0; //@line 13540
   HEAP32[$11 >> 2] = 0; //@line 13541
   $36 = 0; //@line 13542
   $53 = $11; //@line 13542
  } else {
   $13 = HEAP32[$9 + 4 >> 2] | 0; //@line 13545
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 13546
   FUNCTION_TABLE_vii[$13 & 31]($7, $1); //@line 13547
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 410; //@line 13550
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 13552
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 13554
    HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 13556
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 13558
    HEAP16[$AsyncCtx + 20 >> 1] = $3; //@line 13560
    HEAP16[$AsyncCtx + 22 >> 1] = $4; //@line 13562
    HEAP8[$AsyncCtx + 24 >> 0] = $5; //@line 13564
    HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 13566
    sp = STACKTOP; //@line 13567
    STACKTOP = sp; //@line 13568
    return 0; //@line 13568
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 13570
   $$pre$i = HEAP32[$8 >> 2] | 0; //@line 13571
   $22 = $7 + 12 | 0; //@line 13572
   HEAP32[$22 >> 2] = $$pre$i; //@line 13573
   if (!$$pre$i) {
    $36 = 0; //@line 13576
    $53 = $22; //@line 13576
   } else {
    $25 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 13580
    $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 13581
    FUNCTION_TABLE_vii[$25 & 31]($6, $7); //@line 13582
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 411; //@line 13585
     HEAP32[$AsyncCtx2 + 4 >> 2] = $22; //@line 13587
     HEAP32[$AsyncCtx2 + 8 >> 2] = $7; //@line 13589
     HEAP32[$AsyncCtx2 + 12 >> 2] = $6; //@line 13591
     HEAP32[$AsyncCtx2 + 16 >> 2] = $22; //@line 13593
     HEAP32[$AsyncCtx2 + 20 >> 2] = $2; //@line 13595
     HEAP16[$AsyncCtx2 + 24 >> 1] = $3; //@line 13597
     HEAP16[$AsyncCtx2 + 26 >> 1] = $4; //@line 13599
     HEAP8[$AsyncCtx2 + 28 >> 0] = $5; //@line 13601
     HEAP32[$AsyncCtx2 + 32 >> 2] = $0; //@line 13603
     sp = STACKTOP; //@line 13604
     STACKTOP = sp; //@line 13605
     return 0; //@line 13605
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 13607
     $36 = HEAP32[$22 >> 2] | 0; //@line 13609
     $53 = $22; //@line 13609
     break;
    }
   }
  }
 } while (0);
 $35 = $6 + 12 | 0; //@line 13615
 HEAP32[$35 >> 2] = $36; //@line 13616
 $37 = $6 + 16 | 0; //@line 13617
 HEAP32[$37 >> 2] = $2; //@line 13618
 HEAP16[$6 + 20 >> 1] = $3; //@line 13620
 HEAP16[$6 + 22 >> 1] = $4; //@line 13622
 HEAP8[$6 + 24 >> 0] = $5; //@line 13624
 $41 = _equeue_alloc($0, 28) | 0; //@line 13625
 do {
  if (!$41) {
   $$0$i = 0; //@line 13629
  } else {
   $43 = HEAP32[$35 >> 2] | 0; //@line 13631
   do {
    if (!$43) {
     $57 = 0; //@line 13635
    } else {
     $46 = HEAP32[$43 + 4 >> 2] | 0; //@line 13638
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 13639
     FUNCTION_TABLE_vii[$46 & 31]($41, $6); //@line 13640
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 412; //@line 13643
      HEAP32[$AsyncCtx5 + 4 >> 2] = $35; //@line 13645
      HEAP32[$AsyncCtx5 + 8 >> 2] = $41; //@line 13647
      HEAP32[$AsyncCtx5 + 12 >> 2] = $37; //@line 13649
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 13651
      HEAP32[$AsyncCtx5 + 20 >> 2] = $35; //@line 13653
      HEAP32[$AsyncCtx5 + 24 >> 2] = $53; //@line 13655
      HEAP32[$AsyncCtx5 + 28 >> 2] = $6; //@line 13657
      HEAP32[$AsyncCtx5 + 32 >> 2] = $7; //@line 13659
      sp = STACKTOP; //@line 13660
      STACKTOP = sp; //@line 13661
      return 0; //@line 13661
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 13663
      $57 = HEAP32[$35 >> 2] | 0; //@line 13665
      break;
     }
    }
   } while (0);
   HEAP32[$41 + 12 >> 2] = $57; //@line 13671
   $58 = $41 + 16 | 0; //@line 13672
   HEAP32[$58 >> 2] = HEAP32[$37 >> 2]; //@line 13673
   HEAP32[$58 + 4 >> 2] = HEAP32[$37 + 4 >> 2]; //@line 13673
   HEAP8[$58 + 8 >> 0] = HEAP8[$37 + 8 >> 0] | 0; //@line 13673
   _equeue_event_dtor($41, 413); //@line 13674
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13675
   $59 = _equeue_post($0, 414, $41) | 0; //@line 13676
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 415; //@line 13679
    HEAP32[$AsyncCtx15 + 4 >> 2] = $35; //@line 13681
    HEAP32[$AsyncCtx15 + 8 >> 2] = $53; //@line 13683
    HEAP32[$AsyncCtx15 + 12 >> 2] = $6; //@line 13685
    HEAP32[$AsyncCtx15 + 16 >> 2] = $7; //@line 13687
    sp = STACKTOP; //@line 13688
    STACKTOP = sp; //@line 13689
    return 0; //@line 13689
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 13691
    $$0$i = $59; //@line 13692
    break;
   }
  }
 } while (0);
 $64 = HEAP32[$35 >> 2] | 0; //@line 13697
 do {
  if ($64 | 0) {
   $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 13702
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13703
   FUNCTION_TABLE_vi[$67 & 1023]($6); //@line 13704
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 416; //@line 13707
    HEAP32[$AsyncCtx8 + 4 >> 2] = $53; //@line 13709
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 13711
    HEAP32[$AsyncCtx8 + 12 >> 2] = $7; //@line 13713
    sp = STACKTOP; //@line 13714
    STACKTOP = sp; //@line 13715
    return 0; //@line 13715
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 13717
    break;
   }
  }
 } while (0);
 $71 = HEAP32[$53 >> 2] | 0; //@line 13722
 if (!$71) {
  STACKTOP = sp; //@line 13725
  return $$0$i | 0; //@line 13725
 }
 $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 13728
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13729
 FUNCTION_TABLE_vi[$74 & 1023]($7); //@line 13730
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 417; //@line 13733
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 13735
  sp = STACKTOP; //@line 13736
  STACKTOP = sp; //@line 13737
  return 0; //@line 13737
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 13739
 STACKTOP = sp; //@line 13740
 return $$0$i | 0; //@line 13740
}
function _mbedtls_cipher_cmac_update__async_cb_402($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28292
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28294
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28296
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28298
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28300
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28302
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28304
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28306
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28308
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28310
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28312
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 28315
  $66 = ___async_retval; //@line 28316
  HEAP32[$66 >> 2] = $$0; //@line 28317
  return;
 }
 $22 = $14 - (HEAP32[$10 >> 2] | 0) | 0; //@line 28321
 $23 = $16 + $22 | 0; //@line 28322
 $24 = $18 - $22 | 0; //@line 28323
 HEAP32[$10 >> 2] = 0; //@line 28324
 $27 = (($14 + -1 + $24 | 0) >>> 0) / ($14 >>> 0) | 0; //@line 28327
 if ($27 >>> 0 <= 1) {
  if (!$24) {
   $$0 = 0; //@line 28332
   $66 = ___async_retval; //@line 28333
   HEAP32[$66 >> 2] = $$0; //@line 28334
   return;
  }
  _memcpy((HEAP32[$10 >> 2] | 0) + ($12 + 16) | 0, $23 | 0, $24 | 0) | 0; //@line 28339
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + $24; //@line 28342
  $$0 = 0; //@line 28343
  $66 = ___async_retval; //@line 28344
  HEAP32[$66 >> 2] = $$0; //@line 28345
  return;
 }
 if (!$14) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 28350
  $30 = _mbedtls_cipher_update($4, $6, 0, $6, $8) | 0; //@line 28351
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 686; //@line 28354
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 28355
   HEAP32[$31 >> 2] = 1; //@line 28356
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 28357
   HEAP32[$32 >> 2] = $27; //@line 28358
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 28359
   HEAP32[$33 >> 2] = $2; //@line 28360
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 28361
   HEAP32[$34 >> 2] = $4; //@line 28362
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 28363
   HEAP32[$35 >> 2] = $6; //@line 28364
   $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 28365
   HEAP32[$36 >> 2] = $8; //@line 28366
   $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 28367
   HEAP32[$37 >> 2] = $24; //@line 28368
   $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 28369
   HEAP32[$38 >> 2] = $23; //@line 28370
   $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 28371
   HEAP32[$39 >> 2] = $10; //@line 28372
   $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 28373
   HEAP32[$40 >> 2] = $12; //@line 28374
   sp = STACKTOP; //@line 28375
   return;
  }
  HEAP32[___async_retval >> 2] = $30; //@line 28379
  ___async_unwind = 0; //@line 28380
  HEAP32[$ReallocAsyncCtx2 >> 2] = 686; //@line 28381
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 28382
  HEAP32[$31 >> 2] = 1; //@line 28383
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 28384
  HEAP32[$32 >> 2] = $27; //@line 28385
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 28386
  HEAP32[$33 >> 2] = $2; //@line 28387
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 28388
  HEAP32[$34 >> 2] = $4; //@line 28389
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 28390
  HEAP32[$35 >> 2] = $6; //@line 28391
  $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 28392
  HEAP32[$36 >> 2] = $8; //@line 28393
  $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 28394
  HEAP32[$37 >> 2] = $24; //@line 28395
  $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 28396
  HEAP32[$38 >> 2] = $23; //@line 28397
  $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 28398
  HEAP32[$39 >> 2] = $10; //@line 28399
  $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 28400
  HEAP32[$40 >> 2] = $12; //@line 28401
  sp = STACKTOP; //@line 28402
  return;
 }
 $$09$i75 = 0; //@line 28405
 do {
  $44 = $12 + $$09$i75 | 0; //@line 28409
  HEAP8[$44 >> 0] = HEAP8[$44 >> 0] ^ HEAP8[$23 + $$09$i75 >> 0]; //@line 28412
  $$09$i75 = $$09$i75 + 1 | 0; //@line 28413
 } while (($$09$i75 | 0) != ($14 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 28421
 $48 = _mbedtls_cipher_update($4, $6, $14, $6, $8) | 0; //@line 28422
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 687; //@line 28425
  $49 = $ReallocAsyncCtx + 4 | 0; //@line 28426
  HEAP32[$49 >> 2] = $24; //@line 28427
  $50 = $ReallocAsyncCtx + 8 | 0; //@line 28428
  HEAP32[$50 >> 2] = $14; //@line 28429
  $51 = $ReallocAsyncCtx + 12 | 0; //@line 28430
  HEAP32[$51 >> 2] = $23; //@line 28431
  $52 = $ReallocAsyncCtx + 16 | 0; //@line 28432
  HEAP32[$52 >> 2] = 1; //@line 28433
  $53 = $ReallocAsyncCtx + 20 | 0; //@line 28434
  HEAP32[$53 >> 2] = $27; //@line 28435
  $54 = $ReallocAsyncCtx + 24 | 0; //@line 28436
  HEAP32[$54 >> 2] = $2; //@line 28437
  $55 = $ReallocAsyncCtx + 28 | 0; //@line 28438
  HEAP32[$55 >> 2] = $10; //@line 28439
  $56 = $ReallocAsyncCtx + 32 | 0; //@line 28440
  HEAP32[$56 >> 2] = $12; //@line 28441
  $57 = $ReallocAsyncCtx + 36 | 0; //@line 28442
  HEAP32[$57 >> 2] = $4; //@line 28443
  $58 = $ReallocAsyncCtx + 40 | 0; //@line 28444
  HEAP32[$58 >> 2] = $6; //@line 28445
  $59 = $ReallocAsyncCtx + 44 | 0; //@line 28446
  HEAP32[$59 >> 2] = $8; //@line 28447
  sp = STACKTOP; //@line 28448
  return;
 }
 HEAP32[___async_retval >> 2] = $48; //@line 28452
 ___async_unwind = 0; //@line 28453
 HEAP32[$ReallocAsyncCtx >> 2] = 687; //@line 28454
 $49 = $ReallocAsyncCtx + 4 | 0; //@line 28455
 HEAP32[$49 >> 2] = $24; //@line 28456
 $50 = $ReallocAsyncCtx + 8 | 0; //@line 28457
 HEAP32[$50 >> 2] = $14; //@line 28458
 $51 = $ReallocAsyncCtx + 12 | 0; //@line 28459
 HEAP32[$51 >> 2] = $23; //@line 28460
 $52 = $ReallocAsyncCtx + 16 | 0; //@line 28461
 HEAP32[$52 >> 2] = 1; //@line 28462
 $53 = $ReallocAsyncCtx + 20 | 0; //@line 28463
 HEAP32[$53 >> 2] = $27; //@line 28464
 $54 = $ReallocAsyncCtx + 24 | 0; //@line 28465
 HEAP32[$54 >> 2] = $2; //@line 28466
 $55 = $ReallocAsyncCtx + 28 | 0; //@line 28467
 HEAP32[$55 >> 2] = $10; //@line 28468
 $56 = $ReallocAsyncCtx + 32 | 0; //@line 28469
 HEAP32[$56 >> 2] = $12; //@line 28470
 $57 = $ReallocAsyncCtx + 36 | 0; //@line 28471
 HEAP32[$57 >> 2] = $4; //@line 28472
 $58 = $ReallocAsyncCtx + 40 | 0; //@line 28473
 HEAP32[$58 >> 2] = $6; //@line 28474
 $59 = $ReallocAsyncCtx + 44 | 0; //@line 28475
 HEAP32[$59 >> 2] = $8; //@line 28476
 sp = STACKTOP; //@line 28477
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $13 = 0, $17 = 0, $21 = 0, $23 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $37 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2438
 HEAP32[$0 >> 2] = 560; //@line 2439
 $1 = $0 + 1240 | 0; //@line 2440
 HEAP32[$1 >> 2] = 10108; //@line 2441
 __ZN4mbed6Ticker6detachEv($1); //@line 2442
 $3 = HEAP32[$0 + 1292 >> 2] | 0; //@line 2444
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 2450
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2451
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 1280 | 0); //@line 2452
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 112; //@line 2455
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2457
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2459
    sp = STACKTOP; //@line 2460
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2463
    break;
   }
  }
 } while (0);
 $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2468
 __ZN4mbed10TimerEventD2Ev($1); //@line 2469
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 113; //@line 2472
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 2474
  sp = STACKTOP; //@line 2475
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 2478
 $11 = $0 + 1176 | 0; //@line 2479
 HEAP32[$11 >> 2] = 10108; //@line 2480
 __ZN4mbed6Ticker6detachEv($11); //@line 2481
 $13 = HEAP32[$0 + 1228 >> 2] | 0; //@line 2483
 do {
  if ($13 | 0) {
   $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 2489
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2490
   FUNCTION_TABLE_vi[$17 & 1023]($0 + 1216 | 0); //@line 2491
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 114; //@line 2494
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2496
    HEAP32[$AsyncCtx3 + 8 >> 2] = $11; //@line 2498
    sp = STACKTOP; //@line 2499
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2502
    break;
   }
  }
 } while (0);
 $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2507
 __ZN4mbed10TimerEventD2Ev($11); //@line 2508
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 115; //@line 2511
  HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 2513
  sp = STACKTOP; //@line 2514
  return;
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 2517
 $21 = $0 + 1112 | 0; //@line 2518
 HEAP32[$21 >> 2] = 10108; //@line 2519
 __ZN4mbed6Ticker6detachEv($21); //@line 2520
 $23 = HEAP32[$0 + 1164 >> 2] | 0; //@line 2522
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 2528
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2529
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 1152 | 0); //@line 2530
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 116; //@line 2533
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 2535
    HEAP32[$AsyncCtx7 + 8 >> 2] = $21; //@line 2537
    sp = STACKTOP; //@line 2538
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2541
    break;
   }
  }
 } while (0);
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2546
 __ZN4mbed10TimerEventD2Ev($21); //@line 2547
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 117; //@line 2550
  HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 2552
  sp = STACKTOP; //@line 2553
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 2556
 $31 = $0 + 1048 | 0; //@line 2557
 HEAP32[$31 >> 2] = 10108; //@line 2558
 __ZN4mbed6Ticker6detachEv($31); //@line 2559
 $33 = HEAP32[$0 + 1100 >> 2] | 0; //@line 2561
 do {
  if ($33 | 0) {
   $37 = HEAP32[$33 + 8 >> 2] | 0; //@line 2567
   $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2568
   FUNCTION_TABLE_vi[$37 & 1023]($0 + 1088 | 0); //@line 2569
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 118; //@line 2572
    HEAP32[$AsyncCtx11 + 4 >> 2] = $31; //@line 2574
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 2576
    sp = STACKTOP; //@line 2577
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2580
    break;
   }
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2585
 __ZN4mbed10TimerEventD2Ev($31); //@line 2586
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 119; //@line 2589
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 2591
  sp = STACKTOP; //@line 2592
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 2595
 $AsyncCtx46 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2597
 __ZN4mbed11InterruptInD2Ev($0 + 412 | 0); //@line 2598
 if (___async) {
  HEAP32[$AsyncCtx46 >> 2] = 120; //@line 2601
  HEAP32[$AsyncCtx46 + 4 >> 2] = $0; //@line 2603
  sp = STACKTOP; //@line 2604
  return;
 }
 _emscripten_free_async_context($AsyncCtx46 | 0); //@line 2607
 $AsyncCtx42 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2609
 __ZN4mbed11InterruptInD2Ev($0 + 340 | 0); //@line 2610
 if (___async) {
  HEAP32[$AsyncCtx42 >> 2] = 121; //@line 2613
  HEAP32[$AsyncCtx42 + 4 >> 2] = $0; //@line 2615
  sp = STACKTOP; //@line 2616
  return;
 }
 _emscripten_free_async_context($AsyncCtx42 | 0); //@line 2619
 $AsyncCtx38 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2621
 __ZN4mbed11InterruptInD2Ev($0 + 268 | 0); //@line 2622
 if (___async) {
  HEAP32[$AsyncCtx38 >> 2] = 122; //@line 2625
  HEAP32[$AsyncCtx38 + 4 >> 2] = $0; //@line 2627
  sp = STACKTOP; //@line 2628
  return;
 }
 _emscripten_free_async_context($AsyncCtx38 | 0); //@line 2631
 $AsyncCtx34 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2633
 __ZN4mbed11InterruptInD2Ev($0 + 196 | 0); //@line 2634
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 123; //@line 2637
  HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 2639
  sp = STACKTOP; //@line 2640
  return;
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 2643
 $AsyncCtx30 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2645
 __ZN4mbed11InterruptInD2Ev($0 + 124 | 0); //@line 2646
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 124; //@line 2649
  HEAP32[$AsyncCtx30 + 4 >> 2] = $0; //@line 2651
  sp = STACKTOP; //@line 2652
  return;
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 2655
 $AsyncCtx26 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2657
 __ZN4mbed11InterruptInD2Ev($0 + 52 | 0); //@line 2658
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 125; //@line 2661
  sp = STACKTOP; //@line 2662
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx26 | 0); //@line 2665
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_314($0) {
 $0 = $0 | 0;
 var $$pre16 = 0, $12 = 0, $17 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 16284
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16286
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16288
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16290
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16292
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16296
 $$pre16 = HEAP8[$2 >> 0] | 0; //@line 16299
 do {
  if (!($$pre16 & 2)) {
   $45 = $$pre16; //@line 16304
  } else {
   $17 = $$pre16 & -3; //@line 16306
   HEAP8[$2 >> 0] = $17; //@line 16307
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12967, $8) | 0; //@line 16312
    _printf(12994, $12) | 0; //@line 16313
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 16314
    _putchar(10) | 0; //@line 16315
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 16318
     $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 16319
     HEAP32[$21 >> 2] = $2; //@line 16320
     $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 16321
     HEAP32[$22 >> 2] = $6; //@line 16322
     $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 16323
     HEAP32[$23 >> 2] = $4; //@line 16324
     $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 16325
     HEAP32[$24 >> 2] = $6; //@line 16326
     sp = STACKTOP; //@line 16327
     return;
    }
    ___async_unwind = 0; //@line 16330
    HEAP32[$ReallocAsyncCtx6 >> 2] = 473; //@line 16331
    $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 16332
    HEAP32[$21 >> 2] = $2; //@line 16333
    $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 16334
    HEAP32[$22 >> 2] = $6; //@line 16335
    $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 16336
    HEAP32[$23 >> 2] = $4; //@line 16337
    $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 16338
    HEAP32[$24 >> 2] = $6; //@line 16339
    sp = STACKTOP; //@line 16340
    return;
   }
   if ($17 & 4) {
    $43 = $17 & -5; //@line 16346
    HEAP8[$2 >> 0] = $43; //@line 16347
    $45 = $43; //@line 16348
    break;
   }
   $28 = HEAP32[$4 + 1324 >> 2] | 0; //@line 16352
   $29 = $28 + 16 | 0; //@line 16353
   $31 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 16355
   $32 = $28 + 28 | 0; //@line 16356
   $33 = HEAP32[$32 >> 2] | 0; //@line 16357
   if (!$33) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 16360
    _mbed_assert_internal(15061, 15066, 1102); //@line 16361
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 16364
     $35 = $ReallocAsyncCtx15 + 4 | 0; //@line 16365
     HEAP32[$35 >> 2] = $32; //@line 16366
     $36 = $ReallocAsyncCtx15 + 8 | 0; //@line 16367
     HEAP32[$36 >> 2] = $29; //@line 16368
     $37 = $ReallocAsyncCtx15 + 12 | 0; //@line 16369
     HEAP32[$37 >> 2] = $31; //@line 16370
     $38 = $ReallocAsyncCtx15 + 16 | 0; //@line 16371
     HEAP32[$38 >> 2] = $2; //@line 16372
     $39 = $ReallocAsyncCtx15 + 20 | 0; //@line 16373
     HEAP32[$39 >> 2] = $4; //@line 16374
     sp = STACKTOP; //@line 16375
     return;
    }
    ___async_unwind = 0; //@line 16378
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 16379
    $35 = $ReallocAsyncCtx15 + 4 | 0; //@line 16380
    HEAP32[$35 >> 2] = $32; //@line 16381
    $36 = $ReallocAsyncCtx15 + 8 | 0; //@line 16382
    HEAP32[$36 >> 2] = $29; //@line 16383
    $37 = $ReallocAsyncCtx15 + 12 | 0; //@line 16384
    HEAP32[$37 >> 2] = $31; //@line 16385
    $38 = $ReallocAsyncCtx15 + 16 | 0; //@line 16386
    HEAP32[$38 >> 2] = $2; //@line 16387
    $39 = $ReallocAsyncCtx15 + 20 | 0; //@line 16388
    HEAP32[$39 >> 2] = $4; //@line 16389
    sp = STACKTOP; //@line 16390
    return;
   } else {
    $40 = HEAP32[$33 >> 2] | 0; //@line 16393
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 16394
    FUNCTION_TABLE_vii[$40 & 31]($29, $31); //@line 16395
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 16398
     $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 16399
     HEAP32[$41 >> 2] = $2; //@line 16400
     $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 16401
     HEAP32[$42 >> 2] = $4; //@line 16402
     sp = STACKTOP; //@line 16403
     return;
    }
    ___async_unwind = 0; //@line 16406
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 16407
    $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 16408
    HEAP32[$41 >> 2] = $2; //@line 16409
    $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 16410
    HEAP32[$42 >> 2] = $4; //@line 16411
    sp = STACKTOP; //@line 16412
    return;
   }
  }
 } while (0);
 if (!($45 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $45 & -17; //@line 16423
 $49 = HEAP32[$4 + 1324 >> 2] | 0; //@line 16425
 $50 = $49 + 48 | 0; //@line 16426
 $52 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 16428
 $53 = $49 + 60 | 0; //@line 16429
 $54 = HEAP32[$53 >> 2] | 0; //@line 16430
 if (!$54) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 16433
  _mbed_assert_internal(15061, 15066, 1102); //@line 16434
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 16437
   $56 = $ReallocAsyncCtx14 + 4 | 0; //@line 16438
   HEAP32[$56 >> 2] = $53; //@line 16439
   $57 = $ReallocAsyncCtx14 + 8 | 0; //@line 16440
   HEAP32[$57 >> 2] = $50; //@line 16441
   $58 = $ReallocAsyncCtx14 + 12 | 0; //@line 16442
   HEAP32[$58 >> 2] = $52; //@line 16443
   sp = STACKTOP; //@line 16444
   return;
  }
  ___async_unwind = 0; //@line 16447
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 16448
  $56 = $ReallocAsyncCtx14 + 4 | 0; //@line 16449
  HEAP32[$56 >> 2] = $53; //@line 16450
  $57 = $ReallocAsyncCtx14 + 8 | 0; //@line 16451
  HEAP32[$57 >> 2] = $50; //@line 16452
  $58 = $ReallocAsyncCtx14 + 12 | 0; //@line 16453
  HEAP32[$58 >> 2] = $52; //@line 16454
  sp = STACKTOP; //@line 16455
  return;
 } else {
  $59 = HEAP32[$54 >> 2] | 0; //@line 16458
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 16459
  FUNCTION_TABLE_vii[$59 & 31]($50, $52); //@line 16460
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 16463
   sp = STACKTOP; //@line 16464
   return;
  }
  ___async_unwind = 0; //@line 16467
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 16468
  sp = STACKTOP; //@line 16469
  return;
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_445($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31894
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31896
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31898
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31900
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31902
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31904
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31908
 $15 = $14 + 12 | 0; //@line 31909
 HEAP32[$14 >> 2] = 7; //@line 31910
 HEAP32[$14 + 4 >> 2] = 0; //@line 31912
 HEAP32[$14 + 8 >> 2] = $4; //@line 31914
 HEAP32[$15 >> 2] = 860; //@line 31915
 $16 = $4 + 1244 | 0; //@line 31916
 if (($16 | 0) == ($14 | 0)) {
  $43 = HEAP32[217] | 0; //@line 31920
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 31921
  FUNCTION_TABLE_vi[$43 & 1023]($14); //@line 31922
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 572; //@line 31925
   $44 = $ReallocAsyncCtx6 + 4 | 0; //@line 31926
   HEAP32[$44 >> 2] = $2; //@line 31927
   $45 = $ReallocAsyncCtx6 + 8 | 0; //@line 31928
   HEAP32[$45 >> 2] = $4; //@line 31929
   $46 = $ReallocAsyncCtx6 + 12 | 0; //@line 31930
   HEAP32[$46 >> 2] = $6; //@line 31931
   $47 = $ReallocAsyncCtx6 + 16 | 0; //@line 31932
   HEAP32[$47 >> 2] = $14; //@line 31933
   $48 = $ReallocAsyncCtx6 + 20 | 0; //@line 31934
   HEAP32[$48 >> 2] = $8; //@line 31935
   $49 = $ReallocAsyncCtx6 + 24 | 0; //@line 31936
   HEAP32[$49 >> 2] = $10; //@line 31937
   sp = STACKTOP; //@line 31938
   return;
  }
  ___async_unwind = 0; //@line 31941
  HEAP32[$ReallocAsyncCtx6 >> 2] = 572; //@line 31942
  $44 = $ReallocAsyncCtx6 + 4 | 0; //@line 31943
  HEAP32[$44 >> 2] = $2; //@line 31944
  $45 = $ReallocAsyncCtx6 + 8 | 0; //@line 31945
  HEAP32[$45 >> 2] = $4; //@line 31946
  $46 = $ReallocAsyncCtx6 + 12 | 0; //@line 31947
  HEAP32[$46 >> 2] = $6; //@line 31948
  $47 = $ReallocAsyncCtx6 + 16 | 0; //@line 31949
  HEAP32[$47 >> 2] = $14; //@line 31950
  $48 = $ReallocAsyncCtx6 + 20 | 0; //@line 31951
  HEAP32[$48 >> 2] = $8; //@line 31952
  $49 = $ReallocAsyncCtx6 + 24 | 0; //@line 31953
  HEAP32[$49 >> 2] = $10; //@line 31954
  sp = STACKTOP; //@line 31955
  return;
 }
 $18 = $4 + 1256 | 0; //@line 31958
 $19 = HEAP32[$18 >> 2] | 0; //@line 31959
 if (!$19) {
  $33 = HEAP32[216] | 0; //@line 31963
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 31964
  FUNCTION_TABLE_vii[$33 & 31]($16, $14); //@line 31965
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 571; //@line 31968
   $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 31969
   HEAP32[$34 >> 2] = $2; //@line 31970
   $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 31971
   HEAP32[$35 >> 2] = $4; //@line 31972
   $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 31973
   HEAP32[$36 >> 2] = $6; //@line 31974
   $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 31975
   HEAP32[$37 >> 2] = $14; //@line 31976
   $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 31977
   HEAP32[$38 >> 2] = $8; //@line 31978
   $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 31979
   HEAP32[$39 >> 2] = $10; //@line 31980
   $40 = $ReallocAsyncCtx5 + 28 | 0; //@line 31981
   HEAP32[$40 >> 2] = $15; //@line 31982
   $41 = $ReallocAsyncCtx5 + 32 | 0; //@line 31983
   HEAP32[$41 >> 2] = $18; //@line 31984
   sp = STACKTOP; //@line 31985
   return;
  }
  ___async_unwind = 0; //@line 31988
  HEAP32[$ReallocAsyncCtx5 >> 2] = 571; //@line 31989
  $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 31990
  HEAP32[$34 >> 2] = $2; //@line 31991
  $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 31992
  HEAP32[$35 >> 2] = $4; //@line 31993
  $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 31994
  HEAP32[$36 >> 2] = $6; //@line 31995
  $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 31996
  HEAP32[$37 >> 2] = $14; //@line 31997
  $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 31998
  HEAP32[$38 >> 2] = $8; //@line 31999
  $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 32000
  HEAP32[$39 >> 2] = $10; //@line 32001
  $40 = $ReallocAsyncCtx5 + 28 | 0; //@line 32002
  HEAP32[$40 >> 2] = $15; //@line 32003
  $41 = $ReallocAsyncCtx5 + 32 | 0; //@line 32004
  HEAP32[$41 >> 2] = $18; //@line 32005
  sp = STACKTOP; //@line 32006
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 32010
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 32011
  FUNCTION_TABLE_vi[$22 & 1023]($16); //@line 32012
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 570; //@line 32015
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 32016
   HEAP32[$23 >> 2] = $2; //@line 32017
   $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 32018
   HEAP32[$24 >> 2] = $4; //@line 32019
   $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 32020
   HEAP32[$25 >> 2] = $6; //@line 32021
   $26 = $ReallocAsyncCtx4 + 16 | 0; //@line 32022
   HEAP32[$26 >> 2] = $15; //@line 32023
   $27 = $ReallocAsyncCtx4 + 20 | 0; //@line 32024
   HEAP32[$27 >> 2] = $16; //@line 32025
   $28 = $ReallocAsyncCtx4 + 24 | 0; //@line 32026
   HEAP32[$28 >> 2] = $14; //@line 32027
   $29 = $ReallocAsyncCtx4 + 28 | 0; //@line 32028
   HEAP32[$29 >> 2] = $8; //@line 32029
   $30 = $ReallocAsyncCtx4 + 32 | 0; //@line 32030
   HEAP32[$30 >> 2] = $18; //@line 32031
   $31 = $ReallocAsyncCtx4 + 36 | 0; //@line 32032
   HEAP32[$31 >> 2] = $10; //@line 32033
   sp = STACKTOP; //@line 32034
   return;
  }
  ___async_unwind = 0; //@line 32037
  HEAP32[$ReallocAsyncCtx4 >> 2] = 570; //@line 32038
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 32039
  HEAP32[$23 >> 2] = $2; //@line 32040
  $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 32041
  HEAP32[$24 >> 2] = $4; //@line 32042
  $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 32043
  HEAP32[$25 >> 2] = $6; //@line 32044
  $26 = $ReallocAsyncCtx4 + 16 | 0; //@line 32045
  HEAP32[$26 >> 2] = $15; //@line 32046
  $27 = $ReallocAsyncCtx4 + 20 | 0; //@line 32047
  HEAP32[$27 >> 2] = $16; //@line 32048
  $28 = $ReallocAsyncCtx4 + 24 | 0; //@line 32049
  HEAP32[$28 >> 2] = $14; //@line 32050
  $29 = $ReallocAsyncCtx4 + 28 | 0; //@line 32051
  HEAP32[$29 >> 2] = $8; //@line 32052
  $30 = $ReallocAsyncCtx4 + 32 | 0; //@line 32053
  HEAP32[$30 >> 2] = $18; //@line 32054
  $31 = $ReallocAsyncCtx4 + 36 | 0; //@line 32055
  HEAP32[$31 >> 2] = $10; //@line 32056
  sp = STACKTOP; //@line 32057
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_49($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $24 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22363
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22367
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22369
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22371
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22373
 $12 = HEAP16[$0 + 24 >> 1] | 0; //@line 22375
 $14 = HEAP16[$0 + 26 >> 1] | 0; //@line 22377
 $16 = HEAP8[$0 + 28 >> 0] | 0; //@line 22379
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 22381
 $19 = $6 + 12 | 0; //@line 22383
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22384
 $20 = $6 + 16 | 0; //@line 22385
 HEAP32[$20 >> 2] = $10; //@line 22386
 HEAP16[$6 + 20 >> 1] = $12; //@line 22388
 HEAP16[$6 + 22 >> 1] = $14; //@line 22390
 HEAP8[$6 + 24 >> 0] = $16; //@line 22392
 $24 = _equeue_alloc($18, 28) | 0; //@line 22393
 if ($24 | 0) {
  $26 = HEAP32[$19 >> 2] | 0; //@line 22396
  if (!$26) {
   HEAP32[$24 + 12 >> 2] = 0; //@line 22400
   $39 = $24 + 16 | 0; //@line 22401
   HEAP32[$39 >> 2] = HEAP32[$20 >> 2]; //@line 22402
   HEAP32[$39 + 4 >> 2] = HEAP32[$20 + 4 >> 2]; //@line 22402
   HEAP8[$39 + 8 >> 0] = HEAP8[$20 + 8 >> 0] | 0; //@line 22402
   _equeue_event_dtor($24, 413); //@line 22403
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 22404
   $40 = _equeue_post($18, 414, $24) | 0; //@line 22405
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 415; //@line 22408
    $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 22409
    HEAP32[$41 >> 2] = $19; //@line 22410
    $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 22411
    HEAP32[$42 >> 2] = $8; //@line 22412
    $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 22413
    HEAP32[$43 >> 2] = $6; //@line 22414
    $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 22415
    HEAP32[$44 >> 2] = $4; //@line 22416
    sp = STACKTOP; //@line 22417
    return;
   }
   HEAP32[___async_retval >> 2] = $40; //@line 22421
   ___async_unwind = 0; //@line 22422
   HEAP32[$ReallocAsyncCtx6 >> 2] = 415; //@line 22423
   $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 22424
   HEAP32[$41 >> 2] = $19; //@line 22425
   $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 22426
   HEAP32[$42 >> 2] = $8; //@line 22427
   $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 22428
   HEAP32[$43 >> 2] = $6; //@line 22429
   $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 22430
   HEAP32[$44 >> 2] = $4; //@line 22431
   sp = STACKTOP; //@line 22432
   return;
  } else {
   $29 = HEAP32[$26 + 4 >> 2] | 0; //@line 22436
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 22437
   FUNCTION_TABLE_vii[$29 & 31]($24, $6); //@line 22438
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 412; //@line 22441
    $30 = $ReallocAsyncCtx3 + 4 | 0; //@line 22442
    HEAP32[$30 >> 2] = $19; //@line 22443
    $31 = $ReallocAsyncCtx3 + 8 | 0; //@line 22444
    HEAP32[$31 >> 2] = $24; //@line 22445
    $32 = $ReallocAsyncCtx3 + 12 | 0; //@line 22446
    HEAP32[$32 >> 2] = $20; //@line 22447
    $33 = $ReallocAsyncCtx3 + 16 | 0; //@line 22448
    HEAP32[$33 >> 2] = $18; //@line 22449
    $34 = $ReallocAsyncCtx3 + 20 | 0; //@line 22450
    HEAP32[$34 >> 2] = $19; //@line 22451
    $35 = $ReallocAsyncCtx3 + 24 | 0; //@line 22452
    HEAP32[$35 >> 2] = $8; //@line 22453
    $36 = $ReallocAsyncCtx3 + 28 | 0; //@line 22454
    HEAP32[$36 >> 2] = $6; //@line 22455
    $37 = $ReallocAsyncCtx3 + 32 | 0; //@line 22456
    HEAP32[$37 >> 2] = $4; //@line 22457
    sp = STACKTOP; //@line 22458
    return;
   }
   ___async_unwind = 0; //@line 22461
   HEAP32[$ReallocAsyncCtx3 >> 2] = 412; //@line 22462
   $30 = $ReallocAsyncCtx3 + 4 | 0; //@line 22463
   HEAP32[$30 >> 2] = $19; //@line 22464
   $31 = $ReallocAsyncCtx3 + 8 | 0; //@line 22465
   HEAP32[$31 >> 2] = $24; //@line 22466
   $32 = $ReallocAsyncCtx3 + 12 | 0; //@line 22467
   HEAP32[$32 >> 2] = $20; //@line 22468
   $33 = $ReallocAsyncCtx3 + 16 | 0; //@line 22469
   HEAP32[$33 >> 2] = $18; //@line 22470
   $34 = $ReallocAsyncCtx3 + 20 | 0; //@line 22471
   HEAP32[$34 >> 2] = $19; //@line 22472
   $35 = $ReallocAsyncCtx3 + 24 | 0; //@line 22473
   HEAP32[$35 >> 2] = $8; //@line 22474
   $36 = $ReallocAsyncCtx3 + 28 | 0; //@line 22475
   HEAP32[$36 >> 2] = $6; //@line 22476
   $37 = $ReallocAsyncCtx3 + 32 | 0; //@line 22477
   HEAP32[$37 >> 2] = $4; //@line 22478
   sp = STACKTOP; //@line 22479
   return;
  }
 }
 $46 = HEAP32[$19 >> 2] | 0; //@line 22483
 if ($46 | 0) {
  $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 22487
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 22488
  FUNCTION_TABLE_vi[$49 & 1023]($6); //@line 22489
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 416; //@line 22492
   $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 22493
   HEAP32[$50 >> 2] = $8; //@line 22494
   $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 22495
   HEAP32[$51 >> 2] = 0; //@line 22496
   $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 22497
   HEAP32[$52 >> 2] = $4; //@line 22498
   sp = STACKTOP; //@line 22499
   return;
  }
  ___async_unwind = 0; //@line 22502
  HEAP32[$ReallocAsyncCtx4 >> 2] = 416; //@line 22503
  $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 22504
  HEAP32[$50 >> 2] = $8; //@line 22505
  $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 22506
  HEAP32[$51 >> 2] = 0; //@line 22507
  $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 22508
  HEAP32[$52 >> 2] = $4; //@line 22509
  sp = STACKTOP; //@line 22510
  return;
 }
 $53 = HEAP32[$8 >> 2] | 0; //@line 22513
 if (!$53) {
  HEAP32[___async_retval >> 2] = 0; //@line 22517
  return;
 }
 $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 22521
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 22522
 FUNCTION_TABLE_vi[$56 & 1023]($4); //@line 22523
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 417; //@line 22526
  $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 22527
  HEAP32[$57 >> 2] = 0; //@line 22528
  sp = STACKTOP; //@line 22529
  return;
 }
 ___async_unwind = 0; //@line 22532
 HEAP32[$ReallocAsyncCtx5 >> 2] = 417; //@line 22533
 $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 22534
 HEAP32[$57 >> 2] = 0; //@line 22535
 sp = STACKTOP; //@line 22536
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre = 0, $$pre12 = 0, $$pre13 = 0, $12 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $46 = 0, $47 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $63 = 0, $70 = 0, $71 = 0, $74 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9914
 if (!$1) {
  return;
 }
 $3 = $1 + 12 | 0; //@line 9919
 $4 = HEAP32[$3 >> 2] | 0; //@line 9920
 if ($4 | 0) {
  $6 = $0 + 1880 | 0; //@line 9923
  if (($6 | 0) != ($1 | 0)) {
   $8 = $0 + 1892 | 0; //@line 9926
   $9 = HEAP32[$8 >> 2] | 0; //@line 9927
   do {
    if (!$9) {
     $20 = $4; //@line 9931
     label = 8; //@line 9932
    } else {
     $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 9935
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 9936
     FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 9937
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 315; //@line 9940
      HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 9942
      HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 9944
      HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 9946
      HEAP32[$AsyncCtx + 16 >> 2] = $8; //@line 9948
      HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 9950
      sp = STACKTOP; //@line 9951
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 9954
      $$pre = HEAP32[$3 >> 2] | 0; //@line 9955
      if (!$$pre) {
       $26 = 0; //@line 9958
       break;
      } else {
       $20 = $$pre; //@line 9961
       label = 8; //@line 9962
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 8) {
     $21 = HEAP32[$20 + 4 >> 2] | 0; //@line 9971
     $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9972
     FUNCTION_TABLE_vii[$21 & 31]($6, $1); //@line 9973
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 316; //@line 9976
      HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 9978
      HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 9980
      HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 9982
      HEAP32[$AsyncCtx2 + 16 >> 2] = $8; //@line 9984
      sp = STACKTOP; //@line 9985
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9988
      $26 = HEAP32[$3 >> 2] | 0; //@line 9990
      break;
     }
    }
   } while (0);
   HEAP32[$8 >> 2] = $26; //@line 9995
  }
 }
 $27 = $1 + 16 | 0; //@line 9998
 $28 = $1 + 28 | 0; //@line 9999
 $29 = HEAP32[$28 >> 2] | 0; //@line 10000
 if ($29 | 0) {
  $31 = $0 + 1896 | 0; //@line 10003
  if (($31 | 0) != ($27 | 0)) {
   $33 = $0 + 1908 | 0; //@line 10006
   $34 = HEAP32[$33 >> 2] | 0; //@line 10007
   do {
    if (!$34) {
     $46 = $29; //@line 10011
     label = 18; //@line 10012
    } else {
     $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 10015
     $AsyncCtx5 = _emscripten_alloc_async_context(28, sp) | 0; //@line 10016
     FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 10017
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 317; //@line 10020
      HEAP32[$AsyncCtx5 + 4 >> 2] = $28; //@line 10022
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 10024
      HEAP32[$AsyncCtx5 + 12 >> 2] = $31; //@line 10026
      HEAP32[$AsyncCtx5 + 16 >> 2] = $27; //@line 10028
      HEAP32[$AsyncCtx5 + 20 >> 2] = $1; //@line 10030
      HEAP32[$AsyncCtx5 + 24 >> 2] = $0; //@line 10032
      sp = STACKTOP; //@line 10033
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10036
      $$pre12 = HEAP32[$28 >> 2] | 0; //@line 10037
      if (!$$pre12) {
       $52 = 0; //@line 10040
       break;
      } else {
       $46 = $$pre12; //@line 10043
       label = 18; //@line 10044
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 18) {
     $47 = HEAP32[$46 + 4 >> 2] | 0; //@line 10053
     $AsyncCtx8 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10054
     FUNCTION_TABLE_vii[$47 & 31]($31, $27); //@line 10055
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 318; //@line 10058
      HEAP32[$AsyncCtx8 + 4 >> 2] = $28; //@line 10060
      HEAP32[$AsyncCtx8 + 8 >> 2] = $33; //@line 10062
      HEAP32[$AsyncCtx8 + 12 >> 2] = $1; //@line 10064
      HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 10066
      sp = STACKTOP; //@line 10067
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 10070
      $52 = HEAP32[$28 >> 2] | 0; //@line 10072
      break;
     }
    }
   } while (0);
   HEAP32[$33 >> 2] = $52; //@line 10077
  }
 }
 $53 = $1 + 32 | 0; //@line 10080
 $54 = $1 + 44 | 0; //@line 10081
 $55 = HEAP32[$54 >> 2] | 0; //@line 10082
 if (!$55) {
  return;
 }
 $57 = $0 + 1912 | 0; //@line 10087
 if (($57 | 0) == ($53 | 0)) {
  return;
 }
 $59 = $0 + 1924 | 0; //@line 10092
 $60 = HEAP32[$59 >> 2] | 0; //@line 10093
 do {
  if (!$60) {
   $70 = $55; //@line 10097
   label = 28; //@line 10098
  } else {
   $63 = HEAP32[$60 + 8 >> 2] | 0; //@line 10101
   $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10102
   FUNCTION_TABLE_vi[$63 & 1023]($57); //@line 10103
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 319; //@line 10106
    HEAP32[$AsyncCtx11 + 4 >> 2] = $54; //@line 10108
    HEAP32[$AsyncCtx11 + 8 >> 2] = $59; //@line 10110
    HEAP32[$AsyncCtx11 + 12 >> 2] = $57; //@line 10112
    HEAP32[$AsyncCtx11 + 16 >> 2] = $53; //@line 10114
    sp = STACKTOP; //@line 10115
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 10118
    $$pre13 = HEAP32[$54 >> 2] | 0; //@line 10119
    if (!$$pre13) {
     $74 = 0; //@line 10122
     break;
    } else {
     $70 = $$pre13; //@line 10125
     label = 28; //@line 10126
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 28) {
   $71 = HEAP32[$70 + 4 >> 2] | 0; //@line 10135
   $AsyncCtx14 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10136
   FUNCTION_TABLE_vii[$71 & 31]($57, $53); //@line 10137
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 320; //@line 10140
    HEAP32[$AsyncCtx14 + 4 >> 2] = $54; //@line 10142
    HEAP32[$AsyncCtx14 + 8 >> 2] = $59; //@line 10144
    sp = STACKTOP; //@line 10145
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 10148
    $74 = HEAP32[$54 >> 2] | 0; //@line 10150
    break;
   }
  }
 } while (0);
 HEAP32[$59 >> 2] = $74; //@line 10155
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $36 = 0, $42 = 0, $45 = 0, $50 = 0, $51 = 0, $54 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 3126
 STACKTOP = STACKTOP + 64 | 0; //@line 3127
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 3127
 $vararg_buffer10 = sp + 40 | 0; //@line 3128
 $vararg_buffer8 = sp + 32 | 0; //@line 3129
 $vararg_buffer5 = sp + 24 | 0; //@line 3130
 $vararg_buffer3 = sp + 16 | 0; //@line 3131
 $vararg_buffer1 = sp + 8 | 0; //@line 3132
 $2 = sp + 48 | 0; //@line 3134
 _printf(10904, sp) | 0; //@line 3135
 HEAP32[$vararg_buffer1 >> 2] = $1; //@line 3136
 _printf(11451, $vararg_buffer1) | 0; //@line 3137
 $AsyncCtx29 = _emscripten_alloc_async_context(44, sp) | 0; //@line 3138
 _putchar(10) | 0; //@line 3139
 if (___async) {
  HEAP32[$AsyncCtx29 >> 2] = 138; //@line 3142
  HEAP32[$AsyncCtx29 + 4 >> 2] = $0; //@line 3144
  HEAP32[$AsyncCtx29 + 8 >> 2] = $2; //@line 3146
  HEAP32[$AsyncCtx29 + 12 >> 2] = $vararg_buffer8; //@line 3148
  HEAP32[$AsyncCtx29 + 16 >> 2] = $vararg_buffer8; //@line 3150
  HEAP32[$AsyncCtx29 + 20 >> 2] = $vararg_buffer10; //@line 3152
  HEAP32[$AsyncCtx29 + 24 >> 2] = $vararg_buffer10; //@line 3154
  HEAP32[$AsyncCtx29 + 28 >> 2] = $vararg_buffer3; //@line 3156
  HEAP32[$AsyncCtx29 + 32 >> 2] = $vararg_buffer3; //@line 3158
  HEAP32[$AsyncCtx29 + 36 >> 2] = $vararg_buffer5; //@line 3160
  HEAP32[$AsyncCtx29 + 40 >> 2] = $vararg_buffer5; //@line 3162
  sp = STACKTOP; //@line 3163
  STACKTOP = sp; //@line 3164
  return;
 }
 _emscripten_free_async_context($AsyncCtx29 | 0); //@line 3166
 HEAP8[$0 + 688 >> 0] = 2; //@line 3168
 _printf(10904, $vararg_buffer3) | 0; //@line 3169
 HEAP32[$vararg_buffer5 >> 2] = 3; //@line 3170
 _printf(10970, $vararg_buffer5) | 0; //@line 3171
 $AsyncCtx25 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3172
 _putchar(10) | 0; //@line 3173
 if (___async) {
  HEAP32[$AsyncCtx25 >> 2] = 139; //@line 3176
  HEAP32[$AsyncCtx25 + 4 >> 2] = $0; //@line 3178
  HEAP32[$AsyncCtx25 + 8 >> 2] = $2; //@line 3180
  HEAP32[$AsyncCtx25 + 12 >> 2] = $vararg_buffer8; //@line 3182
  HEAP32[$AsyncCtx25 + 16 >> 2] = $vararg_buffer8; //@line 3184
  HEAP32[$AsyncCtx25 + 20 >> 2] = $vararg_buffer10; //@line 3186
  HEAP32[$AsyncCtx25 + 24 >> 2] = $vararg_buffer10; //@line 3188
  sp = STACKTOP; //@line 3189
  STACKTOP = sp; //@line 3190
  return;
 }
 _emscripten_free_async_context($AsyncCtx25 | 0); //@line 3192
 $AsyncCtx32 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3193
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 3194
 if (___async) {
  HEAP32[$AsyncCtx32 >> 2] = 140; //@line 3197
  HEAP32[$AsyncCtx32 + 4 >> 2] = $0; //@line 3199
  HEAP32[$AsyncCtx32 + 8 >> 2] = $2; //@line 3201
  HEAP32[$AsyncCtx32 + 12 >> 2] = $vararg_buffer8; //@line 3203
  HEAP32[$AsyncCtx32 + 16 >> 2] = $vararg_buffer8; //@line 3205
  HEAP32[$AsyncCtx32 + 20 >> 2] = $vararg_buffer10; //@line 3207
  HEAP32[$AsyncCtx32 + 24 >> 2] = $vararg_buffer10; //@line 3209
  sp = STACKTOP; //@line 3210
  STACKTOP = sp; //@line 3211
  return;
 }
 _emscripten_free_async_context($AsyncCtx32 | 0); //@line 3213
 _printf(10904, $vararg_buffer8) | 0; //@line 3214
 HEAP32[$vararg_buffer10 >> 2] = 3; //@line 3215
 _printf(10999, $vararg_buffer10) | 0; //@line 3216
 $AsyncCtx21 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3217
 _putchar(10) | 0; //@line 3218
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 141; //@line 3221
  HEAP32[$AsyncCtx21 + 4 >> 2] = $0; //@line 3223
  HEAP32[$AsyncCtx21 + 8 >> 2] = $2; //@line 3225
  sp = STACKTOP; //@line 3226
  STACKTOP = sp; //@line 3227
  return;
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 3229
 $28 = $0 + 1240 | 0; //@line 3230
 $29 = $2 + 12 | 0; //@line 3231
 HEAP32[$2 >> 2] = 142; //@line 3232
 HEAP32[$2 + 4 >> 2] = 0; //@line 3234
 HEAP32[$2 + 8 >> 2] = $0; //@line 3236
 HEAP32[$29 >> 2] = 648; //@line 3237
 $30 = $0 + 1280 | 0; //@line 3238
 if (($30 | 0) != ($2 | 0)) {
  $32 = $0 + 1292 | 0; //@line 3241
  $33 = HEAP32[$32 >> 2] | 0; //@line 3242
  do {
   if ($33 | 0) {
    $36 = HEAP32[$33 + 8 >> 2] | 0; //@line 3247
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 3248
    FUNCTION_TABLE_vi[$36 & 1023]($30); //@line 3249
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 143; //@line 3252
     HEAP32[$AsyncCtx + 4 >> 2] = $29; //@line 3254
     HEAP32[$AsyncCtx + 8 >> 2] = $32; //@line 3256
     HEAP32[$AsyncCtx + 12 >> 2] = $30; //@line 3258
     HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 3260
     HEAP32[$AsyncCtx + 20 >> 2] = $28; //@line 3262
     sp = STACKTOP; //@line 3263
     STACKTOP = sp; //@line 3264
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 3266
     break;
    }
   }
  } while (0);
  $42 = HEAP32[$29 >> 2] | 0; //@line 3271
  do {
   if (!$42) {
    $50 = 0; //@line 3275
   } else {
    $45 = HEAP32[$42 + 4 >> 2] | 0; //@line 3278
    $AsyncCtx14 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3279
    FUNCTION_TABLE_vii[$45 & 31]($30, $2); //@line 3280
    if (___async) {
     HEAP32[$AsyncCtx14 >> 2] = 144; //@line 3283
     HEAP32[$AsyncCtx14 + 4 >> 2] = $29; //@line 3285
     HEAP32[$AsyncCtx14 + 8 >> 2] = $32; //@line 3287
     HEAP32[$AsyncCtx14 + 12 >> 2] = $28; //@line 3289
     HEAP32[$AsyncCtx14 + 16 >> 2] = $2; //@line 3291
     sp = STACKTOP; //@line 3292
     STACKTOP = sp; //@line 3293
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx14 | 0); //@line 3295
     $50 = HEAP32[$29 >> 2] | 0; //@line 3297
     break;
    }
   }
  } while (0);
  HEAP32[$32 >> 2] = $50; //@line 3302
 }
 __ZN4mbed6Ticker5setupEy($28, 1e5, 0); //@line 3304
 $51 = HEAP32[$29 >> 2] | 0; //@line 3305
 if (!$51) {
  STACKTOP = sp; //@line 3308
  return;
 }
 $54 = HEAP32[$51 + 8 >> 2] | 0; //@line 3311
 $AsyncCtx18 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3312
 FUNCTION_TABLE_vi[$54 & 1023]($2); //@line 3313
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 145; //@line 3316
  sp = STACKTOP; //@line 3317
  STACKTOP = sp; //@line 3318
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 3320
 STACKTOP = sp; //@line 3321
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $15 = 0, $16 = 0, $28 = 0, $33 = 0, $40 = 0, $44 = 0, $48 = 0, $51 = 0, $62 = 0, $66 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14297
 STACKTOP = STACKTOP + 32 | 0; //@line 14298
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 14298
 $$byval_copy = sp + 24 | 0; //@line 14299
 $vararg_buffer3 = sp + 16 | 0; //@line 14300
 $vararg_buffer1 = sp + 8 | 0; //@line 14301
 _printf(12967, sp) | 0; //@line 14303
 _printf(13213, $vararg_buffer1) | 0; //@line 14304
 $AsyncCtx9 = _emscripten_alloc_async_context(28, sp) | 0; //@line 14305
 _putchar(10) | 0; //@line 14306
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 441; //@line 14309
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 14311
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer1; //@line 14313
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer3; //@line 14315
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer3; //@line 14317
  HEAP32[$AsyncCtx9 + 20 >> 2] = $$byval_copy; //@line 14319
  HEAP32[$AsyncCtx9 + 24 >> 2] = $$byval_copy; //@line 14321
  sp = STACKTOP; //@line 14322
  STACKTOP = sp; //@line 14323
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 14325
 $7 = $0 + 360 | 0; //@line 14326
 do {
  if ((HEAP32[$7 >> 2] | 0) == 2) {
   _printf(12967, $vararg_buffer3) | 0; //@line 14331
   _printf(12994, $$byval_copy) | 0; //@line 14332
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 14333
   _putchar(10) | 0; //@line 14334
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 442; //@line 14337
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14339
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 14341
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 14343
    HEAP32[$AsyncCtx + 16 >> 2] = $7; //@line 14345
    sp = STACKTOP; //@line 14346
    STACKTOP = sp; //@line 14347
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14349
   $15 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14351
   HEAP32[$vararg_buffer1 >> 2] = 361; //@line 14352
   HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 14354
   $AsyncCtx20 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14355
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 14356
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 14356
   $16 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($15, $0, $$byval_copy) | 0; //@line 14357
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 443; //@line 14360
    HEAP32[$AsyncCtx20 + 4 >> 2] = $vararg_buffer1; //@line 14362
    HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 14364
    HEAP32[$AsyncCtx20 + 12 >> 2] = $7; //@line 14366
    sp = STACKTOP; //@line 14367
    STACKTOP = sp; //@line 14368
    return;
   }
   _emscripten_free_async_context($AsyncCtx20 | 0); //@line 14370
   do {
    if (!$16) {
     $AsyncCtx28 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14374
     _mbed_assert_internal(12851, 12860, 217); //@line 14375
     if (___async) {
      HEAP32[$AsyncCtx28 >> 2] = 444; //@line 14378
      HEAP32[$AsyncCtx28 + 4 >> 2] = $vararg_buffer1; //@line 14380
      HEAP32[$AsyncCtx28 + 8 >> 2] = $0; //@line 14382
      HEAP32[$AsyncCtx28 + 12 >> 2] = $7; //@line 14384
      sp = STACKTOP; //@line 14385
      STACKTOP = sp; //@line 14386
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx28 | 0); //@line 14388
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 14394
   if (!(HEAP8[$0 + 373 >> 0] | 0)) {
    label = 24; //@line 14399
   } else {
    label = 23; //@line 14401
   }
  } else {
   $28 = HEAP32[$0 >> 2] | 0; //@line 14404
   $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14405
   __ZN7LoRaPHY18put_radio_to_sleepEv($28); //@line 14406
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 445; //@line 14409
    HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 14411
    HEAP32[$AsyncCtx17 + 8 >> 2] = $7; //@line 14413
    sp = STACKTOP; //@line 14414
    STACKTOP = sp; //@line 14415
    return;
   }
   _emscripten_free_async_context($AsyncCtx17 | 0); //@line 14417
   $33 = (HEAP8[$0 + 373 >> 0] | 0) != 0; //@line 14423
   if (HEAP32[$0 + 364 >> 2] | 0) {
    if ($33) {
     label = 23; //@line 14426
     break;
    } else {
     label = 24; //@line 14429
     break;
    }
   }
   if ($33) {
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 3; //@line 14437
   }
   HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 3; //@line 14442
   $40 = $0 + 356 | 0; //@line 14443
   $44 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$40 >> 2] | 0, HEAP32[$0 + 980 >> 2] | 0) | 0; //@line 14447
   if ($44 >>> 0 >= (HEAP32[$0 + 976 >> 2] | 0) >>> 0) {
    $48 = HEAP32[$40 >> 2] | 0; //@line 14452
    $AsyncCtx24 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14454
    __ZN18LoRaWANTimeHandler4stopER13timer_event_t($48, $0 + 1056 | 0); //@line 14455
    if (___async) {
     HEAP32[$AsyncCtx24 >> 2] = 446; //@line 14458
     HEAP32[$AsyncCtx24 + 4 >> 2] = $0; //@line 14460
     sp = STACKTOP; //@line 14461
     STACKTOP = sp; //@line 14462
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx24 | 0); //@line 14464
     $51 = $0 + 944 | 0; //@line 14465
     HEAP8[$51 >> 0] = HEAP8[$51 >> 0] | 32; //@line 14468
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 23) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 14478
  label = 24; //@line 14479
 }
 if ((label | 0) == 24) {
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 14485
  if ((HEAP32[$7 >> 2] | 0) != 2) {
   $62 = $0 + 944 | 0; //@line 14489
   HEAP8[$62 >> 0] = HEAP8[$62 >> 0] | 32; //@line 14492
  }
 }
 $66 = HEAP32[$0 + 356 >> 2] | 0; //@line 14496
 $AsyncCtx13 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14498
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($66, $0 + 996 | 0, 1); //@line 14499
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 447; //@line 14502
  sp = STACKTOP; //@line 14503
  STACKTOP = sp; //@line 14504
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx13 | 0); //@line 14506
  STACKTOP = sp; //@line 14507
  return;
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_477($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $49 = 0, $57 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 35179
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35181
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35183
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35185
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35187
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35189
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 35191
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 35193
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 35195
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 35200
  _mbed_assert_internal(12851, 12860, 217); //@line 35201
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 363; //@line 35204
   $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 35205
   HEAP32[$19 >> 2] = $2; //@line 35206
   $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 35207
   HEAP32[$20 >> 2] = $4; //@line 35208
   $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 35209
   HEAP32[$21 >> 2] = $6; //@line 35210
   $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 35211
   HEAP32[$22 >> 2] = $8; //@line 35212
   $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 35213
   HEAP32[$23 >> 2] = $10; //@line 35214
   $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 35215
   HEAP32[$24 >> 2] = $12; //@line 35216
   $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 35217
   HEAP32[$25 >> 2] = $14; //@line 35218
   $26 = $ReallocAsyncCtx10 + 32 | 0; //@line 35219
   HEAP32[$26 >> 2] = $16; //@line 35220
   sp = STACKTOP; //@line 35221
   return;
  }
  ___async_unwind = 0; //@line 35224
  HEAP32[$ReallocAsyncCtx10 >> 2] = 363; //@line 35225
  $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 35226
  HEAP32[$19 >> 2] = $2; //@line 35227
  $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 35228
  HEAP32[$20 >> 2] = $4; //@line 35229
  $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 35230
  HEAP32[$21 >> 2] = $6; //@line 35231
  $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 35232
  HEAP32[$22 >> 2] = $8; //@line 35233
  $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 35234
  HEAP32[$23 >> 2] = $10; //@line 35235
  $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 35236
  HEAP32[$24 >> 2] = $12; //@line 35237
  $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 35238
  HEAP32[$25 >> 2] = $14; //@line 35239
  $26 = $ReallocAsyncCtx10 + 32 | 0; //@line 35240
  HEAP32[$26 >> 2] = $16; //@line 35241
  sp = STACKTOP; //@line 35242
  return;
 }
 HEAP32[$2 + 364 >> 2] = 2; //@line 35246
 if (HEAP8[$2 + 371 >> 0] | 0) {
  $31 = HEAP32[$4 >> 2] | 0; //@line 35251
  $34 = HEAP32[$2 + 972 >> 2] | 0; //@line 35254
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 35255
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($31, $2 + 1036 | 0, $34); //@line 35256
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 364; //@line 35259
   $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 35260
   HEAP32[$35 >> 2] = $6; //@line 35261
   $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 35262
   HEAP32[$36 >> 2] = $2; //@line 35263
   $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 35264
   HEAP32[$37 >> 2] = $4; //@line 35265
   $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 35266
   HEAP32[$38 >> 2] = $8; //@line 35267
   $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 35268
   HEAP32[$39 >> 2] = $10; //@line 35269
   $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 35270
   HEAP32[$40 >> 2] = $12; //@line 35271
   $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 35272
   HEAP32[$41 >> 2] = $14; //@line 35273
   sp = STACKTOP; //@line 35274
   return;
  }
  ___async_unwind = 0; //@line 35277
  HEAP32[$ReallocAsyncCtx7 >> 2] = 364; //@line 35278
  $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 35279
  HEAP32[$35 >> 2] = $6; //@line 35280
  $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 35281
  HEAP32[$36 >> 2] = $2; //@line 35282
  $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 35283
  HEAP32[$37 >> 2] = $4; //@line 35284
  $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 35285
  HEAP32[$38 >> 2] = $8; //@line 35286
  $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 35287
  HEAP32[$39 >> 2] = $10; //@line 35288
  $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 35289
  HEAP32[$40 >> 2] = $12; //@line 35290
  $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 35291
  HEAP32[$41 >> 2] = $14; //@line 35292
  sp = STACKTOP; //@line 35293
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 35299
 $45 = $2 + 944 | 0; //@line 35300
 $46 = HEAP8[$45 >> 0] | 0; //@line 35301
 if (!($46 << 24 >> 24)) {
  HEAP8[$45 >> 0] = 1; //@line 35304
  $49 = 1; //@line 35305
 } else {
  $49 = $46; //@line 35307
 }
 HEAP8[$45 >> 0] = $49 | 32; //@line 35310
 HEAP8[$2 + 376 >> 0] = ($8 | 0) == 0 & (HEAP8[$2 + 944 >> 0] & 8) != 0 & 1; //@line 35319
 $57 = HEAP8[$2 + 378 >> 0] | 0; //@line 35321
 HEAP8[$2 + 379 >> 0] = $57; //@line 35323
 HEAP8[$10 >> 0] = $57; //@line 35324
 HEAP8[$12 + 1 >> 0] = HEAP8[$2 + 372 >> 0] | 0; //@line 35328
 HEAP32[$12 + 4 >> 2] = $14; //@line 35330
 $63 = HEAP32[$2 >> 2] | 0; //@line 35331
 $66 = HEAP32[(HEAP32[$63 >> 2] | 0) + 12 >> 2] | 0; //@line 35334
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 35335
 FUNCTION_TABLE_vii[$66 & 31]($63, $12); //@line 35336
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 35339
  $67 = $ReallocAsyncCtx + 4 | 0; //@line 35340
  HEAP32[$67 >> 2] = $2; //@line 35341
  $68 = $ReallocAsyncCtx + 8 | 0; //@line 35342
  HEAP32[$68 >> 2] = $14; //@line 35343
  $69 = $ReallocAsyncCtx + 12 | 0; //@line 35344
  HEAP32[$69 >> 2] = $4; //@line 35345
  $70 = $ReallocAsyncCtx + 16 | 0; //@line 35346
  HEAP32[$70 >> 2] = $10; //@line 35347
  sp = STACKTOP; //@line 35348
  return;
 }
 ___async_unwind = 0; //@line 35351
 HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 35352
 $67 = $ReallocAsyncCtx + 4 | 0; //@line 35353
 HEAP32[$67 >> 2] = $2; //@line 35354
 $68 = $ReallocAsyncCtx + 8 | 0; //@line 35355
 HEAP32[$68 >> 2] = $14; //@line 35356
 $69 = $ReallocAsyncCtx + 12 | 0; //@line 35357
 HEAP32[$69 >> 2] = $4; //@line 35358
 $70 = $ReallocAsyncCtx + 16 | 0; //@line 35359
 HEAP32[$70 >> 2] = $10; //@line 35360
 sp = STACKTOP; //@line 35361
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $35 = 0, $4 = 0, $40 = 0, $43 = 0, $48 = 0, $54 = 0, $55 = 0, $58 = 0, $61 = 0, $64 = 0, $67 = 0, $69 = 0, $72 = 0, $75 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx4 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 2851
 STACKTOP = STACKTOP + 32 | 0; //@line 2852
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 2852
 $1 = sp + 16 | 0; //@line 2855
 _printf(10904, sp) | 0; //@line 2856
 _printf(11301, sp + 8 | 0) | 0; //@line 2857
 $AsyncCtx18 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2858
 _putchar(10) | 0; //@line 2859
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 131; //@line 2862
  HEAP32[$AsyncCtx18 + 4 >> 2] = $0; //@line 2864
  HEAP32[$AsyncCtx18 + 8 >> 2] = $1; //@line 2866
  sp = STACKTOP; //@line 2867
  STACKTOP = sp; //@line 2868
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 2870
 $4 = $0 + 688 | 0; //@line 2871
 switch (HEAP8[$4 >> 0] | 0) {
 case 1:
  {
   do {
    if (!(HEAP8[$0 + 689 >> 0] | 0)) {
     HEAP8[$0 + 732 >> 0] = 0; //@line 2881
     HEAP8[$0 + 733 >> 0] = 0; //@line 2883
     HEAP16[$0 + 744 >> 1] = 0; //@line 2885
     HEAP16[$0 + 742 >> 1] = 0; //@line 2887
     if (!(HEAP8[$0 + 722 >> 0] | 0)) {
      HEAP8[$4 >> 0] = 0; //@line 2892
      $16 = $0 + 1176 | 0; //@line 2893
      $17 = $1 + 12 | 0; //@line 2894
      HEAP32[$1 >> 2] = 73; //@line 2895
      HEAP32[$1 + 4 >> 2] = 0; //@line 2897
      HEAP32[$1 + 8 >> 2] = $0; //@line 2899
      HEAP32[$17 >> 2] = 648; //@line 2900
      $20 = ___muldi3(HEAP32[$0 + 728 >> 2] | 0, 0, 1e3, 0) | 0; //@line 2903
      $21 = tempRet0; //@line 2904
      $22 = $0 + 1216 | 0; //@line 2905
      if (($22 | 0) != ($1 | 0)) {
       $24 = $0 + 1228 | 0; //@line 2908
       $25 = HEAP32[$24 >> 2] | 0; //@line 2909
       do {
        if ($25 | 0) {
         $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 2914
         $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 2915
         FUNCTION_TABLE_vi[$28 & 1023]($22); //@line 2916
         if (___async) {
          HEAP32[$AsyncCtx >> 2] = 132; //@line 2919
          HEAP32[$AsyncCtx + 4 >> 2] = $17; //@line 2921
          HEAP32[$AsyncCtx + 8 >> 2] = $24; //@line 2923
          HEAP32[$AsyncCtx + 12 >> 2] = $22; //@line 2925
          HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 2927
          HEAP32[$AsyncCtx + 20 >> 2] = $16; //@line 2929
          $35 = $AsyncCtx + 24 | 0; //@line 2931
          HEAP32[$35 >> 2] = $20; //@line 2933
          HEAP32[$35 + 4 >> 2] = $21; //@line 2936
          HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 2938
          sp = STACKTOP; //@line 2939
          STACKTOP = sp; //@line 2940
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx | 0); //@line 2942
          break;
         }
        }
       } while (0);
       $40 = HEAP32[$17 >> 2] | 0; //@line 2947
       do {
        if (!$40) {
         $54 = 0; //@line 2951
        } else {
         $43 = HEAP32[$40 + 4 >> 2] | 0; //@line 2954
         $AsyncCtx4 = _emscripten_alloc_async_context(32, sp) | 0; //@line 2955
         FUNCTION_TABLE_vii[$43 & 31]($22, $1); //@line 2956
         if (___async) {
          HEAP32[$AsyncCtx4 >> 2] = 133; //@line 2959
          HEAP32[$AsyncCtx4 + 4 >> 2] = $17; //@line 2961
          HEAP32[$AsyncCtx4 + 8 >> 2] = $24; //@line 2963
          HEAP32[$AsyncCtx4 + 12 >> 2] = $16; //@line 2965
          $48 = $AsyncCtx4 + 16 | 0; //@line 2967
          HEAP32[$48 >> 2] = $20; //@line 2969
          HEAP32[$48 + 4 >> 2] = $21; //@line 2972
          HEAP32[$AsyncCtx4 + 24 >> 2] = $0; //@line 2974
          HEAP32[$AsyncCtx4 + 28 >> 2] = $1; //@line 2976
          sp = STACKTOP; //@line 2977
          STACKTOP = sp; //@line 2978
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx4 | 0); //@line 2980
          $54 = HEAP32[$17 >> 2] | 0; //@line 2982
          break;
         }
        }
       } while (0);
       HEAP32[$24 >> 2] = $54; //@line 2987
      }
      __ZN4mbed6Ticker5setupEy($16, $20, $21); //@line 2989
      $55 = HEAP32[$17 >> 2] | 0; //@line 2990
      if ($55 | 0) {
       $58 = HEAP32[$55 + 8 >> 2] | 0; //@line 2994
       $AsyncCtx8 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2995
       FUNCTION_TABLE_vi[$58 & 1023]($1); //@line 2996
       if (___async) {
        HEAP32[$AsyncCtx8 >> 2] = 134; //@line 2999
        HEAP32[$AsyncCtx8 + 4 >> 2] = $0; //@line 3001
        sp = STACKTOP; //@line 3002
        STACKTOP = sp; //@line 3003
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx8 | 0); //@line 3005
        break;
       }
      }
     }
    }
   } while (0);
   $61 = HEAP32[$0 + 784 >> 2] | 0; //@line 3013
   if (!$61) {
    STACKTOP = sp; //@line 3016
    return;
   }
   $64 = HEAP32[$61 + 60 >> 2] | 0; //@line 3019
   if (!$64) {
    STACKTOP = sp; //@line 3022
    return;
   }
   $67 = HEAP32[$64 >> 2] | 0; //@line 3025
   $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3026
   FUNCTION_TABLE_vi[$67 & 1023]($61 + 48 | 0); //@line 3027
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 135; //@line 3030
    sp = STACKTOP; //@line 3031
    STACKTOP = sp; //@line 3032
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3034
   STACKTOP = sp; //@line 3035
   return;
  }
 case 2:
  {
   HEAP8[$4 >> 0] = 0; //@line 3039
   $69 = HEAP32[$0 + 784 >> 2] | 0; //@line 3041
   if (!$69) {
    STACKTOP = sp; //@line 3044
    return;
   }
   $72 = HEAP32[$69 + 28 >> 2] | 0; //@line 3047
   if (!$72) {
    STACKTOP = sp; //@line 3050
    return;
   }
   $75 = HEAP32[$72 >> 2] | 0; //@line 3053
   $AsyncCtx14 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3054
   FUNCTION_TABLE_vi[$75 & 1023]($69 + 16 | 0); //@line 3055
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 136; //@line 3058
    sp = STACKTOP; //@line 3059
    STACKTOP = sp; //@line 3060
    return;
   }
   _emscripten_free_async_context($AsyncCtx14 | 0); //@line 3062
   STACKTOP = sp; //@line 3063
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 3067
   return;
  }
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_76($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24575
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24577
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24579
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 24581
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 24583
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 24585
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 24589
 $15 = $2 + 12 | 0; //@line 24591
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] >> 2]; //@line 24592
 $16 = $2 + 16 | 0; //@line 24593
 HEAP8[$16 >> 0] = $6; //@line 24594
 HEAP8[$2 + 17 >> 0] = $8; //@line 24596
 $18 = _equeue_alloc($10, 20) | 0; //@line 24597
 if ($18 | 0) {
  $20 = HEAP32[$15 >> 2] | 0; //@line 24600
  if (!$20) {
   HEAP32[$18 + 12 >> 2] = 0; //@line 24604
   HEAP16[$18 + 16 >> 1] = HEAP16[$16 >> 1] | 0; //@line 24607
   _equeue_event_dtor($18, 282); //@line 24608
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 24609
   $35 = _equeue_post($10, 283, $18) | 0; //@line 24610
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 284; //@line 24613
    $36 = $ReallocAsyncCtx6 + 4 | 0; //@line 24614
    HEAP32[$36 >> 2] = $15; //@line 24615
    $37 = $ReallocAsyncCtx6 + 8 | 0; //@line 24616
    HEAP32[$37 >> 2] = $4; //@line 24617
    $38 = $ReallocAsyncCtx6 + 12 | 0; //@line 24618
    HEAP32[$38 >> 2] = $2; //@line 24619
    $39 = $ReallocAsyncCtx6 + 16 | 0; //@line 24620
    HEAP32[$39 >> 2] = $14; //@line 24621
    sp = STACKTOP; //@line 24622
    return;
   }
   HEAP32[___async_retval >> 2] = $35; //@line 24626
   ___async_unwind = 0; //@line 24627
   HEAP32[$ReallocAsyncCtx6 >> 2] = 284; //@line 24628
   $36 = $ReallocAsyncCtx6 + 4 | 0; //@line 24629
   HEAP32[$36 >> 2] = $15; //@line 24630
   $37 = $ReallocAsyncCtx6 + 8 | 0; //@line 24631
   HEAP32[$37 >> 2] = $4; //@line 24632
   $38 = $ReallocAsyncCtx6 + 12 | 0; //@line 24633
   HEAP32[$38 >> 2] = $2; //@line 24634
   $39 = $ReallocAsyncCtx6 + 16 | 0; //@line 24635
   HEAP32[$39 >> 2] = $14; //@line 24636
   sp = STACKTOP; //@line 24637
   return;
  } else {
   $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 24641
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 24642
   FUNCTION_TABLE_vii[$23 & 31]($18, $2); //@line 24643
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 281; //@line 24646
    $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 24647
    HEAP32[$24 >> 2] = $15; //@line 24648
    $25 = $ReallocAsyncCtx3 + 8 | 0; //@line 24649
    HEAP32[$25 >> 2] = $18; //@line 24650
    $26 = $ReallocAsyncCtx3 + 12 | 0; //@line 24651
    HEAP32[$26 >> 2] = $16; //@line 24652
    $27 = $ReallocAsyncCtx3 + 16 | 0; //@line 24653
    HEAP32[$27 >> 2] = $10; //@line 24654
    $28 = $ReallocAsyncCtx3 + 20 | 0; //@line 24655
    HEAP32[$28 >> 2] = $15; //@line 24656
    $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 24657
    HEAP32[$29 >> 2] = $4; //@line 24658
    $30 = $ReallocAsyncCtx3 + 28 | 0; //@line 24659
    HEAP32[$30 >> 2] = $2; //@line 24660
    $31 = $ReallocAsyncCtx3 + 32 | 0; //@line 24661
    HEAP32[$31 >> 2] = $14; //@line 24662
    sp = STACKTOP; //@line 24663
    return;
   }
   ___async_unwind = 0; //@line 24666
   HEAP32[$ReallocAsyncCtx3 >> 2] = 281; //@line 24667
   $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 24668
   HEAP32[$24 >> 2] = $15; //@line 24669
   $25 = $ReallocAsyncCtx3 + 8 | 0; //@line 24670
   HEAP32[$25 >> 2] = $18; //@line 24671
   $26 = $ReallocAsyncCtx3 + 12 | 0; //@line 24672
   HEAP32[$26 >> 2] = $16; //@line 24673
   $27 = $ReallocAsyncCtx3 + 16 | 0; //@line 24674
   HEAP32[$27 >> 2] = $10; //@line 24675
   $28 = $ReallocAsyncCtx3 + 20 | 0; //@line 24676
   HEAP32[$28 >> 2] = $15; //@line 24677
   $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 24678
   HEAP32[$29 >> 2] = $4; //@line 24679
   $30 = $ReallocAsyncCtx3 + 28 | 0; //@line 24680
   HEAP32[$30 >> 2] = $2; //@line 24681
   $31 = $ReallocAsyncCtx3 + 32 | 0; //@line 24682
   HEAP32[$31 >> 2] = $14; //@line 24683
   sp = STACKTOP; //@line 24684
   return;
  }
 }
 $41 = HEAP32[$15 >> 2] | 0; //@line 24688
 if ($41 | 0) {
  $44 = HEAP32[$41 + 8 >> 2] | 0; //@line 24692
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 24693
  FUNCTION_TABLE_vi[$44 & 1023]($2); //@line 24694
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 285; //@line 24697
   $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 24698
   HEAP32[$45 >> 2] = $4; //@line 24699
   $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 24700
   HEAP32[$46 >> 2] = 0; //@line 24701
   $47 = $ReallocAsyncCtx4 + 12 | 0; //@line 24702
   HEAP32[$47 >> 2] = $14; //@line 24703
   sp = STACKTOP; //@line 24704
   return;
  }
  ___async_unwind = 0; //@line 24707
  HEAP32[$ReallocAsyncCtx4 >> 2] = 285; //@line 24708
  $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 24709
  HEAP32[$45 >> 2] = $4; //@line 24710
  $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 24711
  HEAP32[$46 >> 2] = 0; //@line 24712
  $47 = $ReallocAsyncCtx4 + 12 | 0; //@line 24713
  HEAP32[$47 >> 2] = $14; //@line 24714
  sp = STACKTOP; //@line 24715
  return;
 }
 $48 = HEAP32[$4 >> 2] | 0; //@line 24718
 if (!$48) {
  HEAP32[___async_retval >> 2] = 0; //@line 24722
  return;
 }
 $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 24726
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 24727
 FUNCTION_TABLE_vi[$51 & 1023]($14); //@line 24728
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 286; //@line 24731
  $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 24732
  HEAP32[$52 >> 2] = 0; //@line 24733
  sp = STACKTOP; //@line 24734
  return;
 }
 ___async_unwind = 0; //@line 24737
 HEAP32[$ReallocAsyncCtx5 >> 2] = 286; //@line 24738
 $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 24739
 HEAP32[$52 >> 2] = 0; //@line 24740
 sp = STACKTOP; //@line 24741
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_452($0) {
 $0 = $0 | 0;
 var $$pre121 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 33178
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33180
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33182
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33184
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33186
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33188
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33190
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33192
 $$pre121 = HEAP32[$12 >> 2] | 0; //@line 33193
 if ($$pre121 | 0) {
  $17 = HEAP32[$$pre121 + 4 >> 2] | 0; //@line 33197
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 33198
  FUNCTION_TABLE_vii[$17 & 31]($8, $2); //@line 33199
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 579; //@line 33202
   $18 = $ReallocAsyncCtx11 + 4 | 0; //@line 33203
   HEAP32[$18 >> 2] = $2; //@line 33204
   $19 = $ReallocAsyncCtx11 + 8 | 0; //@line 33205
   HEAP32[$19 >> 2] = $4; //@line 33206
   $20 = $ReallocAsyncCtx11 + 12 | 0; //@line 33207
   HEAP32[$20 >> 2] = $6; //@line 33208
   $21 = $ReallocAsyncCtx11 + 16 | 0; //@line 33209
   HEAP32[$21 >> 2] = $12; //@line 33210
   $22 = $ReallocAsyncCtx11 + 20 | 0; //@line 33211
   HEAP32[$22 >> 2] = $10; //@line 33212
   $23 = $ReallocAsyncCtx11 + 24 | 0; //@line 33213
   HEAP32[$23 >> 2] = $14; //@line 33214
   sp = STACKTOP; //@line 33215
   return;
  }
  ___async_unwind = 0; //@line 33218
  HEAP32[$ReallocAsyncCtx11 >> 2] = 579; //@line 33219
  $18 = $ReallocAsyncCtx11 + 4 | 0; //@line 33220
  HEAP32[$18 >> 2] = $2; //@line 33221
  $19 = $ReallocAsyncCtx11 + 8 | 0; //@line 33222
  HEAP32[$19 >> 2] = $4; //@line 33223
  $20 = $ReallocAsyncCtx11 + 12 | 0; //@line 33224
  HEAP32[$20 >> 2] = $6; //@line 33225
  $21 = $ReallocAsyncCtx11 + 16 | 0; //@line 33226
  HEAP32[$21 >> 2] = $12; //@line 33227
  $22 = $ReallocAsyncCtx11 + 20 | 0; //@line 33228
  HEAP32[$22 >> 2] = $10; //@line 33229
  $23 = $ReallocAsyncCtx11 + 24 | 0; //@line 33230
  HEAP32[$23 >> 2] = $14; //@line 33231
  sp = STACKTOP; //@line 33232
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 33235
 $24 = $4 + 12 | 0; //@line 33236
 HEAP32[$4 >> 2] = 581; //@line 33237
 HEAP32[$4 + 4 >> 2] = 0; //@line 33239
 HEAP32[$4 + 8 >> 2] = $6; //@line 33241
 HEAP32[$24 >> 2] = 848; //@line 33242
 $25 = $6 + 1260 | 0; //@line 33243
 if (($25 | 0) == ($4 | 0)) {
  $44 = HEAP32[214] | 0; //@line 33247
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 33248
  FUNCTION_TABLE_vi[$44 & 1023]($4); //@line 33249
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 584; //@line 33252
   $45 = $ReallocAsyncCtx15 + 4 | 0; //@line 33253
   HEAP32[$45 >> 2] = $4; //@line 33254
   $46 = $ReallocAsyncCtx15 + 8 | 0; //@line 33255
   HEAP32[$46 >> 2] = $14; //@line 33256
   sp = STACKTOP; //@line 33257
   return;
  }
  ___async_unwind = 0; //@line 33260
  HEAP32[$ReallocAsyncCtx15 >> 2] = 584; //@line 33261
  $45 = $ReallocAsyncCtx15 + 4 | 0; //@line 33262
  HEAP32[$45 >> 2] = $4; //@line 33263
  $46 = $ReallocAsyncCtx15 + 8 | 0; //@line 33264
  HEAP32[$46 >> 2] = $14; //@line 33265
  sp = STACKTOP; //@line 33266
  return;
 }
 $27 = $6 + 1272 | 0; //@line 33269
 $28 = HEAP32[$27 >> 2] | 0; //@line 33270
 if (!$28) {
  $38 = HEAP32[213] | 0; //@line 33274
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 33275
  FUNCTION_TABLE_vii[$38 & 31]($25, $4); //@line 33276
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 583; //@line 33279
   $39 = $ReallocAsyncCtx14 + 4 | 0; //@line 33280
   HEAP32[$39 >> 2] = $24; //@line 33281
   $40 = $ReallocAsyncCtx14 + 8 | 0; //@line 33282
   HEAP32[$40 >> 2] = $27; //@line 33283
   $41 = $ReallocAsyncCtx14 + 12 | 0; //@line 33284
   HEAP32[$41 >> 2] = $4; //@line 33285
   $42 = $ReallocAsyncCtx14 + 16 | 0; //@line 33286
   HEAP32[$42 >> 2] = $14; //@line 33287
   sp = STACKTOP; //@line 33288
   return;
  }
  ___async_unwind = 0; //@line 33291
  HEAP32[$ReallocAsyncCtx14 >> 2] = 583; //@line 33292
  $39 = $ReallocAsyncCtx14 + 4 | 0; //@line 33293
  HEAP32[$39 >> 2] = $24; //@line 33294
  $40 = $ReallocAsyncCtx14 + 8 | 0; //@line 33295
  HEAP32[$40 >> 2] = $27; //@line 33296
  $41 = $ReallocAsyncCtx14 + 12 | 0; //@line 33297
  HEAP32[$41 >> 2] = $4; //@line 33298
  $42 = $ReallocAsyncCtx14 + 16 | 0; //@line 33299
  HEAP32[$42 >> 2] = $14; //@line 33300
  sp = STACKTOP; //@line 33301
  return;
 } else {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 33305
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 33306
  FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 33307
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 582; //@line 33310
   $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 33311
   HEAP32[$32 >> 2] = $24; //@line 33312
   $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 33313
   HEAP32[$33 >> 2] = $27; //@line 33314
   $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 33315
   HEAP32[$34 >> 2] = $25; //@line 33316
   $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 33317
   HEAP32[$35 >> 2] = $4; //@line 33318
   $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 33319
   HEAP32[$36 >> 2] = $14; //@line 33320
   sp = STACKTOP; //@line 33321
   return;
  }
  ___async_unwind = 0; //@line 33324
  HEAP32[$ReallocAsyncCtx13 >> 2] = 582; //@line 33325
  $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 33326
  HEAP32[$32 >> 2] = $24; //@line 33327
  $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 33328
  HEAP32[$33 >> 2] = $27; //@line 33329
  $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 33330
  HEAP32[$34 >> 2] = $25; //@line 33331
  $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 33332
  HEAP32[$35 >> 2] = $4; //@line 33333
  $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 33334
  HEAP32[$36 >> 2] = $14; //@line 33335
  sp = STACKTOP; //@line 33336
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $18 = 0, $21 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $38 = 0, $4 = 0, $45 = 0, $49 = 0, $5 = 0, $52 = 0, $57 = 0, $6 = 0, $60 = 0, $64 = 0, $67 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8485
 STACKTOP = STACKTOP + 48 | 0; //@line 8486
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 8486
 $4 = sp + 16 | 0; //@line 8487
 $5 = sp; //@line 8488
 $6 = $1 + 12 | 0; //@line 8489
 $7 = HEAP32[$6 >> 2] | 0; //@line 8490
 do {
  if (!$7) {
   $9 = $5 + 12 | 0; //@line 8494
   HEAP32[$9 >> 2] = 0; //@line 8495
   $30 = 0; //@line 8496
   $45 = $9; //@line 8496
  } else {
   $11 = HEAP32[$7 + 4 >> 2] | 0; //@line 8499
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 8500
   FUNCTION_TABLE_vii[$11 & 31]($5, $1); //@line 8501
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 279; //@line 8504
    HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 8506
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 8508
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 8510
    HEAP8[$AsyncCtx + 16 >> 0] = $2; //@line 8512
    HEAP8[$AsyncCtx + 17 >> 0] = $3; //@line 8514
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 8516
    sp = STACKTOP; //@line 8517
    STACKTOP = sp; //@line 8518
    return 0; //@line 8518
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 8520
   $$pre$i = HEAP32[$6 >> 2] | 0; //@line 8521
   $18 = $5 + 12 | 0; //@line 8522
   HEAP32[$18 >> 2] = $$pre$i; //@line 8523
   if (!$$pre$i) {
    $30 = 0; //@line 8526
    $45 = $18; //@line 8526
   } else {
    $21 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 8530
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8531
    FUNCTION_TABLE_vii[$21 & 31]($4, $5); //@line 8532
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 280; //@line 8535
     HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 8537
     HEAP32[$AsyncCtx2 + 8 >> 2] = $18; //@line 8539
     HEAP8[$AsyncCtx2 + 12 >> 0] = $2; //@line 8541
     HEAP8[$AsyncCtx2 + 13 >> 0] = $3; //@line 8543
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 8545
     HEAP32[$AsyncCtx2 + 20 >> 2] = $18; //@line 8547
     HEAP32[$AsyncCtx2 + 24 >> 2] = $5; //@line 8549
     sp = STACKTOP; //@line 8550
     STACKTOP = sp; //@line 8551
     return 0; //@line 8551
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8553
     $30 = HEAP32[$18 >> 2] | 0; //@line 8555
     $45 = $18; //@line 8555
     break;
    }
   }
  }
 } while (0);
 $29 = $4 + 12 | 0; //@line 8561
 HEAP32[$29 >> 2] = $30; //@line 8562
 $31 = $4 + 16 | 0; //@line 8563
 HEAP8[$31 >> 0] = $2; //@line 8564
 HEAP8[$4 + 17 >> 0] = $3; //@line 8566
 $33 = _equeue_alloc($0, 20) | 0; //@line 8567
 do {
  if (!$33) {
   $$0$i = 0; //@line 8571
  } else {
   $35 = HEAP32[$29 >> 2] | 0; //@line 8573
   do {
    if (!$35) {
     $49 = 0; //@line 8577
    } else {
     $38 = HEAP32[$35 + 4 >> 2] | 0; //@line 8580
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8581
     FUNCTION_TABLE_vii[$38 & 31]($33, $4); //@line 8582
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 281; //@line 8585
      HEAP32[$AsyncCtx5 + 4 >> 2] = $29; //@line 8587
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 8589
      HEAP32[$AsyncCtx5 + 12 >> 2] = $31; //@line 8591
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 8593
      HEAP32[$AsyncCtx5 + 20 >> 2] = $29; //@line 8595
      HEAP32[$AsyncCtx5 + 24 >> 2] = $45; //@line 8597
      HEAP32[$AsyncCtx5 + 28 >> 2] = $4; //@line 8599
      HEAP32[$AsyncCtx5 + 32 >> 2] = $5; //@line 8601
      sp = STACKTOP; //@line 8602
      STACKTOP = sp; //@line 8603
      return 0; //@line 8603
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8605
      $49 = HEAP32[$29 >> 2] | 0; //@line 8607
      break;
     }
    }
   } while (0);
   HEAP32[$33 + 12 >> 2] = $49; //@line 8613
   HEAP16[$33 + 16 >> 1] = HEAP16[$31 >> 1] | 0; //@line 8616
   _equeue_event_dtor($33, 282); //@line 8617
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8618
   $52 = _equeue_post($0, 283, $33) | 0; //@line 8619
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 284; //@line 8622
    HEAP32[$AsyncCtx15 + 4 >> 2] = $29; //@line 8624
    HEAP32[$AsyncCtx15 + 8 >> 2] = $45; //@line 8626
    HEAP32[$AsyncCtx15 + 12 >> 2] = $4; //@line 8628
    HEAP32[$AsyncCtx15 + 16 >> 2] = $5; //@line 8630
    sp = STACKTOP; //@line 8631
    STACKTOP = sp; //@line 8632
    return 0; //@line 8632
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8634
    $$0$i = $52; //@line 8635
    break;
   }
  }
 } while (0);
 $57 = HEAP32[$29 >> 2] | 0; //@line 8640
 do {
  if ($57 | 0) {
   $60 = HEAP32[$57 + 8 >> 2] | 0; //@line 8645
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8646
   FUNCTION_TABLE_vi[$60 & 1023]($4); //@line 8647
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 285; //@line 8650
    HEAP32[$AsyncCtx8 + 4 >> 2] = $45; //@line 8652
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 8654
    HEAP32[$AsyncCtx8 + 12 >> 2] = $5; //@line 8656
    sp = STACKTOP; //@line 8657
    STACKTOP = sp; //@line 8658
    return 0; //@line 8658
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 8660
    break;
   }
  }
 } while (0);
 $64 = HEAP32[$45 >> 2] | 0; //@line 8665
 if (!$64) {
  STACKTOP = sp; //@line 8668
  return $$0$i | 0; //@line 8668
 }
 $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 8671
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8672
 FUNCTION_TABLE_vi[$67 & 1023]($5); //@line 8673
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 286; //@line 8676
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 8678
  sp = STACKTOP; //@line 8679
  STACKTOP = sp; //@line 8680
  return 0; //@line 8680
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 8682
 STACKTOP = sp; //@line 8683
 return $$0$i | 0; //@line 8683
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_480($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 35781
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35783
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35785
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 35791
 $9 = $4 + 16 | 0; //@line 35792
 $10 = $4 + 28 | 0; //@line 35793
 $11 = HEAP32[$10 >> 2] | 0; //@line 35794
 if ($11 | 0) {
  $13 = $2 + 1896 | 0; //@line 35797
  if (($13 | 0) != ($9 | 0)) {
   $15 = $2 + 1908 | 0; //@line 35800
   $16 = HEAP32[$15 >> 2] | 0; //@line 35801
   if (!$16) {
    $27 = HEAP32[$11 + 4 >> 2] | 0; //@line 35805
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 35806
    FUNCTION_TABLE_vii[$27 & 31]($13, $9); //@line 35807
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 318; //@line 35810
     $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 35811
     HEAP32[$28 >> 2] = $10; //@line 35812
     $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 35813
     HEAP32[$29 >> 2] = $15; //@line 35814
     $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 35815
     HEAP32[$30 >> 2] = $4; //@line 35816
     $31 = $ReallocAsyncCtx4 + 16 | 0; //@line 35817
     HEAP32[$31 >> 2] = $2; //@line 35818
     sp = STACKTOP; //@line 35819
     return;
    }
    ___async_unwind = 0; //@line 35822
    HEAP32[$ReallocAsyncCtx4 >> 2] = 318; //@line 35823
    $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 35824
    HEAP32[$28 >> 2] = $10; //@line 35825
    $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 35826
    HEAP32[$29 >> 2] = $15; //@line 35827
    $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 35828
    HEAP32[$30 >> 2] = $4; //@line 35829
    $31 = $ReallocAsyncCtx4 + 16 | 0; //@line 35830
    HEAP32[$31 >> 2] = $2; //@line 35831
    sp = STACKTOP; //@line 35832
    return;
   } else {
    $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 35836
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 35837
    FUNCTION_TABLE_vi[$19 & 1023]($13); //@line 35838
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 317; //@line 35841
     $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 35842
     HEAP32[$20 >> 2] = $10; //@line 35843
     $21 = $ReallocAsyncCtx3 + 8 | 0; //@line 35844
     HEAP32[$21 >> 2] = $15; //@line 35845
     $22 = $ReallocAsyncCtx3 + 12 | 0; //@line 35846
     HEAP32[$22 >> 2] = $13; //@line 35847
     $23 = $ReallocAsyncCtx3 + 16 | 0; //@line 35848
     HEAP32[$23 >> 2] = $9; //@line 35849
     $24 = $ReallocAsyncCtx3 + 20 | 0; //@line 35850
     HEAP32[$24 >> 2] = $4; //@line 35851
     $25 = $ReallocAsyncCtx3 + 24 | 0; //@line 35852
     HEAP32[$25 >> 2] = $2; //@line 35853
     sp = STACKTOP; //@line 35854
     return;
    }
    ___async_unwind = 0; //@line 35857
    HEAP32[$ReallocAsyncCtx3 >> 2] = 317; //@line 35858
    $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 35859
    HEAP32[$20 >> 2] = $10; //@line 35860
    $21 = $ReallocAsyncCtx3 + 8 | 0; //@line 35861
    HEAP32[$21 >> 2] = $15; //@line 35862
    $22 = $ReallocAsyncCtx3 + 12 | 0; //@line 35863
    HEAP32[$22 >> 2] = $13; //@line 35864
    $23 = $ReallocAsyncCtx3 + 16 | 0; //@line 35865
    HEAP32[$23 >> 2] = $9; //@line 35866
    $24 = $ReallocAsyncCtx3 + 20 | 0; //@line 35867
    HEAP32[$24 >> 2] = $4; //@line 35868
    $25 = $ReallocAsyncCtx3 + 24 | 0; //@line 35869
    HEAP32[$25 >> 2] = $2; //@line 35870
    sp = STACKTOP; //@line 35871
    return;
   }
  }
 }
 $32 = $4 + 32 | 0; //@line 35876
 $33 = $4 + 44 | 0; //@line 35877
 $34 = HEAP32[$33 >> 2] | 0; //@line 35878
 if (!$34) {
  return;
 }
 $36 = $2 + 1912 | 0; //@line 35883
 if (($36 | 0) == ($32 | 0)) {
  return;
 }
 $38 = $2 + 1924 | 0; //@line 35888
 $39 = HEAP32[$38 >> 2] | 0; //@line 35889
 if (!$39) {
  $48 = HEAP32[$34 + 4 >> 2] | 0; //@line 35893
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 35894
  FUNCTION_TABLE_vii[$48 & 31]($36, $32); //@line 35895
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 320; //@line 35898
   $49 = $ReallocAsyncCtx6 + 4 | 0; //@line 35899
   HEAP32[$49 >> 2] = $33; //@line 35900
   $50 = $ReallocAsyncCtx6 + 8 | 0; //@line 35901
   HEAP32[$50 >> 2] = $38; //@line 35902
   sp = STACKTOP; //@line 35903
   return;
  }
  ___async_unwind = 0; //@line 35906
  HEAP32[$ReallocAsyncCtx6 >> 2] = 320; //@line 35907
  $49 = $ReallocAsyncCtx6 + 4 | 0; //@line 35908
  HEAP32[$49 >> 2] = $33; //@line 35909
  $50 = $ReallocAsyncCtx6 + 8 | 0; //@line 35910
  HEAP32[$50 >> 2] = $38; //@line 35911
  sp = STACKTOP; //@line 35912
  return;
 } else {
  $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 35916
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 35917
  FUNCTION_TABLE_vi[$42 & 1023]($36); //@line 35918
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 319; //@line 35921
   $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 35922
   HEAP32[$43 >> 2] = $33; //@line 35923
   $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 35924
   HEAP32[$44 >> 2] = $38; //@line 35925
   $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 35926
   HEAP32[$45 >> 2] = $36; //@line 35927
   $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 35928
   HEAP32[$46 >> 2] = $32; //@line 35929
   sp = STACKTOP; //@line 35930
   return;
  }
  ___async_unwind = 0; //@line 35933
  HEAP32[$ReallocAsyncCtx5 >> 2] = 319; //@line 35934
  $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 35935
  HEAP32[$43 >> 2] = $33; //@line 35936
  $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 35937
  HEAP32[$44 >> 2] = $38; //@line 35938
  $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 35939
  HEAP32[$45 >> 2] = $36; //@line 35940
  $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 35941
  HEAP32[$46 >> 2] = $32; //@line 35942
  sp = STACKTOP; //@line 35943
  return;
 }
}
function __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$sroa$5 = 0, $$sroa$5$0$$sroa_raw_idx = 0, $34 = 0, $39 = 0, $40 = 0, $45 = 0, sp = 0;
 sp = STACKTOP; //@line 23173
 STACKTOP = STACKTOP + 16 | 0; //@line 23174
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 23174
 $$sroa$5 = sp; //@line 23175
 L1 : do {
  if (!$1) {
   $$0 = -1003; //@line 23179
  } else {
   do {
    switch (HEAP32[$1 >> 2] | 0) {
    case 0:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 >> 2]; //@line 23187
      $$0 = 0; //@line 23188
      break L1;
      break;
     }
    case 1:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 12 >> 0] | 0; //@line 23196
      $$0 = 0; //@line 23197
      break L1;
      break;
     }
    case 2:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 796 >> 0] | 0; //@line 23205
      $$0 = 0; //@line 23206
      break L1;
      break;
     }
    case 3:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 588 >> 2]; //@line 23214
      $$0 = 0; //@line 23215
      break L1;
      break;
     }
    case 4:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 592 >> 2]; //@line 23223
      $$0 = 0; //@line 23224
      break L1;
      break;
     }
    case 5:
     {
      HEAP32[$1 + 4 >> 2] = $2 + 552; //@line 23231
      $$0 = 0; //@line 23232
      break L1;
      break;
     }
    case 6:
     {
      HEAP32[$1 + 4 >> 2] = $2 + 568; //@line 23239
      $$0 = 0; //@line 23240
      break L1;
      break;
     }
    case 7:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 8 >> 0] | 0; //@line 23248
      $$0 = 0; //@line 23249
      break L1;
      break;
     }
    case 8:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 9 >> 0] | 0; //@line 23257
      $$0 = 0; //@line 23258
      break L1;
      break;
     }
    case 9:
     {
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY16get_phy_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 23266
      $$0 = 0; //@line 23267
      break L1;
      break;
     }
    case 10:
     {
      $34 = $2 + 772 | 0; //@line 23274
      $39 = HEAP32[$34 + 4 >> 2] | 0; //@line 23279
      $40 = $1 + 4 | 0; //@line 23280
      HEAP32[$40 >> 2] = HEAP32[$34 >> 2]; //@line 23282
      HEAP32[$40 + 4 >> 2] = $39; //@line 23285
      $$0 = 0; //@line 23286
      break L1;
      break;
     }
    case 11:
     {
      $45 = __ZN7LoRaPHY24get_default_rx2_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 23292
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY25get_default_rx2_frequencyEv(HEAP32[$0 >> 2] | 0) | 0; //@line 23296
      HEAP8[$1 + 8 >> 0] = $45; //@line 23298
      $$sroa$5$0$$sroa_raw_idx = $1 + 9 | 0; //@line 23299
      HEAP8[$$sroa$5$0$$sroa_raw_idx >> 0] = HEAP8[$$sroa$5 >> 0] | 0; //@line 23300
      HEAP8[$$sroa$5$0$$sroa_raw_idx + 1 >> 0] = HEAP8[$$sroa$5 + 1 >> 0] | 0; //@line 23300
      HEAP8[$$sroa$5$0$$sroa_raw_idx + 2 >> 0] = HEAP8[$$sroa$5 + 2 >> 0] | 0; //@line 23300
      $$0 = 0; //@line 23301
      break L1;
      break;
     }
    case 13:
     {
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 1) | 0; //@line 23309
      $$0 = 0; //@line 23310
      break L1;
      break;
     }
    case 12:
     {
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 23318
      $$0 = 0; //@line 23319
      break L1;
      break;
     }
    case 14:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 768 >> 0] | 0; //@line 23327
      $$0 = 0; //@line 23328
      break L1;
      break;
     }
    case 15:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 748 >> 2]; //@line 23336
      $$0 = 0; //@line 23337
      break L1;
      break;
     }
    case 16:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 752 >> 2]; //@line 23345
      $$0 = 0; //@line 23346
      break L1;
      break;
     }
    case 17:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 756 >> 2]; //@line 23354
      $$0 = 0; //@line 23355
      break L1;
      break;
     }
    case 18:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 760 >> 2]; //@line 23363
      $$0 = 0; //@line 23364
      break L1;
      break;
     }
    case 19:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 764 >> 2]; //@line 23372
      $$0 = 0; //@line 23373
      break L1;
      break;
     }
    case 20:
     {
      HEAP8[$1 + 4 >> 0] = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 23381
      $$0 = 0; //@line 23382
      break L1;
      break;
     }
    case 21:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 737 >> 0] | 0; //@line 23390
      $$0 = 0; //@line 23391
      break L1;
      break;
     }
    case 23:
     {
      HEAP8[$1 + 4 >> 0] = __ZN7LoRaPHY20get_default_tx_powerEv(HEAP32[$0 >> 2] | 0) | 0; //@line 23399
      $$0 = 0; //@line 23400
      break L1;
      break;
     }
    case 22:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 736 >> 0] | 0; //@line 23408
      $$0 = 0; //@line 23409
      break L1;
      break;
     }
    case 24:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 596 >> 2]; //@line 23417
      $$0 = 0; //@line 23418
      break L1;
      break;
     }
    case 25:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 600 >> 2]; //@line 23426
      $$0 = 0; //@line 23427
      break L1;
      break;
     }
    case 26:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 848 >> 2]; //@line 23435
      $$0 = 0; //@line 23436
      break L1;
      break;
     }
    case 27:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 740 >> 2]; //@line 23444
      $$0 = 0; //@line 23445
      break L1;
      break;
     }
    case 28:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 744 >> 0] | 0; //@line 23453
      $$0 = 0; //@line 23454
      break L1;
      break;
     }
    case 29:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 788 >> 2]; //@line 23462
      $$0 = 0; //@line 23463
      break L1;
      break;
     }
    default:
     {
      $$0 = -1002; //@line 23468
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 STACKTOP = sp; //@line 23475
 return $$0 | 0; //@line 23475
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_396($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27721
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27723
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27725
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27729
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27731
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27733
 $13 = $4 + 12 | 0; //@line 27735
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 27736
 $14 = $4 + 16 | 0; //@line 27737
 HEAP32[$14 >> 2] = $10; //@line 27738
 $15 = _equeue_alloc($12, 20) | 0; //@line 27739
 if ($15 | 0) {
  $17 = HEAP32[$13 >> 2] | 0; //@line 27742
  if (!$17) {
   HEAP32[$15 + 12 >> 2] = 0; //@line 27746
   HEAP32[$15 + 16 >> 2] = HEAP32[$14 >> 2]; //@line 27749
   _equeue_event_dtor($15, 274); //@line 27750
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 27751
   $32 = _equeue_post($12, 275, $15) | 0; //@line 27752
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 276; //@line 27755
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 27756
    HEAP32[$33 >> 2] = $13; //@line 27757
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 27758
    HEAP32[$34 >> 2] = $8; //@line 27759
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 27760
    HEAP32[$35 >> 2] = $4; //@line 27761
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 27762
    HEAP32[$36 >> 2] = $2; //@line 27763
    sp = STACKTOP; //@line 27764
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 27768
   ___async_unwind = 0; //@line 27769
   HEAP32[$ReallocAsyncCtx6 >> 2] = 276; //@line 27770
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 27771
   HEAP32[$33 >> 2] = $13; //@line 27772
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 27773
   HEAP32[$34 >> 2] = $8; //@line 27774
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 27775
   HEAP32[$35 >> 2] = $4; //@line 27776
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 27777
   HEAP32[$36 >> 2] = $2; //@line 27778
   sp = STACKTOP; //@line 27779
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 27783
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 27784
   FUNCTION_TABLE_vii[$20 & 31]($15, $4); //@line 27785
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 273; //@line 27788
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 27789
    HEAP32[$21 >> 2] = $13; //@line 27790
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 27791
    HEAP32[$22 >> 2] = $15; //@line 27792
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 27793
    HEAP32[$23 >> 2] = $14; //@line 27794
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 27795
    HEAP32[$24 >> 2] = $12; //@line 27796
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 27797
    HEAP32[$25 >> 2] = $13; //@line 27798
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 27799
    HEAP32[$26 >> 2] = $8; //@line 27800
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 27801
    HEAP32[$27 >> 2] = $4; //@line 27802
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 27803
    HEAP32[$28 >> 2] = $2; //@line 27804
    sp = STACKTOP; //@line 27805
    return;
   }
   ___async_unwind = 0; //@line 27808
   HEAP32[$ReallocAsyncCtx3 >> 2] = 273; //@line 27809
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 27810
   HEAP32[$21 >> 2] = $13; //@line 27811
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 27812
   HEAP32[$22 >> 2] = $15; //@line 27813
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 27814
   HEAP32[$23 >> 2] = $14; //@line 27815
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 27816
   HEAP32[$24 >> 2] = $12; //@line 27817
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 27818
   HEAP32[$25 >> 2] = $13; //@line 27819
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 27820
   HEAP32[$26 >> 2] = $8; //@line 27821
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 27822
   HEAP32[$27 >> 2] = $4; //@line 27823
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 27824
   HEAP32[$28 >> 2] = $2; //@line 27825
   sp = STACKTOP; //@line 27826
   return;
  }
 }
 $38 = HEAP32[$13 >> 2] | 0; //@line 27830
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 27834
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 27835
  FUNCTION_TABLE_vi[$41 & 1023]($4); //@line 27836
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 277; //@line 27839
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 27840
   HEAP32[$42 >> 2] = $8; //@line 27841
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 27842
   HEAP32[$43 >> 2] = 0; //@line 27843
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 27844
   HEAP32[$44 >> 2] = $2; //@line 27845
   sp = STACKTOP; //@line 27846
   return;
  }
  ___async_unwind = 0; //@line 27849
  HEAP32[$ReallocAsyncCtx4 >> 2] = 277; //@line 27850
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 27851
  HEAP32[$42 >> 2] = $8; //@line 27852
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 27853
  HEAP32[$43 >> 2] = 0; //@line 27854
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 27855
  HEAP32[$44 >> 2] = $2; //@line 27856
  sp = STACKTOP; //@line 27857
  return;
 }
 $45 = HEAP32[$8 >> 2] | 0; //@line 27860
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 27864
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 27868
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 27869
 FUNCTION_TABLE_vi[$48 & 1023]($2); //@line 27870
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 27873
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 27874
  HEAP32[$49 >> 2] = 0; //@line 27875
  sp = STACKTOP; //@line 27876
  return;
 }
 ___async_unwind = 0; //@line 27879
 HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 27880
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 27881
 HEAP32[$49 >> 2] = 0; //@line 27882
 sp = STACKTOP; //@line 27883
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $20 = 0, $34 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 2249
 STACKTOP = STACKTOP + 64 | 0; //@line 2250
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 2250
 $vararg_buffer12 = sp + 48 | 0; //@line 2251
 $vararg_buffer10 = sp + 40 | 0; //@line 2252
 $vararg_buffer7 = sp + 32 | 0; //@line 2253
 $vararg_buffer5 = sp + 24 | 0; //@line 2254
 $vararg_buffer1 = sp + 8 | 0; //@line 2255
 _printf(10904, sp) | 0; //@line 2257
 $5 = $3 & 65535; //@line 2259
 HEAP32[$vararg_buffer1 >> 2] = $1; //@line 2260
 HEAP32[$vararg_buffer1 + 4 >> 2] = $2 << 24 >> 24; //@line 2262
 HEAP32[$vararg_buffer1 + 8 >> 2] = $5; //@line 2264
 _printf(10918, $vararg_buffer1) | 0; //@line 2265
 $AsyncCtx27 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2266
 _putchar(10) | 0; //@line 2267
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 106; //@line 2270
  HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 2272
  HEAP32[$AsyncCtx27 + 8 >> 2] = $1; //@line 2274
  HEAP8[$AsyncCtx27 + 12 >> 0] = $2; //@line 2276
  HEAP32[$AsyncCtx27 + 16 >> 2] = $5; //@line 2278
  HEAP32[$AsyncCtx27 + 20 >> 2] = $vararg_buffer5; //@line 2280
  HEAP32[$AsyncCtx27 + 24 >> 2] = $vararg_buffer5; //@line 2282
  HEAP32[$AsyncCtx27 + 28 >> 2] = $vararg_buffer7; //@line 2284
  HEAP32[$AsyncCtx27 + 32 >> 2] = $vararg_buffer7; //@line 2286
  HEAP32[$AsyncCtx27 + 36 >> 2] = $vararg_buffer10; //@line 2288
  HEAP32[$AsyncCtx27 + 40 >> 2] = $vararg_buffer10; //@line 2290
  HEAP32[$AsyncCtx27 + 44 >> 2] = $vararg_buffer12; //@line 2292
  HEAP32[$AsyncCtx27 + 48 >> 2] = $vararg_buffer12; //@line 2294
  sp = STACKTOP; //@line 2295
  STACKTOP = sp; //@line 2296
  return;
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 2298
 $20 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 2301
 $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 2302
 FUNCTION_TABLE_vii[$20 & 31]($0, $1); //@line 2303
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 107; //@line 2306
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2308
  HEAP8[$AsyncCtx + 8 >> 0] = $2; //@line 2310
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 2312
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer5; //@line 2314
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer5; //@line 2316
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer7; //@line 2318
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer7; //@line 2320
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer10; //@line 2322
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer10; //@line 2324
  HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer12; //@line 2326
  HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer12; //@line 2328
  sp = STACKTOP; //@line 2329
  STACKTOP = sp; //@line 2330
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2332
 $34 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 2335
 $AsyncCtx16 = _emscripten_alloc_async_context(40, sp) | 0; //@line 2336
 FUNCTION_TABLE_viiiiiiiiiiiiii[$34 & 1]($0, 0, $2, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $5); //@line 2337
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 108; //@line 2340
  HEAP32[$AsyncCtx16 + 4 >> 2] = $0; //@line 2342
  HEAP32[$AsyncCtx16 + 8 >> 2] = $vararg_buffer5; //@line 2344
  HEAP32[$AsyncCtx16 + 12 >> 2] = $vararg_buffer5; //@line 2346
  HEAP32[$AsyncCtx16 + 16 >> 2] = $vararg_buffer7; //@line 2348
  HEAP32[$AsyncCtx16 + 20 >> 2] = $vararg_buffer7; //@line 2350
  HEAP32[$AsyncCtx16 + 24 >> 2] = $vararg_buffer10; //@line 2352
  HEAP32[$AsyncCtx16 + 28 >> 2] = $vararg_buffer10; //@line 2354
  HEAP32[$AsyncCtx16 + 32 >> 2] = $vararg_buffer12; //@line 2356
  HEAP32[$AsyncCtx16 + 36 >> 2] = $vararg_buffer12; //@line 2358
  sp = STACKTOP; //@line 2359
  STACKTOP = sp; //@line 2360
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 2362
 HEAP8[$0 + 688 >> 0] = 2; //@line 2364
 _printf(10904, $vararg_buffer5) | 0; //@line 2365
 HEAP32[$vararg_buffer7 >> 2] = 3; //@line 2366
 _printf(10970, $vararg_buffer7) | 0; //@line 2367
 $AsyncCtx23 = _emscripten_alloc_async_context(24, sp) | 0; //@line 2368
 _putchar(10) | 0; //@line 2369
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 109; //@line 2372
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 2374
  HEAP32[$AsyncCtx23 + 8 >> 2] = $vararg_buffer10; //@line 2376
  HEAP32[$AsyncCtx23 + 12 >> 2] = $vararg_buffer10; //@line 2378
  HEAP32[$AsyncCtx23 + 16 >> 2] = $vararg_buffer12; //@line 2380
  HEAP32[$AsyncCtx23 + 20 >> 2] = $vararg_buffer12; //@line 2382
  sp = STACKTOP; //@line 2383
  STACKTOP = sp; //@line 2384
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 2386
 $AsyncCtx30 = _emscripten_alloc_async_context(20, sp) | 0; //@line 2387
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 2388
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 110; //@line 2391
  HEAP32[$AsyncCtx30 + 4 >> 2] = $vararg_buffer10; //@line 2393
  HEAP32[$AsyncCtx30 + 8 >> 2] = $vararg_buffer10; //@line 2395
  HEAP32[$AsyncCtx30 + 12 >> 2] = $vararg_buffer12; //@line 2397
  HEAP32[$AsyncCtx30 + 16 >> 2] = $vararg_buffer12; //@line 2399
  sp = STACKTOP; //@line 2400
  STACKTOP = sp; //@line 2401
  return;
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 2403
 _printf(10904, $vararg_buffer10) | 0; //@line 2404
 HEAP32[$vararg_buffer12 >> 2] = 3; //@line 2405
 _printf(10999, $vararg_buffer12) | 0; //@line 2406
 $AsyncCtx19 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2407
 _putchar(10) | 0; //@line 2408
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 111; //@line 2411
  sp = STACKTOP; //@line 2412
  STACKTOP = sp; //@line 2413
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 2415
  STACKTOP = sp; //@line 2416
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$pre$i = 0, $10 = 0, $16 = 0, $19 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $34 = 0, $4 = 0, $41 = 0, $45 = 0, $48 = 0, $5 = 0, $53 = 0, $56 = 0, $6 = 0, $60 = 0, $63 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8281
 STACKTOP = STACKTOP + 48 | 0; //@line 8282
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 8282
 $3 = sp + 16 | 0; //@line 8283
 $4 = sp; //@line 8284
 $5 = $1 + 12 | 0; //@line 8285
 $6 = HEAP32[$5 >> 2] | 0; //@line 8286
 do {
  if (!$6) {
   $8 = $4 + 12 | 0; //@line 8290
   HEAP32[$8 >> 2] = 0; //@line 8291
   $27 = 0; //@line 8292
   $41 = $8; //@line 8292
  } else {
   $10 = HEAP32[$6 + 4 >> 2] | 0; //@line 8295
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 8296
   FUNCTION_TABLE_vii[$10 & 31]($4, $1); //@line 8297
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 271; //@line 8300
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 8302
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 8304
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 8306
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 8308
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 8310
    sp = STACKTOP; //@line 8311
    STACKTOP = sp; //@line 8312
    return 0; //@line 8312
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 8314
   $$pre$i = HEAP32[$5 >> 2] | 0; //@line 8315
   $16 = $4 + 12 | 0; //@line 8316
   HEAP32[$16 >> 2] = $$pre$i; //@line 8317
   if (!$$pre$i) {
    $27 = 0; //@line 8320
    $41 = $16; //@line 8320
   } else {
    $19 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 8324
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8325
    FUNCTION_TABLE_vii[$19 & 31]($3, $4); //@line 8326
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 272; //@line 8329
     HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 8331
     HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 8333
     HEAP32[$AsyncCtx2 + 12 >> 2] = $16; //@line 8335
     HEAP32[$AsyncCtx2 + 16 >> 2] = $16; //@line 8337
     HEAP32[$AsyncCtx2 + 20 >> 2] = $2; //@line 8339
     HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 8341
     sp = STACKTOP; //@line 8342
     STACKTOP = sp; //@line 8343
     return 0; //@line 8343
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8345
     $27 = HEAP32[$16 >> 2] | 0; //@line 8347
     $41 = $16; //@line 8347
     break;
    }
   }
  }
 } while (0);
 $26 = $3 + 12 | 0; //@line 8353
 HEAP32[$26 >> 2] = $27; //@line 8354
 $28 = $3 + 16 | 0; //@line 8355
 HEAP32[$28 >> 2] = $2; //@line 8356
 $29 = _equeue_alloc($0, 20) | 0; //@line 8357
 do {
  if (!$29) {
   $$0$i = 0; //@line 8361
  } else {
   $31 = HEAP32[$26 >> 2] | 0; //@line 8363
   do {
    if (!$31) {
     $45 = 0; //@line 8367
    } else {
     $34 = HEAP32[$31 + 4 >> 2] | 0; //@line 8370
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8371
     FUNCTION_TABLE_vii[$34 & 31]($29, $3); //@line 8372
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 273; //@line 8375
      HEAP32[$AsyncCtx5 + 4 >> 2] = $26; //@line 8377
      HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 8379
      HEAP32[$AsyncCtx5 + 12 >> 2] = $28; //@line 8381
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 8383
      HEAP32[$AsyncCtx5 + 20 >> 2] = $26; //@line 8385
      HEAP32[$AsyncCtx5 + 24 >> 2] = $41; //@line 8387
      HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 8389
      HEAP32[$AsyncCtx5 + 32 >> 2] = $4; //@line 8391
      sp = STACKTOP; //@line 8392
      STACKTOP = sp; //@line 8393
      return 0; //@line 8393
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8395
      $45 = HEAP32[$26 >> 2] | 0; //@line 8397
      break;
     }
    }
   } while (0);
   HEAP32[$29 + 12 >> 2] = $45; //@line 8403
   HEAP32[$29 + 16 >> 2] = HEAP32[$28 >> 2]; //@line 8406
   _equeue_event_dtor($29, 274); //@line 8407
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8408
   $48 = _equeue_post($0, 275, $29) | 0; //@line 8409
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 276; //@line 8412
    HEAP32[$AsyncCtx15 + 4 >> 2] = $26; //@line 8414
    HEAP32[$AsyncCtx15 + 8 >> 2] = $41; //@line 8416
    HEAP32[$AsyncCtx15 + 12 >> 2] = $3; //@line 8418
    HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 8420
    sp = STACKTOP; //@line 8421
    STACKTOP = sp; //@line 8422
    return 0; //@line 8422
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8424
    $$0$i = $48; //@line 8425
    break;
   }
  }
 } while (0);
 $53 = HEAP32[$26 >> 2] | 0; //@line 8430
 do {
  if ($53 | 0) {
   $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 8435
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8436
   FUNCTION_TABLE_vi[$56 & 1023]($3); //@line 8437
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 277; //@line 8440
    HEAP32[$AsyncCtx8 + 4 >> 2] = $41; //@line 8442
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 8444
    HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 8446
    sp = STACKTOP; //@line 8447
    STACKTOP = sp; //@line 8448
    return 0; //@line 8448
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 8450
    break;
   }
  }
 } while (0);
 $60 = HEAP32[$41 >> 2] | 0; //@line 8455
 if (!$60) {
  STACKTOP = sp; //@line 8458
  return $$0$i | 0; //@line 8458
 }
 $63 = HEAP32[$60 + 8 >> 2] | 0; //@line 8461
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8462
 FUNCTION_TABLE_vi[$63 & 1023]($4); //@line 8463
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 278; //@line 8466
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 8468
  sp = STACKTOP; //@line 8469
  STACKTOP = sp; //@line 8470
  return 0; //@line 8470
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 8472
 STACKTOP = sp; //@line 8473
 return $$0$i | 0; //@line 8473
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_448($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 32489
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32491
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32493
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32495
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32499
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32501
 $13 = $10 + 12 | 0; //@line 32502
 HEAP32[$10 >> 2] = 573; //@line 32503
 HEAP32[$10 + 4 >> 2] = 0; //@line 32505
 HEAP32[$10 + 8 >> 2] = $4; //@line 32507
 HEAP32[$13 >> 2] = 848; //@line 32508
 $14 = $4 + 1276 | 0; //@line 32509
 if (($14 | 0) == ($10 | 0)) {
  $39 = HEAP32[214] | 0; //@line 32513
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 32514
  FUNCTION_TABLE_vi[$39 & 1023]($10); //@line 32515
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 576; //@line 32518
   $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 32519
   HEAP32[$40 >> 2] = $2; //@line 32520
   $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 32521
   HEAP32[$41 >> 2] = $4; //@line 32522
   $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 32523
   HEAP32[$42 >> 2] = $10; //@line 32524
   $43 = $ReallocAsyncCtx9 + 16 | 0; //@line 32525
   HEAP32[$43 >> 2] = $6; //@line 32526
   $44 = $ReallocAsyncCtx9 + 20 | 0; //@line 32527
   HEAP32[$44 >> 2] = $12; //@line 32528
   sp = STACKTOP; //@line 32529
   return;
  }
  ___async_unwind = 0; //@line 32532
  HEAP32[$ReallocAsyncCtx9 >> 2] = 576; //@line 32533
  $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 32534
  HEAP32[$40 >> 2] = $2; //@line 32535
  $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 32536
  HEAP32[$41 >> 2] = $4; //@line 32537
  $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 32538
  HEAP32[$42 >> 2] = $10; //@line 32539
  $43 = $ReallocAsyncCtx9 + 16 | 0; //@line 32540
  HEAP32[$43 >> 2] = $6; //@line 32541
  $44 = $ReallocAsyncCtx9 + 20 | 0; //@line 32542
  HEAP32[$44 >> 2] = $12; //@line 32543
  sp = STACKTOP; //@line 32544
  return;
 }
 $16 = $4 + 1288 | 0; //@line 32547
 $17 = HEAP32[$16 >> 2] | 0; //@line 32548
 if (!$17) {
  $30 = HEAP32[213] | 0; //@line 32552
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 32553
  FUNCTION_TABLE_vii[$30 & 31]($14, $10); //@line 32554
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 575; //@line 32557
   $31 = $ReallocAsyncCtx8 + 4 | 0; //@line 32558
   HEAP32[$31 >> 2] = $2; //@line 32559
   $32 = $ReallocAsyncCtx8 + 8 | 0; //@line 32560
   HEAP32[$32 >> 2] = $4; //@line 32561
   $33 = $ReallocAsyncCtx8 + 12 | 0; //@line 32562
   HEAP32[$33 >> 2] = $10; //@line 32563
   $34 = $ReallocAsyncCtx8 + 16 | 0; //@line 32564
   HEAP32[$34 >> 2] = $6; //@line 32565
   $35 = $ReallocAsyncCtx8 + 20 | 0; //@line 32566
   HEAP32[$35 >> 2] = $13; //@line 32567
   $36 = $ReallocAsyncCtx8 + 24 | 0; //@line 32568
   HEAP32[$36 >> 2] = $16; //@line 32569
   $37 = $ReallocAsyncCtx8 + 28 | 0; //@line 32570
   HEAP32[$37 >> 2] = $12; //@line 32571
   sp = STACKTOP; //@line 32572
   return;
  }
  ___async_unwind = 0; //@line 32575
  HEAP32[$ReallocAsyncCtx8 >> 2] = 575; //@line 32576
  $31 = $ReallocAsyncCtx8 + 4 | 0; //@line 32577
  HEAP32[$31 >> 2] = $2; //@line 32578
  $32 = $ReallocAsyncCtx8 + 8 | 0; //@line 32579
  HEAP32[$32 >> 2] = $4; //@line 32580
  $33 = $ReallocAsyncCtx8 + 12 | 0; //@line 32581
  HEAP32[$33 >> 2] = $10; //@line 32582
  $34 = $ReallocAsyncCtx8 + 16 | 0; //@line 32583
  HEAP32[$34 >> 2] = $6; //@line 32584
  $35 = $ReallocAsyncCtx8 + 20 | 0; //@line 32585
  HEAP32[$35 >> 2] = $13; //@line 32586
  $36 = $ReallocAsyncCtx8 + 24 | 0; //@line 32587
  HEAP32[$36 >> 2] = $16; //@line 32588
  $37 = $ReallocAsyncCtx8 + 28 | 0; //@line 32589
  HEAP32[$37 >> 2] = $12; //@line 32590
  sp = STACKTOP; //@line 32591
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 32595
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 32596
  FUNCTION_TABLE_vi[$20 & 1023]($14); //@line 32597
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 574; //@line 32600
   $21 = $ReallocAsyncCtx7 + 4 | 0; //@line 32601
   HEAP32[$21 >> 2] = $2; //@line 32602
   $22 = $ReallocAsyncCtx7 + 8 | 0; //@line 32603
   HEAP32[$22 >> 2] = $4; //@line 32604
   $23 = $ReallocAsyncCtx7 + 12 | 0; //@line 32605
   HEAP32[$23 >> 2] = $10; //@line 32606
   $24 = $ReallocAsyncCtx7 + 16 | 0; //@line 32607
   HEAP32[$24 >> 2] = $6; //@line 32608
   $25 = $ReallocAsyncCtx7 + 20 | 0; //@line 32609
   HEAP32[$25 >> 2] = $14; //@line 32610
   $26 = $ReallocAsyncCtx7 + 24 | 0; //@line 32611
   HEAP32[$26 >> 2] = $16; //@line 32612
   $27 = $ReallocAsyncCtx7 + 28 | 0; //@line 32613
   HEAP32[$27 >> 2] = $13; //@line 32614
   $28 = $ReallocAsyncCtx7 + 32 | 0; //@line 32615
   HEAP32[$28 >> 2] = $12; //@line 32616
   sp = STACKTOP; //@line 32617
   return;
  }
  ___async_unwind = 0; //@line 32620
  HEAP32[$ReallocAsyncCtx7 >> 2] = 574; //@line 32621
  $21 = $ReallocAsyncCtx7 + 4 | 0; //@line 32622
  HEAP32[$21 >> 2] = $2; //@line 32623
  $22 = $ReallocAsyncCtx7 + 8 | 0; //@line 32624
  HEAP32[$22 >> 2] = $4; //@line 32625
  $23 = $ReallocAsyncCtx7 + 12 | 0; //@line 32626
  HEAP32[$23 >> 2] = $10; //@line 32627
  $24 = $ReallocAsyncCtx7 + 16 | 0; //@line 32628
  HEAP32[$24 >> 2] = $6; //@line 32629
  $25 = $ReallocAsyncCtx7 + 20 | 0; //@line 32630
  HEAP32[$25 >> 2] = $14; //@line 32631
  $26 = $ReallocAsyncCtx7 + 24 | 0; //@line 32632
  HEAP32[$26 >> 2] = $16; //@line 32633
  $27 = $ReallocAsyncCtx7 + 28 | 0; //@line 32634
  HEAP32[$27 >> 2] = $13; //@line 32635
  $28 = $ReallocAsyncCtx7 + 32 | 0; //@line 32636
  HEAP32[$28 >> 2] = $12; //@line 32637
  sp = STACKTOP; //@line 32638
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_316($0) {
 $0 = $0 | 0;
 var $$pre17 = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17125
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17127
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17129
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17131
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 17136
  _mbed_assert_internal(12851, 12860, 217); //@line 17137
  if (___async) {
   HEAP32[$ReallocAsyncCtx16 >> 2] = 475; //@line 17140
   $9 = $ReallocAsyncCtx16 + 4 | 0; //@line 17141
   HEAP32[$9 >> 2] = $2; //@line 17142
   $10 = $ReallocAsyncCtx16 + 8 | 0; //@line 17143
   HEAP32[$10 >> 2] = $4; //@line 17144
   $11 = $ReallocAsyncCtx16 + 12 | 0; //@line 17145
   HEAP32[$11 >> 2] = $6; //@line 17146
   sp = STACKTOP; //@line 17147
   return;
  }
  ___async_unwind = 0; //@line 17150
  HEAP32[$ReallocAsyncCtx16 >> 2] = 475; //@line 17151
  $9 = $ReallocAsyncCtx16 + 4 | 0; //@line 17152
  HEAP32[$9 >> 2] = $2; //@line 17153
  $10 = $ReallocAsyncCtx16 + 8 | 0; //@line 17154
  HEAP32[$10 >> 2] = $4; //@line 17155
  $11 = $ReallocAsyncCtx16 + 12 | 0; //@line 17156
  HEAP32[$11 >> 2] = $6; //@line 17157
  sp = STACKTOP; //@line 17158
  return;
 }
 HEAP32[$6 + 364 >> 2] = 2; //@line 17162
 $$pre17 = HEAP8[$2 >> 0] | 0; //@line 17163
 if (!($$pre17 & 4)) {
  $16 = HEAP32[$6 + 1324 >> 2] | 0; //@line 17168
  $17 = $16 + 16 | 0; //@line 17169
  $19 = __ZN11LoRaMacMcps14get_indicationEv($6 + 288 | 0) | 0; //@line 17171
  $20 = $16 + 28 | 0; //@line 17172
  $21 = HEAP32[$20 >> 2] | 0; //@line 17173
  if (!$21) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 17176
   _mbed_assert_internal(15061, 15066, 1102); //@line 17177
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 17180
    $23 = $ReallocAsyncCtx15 + 4 | 0; //@line 17181
    HEAP32[$23 >> 2] = $20; //@line 17182
    $24 = $ReallocAsyncCtx15 + 8 | 0; //@line 17183
    HEAP32[$24 >> 2] = $17; //@line 17184
    $25 = $ReallocAsyncCtx15 + 12 | 0; //@line 17185
    HEAP32[$25 >> 2] = $19; //@line 17186
    $26 = $ReallocAsyncCtx15 + 16 | 0; //@line 17187
    HEAP32[$26 >> 2] = $2; //@line 17188
    $27 = $ReallocAsyncCtx15 + 20 | 0; //@line 17189
    HEAP32[$27 >> 2] = $6; //@line 17190
    sp = STACKTOP; //@line 17191
    return;
   }
   ___async_unwind = 0; //@line 17194
   HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 17195
   $23 = $ReallocAsyncCtx15 + 4 | 0; //@line 17196
   HEAP32[$23 >> 2] = $20; //@line 17197
   $24 = $ReallocAsyncCtx15 + 8 | 0; //@line 17198
   HEAP32[$24 >> 2] = $17; //@line 17199
   $25 = $ReallocAsyncCtx15 + 12 | 0; //@line 17200
   HEAP32[$25 >> 2] = $19; //@line 17201
   $26 = $ReallocAsyncCtx15 + 16 | 0; //@line 17202
   HEAP32[$26 >> 2] = $2; //@line 17203
   $27 = $ReallocAsyncCtx15 + 20 | 0; //@line 17204
   HEAP32[$27 >> 2] = $6; //@line 17205
   sp = STACKTOP; //@line 17206
   return;
  } else {
   $28 = HEAP32[$21 >> 2] | 0; //@line 17209
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 17210
   FUNCTION_TABLE_vii[$28 & 31]($17, $19); //@line 17211
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 17214
    $29 = $ReallocAsyncCtx4 + 4 | 0; //@line 17215
    HEAP32[$29 >> 2] = $2; //@line 17216
    $30 = $ReallocAsyncCtx4 + 8 | 0; //@line 17217
    HEAP32[$30 >> 2] = $6; //@line 17218
    sp = STACKTOP; //@line 17219
    return;
   }
   ___async_unwind = 0; //@line 17222
   HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 17223
   $29 = $ReallocAsyncCtx4 + 4 | 0; //@line 17224
   HEAP32[$29 >> 2] = $2; //@line 17225
   $30 = $ReallocAsyncCtx4 + 8 | 0; //@line 17226
   HEAP32[$30 >> 2] = $6; //@line 17227
   sp = STACKTOP; //@line 17228
   return;
  }
 }
 $31 = $$pre17 & -5; //@line 17232
 HEAP8[$2 >> 0] = $31; //@line 17233
 if (!($31 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $31 & -17; //@line 17240
 $36 = HEAP32[$6 + 1324 >> 2] | 0; //@line 17242
 $37 = $36 + 48 | 0; //@line 17243
 $39 = __ZN11LoRaMacMlme14get_indicationEv($6 + 264 | 0) | 0; //@line 17245
 $40 = $36 + 60 | 0; //@line 17246
 $41 = HEAP32[$40 >> 2] | 0; //@line 17247
 if (!$41) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 17250
  _mbed_assert_internal(15061, 15066, 1102); //@line 17251
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 17254
   $43 = $ReallocAsyncCtx14 + 4 | 0; //@line 17255
   HEAP32[$43 >> 2] = $40; //@line 17256
   $44 = $ReallocAsyncCtx14 + 8 | 0; //@line 17257
   HEAP32[$44 >> 2] = $37; //@line 17258
   $45 = $ReallocAsyncCtx14 + 12 | 0; //@line 17259
   HEAP32[$45 >> 2] = $39; //@line 17260
   sp = STACKTOP; //@line 17261
   return;
  }
  ___async_unwind = 0; //@line 17264
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 17265
  $43 = $ReallocAsyncCtx14 + 4 | 0; //@line 17266
  HEAP32[$43 >> 2] = $40; //@line 17267
  $44 = $ReallocAsyncCtx14 + 8 | 0; //@line 17268
  HEAP32[$44 >> 2] = $37; //@line 17269
  $45 = $ReallocAsyncCtx14 + 12 | 0; //@line 17270
  HEAP32[$45 >> 2] = $39; //@line 17271
  sp = STACKTOP; //@line 17272
  return;
 } else {
  $46 = HEAP32[$41 >> 2] | 0; //@line 17275
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 17276
  FUNCTION_TABLE_vii[$46 & 31]($37, $39); //@line 17277
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 17280
   sp = STACKTOP; //@line 17281
   return;
  }
  ___async_unwind = 0; //@line 17284
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 17285
  sp = STACKTOP; //@line 17286
  return;
 }
}
function _mbedtls_gcm_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$061 = 0, $$163 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $75 = 0, $8 = 0, $84 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14324
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14326
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14328
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14330
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14332
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14334
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14336
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14338
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14340
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14342
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 14344
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 14346
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 14348
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 14350
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 14352
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 14354
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 14356
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14358
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 14361
  $84 = ___async_retval; //@line 14362
  HEAP32[$84 >> 2] = $$0; //@line 14363
  return;
 }
 if ($2 | 0) {
  $$163 = 0; //@line 14368
  do {
   $67 = $8 + 376 + $$163 | 0; //@line 14372
   $68 = $14 + $$163 | 0; //@line 14373
   if (!(HEAP32[$18 >> 2] | 0)) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 14378
   }
   $75 = HEAP8[$68 >> 0] ^ HEAP8[$20 + $$163 >> 0]; //@line 14383
   HEAP8[$16 + $$163 >> 0] = $75; //@line 14385
   if ((HEAP32[$18 >> 2] | 0) == 1) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 14391
   }
   $$163 = $$163 + 1 | 0; //@line 14393
  } while ($$163 >>> 0 < $2 >>> 0);
 }
 _gcm_mult($8, $10, $10); //@line 14402
 $35 = $12 - $2 | 0; //@line 14403
 $51 = $14 + $2 | 0; //@line 14404
 $53 = $16 + $2 | 0; //@line 14405
 if (!$35) {
  $$0 = 0; //@line 14408
  $84 = ___async_retval; //@line 14409
  HEAP32[$84 >> 2] = $$0; //@line 14410
  return;
 }
 $36 = $35 >>> 0 < 16 ? $35 : 16; //@line 14414
 $$061 = 16; //@line 14415
 do {
  if ($$061 >>> 0 <= 12) {
   break;
  }
  $$061 = $$061 + -1 | 0; //@line 14421
  $39 = $8 + 360 + $$061 | 0; //@line 14422
  $41 = (HEAP8[$39 >> 0] | 0) + 1 << 24 >> 24; //@line 14424
  HEAP8[$39 >> 0] = $41; //@line 14425
 } while (!($41 << 24 >> 24));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 14433
 $43 = _mbedtls_cipher_update($28, $30, 16, $6, $32) | 0; //@line 14434
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 694; //@line 14437
  $44 = $ReallocAsyncCtx + 4 | 0; //@line 14438
  HEAP32[$44 >> 2] = $36; //@line 14439
  $45 = $ReallocAsyncCtx + 8 | 0; //@line 14440
  HEAP32[$45 >> 2] = $4; //@line 14441
  $46 = $ReallocAsyncCtx + 12 | 0; //@line 14442
  HEAP32[$46 >> 2] = $6; //@line 14443
  $47 = $ReallocAsyncCtx + 16 | 0; //@line 14444
  HEAP32[$47 >> 2] = $8; //@line 14445
  $48 = $ReallocAsyncCtx + 20 | 0; //@line 14446
  HEAP32[$48 >> 2] = $10; //@line 14447
  $49 = $ReallocAsyncCtx + 24 | 0; //@line 14448
  HEAP32[$49 >> 2] = $35; //@line 14449
  $50 = $ReallocAsyncCtx + 28 | 0; //@line 14450
  HEAP32[$50 >> 2] = $51; //@line 14451
  $52 = $ReallocAsyncCtx + 32 | 0; //@line 14452
  HEAP32[$52 >> 2] = $53; //@line 14453
  $54 = $ReallocAsyncCtx + 36 | 0; //@line 14454
  HEAP32[$54 >> 2] = $18; //@line 14455
  $55 = $ReallocAsyncCtx + 40 | 0; //@line 14456
  HEAP32[$55 >> 2] = $20; //@line 14457
  $56 = $ReallocAsyncCtx + 44 | 0; //@line 14458
  HEAP32[$56 >> 2] = $22; //@line 14459
  $57 = $ReallocAsyncCtx + 48 | 0; //@line 14460
  HEAP32[$57 >> 2] = $24; //@line 14461
  $58 = $ReallocAsyncCtx + 52 | 0; //@line 14462
  HEAP32[$58 >> 2] = $26; //@line 14463
  $59 = $ReallocAsyncCtx + 56 | 0; //@line 14464
  HEAP32[$59 >> 2] = $28; //@line 14465
  $60 = $ReallocAsyncCtx + 60 | 0; //@line 14466
  HEAP32[$60 >> 2] = $30; //@line 14467
  $61 = $ReallocAsyncCtx + 64 | 0; //@line 14468
  HEAP32[$61 >> 2] = $32; //@line 14469
  sp = STACKTOP; //@line 14470
  return;
 }
 HEAP32[___async_retval >> 2] = $43; //@line 14474
 ___async_unwind = 0; //@line 14475
 HEAP32[$ReallocAsyncCtx >> 2] = 694; //@line 14476
 $44 = $ReallocAsyncCtx + 4 | 0; //@line 14477
 HEAP32[$44 >> 2] = $36; //@line 14478
 $45 = $ReallocAsyncCtx + 8 | 0; //@line 14479
 HEAP32[$45 >> 2] = $4; //@line 14480
 $46 = $ReallocAsyncCtx + 12 | 0; //@line 14481
 HEAP32[$46 >> 2] = $6; //@line 14482
 $47 = $ReallocAsyncCtx + 16 | 0; //@line 14483
 HEAP32[$47 >> 2] = $8; //@line 14484
 $48 = $ReallocAsyncCtx + 20 | 0; //@line 14485
 HEAP32[$48 >> 2] = $10; //@line 14486
 $49 = $ReallocAsyncCtx + 24 | 0; //@line 14487
 HEAP32[$49 >> 2] = $35; //@line 14488
 $50 = $ReallocAsyncCtx + 28 | 0; //@line 14489
 HEAP32[$50 >> 2] = $51; //@line 14490
 $52 = $ReallocAsyncCtx + 32 | 0; //@line 14491
 HEAP32[$52 >> 2] = $53; //@line 14492
 $54 = $ReallocAsyncCtx + 36 | 0; //@line 14493
 HEAP32[$54 >> 2] = $18; //@line 14494
 $55 = $ReallocAsyncCtx + 40 | 0; //@line 14495
 HEAP32[$55 >> 2] = $20; //@line 14496
 $56 = $ReallocAsyncCtx + 44 | 0; //@line 14497
 HEAP32[$56 >> 2] = $22; //@line 14498
 $57 = $ReallocAsyncCtx + 48 | 0; //@line 14499
 HEAP32[$57 >> 2] = $24; //@line 14500
 $58 = $ReallocAsyncCtx + 52 | 0; //@line 14501
 HEAP32[$58 >> 2] = $26; //@line 14502
 $59 = $ReallocAsyncCtx + 56 | 0; //@line 14503
 HEAP32[$59 >> 2] = $28; //@line 14504
 $60 = $ReallocAsyncCtx + 60 | 0; //@line 14505
 HEAP32[$60 >> 2] = $30; //@line 14506
 $61 = $ReallocAsyncCtx + 64 | 0; //@line 14507
 HEAP32[$61 >> 2] = $32; //@line 14508
 sp = STACKTOP; //@line 14509
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_23($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $37 = 0, $38 = 0, $4 = 0, $52 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, sp = 0;
 sp = STACKTOP; //@line 17816
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17820
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17822
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17824
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17826
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17828
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17830
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17832
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17834
 $20 = HEAP8[$0 + 40 >> 0] & 1; //@line 17837
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17839
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 17841
 $26 = HEAP8[$0 + 52 >> 0] | 0; //@line 17843
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 17845
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 17847
 HEAP32[(__ZN11LoRaMacMlme14get_indicationEv(HEAP32[$0 + 4 >> 2] | 0) | 0) >> 2] = 4; //@line 17849
 $32 = $4 + 944 | 0; //@line 17850
 HEAP8[$32 >> 0] = HEAP8[$32 >> 0] | 16; //@line 17853
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($6); //@line 17854
 $37 = $12 & 255; //@line 17857
 $38 = $4 + 638 | 0; //@line 17858
 if (__Z15decrypt_payloadPKhtS0_jhjPh($8 + $10 | 0, $37, $14, $16, 1, $18, $38) | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 4 >> 2] = 13; //@line 17864
 }
 if ($20) {
  $$3$off0204 = 6; //@line 17867
 } else {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 12 >> 2] = $38; //@line 17871
  HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 16 >> 1] = $37; //@line 17874
  HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 18 >> 0] = 1; //@line 17877
  $52 = (__ZN11LoRaMacMcps16get_confirmationEv($22) | 0) + 10 | 0; //@line 17881
  if ($26 & 32) {
   HEAP8[$52 >> 0] = 1; //@line 17883
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($22) | 0) + 28 >> 0] = 1; //@line 17886
   $55 = HEAP32[$24 >> 2] | 0; //@line 17887
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 17889
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($55, $4 + 1076 | 0); //@line 17890
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 17893
    $57 = $ReallocAsyncCtx23 + 4 | 0; //@line 17894
    HEAP32[$57 >> 2] = $4; //@line 17895
    $58 = $ReallocAsyncCtx23 + 8 | 0; //@line 17896
    HEAP32[$58 >> 2] = $24; //@line 17897
    $59 = $ReallocAsyncCtx23 + 12 | 0; //@line 17898
    HEAP32[$59 >> 2] = $28; //@line 17899
    $60 = $ReallocAsyncCtx23 + 16 | 0; //@line 17900
    HEAP32[$60 >> 2] = $30; //@line 17901
    sp = STACKTOP; //@line 17902
    return;
   }
   ___async_unwind = 0; //@line 17905
   HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 17906
   $57 = $ReallocAsyncCtx23 + 4 | 0; //@line 17907
   HEAP32[$57 >> 2] = $4; //@line 17908
   $58 = $ReallocAsyncCtx23 + 8 | 0; //@line 17909
   HEAP32[$58 >> 2] = $24; //@line 17910
   $59 = $ReallocAsyncCtx23 + 12 | 0; //@line 17911
   HEAP32[$59 >> 2] = $28; //@line 17912
   $60 = $ReallocAsyncCtx23 + 16 | 0; //@line 17913
   HEAP32[$60 >> 2] = $30; //@line 17914
   sp = STACKTOP; //@line 17915
   return;
  }
  HEAP8[$52 >> 0] = 0; //@line 17918
  if ((HEAPU8[$4 + 895 >> 0] | 0) > (HEAPU8[$4 + 894 >> 0] | 0)) {
   $66 = HEAP32[$24 >> 2] | 0; //@line 17925
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 17927
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($66, $4 + 1076 | 0); //@line 17928
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 17931
    $68 = $ReallocAsyncCtx22 + 4 | 0; //@line 17932
    HEAP32[$68 >> 2] = $4; //@line 17933
    $69 = $ReallocAsyncCtx22 + 8 | 0; //@line 17934
    HEAP32[$69 >> 2] = $24; //@line 17935
    $70 = $ReallocAsyncCtx22 + 12 | 0; //@line 17936
    HEAP32[$70 >> 2] = $28; //@line 17937
    $71 = $ReallocAsyncCtx22 + 16 | 0; //@line 17938
    HEAP32[$71 >> 2] = $30; //@line 17939
    sp = STACKTOP; //@line 17940
    return;
   }
   ___async_unwind = 0; //@line 17943
   HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 17944
   $68 = $ReallocAsyncCtx22 + 4 | 0; //@line 17945
   HEAP32[$68 >> 2] = $4; //@line 17946
   $69 = $ReallocAsyncCtx22 + 8 | 0; //@line 17947
   HEAP32[$69 >> 2] = $24; //@line 17948
   $70 = $ReallocAsyncCtx22 + 12 | 0; //@line 17949
   HEAP32[$70 >> 2] = $28; //@line 17950
   $71 = $ReallocAsyncCtx22 + 16 | 0; //@line 17951
   HEAP32[$71 >> 2] = $30; //@line 17952
   sp = STACKTOP; //@line 17953
   return;
  } else {
   $$3$off0204 = 2; //@line 17956
  }
 }
 $72 = $4 + 944 | 0; //@line 17959
 HEAP8[$72 >> 0] = $$3$off0204 | HEAP8[$72 >> 0] & -7; //@line 17963
 $76 = $4 + 944 | 0; //@line 17964
 HEAP8[$76 >> 0] = HEAP8[$76 >> 0] | 32; //@line 17967
 $79 = HEAP32[$24 >> 2] | 0; //@line 17968
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 17970
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($79, $4 + 996 | 0, 1); //@line 17971
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 17974
  $81 = $ReallocAsyncCtx17 + 4 | 0; //@line 17975
  HEAP32[$81 >> 2] = $28; //@line 17976
  $82 = $ReallocAsyncCtx17 + 8 | 0; //@line 17977
  HEAP32[$82 >> 2] = $30; //@line 17978
  sp = STACKTOP; //@line 17979
  return;
 }
 ___async_unwind = 0; //@line 17982
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 17983
 $81 = $ReallocAsyncCtx17 + 4 | 0; //@line 17984
 HEAP32[$81 >> 2] = $28; //@line 17985
 $82 = $ReallocAsyncCtx17 + 8 | 0; //@line 17986
 HEAP32[$82 >> 2] = $30; //@line 17987
 sp = STACKTOP; //@line 17988
 return;
}
function __ZN7LoRaMac17on_radio_rx_errorEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $14 = 0, $15 = 0, $25 = 0, $29 = 0, $36 = 0, $40 = 0, $44 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14068
 STACKTOP = STACKTOP + 32 | 0; //@line 14069
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 14069
 $$byval_copy = sp + 24 | 0; //@line 14070
 $vararg_buffer3 = sp + 16 | 0; //@line 14071
 $vararg_buffer1 = sp + 8 | 0; //@line 14072
 _printf(12967, sp) | 0; //@line 14074
 _printf(13195, $vararg_buffer1) | 0; //@line 14075
 $AsyncCtx9 = _emscripten_alloc_async_context(28, sp) | 0; //@line 14076
 _putchar(10) | 0; //@line 14077
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 432; //@line 14080
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 14082
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer1; //@line 14084
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer3; //@line 14086
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer3; //@line 14088
  HEAP32[$AsyncCtx9 + 20 >> 2] = $$byval_copy; //@line 14090
  HEAP32[$AsyncCtx9 + 24 >> 2] = $$byval_copy; //@line 14092
  sp = STACKTOP; //@line 14093
  STACKTOP = sp; //@line 14094
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 14096
 do {
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   _printf(12967, $vararg_buffer3) | 0; //@line 14102
   _printf(12994, $$byval_copy) | 0; //@line 14103
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14104
   _putchar(10) | 0; //@line 14105
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 433; //@line 14108
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14110
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 14112
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 14114
    sp = STACKTOP; //@line 14115
    STACKTOP = sp; //@line 14116
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14118
   $14 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14120
   HEAP32[$vararg_buffer1 >> 2] = 361; //@line 14121
   HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 14123
   $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14124
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 14125
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 14125
   $15 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($14, $0, $$byval_copy) | 0; //@line 14126
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 434; //@line 14129
    HEAP32[$AsyncCtx16 + 4 >> 2] = $vararg_buffer1; //@line 14131
    HEAP32[$AsyncCtx16 + 8 >> 2] = $0; //@line 14133
    sp = STACKTOP; //@line 14134
    STACKTOP = sp; //@line 14135
    return;
   }
   _emscripten_free_async_context($AsyncCtx16 | 0); //@line 14137
   do {
    if (!$15) {
     $AsyncCtx24 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14141
     _mbed_assert_internal(12851, 12860, 217); //@line 14142
     if (___async) {
      HEAP32[$AsyncCtx24 >> 2] = 435; //@line 14145
      HEAP32[$AsyncCtx24 + 4 >> 2] = $vararg_buffer1; //@line 14147
      HEAP32[$AsyncCtx24 + 8 >> 2] = $0; //@line 14149
      sp = STACKTOP; //@line 14150
      STACKTOP = sp; //@line 14151
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx24 | 0); //@line 14153
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 14159
   if (!(HEAP8[$0 + 373 >> 0] | 0)) {
    label = 24; //@line 14164
   } else {
    label = 23; //@line 14166
   }
  } else {
   $25 = HEAP32[$0 >> 2] | 0; //@line 14169
   $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14170
   __ZN7LoRaPHY18put_radio_to_sleepEv($25); //@line 14171
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 436; //@line 14174
    HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 14176
    sp = STACKTOP; //@line 14177
    STACKTOP = sp; //@line 14178
    return;
   }
   _emscripten_free_async_context($AsyncCtx13 | 0); //@line 14180
   $29 = (HEAP8[$0 + 373 >> 0] | 0) != 0; //@line 14186
   if (HEAP32[$0 + 364 >> 2] | 0) {
    if ($29) {
     label = 23; //@line 14189
     break;
    } else {
     label = 24; //@line 14192
     break;
    }
   }
   if ($29) {
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 5; //@line 14200
   }
   HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 5; //@line 14205
   $36 = $0 + 356 | 0; //@line 14206
   $40 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$36 >> 2] | 0, HEAP32[$0 + 980 >> 2] | 0) | 0; //@line 14210
   if ($40 >>> 0 < (HEAP32[$0 + 976 >> 2] | 0) >>> 0) {
    STACKTOP = sp; //@line 14215
    return;
   }
   $44 = HEAP32[$36 >> 2] | 0; //@line 14217
   $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14219
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($44, $0 + 1056 | 0); //@line 14220
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 437; //@line 14223
    HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 14225
    sp = STACKTOP; //@line 14226
    STACKTOP = sp; //@line 14227
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 14229
    break;
   }
  }
 } while (0);
 if ((label | 0) == 23) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 14238
  label = 24; //@line 14239
 }
 if ((label | 0) == 24) {
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 14245
 }
 $53 = $0 + 944 | 0; //@line 14247
 HEAP8[$53 >> 0] = HEAP8[$53 >> 0] | 32; //@line 14250
 STACKTOP = sp; //@line 14251
 return;
}
function _initialize__async_cb_241($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10707
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10709
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10711
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10713
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10715
 $8 = HEAP32[$AsyncRetVal >> 2] | 0; //@line 10716
 if (!$8) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 10719
  _mbed_assert_internal(14513, 14515, 41); //@line 10720
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 699; //@line 10723
   $10 = $ReallocAsyncCtx7 + 4 | 0; //@line 10724
   HEAP32[$10 >> 2] = $2; //@line 10725
   $11 = $ReallocAsyncCtx7 + 8 | 0; //@line 10726
   HEAP32[$11 >> 2] = $4; //@line 10727
   $12 = $ReallocAsyncCtx7 + 12 | 0; //@line 10728
   HEAP32[$12 >> 2] = $6; //@line 10729
   $13 = $ReallocAsyncCtx7 + 16 | 0; //@line 10730
   HEAP32[$13 >> 2] = $AsyncRetVal; //@line 10731
   sp = STACKTOP; //@line 10732
   return;
  }
  ___async_unwind = 0; //@line 10735
  HEAP32[$ReallocAsyncCtx7 >> 2] = 699; //@line 10736
  $10 = $ReallocAsyncCtx7 + 4 | 0; //@line 10737
  HEAP32[$10 >> 2] = $2; //@line 10738
  $11 = $ReallocAsyncCtx7 + 8 | 0; //@line 10739
  HEAP32[$11 >> 2] = $4; //@line 10740
  $12 = $ReallocAsyncCtx7 + 12 | 0; //@line 10741
  HEAP32[$12 >> 2] = $6; //@line 10742
  $13 = $ReallocAsyncCtx7 + 16 | 0; //@line 10743
  HEAP32[$13 >> 2] = $AsyncRetVal; //@line 10744
  sp = STACKTOP; //@line 10745
  return;
 }
 $15 = HEAP32[$AsyncRetVal + 4 >> 2] | 0; //@line 10749
 if (($15 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 10753
  _mbed_assert_internal(14513, 14515, 47); //@line 10754
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 700; //@line 10757
   $17 = $ReallocAsyncCtx6 + 4 | 0; //@line 10758
   HEAP32[$17 >> 2] = $8; //@line 10759
   $18 = $ReallocAsyncCtx6 + 8 | 0; //@line 10760
   HEAP32[$18 >> 2] = $2; //@line 10761
   $19 = $ReallocAsyncCtx6 + 12 | 0; //@line 10762
   HEAP32[$19 >> 2] = $4; //@line 10763
   $20 = $ReallocAsyncCtx6 + 16 | 0; //@line 10764
   HEAP32[$20 >> 2] = $6; //@line 10765
   sp = STACKTOP; //@line 10766
   return;
  }
  ___async_unwind = 0; //@line 10769
  HEAP32[$ReallocAsyncCtx6 >> 2] = 700; //@line 10770
  $17 = $ReallocAsyncCtx6 + 4 | 0; //@line 10771
  HEAP32[$17 >> 2] = $8; //@line 10772
  $18 = $ReallocAsyncCtx6 + 8 | 0; //@line 10773
  HEAP32[$18 >> 2] = $2; //@line 10774
  $19 = $ReallocAsyncCtx6 + 12 | 0; //@line 10775
  HEAP32[$19 >> 2] = $4; //@line 10776
  $20 = $ReallocAsyncCtx6 + 16 | 0; //@line 10777
  HEAP32[$20 >> 2] = $6; //@line 10778
  sp = STACKTOP; //@line 10779
  return;
 } else {
  $22 = 7 << $15 + -4; //@line 10783
  $23 = ___muldi3($22 | 0, 0, 1e6, 0) | 0; //@line 10784
  $24 = tempRet0; //@line 10785
  $25 = _i64Add($8 | 0, 0, -1, -1) | 0; //@line 10786
  $27 = _i64Add($25 | 0, tempRet0 | 0, $23 | 0, $24 | 0) | 0; //@line 10788
  $29 = ___udivdi3($27 | 0, tempRet0 | 0, $8 | 0, 0) | 0; //@line 10790
  $30 = tempRet0; //@line 10791
  $31 = HEAP32[$2 >> 2] | 0; //@line 10792
  HEAP32[$31 >> 2] = 0; //@line 10793
  HEAP32[$31 + 4 >> 2] = 0; //@line 10795
  $35 = HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0; //@line 10798
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 10799
  $36 = FUNCTION_TABLE_i[$35 & 7]() | 0; //@line 10800
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 701; //@line 10803
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 10804
   HEAP32[$37 >> 2] = $2; //@line 10805
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 10806
   HEAP32[$38 >> 2] = $8; //@line 10807
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 10808
   HEAP32[$39 >> 2] = $15; //@line 10809
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 10810
   HEAP32[$40 >> 2] = $22; //@line 10811
   $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 10812
   $42 = $41; //@line 10813
   $43 = $42; //@line 10814
   HEAP32[$43 >> 2] = $29; //@line 10815
   $44 = $42 + 4 | 0; //@line 10816
   $45 = $44; //@line 10817
   HEAP32[$45 >> 2] = $30; //@line 10818
   $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 10819
   HEAP32[$46 >> 2] = $4; //@line 10820
   $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 10821
   HEAP32[$47 >> 2] = $6; //@line 10822
   sp = STACKTOP; //@line 10823
   return;
  }
  HEAP32[___async_retval >> 2] = $36; //@line 10827
  ___async_unwind = 0; //@line 10828
  HEAP32[$ReallocAsyncCtx3 >> 2] = 701; //@line 10829
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 10830
  HEAP32[$37 >> 2] = $2; //@line 10831
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 10832
  HEAP32[$38 >> 2] = $8; //@line 10833
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 10834
  HEAP32[$39 >> 2] = $15; //@line 10835
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 10836
  HEAP32[$40 >> 2] = $22; //@line 10837
  $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 10838
  $42 = $41; //@line 10839
  $43 = $42; //@line 10840
  HEAP32[$43 >> 2] = $29; //@line 10841
  $44 = $42 + 4 | 0; //@line 10842
  $45 = $44; //@line 10843
  HEAP32[$45 >> 2] = $30; //@line 10844
  $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 10845
  HEAP32[$46 >> 2] = $4; //@line 10846
  $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 10847
  HEAP32[$47 >> 2] = $6; //@line 10848
  sp = STACKTOP; //@line 10849
  return;
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_453($0) {
 $0 = $0 | 0;
 var $$pre$i$i50 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 33345
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33347
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33349
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33351
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33357
 $$pre$i$i50 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 33358
 HEAP32[HEAP32[$0 + 20 >> 2] >> 2] = $$pre$i$i50; //@line 33360
 if ($$pre$i$i50 | 0) {
  $16 = HEAP32[$$pre$i$i50 + 8 >> 2] | 0; //@line 33364
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 33365
  FUNCTION_TABLE_vi[$16 & 1023]($2); //@line 33366
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 580; //@line 33369
   $17 = $ReallocAsyncCtx12 + 4 | 0; //@line 33370
   HEAP32[$17 >> 2] = $2; //@line 33371
   $18 = $ReallocAsyncCtx12 + 8 | 0; //@line 33372
   HEAP32[$18 >> 2] = $4; //@line 33373
   $19 = $ReallocAsyncCtx12 + 12 | 0; //@line 33374
   HEAP32[$19 >> 2] = $6; //@line 33375
   $20 = $ReallocAsyncCtx12 + 16 | 0; //@line 33376
   HEAP32[$20 >> 2] = $12; //@line 33377
   sp = STACKTOP; //@line 33378
   return;
  }
  ___async_unwind = 0; //@line 33381
  HEAP32[$ReallocAsyncCtx12 >> 2] = 580; //@line 33382
  $17 = $ReallocAsyncCtx12 + 4 | 0; //@line 33383
  HEAP32[$17 >> 2] = $2; //@line 33384
  $18 = $ReallocAsyncCtx12 + 8 | 0; //@line 33385
  HEAP32[$18 >> 2] = $4; //@line 33386
  $19 = $ReallocAsyncCtx12 + 12 | 0; //@line 33387
  HEAP32[$19 >> 2] = $6; //@line 33388
  $20 = $ReallocAsyncCtx12 + 16 | 0; //@line 33389
  HEAP32[$20 >> 2] = $12; //@line 33390
  sp = STACKTOP; //@line 33391
  return;
 }
 $21 = $4 + 12 | 0; //@line 33394
 HEAP32[$4 >> 2] = 581; //@line 33395
 HEAP32[$4 + 4 >> 2] = 0; //@line 33397
 HEAP32[$4 + 8 >> 2] = $6; //@line 33399
 HEAP32[$21 >> 2] = 848; //@line 33400
 $22 = $6 + 1260 | 0; //@line 33401
 if (($22 | 0) == ($4 | 0)) {
  $41 = HEAP32[214] | 0; //@line 33405
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 33406
  FUNCTION_TABLE_vi[$41 & 1023]($4); //@line 33407
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 584; //@line 33410
   $42 = $ReallocAsyncCtx15 + 4 | 0; //@line 33411
   HEAP32[$42 >> 2] = $4; //@line 33412
   $43 = $ReallocAsyncCtx15 + 8 | 0; //@line 33413
   HEAP32[$43 >> 2] = $12; //@line 33414
   sp = STACKTOP; //@line 33415
   return;
  }
  ___async_unwind = 0; //@line 33418
  HEAP32[$ReallocAsyncCtx15 >> 2] = 584; //@line 33419
  $42 = $ReallocAsyncCtx15 + 4 | 0; //@line 33420
  HEAP32[$42 >> 2] = $4; //@line 33421
  $43 = $ReallocAsyncCtx15 + 8 | 0; //@line 33422
  HEAP32[$43 >> 2] = $12; //@line 33423
  sp = STACKTOP; //@line 33424
  return;
 }
 $24 = $6 + 1272 | 0; //@line 33427
 $25 = HEAP32[$24 >> 2] | 0; //@line 33428
 if (!$25) {
  $35 = HEAP32[213] | 0; //@line 33432
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 33433
  FUNCTION_TABLE_vii[$35 & 31]($22, $4); //@line 33434
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 583; //@line 33437
   $36 = $ReallocAsyncCtx14 + 4 | 0; //@line 33438
   HEAP32[$36 >> 2] = $21; //@line 33439
   $37 = $ReallocAsyncCtx14 + 8 | 0; //@line 33440
   HEAP32[$37 >> 2] = $24; //@line 33441
   $38 = $ReallocAsyncCtx14 + 12 | 0; //@line 33442
   HEAP32[$38 >> 2] = $4; //@line 33443
   $39 = $ReallocAsyncCtx14 + 16 | 0; //@line 33444
   HEAP32[$39 >> 2] = $12; //@line 33445
   sp = STACKTOP; //@line 33446
   return;
  }
  ___async_unwind = 0; //@line 33449
  HEAP32[$ReallocAsyncCtx14 >> 2] = 583; //@line 33450
  $36 = $ReallocAsyncCtx14 + 4 | 0; //@line 33451
  HEAP32[$36 >> 2] = $21; //@line 33452
  $37 = $ReallocAsyncCtx14 + 8 | 0; //@line 33453
  HEAP32[$37 >> 2] = $24; //@line 33454
  $38 = $ReallocAsyncCtx14 + 12 | 0; //@line 33455
  HEAP32[$38 >> 2] = $4; //@line 33456
  $39 = $ReallocAsyncCtx14 + 16 | 0; //@line 33457
  HEAP32[$39 >> 2] = $12; //@line 33458
  sp = STACKTOP; //@line 33459
  return;
 } else {
  $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 33463
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 33464
  FUNCTION_TABLE_vi[$28 & 1023]($22); //@line 33465
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 582; //@line 33468
   $29 = $ReallocAsyncCtx13 + 4 | 0; //@line 33469
   HEAP32[$29 >> 2] = $21; //@line 33470
   $30 = $ReallocAsyncCtx13 + 8 | 0; //@line 33471
   HEAP32[$30 >> 2] = $24; //@line 33472
   $31 = $ReallocAsyncCtx13 + 12 | 0; //@line 33473
   HEAP32[$31 >> 2] = $22; //@line 33474
   $32 = $ReallocAsyncCtx13 + 16 | 0; //@line 33475
   HEAP32[$32 >> 2] = $4; //@line 33476
   $33 = $ReallocAsyncCtx13 + 20 | 0; //@line 33477
   HEAP32[$33 >> 2] = $12; //@line 33478
   sp = STACKTOP; //@line 33479
   return;
  }
  ___async_unwind = 0; //@line 33482
  HEAP32[$ReallocAsyncCtx13 >> 2] = 582; //@line 33483
  $29 = $ReallocAsyncCtx13 + 4 | 0; //@line 33484
  HEAP32[$29 >> 2] = $21; //@line 33485
  $30 = $ReallocAsyncCtx13 + 8 | 0; //@line 33486
  HEAP32[$30 >> 2] = $24; //@line 33487
  $31 = $ReallocAsyncCtx13 + 12 | 0; //@line 33488
  HEAP32[$31 >> 2] = $22; //@line 33489
  $32 = $ReallocAsyncCtx13 + 16 | 0; //@line 33490
  HEAP32[$32 >> 2] = $4; //@line 33491
  $33 = $ReallocAsyncCtx13 + 20 | 0; //@line 33492
  HEAP32[$33 >> 2] = $12; //@line 33493
  sp = STACKTOP; //@line 33494
  return;
 }
}
function _mbedtls_cipher_free($0) {
 $0 = $0 | 0;
 var $101 = 0, $105 = 0, $109 = 0, $113 = 0, $2 = 0, $3 = 0, $42 = 0, $48 = 0, $53 = 0, $57 = 0, $61 = 0, $65 = 0, $69 = 0, $73 = 0, $77 = 0, $81 = 0, $85 = 0, $89 = 0, $93 = 0, $97 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1637
 if (!$0) {
  return;
 }
 $2 = $0 + 64 | 0; //@line 1642
 $3 = HEAP32[$2 >> 2] | 0; //@line 1643
 if ($3 | 0) {
  HEAP8[$3 >> 0] = 0; //@line 1647
  HEAP8[$3 + 1 >> 0] = 0; //@line 1649
  HEAP8[$3 + 2 >> 0] = 0; //@line 1651
  HEAP8[$3 + 3 >> 0] = 0; //@line 1653
  HEAP8[$3 + 4 >> 0] = 0; //@line 1655
  HEAP8[$3 + 5 >> 0] = 0; //@line 1657
  HEAP8[$3 + 6 >> 0] = 0; //@line 1659
  HEAP8[$3 + 7 >> 0] = 0; //@line 1661
  HEAP8[$3 + 8 >> 0] = 0; //@line 1663
  HEAP8[$3 + 9 >> 0] = 0; //@line 1665
  HEAP8[$3 + 10 >> 0] = 0; //@line 1667
  HEAP8[$3 + 11 >> 0] = 0; //@line 1669
  HEAP8[$3 + 12 >> 0] = 0; //@line 1671
  HEAP8[$3 + 13 >> 0] = 0; //@line 1673
  HEAP8[$3 + 14 >> 0] = 0; //@line 1675
  HEAP8[$3 + 15 >> 0] = 0; //@line 1677
  HEAP8[$3 + 16 >> 0] = 0; //@line 1679
  HEAP8[$3 + 17 >> 0] = 0; //@line 1681
  HEAP8[$3 + 18 >> 0] = 0; //@line 1683
  HEAP8[$3 + 19 >> 0] = 0; //@line 1685
  HEAP8[$3 + 20 >> 0] = 0; //@line 1687
  HEAP8[$3 + 21 >> 0] = 0; //@line 1689
  HEAP8[$3 + 22 >> 0] = 0; //@line 1691
  HEAP8[$3 + 23 >> 0] = 0; //@line 1693
  HEAP8[$3 + 24 >> 0] = 0; //@line 1695
  HEAP8[$3 + 25 >> 0] = 0; //@line 1697
  HEAP8[$3 + 26 >> 0] = 0; //@line 1699
  HEAP8[$3 + 27 >> 0] = 0; //@line 1701
  HEAP8[$3 + 28 >> 0] = 0; //@line 1703
  HEAP8[$3 + 29 >> 0] = 0; //@line 1705
  HEAP8[$3 + 30 >> 0] = 0; //@line 1707
  HEAP8[$3 + 31 >> 0] = 0; //@line 1709
  HEAP8[$3 + 32 >> 0] = 0; //@line 1711
  HEAP8[$3 + 33 >> 0] = 0; //@line 1713
  HEAP8[$3 + 34 >> 0] = 0; //@line 1715
  HEAP8[$3 + 35 >> 0] = 0; //@line 1716
  _free(HEAP32[$2 >> 2] | 0); //@line 1718
 }
 $42 = HEAP32[$0 + 60 >> 2] | 0; //@line 1721
 do {
  if ($42 | 0) {
   $48 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 24 >> 2] | 0; //@line 1729
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1730
   FUNCTION_TABLE_vi[$48 & 1023]($42); //@line 1731
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 672; //@line 1734
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1736
    sp = STACKTOP; //@line 1737
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1740
    break;
   }
  }
 } while (0);
 HEAP8[$0 >> 0] = 0; //@line 1746
 HEAP8[$0 + 1 >> 0] = 0; //@line 1748
 HEAP8[$0 + 2 >> 0] = 0; //@line 1750
 $53 = $0 + 4 | 0; //@line 1751
 HEAP8[$0 + 3 >> 0] = 0; //@line 1752
 HEAP8[$53 >> 0] = 0; //@line 1754
 HEAP8[$53 + 1 >> 0] = 0; //@line 1756
 HEAP8[$53 + 2 >> 0] = 0; //@line 1758
 $57 = $53 + 4 | 0; //@line 1759
 HEAP8[$53 + 3 >> 0] = 0; //@line 1760
 HEAP8[$57 >> 0] = 0; //@line 1762
 HEAP8[$57 + 1 >> 0] = 0; //@line 1764
 HEAP8[$57 + 2 >> 0] = 0; //@line 1766
 $61 = $53 + 8 | 0; //@line 1767
 HEAP8[$57 + 3 >> 0] = 0; //@line 1768
 HEAP8[$61 >> 0] = 0; //@line 1770
 HEAP8[$61 + 1 >> 0] = 0; //@line 1772
 HEAP8[$61 + 2 >> 0] = 0; //@line 1774
 $65 = $53 + 12 | 0; //@line 1775
 HEAP8[$61 + 3 >> 0] = 0; //@line 1776
 HEAP8[$65 >> 0] = 0; //@line 1778
 HEAP8[$65 + 1 >> 0] = 0; //@line 1780
 HEAP8[$65 + 2 >> 0] = 0; //@line 1782
 $69 = $53 + 16 | 0; //@line 1783
 HEAP8[$65 + 3 >> 0] = 0; //@line 1784
 HEAP8[$69 >> 0] = 0; //@line 1786
 HEAP8[$69 + 1 >> 0] = 0; //@line 1788
 HEAP8[$69 + 2 >> 0] = 0; //@line 1790
 $73 = $53 + 20 | 0; //@line 1791
 HEAP8[$69 + 3 >> 0] = 0; //@line 1792
 HEAP8[$73 >> 0] = 0; //@line 1794
 HEAP8[$73 + 1 >> 0] = 0; //@line 1796
 HEAP8[$73 + 2 >> 0] = 0; //@line 1798
 $77 = $53 + 24 | 0; //@line 1799
 HEAP8[$73 + 3 >> 0] = 0; //@line 1800
 HEAP8[$77 >> 0] = 0; //@line 1802
 HEAP8[$77 + 1 >> 0] = 0; //@line 1804
 HEAP8[$77 + 2 >> 0] = 0; //@line 1806
 $81 = $53 + 28 | 0; //@line 1807
 HEAP8[$77 + 3 >> 0] = 0; //@line 1808
 HEAP8[$81 >> 0] = 0; //@line 1810
 HEAP8[$81 + 1 >> 0] = 0; //@line 1812
 HEAP8[$81 + 2 >> 0] = 0; //@line 1814
 $85 = $53 + 32 | 0; //@line 1815
 HEAP8[$81 + 3 >> 0] = 0; //@line 1816
 HEAP8[$85 >> 0] = 0; //@line 1818
 HEAP8[$85 + 1 >> 0] = 0; //@line 1820
 HEAP8[$85 + 2 >> 0] = 0; //@line 1822
 $89 = $53 + 36 | 0; //@line 1823
 HEAP8[$85 + 3 >> 0] = 0; //@line 1824
 HEAP8[$89 >> 0] = 0; //@line 1826
 HEAP8[$89 + 1 >> 0] = 0; //@line 1828
 HEAP8[$89 + 2 >> 0] = 0; //@line 1830
 $93 = $53 + 40 | 0; //@line 1831
 HEAP8[$89 + 3 >> 0] = 0; //@line 1832
 HEAP8[$93 >> 0] = 0; //@line 1834
 HEAP8[$93 + 1 >> 0] = 0; //@line 1836
 HEAP8[$93 + 2 >> 0] = 0; //@line 1838
 $97 = $53 + 44 | 0; //@line 1839
 HEAP8[$93 + 3 >> 0] = 0; //@line 1840
 HEAP8[$97 >> 0] = 0; //@line 1842
 HEAP8[$97 + 1 >> 0] = 0; //@line 1844
 HEAP8[$97 + 2 >> 0] = 0; //@line 1846
 $101 = $53 + 48 | 0; //@line 1847
 HEAP8[$97 + 3 >> 0] = 0; //@line 1848
 HEAP8[$101 >> 0] = 0; //@line 1850
 HEAP8[$101 + 1 >> 0] = 0; //@line 1852
 HEAP8[$101 + 2 >> 0] = 0; //@line 1854
 $105 = $53 + 52 | 0; //@line 1855
 HEAP8[$101 + 3 >> 0] = 0; //@line 1856
 HEAP8[$105 >> 0] = 0; //@line 1858
 HEAP8[$105 + 1 >> 0] = 0; //@line 1860
 HEAP8[$105 + 2 >> 0] = 0; //@line 1862
 $109 = $53 + 56 | 0; //@line 1863
 HEAP8[$105 + 3 >> 0] = 0; //@line 1864
 HEAP8[$109 >> 0] = 0; //@line 1866
 HEAP8[$109 + 1 >> 0] = 0; //@line 1868
 HEAP8[$109 + 2 >> 0] = 0; //@line 1870
 $113 = $53 + 60 | 0; //@line 1871
 HEAP8[$109 + 3 >> 0] = 0; //@line 1872
 HEAP8[$113 >> 0] = 0; //@line 1874
 HEAP8[$113 + 1 >> 0] = 0; //@line 1876
 HEAP8[$113 + 2 >> 0] = 0; //@line 1878
 HEAP8[$113 + 3 >> 0] = 0; //@line 1879
 return;
}
function __ZN12LoRaWANStackC2Ev($0) {
 $0 = $0 | 0;
 var $$pre$i$i45 = 0, $$pre$i$i59 = 0, $$pre$phiZ2D = 0, $$pre106 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $4 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 6076
 STACKTOP = STACKTOP + 16 | 0; //@line 6077
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6077
 $1 = sp; //@line 6078
 __ZN18LoRaWANTimeHandlerC2Ev($0); //@line 6079
 __ZN7LoRaMacC2ER18LoRaWANTimeHandler($0 + 4 | 0, $0); //@line 6081
 __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0 + 1336 | 0, $0); //@line 6083
 $4 = $0 + 2284 | 0; //@line 6084
 $5 = $0 + 1828 | 0; //@line 6085
 dest = $5 + 16 | 0; //@line 6087
 stop = dest + 88 | 0; //@line 6087
 do {
  HEAP32[dest >> 2] = 0; //@line 6087
  dest = dest + 4 | 0; //@line 6087
 } while ((dest | 0) < (stop | 0));
 HEAP8[$4 >> 0] = 1; //@line 6088
 HEAP8[$0 + 2286 >> 0] = 1; //@line 6091
 HEAP32[$0 + 2288 >> 2] = 0; //@line 6093
 HEAP8[$0 + 2285 >> 0] = 15; //@line 6094
 _memset($0 + 1932 | 0, 0, 352) | 0; //@line 6096
 HEAP32[$0 + 1812 >> 2] = 22; //@line 6099
 HEAP32[$0 + 1816 >> 2] = 0; //@line 6101
 HEAP32[$0 + 1820 >> 2] = $0; //@line 6103
 HEAP32[$0 + 1824 >> 2] = 800; //@line 6104
 HEAP32[$1 >> 2] = 23; //@line 6106
 HEAP32[$1 + 4 >> 2] = 0; //@line 6108
 HEAP32[$1 + 8 >> 2] = $0; //@line 6110
 HEAP32[$1 + 12 >> 2] = 812; //@line 6111
 $13 = $0 + 1840 | 0; //@line 6112
 HEAP32[$5 >> 2] = HEAP32[$1 >> 2]; //@line 6113
 HEAP32[$5 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 6113
 HEAP32[$5 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 6113
 HEAP32[$13 >> 2] = 812; //@line 6114
 $14 = $1 + 12 | 0; //@line 6115
 HEAP32[$1 >> 2] = 24; //@line 6116
 HEAP32[$1 + 4 >> 2] = 0; //@line 6118
 HEAP32[$1 + 8 >> 2] = $0; //@line 6120
 HEAP32[$14 >> 2] = 824; //@line 6121
 $15 = $0 + 1844 | 0; //@line 6122
 if (($15 | 0) == ($1 | 0)) {
  $21 = 824; //@line 6125
  label = 3; //@line 6126
 } else {
  __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($15, $1); //@line 6129
  $$pre$i$i45 = HEAP32[$14 >> 2] | 0; //@line 6130
  HEAP32[$0 + 1856 >> 2] = $$pre$i$i45; //@line 6132
  if ($$pre$i$i45 | 0) {
   $21 = $$pre$i$i45; //@line 6135
   label = 3; //@line 6136
  }
 }
 do {
  if ((label | 0) == 3) {
   $22 = HEAP32[$21 + 8 >> 2] | 0; //@line 6142
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 6143
   FUNCTION_TABLE_vi[$22 & 1023]($1); //@line 6144
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 191; //@line 6147
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6149
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 6151
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 6153
    sp = STACKTOP; //@line 6154
    STACKTOP = sp; //@line 6155
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6157
    break;
   }
  }
 } while (0);
 $26 = $1 + 12 | 0; //@line 6162
 HEAP32[$1 >> 2] = 25; //@line 6163
 HEAP32[$1 + 4 >> 2] = 0; //@line 6165
 HEAP32[$1 + 8 >> 2] = $0; //@line 6167
 HEAP32[$26 >> 2] = 836; //@line 6168
 $27 = $0 + 1860 | 0; //@line 6169
 if (($27 | 0) == ($1 | 0)) {
  $48 = 836; //@line 6172
 } else {
  $29 = $0 + 1872 | 0; //@line 6174
  $30 = HEAP32[$29 >> 2] | 0; //@line 6175
  if (!$30) {
   $$pre$phiZ2D = $27; //@line 6178
   $40 = 836; //@line 6178
  } else {
   $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 6181
   $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6182
   FUNCTION_TABLE_vi[$33 & 1023]($27); //@line 6183
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 192; //@line 6186
    HEAP32[$AsyncCtx2 + 4 >> 2] = $26; //@line 6188
    HEAP32[$AsyncCtx2 + 8 >> 2] = $29; //@line 6190
    HEAP32[$AsyncCtx2 + 12 >> 2] = $27; //@line 6192
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 6194
    sp = STACKTOP; //@line 6195
    STACKTOP = sp; //@line 6196
    return;
   }
   _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6198
   $$pre106 = HEAP32[$26 >> 2] | 0; //@line 6199
   if (!$$pre106) {
    HEAP32[$29 >> 2] = 0; //@line 6202
    STACKTOP = sp; //@line 6203
    return;
   } else {
    $$pre$phiZ2D = $27; //@line 6205
    $40 = $$pre106; //@line 6205
   }
  }
  $41 = HEAP32[$40 + 4 >> 2] | 0; //@line 6209
  $AsyncCtx5 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6210
  FUNCTION_TABLE_vii[$41 & 31]($$pre$phiZ2D, $1); //@line 6211
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 193; //@line 6214
   HEAP32[$AsyncCtx5 + 4 >> 2] = $26; //@line 6216
   HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 6218
   HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 6220
   sp = STACKTOP; //@line 6221
   STACKTOP = sp; //@line 6222
   return;
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6224
  $$pre$i$i59 = HEAP32[$26 >> 2] | 0; //@line 6225
  HEAP32[$29 >> 2] = $$pre$i$i59; //@line 6227
  if (!$$pre$i$i59) {
   STACKTOP = sp; //@line 6230
   return;
  } else {
   $48 = $$pre$i$i59; //@line 6232
  }
 }
 $49 = HEAP32[$48 + 8 >> 2] | 0; //@line 6236
 $AsyncCtx8 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6237
 FUNCTION_TABLE_vi[$49 & 1023]($1); //@line 6238
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 194; //@line 6241
  HEAP32[$AsyncCtx8 + 4 >> 2] = $1; //@line 6243
  sp = STACKTOP; //@line 6244
  STACKTOP = sp; //@line 6245
  return;
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 6247
 STACKTOP = sp; //@line 6248
 return;
}
function _mbedtls_internal_aes_decrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 474
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 560
 $$0136 = $4 + 16 | 0; //@line 560
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 560
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 560
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 560
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 560
 while (1) {
  $110 = HEAP32[1300 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[2324 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0138 >>> 24 << 2) >> 2]; //@line 582
  $130 = HEAP32[1300 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[2324 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0140 >>> 24 << 2) >> 2]; //@line 602
  $150 = HEAP32[1300 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[2324 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0139 >>> 24 << 2) >> 2]; //@line 622
  $170 = HEAP32[1300 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[2324 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0137 >>> 24 << 2) >> 2]; //@line 642
  $171 = $$0136 + 20 | 0; //@line 643
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 644
  $173 = $110 & 255; //@line 645
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[1300 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[2324 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($170 >>> 24 << 2) >> 2]; //@line 706
  $250 = HEAP32[1300 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[2324 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($110 >>> 24 << 2) >> 2]; //@line 726
  $$0$in = $$0$in + -1 | 0; //@line 727
  $$0136 = $$0136 + 32 | 0; //@line 727
  $$0137 = HEAP32[1300 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[2324 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($130 >>> 24 << 2) >> 2]; //@line 727
  $$0138 = HEAP32[1300 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[2324 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($150 >>> 24 << 2) >> 2]; //@line 727
  $$0139 = $250; //@line 727
  $$0140 = $230; //@line 727
 }
 $261 = (HEAPU8[14113 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 739
 $268 = (HEAPU8[14113 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 746
 $274 = (HEAPU8[14113 + ($130 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 752
 $276 = HEAP32[$171 >> 2] | 0; //@line 754
 $281 = $276 ^ (HEAPU8[14113 + ($130 & 255) >> 0] | 0); //@line 759
 $288 = (HEAPU8[14113 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 766
 $295 = (HEAPU8[14113 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 773
 $301 = (HEAPU8[14113 + ($150 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 779
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 781
 $308 = $303 ^ (HEAPU8[14113 + ($150 & 255) >> 0] | 0); //@line 786
 $315 = (HEAPU8[14113 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 793
 $322 = (HEAPU8[14113 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 800
 $328 = (HEAPU8[14113 + ($170 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 806
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 807
 $334 = $329 ^ (HEAPU8[14113 + ($170 & 255) >> 0] | 0); //@line 812
 $341 = (HEAPU8[14113 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 819
 $348 = (HEAPU8[14113 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 826
 $354 = (HEAPU8[14113 + ($110 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 832
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[14113 + $173 >> 0] | 0); //@line 834
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 838
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 842
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 846
 HEAP8[$2 + 4 >> 0] = $281; //@line 849
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 853
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 857
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 861
 HEAP8[$2 + 8 >> 0] = $308; //@line 864
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 868
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 872
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 876
 HEAP8[$2 + 12 >> 0] = $334; //@line 879
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 883
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 887
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 891
 return 0; //@line 892
}
function _mbedtls_internal_aes_encrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 27
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 113
 $$0136 = $4 + 16 | 0; //@line 113
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 113
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 113
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 113
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 113
 while (1) {
  $110 = HEAP32[5396 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[6420 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0139 >>> 24 << 2) >> 2]; //@line 135
  $130 = HEAP32[5396 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[6420 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0137 >>> 24 << 2) >> 2]; //@line 155
  $150 = HEAP32[5396 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[6420 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0138 >>> 24 << 2) >> 2]; //@line 175
  $170 = HEAP32[5396 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[6420 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0140 >>> 24 << 2) >> 2]; //@line 195
  $171 = $$0136 + 20 | 0; //@line 196
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 197
  $173 = $110 & 255; //@line 198
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[5396 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[6420 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($130 >>> 24 << 2) >> 2]; //@line 259
  $250 = HEAP32[5396 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[6420 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($150 >>> 24 << 2) >> 2]; //@line 279
  $$0$in = $$0$in + -1 | 0; //@line 280
  $$0136 = $$0136 + 32 | 0; //@line 280
  $$0137 = HEAP32[5396 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[6420 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($170 >>> 24 << 2) >> 2]; //@line 280
  $$0138 = HEAP32[5396 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[6420 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($110 >>> 24 << 2) >> 2]; //@line 280
  $$0139 = $250; //@line 280
  $$0140 = $230; //@line 280
 }
 $261 = (HEAPU8[13857 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 292
 $268 = (HEAPU8[13857 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 299
 $274 = (HEAPU8[13857 + ($170 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 305
 $276 = HEAP32[$171 >> 2] | 0; //@line 307
 $281 = $276 ^ (HEAPU8[13857 + ($130 & 255) >> 0] | 0); //@line 312
 $288 = (HEAPU8[13857 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 319
 $295 = (HEAPU8[13857 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 326
 $301 = (HEAPU8[13857 + ($110 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 332
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 334
 $308 = $303 ^ (HEAPU8[13857 + ($150 & 255) >> 0] | 0); //@line 339
 $315 = (HEAPU8[13857 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 346
 $322 = (HEAPU8[13857 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 353
 $328 = (HEAPU8[13857 + ($130 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 359
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 360
 $334 = $329 ^ (HEAPU8[13857 + ($170 & 255) >> 0] | 0); //@line 365
 $341 = (HEAPU8[13857 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 372
 $348 = (HEAPU8[13857 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 379
 $354 = (HEAPU8[13857 + ($150 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 385
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[13857 + $173 >> 0] | 0); //@line 387
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 391
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 395
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 399
 HEAP8[$2 + 4 >> 0] = $281; //@line 402
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 406
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 410
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 414
 HEAP8[$2 + 8 >> 0] = $308; //@line 417
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 421
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 425
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 429
 HEAP8[$2 + 12 >> 0] = $334; //@line 432
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 436
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 440
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 444
 return 0; //@line 445
}
function _mbedtls_aes_setkey_enc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0103117 = 0, $$0106 = 0, $$0112 = 0, $$1104111 = 0, $$1114 = 0, $$2105113 = 0, $$2116 = 0, $$3115 = 0, $$sink = 0, $107 = 0, $111 = 0, $115 = 0, $119 = 0, $127 = 0, $129 = 0, $158 = 0, $162 = 0, $166 = 0, $194 = 0, $198 = 0, $202 = 0, $3 = 0, $33 = 0, $35 = 0, $5 = 0, $6 = 0, $64 = 0, $68 = 0, $76 = 0, $78 = 0, $$0112$looptemp = 0, $$1114$looptemp = 0, $$2116$looptemp = 0;
 switch ($2 | 0) {
 case 128:
  {
   $$sink = 10; //@line 27253
   break;
  }
 case 192:
  {
   $$sink = 12; //@line 27257
   break;
  }
 case 256:
  {
   $$sink = 14; //@line 27261
   break;
  }
 default:
  {
   $$0106 = -32; //@line 27265
   return $$0106 | 0; //@line 27266
  }
 }
 HEAP32[$0 >> 2] = $$sink; //@line 27269
 $3 = $0 + 8 | 0; //@line 27270
 HEAP32[$0 + 4 >> 2] = $3; //@line 27272
 $5 = $2 >>> 5; //@line 27273
 $$0103117 = 0; //@line 27274
 do {
  $6 = $$0103117 << 2; //@line 27276
  HEAP32[$0 + 8 + ($$0103117 << 2) >> 2] = (HEAPU8[$1 + ($6 | 1) >> 0] | 0) << 8 | (HEAPU8[$1 + $6 >> 0] | 0) | (HEAPU8[$1 + ($6 | 2) >> 0] | 0) << 16 | (HEAPU8[$1 + ($6 | 3) >> 0] | 0) << 24; //@line 27299
  $$0103117 = $$0103117 + 1 | 0; //@line 27300
 } while (($$0103117 | 0) != ($5 | 0));
 switch (HEAP32[$0 >> 2] | 0) {
 case 10:
  {
   $$0112 = $3; //@line 27312
   $$1104111 = 0; //@line 27312
   $33 = HEAP32[$3 >> 2] | 0; //@line 27312
   do {
    $35 = HEAP32[$$0112 + 12 >> 2] | 0; //@line 27318
    $33 = HEAP32[1260 + ($$1104111 << 2) >> 2] ^ $33 ^ (HEAPU8[13857 + ($35 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13857 + ($35 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13857 + ($35 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13857 + ($35 & 255) >> 0] | 0) << 24; //@line 27343
    $$0112$looptemp = $$0112;
    $$0112 = $$0112 + 16 | 0; //@line 27344
    HEAP32[$$0112 >> 2] = $33; //@line 27345
    $64 = $33 ^ HEAP32[$$0112$looptemp + 4 >> 2]; //@line 27348
    HEAP32[$$0112$looptemp + 20 >> 2] = $64; //@line 27350
    $68 = HEAP32[$$0112$looptemp + 8 >> 2] ^ $64; //@line 27353
    HEAP32[$$0112$looptemp + 24 >> 2] = $68; //@line 27355
    HEAP32[$$0112$looptemp + 28 >> 2] = $35 ^ $68; //@line 27358
    $$1104111 = $$1104111 + 1 | 0; //@line 27359
   } while (($$1104111 | 0) != 10);
   $$0106 = 0; //@line 27362
   return $$0106 | 0; //@line 27368
  }
 case 12:
  {
   $$1114 = $3; //@line 27373
   $$2105113 = 0; //@line 27373
   $76 = HEAP32[$3 >> 2] | 0; //@line 27373
   do {
    $78 = HEAP32[$$1114 + 20 >> 2] | 0; //@line 27379
    $76 = HEAP32[1260 + ($$2105113 << 2) >> 2] ^ $76 ^ (HEAPU8[13857 + ($78 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13857 + ($78 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13857 + ($78 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13857 + ($78 & 255) >> 0] | 0) << 24; //@line 27404
    $$1114$looptemp = $$1114;
    $$1114 = $$1114 + 24 | 0; //@line 27405
    HEAP32[$$1114 >> 2] = $76; //@line 27406
    $107 = $76 ^ HEAP32[$$1114$looptemp + 4 >> 2]; //@line 27409
    HEAP32[$$1114$looptemp + 28 >> 2] = $107; //@line 27411
    $111 = HEAP32[$$1114$looptemp + 8 >> 2] ^ $107; //@line 27414
    HEAP32[$$1114$looptemp + 32 >> 2] = $111; //@line 27416
    $115 = HEAP32[$$1114$looptemp + 12 >> 2] ^ $111; //@line 27419
    HEAP32[$$1114$looptemp + 36 >> 2] = $115; //@line 27421
    $119 = HEAP32[$$1114$looptemp + 16 >> 2] ^ $115; //@line 27424
    HEAP32[$$1114$looptemp + 40 >> 2] = $119; //@line 27426
    HEAP32[$$1114$looptemp + 44 >> 2] = $78 ^ $119; //@line 27429
    $$2105113 = $$2105113 + 1 | 0; //@line 27430
   } while (($$2105113 | 0) != 8);
   $$0106 = 0; //@line 27433
   return $$0106 | 0; //@line 27439
  }
 case 14:
  {
   $$2116 = $3; //@line 27444
   $$3115 = 0; //@line 27444
   $127 = HEAP32[$3 >> 2] | 0; //@line 27444
   do {
    $129 = HEAP32[$$2116 + 28 >> 2] | 0; //@line 27450
    $127 = HEAP32[1260 + ($$3115 << 2) >> 2] ^ $127 ^ (HEAPU8[13857 + ($129 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13857 + ($129 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13857 + ($129 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13857 + ($129 & 255) >> 0] | 0) << 24; //@line 27475
    $$2116$looptemp = $$2116;
    $$2116 = $$2116 + 32 | 0; //@line 27476
    HEAP32[$$2116 >> 2] = $127; //@line 27477
    $158 = $127 ^ HEAP32[$$2116$looptemp + 4 >> 2]; //@line 27480
    HEAP32[$$2116$looptemp + 36 >> 2] = $158; //@line 27482
    $162 = HEAP32[$$2116$looptemp + 8 >> 2] ^ $158; //@line 27485
    HEAP32[$$2116$looptemp + 40 >> 2] = $162; //@line 27487
    $166 = HEAP32[$$2116$looptemp + 12 >> 2] ^ $162; //@line 27490
    HEAP32[$$2116$looptemp + 44 >> 2] = $166; //@line 27492
    $194 = HEAP32[$$2116$looptemp + 16 >> 2] ^ (HEAPU8[13857 + ($166 & 255) >> 0] | 0) ^ (HEAPU8[13857 + ($166 >>> 8 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13857 + ($166 >>> 16 & 255) >> 0] | 0) << 16 ^ (HEAPU8[13857 + ($166 >>> 24) >> 0] | 0) << 24; //@line 27519
    HEAP32[$$2116$looptemp + 48 >> 2] = $194; //@line 27521
    $198 = $194 ^ HEAP32[$$2116$looptemp + 20 >> 2]; //@line 27524
    HEAP32[$$2116$looptemp + 52 >> 2] = $198; //@line 27526
    $202 = HEAP32[$$2116$looptemp + 24 >> 2] ^ $198; //@line 27529
    HEAP32[$$2116$looptemp + 56 >> 2] = $202; //@line 27531
    HEAP32[$$2116$looptemp + 60 >> 2] = $129 ^ $202; //@line 27534
    $$3115 = $$3115 + 1 | 0; //@line 27535
   } while (($$3115 | 0) != 7);
   $$0106 = 0; //@line 27538
   return $$0106 | 0; //@line 27544
  }
 default:
  {
   $$0106 = 0; //@line 27548
   return $$0106 | 0; //@line 27549
  }
 }
 return 0; //@line 27552
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv($0) {
 $0 = $0 | 0;
 var $17 = 0, $27 = 0, $32 = 0, $41 = 0, $44 = 0, $47 = 0, $56 = 0, $58 = 0, $62 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx8 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 17511
 STACKTOP = STACKTOP + 32 | 0; //@line 17512
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17512
 $vararg_buffer5 = sp + 24 | 0; //@line 17513
 $vararg_buffer3 = sp + 16 | 0; //@line 17514
 _printf(12967, sp) | 0; //@line 17517
 _printf(13472, sp + 8 | 0) | 0; //@line 17518
 $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 17519
 _putchar(10) | 0; //@line 17520
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 511; //@line 17523
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 17525
  HEAP32[$AsyncCtx11 + 8 >> 2] = $vararg_buffer3; //@line 17527
  HEAP32[$AsyncCtx11 + 12 >> 2] = $vararg_buffer3; //@line 17529
  HEAP32[$AsyncCtx11 + 16 >> 2] = $vararg_buffer5; //@line 17531
  HEAP32[$AsyncCtx11 + 20 >> 2] = $vararg_buffer5; //@line 17533
  sp = STACKTOP; //@line 17534
  STACKTOP = sp; //@line 17535
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 17537
 $7 = HEAP32[$0 + 356 >> 2] | 0; //@line 17539
 $AsyncCtx21 = _emscripten_alloc_async_context(24, sp) | 0; //@line 17541
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($7, $0 + 1036 | 0); //@line 17542
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 512; //@line 17545
  HEAP32[$AsyncCtx21 + 4 >> 2] = $0; //@line 17547
  HEAP32[$AsyncCtx21 + 8 >> 2] = $vararg_buffer3; //@line 17549
  HEAP32[$AsyncCtx21 + 12 >> 2] = $vararg_buffer3; //@line 17551
  HEAP32[$AsyncCtx21 + 16 >> 2] = $vararg_buffer5; //@line 17553
  HEAP32[$AsyncCtx21 + 20 >> 2] = $vararg_buffer5; //@line 17555
  sp = STACKTOP; //@line 17556
  STACKTOP = sp; //@line 17557
  return;
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 17559
 HEAP32[$0 + 364 >> 2] = 0; //@line 17561
 $17 = $0 + 1160 | 0; //@line 17564
 HEAP8[$17 >> 0] = HEAP8[$0 + 378 >> 0] | 0; //@line 17565
 HEAP8[$0 + 1163 >> 0] = HEAP8[$0 + 1129 >> 0] | 0; //@line 17569
 HEAP8[$0 + 1176 >> 0] = HEAP8[$0 + 1141 >> 0] | 0; //@line 17573
 HEAP8[$0 + 1177 >> 0] = HEAP8[$0 + 369 >> 0] | 0; //@line 17577
 $27 = $0 + 1178 | 0; //@line 17578
 HEAP8[$27 >> 0] = 0; //@line 17579
 HEAP32[$0 + 1180 >> 2] = 0; //@line 17581
 do {
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   $32 = HEAP32[$0 >> 2] | 0; //@line 17587
   $AsyncCtx18 = _emscripten_alloc_async_context(36, sp) | 0; //@line 17588
   __ZN7LoRaPHY20put_radio_to_standbyEv($32); //@line 17589
   if (___async) {
    HEAP32[$AsyncCtx18 >> 2] = 513; //@line 17592
    HEAP32[$AsyncCtx18 + 4 >> 2] = $0; //@line 17594
    HEAP32[$AsyncCtx18 + 8 >> 2] = $0; //@line 17596
    HEAP32[$AsyncCtx18 + 12 >> 2] = $17; //@line 17598
    HEAP32[$AsyncCtx18 + 16 >> 2] = $27; //@line 17600
    HEAP32[$AsyncCtx18 + 20 >> 2] = $vararg_buffer3; //@line 17602
    HEAP32[$AsyncCtx18 + 24 >> 2] = $vararg_buffer3; //@line 17604
    HEAP32[$AsyncCtx18 + 28 >> 2] = $vararg_buffer5; //@line 17606
    HEAP32[$AsyncCtx18 + 32 >> 2] = $vararg_buffer5; //@line 17608
    sp = STACKTOP; //@line 17609
    STACKTOP = sp; //@line 17610
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx18 | 0); //@line 17612
    break;
   }
  }
 } while (0);
 $41 = HEAP32[$0 >> 2] | 0; //@line 17617
 $44 = HEAP32[(HEAP32[$41 >> 2] | 0) + 24 >> 2] | 0; //@line 17620
 $47 = (__ZN11LoRaMacMcps14get_indicationEv($0 + 288 | 0) | 0) + 10 | 0; //@line 17623
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 17624
 FUNCTION_TABLE_iiii[$44 & 15]($41, $17, $47) | 0; //@line 17625
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 514; //@line 17628
  HEAP32[$AsyncCtx + 4 >> 2] = $27; //@line 17630
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 17632
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer3; //@line 17634
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 17636
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer5; //@line 17638
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer5; //@line 17640
  HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 17642
  sp = STACKTOP; //@line 17643
  STACKTOP = sp; //@line 17644
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17646
 $56 = (HEAP8[$27 >> 0] | 0) != 0; //@line 17648
 $58 = HEAP32[$0 + 1108 >> 2] | 0; //@line 17650
 _printf(12967, $vararg_buffer3) | 0; //@line 17651
 _printf(13043, $vararg_buffer5) | 0; //@line 17652
 $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 17653
 _putchar(10) | 0; //@line 17654
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 515; //@line 17657
  HEAP32[$AsyncCtx8 + 4 >> 2] = $0; //@line 17659
  HEAP8[$AsyncCtx8 + 8 >> 0] = $56 & 1; //@line 17662
  HEAP32[$AsyncCtx8 + 12 >> 2] = $58; //@line 17664
  sp = STACKTOP; //@line 17665
  STACKTOP = sp; //@line 17666
  return;
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 17668
 $62 = HEAP32[$0 >> 2] | 0; //@line 17669
 $AsyncCtx14 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17670
 __ZN7LoRaPHY15setup_rx_windowEbj($62, $56, $58); //@line 17671
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 516; //@line 17674
  sp = STACKTOP; //@line 17675
  STACKTOP = sp; //@line 17676
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx14 | 0); //@line 17678
  STACKTOP = sp; //@line 17679
  return;
 }
}
function __ZN12LoRaWANStack17send_frame_to_macEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$pre$phiZ2D = 0, $$sink2$sink = 0, $1 = 0, $14 = 0, $15 = 0, $2 = 0, $38 = 0, $39 = 0, $4 = 0, $58 = 0, $59 = 0, $72 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 8836
 STACKTOP = STACKTOP + 32 | 0; //@line 8837
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8837
 $1 = sp + 16 | 0; //@line 8838
 $2 = sp; //@line 8839
 $4 = HEAP32[$0 + 1968 >> 2] | 0; //@line 8841
 HEAP32[$1 >> 2] = $4; //@line 8842
 L1 : do {
  switch ($4 | 0) {
  case 0:
   {
    HEAP32[$1 + 8 >> 2] = $0 + 1975; //@line 8848
    HEAP16[$1 + 12 >> 1] = HEAP16[$0 + 2230 >> 1] | 0; //@line 8852
    HEAP8[$1 + 4 >> 0] = HEAP8[$0 + 1972 >> 0] | 0; //@line 8856
    HEAP8[$1 + 6 >> 0] = 1; //@line 8858
    HEAP32[$2 >> 2] = 21; //@line 8859
    $14 = $0 + 4 | 0; //@line 8860
    $AsyncCtx11 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8861
    $15 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($14, $2) | 0; //@line 8862
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 293; //@line 8865
     HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 8867
     HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 8869
     HEAP32[$AsyncCtx11 + 12 >> 2] = $14; //@line 8871
     HEAP32[$AsyncCtx11 + 16 >> 2] = $1; //@line 8873
     HEAP32[$AsyncCtx11 + 20 >> 2] = $2; //@line 8875
     HEAP32[$AsyncCtx11 + 24 >> 2] = $1; //@line 8877
     sp = STACKTOP; //@line 8878
     STACKTOP = sp; //@line 8879
     return 0; //@line 8879
    }
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 8881
    if (!$15) {
     $$pre$phiZ2D = $14; //@line 8886
     $$sink2$sink = HEAP8[$2 + 4 >> 0] | 0; //@line 8886
     break L1;
    } else {
     $$pre$phiZ2D = $14; //@line 8891
     $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv($0 + 1336 | 0) | 0; //@line 8891
     break L1;
    }
    break;
   }
  case 1:
   {
    HEAP32[$1 + 8 >> 2] = $0 + 1975; //@line 8899
    HEAP16[$1 + 12 >> 1] = HEAP16[$0 + 2230 >> 1] | 0; //@line 8903
    HEAP8[$1 + 4 >> 0] = HEAP8[$0 + 1972 >> 0] | 0; //@line 8907
    HEAP8[$1 + 6 >> 0] = HEAP8[$0 + 1974 >> 0] | 0; //@line 8911
    HEAP32[$2 >> 2] = 21; //@line 8912
    $38 = $0 + 4 | 0; //@line 8913
    $AsyncCtx7 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8914
    $39 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($38, $2) | 0; //@line 8915
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 294; //@line 8918
     HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 8920
     HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 8922
     HEAP32[$AsyncCtx7 + 12 >> 2] = $38; //@line 8924
     HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 8926
     HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 8928
     HEAP32[$AsyncCtx7 + 24 >> 2] = $1; //@line 8930
     sp = STACKTOP; //@line 8931
     STACKTOP = sp; //@line 8932
     return 0; //@line 8932
    }
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 8934
    if (!$39) {
     $$pre$phiZ2D = $38; //@line 8939
     $$sink2$sink = HEAP8[$2 + 4 >> 0] | 0; //@line 8939
     break L1;
    } else {
     $$pre$phiZ2D = $38; //@line 8944
     $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv($0 + 1336 | 0) | 0; //@line 8944
     break L1;
    }
    break;
   }
  case 3:
   {
    HEAP32[$1 + 8 >> 2] = $0 + 1975; //@line 8952
    HEAP16[$1 + 12 >> 1] = HEAP16[$0 + 2230 >> 1] | 0; //@line 8956
    HEAP8[$1 + 4 >> 0] = 0; //@line 8958
    HEAP8[$1 + 6 >> 0] = 1; //@line 8960
    HEAP32[$2 >> 2] = 21; //@line 8961
    $58 = $0 + 4 | 0; //@line 8962
    $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8963
    $59 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($58, $2) | 0; //@line 8964
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 295; //@line 8967
     HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 8969
     HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 8971
     HEAP32[$AsyncCtx3 + 12 >> 2] = $58; //@line 8973
     HEAP32[$AsyncCtx3 + 16 >> 2] = $1; //@line 8975
     HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 8977
     HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 8979
     sp = STACKTOP; //@line 8980
     STACKTOP = sp; //@line 8981
     return 0; //@line 8981
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8983
    if (!$59) {
     $$pre$phiZ2D = $58; //@line 8988
     $$sink2$sink = HEAP8[$2 + 4 >> 0] | 0; //@line 8988
     break L1;
    } else {
     $$pre$phiZ2D = $58; //@line 8993
     $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv($0 + 1336 | 0) | 0; //@line 8993
     break L1;
    }
    break;
   }
  default:
   {
    $$0 = -1002; //@line 8999
    STACKTOP = sp; //@line 9000
    return $$0 | 0; //@line 9000
   }
  }
 } while (0);
 HEAP8[$1 + 5 >> 0] = $$sink2$sink; //@line 9005
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 9006
 $72 = __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($$pre$phiZ2D, $1) | 0; //@line 9007
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 296; //@line 9010
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 9012
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9014
  sp = STACKTOP; //@line 9015
  STACKTOP = sp; //@line 9016
  return 0; //@line 9016
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9018
 $$0 = $72; //@line 9019
 STACKTOP = sp; //@line 9020
 return $$0 | 0; //@line 9020
}
function __ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$01722$i = 0, $$01821$i = 0, $$023$i = 0, $$2$i = 0, $$220$i = 0, $$sink = 0, $10 = 0, $11 = 0, $15 = 0, $22 = 0, $23 = 0, $25 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $5 = 0, $55 = 0, $57 = 0, $7 = 0, $75 = 0, $78 = 0, $8 = 0, $9 = 0, $91 = 0, $92 = 0, $indvars$iv$i = 0, $indvars$iv$i27 = 0, $wide$trip$count$i = 0, $wide$trip$count$i25 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 25107
 STACKTOP = STACKTOP + 16 | 0; //@line 25108
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 25108
 $5 = sp; //@line 25109
 dest = $5; //@line 25110
 stop = dest + 16 | 0; //@line 25110
 do {
  HEAP8[dest >> 0] = 255; //@line 25110
  dest = dest + 1 | 0; //@line 25110
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[$0 + 72 >> 2] | 0; //@line 25112
 $8 = $0 + 120 | 0; //@line 25113
 $9 = HEAP32[$8 >> 2] | 0; //@line 25114
 $10 = $0 + 128 | 0; //@line 25115
 $11 = HEAP8[$10 >> 0] | 0; //@line 25116
 if (!((__ZN7LoRaPHY19num_active_channelsEPthh(0, $9, 0, $11) | 0) << 24 >> 24)) {
  $15 = HEAP32[$0 + 124 >> 2] | 0; //@line 25121
  if ($11 << 24 >> 24 != 0 & (($9 | 0) != 0 & ($15 | 0) != 0)) {
   $wide$trip$count$i = $11 & 255; //@line 25128
   $indvars$iv$i = 0; //@line 25129
   do {
    HEAP16[$9 + ($indvars$iv$i << 1) >> 1] = HEAP16[$15 + ($indvars$iv$i << 1) >> 1] | 0; //@line 25134
    $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 25135
   } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
  }
 }
 $22 = HEAP32[$1 >> 2] | 0; //@line 25145
 $23 = $0 + 8 | 0; //@line 25146
 $25 = $1 + 4 | 0; //@line 25148
 if ($22 >>> 0 > (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) >>> 0) {
  $78 = HEAP32[$1 >> 2] | 0; //@line 25153
  $$0 = 1; //@line 25158
  $$sink = $78 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) | 0; //@line 25158
  HEAP32[$3 >> 2] = $$sink; //@line 25159
  STACKTOP = sp; //@line 25160
  return $$0 | 0; //@line 25160
 }
 HEAP32[$4 >> 2] = 0; //@line 25162
 $37 = __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, (HEAP8[$1 + 9 >> 0] | 0) != 0, (HEAP8[$1 + 10 >> 0] | 0) != 0, $7, HEAP8[$0 + 76 >> 0] | 0) | 0; //@line 25171
 $39 = HEAP8[$1 + 8 >> 0] | 0; //@line 25173
 $40 = HEAP32[$8 >> 2] | 0; //@line 25174
 $42 = HEAP8[$0 + 20 >> 0] | 0; //@line 25176
 do {
  if ($42 << 24 >> 24) {
   $44 = $0 + 112 | 0; //@line 25180
   $45 = $0 + 72 | 0; //@line 25181
   $$01722$i = 0; //@line 25182
   $$01821$i = 0; //@line 25182
   $$023$i = 0; //@line 25182
   $47 = 0; //@line 25182
   while (1) {
    do {
     if (!(1 << ($47 & 15) & HEAPU16[$40 + ($47 >>> 4 << 1) >> 1])) {
      $$2$i = $$023$i; //@line 25194
      $$220$i = $$01821$i; //@line 25194
     } else {
      $55 = HEAP32[$44 >> 2] | 0; //@line 25196
      $57 = HEAP8[$55 + ($47 * 12 | 0) + 8 >> 0] | 0; //@line 25198
      if ($57 << 24 >> 24 >> 4 << 24 >> 24 < $39 << 24 >> 24 ? 1 : ($57 << 4 & 255) << 24 >> 24 >> 4 << 24 >> 24 > $39 << 24 >> 24) {
       $$2$i = $$023$i; //@line 25206
       $$220$i = $$01821$i; //@line 25206
      } else {
       if (!(HEAP32[(HEAP32[$45 >> 2] | 0) + ((HEAPU8[$55 + ($47 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 12 >> 2] | 0)) {
        HEAP8[$5 + ($$023$i & 255) >> 0] = $$01722$i; //@line 25219
        $$2$i = $$023$i + 1 << 24 >> 24; //@line 25220
        $$220$i = $$01821$i; //@line 25220
        break;
       } else {
        $$2$i = $$023$i; //@line 25224
        $$220$i = $$01821$i + 1 << 24 >> 24; //@line 25224
        break;
       }
      }
     }
    } while (0);
    $75 = $$01722$i + 1 << 24 >> 24; //@line 25230
    if (($75 & 255) < ($42 & 255)) {
     $$01722$i = $75; //@line 25234
     $$01821$i = $$220$i; //@line 25234
     $$023$i = $$2$i; //@line 25234
     $47 = $75 & 255; //@line 25234
    } else {
     break;
    }
   }
   if (!($$2$i << 24 >> 24)) {
    if (!($$220$i << 24 >> 24)) {
     break;
    } else {
     $$0 = 1; //@line 25245
     $$sink = $37; //@line 25245
    }
    HEAP32[$3 >> 2] = $$sink; //@line 25247
    STACKTOP = sp; //@line 25248
    return $$0 | 0; //@line 25248
   } else {
    HEAP8[$2 >> 0] = HEAP8[$5 + ((_rand() | 0) % ($$2$i & 255 | 0) | 0) >> 0] | 0; //@line 25255
    $$0 = 1; //@line 25256
    $$sink = 0; //@line 25256
    HEAP32[$3 >> 2] = $$sink; //@line 25257
    STACKTOP = sp; //@line 25258
    return $$0 | 0; //@line 25258
   }
  }
 } while (0);
 $91 = HEAP32[$0 + 124 >> 2] | 0; //@line 25263
 $92 = HEAP8[$10 >> 0] | 0; //@line 25264
 if (!(($40 | 0) != 0 & ($91 | 0) != 0 & $92 << 24 >> 24 != 0)) {
  $$0 = 0; //@line 25271
  $$sink = 0; //@line 25271
  HEAP32[$3 >> 2] = $$sink; //@line 25272
  STACKTOP = sp; //@line 25273
  return $$0 | 0; //@line 25273
 }
 $wide$trip$count$i25 = $92 & 255; //@line 25275
 $indvars$iv$i27 = 0; //@line 25276
 do {
  HEAP16[$40 + ($indvars$iv$i27 << 1) >> 1] = HEAP16[$91 + ($indvars$iv$i27 << 1) >> 1] | 0; //@line 25281
  $indvars$iv$i27 = $indvars$iv$i27 + 1 | 0; //@line 25282
 } while (($indvars$iv$i27 | 0) != ($wide$trip$count$i25 | 0));
 $$0 = 0; //@line 25285
 $$sink = 0; //@line 25285
 HEAP32[$3 >> 2] = $$sink; //@line 25291
 STACKTOP = sp; //@line 25292
 return $$0 | 0; //@line 25292
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_451($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 33034
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33036
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33038
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33042
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33044
 $11 = $8 + 12 | 0; //@line 33045
 HEAP32[$8 >> 2] = 577; //@line 33046
 HEAP32[$8 + 4 >> 2] = 0; //@line 33048
 HEAP32[$8 + 8 >> 2] = $4; //@line 33050
 HEAP32[$11 >> 2] = 848; //@line 33051
 $12 = $4 + 1228 | 0; //@line 33052
 if (($12 | 0) == ($8 | 0)) {
  $35 = HEAP32[214] | 0; //@line 33056
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 33057
  FUNCTION_TABLE_vi[$35 & 1023]($8); //@line 33058
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 580; //@line 33061
   $36 = $ReallocAsyncCtx12 + 4 | 0; //@line 33062
   HEAP32[$36 >> 2] = $8; //@line 33063
   $37 = $ReallocAsyncCtx12 + 8 | 0; //@line 33064
   HEAP32[$37 >> 2] = $2; //@line 33065
   $38 = $ReallocAsyncCtx12 + 12 | 0; //@line 33066
   HEAP32[$38 >> 2] = $4; //@line 33067
   $39 = $ReallocAsyncCtx12 + 16 | 0; //@line 33068
   HEAP32[$39 >> 2] = $10; //@line 33069
   sp = STACKTOP; //@line 33070
   return;
  }
  ___async_unwind = 0; //@line 33073
  HEAP32[$ReallocAsyncCtx12 >> 2] = 580; //@line 33074
  $36 = $ReallocAsyncCtx12 + 4 | 0; //@line 33075
  HEAP32[$36 >> 2] = $8; //@line 33076
  $37 = $ReallocAsyncCtx12 + 8 | 0; //@line 33077
  HEAP32[$37 >> 2] = $2; //@line 33078
  $38 = $ReallocAsyncCtx12 + 12 | 0; //@line 33079
  HEAP32[$38 >> 2] = $4; //@line 33080
  $39 = $ReallocAsyncCtx12 + 16 | 0; //@line 33081
  HEAP32[$39 >> 2] = $10; //@line 33082
  sp = STACKTOP; //@line 33083
  return;
 }
 $14 = $4 + 1240 | 0; //@line 33086
 $15 = HEAP32[$14 >> 2] | 0; //@line 33087
 if (!$15) {
  $27 = HEAP32[213] | 0; //@line 33091
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 33092
  FUNCTION_TABLE_vii[$27 & 31]($12, $8); //@line 33093
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 579; //@line 33096
   $28 = $ReallocAsyncCtx11 + 4 | 0; //@line 33097
   HEAP32[$28 >> 2] = $8; //@line 33098
   $29 = $ReallocAsyncCtx11 + 8 | 0; //@line 33099
   HEAP32[$29 >> 2] = $2; //@line 33100
   $30 = $ReallocAsyncCtx11 + 12 | 0; //@line 33101
   HEAP32[$30 >> 2] = $4; //@line 33102
   $31 = $ReallocAsyncCtx11 + 16 | 0; //@line 33103
   HEAP32[$31 >> 2] = $11; //@line 33104
   $32 = $ReallocAsyncCtx11 + 20 | 0; //@line 33105
   HEAP32[$32 >> 2] = $14; //@line 33106
   $33 = $ReallocAsyncCtx11 + 24 | 0; //@line 33107
   HEAP32[$33 >> 2] = $10; //@line 33108
   sp = STACKTOP; //@line 33109
   return;
  }
  ___async_unwind = 0; //@line 33112
  HEAP32[$ReallocAsyncCtx11 >> 2] = 579; //@line 33113
  $28 = $ReallocAsyncCtx11 + 4 | 0; //@line 33114
  HEAP32[$28 >> 2] = $8; //@line 33115
  $29 = $ReallocAsyncCtx11 + 8 | 0; //@line 33116
  HEAP32[$29 >> 2] = $2; //@line 33117
  $30 = $ReallocAsyncCtx11 + 12 | 0; //@line 33118
  HEAP32[$30 >> 2] = $4; //@line 33119
  $31 = $ReallocAsyncCtx11 + 16 | 0; //@line 33120
  HEAP32[$31 >> 2] = $11; //@line 33121
  $32 = $ReallocAsyncCtx11 + 20 | 0; //@line 33122
  HEAP32[$32 >> 2] = $14; //@line 33123
  $33 = $ReallocAsyncCtx11 + 24 | 0; //@line 33124
  HEAP32[$33 >> 2] = $10; //@line 33125
  sp = STACKTOP; //@line 33126
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 33130
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 33131
  FUNCTION_TABLE_vi[$18 & 1023]($12); //@line 33132
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 578; //@line 33135
   $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 33136
   HEAP32[$19 >> 2] = $8; //@line 33137
   $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 33138
   HEAP32[$20 >> 2] = $2; //@line 33139
   $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 33140
   HEAP32[$21 >> 2] = $4; //@line 33141
   $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 33142
   HEAP32[$22 >> 2] = $12; //@line 33143
   $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 33144
   HEAP32[$23 >> 2] = $14; //@line 33145
   $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 33146
   HEAP32[$24 >> 2] = $11; //@line 33147
   $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 33148
   HEAP32[$25 >> 2] = $10; //@line 33149
   sp = STACKTOP; //@line 33150
   return;
  }
  ___async_unwind = 0; //@line 33153
  HEAP32[$ReallocAsyncCtx10 >> 2] = 578; //@line 33154
  $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 33155
  HEAP32[$19 >> 2] = $8; //@line 33156
  $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 33157
  HEAP32[$20 >> 2] = $2; //@line 33158
  $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 33159
  HEAP32[$21 >> 2] = $4; //@line 33160
  $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 33161
  HEAP32[$22 >> 2] = $12; //@line 33162
  $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 33163
  HEAP32[$23 >> 2] = $14; //@line 33164
  $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 33165
  HEAP32[$24 >> 2] = $11; //@line 33166
  $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 33167
  HEAP32[$25 >> 2] = $10; //@line 33168
  sp = STACKTOP; //@line 33169
  return;
 }
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_292($0) {
 $0 = $0 | 0;
 var $$05$i = 0, $$06$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $41 = 0, $53 = 0, $56 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 13574
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13576
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13578
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13580
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13582
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13584
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13586
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13588
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13590
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13592
 $19 = $2 + 968 | 0; //@line 13593
 HEAP32[$19 >> 2] = HEAP32[$19 >> 2] & -17; //@line 13596
 if (HEAP8[$2 + 944 >> 0] & 8) {
  if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) >> 2] | 0)) {
   HEAP8[$2 + 372 >> 0] = 0; //@line 13609
   HEAP32[$2 + 956 >> 2] = 0; //@line 13611
   HEAP32[$2 + 960 >> 2] = 0; //@line 13613
   HEAP32[$2 + 964 >> 2] = 0; //@line 13615
   HEAP8[$2 + 380 >> 0] = 0; //@line 13617
   HEAP8[$2 + 894 >> 0] = 1; //@line 13619
   HEAP8[$2 + 895 >> 0] = 1; //@line 13621
   HEAP8[$2 + 377 >> 0] = 0; //@line 13623
   HEAP8[$2 + 1152 >> 0] = 0; //@line 13625
   HEAP16[$2 + 1154 >> 1] = 1; //@line 13627
   $41 = $2 + 4 | 0; //@line 13628
   __ZN14LoRaMacCommand20clear_command_bufferEv($41); //@line 13629
   __ZN14LoRaMacCommand19clear_repeat_bufferEv($41); //@line 13630
   __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($41); //@line 13631
   HEAP8[$2 + 371 >> 0] = 1; //@line 13633
   __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$2 >> 2] | 0, $2 + 360 | 0, 0); //@line 13635
   HEAP8[$2 + 373 >> 0] = 0; //@line 13637
   HEAP8[$2 + 374 >> 0] = 0; //@line 13639
   $$05$i = HEAP32[$2 + 1208 >> 2] | 0; //@line 13641
   if ($$05$i | 0) {
    $$06$i = $$05$i; //@line 13644
    do {
     HEAP32[$$06$i + 36 >> 2] = 0; //@line 13647
     $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 13649
    } while (($$06$i | 0) != 0);
   }
   HEAP8[$2 + 378 >> 0] = 0; //@line 13659
   HEAP8[$2 + 379 >> 0] = 0; //@line 13661
   $53 = HEAP32[$2 >> 2] | 0; //@line 13662
   $56 = HEAP32[(HEAP32[$53 >> 2] | 0) + 52 >> 2] | 0; //@line 13665
   $61 = (HEAPU8[$2 + 897 >> 0] | 0) + 1 & 255; //@line 13670
   $ReallocAsyncCtx = _emscripten_realloc_async_context(40) | 0; //@line 13671
   $62 = FUNCTION_TABLE_iii[$56 & 31]($53, $61) | 0; //@line 13672
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 482; //@line 13675
    $63 = $ReallocAsyncCtx + 4 | 0; //@line 13676
    HEAP32[$63 >> 2] = $2; //@line 13677
    $64 = $ReallocAsyncCtx + 8 | 0; //@line 13678
    HEAP32[$64 >> 2] = $4; //@line 13679
    $65 = $ReallocAsyncCtx + 12 | 0; //@line 13680
    HEAP32[$65 >> 2] = $6; //@line 13681
    $66 = $ReallocAsyncCtx + 16 | 0; //@line 13682
    HEAP32[$66 >> 2] = $8; //@line 13683
    $67 = $ReallocAsyncCtx + 20 | 0; //@line 13684
    HEAP32[$67 >> 2] = $10; //@line 13685
    $68 = $ReallocAsyncCtx + 24 | 0; //@line 13686
    HEAP32[$68 >> 2] = $12; //@line 13687
    $69 = $ReallocAsyncCtx + 28 | 0; //@line 13688
    HEAP32[$69 >> 2] = $14; //@line 13689
    $70 = $ReallocAsyncCtx + 32 | 0; //@line 13690
    HEAP32[$70 >> 2] = $16; //@line 13691
    $71 = $ReallocAsyncCtx + 36 | 0; //@line 13692
    HEAP32[$71 >> 2] = $18; //@line 13693
    sp = STACKTOP; //@line 13694
    return;
   }
   HEAP8[___async_retval >> 0] = $62; //@line 13698
   ___async_unwind = 0; //@line 13699
   HEAP32[$ReallocAsyncCtx >> 2] = 482; //@line 13700
   $63 = $ReallocAsyncCtx + 4 | 0; //@line 13701
   HEAP32[$63 >> 2] = $2; //@line 13702
   $64 = $ReallocAsyncCtx + 8 | 0; //@line 13703
   HEAP32[$64 >> 2] = $4; //@line 13704
   $65 = $ReallocAsyncCtx + 12 | 0; //@line 13705
   HEAP32[$65 >> 2] = $6; //@line 13706
   $66 = $ReallocAsyncCtx + 16 | 0; //@line 13707
   HEAP32[$66 >> 2] = $8; //@line 13708
   $67 = $ReallocAsyncCtx + 20 | 0; //@line 13709
   HEAP32[$67 >> 2] = $10; //@line 13710
   $68 = $ReallocAsyncCtx + 24 | 0; //@line 13711
   HEAP32[$68 >> 2] = $12; //@line 13712
   $69 = $ReallocAsyncCtx + 28 | 0; //@line 13713
   HEAP32[$69 >> 2] = $14; //@line 13714
   $70 = $ReallocAsyncCtx + 32 | 0; //@line 13715
   HEAP32[$70 >> 2] = $16; //@line 13716
   $71 = $ReallocAsyncCtx + 36 | 0; //@line 13717
   HEAP32[$71 >> 2] = $18; //@line 13718
   sp = STACKTOP; //@line 13719
   return;
  }
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 13723
 __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 13724
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 13727
  $73 = $ReallocAsyncCtx5 + 4 | 0; //@line 13728
  HEAP32[$73 >> 2] = $6; //@line 13729
  $74 = $ReallocAsyncCtx5 + 8 | 0; //@line 13730
  HEAP32[$74 >> 2] = $4; //@line 13731
  sp = STACKTOP; //@line 13732
  return;
 }
 ___async_unwind = 0; //@line 13735
 HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 13736
 $73 = $ReallocAsyncCtx5 + 4 | 0; //@line 13737
 HEAP32[$73 >> 2] = $6; //@line 13738
 $74 = $ReallocAsyncCtx5 + 8 | 0; //@line 13739
 HEAP32[$74 >> 2] = $4; //@line 13740
 sp = STACKTOP; //@line 13741
 return;
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$ = 0, $$sink = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $65 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 308
 STACKTOP = STACKTOP + 48 | 0; //@line 309
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 309
 $vararg_buffer9 = sp + 40 | 0; //@line 310
 $vararg_buffer7 = sp + 32 | 0; //@line 311
 $vararg_buffer5 = sp + 24 | 0; //@line 312
 $vararg_buffer3 = sp + 16 | 0; //@line 313
 $vararg_buffer1 = sp + 8 | 0; //@line 314
 $15 = $8 & 1; //@line 316
 $16 = $10 & 1; //@line 317
 $17 = $11 & 1; //@line 318
 $18 = $13 & 1; //@line 319
 $19 = $14 & 1; //@line 320
 $21 = $0 + 689 | 0; //@line 322
 HEAP8[$21 >> 0] = $1; //@line 323
 _printf(10904, sp) | 0; //@line 324
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$21 >> 0]; //@line 327
 _printf(11079, $vararg_buffer1) | 0; //@line 328
 $AsyncCtx17 = _emscripten_alloc_async_context(72, sp) | 0; //@line 329
 _putchar(10) | 0; //@line 330
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 60; //@line 333
  HEAP32[$AsyncCtx17 + 4 >> 2] = $1; //@line 335
  HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 337
  HEAP32[$AsyncCtx17 + 12 >> 2] = $2; //@line 339
  HEAP32[$AsyncCtx17 + 16 >> 2] = $3; //@line 341
  HEAP32[$AsyncCtx17 + 20 >> 2] = $5; //@line 343
  HEAP8[$AsyncCtx17 + 24 >> 0] = $15; //@line 345
  HEAP8[$AsyncCtx17 + 25 >> 0] = $9; //@line 347
  HEAP8[$AsyncCtx17 + 26 >> 0] = $16; //@line 349
  HEAP8[$AsyncCtx17 + 27 >> 0] = $18; //@line 351
  HEAP8[$AsyncCtx17 + 28 >> 0] = $19; //@line 353
  HEAP16[$AsyncCtx17 + 30 >> 1] = $6; //@line 355
  HEAP16[$AsyncCtx17 + 32 >> 1] = $7; //@line 357
  HEAP32[$AsyncCtx17 + 36 >> 2] = $vararg_buffer3; //@line 359
  HEAP32[$AsyncCtx17 + 40 >> 2] = $vararg_buffer3; //@line 361
  HEAP32[$AsyncCtx17 + 44 >> 2] = $vararg_buffer5; //@line 363
  HEAP32[$AsyncCtx17 + 48 >> 2] = $vararg_buffer5; //@line 365
  HEAP8[$AsyncCtx17 + 52 >> 0] = $4; //@line 367
  HEAP8[$AsyncCtx17 + 53 >> 0] = $17; //@line 369
  HEAP8[$AsyncCtx17 + 54 >> 0] = $12; //@line 371
  HEAP32[$AsyncCtx17 + 56 >> 2] = $vararg_buffer7; //@line 373
  HEAP32[$AsyncCtx17 + 60 >> 2] = $vararg_buffer7; //@line 375
  HEAP32[$AsyncCtx17 + 64 >> 2] = $vararg_buffer9; //@line 377
  HEAP32[$AsyncCtx17 + 68 >> 2] = $vararg_buffer9; //@line 379
  sp = STACKTOP; //@line 380
  STACKTOP = sp; //@line 381
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 383
 switch ($1 | 0) {
 case 0:
  {
   HEAP32[$0 + 704 >> 2] = $2; //@line 387
   HEAP32[$0 + 712 >> 2] = $3; //@line 389
   HEAP32[$0 + 708 >> 2] = $5; //@line 391
   HEAP8[$0 + 718 >> 0] = $15; //@line 393
   HEAP8[$0 + 719 >> 0] = $9; //@line 395
   HEAP8[$0 + 720 >> 0] = $16; //@line 397
   HEAP8[$0 + 721 >> 0] = $18; //@line 399
   HEAP8[$0 + 722 >> 0] = $19; //@line 401
   HEAP16[$0 + 716 >> 1] = $6; //@line 403
   HEAP32[$0 + 728 >> 2] = ~~(1.0 / +($3 >>> 0) * 8.0 * +($7 & 65535) * 1.0e3) >>> 0; //@line 412
   _printf(10904, $vararg_buffer3) | 0; //@line 413
   _printf(11537, $vararg_buffer5) | 0; //@line 414
   $AsyncCtx13 = _emscripten_alloc_async_context(4, sp) | 0; //@line 415
   _putchar(10) | 0; //@line 416
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 61; //@line 419
    sp = STACKTOP; //@line 420
    STACKTOP = sp; //@line 421
    return;
   }
   _emscripten_free_async_context($AsyncCtx13 | 0); //@line 423
   STACKTOP = sp; //@line 424
   return;
  }
 case 1:
  {
   if ($2 >>> 0 > 2) {
    while (1) {}
   }
   $65 = $2 + 7 | 0; //@line 433
   HEAP32[$0 + 752 >> 2] = $65; //@line 435
   HEAP32[$0 + 756 >> 2] = $3; //@line 437
   HEAP8[$0 + 761 >> 0] = $4; //@line 439
   HEAP16[$0 + 762 >> 1] = $6; //@line 441
   HEAP8[$0 + 764 >> 0] = $15; //@line 443
   HEAP8[$0 + 765 >> 0] = $9; //@line 445
   HEAP8[$0 + 766 >> 0] = $16; //@line 447
   HEAP8[$0 + 767 >> 0] = $17; //@line 449
   HEAP8[$0 + 768 >> 0] = $12; //@line 451
   HEAP8[$0 + 769 >> 0] = $18; //@line 453
   HEAP8[$0 + 770 >> 0] = $19; //@line 455
   $$ = $3 >>> 0 > 6 ? $3 : 6; //@line 457
   if (($2 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 11; //@line 465
   } else {
    if (($65 | 0) == 8 & $$ >>> 0 > 11) {
     label = 11; //@line 471
    } else {
     $$sink = 0; //@line 473
    }
   }
   if ((label | 0) == 11) {
    $$sink = 1; //@line 477
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 480
   _printf(10904, $vararg_buffer7) | 0; //@line 481
   _printf(11518, $vararg_buffer9) | 0; //@line 482
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 483
   _putchar(10) | 0; //@line 484
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 62; //@line 487
    sp = STACKTOP; //@line 488
    STACKTOP = sp; //@line 489
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 491
   STACKTOP = sp; //@line 492
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 496
   return;
  }
 }
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i15 = 0, $$1 = 0, $10 = 0, $16 = 0, $18 = 0, $22 = 0, $26 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $48 = 0, $51 = 0, $58 = 0, $60 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18949
 STACKTOP = STACKTOP + 16 | 0; //@line 18950
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18950
 $vararg_buffer1 = sp + 8 | 0; //@line 18951
 $vararg_buffer = sp; //@line 18952
 _printf(12967, $vararg_buffer) | 0; //@line 18953
 _printf(13511, $vararg_buffer1) | 0; //@line 18954
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 18955
 _putchar(10) | 0; //@line 18956
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 557; //@line 18959
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 18961
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 18963
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 18965
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 18967
  sp = STACKTOP; //@line 18968
  STACKTOP = sp; //@line 18969
  return 0; //@line 18969
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 18971
 if (HEAP32[$0 + 968 >> 2] | 0) {
  $$1 = -1e3; //@line 18976
  STACKTOP = sp; //@line 18977
  return $$1 | 0; //@line 18977
 }
 $10 = HEAP8[$1 + 5 >> 0] | 0; //@line 18980
 if ($10 << 24 >> 24 > (__ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0) << 24 >> 24) {
  $26 = $10; //@line 18985
 } else {
  $26 = __ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 18989
 }
 HEAP8[$vararg_buffer >> 0] = 0; //@line 18991
 $16 = $0 + 288 | 0; //@line 18992
 __ZN11LoRaMacMcps18reset_confirmationEv($16); //@line 18993
 HEAP8[$0 + 895 >> 0] = 1; //@line 18995
 $18 = $0 + 894 | 0; //@line 18996
 HEAP8[$18 >> 0] = 1; //@line 18997
 switch (HEAP32[$1 >> 2] | 0) {
 case 0:
  {
   HEAP8[$vararg_buffer >> 0] = 64; //@line 19001
   label = 10; //@line 19002
   break;
  }
 case 1:
  {
   HEAP8[$vararg_buffer >> 0] = -128; //@line 19006
   HEAP8[$18 >> 0] = HEAP8[$1 + 6 >> 0] | 0; //@line 19009
   label = 10; //@line 19010
   break;
  }
 case 3:
  {
   HEAP8[$vararg_buffer >> 0] = -32; //@line 19014
   label = 10; //@line 19015
   break;
  }
 default:
  {
   $$0 = -1003; //@line 19019
  }
 }
 do {
  if ((label | 0) == 10) {
   $22 = $0 + 1156 | 0; //@line 19024
   if (!(HEAP8[$22 >> 0] | 0)) {
    if (!(__ZN7LoRaPHY18verify_tx_datarateEhb(HEAP32[$0 >> 2] | 0, $26, 0) | 0)) {
     $$0 = -1003; //@line 19031
     break;
    }
    HEAP8[$0 + 1097 >> 0] = $26; //@line 19035
    $35 = HEAP8[$22 >> 0] << 7 & 255; //@line 19038
   } else {
    $35 = -128; //@line 19040
   }
   $30 = HEAP8[$1 + 4 >> 0] | 0; //@line 19043
   $32 = HEAP32[$1 + 8 >> 2] | 0; //@line 19045
   $34 = HEAP16[$1 + 12 >> 1] | 0; //@line 19047
   HEAP8[$vararg_buffer1 >> 0] = $35; //@line 19048
   $AsyncCtx5 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19049
   $36 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $vararg_buffer, $vararg_buffer1, $30, $32, $34) | 0; //@line 19050
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 558; //@line 19053
    HEAP32[$AsyncCtx5 + 4 >> 2] = $16; //@line 19055
    HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 19057
    HEAP32[$AsyncCtx5 + 12 >> 2] = $vararg_buffer1; //@line 19059
    HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer; //@line 19061
    HEAP32[$AsyncCtx5 + 20 >> 2] = $1; //@line 19063
    sp = STACKTOP; //@line 19064
    STACKTOP = sp; //@line 19065
    return 0; //@line 19065
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 19067
   if (!$36) {
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) + 11 >> 0] = 0; //@line 19072
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) + 10 >> 0] = 0; //@line 19075
    $48 = HEAP32[$0 + 956 >> 2] | 0; //@line 19077
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) + 16 >> 2] = $48; //@line 19080
    $AsyncCtx8 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19081
    $51 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 19082
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 559; //@line 19085
     HEAP32[$AsyncCtx8 + 4 >> 2] = $vararg_buffer1; //@line 19087
     HEAP32[$AsyncCtx8 + 8 >> 2] = $1; //@line 19089
     HEAP32[$AsyncCtx8 + 12 >> 2] = $16; //@line 19091
     HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 19093
     HEAP32[$AsyncCtx8 + 20 >> 2] = $vararg_buffer; //@line 19095
     sp = STACKTOP; //@line 19096
     STACKTOP = sp; //@line 19097
     return 0; //@line 19097
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 19099
    if (!$51) {
     $58 = HEAP32[$1 >> 2] | 0; //@line 19102
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) >> 2] = $58; //@line 19104
     $60 = $0 + 944 | 0; //@line 19105
     HEAP8[$60 >> 0] = HEAP8[$60 >> 0] | 1; //@line 19108
     $$0 = 0; //@line 19109
     break;
    } else {
     $$0$i15 = $51; //@line 19112
    }
   } else {
    $$0$i15 = $36; //@line 19115
   }
   HEAP8[$0 + 373 >> 0] = 0; //@line 19118
   $$0 = $$0$i15; //@line 19119
  }
 } while (0);
 $$1 = $$0; //@line 19122
 STACKTOP = sp; //@line 19123
 return $$1 | 0; //@line 19123
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre$i$i4 = 0, $$pre10 = 0, $12 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $4 = 0, $41 = 0, $49 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3832
 STACKTOP = STACKTOP + 16 | 0; //@line 3833
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3833
 $2 = sp; //@line 3834
 $3 = $1 + 12 | 0; //@line 3835
 $4 = HEAP32[$3 >> 2] | 0; //@line 3836
 if ($4 | 0) {
  $6 = $0 + 56 | 0; //@line 3839
  if (($6 | 0) != ($1 | 0)) {
   $8 = $0 + 68 | 0; //@line 3842
   $9 = HEAP32[$8 >> 2] | 0; //@line 3843
   do {
    if (!$9) {
     $20 = $4; //@line 3847
     label = 7; //@line 3848
    } else {
     $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 3851
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 3852
     FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 3853
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 158; //@line 3856
      HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 3858
      HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 3860
      HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 3862
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 3864
      HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 3866
      sp = STACKTOP; //@line 3867
      STACKTOP = sp; //@line 3868
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 3870
      $$pre = HEAP32[$3 >> 2] | 0; //@line 3871
      if (!$$pre) {
       $25 = 0; //@line 3874
       break;
      } else {
       $20 = $$pre; //@line 3877
       label = 7; //@line 3878
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 7) {
     $21 = HEAP32[$20 + 4 >> 2] | 0; //@line 3887
     $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 3888
     FUNCTION_TABLE_vii[$21 & 31]($6, $1); //@line 3889
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 159; //@line 3892
      HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 3894
      HEAP32[$AsyncCtx2 + 8 >> 2] = $8; //@line 3896
      HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 3898
      sp = STACKTOP; //@line 3899
      STACKTOP = sp; //@line 3900
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3902
      $25 = HEAP32[$3 >> 2] | 0; //@line 3904
      break;
     }
    }
   } while (0);
   HEAP32[$8 >> 2] = $25; //@line 3909
  }
  _gpio_irq_set($0 + 28 | 0, 2, 1); //@line 3912
  STACKTOP = sp; //@line 3913
  return;
 }
 HEAP32[$2 >> 2] = 0; //@line 3915
 HEAP32[$2 + 4 >> 2] = 0; //@line 3915
 HEAP32[$2 + 8 >> 2] = 0; //@line 3915
 HEAP32[$2 + 12 >> 2] = 0; //@line 3915
 $27 = $0 + 56 | 0; //@line 3916
 do {
  if (($27 | 0) != ($2 | 0)) {
   $29 = $0 + 68 | 0; //@line 3920
   $30 = HEAP32[$29 >> 2] | 0; //@line 3921
   if ($30 | 0) {
    $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 3925
    $AsyncCtx5 = _emscripten_alloc_async_context(24, sp) | 0; //@line 3926
    FUNCTION_TABLE_vi[$33 & 1023]($27); //@line 3927
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 160; //@line 3930
     HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 3932
     HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 3934
     HEAP32[$AsyncCtx5 + 12 >> 2] = $27; //@line 3936
     HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 3938
     HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 3940
     sp = STACKTOP; //@line 3941
     STACKTOP = sp; //@line 3942
     return;
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 3944
    $$phi$trans$insert = $2 + 12 | 0; //@line 3945
    $$pre10 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 3946
    if ($$pre10 | 0) {
     $41 = HEAP32[$$pre10 + 4 >> 2] | 0; //@line 3950
     $AsyncCtx8 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3951
     FUNCTION_TABLE_vii[$41 & 31]($27, $2); //@line 3952
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 161; //@line 3955
      HEAP32[$AsyncCtx8 + 4 >> 2] = $$phi$trans$insert; //@line 3957
      HEAP32[$AsyncCtx8 + 8 >> 2] = $29; //@line 3959
      HEAP32[$AsyncCtx8 + 12 >> 2] = $2; //@line 3961
      HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 3963
      sp = STACKTOP; //@line 3964
      STACKTOP = sp; //@line 3965
      return;
     }
     _emscripten_free_async_context($AsyncCtx8 | 0); //@line 3967
     $$pre$i$i4 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 3968
     HEAP32[$29 >> 2] = $$pre$i$i4; //@line 3969
     if (!$$pre$i$i4) {
      break;
     }
     $49 = HEAP32[$$pre$i$i4 + 8 >> 2] | 0; //@line 3976
     $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3977
     FUNCTION_TABLE_vi[$49 & 1023]($2); //@line 3978
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 162; //@line 3981
      HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 3983
      HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 3985
      sp = STACKTOP; //@line 3986
      STACKTOP = sp; //@line 3987
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3989
      break;
     }
    }
   }
   HEAP32[$29 >> 2] = 0; //@line 3994
  }
 } while (0);
 _gpio_irq_set($0 + 28 | 0, 2, 0); //@line 3998
 STACKTOP = sp; //@line 3999
 return;
}
function __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $28 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1); //@line 26791
 HEAP32[$0 >> 2] = 968; //@line 26792
 $2 = $0 + 328 | 0; //@line 26793
 HEAP32[$2 >> 2] = HEAP32[262]; //@line 26794
 HEAP32[$2 + 4 >> 2] = HEAP32[263]; //@line 26794
 HEAP32[$2 + 8 >> 2] = HEAP32[264]; //@line 26794
 HEAP32[$2 + 12 >> 2] = HEAP32[265]; //@line 26794
 HEAP32[$2 + 16 >> 2] = HEAP32[266]; //@line 26794
 HEAP32[$2 + 20 >> 2] = HEAP32[267]; //@line 26794
 $3 = $0 + 352 | 0; //@line 26795
 HEAP32[$3 >> 2] = HEAP32[268]; //@line 26796
 HEAP32[$3 + 4 >> 2] = HEAP32[269]; //@line 26796
 HEAP32[$3 + 8 >> 2] = HEAP32[270]; //@line 26796
 HEAP32[$3 + 12 >> 2] = HEAP32[271]; //@line 26796
 HEAP32[$3 + 16 >> 2] = HEAP32[272]; //@line 26796
 HEAP32[$3 + 20 >> 2] = HEAP32[273]; //@line 26796
 $4 = $0 + 376 | 0; //@line 26797
 HEAP32[$4 >> 2] = HEAP32[274]; //@line 26798
 HEAP32[$4 + 4 >> 2] = HEAP32[275]; //@line 26798
 HEAP32[$4 + 8 >> 2] = HEAP32[276]; //@line 26798
 HEAP32[$4 + 12 >> 2] = HEAP32[277]; //@line 26798
 HEAP32[$4 + 16 >> 2] = HEAP32[278]; //@line 26798
 HEAP32[$4 + 20 >> 2] = HEAP32[279]; //@line 26798
 $5 = $0 + 400 | 0; //@line 26799
 HEAP32[$5 >> 2] = HEAP32[280]; //@line 26800
 HEAP32[$5 + 4 >> 2] = HEAP32[281]; //@line 26800
 HEAP32[$5 + 8 >> 2] = HEAP32[282]; //@line 26800
 HEAP32[$5 + 12 >> 2] = HEAP32[283]; //@line 26800
 HEAP32[$5 + 16 >> 2] = HEAP32[284]; //@line 26800
 HEAP32[$5 + 20 >> 2] = HEAP32[285]; //@line 26800
 $6 = $0 + 424 | 0; //@line 26801
 HEAP32[$6 >> 2] = HEAP32[286]; //@line 26802
 HEAP32[$6 + 4 >> 2] = HEAP32[287]; //@line 26802
 HEAP32[$6 + 8 >> 2] = HEAP32[288]; //@line 26802
 HEAP32[$6 + 12 >> 2] = HEAP32[289]; //@line 26802
 HEAP32[$6 + 16 >> 2] = HEAP32[290]; //@line 26802
 HEAP32[$6 + 20 >> 2] = HEAP32[291]; //@line 26802
 $7 = $0 + 448 | 0; //@line 26803
 HEAP32[$7 >> 2] = HEAP32[292]; //@line 26804
 HEAP32[$7 + 4 >> 2] = HEAP32[293]; //@line 26804
 HEAP32[$7 + 8 >> 2] = HEAP32[294]; //@line 26804
 HEAP32[$7 + 12 >> 2] = HEAP32[295]; //@line 26804
 HEAP32[$7 + 16 >> 2] = HEAP32[296]; //@line 26804
 HEAP32[$7 + 20 >> 2] = HEAP32[297]; //@line 26804
 $8 = $0 + 136 | 0; //@line 26805
 HEAP32[$8 >> 2] = HEAP32[298]; //@line 26806
 HEAP32[$8 + 4 >> 2] = HEAP32[299]; //@line 26806
 HEAP32[$8 + 8 >> 2] = HEAP32[300]; //@line 26806
 $9 = $0 + 148 | 0; //@line 26807
 HEAP32[$9 >> 2] = HEAP32[301]; //@line 26808
 HEAP32[$9 + 4 >> 2] = HEAP32[302]; //@line 26808
 HEAP32[$9 + 8 >> 2] = HEAP32[303]; //@line 26808
 $10 = $0 + 160 | 0; //@line 26809
 HEAP32[$10 >> 2] = HEAP32[304]; //@line 26810
 HEAP32[$10 + 4 >> 2] = HEAP32[305]; //@line 26810
 HEAP32[$10 + 8 >> 2] = HEAP32[306]; //@line 26810
 $11 = $0 + 474 | 0; //@line 26811
 HEAP16[$11 >> 1] = 7; //@line 26812
 $12 = $0 + 472 | 0; //@line 26813
 __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $12, $11, 1); //@line 26814
 HEAP32[$0 + 112 >> 2] = $8; //@line 26816
 HEAP8[$0 + 116 >> 0] = 16; //@line 26818
 HEAP32[$0 + 120 >> 2] = $12; //@line 26820
 HEAP32[$0 + 124 >> 2] = $11; //@line 26822
 HEAP8[$0 + 128 >> 0] = 1; //@line 26824
 HEAP32[$0 + 72 >> 2] = $2; //@line 26826
 HEAP8[$0 + 76 >> 0] = 6; //@line 26828
 HEAP32[$0 + 80 >> 2] = 1228; //@line 26830
 HEAP8[$0 + 84 >> 0] = 8; //@line 26832
 HEAP32[$0 + 88 >> 2] = 13710; //@line 26834
 HEAP8[$0 + 92 >> 0] = 8; //@line 26836
 HEAP32[$0 + 96 >> 2] = 13718; //@line 26838
 HEAP8[$0 + 100 >> 0] = 8; //@line 26840
 HEAP32[$0 + 104 >> 2] = 13726; //@line 26842
 HEAP8[$0 + 108 >> 0] = 8; //@line 26844
 $28 = $0 + 132 | 0; //@line 26845
 HEAP8[$28 >> 0] = HEAP8[$28 >> 0] & -4; //@line 26848
 $31 = $0 + 12 | 0; //@line 26849
 $32 = $0 + 18 | 0; //@line 26850
 HEAP32[$31 >> 2] = 16843009; //@line 26851
 HEAP16[$31 + 4 >> 1] = 257; //@line 26851
 HEAP8[$32 >> 0] = 3; //@line 26852
 HEAP8[$0 + 20 >> 0] = 16; //@line 26854
 HEAP8[$0 + 19 >> 0] = 5; //@line 26856
 HEAP8[$0 + 26 >> 0] = 0; //@line 26858
 HEAP8[$0 + 27 >> 0] = 7; //@line 26860
 HEAP8[$0 + 28 >> 0] = 0; //@line 26862
 HEAP8[$0 + 29 >> 0] = 7; //@line 26864
 HEAP8[$0 + 30 >> 0] = 0; //@line 26866
 HEAP8[$0 + 31 >> 0] = 5; //@line 26868
 HEAP8[$0 + 32 >> 0] = 0; //@line 26870
 HEAP8[$0 + 33 >> 0] = 5; //@line 26872
 HEAP8[$0 + 34 >> 0] = 0; //@line 26874
 HEAP8[$0 + 21 >> 0] = 7; //@line 26876
 HEAP8[$0 + 22 >> 0] = 0; //@line 26878
 HEAP8[$0 + 23 >> 0] = 0; //@line 26880
 HEAPF32[$0 + 56 >> 2] = 16.0; //@line 26882
 HEAPF32[$0 + 60 >> 2] = 2.1500000953674316; //@line 26884
 HEAP8[$0 + 24 >> 0] = 64; //@line 26886
 HEAP8[$0 + 25 >> 0] = 32; //@line 26888
 HEAP16[$0 + 36 >> 1] = 3e3; //@line 26890
 HEAP16[$0 + 38 >> 1] = 1e3; //@line 26892
 HEAP16[$0 + 40 >> 1] = 2e3; //@line 26894
 HEAP16[$0 + 46 >> 1] = 7; //@line 26896
 HEAP16[$0 + 42 >> 1] = 5e3; //@line 26898
 HEAP16[$0 + 44 >> 1] = 6e3; //@line 26900
 HEAP16[$0 + 48 >> 1] = 16384; //@line 26902
 HEAP16[$0 + 50 >> 1] = 2e3; //@line 26904
 HEAP16[$0 + 52 >> 1] = 1e3; //@line 26906
 HEAP8[$0 + 64 >> 0] = 0; //@line 26908
 HEAP32[$0 + 68 >> 2] = 869525e3; //@line 26910
 return;
}
function _ticker_read_us($0) {
 $0 = $0 | 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $36 = 0, $37 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $88 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5366
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5367
 _initialize($0); //@line 5368
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 712; //@line 5371
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5373
  sp = STACKTOP; //@line 5374
  tempRet0 = 0; //@line 5375
  return 0; //@line 5376
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5378
 $2 = $0 + 4 | 0; //@line 5379
 $3 = HEAP32[$2 >> 2] | 0; //@line 5380
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5383
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5384
 $7 = FUNCTION_TABLE_i[$6 & 7]() | 0; //@line 5385
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 713; //@line 5388
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 5390
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 5392
  sp = STACKTOP; //@line 5393
  tempRet0 = 0; //@line 5394
  return 0; //@line 5395
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5397
 if (($7 | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $103 = HEAP32[$2 >> 2] | 0; //@line 5403
  $104 = $103 + 48 | 0; //@line 5404
  $105 = $104; //@line 5405
  $106 = $105; //@line 5406
  $107 = HEAP32[$106 >> 2] | 0; //@line 5407
  $108 = $105 + 4 | 0; //@line 5408
  $109 = $108; //@line 5409
  $110 = HEAP32[$109 >> 2] | 0; //@line 5410
  tempRet0 = $110; //@line 5411
  return $107 | 0; //@line 5412
 }
 $14 = $3 + 32 | 0; //@line 5414
 $19 = $7 - (HEAP32[$14 >> 2] | 0) & HEAP32[$3 + 12 >> 2]; //@line 5419
 HEAP32[$14 >> 2] = $7; //@line 5420
 $21 = HEAP32[$3 + 8 >> 2] | 0; //@line 5422
 L10 : do {
  if (($21 | 0) < 1e6) {
   switch ($21 | 0) {
   case 32768:
    {
     break;
    }
   default:
    {
     label = 9; //@line 5431
     break L10;
    }
   }
   $22 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5435
   $24 = _bitshift64Lshr($22 | 0, tempRet0 | 0, 15) | 0; //@line 5437
   $25 = tempRet0; //@line 5438
   $28 = $3 + 40 | 0; //@line 5441
   $29 = $28; //@line 5442
   $35 = _i64Add(HEAP32[$29 >> 2] | 0, HEAP32[$29 + 4 >> 2] | 0, $19 * 1e6 & 32704 | 0, 0) | 0; //@line 5448
   $36 = tempRet0; //@line 5449
   $37 = $28; //@line 5450
   HEAP32[$37 >> 2] = $35; //@line 5452
   HEAP32[$37 + 4 >> 2] = $36; //@line 5455
   if ($36 >>> 0 < 0 | ($36 | 0) == 0 & $35 >>> 0 < 32768) {
    $95 = $24; //@line 5462
    $96 = $25; //@line 5462
   } else {
    $46 = _i64Add($24 | 0, $25 | 0, 1, 0) | 0; //@line 5464
    $47 = tempRet0; //@line 5465
    $48 = _i64Add($35 | 0, $36 | 0, -32768, -1) | 0; //@line 5466
    $50 = $28; //@line 5468
    HEAP32[$50 >> 2] = $48; //@line 5470
    HEAP32[$50 + 4 >> 2] = tempRet0; //@line 5473
    $95 = $46; //@line 5474
    $96 = $47; //@line 5474
   }
  } else {
   switch ($21 | 0) {
   case 1e6:
    {
     $95 = $19; //@line 5479
     $96 = 0; //@line 5479
     break;
    }
   default:
    {
     label = 9; //@line 5483
    }
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  $54 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5489
  $55 = tempRet0; //@line 5490
  $56 = ___udivdi3($54 | 0, $55 | 0, $21 | 0, 0) | 0; //@line 5491
  $57 = tempRet0; //@line 5492
  $58 = ___muldi3($56 | 0, $57 | 0, $21 | 0, 0) | 0; //@line 5493
  $60 = _i64Subtract($54 | 0, $55 | 0, $58 | 0, tempRet0 | 0) | 0; //@line 5495
  $62 = $3 + 40 | 0; //@line 5497
  $63 = $62; //@line 5498
  $69 = _i64Add($60 | 0, tempRet0 | 0, HEAP32[$63 >> 2] | 0, HEAP32[$63 + 4 >> 2] | 0) | 0; //@line 5504
  $70 = tempRet0; //@line 5505
  $71 = $62; //@line 5506
  HEAP32[$71 >> 2] = $69; //@line 5508
  HEAP32[$71 + 4 >> 2] = $70; //@line 5511
  if ($70 >>> 0 < 0 | ($70 | 0) == 0 & $69 >>> 0 < $21 >>> 0) {
   $95 = $56; //@line 5518
   $96 = $57; //@line 5518
  } else {
   $80 = _i64Add($56 | 0, $57 | 0, 1, 0) | 0; //@line 5520
   $81 = tempRet0; //@line 5521
   $82 = _i64Subtract($69 | 0, $70 | 0, $21 | 0, 0) | 0; //@line 5522
   $84 = $62; //@line 5524
   HEAP32[$84 >> 2] = $82; //@line 5526
   HEAP32[$84 + 4 >> 2] = tempRet0; //@line 5529
   $95 = $80; //@line 5530
   $96 = $81; //@line 5530
  }
 }
 $88 = $3 + 48 | 0; //@line 5533
 $89 = $88; //@line 5534
 $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 5540
 $99 = $88; //@line 5542
 HEAP32[$99 >> 2] = $97; //@line 5544
 HEAP32[$99 + 4 >> 2] = tempRet0; //@line 5547
 $103 = HEAP32[$2 >> 2] | 0; //@line 5548
 $104 = $103 + 48 | 0; //@line 5549
 $105 = $104; //@line 5550
 $106 = $105; //@line 5551
 $107 = HEAP32[$106 >> 2] | 0; //@line 5552
 $108 = $105 + 4 | 0; //@line 5553
 $109 = $108; //@line 5554
 $110 = HEAP32[$109 >> 2] | 0; //@line 5555
 tempRet0 = $110; //@line 5556
 return $107 | 0; //@line 5557
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $32 = 0, $33 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19161
 STACKTOP = STACKTOP + 32 | 0; //@line 19162
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 19162
 $$byval_copy = sp + 24 | 0; //@line 19163
 $vararg_buffer3 = sp + 16 | 0; //@line 19164
 $vararg_buffer1 = sp + 8 | 0; //@line 19165
 _printf(12967, sp) | 0; //@line 19167
 _printf(13548, $vararg_buffer1) | 0; //@line 19168
 $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 19169
 _putchar(10) | 0; //@line 19170
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 561; //@line 19173
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 19175
  HEAP32[$AsyncCtx9 + 8 >> 2] = $1; //@line 19177
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer1; //@line 19179
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer3; //@line 19181
  HEAP32[$AsyncCtx9 + 20 >> 2] = $vararg_buffer3; //@line 19183
  HEAP32[$AsyncCtx9 + 24 >> 2] = $$byval_copy; //@line 19185
  HEAP32[$AsyncCtx9 + 28 >> 2] = $$byval_copy; //@line 19187
  sp = STACKTOP; //@line 19188
  STACKTOP = sp; //@line 19189
  return 0; //@line 19189
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 19191
 $10 = $0 + 360 | 0; //@line 19193
 $AsyncCtx12 = _emscripten_alloc_async_context(36, sp) | 0; //@line 19194
 $11 = __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0 + 348 | 0, $1, $10) | 0; //@line 19195
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 562; //@line 19198
  HEAP32[$AsyncCtx12 + 4 >> 2] = $10; //@line 19200
  HEAP32[$AsyncCtx12 + 8 >> 2] = $1; //@line 19202
  HEAP32[$AsyncCtx12 + 12 >> 2] = $vararg_buffer1; //@line 19204
  HEAP32[$AsyncCtx12 + 16 >> 2] = $vararg_buffer3; //@line 19206
  HEAP32[$AsyncCtx12 + 20 >> 2] = $vararg_buffer3; //@line 19208
  HEAP32[$AsyncCtx12 + 24 >> 2] = $$byval_copy; //@line 19210
  HEAP32[$AsyncCtx12 + 28 >> 2] = $$byval_copy; //@line 19212
  HEAP32[$AsyncCtx12 + 32 >> 2] = $0; //@line 19214
  sp = STACKTOP; //@line 19215
  STACKTOP = sp; //@line 19216
  return 0; //@line 19216
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 19218
 if ($11 | 0) {
  STACKTOP = sp; //@line 19221
  return $11 | 0; //@line 19221
 }
 if ((HEAP32[$10 >> 2] | 0) != 2) {
  STACKTOP = sp; //@line 19226
  return $11 | 0; //@line 19226
 }
 switch (HEAP32[$1 >> 2] | 0) {
 case 0:
  {
   break;
  }
 case 10:
  {
   label = 8; //@line 19234
   break;
  }
 default:
  {
   STACKTOP = sp; //@line 19238
   return $11 | 0; //@line 19238
  }
 }
 if ((label | 0) == 8) {
  if (!(HEAP8[$0 + 372 >> 0] | 0)) {
   STACKTOP = sp; //@line 19246
   return $11 | 0; //@line 19246
  }
 }
 _printf(12967, $vararg_buffer3) | 0; //@line 19249
 _printf(12994, $$byval_copy) | 0; //@line 19250
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 19251
 _putchar(10) | 0; //@line 19252
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 563; //@line 19255
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 19257
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 19259
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 19261
  HEAP32[$AsyncCtx + 16 >> 2] = $11; //@line 19263
  sp = STACKTOP; //@line 19264
  STACKTOP = sp; //@line 19265
  return 0; //@line 19265
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 19267
 $32 = HEAP32[$0 + 1328 >> 2] | 0; //@line 19269
 HEAP32[$vararg_buffer1 >> 2] = 361; //@line 19270
 HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 19272
 $AsyncCtx15 = _emscripten_alloc_async_context(16, sp) | 0; //@line 19273
 HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 19274
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 19274
 $33 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($32, $0, $$byval_copy) | 0; //@line 19275
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 564; //@line 19278
  HEAP32[$AsyncCtx15 + 4 >> 2] = $vararg_buffer1; //@line 19280
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 19282
  HEAP32[$AsyncCtx15 + 12 >> 2] = $11; //@line 19284
  sp = STACKTOP; //@line 19285
  STACKTOP = sp; //@line 19286
  return 0; //@line 19286
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 19288
 do {
  if (!$33) {
   $AsyncCtx19 = _emscripten_alloc_async_context(16, sp) | 0; //@line 19292
   _mbed_assert_internal(12851, 12860, 217); //@line 19293
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 565; //@line 19296
    HEAP32[$AsyncCtx19 + 4 >> 2] = $vararg_buffer1; //@line 19298
    HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 19300
    HEAP32[$AsyncCtx19 + 12 >> 2] = $11; //@line 19302
    sp = STACKTOP; //@line 19303
    STACKTOP = sp; //@line 19304
    return 0; //@line 19304
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 19306
    break;
   }
  }
 } while (0);
 HEAP32[$0 + 364 >> 2] = 2; //@line 19312
 STACKTOP = sp; //@line 19313
 return $11 | 0; //@line 19313
}
function __ZL18lora_event_handler11lora_events($0) {
 $0 = $0 | 0;
 var $$07$i = 0, $1 = 0, $10 = 0, $15 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 6822
 STACKTOP = STACKTOP + 96 | 0; //@line 6823
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 6823
 $vararg_buffer11 = sp + 32 | 0; //@line 6824
 $vararg_buffer8 = sp + 24 | 0; //@line 6825
 $vararg_buffer4 = sp + 16 | 0; //@line 6826
 $vararg_buffer1 = sp + 8 | 0; //@line 6827
 $vararg_buffer = sp; //@line 6828
 $1 = sp + 36 | 0; //@line 6829
 switch ($0 | 0) {
 case 0:
  {
   $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6832
   _puts(15525) | 0; //@line 6833
   if (___async) {
    HEAP32[$AsyncCtx31 >> 2] = 760; //@line 6836
    sp = STACKTOP; //@line 6837
    STACKTOP = sp; //@line 6838
    return;
   }
   _emscripten_free_async_context($AsyncCtx31 | 0); //@line 6840
   STACKTOP = sp; //@line 6841
   return;
  }
 case 1:
  {
   __ZN6events10EventQueue14break_dispatchEv(23e3); //@line 6845
   $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6846
   _puts(15549) | 0; //@line 6847
   if (___async) {
    HEAP32[$AsyncCtx27 >> 2] = 761; //@line 6850
    sp = STACKTOP; //@line 6851
    STACKTOP = sp; //@line 6852
    return;
   }
   _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6854
   STACKTOP = sp; //@line 6855
   return;
  }
 case 2:
  {
   $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6859
   _puts(15575) | 0; //@line 6860
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 762; //@line 6863
    sp = STACKTOP; //@line 6864
    STACKTOP = sp; //@line 6865
    return;
   }
   _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6867
   STACKTOP = sp; //@line 6868
   return;
  }
 case 6:
 case 5:
 case 4:
 case 3:
  {
   HEAP32[$vararg_buffer >> 2] = $0; //@line 6872
   _printf(15606, $vararg_buffer) | 0; //@line 6873
   STACKTOP = sp; //@line 6874
   return;
  }
 case 7:
  {
   $AsyncCtx19 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6878
   _puts(15643) | 0; //@line 6879
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 763; //@line 6882
    HEAP32[$AsyncCtx19 + 4 >> 2] = $1; //@line 6884
    HEAP32[$AsyncCtx19 + 8 >> 2] = $vararg_buffer1; //@line 6886
    HEAP32[$AsyncCtx19 + 12 >> 2] = $vararg_buffer1; //@line 6888
    HEAP32[$AsyncCtx19 + 16 >> 2] = $vararg_buffer4; //@line 6890
    HEAP32[$AsyncCtx19 + 20 >> 2] = $vararg_buffer4; //@line 6892
    HEAP32[$AsyncCtx19 + 24 >> 2] = $vararg_buffer8; //@line 6894
    HEAP32[$AsyncCtx19 + 28 >> 2] = $vararg_buffer8; //@line 6896
    sp = STACKTOP; //@line 6897
    STACKTOP = sp; //@line 6898
    return;
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 6900
   dest = $1; //@line 6901
   stop = dest + 50 | 0; //@line 6901
   do {
    HEAP8[dest >> 0] = 0; //@line 6901
    dest = dest + 1 | 0; //@line 6901
   } while ((dest | 0) < (stop | 0));
   $9 = __ZN16LoRaWANInterface7receiveEhPhti(23200, 15, $1, 50, 3) | 0; //@line 6902
   $10 = $9 << 16 >> 16; //@line 6903
   do {
    if ($9 << 16 >> 16 < 0) {
     HEAP32[$vararg_buffer1 >> 2] = $10; //@line 6907
     _printf(15680, $vararg_buffer1) | 0; //@line 6908
    } else {
     HEAP32[$vararg_buffer4 >> 2] = 15; //@line 6910
     HEAP32[$vararg_buffer4 + 4 >> 2] = $10; //@line 6912
     _printf(15707, $vararg_buffer4) | 0; //@line 6913
     if ($9 << 16 >> 16) {
      $$07$i = 0; //@line 6916
      $15 = 0; //@line 6916
      do {
       HEAP32[$vararg_buffer8 >> 2] = HEAPU8[$1 + $15 >> 0]; //@line 6921
       _printf(15745, $vararg_buffer8) | 0; //@line 6922
       $$07$i = $$07$i + 1 << 24 >> 24; //@line 6923
       $15 = $$07$i & 255; //@line 6924
      } while (($15 | 0) < ($10 | 0));
     }
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6933
     _putchar(10) | 0; //@line 6934
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 764; //@line 6937
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6939
      sp = STACKTOP; //@line 6940
      STACKTOP = sp; //@line 6941
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 6943
      break;
     }
    }
   } while (0);
   STACKTOP = sp; //@line 6948
   return;
  }
 case 9:
 case 8:
  {
   HEAP32[$vararg_buffer11 >> 2] = $0; //@line 6952
   _printf(15751, $vararg_buffer11) | 0; //@line 6953
   STACKTOP = sp; //@line 6954
   return;
  }
 case 10:
  {
   $AsyncCtx15 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6958
   _puts(15783) | 0; //@line 6959
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 765; //@line 6962
    sp = STACKTOP; //@line 6963
    STACKTOP = sp; //@line 6964
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6966
   STACKTOP = sp; //@line 6967
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 6971
   return;
  }
 }
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_296($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $31 = 0, $32 = 0, $4 = 0, $47 = 0, $48 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 13915
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13917
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13919
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13921
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13923
 if (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0) {
  $13 = $4 + 1892 | 0; //@line 13929
  $14 = HEAP32[$13 >> 2] | 0; //@line 13930
  if (!$14) {
   return;
  }
  $18 = HEAP32[$4 + 2288 >> 2] | 0; //@line 13937
  $20 = HEAP32[$14 + 4 >> 2] | 0; //@line 13939
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 13940
  FUNCTION_TABLE_vii[$20 & 31]($6, $4 + 1880 | 0); //@line 13941
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 213; //@line 13944
   $21 = $ReallocAsyncCtx + 4 | 0; //@line 13945
   HEAP32[$21 >> 2] = $13; //@line 13946
   $22 = $ReallocAsyncCtx + 8 | 0; //@line 13947
   HEAP32[$22 >> 2] = $6; //@line 13948
   $23 = $ReallocAsyncCtx + 12 | 0; //@line 13949
   HEAP32[$23 >> 2] = $18; //@line 13950
   $24 = $ReallocAsyncCtx + 16 | 0; //@line 13951
   HEAP32[$24 >> 2] = $6; //@line 13952
   sp = STACKTOP; //@line 13953
   return;
  }
  ___async_unwind = 0; //@line 13956
  HEAP32[$ReallocAsyncCtx >> 2] = 213; //@line 13957
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 13958
  HEAP32[$21 >> 2] = $13; //@line 13959
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 13960
  HEAP32[$22 >> 2] = $6; //@line 13961
  $23 = $ReallocAsyncCtx + 12 | 0; //@line 13962
  HEAP32[$23 >> 2] = $18; //@line 13963
  $24 = $ReallocAsyncCtx + 16 | 0; //@line 13964
  HEAP32[$24 >> 2] = $6; //@line 13965
  sp = STACKTOP; //@line 13966
  return;
 }
 $25 = $4 + 1960 | 0; //@line 13969
 HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 1; //@line 13972
 if (!(HEAP8[$2 + 18 >> 0] | 0)) {
  return;
 }
 $31 = $2 + 9 | 0; //@line 13979
 $32 = HEAP8[$31 >> 0] | 0; //@line 13980
 if ($32 << 24 >> 24 == -32) {
  return;
 }
 if (($32 + -1 & 255) >= 223) {
  if ((HEAP32[$2 >> 2] | 0) != 3) {
   return;
  }
 }
 HEAP32[$4 + 2240 >> 2] = 2; //@line 13995
 HEAP16[$4 + 2260 >> 1] = HEAP16[$2 + 16 >> 1] | 0; //@line 13999
 HEAP8[$4 + 2253 >> 0] = HEAP8[$31 >> 0] | 0; //@line 14002
 HEAP32[$4 + 2256 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 14006
 HEAP8[$4 + 2236 >> 0] = 1; //@line 14008
 $47 = $4 + 1892 | 0; //@line 14009
 $48 = HEAP32[$47 >> 2] | 0; //@line 14010
 if ($48 | 0) {
  $52 = HEAP32[$4 + 2288 >> 2] | 0; //@line 14015
  $54 = HEAP32[$48 + 4 >> 2] | 0; //@line 14017
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 14018
  FUNCTION_TABLE_vii[$54 & 31]($8, $4 + 1880 | 0); //@line 14019
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 217; //@line 14022
   $55 = $ReallocAsyncCtx3 + 4 | 0; //@line 14023
   HEAP32[$55 >> 2] = $47; //@line 14024
   $56 = $ReallocAsyncCtx3 + 8 | 0; //@line 14025
   HEAP32[$56 >> 2] = $8; //@line 14026
   $57 = $ReallocAsyncCtx3 + 12 | 0; //@line 14027
   HEAP32[$57 >> 2] = $52; //@line 14028
   $58 = $ReallocAsyncCtx3 + 16 | 0; //@line 14029
   HEAP32[$58 >> 2] = $8; //@line 14030
   $59 = $ReallocAsyncCtx3 + 20 | 0; //@line 14031
   HEAP32[$59 >> 2] = $2; //@line 14032
   $60 = $ReallocAsyncCtx3 + 24 | 0; //@line 14033
   HEAP32[$60 >> 2] = $31; //@line 14034
   $61 = $ReallocAsyncCtx3 + 28 | 0; //@line 14035
   HEAP32[$61 >> 2] = $4; //@line 14036
   sp = STACKTOP; //@line 14037
   return;
  }
  ___async_unwind = 0; //@line 14040
  HEAP32[$ReallocAsyncCtx3 >> 2] = 217; //@line 14041
  $55 = $ReallocAsyncCtx3 + 4 | 0; //@line 14042
  HEAP32[$55 >> 2] = $47; //@line 14043
  $56 = $ReallocAsyncCtx3 + 8 | 0; //@line 14044
  HEAP32[$56 >> 2] = $8; //@line 14045
  $57 = $ReallocAsyncCtx3 + 12 | 0; //@line 14046
  HEAP32[$57 >> 2] = $52; //@line 14047
  $58 = $ReallocAsyncCtx3 + 16 | 0; //@line 14048
  HEAP32[$58 >> 2] = $8; //@line 14049
  $59 = $ReallocAsyncCtx3 + 20 | 0; //@line 14050
  HEAP32[$59 >> 2] = $2; //@line 14051
  $60 = $ReallocAsyncCtx3 + 24 | 0; //@line 14052
  HEAP32[$60 >> 2] = $31; //@line 14053
  $61 = $ReallocAsyncCtx3 + 28 | 0; //@line 14054
  HEAP32[$61 >> 2] = $4; //@line 14055
  sp = STACKTOP; //@line 14056
  return;
 }
 if (!(HEAP8[$2 + 11 >> 0] | 0)) {
  return;
 }
 $65 = HEAP8[$31 >> 0] | 0; //@line 14065
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 14066
 __ZN12LoRaWANStack9handle_txEhPKhth($4, $65, 0, 0, 2) | 0; //@line 14067
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 221; //@line 14070
  sp = STACKTOP; //@line 14071
  return;
 }
 ___async_unwind = 0; //@line 14074
 HEAP32[$ReallocAsyncCtx7 >> 2] = 221; //@line 14075
 sp = STACKTOP; //@line 14076
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_24($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $26 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $50 = 0, $53 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, sp = 0;
 sp = STACKTOP; //@line 17997
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18001
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18003
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 18006
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 18008
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 18010
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 18012
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 18014
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 18016
 HEAP32[(__ZN11LoRaMacMlme14get_indicationEv(HEAP32[$0 + 4 >> 2] | 0) | 0) >> 2] = 4; //@line 18018
 $20 = $4 + 944 | 0; //@line 18019
 HEAP8[$20 >> 0] = HEAP8[$20 >> 0] | 16; //@line 18022
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($6); //@line 18023
 if ($8) {
  $$3$off0204 = 6; //@line 18025
 } else {
  $26 = (__ZN11LoRaMacMcps16get_confirmationEv($12) | 0) + 10 | 0; //@line 18030
  if ($10 & 32) {
   HEAP8[$26 >> 0] = 1; //@line 18032
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 28 >> 0] = 1; //@line 18035
   $29 = HEAP32[$14 >> 2] | 0; //@line 18036
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 18038
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($29, $4 + 1076 | 0); //@line 18039
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 18042
    $31 = $ReallocAsyncCtx23 + 4 | 0; //@line 18043
    HEAP32[$31 >> 2] = $4; //@line 18044
    $32 = $ReallocAsyncCtx23 + 8 | 0; //@line 18045
    HEAP32[$32 >> 2] = $14; //@line 18046
    $33 = $ReallocAsyncCtx23 + 12 | 0; //@line 18047
    HEAP32[$33 >> 2] = $16; //@line 18048
    $34 = $ReallocAsyncCtx23 + 16 | 0; //@line 18049
    HEAP32[$34 >> 2] = $18; //@line 18050
    sp = STACKTOP; //@line 18051
    return;
   }
   ___async_unwind = 0; //@line 18054
   HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 18055
   $31 = $ReallocAsyncCtx23 + 4 | 0; //@line 18056
   HEAP32[$31 >> 2] = $4; //@line 18057
   $32 = $ReallocAsyncCtx23 + 8 | 0; //@line 18058
   HEAP32[$32 >> 2] = $14; //@line 18059
   $33 = $ReallocAsyncCtx23 + 12 | 0; //@line 18060
   HEAP32[$33 >> 2] = $16; //@line 18061
   $34 = $ReallocAsyncCtx23 + 16 | 0; //@line 18062
   HEAP32[$34 >> 2] = $18; //@line 18063
   sp = STACKTOP; //@line 18064
   return;
  }
  HEAP8[$26 >> 0] = 0; //@line 18067
  if ((HEAPU8[$4 + 895 >> 0] | 0) > (HEAPU8[$4 + 894 >> 0] | 0)) {
   $40 = HEAP32[$14 >> 2] | 0; //@line 18074
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 18076
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($40, $4 + 1076 | 0); //@line 18077
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 18080
    $42 = $ReallocAsyncCtx22 + 4 | 0; //@line 18081
    HEAP32[$42 >> 2] = $4; //@line 18082
    $43 = $ReallocAsyncCtx22 + 8 | 0; //@line 18083
    HEAP32[$43 >> 2] = $14; //@line 18084
    $44 = $ReallocAsyncCtx22 + 12 | 0; //@line 18085
    HEAP32[$44 >> 2] = $16; //@line 18086
    $45 = $ReallocAsyncCtx22 + 16 | 0; //@line 18087
    HEAP32[$45 >> 2] = $18; //@line 18088
    sp = STACKTOP; //@line 18089
    return;
   }
   ___async_unwind = 0; //@line 18092
   HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 18093
   $42 = $ReallocAsyncCtx22 + 4 | 0; //@line 18094
   HEAP32[$42 >> 2] = $4; //@line 18095
   $43 = $ReallocAsyncCtx22 + 8 | 0; //@line 18096
   HEAP32[$43 >> 2] = $14; //@line 18097
   $44 = $ReallocAsyncCtx22 + 12 | 0; //@line 18098
   HEAP32[$44 >> 2] = $16; //@line 18099
   $45 = $ReallocAsyncCtx22 + 16 | 0; //@line 18100
   HEAP32[$45 >> 2] = $18; //@line 18101
   sp = STACKTOP; //@line 18102
   return;
  } else {
   $$3$off0204 = 2; //@line 18105
  }
 }
 $46 = $4 + 944 | 0; //@line 18108
 HEAP8[$46 >> 0] = $$3$off0204 | HEAP8[$46 >> 0] & -7; //@line 18112
 $50 = $4 + 944 | 0; //@line 18113
 HEAP8[$50 >> 0] = HEAP8[$50 >> 0] | 32; //@line 18116
 $53 = HEAP32[$14 >> 2] | 0; //@line 18117
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 18119
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($53, $4 + 996 | 0, 1); //@line 18120
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 18123
  $55 = $ReallocAsyncCtx17 + 4 | 0; //@line 18124
  HEAP32[$55 >> 2] = $16; //@line 18125
  $56 = $ReallocAsyncCtx17 + 8 | 0; //@line 18126
  HEAP32[$56 >> 2] = $18; //@line 18127
  sp = STACKTOP; //@line 18128
  return;
 }
 ___async_unwind = 0; //@line 18131
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 18132
 $55 = $ReallocAsyncCtx17 + 4 | 0; //@line 18133
 HEAP32[$55 >> 2] = $16; //@line 18134
 $56 = $ReallocAsyncCtx17 + 8 | 0; //@line 18135
 HEAP32[$56 >> 2] = $18; //@line 18136
 sp = STACKTOP; //@line 18137
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_22($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $26 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $50 = 0, $53 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, sp = 0;
 sp = STACKTOP; //@line 17666
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17670
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17672
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 17675
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 17677
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 17679
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 17681
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 17683
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 17685
 HEAP32[(__ZN11LoRaMacMlme14get_indicationEv(HEAP32[$0 + 4 >> 2] | 0) | 0) >> 2] = 4; //@line 17687
 $20 = $4 + 944 | 0; //@line 17688
 HEAP8[$20 >> 0] = HEAP8[$20 >> 0] | 16; //@line 17691
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($6); //@line 17692
 if ($8) {
  $$3$off0204 = 6; //@line 17694
 } else {
  $26 = (__ZN11LoRaMacMcps16get_confirmationEv($12) | 0) + 10 | 0; //@line 17699
  if ($10 & 32) {
   HEAP8[$26 >> 0] = 1; //@line 17701
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 28 >> 0] = 1; //@line 17704
   $29 = HEAP32[$14 >> 2] | 0; //@line 17705
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 17707
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($29, $4 + 1076 | 0); //@line 17708
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 17711
    $31 = $ReallocAsyncCtx23 + 4 | 0; //@line 17712
    HEAP32[$31 >> 2] = $4; //@line 17713
    $32 = $ReallocAsyncCtx23 + 8 | 0; //@line 17714
    HEAP32[$32 >> 2] = $14; //@line 17715
    $33 = $ReallocAsyncCtx23 + 12 | 0; //@line 17716
    HEAP32[$33 >> 2] = $16; //@line 17717
    $34 = $ReallocAsyncCtx23 + 16 | 0; //@line 17718
    HEAP32[$34 >> 2] = $18; //@line 17719
    sp = STACKTOP; //@line 17720
    return;
   }
   ___async_unwind = 0; //@line 17723
   HEAP32[$ReallocAsyncCtx23 >> 2] = 405; //@line 17724
   $31 = $ReallocAsyncCtx23 + 4 | 0; //@line 17725
   HEAP32[$31 >> 2] = $4; //@line 17726
   $32 = $ReallocAsyncCtx23 + 8 | 0; //@line 17727
   HEAP32[$32 >> 2] = $14; //@line 17728
   $33 = $ReallocAsyncCtx23 + 12 | 0; //@line 17729
   HEAP32[$33 >> 2] = $16; //@line 17730
   $34 = $ReallocAsyncCtx23 + 16 | 0; //@line 17731
   HEAP32[$34 >> 2] = $18; //@line 17732
   sp = STACKTOP; //@line 17733
   return;
  }
  HEAP8[$26 >> 0] = 0; //@line 17736
  if ((HEAPU8[$4 + 895 >> 0] | 0) > (HEAPU8[$4 + 894 >> 0] | 0)) {
   $40 = HEAP32[$14 >> 2] | 0; //@line 17743
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 17745
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($40, $4 + 1076 | 0); //@line 17746
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 17749
    $42 = $ReallocAsyncCtx22 + 4 | 0; //@line 17750
    HEAP32[$42 >> 2] = $4; //@line 17751
    $43 = $ReallocAsyncCtx22 + 8 | 0; //@line 17752
    HEAP32[$43 >> 2] = $14; //@line 17753
    $44 = $ReallocAsyncCtx22 + 12 | 0; //@line 17754
    HEAP32[$44 >> 2] = $16; //@line 17755
    $45 = $ReallocAsyncCtx22 + 16 | 0; //@line 17756
    HEAP32[$45 >> 2] = $18; //@line 17757
    sp = STACKTOP; //@line 17758
    return;
   }
   ___async_unwind = 0; //@line 17761
   HEAP32[$ReallocAsyncCtx22 >> 2] = 406; //@line 17762
   $42 = $ReallocAsyncCtx22 + 4 | 0; //@line 17763
   HEAP32[$42 >> 2] = $4; //@line 17764
   $43 = $ReallocAsyncCtx22 + 8 | 0; //@line 17765
   HEAP32[$43 >> 2] = $14; //@line 17766
   $44 = $ReallocAsyncCtx22 + 12 | 0; //@line 17767
   HEAP32[$44 >> 2] = $16; //@line 17768
   $45 = $ReallocAsyncCtx22 + 16 | 0; //@line 17769
   HEAP32[$45 >> 2] = $18; //@line 17770
   sp = STACKTOP; //@line 17771
   return;
  } else {
   $$3$off0204 = 2; //@line 17774
  }
 }
 $46 = $4 + 944 | 0; //@line 17777
 HEAP8[$46 >> 0] = $$3$off0204 | HEAP8[$46 >> 0] & -7; //@line 17781
 $50 = $4 + 944 | 0; //@line 17782
 HEAP8[$50 >> 0] = HEAP8[$50 >> 0] | 32; //@line 17785
 $53 = HEAP32[$14 >> 2] | 0; //@line 17786
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 17788
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($53, $4 + 996 | 0, 1); //@line 17789
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 17792
  $55 = $ReallocAsyncCtx17 + 4 | 0; //@line 17793
  HEAP32[$55 >> 2] = $16; //@line 17794
  $56 = $ReallocAsyncCtx17 + 8 | 0; //@line 17795
  HEAP32[$56 >> 2] = $18; //@line 17796
  sp = STACKTOP; //@line 17797
  return;
 }
 ___async_unwind = 0; //@line 17800
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 17801
 $55 = $ReallocAsyncCtx17 + 4 | 0; //@line 17802
 HEAP32[$55 >> 2] = $16; //@line 17803
 $56 = $ReallocAsyncCtx17 + 8 | 0; //@line 17804
 HEAP32[$56 >> 2] = $18; //@line 17805
 sp = STACKTOP; //@line 17806
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_201($0) {
 $0 = $0 | 0;
 var $$1 = 0, $10 = 0, $110 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 34889
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34891
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34893
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34895
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34897
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34899
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34901
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34903
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 34905
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 34907
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 34909
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 34911
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 34913
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 34915
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 34917
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 34919
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 34921
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 34923
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 34925
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 34927
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 34929
 $42 = HEAP8[$0 + 84 >> 0] | 0; //@line 34931
 $44 = HEAP16[$0 + 86 >> 1] | 0; //@line 34933
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 34935
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 34937
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 34939
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 34941
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 34943
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 34947
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 34949
 $62 = HEAP8[$0 + 120 >> 0] | 0; //@line 34951
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 34953
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 34955
 if (!(HEAP8[HEAP32[$0 + 108 >> 2] >> 0] | 0)) {
  $$1 = -1017; //@line 34959
  $110 = ___async_retval; //@line 34960
  HEAP16[$110 >> 1] = $$1; //@line 34961
  return;
 }
 if (HEAP8[$22 >> 0] | 0) {
  $$1 = -1001; //@line 34967
  $110 = ___async_retval; //@line 34968
  HEAP16[$110 >> 1] = $$1; //@line 34969
  return;
 }
 $72 = $44 << 16 >> 16 == 0; //@line 34973
 if (!(($46 | 0) != 0 | $72)) {
  $$1 = -1003; //@line 34976
  $110 = ___async_retval; //@line 34977
  HEAP16[$110 >> 1] = $$1; //@line 34978
  return;
 }
 HEAP32[$16 >> 2] = 1; //@line 34981
 $73 = $64 + 4 | 0; //@line 34982
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(132) | 0; //@line 34983
 $74 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($73, $16) | 0; //@line 34984
 if (!___async) {
  HEAP32[___async_retval >> 2] = $74; //@line 34988
  ___async_unwind = 0; //@line 34989
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 299; //@line 34991
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 34993
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $73; //@line 34995
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $4; //@line 34997
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $6; //@line 34999
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $8; //@line 35001
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $10; //@line 35003
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $12; //@line 35005
 HEAP32[$ReallocAsyncCtx9 + 32 >> 2] = $14; //@line 35007
 HEAP32[$ReallocAsyncCtx9 + 36 >> 2] = $16; //@line 35009
 HEAP32[$ReallocAsyncCtx9 + 40 >> 2] = $18; //@line 35011
 HEAP32[$ReallocAsyncCtx9 + 44 >> 2] = $20; //@line 35013
 HEAP32[$ReallocAsyncCtx9 + 48 >> 2] = $24; //@line 35015
 HEAP32[$ReallocAsyncCtx9 + 52 >> 2] = $26; //@line 35017
 HEAP32[$ReallocAsyncCtx9 + 56 >> 2] = $28; //@line 35019
 HEAP32[$ReallocAsyncCtx9 + 60 >> 2] = $16; //@line 35021
 HEAP32[$ReallocAsyncCtx9 + 64 >> 2] = $30; //@line 35023
 HEAP32[$ReallocAsyncCtx9 + 68 >> 2] = $32; //@line 35025
 HEAP32[$ReallocAsyncCtx9 + 72 >> 2] = $34; //@line 35027
 HEAP32[$ReallocAsyncCtx9 + 76 >> 2] = $36; //@line 35029
 HEAP32[$ReallocAsyncCtx9 + 80 >> 2] = $38; //@line 35031
 HEAP32[$ReallocAsyncCtx9 + 84 >> 2] = $40; //@line 35033
 HEAP8[$ReallocAsyncCtx9 + 88 >> 0] = $42; //@line 35035
 HEAP8[$ReallocAsyncCtx9 + 89 >> 0] = $72 & 1; //@line 35038
 HEAP16[$ReallocAsyncCtx9 + 90 >> 1] = $44; //@line 35040
 HEAP32[$ReallocAsyncCtx9 + 92 >> 2] = $46; //@line 35042
 HEAP32[$ReallocAsyncCtx9 + 96 >> 2] = $48; //@line 35044
 HEAP32[$ReallocAsyncCtx9 + 100 >> 2] = $50; //@line 35046
 HEAP32[$ReallocAsyncCtx9 + 104 >> 2] = $52; //@line 35048
 HEAP32[$ReallocAsyncCtx9 + 108 >> 2] = $54; //@line 35050
 HEAP32[$ReallocAsyncCtx9 + 112 >> 2] = $58; //@line 35052
 HEAP32[$ReallocAsyncCtx9 + 116 >> 2] = $60; //@line 35054
 HEAP8[$ReallocAsyncCtx9 + 120 >> 0] = $62; //@line 35056
 HEAP32[$ReallocAsyncCtx9 + 124 >> 2] = $64; //@line 35058
 HEAP32[$ReallocAsyncCtx9 + 128 >> 2] = $66; //@line 35060
 sp = STACKTOP; //@line 35061
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_36($0) {
 $0 = $0 | 0;
 var $10 = 0, $109 = 0, $113 = 0, $12 = 0, $120 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $132 = 0, $135 = 0, $137 = 0, $138 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 19875
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19877
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19879
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19881
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19883
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19885
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19887
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19889
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19891
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19893
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19895
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19897
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19899
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19901
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19903
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 19905
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 19912
  return;
 }
 if (((HEAPU8[$6 + -3 + ($2 + 638) >> 0] | 0) << 8 | (HEAPU8[$2 + 638 + $4 >> 0] | 0) | (HEAPU8[$6 + -2 + ($2 + 638) >> 0] | 0) << 16 | (HEAPU8[$6 + -1 + ($2 + 638) >> 0] | 0) << 24 | 0) != (HEAP32[$8 >> 2] | 0)) {
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 7; //@line 19942
  $132 = $2 + 944 | 0; //@line 19943
  HEAP8[$132 >> 0] = HEAP8[$132 >> 0] | 32; //@line 19946
  $135 = HEAP32[$24 >> 2] | 0; //@line 19947
  $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 19949
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($135, $2 + 996 | 0, 1); //@line 19950
  if (___async) {
   HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 19953
   $137 = $ReallocAsyncCtx17 + 4 | 0; //@line 19954
   HEAP32[$137 >> 2] = $12; //@line 19955
   $138 = $ReallocAsyncCtx17 + 8 | 0; //@line 19956
   HEAP32[$138 >> 2] = $14; //@line 19957
   sp = STACKTOP; //@line 19958
   return;
  }
  ___async_unwind = 0; //@line 19961
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 19962
  $137 = $ReallocAsyncCtx17 + 4 | 0; //@line 19963
  HEAP32[$137 >> 2] = $12; //@line 19964
  $138 = $ReallocAsyncCtx17 + 8 | 0; //@line 19965
  HEAP32[$138 >> 2] = $14; //@line 19966
  sp = STACKTOP; //@line 19967
  return;
 }
 if (__Z28compute_skeys_for_join_framePKhS0_tPhS1_(HEAP32[$16 >> 2] | 0, $18, HEAP16[$2 + 946 >> 1] | 0, $20, $22) | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 19978
  return;
 }
 HEAP32[$2 + 948 >> 2] = (HEAPU8[$2 + 644 >> 0] | 0) << 16 | ((HEAPU8[$2 + 643 >> 0] | 0) << 8 | (HEAPU8[$2 + 642 >> 0] | 0)); //@line 19995
 HEAP32[$2 + 952 >> 2] = (HEAPU8[$2 + 648 >> 0] | 0) << 24 | ((HEAPU8[$2 + 647 >> 0] | 0) << 16 | ((HEAPU8[$2 + 646 >> 0] | 0) << 8 | (HEAPU8[$2 + 645 >> 0] | 0))); //@line 20015
 $99 = HEAP8[$2 + 649 >> 0] | 0; //@line 20017
 HEAP8[$2 + 1129 >> 0] = ($99 & 255) >>> 4 & 7; //@line 20023
 HEAP8[$2 + 1136 >> 0] = $99 & 15; //@line 20026
 $109 = HEAP8[$2 + 650 >> 0] & 15; //@line 20029
 $113 = $109 << 24 >> 24 == 0 ? 1e3 : ($109 & 255) * 1e3 | 0; //@line 20034
 HEAP32[$2 + 1112 >> 2] = $113; //@line 20035
 HEAP32[$2 + 1116 >> 2] = $113 + 1e3; //@line 20038
 HEAP32[$26 >> 2] = $2 + 651; //@line 20040
 HEAP8[$26 + 4 >> 0] = $6 + 239; //@line 20044
 $120 = HEAP32[$28 >> 2] | 0; //@line 20045
 $123 = HEAP32[(HEAP32[$120 >> 2] | 0) + 20 >> 2] | 0; //@line 20048
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 20049
 FUNCTION_TABLE_vii[$123 & 31]($120, $26); //@line 20050
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 391; //@line 20053
  $124 = $ReallocAsyncCtx + 4 | 0; //@line 20054
  HEAP32[$124 >> 2] = $2; //@line 20055
  $125 = $ReallocAsyncCtx + 8 | 0; //@line 20056
  HEAP32[$125 >> 2] = $30; //@line 20057
  $126 = $ReallocAsyncCtx + 12 | 0; //@line 20058
  HEAP32[$126 >> 2] = $24; //@line 20059
  $127 = $ReallocAsyncCtx + 16 | 0; //@line 20060
  HEAP32[$127 >> 2] = $12; //@line 20061
  $128 = $ReallocAsyncCtx + 20 | 0; //@line 20062
  HEAP32[$128 >> 2] = $14; //@line 20063
  sp = STACKTOP; //@line 20064
  return;
 }
 ___async_unwind = 0; //@line 20067
 HEAP32[$ReallocAsyncCtx >> 2] = 391; //@line 20068
 $124 = $ReallocAsyncCtx + 4 | 0; //@line 20069
 HEAP32[$124 >> 2] = $2; //@line 20070
 $125 = $ReallocAsyncCtx + 8 | 0; //@line 20071
 HEAP32[$125 >> 2] = $30; //@line 20072
 $126 = $ReallocAsyncCtx + 12 | 0; //@line 20073
 HEAP32[$126 >> 2] = $24; //@line 20074
 $127 = $ReallocAsyncCtx + 16 | 0; //@line 20075
 HEAP32[$127 >> 2] = $12; //@line 20076
 $128 = $ReallocAsyncCtx + 20 | 0; //@line 20077
 HEAP32[$128 >> 2] = $14; //@line 20078
 sp = STACKTOP; //@line 20079
 return;
}
function __Z15encrypt_payloadPKhtS0_jhjPh($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$044$lcssa$off0 = 0, $$04458 = 0, $$045$lcssa = 0, $$04557 = 0, $$048$lcssa = 0, $$1 = 0, $101 = 0, $107 = 0, $113 = 0, $119 = 0, $125 = 0, $126 = 0, $127 = 0, $134 = 0, $136 = 0, $27 = 0, $29 = 0, $35 = 0, $41 = 0, $47 = 0, $53 = 0, $59 = 0, $65 = 0, $7 = 0, $71 = 0, $77 = 0, $83 = 0, $89 = 0, $95 = 0, $indvars$iv = 0, $wide$trip$count = 0, label = 0;
 _mbedtls_aes_init(22632); //@line 22206
 $7 = _mbedtls_aes_setkey_enc(22632, $2, 128) | 0; //@line 22207
 if ($7 | 0) {
  $$1 = $7; //@line 22210
  _mbedtls_aes_free(22632); //@line 22211
  return $$1 | 0; //@line 22212
 }
 HEAP8[13609] = $4; //@line 22214
 HEAP8[13610] = $3; //@line 22216
 HEAP8[13611] = $3 >>> 8; //@line 22219
 HEAP8[13612] = $3 >>> 16; //@line 22222
 HEAP8[13613] = $3 >>> 24; //@line 22225
 HEAP8[13614] = $5; //@line 22227
 HEAP8[13615] = $5 >>> 8; //@line 22230
 HEAP8[13616] = $5 >>> 16; //@line 22233
 HEAP8[13617] = $5 >>> 24; //@line 22236
 do {
  if (($1 & 65535) > 15) {
   $$04458 = 1; //@line 22241
   $$04557 = 0; //@line 22241
   $126 = $1 & 65535; //@line 22241
   while (1) {
    HEAP8[13619] = $$04458; //@line 22244
    $$04458 = $$04458 + 1 << 16 >> 16; //@line 22245
    $27 = _mbedtls_aes_crypt_ecb(22632, 1, 13604, 23888) | 0; //@line 22246
    if ($27 | 0) {
     $$1 = $27; //@line 22249
     label = 11; //@line 22250
     break;
    }
    $29 = $$04557 & 255; //@line 22253
    HEAP8[$6 + $29 >> 0] = HEAP8[23888] ^ HEAP8[$0 + $29 >> 0]; //@line 22259
    $35 = $29 + 1 | 0; //@line 22260
    HEAP8[$6 + $35 >> 0] = HEAP8[23889] ^ HEAP8[$0 + $35 >> 0]; //@line 22266
    $41 = $29 + 2 | 0; //@line 22267
    HEAP8[$6 + $41 >> 0] = HEAP8[23890] ^ HEAP8[$0 + $41 >> 0]; //@line 22273
    $47 = $29 + 3 | 0; //@line 22274
    HEAP8[$6 + $47 >> 0] = HEAP8[23891] ^ HEAP8[$0 + $47 >> 0]; //@line 22280
    $53 = $29 + 4 | 0; //@line 22281
    HEAP8[$6 + $53 >> 0] = HEAP8[23892] ^ HEAP8[$0 + $53 >> 0]; //@line 22287
    $59 = $29 + 5 | 0; //@line 22288
    HEAP8[$6 + $59 >> 0] = HEAP8[23893] ^ HEAP8[$0 + $59 >> 0]; //@line 22294
    $65 = $29 + 6 | 0; //@line 22295
    HEAP8[$6 + $65 >> 0] = HEAP8[23894] ^ HEAP8[$0 + $65 >> 0]; //@line 22301
    $71 = $29 + 7 | 0; //@line 22302
    HEAP8[$6 + $71 >> 0] = HEAP8[23895] ^ HEAP8[$0 + $71 >> 0]; //@line 22308
    $77 = $29 + 8 | 0; //@line 22309
    HEAP8[$6 + $77 >> 0] = HEAP8[23896] ^ HEAP8[$0 + $77 >> 0]; //@line 22315
    $83 = $29 + 9 | 0; //@line 22316
    HEAP8[$6 + $83 >> 0] = HEAP8[23897] ^ HEAP8[$0 + $83 >> 0]; //@line 22322
    $89 = $29 + 10 | 0; //@line 22323
    HEAP8[$6 + $89 >> 0] = HEAP8[23898] ^ HEAP8[$0 + $89 >> 0]; //@line 22329
    $95 = $29 + 11 | 0; //@line 22330
    HEAP8[$6 + $95 >> 0] = HEAP8[23899] ^ HEAP8[$0 + $95 >> 0]; //@line 22336
    $101 = $29 + 12 | 0; //@line 22337
    HEAP8[$6 + $101 >> 0] = HEAP8[23900] ^ HEAP8[$0 + $101 >> 0]; //@line 22343
    $107 = $29 + 13 | 0; //@line 22344
    HEAP8[$6 + $107 >> 0] = HEAP8[23901] ^ HEAP8[$0 + $107 >> 0]; //@line 22350
    $113 = $29 + 14 | 0; //@line 22351
    HEAP8[$6 + $113 >> 0] = HEAP8[23902] ^ HEAP8[$0 + $113 >> 0]; //@line 22357
    $119 = $29 + 15 | 0; //@line 22358
    HEAP8[$6 + $119 >> 0] = HEAP8[23903] ^ HEAP8[$0 + $119 >> 0]; //@line 22364
    $125 = $126 + 65520 | 0; //@line 22365
    $127 = $125 & 65535; //@line 22366
    if (($127 & 65535) <= 15) {
     label = 6; //@line 22374
     break;
    } else {
     $$04557 = $29 + 16 & 255; //@line 22372
     $126 = $125 & 65535; //@line 22372
    }
   }
   if ((label | 0) == 6) {
    $$044$lcssa$off0 = $$04458 & 255; //@line 22382
    $$045$lcssa = $$04557 + 16 & 255; //@line 22382
    $$048$lcssa = $127; //@line 22382
    break;
   } else if ((label | 0) == 11) {
    _mbedtls_aes_free(22632); //@line 22386
    return $$1 | 0; //@line 22387
   }
  } else {
   $$044$lcssa$off0 = 1; //@line 22390
   $$045$lcssa = 0; //@line 22390
   $$048$lcssa = $1; //@line 22390
  }
 } while (0);
 if (!($$048$lcssa << 16 >> 16)) {
  $$1 = 0; //@line 22395
  _mbedtls_aes_free(22632); //@line 22396
  return $$1 | 0; //@line 22397
 }
 HEAP8[13619] = $$044$lcssa$off0; //@line 22399
 $134 = _mbedtls_aes_crypt_ecb(22632, 1, 13604, 23888) | 0; //@line 22400
 if ($134 | 0) {
  $$1 = $134; //@line 22403
  _mbedtls_aes_free(22632); //@line 22404
  return $$1 | 0; //@line 22405
 }
 $wide$trip$count = $$048$lcssa & 65535; //@line 22407
 $indvars$iv = 0; //@line 22408
 do {
  $136 = $indvars$iv + $$045$lcssa | 0; //@line 22410
  HEAP8[$6 + $136 >> 0] = HEAP8[23888 + $indvars$iv >> 0] ^ HEAP8[$0 + $136 >> 0]; //@line 22417
  $indvars$iv = $indvars$iv + 1 | 0; //@line 22418
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$1 = 0; //@line 22421
 _mbedtls_aes_free(22632); //@line 22427
 return $$1 | 0; //@line 22428
}
function __ZN7LoRaPHY13apply_cf_listEP15cflist_params_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01314 = 0, $$015 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $30 = 0, $33 = 0, $34 = 0, $37 = 0, $43 = 0, $49 = 0, $54 = 0, $71 = 0, $86 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 23731
 STACKTOP = STACKTOP + 16 | 0; //@line 23732
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 23732
 $2 = sp; //@line 23733
 if (!(HEAP8[$0 + 15 >> 0] | 0)) {
  STACKTOP = sp; //@line 23738
  return;
 }
 $15 = $2 + 8 | 0; //@line 23749
 HEAP8[$15 >> 0] = HEAPU8[$0 + 31 >> 0] << 4 | HEAPU8[$0 + 30 >> 0]; //@line 23750
 L4 : do {
  if ((HEAP8[$1 + 4 >> 0] | 0) == 16) {
   $19 = $0 + 18 | 0; //@line 23756
   $20 = HEAP8[$19 >> 0] | 0; //@line 23757
   $21 = $0 + 20 | 0; //@line 23758
   if (($20 & 255) < (HEAPU8[$21 >> 0] | 0)) {
    $24 = $0 + 19 | 0; //@line 23762
    $25 = $2 + 4 | 0; //@line 23763
    $$01314 = 0; //@line 23764
    $$015 = $20; //@line 23764
    $30 = $20; //@line 23764
    while (1) {
     if ((($30 & 255) + (HEAPU8[$24 >> 0] | 0) | 0) >>> 0 > ($$015 & 255) >>> 0) {
      $33 = HEAP32[$1 >> 2] | 0; //@line 23773
      $34 = $$01314 & 255; //@line 23774
      $37 = HEAPU8[$33 + $34 >> 0] | 0; //@line 23777
      HEAP32[$2 >> 2] = $37; //@line 23778
      $43 = HEAPU8[$33 + ($34 + 1) >> 0] << 8 | $37; //@line 23784
      HEAP32[$2 >> 2] = $43; //@line 23785
      $49 = HEAPU8[$33 + ($34 + 2) >> 0] << 16 | $43; //@line 23791
      HEAP32[$2 >> 2] = $49 * 100; //@line 23793
      HEAP32[$25 >> 2] = 0; //@line 23794
      if (!$49) {
       label = 11; //@line 23797
      } else {
       $54 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 23801
       $AsyncCtx = _emscripten_alloc_async_context(56, sp) | 0; //@line 23802
       FUNCTION_TABLE_iiii[$54 & 15]($0, $2, $$015) | 0; //@line 23803
       if (___async) {
        label = 9; //@line 23806
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 23809
      }
     } else {
      HEAP32[$2 >> 2] = 0; //@line 23812
      HEAP8[$15 >> 0] = 0; //@line 23813
      HEAP32[$25 >> 2] = 0; //@line 23814
      label = 11; //@line 23815
     }
     if ((label | 0) == 11) {
      label = 0; //@line 23818
      $71 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 23821
      $AsyncCtx3 = _emscripten_alloc_async_context(56, sp) | 0; //@line 23822
      FUNCTION_TABLE_iii[$71 & 31]($0, $$015) | 0; //@line 23823
      if (___async) {
       label = 12; //@line 23826
       break;
      }
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 23829
     }
     $86 = HEAP8[$19 >> 0] | 0; //@line 23831
     $91 = $$015 + 1 << 24 >> 24; //@line 23836
     if (($91 & 255) < (HEAPU8[$21 >> 0] | 0)) {
      $$01314 = ($86 & 255) + ($$01314 & 255) & 255; //@line 23840
      $$015 = $91; //@line 23840
      $30 = $86; //@line 23840
     } else {
      break L4;
     }
    }
    if ((label | 0) == 9) {
     HEAP32[$AsyncCtx >> 2] = 615; //@line 23846
     HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 23848
     HEAP8[$AsyncCtx + 8 >> 0] = $$01314; //@line 23850
     HEAP8[$AsyncCtx + 9 >> 0] = $$015; //@line 23852
     HEAP32[$AsyncCtx + 12 >> 2] = $21; //@line 23854
     HEAP32[$AsyncCtx + 16 >> 2] = $24; //@line 23856
     HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 23858
     HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 23860
     HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 23862
     HEAP32[$AsyncCtx + 32 >> 2] = $25; //@line 23864
     HEAP32[$AsyncCtx + 36 >> 2] = $15; //@line 23866
     HEAP32[$AsyncCtx + 40 >> 2] = $0; //@line 23868
     HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 23870
     HEAP32[$AsyncCtx + 48 >> 2] = $0; //@line 23872
     HEAP32[$AsyncCtx + 52 >> 2] = $2; //@line 23874
     sp = STACKTOP; //@line 23875
     STACKTOP = sp; //@line 23876
     return;
    } else if ((label | 0) == 12) {
     HEAP32[$AsyncCtx3 >> 2] = 616; //@line 23879
     HEAP32[$AsyncCtx3 + 4 >> 2] = $19; //@line 23881
     HEAP8[$AsyncCtx3 + 8 >> 0] = $$01314; //@line 23883
     HEAP8[$AsyncCtx3 + 9 >> 0] = $$015; //@line 23885
     HEAP32[$AsyncCtx3 + 12 >> 2] = $21; //@line 23887
     HEAP32[$AsyncCtx3 + 16 >> 2] = $24; //@line 23889
     HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 23891
     HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 23893
     HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 23895
     HEAP32[$AsyncCtx3 + 32 >> 2] = $25; //@line 23897
     HEAP32[$AsyncCtx3 + 36 >> 2] = $15; //@line 23899
     HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 23901
     HEAP32[$AsyncCtx3 + 44 >> 2] = $0; //@line 23903
     HEAP32[$AsyncCtx3 + 48 >> 2] = $0; //@line 23905
     HEAP32[$AsyncCtx3 + 52 >> 2] = $2; //@line 23907
     sp = STACKTOP; //@line 23908
     STACKTOP = sp; //@line 23909
     return;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 23914
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 33756
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33760
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33762
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33764
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33766
 $11 = $4 + 12 | 0; //@line 33768
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 33769
 $12 = _equeue_alloc($6, 16) | 0; //@line 33770
 if ($12 | 0) {
  $14 = HEAP32[$11 >> 2] | 0; //@line 33773
  if (!$14) {
   HEAP32[$12 + 12 >> 2] = 0; //@line 33777
   _equeue_event_delay($12, $10); //@line 33778
   _equeue_event_dtor($12, 370); //@line 33779
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 33780
   $26 = _equeue_post($6, 371, $12) | 0; //@line 33781
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 664; //@line 33784
    $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 33785
    HEAP32[$27 >> 2] = $8; //@line 33786
    $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 33787
    HEAP32[$28 >> 2] = $11; //@line 33788
    $29 = $ReallocAsyncCtx4 + 12 | 0; //@line 33789
    HEAP32[$29 >> 2] = $4; //@line 33790
    sp = STACKTOP; //@line 33791
    return;
   }
   HEAP32[___async_retval >> 2] = $26; //@line 33795
   ___async_unwind = 0; //@line 33796
   HEAP32[$ReallocAsyncCtx4 >> 2] = 664; //@line 33797
   $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 33798
   HEAP32[$27 >> 2] = $8; //@line 33799
   $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 33800
   HEAP32[$28 >> 2] = $11; //@line 33801
   $29 = $ReallocAsyncCtx4 + 12 | 0; //@line 33802
   HEAP32[$29 >> 2] = $4; //@line 33803
   sp = STACKTOP; //@line 33804
   return;
  } else {
   $17 = HEAP32[$14 + 4 >> 2] | 0; //@line 33808
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 33809
   FUNCTION_TABLE_vii[$17 & 31]($12, $4); //@line 33810
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 663; //@line 33813
    $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 33814
    HEAP32[$18 >> 2] = $11; //@line 33815
    $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 33816
    HEAP32[$19 >> 2] = $12; //@line 33817
    $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 33818
    HEAP32[$20 >> 2] = $10; //@line 33819
    $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 33820
    HEAP32[$21 >> 2] = $6; //@line 33821
    $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 33822
    HEAP32[$22 >> 2] = $8; //@line 33823
    $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 33824
    HEAP32[$23 >> 2] = $11; //@line 33825
    $24 = $ReallocAsyncCtx2 + 28 | 0; //@line 33826
    HEAP32[$24 >> 2] = $4; //@line 33827
    sp = STACKTOP; //@line 33828
    return;
   }
   ___async_unwind = 0; //@line 33831
   HEAP32[$ReallocAsyncCtx2 >> 2] = 663; //@line 33832
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 33833
   HEAP32[$18 >> 2] = $11; //@line 33834
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 33835
   HEAP32[$19 >> 2] = $12; //@line 33836
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 33837
   HEAP32[$20 >> 2] = $10; //@line 33838
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 33839
   HEAP32[$21 >> 2] = $6; //@line 33840
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 33841
   HEAP32[$22 >> 2] = $8; //@line 33842
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 33843
   HEAP32[$23 >> 2] = $11; //@line 33844
   $24 = $ReallocAsyncCtx2 + 28 | 0; //@line 33845
   HEAP32[$24 >> 2] = $4; //@line 33846
   sp = STACKTOP; //@line 33847
   return;
  }
 }
 $31 = $8 + 16 | 0; //@line 33851
 HEAP32[$31 >> 2] = 0; //@line 33852
 $32 = HEAP32[$11 >> 2] | 0; //@line 33853
 if ($32 | 0) {
  $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 33857
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 33858
  FUNCTION_TABLE_vi[$35 & 1023]($4); //@line 33859
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 665; //@line 33862
   $36 = $ReallocAsyncCtx3 + 4 | 0; //@line 33863
   HEAP32[$36 >> 2] = $31; //@line 33864
   sp = STACKTOP; //@line 33865
   return;
  }
  ___async_unwind = 0; //@line 33868
  HEAP32[$ReallocAsyncCtx3 >> 2] = 665; //@line 33869
  $36 = $ReallocAsyncCtx3 + 4 | 0; //@line 33870
  HEAP32[$36 >> 2] = $31; //@line 33871
  sp = STACKTOP; //@line 33872
  return;
 }
 if (0) {
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 33879
 _mbed_assert_internal(13734, 13752, 57); //@line 33880
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 666; //@line 33883
  sp = STACKTOP; //@line 33884
  return;
 }
 ___async_unwind = 0; //@line 33887
 HEAP32[$ReallocAsyncCtx5 >> 2] = 666; //@line 33888
 sp = STACKTOP; //@line 33889
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_322($0) {
 $0 = $0 | 0;
 var $$pre17 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $6 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20366
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20368
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20372
 HEAP32[$6 + 364 >> 2] = 2; //@line 20374
 $$pre17 = HEAP8[$2 >> 0] | 0; //@line 20375
 if (!($$pre17 & 4)) {
  $11 = HEAP32[$6 + 1324 >> 2] | 0; //@line 20380
  $12 = $11 + 16 | 0; //@line 20381
  $14 = __ZN11LoRaMacMcps14get_indicationEv($6 + 288 | 0) | 0; //@line 20383
  $15 = $11 + 28 | 0; //@line 20384
  $16 = HEAP32[$15 >> 2] | 0; //@line 20385
  if (!$16) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 20388
   _mbed_assert_internal(15061, 15066, 1102); //@line 20389
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 20392
    $18 = $ReallocAsyncCtx15 + 4 | 0; //@line 20393
    HEAP32[$18 >> 2] = $15; //@line 20394
    $19 = $ReallocAsyncCtx15 + 8 | 0; //@line 20395
    HEAP32[$19 >> 2] = $12; //@line 20396
    $20 = $ReallocAsyncCtx15 + 12 | 0; //@line 20397
    HEAP32[$20 >> 2] = $14; //@line 20398
    $21 = $ReallocAsyncCtx15 + 16 | 0; //@line 20399
    HEAP32[$21 >> 2] = $2; //@line 20400
    $22 = $ReallocAsyncCtx15 + 20 | 0; //@line 20401
    HEAP32[$22 >> 2] = $6; //@line 20402
    sp = STACKTOP; //@line 20403
    return;
   }
   ___async_unwind = 0; //@line 20406
   HEAP32[$ReallocAsyncCtx15 >> 2] = 476; //@line 20407
   $18 = $ReallocAsyncCtx15 + 4 | 0; //@line 20408
   HEAP32[$18 >> 2] = $15; //@line 20409
   $19 = $ReallocAsyncCtx15 + 8 | 0; //@line 20410
   HEAP32[$19 >> 2] = $12; //@line 20411
   $20 = $ReallocAsyncCtx15 + 12 | 0; //@line 20412
   HEAP32[$20 >> 2] = $14; //@line 20413
   $21 = $ReallocAsyncCtx15 + 16 | 0; //@line 20414
   HEAP32[$21 >> 2] = $2; //@line 20415
   $22 = $ReallocAsyncCtx15 + 20 | 0; //@line 20416
   HEAP32[$22 >> 2] = $6; //@line 20417
   sp = STACKTOP; //@line 20418
   return;
  } else {
   $23 = HEAP32[$16 >> 2] | 0; //@line 20421
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 20422
   FUNCTION_TABLE_vii[$23 & 31]($12, $14); //@line 20423
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 20426
    $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 20427
    HEAP32[$24 >> 2] = $2; //@line 20428
    $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 20429
    HEAP32[$25 >> 2] = $6; //@line 20430
    sp = STACKTOP; //@line 20431
    return;
   }
   ___async_unwind = 0; //@line 20434
   HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 20435
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 20436
   HEAP32[$24 >> 2] = $2; //@line 20437
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 20438
   HEAP32[$25 >> 2] = $6; //@line 20439
   sp = STACKTOP; //@line 20440
   return;
  }
 }
 $26 = $$pre17 & -5; //@line 20444
 HEAP8[$2 >> 0] = $26; //@line 20445
 if (!($26 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $26 & -17; //@line 20452
 $31 = HEAP32[$6 + 1324 >> 2] | 0; //@line 20454
 $32 = $31 + 48 | 0; //@line 20455
 $34 = __ZN11LoRaMacMlme14get_indicationEv($6 + 264 | 0) | 0; //@line 20457
 $35 = $31 + 60 | 0; //@line 20458
 $36 = HEAP32[$35 >> 2] | 0; //@line 20459
 if (!$36) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 20462
  _mbed_assert_internal(15061, 15066, 1102); //@line 20463
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 20466
   $38 = $ReallocAsyncCtx14 + 4 | 0; //@line 20467
   HEAP32[$38 >> 2] = $35; //@line 20468
   $39 = $ReallocAsyncCtx14 + 8 | 0; //@line 20469
   HEAP32[$39 >> 2] = $32; //@line 20470
   $40 = $ReallocAsyncCtx14 + 12 | 0; //@line 20471
   HEAP32[$40 >> 2] = $34; //@line 20472
   sp = STACKTOP; //@line 20473
   return;
  }
  ___async_unwind = 0; //@line 20476
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 20477
  $38 = $ReallocAsyncCtx14 + 4 | 0; //@line 20478
  HEAP32[$38 >> 2] = $35; //@line 20479
  $39 = $ReallocAsyncCtx14 + 8 | 0; //@line 20480
  HEAP32[$39 >> 2] = $32; //@line 20481
  $40 = $ReallocAsyncCtx14 + 12 | 0; //@line 20482
  HEAP32[$40 >> 2] = $34; //@line 20483
  sp = STACKTOP; //@line 20484
  return;
 } else {
  $41 = HEAP32[$36 >> 2] | 0; //@line 20487
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 20488
  FUNCTION_TABLE_vii[$41 & 31]($32, $34); //@line 20489
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 20492
   sp = STACKTOP; //@line 20493
   return;
  }
  ___async_unwind = 0; //@line 20496
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 20497
  sp = STACKTOP; //@line 20498
  return;
 }
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_200($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $40 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $69 = 0, $70 = 0, $74 = 0, $77 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 34700
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34702
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34706
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34710
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 34712
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34714
 $16 = HEAP16[$0 + 32 >> 1] | 0; //@line 34716
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 34718
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 34720
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 34724
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 34728
 $30 = HEAP8[$0 + 60 >> 0] | 0; //@line 34730
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 34732
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 34734
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 34736
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 34738
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 34740
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 34744
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 34746
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 34748
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 34750
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 34752
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 34754
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 34756
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 34758
 $60 = HEAP8[$0 + 120 >> 0] & 1; //@line 34761
 if (!(HEAP32[$0 + 124 >> 2] | 0)) {
  if (!(HEAP8[(HEAP32[$0 + 84 >> 2] | 0) + 4 >> 0] | 0)) {
   HEAP16[___async_retval >> 1] = -1009; //@line 34771
   return;
  }
 }
 if (($12 + -1 & 255) >= 223) {
  _printf(11887, $20) | 0; //@line 34778
  _printf(12376, $24) | 0; //@line 34779
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 34780
  _putchar(10) | 0; //@line 34781
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 301; //@line 34784
   $69 = $ReallocAsyncCtx5 + 4 | 0; //@line 34785
   HEAP32[$69 >> 2] = $40; //@line 34786
   sp = STACKTOP; //@line 34787
   return;
  }
  ___async_unwind = 0; //@line 34790
  HEAP32[$ReallocAsyncCtx5 >> 2] = 301; //@line 34791
  $69 = $ReallocAsyncCtx5 + 4 | 0; //@line 34792
  HEAP32[$69 >> 2] = $40; //@line 34793
  sp = STACKTOP; //@line 34794
  return;
 }
 $70 = $10 + 2285 | 0; //@line 34797
 HEAP8[$70 >> 0] = $12; //@line 34798
 if (!($30 << 24 >> 24 == 0 | ($30 & 15) == 3)) {
  HEAP8[$10 + 1965 >> 0] = $12; //@line 34805
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(88) | 0; //@line 34807
  $77 = __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t($18, $16 & 255, $14) | 0; //@line 34808
  if (!___async) {
   HEAP32[___async_retval >> 2] = $77; //@line 34812
   ___async_unwind = 0; //@line 34813
  }
  HEAP32[$ReallocAsyncCtx8 >> 2] = 303; //@line 34815
  HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $10; //@line 34817
  HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $28; //@line 34819
  HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $32; //@line 34821
  HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $34; //@line 34823
  HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $36; //@line 34825
  HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $38; //@line 34827
  HEAP32[$ReallocAsyncCtx8 + 28 >> 2] = $40; //@line 34829
  HEAP32[$ReallocAsyncCtx8 + 32 >> 2] = $14; //@line 34831
  HEAP32[$ReallocAsyncCtx8 + 36 >> 2] = $14; //@line 34833
  HEAP16[$ReallocAsyncCtx8 + 40 >> 1] = $16; //@line 34835
  HEAP32[$ReallocAsyncCtx8 + 44 >> 2] = $44; //@line 34837
  HEAP32[$ReallocAsyncCtx8 + 48 >> 2] = $46; //@line 34839
  HEAP32[$ReallocAsyncCtx8 + 52 >> 2] = $48; //@line 34841
  HEAP32[$ReallocAsyncCtx8 + 56 >> 2] = $50; //@line 34843
  HEAP32[$ReallocAsyncCtx8 + 60 >> 2] = $70; //@line 34845
  HEAP8[$ReallocAsyncCtx8 + 64 >> 0] = $30; //@line 34847
  HEAP32[$ReallocAsyncCtx8 + 68 >> 2] = $52; //@line 34849
  HEAP32[$ReallocAsyncCtx8 + 72 >> 2] = $54; //@line 34851
  HEAP32[$ReallocAsyncCtx8 + 76 >> 2] = $56; //@line 34853
  HEAP32[$ReallocAsyncCtx8 + 80 >> 2] = $58; //@line 34855
  HEAP8[$ReallocAsyncCtx8 + 84 >> 0] = $60 & 1; //@line 34858
  sp = STACKTOP; //@line 34859
  return;
 }
 _printf(11887, $2) | 0; //@line 34862
 _printf(12413, $6) | 0; //@line 34863
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 34864
 _putchar(10) | 0; //@line 34865
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 302; //@line 34868
  $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 34869
  HEAP32[$74 >> 2] = $40; //@line 34870
  sp = STACKTOP; //@line 34871
  return;
 }
 ___async_unwind = 0; //@line 34874
 HEAP32[$ReallocAsyncCtx4 >> 2] = 302; //@line 34875
 $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 34876
 HEAP32[$74 >> 2] = $40; //@line 34877
 sp = STACKTOP; //@line 34878
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_125($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $2 = 0, $24 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30663
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30665
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30667
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30669
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30671
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30673
 HEAP32[$2 + 364 >> 2] = 0; //@line 30675
 $14 = $2 + 1160 | 0; //@line 30678
 HEAP8[$14 >> 0] = HEAP8[$2 + 378 >> 0] | 0; //@line 30679
 HEAP8[$2 + 1163 >> 0] = HEAP8[$2 + 1129 >> 0] | 0; //@line 30683
 HEAP8[$2 + 1176 >> 0] = HEAP8[$2 + 1141 >> 0] | 0; //@line 30687
 HEAP8[$2 + 1177 >> 0] = HEAP8[$2 + 369 >> 0] | 0; //@line 30691
 $24 = $2 + 1178 | 0; //@line 30692
 HEAP8[$24 >> 0] = 0; //@line 30693
 HEAP32[$2 + 1180 >> 2] = 0; //@line 30695
 if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
  $29 = HEAP32[$2 >> 2] | 0; //@line 30700
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 30701
  __ZN7LoRaPHY20put_radio_to_standbyEv($29); //@line 30702
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 513; //@line 30705
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 30706
   HEAP32[$30 >> 2] = $2; //@line 30707
   $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 30708
   HEAP32[$31 >> 2] = $2; //@line 30709
   $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 30710
   HEAP32[$32 >> 2] = $14; //@line 30711
   $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 30712
   HEAP32[$33 >> 2] = $24; //@line 30713
   $34 = $ReallocAsyncCtx5 + 20 | 0; //@line 30714
   HEAP32[$34 >> 2] = $4; //@line 30715
   $35 = $ReallocAsyncCtx5 + 24 | 0; //@line 30716
   HEAP32[$35 >> 2] = $6; //@line 30717
   $36 = $ReallocAsyncCtx5 + 28 | 0; //@line 30718
   HEAP32[$36 >> 2] = $8; //@line 30719
   $37 = $ReallocAsyncCtx5 + 32 | 0; //@line 30720
   HEAP32[$37 >> 2] = $10; //@line 30721
   sp = STACKTOP; //@line 30722
   return;
  }
  ___async_unwind = 0; //@line 30725
  HEAP32[$ReallocAsyncCtx5 >> 2] = 513; //@line 30726
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 30727
  HEAP32[$30 >> 2] = $2; //@line 30728
  $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 30729
  HEAP32[$31 >> 2] = $2; //@line 30730
  $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 30731
  HEAP32[$32 >> 2] = $14; //@line 30732
  $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 30733
  HEAP32[$33 >> 2] = $24; //@line 30734
  $34 = $ReallocAsyncCtx5 + 20 | 0; //@line 30735
  HEAP32[$34 >> 2] = $4; //@line 30736
  $35 = $ReallocAsyncCtx5 + 24 | 0; //@line 30737
  HEAP32[$35 >> 2] = $6; //@line 30738
  $36 = $ReallocAsyncCtx5 + 28 | 0; //@line 30739
  HEAP32[$36 >> 2] = $8; //@line 30740
  $37 = $ReallocAsyncCtx5 + 32 | 0; //@line 30741
  HEAP32[$37 >> 2] = $10; //@line 30742
  sp = STACKTOP; //@line 30743
  return;
 } else {
  $38 = HEAP32[$2 >> 2] | 0; //@line 30746
  $41 = HEAP32[(HEAP32[$38 >> 2] | 0) + 24 >> 2] | 0; //@line 30749
  $44 = (__ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0) + 10 | 0; //@line 30752
  $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 30753
  FUNCTION_TABLE_iiii[$41 & 15]($38, $14, $44) | 0; //@line 30754
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 514; //@line 30757
   $45 = $ReallocAsyncCtx + 4 | 0; //@line 30758
   HEAP32[$45 >> 2] = $24; //@line 30759
   $46 = $ReallocAsyncCtx + 8 | 0; //@line 30760
   HEAP32[$46 >> 2] = $2; //@line 30761
   $47 = $ReallocAsyncCtx + 12 | 0; //@line 30762
   HEAP32[$47 >> 2] = $4; //@line 30763
   $48 = $ReallocAsyncCtx + 16 | 0; //@line 30764
   HEAP32[$48 >> 2] = $6; //@line 30765
   $49 = $ReallocAsyncCtx + 20 | 0; //@line 30766
   HEAP32[$49 >> 2] = $8; //@line 30767
   $50 = $ReallocAsyncCtx + 24 | 0; //@line 30768
   HEAP32[$50 >> 2] = $10; //@line 30769
   $51 = $ReallocAsyncCtx + 28 | 0; //@line 30770
   HEAP32[$51 >> 2] = $2; //@line 30771
   sp = STACKTOP; //@line 30772
   return;
  }
  ___async_unwind = 0; //@line 30775
  HEAP32[$ReallocAsyncCtx >> 2] = 514; //@line 30776
  $45 = $ReallocAsyncCtx + 4 | 0; //@line 30777
  HEAP32[$45 >> 2] = $24; //@line 30778
  $46 = $ReallocAsyncCtx + 8 | 0; //@line 30779
  HEAP32[$46 >> 2] = $2; //@line 30780
  $47 = $ReallocAsyncCtx + 12 | 0; //@line 30781
  HEAP32[$47 >> 2] = $4; //@line 30782
  $48 = $ReallocAsyncCtx + 16 | 0; //@line 30783
  HEAP32[$48 >> 2] = $6; //@line 30784
  $49 = $ReallocAsyncCtx + 20 | 0; //@line 30785
  HEAP32[$49 >> 2] = $8; //@line 30786
  $50 = $ReallocAsyncCtx + 24 | 0; //@line 30787
  HEAP32[$50 >> 2] = $10; //@line 30788
  $51 = $ReallocAsyncCtx + 28 | 0; //@line 30789
  HEAP32[$51 >> 2] = $2; //@line 30790
  sp = STACKTOP; //@line 30791
  return;
 }
}
function _mbedtls_cipher_cmac_finish__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28692
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28694
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28696
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28698
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28700
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28702
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28704
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28706
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28708
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28710
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28712
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28716
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28718
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 28720
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 28724
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 28726
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 28728
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 28730
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 28732
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 28734
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 28736
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 28738
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 28740
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 28742
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 28744
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 28746
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 28750
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 28752
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 28754
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 28756
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 28758
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 28760
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 28762
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 28764
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 28766
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 28768
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28772
 if (!$AsyncRetVal) {
  _memcpy(HEAP32[$0 + 48 >> 2] | 0, $2 | 0, HEAP32[$0 + 64 >> 2] | 0) | 0; //@line 28775
 }
 HEAP8[$36 >> 0] = 0; //@line 28777
 HEAP8[$40 >> 0] = 0; //@line 28778
 HEAP8[$60 >> 0] = 0; //@line 28779
 HEAP8[$76 >> 0] = 0; //@line 28780
 HEAP8[$4 >> 0] = 0; //@line 28781
 HEAP8[$54 >> 0] = 0; //@line 28782
 HEAP8[$64 >> 0] = 0; //@line 28783
 HEAP8[$6 >> 0] = 0; //@line 28784
 HEAP8[$42 >> 0] = 0; //@line 28785
 HEAP8[$12 >> 0] = 0; //@line 28786
 HEAP8[$70 >> 0] = 0; //@line 28787
 HEAP8[$44 >> 0] = 0; //@line 28788
 HEAP8[$26 >> 0] = 0; //@line 28789
 HEAP8[$72 >> 0] = 0; //@line 28790
 HEAP8[$46 >> 0] = 0; //@line 28791
 HEAP8[$38 >> 0] = 0; //@line 28792
 HEAP8[$14 >> 0] = 0; //@line 28793
 HEAP8[$18 >> 0] = 0; //@line 28794
 HEAP8[$74 >> 0] = 0; //@line 28795
 HEAP8[$20 >> 0] = 0; //@line 28796
 HEAP8[$28 >> 0] = 0; //@line 28797
 HEAP8[$48 >> 0] = 0; //@line 28798
 HEAP8[$66 >> 0] = 0; //@line 28799
 HEAP8[$30 >> 0] = 0; //@line 28800
 HEAP8[$56 >> 0] = 0; //@line 28801
 HEAP8[$78 >> 0] = 0; //@line 28802
 HEAP8[$8 >> 0] = 0; //@line 28803
 HEAP8[$50 >> 0] = 0; //@line 28804
 HEAP8[$68 >> 0] = 0; //@line 28805
 HEAP8[$10 >> 0] = 0; //@line 28806
 HEAP8[$34 >> 0] = 0; //@line 28807
 HEAP8[$16 >> 0] = 0; //@line 28808
 HEAP32[$52 >> 2] = 0; //@line 28809
 HEAP8[$22 >> 0] = 0; //@line 28811
 HEAP8[$62 + 17 >> 0] = 0; //@line 28813
 HEAP8[$62 + 18 >> 0] = 0; //@line 28815
 HEAP8[$62 + 19 >> 0] = 0; //@line 28817
 HEAP8[$62 + 20 >> 0] = 0; //@line 28819
 HEAP8[$62 + 21 >> 0] = 0; //@line 28821
 HEAP8[$62 + 22 >> 0] = 0; //@line 28823
 HEAP8[$62 + 23 >> 0] = 0; //@line 28825
 HEAP8[$62 + 24 >> 0] = 0; //@line 28827
 HEAP8[$62 + 25 >> 0] = 0; //@line 28829
 HEAP8[$62 + 26 >> 0] = 0; //@line 28831
 HEAP8[$62 + 27 >> 0] = 0; //@line 28833
 HEAP8[$62 + 28 >> 0] = 0; //@line 28835
 HEAP8[$62 + 29 >> 0] = 0; //@line 28837
 HEAP8[$62 + 30 >> 0] = 0; //@line 28839
 HEAP8[$62 + 31 >> 0] = 0; //@line 28840
 HEAP8[$2 >> 0] = 0; //@line 28842
 HEAP8[$62 + 1 >> 0] = 0; //@line 28844
 HEAP8[$62 + 2 >> 0] = 0; //@line 28846
 HEAP8[$62 + 3 >> 0] = 0; //@line 28848
 HEAP8[$62 + 4 >> 0] = 0; //@line 28850
 HEAP8[$62 + 5 >> 0] = 0; //@line 28852
 HEAP8[$62 + 6 >> 0] = 0; //@line 28854
 HEAP8[$62 + 7 >> 0] = 0; //@line 28856
 HEAP8[$62 + 8 >> 0] = 0; //@line 28858
 HEAP8[$62 + 9 >> 0] = 0; //@line 28860
 HEAP8[$62 + 10 >> 0] = 0; //@line 28862
 HEAP8[$62 + 11 >> 0] = 0; //@line 28864
 HEAP8[$62 + 12 >> 0] = 0; //@line 28866
 HEAP8[$62 + 13 >> 0] = 0; //@line 28868
 HEAP8[$62 + 14 >> 0] = 0; //@line 28870
 HEAP8[$62 + 15 >> 0] = 0; //@line 28871
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 28873
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_88($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $23 = 0, $26 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $48 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25440
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25446
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25448
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 25450
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25452
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25454
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25456
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25458
 if ((HEAP8[$0 + 4 >> 0] | 0) == 7) {
  if (HEAP8[(HEAP32[$0 + 8 >> 2] | 0) + 14 >> 0] | 0) {
   $23 = HEAP32[$6 >> 2] | 0; //@line 25465
   $26 = HEAP32[(HEAP32[$23 >> 2] | 0) + 16 >> 2] | 0; //@line 25468
   $31 = HEAP32[$8 + 8 >> 2] & 65535; //@line 25473
   $34 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 25476
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 25477
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$26 & 1]($23, 0, 5e4, ($10 & 255) * 1e3 | 0, 0, 83333, 5, $31, 0, 0, 1, 0, 0, 0, $34); //@line 25478
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 622; //@line 25481
    $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 25482
    HEAP32[$35 >> 2] = $8; //@line 25483
    $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 25484
    HEAP32[$36 >> 2] = $12; //@line 25485
    $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 25486
    HEAP32[$37 >> 2] = $14; //@line 25487
    $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 25488
    HEAP32[$38 >> 2] = $16; //@line 25489
    $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 25490
    HEAP32[$39 >> 2] = $6; //@line 25491
    $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 25492
    HEAP8[$40 >> 0] = $10; //@line 25493
    $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 25494
    HEAP32[$41 >> 2] = $18; //@line 25495
    sp = STACKTOP; //@line 25496
    return;
   }
   ___async_unwind = 0; //@line 25499
   HEAP32[$ReallocAsyncCtx6 >> 2] = 622; //@line 25500
   $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 25501
   HEAP32[$35 >> 2] = $8; //@line 25502
   $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 25503
   HEAP32[$36 >> 2] = $12; //@line 25504
   $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 25505
   HEAP32[$37 >> 2] = $14; //@line 25506
   $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 25507
   HEAP32[$38 >> 2] = $16; //@line 25508
   $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 25509
   HEAP32[$39 >> 2] = $6; //@line 25510
   $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 25511
   HEAP8[$40 >> 0] = $10; //@line 25512
   $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 25513
   HEAP32[$41 >> 2] = $18; //@line 25514
   sp = STACKTOP; //@line 25515
   return;
  }
 }
 $42 = HEAP32[$6 >> 2] | 0; //@line 25519
 $45 = HEAP32[(HEAP32[$42 >> 2] | 0) + 16 >> 2] | 0; //@line 25522
 $48 = HEAPU8[$8 + 2 >> 0] | 0; //@line 25525
 $52 = HEAP32[$8 + 8 >> 2] & 65535; //@line 25529
 $55 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 25532
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 25533
 FUNCTION_TABLE_viiiiiiiiiiiiiii[$45 & 1]($42, 1, $48, $10 & 255, 1, 0, 8, $52, 0, 0, 0, 0, 0, 1, $55); //@line 25534
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 623; //@line 25537
  $56 = $ReallocAsyncCtx7 + 4 | 0; //@line 25538
  HEAP32[$56 >> 2] = $8; //@line 25539
  $57 = $ReallocAsyncCtx7 + 8 | 0; //@line 25540
  HEAP32[$57 >> 2] = $12; //@line 25541
  $58 = $ReallocAsyncCtx7 + 12 | 0; //@line 25542
  HEAP32[$58 >> 2] = $14; //@line 25543
  $59 = $ReallocAsyncCtx7 + 16 | 0; //@line 25544
  HEAP32[$59 >> 2] = $16; //@line 25545
  $60 = $ReallocAsyncCtx7 + 20 | 0; //@line 25546
  HEAP32[$60 >> 2] = $6; //@line 25547
  $61 = $ReallocAsyncCtx7 + 24 | 0; //@line 25548
  HEAP8[$61 >> 0] = $10; //@line 25549
  $62 = $ReallocAsyncCtx7 + 28 | 0; //@line 25550
  HEAP32[$62 >> 2] = $18; //@line 25551
  sp = STACKTOP; //@line 25552
  return;
 }
 ___async_unwind = 0; //@line 25555
 HEAP32[$ReallocAsyncCtx7 >> 2] = 623; //@line 25556
 $56 = $ReallocAsyncCtx7 + 4 | 0; //@line 25557
 HEAP32[$56 >> 2] = $8; //@line 25558
 $57 = $ReallocAsyncCtx7 + 8 | 0; //@line 25559
 HEAP32[$57 >> 2] = $12; //@line 25560
 $58 = $ReallocAsyncCtx7 + 12 | 0; //@line 25561
 HEAP32[$58 >> 2] = $14; //@line 25562
 $59 = $ReallocAsyncCtx7 + 16 | 0; //@line 25563
 HEAP32[$59 >> 2] = $16; //@line 25564
 $60 = $ReallocAsyncCtx7 + 20 | 0; //@line 25565
 HEAP32[$60 >> 2] = $6; //@line 25566
 $61 = $ReallocAsyncCtx7 + 24 | 0; //@line 25567
 HEAP8[$61 >> 0] = $10; //@line 25568
 $62 = $ReallocAsyncCtx7 + 28 | 0; //@line 25569
 HEAP32[$62 >> 2] = $18; //@line 25570
 sp = STACKTOP; //@line 25571
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_471($0) {
 $0 = $0 | 0;
 var $$sroa$0$0$copyload = 0, $12 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 34594
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34596
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34598
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34600
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34602
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34606
 $15 = $2 + 356 | 0; //@line 34609
 $17 = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$15 >> 2] | 0) | 0; //@line 34611
 $$sroa$0$0$copyload = HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) >> 2] | 0; //@line 34614
 $20 = $2 + 360 | 0; //@line 34615
 if ((HEAP32[$20 >> 2] | 0) == 2) {
  _printf(12967, $8) | 0; //@line 34619
  _printf(12994, $12) | 0; //@line 34620
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 34621
  _putchar(10) | 0; //@line 34622
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 360; //@line 34625
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 34626
   HEAP32[$31 >> 2] = $2; //@line 34627
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 34628
   HEAP32[$32 >> 2] = $15; //@line 34629
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 34630
   HEAP32[$33 >> 2] = $20; //@line 34631
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 34632
   HEAP32[$34 >> 2] = $$sroa$0$0$copyload; //@line 34633
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 34634
   HEAP32[$35 >> 2] = $4; //@line 34635
   $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 34636
   HEAP32[$36 >> 2] = $4; //@line 34637
   $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 34638
   HEAP32[$37 >> 2] = $17; //@line 34639
   $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 34640
   HEAP32[$38 >> 2] = $6; //@line 34641
   $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 34642
   HEAP32[$39 >> 2] = $6; //@line 34643
   sp = STACKTOP; //@line 34644
   return;
  }
  ___async_unwind = 0; //@line 34647
  HEAP32[$ReallocAsyncCtx2 >> 2] = 360; //@line 34648
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 34649
  HEAP32[$31 >> 2] = $2; //@line 34650
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 34651
  HEAP32[$32 >> 2] = $15; //@line 34652
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 34653
  HEAP32[$33 >> 2] = $20; //@line 34654
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 34655
  HEAP32[$34 >> 2] = $$sroa$0$0$copyload; //@line 34656
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 34657
  HEAP32[$35 >> 2] = $4; //@line 34658
  $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 34659
  HEAP32[$36 >> 2] = $4; //@line 34660
  $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 34661
  HEAP32[$37 >> 2] = $17; //@line 34662
  $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 34663
  HEAP32[$38 >> 2] = $6; //@line 34664
  $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 34665
  HEAP32[$39 >> 2] = $6; //@line 34666
  sp = STACKTOP; //@line 34667
  return;
 } else {
  $23 = HEAP32[$2 >> 2] | 0; //@line 34670
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 34671
  __ZN7LoRaPHY18put_radio_to_sleepEv($23); //@line 34672
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 359; //@line 34675
   $24 = $ReallocAsyncCtx8 + 4 | 0; //@line 34676
   HEAP32[$24 >> 2] = $2; //@line 34677
   $25 = $ReallocAsyncCtx8 + 8 | 0; //@line 34678
   HEAP32[$25 >> 2] = $15; //@line 34679
   $26 = $ReallocAsyncCtx8 + 12 | 0; //@line 34680
   HEAP32[$26 >> 2] = $20; //@line 34681
   $27 = $ReallocAsyncCtx8 + 16 | 0; //@line 34682
   HEAP32[$27 >> 2] = $$sroa$0$0$copyload; //@line 34683
   $28 = $ReallocAsyncCtx8 + 20 | 0; //@line 34684
   HEAP32[$28 >> 2] = $4; //@line 34685
   $29 = $ReallocAsyncCtx8 + 24 | 0; //@line 34686
   HEAP32[$29 >> 2] = $4; //@line 34687
   $30 = $ReallocAsyncCtx8 + 28 | 0; //@line 34688
   HEAP32[$30 >> 2] = $17; //@line 34689
   sp = STACKTOP; //@line 34690
   return;
  }
  ___async_unwind = 0; //@line 34693
  HEAP32[$ReallocAsyncCtx8 >> 2] = 359; //@line 34694
  $24 = $ReallocAsyncCtx8 + 4 | 0; //@line 34695
  HEAP32[$24 >> 2] = $2; //@line 34696
  $25 = $ReallocAsyncCtx8 + 8 | 0; //@line 34697
  HEAP32[$25 >> 2] = $15; //@line 34698
  $26 = $ReallocAsyncCtx8 + 12 | 0; //@line 34699
  HEAP32[$26 >> 2] = $20; //@line 34700
  $27 = $ReallocAsyncCtx8 + 16 | 0; //@line 34701
  HEAP32[$27 >> 2] = $$sroa$0$0$copyload; //@line 34702
  $28 = $ReallocAsyncCtx8 + 20 | 0; //@line 34703
  HEAP32[$28 >> 2] = $4; //@line 34704
  $29 = $ReallocAsyncCtx8 + 24 | 0; //@line 34705
  HEAP32[$29 >> 2] = $4; //@line 34706
  $30 = $ReallocAsyncCtx8 + 28 | 0; //@line 34707
  HEAP32[$30 >> 2] = $17; //@line 34708
  sp = STACKTOP; //@line 34709
  return;
 }
}
function _main__async_cb_165($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32624
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32626
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32628
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32630
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32632
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32634
 $13 = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 32637
 if ($13 | 0) {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 32641
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 32642
  FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 32643
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 750; //@line 32646
   $17 = $ReallocAsyncCtx + 4 | 0; //@line 32647
   HEAP32[$17 >> 2] = $2; //@line 32648
   $18 = $ReallocAsyncCtx + 8 | 0; //@line 32649
   HEAP32[$18 >> 2] = $4; //@line 32650
   $19 = $ReallocAsyncCtx + 12 | 0; //@line 32651
   HEAP32[$19 >> 2] = $6; //@line 32652
   $20 = $ReallocAsyncCtx + 16 | 0; //@line 32653
   HEAP32[$20 >> 2] = $8; //@line 32654
   sp = STACKTOP; //@line 32655
   return;
  }
  ___async_unwind = 0; //@line 32658
  HEAP32[$ReallocAsyncCtx >> 2] = 750; //@line 32659
  $17 = $ReallocAsyncCtx + 4 | 0; //@line 32660
  HEAP32[$17 >> 2] = $2; //@line 32661
  $18 = $ReallocAsyncCtx + 8 | 0; //@line 32662
  HEAP32[$18 >> 2] = $4; //@line 32663
  $19 = $ReallocAsyncCtx + 12 | 0; //@line 32664
  HEAP32[$19 >> 2] = $6; //@line 32665
  $20 = $ReallocAsyncCtx + 16 | 0; //@line 32666
  HEAP32[$20 >> 2] = $8; //@line 32667
  sp = STACKTOP; //@line 32668
  return;
 }
 $22 = $8 + 4 | 0; //@line 32672
 HEAP32[$22 >> 2] = 0; //@line 32674
 HEAP32[$22 + 4 >> 2] = 0; //@line 32677
 HEAP32[$8 >> 2] = 751; //@line 32678
 $26 = $8 + 12 | 0; //@line 32679
 HEAP32[$26 >> 2] = 10140; //@line 32680
 $27 = HEAP32[5805] | 0; //@line 32681
 if (!$27) {
  $37 = HEAP32[2536] | 0; //@line 32685
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 32686
  FUNCTION_TABLE_vii[$37 & 31](23208, $8); //@line 32687
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 753; //@line 32690
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 32691
   HEAP32[$38 >> 2] = $2; //@line 32692
   $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 32693
   HEAP32[$39 >> 2] = $4; //@line 32694
   $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 32695
   HEAP32[$40 >> 2] = $6; //@line 32696
   $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 32697
   HEAP32[$41 >> 2] = $8; //@line 32698
   $42 = $ReallocAsyncCtx3 + 20 | 0; //@line 32699
   HEAP32[$42 >> 2] = $26; //@line 32700
   sp = STACKTOP; //@line 32701
   return;
  }
  ___async_unwind = 0; //@line 32704
  HEAP32[$ReallocAsyncCtx3 >> 2] = 753; //@line 32705
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 32706
  HEAP32[$38 >> 2] = $2; //@line 32707
  $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 32708
  HEAP32[$39 >> 2] = $4; //@line 32709
  $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 32710
  HEAP32[$40 >> 2] = $6; //@line 32711
  $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 32712
  HEAP32[$41 >> 2] = $8; //@line 32713
  $42 = $ReallocAsyncCtx3 + 20 | 0; //@line 32714
  HEAP32[$42 >> 2] = $26; //@line 32715
  sp = STACKTOP; //@line 32716
  return;
 } else {
  $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 32720
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 32721
  FUNCTION_TABLE_vi[$30 & 1023](23208); //@line 32722
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 752; //@line 32725
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 32726
   HEAP32[$31 >> 2] = $2; //@line 32727
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 32728
   HEAP32[$32 >> 2] = $4; //@line 32729
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 32730
   HEAP32[$33 >> 2] = $6; //@line 32731
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 32732
   HEAP32[$34 >> 2] = $8; //@line 32733
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 32734
   HEAP32[$35 >> 2] = $26; //@line 32735
   sp = STACKTOP; //@line 32736
   return;
  }
  ___async_unwind = 0; //@line 32739
  HEAP32[$ReallocAsyncCtx2 >> 2] = 752; //@line 32740
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 32741
  HEAP32[$31 >> 2] = $2; //@line 32742
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 32743
  HEAP32[$32 >> 2] = $4; //@line 32744
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 32745
  HEAP32[$33 >> 2] = $6; //@line 32746
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 32747
  HEAP32[$34 >> 2] = $8; //@line 32748
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 32749
  HEAP32[$35 >> 2] = $26; //@line 32750
  sp = STACKTOP; //@line 32751
  return;
 }
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv($0) {
 $0 = $0 | 0;
 var $16 = 0, $30 = 0, $31 = 0, $34 = 0, $37 = 0, $38 = 0, $47 = 0, $49 = 0, $54 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx9 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 11757
 STACKTOP = STACKTOP + 32 | 0; //@line 11758
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11758
 $vararg_buffer5 = sp + 24 | 0; //@line 11759
 $vararg_buffer3 = sp + 16 | 0; //@line 11760
 _printf(12967, sp) | 0; //@line 11763
 _printf(13017, sp + 8 | 0) | 0; //@line 11764
 $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11765
 _putchar(10) | 0; //@line 11766
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 378; //@line 11769
  HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 11771
  HEAP32[$AsyncCtx13 + 8 >> 2] = $vararg_buffer3; //@line 11773
  HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer3; //@line 11775
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer5; //@line 11777
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer5; //@line 11779
  sp = STACKTOP; //@line 11780
  STACKTOP = sp; //@line 11781
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 11783
 $7 = HEAP32[$0 + 356 >> 2] | 0; //@line 11785
 $AsyncCtx19 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11787
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($7, $0 + 1056 | 0); //@line 11788
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 379; //@line 11791
  HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 11793
  HEAP32[$AsyncCtx19 + 8 >> 2] = $vararg_buffer3; //@line 11795
  HEAP32[$AsyncCtx19 + 12 >> 2] = $vararg_buffer3; //@line 11797
  HEAP32[$AsyncCtx19 + 16 >> 2] = $vararg_buffer5; //@line 11799
  HEAP32[$AsyncCtx19 + 20 >> 2] = $vararg_buffer5; //@line 11801
  sp = STACKTOP; //@line 11802
  STACKTOP = sp; //@line 11803
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 11805
 $16 = $0 + 1184 | 0; //@line 11808
 HEAP8[$16 >> 0] = HEAP8[$0 + 378 >> 0] | 0; //@line 11809
 HEAP32[$0 + 1188 >> 2] = HEAP32[$0 + 1132 >> 2]; //@line 11813
 HEAP8[$0 + 1200 >> 0] = HEAP8[$0 + 1141 >> 0] | 0; //@line 11817
 HEAP8[$0 + 1201 >> 0] = HEAP8[$0 + 369 >> 0] | 0; //@line 11821
 HEAP32[$0 + 1204 >> 2] = 1; //@line 11823
 $30 = $0 + 1202 | 0; //@line 11827
 HEAP8[$30 >> 0] = (HEAP32[$0 + 360 >> 2] | 0) == 2 & 1; //@line 11829
 $31 = HEAP32[$0 >> 2] | 0; //@line 11830
 $34 = HEAP32[(HEAP32[$31 >> 2] | 0) + 24 >> 2] | 0; //@line 11833
 $37 = (__ZN11LoRaMacMcps14get_indicationEv($0 + 288 | 0) | 0) + 10 | 0; //@line 11836
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 11837
 $38 = FUNCTION_TABLE_iiii[$34 & 15]($31, $16, $37) | 0; //@line 11838
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 380; //@line 11841
  HEAP32[$AsyncCtx + 4 >> 2] = $30; //@line 11843
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 11845
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer3; //@line 11847
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 11849
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer5; //@line 11851
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer5; //@line 11853
  HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 11855
  sp = STACKTOP; //@line 11856
  STACKTOP = sp; //@line 11857
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11859
 if (!$38) {
  STACKTOP = sp; //@line 11861
  return;
 }
 $47 = (HEAP8[$30 >> 0] | 0) != 0; //@line 11864
 $49 = HEAP32[$0 + 1108 >> 2] | 0; //@line 11866
 _printf(12967, $vararg_buffer3) | 0; //@line 11867
 _printf(13043, $vararg_buffer5) | 0; //@line 11868
 $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11869
 _putchar(10) | 0; //@line 11870
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 381; //@line 11873
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 11875
  HEAP8[$AsyncCtx9 + 8 >> 0] = $47 & 1; //@line 11878
  HEAP32[$AsyncCtx9 + 12 >> 2] = $49; //@line 11880
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 11882
  sp = STACKTOP; //@line 11883
  STACKTOP = sp; //@line 11884
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 11886
 $54 = HEAP32[$0 >> 2] | 0; //@line 11887
 $AsyncCtx16 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11888
 __ZN7LoRaPHY15setup_rx_windowEbj($54, $47, $49); //@line 11889
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 382; //@line 11892
  HEAP32[$AsyncCtx16 + 4 >> 2] = $0; //@line 11894
  sp = STACKTOP; //@line 11895
  STACKTOP = sp; //@line 11896
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 11898
 HEAP32[$0 + 364 >> 2] = 1; //@line 11900
 STACKTOP = sp; //@line 11901
 return;
}
function _ticker_read_us__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $58 = 0, $59 = 0, $65 = 0, $66 = 0, $67 = 0, $76 = 0, $77 = 0, $78 = 0, $80 = 0, $84 = 0, $85 = 0, $91 = 0, $92 = 0, $93 = 0, $95 = 0, $99 = 0, $AsyncRetVal = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14
 if (($AsyncRetVal | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $99 = HEAP32[$2 >> 2] | 0; //@line 20
  $100 = $99 + 48 | 0; //@line 21
  $101 = $100; //@line 22
  $102 = $101; //@line 23
  $103 = HEAP32[$102 >> 2] | 0; //@line 24
  $104 = $101 + 4 | 0; //@line 25
  $105 = $104; //@line 26
  $106 = HEAP32[$105 >> 2] | 0; //@line 27
  $107 = ___async_retval; //@line 28
  $108 = $107; //@line 29
  $109 = $108; //@line 30
  HEAP32[$109 >> 2] = $103; //@line 31
  $110 = $108 + 4 | 0; //@line 32
  $111 = $110; //@line 33
  HEAP32[$111 >> 2] = $106; //@line 34
  return;
 }
 $10 = $4 + 32 | 0; //@line 37
 $15 = $AsyncRetVal - (HEAP32[$10 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 42
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 43
 $17 = HEAP32[$4 + 8 >> 2] | 0; //@line 45
 L5 : do {
  if (($17 | 0) < 1e6) {
   switch ($17 | 0) {
   case 32768:
    {
     break;
    }
   default:
    {
     label = 6; //@line 54
     break L5;
    }
   }
   $18 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 58
   $20 = _bitshift64Lshr($18 | 0, tempRet0 | 0, 15) | 0; //@line 60
   $21 = tempRet0; //@line 61
   $24 = $4 + 40 | 0; //@line 64
   $25 = $24; //@line 65
   $31 = _i64Add(HEAP32[$25 >> 2] | 0, HEAP32[$25 + 4 >> 2] | 0, $15 * 1e6 & 32704 | 0, 0) | 0; //@line 71
   $32 = tempRet0; //@line 72
   $33 = $24; //@line 73
   HEAP32[$33 >> 2] = $31; //@line 75
   HEAP32[$33 + 4 >> 2] = $32; //@line 78
   if ($32 >>> 0 < 0 | ($32 | 0) == 0 & $31 >>> 0 < 32768) {
    $91 = $20; //@line 85
    $92 = $21; //@line 85
   } else {
    $42 = _i64Add($20 | 0, $21 | 0, 1, 0) | 0; //@line 87
    $43 = tempRet0; //@line 88
    $44 = _i64Add($31 | 0, $32 | 0, -32768, -1) | 0; //@line 89
    $46 = $24; //@line 91
    HEAP32[$46 >> 2] = $44; //@line 93
    HEAP32[$46 + 4 >> 2] = tempRet0; //@line 96
    $91 = $42; //@line 97
    $92 = $43; //@line 97
   }
  } else {
   switch ($17 | 0) {
   case 1e6:
    {
     $91 = $15; //@line 102
     $92 = 0; //@line 102
     break;
    }
   default:
    {
     label = 6; //@line 106
    }
   }
  }
 } while (0);
 if ((label | 0) == 6) {
  $50 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 112
  $51 = tempRet0; //@line 113
  $52 = ___udivdi3($50 | 0, $51 | 0, $17 | 0, 0) | 0; //@line 114
  $53 = tempRet0; //@line 115
  $54 = ___muldi3($52 | 0, $53 | 0, $17 | 0, 0) | 0; //@line 116
  $56 = _i64Subtract($50 | 0, $51 | 0, $54 | 0, tempRet0 | 0) | 0; //@line 118
  $58 = $4 + 40 | 0; //@line 120
  $59 = $58; //@line 121
  $65 = _i64Add($56 | 0, tempRet0 | 0, HEAP32[$59 >> 2] | 0, HEAP32[$59 + 4 >> 2] | 0) | 0; //@line 127
  $66 = tempRet0; //@line 128
  $67 = $58; //@line 129
  HEAP32[$67 >> 2] = $65; //@line 131
  HEAP32[$67 + 4 >> 2] = $66; //@line 134
  if ($66 >>> 0 < 0 | ($66 | 0) == 0 & $65 >>> 0 < $17 >>> 0) {
   $91 = $52; //@line 141
   $92 = $53; //@line 141
  } else {
   $76 = _i64Add($52 | 0, $53 | 0, 1, 0) | 0; //@line 143
   $77 = tempRet0; //@line 144
   $78 = _i64Subtract($65 | 0, $66 | 0, $17 | 0, 0) | 0; //@line 145
   $80 = $58; //@line 147
   HEAP32[$80 >> 2] = $78; //@line 149
   HEAP32[$80 + 4 >> 2] = tempRet0; //@line 152
   $91 = $76; //@line 153
   $92 = $77; //@line 153
  }
 }
 $84 = $4 + 48 | 0; //@line 156
 $85 = $84; //@line 157
 $93 = _i64Add(HEAP32[$85 >> 2] | 0, HEAP32[$85 + 4 >> 2] | 0, $91 | 0, $92 | 0) | 0; //@line 163
 $95 = $84; //@line 165
 HEAP32[$95 >> 2] = $93; //@line 167
 HEAP32[$95 + 4 >> 2] = tempRet0; //@line 170
 $99 = HEAP32[$2 >> 2] | 0; //@line 171
 $100 = $99 + 48 | 0; //@line 172
 $101 = $100; //@line 173
 $102 = $101; //@line 174
 $103 = HEAP32[$102 >> 2] | 0; //@line 175
 $104 = $101 + 4 | 0; //@line 176
 $105 = $104; //@line 177
 $106 = HEAP32[$105 >> 2] | 0; //@line 178
 $107 = ___async_retval; //@line 179
 $108 = $107; //@line 180
 $109 = $108; //@line 181
 HEAP32[$109 >> 2] = $103; //@line 182
 $110 = $108 + 4 | 0; //@line 183
 $111 = $110; //@line 184
 HEAP32[$111 >> 2] = $106; //@line 185
 return;
}
function __ZN14LoRaMacCommand15add_mac_commandEhhh($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $15 = 0, $25 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $72 = 0, $73 = 0, $80 = 0, $81 = 0, $87 = 0, $88 = 0;
 $5 = HEAP8[$0 + 3 >> 0] | 0; //@line 20352
 L1 : do {
  switch ($1 << 24 >> 24) {
  case 2:
   {
    $6 = $0 + 2 | 0; //@line 20356
    $7 = HEAP8[$6 >> 0] | 0; //@line 20357
    if (($7 & 255) < (-128 - $5 & 255)) {
     HEAP8[$6 >> 0] = $7 + 1 << 24 >> 24; //@line 20364
     HEAP8[($7 & 255) + ($0 + 4) >> 0] = 2; //@line 20365
     break L1;
    } else {
     $$0 = -1e3; //@line 20368
     return $$0 | 0; //@line 20369
    }
    break;
   }
  case 3:
   {
    $13 = $0 + 2 | 0; //@line 20374
    $14 = HEAP8[$13 >> 0] | 0; //@line 20375
    $15 = $14 & 255; //@line 20376
    if (((-128 - $5 & 255) + -1 | 0) > ($15 | 0)) {
     HEAP8[$0 + 4 + $15 >> 0] = 3; //@line 20387
     HEAP8[$13 >> 0] = $14 + 2 << 24 >> 24; //@line 20388
     HEAP8[($14 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 20389
     break L1;
    } else {
     $$0 = -1e3; //@line 20392
     return $$0 | 0; //@line 20393
    }
    break;
   }
  case 4:
   {
    $25 = $0 + 2 | 0; //@line 20398
    $26 = HEAP8[$25 >> 0] | 0; //@line 20399
    if (($26 & 255) < (-128 - $5 & 255)) {
     HEAP8[$25 >> 0] = $26 + 1 << 24 >> 24; //@line 20406
     HEAP8[($26 & 255) + ($0 + 4) >> 0] = 4; //@line 20407
     break L1;
    } else {
     $$0 = -1e3; //@line 20410
     return $$0 | 0; //@line 20411
    }
    break;
   }
  case 5:
   {
    $32 = $0 + 2 | 0; //@line 20416
    $33 = HEAP8[$32 >> 0] | 0; //@line 20417
    $34 = $33 & 255; //@line 20418
    if (((-128 - $5 & 255) + -1 | 0) > ($34 | 0)) {
     HEAP8[$0 + 4 + $34 >> 0] = 5; //@line 20426
     HEAP8[$32 >> 0] = $33 + 2 << 24 >> 24; //@line 20428
     HEAP8[($33 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 20431
     HEAP8[$0 + 1 >> 0] = 1; //@line 20433
     break L1;
    } else {
     $$0 = -1e3; //@line 20436
     return $$0 | 0; //@line 20437
    }
    break;
   }
  case 6:
   {
    $45 = $0 + 2 | 0; //@line 20442
    $46 = HEAP8[$45 >> 0] | 0; //@line 20443
    $47 = $46 & 255; //@line 20444
    if (((-128 - $5 & 255) + -2 | 0) > ($47 | 0)) {
     HEAP8[$0 + 4 + $47 >> 0] = 6; //@line 20452
     HEAP8[($46 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 20456
     HEAP8[$45 >> 0] = $46 + 3 << 24 >> 24; //@line 20458
     HEAP8[($46 + 2 & 255) + ($0 + 4) >> 0] = $3; //@line 20461
     break L1;
    } else {
     $$0 = -1e3; //@line 20464
     return $$0 | 0; //@line 20465
    }
    break;
   }
  case 7:
   {
    $60 = $0 + 2 | 0; //@line 20470
    $61 = HEAP8[$60 >> 0] | 0; //@line 20471
    $62 = $61 & 255; //@line 20472
    if (((-128 - $5 & 255) + -1 | 0) > ($62 | 0)) {
     HEAP8[$0 + 4 + $62 >> 0] = 7; //@line 20483
     HEAP8[$60 >> 0] = $61 + 2 << 24 >> 24; //@line 20484
     HEAP8[($61 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 20485
     break L1;
    } else {
     $$0 = -1e3; //@line 20488
     return $$0 | 0; //@line 20489
    }
    break;
   }
  case 8:
   {
    $72 = $0 + 2 | 0; //@line 20494
    $73 = HEAP8[$72 >> 0] | 0; //@line 20495
    if (($73 & 255) < (-128 - $5 & 255)) {
     HEAP8[$72 >> 0] = $73 + 1 << 24 >> 24; //@line 20503
     HEAP8[($73 & 255) + ($0 + 4) >> 0] = 8; //@line 20504
     HEAP8[$0 + 1 >> 0] = 1; //@line 20505
     break L1;
    } else {
     $$0 = -1e3; //@line 20508
     return $$0 | 0; //@line 20509
    }
    break;
   }
  case 9:
   {
    $80 = $0 + 2 | 0; //@line 20514
    $81 = HEAP8[$80 >> 0] | 0; //@line 20515
    if (($81 & 255) < (-128 - $5 & 255)) {
     HEAP8[$80 >> 0] = $81 + 1 << 24 >> 24; //@line 20522
     HEAP8[($81 & 255) + ($0 + 4) >> 0] = 9; //@line 20523
     break L1;
    } else {
     $$0 = -1e3; //@line 20526
     return $$0 | 0; //@line 20527
    }
    break;
   }
  case 10:
   {
    $87 = $0 + 2 | 0; //@line 20532
    $88 = HEAP8[$87 >> 0] | 0; //@line 20533
    if (($88 & 255) < (-128 - $5 & 255)) {
     HEAP8[($88 & 255) + ($0 + 4) >> 0] = 10; //@line 20540
     HEAP8[$87 >> 0] = $88 + 2 << 24 >> 24; //@line 20542
     HEAP8[($88 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 20545
     HEAP8[$0 + 1 >> 0] = 1; //@line 20547
     break L1;
    } else {
     $$0 = -1e3; //@line 20550
     return $$0 | 0; //@line 20551
    }
    break;
   }
  default:
   {
    $$0 = -1002; //@line 20556
    return $$0 | 0; //@line 20557
   }
  }
 } while (0);
 HEAP8[$0 >> 0] = 1; //@line 20561
 $$0 = 0; //@line 20562
 return $$0 | 0; //@line 20563
}
function _equeue_cancel($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $$sink$in$in$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $24 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $42 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $56 = 0, $57 = 0, $59 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4856
 if (!$1) {
  return;
 }
 $5 = $0 + 16 | 0; //@line 4863
 $10 = (HEAP32[$0 + 12 >> 2] | 0) + ((1 << HEAP32[$5 >> 2]) + -1 & $1) | 0; //@line 4868
 $11 = $0 + 128 | 0; //@line 4869
 _equeue_mutex_lock($11); //@line 4870
 $12 = $10 + 4 | 0; //@line 4871
 $13 = HEAP8[$12 >> 0] | 0; //@line 4872
 $14 = $13 & 255; //@line 4873
 $15 = HEAP32[$5 >> 2] | 0; //@line 4874
 if (($1 >> $15 | 0) != ($14 | 0)) {
  _equeue_mutex_unlock($11); //@line 4878
  return;
 }
 HEAP32[$10 + 32 >> 2] = 0; //@line 4882
 HEAP32[$10 + 24 >> 2] = -1; //@line 4884
 $24 = (HEAP32[$10 + 20 >> 2] | 0) - (HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 4889
 do {
  if (($24 | 0) >= 0) {
   if (!$24) {
    if ((HEAP8[$10 + 5 >> 0] | 0) != (HEAP8[$0 + 9 >> 0] | 0)) {
     break;
    }
   }
   $32 = $10 + 12 | 0; //@line 4904
   $33 = HEAP32[$32 >> 2] | 0; //@line 4905
   $35 = $10 + 8 | 0; //@line 4907
   $36 = HEAP32[$35 >> 2] | 0; //@line 4908
   $37 = $33; //@line 4909
   if (!$33) {
    $44 = $10 + 16 | 0; //@line 4911
    HEAP32[HEAP32[$44 >> 2] >> 2] = $36; //@line 4913
    $46 = HEAP32[$35 >> 2] | 0; //@line 4914
    if ($46 | 0) {
     $$sink$in$in$i = $44; //@line 4917
     $49 = $46; //@line 4917
     label = 13; //@line 4918
    }
   } else {
    $38 = $33 + 8 | 0; //@line 4921
    HEAP32[$38 >> 2] = $36; //@line 4922
    if ($36 | 0) {
     HEAP32[$36 + 16 >> 2] = $38; //@line 4927
    }
    $42 = $10 + 16 | 0; //@line 4929
    HEAP32[HEAP32[$42 >> 2] >> 2] = $37; //@line 4931
    $$sink$in$in$i = $42; //@line 4933
    $49 = HEAP32[$32 >> 2] | 0; //@line 4933
    label = 13; //@line 4934
   }
   if ((label | 0) == 13) {
    HEAP32[$49 + 16 >> 2] = HEAP32[$$sink$in$in$i >> 2]; //@line 4939
   }
   HEAP8[$12 >> 0] = (($13 + 1 & 255) << $15 | 0) == 0 ? 1 : $14 + 1 & 255; //@line 4948
   _equeue_mutex_unlock($11); //@line 4949
   $56 = $10 + 36 | 0; //@line 4950
   $57 = $56 + -36 | 0; //@line 4951
   $59 = HEAP32[$56 + -8 >> 2] | 0; //@line 4953
   do {
    if ($59 | 0) {
     $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4957
     FUNCTION_TABLE_vi[$59 & 1023]($56); //@line 4958
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 179; //@line 4961
      HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4963
      HEAP32[$AsyncCtx + 8 >> 2] = $56; //@line 4965
      HEAP32[$AsyncCtx + 12 >> 2] = $57; //@line 4967
      sp = STACKTOP; //@line 4968
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 4971
      break;
     }
    }
   } while (0);
   $64 = $0 + 156 | 0; //@line 4976
   _equeue_mutex_lock($64); //@line 4977
   $65 = $0 + 24 | 0; //@line 4978
   $66 = HEAP32[$65 >> 2] | 0; //@line 4979
   L28 : do {
    if (!$66) {
     $$02329$i$i = $65; //@line 4983
     label = 24; //@line 4984
    } else {
     $68 = HEAP32[$57 >> 2] | 0; //@line 4986
     $$025$i$i = $65; //@line 4987
     $70 = $66; //@line 4987
     while (1) {
      $69 = HEAP32[$70 >> 2] | 0; //@line 4989
      if ($69 >>> 0 >= $68 >>> 0) {
       break;
      }
      $72 = $70 + 8 | 0; //@line 4994
      $73 = HEAP32[$72 >> 2] | 0; //@line 4995
      if (!$73) {
       $$02329$i$i = $72; //@line 4998
       label = 24; //@line 4999
       break L28;
      } else {
       $$025$i$i = $72; //@line 5002
       $70 = $73; //@line 5002
      }
     }
     if (($69 | 0) == ($68 | 0)) {
      HEAP32[$56 + -24 >> 2] = $70; //@line 5008
      $$02330$i$i = $$025$i$i; //@line 5011
      $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 5011
     } else {
      $$02329$i$i = $$025$i$i; //@line 5013
      label = 24; //@line 5014
     }
    }
   } while (0);
   if ((label | 0) == 24) {
    HEAP32[$56 + -24 >> 2] = 0; //@line 5020
    $$02330$i$i = $$02329$i$i; //@line 5021
    $$sink$in$i$i = $$02329$i$i; //@line 5021
   }
   HEAP32[$56 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 5025
   HEAP32[$$02330$i$i >> 2] = $57; //@line 5026
   _equeue_mutex_unlock($64); //@line 5027
   return;
  }
 } while (0);
 _equeue_mutex_unlock($11); //@line 5031
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $22 = 0, $3 = 0, $31 = 0, $32 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $43 = 0, $5 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 27033
 STACKTOP = STACKTOP + 16 | 0; //@line 27034
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 27034
 $3 = sp; //@line 27035
 $4 = HEAP32[$0 >> 2] | 0; //@line 27036
 $5 = $1 + 12 | 0; //@line 27037
 $6 = HEAP32[$5 >> 2] | 0; //@line 27038
 do {
  if (!$6) {
   $16 = 0; //@line 27042
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 27045
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 27046
   FUNCTION_TABLE_vii[$9 & 31]($3, $1); //@line 27047
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 662; //@line 27050
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 27052
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 27054
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 27056
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 27058
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 27060
    sp = STACKTOP; //@line 27061
    STACKTOP = sp; //@line 27062
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 27064
    $16 = HEAP32[$5 >> 2] | 0; //@line 27066
    break;
   }
  }
 } while (0);
 $15 = $3 + 12 | 0; //@line 27071
 HEAP32[$15 >> 2] = $16; //@line 27072
 $17 = _equeue_alloc($4, 16) | 0; //@line 27073
 do {
  if (!$17) {
   $$0$i = 0; //@line 27077
  } else {
   $19 = HEAP32[$15 >> 2] | 0; //@line 27079
   do {
    if (!$19) {
     $31 = 0; //@line 27083
    } else {
     $22 = HEAP32[$19 + 4 >> 2] | 0; //@line 27086
     $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 27087
     FUNCTION_TABLE_vii[$22 & 31]($17, $3); //@line 27088
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 663; //@line 27091
      HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 27093
      HEAP32[$AsyncCtx2 + 8 >> 2] = $17; //@line 27095
      HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 27097
      HEAP32[$AsyncCtx2 + 16 >> 2] = $4; //@line 27099
      HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 27101
      HEAP32[$AsyncCtx2 + 24 >> 2] = $15; //@line 27103
      HEAP32[$AsyncCtx2 + 28 >> 2] = $3; //@line 27105
      sp = STACKTOP; //@line 27106
      STACKTOP = sp; //@line 27107
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 27109
      $31 = HEAP32[$15 >> 2] | 0; //@line 27111
      break;
     }
    }
   } while (0);
   HEAP32[$17 + 12 >> 2] = $31; //@line 27117
   _equeue_event_delay($17, $2); //@line 27118
   _equeue_event_dtor($17, 370); //@line 27119
   $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 27120
   $32 = _equeue_post($4, 371, $17) | 0; //@line 27121
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 664; //@line 27124
    HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 27126
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 27128
    HEAP32[$AsyncCtx9 + 12 >> 2] = $3; //@line 27130
    sp = STACKTOP; //@line 27131
    STACKTOP = sp; //@line 27132
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 27134
    $$0$i = $32; //@line 27135
    break;
   }
  }
 } while (0);
 $36 = $1 + 16 | 0; //@line 27140
 HEAP32[$36 >> 2] = $$0$i; //@line 27141
 $37 = HEAP32[$15 >> 2] | 0; //@line 27142
 do {
  if (!$37) {
   $43 = $$0$i; //@line 27146
  } else {
   $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 27149
   $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 27150
   FUNCTION_TABLE_vi[$40 & 1023]($3); //@line 27151
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 665; //@line 27154
    HEAP32[$AsyncCtx6 + 4 >> 2] = $36; //@line 27156
    sp = STACKTOP; //@line 27157
    STACKTOP = sp; //@line 27158
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 27160
    $43 = HEAP32[$36 >> 2] | 0; //@line 27162
    break;
   }
  }
 } while (0);
 if ($43 | 0) {
  STACKTOP = sp; //@line 27169
  return;
 }
 $AsyncCtx13 = _emscripten_alloc_async_context(4, sp) | 0; //@line 27171
 _mbed_assert_internal(13734, 13752, 57); //@line 27172
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 666; //@line 27175
  sp = STACKTOP; //@line 27176
  STACKTOP = sp; //@line 27177
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 27179
 STACKTOP = sp; //@line 27180
 return;
}
function _gcm_mult($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07475 = 0, $100 = 0, $101 = 0, $103 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $120 = 0, $126 = 0, $130 = 0, $134 = 0, $140 = 0, $144 = 0, $148 = 0, $15 = 0, $154 = 0, $158 = 0, $162 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $46 = 0, $51 = 0, $6 = 0, $60 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $88 = 0, $92 = 0, $94 = 0;
 $4 = HEAP8[$1 + 15 >> 0] | 0; //@line 4112
 $6 = $4 & 15; //@line 4114
 $8 = $0 + 200 + ($6 << 3) | 0; //@line 4116
 $15 = $0 + 72 + ($6 << 3) | 0; //@line 4123
 $$07475 = 15; //@line 4129
 $22 = $4; //@line 4129
 $27 = HEAP32[$15 >> 2] | 0; //@line 4129
 $28 = HEAP32[$8 >> 2] | 0; //@line 4129
 $29 = HEAP32[$8 + 4 >> 2] | 0; //@line 4129
 $32 = HEAP32[$15 + 4 >> 2] | 0; //@line 4129
 while (1) {
  if (($$07475 | 0) == 15) {
   $69 = $27; //@line 4134
   $70 = $28; //@line 4134
   $71 = $29; //@line 4134
   $74 = $32; //@line 4134
  } else {
   $25 = $22 & 15; //@line 4137
   $30 = _bitshift64Shl($28 | 0, $29 | 0, 60) | 0; //@line 4139
   $31 = tempRet0; //@line 4140
   $33 = _bitshift64Lshr($27 | 0, $32 | 0, 4) | 0; //@line 4141
   $36 = tempRet0 | $31; //@line 4144
   $37 = _bitshift64Lshr($28 | 0, $29 | 0, 4) | 0; //@line 4145
   $38 = tempRet0; //@line 4146
   $40 = 208 + (($27 & 15) << 3) | 0; //@line 4148
   $46 = _bitshift64Shl(HEAP32[$40 >> 2] | 0, HEAP32[$40 + 4 >> 2] | 0, 48) | 0; //@line 4154
   $51 = $0 + 200 + ($25 << 3) | 0; //@line 4159
   $60 = $0 + 72 + ($25 << 3) | 0; //@line 4168
   $69 = HEAP32[$60 >> 2] ^ ($33 | $30); //@line 4176
   $70 = $46 ^ $37 ^ HEAP32[$51 >> 2]; //@line 4176
   $71 = tempRet0 ^ $38 ^ HEAP32[$51 + 4 >> 2]; //@line 4176
   $74 = HEAP32[$60 + 4 >> 2] ^ $36; //@line 4176
  }
  $72 = _bitshift64Shl($70 | 0, $71 | 0, 60) | 0; //@line 4179
  $73 = tempRet0; //@line 4180
  $75 = _bitshift64Lshr($69 | 0, $74 | 0, 4) | 0; //@line 4181
  $78 = tempRet0 | $73; //@line 4184
  $79 = _bitshift64Lshr($70 | 0, $71 | 0, 4) | 0; //@line 4185
  $80 = tempRet0; //@line 4186
  $82 = 208 + (($69 & 15) << 3) | 0; //@line 4188
  $88 = _bitshift64Shl(HEAP32[$82 >> 2] | 0, HEAP32[$82 + 4 >> 2] | 0, 48) | 0; //@line 4194
  $92 = ($22 & 255) >>> 4 & 255; //@line 4198
  $94 = $0 + 200 + ($92 << 3) | 0; //@line 4200
  $100 = $88 ^ $79 ^ HEAP32[$94 >> 2]; //@line 4206
  $101 = tempRet0 ^ $80 ^ HEAP32[$94 + 4 >> 2]; //@line 4207
  $103 = $0 + 72 + ($92 << 3) | 0; //@line 4209
  $109 = HEAP32[$103 >> 2] ^ ($75 | $72); //@line 4215
  $110 = HEAP32[$103 + 4 >> 2] ^ $78; //@line 4216
  $111 = $$07475 + -1 | 0; //@line 4217
  if (($$07475 | 0) <= 0) {
   break;
  }
  $$07475 = $111; //@line 4224
  $22 = HEAP8[$1 + $111 >> 0] | 0; //@line 4224
  $27 = $109; //@line 4224
  $28 = $100; //@line 4224
  $29 = $101; //@line 4224
  $32 = $110; //@line 4224
 }
 $113 = _bitshift64Lshr($100 | 0, $101 | 0, 56) | 0; //@line 4226
 HEAP8[$2 >> 0] = $113; //@line 4229
 $116 = _bitshift64Lshr($100 | 0, $101 | 0, 48) | 0; //@line 4230
 HEAP8[$2 + 1 >> 0] = $116; //@line 4234
 $120 = _bitshift64Lshr($100 | 0, $101 | 0, 40) | 0; //@line 4235
 HEAP8[$2 + 2 >> 0] = $120; //@line 4239
 HEAP8[$2 + 3 >> 0] = $101; //@line 4242
 $126 = _bitshift64Lshr($100 | 0, $101 | 0, 24) | 0; //@line 4243
 HEAP8[$2 + 4 >> 0] = $126; //@line 4247
 $130 = _bitshift64Lshr($100 | 0, $101 | 0, 16) | 0; //@line 4248
 HEAP8[$2 + 5 >> 0] = $130; //@line 4252
 $134 = _bitshift64Lshr($100 | 0, $101 | 0, 8) | 0; //@line 4253
 HEAP8[$2 + 6 >> 0] = $134; //@line 4257
 HEAP8[$2 + 7 >> 0] = $100; //@line 4260
 $140 = _bitshift64Lshr($109 | 0, $110 | 0, 56) | 0; //@line 4261
 HEAP8[$2 + 8 >> 0] = $140; //@line 4265
 $144 = _bitshift64Lshr($109 | 0, $110 | 0, 48) | 0; //@line 4266
 HEAP8[$2 + 9 >> 0] = $144; //@line 4270
 $148 = _bitshift64Lshr($109 | 0, $110 | 0, 40) | 0; //@line 4271
 HEAP8[$2 + 10 >> 0] = $148; //@line 4275
 HEAP8[$2 + 11 >> 0] = $110; //@line 4278
 $154 = _bitshift64Lshr($109 | 0, $110 | 0, 24) | 0; //@line 4279
 HEAP8[$2 + 12 >> 0] = $154; //@line 4283
 $158 = _bitshift64Lshr($109 | 0, $110 | 0, 16) | 0; //@line 4284
 HEAP8[$2 + 13 >> 0] = $158; //@line 4288
 $162 = _bitshift64Lshr($109 | 0, $110 | 0, 8) | 0; //@line 4289
 HEAP8[$2 + 14 >> 0] = $162; //@line 4293
 HEAP8[$2 + 15 >> 0] = $109; //@line 4296
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_478($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $2 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $47 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 35370
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35372
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35374
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35376
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35378
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35380
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 35382
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 35384
 HEAP32[$2 + 364 >> 2] = 2; //@line 35388
 if (HEAP8[$2 + 371 >> 0] | 0) {
  $21 = HEAP32[$4 >> 2] | 0; //@line 35393
  $24 = HEAP32[$2 + 972 >> 2] | 0; //@line 35396
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 35397
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $2 + 1036 | 0, $24); //@line 35398
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 364; //@line 35401
   $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 35402
   HEAP32[$25 >> 2] = $6; //@line 35403
   $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 35404
   HEAP32[$26 >> 2] = $2; //@line 35405
   $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 35406
   HEAP32[$27 >> 2] = $4; //@line 35407
   $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 35408
   HEAP32[$28 >> 2] = $8; //@line 35409
   $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 35410
   HEAP32[$29 >> 2] = $10; //@line 35411
   $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 35412
   HEAP32[$30 >> 2] = $12; //@line 35413
   $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 35414
   HEAP32[$31 >> 2] = $14; //@line 35415
   sp = STACKTOP; //@line 35416
   return;
  }
  ___async_unwind = 0; //@line 35419
  HEAP32[$ReallocAsyncCtx7 >> 2] = 364; //@line 35420
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 35421
  HEAP32[$25 >> 2] = $6; //@line 35422
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 35423
  HEAP32[$26 >> 2] = $2; //@line 35424
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 35425
  HEAP32[$27 >> 2] = $4; //@line 35426
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 35427
  HEAP32[$28 >> 2] = $8; //@line 35428
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 35429
  HEAP32[$29 >> 2] = $10; //@line 35430
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 35431
  HEAP32[$30 >> 2] = $12; //@line 35432
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 35433
  HEAP32[$31 >> 2] = $14; //@line 35434
  sp = STACKTOP; //@line 35435
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 35441
 $35 = $2 + 944 | 0; //@line 35442
 $36 = HEAP8[$35 >> 0] | 0; //@line 35443
 if (!($36 << 24 >> 24)) {
  HEAP8[$35 >> 0] = 1; //@line 35446
  $39 = 1; //@line 35447
 } else {
  $39 = $36; //@line 35449
 }
 HEAP8[$35 >> 0] = $39 | 32; //@line 35452
 HEAP8[$2 + 376 >> 0] = ($8 | 0) == 0 & (HEAP8[$2 + 944 >> 0] & 8) != 0 & 1; //@line 35461
 $47 = HEAP8[$2 + 378 >> 0] | 0; //@line 35463
 HEAP8[$2 + 379 >> 0] = $47; //@line 35465
 HEAP8[$10 >> 0] = $47; //@line 35466
 HEAP8[$12 + 1 >> 0] = HEAP8[$2 + 372 >> 0] | 0; //@line 35470
 HEAP32[$12 + 4 >> 2] = $14; //@line 35472
 $53 = HEAP32[$2 >> 2] | 0; //@line 35473
 $56 = HEAP32[(HEAP32[$53 >> 2] | 0) + 12 >> 2] | 0; //@line 35476
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 35477
 FUNCTION_TABLE_vii[$56 & 31]($53, $12); //@line 35478
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 35481
  $57 = $ReallocAsyncCtx + 4 | 0; //@line 35482
  HEAP32[$57 >> 2] = $2; //@line 35483
  $58 = $ReallocAsyncCtx + 8 | 0; //@line 35484
  HEAP32[$58 >> 2] = $14; //@line 35485
  $59 = $ReallocAsyncCtx + 12 | 0; //@line 35486
  HEAP32[$59 >> 2] = $4; //@line 35487
  $60 = $ReallocAsyncCtx + 16 | 0; //@line 35488
  HEAP32[$60 >> 2] = $10; //@line 35489
  sp = STACKTOP; //@line 35490
  return;
 }
 ___async_unwind = 0; //@line 35493
 HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 35494
 $57 = $ReallocAsyncCtx + 4 | 0; //@line 35495
 HEAP32[$57 >> 2] = $2; //@line 35496
 $58 = $ReallocAsyncCtx + 8 | 0; //@line 35497
 HEAP32[$58 >> 2] = $14; //@line 35498
 $59 = $ReallocAsyncCtx + 12 | 0; //@line 35499
 HEAP32[$59 >> 2] = $4; //@line 35500
 $60 = $ReallocAsyncCtx + 16 | 0; //@line 35501
 HEAP32[$60 >> 2] = $10; //@line 35502
 sp = STACKTOP; //@line 35503
 return;
}
function _mbedtls_aes_setkey_dec($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$02$i$i = 0, $$031$i$i = 0, $$043$lcssa = 0, $$04353 = 0, $$04555$in = 0, $$051 = 0, $$054 = 0, $$pn$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $128 = 0, $13 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $64 = 0, $8 = 0, $96 = 0, sp = 0, $$04353$looptemp = 0;
 sp = STACKTOP; //@line 27568
 STACKTOP = STACKTOP + 288 | 0; //@line 27569
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 27569
 $3 = sp; //@line 27570
 _memset($3 | 0, 0, 280) | 0; //@line 27571
 $4 = $0 + 8 | 0; //@line 27572
 HEAP32[$0 + 4 >> 2] = $4; //@line 27574
 $6 = _mbedtls_aes_setkey_enc($3, $1, $2) | 0; //@line 27575
 if (!$6) {
  $8 = HEAP32[$3 >> 2] | 0; //@line 27578
  HEAP32[$0 >> 2] = $8; //@line 27579
  $10 = HEAP32[$3 + 4 >> 2] | 0; //@line 27581
  $11 = $8 << 2; //@line 27582
  $12 = $10 + ($11 << 2) | 0; //@line 27583
  $13 = $12 + 4 | 0; //@line 27584
  HEAP32[$4 >> 2] = HEAP32[$12 >> 2]; //@line 27587
  $16 = $13 + 4 | 0; //@line 27588
  HEAP32[$0 + 12 >> 2] = HEAP32[$13 >> 2]; //@line 27591
  $19 = $16 + 4 | 0; //@line 27592
  HEAP32[$0 + 16 >> 2] = HEAP32[$16 >> 2]; //@line 27595
  $22 = $19 + 4 | 0; //@line 27596
  $24 = $0 + 24 | 0; //@line 27598
  HEAP32[$0 + 20 >> 2] = HEAP32[$19 >> 2]; //@line 27599
  $$051 = $22 + -32 | 0; //@line 27600
  if (($8 | 0) > 1) {
   $26 = ~$8; //@line 27603
   $31 = $11 + -4 - ($8 + (($26 | 0) > -3 ? $26 : -3) << 2) | 0; //@line 27609
   $$04353 = $24; //@line 27610
   $$04555$in = $8; //@line 27610
   $$054 = $$051; //@line 27610
   while (1) {
    $$04353$looptemp = $$04353;
    $$04353 = $$04353 + 16 | 0; //@line 27613
    $32 = HEAP32[$$054 >> 2] | 0; //@line 27614
    HEAP32[$$04353$looptemp >> 2] = HEAP32[2324 + ((HEAPU8[13857 + ($32 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13857 + ($32 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13857 + ($32 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13857 + ($32 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 27645
    $64 = HEAP32[$$054 + 4 >> 2] | 0; //@line 27647
    HEAP32[$$04353$looptemp + 4 >> 2] = HEAP32[2324 + ((HEAPU8[13857 + ($64 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13857 + ($64 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13857 + ($64 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13857 + ($64 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 27678
    $96 = HEAP32[$$054 + 8 >> 2] | 0; //@line 27680
    HEAP32[$$04353$looptemp + 8 >> 2] = HEAP32[2324 + ((HEAPU8[13857 + ($96 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13857 + ($96 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13857 + ($96 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13857 + ($96 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 27711
    $128 = HEAP32[$$054 + 12 >> 2] | 0; //@line 27713
    HEAP32[$$04353$looptemp + 12 >> 2] = HEAP32[2324 + ((HEAPU8[13857 + ($128 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13857 + ($128 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13857 + ($128 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13857 + ($128 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 27743
    $$054 = $$054 + -16 | 0; //@line 27744
    if (($$04555$in | 0) <= 2) {
     break;
    } else {
     $$04555$in = $$04555$in + -1 | 0; //@line 27747
    }
   }
   $$0$lcssa = $$054; //@line 27753
   $$043$lcssa = $$04353; //@line 27753
   $$pn$lcssa = $10 + ($31 << 2) | 0; //@line 27753
  } else {
   $$0$lcssa = $$051; //@line 27755
   $$043$lcssa = $24; //@line 27755
   $$pn$lcssa = $22; //@line 27755
  }
  HEAP32[$$043$lcssa >> 2] = HEAP32[$$0$lcssa >> 2]; //@line 27760
  HEAP32[$$043$lcssa + 4 >> 2] = HEAP32[$$pn$lcssa + -28 >> 2]; //@line 27764
  HEAP32[$$043$lcssa + 8 >> 2] = HEAP32[$$pn$lcssa + -24 >> 2]; //@line 27768
  HEAP32[$$043$lcssa + 12 >> 2] = HEAP32[$$pn$lcssa + -20 >> 2]; //@line 27770
  $$02$i$i = $3; //@line 27771
  $$031$i$i = 280; //@line 27771
 } else {
  $$02$i$i = $3; //@line 27773
  $$031$i$i = 280; //@line 27773
 }
 while (1) {
  $$031$i$i = $$031$i$i + -1 | 0; //@line 27776
  HEAP8[$$02$i$i >> 0] = 0; //@line 27778
  if (!$$031$i$i) {
   break;
  } else {
   $$02$i$i = $$02$i$i + 1 | 0; //@line 27783
  }
 }
 STACKTOP = sp; //@line 27786
 return $6 | 0; //@line 27786
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_475($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 34923
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34925
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34927
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34929
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34931
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34933
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34935
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34937
 if ((HEAP32[$2 >> 2] | 0) != 2) {
  $17 = HEAP32[$6 >> 2] | 0; //@line 34941
  $19 = $4 + 976 | 0; //@line 34943
  $20 = HEAP32[$19 >> 2] | 0; //@line 34944
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 34945
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($17, $4 + 1056 | 0, $20); //@line 34946
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 365; //@line 34949
   $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 34950
   HEAP32[$21 >> 2] = $2; //@line 34951
   $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 34952
   HEAP32[$22 >> 2] = $19; //@line 34953
   $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 34954
   HEAP32[$23 >> 2] = $6; //@line 34955
   $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 34956
   HEAP32[$24 >> 2] = $4; //@line 34957
   $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 34958
   HEAP32[$25 >> 2] = $8; //@line 34959
   $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 34960
   HEAP32[$26 >> 2] = $10; //@line 34961
   $27 = $ReallocAsyncCtx6 + 28 | 0; //@line 34962
   HEAP32[$27 >> 2] = $12; //@line 34963
   $28 = $ReallocAsyncCtx6 + 32 | 0; //@line 34964
   HEAP32[$28 >> 2] = $14; //@line 34965
   sp = STACKTOP; //@line 34966
   return;
  }
  ___async_unwind = 0; //@line 34969
  HEAP32[$ReallocAsyncCtx6 >> 2] = 365; //@line 34970
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 34971
  HEAP32[$21 >> 2] = $2; //@line 34972
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 34973
  HEAP32[$22 >> 2] = $19; //@line 34974
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 34975
  HEAP32[$23 >> 2] = $6; //@line 34976
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 34977
  HEAP32[$24 >> 2] = $4; //@line 34978
  $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 34979
  HEAP32[$25 >> 2] = $8; //@line 34980
  $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 34981
  HEAP32[$26 >> 2] = $10; //@line 34982
  $27 = $ReallocAsyncCtx6 + 28 | 0; //@line 34983
  HEAP32[$27 >> 2] = $12; //@line 34984
  $28 = $ReallocAsyncCtx6 + 32 | 0; //@line 34985
  HEAP32[$28 >> 2] = $14; //@line 34986
  sp = STACKTOP; //@line 34987
  return;
 }
 $29 = HEAP32[$6 >> 2] | 0; //@line 34991
 $31 = HEAP32[$4 + 976 >> 2] | 0; //@line 34993
 $34 = (__ZN7LoRaPHY15get_ack_timeoutEv(HEAP32[$4 >> 2] | 0) | 0) + $31 | 0; //@line 34996
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 34997
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($29, $4 + 1076 | 0, $34); //@line 34998
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 366; //@line 35001
  $35 = $ReallocAsyncCtx5 + 4 | 0; //@line 35002
  HEAP32[$35 >> 2] = $4; //@line 35003
  $36 = $ReallocAsyncCtx5 + 8 | 0; //@line 35004
  HEAP32[$36 >> 2] = $8; //@line 35005
  $37 = $ReallocAsyncCtx5 + 12 | 0; //@line 35006
  HEAP32[$37 >> 2] = $10; //@line 35007
  $38 = $ReallocAsyncCtx5 + 16 | 0; //@line 35008
  HEAP32[$38 >> 2] = $12; //@line 35009
  $39 = $ReallocAsyncCtx5 + 20 | 0; //@line 35010
  HEAP32[$39 >> 2] = $14; //@line 35011
  $40 = $ReallocAsyncCtx5 + 24 | 0; //@line 35012
  HEAP32[$40 >> 2] = $6; //@line 35013
  sp = STACKTOP; //@line 35014
  return;
 }
 ___async_unwind = 0; //@line 35017
 HEAP32[$ReallocAsyncCtx5 >> 2] = 366; //@line 35018
 $35 = $ReallocAsyncCtx5 + 4 | 0; //@line 35019
 HEAP32[$35 >> 2] = $4; //@line 35020
 $36 = $ReallocAsyncCtx5 + 8 | 0; //@line 35021
 HEAP32[$36 >> 2] = $8; //@line 35022
 $37 = $ReallocAsyncCtx5 + 12 | 0; //@line 35023
 HEAP32[$37 >> 2] = $10; //@line 35024
 $38 = $ReallocAsyncCtx5 + 16 | 0; //@line 35025
 HEAP32[$38 >> 2] = $12; //@line 35026
 $39 = $ReallocAsyncCtx5 + 20 | 0; //@line 35027
 HEAP32[$39 >> 2] = $14; //@line 35028
 $40 = $ReallocAsyncCtx5 + 24 | 0; //@line 35029
 HEAP32[$40 >> 2] = $6; //@line 35030
 sp = STACKTOP; //@line 35031
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_476($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $36 = 0, $4 = 0, $44 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 35040
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35042
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35044
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35046
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35048
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35050
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 35052
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 35054
 if (HEAP8[$2 + 371 >> 0] | 0) {
  $18 = HEAP32[$4 >> 2] | 0; //@line 35059
  $21 = HEAP32[$2 + 972 >> 2] | 0; //@line 35062
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 35063
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($18, $2 + 1036 | 0, $21); //@line 35064
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 364; //@line 35067
   $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 35068
   HEAP32[$22 >> 2] = $6; //@line 35069
   $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 35070
   HEAP32[$23 >> 2] = $2; //@line 35071
   $24 = $ReallocAsyncCtx7 + 12 | 0; //@line 35072
   HEAP32[$24 >> 2] = $4; //@line 35073
   $25 = $ReallocAsyncCtx7 + 16 | 0; //@line 35074
   HEAP32[$25 >> 2] = $8; //@line 35075
   $26 = $ReallocAsyncCtx7 + 20 | 0; //@line 35076
   HEAP32[$26 >> 2] = $10; //@line 35077
   $27 = $ReallocAsyncCtx7 + 24 | 0; //@line 35078
   HEAP32[$27 >> 2] = $12; //@line 35079
   $28 = $ReallocAsyncCtx7 + 28 | 0; //@line 35080
   HEAP32[$28 >> 2] = $14; //@line 35081
   sp = STACKTOP; //@line 35082
   return;
  }
  ___async_unwind = 0; //@line 35085
  HEAP32[$ReallocAsyncCtx7 >> 2] = 364; //@line 35086
  $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 35087
  HEAP32[$22 >> 2] = $6; //@line 35088
  $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 35089
  HEAP32[$23 >> 2] = $2; //@line 35090
  $24 = $ReallocAsyncCtx7 + 12 | 0; //@line 35091
  HEAP32[$24 >> 2] = $4; //@line 35092
  $25 = $ReallocAsyncCtx7 + 16 | 0; //@line 35093
  HEAP32[$25 >> 2] = $8; //@line 35094
  $26 = $ReallocAsyncCtx7 + 20 | 0; //@line 35095
  HEAP32[$26 >> 2] = $10; //@line 35096
  $27 = $ReallocAsyncCtx7 + 24 | 0; //@line 35097
  HEAP32[$27 >> 2] = $12; //@line 35098
  $28 = $ReallocAsyncCtx7 + 28 | 0; //@line 35099
  HEAP32[$28 >> 2] = $14; //@line 35100
  sp = STACKTOP; //@line 35101
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 35107
 $32 = $2 + 944 | 0; //@line 35108
 $33 = HEAP8[$32 >> 0] | 0; //@line 35109
 if (!($33 << 24 >> 24)) {
  HEAP8[$32 >> 0] = 1; //@line 35112
  $36 = 1; //@line 35113
 } else {
  $36 = $33; //@line 35115
 }
 HEAP8[$32 >> 0] = $36 | 32; //@line 35118
 HEAP8[$2 + 376 >> 0] = ($8 | 0) == 0 & (HEAP8[$2 + 944 >> 0] & 8) != 0 & 1; //@line 35127
 $44 = HEAP8[$2 + 378 >> 0] | 0; //@line 35129
 HEAP8[$2 + 379 >> 0] = $44; //@line 35131
 HEAP8[$10 >> 0] = $44; //@line 35132
 HEAP8[$12 + 1 >> 0] = HEAP8[$2 + 372 >> 0] | 0; //@line 35136
 HEAP32[$12 + 4 >> 2] = $14; //@line 35138
 $50 = HEAP32[$2 >> 2] | 0; //@line 35139
 $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 12 >> 2] | 0; //@line 35142
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 35143
 FUNCTION_TABLE_vii[$53 & 31]($50, $12); //@line 35144
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 35147
  $54 = $ReallocAsyncCtx + 4 | 0; //@line 35148
  HEAP32[$54 >> 2] = $2; //@line 35149
  $55 = $ReallocAsyncCtx + 8 | 0; //@line 35150
  HEAP32[$55 >> 2] = $14; //@line 35151
  $56 = $ReallocAsyncCtx + 12 | 0; //@line 35152
  HEAP32[$56 >> 2] = $4; //@line 35153
  $57 = $ReallocAsyncCtx + 16 | 0; //@line 35154
  HEAP32[$57 >> 2] = $10; //@line 35155
  sp = STACKTOP; //@line 35156
  return;
 }
 ___async_unwind = 0; //@line 35159
 HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 35160
 $54 = $ReallocAsyncCtx + 4 | 0; //@line 35161
 HEAP32[$54 >> 2] = $2; //@line 35162
 $55 = $ReallocAsyncCtx + 8 | 0; //@line 35163
 HEAP32[$55 >> 2] = $14; //@line 35164
 $56 = $ReallocAsyncCtx + 12 | 0; //@line 35165
 HEAP32[$56 >> 2] = $4; //@line 35166
 $57 = $ReallocAsyncCtx + 16 | 0; //@line 35167
 HEAP32[$57 >> 2] = $10; //@line 35168
 sp = STACKTOP; //@line 35169
 return;
}
function __ZN7LoRaMac21send_frame_on_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $18 = 0, $21 = 0, $24 = 0, $25 = 0, $33 = 0, $36 = 0, $39 = 0, $42 = 0, $45 = 0, $48 = 0, $54 = 0, $57 = 0, $6 = 0, $60 = 0, $64 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 16704
 STACKTOP = STACKTOP + 32 | 0; //@line 16705
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 16705
 $vararg_buffer1 = sp + 8 | 0; //@line 16706
 $vararg_buffer = sp; //@line 16707
 _printf(12967, $vararg_buffer) | 0; //@line 16708
 _printf(13345, $vararg_buffer1) | 0; //@line 16709
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 16710
 _putchar(10) | 0; //@line 16711
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 496; //@line 16714
  HEAP32[$AsyncCtx5 + 4 >> 2] = $vararg_buffer1; //@line 16716
  HEAP32[$AsyncCtx5 + 8 >> 2] = $vararg_buffer; //@line 16718
  HEAP8[$AsyncCtx5 + 12 >> 0] = $1; //@line 16720
  HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 16722
  sp = STACKTOP; //@line 16723
  STACKTOP = sp; //@line 16724
  return 0; //@line 16724
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 16726
 HEAP8[$vararg_buffer >> 0] = 0; //@line 16727
 HEAP8[$vararg_buffer1 >> 0] = $1; //@line 16728
 $6 = $0 + 1097 | 0; //@line 16729
 HEAP8[$vararg_buffer1 + 1 >> 0] = HEAP8[$6 >> 0] | 0; //@line 16732
 HEAP8[$vararg_buffer1 + 2 >> 0] = HEAP8[$0 + 1096 >> 0] | 0; //@line 16736
 HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[$0 + 1144 >> 2]; //@line 16740
 HEAP32[$vararg_buffer1 + 8 >> 2] = HEAP32[$0 + 1148 >> 2]; //@line 16744
 $18 = $0 + 636 | 0; //@line 16745
 HEAP16[$vararg_buffer1 + 12 >> 1] = HEAP16[$18 >> 1] | 0; //@line 16748
 $21 = HEAP32[$0 >> 2] | 0; //@line 16749
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 32 >> 2] | 0; //@line 16752
 $25 = $0 + 992 | 0; //@line 16753
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 16754
 FUNCTION_TABLE_iiiii[$24 & 3]($21, $vararg_buffer1, $vararg_buffer, $25) | 0; //@line 16755
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 497; //@line 16758
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16760
  HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 16762
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 16764
  HEAP32[$AsyncCtx + 16 >> 2] = $25; //@line 16766
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 16768
  HEAP32[$AsyncCtx + 24 >> 2] = $18; //@line 16770
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer1; //@line 16772
  sp = STACKTOP; //@line 16773
  STACKTOP = sp; //@line 16774
  return 0; //@line 16774
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16776
 $33 = $0 + 264 | 0; //@line 16777
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($33) | 0) + 4 >> 2] = 1; //@line 16780
 $36 = $0 + 288 | 0; //@line 16781
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 4 >> 2] = 1; //@line 16784
 $39 = HEAP8[$6 >> 0] | 0; //@line 16785
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 8 >> 0] = $39; //@line 16788
 $42 = HEAP8[$vararg_buffer >> 0] | 0; //@line 16789
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 9 >> 0] = $42; //@line 16792
 $45 = HEAP32[$25 >> 2] | 0; //@line 16793
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 12 >> 2] = $45; //@line 16796
 $48 = HEAP32[$25 >> 2] | 0; //@line 16797
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($33) | 0) + 8 >> 2] = $48; //@line 16800
 if (!(HEAP8[$0 + 372 >> 0] | 0)) {
  $54 = $0 + 897 | 0; //@line 16805
  HEAP8[$54 >> 0] = (HEAP8[$54 >> 0] | 0) + 1 << 24 >> 24; //@line 16808
 }
 $57 = HEAP32[$0 >> 2] | 0; //@line 16810
 $60 = HEAP16[$18 >> 1] & 255; //@line 16813
 $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16814
 __ZN7LoRaPHY11handle_sendEPhh($57, $0 + 381 | 0, $60); //@line 16815
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 498; //@line 16818
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 16820
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer; //@line 16822
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer1; //@line 16824
  sp = STACKTOP; //@line 16825
  STACKTOP = sp; //@line 16826
  return 0; //@line 16826
 } else {
  _emscripten_free_async_context($AsyncCtx9 | 0); //@line 16828
  $64 = $0 + 968 | 0; //@line 16829
  HEAP32[$64 >> 2] = HEAP32[$64 >> 2] | 1; //@line 16832
  STACKTOP = sp; //@line 16833
  return 0; //@line 16833
 }
 return 0; //@line 16835
}
function __ZN12radio_eventsD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29764
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29766
 $4 = HEAP32[$2 + 92 >> 2] | 0; //@line 29768
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 29773
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 29774
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 80 | 0); //@line 29775
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 344; //@line 29778
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 29779
   HEAP32[$9 >> 2] = $2; //@line 29780
   sp = STACKTOP; //@line 29781
   return;
  }
  ___async_unwind = 0; //@line 29784
  HEAP32[$ReallocAsyncCtx2 >> 2] = 344; //@line 29785
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 29786
  HEAP32[$9 >> 2] = $2; //@line 29787
  sp = STACKTOP; //@line 29788
  return;
 }
 $11 = HEAP32[$2 + 76 >> 2] | 0; //@line 29792
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 29797
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 29798
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 64 | 0); //@line 29799
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 345; //@line 29802
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 29803
   HEAP32[$16 >> 2] = $2; //@line 29804
   sp = STACKTOP; //@line 29805
   return;
  }
  ___async_unwind = 0; //@line 29808
  HEAP32[$ReallocAsyncCtx3 >> 2] = 345; //@line 29809
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 29810
  HEAP32[$16 >> 2] = $2; //@line 29811
  sp = STACKTOP; //@line 29812
  return;
 }
 $18 = HEAP32[$2 + 60 >> 2] | 0; //@line 29816
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 29821
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 29822
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 48 | 0); //@line 29823
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 346; //@line 29826
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 29827
   HEAP32[$23 >> 2] = $2; //@line 29828
   sp = STACKTOP; //@line 29829
   return;
  }
  ___async_unwind = 0; //@line 29832
  HEAP32[$ReallocAsyncCtx4 >> 2] = 346; //@line 29833
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 29834
  HEAP32[$23 >> 2] = $2; //@line 29835
  sp = STACKTOP; //@line 29836
  return;
 }
 $25 = HEAP32[$2 + 44 >> 2] | 0; //@line 29840
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 29845
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 29846
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 32 | 0); //@line 29847
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 29850
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 29851
   HEAP32[$30 >> 2] = $2; //@line 29852
   sp = STACKTOP; //@line 29853
   return;
  }
  ___async_unwind = 0; //@line 29856
  HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 29857
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 29858
  HEAP32[$30 >> 2] = $2; //@line 29859
  sp = STACKTOP; //@line 29860
  return;
 }
 $32 = HEAP32[$2 + 28 >> 2] | 0; //@line 29864
 if ($32 | 0) {
  $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 29869
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 29870
  FUNCTION_TABLE_vi[$36 & 1023]($2 + 16 | 0); //@line 29871
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 348; //@line 29874
   $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 29875
   HEAP32[$37 >> 2] = $2; //@line 29876
   sp = STACKTOP; //@line 29877
   return;
  }
  ___async_unwind = 0; //@line 29880
  HEAP32[$ReallocAsyncCtx6 >> 2] = 348; //@line 29881
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 29882
  HEAP32[$37 >> 2] = $2; //@line 29883
  sp = STACKTOP; //@line 29884
  return;
 }
 $39 = HEAP32[$2 + 12 >> 2] | 0; //@line 29888
 if (!$39) {
  return;
 }
 $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 29894
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 29895
 FUNCTION_TABLE_vi[$42 & 1023]($2); //@line 29896
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 29899
  sp = STACKTOP; //@line 29900
  return;
 }
 ___async_unwind = 0; //@line 29903
 HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 29904
 sp = STACKTOP; //@line 29905
 return;
}
function _initialize__async_cb_246($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11229
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11231
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11233
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11235
 $10 = HEAP32[(HEAP32[$0 + 16 >> 2] | 0) + 4 >> 2] | 0; //@line 11239
 if (($10 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 11243
  _mbed_assert_internal(14513, 14515, 47); //@line 11244
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 700; //@line 11247
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 11248
   HEAP32[$12 >> 2] = 1e6; //@line 11249
   $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 11250
   HEAP32[$13 >> 2] = $2; //@line 11251
   $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 11252
   HEAP32[$14 >> 2] = $4; //@line 11253
   $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 11254
   HEAP32[$15 >> 2] = $6; //@line 11255
   sp = STACKTOP; //@line 11256
   return;
  }
  ___async_unwind = 0; //@line 11259
  HEAP32[$ReallocAsyncCtx6 >> 2] = 700; //@line 11260
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 11261
  HEAP32[$12 >> 2] = 1e6; //@line 11262
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 11263
  HEAP32[$13 >> 2] = $2; //@line 11264
  $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 11265
  HEAP32[$14 >> 2] = $4; //@line 11266
  $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 11267
  HEAP32[$15 >> 2] = $6; //@line 11268
  sp = STACKTOP; //@line 11269
  return;
 } else {
  $17 = 7 << $10 + -4; //@line 11273
  $18 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 11274
  $19 = tempRet0; //@line 11275
  $20 = _i64Add(1e6, 0, -1, -1) | 0; //@line 11276
  $22 = _i64Add($20 | 0, tempRet0 | 0, $18 | 0, $19 | 0) | 0; //@line 11278
  $24 = ___udivdi3($22 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 11280
  $25 = tempRet0; //@line 11281
  $26 = HEAP32[$2 >> 2] | 0; //@line 11282
  HEAP32[$26 >> 2] = 0; //@line 11283
  HEAP32[$26 + 4 >> 2] = 0; //@line 11285
  $30 = HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0; //@line 11288
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 11289
  $31 = FUNCTION_TABLE_i[$30 & 7]() | 0; //@line 11290
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 701; //@line 11293
   $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 11294
   HEAP32[$32 >> 2] = $2; //@line 11295
   $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 11296
   HEAP32[$33 >> 2] = 1e6; //@line 11297
   $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 11298
   HEAP32[$34 >> 2] = $10; //@line 11299
   $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 11300
   HEAP32[$35 >> 2] = $17; //@line 11301
   $36 = $ReallocAsyncCtx3 + 24 | 0; //@line 11302
   $37 = $36; //@line 11303
   $38 = $37; //@line 11304
   HEAP32[$38 >> 2] = $24; //@line 11305
   $39 = $37 + 4 | 0; //@line 11306
   $40 = $39; //@line 11307
   HEAP32[$40 >> 2] = $25; //@line 11308
   $41 = $ReallocAsyncCtx3 + 32 | 0; //@line 11309
   HEAP32[$41 >> 2] = $4; //@line 11310
   $42 = $ReallocAsyncCtx3 + 36 | 0; //@line 11311
   HEAP32[$42 >> 2] = $6; //@line 11312
   sp = STACKTOP; //@line 11313
   return;
  }
  HEAP32[___async_retval >> 2] = $31; //@line 11317
  ___async_unwind = 0; //@line 11318
  HEAP32[$ReallocAsyncCtx3 >> 2] = 701; //@line 11319
  $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 11320
  HEAP32[$32 >> 2] = $2; //@line 11321
  $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 11322
  HEAP32[$33 >> 2] = 1e6; //@line 11323
  $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 11324
  HEAP32[$34 >> 2] = $10; //@line 11325
  $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 11326
  HEAP32[$35 >> 2] = $17; //@line 11327
  $36 = $ReallocAsyncCtx3 + 24 | 0; //@line 11328
  $37 = $36; //@line 11329
  $38 = $37; //@line 11330
  HEAP32[$38 >> 2] = $24; //@line 11331
  $39 = $37 + 4 | 0; //@line 11332
  $40 = $39; //@line 11333
  HEAP32[$40 >> 2] = $25; //@line 11334
  $41 = $ReallocAsyncCtx3 + 32 | 0; //@line 11335
  HEAP32[$41 >> 2] = $4; //@line 11336
  $42 = $ReallocAsyncCtx3 + 36 | 0; //@line 11337
  HEAP32[$42 >> 2] = $6; //@line 11338
  sp = STACKTOP; //@line 11339
  return;
 }
}
function _mbedtls_cipher_cmac_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $53 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28068
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28070
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28072
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28074
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28076
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28078
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28080
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28082
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28084
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28086
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28088
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28090
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28092
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 28095
  $53 = ___async_retval; //@line 28096
  HEAP32[$53 >> 2] = $$0; //@line 28097
  return;
 }
 $33 = $2 - $4 | 0; //@line 28100
 $25 = $6 + $4 | 0; //@line 28101
 $37 = $8 + 1 | 0; //@line 28102
 if ($37 >>> 0 >= $10 >>> 0) {
  if (!$33) {
   $$0 = 0; //@line 28107
   $53 = ___async_retval; //@line 28108
   HEAP32[$53 >> 2] = $$0; //@line 28109
   return;
  }
  _memcpy((HEAP32[$14 >> 2] | 0) + ($16 + 16) | 0, $25 | 0, $33 | 0) | 0; //@line 28114
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + $33; //@line 28117
  $$0 = 0; //@line 28118
  $53 = ___async_retval; //@line 28119
  HEAP32[$53 >> 2] = $$0; //@line 28120
  return;
 }
 $$09$i75 = 0; //@line 28123
 do {
  $27 = $16 + $$09$i75 | 0; //@line 28127
  HEAP8[$27 >> 0] = HEAP8[$27 >> 0] ^ HEAP8[$25 + $$09$i75 >> 0]; //@line 28130
  $$09$i75 = $$09$i75 + 1 | 0; //@line 28131
 } while (($$09$i75 | 0) != ($4 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 28139
 $31 = _mbedtls_cipher_update($18, $20, $4, $20, $22) | 0; //@line 28140
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 687; //@line 28143
  $32 = $ReallocAsyncCtx + 4 | 0; //@line 28144
  HEAP32[$32 >> 2] = $33; //@line 28145
  $34 = $ReallocAsyncCtx + 8 | 0; //@line 28146
  HEAP32[$34 >> 2] = $4; //@line 28147
  $35 = $ReallocAsyncCtx + 12 | 0; //@line 28148
  HEAP32[$35 >> 2] = $25; //@line 28149
  $36 = $ReallocAsyncCtx + 16 | 0; //@line 28150
  HEAP32[$36 >> 2] = $37; //@line 28151
  $38 = $ReallocAsyncCtx + 20 | 0; //@line 28152
  HEAP32[$38 >> 2] = $10; //@line 28153
  $39 = $ReallocAsyncCtx + 24 | 0; //@line 28154
  HEAP32[$39 >> 2] = $12; //@line 28155
  $40 = $ReallocAsyncCtx + 28 | 0; //@line 28156
  HEAP32[$40 >> 2] = $14; //@line 28157
  $41 = $ReallocAsyncCtx + 32 | 0; //@line 28158
  HEAP32[$41 >> 2] = $16; //@line 28159
  $42 = $ReallocAsyncCtx + 36 | 0; //@line 28160
  HEAP32[$42 >> 2] = $18; //@line 28161
  $43 = $ReallocAsyncCtx + 40 | 0; //@line 28162
  HEAP32[$43 >> 2] = $20; //@line 28163
  $44 = $ReallocAsyncCtx + 44 | 0; //@line 28164
  HEAP32[$44 >> 2] = $22; //@line 28165
  sp = STACKTOP; //@line 28166
  return;
 }
 HEAP32[___async_retval >> 2] = $31; //@line 28170
 ___async_unwind = 0; //@line 28171
 HEAP32[$ReallocAsyncCtx >> 2] = 687; //@line 28172
 $32 = $ReallocAsyncCtx + 4 | 0; //@line 28173
 HEAP32[$32 >> 2] = $33; //@line 28174
 $34 = $ReallocAsyncCtx + 8 | 0; //@line 28175
 HEAP32[$34 >> 2] = $4; //@line 28176
 $35 = $ReallocAsyncCtx + 12 | 0; //@line 28177
 HEAP32[$35 >> 2] = $25; //@line 28178
 $36 = $ReallocAsyncCtx + 16 | 0; //@line 28179
 HEAP32[$36 >> 2] = $37; //@line 28180
 $38 = $ReallocAsyncCtx + 20 | 0; //@line 28181
 HEAP32[$38 >> 2] = $10; //@line 28182
 $39 = $ReallocAsyncCtx + 24 | 0; //@line 28183
 HEAP32[$39 >> 2] = $12; //@line 28184
 $40 = $ReallocAsyncCtx + 28 | 0; //@line 28185
 HEAP32[$40 >> 2] = $14; //@line 28186
 $41 = $ReallocAsyncCtx + 32 | 0; //@line 28187
 HEAP32[$41 >> 2] = $16; //@line 28188
 $42 = $ReallocAsyncCtx + 36 | 0; //@line 28189
 HEAP32[$42 >> 2] = $18; //@line 28190
 $43 = $ReallocAsyncCtx + 40 | 0; //@line 28191
 HEAP32[$43 >> 2] = $20; //@line 28192
 $44 = $ReallocAsyncCtx + 44 | 0; //@line 28193
 HEAP32[$44 >> 2] = $22; //@line 28194
 sp = STACKTOP; //@line 28195
 return;
}
function _mbedtls_gcm_update($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$05966 = 0, $$06065 = 0, $$061 = 0, $$06264 = 0, $$163 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $30 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $5 = 0, $67 = 0, $68 = 0, $75 = 0, $83 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4309
 STACKTOP = STACKTOP + 32 | 0; //@line 4310
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4310
 $4 = sp + 8 | 0; //@line 4311
 $5 = sp; //@line 4312
 HEAP32[$5 >> 2] = 0; //@line 4313
 if ($3 >>> 0 > $2 >>> 0) {
  if (($3 - $2 | 0) >>> 0 < $1 >>> 0) {
   $$0 = -20; //@line 4321
   STACKTOP = sp; //@line 4322
   return $$0 | 0; //@line 4322
  }
 }
 $11 = $0 + 328 | 0; //@line 4325
 $12 = $11; //@line 4326
 $14 = HEAP32[$12 >> 2] | 0; //@line 4328
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 4331
 $18 = _i64Add($14 | 0, $17 | 0, $1 | 0, 0) | 0; //@line 4332
 $19 = tempRet0; //@line 4333
 if ($19 >>> 0 < $17 >>> 0 | ($19 | 0) == ($17 | 0) & $18 >>> 0 < $14 >>> 0 | ($19 >>> 0 > 15 | ($19 | 0) == 15 & $18 >>> 0 > 4294967264)) {
  $$0 = -20; //@line 4346
  STACKTOP = sp; //@line 4347
  return $$0 | 0; //@line 4347
 }
 $30 = $11; //@line 4349
 HEAP32[$30 >> 2] = $18; //@line 4351
 HEAP32[$30 + 4 >> 2] = $19; //@line 4354
 if (!$1) {
  $$0 = 0; //@line 4357
  STACKTOP = sp; //@line 4358
  return $$0 | 0; //@line 4358
 }
 $35 = $0 + 360 | 0; //@line 4360
 $36 = $0 + 376 | 0; //@line 4361
 $37 = $0 + 392 | 0; //@line 4362
 $$05966 = $3; //@line 4363
 $$06065 = $2; //@line 4363
 $$06264 = $1; //@line 4363
 while (1) {
  $39 = $$06264 >>> 0 < 16 ? $$06264 : 16; //@line 4366
  $$061 = 16; //@line 4367
  do {
   if ($$061 >>> 0 <= 12) {
    break;
   }
   $$061 = $$061 + -1 | 0; //@line 4373
   $42 = $0 + 360 + $$061 | 0; //@line 4374
   $44 = (HEAP8[$42 >> 0] | 0) + 1 << 24 >> 24; //@line 4376
   HEAP8[$42 >> 0] = $44; //@line 4377
  } while (!($44 << 24 >> 24));
  $AsyncCtx = _emscripten_alloc_async_context(68, sp) | 0; //@line 4385
  $46 = _mbedtls_cipher_update($0, $35, 16, $4, $5) | 0; //@line 4386
  if (___async) {
   label = 10; //@line 4389
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4392
  if ($46 | 0) {
   $$0 = $46; //@line 4395
   label = 19; //@line 4396
   break;
  }
  if ($39 | 0) {
   $$163 = 0; //@line 4401
   do {
    $67 = $0 + 376 + $$163 | 0; //@line 4405
    $68 = $$06065 + $$163 | 0; //@line 4406
    if (!(HEAP32[$37 >> 2] | 0)) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 4411
    }
    $75 = HEAP8[$68 >> 0] ^ HEAP8[$4 + $$163 >> 0]; //@line 4416
    HEAP8[$$05966 + $$163 >> 0] = $75; //@line 4418
    if ((HEAP32[$37 >> 2] | 0) == 1) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 4424
    }
    $$163 = $$163 + 1 | 0; //@line 4426
   } while ($$163 >>> 0 < $39 >>> 0);
  }
  _gcm_mult($0, $36, $36); //@line 4435
  $83 = $$06264 - $39 | 0; //@line 4436
  if (!$83) {
   $$0 = 0; //@line 4441
   label = 19; //@line 4442
   break;
  } else {
   $$05966 = $$05966 + $39 | 0; //@line 4445
   $$06065 = $$06065 + $39 | 0; //@line 4445
   $$06264 = $83; //@line 4445
  }
 }
 if ((label | 0) == 10) {
  HEAP32[$AsyncCtx >> 2] = 694; //@line 4449
  HEAP32[$AsyncCtx + 4 >> 2] = $39; //@line 4451
  HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 4453
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 4455
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 4457
  HEAP32[$AsyncCtx + 20 >> 2] = $36; //@line 4459
  HEAP32[$AsyncCtx + 24 >> 2] = $$06264; //@line 4461
  HEAP32[$AsyncCtx + 28 >> 2] = $$06065; //@line 4463
  HEAP32[$AsyncCtx + 32 >> 2] = $$05966; //@line 4465
  HEAP32[$AsyncCtx + 36 >> 2] = $37; //@line 4467
  HEAP32[$AsyncCtx + 40 >> 2] = $4; //@line 4469
  HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 4471
  HEAP32[$AsyncCtx + 48 >> 2] = $2; //@line 4473
  HEAP32[$AsyncCtx + 52 >> 2] = $1; //@line 4475
  HEAP32[$AsyncCtx + 56 >> 2] = $0; //@line 4477
  HEAP32[$AsyncCtx + 60 >> 2] = $35; //@line 4479
  HEAP32[$AsyncCtx + 64 >> 2] = $5; //@line 4481
  sp = STACKTOP; //@line 4482
  STACKTOP = sp; //@line 4483
  return 0; //@line 4483
 } else if ((label | 0) == 19) {
  STACKTOP = sp; //@line 4486
  return $$0 | 0; //@line 4486
 }
 return 0; //@line 4488
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_177($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 33457
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33459
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33461
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33463
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33465
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33467
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33469
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 33473
 $17 = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 33474
 if (!$17) {
  $27 = HEAP32[$2 >> 2] | 0; //@line 33477
  $29 = $12 + 12 | 0; //@line 33479
  HEAP32[$12 >> 2] = 526; //@line 33480
  HEAP32[$12 + 4 >> 2] = 0; //@line 33482
  HEAP32[$12 + 8 >> 2] = $4; //@line 33484
  HEAP32[$29 >> 2] = 848; //@line 33485
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 33486
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($27, $4 + 1016 | 0, $12); //@line 33487
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 527; //@line 33490
   $30 = $ReallocAsyncCtx9 + 4 | 0; //@line 33491
   HEAP32[$30 >> 2] = $29; //@line 33492
   $31 = $ReallocAsyncCtx9 + 8 | 0; //@line 33493
   HEAP32[$31 >> 2] = $2; //@line 33494
   $32 = $ReallocAsyncCtx9 + 12 | 0; //@line 33495
   HEAP32[$32 >> 2] = $4; //@line 33496
   $33 = $ReallocAsyncCtx9 + 16 | 0; //@line 33497
   HEAP32[$33 >> 2] = $6; //@line 33498
   $34 = $ReallocAsyncCtx9 + 20 | 0; //@line 33499
   HEAP32[$34 >> 2] = $8; //@line 33500
   $35 = $ReallocAsyncCtx9 + 24 | 0; //@line 33501
   HEAP32[$35 >> 2] = $10; //@line 33502
   $36 = $ReallocAsyncCtx9 + 28 | 0; //@line 33503
   HEAP32[$36 >> 2] = $12; //@line 33504
   sp = STACKTOP; //@line 33505
   return;
  }
  ___async_unwind = 0; //@line 33508
  HEAP32[$ReallocAsyncCtx9 >> 2] = 527; //@line 33509
  $30 = $ReallocAsyncCtx9 + 4 | 0; //@line 33510
  HEAP32[$30 >> 2] = $29; //@line 33511
  $31 = $ReallocAsyncCtx9 + 8 | 0; //@line 33512
  HEAP32[$31 >> 2] = $2; //@line 33513
  $32 = $ReallocAsyncCtx9 + 12 | 0; //@line 33514
  HEAP32[$32 >> 2] = $4; //@line 33515
  $33 = $ReallocAsyncCtx9 + 16 | 0; //@line 33516
  HEAP32[$33 >> 2] = $6; //@line 33517
  $34 = $ReallocAsyncCtx9 + 20 | 0; //@line 33518
  HEAP32[$34 >> 2] = $8; //@line 33519
  $35 = $ReallocAsyncCtx9 + 24 | 0; //@line 33520
  HEAP32[$35 >> 2] = $10; //@line 33521
  $36 = $ReallocAsyncCtx9 + 28 | 0; //@line 33522
  HEAP32[$36 >> 2] = $12; //@line 33523
  sp = STACKTOP; //@line 33524
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 33528
  $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 33529
  FUNCTION_TABLE_vi[$20 & 1023]($16); //@line 33530
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 525; //@line 33533
   $21 = $ReallocAsyncCtx + 4 | 0; //@line 33534
   HEAP32[$21 >> 2] = $2; //@line 33535
   $22 = $ReallocAsyncCtx + 8 | 0; //@line 33536
   HEAP32[$22 >> 2] = $4; //@line 33537
   $23 = $ReallocAsyncCtx + 12 | 0; //@line 33538
   HEAP32[$23 >> 2] = $8; //@line 33539
   $24 = $ReallocAsyncCtx + 16 | 0; //@line 33540
   HEAP32[$24 >> 2] = $10; //@line 33541
   $25 = $ReallocAsyncCtx + 20 | 0; //@line 33542
   HEAP32[$25 >> 2] = $6; //@line 33543
   $26 = $ReallocAsyncCtx + 24 | 0; //@line 33544
   HEAP32[$26 >> 2] = $12; //@line 33545
   sp = STACKTOP; //@line 33546
   return;
  }
  ___async_unwind = 0; //@line 33549
  HEAP32[$ReallocAsyncCtx >> 2] = 525; //@line 33550
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 33551
  HEAP32[$21 >> 2] = $2; //@line 33552
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 33553
  HEAP32[$22 >> 2] = $4; //@line 33554
  $23 = $ReallocAsyncCtx + 12 | 0; //@line 33555
  HEAP32[$23 >> 2] = $8; //@line 33556
  $24 = $ReallocAsyncCtx + 16 | 0; //@line 33557
  HEAP32[$24 >> 2] = $10; //@line 33558
  $25 = $ReallocAsyncCtx + 20 | 0; //@line 33559
  HEAP32[$25 >> 2] = $6; //@line 33560
  $26 = $ReallocAsyncCtx + 24 | 0; //@line 33561
  HEAP32[$26 >> 2] = $12; //@line 33562
  sp = STACKTOP; //@line 33563
  return;
 }
}
function __Z11compute_micPKhtS0_jhjPj($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $22 = 0, $24 = 0, $26 = 0, $32 = 0, $37 = 0, $42 = 0, $45 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22029
 HEAP8[13593] = $4; //@line 22030
 HEAP8[13594] = $3; //@line 22032
 HEAP8[13595] = $3 >>> 8; //@line 22035
 HEAP8[13596] = $3 >>> 16; //@line 22038
 HEAP8[13597] = $3 >>> 24; //@line 22041
 HEAP8[13598] = $5; //@line 22043
 HEAP8[13599] = $5 >>> 8; //@line 22046
 HEAP8[13600] = $5 >>> 16; //@line 22049
 HEAP8[13601] = $5 >>> 24; //@line 22052
 $22 = $1 & 255; //@line 22054
 HEAP8[13603] = $1; //@line 22056
 _mbedtls_cipher_init(22564); //@line 22057
 $24 = _mbedtls_cipher_info_from_type(2) | 0; //@line 22058
 if (!$24) {
  $$0 = -24960; //@line 22061
 } else {
  $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 22063
  $26 = _mbedtls_cipher_setup(22564, $24) | 0; //@line 22064
  if (___async) {
   HEAP32[$AsyncCtx15 >> 2] = 595; //@line 22067
   HEAP32[$AsyncCtx15 + 4 >> 2] = $6; //@line 22069
   HEAP32[$AsyncCtx15 + 8 >> 2] = $2; //@line 22071
   HEAP32[$AsyncCtx15 + 12 >> 2] = $0; //@line 22073
   HEAP32[$AsyncCtx15 + 16 >> 2] = $22; //@line 22075
   sp = STACKTOP; //@line 22076
   return 0; //@line 22077
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 22079
  if (!$26) {
   $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 22082
   $32 = _mbedtls_cipher_cmac_starts(22564, $2, 128) | 0; //@line 22083
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 596; //@line 22086
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 22088
    HEAP32[$AsyncCtx11 + 8 >> 2] = $22; //@line 22090
    HEAP32[$AsyncCtx11 + 12 >> 2] = $6; //@line 22092
    sp = STACKTOP; //@line 22093
    return 0; //@line 22094
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 22096
   if (!$32) {
    $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 22099
    $37 = _mbedtls_cipher_cmac_update(22564, 13588, 16) | 0; //@line 22100
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 597; //@line 22103
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 22105
     HEAP32[$AsyncCtx3 + 8 >> 2] = $22; //@line 22107
     HEAP32[$AsyncCtx3 + 12 >> 2] = $6; //@line 22109
     sp = STACKTOP; //@line 22110
     return 0; //@line 22111
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 22113
    if (!$37) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 22116
     $42 = _mbedtls_cipher_cmac_update(22564, $0, $22) | 0; //@line 22117
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 598; //@line 22120
      HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 22122
      sp = STACKTOP; //@line 22123
      return 0; //@line 22124
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 22126
     if (!$42) {
      $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22129
      $45 = _mbedtls_cipher_cmac_finish(22564, 23872) | 0; //@line 22130
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 599; //@line 22133
       HEAP32[$AsyncCtx7 + 4 >> 2] = $6; //@line 22135
       sp = STACKTOP; //@line 22136
       return 0; //@line 22137
      }
      _emscripten_free_async_context($AsyncCtx7 | 0); //@line 22139
      if (!$45) {
       HEAP32[$6 >> 2] = (HEAPU8[23874] | 0) << 16 | (HEAPU8[23875] | 0) << 24 | (HEAPU8[23873] | 0) << 8 | (HEAPU8[23872] | 0); //@line 22156
       $$0 = 0; //@line 22157
      } else {
       $$0 = $45; //@line 22159
      }
     } else {
      $$0 = $42; //@line 22162
     }
    } else {
     $$0 = $37; //@line 22165
    }
   } else {
    $$0 = $32; //@line 22168
   }
  } else {
   $$0 = $26; //@line 22171
  }
 }
 $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22174
 _mbedtls_cipher_free(22564); //@line 22175
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 600; //@line 22178
  HEAP32[$AsyncCtx19 + 4 >> 2] = $$0; //@line 22180
  sp = STACKTOP; //@line 22181
  return 0; //@line 22182
 } else {
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 22184
  return $$0 | 0; //@line 22185
 }
 return 0; //@line 22187
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_481($0) {
 $0 = $0 | 0;
 var $$pre12 = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 35952
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35954
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35956
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35958
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35960
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35962
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 35964
 $$pre12 = HEAP32[$2 >> 2] | 0; //@line 35965
 if ($$pre12 | 0) {
  $15 = HEAP32[$$pre12 + 4 >> 2] | 0; //@line 35969
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 35970
  FUNCTION_TABLE_vii[$15 & 31]($6, $8); //@line 35971
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 318; //@line 35974
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 35975
   HEAP32[$16 >> 2] = $2; //@line 35976
   $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 35977
   HEAP32[$17 >> 2] = $4; //@line 35978
   $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 35979
   HEAP32[$18 >> 2] = $10; //@line 35980
   $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 35981
   HEAP32[$19 >> 2] = $12; //@line 35982
   sp = STACKTOP; //@line 35983
   return;
  }
  ___async_unwind = 0; //@line 35986
  HEAP32[$ReallocAsyncCtx4 >> 2] = 318; //@line 35987
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 35988
  HEAP32[$16 >> 2] = $2; //@line 35989
  $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 35990
  HEAP32[$17 >> 2] = $4; //@line 35991
  $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 35992
  HEAP32[$18 >> 2] = $10; //@line 35993
  $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 35994
  HEAP32[$19 >> 2] = $12; //@line 35995
  sp = STACKTOP; //@line 35996
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 35999
 $20 = $10 + 32 | 0; //@line 36000
 $21 = $10 + 44 | 0; //@line 36001
 $22 = HEAP32[$21 >> 2] | 0; //@line 36002
 if (!$22) {
  return;
 }
 $24 = $12 + 1912 | 0; //@line 36007
 if (($24 | 0) == ($20 | 0)) {
  return;
 }
 $26 = $12 + 1924 | 0; //@line 36012
 $27 = HEAP32[$26 >> 2] | 0; //@line 36013
 if (!$27) {
  $36 = HEAP32[$22 + 4 >> 2] | 0; //@line 36017
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 36018
  FUNCTION_TABLE_vii[$36 & 31]($24, $20); //@line 36019
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 320; //@line 36022
   $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 36023
   HEAP32[$37 >> 2] = $21; //@line 36024
   $38 = $ReallocAsyncCtx6 + 8 | 0; //@line 36025
   HEAP32[$38 >> 2] = $26; //@line 36026
   sp = STACKTOP; //@line 36027
   return;
  }
  ___async_unwind = 0; //@line 36030
  HEAP32[$ReallocAsyncCtx6 >> 2] = 320; //@line 36031
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 36032
  HEAP32[$37 >> 2] = $21; //@line 36033
  $38 = $ReallocAsyncCtx6 + 8 | 0; //@line 36034
  HEAP32[$38 >> 2] = $26; //@line 36035
  sp = STACKTOP; //@line 36036
  return;
 } else {
  $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 36040
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 36041
  FUNCTION_TABLE_vi[$30 & 1023]($24); //@line 36042
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 319; //@line 36045
   $31 = $ReallocAsyncCtx5 + 4 | 0; //@line 36046
   HEAP32[$31 >> 2] = $21; //@line 36047
   $32 = $ReallocAsyncCtx5 + 8 | 0; //@line 36048
   HEAP32[$32 >> 2] = $26; //@line 36049
   $33 = $ReallocAsyncCtx5 + 12 | 0; //@line 36050
   HEAP32[$33 >> 2] = $24; //@line 36051
   $34 = $ReallocAsyncCtx5 + 16 | 0; //@line 36052
   HEAP32[$34 >> 2] = $20; //@line 36053
   sp = STACKTOP; //@line 36054
   return;
  }
  ___async_unwind = 0; //@line 36057
  HEAP32[$ReallocAsyncCtx5 >> 2] = 319; //@line 36058
  $31 = $ReallocAsyncCtx5 + 4 | 0; //@line 36059
  HEAP32[$31 >> 2] = $21; //@line 36060
  $32 = $ReallocAsyncCtx5 + 8 | 0; //@line 36061
  HEAP32[$32 >> 2] = $26; //@line 36062
  $33 = $ReallocAsyncCtx5 + 12 | 0; //@line 36063
  HEAP32[$33 >> 2] = $24; //@line 36064
  $34 = $ReallocAsyncCtx5 + 16 | 0; //@line 36065
  HEAP32[$34 >> 2] = $20; //@line 36066
  sp = STACKTOP; //@line 36067
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_363($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 24611
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24613
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24615
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 24618
 $8 = HEAP8[$0 + 13 >> 0] & 1; //@line 24621
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 24623
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 24625
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 24627
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 24629
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 24631
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 24633
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 24635
 $24 = HEAP8[$0 + 44 >> 0] & 1; //@line 24638
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 24640
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 24642
 L2 : do {
  if (!(HEAP8[$2 >> 0] | 0)) {
   do {
    if (!(HEAP8[$20 >> 0] | 0)) {
     $$182$off0 = $8; //@line 24651
     $$186$off0 = $6; //@line 24651
    } else {
     if (!(HEAP8[$22 >> 0] | 0)) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $6; //@line 24660
       $$283$off0 = 1; //@line 24660
       label = 13; //@line 24661
       break L2;
      } else {
       $$182$off0 = 1; //@line 24664
       $$186$off0 = $6; //@line 24664
       break;
      }
     }
     if ((HEAP32[$18 >> 2] | 0) == 1) {
      label = 18; //@line 24671
      break L2;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      label = 18; //@line 24678
      break L2;
     } else {
      $$182$off0 = 1; //@line 24681
      $$186$off0 = 1; //@line 24681
     }
    }
   } while (0);
   $30 = $10 + 8 | 0; //@line 24685
   if ($30 >>> 0 < $26 >>> 0) {
    HEAP8[$22 >> 0] = 0; //@line 24688
    HEAP8[$20 >> 0] = 0; //@line 24689
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 24690
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $16, $12, $12, 1, $24); //@line 24691
    if (!___async) {
     ___async_unwind = 0; //@line 24694
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 801; //@line 24696
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 24698
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 24700
    HEAP8[$ReallocAsyncCtx5 + 12 >> 0] = $$186$off0 & 1; //@line 24703
    HEAP8[$ReallocAsyncCtx5 + 13 >> 0] = $$182$off0 & 1; //@line 24706
    HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $30; //@line 24708
    HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $12; //@line 24710
    HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 24712
    HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 24714
    HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 24716
    HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 24718
    HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $22; //@line 24720
    HEAP8[$ReallocAsyncCtx5 + 44 >> 0] = $24 & 1; //@line 24723
    HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $26; //@line 24725
    HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $28; //@line 24727
    sp = STACKTOP; //@line 24728
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 24731
    $$283$off0 = $$182$off0; //@line 24731
    label = 13; //@line 24732
   }
  } else {
   $$085$off0$reg2mem$0 = $6; //@line 24735
   $$283$off0 = $8; //@line 24735
   label = 13; //@line 24736
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$14 >> 2] = $12; //@line 24742
    $59 = $16 + 40 | 0; //@line 24743
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 24746
    if ((HEAP32[$16 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$18 >> 2] | 0) == 2) {
      HEAP8[$2 >> 0] = 1; //@line 24754
      if ($$283$off0) {
       label = 18; //@line 24756
       break;
      } else {
       $67 = 4; //@line 24759
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 24766
   } else {
    $67 = 4; //@line 24768
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 24773
 }
 HEAP32[$4 >> 2] = $67; //@line 24775
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $16 = 0, $17 = 0, $30 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 14552
 STACKTOP = STACKTOP + 32 | 0; //@line 14553
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 14553
 $$byval_copy = sp + 24 | 0; //@line 14554
 $vararg_buffer3 = sp + 16 | 0; //@line 14555
 $vararg_buffer1 = sp + 8 | 0; //@line 14556
 _printf(12967, sp) | 0; //@line 14558
 _printf(13233, $vararg_buffer1) | 0; //@line 14559
 $AsyncCtx9 = _emscripten_alloc_async_context(28, sp) | 0; //@line 14560
 _putchar(10) | 0; //@line 14561
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 451; //@line 14564
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 14566
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer1; //@line 14568
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer3; //@line 14570
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer3; //@line 14572
  HEAP32[$AsyncCtx9 + 20 >> 2] = $$byval_copy; //@line 14574
  HEAP32[$AsyncCtx9 + 24 >> 2] = $$byval_copy; //@line 14576
  sp = STACKTOP; //@line 14577
  STACKTOP = sp; //@line 14578
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 14580
 do {
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   _printf(12967, $vararg_buffer3) | 0; //@line 14586
   _printf(12994, $$byval_copy) | 0; //@line 14587
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14588
   _putchar(10) | 0; //@line 14589
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 453; //@line 14592
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14594
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 14596
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 14598
    sp = STACKTOP; //@line 14599
    STACKTOP = sp; //@line 14600
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14602
   $16 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14604
   HEAP32[$vararg_buffer1 >> 2] = 361; //@line 14605
   HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 14607
   $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14608
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 14609
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 14609
   $17 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($16, $0, $$byval_copy) | 0; //@line 14610
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 454; //@line 14613
    HEAP32[$AsyncCtx16 + 4 >> 2] = $vararg_buffer1; //@line 14615
    HEAP32[$AsyncCtx16 + 8 >> 2] = $0; //@line 14617
    sp = STACKTOP; //@line 14618
    STACKTOP = sp; //@line 14619
    return;
   }
   _emscripten_free_async_context($AsyncCtx16 | 0); //@line 14621
   do {
    if (!$17) {
     $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14625
     _mbed_assert_internal(12851, 12860, 217); //@line 14626
     if (___async) {
      HEAP32[$AsyncCtx20 >> 2] = 455; //@line 14629
      HEAP32[$AsyncCtx20 + 4 >> 2] = $vararg_buffer1; //@line 14631
      HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 14633
      sp = STACKTOP; //@line 14634
      STACKTOP = sp; //@line 14635
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx20 | 0); //@line 14637
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 14643
  } else {
   $10 = HEAP32[$0 >> 2] | 0; //@line 14645
   $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14646
   __ZN7LoRaPHY18put_radio_to_sleepEv($10); //@line 14647
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 452; //@line 14650
    HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 14652
    sp = STACKTOP; //@line 14653
    STACKTOP = sp; //@line 14654
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 14656
    break;
   }
  }
 } while (0);
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 14664
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 14668
 $30 = $0 + 944 | 0; //@line 14669
 HEAP8[$30 >> 0] = HEAP8[$30 >> 0] | 32; //@line 14672
 STACKTOP = sp; //@line 14673
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_203($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 35315
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35317
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35319
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35321
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35323
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35325
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 35327
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 35329
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 35331
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 35333
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 35335
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 35337
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 35339
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 35341
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 35343
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 35345
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 35347
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 35349
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 35353
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 35355
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 35357
 $44 = HEAP8[$0 + 88 >> 0] | 0; //@line 35359
 $46 = HEAP8[$0 + 89 >> 0] & 1; //@line 35362
 $48 = HEAP16[$0 + 90 >> 1] | 0; //@line 35364
 $50 = HEAP32[$0 + 92 >> 2] | 0; //@line 35366
 $56 = HEAP32[$0 + 104 >> 2] | 0; //@line 35372
 $58 = HEAP32[$0 + 108 >> 2] | 0; //@line 35374
 $60 = HEAP32[$0 + 112 >> 2] | 0; //@line 35376
 $62 = HEAP32[$0 + 116 >> 2] | 0; //@line 35378
 $64 = HEAP8[$0 + 120 >> 0] | 0; //@line 35380
 $66 = HEAP32[$0 + 124 >> 2] | 0; //@line 35382
 $68 = HEAP32[$0 + 128 >> 2] | 0; //@line 35384
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 35386
 _printf(12139, HEAP32[$0 + 100 >> 2] | 0) | 0; //@line 35387
 HEAP32[$38 >> 2] = $AsyncRetVal; //@line 35388
 _printf(12359, $38) | 0; //@line 35389
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(128) | 0; //@line 35390
 _putchar(10) | 0; //@line 35391
 if (!___async) {
  ___async_unwind = 0; //@line 35394
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 300; //@line 35396
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $32; //@line 35398
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $34; //@line 35400
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $58; //@line 35402
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $62; //@line 35404
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $66; //@line 35406
 HEAP8[$ReallocAsyncCtx6 + 24 >> 0] = $64; //@line 35408
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $20; //@line 35410
 HEAP16[$ReallocAsyncCtx6 + 32 >> 1] = $48; //@line 35412
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $4; //@line 35414
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $68; //@line 35416
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $12; //@line 35418
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $22; //@line 35420
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 35422
 HEAP32[$ReallocAsyncCtx6 + 56 >> 2] = $50; //@line 35424
 HEAP8[$ReallocAsyncCtx6 + 60 >> 0] = $44; //@line 35426
 HEAP32[$ReallocAsyncCtx6 + 64 >> 2] = $56; //@line 35428
 HEAP32[$ReallocAsyncCtx6 + 68 >> 2] = $16; //@line 35430
 HEAP32[$ReallocAsyncCtx6 + 72 >> 2] = $24; //@line 35432
 HEAP32[$ReallocAsyncCtx6 + 76 >> 2] = $42; //@line 35434
 HEAP32[$ReallocAsyncCtx6 + 80 >> 2] = $30; //@line 35436
 HEAP32[$ReallocAsyncCtx6 + 84 >> 2] = $18; //@line 35438
 HEAP32[$ReallocAsyncCtx6 + 88 >> 2] = $10; //@line 35440
 HEAP32[$ReallocAsyncCtx6 + 92 >> 2] = $6; //@line 35442
 HEAP32[$ReallocAsyncCtx6 + 96 >> 2] = $2; //@line 35444
 HEAP32[$ReallocAsyncCtx6 + 100 >> 2] = $14; //@line 35446
 HEAP32[$ReallocAsyncCtx6 + 104 >> 2] = $8; //@line 35448
 HEAP32[$ReallocAsyncCtx6 + 108 >> 2] = $40; //@line 35450
 HEAP32[$ReallocAsyncCtx6 + 112 >> 2] = $60; //@line 35452
 HEAP32[$ReallocAsyncCtx6 + 116 >> 2] = $28; //@line 35454
 HEAP8[$ReallocAsyncCtx6 + 120 >> 0] = $46 & 1; //@line 35457
 HEAP32[$ReallocAsyncCtx6 + 124 >> 2] = $AsyncRetVal; //@line 35459
 sp = STACKTOP; //@line 35460
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_454($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 33503
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33507
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33509
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33511
 $9 = $4 + 12 | 0; //@line 33512
 HEAP32[$4 >> 2] = 581; //@line 33513
 HEAP32[$4 + 4 >> 2] = 0; //@line 33515
 HEAP32[$4 + 8 >> 2] = $6; //@line 33517
 HEAP32[$9 >> 2] = 848; //@line 33518
 $10 = $6 + 1260 | 0; //@line 33519
 if (($10 | 0) == ($4 | 0)) {
  $29 = HEAP32[214] | 0; //@line 33523
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 33524
  FUNCTION_TABLE_vi[$29 & 1023]($4); //@line 33525
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 584; //@line 33528
   $30 = $ReallocAsyncCtx15 + 4 | 0; //@line 33529
   HEAP32[$30 >> 2] = $4; //@line 33530
   $31 = $ReallocAsyncCtx15 + 8 | 0; //@line 33531
   HEAP32[$31 >> 2] = $8; //@line 33532
   sp = STACKTOP; //@line 33533
   return;
  }
  ___async_unwind = 0; //@line 33536
  HEAP32[$ReallocAsyncCtx15 >> 2] = 584; //@line 33537
  $30 = $ReallocAsyncCtx15 + 4 | 0; //@line 33538
  HEAP32[$30 >> 2] = $4; //@line 33539
  $31 = $ReallocAsyncCtx15 + 8 | 0; //@line 33540
  HEAP32[$31 >> 2] = $8; //@line 33541
  sp = STACKTOP; //@line 33542
  return;
 }
 $12 = $6 + 1272 | 0; //@line 33545
 $13 = HEAP32[$12 >> 2] | 0; //@line 33546
 if (!$13) {
  $23 = HEAP32[213] | 0; //@line 33550
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 33551
  FUNCTION_TABLE_vii[$23 & 31]($10, $4); //@line 33552
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 583; //@line 33555
   $24 = $ReallocAsyncCtx14 + 4 | 0; //@line 33556
   HEAP32[$24 >> 2] = $9; //@line 33557
   $25 = $ReallocAsyncCtx14 + 8 | 0; //@line 33558
   HEAP32[$25 >> 2] = $12; //@line 33559
   $26 = $ReallocAsyncCtx14 + 12 | 0; //@line 33560
   HEAP32[$26 >> 2] = $4; //@line 33561
   $27 = $ReallocAsyncCtx14 + 16 | 0; //@line 33562
   HEAP32[$27 >> 2] = $8; //@line 33563
   sp = STACKTOP; //@line 33564
   return;
  }
  ___async_unwind = 0; //@line 33567
  HEAP32[$ReallocAsyncCtx14 >> 2] = 583; //@line 33568
  $24 = $ReallocAsyncCtx14 + 4 | 0; //@line 33569
  HEAP32[$24 >> 2] = $9; //@line 33570
  $25 = $ReallocAsyncCtx14 + 8 | 0; //@line 33571
  HEAP32[$25 >> 2] = $12; //@line 33572
  $26 = $ReallocAsyncCtx14 + 12 | 0; //@line 33573
  HEAP32[$26 >> 2] = $4; //@line 33574
  $27 = $ReallocAsyncCtx14 + 16 | 0; //@line 33575
  HEAP32[$27 >> 2] = $8; //@line 33576
  sp = STACKTOP; //@line 33577
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 33581
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 33582
  FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 33583
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 582; //@line 33586
   $17 = $ReallocAsyncCtx13 + 4 | 0; //@line 33587
   HEAP32[$17 >> 2] = $9; //@line 33588
   $18 = $ReallocAsyncCtx13 + 8 | 0; //@line 33589
   HEAP32[$18 >> 2] = $12; //@line 33590
   $19 = $ReallocAsyncCtx13 + 12 | 0; //@line 33591
   HEAP32[$19 >> 2] = $10; //@line 33592
   $20 = $ReallocAsyncCtx13 + 16 | 0; //@line 33593
   HEAP32[$20 >> 2] = $4; //@line 33594
   $21 = $ReallocAsyncCtx13 + 20 | 0; //@line 33595
   HEAP32[$21 >> 2] = $8; //@line 33596
   sp = STACKTOP; //@line 33597
   return;
  }
  ___async_unwind = 0; //@line 33600
  HEAP32[$ReallocAsyncCtx13 >> 2] = 582; //@line 33601
  $17 = $ReallocAsyncCtx13 + 4 | 0; //@line 33602
  HEAP32[$17 >> 2] = $9; //@line 33603
  $18 = $ReallocAsyncCtx13 + 8 | 0; //@line 33604
  HEAP32[$18 >> 2] = $12; //@line 33605
  $19 = $ReallocAsyncCtx13 + 12 | 0; //@line 33606
  HEAP32[$19 >> 2] = $10; //@line 33607
  $20 = $ReallocAsyncCtx13 + 16 | 0; //@line 33608
  HEAP32[$20 >> 2] = $4; //@line 33609
  $21 = $ReallocAsyncCtx13 + 20 | 0; //@line 33610
  HEAP32[$21 >> 2] = $8; //@line 33611
  sp = STACKTOP; //@line 33612
  return;
 }
}
function _initialize__async_cb_243($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $70 = 0, $71 = 0, $72 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10971
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10975
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10977
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10981
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10983
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10985
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10987
 if (($AsyncRetVal | 0) != (HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 32 >> 2] | 0)) {
  $23 = $AsyncRetVal - (HEAP32[$6 >> 2] | 0) & HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 10996
  HEAP32[$6 >> 2] = $AsyncRetVal; //@line 10997
  $24 = HEAP32[$10 >> 2] | 0; //@line 10998
  L4 : do {
   if (($24 | 0) < 1e6) {
    switch ($24 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 6; //@line 11007
      break L4;
     }
    }
    $25 = ___muldi3($23 | 0, 0, 1e6, 0) | 0; //@line 11011
    $27 = _bitshift64Lshr($25 | 0, tempRet0 | 0, 15) | 0; //@line 11013
    $28 = tempRet0; //@line 11014
    $31 = $12; //@line 11017
    $37 = _i64Add(HEAP32[$31 >> 2] | 0, HEAP32[$31 + 4 >> 2] | 0, $23 * 1e6 & 32704 | 0, 0) | 0; //@line 11023
    $38 = tempRet0; //@line 11024
    $39 = $12; //@line 11025
    HEAP32[$39 >> 2] = $37; //@line 11027
    HEAP32[$39 + 4 >> 2] = $38; //@line 11030
    if ($38 >>> 0 < 0 | ($38 | 0) == 0 & $37 >>> 0 < 32768) {
     $95 = $27; //@line 11037
     $96 = $28; //@line 11037
    } else {
     $48 = _i64Add($27 | 0, $28 | 0, 1, 0) | 0; //@line 11039
     $49 = tempRet0; //@line 11040
     $50 = _i64Add($37 | 0, $38 | 0, -32768, -1) | 0; //@line 11041
     $52 = $12; //@line 11043
     HEAP32[$52 >> 2] = $50; //@line 11045
     HEAP32[$52 + 4 >> 2] = tempRet0; //@line 11048
     $95 = $48; //@line 11049
     $96 = $49; //@line 11049
    }
   } else {
    switch ($24 | 0) {
    case 1e6:
     {
      $95 = $23; //@line 11054
      $96 = 0; //@line 11054
      break;
     }
    default:
     {
      label = 6; //@line 11058
     }
    }
   }
  } while (0);
  if ((label | 0) == 6) {
   $56 = ___muldi3($23 | 0, 0, 1e6, 0) | 0; //@line 11064
   $57 = tempRet0; //@line 11065
   $58 = ___udivdi3($56 | 0, $57 | 0, $24 | 0, 0) | 0; //@line 11066
   $59 = tempRet0; //@line 11067
   $60 = ___muldi3($58 | 0, $59 | 0, $24 | 0, 0) | 0; //@line 11068
   $62 = _i64Subtract($56 | 0, $57 | 0, $60 | 0, tempRet0 | 0) | 0; //@line 11070
   $64 = $12; //@line 11072
   $70 = _i64Add($62 | 0, tempRet0 | 0, HEAP32[$64 >> 2] | 0, HEAP32[$64 + 4 >> 2] | 0) | 0; //@line 11078
   $71 = tempRet0; //@line 11079
   $72 = $12; //@line 11080
   HEAP32[$72 >> 2] = $70; //@line 11082
   HEAP32[$72 + 4 >> 2] = $71; //@line 11085
   if ($71 >>> 0 < 0 | ($71 | 0) == 0 & $70 >>> 0 < $24 >>> 0) {
    $95 = $58; //@line 11092
    $96 = $59; //@line 11092
   } else {
    $81 = _i64Add($58 | 0, $59 | 0, 1, 0) | 0; //@line 11094
    $82 = tempRet0; //@line 11095
    $83 = _i64Subtract($70 | 0, $71 | 0, $24 | 0, 0) | 0; //@line 11096
    $85 = $12; //@line 11098
    HEAP32[$85 >> 2] = $83; //@line 11100
    HEAP32[$85 + 4 >> 2] = tempRet0; //@line 11103
    $95 = $81; //@line 11104
    $96 = $82; //@line 11104
   }
  }
  $89 = $14; //@line 11107
  $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 11113
  $99 = $14; //@line 11115
  HEAP32[$99 >> 2] = $97; //@line 11117
  HEAP32[$99 + 4 >> 2] = tempRet0; //@line 11120
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 11122
 _schedule_interrupt($4); //@line 11123
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 703; //@line 11126
  sp = STACKTOP; //@line 11127
  return;
 }
 ___async_unwind = 0; //@line 11130
 HEAP32[$ReallocAsyncCtx5 >> 2] = 703; //@line 11131
 sp = STACKTOP; //@line 11132
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_11($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16987
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16989
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16991
 $5 = $2 + 1240 | 0; //@line 16992
 $6 = $4 + 12 | 0; //@line 16993
 HEAP32[$4 >> 2] = 142; //@line 16994
 HEAP32[$4 + 4 >> 2] = 0; //@line 16996
 HEAP32[$4 + 8 >> 2] = $2; //@line 16998
 HEAP32[$6 >> 2] = 648; //@line 16999
 $7 = $2 + 1280 | 0; //@line 17000
 do {
  if (($7 | 0) != ($4 | 0)) {
   $9 = $2 + 1292 | 0; //@line 17004
   $10 = HEAP32[$9 >> 2] | 0; //@line 17005
   if ($10 | 0) {
    $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 17009
    $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 17010
    FUNCTION_TABLE_vi[$13 & 1023]($7); //@line 17011
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 143; //@line 17014
     $14 = $ReallocAsyncCtx + 4 | 0; //@line 17015
     HEAP32[$14 >> 2] = $6; //@line 17016
     $15 = $ReallocAsyncCtx + 8 | 0; //@line 17017
     HEAP32[$15 >> 2] = $9; //@line 17018
     $16 = $ReallocAsyncCtx + 12 | 0; //@line 17019
     HEAP32[$16 >> 2] = $7; //@line 17020
     $17 = $ReallocAsyncCtx + 16 | 0; //@line 17021
     HEAP32[$17 >> 2] = $4; //@line 17022
     $18 = $ReallocAsyncCtx + 20 | 0; //@line 17023
     HEAP32[$18 >> 2] = $5; //@line 17024
     sp = STACKTOP; //@line 17025
     return;
    }
    ___async_unwind = 0; //@line 17028
    HEAP32[$ReallocAsyncCtx >> 2] = 143; //@line 17029
    $14 = $ReallocAsyncCtx + 4 | 0; //@line 17030
    HEAP32[$14 >> 2] = $6; //@line 17031
    $15 = $ReallocAsyncCtx + 8 | 0; //@line 17032
    HEAP32[$15 >> 2] = $9; //@line 17033
    $16 = $ReallocAsyncCtx + 12 | 0; //@line 17034
    HEAP32[$16 >> 2] = $7; //@line 17035
    $17 = $ReallocAsyncCtx + 16 | 0; //@line 17036
    HEAP32[$17 >> 2] = $4; //@line 17037
    $18 = $ReallocAsyncCtx + 20 | 0; //@line 17038
    HEAP32[$18 >> 2] = $5; //@line 17039
    sp = STACKTOP; //@line 17040
    return;
   }
   $19 = HEAP32[$6 >> 2] | 0; //@line 17043
   if (!$19) {
    HEAP32[$9 >> 2] = 0; //@line 17046
    break;
   }
   $22 = HEAP32[$19 + 4 >> 2] | 0; //@line 17050
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 17051
   FUNCTION_TABLE_vii[$22 & 31]($7, $4); //@line 17052
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 144; //@line 17055
    $23 = $ReallocAsyncCtx2 + 4 | 0; //@line 17056
    HEAP32[$23 >> 2] = $6; //@line 17057
    $24 = $ReallocAsyncCtx2 + 8 | 0; //@line 17058
    HEAP32[$24 >> 2] = $9; //@line 17059
    $25 = $ReallocAsyncCtx2 + 12 | 0; //@line 17060
    HEAP32[$25 >> 2] = $5; //@line 17061
    $26 = $ReallocAsyncCtx2 + 16 | 0; //@line 17062
    HEAP32[$26 >> 2] = $4; //@line 17063
    sp = STACKTOP; //@line 17064
    return;
   }
   ___async_unwind = 0; //@line 17067
   HEAP32[$ReallocAsyncCtx2 >> 2] = 144; //@line 17068
   $23 = $ReallocAsyncCtx2 + 4 | 0; //@line 17069
   HEAP32[$23 >> 2] = $6; //@line 17070
   $24 = $ReallocAsyncCtx2 + 8 | 0; //@line 17071
   HEAP32[$24 >> 2] = $9; //@line 17072
   $25 = $ReallocAsyncCtx2 + 12 | 0; //@line 17073
   HEAP32[$25 >> 2] = $5; //@line 17074
   $26 = $ReallocAsyncCtx2 + 16 | 0; //@line 17075
   HEAP32[$26 >> 2] = $4; //@line 17076
   sp = STACKTOP; //@line 17077
   return;
  }
 } while (0);
 __ZN4mbed6Ticker5setupEy($5, 1e5, 0); //@line 17081
 $27 = HEAP32[$6 >> 2] | 0; //@line 17082
 if (!$27) {
  return;
 }
 $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 17088
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 17089
 FUNCTION_TABLE_vi[$30 & 1023]($4); //@line 17090
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 145; //@line 17093
  sp = STACKTOP; //@line 17094
  return;
 }
 ___async_unwind = 0; //@line 17097
 HEAP32[$ReallocAsyncCtx3 >> 2] = 145; //@line 17098
 sp = STACKTOP; //@line 17099
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23813
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23815
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23817
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23819
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23821
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23823
 $12 = $0 + 24 | 0; //@line 23825
 $14 = HEAP32[$12 >> 2] | 0; //@line 23827
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 23830
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 23832
 $20 = HEAP32[$2 >> 2] | 0; //@line 23833
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 23837
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 23838
  FUNCTION_TABLE_vii[$23 & 31]($6, $8); //@line 23839
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 133; //@line 23842
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 23843
   HEAP32[$24 >> 2] = $2; //@line 23844
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 23845
   HEAP32[$25 >> 2] = $4; //@line 23846
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 23847
   HEAP32[$26 >> 2] = $10; //@line 23848
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 23849
   $28 = $27; //@line 23850
   $29 = $28; //@line 23851
   HEAP32[$29 >> 2] = $14; //@line 23852
   $30 = $28 + 4 | 0; //@line 23853
   $31 = $30; //@line 23854
   HEAP32[$31 >> 2] = $17; //@line 23855
   $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 23856
   HEAP32[$32 >> 2] = $19; //@line 23857
   $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 23858
   HEAP32[$33 >> 2] = $8; //@line 23859
   sp = STACKTOP; //@line 23860
   return;
  }
  ___async_unwind = 0; //@line 23863
  HEAP32[$ReallocAsyncCtx2 >> 2] = 133; //@line 23864
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 23865
  HEAP32[$24 >> 2] = $2; //@line 23866
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 23867
  HEAP32[$25 >> 2] = $4; //@line 23868
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 23869
  HEAP32[$26 >> 2] = $10; //@line 23870
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 23871
  $28 = $27; //@line 23872
  $29 = $28; //@line 23873
  HEAP32[$29 >> 2] = $14; //@line 23874
  $30 = $28 + 4 | 0; //@line 23875
  $31 = $30; //@line 23876
  HEAP32[$31 >> 2] = $17; //@line 23877
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 23878
  HEAP32[$32 >> 2] = $19; //@line 23879
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 23880
  HEAP32[$33 >> 2] = $8; //@line 23881
  sp = STACKTOP; //@line 23882
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 23885
 __ZN4mbed6Ticker5setupEy($10, $14, $17); //@line 23886
 $34 = HEAP32[$2 >> 2] | 0; //@line 23887
 if ($34 | 0) {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 23891
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 23892
  FUNCTION_TABLE_vi[$37 & 1023]($8); //@line 23893
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 134; //@line 23896
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 23897
   HEAP32[$38 >> 2] = $19; //@line 23898
   sp = STACKTOP; //@line 23899
   return;
  }
  ___async_unwind = 0; //@line 23902
  HEAP32[$ReallocAsyncCtx3 >> 2] = 134; //@line 23903
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 23904
  HEAP32[$38 >> 2] = $19; //@line 23905
  sp = STACKTOP; //@line 23906
  return;
 }
 $40 = HEAP32[$19 + 784 >> 2] | 0; //@line 23910
 if (!$40) {
  return;
 }
 $43 = HEAP32[$40 + 60 >> 2] | 0; //@line 23916
 if (!$43) {
  return;
 }
 $46 = HEAP32[$43 >> 2] | 0; //@line 23922
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 23923
 FUNCTION_TABLE_vi[$46 & 1023]($40 + 48 | 0); //@line 23924
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 23927
  sp = STACKTOP; //@line 23928
  return;
 }
 ___async_unwind = 0; //@line 23931
 HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 23932
 sp = STACKTOP; //@line 23933
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_362($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24455
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24457
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24459
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24461
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 24464
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24466
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24468
 $15 = $10 + 24 | 0; //@line 24471
 do {
  if ((HEAP32[$0 + 28 >> 2] | 0) > 1) {
   $18 = HEAP32[$10 + 8 >> 2] | 0; //@line 24476
   if (!($18 & 2)) {
    $21 = $2 + 36 | 0; //@line 24480
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $2 + 54 | 0; //@line 24487
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 24498
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 24499
      if (!___async) {
       ___async_unwind = 0; //@line 24502
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 805; //@line 24504
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 24506
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $12; //@line 24508
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 24510
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 24512
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $2; //@line 24514
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $4; //@line 24516
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $6; //@line 24518
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $8 & 1; //@line 24521
      sp = STACKTOP; //@line 24522
      return;
     }
     $36 = $2 + 24 | 0; //@line 24525
     $37 = $2 + 54 | 0; //@line 24526
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 24541
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 24542
     if (!___async) {
      ___async_unwind = 0; //@line 24545
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 804; //@line 24547
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 24549
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $12; //@line 24551
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 24553
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 24555
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 24557
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $2; //@line 24559
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $4; //@line 24561
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $6; //@line 24563
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $8 & 1; //@line 24566
     sp = STACKTOP; //@line 24567
     return;
    }
   }
   $24 = $2 + 54 | 0; //@line 24571
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 24575
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 24576
    if (!___async) {
     ___async_unwind = 0; //@line 24579
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 803; //@line 24581
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 24583
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $12; //@line 24585
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 24587
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $2; //@line 24589
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $4; //@line 24591
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $6; //@line 24593
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $8 & 1; //@line 24596
    sp = STACKTOP; //@line 24597
    return;
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_474($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $40 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 34797
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34801
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34803
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34805
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34807
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34809
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34811
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 34813
 if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) != 2) {
  if (!(HEAP8[$8 + 373 >> 0] | 0)) {
   HEAP8[$8 + 376 >> 0] = ($10 | 0) == 0 & (HEAP8[$8 + 944 >> 0] & 8) != 0 & 1; //@line 34829
   $40 = HEAP8[$8 + 378 >> 0] | 0; //@line 34831
   HEAP8[$8 + 379 >> 0] = $40; //@line 34833
   HEAP8[$12 >> 0] = $40; //@line 34834
   HEAP8[$14 + 1 >> 0] = HEAP8[$8 + 372 >> 0] | 0; //@line 34838
   HEAP32[$14 + 4 >> 2] = $16; //@line 34840
   $46 = HEAP32[$8 >> 2] | 0; //@line 34841
   $49 = HEAP32[(HEAP32[$46 >> 2] | 0) + 12 >> 2] | 0; //@line 34844
   $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 34845
   FUNCTION_TABLE_vii[$49 & 31]($46, $14); //@line 34846
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 34849
    $50 = $ReallocAsyncCtx + 4 | 0; //@line 34850
    HEAP32[$50 >> 2] = $8; //@line 34851
    $51 = $ReallocAsyncCtx + 8 | 0; //@line 34852
    HEAP32[$51 >> 2] = $16; //@line 34853
    $52 = $ReallocAsyncCtx + 12 | 0; //@line 34854
    HEAP32[$52 >> 2] = $6; //@line 34855
    $53 = $ReallocAsyncCtx + 16 | 0; //@line 34856
    HEAP32[$53 >> 2] = $12; //@line 34857
    sp = STACKTOP; //@line 34858
    return;
   }
   ___async_unwind = 0; //@line 34861
   HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 34862
   $50 = $ReallocAsyncCtx + 4 | 0; //@line 34863
   HEAP32[$50 >> 2] = $8; //@line 34864
   $51 = $ReallocAsyncCtx + 8 | 0; //@line 34865
   HEAP32[$51 >> 2] = $16; //@line 34866
   $52 = $ReallocAsyncCtx + 12 | 0; //@line 34867
   HEAP32[$52 >> 2] = $6; //@line 34868
   $53 = $ReallocAsyncCtx + 16 | 0; //@line 34869
   HEAP32[$53 >> 2] = $12; //@line 34870
   sp = STACKTOP; //@line 34871
   return;
  }
 }
 $21 = HEAP32[$6 >> 2] | 0; //@line 34875
 $23 = HEAP32[$4 >> 2] | 0; //@line 34877
 $26 = (__ZN7LoRaPHY15get_ack_timeoutEv(HEAP32[$8 >> 2] | 0) | 0) + $23 | 0; //@line 34880
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 34881
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $8 + 1076 | 0, $26); //@line 34882
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 366; //@line 34885
  $27 = $ReallocAsyncCtx5 + 4 | 0; //@line 34886
  HEAP32[$27 >> 2] = $8; //@line 34887
  $28 = $ReallocAsyncCtx5 + 8 | 0; //@line 34888
  HEAP32[$28 >> 2] = $10; //@line 34889
  $29 = $ReallocAsyncCtx5 + 12 | 0; //@line 34890
  HEAP32[$29 >> 2] = $12; //@line 34891
  $30 = $ReallocAsyncCtx5 + 16 | 0; //@line 34892
  HEAP32[$30 >> 2] = $14; //@line 34893
  $31 = $ReallocAsyncCtx5 + 20 | 0; //@line 34894
  HEAP32[$31 >> 2] = $16; //@line 34895
  $32 = $ReallocAsyncCtx5 + 24 | 0; //@line 34896
  HEAP32[$32 >> 2] = $6; //@line 34897
  sp = STACKTOP; //@line 34898
  return;
 }
 ___async_unwind = 0; //@line 34901
 HEAP32[$ReallocAsyncCtx5 >> 2] = 366; //@line 34902
 $27 = $ReallocAsyncCtx5 + 4 | 0; //@line 34903
 HEAP32[$27 >> 2] = $8; //@line 34904
 $28 = $ReallocAsyncCtx5 + 8 | 0; //@line 34905
 HEAP32[$28 >> 2] = $10; //@line 34906
 $29 = $ReallocAsyncCtx5 + 12 | 0; //@line 34907
 HEAP32[$29 >> 2] = $12; //@line 34908
 $30 = $ReallocAsyncCtx5 + 16 | 0; //@line 34909
 HEAP32[$30 >> 2] = $14; //@line 34910
 $31 = $ReallocAsyncCtx5 + 20 | 0; //@line 34911
 HEAP32[$31 >> 2] = $16; //@line 34912
 $32 = $ReallocAsyncCtx5 + 24 | 0; //@line 34913
 HEAP32[$32 >> 2] = $6; //@line 34914
 sp = STACKTOP; //@line 34915
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15516
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 15521
 } else {
  $9 = $1 + 52 | 0; //@line 15523
  $10 = HEAP8[$9 >> 0] | 0; //@line 15524
  $11 = $1 + 53 | 0; //@line 15525
  $12 = HEAP8[$11 >> 0] | 0; //@line 15526
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 15529
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 15530
  HEAP8[$9 >> 0] = 0; //@line 15531
  HEAP8[$11 >> 0] = 0; //@line 15532
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 15533
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 15534
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 799; //@line 15537
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 15539
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 15541
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 15543
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 15545
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 15547
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 15549
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 15551
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 15553
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 15555
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 15557
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 15560
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 15562
   sp = STACKTOP; //@line 15563
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15566
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 15571
    $32 = $0 + 8 | 0; //@line 15572
    $33 = $1 + 54 | 0; //@line 15573
    $$0 = $0 + 24 | 0; //@line 15574
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 15607
     HEAP8[$11 >> 0] = 0; //@line 15608
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 15609
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 15610
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15615
     $62 = $$0 + 8 | 0; //@line 15616
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 15619
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 800; //@line 15624
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 15626
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 15628
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 15630
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 15632
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 15634
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 15636
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 15638
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 15640
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 15642
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 15644
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 15646
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 15648
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 15650
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 15653
    sp = STACKTOP; //@line 15654
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 15658
  HEAP8[$11 >> 0] = $12; //@line 15659
 }
 return;
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 var $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $35 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $54 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 36971
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36975
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36977
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36979
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36981
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 36983
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 36985
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 36987
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 36989
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 36991
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 36993
 $24 = (HEAP8[$0 + 4 >> 0] | 0) + 1 << 24 >> 24; //@line 36995
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 36997
  $54 = ___async_retval; //@line 36998
  HEAP32[$54 >> 2] = $$1; //@line 36999
  return;
 }
 $25 = $24 & 255; //@line 37004
 if (($24 & 255) >= (HEAPU8[$4 >> 0] | 0)) {
  $$1 = 0; //@line 37006
  $54 = ___async_retval; //@line 37007
  HEAP32[$54 >> 2] = $$1; //@line 37008
  return;
 }
 $26 = HEAP32[$8 >> 2] | 0; //@line 37011
 HEAP8[$10 >> 0] = HEAP8[$26 + ($25 << 4) + 13 >> 0] | 0; //@line 37014
 HEAP8[$12 >> 0] = HEAP8[$26 + ($25 << 4) + 12 >> 0] | 0; //@line 37017
 HEAP32[$14 >> 2] = HEAP32[$26 + ($25 << 4) + 4 >> 2]; //@line 37020
 HEAP32[$16 >> 2] = HEAP32[$26 + ($25 << 4) + 8 >> 2]; //@line 37023
 $35 = HEAP32[$18 >> 2] | 0; //@line 37024
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 60 >> 2] | 0; //@line 37027
 $40 = HEAP8[$26 + ($25 << 4) >> 0] | 0; //@line 37029
 $ReallocAsyncCtx = _emscripten_realloc_async_context(44) | 0; //@line 37030
 $41 = FUNCTION_TABLE_iiii[$38 & 15]($35, $20, $40) | 0; //@line 37031
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 585; //@line 37034
  $42 = $ReallocAsyncCtx + 4 | 0; //@line 37035
  HEAP8[$42 >> 0] = $24; //@line 37036
  $43 = $ReallocAsyncCtx + 8 | 0; //@line 37037
  HEAP32[$43 >> 2] = $4; //@line 37038
  $44 = $ReallocAsyncCtx + 12 | 0; //@line 37039
  HEAP32[$44 >> 2] = $6; //@line 37040
  $45 = $ReallocAsyncCtx + 16 | 0; //@line 37041
  HEAP32[$45 >> 2] = $8; //@line 37042
  $46 = $ReallocAsyncCtx + 20 | 0; //@line 37043
  HEAP32[$46 >> 2] = $10; //@line 37044
  $47 = $ReallocAsyncCtx + 24 | 0; //@line 37045
  HEAP32[$47 >> 2] = $12; //@line 37046
  $48 = $ReallocAsyncCtx + 28 | 0; //@line 37047
  HEAP32[$48 >> 2] = $14; //@line 37048
  $49 = $ReallocAsyncCtx + 32 | 0; //@line 37049
  HEAP32[$49 >> 2] = $16; //@line 37050
  $50 = $ReallocAsyncCtx + 36 | 0; //@line 37051
  HEAP32[$50 >> 2] = $18; //@line 37052
  $51 = $ReallocAsyncCtx + 40 | 0; //@line 37053
  HEAP32[$51 >> 2] = $20; //@line 37054
  sp = STACKTOP; //@line 37055
  return;
 }
 HEAP32[___async_retval >> 2] = $41; //@line 37059
 ___async_unwind = 0; //@line 37060
 HEAP32[$ReallocAsyncCtx >> 2] = 585; //@line 37061
 $42 = $ReallocAsyncCtx + 4 | 0; //@line 37062
 HEAP8[$42 >> 0] = $24; //@line 37063
 $43 = $ReallocAsyncCtx + 8 | 0; //@line 37064
 HEAP32[$43 >> 2] = $4; //@line 37065
 $44 = $ReallocAsyncCtx + 12 | 0; //@line 37066
 HEAP32[$44 >> 2] = $6; //@line 37067
 $45 = $ReallocAsyncCtx + 16 | 0; //@line 37068
 HEAP32[$45 >> 2] = $8; //@line 37069
 $46 = $ReallocAsyncCtx + 20 | 0; //@line 37070
 HEAP32[$46 >> 2] = $10; //@line 37071
 $47 = $ReallocAsyncCtx + 24 | 0; //@line 37072
 HEAP32[$47 >> 2] = $12; //@line 37073
 $48 = $ReallocAsyncCtx + 28 | 0; //@line 37074
 HEAP32[$48 >> 2] = $14; //@line 37075
 $49 = $ReallocAsyncCtx + 32 | 0; //@line 37076
 HEAP32[$49 >> 2] = $16; //@line 37077
 $50 = $ReallocAsyncCtx + 36 | 0; //@line 37078
 HEAP32[$50 >> 2] = $18; //@line 37079
 $51 = $ReallocAsyncCtx + 40 | 0; //@line 37080
 HEAP32[$51 >> 2] = $20; //@line 37081
 sp = STACKTOP; //@line 37082
 return;
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12514
      $10 = HEAP32[$9 >> 2] | 0; //@line 12515
      HEAP32[$2 >> 2] = $9 + 4; //@line 12517
      HEAP32[$0 >> 2] = $10; //@line 12518
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12534
      $17 = HEAP32[$16 >> 2] | 0; //@line 12535
      HEAP32[$2 >> 2] = $16 + 4; //@line 12537
      $20 = $0; //@line 12540
      HEAP32[$20 >> 2] = $17; //@line 12542
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 12545
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12561
      $30 = HEAP32[$29 >> 2] | 0; //@line 12562
      HEAP32[$2 >> 2] = $29 + 4; //@line 12564
      $31 = $0; //@line 12565
      HEAP32[$31 >> 2] = $30; //@line 12567
      HEAP32[$31 + 4 >> 2] = 0; //@line 12570
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 12586
      $41 = $40; //@line 12587
      $43 = HEAP32[$41 >> 2] | 0; //@line 12589
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 12592
      HEAP32[$2 >> 2] = $40 + 8; //@line 12594
      $47 = $0; //@line 12595
      HEAP32[$47 >> 2] = $43; //@line 12597
      HEAP32[$47 + 4 >> 2] = $46; //@line 12600
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12616
      $57 = HEAP32[$56 >> 2] | 0; //@line 12617
      HEAP32[$2 >> 2] = $56 + 4; //@line 12619
      $59 = ($57 & 65535) << 16 >> 16; //@line 12621
      $62 = $0; //@line 12624
      HEAP32[$62 >> 2] = $59; //@line 12626
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 12629
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12645
      $72 = HEAP32[$71 >> 2] | 0; //@line 12646
      HEAP32[$2 >> 2] = $71 + 4; //@line 12648
      $73 = $0; //@line 12650
      HEAP32[$73 >> 2] = $72 & 65535; //@line 12652
      HEAP32[$73 + 4 >> 2] = 0; //@line 12655
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12671
      $83 = HEAP32[$82 >> 2] | 0; //@line 12672
      HEAP32[$2 >> 2] = $82 + 4; //@line 12674
      $85 = ($83 & 255) << 24 >> 24; //@line 12676
      $88 = $0; //@line 12679
      HEAP32[$88 >> 2] = $85; //@line 12681
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 12684
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12700
      $98 = HEAP32[$97 >> 2] | 0; //@line 12701
      HEAP32[$2 >> 2] = $97 + 4; //@line 12703
      $99 = $0; //@line 12705
      HEAP32[$99 >> 2] = $98 & 255; //@line 12707
      HEAP32[$99 + 4 >> 2] = 0; //@line 12710
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 12726
      $109 = +HEAPF64[$108 >> 3]; //@line 12727
      HEAP32[$2 >> 2] = $108 + 8; //@line 12729
      HEAPF64[$0 >> 3] = $109; //@line 12730
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 12746
      $116 = +HEAPF64[$115 >> 3]; //@line 12747
      HEAP32[$2 >> 2] = $115 + 8; //@line 12749
      HEAPF64[$0 >> 3] = $116; //@line 12750
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZN12radio_eventsD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $37 = 0, $41 = 0, $44 = 0, $47 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10850
 $2 = HEAP32[$0 + 108 >> 2] | 0; //@line 10852
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 10858
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10859
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 96 | 0); //@line 10860
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 343; //@line 10863
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10865
    sp = STACKTOP; //@line 10866
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10869
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 92 >> 2] | 0; //@line 10875
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 10881
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10882
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 80 | 0); //@line 10883
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 344; //@line 10886
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 10888
    sp = STACKTOP; //@line 10889
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10892
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 76 >> 2] | 0; //@line 10898
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 10904
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10905
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 64 | 0); //@line 10906
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 345; //@line 10909
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 10911
    sp = STACKTOP; //@line 10912
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 10915
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 60 >> 2] | 0; //@line 10921
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 10927
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10928
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 48 | 0); //@line 10929
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 346; //@line 10932
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 10934
    sp = STACKTOP; //@line 10935
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 10938
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 44 >> 2] | 0; //@line 10944
 do {
  if ($30 | 0) {
   $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 10950
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10951
   FUNCTION_TABLE_vi[$34 & 1023]($0 + 32 | 0); //@line 10952
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 347; //@line 10955
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 10957
    sp = STACKTOP; //@line 10958
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 10961
    break;
   }
  }
 } while (0);
 $37 = HEAP32[$0 + 28 >> 2] | 0; //@line 10967
 do {
  if ($37 | 0) {
   $41 = HEAP32[$37 + 8 >> 2] | 0; //@line 10973
   $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10974
   FUNCTION_TABLE_vi[$41 & 1023]($0 + 16 | 0); //@line 10975
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 348; //@line 10978
    HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 10980
    sp = STACKTOP; //@line 10981
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 10984
    break;
   }
  }
 } while (0);
 $44 = HEAP32[$0 + 12 >> 2] | 0; //@line 10990
 if (!$44) {
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 10996
 $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10997
 FUNCTION_TABLE_vi[$47 & 1023]($0); //@line 10998
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 349; //@line 11001
  sp = STACKTOP; //@line 11002
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 11005
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_176($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 33352
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33356
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33358
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33360
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33362
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33364
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33366
 $15 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 33367
 if (!$15) {
  $24 = HEAP32[$4 >> 2] | 0; //@line 33370
  $26 = $12 + 12 | 0; //@line 33372
  HEAP32[$12 >> 2] = 529; //@line 33373
  HEAP32[$12 + 4 >> 2] = 0; //@line 33375
  HEAP32[$12 + 8 >> 2] = $6; //@line 33377
  HEAP32[$26 >> 2] = 848; //@line 33378
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(28) | 0; //@line 33379
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($24, $6 + 1036 | 0, $12); //@line 33380
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 530; //@line 33383
   $27 = $ReallocAsyncCtx8 + 4 | 0; //@line 33384
   HEAP32[$27 >> 2] = $4; //@line 33385
   $28 = $ReallocAsyncCtx8 + 8 | 0; //@line 33386
   HEAP32[$28 >> 2] = $6; //@line 33387
   $29 = $ReallocAsyncCtx8 + 12 | 0; //@line 33388
   HEAP32[$29 >> 2] = $8; //@line 33389
   $30 = $ReallocAsyncCtx8 + 16 | 0; //@line 33390
   HEAP32[$30 >> 2] = $10; //@line 33391
   $31 = $ReallocAsyncCtx8 + 20 | 0; //@line 33392
   HEAP32[$31 >> 2] = $26; //@line 33393
   $32 = $ReallocAsyncCtx8 + 24 | 0; //@line 33394
   HEAP32[$32 >> 2] = $12; //@line 33395
   sp = STACKTOP; //@line 33396
   return;
  }
  ___async_unwind = 0; //@line 33399
  HEAP32[$ReallocAsyncCtx8 >> 2] = 530; //@line 33400
  $27 = $ReallocAsyncCtx8 + 4 | 0; //@line 33401
  HEAP32[$27 >> 2] = $4; //@line 33402
  $28 = $ReallocAsyncCtx8 + 8 | 0; //@line 33403
  HEAP32[$28 >> 2] = $6; //@line 33404
  $29 = $ReallocAsyncCtx8 + 12 | 0; //@line 33405
  HEAP32[$29 >> 2] = $8; //@line 33406
  $30 = $ReallocAsyncCtx8 + 16 | 0; //@line 33407
  HEAP32[$30 >> 2] = $10; //@line 33408
  $31 = $ReallocAsyncCtx8 + 20 | 0; //@line 33409
  HEAP32[$31 >> 2] = $26; //@line 33410
  $32 = $ReallocAsyncCtx8 + 24 | 0; //@line 33411
  HEAP32[$32 >> 2] = $12; //@line 33412
  sp = STACKTOP; //@line 33413
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 33417
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 33418
  FUNCTION_TABLE_vi[$18 & 1023]($14); //@line 33419
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 528; //@line 33422
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 33423
   HEAP32[$19 >> 2] = $4; //@line 33424
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 33425
   HEAP32[$20 >> 2] = $6; //@line 33426
   $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 33427
   HEAP32[$21 >> 2] = $10; //@line 33428
   $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 33429
   HEAP32[$22 >> 2] = $12; //@line 33430
   $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 33431
   HEAP32[$23 >> 2] = $8; //@line 33432
   sp = STACKTOP; //@line 33433
   return;
  }
  ___async_unwind = 0; //@line 33436
  HEAP32[$ReallocAsyncCtx2 >> 2] = 528; //@line 33437
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 33438
  HEAP32[$19 >> 2] = $4; //@line 33439
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 33440
  HEAP32[$20 >> 2] = $6; //@line 33441
  $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 33442
  HEAP32[$21 >> 2] = $10; //@line 33443
  $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 33444
  HEAP32[$22 >> 2] = $12; //@line 33445
  $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 33446
  HEAP32[$23 >> 2] = $8; //@line 33447
  sp = STACKTOP; //@line 33448
  return;
 }
}
function __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$011 = 0, $$pre$phi13Z2D = 0, $13 = 0, $14 = 0, $3 = 0, $30 = 0, $33 = 0, $35 = 0, $36 = 0, $40 = 0, $5 = 0, $51 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 18342
 STACKTOP = STACKTOP + 16 | 0; //@line 18343
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18343
 $vararg_buffer1 = sp + 8 | 0; //@line 18344
 $vararg_buffer = sp; //@line 18345
 $3 = $0 + 4 | 0; //@line 18346
 $5 = (__ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($3) | 0) & 255; //@line 18348
 $8 = ((__ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($3) | 0) & 255) + $5 | 0; //@line 18351
 if (!$2) {
  $$011 = -1003; //@line 18354
  STACKTOP = sp; //@line 18355
  return $$011 | 0; //@line 18355
 }
 do {
  if (!(HEAP8[$0 + 1156 >> 0] | 0)) {
   $$pre$phi13Z2D = $0 + 1097 | 0; //@line 18363
  } else {
   $13 = HEAP32[$0 >> 2] | 0; //@line 18365
   $14 = $0 + 1097 | 0; //@line 18366
   $AsyncCtx5 = _emscripten_alloc_async_context(48, sp) | 0; //@line 18369
   __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($13, 0, $14, $0 + 1096 | 0, $0 + 964 | 0) | 0; //@line 18370
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 544; //@line 18373
    HEAP32[$AsyncCtx5 + 4 >> 2] = $14; //@line 18375
    HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 18377
    HEAP32[$AsyncCtx5 + 12 >> 2] = $0; //@line 18379
    HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 18381
    HEAP32[$AsyncCtx5 + 20 >> 2] = $8; //@line 18383
    HEAP32[$AsyncCtx5 + 24 >> 2] = $3; //@line 18385
    HEAP32[$AsyncCtx5 + 28 >> 2] = $vararg_buffer; //@line 18387
    HEAP32[$AsyncCtx5 + 32 >> 2] = $vararg_buffer; //@line 18389
    HEAP32[$AsyncCtx5 + 36 >> 2] = $vararg_buffer1; //@line 18391
    HEAP32[$AsyncCtx5 + 40 >> 2] = $vararg_buffer1; //@line 18393
    HEAP8[$AsyncCtx5 + 44 >> 0] = $1; //@line 18395
    sp = STACKTOP; //@line 18396
    STACKTOP = sp; //@line 18397
    return 0; //@line 18397
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 18399
    $$pre$phi13Z2D = $14; //@line 18400
    break;
   }
  }
 } while (0);
 $30 = $0 + 369 | 0; //@line 18407
 $33 = __ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, HEAP8[$$pre$phi13Z2D >> 0] | 0, (HEAP8[$30 >> 0] | 0) != 0) | 0; //@line 18410
 HEAP8[$2 + 1 >> 0] = $33; //@line 18412
 $35 = $33 & 255; //@line 18413
 $36 = $8 & 255; //@line 18414
 if ($36 >>> 0 > $35 >>> 0) {
  HEAP8[$2 >> 0] = $33; //@line 18417
  __ZN14LoRaMacCommand20clear_command_bufferEv($3); //@line 18418
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($3); //@line 18419
  $$0 = 0; //@line 18420
 } else {
  HEAP8[$2 >> 0] = $35 - $8; //@line 18424
  $$0 = $36; //@line 18425
 }
 $40 = HEAP8[$$pre$phi13Z2D >> 0] | 0; //@line 18427
 _printf(12967, $vararg_buffer) | 0; //@line 18428
 _printf(13293, $vararg_buffer1) | 0; //@line 18429
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 18430
 _putchar(10) | 0; //@line 18431
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 545; //@line 18434
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 18436
  HEAP32[$AsyncCtx + 8 >> 2] = $30; //@line 18438
  HEAP8[$AsyncCtx + 12 >> 0] = $40; //@line 18440
  HEAP8[$AsyncCtx + 13 >> 0] = $1; //@line 18442
  HEAP32[$AsyncCtx + 16 >> 2] = $$0; //@line 18444
  sp = STACKTOP; //@line 18445
  STACKTOP = sp; //@line 18446
  return 0; //@line 18446
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 18448
 $51 = $$0 + ($1 & 255) | 0; //@line 18454
 $or$cond$i = $51 >>> 0 < 256 & $51 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, $40, (HEAP8[$30 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 18458
 $$011 = $or$cond$i ? 0 : -1010; //@line 18460
 STACKTOP = sp; //@line 18461
 return $$011 | 0; //@line 18461
}
function _mbedtls_ccm_free($0) {
 $0 = $0 | 0;
 var $13 = 0, $17 = 0, $21 = 0, $25 = 0, $29 = 0, $33 = 0, $37 = 0, $41 = 0, $45 = 0, $49 = 0, $5 = 0, $53 = 0, $57 = 0, $61 = 0, $65 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1387
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1388
 _mbedtls_cipher_free($0); //@line 1389
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 671; //@line 1392
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1394
  sp = STACKTOP; //@line 1395
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1398
  HEAP8[$0 >> 0] = 0; //@line 1400
  HEAP8[$0 + 1 >> 0] = 0; //@line 1402
  HEAP8[$0 + 2 >> 0] = 0; //@line 1404
  $5 = $0 + 4 | 0; //@line 1405
  HEAP8[$0 + 3 >> 0] = 0; //@line 1406
  HEAP8[$5 >> 0] = 0; //@line 1408
  HEAP8[$5 + 1 >> 0] = 0; //@line 1410
  HEAP8[$5 + 2 >> 0] = 0; //@line 1412
  $9 = $5 + 4 | 0; //@line 1413
  HEAP8[$5 + 3 >> 0] = 0; //@line 1414
  HEAP8[$9 >> 0] = 0; //@line 1416
  HEAP8[$9 + 1 >> 0] = 0; //@line 1418
  HEAP8[$9 + 2 >> 0] = 0; //@line 1420
  $13 = $5 + 8 | 0; //@line 1421
  HEAP8[$9 + 3 >> 0] = 0; //@line 1422
  HEAP8[$13 >> 0] = 0; //@line 1424
  HEAP8[$13 + 1 >> 0] = 0; //@line 1426
  HEAP8[$13 + 2 >> 0] = 0; //@line 1428
  $17 = $5 + 12 | 0; //@line 1429
  HEAP8[$13 + 3 >> 0] = 0; //@line 1430
  HEAP8[$17 >> 0] = 0; //@line 1432
  HEAP8[$17 + 1 >> 0] = 0; //@line 1434
  HEAP8[$17 + 2 >> 0] = 0; //@line 1436
  $21 = $5 + 16 | 0; //@line 1437
  HEAP8[$17 + 3 >> 0] = 0; //@line 1438
  HEAP8[$21 >> 0] = 0; //@line 1440
  HEAP8[$21 + 1 >> 0] = 0; //@line 1442
  HEAP8[$21 + 2 >> 0] = 0; //@line 1444
  $25 = $5 + 20 | 0; //@line 1445
  HEAP8[$21 + 3 >> 0] = 0; //@line 1446
  HEAP8[$25 >> 0] = 0; //@line 1448
  HEAP8[$25 + 1 >> 0] = 0; //@line 1450
  HEAP8[$25 + 2 >> 0] = 0; //@line 1452
  $29 = $5 + 24 | 0; //@line 1453
  HEAP8[$25 + 3 >> 0] = 0; //@line 1454
  HEAP8[$29 >> 0] = 0; //@line 1456
  HEAP8[$29 + 1 >> 0] = 0; //@line 1458
  HEAP8[$29 + 2 >> 0] = 0; //@line 1460
  $33 = $5 + 28 | 0; //@line 1461
  HEAP8[$29 + 3 >> 0] = 0; //@line 1462
  HEAP8[$33 >> 0] = 0; //@line 1464
  HEAP8[$33 + 1 >> 0] = 0; //@line 1466
  HEAP8[$33 + 2 >> 0] = 0; //@line 1468
  $37 = $5 + 32 | 0; //@line 1469
  HEAP8[$33 + 3 >> 0] = 0; //@line 1470
  HEAP8[$37 >> 0] = 0; //@line 1472
  HEAP8[$37 + 1 >> 0] = 0; //@line 1474
  HEAP8[$37 + 2 >> 0] = 0; //@line 1476
  $41 = $5 + 36 | 0; //@line 1477
  HEAP8[$37 + 3 >> 0] = 0; //@line 1478
  HEAP8[$41 >> 0] = 0; //@line 1480
  HEAP8[$41 + 1 >> 0] = 0; //@line 1482
  HEAP8[$41 + 2 >> 0] = 0; //@line 1484
  $45 = $5 + 40 | 0; //@line 1485
  HEAP8[$41 + 3 >> 0] = 0; //@line 1486
  HEAP8[$45 >> 0] = 0; //@line 1488
  HEAP8[$45 + 1 >> 0] = 0; //@line 1490
  HEAP8[$45 + 2 >> 0] = 0; //@line 1492
  $49 = $5 + 44 | 0; //@line 1493
  HEAP8[$45 + 3 >> 0] = 0; //@line 1494
  HEAP8[$49 >> 0] = 0; //@line 1496
  HEAP8[$49 + 1 >> 0] = 0; //@line 1498
  HEAP8[$49 + 2 >> 0] = 0; //@line 1500
  $53 = $5 + 48 | 0; //@line 1501
  HEAP8[$49 + 3 >> 0] = 0; //@line 1502
  HEAP8[$53 >> 0] = 0; //@line 1504
  HEAP8[$53 + 1 >> 0] = 0; //@line 1506
  HEAP8[$53 + 2 >> 0] = 0; //@line 1508
  $57 = $5 + 52 | 0; //@line 1509
  HEAP8[$53 + 3 >> 0] = 0; //@line 1510
  HEAP8[$57 >> 0] = 0; //@line 1512
  HEAP8[$57 + 1 >> 0] = 0; //@line 1514
  HEAP8[$57 + 2 >> 0] = 0; //@line 1516
  $61 = $5 + 56 | 0; //@line 1517
  HEAP8[$57 + 3 >> 0] = 0; //@line 1518
  HEAP8[$61 >> 0] = 0; //@line 1520
  HEAP8[$61 + 1 >> 0] = 0; //@line 1522
  HEAP8[$61 + 2 >> 0] = 0; //@line 1524
  $65 = $5 + 60 | 0; //@line 1525
  HEAP8[$61 + 3 >> 0] = 0; //@line 1526
  HEAP8[$65 >> 0] = 0; //@line 1528
  HEAP8[$65 + 1 >> 0] = 0; //@line 1530
  HEAP8[$65 + 2 >> 0] = 0; //@line 1532
  HEAP8[$65 + 3 >> 0] = 0; //@line 1533
  return;
 }
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 11414
 STACKTOP = STACKTOP + 224 | 0; //@line 11415
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 11415
 $3 = sp + 120 | 0; //@line 11416
 $4 = sp + 80 | 0; //@line 11417
 $5 = sp; //@line 11418
 $6 = sp + 136 | 0; //@line 11419
 dest = $4; //@line 11420
 stop = dest + 40 | 0; //@line 11420
 do {
  HEAP32[dest >> 2] = 0; //@line 11420
  dest = dest + 4 | 0; //@line 11420
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 11422
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 11426
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 11433
  } else {
   $43 = 0; //@line 11435
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 11437
  $14 = $13 & 32; //@line 11438
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 11444
  }
  $19 = $0 + 48 | 0; //@line 11446
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 11451
    $24 = HEAP32[$23 >> 2] | 0; //@line 11452
    HEAP32[$23 >> 2] = $6; //@line 11453
    $25 = $0 + 28 | 0; //@line 11454
    HEAP32[$25 >> 2] = $6; //@line 11455
    $26 = $0 + 20 | 0; //@line 11456
    HEAP32[$26 >> 2] = $6; //@line 11457
    HEAP32[$19 >> 2] = 80; //@line 11458
    $28 = $0 + 16 | 0; //@line 11460
    HEAP32[$28 >> 2] = $6 + 80; //@line 11461
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 11462
    if (!$24) {
     $$1 = $29; //@line 11465
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 11468
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 11469
     FUNCTION_TABLE_iiii[$32 & 15]($0, 0, 0) | 0; //@line 11470
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 776; //@line 11473
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 11475
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 11477
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 11479
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 11481
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 11483
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 11485
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 11487
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 11489
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 11491
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 11493
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 11495
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 11497
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 11499
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 11501
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 11503
      sp = STACKTOP; //@line 11504
      STACKTOP = sp; //@line 11505
      return 0; //@line 11505
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 11507
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 11510
      HEAP32[$23 >> 2] = $24; //@line 11511
      HEAP32[$19 >> 2] = 0; //@line 11512
      HEAP32[$28 >> 2] = 0; //@line 11513
      HEAP32[$25 >> 2] = 0; //@line 11514
      HEAP32[$26 >> 2] = 0; //@line 11515
      $$1 = $$; //@line 11516
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 11522
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 11525
  HEAP32[$0 >> 2] = $51 | $14; //@line 11530
  if ($43 | 0) {
   ___unlockfile($0); //@line 11533
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 11535
 }
 STACKTOP = sp; //@line 11537
 return $$0 | 0; //@line 11537
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_120($0) {
 $0 = $0 | 0;
 var $$ = 0, $$sink = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $30 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $6 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 30312
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30316
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30318
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30320
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30322
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 30324
 $14 = HEAP8[$0 + 25 >> 0] | 0; //@line 30326
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 30328
 $18 = HEAP8[$0 + 27 >> 0] | 0; //@line 30330
 $20 = HEAP8[$0 + 28 >> 0] | 0; //@line 30332
 $22 = HEAP16[$0 + 30 >> 1] | 0; //@line 30334
 $24 = HEAP16[$0 + 32 >> 1] | 0; //@line 30336
 $26 = HEAP32[$0 + 36 >> 2] | 0; //@line 30338
 $30 = HEAP32[$0 + 44 >> 2] | 0; //@line 30342
 $34 = HEAP8[$0 + 52 >> 0] | 0; //@line 30346
 $36 = HEAP8[$0 + 53 >> 0] | 0; //@line 30348
 $38 = HEAP8[$0 + 54 >> 0] | 0; //@line 30350
 $40 = HEAP32[$0 + 56 >> 2] | 0; //@line 30352
 $44 = HEAP32[$0 + 64 >> 2] | 0; //@line 30356
 switch (HEAP32[$0 + 4 >> 2] | 0) {
 case 0:
  {
   HEAP32[$4 + 704 >> 2] = $6; //@line 30362
   HEAP32[$4 + 712 >> 2] = $8; //@line 30364
   HEAP32[$4 + 708 >> 2] = $10; //@line 30366
   HEAP8[$4 + 718 >> 0] = $12; //@line 30368
   HEAP8[$4 + 719 >> 0] = $14; //@line 30370
   HEAP8[$4 + 720 >> 0] = $16; //@line 30372
   HEAP8[$4 + 721 >> 0] = $18; //@line 30374
   HEAP8[$4 + 722 >> 0] = $20; //@line 30376
   HEAP16[$4 + 716 >> 1] = $22; //@line 30378
   HEAP32[$4 + 728 >> 2] = ~~(1.0 / +($8 >>> 0) * 8.0 * +($24 & 65535) * 1.0e3) >>> 0; //@line 30387
   _printf(10904, $26) | 0; //@line 30388
   _printf(11537, $30) | 0; //@line 30389
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 30390
   _putchar(10) | 0; //@line 30391
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 61; //@line 30394
    sp = STACKTOP; //@line 30395
    return;
   }
   ___async_unwind = 0; //@line 30398
   HEAP32[$ReallocAsyncCtx2 >> 2] = 61; //@line 30399
   sp = STACKTOP; //@line 30400
   return;
  }
 case 1:
  {
   if ($6 >>> 0 > 2) {
    while (1) {}
   }
   $65 = $6 + 7 | 0; //@line 30410
   HEAP32[$4 + 752 >> 2] = $65; //@line 30412
   HEAP32[$4 + 756 >> 2] = $8; //@line 30414
   HEAP8[$4 + 761 >> 0] = $34; //@line 30416
   HEAP16[$4 + 762 >> 1] = $22; //@line 30418
   HEAP8[$4 + 764 >> 0] = $12; //@line 30420
   HEAP8[$4 + 765 >> 0] = $14; //@line 30422
   HEAP8[$4 + 766 >> 0] = $16; //@line 30424
   HEAP8[$4 + 767 >> 0] = $36; //@line 30426
   HEAP8[$4 + 768 >> 0] = $38; //@line 30428
   HEAP8[$4 + 769 >> 0] = $18; //@line 30430
   HEAP8[$4 + 770 >> 0] = $20; //@line 30432
   $$ = $8 >>> 0 > 6 ? $8 : 6; //@line 30434
   if (($6 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 10; //@line 30442
   } else {
    if (($65 | 0) == 8 & $$ >>> 0 > 11) {
     label = 10; //@line 30448
    } else {
     $$sink = 0; //@line 30450
    }
   }
   if ((label | 0) == 10) {
    $$sink = 1; //@line 30454
   }
   HEAP8[$4 + 760 >> 0] = $$sink; //@line 30457
   _printf(10904, $40) | 0; //@line 30458
   _printf(11518, $44) | 0; //@line 30459
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 30460
   _putchar(10) | 0; //@line 30461
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 62; //@line 30464
    sp = STACKTOP; //@line 30465
    return;
   }
   ___async_unwind = 0; //@line 30468
   HEAP32[$ReallocAsyncCtx >> 2] = 62; //@line 30469
   sp = STACKTOP; //@line 30470
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_217($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 36717
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36719
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36721
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36723
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36725
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36727
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 36731
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 36737
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 36741
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 36743
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 36745
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 36747
 $33 = (HEAP8[$14 + 770 >> 0] | 0) == 0; //@line 36750
 _printf(10904, HEAP32[$0 + 32 >> 2] | 0) | 0; //@line 36751
 if ($33) {
  HEAP32[$10 >> 2] = 6; //@line 36753
  _printf(10970, $10) | 0; //@line 36754
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 36755
  _putchar(10) | 0; //@line 36756
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 80; //@line 36759
   $39 = $ReallocAsyncCtx8 + 4 | 0; //@line 36760
   HEAP32[$39 >> 2] = $14; //@line 36761
   $40 = $ReallocAsyncCtx8 + 8 | 0; //@line 36762
   HEAP32[$40 >> 2] = $24; //@line 36763
   $41 = $ReallocAsyncCtx8 + 12 | 0; //@line 36764
   HEAP32[$41 >> 2] = $26; //@line 36765
   $42 = $ReallocAsyncCtx8 + 16 | 0; //@line 36766
   HEAP32[$42 >> 2] = $28; //@line 36767
   $43 = $ReallocAsyncCtx8 + 20 | 0; //@line 36768
   HEAP32[$43 >> 2] = $30; //@line 36769
   sp = STACKTOP; //@line 36770
   return;
  }
  ___async_unwind = 0; //@line 36773
  HEAP32[$ReallocAsyncCtx8 >> 2] = 80; //@line 36774
  $39 = $ReallocAsyncCtx8 + 4 | 0; //@line 36775
  HEAP32[$39 >> 2] = $14; //@line 36776
  $40 = $ReallocAsyncCtx8 + 8 | 0; //@line 36777
  HEAP32[$40 >> 2] = $24; //@line 36778
  $41 = $ReallocAsyncCtx8 + 12 | 0; //@line 36779
  HEAP32[$41 >> 2] = $26; //@line 36780
  $42 = $ReallocAsyncCtx8 + 16 | 0; //@line 36781
  HEAP32[$42 >> 2] = $28; //@line 36782
  $43 = $ReallocAsyncCtx8 + 20 | 0; //@line 36783
  HEAP32[$43 >> 2] = $30; //@line 36784
  sp = STACKTOP; //@line 36785
  return;
 } else {
  HEAP32[$20 >> 2] = 5; //@line 36788
  _printf(10970, $20) | 0; //@line 36789
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 36790
  _putchar(10) | 0; //@line 36791
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 77; //@line 36794
   $34 = $ReallocAsyncCtx10 + 4 | 0; //@line 36795
   HEAP32[$34 >> 2] = $14; //@line 36796
   $35 = $ReallocAsyncCtx10 + 8 | 0; //@line 36797
   HEAP32[$35 >> 2] = $2; //@line 36798
   $36 = $ReallocAsyncCtx10 + 12 | 0; //@line 36799
   HEAP32[$36 >> 2] = $4; //@line 36800
   $37 = $ReallocAsyncCtx10 + 16 | 0; //@line 36801
   HEAP32[$37 >> 2] = $6; //@line 36802
   $38 = $ReallocAsyncCtx10 + 20 | 0; //@line 36803
   HEAP32[$38 >> 2] = $8; //@line 36804
   sp = STACKTOP; //@line 36805
   return;
  }
  ___async_unwind = 0; //@line 36808
  HEAP32[$ReallocAsyncCtx10 >> 2] = 77; //@line 36809
  $34 = $ReallocAsyncCtx10 + 4 | 0; //@line 36810
  HEAP32[$34 >> 2] = $14; //@line 36811
  $35 = $ReallocAsyncCtx10 + 8 | 0; //@line 36812
  HEAP32[$35 >> 2] = $2; //@line 36813
  $36 = $ReallocAsyncCtx10 + 12 | 0; //@line 36814
  HEAP32[$36 >> 2] = $4; //@line 36815
  $37 = $ReallocAsyncCtx10 + 16 | 0; //@line 36816
  HEAP32[$37 >> 2] = $6; //@line 36817
  $38 = $ReallocAsyncCtx10 + 20 | 0; //@line 36818
  HEAP32[$38 >> 2] = $8; //@line 36819
  sp = STACKTOP; //@line 36820
  return;
 }
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb($0) {
 $0 = $0 | 0;
 var $$1 = 0, $13 = 0, $19 = 0, $2 = 0, $21 = 0, $25 = 0, $29 = 0, $33 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21826
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21828
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21830
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21832
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21834
 if (HEAP32[$2 + 968 >> 2] | 0) {
  $$1 = -1e3; //@line 21839
  $46 = ___async_retval; //@line 21840
  HEAP32[$46 >> 2] = $$1; //@line 21841
  return;
 }
 $13 = HEAP8[$4 + 5 >> 0] | 0; //@line 21845
 if ($13 << 24 >> 24 > (__ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$2 >> 2] | 0) | 0) << 24 >> 24) {
  $29 = $13; //@line 21850
 } else {
  $29 = __ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$2 >> 2] | 0) | 0; //@line 21854
 }
 HEAP8[$8 >> 0] = 0; //@line 21856
 $19 = $2 + 288 | 0; //@line 21857
 __ZN11LoRaMacMcps18reset_confirmationEv($19); //@line 21858
 HEAP8[$2 + 895 >> 0] = 1; //@line 21860
 $21 = $2 + 894 | 0; //@line 21861
 HEAP8[$21 >> 0] = 1; //@line 21862
 switch (HEAP32[$4 >> 2] | 0) {
 case 0:
  {
   HEAP8[$8 >> 0] = 64; //@line 21866
   label = 9; //@line 21867
   break;
  }
 case 1:
  {
   HEAP8[$8 >> 0] = -128; //@line 21871
   HEAP8[$21 >> 0] = HEAP8[$4 + 6 >> 0] | 0; //@line 21874
   label = 9; //@line 21875
   break;
  }
 case 3:
  {
   HEAP8[$8 >> 0] = -32; //@line 21879
   label = 9; //@line 21880
   break;
  }
 default:
  {}
 }
 do {
  if ((label | 0) == 9) {
   $25 = $2 + 1156 | 0; //@line 21888
   if (!(HEAP8[$25 >> 0] | 0)) {
    if (!(__ZN7LoRaPHY18verify_tx_datarateEhb(HEAP32[$2 >> 2] | 0, $29, 0) | 0)) {
     break;
    }
    HEAP8[$2 + 1097 >> 0] = $29; //@line 21898
    $38 = HEAP8[$25 >> 0] << 7 & 255; //@line 21901
   } else {
    $38 = -128; //@line 21903
   }
   $33 = HEAP8[$4 + 4 >> 0] | 0; //@line 21906
   $35 = HEAP32[$4 + 8 >> 2] | 0; //@line 21908
   $37 = HEAP16[$4 + 12 >> 1] | 0; //@line 21910
   HEAP8[$6 >> 0] = $38; //@line 21911
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 21912
   $39 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($2, $8, $6, $33, $35, $37) | 0; //@line 21913
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 558; //@line 21916
    $40 = $ReallocAsyncCtx2 + 4 | 0; //@line 21917
    HEAP32[$40 >> 2] = $19; //@line 21918
    $41 = $ReallocAsyncCtx2 + 8 | 0; //@line 21919
    HEAP32[$41 >> 2] = $2; //@line 21920
    $42 = $ReallocAsyncCtx2 + 12 | 0; //@line 21921
    HEAP32[$42 >> 2] = $6; //@line 21922
    $43 = $ReallocAsyncCtx2 + 16 | 0; //@line 21923
    HEAP32[$43 >> 2] = $8; //@line 21924
    $44 = $ReallocAsyncCtx2 + 20 | 0; //@line 21925
    HEAP32[$44 >> 2] = $4; //@line 21926
    sp = STACKTOP; //@line 21927
    return;
   }
   HEAP32[___async_retval >> 2] = $39; //@line 21931
   ___async_unwind = 0; //@line 21932
   HEAP32[$ReallocAsyncCtx2 >> 2] = 558; //@line 21933
   $40 = $ReallocAsyncCtx2 + 4 | 0; //@line 21934
   HEAP32[$40 >> 2] = $19; //@line 21935
   $41 = $ReallocAsyncCtx2 + 8 | 0; //@line 21936
   HEAP32[$41 >> 2] = $2; //@line 21937
   $42 = $ReallocAsyncCtx2 + 12 | 0; //@line 21938
   HEAP32[$42 >> 2] = $6; //@line 21939
   $43 = $ReallocAsyncCtx2 + 16 | 0; //@line 21940
   HEAP32[$43 >> 2] = $8; //@line 21941
   $44 = $ReallocAsyncCtx2 + 20 | 0; //@line 21942
   HEAP32[$44 >> 2] = $4; //@line 21943
   sp = STACKTOP; //@line 21944
   return;
  }
 } while (0);
 $$1 = -1003; //@line 21948
 $46 = ___async_retval; //@line 21949
 HEAP32[$46 >> 2] = $$1; //@line 21950
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_207($0) {
 $0 = $0 | 0;
 var $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $29 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 35748
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35754
 $14 = HEAP8[$0 + 19 >> 0] | 0; //@line 35764
 $16 = HEAP32[$0 + 20 >> 2] | 0; //@line 35766
 $18 = HEAP32[$0 + 24 >> 2] | 0; //@line 35768
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 35770
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 35772
 $29 = HEAP32[$6 >> 2] | 0; //@line 35779
 $32 = HEAP32[(HEAP32[$29 >> 2] | 0) + 20 >> 2] | 0; //@line 35782
 $34 = HEAP8[$0 + 17 >> 0] & 1 ? 2 : HEAP8[$0 + 16 >> 0] & 1; //@line 35784
 $35 = HEAP8[$0 + 18 >> 0] | 0; //@line 35785
 if ((HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) == (HEAPU8[(HEAP32[$0 + 8 >> 2] | 0) + 27 >> 0] | 0)) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 35788
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 0, $14, 25e3, $34, $35 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 35789
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 628; //@line 35792
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 35793
   HEAP32[$37 >> 2] = $6; //@line 35794
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 35795
   HEAP32[$38 >> 2] = $16; //@line 35796
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 35797
   HEAP32[$39 >> 2] = $18; //@line 35798
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 35799
   HEAP32[$40 >> 2] = $20; //@line 35800
   $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 35801
   HEAP32[$41 >> 2] = $22; //@line 35802
   sp = STACKTOP; //@line 35803
   return;
  }
  ___async_unwind = 0; //@line 35806
  HEAP32[$ReallocAsyncCtx3 >> 2] = 628; //@line 35807
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 35808
  HEAP32[$37 >> 2] = $6; //@line 35809
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 35810
  HEAP32[$38 >> 2] = $16; //@line 35811
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 35812
  HEAP32[$39 >> 2] = $18; //@line 35813
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 35814
  HEAP32[$40 >> 2] = $20; //@line 35815
  $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 35816
  HEAP32[$41 >> 2] = $22; //@line 35817
  sp = STACKTOP; //@line 35818
  return;
 } else {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 35821
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 1, $14, 0, $34, $35, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 35822
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 629; //@line 35825
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 35826
   HEAP32[$42 >> 2] = $6; //@line 35827
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 35828
   HEAP32[$43 >> 2] = $16; //@line 35829
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 35830
   HEAP32[$44 >> 2] = $18; //@line 35831
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 35832
   HEAP32[$45 >> 2] = $20; //@line 35833
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 35834
   HEAP32[$46 >> 2] = $22; //@line 35835
   sp = STACKTOP; //@line 35836
   return;
  }
  ___async_unwind = 0; //@line 35839
  HEAP32[$ReallocAsyncCtx4 >> 2] = 629; //@line 35840
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 35841
  HEAP32[$42 >> 2] = $6; //@line 35842
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 35843
  HEAP32[$43 >> 2] = $16; //@line 35844
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 35845
  HEAP32[$44 >> 2] = $18; //@line 35846
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 35847
  HEAP32[$45 >> 2] = $20; //@line 35848
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 35849
  HEAP32[$46 >> 2] = $22; //@line 35850
  sp = STACKTOP; //@line 35851
  return;
 }
}
function __ZN7LoRaMac11schedule_txEv__async_cb_370($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $24 = 0, $28 = 0, $36 = 0, $4 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25806
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25810
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 25814
 $10 = HEAP8[$0 + 14 >> 0] | 0; //@line 25816
 $12 = HEAP32[$0 + 16 >> 2] | 0; //@line 25818
 $14 = HEAP32[$0 + 20 >> 2] | 0; //@line 25820
 $16 = HEAP32[$0 + 24 >> 2] | 0; //@line 25822
 $18 = HEAP32[$0 + 28 >> 2] | 0; //@line 25824
 $20 = HEAP32[$0 + 32 >> 2] | 0; //@line 25826
 $24 = HEAP32[$0 + 40 >> 2] | 0; //@line 25830
 $28 = HEAP32[$0 + 48 >> 2] | 0; //@line 25834
 $36 = ($10 & 255) + ($8 & 255) | 0; //@line 25842
 if (!($36 >>> 0 < 256 & $36 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0, HEAP8[$0 + 12 >> 0] | 0, (HEAP8[$4 + 369 >> 0] | 0) != 0) | 0) & 255) >>> 0)) {
  HEAP32[___async_retval >> 2] = -1010; //@line 25849
  return;
 }
 HEAP32[$4 + 972 >> 2] = (HEAP32[$4 + 1172 >> 2] | 0) + (HEAP32[$4 + 1112 >> 2] | 0); //@line 25858
 HEAP32[$4 + 976 >> 2] = (HEAP32[$4 + 1196 >> 2] | 0) + (HEAP32[$4 + 1116 >> 2] | 0); //@line 25865
 if (!(HEAP32[$16 >> 2] | 0)) {
  $54 = HEAP8[$18 >> 0] | 0; //@line 25869
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 25870
  __ZN7LoRaMac21send_frame_on_channelEh($4, $54) | 0; //@line 25871
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 493; //@line 25874
   $55 = $ReallocAsyncCtx10 + 4 | 0; //@line 25875
   HEAP32[$55 >> 2] = $12; //@line 25876
   $56 = $ReallocAsyncCtx10 + 8 | 0; //@line 25877
   HEAP32[$56 >> 2] = $14; //@line 25878
   sp = STACKTOP; //@line 25879
   return;
  }
  ___async_unwind = 0; //@line 25882
  HEAP32[$ReallocAsyncCtx10 >> 2] = 493; //@line 25883
  $55 = $ReallocAsyncCtx10 + 4 | 0; //@line 25884
  HEAP32[$55 >> 2] = $12; //@line 25885
  $56 = $ReallocAsyncCtx10 + 8 | 0; //@line 25886
  HEAP32[$56 >> 2] = $14; //@line 25887
  sp = STACKTOP; //@line 25888
  return;
 } else {
  $57 = $4 + 968 | 0; //@line 25891
  HEAP32[$57 >> 2] = HEAP32[$57 >> 2] | 16; //@line 25894
  _printf(13253, $20) | 0; //@line 25895
  HEAP32[$24 >> 2] = HEAP32[$16 >> 2]; //@line 25897
  _printf(13317, $24) | 0; //@line 25898
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 25899
  _putchar(10) | 0; //@line 25900
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 494; //@line 25903
   $61 = $ReallocAsyncCtx6 + 4 | 0; //@line 25904
   HEAP32[$61 >> 2] = $28; //@line 25905
   $62 = $ReallocAsyncCtx6 + 8 | 0; //@line 25906
   HEAP32[$62 >> 2] = $4; //@line 25907
   $63 = $ReallocAsyncCtx6 + 12 | 0; //@line 25908
   HEAP32[$63 >> 2] = $16; //@line 25909
   $64 = $ReallocAsyncCtx6 + 16 | 0; //@line 25910
   HEAP32[$64 >> 2] = $12; //@line 25911
   $65 = $ReallocAsyncCtx6 + 20 | 0; //@line 25912
   HEAP32[$65 >> 2] = $14; //@line 25913
   sp = STACKTOP; //@line 25914
   return;
  }
  ___async_unwind = 0; //@line 25917
  HEAP32[$ReallocAsyncCtx6 >> 2] = 494; //@line 25918
  $61 = $ReallocAsyncCtx6 + 4 | 0; //@line 25919
  HEAP32[$61 >> 2] = $28; //@line 25920
  $62 = $ReallocAsyncCtx6 + 8 | 0; //@line 25921
  HEAP32[$62 >> 2] = $4; //@line 25922
  $63 = $ReallocAsyncCtx6 + 12 | 0; //@line 25923
  HEAP32[$63 >> 2] = $16; //@line 25924
  $64 = $ReallocAsyncCtx6 + 16 | 0; //@line 25925
  HEAP32[$64 >> 2] = $12; //@line 25926
  $65 = $ReallocAsyncCtx6 + 20 | 0; //@line 25927
  HEAP32[$65 >> 2] = $14; //@line 25928
  sp = STACKTOP; //@line 25929
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_419($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 30258
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30260
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30262
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30264
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30268
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30272
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30274
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30276
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30278
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30282
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30286
 switch ($AsyncRetVal | 0) {
 case 0:
  {
   HEAP32[$14 >> 2] = 6; //@line 30289
   HEAP32[___async_retval >> 2] = 0; //@line 30291
   return;
  }
 case -1014:
  {
   _printf(11887, $20) | 0; //@line 30296
   _printf(12174, $24) | 0; //@line 30297
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 30298
   _putchar(10) | 0; //@line 30299
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 261; //@line 30302
    $28 = $ReallocAsyncCtx12 + 4 | 0; //@line 30303
    HEAP32[$28 >> 2] = $2; //@line 30304
    $29 = $ReallocAsyncCtx12 + 8 | 0; //@line 30305
    HEAP32[$29 >> 2] = $14; //@line 30306
    $30 = $ReallocAsyncCtx12 + 12 | 0; //@line 30307
    HEAP32[$30 >> 2] = $16; //@line 30308
    $31 = $ReallocAsyncCtx12 + 16 | 0; //@line 30309
    HEAP32[$31 >> 2] = $18; //@line 30310
    sp = STACKTOP; //@line 30311
    return;
   }
   ___async_unwind = 0; //@line 30314
   HEAP32[$ReallocAsyncCtx12 >> 2] = 261; //@line 30315
   $28 = $ReallocAsyncCtx12 + 4 | 0; //@line 30316
   HEAP32[$28 >> 2] = $2; //@line 30317
   $29 = $ReallocAsyncCtx12 + 8 | 0; //@line 30318
   HEAP32[$29 >> 2] = $14; //@line 30319
   $30 = $ReallocAsyncCtx12 + 12 | 0; //@line 30320
   HEAP32[$30 >> 2] = $16; //@line 30321
   $31 = $ReallocAsyncCtx12 + 16 | 0; //@line 30322
   HEAP32[$31 >> 2] = $18; //@line 30323
   sp = STACKTOP; //@line 30324
   return;
  }
 default:
  {
   _printf(11887, $6) | 0; //@line 30329
   _printf(12209, $10) | 0; //@line 30330
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(24) | 0; //@line 30331
   _putchar(10) | 0; //@line 30332
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 266; //@line 30335
    $32 = $ReallocAsyncCtx11 + 4 | 0; //@line 30336
    HEAP32[$32 >> 2] = $2; //@line 30337
    $33 = $ReallocAsyncCtx11 + 8 | 0; //@line 30338
    HEAP32[$33 >> 2] = $AsyncRetVal; //@line 30339
    $34 = $ReallocAsyncCtx11 + 12 | 0; //@line 30340
    HEAP32[$34 >> 2] = $14; //@line 30341
    $35 = $ReallocAsyncCtx11 + 16 | 0; //@line 30342
    HEAP32[$35 >> 2] = $4; //@line 30343
    $36 = $ReallocAsyncCtx11 + 20 | 0; //@line 30344
    HEAP32[$36 >> 2] = $18; //@line 30345
    sp = STACKTOP; //@line 30346
    return;
   }
   ___async_unwind = 0; //@line 30349
   HEAP32[$ReallocAsyncCtx11 >> 2] = 266; //@line 30350
   $32 = $ReallocAsyncCtx11 + 4 | 0; //@line 30351
   HEAP32[$32 >> 2] = $2; //@line 30352
   $33 = $ReallocAsyncCtx11 + 8 | 0; //@line 30353
   HEAP32[$33 >> 2] = $AsyncRetVal; //@line 30354
   $34 = $ReallocAsyncCtx11 + 12 | 0; //@line 30355
   HEAP32[$34 >> 2] = $14; //@line 30356
   $35 = $ReallocAsyncCtx11 + 16 | 0; //@line 30357
   HEAP32[$35 >> 2] = $4; //@line 30358
   $36 = $ReallocAsyncCtx11 + 20 | 0; //@line 30359
   HEAP32[$36 >> 2] = $18; //@line 30360
   sp = STACKTOP; //@line 30361
   return;
  }
 }
}
function __ZN7LoRaMac10disconnectEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $29 = 0, $30 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18225
 $1 = $0 + 356 | 0; //@line 18226
 $2 = HEAP32[$1 >> 2] | 0; //@line 18227
 $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18229
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $0 + 996 | 0); //@line 18230
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 538; //@line 18233
  HEAP32[$AsyncCtx19 + 4 >> 2] = $1; //@line 18235
  HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 18237
  sp = STACKTOP; //@line 18238
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 18241
 $6 = HEAP32[$1 >> 2] | 0; //@line 18242
 $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18244
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($6, $0 + 1016 | 0); //@line 18245
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 539; //@line 18248
  HEAP32[$AsyncCtx15 + 4 >> 2] = $1; //@line 18250
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 18252
  sp = STACKTOP; //@line 18253
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 18256
 $10 = HEAP32[$1 >> 2] | 0; //@line 18257
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18259
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($10, $0 + 1036 | 0); //@line 18260
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 540; //@line 18263
  HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 18265
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 18267
  sp = STACKTOP; //@line 18268
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 18271
 $14 = HEAP32[$1 >> 2] | 0; //@line 18272
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18274
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($14, $0 + 1056 | 0); //@line 18275
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 541; //@line 18278
  HEAP32[$AsyncCtx7 + 4 >> 2] = $1; //@line 18280
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 18282
  sp = STACKTOP; //@line 18283
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 18286
 $18 = HEAP32[$1 >> 2] | 0; //@line 18287
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18289
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($18, $0 + 1076 | 0); //@line 18290
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 542; //@line 18293
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 18295
  sp = STACKTOP; //@line 18296
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18299
 $21 = HEAP32[$0 >> 2] | 0; //@line 18300
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 18301
 __ZN7LoRaPHY18put_radio_to_sleepEv($21); //@line 18302
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 543; //@line 18305
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 18307
  sp = STACKTOP; //@line 18308
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18311
  HEAP8[$0 + 372 >> 0] = 0; //@line 18313
  HEAP8[$0 + 377 >> 0] = 0; //@line 18315
  HEAP8[$0 + 371 >> 0] = 1; //@line 18317
  HEAP8[$0 + 373 >> 0] = 0; //@line 18319
  HEAP8[$0 + 374 >> 0] = 0; //@line 18321
  HEAP8[$0 + 944 >> 0] = 0; //@line 18323
  $29 = $0 + 968 | 0; //@line 18324
  HEAP32[$29 >> 2] = 0; //@line 18325
  $30 = $0 + 4 | 0; //@line 18326
  __ZN14LoRaMacCommand20clear_command_bufferEv($30); //@line 18327
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($30); //@line 18328
  __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($30); //@line 18329
  HEAP32[$29 >> 2] = 0; //@line 18330
  return;
 }
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 15051
 STACKTOP = STACKTOP + 64 | 0; //@line 15052
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 15052
 $4 = sp; //@line 15053
 $5 = HEAP32[$0 >> 2] | 0; //@line 15054
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 15057
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 15059
 HEAP32[$4 >> 2] = $2; //@line 15060
 HEAP32[$4 + 4 >> 2] = $0; //@line 15062
 HEAP32[$4 + 8 >> 2] = $1; //@line 15064
 HEAP32[$4 + 12 >> 2] = $3; //@line 15066
 $14 = $4 + 16 | 0; //@line 15067
 $15 = $4 + 20 | 0; //@line 15068
 $16 = $4 + 24 | 0; //@line 15069
 $17 = $4 + 28 | 0; //@line 15070
 $18 = $4 + 32 | 0; //@line 15071
 $19 = $4 + 40 | 0; //@line 15072
 dest = $14; //@line 15073
 stop = dest + 36 | 0; //@line 15073
 do {
  HEAP32[dest >> 2] = 0; //@line 15073
  dest = dest + 4 | 0; //@line 15073
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 15073
 HEAP8[$14 + 38 >> 0] = 0; //@line 15073
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 15078
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 15081
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 15082
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 15083
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 791; //@line 15086
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 15088
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 15090
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 15092
    sp = STACKTOP; //@line 15093
    STACKTOP = sp; //@line 15094
    return 0; //@line 15094
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15096
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 15100
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 15104
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 15107
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 15108
   FUNCTION_TABLE_viiiii[$33 & 7]($10, $4, $8, 1, 0); //@line 15109
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 792; //@line 15112
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 15114
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 15116
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 15118
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 15120
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 15122
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 15124
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 15126
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 15128
    sp = STACKTOP; //@line 15129
    STACKTOP = sp; //@line 15130
    return 0; //@line 15130
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15132
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 15146
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 15154
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 15170
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 15175
  }
 } while (0);
 STACKTOP = sp; //@line 15178
 return $$0 | 0; //@line 15178
}
function __ZN12radio_eventsD2Ev__async_cb_113($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $35 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29913
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29915
 $4 = HEAP32[$2 + 76 >> 2] | 0; //@line 29917
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 29922
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 29923
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 64 | 0); //@line 29924
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 345; //@line 29927
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 29928
   HEAP32[$9 >> 2] = $2; //@line 29929
   sp = STACKTOP; //@line 29930
   return;
  }
  ___async_unwind = 0; //@line 29933
  HEAP32[$ReallocAsyncCtx3 >> 2] = 345; //@line 29934
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 29935
  HEAP32[$9 >> 2] = $2; //@line 29936
  sp = STACKTOP; //@line 29937
  return;
 }
 $11 = HEAP32[$2 + 60 >> 2] | 0; //@line 29941
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 29946
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 29947
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 48 | 0); //@line 29948
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 346; //@line 29951
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 29952
   HEAP32[$16 >> 2] = $2; //@line 29953
   sp = STACKTOP; //@line 29954
   return;
  }
  ___async_unwind = 0; //@line 29957
  HEAP32[$ReallocAsyncCtx4 >> 2] = 346; //@line 29958
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 29959
  HEAP32[$16 >> 2] = $2; //@line 29960
  sp = STACKTOP; //@line 29961
  return;
 }
 $18 = HEAP32[$2 + 44 >> 2] | 0; //@line 29965
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 29970
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 29971
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 32 | 0); //@line 29972
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 29975
   $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 29976
   HEAP32[$23 >> 2] = $2; //@line 29977
   sp = STACKTOP; //@line 29978
   return;
  }
  ___async_unwind = 0; //@line 29981
  HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 29982
  $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 29983
  HEAP32[$23 >> 2] = $2; //@line 29984
  sp = STACKTOP; //@line 29985
  return;
 }
 $25 = HEAP32[$2 + 28 >> 2] | 0; //@line 29989
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 29994
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 29995
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 16 | 0); //@line 29996
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 348; //@line 29999
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 30000
   HEAP32[$30 >> 2] = $2; //@line 30001
   sp = STACKTOP; //@line 30002
   return;
  }
  ___async_unwind = 0; //@line 30005
  HEAP32[$ReallocAsyncCtx6 >> 2] = 348; //@line 30006
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 30007
  HEAP32[$30 >> 2] = $2; //@line 30008
  sp = STACKTOP; //@line 30009
  return;
 }
 $32 = HEAP32[$2 + 12 >> 2] | 0; //@line 30013
 if (!$32) {
  return;
 }
 $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 30019
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 30020
 FUNCTION_TABLE_vi[$35 & 1023]($2); //@line 30021
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 30024
  sp = STACKTOP; //@line 30025
  return;
 }
 ___async_unwind = 0; //@line 30028
 HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 30029
 sp = STACKTOP; //@line 30030
 return;
}
function _main__async_cb_157($0) {
 $0 = $0 | 0;
 var $$pr = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 32211
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32213
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32215
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32217
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32219
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32221
 $$pr = HEAP32[$10 >> 2] | 0; //@line 32222
 if ($$pr | 0) {
  $13 = HEAP32[$$pr + 4 >> 2] | 0; //@line 32226
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 32227
  FUNCTION_TABLE_vii[$13 & 31](23208, $8); //@line 32228
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 753; //@line 32231
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 32232
   HEAP32[$14 >> 2] = $2; //@line 32233
   $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 32234
   HEAP32[$15 >> 2] = $4; //@line 32235
   $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 32236
   HEAP32[$16 >> 2] = $6; //@line 32237
   $17 = $ReallocAsyncCtx3 + 16 | 0; //@line 32238
   HEAP32[$17 >> 2] = $8; //@line 32239
   $18 = $ReallocAsyncCtx3 + 20 | 0; //@line 32240
   HEAP32[$18 >> 2] = $10; //@line 32241
   sp = STACKTOP; //@line 32242
   return;
  }
  ___async_unwind = 0; //@line 32245
  HEAP32[$ReallocAsyncCtx3 >> 2] = 753; //@line 32246
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 32247
  HEAP32[$14 >> 2] = $2; //@line 32248
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 32249
  HEAP32[$15 >> 2] = $4; //@line 32250
  $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 32251
  HEAP32[$16 >> 2] = $6; //@line 32252
  $17 = $ReallocAsyncCtx3 + 16 | 0; //@line 32253
  HEAP32[$17 >> 2] = $8; //@line 32254
  $18 = $ReallocAsyncCtx3 + 20 | 0; //@line 32255
  HEAP32[$18 >> 2] = $10; //@line 32256
  sp = STACKTOP; //@line 32257
  return;
 }
 HEAP32[5805] = 0; //@line 32260
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(23200, 23208) | 0; //@line 32261
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(23200) | 0) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 32265
  _puts(15432) | 0; //@line 32266
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 755; //@line 32269
   sp = STACKTOP; //@line 32270
   return;
  }
  ___async_unwind = 0; //@line 32273
  HEAP32[$ReallocAsyncCtx6 >> 2] = 755; //@line 32274
  sp = STACKTOP; //@line 32275
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(23200, 5) | 0; //@line 32278
 HEAP8[$2 >> 0] = 0; //@line 32279
 HEAP32[$2 + 4 >> 2] = 23905; //@line 32281
 HEAP32[$2 + 8 >> 2] = 23913; //@line 32283
 HEAP32[$2 + 12 >> 2] = 23921; //@line 32285
 HEAP8[$2 + 16 >> 0] = 3; //@line 32287
 $25 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(23200, $2) | 0; //@line 32288
 switch ($25 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$4 >> 2] = $25; //@line 32294
   _printf(15466, $4) | 0; //@line 32295
   HEAP32[___async_retval >> 2] = -1; //@line 32297
   return;
  }
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 32301
 _puts(15495) | 0; //@line 32302
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 756; //@line 32305
  $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 32306
  HEAP32[$26 >> 2] = $2; //@line 32307
  sp = STACKTOP; //@line 32308
  return;
 }
 ___async_unwind = 0; //@line 32311
 HEAP32[$ReallocAsyncCtx5 >> 2] = 756; //@line 32312
 $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 32313
 HEAP32[$26 >> 2] = $2; //@line 32314
 sp = STACKTOP; //@line 32315
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_197($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $17 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $4 = 0, $46 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 34542
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34546
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34548
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 34550
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34552
 $trunc = HEAP8[$0 + 24 >> 0] | 0; //@line 34554
 $13 = HEAP32[$0 + 28 >> 2] | 0; //@line 34556
 $17 = HEAP32[$0 + 36 >> 2] | 0; //@line 34560
 $21 = HEAP32[$0 + 44 >> 2] | 0; //@line 34564
 $23 = HEAP32[$0 + 48 >> 2] | 0; //@line 34566
 $25 = HEAP32[$0 + 52 >> 2] | 0; //@line 34568
 $27 = HEAP32[$0 + 56 >> 2] | 0; //@line 34570
 $29 = HEAP32[$0 + 60 >> 2] | 0; //@line 34572
 $31 = HEAP32[$0 + 64 >> 2] | 0; //@line 34574
 HEAP16[$6 + 2232 >> 1] = (HEAP32[$0 + 4 >> 2] | 0) - $4; //@line 34578
 HEAP16[$6 + 2230 >> 1] = $8; //@line 34580
 _memcpy($6 + 1975 | 0, $10 | 0, $4 | 0) | 0; //@line 34582
 switch ($trunc & 15) {
 case 9:
 case 5:
 case 1:
  {
   HEAP32[$6 + 1968 >> 2] = 0; //@line 34587
   HEAP8[$6 + 1972 >> 0] = HEAP8[$21 >> 0] | 0; //@line 34590
   switch ($trunc & 15) {
   case 6:
   case 2:
    {
     label = 5; //@line 34594
     break;
    }
   default:
    {}
   }
   break;
  }
 case 10:
 case 6:
 case 2:
  {
   label = 5; //@line 34603
   break;
  }
 default:
  {}
 }
 if ((label | 0) == 5) {
  HEAP32[$6 + 1968 >> 2] = 1; //@line 34611
  HEAP8[$6 + 1972 >> 0] = HEAP8[$21 >> 0] | 0; //@line 34614
  HEAP8[$6 + 1974 >> 0] = HEAP8[$6 + 2284 >> 0] | 0; //@line 34618
 }
 _printf(12139, $13) | 0; //@line 34620
 $46 = $6 + 2230 | 0; //@line 34621
 $51 = HEAPU16[$6 + 2232 >> 1] | 0; //@line 34626
 HEAP32[$17 >> 2] = HEAPU16[$46 >> 1]; //@line 34627
 HEAP32[$17 + 4 >> 2] = $51; //@line 34629
 _printf(12528, $17) | 0; //@line 34630
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 34631
 _putchar(10) | 0; //@line 34632
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 305; //@line 34635
  $52 = $ReallocAsyncCtx2 + 4 | 0; //@line 34636
  HEAP32[$52 >> 2] = $6; //@line 34637
  $53 = $ReallocAsyncCtx2 + 8 | 0; //@line 34638
  HEAP32[$53 >> 2] = $23; //@line 34639
  $54 = $ReallocAsyncCtx2 + 12 | 0; //@line 34640
  HEAP32[$54 >> 2] = $25; //@line 34641
  $55 = $ReallocAsyncCtx2 + 16 | 0; //@line 34642
  HEAP32[$55 >> 2] = $27; //@line 34643
  $56 = $ReallocAsyncCtx2 + 20 | 0; //@line 34644
  HEAP32[$56 >> 2] = $29; //@line 34645
  $57 = $ReallocAsyncCtx2 + 24 | 0; //@line 34646
  HEAP32[$57 >> 2] = $46; //@line 34647
  $58 = $ReallocAsyncCtx2 + 28 | 0; //@line 34648
  HEAP32[$58 >> 2] = $31; //@line 34649
  sp = STACKTOP; //@line 34650
  return;
 }
 ___async_unwind = 0; //@line 34653
 HEAP32[$ReallocAsyncCtx2 >> 2] = 305; //@line 34654
 $52 = $ReallocAsyncCtx2 + 4 | 0; //@line 34655
 HEAP32[$52 >> 2] = $6; //@line 34656
 $53 = $ReallocAsyncCtx2 + 8 | 0; //@line 34657
 HEAP32[$53 >> 2] = $23; //@line 34658
 $54 = $ReallocAsyncCtx2 + 12 | 0; //@line 34659
 HEAP32[$54 >> 2] = $25; //@line 34660
 $55 = $ReallocAsyncCtx2 + 16 | 0; //@line 34661
 HEAP32[$55 >> 2] = $27; //@line 34662
 $56 = $ReallocAsyncCtx2 + 20 | 0; //@line 34663
 HEAP32[$56 >> 2] = $29; //@line 34664
 $57 = $ReallocAsyncCtx2 + 24 | 0; //@line 34665
 HEAP32[$57 >> 2] = $46; //@line 34666
 $58 = $ReallocAsyncCtx2 + 28 | 0; //@line 34667
 HEAP32[$58 >> 2] = $31; //@line 34668
 sp = STACKTOP; //@line 34669
 return;
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_96($0) {
 $0 = $0 | 0;
 var $$ = 0, $$sink = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $28 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25827
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25831
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 25833
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25835
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25837
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25839
 $14 = HEAP16[$0 + 28 >> 1] | 0; //@line 25841
 $16 = HEAP8[$0 + 30 >> 0] | 0; //@line 25843
 $18 = HEAP8[$0 + 31 >> 0] | 0; //@line 25845
 $20 = HEAP8[$0 + 32 >> 0] | 0; //@line 25847
 $22 = HEAP32[$0 + 36 >> 2] | 0; //@line 25849
 $24 = HEAP32[$0 + 40 >> 2] | 0; //@line 25851
 $28 = HEAP32[$0 + 48 >> 2] | 0; //@line 25855
 $32 = HEAP8[$0 + 56 >> 0] | 0; //@line 25859
 $34 = HEAP8[$0 + 57 >> 0] | 0; //@line 25861
 $36 = HEAP8[$0 + 58 >> 0] | 0; //@line 25863
 $38 = HEAP32[$0 + 60 >> 2] | 0; //@line 25865
 $42 = HEAP32[$0 + 68 >> 2] | 0; //@line 25869
 switch (HEAP32[$0 + 4 >> 2] | 0) {
 case 0:
  {
   HEAP8[$4 + 696 >> 0] = $6; //@line 25875
   HEAP32[$4 + 700 >> 2] = $8; //@line 25877
   HEAP32[$4 + 704 >> 2] = $10; //@line 25879
   HEAP32[$4 + 712 >> 2] = $12; //@line 25881
   HEAP16[$4 + 716 >> 1] = $14; //@line 25883
   HEAP8[$4 + 718 >> 0] = $16; //@line 25885
   HEAP8[$4 + 720 >> 0] = $18; //@line 25887
   HEAP8[$4 + 721 >> 0] = $20; //@line 25889
   HEAP32[$4 + 724 >> 2] = $22; //@line 25891
   _printf(10904, $24) | 0; //@line 25892
   _printf(11500, $28) | 0; //@line 25893
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 25894
   _putchar(10) | 0; //@line 25895
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 65; //@line 25898
    sp = STACKTOP; //@line 25899
    return;
   }
   ___async_unwind = 0; //@line 25902
   HEAP32[$ReallocAsyncCtx2 >> 2] = 65; //@line 25903
   sp = STACKTOP; //@line 25904
   return;
  }
 case 1:
  {
   HEAP8[$4 + 748 >> 0] = $6; //@line 25910
   if ($10 >>> 0 > 2) {
    while (1) {}
   }
   $56 = $10 + 7 | 0; //@line 25916
   HEAP32[$4 + 752 >> 2] = $56; //@line 25918
   HEAP32[$4 + 756 >> 2] = $12; //@line 25920
   HEAP8[$4 + 761 >> 0] = $32; //@line 25922
   HEAP16[$4 + 762 >> 1] = $14; //@line 25924
   HEAP8[$4 + 764 >> 0] = $16; //@line 25926
   HEAP8[$4 + 767 >> 0] = $34; //@line 25928
   HEAP8[$4 + 768 >> 0] = $36; //@line 25930
   HEAP8[$4 + 766 >> 0] = $18; //@line 25932
   HEAP8[$4 + 769 >> 0] = $20; //@line 25934
   HEAP32[$4 + 772 >> 2] = $22; //@line 25936
   $$ = $12 >>> 0 > 6 ? $12 : 6; //@line 25938
   if (($10 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 10; //@line 25946
   } else {
    if (($56 | 0) == 8 & $$ >>> 0 > 11) {
     label = 10; //@line 25952
    } else {
     $$sink = 0; //@line 25954
    }
   }
   if ((label | 0) == 10) {
    $$sink = 1; //@line 25958
   }
   HEAP8[$4 + 760 >> 0] = $$sink; //@line 25961
   _printf(10904, $38) | 0; //@line 25962
   _printf(11518, $42) | 0; //@line 25963
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 25964
   _putchar(10) | 0; //@line 25965
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 66; //@line 25968
    sp = STACKTOP; //@line 25969
    return;
   }
   ___async_unwind = 0; //@line 25972
   HEAP32[$ReallocAsyncCtx >> 2] = 66; //@line 25973
   sp = STACKTOP; //@line 25974
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadio7standbyEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 186
 STACKTOP = STACKTOP + 48 | 0; //@line 187
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 187
 $vararg_buffer9 = sp + 40 | 0; //@line 188
 $vararg_buffer7 = sp + 32 | 0; //@line 189
 $vararg_buffer5 = sp + 24 | 0; //@line 190
 $vararg_buffer3 = sp + 16 | 0; //@line 191
 _printf(10904, sp) | 0; //@line 194
 _printf(11555, sp + 8 | 0) | 0; //@line 195
 $AsyncCtx18 = _emscripten_alloc_async_context(40, sp) | 0; //@line 196
 _putchar(10) | 0; //@line 197
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 56; //@line 200
  HEAP32[$AsyncCtx18 + 4 >> 2] = $0; //@line 202
  HEAP32[$AsyncCtx18 + 8 >> 2] = $vararg_buffer3; //@line 204
  HEAP32[$AsyncCtx18 + 12 >> 2] = $vararg_buffer3; //@line 206
  HEAP32[$AsyncCtx18 + 16 >> 2] = $vararg_buffer5; //@line 208
  HEAP32[$AsyncCtx18 + 20 >> 2] = $vararg_buffer5; //@line 210
  HEAP32[$AsyncCtx18 + 24 >> 2] = $vararg_buffer7; //@line 212
  HEAP32[$AsyncCtx18 + 28 >> 2] = $vararg_buffer7; //@line 214
  HEAP32[$AsyncCtx18 + 32 >> 2] = $vararg_buffer9; //@line 216
  HEAP32[$AsyncCtx18 + 36 >> 2] = $vararg_buffer9; //@line 218
  sp = STACKTOP; //@line 219
  STACKTOP = sp; //@line 220
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 222
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 224
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 226
 _printf(10904, $vararg_buffer3) | 0; //@line 227
 HEAP32[$vararg_buffer5 >> 2] = 1; //@line 228
 _printf(10970, $vararg_buffer5) | 0; //@line 229
 $AsyncCtx14 = _emscripten_alloc_async_context(24, sp) | 0; //@line 230
 _putchar(10) | 0; //@line 231
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 57; //@line 234
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 236
  HEAP32[$AsyncCtx14 + 8 >> 2] = $vararg_buffer7; //@line 238
  HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer7; //@line 240
  HEAP32[$AsyncCtx14 + 16 >> 2] = $vararg_buffer9; //@line 242
  HEAP32[$AsyncCtx14 + 20 >> 2] = $vararg_buffer9; //@line 244
  sp = STACKTOP; //@line 245
  STACKTOP = sp; //@line 246
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 248
 $AsyncCtx21 = _emscripten_alloc_async_context(24, sp) | 0; //@line 249
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 250
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 58; //@line 253
  HEAP32[$AsyncCtx21 + 4 >> 2] = $vararg_buffer7; //@line 255
  HEAP32[$AsyncCtx21 + 8 >> 2] = $vararg_buffer7; //@line 257
  HEAP32[$AsyncCtx21 + 12 >> 2] = $vararg_buffer9; //@line 259
  HEAP32[$AsyncCtx21 + 16 >> 2] = $vararg_buffer9; //@line 261
  HEAP32[$AsyncCtx21 + 20 >> 2] = $0; //@line 263
  sp = STACKTOP; //@line 264
  STACKTOP = sp; //@line 265
  return;
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 267
 _printf(10904, $vararg_buffer7) | 0; //@line 268
 HEAP32[$vararg_buffer9 >> 2] = 1; //@line 269
 _printf(10999, $vararg_buffer9) | 0; //@line 270
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 271
 _putchar(10) | 0; //@line 272
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 59; //@line 275
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 277
  sp = STACKTOP; //@line 278
  STACKTOP = sp; //@line 279
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 281
  HEAP8[$0 + 688 >> 0] = 0; //@line 283
  STACKTOP = sp; //@line 284
  return;
 }
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_333($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22601
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22603
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22605
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22607
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22609
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22611
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22613
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22615
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22619
 if (HEAP32[$12 >> 2] | 0) {
  HEAP8[$2 + 1964 >> 0] = 0; //@line 22626
  _memset($2 + 1975 | 0, 0, 255) | 0; //@line 22628
  HEAP16[$2 + 2230 >> 1] = 255; //@line 22630
  _printf(11887, $14) | 0; //@line 22631
  HEAP32[$18 >> 2] = HEAP32[$12 >> 2]; //@line 22633
  _printf(12646, $18) | 0; //@line 22634
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 22635
  _putchar(10) | 0; //@line 22636
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 198; //@line 22639
   $27 = $ReallocAsyncCtx7 + 4 | 0; //@line 22640
   HEAP32[$27 >> 2] = $8; //@line 22641
   $28 = $ReallocAsyncCtx7 + 8 | 0; //@line 22642
   HEAP32[$28 >> 2] = $10; //@line 22643
   $29 = $ReallocAsyncCtx7 + 12 | 0; //@line 22644
   HEAP32[$29 >> 2] = $2; //@line 22645
   $30 = $ReallocAsyncCtx7 + 16 | 0; //@line 22646
   HEAP32[$30 >> 2] = $12; //@line 22647
   sp = STACKTOP; //@line 22648
   return;
  }
  ___async_unwind = 0; //@line 22651
  HEAP32[$ReallocAsyncCtx7 >> 2] = 198; //@line 22652
  $27 = $ReallocAsyncCtx7 + 4 | 0; //@line 22653
  HEAP32[$27 >> 2] = $8; //@line 22654
  $28 = $ReallocAsyncCtx7 + 8 | 0; //@line 22655
  HEAP32[$28 >> 2] = $10; //@line 22656
  $29 = $ReallocAsyncCtx7 + 12 | 0; //@line 22657
  HEAP32[$29 >> 2] = $2; //@line 22658
  $30 = $ReallocAsyncCtx7 + 16 | 0; //@line 22659
  HEAP32[$30 >> 2] = $12; //@line 22660
  sp = STACKTOP; //@line 22661
  return;
 }
 HEAP32[$2 + 1956 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 22667
 HEAP8[$2 + 1964 >> 0] = 0; //@line 22669
 $35 = $2 + 1892 | 0; //@line 22670
 $36 = HEAP32[$35 >> 2] | 0; //@line 22671
 if (!$36) {
  return;
 }
 $40 = HEAP32[$2 + 2288 >> 2] | 0; //@line 22678
 $42 = HEAP32[$36 + 4 >> 2] | 0; //@line 22680
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 22681
 FUNCTION_TABLE_vii[$42 & 31]($4, $2 + 1880 | 0); //@line 22682
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 207; //@line 22685
  $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 22686
  HEAP32[$43 >> 2] = $35; //@line 22687
  $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 22688
  HEAP32[$44 >> 2] = $4; //@line 22689
  $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 22690
  HEAP32[$45 >> 2] = $40; //@line 22691
  $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 22692
  HEAP32[$46 >> 2] = $4; //@line 22693
  sp = STACKTOP; //@line 22694
  return;
 }
 ___async_unwind = 0; //@line 22697
 HEAP32[$ReallocAsyncCtx5 >> 2] = 207; //@line 22698
 $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 22699
 HEAP32[$43 >> 2] = $35; //@line 22700
 $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 22701
 HEAP32[$44 >> 2] = $4; //@line 22702
 $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 22703
 HEAP32[$45 >> 2] = $40; //@line 22704
 $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 22705
 HEAP32[$46 >> 2] = $4; //@line 22706
 sp = STACKTOP; //@line 22707
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_86($0) {
 $0 = $0 | 0;
 var $$040 = 0, $10 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25271
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25273
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25275
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25277
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25279
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 25281
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 25286
 if (!(HEAP8[$0 + 21 >> 0] & 1)) {
  HEAP8[___async_retval >> 0] = 0; //@line 25290
  return;
 }
 if (!(HEAP32[$2 + 20 >> 2] | 0)) {
  $19 = HEAP32[$6 + 112 >> 2] | 0; //@line 25298
  $21 = HEAPU8[$2 >> 0] | 0; //@line 25300
  $25 = HEAP32[$19 + ($21 * 12 | 0) + 4 >> 2] | 0; //@line 25304
  $$040 = ($25 | 0) == 0 ? HEAP32[$19 + ($21 * 12 | 0) >> 2] | 0 : $25; //@line 25307
 } else {
  $$040 = $8; //@line 25309
 }
 $30 = HEAP32[$6 + 96 >> 2] | 0; //@line 25314
 $32 = HEAP32[$6 + 104 >> 2] | 0; //@line 25316
 $33 = $10 & 255; //@line 25317
 $35 = HEAP8[(HEAP32[$6 + 88 >> 2] | 0) + $33 >> 0] | 0; //@line 25319
 $36 = HEAP32[$4 >> 2] | 0; //@line 25320
 $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 72 >> 2] | 0; //@line 25323
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 25324
 FUNCTION_TABLE_vi[$39 & 1023]($36); //@line 25325
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 620; //@line 25328
  $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 25329
  HEAP32[$40 >> 2] = $4; //@line 25330
  $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 25331
  HEAP32[$41 >> 2] = $$040; //@line 25332
  $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 25333
  HEAP8[$42 >> 0] = $10; //@line 25334
  $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 25335
  HEAP32[$43 >> 2] = $6; //@line 25336
  $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 25337
  HEAP32[$44 >> 2] = $2; //@line 25338
  $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 25339
  HEAP8[$45 >> 0] = $35; //@line 25340
  $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 25341
  HEAP32[$46 >> 2] = $30; //@line 25342
  $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 25343
  HEAP32[$47 >> 2] = $32; //@line 25344
  $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 25345
  HEAP32[$48 >> 2] = $33; //@line 25346
  $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 25347
  HEAP32[$49 >> 2] = $14; //@line 25348
  sp = STACKTOP; //@line 25349
  return;
 }
 ___async_unwind = 0; //@line 25352
 HEAP32[$ReallocAsyncCtx4 >> 2] = 620; //@line 25353
 $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 25354
 HEAP32[$40 >> 2] = $4; //@line 25355
 $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 25356
 HEAP32[$41 >> 2] = $$040; //@line 25357
 $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 25358
 HEAP8[$42 >> 0] = $10; //@line 25359
 $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 25360
 HEAP32[$43 >> 2] = $6; //@line 25361
 $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 25362
 HEAP32[$44 >> 2] = $2; //@line 25363
 $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 25364
 HEAP8[$45 >> 0] = $35; //@line 25365
 $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 25366
 HEAP32[$46 >> 2] = $30; //@line 25367
 $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 25368
 HEAP32[$47 >> 2] = $32; //@line 25369
 $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 25370
 HEAP32[$48 >> 2] = $33; //@line 25371
 $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 25372
 HEAP32[$49 >> 2] = $14; //@line 25373
 sp = STACKTOP; //@line 25374
 return;
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 11286
 $7 = ($2 | 0) != 0; //@line 11290
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 11294
   $$03555 = $0; //@line 11295
   $$03654 = $2; //@line 11295
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 11300
     $$036$lcssa64 = $$03654; //@line 11300
     label = 6; //@line 11301
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 11304
    $12 = $$03654 + -1 | 0; //@line 11305
    $16 = ($12 | 0) != 0; //@line 11309
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 11312
     $$03654 = $12; //@line 11312
    } else {
     $$035$lcssa = $11; //@line 11314
     $$036$lcssa = $12; //@line 11314
     $$lcssa = $16; //@line 11314
     label = 5; //@line 11315
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 11320
   $$036$lcssa = $2; //@line 11320
   $$lcssa = $7; //@line 11320
   label = 5; //@line 11321
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 11326
   $$036$lcssa64 = $$036$lcssa; //@line 11326
   label = 6; //@line 11327
  } else {
   $$2 = $$035$lcssa; //@line 11329
   $$3 = 0; //@line 11329
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 11335
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 11338
    $$3 = $$036$lcssa64; //@line 11338
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 11340
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 11344
      $$13745 = $$036$lcssa64; //@line 11344
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 11347
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 11356
       $30 = $$13745 + -4 | 0; //@line 11357
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 11360
        $$13745 = $30; //@line 11360
       } else {
        $$0$lcssa = $29; //@line 11362
        $$137$lcssa = $30; //@line 11362
        label = 11; //@line 11363
        break L11;
       }
      }
      $$140 = $$046; //@line 11367
      $$23839 = $$13745; //@line 11367
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 11369
      $$137$lcssa = $$036$lcssa64; //@line 11369
      label = 11; //@line 11370
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 11376
      $$3 = 0; //@line 11376
      break;
     } else {
      $$140 = $$0$lcssa; //@line 11379
      $$23839 = $$137$lcssa; //@line 11379
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 11386
      $$3 = $$23839; //@line 11386
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 11389
     $$23839 = $$23839 + -1 | 0; //@line 11390
     if (!$$23839) {
      $$2 = $35; //@line 11393
      $$3 = 0; //@line 11393
      break;
     } else {
      $$140 = $35; //@line 11396
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 11404
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 11057
 do {
  if (!$0) {
   do {
    if (!(HEAP32[2602] | 0)) {
     $34 = 0; //@line 11065
    } else {
     $12 = HEAP32[2602] | 0; //@line 11067
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11068
     $13 = _fflush($12) | 0; //@line 11069
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 772; //@line 11072
      sp = STACKTOP; //@line 11073
      return 0; //@line 11074
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 11076
      $34 = $13; //@line 11077
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 11083
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 11087
    } else {
     $$02327 = $$02325; //@line 11089
     $$02426 = $34; //@line 11089
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 11096
      } else {
       $28 = 0; //@line 11098
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11106
       $25 = ___fflush_unlocked($$02327) | 0; //@line 11107
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 11112
       $$1 = $25 | $$02426; //@line 11114
      } else {
       $$1 = $$02426; //@line 11116
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 11120
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 11123
      if (!$$023) {
       $$024$lcssa = $$1; //@line 11126
       break L9;
      } else {
       $$02327 = $$023; //@line 11129
       $$02426 = $$1; //@line 11129
      }
     }
     HEAP32[$AsyncCtx >> 2] = 773; //@line 11132
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 11134
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 11136
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 11138
     sp = STACKTOP; //@line 11139
     return 0; //@line 11140
    }
   } while (0);
   ___ofl_unlock(); //@line 11143
   $$0 = $$024$lcssa; //@line 11144
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11150
    $5 = ___fflush_unlocked($0) | 0; //@line 11151
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 770; //@line 11154
     sp = STACKTOP; //@line 11155
     return 0; //@line 11156
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 11158
     $$0 = $5; //@line 11159
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 11164
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11165
   $7 = ___fflush_unlocked($0) | 0; //@line 11166
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 771; //@line 11169
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 11172
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 11174
    sp = STACKTOP; //@line 11175
    return 0; //@line 11176
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11178
   if ($phitmp) {
    $$0 = $7; //@line 11180
   } else {
    ___unlockfile($0); //@line 11182
    $$0 = $7; //@line 11183
   }
  }
 } while (0);
 return $$0 | 0; //@line 11187
}
function _mbedtls_cipher_free__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $38 = 0, $42 = 0, $46 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31909
 HEAP8[$2 >> 0] = 0; //@line 31911
 HEAP8[$2 + 1 >> 0] = 0; //@line 31913
 HEAP8[$2 + 2 >> 0] = 0; //@line 31915
 $6 = $2 + 4 | 0; //@line 31916
 HEAP8[$2 + 3 >> 0] = 0; //@line 31917
 HEAP8[$6 >> 0] = 0; //@line 31919
 HEAP8[$6 + 1 >> 0] = 0; //@line 31921
 HEAP8[$6 + 2 >> 0] = 0; //@line 31923
 $10 = $6 + 4 | 0; //@line 31924
 HEAP8[$6 + 3 >> 0] = 0; //@line 31925
 HEAP8[$10 >> 0] = 0; //@line 31927
 HEAP8[$10 + 1 >> 0] = 0; //@line 31929
 HEAP8[$10 + 2 >> 0] = 0; //@line 31931
 $14 = $6 + 8 | 0; //@line 31932
 HEAP8[$10 + 3 >> 0] = 0; //@line 31933
 HEAP8[$14 >> 0] = 0; //@line 31935
 HEAP8[$14 + 1 >> 0] = 0; //@line 31937
 HEAP8[$14 + 2 >> 0] = 0; //@line 31939
 $18 = $6 + 12 | 0; //@line 31940
 HEAP8[$14 + 3 >> 0] = 0; //@line 31941
 HEAP8[$18 >> 0] = 0; //@line 31943
 HEAP8[$18 + 1 >> 0] = 0; //@line 31945
 HEAP8[$18 + 2 >> 0] = 0; //@line 31947
 $22 = $6 + 16 | 0; //@line 31948
 HEAP8[$18 + 3 >> 0] = 0; //@line 31949
 HEAP8[$22 >> 0] = 0; //@line 31951
 HEAP8[$22 + 1 >> 0] = 0; //@line 31953
 HEAP8[$22 + 2 >> 0] = 0; //@line 31955
 $26 = $6 + 20 | 0; //@line 31956
 HEAP8[$22 + 3 >> 0] = 0; //@line 31957
 HEAP8[$26 >> 0] = 0; //@line 31959
 HEAP8[$26 + 1 >> 0] = 0; //@line 31961
 HEAP8[$26 + 2 >> 0] = 0; //@line 31963
 $30 = $6 + 24 | 0; //@line 31964
 HEAP8[$26 + 3 >> 0] = 0; //@line 31965
 HEAP8[$30 >> 0] = 0; //@line 31967
 HEAP8[$30 + 1 >> 0] = 0; //@line 31969
 HEAP8[$30 + 2 >> 0] = 0; //@line 31971
 $34 = $6 + 28 | 0; //@line 31972
 HEAP8[$30 + 3 >> 0] = 0; //@line 31973
 HEAP8[$34 >> 0] = 0; //@line 31975
 HEAP8[$34 + 1 >> 0] = 0; //@line 31977
 HEAP8[$34 + 2 >> 0] = 0; //@line 31979
 $38 = $6 + 32 | 0; //@line 31980
 HEAP8[$34 + 3 >> 0] = 0; //@line 31981
 HEAP8[$38 >> 0] = 0; //@line 31983
 HEAP8[$38 + 1 >> 0] = 0; //@line 31985
 HEAP8[$38 + 2 >> 0] = 0; //@line 31987
 $42 = $6 + 36 | 0; //@line 31988
 HEAP8[$38 + 3 >> 0] = 0; //@line 31989
 HEAP8[$42 >> 0] = 0; //@line 31991
 HEAP8[$42 + 1 >> 0] = 0; //@line 31993
 HEAP8[$42 + 2 >> 0] = 0; //@line 31995
 $46 = $6 + 40 | 0; //@line 31996
 HEAP8[$42 + 3 >> 0] = 0; //@line 31997
 HEAP8[$46 >> 0] = 0; //@line 31999
 HEAP8[$46 + 1 >> 0] = 0; //@line 32001
 HEAP8[$46 + 2 >> 0] = 0; //@line 32003
 $50 = $6 + 44 | 0; //@line 32004
 HEAP8[$46 + 3 >> 0] = 0; //@line 32005
 HEAP8[$50 >> 0] = 0; //@line 32007
 HEAP8[$50 + 1 >> 0] = 0; //@line 32009
 HEAP8[$50 + 2 >> 0] = 0; //@line 32011
 $54 = $6 + 48 | 0; //@line 32012
 HEAP8[$50 + 3 >> 0] = 0; //@line 32013
 HEAP8[$54 >> 0] = 0; //@line 32015
 HEAP8[$54 + 1 >> 0] = 0; //@line 32017
 HEAP8[$54 + 2 >> 0] = 0; //@line 32019
 $58 = $6 + 52 | 0; //@line 32020
 HEAP8[$54 + 3 >> 0] = 0; //@line 32021
 HEAP8[$58 >> 0] = 0; //@line 32023
 HEAP8[$58 + 1 >> 0] = 0; //@line 32025
 HEAP8[$58 + 2 >> 0] = 0; //@line 32027
 $62 = $6 + 56 | 0; //@line 32028
 HEAP8[$58 + 3 >> 0] = 0; //@line 32029
 HEAP8[$62 >> 0] = 0; //@line 32031
 HEAP8[$62 + 1 >> 0] = 0; //@line 32033
 HEAP8[$62 + 2 >> 0] = 0; //@line 32035
 $66 = $6 + 60 | 0; //@line 32036
 HEAP8[$62 + 3 >> 0] = 0; //@line 32037
 HEAP8[$66 >> 0] = 0; //@line 32039
 HEAP8[$66 + 1 >> 0] = 0; //@line 32041
 HEAP8[$66 + 2 >> 0] = 0; //@line 32043
 HEAP8[$66 + 3 >> 0] = 0; //@line 32044
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23444
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23448
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23450
 $7 = $4 + 12 | 0; //@line 23451
 HEAP32[$4 >> 2] = 25; //@line 23452
 HEAP32[$4 + 4 >> 2] = 0; //@line 23454
 HEAP32[$4 + 8 >> 2] = $6; //@line 23456
 HEAP32[$7 >> 2] = 836; //@line 23457
 $8 = $6 + 1860 | 0; //@line 23458
 if (($8 | 0) == ($4 | 0)) {
  $25 = HEAP32[211] | 0; //@line 23462
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 23463
  FUNCTION_TABLE_vi[$25 & 1023]($4); //@line 23464
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 194; //@line 23467
   $26 = $ReallocAsyncCtx4 + 4 | 0; //@line 23468
   HEAP32[$26 >> 2] = $4; //@line 23469
   sp = STACKTOP; //@line 23470
   return;
  }
  ___async_unwind = 0; //@line 23473
  HEAP32[$ReallocAsyncCtx4 >> 2] = 194; //@line 23474
  $26 = $ReallocAsyncCtx4 + 4 | 0; //@line 23475
  HEAP32[$26 >> 2] = $4; //@line 23476
  sp = STACKTOP; //@line 23477
  return;
 }
 $10 = $6 + 1872 | 0; //@line 23480
 $11 = HEAP32[$10 >> 2] | 0; //@line 23481
 if ($11 | 0) {
  $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 23485
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 23486
  FUNCTION_TABLE_vi[$14 & 1023]($8); //@line 23487
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 192; //@line 23490
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 23491
   HEAP32[$15 >> 2] = $7; //@line 23492
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 23493
   HEAP32[$16 >> 2] = $10; //@line 23494
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 23495
   HEAP32[$17 >> 2] = $8; //@line 23496
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 23497
   HEAP32[$18 >> 2] = $4; //@line 23498
   sp = STACKTOP; //@line 23499
   return;
  }
  ___async_unwind = 0; //@line 23502
  HEAP32[$ReallocAsyncCtx2 >> 2] = 192; //@line 23503
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 23504
  HEAP32[$15 >> 2] = $7; //@line 23505
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 23506
  HEAP32[$16 >> 2] = $10; //@line 23507
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 23508
  HEAP32[$17 >> 2] = $8; //@line 23509
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 23510
  HEAP32[$18 >> 2] = $4; //@line 23511
  sp = STACKTOP; //@line 23512
  return;
 }
 $20 = HEAP32[210] | 0; //@line 23516
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 23517
 FUNCTION_TABLE_vii[$20 & 31]($8, $4); //@line 23518
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 193; //@line 23521
  $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 23522
  HEAP32[$21 >> 2] = $7; //@line 23523
  $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 23524
  HEAP32[$22 >> 2] = $10; //@line 23525
  $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 23526
  HEAP32[$23 >> 2] = $4; //@line 23527
  sp = STACKTOP; //@line 23528
  return;
 }
 ___async_unwind = 0; //@line 23531
 HEAP32[$ReallocAsyncCtx3 >> 2] = 193; //@line 23532
 $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 23533
 HEAP32[$21 >> 2] = $7; //@line 23534
 $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 23535
 HEAP32[$22 >> 2] = $10; //@line 23536
 $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 23537
 HEAP32[$23 >> 2] = $4; //@line 23538
 sp = STACKTOP; //@line 23539
 return;
}
function _mbedtls_ccm_free__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $38 = 0, $42 = 0, $46 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10100
 HEAP8[$2 >> 0] = 0; //@line 10102
 HEAP8[$2 + 1 >> 0] = 0; //@line 10104
 HEAP8[$2 + 2 >> 0] = 0; //@line 10106
 $6 = $2 + 4 | 0; //@line 10107
 HEAP8[$2 + 3 >> 0] = 0; //@line 10108
 HEAP8[$6 >> 0] = 0; //@line 10110
 HEAP8[$6 + 1 >> 0] = 0; //@line 10112
 HEAP8[$6 + 2 >> 0] = 0; //@line 10114
 $10 = $6 + 4 | 0; //@line 10115
 HEAP8[$6 + 3 >> 0] = 0; //@line 10116
 HEAP8[$10 >> 0] = 0; //@line 10118
 HEAP8[$10 + 1 >> 0] = 0; //@line 10120
 HEAP8[$10 + 2 >> 0] = 0; //@line 10122
 $14 = $6 + 8 | 0; //@line 10123
 HEAP8[$10 + 3 >> 0] = 0; //@line 10124
 HEAP8[$14 >> 0] = 0; //@line 10126
 HEAP8[$14 + 1 >> 0] = 0; //@line 10128
 HEAP8[$14 + 2 >> 0] = 0; //@line 10130
 $18 = $6 + 12 | 0; //@line 10131
 HEAP8[$14 + 3 >> 0] = 0; //@line 10132
 HEAP8[$18 >> 0] = 0; //@line 10134
 HEAP8[$18 + 1 >> 0] = 0; //@line 10136
 HEAP8[$18 + 2 >> 0] = 0; //@line 10138
 $22 = $6 + 16 | 0; //@line 10139
 HEAP8[$18 + 3 >> 0] = 0; //@line 10140
 HEAP8[$22 >> 0] = 0; //@line 10142
 HEAP8[$22 + 1 >> 0] = 0; //@line 10144
 HEAP8[$22 + 2 >> 0] = 0; //@line 10146
 $26 = $6 + 20 | 0; //@line 10147
 HEAP8[$22 + 3 >> 0] = 0; //@line 10148
 HEAP8[$26 >> 0] = 0; //@line 10150
 HEAP8[$26 + 1 >> 0] = 0; //@line 10152
 HEAP8[$26 + 2 >> 0] = 0; //@line 10154
 $30 = $6 + 24 | 0; //@line 10155
 HEAP8[$26 + 3 >> 0] = 0; //@line 10156
 HEAP8[$30 >> 0] = 0; //@line 10158
 HEAP8[$30 + 1 >> 0] = 0; //@line 10160
 HEAP8[$30 + 2 >> 0] = 0; //@line 10162
 $34 = $6 + 28 | 0; //@line 10163
 HEAP8[$30 + 3 >> 0] = 0; //@line 10164
 HEAP8[$34 >> 0] = 0; //@line 10166
 HEAP8[$34 + 1 >> 0] = 0; //@line 10168
 HEAP8[$34 + 2 >> 0] = 0; //@line 10170
 $38 = $6 + 32 | 0; //@line 10171
 HEAP8[$34 + 3 >> 0] = 0; //@line 10172
 HEAP8[$38 >> 0] = 0; //@line 10174
 HEAP8[$38 + 1 >> 0] = 0; //@line 10176
 HEAP8[$38 + 2 >> 0] = 0; //@line 10178
 $42 = $6 + 36 | 0; //@line 10179
 HEAP8[$38 + 3 >> 0] = 0; //@line 10180
 HEAP8[$42 >> 0] = 0; //@line 10182
 HEAP8[$42 + 1 >> 0] = 0; //@line 10184
 HEAP8[$42 + 2 >> 0] = 0; //@line 10186
 $46 = $6 + 40 | 0; //@line 10187
 HEAP8[$42 + 3 >> 0] = 0; //@line 10188
 HEAP8[$46 >> 0] = 0; //@line 10190
 HEAP8[$46 + 1 >> 0] = 0; //@line 10192
 HEAP8[$46 + 2 >> 0] = 0; //@line 10194
 $50 = $6 + 44 | 0; //@line 10195
 HEAP8[$46 + 3 >> 0] = 0; //@line 10196
 HEAP8[$50 >> 0] = 0; //@line 10198
 HEAP8[$50 + 1 >> 0] = 0; //@line 10200
 HEAP8[$50 + 2 >> 0] = 0; //@line 10202
 $54 = $6 + 48 | 0; //@line 10203
 HEAP8[$50 + 3 >> 0] = 0; //@line 10204
 HEAP8[$54 >> 0] = 0; //@line 10206
 HEAP8[$54 + 1 >> 0] = 0; //@line 10208
 HEAP8[$54 + 2 >> 0] = 0; //@line 10210
 $58 = $6 + 52 | 0; //@line 10211
 HEAP8[$54 + 3 >> 0] = 0; //@line 10212
 HEAP8[$58 >> 0] = 0; //@line 10214
 HEAP8[$58 + 1 >> 0] = 0; //@line 10216
 HEAP8[$58 + 2 >> 0] = 0; //@line 10218
 $62 = $6 + 56 | 0; //@line 10219
 HEAP8[$58 + 3 >> 0] = 0; //@line 10220
 HEAP8[$62 >> 0] = 0; //@line 10222
 HEAP8[$62 + 1 >> 0] = 0; //@line 10224
 HEAP8[$62 + 2 >> 0] = 0; //@line 10226
 $66 = $6 + 60 | 0; //@line 10227
 HEAP8[$62 + 3 >> 0] = 0; //@line 10228
 HEAP8[$66 >> 0] = 0; //@line 10230
 HEAP8[$66 + 1 >> 0] = 0; //@line 10232
 HEAP8[$66 + 2 >> 0] = 0; //@line 10234
 HEAP8[$66 + 3 >> 0] = 0; //@line 10235
 return;
}
function __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$060 = 0, $$060$us = 0, $$2 = 0, $$2$us = 0, $$pr$us = 0, $$sink2 = 0, $10 = 0, $20 = 0, $26 = 0, $28 = 0, $34 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $indvars$iv = 0, $indvars$iv62 = 0, $wide$trip$count = 0, label = 0;
 if (!($4 << 24 >> 24)) {
  $$0$lcssa = -1; //@line 25749
  return $$0$lcssa | 0; //@line 25750
 }
 $6 = $0 + 8 | 0; //@line 25752
 $wide$trip$count = $4 & 255; //@line 25753
 if ($1) {
  $$060$us = -1; //@line 25755
  $indvars$iv = 0; //@line 25755
  while (1) {
   $7 = $3 + ($indvars$iv * 24 | 0) + 12 | 0; //@line 25757
   do {
    if ($2) {
     $8 = HEAP32[$7 >> 2] | 0; //@line 25760
     $10 = $3 + ($indvars$iv * 24 | 0) + 8 | 0; //@line 25762
     if ($8 >>> 0 <= (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) >>> 0) {
      HEAP32[$7 >> 2] = 0; //@line 25767
      $$2$us = $$060$us; //@line 25768
      break;
     }
     $$pr$us = HEAP32[$7 >> 2] | 0; //@line 25771
     if (!$$pr$us) {
      $$2$us = $$060$us; //@line 25774
     } else {
      if (($$pr$us - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0) >>> 0 < $$060$us >>> 0) {
       $20 = HEAP32[$7 >> 2] | 0; //@line 25782
       $$2$us = $20 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0; //@line 25787
      } else {
       $$2$us = $$060$us; //@line 25789
      }
     }
    } else {
     HEAP32[$7 >> 2] = 0; //@line 25793
     $$2$us = 0; //@line 25794
    }
   } while (0);
   $indvars$iv = $indvars$iv + 1 | 0; //@line 25797
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$0$lcssa = $$2$us; //@line 25800
    break;
   } else {
    $$060$us = $$2$us; //@line 25803
   }
  }
  return $$0$lcssa | 0; //@line 25806
 } else {
  $$060 = -1; //@line 25808
  $indvars$iv62 = 0; //@line 25808
 }
 while (1) {
  $26 = $3 + ($indvars$iv62 * 24 | 0) + 4 | 0; //@line 25812
  $28 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$26 >> 2] | 0) | 0; //@line 25814
  if ($2) {
   $34 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$3 + ($indvars$iv62 * 24 | 0) + 8 >> 2] | 0) | 0; //@line 25820
  } else {
   $34 = 0; //@line 25822
  }
  if ($28 >>> 0 > $34 >>> 0) {
   $$sink2 = $26; //@line 25826
   label = 17; //@line 25827
  } else {
   if ($2) {
    $$sink2 = $3 + ($indvars$iv62 * 24 | 0) + 8 | 0; //@line 25831
    label = 17; //@line 25832
   } else {
    $41 = 0; //@line 25834
   }
  }
  if ((label | 0) == 17) {
   label = 0; //@line 25838
   $41 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$$sink2 >> 2] | 0) | 0; //@line 25842
  }
  $38 = $3 + ($indvars$iv62 * 24 | 0) + 12 | 0; //@line 25844
  $39 = HEAP32[$38 >> 2] | 0; //@line 25845
  if ($39 >>> 0 > $41 >>> 0) {
   $42 = $39 - $41 | 0; //@line 25848
   $$2 = $42 >>> 0 < $$060 >>> 0 ? $42 : $$060; //@line 25851
  } else {
   HEAP32[$38 >> 2] = 0; //@line 25853
   $$2 = $$060; //@line 25854
  }
  $indvars$iv62 = $indvars$iv62 + 1 | 0; //@line 25856
  if (($indvars$iv62 | 0) == ($wide$trip$count | 0)) {
   $$0$lcssa = $$2; //@line 25859
   break;
  } else {
   $$060 = $$2; //@line 25862
  }
 }
 return $$0$lcssa | 0; //@line 25865
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32114
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32116
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32118
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32120
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32122
 $10 = $8 + 4 | 0; //@line 32124
 HEAP32[$10 >> 2] = 0; //@line 32126
 HEAP32[$10 + 4 >> 2] = 0; //@line 32129
 HEAP32[$8 >> 2] = 751; //@line 32130
 $14 = $8 + 12 | 0; //@line 32131
 HEAP32[$14 >> 2] = 10140; //@line 32132
 $15 = HEAP32[5805] | 0; //@line 32133
 if (!$15) {
  $25 = HEAP32[2536] | 0; //@line 32137
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 32138
  FUNCTION_TABLE_vii[$25 & 31](23208, $8); //@line 32139
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 753; //@line 32142
   $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 32143
   HEAP32[$26 >> 2] = $2; //@line 32144
   $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 32145
   HEAP32[$27 >> 2] = $4; //@line 32146
   $28 = $ReallocAsyncCtx3 + 12 | 0; //@line 32147
   HEAP32[$28 >> 2] = $6; //@line 32148
   $29 = $ReallocAsyncCtx3 + 16 | 0; //@line 32149
   HEAP32[$29 >> 2] = $8; //@line 32150
   $30 = $ReallocAsyncCtx3 + 20 | 0; //@line 32151
   HEAP32[$30 >> 2] = $14; //@line 32152
   sp = STACKTOP; //@line 32153
   return;
  }
  ___async_unwind = 0; //@line 32156
  HEAP32[$ReallocAsyncCtx3 >> 2] = 753; //@line 32157
  $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 32158
  HEAP32[$26 >> 2] = $2; //@line 32159
  $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 32160
  HEAP32[$27 >> 2] = $4; //@line 32161
  $28 = $ReallocAsyncCtx3 + 12 | 0; //@line 32162
  HEAP32[$28 >> 2] = $6; //@line 32163
  $29 = $ReallocAsyncCtx3 + 16 | 0; //@line 32164
  HEAP32[$29 >> 2] = $8; //@line 32165
  $30 = $ReallocAsyncCtx3 + 20 | 0; //@line 32166
  HEAP32[$30 >> 2] = $14; //@line 32167
  sp = STACKTOP; //@line 32168
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 32172
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 32173
  FUNCTION_TABLE_vi[$18 & 1023](23208); //@line 32174
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 752; //@line 32177
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 32178
   HEAP32[$19 >> 2] = $2; //@line 32179
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 32180
   HEAP32[$20 >> 2] = $4; //@line 32181
   $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 32182
   HEAP32[$21 >> 2] = $6; //@line 32183
   $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 32184
   HEAP32[$22 >> 2] = $8; //@line 32185
   $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 32186
   HEAP32[$23 >> 2] = $14; //@line 32187
   sp = STACKTOP; //@line 32188
   return;
  }
  ___async_unwind = 0; //@line 32191
  HEAP32[$ReallocAsyncCtx2 >> 2] = 752; //@line 32192
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 32193
  HEAP32[$19 >> 2] = $2; //@line 32194
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 32195
  HEAP32[$20 >> 2] = $4; //@line 32196
  $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 32197
  HEAP32[$21 >> 2] = $6; //@line 32198
  $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 32199
  HEAP32[$22 >> 2] = $8; //@line 32200
  $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 32201
  HEAP32[$23 >> 2] = $14; //@line 32202
  sp = STACKTOP; //@line 32203
  return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15233
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 15239
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 15245
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 15248
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15249
    FUNCTION_TABLE_viiiii[$53 & 7]($50, $1, $2, $3, $4); //@line 15250
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 795; //@line 15253
     sp = STACKTOP; //@line 15254
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15257
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 15265
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 15270
     $19 = $1 + 44 | 0; //@line 15271
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 15277
     HEAP8[$22 >> 0] = 0; //@line 15278
     $23 = $1 + 53 | 0; //@line 15279
     HEAP8[$23 >> 0] = 0; //@line 15280
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 15282
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 15285
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 15286
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 15287
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 794; //@line 15290
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 15292
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 15294
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 15296
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 15298
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 15300
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 15302
      sp = STACKTOP; //@line 15303
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15306
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 15310
      label = 13; //@line 15311
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 15316
       label = 13; //@line 15317
      } else {
       $$037$off039 = 3; //@line 15319
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 15323
      $39 = $1 + 40 | 0; //@line 15324
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 15327
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 15337
        $$037$off039 = $$037$off038; //@line 15338
       } else {
        $$037$off039 = $$037$off038; //@line 15340
       }
      } else {
       $$037$off039 = $$037$off038; //@line 15343
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 15346
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 15353
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_175($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 33258
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33260
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33262
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33264
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33266
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33270
 $13 = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 33271
 if (!$13) {
  $21 = HEAP32[$2 >> 2] | 0; //@line 33274
  $23 = $8 + 12 | 0; //@line 33276
  HEAP32[$8 >> 2] = 532; //@line 33277
  HEAP32[$8 + 4 >> 2] = 0; //@line 33279
  HEAP32[$8 + 8 >> 2] = $4; //@line 33281
  HEAP32[$23 >> 2] = 848; //@line 33282
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 33283
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($21, $4 + 1056 | 0, $8); //@line 33284
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 533; //@line 33287
   $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 33288
   HEAP32[$24 >> 2] = $23; //@line 33289
   $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 33290
   HEAP32[$25 >> 2] = $2; //@line 33291
   $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 33292
   HEAP32[$26 >> 2] = $4; //@line 33293
   $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 33294
   HEAP32[$27 >> 2] = $6; //@line 33295
   $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 33296
   HEAP32[$28 >> 2] = $8; //@line 33297
   sp = STACKTOP; //@line 33298
   return;
  }
  ___async_unwind = 0; //@line 33301
  HEAP32[$ReallocAsyncCtx7 >> 2] = 533; //@line 33302
  $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 33303
  HEAP32[$24 >> 2] = $23; //@line 33304
  $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 33305
  HEAP32[$25 >> 2] = $2; //@line 33306
  $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 33307
  HEAP32[$26 >> 2] = $4; //@line 33308
  $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 33309
  HEAP32[$27 >> 2] = $6; //@line 33310
  $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 33311
  HEAP32[$28 >> 2] = $8; //@line 33312
  sp = STACKTOP; //@line 33313
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 33317
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 33318
  FUNCTION_TABLE_vi[$16 & 1023]($12); //@line 33319
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 531; //@line 33322
   $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 33323
   HEAP32[$17 >> 2] = $2; //@line 33324
   $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 33325
   HEAP32[$18 >> 2] = $4; //@line 33326
   $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 33327
   HEAP32[$19 >> 2] = $8; //@line 33328
   $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 33329
   HEAP32[$20 >> 2] = $6; //@line 33330
   sp = STACKTOP; //@line 33331
   return;
  }
  ___async_unwind = 0; //@line 33334
  HEAP32[$ReallocAsyncCtx3 >> 2] = 531; //@line 33335
  $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 33336
  HEAP32[$17 >> 2] = $2; //@line 33337
  $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 33338
  HEAP32[$18 >> 2] = $4; //@line 33339
  $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 33340
  HEAP32[$19 >> 2] = $8; //@line 33341
  $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 33342
  HEAP32[$20 >> 2] = $6; //@line 33343
  sp = STACKTOP; //@line 33344
  return;
 }
}
function _main__async_cb_158($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 32322
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32324
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32326
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32328
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32330
 $$pre$i$i = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 32333
 HEAP32[5805] = $$pre$i$i; //@line 32334
 if ($$pre$i$i | 0) {
  $14 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 32339
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 32340
  FUNCTION_TABLE_vi[$14 & 1023]($8); //@line 32341
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 754; //@line 32344
   $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 32345
   HEAP32[$15 >> 2] = $8; //@line 32346
   $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 32347
   HEAP32[$16 >> 2] = $2; //@line 32348
   $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 32349
   HEAP32[$17 >> 2] = $4; //@line 32350
   $18 = $ReallocAsyncCtx4 + 16 | 0; //@line 32351
   HEAP32[$18 >> 2] = $6; //@line 32352
   sp = STACKTOP; //@line 32353
   return;
  }
  ___async_unwind = 0; //@line 32356
  HEAP32[$ReallocAsyncCtx4 >> 2] = 754; //@line 32357
  $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 32358
  HEAP32[$15 >> 2] = $8; //@line 32359
  $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 32360
  HEAP32[$16 >> 2] = $2; //@line 32361
  $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 32362
  HEAP32[$17 >> 2] = $4; //@line 32363
  $18 = $ReallocAsyncCtx4 + 16 | 0; //@line 32364
  HEAP32[$18 >> 2] = $6; //@line 32365
  sp = STACKTOP; //@line 32366
  return;
 }
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(23200, 23208) | 0; //@line 32369
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(23200) | 0) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 32373
  _puts(15432) | 0; //@line 32374
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 755; //@line 32377
   sp = STACKTOP; //@line 32378
   return;
  }
  ___async_unwind = 0; //@line 32381
  HEAP32[$ReallocAsyncCtx6 >> 2] = 755; //@line 32382
  sp = STACKTOP; //@line 32383
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(23200, 5) | 0; //@line 32386
 HEAP8[$2 >> 0] = 0; //@line 32387
 HEAP32[$2 + 4 >> 2] = 23905; //@line 32389
 HEAP32[$2 + 8 >> 2] = 23913; //@line 32391
 HEAP32[$2 + 12 >> 2] = 23921; //@line 32393
 HEAP8[$2 + 16 >> 0] = 3; //@line 32395
 $25 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(23200, $2) | 0; //@line 32396
 switch ($25 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$4 >> 2] = $25; //@line 32402
   _printf(15466, $4) | 0; //@line 32403
   HEAP32[___async_retval >> 2] = -1; //@line 32405
   return;
  }
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 32409
 _puts(15495) | 0; //@line 32410
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 756; //@line 32413
  $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 32414
  HEAP32[$26 >> 2] = $2; //@line 32415
  sp = STACKTOP; //@line 32416
  return;
 }
 ___async_unwind = 0; //@line 32419
 HEAP32[$ReallocAsyncCtx5 >> 2] = 756; //@line 32420
 $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 32421
 HEAP32[$26 >> 2] = $2; //@line 32422
 sp = STACKTOP; //@line 32423
 return;
}
function _initialize__async_cb_242($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 10859
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10861
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10863
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10865
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10867
 $10 = $0 + 24 | 0; //@line 10869
 $12 = HEAP32[$10 >> 2] | 0; //@line 10871
 $15 = HEAP32[$10 + 4 >> 2] | 0; //@line 10874
 $17 = HEAP32[$0 + 32 >> 2] | 0; //@line 10876
 $19 = HEAP32[$0 + 36 >> 2] | 0; //@line 10878
 $21 = HEAP32[$2 >> 2] | 0; //@line 10881
 $22 = $21 + 32 | 0; //@line 10882
 HEAP32[$22 >> 2] = HEAP32[___async_retval >> 2]; //@line 10883
 $23 = $21 + 40 | 0; //@line 10884
 $24 = $23; //@line 10885
 HEAP32[$24 >> 2] = 0; //@line 10887
 HEAP32[$24 + 4 >> 2] = 0; //@line 10890
 $28 = $21 + 8 | 0; //@line 10891
 HEAP32[$28 >> 2] = $4; //@line 10892
 $29 = _bitshift64Shl(1, 0, $6 | 0) | 0; //@line 10893
 $31 = _i64Add($29 | 0, tempRet0 | 0, -1, 0) | 0; //@line 10895
 $33 = $21 + 12 | 0; //@line 10897
 HEAP32[$33 >> 2] = $31; //@line 10898
 HEAP32[$21 + 16 >> 2] = $8; //@line 10900
 $36 = $21 + 24 | 0; //@line 10902
 HEAP32[$36 >> 2] = $12; //@line 10904
 HEAP32[$36 + 4 >> 2] = $15; //@line 10907
 $40 = $21 + 48 | 0; //@line 10908
 $41 = $40; //@line 10909
 HEAP32[$41 >> 2] = 0; //@line 10911
 HEAP32[$41 + 4 >> 2] = 0; //@line 10914
 HEAP8[$21 + 56 >> 0] = 1; //@line 10916
 $48 = HEAP32[(HEAP32[$17 >> 2] | 0) + 4 >> 2] | 0; //@line 10919
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 10920
 $49 = FUNCTION_TABLE_i[$48 & 7]() | 0; //@line 10921
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 702; //@line 10924
  $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 10925
  HEAP32[$50 >> 2] = $2; //@line 10926
  $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 10927
  HEAP32[$51 >> 2] = $19; //@line 10928
  $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 10929
  HEAP32[$52 >> 2] = $22; //@line 10930
  $53 = $ReallocAsyncCtx4 + 16 | 0; //@line 10931
  HEAP32[$53 >> 2] = $33; //@line 10932
  $54 = $ReallocAsyncCtx4 + 20 | 0; //@line 10933
  HEAP32[$54 >> 2] = $28; //@line 10934
  $55 = $ReallocAsyncCtx4 + 24 | 0; //@line 10935
  HEAP32[$55 >> 2] = $23; //@line 10936
  $56 = $ReallocAsyncCtx4 + 28 | 0; //@line 10937
  HEAP32[$56 >> 2] = $40; //@line 10938
  sp = STACKTOP; //@line 10939
  return;
 }
 HEAP32[___async_retval >> 2] = $49; //@line 10943
 ___async_unwind = 0; //@line 10944
 HEAP32[$ReallocAsyncCtx4 >> 2] = 702; //@line 10945
 $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 10946
 HEAP32[$50 >> 2] = $2; //@line 10947
 $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 10948
 HEAP32[$51 >> 2] = $19; //@line 10949
 $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 10950
 HEAP32[$52 >> 2] = $22; //@line 10951
 $53 = $ReallocAsyncCtx4 + 16 | 0; //@line 10952
 HEAP32[$53 >> 2] = $33; //@line 10953
 $54 = $ReallocAsyncCtx4 + 20 | 0; //@line 10954
 HEAP32[$54 >> 2] = $28; //@line 10955
 $55 = $ReallocAsyncCtx4 + 24 | 0; //@line 10956
 HEAP32[$55 >> 2] = $23; //@line 10957
 $56 = $ReallocAsyncCtx4 + 28 | 0; //@line 10958
 HEAP32[$56 >> 2] = $40; //@line 10959
 sp = STACKTOP; //@line 10960
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $14 = 0, $2 = 0, $27 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 9796
 STACKTOP = STACKTOP + 16 | 0; //@line 9797
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9797
 $2 = sp; //@line 9798
 $3 = $0 + 1876 | 0; //@line 9799
 if (HEAP32[$3 >> 2] | 0) {
  $$0 = 0; //@line 9803
  STACKTOP = sp; //@line 9804
  return $$0 | 0; //@line 9804
 }
 HEAP32[$0 + 2288 >> 2] = $1; //@line 9807
 __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1); //@line 9808
 $7 = $0 + 4 | 0; //@line 9809
 $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9812
 __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE($7, $0 + 1812 | 0, $0 + 1336 | 0, $1) | 0; //@line 9813
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 311; //@line 9816
  HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 9818
  HEAP32[$AsyncCtx7 + 8 >> 2] = $7; //@line 9820
  HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 9822
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 9824
  sp = STACKTOP; //@line 9825
  STACKTOP = sp; //@line 9826
  return 0; //@line 9826
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9828
 HEAP32[$2 >> 2] = 2; //@line 9829
 $14 = $2 + 4 | 0; //@line 9830
 HEAP8[$14 >> 0] = 1; //@line 9831
 $AsyncCtx3 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9832
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($7, $2) | 0; //@line 9833
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 312; //@line 9836
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 9838
  HEAP32[$AsyncCtx3 + 8 >> 2] = $14; //@line 9840
  HEAP32[$AsyncCtx3 + 12 >> 2] = $7; //@line 9842
  HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 9844
  HEAP32[$AsyncCtx3 + 20 >> 2] = $0; //@line 9846
  HEAP32[$AsyncCtx3 + 24 >> 2] = $3; //@line 9848
  HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 9850
  sp = STACKTOP; //@line 9851
  STACKTOP = sp; //@line 9852
  return 0; //@line 9852
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9854
 HEAP32[$2 >> 2] = 7; //@line 9855
 HEAP8[$14 >> 0] = 1; //@line 9856
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 9857
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($7, $2) | 0; //@line 9858
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 313; //@line 9861
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 9863
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 9865
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 9867
  sp = STACKTOP; //@line 9868
  STACKTOP = sp; //@line 9869
  return 0; //@line 9869
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9871
 HEAP32[$0 + 1960 >> 2] = 0; //@line 9873
 HEAP32[$0 + 1956 >> 2] = 0; //@line 9875
 HEAP32[$3 >> 2] = 1; //@line 9876
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9877
 $27 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 9878
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 314; //@line 9881
  HEAP32[$AsyncCtx10 + 4 >> 2] = $2; //@line 9883
  sp = STACKTOP; //@line 9884
  STACKTOP = sp; //@line 9885
  return 0; //@line 9885
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 9887
 $$0 = $27; //@line 9888
 STACKTOP = sp; //@line 9889
 return $$0 | 0; //@line 9889
}
function _equeue_enqueue($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051$ph = 0, $$05157 = 0, $$0515859 = 0, $$053 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $54 = 0, $65 = 0, $67 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4700
 $13 = $1 - (HEAP32[$0 + 12 >> 2] | 0) | HEAPU8[$1 + 4 >> 0] << HEAP32[$0 + 16 >> 2]; //@line 4711
 $14 = $1 + 20 | 0; //@line 4712
 $16 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 4714
 HEAP32[$14 >> 2] = ($16 & ~($16 >> 31)) + $2; //@line 4719
 HEAP8[$1 + 5 >> 0] = HEAP8[$0 + 9 >> 0] | 0; //@line 4723
 $24 = $0 + 128 | 0; //@line 4724
 _equeue_mutex_lock($24); //@line 4725
 $25 = HEAP32[$0 >> 2] | 0; //@line 4726
 L1 : do {
  if (!$25) {
   $$051$ph = $0; //@line 4730
   label = 5; //@line 4731
  } else {
   $27 = HEAP32[$14 >> 2] | 0; //@line 4733
   $$053 = $0; //@line 4734
   $29 = $25; //@line 4734
   while (1) {
    if (((HEAP32[$29 + 20 >> 2] | 0) - $27 | 0) >= 0) {
     break;
    }
    $33 = $29 + 8 | 0; //@line 4743
    $34 = HEAP32[$33 >> 2] | 0; //@line 4744
    if (!$34) {
     $$051$ph = $33; //@line 4747
     label = 5; //@line 4748
     break L1;
    } else {
     $$053 = $33; //@line 4751
     $29 = $34; //@line 4751
    }
   }
   if ((HEAP32[$29 + 20 >> 2] | 0) != (HEAP32[$14 >> 2] | 0)) {
    $49 = $1 + 8 | 0; //@line 4759
    HEAP32[$49 >> 2] = $29; //@line 4760
    HEAP32[$29 + 16 >> 2] = $49; //@line 4762
    $$0515859 = $$053; //@line 4763
    label = 11; //@line 4764
    break;
   }
   $42 = HEAP32[$29 + 8 >> 2] | 0; //@line 4768
   $43 = $1 + 8 | 0; //@line 4769
   HEAP32[$43 >> 2] = $42; //@line 4770
   if ($42 | 0) {
    HEAP32[$42 + 16 >> 2] = $43; //@line 4774
   }
   $46 = HEAP32[$$053 >> 2] | 0; //@line 4776
   $47 = $1 + 12 | 0; //@line 4777
   HEAP32[$47 >> 2] = $46; //@line 4778
   HEAP32[$46 + 16 >> 2] = $47; //@line 4780
   $$05157 = $$053; //@line 4781
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$1 + 8 >> 2] = 0; //@line 4786
  $$0515859 = $$051$ph; //@line 4787
  label = 11; //@line 4788
 }
 if ((label | 0) == 11) {
  HEAP32[$1 + 12 >> 2] = 0; //@line 4792
  $$05157 = $$0515859; //@line 4793
 }
 HEAP32[$$05157 >> 2] = $1; //@line 4795
 HEAP32[$1 + 16 >> 2] = $$05157; //@line 4797
 $54 = HEAP32[$0 + 40 >> 2] | 0; //@line 4799
 if (!$54) {
  _equeue_mutex_unlock($24); //@line 4802
  return $13 | 0; //@line 4803
 }
 if (!(HEAP8[$0 + 36 >> 0] | 0)) {
  _equeue_mutex_unlock($24); //@line 4809
  return $13 | 0; //@line 4810
 }
 if ((HEAP32[$0 >> 2] | 0) != ($1 | 0)) {
  _equeue_mutex_unlock($24); //@line 4815
  return $13 | 0; //@line 4816
 }
 if (HEAP32[$1 + 12 >> 2] | 0) {
  _equeue_mutex_unlock($24); //@line 4822
  return $13 | 0; //@line 4823
 }
 $65 = HEAP32[$0 + 44 >> 2] | 0; //@line 4826
 $67 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 4828
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 4832
 FUNCTION_TABLE_vii[$54 & 31]($65, $67 & ~($67 >> 31)); //@line 4833
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 178; //@line 4836
  HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 4838
  HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 4840
  sp = STACKTOP; //@line 4841
  return 0; //@line 4842
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4844
 _equeue_mutex_unlock($24); //@line 4845
 return $13 | 0; //@line 4846
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_38($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx24 = 0, sp = 0;
 sp = STACKTOP; //@line 20098
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20100
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20102
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20104
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20106
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20108
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20110
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20112
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20114
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20116
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20118
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20120
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20122
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20124
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20126
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20128
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20130
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20132
 $36 = HEAP8[$0 + 72 >> 0] | 0; //@line 20134
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20136
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 20138
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 20140
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 20142
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 20144
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 20146
 $49 = $4 + 356 | 0; //@line 20147
 $50 = HEAP32[$49 >> 2] | 0; //@line 20148
 $ReallocAsyncCtx24 = _emscripten_realloc_async_context(104) | 0; //@line 20150
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($50, $4 + 1056 | 0); //@line 20151
 if (!___async) {
  ___async_unwind = 0; //@line 20154
 }
 HEAP32[$ReallocAsyncCtx24 >> 2] = 388; //@line 20156
 HEAP32[$ReallocAsyncCtx24 + 4 >> 2] = $2; //@line 20158
 HEAP32[$ReallocAsyncCtx24 + 8 >> 2] = $4; //@line 20160
 HEAP32[$ReallocAsyncCtx24 + 12 >> 2] = $49; //@line 20162
 HEAP32[$ReallocAsyncCtx24 + 16 >> 2] = $6; //@line 20164
 HEAP32[$ReallocAsyncCtx24 + 20 >> 2] = $8; //@line 20166
 HEAP32[$ReallocAsyncCtx24 + 24 >> 2] = $10; //@line 20168
 HEAP32[$ReallocAsyncCtx24 + 28 >> 2] = $12; //@line 20170
 HEAP32[$ReallocAsyncCtx24 + 32 >> 2] = $14; //@line 20172
 HEAP32[$ReallocAsyncCtx24 + 36 >> 2] = $16; //@line 20174
 HEAP32[$ReallocAsyncCtx24 + 40 >> 2] = $40; //@line 20176
 HEAP32[$ReallocAsyncCtx24 + 44 >> 2] = $38; //@line 20178
 HEAP32[$ReallocAsyncCtx24 + 48 >> 2] = $32; //@line 20180
 HEAP32[$ReallocAsyncCtx24 + 52 >> 2] = $34; //@line 20182
 HEAP32[$ReallocAsyncCtx24 + 56 >> 2] = $18; //@line 20184
 HEAP32[$ReallocAsyncCtx24 + 60 >> 2] = $20; //@line 20186
 HEAP32[$ReallocAsyncCtx24 + 64 >> 2] = $22; //@line 20188
 HEAP32[$ReallocAsyncCtx24 + 68 >> 2] = $24; //@line 20190
 HEAP32[$ReallocAsyncCtx24 + 72 >> 2] = $26; //@line 20192
 HEAP32[$ReallocAsyncCtx24 + 76 >> 2] = $28; //@line 20194
 HEAP32[$ReallocAsyncCtx24 + 80 >> 2] = $30; //@line 20196
 HEAP8[$ReallocAsyncCtx24 + 84 >> 0] = $36; //@line 20198
 HEAP32[$ReallocAsyncCtx24 + 88 >> 2] = $42; //@line 20200
 HEAP32[$ReallocAsyncCtx24 + 92 >> 2] = $44; //@line 20202
 HEAP32[$ReallocAsyncCtx24 + 96 >> 2] = $46; //@line 20204
 HEAP32[$ReallocAsyncCtx24 + 100 >> 2] = $48; //@line 20206
 sp = STACKTOP; //@line 20207
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $2 = 0, $20 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx9 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 10364
 STACKTOP = STACKTOP + 48 | 0; //@line 10365
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 10365
 $vararg_buffer5 = sp + 24 | 0; //@line 10366
 $vararg_buffer3 = sp + 16 | 0; //@line 10367
 $2 = sp + 28 | 0; //@line 10370
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(11887, sp) | 0; //@line 10375
  _printf(12684, sp + 8 | 0) | 0; //@line 10376
  $AsyncCtx9 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10377
  _putchar(10) | 0; //@line 10378
  if (___async) {
   HEAP32[$AsyncCtx9 >> 2] = 330; //@line 10381
   sp = STACKTOP; //@line 10382
   STACKTOP = sp; //@line 10383
   return 0; //@line 10383
  }
  _emscripten_free_async_context($AsyncCtx9 | 0); //@line 10385
  $$1 = -1012; //@line 10386
  STACKTOP = sp; //@line 10387
  return $$1 | 0; //@line 10387
 }
 HEAP32[$2 >> 2] = 2; //@line 10389
 $6 = $0 + 4 | 0; //@line 10390
 $AsyncCtx13 = _emscripten_alloc_async_context(40, sp) | 0; //@line 10391
 $7 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($6, $2) | 0; //@line 10392
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 331; //@line 10395
  HEAP32[$AsyncCtx13 + 4 >> 2] = $2; //@line 10397
  HEAP32[$AsyncCtx13 + 8 >> 2] = $2; //@line 10399
  HEAP8[$AsyncCtx13 + 12 >> 0] = $1; //@line 10401
  HEAP32[$AsyncCtx13 + 16 >> 2] = $6; //@line 10403
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer3; //@line 10405
  HEAP32[$AsyncCtx13 + 24 >> 2] = $vararg_buffer3; //@line 10407
  HEAP32[$AsyncCtx13 + 28 >> 2] = $vararg_buffer5; //@line 10409
  HEAP32[$AsyncCtx13 + 32 >> 2] = $vararg_buffer5; //@line 10411
  HEAP32[$AsyncCtx13 + 36 >> 2] = $2; //@line 10413
  sp = STACKTOP; //@line 10414
  STACKTOP = sp; //@line 10415
  return 0; //@line 10415
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 10417
 do {
  if (!$7) {
   HEAP32[$2 >> 2] = 21; //@line 10421
   HEAP8[$2 + 4 >> 0] = $1; //@line 10423
   $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10424
   $20 = __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $2) | 0; //@line 10425
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 333; //@line 10428
    HEAP32[$AsyncCtx17 + 4 >> 2] = $2; //@line 10430
    sp = STACKTOP; //@line 10431
    STACKTOP = sp; //@line 10432
    return 0; //@line 10432
   } else {
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 10434
    $$0 = $20; //@line 10435
    break;
   }
  } else {
   _printf(11887, $vararg_buffer3) | 0; //@line 10439
   _printf(12745, $vararg_buffer5) | 0; //@line 10440
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10441
   _putchar(10) | 0; //@line 10442
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 332; //@line 10445
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 10447
    sp = STACKTOP; //@line 10448
    STACKTOP = sp; //@line 10449
    return 0; //@line 10449
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10451
    $$0 = -1003; //@line 10452
    break;
   }
  }
 } while (0);
 $$1 = $$0; //@line 10457
 STACKTOP = sp; //@line 10458
 return $$1 | 0; //@line 10458
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 14545
 STACKTOP = STACKTOP + 48 | 0; //@line 14546
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 14546
 $vararg_buffer10 = sp + 32 | 0; //@line 14547
 $vararg_buffer7 = sp + 24 | 0; //@line 14548
 $vararg_buffer3 = sp + 16 | 0; //@line 14549
 $vararg_buffer = sp; //@line 14550
 $0 = sp + 36 | 0; //@line 14551
 $1 = ___cxa_get_globals_fast() | 0; //@line 14552
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 14555
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 14560
   $9 = HEAP32[$7 >> 2] | 0; //@line 14562
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 14565
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 18503; //@line 14571
    _abort_message(18453, $vararg_buffer7); //@line 14572
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 14581
   } else {
    $22 = $3 + 80 | 0; //@line 14583
   }
   HEAP32[$0 >> 2] = $22; //@line 14585
   $23 = HEAP32[$3 >> 2] | 0; //@line 14586
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 14588
   $28 = HEAP32[(HEAP32[110] | 0) + 16 >> 2] | 0; //@line 14591
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 14592
   $29 = FUNCTION_TABLE_iiii[$28 & 15](440, $23, $0) | 0; //@line 14593
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 785; //@line 14596
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14598
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 14600
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 14602
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 14604
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 14606
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 14608
    sp = STACKTOP; //@line 14609
    STACKTOP = sp; //@line 14610
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14612
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 18503; //@line 14614
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 14616
    _abort_message(18412, $vararg_buffer3); //@line 14617
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 14620
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 14623
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14624
   $40 = FUNCTION_TABLE_ii[$39 & 15]($36) | 0; //@line 14625
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 786; //@line 14628
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 14630
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 14632
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 14634
    sp = STACKTOP; //@line 14635
    STACKTOP = sp; //@line 14636
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 14638
    HEAP32[$vararg_buffer >> 2] = 18503; //@line 14639
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 14641
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 14643
    _abort_message(18367, $vararg_buffer); //@line 14644
   }
  }
 }
 _abort_message(18491, $vararg_buffer10); //@line 14649
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_299($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 14095
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14099
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14101
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14103
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14105
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14107
 $12 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14108
 if ($12 | 0) {
  $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 14112
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 14113
  FUNCTION_TABLE_vi[$15 & 1023]($4); //@line 14114
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 219; //@line 14117
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 14118
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 14119
   $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 14120
   HEAP32[$17 >> 2] = $6; //@line 14121
   $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 14122
   HEAP32[$18 >> 2] = $8; //@line 14123
   $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 14124
   HEAP32[$19 >> 2] = $10; //@line 14125
   sp = STACKTOP; //@line 14126
   return;
  }
  ___async_unwind = 0; //@line 14129
  HEAP32[$ReallocAsyncCtx4 >> 2] = 219; //@line 14130
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 14131
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 14132
  $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 14133
  HEAP32[$17 >> 2] = $6; //@line 14134
  $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 14135
  HEAP32[$18 >> 2] = $8; //@line 14136
  $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 14137
  HEAP32[$19 >> 2] = $10; //@line 14138
  sp = STACKTOP; //@line 14139
  return;
 }
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(16) | 0; //@line 14144
  _mbed_assert_internal(12851, 11935, 909); //@line 14145
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 220; //@line 14148
   $21 = $ReallocAsyncCtx10 + 4 | 0; //@line 14149
   HEAP32[$21 >> 2] = $6; //@line 14150
   $22 = $ReallocAsyncCtx10 + 8 | 0; //@line 14151
   HEAP32[$22 >> 2] = $8; //@line 14152
   $23 = $ReallocAsyncCtx10 + 12 | 0; //@line 14153
   HEAP32[$23 >> 2] = $10; //@line 14154
   sp = STACKTOP; //@line 14155
   return;
  }
  ___async_unwind = 0; //@line 14158
  HEAP32[$ReallocAsyncCtx10 >> 2] = 220; //@line 14159
  $21 = $ReallocAsyncCtx10 + 4 | 0; //@line 14160
  HEAP32[$21 >> 2] = $6; //@line 14161
  $22 = $ReallocAsyncCtx10 + 8 | 0; //@line 14162
  HEAP32[$22 >> 2] = $8; //@line 14163
  $23 = $ReallocAsyncCtx10 + 12 | 0; //@line 14164
  HEAP32[$23 >> 2] = $10; //@line 14165
  sp = STACKTOP; //@line 14166
  return;
 }
 if (!(HEAP8[$6 + 11 >> 0] | 0)) {
  return;
 }
 $27 = HEAP8[$8 >> 0] | 0; //@line 14175
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 14176
 __ZN12LoRaWANStack9handle_txEhPKhth($10, $27, 0, 0, 2) | 0; //@line 14177
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 221; //@line 14180
  sp = STACKTOP; //@line 14181
  return;
 }
 ___async_unwind = 0; //@line 14184
 HEAP32[$ReallocAsyncCtx7 >> 2] = 221; //@line 14185
 sp = STACKTOP; //@line 14186
 return;
}
function __ZN18LoRaMacChannelPlan11remove_planEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $32 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20160
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $39 = -1002; //@line 20164
  return $39 | 0; //@line 20165
 }
 $4 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 20168
 $6 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 20170
 $8 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 1) | 0; //@line 20172
 if (!($4 << 24 >> 24)) {
  $39 = 0; //@line 20175
  return $39 | 0; //@line 20176
 }
 $10 = $4 & 255; //@line 20178
 $indvars$iv = 0; //@line 20179
 while (1) {
  if (!(__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $8, $indvars$iv) | 0)) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $6, $indvars$iv) | 0) {
    if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
     $39 = -1002; //@line 20190
     label = 15; //@line 20191
     break;
    }
    if ($indvars$iv >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) >>> 0) {
     $39 = -1003; //@line 20199
     label = 15; //@line 20200
     break;
    }
    $21 = HEAP32[$0 >> 2] | 0; //@line 20203
    $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 20206
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 20208
    $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv & 255) | 0; //@line 20209
    if (___async) {
     label = 9; //@line 20212
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 20215
    if (!$26) {
     $39 = -1003; //@line 20217
     label = 15; //@line 20218
     break;
    }
    $32 = HEAP32[$0 >> 2] | 0; //@line 20221
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20222
    __ZN7LoRaPHY18put_radio_to_sleepEv($32); //@line 20223
    if (___async) {
     label = 12; //@line 20226
     break;
    }
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 20229
   }
  }
  $indvars$iv$next = $indvars$iv + 1 | 0; //@line 20232
  if ($indvars$iv$next >>> 0 < $10 >>> 0) {
   $indvars$iv = $indvars$iv$next; //@line 20235
  } else {
   $39 = 0; //@line 20237
   label = 15; //@line 20238
   break;
  }
 }
 if ((label | 0) == 9) {
  HEAP32[$AsyncCtx >> 2] = 586; //@line 20243
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 20245
  HEAP32[$AsyncCtx + 8 >> 2] = $indvars$iv; //@line 20247
  HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 20249
  HEAP32[$AsyncCtx + 16 >> 2] = $8; //@line 20251
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 20253
  sp = STACKTOP; //@line 20254
  return 0; //@line 20255
 } else if ((label | 0) == 12) {
  HEAP32[$AsyncCtx2 >> 2] = 587; //@line 20258
  HEAP32[$AsyncCtx2 + 4 >> 2] = $indvars$iv; //@line 20260
  HEAP32[$AsyncCtx2 + 8 >> 2] = $10; //@line 20262
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 20264
  HEAP32[$AsyncCtx2 + 16 >> 2] = $8; //@line 20266
  HEAP32[$AsyncCtx2 + 20 >> 2] = $6; //@line 20268
  sp = STACKTOP; //@line 20269
  return 0; //@line 20270
 } else if ((label | 0) == 15) {
  return $39 | 0; //@line 20273
 }
 return 0; //@line 20275
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb_485($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $indvars$iv$reg2mem$0 = 0, label = 0, sp = 0, $indvars$iv$reg2mem$0$looptemp = 0;
 sp = STACKTOP; //@line 36265
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36269
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36271
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36273
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36275
 $indvars$iv$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 36276
 while (1) {
  $indvars$iv$reg2mem$0$looptemp = $indvars$iv$reg2mem$0;
  $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0 + 1 | 0; //@line 36278
  if ($indvars$iv$reg2mem$0 >>> 0 >= $4 >>> 0) {
   $35 = 0; //@line 36281
   label = 11; //@line 36282
   break;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $8, $indvars$iv$reg2mem$0) | 0) {
   $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0; //@line 36288
   continue;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $10, $indvars$iv$reg2mem$0) | 0) {
   break;
  }
 }
 if ((label | 0) == 11) {
  $34 = ___async_retval; //@line 36300
  HEAP32[$34 >> 2] = $35; //@line 36301
  return;
 }
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$6 >> 2] | 0) | 0)) {
  $35 = -1002; //@line 36307
  $34 = ___async_retval; //@line 36308
  HEAP32[$34 >> 2] = $35; //@line 36309
  return;
 }
 if ($indvars$iv$reg2mem$0 >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$6 >> 2] | 0) | 0) & 255) >>> 0) {
  $35 = -1003; //@line 36317
  $34 = ___async_retval; //@line 36318
  HEAP32[$34 >> 2] = $35; //@line 36319
  return;
 }
 $21 = HEAP32[$6 >> 2] | 0; //@line 36322
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 36325
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 36327
 $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv$reg2mem$0 & 255) | 0; //@line 36328
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 586; //@line 36331
  $27 = $ReallocAsyncCtx + 4 | 0; //@line 36332
  HEAP32[$27 >> 2] = $6; //@line 36333
  $28 = $ReallocAsyncCtx + 8 | 0; //@line 36334
  HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 36335
  $29 = $ReallocAsyncCtx + 12 | 0; //@line 36336
  HEAP32[$29 >> 2] = $4; //@line 36337
  $30 = $ReallocAsyncCtx + 16 | 0; //@line 36338
  HEAP32[$30 >> 2] = $8; //@line 36339
  $31 = $ReallocAsyncCtx + 20 | 0; //@line 36340
  HEAP32[$31 >> 2] = $10; //@line 36341
  sp = STACKTOP; //@line 36342
  return;
 }
 HEAP8[___async_retval >> 0] = $26 & 1; //@line 36347
 ___async_unwind = 0; //@line 36348
 HEAP32[$ReallocAsyncCtx >> 2] = 586; //@line 36349
 $27 = $ReallocAsyncCtx + 4 | 0; //@line 36350
 HEAP32[$27 >> 2] = $6; //@line 36351
 $28 = $ReallocAsyncCtx + 8 | 0; //@line 36352
 HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 36353
 $29 = $ReallocAsyncCtx + 12 | 0; //@line 36354
 HEAP32[$29 >> 2] = $4; //@line 36355
 $30 = $ReallocAsyncCtx + 16 | 0; //@line 36356
 HEAP32[$30 >> 2] = $8; //@line 36357
 $31 = $ReallocAsyncCtx + 20 | 0; //@line 36358
 HEAP32[$31 >> 2] = $10; //@line 36359
 sp = STACKTOP; //@line 36360
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_332($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22507
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22509
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22511
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22513
 $11 = $6 + 1880 | 0; //@line 22518
 $12 = $6 + 1892 | 0; //@line 22519
 $13 = HEAP32[$12 >> 2] | 0; //@line 22520
 $14 = ($13 | 0) != 0; //@line 22521
 if ((HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0) == 2) {
  if (!$14) {
   return;
  }
  $16 = HEAP32[$6 + 2288 >> 2] | 0; //@line 22527
  $18 = HEAP32[$13 + 4 >> 2] | 0; //@line 22529
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 22530
  FUNCTION_TABLE_vii[$18 & 31]($4, $11); //@line 22531
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 199; //@line 22534
   $19 = $ReallocAsyncCtx + 4 | 0; //@line 22535
   HEAP32[$19 >> 2] = $12; //@line 22536
   $20 = $ReallocAsyncCtx + 8 | 0; //@line 22537
   HEAP32[$20 >> 2] = $4; //@line 22538
   $21 = $ReallocAsyncCtx + 12 | 0; //@line 22539
   HEAP32[$21 >> 2] = $16; //@line 22540
   $22 = $ReallocAsyncCtx + 16 | 0; //@line 22541
   HEAP32[$22 >> 2] = $4; //@line 22542
   sp = STACKTOP; //@line 22543
   return;
  }
  ___async_unwind = 0; //@line 22546
  HEAP32[$ReallocAsyncCtx >> 2] = 199; //@line 22547
  $19 = $ReallocAsyncCtx + 4 | 0; //@line 22548
  HEAP32[$19 >> 2] = $12; //@line 22549
  $20 = $ReallocAsyncCtx + 8 | 0; //@line 22550
  HEAP32[$20 >> 2] = $4; //@line 22551
  $21 = $ReallocAsyncCtx + 12 | 0; //@line 22552
  HEAP32[$21 >> 2] = $16; //@line 22553
  $22 = $ReallocAsyncCtx + 16 | 0; //@line 22554
  HEAP32[$22 >> 2] = $4; //@line 22555
  sp = STACKTOP; //@line 22556
  return;
 } else {
  if (!$14) {
   return;
  }
  $24 = HEAP32[$6 + 2288 >> 2] | 0; //@line 22563
  $26 = HEAP32[$13 + 4 >> 2] | 0; //@line 22565
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 22566
  FUNCTION_TABLE_vii[$26 & 31]($2, $11); //@line 22567
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 203; //@line 22570
   $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 22571
   HEAP32[$27 >> 2] = $12; //@line 22572
   $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 22573
   HEAP32[$28 >> 2] = $2; //@line 22574
   $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 22575
   HEAP32[$29 >> 2] = $24; //@line 22576
   $30 = $ReallocAsyncCtx3 + 16 | 0; //@line 22577
   HEAP32[$30 >> 2] = $2; //@line 22578
   sp = STACKTOP; //@line 22579
   return;
  }
  ___async_unwind = 0; //@line 22582
  HEAP32[$ReallocAsyncCtx3 >> 2] = 203; //@line 22583
  $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 22584
  HEAP32[$27 >> 2] = $12; //@line 22585
  $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 22586
  HEAP32[$28 >> 2] = $2; //@line 22587
  $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 22588
  HEAP32[$29 >> 2] = $24; //@line 22589
  $30 = $ReallocAsyncCtx3 + 16 | 0; //@line 22590
  HEAP32[$30 >> 2] = $2; //@line 22591
  sp = STACKTOP; //@line 22592
  return;
 }
}
function __Z22compute_join_frame_micPKhtS0_Pj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $19 = 0, $22 = 0, $4 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22451
 _mbedtls_cipher_init(22564); //@line 22452
 $4 = _mbedtls_cipher_info_from_type(2) | 0; //@line 22453
 if (!$4) {
  $$0 = -24960; //@line 22456
 } else {
  $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 22458
  $6 = _mbedtls_cipher_setup(22564, $4) | 0; //@line 22459
  if (___async) {
   HEAP32[$AsyncCtx11 >> 2] = 601; //@line 22462
   HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 22464
   HEAP16[$AsyncCtx11 + 8 >> 1] = $1; //@line 22466
   HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 22468
   HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 22470
   sp = STACKTOP; //@line 22471
   return 0; //@line 22472
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 22474
  if (!$6) {
   $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 22477
   $12 = _mbedtls_cipher_cmac_starts(22564, $2, 128) | 0; //@line 22478
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 602; //@line 22481
    HEAP16[$AsyncCtx7 + 4 >> 1] = $1; //@line 22483
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 22485
    HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 22487
    sp = STACKTOP; //@line 22488
    return 0; //@line 22489
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 22491
   if (!$12) {
    $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 22496
    $19 = _mbedtls_cipher_cmac_update(22564, $0, $1 & 255) | 0; //@line 22497
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 603; //@line 22500
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 22502
     sp = STACKTOP; //@line 22503
     return 0; //@line 22504
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 22506
    if (!$19) {
     $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22509
     $22 = _mbedtls_cipher_cmac_finish(22564, 23872) | 0; //@line 22510
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 604; //@line 22513
      HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 22515
      sp = STACKTOP; //@line 22516
      return 0; //@line 22517
     }
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 22519
     if (!$22) {
      HEAP32[$3 >> 2] = (HEAPU8[23874] | 0) << 16 | (HEAPU8[23875] | 0) << 24 | (HEAPU8[23873] | 0) << 8 | (HEAPU8[23872] | 0); //@line 22536
      $$0 = 0; //@line 22537
     } else {
      $$0 = $22; //@line 22539
     }
    } else {
     $$0 = $19; //@line 22542
    }
   } else {
    $$0 = $12; //@line 22545
   }
  } else {
   $$0 = $6; //@line 22548
  }
 }
 $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22551
 _mbedtls_cipher_free(22564); //@line 22552
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 605; //@line 22555
  HEAP32[$AsyncCtx15 + 4 >> 2] = $$0; //@line 22557
  sp = STACKTOP; //@line 22558
  return 0; //@line 22559
 } else {
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 22561
  return $$0 | 0; //@line 22562
 }
 return 0; //@line 22564
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_386($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $48 = 0, $52 = 0, $54 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26739
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 26741
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26743
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26745
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26747
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26749
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26751
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26753
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26755
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26757
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26759
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26761
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26763
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 26765
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 26767
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 26769
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 26771
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 26773
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 26775
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 26777
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 26779
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 26783
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 26787
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 26791
 $54 = $4 + 689 | 0; //@line 26793
 HEAP8[$54 >> 0] = HEAP32[$0 + 84 >> 2]; //@line 26794
 _printf(10904, $44) | 0; //@line 26795
 HEAP32[$48 >> 2] = HEAPU8[$54 >> 0]; //@line 26798
 _printf(11079, $48) | 0; //@line 26799
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(88) | 0; //@line 26800
 _putchar(10) | 0; //@line 26801
 if (!___async) {
  ___async_unwind = 0; //@line 26804
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 92; //@line 26806
 HEAP16[$ReallocAsyncCtx7 + 4 >> 1] = $2; //@line 26808
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 26810
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 26812
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 26814
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 26816
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $12; //@line 26818
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $14; //@line 26820
 HEAP32[$ReallocAsyncCtx7 + 32 >> 2] = $16; //@line 26822
 HEAP32[$ReallocAsyncCtx7 + 36 >> 2] = $18; //@line 26824
 HEAP32[$ReallocAsyncCtx7 + 40 >> 2] = $20; //@line 26826
 HEAP32[$ReallocAsyncCtx7 + 44 >> 2] = $22; //@line 26828
 HEAP32[$ReallocAsyncCtx7 + 48 >> 2] = $24; //@line 26830
 HEAP32[$ReallocAsyncCtx7 + 52 >> 2] = $26; //@line 26832
 HEAP32[$ReallocAsyncCtx7 + 56 >> 2] = $28; //@line 26834
 HEAP32[$ReallocAsyncCtx7 + 60 >> 2] = $30; //@line 26836
 HEAP32[$ReallocAsyncCtx7 + 64 >> 2] = $32; //@line 26838
 HEAP32[$ReallocAsyncCtx7 + 68 >> 2] = $34; //@line 26840
 HEAP32[$ReallocAsyncCtx7 + 72 >> 2] = $36; //@line 26842
 HEAP32[$ReallocAsyncCtx7 + 76 >> 2] = $38; //@line 26844
 HEAP32[$ReallocAsyncCtx7 + 80 >> 2] = $40; //@line 26846
 HEAP32[$ReallocAsyncCtx7 + 84 >> 2] = $52; //@line 26848
 sp = STACKTOP; //@line 26849
 return;
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10212
 STACKTOP = STACKTOP + 48 | 0; //@line 10213
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 10213
 $vararg_buffer3 = sp + 16 | 0; //@line 10214
 $vararg_buffer = sp; //@line 10215
 $3 = sp + 32 | 0; //@line 10216
 $4 = $0 + 28 | 0; //@line 10217
 $5 = HEAP32[$4 >> 2] | 0; //@line 10218
 HEAP32[$3 >> 2] = $5; //@line 10219
 $7 = $0 + 20 | 0; //@line 10221
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 10223
 HEAP32[$3 + 4 >> 2] = $9; //@line 10224
 HEAP32[$3 + 8 >> 2] = $1; //@line 10226
 HEAP32[$3 + 12 >> 2] = $2; //@line 10228
 $12 = $9 + $2 | 0; //@line 10229
 $13 = $0 + 60 | 0; //@line 10230
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 10233
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 10235
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 10237
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 10239
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 10243
  } else {
   $$04756 = 2; //@line 10245
   $$04855 = $12; //@line 10245
   $$04954 = $3; //@line 10245
   $27 = $17; //@line 10245
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 10251
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 10253
    $38 = $27 >>> 0 > $37 >>> 0; //@line 10254
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 10256
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 10258
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 10260
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 10263
    $44 = $$150 + 4 | 0; //@line 10264
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 10267
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 10270
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 10272
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 10274
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 10276
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 10279
     break L1;
    } else {
     $$04756 = $$1; //@line 10282
     $$04954 = $$150; //@line 10282
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 10286
   HEAP32[$4 >> 2] = 0; //@line 10287
   HEAP32[$7 >> 2] = 0; //@line 10288
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 10291
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 10294
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 10299
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 10305
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 10310
  $25 = $20; //@line 10311
  HEAP32[$4 >> 2] = $25; //@line 10312
  HEAP32[$7 >> 2] = $25; //@line 10313
  $$051 = $2; //@line 10314
 }
 STACKTOP = sp; //@line 10316
 return $$051 | 0; //@line 10316
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_97($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 25989
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 25995
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25997
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26001
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26003
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26005
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26007
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26009
 $22 = HEAP16[$0 + 44 >> 1] | 0; //@line 26011
 $24 = HEAP8[$0 + 46 >> 0] | 0; //@line 26013
 $26 = HEAP8[$0 + 47 >> 0] | 0; //@line 26015
 $28 = HEAP8[$0 + 48 >> 0] | 0; //@line 26017
 $30 = HEAP32[$0 + 52 >> 2] | 0; //@line 26019
 $32 = HEAP32[$0 + 56 >> 2] | 0; //@line 26021
 $34 = HEAP32[$0 + 60 >> 2] | 0; //@line 26023
 $36 = HEAP32[$0 + 64 >> 2] | 0; //@line 26025
 $38 = HEAP32[$0 + 68 >> 2] | 0; //@line 26027
 $40 = HEAP8[$0 + 72 >> 0] | 0; //@line 26029
 $42 = HEAP8[$0 + 73 >> 0] | 0; //@line 26031
 $44 = HEAP8[$0 + 74 >> 0] | 0; //@line 26033
 $46 = HEAP32[$0 + 76 >> 2] | 0; //@line 26035
 $48 = HEAP32[$0 + 80 >> 2] | 0; //@line 26037
 $50 = HEAP32[$0 + 84 >> 2] | 0; //@line 26039
 $52 = HEAP32[$0 + 88 >> 2] | 0; //@line 26041
 _printf(10904, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 26042
 HEAP32[$8 >> 2] = $6 << 24 >> 24; //@line 26044
 _printf(11473, $8) | 0; //@line 26045
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(76) | 0; //@line 26046
 _putchar(10) | 0; //@line 26047
 if (!___async) {
  ___async_unwind = 0; //@line 26050
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 64; //@line 26052
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $12; //@line 26054
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $14; //@line 26056
 HEAP8[$ReallocAsyncCtx3 + 12 >> 0] = $6; //@line 26058
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 26060
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $18; //@line 26062
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $20; //@line 26064
 HEAP16[$ReallocAsyncCtx3 + 28 >> 1] = $22; //@line 26066
 HEAP8[$ReallocAsyncCtx3 + 30 >> 0] = $24; //@line 26068
 HEAP8[$ReallocAsyncCtx3 + 31 >> 0] = $26; //@line 26070
 HEAP8[$ReallocAsyncCtx3 + 32 >> 0] = $28; //@line 26072
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $30; //@line 26074
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $32; //@line 26076
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $34; //@line 26078
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $36; //@line 26080
 HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $38; //@line 26082
 HEAP8[$ReallocAsyncCtx3 + 56 >> 0] = $40; //@line 26084
 HEAP8[$ReallocAsyncCtx3 + 57 >> 0] = $42; //@line 26086
 HEAP8[$ReallocAsyncCtx3 + 58 >> 0] = $44; //@line 26088
 HEAP32[$ReallocAsyncCtx3 + 60 >> 2] = $46; //@line 26090
 HEAP32[$ReallocAsyncCtx3 + 64 >> 2] = $48; //@line 26092
 HEAP32[$ReallocAsyncCtx3 + 68 >> 2] = $50; //@line 26094
 HEAP32[$ReallocAsyncCtx3 + 72 >> 2] = $52; //@line 26096
 sp = STACKTOP; //@line 26097
 return;
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$026 = 0, $$1 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $28 = 0, $31 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19951
 STACKTOP = STACKTOP + 16 | 0; //@line 19952
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19952
 $2 = sp; //@line 19953
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$1 = -1002; //@line 19957
  STACKTOP = sp; //@line 19958
  return $$1 | 0; //@line 19958
 }
 $6 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 19961
 $7 = HEAP8[$1 >> 0] | 0; //@line 19962
 if (($7 & 255) > ($6 & 255)) {
  $$1 = -1003; //@line 19965
  STACKTOP = sp; //@line 19966
  return $$1 | 0; //@line 19966
 }
 $9 = $1 + 4 | 0; //@line 19968
 if (!($7 << 24 >> 24)) {
  $$1 = 0; //@line 19971
  STACKTOP = sp; //@line 19972
  return $$1 | 0; //@line 19972
 }
 $11 = $2 + 9 | 0; //@line 19974
 $12 = $2 + 8 | 0; //@line 19975
 $13 = $2 + 4 | 0; //@line 19976
 $$026 = 0; //@line 19977
 $20 = 0; //@line 19977
 while (1) {
  $18 = HEAP32[$9 >> 2] | 0; //@line 19979
  HEAP8[$11 >> 0] = HEAP8[$18 + ($20 << 4) + 13 >> 0] | 0; //@line 19982
  HEAP8[$12 >> 0] = HEAP8[$18 + ($20 << 4) + 12 >> 0] | 0; //@line 19985
  HEAP32[$2 >> 2] = HEAP32[$18 + ($20 << 4) + 4 >> 2]; //@line 19988
  HEAP32[$13 >> 2] = HEAP32[$18 + ($20 << 4) + 8 >> 2]; //@line 19991
  $28 = HEAP32[$0 >> 2] | 0; //@line 19992
  $31 = HEAP32[(HEAP32[$28 >> 2] | 0) + 60 >> 2] | 0; //@line 19995
  $33 = HEAP8[$18 + ($20 << 4) >> 0] | 0; //@line 19997
  $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 19998
  $34 = FUNCTION_TABLE_iiii[$31 & 15]($28, $2, $33) | 0; //@line 19999
  if (___async) {
   label = 7; //@line 20002
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 20005
  $16 = $$026 + 1 << 24 >> 24; //@line 20007
  if ($34 | 0) {
   $$1 = $34; //@line 20009
   label = 9; //@line 20010
   break;
  }
  if (($16 & 255) < (HEAPU8[$1 >> 0] | 0)) {
   $$026 = $16; //@line 20017
   $20 = $16 & 255; //@line 20017
  } else {
   $$1 = 0; //@line 20019
   label = 9; //@line 20020
   break;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx >> 2] = 585; //@line 20025
  HEAP8[$AsyncCtx + 4 >> 0] = $$026; //@line 20027
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 20029
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 20031
  HEAP32[$AsyncCtx + 16 >> 2] = $9; //@line 20033
  HEAP32[$AsyncCtx + 20 >> 2] = $11; //@line 20035
  HEAP32[$AsyncCtx + 24 >> 2] = $12; //@line 20037
  HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 20039
  HEAP32[$AsyncCtx + 32 >> 2] = $13; //@line 20041
  HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 20043
  HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 20045
  sp = STACKTOP; //@line 20046
  STACKTOP = sp; //@line 20047
  return 0; //@line 20047
 } else if ((label | 0) == 9) {
  STACKTOP = sp; //@line 20050
  return $$1 | 0; //@line 20050
 }
 return 0; //@line 20052
}
function _initialize__async_cb_245($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11145
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11147
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11149
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11151
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11153
 $10 = 7 << 32 + -4; //@line 11155
 $11 = ___muldi3($10 | 0, 0, 1e6, 0) | 0; //@line 11156
 $12 = tempRet0; //@line 11157
 $13 = _i64Add($2 | 0, 0, -1, -1) | 0; //@line 11158
 $15 = _i64Add($13 | 0, tempRet0 | 0, $11 | 0, $12 | 0) | 0; //@line 11160
 $17 = ___udivdi3($15 | 0, tempRet0 | 0, $2 | 0, 0) | 0; //@line 11162
 $18 = tempRet0; //@line 11163
 $19 = HEAP32[$4 >> 2] | 0; //@line 11164
 HEAP32[$19 >> 2] = 0; //@line 11165
 HEAP32[$19 + 4 >> 2] = 0; //@line 11167
 $23 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 11170
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 11171
 $24 = FUNCTION_TABLE_i[$23 & 7]() | 0; //@line 11172
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 701; //@line 11175
  $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 11176
  HEAP32[$25 >> 2] = $4; //@line 11177
  $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 11178
  HEAP32[$26 >> 2] = $2; //@line 11179
  $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 11180
  HEAP32[$27 >> 2] = 32; //@line 11181
  $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 11182
  HEAP32[$28 >> 2] = $10; //@line 11183
  $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 11184
  $30 = $29; //@line 11185
  $31 = $30; //@line 11186
  HEAP32[$31 >> 2] = $17; //@line 11187
  $32 = $30 + 4 | 0; //@line 11188
  $33 = $32; //@line 11189
  HEAP32[$33 >> 2] = $18; //@line 11190
  $34 = $ReallocAsyncCtx3 + 32 | 0; //@line 11191
  HEAP32[$34 >> 2] = $6; //@line 11192
  $35 = $ReallocAsyncCtx3 + 36 | 0; //@line 11193
  HEAP32[$35 >> 2] = $8; //@line 11194
  sp = STACKTOP; //@line 11195
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 11199
 ___async_unwind = 0; //@line 11200
 HEAP32[$ReallocAsyncCtx3 >> 2] = 701; //@line 11201
 $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 11202
 HEAP32[$25 >> 2] = $4; //@line 11203
 $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 11204
 HEAP32[$26 >> 2] = $2; //@line 11205
 $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 11206
 HEAP32[$27 >> 2] = 32; //@line 11207
 $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 11208
 HEAP32[$28 >> 2] = $10; //@line 11209
 $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 11210
 $30 = $29; //@line 11211
 $31 = $30; //@line 11212
 HEAP32[$31 >> 2] = $17; //@line 11213
 $32 = $30 + 4 | 0; //@line 11214
 $33 = $32; //@line 11215
 HEAP32[$33 >> 2] = $18; //@line 11216
 $34 = $ReallocAsyncCtx3 + 32 | 0; //@line 11217
 HEAP32[$34 >> 2] = $6; //@line 11218
 $35 = $ReallocAsyncCtx3 + 36 | 0; //@line 11219
 HEAP32[$35 >> 2] = $8; //@line 11220
 sp = STACKTOP; //@line 11221
 return;
}
function __ZN7LoRaPHY11add_channelEP16channel_params_th($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$$123$off0 = 0, $$024 = 0, $$4$off0 = 0, $$5$off039 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $22 = 0, $35 = 0, $43 = 0, $44 = 0, $45 = 0, $50 = 0, $52 = 0, $6 = 0, $62 = 0, $AsyncCtx = 0, $not$ = 0, sp = 0;
 sp = STACKTOP; //@line 25303
 if (!(HEAP8[$0 + 16 >> 0] | 0)) {
  $$024 = -1003; //@line 25308
  return $$024 | 0; //@line 25309
 }
 $6 = $2 & 255; //@line 25311
 if ((HEAPU8[$0 + 20 >> 0] | 0) <= ($2 & 255)) {
  $$024 = -1003; //@line 25316
  return $$024 | 0; //@line 25317
 }
 $11 = HEAP8[$1 + 8 >> 0] | 0; //@line 25320
 $13 = ($11 << 4 & 255) << 24 >> 24 >> 4; //@line 25322
 $15 = HEAP8[$0 + 26 >> 0] | 0; //@line 25324
 $17 = HEAP8[$0 + 27 >> 0] | 0; //@line 25326
 $20 = $11 << 24 >> 24 >> 4; //@line 25330
 $22 = $20 << 24 >> 24 <= $17 << 24 >> 24; //@line 25332
 $$$123$off0 = $13 << 24 >> 24 > $20 << 24 >> 24 | (($13 << 24 >> 24 > $17 << 24 >> 24 ? 1 : $13 << 24 >> 24 < $15 << 24 >> 24) | $20 << 24 >> 24 >= $15 << 24 >> 24 & $22 ^ 1); //@line 25337
 if ((HEAPU8[$0 + 18 >> 0] | 0) > ($2 & 255)) {
  $$4$off0 = ($13 << 24 >> 24 | 0) > ($15 & 255 | 0) | $$$123$off0 | $22 & $20 << 24 >> 24 >= (HEAP8[$0 + 31 >> 0] | 0) ^ 1; //@line 25351
  $35 = HEAP32[$1 >> 2] | 0; //@line 25352
  if (($35 | 0) == (HEAP32[(HEAP32[$0 + 112 >> 2] | 0) + ($6 * 12 | 0) >> 2] | 0)) {
   $$5$off039 = $$4$off0; //@line 25359
   $44 = $35; //@line 25359
  } else {
   $$024 = $$4$off0 ? -1006 : -1004; //@line 25362
   return $$024 | 0; //@line 25363
  }
 } else {
  $$5$off039 = $$$123$off0; //@line 25367
  $44 = HEAP32[$1 >> 2] | 0; //@line 25367
 }
 $43 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 25371
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 25372
 $45 = FUNCTION_TABLE_iii[$43 & 31]($0, $44) | 0; //@line 25373
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 635; //@line 25376
  HEAP8[$AsyncCtx + 4 >> 0] = $$5$off039 & 1; //@line 25379
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 25381
  HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 25383
  HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 25385
  sp = STACKTOP; //@line 25386
  return 0; //@line 25387
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 25389
 $not$ = $45 ^ 1; //@line 25390
 if ($$5$off039 | $not$) {
  $$024 = $$5$off039 ? $$5$off039 & $not$ ? -1006 : -1005 : -1004; //@line 25396
  return $$024 | 0; //@line 25397
 }
 $50 = $0 + 112 | 0; //@line 25399
 $52 = (HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 25401
 HEAP32[$52 >> 2] = HEAP32[$1 >> 2]; //@line 25402
 HEAP32[$52 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 25402
 HEAP32[$52 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 25402
 HEAP8[(HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$1 + 9 >> 0] | 0; //@line 25407
 $62 = (HEAP32[$0 + 120 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 25413
 HEAP16[$62 >> 1] = 1 << ($6 & 15) | HEAPU16[$62 >> 1]; //@line 25418
 $$024 = 0; //@line 25419
 return $$024 | 0; //@line 25420
}
function __ZN7LoRaMac21prepare_rx_done_abortEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $17 = 0, $21 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 13881
 STACKTOP = STACKTOP + 16 | 0; //@line 13882
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13882
 $$byval_copy = sp + 8 | 0; //@line 13883
 $vararg_buffer = sp; //@line 13884
 _printf(12967, $vararg_buffer) | 0; //@line 13885
 _printf(13146, $$byval_copy) | 0; //@line 13886
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 13887
 _putchar(10) | 0; //@line 13888
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 422; //@line 13891
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13893
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 13895
  sp = STACKTOP; //@line 13896
  STACKTOP = sp; //@line 13897
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13899
 $3 = $0 + 968 | 0; //@line 13900
 HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 64; //@line 13903
 if (HEAP8[$0 + 373 >> 0] | 0) {
  $10 = HEAP32[$0 + 1328 >> 2] | 0; //@line 13909
  HEAP32[$vararg_buffer >> 2] = 423; //@line 13910
  HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 13912
  $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13913
  HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer >> 2]; //@line 13914
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer + 4 >> 2]; //@line 13914
  $11 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($10, $0, $$byval_copy) | 0; //@line 13915
  if (___async) {
   HEAP32[$AsyncCtx9 >> 2] = 424; //@line 13918
   HEAP32[$AsyncCtx9 + 4 >> 2] = $vararg_buffer; //@line 13920
   HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 13922
   sp = STACKTOP; //@line 13923
   STACKTOP = sp; //@line 13924
   return;
  }
  _emscripten_free_async_context($AsyncCtx9 | 0); //@line 13926
  do {
   if (!$11) {
    $AsyncCtx13 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13930
    _mbed_assert_internal(12851, 12860, 201); //@line 13931
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 425; //@line 13934
     HEAP32[$AsyncCtx13 + 4 >> 2] = $vararg_buffer; //@line 13936
     HEAP32[$AsyncCtx13 + 8 >> 2] = $0; //@line 13938
     sp = STACKTOP; //@line 13939
     STACKTOP = sp; //@line 13940
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx13 | 0); //@line 13942
     break;
    }
   }
  } while (0);
 }
 $17 = $0 + 944 | 0; //@line 13948
 HEAP8[$17 >> 0] = HEAP8[$17 >> 0] | 34; //@line 13951
 $21 = HEAP32[$0 + 356 >> 2] | 0; //@line 13953
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13955
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $0 + 996 | 0, 1); //@line 13956
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 426; //@line 13959
  sp = STACKTOP; //@line 13960
  STACKTOP = sp; //@line 13961
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 13963
  STACKTOP = sp; //@line 13964
  return;
 }
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_174($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 33174
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33178
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33180
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33182
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33184
 $11 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 33185
 if (!$11) {
  $18 = HEAP32[$4 >> 2] | 0; //@line 33188
  $20 = $8 + 12 | 0; //@line 33190
  HEAP32[$8 >> 2] = 535; //@line 33191
  HEAP32[$8 + 4 >> 2] = 0; //@line 33193
  HEAP32[$8 + 8 >> 2] = $6; //@line 33195
  HEAP32[$20 >> 2] = 848; //@line 33196
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 33197
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($18, $6 + 1076 | 0, $8); //@line 33198
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 536; //@line 33201
   $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 33202
   HEAP32[$21 >> 2] = $20; //@line 33203
   $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 33204
   HEAP32[$22 >> 2] = $4; //@line 33205
   $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 33206
   HEAP32[$23 >> 2] = $6; //@line 33207
   $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 33208
   HEAP32[$24 >> 2] = $8; //@line 33209
   sp = STACKTOP; //@line 33210
   return;
  }
  ___async_unwind = 0; //@line 33213
  HEAP32[$ReallocAsyncCtx6 >> 2] = 536; //@line 33214
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 33215
  HEAP32[$21 >> 2] = $20; //@line 33216
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 33217
  HEAP32[$22 >> 2] = $4; //@line 33218
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 33219
  HEAP32[$23 >> 2] = $6; //@line 33220
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 33221
  HEAP32[$24 >> 2] = $8; //@line 33222
  sp = STACKTOP; //@line 33223
  return;
 } else {
  $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 33227
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 33228
  FUNCTION_TABLE_vi[$14 & 1023]($10); //@line 33229
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 534; //@line 33232
   $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 33233
   HEAP32[$15 >> 2] = $4; //@line 33234
   $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 33235
   HEAP32[$16 >> 2] = $6; //@line 33236
   $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 33237
   HEAP32[$17 >> 2] = $8; //@line 33238
   sp = STACKTOP; //@line 33239
   return;
  }
  ___async_unwind = 0; //@line 33242
  HEAP32[$ReallocAsyncCtx4 >> 2] = 534; //@line 33243
  $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 33244
  HEAP32[$15 >> 2] = $4; //@line 33245
  $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 33246
  HEAP32[$16 >> 2] = $6; //@line 33247
  $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 33248
  HEAP32[$17 >> 2] = $8; //@line 33249
  sp = STACKTOP; //@line 33250
  return;
 }
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$unpack10 = 0, $10 = 0, $16 = 0, $17 = 0, $20 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 11546
 STACKTOP = STACKTOP + 16 | 0; //@line 11547
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11547
 $3 = sp; //@line 11548
 $$unpack10 = HEAP32[$2 + 4 >> 2] | 0; //@line 11551
 $4 = $3 + 12 | 0; //@line 11552
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 11553
 HEAP32[$3 + 4 >> 2] = $$unpack10; //@line 11555
 HEAP32[$3 + 8 >> 2] = $1; //@line 11557
 HEAP32[$4 >> 2] = 848; //@line 11558
 $5 = _equeue_alloc($0, 16) | 0; //@line 11559
 do {
  if (!$5) {
   $$0$i = 0; //@line 11563
  } else {
   $7 = HEAP32[$4 >> 2] | 0; //@line 11565
   do {
    if (!$7) {
     $16 = 0; //@line 11569
    } else {
     $10 = HEAP32[$7 + 4 >> 2] | 0; //@line 11572
     $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 11573
     FUNCTION_TABLE_vii[$10 & 31]($5, $3); //@line 11574
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 369; //@line 11577
      HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 11579
      HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 11581
      HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 11583
      HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 11585
      sp = STACKTOP; //@line 11586
      STACKTOP = sp; //@line 11587
      return 0; //@line 11587
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 11589
      $16 = HEAP32[$4 >> 2] | 0; //@line 11591
      break;
     }
    }
   } while (0);
   HEAP32[$5 + 12 >> 2] = $16; //@line 11597
   _equeue_event_dtor($5, 370); //@line 11598
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11599
   $17 = _equeue_post($0, 371, $5) | 0; //@line 11600
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 372; //@line 11603
    HEAP32[$AsyncCtx5 + 4 >> 2] = $4; //@line 11605
    HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 11607
    sp = STACKTOP; //@line 11608
    STACKTOP = sp; //@line 11609
    return 0; //@line 11609
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 11611
    $$0$i = $17; //@line 11612
    break;
   }
  }
 } while (0);
 $20 = HEAP32[$4 >> 2] | 0; //@line 11617
 if (!$20) {
  STACKTOP = sp; //@line 11620
  return $$0$i | 0; //@line 11620
 }
 $23 = HEAP32[$20 + 8 >> 2] | 0; //@line 11623
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11624
 FUNCTION_TABLE_vi[$23 & 1023]($3); //@line 11625
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 373; //@line 11628
  HEAP32[$AsyncCtx2 + 4 >> 2] = $$0$i; //@line 11630
  sp = STACKTOP; //@line 11631
  STACKTOP = sp; //@line 11632
  return 0; //@line 11632
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 11634
 STACKTOP = sp; //@line 11635
 return $$0$i | 0; //@line 11635
}
function __ZN7LoRaMacC2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $18 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, stop = 0;
 __ZN14LoRaMacCommandC2Ev($0 + 4 | 0); //@line 10745
 __ZN11LoRaMacMlmeC2Ev($0 + 264 | 0); //@line 10747
 __ZN10LoRaMacMibC2Ev($0 + 348 | 0); //@line 10749
 __ZN18LoRaMacChannelPlanC2Ev($0 + 352 | 0); //@line 10751
 HEAP32[$0 + 356 >> 2] = $1; //@line 10753
 $7 = $0 + 996 | 0; //@line 10754
 HEAP32[$7 >> 2] = 0; //@line 10755
 HEAP32[$7 + 4 >> 2] = 0; //@line 10755
 HEAP32[$7 + 8 >> 2] = 0; //@line 10755
 HEAP32[$7 + 12 >> 2] = 0; //@line 10755
 $8 = $0 + 1016 | 0; //@line 10756
 HEAP32[$8 >> 2] = 0; //@line 10757
 HEAP32[$8 + 4 >> 2] = 0; //@line 10757
 HEAP32[$8 + 8 >> 2] = 0; //@line 10757
 HEAP32[$8 + 12 >> 2] = 0; //@line 10757
 $9 = $0 + 1036 | 0; //@line 10758
 HEAP32[$9 >> 2] = 0; //@line 10759
 HEAP32[$9 + 4 >> 2] = 0; //@line 10759
 HEAP32[$9 + 8 >> 2] = 0; //@line 10759
 HEAP32[$9 + 12 >> 2] = 0; //@line 10759
 $10 = $0 + 1056 | 0; //@line 10760
 HEAP32[$10 >> 2] = 0; //@line 10761
 HEAP32[$10 + 4 >> 2] = 0; //@line 10761
 HEAP32[$10 + 8 >> 2] = 0; //@line 10761
 HEAP32[$10 + 12 >> 2] = 0; //@line 10761
 $11 = $0 + 1076 | 0; //@line 10762
 HEAP32[$11 >> 2] = 0; //@line 10763
 HEAP32[$11 + 4 >> 2] = 0; //@line 10763
 HEAP32[$11 + 8 >> 2] = 0; //@line 10763
 HEAP32[$11 + 12 >> 2] = 0; //@line 10763
 dest = $0 + 1212 | 0; //@line 10765
 stop = dest + 112 | 0; //@line 10765
 do {
  HEAP32[dest >> 2] = 0; //@line 10765
  dest = dest + 4 | 0; //@line 10765
 } while ((dest | 0) < (stop | 0));
 HEAP32[$0 >> 2] = 0; //@line 10766
 $14 = $0 + 946 | 0; //@line 10768
 HEAP16[$0 + 636 >> 1] = 0; //@line 10770
 HEAP8[$0 + 893 >> 0] = 0; //@line 10772
 HEAP8[$0 + 370 >> 0] = 0; //@line 10774
 $18 = $0 + 371 | 0; //@line 10775
 dest = $0 + 900 | 0; //@line 10776
 stop = dest + 44 | 0; //@line 10776
 do {
  HEAP32[dest >> 2] = 0; //@line 10776
  dest = dest + 4 | 0; //@line 10776
 } while ((dest | 0) < (stop | 0));
 dest = $14; //@line 10777
 stop = dest + 18 | 0; //@line 10777
 do {
  HEAP16[dest >> 1] = 0; //@line 10777
  dest = dest + 2 | 0; //@line 10777
 } while ((dest | 0) < (stop | 0));
 HEAP8[$18 >> 0] = 1; //@line 10778
 HEAP8[$0 + 372 >> 0] = 0; //@line 10780
 HEAP32[$0 + 964 >> 2] = 0; //@line 10782
 HEAP8[$0 + 373 >> 0] = 0; //@line 10784
 HEAP8[$0 + 374 >> 0] = 0; //@line 10786
 HEAP8[$0 + 380 >> 0] = 0; //@line 10788
 HEAP32[$0 + 988 >> 2] = 0; //@line 10790
 HEAP32[$0 + 968 >> 2] = 0; //@line 10792
 HEAP8[$0 + 894 >> 0] = 1; //@line 10794
 HEAP8[$0 + 895 >> 0] = 1; //@line 10796
 HEAP8[$0 + 377 >> 0] = 0; //@line 10798
 HEAP32[$0 + 992 >> 2] = 0; //@line 10800
 HEAP32[$0 + 1208 >> 2] = 0; //@line 10802
 HEAP8[$0 + 1156 >> 0] = 0; //@line 10804
 HEAP8[$0 + 1152 >> 0] = 0; //@line 10806
 HEAP32[$0 + 1324 >> 2] = 0; //@line 10808
 HEAP32[$0 + 1328 >> 2] = 0; //@line 10810
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_366($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25368
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25370
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25372
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25374
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25376
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25378
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25380
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25382
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25384
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25386
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25388
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 25390
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 25392
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 25394
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 25396
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 25398
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 25400
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 25402
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 25404
 $36 = HEAP32[$34 >> 2] | 0; //@line 25405
 $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 28 >> 2] | 0; //@line 25408
 $40 = $4 + 1104 | 0; //@line 25409
 $41 = HEAP8[$40 >> 0] | 0; //@line 25410
 $42 = $4 + 1100 | 0; //@line 25411
 $43 = HEAP32[$42 >> 2] | 0; //@line 25412
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(80) | 0; //@line 25414
 FUNCTION_TABLE_viiiii[$39 & 7]($36, $AsyncRetVal, $41, $43, $4 + 1160 | 0); //@line 25415
 if (!___async) {
  ___async_unwind = 0; //@line 25418
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 490; //@line 25420
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 25422
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 25424
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $6; //@line 25426
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $8; //@line 25428
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $10; //@line 25430
 HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $12; //@line 25432
 HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $14; //@line 25434
 HEAP32[$ReallocAsyncCtx4 + 32 >> 2] = $16; //@line 25436
 HEAP32[$ReallocAsyncCtx4 + 36 >> 2] = $18; //@line 25438
 HEAP32[$ReallocAsyncCtx4 + 40 >> 2] = $20; //@line 25440
 HEAP32[$ReallocAsyncCtx4 + 44 >> 2] = $22; //@line 25442
 HEAP32[$ReallocAsyncCtx4 + 48 >> 2] = $24; //@line 25444
 HEAP32[$ReallocAsyncCtx4 + 52 >> 2] = $26; //@line 25446
 HEAP32[$ReallocAsyncCtx4 + 56 >> 2] = $28; //@line 25448
 HEAP32[$ReallocAsyncCtx4 + 60 >> 2] = $30; //@line 25450
 HEAP32[$ReallocAsyncCtx4 + 64 >> 2] = $32; //@line 25452
 HEAP32[$ReallocAsyncCtx4 + 68 >> 2] = $34; //@line 25454
 HEAP32[$ReallocAsyncCtx4 + 72 >> 2] = $40; //@line 25456
 HEAP32[$ReallocAsyncCtx4 + 76 >> 2] = $42; //@line 25458
 sp = STACKTOP; //@line 25459
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31243
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31245
 $4 = HEAP32[$2 + 88 >> 2] | 0; //@line 31247
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 31252
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 31253
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 76 | 0); //@line 31254
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 351; //@line 31257
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 31258
   HEAP32[$9 >> 2] = $2; //@line 31259
   sp = STACKTOP; //@line 31260
   return;
  }
  ___async_unwind = 0; //@line 31263
  HEAP32[$ReallocAsyncCtx2 >> 2] = 351; //@line 31264
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 31265
  HEAP32[$9 >> 2] = $2; //@line 31266
  sp = STACKTOP; //@line 31267
  return;
 }
 $11 = HEAP32[$2 + 68 >> 2] | 0; //@line 31271
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 31276
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 31277
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 56 | 0); //@line 31278
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 352; //@line 31281
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 31282
   HEAP32[$16 >> 2] = $2; //@line 31283
   sp = STACKTOP; //@line 31284
   return;
  }
  ___async_unwind = 0; //@line 31287
  HEAP32[$ReallocAsyncCtx3 >> 2] = 352; //@line 31288
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 31289
  HEAP32[$16 >> 2] = $2; //@line 31290
  sp = STACKTOP; //@line 31291
  return;
 }
 $18 = HEAP32[$2 + 48 >> 2] | 0; //@line 31295
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 31300
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 31301
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 36 | 0); //@line 31302
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 353; //@line 31305
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 31306
   HEAP32[$23 >> 2] = $2; //@line 31307
   sp = STACKTOP; //@line 31308
   return;
  }
  ___async_unwind = 0; //@line 31311
  HEAP32[$ReallocAsyncCtx4 >> 2] = 353; //@line 31312
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 31313
  HEAP32[$23 >> 2] = $2; //@line 31314
  sp = STACKTOP; //@line 31315
  return;
 }
 $25 = HEAP32[$2 + 28 >> 2] | 0; //@line 31319
 if (!$25) {
  return;
 }
 $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 31326
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 31327
 FUNCTION_TABLE_vi[$29 & 1023]($2 + 16 | 0); //@line 31328
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 354; //@line 31331
  sp = STACKTOP; //@line 31332
  return;
 }
 ___async_unwind = 0; //@line 31335
 HEAP32[$ReallocAsyncCtx5 >> 2] = 354; //@line 31336
 sp = STACKTOP; //@line 31337
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_114($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 30037
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30039
 $4 = HEAP32[$2 + 60 >> 2] | 0; //@line 30041
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 30046
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 30047
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 48 | 0); //@line 30048
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 346; //@line 30051
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 30052
   HEAP32[$9 >> 2] = $2; //@line 30053
   sp = STACKTOP; //@line 30054
   return;
  }
  ___async_unwind = 0; //@line 30057
  HEAP32[$ReallocAsyncCtx4 >> 2] = 346; //@line 30058
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 30059
  HEAP32[$9 >> 2] = $2; //@line 30060
  sp = STACKTOP; //@line 30061
  return;
 }
 $11 = HEAP32[$2 + 44 >> 2] | 0; //@line 30065
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 30070
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 30071
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 32 | 0); //@line 30072
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 30075
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 30076
   HEAP32[$16 >> 2] = $2; //@line 30077
   sp = STACKTOP; //@line 30078
   return;
  }
  ___async_unwind = 0; //@line 30081
  HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 30082
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 30083
  HEAP32[$16 >> 2] = $2; //@line 30084
  sp = STACKTOP; //@line 30085
  return;
 }
 $18 = HEAP32[$2 + 28 >> 2] | 0; //@line 30089
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 30094
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 30095
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 16 | 0); //@line 30096
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 348; //@line 30099
   $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 30100
   HEAP32[$23 >> 2] = $2; //@line 30101
   sp = STACKTOP; //@line 30102
   return;
  }
  ___async_unwind = 0; //@line 30105
  HEAP32[$ReallocAsyncCtx6 >> 2] = 348; //@line 30106
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 30107
  HEAP32[$23 >> 2] = $2; //@line 30108
  sp = STACKTOP; //@line 30109
  return;
 }
 $25 = HEAP32[$2 + 12 >> 2] | 0; //@line 30113
 if (!$25) {
  return;
 }
 $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 30119
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 30120
 FUNCTION_TABLE_vi[$28 & 1023]($2); //@line 30121
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 30124
  sp = STACKTOP; //@line 30125
  return;
 }
 ___async_unwind = 0; //@line 30128
 HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 30129
 sp = STACKTOP; //@line 30130
 return;
}
function __ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$031 = 0.0, $13 = 0, $17 = 0.0, $52 = 0.0, $AsyncCtx = 0, $AsyncCtx9 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 1503
 STACKTOP = STACKTOP + 32 | 0; //@line 1504
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1504
 $vararg_buffer5 = sp + 24 | 0; //@line 1505
 $vararg_buffer3 = sp + 16 | 0; //@line 1506
 _printf(10904, sp) | 0; //@line 1509
 _printf(11101, sp + 8 | 0) | 0; //@line 1510
 $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 1511
 _putchar(10) | 0; //@line 1512
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 89; //@line 1515
  HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 1517
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer3; //@line 1519
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer3; //@line 1521
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer5; //@line 1523
  HEAP32[$AsyncCtx9 + 20 >> 2] = $vararg_buffer5; //@line 1525
  HEAP32[$AsyncCtx9 + 24 >> 2] = $0; //@line 1527
  HEAP8[$AsyncCtx9 + 28 >> 0] = $2; //@line 1529
  sp = STACKTOP; //@line 1530
  STACKTOP = sp; //@line 1531
  return 0; //@line 1531
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 1533
 switch ($1 | 0) {
 case 0:
  {
   $$0 = 1; //@line 1536
   break;
  }
 case 1:
  {
   switch (HEAP32[$0 + 752 >> 2] | 0) {
   case 7:
    {
     $$031 = 125.0e3; //@line 1544
     break;
    }
   case 8:
    {
     $$031 = 25.0e4; //@line 1548
     break;
    }
   case 9:
    {
     $$031 = 5.0e5; //@line 1552
     break;
    }
   default:
    {
     $$031 = 0.0; //@line 1556
    }
   }
   $13 = HEAP32[$0 + 756 >> 2] | 0; //@line 1560
   $17 = 1.0 / ($$031 / +(1 << $13 | 0)); //@line 1564
   $52 = +Math_ceil(+(+(((($2 & 255) << 3) + 28 - ($13 << 2) + (HEAP8[$0 + 766 >> 0] << 4 & 255) + (HEAP8[$0 + 764 >> 0] | 0 ? -20 : 0) | 0) >>> 0) / +($13 - (HEAP8[$0 + 760 >> 0] | 0 ? 2 : 0) << 2 >>> 0))) * +((HEAPU8[$0 + 761 >> 0] | 0) + 4 | 0); //@line 1600
   $$0 = ~~+Math_floor(+(((+(HEAPU16[$0 + 762 >> 1] | 0) + 4.25) * $17 + $17 * (($52 > 0.0 ? $52 : 0.0) + 8.0)) * 1.0e3 + .999)) >>> 0; //@line 1610
   break;
  }
 default:
  {
   $$0 = 0; //@line 1614
  }
 }
 _printf(10904, $vararg_buffer3) | 0; //@line 1617
 HEAP32[$vararg_buffer5 >> 2] = $$0; //@line 1618
 _printf(11113, $vararg_buffer5) | 0; //@line 1619
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1620
 _putchar(10) | 0; //@line 1621
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 90; //@line 1624
  HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 1626
  sp = STACKTOP; //@line 1627
  STACKTOP = sp; //@line 1628
  return 0; //@line 1628
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1630
  STACKTOP = sp; //@line 1631
  return $$0 | 0; //@line 1631
 }
 return 0; //@line 1633
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_429($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx29 = 0, sp = 0;
 sp = STACKTOP; //@line 30771
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30775
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30777
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30779
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30781
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30783
 $12 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30784
 if ($12 | 0) {
  $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 30788
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 30789
  FUNCTION_TABLE_vi[$15 & 1023]($4); //@line 30790
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 269; //@line 30793
   $16 = $ReallocAsyncCtx10 + 4 | 0; //@line 30794
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 30795
   $17 = $ReallocAsyncCtx10 + 8 | 0; //@line 30796
   HEAP32[$17 >> 2] = $6; //@line 30797
   $18 = $ReallocAsyncCtx10 + 12 | 0; //@line 30798
   HEAP32[$18 >> 2] = $8; //@line 30799
   $19 = $ReallocAsyncCtx10 + 16 | 0; //@line 30800
   HEAP32[$19 >> 2] = $10; //@line 30801
   sp = STACKTOP; //@line 30802
   return;
  }
  ___async_unwind = 0; //@line 30805
  HEAP32[$ReallocAsyncCtx10 >> 2] = 269; //@line 30806
  $16 = $ReallocAsyncCtx10 + 4 | 0; //@line 30807
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 30808
  $17 = $ReallocAsyncCtx10 + 8 | 0; //@line 30809
  HEAP32[$17 >> 2] = $6; //@line 30810
  $18 = $ReallocAsyncCtx10 + 12 | 0; //@line 30811
  HEAP32[$18 >> 2] = $8; //@line 30812
  $19 = $ReallocAsyncCtx10 + 16 | 0; //@line 30813
  HEAP32[$19 >> 2] = $10; //@line 30814
  sp = STACKTOP; //@line 30815
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$8 >> 2] = 6; //@line 30820
  HEAP32[___async_retval >> 2] = $6; //@line 30822
  return;
 }
 $ReallocAsyncCtx29 = _emscripten_realloc_async_context(16) | 0; //@line 30825
 _mbed_assert_internal(12851, 11935, 1251); //@line 30826
 if (___async) {
  HEAP32[$ReallocAsyncCtx29 >> 2] = 270; //@line 30829
  $21 = $ReallocAsyncCtx29 + 4 | 0; //@line 30830
  HEAP32[$21 >> 2] = $6; //@line 30831
  $22 = $ReallocAsyncCtx29 + 8 | 0; //@line 30832
  HEAP32[$22 >> 2] = $8; //@line 30833
  $23 = $ReallocAsyncCtx29 + 12 | 0; //@line 30834
  HEAP32[$23 >> 2] = $10; //@line 30835
  sp = STACKTOP; //@line 30836
  return;
 }
 ___async_unwind = 0; //@line 30839
 HEAP32[$ReallocAsyncCtx29 >> 2] = 270; //@line 30840
 $21 = $ReallocAsyncCtx29 + 4 | 0; //@line 30841
 HEAP32[$21 >> 2] = $6; //@line 30842
 $22 = $ReallocAsyncCtx29 + 8 | 0; //@line 30843
 HEAP32[$22 >> 2] = $8; //@line 30844
 $23 = $ReallocAsyncCtx29 + 12 | 0; //@line 30845
 HEAP32[$23 >> 2] = $10; //@line 30846
 sp = STACKTOP; //@line 30847
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_8($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $2 = 0, $27 = 0, $28 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16779
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16781
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16783
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16785
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16787
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16789
 $13 = $2 + 1184 | 0; //@line 16792
 HEAP8[$13 >> 0] = HEAP8[$2 + 378 >> 0] | 0; //@line 16793
 HEAP32[$2 + 1188 >> 2] = HEAP32[$2 + 1132 >> 2]; //@line 16797
 HEAP8[$2 + 1200 >> 0] = HEAP8[$2 + 1141 >> 0] | 0; //@line 16801
 HEAP8[$2 + 1201 >> 0] = HEAP8[$2 + 369 >> 0] | 0; //@line 16805
 HEAP32[$2 + 1204 >> 2] = 1; //@line 16807
 $27 = $2 + 1202 | 0; //@line 16811
 HEAP8[$27 >> 0] = (HEAP32[$2 + 360 >> 2] | 0) == 2 & 1; //@line 16813
 $28 = HEAP32[$2 >> 2] | 0; //@line 16814
 $31 = HEAP32[(HEAP32[$28 >> 2] | 0) + 24 >> 2] | 0; //@line 16817
 $34 = (__ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0) + 10 | 0; //@line 16820
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 16821
 $35 = FUNCTION_TABLE_iiii[$31 & 15]($28, $13, $34) | 0; //@line 16822
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 380; //@line 16825
  $36 = $ReallocAsyncCtx + 4 | 0; //@line 16826
  HEAP32[$36 >> 2] = $27; //@line 16827
  $37 = $ReallocAsyncCtx + 8 | 0; //@line 16828
  HEAP32[$37 >> 2] = $2; //@line 16829
  $38 = $ReallocAsyncCtx + 12 | 0; //@line 16830
  HEAP32[$38 >> 2] = $4; //@line 16831
  $39 = $ReallocAsyncCtx + 16 | 0; //@line 16832
  HEAP32[$39 >> 2] = $6; //@line 16833
  $40 = $ReallocAsyncCtx + 20 | 0; //@line 16834
  HEAP32[$40 >> 2] = $8; //@line 16835
  $41 = $ReallocAsyncCtx + 24 | 0; //@line 16836
  HEAP32[$41 >> 2] = $10; //@line 16837
  $42 = $ReallocAsyncCtx + 28 | 0; //@line 16838
  HEAP32[$42 >> 2] = $2; //@line 16839
  sp = STACKTOP; //@line 16840
  return;
 }
 HEAP8[___async_retval >> 0] = $35 & 1; //@line 16845
 ___async_unwind = 0; //@line 16846
 HEAP32[$ReallocAsyncCtx >> 2] = 380; //@line 16847
 $36 = $ReallocAsyncCtx + 4 | 0; //@line 16848
 HEAP32[$36 >> 2] = $27; //@line 16849
 $37 = $ReallocAsyncCtx + 8 | 0; //@line 16850
 HEAP32[$37 >> 2] = $2; //@line 16851
 $38 = $ReallocAsyncCtx + 12 | 0; //@line 16852
 HEAP32[$38 >> 2] = $4; //@line 16853
 $39 = $ReallocAsyncCtx + 16 | 0; //@line 16854
 HEAP32[$39 >> 2] = $6; //@line 16855
 $40 = $ReallocAsyncCtx + 20 | 0; //@line 16856
 HEAP32[$40 >> 2] = $8; //@line 16857
 $41 = $ReallocAsyncCtx + 24 | 0; //@line 16858
 HEAP32[$41 >> 2] = $10; //@line 16859
 $42 = $ReallocAsyncCtx + 28 | 0; //@line 16860
 HEAP32[$42 >> 2] = $2; //@line 16861
 sp = STACKTOP; //@line 16862
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_385($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26636
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 26638
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26640
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26642
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26644
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26646
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26648
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26650
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26652
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26654
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26656
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26658
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26660
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 26662
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 26664
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 26666
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 26668
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 26670
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 26672
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 26674
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 26676
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 26678
 $45 = HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2] | 0; //@line 26681
 $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 26682
 FUNCTION_TABLE_vii[$45 & 31]($4, $42); //@line 26683
 if (!___async) {
  ___async_unwind = 0; //@line 26686
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 93; //@line 26688
 HEAP16[$ReallocAsyncCtx + 4 >> 1] = $2; //@line 26690
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 26692
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 26694
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 26696
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 26698
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 26700
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 26702
 HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 26704
 HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 26706
 HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 26708
 HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 26710
 HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 26712
 HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 26714
 HEAP32[$ReallocAsyncCtx + 56 >> 2] = $28; //@line 26716
 HEAP32[$ReallocAsyncCtx + 60 >> 2] = $30; //@line 26718
 HEAP32[$ReallocAsyncCtx + 64 >> 2] = $32; //@line 26720
 HEAP32[$ReallocAsyncCtx + 68 >> 2] = $34; //@line 26722
 HEAP32[$ReallocAsyncCtx + 72 >> 2] = $36; //@line 26724
 HEAP32[$ReallocAsyncCtx + 76 >> 2] = $38; //@line 26726
 HEAP32[$ReallocAsyncCtx + 80 >> 2] = $40; //@line 26728
 sp = STACKTOP; //@line 26729
 return;
}
function __ZN14lorawan_timersD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11013
 $2 = HEAP32[$0 + 108 >> 2] | 0; //@line 11015
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 11021
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11022
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 96 | 0); //@line 11023
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 350; //@line 11026
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11028
    sp = STACKTOP; //@line 11029
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11032
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 88 >> 2] | 0; //@line 11038
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 11044
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11045
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 76 | 0); //@line 11046
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 351; //@line 11049
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 11051
    sp = STACKTOP; //@line 11052
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11055
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 68 >> 2] | 0; //@line 11061
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 11067
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11068
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 56 | 0); //@line 11069
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 352; //@line 11072
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 11074
    sp = STACKTOP; //@line 11075
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11078
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 48 >> 2] | 0; //@line 11084
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 11090
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11091
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 36 | 0); //@line 11092
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 353; //@line 11095
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 11097
    sp = STACKTOP; //@line 11098
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11101
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 28 >> 2] | 0; //@line 11107
 if (!$30) {
  return;
 }
 $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 11114
 $AsyncCtx15 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11115
 FUNCTION_TABLE_vi[$34 & 1023]($0 + 16 | 0); //@line 11116
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 354; //@line 11119
  sp = STACKTOP; //@line 11120
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 11123
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$026 = 0, $10 = 0, $15 = 0, $21 = 0.0, $24 = 0.0, $27 = 0, $34 = 0, $35 = 0, $38 = 0, $43 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25479
 $6 = HEAP32[$0 + 112 >> 2] | 0; //@line 25483
 $7 = $1 + 2 | 0; //@line 25484
 $8 = HEAP8[$7 >> 0] | 0; //@line 25485
 $10 = HEAPU8[$1 >> 0] | 0; //@line 25487
 $15 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$6 + ($10 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 25492
 if ($8 << 24 >> 24 > $15 << 24 >> 24) {
  HEAP8[$7 >> 0] = $15; //@line 25495
  $27 = $15; //@line 25496
 } else {
  $27 = $8; //@line 25498
 }
 if (!$2) {
  $$0 = HEAP32[$6 + ($10 * 12 | 0) >> 2] | 0; //@line 25504
 } else {
  $$0 = $2; //@line 25506
 }
 $21 = +HEAPF32[$1 + 4 >> 2]; //@line 25509
 if ($21 > 0.0) {
  $24 = +HEAPF32[$1 + 8 >> 2]; //@line 25513
  if ($24 > 0.0) {
   $$026 = ~~+Math_floor(+($21 - +($27 << 24 >> 24 << 1 >>> 0) - $24)); //@line 25523
  } else {
   $$026 = $27; //@line 25525
  }
 } else {
  $$026 = $27; //@line 25528
 }
 $34 = $0 + 4 | 0; //@line 25530
 $35 = HEAP32[$34 >> 2] | 0; //@line 25531
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 72 >> 2] | 0; //@line 25534
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 25535
 FUNCTION_TABLE_vi[$38 & 1023]($35); //@line 25536
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 636; //@line 25539
  HEAP32[$AsyncCtx + 4 >> 2] = $34; //@line 25541
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 25543
  HEAP32[$AsyncCtx + 12 >> 2] = $$0; //@line 25545
  HEAP8[$AsyncCtx + 16 >> 0] = $$026; //@line 25547
  sp = STACKTOP; //@line 25548
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 25551
 $43 = HEAP32[$34 >> 2] | 0; //@line 25552
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 68 >> 2] | 0; //@line 25555
 $48 = HEAP16[$1 + 12 >> 1] | 0; //@line 25557
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 25558
 FUNCTION_TABLE_viiii[$46 & 7]($43, $$0, $$026, $48); //@line 25559
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 637; //@line 25562
  HEAP32[$AsyncCtx2 + 4 >> 2] = $34; //@line 25564
  sp = STACKTOP; //@line 25565
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 25568
 $50 = HEAP32[$34 >> 2] | 0; //@line 25569
 $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 76 >> 2] | 0; //@line 25572
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 25573
 FUNCTION_TABLE_vi[$53 & 1023]($50); //@line 25574
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 638; //@line 25577
  sp = STACKTOP; //@line 25578
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 25581
  return;
 }
}
function _mbedtls_cipher_update__async_cb_82($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $26 = 0, $27 = 0, $29 = 0, $34 = 0, $4 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24972
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24974
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24976
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24978
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24980
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24982
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24984
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24986
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24988
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24990
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24992
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24994
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 24997
  $52 = ___async_retval; //@line 24998
  HEAP32[$52 >> 2] = $$1; //@line 24999
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 25004
 HEAP32[$8 >> 2] = 0; //@line 25006
 $26 = $10 + $12 | 0; //@line 25007
 $27 = $14 - $12 | 0; //@line 25008
 if (!$27) {
  $$1 = 0; //@line 25011
  $52 = ___async_retval; //@line 25012
  HEAP32[$52 >> 2] = $$1; //@line 25013
  return;
 }
 $29 = ($27 >>> 0) % ($4 >>> 0) | 0; //@line 25016
 if (!$29) {
  $$0 = (HEAP32[$16 >> 2] | 0) == 0 ? $4 : 0; //@line 25022
 } else {
  $$0 = $29; //@line 25024
 }
 $34 = $27 - $$0 | 0; //@line 25027
 _memcpy($18 + 20 | 0, $26 + $34 | 0, $$0 | 0) | 0; //@line 25029
 HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + $$0; //@line 25032
 if (!$34) {
  $$1 = 0; //@line 25035
  $52 = ___async_retval; //@line 25036
  HEAP32[$52 >> 2] = $$1; //@line 25037
  return;
 }
 $43 = HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 25044
 $45 = HEAP32[$18 + 60 >> 2] | 0; //@line 25046
 $46 = HEAP32[$16 >> 2] | 0; //@line 25047
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 25049
 $48 = FUNCTION_TABLE_iiiiiii[$43 & 3]($45, $46, $34, $18 + 40 | 0, $26, $6 + $4 | 0) | 0; //@line 25050
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 679; //@line 25053
  $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 25054
  HEAP32[$49 >> 2] = $2; //@line 25055
  $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 25056
  HEAP32[$50 >> 2] = $34; //@line 25057
  sp = STACKTOP; //@line 25058
  return;
 }
 HEAP32[___async_retval >> 2] = $48; //@line 25062
 ___async_unwind = 0; //@line 25063
 HEAP32[$ReallocAsyncCtx3 >> 2] = 679; //@line 25064
 $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 25065
 HEAP32[$49 >> 2] = $2; //@line 25066
 $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 25067
 HEAP32[$50 >> 2] = $34; //@line 25068
 sp = STACKTOP; //@line 25069
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_482($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 36075
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36081
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36083
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 36085
 $9 = $6 + 32 | 0; //@line 36086
 $10 = $6 + 44 | 0; //@line 36087
 $11 = HEAP32[$10 >> 2] | 0; //@line 36088
 if (!$11) {
  return;
 }
 $13 = $8 + 1912 | 0; //@line 36093
 if (($13 | 0) == ($9 | 0)) {
  return;
 }
 $15 = $8 + 1924 | 0; //@line 36098
 $16 = HEAP32[$15 >> 2] | 0; //@line 36099
 if (!$16) {
  $25 = HEAP32[$11 + 4 >> 2] | 0; //@line 36103
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 36104
  FUNCTION_TABLE_vii[$25 & 31]($13, $9); //@line 36105
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 320; //@line 36108
   $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 36109
   HEAP32[$26 >> 2] = $10; //@line 36110
   $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 36111
   HEAP32[$27 >> 2] = $15; //@line 36112
   sp = STACKTOP; //@line 36113
   return;
  }
  ___async_unwind = 0; //@line 36116
  HEAP32[$ReallocAsyncCtx6 >> 2] = 320; //@line 36117
  $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 36118
  HEAP32[$26 >> 2] = $10; //@line 36119
  $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 36120
  HEAP32[$27 >> 2] = $15; //@line 36121
  sp = STACKTOP; //@line 36122
  return;
 } else {
  $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 36126
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 36127
  FUNCTION_TABLE_vi[$19 & 1023]($13); //@line 36128
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 319; //@line 36131
   $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 36132
   HEAP32[$20 >> 2] = $10; //@line 36133
   $21 = $ReallocAsyncCtx5 + 8 | 0; //@line 36134
   HEAP32[$21 >> 2] = $15; //@line 36135
   $22 = $ReallocAsyncCtx5 + 12 | 0; //@line 36136
   HEAP32[$22 >> 2] = $13; //@line 36137
   $23 = $ReallocAsyncCtx5 + 16 | 0; //@line 36138
   HEAP32[$23 >> 2] = $9; //@line 36139
   sp = STACKTOP; //@line 36140
   return;
  }
  ___async_unwind = 0; //@line 36143
  HEAP32[$ReallocAsyncCtx5 >> 2] = 319; //@line 36144
  $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 36145
  HEAP32[$20 >> 2] = $10; //@line 36146
  $21 = $ReallocAsyncCtx5 + 8 | 0; //@line 36147
  HEAP32[$21 >> 2] = $15; //@line 36148
  $22 = $ReallocAsyncCtx5 + 12 | 0; //@line 36149
  HEAP32[$22 >> 2] = $13; //@line 36150
  $23 = $ReallocAsyncCtx5 + 16 | 0; //@line 36151
  HEAP32[$23 >> 2] = $9; //@line 36152
  sp = STACKTOP; //@line 36153
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_240($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10562
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10566
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10568
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 10570
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10572
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 10574
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10576
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10578
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 10580
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 10582
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 10585
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 10587
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 10591
   $27 = $6 + 24 | 0; //@line 10592
   $28 = $4 + 8 | 0; //@line 10593
   $29 = $6 + 54 | 0; //@line 10594
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 10624
    HEAP8[$14 >> 0] = 0; //@line 10625
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 10626
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 10627
    if (!___async) {
     ___async_unwind = 0; //@line 10630
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 800; //@line 10632
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 10634
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 10636
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 10638
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 10640
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 10642
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 10644
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 10646
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 10648
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 10650
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 10652
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 10654
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 10656
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 10658
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 10661
    sp = STACKTOP; //@line 10662
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 10667
 HEAP8[$14 >> 0] = $12; //@line 10668
 return;
}
function __Z28compute_skeys_for_join_framePKhS0_tPhS1_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$$sroa_idx12 = 0, $10 = 0, $12 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 22602
 STACKTOP = STACKTOP + 16 | 0; //@line 22603
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22603
 $5 = sp; //@line 22604
 _mbedtls_aes_init(22632); //@line 22605
 $6 = _mbedtls_aes_setkey_enc(22632, $0, 128) | 0; //@line 22606
 if ($6 | 0) {
  $$0 = $6; //@line 22609
  _mbedtls_aes_free(22632); //@line 22610
  STACKTOP = sp; //@line 22611
  return $$0 | 0; //@line 22611
 }
 $8 = $5 + 9 | 0; //@line 22613
 HEAP8[$8 >> 0] = 0; //@line 22614
 HEAP8[$8 + 1 >> 0] = 0; //@line 22614
 HEAP8[$8 + 2 >> 0] = 0; //@line 22614
 HEAP8[$8 + 3 >> 0] = 0; //@line 22614
 HEAP8[$8 + 4 >> 0] = 0; //@line 22614
 HEAP8[$8 + 5 >> 0] = 0; //@line 22614
 HEAP8[$8 + 6 >> 0] = 0; //@line 22614
 HEAP8[$5 >> 0] = 1; //@line 22615
 $9 = $5 + 1 | 0; //@line 22616
 HEAP8[$9 >> 0] = HEAP8[$1 >> 0] | 0; //@line 22617
 HEAP8[$9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0; //@line 22617
 HEAP8[$9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0; //@line 22617
 HEAP8[$9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0; //@line 22617
 HEAP8[$9 + 4 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 22617
 HEAP8[$9 + 5 >> 0] = HEAP8[$1 + 5 >> 0] | 0; //@line 22617
 $$0$$sroa_idx12 = $5 + 7 | 0; //@line 22618
 HEAP8[$$0$$sroa_idx12 >> 0] = $2; //@line 22619
 HEAP8[$$0$$sroa_idx12 + 1 >> 0] = $2 >> 8; //@line 22619
 $10 = _mbedtls_aes_crypt_ecb(22632, 1, $5, $3) | 0; //@line 22620
 if ($10 | 0) {
  $$0 = $10; //@line 22623
  _mbedtls_aes_free(22632); //@line 22624
  STACKTOP = sp; //@line 22625
  return $$0 | 0; //@line 22625
 }
 $12 = $5 + 9 | 0; //@line 22627
 HEAP8[$12 >> 0] = 0; //@line 22628
 HEAP8[$12 + 1 >> 0] = 0; //@line 22628
 HEAP8[$12 + 2 >> 0] = 0; //@line 22628
 HEAP8[$12 + 3 >> 0] = 0; //@line 22628
 HEAP8[$12 + 4 >> 0] = 0; //@line 22628
 HEAP8[$12 + 5 >> 0] = 0; //@line 22628
 HEAP8[$12 + 6 >> 0] = 0; //@line 22628
 HEAP8[$5 >> 0] = 2; //@line 22629
 HEAP8[$9 >> 0] = HEAP8[$1 >> 0] | 0; //@line 22630
 HEAP8[$9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0; //@line 22630
 HEAP8[$9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0; //@line 22630
 HEAP8[$9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0; //@line 22630
 HEAP8[$9 + 4 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 22630
 HEAP8[$9 + 5 >> 0] = HEAP8[$1 + 5 >> 0] | 0; //@line 22630
 HEAP8[$$0$$sroa_idx12 >> 0] = $2; //@line 22631
 HEAP8[$$0$$sroa_idx12 + 1 >> 0] = $2 >> 8; //@line 22631
 $$0 = _mbedtls_aes_crypt_ecb(22632, 1, $5, $4) | 0; //@line 22633
 _mbedtls_aes_free(22632); //@line 22634
 STACKTOP = sp; //@line 22635
 return $$0 | 0; //@line 22635
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10446
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10450
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10452
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 10454
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10456
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 10458
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10460
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10462
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 10464
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 10466
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 10468
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 10470
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 10472
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 10475
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 10476
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 10509
    HEAP8[$14 >> 0] = 0; //@line 10510
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 10511
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 10512
    if (!___async) {
     ___async_unwind = 0; //@line 10515
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 800; //@line 10517
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 10519
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 10521
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 10523
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 10525
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 10527
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 10529
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 10531
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 10533
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 10535
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 10537
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 10539
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 10541
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 10543
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 10546
    sp = STACKTOP; //@line 10547
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 10552
 HEAP8[$14 >> 0] = $12; //@line 10553
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 37914
 }
 ret = dest | 0; //@line 37917
 dest_end = dest + num | 0; //@line 37918
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 37922
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 37923
   dest = dest + 1 | 0; //@line 37924
   src = src + 1 | 0; //@line 37925
   num = num - 1 | 0; //@line 37926
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 37928
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 37929
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 37931
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 37932
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 37933
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 37934
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 37935
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 37936
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 37937
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 37938
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 37939
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 37940
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 37941
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 37942
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 37943
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 37944
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 37945
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 37946
   dest = dest + 64 | 0; //@line 37947
   src = src + 64 | 0; //@line 37948
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 37951
   dest = dest + 4 | 0; //@line 37952
   src = src + 4 | 0; //@line 37953
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 37957
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 37959
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 37960
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 37961
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 37962
   dest = dest + 4 | 0; //@line 37963
   src = src + 4 | 0; //@line 37964
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 37969
  dest = dest + 1 | 0; //@line 37970
  src = src + 1 | 0; //@line 37971
 }
 return ret | 0; //@line 37973
}
function __ZN7LoRaMac11schedule_txEv__async_cb_367($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25468
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25470
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25472
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25474
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25476
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25478
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25480
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25482
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25484
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25486
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25488
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 25490
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 25492
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 25494
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 25496
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 25498
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 25500
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 25502
 $39 = HEAP32[$34 >> 2] | 0; //@line 25507
 $42 = HEAP32[(HEAP32[$39 >> 2] | 0) + 28 >> 2] | 0; //@line 25510
 $44 = HEAP8[$4 + 1136 >> 0] | 0; //@line 25512
 $45 = HEAP8[HEAP32[$0 + 72 >> 2] >> 0] | 0; //@line 25513
 $46 = HEAP32[HEAP32[$0 + 76 >> 2] >> 2] | 0; //@line 25514
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(72) | 0; //@line 25516
 FUNCTION_TABLE_viiiii[$42 & 7]($39, $44, $45, $46, $4 + 1184 | 0); //@line 25517
 if (!___async) {
  ___async_unwind = 0; //@line 25520
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 491; //@line 25522
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $8; //@line 25524
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 25526
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $10; //@line 25528
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $12; //@line 25530
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $14; //@line 25532
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $16; //@line 25534
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $18; //@line 25536
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $34; //@line 25538
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 25540
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $22; //@line 25542
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $6; //@line 25544
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $32; //@line 25546
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $24; //@line 25548
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $26; //@line 25550
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $28; //@line 25552
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $30; //@line 25554
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $2; //@line 25556
 sp = STACKTOP; //@line 25557
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_391($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27173
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27181
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27185
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27187
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27189
 if ((HEAP32[___async_retval >> 2] | 0) < (HEAP32[$0 + 4 >> 2] | 0)) {
  _printf(10904, HEAP32[$0 + 8 >> 2] | 0) | 0; //@line 27194
  _printf(11092, $8) | 0; //@line 27195
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 27196
  _putchar(10) | 0; //@line 27197
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 101; //@line 27200
   $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 27201
   HEAP32[$19 >> 2] = $12; //@line 27202
   $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 27203
   HEAP32[$20 >> 2] = $14; //@line 27204
   $21 = $ReallocAsyncCtx4 + 12 | 0; //@line 27205
   HEAP32[$21 >> 2] = $16; //@line 27206
   sp = STACKTOP; //@line 27207
   return;
  }
  ___async_unwind = 0; //@line 27210
  HEAP32[$ReallocAsyncCtx4 >> 2] = 101; //@line 27211
  $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 27212
  HEAP32[$19 >> 2] = $12; //@line 27213
  $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 27214
  HEAP32[$20 >> 2] = $14; //@line 27215
  $21 = $ReallocAsyncCtx4 + 12 | 0; //@line 27216
  HEAP32[$21 >> 2] = $16; //@line 27217
  sp = STACKTOP; //@line 27218
  return;
 } else {
  $24 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 27223
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 27224
  FUNCTION_TABLE_vi[$24 & 1023]($12); //@line 27225
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 27228
   $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 27229
   HEAP32[$25 >> 2] = $14; //@line 27230
   $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 27231
   HEAP32[$26 >> 2] = $16; //@line 27232
   $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 27233
   $$expand_i1_val = 1; //@line 27234
   HEAP8[$27 >> 0] = $$expand_i1_val; //@line 27235
   sp = STACKTOP; //@line 27236
   return;
  }
  ___async_unwind = 0; //@line 27239
  HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 27240
  $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 27241
  HEAP32[$25 >> 2] = $14; //@line 27242
  $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 27243
  HEAP32[$26 >> 2] = $16; //@line 27244
  $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 27245
  $$expand_i1_val = 1; //@line 27246
  HEAP8[$27 >> 0] = $$expand_i1_val; //@line 27247
  sp = STACKTOP; //@line 27248
  return;
 }
}
function _main__async_cb_163($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32534
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32536
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32538
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32540
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32542
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32544
 if (!(__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE(23200, 23e3) | 0)) {
  $14 = $10 + 4 | 0; //@line 32549
  HEAP32[$14 >> 2] = 0; //@line 32551
  HEAP32[$14 + 4 >> 2] = 0; //@line 32554
  HEAP32[$10 >> 2] = 7; //@line 32555
  $18 = $10 + 12 | 0; //@line 32556
  HEAP32[$18 >> 2] = 10120; //@line 32557
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(28) | 0; //@line 32558
  __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE(22928, $10); //@line 32559
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 749; //@line 32562
   $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 32563
   HEAP32[$19 >> 2] = $2; //@line 32564
   $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 32565
   HEAP32[$20 >> 2] = $4; //@line 32566
   $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 32567
   HEAP32[$21 >> 2] = $6; //@line 32568
   $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 32569
   HEAP32[$22 >> 2] = $8; //@line 32570
   $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 32571
   HEAP32[$23 >> 2] = $10; //@line 32572
   $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 32573
   HEAP32[$24 >> 2] = $18; //@line 32574
   sp = STACKTOP; //@line 32575
   return;
  }
  ___async_unwind = 0; //@line 32578
  HEAP32[$ReallocAsyncCtx10 >> 2] = 749; //@line 32579
  $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 32580
  HEAP32[$19 >> 2] = $2; //@line 32581
  $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 32582
  HEAP32[$20 >> 2] = $4; //@line 32583
  $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 32584
  HEAP32[$21 >> 2] = $6; //@line 32585
  $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 32586
  HEAP32[$22 >> 2] = $8; //@line 32587
  $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 32588
  HEAP32[$23 >> 2] = $10; //@line 32589
  $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 32590
  HEAP32[$24 >> 2] = $18; //@line 32591
  sp = STACKTOP; //@line 32592
  return;
 } else {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 32595
  _puts(15404) | 0; //@line 32596
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 748; //@line 32599
   sp = STACKTOP; //@line 32600
   return;
  }
  ___async_unwind = 0; //@line 32603
  HEAP32[$ReallocAsyncCtx7 >> 2] = 748; //@line 32604
  sp = STACKTOP; //@line 32605
  return;
 }
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb_350($0) {
 $0 = $0 | 0;
 var $2 = 0, $21 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23345
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23347
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23349
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 23351
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23353
 HEAP8[$4 >> 0] = 0; //@line 23354
 HEAP8[$2 >> 0] = $6; //@line 23355
 $9 = $8 + 1097 | 0; //@line 23356
 HEAP8[$2 + 1 >> 0] = HEAP8[$9 >> 0] | 0; //@line 23359
 HEAP8[$2 + 2 >> 0] = HEAP8[$8 + 1096 >> 0] | 0; //@line 23363
 HEAP32[$2 + 4 >> 2] = HEAP32[$8 + 1144 >> 2]; //@line 23367
 HEAP32[$2 + 8 >> 2] = HEAP32[$8 + 1148 >> 2]; //@line 23371
 $21 = $8 + 636 | 0; //@line 23372
 HEAP16[$2 + 12 >> 1] = HEAP16[$21 >> 1] | 0; //@line 23375
 $24 = HEAP32[$8 >> 2] | 0; //@line 23376
 $27 = HEAP32[(HEAP32[$24 >> 2] | 0) + 32 >> 2] | 0; //@line 23379
 $28 = $8 + 992 | 0; //@line 23380
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 23381
 FUNCTION_TABLE_iiiii[$27 & 3]($24, $2, $4, $28) | 0; //@line 23382
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 497; //@line 23385
  $29 = $ReallocAsyncCtx + 4 | 0; //@line 23386
  HEAP32[$29 >> 2] = $8; //@line 23387
  $30 = $ReallocAsyncCtx + 8 | 0; //@line 23388
  HEAP32[$30 >> 2] = $9; //@line 23389
  $31 = $ReallocAsyncCtx + 12 | 0; //@line 23390
  HEAP32[$31 >> 2] = $4; //@line 23391
  $32 = $ReallocAsyncCtx + 16 | 0; //@line 23392
  HEAP32[$32 >> 2] = $28; //@line 23393
  $33 = $ReallocAsyncCtx + 20 | 0; //@line 23394
  HEAP32[$33 >> 2] = $8; //@line 23395
  $34 = $ReallocAsyncCtx + 24 | 0; //@line 23396
  HEAP32[$34 >> 2] = $21; //@line 23397
  $35 = $ReallocAsyncCtx + 28 | 0; //@line 23398
  HEAP32[$35 >> 2] = $2; //@line 23399
  sp = STACKTOP; //@line 23400
  return;
 }
 ___async_unwind = 0; //@line 23403
 HEAP32[$ReallocAsyncCtx >> 2] = 497; //@line 23404
 $29 = $ReallocAsyncCtx + 4 | 0; //@line 23405
 HEAP32[$29 >> 2] = $8; //@line 23406
 $30 = $ReallocAsyncCtx + 8 | 0; //@line 23407
 HEAP32[$30 >> 2] = $9; //@line 23408
 $31 = $ReallocAsyncCtx + 12 | 0; //@line 23409
 HEAP32[$31 >> 2] = $4; //@line 23410
 $32 = $ReallocAsyncCtx + 16 | 0; //@line 23411
 HEAP32[$32 >> 2] = $28; //@line 23412
 $33 = $ReallocAsyncCtx + 20 | 0; //@line 23413
 HEAP32[$33 >> 2] = $8; //@line 23414
 $34 = $ReallocAsyncCtx + 24 | 0; //@line 23415
 HEAP32[$34 >> 2] = $21; //@line 23416
 $35 = $ReallocAsyncCtx + 28 | 0; //@line 23417
 HEAP32[$35 >> 2] = $2; //@line 23418
 sp = STACKTOP; //@line 23419
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_371($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 25939
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25941
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25943
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25945
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25947
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25949
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25951
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25953
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25955
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25957
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25959
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 25961
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 25963
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 25965
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 25967
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 25969
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 25971
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 25973
 $35 = HEAP32[$20 >> 2] | 0; //@line 25974
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 72 >> 2] | 0; //@line 25977
 $39 = HEAP8[$10 >> 0] | 0; //@line 25978
 $41 = HEAP8[$4 + 1129 >> 0] | 0; //@line 25980
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(72) | 0; //@line 25981
 $42 = FUNCTION_TABLE_iiii[$38 & 15]($35, $39, $41) | 0; //@line 25982
 if (!___async) {
  HEAP8[___async_retval >> 0] = $42; //@line 25986
  ___async_unwind = 0; //@line 25987
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 489; //@line 25989
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 25991
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 25993
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 25995
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 25997
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 25999
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 26001
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 26003
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 26005
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 26007
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $22; //@line 26009
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $24; //@line 26011
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $28; //@line 26013
 HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $30; //@line 26015
 HEAP32[$ReallocAsyncCtx3 + 56 >> 2] = $32; //@line 26017
 HEAP32[$ReallocAsyncCtx3 + 60 >> 2] = $34; //@line 26019
 HEAP32[$ReallocAsyncCtx3 + 64 >> 2] = $26; //@line 26021
 HEAP32[$ReallocAsyncCtx3 + 68 >> 2] = $20; //@line 26023
 sp = STACKTOP; //@line 26024
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $15 = 0, $18 = 0, $20 = 0, $23 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx4 = 0, $AsyncCtx7 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 26206
 STACKTOP = STACKTOP + 16 | 0; //@line 26207
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 26207
 $vararg_buffer1 = sp + 8 | 0; //@line 26208
 _printf(13660, sp) | 0; //@line 26210
 HEAP32[$vararg_buffer1 >> 2] = $2 & 255; //@line 26212
 _printf(13673, $vararg_buffer1) | 0; //@line 26213
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 26214
 _putchar(10) | 0; //@line 26215
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 655; //@line 26218
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 26220
  HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 26222
  HEAP8[$AsyncCtx11 + 12 >> 0] = $2; //@line 26224
  sp = STACKTOP; //@line 26225
  STACKTOP = sp; //@line 26226
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 26228
 $7 = $0 + 4 | 0; //@line 26229
 $8 = HEAP32[$7 >> 2] | 0; //@line 26230
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 72 >> 2] | 0; //@line 26233
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 26234
 FUNCTION_TABLE_vi[$11 & 1023]($8); //@line 26235
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 656; //@line 26238
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 26240
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 26242
  HEAP8[$AsyncCtx + 12 >> 0] = $2; //@line 26244
  sp = STACKTOP; //@line 26245
  STACKTOP = sp; //@line 26246
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 26248
 $15 = HEAP32[$7 >> 2] | 0; //@line 26249
 $18 = HEAP32[(HEAP32[$15 >> 2] | 0) + 24 >> 2] | 0; //@line 26252
 $AsyncCtx4 = _emscripten_alloc_async_context(8, sp) | 0; //@line 26253
 FUNCTION_TABLE_viii[$18 & 7]($15, $1, $2); //@line 26254
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 657; //@line 26257
  HEAP32[$AsyncCtx4 + 4 >> 2] = $7; //@line 26259
  sp = STACKTOP; //@line 26260
  STACKTOP = sp; //@line 26261
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 26263
 $20 = HEAP32[$7 >> 2] | 0; //@line 26264
 $23 = HEAP32[(HEAP32[$20 >> 2] | 0) + 76 >> 2] | 0; //@line 26267
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 26268
 FUNCTION_TABLE_vi[$23 & 1023]($20); //@line 26269
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 658; //@line 26272
  sp = STACKTOP; //@line 26273
  STACKTOP = sp; //@line 26274
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 26276
  STACKTOP = sp; //@line 26277
  return;
 }
}
function __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb_206($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $25 = 0, $28 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 35574
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35576
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35578
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35582
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35584
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 35586
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 35588
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 35592
 $22 = HEAP8[$0 + 44 >> 0] | 0; //@line 35596
 $25 = (HEAP32[$0 + 12 >> 2] | 0) + 369 | 0; //@line 35599
 $28 = __ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$4 >> 2] | 0, HEAP8[$2 >> 0] | 0, (HEAP8[$25 >> 0] | 0) != 0) | 0; //@line 35602
 HEAP8[$8 + 1 >> 0] = $28; //@line 35604
 $30 = $28 & 255; //@line 35605
 $31 = $10 & 255; //@line 35606
 if ($31 >>> 0 > $30 >>> 0) {
  HEAP8[$8 >> 0] = $28; //@line 35609
  __ZN14LoRaMacCommand20clear_command_bufferEv($12); //@line 35610
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($12); //@line 35611
  $$0 = 0; //@line 35612
 } else {
  HEAP8[$8 >> 0] = $30 - $10; //@line 35616
  $$0 = $31; //@line 35617
 }
 $35 = HEAP8[$2 >> 0] | 0; //@line 35619
 _printf(12967, $14) | 0; //@line 35620
 _printf(13293, $18) | 0; //@line 35621
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 35622
 _putchar(10) | 0; //@line 35623
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 545; //@line 35626
  $36 = $ReallocAsyncCtx + 4 | 0; //@line 35627
  HEAP32[$36 >> 2] = $4; //@line 35628
  $37 = $ReallocAsyncCtx + 8 | 0; //@line 35629
  HEAP32[$37 >> 2] = $25; //@line 35630
  $38 = $ReallocAsyncCtx + 12 | 0; //@line 35631
  HEAP8[$38 >> 0] = $35; //@line 35632
  $39 = $ReallocAsyncCtx + 13 | 0; //@line 35633
  HEAP8[$39 >> 0] = $22; //@line 35634
  $40 = $ReallocAsyncCtx + 16 | 0; //@line 35635
  HEAP32[$40 >> 2] = $$0; //@line 35636
  sp = STACKTOP; //@line 35637
  return;
 }
 ___async_unwind = 0; //@line 35640
 HEAP32[$ReallocAsyncCtx >> 2] = 545; //@line 35641
 $36 = $ReallocAsyncCtx + 4 | 0; //@line 35642
 HEAP32[$36 >> 2] = $4; //@line 35643
 $37 = $ReallocAsyncCtx + 8 | 0; //@line 35644
 HEAP32[$37 >> 2] = $25; //@line 35645
 $38 = $ReallocAsyncCtx + 12 | 0; //@line 35646
 HEAP8[$38 >> 0] = $35; //@line 35647
 $39 = $ReallocAsyncCtx + 13 | 0; //@line 35648
 HEAP8[$39 >> 0] = $22; //@line 35649
 $40 = $ReallocAsyncCtx + 16 | 0; //@line 35650
 HEAP32[$40 >> 2] = $$0; //@line 35651
 sp = STACKTOP; //@line 35652
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_390($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27090
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27092
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27094
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27096
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27098
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27100
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27102
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27104
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27106
 if ((HEAP32[___async_retval >> 2] | 0) < ($2 | 0)) {
  _printf(10904, $4) | 0; //@line 27111
  _printf(11092, $8) | 0; //@line 27112
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 27113
  _putchar(10) | 0; //@line 27114
  if (!___async) {
   ___async_unwind = 0; //@line 27117
  }
  HEAP32[$ReallocAsyncCtx3 >> 2] = 103; //@line 27119
  HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $14; //@line 27121
  HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 27123
  HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $4; //@line 27125
  HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $6; //@line 27127
  HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $8; //@line 27129
  HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $10; //@line 27131
  HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $12; //@line 27133
  HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 27135
  sp = STACKTOP; //@line 27136
  return;
 }
 $29 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 27141
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 27142
 FUNCTION_TABLE_vi[$29 & 1023]($12); //@line 27143
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 27146
  $30 = $ReallocAsyncCtx2 + 4 | 0; //@line 27147
  HEAP32[$30 >> 2] = $14; //@line 27148
  $31 = $ReallocAsyncCtx2 + 8 | 0; //@line 27149
  HEAP32[$31 >> 2] = $16; //@line 27150
  $32 = $ReallocAsyncCtx2 + 12 | 0; //@line 27151
  $$expand_i1_val = 1; //@line 27152
  HEAP8[$32 >> 0] = $$expand_i1_val; //@line 27153
  sp = STACKTOP; //@line 27154
  return;
 }
 ___async_unwind = 0; //@line 27157
 HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 27158
 $30 = $ReallocAsyncCtx2 + 4 | 0; //@line 27159
 HEAP32[$30 >> 2] = $14; //@line 27160
 $31 = $ReallocAsyncCtx2 + 8 | 0; //@line 27161
 HEAP32[$31 >> 2] = $16; //@line 27162
 $32 = $ReallocAsyncCtx2 + 12 | 0; //@line 27163
 $$expand_i1_val = 1; //@line 27164
 HEAP8[$32 >> 0] = $$expand_i1_val; //@line 27165
 sp = STACKTOP; //@line 27166
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_279($0) {
 $0 = $0 | 0;
 var $10 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 13139
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13141
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13143
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13149
 if ((HEAP32[___async_retval >> 2] | 0) != -1018) {
  _printf(11887, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 13156
  _printf(12085, $10) | 0; //@line 13157
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 13158
  _putchar(10) | 0; //@line 13159
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 227; //@line 13162
   $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 13163
   HEAP32[$15 >> 2] = $4; //@line 13164
   $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 13165
   HEAP32[$16 >> 2] = $2; //@line 13166
   sp = STACKTOP; //@line 13167
   return;
  }
  ___async_unwind = 0; //@line 13170
  HEAP32[$ReallocAsyncCtx5 >> 2] = 227; //@line 13171
  $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 13172
  HEAP32[$15 >> 2] = $4; //@line 13173
  $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 13174
  HEAP32[$16 >> 2] = $2; //@line 13175
  sp = STACKTOP; //@line 13176
  return;
 }
 $17 = $4 + 1892 | 0; //@line 13179
 $18 = HEAP32[$17 >> 2] | 0; //@line 13180
 if (!$18) {
  return;
 }
 $22 = HEAP32[$4 + 2288 >> 2] | 0; //@line 13187
 $24 = HEAP32[$18 + 4 >> 2] | 0; //@line 13189
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 13190
 FUNCTION_TABLE_vii[$24 & 31]($2, $4 + 1880 | 0); //@line 13191
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 228; //@line 13194
  $25 = $ReallocAsyncCtx + 4 | 0; //@line 13195
  HEAP32[$25 >> 2] = $17; //@line 13196
  $26 = $ReallocAsyncCtx + 8 | 0; //@line 13197
  HEAP32[$26 >> 2] = $2; //@line 13198
  $27 = $ReallocAsyncCtx + 12 | 0; //@line 13199
  HEAP32[$27 >> 2] = $22; //@line 13200
  $28 = $ReallocAsyncCtx + 16 | 0; //@line 13201
  HEAP32[$28 >> 2] = $2; //@line 13202
  sp = STACKTOP; //@line 13203
  return;
 }
 ___async_unwind = 0; //@line 13206
 HEAP32[$ReallocAsyncCtx >> 2] = 228; //@line 13207
 $25 = $ReallocAsyncCtx + 4 | 0; //@line 13208
 HEAP32[$25 >> 2] = $17; //@line 13209
 $26 = $ReallocAsyncCtx + 8 | 0; //@line 13210
 HEAP32[$26 >> 2] = $2; //@line 13211
 $27 = $ReallocAsyncCtx + 12 | 0; //@line 13212
 HEAP32[$27 >> 2] = $22; //@line 13213
 $28 = $ReallocAsyncCtx + 16 | 0; //@line 13214
 HEAP32[$28 >> 2] = $2; //@line 13215
 sp = STACKTOP; //@line 13216
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_389($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 27000
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27004
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27006
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27008
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27010
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27012
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27014
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27016
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27018
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27020
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 27022
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 27024
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 27026
 if ((HEAP16[$0 + 4 >> 1] | 0) < -1) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(36) | 0; //@line 27029
  $28 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 27030
  if (!___async) {
   HEAP32[___async_retval >> 2] = $28; //@line 27034
   ___async_unwind = 0; //@line 27035
  }
  HEAP32[$ReallocAsyncCtx13 >> 2] = 100; //@line 27037
  HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $6; //@line 27039
  HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $20; //@line 27041
  HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $22; //@line 27043
  HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $24; //@line 27045
  HEAP32[$ReallocAsyncCtx13 + 20 >> 2] = $26; //@line 27047
  HEAP32[$ReallocAsyncCtx13 + 24 >> 2] = $16; //@line 27049
  HEAP32[$ReallocAsyncCtx13 + 28 >> 2] = $4; //@line 27051
  HEAP32[$ReallocAsyncCtx13 + 32 >> 2] = $18; //@line 27053
  sp = STACKTOP; //@line 27054
  return;
 } else {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(36) | 0; //@line 27057
  $38 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 27058
  if (!___async) {
   HEAP32[___async_retval >> 2] = $38; //@line 27062
   ___async_unwind = 0; //@line 27063
  }
  HEAP32[$ReallocAsyncCtx12 >> 2] = 102; //@line 27065
  HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $6; //@line 27067
  HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $8; //@line 27069
  HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $10; //@line 27071
  HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $12; //@line 27073
  HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $14; //@line 27075
  HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $16; //@line 27077
  HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $4; //@line 27079
  HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $18; //@line 27081
  sp = STACKTOP; //@line 27082
  return;
 }
}
function __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK25loramac_mib_req_confirm_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038$lcssa = 0, $$03841 = 0, $$1 = 0, $$140 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $32 = 0, $41 = 0, $48 = 0, $7 = 0, $9 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!$2) {
  $$140 = -1003; //@line 20065
  return $$140 | 0; //@line 20066
 }
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$140 = -1002; //@line 20071
  return $$140 | 0; //@line 20072
 }
 $7 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 20075
 $9 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 20077
 if (!($7 << 24 >> 24)) {
  $$038$lcssa = 0; //@line 20080
 } else {
  $11 = $1 + 4 | 0; //@line 20082
  $12 = $2 + 4 | 0; //@line 20083
  $wide$trip$count = $7 & 255; //@line 20084
  $$03841 = 0; //@line 20085
  $indvars$iv = 0; //@line 20085
  while (1) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $9, $indvars$iv) | 0) {
    $15 = HEAP32[$11 >> 2] | 0; //@line 20090
    $16 = $$03841 & 255; //@line 20091
    HEAP8[$15 + ($16 << 4) >> 0] = $indvars$iv; //@line 20094
    HEAP32[$15 + ($16 << 4) + 4 >> 2] = HEAP32[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) >> 2]; //@line 20099
    HEAP8[$15 + ($16 << 4) + 12 >> 0] = HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 8 >> 0] | 0; //@line 20104
    $32 = (HEAP32[$11 >> 2] | 0) + ($16 << 4) + 12 | 0; //@line 20110
    HEAP8[$32 >> 0] = HEAP8[$32 >> 0] & -16 | HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 8 >> 0] & 15; //@line 20114
    $41 = (HEAP32[$11 >> 2] | 0) + ($16 << 4) + 12 | 0; //@line 20120
    HEAP8[$41 >> 0] = HEAP8[$41 >> 0] & 15 | HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 8 >> 0] & -16; //@line 20124
    $48 = HEAP32[$11 >> 2] | 0; //@line 20128
    HEAP8[$48 + ($16 << 4) + 13 >> 0] = HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 9 >> 0] | 0; //@line 20130
    HEAP32[$48 + ($16 << 4) + 8 >> 2] = HEAP32[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 4 >> 2]; //@line 20135
    $$1 = $$03841 + 1 << 24 >> 24; //@line 20137
   } else {
    $$1 = $$03841; //@line 20139
   }
   $indvars$iv = $indvars$iv + 1 | 0; //@line 20141
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$038$lcssa = $$1; //@line 20144
    break;
   } else {
    $$03841 = $$1; //@line 20147
   }
  }
 }
 HEAP8[$1 >> 0] = $$038$lcssa; //@line 20151
 $$140 = 0; //@line 20152
 return $$140 | 0; //@line 20153
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $27 = 0, $30 = 0, $36 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23264
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23266
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23268
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23270
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23272
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23274
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23276
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23278
 $15 = $2 + 264 | 0; //@line 23279
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($15) | 0) + 4 >> 2] = 1; //@line 23282
 $18 = $2 + 288 | 0; //@line 23283
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 4 >> 2] = 1; //@line 23286
 $21 = HEAP8[$4 >> 0] | 0; //@line 23287
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 8 >> 0] = $21; //@line 23290
 $24 = HEAP8[$6 >> 0] | 0; //@line 23291
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 9 >> 0] = $24; //@line 23294
 $27 = HEAP32[$8 >> 2] | 0; //@line 23295
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 12 >> 2] = $27; //@line 23298
 $30 = HEAP32[$8 >> 2] | 0; //@line 23299
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($15) | 0) + 8 >> 2] = $30; //@line 23302
 if (!(HEAP8[$2 + 372 >> 0] | 0)) {
  $36 = $2 + 897 | 0; //@line 23307
  HEAP8[$36 >> 0] = (HEAP8[$36 >> 0] | 0) + 1 << 24 >> 24; //@line 23310
 }
 $39 = HEAP32[$10 >> 2] | 0; //@line 23312
 $42 = HEAP16[$12 >> 1] & 255; //@line 23315
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 23316
 __ZN7LoRaPHY11handle_sendEPhh($39, $2 + 381 | 0, $42); //@line 23317
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 498; //@line 23320
  $43 = $ReallocAsyncCtx3 + 4 | 0; //@line 23321
  HEAP32[$43 >> 2] = $2; //@line 23322
  $44 = $ReallocAsyncCtx3 + 8 | 0; //@line 23323
  HEAP32[$44 >> 2] = $6; //@line 23324
  $45 = $ReallocAsyncCtx3 + 12 | 0; //@line 23325
  HEAP32[$45 >> 2] = $14; //@line 23326
  sp = STACKTOP; //@line 23327
  return;
 }
 ___async_unwind = 0; //@line 23330
 HEAP32[$ReallocAsyncCtx3 >> 2] = 498; //@line 23331
 $43 = $ReallocAsyncCtx3 + 4 | 0; //@line 23332
 HEAP32[$43 >> 2] = $2; //@line 23333
 $44 = $ReallocAsyncCtx3 + 8 | 0; //@line 23334
 HEAP32[$44 >> 2] = $6; //@line 23335
 $45 = $ReallocAsyncCtx3 + 12 | 0; //@line 23336
 HEAP32[$45 >> 2] = $14; //@line 23337
 sp = STACKTOP; //@line 23338
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_56($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$pre = 0, $10 = 0, $13 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 23142
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23144
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23146
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23148
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23150
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23152
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23154
 if (!$AsyncRetVal) {
  $13 = $2 + 288 | 0; //@line 23157
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($13) | 0) + 11 >> 0] = 0; //@line 23160
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($13) | 0) + 10 >> 0] = 0; //@line 23163
  $18 = HEAP32[$4 >> 2] | 0; //@line 23164
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($13) | 0) + 16 >> 2] = $18; //@line 23167
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(20) | 0; //@line 23168
  $21 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 23169
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 552; //@line 23172
   $22 = $ReallocAsyncCtx8 + 4 | 0; //@line 23173
   HEAP32[$22 >> 2] = $6; //@line 23174
   $23 = $ReallocAsyncCtx8 + 8 | 0; //@line 23175
   HEAP32[$23 >> 2] = $8; //@line 23176
   $24 = $ReallocAsyncCtx8 + 12 | 0; //@line 23177
   HEAP32[$24 >> 2] = $10; //@line 23178
   $25 = $ReallocAsyncCtx8 + 16 | 0; //@line 23179
   HEAP32[$25 >> 2] = $2; //@line 23180
   sp = STACKTOP; //@line 23181
   return;
  }
  HEAP32[___async_retval >> 2] = $21; //@line 23185
  ___async_unwind = 0; //@line 23186
  HEAP32[$ReallocAsyncCtx8 >> 2] = 552; //@line 23187
  $22 = $ReallocAsyncCtx8 + 4 | 0; //@line 23188
  HEAP32[$22 >> 2] = $6; //@line 23189
  $23 = $ReallocAsyncCtx8 + 8 | 0; //@line 23190
  HEAP32[$23 >> 2] = $8; //@line 23191
  $24 = $ReallocAsyncCtx8 + 12 | 0; //@line 23192
  HEAP32[$24 >> 2] = $10; //@line 23193
  $25 = $ReallocAsyncCtx8 + 16 | 0; //@line 23194
  HEAP32[$25 >> 2] = $2; //@line 23195
  sp = STACKTOP; //@line 23196
  return;
 }
 if (!$AsyncRetVal) {
  $$1 = 0; //@line 23201
  $30 = ___async_retval; //@line 23202
  HEAP32[$30 >> 2] = $$1; //@line 23203
  return;
 }
 $$pre = HEAP8[$10 >> 0] | 0; //@line 23206
 HEAP8[$2 + 373 >> 0] = 0; //@line 23208
 HEAP8[$10 >> 0] = $$pre & -9; //@line 23210
 $$1 = $AsyncRetVal; //@line 23211
 $30 = ___async_retval; //@line 23212
 HEAP32[$30 >> 2] = $$1; //@line 23213
 return;
}
function __ZL12send_messagev() {
 var $0 = 0, $11 = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 6754
 STACKTOP = STACKTOP + 80 | 0; //@line 6755
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 6755
 $vararg_buffer8 = sp + 24 | 0; //@line 6756
 $vararg_buffer5 = sp + 16 | 0; //@line 6757
 $vararg_buffer1 = sp + 8 | 0; //@line 6758
 $vararg_buffer = sp; //@line 6759
 $0 = sp + 28 | 0; //@line 6760
 dest = $0; //@line 6761
 stop = dest + 50 | 0; //@line 6761
 do {
  HEAP8[dest >> 0] = 0; //@line 6761
  dest = dest + 1 | 0; //@line 6761
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$vararg_buffer >> 3] = +__ZN5Sht3115readTemperatureEv(23904); //@line 6764
 _sprintf($0, 15808, $vararg_buffer) | 0; //@line 6765
 $3 = _strlen($0) | 0; //@line 6766
 HEAP32[$vararg_buffer1 >> 2] = $3; //@line 6767
 HEAP32[$vararg_buffer1 + 4 >> 2] = $0; //@line 6769
 _printf(15828, $vararg_buffer1) | 0; //@line 6770
 $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6772
 $5 = __ZN16LoRaWANInterface4sendEhPKhti(23200, 15, $0, $3 & 65535, 1) | 0; //@line 6773
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 758; //@line 6776
  HEAP32[$AsyncCtx13 + 4 >> 2] = $vararg_buffer8; //@line 6778
  HEAP32[$AsyncCtx13 + 8 >> 2] = $vararg_buffer8; //@line 6780
  HEAP32[$AsyncCtx13 + 12 >> 2] = $0; //@line 6782
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer5; //@line 6784
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer5; //@line 6786
  sp = STACKTOP; //@line 6787
  STACKTOP = sp; //@line 6788
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 6790
 $11 = $5 << 16 >> 16; //@line 6791
 if ($5 << 16 >> 16 >= 0) {
  HEAP32[$vararg_buffer8 >> 2] = $11; //@line 6794
  _printf(15904, $vararg_buffer8) | 0; //@line 6795
  STACKTOP = sp; //@line 6796
  return;
 }
 if ($5 << 16 >> 16 != -1001) {
  HEAP32[$vararg_buffer5 >> 2] = $11; //@line 6800
  _printf(15880, $vararg_buffer5) | 0; //@line 6801
  STACKTOP = sp; //@line 6802
  return;
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6804
 _puts(15852) | 0; //@line 6805
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 759; //@line 6808
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6810
  sp = STACKTOP; //@line 6811
  STACKTOP = sp; //@line 6812
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6814
 STACKTOP = sp; //@line 6815
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 14734
 STACKTOP = STACKTOP + 64 | 0; //@line 14735
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 14735
 $3 = sp; //@line 14736
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 14739
 } else {
  if (!$1) {
   $$2 = 0; //@line 14743
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14745
   $6 = ___dynamic_cast($1, 464, 448, 0) | 0; //@line 14746
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 789; //@line 14749
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 14751
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 14753
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 14755
    sp = STACKTOP; //@line 14756
    STACKTOP = sp; //@line 14757
    return 0; //@line 14757
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14759
   if (!$6) {
    $$2 = 0; //@line 14762
   } else {
    dest = $3 + 4 | 0; //@line 14765
    stop = dest + 52 | 0; //@line 14765
    do {
     HEAP32[dest >> 2] = 0; //@line 14765
     dest = dest + 4 | 0; //@line 14765
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 14766
    HEAP32[$3 + 8 >> 2] = $0; //@line 14768
    HEAP32[$3 + 12 >> 2] = -1; //@line 14770
    HEAP32[$3 + 48 >> 2] = 1; //@line 14772
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 14775
    $18 = HEAP32[$2 >> 2] | 0; //@line 14776
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14777
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 14778
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 790; //@line 14781
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 14783
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 14785
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 14787
     sp = STACKTOP; //@line 14788
     STACKTOP = sp; //@line 14789
     return 0; //@line 14789
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14791
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 14798
     $$0 = 1; //@line 14799
    } else {
     $$0 = 0; //@line 14801
    }
    $$2 = $$0; //@line 14803
   }
  }
 }
 STACKTOP = sp; //@line 14807
 return $$2 | 0; //@line 14807
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_256($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 11937
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11939
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11941
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11947
 $13 = $2 + 360 | 0; //@line 11950
 if ((HEAP32[$13 >> 2] | 0) == 2) {
  _printf(12967, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 11954
  _printf(12994, $10) | 0; //@line 11955
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 11956
  _putchar(10) | 0; //@line 11957
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 442; //@line 11960
   $16 = $ReallocAsyncCtx + 4 | 0; //@line 11961
   HEAP32[$16 >> 2] = $2; //@line 11962
   $17 = $ReallocAsyncCtx + 8 | 0; //@line 11963
   HEAP32[$17 >> 2] = $4; //@line 11964
   $18 = $ReallocAsyncCtx + 12 | 0; //@line 11965
   HEAP32[$18 >> 2] = $4; //@line 11966
   $19 = $ReallocAsyncCtx + 16 | 0; //@line 11967
   HEAP32[$19 >> 2] = $13; //@line 11968
   sp = STACKTOP; //@line 11969
   return;
  }
  ___async_unwind = 0; //@line 11972
  HEAP32[$ReallocAsyncCtx >> 2] = 442; //@line 11973
  $16 = $ReallocAsyncCtx + 4 | 0; //@line 11974
  HEAP32[$16 >> 2] = $2; //@line 11975
  $17 = $ReallocAsyncCtx + 8 | 0; //@line 11976
  HEAP32[$17 >> 2] = $4; //@line 11977
  $18 = $ReallocAsyncCtx + 12 | 0; //@line 11978
  HEAP32[$18 >> 2] = $4; //@line 11979
  $19 = $ReallocAsyncCtx + 16 | 0; //@line 11980
  HEAP32[$19 >> 2] = $13; //@line 11981
  sp = STACKTOP; //@line 11982
  return;
 } else {
  $20 = HEAP32[$2 >> 2] | 0; //@line 11985
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 11986
  __ZN7LoRaPHY18put_radio_to_sleepEv($20); //@line 11987
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 445; //@line 11990
   $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 11991
   HEAP32[$21 >> 2] = $2; //@line 11992
   $22 = $ReallocAsyncCtx4 + 8 | 0; //@line 11993
   HEAP32[$22 >> 2] = $13; //@line 11994
   sp = STACKTOP; //@line 11995
   return;
  }
  ___async_unwind = 0; //@line 11998
  HEAP32[$ReallocAsyncCtx4 >> 2] = 445; //@line 11999
  $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 12000
  HEAP32[$21 >> 2] = $2; //@line 12001
  $22 = $ReallocAsyncCtx4 + 8 | 0; //@line 12002
  HEAP32[$22 >> 2] = $13; //@line 12003
  sp = STACKTOP; //@line 12004
  return;
 }
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 14159
 STACKTOP = STACKTOP + 128 | 0; //@line 14160
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 14160
 $4 = sp + 124 | 0; //@line 14161
 $5 = sp; //@line 14162
 dest = $5; //@line 14163
 src = 10656; //@line 14163
 stop = dest + 124 | 0; //@line 14163
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 14163
  dest = dest + 4 | 0; //@line 14163
  src = src + 4 | 0; //@line 14163
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 14169
   $$015 = 1; //@line 14169
   label = 4; //@line 14170
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 14173
   $$0 = -1; //@line 14174
  }
 } else {
  $$014 = $0; //@line 14177
  $$015 = $1; //@line 14177
  label = 4; //@line 14178
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 14182
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 14184
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 14186
  $14 = $5 + 20 | 0; //@line 14187
  HEAP32[$14 >> 2] = $$014; //@line 14188
  HEAP32[$5 + 44 >> 2] = $$014; //@line 14190
  $16 = $$014 + $$$015 | 0; //@line 14191
  $17 = $5 + 16 | 0; //@line 14192
  HEAP32[$17 >> 2] = $16; //@line 14193
  HEAP32[$5 + 28 >> 2] = $16; //@line 14195
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 14196
  $19 = _vfprintf($5, $2, $3) | 0; //@line 14197
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 777; //@line 14200
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 14202
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 14204
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 14206
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 14208
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 14210
   sp = STACKTOP; //@line 14211
   STACKTOP = sp; //@line 14212
   return 0; //@line 14212
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14214
  if (!$$$015) {
   $$0 = $19; //@line 14217
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 14219
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 14224
   $$0 = $19; //@line 14225
  }
 }
 STACKTOP = sp; //@line 14228
 return $$0 | 0; //@line 14228
}
function __ZN7LoRaMac21prepare_rx_done_abortEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $21 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 34133
 STACKTOP = STACKTOP + 16 | 0; //@line 34134
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 34134
 $$byval_copy = sp; //@line 34135
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34137
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34139
 $5 = $2 + 968 | 0; //@line 34140
 HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 64; //@line 34143
 if (!(HEAP8[$2 + 373 >> 0] | 0)) {
  $17 = $2 + 944 | 0; //@line 34148
  HEAP8[$17 >> 0] = HEAP8[$17 >> 0] | 34; //@line 34151
  $21 = HEAP32[$2 + 356 >> 2] | 0; //@line 34153
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 34155
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $2 + 996 | 0, 1); //@line 34156
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 426; //@line 34159
   sp = STACKTOP; //@line 34160
   STACKTOP = sp; //@line 34161
   return;
  }
  ___async_unwind = 0; //@line 34163
  HEAP32[$ReallocAsyncCtx2 >> 2] = 426; //@line 34164
  sp = STACKTOP; //@line 34165
  STACKTOP = sp; //@line 34166
  return;
 } else {
  $12 = HEAP32[$2 + 1328 >> 2] | 0; //@line 34169
  HEAP32[$4 >> 2] = 423; //@line 34170
  HEAP32[$4 + 4 >> 2] = 0; //@line 34172
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 34173
  HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 34174
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 34174
  $13 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($12, $2, $$byval_copy) | 0; //@line 34175
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 424; //@line 34178
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 34179
   HEAP32[$14 >> 2] = $4; //@line 34180
   $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 34181
   HEAP32[$15 >> 2] = $2; //@line 34182
   sp = STACKTOP; //@line 34183
   STACKTOP = sp; //@line 34184
   return;
  }
  HEAP32[___async_retval >> 2] = $13; //@line 34187
  ___async_unwind = 0; //@line 34188
  HEAP32[$ReallocAsyncCtx3 >> 2] = 424; //@line 34189
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 34190
  HEAP32[$14 >> 2] = $4; //@line 34191
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 34192
  HEAP32[$15 >> 2] = $2; //@line 34193
  sp = STACKTOP; //@line 34194
  STACKTOP = sp; //@line 34195
  return;
 }
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26305
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 26307
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26309
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26311
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26313
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26315
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26317
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26319
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26325
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26329
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 26331
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 26333
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 26335
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 26337
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 26339
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 26341
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 26343
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 26345
 _printf(10904, HEAP32[$0 + 32 >> 2] | 0) | 0; //@line 26346
 HEAP32[$20 >> 2] = 5; //@line 26347
 _printf(10970, $20) | 0; //@line 26348
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 26349
 _putchar(10) | 0; //@line 26350
 if (!___async) {
  ___async_unwind = 0; //@line 26353
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 94; //@line 26355
 HEAP16[$ReallocAsyncCtx6 + 4 >> 1] = $2; //@line 26357
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $6; //@line 26359
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $4; //@line 26361
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 26363
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 26365
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 26367
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 26369
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $24; //@line 26371
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $34; //@line 26373
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $36; //@line 26375
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $38; //@line 26377
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $40; //@line 26379
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 26381
 HEAP32[$ReallocAsyncCtx6 + 56 >> 2] = $28; //@line 26383
 HEAP32[$ReallocAsyncCtx6 + 60 >> 2] = $30; //@line 26385
 HEAP32[$ReallocAsyncCtx6 + 64 >> 2] = $32; //@line 26387
 sp = STACKTOP; //@line 26388
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16066
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 16072
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 16076
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 16077
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 16078
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 16079
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 806; //@line 16082
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 16084
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 16086
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 16088
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 16090
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 16092
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 16094
    sp = STACKTOP; //@line 16095
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16098
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 16102
    $$0 = $0 + 24 | 0; //@line 16103
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 16105
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 16106
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 16111
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 16117
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 16120
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 807; //@line 16125
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 16127
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 16129
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 16131
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 16133
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 16135
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 16137
    sp = STACKTOP; //@line 16138
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_430($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx30 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 30854
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30858
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30860
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30862
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30864
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30865
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 30869
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 30870
  FUNCTION_TABLE_vi[$13 & 1023]($4); //@line 30871
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 264; //@line 30874
   $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 30875
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 30876
   $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 30877
   HEAP32[$15 >> 2] = $6; //@line 30878
   $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 30879
   HEAP32[$16 >> 2] = $8; //@line 30880
   sp = STACKTOP; //@line 30881
   return;
  }
  ___async_unwind = 0; //@line 30884
  HEAP32[$ReallocAsyncCtx8 >> 2] = 264; //@line 30885
  $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 30886
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 30887
  $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 30888
  HEAP32[$15 >> 2] = $6; //@line 30889
  $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 30890
  HEAP32[$16 >> 2] = $8; //@line 30891
  sp = STACKTOP; //@line 30892
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$6 >> 2] = 6; //@line 30897
  HEAP32[___async_retval >> 2] = -1014; //@line 30899
  return;
 }
 $ReallocAsyncCtx30 = _emscripten_realloc_async_context(12) | 0; //@line 30902
 _mbed_assert_internal(12851, 11935, 1243); //@line 30903
 if (___async) {
  HEAP32[$ReallocAsyncCtx30 >> 2] = 265; //@line 30906
  $18 = $ReallocAsyncCtx30 + 4 | 0; //@line 30907
  HEAP32[$18 >> 2] = $6; //@line 30908
  $19 = $ReallocAsyncCtx30 + 8 | 0; //@line 30909
  HEAP32[$19 >> 2] = $8; //@line 30910
  sp = STACKTOP; //@line 30911
  return;
 }
 ___async_unwind = 0; //@line 30914
 HEAP32[$ReallocAsyncCtx30 >> 2] = 265; //@line 30915
 $18 = $ReallocAsyncCtx30 + 4 | 0; //@line 30916
 HEAP32[$18 >> 2] = $6; //@line 30917
 $19 = $ReallocAsyncCtx30 + 8 | 0; //@line 30918
 HEAP32[$19 >> 2] = $8; //@line 30919
 sp = STACKTOP; //@line 30920
 return;
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_46($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21957
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21959
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21961
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21963
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21965
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21967
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21969
 if (!$AsyncRetVal) {
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 11 >> 0] = 0; //@line 21974
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 10 >> 0] = 0; //@line 21977
  $18 = HEAP32[$4 + 956 >> 2] | 0; //@line 21979
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 16 >> 2] = $18; //@line 21982
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 21983
  $21 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 21984
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 559; //@line 21987
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 21988
   HEAP32[$22 >> 2] = $6; //@line 21989
   $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 21990
   HEAP32[$23 >> 2] = $10; //@line 21991
   $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 21992
   HEAP32[$24 >> 2] = $2; //@line 21993
   $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 21994
   HEAP32[$25 >> 2] = $4; //@line 21995
   $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 21996
   HEAP32[$26 >> 2] = $8; //@line 21997
   sp = STACKTOP; //@line 21998
   return;
  }
  HEAP32[___async_retval >> 2] = $21; //@line 22002
  ___async_unwind = 0; //@line 22003
  HEAP32[$ReallocAsyncCtx3 >> 2] = 559; //@line 22004
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 22005
  HEAP32[$22 >> 2] = $6; //@line 22006
  $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 22007
  HEAP32[$23 >> 2] = $10; //@line 22008
  $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 22009
  HEAP32[$24 >> 2] = $2; //@line 22010
  $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 22011
  HEAP32[$25 >> 2] = $4; //@line 22012
  $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 22013
  HEAP32[$26 >> 2] = $8; //@line 22014
  sp = STACKTOP; //@line 22015
  return;
 } else {
  HEAP8[$4 + 373 >> 0] = 0; //@line 22019
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 22021
  return;
 }
}
function _mbedtls_cipher_cmac_update__async_cb_401($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $42 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28203
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28205
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28207
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28209
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28211
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28213
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28215
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28217
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28219
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28221
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28223
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28225
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 28228
  $42 = ___async_retval; //@line 28229
  HEAP32[$42 >> 2] = $$0; //@line 28230
  return;
 }
 $24 = $2 + 1 | 0; //@line 28233
 if ($24 >>> 0 < $4 >>> 0) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 28236
  $22 = _mbedtls_cipher_update($8, $10, 0, $10, $12) | 0; //@line 28237
  if (!___async) {
   HEAP32[___async_retval >> 2] = $22; //@line 28241
   ___async_unwind = 0; //@line 28242
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 686; //@line 28244
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $24; //@line 28246
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 28248
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 28250
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 28252
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 28254
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 28256
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 28258
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 28260
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 28262
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 28264
  sp = STACKTOP; //@line 28265
  return;
 }
 if (!$14) {
  $$0 = 0; //@line 28270
  $42 = ___async_retval; //@line 28271
  HEAP32[$42 >> 2] = $$0; //@line 28272
  return;
 }
 _memcpy((HEAP32[$18 >> 2] | 0) + ($20 + 16) | 0, $16 | 0, $14 | 0) | 0; //@line 28277
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + $14; //@line 28280
 $$0 = 0; //@line 28281
 $42 = ___async_retval; //@line 28282
 HEAP32[$42 >> 2] = $$0; //@line 28283
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_103($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26997
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26999
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27001
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27003
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27005
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27007
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27009
 $13 = $2 + 946 | 0; //@line 27011
 HEAP16[$13 >> 1] = $AsyncRetVal; //@line 27012
 $15 = HEAP16[$4 >> 1] | 0; //@line 27014
 HEAP16[$4 >> 1] = $15 + 1 << 16 >> 16; //@line 27016
 HEAP8[($15 & 65535) + ($2 + 381) >> 0] = $AsyncRetVal; //@line 27019
 $21 = (HEAPU16[$13 >> 1] | 0) >>> 8 & 255; //@line 27022
 $22 = HEAP16[$4 >> 1] | 0; //@line 27023
 HEAP16[$4 >> 1] = $22 + 1 << 16 >> 16; //@line 27025
 HEAP8[($22 & 65535) + ($2 + 381) >> 0] = $21; //@line 27028
 $27 = HEAP16[$4 >> 1] & 255; //@line 27030
 $29 = HEAP32[$2 + 908 >> 2] | 0; //@line 27032
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 27033
 $30 = __Z22compute_join_frame_micPKhtS0_Pj($6, $27, $29, $8) | 0; //@line 27034
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 500; //@line 27037
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 27038
  HEAP32[$31 >> 2] = $8; //@line 27039
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 27040
  HEAP32[$32 >> 2] = $4; //@line 27041
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 27042
  HEAP32[$33 >> 2] = $2; //@line 27043
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 27044
  HEAP32[$34 >> 2] = $10; //@line 27045
  sp = STACKTOP; //@line 27046
  return;
 }
 HEAP32[___async_retval >> 2] = $30; //@line 27050
 ___async_unwind = 0; //@line 27051
 HEAP32[$ReallocAsyncCtx2 >> 2] = 500; //@line 27052
 $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 27053
 HEAP32[$31 >> 2] = $8; //@line 27054
 $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 27055
 HEAP32[$32 >> 2] = $4; //@line 27056
 $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 27057
 HEAP32[$33 >> 2] = $2; //@line 27058
 $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 27059
 HEAP32[$34 >> 2] = $10; //@line 27060
 sp = STACKTOP; //@line 27061
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_53($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22647
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22651
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22653
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22655
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22657
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22658
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 22662
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 22663
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 22664
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 416; //@line 22667
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 22668
   HEAP32[$14 >> 2] = $4; //@line 22669
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 22670
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 22671
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 22672
   HEAP32[$16 >> 2] = $8; //@line 22673
   sp = STACKTOP; //@line 22674
   return;
  }
  ___async_unwind = 0; //@line 22677
  HEAP32[$ReallocAsyncCtx4 >> 2] = 416; //@line 22678
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 22679
  HEAP32[$14 >> 2] = $4; //@line 22680
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 22681
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 22682
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 22683
  HEAP32[$16 >> 2] = $8; //@line 22684
  sp = STACKTOP; //@line 22685
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 22688
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 22692
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 22696
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 22697
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 22698
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 417; //@line 22701
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 22702
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 22703
  sp = STACKTOP; //@line 22704
  return;
 }
 ___async_unwind = 0; //@line 22707
 HEAP32[$ReallocAsyncCtx5 >> 2] = 417; //@line 22708
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 22709
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 22710
 sp = STACKTOP; //@line 22711
 return;
}
function __ZN16LoRaWANInterface4sendEhPKhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $10 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 5884
 STACKTOP = STACKTOP + 16 | 0; //@line 5885
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5885
 $vararg_buffer1 = sp + 8 | 0; //@line 5886
 $vararg_buffer = sp; //@line 5887
 do {
  if (HEAP8[$0 + 4 >> 0] | 0) {
   $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 5895
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 5896
   FUNCTION_TABLE_ii[$10 & 15]($0) | 0; //@line 5897
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 186; //@line 5900
    HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 5902
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 5904
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 5906
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 5908
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 5910
    HEAP32[$AsyncCtx + 24 >> 2] = $4; //@line 5912
    HEAP8[$AsyncCtx + 28 >> 0] = $1; //@line 5914
    HEAP16[$AsyncCtx + 30 >> 1] = $3; //@line 5916
    sp = STACKTOP; //@line 5917
    STACKTOP = sp; //@line 5918
    return 0; //@line 5918
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5920
    break;
   }
  }
 } while (0);
 _printf(11836, $vararg_buffer) | 0; //@line 5925
 _printf(11849, $vararg_buffer1) | 0; //@line 5926
 $AsyncCtx5 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5927
 _putchar(10) | 0; //@line 5928
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 187; //@line 5931
  HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 5933
  HEAP32[$AsyncCtx5 + 8 >> 2] = $4; //@line 5935
  HEAP8[$AsyncCtx5 + 12 >> 0] = $1; //@line 5937
  HEAP16[$AsyncCtx5 + 14 >> 1] = $3; //@line 5939
  sp = STACKTOP; //@line 5940
  STACKTOP = sp; //@line 5941
  return 0; //@line 5941
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 5943
 if (!$2) {
  $$0 = -1003; //@line 5946
  STACKTOP = sp; //@line 5947
  return $$0 | 0; //@line 5947
 }
 $$0 = __ZN12LoRaWANStack9handle_txEhPKhth(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1, $2, $3, $4 & 255) | 0; //@line 5952
 STACKTOP = sp; //@line 5953
 return $$0 | 0; //@line 5953
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_400($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27995
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27999
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28001
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28003
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28005
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28006
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 28010
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 28011
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 28012
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 277; //@line 28015
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 28016
   HEAP32[$14 >> 2] = $4; //@line 28017
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 28018
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 28019
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 28020
   HEAP32[$16 >> 2] = $8; //@line 28021
   sp = STACKTOP; //@line 28022
   return;
  }
  ___async_unwind = 0; //@line 28025
  HEAP32[$ReallocAsyncCtx4 >> 2] = 277; //@line 28026
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 28027
  HEAP32[$14 >> 2] = $4; //@line 28028
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 28029
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 28030
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 28031
  HEAP32[$16 >> 2] = $8; //@line 28032
  sp = STACKTOP; //@line 28033
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 28036
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 28040
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 28044
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 28045
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 28046
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 28049
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 28050
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 28051
  sp = STACKTOP; //@line 28052
  return;
 }
 ___async_unwind = 0; //@line 28055
 HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 28056
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 28057
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 28058
 sp = STACKTOP; //@line 28059
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_80($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24853
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24857
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24859
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24861
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24863
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24864
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 24868
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 24869
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 24870
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 285; //@line 24873
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 24874
   HEAP32[$14 >> 2] = $4; //@line 24875
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 24876
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 24877
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 24878
   HEAP32[$16 >> 2] = $8; //@line 24879
   sp = STACKTOP; //@line 24880
   return;
  }
  ___async_unwind = 0; //@line 24883
  HEAP32[$ReallocAsyncCtx4 >> 2] = 285; //@line 24884
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 24885
  HEAP32[$14 >> 2] = $4; //@line 24886
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 24887
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 24888
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 24889
  HEAP32[$16 >> 2] = $8; //@line 24890
  sp = STACKTOP; //@line 24891
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 24894
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 24898
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 24902
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 24903
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 24904
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 286; //@line 24907
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 24908
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 24909
  sp = STACKTOP; //@line 24910
  return;
 }
 ___async_unwind = 0; //@line 24913
 HEAP32[$ReallocAsyncCtx5 >> 2] = 286; //@line 24914
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 24915
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 24916
 sp = STACKTOP; //@line 24917
 return;
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 10922
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 10925
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 10928
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 10931
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 10937
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 10946
     $24 = $13 >>> 2; //@line 10947
     $$090 = 0; //@line 10948
     $$094 = $7; //@line 10948
     while (1) {
      $25 = $$094 >>> 1; //@line 10950
      $26 = $$090 + $25 | 0; //@line 10951
      $27 = $26 << 1; //@line 10952
      $28 = $27 + $23 | 0; //@line 10953
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 10956
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 10960
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 10966
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 10974
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 10978
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 10984
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 10989
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 10992
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 10992
      }
     }
     $46 = $27 + $24 | 0; //@line 10995
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 10998
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 11002
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 11014
     } else {
      $$4 = 0; //@line 11016
     }
    } else {
     $$4 = 0; //@line 11019
    }
   } else {
    $$4 = 0; //@line 11022
   }
  } else {
   $$4 = 0; //@line 11025
  }
 } while (0);
 return $$4 | 0; //@line 11028
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_258($0) {
 $0 = $0 | 0;
 var $14 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $33 = 0, $37 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 12019
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12021
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12023
 $7 = (HEAP8[$2 + 373 >> 0] | 0) != 0; //@line 12029
 if (!(HEAP32[$2 + 364 >> 2] | 0)) {
  if ($7) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 3; //@line 12035
  }
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 3; //@line 12040
  $14 = $2 + 356 | 0; //@line 12041
  $18 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$14 >> 2] | 0, HEAP32[$2 + 980 >> 2] | 0) | 0; //@line 12045
  if ($18 >>> 0 >= (HEAP32[$2 + 976 >> 2] | 0) >>> 0) {
   $22 = HEAP32[$14 >> 2] | 0; //@line 12050
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 12052
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($22, $2 + 1056 | 0); //@line 12053
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 446; //@line 12056
    $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 12057
    HEAP32[$24 >> 2] = $2; //@line 12058
    sp = STACKTOP; //@line 12059
    return;
   }
   ___async_unwind = 0; //@line 12062
   HEAP32[$ReallocAsyncCtx6 >> 2] = 446; //@line 12063
   $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 12064
   HEAP32[$24 >> 2] = $2; //@line 12065
   sp = STACKTOP; //@line 12066
   return;
  }
 } else {
  if ($7) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 12074
  }
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 12079
  if ((HEAP32[$4 >> 2] | 0) != 2) {
   $33 = $2 + 944 | 0; //@line 12083
   HEAP8[$33 >> 0] = HEAP8[$33 >> 0] | 32; //@line 12086
  }
 }
 $37 = HEAP32[$2 + 356 >> 2] | 0; //@line 12090
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 12092
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($37, $2 + 996 | 0, 1); //@line 12093
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 447; //@line 12096
  sp = STACKTOP; //@line 12097
  return;
 }
 ___async_unwind = 0; //@line 12100
 HEAP32[$ReallocAsyncCtx3 >> 2] = 447; //@line 12101
 sp = STACKTOP; //@line 12102
 return;
}
function __ZN12LoRaWANStack9handle_rxEhPhth($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$off0 = 0, $$021 = 0, $$1 = 0, $$pre$phi25Z2D = 0, $12 = 0, $13 = 0, $15 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $27 = 0, $28 = 0, $32 = 0, $8 = 0, label = 0;
 if (!(HEAP8[$0 + 1932 >> 0] | 0)) {
  $$1 = -1017; //@line 10593
  return $$1 | 0; //@line 10594
 }
 $8 = $0 + 2236 | 0; //@line 10596
 if (!(HEAP8[$8 >> 0] | 0)) {
  $$1 = -1001; //@line 10600
  return $$1 | 0; //@line 10601
 }
 if (!$2) {
  $$1 = -1003; //@line 10605
  return $$1 | 0; //@line 10606
 }
 $12 = $0 + 2256 | 0; //@line 10608
 $13 = HEAP32[$12 >> 2] | 0; //@line 10609
 $15 = HEAP16[$0 + 2260 >> 1] | 0; //@line 10611
 if ((HEAP8[$0 + 2253 >> 0] | 0) != $1 << 24 >> 24) {
  $$1 = -1001; //@line 10616
  return $$1 | 0; //@line 10617
 }
 $19 = $15 & 65535; //@line 10619
 $20 = $3 & 65535; //@line 10620
 $22 = $0 + 2282 | 0; //@line 10622
 $24 = (HEAP16[$22 >> 1] | 0) == 0; //@line 10624
 if (($15 & 65535) > ($3 & 65535)) {
  if ($24) {
   $27 = $0 + 2280 | 0; //@line 10629
   HEAP16[$27 >> 1] = $19 - $20; //@line 10630
   HEAP16[$22 >> 1] = $3; //@line 10631
   _memcpy($2 | 0, $13 | 0, $20 | 0) | 0; //@line 10632
   $$0$off0 = 0; //@line 10633
   $$021 = $3; //@line 10633
   $$pre$phi25Z2D = $27; //@line 10633
  } else {
   label = 9; //@line 10635
  }
 } else {
  if ($24) {
   $28 = $0 + 2280 | 0; //@line 10639
   HEAP16[$28 >> 1] = 0; //@line 10640
   HEAP16[$22 >> 1] = 0; //@line 10641
   _memcpy($2 | 0, $13 | 0, $19 | 0) | 0; //@line 10642
   $$0$off0 = 1; //@line 10643
   $$021 = $15; //@line 10643
   $$pre$phi25Z2D = $28; //@line 10643
  } else {
   label = 9; //@line 10645
  }
 }
 if ((label | 0) == 9) {
  $$0$off0 = 0; //@line 10650
  $$021 = $15; //@line 10650
  $$pre$phi25Z2D = $0 + 2280 | 0; //@line 10650
 }
 if (HEAP16[$$pre$phi25Z2D >> 1] | 0) {
  $32 = HEAP16[$0 + 2282 >> 1] | 0; //@line 10656
  if ($32 << 16 >> 16) {
   _memcpy($2 | 0, $13 + ($32 & 65535) | 0, $$021 & 65535 | 0) | 0; //@line 10662
  }
 }
 if (!$$0$off0) {
  $$1 = $$021; //@line 10666
  return $$1 | 0; //@line 10667
 }
 _memset(HEAP32[$12 >> 2] | 0, 0, 255) | 0; //@line 10670
 HEAP8[$8 >> 0] = 0; //@line 10671
 $$1 = $$021; //@line 10672
 return $$1 | 0; //@line 10673
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16875
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16877
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16879
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16881
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16883
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16885
 $11 = HEAP32[$2 >> 2] | 0; //@line 16886
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 16890
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 16891
  FUNCTION_TABLE_vii[$14 & 31]($6, $8); //@line 16892
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 144; //@line 16895
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 16896
   HEAP32[$15 >> 2] = $2; //@line 16897
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 16898
   HEAP32[$16 >> 2] = $4; //@line 16899
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 16900
   HEAP32[$17 >> 2] = $10; //@line 16901
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 16902
   HEAP32[$18 >> 2] = $8; //@line 16903
   sp = STACKTOP; //@line 16904
   return;
  }
  ___async_unwind = 0; //@line 16907
  HEAP32[$ReallocAsyncCtx2 >> 2] = 144; //@line 16908
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 16909
  HEAP32[$15 >> 2] = $2; //@line 16910
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 16911
  HEAP32[$16 >> 2] = $4; //@line 16912
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 16913
  HEAP32[$17 >> 2] = $10; //@line 16914
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 16915
  HEAP32[$18 >> 2] = $8; //@line 16916
  sp = STACKTOP; //@line 16917
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 16920
 __ZN4mbed6Ticker5setupEy($10, 1e5, 0); //@line 16921
 $19 = HEAP32[$2 >> 2] | 0; //@line 16922
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 16928
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 16929
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 16930
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 145; //@line 16933
  sp = STACKTOP; //@line 16934
  return;
 }
 ___async_unwind = 0; //@line 16937
 HEAP32[$ReallocAsyncCtx3 >> 2] = 145; //@line 16938
 sp = STACKTOP; //@line 16939
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 36074
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36076
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36078
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36080
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36082
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36084
 $11 = HEAP32[$2 >> 2] | 0; //@line 36085
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 36089
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 36090
  FUNCTION_TABLE_vii[$14 & 31]($6, $8); //@line 36091
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 71; //@line 36094
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 36095
   HEAP32[$15 >> 2] = $2; //@line 36096
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 36097
   HEAP32[$16 >> 2] = $4; //@line 36098
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 36099
   HEAP32[$17 >> 2] = $10; //@line 36100
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 36101
   HEAP32[$18 >> 2] = $8; //@line 36102
   sp = STACKTOP; //@line 36103
   return;
  }
  ___async_unwind = 0; //@line 36106
  HEAP32[$ReallocAsyncCtx2 >> 2] = 71; //@line 36107
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 36108
  HEAP32[$15 >> 2] = $2; //@line 36109
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 36110
  HEAP32[$16 >> 2] = $4; //@line 36111
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 36112
  HEAP32[$17 >> 2] = $10; //@line 36113
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 36114
  HEAP32[$18 >> 2] = $8; //@line 36115
  sp = STACKTOP; //@line 36116
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 36119
 __ZN4mbed6Ticker5setupEy($10, 2e5, 0); //@line 36120
 $19 = HEAP32[$2 >> 2] | 0; //@line 36121
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 36127
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 36128
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 36129
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 72; //@line 36132
  sp = STACKTOP; //@line 36133
  return;
 }
 ___async_unwind = 0; //@line 36136
 HEAP32[$ReallocAsyncCtx3 >> 2] = 72; //@line 36137
 sp = STACKTOP; //@line 36138
 return;
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14376
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 14381
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 14386
  } else {
   $20 = $0 & 255; //@line 14388
   $21 = $0 & 255; //@line 14389
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 14395
   } else {
    $26 = $1 + 20 | 0; //@line 14397
    $27 = HEAP32[$26 >> 2] | 0; //@line 14398
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 14404
     HEAP8[$27 >> 0] = $20; //@line 14405
     $34 = $21; //@line 14406
    } else {
     label = 12; //@line 14408
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14413
     $32 = ___overflow($1, $0) | 0; //@line 14414
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 783; //@line 14417
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 14419
      sp = STACKTOP; //@line 14420
      return 0; //@line 14421
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 14423
      $34 = $32; //@line 14424
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 14429
   $$0 = $34; //@line 14430
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 14435
   $8 = $0 & 255; //@line 14436
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 14442
    $14 = HEAP32[$13 >> 2] | 0; //@line 14443
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 14449
     HEAP8[$14 >> 0] = $7; //@line 14450
     $$0 = $8; //@line 14451
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14455
   $19 = ___overflow($1, $0) | 0; //@line 14456
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 782; //@line 14459
    sp = STACKTOP; //@line 14460
    return 0; //@line 14461
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14463
    $$0 = $19; //@line 14464
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 14469
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10587
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 10592
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 10597
  } else {
   $20 = $0 & 255; //@line 10599
   $21 = $0 & 255; //@line 10600
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 10606
   } else {
    $26 = $1 + 20 | 0; //@line 10608
    $27 = HEAP32[$26 >> 2] | 0; //@line 10609
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 10615
     HEAP8[$27 >> 0] = $20; //@line 10616
     $34 = $21; //@line 10617
    } else {
     label = 12; //@line 10619
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10624
     $32 = ___overflow($1, $0) | 0; //@line 10625
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 768; //@line 10628
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 10630
      sp = STACKTOP; //@line 10631
      return 0; //@line 10632
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 10634
      $34 = $32; //@line 10635
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 10640
   $$0 = $34; //@line 10641
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 10646
   $8 = $0 & 255; //@line 10647
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 10653
    $14 = HEAP32[$13 >> 2] | 0; //@line 10654
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 10660
     HEAP8[$14 >> 0] = $7; //@line 10661
     $$0 = $8; //@line 10662
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10666
   $19 = ___overflow($1, $0) | 0; //@line 10667
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 767; //@line 10670
    sp = STACKTOP; //@line 10671
    return 0; //@line 10672
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10674
    $$0 = $19; //@line 10675
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 10680
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11193
 $1 = $0 + 20 | 0; //@line 11194
 $3 = $0 + 28 | 0; //@line 11196
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 11202
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11203
   FUNCTION_TABLE_iiii[$7 & 15]($0, 0, 0) | 0; //@line 11204
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 774; //@line 11207
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11209
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 11211
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 11213
    sp = STACKTOP; //@line 11214
    return 0; //@line 11215
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11217
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 11221
     break;
    } else {
     label = 5; //@line 11224
     break;
    }
   }
  } else {
   label = 5; //@line 11229
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 11233
  $14 = HEAP32[$13 >> 2] | 0; //@line 11234
  $15 = $0 + 8 | 0; //@line 11235
  $16 = HEAP32[$15 >> 2] | 0; //@line 11236
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 11244
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11245
    FUNCTION_TABLE_iiii[$22 & 15]($0, $14 - $16 | 0, 1) | 0; //@line 11246
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 775; //@line 11249
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 11251
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 11253
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 11255
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 11257
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 11259
     sp = STACKTOP; //@line 11260
     return 0; //@line 11261
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11263
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 11269
  HEAP32[$3 >> 2] = 0; //@line 11270
  HEAP32[$1 >> 2] = 0; //@line 11271
  HEAP32[$15 >> 2] = 0; //@line 11272
  HEAP32[$13 >> 2] = 0; //@line 11273
  $$0 = 0; //@line 11274
 }
 return $$0 | 0; //@line 11276
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_384($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 26555
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 26557
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26559
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26561
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26563
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26565
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26567
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26569
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26571
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26573
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26575
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26577
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26579
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 26581
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 26583
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 26585
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 26587
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 26588
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($6); //@line 26589
 if (!___async) {
  ___async_unwind = 0; //@line 26592
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 95; //@line 26594
 HEAP16[$ReallocAsyncCtx9 + 4 >> 1] = $2; //@line 26596
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 26598
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $6; //@line 26600
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $8; //@line 26602
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $10; //@line 26604
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $12; //@line 26606
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $14; //@line 26608
 HEAP32[$ReallocAsyncCtx9 + 32 >> 2] = $16; //@line 26610
 HEAP32[$ReallocAsyncCtx9 + 36 >> 2] = $18; //@line 26612
 HEAP32[$ReallocAsyncCtx9 + 40 >> 2] = $20; //@line 26614
 HEAP32[$ReallocAsyncCtx9 + 44 >> 2] = $22; //@line 26616
 HEAP32[$ReallocAsyncCtx9 + 48 >> 2] = $24; //@line 26618
 HEAP32[$ReallocAsyncCtx9 + 52 >> 2] = $26; //@line 26620
 HEAP32[$ReallocAsyncCtx9 + 56 >> 2] = $28; //@line 26622
 HEAP32[$ReallocAsyncCtx9 + 60 >> 2] = $30; //@line 26624
 HEAP32[$ReallocAsyncCtx9 + 64 >> 2] = $32; //@line 26626
 sp = STACKTOP; //@line 26627
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_169($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 32947
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32949
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32951
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32953
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32955
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32957
 $11 = HEAP32[$2 >> 2] | 0; //@line 32958
 $13 = $8 + 12 | 0; //@line 32960
 HEAP32[$8 >> 2] = 529; //@line 32961
 HEAP32[$8 + 4 >> 2] = 0; //@line 32963
 HEAP32[$8 + 8 >> 2] = $4; //@line 32965
 HEAP32[$13 >> 2] = 848; //@line 32966
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(28) | 0; //@line 32967
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($11, $4 + 1036 | 0, $8); //@line 32968
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 530; //@line 32971
  $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 32972
  HEAP32[$14 >> 2] = $2; //@line 32973
  $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 32974
  HEAP32[$15 >> 2] = $4; //@line 32975
  $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 32976
  HEAP32[$16 >> 2] = $10; //@line 32977
  $17 = $ReallocAsyncCtx8 + 16 | 0; //@line 32978
  HEAP32[$17 >> 2] = $6; //@line 32979
  $18 = $ReallocAsyncCtx8 + 20 | 0; //@line 32980
  HEAP32[$18 >> 2] = $13; //@line 32981
  $19 = $ReallocAsyncCtx8 + 24 | 0; //@line 32982
  HEAP32[$19 >> 2] = $8; //@line 32983
  sp = STACKTOP; //@line 32984
  return;
 }
 ___async_unwind = 0; //@line 32987
 HEAP32[$ReallocAsyncCtx8 >> 2] = 530; //@line 32988
 $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 32989
 HEAP32[$14 >> 2] = $2; //@line 32990
 $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 32991
 HEAP32[$15 >> 2] = $4; //@line 32992
 $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 32993
 HEAP32[$16 >> 2] = $10; //@line 32994
 $17 = $ReallocAsyncCtx8 + 16 | 0; //@line 32995
 HEAP32[$17 >> 2] = $6; //@line 32996
 $18 = $ReallocAsyncCtx8 + 20 | 0; //@line 32997
 HEAP32[$18 >> 2] = $13; //@line 32998
 $19 = $ReallocAsyncCtx8 + 24 | 0; //@line 32999
 HEAP32[$19 >> 2] = $8; //@line 33000
 sp = STACKTOP; //@line 33001
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_68($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23667
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23671
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23673
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23675
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23679
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23683
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23685
 L2 : do {
  if (!$AsyncRetVal) {
   if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 2) {
    switch (HEAP32[$4 >> 2] | 0) {
    case 0:
     {
      break;
     }
    case 10:
     {
      if (!(HEAP8[$16 + 372 >> 0] | 0)) {
       break L2;
      }
      break;
     }
    default:
     {
      break L2;
     }
    }
    _printf(12967, $8) | 0; //@line 23710
    _printf(12994, $12) | 0; //@line 23711
    $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 23712
    _putchar(10) | 0; //@line 23713
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 563; //@line 23716
     $25 = $ReallocAsyncCtx + 4 | 0; //@line 23717
     HEAP32[$25 >> 2] = $16; //@line 23718
     $26 = $ReallocAsyncCtx + 8 | 0; //@line 23719
     HEAP32[$26 >> 2] = $6; //@line 23720
     $27 = $ReallocAsyncCtx + 12 | 0; //@line 23721
     HEAP32[$27 >> 2] = $6; //@line 23722
     $28 = $ReallocAsyncCtx + 16 | 0; //@line 23723
     HEAP32[$28 >> 2] = $AsyncRetVal; //@line 23724
     sp = STACKTOP; //@line 23725
     return;
    }
    ___async_unwind = 0; //@line 23728
    HEAP32[$ReallocAsyncCtx >> 2] = 563; //@line 23729
    $25 = $ReallocAsyncCtx + 4 | 0; //@line 23730
    HEAP32[$25 >> 2] = $16; //@line 23731
    $26 = $ReallocAsyncCtx + 8 | 0; //@line 23732
    HEAP32[$26 >> 2] = $6; //@line 23733
    $27 = $ReallocAsyncCtx + 12 | 0; //@line 23734
    HEAP32[$27 >> 2] = $6; //@line 23735
    $28 = $ReallocAsyncCtx + 16 | 0; //@line 23736
    HEAP32[$28 >> 2] = $AsyncRetVal; //@line 23737
    sp = STACKTOP; //@line 23738
    return;
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 23744
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $17 = 0, $20 = 0, $3 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26072
 $3 = $0 + 4 | 0; //@line 26073
 $4 = HEAP32[$3 >> 2] | 0; //@line 26074
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0; //@line 26077
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 26078
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 26079
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 648; //@line 26082
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 26084
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 26087
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 26089
  sp = STACKTOP; //@line 26090
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 26093
 $11 = HEAP32[$3 >> 2] | 0; //@line 26094
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 28 >> 2] | 0; //@line 26097
 do {
  if ($1) {
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 26100
   FUNCTION_TABLE_vii[$14 & 31]($11, 0); //@line 26101
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 650; //@line 26104
    HEAP32[$AsyncCtx7 + 4 >> 2] = $3; //@line 26106
    sp = STACKTOP; //@line 26107
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 26110
    break;
   }
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 26114
   FUNCTION_TABLE_vii[$14 & 31]($11, $2); //@line 26115
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 649; //@line 26118
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 26120
    sp = STACKTOP; //@line 26121
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 26124
    break;
   }
  }
 } while (0);
 $17 = HEAP32[$3 >> 2] | 0; //@line 26129
 $20 = HEAP32[(HEAP32[$17 >> 2] | 0) + 76 >> 2] | 0; //@line 26132
 $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 26133
 FUNCTION_TABLE_vi[$20 & 1023]($17); //@line 26134
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 651; //@line 26137
  sp = STACKTOP; //@line 26138
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 26141
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_425($0) {
 $0 = $0 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30617
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30619
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30621
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30623
 HEAP8[$2 + 1964 >> 0] = 0; //@line 30626
 HEAP32[$2 + 2256 >> 2] = 0; //@line 30628
 HEAP8[$2 + 2236 >> 0] = 0; //@line 30630
 HEAP16[$2 + 2282 >> 1] = 0; //@line 30632
 HEAP16[$2 + 2260 >> 1] = 0; //@line 30634
 HEAP8[$2 + 1932 >> 0] = 0; //@line 30636
 $14 = $2 + 1892 | 0; //@line 30637
 _memset($2 + 1975 | 0, 0, 259) | 0; //@line 30638
 $15 = HEAP32[$14 >> 2] | 0; //@line 30639
 if (!$15) {
  HEAP32[___async_retval >> 2] = -1011; //@line 30643
  return;
 }
 $19 = HEAP32[$2 + 2288 >> 2] | 0; //@line 30648
 $21 = HEAP32[$15 + 4 >> 2] | 0; //@line 30650
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 30651
 FUNCTION_TABLE_vii[$21 & 31]($6, $2 + 1880 | 0); //@line 30652
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 242; //@line 30655
  $22 = $ReallocAsyncCtx + 4 | 0; //@line 30656
  HEAP32[$22 >> 2] = $14; //@line 30657
  $23 = $ReallocAsyncCtx + 8 | 0; //@line 30658
  HEAP32[$23 >> 2] = $6; //@line 30659
  $24 = $ReallocAsyncCtx + 12 | 0; //@line 30660
  HEAP32[$24 >> 2] = $19; //@line 30661
  $25 = $ReallocAsyncCtx + 16 | 0; //@line 30662
  HEAP32[$25 >> 2] = $6; //@line 30663
  $26 = $ReallocAsyncCtx + 20 | 0; //@line 30664
  HEAP32[$26 >> 2] = $4; //@line 30665
  sp = STACKTOP; //@line 30666
  return;
 }
 ___async_unwind = 0; //@line 30669
 HEAP32[$ReallocAsyncCtx >> 2] = 242; //@line 30670
 $22 = $ReallocAsyncCtx + 4 | 0; //@line 30671
 HEAP32[$22 >> 2] = $14; //@line 30672
 $23 = $ReallocAsyncCtx + 8 | 0; //@line 30673
 HEAP32[$23 >> 2] = $6; //@line 30674
 $24 = $ReallocAsyncCtx + 12 | 0; //@line 30675
 HEAP32[$24 >> 2] = $19; //@line 30676
 $25 = $ReallocAsyncCtx + 16 | 0; //@line 30677
 HEAP32[$25 >> 2] = $6; //@line 30678
 $26 = $ReallocAsyncCtx + 20 | 0; //@line 30679
 HEAP32[$26 >> 2] = $4; //@line 30680
 sp = STACKTOP; //@line 30681
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_290($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 13492
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13494
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13496
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13500
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13504
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13506
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13508
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 13511
  __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 13512
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 13515
   $17 = $ReallocAsyncCtx5 + 4 | 0; //@line 13516
   HEAP32[$17 >> 2] = $12; //@line 13517
   $18 = $ReallocAsyncCtx5 + 8 | 0; //@line 13518
   HEAP32[$18 >> 2] = $14; //@line 13519
   sp = STACKTOP; //@line 13520
   return;
  }
  ___async_unwind = 0; //@line 13523
  HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 13524
  $17 = $ReallocAsyncCtx5 + 4 | 0; //@line 13525
  HEAP32[$17 >> 2] = $12; //@line 13526
  $18 = $ReallocAsyncCtx5 + 8 | 0; //@line 13527
  HEAP32[$18 >> 2] = $14; //@line 13528
  sp = STACKTOP; //@line 13529
  return;
 } else {
  _printf(13393, $4) | 0; //@line 13532
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 13533
  _printf(13406, $8) | 0; //@line 13534
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 13535
  _putchar(10) | 0; //@line 13536
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 485; //@line 13539
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 13540
   HEAP32[$19 >> 2] = $12; //@line 13541
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 13542
   HEAP32[$20 >> 2] = $14; //@line 13543
   sp = STACKTOP; //@line 13544
   return;
  }
  ___async_unwind = 0; //@line 13547
  HEAP32[$ReallocAsyncCtx2 >> 2] = 485; //@line 13548
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 13549
  HEAP32[$19 >> 2] = $12; //@line 13550
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 13551
  HEAP32[$20 >> 2] = $14; //@line 13552
  sp = STACKTOP; //@line 13553
  return;
 }
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_259($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $24 = 0, $28 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12109
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12111
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12113
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12115
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 12120
  _mbed_assert_internal(12851, 12860, 217); //@line 12121
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 444; //@line 12124
   $9 = $ReallocAsyncCtx7 + 4 | 0; //@line 12125
   HEAP32[$9 >> 2] = $2; //@line 12126
   $10 = $ReallocAsyncCtx7 + 8 | 0; //@line 12127
   HEAP32[$10 >> 2] = $4; //@line 12128
   $11 = $ReallocAsyncCtx7 + 12 | 0; //@line 12129
   HEAP32[$11 >> 2] = $6; //@line 12130
   sp = STACKTOP; //@line 12131
   return;
  }
  ___async_unwind = 0; //@line 12134
  HEAP32[$ReallocAsyncCtx7 >> 2] = 444; //@line 12135
  $9 = $ReallocAsyncCtx7 + 4 | 0; //@line 12136
  HEAP32[$9 >> 2] = $2; //@line 12137
  $10 = $ReallocAsyncCtx7 + 8 | 0; //@line 12138
  HEAP32[$10 >> 2] = $4; //@line 12139
  $11 = $ReallocAsyncCtx7 + 12 | 0; //@line 12140
  HEAP32[$11 >> 2] = $6; //@line 12141
  sp = STACKTOP; //@line 12142
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 12146
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 12154
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 12159
 if ((HEAP32[$6 >> 2] | 0) != 2) {
  $24 = $4 + 944 | 0; //@line 12163
  HEAP8[$24 >> 0] = HEAP8[$24 >> 0] | 32; //@line 12166
 }
 $28 = HEAP32[$4 + 356 >> 2] | 0; //@line 12169
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 12171
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($28, $4 + 996 | 0, 1); //@line 12172
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 447; //@line 12175
  sp = STACKTOP; //@line 12176
  return;
 }
 ___async_unwind = 0; //@line 12179
 HEAP32[$ReallocAsyncCtx3 >> 2] = 447; //@line 12180
 sp = STACKTOP; //@line 12181
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $12 = 0, $15 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11911
 STACKTOP = STACKTOP + 16 | 0; //@line 11912
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11912
 $5 = sp; //@line 11913
 $7 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11915
 $8 = $5 + 12 | 0; //@line 11916
 HEAP32[$5 >> 2] = 6; //@line 11917
 HEAP32[$5 + 4 >> 2] = 0; //@line 11919
 HEAP32[$5 + 8 >> 2] = $0; //@line 11921
 HEAP32[$8 >> 2] = 860; //@line 11922
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11923
 $9 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3_($7, $5, $1, $2, $3, $4) | 0; //@line 11924
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 383; //@line 11927
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 11929
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 11931
  sp = STACKTOP; //@line 11932
  STACKTOP = sp; //@line 11933
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11935
 $12 = HEAP32[$8 >> 2] | 0; //@line 11936
 do {
  if ($12 | 0) {
   $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 11941
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 11942
   FUNCTION_TABLE_vi[$15 & 1023]($5); //@line 11943
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 384; //@line 11946
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 11948
    HEAP32[$AsyncCtx + 8 >> 2] = $9; //@line 11950
    sp = STACKTOP; //@line 11951
    STACKTOP = sp; //@line 11952
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11954
    break;
   }
  }
 } while (0);
 if ($9 | 0) {
  STACKTOP = sp; //@line 11961
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11963
 _mbed_assert_internal(12851, 12860, 141); //@line 11964
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 385; //@line 11967
  sp = STACKTOP; //@line 11968
  STACKTOP = sp; //@line 11969
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11971
 STACKTOP = sp; //@line 11972
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_417($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29844
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29846
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29848
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29850
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29852
 $9 = $2 + 1892 | 0; //@line 29853
 $10 = HEAP32[$9 >> 2] | 0; //@line 29854
 if (!$10) {
  HEAP32[$4 >> 2] = 6; //@line 29857
  HEAP32[___async_retval >> 2] = -1014; //@line 29859
  return;
 }
 $14 = HEAP32[$2 + 2288 >> 2] | 0; //@line 29864
 $16 = HEAP32[$10 + 4 >> 2] | 0; //@line 29866
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(28) | 0; //@line 29867
 FUNCTION_TABLE_vii[$16 & 31]($6, $2 + 1880 | 0); //@line 29868
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 262; //@line 29871
  $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 29872
  HEAP32[$17 >> 2] = $9; //@line 29873
  $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 29874
  HEAP32[$18 >> 2] = $6; //@line 29875
  $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 29876
  HEAP32[$19 >> 2] = $14; //@line 29877
  $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 29878
  HEAP32[$20 >> 2] = $6; //@line 29879
  $21 = $ReallocAsyncCtx7 + 20 | 0; //@line 29880
  HEAP32[$21 >> 2] = $4; //@line 29881
  $22 = $ReallocAsyncCtx7 + 24 | 0; //@line 29882
  HEAP32[$22 >> 2] = $8; //@line 29883
  sp = STACKTOP; //@line 29884
  return;
 }
 ___async_unwind = 0; //@line 29887
 HEAP32[$ReallocAsyncCtx7 >> 2] = 262; //@line 29888
 $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 29889
 HEAP32[$17 >> 2] = $9; //@line 29890
 $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 29891
 HEAP32[$18 >> 2] = $6; //@line 29892
 $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 29893
 HEAP32[$19 >> 2] = $14; //@line 29894
 $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 29895
 HEAP32[$20 >> 2] = $6; //@line 29896
 $21 = $ReallocAsyncCtx7 + 20 | 0; //@line 29897
 HEAP32[$21 >> 2] = $4; //@line 29898
 $22 = $ReallocAsyncCtx7 + 24 | 0; //@line 29899
 HEAP32[$22 >> 2] = $8; //@line 29900
 sp = STACKTOP; //@line 29901
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_310($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 15958
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15960
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15962
 $5 = HEAP8[$2 >> 0] & -5; //@line 15964
 HEAP8[$2 >> 0] = $5; //@line 15965
 if (!($5 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $5 & -17; //@line 15972
 $10 = HEAP32[$4 + 1324 >> 2] | 0; //@line 15974
 $11 = $10 + 48 | 0; //@line 15975
 $13 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 15977
 $14 = $10 + 60 | 0; //@line 15978
 $15 = HEAP32[$14 >> 2] | 0; //@line 15979
 if (!$15) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 15982
  _mbed_assert_internal(15061, 15066, 1102); //@line 15983
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 15986
   $17 = $ReallocAsyncCtx14 + 4 | 0; //@line 15987
   HEAP32[$17 >> 2] = $14; //@line 15988
   $18 = $ReallocAsyncCtx14 + 8 | 0; //@line 15989
   HEAP32[$18 >> 2] = $11; //@line 15990
   $19 = $ReallocAsyncCtx14 + 12 | 0; //@line 15991
   HEAP32[$19 >> 2] = $13; //@line 15992
   sp = STACKTOP; //@line 15993
   return;
  }
  ___async_unwind = 0; //@line 15996
  HEAP32[$ReallocAsyncCtx14 >> 2] = 478; //@line 15997
  $17 = $ReallocAsyncCtx14 + 4 | 0; //@line 15998
  HEAP32[$17 >> 2] = $14; //@line 15999
  $18 = $ReallocAsyncCtx14 + 8 | 0; //@line 16000
  HEAP32[$18 >> 2] = $11; //@line 16001
  $19 = $ReallocAsyncCtx14 + 12 | 0; //@line 16002
  HEAP32[$19 >> 2] = $13; //@line 16003
  sp = STACKTOP; //@line 16004
  return;
 } else {
  $20 = HEAP32[$15 >> 2] | 0; //@line 16007
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 16008
  FUNCTION_TABLE_vii[$20 & 31]($11, $13); //@line 16009
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 16012
   sp = STACKTOP; //@line 16013
   return;
  }
  ___async_unwind = 0; //@line 16016
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 16017
  sp = STACKTOP; //@line 16018
  return;
 }
}
function __ZN14lorawan_timersD2Ev__async_cb_142($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31344
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31346
 $4 = HEAP32[$2 + 68 >> 2] | 0; //@line 31348
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 31353
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 31354
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 56 | 0); //@line 31355
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 352; //@line 31358
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 31359
   HEAP32[$9 >> 2] = $2; //@line 31360
   sp = STACKTOP; //@line 31361
   return;
  }
  ___async_unwind = 0; //@line 31364
  HEAP32[$ReallocAsyncCtx3 >> 2] = 352; //@line 31365
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 31366
  HEAP32[$9 >> 2] = $2; //@line 31367
  sp = STACKTOP; //@line 31368
  return;
 }
 $11 = HEAP32[$2 + 48 >> 2] | 0; //@line 31372
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 31377
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 31378
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 36 | 0); //@line 31379
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 353; //@line 31382
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 31383
   HEAP32[$16 >> 2] = $2; //@line 31384
   sp = STACKTOP; //@line 31385
   return;
  }
  ___async_unwind = 0; //@line 31388
  HEAP32[$ReallocAsyncCtx4 >> 2] = 353; //@line 31389
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 31390
  HEAP32[$16 >> 2] = $2; //@line 31391
  sp = STACKTOP; //@line 31392
  return;
 }
 $18 = HEAP32[$2 + 28 >> 2] | 0; //@line 31396
 if (!$18) {
  return;
 }
 $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 31403
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 31404
 FUNCTION_TABLE_vi[$22 & 1023]($2 + 16 | 0); //@line 31405
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 354; //@line 31408
  sp = STACKTOP; //@line 31409
  return;
 }
 ___async_unwind = 0; //@line 31412
 HEAP32[$ReallocAsyncCtx5 >> 2] = 354; //@line 31413
 sp = STACKTOP; //@line 31414
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_266($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12570
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12572
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12574
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12576
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12578
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12580
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12582
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12584
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12586
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12588
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12590
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12592
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12594
 $25 = $4 + 1088 | 0; //@line 12595
 HEAP32[$25 >> 2] = 0; //@line 12596
 HEAP32[$25 + 4 >> 2] = 0; //@line 12596
 HEAP32[$25 + 8 >> 2] = 0; //@line 12596
 HEAP32[$25 + 12 >> 2] = 0; //@line 12596
 HEAP8[$4 + 1104 >> 0] = 1; //@line 12598
 HEAP32[$2 >> 2] = 684; //@line 12599
 $27 = $4 + 1112 | 0; //@line 12600
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(52) | 0; //@line 12601
 __ZN4mbed10TimerEventC2Ev($27); //@line 12602
 if (!___async) {
  ___async_unwind = 0; //@line 12605
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 149; //@line 12607
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $27; //@line 12609
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 12611
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 12613
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 12615
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 12617
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 12619
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 12621
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 12623
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 12625
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 12627
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 12629
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 12631
 sp = STACKTOP; //@line 12632
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_265($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12500
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12502
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12504
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12506
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12508
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12510
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12512
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12514
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12516
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12518
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12520
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12522
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12524
 $25 = $4 + 1152 | 0; //@line 12525
 HEAP32[$25 >> 2] = 0; //@line 12526
 HEAP32[$25 + 4 >> 2] = 0; //@line 12526
 HEAP32[$25 + 8 >> 2] = 0; //@line 12526
 HEAP32[$25 + 12 >> 2] = 0; //@line 12526
 HEAP8[$4 + 1168 >> 0] = 1; //@line 12528
 HEAP32[$2 >> 2] = 684; //@line 12529
 $27 = $4 + 1176 | 0; //@line 12530
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(52) | 0; //@line 12531
 __ZN4mbed10TimerEventC2Ev($27); //@line 12532
 if (!___async) {
  ___async_unwind = 0; //@line 12535
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 150; //@line 12537
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $27; //@line 12539
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 12541
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 12543
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 12545
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 12547
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 12549
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 12551
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 12553
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 12555
 HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 12557
 HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 12559
 HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 12561
 sp = STACKTOP; //@line 12562
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_115($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 30137
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30139
 $4 = HEAP32[$2 + 44 >> 2] | 0; //@line 30141
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 30146
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 30147
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 32 | 0); //@line 30148
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 30151
   $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 30152
   HEAP32[$9 >> 2] = $2; //@line 30153
   sp = STACKTOP; //@line 30154
   return;
  }
  ___async_unwind = 0; //@line 30157
  HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 30158
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 30159
  HEAP32[$9 >> 2] = $2; //@line 30160
  sp = STACKTOP; //@line 30161
  return;
 }
 $11 = HEAP32[$2 + 28 >> 2] | 0; //@line 30165
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 30170
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 30171
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 16 | 0); //@line 30172
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 348; //@line 30175
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 30176
   HEAP32[$16 >> 2] = $2; //@line 30177
   sp = STACKTOP; //@line 30178
   return;
  }
  ___async_unwind = 0; //@line 30181
  HEAP32[$ReallocAsyncCtx6 >> 2] = 348; //@line 30182
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 30183
  HEAP32[$16 >> 2] = $2; //@line 30184
  sp = STACKTOP; //@line 30185
  return;
 }
 $18 = HEAP32[$2 + 12 >> 2] | 0; //@line 30189
 if (!$18) {
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 30195
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 30196
 FUNCTION_TABLE_vi[$21 & 1023]($2); //@line 30197
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 30200
  sp = STACKTOP; //@line 30201
  return;
 }
 ___async_unwind = 0; //@line 30204
 HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 30205
 sp = STACKTOP; //@line 30206
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_264($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12430
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12432
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12434
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12436
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12438
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12440
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12442
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12444
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12446
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12448
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12450
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12452
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12454
 $25 = $4 + 1216 | 0; //@line 12455
 HEAP32[$25 >> 2] = 0; //@line 12456
 HEAP32[$25 + 4 >> 2] = 0; //@line 12456
 HEAP32[$25 + 8 >> 2] = 0; //@line 12456
 HEAP32[$25 + 12 >> 2] = 0; //@line 12456
 HEAP8[$4 + 1232 >> 0] = 1; //@line 12458
 HEAP32[$2 >> 2] = 684; //@line 12459
 $27 = $4 + 1240 | 0; //@line 12460
 $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 12461
 __ZN4mbed10TimerEventC2Ev($27); //@line 12462
 if (!___async) {
  ___async_unwind = 0; //@line 12465
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 151; //@line 12467
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $27; //@line 12469
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 12471
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 12473
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 12475
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 12477
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 12479
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 12481
 HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 12483
 HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 12485
 HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 12487
 HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 12489
 HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 12491
 sp = STACKTOP; //@line 12492
 return;
}
function _equeue_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$037$sink$i = 0, $$03741$i = 0, $$1$i9 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, label = 0;
 $3 = $1 + 39 & -4; //@line 4576
 $4 = $0 + 156 | 0; //@line 4577
 _equeue_mutex_lock($4); //@line 4578
 $5 = $0 + 24 | 0; //@line 4579
 $6 = HEAP32[$5 >> 2] | 0; //@line 4580
 L1 : do {
  if (!$6) {
   label = 7; //@line 4584
  } else {
   $$03741$i = $5; //@line 4586
   $9 = $6; //@line 4586
   while (1) {
    if ((HEAP32[$9 >> 2] | 0) >>> 0 >= $3 >>> 0) {
     break;
    }
    $15 = $9 + 8 | 0; //@line 4593
    $16 = HEAP32[$15 >> 2] | 0; //@line 4594
    if (!$16) {
     label = 7; //@line 4597
     break L1;
    } else {
     $$03741$i = $15; //@line 4600
     $9 = $16; //@line 4600
    }
   }
   $12 = HEAP32[$9 + 12 >> 2] | 0; //@line 4604
   if (!$12) {
    $$037$sink$i = $$03741$i; //@line 4607
   } else {
    HEAP32[$$03741$i >> 2] = $12; //@line 4609
    $$037$sink$i = $12 + 8 | 0; //@line 4611
   }
   HEAP32[$$037$sink$i >> 2] = HEAP32[$9 + 8 >> 2]; //@line 4615
   _equeue_mutex_unlock($4); //@line 4616
   $$1$i9 = $9; //@line 4617
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $18 = $0 + 28 | 0; //@line 4622
   $19 = HEAP32[$18 >> 2] | 0; //@line 4623
   if ($19 >>> 0 < $3 >>> 0) {
    _equeue_mutex_unlock($4); //@line 4626
    $$0 = 0; //@line 4627
    return $$0 | 0; //@line 4628
   } else {
    $21 = $0 + 32 | 0; //@line 4630
    $22 = HEAP32[$21 >> 2] | 0; //@line 4631
    HEAP32[$21 >> 2] = $22 + $3; //@line 4633
    HEAP32[$18 >> 2] = $19 - $3; //@line 4635
    HEAP32[$22 >> 2] = $3; //@line 4636
    HEAP8[$22 + 4 >> 0] = 1; //@line 4638
    _equeue_mutex_unlock($4); //@line 4639
    if (!$22) {
     $$0 = 0; //@line 4642
    } else {
     $$1$i9 = $22; //@line 4644
     break;
    }
    return $$0 | 0; //@line 4647
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 4652
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 4654
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 4656
 $$0 = $$1$i9 + 36 | 0; //@line 4658
 return $$0 | 0; //@line 4659
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_3($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 16521
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16523
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 16525
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16527
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16529
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16531
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 16534
  $11 = _mbedtls_cipher_cmac_starts(22564, $2, 128) | 0; //@line 16535
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 602; //@line 16538
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 16539
   HEAP16[$12 >> 1] = $4; //@line 16540
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 16541
   HEAP32[$13 >> 2] = $6; //@line 16542
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 16543
   HEAP32[$14 >> 2] = $8; //@line 16544
   sp = STACKTOP; //@line 16545
   return;
  }
  HEAP32[___async_retval >> 2] = $11; //@line 16549
  ___async_unwind = 0; //@line 16550
  HEAP32[$ReallocAsyncCtx3 >> 2] = 602; //@line 16551
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 16552
  HEAP16[$12 >> 1] = $4; //@line 16553
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 16554
  HEAP32[$13 >> 2] = $6; //@line 16555
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 16556
  HEAP32[$14 >> 2] = $8; //@line 16557
  sp = STACKTOP; //@line 16558
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 16561
  _mbedtls_cipher_free(22564); //@line 16562
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 605; //@line 16565
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 16566
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 16567
   sp = STACKTOP; //@line 16568
   return;
  }
  ___async_unwind = 0; //@line 16571
  HEAP32[$ReallocAsyncCtx5 >> 2] = 605; //@line 16572
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 16573
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 16574
  sp = STACKTOP; //@line 16575
  return;
 }
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_192($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 34332
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34334
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34336
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34338
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34340
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 34342
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 34345
  $11 = _mbedtls_cipher_cmac_starts(22564, $4, 128) | 0; //@line 34346
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 596; //@line 34349
   $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 34350
   HEAP32[$12 >> 2] = $6; //@line 34351
   $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 34352
   HEAP32[$13 >> 2] = $8; //@line 34353
   $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 34354
   HEAP32[$14 >> 2] = $2; //@line 34355
   sp = STACKTOP; //@line 34356
   return;
  }
  HEAP32[___async_retval >> 2] = $11; //@line 34360
  ___async_unwind = 0; //@line 34361
  HEAP32[$ReallocAsyncCtx4 >> 2] = 596; //@line 34362
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 34363
  HEAP32[$12 >> 2] = $6; //@line 34364
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 34365
  HEAP32[$13 >> 2] = $8; //@line 34366
  $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 34367
  HEAP32[$14 >> 2] = $2; //@line 34368
  sp = STACKTOP; //@line 34369
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 34372
  _mbedtls_cipher_free(22564); //@line 34373
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 34376
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 34377
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 34378
   sp = STACKTOP; //@line 34379
   return;
  }
  ___async_unwind = 0; //@line 34382
  HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 34383
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 34384
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 34385
  sp = STACKTOP; //@line 34386
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_50($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22543
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22547
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22549
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22551
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22553
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22555
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22557
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22559
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22562
 $18 = $4 + 16 | 0; //@line 22563
 HEAP32[$18 >> 2] = HEAP32[$6 >> 2]; //@line 22564
 HEAP32[$18 + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 22564
 HEAP8[$18 + 8 >> 0] = HEAP8[$6 + 8 >> 0] | 0; //@line 22564
 _equeue_event_dtor($4, 413); //@line 22565
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 22566
 $19 = _equeue_post($8, 414, $4) | 0; //@line 22567
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 415; //@line 22570
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 22571
  HEAP32[$20 >> 2] = $10; //@line 22572
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 22573
  HEAP32[$21 >> 2] = $12; //@line 22574
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 22575
  HEAP32[$22 >> 2] = $14; //@line 22576
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 22577
  HEAP32[$23 >> 2] = $16; //@line 22578
  sp = STACKTOP; //@line 22579
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 22583
 ___async_unwind = 0; //@line 22584
 HEAP32[$ReallocAsyncCtx6 >> 2] = 415; //@line 22585
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 22586
 HEAP32[$20 >> 2] = $10; //@line 22587
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 22588
 HEAP32[$21 >> 2] = $12; //@line 22589
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 22590
 HEAP32[$22 >> 2] = $14; //@line 22591
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 22592
 HEAP32[$23 >> 2] = $16; //@line 22593
 sp = STACKTOP; //@line 22594
 return;
}
function __ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb_364($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$031 = 0.0, $12 = 0, $14 = 0, $18 = 0, $22 = 0.0, $4 = 0, $57 = 0.0, $67 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24804
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24808
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24812
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24816
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 24818
 switch (HEAP32[$0 + 4 >> 2] | 0) {
 case 0:
  {
   $$0 = 1; //@line 24821
   break;
  }
 case 1:
  {
   switch (HEAP32[$12 + 752 >> 2] | 0) {
   case 7:
    {
     $$031 = 125.0e3; //@line 24829
     break;
    }
   case 8:
    {
     $$031 = 25.0e4; //@line 24833
     break;
    }
   case 9:
    {
     $$031 = 5.0e5; //@line 24837
     break;
    }
   default:
    {
     $$031 = 0.0; //@line 24841
    }
   }
   $18 = HEAP32[$12 + 756 >> 2] | 0; //@line 24845
   $22 = 1.0 / ($$031 / +(1 << $18 | 0)); //@line 24849
   $57 = +Math_ceil(+(+(((($14 & 255) << 3) + 28 - ($18 << 2) + (HEAP8[$12 + 766 >> 0] << 4 & 255) + (HEAP8[$12 + 764 >> 0] | 0 ? -20 : 0) | 0) >>> 0) / +($18 - (HEAP8[$12 + 760 >> 0] | 0 ? 2 : 0) << 2 >>> 0))) * +((HEAPU8[$12 + 761 >> 0] | 0) + 4 | 0); //@line 24885
   $$0 = ~~+Math_floor(+(((+(HEAPU16[$12 + 762 >> 1] | 0) + 4.25) * $22 + $22 * (($57 > 0.0 ? $57 : 0.0) + 8.0)) * 1.0e3 + .999)) >>> 0; //@line 24895
   break;
  }
 default:
  {
   $$0 = 0; //@line 24899
  }
 }
 _printf(10904, $4) | 0; //@line 24902
 HEAP32[$8 >> 2] = $$0; //@line 24903
 _printf(11113, $8) | 0; //@line 24904
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 24905
 _putchar(10) | 0; //@line 24906
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 90; //@line 24909
  $67 = $ReallocAsyncCtx + 4 | 0; //@line 24910
  HEAP32[$67 >> 2] = $$0; //@line 24911
  sp = STACKTOP; //@line 24912
  return;
 }
 ___async_unwind = 0; //@line 24915
 HEAP32[$ReallocAsyncCtx >> 2] = 90; //@line 24916
 $67 = $ReallocAsyncCtx + 4 | 0; //@line 24917
 HEAP32[$67 >> 2] = $$0; //@line 24918
 sp = STACKTOP; //@line 24919
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_191($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 34272
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34274
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34276
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34278
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 34280
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 34283
  $9 = _mbedtls_cipher_cmac_update(22564, 13588, 16) | 0; //@line 34284
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 597; //@line 34287
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 34288
   HEAP32[$10 >> 2] = $2; //@line 34289
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 34290
   HEAP32[$11 >> 2] = $4; //@line 34291
   $12 = $ReallocAsyncCtx2 + 12 | 0; //@line 34292
   HEAP32[$12 >> 2] = $6; //@line 34293
   sp = STACKTOP; //@line 34294
   return;
  }
  HEAP32[___async_retval >> 2] = $9; //@line 34298
  ___async_unwind = 0; //@line 34299
  HEAP32[$ReallocAsyncCtx2 >> 2] = 597; //@line 34300
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 34301
  HEAP32[$10 >> 2] = $2; //@line 34302
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 34303
  HEAP32[$11 >> 2] = $4; //@line 34304
  $12 = $ReallocAsyncCtx2 + 12 | 0; //@line 34305
  HEAP32[$12 >> 2] = $6; //@line 34306
  sp = STACKTOP; //@line 34307
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 34310
  _mbedtls_cipher_free(22564); //@line 34311
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 34314
   $14 = $ReallocAsyncCtx6 + 4 | 0; //@line 34315
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 34316
   sp = STACKTOP; //@line 34317
   return;
  }
  ___async_unwind = 0; //@line 34320
  HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 34321
  $14 = $ReallocAsyncCtx6 + 4 | 0; //@line 34322
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 34323
  sp = STACKTOP; //@line 34324
  return;
 }
}
function __ZN16SX1276_LoRaRadio5sleepEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx9 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 125
 STACKTOP = STACKTOP + 32 | 0; //@line 126
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 126
 $vararg_buffer5 = sp + 24 | 0; //@line 127
 $vararg_buffer3 = sp + 16 | 0; //@line 128
 _printf(10904, sp) | 0; //@line 131
 _printf(11563, sp + 8 | 0) | 0; //@line 132
 $AsyncCtx9 = _emscripten_alloc_async_context(24, sp) | 0; //@line 133
 _putchar(10) | 0; //@line 134
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 53; //@line 137
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 139
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer3; //@line 141
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer3; //@line 143
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer5; //@line 145
  HEAP32[$AsyncCtx9 + 20 >> 2] = $vararg_buffer5; //@line 147
  sp = STACKTOP; //@line 148
  STACKTOP = sp; //@line 149
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 151
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 153
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 155
 _printf(10904, $vararg_buffer3) | 0; //@line 156
 HEAP32[$vararg_buffer5 >> 2] = 0; //@line 157
 _printf(10970, $vararg_buffer5) | 0; //@line 158
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 159
 _putchar(10) | 0; //@line 160
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 54; //@line 163
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 165
  sp = STACKTOP; //@line 166
  STACKTOP = sp; //@line 167
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 169
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 170
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 171
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 55; //@line 174
  sp = STACKTOP; //@line 175
  STACKTOP = sp; //@line 176
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx12 | 0); //@line 178
  STACKTOP = sp; //@line 179
  return;
 }
}
function __ZN16SX1276_LoRaRadio7standbyEv__async_cb_147($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31582
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31584
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31586
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31590
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31594
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31596
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31598
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31600
 __ZN4mbed6Ticker6detachEv($2 + 1048 | 0); //@line 31602
 __ZN4mbed6Ticker6detachEv($2 + 1112 | 0); //@line 31604
 _printf(10904, $4) | 0; //@line 31605
 HEAP32[$8 >> 2] = 1; //@line 31606
 _printf(10970, $8) | 0; //@line 31607
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 31608
 _putchar(10) | 0; //@line 31609
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 57; //@line 31612
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 31613
  HEAP32[$21 >> 2] = $2; //@line 31614
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 31615
  HEAP32[$22 >> 2] = $12; //@line 31616
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 31617
  HEAP32[$23 >> 2] = $14; //@line 31618
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 31619
  HEAP32[$24 >> 2] = $16; //@line 31620
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 31621
  HEAP32[$25 >> 2] = $18; //@line 31622
  sp = STACKTOP; //@line 31623
  return;
 }
 ___async_unwind = 0; //@line 31626
 HEAP32[$ReallocAsyncCtx2 >> 2] = 57; //@line 31627
 $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 31628
 HEAP32[$21 >> 2] = $2; //@line 31629
 $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 31630
 HEAP32[$22 >> 2] = $12; //@line 31631
 $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 31632
 HEAP32[$23 >> 2] = $14; //@line 31633
 $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 31634
 HEAP32[$24 >> 2] = $16; //@line 31635
 $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 31636
 HEAP32[$25 >> 2] = $18; //@line 31637
 sp = STACKTOP; //@line 31638
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_267($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12680
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12682
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12684
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12690
 if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
  _printf(12967, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 12697
  _printf(12994, $10) | 0; //@line 12698
  $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 12699
  _putchar(10) | 0; //@line 12700
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 453; //@line 12703
   $18 = $ReallocAsyncCtx + 4 | 0; //@line 12704
   HEAP32[$18 >> 2] = $2; //@line 12705
   $19 = $ReallocAsyncCtx + 8 | 0; //@line 12706
   HEAP32[$19 >> 2] = $4; //@line 12707
   $20 = $ReallocAsyncCtx + 12 | 0; //@line 12708
   HEAP32[$20 >> 2] = $4; //@line 12709
   sp = STACKTOP; //@line 12710
   return;
  }
  ___async_unwind = 0; //@line 12713
  HEAP32[$ReallocAsyncCtx >> 2] = 453; //@line 12714
  $18 = $ReallocAsyncCtx + 4 | 0; //@line 12715
  HEAP32[$18 >> 2] = $2; //@line 12716
  $19 = $ReallocAsyncCtx + 8 | 0; //@line 12717
  HEAP32[$19 >> 2] = $4; //@line 12718
  $20 = $ReallocAsyncCtx + 12 | 0; //@line 12719
  HEAP32[$20 >> 2] = $4; //@line 12720
  sp = STACKTOP; //@line 12721
  return;
 } else {
  $16 = HEAP32[$2 >> 2] | 0; //@line 12724
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 12725
  __ZN7LoRaPHY18put_radio_to_sleepEv($16); //@line 12726
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 452; //@line 12729
   $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 12730
   HEAP32[$17 >> 2] = $2; //@line 12731
   sp = STACKTOP; //@line 12732
   return;
  }
  ___async_unwind = 0; //@line 12735
  HEAP32[$ReallocAsyncCtx3 >> 2] = 452; //@line 12736
  $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 12737
  HEAP32[$17 >> 2] = $2; //@line 12738
  sp = STACKTOP; //@line 12739
  return;
 }
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_512($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 37282
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37284
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37286
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 37292
 if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
  _printf(12967, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 37299
  _printf(12994, $10) | 0; //@line 37300
  $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 37301
  _putchar(10) | 0; //@line 37302
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 433; //@line 37305
   $16 = $ReallocAsyncCtx + 4 | 0; //@line 37306
   HEAP32[$16 >> 2] = $2; //@line 37307
   $17 = $ReallocAsyncCtx + 8 | 0; //@line 37308
   HEAP32[$17 >> 2] = $4; //@line 37309
   $18 = $ReallocAsyncCtx + 12 | 0; //@line 37310
   HEAP32[$18 >> 2] = $4; //@line 37311
   sp = STACKTOP; //@line 37312
   return;
  }
  ___async_unwind = 0; //@line 37315
  HEAP32[$ReallocAsyncCtx >> 2] = 433; //@line 37316
  $16 = $ReallocAsyncCtx + 4 | 0; //@line 37317
  HEAP32[$16 >> 2] = $2; //@line 37318
  $17 = $ReallocAsyncCtx + 8 | 0; //@line 37319
  HEAP32[$17 >> 2] = $4; //@line 37320
  $18 = $ReallocAsyncCtx + 12 | 0; //@line 37321
  HEAP32[$18 >> 2] = $4; //@line 37322
  sp = STACKTOP; //@line 37323
  return;
 } else {
  $19 = HEAP32[$2 >> 2] | 0; //@line 37326
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 37327
  __ZN7LoRaPHY18put_radio_to_sleepEv($19); //@line 37328
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 436; //@line 37331
   $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 37332
   HEAP32[$20 >> 2] = $2; //@line 37333
   sp = STACKTOP; //@line 37334
   return;
  }
  ___async_unwind = 0; //@line 37337
  HEAP32[$ReallocAsyncCtx3 >> 2] = 436; //@line 37338
  $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 37339
  HEAP32[$20 >> 2] = $2; //@line 37340
  sp = STACKTOP; //@line 37341
  return;
 }
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $$09$i = 0, $1 = 0, $12 = 0, $18 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5898
 STACKTOP = STACKTOP + 144 | 0; //@line 5899
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144); //@line 5899
 $1 = sp + 16 | 0; //@line 5900
 $2 = sp; //@line 5901
 HEAP32[$2 >> 2] = $varargs; //@line 5902
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5903
 $3 = _vsnprintf($1, 128, $0, $2) | 0; //@line 5904
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 731; //@line 5907
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5909
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 5911
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 5913
  sp = STACKTOP; //@line 5914
  STACKTOP = sp; //@line 5915
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5917
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 5920
  return;
 }
 if (!(HEAP32[5729] | 0)) {
  _serial_init(22920, 2, 3); //@line 5925
  $$09$i = 0; //@line 5926
 } else {
  $$09$i = 0; //@line 5928
 }
 while (1) {
  $12 = HEAP8[$1 + $$09$i >> 0] | 0; //@line 5933
  $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5934
  _serial_putc(22920, $12); //@line 5935
  if (___async) {
   label = 7; //@line 5938
   break;
  }
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5941
  $18 = $$09$i + 1 | 0; //@line 5942
  if (($18 | 0) == ($3 | 0)) {
   label = 9; //@line 5945
   break;
  } else {
   $$09$i = $18; //@line 5948
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx2 >> 2] = 732; //@line 5952
  HEAP32[$AsyncCtx2 + 4 >> 2] = $$09$i; //@line 5954
  HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 5956
  HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 5958
  HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 5960
  HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 5962
  sp = STACKTOP; //@line 5963
  STACKTOP = sp; //@line 5964
  return;
 } else if ((label | 0) == 9) {
  STACKTOP = sp; //@line 5967
  return;
 }
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22789
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22791
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22793
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22795
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22797
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22799
 HEAP8[$2 + 1097 >> 0] = HEAP8[___async_retval >> 0] | 0; //@line 22803
 HEAP8[$4 >> 0] = 0; //@line 22804
 HEAP8[$6 >> 0] = HEAP8[$2 + 1156 >> 0] << 7; //@line 22808
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 22809
 $16 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($2, $4, $6, 0, 0, 0) | 0; //@line 22810
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 551; //@line 22813
  $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 22814
  HEAP32[$17 >> 2] = $2; //@line 22815
  $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 22816
  HEAP32[$18 >> 2] = $8; //@line 22817
  $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 22818
  HEAP32[$19 >> 2] = $6; //@line 22819
  $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 22820
  HEAP32[$20 >> 2] = $4; //@line 22821
  $21 = $ReallocAsyncCtx3 + 20 | 0; //@line 22822
  HEAP32[$21 >> 2] = $10; //@line 22823
  sp = STACKTOP; //@line 22824
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 22828
 ___async_unwind = 0; //@line 22829
 HEAP32[$ReallocAsyncCtx3 >> 2] = 551; //@line 22830
 $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 22831
 HEAP32[$17 >> 2] = $2; //@line 22832
 $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 22833
 HEAP32[$18 >> 2] = $8; //@line 22834
 $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 22835
 HEAP32[$19 >> 2] = $6; //@line 22836
 $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 22837
 HEAP32[$20 >> 2] = $4; //@line 22838
 $21 = $ReallocAsyncCtx3 + 20 | 0; //@line 22839
 HEAP32[$21 >> 2] = $10; //@line 22840
 sp = STACKTOP; //@line 22841
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_170($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 33008
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33010
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33012
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33014
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33016
 $9 = HEAP32[$2 >> 2] | 0; //@line 33017
 $11 = $6 + 12 | 0; //@line 33019
 HEAP32[$6 >> 2] = 532; //@line 33020
 HEAP32[$6 + 4 >> 2] = 0; //@line 33022
 HEAP32[$6 + 8 >> 2] = $4; //@line 33024
 HEAP32[$11 >> 2] = 848; //@line 33025
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 33026
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($9, $4 + 1056 | 0, $6); //@line 33027
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 533; //@line 33030
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 33031
  HEAP32[$12 >> 2] = $11; //@line 33032
  $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 33033
  HEAP32[$13 >> 2] = $2; //@line 33034
  $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 33035
  HEAP32[$14 >> 2] = $4; //@line 33036
  $15 = $ReallocAsyncCtx7 + 16 | 0; //@line 33037
  HEAP32[$15 >> 2] = $8; //@line 33038
  $16 = $ReallocAsyncCtx7 + 20 | 0; //@line 33039
  HEAP32[$16 >> 2] = $6; //@line 33040
  sp = STACKTOP; //@line 33041
  return;
 }
 ___async_unwind = 0; //@line 33044
 HEAP32[$ReallocAsyncCtx7 >> 2] = 533; //@line 33045
 $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 33046
 HEAP32[$12 >> 2] = $11; //@line 33047
 $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 33048
 HEAP32[$13 >> 2] = $2; //@line 33049
 $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 33050
 HEAP32[$14 >> 2] = $4; //@line 33051
 $15 = $ReallocAsyncCtx7 + 16 | 0; //@line 33052
 HEAP32[$15 >> 2] = $8; //@line 33053
 $16 = $ReallocAsyncCtx7 + 20 | 0; //@line 33054
 HEAP32[$16 >> 2] = $6; //@line 33055
 sp = STACKTOP; //@line 33056
 return;
}
function __ZN16SX1276_LoRaRadio18set_public_networkEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 1439
 STACKTOP = STACKTOP + 32 | 0; //@line 1440
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1440
 $vararg_buffer5 = sp + 24 | 0; //@line 1441
 $vararg_buffer3 = sp + 16 | 0; //@line 1442
 $vararg_buffer1 = sp + 8 | 0; //@line 1443
 $2 = $1 & 1; //@line 1445
 $3 = $0 + 689 | 0; //@line 1446
 HEAP8[$3 >> 0] = 1; //@line 1447
 _printf(10904, sp) | 0; //@line 1448
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$3 >> 0]; //@line 1451
 _printf(11079, $vararg_buffer1) | 0; //@line 1452
 $AsyncCtx10 = _emscripten_alloc_async_context(32, sp) | 0; //@line 1453
 _putchar(10) | 0; //@line 1454
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 87; //@line 1457
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 1459
  HEAP8[$AsyncCtx10 + 8 >> 0] = $2; //@line 1461
  HEAP32[$AsyncCtx10 + 12 >> 2] = $vararg_buffer3; //@line 1463
  HEAP32[$AsyncCtx10 + 16 >> 2] = $vararg_buffer3; //@line 1465
  HEAP8[$AsyncCtx10 + 20 >> 0] = $1 & 1; //@line 1468
  HEAP32[$AsyncCtx10 + 24 >> 2] = $vararg_buffer5; //@line 1470
  HEAP32[$AsyncCtx10 + 28 >> 2] = $vararg_buffer5; //@line 1472
  sp = STACKTOP; //@line 1473
  STACKTOP = sp; //@line 1474
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 1476
 HEAP8[$0 + 776 >> 0] = $2; //@line 1478
 _printf(10904, $vararg_buffer3) | 0; //@line 1479
 HEAP32[$vararg_buffer5 >> 2] = $1 & 1; //@line 1481
 _printf(11136, $vararg_buffer5) | 0; //@line 1482
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1483
 _putchar(10) | 0; //@line 1484
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 88; //@line 1487
  sp = STACKTOP; //@line 1488
  STACKTOP = sp; //@line 1489
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1491
  STACKTOP = sp; //@line 1492
  return;
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_473($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $20 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 34725
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34727
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34731
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34733
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34735
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34737
 HEAP8[$2 + 376 >> 0] = (HEAP32[$0 + 8 >> 2] | 0) == 0 & (HEAP8[$2 + 944 >> 0] & 8) != 0 & 1; //@line 34746
 $20 = HEAP8[$2 + 378 >> 0] | 0; //@line 34748
 HEAP8[$2 + 379 >> 0] = $20; //@line 34750
 HEAP8[$6 >> 0] = $20; //@line 34751
 HEAP8[$8 + 1 >> 0] = HEAP8[$2 + 372 >> 0] | 0; //@line 34755
 HEAP32[$8 + 4 >> 2] = $10; //@line 34757
 $26 = HEAP32[$2 >> 2] | 0; //@line 34758
 $29 = HEAP32[(HEAP32[$26 >> 2] | 0) + 12 >> 2] | 0; //@line 34761
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 34762
 FUNCTION_TABLE_vii[$29 & 31]($26, $8); //@line 34763
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 34766
  $30 = $ReallocAsyncCtx + 4 | 0; //@line 34767
  HEAP32[$30 >> 2] = $2; //@line 34768
  $31 = $ReallocAsyncCtx + 8 | 0; //@line 34769
  HEAP32[$31 >> 2] = $10; //@line 34770
  $32 = $ReallocAsyncCtx + 12 | 0; //@line 34771
  HEAP32[$32 >> 2] = $12; //@line 34772
  $33 = $ReallocAsyncCtx + 16 | 0; //@line 34773
  HEAP32[$33 >> 2] = $6; //@line 34774
  sp = STACKTOP; //@line 34775
  return;
 }
 ___async_unwind = 0; //@line 34778
 HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 34779
 $30 = $ReallocAsyncCtx + 4 | 0; //@line 34780
 HEAP32[$30 >> 2] = $2; //@line 34781
 $31 = $ReallocAsyncCtx + 8 | 0; //@line 34782
 HEAP32[$31 >> 2] = $10; //@line 34783
 $32 = $ReallocAsyncCtx + 12 | 0; //@line 34784
 HEAP32[$32 >> 2] = $12; //@line 34785
 $33 = $ReallocAsyncCtx + 16 | 0; //@line 34786
 HEAP32[$33 >> 2] = $6; //@line 34787
 sp = STACKTOP; //@line 34788
 return;
}
function __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$01315 = 0, $$016 = 0, $$1 = 0, $$114 = 0, $$sink = 0, $2 = 0, $23 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = HEAP8[$0 + 2 >> 0] | 0; //@line 20594
 if (!($2 << 24 >> 24)) {
  $$0$lcssa = 0; //@line 20597
  $26 = $$0$lcssa << 24 >> 24 != 0; //@line 20598
  $$sink = $26 & 1; //@line 20599
  HEAP8[$0 >> 0] = $$sink; //@line 20600
  $27 = $0 + 3 | 0; //@line 20601
  HEAP8[$27 >> 0] = $$0$lcssa; //@line 20602
  return;
 } else {
  $$01315 = 0; //@line 20605
  $$016 = 0; //@line 20605
  $5 = 0; //@line 20605
 }
 while (1) {
  $6 = HEAP8[$0 + 4 + $5 >> 0] | 0; //@line 20609
  switch ($6 << 24 >> 24) {
  case 5:
  case 10:
   {
    $7 = $$01315 + 1 << 24 >> 24; //@line 20612
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = $6; //@line 20616
    HEAP8[($$016 + 1 & 255) + ($0 + 132) >> 0] = HEAP8[($7 & 255) + ($0 + 4) >> 0] | 0; //@line 20623
    $$1 = $$016 + 2 << 24 >> 24; //@line 20624
    $$114 = $7; //@line 20624
    break;
   }
  case 8:
   {
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = 8; //@line 20631
    $$1 = $$016 + 1 << 24 >> 24; //@line 20632
    $$114 = $$01315; //@line 20632
    break;
   }
  case 6:
   {
    $$1 = $$016; //@line 20638
    $$114 = $5 + 2 & 255; //@line 20638
    break;
   }
  case 7:
  case 3:
   {
    $$1 = $$016; //@line 20643
    $$114 = $$01315 + 1 << 24 >> 24; //@line 20643
    break;
   }
  default:
   {
    $$1 = $$016; //@line 20647
    $$114 = $$01315; //@line 20647
   }
  }
  $23 = $$114 + 1 << 24 >> 24; //@line 20650
  if (($23 & 255) < ($2 & 255)) {
   $$01315 = $23; //@line 20654
   $$016 = $$1; //@line 20654
   $5 = $23 & 255; //@line 20654
  } else {
   $$0$lcssa = $$1; //@line 20656
   break;
  }
 }
 $26 = $$0$lcssa << 24 >> 24 != 0; //@line 20660
 $$sink = $26 & 1; //@line 20661
 HEAP8[$0 >> 0] = $$sink; //@line 20662
 $27 = $0 + 3 | 0; //@line 20663
 HEAP8[$27 >> 0] = $$0$lcssa; //@line 20664
 return;
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 10813
 $4 = HEAP32[$3 >> 2] | 0; //@line 10814
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 10821
   label = 5; //@line 10822
  } else {
   $$1 = 0; //@line 10824
  }
 } else {
  $12 = $4; //@line 10828
  label = 5; //@line 10829
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 10833
   $10 = HEAP32[$9 >> 2] | 0; //@line 10834
   $14 = $10; //@line 10837
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $1) | 0; //@line 10842
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 10850
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 10854
       $$141 = $0; //@line 10854
       $$143 = $1; //@line 10854
       $31 = $14; //@line 10854
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 10857
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 10864
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $$038) | 0; //@line 10869
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 10872
      break L5;
     }
     $$139 = $$038; //@line 10878
     $$141 = $0 + $$038 | 0; //@line 10878
     $$143 = $1 - $$038 | 0; //@line 10878
     $31 = HEAP32[$9 >> 2] | 0; //@line 10878
    } else {
     $$139 = 0; //@line 10880
     $$141 = $0; //@line 10880
     $$143 = $1; //@line 10880
     $31 = $14; //@line 10880
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 10883
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 10886
   $$1 = $$139 + $$143 | 0; //@line 10888
  }
 } while (0);
 return $$1 | 0; //@line 10891
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_387($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26857
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 26859
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26861
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26863
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26865
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26867
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26869
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26871
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26873
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26875
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26877
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26879
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26881
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 26887
 _printf(10904, HEAP32[$0 + 52 >> 2] | 0) | 0; //@line 26890
 HEAP32[$30 >> 2] = 5; //@line 26891
 _printf(10999, $30) | 0; //@line 26892
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(52) | 0; //@line 26893
 _putchar(10) | 0; //@line 26894
 if (!___async) {
  ___async_unwind = 0; //@line 26897
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 96; //@line 26899
 HEAP16[$ReallocAsyncCtx5 + 4 >> 1] = $2; //@line 26901
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 26903
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 26905
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 26907
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 26909
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 26911
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 26913
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 26915
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 26917
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $20; //@line 26919
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $22; //@line 26921
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $24; //@line 26923
 sp = STACKTOP; //@line 26924
 return;
}
function __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $2 = 0, $20 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 10465
 STACKTOP = STACKTOP + 16 | 0; //@line 10466
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10466
 $2 = $0 + 1876 | 0; //@line 10469
 if (!(HEAP32[$2 >> 2] | 0)) {
  _printf(11887, sp) | 0; //@line 10473
  _printf(12684, sp + 8 | 0) | 0; //@line 10474
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10475
  _putchar(10) | 0; //@line 10476
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 334; //@line 10479
   sp = STACKTOP; //@line 10480
   STACKTOP = sp; //@line 10481
   return 0; //@line 10481
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10483
  $$0 = -1012; //@line 10484
  STACKTOP = sp; //@line 10485
  return $$0 | 0; //@line 10485
 } else {
  $6 = HEAP32[$1 + 4 >> 2] | 0; //@line 10488
  $8 = HEAP32[$1 + 8 >> 2] | 0; //@line 10490
  $10 = HEAP32[$1 + 12 >> 2] | 0; //@line 10492
  $12 = HEAP8[$1 + 16 >> 0] | 0; //@line 10494
  HEAP8[$0 + 1936 >> 0] = 0; //@line 10496
  HEAP32[$0 + 1960 >> 2] = 0; //@line 10498
  HEAP32[$0 + 1956 >> 2] = 0; //@line 10500
  HEAP32[$0 + 1944 >> 2] = $8; //@line 10503
  HEAP32[$0 + 1948 >> 2] = $10; //@line 10505
  HEAP32[$0 + 1940 >> 2] = $6; //@line 10506
  HEAP8[$0 + 1952 >> 0] = $12; //@line 10508
  HEAP32[$2 >> 2] = 2; //@line 10509
  $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10510
  $20 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 10511
  if (___async) {
   HEAP32[$AsyncCtx4 >> 2] = 335; //@line 10514
   sp = STACKTOP; //@line 10515
   STACKTOP = sp; //@line 10516
   return 0; //@line 10516
  }
  _emscripten_free_async_context($AsyncCtx4 | 0); //@line 10518
  $$0 = $20; //@line 10519
  STACKTOP = sp; //@line 10520
  return $$0 | 0; //@line 10520
 }
 return 0; //@line 10522
}
function __ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_248($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 11365
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11369
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 11371
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11373
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11375
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11379
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11383
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 21; //@line 11388
  HEAP8[$4 + 4 >> 0] = $6; //@line 11390
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 11391
  $23 = __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($8, $4) | 0; //@line 11392
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 333; //@line 11395
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 11396
   HEAP32[$24 >> 2] = $18; //@line 11397
   sp = STACKTOP; //@line 11398
   return;
  }
  HEAP32[___async_retval >> 2] = $23; //@line 11402
  ___async_unwind = 0; //@line 11403
  HEAP32[$ReallocAsyncCtx4 >> 2] = 333; //@line 11404
  $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 11405
  HEAP32[$24 >> 2] = $18; //@line 11406
  sp = STACKTOP; //@line 11407
  return;
 } else {
  _printf(11887, $10) | 0; //@line 11410
  _printf(12745, $14) | 0; //@line 11411
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 11412
  _putchar(10) | 0; //@line 11413
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 332; //@line 11416
   $21 = $ReallocAsyncCtx + 4 | 0; //@line 11417
   HEAP32[$21 >> 2] = $18; //@line 11418
   sp = STACKTOP; //@line 11419
   return;
  }
  ___async_unwind = 0; //@line 11422
  HEAP32[$ReallocAsyncCtx >> 2] = 332; //@line 11423
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 11424
  HEAP32[$21 >> 2] = $18; //@line 11425
  sp = STACKTOP; //@line 11426
  return;
 }
}
function __ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 1381
 STACKTOP = STACKTOP + 32 | 0; //@line 1382
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1382
 $vararg_buffer5 = sp + 24 | 0; //@line 1383
 $vararg_buffer3 = sp + 16 | 0; //@line 1384
 $vararg_buffer1 = sp + 8 | 0; //@line 1385
 $4 = $0 + 689 | 0; //@line 1388
 HEAP8[$4 >> 0] = $1; //@line 1389
 _printf(10904, sp) | 0; //@line 1390
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$4 >> 0]; //@line 1393
 _printf(11079, $vararg_buffer1) | 0; //@line 1394
 $AsyncCtx11 = _emscripten_alloc_async_context(28, sp) | 0; //@line 1395
 _putchar(10) | 0; //@line 1396
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 85; //@line 1399
  HEAP32[$AsyncCtx11 + 4 >> 2] = $vararg_buffer3; //@line 1401
  HEAP32[$AsyncCtx11 + 8 >> 2] = $vararg_buffer3; //@line 1403
  HEAP8[$AsyncCtx11 + 12 >> 0] = $2; //@line 1405
  HEAP32[$AsyncCtx11 + 16 >> 2] = $vararg_buffer5; //@line 1407
  HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 1409
  HEAP32[$AsyncCtx11 + 24 >> 2] = $vararg_buffer5; //@line 1411
  sp = STACKTOP; //@line 1412
  STACKTOP = sp; //@line 1413
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 1415
 _printf(10904, $vararg_buffer3) | 0; //@line 1416
 HEAP32[$vararg_buffer5 >> 2] = $1; //@line 1418
 HEAP32[$vararg_buffer5 + 4 >> 2] = $2 & 255; //@line 1420
 _printf(11158, $vararg_buffer5) | 0; //@line 1421
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1422
 _putchar(10) | 0; //@line 1423
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 86; //@line 1426
  sp = STACKTOP; //@line 1427
  STACKTOP = sp; //@line 1428
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1430
  STACKTOP = sp; //@line 1431
  return;
 }
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_71($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $27 = 0, $30 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23940
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23942
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23946
 $8 = $0 + 16 | 0; //@line 23948
 $10 = HEAP32[$8 >> 2] | 0; //@line 23950
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 23953
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 23955
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 23957
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 23959
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 23960
 $18 = HEAP32[$2 >> 2] | 0; //@line 23961
 if ($18 | 0) {
  $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 23965
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 23966
  FUNCTION_TABLE_vi[$21 & 1023]($17); //@line 23967
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 134; //@line 23970
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 23971
   HEAP32[$22 >> 2] = $15; //@line 23972
   sp = STACKTOP; //@line 23973
   return;
  }
  ___async_unwind = 0; //@line 23976
  HEAP32[$ReallocAsyncCtx3 >> 2] = 134; //@line 23977
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 23978
  HEAP32[$22 >> 2] = $15; //@line 23979
  sp = STACKTOP; //@line 23980
  return;
 }
 $24 = HEAP32[$15 + 784 >> 2] | 0; //@line 23984
 if (!$24) {
  return;
 }
 $27 = HEAP32[$24 + 60 >> 2] | 0; //@line 23990
 if (!$27) {
  return;
 }
 $30 = HEAP32[$27 >> 2] | 0; //@line 23996
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 23997
 FUNCTION_TABLE_vi[$30 & 1023]($24 + 48 | 0); //@line 23998
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 24001
  sp = STACKTOP; //@line 24002
  return;
 }
 ___async_unwind = 0; //@line 24005
 HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 24006
 sp = STACKTOP; //@line 24007
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_470($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 34534
 STACKTOP = STACKTOP + 16 | 0; //@line 34535
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 34535
 $$byval_copy = sp; //@line 34536
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34538
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34540
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34542
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34544
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34546
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34548
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34550
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 34552
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 34554
 $20 = HEAP32[$2 + 1328 >> 2] | 0; //@line 34556
 HEAP32[$18 >> 2] = 361; //@line 34557
 HEAP32[$18 + 4 >> 2] = 0; //@line 34559
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(36) | 0; //@line 34560
 HEAP32[$$byval_copy >> 2] = HEAP32[$18 >> 2]; //@line 34561
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$18 + 4 >> 2]; //@line 34561
 $21 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($20, $2, $$byval_copy) | 0; //@line 34562
 if (!___async) {
  HEAP32[___async_retval >> 2] = $21; //@line 34566
  ___async_unwind = 0; //@line 34567
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 362; //@line 34569
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 34571
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 34573
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $6; //@line 34575
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $8; //@line 34577
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $10; //@line 34579
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $12; //@line 34581
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $14; //@line 34583
 HEAP32[$ReallocAsyncCtx9 + 32 >> 2] = $16; //@line 34585
 sp = STACKTOP; //@line 34586
 STACKTOP = sp; //@line 34587
 return;
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17685
 STACKTOP = STACKTOP + 32 | 0; //@line 17686
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17686
 $$byval_copy = sp + 8 | 0; //@line 17687
 $1 = sp + 16 | 0; //@line 17689
 _printf(12967, sp) | 0; //@line 17690
 _printf(12994, $$byval_copy) | 0; //@line 17691
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 17692
 _putchar(10) | 0; //@line 17693
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 517; //@line 17696
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 17698
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 17700
  sp = STACKTOP; //@line 17701
  STACKTOP = sp; //@line 17702
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17704
 $5 = HEAP32[$0 + 1328 >> 2] | 0; //@line 17706
 HEAP32[$1 >> 2] = 361; //@line 17707
 HEAP32[$1 + 4 >> 2] = 0; //@line 17709
 $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17710
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 17711
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 17711
 $6 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($5, $0, $$byval_copy) | 0; //@line 17712
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 518; //@line 17715
  sp = STACKTOP; //@line 17716
  STACKTOP = sp; //@line 17717
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 17719
 if ($6 | 0) {
  STACKTOP = sp; //@line 17722
  return;
 }
 $AsyncCtx8 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17724
 _mbed_assert_internal(12851, 12860, 217); //@line 17725
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 519; //@line 17728
  sp = STACKTOP; //@line 17729
  STACKTOP = sp; //@line 17730
  return;
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 17732
 STACKTOP = sp; //@line 17733
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17454
 STACKTOP = STACKTOP + 32 | 0; //@line 17455
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17455
 $$byval_copy = sp + 8 | 0; //@line 17456
 $1 = sp + 16 | 0; //@line 17458
 _printf(12967, sp) | 0; //@line 17459
 _printf(13449, $$byval_copy) | 0; //@line 17460
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 17461
 _putchar(10) | 0; //@line 17462
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 507; //@line 17465
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 17467
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 17469
  sp = STACKTOP; //@line 17470
  STACKTOP = sp; //@line 17471
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17473
 $5 = HEAP32[$0 + 1328 >> 2] | 0; //@line 17475
 HEAP32[$1 >> 2] = 508; //@line 17476
 HEAP32[$1 + 4 >> 2] = 0; //@line 17478
 $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17479
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 17480
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 17480
 $6 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($5, $0, $$byval_copy) | 0; //@line 17481
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 509; //@line 17484
  sp = STACKTOP; //@line 17485
  STACKTOP = sp; //@line 17486
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 17488
 if ($6 | 0) {
  STACKTOP = sp; //@line 17491
  return;
 }
 $AsyncCtx8 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17493
 _mbed_assert_internal(12851, 12860, 209); //@line 17494
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 510; //@line 17497
  sp = STACKTOP; //@line 17498
  STACKTOP = sp; //@line 17499
  return;
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 17501
 STACKTOP = sp; //@line 17502
 return;
}
function _mbedtls_cipher_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $22 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2024
 if (!$0) {
  $$0 = -24832; //@line 2027
  return $$0 | 0; //@line 2028
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 2030
 if (!$5) {
  $$0 = -24832; //@line 2033
  return $$0 | 0; //@line 2034
 }
 if (!(HEAP32[$5 + 20 >> 2] & 2)) {
  if ((HEAP32[$5 + 8 >> 2] | 0) != ($2 | 0)) {
   $$0 = -24832; //@line 2045
   return $$0 | 0; //@line 2046
  }
 }
 HEAP32[$0 + 4 >> 2] = $2; //@line 2050
 HEAP32[$0 + 8 >> 2] = $3; //@line 2052
 L11 : do {
  if (($3 | 0) != 1) {
   switch (HEAP32[$5 + 4 >> 2] | 0) {
   case 5:
   case 3:
    {
     break L11;
     break;
    }
   default:
    {}
   }
   if ($3 | 0) {
    $$0 = -24832; //@line 2068
    return $$0 | 0; //@line 2069
   }
   $30 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 16 >> 2] | 0; //@line 2074
   $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 2076
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2077
   $33 = FUNCTION_TABLE_iiii[$30 & 15]($32, $1, $2) | 0; //@line 2078
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 675; //@line 2081
    sp = STACKTOP; //@line 2082
    return 0; //@line 2083
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2085
   $$0 = $33; //@line 2086
   return $$0 | 0; //@line 2087
  }
 } while (0);
 $22 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 12 >> 2] | 0; //@line 2093
 $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 2095
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2096
 $25 = FUNCTION_TABLE_iiii[$22 & 15]($24, $1, $2) | 0; //@line 2097
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 674; //@line 2100
  sp = STACKTOP; //@line 2101
  return 0; //@line 2102
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2104
 $$0 = $25; //@line 2105
 return $$0 | 0; //@line 2106
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_420($0) {
 $0 = $0 | 0;
 var $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30370
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30372
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30374
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30376
 HEAP8[$2 + 1932 >> 0] = 1; //@line 30378
 $8 = $2 + 1892 | 0; //@line 30379
 $9 = HEAP32[$8 >> 2] | 0; //@line 30380
 if (!$9) {
  HEAP32[___async_retval >> 2] = 0; //@line 30384
  return;
 }
 $13 = HEAP32[$2 + 2288 >> 2] | 0; //@line 30389
 $15 = HEAP32[$9 + 4 >> 2] | 0; //@line 30391
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 30392
 FUNCTION_TABLE_vii[$15 & 31]($6, $2 + 1880 | 0); //@line 30393
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 256; //@line 30396
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 30397
  HEAP32[$16 >> 2] = $8; //@line 30398
  $17 = $ReallocAsyncCtx5 + 8 | 0; //@line 30399
  HEAP32[$17 >> 2] = $6; //@line 30400
  $18 = $ReallocAsyncCtx5 + 12 | 0; //@line 30401
  HEAP32[$18 >> 2] = $13; //@line 30402
  $19 = $ReallocAsyncCtx5 + 16 | 0; //@line 30403
  HEAP32[$19 >> 2] = $6; //@line 30404
  $20 = $ReallocAsyncCtx5 + 20 | 0; //@line 30405
  HEAP32[$20 >> 2] = $4; //@line 30406
  sp = STACKTOP; //@line 30407
  return;
 }
 ___async_unwind = 0; //@line 30410
 HEAP32[$ReallocAsyncCtx5 >> 2] = 256; //@line 30411
 $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 30412
 HEAP32[$16 >> 2] = $8; //@line 30413
 $17 = $ReallocAsyncCtx5 + 8 | 0; //@line 30414
 HEAP32[$17 >> 2] = $6; //@line 30415
 $18 = $ReallocAsyncCtx5 + 12 | 0; //@line 30416
 HEAP32[$18 >> 2] = $13; //@line 30417
 $19 = $ReallocAsyncCtx5 + 16 | 0; //@line 30418
 HEAP32[$19 >> 2] = $6; //@line 30419
 $20 = $ReallocAsyncCtx5 + 20 | 0; //@line 30420
 HEAP32[$20 >> 2] = $4; //@line 30421
 sp = STACKTOP; //@line 30422
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_433($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx33 = 0, sp = 0;
 sp = STACKTOP; //@line 31051
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31055
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31057
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31059
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31060
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 31064
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 31065
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 31066
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 244; //@line 31069
   $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 31070
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 31071
   $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 31072
   HEAP32[$13 >> 2] = $6; //@line 31073
   sp = STACKTOP; //@line 31074
   return;
  }
  ___async_unwind = 0; //@line 31077
  HEAP32[$ReallocAsyncCtx2 >> 2] = 244; //@line 31078
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 31079
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 31080
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 31081
  HEAP32[$13 >> 2] = $6; //@line 31082
  sp = STACKTOP; //@line 31083
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = -1011; //@line 31089
  return;
 }
 $ReallocAsyncCtx33 = _emscripten_realloc_async_context(8) | 0; //@line 31092
 _mbed_assert_internal(12851, 11935, 1141); //@line 31093
 if (___async) {
  HEAP32[$ReallocAsyncCtx33 >> 2] = 245; //@line 31096
  $15 = $ReallocAsyncCtx33 + 4 | 0; //@line 31097
  HEAP32[$15 >> 2] = $6; //@line 31098
  sp = STACKTOP; //@line 31099
  return;
 }
 ___async_unwind = 0; //@line 31102
 HEAP32[$ReallocAsyncCtx33 >> 2] = 245; //@line 31103
 $15 = $ReallocAsyncCtx33 + 4 | 0; //@line 31104
 HEAP32[$15 >> 2] = $6; //@line 31105
 sp = STACKTOP; //@line 31106
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $34 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 35672
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35674
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35680
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35682
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 35685
 $14 = HEAP8[$0 + 25 >> 0] & 1; //@line 35688
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 35690
 $18 = HEAP8[$0 + 27 >> 0] | 0; //@line 35692
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 35694
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 35696
 $24 = HEAP32[$0 + 36 >> 2] | 0; //@line 35698
 $26 = HEAP32[$0 + 40 >> 2] | 0; //@line 35700
 $27 = HEAP32[$2 >> 2] | 0; //@line 35701
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + 32 >> 2] | 0; //@line 35704
 $34 = HEAP32[(HEAP32[$0 + 12 >> 2] | 0) + ((HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 35708
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 35709
 FUNCTION_TABLE_vii[$30 & 31]($27, $34); //@line 35710
 if (!___async) {
  ___async_unwind = 0; //@line 35713
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 627; //@line 35715
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 35717
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 35719
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 35721
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $12 & 1; //@line 35724
 HEAP8[$ReallocAsyncCtx2 + 17 >> 0] = $14 & 1; //@line 35727
 HEAP8[$ReallocAsyncCtx2 + 18 >> 0] = $16; //@line 35729
 HEAP8[$ReallocAsyncCtx2 + 19 >> 0] = $18; //@line 35731
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $20; //@line 35733
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $22; //@line 35735
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $24; //@line 35737
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $26; //@line 35739
 sp = STACKTOP; //@line 35740
 return;
}
function _mbedtls_gcm_setkey__async_cb_357($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 24121
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24123
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24125
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24127
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24129
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24131
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 24135
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 24138
 dest = $2; //@line 24139
 stop = dest + 16 | 0; //@line 24139
 do {
  HEAP8[dest >> 0] = 0; //@line 24139
  dest = dest + 1 | 0; //@line 24139
 } while ((dest | 0) < (stop | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 24140
 $11 = _mbedtls_cipher_update($6, $2, 16, $2, $4) | 0; //@line 24141
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 693; //@line 24144
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 24145
  HEAP32[$12 >> 2] = $2; //@line 24146
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 24147
  HEAP32[$13 >> 2] = $2; //@line 24148
  $14 = $ReallocAsyncCtx + 12 | 0; //@line 24149
  HEAP32[$14 >> 2] = $8; //@line 24150
  $15 = $ReallocAsyncCtx + 16 | 0; //@line 24151
  HEAP32[$15 >> 2] = $4; //@line 24152
  sp = STACKTOP; //@line 24153
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 24157
 ___async_unwind = 0; //@line 24158
 HEAP32[$ReallocAsyncCtx >> 2] = 693; //@line 24159
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 24160
 HEAP32[$12 >> 2] = $2; //@line 24161
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 24162
 HEAP32[$13 >> 2] = $2; //@line 24163
 $14 = $ReallocAsyncCtx + 12 | 0; //@line 24164
 HEAP32[$14 >> 2] = $8; //@line 24165
 $15 = $ReallocAsyncCtx + 16 | 0; //@line 24166
 HEAP32[$15 >> 2] = $4; //@line 24167
 sp = STACKTOP; //@line 24168
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_432($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30989
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30993
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30995
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30997
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30998
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 31002
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 31003
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 31004
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 249; //@line 31007
   $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 31008
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 31009
   $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 31010
   HEAP32[$13 >> 2] = $6; //@line 31011
   sp = STACKTOP; //@line 31012
   return;
  }
  ___async_unwind = 0; //@line 31015
  HEAP32[$ReallocAsyncCtx4 >> 2] = 249; //@line 31016
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 31017
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 31018
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 31019
  HEAP32[$13 >> 2] = $6; //@line 31020
  sp = STACKTOP; //@line 31021
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 31027
  return;
 }
 $ReallocAsyncCtx32 = _emscripten_realloc_async_context(8) | 0; //@line 31030
 _mbed_assert_internal(12851, 11935, 1186); //@line 31031
 if (___async) {
  HEAP32[$ReallocAsyncCtx32 >> 2] = 250; //@line 31034
  $15 = $ReallocAsyncCtx32 + 4 | 0; //@line 31035
  HEAP32[$15 >> 2] = $6; //@line 31036
  sp = STACKTOP; //@line 31037
  return;
 }
 ___async_unwind = 0; //@line 31040
 HEAP32[$ReallocAsyncCtx32 >> 2] = 250; //@line 31041
 $15 = $ReallocAsyncCtx32 + 4 | 0; //@line 31042
 HEAP32[$15 >> 2] = $6; //@line 31043
 sp = STACKTOP; //@line 31044
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_431($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx31 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30927
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30931
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30933
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30935
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30936
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 30940
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 30941
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 30942
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 258; //@line 30945
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 30946
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 30947
   $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 30948
   HEAP32[$13 >> 2] = $6; //@line 30949
   sp = STACKTOP; //@line 30950
   return;
  }
  ___async_unwind = 0; //@line 30953
  HEAP32[$ReallocAsyncCtx6 >> 2] = 258; //@line 30954
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 30955
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 30956
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 30957
  HEAP32[$13 >> 2] = $6; //@line 30958
  sp = STACKTOP; //@line 30959
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 30965
  return;
 }
 $ReallocAsyncCtx31 = _emscripten_realloc_async_context(8) | 0; //@line 30968
 _mbed_assert_internal(12851, 11935, 1223); //@line 30969
 if (___async) {
  HEAP32[$ReallocAsyncCtx31 >> 2] = 259; //@line 30972
  $15 = $ReallocAsyncCtx31 + 4 | 0; //@line 30973
  HEAP32[$15 >> 2] = $6; //@line 30974
  sp = STACKTOP; //@line 30975
  return;
 }
 ___async_unwind = 0; //@line 30978
 HEAP32[$ReallocAsyncCtx31 >> 2] = 259; //@line 30979
 $15 = $ReallocAsyncCtx31 + 4 | 0; //@line 30980
 HEAP32[$15 >> 2] = $6; //@line 30981
 sp = STACKTOP; //@line 30982
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_388($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 26932
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 26934
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26936
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26938
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26940
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26942
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26944
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26946
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26948
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26950
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26952
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26954
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26956
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 26958
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(56) | 0; //@line 26959
 __ZN4mbed5Timer5startEv($4); //@line 26960
 if (!___async) {
  ___async_unwind = 0; //@line 26963
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 99; //@line 26965
 HEAP16[$ReallocAsyncCtx11 + 4 >> 1] = $2; //@line 26967
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 26969
 HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $18; //@line 26971
 HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $10; //@line 26973
 HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $12; //@line 26975
 HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $14; //@line 26977
 HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $16; //@line 26979
 HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $8; //@line 26981
 HEAP32[$ReallocAsyncCtx11 + 36 >> 2] = $6; //@line 26983
 HEAP32[$ReallocAsyncCtx11 + 40 >> 2] = $20; //@line 26985
 HEAP32[$ReallocAsyncCtx11 + 44 >> 2] = $22; //@line 26987
 HEAP32[$ReallocAsyncCtx11 + 48 >> 2] = $24; //@line 26989
 HEAP32[$ReallocAsyncCtx11 + 52 >> 2] = $26; //@line 26991
 sp = STACKTOP; //@line 26992
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23570
 STACKTOP = STACKTOP + 16 | 0; //@line 23571
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 23571
 $$byval_copy = sp; //@line 23572
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23574
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23576
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23578
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23580
 $10 = HEAP32[$2 + 1328 >> 2] | 0; //@line 23582
 HEAP32[$4 >> 2] = 361; //@line 23583
 HEAP32[$4 + 4 >> 2] = 0; //@line 23585
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 23586
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 23587
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 23587
 $11 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($10, $2, $$byval_copy) | 0; //@line 23588
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 564; //@line 23591
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 23592
  HEAP32[$12 >> 2] = $6; //@line 23593
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 23594
  HEAP32[$13 >> 2] = $2; //@line 23595
  $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 23596
  HEAP32[$14 >> 2] = $8; //@line 23597
  sp = STACKTOP; //@line 23598
  STACKTOP = sp; //@line 23599
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 23602
 ___async_unwind = 0; //@line 23603
 HEAP32[$ReallocAsyncCtx4 >> 2] = 564; //@line 23604
 $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 23605
 HEAP32[$12 >> 2] = $6; //@line 23606
 $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 23607
 HEAP32[$13 >> 2] = $2; //@line 23608
 $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 23609
 HEAP32[$14 >> 2] = $8; //@line 23610
 sp = STACKTOP; //@line 23611
 STACKTOP = sp; //@line 23612
 return;
}
function _main__async_cb_159($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 32430
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32434
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32436
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(23200, 23208) | 0; //@line 32439
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(23200) | 0) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 32443
  _puts(15432) | 0; //@line 32444
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 755; //@line 32447
   sp = STACKTOP; //@line 32448
   return;
  }
  ___async_unwind = 0; //@line 32451
  HEAP32[$ReallocAsyncCtx6 >> 2] = 755; //@line 32452
  sp = STACKTOP; //@line 32453
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(23200, 5) | 0; //@line 32456
 HEAP8[$4 >> 0] = 0; //@line 32457
 HEAP32[$4 + 4 >> 2] = 23905; //@line 32459
 HEAP32[$4 + 8 >> 2] = 23913; //@line 32461
 HEAP32[$4 + 12 >> 2] = 23921; //@line 32463
 HEAP8[$4 + 16 >> 0] = 3; //@line 32465
 $15 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(23200, $4) | 0; //@line 32466
 switch ($15 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$6 >> 2] = $15; //@line 32472
   _printf(15466, $6) | 0; //@line 32473
   HEAP32[___async_retval >> 2] = -1; //@line 32475
   return;
  }
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 32479
 _puts(15495) | 0; //@line 32480
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 756; //@line 32483
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 32484
  HEAP32[$16 >> 2] = $4; //@line 32485
  sp = STACKTOP; //@line 32486
  return;
 }
 ___async_unwind = 0; //@line 32489
 HEAP32[$ReallocAsyncCtx5 >> 2] = 756; //@line 32490
 $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 32491
 HEAP32[$16 >> 2] = $4; //@line 32492
 sp = STACKTOP; //@line 32493
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_397($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27890
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27894
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27896
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27898
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27900
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27902
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27904
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27906
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 27909
 HEAP32[$4 + 16 >> 2] = HEAP32[$6 >> 2]; //@line 27912
 _equeue_event_dtor($4, 274); //@line 27913
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 27914
 $20 = _equeue_post($8, 275, $4) | 0; //@line 27915
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 276; //@line 27918
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 27919
  HEAP32[$21 >> 2] = $10; //@line 27920
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 27921
  HEAP32[$22 >> 2] = $12; //@line 27922
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 27923
  HEAP32[$23 >> 2] = $14; //@line 27924
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 27925
  HEAP32[$24 >> 2] = $16; //@line 27926
  sp = STACKTOP; //@line 27927
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 27931
 ___async_unwind = 0; //@line 27932
 HEAP32[$ReallocAsyncCtx6 >> 2] = 276; //@line 27933
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 27934
 HEAP32[$21 >> 2] = $10; //@line 27935
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 27936
 HEAP32[$22 >> 2] = $12; //@line 27937
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 27938
 HEAP32[$23 >> 2] = $14; //@line 27939
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 27940
 HEAP32[$24 >> 2] = $16; //@line 27941
 sp = STACKTOP; //@line 27942
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_312($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 16032
 STACKTOP = STACKTOP + 16 | 0; //@line 16033
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16033
 $$byval_copy = sp; //@line 16034
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16036
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16038
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16040
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16042
 $10 = HEAP32[$6 + 1328 >> 2] | 0; //@line 16044
 HEAP32[$8 >> 2] = 361; //@line 16045
 HEAP32[$8 + 4 >> 2] = 0; //@line 16047
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(16) | 0; //@line 16048
 HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2]; //@line 16049
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 16049
 $11 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($10, $6, $$byval_copy) | 0; //@line 16050
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 474; //@line 16053
  $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 16054
  HEAP32[$12 >> 2] = $2; //@line 16055
  $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 16056
  HEAP32[$13 >> 2] = $4; //@line 16057
  $14 = $ReallocAsyncCtx10 + 12 | 0; //@line 16058
  HEAP32[$14 >> 2] = $6; //@line 16059
  sp = STACKTOP; //@line 16060
  STACKTOP = sp; //@line 16061
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 16064
 ___async_unwind = 0; //@line 16065
 HEAP32[$ReallocAsyncCtx10 >> 2] = 474; //@line 16066
 $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 16067
 HEAP32[$12 >> 2] = $2; //@line 16068
 $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 16069
 HEAP32[$13 >> 2] = $4; //@line 16070
 $14 = $ReallocAsyncCtx10 + 12 | 0; //@line 16071
 HEAP32[$14 >> 2] = $6; //@line 16072
 sp = STACKTOP; //@line 16073
 STACKTOP = sp; //@line 16074
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_77($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24748
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24752
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24754
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24756
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24758
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24760
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24762
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24764
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 24767
 HEAP16[$4 + 16 >> 1] = HEAP16[$6 >> 1] | 0; //@line 24770
 _equeue_event_dtor($4, 282); //@line 24771
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 24772
 $20 = _equeue_post($8, 283, $4) | 0; //@line 24773
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 284; //@line 24776
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 24777
  HEAP32[$21 >> 2] = $10; //@line 24778
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 24779
  HEAP32[$22 >> 2] = $12; //@line 24780
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 24781
  HEAP32[$23 >> 2] = $14; //@line 24782
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 24783
  HEAP32[$24 >> 2] = $16; //@line 24784
  sp = STACKTOP; //@line 24785
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 24789
 ___async_unwind = 0; //@line 24790
 HEAP32[$ReallocAsyncCtx6 >> 2] = 284; //@line 24791
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 24792
 HEAP32[$21 >> 2] = $10; //@line 24793
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 24794
 HEAP32[$22 >> 2] = $12; //@line 24795
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 24796
 HEAP32[$23 >> 2] = $14; //@line 24797
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 24798
 HEAP32[$24 >> 2] = $16; //@line 24799
 sp = STACKTOP; //@line 24800
 return;
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$i$i = 0, $$sink$i = 0, $11 = 0, $14 = 0, $22 = 0, $28 = 0, $41 = 0, $44 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26630
 $7 = HEAPU8[$0 + 24 >> 0] | 0; //@line 26633
 $8 = $0 + 25 | 0; //@line 26634
 $11 = (HEAPU8[$8 >> 0] | 0) + $7 | 0; //@line 26637
 $14 = $0 + 26 | 0; //@line 26640
 if ((HEAP8[$2 >> 0] | 0) == (HEAPU8[$14 >> 0] | 0)) {
  HEAP32[$4 >> 2] = 0; //@line 26645
  $$0 = 0; //@line 26646
  return $$0 | 0; //@line 26647
 }
 if ((HEAP32[$4 >> 2] | 0) >>> 0 < $7 >>> 0) {
  $$0 = 0; //@line 26652
  return $$0 | 0; //@line 26653
 }
 HEAP8[$3 >> 0] = HEAP8[$0 + 22 >> 0] | 0; //@line 26657
 $22 = HEAP32[$4 >> 2] | 0; //@line 26658
 if ($22 >>> 0 < $11 >>> 0) {
  $$0 = 1; //@line 26661
  return $$0 | 0; //@line 26662
 }
 if ((($22 >>> 0) % ((HEAPU8[$8 >> 0] | 0) >>> 0) | 0 | 0) != 1) {
  $$0 = 1; //@line 26669
  return $$0 | 0; //@line 26670
 }
 $28 = HEAP8[$2 >> 0] | 0; //@line 26672
 $$sink$i = HEAP8[((HEAP8[$0 + 132 >> 0] & 1) == 0 ? $14 : $0 + 35 | 0) >> 0] | 0; //@line 26679
 $$0$i$i = $$sink$i << 24 >> 24 == $28 << 24 >> 24 ? $$sink$i : ($28 & 255) + 255 & 255; //@line 26684
 HEAP8[$2 >> 0] = $$0$i$i; //@line 26685
 $41 = ($$0$i$i << 24 >> 24 | 0) != (HEAPU8[$14 >> 0] | 0); //@line 26689
 if ($41 | $1 ^ 1) {
  $$0 = $41; //@line 26693
  return $$0 | 0; //@line 26694
 }
 $44 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 26698
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 26699
 FUNCTION_TABLE_vi[$44 & 1023]($0); //@line 26700
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 659; //@line 26703
  sp = STACKTOP; //@line 26704
  return 0; //@line 26705
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 26707
 $$0 = 0; //@line 26708
 return $$0 | 0; //@line 26709
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26958
 if (($1 | 0) == ($2 | 0)) {
  $21 = $1 + 16 | 0; //@line 26961
  HEAP32[$21 >> 2] = 0; //@line 26962
  return;
 }
 $4 = $1 + 12 | 0; //@line 26965
 $5 = HEAP32[$4 >> 2] | 0; //@line 26966
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 26971
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 26972
   FUNCTION_TABLE_vi[$8 & 1023]($1); //@line 26973
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 660; //@line 26976
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 26978
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 26980
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 26982
    sp = STACKTOP; //@line 26983
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 26986
    break;
   }
  }
 } while (0);
 $12 = $2 + 12 | 0; //@line 26991
 $13 = HEAP32[$12 >> 2] | 0; //@line 26992
 do {
  if (!$13) {
   $20 = 0; //@line 26996
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 26999
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 27000
   FUNCTION_TABLE_vii[$16 & 31]($1, $2); //@line 27001
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 661; //@line 27004
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 27006
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 27008
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 27010
    sp = STACKTOP; //@line 27011
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 27014
    $20 = HEAP32[$12 >> 2] | 0; //@line 27016
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $20; //@line 27021
 $21 = $1 + 16 | 0; //@line 27022
 HEAP32[$21 >> 2] = 0; //@line 27023
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 11889
 STACKTOP = STACKTOP + 16 | 0; //@line 11890
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11890
 $$byval_copy = sp; //@line 11891
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11893
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11895
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11897
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11899
 $10 = HEAP32[$2 + 1328 >> 2] | 0; //@line 11901
 HEAP32[$4 >> 2] = 361; //@line 11902
 HEAP32[$4 + 4 >> 2] = 0; //@line 11904
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 11905
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 11906
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 11906
 $11 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($10, $2, $$byval_copy) | 0; //@line 11907
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 443; //@line 11910
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 11911
  HEAP32[$12 >> 2] = $6; //@line 11912
  $13 = $ReallocAsyncCtx5 + 8 | 0; //@line 11913
  HEAP32[$13 >> 2] = $2; //@line 11914
  $14 = $ReallocAsyncCtx5 + 12 | 0; //@line 11915
  HEAP32[$14 >> 2] = $8; //@line 11916
  sp = STACKTOP; //@line 11917
  STACKTOP = sp; //@line 11918
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 11921
 ___async_unwind = 0; //@line 11922
 HEAP32[$ReallocAsyncCtx5 >> 2] = 443; //@line 11923
 $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 11924
 HEAP32[$12 >> 2] = $6; //@line 11925
 $13 = $ReallocAsyncCtx5 + 8 | 0; //@line 11926
 HEAP32[$13 >> 2] = $2; //@line 11927
 $14 = $ReallocAsyncCtx5 + 12 | 0; //@line 11928
 HEAP32[$14 >> 2] = $8; //@line 11929
 sp = STACKTOP; //@line 11930
 STACKTOP = sp; //@line 11931
 return;
}
function __ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23584
 L1 : do {
  if (!(HEAP8[$0 + 16 >> 0] | 0)) {
   $$011 = 0; //@line 23590
  } else {
   $5 = HEAP32[$1 >> 2] | 0; //@line 23592
   if (!(HEAP32[$5 >> 2] | 0)) {
    $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 23598
    $12 = HEAP8[$1 + 4 >> 0] | 0; //@line 23600
    $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 23601
    $13 = FUNCTION_TABLE_iii[$10 & 31]($0, $12) | 0; //@line 23602
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 613; //@line 23605
     sp = STACKTOP; //@line 23606
     return 0; //@line 23607
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 23609
     return ($13 ? 3 : 0) | 0; //@line 23611
    }
   }
   $16 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 23616
   $18 = HEAP8[$1 + 4 >> 0] | 0; //@line 23618
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 23619
   $19 = FUNCTION_TABLE_iiii[$16 & 15]($0, $5, $18) | 0; //@line 23620
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 614; //@line 23623
    sp = STACKTOP; //@line 23624
    return 0; //@line 23625
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 23627
   switch ($19 | 0) {
   case 0:
    {
     $$011 = 3; //@line 23630
     break L1;
     break;
    }
   case -1004:
    {
     $$011 = 2; //@line 23635
     break L1;
     break;
    }
   case -1005:
    {
     $$011 = 1; //@line 23640
     break L1;
     break;
    }
   case -1006:
    {
     $$011 = 0; //@line 23645
     break L1;
     break;
    }
   default:
    {
     $$011 = 0; //@line 23650
     break L1;
    }
   }
  }
 } while (0);
 return $$011 | 0; //@line 23656
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_324($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20575
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20577
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20579
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20581
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20583
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20585
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20587
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20589
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20591
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20593
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20595
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20597
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20599
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20601
 $29 = HEAP32[HEAP32[HEAP32[$0 + 56 >> 2] >> 2] >> 2] | 0; //@line 20605
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 20606
 FUNCTION_TABLE_vii[$29 & 31]($24, $26); //@line 20607
 if (!___async) {
  ___async_unwind = 0; //@line 20610
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 20612
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 20614
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 20616
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 20618
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 20620
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 20622
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 20624
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 20626
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 20628
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 20630
 HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 20632
 HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 20634
 sp = STACKTOP; //@line 20635
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_323($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20507
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20509
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20511
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20513
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20515
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20517
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20519
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20521
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20523
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20525
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20527
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20529
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20531
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20533
 $29 = HEAP32[HEAP32[HEAP32[$0 + 56 >> 2] >> 2] >> 2] | 0; //@line 20537
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 20538
 FUNCTION_TABLE_vii[$29 & 31]($6, $8); //@line 20539
 if (!___async) {
  ___async_unwind = 0; //@line 20542
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 470; //@line 20544
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $4; //@line 20546
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 20548
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $10; //@line 20550
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $12; //@line 20552
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $14; //@line 20554
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $16; //@line 20556
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $18; //@line 20558
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $20; //@line 20560
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $22; //@line 20562
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $24; //@line 20564
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $26; //@line 20566
 sp = STACKTOP; //@line 20567
 return;
}
function _mbedtls_cipher_cmac_starts($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2550
 if (!$0) {
  $$0 = -24832; //@line 2553
  return $$0 | 0; //@line 2554
 }
 if (($1 | 0) == 0 | (HEAP32[$0 >> 2] | 0) == 0) {
  $$0 = -24832; //@line 2561
  return $$0 | 0; //@line 2562
 }
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2564
 $7 = _mbedtls_cipher_setkey($0, $1, $2, 1) | 0; //@line 2565
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 684; //@line 2568
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2570
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2572
  sp = STACKTOP; //@line 2573
  return 0; //@line 2574
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2576
 if ($7 | 0) {
  $$0 = $7; //@line 2579
  return $$0 | 0; //@line 2580
 }
 switch (HEAP32[HEAP32[$0 >> 2] >> 2] | 0) {
 case 36:
 case 4:
 case 3:
 case 2:
  {
   break;
  }
 default:
  {
   $$0 = -24832; //@line 2589
   return $$0 | 0; //@line 2590
  }
 }
 $13 = _calloc(1, 36) | 0; //@line 2593
 if (!$13) {
  $$0 = -24960; //@line 2596
  return $$0 | 0; //@line 2597
 }
 HEAP32[$0 + 64 >> 2] = $13; //@line 2600
 HEAP8[$13 >> 0] = 0; //@line 2602
 HEAP8[$13 + 1 >> 0] = 0; //@line 2604
 HEAP8[$13 + 2 >> 0] = 0; //@line 2606
 HEAP8[$13 + 3 >> 0] = 0; //@line 2608
 HEAP8[$13 + 4 >> 0] = 0; //@line 2610
 HEAP8[$13 + 5 >> 0] = 0; //@line 2612
 HEAP8[$13 + 6 >> 0] = 0; //@line 2614
 HEAP8[$13 + 7 >> 0] = 0; //@line 2616
 HEAP8[$13 + 8 >> 0] = 0; //@line 2618
 HEAP8[$13 + 9 >> 0] = 0; //@line 2620
 HEAP8[$13 + 10 >> 0] = 0; //@line 2622
 HEAP8[$13 + 11 >> 0] = 0; //@line 2624
 HEAP8[$13 + 12 >> 0] = 0; //@line 2626
 HEAP8[$13 + 13 >> 0] = 0; //@line 2628
 HEAP8[$13 + 14 >> 0] = 0; //@line 2630
 HEAP8[$13 + 15 >> 0] = 0; //@line 2631
 $$0 = 0; //@line 2632
 return $$0 | 0; //@line 2633
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_344($0) {
 $0 = $0 | 0;
 var $$phi$trans$insert = 0, $$pre10 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23048
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23052
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23054
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23056
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23058
 $$phi$trans$insert = (HEAP32[$0 + 4 >> 2] | 0) + 12 | 0; //@line 23059
 $$pre10 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 23060
 if (!$$pre10) {
  HEAP32[$4 >> 2] = 0; //@line 23063
  _gpio_irq_set($10 + 28 | 0, 2, 0); //@line 23065
  return;
 }
 $13 = HEAP32[$$pre10 + 4 >> 2] | 0; //@line 23069
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 23070
 FUNCTION_TABLE_vii[$13 & 31]($6, $8); //@line 23071
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 161; //@line 23074
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 23075
  HEAP32[$14 >> 2] = $$phi$trans$insert; //@line 23076
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 23077
  HEAP32[$15 >> 2] = $4; //@line 23078
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 23079
  HEAP32[$16 >> 2] = $8; //@line 23080
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 23081
  HEAP32[$17 >> 2] = $10; //@line 23082
  sp = STACKTOP; //@line 23083
  return;
 }
 ___async_unwind = 0; //@line 23086
 HEAP32[$ReallocAsyncCtx4 >> 2] = 161; //@line 23087
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 23088
 HEAP32[$14 >> 2] = $$phi$trans$insert; //@line 23089
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 23090
 HEAP32[$15 >> 2] = $4; //@line 23091
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 23092
 HEAP32[$16 >> 2] = $8; //@line 23093
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 23094
 HEAP32[$17 >> 2] = $10; //@line 23095
 sp = STACKTOP; //@line 23096
 return;
}
function _mbedtls_ccm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $18 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1318
 $4 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 1319
 if (!$4) {
  $$0 = -13; //@line 1322
  return $$0 | 0; //@line 1323
 }
 if ((HEAP32[$4 + 24 >> 2] | 0) != 16) {
  $$0 = -13; //@line 1329
  return $$0 | 0; //@line 1330
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1332
 _mbedtls_cipher_free($0); //@line 1333
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 668; //@line 1336
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 1338
  HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 1340
  HEAP32[$AsyncCtx7 + 12 >> 2] = $2; //@line 1342
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 1344
  sp = STACKTOP; //@line 1345
  return 0; //@line 1346
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 1348
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 1349
 $13 = _mbedtls_cipher_setup($0, $4) | 0; //@line 1350
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 669; //@line 1353
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 1355
  HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 1357
  HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 1359
  sp = STACKTOP; //@line 1360
  return 0; //@line 1361
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 1363
 if ($13 | 0) {
  $$0 = $13; //@line 1366
  return $$0 | 0; //@line 1367
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1369
 $18 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 1370
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 670; //@line 1373
  sp = STACKTOP; //@line 1374
  return 0; //@line 1375
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1377
 $$0 = $18; //@line 1378
 return $$0 | 0; //@line 1379
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_392($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 27257
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 27259
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27261
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27263
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27265
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27267
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27269
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27271
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27273
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27275
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27277
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 27279
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 27281
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(56) | 0; //@line 27282
 __ZN4mbed5TimerC2Ev($4); //@line 27283
 if (!___async) {
  ___async_unwind = 0; //@line 27286
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 98; //@line 27288
 HEAP16[$ReallocAsyncCtx10 + 4 >> 1] = $2; //@line 27290
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $4; //@line 27292
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $4; //@line 27294
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $6; //@line 27296
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $8; //@line 27298
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $10; //@line 27300
 HEAP32[$ReallocAsyncCtx10 + 28 >> 2] = $12; //@line 27302
 HEAP32[$ReallocAsyncCtx10 + 32 >> 2] = $14; //@line 27304
 HEAP32[$ReallocAsyncCtx10 + 36 >> 2] = $16; //@line 27306
 HEAP32[$ReallocAsyncCtx10 + 40 >> 2] = $18; //@line 27308
 HEAP32[$ReallocAsyncCtx10 + 44 >> 2] = $20; //@line 27310
 HEAP32[$ReallocAsyncCtx10 + 48 >> 2] = $22; //@line 27312
 HEAP32[$ReallocAsyncCtx10 + 52 >> 2] = $24; //@line 27314
 sp = STACKTOP; //@line 27315
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_295($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 13853
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13857
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13859
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13861
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(16) | 0; //@line 13864
  _mbed_assert_internal(12851, 11935, 909); //@line 13865
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 220; //@line 13868
   $10 = $ReallocAsyncCtx10 + 4 | 0; //@line 13869
   HEAP32[$10 >> 2] = $4; //@line 13870
   $11 = $ReallocAsyncCtx10 + 8 | 0; //@line 13871
   HEAP32[$11 >> 2] = $6; //@line 13872
   $12 = $ReallocAsyncCtx10 + 12 | 0; //@line 13873
   HEAP32[$12 >> 2] = $8; //@line 13874
   sp = STACKTOP; //@line 13875
   return;
  }
  ___async_unwind = 0; //@line 13878
  HEAP32[$ReallocAsyncCtx10 >> 2] = 220; //@line 13879
  $10 = $ReallocAsyncCtx10 + 4 | 0; //@line 13880
  HEAP32[$10 >> 2] = $4; //@line 13881
  $11 = $ReallocAsyncCtx10 + 8 | 0; //@line 13882
  HEAP32[$11 >> 2] = $6; //@line 13883
  $12 = $ReallocAsyncCtx10 + 12 | 0; //@line 13884
  HEAP32[$12 >> 2] = $8; //@line 13885
  sp = STACKTOP; //@line 13886
  return;
 }
 if (!(HEAP8[$4 + 11 >> 0] | 0)) {
  return;
 }
 $16 = HEAP8[$6 >> 0] | 0; //@line 13895
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 13896
 __ZN12LoRaWANStack9handle_txEhPKhth($8, $16, 0, 0, 2) | 0; //@line 13897
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 221; //@line 13900
  sp = STACKTOP; //@line 13901
  return;
 }
 ___async_unwind = 0; //@line 13904
 HEAP32[$ReallocAsyncCtx7 >> 2] = 221; //@line 13905
 sp = STACKTOP; //@line 13906
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_360($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24326
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24330
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24332
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24334
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24336
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24338
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24340
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24342
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 24345
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 24346
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 24362
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 24363
    if (!___async) {
     ___async_unwind = 0; //@line 24366
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 804; //@line 24368
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 24370
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 24372
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 24374
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 24376
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 24378
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 24380
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 24382
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 24384
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 24387
    sp = STACKTOP; //@line 24388
    return;
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $14 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16637
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16641
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16647
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16651
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  return;
 }
 $17 = (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) != 0; //@line 16659
 $19 = HEAP32[$4 + 1108 >> 2] | 0; //@line 16661
 _printf(12967, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 16662
 _printf(13043, $10) | 0; //@line 16663
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 16664
 _putchar(10) | 0; //@line 16665
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 381; //@line 16668
  $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 16669
  HEAP32[$20 >> 2] = $14; //@line 16670
  $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 16671
  $$expand_i1_val = $17 & 1; //@line 16672
  HEAP8[$21 >> 0] = $$expand_i1_val; //@line 16673
  $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 16674
  HEAP32[$22 >> 2] = $19; //@line 16675
  $23 = $ReallocAsyncCtx2 + 16 | 0; //@line 16676
  HEAP32[$23 >> 2] = $4; //@line 16677
  sp = STACKTOP; //@line 16678
  return;
 }
 ___async_unwind = 0; //@line 16681
 HEAP32[$ReallocAsyncCtx2 >> 2] = 381; //@line 16682
 $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 16683
 HEAP32[$20 >> 2] = $14; //@line 16684
 $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 16685
 $$expand_i1_val = $17 & 1; //@line 16686
 HEAP8[$21 >> 0] = $$expand_i1_val; //@line 16687
 $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 16688
 HEAP32[$22 >> 2] = $19; //@line 16689
 $23 = $ReallocAsyncCtx2 + 16 | 0; //@line 16690
 HEAP32[$23 >> 2] = $4; //@line 16691
 sp = STACKTOP; //@line 16692
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_210($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 35947
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35949
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35953
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35955
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35957
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 35959
 $13 = HEAP32[$2 >> 2] | 0; //@line 35960
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 52 >> 2] | 0; //@line 35963
 $18 = HEAP16[HEAP32[$0 + 8 >> 2] >> 1] & 255; //@line 35965
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 35966
 $19 = FUNCTION_TABLE_iiii[$16 & 15]($13, $6, $18) | 0; //@line 35967
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 631; //@line 35970
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 35971
  HEAP32[$20 >> 2] = $8; //@line 35972
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 35973
  HEAP32[$21 >> 2] = $2; //@line 35974
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 35975
  HEAP32[$22 >> 2] = $10; //@line 35976
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 35977
  HEAP32[$23 >> 2] = $12; //@line 35978
  sp = STACKTOP; //@line 35979
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 35983
 ___async_unwind = 0; //@line 35984
 HEAP32[$ReallocAsyncCtx6 >> 2] = 631; //@line 35985
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 35986
 HEAP32[$20 >> 2] = $8; //@line 35987
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 35988
 HEAP32[$21 >> 2] = $2; //@line 35989
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 35990
 HEAP32[$22 >> 2] = $10; //@line 35991
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 35992
 HEAP32[$23 >> 2] = $12; //@line 35993
 sp = STACKTOP; //@line 35994
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_498($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 36812
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36814
 $3 = $2 + 1176 | 0; //@line 36815
 HEAP32[$3 >> 2] = 10108; //@line 36816
 __ZN4mbed6Ticker6detachEv($3); //@line 36817
 $5 = HEAP32[$2 + 1228 >> 2] | 0; //@line 36819
 if (!$5) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 36822
  __ZN4mbed10TimerEventD2Ev($3); //@line 36823
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 115; //@line 36826
   $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 36827
   HEAP32[$12 >> 2] = $2; //@line 36828
   sp = STACKTOP; //@line 36829
   return;
  }
  ___async_unwind = 0; //@line 36832
  HEAP32[$ReallocAsyncCtx7 >> 2] = 115; //@line 36833
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 36834
  HEAP32[$12 >> 2] = $2; //@line 36835
  sp = STACKTOP; //@line 36836
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 36841
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 36842
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1216 | 0); //@line 36843
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 114; //@line 36846
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 36847
   HEAP32[$10 >> 2] = $2; //@line 36848
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 36849
   HEAP32[$11 >> 2] = $3; //@line 36850
   sp = STACKTOP; //@line 36851
   return;
  }
  ___async_unwind = 0; //@line 36854
  HEAP32[$ReallocAsyncCtx2 >> 2] = 114; //@line 36855
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 36856
  HEAP32[$10 >> 2] = $2; //@line 36857
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 36858
  HEAP32[$11 >> 2] = $3; //@line 36859
  sp = STACKTOP; //@line 36860
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_497($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 36757
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36759
 $3 = $2 + 1112 | 0; //@line 36760
 HEAP32[$3 >> 2] = 10108; //@line 36761
 __ZN4mbed6Ticker6detachEv($3); //@line 36762
 $5 = HEAP32[$2 + 1164 >> 2] | 0; //@line 36764
 if (!$5) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 36767
  __ZN4mbed10TimerEventD2Ev($3); //@line 36768
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 117; //@line 36771
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 36772
   HEAP32[$12 >> 2] = $2; //@line 36773
   sp = STACKTOP; //@line 36774
   return;
  }
  ___async_unwind = 0; //@line 36777
  HEAP32[$ReallocAsyncCtx6 >> 2] = 117; //@line 36778
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 36779
  HEAP32[$12 >> 2] = $2; //@line 36780
  sp = STACKTOP; //@line 36781
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 36786
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 36787
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1152 | 0); //@line 36788
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 116; //@line 36791
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 36792
   HEAP32[$10 >> 2] = $2; //@line 36793
   $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 36794
   HEAP32[$11 >> 2] = $3; //@line 36795
   sp = STACKTOP; //@line 36796
   return;
  }
  ___async_unwind = 0; //@line 36799
  HEAP32[$ReallocAsyncCtx3 >> 2] = 116; //@line 36800
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 36801
  HEAP32[$10 >> 2] = $2; //@line 36802
  $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 36803
  HEAP32[$11 >> 2] = $3; //@line 36804
  sp = STACKTOP; //@line 36805
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_496($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 36702
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36704
 $3 = $2 + 1048 | 0; //@line 36705
 HEAP32[$3 >> 2] = 10108; //@line 36706
 __ZN4mbed6Ticker6detachEv($3); //@line 36707
 $5 = HEAP32[$2 + 1100 >> 2] | 0; //@line 36709
 if (!$5) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 36712
  __ZN4mbed10TimerEventD2Ev($3); //@line 36713
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 119; //@line 36716
   $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 36717
   HEAP32[$12 >> 2] = $2; //@line 36718
   sp = STACKTOP; //@line 36719
   return;
  }
  ___async_unwind = 0; //@line 36722
  HEAP32[$ReallocAsyncCtx5 >> 2] = 119; //@line 36723
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 36724
  HEAP32[$12 >> 2] = $2; //@line 36725
  sp = STACKTOP; //@line 36726
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 36731
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 36732
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1088 | 0); //@line 36733
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 118; //@line 36736
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 36737
   HEAP32[$10 >> 2] = $3; //@line 36738
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 36739
   HEAP32[$11 >> 2] = $2; //@line 36740
   sp = STACKTOP; //@line 36741
   return;
  }
  ___async_unwind = 0; //@line 36744
  HEAP32[$ReallocAsyncCtx4 >> 2] = 118; //@line 36745
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 36746
  HEAP32[$10 >> 2] = $3; //@line 36747
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 36748
  HEAP32[$11 >> 2] = $2; //@line 36749
  sp = STACKTOP; //@line 36750
  return;
 }
}
function __ZL18lora_event_handler11lora_events__async_cb_109($0) {
 $0 = $0 | 0;
 var $$07$i = 0, $12 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 29677
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29679
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29681
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29685
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29689
 dest = $2; //@line 29692
 stop = dest + 50 | 0; //@line 29692
 do {
  HEAP8[dest >> 0] = 0; //@line 29692
  dest = dest + 1 | 0; //@line 29692
 } while ((dest | 0) < (stop | 0));
 $15 = __ZN16LoRaWANInterface7receiveEhPhti(23200, 15, $2, 50, 3) | 0; //@line 29693
 $16 = $15 << 16 >> 16; //@line 29694
 if ($15 << 16 >> 16 < 0) {
  HEAP32[$4 >> 2] = $16; //@line 29697
  _printf(15680, $4) | 0; //@line 29698
  return;
 }
 HEAP32[$8 >> 2] = 15; //@line 29701
 HEAP32[$8 + 4 >> 2] = $16; //@line 29703
 _printf(15707, $8) | 0; //@line 29704
 if ($15 << 16 >> 16) {
  $$07$i = 0; //@line 29707
  $21 = 0; //@line 29707
  do {
   HEAP32[$12 >> 2] = HEAPU8[$2 + $21 >> 0]; //@line 29712
   _printf(15745, $12) | 0; //@line 29713
   $$07$i = $$07$i + 1 << 24 >> 24; //@line 29714
   $21 = $$07$i & 255; //@line 29715
  } while (($21 | 0) < ($16 | 0));
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 29724
 _putchar(10) | 0; //@line 29725
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 764; //@line 29728
  $19 = $ReallocAsyncCtx + 4 | 0; //@line 29729
  HEAP32[$19 >> 2] = $2; //@line 29730
  sp = STACKTOP; //@line 29731
  return;
 }
 ___async_unwind = 0; //@line 29734
 HEAP32[$ReallocAsyncCtx >> 2] = 764; //@line 29735
 $19 = $ReallocAsyncCtx + 4 | 0; //@line 29736
 HEAP32[$19 >> 2] = $2; //@line 29737
 sp = STACKTOP; //@line 29738
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_185($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 33996
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33998
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34000
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 34002
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34004
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34006
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34008
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34010
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 34012
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 34014
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 34016
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 34018
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 34020
 $27 = HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0; //@line 34023
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 34024
 FUNCTION_TABLE_vii[$27 & 31]($2, $4); //@line 34025
 if (!___async) {
  ___async_unwind = 0; //@line 34028
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 107; //@line 34030
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 34032
 HEAP8[$ReallocAsyncCtx + 8 >> 0] = $6; //@line 34034
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $8; //@line 34036
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $10; //@line 34038
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $12; //@line 34040
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $14; //@line 34042
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $16; //@line 34044
 HEAP32[$ReallocAsyncCtx + 32 >> 2] = $18; //@line 34046
 HEAP32[$ReallocAsyncCtx + 36 >> 2] = $20; //@line 34048
 HEAP32[$ReallocAsyncCtx + 40 >> 2] = $22; //@line 34050
 HEAP32[$ReallocAsyncCtx + 44 >> 2] = $24; //@line 34052
 sp = STACKTOP; //@line 34053
 return;
}
function __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 10529
 STACKTOP = STACKTOP + 16 | 0; //@line 10530
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10530
 $2 = $0 + 1876 | 0; //@line 10533
 if (!(HEAP32[$2 >> 2] | 0)) {
  _printf(11887, sp) | 0; //@line 10537
  _printf(12684, sp + 8 | 0) | 0; //@line 10538
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10539
  _putchar(10) | 0; //@line 10540
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 336; //@line 10543
   sp = STACKTOP; //@line 10544
   STACKTOP = sp; //@line 10545
   return 0; //@line 10545
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10547
  $$0 = -1012; //@line 10548
  STACKTOP = sp; //@line 10549
  return $$0 | 0; //@line 10549
 } else {
  $6 = HEAP32[$1 + 8 >> 2] | 0; //@line 10552
  $8 = HEAP32[$1 + 12 >> 2] | 0; //@line 10554
  $10 = HEAP32[$1 + 16 >> 2] | 0; //@line 10556
  HEAP8[$0 + 1936 >> 0] = 1; //@line 10558
  HEAP32[$0 + 1944 >> 2] = $6; //@line 10560
  HEAP32[$0 + 1948 >> 2] = $8; //@line 10562
  HEAP32[$0 + 1952 >> 2] = $10; //@line 10564
  HEAP32[$2 >> 2] = 3; //@line 10565
  $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10566
  $15 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 10567
  if (___async) {
   HEAP32[$AsyncCtx4 >> 2] = 337; //@line 10570
   sp = STACKTOP; //@line 10571
   STACKTOP = sp; //@line 10572
   return 0; //@line 10572
  }
  _emscripten_free_async_context($AsyncCtx4 | 0); //@line 10574
  $$0 = $15; //@line 10575
  STACKTOP = sp; //@line 10576
  return $$0 | 0; //@line 10576
 }
 return 0; //@line 10578
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_383($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 26491
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 26493
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26495
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26497
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26499
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26501
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26503
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26505
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26507
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26509
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26511
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26513
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26515
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(52) | 0; //@line 26516
 _wait_ms(1); //@line 26517
 if (!___async) {
  ___async_unwind = 0; //@line 26520
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 97; //@line 26522
 HEAP16[$ReallocAsyncCtx14 + 4 >> 1] = $2; //@line 26524
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $4; //@line 26526
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $6; //@line 26528
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $8; //@line 26530
 HEAP32[$ReallocAsyncCtx14 + 20 >> 2] = $10; //@line 26532
 HEAP32[$ReallocAsyncCtx14 + 24 >> 2] = $12; //@line 26534
 HEAP32[$ReallocAsyncCtx14 + 28 >> 2] = $14; //@line 26536
 HEAP32[$ReallocAsyncCtx14 + 32 >> 2] = $16; //@line 26538
 HEAP32[$ReallocAsyncCtx14 + 36 >> 2] = $18; //@line 26540
 HEAP32[$ReallocAsyncCtx14 + 40 >> 2] = $20; //@line 26542
 HEAP32[$ReallocAsyncCtx14 + 44 >> 2] = $22; //@line 26544
 HEAP32[$ReallocAsyncCtx14 + 48 >> 2] = $24; //@line 26546
 sp = STACKTOP; //@line 26547
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12367
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12369
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12371
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12373
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12375
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12377
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12379
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12381
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12383
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12385
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12387
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12389
 $25 = $4 + 1280 | 0; //@line 12390
 HEAP32[$25 >> 2] = 0; //@line 12391
 HEAP32[$25 + 4 >> 2] = 0; //@line 12391
 HEAP32[$25 + 8 >> 2] = 0; //@line 12391
 HEAP32[$25 + 12 >> 2] = 0; //@line 12391
 HEAP8[$4 + 1296 >> 0] = 1; //@line 12393
 HEAP32[$2 >> 2] = 684; //@line 12394
 HEAP32[$4 + 668 >> 2] = $6; //@line 12396
 HEAP32[$4 + 672 >> 2] = $8; //@line 12398
 HEAP32[$4 + 652 >> 2] = $10; //@line 12400
 HEAP32[$4 + 656 >> 2] = $12; //@line 12402
 HEAP32[$4 + 664 >> 2] = $14; //@line 12404
 HEAP32[$4 + 660 >> 2] = $16; //@line 12406
 HEAP32[$4 + 676 >> 2] = $18; //@line 12408
 HEAP32[$4 + 680 >> 2] = $20; //@line 12410
 HEAP32[$4 + 684 >> 2] = $22; //@line 12412
 HEAP32[$4 + 784 >> 2] = 0; //@line 12414
 if (($18 | 0) == -1) {
  $39 = _emscripten_asm_const_ii(4, $4 | 0) | 0; //@line 12417
  return;
 }
 _emscripten_asm_const_iii(3, HEAP32[$24 >> 2] | 0, 1) | 0; //@line 12421
 $39 = _emscripten_asm_const_ii(4, $4 | 0) | 0; //@line 12422
 return;
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10699
 STACKTOP = STACKTOP + 16 | 0; //@line 10700
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10700
 $2 = sp; //@line 10701
 $3 = $1 & 255; //@line 10702
 HEAP8[$2 >> 0] = $3; //@line 10703
 $4 = $0 + 16 | 0; //@line 10704
 $5 = HEAP32[$4 >> 2] | 0; //@line 10705
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 10712
   label = 4; //@line 10713
  } else {
   $$0 = -1; //@line 10715
  }
 } else {
  $12 = $5; //@line 10718
  label = 4; //@line 10719
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 10723
   $10 = HEAP32[$9 >> 2] | 0; //@line 10724
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 10727
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 10734
     HEAP8[$10 >> 0] = $3; //@line 10735
     $$0 = $13; //@line 10736
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 10741
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10742
   $21 = FUNCTION_TABLE_iiii[$20 & 15]($0, $2, 1) | 0; //@line 10743
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 769; //@line 10746
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 10748
    sp = STACKTOP; //@line 10749
    STACKTOP = sp; //@line 10750
    return 0; //@line 10750
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 10752
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 10757
   } else {
    $$0 = -1; //@line 10759
   }
  }
 } while (0);
 STACKTOP = sp; //@line 10763
 return $$0 | 0; //@line 10763
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_171($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 33062
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33064
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33066
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33068
 $7 = HEAP32[$2 >> 2] | 0; //@line 33069
 $9 = $6 + 12 | 0; //@line 33071
 HEAP32[$6 >> 2] = 535; //@line 33072
 HEAP32[$6 + 4 >> 2] = 0; //@line 33074
 HEAP32[$6 + 8 >> 2] = $4; //@line 33076
 HEAP32[$9 >> 2] = 848; //@line 33077
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 33078
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($7, $4 + 1076 | 0, $6); //@line 33079
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 536; //@line 33082
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 33083
  HEAP32[$10 >> 2] = $9; //@line 33084
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 33085
  HEAP32[$11 >> 2] = $2; //@line 33086
  $12 = $ReallocAsyncCtx6 + 12 | 0; //@line 33087
  HEAP32[$12 >> 2] = $4; //@line 33088
  $13 = $ReallocAsyncCtx6 + 16 | 0; //@line 33089
  HEAP32[$13 >> 2] = $6; //@line 33090
  sp = STACKTOP; //@line 33091
  return;
 }
 ___async_unwind = 0; //@line 33094
 HEAP32[$ReallocAsyncCtx6 >> 2] = 536; //@line 33095
 $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 33096
 HEAP32[$10 >> 2] = $9; //@line 33097
 $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 33098
 HEAP32[$11 >> 2] = $2; //@line 33099
 $12 = $ReallocAsyncCtx6 + 12 | 0; //@line 33100
 HEAP32[$12 >> 2] = $4; //@line 33101
 $13 = $ReallocAsyncCtx6 + 16 | 0; //@line 33102
 HEAP32[$13 >> 2] = $6; //@line 33103
 sp = STACKTOP; //@line 33104
 return;
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 50
 STACKTOP = STACKTOP + 16 | 0; //@line 51
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 51
 $vararg_buffer1 = sp + 8 | 0; //@line 52
 $vararg_buffer = sp; //@line 53
 HEAP32[$0 + 784 >> 2] = $1; //@line 55
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 58
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 59
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 60
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 50; //@line 63
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 65
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 67
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 69
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 71
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer1; //@line 73
  sp = STACKTOP; //@line 74
  STACKTOP = sp; //@line 75
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 77
 $11 = $0 + 689 | 0; //@line 78
 HEAP8[$11 >> 0] = 0; //@line 79
 _printf(10904, $vararg_buffer) | 0; //@line 80
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$11 >> 0]; //@line 83
 _printf(11079, $vararg_buffer1) | 0; //@line 84
 $AsyncCtx4 = _emscripten_alloc_async_context(8, sp) | 0; //@line 85
 _putchar(10) | 0; //@line 86
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 51; //@line 89
  HEAP32[$AsyncCtx4 + 4 >> 2] = $0; //@line 91
  sp = STACKTOP; //@line 92
  STACKTOP = sp; //@line 93
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx4 | 0); //@line 95
  HEAP8[$0 + 688 >> 0] = 0; //@line 97
  STACKTOP = sp; //@line 98
  return;
 }
}
function _equeue_cancel__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37526
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37528
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 37530
 $7 = $2 + 156 | 0; //@line 37531
 _equeue_mutex_lock($7); //@line 37532
 $8 = $2 + 24 | 0; //@line 37533
 $9 = HEAP32[$8 >> 2] | 0; //@line 37534
 L3 : do {
  if (!$9) {
   $$02329$i$i = $8; //@line 37538
   label = 9; //@line 37539
  } else {
   $11 = HEAP32[$6 >> 2] | 0; //@line 37541
   $$025$i$i = $8; //@line 37542
   $13 = $9; //@line 37542
   while (1) {
    $12 = HEAP32[$13 >> 2] | 0; //@line 37544
    if ($12 >>> 0 >= $11 >>> 0) {
     break;
    }
    $15 = $13 + 8 | 0; //@line 37549
    $16 = HEAP32[$15 >> 2] | 0; //@line 37550
    if (!$16) {
     $$02329$i$i = $15; //@line 37553
     label = 9; //@line 37554
     break L3;
    } else {
     $$025$i$i = $15; //@line 37557
     $13 = $16; //@line 37557
    }
   }
   if (($12 | 0) == ($11 | 0)) {
    HEAP32[$4 + -24 >> 2] = $13; //@line 37563
    $$02330$i$i = $$025$i$i; //@line 37566
    $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 37566
   } else {
    $$02329$i$i = $$025$i$i; //@line 37568
    label = 9; //@line 37569
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  HEAP32[$4 + -24 >> 2] = 0; //@line 37575
  $$02330$i$i = $$02329$i$i; //@line 37576
  $$sink$in$i$i = $$02329$i$i; //@line 37576
 }
 HEAP32[$4 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 37580
 HEAP32[$$02330$i$i >> 2] = $6; //@line 37581
 _equeue_mutex_unlock($7); //@line 37582
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26149
 $1 = $0 + 4 | 0; //@line 26150
 $2 = HEAP32[$1 >> 2] | 0; //@line 26151
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 26154
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 26155
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 26156
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 652; //@line 26159
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 26161
  sp = STACKTOP; //@line 26162
  return 0; //@line 26163
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 26165
 $7 = HEAP32[$1 >> 2] | 0; //@line 26166
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 26169
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 26170
 $11 = FUNCTION_TABLE_ii[$10 & 15]($7) | 0; //@line 26171
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 653; //@line 26174
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 26176
  sp = STACKTOP; //@line 26177
  return 0; //@line 26178
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 26180
 $13 = HEAP32[$1 >> 2] | 0; //@line 26181
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 76 >> 2] | 0; //@line 26184
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 26185
 FUNCTION_TABLE_vi[$16 & 1023]($13); //@line 26186
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 654; //@line 26189
  HEAP32[$AsyncCtx5 + 4 >> 2] = $11; //@line 26191
  sp = STACKTOP; //@line 26192
  return 0; //@line 26193
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 26195
  return $11 | 0; //@line 26196
 }
 return 0; //@line 26198
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $17 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 6016
 HEAP32[$0 >> 2] = 724; //@line 6017
 HEAP8[$0 + 4 >> 0] = 0; //@line 6019
 $4 = __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 6021
 $7 = HEAP32[(HEAP32[$1 >> 2] | 0) + 72 >> 2] | 0; //@line 6024
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 6025
 FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 6026
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 188; //@line 6029
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6031
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 6033
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 6035
  sp = STACKTOP; //@line 6036
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6039
 $12 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0; //@line 6041
 $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6042
 FUNCTION_TABLE_vii[$12 & 31]($1, $4); //@line 6043
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 189; //@line 6046
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 6048
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 6050
  sp = STACKTOP; //@line 6051
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6054
 $17 = HEAP32[(HEAP32[$1 >> 2] | 0) + 76 >> 2] | 0; //@line 6057
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6058
 FUNCTION_TABLE_vi[$17 & 1023]($1); //@line 6059
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 190; //@line 6062
  sp = STACKTOP; //@line 6063
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6066
  return;
 }
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_513($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $29 = 0, $5 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 37349
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37351
 $5 = (HEAP8[$2 + 373 >> 0] | 0) != 0; //@line 37357
 if (HEAP32[$2 + 364 >> 2] | 0) {
  if ($5) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 37363
  }
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 37368
  $29 = $2 + 944 | 0; //@line 37369
  HEAP8[$29 >> 0] = HEAP8[$29 >> 0] | 32; //@line 37372
  return;
 }
 if ($5) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 5; //@line 37379
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 5; //@line 37384
 $12 = $2 + 356 | 0; //@line 37385
 $16 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$12 >> 2] | 0, HEAP32[$2 + 980 >> 2] | 0) | 0; //@line 37389
 if ($16 >>> 0 < (HEAP32[$2 + 976 >> 2] | 0) >>> 0) {
  return;
 }
 $20 = HEAP32[$12 >> 2] | 0; //@line 37396
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 37398
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($20, $2 + 1056 | 0); //@line 37399
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 437; //@line 37402
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 37403
  HEAP32[$22 >> 2] = $2; //@line 37404
  sp = STACKTOP; //@line 37405
  return;
 }
 ___async_unwind = 0; //@line 37408
 HEAP32[$ReallocAsyncCtx5 >> 2] = 437; //@line 37409
 $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 37410
 HEAP32[$22 >> 2] = $2; //@line 37411
 sp = STACKTOP; //@line 37412
 return;
}
function _fflush__async_cb_395($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 27429
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27431
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 27433
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 27437
  } else {
   $$02327 = $$02325; //@line 27439
   $$02426 = $AsyncRetVal; //@line 27439
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 27446
    } else {
     $16 = 0; //@line 27448
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 27460
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 27463
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 27466
     break L3;
    } else {
     $$02327 = $$023; //@line 27469
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 27472
   $13 = ___fflush_unlocked($$02327) | 0; //@line 27473
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 27477
    ___async_unwind = 0; //@line 27478
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 773; //@line 27480
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 27482
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 27484
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 27486
   sp = STACKTOP; //@line 27487
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 27491
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 27493
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 33851
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33853
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 33855
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33857
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33859
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33861
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33863
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33865
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 33867
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 33869
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 33871
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 33873
 $25 = HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] | 0; //@line 33876
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 33877
 FUNCTION_TABLE_viiiiiiiiiiiiii[$25 & 1]($2, 0, $4, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $6); //@line 33878
 if (!___async) {
  ___async_unwind = 0; //@line 33881
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 108; //@line 33883
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 33885
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 33887
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 33889
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 33891
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $14; //@line 33893
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $16; //@line 33895
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $18; //@line 33897
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $20; //@line 33899
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $22; //@line 33901
 sp = STACKTOP; //@line 33902
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_2($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 16467
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16471
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16473
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16475
 if (!$AsyncRetVal) {
  $10 = HEAP16[$0 + 4 >> 1] & 255; //@line 16479
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 16480
  $11 = _mbedtls_cipher_cmac_update(22564, $4, $10) | 0; //@line 16481
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 603; //@line 16484
   $12 = $ReallocAsyncCtx + 4 | 0; //@line 16485
   HEAP32[$12 >> 2] = $6; //@line 16486
   sp = STACKTOP; //@line 16487
   return;
  }
  HEAP32[___async_retval >> 2] = $11; //@line 16491
  ___async_unwind = 0; //@line 16492
  HEAP32[$ReallocAsyncCtx >> 2] = 603; //@line 16493
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 16494
  HEAP32[$12 >> 2] = $6; //@line 16495
  sp = STACKTOP; //@line 16496
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 16499
  _mbedtls_cipher_free(22564); //@line 16500
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 605; //@line 16503
   $14 = $ReallocAsyncCtx5 + 4 | 0; //@line 16504
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 16505
   sp = STACKTOP; //@line 16506
   return;
  }
  ___async_unwind = 0; //@line 16509
  HEAP32[$ReallocAsyncCtx5 >> 2] = 605; //@line 16510
  $14 = $ReallocAsyncCtx5 + 4 | 0; //@line 16511
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 16512
  sp = STACKTOP; //@line 16513
  return;
 }
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 37978
 value = value & 255; //@line 37980
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 37983
   ptr = ptr + 1 | 0; //@line 37984
  }
  aligned_end = end & -4 | 0; //@line 37987
  block_aligned_end = aligned_end - 64 | 0; //@line 37988
  value4 = value | value << 8 | value << 16 | value << 24; //@line 37989
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 37992
   HEAP32[ptr + 4 >> 2] = value4; //@line 37993
   HEAP32[ptr + 8 >> 2] = value4; //@line 37994
   HEAP32[ptr + 12 >> 2] = value4; //@line 37995
   HEAP32[ptr + 16 >> 2] = value4; //@line 37996
   HEAP32[ptr + 20 >> 2] = value4; //@line 37997
   HEAP32[ptr + 24 >> 2] = value4; //@line 37998
   HEAP32[ptr + 28 >> 2] = value4; //@line 37999
   HEAP32[ptr + 32 >> 2] = value4; //@line 38000
   HEAP32[ptr + 36 >> 2] = value4; //@line 38001
   HEAP32[ptr + 40 >> 2] = value4; //@line 38002
   HEAP32[ptr + 44 >> 2] = value4; //@line 38003
   HEAP32[ptr + 48 >> 2] = value4; //@line 38004
   HEAP32[ptr + 52 >> 2] = value4; //@line 38005
   HEAP32[ptr + 56 >> 2] = value4; //@line 38006
   HEAP32[ptr + 60 >> 2] = value4; //@line 38007
   ptr = ptr + 64 | 0; //@line 38008
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 38012
   ptr = ptr + 4 | 0; //@line 38013
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 38018
  ptr = ptr + 1 | 0; //@line 38019
 }
 return end - num | 0; //@line 38021
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13769
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 13771
 $4 = HEAP16[$0 + 20 >> 1] | 0; //@line 13773
 $6 = HEAP16[$0 + 22 >> 1] | 0; //@line 13775
 $8 = HEAP8[$0 + 24 >> 0] | 0; //@line 13777
 $9 = $0 + 12 | 0; //@line 13778
 $10 = HEAP32[$9 >> 2] | 0; //@line 13779
 do {
  if (!$10) {
   $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 13783
   _mbed_assert_internal(15061, 15066, 2830); //@line 13784
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 419; //@line 13787
    HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 13789
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 13791
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 13793
    HEAP16[$AsyncCtx2 + 16 >> 1] = $4; //@line 13795
    HEAP16[$AsyncCtx2 + 18 >> 1] = $6; //@line 13797
    HEAP8[$AsyncCtx2 + 20 >> 0] = $8; //@line 13799
    sp = STACKTOP; //@line 13800
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 13803
    $19 = HEAP32[$9 >> 2] | 0; //@line 13805
    break;
   }
  } else {
   $19 = $10; //@line 13809
  }
 } while (0);
 $18 = HEAP32[$19 >> 2] | 0; //@line 13812
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13813
 FUNCTION_TABLE_viiiii[$18 & 7]($0, $2, $4, $6, $8); //@line 13814
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 420; //@line 13817
  sp = STACKTOP; //@line 13818
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13821
  return;
 }
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_189($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 34173
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34175
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34177
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34179
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 34181
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 34184
  $9 = _mbedtls_cipher_cmac_update(22564, $2, $4) | 0; //@line 34185
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 598; //@line 34188
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 34189
   HEAP32[$10 >> 2] = $6; //@line 34190
   sp = STACKTOP; //@line 34191
   return;
  }
  HEAP32[___async_retval >> 2] = $9; //@line 34195
  ___async_unwind = 0; //@line 34196
  HEAP32[$ReallocAsyncCtx >> 2] = 598; //@line 34197
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 34198
  HEAP32[$10 >> 2] = $6; //@line 34199
  sp = STACKTOP; //@line 34200
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 34203
  _mbedtls_cipher_free(22564); //@line 34204
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 34207
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 34208
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 34209
   sp = STACKTOP; //@line 34210
   return;
  }
  ___async_unwind = 0; //@line 34213
  HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 34214
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 34215
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 34216
  sp = STACKTOP; //@line 34217
  return;
 }
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 12638
 STACKTOP = STACKTOP + 16 | 0; //@line 12639
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12639
 $$byval_copy = sp; //@line 12640
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12642
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12644
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12646
 $8 = HEAP32[$2 + 1328 >> 2] | 0; //@line 12648
 HEAP32[$4 >> 2] = 361; //@line 12649
 HEAP32[$4 + 4 >> 2] = 0; //@line 12651
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 12652
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 12653
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 12653
 $9 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($8, $2, $$byval_copy) | 0; //@line 12654
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 454; //@line 12657
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 12658
  HEAP32[$10 >> 2] = $6; //@line 12659
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 12660
  HEAP32[$11 >> 2] = $2; //@line 12661
  sp = STACKTOP; //@line 12662
  STACKTOP = sp; //@line 12663
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 12666
 ___async_unwind = 0; //@line 12667
 HEAP32[$ReallocAsyncCtx4 >> 2] = 454; //@line 12668
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 12669
 HEAP32[$10 >> 2] = $6; //@line 12670
 $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 12671
 HEAP32[$11 >> 2] = $2; //@line 12672
 sp = STACKTOP; //@line 12673
 STACKTOP = sp; //@line 12674
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $14 = 0, $17 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26015
 $2 = $0 + 4 | 0; //@line 26016
 $3 = HEAP32[$2 >> 2] | 0; //@line 26017
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 72 >> 2] | 0; //@line 26020
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 26021
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 26022
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 645; //@line 26025
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 26027
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 26030
  sp = STACKTOP; //@line 26031
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 26034
 $9 = HEAP32[$2 >> 2] | 0; //@line 26035
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 48 >> 2] | 0; //@line 26038
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 26039
 FUNCTION_TABLE_vii[$12 & 31]($9, $1); //@line 26040
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 646; //@line 26043
  HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 26045
  sp = STACKTOP; //@line 26046
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 26049
 $14 = HEAP32[$2 >> 2] | 0; //@line 26050
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 76 >> 2] | 0; //@line 26053
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 26054
 FUNCTION_TABLE_vi[$17 & 1023]($14); //@line 26055
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 647; //@line 26058
  sp = STACKTOP; //@line 26059
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 26062
  return;
 }
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 37240
 STACKTOP = STACKTOP + 16 | 0; //@line 37241
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 37241
 $$byval_copy = sp; //@line 37242
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37244
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37246
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 37248
 $8 = HEAP32[$2 + 1328 >> 2] | 0; //@line 37250
 HEAP32[$4 >> 2] = 361; //@line 37251
 HEAP32[$4 + 4 >> 2] = 0; //@line 37253
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 37254
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 37255
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 37255
 $9 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($8, $2, $$byval_copy) | 0; //@line 37256
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 434; //@line 37259
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 37260
  HEAP32[$10 >> 2] = $6; //@line 37261
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 37262
  HEAP32[$11 >> 2] = $2; //@line 37263
  sp = STACKTOP; //@line 37264
  STACKTOP = sp; //@line 37265
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 37268
 ___async_unwind = 0; //@line 37269
 HEAP32[$ReallocAsyncCtx4 >> 2] = 434; //@line 37270
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 37271
 HEAP32[$10 >> 2] = $6; //@line 37272
 $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 37273
 HEAP32[$11 >> 2] = $2; //@line 37274
 sp = STACKTOP; //@line 37275
 STACKTOP = sp; //@line 37276
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_459($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 33896
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33900
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33902
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33904
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33906
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33908
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33910
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 33913
 _equeue_event_delay($4, $6); //@line 33914
 _equeue_event_dtor($4, 370); //@line 33915
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 33916
 $16 = _equeue_post($8, 371, $4) | 0; //@line 33917
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 664; //@line 33920
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 33921
  HEAP32[$17 >> 2] = $10; //@line 33922
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 33923
  HEAP32[$18 >> 2] = $12; //@line 33924
  $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 33925
  HEAP32[$19 >> 2] = $14; //@line 33926
  sp = STACKTOP; //@line 33927
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 33931
 ___async_unwind = 0; //@line 33932
 HEAP32[$ReallocAsyncCtx4 >> 2] = 664; //@line 33933
 $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 33934
 HEAP32[$17 >> 2] = $10; //@line 33935
 $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 33936
 HEAP32[$18 >> 2] = $12; //@line 33937
 $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 33938
 HEAP32[$19 >> 2] = $14; //@line 33939
 sp = STACKTOP; //@line 33940
 return;
}
function _mbedtls_cipher_cmac_starts__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $27 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34292
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34294
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 34296
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 34299
  $27 = ___async_retval; //@line 34300
  HEAP32[$27 >> 2] = $$0; //@line 34301
  return;
 }
 switch (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) {
 case 36:
 case 4:
 case 3:
 case 2:
  {
   break;
  }
 default:
  {
   $$0 = -24832; //@line 34311
   $27 = ___async_retval; //@line 34312
   HEAP32[$27 >> 2] = $$0; //@line 34313
   return;
  }
 }
 $9 = _calloc(1, 36) | 0; //@line 34317
 if (!$9) {
  $$0 = -24960; //@line 34320
  $27 = ___async_retval; //@line 34321
  HEAP32[$27 >> 2] = $$0; //@line 34322
  return;
 }
 HEAP32[$4 + 64 >> 2] = $9; //@line 34326
 HEAP8[$9 >> 0] = 0; //@line 34328
 HEAP8[$9 + 1 >> 0] = 0; //@line 34330
 HEAP8[$9 + 2 >> 0] = 0; //@line 34332
 HEAP8[$9 + 3 >> 0] = 0; //@line 34334
 HEAP8[$9 + 4 >> 0] = 0; //@line 34336
 HEAP8[$9 + 5 >> 0] = 0; //@line 34338
 HEAP8[$9 + 6 >> 0] = 0; //@line 34340
 HEAP8[$9 + 7 >> 0] = 0; //@line 34342
 HEAP8[$9 + 8 >> 0] = 0; //@line 34344
 HEAP8[$9 + 9 >> 0] = 0; //@line 34346
 HEAP8[$9 + 10 >> 0] = 0; //@line 34348
 HEAP8[$9 + 11 >> 0] = 0; //@line 34350
 HEAP8[$9 + 12 >> 0] = 0; //@line 34352
 HEAP8[$9 + 13 >> 0] = 0; //@line 34354
 HEAP8[$9 + 14 >> 0] = 0; //@line 34356
 HEAP8[$9 + 15 >> 0] = 0; //@line 34357
 $$0 = 0; //@line 34358
 $27 = ___async_retval; //@line 34359
 HEAP32[$27 >> 2] = $$0; //@line 34360
 return;
}
function __ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_466($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 34208
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34210
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34212
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 34217
  _mbed_assert_internal(12851, 12860, 201); //@line 34218
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 425; //@line 34221
   $7 = $ReallocAsyncCtx4 + 4 | 0; //@line 34222
   HEAP32[$7 >> 2] = $2; //@line 34223
   $8 = $ReallocAsyncCtx4 + 8 | 0; //@line 34224
   HEAP32[$8 >> 2] = $4; //@line 34225
   sp = STACKTOP; //@line 34226
   return;
  }
  ___async_unwind = 0; //@line 34229
  HEAP32[$ReallocAsyncCtx4 >> 2] = 425; //@line 34230
  $7 = $ReallocAsyncCtx4 + 4 | 0; //@line 34231
  HEAP32[$7 >> 2] = $2; //@line 34232
  $8 = $ReallocAsyncCtx4 + 8 | 0; //@line 34233
  HEAP32[$8 >> 2] = $4; //@line 34234
  sp = STACKTOP; //@line 34235
  return;
 }
 $9 = $4 + 944 | 0; //@line 34238
 HEAP8[$9 >> 0] = HEAP8[$9 >> 0] | 34; //@line 34241
 $13 = HEAP32[$4 + 356 >> 2] | 0; //@line 34243
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 34245
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($13, $4 + 996 | 0, 1); //@line 34246
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 426; //@line 34249
  sp = STACKTOP; //@line 34250
  return;
 }
 ___async_unwind = 0; //@line 34253
 HEAP32[$ReallocAsyncCtx2 >> 2] = 426; //@line 34254
 sp = STACKTOP; //@line 34255
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_87($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25381
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25383
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25385
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 25387
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25389
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25391
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 25393
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25395
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25397
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25399
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25401
 $21 = HEAP32[$2 >> 2] | 0; //@line 25402
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 32 >> 2] | 0; //@line 25405
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 25406
 FUNCTION_TABLE_vii[$24 & 31]($21, $4); //@line 25407
 if (!___async) {
  ___async_unwind = 0; //@line 25410
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 621; //@line 25412
 HEAP8[$ReallocAsyncCtx5 + 4 >> 0] = $6; //@line 25414
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 25416
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 25418
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 25420
 HEAP8[$ReallocAsyncCtx5 + 20 >> 0] = $12; //@line 25422
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 25424
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 25426
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 25428
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 25430
 sp = STACKTOP; //@line 25431
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24263
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24267
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24269
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24271
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24273
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24275
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24277
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 24280
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 24281
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 24290
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 24291
    if (!___async) {
     ___async_unwind = 0; //@line 24294
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 805; //@line 24296
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 24298
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 24300
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 24302
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 24304
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 24306
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 24308
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 24310
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 24313
    sp = STACKTOP; //@line 24314
    return;
   }
  }
 }
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_274($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12969
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12971
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12973
 $5 = $2 + 1892 | 0; //@line 12974
 $6 = HEAP32[$5 >> 2] | 0; //@line 12975
 if (!$6) {
  return;
 }
 $10 = HEAP32[$2 + 2288 >> 2] | 0; //@line 12982
 $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 12984
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 12985
 FUNCTION_TABLE_vii[$12 & 31]($4, $2 + 1880 | 0); //@line 12986
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 228; //@line 12989
  $13 = $ReallocAsyncCtx + 4 | 0; //@line 12990
  HEAP32[$13 >> 2] = $5; //@line 12991
  $14 = $ReallocAsyncCtx + 8 | 0; //@line 12992
  HEAP32[$14 >> 2] = $4; //@line 12993
  $15 = $ReallocAsyncCtx + 12 | 0; //@line 12994
  HEAP32[$15 >> 2] = $10; //@line 12995
  $16 = $ReallocAsyncCtx + 16 | 0; //@line 12996
  HEAP32[$16 >> 2] = $4; //@line 12997
  sp = STACKTOP; //@line 12998
  return;
 }
 ___async_unwind = 0; //@line 13001
 HEAP32[$ReallocAsyncCtx >> 2] = 228; //@line 13002
 $13 = $ReallocAsyncCtx + 4 | 0; //@line 13003
 HEAP32[$13 >> 2] = $5; //@line 13004
 $14 = $ReallocAsyncCtx + 8 | 0; //@line 13005
 HEAP32[$14 >> 2] = $4; //@line 13006
 $15 = $ReallocAsyncCtx + 12 | 0; //@line 13007
 HEAP32[$15 >> 2] = $10; //@line 13008
 $16 = $ReallocAsyncCtx + 16 | 0; //@line 13009
 HEAP32[$16 >> 2] = $4; //@line 13010
 sp = STACKTOP; //@line 13011
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_180($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 33662
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33664
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33666
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33668
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33670
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33672
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33674
 $13 = $2 + 356 | 0; //@line 33675
 $14 = HEAP32[$13 >> 2] | 0; //@line 33676
 $16 = $12 + 12 | 0; //@line 33678
 HEAP32[$12 >> 2] = 523; //@line 33679
 HEAP32[$12 + 4 >> 2] = 0; //@line 33681
 HEAP32[$12 + 8 >> 2] = $2; //@line 33683
 HEAP32[$16 >> 2] = 848; //@line 33684
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 33685
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($14, $2 + 996 | 0, $12); //@line 33686
 if (!___async) {
  ___async_unwind = 0; //@line 33689
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 524; //@line 33691
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $13; //@line 33693
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $2; //@line 33695
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $4; //@line 33697
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $6; //@line 33699
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $8; //@line 33701
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $10; //@line 33703
 HEAP32[$ReallocAsyncCtx10 + 28 >> 2] = $16; //@line 33705
 HEAP32[$ReallocAsyncCtx10 + 32 >> 2] = $12; //@line 33707
 sp = STACKTOP; //@line 33708
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_18($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17495
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17499
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17501
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17502
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 17506
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 17507
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 17508
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 384; //@line 17511
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 17512
   HEAP32[$10 >> 2] = $4; //@line 17513
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 17514
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 17515
   sp = STACKTOP; //@line 17516
   return;
  }
  ___async_unwind = 0; //@line 17519
  HEAP32[$ReallocAsyncCtx >> 2] = 384; //@line 17520
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 17521
  HEAP32[$10 >> 2] = $4; //@line 17522
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 17523
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 17524
  sp = STACKTOP; //@line 17525
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 17532
 _mbed_assert_internal(12851, 12860, 141); //@line 17533
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 385; //@line 17536
  sp = STACKTOP; //@line 17537
  return;
 }
 ___async_unwind = 0; //@line 17540
 HEAP32[$ReallocAsyncCtx3 >> 2] = 385; //@line 17541
 sp = STACKTOP; //@line 17542
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 13374
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13376
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13378
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13380
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13382
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13384
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13386
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13388
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13390
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13392
 HEAP8[$2 + 1097 >> 0] = HEAP8[___async_retval >> 0] | 0; //@line 13396
 HEAP8[$4 >> 0] = 0; //@line 13397
 HEAP8[$6 >> 0] = HEAP8[$2 + 1156 >> 0] << 7; //@line 13401
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 13402
 $24 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($2, $8, $10, 0, 0, 0) | 0; //@line 13403
 if (!___async) {
  HEAP32[___async_retval >> 2] = $24; //@line 13407
  ___async_unwind = 0; //@line 13408
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 483; //@line 13410
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 13412
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $12; //@line 13414
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $14; //@line 13416
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $16; //@line 13418
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $18; //@line 13420
 HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $6; //@line 13422
 HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $4; //@line 13424
 sp = STACKTOP; //@line 13425
 return;
}
function __ZN4mbed5Timer7read_msEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $21 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4234
 $2 = $0 + 16 | 0; //@line 4236
 $4 = HEAP32[$2 >> 2] | 0; //@line 4238
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 4241
 if (!(HEAP32[$0 >> 2] | 0)) {
  $29 = 0; //@line 4245
  $30 = 0; //@line 4245
  $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 4246
  $32 = tempRet0; //@line 4247
  $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 4248
  $34 = tempRet0; //@line 4249
  return $33 | 0; //@line 4250
 }
 $11 = HEAP32[$0 + 24 >> 2] | 0; //@line 4253
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4254
 $12 = _ticker_read_us($11) | 0; //@line 4255
 $13 = tempRet0; //@line 4256
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 171; //@line 4259
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4261
  $16 = $AsyncCtx + 8 | 0; //@line 4263
  HEAP32[$16 >> 2] = $4; //@line 4265
  HEAP32[$16 + 4 >> 2] = $7; //@line 4268
  sp = STACKTOP; //@line 4269
  return 0; //@line 4270
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4272
 $21 = $0 + 8 | 0; //@line 4274
 $27 = _i64Subtract($12 | 0, $13 | 0, HEAP32[$21 >> 2] | 0, HEAP32[$21 + 4 >> 2] | 0) | 0; //@line 4280
 $29 = $27; //@line 4282
 $30 = tempRet0; //@line 4282
 $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 4283
 $32 = tempRet0; //@line 4284
 $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 4285
 $34 = tempRet0; //@line 4286
 return $33 | 0; //@line 4287
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv($0) {
 $0 = $0 | 0;
 var $14 = 0, $17 = 0, $19 = 0, $20 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 2773
 STACKTOP = STACKTOP + 16 | 0; //@line 2774
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2774
 _printf(10904, sp) | 0; //@line 2777
 _printf(11320, sp + 8 | 0) | 0; //@line 2778
 $AsyncCtx4 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2779
 _putchar(10) | 0; //@line 2780
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 128; //@line 2783
  HEAP32[$AsyncCtx4 + 4 >> 2] = $0; //@line 2785
  sp = STACKTOP; //@line 2786
  STACKTOP = sp; //@line 2787
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 2789
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 2791
 HEAP8[$0 + 688 >> 0] = 0; //@line 2793
 $5 = HEAP32[$0 + 784 >> 2] | 0; //@line 2795
 if (!$5) {
  STACKTOP = sp; //@line 2798
  return;
 }
 $8 = HEAP32[$5 + 44 >> 2] | 0; //@line 2801
 if (!$8) {
  STACKTOP = sp; //@line 2804
  return;
 }
 $14 = HEAPU8[$0 + 782 >> 0] | 0; //@line 2810
 $17 = HEAP8[$0 + 781 >> 0] | 0; //@line 2813
 $19 = HEAP8[$0 + 780 >> 0] | 0; //@line 2815
 $20 = HEAP32[$8 >> 2] | 0; //@line 2816
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2817
 FUNCTION_TABLE_viiiii[$20 & 7]($5 + 32 | 0, $0 + 788 | 0, $14, $17, $19); //@line 2818
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 129; //@line 2821
  sp = STACKTOP; //@line 2822
  STACKTOP = sp; //@line 2823
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2825
 STACKTOP = sp; //@line 2826
 return;
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 27330
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 27340
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 27340
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 27340
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 27344
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 27347
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 27350
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 27358
  } else {
   $20 = 0; //@line 27360
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 27370
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 27374
  HEAP32[___async_retval >> 2] = $$1; //@line 27376
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 27379
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 27380
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 27384
  ___async_unwind = 0; //@line 27385
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 773; //@line 27387
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 27389
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 27391
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 27393
 sp = STACKTOP; //@line 27394
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_461($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 33971
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33975
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33977
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 33979
 $8 = (HEAP32[$0 + 4 >> 2] | 0) + 16 | 0; //@line 33980
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 33981
 $9 = HEAP32[$4 >> 2] | 0; //@line 33982
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 33986
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 33987
  FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 33988
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 665; //@line 33991
   $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 33992
   HEAP32[$13 >> 2] = $8; //@line 33993
   sp = STACKTOP; //@line 33994
   return;
  }
  ___async_unwind = 0; //@line 33997
  HEAP32[$ReallocAsyncCtx3 >> 2] = 665; //@line 33998
  $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 33999
  HEAP32[$13 >> 2] = $8; //@line 34000
  sp = STACKTOP; //@line 34001
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 34008
 _mbed_assert_internal(13734, 13752, 57); //@line 34009
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 666; //@line 34012
  sp = STACKTOP; //@line 34013
  return;
 }
 ___async_unwind = 0; //@line 34016
 HEAP32[$ReallocAsyncCtx5 >> 2] = 666; //@line 34017
 sp = STACKTOP; //@line 34018
 return;
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28600
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28602
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28604
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28606
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 28611
  } else {
   $9 = $4 + 4 | 0; //@line 28613
   $10 = HEAP32[$9 >> 2] | 0; //@line 28614
   $11 = $4 + 8 | 0; //@line 28615
   $12 = HEAP32[$11 >> 2] | 0; //@line 28616
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 28620
    HEAP32[$6 >> 2] = 0; //@line 28621
    HEAP32[$2 >> 2] = 0; //@line 28622
    HEAP32[$11 >> 2] = 0; //@line 28623
    HEAP32[$9 >> 2] = 0; //@line 28624
    $$0 = 0; //@line 28625
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 28632
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 28633
   FUNCTION_TABLE_iiii[$18 & 15]($4, $10 - $12 | 0, 1) | 0; //@line 28634
   if (!___async) {
    ___async_unwind = 0; //@line 28637
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 775; //@line 28639
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 28641
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 28643
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 28645
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 28647
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 28649
   sp = STACKTOP; //@line 28650
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 28655
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_90($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 25635
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25645
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 25647
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25649
 $18 = HEAP32[$10 >> 2] | 0; //@line 25656
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 44 >> 2] | 0; //@line 25659
 $24 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 25662
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 25663
 FUNCTION_TABLE_viii[$21 & 7]($18, 1, $24); //@line 25664
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 624; //@line 25667
  $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 25668
  HEAP32[$25 >> 2] = $10; //@line 25669
  $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 25670
  HEAP8[$26 >> 0] = $12; //@line 25671
  $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 25672
  HEAP32[$27 >> 2] = $14; //@line 25673
  sp = STACKTOP; //@line 25674
  return;
 }
 ___async_unwind = 0; //@line 25677
 HEAP32[$ReallocAsyncCtx8 >> 2] = 624; //@line 25678
 $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 25679
 HEAP32[$25 >> 2] = $10; //@line 25680
 $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 25681
 HEAP8[$26 >> 0] = $12; //@line 25682
 $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 25683
 HEAP32[$27 >> 2] = $14; //@line 25684
 sp = STACKTOP; //@line 25685
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_89($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 25578
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25588
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 25590
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25592
 $18 = HEAP32[$10 >> 2] | 0; //@line 25599
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 44 >> 2] | 0; //@line 25602
 $24 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 25605
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 25606
 FUNCTION_TABLE_viii[$21 & 7]($18, 0, $24); //@line 25607
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 624; //@line 25610
  $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 25611
  HEAP32[$25 >> 2] = $10; //@line 25612
  $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 25613
  HEAP8[$26 >> 0] = $12; //@line 25614
  $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 25615
  HEAP32[$27 >> 2] = $14; //@line 25616
  sp = STACKTOP; //@line 25617
  return;
 }
 ___async_unwind = 0; //@line 25620
 HEAP32[$ReallocAsyncCtx8 >> 2] = 624; //@line 25621
 $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 25622
 HEAP32[$25 >> 2] = $10; //@line 25623
 $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 25624
 HEAP8[$26 >> 0] = $12; //@line 25625
 $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 25626
 HEAP32[$27 >> 2] = $14; //@line 25627
 sp = STACKTOP; //@line 25628
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22982
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22984
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22986
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22988
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22990
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22992
 $$pre = HEAP32[$2 >> 2] | 0; //@line 22993
 if (!$$pre) {
  HEAP32[$4 >> 2] = 0; //@line 22996
  _gpio_irq_set($10 + 28 | 0, 2, 1); //@line 22998
  return;
 }
 $13 = HEAP32[$$pre + 4 >> 2] | 0; //@line 23002
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 23003
 FUNCTION_TABLE_vii[$13 & 31]($6, $8); //@line 23004
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 159; //@line 23007
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 23008
  HEAP32[$14 >> 2] = $2; //@line 23009
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 23010
  HEAP32[$15 >> 2] = $4; //@line 23011
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 23012
  HEAP32[$16 >> 2] = $10; //@line 23013
  sp = STACKTOP; //@line 23014
  return;
 }
 ___async_unwind = 0; //@line 23017
 HEAP32[$ReallocAsyncCtx2 >> 2] = 159; //@line 23018
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 23019
 HEAP32[$14 >> 2] = $2; //@line 23020
 $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 23021
 HEAP32[$15 >> 2] = $4; //@line 23022
 $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 23023
 HEAP32[$16 >> 2] = $10; //@line 23024
 sp = STACKTOP; //@line 23025
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14556
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14558
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14563
 $7 = HEAP32[$2 >> 2] | 0; //@line 14564
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] | 0; //@line 14567
 if (HEAP8[$0 + 8 >> 0] & 1) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 14569
  FUNCTION_TABLE_vii[$10 & 31]($7, 0); //@line 14570
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 650; //@line 14573
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 14574
   HEAP32[$12 >> 2] = $2; //@line 14575
   sp = STACKTOP; //@line 14576
   return;
  }
  ___async_unwind = 0; //@line 14579
  HEAP32[$ReallocAsyncCtx3 >> 2] = 650; //@line 14580
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 14581
  HEAP32[$12 >> 2] = $2; //@line 14582
  sp = STACKTOP; //@line 14583
  return;
 } else {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 14586
  FUNCTION_TABLE_vii[$10 & 31]($7, $6); //@line 14587
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 649; //@line 14590
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 14591
   HEAP32[$11 >> 2] = $2; //@line 14592
   sp = STACKTOP; //@line 14593
   return;
  }
  ___async_unwind = 0; //@line 14596
  HEAP32[$ReallocAsyncCtx2 >> 2] = 649; //@line 14597
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 14598
  HEAP32[$11 >> 2] = $2; //@line 14599
  sp = STACKTOP; //@line 14600
  return;
 }
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 13971
 STACKTOP = STACKTOP + 16 | 0; //@line 13972
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13972
 _printf(12967, sp) | 0; //@line 13975
 _printf(13168, sp + 8 | 0) | 0; //@line 13976
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13977
 _putchar(10) | 0; //@line 13978
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 427; //@line 13981
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13983
  sp = STACKTOP; //@line 13984
  STACKTOP = sp; //@line 13985
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13987
 $3 = HEAP32[$0 + 356 >> 2] | 0; //@line 13989
 $AsyncCtx4 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13991
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($3, $0 + 1076 | 0); //@line 13992
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 428; //@line 13995
  HEAP32[$AsyncCtx4 + 4 >> 2] = $0; //@line 13997
  sp = STACKTOP; //@line 13998
  STACKTOP = sp; //@line 13999
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 14001
 if (HEAP8[$0 + 373 >> 0] | 0) {
  HEAP8[$0 + 377 >> 0] = 1; //@line 14007
  $10 = $0 + 968 | 0; //@line 14008
  HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -5; //@line 14011
 }
 if ((HEAP32[$0 + 360 >> 2] | 0) != 2) {
  STACKTOP = sp; //@line 14017
  return;
 }
 $16 = $0 + 944 | 0; //@line 14019
 HEAP8[$16 >> 0] = HEAP8[$16 >> 0] | 32; //@line 14022
 STACKTOP = sp; //@line 14023
 return;
}
function __ZN7LoRaPHY20put_radio_to_standbyEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25962
 $1 = $0 + 4 | 0; //@line 25963
 $2 = HEAP32[$1 >> 2] | 0; //@line 25964
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 25967
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 25968
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 25969
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 642; //@line 25972
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 25974
  sp = STACKTOP; //@line 25975
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 25978
 $7 = HEAP32[$1 >> 2] | 0; //@line 25979
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0; //@line 25982
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 25983
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 25984
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 643; //@line 25987
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 25989
  sp = STACKTOP; //@line 25990
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 25993
 $12 = HEAP32[$1 >> 2] | 0; //@line 25994
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 25997
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 25998
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 25999
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 644; //@line 26002
  sp = STACKTOP; //@line 26003
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 26006
  return;
 }
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10315
 STACKTOP = STACKTOP + 32 | 0; //@line 10316
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10316
 $2 = sp + 12 | 0; //@line 10319
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(11887, sp) | 0; //@line 10324
  _printf(12684, sp + 8 | 0) | 0; //@line 10325
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10326
  _putchar(10) | 0; //@line 10327
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 328; //@line 10330
   sp = STACKTOP; //@line 10331
   STACKTOP = sp; //@line 10332
   return 0; //@line 10332
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10334
  $$0 = -1012; //@line 10335
  STACKTOP = sp; //@line 10336
  return $$0 | 0; //@line 10336
 } else {
  HEAP32[$2 >> 2] = 2; //@line 10339
  HEAP8[$2 + 4 >> 0] = $1 & 1; //@line 10341
  $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10343
  $9 = __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($0 + 4 | 0, $2) | 0; //@line 10344
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 329; //@line 10347
   HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 10349
   sp = STACKTOP; //@line 10350
   STACKTOP = sp; //@line 10351
   return 0; //@line 10351
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10353
  $$0 = $9; //@line 10354
  STACKTOP = sp; //@line 10355
  return $$0 | 0; //@line 10355
 }
 return 0; //@line 10357
}
function __ZN7LoRaPHY18put_radio_to_sleepEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25910
 $1 = $0 + 4 | 0; //@line 25911
 $2 = HEAP32[$1 >> 2] | 0; //@line 25912
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 25915
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 25916
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 25917
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 639; //@line 25920
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 25922
  sp = STACKTOP; //@line 25923
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 25926
 $7 = HEAP32[$1 >> 2] | 0; //@line 25927
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 25930
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 25931
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 25932
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 640; //@line 25935
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 25937
  sp = STACKTOP; //@line 25938
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 25941
 $12 = HEAP32[$1 >> 2] | 0; //@line 25942
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 25945
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 25946
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 25947
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 641; //@line 25950
  sp = STACKTOP; //@line 25951
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 25954
  return;
 }
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30489
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30499
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30503
 $16 = (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) != 0; //@line 30505
 $18 = HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 1108 >> 2] | 0; //@line 30507
 _printf(12967, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 30508
 _printf(13043, $10) | 0; //@line 30509
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 30510
 _putchar(10) | 0; //@line 30511
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 515; //@line 30514
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 30515
  HEAP32[$19 >> 2] = $14; //@line 30516
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 30517
  $$expand_i1_val = $16 & 1; //@line 30518
  HEAP8[$20 >> 0] = $$expand_i1_val; //@line 30519
  $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 30520
  HEAP32[$21 >> 2] = $18; //@line 30521
  sp = STACKTOP; //@line 30522
  return;
 }
 ___async_unwind = 0; //@line 30525
 HEAP32[$ReallocAsyncCtx2 >> 2] = 515; //@line 30526
 $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 30527
 HEAP32[$19 >> 2] = $14; //@line 30528
 $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 30529
 $$expand_i1_val = $16 & 1; //@line 30530
 HEAP8[$20 >> 0] = $$expand_i1_val; //@line 30531
 $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 30532
 HEAP32[$21 >> 2] = $18; //@line 30533
 sp = STACKTOP; //@line 30534
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 16372
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16374
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16376
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 16379
  $5 = _mbedtls_cipher_cmac_finish(22564, 23872) | 0; //@line 16380
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 604; //@line 16383
   $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 16384
   HEAP32[$6 >> 2] = $2; //@line 16385
   sp = STACKTOP; //@line 16386
   return;
  }
  HEAP32[___async_retval >> 2] = $5; //@line 16390
  ___async_unwind = 0; //@line 16391
  HEAP32[$ReallocAsyncCtx2 >> 2] = 604; //@line 16392
  $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 16393
  HEAP32[$6 >> 2] = $2; //@line 16394
  sp = STACKTOP; //@line 16395
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 16398
  _mbedtls_cipher_free(22564); //@line 16399
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 605; //@line 16402
   $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 16403
   HEAP32[$8 >> 2] = $AsyncRetVal; //@line 16404
   sp = STACKTOP; //@line 16405
   return;
  }
  ___async_unwind = 0; //@line 16408
  HEAP32[$ReallocAsyncCtx5 >> 2] = 605; //@line 16409
  $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 16410
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 16411
  sp = STACKTOP; //@line 16412
  return;
 }
}
function __Z11compute_micPKhtS0_jhjPj__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 34126
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34128
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 34130
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 34133
  $5 = _mbedtls_cipher_cmac_finish(22564, 23872) | 0; //@line 34134
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 599; //@line 34137
   $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 34138
   HEAP32[$6 >> 2] = $2; //@line 34139
   sp = STACKTOP; //@line 34140
   return;
  }
  HEAP32[___async_retval >> 2] = $5; //@line 34144
  ___async_unwind = 0; //@line 34145
  HEAP32[$ReallocAsyncCtx3 >> 2] = 599; //@line 34146
  $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 34147
  HEAP32[$6 >> 2] = $2; //@line 34148
  sp = STACKTOP; //@line 34149
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 34152
  _mbedtls_cipher_free(22564); //@line 34153
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 34156
   $8 = $ReallocAsyncCtx6 + 4 | 0; //@line 34157
   HEAP32[$8 >> 2] = $AsyncRetVal; //@line 34158
   sp = STACKTOP; //@line 34159
   return;
  }
  ___async_unwind = 0; //@line 34162
  HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 34163
  $8 = $ReallocAsyncCtx6 + 4 | 0; //@line 34164
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 34165
  sp = STACKTOP; //@line 34166
  return;
 }
}
function __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0) {
 $0 = $0 | 0;
 var $14 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2702
 STACKTOP = STACKTOP + 16 | 0; //@line 2703
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2703
 _printf(10904, sp) | 0; //@line 2706
 _printf(11028, sp + 8 | 0) | 0; //@line 2707
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2708
 _putchar(10) | 0; //@line 2709
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 127; //@line 2712
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2714
  sp = STACKTOP; //@line 2715
  STACKTOP = sp; //@line 2716
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2718
 if ((HEAP32[$0 + 652 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$0 + 484 >> 2] | 0, 0) | 0; //@line 2725
 }
 if ((HEAP32[$0 + 656 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$0 + 508 >> 2] | 0, 0) | 0; //@line 2733
 }
 if ((HEAP32[$0 + 672 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$0 + 604 >> 2] | 0, 0) | 0; //@line 2741
 }
 $14 = $0 + 660 | 0; //@line 2743
 if ((HEAP32[$14 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$0 + 532 >> 2] | 0, 0) | 0; //@line 2749
  if ((HEAP32[$14 >> 2] | 0) != -1) {
   _emscripten_asm_const_iii(3, HEAP32[$0 + 556 >> 2] | 0, 0) | 0; //@line 2755
  }
 }
 if ((HEAP32[$0 + 668 >> 2] | 0) == -1) {
  STACKTOP = sp; //@line 2762
  return;
 }
 _emscripten_asm_const_iii(3, HEAP32[$0 + 580 >> 2] | 0, 0) | 0; //@line 2766
 STACKTOP = sp; //@line 2767
 return;
}
function _equeue_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$032$i = 0, $$033$i = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $29 = 0, $5 = 0, $6 = 0;
 $2 = _malloc($1) | 0; //@line 4430
 if (!$2) {
  $$0 = -1; //@line 4433
  return $$0 | 0; //@line 4434
 }
 HEAP32[$0 + 12 >> 2] = $2; //@line 4437
 $5 = $0 + 20 | 0; //@line 4438
 HEAP32[$5 >> 2] = 0; //@line 4439
 $6 = $0 + 16 | 0; //@line 4440
 HEAP32[$6 >> 2] = 0; //@line 4441
 if ($1 | 0) {
  $$033$i = $1; //@line 4444
  $22 = 0; //@line 4444
  do {
   $22 = $22 + 1 | 0; //@line 4446
   $$033$i = $$033$i >>> 1; //@line 4447
  } while (($$033$i | 0) != 0);
  HEAP32[$6 >> 2] = $22; //@line 4455
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 4458
 HEAP32[$0 + 28 >> 2] = $1; //@line 4460
 HEAP32[$0 + 32 >> 2] = $2; //@line 4462
 HEAP32[$0 >> 2] = 0; //@line 4463
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 4466
 HEAP8[$0 + 9 >> 0] = 0; //@line 4468
 HEAP8[$0 + 8 >> 0] = 0; //@line 4470
 HEAP8[$0 + 36 >> 0] = 0; //@line 4472
 HEAP32[$0 + 40 >> 2] = 0; //@line 4474
 HEAP32[$0 + 44 >> 2] = 0; //@line 4476
 $20 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 4478
 if (($20 | 0) < 0) {
  $$032$i = $20; //@line 4481
 } else {
  $26 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 4484
  if (($26 | 0) < 0) {
   $$032$i = $26; //@line 4487
  } else {
   $29 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 4490
   $$032$i = ($29 | 0) < 0 ? $29 : 0; //@line 4493
  }
 }
 HEAP32[$5 >> 2] = $2; //@line 4496
 $$0 = $$032$i; //@line 4497
 return $$0 | 0; //@line 4498
}
function __ZN12LoRaWANStack17send_frame_to_macEv__async_cb_17($0) {
 $0 = $0 | 0;
 var $$sink2$sink = 0, $10 = 0, $12 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17398
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17404
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17406
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17408
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17410
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $$sink2$sink = HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 0] | 0; //@line 17417
 } else {
  $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv((HEAP32[$0 + 8 >> 2] | 0) + 1336 | 0) | 0; //@line 17421
 }
 HEAP8[$8 + 5 >> 0] = $$sink2$sink; //@line 17424
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 17425
 $20 = __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($6, $8) | 0; //@line 17426
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 296; //@line 17429
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 17430
  HEAP32[$21 >> 2] = $10; //@line 17431
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 17432
  HEAP32[$22 >> 2] = $12; //@line 17433
  sp = STACKTOP; //@line 17434
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 17438
 ___async_unwind = 0; //@line 17439
 HEAP32[$ReallocAsyncCtx >> 2] = 296; //@line 17440
 $21 = $ReallocAsyncCtx + 4 | 0; //@line 17441
 HEAP32[$21 >> 2] = $10; //@line 17442
 $22 = $ReallocAsyncCtx + 8 | 0; //@line 17443
 HEAP32[$22 >> 2] = $12; //@line 17444
 sp = STACKTOP; //@line 17445
 return;
}
function __ZN12LoRaWANStack17send_frame_to_macEv__async_cb_16($0) {
 $0 = $0 | 0;
 var $$sink2$sink = 0, $10 = 0, $12 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17344
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17350
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17352
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17354
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17356
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $$sink2$sink = HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 0] | 0; //@line 17363
 } else {
  $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv((HEAP32[$0 + 8 >> 2] | 0) + 1336 | 0) | 0; //@line 17367
 }
 HEAP8[$8 + 5 >> 0] = $$sink2$sink; //@line 17370
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 17371
 $20 = __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($6, $8) | 0; //@line 17372
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 296; //@line 17375
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 17376
  HEAP32[$21 >> 2] = $10; //@line 17377
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 17378
  HEAP32[$22 >> 2] = $12; //@line 17379
  sp = STACKTOP; //@line 17380
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 17384
 ___async_unwind = 0; //@line 17385
 HEAP32[$ReallocAsyncCtx >> 2] = 296; //@line 17386
 $21 = $ReallocAsyncCtx + 4 | 0; //@line 17387
 HEAP32[$21 >> 2] = $10; //@line 17388
 $22 = $ReallocAsyncCtx + 8 | 0; //@line 17389
 HEAP32[$22 >> 2] = $12; //@line 17390
 sp = STACKTOP; //@line 17391
 return;
}
function __ZN12LoRaWANStack17send_frame_to_macEv__async_cb_15($0) {
 $0 = $0 | 0;
 var $$sink2$sink = 0, $10 = 0, $12 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17290
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17296
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17298
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17300
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17302
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $$sink2$sink = HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 0] | 0; //@line 17309
 } else {
  $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv((HEAP32[$0 + 8 >> 2] | 0) + 1336 | 0) | 0; //@line 17313
 }
 HEAP8[$8 + 5 >> 0] = $$sink2$sink; //@line 17316
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 17317
 $20 = __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($6, $8) | 0; //@line 17318
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 296; //@line 17321
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 17322
  HEAP32[$21 >> 2] = $10; //@line 17323
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 17324
  HEAP32[$22 >> 2] = $12; //@line 17325
  sp = STACKTOP; //@line 17326
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 17330
 ___async_unwind = 0; //@line 17331
 HEAP32[$ReallocAsyncCtx >> 2] = 296; //@line 17332
 $21 = $ReallocAsyncCtx + 4 | 0; //@line 17333
 HEAP32[$21 >> 2] = $10; //@line 17334
 $22 = $ReallocAsyncCtx + 8 | 0; //@line 17335
 HEAP32[$22 >> 2] = $12; //@line 17336
 sp = STACKTOP; //@line 17337
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 35509
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35511
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35513
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35515
 $7 = $2 + 12 | 0; //@line 35516
 $8 = HEAP32[$7 >> 2] | 0; //@line 35517
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 35520
  HEAP32[$6 + 16 >> 2] = 0; //@line 35522
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 35526
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 35527
 FUNCTION_TABLE_vii[$11 & 31]($6, $2); //@line 35528
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 661; //@line 35531
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 35532
  HEAP32[$12 >> 2] = $7; //@line 35533
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 35534
  HEAP32[$13 >> 2] = $4; //@line 35535
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 35536
  HEAP32[$14 >> 2] = $6; //@line 35537
  sp = STACKTOP; //@line 35538
  return;
 }
 ___async_unwind = 0; //@line 35541
 HEAP32[$ReallocAsyncCtx2 >> 2] = 661; //@line 35542
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 35543
 HEAP32[$12 >> 2] = $7; //@line 35544
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 35545
 HEAP32[$13 >> 2] = $4; //@line 35546
 $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 35547
 HEAP32[$14 >> 2] = $6; //@line 35548
 sp = STACKTOP; //@line 35549
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 32897
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32899
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32901
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32903
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32905
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32907
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32909
 $13 = HEAP32[$2 >> 2] | 0; //@line 32910
 $15 = $12 + 12 | 0; //@line 32912
 HEAP32[$12 >> 2] = 526; //@line 32913
 HEAP32[$12 + 4 >> 2] = 0; //@line 32915
 HEAP32[$12 + 8 >> 2] = $4; //@line 32917
 HEAP32[$15 >> 2] = 848; //@line 32918
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 32919
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($13, $4 + 1016 | 0, $12); //@line 32920
 if (!___async) {
  ___async_unwind = 0; //@line 32923
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 527; //@line 32925
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $15; //@line 32927
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $2; //@line 32929
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $4; //@line 32931
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $10; //@line 32933
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $6; //@line 32935
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $8; //@line 32937
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $12; //@line 32939
 sp = STACKTOP; //@line 32940
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_124($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30610
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30612
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30614
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30616
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30618
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30620
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30622
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30624
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30626
 $17 = HEAP32[$2 >> 2] | 0; //@line 30627
 $20 = HEAP32[(HEAP32[$17 >> 2] | 0) + 24 >> 2] | 0; //@line 30630
 $23 = (__ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0) + 10 | 0; //@line 30633
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 30634
 FUNCTION_TABLE_iiii[$20 & 15]($17, $6, $23) | 0; //@line 30635
 if (!___async) {
  ___async_unwind = 0; //@line 30638
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 514; //@line 30640
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $8; //@line 30642
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 30644
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $10; //@line 30646
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $12; //@line 30648
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $14; //@line 30650
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $16; //@line 30652
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $2; //@line 30654
 sp = STACKTOP; //@line 30655
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_463($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 34057
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34059
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34061
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34063
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 34065
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 34070
  return;
 }
 dest = $2 + 4 | 0; //@line 34074
 stop = dest + 52 | 0; //@line 34074
 do {
  HEAP32[dest >> 2] = 0; //@line 34074
  dest = dest + 4 | 0; //@line 34074
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 34075
 HEAP32[$2 + 8 >> 2] = $4; //@line 34077
 HEAP32[$2 + 12 >> 2] = -1; //@line 34079
 HEAP32[$2 + 48 >> 2] = 1; //@line 34081
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 34084
 $16 = HEAP32[$6 >> 2] | 0; //@line 34085
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 34086
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 34087
 if (!___async) {
  ___async_unwind = 0; //@line 34090
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 790; //@line 34092
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 34094
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 34096
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 34098
 sp = STACKTOP; //@line 34099
 return;
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 13965
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 13970
    $$0 = 1; //@line 13971
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 13984
     $$0 = 1; //@line 13985
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 13989
     $$0 = -1; //@line 13990
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 14000
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 14004
    $$0 = 2; //@line 14005
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 14017
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 14023
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 14027
    $$0 = 3; //@line 14028
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 14038
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 14044
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 14050
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 14054
    $$0 = 4; //@line 14055
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 14059
    $$0 = -1; //@line 14060
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 14065
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20281
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$0 = -1002; //@line 20285
  return $$0 | 0; //@line 20286
 }
 if (((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) <= ($1 & 255)) {
  $$0 = -1003; //@line 20292
  return $$0 | 0; //@line 20293
 }
 $7 = HEAP32[$0 >> 2] | 0; //@line 20295
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 64 >> 2] | 0; //@line 20298
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 20299
 $11 = FUNCTION_TABLE_iii[$10 & 31]($7, $1) | 0; //@line 20300
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 588; //@line 20303
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 20305
  sp = STACKTOP; //@line 20306
  return 0; //@line 20307
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 20309
 if (!$11) {
  $$0 = -1003; //@line 20311
  return $$0 | 0; //@line 20312
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 20314
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 20315
 __ZN7LoRaPHY18put_radio_to_sleepEv($13); //@line 20316
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 589; //@line 20319
  sp = STACKTOP; //@line 20320
  return 0; //@line 20321
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 20323
 $$0 = 0; //@line 20324
 return $$0 | 0; //@line 20325
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_300($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14192
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14196
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14198
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14199
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 14203
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 14204
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 14205
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 215; //@line 14208
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 14209
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 14210
   sp = STACKTOP; //@line 14211
   return;
  }
  ___async_unwind = 0; //@line 14214
  HEAP32[$ReallocAsyncCtx2 >> 2] = 215; //@line 14215
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 14216
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 14217
  sp = STACKTOP; //@line 14218
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(4) | 0; //@line 14225
 _mbed_assert_internal(12851, 11935, 843); //@line 14226
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 216; //@line 14229
  sp = STACKTOP; //@line 14230
  return;
 }
 ___async_unwind = 0; //@line 14233
 HEAP32[$ReallocAsyncCtx11 >> 2] = 216; //@line 14234
 sp = STACKTOP; //@line 14235
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_67($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23618
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23620
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23622
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23624
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23626
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23628
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23630
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23632
 $16 = $2 + 360 | 0; //@line 23634
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 23635
 $17 = __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($2 + 348 | 0, $4, $16) | 0; //@line 23636
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 23640
  ___async_unwind = 0; //@line 23641
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 562; //@line 23643
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $16; //@line 23645
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 23647
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 23649
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 23651
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 23653
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 23655
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 23657
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $2; //@line 23659
 sp = STACKTOP; //@line 23660
 return;
}
function __ZN12LoRaWANStack22set_link_check_requestEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10678
 STACKTOP = STACKTOP + 32 | 0; //@line 10679
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10679
 $1 = sp + 12 | 0; //@line 10682
 if (!(HEAP32[$0 + 1908 >> 2] | 0)) {
  _printf(11887, sp) | 0; //@line 10687
  _printf(12794, sp + 8 | 0) | 0; //@line 10688
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10689
  _putchar(10) | 0; //@line 10690
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 338; //@line 10693
   sp = STACKTOP; //@line 10694
   STACKTOP = sp; //@line 10695
   return 0; //@line 10695
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10697
  $$0 = -1003; //@line 10698
  STACKTOP = sp; //@line 10699
  return $$0 | 0; //@line 10699
 } else {
  HEAP32[$1 >> 2] = 1; //@line 10701
  $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10703
  $6 = __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($0 + 4 | 0, $1) | 0; //@line 10704
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 339; //@line 10707
   HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 10709
   sp = STACKTOP; //@line 10710
   STACKTOP = sp; //@line 10711
   return 0; //@line 10711
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10713
  $$0 = $6; //@line 10714
  STACKTOP = sp; //@line 10715
  return $$0 | 0; //@line 10715
 }
 return 0; //@line 10717
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_278($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13089
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13093
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13095
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 13096
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 13100
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 13101
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 13102
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 230; //@line 13105
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 13106
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 13107
   sp = STACKTOP; //@line 13108
   return;
  }
  ___async_unwind = 0; //@line 13111
  HEAP32[$ReallocAsyncCtx2 >> 2] = 230; //@line 13112
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 13113
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 13114
  sp = STACKTOP; //@line 13115
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 13122
 _mbed_assert_internal(12851, 11935, 715); //@line 13123
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 231; //@line 13126
  sp = STACKTOP; //@line 13127
  return;
 }
 ___async_unwind = 0; //@line 13130
 HEAP32[$ReallocAsyncCtx13 >> 2] = 231; //@line 13131
 sp = STACKTOP; //@line 13132
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_277($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 13040
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13044
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13046
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 13047
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 13051
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 13052
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 13053
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 234; //@line 13056
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 13057
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 13058
   sp = STACKTOP; //@line 13059
   return;
  }
  ___async_unwind = 0; //@line 13062
  HEAP32[$ReallocAsyncCtx4 >> 2] = 234; //@line 13063
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 13064
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 13065
  sp = STACKTOP; //@line 13066
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(4) | 0; //@line 13073
 _mbed_assert_internal(12851, 11935, 737); //@line 13074
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 235; //@line 13077
  sp = STACKTOP; //@line 13078
  return;
 }
 ___async_unwind = 0; //@line 13081
 HEAP32[$ReallocAsyncCtx12 >> 2] = 235; //@line 13082
 sp = STACKTOP; //@line 13083
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_337($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22828
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22832
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22834
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22835
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 22839
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 22840
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 22841
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 201; //@line 22844
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 22845
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22846
   sp = STACKTOP; //@line 22847
   return;
  }
  ___async_unwind = 0; //@line 22850
  HEAP32[$ReallocAsyncCtx2 >> 2] = 201; //@line 22851
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 22852
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22853
  sp = STACKTOP; //@line 22854
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(4) | 0; //@line 22861
 _mbed_assert_internal(12851, 11935, 786); //@line 22862
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 202; //@line 22865
  sp = STACKTOP; //@line 22866
  return;
 }
 ___async_unwind = 0; //@line 22869
 HEAP32[$ReallocAsyncCtx15 >> 2] = 202; //@line 22870
 sp = STACKTOP; //@line 22871
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_336($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22779
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22783
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22785
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22786
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 22790
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 22791
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 22792
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 205; //@line 22795
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 22796
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22797
   sp = STACKTOP; //@line 22798
   return;
  }
  ___async_unwind = 0; //@line 22801
  HEAP32[$ReallocAsyncCtx4 >> 2] = 205; //@line 22802
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 22803
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22804
  sp = STACKTOP; //@line 22805
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(4) | 0; //@line 22812
 _mbed_assert_internal(12851, 11935, 797); //@line 22813
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 206; //@line 22816
  sp = STACKTOP; //@line 22817
  return;
 }
 ___async_unwind = 0; //@line 22820
 HEAP32[$ReallocAsyncCtx14 >> 2] = 206; //@line 22821
 sp = STACKTOP; //@line 22822
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_335($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22730
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22734
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22736
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22737
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 22741
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 22742
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 22743
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 209; //@line 22746
   $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 22747
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22748
   sp = STACKTOP; //@line 22749
   return;
  }
  ___async_unwind = 0; //@line 22752
  HEAP32[$ReallocAsyncCtx6 >> 2] = 209; //@line 22753
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 22754
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22755
  sp = STACKTOP; //@line 22756
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 22763
 _mbed_assert_internal(12851, 11935, 821); //@line 22764
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 210; //@line 22767
  sp = STACKTOP; //@line 22768
  return;
 }
 ___async_unwind = 0; //@line 22771
 HEAP32[$ReallocAsyncCtx13 >> 2] = 210; //@line 22772
 sp = STACKTOP; //@line 22773
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 17617
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17619
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17621
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17623
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17625
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17627
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 0; //@line 17631
 HEAP8[$4 >> 0] = 1; //@line 17632
 $14 = $2 + 944 | 0; //@line 17633
 HEAP8[$14 >> 0] = HEAP8[$14 >> 0] | 32; //@line 17636
 $17 = HEAP32[$6 >> 2] | 0; //@line 17637
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 17639
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($17, $2 + 996 | 0, 1); //@line 17640
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 17643
  $19 = $ReallocAsyncCtx17 + 4 | 0; //@line 17644
  HEAP32[$19 >> 2] = $8; //@line 17645
  $20 = $ReallocAsyncCtx17 + 8 | 0; //@line 17646
  HEAP32[$20 >> 2] = $10; //@line 17647
  sp = STACKTOP; //@line 17648
  return;
 }
 ___async_unwind = 0; //@line 17651
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 17652
 $19 = $ReallocAsyncCtx17 + 4 | 0; //@line 17653
 HEAP32[$19 >> 2] = $8; //@line 17654
 $20 = $ReallocAsyncCtx17 + 8 | 0; //@line 17655
 HEAP32[$20 >> 2] = $10; //@line 17656
 sp = STACKTOP; //@line 17657
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_272($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 12902
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12906
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12908
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12910
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12912
 $11 = $4 + 12 | 0; //@line 12914
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 12915
 $13 = HEAP8[$6 + 12 >> 0] | 0; //@line 12917
 $15 = HEAP8[$6 + 13 >> 0] | 0; //@line 12919
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 12920
 $16 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($8, $4, $13, $15) | 0; //@line 12921
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 233; //@line 12924
  $17 = $ReallocAsyncCtx8 + 4 | 0; //@line 12925
  HEAP32[$17 >> 2] = $11; //@line 12926
  $18 = $ReallocAsyncCtx8 + 8 | 0; //@line 12927
  HEAP32[$18 >> 2] = $10; //@line 12928
  sp = STACKTOP; //@line 12929
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 12933
 ___async_unwind = 0; //@line 12934
 HEAP32[$ReallocAsyncCtx8 >> 2] = 233; //@line 12935
 $17 = $ReallocAsyncCtx8 + 4 | 0; //@line 12936
 HEAP32[$17 >> 2] = $11; //@line 12937
 $18 = $ReallocAsyncCtx8 + 8 | 0; //@line 12938
 HEAP32[$18 >> 2] = $10; //@line 12939
 sp = STACKTOP; //@line 12940
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_424($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 30566
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30568
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30570
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30572
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30574
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30576
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30578
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30580
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30582
 HEAP32[$2 >> 2] = 4; //@line 30583
 HEAP32[$6 >> 2] = HEAP32[$4 + 1944 >> 2]; //@line 30586
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(36) | 0; //@line 30587
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($8, $10) | 0; //@line 30588
 if (!___async) {
  ___async_unwind = 0; //@line 30591
 }
 HEAP32[$ReallocAsyncCtx18 >> 2] = 252; //@line 30593
 HEAP32[$ReallocAsyncCtx18 + 4 >> 2] = $2; //@line 30595
 HEAP32[$ReallocAsyncCtx18 + 8 >> 2] = $4; //@line 30597
 HEAP32[$ReallocAsyncCtx18 + 12 >> 2] = $6; //@line 30599
 HEAP32[$ReallocAsyncCtx18 + 16 >> 2] = $8; //@line 30601
 HEAP32[$ReallocAsyncCtx18 + 20 >> 2] = $10; //@line 30603
 HEAP32[$ReallocAsyncCtx18 + 24 >> 2] = $12; //@line 30605
 HEAP32[$ReallocAsyncCtx18 + 28 >> 2] = $14; //@line 30607
 HEAP32[$ReallocAsyncCtx18 + 32 >> 2] = $16; //@line 30609
 sp = STACKTOP; //@line 30610
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_423($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 30515
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30517
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30519
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30521
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30523
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30525
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30527
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30529
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30531
 HEAP32[$2 >> 2] = 5; //@line 30532
 HEAP32[$6 >> 2] = HEAP32[$4 + 1948 >> 2]; //@line 30535
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(36) | 0; //@line 30536
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($8, $10) | 0; //@line 30537
 if (!___async) {
  ___async_unwind = 0; //@line 30540
 }
 HEAP32[$ReallocAsyncCtx17 >> 2] = 253; //@line 30542
 HEAP32[$ReallocAsyncCtx17 + 4 >> 2] = $2; //@line 30544
 HEAP32[$ReallocAsyncCtx17 + 8 >> 2] = $4; //@line 30546
 HEAP32[$ReallocAsyncCtx17 + 12 >> 2] = $6; //@line 30548
 HEAP32[$ReallocAsyncCtx17 + 16 >> 2] = $8; //@line 30550
 HEAP32[$ReallocAsyncCtx17 + 20 >> 2] = $10; //@line 30552
 HEAP32[$ReallocAsyncCtx17 + 24 >> 2] = $12; //@line 30554
 HEAP32[$ReallocAsyncCtx17 + 28 >> 2] = $14; //@line 30556
 HEAP32[$ReallocAsyncCtx17 + 32 >> 2] = $16; //@line 30558
 sp = STACKTOP; //@line 30559
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_361($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24399
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24403
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24405
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24407
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24409
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24411
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 24414
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 24415
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 24421
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 24422
   if (!___async) {
    ___async_unwind = 0; //@line 24425
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 803; //@line 24427
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 24429
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 24431
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 24433
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 24435
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 24437
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 24439
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 24442
   sp = STACKTOP; //@line 24443
   return;
  }
 }
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb_352($0) {
 $0 = $0 | 0;
 var $$pre106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23545
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23547
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23549
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23551
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23553
 $$pre106 = HEAP32[$2 >> 2] | 0; //@line 23554
 if (!$$pre106) {
  HEAP32[$4 >> 2] = 0; //@line 23557
  return;
 }
 $11 = HEAP32[$$pre106 + 4 >> 2] | 0; //@line 23561
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 23562
 FUNCTION_TABLE_vii[$11 & 31]($6, $8); //@line 23563
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 193; //@line 23566
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 23567
  HEAP32[$12 >> 2] = $2; //@line 23568
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 23569
  HEAP32[$13 >> 2] = $4; //@line 23570
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 23571
  HEAP32[$14 >> 2] = $8; //@line 23572
  sp = STACKTOP; //@line 23573
  return;
 }
 ___async_unwind = 0; //@line 23576
 HEAP32[$ReallocAsyncCtx3 >> 2] = 193; //@line 23577
 $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 23578
 HEAP32[$12 >> 2] = $2; //@line 23579
 $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 23580
 HEAP32[$13 >> 2] = $4; //@line 23581
 $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 23582
 HEAP32[$14 >> 2] = $8; //@line 23583
 sp = STACKTOP; //@line 23584
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_204($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 35467
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35473
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35477
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 35479
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 35481
 _printf(12139, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 35482
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 35483
 _printf(12554, $6) | 0; //@line 35484
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 35485
 _putchar(10) | 0; //@line 35486
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 307; //@line 35489
  $14 = $ReallocAsyncCtx + 4 | 0; //@line 35490
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 35491
  $15 = $ReallocAsyncCtx + 8 | 0; //@line 35492
  HEAP32[$15 >> 2] = $10; //@line 35493
  $16 = $ReallocAsyncCtx + 12 | 0; //@line 35494
  HEAP32[$16 >> 2] = $12; //@line 35495
  sp = STACKTOP; //@line 35496
  return;
 }
 ___async_unwind = 0; //@line 35499
 HEAP32[$ReallocAsyncCtx >> 2] = 307; //@line 35500
 $14 = $ReallocAsyncCtx + 4 | 0; //@line 35501
 HEAP32[$14 >> 2] = $AsyncRetVal; //@line 35502
 $15 = $ReallocAsyncCtx + 8 | 0; //@line 35503
 HEAP32[$15 >> 2] = $10; //@line 35504
 $16 = $ReallocAsyncCtx + 12 | 0; //@line 35505
 HEAP32[$16 >> 2] = $12; //@line 35506
 sp = STACKTOP; //@line 35507
 return;
}
function __ZN7LoRaMac34handle_mac_state_check_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14678
 STACKTOP = STACKTOP + 16 | 0; //@line 14679
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14679
 $$byval_copy = sp + 8 | 0; //@line 14680
 $1 = sp; //@line 14681
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14683
 HEAP32[$1 >> 2] = 456; //@line 14684
 HEAP32[$1 + 4 >> 2] = 0; //@line 14686
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14687
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 14688
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14688
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 14689
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 457; //@line 14692
  sp = STACKTOP; //@line 14693
  STACKTOP = sp; //@line 14694
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14696
 if ($4 | 0) {
  STACKTOP = sp; //@line 14699
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14701
 _mbed_assert_internal(12851, 12860, 187); //@line 14702
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 458; //@line 14705
  sp = STACKTOP; //@line 14706
  STACKTOP = sp; //@line 14707
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14709
 STACKTOP = sp; //@line 14710
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_416($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 29791
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29793
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29795
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29797
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29799
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29801
 $11 = $2 + 1892 | 0; //@line 29802
 $12 = HEAP32[$11 >> 2] | 0; //@line 29803
 if (!$12) {
  HEAP32[$6 >> 2] = 6; //@line 29806
  HEAP32[___async_retval >> 2] = $4; //@line 29808
  return;
 }
 $16 = HEAP32[$2 + 2288 >> 2] | 0; //@line 29813
 $18 = HEAP32[$12 + 4 >> 2] | 0; //@line 29815
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 29816
 FUNCTION_TABLE_vii[$18 & 31]($8, $2 + 1880 | 0); //@line 29817
 if (!___async) {
  ___async_unwind = 0; //@line 29820
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 267; //@line 29822
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $11; //@line 29824
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $8; //@line 29826
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $16; //@line 29828
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $8; //@line 29830
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $4; //@line 29832
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $6; //@line 29834
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $10; //@line 29836
 sp = STACKTOP; //@line 29837
 return;
}
function __ZN7LoRaMac29handle_delayed_tx_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17380
 STACKTOP = STACKTOP + 16 | 0; //@line 17381
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17381
 $$byval_copy = sp + 8 | 0; //@line 17382
 $1 = sp; //@line 17383
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 17385
 HEAP32[$1 >> 2] = 460; //@line 17386
 HEAP32[$1 + 4 >> 2] = 0; //@line 17388
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17389
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 17390
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 17390
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 17391
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 503; //@line 17394
  sp = STACKTOP; //@line 17395
  STACKTOP = sp; //@line 17396
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17398
 if ($4 | 0) {
  STACKTOP = sp; //@line 17401
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17403
 _mbed_assert_internal(12851, 12860, 194); //@line 17404
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 504; //@line 17407
  sp = STACKTOP; //@line 17408
  STACKTOP = sp; //@line 17409
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17411
 STACKTOP = sp; //@line 17412
 return;
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_514($0) {
 $0 = $0 | 0;
 var $19 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 37419
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37421
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37423
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 37428
  _mbed_assert_internal(12851, 12860, 217); //@line 37429
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 435; //@line 37432
   $7 = $ReallocAsyncCtx6 + 4 | 0; //@line 37433
   HEAP32[$7 >> 2] = $2; //@line 37434
   $8 = $ReallocAsyncCtx6 + 8 | 0; //@line 37435
   HEAP32[$8 >> 2] = $4; //@line 37436
   sp = STACKTOP; //@line 37437
   return;
  }
  ___async_unwind = 0; //@line 37440
  HEAP32[$ReallocAsyncCtx6 >> 2] = 435; //@line 37441
  $7 = $ReallocAsyncCtx6 + 4 | 0; //@line 37442
  HEAP32[$7 >> 2] = $2; //@line 37443
  $8 = $ReallocAsyncCtx6 + 8 | 0; //@line 37444
  HEAP32[$8 >> 2] = $4; //@line 37445
  sp = STACKTOP; //@line 37446
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 37450
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 37458
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 37463
 $19 = $4 + 944 | 0; //@line 37464
 HEAP8[$19 >> 0] = HEAP8[$19 >> 0] | 32; //@line 37467
 return;
}
function __ZN7LoRaMac18handle_ack_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17417
 STACKTOP = STACKTOP + 16 | 0; //@line 17418
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17418
 $$byval_copy = sp + 8 | 0; //@line 17419
 $1 = sp; //@line 17420
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 17422
 HEAP32[$1 >> 2] = 423; //@line 17423
 HEAP32[$1 + 4 >> 2] = 0; //@line 17425
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17426
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 17427
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 17427
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 17428
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 505; //@line 17431
  sp = STACKTOP; //@line 17432
  STACKTOP = sp; //@line 17433
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17435
 if ($4 | 0) {
  STACKTOP = sp; //@line 17438
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17440
 _mbed_assert_internal(12851, 12860, 201); //@line 17441
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 506; //@line 17444
  sp = STACKTOP; //@line 17445
  STACKTOP = sp; //@line 17446
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17448
 STACKTOP = sp; //@line 17449
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_178($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 33571
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33573
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33575
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33577
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33579
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33581
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33583
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33585
 _srand(HEAP32[___async_retval >> 2] | 0); //@line 33588
 HEAP8[$2 + 368 >> 0] = 1; //@line 33590
 $17 = HEAP32[$10 >> 2] | 0; //@line 33591
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(32) | 0; //@line 33592
 __ZN7LoRaPHY25setup_public_network_modeEb($17, 1); //@line 33593
 if (!___async) {
  ___async_unwind = 0; //@line 33596
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 521; //@line 33598
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 33600
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 33602
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $6; //@line 33604
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $8; //@line 33606
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $12; //@line 33608
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $14; //@line 33610
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $10; //@line 33612
 sp = STACKTOP; //@line 33613
 return;
}
function __ZN7LoRaMac17handle_tx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14513
 STACKTOP = STACKTOP + 16 | 0; //@line 14514
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14514
 $$byval_copy = sp + 8 | 0; //@line 14515
 $1 = sp; //@line 14516
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14518
 HEAP32[$1 >> 2] = 448; //@line 14519
 HEAP32[$1 + 4 >> 2] = 0; //@line 14521
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14522
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 14523
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14523
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 14524
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 449; //@line 14527
  sp = STACKTOP; //@line 14528
  STACKTOP = sp; //@line 14529
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14531
 if ($4 | 0) {
  STACKTOP = sp; //@line 14534
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14536
 _mbed_assert_internal(12851, 12860, 162); //@line 14537
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 450; //@line 14540
  sp = STACKTOP; //@line 14541
  STACKTOP = sp; //@line 14542
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14544
 STACKTOP = sp; //@line 14545
 return;
}
function __ZN7LoRaMac17handle_rx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14256
 STACKTOP = STACKTOP + 16 | 0; //@line 14257
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14257
 $$byval_copy = sp + 8 | 0; //@line 14258
 $1 = sp; //@line 14259
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14261
 HEAP32[$1 >> 2] = 438; //@line 14262
 HEAP32[$1 + 4 >> 2] = 0; //@line 14264
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14265
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 14266
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14266
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 14267
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 439; //@line 14270
  sp = STACKTOP; //@line 14271
  STACKTOP = sp; //@line 14272
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14274
 if ($4 | 0) {
  STACKTOP = sp; //@line 14277
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14279
 _mbed_assert_internal(12851, 12860, 155); //@line 14280
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 440; //@line 14283
  sp = STACKTOP; //@line 14284
  STACKTOP = sp; //@line 14285
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14287
 STACKTOP = sp; //@line 14288
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb_143($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31421
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31423
 $4 = HEAP32[$2 + 48 >> 2] | 0; //@line 31425
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 31430
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 31431
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 36 | 0); //@line 31432
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 353; //@line 31435
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 31436
   HEAP32[$9 >> 2] = $2; //@line 31437
   sp = STACKTOP; //@line 31438
   return;
  }
  ___async_unwind = 0; //@line 31441
  HEAP32[$ReallocAsyncCtx4 >> 2] = 353; //@line 31442
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 31443
  HEAP32[$9 >> 2] = $2; //@line 31444
  sp = STACKTOP; //@line 31445
  return;
 }
 $11 = HEAP32[$2 + 28 >> 2] | 0; //@line 31449
 if (!$11) {
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 31456
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 31457
 FUNCTION_TABLE_vi[$15 & 1023]($2 + 16 | 0); //@line 31458
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 354; //@line 31461
  sp = STACKTOP; //@line 31462
  return;
 }
 ___async_unwind = 0; //@line 31465
 HEAP32[$ReallocAsyncCtx5 >> 2] = 354; //@line 31466
 sp = STACKTOP; //@line 31467
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_381($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 26412
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26414
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26416
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26418
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26420
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26422
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26424
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26426
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26428
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(36) | 0; //@line 26429
 $17 = __ZN4mbed5Timer7read_msEv($2) | 0; //@line 26430
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 26434
  ___async_unwind = 0; //@line 26435
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 102; //@line 26437
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $4; //@line 26439
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $6; //@line 26441
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $8; //@line 26443
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $10; //@line 26445
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $12; //@line 26447
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $14; //@line 26449
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $2; //@line 26451
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $16; //@line 26453
 sp = STACKTOP; //@line 26454
 return;
}
function __ZN7LoRaMac15handle_rx_errorEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14028
 STACKTOP = STACKTOP + 16 | 0; //@line 14029
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14029
 $$byval_copy = sp + 8 | 0; //@line 14030
 $1 = sp; //@line 14031
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14033
 HEAP32[$1 >> 2] = 429; //@line 14034
 HEAP32[$1 + 4 >> 2] = 0; //@line 14036
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14037
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 14038
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14038
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 14039
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 430; //@line 14042
  sp = STACKTOP; //@line 14043
  STACKTOP = sp; //@line 14044
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14046
 if ($4 | 0) {
  STACKTOP = sp; //@line 14049
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14051
 _mbed_assert_internal(12851, 12860, 148); //@line 14052
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 431; //@line 14055
  sp = STACKTOP; //@line 14056
  STACKTOP = sp; //@line 14057
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14059
 STACKTOP = sp; //@line 14060
 return;
}
function __ZN7LoRaMac14handle_tx_doneEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11129
 STACKTOP = STACKTOP + 16 | 0; //@line 11130
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11130
 $$byval_copy = sp + 8 | 0; //@line 11131
 $1 = sp; //@line 11132
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11134
 HEAP32[$1 >> 2] = 355; //@line 11135
 HEAP32[$1 + 4 >> 2] = 0; //@line 11137
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11138
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 11139
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11139
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 11140
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 356; //@line 11143
  sp = STACKTOP; //@line 11144
  STACKTOP = sp; //@line 11145
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11147
 if ($4 | 0) {
  STACKTOP = sp; //@line 11150
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11152
 _mbed_assert_internal(12851, 12860, 134); //@line 11153
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 357; //@line 11156
  sp = STACKTOP; //@line 11157
  STACKTOP = sp; //@line 11158
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11160
 STACKTOP = sp; //@line 11161
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_422($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 30466
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30468
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30470
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30472
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30474
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30476
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30478
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30480
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30482
 HEAP32[$2 >> 2] = 6; //@line 30483
 HEAP32[$6 >> 2] = HEAP32[$4 + 1952 >> 2]; //@line 30486
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(32) | 0; //@line 30487
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($8, $10) | 0; //@line 30488
 if (!___async) {
  ___async_unwind = 0; //@line 30491
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 254; //@line 30493
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 30495
 HEAP32[$ReallocAsyncCtx16 + 8 >> 2] = $16; //@line 30497
 HEAP32[$ReallocAsyncCtx16 + 12 >> 2] = $8; //@line 30499
 HEAP32[$ReallocAsyncCtx16 + 16 >> 2] = $10; //@line 30501
 HEAP32[$ReallocAsyncCtx16 + 20 >> 2] = $4; //@line 30503
 HEAP32[$ReallocAsyncCtx16 + 24 >> 2] = $14; //@line 30505
 HEAP32[$ReallocAsyncCtx16 + 28 >> 2] = $12; //@line 30507
 sp = STACKTOP; //@line 30508
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_289($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13442
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13444
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13446
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13448
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13450
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13452
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13454
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13456
 $16 = HEAP32[$2 + 356 >> 2] | 0; //@line 13458
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(40) | 0; //@line 13460
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($16, $2 + 1016 | 0); //@line 13461
 if (!___async) {
  ___async_unwind = 0; //@line 13464
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 481; //@line 13466
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 13468
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 13470
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 13472
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $4; //@line 13474
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $6; //@line 13476
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $8; //@line 13478
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $10; //@line 13480
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $12; //@line 13482
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $14; //@line 13484
 sp = STACKTOP; //@line 13485
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8711
 $2 = HEAP8[$0 + 16 >> 0] | 0; //@line 8713
 $4 = HEAP8[$0 + 17 >> 0] | 0; //@line 8715
 $5 = $0 + 12 | 0; //@line 8716
 $6 = HEAP32[$5 >> 2] | 0; //@line 8717
 do {
  if (!$6) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8721
   _mbed_assert_internal(15061, 15066, 1677); //@line 8722
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 288; //@line 8725
    HEAP32[$AsyncCtx2 + 4 >> 2] = $5; //@line 8727
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8729
    HEAP8[$AsyncCtx2 + 12 >> 0] = $2; //@line 8731
    HEAP8[$AsyncCtx2 + 13 >> 0] = $4; //@line 8733
    sp = STACKTOP; //@line 8734
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8737
    $13 = HEAP32[$5 >> 2] | 0; //@line 8739
    break;
   }
  } else {
   $13 = $6; //@line 8743
  }
 } while (0);
 $12 = HEAP32[$13 >> 2] | 0; //@line 8746
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8747
 FUNCTION_TABLE_viii[$12 & 7]($0, $2, $4); //@line 8748
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 289; //@line 8751
  sp = STACKTOP; //@line 8752
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8755
  return;
 }
}
function __ZN12radio_eventsD2Ev__async_cb_116($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 30212
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30214
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 30216
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 30221
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 30222
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 16 | 0); //@line 30223
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 348; //@line 30226
   $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 30227
   HEAP32[$9 >> 2] = $2; //@line 30228
   sp = STACKTOP; //@line 30229
   return;
  }
  ___async_unwind = 0; //@line 30232
  HEAP32[$ReallocAsyncCtx6 >> 2] = 348; //@line 30233
  $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 30234
  HEAP32[$9 >> 2] = $2; //@line 30235
  sp = STACKTOP; //@line 30236
  return;
 }
 $11 = HEAP32[$2 + 12 >> 2] | 0; //@line 30240
 if (!$11) {
  return;
 }
 $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 30246
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 30247
 FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 30248
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 30251
  sp = STACKTOP; //@line 30252
  return;
 }
 ___async_unwind = 0; //@line 30255
 HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 30256
 sp = STACKTOP; //@line 30257
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_69($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23750
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23752
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23754
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23756
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 364 >> 2] = 2; //@line 23762
  HEAP32[___async_retval >> 2] = $6; //@line 23764
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 23767
 _mbed_assert_internal(12851, 12860, 217); //@line 23768
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 565; //@line 23771
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 23772
  HEAP32[$9 >> 2] = $2; //@line 23773
  $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 23774
  HEAP32[$10 >> 2] = $4; //@line 23775
  $11 = $ReallocAsyncCtx5 + 12 | 0; //@line 23776
  HEAP32[$11 >> 2] = $6; //@line 23777
  sp = STACKTOP; //@line 23778
  return;
 }
 ___async_unwind = 0; //@line 23781
 HEAP32[$ReallocAsyncCtx5 >> 2] = 565; //@line 23782
 $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 23783
 HEAP32[$9 >> 2] = $2; //@line 23784
 $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 23785
 HEAP32[$10 >> 2] = $4; //@line 23786
 $11 = $ReallocAsyncCtx5 + 12 | 0; //@line 23787
 HEAP32[$11 >> 2] = $6; //@line 23788
 sp = STACKTOP; //@line 23789
 return;
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 12849
  $8 = $0; //@line 12849
  $9 = $1; //@line 12849
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 12851
   $$0914 = $$0914 + -1 | 0; //@line 12855
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 12856
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 12857
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 12865
   }
  }
  $$010$lcssa$off0 = $8; //@line 12870
  $$09$lcssa = $$0914; //@line 12870
 } else {
  $$010$lcssa$off0 = $0; //@line 12872
  $$09$lcssa = $2; //@line 12872
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 12876
 } else {
  $$012 = $$010$lcssa$off0; //@line 12878
  $$111 = $$09$lcssa; //@line 12878
  while (1) {
   $26 = $$111 + -1 | 0; //@line 12883
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 12884
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 12888
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 12891
    $$111 = $26; //@line 12891
   }
  }
 }
 return $$1$lcssa | 0; //@line 12895
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_173($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 33127
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33131
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33133
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33135
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 33136
 if (!$9) {
  HEAP32[$6 + 988 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$4 >> 2] | 0) | 0; //@line 33142
  HEAP32[___async_retval >> 2] = 0; //@line 33144
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 33148
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 33149
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 33150
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 537; //@line 33153
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 33154
  HEAP32[$13 >> 2] = $4; //@line 33155
  $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 33156
  HEAP32[$14 >> 2] = $6; //@line 33157
  sp = STACKTOP; //@line 33158
  return;
 }
 ___async_unwind = 0; //@line 33161
 HEAP32[$ReallocAsyncCtx5 >> 2] = 537; //@line 33162
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 33163
 HEAP32[$13 >> 2] = $4; //@line 33164
 $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 33165
 HEAP32[$14 >> 2] = $6; //@line 33166
 sp = STACKTOP; //@line 33167
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_43($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 20985
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20987
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20989
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20991
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20993
 $9 = $2 + 944 | 0; //@line 20994
 HEAP8[$9 >> 0] = 2 | HEAP8[$9 >> 0] & -7; //@line 20998
 $13 = $2 + 944 | 0; //@line 20999
 HEAP8[$13 >> 0] = HEAP8[$13 >> 0] | 32; //@line 21002
 $16 = HEAP32[$4 >> 2] | 0; //@line 21003
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 21005
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($16, $2 + 996 | 0, 1); //@line 21006
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 21009
  $18 = $ReallocAsyncCtx17 + 4 | 0; //@line 21010
  HEAP32[$18 >> 2] = $6; //@line 21011
  $19 = $ReallocAsyncCtx17 + 8 | 0; //@line 21012
  HEAP32[$19 >> 2] = $8; //@line 21013
  sp = STACKTOP; //@line 21014
  return;
 }
 ___async_unwind = 0; //@line 21017
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 21018
 $18 = $ReallocAsyncCtx17 + 4 | 0; //@line 21019
 HEAP32[$18 >> 2] = $6; //@line 21020
 $19 = $ReallocAsyncCtx17 + 8 | 0; //@line 21021
 HEAP32[$19 >> 2] = $8; //@line 21022
 sp = STACKTOP; //@line 21023
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_42($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 20940
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20942
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20944
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20946
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20948
 $9 = $2 + 944 | 0; //@line 20949
 HEAP8[$9 >> 0] = 2 | HEAP8[$9 >> 0] & -7; //@line 20953
 $13 = $2 + 944 | 0; //@line 20954
 HEAP8[$13 >> 0] = HEAP8[$13 >> 0] | 32; //@line 20957
 $16 = HEAP32[$4 >> 2] | 0; //@line 20958
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 20960
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($16, $2 + 996 | 0, 1); //@line 20961
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 20964
  $18 = $ReallocAsyncCtx17 + 4 | 0; //@line 20965
  HEAP32[$18 >> 2] = $6; //@line 20966
  $19 = $ReallocAsyncCtx17 + 8 | 0; //@line 20967
  HEAP32[$19 >> 2] = $8; //@line 20968
  sp = STACKTOP; //@line 20969
  return;
 }
 ___async_unwind = 0; //@line 20972
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 20973
 $18 = $ReallocAsyncCtx17 + 4 | 0; //@line 20974
 HEAP32[$18 >> 2] = $6; //@line 20975
 $19 = $ReallocAsyncCtx17 + 8 | 0; //@line 20976
 HEAP32[$19 >> 2] = $8; //@line 20977
 sp = STACKTOP; //@line 20978
 return;
}
function __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$$i = 0, $$0 = 0.0, $10 = 0, $13 = 0, $16 = 0, $23 = 0, $28 = 0, $41 = 0, $5 = 0, $51 = 0, $7 = 0, $8 = 0;
 $5 = $1 << 24 >> 24; //@line 24265
 $7 = HEAP8[$0 + 29 >> 0] | 0; //@line 24267
 $8 = $7 & 255; //@line 24268
 $$ = ($5 | 0) < ($8 | 0) ? $5 : $8; //@line 24270
 $10 = $$ & 255; //@line 24271
 HEAP8[$4 + 1 >> 0] = $10; //@line 24273
 $13 = HEAP32[$0 + 80 >> 2] | 0; //@line 24275
 $16 = HEAP32[$13 + (($$ & 255) << 2) >> 2] | 0; //@line 24278
 HEAP8[$4 + 2 >> 0] = ($16 | 0) == 5e5 ? 2 : ($16 | 0) == 25e4 & 1; //@line 24284
 $23 = HEAP32[$0 + 88 >> 2] | 0; //@line 24291
 if (HEAP8[$0 + 14 >> 0] | 0 ? $7 << 24 >> 24 == $10 << 24 >> 24 : 0) {
  $$0 = 8.0 / +(HEAPU8[$23 + $8 >> 0] | 0); //@line 24297
 } else {
  $28 = $$ & 255; //@line 24299
  $$0 = +(1 << HEAPU8[$23 + $28 >> 0] | 0) / +((HEAP32[$13 + ($28 << 2) >> 2] | 0) >>> 0) * 1.0e3; //@line 24310
 }
 $41 = $2 & 255; //@line 24314
 $51 = ~~+Math_ceil(+(($$0 * +(($41 << 1) + -8 | 0) + +($3 << 1 >>> 0)) / $$0)) >>> 0; //@line 24324
 $$$i = $51 >>> 0 > $41 >>> 0 ? $51 : $41; //@line 24326
 HEAP32[$4 + 8 >> 2] = $$$i; //@line 24327
 HEAP32[$4 + 12 >> 2] = ~~+Math_ceil(+($$0 * 4.0 - $$0 * +($$$i >>> 0) * .5 + -1.0)); //@line 24336
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10162
 STACKTOP = STACKTOP + 16 | 0; //@line 10163
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10163
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(11887, sp) | 0; //@line 10170
  _printf(12684, sp + 8 | 0) | 0; //@line 10171
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10172
  _putchar(10) | 0; //@line 10173
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 321; //@line 10176
   sp = STACKTOP; //@line 10177
   STACKTOP = sp; //@line 10178
   return 0; //@line 10178
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10180
  $$0 = -1012; //@line 10181
  STACKTOP = sp; //@line 10182
  return $$0 | 0; //@line 10182
 } else {
  $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10185
  $6 = __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 10186
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 322; //@line 10189
   sp = STACKTOP; //@line 10190
   STACKTOP = sp; //@line 10191
   return 0; //@line 10191
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10193
  $$0 = $6; //@line 10194
  STACKTOP = sp; //@line 10195
  return $$0 | 0; //@line 10195
 }
 return 0; //@line 10197
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_269($0) {
 $0 = $0 | 0;
 var $16 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 12767
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12769
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12771
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 364 >> 2] = 2; //@line 12777
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 12781
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 12785
  $16 = $4 + 944 | 0; //@line 12786
  HEAP8[$16 >> 0] = HEAP8[$16 >> 0] | 32; //@line 12789
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 12792
 _mbed_assert_internal(12851, 12860, 217); //@line 12793
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 455; //@line 12796
  $7 = $ReallocAsyncCtx5 + 4 | 0; //@line 12797
  HEAP32[$7 >> 2] = $2; //@line 12798
  $8 = $ReallocAsyncCtx5 + 8 | 0; //@line 12799
  HEAP32[$8 >> 2] = $4; //@line 12800
  sp = STACKTOP; //@line 12801
  return;
 }
 ___async_unwind = 0; //@line 12804
 HEAP32[$ReallocAsyncCtx5 >> 2] = 455; //@line 12805
 $7 = $ReallocAsyncCtx5 + 4 | 0; //@line 12806
 HEAP32[$7 >> 2] = $2; //@line 12807
 $8 = $ReallocAsyncCtx5 + 8 | 0; //@line 12808
 HEAP32[$8 >> 2] = $4; //@line 12809
 sp = STACKTOP; //@line 12810
 return;
}
function __ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$09 = 0, $$1 = 0, $10 = 0, $15 = 0, $17 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 25009
 if (!(HEAP8[$0 + 17 >> 0] | 0)) {
  $$09 = 0; //@line 25014
  return $$09 | 0; //@line 25015
 }
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 25019
 $8 = $1 + 4 | 0; //@line 25020
 $9 = HEAP32[$8 >> 2] | 0; //@line 25021
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 25022
 $10 = FUNCTION_TABLE_iii[$7 & 31]($0, $9) | 0; //@line 25023
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 634; //@line 25026
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 25028
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 25030
  HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 25032
  sp = STACKTOP; //@line 25033
  return 0; //@line 25034
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 25036
 $$ = $10 ? 3 : 2; //@line 25037
 $15 = HEAP32[$0 + 112 >> 2] | 0; //@line 25039
 $17 = HEAPU8[$1 >> 0] | 0; //@line 25041
 $$1 = (HEAP32[$15 + ($17 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 25046
 if ($$1 << 24 >> 24 != 3) {
  $$09 = $$1; //@line 25049
  return $$09 | 0; //@line 25050
 }
 HEAP32[$15 + ($17 * 12 | 0) + 4 >> 2] = HEAP32[$8 >> 2]; //@line 25054
 $$09 = 3; //@line 25055
 return $$09 | 0; //@line 25056
}
function _equeue_create_inplace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$032 = 0, $$033 = 0, $19 = 0, $21 = 0, $25 = 0, $28 = 0, $5 = 0;
 HEAP32[$0 + 12 >> 2] = $2; //@line 4508
 HEAP32[$0 + 20 >> 2] = 0; //@line 4510
 $5 = $0 + 16 | 0; //@line 4511
 HEAP32[$5 >> 2] = 0; //@line 4512
 if ($1 | 0) {
  $$033 = $1; //@line 4515
  $21 = 0; //@line 4515
  do {
   $21 = $21 + 1 | 0; //@line 4517
   $$033 = $$033 >>> 1; //@line 4518
  } while (($$033 | 0) != 0);
  HEAP32[$5 >> 2] = $21; //@line 4526
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 4529
 HEAP32[$0 + 28 >> 2] = $1; //@line 4531
 HEAP32[$0 + 32 >> 2] = $2; //@line 4533
 HEAP32[$0 >> 2] = 0; //@line 4534
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 4537
 HEAP8[$0 + 9 >> 0] = 0; //@line 4539
 HEAP8[$0 + 8 >> 0] = 0; //@line 4541
 HEAP8[$0 + 36 >> 0] = 0; //@line 4543
 HEAP32[$0 + 40 >> 2] = 0; //@line 4545
 HEAP32[$0 + 44 >> 2] = 0; //@line 4547
 $19 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 4549
 if (($19 | 0) < 0) {
  $$032 = $19; //@line 4552
  return $$032 | 0; //@line 4553
 }
 $25 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 4556
 if (($25 | 0) < 0) {
  $$032 = $25; //@line 4559
  return $$032 | 0; //@line 4560
 }
 $28 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 4563
 $$032 = ($28 | 0) < 0 ? $28 : 0; //@line 4566
 return $$032 | 0; //@line 4567
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_85($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 25221
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25223
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25225
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25227
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25229
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 25231
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25233
 $14 = (HEAP8[___async_retval >> 0] | 0) == 0; //@line 25236
 $15 = HEAP32[$4 >> 2] | 0; //@line 25237
 $18 = HEAP32[(HEAP32[$15 >> 2] | 0) + 76 >> 2] | 0; //@line 25240
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 25241
 FUNCTION_TABLE_vi[$18 & 1023]($15); //@line 25242
 if (!___async) {
  ___async_unwind = 0; //@line 25245
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 619; //@line 25247
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 25249
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 25251
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 25253
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 25255
 HEAP8[$ReallocAsyncCtx3 + 20 >> 0] = $10; //@line 25257
 HEAP8[$ReallocAsyncCtx3 + 21 >> 0] = $14 & 1; //@line 25260
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 25262
 sp = STACKTOP; //@line 25263
 return;
}
function __ZN12LoRaWANStack16remove_a_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10243
 STACKTOP = STACKTOP + 16 | 0; //@line 10244
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10244
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(11887, sp) | 0; //@line 10251
  _printf(12684, sp + 8 | 0) | 0; //@line 10252
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10253
  _putchar(10) | 0; //@line 10254
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 325; //@line 10257
   sp = STACKTOP; //@line 10258
   STACKTOP = sp; //@line 10259
   return 0; //@line 10259
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10261
  $$0 = -1012; //@line 10262
  STACKTOP = sp; //@line 10263
  return $$0 | 0; //@line 10263
 } else {
  $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10266
  $6 = __ZN7LoRaMac21remove_single_channelEh($0 + 4 | 0, $1) | 0; //@line 10267
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 326; //@line 10270
   sp = STACKTOP; //@line 10271
   STACKTOP = sp; //@line 10272
   return 0; //@line 10272
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10274
  $$0 = $6; //@line 10275
  STACKTOP = sp; //@line 10276
  return $$0 | 0; //@line 10276
 }
 return 0; //@line 10278
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26155
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26157
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26161
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26163
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26165
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26167
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 26171
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 26174
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 26175
   if (!___async) {
    ___async_unwind = 0; //@line 26178
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 807; //@line 26180
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 26182
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 26184
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 26186
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 26188
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 26190
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 26192
   sp = STACKTOP; //@line 26193
   return;
  }
 }
 return;
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 10465
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 10470
   label = 4; //@line 10471
  } else {
   $$01519 = $0; //@line 10473
   $23 = $1; //@line 10473
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 10478
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 10481
    $23 = $6; //@line 10482
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 10486
     label = 4; //@line 10487
     break;
    } else {
     $$01519 = $6; //@line 10490
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 10496
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 10498
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 10506
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 10514
  } else {
   $$pn = $$0; //@line 10516
   while (1) {
    $19 = $$pn + 1 | 0; //@line 10518
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 10522
     break;
    } else {
     $$pn = $19; //@line 10525
    }
   }
  }
  $$sink = $$1$lcssa; //@line 10530
 }
 return $$sink - $1 | 0; //@line 10533
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_376($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26114
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26118
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 26120
 $7 = (HEAP32[$0 + 4 >> 2] | 0) + 4 | 0; //@line 26121
 $8 = HEAP32[$7 >> 2] | 0; //@line 26122
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 72 >> 2] | 0; //@line 26125
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 26126
 FUNCTION_TABLE_vi[$11 & 1023]($8); //@line 26127
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 656; //@line 26130
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 26131
  HEAP32[$12 >> 2] = $7; //@line 26132
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 26133
  HEAP32[$13 >> 2] = $4; //@line 26134
  $14 = $ReallocAsyncCtx + 12 | 0; //@line 26135
  HEAP8[$14 >> 0] = $6; //@line 26136
  sp = STACKTOP; //@line 26137
  return;
 }
 ___async_unwind = 0; //@line 26140
 HEAP32[$ReallocAsyncCtx >> 2] = 656; //@line 26141
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 26142
 HEAP32[$12 >> 2] = $7; //@line 26143
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 26144
 HEAP32[$13 >> 2] = $4; //@line 26145
 $14 = $ReallocAsyncCtx + 12 | 0; //@line 26146
 HEAP8[$14 >> 0] = $6; //@line 26147
 sp = STACKTOP; //@line 26148
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_13($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17145
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17147
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17149
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17151
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17153
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17155
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17157
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17159
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17163
 HEAP8[$2 + 688 >> 0] = 2; //@line 17167
 _printf(10904, $14) | 0; //@line 17168
 HEAP32[$18 >> 2] = 3; //@line 17169
 _printf(10970, $18) | 0; //@line 17170
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 17171
 _putchar(10) | 0; //@line 17172
 if (!___async) {
  ___async_unwind = 0; //@line 17175
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 139; //@line 17177
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 17179
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 17181
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 17183
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 17185
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 17187
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 17189
 sp = STACKTOP; //@line 17190
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10202
 STACKTOP = STACKTOP + 16 | 0; //@line 10203
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10203
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(11887, sp) | 0; //@line 10210
  _printf(12684, sp + 8 | 0) | 0; //@line 10211
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10212
  _putchar(10) | 0; //@line 10213
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 323; //@line 10216
   sp = STACKTOP; //@line 10217
   STACKTOP = sp; //@line 10218
   return 0; //@line 10218
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10220
  $$0 = -1012; //@line 10221
  STACKTOP = sp; //@line 10222
  return $$0 | 0; //@line 10222
 } else {
  $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10225
  $5 = __ZN7LoRaMac19remove_channel_planEv($0 + 4 | 0) | 0; //@line 10226
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 324; //@line 10229
   sp = STACKTOP; //@line 10230
   STACKTOP = sp; //@line 10231
   return 0; //@line 10231
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10233
  $$0 = $5; //@line 10234
  STACKTOP = sp; //@line 10235
  return $$0 | 0; //@line 10235
 }
 return 0; //@line 10237
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $2 = 0, $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3773
 $2 = $0; //@line 3774
 L1 : do {
  switch ($1 | 0) {
  case 1:
   {
    $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 3779
    if ($4 | 0) {
     $7 = HEAP32[$4 >> 2] | 0; //@line 3783
     $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3784
     FUNCTION_TABLE_vi[$7 & 1023]($2 + 40 | 0); //@line 3785
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 156; //@line 3788
      sp = STACKTOP; //@line 3789
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 3792
      break L1;
     }
    }
    break;
   }
  case 2:
   {
    $9 = HEAP32[$2 + 68 >> 2] | 0; //@line 3800
    if ($9 | 0) {
     $12 = HEAP32[$9 >> 2] | 0; //@line 3804
     $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3805
     FUNCTION_TABLE_vi[$12 & 1023]($2 + 56 | 0); //@line 3806
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 157; //@line 3809
      sp = STACKTOP; //@line 3810
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3813
      break L1;
     }
    }
    break;
   }
  default:
   {}
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 14981
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 14988
   $10 = $1 + 16 | 0; //@line 14989
   $11 = HEAP32[$10 >> 2] | 0; //@line 14990
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 14993
    HEAP32[$1 + 24 >> 2] = $4; //@line 14995
    HEAP32[$1 + 36 >> 2] = 1; //@line 14997
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 15007
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 15012
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 15015
    HEAP8[$1 + 54 >> 0] = 1; //@line 15017
    break;
   }
   $21 = $1 + 24 | 0; //@line 15020
   $22 = HEAP32[$21 >> 2] | 0; //@line 15021
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 15024
    $28 = $4; //@line 15025
   } else {
    $28 = $22; //@line 15027
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 15036
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8785
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 8787
 $3 = $0 + 12 | 0; //@line 8788
 $4 = HEAP32[$3 >> 2] | 0; //@line 8789
 do {
  if (!$4) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8793
   _mbed_assert_internal(15061, 15066, 1102); //@line 8794
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 291; //@line 8797
    HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 8799
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8801
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 8803
    sp = STACKTOP; //@line 8804
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8807
    $10 = HEAP32[$3 >> 2] | 0; //@line 8809
    break;
   }
  } else {
   $10 = $4; //@line 8813
  }
 } while (0);
 $9 = HEAP32[$10 >> 2] | 0; //@line 8816
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8817
 FUNCTION_TABLE_vii[$9 & 31]($0, $2); //@line 8818
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 292; //@line 8821
  sp = STACKTOP; //@line 8822
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8825
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_483($0) {
 $0 = $0 | 0;
 var $$pre13 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 36160
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36162
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36164
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36166
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36168
 $$pre13 = HEAP32[$2 >> 2] | 0; //@line 36169
 if (!$$pre13) {
  HEAP32[$4 >> 2] = 0; //@line 36172
  return;
 }
 $11 = HEAP32[$$pre13 + 4 >> 2] | 0; //@line 36176
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 36177
 FUNCTION_TABLE_vii[$11 & 31]($6, $8); //@line 36178
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 320; //@line 36181
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 36182
  HEAP32[$12 >> 2] = $2; //@line 36183
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 36184
  HEAP32[$13 >> 2] = $4; //@line 36185
  sp = STACKTOP; //@line 36186
  return;
 }
 ___async_unwind = 0; //@line 36189
 HEAP32[$ReallocAsyncCtx6 >> 2] = 320; //@line 36190
 $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 36191
 HEAP32[$12 >> 2] = $2; //@line 36192
 $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 36193
 HEAP32[$13 >> 2] = $4; //@line 36194
 sp = STACKTOP; //@line 36195
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_330($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 22445
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22449
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22451
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22453
 $9 = $4 + 12 | 0; //@line 22455
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22456
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 22457
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 2) | 0; //@line 22458
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 208; //@line 22461
  $11 = $ReallocAsyncCtx10 + 4 | 0; //@line 22462
  HEAP32[$11 >> 2] = $9; //@line 22463
  $12 = $ReallocAsyncCtx10 + 8 | 0; //@line 22464
  HEAP32[$12 >> 2] = $8; //@line 22465
  sp = STACKTOP; //@line 22466
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 22470
 ___async_unwind = 0; //@line 22471
 HEAP32[$ReallocAsyncCtx10 >> 2] = 208; //@line 22472
 $11 = $ReallocAsyncCtx10 + 4 | 0; //@line 22473
 HEAP32[$11 >> 2] = $9; //@line 22474
 $12 = $ReallocAsyncCtx10 + 8 | 0; //@line 22475
 HEAP32[$12 >> 2] = $8; //@line 22476
 sp = STACKTOP; //@line 22477
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_328($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 22384
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22388
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22390
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22392
 $9 = $4 + 12 | 0; //@line 22394
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22395
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 22396
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 4) | 0; //@line 22397
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 204; //@line 22400
  $11 = $ReallocAsyncCtx11 + 4 | 0; //@line 22401
  HEAP32[$11 >> 2] = $9; //@line 22402
  $12 = $ReallocAsyncCtx11 + 8 | 0; //@line 22403
  HEAP32[$12 >> 2] = $8; //@line 22404
  sp = STACKTOP; //@line 22405
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 22409
 ___async_unwind = 0; //@line 22410
 HEAP32[$ReallocAsyncCtx11 >> 2] = 204; //@line 22411
 $11 = $ReallocAsyncCtx11 + 4 | 0; //@line 22412
 HEAP32[$11 >> 2] = $9; //@line 22413
 $12 = $ReallocAsyncCtx11 + 8 | 0; //@line 22414
 HEAP32[$12 >> 2] = $8; //@line 22415
 sp = STACKTOP; //@line 22416
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_294($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 13809
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13813
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13815
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13817
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13819
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13821
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13823
 $15 = $4 + 12 | 0; //@line 13825
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 13826
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 13827
 $16 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 7) | 0; //@line 13828
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 13832
  ___async_unwind = 0; //@line 13833
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 218; //@line 13835
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $15; //@line 13837
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $8; //@line 13839
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $10; //@line 13841
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $12; //@line 13843
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $14; //@line 13845
 sp = STACKTOP; //@line 13846
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 22323
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22327
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22329
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22331
 $9 = $4 + 12 | 0; //@line 22333
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22334
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(12) | 0; //@line 22335
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 3) | 0; //@line 22336
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 200; //@line 22339
  $11 = $ReallocAsyncCtx12 + 4 | 0; //@line 22340
  HEAP32[$11 >> 2] = $9; //@line 22341
  $12 = $ReallocAsyncCtx12 + 8 | 0; //@line 22342
  HEAP32[$12 >> 2] = $8; //@line 22343
  sp = STACKTOP; //@line 22344
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 22348
 ___async_unwind = 0; //@line 22349
 HEAP32[$ReallocAsyncCtx12 >> 2] = 200; //@line 22350
 $11 = $ReallocAsyncCtx12 + 4 | 0; //@line 22351
 HEAP32[$11 >> 2] = $9; //@line 22352
 $12 = $ReallocAsyncCtx12 + 8 | 0; //@line 22353
 HEAP32[$12 >> 2] = $8; //@line 22354
 sp = STACKTOP; //@line 22355
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_101($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $13 = 0, $19 = 0, $2 = 0, $25 = 0, $31 = 0, $35 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26677
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26679
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26681
 if (HEAP32[___async_retval >> 2] | 0) {
  $$0 = -1014; //@line 26688
  $35 = ___async_retval; //@line 26689
  HEAP32[$35 >> 2] = $$0; //@line 26690
  return;
 }
 $11 = HEAP32[$2 >> 2] | 0; //@line 26693
 $13 = HEAP16[$4 >> 1] | 0; //@line 26695
 HEAP16[$4 >> 1] = $13 + 1 << 16 >> 16; //@line 26697
 HEAP8[($13 & 65535) + ($6 + 381) >> 0] = $11; //@line 26700
 $19 = HEAP16[$4 >> 1] | 0; //@line 26703
 HEAP16[$4 >> 1] = $19 + 1 << 16 >> 16; //@line 26705
 HEAP8[($19 & 65535) + ($6 + 381) >> 0] = $11 >>> 8; //@line 26708
 $25 = HEAP16[$4 >> 1] | 0; //@line 26711
 HEAP16[$4 >> 1] = $25 + 1 << 16 >> 16; //@line 26713
 HEAP8[($25 & 65535) + ($6 + 381) >> 0] = $11 >>> 16; //@line 26716
 $31 = HEAP16[$4 >> 1] | 0; //@line 26719
 HEAP16[$4 >> 1] = $31 + 1 << 16 >> 16; //@line 26721
 HEAP8[($31 & 65535) + ($6 + 381) >> 0] = $11 >>> 24; //@line 26724
 $$0 = 0; //@line 26725
 $35 = ___async_retval; //@line 26726
 HEAP32[$35 >> 2] = $$0; //@line 26727
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 13747
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13751
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13753
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13755
 $9 = $4 + 12 | 0; //@line 13757
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 13758
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 13759
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 9) | 0; //@line 13760
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 214; //@line 13763
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 13764
  HEAP32[$11 >> 2] = $9; //@line 13765
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 13766
  HEAP32[$12 >> 2] = $8; //@line 13767
  sp = STACKTOP; //@line 13768
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 13772
 ___async_unwind = 0; //@line 13773
 HEAP32[$ReallocAsyncCtx9 >> 2] = 214; //@line 13774
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 13775
 HEAP32[$11 >> 2] = $9; //@line 13776
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 13777
 HEAP32[$12 >> 2] = $8; //@line 13778
 sp = STACKTOP; //@line 13779
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 12840
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12844
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12846
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12848
 $9 = $4 + 12 | 0; //@line 12850
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 12851
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 12852
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 10) | 0; //@line 12853
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 229; //@line 12856
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 12857
  HEAP32[$11 >> 2] = $9; //@line 12858
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 12859
  HEAP32[$12 >> 2] = $8; //@line 12860
  sp = STACKTOP; //@line 12861
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 12865
 ___async_unwind = 0; //@line 12866
 HEAP32[$ReallocAsyncCtx9 >> 2] = 229; //@line 12867
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 12868
 HEAP32[$11 >> 2] = $9; //@line 12869
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 12870
 HEAP32[$12 >> 2] = $8; //@line 12871
 sp = STACKTOP; //@line 12872
 return;
}
function _mbedtls_cipher_setup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 1887
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$0 = -24832; //@line 1892
  return $$0 | 0; //@line 1893
 }
 dest = $0; //@line 1895
 stop = dest + 68 | 0; //@line 1895
 do {
  HEAP32[dest >> 2] = 0; //@line 1895
  dest = dest + 4 | 0; //@line 1895
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[(HEAP32[$1 + 28 >> 2] | 0) + 20 >> 2] | 0; //@line 1899
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1900
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 1901
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 673; //@line 1904
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1906
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 1908
  sp = STACKTOP; //@line 1909
  return 0; //@line 1910
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1912
 HEAP32[$0 + 60 >> 2] = $8; //@line 1914
 if (!$8) {
  $$0 = -24960; //@line 1917
  return $$0 | 0; //@line 1918
 }
 HEAP32[$0 >> 2] = $1; //@line 1920
 if ((HEAP32[$1 + 4 >> 2] | 0) != 2) {
  $$0 = 0; //@line 1925
  return $$0 | 0; //@line 1926
 }
 HEAP32[$0 + 12 >> 2] = 4; //@line 1929
 HEAP32[$0 + 16 >> 2] = 14; //@line 1931
 $$0 = 0; //@line 1932
 return $$0 | 0; //@line 1933
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_456($0) {
 $0 = $0 | 0;
 var $$pre$i$i66 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 33662
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33668
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33670
 $$pre$i$i66 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 33671
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i66; //@line 33673
 if (!$$pre$i$i66) {
  HEAP32[___async_retval >> 2] = $8; //@line 33677
  return;
 }
 $12 = HEAP32[$$pre$i$i66 + 8 >> 2] | 0; //@line 33681
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 33682
 FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 33683
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 584; //@line 33686
  $13 = $ReallocAsyncCtx15 + 4 | 0; //@line 33687
  HEAP32[$13 >> 2] = $6; //@line 33688
  $14 = $ReallocAsyncCtx15 + 8 | 0; //@line 33689
  HEAP32[$14 >> 2] = $8; //@line 33690
  sp = STACKTOP; //@line 33691
  return;
 }
 ___async_unwind = 0; //@line 33694
 HEAP32[$ReallocAsyncCtx15 >> 2] = 584; //@line 33695
 $13 = $ReallocAsyncCtx15 + 4 | 0; //@line 33696
 HEAP32[$13 >> 2] = $6; //@line 33697
 $14 = $ReallocAsyncCtx15 + 8 | 0; //@line 33698
 HEAP32[$14 >> 2] = $8; //@line 33699
 sp = STACKTOP; //@line 33700
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25176
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25178
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25180
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25182
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25184
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 25186
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25188
 $13 = HEAP32[$4 >> 2] | 0; //@line 25189
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 40 >> 2] | 0; //@line 25192
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 25193
 $17 = FUNCTION_TABLE_ii[$16 & 15]($13) | 0; //@line 25194
 if (!___async) {
  HEAP8[___async_retval >> 0] = $17; //@line 25198
  ___async_unwind = 0; //@line 25199
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 618; //@line 25201
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 25203
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 25205
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 25207
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 25209
 HEAP8[$ReallocAsyncCtx2 + 20 >> 0] = $10; //@line 25211
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 25213
 sp = STACKTOP; //@line 25214
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_345($0) {
 $0 = $0 | 0;
 var $$pre$i$i4 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23102
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23108
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23110
 $$pre$i$i4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23111
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i4; //@line 23112
 if (!$$pre$i$i4) {
  _gpio_irq_set($8 + 28 | 0, 2, 0); //@line 23116
  return;
 }
 $12 = HEAP32[$$pre$i$i4 + 8 >> 2] | 0; //@line 23121
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 23122
 FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 23123
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 162; //@line 23126
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 23127
  HEAP32[$13 >> 2] = $6; //@line 23128
  $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 23129
  HEAP32[$14 >> 2] = $8; //@line 23130
  sp = STACKTOP; //@line 23131
  return;
 }
 ___async_unwind = 0; //@line 23134
 HEAP32[$ReallocAsyncCtx5 >> 2] = 162; //@line 23135
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 23136
 HEAP32[$13 >> 2] = $6; //@line 23137
 $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 23138
 HEAP32[$14 >> 2] = $8; //@line 23139
 sp = STACKTOP; //@line 23140
 return;
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14475
 $1 = HEAP32[2570] | 0; //@line 14476
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 14482
 } else {
  $19 = 0; //@line 14484
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 14490
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 14496
    $12 = HEAP32[$11 >> 2] | 0; //@line 14497
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 14503
     HEAP8[$12 >> 0] = 10; //@line 14504
     $22 = 0; //@line 14505
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 14509
   $17 = ___overflow($1, 10) | 0; //@line 14510
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 784; //@line 14513
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 14515
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 14517
    sp = STACKTOP; //@line 14518
    return 0; //@line 14519
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14521
    $22 = $17 >> 31; //@line 14523
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 14530
 }
 return $22 | 0; //@line 14532
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_26($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 18343
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18345
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18347
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18349
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18351
 $9 = $2 + 944 | 0; //@line 18352
 HEAP8[$9 >> 0] = HEAP8[$9 >> 0] | 32; //@line 18355
 $12 = HEAP32[$4 >> 2] | 0; //@line 18356
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 18358
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($12, $2 + 996 | 0, 1); //@line 18359
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 18362
  $14 = $ReallocAsyncCtx17 + 4 | 0; //@line 18363
  HEAP32[$14 >> 2] = $6; //@line 18364
  $15 = $ReallocAsyncCtx17 + 8 | 0; //@line 18365
  HEAP32[$15 >> 2] = $8; //@line 18366
  sp = STACKTOP; //@line 18367
  return;
 }
 ___async_unwind = 0; //@line 18370
 HEAP32[$ReallocAsyncCtx17 >> 2] = 409; //@line 18371
 $14 = $ReallocAsyncCtx17 + 4 | 0; //@line 18372
 HEAP32[$14 >> 2] = $6; //@line 18373
 $15 = $ReallocAsyncCtx17 + 8 | 0; //@line 18374
 HEAP32[$15 >> 2] = $8; //@line 18375
 sp = STACKTOP; //@line 18376
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_414($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx24 = 0, sp = 0;
 sp = STACKTOP; //@line 29712
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29716
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29718
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29720
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29722
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29724
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29726
 $15 = $4 + 12 | 0; //@line 29728
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29729
 $ReallocAsyncCtx24 = _emscripten_realloc_async_context(24) | 0; //@line 29730
 $16 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 6) | 0; //@line 29731
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 29735
  ___async_unwind = 0; //@line 29736
 }
 HEAP32[$ReallocAsyncCtx24 >> 2] = 268; //@line 29738
 HEAP32[$ReallocAsyncCtx24 + 4 >> 2] = $15; //@line 29740
 HEAP32[$ReallocAsyncCtx24 + 8 >> 2] = $8; //@line 29742
 HEAP32[$ReallocAsyncCtx24 + 12 >> 2] = $10; //@line 29744
 HEAP32[$ReallocAsyncCtx24 + 16 >> 2] = $12; //@line 29746
 HEAP32[$ReallocAsyncCtx24 + 20 >> 2] = $14; //@line 29748
 sp = STACKTOP; //@line 29749
 return;
}
function __ZN4mbed11InterruptInD0Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3704
 HEAP32[$0 >> 2] = 668; //@line 3705
 _gpio_irq_free($0 + 28 | 0); //@line 3707
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 3709
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 3715
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3716
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 3717
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 154; //@line 3720
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3722
    sp = STACKTOP; //@line 3723
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3726
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 3732
 if (!$10) {
  __ZdlPv($0); //@line 3735
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 3740
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3741
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 3742
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 155; //@line 3745
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 3747
  sp = STACKTOP; //@line 3748
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3751
 __ZdlPv($0); //@line 3752
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_196($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 34495
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34497
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34499
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34501
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34503
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34505
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34507
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34509
 HEAP32[$2 + 1876 >> 2] = 5; //@line 34511
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(28) | 0; //@line 34512
 $16 = __ZN12LoRaWANStack18lora_state_machineEv($2) | 0; //@line 34513
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 34517
  ___async_unwind = 0; //@line 34518
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 306; //@line 34520
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $4; //@line 34522
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $6; //@line 34524
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $8; //@line 34526
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $10; //@line 34528
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $12; //@line 34530
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $14; //@line 34532
 sp = STACKTOP; //@line 34533
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 31790
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31792
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31794
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31796
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31798
 HEAP32[$4 + 12 >> 2] = HEAP32[$2 >> 2]; //@line 31801
 _equeue_event_dtor($4, 370); //@line 31802
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 31803
 $10 = _equeue_post($6, 371, $4) | 0; //@line 31804
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 372; //@line 31807
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 31808
  HEAP32[$11 >> 2] = $2; //@line 31809
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 31810
  HEAP32[$12 >> 2] = $8; //@line 31811
  sp = STACKTOP; //@line 31812
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 31816
 ___async_unwind = 0; //@line 31817
 HEAP32[$ReallocAsyncCtx3 >> 2] = 372; //@line 31818
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 31819
 HEAP32[$11 >> 2] = $2; //@line 31820
 $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 31821
 HEAP32[$12 >> 2] = $8; //@line 31822
 sp = STACKTOP; //@line 31823
 return;
}
function __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre$phiZ2D = 0, $26 = 0;
 if ($2) {
  HEAP8[$1 + 15 >> 0] = HEAP8[$0 + 12 >> 0] | 0; //@line 26324
  HEAP32[$1 + 748 >> 2] = HEAPU16[$0 + 36 >> 1]; //@line 26329
  HEAP32[$1 + 752 >> 2] = HEAPU16[$0 + 38 >> 1]; //@line 26334
  HEAP32[$1 + 756 >> 2] = HEAPU16[$0 + 40 >> 1]; //@line 26339
  HEAP32[$1 + 760 >> 2] = HEAPU16[$0 + 42 >> 1]; //@line 26344
  HEAP32[$1 + 764 >> 2] = HEAPU16[$0 + 44 >> 1]; //@line 26349
  $26 = $0 + 132 | 0; //@line 26350
  HEAP8[$1 + 781 >> 0] = (HEAPU8[$26 >> 0] | 0) >>> 1 & 1; //@line 26355
  $$pre$phiZ2D = $26; //@line 26356
 } else {
  $$pre$phiZ2D = $0 + 132 | 0; //@line 26359
 }
 HEAP8[$1 + 736 >> 0] = HEAP8[$0 + 23 >> 0] | 0; //@line 26364
 HEAP8[$1 + 737 >> 0] = HEAP8[$0 + 30 >> 0] | 0; //@line 26368
 HEAP8[$1 + 769 >> 0] = HEAP8[$0 + 34 >> 0] | 0; //@line 26372
 HEAP32[$1 + 772 >> 2] = HEAP32[$0 + 68 >> 2]; //@line 26376
 HEAP8[$1 + 776 >> 0] = HEAP8[$0 + 64 >> 0] | 0; //@line 26380
 HEAP8[$1 + 780 >> 0] = HEAP8[$$pre$phiZ2D >> 0] & 1; //@line 26384
 HEAP32[$1 + 784 >> 2] = HEAP32[$0 + 56 >> 2]; //@line 26388
 HEAP32[$1 + 788 >> 2] = HEAP32[$0 + 60 >> 2]; //@line 26392
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_211($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 36000
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36004
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36006
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36008
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 36011
 $10 = HEAP32[$4 >> 2] | 0; //@line 36012
 $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 76 >> 2] | 0; //@line 36015
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 36016
 FUNCTION_TABLE_vi[$13 & 1023]($10); //@line 36017
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 632; //@line 36020
  $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 36021
  HEAP32[$14 >> 2] = $6; //@line 36022
  $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 36023
  HEAP32[$15 >> 2] = $8; //@line 36024
  sp = STACKTOP; //@line 36025
  return;
 }
 ___async_unwind = 0; //@line 36028
 HEAP32[$ReallocAsyncCtx7 >> 2] = 632; //@line 36029
 $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 36030
 HEAP32[$14 >> 2] = $6; //@line 36031
 $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 36032
 HEAP32[$15 >> 2] = $8; //@line 36033
 sp = STACKTOP; //@line 36034
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb($0) {
 $0 = $0 | 0;
 var $16 = 0, $19 = 0, $2 = 0, $21 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 34487
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34489
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34493
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34495
 HEAP32[$2 + 980 >> 2] = HEAP32[$0 + 8 >> 2]; //@line 34497
 if (!(HEAP8[$2 + 373 >> 0] | 0)) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 34505
  $16 = $2 + 380 | 0; //@line 34506
  HEAP8[$16 >> 0] = (HEAP8[$16 >> 0] | 0) + 1 << 24 >> 24; //@line 34509
 }
 $19 = HEAP32[$6 >> 2] | 0; //@line 34511
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 34513
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($19, $2 + 996 | 0, 1); //@line 34514
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 368; //@line 34517
  $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 34518
  HEAP32[$21 >> 2] = $8; //@line 34519
  sp = STACKTOP; //@line 34520
  return;
 }
 ___async_unwind = 0; //@line 34523
 HEAP32[$ReallocAsyncCtx4 >> 2] = 368; //@line 34524
 $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 34525
 HEAP32[$21 >> 2] = $8; //@line 34526
 sp = STACKTOP; //@line 34527
 return;
}
function _handle_lora_downlink($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $AsyncCtx = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 3360
 STACKTOP = STACKTOP + 16 | 0; //@line 3361
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3361
 $vararg_buffer1 = sp + 8 | 0; //@line 3362
 $3 = $0; //@line 3364
 $4 = $1; //@line 3365
 _printf(10904, sp) | 0; //@line 3366
 HEAP32[$vararg_buffer1 >> 2] = $2; //@line 3367
 _printf(11611, $vararg_buffer1) | 0; //@line 3368
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 3369
 _putchar(10) | 0; //@line 3370
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 147; //@line 3373
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 3375
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 3377
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 3379
  sp = STACKTOP; //@line 3380
  STACKTOP = sp; //@line 3381
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3383
  _memcpy($3 + 788 | 0, $4 | 0, $2 | 0) | 0; //@line 3385
  HEAP8[$3 + 782 >> 0] = $2; //@line 3388
  HEAP8[$3 + 781 >> 0] = -35; //@line 3390
  HEAP8[$3 + 780 >> 0] = -5; //@line 3392
  HEAP8[$3 + 783 >> 0] = 1; //@line 3394
  STACKTOP = sp; //@line 3395
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_377($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26203
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26209
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26211
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26213
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26215
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 26220
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 26222
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 26223
 if (!___async) {
  ___async_unwind = 0; //@line 26226
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 807; //@line 26228
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 26230
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 26232
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 26234
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 26236
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 26238
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 26240
 sp = STACKTOP; //@line 26241
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_209($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 35903
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35905
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35909
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35911
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35913
 $11 = HEAP32[$2 >> 2] | 0; //@line 35914
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 35917
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 35918
 $17 = HEAP16[$15 >> 1] & 255; //@line 35920
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 35921
 FUNCTION_TABLE_viii[$14 & 7]($11, 1, $17); //@line 35922
 if (!___async) {
  ___async_unwind = 0; //@line 35925
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 630; //@line 35927
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 35929
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 35931
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 1; //@line 35933
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 35935
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 35937
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 35939
 sp = STACKTOP; //@line 35940
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_208($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 35859
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35861
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35865
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35867
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35869
 $11 = HEAP32[$2 >> 2] | 0; //@line 35870
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 35873
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 35874
 $17 = HEAP16[$15 >> 1] & 255; //@line 35876
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 35877
 FUNCTION_TABLE_viii[$14 & 7]($11, 0, $17); //@line 35878
 if (!___async) {
  ___async_unwind = 0; //@line 35881
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 630; //@line 35883
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 35885
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 35887
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 0; //@line 35889
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 35891
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 35893
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 35895
 sp = STACKTOP; //@line 35896
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_182($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 33909
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33911
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33913
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33917
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33921
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33923
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 33925
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 33927
 HEAP8[$2 + 688 >> 0] = 2; //@line 33929
 _printf(10904, $4) | 0; //@line 33930
 HEAP32[$8 >> 2] = 3; //@line 33931
 _printf(10970, $8) | 0; //@line 33932
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 33933
 _putchar(10) | 0; //@line 33934
 if (!___async) {
  ___async_unwind = 0; //@line 33937
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 109; //@line 33939
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 33941
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $12; //@line 33943
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $14; //@line 33945
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $16; //@line 33947
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $18; //@line 33949
 sp = STACKTOP; //@line 33950
 return;
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$1 = 0, $12 = 0, $22 = 0, $3 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24928
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 24930
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 64 >> 2] | 0; //@line 24933
 $8 = HEAP32[$1 + 4 >> 2] | 0; //@line 24935
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 24936
 $9 = FUNCTION_TABLE_iii[$6 & 31]($3, $8) | 0; //@line 24937
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 633; //@line 24940
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 24942
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 24944
  sp = STACKTOP; //@line 24945
  return 0; //@line 24946
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 24948
  $$ = $9 ? 7 : 6; //@line 24949
  $12 = HEAP8[$1 >> 0] | 0; //@line 24950
  $$1 = ($12 << 24 >> 24 < (HEAP8[$0 + 28 >> 0] | 0) ? 1 : $12 << 24 >> 24 > (HEAP8[$0 + 29 >> 0] | 0)) ? $$ & 5 : $$; //@line 24959
  $22 = HEAP8[$1 + 1 >> 0] | 0; //@line 24961
  return (($22 << 24 >> 24 < (HEAP8[$0 + 32 >> 0] | 0) ? 1 : $22 << 24 >> 24 > (HEAP8[$0 + 33 >> 0] | 0)) ? $$1 & 3 : $$1) | 0; //@line 24971
 }
 return 0; //@line 24973
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 34409
 STACKTOP = STACKTOP + 16 | 0; //@line 34410
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 34410
 $$byval_copy = sp; //@line 34411
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34413
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34415
 $6 = HEAP32[$2 + 1328 >> 2] | 0; //@line 34417
 HEAP32[$4 >> 2] = 361; //@line 34418
 HEAP32[$4 + 4 >> 2] = 0; //@line 34420
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 34421
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 34422
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 34422
 $7 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($6, $2, $$byval_copy) | 0; //@line 34423
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 518; //@line 34426
  sp = STACKTOP; //@line 34427
  STACKTOP = sp; //@line 34428
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 34431
 ___async_unwind = 0; //@line 34432
 HEAP32[$ReallocAsyncCtx2 >> 2] = 518; //@line 34433
 sp = STACKTOP; //@line 34434
 STACKTOP = sp; //@line 34435
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31724
 STACKTOP = STACKTOP + 16 | 0; //@line 31725
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 31725
 $$byval_copy = sp; //@line 31726
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31728
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31730
 $6 = HEAP32[$2 + 1328 >> 2] | 0; //@line 31732
 HEAP32[$4 >> 2] = 508; //@line 31733
 HEAP32[$4 + 4 >> 2] = 0; //@line 31735
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 31736
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 31737
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 31737
 $7 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($6, $2, $$byval_copy) | 0; //@line 31738
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 509; //@line 31741
  sp = STACKTOP; //@line 31742
  STACKTOP = sp; //@line 31743
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 31746
 ___async_unwind = 0; //@line 31747
 HEAP32[$ReallocAsyncCtx2 >> 2] = 509; //@line 31748
 sp = STACKTOP; //@line 31749
 STACKTOP = sp; //@line 31750
 return;
}
function __ZN4mbed5TimerC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4134
 HEAP32[$0 >> 2] = 0; //@line 4135
 $1 = $0 + 8 | 0; //@line 4136
 $2 = $0 + 16 | 0; //@line 4137
 HEAP32[$1 >> 2] = 0; //@line 4138
 HEAP32[$1 + 4 >> 2] = 0; //@line 4138
 HEAP32[$1 + 8 >> 2] = 0; //@line 4138
 HEAP32[$1 + 12 >> 2] = 0; //@line 4138
 $4 = $0 + 24 | 0; //@line 4140
 HEAP32[$4 >> 2] = _get_us_ticker_data() | 0; //@line 4141
 HEAP8[$0 + 28 >> 0] = 1; //@line 4143
 $6 = HEAP32[$4 >> 2] | 0; //@line 4144
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 4145
 $7 = _ticker_read_us($6) | 0; //@line 4146
 $8 = tempRet0; //@line 4147
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 169; //@line 4150
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4152
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 4154
  sp = STACKTOP; //@line 4155
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4158
  $11 = $1; //@line 4159
  HEAP32[$11 >> 2] = $7; //@line 4161
  HEAP32[$11 + 4 >> 2] = $8; //@line 4164
  $15 = $2; //@line 4165
  HEAP32[$15 >> 2] = 0; //@line 4167
  HEAP32[$15 + 4 >> 2] = 0; //@line 4170
  return;
 }
}
function __ZN7LoRaPHY11add_channelEP16channel_params_th__async_cb($0) {
 $0 = $0 | 0;
 var $$024 = 0, $10 = 0, $12 = 0, $2 = 0, $22 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $not$ = 0;
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 25114
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25116
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25118
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25120
 $not$ = HEAP8[___async_retval >> 0] & 1 ^ 1; //@line 25124
 if ($2 | $not$) {
  $$024 = $2 ? $2 & $not$ ? -1006 : -1005 : -1004; //@line 25130
  $27 = ___async_retval; //@line 25131
  HEAP32[$27 >> 2] = $$024; //@line 25132
  return;
 }
 $10 = $4 + 112 | 0; //@line 25135
 $12 = (HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 25137
 HEAP32[$12 >> 2] = HEAP32[$8 >> 2]; //@line 25138
 HEAP32[$12 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 25138
 HEAP32[$12 + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 25138
 HEAP8[(HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$8 + 9 >> 0] | 0; //@line 25143
 $22 = (HEAP32[$4 + 120 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 25149
 HEAP16[$22 >> 1] = 1 << ($6 & 15) | (HEAPU16[$22 >> 1] | 0); //@line 25154
 $$024 = 0; //@line 25155
 $27 = ___async_retval; //@line 25156
 HEAP32[$27 >> 2] = $$024; //@line 25157
 return;
}
function __GLOBAL__sub_I_main_cpp() {
 var $AsyncCtx = 0, $AsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 6434
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6435
 __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_(18952, 9, 8, 7, 6, 23, 4, 5, 66, 67, 0, 1, -1, -1, -1, -1, 62, -1, -1); //@line 6436
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 745; //@line 6439
  sp = STACKTOP; //@line 6440
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6443
 __ZN5Sht31C2E7PinNameS0_(23904, 10, 11); //@line 6444
 __ZN4mbed11InterruptInC2E7PinName(22928, 1337); //@line 6445
 __ZN6events10EventQueueC2EjPh(23e3, 1664, 0); //@line 6446
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6447
 __ZN16LoRaWANInterfaceC2ER9LoRaRadio(23200, 18952); //@line 6448
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 746; //@line 6451
  sp = STACKTOP; //@line 6452
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6455
  dest = 23208; //@line 6456
  stop = dest + 48 | 0; //@line 6456
  do {
   HEAP32[dest >> 2] = 0; //@line 6456
   dest = dest + 4 | 0; //@line 6456
  } while ((dest | 0) < (stop | 0));
  return;
 }
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22902
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22904
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22906
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22908
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 22910
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 22912
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 18503; //@line 22917
  HEAP32[$4 + 4 >> 2] = $6; //@line 22919
  _abort_message(18412, $4); //@line 22920
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 22923
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 22926
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 22927
 $16 = FUNCTION_TABLE_ii[$15 & 15]($12) | 0; //@line 22928
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 22932
  ___async_unwind = 0; //@line 22933
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 786; //@line 22935
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 22937
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 22939
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 22941
 sp = STACKTOP; //@line 22942
 return;
}
function __ZL12send_messagev__async_cb_126($0) {
 $0 = $0 | 0;
 var $12 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30806
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30808
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30812
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30814
 $AsyncRetVal = HEAP16[___async_retval >> 1] | 0; //@line 30818
 $12 = $AsyncRetVal << 16 >> 16; //@line 30819
 if ($AsyncRetVal << 16 >> 16 >= 0) {
  HEAP32[$2 >> 2] = $12; //@line 30822
  _printf(15904, $2) | 0; //@line 30823
  return;
 }
 if ($AsyncRetVal << 16 >> 16 != -1001) {
  HEAP32[$8 >> 2] = $12; //@line 30828
  _printf(15880, $8) | 0; //@line 30829
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 30832
 _puts(15852) | 0; //@line 30833
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 759; //@line 30836
  $15 = $ReallocAsyncCtx + 4 | 0; //@line 30837
  HEAP32[$15 >> 2] = $6; //@line 30838
  sp = STACKTOP; //@line 30839
  return;
 }
 ___async_unwind = 0; //@line 30842
 HEAP32[$ReallocAsyncCtx >> 2] = 759; //@line 30843
 $15 = $ReallocAsyncCtx + 4 | 0; //@line 30844
 HEAP32[$15 >> 2] = $6; //@line 30845
 sp = STACKTOP; //@line 30846
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_369($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 25765
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25773
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25775
 $11 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25776
 $12 = (HEAP32[$0 + 8 >> 2] | 0) + 1016 | 0; //@line 25777
 $13 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 25778
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 25779
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($11, $12, $13); //@line 25780
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 495; //@line 25783
  $14 = $ReallocAsyncCtx9 + 4 | 0; //@line 25784
  HEAP32[$14 >> 2] = $8; //@line 25785
  $15 = $ReallocAsyncCtx9 + 8 | 0; //@line 25786
  HEAP32[$15 >> 2] = $10; //@line 25787
  sp = STACKTOP; //@line 25788
  return;
 }
 ___async_unwind = 0; //@line 25791
 HEAP32[$ReallocAsyncCtx9 >> 2] = 495; //@line 25792
 $14 = $ReallocAsyncCtx9 + 4 | 0; //@line 25793
 HEAP32[$14 >> 2] = $8; //@line 25794
 $15 = $ReallocAsyncCtx9 + 8 | 0; //@line 25795
 HEAP32[$15 >> 2] = $10; //@line 25796
 sp = STACKTOP; //@line 25797
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_179($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 33620
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33622
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33624
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33626
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33628
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33630
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33632
 $15 = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 33635
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(28) | 0; //@line 33636
 __ZN7LoRaPHY18put_radio_to_sleepEv($15); //@line 33637
 if (!___async) {
  ___async_unwind = 0; //@line 33640
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 522; //@line 33642
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 33644
 HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $4; //@line 33646
 HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $6; //@line 33648
 HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $8; //@line 33650
 HEAP32[$ReallocAsyncCtx13 + 20 >> 2] = $10; //@line 33652
 HEAP32[$ReallocAsyncCtx13 + 24 >> 2] = $12; //@line 33654
 sp = STACKTOP; //@line 33655
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_440($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31310
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31312
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31314
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31316
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31318
 HEAP32[$2 >> 2] = 2; //@line 31319
 $9 = $2 + 4 | 0; //@line 31320
 HEAP8[$9 >> 0] = 1; //@line 31321
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 31322
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($4, $2) | 0; //@line 31323
 if (!___async) {
  ___async_unwind = 0; //@line 31326
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 312; //@line 31328
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 31330
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $9; //@line 31332
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $4; //@line 31334
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $2; //@line 31336
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $6; //@line 31338
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $8; //@line 31340
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $2; //@line 31342
 sp = STACKTOP; //@line 31343
 return;
}
function _mbedtls_gcm_setkey__async_cb_358($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24175
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24177
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24179
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24181
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24183
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24185
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24187
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24189
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 24193
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 24196
 $15 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 24197
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 24201
  ___async_unwind = 0; //@line 24202
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 692; //@line 24204
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 24206
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 24208
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 24210
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 24212
 sp = STACKTOP; //@line 24213
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22722
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22724
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22726
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22730
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 22734
  label = 4; //@line 22735
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 22740
   label = 4; //@line 22741
  } else {
   $$037$off039 = 3; //@line 22743
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 22747
  $17 = $8 + 40 | 0; //@line 22748
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 22751
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 22761
    $$037$off039 = $$037$off038; //@line 22762
   } else {
    $$037$off039 = $$037$off038; //@line 22764
   }
  } else {
   $$037$off039 = $$037$off038; //@line 22767
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 22770
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 14085
 while (1) {
  if ((HEAPU8[16475 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 14092
   break;
  }
  $7 = $$016 + 1 | 0; //@line 14095
  if (($7 | 0) == 87) {
   $$01214 = 16563; //@line 14098
   $$115 = 87; //@line 14098
   label = 5; //@line 14099
   break;
  } else {
   $$016 = $7; //@line 14102
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 16563; //@line 14108
  } else {
   $$01214 = 16563; //@line 14110
   $$115 = $$016; //@line 14110
   label = 5; //@line 14111
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 14116
   $$113 = $$01214; //@line 14117
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 14121
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 14128
   if (!$$115) {
    $$012$lcssa = $$113; //@line 14131
    break;
   } else {
    $$01214 = $$113; //@line 14134
    label = 5; //@line 14135
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 14142
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 14840
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 14849
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 14854
      HEAP32[$13 >> 2] = $2; //@line 14855
      $19 = $1 + 40 | 0; //@line 14856
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 14859
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 14869
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 14873
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 14880
    }
   }
  }
 } while (0);
 return;
}
function _mbedtls_gcm_setkey__async_cb_359($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24220
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24222
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24224
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24226
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24228
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24230
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24232
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24234
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 24235
 $15 = _mbedtls_cipher_setup($2, $4) | 0; //@line 24236
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 24240
  ___async_unwind = 0; //@line 24241
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 691; //@line 24243
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 24245
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 24247
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $8; //@line 24249
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $10; //@line 24251
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $12; //@line 24253
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $14; //@line 24255
 sp = STACKTOP; //@line 24256
 return;
}
function __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 $5 = +$5;
 $6 = $6 | 0;
 var $13 = 0, $16 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23531
 STACKTOP = STACKTOP + 16 | 0; //@line 23532
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 23532
 $7 = sp; //@line 23533
 HEAP8[$7 >> 0] = $1; //@line 23534
 HEAP8[$7 + 1 >> 0] = $2; //@line 23536
 HEAP8[$7 + 2 >> 0] = $3; //@line 23538
 HEAPF32[$7 + 4 >> 2] = $4; //@line 23540
 HEAPF32[$7 + 8 >> 2] = $5; //@line 23542
 HEAP16[$7 + 12 >> 1] = $6; //@line 23544
 $13 = HEAP32[$0 >> 2] | 0; //@line 23545
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 68 >> 2] | 0; //@line 23548
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 23549
 FUNCTION_TABLE_viii[$16 & 7]($13, $7, 0); //@line 23550
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 612; //@line 23553
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 23555
  sp = STACKTOP; //@line 23556
  STACKTOP = sp; //@line 23557
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 23559
  STACKTOP = sp; //@line 23560
  return;
 }
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11663
 $1 = $0 + 12 | 0; //@line 11664
 $2 = HEAP32[$1 >> 2] | 0; //@line 11665
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11669
   _mbed_assert_internal(15061, 15066, 528); //@line 11670
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 375; //@line 11673
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 11675
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 11677
    sp = STACKTOP; //@line 11678
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 11681
    $7 = HEAP32[$1 >> 2] | 0; //@line 11683
    break;
   }
  } else {
   $7 = $2; //@line 11687
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 11690
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11691
 FUNCTION_TABLE_vi[$6 & 1023]($0); //@line 11692
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 376; //@line 11695
  sp = STACKTOP; //@line 11696
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11699
  return;
 }
}
function __ZN4mbed11InterruptInD2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3653
 HEAP32[$0 >> 2] = 668; //@line 3654
 _gpio_irq_free($0 + 28 | 0); //@line 3656
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 3658
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 3664
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3665
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 3666
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 152; //@line 3669
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3671
    sp = STACKTOP; //@line 3672
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3675
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 3681
 if (!$10) {
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 3688
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3689
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 3690
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 153; //@line 3693
  sp = STACKTOP; //@line 3694
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3697
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_455($0) {
 $0 = $0 | 0;
 var $$pre122 = 0, $10 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 33620
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33622
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33624
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33626
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33628
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33630
 $$pre122 = HEAP32[$2 >> 2] | 0; //@line 33631
 if (!$$pre122) {
  HEAP32[$4 >> 2] = 0; //@line 33634
  HEAP32[___async_retval >> 2] = $10; //@line 33636
  return;
 }
 $13 = HEAP32[$$pre122 + 4 >> 2] | 0; //@line 33640
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 33641
 FUNCTION_TABLE_vii[$13 & 31]($6, $8); //@line 33642
 if (!___async) {
  ___async_unwind = 0; //@line 33645
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 583; //@line 33647
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 33649
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $4; //@line 33651
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $8; //@line 33653
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $10; //@line 33655
 sp = STACKTOP; //@line 33656
 return;
}
function __ZN4mbed7Timeout7handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4089
 $1 = $0 + 40 | 0; //@line 4090
 $2 = $0 + 52 | 0; //@line 4091
 $3 = HEAP32[$2 >> 2] | 0; //@line 4092
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4096
   _mbed_assert_internal(15061, 15066, 528); //@line 4097
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 167; //@line 4100
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 4102
    HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 4104
    sp = STACKTOP; //@line 4105
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4108
    $8 = HEAP32[$2 >> 2] | 0; //@line 4110
    break;
   }
  } else {
   $8 = $3; //@line 4114
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 4117
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4118
 FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 4119
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 168; //@line 4122
  sp = STACKTOP; //@line 4123
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4126
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_412($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx25 = 0, sp = 0;
 sp = STACKTOP; //@line 29634
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29638
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29640
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29642
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29644
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29646
 $13 = $4 + 12 | 0; //@line 29648
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29649
 $ReallocAsyncCtx25 = _emscripten_realloc_async_context(20) | 0; //@line 29650
 $14 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 5) | 0; //@line 29651
 if (!___async) {
  HEAP32[___async_retval >> 2] = $14; //@line 29655
  ___async_unwind = 0; //@line 29656
 }
 HEAP32[$ReallocAsyncCtx25 >> 2] = 263; //@line 29658
 HEAP32[$ReallocAsyncCtx25 + 4 >> 2] = $13; //@line 29660
 HEAP32[$ReallocAsyncCtx25 + 8 >> 2] = $8; //@line 29662
 HEAP32[$ReallocAsyncCtx25 + 12 >> 2] = $10; //@line 29664
 HEAP32[$ReallocAsyncCtx25 + 16 >> 2] = $12; //@line 29666
 sp = STACKTOP; //@line 29667
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_14($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 17196
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17198
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17200
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17206
 _printf(10904, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 17209
 HEAP32[$10 >> 2] = 3; //@line 17210
 _printf(10999, $10) | 0; //@line 17211
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 17212
 _putchar(10) | 0; //@line 17213
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 141; //@line 17216
  $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 17217
  HEAP32[$13 >> 2] = $2; //@line 17218
  $14 = $ReallocAsyncCtx4 + 8 | 0; //@line 17219
  HEAP32[$14 >> 2] = $4; //@line 17220
  sp = STACKTOP; //@line 17221
  return;
 }
 ___async_unwind = 0; //@line 17224
 HEAP32[$ReallocAsyncCtx4 >> 2] = 141; //@line 17225
 $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 17226
 HEAP32[$13 >> 2] = $2; //@line 17227
 $14 = $ReallocAsyncCtx4 + 8 | 0; //@line 17228
 HEAP32[$14 >> 2] = $4; //@line 17229
 sp = STACKTOP; //@line 17230
 return;
}
function __ZN4mbed6TickerD0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6222
 HEAP32[$0 >> 2] = 10108; //@line 6223
 $1 = $0 + 40 | 0; //@line 6224
 _emscripten_asm_const_ii(12, $1 | 0) | 0; //@line 6225
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 6227
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 6232
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6233
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 6234
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 738; //@line 6237
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6239
    sp = STACKTOP; //@line 6240
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6243
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6248
 __ZN4mbed10TimerEventD2Ev($0); //@line 6249
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 739; //@line 6252
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 6254
  sp = STACKTOP; //@line 6255
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6258
  __ZdlPv($0); //@line 6259
  return;
 }
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 36220
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36222
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36224
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36226
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36228
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36230
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 36236
  return;
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 36239
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 36240
 __ZN7LoRaPHY18put_radio_to_sleepEv($12); //@line 36241
 if (!___async) {
  ___async_unwind = 0; //@line 36244
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 587; //@line 36246
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 36248
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 36250
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 36252
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 36254
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 36256
 sp = STACKTOP; //@line 36257
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_91($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 25691
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 25695
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25697
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25698
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 76 >> 2] | 0; //@line 25701
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 25702
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 25703
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 625; //@line 25706
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 25707
  HEAP8[$11 >> 0] = $4; //@line 25708
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 25709
  HEAP32[$12 >> 2] = $6; //@line 25710
  sp = STACKTOP; //@line 25711
  return;
 }
 ___async_unwind = 0; //@line 25714
 HEAP32[$ReallocAsyncCtx9 >> 2] = 625; //@line 25715
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 25716
 HEAP8[$11 >> 0] = $4; //@line 25717
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 25718
 HEAP32[$12 >> 2] = $6; //@line 25719
 sp = STACKTOP; //@line 25720
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_413($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx30 = 0, sp = 0;
 sp = STACKTOP; //@line 29673
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29677
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29679
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$4 >> 2] = 6; //@line 29682
  HEAP32[___async_retval >> 2] = -1014; //@line 29684
  return;
 }
 $ReallocAsyncCtx30 = _emscripten_realloc_async_context(12) | 0; //@line 29687
 _mbed_assert_internal(12851, 11935, 1243); //@line 29688
 if (___async) {
  HEAP32[$ReallocAsyncCtx30 >> 2] = 265; //@line 29691
  $8 = $ReallocAsyncCtx30 + 4 | 0; //@line 29692
  HEAP32[$8 >> 2] = $4; //@line 29693
  $9 = $ReallocAsyncCtx30 + 8 | 0; //@line 29694
  HEAP32[$9 >> 2] = $6; //@line 29695
  sp = STACKTOP; //@line 29696
  return;
 }
 ___async_unwind = 0; //@line 29699
 HEAP32[$ReallocAsyncCtx30 >> 2] = 265; //@line 29700
 $8 = $ReallocAsyncCtx30 + 4 | 0; //@line 29701
 HEAP32[$8 >> 2] = $4; //@line 29702
 $9 = $ReallocAsyncCtx30 + 8 | 0; //@line 29703
 HEAP32[$9 >> 2] = $6; //@line 29704
 sp = STACKTOP; //@line 29705
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_261($0) {
 $0 = $0 | 0;
 var $19 = 0, $23 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12214
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12218
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12220
 HEAP32[$4 + 364 >> 2] = 2; //@line 12222
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 12230
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 12235
 if ((HEAP32[$6 >> 2] | 0) != 2) {
  $19 = $4 + 944 | 0; //@line 12239
  HEAP8[$19 >> 0] = HEAP8[$19 >> 0] | 32; //@line 12242
 }
 $23 = HEAP32[$4 + 356 >> 2] | 0; //@line 12245
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 12247
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($23, $4 + 996 | 0, 1); //@line 12248
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 447; //@line 12251
  sp = STACKTOP; //@line 12252
  return;
 }
 ___async_unwind = 0; //@line 12255
 HEAP32[$ReallocAsyncCtx3 >> 2] = 447; //@line 12256
 sp = STACKTOP; //@line 12257
 return;
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6289
 $2 = $0 + 12 | 0; //@line 6291
 $3 = HEAP32[$2 >> 2] | 0; //@line 6292
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6296
   _mbed_assert_internal(15061, 15066, 528); //@line 6297
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 741; //@line 6300
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 6302
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 6304
    sp = STACKTOP; //@line 6305
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6308
    $8 = HEAP32[$2 >> 2] | 0; //@line 6310
    break;
   }
  } else {
   $8 = $3; //@line 6314
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 6317
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6319
 FUNCTION_TABLE_vi[$7 & 1023]($0); //@line 6320
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 742; //@line 6323
  sp = STACKTOP; //@line 6324
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6327
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4045
 HEAP32[$0 >> 2] = 10108; //@line 4046
 __ZN4mbed6Ticker6detachEv($0); //@line 4047
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 4049
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 4055
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4056
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 4057
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 165; //@line 4060
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4062
    sp = STACKTOP; //@line 4063
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4066
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4071
 __ZN4mbed10TimerEventD2Ev($0); //@line 4072
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 166; //@line 4075
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 4077
  sp = STACKTOP; //@line 4078
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4081
  __ZdlPv($0); //@line 4082
  return;
 }
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14673
 STACKTOP = STACKTOP + 16 | 0; //@line 14674
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14674
 $1 = sp; //@line 14675
 HEAP32[$1 >> 2] = $varargs; //@line 14676
 $2 = HEAP32[2538] | 0; //@line 14677
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14678
 _vfprintf($2, $0, $1) | 0; //@line 14679
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 787; //@line 14682
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 14684
  sp = STACKTOP; //@line 14685
  STACKTOP = sp; //@line 14686
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14688
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14689
 _fputc(10, $2) | 0; //@line 14690
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 788; //@line 14693
  sp = STACKTOP; //@line 14694
  STACKTOP = sp; //@line 14695
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 14697
  _abort(); //@line 14698
 }
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_12($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 17106
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17108
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17110
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17112
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17114
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17116
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17118
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(28) | 0; //@line 17119
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 17120
 if (!___async) {
  ___async_unwind = 0; //@line 17123
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 140; //@line 17125
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 17127
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 17129
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 17131
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 17133
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 17135
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $12; //@line 17137
 sp = STACKTOP; //@line 17138
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23386
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23388
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23392
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 23394
 $9 = HEAP32[$2 >> 2] | 0; //@line 23395
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 68 >> 2] | 0; //@line 23398
 $14 = HEAP16[(HEAP32[$0 + 8 >> 2] | 0) + 12 >> 1] | 0; //@line 23400
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 23401
 FUNCTION_TABLE_viiii[$12 & 7]($9, $6, $8, $14); //@line 23402
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 637; //@line 23405
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 23406
  HEAP32[$15 >> 2] = $2; //@line 23407
  sp = STACKTOP; //@line 23408
  return;
 }
 ___async_unwind = 0; //@line 23411
 HEAP32[$ReallocAsyncCtx2 >> 2] = 637; //@line 23412
 $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 23413
 HEAP32[$15 >> 2] = $2; //@line 23414
 sp = STACKTOP; //@line 23415
 return;
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28513
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28515
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28517
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28519
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28521
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[5729] | 0)) {
  _serial_init(22920, 2, 3); //@line 28529
 }
 $12 = HEAP8[$6 >> 0] | 0; //@line 28532
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 28533
 _serial_putc(22920, $12); //@line 28534
 if (!___async) {
  ___async_unwind = 0; //@line 28537
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 732; //@line 28539
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = 0; //@line 28541
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $AsyncRetVal; //@line 28543
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 28545
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $4; //@line 28547
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $6; //@line 28549
 sp = STACKTOP; //@line 28550
 return;
}
function __ZN7LoRaPHY17calculate_backoffEP16backoff_params_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$034 = 0, $$sink = 0, $11 = 0, $13 = 0, $14 = 0, $18 = 0, $3 = 0, $30 = 0;
 $3 = HEAP32[$0 + 72 >> 2] | 0; //@line 26718
 $11 = HEAPU8[(HEAP32[$0 + 112 >> 2] | 0) + ((HEAPU8[$1 + 3 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0; //@line 26726
 $13 = HEAP16[$3 + ($11 * 24 | 0) >> 1] | 0; //@line 26728
 $14 = $3 + ($11 * 24 | 0) + 12 | 0; //@line 26729
 HEAP32[$14 >> 2] = 0; //@line 26730
 if (!(HEAP8[$1 >> 0] | 0)) {
  $18 = HEAP32[$1 + 4 >> 2] | 0; //@line 26735
  $$0 = $18 >>> 0 < 36e5 ? 100 : $18 >>> 0 < 396e5 ? 1e3 : 1e4; //@line 26739
  $$034 = ($13 & 65535) > ($$0 & 65535) ? $13 : $$0; //@line 26742
 } else {
  $$034 = $13; //@line 26744
 }
 if (!(HEAP8[$1 + 2 >> 0] | 0)) {
  if (!(HEAP8[$1 + 1 >> 0] | 0)) {
   $$sink = 0; //@line 26754
   HEAP32[$14 >> 2] = $$sink; //@line 26755
   return;
  }
 }
 $30 = HEAP32[$1 + 8 >> 2] | 0; //@line 26760
 $$sink = (Math_imul($30, $$034 & 65535) | 0) - $30 | 0; //@line 26764
 HEAP32[$14 >> 2] = $$sink; //@line 26765
 return;
}
function __ZN4mbed6TickerD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6181
 HEAP32[$0 >> 2] = 10108; //@line 6182
 $1 = $0 + 40 | 0; //@line 6183
 _emscripten_asm_const_ii(12, $1 | 0) | 0; //@line 6184
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 6186
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 6191
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6192
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 6193
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 736; //@line 6196
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6198
    sp = STACKTOP; //@line 6199
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6202
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6207
 __ZN4mbed10TimerEventD2Ev($0); //@line 6208
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 737; //@line 6211
  sp = STACKTOP; //@line 6212
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6215
  return;
 }
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 31239
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31241
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31243
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31245
 HEAP32[$2 + 1960 >> 2] = 0; //@line 31247
 HEAP32[$2 + 1956 >> 2] = 0; //@line 31249
 HEAP32[$4 >> 2] = 1; //@line 31250
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 31251
 $9 = __ZN12LoRaWANStack18lora_state_machineEv($2) | 0; //@line 31252
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 314; //@line 31255
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 31256
  HEAP32[$10 >> 2] = $6; //@line 31257
  sp = STACKTOP; //@line 31258
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 31262
 ___async_unwind = 0; //@line 31263
 HEAP32[$ReallocAsyncCtx4 >> 2] = 314; //@line 31264
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 31265
 HEAP32[$10 >> 2] = $6; //@line 31266
 sp = STACKTOP; //@line 31267
 return;
}
function _ticker_read_us__async_cb_225($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 191
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 193
 $3 = $2 + 4 | 0; //@line 194
 $4 = HEAP32[$3 >> 2] | 0; //@line 195
 $7 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 198
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 199
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 200
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 713; //@line 203
  $9 = $ReallocAsyncCtx + 4 | 0; //@line 204
  HEAP32[$9 >> 2] = $3; //@line 205
  $10 = $ReallocAsyncCtx + 8 | 0; //@line 206
  HEAP32[$10 >> 2] = $4; //@line 207
  sp = STACKTOP; //@line 208
  return;
 }
 HEAP32[___async_retval >> 2] = $8; //@line 212
 ___async_unwind = 0; //@line 213
 HEAP32[$ReallocAsyncCtx >> 2] = 713; //@line 214
 $9 = $ReallocAsyncCtx + 4 | 0; //@line 215
 HEAP32[$9 >> 2] = $3; //@line 216
 $10 = $ReallocAsyncCtx + 8 | 0; //@line 217
 HEAP32[$10 >> 2] = $4; //@line 218
 sp = STACKTOP; //@line 219
 return;
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb_48($0) {
 $0 = $0 | 0;
 var $15 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22077
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22079
 __ZN4mbed6Ticker6detachEv($2 + 1112 | 0); //@line 22081
 HEAP8[$2 + 688 >> 0] = 0; //@line 22083
 $6 = HEAP32[$2 + 784 >> 2] | 0; //@line 22085
 if (!$6) {
  return;
 }
 $9 = HEAP32[$6 + 44 >> 2] | 0; //@line 22091
 if (!$9) {
  return;
 }
 $15 = HEAPU8[$2 + 782 >> 0] | 0; //@line 22100
 $18 = HEAP8[$2 + 781 >> 0] | 0; //@line 22103
 $20 = HEAP8[$2 + 780 >> 0] | 0; //@line 22105
 $21 = HEAP32[$9 >> 2] | 0; //@line 22106
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 22107
 FUNCTION_TABLE_viiiii[$21 & 7]($6 + 32 | 0, $2 + 788 | 0, $15, $18, $20); //@line 22108
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 129; //@line 22111
  sp = STACKTOP; //@line 22112
  return;
 }
 ___async_unwind = 0; //@line 22115
 HEAP32[$ReallocAsyncCtx >> 2] = 129; //@line 22116
 sp = STACKTOP; //@line 22117
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_439($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 31274
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31278
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31280
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31282
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31284
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31286
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31288
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 7; //@line 31289
 HEAP8[$4 >> 0] = 1; //@line 31290
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 31291
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $8) | 0; //@line 31292
 if (!___async) {
  ___async_unwind = 0; //@line 31295
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 313; //@line 31297
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $10; //@line 31299
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $12; //@line 31301
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $14; //@line 31303
 sp = STACKTOP; //@line 31304
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_153($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31839
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31843
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31845
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31846
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 31850
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 31854
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 31855
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 31856
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 373; //@line 31859
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 31860
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 31861
  sp = STACKTOP; //@line 31862
  return;
 }
 ___async_unwind = 0; //@line 31865
 HEAP32[$ReallocAsyncCtx2 >> 2] = 373; //@line 31866
 $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 31867
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 31868
 sp = STACKTOP; //@line 31869
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_122($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30566
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30568
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30570
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30572
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30574
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30576
 $12 = HEAP32[$2 + 356 >> 2] | 0; //@line 30578
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 30580
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($12, $2 + 1036 | 0); //@line 30581
 if (!___async) {
  ___async_unwind = 0; //@line 30584
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 512; //@line 30586
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 30588
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 30590
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 30592
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 30594
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 30596
 sp = STACKTOP; //@line 30597
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_6($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 16730
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16732
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16734
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16736
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16738
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16740
 $12 = HEAP32[$2 + 356 >> 2] | 0; //@line 16742
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 16744
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($12, $2 + 1056 | 0); //@line 16745
 if (!___async) {
  ___async_unwind = 0; //@line 16748
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 379; //@line 16750
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 16752
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 16754
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 16756
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 16758
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 16760
 sp = STACKTOP; //@line 16761
 return;
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 13916
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 13916
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 13917
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 13918
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 13927
    $$016 = $9; //@line 13930
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 13930
   } else {
    $$016 = $0; //@line 13932
    $storemerge = 0; //@line 13932
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 13934
   $$0 = $$016; //@line 13935
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 13939
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 13945
   HEAP32[tempDoublePtr >> 2] = $2; //@line 13948
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 13948
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 13949
  }
 }
 return +$$0;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_421($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 30429
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30433
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30435
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30437
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30439
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30441
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30443
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 1; //@line 30444
 HEAP8[$4 >> 0] = 1; //@line 30445
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(16) | 0; //@line 30446
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $8) | 0; //@line 30447
 if (!___async) {
  ___async_unwind = 0; //@line 30450
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 255; //@line 30452
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $10; //@line 30454
 HEAP32[$ReallocAsyncCtx15 + 8 >> 2] = $12; //@line 30456
 HEAP32[$ReallocAsyncCtx15 + 12 >> 2] = $14; //@line 30458
 sp = STACKTOP; //@line 30459
 return;
}
function _mbed_error_printf__async_cb_404($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28557
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28561
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28563
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28565
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28567
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 28568
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $14 = HEAP8[$10 + $12 >> 0] | 0; //@line 28575
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 28576
 _serial_putc(22920, $14); //@line 28577
 if (!___async) {
  ___async_unwind = 0; //@line 28580
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 732; //@line 28582
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $12; //@line 28584
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 28586
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 28588
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 28590
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 28592
 sp = STACKTOP; //@line 28593
 return;
}
function _equeue_sema_wait($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $20 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 5668
 STACKTOP = STACKTOP + 16 | 0; //@line 5669
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5669
 $2 = sp + 8 | 0; //@line 5670
 $3 = sp; //@line 5671
 _pthread_mutex_lock($0 | 0) | 0; //@line 5672
 $4 = $0 + 76 | 0; //@line 5673
 do {
  if (!(HEAP8[$4 >> 0] | 0)) {
   if (($1 | 0) < 0) {
    _pthread_cond_wait($0 + 28 | 0, $0 | 0) | 0; //@line 5681
    break;
   } else {
    _gettimeofday($2 | 0, 0) | 0; //@line 5684
    HEAP32[$3 >> 2] = (HEAP32[$2 >> 2] | 0) + (($1 >>> 0) / 1e3 | 0); //@line 5688
    HEAP32[$3 + 4 >> 2] = ((HEAP32[$2 + 4 >> 2] | 0) * 1e3 | 0) + ($1 * 1e6 | 0); //@line 5695
    _pthread_cond_timedwait($0 + 28 | 0, $0 | 0, $3 | 0) | 0; //@line 5697
    break;
   }
  }
 } while (0);
 $20 = (HEAP8[$4 >> 0] | 0) != 0; //@line 5703
 HEAP8[$4 >> 0] = 0; //@line 5704
 _pthread_mutex_unlock($0 | 0) | 0; //@line 5705
 STACKTOP = sp; //@line 5706
 return $20 | 0; //@line 5706
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23332
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23334
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23336
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23340
 $11 = $2 + 689 | 0; //@line 23343
 HEAP8[$11 >> 0] = 0; //@line 23344
 _printf(10904, $4) | 0; //@line 23345
 HEAP32[$8 >> 2] = HEAPU8[$11 >> 0]; //@line 23348
 _printf(11079, $8) | 0; //@line 23349
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 23350
 _putchar(10) | 0; //@line 23351
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 51; //@line 23354
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 23355
  HEAP32[$14 >> 2] = $2; //@line 23356
  sp = STACKTOP; //@line 23357
  return;
 }
 ___async_unwind = 0; //@line 23360
 HEAP32[$ReallocAsyncCtx2 >> 2] = 51; //@line 23361
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 23362
 HEAP32[$14 >> 2] = $2; //@line 23363
 sp = STACKTOP; //@line 23364
 return;
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16302
 STACKTOP = STACKTOP + 16 | 0; //@line 16303
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16303
 $3 = sp; //@line 16304
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 16306
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 16309
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 16310
 $8 = FUNCTION_TABLE_iiii[$7 & 15]($0, $1, $3) | 0; //@line 16311
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 811; //@line 16314
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 16316
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 16318
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 16320
  sp = STACKTOP; //@line 16321
  STACKTOP = sp; //@line 16322
  return 0; //@line 16322
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16324
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 16328
 }
 STACKTOP = sp; //@line 16330
 return $8 & 1 | 0; //@line 16330
}
function __ZN16SX1276_LoRaRadio5sleepEv__async_cb_155($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 32069
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32071
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32073
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32077
 __ZN4mbed6Ticker6detachEv($2 + 1048 | 0); //@line 32081
 __ZN4mbed6Ticker6detachEv($2 + 1112 | 0); //@line 32083
 _printf(10904, $4) | 0; //@line 32084
 HEAP32[$8 >> 2] = 0; //@line 32085
 _printf(10970, $8) | 0; //@line 32086
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 32087
 _putchar(10) | 0; //@line 32088
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 54; //@line 32091
  $13 = $ReallocAsyncCtx + 4 | 0; //@line 32092
  HEAP32[$13 >> 2] = $2; //@line 32093
  sp = STACKTOP; //@line 32094
  return;
 }
 ___async_unwind = 0; //@line 32097
 HEAP32[$ReallocAsyncCtx >> 2] = 54; //@line 32098
 $13 = $ReallocAsyncCtx + 4 | 0; //@line 32099
 HEAP32[$13 >> 2] = $2; //@line 32100
 sp = STACKTOP; //@line 32101
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_410($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx26 = 0, sp = 0;
 sp = STACKTOP; //@line 29567
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29571
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29573
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29575
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29577
 $11 = $4 + 12 | 0; //@line 29579
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29580
 $ReallocAsyncCtx26 = _emscripten_realloc_async_context(16) | 0; //@line 29581
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 0) | 0; //@line 29582
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 29586
  ___async_unwind = 0; //@line 29587
 }
 HEAP32[$ReallocAsyncCtx26 >> 2] = 257; //@line 29589
 HEAP32[$ReallocAsyncCtx26 + 4 >> 2] = $11; //@line 29591
 HEAP32[$ReallocAsyncCtx26 + 8 >> 2] = $8; //@line 29593
 HEAP32[$ReallocAsyncCtx26 + 12 >> 2] = $10; //@line 29595
 sp = STACKTOP; //@line 29596
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_408($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx27 = 0, sp = 0;
 sp = STACKTOP; //@line 29500
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29504
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29506
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29508
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29510
 $11 = $4 + 12 | 0; //@line 29512
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29513
 $ReallocAsyncCtx27 = _emscripten_realloc_async_context(16) | 0; //@line 29514
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 0) | 0; //@line 29515
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 29519
  ___async_unwind = 0; //@line 29520
 }
 HEAP32[$ReallocAsyncCtx27 >> 2] = 248; //@line 29522
 HEAP32[$ReallocAsyncCtx27 + 4 >> 2] = $11; //@line 29524
 HEAP32[$ReallocAsyncCtx27 + 8 >> 2] = $8; //@line 29526
 HEAP32[$ReallocAsyncCtx27 + 12 >> 2] = $10; //@line 29528
 sp = STACKTOP; //@line 29529
 return;
}
function __ZN7LoRaPHY19num_active_channelsEPthh($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$01012 = 0, $$011 = 0, $8 = 0, $9 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 & 255) < ($3 & 255))) {
  $$011 = 0; //@line 25666
  return $$011 | 0; //@line 25667
 }
 $wide$trip$count = $3 & 255; //@line 25670
 $$01012 = 0; //@line 25671
 $indvars$iv = $2 & 255; //@line 25671
 do {
  $8 = HEAP16[$1 + ($indvars$iv << 1) >> 1] | 0; //@line 25674
  $9 = $8 & 65535; //@line 25675
  $$01012 = ($$01012 & 255) + (($9 & 1) + ($9 >>> 1 & 1) + ($9 >>> 2 & 1) + ($9 >>> 3 & 1) + ($9 >>> 4 & 1) + ($9 >>> 5 & 1) + ($9 >>> 6 & 1) + ($9 >>> 7 & 1) + ($9 >>> 8 & 1) + ($9 >>> 9 & 1) + ($9 >>> 10 & 1) + ($9 >>> 11 & 1) + ($9 >>> 12 & 1) + ($9 >>> 13 & 1) + ($9 >>> 14 & 1) + (($8 & 65535) >>> 15 & 65535) & 255) | 0; //@line 25724
  $indvars$iv = $indvars$iv + 1 | 0; //@line 25725
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$011 = $$01012 & 255; //@line 25734
 return $$011 | 0; //@line 25735
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx28 = 0, sp = 0;
 sp = STACKTOP; //@line 29433
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29437
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29439
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29441
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29443
 $11 = $4 + 12 | 0; //@line 29445
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29446
 $ReallocAsyncCtx28 = _emscripten_realloc_async_context(16) | 0; //@line 29447
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 1) | 0; //@line 29448
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 29452
  ___async_unwind = 0; //@line 29453
 }
 HEAP32[$ReallocAsyncCtx28 >> 2] = 243; //@line 29455
 HEAP32[$ReallocAsyncCtx28 + 4 >> 2] = $11; //@line 29457
 HEAP32[$ReallocAsyncCtx28 + 8 >> 2] = $8; //@line 29459
 HEAP32[$ReallocAsyncCtx28 + 12 >> 2] = $10; //@line 29461
 sp = STACKTOP; //@line 29462
 return;
}
function __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19129
 STACKTOP = STACKTOP + 16 | 0; //@line 19130
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19130
 _printf(12967, sp) | 0; //@line 19133
 _printf(13524, sp + 8 | 0) | 0; //@line 19134
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 19135
 _putchar(10) | 0; //@line 19136
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 560; //@line 19139
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 19141
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 19143
  sp = STACKTOP; //@line 19144
  STACKTOP = sp; //@line 19145
  return 0; //@line 19145
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19147
  $6 = __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0 + 348 | 0, $1, $0 + 360 | 0) | 0; //@line 19150
  STACKTOP = sp; //@line 19151
  return $6 | 0; //@line 19151
 }
 return 0; //@line 19153
}
function _schedule_interrupt__async_cb_253($0) {
 $0 = $0 | 0;
 var $16 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11831
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11835
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11837
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11839
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 11840
 if ($4 >>> 0 > $8 >>> 0) {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 | $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 } else {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 & $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 }
 $16 = HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] | 0; //@line 11859
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 11860
 FUNCTION_TABLE_v[$16 & 15](); //@line 11861
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 709; //@line 11864
  sp = STACKTOP; //@line 11865
  return;
 }
 ___async_unwind = 0; //@line 11868
 HEAP32[$ReallocAsyncCtx6 >> 2] = 709; //@line 11869
 sp = STACKTOP; //@line 11870
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34426
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34434
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34436
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34438
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 34440
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 34442
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 34444
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 34446
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 34457
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 34458
 HEAP32[$10 >> 2] = 0; //@line 34459
 HEAP32[$12 >> 2] = 0; //@line 34460
 HEAP32[$14 >> 2] = 0; //@line 34461
 HEAP32[$2 >> 2] = 0; //@line 34462
 $33 = HEAP32[$16 >> 2] | 0; //@line 34463
 HEAP32[$16 >> 2] = $33 | $18; //@line 34468
 if ($20 | 0) {
  ___unlockfile($22); //@line 34471
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 34474
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_51($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22600
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22604
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22606
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22607
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 22611
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 22615
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 22616
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 22617
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 417; //@line 22620
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 22621
  HEAP32[$11 >> 2] = $4; //@line 22622
  sp = STACKTOP; //@line 22623
  return;
 }
 ___async_unwind = 0; //@line 22626
 HEAP32[$ReallocAsyncCtx5 >> 2] = 417; //@line 22627
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 22628
 HEAP32[$11 >> 2] = $4; //@line 22629
 sp = STACKTOP; //@line 22630
 return;
}
function __ZN4mbed7TimeoutD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4004
 HEAP32[$0 >> 2] = 10108; //@line 4005
 __ZN4mbed6Ticker6detachEv($0); //@line 4006
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 4008
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 4014
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4015
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 4016
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 163; //@line 4019
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4021
    sp = STACKTOP; //@line 4022
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4025
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4030
 __ZN4mbed10TimerEventD2Ev($0); //@line 4031
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 164; //@line 4034
  sp = STACKTOP; //@line 4035
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4038
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_398($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27948
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27952
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27954
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27955
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 27959
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 27963
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 27964
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 27965
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 27968
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 27969
  HEAP32[$11 >> 2] = $4; //@line 27970
  sp = STACKTOP; //@line 27971
  return;
 }
 ___async_unwind = 0; //@line 27974
 HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 27975
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 27976
 HEAP32[$11 >> 2] = $4; //@line 27977
 sp = STACKTOP; //@line 27978
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_1($0) {
 $0 = $0 | 0;
 var $$0 = 0, $19 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 16420
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16424
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = (HEAPU8[23874] | 0) << 16 | (HEAPU8[23875] | 0) << 24 | (HEAPU8[23873] | 0) << 8 | (HEAPU8[23872] | 0); //@line 16441
  $$0 = 0; //@line 16442
 } else {
  $$0 = $AsyncRetVal; //@line 16444
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 16446
 _mbedtls_cipher_free(22564); //@line 16447
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 605; //@line 16450
  $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 16451
  HEAP32[$19 >> 2] = $$0; //@line 16452
  sp = STACKTOP; //@line 16453
  return;
 }
 ___async_unwind = 0; //@line 16456
 HEAP32[$ReallocAsyncCtx5 >> 2] = 605; //@line 16457
 $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 16458
 HEAP32[$19 >> 2] = $$0; //@line 16459
 sp = STACKTOP; //@line 16460
 return;
}
function __ZN16LoRaWANInterface7connectEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5726
 STACKTOP = STACKTOP + 32 | 0; //@line 5727
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 5727
 $1 = sp; //@line 5728
 HEAP8[$1 >> 0] = 1; //@line 5729
 HEAP32[$1 + 4 >> 2] = 0; //@line 5731
 HEAP32[$1 + 8 >> 2] = 0; //@line 5733
 HEAP32[$1 + 12 >> 2] = 23840; //@line 5735
 HEAP32[$1 + 16 >> 2] = 23856; //@line 5737
 $8 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 5740
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5741
 $9 = FUNCTION_TABLE_iii[$8 & 31]($0, $1) | 0; //@line 5742
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 185; //@line 5745
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5747
  sp = STACKTOP; //@line 5748
  STACKTOP = sp; //@line 5749
  return 0; //@line 5749
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5751
  STACKTOP = sp; //@line 5752
  return $9 | 0; //@line 5752
 }
 return 0; //@line 5754
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15196
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 15202
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 15205
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 15208
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15209
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 15210
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 793; //@line 15213
    sp = STACKTOP; //@line 15214
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15217
    break;
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_78($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24806
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24810
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24812
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24813
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 24817
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 24821
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 24822
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 24823
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 286; //@line 24826
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 24827
  HEAP32[$11 >> 2] = $4; //@line 24828
  sp = STACKTOP; //@line 24829
  return;
 }
 ___async_unwind = 0; //@line 24832
 HEAP32[$ReallocAsyncCtx5 >> 2] = 286; //@line 24833
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 24834
 HEAP32[$11 >> 2] = $4; //@line 24835
 sp = STACKTOP; //@line 24836
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_190($0) {
 $0 = $0 | 0;
 var $$0 = 0, $19 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 34225
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 34229
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = (HEAPU8[23874] | 0) << 16 | (HEAPU8[23875] | 0) << 24 | (HEAPU8[23873] | 0) << 8 | (HEAPU8[23872] | 0); //@line 34246
  $$0 = 0; //@line 34247
 } else {
  $$0 = $AsyncRetVal; //@line 34249
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 34251
 _mbedtls_cipher_free(22564); //@line 34252
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 34255
  $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 34256
  HEAP32[$19 >> 2] = $$0; //@line 34257
  sp = STACKTOP; //@line 34258
  return;
 }
 ___async_unwind = 0; //@line 34261
 HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 34262
 $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 34263
 HEAP32[$19 >> 2] = $$0; //@line 34264
 sp = STACKTOP; //@line 34265
 return;
}
function _get_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$028 = 0, $$02930 = 0, $$031 = 0, $13 = 0, $23 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (($0 | 0) == 0 | ($2 | 0) == 0) {
  $$028 = -24832; //@line 1974
  return $$028 | 0; //@line 1975
 }
 $7 = HEAP8[$0 + ($1 + -1) >> 0] | 0; //@line 1979
 $8 = $7 & 255; //@line 1980
 $9 = $1 - $8 | 0; //@line 1981
 HEAP32[$2 >> 2] = $9; //@line 1982
 $13 = ($7 << 24 >> 24 == 0 | $8 >>> 0 > $1 >>> 0) & 1; //@line 1986
 if (!$1) {
  $$0$lcssa = $13; //@line 1989
 } else {
  $$02930 = 0; //@line 1991
  $$031 = $13; //@line 1991
  while (1) {
   $23 = (($$02930 >>> 0 >= $9 >>> 0 ? (HEAP8[$0 + $$02930 >> 0] ^ $7) & 255 : 0) | $$031 & 255) & 255; //@line 2001
   $$02930 = $$02930 + 1 | 0; //@line 2002
   if (($$02930 | 0) == ($1 | 0)) {
    $$0$lcssa = $23; //@line 2005
    break;
   } else {
    $$031 = $23; //@line 2008
   }
  }
 }
 $$028 = $$0$lcssa << 24 >> 24 ? -25088 : 0; //@line 2014
 return $$028 | 0; //@line 2015
}
function __ZN16LoRaWANInterface4sendEhPKhti__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 33783
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33789
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33793
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33795
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 33797
 $16 = HEAP16[$0 + 30 >> 1] | 0; //@line 33799
 _printf(11836, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 33800
 _printf(11849, $6) | 0; //@line 33801
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 33802
 _putchar(10) | 0; //@line 33803
 if (!___async) {
  ___async_unwind = 0; //@line 33806
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 187; //@line 33808
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $10; //@line 33810
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $12; //@line 33812
 HEAP8[$ReallocAsyncCtx2 + 12 >> 0] = $14; //@line 33814
 HEAP16[$ReallocAsyncCtx2 + 14 >> 1] = $16; //@line 33816
 sp = STACKTOP; //@line 33817
 return;
}
function __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10284
 STACKTOP = STACKTOP + 16 | 0; //@line 10285
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10285
 if ((HEAP32[$0 + 1876 >> 2] | 0) >>> 0 >= 3) {
  $$0 = __ZN7LoRaMac16get_channel_planER16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 10294
  STACKTOP = sp; //@line 10295
  return $$0 | 0; //@line 10295
 }
 _printf(11887, sp) | 0; //@line 10297
 _printf(12707, sp + 8 | 0) | 0; //@line 10298
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10299
 _putchar(10) | 0; //@line 10300
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 327; //@line 10303
  sp = STACKTOP; //@line 10304
  STACKTOP = sp; //@line 10305
  return 0; //@line 10305
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10307
 $$0 = -1e3; //@line 10308
 STACKTOP = sp; //@line 10309
 return $$0 | 0; //@line 10309
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_426($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx20 = 0, sp = 0;
 sp = STACKTOP; //@line 30687
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30689
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30691
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30693
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30695
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30697
 HEAP32[$2 >> 2] = 1; //@line 30698
 HEAP8[$2 + 4 >> 0] = 0; //@line 30700
 $ReallocAsyncCtx20 = _emscripten_realloc_async_context(16) | 0; //@line 30701
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($4, $2) | 0; //@line 30702
 if (!___async) {
  ___async_unwind = 0; //@line 30705
 }
 HEAP32[$ReallocAsyncCtx20 >> 2] = 241; //@line 30707
 HEAP32[$ReallocAsyncCtx20 + 4 >> 2] = $6; //@line 30709
 HEAP32[$ReallocAsyncCtx20 + 8 >> 2] = $8; //@line 30711
 HEAP32[$ReallocAsyncCtx20 + 12 >> 2] = $10; //@line 30713
 sp = STACKTOP; //@line 30714
 return;
}
function __ZN16SX1276_LoRaRadio7standbyEv__async_cb_146($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 31547
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31549
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31551
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31553
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31555
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31557
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 31558
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 31559
 if (!___async) {
  ___async_unwind = 0; //@line 31562
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 58; //@line 31564
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $4; //@line 31566
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $6; //@line 31568
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $8; //@line 31570
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $10; //@line 31572
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $2; //@line 31574
 sp = STACKTOP; //@line 31575
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_427($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx21 = 0, sp = 0;
 sp = STACKTOP; //@line 30720
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30722
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30724
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30726
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30728
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30730
 $ReallocAsyncCtx21 = _emscripten_realloc_async_context(24) | 0; //@line 30731
 __ZN7LoRaMac10disconnectEv($4); //@line 30732
 if (!___async) {
  ___async_unwind = 0; //@line 30735
 }
 HEAP32[$ReallocAsyncCtx21 >> 2] = 240; //@line 30737
 HEAP32[$ReallocAsyncCtx21 + 4 >> 2] = $2; //@line 30739
 HEAP32[$ReallocAsyncCtx21 + 8 >> 2] = $4; //@line 30741
 HEAP32[$ReallocAsyncCtx21 + 12 >> 2] = $6; //@line 30743
 HEAP32[$ReallocAsyncCtx21 + 16 >> 2] = $8; //@line 30745
 HEAP32[$ReallocAsyncCtx21 + 20 >> 2] = $10; //@line 30747
 sp = STACKTOP; //@line 30748
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb_353($0) {
 $0 = $0 | 0;
 var $$pre$i$i59 = 0, $10 = 0, $11 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23590
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23596
 $$pre$i$i59 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23597
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i59; //@line 23599
 if (!$$pre$i$i59) {
  return;
 }
 $10 = HEAP32[$$pre$i$i59 + 8 >> 2] | 0; //@line 23605
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 23606
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 23607
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 194; //@line 23610
  $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 23611
  HEAP32[$11 >> 2] = $6; //@line 23612
  sp = STACKTOP; //@line 23613
  return;
 }
 ___async_unwind = 0; //@line 23616
 HEAP32[$ReallocAsyncCtx4 >> 2] = 194; //@line 23617
 $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 23618
 HEAP32[$11 >> 2] = $6; //@line 23619
 sp = STACKTOP; //@line 23620
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16195
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 16197
 $8 = $7 >> 8; //@line 16198
 if (!($7 & 1)) {
  $$0 = $8; //@line 16202
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 16207
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 16209
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 16212
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16217
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 16218
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 809; //@line 16221
  sp = STACKTOP; //@line 16222
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16225
  return;
 }
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26054
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26056
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26058
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 26060
 $7 = HEAP32[$2 >> 2] | 0; //@line 26061
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] | 0; //@line 26064
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 26065
 FUNCTION_TABLE_viii[$10 & 7]($7, $4, $6); //@line 26066
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 657; //@line 26069
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 26070
  HEAP32[$11 >> 2] = $2; //@line 26071
  sp = STACKTOP; //@line 26072
  return;
 }
 ___async_unwind = 0; //@line 26075
 HEAP32[$ReallocAsyncCtx2 >> 2] = 657; //@line 26076
 $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 26077
 HEAP32[$11 >> 2] = $2; //@line 26078
 sp = STACKTOP; //@line 26079
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15365
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 15371
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 15374
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 15377
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15378
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 15379
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 796; //@line 15382
    sp = STACKTOP; //@line 15383
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15386
    break;
   }
  }
 } while (0);
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$unpack$i = 0, $$unpack5$i = 0, $15 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13832
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 13835
 $$unpack5$i = HEAP32[$0 + 4 >> 2] | 0; //@line 13837
 $8 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack5$i >> 1) | 0; //@line 13839
 if (!($$unpack5$i & 1)) {
  $15 = $$unpack$i; //@line 13844
 } else {
  $15 = HEAP32[(HEAP32[$8 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 13849
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13851
 FUNCTION_TABLE_viiiii[$15 & 7]($8, $1, $2, $3, $4); //@line 13852
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 421; //@line 13855
  sp = STACKTOP; //@line 13856
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13859
  return;
 }
}
function ___dynamic_cast__async_cb_66($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23508
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23510
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23512
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23518
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 23533
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 23549
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 23554
    break;
   }
  default:
   {
    $$0 = 0; //@line 23558
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 23563
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16237
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 16239
 $7 = $6 >> 8; //@line 16240
 if (!($6 & 1)) {
  $$0 = $7; //@line 16244
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 16249
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 16251
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 16254
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16259
 FUNCTION_TABLE_viiiii[$16 & 7]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 16260
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 810; //@line 16263
  sp = STACKTOP; //@line 16264
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16267
  return;
 }
}
function _ticker_remove_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5312
 $4 = (HEAP32[$0 + 4 >> 2] | 0) + 4 | 0; //@line 5315
 $5 = HEAP32[$4 >> 2] | 0; //@line 5316
 if (($5 | 0) == ($1 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 5321
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5322
  _schedule_interrupt($0); //@line 5323
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 711; //@line 5326
   sp = STACKTOP; //@line 5327
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5330
  return;
 } else {
  $$0 = $5; //@line 5333
 }
 do {
  if (!$$0) {
   label = 8; //@line 5338
   break;
  }
  $10 = $$0 + 12 | 0; //@line 5341
  $$0 = HEAP32[$10 >> 2] | 0; //@line 5342
 } while (($$0 | 0) != ($1 | 0));
 if ((label | 0) == 8) {
  return;
 }
 HEAP32[$10 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 5355
 return;
}
function __ZN16SX1276_LoRaRadio11set_channelEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 1319
 STACKTOP = STACKTOP + 16 | 0; //@line 1320
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1320
 $vararg_buffer1 = sp + 8 | 0; //@line 1321
 _printf(10904, sp) | 0; //@line 1323
 HEAP32[$vararg_buffer1 >> 2] = $1; //@line 1324
 _printf(11242, $vararg_buffer1) | 0; //@line 1325
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1326
 _putchar(10) | 0; //@line 1327
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 83; //@line 1330
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1332
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 1334
  sp = STACKTOP; //@line 1335
  STACKTOP = sp; //@line 1336
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1338
  HEAP32[$0 + 692 >> 2] = $1; //@line 1340
  STACKTOP = sp; //@line 1341
  return;
 }
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_507($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 37112
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37116
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 37117
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0; //@line 37120
 $10 = HEAP8[$4 + 776 >> 0] | 0; //@line 37122
 $12 = HEAP8[$4 + 744 >> 0] | 0; //@line 37124
 $14 = HEAP32[$4 + 740 >> 2] | 0; //@line 37126
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 37128
 FUNCTION_TABLE_viiiii[$8 & 7]($5, $10, $12, $14, $4 + 824 | 0); //@line 37129
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 611; //@line 37132
  sp = STACKTOP; //@line 37133
  return;
 }
 ___async_unwind = 0; //@line 37136
 HEAP32[$ReallocAsyncCtx2 >> 2] = 611; //@line 37137
 sp = STACKTOP; //@line 37138
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_184($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 33962
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33964
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33966
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33968
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33970
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33972
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 33973
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 33974
 if (!___async) {
  ___async_unwind = 0; //@line 33977
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 110; //@line 33979
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $4; //@line 33981
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $6; //@line 33983
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $8; //@line 33985
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $10; //@line 33987
 sp = STACKTOP; //@line 33988
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_508($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 37144
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37148
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 37149
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0; //@line 37152
 $10 = HEAP8[$4 + 776 >> 0] | 0; //@line 37154
 $12 = HEAP8[$4 + 744 >> 0] | 0; //@line 37156
 $14 = HEAP32[$4 + 740 >> 2] | 0; //@line 37158
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 37160
 FUNCTION_TABLE_viiiii[$8 & 7]($5, $10, $12, $14, $4 + 824 | 0); //@line 37161
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 608; //@line 37164
  sp = STACKTOP; //@line 37165
  return;
 }
 ___async_unwind = 0; //@line 37168
 HEAP32[$ReallocAsyncCtx >> 2] = 608; //@line 37169
 sp = STACKTOP; //@line 37170
 return;
}
function __ZN16SX1276_LoRaRadio18set_low_power_modeEv__async_cb($0) {
 $0 = $0 | 0;
 var $15 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31185
 if ((HEAP32[$2 + 652 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$2 + 484 >> 2] | 0, 0) | 0; //@line 31192
 }
 if ((HEAP32[$2 + 656 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$2 + 508 >> 2] | 0, 0) | 0; //@line 31200
 }
 if ((HEAP32[$2 + 672 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$2 + 604 >> 2] | 0, 0) | 0; //@line 31208
 }
 $15 = $2 + 660 | 0; //@line 31210
 if ((HEAP32[$15 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$2 + 532 >> 2] | 0, 0) | 0; //@line 31216
  if ((HEAP32[$15 >> 2] | 0) != -1) {
   _emscripten_asm_const_iii(3, HEAP32[$2 + 556 >> 2] | 0, 0) | 0; //@line 31222
  }
 }
 if ((HEAP32[$2 + 668 >> 2] | 0) == -1) {
  return;
 }
 _emscripten_asm_const_iii(3, HEAP32[$2 + 580 >> 2] | 0, 0) | 0; //@line 31233
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16152
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 16154
 $6 = $5 >> 8; //@line 16155
 if (!($5 & 1)) {
  $$0 = $6; //@line 16159
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 16164
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 16166
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 16169
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16174
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 16175
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 808; //@line 16178
  sp = STACKTOP; //@line 16179
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16182
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb_81($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24929
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24933
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24935
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 24937
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 24939
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 24941
 $13 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 24943
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 24944
 FUNCTION_TABLE_viiiii[$13 & 7]($4, $6, $8, $10, $12); //@line 24945
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 420; //@line 24948
  sp = STACKTOP; //@line 24949
  return;
 }
 ___async_unwind = 0; //@line 24952
 HEAP32[$ReallocAsyncCtx >> 2] = 420; //@line 24953
 sp = STACKTOP; //@line 24954
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_5($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 16698
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 16703
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16705
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16707
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16708
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 16709
 __ZN7LoRaPHY15setup_rx_windowEbj($9, $4, $6); //@line 16710
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 382; //@line 16713
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 16714
  HEAP32[$10 >> 2] = $8; //@line 16715
  sp = STACKTOP; //@line 16716
  return;
 }
 ___async_unwind = 0; //@line 16719
 HEAP32[$ReallocAsyncCtx4 >> 2] = 382; //@line 16720
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 16721
 HEAP32[$10 >> 2] = $8; //@line 16722
 sp = STACKTOP; //@line 16723
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_221($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 36871
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36873
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36875
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36877
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36879
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36881
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(20) | 0; //@line 36882
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 36883
 if (!___async) {
  ___async_unwind = 0; //@line 36886
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 78; //@line 36888
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $4; //@line 36890
 HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $6; //@line 36892
 HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $8; //@line 36894
 HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $10; //@line 36896
 sp = STACKTOP; //@line 36897
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_219($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 36833
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36835
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36837
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36839
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36841
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36843
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 36844
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 36845
 if (!___async) {
  ___async_unwind = 0; //@line 36848
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 81; //@line 36850
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $4; //@line 36852
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $6; //@line 36854
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $8; //@line 36856
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $10; //@line 36858
 sp = STACKTOP; //@line 36859
 return;
}
function __ZN16SX1276_LoRaRadio4sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 774
 switch (HEAP8[$0 + 689 >> 0] | 0) {
 case 0:
  {
   _emscripten_asm_const_iiiiiii(0, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 696 >> 0] | 0, HEAP32[$0 + 704 >> 2] | 0, HEAP32[$0 + 712 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 789
   break;
  }
 case 1:
  {
   _emscripten_asm_const_iiiiiii(1, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 748 >> 0] | 0, HEAP32[$0 + 752 >> 2] | 0, HEAP32[$0 + 756 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 803
   break;
  }
 default:
  {}
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 809
 __ZN16SX1276_LoRaRadio8transmitEj($0, 0); //@line 810
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 67; //@line 813
  sp = STACKTOP; //@line 814
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 817
  return;
 }
}
function __ZN7LoRaPHY14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $25 = 0, $4 = 0, $5 = 0;
 $4 = $1 & 255; //@line 25430
 $5 = $4 >>> 4; //@line 25431
 $10 = 1 << ($4 & 15); //@line 25436
 if ($10 & (HEAPU16[(HEAP32[$0 + 124 >> 2] | 0) + ($5 << 1) >> 1] | 0) | 0) {
  $$0 = 0; //@line 25440
  return $$0 | 0; //@line 25441
 }
 $15 = (HEAP32[$0 + 112 >> 2] | 0) + ($4 * 12 | 0) | 0; //@line 25445
 HEAP32[$15 >> 2] = 0; //@line 25446
 HEAP32[$15 + 4 >> 2] = 0; //@line 25446
 HEAP32[$15 + 8 >> 2] = 0; //@line 25446
 if (!((HEAPU8[$0 + 20 >> 0] | 0) > ($1 & 255) ? (($1 & 255) >>> 4 & 255) <= (HEAPU8[$0 + 128 >> 0] | 0) : 0)) {
  $$0 = 0; //@line 25456
  return $$0 | 0; //@line 25457
 }
 $25 = (HEAP32[$0 + 120 >> 2] | 0) + ($5 << 1) | 0; //@line 25462
 HEAP16[$25 >> 1] = ($10 ^ 65535) & (HEAPU16[$25 >> 1] | 0); //@line 25467
 $$0 = 1; //@line 25468
 return $$0 | 0; //@line 25469
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_355($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23663
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23667
 $4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23668
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 23671
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 23672
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 23673
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 654; //@line 23676
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 23677
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 23678
  sp = STACKTOP; //@line 23679
  return;
 }
 ___async_unwind = 0; //@line 23682
 HEAP32[$ReallocAsyncCtx3 >> 2] = 654; //@line 23683
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 23684
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 23685
 sp = STACKTOP; //@line 23686
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13314
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13316
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 13319
 $5 = HEAP32[$2 >> 2] | 0; //@line 13320
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] | 0; //@line 13323
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 13324
 FUNCTION_TABLE_vii[$8 & 31]($5, $4); //@line 13325
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 646; //@line 13328
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 13329
  HEAP32[$9 >> 2] = $2; //@line 13330
  sp = STACKTOP; //@line 13331
  return;
 }
 ___async_unwind = 0; //@line 13334
 HEAP32[$ReallocAsyncCtx2 >> 2] = 646; //@line 13335
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 13336
 HEAP32[$9 >> 2] = $2; //@line 13337
 sp = STACKTOP; //@line 13338
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23634
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23636
 $3 = HEAP32[$2 >> 2] | 0; //@line 23637
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0; //@line 23640
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 23641
 $7 = FUNCTION_TABLE_ii[$6 & 15]($3) | 0; //@line 23642
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 653; //@line 23645
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 23646
  HEAP32[$8 >> 2] = $2; //@line 23647
  sp = STACKTOP; //@line 23648
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 23652
 ___async_unwind = 0; //@line 23653
 HEAP32[$ReallocAsyncCtx2 >> 2] = 653; //@line 23654
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 23655
 HEAP32[$8 >> 2] = $2; //@line 23656
 sp = STACKTOP; //@line 23657
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_9($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16945
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16947
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16951
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16953
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 16955
 __ZN4mbed6Ticker5setupEy($6, 1e5, 0); //@line 16956
 $9 = HEAP32[$2 >> 2] | 0; //@line 16957
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 16963
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 16964
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 16965
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 145; //@line 16968
  sp = STACKTOP; //@line 16969
  return;
 }
 ___async_unwind = 0; //@line 16972
 HEAP32[$ReallocAsyncCtx3 >> 2] = 145; //@line 16973
 sp = STACKTOP; //@line 16974
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_213($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 36144
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36146
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36150
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36152
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 36154
 __ZN4mbed6Ticker5setupEy($6, 2e5, 0); //@line 36155
 $9 = HEAP32[$2 >> 2] | 0; //@line 36156
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 36162
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 36163
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 36164
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 72; //@line 36167
  sp = STACKTOP; //@line 36168
  return;
 }
 ___async_unwind = 0; //@line 36171
 HEAP32[$ReallocAsyncCtx3 >> 2] = 72; //@line 36172
 sp = STACKTOP; //@line 36173
 return;
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 12914
 STACKTOP = STACKTOP + 256 | 0; //@line 12915
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 12915
 $5 = sp; //@line 12916
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 12922
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 12926
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 12929
   $$011 = $9; //@line 12930
   do {
    _out_670($0, $5, 256); //@line 12932
    $$011 = $$011 + -256 | 0; //@line 12933
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 12942
  } else {
   $$0$lcssa = $9; //@line 12944
  }
  _out_670($0, $5, $$0$lcssa); //@line 12946
 }
 STACKTOP = sp; //@line 12948
 return;
}
function __ZN16SX1276_LoRaRadio7standbyEv__async_cb_148($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 31644
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31650
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31654
 _printf(10904, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 31655
 HEAP32[$6 >> 2] = 1; //@line 31656
 _printf(10999, $6) | 0; //@line 31657
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 31658
 _putchar(10) | 0; //@line 31659
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 59; //@line 31662
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 31663
  HEAP32[$11 >> 2] = $10; //@line 31664
  sp = STACKTOP; //@line 31665
  return;
 }
 ___async_unwind = 0; //@line 31668
 HEAP32[$ReallocAsyncCtx >> 2] = 59; //@line 31669
 $11 = $ReallocAsyncCtx + 4 | 0; //@line 31670
 HEAP32[$11 >> 2] = $10; //@line 31671
 sp = STACKTOP; //@line 31672
 return;
}
function __ZN7LoRaMac16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 18518
 STACKTOP = STACKTOP + 16 | 0; //@line 18519
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18519
 $2 = sp; //@line 18520
 $4 = $2 + 4 | 0; //@line 18522
 HEAP32[$4 >> 2] = 0; //@line 18524
 HEAP32[$4 + 4 >> 2] = 0; //@line 18527
 HEAP32[$2 >> 2] = 9; //@line 18528
 $10 = __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0 + 348 | 0, $2, $0 + 360 | 0) | 0; //@line 18531
 if ($10 | 0) {
  $$0 = $10; //@line 18534
  STACKTOP = sp; //@line 18535
  return $$0 | 0; //@line 18535
 }
 $$0 = __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK25loramac_mib_req_confirm_t($0 + 352 | 0, $1, $2) | 0; //@line 18539
 STACKTOP = sp; //@line 18540
 return $$0 | 0; //@line 18540
}
function _mbedtls_ccm_setkey__async_cb_166($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 32768
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32770
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32772
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32774
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 32776
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 32780
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 32783
 $9 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 32784
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 670; //@line 32787
  sp = STACKTOP; //@line 32788
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 32792
 ___async_unwind = 0; //@line 32793
 HEAP32[$ReallocAsyncCtx >> 2] = 670; //@line 32794
 sp = STACKTOP; //@line 32795
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7236
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 7239
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 7241
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 7243
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 7248
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 7253
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7255
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 7256
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 236; //@line 7259
  sp = STACKTOP; //@line 7260
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7263
  return;
 }
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9026
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 9029
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 9031
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 9033
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 9038
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 9043
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9045
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 9046
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 297; //@line 9049
  sp = STACKTOP; //@line 9050
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9053
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_415($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx29 = 0, sp = 0;
 sp = STACKTOP; //@line 29755
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29759
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29761
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29763
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$6 >> 2] = 6; //@line 29766
  HEAP32[___async_retval >> 2] = $4; //@line 29768
  return;
 }
 $ReallocAsyncCtx29 = _emscripten_realloc_async_context(16) | 0; //@line 29771
 _mbed_assert_internal(12851, 11935, 1251); //@line 29772
 if (!___async) {
  ___async_unwind = 0; //@line 29775
 }
 HEAP32[$ReallocAsyncCtx29 >> 2] = 270; //@line 29777
 HEAP32[$ReallocAsyncCtx29 + 4 >> 2] = $4; //@line 29779
 HEAP32[$ReallocAsyncCtx29 + 8 >> 2] = $6; //@line 29781
 HEAP32[$ReallocAsyncCtx29 + 12 >> 2] = $8; //@line 29783
 sp = STACKTOP; //@line 29784
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_60($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23273
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23275
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23277
 $6 = HEAP32[$2 + 356 >> 2] | 0; //@line 23279
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 23281
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $2 + 996 | 0, 1e3); //@line 23282
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 554; //@line 23285
  $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 23286
  HEAP32[$8 >> 2] = $4; //@line 23287
  sp = STACKTOP; //@line 23288
  return;
 }
 ___async_unwind = 0; //@line 23291
 HEAP32[$ReallocAsyncCtx5 >> 2] = 554; //@line 23292
 $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 23293
 HEAP32[$8 >> 2] = $4; //@line 23294
 sp = STACKTOP; //@line 23295
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_59($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23245
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23247
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23249
 $6 = HEAP32[$2 + 356 >> 2] | 0; //@line 23251
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 23253
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $2 + 996 | 0, 1e3); //@line 23254
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 556; //@line 23257
  $8 = $ReallocAsyncCtx4 + 4 | 0; //@line 23258
  HEAP32[$8 >> 2] = $4; //@line 23259
  sp = STACKTOP; //@line 23260
  return;
 }
 ___async_unwind = 0; //@line 23263
 HEAP32[$ReallocAsyncCtx4 >> 2] = 556; //@line 23264
 $8 = $ReallocAsyncCtx4 + 4 | 0; //@line 23265
 HEAP32[$8 >> 2] = $4; //@line 23266
 sp = STACKTOP; //@line 23267
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7285
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 7288
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 7290
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 7292
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 7297
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 7302
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7304
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 7305
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 237; //@line 7308
  sp = STACKTOP; //@line 7309
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7312
  return;
 }
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9692
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 9695
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 9697
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 9699
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 9704
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 9709
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9711
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 9712
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 308; //@line 9715
  sp = STACKTOP; //@line 9716
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9719
  return;
 }
}
function __ZN4mbed11InterruptInD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25740
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25742
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 25744
 if (!$4) {
  __ZdlPv($2); //@line 25747
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 25752
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 25753
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 25754
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 155; //@line 25757
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 25758
  HEAP32[$9 >> 2] = $2; //@line 25759
  sp = STACKTOP; //@line 25760
  return;
 }
 ___async_unwind = 0; //@line 25763
 HEAP32[$ReallocAsyncCtx2 >> 2] = 155; //@line 25764
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 25765
 HEAP32[$9 >> 2] = $2; //@line 25766
 sp = STACKTOP; //@line 25767
 return;
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10323
 STACKTOP = STACKTOP + 32 | 0; //@line 10324
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10324
 $vararg_buffer = sp; //@line 10325
 $3 = sp + 20 | 0; //@line 10326
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 10330
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 10332
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 10334
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 10336
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 10338
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 10343
  $10 = -1; //@line 10344
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 10347
 }
 STACKTOP = sp; //@line 10349
 return $10 | 0; //@line 10349
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 5569
 STACKTOP = STACKTOP + 16 | 0; //@line 5570
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5570
 $vararg_buffer = sp; //@line 5571
 HEAP32[$vararg_buffer >> 2] = $0; //@line 5572
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 5574
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 5576
 _mbed_error_printf(14601, $vararg_buffer); //@line 5577
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5578
 _mbed_die(); //@line 5579
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 714; //@line 5582
  sp = STACKTOP; //@line 5583
  STACKTOP = sp; //@line 5584
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5586
  STACKTOP = sp; //@line 5587
  return;
 }
}
function __ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb_348($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23185
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23191
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 23196
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23198
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 776 >> 0] = HEAP8[$0 + 8 >> 0] | 0; //@line 23202
 _printf(10904, $6) | 0; //@line 23203
 HEAP32[$12 >> 2] = $10 & 1; //@line 23205
 _printf(11136, $12) | 0; //@line 23206
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 23207
 _putchar(10) | 0; //@line 23208
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 88; //@line 23211
  sp = STACKTOP; //@line 23212
  return;
 }
 ___async_unwind = 0; //@line 23215
 HEAP32[$ReallocAsyncCtx >> 2] = 88; //@line 23216
 sp = STACKTOP; //@line 23217
 return;
}
function _schedule_interrupt__async_cb_252($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 11799
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11801
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11803
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11805
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 11808
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 11809
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 11810
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 11814
  ___async_unwind = 0; //@line 11815
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 708; //@line 11817
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 11819
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 11821
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 11823
 sp = STACKTOP; //@line 11824
 return;
}
function __ZN7LoRaPHY16verify_frequencyEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01113 = 0, $16 = 0, $3 = 0, $5 = 0, $7 = 0, label = 0;
 $3 = HEAP32[$0 + 72 >> 2] | 0; //@line 25612
 $5 = HEAP8[$0 + 76 >> 0] | 0; //@line 25614
 if (!($5 << 24 >> 24)) {
  $16 = 0; //@line 25617
  return $16 | 0; //@line 25618
 } else {
  $$01113 = 0; //@line 25620
 }
 while (1) {
  $7 = $$01113 & 255; //@line 25623
  if ((HEAP32[$3 + ($7 * 24 | 0) + 20 >> 2] | 0) >>> 0 >= $1 >>> 0) {
   if ((HEAP32[$3 + ($7 * 24 | 0) + 16 >> 2] | 0) >>> 0 <= $1 >>> 0) {
    $16 = 1; //@line 25632
    label = 5; //@line 25633
    break;
   }
  }
  $$01113 = $$01113 + 1 << 24 >> 24; //@line 25637
  if (($$01113 & 255) >= ($5 & 255)) {
   $16 = 0; //@line 25642
   label = 5; //@line 25643
   break;
  }
 }
 if ((label | 0) == 5) {
  return $16 | 0; //@line 25648
 }
 return 0; //@line 25650
}
function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14333
 STACKTOP = STACKTOP + 16 | 0; //@line 14334
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14334
 $1 = sp; //@line 14335
 HEAP32[$1 >> 2] = $varargs; //@line 14336
 $2 = HEAP32[2570] | 0; //@line 14337
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14338
 $3 = _vfprintf($2, $0, $1) | 0; //@line 14339
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 780; //@line 14342
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 14344
  sp = STACKTOP; //@line 14345
  STACKTOP = sp; //@line 14346
  return 0; //@line 14346
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14348
  STACKTOP = sp; //@line 14349
  return $3 | 0; //@line 14349
 }
 return 0; //@line 14351
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 34366
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34368
 $3 = HEAP32[$2 >> 2] | 0; //@line 34369
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0; //@line 34372
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 34373
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 34374
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 643; //@line 34377
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 34378
  HEAP32[$7 >> 2] = $2; //@line 34379
  sp = STACKTOP; //@line 34380
  return;
 }
 ___async_unwind = 0; //@line 34383
 HEAP32[$ReallocAsyncCtx2 >> 2] = 643; //@line 34384
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 34385
 HEAP32[$7 >> 2] = $2; //@line 34386
 sp = STACKTOP; //@line 34387
 return;
}
function __ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb_304($0) {
 $0 = $0 | 0;
 var $10 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14521
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 14527
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14529
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14531
 _printf(10904, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 14534
 HEAP32[$8 >> 2] = $10; //@line 14536
 HEAP32[$8 + 4 >> 2] = $6 & 255; //@line 14538
 _printf(11158, $8) | 0; //@line 14539
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 14540
 _putchar(10) | 0; //@line 14541
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 86; //@line 14544
  sp = STACKTOP; //@line 14545
  return;
 }
 ___async_unwind = 0; //@line 14548
 HEAP32[$ReallocAsyncCtx >> 2] = 86; //@line 14549
 sp = STACKTOP; //@line 14550
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_407($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx33 = 0, sp = 0;
 sp = STACKTOP; //@line 29468
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29472
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[___async_retval >> 2] = -1011; //@line 29476
  return;
 }
 $ReallocAsyncCtx33 = _emscripten_realloc_async_context(8) | 0; //@line 29479
 _mbed_assert_internal(12851, 11935, 1141); //@line 29480
 if (___async) {
  HEAP32[$ReallocAsyncCtx33 >> 2] = 245; //@line 29483
  $6 = $ReallocAsyncCtx33 + 4 | 0; //@line 29484
  HEAP32[$6 >> 2] = $4; //@line 29485
  sp = STACKTOP; //@line 29486
  return;
 }
 ___async_unwind = 0; //@line 29489
 HEAP32[$ReallocAsyncCtx33 >> 2] = 245; //@line 29490
 $6 = $ReallocAsyncCtx33 + 4 | 0; //@line 29491
 HEAP32[$6 >> 2] = $4; //@line 29492
 sp = STACKTOP; //@line 29493
 return;
}
function _initialize__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10674
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10676
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10678
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10680
 $9 = HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] | 0; //@line 10683
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 10684
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 10685
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 10689
  ___async_unwind = 0; //@line 10690
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 698; //@line 10692
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 10694
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 10696
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 10698
 sp = STACKTOP; //@line 10699
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31367
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31369
 $3 = HEAP32[$2 >> 2] | 0; //@line 31370
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0; //@line 31373
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 31374
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 31375
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 640; //@line 31378
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 31379
  HEAP32[$7 >> 2] = $2; //@line 31380
  sp = STACKTOP; //@line 31381
  return;
 }
 ___async_unwind = 0; //@line 31384
 HEAP32[$ReallocAsyncCtx2 >> 2] = 640; //@line 31385
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 31386
 HEAP32[$7 >> 2] = $2; //@line 31387
 sp = STACKTOP; //@line 31388
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_411($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx31 = 0, sp = 0;
 sp = STACKTOP; //@line 29602
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29606
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 29610
  return;
 }
 $ReallocAsyncCtx31 = _emscripten_realloc_async_context(8) | 0; //@line 29613
 _mbed_assert_internal(12851, 11935, 1223); //@line 29614
 if (___async) {
  HEAP32[$ReallocAsyncCtx31 >> 2] = 259; //@line 29617
  $6 = $ReallocAsyncCtx31 + 4 | 0; //@line 29618
  HEAP32[$6 >> 2] = $4; //@line 29619
  sp = STACKTOP; //@line 29620
  return;
 }
 ___async_unwind = 0; //@line 29623
 HEAP32[$ReallocAsyncCtx31 >> 2] = 259; //@line 29624
 $6 = $ReallocAsyncCtx31 + 4 | 0; //@line 29625
 HEAP32[$6 >> 2] = $4; //@line 29626
 sp = STACKTOP; //@line 29627
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_409($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx32 = 0, sp = 0;
 sp = STACKTOP; //@line 29535
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29539
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 29543
  return;
 }
 $ReallocAsyncCtx32 = _emscripten_realloc_async_context(8) | 0; //@line 29546
 _mbed_assert_internal(12851, 11935, 1186); //@line 29547
 if (___async) {
  HEAP32[$ReallocAsyncCtx32 >> 2] = 250; //@line 29550
  $6 = $ReallocAsyncCtx32 + 4 | 0; //@line 29551
  HEAP32[$6 >> 2] = $4; //@line 29552
  sp = STACKTOP; //@line 29553
  return;
 }
 ___async_unwind = 0; //@line 29556
 HEAP32[$ReallocAsyncCtx32 >> 2] = 250; //@line 29557
 $6 = $ReallocAsyncCtx32 + 4 | 0; //@line 29558
 HEAP32[$6 >> 2] = $4; //@line 29559
 sp = STACKTOP; //@line 29560
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11706
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 11709
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 11711
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 11713
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 11718
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 11723
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11725
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 11726
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 377; //@line 11729
  sp = STACKTOP; //@line 11730
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11733
  return;
 }
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3074
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 3077
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 3079
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 3081
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 3086
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 3091
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3093
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 3094
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 137; //@line 3097
  sp = STACKTOP; //@line 3098
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3101
  return;
 }
}
function _mbedtls_ccm_setkey__async_cb_167($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32801
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32803
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32805
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32807
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32809
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 32810
 $9 = _mbedtls_cipher_setup($2, $4) | 0; //@line 32811
 if (!___async) {
  HEAP32[___async_retval >> 2] = $9; //@line 32815
  ___async_unwind = 0; //@line 32816
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 669; //@line 32818
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 32820
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 32822
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 32824
 sp = STACKTOP; //@line 32825
 return;
}
function _mbedtls_cipher_info_from_values($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010 = 0, $$011 = 0, $3 = 0, $6 = 0, label = 0;
 $3 = HEAP32[2374] | 0; //@line 1577
 if (!$3) {
  $$010 = 0; //@line 1580
  return $$010 | 0; //@line 1581
 } else {
  $$011 = 9492; //@line 1583
  $6 = $3; //@line 1583
 }
 while (1) {
  if ((HEAP32[HEAP32[$6 + 28 >> 2] >> 2] | 0) == ($0 | 0)) {
   if ((HEAP32[$6 + 8 >> 2] | 0) == ($1 | 0)) {
    if ((HEAP32[$6 + 4 >> 2] | 0) == ($2 | 0)) {
     $$010 = $6; //@line 1599
     label = 6; //@line 1600
     break;
    }
   }
  }
  $6 = HEAP32[$$011 + 12 >> 2] | 0; //@line 1607
  if (!$6) {
   $$010 = 0; //@line 1610
   label = 6; //@line 1611
   break;
  } else {
   $$011 = $$011 + 8 | 0; //@line 1614
  }
 }
 if ((label | 0) == 6) {
  return $$010 | 0; //@line 1618
 }
 return 0; //@line 1620
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_321($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20334
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20338
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20340
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20342
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20344
 $11 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 20346
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 20347
 FUNCTION_TABLE_vii[$11 & 31]($4, $6); //@line 20348
 if (!___async) {
  ___async_unwind = 0; //@line 20351
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 477; //@line 20353
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $8; //@line 20355
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $10; //@line 20357
 sp = STACKTOP; //@line 20358
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_382($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26460
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26462
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26464
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26466
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0; //@line 26469
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 26470
 FUNCTION_TABLE_vi[$9 & 1023]($2); //@line 26471
 if (!___async) {
  ___async_unwind = 0; //@line 26474
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 26476
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 26478
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 26480
 HEAP8[$ReallocAsyncCtx2 + 12 >> 0] = 0; //@line 26483
 sp = STACKTOP; //@line 26484
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb($0) {
 $0 = $0 | 0;
 var $$054$ = 0, $13 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26626
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26628
 $$054$ = (HEAP32[___async_retval >> 2] | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : -1014; //@line 26634
 $13 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 26635
 HEAP8[(HEAPU16[$6 >> 1] | 0) + ($8 + 381) >> 0] = $13; //@line 26640
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 1 + ($8 + 381) >> 0] = $13 >>> 8; //@line 26647
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 2 + ($8 + 381) >> 0] = $13 >>> 16; //@line 26654
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 3 + ($8 + 381) >> 0] = $13 >>> 24; //@line 26661
 HEAP16[$6 >> 1] = (HEAPU16[$6 >> 1] | 0) + 4; //@line 26666
 HEAP32[___async_retval >> 2] = $$054$; //@line 26668
 return;
}
function _sprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14255
 STACKTOP = STACKTOP + 16 | 0; //@line 14256
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14256
 $2 = sp; //@line 14257
 HEAP32[$2 >> 2] = $varargs; //@line 14258
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14259
 $3 = _vsprintf($0, $1, $2) | 0; //@line 14260
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 778; //@line 14263
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 14265
  sp = STACKTOP; //@line 14266
  STACKTOP = sp; //@line 14267
  return 0; //@line 14267
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14269
  STACKTOP = sp; //@line 14270
  return $3 | 0; //@line 14270
 }
 return 0; //@line 14272
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 36548
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36550
 $4 = HEAP32[$2 + 356 >> 2] | 0; //@line 36552
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 36554
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1076 | 0); //@line 36555
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 428; //@line 36558
  $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 36559
  HEAP32[$6 >> 2] = $2; //@line 36560
  sp = STACKTOP; //@line 36561
  return;
 }
 ___async_unwind = 0; //@line 36564
 HEAP32[$ReallocAsyncCtx2 >> 2] = 428; //@line 36565
 $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 36566
 HEAP32[$6 >> 2] = $2; //@line 36567
 sp = STACKTOP; //@line 36568
 return;
}
function __ZN7LoRaMacD2Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10816
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10818
 __ZN12radio_eventsD2Ev($0 + 1212 | 0); //@line 10819
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 341; //@line 10822
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 10824
  sp = STACKTOP; //@line 10825
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10828
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10830
 __ZN14lorawan_timersD2Ev($0 + 980 | 0); //@line 10831
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 342; //@line 10834
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10836
  sp = STACKTOP; //@line 10837
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10840
  return;
 }
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 14918
 $5 = HEAP32[$4 >> 2] | 0; //@line 14919
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 14923
   HEAP32[$1 + 24 >> 2] = $3; //@line 14925
   HEAP32[$1 + 36 >> 2] = 1; //@line 14927
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 14931
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 14934
    HEAP32[$1 + 24 >> 2] = 2; //@line 14936
    HEAP8[$1 + 54 >> 0] = 1; //@line 14938
    break;
   }
   $10 = $1 + 24 | 0; //@line 14941
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 14945
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9767
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 9769
 $3 = __ZN7LoRaMac22get_phy_event_handlersEv($0 + 4 | 0) | 0; //@line 9770
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 310; //@line 9773
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 9775
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9777
  sp = STACKTOP; //@line 9778
  return 0; //@line 9779
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9781
  $6 = $0 + 1928 | 0; //@line 9782
  HEAP32[$6 >> 2] = $3; //@line 9783
  __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0 + 1336 | 0, $1); //@line 9785
  return HEAP32[$6 >> 2] | 0; //@line 9787
 }
 return 0; //@line 9789
}
function __ZN4mbed5Timer5startEv($0) {
 $0 = $0 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4193
 if (HEAP32[$0 >> 2] | 0) {
  return;
 }
 if (HEAP8[$0 + 28 >> 0] | 0) {}
 $7 = HEAP32[$0 + 24 >> 2] | 0; //@line 4205
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 4206
 $8 = _ticker_read_us($7) | 0; //@line 4207
 $9 = tempRet0; //@line 4208
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 170; //@line 4211
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4213
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 4215
  sp = STACKTOP; //@line 4216
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4219
 $13 = $0 + 8 | 0; //@line 4221
 HEAP32[$13 >> 2] = $8; //@line 4223
 HEAP32[$13 + 4 >> 2] = $9; //@line 4226
 HEAP32[$0 >> 2] = 1; //@line 4227
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_231($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9962
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9966
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 9967
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 9969
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1076 | 0); //@line 9970
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 542; //@line 9973
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 9974
  HEAP32[$7 >> 2] = $4; //@line 9975
  sp = STACKTOP; //@line 9976
  return;
 }
 ___async_unwind = 0; //@line 9979
 HEAP32[$ReallocAsyncCtx2 >> 2] = 542; //@line 9980
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 9981
 HEAP32[$7 >> 2] = $4; //@line 9982
 sp = STACKTOP; //@line 9983
 return;
}
function __ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$09 = 0, $$1 = 0, $11 = 0, $19 = 0, $6 = 0, $9 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17243
 $$ = HEAP8[___async_retval >> 0] & 1 ? 3 : 2; //@line 17247
 $9 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 112 >> 2] | 0; //@line 17249
 $11 = HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0; //@line 17251
 $$1 = (HEAP32[$9 + ($11 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 17256
 if ($$1 << 24 >> 24 != 3) {
  $$09 = $$1; //@line 17259
  $19 = ___async_retval; //@line 17260
  HEAP8[$19 >> 0] = $$09; //@line 17261
  return;
 }
 HEAP32[$9 + ($11 * 12 | 0) + 4 >> 2] = HEAP32[$6 >> 2]; //@line 17266
 $$09 = 3; //@line 17267
 $19 = ___async_retval; //@line 17268
 HEAP8[$19 >> 0] = $$09; //@line 17269
 return;
}
function _equeue_post($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4666
 $4 = _equeue_tick() | 0; //@line 4668
 HEAP32[$2 + -4 >> 2] = $1; //@line 4670
 $6 = $2 + -16 | 0; //@line 4671
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $4; //@line 4674
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4675
 $9 = _equeue_enqueue($0, $2 + -36 | 0, $4) | 0; //@line 4676
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 177; //@line 4679
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4681
  sp = STACKTOP; //@line 4682
  return 0; //@line 4683
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4685
  _equeue_sema_signal($0 + 48 | 0); //@line 4687
  return $9 | 0; //@line 4688
 }
 return 0; //@line 4690
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_65($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23456
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23460
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 23462
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 23464
 $9 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 23466
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 23467
 FUNCTION_TABLE_viii[$9 & 7]($4, $6, $8); //@line 23468
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 289; //@line 23471
  sp = STACKTOP; //@line 23472
  return;
 }
 ___async_unwind = 0; //@line 23475
 HEAP32[$ReallocAsyncCtx >> 2] = 289; //@line 23476
 sp = STACKTOP; //@line 23477
 return;
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 10430
 $3 = HEAP8[$1 >> 0] | 0; //@line 10431
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 10436
  $$lcssa8 = $2; //@line 10436
 } else {
  $$011 = $1; //@line 10438
  $$0710 = $0; //@line 10438
  do {
   $$0710 = $$0710 + 1 | 0; //@line 10440
   $$011 = $$011 + 1 | 0; //@line 10441
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 10442
   $9 = HEAP8[$$011 >> 0] | 0; //@line 10443
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 10448
  $$lcssa8 = $8; //@line 10448
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 10458
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 15468
 STACKTOP = STACKTOP + 16 | 0; //@line 15469
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15469
 $vararg_buffer = sp; //@line 15470
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 15471
 FUNCTION_TABLE_v[$0 & 15](); //@line 15472
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 798; //@line 15475
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 15477
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 15479
  sp = STACKTOP; //@line 15480
  STACKTOP = sp; //@line 15481
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15483
  _abort_message(18794, $vararg_buffer); //@line 15484
 }
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6122
 $2 = HEAP32[2570] | 0; //@line 6123
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6124
 _putc($1, $2) | 0; //@line 6125
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 734; //@line 6128
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 6130
  sp = STACKTOP; //@line 6131
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6134
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6135
 _fflush($2) | 0; //@line 6136
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 735; //@line 6139
  sp = STACKTOP; //@line 6140
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6143
  return;
 }
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10382
 STACKTOP = STACKTOP + 32 | 0; //@line 10383
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10383
 $vararg_buffer = sp; //@line 10384
 HEAP32[$0 + 36 >> 2] = 9; //@line 10387
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 10395
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 10397
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 10399
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 10404
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 10407
 STACKTOP = sp; //@line 10408
 return $14 | 0; //@line 10408
}
function _mbed_die__async_cb_140($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 31197
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31199
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 31201
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 31202
 _wait_ms(150); //@line 31203
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 717; //@line 31206
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 31207
  HEAP32[$4 >> 2] = $2; //@line 31208
  sp = STACKTOP; //@line 31209
  return;
 }
 ___async_unwind = 0; //@line 31212
 HEAP32[$ReallocAsyncCtx14 >> 2] = 717; //@line 31213
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 31214
 HEAP32[$4 >> 2] = $2; //@line 31215
 sp = STACKTOP; //@line 31216
 return;
}
function _mbed_die__async_cb_139($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 31172
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31174
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 31176
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 31177
 _wait_ms(150); //@line 31178
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 718; //@line 31181
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 31182
  HEAP32[$4 >> 2] = $2; //@line 31183
  sp = STACKTOP; //@line 31184
  return;
 }
 ___async_unwind = 0; //@line 31187
 HEAP32[$ReallocAsyncCtx13 >> 2] = 718; //@line 31188
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 31189
 HEAP32[$4 >> 2] = $2; //@line 31190
 sp = STACKTOP; //@line 31191
 return;
}
function _mbed_die__async_cb_138($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 31147
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31149
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 31151
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 31152
 _wait_ms(150); //@line 31153
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 719; //@line 31156
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 31157
  HEAP32[$4 >> 2] = $2; //@line 31158
  sp = STACKTOP; //@line 31159
  return;
 }
 ___async_unwind = 0; //@line 31162
 HEAP32[$ReallocAsyncCtx12 >> 2] = 719; //@line 31163
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 31164
 HEAP32[$4 >> 2] = $2; //@line 31165
 sp = STACKTOP; //@line 31166
 return;
}
function _mbed_die__async_cb_137($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 31122
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31124
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 31126
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 31127
 _wait_ms(150); //@line 31128
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 720; //@line 31131
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 31132
  HEAP32[$4 >> 2] = $2; //@line 31133
  sp = STACKTOP; //@line 31134
  return;
 }
 ___async_unwind = 0; //@line 31137
 HEAP32[$ReallocAsyncCtx11 >> 2] = 720; //@line 31138
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 31139
 HEAP32[$4 >> 2] = $2; //@line 31140
 sp = STACKTOP; //@line 31141
 return;
}
function _mbed_die__async_cb_136($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 31097
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31099
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 31101
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 31102
 _wait_ms(150); //@line 31103
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 721; //@line 31106
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 31107
  HEAP32[$4 >> 2] = $2; //@line 31108
  sp = STACKTOP; //@line 31109
  return;
 }
 ___async_unwind = 0; //@line 31112
 HEAP32[$ReallocAsyncCtx10 >> 2] = 721; //@line 31113
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 31114
 HEAP32[$4 >> 2] = $2; //@line 31115
 sp = STACKTOP; //@line 31116
 return;
}
function _mbed_die__async_cb_135($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 31072
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31074
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 31076
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 31077
 _wait_ms(150); //@line 31078
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 722; //@line 31081
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 31082
  HEAP32[$4 >> 2] = $2; //@line 31083
  sp = STACKTOP; //@line 31084
  return;
 }
 ___async_unwind = 0; //@line 31087
 HEAP32[$ReallocAsyncCtx9 >> 2] = 722; //@line 31088
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 31089
 HEAP32[$4 >> 2] = $2; //@line 31090
 sp = STACKTOP; //@line 31091
 return;
}
function _mbed_die__async_cb_134($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 31047
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31049
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 31051
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 31052
 _wait_ms(400); //@line 31053
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 723; //@line 31056
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 31057
  HEAP32[$4 >> 2] = $2; //@line 31058
  sp = STACKTOP; //@line 31059
  return;
 }
 ___async_unwind = 0; //@line 31062
 HEAP32[$ReallocAsyncCtx8 >> 2] = 723; //@line 31063
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 31064
 HEAP32[$4 >> 2] = $2; //@line 31065
 sp = STACKTOP; //@line 31066
 return;
}
function _mbed_die__async_cb_133($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 31022
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31024
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 31026
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 31027
 _wait_ms(400); //@line 31028
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 724; //@line 31031
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 31032
  HEAP32[$4 >> 2] = $2; //@line 31033
  sp = STACKTOP; //@line 31034
  return;
 }
 ___async_unwind = 0; //@line 31037
 HEAP32[$ReallocAsyncCtx7 >> 2] = 724; //@line 31038
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 31039
 HEAP32[$4 >> 2] = $2; //@line 31040
 sp = STACKTOP; //@line 31041
 return;
}
function _mbed_die__async_cb_132($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30997
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30999
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 31001
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 31002
 _wait_ms(400); //@line 31003
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 725; //@line 31006
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 31007
  HEAP32[$4 >> 2] = $2; //@line 31008
  sp = STACKTOP; //@line 31009
  return;
 }
 ___async_unwind = 0; //@line 31012
 HEAP32[$ReallocAsyncCtx6 >> 2] = 725; //@line 31013
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 31014
 HEAP32[$4 >> 2] = $2; //@line 31015
 sp = STACKTOP; //@line 31016
 return;
}
function _mbed_die__async_cb_131($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30972
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30974
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 30976
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 30977
 _wait_ms(400); //@line 30978
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 726; //@line 30981
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 30982
  HEAP32[$4 >> 2] = $2; //@line 30983
  sp = STACKTOP; //@line 30984
  return;
 }
 ___async_unwind = 0; //@line 30987
 HEAP32[$ReallocAsyncCtx5 >> 2] = 726; //@line 30988
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 30989
 HEAP32[$4 >> 2] = $2; //@line 30990
 sp = STACKTOP; //@line 30991
 return;
}
function _mbed_die__async_cb_130($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30947
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30949
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 30951
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 30952
 _wait_ms(400); //@line 30953
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 727; //@line 30956
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 30957
  HEAP32[$4 >> 2] = $2; //@line 30958
  sp = STACKTOP; //@line 30959
  return;
 }
 ___async_unwind = 0; //@line 30962
 HEAP32[$ReallocAsyncCtx4 >> 2] = 727; //@line 30963
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 30964
 HEAP32[$4 >> 2] = $2; //@line 30965
 sp = STACKTOP; //@line 30966
 return;
}
function _mbed_die__async_cb_129($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30922
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30924
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 30926
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 30927
 _wait_ms(400); //@line 30928
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 728; //@line 30931
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 30932
  HEAP32[$4 >> 2] = $2; //@line 30933
  sp = STACKTOP; //@line 30934
  return;
 }
 ___async_unwind = 0; //@line 30937
 HEAP32[$ReallocAsyncCtx3 >> 2] = 728; //@line 30938
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 30939
 HEAP32[$4 >> 2] = $2; //@line 30940
 sp = STACKTOP; //@line 30941
 return;
}
function _mbed_die__async_cb_128($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30897
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30899
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 30901
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 30902
 _wait_ms(400); //@line 30903
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 729; //@line 30906
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 30907
  HEAP32[$4 >> 2] = $2; //@line 30908
  sp = STACKTOP; //@line 30909
  return;
 }
 ___async_unwind = 0; //@line 30912
 HEAP32[$ReallocAsyncCtx2 >> 2] = 729; //@line 30913
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 30914
 HEAP32[$4 >> 2] = $2; //@line 30915
 sp = STACKTOP; //@line 30916
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_230($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9938
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9940
 $3 = HEAP32[$2 >> 2] | 0; //@line 9941
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 9942
 __ZN7LoRaPHY18put_radio_to_sleepEv($3); //@line 9943
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 543; //@line 9946
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 9947
  HEAP32[$4 >> 2] = $2; //@line 9948
  sp = STACKTOP; //@line 9949
  return;
 }
 ___async_unwind = 0; //@line 9952
 HEAP32[$ReallocAsyncCtx >> 2] = 543; //@line 9953
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 9954
 HEAP32[$4 >> 2] = $2; //@line 9955
 sp = STACKTOP; //@line 9956
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_301($0) {
 $0 = $0 | 0;
 var $10 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 14241
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14247
 if (!(HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 11 >> 0] | 0)) {
  return;
 }
 $10 = HEAP8[HEAP32[$0 + 8 >> 2] >> 0] | 0; //@line 14254
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 14255
 __ZN12LoRaWANStack9handle_txEhPKhth($6, $10, 0, 0, 2) | 0; //@line 14256
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 221; //@line 14259
  sp = STACKTOP; //@line 14260
  return;
 }
 ___async_unwind = 0; //@line 14263
 HEAP32[$ReallocAsyncCtx7 >> 2] = 221; //@line 14264
 sp = STACKTOP; //@line 14265
 return;
}
function _mbed_die__async_cb_127($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30872
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30874
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 30876
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 30877
 _wait_ms(400); //@line 30878
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 730; //@line 30881
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 30882
  HEAP32[$4 >> 2] = $2; //@line 30883
  sp = STACKTOP; //@line 30884
  return;
 }
 ___async_unwind = 0; //@line 30887
 HEAP32[$ReallocAsyncCtx >> 2] = 730; //@line 30888
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 30889
 HEAP32[$4 >> 2] = $2; //@line 30890
 sp = STACKTOP; //@line 30891
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_72($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 24013
 $4 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 784 >> 2] | 0; //@line 24017
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 60 >> 2] | 0; //@line 24023
 if (!$7) {
  return;
 }
 $10 = HEAP32[$7 >> 2] | 0; //@line 24029
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 24030
 FUNCTION_TABLE_vi[$10 & 1023]($4 + 48 | 0); //@line 24031
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 24034
  sp = STACKTOP; //@line 24035
  return;
 }
 ___async_unwind = 0; //@line 24038
 HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 24039
 sp = STACKTOP; //@line 24040
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_20($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17566
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17570
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17572
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 17574
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 17575
 FUNCTION_TABLE_vii[$7 & 31]($4, $6); //@line 17576
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 292; //@line 17579
  sp = STACKTOP; //@line 17580
  return;
 }
 ___async_unwind = 0; //@line 17583
 HEAP32[$ReallocAsyncCtx >> 2] = 292; //@line 17584
 sp = STACKTOP; //@line 17585
 return;
}
function __ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_467($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 34261
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34265
 $5 = $4 + 944 | 0; //@line 34266
 HEAP8[$5 >> 0] = HEAP8[$5 >> 0] | 34; //@line 34269
 $9 = HEAP32[$4 + 356 >> 2] | 0; //@line 34271
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 34273
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($9, $4 + 996 | 0, 1); //@line 34274
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 426; //@line 34277
  sp = STACKTOP; //@line 34278
  return;
 }
 ___async_unwind = 0; //@line 34281
 HEAP32[$ReallocAsyncCtx2 >> 2] = 426; //@line 34282
 sp = STACKTOP; //@line 34283
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26247
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26249
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26251
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26253
 $8 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0; //@line 26255
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 26256
 FUNCTION_TABLE_vii[$8 & 31]($2, $4); //@line 26257
 if (!___async) {
  ___async_unwind = 0; //@line 26260
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 189; //@line 26262
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $6; //@line 26264
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $2; //@line 26266
 sp = STACKTOP; //@line 26267
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_260($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12187
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12189
 $3 = $2 + 944 | 0; //@line 12190
 HEAP8[$3 >> 0] = HEAP8[$3 >> 0] | 32; //@line 12193
 $7 = HEAP32[$2 + 356 >> 2] | 0; //@line 12195
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 12197
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($7, $2 + 996 | 0, 1); //@line 12198
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 447; //@line 12201
  sp = STACKTOP; //@line 12202
  return;
 }
 ___async_unwind = 0; //@line 12205
 HEAP32[$ReallocAsyncCtx3 >> 2] = 447; //@line 12206
 sp = STACKTOP; //@line 12207
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 36456
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36458
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 36464
  return;
 }
 $4 = HEAP32[$2 >> 2] | 0; //@line 36467
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 36468
 __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 36469
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 589; //@line 36472
  sp = STACKTOP; //@line 36473
  return;
 }
 ___async_unwind = 0; //@line 36476
 HEAP32[$ReallocAsyncCtx2 >> 2] = 589; //@line 36477
 sp = STACKTOP; //@line 36478
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_280($0) {
 $0 = $0 | 0;
 var $6 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13222
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13228
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  return;
 }
 _printf(11887, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 13237
 _printf(12033, $6) | 0; //@line 13238
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 13239
 _putchar(10) | 0; //@line 13240
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 225; //@line 13243
  sp = STACKTOP; //@line 13244
  return;
 }
 ___async_unwind = 0; //@line 13247
 HEAP32[$ReallocAsyncCtx6 >> 2] = 225; //@line 13248
 sp = STACKTOP; //@line 13249
 return;
}
function __ZN4mbed10TimerEventC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4319
 HEAP32[$0 >> 2] = 704; //@line 4320
 $1 = $0 + 8 | 0; //@line 4321
 HEAP32[$1 >> 2] = 0; //@line 4322
 HEAP32[$1 + 4 >> 2] = 0; //@line 4322
 HEAP32[$1 + 8 >> 2] = 0; //@line 4322
 HEAP32[$1 + 12 >> 2] = 0; //@line 4322
 $2 = _get_us_ticker_data() | 0; //@line 4323
 HEAP32[$0 + 24 >> 2] = $2; //@line 4325
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4326
 _ticker_set_handler($2, 37); //@line 4327
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 173; //@line 4330
  sp = STACKTOP; //@line 4331
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4334
  return;
 }
}
function __ZN7LoRaMac10disconnectEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $9 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9913
 HEAP8[$2 + 372 >> 0] = 0; //@line 9915
 HEAP8[$2 + 377 >> 0] = 0; //@line 9917
 HEAP8[$2 + 371 >> 0] = 1; //@line 9919
 HEAP8[$2 + 373 >> 0] = 0; //@line 9921
 HEAP8[$2 + 374 >> 0] = 0; //@line 9923
 HEAP8[$2 + 944 >> 0] = 0; //@line 9925
 $9 = $2 + 968 | 0; //@line 9926
 HEAP32[$9 >> 2] = 0; //@line 9927
 $10 = $2 + 4 | 0; //@line 9928
 __ZN14LoRaMacCommand20clear_command_bufferEv($10); //@line 9929
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($10); //@line 9930
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($10); //@line 9931
 HEAP32[$9 >> 2] = 0; //@line 9932
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_99($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26132
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26134
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 26136
 __ZN14lorawan_timersD2Ev($2 + 980 | 0); //@line 26137
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 342; //@line 26140
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 26141
  HEAP32[$4 >> 2] = $2; //@line 26142
  sp = STACKTOP; //@line 26143
  return;
 }
 ___async_unwind = 0; //@line 26146
 HEAP32[$ReallocAsyncCtx >> 2] = 342; //@line 26147
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 26148
 HEAP32[$4 >> 2] = $2; //@line 26149
 sp = STACKTOP; //@line 26150
 return;
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 38037
 newDynamicTop = oldDynamicTop + increment | 0; //@line 38038
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 38042
  ___setErrNo(12); //@line 38043
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 38047
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 38051
   ___setErrNo(12); //@line 38052
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 38056
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 10553
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 10555
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 10561
  $11 = ___fwritex($0, $4, $3) | 0; //@line 10562
  if ($phitmp) {
   $13 = $11; //@line 10564
  } else {
   ___unlockfile($3); //@line 10566
   $13 = $11; //@line 10567
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 10571
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 10575
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 10578
 }
 return $15 | 0; //@line 10580
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3326
 __ZN4mbed6Ticker6detachEv($0 + 1240 | 0); //@line 3328
 HEAP8[$0 + 688 >> 0] = 0; //@line 3330
 $4 = HEAP32[$0 + 784 >> 2] | 0; //@line 3332
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 12 >> 2] | 0; //@line 3338
 if (!$7) {
  return;
 }
 $9 = HEAP32[$7 >> 2] | 0; //@line 3343
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3344
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 3345
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 146; //@line 3348
  sp = STACKTOP; //@line 3349
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3352
 return;
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 12775
 } else {
  $$056 = $2; //@line 12777
  $15 = $1; //@line 12777
  $8 = $0; //@line 12777
  while (1) {
   $14 = $$056 + -1 | 0; //@line 12785
   HEAP8[$14 >> 0] = HEAPU8[16457 + ($8 & 15) >> 0] | 0 | $3; //@line 12786
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 12787
   $15 = tempRet0; //@line 12788
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 12793
    break;
   } else {
    $$056 = $14; //@line 12796
   }
  }
 }
 return $$05$lcssa | 0; //@line 12800
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_320($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20309
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20313
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20315
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 20317
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 20318
 FUNCTION_TABLE_vii[$7 & 31]($4, $6); //@line 20319
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 20322
  sp = STACKTOP; //@line 20323
  return;
 }
 ___async_unwind = 0; //@line 20326
 HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 20327
 sp = STACKTOP; //@line 20328
 return;
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_47($0) {
 $0 = $0 | 0;
 var $$0 = 0, $13 = 0, $15 = 0, $8 = 0, $AsyncRetVal = 0;
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22037
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22041
 if (!$AsyncRetVal) {
  $13 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 22044
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv(HEAP32[$0 + 12 >> 2] | 0) | 0) >> 2] = $13; //@line 22046
  $15 = $8 + 944 | 0; //@line 22047
  HEAP8[$15 >> 0] = HEAP8[$15 >> 0] | 1; //@line 22050
  $$0 = 0; //@line 22051
 } else {
  HEAP8[$8 + 373 >> 0] = 0; //@line 22054
  $$0 = $AsyncRetVal; //@line 22055
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 22058
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_234($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10037
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10039
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10041
 $5 = HEAP32[$2 >> 2] | 0; //@line 10042
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 10044
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1016 | 0); //@line 10045
 if (!___async) {
  ___async_unwind = 0; //@line 10048
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 539; //@line 10050
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 10052
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 10054
 sp = STACKTOP; //@line 10055
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_233($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 10013
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10015
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10017
 $5 = HEAP32[$2 >> 2] | 0; //@line 10018
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 10020
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1036 | 0); //@line 10021
 if (!___async) {
  ___async_unwind = 0; //@line 10024
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 540; //@line 10026
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 10028
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 10030
 sp = STACKTOP; //@line 10031
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_232($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9989
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9991
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9993
 $5 = HEAP32[$2 >> 2] | 0; //@line 9994
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 9996
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1056 | 0); //@line 9997
 if (!___async) {
  ___async_unwind = 0; //@line 10000
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 541; //@line 10002
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 10004
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 10006
 sp = STACKTOP; //@line 10007
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_121($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30540
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 30545
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30547
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30548
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 30549
 __ZN7LoRaPHY15setup_rx_windowEbj($7, $4, $6); //@line 30550
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 516; //@line 30553
  sp = STACKTOP; //@line 30554
  return;
 }
 ___async_unwind = 0; //@line 30557
 HEAP32[$ReallocAsyncCtx4 >> 2] = 516; //@line 30558
 sp = STACKTOP; //@line 30559
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_61($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$pre = 0, $13 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23307
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23309
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23311
 if (!$AsyncRetVal) {
  $$1 = 0; //@line 23314
  $13 = ___async_retval; //@line 23315
  HEAP32[$13 >> 2] = $$1; //@line 23316
  return;
 }
 $$pre = HEAP8[$6 >> 0] | 0; //@line 23319
 HEAP8[$8 + 373 >> 0] = 0; //@line 23321
 HEAP8[$6 >> 0] = $$pre & -9; //@line 23323
 $$1 = $AsyncRetVal; //@line 23324
 $13 = ___async_retval; //@line 23325
 HEAP32[$13 >> 2] = $$1; //@line 23326
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_186($0) {
 $0 = $0 | 0;
 var $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 34059
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34065
 _printf(10904, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 34068
 HEAP32[$6 >> 2] = 3; //@line 34069
 _printf(10999, $6) | 0; //@line 34070
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 34071
 _putchar(10) | 0; //@line 34072
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 111; //@line 34075
  sp = STACKTOP; //@line 34076
  return;
 }
 ___async_unwind = 0; //@line 34079
 HEAP32[$ReallocAsyncCtx3 >> 2] = 111; //@line 34080
 sp = STACKTOP; //@line 34081
 return;
}
function _mbedtls_gcm_free($0) {
 $0 = $0 | 0;
 var $$034$i = 0, $$05$i = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4493
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4494
 _mbedtls_cipher_free($0); //@line 4495
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 695; //@line 4498
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4500
  sp = STACKTOP; //@line 4501
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4504
 $$034$i = 400; //@line 4505
 $$05$i = $0; //@line 4505
 while (1) {
  $$034$i = $$034$i + -1 | 0; //@line 4507
  HEAP8[$$05$i >> 0] = 0; //@line 4509
  if (!$$034$i) {
   break;
  } else {
   $$05$i = $$05$i + 1 | 0; //@line 4514
  }
 }
 return;
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 15433
 $0 = ___cxa_get_globals_fast() | 0; //@line 15434
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 15437
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 15441
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 15453
    _emscripten_alloc_async_context(4, sp) | 0; //@line 15454
    __ZSt11__terminatePFvvE($16); //@line 15455
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 15460
 _emscripten_alloc_async_context(4, sp) | 0; //@line 15461
 __ZSt11__terminatePFvvE($17); //@line 15462
}
function __ZN14lorawan_timersD2Ev__async_cb_144($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31473
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31475
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 31477
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 31484
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 31485
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 16 | 0); //@line 31486
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 354; //@line 31489
  sp = STACKTOP; //@line 31490
  return;
 }
 ___async_unwind = 0; //@line 31493
 HEAP32[$ReallocAsyncCtx5 >> 2] = 354; //@line 31494
 sp = STACKTOP; //@line 31495
 return;
}
function __GLOBAL__sub_I_main_cpp__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 34099
 __ZN5Sht31C2E7PinNameS0_(23904, 10, 11); //@line 34100
 __ZN4mbed11InterruptInC2E7PinName(22928, 1337); //@line 34101
 __ZN6events10EventQueueC2EjPh(23e3, 1664, 0); //@line 34102
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 34103
 __ZN16LoRaWANInterfaceC2ER9LoRaRadio(23200, 18952); //@line 34104
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 746; //@line 34107
  sp = STACKTOP; //@line 34108
  return;
 }
 ___async_unwind = 0; //@line 34111
 HEAP32[$ReallocAsyncCtx2 >> 2] = 746; //@line 34112
 sp = STACKTOP; //@line 34113
 return;
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 10770
 $3 = HEAP8[$1 >> 0] | 0; //@line 10772
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 10776
 $7 = HEAP32[$0 >> 2] | 0; //@line 10777
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 10782
  HEAP32[$0 + 4 >> 2] = 0; //@line 10784
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 10786
  HEAP32[$0 + 28 >> 2] = $14; //@line 10788
  HEAP32[$0 + 20 >> 2] = $14; //@line 10790
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 10796
  $$0 = 0; //@line 10797
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 10800
  $$0 = -1; //@line 10801
 }
 return $$0 | 0; //@line 10803
}
function __ZN4mbed11InterruptInD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10061
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10063
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 10065
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 10072
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 10073
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 10074
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 153; //@line 10077
  sp = STACKTOP; //@line 10078
  return;
 }
 ___async_unwind = 0; //@line 10081
 HEAP32[$ReallocAsyncCtx2 >> 2] = 153; //@line 10082
 sp = STACKTOP; //@line 10083
 return;
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 27186
 $2 = HEAP32[$0 >> 2] | 0; //@line 27187
 $3 = $1 + 16 | 0; //@line 27188
 $4 = HEAP32[$3 >> 2] | 0; //@line 27189
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 27190
 __ZN6events10EventQueue6cancelEi($2, $4); //@line 27191
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 667; //@line 27194
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 27196
  sp = STACKTOP; //@line 27197
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 27200
  HEAP32[$3 >> 2] = 0; //@line 27201
  return;
 }
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18467
 if ((HEAP32[$0 + 968 >> 2] & 33 | 0) == 1) {
  $$0 = -1e3; //@line 18473
  return $$0 | 0; //@line 18474
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18477
 $7 = __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0 + 352 | 0, $1) | 0; //@line 18478
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 546; //@line 18481
  sp = STACKTOP; //@line 18482
  return 0; //@line 18483
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 18485
 $$0 = $7; //@line 18486
 return $$0 | 0; //@line 18487
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$1 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33733
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33735
 $$ = HEAP8[___async_retval >> 0] & 1 ? 7 : 6; //@line 33739
 $6 = HEAP8[$2 >> 0] | 0; //@line 33740
 $$1 = ($6 << 24 >> 24 < (HEAP8[$4 + 28 >> 0] | 0) ? 1 : $6 << 24 >> 24 > (HEAP8[$4 + 29 >> 0] | 0)) ? $$ & 5 : $$; //@line 33749
 $16 = HEAP8[$2 + 1 >> 0] | 0; //@line 33751
 HEAP8[___async_retval >> 0] = ($16 << 24 >> 24 < (HEAP8[$4 + 32 >> 0] | 0) ? 1 : $16 << 24 >> 24 > (HEAP8[$4 + 33 >> 0] | 0)) ? $$1 & 3 : $$1; //@line 33762
 return;
}
function __ZN4mbed5Timer7read_msEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $18 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $6 = 0, $9 = 0;
 $4 = $0 + 8 | 0; //@line 36515
 $6 = HEAP32[$4 >> 2] | 0; //@line 36517
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 36520
 $11 = ___async_retval; //@line 36522
 $18 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 36529
 $24 = _i64Subtract(HEAP32[$11 >> 2] | 0, HEAP32[$11 + 4 >> 2] | 0, HEAP32[$18 >> 2] | 0, HEAP32[$18 + 4 >> 2] | 0) | 0; //@line 36535
 $26 = _i64Add($24 | 0, tempRet0 | 0, $6 | 0, $9 | 0) | 0; //@line 36537
 $28 = ___udivdi3($26 | 0, tempRet0 | 0, 1e3, 0) | 0; //@line 36539
 HEAP32[___async_retval >> 2] = $28; //@line 36542
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_117($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 30263
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30265
 $4 = HEAP32[$2 + 12 >> 2] | 0; //@line 30267
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 30273
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 30274
 FUNCTION_TABLE_vi[$7 & 1023]($2); //@line 30275
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 30278
  sp = STACKTOP; //@line 30279
  return;
 }
 ___async_unwind = 0; //@line 30282
 HEAP32[$ReallocAsyncCtx7 >> 2] = 349; //@line 30283
 sp = STACKTOP; //@line 30284
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_224($0) {
 $0 = $0 | 0;
 var $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 37495
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 37501
 _printf(10904, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 37504
 HEAP32[$6 >> 2] = 5; //@line 37505
 _printf(10999, $6) | 0; //@line 37506
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 37507
 _putchar(10) | 0; //@line 37508
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 79; //@line 37511
  sp = STACKTOP; //@line 37512
  return;
 }
 ___async_unwind = 0; //@line 37515
 HEAP32[$ReallocAsyncCtx9 >> 2] = 79; //@line 37516
 sp = STACKTOP; //@line 37517
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_223($0) {
 $0 = $0 | 0;
 var $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 37467
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 37473
 _printf(10904, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 37476
 HEAP32[$6 >> 2] = 6; //@line 37477
 _printf(10999, $6) | 0; //@line 37478
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 37479
 _putchar(10) | 0; //@line 37480
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 82; //@line 37483
  sp = STACKTOP; //@line 37484
  return;
 }
 ___async_unwind = 0; //@line 37487
 HEAP32[$ReallocAsyncCtx7 >> 2] = 82; //@line 37488
 sp = STACKTOP; //@line 37489
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_63($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23421
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23424
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 23427
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 23428
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 23429
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 638; //@line 23432
  sp = STACKTOP; //@line 23433
  return;
 }
 ___async_unwind = 0; //@line 23436
 HEAP32[$ReallocAsyncCtx3 >> 2] = 638; //@line 23437
 sp = STACKTOP; //@line 23438
 return;
}
function __ZN16SX1276_LoRaRadio9start_cadEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2215
 STACKTOP = STACKTOP + 16 | 0; //@line 2216
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2216
 _printf(10904, sp) | 0; //@line 2219
 _printf(11047, sp + 8 | 0) | 0; //@line 2220
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2221
 _putchar(10) | 0; //@line 2222
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 105; //@line 2225
  sp = STACKTOP; //@line 2226
  STACKTOP = sp; //@line 2227
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2229
  STACKTOP = sp; //@line 2230
  return;
 }
}
function __ZN7LoRaMac21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18546
 if ((HEAP32[$0 + 968 >> 2] & 33 | 0) == 1) {
  $$0 = -1e3; //@line 18552
  return $$0 | 0; //@line 18553
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18556
 $7 = __ZN18LoRaMacChannelPlan21remove_single_channelEh($0 + 352 | 0, $1) | 0; //@line 18557
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 548; //@line 18560
  sp = STACKTOP; //@line 18561
  return 0; //@line 18562
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 18564
 $$0 = $7; //@line 18565
 return $$0 | 0; //@line 18566
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_168($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 32850
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32854
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 32856
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 32857
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 32858
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 376; //@line 32861
  sp = STACKTOP; //@line 32862
  return;
 }
 ___async_unwind = 0; //@line 32865
 HEAP32[$ReallocAsyncCtx >> 2] = 376; //@line 32866
 sp = STACKTOP; //@line 32867
 return;
}
function _mbedtls_cipher_setup__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31692
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31694
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31696
 HEAP32[$2 + 60 >> 2] = $AsyncRetVal; //@line 31698
 if (!$AsyncRetVal) {
  $$0 = -24960; //@line 31701
 } else {
  HEAP32[$2 >> 2] = $4; //@line 31703
  if ((HEAP32[$4 + 4 >> 2] | 0) == 2) {
   HEAP32[$2 + 12 >> 2] = 4; //@line 31709
   HEAP32[$2 + 16 >> 2] = 14; //@line 31711
   $$0 = 0; //@line 31712
  } else {
   $$0 = 0; //@line 31714
  }
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 31718
 return;
}
function __ZN16SX1276_LoRaRadio11radio_resetEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 104
 STACKTOP = STACKTOP + 16 | 0; //@line 105
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 105
 _printf(10904, sp) | 0; //@line 108
 _printf(11569, sp + 8 | 0) | 0; //@line 109
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 110
 _putchar(10) | 0; //@line 111
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 52; //@line 114
  sp = STACKTOP; //@line 115
  STACKTOP = sp; //@line 116
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 118
  STACKTOP = sp; //@line 119
  return;
 }
}
function __ZN16LoRaWANInterface4sendEhPKhti__async_cb_181($0) {
 $0 = $0 | 0;
 var $$0 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33825
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33827
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 33829
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 33831
 if (!$2) {
  $$0 = -1003; //@line 33834
  $13 = ___async_retval; //@line 33835
  HEAP16[$13 >> 1] = $$0; //@line 33836
  return;
 }
 $$0 = __ZN12LoRaWANStack9handle_txEhPKhth(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $6, $2, $8, $4 & 255) | 0; //@line 33842
 $13 = ___async_retval; //@line 33843
 HEAP16[$13 >> 1] = $$0; //@line 33844
 return;
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 12812
 } else {
  $$06 = $2; //@line 12814
  $11 = $1; //@line 12814
  $7 = $0; //@line 12814
  while (1) {
   $10 = $$06 + -1 | 0; //@line 12819
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 12820
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 12821
   $11 = tempRet0; //@line 12822
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 12827
    break;
   } else {
    $$06 = $10; //@line 12830
   }
  }
 }
 return $$0$lcssa | 0; //@line 12834
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_286($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13344
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 13347
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 13350
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 13351
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 13352
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 647; //@line 13355
  sp = STACKTOP; //@line 13356
  return;
 }
 ___async_unwind = 0; //@line 13359
 HEAP32[$ReallocAsyncCtx3 >> 2] = 647; //@line 13360
 sp = STACKTOP; //@line 13361
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1347
 $1 = _emscripten_asm_const_i(2) | 0; //@line 1348
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 1351
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1352
 FUNCTION_TABLE_vi[$4 & 1023]($0); //@line 1353
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 84; //@line 1356
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 1358
  sp = STACKTOP; //@line 1359
  return 0; //@line 1360
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1362
  return $1 | 0; //@line 1363
 }
 return 0; //@line 1365
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_378($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26273
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26277
 $7 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 76 >> 2] | 0; //@line 26280
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 26281
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 26282
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 190; //@line 26285
  sp = STACKTOP; //@line 26286
  return;
 }
 ___async_unwind = 0; //@line 26289
 HEAP32[$ReallocAsyncCtx3 >> 2] = 190; //@line 26290
 sp = STACKTOP; //@line 26291
 return;
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_468($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 34393
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 34396
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 34399
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 34400
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 34401
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 644; //@line 34404
  sp = STACKTOP; //@line 34405
  return;
 }
 ___async_unwind = 0; //@line 34408
 HEAP32[$ReallocAsyncCtx3 >> 2] = 644; //@line 34409
 sp = STACKTOP; //@line 34410
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_442($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 31394
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31397
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 31400
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 31401
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 31402
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 641; //@line 31405
  sp = STACKTOP; //@line 31406
  return;
 }
 ___async_unwind = 0; //@line 31409
 HEAP32[$ReallocAsyncCtx3 >> 2] = 641; //@line 31410
 sp = STACKTOP; //@line 31411
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_306($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 14630
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14633
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 14636
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 14637
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 14638
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 651; //@line 14641
  sp = STACKTOP; //@line 14642
  return;
 }
 ___async_unwind = 0; //@line 14645
 HEAP32[$ReallocAsyncCtx4 >> 2] = 651; //@line 14646
 sp = STACKTOP; //@line 14647
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_305($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 14607
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14610
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 14613
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 14614
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 14615
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 651; //@line 14618
  sp = STACKTOP; //@line 14619
  return;
 }
 ___async_unwind = 0; //@line 14622
 HEAP32[$ReallocAsyncCtx4 >> 2] = 651; //@line 14623
 sp = STACKTOP; //@line 14624
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_374($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26085
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26088
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 26091
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 26092
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 26093
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 658; //@line 26096
  sp = STACKTOP; //@line 26097
  return;
 }
 ___async_unwind = 0; //@line 26100
 HEAP32[$ReallocAsyncCtx3 >> 2] = 658; //@line 26101
 sp = STACKTOP; //@line 26102
 return;
}
function __ZN7LoRaPHY16get_alternate_DREh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $12 = 0, $3 = 0, $6 = 0, $8 = 0;
 $3 = HEAP8[$0 + 31 >> 0] | 0; //@line 25064
 $6 = HEAP8[$0 + 26 >> 0] | 0; //@line 25067
 $8 = ($3 & 255) + 1 | 0; //@line 25069
 $12 = (($1 & 255) >>> 0) % (($8 - ($6 & 255) & 255) >>> 0) | 0; //@line 25073
 switch (($12 & 255) << 24 >> 24) {
 case 1:
  {
   $$0 = $3; //@line 25077
   return $$0 | 0; //@line 25078
  }
 case 0:
  {
   $$0 = $6; //@line 25082
   return $$0 | 0; //@line 25083
  }
 default:
  {
   $$0 = $8 - $12 & 255; //@line 25089
   return $$0 | 0; //@line 25090
  }
 }
 return 0; //@line 25093
}
function __ZN7LoRaMac19remove_channel_planEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18492
 if ((HEAP32[$0 + 968 >> 2] & 33 | 0) == 1) {
  $$0 = -1e3; //@line 18498
  return $$0 | 0; //@line 18499
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18502
 $6 = __ZN18LoRaMacChannelPlan11remove_planEv($0 + 352 | 0) | 0; //@line 18503
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 547; //@line 18506
  sp = STACKTOP; //@line 18507
  return 0; //@line 18508
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 18510
 $$0 = $6; //@line 18511
 return $$0 | 0; //@line 18512
}
function __ZN4mbed7Timeout7handlerEv__async_cb_236($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10263
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10267
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 10269
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 10270
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 10271
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 168; //@line 10274
  sp = STACKTOP; //@line 10275
  return;
 }
 ___async_unwind = 0; //@line 10278
 HEAP32[$ReallocAsyncCtx >> 2] = 168; //@line 10279
 sp = STACKTOP; //@line 10280
 return;
}
function __ZN7LoRaPHY18verify_tx_datarateEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$sink$in = 0, $$sink5 = 0;
 do {
  if ($2) {
   $$sink$in = $0 + 30 | 0; //@line 26573
   $$sink5 = $0 + 31 | 0; //@line 26573
  } else {
   if (!(HEAP8[$0 + 132 >> 0] & 1)) {
    $$sink$in = $0 + 26 | 0; //@line 26582
    $$sink5 = $0 + 27 | 0; //@line 26582
    break;
   } else {
    $$sink$in = $0 + 35 | 0; //@line 26587
    $$sink5 = $0 + 27 | 0; //@line 26587
    break;
   }
  }
 } while (0);
 return ((HEAP8[$$sink$in >> 0] | 0) <= $1 << 24 >> 24 ? (HEAP8[$$sink5 >> 0] | 0) >= $1 << 24 >> 24 : 0) | 0; //@line 26597
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16335
 do {
  if (!$0) {
   $3 = 0; //@line 16339
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16341
   $2 = ___dynamic_cast($0, 464, 520, 0) | 0; //@line 16342
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 812; //@line 16345
    sp = STACKTOP; //@line 16346
    return 0; //@line 16347
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16349
    $3 = ($2 | 0) != 0 & 1; //@line 16352
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 16357
}
function __ZN7LoRaPHY24restore_default_channelsEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $5 = 0, $7 = 0, $8 = 0, $indvars$iv = 0;
 $2 = HEAP8[$0 + 128 >> 0] | 0; //@line 23695
 if (!($2 << 24 >> 24)) {
  return;
 }
 $5 = HEAP32[$0 + 124 >> 2] | 0; //@line 23701
 $7 = HEAP32[$0 + 120 >> 2] | 0; //@line 23703
 $8 = $2 & 255; //@line 23704
 $indvars$iv = 0; //@line 23705
 do {
  $11 = $7 + ($indvars$iv << 1) | 0; //@line 23709
  HEAP16[$11 >> 1] = HEAP16[$11 >> 1] | HEAP16[$5 + ($indvars$iv << 1) >> 1]; //@line 23712
  $indvars$iv = $indvars$iv + 1 | 0; //@line 23713
 } while ($indvars$iv >>> 0 < $8 >>> 0);
 return;
}
function _invoke_ticker__async_cb_458($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 33730
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 33736
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 33737
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 33738
 FUNCTION_TABLE_vi[$5 & 1023]($6); //@line 33739
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 742; //@line 33742
  sp = STACKTOP; //@line 33743
  return;
 }
 ___async_unwind = 0; //@line 33746
 HEAP32[$ReallocAsyncCtx >> 2] = 742; //@line 33747
 sp = STACKTOP; //@line 33748
 return;
}
function __Z18decrypt_join_framePKhtS0_Ph($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $4 = 0, $6 = 0;
 _mbedtls_aes_init(22632); //@line 22573
 $4 = _mbedtls_aes_setkey_enc(22632, $2, 128) | 0; //@line 22574
 if (!$4) {
  $6 = _mbedtls_aes_crypt_ecb(22632, 1, $0, $3) | 0; //@line 22577
  if (($1 & 65535) > 15 & ($6 | 0) == 0) {
   $$0 = _mbedtls_aes_crypt_ecb(22632, 1, $0 + 16 | 0, $3 + 16 | 0) | 0; //@line 22585
  } else {
   $$0 = $6; //@line 22587
  }
 } else {
  $$0 = $4; //@line 22590
 }
 _mbedtls_aes_free(22632); //@line 22592
 return $$0 | 0; //@line 22593
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13745
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 13747
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 13753
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13754
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 13755
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 418; //@line 13758
  sp = STACKTOP; //@line 13759
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13762
 return;
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 12456
 } else {
  $$04 = 0; //@line 12458
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 12461
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 12465
   $12 = $7 + 1 | 0; //@line 12466
   HEAP32[$0 >> 2] = $12; //@line 12467
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 12473
    break;
   } else {
    $$04 = $11; //@line 12476
   }
  }
 }
 return $$0$lcssa | 0; //@line 12480
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8762
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 8764
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 8770
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8771
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 8772
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 290; //@line 8775
  sp = STACKTOP; //@line 8776
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8779
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_293($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 13785
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(4) | 0; //@line 13792
 _mbed_assert_internal(12851, 11935, 843); //@line 13793
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 216; //@line 13796
  sp = STACKTOP; //@line 13797
  return;
 }
 ___async_unwind = 0; //@line 13800
 HEAP32[$ReallocAsyncCtx11 >> 2] = 216; //@line 13801
 sp = STACKTOP; //@line 13802
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_273($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 12946
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(4) | 0; //@line 12953
 _mbed_assert_internal(12851, 11935, 737); //@line 12954
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 235; //@line 12957
  sp = STACKTOP; //@line 12958
  return;
 }
 ___async_unwind = 0; //@line 12961
 HEAP32[$ReallocAsyncCtx12 >> 2] = 235; //@line 12962
 sp = STACKTOP; //@line 12963
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_271($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 12878
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 12885
 _mbed_assert_internal(12851, 11935, 715); //@line 12886
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 231; //@line 12889
  sp = STACKTOP; //@line 12890
  return;
 }
 ___async_unwind = 0; //@line 12893
 HEAP32[$ReallocAsyncCtx13 >> 2] = 231; //@line 12894
 sp = STACKTOP; //@line 12895
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_331($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 22483
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 22490
 _mbed_assert_internal(12851, 11935, 821); //@line 22491
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 210; //@line 22494
  sp = STACKTOP; //@line 22495
  return;
 }
 ___async_unwind = 0; //@line 22498
 HEAP32[$ReallocAsyncCtx13 >> 2] = 210; //@line 22499
 sp = STACKTOP; //@line 22500
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_329($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 22422
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(4) | 0; //@line 22429
 _mbed_assert_internal(12851, 11935, 797); //@line 22430
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 206; //@line 22433
  sp = STACKTOP; //@line 22434
  return;
 }
 ___async_unwind = 0; //@line 22437
 HEAP32[$ReallocAsyncCtx14 >> 2] = 206; //@line 22438
 sp = STACKTOP; //@line 22439
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_327($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 22361
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(4) | 0; //@line 22368
 _mbed_assert_internal(12851, 11935, 786); //@line 22369
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 202; //@line 22372
  sp = STACKTOP; //@line 22373
  return;
 }
 ___async_unwind = 0; //@line 22376
 HEAP32[$ReallocAsyncCtx15 >> 2] = 202; //@line 22377
 sp = STACKTOP; //@line 22378
 return;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 37562
 $y_sroa_0_0_extract_trunc = $b$0; //@line 37563
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 37564
 $1$1 = tempRet0; //@line 37565
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 37567
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8688
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 8690
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 8696
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8697
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 8698
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 287; //@line 8701
  sp = STACKTOP; //@line 8702
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8705
 return;
}
function _mbedtls_cipher_update__async_cb_83($0) {
 $0 = $0 | 0;
 var $$1 = 0, $2 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25077
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25079
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25081
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 25084
  $9 = ___async_retval; //@line 25085
  HEAP32[$9 >> 2] = $$1; //@line 25086
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 25091
 $$1 = 0; //@line 25092
 $9 = ___async_retval; //@line 25093
 HEAP32[$9 >> 2] = $$1; //@line 25094
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_460($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 33946
 if (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 33954
 _mbed_assert_internal(13734, 13752, 57); //@line 33955
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 666; //@line 33958
  sp = STACKTOP; //@line 33959
  return;
 }
 ___async_unwind = 0; //@line 33962
 HEAP32[$ReallocAsyncCtx5 >> 2] = 666; //@line 33963
 sp = STACKTOP; //@line 33964
 return;
}
function __ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12263
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 12270
 _mbed_assert_internal(12851, 12860, 187); //@line 12271
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 458; //@line 12274
  sp = STACKTOP; //@line 12275
  return;
 }
 ___async_unwind = 0; //@line 12278
 HEAP32[$ReallocAsyncCtx2 >> 2] = 458; //@line 12279
 sp = STACKTOP; //@line 12280
 return;
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11640
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 11642
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 11648
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11649
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 11650
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 374; //@line 11653
  sp = STACKTOP; //@line 11654
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11657
 return;
}
function __ZN12LoRaWANStack17get_lorawan_stackEv() {
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9739
 do {
  if (!(HEAP8[18944] | 0)) {
   if (___cxa_guard_acquire(18944) | 0) {
    $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9747
    __ZN12LoRaWANStackC2Ev(20272); //@line 9748
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 309; //@line 9751
     sp = STACKTOP; //@line 9752
     return 0; //@line 9753
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 9755
     break;
    }
   }
  }
 } while (0);
 return 20272; //@line 9761
}
function _mbedtls_cipher_info_from_type($0) {
 $0 = $0 | 0;
 var $$05 = 0, $$06 = 0, $1 = 0, $9 = 0;
 $1 = HEAP32[2374] | 0; //@line 1541
 L1 : do {
  if (!$1) {
   $$05 = 0; //@line 1545
  } else {
   $$06 = 9492; //@line 1547
   $9 = $1; //@line 1547
   while (1) {
    if ((HEAP32[$$06 >> 2] | 0) == ($0 | 0)) {
     $$05 = $9; //@line 1552
     break L1;
    }
    $9 = HEAP32[$$06 + 12 >> 2] | 0; //@line 1557
    if (!$9) {
     $$05 = 0; //@line 1560
     break;
    } else {
     $$06 = $$06 + 8 | 0; //@line 1563
    }
   }
  }
 } while (0);
 return $$05 | 0; //@line 1568
}
function __ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25782
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 25789
 _mbed_assert_internal(12851, 12860, 194); //@line 25790
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 504; //@line 25793
  sp = STACKTOP; //@line 25794
  return;
 }
 ___async_unwind = 0; //@line 25797
 HEAP32[$ReallocAsyncCtx2 >> 2] = 504; //@line 25798
 sp = STACKTOP; //@line 25799
 return;
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_194($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 34440
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 34447
 _mbed_assert_internal(12851, 12860, 217); //@line 34448
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 519; //@line 34451
  sp = STACKTOP; //@line 34452
  return;
 }
 ___async_unwind = 0; //@line 34455
 HEAP32[$ReallocAsyncCtx3 >> 2] = 519; //@line 34456
 sp = STACKTOP; //@line 34457
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_150($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 31755
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 31762
 _mbed_assert_internal(12851, 12860, 209); //@line 31763
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 510; //@line 31766
  sp = STACKTOP; //@line 31767
  return;
 }
 ___async_unwind = 0; //@line 31770
 HEAP32[$ReallocAsyncCtx3 >> 2] = 510; //@line 31771
 sp = STACKTOP; //@line 31772
 return;
}
function __ZN7LoRaPHY25accept_tx_param_setup_reqEP20tx_param_setup_req_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $17 = 0, $3 = 0, $6 = 0;
 $3 = HEAP8[$0 + 13 >> 0] | 0; //@line 24981
 if (!($3 << 24 >> 24)) {
  $17 = $3 << 24 >> 24 != 0; //@line 24984
  return $17 | 0; //@line 24985
 }
 $6 = $0 + 132 | 0; //@line 24988
 $10 = HEAP8[$6 >> 0] & -2 | HEAP8[$1 >> 0] & 1; //@line 24992
 HEAP8[$6 >> 0] = $10; //@line 24993
 HEAP8[$6 >> 0] = HEAP8[$1 + 1 >> 0] << 1 & 2 | $10 & -3; //@line 25000
 $17 = $3 << 24 >> 24 != 0; //@line 25001
 return $17 | 0; //@line 25002
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 37547
 $2 = $b & 65535; //@line 37548
 $3 = Math_imul($2, $1) | 0; //@line 37549
 $6 = $a >>> 16; //@line 37550
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 37551
 $11 = $b >>> 16; //@line 37552
 $12 = Math_imul($11, $1) | 0; //@line 37553
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 37554
}
function __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $8 = 0, $or$cond$i = 0;
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 35551
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 35553
 $16 = $10 + ($8 & 255) | 0; //@line 35559
 $or$cond$i = $16 >>> 0 < 256 & $16 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0, HEAP8[$0 + 12 >> 0] | 0, (HEAP8[HEAP32[$0 + 8 >> 2] >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 35563
 HEAP32[___async_retval >> 2] = $or$cond$i ? 0 : -1010; //@line 35566
 return;
}
function __ZN16SX1276_LoRaRadio5sleepEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32050
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32052
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 32053
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 32054
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 55; //@line 32057
  sp = STACKTOP; //@line 32058
  return;
 }
 ___async_unwind = 0; //@line 32061
 HEAP32[$ReallocAsyncCtx3 >> 2] = 55; //@line 32062
 sp = STACKTOP; //@line 32063
 return;
}
function __ZN7LoRaPHY16set_last_tx_doneEP24set_band_txdone_params_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $16 = 0, $4 = 0, $9 = 0;
 if (!$1) {
  return;
 }
 $4 = HEAP32[$0 + 72 >> 2] | 0; //@line 23668
 $9 = (HEAP8[$1 + 1 >> 0] | 0) == 0; //@line 23673
 $11 = HEAP32[$1 + 4 >> 2] | 0; //@line 23675
 $16 = HEAPU8[(HEAP32[$0 + 112 >> 2] | 0) + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0; //@line 23680
 HEAP32[$4 + ($16 * 24 | 0) + 8 >> 2] = $11; //@line 23682
 if (!$9) {
  return;
 }
 HEAP32[$4 + ($16 * 24 | 0) + 4 >> 2] = $11; //@line 23687
 return;
}
function __ZN7LoRaMac18handle_ack_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31875
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 31882
 _mbed_assert_internal(12851, 12860, 201); //@line 31883
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 506; //@line 31886
  sp = STACKTOP; //@line 31887
  return;
 }
 ___async_unwind = 0; //@line 31890
 HEAP32[$ReallocAsyncCtx2 >> 2] = 506; //@line 31891
 sp = STACKTOP; //@line 31892
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_494($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 36663
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36665
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36667
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 36668
 __ZN4mbed10TimerEventD2Ev($2); //@line 36669
 if (!___async) {
  ___async_unwind = 0; //@line 36672
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 119; //@line 36674
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 36676
 sp = STACKTOP; //@line 36677
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_493($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 36643
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36645
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36647
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 36648
 __ZN4mbed10TimerEventD2Ev($4); //@line 36649
 if (!___async) {
  ___async_unwind = 0; //@line 36652
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 117; //@line 36654
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 36656
 sp = STACKTOP; //@line 36657
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_492($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 36623
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36625
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36627
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 36628
 __ZN4mbed10TimerEventD2Ev($4); //@line 36629
 if (!___async) {
  ___async_unwind = 0; //@line 36632
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 115; //@line 36634
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 36636
 sp = STACKTOP; //@line 36637
 return;
}
function __ZN7LoRaMac17handle_tx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10299
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 10306
 _mbed_assert_internal(12851, 12860, 162); //@line 10307
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 450; //@line 10310
  sp = STACKTOP; //@line 10311
  return;
 }
 ___async_unwind = 0; //@line 10314
 HEAP32[$ReallocAsyncCtx2 >> 2] = 450; //@line 10315
 sp = STACKTOP; //@line 10316
 return;
}
function __ZN7LoRaMac17handle_rx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 37184
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 37191
 _mbed_assert_internal(12851, 12860, 155); //@line 37192
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 440; //@line 37195
  sp = STACKTOP; //@line 37196
  return;
 }
 ___async_unwind = 0; //@line 37199
 HEAP32[$ReallocAsyncCtx2 >> 2] = 440; //@line 37200
 sp = STACKTOP; //@line 37201
 return;
}
function __ZN16LoRaWANInterface7connectERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$07 = 0;
 switch (HEAP8[$1 >> 0] | 0) {
 case 0:
  {
   $$07 = __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5766
   break;
  }
 case 1:
  {
   $$07 = __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5772
   break;
  }
 default:
  {
   $$07 = -1003; //@line 5776
  }
 }
 return $$07 | 0; //@line 5779
}
function __ZN7LoRaMac15handle_rx_errorEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 36415
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 36422
 _mbed_assert_internal(12851, 12860, 148); //@line 36423
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 431; //@line 36426
  sp = STACKTOP; //@line 36427
  return;
 }
 ___async_unwind = 0; //@line 36430
 HEAP32[$ReallocAsyncCtx2 >> 2] = 431; //@line 36431
 sp = STACKTOP; //@line 36432
 return;
}
function __ZN7LoRaMac14handle_tx_doneEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28483
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 28490
 _mbed_assert_internal(12851, 12860, 134); //@line 28491
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 357; //@line 28494
  sp = STACKTOP; //@line 28495
  return;
 }
 ___async_unwind = 0; //@line 28498
 HEAP32[$ReallocAsyncCtx2 >> 2] = 357; //@line 28499
 sp = STACKTOP; //@line 28500
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_500($0) {
 $0 = $0 | 0;
 var $3 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 36873
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 52 | 0; //@line 36876
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 36877
 __ZN4mbed11InterruptInD2Ev($3); //@line 36878
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 125; //@line 36881
  sp = STACKTOP; //@line 36882
  return;
 }
 ___async_unwind = 0; //@line 36885
 HEAP32[$ReallocAsyncCtx9 >> 2] = 125; //@line 36886
 sp = STACKTOP; //@line 36887
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 36603
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36605
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36607
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 36608
 __ZN4mbed10TimerEventD2Ev($2); //@line 36609
 if (!___async) {
  ___async_unwind = 0; //@line 36612
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 113; //@line 36614
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $4; //@line 36616
 sp = STACKTOP; //@line 36617
 return;
}
function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) {
  $$0 = 0; //@line 10161
 } else {
  $3 = Math_imul($1, $0) | 0; //@line 10163
  if (($1 | $0) >>> 0 > 65535) {
   $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; //@line 10170
  } else {
   $$0 = $3; //@line 10172
  }
 }
 $8 = _malloc($$0) | 0; //@line 10175
 if (!$8) {
  return $8 | 0; //@line 10178
 }
 if (!(HEAP32[$8 + -4 >> 2] & 3)) {
  return $8 | 0; //@line 10185
 }
 _memset($8 | 0, 0, $$0 | 0) | 0; //@line 10187
 return $8 | 0; //@line 10188
}
function _ticker_set_handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4533
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 4534
 _initialize($0); //@line 4535
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 696; //@line 4538
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4540
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 4542
  sp = STACKTOP; //@line 4543
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4546
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = $1; //@line 4549
  return;
 }
}
function _mbed_die__async_cb_141($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 31222
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31224
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 31226
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 31227
 _wait_ms(150); //@line 31228
 if (!___async) {
  ___async_unwind = 0; //@line 31231
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 716; //@line 31233
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 31235
 sp = STACKTOP; //@line 31236
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17470
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 17479
 _mbed_assert_internal(12851, 12860, 141); //@line 17480
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 385; //@line 17483
  sp = STACKTOP; //@line 17484
  return;
 }
 ___async_unwind = 0; //@line 17487
 HEAP32[$ReallocAsyncCtx3 >> 2] = 385; //@line 17488
 sp = STACKTOP; //@line 17489
 return;
}
function __ZN12LoRaWANStack8shutdownEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10722
 HEAP32[$0 + 1876 >> 2] = 7; //@line 10724
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10725
 $2 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 10726
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 340; //@line 10729
  sp = STACKTOP; //@line 10730
  return 0; //@line 10731
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10733
  return $2 | 0; //@line 10734
 }
 return 0; //@line 10736
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 30852
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30854
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 30856
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 30857
 _wait_ms(150); //@line 30858
 if (!___async) {
  ___async_unwind = 0; //@line 30861
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 715; //@line 30863
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 30865
 sp = STACKTOP; //@line 30866
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_276($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 13023
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(4) | 0; //@line 13024
 _mbed_assert_internal(14513, 11935, 694); //@line 13025
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 223; //@line 13028
  sp = STACKTOP; //@line 13029
  return;
 }
 ___async_unwind = 0; //@line 13032
 HEAP32[$ReallocAsyncCtx14 >> 2] = 223; //@line 13033
 sp = STACKTOP; //@line 13034
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_334($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 22713
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(4) | 0; //@line 22714
 _mbed_assert_internal(14513, 11935, 766); //@line 22715
 if (___async) {
  HEAP32[$ReallocAsyncCtx16 >> 2] = 196; //@line 22718
  sp = STACKTOP; //@line 22719
  return;
 }
 ___async_unwind = 0; //@line 22722
 HEAP32[$ReallocAsyncCtx16 >> 2] = 196; //@line 22723
 sp = STACKTOP; //@line 22724
 return;
}
function ___fflush_unlocked__async_cb_405($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28665
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28667
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28669
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28671
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 28673
 HEAP32[$4 >> 2] = 0; //@line 28674
 HEAP32[$6 >> 2] = 0; //@line 28675
 HEAP32[$8 >> 2] = 0; //@line 28676
 HEAP32[$10 >> 2] = 0; //@line 28677
 HEAP32[___async_retval >> 2] = 0; //@line 28679
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23237
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23239
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 23240
 __ZN4mbed10TimerEventD2Ev($2); //@line 23241
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 164; //@line 23244
  sp = STACKTOP; //@line 23245
  return;
 }
 ___async_unwind = 0; //@line 23248
 HEAP32[$ReallocAsyncCtx2 >> 2] = 164; //@line 23249
 sp = STACKTOP; //@line 23250
 return;
}
function __ZN4mbed6TickerD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 36366
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36368
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 36369
 __ZN4mbed10TimerEventD2Ev($2); //@line 36370
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 737; //@line 36373
  sp = STACKTOP; //@line 36374
  return;
 }
 ___async_unwind = 0; //@line 36377
 HEAP32[$ReallocAsyncCtx2 >> 2] = 737; //@line 36378
 sp = STACKTOP; //@line 36379
 return;
}
function __ZN4mbed6Ticker7handlerEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6266
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 6268
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 >> 2] | 0; //@line 6274
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6275
 FUNCTION_TABLE_vi[$5 & 1023]($0 + 40 | 0); //@line 6276
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 740; //@line 6279
  sp = STACKTOP; //@line 6280
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6283
 return;
}
function __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 | 0) != 0 & $3 << 24 >> 24 != 0)) {
  return;
 }
 $wide$trip$count = $3 & 255; //@line 26295
 $indvars$iv = 0; //@line 26296
 do {
  HEAP16[$1 + ($indvars$iv << 1) >> 1] = HEAP16[$2 + ($indvars$iv << 1) >> 1] | 0; //@line 26301
  $indvars$iv = $indvars$iv + 1 | 0; //@line 26302
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 return;
}
function dynCall_viiiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 a15 = a15 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0, a15 | 0); //@line 38168
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_504($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 36950
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36952
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 36954
 __ZN4mbed11InterruptInD2Ev($2 + 340 | 0); //@line 36955
 if (!___async) {
  ___async_unwind = 0; //@line 36958
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 121; //@line 36960
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 36962
 sp = STACKTOP; //@line 36963
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_503($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 36931
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36933
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 36935
 __ZN4mbed11InterruptInD2Ev($2 + 268 | 0); //@line 36936
 if (!___async) {
  ___async_unwind = 0; //@line 36939
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 122; //@line 36941
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 36943
 sp = STACKTOP; //@line 36944
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_502($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 36912
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36914
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 36916
 __ZN4mbed11InterruptInD2Ev($2 + 196 | 0); //@line 36917
 if (!___async) {
  ___async_unwind = 0; //@line 36920
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 123; //@line 36922
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 36924
 sp = STACKTOP; //@line 36925
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_501($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 36893
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36895
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 36897
 __ZN4mbed11InterruptInD2Ev($2 + 124 | 0); //@line 36898
 if (!___async) {
  ___async_unwind = 0; //@line 36901
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 124; //@line 36903
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 36905
 sp = STACKTOP; //@line 36906
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_495($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 36683
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36685
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 36687
 __ZN4mbed11InterruptInD2Ev($2 + 412 | 0); //@line 36688
 if (!___async) {
  ___async_unwind = 0; //@line 36691
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 120; //@line 36693
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 36695
 sp = STACKTOP; //@line 36696
 return;
}
function _gcm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2440
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2441
 $3 = _mbedtls_gcm_setkey($0, 2, $1, $2) | 0; //@line 2442
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 682; //@line 2445
  sp = STACKTOP; //@line 2446
  return 0; //@line 2447
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2449
  return $3 | 0; //@line 2450
 }
 return 0; //@line 2452
}
function _ccm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2392
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2393
 $3 = _mbedtls_ccm_setkey($0, 2, $1, $2) | 0; //@line 2394
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 680; //@line 2397
  sp = STACKTOP; //@line 2398
  return 0; //@line 2399
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2401
  return $3 | 0; //@line 2402
 }
 return 0; //@line 2404
}
function __ZN4mbed11InterruptInC2E7PinName($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 668; //@line 3760
 $2 = $0 + 4 | 0; //@line 3761
 $3 = $0 + 28 | 0; //@line 3762
 $4 = $0; //@line 3763
 dest = $2; //@line 3764
 stop = dest + 68 | 0; //@line 3764
 do {
  HEAP32[dest >> 2] = 0; //@line 3764
  dest = dest + 4 | 0; //@line 3764
 } while ((dest | 0) < (stop | 0));
 _gpio_irq_init($3, $1, 21, $4) | 0; //@line 3765
 _gpio_init_in($2, $1); //@line 3766
 return;
}
function _vsprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14279
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14280
 $3 = _vsnprintf($0, 2147483647, $1, $2) | 0; //@line 14281
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 779; //@line 14284
  sp = STACKTOP; //@line 14285
  return 0; //@line 14286
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14288
  return $3 | 0; //@line 14289
 }
 return 0; //@line 14291
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6979
 $2 = HEAP32[$0 >> 2] | 0; //@line 6980
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6981
 FUNCTION_TABLE_vi[$2 & 1023]($1); //@line 6982
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 766; //@line 6985
  sp = STACKTOP; //@line 6986
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6989
  return;
 }
}
function _serial_putc__async_cb_21($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17597
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17599
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 17600
 _fflush($2) | 0; //@line 17601
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 735; //@line 17604
  sp = STACKTOP; //@line 17605
  return;
 }
 ___async_unwind = 0; //@line 17608
 HEAP32[$ReallocAsyncCtx >> 2] = 735; //@line 17609
 sp = STACKTOP; //@line 17610
 return;
}
function _putchar($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14356
 $1 = HEAP32[2570] | 0; //@line 14357
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14358
 $2 = _fputc($0, $1) | 0; //@line 14359
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 781; //@line 14362
  sp = STACKTOP; //@line 14363
  return 0; //@line 14364
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14366
  return $2 | 0; //@line 14367
 }
 return 0; //@line 14369
}
function _main__async_cb_160($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 32499
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32501
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 32502
 __ZN6events10EventQueue8dispatchEi(23e3, -1); //@line 32503
 if (!___async) {
  ___async_unwind = 0; //@line 32506
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 757; //@line 32508
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 32510
 sp = STACKTOP; //@line 32511
 return;
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_516($0) {
 $0 = $0 | 0;
 var $15 = 0, $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37489
 HEAP32[$4 + 364 >> 2] = 2; //@line 37491
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 37499
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 37504
 $15 = $4 + 944 | 0; //@line 37505
 HEAP8[$15 >> 0] = HEAP8[$15 >> 0] | 32; //@line 37508
 return;
}
function __ZN4mbed10TimerEventD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4292
 HEAP32[$0 >> 2] = 704; //@line 4293
 $2 = HEAP32[$0 + 24 >> 2] | 0; //@line 4295
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4297
 _ticker_remove_event($2, $0 + 8 | 0); //@line 4298
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 172; //@line 4301
  sp = STACKTOP; //@line 4302
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4305
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10416
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10418
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 10419
 __ZN4mbed10TimerEventD2Ev($2); //@line 10420
 if (!___async) {
  ___async_unwind = 0; //@line 10423
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 166; //@line 10425
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 10427
 sp = STACKTOP; //@line 10428
 return;
}
function __ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb_303($0) {
 $0 = $0 | 0;
 var $$011 = 0;
 switch (HEAP32[___async_retval >> 2] | 0) {
 case 0:
  {
   $$011 = 3; //@line 14294
   break;
  }
 case -1004:
  {
   $$011 = 2; //@line 14298
   break;
  }
 case -1005:
  {
   $$011 = 1; //@line 14302
   break;
  }
 case -1006:
  {
   $$011 = 0; //@line 14306
   break;
  }
 default:
  {
   $$011 = 0; //@line 14310
  }
 }
 HEAP8[___async_retval >> 0] = $$011; //@line 14314
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 34105
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34107
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 34108
 __ZN4mbed10TimerEventD2Ev($2); //@line 34109
 if (!___async) {
  ___async_unwind = 0; //@line 34112
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 739; //@line 34114
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 34116
 sp = STACKTOP; //@line 34117
 return;
}
function dynCall_viiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0); //@line 38161
}
function _emscripten_async_resume() {
 ___async = 0; //@line 37880
 ___async_unwind = 1; //@line 37881
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 37887
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 37891
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 37895
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 37897
 }
}
function _rand() {
 var $0 = 0, $10 = 0, $14 = 0, $6 = 0, $8 = 0, $9 = 0;
 $0 = 20264; //@line 14309
 $6 = ___muldi3(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, 1284865837, 1481765933) | 0; //@line 14315
 $8 = _i64Add($6 | 0, tempRet0 | 0, 1, 0) | 0; //@line 14317
 $9 = tempRet0; //@line 14318
 $10 = 20264; //@line 14319
 HEAP32[$10 >> 2] = $8; //@line 14321
 HEAP32[$10 + 4 >> 2] = $9; //@line 14324
 $14 = _bitshift64Lshr($8 | 0, $9 | 0, 33) | 0; //@line 14325
 return $14 | 0; //@line 14327
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10193
 STACKTOP = STACKTOP + 16 | 0; //@line 10194
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10194
 $vararg_buffer = sp; //@line 10195
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 10199
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 10201
 STACKTOP = sp; //@line 10202
 return $5 | 0; //@line 10202
}
function __ZN16SX1276_LoRaRadioD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2672
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2673
 __ZN16SX1276_LoRaRadioD2Ev($0); //@line 2674
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 126; //@line 2677
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2679
  sp = STACKTOP; //@line 2680
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2683
  __ZdlPv($0); //@line 2684
  return;
 }
}
function __ZN4mbed10TimerEvent3irqEj($0) {
 $0 = $0 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4341
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 4346
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4347
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 4348
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 174; //@line 4351
  sp = STACKTOP; //@line 4352
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4355
  return;
 }
}
function __ZN7LoRaPHY18verify_rx_datarateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink5 = 0, $$sink6 = 0, $7 = 0;
 if (!(HEAP8[$0 + 132 >> 0] & 2)) {
  $7 = HEAP8[$0 + 28 >> 0] | 0; //@line 26549
  $$sink5 = $7; //@line 26550
  $$sink6 = $7; //@line 26550
 } else {
  $$sink5 = HEAP8[$0 + 28 >> 0] | 0; //@line 26556
  $$sink6 = HEAP8[$0 + 35 >> 0] | 0; //@line 26556
 }
 return ($$sink6 << 24 >> 24 <= $1 << 24 >> 24 ? $$sink5 << 24 >> 24 >= $1 << 24 >> 24 : 0) | 0; //@line 26561
}
function __ZN4mbed5TimerC2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10385
 $6 = ___async_retval; //@line 10387
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 10392
 $12 = HEAP32[$0 + 4 >> 2] | 0; //@line 10393
 HEAP32[$12 >> 2] = HEAP32[$6 >> 2]; //@line 10395
 HEAP32[$12 + 4 >> 2] = $11; //@line 10398
 $16 = $4; //@line 10399
 HEAP32[$16 >> 2] = 0; //@line 10401
 HEAP32[$16 + 4 >> 2] = 0; //@line 10404
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6354
 $1 = HEAP32[$0 >> 2] | 0; //@line 6355
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6356
 FUNCTION_TABLE_v[$1 & 15](); //@line 6357
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 743; //@line 6360
  sp = STACKTOP; //@line 6361
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6364
  return;
 }
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_491($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36576
 if (HEAP8[$2 + 373 >> 0] | 0) {
  HEAP8[$2 + 377 >> 0] = 1; //@line 36582
  $7 = $2 + 968 | 0; //@line 36583
  HEAP32[$7 >> 2] = HEAP32[$7 >> 2] & -5; //@line 36586
 }
 if ((HEAP32[$2 + 360 >> 2] | 0) != 2) {
  return;
 }
 $13 = $2 + 944 | 0; //@line 36594
 HEAP8[$13 >> 0] = HEAP8[$13 >> 0] | 32; //@line 36597
 return;
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6038
 $2 = HEAP32[5728] | 0; //@line 6039
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6040
 FUNCTION_TABLE_vii[$2 & 31]($0, $1); //@line 6041
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 733; //@line 6044
  sp = STACKTOP; //@line 6045
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6048
  return;
 }
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_270($0) {
 $0 = $0 | 0;
 var $12 = 0, $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12820
 HEAP32[$4 + 364 >> 2] = 2; //@line 12822
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 12826
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 12830
 $12 = $4 + 944 | 0; //@line 12831
 HEAP8[$12 >> 0] = HEAP8[$12 >> 0] | 32; //@line 12834
 return;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 37822
 STACKTOP = STACKTOP + 16 | 0; //@line 37823
 $rem = __stackBase__ | 0; //@line 37824
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 37825
 STACKTOP = __stackBase__; //@line 37826
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 37827
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 37592
 if ((ret | 0) < 8) return ret | 0; //@line 37593
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 37594
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 37595
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 37596
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 37597
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 37598
}
function _gcm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2467
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2468
 _mbedtls_gcm_free($0); //@line 2469
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 683; //@line 2472
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2474
  sp = STACKTOP; //@line 2475
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2478
  _free($0); //@line 2479
  return;
 }
}
function _ccm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2419
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2420
 _mbedtls_ccm_free($0); //@line 2421
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 681; //@line 2424
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2426
  sp = STACKTOP; //@line 2427
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2430
  _free($0); //@line 2431
  return;
 }
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 14654
 STACKTOP = STACKTOP + 16 | 0; //@line 14655
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14655
 if (!(_pthread_once(23832, 8) | 0)) {
  $3 = _pthread_getspecific(HEAP32[5959] | 0) | 0; //@line 14661
  STACKTOP = sp; //@line 14662
  return $3 | 0; //@line 14662
 } else {
  _abort_message(18642, sp); //@line 14664
 }
 return 0; //@line 14667
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29403
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29405
 $6 = $2 + 1928 | 0; //@line 29408
 HEAP32[$6 >> 2] = HEAP32[___async_retval >> 2]; //@line 29409
 __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($2 + 1336 | 0, $4); //@line 29411
 HEAP32[___async_retval >> 2] = HEAP32[$6 >> 2]; //@line 29414
 return;
}
function __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = -1003; //@line 5983
 } else {
  if (!(HEAP32[$1 + 12 >> 2] | 0)) {
   $$0 = -1003; //@line 5989
  } else {
   __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1); //@line 5992
   $$0 = 0; //@line 5993
  }
 }
 return $$0 | 0; //@line 5996
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 14822
 }
 return;
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2831
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2832
 __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0); //@line 2833
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 130; //@line 2836
  sp = STACKTOP; //@line 2837
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2840
  return;
 }
}
function __ZL25default_terminate_handlerv__async_cb_342($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22950
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22952
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22954
 HEAP32[$2 >> 2] = 18503; //@line 22955
 HEAP32[$2 + 4 >> 2] = $4; //@line 22957
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 22959
 _abort_message(18367, $2); //@line 22960
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 14238
 $6 = HEAP32[$5 >> 2] | 0; //@line 14239
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 14240
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 14242
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 14244
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 14247
 return $2 | 0; //@line 14248
}
function __ZN6events10EventQueueC2EjPh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 184 | 0; //@line 4365
 HEAP32[$3 >> 2] = 0; //@line 4366
 HEAP32[$3 + 4 >> 2] = 0; //@line 4366
 HEAP32[$3 + 8 >> 2] = 0; //@line 4366
 HEAP32[$3 + 12 >> 2] = 0; //@line 4366
 if (!$2) {
  _equeue_create($0, $1) | 0; //@line 4369
  return;
 } else {
  _equeue_create_inplace($0, $1, $2) | 0; //@line 4372
  return;
 }
}
function __ZN6events10EventQueue8dispatchEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4380
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4381
 _equeue_dispatch($0, $1); //@line 4382
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 175; //@line 4385
  sp = STACKTOP; //@line 4386
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4389
  return;
 }
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26103
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26105
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 26106
 _fputc(10, $2) | 0; //@line 26107
 if (!___async) {
  ___async_unwind = 0; //@line 26110
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 788; //@line 26112
 sp = STACKTOP; //@line 26113
 return;
}
function __ZN6events10EventQueue6cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4411
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4412
 _equeue_cancel($0, $1); //@line 4413
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 176; //@line 4416
  sp = STACKTOP; //@line 4417
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4420
  return;
 }
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_268($0) {
 $0 = $0 | 0;
 var $2 = 0, $9 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12748
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 12752
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 12756
 $9 = $2 + 944 | 0; //@line 12757
 HEAP8[$9 >> 0] = HEAP8[$9 >> 0] | 32; //@line 12760
 return;
}
function __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 880; //@line 25872
 HEAP32[$0 + 4 >> 2] = 0; //@line 25874
 HEAP32[$0 + 8 >> 2] = $1; //@line 25876
 dest = $0 + 12 | 0; //@line 25878
 stop = dest + 124 | 0; //@line 25878
 do {
  HEAP32[dest >> 2] = 0; //@line 25878
  dest = dest + 4 | 0; //@line 25878
 } while ((dest | 0) < (stop | 0));
 return;
}
function _handle_lora_downlink__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32875
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32879
 _memcpy($2 + 788 | 0, HEAP32[$0 + 8 >> 2] | 0, $6 | 0) | 0; //@line 32881
 HEAP8[$2 + 782 >> 0] = $6; //@line 32884
 HEAP8[$2 + 781 >> 0] = -35; //@line 32886
 HEAP8[$2 + 780 >> 0] = -5; //@line 32888
 HEAP8[$2 + 783 >> 0] = 1; //@line 32890
 return;
}
function _add_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$09 = 0, $3 = 0, $5 = 0, $7 = 0;
 $3 = $1 - $2 | 0; //@line 1941
 if (!$3) {
  return;
 }
 $5 = $3 & 255; //@line 1946
 $$09 = 0; //@line 1947
 $7 = 0; //@line 1947
 do {
  HEAP8[$0 + ($7 + $2) >> 0] = $5; //@line 1951
  $$09 = $$09 + 1 << 24 >> 24; //@line 1952
  $7 = $$09 & 255; //@line 1953
 } while ($3 >>> 0 > $7 >>> 0);
 return;
}
function __ZN4mbed5Timer5startEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12296
 $6 = ___async_retval; //@line 12298
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 12303
 $13 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 12305
 HEAP32[$13 >> 2] = HEAP32[$6 >> 2]; //@line 12307
 HEAP32[$13 + 4 >> 2] = $11; //@line 12310
 HEAP32[$4 >> 2] = 1; //@line 12311
 return;
}
function _gpio_irq_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0;
 if (($1 | 0) == -1) {
  $$0 = -1; //@line 6061
  return $$0 | 0; //@line 6062
 }
 HEAP32[5728] = $2; //@line 6064
 HEAP32[$0 >> 2] = $1; //@line 6065
 HEAP32[$0 + 4 >> 2] = $1; //@line 6067
 _emscripten_asm_const_iii(9, $3 | 0, $1 | 0) | 0; //@line 6068
 $$0 = 0; //@line 6069
 return $$0 | 0; //@line 6070
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34032
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 34043
  $$0 = 1; //@line 34044
 } else {
  $$0 = 0; //@line 34046
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 34050
 return;
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31520
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 31523
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 31528
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 31531
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 15416
 STACKTOP = STACKTOP + 16 | 0; //@line 15417
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15417
 _free($0); //@line 15419
 if (!(_pthread_setspecific(HEAP32[5959] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 15424
  return;
 } else {
  _abort_message(18741, sp); //@line 15426
 }
}
function __ZN16LoRaWANInterface7receiveEhPhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0;
 if (($2 | 0) == 0 | $3 << 16 >> 16 == 0) {
  $$0 = -1003; //@line 5967
  return $$0 | 0; //@line 5968
 }
 $$0 = __ZN12LoRaWANStack9handle_rxEhPhth(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1, $2, $3, $4 & 255) | 0; //@line 5973
 return $$0 | 0; //@line 5974
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 6101
 HEAP32[$0 >> 2] = $1; //@line 6102
 HEAP32[5729] = 1; //@line 6103
 $4 = $0; //@line 6104
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 6109
 $10 = 22920; //@line 6110
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 6112
 HEAP32[$10 + 4 >> 2] = $9; //@line 6115
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 14898
 }
 return;
}
function __ZN11LoRaMacMcps18reset_confirmationEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 36 | 0; //@line 22653
 HEAP32[$1 >> 2] = 0; //@line 22654
 HEAP32[$1 + 4 >> 2] = 0; //@line 22654
 HEAP32[$1 + 8 >> 2] = 0; //@line 22654
 HEAP32[$1 + 12 >> 2] = 0; //@line 22654
 HEAP32[$1 + 16 >> 2] = 0; //@line 22654
 HEAP32[$1 + 20 >> 2] = 0; //@line 22654
 HEAP32[$0 + 40 >> 2] = 1; //@line 22656
 return;
}
function _equeue_sema_create($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _pthread_mutex_init($0 | 0, 0) | 0; //@line 5633
 if (!$1) {
  $4 = _pthread_cond_init($0 + 28 | 0, 0) | 0; //@line 5637
  if (!$4) {
   HEAP8[$0 + 76 >> 0] = 0; //@line 5641
   $$0 = 0; //@line 5642
  } else {
   $$0 = $4; //@line 5644
  }
 } else {
  $$0 = $1; //@line 5647
 }
 return $$0 | 0; //@line 5649
}
function __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24338
 $7 = __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($2 + 348 | 0, HEAP32[$0 + 8 >> 2] | 0, $2 + 360 | 0) | 0; //@line 24343
 HEAP32[___async_retval >> 2] = $7; //@line 24345
 return;
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6401
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6402
 _emscripten_sleep($0 | 0); //@line 6403
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 744; //@line 6406
  sp = STACKTOP; //@line 6407
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6410
  return;
 }
}
function _equeue_tick() {
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 5596
 STACKTOP = STACKTOP + 16 | 0; //@line 5597
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5597
 $0 = sp; //@line 5598
 _gettimeofday($0 | 0, 0) | 0; //@line 5599
 STACKTOP = sp; //@line 5606
 return ((HEAP32[$0 + 4 >> 2] | 0) / 1e3 | 0) + ((HEAP32[$0 >> 2] | 0) * 1e3 | 0) | 0; //@line 5606
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 15401
 STACKTOP = STACKTOP + 16 | 0; //@line 15402
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15402
 if (!(_pthread_key_create(23836, 797) | 0)) {
  STACKTOP = sp; //@line 15407
  return;
 } else {
  _abort_message(18691, sp); //@line 15409
 }
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 14962
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 14966
  }
 }
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_172($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33114
 HEAP32[$4 + 988 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) | 0; //@line 33118
 HEAP32[___async_retval >> 2] = 0; //@line 33120
 return;
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 37856
 HEAP32[new_frame + 4 >> 2] = sp; //@line 37858
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 37860
 ___async_cur_frame = new_frame; //@line 37861
 return ___async_cur_frame + 8 | 0; //@line 37862
}
function _mbedtls_gcm_free__async_cb($0) {
 $0 = $0 | 0;
 var $$034$i = 0, $$05$i = 0;
 $$034$i = 400; //@line 14662
 $$05$i = HEAP32[$0 + 4 >> 2] | 0; //@line 14662
 while (1) {
  $$034$i = $$034$i + -1 | 0; //@line 14664
  HEAP8[$$05$i >> 0] = 0; //@line 14666
  if (!$$034$i) {
   break;
  } else {
   $$05$i = $$05$i + 1 | 0; //@line 14671
  }
 }
 return;
}
function _mbedtls_aes_free($0) {
 $0 = $0 | 0;
 var $$02$i = 0, $$031$i = 0;
 if (!$0) {
  return;
 }
 $$02$i = $0; //@line 27220
 $$031$i = 280; //@line 27220
 while (1) {
  $$031$i = $$031$i + -1 | 0; //@line 27222
  HEAP8[$$02$i >> 0] = 0; //@line 27224
  if (!$$031$i) {
   break;
  } else {
   $$02$i = $$02$i + 1 | 0; //@line 27229
  }
 }
 return;
}
function __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $8 = 0;
 $1 = $0 + 2 | 0; //@line 20679
 $3 = HEAPU8[$1 >> 0] | 0; //@line 20681
 $8 = HEAPU8[$0 + 3 >> 0] | 0; //@line 20686
 _memcpy($0 + 4 + $3 | 0, $0 + 132 | 0, $8 | 0) | 0; //@line 20687
 HEAP8[$1 >> 0] = $3 + $8; //@line 20690
 return;
}
function b290(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 p14 = p14 | 0;
 nullFunc_viiiiiiiiiiiiiii(0); //@line 496
}
function __ZN16LoRaWANInterface10initializeEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = -1003; //@line 5715
 } else {
  $$0 = __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5719
 }
 return $$0 | 0; //@line 5721
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 7272
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7272
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7272
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 9062
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 9062
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 9062
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 7222
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7222
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7222
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 9728
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 9728
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 9728
 return;
}
function __ZN7LoRaPHY15apply_DR_offsetEaa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $5 = 0;
 $5 = ($1 & 255) - ($2 & 255) | 0; //@line 25593
 if (!($5 & 128)) {
  $$0 = $5 & 255; //@line 25598
  return $$0 | 0; //@line 25599
 }
 $$0 = HEAP8[$0 + 26 >> 0] | 0; //@line 25603
 return $$0 | 0; //@line 25604
}
function _gpio_init_inout($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6024
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6030
 _emscripten_asm_const_iiiiii(8, $0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0; //@line 6031
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34471
 if (!$2) {
  $12 = HEAPU16[HEAP32[$0 + 8 >> 2] >> 1] | 0; //@line 34480
 } else {
  $12 = $2 << 16 >> 16; //@line 34484
 }
 HEAP16[___async_retval >> 1] = $12; //@line 34488
 return;
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 37523
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 37527
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 37530
 return;
}
function b288(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 nullFunc_viiiiiiiiiiiiii(0); //@line 493
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 37845
  return low << bits; //@line 37846
 }
 tempRet0 = low << bits - 32; //@line 37848
 return 0; //@line 37849
}
function __ZN11LoRaMacMlme18reset_confirmationEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 8 | 0; //@line 23494
 HEAP32[$1 >> 2] = 0; //@line 23495
 HEAP32[$1 + 4 >> 2] = 0; //@line 23495
 HEAP32[$1 + 8 >> 2] = 0; //@line 23495
 HEAP32[$1 + 12 >> 2] = 0; //@line 23495
 HEAP32[$0 + 12 >> 2] = 1; //@line 23497
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_moveINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 13868
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 13868
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 13868
 return;
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 37834
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 37835
 }
 tempRet0 = 0; //@line 37837
 return high >>> bits - 32 | 0; //@line 37838
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 3110
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 3110
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 3110
 return;
}
function __ZN7LoRaPHY26get_next_lower_tx_datarateEa($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink = 0;
 $$sink = HEAP8[((HEAP8[$0 + 132 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 26439
 return ($$sink << 24 >> 24 == $1 << 24 >> 24 ? $$sink : ($1 & 255) + 255 & 255) | 0; //@line 26445
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 11742
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11742
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 11742
 return;
}
function _equeue_dispatch__async_cb_105($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28323
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28325
 HEAP8[HEAP32[$0 + 4 >> 2] >> 0] = 1; //@line 28326
 _equeue_mutex_unlock($4); //@line 28327
 HEAP8[$6 >> 0] = 0; //@line 28328
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_479($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35561
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 35563
 HEAP32[$6 + 16 >> 2] = 0; //@line 35565
 return;
}
function _fflush__async_cb_393($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27407
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 27409
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 27412
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_70($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23801
 HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 364 >> 2] = 2; //@line 23803
 HEAP32[___async_retval >> 2] = $6; //@line 23805
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_343($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23037
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23039
 _gpio_irq_set($6 + 28 | 0, 2, 1); //@line 23041
 return;
}
function _mbedtls_aes_crypt_ecb($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (($1 | 0) == 1) {
  _mbedtls_internal_aes_encrypt($0, $2, $3) | 0; //@line 903
 } else {
  _mbedtls_internal_aes_decrypt($0, $2, $3) | 0; //@line 905
 }
 return 0; //@line 907
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_380($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 26401
 __ZN4mbed5TimerD2Ev(HEAP32[$0 + 4 >> 2] | 0); //@line 26402
 HEAP8[___async_retval >> 0] = $6 & 1; //@line 26405
 return;
}
function __GLOBAL__sub_I_main_cpp__async_cb_188($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = 23208; //@line 34120
 stop = dest + 48 | 0; //@line 34120
 do {
  HEAP32[dest >> 2] = 0; //@line 34120
  dest = dest + 4 | 0; //@line 34120
 } while ((dest | 0) < (stop | 0));
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _equeue_post__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 33772
 _equeue_sema_signal((HEAP32[$0 + 4 >> 2] | 0) + 48 | 0); //@line 33774
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 33776
 return;
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 12324
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 12327
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 12330
 return;
}
function _gpio_init_out_ex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6006
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6012
 _emscripten_asm_const_iiii(7, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 6013
 return;
}
function __ZN12LoRaWANStack23set_confirmed_msg_retryEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if ($1 << 24 >> 24 == -1) {
  $$0 = -1003; //@line 9898
 } else {
  HEAP8[$0 + 2284 >> 0] = $1; //@line 9901
  $$0 = 0; //@line 9902
 }
 return $$0 | 0; //@line 9904
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_428($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30760
 HEAP32[___async_retval >> 2] = ($AsyncRetVal | 0) == 0 ? -1016 : $AsyncRetVal; //@line 30764
 return;
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 10337
 } else {
  $$0 = -1; //@line 10339
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 10342
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 38105
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 10900
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 10906
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 10910
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb_351($0) {
 $0 = $0 | 0;
 var $7 = 0;
 $7 = (HEAP32[$0 + 4 >> 2] | 0) + 968 | 0; //@line 23432
 HEAP32[$7 >> 2] = HEAP32[$7 >> 2] | 1; //@line 23435
 HEAP32[___async_retval >> 2] = 0; //@line 23437
 return;
}
function _equeue_break($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 128 | 0; //@line 5038
 _equeue_mutex_lock($1); //@line 5039
 HEAP8[$0 + 8 >> 0] = 1; //@line 5041
 _equeue_mutex_unlock($1); //@line 5042
 _equeue_sema_signal($0 + 48 | 0); //@line 5044
 return;
}
function _mbedtls_cipher_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 1626
 stop = dest + 68 | 0; //@line 1626
 do {
  HEAP32[dest >> 2] = 0; //@line 1626
  dest = dest + 4 | 0; //@line 1626
 } while ((dest | 0) < (stop | 0));
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_58($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23234
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 1; //@line 23237
 HEAP32[___async_retval >> 2] = 0; //@line 23239
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_57($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23221
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 1; //@line 23224
 HEAP32[___async_retval >> 2] = 0; //@line 23226
 return;
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 38154
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 37868
 stackRestore(___async_cur_frame | 0); //@line 37869
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 37870
}
function _mbedtls_ccm_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 1308
 stop = dest + 68 | 0; //@line 1308
 do {
  HEAP32[dest >> 2] = 0; //@line 1308
  dest = dest + 4 | 0; //@line 1308
 } while ((dest | 0) < (stop | 0));
 return;
}
function __Z15decrypt_payloadPKhtS0_jhjPh($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return __Z15encrypt_payloadPKhtS0_jhjPh($0, $1, $2, $3, $4, $5, $6) | 0; //@line 22441
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13295
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 13296
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 13298
 return;
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 35523
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 35524
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 35526
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_434($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31114
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = 6; //@line 31119
 HEAP32[___async_retval >> 2] = $2; //@line 31121
 return;
}
function __ZN7LoRaPHY15get_ack_timeoutEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0;
 $5 = HEAPU16[$0 + 50 >> 1] | 0; //@line 26492
 $6 = HEAPU16[$0 + 52 >> 1] | 0; //@line 26493
 return $5 - $6 + ((_rand() | 0) % ($6 << 1 | 1 | 0) | 0) | 0; //@line 26500
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 13897
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 13897
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 13899
 return $1 | 0; //@line 13900
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 10359
  $$0 = -1; //@line 10360
 } else {
  $$0 = $0; //@line 10362
 }
 return $$0 | 0; //@line 10364
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 5990
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 5996
 _emscripten_asm_const_iii(6, $0 | 0, $1 | 0) | 0; //@line 5997
 return;
}
function _gpio_init_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 5975
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 5981
 _emscripten_asm_const_iii(5, $0 | 0, $1 | 0) | 0; //@line 5982
 return;
}
function _equeue_sema_signal($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 5655
 HEAP8[$0 + 76 >> 0] = 1; //@line 5657
 _pthread_cond_signal($0 + 28 | 0) | 0; //@line 5659
 _pthread_mutex_unlock($0 | 0) | 0; //@line 5660
 return;
}
function __ZN16LoRaWANInterface16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5857
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 37585
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 37586
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 37587
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 38098
}
function __ZN4mbed6Ticker5setupEy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0;
 $4 = ___udivdi3($1 | 0, $2 | 0, 1e3, 0) | 0; //@line 6338
 _emscripten_asm_const_iii(13, $0 + 40 | 0, $4 | 0) | 0; //@line 6340
 return;
}
function __ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack12add_channelsERK16lora_channelplan(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5848
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_212($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 36046
 HEAP8[___async_retval >> 0] = 1; //@line 36049
 return;
}
function _equeue_enqueue__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32835
 _equeue_mutex_unlock(HEAP32[$0 + 4 >> 2] | 0); //@line 32836
 HEAP32[___async_retval >> 2] = $4; //@line 32838
 return;
}
function __ZN16LoRaWANInterface22add_link_check_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 4 >> 0] = 1; //@line 5794
 return __ZN12LoRaWANStack22set_link_check_requestEv(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0) | 0; //@line 5797
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 2691
 ___cxa_begin_catch($0 | 0) | 0; //@line 2692
 _emscripten_alloc_async_context(4, sp) | 0; //@line 2693
 __ZSt9terminatev(); //@line 2694
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 38147
}
function _aes_ctx_alloc() {
 var $$0 = 0, $0 = 0;
 $0 = _calloc(1, 280) | 0; //@line 2526
 if (!$0) {
  $$0 = 0; //@line 2529
 } else {
  _mbedtls_aes_init($0); //@line 2531
  $$0 = $0; //@line 2532
 }
 return $$0 | 0; //@line 2534
}
function ___cxa_guard_acquire($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP8[$0 >> 0] | 0) == 1) {
  $$0 = 0; //@line 16278
 } else {
  HEAP8[$0 >> 0] = 1; //@line 16280
  $$0 = 1; //@line 16281
 }
 return $$0 | 0; //@line 16283
}
function __ZN16LoRaWANInterface25set_confirmed_msg_retriesEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack23set_confirmed_msg_retryEh(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5839
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_92($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = HEAP8[$0 + 4 >> 0] | 0; //@line 25731
 HEAP8[___async_retval >> 0] = 1; //@line 25734
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 38091
}
function _aes_crypt_cbc_wrap($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) | 0; //@line 2503
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_515($0) {
 $0 = $0 | 0;
 var $3 = 0;
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 944 | 0; //@line 37476
 HEAP8[$3 >> 0] = HEAP8[$3 >> 0] | 32; //@line 37479
 return;
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 37577
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 37579
}
function __ZN16LoRaWANInterface12set_datarateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack21set_channel_data_rateEh(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5814
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 38140
}
function __ZN16LoRaWANInterface25disable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, 0) | 0; //@line 5830
}
function __ZN16LoRaWANInterface14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack16remove_a_channelEh(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5874
}
function __ZN7LoRaPHY15get_max_payloadEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return HEAP8[(HEAP32[($2 ? $0 + 104 | 0 : $0 + 96 | 0) >> 2] | 0) + ($1 & 255) >> 0] | 0; //@line 26474
}
function __ZN16LoRaWANInterface24enable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, 1) | 0; //@line 5822
}
function __ZN7LoRaPHY15verify_tx_powerEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP8[$0 + 22 >> 0] | 0) <= $1 << 24 >> 24 ? (HEAP8[$0 + 21 >> 0] | 0) >= $1 << 24 >> 24 : 0) | 0; //@line 26611
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_484($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 36207
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_435($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 6; //@line 31132
 HEAP32[___async_retval >> 2] = -1014; //@line 31134
 return;
}
function __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb_284($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 13285
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 12957
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 12960
 }
 return $$0 | 0; //@line 12962
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_52($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 22640
 return;
}
function __ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = HEAP8[___async_retval >> 0] & 1 ? 3 : 0; //@line 14283
 return;
}
function __ZN7LoRaPHY13mask_bit_testEPKtj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return (1 << ($2 & 15) & (HEAPU16[$1 + ($2 >>> 4 << 1) >> 1] | 0) | 0) != 0 | 0; //@line 25895
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_399($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 27988
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_441($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 31355
 return;
}
function __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb_263($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 12357
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 15](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 38084
}
function __ZN16LoRaWANInterface19remove_channel_planEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack17drop_channel_listEv(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0) | 0; //@line 5865
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 10540
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 10544
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 37814
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_509($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 37178
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_506($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 37106
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_505($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 37098
 return;
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 23494
 return;
}
function b42(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 38277
 return 0; //@line 38277
}
function b41(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 38274
 return 0; //@line 38274
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_79($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 24846
 return;
}
function __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (__ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0) - $1 | 0; //@line 26950
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb_487($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 36409
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 37090
 return;
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 37875
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 37876
}
function _gpio_irq_set($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _emscripten_asm_const_iiii(11, HEAP32[$0 + 4 >> 2] | 0, $1 | 0, $2 | 0) | 0; //@line 6091
 return;
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 7](a1 | 0, a2 | 0, a3 | 0); //@line 38133
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16630
 return;
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb_238($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 10362
 return;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_152($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 31833
 return;
}
function __ZN5Sht31C2E7PinNameS0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _emscripten_asm_const_iiii(14, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 6420
 return;
}
function __ZN12LoRaWANStack22set_link_check_requestEv__async_cb_347($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 23172
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_346($0) {
 $0 = $0 | 0;
 _gpio_irq_set((HEAP32[$0 + 8 >> 2] | 0) + 28 | 0, 2, 0); //@line 23152
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_249($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 11439
 return;
}
function __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 13275
 return;
}
function __ZN7LoRaPHY23get_minimum_tx_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[((HEAP8[$0 + 132 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 26459
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 6999
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 11036
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 11038
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11set_channelEj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 692 >> 2] = HEAP32[$0 + 8 >> 2]; //@line 35664
 return;
}
function __ZN16LoRaWANInterface10disconnectEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack8shutdownEv(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0) | 0; //@line 5787
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 15501
 __ZdlPv($0); //@line 15502
 return;
}
function _aes_crypt_ecb_wrap($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return _mbedtls_aes_crypt_ecb($0, $1, $2, $3) | 0; //@line 2491
}
function __ZN12LoRaWANStack17drop_channel_listEv__async_cb_490($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 36504
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 15184
 __ZdlPv($0); //@line 15185
 return;
}
function _srand($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = 20264; //@line 14298
 HEAP32[$2 >> 2] = $0 + -1; //@line 14300
 HEAP32[$2 + 4 >> 2] = 0; //@line 14303
 return;
}
function __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 26931
 return;
}
function __ZN12LoRaWANStack16remove_a_channelEh__async_cb_511($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 37225
 return;
}
function _gcm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 400) | 0; //@line 2457
 if ($0 | 0) {
  _mbedtls_gcm_init($0); //@line 2460
 }
 return $0 | 0; //@line 2462
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb_62($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 688 >> 0] = 0; //@line 23374
 return;
}
function b39(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 38271
 return 0; //@line 38271
}
function b38(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(6); //@line 38268
 return 0; //@line 38268
}
function b37(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(5); //@line 38265
 return 0; //@line 38265
}
function b36(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 38262
 return 0; //@line 38262
}
function _ccm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 68) | 0; //@line 2409
 if ($0 | 0) {
  _mbedtls_ccm_init($0); //@line 2412
 }
 return $0 | 0; //@line 2414
}
function __ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 24795
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14712
 __ZdlPv($0); //@line 14713
 return;
}
function __ZN12LoRaWANStack17send_frame_to_macEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17283
 return;
}
function _ticker_set_handler__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 2] >> 2] = HEAP32[$0 + 8 >> 2]; //@line 10293
 return;
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 12442
 }
 return;
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 36450
 return;
}
function __ZN7LoRaMac21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17455
 return;
}
function __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 12347
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1e3; //@line 37538
 return;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 31](a1 | 0, a2 | 0) | 0; //@line 38077
}
function __ZN7LoRaMac19remove_channel_planEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16596
 return;
}
function __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 19942
 return;
}
function b286(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 490
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_457($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 33712
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 6374
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed5TimerD2Ev($0) {
 $0 = $0 | 0;
 if (HEAP32[$0 >> 2] | 0) {
  if (HEAP8[$0 + 28 >> 0] | 0) {}
 }
 HEAP32[$0 >> 2] = 0; //@line 4187
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 14909
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_7($0) {
 $0 = $0 | 0;
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 364 >> 2] = 1; //@line 16771
 return;
}
function __ZN16LoRaWANInterface7connectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 29426
 return;
}
function __ZN7LoRaPHY16get_channel_maskEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return HEAP32[($1 ? $0 + 124 | 0 : $0 + 120 | 0) >> 2] | 0; //@line 26511
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 36399
 return;
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[2695] | 0; //@line 15491
 HEAP32[2695] = $0 + 0; //@line 15493
 return $0 | 0; //@line 15495
}
function __ZN12LoRaWANStack8shutdownEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 24785
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_4($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 16586
 return;
}
function __ZN18LoRaWANTimeHandler16get_current_timeEv($0) {
 $0 = $0 | 0;
 return __ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0; //@line 26940
}
function _gpio_irq_free($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_iii(10, HEAP32[$0 + 4 >> 2] | 0, HEAP32[$0 + 8 >> 2] | 0) | 0; //@line 6080
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_489($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 36486
 return;
}
function _mbedtls_cipher_update__async_cb_84($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 25104
 return;
}
function _mbedtls_cipher_setkey__async_cb_45($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 21818
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 31](a1 | 0, a2 | 0); //@line 38126
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_356($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 23696
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_247($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 11358
 return;
}
function _aes_setkey_enc_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_enc($0, $1, $2) | 0; //@line 2512
}
function _aes_setkey_dec_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_dec($0, $1, $2) | 0; //@line 2521
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 22975
 return;
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 10350
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_193($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 34397
 return;
}
function _mbedtls_cipher_update__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 24964
 return;
}
function _mbedtls_cipher_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 21808
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 33718
 return;
}
function b34(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(3); //@line 38259
 return 0; //@line 38259
}
function b33(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 38256
 return 0; //@line 38256
}
function __ZN12LoRaWANStack22set_link_check_requestEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1003; //@line 23160
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_438($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1011; //@line 31164
 return;
}
function __ZN11LoRaMacMlme23activate_mlme_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 23519
 return;
}
function _gcm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16366
 return;
}
function _ccm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 24312
 return;
}
function __ZN16SX1276_LoRaRadio7standbyEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 688 >> 0] = 0; //@line 31541
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1003; //@line 11350
 return;
}
function _mbedtls_ccm_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 32762
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10LoRaMacMib22activate_mib_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 22696
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 37902
}
function __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 4 >> 2] = $1; //@line 25903
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_437($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 31154
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_436($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 31144
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_54($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_199($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = -1015; //@line 34689
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_198($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = -1003; //@line 34679
 return;
}
function __ZN12LoRaWANStack17get_lorawan_stackEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 20272; //@line 27323
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 36494
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 3 >> 0] | 0) != 0 | 0; //@line 22015
}
function __ZN12LoRaWANStack16remove_a_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 37215
 return;
}
function b284(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 487
}
function _fflush__async_cb_394($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 27422
 return;
}
function __ZN7LoRaPHY32is_custom_channel_plan_supportedEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 16 >> 0] | 0) != 0 | 0; //@line 26536
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 12905
}
function _fputc__async_cb_285($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 13308
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _putc__async_cb_205($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 35536
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _sprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 31429
 return;
}
function _putchar__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 10251
 return;
}
function __ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 >> 0] | 0) != 0 | 0; //@line 20714
}
function __ZN7LoRaPHYD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 880; //@line 23567
 HEAP32[$0 + 4 >> 2] = 0; //@line 23569
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 15](a1 | 0) | 0; //@line 38070
}
function _vsprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 229
 return;
}
function _printf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 36067
 return;
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 16620
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_dtorINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 1 >> 0] | 0) != 0 | 0; //@line 20731
}
function __ZN7LoRaMac11schedule_txEv__async_cb_373($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 26048
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_372($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 26036
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEP25loramac_mlme_indication_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function b31(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(15); //@line 38253
 return 0; //@line 38253
}
function __ZN7LoRaPHY21verify_nb_join_trialsEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($1 & 255) > 11 | 0; //@line 26619
}
function __ZN16LoRaWANInterface25remove_link_check_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 4 >> 0] = 0; //@line 5804
 return;
}
function b30(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 38250
 return 0; //@line 38250
}
function __ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 3 >> 0] | 0; //@line 20699
}
function __ZN4mbed11InterruptInD0Ev__async_cb_93($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 25776
 return;
}
function __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 >> 0] = 0; //@line 20705
 return;
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(18794, HEAP32[$0 + 4 >> 2] | 0); //@line 12339
}
function __ZN12LoRaPHYEU868D0Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 26779
 __ZdlPv($0); //@line 26780
 return;
}
function __ZN4mbed6Ticker6detachEv($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_ii(12, $0 + 40 | 0) | 0; //@line 6348
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_302($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_298($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_297($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadioD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 37234
 return;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 1023](a1 | 0); //@line 38119
}
function __ZN7LoRaPHY29get_maximum_frame_counter_gapEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 48 >> 1] | 0; //@line 26482
}
function __ZN5Sht3115readTemperatureEv($0) {
 $0 = $0 | 0;
 return +(+(_emscripten_asm_const_ii(15, $0 | 0) | 0) / 100.0);
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD0Ev__async_cb_239($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 10437
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb_464($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 34126
 return;
}
function __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 1 >> 0] = 0; //@line 20721
 return;
}
function __ZN14LoRaMacCommand20clear_command_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2 >> 0] = 0; //@line 20570
 return;
}
function __ZN14LoRaMacCommand19clear_repeat_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 3 >> 0] = 0; //@line 20672
 return;
}
function b282(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 484
}
function b281(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 481
}
function b280(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(5); //@line 478
}
function b279(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 475
}
function __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 2 >> 0] | 0; //@line 20579
}
function __ZN7LoRaPHY25get_default_rx2_frequencyEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 68 >> 2] | 0; //@line 26417
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_283($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_282($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_281($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_275($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_341($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_340($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_339($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_338($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_delay($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -16 >> 2] = $1; //@line 5582
 return;
}
function __ZN7LoRaPHY24get_default_rx2_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 64 >> 0] | 0; //@line 26425
}
function _equeue_event_dtor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -8 >> 2] = $1; //@line 5591
 return;
}
function __ZN7LoRaPHY23get_default_tx_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 30 >> 0] | 0; //@line 26409
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_64($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18check_rf_frequencyEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1; //@line 2238
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_119($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _aes_ctx_free($0) {
 $0 = $0 | 0;
 _mbedtls_aes_free($0); //@line 2540
 _free($0); //@line 2541
 return;
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_95($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY20get_default_tx_powerEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 23 >> 0] | 0; //@line 26401
}
function __ZN6events10EventQueue14break_dispatchEv($0) {
 $0 = $0 | 0;
 _equeue_break($0); //@line 4397
 return;
}
function __ZN16SX1276_LoRaRadio10get_statusEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 688 >> 0] | 0; //@line 1373
}
function __ZN7LoRaPHY19get_max_nb_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 20 >> 0] | 0; //@line 26519
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY16get_phy_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 112 >> 2] | 0; //@line 26527
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommand23get_mac_commands_bufferEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 20586
}
function b28(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(31); //@line 38247
 return 0; //@line 38247
}
function b27(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(30); //@line 38244
 return 0; //@line 38244
}
function b26(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(29); //@line 38241
 return 0; //@line 38241
}
function b25(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(28); //@line 38238
 return 0; //@line 38238
}
function b24(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(27); //@line 38235
 return 0; //@line 38235
}
function b23(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(26); //@line 38232
 return 0; //@line 38232
}
function b22(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(25); //@line 38229
 return 0; //@line 38229
}
function b21(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(24); //@line 38226
 return 0; //@line 38226
}
function b20(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(23); //@line 38223
 return 0; //@line 38223
}
function b19(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(22); //@line 38220
 return 0; //@line 38220
}
function b18(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(21); //@line 38217
 return 0; //@line 38217
}
function b17(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(20); //@line 38214
 return 0; //@line 38214
}
function b16(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(19); //@line 38211
 return 0; //@line 38211
}
function b15(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(18); //@line 38208
 return 0; //@line 38208
}
function b14(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(17); //@line 38205
 return 0; //@line 38205
}
function _gcm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 17464
 return;
}
function _ccm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 16611
 return;
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 14150
}
function __ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b13(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 38202
 return 0; //@line 38202
}
function _main__async_cb_162($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 32527
 return;
}
function _main__async_cb_161($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 32519
 return;
}
function _equeue_mutex_unlock($0) {
 $0 = $0 | 0;
 _pthread_mutex_unlock($0 | 0) | 0; //@line 5626
 return;
}
function _main__async_cb_164($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 32616
 return;
}
function _equeue_mutex_create($0) {
 $0 = $0 | 0;
 return _pthread_mutex_init($0 | 0, 0) | 0; //@line 5613
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_149($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommandC2Ev($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 260) | 0; //@line 20331
 return;
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 7]() | 0; //@line 38063
}
function _equeue_mutex_lock($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 5619
 return;
}
function __ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb_262($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaWANTimeHandlerC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 26917
 return;
}
function __ZN18LoRaMacChannelPlanC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 19928
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_183($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcps16get_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 36 | 0; //@line 22664
}
function b277(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(7); //@line 472
}
function b276(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(6); //@line 469
}
function b275(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(5); //@line 466
}
function b274(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0); //@line 463
}
function __ZN6events10EventQueue4tickEv($0) {
 $0 = $0 | 0;
 return _equeue_tick() | 0; //@line 4405
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_462($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlme16get_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 8 | 0; //@line 23505
}
function _mbedtls_aes_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 280) | 0; //@line 27209
 return;
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_gcm_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 400) | 0; //@line 3576
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_311($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlme14get_indicationEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 23512
}
function __ZN12LoRaPHYEU868D2Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 26772
 return;
}
function __ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb_94($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_74($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_73($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlmeC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 23481
 return;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 15](); //@line 38112
}
function __ZN11LoRaMacMcps14get_indicationEv($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 22670
}
function __ZN10LoRaMacMibC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 22682
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_287($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_291($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_288($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_123($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 6008
 return;
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 10417
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_195($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_151($0) {
 $0 = $0 | 0;
 return;
}
function b11(p0) {
 p0 = p0 | 0;
 nullFunc_ii(15); //@line 38199
 return 0; //@line 38199
}
function b10(p0) {
 p0 = p0 | 0;
 nullFunc_ii(14); //@line 38196
 return 0; //@line 38196
}
function __ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_465($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_112($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_111($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_110($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_108($0) {
 $0 = $0 | 0;
 return;
}
function b9(p0) {
 p0 = p0 | 0;
 nullFunc_ii(13); //@line 38193
 return 0; //@line 38193
}
function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(12); //@line 38190
 return 0; //@line 38190
}
function b7(p0) {
 p0 = p0 | 0;
 nullFunc_ii(11); //@line 38187
 return 0; //@line 38187
}
function b6(p0) {
 p0 = p0 | 0;
 nullFunc_ii(10); //@line 38184
 return 0; //@line 38184
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_469($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_379($0) {
 $0 = $0 | 0;
 return;
}
function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 38181
 return 0; //@line 38181
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_257($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_37($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_33($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_32($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_31($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_30($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_29($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_28($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_27($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_443($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac18handle_ack_timeoutEv__async_cb_154($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_tx_timeoutEv__async_cb_237($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_rx_timeoutEv__async_cb_510($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_19($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11radio_resetEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_lock() {
 ___lock(23820); //@line 11043
 return 23828; //@line 11044
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_307($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_472($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_10($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_220($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_218($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_214($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac15handle_rx_errorEv__async_cb_488($0) {
 $0 = $0 | 0;
 return;
}
function b272(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(31); //@line 460
}
function b271(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(30); //@line 457
}
function b270(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(29); //@line 454
}
function b269(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(28); //@line 451
}
function b268(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(27); //@line 448
}
function b267(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(26); //@line 445
}
function __ZN7LoRaPHYD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 23576
 return;
}
function __ZN7LoRaMac14handle_tx_doneEv__async_cb_403($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue8dispatchEi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 4313
}
function __ZN16SX1276_LoRaRadio9start_cadEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio5sleepEv__async_cb_156($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcps23activate_mcps_subsystemEv($0) {
 $0 = $0 | 0;
 return;
}
function b266(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 442
}
function _abort_message__async_cb_98($0) {
 $0 = $0 | 0;
 _abort(); //@line 26120
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_375($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue6cancelEi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 38283
}
function __ZN16SX1276_LoRaRadio4sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptInD2Ev__async_cb_235($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_499($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb_145($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 14071
}
function __ZN4mbed7Timeout7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEvent3irqEj__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 14077
}
function __ZN4mbed6Ticker7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_118($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb_354($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb_349($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventC2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0; //@line 38029
}
function __ZN4mbed6TickerD2Ev__async_cb_486($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_255($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_254($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_251($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_250($0) {
 $0 = $0 | 0;
 return;
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 14538
 return;
}
function b3() {
 nullFunc_i(7); //@line 38178
 return 0; //@line 38178
}
function b2() {
 nullFunc_i(6); //@line 38175
 return 0; //@line 38175
}
function b1() {
 nullFunc_i(0); //@line 38172
 return 0; //@line 38172
}
function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0; //@line 38025
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6unlockEv($0) {
 $0 = $0 | 0;
 return;
}
function _ticker_remove_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _handle_interrupt_in__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_unlock() {
 ___unlock(23820); //@line 11049
 return;
}
function __ZN16SX1276_LoRaRadio4lockEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZL12send_messagev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b117(p0) {
 p0 = p0 | 0;
 nullFunc_vi(876); //@line 38499
}
function b116(p0) {
 p0 = p0 | 0;
 nullFunc_vi(875); //@line 38496
}
function b115(p0) {
 p0 = p0 | 0;
 nullFunc_vi(874); //@line 38493
}
function b114(p0) {
 p0 = p0 | 0;
 nullFunc_vi(873); //@line 38490
}
function b113(p0) {
 p0 = p0 | 0;
 nullFunc_vi(872); //@line 38487
}
function b112(p0) {
 p0 = p0 | 0;
 nullFunc_vi(871); //@line 38484
}
function b111(p0) {
 p0 = p0 | 0;
 nullFunc_vi(870); //@line 38481
}
function b110(p0) {
 p0 = p0 | 0;
 nullFunc_vi(869); //@line 38478
}
function b109(p0) {
 p0 = p0 | 0;
 nullFunc_vi(868); //@line 38475
}
function b108(p0) {
 p0 = p0 | 0;
 nullFunc_vi(867); //@line 38472
}
function b107(p0) {
 p0 = p0 | 0;
 nullFunc_vi(866); //@line 38469
}
function b106(p0) {
 p0 = p0 | 0;
 nullFunc_vi(865); //@line 38466
}
function b105(p0) {
 p0 = p0 | 0;
 nullFunc_vi(864); //@line 38463
}
function b104(p0) {
 p0 = p0 | 0;
 nullFunc_vi(863); //@line 38460
}
function b103(p0) {
 p0 = p0 | 0;
 nullFunc_vi(862); //@line 38457
}
function b102(p0) {
 p0 = p0 | 0;
 nullFunc_vi(861); //@line 38454
}
function b101(p0) {
 p0 = p0 | 0;
 nullFunc_vi(860); //@line 38451
}
function b100(p0) {
 p0 = p0 | 0;
 nullFunc_vi(859); //@line 38448
}
function __ZN18LoRaWANTimeHandlerD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaMacChannelPlanD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b99(p0) {
 p0 = p0 | 0;
 nullFunc_vi(858); //@line 38445
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_vi(857); //@line 38442
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_vi(856); //@line 38439
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_vi(855); //@line 38436
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_vi(854); //@line 38433
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_vi(853); //@line 38430
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_vi(852); //@line 38427
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(851); //@line 38424
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(850); //@line 38421
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(849); //@line 38418
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(848); //@line 38415
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(847); //@line 38412
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(846); //@line 38409
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(845); //@line 38406
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(844); //@line 38403
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(843); //@line 38400
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(842); //@line 38397
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(841); //@line 38394
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(840); //@line 38391
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(839); //@line 38388
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(838); //@line 38385
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(837); //@line 38382
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(836); //@line 38379
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(835); //@line 38376
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(834); //@line 38373
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(833); //@line 38370
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(832); //@line 38367
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(831); //@line 38364
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(830); //@line 38361
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(829); //@line 38358
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(828); //@line 38355
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(827); //@line 38352
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(826); //@line 38349
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(825); //@line 38346
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(824); //@line 38343
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(823); //@line 38340
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(822); //@line 38337
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_vi(821); //@line 38334
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_vi(820); //@line 38331
}
function b60(p0) {
 p0 = p0 | 0;
 nullFunc_vi(819); //@line 38328
}
function b59(p0) {
 p0 = p0 | 0;
 nullFunc_vi(818); //@line 38325
}
function b58(p0) {
 p0 = p0 | 0;
 nullFunc_vi(817); //@line 38322
}
function b57(p0) {
 p0 = p0 | 0;
 nullFunc_vi(816); //@line 38319
}
function b56(p0) {
 p0 = p0 | 0;
 nullFunc_vi(815); //@line 38316
}
function b55(p0) {
 p0 = p0 | 0;
 nullFunc_vi(814); //@line 38313
}
function b54(p0) {
 p0 = p0 | 0;
 nullFunc_vi(813); //@line 38310
}
function b264(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1023); //@line 439
}
function b263(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1022); //@line 436
}
function b262(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1021); //@line 433
}
function b261(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1020); //@line 430
}
function b260(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1019); //@line 427
}
function b259(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1018); //@line 424
}
function b258(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1017); //@line 421
}
function b257(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1016); //@line 418
}
function b256(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1015); //@line 415
}
function b255(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1014); //@line 412
}
function b254(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1013); //@line 409
}
function b253(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1012); //@line 406
}
function b252(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1011); //@line 403
}
function b251(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1010); //@line 400
}
function b250(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1009); //@line 397
}
function b249(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1008); //@line 394
}
function b248(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1007); //@line 391
}
function b247(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1006); //@line 388
}
function b246(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1005); //@line 385
}
function b245(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1004); //@line 382
}
function b244(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1003); //@line 379
}
function b243(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1002); //@line 376
}
function b242(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1001); //@line 373
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 10375
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 10692
}
function b241(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1e3); //@line 370
}
function b240(p0) {
 p0 = p0 | 0;
 nullFunc_vi(999); //@line 367
}
function b239(p0) {
 p0 = p0 | 0;
 nullFunc_vi(998); //@line 364
}
function b238(p0) {
 p0 = p0 | 0;
 nullFunc_vi(997); //@line 361
}
function b237(p0) {
 p0 = p0 | 0;
 nullFunc_vi(996); //@line 358
}
function b236(p0) {
 p0 = p0 | 0;
 nullFunc_vi(995); //@line 355
}
function b235(p0) {
 p0 = p0 | 0;
 nullFunc_vi(994); //@line 352
}
function b234(p0) {
 p0 = p0 | 0;
 nullFunc_vi(993); //@line 349
}
function b233(p0) {
 p0 = p0 | 0;
 nullFunc_vi(992); //@line 346
}
function b232(p0) {
 p0 = p0 | 0;
 nullFunc_vi(991); //@line 343
}
function b231(p0) {
 p0 = p0 | 0;
 nullFunc_vi(990); //@line 340
}
function b230(p0) {
 p0 = p0 | 0;
 nullFunc_vi(989); //@line 337
}
function b229(p0) {
 p0 = p0 | 0;
 nullFunc_vi(988); //@line 334
}
function b228(p0) {
 p0 = p0 | 0;
 nullFunc_vi(987); //@line 331
}
function b227(p0) {
 p0 = p0 | 0;
 nullFunc_vi(986); //@line 328
}
function b226(p0) {
 p0 = p0 | 0;
 nullFunc_vi(985); //@line 325
}
function b225(p0) {
 p0 = p0 | 0;
 nullFunc_vi(984); //@line 322
}
function b224(p0) {
 p0 = p0 | 0;
 nullFunc_vi(983); //@line 319
}
function b223(p0) {
 p0 = p0 | 0;
 nullFunc_vi(982); //@line 316
}
function b222(p0) {
 p0 = p0 | 0;
 nullFunc_vi(981); //@line 313
}
function b221(p0) {
 p0 = p0 | 0;
 nullFunc_vi(980); //@line 310
}
function b220(p0) {
 p0 = p0 | 0;
 nullFunc_vi(979); //@line 307
}
function b219(p0) {
 p0 = p0 | 0;
 nullFunc_vi(978); //@line 304
}
function b218(p0) {
 p0 = p0 | 0;
 nullFunc_vi(977); //@line 301
}
function b217(p0) {
 p0 = p0 | 0;
 nullFunc_vi(976); //@line 298
}
function b216(p0) {
 p0 = p0 | 0;
 nullFunc_vi(975); //@line 295
}
function b215(p0) {
 p0 = p0 | 0;
 nullFunc_vi(974); //@line 292
}
function b214(p0) {
 p0 = p0 | 0;
 nullFunc_vi(973); //@line 289
}
function b213(p0) {
 p0 = p0 | 0;
 nullFunc_vi(972); //@line 286
}
function b212(p0) {
 p0 = p0 | 0;
 nullFunc_vi(971); //@line 283
}
function b211(p0) {
 p0 = p0 | 0;
 nullFunc_vi(970); //@line 280
}
function b210(p0) {
 p0 = p0 | 0;
 nullFunc_vi(969); //@line 277
}
function b209(p0) {
 p0 = p0 | 0;
 nullFunc_vi(968); //@line 274
}
function b208(p0) {
 p0 = p0 | 0;
 nullFunc_vi(967); //@line 271
}
function b207(p0) {
 p0 = p0 | 0;
 nullFunc_vi(966); //@line 268
}
function b206(p0) {
 p0 = p0 | 0;
 nullFunc_vi(965); //@line 265
}
function b205(p0) {
 p0 = p0 | 0;
 nullFunc_vi(964); //@line 262
}
function b204(p0) {
 p0 = p0 | 0;
 nullFunc_vi(963); //@line 259
}
function b203(p0) {
 p0 = p0 | 0;
 nullFunc_vi(962); //@line 256
}
function b202(p0) {
 p0 = p0 | 0;
 nullFunc_vi(961); //@line 253
}
function b201(p0) {
 p0 = p0 | 0;
 nullFunc_vi(960); //@line 250
}
function b200(p0) {
 p0 = p0 | 0;
 nullFunc_vi(959); //@line 247
}
function b199(p0) {
 p0 = p0 | 0;
 nullFunc_vi(958); //@line 244
}
function b198(p0) {
 p0 = p0 | 0;
 nullFunc_vi(957); //@line 241
}
function b197(p0) {
 p0 = p0 | 0;
 nullFunc_vi(956); //@line 238
}
function b196(p0) {
 p0 = p0 | 0;
 nullFunc_vi(955); //@line 235
}
function b195(p0) {
 p0 = p0 | 0;
 nullFunc_vi(954); //@line 232
}
function b194(p0) {
 p0 = p0 | 0;
 nullFunc_vi(953); //@line 229
}
function b193(p0) {
 p0 = p0 | 0;
 nullFunc_vi(952); //@line 226
}
function b192(p0) {
 p0 = p0 | 0;
 nullFunc_vi(951); //@line 223
}
function b191(p0) {
 p0 = p0 | 0;
 nullFunc_vi(950); //@line 220
}
function b190(p0) {
 p0 = p0 | 0;
 nullFunc_vi(949); //@line 217
}
function b189(p0) {
 p0 = p0 | 0;
 nullFunc_vi(948); //@line 214
}
function b188(p0) {
 p0 = p0 | 0;
 nullFunc_vi(947); //@line 211
}
function b187(p0) {
 p0 = p0 | 0;
 nullFunc_vi(946); //@line 208
}
function b186(p0) {
 p0 = p0 | 0;
 nullFunc_vi(945); //@line 205
}
function b185(p0) {
 p0 = p0 | 0;
 nullFunc_vi(944); //@line 202
}
function b184(p0) {
 p0 = p0 | 0;
 nullFunc_vi(943); //@line 199
}
function b183(p0) {
 p0 = p0 | 0;
 nullFunc_vi(942); //@line 196
}
function b182(p0) {
 p0 = p0 | 0;
 nullFunc_vi(941); //@line 193
}
function b181(p0) {
 p0 = p0 | 0;
 nullFunc_vi(940); //@line 190
}
function b180(p0) {
 p0 = p0 | 0;
 nullFunc_vi(939); //@line 187
}
function b179(p0) {
 p0 = p0 | 0;
 nullFunc_vi(938); //@line 184
}
function b178(p0) {
 p0 = p0 | 0;
 nullFunc_vi(937); //@line 181
}
function b177(p0) {
 p0 = p0 | 0;
 nullFunc_vi(936); //@line 178
}
function b176(p0) {
 p0 = p0 | 0;
 nullFunc_vi(935); //@line 175
}
function b175(p0) {
 p0 = p0 | 0;
 nullFunc_vi(934); //@line 172
}
function b174(p0) {
 p0 = p0 | 0;
 nullFunc_vi(933); //@line 169
}
function b173(p0) {
 p0 = p0 | 0;
 nullFunc_vi(932); //@line 166
}
function b172(p0) {
 p0 = p0 | 0;
 nullFunc_vi(931); //@line 163
}
function b171(p0) {
 p0 = p0 | 0;
 nullFunc_vi(930); //@line 160
}
function b170(p0) {
 p0 = p0 | 0;
 nullFunc_vi(929); //@line 157
}
function b169(p0) {
 p0 = p0 | 0;
 nullFunc_vi(928); //@line 154
}
function b168(p0) {
 p0 = p0 | 0;
 nullFunc_vi(927); //@line 151
}
function b167(p0) {
 p0 = p0 | 0;
 nullFunc_vi(926); //@line 148
}
function b166(p0) {
 p0 = p0 | 0;
 nullFunc_vi(925); //@line 145
}
function b165(p0) {
 p0 = p0 | 0;
 nullFunc_vi(924); //@line 142
}
function b164(p0) {
 p0 = p0 | 0;
 nullFunc_vi(923); //@line 139
}
function b163(p0) {
 p0 = p0 | 0;
 nullFunc_vi(922); //@line 136
}
function b162(p0) {
 p0 = p0 | 0;
 nullFunc_vi(921); //@line 133
}
function b161(p0) {
 p0 = p0 | 0;
 nullFunc_vi(920); //@line 130
}
function b160(p0) {
 p0 = p0 | 0;
 nullFunc_vi(919); //@line 127
}
function b159(p0) {
 p0 = p0 | 0;
 nullFunc_vi(918); //@line 124
}
function b158(p0) {
 p0 = p0 | 0;
 nullFunc_vi(917); //@line 121
}
function b157(p0) {
 p0 = p0 | 0;
 nullFunc_vi(916); //@line 118
}
function b156(p0) {
 p0 = p0 | 0;
 nullFunc_vi(915); //@line 115
}
function b155(p0) {
 p0 = p0 | 0;
 nullFunc_vi(914); //@line 112
}
function b154(p0) {
 p0 = p0 | 0;
 nullFunc_vi(913); //@line 109
}
function b153(p0) {
 p0 = p0 | 0;
 nullFunc_vi(912); //@line 106
}
function b152(p0) {
 p0 = p0 | 0;
 nullFunc_vi(911); //@line 103
}
function b151(p0) {
 p0 = p0 | 0;
 nullFunc_vi(910); //@line 100
}
function __ZN7LoRaMacD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b53(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 38307
}
function b150(p0) {
 p0 = p0 | 0;
 nullFunc_vi(909); //@line 97
}
function b149(p0) {
 p0 = p0 | 0;
 nullFunc_vi(908); //@line 94
}
function b148(p0) {
 p0 = p0 | 0;
 nullFunc_vi(907); //@line 91
}
function b147(p0) {
 p0 = p0 | 0;
 nullFunc_vi(906); //@line 88
}
function b146(p0) {
 p0 = p0 | 0;
 nullFunc_vi(905); //@line 85
}
function b145(p0) {
 p0 = p0 | 0;
 nullFunc_vi(904); //@line 82
}
function b144(p0) {
 p0 = p0 | 0;
 nullFunc_vi(903); //@line 79
}
function b143(p0) {
 p0 = p0 | 0;
 nullFunc_vi(902); //@line 76
}
function b142(p0) {
 p0 = p0 | 0;
 nullFunc_vi(901); //@line 73
}
function b141(p0) {
 p0 = p0 | 0;
 nullFunc_vi(900); //@line 70
}
function b140(p0) {
 p0 = p0 | 0;
 nullFunc_vi(899); //@line 67
}
function b139(p0) {
 p0 = p0 | 0;
 nullFunc_vi(898); //@line 64
}
function b138(p0) {
 p0 = p0 | 0;
 nullFunc_vi(897); //@line 61
}
function b137(p0) {
 p0 = p0 | 0;
 nullFunc_vi(896); //@line 58
}
function b136(p0) {
 p0 = p0 | 0;
 nullFunc_vi(895); //@line 55
}
function b135(p0) {
 p0 = p0 | 0;
 nullFunc_vi(894); //@line 52
}
function b134(p0) {
 p0 = p0 | 0;
 nullFunc_vi(893); //@line 49
}
function b133(p0) {
 p0 = p0 | 0;
 nullFunc_vi(892); //@line 46
}
function b132(p0) {
 p0 = p0 | 0;
 nullFunc_vi(891); //@line 43
}
function b131(p0) {
 p0 = p0 | 0;
 nullFunc_vi(890); //@line 40
}
function b130(p0) {
 p0 = p0 | 0;
 nullFunc_vi(889); //@line 37
}
function b129(p0) {
 p0 = p0 | 0;
 nullFunc_vi(888); //@line 34
}
function b128(p0) {
 p0 = p0 | 0;
 nullFunc_vi(887); //@line 31
}
function b127(p0) {
 p0 = p0 | 0;
 nullFunc_vi(886); //@line 28
}
function b126(p0) {
 p0 = p0 | 0;
 nullFunc_vi(885); //@line 25
}
function b125(p0) {
 p0 = p0 | 0;
 nullFunc_vi(884); //@line 22
}
function b124(p0) {
 p0 = p0 | 0;
 nullFunc_vi(883); //@line 19
}
function b123(p0) {
 p0 = p0 | 0;
 nullFunc_vi(882); //@line 16
}
function b122(p0) {
 p0 = p0 | 0;
 nullFunc_vi(881); //@line 13
}
function b121(p0) {
 p0 = p0 | 0;
 nullFunc_vi(880); //@line 10
}
function _sleep_manager_unlock_deep_sleep_internal() {
 return;
}
function _initialize__async_cb_244($0) {
 $0 = $0 | 0;
 return;
}
function b120(p0) {
 p0 = p0 | 0;
 nullFunc_vi(879); //@line 7
}
function b119(p0) {
 p0 = p0 | 0;
 nullFunc_vi(878); //@line 4
}
function b118(p0) {
 p0 = p0 | 0;
 nullFunc_vi(877); //@line 1
}
function _us_ticker_set_interrupt($0) {
 $0 = $0 | 0;
 return;
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function __ZN14LoRaMacCommandD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function _sleep_manager_lock_deep_sleep_internal() {
 return;
}
function _us_ticker_get_info() {
 return 10132; //@line 6396
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _get_us_ticker_data() {
 return 10064; //@line 5562
}
function ___errno_location() {
 return 23816; //@line 10369
}
function __ZSt9terminatev__async_cb_187($0) {
 $0 = $0 | 0;
}
function __ZN11LoRaMacMlmeD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcpsD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcpsC2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_release($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10LoRaMacMibD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _pthread_self() {
 return 10412; //@line 10422
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _core_util_critical_section_exit() {
 return;
}
function _us_ticker_read() {
 return 0; //@line 6155
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function _us_ticker_disable_interrupt() {
 return;
}
function _us_ticker_clear_interrupt() {
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function b51() {
 nullFunc_v(15); //@line 38304
}
function b50() {
 nullFunc_v(14); //@line 38301
}
function b49() {
 nullFunc_v(13); //@line 38298
}
function b48() {
 nullFunc_v(12); //@line 38295
}
function b47() {
 nullFunc_v(11); //@line 38292
}
function b46() {
 nullFunc_v(10); //@line 38289
}
function _us_ticker_fire_interrupt() {
 return;
}
function b45() {
 nullFunc_v(9); //@line 38286
}
function b44() {
 nullFunc_v(0); //@line 38280
}
function _us_ticker_init() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1,_ccm_ctx_alloc,_gcm_ctx_alloc,_aes_ctx_alloc,_us_ticker_read,_us_ticker_get_info,b2,b3];
var FUNCTION_TABLE_ii = [b5,__ZN16SX1276_LoRaRadio6randomEv,__ZN16SX1276_LoRaRadio10get_statusEv,__ZN16LoRaWANInterface7connectEv,__ZN16LoRaWANInterface10disconnectEv,__ZN16LoRaWANInterface22add_link_check_requestEv,__ZN16LoRaWANInterface24enable_adaptive_datarateEv,__ZN16LoRaWANInterface25disable_adaptive_datarateEv,__ZN16LoRaWANInterface19remove_channel_planEv,___stdio_close,b6,b7,b8,b9,b10,b11];
var FUNCTION_TABLE_iii = [b13,__ZN16SX1276_LoRaRadio18check_rf_frequencyEj,__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE,__ZN16LoRaWANInterface7connectERK15lorawan_connect,__ZN16LoRaWANInterface12set_datarateEh,__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh,__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan,__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan,__ZN16LoRaWANInterface14remove_channelEh,__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t,__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s,__ZN7LoRaPHY25accept_tx_param_setup_reqEP20tx_param_setup_req_s,__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s,__ZN7LoRaPHY16get_alternate_DREh,__ZN7LoRaPHY14remove_channelEh,__ZN7LoRaPHY16verify_frequencyEj,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25
,b26,b27,b28];
var FUNCTION_TABLE_iiii = [b30,__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa,__ZN7LoRaPHY11add_channelEP16channel_params_th,__ZN7LoRaPHY15apply_DR_offsetEaa,_ccm_aes_setkey_wrap,_gcm_aes_setkey_wrap,_aes_setkey_enc_wrap,_aes_setkey_dec_wrap,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_get_pkcs_padding,b31];
var FUNCTION_TABLE_iiiii = [b33,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj,_aes_crypt_ecb_wrap,b34];
var FUNCTION_TABLE_iiiiii = [b36,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj,__ZN16LoRaWANInterface4sendEhPKhti,__ZN16LoRaWANInterface7receiveEhPhti,__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_,b37,b38,b39];
var FUNCTION_TABLE_iiiiiii = [b41,__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_,_aes_crypt_cbc_wrap,b42];
var FUNCTION_TABLE_v = [b44,___cxa_pure_virtual__wrapper,_us_ticker_init,_us_ticker_disable_interrupt,_us_ticker_clear_interrupt,_us_ticker_fire_interrupt,__ZL25default_terminate_handlerv,__ZL12send_messagev,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b45,b46,b47,b48,b49,b50,b51];
var FUNCTION_TABLE_vi = [b53,__ZN16SX1276_LoRaRadio11radio_resetEv,__ZN16SX1276_LoRaRadio5sleepEv,__ZN16SX1276_LoRaRadio7standbyEv,__ZN16SX1276_LoRaRadio9start_cadEv,__ZN16SX1276_LoRaRadio4lockEv,__ZN16SX1276_LoRaRadio6unlockEv,__ZN16SX1276_LoRaRadioD2Ev,__ZN16SX1276_LoRaRadioD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv,__ZN4mbed11InterruptInD2Ev,__ZN4mbed11InterruptInD0Ev,__ZN4mbed7TimeoutD2Ev,__ZN4mbed7TimeoutD0Ev,__ZN4mbed7Timeout7handlerEv,__ZN4mbed10TimerEventD2Ev,__ZN4mbed10TimerEventD0Ev,__ZN16LoRaWANInterface25remove_link_check_requestEv,__ZN16LoRaWANInterfaceD2Ev,__ZN16LoRaWANInterfaceD0Ev,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv,__ZN4mbed8CallbackIFvPhtsaEE13function_dtorINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPv,__ZN7LoRaPHYD2Ev
,__ZN7LoRaPHYD0Ev,__ZN7LoRaPHY24restore_default_channelsEv,__ZN12LoRaPHYEU868D2Ev,__ZN12LoRaPHYEU868D0Ev,_ccm_ctx_free,_gcm_ctx_free,_aes_ctx_free,_us_ticker_set_interrupt,__ZN4mbed10TimerEvent3irqEj,__ZN4mbed6TickerD2Ev,__ZN4mbed6TickerD0Ev,__ZN4mbed6Ticker7handlerEv,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv,__ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb_62,__ZN16SX1276_LoRaRadio11radio_resetEv__async_cb,__ZN16SX1276_LoRaRadio5sleepEv__async_cb_155,__ZN16SX1276_LoRaRadio5sleepEv__async_cb,__ZN16SX1276_LoRaRadio5sleepEv__async_cb_156,__ZN16SX1276_LoRaRadio7standbyEv__async_cb_147,__ZN16SX1276_LoRaRadio7standbyEv__async_cb_146,__ZN16SX1276_LoRaRadio7standbyEv__async_cb_148
,__ZN16SX1276_LoRaRadio7standbyEv__async_cb,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_120,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_119,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_97,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_96,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_95,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb,__ZN16SX1276_LoRaRadio4sendEPhh__async_cb,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_222,__ZN16SX1276_LoRaRadio11rx_done_irqEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_213,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_214,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_215,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_216,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_217,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_221,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_224,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_220,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_219,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_223,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_218,__ZN16SX1276_LoRaRadio11set_channelEj__async_cb,__ZN16SX1276_LoRaRadio6randomEv__async_cb,__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb_304,__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb,__ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb_348,__ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb
,__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb_364,__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_386,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_385,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_384,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_387,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_383,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_392,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_388,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_389,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_391,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_382,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_390,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_381,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_380,__ZN16SX1276_LoRaRadio9start_cadEv__async_cb,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_185,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_182,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_184,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_186,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_183,__ZN16SX1276_LoRaRadioD2Ev__async_cb,__ZN16SX1276_LoRaRadioD2Ev__async_cb_498,__ZN16SX1276_LoRaRadioD2Ev__async_cb_492,__ZN16SX1276_LoRaRadioD2Ev__async_cb_497,__ZN16SX1276_LoRaRadioD2Ev__async_cb_493,__ZN16SX1276_LoRaRadioD2Ev__async_cb_496,__ZN16SX1276_LoRaRadioD2Ev__async_cb_494
,__ZN16SX1276_LoRaRadioD2Ev__async_cb_495,__ZN16SX1276_LoRaRadioD2Ev__async_cb_504,__ZN16SX1276_LoRaRadioD2Ev__async_cb_503,__ZN16SX1276_LoRaRadioD2Ev__async_cb_502,__ZN16SX1276_LoRaRadioD2Ev__async_cb_501,__ZN16SX1276_LoRaRadioD2Ev__async_cb_500,__ZN16SX1276_LoRaRadioD2Ev__async_cb_499,__ZN16SX1276_LoRaRadioD0Ev__async_cb,__ZN16SX1276_LoRaRadio18set_low_power_modeEv__async_cb,__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb_48,__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_75,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_71,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_72,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_73,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_74,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_13,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_12,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_14,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_11,__ZN16SX1276_LoRaRadio11tx_done_irqEv,__ZN16SX1276_LoRaRadio8transmitEj__async_cb,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_9,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_10,__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb,_handle_lora_downlink__async_cb,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_266
,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_265,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_264,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb,__ZN4mbed11InterruptInD2Ev__async_cb,__ZN4mbed11InterruptInD2Ev__async_cb_235,__ZN4mbed11InterruptInD0Ev__async_cb,__ZN4mbed11InterruptInD0Ev__async_cb_93,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_149,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_343,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_344,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_345,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_346,__ZN4mbed7TimeoutD2Ev__async_cb,__ZN4mbed7TimeoutD2Ev__async_cb_349,__ZN4mbed7TimeoutD0Ev__async_cb,__ZN4mbed7TimeoutD0Ev__async_cb_239,__ZN4mbed7Timeout7handlerEv__async_cb_236,__ZN4mbed7Timeout7handlerEv__async_cb,__ZN4mbed5TimerC2Ev__async_cb,__ZN4mbed5Timer5startEv__async_cb,__ZN4mbed5Timer7read_msEv__async_cb,__ZN4mbed10TimerEventD2Ev__async_cb,__ZN4mbed10TimerEventC2Ev__async_cb,__ZN4mbed10TimerEvent3irqEj__async_cb,__ZN6events10EventQueue8dispatchEi__async_cb,__ZN6events10EventQueue6cancelEi__async_cb,_equeue_post__async_cb,_equeue_enqueue__async_cb
,_equeue_cancel__async_cb,_equeue_dispatch__async_cb,_equeue_dispatch__async_cb_106,_equeue_dispatch__async_cb_104,_equeue_dispatch__async_cb_105,_equeue_dispatch__async_cb_107,__ZN16LoRaWANInterface7connectEv__async_cb,__ZN16LoRaWANInterface4sendEhPKhti__async_cb,__ZN16LoRaWANInterface4sendEhPKhti__async_cb_181,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_378,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_379,__ZN12LoRaWANStackC2Ev__async_cb,__ZN12LoRaWANStackC2Ev__async_cb_352,__ZN12LoRaWANStackC2Ev__async_cb_353,__ZN12LoRaWANStackC2Ev__async_cb_354,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_334,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_341,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_333,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_332,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_337,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_327,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_340,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_328,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_336,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_329,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_339,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_330,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_335
,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_331,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_338,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_297,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_296,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_300,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_293,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_302,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_294,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_299,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_295,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_301,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_298,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_276,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_283,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_280,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_275,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_279,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_274,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_278,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_271,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_282,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_272,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_277,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_273,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_281,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_418
,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_427,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_426,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_425,__ZN12LoRaWANStack18lora_state_machineEv__async_cb,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_433,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_407,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_438,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_428,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_408,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_432,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_409,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_437,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_424,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_423,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_422,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_421,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_420,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_410,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_431,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_411,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_436,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_419,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_417,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_412,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_430,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_413,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_435,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_416,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_414,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_429
,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_415,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_434,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_396,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_397,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_400,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_398,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_399,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_76,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_77,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_80,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_78,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_79,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_65,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_20,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_17,__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_16,__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_15,__ZN12LoRaWANStack17send_frame_to_macEv__async_cb,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_201
,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_203,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_200,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_199,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_198,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_202,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_197,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_196,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_204,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN12LoRaWANStack17get_lorawan_stackEv__async_cb,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_440,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_439,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_441,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_480,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_481,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_482,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_483,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_484,__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb,__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb_487,__ZN12LoRaWANStack17drop_channel_listEv__async_cb,__ZN12LoRaWANStack17drop_channel_listEv__async_cb_490,__ZN12LoRaWANStack16remove_a_channelEh__async_cb,__ZN12LoRaWANStack16remove_a_channelEh__async_cb_511,__ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan__async_cb,__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb
,__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb_238,__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_247,__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_248,__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb,__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_249,__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb,__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb_263,__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb,__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb_284,__ZN12LoRaWANStack22set_link_check_requestEv__async_cb,__ZN12LoRaWANStack22set_link_check_requestEv__async_cb_347,__ZN12LoRaWANStack8shutdownEv__async_cb,__ZN7LoRaMacD2Ev__async_cb_99,__ZN7LoRaMacD2Ev__async_cb,__ZN12radio_eventsD2Ev__async_cb,__ZN12radio_eventsD2Ev__async_cb_113,__ZN12radio_eventsD2Ev__async_cb_114,__ZN12radio_eventsD2Ev__async_cb_115,__ZN12radio_eventsD2Ev__async_cb_116,__ZN12radio_eventsD2Ev__async_cb_117,__ZN12radio_eventsD2Ev__async_cb_118,__ZN14lorawan_timersD2Ev__async_cb,__ZN14lorawan_timersD2Ev__async_cb_142,__ZN14lorawan_timersD2Ev__async_cb_143,__ZN14lorawan_timersD2Ev__async_cb_144,__ZN14lorawan_timersD2Ev__async_cb_145,__ZN7LoRaMac16on_radio_tx_doneEv,__ZN7LoRaMac14handle_tx_doneEv__async_cb,__ZN7LoRaMac14handle_tx_doneEv__async_cb_403,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_471
,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_476,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_470,__ZN7LoRaMac25on_rx_window2_timer_eventEv,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_477,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_478,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_475,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_474,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_473,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_472,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_153,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_152,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_168,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_6,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_8,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_5,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_7,__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_18,__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb,__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_19,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_25,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_38,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_44
,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_33,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_36,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_32,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_31,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_35,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_34,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_30,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_29,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_28,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_41,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_24,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_40,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_23,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_39,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_22,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_43,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_42,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_27,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_26,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_37,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_49,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_50,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_53,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_51,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_52,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb
,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb_81,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb,__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa__async_cb,__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv,__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_466,__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_467,__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_465,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_491,__ZN7LoRaMac17on_radio_rx_errorEv,__ZN7LoRaMac15handle_rx_errorEv__async_cb,__ZN7LoRaMac15handle_rx_errorEv__async_cb_488,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_512,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_514,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_516,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_513,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_515,__ZN7LoRaMac19on_radio_rx_timeoutEv,__ZN7LoRaMac17handle_rx_timeoutEv__async_cb,__ZN7LoRaMac17handle_rx_timeoutEv__async_cb_510,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_256,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_259,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_261,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_258,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_260,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_257,__ZN7LoRaMac19on_radio_tx_timeoutEv
,__ZN7LoRaMac17handle_tx_timeoutEv__async_cb,__ZN7LoRaMac17handle_tx_timeoutEv__async_cb_237,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_267,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_268,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_269,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_270,__ZN7LoRaMac30on_mac_state_check_timer_eventEv,__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb,__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb_262,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_319,__ZN7LoRaMac25on_tx_delayed_timer_eventEv,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_318,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_326,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_317,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_325,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_315,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_324,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_308,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_323,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_309,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_313,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_314,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_312,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_316,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_322,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_321,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_310,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_320
,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_311,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_289,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_292,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_290,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_291,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_288,__ZN7LoRaMac11schedule_txEv__async_cb,__ZN7LoRaMac11schedule_txEv__async_cb_365,__ZN7LoRaMac11schedule_txEv__async_cb_371,__ZN7LoRaMac11schedule_txEv__async_cb_366,__ZN7LoRaMac11schedule_txEv__async_cb_367,__ZN7LoRaMac11schedule_txEv__async_cb_368,__ZN7LoRaMac11schedule_txEv__async_cb_370,__ZN7LoRaMac11schedule_txEv__async_cb_373,__ZN7LoRaMac11schedule_txEv__async_cb_369,__ZN7LoRaMac11schedule_txEv__async_cb_372,__ZN7LoRaMac21send_frame_on_channelEh__async_cb_350,__ZN7LoRaMac21send_frame_on_channelEh__async_cb,__ZN7LoRaMac21send_frame_on_channelEh__async_cb_351,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_103,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_101,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_102,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb,__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb,__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb_94,__ZN7LoRaMac18handle_ack_timeoutEv__async_cb,__ZN7LoRaMac18handle_ack_timeoutEv__async_cb_154,__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb,__ZN7LoRaMac25on_rx_window1_timer_eventEv
,__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_150,__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_151,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_122,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_125,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_124,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_121,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_123,__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb,__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_194,__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_195,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_178,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_179,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_180,__ZN7LoRaMac34handle_mac_state_check_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_177,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb,__ZN7LoRaMac29handle_delayed_tx_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_176,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_169,__ZN7LoRaMac22handle_rx1_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_175,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_170,__ZN7LoRaMac22handle_rx2_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_174,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_171,__ZN7LoRaMac18handle_ack_timeoutEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_173,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_172,__ZN7LoRaMac10disconnectEv__async_cb_234
,__ZN7LoRaMac10disconnectEv__async_cb_233,__ZN7LoRaMac10disconnectEv__async_cb_232,__ZN7LoRaMac10disconnectEv__async_cb_231,__ZN7LoRaMac10disconnectEv__async_cb_230,__ZN7LoRaMac10disconnectEv__async_cb,__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb_206,__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb,__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb,__ZN7LoRaMac19remove_channel_planEv__async_cb,__ZN7LoRaMac21remove_single_channelEh__async_cb,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_55,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_56,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_61,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_60,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_58,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_59,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_57,__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb,__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_46,__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_47,__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t__async_cb,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_67,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_68,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_69,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_70,__ZN7LoRaMac14handle_tx_doneEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_444
,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_445,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_446,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_447,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_448,__ZN7LoRaMac15handle_rx_errorEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_449,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_450,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_451,__ZN7LoRaMac17handle_tx_timeoutEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_452,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_453,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_454,__ZN7LoRaMac17handle_rx_timeoutEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_455,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_456,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_457,__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_485,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_489,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_226,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_227,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_228,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_229,__Z11compute_micPKhtS0_jhjPj__async_cb_192,__Z11compute_micPKhtS0_jhjPj__async_cb_191,__Z11compute_micPKhtS0_jhjPj__async_cb_189,__Z11compute_micPKhtS0_jhjPj__async_cb
,__Z11compute_micPKhtS0_jhjPj__async_cb_190,__Z11compute_micPKhtS0_jhjPj__async_cb_193,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_3,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_2,__Z22compute_join_frame_micPKhtS0_Pj__async_cb,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_1,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_4,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_509,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_508,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_506,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_507,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_505,__ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft__async_cb,__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb,__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb_303,__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb,__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb_100,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_85,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_86,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_87,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_88,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_89,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_90,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_91,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_92,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_207,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_208
,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_209,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_210,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_211,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_212,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb,__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s__async_cb,__ZN7LoRaPHY11add_channelEP16channel_params_th__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_63,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_64,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_442,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_443,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_468,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_469,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_286,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_287,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_305,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_306,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_307,__ZN7LoRaPHY13get_radio_rngEv__async_cb,__ZN7LoRaPHY13get_radio_rngEv__async_cb_355,__ZN7LoRaPHY13get_radio_rngEv__async_cb_356,__ZN7LoRaPHY11handle_sendEPhh__async_cb_376,__ZN7LoRaPHY11handle_sendEPhh__async_cb,__ZN7LoRaPHY11handle_sendEPhh__async_cb_374,__ZN7LoRaPHY11handle_sendEPhh__async_cb_375
,__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_479,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_459,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_461,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_460,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_462,__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb,_mbedtls_ccm_setkey__async_cb_167,_mbedtls_ccm_setkey__async_cb_166,_mbedtls_ccm_setkey__async_cb,_mbedtls_ccm_free__async_cb,_mbedtls_cipher_free__async_cb,_mbedtls_cipher_setup__async_cb,_mbedtls_cipher_setkey__async_cb,_mbedtls_cipher_setkey__async_cb_45,_mbedtls_cipher_update__async_cb,_mbedtls_cipher_update__async_cb_84,_mbedtls_cipher_update__async_cb_82,_mbedtls_cipher_update__async_cb_83,_ccm_aes_setkey_wrap__async_cb,_ccm_ctx_free__async_cb,_gcm_aes_setkey_wrap__async_cb,_gcm_ctx_free__async_cb,_mbedtls_cipher_cmac_starts__async_cb,_mbedtls_cipher_cmac_update__async_cb_402,_mbedtls_cipher_cmac_update__async_cb_401,_mbedtls_cipher_cmac_update__async_cb,_mbedtls_cipher_cmac_finish__async_cb_406
,_mbedtls_cipher_cmac_finish__async_cb,_mbedtls_gcm_setkey__async_cb_359,_mbedtls_gcm_setkey__async_cb_358,_mbedtls_gcm_setkey__async_cb_357,_mbedtls_gcm_setkey__async_cb,_mbedtls_gcm_update__async_cb,_mbedtls_gcm_free__async_cb,_ticker_set_handler__async_cb,_initialize__async_cb,_initialize__async_cb_241,_initialize__async_cb_246,_initialize__async_cb_245,_initialize__async_cb_242,_initialize__async_cb_243,_initialize__async_cb_244,_schedule_interrupt__async_cb,_schedule_interrupt__async_cb_250,_schedule_interrupt__async_cb_251,_schedule_interrupt__async_cb_252,_schedule_interrupt__async_cb_253,_schedule_interrupt__async_cb_254,_schedule_interrupt__async_cb_255,_ticker_remove_event__async_cb,_ticker_read_us__async_cb_225,_ticker_read_us__async_cb,_mbed_assert_internal__async_cb,_mbed_die__async_cb_141,_mbed_die__async_cb_140,_mbed_die__async_cb_139,_mbed_die__async_cb_138
,_mbed_die__async_cb_137,_mbed_die__async_cb_136,_mbed_die__async_cb_135,_mbed_die__async_cb_134,_mbed_die__async_cb_133,_mbed_die__async_cb_132,_mbed_die__async_cb_131,_mbed_die__async_cb_130,_mbed_die__async_cb_129,_mbed_die__async_cb_128,_mbed_die__async_cb_127,_mbed_die__async_cb,_mbed_error_printf__async_cb,_mbed_error_printf__async_cb_404,_handle_interrupt_in__async_cb,_serial_putc__async_cb_21,_serial_putc__async_cb,__ZN4mbed6TickerD2Ev__async_cb,__ZN4mbed6TickerD2Ev__async_cb_486,__ZN4mbed6TickerD0Ev__async_cb,__ZN4mbed6TickerD0Ev__async_cb_464,__ZN4mbed6Ticker7handlerEv__async_cb,_invoke_ticker__async_cb_458,_invoke_ticker__async_cb,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb,_wait_ms__async_cb,__GLOBAL__sub_I_main_cpp__async_cb,__GLOBAL__sub_I_main_cpp__async_cb_188,_main__async_cb_163,_main__async_cb_162
,_main__async_cb_165,_main__async_cb,__ZL18lora_event_handler11lora_events,_main__async_cb_157,_main__async_cb_158,_main__async_cb_159,_main__async_cb_161,_main__async_cb_160,_main__async_cb_164,__ZL12send_messagev__async_cb_126,__ZL12send_messagev__async_cb,__ZL18lora_event_handler11lora_events__async_cb_112,__ZL18lora_event_handler11lora_events__async_cb_111,__ZL18lora_event_handler11lora_events__async_cb_110,__ZL18lora_event_handler11lora_events__async_cb_109,__ZL18lora_event_handler11lora_events__async_cb,__ZL18lora_event_handler11lora_events__async_cb_108,__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb,_putc__async_cb_205,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_394,_fflush__async_cb_393,_fflush__async_cb_395,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_405,_vfprintf__async_cb,_vsnprintf__async_cb,_sprintf__async_cb
,_vsprintf__async_cb,_printf__async_cb,_putchar__async_cb,_fputc__async_cb_285,_fputc__async_cb,_puts__async_cb,__ZL25default_terminate_handlerv__async_cb,__ZL25default_terminate_handlerv__async_cb_342,_abort_message__async_cb,_abort_message__async_cb_98,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_463,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_66,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_54,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_240,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_363,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_362,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_361,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_360,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_377,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb
,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b54,b55,b56,b57,b58,b59,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79
,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104,b105,b106,b107,b108,b109
,b110,b111,b112,b113,b114,b115,b116,b117,b118,b119,b120,b121,b122,b123,b124,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134,b135,b136,b137,b138,b139
,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,b153,b154,b155,b156,b157,b158,b159,b160,b161,b162,b163,b164,b165,b166,b167,b168,b169
,b170,b171,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181,b182,b183,b184,b185,b186,b187,b188,b189,b190,b191,b192,b193,b194,b195,b196,b197,b198,b199
,b200,b201,b202,b203,b204,b205,b206,b207,b208,b209,b210,b211,b212,b213,b214,b215,b216,b217,b218,b219,b220,b221,b222,b223,b224,b225,b226,b227,b228,b229
,b230,b231,b232,b233,b234,b235,b236,b237,b238,b239,b240,b241,b242,b243,b244,b245,b246,b247,b248,b249,b250,b251,b252,b253,b254,b255,b256,b257,b258,b259
,b260,b261,b262,b263,b264];
var FUNCTION_TABLE_vii = [b266,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events,__ZN16SX1276_LoRaRadio7receiveEj,__ZN16SX1276_LoRaRadio11set_channelEj,__ZN16SX1276_LoRaRadio18set_public_networkEb,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvPhtsaEE13function_moveINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPvPKv,__ZN7LoRaPHY16set_last_tx_doneEP24set_band_txdone_params_t,__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t,__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv,__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_,__ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t,__ZN12LoRaWANStack23mlme_indication_handlerEP25loramac_mlme_indication_t,b267,b268,b269
,b270,b271,b272];
var FUNCTION_TABLE_viii = [b274,__ZN16SX1276_LoRaRadio4sendEPhh,__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj,_add_pkcs_padding,b275,b276,b277];
var FUNCTION_TABLE_viiii = [b279,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b280,b281,b282];
var FUNCTION_TABLE_viiiii = [b284,__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa,__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZN7LoRaMac16on_radio_rx_doneEPhtsa,__ZN7LoRaMac14handle_rx_doneEPhtsa];
var FUNCTION_TABLE_viiiiii = [b286,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
var FUNCTION_TABLE_viiiiiiiiiiiiii = [b288,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b290,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb];

  return { __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _handle_lora_downlink: _handle_lora_downlink, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__handle_lora_downlink = asm["_handle_lora_downlink"]; asm["_handle_lora_downlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_lora_downlink.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _handle_lora_downlink = Module["_handle_lora_downlink"] = asm["_handle_lora_downlink"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=lorawan.js.map