// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendFsk($0, $1, $2, $3, $4, $5); },
 function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendLoRa($0, $1, $2, $3, $4, $5); },
 function() { console.log('receive', Date.now()); },
 function() { return Date.now(); },
 function() { return Math.random() * 0x8000000 | 0; },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function() { console.log('rx_frame', Date.now()); },
 function($0) { window.MbedJSHal.lora.init($0); },
 function($0, $1) { MbedJSHal.gpio.init_in($0, $1, 3); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); },
 function($0, $1, $2) { MbedJSHal.gpio.init_out($0, $1, $2); },
 function($0, $1, $2, $3, $4) { MbedJSHal.gpio.init_inout($0, $1, $2, $3, $4); },
 function($0, $1) { MbedJSHal.gpio.irq_init($0, $1); },
 function($0, $1) { MbedJSHal.gpio.irq_free($0); },
 function($0, $1, $2) { MbedJSHal.gpio.irq_set($0, $1, $2); },
 function($0) { window.MbedJSHal.timers.ticker_detach($0); },
 function($0, $1) { window.MbedJSHal.timers.ticker_setup($0, $1); },
 function($0, $1, $2) { window.MbedJSHal.sht31.init($0, $1, $2); },
 function($0) { return window.MbedJSHal.sht31.read_temperature($0); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiiiiii(code, a0, a1, a2, a3, a4, a5) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 25280;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } });


memoryInitializer = "lorawan.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



   

  var _llvm_ceil_f64=Math_ceil;

  var _llvm_floor_f64=Math_floor;

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

  function _pthread_cond_init() { return 0; }

  function _pthread_cond_signal() { return 0; }

  function _pthread_cond_timedwait() { return 0; }

  function _pthread_cond_wait() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_i = ["0", "_ccm_ctx_alloc", "_gcm_ctx_alloc", "_aes_ctx_alloc", "_us_ticker_read", "_us_ticker_get_info", "0", "0"];
var debug_table_ii = ["0", "__ZN16SX1276_LoRaRadio6randomEv", "__ZN16SX1276_LoRaRadio10get_statusEv", "__ZN16LoRaWANInterface7connectEv", "__ZN16LoRaWANInterface10disconnectEv", "__ZN16LoRaWANInterface22add_link_check_requestEv", "__ZN16LoRaWANInterface24enable_adaptive_datarateEv", "__ZN16LoRaWANInterface25disable_adaptive_datarateEv", "__ZN16LoRaWANInterface19remove_channel_planEv", "___stdio_close", "0", "0", "0", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN16SX1276_LoRaRadio18check_rf_frequencyEj", "__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE", "__ZN16LoRaWANInterface7connectERK15lorawan_connect", "__ZN16LoRaWANInterface12set_datarateEh", "__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh", "__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan", "__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan", "__ZN16LoRaWANInterface14remove_channelEh", "__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t", "__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s", "__ZN7LoRaPHY25accept_tx_param_setup_reqEP20tx_param_setup_req_s", "__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s", "__ZN7LoRaPHY16get_alternate_DREh", "__ZN7LoRaPHY14remove_channelEh", "__ZN7LoRaPHY16verify_frequencyEj", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiii = ["0", "__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa", "__ZN7LoRaPHY11add_channelEP16channel_params_th", "__ZN7LoRaPHY15apply_DR_offsetEaa", "_ccm_aes_setkey_wrap", "_gcm_aes_setkey_wrap", "_aes_setkey_enc_wrap", "_aes_setkey_dec_wrap", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "_get_pkcs_padding", "0"];
var debug_table_iiiii = ["0", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj", "_aes_crypt_ecb_wrap", "0"];
var debug_table_iiiiii = ["0", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj", "__ZN16LoRaWANInterface4sendEhPKhti", "__ZN16LoRaWANInterface7receiveEhPhti", "__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_", "0", "0", "0"];
var debug_table_iiiiiii = ["0", "__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_", "_aes_crypt_cbc_wrap", "0"];
var debug_table_v = ["0", "___cxa_pure_virtual", "_us_ticker_init", "_us_ticker_disable_interrupt", "_us_ticker_clear_interrupt", "_us_ticker_fire_interrupt", "__ZL25default_terminate_handlerv", "__ZL12send_messagev", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_vi = ["0", "__ZN16SX1276_LoRaRadio11radio_resetEv", "__ZN16SX1276_LoRaRadio5sleepEv", "__ZN16SX1276_LoRaRadio7standbyEv", "__ZN16SX1276_LoRaRadio9start_cadEv", "__ZN16SX1276_LoRaRadio4lockEv", "__ZN16SX1276_LoRaRadio6unlockEv", "__ZN16SX1276_LoRaRadioD2Ev", "__ZN16SX1276_LoRaRadioD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv", "__ZN4mbed11InterruptInD2Ev", "__ZN4mbed11InterruptInD0Ev", "__ZN4mbed7TimeoutD2Ev", "__ZN4mbed7TimeoutD0Ev", "__ZN4mbed7Timeout7handlerEv", "__ZN4mbed10TimerEventD2Ev", "__ZN4mbed10TimerEventD0Ev", "__ZN16LoRaWANInterface25remove_link_check_requestEv", "__ZN16LoRaWANInterfaceD2Ev", "__ZN16LoRaWANInterfaceD0Ev", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv", "__ZN4mbed8CallbackIFvPhtsaEE13function_dtorINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPv", "__ZN7LoRaPHYD2Ev", "__ZN7LoRaPHYD0Ev", "__ZN7LoRaPHY24restore_default_channelsEv", "__ZN12LoRaPHYEU868D2Ev", "__ZN12LoRaPHYEU868D0Ev", "_ccm_ctx_free", "_gcm_ctx_free", "_aes_ctx_free", "_us_ticker_set_interrupt", "__ZN4mbed10TimerEvent3irqEj", "__ZN4mbed6TickerD2Ev", "__ZN4mbed6TickerD0Ev", "__ZN4mbed6Ticker7handlerEv", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb_503", "__ZN16SX1276_LoRaRadio11radio_resetEv__async_cb", "__ZN16SX1276_LoRaRadio5sleepEv__async_cb_520", "__ZN16SX1276_LoRaRadio5sleepEv__async_cb", "__ZN16SX1276_LoRaRadio5sleepEv__async_cb_521", "__ZN16SX1276_LoRaRadio7standbyEv__async_cb_375", "__ZN16SX1276_LoRaRadio7standbyEv__async_cb_374", "__ZN16SX1276_LoRaRadio7standbyEv__async_cb_376", "__ZN16SX1276_LoRaRadio7standbyEv__async_cb", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_385", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_384", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_447", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_446", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_445", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb", "__ZN16SX1276_LoRaRadio4sendEPhh__async_cb", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_325", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_324", "__ZN16SX1276_LoRaRadio11rx_done_irqEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_315", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_316", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_317", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_318", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_319", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_323", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_327", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_322", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_321", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_326", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_320", "__ZN16SX1276_LoRaRadio11set_channelEj__async_cb", "__ZN16SX1276_LoRaRadio6randomEv__async_cb", "__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb_251", "__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb", "__ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb_272", "__ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb", "__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb_281", "__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_296", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_295", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_294", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_297", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_293", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_302", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_298", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_299", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_301", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_292", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_300", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_291", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_290", "__ZN16SX1276_LoRaRadio9start_cadEv__async_cb", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_355", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_352", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_354", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_356", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_353", "__ZN16SX1276_LoRaRadioD2Ev__async_cb", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_125", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_119", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_124", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_120", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_123", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_121", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_122", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_131", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_130", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_129", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_128", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_127", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_126", "__ZN16SX1276_LoRaRadioD0Ev__async_cb", "__ZN16SX1276_LoRaRadio18set_low_power_modeEv__async_cb", "__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb_68", "__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_11", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_7", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_8", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_9", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_10", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_518", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_517", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_519", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_516", "__ZN16SX1276_LoRaRadio11tx_done_irqEv", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_514", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_515", "__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb", "_handle_lora_downlink__async_cb", "__ZN16SX1276_LoRaRadio8rx_frameEPhjjhh__async_cb_177", "__ZN16SX1276_LoRaRadio8rx_frameEPhjjhh__async_cb_176", "__ZN16SX1276_LoRaRadio8rx_frameEPhjjhh__async_cb_175", "__ZN16SX1276_LoRaRadio8rx_frameEPhjjhh__async_cb", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_451", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_450", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_449", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb_423", "__ZN4mbed11InterruptInD0Ev__async_cb", "__ZN4mbed11InterruptInD0Ev__async_cb_336", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_342", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_247", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_248", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_249", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_250", "__ZN4mbed7TimeoutD2Ev__async_cb", "__ZN4mbed7TimeoutD2Ev__async_cb_279", "__ZN4mbed7TimeoutD0Ev__async_cb", "__ZN4mbed7TimeoutD0Ev__async_cb_185", "__ZN4mbed7Timeout7handlerEv__async_cb_211", "__ZN4mbed7Timeout7handlerEv__async_cb", "__ZN4mbed5TimerC2Ev__async_cb", "__ZN4mbed5Timer5startEv__async_cb", "__ZN4mbed5Timer7read_msEv__async_cb", "__ZN4mbed10TimerEventD2Ev__async_cb", "__ZN4mbed10TimerEventC2Ev__async_cb", "__ZN4mbed10TimerEvent3irqEj__async_cb", "__ZN6events10EventQueue8dispatchEi__async_cb", "__ZN6events10EventQueue6cancelEi__async_cb", "_equeue_post__async_cb", "_equeue_enqueue__async_cb", "_equeue_cancel__async_cb", "_equeue_dispatch__async_cb", "_equeue_dispatch__async_cb_382", "_equeue_dispatch__async_cb_380", "_equeue_dispatch__async_cb_381", "_equeue_dispatch__async_cb_383", "__ZN16LoRaWANInterface7connectEv__async_cb", "__ZN16LoRaWANInterface4sendEhPKhti__async_cb", "__ZN16LoRaWANInterface4sendEhPKhti__async_cb_373", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_284", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_285", "__ZN12LoRaWANStackC2Ev__async_cb", "__ZN12LoRaWANStackC2Ev__async_cb_276", "__ZN12LoRaWANStackC2Ev__async_cb_277", "__ZN12LoRaWANStackC2Ev__async_cb_278", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_263", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_270", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_262", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_261", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_266", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_256", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_269", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_257", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_265", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_258", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_268", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_259", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_264", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_260", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_267", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_234", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_233", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_237", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_230", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_239", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_231", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_236", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_232", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_238", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_235", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_222", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_229", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_226", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_221", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_225", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_220", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_224", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_217", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_228", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_218", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_223", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_219", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_227", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_402", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_411", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_410", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_409", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_417", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_391", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_422", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_412", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_392", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_416", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_393", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_421", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_408", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_407", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_406", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_405", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_404", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_394", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_415", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_395", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_420", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_403", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_401", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_396", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_414", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_397", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_419", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_400", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_398", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_413", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_399", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_418", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_457", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_458", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_461", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_459", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_460", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_484", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_485", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_488", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_486", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_487", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_504", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_1", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_23", "__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_22", "__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_21", "__ZN12LoRaWANStack17send_frame_to_macEv__async_cb", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_97", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_99", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_96", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_95", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_94", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_98", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_93", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_92", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_100", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN12LoRaWANStack17get_lorawan_stackEv__async_cb", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_179", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_178", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_180", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_206", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_207", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_208", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_209", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_210", "__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb", "__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb_271", "__ZN12LoRaWANStack17drop_channel_listEv__async_cb", "__ZN12LoRaWANStack17drop_channel_listEv__async_cb_246", "__ZN12LoRaWANStack16remove_a_channelEh__async_cb", "__ZN12LoRaWANStack16remove_a_channelEh__async_cb_303", "__ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan__async_cb", "__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb", "__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb_341", "__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_312", "__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_313", "__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb", "__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_314", "__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb", "__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb_362", "__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb", "__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb_351", "__ZN12LoRaWANStack22set_link_check_requestEv__async_cb", "__ZN12LoRaWANStack22set_link_check_requestEv__async_cb_379", "__ZN12LoRaWANStack8shutdownEv__async_cb", "__ZN7LoRaMacD2Ev__async_cb_497", "__ZN7LoRaMacD2Ev__async_cb", "__ZN12radio_eventsD2Ev__async_cb", "__ZN12radio_eventsD2Ev__async_cb_472", "__ZN12radio_eventsD2Ev__async_cb_473", "__ZN12radio_eventsD2Ev__async_cb_474", "__ZN12radio_eventsD2Ev__async_cb_475", "__ZN12radio_eventsD2Ev__async_cb_476", "__ZN12radio_eventsD2Ev__async_cb_477", "__ZN14lorawan_timersD2Ev__async_cb", "__ZN14lorawan_timersD2Ev__async_cb_508", "__ZN14lorawan_timersD2Ev__async_cb_509", "__ZN14lorawan_timersD2Ev__async_cb_510", "__ZN14lorawan_timersD2Ev__async_cb_511", "__ZN7LoRaMac16on_radio_tx_doneEv", "__ZN7LoRaMac14handle_tx_doneEv__async_cb", "__ZN7LoRaMac14handle_tx_doneEv__async_cb_101", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_46", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_51", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_45", "__ZN7LoRaMac25on_rx_window2_timer_eventEv", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_52", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_53", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_50", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_49", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_48", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_47", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_506", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_505", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_24", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_55", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_57", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_54", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_56", "__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_117", "__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb", "__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_118", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_72", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_85", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_91", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_80", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_83", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_79", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_78", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_82", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_81", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_77", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_76", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_75", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_88", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_71", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_87", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_70", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_86", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_69", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_90", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_89", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_74", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_73", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_84", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_148", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_149", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_152", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_150", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_151", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb_167", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa__async_cb", "__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv", "__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_187", "__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_188", "__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_186", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_280", "__ZN7LoRaMac17on_radio_rx_errorEv", "__ZN7LoRaMac15handle_rx_errorEv__async_cb", "__ZN7LoRaMac15handle_rx_errorEv__async_cb_286", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_240", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_242", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_244", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_241", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_243", "__ZN7LoRaMac19on_radio_rx_timeoutEv", "__ZN7LoRaMac17handle_rx_timeoutEv__async_cb", "__ZN7LoRaMac17handle_rx_timeoutEv__async_cb_253", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_343", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_346", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_348", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_345", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_347", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_344", "__ZN7LoRaMac19on_radio_tx_timeoutEv", "__ZN7LoRaMac17handle_tx_timeoutEv__async_cb", "__ZN7LoRaMac17handle_tx_timeoutEv__async_cb_361", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_306", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_307", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_308", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_309", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv", "__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb", "__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb_328", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_435", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_434", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_442", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_433", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_441", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_431", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_440", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_424", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_439", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_425", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_429", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_430", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_428", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_432", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_438", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_437", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_426", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_436", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_427", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_453", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_456", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_454", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_455", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_452", "__ZN7LoRaMac11schedule_txEv__async_cb", "__ZN7LoRaMac11schedule_txEv__async_cb_364", "__ZN7LoRaMac11schedule_txEv__async_cb_370", "__ZN7LoRaMac11schedule_txEv__async_cb_365", "__ZN7LoRaMac11schedule_txEv__async_cb_366", "__ZN7LoRaMac11schedule_txEv__async_cb_367", "__ZN7LoRaMac11schedule_txEv__async_cb_369", "__ZN7LoRaMac11schedule_txEv__async_cb_372", "__ZN7LoRaMac11schedule_txEv__async_cb_368", "__ZN7LoRaMac11schedule_txEv__async_cb_371", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb_377", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb_378", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_388", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_386", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_387", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb", "__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb", "__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb_507", "__ZN7LoRaMac18handle_ack_timeoutEv__async_cb", "__ZN7LoRaMac18handle_ack_timeoutEv__async_cb_512", "__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb", "__ZN7LoRaMac25on_rx_window1_timer_eventEv", "__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_489", "__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_490", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_499", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_502", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_501", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_498", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_500", "__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb", "__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_29", "__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_30", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_40", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_41", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_42", "__ZN7LoRaMac34handle_mac_state_check_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_39", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb", "__ZN7LoRaMac29handle_delayed_tx_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_38", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_31", "__ZN7LoRaMac22handle_rx1_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_37", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_32", "__ZN7LoRaMac22handle_rx2_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_36", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_33", "__ZN7LoRaMac18handle_ack_timeoutEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_35", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_34", "__ZN7LoRaMac10disconnectEv__async_cb_6", "__ZN7LoRaMac10disconnectEv__async_cb_5", "__ZN7LoRaMac10disconnectEv__async_cb_4", "__ZN7LoRaMac10disconnectEv__async_cb_3", "__ZN7LoRaMac10disconnectEv__async_cb_2", "__ZN7LoRaMac10disconnectEv__async_cb", "__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb_20", "__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb", "__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb", "__ZN7LoRaMac19remove_channel_planEv__async_cb", "__ZN7LoRaMac21remove_single_channelEh__async_cb", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_160", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_161", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_166", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_165", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_163", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_164", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_162", "__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb", "__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_172", "__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_173", "__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t__async_cb", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_144", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_145", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_146", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_147", "__ZN7LoRaMac14handle_tx_doneEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_189", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_190", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_191", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_192", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_193", "__ZN7LoRaMac15handle_rx_errorEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_194", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_195", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_196", "__ZN7LoRaMac17handle_tx_timeoutEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_197", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_198", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_199", "__ZN7LoRaMac17handle_rx_timeoutEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_200", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_201", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_202", "__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_252", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_213", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_25", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_26", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_27", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_28", "__Z11compute_micPKhtS0_jhjPj__async_cb_15", "__Z11compute_micPKhtS0_jhjPj__async_cb_14", "__Z11compute_micPKhtS0_jhjPj__async_cb_12", "__Z11compute_micPKhtS0_jhjPj__async_cb", "__Z11compute_micPKhtS0_jhjPj__async_cb_13", "__Z11compute_micPKhtS0_jhjPj__async_cb_16", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_66", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_65", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_64", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_67", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_335", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_334", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_332", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_333", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_331", "__ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft__async_cb", "__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb", "__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb_513", "__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb", "__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb_443", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_464", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_465", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_466", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_467", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_468", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_469", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_470", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_471", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_58", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_59", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_60", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_61", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_62", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_63", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb", "__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s__async_cb", "__ZN7LoRaPHY11add_channelEP16channel_params_th__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_203", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_204", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_359", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_360", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_349", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_350", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_254", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_255", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_214", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_215", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_216", "__ZN7LoRaPHY13get_radio_rngEv__async_cb", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_282", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_283", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_275", "__ZN7LoRaPHY11handle_sendEPhh__async_cb", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_273", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_274", "__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_310", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_337", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_339", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_338", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_340", "__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb", "_mbedtls_ccm_setkey__async_cb_463", "_mbedtls_ccm_setkey__async_cb_462", "_mbedtls_ccm_setkey__async_cb", "_mbedtls_ccm_free__async_cb", "_mbedtls_cipher_free__async_cb", "_mbedtls_cipher_setup__async_cb", "_mbedtls_cipher_setkey__async_cb", "_mbedtls_cipher_setkey__async_cb_43", "_mbedtls_cipher_update__async_cb", "_mbedtls_cipher_update__async_cb_19", "_mbedtls_cipher_update__async_cb_17", "_mbedtls_cipher_update__async_cb_18", "_ccm_aes_setkey_wrap__async_cb", "_ccm_ctx_free__async_cb", "_gcm_aes_setkey_wrap__async_cb", "_gcm_ctx_free__async_cb", "_mbedtls_cipher_cmac_starts__async_cb", "_mbedtls_cipher_cmac_update__async_cb_330", "_mbedtls_cipher_cmac_update__async_cb_329", "_mbedtls_cipher_cmac_update__async_cb", "_mbedtls_cipher_cmac_finish__async_cb_305", "_mbedtls_cipher_cmac_finish__async_cb", "_mbedtls_gcm_setkey__async_cb_289", "_mbedtls_gcm_setkey__async_cb_288", "_mbedtls_gcm_setkey__async_cb_287", "_mbedtls_gcm_setkey__async_cb", "_mbedtls_gcm_update__async_cb", "_mbedtls_gcm_free__async_cb", "_ticker_set_handler__async_cb", "_initialize__async_cb", "_initialize__async_cb_478", "_initialize__async_cb_483", "_initialize__async_cb_482", "_initialize__async_cb_479", "_initialize__async_cb_480", "_initialize__async_cb_481", "_schedule_interrupt__async_cb", "_schedule_interrupt__async_cb_491", "_schedule_interrupt__async_cb_492", "_schedule_interrupt__async_cb_493", "_schedule_interrupt__async_cb_494", "_schedule_interrupt__async_cb_495", "_schedule_interrupt__async_cb_496", "_ticker_remove_event__async_cb", "_ticker_read_us__async_cb_444", "_ticker_read_us__async_cb", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_116", "_mbed_die__async_cb_115", "_mbed_die__async_cb_114", "_mbed_die__async_cb_113", "_mbed_die__async_cb_112", "_mbed_die__async_cb_111", "_mbed_die__async_cb_110", "_mbed_die__async_cb_109", "_mbed_die__async_cb_108", "_mbed_die__async_cb_107", "_mbed_die__async_cb_106", "_mbed_die__async_cb_105", "_mbed_die__async_cb_104", "_mbed_die__async_cb_103", "_mbed_die__async_cb_102", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_printf__async_cb_44", "_handle_interrupt_in__async_cb", "_serial_putc__async_cb_205", "_serial_putc__async_cb", "__ZN4mbed6TickerD2Ev__async_cb", "__ZN4mbed6TickerD2Ev__async_cb_132", "__ZN4mbed6TickerD0Ev__async_cb", "__ZN4mbed6TickerD0Ev__async_cb_363", "__ZN4mbed6Ticker7handlerEv__async_cb", "_invoke_ticker__async_cb_389", "_invoke_ticker__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb", "_wait_ms__async_cb", "__GLOBAL__sub_I_main_cpp__async_cb", "__GLOBAL__sub_I_main_cpp__async_cb_357", "_main__async_cb_140", "_main__async_cb_139", "_main__async_cb_138", "_main__async_cb_142", "_main__async_cb", "__ZL18lora_event_handler11lora_events", "_main__async_cb_133", "_main__async_cb_134", "_main__async_cb_135", "_main__async_cb_137", "_main__async_cb_136", "_main__async_cb_141", "__ZL12send_messagev__async_cb_143", "__ZL12send_messagev__async_cb", "__ZL18lora_event_handler11lora_events__async_cb_159", "__ZL18lora_event_handler11lora_events__async_cb_158", "__ZL18lora_event_handler11lora_events__async_cb_157", "__ZL18lora_event_handler11lora_events__async_cb_156", "__ZL18lora_event_handler11lora_events__async_cb", "__ZL18lora_event_handler11lora_events__async_cb_155", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb", "_putc__async_cb_245", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_182", "_fflush__async_cb_181", "_fflush__async_cb_183", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_174", "_vfprintf__async_cb", "_vsnprintf__async_cb", "_sprintf__async_cb", "_vsprintf__async_cb", "_printf__async_cb", "_putchar__async_cb", "_fputc__async_cb_304", "_fputc__async_cb", "_puts__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_153", "_abort_message__async_cb", "_abort_message__async_cb_358", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_184", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_448", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_390", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_311", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_171", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_170", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_169", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_168", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_154", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb
var debug_table_vii = ["0", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events", "__ZN16SX1276_LoRaRadio7receiveEj", "__ZN16SX1276_LoRaRadio11set_channelEj", "__ZN16SX1276_LoRaRadio18set_public_networkEb", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvPhtsaEE13function_moveINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPvPKv", "__ZN7LoRaPHY16set_last_tx_doneEP24set_band_txdone_params_t", "__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t", "__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t", "__ZN12LoRaWANStack23mlme_indication_handlerEP25loramac_mlme_indication_t", "0", "0", "0", "0", "0", "0"];
var debug_table_viii = ["0", "__ZN16SX1276_LoRaRadio4sendEPhh", "__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj", "_add_pkcs_padding", "0", "0", "0"];
var debug_table_viiii = ["0", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0", "0"];
var debug_table_viiiii = ["0", "__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa", "__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa", "__ZN7LoRaMac14handle_rx_doneEPhtsa"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
var debug_table_viiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj"];
var debug_table_viiiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb"];
function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14) {
  try {
    Module["dynCall_viiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiiiiiiiiii": invoke_viiiiiiiiiiiiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "_emscripten_asm_const_iiiiiii": _emscripten_asm_const_iiiiiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_gettimeofday": _gettimeofday, "_llvm_ceil_f64": _llvm_ceil_f64, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_trap": _llvm_trap, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_cond_timedwait": _pthread_cond_timedwait, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_asm_const_iiiiii=env._emscripten_asm_const_iiiiii;
  var _emscripten_asm_const_iiiiiii=env._emscripten_asm_const_iiiiiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _gettimeofday=env._gettimeofday;
  var _llvm_ceil_f64=env._llvm_ceil_f64;
  var _llvm_floor_f64=env._llvm_floor_f64;
  var _llvm_trap=env._llvm_trap;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_cond_timedwait=env._pthread_cond_timedwait;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i = 0, $$095113 = 0, $$096$be = 0, $$1$lcssa = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $139 = 0, $14 = 0, $150 = 0, $151 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $238 = 0, $24 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $257 = 0, $26 = 0, $260 = 0, $265 = 0, $273 = 0, $28 = 0, $292 = 0, $30 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $373 = 0, $374 = 0, $38 = 0, $4 = 0, $40 = 0, $411 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $487 = 0, $491 = 0, $495 = 0, $498 = 0, $50 = 0, $504 = 0, $507 = 0, $508 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $6 = 0, $60 = 0, $604 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $686 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18137
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18139
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 18141
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18143
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 18145
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 18147
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 18149
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 18151
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 18153
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 18155
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 18157
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 18159
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 18161
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 18163
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 18165
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 18167
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 18169
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 18171
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 18173
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 18175
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 18177
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 18179
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 18181
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 18183
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 18185
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 18187
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 18189
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 18191
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 18193
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 18195
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 18197
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 18199
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 18201
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 18203
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 18205
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 18207
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 18209
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 18211
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 18213
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 18215
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 18217
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 18219
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 18221
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 18223
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 18225
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 18227
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 18229
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 18231
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 18233
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 18235
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 18237
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 18239
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 18241
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 18243
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 18245
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 18247
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 18249
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 18251
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 18253
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 18255
 $120 = HEAP32[$0 + 236 >> 2] | 0; //@line 18257
 $122 = HEAP32[$0 + 240 >> 2] | 0; //@line 18259
 $124 = HEAP32[$0 + 244 >> 2] | 0; //@line 18261
 $126 = HEAP32[$0 + 248 >> 2] | 0; //@line 18263
 $128 = HEAP32[$0 + 252 >> 2] | 0; //@line 18265
 $130 = HEAP32[$0 + 256 >> 2] | 0; //@line 18267
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 18269
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 18271
 $136 = HEAP32[$0 + 268 >> 2] | 0; //@line 18273
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 18275
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$62 >> 0] = HEAP8[$114 >> 0] | 0; //@line 18280
  HEAP8[$50 >> 0] = HEAP8[$76 >> 0] | 0; //@line 18282
  HEAP8[$32 >> 0] = HEAP8[$82 >> 0] | 0; //@line 18284
 }
 $238 = HEAP8[$72 >> 0] | 0; //@line 18286
 if (($238 & 255) > 4) {
  $div = ($238 & 255) / 5 | 0; //@line 18289
  $242 = (-128 - (HEAP8[$120 >> 0] | 0) & 255) + -1 | 0; //@line 18294
  $$095113 = 0; //@line 18295
  $248 = HEAP8[$130 >> 0] | 0; //@line 18295
  while (1) {
   $247 = $248 & 255; //@line 18297
   if (($242 | 0) > ($247 | 0)) {
    $251 = $248 + 2 << 24 >> 24; //@line 18301
    HEAP8[$126 + 4 + $247 >> 0] = 3; //@line 18305
    HEAP8[$130 >> 0] = $251; //@line 18306
    HEAP8[($248 + 1 & 255) + ($126 + 4) >> 0] = $AsyncRetVal; //@line 18307
    HEAP8[$104 >> 0] = 1; //@line 18308
    $$0$i = 0; //@line 18309
    $686 = $251; //@line 18309
   } else {
    $$0$i = -1e3; //@line 18311
    $686 = $248; //@line 18311
   }
   $$095113 = $$095113 + 1 << 24 >> 24; //@line 18313
   if (($$095113 & 255) >= ($div & 255)) {
    $$1$lcssa = $$0$i; //@line 18318
    break;
   } else {
    $248 = $686; //@line 18316
   }
  }
 } else {
  $$1$lcssa = $102; //@line 18323
 }
 $$0$be = $66 + 255 + ($238 & 255) & 255; //@line 18329
 $$096$be = $$1$lcssa; //@line 18329
 L13 : while (1) {
  if (($$0$be & 255) >= ($10 & 255)) {
   label = 36; //@line 18333
   break;
  }
  $139 = $$0$be + 1 << 24 >> 24; //@line 18337
  switch (HEAP8[$136 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 18342
    break L13;
    break;
   }
  case 5:
   {
    label = 17; //@line 18347
    break L13;
    break;
   }
  case 7:
   {
    label = 22; //@line 18352
    break L13;
    break;
   }
  case 9:
   {
    label = 27; //@line 18357
    break L13;
    break;
   }
  case 10:
   {
    label = 32; //@line 18362
    break L13;
    break;
   }
  case 2:
   {
    HEAP32[$6 >> 2] = 0; //@line 18367
    HEAP8[$18 >> 0] = HEAP8[$136 + ($139 & 255) >> 0] | 0; //@line 18372
    HEAP8[$122 >> 0] = HEAP8[$136 + ($$0$be + 2 & 255) >> 0] | 0; //@line 18377
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 18378
    continue L13;
    break;
   }
  case 4:
   {
    $257 = $$0$be + 2 << 24 >> 24; //@line 18383
    $260 = HEAP8[$136 + ($139 & 255) >> 0] | 0; //@line 18386
    HEAP8[$110 >> 0] = $260; //@line 18387
    HEAP16[$86 >> 1] = 1 << ($260 & 255); //@line 18391
    $265 = HEAP8[$130 >> 0] | 0; //@line 18393
    if (($265 & 255) >= (-128 - (HEAP8[$120 >> 0] | 0) & 255)) {
     $$0$be = $257; //@line 18397
     $$096$be = -1e3; //@line 18397
     continue L13;
    }
    HEAP8[$130 >> 0] = $265 + 1 << 24 >> 24; //@line 18403
    HEAP8[($265 & 255) + ($126 + 4) >> 0] = 4; //@line 18404
    HEAP8[$104 >> 0] = 1; //@line 18405
    $$0$be = $257; //@line 18406
    $$096$be = 0; //@line 18406
    continue L13;
    break;
   }
  case 6:
   {
    $373 = HEAP8[$130 >> 0] | 0; //@line 18412
    $374 = $373 & 255; //@line 18413
    if (((-128 - (HEAP8[$120 >> 0] | 0) & 255) + -2 | 0) <= ($374 | 0)) {
     $$0$be = $139; //@line 18419
     $$096$be = -1e3; //@line 18419
     continue L13;
    }
    HEAP8[$126 + 4 + $374 >> 0] = 6; //@line 18424
    HEAP8[($373 + 1 & 255) + ($126 + 4) >> 0] = -1; //@line 18428
    HEAP8[$130 >> 0] = $373 + 3 << 24 >> 24; //@line 18430
    HEAP8[($373 + 2 & 255) + ($126 + 4) >> 0] = $4; //@line 18433
    HEAP8[$104 >> 0] = 1; //@line 18434
    $$0$be = $139; //@line 18435
    $$096$be = 0; //@line 18435
    continue L13;
    break;
   }
  case 8:
   {
    $487 = $$0$be + 2 << 24 >> 24; //@line 18440
    $491 = HEAP8[$136 + ($139 & 255) >> 0] & 15; //@line 18444
    $495 = ($491 + ($491 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 18449
    HEAP32[$80 >> 2] = $495; //@line 18450
    HEAP32[$68 >> 2] = $495 + 1e3; //@line 18452
    $498 = HEAP8[$130 >> 0] | 0; //@line 18454
    if (($498 & 255) >= (-128 - (HEAP8[$120 >> 0] | 0) & 255)) {
     $$0$be = $487; //@line 18458
     $$096$be = -1e3; //@line 18458
     continue L13;
    }
    HEAP8[$130 >> 0] = $498 + 1 << 24 >> 24; //@line 18464
    HEAP8[($498 & 255) + ($126 + 4) >> 0] = 8; //@line 18465
    HEAP8[$28 >> 0] = 1; //@line 18466
    HEAP8[$104 >> 0] = 1; //@line 18467
    $$0$be = $487; //@line 18468
    $$096$be = 0; //@line 18468
    continue L13;
    break;
   }
  default:
   {
    $$0$be = $139; //@line 18473
    $$096$be = -1013; //@line 18473
    continue L13;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$114 >> 0] = 0; //@line 18479
  HEAP8[$76 >> 0] = 0; //@line 18480
  HEAP8[$82 >> 0] = 0; //@line 18481
  HEAP8[$72 >> 0] = 0; //@line 18482
  $150 = $139 & 255; //@line 18483
  $151 = $150 + -1 | 0; //@line 18484
  HEAP32[$100 >> 2] = $136 + $151; //@line 18486
  HEAP8[$112 >> 0] = $42 - $151; //@line 18489
  HEAP8[$98 >> 0] = HEAP8[$94 >> 0] | 0; //@line 18491
  HEAP8[$78 >> 0] = HEAP8[$70 >> 0] | 0; //@line 18493
  HEAP8[$38 >> 0] = HEAP8[$62 >> 0] | 0; //@line 18495
  HEAP8[$30 >> 0] = HEAP8[$50 >> 0] | 0; //@line 18497
  HEAP8[$2 >> 0] = HEAP8[$32 >> 0] | 0; //@line 18499
  $162 = HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] | 0; //@line 18502
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 18503
  $163 = FUNCTION_TABLE_iiiiiii[$162 & 3]($14, $106, $114, $76, $82, $72) | 0; //@line 18504
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 595; //@line 18507
   $164 = $ReallocAsyncCtx + 4 | 0; //@line 18508
   HEAP32[$164 >> 2] = $2; //@line 18509
   $165 = $ReallocAsyncCtx + 8 | 0; //@line 18510
   HEAP8[$165 >> 0] = $4; //@line 18511
   $166 = $ReallocAsyncCtx + 12 | 0; //@line 18512
   HEAP32[$166 >> 2] = $6; //@line 18513
   $167 = $ReallocAsyncCtx + 16 | 0; //@line 18514
   HEAP8[$167 >> 0] = $8; //@line 18515
   $168 = $ReallocAsyncCtx + 17 | 0; //@line 18516
   HEAP8[$168 >> 0] = $10; //@line 18517
   $169 = $ReallocAsyncCtx + 20 | 0; //@line 18518
   HEAP32[$169 >> 2] = $12; //@line 18519
   $170 = $ReallocAsyncCtx + 24 | 0; //@line 18520
   HEAP32[$170 >> 2] = $14; //@line 18521
   $171 = $ReallocAsyncCtx + 28 | 0; //@line 18522
   HEAP32[$171 >> 2] = $16; //@line 18523
   $172 = $ReallocAsyncCtx + 32 | 0; //@line 18524
   HEAP32[$172 >> 2] = $18; //@line 18525
   $173 = $ReallocAsyncCtx + 36 | 0; //@line 18526
   HEAP32[$173 >> 2] = $20; //@line 18527
   $174 = $ReallocAsyncCtx + 40 | 0; //@line 18528
   HEAP32[$174 >> 2] = $22; //@line 18529
   $175 = $ReallocAsyncCtx + 44 | 0; //@line 18530
   HEAP32[$175 >> 2] = $24; //@line 18531
   $176 = $ReallocAsyncCtx + 48 | 0; //@line 18532
   HEAP32[$176 >> 2] = $26; //@line 18533
   $177 = $ReallocAsyncCtx + 52 | 0; //@line 18534
   HEAP32[$177 >> 2] = $28; //@line 18535
   $178 = $ReallocAsyncCtx + 56 | 0; //@line 18536
   HEAP32[$178 >> 2] = $30; //@line 18537
   $179 = $ReallocAsyncCtx + 60 | 0; //@line 18538
   HEAP32[$179 >> 2] = $32; //@line 18539
   $180 = $ReallocAsyncCtx + 64 | 0; //@line 18540
   HEAP32[$180 >> 2] = $34; //@line 18541
   $181 = $ReallocAsyncCtx + 68 | 0; //@line 18542
   HEAP32[$181 >> 2] = $36; //@line 18543
   $182 = $ReallocAsyncCtx + 72 | 0; //@line 18544
   HEAP32[$182 >> 2] = $38; //@line 18545
   $183 = $ReallocAsyncCtx + 76 | 0; //@line 18546
   HEAP32[$183 >> 2] = $40; //@line 18547
   $184 = $ReallocAsyncCtx + 80 | 0; //@line 18548
   HEAP32[$184 >> 2] = $42; //@line 18549
   $185 = $ReallocAsyncCtx + 84 | 0; //@line 18550
   HEAP32[$185 >> 2] = $44; //@line 18551
   $186 = $ReallocAsyncCtx + 88 | 0; //@line 18552
   HEAP32[$186 >> 2] = $46; //@line 18553
   $187 = $ReallocAsyncCtx + 92 | 0; //@line 18554
   HEAP32[$187 >> 2] = $48; //@line 18555
   $188 = $ReallocAsyncCtx + 96 | 0; //@line 18556
   HEAP32[$188 >> 2] = $50; //@line 18557
   $189 = $ReallocAsyncCtx + 100 | 0; //@line 18558
   HEAP32[$189 >> 2] = $52; //@line 18559
   $190 = $ReallocAsyncCtx + 104 | 0; //@line 18560
   HEAP32[$190 >> 2] = $54; //@line 18561
   $191 = $ReallocAsyncCtx + 108 | 0; //@line 18562
   HEAP32[$191 >> 2] = $56; //@line 18563
   $192 = $ReallocAsyncCtx + 112 | 0; //@line 18564
   HEAP32[$192 >> 2] = $58; //@line 18565
   $193 = $ReallocAsyncCtx + 116 | 0; //@line 18566
   HEAP32[$193 >> 2] = $60; //@line 18567
   $194 = $ReallocAsyncCtx + 120 | 0; //@line 18568
   HEAP32[$194 >> 2] = $62; //@line 18569
   $195 = $ReallocAsyncCtx + 124 | 0; //@line 18570
   HEAP32[$195 >> 2] = $64; //@line 18571
   $196 = $ReallocAsyncCtx + 128 | 0; //@line 18572
   HEAP32[$196 >> 2] = $150; //@line 18573
   $197 = $ReallocAsyncCtx + 132 | 0; //@line 18574
   HEAP32[$197 >> 2] = $68; //@line 18575
   $198 = $ReallocAsyncCtx + 136 | 0; //@line 18576
   HEAP32[$198 >> 2] = $70; //@line 18577
   $199 = $ReallocAsyncCtx + 140 | 0; //@line 18578
   HEAP32[$199 >> 2] = $72; //@line 18579
   $200 = $ReallocAsyncCtx + 144 | 0; //@line 18580
   HEAP32[$200 >> 2] = $74; //@line 18581
   $201 = $ReallocAsyncCtx + 148 | 0; //@line 18582
   HEAP32[$201 >> 2] = $76; //@line 18583
   $202 = $ReallocAsyncCtx + 152 | 0; //@line 18584
   HEAP32[$202 >> 2] = $78; //@line 18585
   $203 = $ReallocAsyncCtx + 156 | 0; //@line 18586
   HEAP32[$203 >> 2] = $80; //@line 18587
   $204 = $ReallocAsyncCtx + 160 | 0; //@line 18588
   HEAP32[$204 >> 2] = $82; //@line 18589
   $205 = $ReallocAsyncCtx + 164 | 0; //@line 18590
   HEAP32[$205 >> 2] = $84; //@line 18591
   $206 = $ReallocAsyncCtx + 168 | 0; //@line 18592
   HEAP32[$206 >> 2] = $86; //@line 18593
   $207 = $ReallocAsyncCtx + 172 | 0; //@line 18594
   HEAP32[$207 >> 2] = $88; //@line 18595
   $208 = $ReallocAsyncCtx + 176 | 0; //@line 18596
   HEAP32[$208 >> 2] = $90; //@line 18597
   $209 = $ReallocAsyncCtx + 180 | 0; //@line 18598
   HEAP32[$209 >> 2] = $92; //@line 18599
   $210 = $ReallocAsyncCtx + 184 | 0; //@line 18600
   HEAP32[$210 >> 2] = $94; //@line 18601
   $211 = $ReallocAsyncCtx + 188 | 0; //@line 18602
   HEAP32[$211 >> 2] = $96; //@line 18603
   $212 = $ReallocAsyncCtx + 192 | 0; //@line 18604
   HEAP32[$212 >> 2] = $98; //@line 18605
   $213 = $ReallocAsyncCtx + 196 | 0; //@line 18606
   HEAP32[$213 >> 2] = $100; //@line 18607
   $214 = $ReallocAsyncCtx + 200 | 0; //@line 18608
   HEAP32[$214 >> 2] = $$096$be; //@line 18609
   $215 = $ReallocAsyncCtx + 204 | 0; //@line 18610
   HEAP32[$215 >> 2] = $104; //@line 18611
   $216 = $ReallocAsyncCtx + 208 | 0; //@line 18612
   HEAP32[$216 >> 2] = $106; //@line 18613
   $217 = $ReallocAsyncCtx + 212 | 0; //@line 18614
   HEAP32[$217 >> 2] = $108; //@line 18615
   $218 = $ReallocAsyncCtx + 216 | 0; //@line 18616
   HEAP32[$218 >> 2] = $110; //@line 18617
   $219 = $ReallocAsyncCtx + 220 | 0; //@line 18618
   HEAP32[$219 >> 2] = $112; //@line 18619
   $220 = $ReallocAsyncCtx + 224 | 0; //@line 18620
   HEAP32[$220 >> 2] = $114; //@line 18621
   $221 = $ReallocAsyncCtx + 228 | 0; //@line 18622
   HEAP32[$221 >> 2] = $116; //@line 18623
   $222 = $ReallocAsyncCtx + 232 | 0; //@line 18624
   HEAP32[$222 >> 2] = $118; //@line 18625
   $223 = $ReallocAsyncCtx + 236 | 0; //@line 18626
   HEAP32[$223 >> 2] = $120; //@line 18627
   $224 = $ReallocAsyncCtx + 240 | 0; //@line 18628
   HEAP32[$224 >> 2] = $122; //@line 18629
   $225 = $ReallocAsyncCtx + 244 | 0; //@line 18630
   HEAP32[$225 >> 2] = $124; //@line 18631
   $226 = $ReallocAsyncCtx + 248 | 0; //@line 18632
   HEAP32[$226 >> 2] = $126; //@line 18633
   $227 = $ReallocAsyncCtx + 252 | 0; //@line 18634
   HEAP32[$227 >> 2] = $128; //@line 18635
   $228 = $ReallocAsyncCtx + 256 | 0; //@line 18636
   HEAP32[$228 >> 2] = $130; //@line 18637
   $229 = $ReallocAsyncCtx + 260 | 0; //@line 18638
   HEAP32[$229 >> 2] = $132; //@line 18639
   $230 = $ReallocAsyncCtx + 264 | 0; //@line 18640
   HEAP32[$230 >> 2] = $134; //@line 18641
   $231 = $ReallocAsyncCtx + 268 | 0; //@line 18642
   HEAP32[$231 >> 2] = $136; //@line 18643
   sp = STACKTOP; //@line 18644
   return;
  }
  HEAP8[___async_retval >> 0] = $163; //@line 18648
  ___async_unwind = 0; //@line 18649
  HEAP32[$ReallocAsyncCtx >> 2] = 595; //@line 18650
  $164 = $ReallocAsyncCtx + 4 | 0; //@line 18651
  HEAP32[$164 >> 2] = $2; //@line 18652
  $165 = $ReallocAsyncCtx + 8 | 0; //@line 18653
  HEAP8[$165 >> 0] = $4; //@line 18654
  $166 = $ReallocAsyncCtx + 12 | 0; //@line 18655
  HEAP32[$166 >> 2] = $6; //@line 18656
  $167 = $ReallocAsyncCtx + 16 | 0; //@line 18657
  HEAP8[$167 >> 0] = $8; //@line 18658
  $168 = $ReallocAsyncCtx + 17 | 0; //@line 18659
  HEAP8[$168 >> 0] = $10; //@line 18660
  $169 = $ReallocAsyncCtx + 20 | 0; //@line 18661
  HEAP32[$169 >> 2] = $12; //@line 18662
  $170 = $ReallocAsyncCtx + 24 | 0; //@line 18663
  HEAP32[$170 >> 2] = $14; //@line 18664
  $171 = $ReallocAsyncCtx + 28 | 0; //@line 18665
  HEAP32[$171 >> 2] = $16; //@line 18666
  $172 = $ReallocAsyncCtx + 32 | 0; //@line 18667
  HEAP32[$172 >> 2] = $18; //@line 18668
  $173 = $ReallocAsyncCtx + 36 | 0; //@line 18669
  HEAP32[$173 >> 2] = $20; //@line 18670
  $174 = $ReallocAsyncCtx + 40 | 0; //@line 18671
  HEAP32[$174 >> 2] = $22; //@line 18672
  $175 = $ReallocAsyncCtx + 44 | 0; //@line 18673
  HEAP32[$175 >> 2] = $24; //@line 18674
  $176 = $ReallocAsyncCtx + 48 | 0; //@line 18675
  HEAP32[$176 >> 2] = $26; //@line 18676
  $177 = $ReallocAsyncCtx + 52 | 0; //@line 18677
  HEAP32[$177 >> 2] = $28; //@line 18678
  $178 = $ReallocAsyncCtx + 56 | 0; //@line 18679
  HEAP32[$178 >> 2] = $30; //@line 18680
  $179 = $ReallocAsyncCtx + 60 | 0; //@line 18681
  HEAP32[$179 >> 2] = $32; //@line 18682
  $180 = $ReallocAsyncCtx + 64 | 0; //@line 18683
  HEAP32[$180 >> 2] = $34; //@line 18684
  $181 = $ReallocAsyncCtx + 68 | 0; //@line 18685
  HEAP32[$181 >> 2] = $36; //@line 18686
  $182 = $ReallocAsyncCtx + 72 | 0; //@line 18687
  HEAP32[$182 >> 2] = $38; //@line 18688
  $183 = $ReallocAsyncCtx + 76 | 0; //@line 18689
  HEAP32[$183 >> 2] = $40; //@line 18690
  $184 = $ReallocAsyncCtx + 80 | 0; //@line 18691
  HEAP32[$184 >> 2] = $42; //@line 18692
  $185 = $ReallocAsyncCtx + 84 | 0; //@line 18693
  HEAP32[$185 >> 2] = $44; //@line 18694
  $186 = $ReallocAsyncCtx + 88 | 0; //@line 18695
  HEAP32[$186 >> 2] = $46; //@line 18696
  $187 = $ReallocAsyncCtx + 92 | 0; //@line 18697
  HEAP32[$187 >> 2] = $48; //@line 18698
  $188 = $ReallocAsyncCtx + 96 | 0; //@line 18699
  HEAP32[$188 >> 2] = $50; //@line 18700
  $189 = $ReallocAsyncCtx + 100 | 0; //@line 18701
  HEAP32[$189 >> 2] = $52; //@line 18702
  $190 = $ReallocAsyncCtx + 104 | 0; //@line 18703
  HEAP32[$190 >> 2] = $54; //@line 18704
  $191 = $ReallocAsyncCtx + 108 | 0; //@line 18705
  HEAP32[$191 >> 2] = $56; //@line 18706
  $192 = $ReallocAsyncCtx + 112 | 0; //@line 18707
  HEAP32[$192 >> 2] = $58; //@line 18708
  $193 = $ReallocAsyncCtx + 116 | 0; //@line 18709
  HEAP32[$193 >> 2] = $60; //@line 18710
  $194 = $ReallocAsyncCtx + 120 | 0; //@line 18711
  HEAP32[$194 >> 2] = $62; //@line 18712
  $195 = $ReallocAsyncCtx + 124 | 0; //@line 18713
  HEAP32[$195 >> 2] = $64; //@line 18714
  $196 = $ReallocAsyncCtx + 128 | 0; //@line 18715
  HEAP32[$196 >> 2] = $150; //@line 18716
  $197 = $ReallocAsyncCtx + 132 | 0; //@line 18717
  HEAP32[$197 >> 2] = $68; //@line 18718
  $198 = $ReallocAsyncCtx + 136 | 0; //@line 18719
  HEAP32[$198 >> 2] = $70; //@line 18720
  $199 = $ReallocAsyncCtx + 140 | 0; //@line 18721
  HEAP32[$199 >> 2] = $72; //@line 18722
  $200 = $ReallocAsyncCtx + 144 | 0; //@line 18723
  HEAP32[$200 >> 2] = $74; //@line 18724
  $201 = $ReallocAsyncCtx + 148 | 0; //@line 18725
  HEAP32[$201 >> 2] = $76; //@line 18726
  $202 = $ReallocAsyncCtx + 152 | 0; //@line 18727
  HEAP32[$202 >> 2] = $78; //@line 18728
  $203 = $ReallocAsyncCtx + 156 | 0; //@line 18729
  HEAP32[$203 >> 2] = $80; //@line 18730
  $204 = $ReallocAsyncCtx + 160 | 0; //@line 18731
  HEAP32[$204 >> 2] = $82; //@line 18732
  $205 = $ReallocAsyncCtx + 164 | 0; //@line 18733
  HEAP32[$205 >> 2] = $84; //@line 18734
  $206 = $ReallocAsyncCtx + 168 | 0; //@line 18735
  HEAP32[$206 >> 2] = $86; //@line 18736
  $207 = $ReallocAsyncCtx + 172 | 0; //@line 18737
  HEAP32[$207 >> 2] = $88; //@line 18738
  $208 = $ReallocAsyncCtx + 176 | 0; //@line 18739
  HEAP32[$208 >> 2] = $90; //@line 18740
  $209 = $ReallocAsyncCtx + 180 | 0; //@line 18741
  HEAP32[$209 >> 2] = $92; //@line 18742
  $210 = $ReallocAsyncCtx + 184 | 0; //@line 18743
  HEAP32[$210 >> 2] = $94; //@line 18744
  $211 = $ReallocAsyncCtx + 188 | 0; //@line 18745
  HEAP32[$211 >> 2] = $96; //@line 18746
  $212 = $ReallocAsyncCtx + 192 | 0; //@line 18747
  HEAP32[$212 >> 2] = $98; //@line 18748
  $213 = $ReallocAsyncCtx + 196 | 0; //@line 18749
  HEAP32[$213 >> 2] = $100; //@line 18750
  $214 = $ReallocAsyncCtx + 200 | 0; //@line 18751
  HEAP32[$214 >> 2] = $$096$be; //@line 18752
  $215 = $ReallocAsyncCtx + 204 | 0; //@line 18753
  HEAP32[$215 >> 2] = $104; //@line 18754
  $216 = $ReallocAsyncCtx + 208 | 0; //@line 18755
  HEAP32[$216 >> 2] = $106; //@line 18756
  $217 = $ReallocAsyncCtx + 212 | 0; //@line 18757
  HEAP32[$217 >> 2] = $108; //@line 18758
  $218 = $ReallocAsyncCtx + 216 | 0; //@line 18759
  HEAP32[$218 >> 2] = $110; //@line 18760
  $219 = $ReallocAsyncCtx + 220 | 0; //@line 18761
  HEAP32[$219 >> 2] = $112; //@line 18762
  $220 = $ReallocAsyncCtx + 224 | 0; //@line 18763
  HEAP32[$220 >> 2] = $114; //@line 18764
  $221 = $ReallocAsyncCtx + 228 | 0; //@line 18765
  HEAP32[$221 >> 2] = $116; //@line 18766
  $222 = $ReallocAsyncCtx + 232 | 0; //@line 18767
  HEAP32[$222 >> 2] = $118; //@line 18768
  $223 = $ReallocAsyncCtx + 236 | 0; //@line 18769
  HEAP32[$223 >> 2] = $120; //@line 18770
  $224 = $ReallocAsyncCtx + 240 | 0; //@line 18771
  HEAP32[$224 >> 2] = $122; //@line 18772
  $225 = $ReallocAsyncCtx + 244 | 0; //@line 18773
  HEAP32[$225 >> 2] = $124; //@line 18774
  $226 = $ReallocAsyncCtx + 248 | 0; //@line 18775
  HEAP32[$226 >> 2] = $126; //@line 18776
  $227 = $ReallocAsyncCtx + 252 | 0; //@line 18777
  HEAP32[$227 >> 2] = $128; //@line 18778
  $228 = $ReallocAsyncCtx + 256 | 0; //@line 18779
  HEAP32[$228 >> 2] = $130; //@line 18780
  $229 = $ReallocAsyncCtx + 260 | 0; //@line 18781
  HEAP32[$229 >> 2] = $132; //@line 18782
  $230 = $ReallocAsyncCtx + 264 | 0; //@line 18783
  HEAP32[$230 >> 2] = $134; //@line 18784
  $231 = $ReallocAsyncCtx + 268 | 0; //@line 18785
  HEAP32[$231 >> 2] = $136; //@line 18786
  sp = STACKTOP; //@line 18787
  return;
 } else if ((label | 0) == 17) {
  $273 = HEAP8[$136 + ($139 & 255) >> 0] | 0; //@line 18793
  HEAP8[$84 >> 0] = ($273 & 255) >>> 4 & 7; //@line 18798
  HEAP8[$74 >> 0] = $273 & 15; //@line 18800
  $292 = $$0$be + 5 << 24 >> 24; //@line 18814
  HEAP32[$58 >> 2] = (HEAPU8[$136 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$136 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$136 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 18822
  $302 = HEAP32[(HEAP32[$52 >> 2] | 0) + 40 >> 2] | 0; //@line 18825
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 18826
  $303 = FUNCTION_TABLE_iii[$302 & 31]($14, $96) | 0; //@line 18827
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 596; //@line 18830
   $304 = $ReallocAsyncCtx2 + 4 | 0; //@line 18831
   HEAP32[$304 >> 2] = $2; //@line 18832
   $305 = $ReallocAsyncCtx2 + 8 | 0; //@line 18833
   HEAP8[$305 >> 0] = $4; //@line 18834
   $306 = $ReallocAsyncCtx2 + 12 | 0; //@line 18835
   HEAP32[$306 >> 2] = $6; //@line 18836
   $307 = $ReallocAsyncCtx2 + 16 | 0; //@line 18837
   HEAP8[$307 >> 0] = $8; //@line 18838
   $308 = $ReallocAsyncCtx2 + 17 | 0; //@line 18839
   HEAP8[$308 >> 0] = $10; //@line 18840
   $309 = $ReallocAsyncCtx2 + 20 | 0; //@line 18841
   HEAP32[$309 >> 2] = $12; //@line 18842
   $310 = $ReallocAsyncCtx2 + 24 | 0; //@line 18843
   HEAP32[$310 >> 2] = $14; //@line 18844
   $311 = $ReallocAsyncCtx2 + 28 | 0; //@line 18845
   HEAP32[$311 >> 2] = $16; //@line 18846
   $312 = $ReallocAsyncCtx2 + 32 | 0; //@line 18847
   HEAP32[$312 >> 2] = $18; //@line 18848
   $313 = $ReallocAsyncCtx2 + 36 | 0; //@line 18849
   HEAP32[$313 >> 2] = $20; //@line 18850
   $314 = $ReallocAsyncCtx2 + 40 | 0; //@line 18851
   HEAP32[$314 >> 2] = $22; //@line 18852
   $315 = $ReallocAsyncCtx2 + 44 | 0; //@line 18853
   HEAP32[$315 >> 2] = $24; //@line 18854
   $316 = $ReallocAsyncCtx2 + 48 | 0; //@line 18855
   HEAP32[$316 >> 2] = $26; //@line 18856
   $317 = $ReallocAsyncCtx2 + 52 | 0; //@line 18857
   HEAP32[$317 >> 2] = $28; //@line 18858
   $318 = $ReallocAsyncCtx2 + 56 | 0; //@line 18859
   HEAP32[$318 >> 2] = $30; //@line 18860
   $319 = $ReallocAsyncCtx2 + 60 | 0; //@line 18861
   HEAP32[$319 >> 2] = $32; //@line 18862
   $320 = $ReallocAsyncCtx2 + 64 | 0; //@line 18863
   HEAP32[$320 >> 2] = $34; //@line 18864
   $321 = $ReallocAsyncCtx2 + 68 | 0; //@line 18865
   HEAP32[$321 >> 2] = $36; //@line 18866
   $322 = $ReallocAsyncCtx2 + 72 | 0; //@line 18867
   HEAP32[$322 >> 2] = $38; //@line 18868
   $323 = $ReallocAsyncCtx2 + 76 | 0; //@line 18869
   HEAP32[$323 >> 2] = $40; //@line 18870
   $324 = $ReallocAsyncCtx2 + 80 | 0; //@line 18871
   HEAP32[$324 >> 2] = $42; //@line 18872
   $325 = $ReallocAsyncCtx2 + 84 | 0; //@line 18873
   HEAP32[$325 >> 2] = $44; //@line 18874
   $326 = $ReallocAsyncCtx2 + 88 | 0; //@line 18875
   HEAP32[$326 >> 2] = $46; //@line 18876
   $327 = $ReallocAsyncCtx2 + 92 | 0; //@line 18877
   HEAP32[$327 >> 2] = $48; //@line 18878
   $328 = $ReallocAsyncCtx2 + 96 | 0; //@line 18879
   HEAP32[$328 >> 2] = $50; //@line 18880
   $329 = $ReallocAsyncCtx2 + 100 | 0; //@line 18881
   HEAP8[$329 >> 0] = $292; //@line 18882
   $330 = $ReallocAsyncCtx2 + 104 | 0; //@line 18883
   HEAP32[$330 >> 2] = $52; //@line 18884
   $331 = $ReallocAsyncCtx2 + 108 | 0; //@line 18885
   HEAP32[$331 >> 2] = $54; //@line 18886
   $332 = $ReallocAsyncCtx2 + 112 | 0; //@line 18887
   HEAP32[$332 >> 2] = $56; //@line 18888
   $333 = $ReallocAsyncCtx2 + 116 | 0; //@line 18889
   HEAP32[$333 >> 2] = $58; //@line 18890
   $334 = $ReallocAsyncCtx2 + 120 | 0; //@line 18891
   HEAP32[$334 >> 2] = $60; //@line 18892
   $335 = $ReallocAsyncCtx2 + 124 | 0; //@line 18893
   HEAP32[$335 >> 2] = $62; //@line 18894
   $336 = $ReallocAsyncCtx2 + 128 | 0; //@line 18895
   HEAP32[$336 >> 2] = $64; //@line 18896
   $337 = $ReallocAsyncCtx2 + 132 | 0; //@line 18897
   HEAP32[$337 >> 2] = $68; //@line 18898
   $338 = $ReallocAsyncCtx2 + 136 | 0; //@line 18899
   HEAP32[$338 >> 2] = $70; //@line 18900
   $339 = $ReallocAsyncCtx2 + 140 | 0; //@line 18901
   HEAP32[$339 >> 2] = $72; //@line 18902
   $340 = $ReallocAsyncCtx2 + 144 | 0; //@line 18903
   HEAP32[$340 >> 2] = $74; //@line 18904
   $341 = $ReallocAsyncCtx2 + 148 | 0; //@line 18905
   HEAP32[$341 >> 2] = $76; //@line 18906
   $342 = $ReallocAsyncCtx2 + 152 | 0; //@line 18907
   HEAP32[$342 >> 2] = $78; //@line 18908
   $343 = $ReallocAsyncCtx2 + 156 | 0; //@line 18909
   HEAP32[$343 >> 2] = $80; //@line 18910
   $344 = $ReallocAsyncCtx2 + 160 | 0; //@line 18911
   HEAP32[$344 >> 2] = $82; //@line 18912
   $345 = $ReallocAsyncCtx2 + 164 | 0; //@line 18913
   HEAP32[$345 >> 2] = $84; //@line 18914
   $346 = $ReallocAsyncCtx2 + 168 | 0; //@line 18915
   HEAP32[$346 >> 2] = $86; //@line 18916
   $347 = $ReallocAsyncCtx2 + 172 | 0; //@line 18917
   HEAP32[$347 >> 2] = $88; //@line 18918
   $348 = $ReallocAsyncCtx2 + 176 | 0; //@line 18919
   HEAP32[$348 >> 2] = $90; //@line 18920
   $349 = $ReallocAsyncCtx2 + 180 | 0; //@line 18921
   HEAP32[$349 >> 2] = $92; //@line 18922
   $350 = $ReallocAsyncCtx2 + 184 | 0; //@line 18923
   HEAP32[$350 >> 2] = $94; //@line 18924
   $351 = $ReallocAsyncCtx2 + 188 | 0; //@line 18925
   HEAP32[$351 >> 2] = $96; //@line 18926
   $352 = $ReallocAsyncCtx2 + 192 | 0; //@line 18927
   HEAP32[$352 >> 2] = $98; //@line 18928
   $353 = $ReallocAsyncCtx2 + 196 | 0; //@line 18929
   HEAP32[$353 >> 2] = $100; //@line 18930
   $354 = $ReallocAsyncCtx2 + 200 | 0; //@line 18931
   HEAP32[$354 >> 2] = $104; //@line 18932
   $355 = $ReallocAsyncCtx2 + 204 | 0; //@line 18933
   HEAP32[$355 >> 2] = $106; //@line 18934
   $356 = $ReallocAsyncCtx2 + 208 | 0; //@line 18935
   HEAP32[$356 >> 2] = $108; //@line 18936
   $357 = $ReallocAsyncCtx2 + 212 | 0; //@line 18937
   HEAP32[$357 >> 2] = $110; //@line 18938
   $358 = $ReallocAsyncCtx2 + 216 | 0; //@line 18939
   HEAP32[$358 >> 2] = $112; //@line 18940
   $359 = $ReallocAsyncCtx2 + 220 | 0; //@line 18941
   HEAP32[$359 >> 2] = $114; //@line 18942
   $360 = $ReallocAsyncCtx2 + 224 | 0; //@line 18943
   HEAP32[$360 >> 2] = $116; //@line 18944
   $361 = $ReallocAsyncCtx2 + 228 | 0; //@line 18945
   HEAP32[$361 >> 2] = $118; //@line 18946
   $362 = $ReallocAsyncCtx2 + 232 | 0; //@line 18947
   HEAP32[$362 >> 2] = $120; //@line 18948
   $363 = $ReallocAsyncCtx2 + 236 | 0; //@line 18949
   HEAP32[$363 >> 2] = $122; //@line 18950
   $364 = $ReallocAsyncCtx2 + 240 | 0; //@line 18951
   HEAP32[$364 >> 2] = $124; //@line 18952
   $365 = $ReallocAsyncCtx2 + 244 | 0; //@line 18953
   HEAP32[$365 >> 2] = $126; //@line 18954
   $366 = $ReallocAsyncCtx2 + 248 | 0; //@line 18955
   HEAP32[$366 >> 2] = $128; //@line 18956
   $367 = $ReallocAsyncCtx2 + 252 | 0; //@line 18957
   HEAP32[$367 >> 2] = $130; //@line 18958
   $368 = $ReallocAsyncCtx2 + 256 | 0; //@line 18959
   HEAP32[$368 >> 2] = $132; //@line 18960
   $369 = $ReallocAsyncCtx2 + 260 | 0; //@line 18961
   HEAP32[$369 >> 2] = $134; //@line 18962
   $370 = $ReallocAsyncCtx2 + 264 | 0; //@line 18963
   HEAP32[$370 >> 2] = $136; //@line 18964
   sp = STACKTOP; //@line 18965
   return;
  }
  HEAP8[___async_retval >> 0] = $303; //@line 18969
  ___async_unwind = 0; //@line 18970
  HEAP32[$ReallocAsyncCtx2 >> 2] = 596; //@line 18971
  $304 = $ReallocAsyncCtx2 + 4 | 0; //@line 18972
  HEAP32[$304 >> 2] = $2; //@line 18973
  $305 = $ReallocAsyncCtx2 + 8 | 0; //@line 18974
  HEAP8[$305 >> 0] = $4; //@line 18975
  $306 = $ReallocAsyncCtx2 + 12 | 0; //@line 18976
  HEAP32[$306 >> 2] = $6; //@line 18977
  $307 = $ReallocAsyncCtx2 + 16 | 0; //@line 18978
  HEAP8[$307 >> 0] = $8; //@line 18979
  $308 = $ReallocAsyncCtx2 + 17 | 0; //@line 18980
  HEAP8[$308 >> 0] = $10; //@line 18981
  $309 = $ReallocAsyncCtx2 + 20 | 0; //@line 18982
  HEAP32[$309 >> 2] = $12; //@line 18983
  $310 = $ReallocAsyncCtx2 + 24 | 0; //@line 18984
  HEAP32[$310 >> 2] = $14; //@line 18985
  $311 = $ReallocAsyncCtx2 + 28 | 0; //@line 18986
  HEAP32[$311 >> 2] = $16; //@line 18987
  $312 = $ReallocAsyncCtx2 + 32 | 0; //@line 18988
  HEAP32[$312 >> 2] = $18; //@line 18989
  $313 = $ReallocAsyncCtx2 + 36 | 0; //@line 18990
  HEAP32[$313 >> 2] = $20; //@line 18991
  $314 = $ReallocAsyncCtx2 + 40 | 0; //@line 18992
  HEAP32[$314 >> 2] = $22; //@line 18993
  $315 = $ReallocAsyncCtx2 + 44 | 0; //@line 18994
  HEAP32[$315 >> 2] = $24; //@line 18995
  $316 = $ReallocAsyncCtx2 + 48 | 0; //@line 18996
  HEAP32[$316 >> 2] = $26; //@line 18997
  $317 = $ReallocAsyncCtx2 + 52 | 0; //@line 18998
  HEAP32[$317 >> 2] = $28; //@line 18999
  $318 = $ReallocAsyncCtx2 + 56 | 0; //@line 19000
  HEAP32[$318 >> 2] = $30; //@line 19001
  $319 = $ReallocAsyncCtx2 + 60 | 0; //@line 19002
  HEAP32[$319 >> 2] = $32; //@line 19003
  $320 = $ReallocAsyncCtx2 + 64 | 0; //@line 19004
  HEAP32[$320 >> 2] = $34; //@line 19005
  $321 = $ReallocAsyncCtx2 + 68 | 0; //@line 19006
  HEAP32[$321 >> 2] = $36; //@line 19007
  $322 = $ReallocAsyncCtx2 + 72 | 0; //@line 19008
  HEAP32[$322 >> 2] = $38; //@line 19009
  $323 = $ReallocAsyncCtx2 + 76 | 0; //@line 19010
  HEAP32[$323 >> 2] = $40; //@line 19011
  $324 = $ReallocAsyncCtx2 + 80 | 0; //@line 19012
  HEAP32[$324 >> 2] = $42; //@line 19013
  $325 = $ReallocAsyncCtx2 + 84 | 0; //@line 19014
  HEAP32[$325 >> 2] = $44; //@line 19015
  $326 = $ReallocAsyncCtx2 + 88 | 0; //@line 19016
  HEAP32[$326 >> 2] = $46; //@line 19017
  $327 = $ReallocAsyncCtx2 + 92 | 0; //@line 19018
  HEAP32[$327 >> 2] = $48; //@line 19019
  $328 = $ReallocAsyncCtx2 + 96 | 0; //@line 19020
  HEAP32[$328 >> 2] = $50; //@line 19021
  $329 = $ReallocAsyncCtx2 + 100 | 0; //@line 19022
  HEAP8[$329 >> 0] = $292; //@line 19023
  $330 = $ReallocAsyncCtx2 + 104 | 0; //@line 19024
  HEAP32[$330 >> 2] = $52; //@line 19025
  $331 = $ReallocAsyncCtx2 + 108 | 0; //@line 19026
  HEAP32[$331 >> 2] = $54; //@line 19027
  $332 = $ReallocAsyncCtx2 + 112 | 0; //@line 19028
  HEAP32[$332 >> 2] = $56; //@line 19029
  $333 = $ReallocAsyncCtx2 + 116 | 0; //@line 19030
  HEAP32[$333 >> 2] = $58; //@line 19031
  $334 = $ReallocAsyncCtx2 + 120 | 0; //@line 19032
  HEAP32[$334 >> 2] = $60; //@line 19033
  $335 = $ReallocAsyncCtx2 + 124 | 0; //@line 19034
  HEAP32[$335 >> 2] = $62; //@line 19035
  $336 = $ReallocAsyncCtx2 + 128 | 0; //@line 19036
  HEAP32[$336 >> 2] = $64; //@line 19037
  $337 = $ReallocAsyncCtx2 + 132 | 0; //@line 19038
  HEAP32[$337 >> 2] = $68; //@line 19039
  $338 = $ReallocAsyncCtx2 + 136 | 0; //@line 19040
  HEAP32[$338 >> 2] = $70; //@line 19041
  $339 = $ReallocAsyncCtx2 + 140 | 0; //@line 19042
  HEAP32[$339 >> 2] = $72; //@line 19043
  $340 = $ReallocAsyncCtx2 + 144 | 0; //@line 19044
  HEAP32[$340 >> 2] = $74; //@line 19045
  $341 = $ReallocAsyncCtx2 + 148 | 0; //@line 19046
  HEAP32[$341 >> 2] = $76; //@line 19047
  $342 = $ReallocAsyncCtx2 + 152 | 0; //@line 19048
  HEAP32[$342 >> 2] = $78; //@line 19049
  $343 = $ReallocAsyncCtx2 + 156 | 0; //@line 19050
  HEAP32[$343 >> 2] = $80; //@line 19051
  $344 = $ReallocAsyncCtx2 + 160 | 0; //@line 19052
  HEAP32[$344 >> 2] = $82; //@line 19053
  $345 = $ReallocAsyncCtx2 + 164 | 0; //@line 19054
  HEAP32[$345 >> 2] = $84; //@line 19055
  $346 = $ReallocAsyncCtx2 + 168 | 0; //@line 19056
  HEAP32[$346 >> 2] = $86; //@line 19057
  $347 = $ReallocAsyncCtx2 + 172 | 0; //@line 19058
  HEAP32[$347 >> 2] = $88; //@line 19059
  $348 = $ReallocAsyncCtx2 + 176 | 0; //@line 19060
  HEAP32[$348 >> 2] = $90; //@line 19061
  $349 = $ReallocAsyncCtx2 + 180 | 0; //@line 19062
  HEAP32[$349 >> 2] = $92; //@line 19063
  $350 = $ReallocAsyncCtx2 + 184 | 0; //@line 19064
  HEAP32[$350 >> 2] = $94; //@line 19065
  $351 = $ReallocAsyncCtx2 + 188 | 0; //@line 19066
  HEAP32[$351 >> 2] = $96; //@line 19067
  $352 = $ReallocAsyncCtx2 + 192 | 0; //@line 19068
  HEAP32[$352 >> 2] = $98; //@line 19069
  $353 = $ReallocAsyncCtx2 + 196 | 0; //@line 19070
  HEAP32[$353 >> 2] = $100; //@line 19071
  $354 = $ReallocAsyncCtx2 + 200 | 0; //@line 19072
  HEAP32[$354 >> 2] = $104; //@line 19073
  $355 = $ReallocAsyncCtx2 + 204 | 0; //@line 19074
  HEAP32[$355 >> 2] = $106; //@line 19075
  $356 = $ReallocAsyncCtx2 + 208 | 0; //@line 19076
  HEAP32[$356 >> 2] = $108; //@line 19077
  $357 = $ReallocAsyncCtx2 + 212 | 0; //@line 19078
  HEAP32[$357 >> 2] = $110; //@line 19079
  $358 = $ReallocAsyncCtx2 + 216 | 0; //@line 19080
  HEAP32[$358 >> 2] = $112; //@line 19081
  $359 = $ReallocAsyncCtx2 + 220 | 0; //@line 19082
  HEAP32[$359 >> 2] = $114; //@line 19083
  $360 = $ReallocAsyncCtx2 + 224 | 0; //@line 19084
  HEAP32[$360 >> 2] = $116; //@line 19085
  $361 = $ReallocAsyncCtx2 + 228 | 0; //@line 19086
  HEAP32[$361 >> 2] = $118; //@line 19087
  $362 = $ReallocAsyncCtx2 + 232 | 0; //@line 19088
  HEAP32[$362 >> 2] = $120; //@line 19089
  $363 = $ReallocAsyncCtx2 + 236 | 0; //@line 19090
  HEAP32[$363 >> 2] = $122; //@line 19091
  $364 = $ReallocAsyncCtx2 + 240 | 0; //@line 19092
  HEAP32[$364 >> 2] = $124; //@line 19093
  $365 = $ReallocAsyncCtx2 + 244 | 0; //@line 19094
  HEAP32[$365 >> 2] = $126; //@line 19095
  $366 = $ReallocAsyncCtx2 + 248 | 0; //@line 19096
  HEAP32[$366 >> 2] = $128; //@line 19097
  $367 = $ReallocAsyncCtx2 + 252 | 0; //@line 19098
  HEAP32[$367 >> 2] = $130; //@line 19099
  $368 = $ReallocAsyncCtx2 + 256 | 0; //@line 19100
  HEAP32[$368 >> 2] = $132; //@line 19101
  $369 = $ReallocAsyncCtx2 + 260 | 0; //@line 19102
  HEAP32[$369 >> 2] = $134; //@line 19103
  $370 = $ReallocAsyncCtx2 + 264 | 0; //@line 19104
  HEAP32[$370 >> 2] = $136; //@line 19105
  sp = STACKTOP; //@line 19106
  return;
 } else if ((label | 0) == 22) {
  HEAP8[$132 >> 0] = HEAP8[$136 + ($139 & 255) >> 0] | 0; //@line 19114
  HEAP32[$118 >> 2] = $64; //@line 19115
  HEAP32[$116 >> 2] = (HEAPU8[$136 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$136 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$136 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 19136
  HEAP32[$108 >> 2] = 0; //@line 19137
  $411 = $$0$be + 6 << 24 >> 24; //@line 19138
  HEAP8[$88 >> 0] = HEAP8[$136 + ($$0$be + 5 & 255) >> 0] | 0; //@line 19142
  $417 = HEAP32[(HEAP32[$92 >> 2] | 0) + 8 >> 2] | 0; //@line 19145
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 19146
  $418 = FUNCTION_TABLE_iii[$417 & 31]($14, $90) | 0; //@line 19147
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 597; //@line 19150
   $419 = $ReallocAsyncCtx3 + 4 | 0; //@line 19151
   HEAP32[$419 >> 2] = $2; //@line 19152
   $420 = $ReallocAsyncCtx3 + 8 | 0; //@line 19153
   HEAP8[$420 >> 0] = $4; //@line 19154
   $421 = $ReallocAsyncCtx3 + 12 | 0; //@line 19155
   HEAP32[$421 >> 2] = $6; //@line 19156
   $422 = $ReallocAsyncCtx3 + 16 | 0; //@line 19157
   HEAP8[$422 >> 0] = $8; //@line 19158
   $423 = $ReallocAsyncCtx3 + 17 | 0; //@line 19159
   HEAP8[$423 >> 0] = $10; //@line 19160
   $424 = $ReallocAsyncCtx3 + 20 | 0; //@line 19161
   HEAP32[$424 >> 2] = $12; //@line 19162
   $425 = $ReallocAsyncCtx3 + 24 | 0; //@line 19163
   HEAP32[$425 >> 2] = $14; //@line 19164
   $426 = $ReallocAsyncCtx3 + 28 | 0; //@line 19165
   HEAP32[$426 >> 2] = $16; //@line 19166
   $427 = $ReallocAsyncCtx3 + 32 | 0; //@line 19167
   HEAP32[$427 >> 2] = $18; //@line 19168
   $428 = $ReallocAsyncCtx3 + 36 | 0; //@line 19169
   HEAP32[$428 >> 2] = $20; //@line 19170
   $429 = $ReallocAsyncCtx3 + 40 | 0; //@line 19171
   HEAP32[$429 >> 2] = $22; //@line 19172
   $430 = $ReallocAsyncCtx3 + 44 | 0; //@line 19173
   HEAP32[$430 >> 2] = $24; //@line 19174
   $431 = $ReallocAsyncCtx3 + 48 | 0; //@line 19175
   HEAP32[$431 >> 2] = $26; //@line 19176
   $432 = $ReallocAsyncCtx3 + 52 | 0; //@line 19177
   HEAP32[$432 >> 2] = $28; //@line 19178
   $433 = $ReallocAsyncCtx3 + 56 | 0; //@line 19179
   HEAP32[$433 >> 2] = $30; //@line 19180
   $434 = $ReallocAsyncCtx3 + 60 | 0; //@line 19181
   HEAP32[$434 >> 2] = $32; //@line 19182
   $435 = $ReallocAsyncCtx3 + 64 | 0; //@line 19183
   HEAP32[$435 >> 2] = $34; //@line 19184
   $436 = $ReallocAsyncCtx3 + 68 | 0; //@line 19185
   HEAP32[$436 >> 2] = $36; //@line 19186
   $437 = $ReallocAsyncCtx3 + 72 | 0; //@line 19187
   HEAP32[$437 >> 2] = $38; //@line 19188
   $438 = $ReallocAsyncCtx3 + 76 | 0; //@line 19189
   HEAP32[$438 >> 2] = $40; //@line 19190
   $439 = $ReallocAsyncCtx3 + 80 | 0; //@line 19191
   HEAP32[$439 >> 2] = $42; //@line 19192
   $440 = $ReallocAsyncCtx3 + 84 | 0; //@line 19193
   HEAP32[$440 >> 2] = $44; //@line 19194
   $441 = $ReallocAsyncCtx3 + 88 | 0; //@line 19195
   HEAP32[$441 >> 2] = $46; //@line 19196
   $442 = $ReallocAsyncCtx3 + 92 | 0; //@line 19197
   HEAP32[$442 >> 2] = $48; //@line 19198
   $443 = $ReallocAsyncCtx3 + 96 | 0; //@line 19199
   HEAP32[$443 >> 2] = $50; //@line 19200
   $444 = $ReallocAsyncCtx3 + 100 | 0; //@line 19201
   HEAP32[$444 >> 2] = $52; //@line 19202
   $445 = $ReallocAsyncCtx3 + 104 | 0; //@line 19203
   HEAP32[$445 >> 2] = $54; //@line 19204
   $446 = $ReallocAsyncCtx3 + 108 | 0; //@line 19205
   HEAP8[$446 >> 0] = $411; //@line 19206
   $447 = $ReallocAsyncCtx3 + 112 | 0; //@line 19207
   HEAP32[$447 >> 2] = $56; //@line 19208
   $448 = $ReallocAsyncCtx3 + 116 | 0; //@line 19209
   HEAP32[$448 >> 2] = $58; //@line 19210
   $449 = $ReallocAsyncCtx3 + 120 | 0; //@line 19211
   HEAP32[$449 >> 2] = $60; //@line 19212
   $450 = $ReallocAsyncCtx3 + 124 | 0; //@line 19213
   HEAP32[$450 >> 2] = $62; //@line 19214
   $451 = $ReallocAsyncCtx3 + 128 | 0; //@line 19215
   HEAP32[$451 >> 2] = $64; //@line 19216
   $452 = $ReallocAsyncCtx3 + 132 | 0; //@line 19217
   HEAP32[$452 >> 2] = $68; //@line 19218
   $453 = $ReallocAsyncCtx3 + 136 | 0; //@line 19219
   HEAP32[$453 >> 2] = $70; //@line 19220
   $454 = $ReallocAsyncCtx3 + 140 | 0; //@line 19221
   HEAP32[$454 >> 2] = $72; //@line 19222
   $455 = $ReallocAsyncCtx3 + 144 | 0; //@line 19223
   HEAP32[$455 >> 2] = $74; //@line 19224
   $456 = $ReallocAsyncCtx3 + 148 | 0; //@line 19225
   HEAP32[$456 >> 2] = $76; //@line 19226
   $457 = $ReallocAsyncCtx3 + 152 | 0; //@line 19227
   HEAP32[$457 >> 2] = $78; //@line 19228
   $458 = $ReallocAsyncCtx3 + 156 | 0; //@line 19229
   HEAP32[$458 >> 2] = $80; //@line 19230
   $459 = $ReallocAsyncCtx3 + 160 | 0; //@line 19231
   HEAP32[$459 >> 2] = $82; //@line 19232
   $460 = $ReallocAsyncCtx3 + 164 | 0; //@line 19233
   HEAP32[$460 >> 2] = $84; //@line 19234
   $461 = $ReallocAsyncCtx3 + 168 | 0; //@line 19235
   HEAP32[$461 >> 2] = $86; //@line 19236
   $462 = $ReallocAsyncCtx3 + 172 | 0; //@line 19237
   HEAP32[$462 >> 2] = $88; //@line 19238
   $463 = $ReallocAsyncCtx3 + 176 | 0; //@line 19239
   HEAP32[$463 >> 2] = $90; //@line 19240
   $464 = $ReallocAsyncCtx3 + 180 | 0; //@line 19241
   HEAP32[$464 >> 2] = $92; //@line 19242
   $465 = $ReallocAsyncCtx3 + 184 | 0; //@line 19243
   HEAP32[$465 >> 2] = $94; //@line 19244
   $466 = $ReallocAsyncCtx3 + 188 | 0; //@line 19245
   HEAP32[$466 >> 2] = $96; //@line 19246
   $467 = $ReallocAsyncCtx3 + 192 | 0; //@line 19247
   HEAP32[$467 >> 2] = $98; //@line 19248
   $468 = $ReallocAsyncCtx3 + 196 | 0; //@line 19249
   HEAP32[$468 >> 2] = $100; //@line 19250
   $469 = $ReallocAsyncCtx3 + 200 | 0; //@line 19251
   HEAP32[$469 >> 2] = $104; //@line 19252
   $470 = $ReallocAsyncCtx3 + 204 | 0; //@line 19253
   HEAP32[$470 >> 2] = $106; //@line 19254
   $471 = $ReallocAsyncCtx3 + 208 | 0; //@line 19255
   HEAP32[$471 >> 2] = $108; //@line 19256
   $472 = $ReallocAsyncCtx3 + 212 | 0; //@line 19257
   HEAP32[$472 >> 2] = $110; //@line 19258
   $473 = $ReallocAsyncCtx3 + 216 | 0; //@line 19259
   HEAP32[$473 >> 2] = $112; //@line 19260
   $474 = $ReallocAsyncCtx3 + 220 | 0; //@line 19261
   HEAP32[$474 >> 2] = $114; //@line 19262
   $475 = $ReallocAsyncCtx3 + 224 | 0; //@line 19263
   HEAP32[$475 >> 2] = $116; //@line 19264
   $476 = $ReallocAsyncCtx3 + 228 | 0; //@line 19265
   HEAP32[$476 >> 2] = $118; //@line 19266
   $477 = $ReallocAsyncCtx3 + 232 | 0; //@line 19267
   HEAP32[$477 >> 2] = $120; //@line 19268
   $478 = $ReallocAsyncCtx3 + 236 | 0; //@line 19269
   HEAP32[$478 >> 2] = $122; //@line 19270
   $479 = $ReallocAsyncCtx3 + 240 | 0; //@line 19271
   HEAP32[$479 >> 2] = $124; //@line 19272
   $480 = $ReallocAsyncCtx3 + 244 | 0; //@line 19273
   HEAP32[$480 >> 2] = $126; //@line 19274
   $481 = $ReallocAsyncCtx3 + 248 | 0; //@line 19275
   HEAP32[$481 >> 2] = $128; //@line 19276
   $482 = $ReallocAsyncCtx3 + 252 | 0; //@line 19277
   HEAP32[$482 >> 2] = $130; //@line 19278
   $483 = $ReallocAsyncCtx3 + 256 | 0; //@line 19279
   HEAP32[$483 >> 2] = $132; //@line 19280
   $484 = $ReallocAsyncCtx3 + 260 | 0; //@line 19281
   HEAP32[$484 >> 2] = $134; //@line 19282
   $485 = $ReallocAsyncCtx3 + 264 | 0; //@line 19283
   HEAP32[$485 >> 2] = $136; //@line 19284
   sp = STACKTOP; //@line 19285
   return;
  }
  HEAP8[___async_retval >> 0] = $418; //@line 19289
  ___async_unwind = 0; //@line 19290
  HEAP32[$ReallocAsyncCtx3 >> 2] = 597; //@line 19291
  $419 = $ReallocAsyncCtx3 + 4 | 0; //@line 19292
  HEAP32[$419 >> 2] = $2; //@line 19293
  $420 = $ReallocAsyncCtx3 + 8 | 0; //@line 19294
  HEAP8[$420 >> 0] = $4; //@line 19295
  $421 = $ReallocAsyncCtx3 + 12 | 0; //@line 19296
  HEAP32[$421 >> 2] = $6; //@line 19297
  $422 = $ReallocAsyncCtx3 + 16 | 0; //@line 19298
  HEAP8[$422 >> 0] = $8; //@line 19299
  $423 = $ReallocAsyncCtx3 + 17 | 0; //@line 19300
  HEAP8[$423 >> 0] = $10; //@line 19301
  $424 = $ReallocAsyncCtx3 + 20 | 0; //@line 19302
  HEAP32[$424 >> 2] = $12; //@line 19303
  $425 = $ReallocAsyncCtx3 + 24 | 0; //@line 19304
  HEAP32[$425 >> 2] = $14; //@line 19305
  $426 = $ReallocAsyncCtx3 + 28 | 0; //@line 19306
  HEAP32[$426 >> 2] = $16; //@line 19307
  $427 = $ReallocAsyncCtx3 + 32 | 0; //@line 19308
  HEAP32[$427 >> 2] = $18; //@line 19309
  $428 = $ReallocAsyncCtx3 + 36 | 0; //@line 19310
  HEAP32[$428 >> 2] = $20; //@line 19311
  $429 = $ReallocAsyncCtx3 + 40 | 0; //@line 19312
  HEAP32[$429 >> 2] = $22; //@line 19313
  $430 = $ReallocAsyncCtx3 + 44 | 0; //@line 19314
  HEAP32[$430 >> 2] = $24; //@line 19315
  $431 = $ReallocAsyncCtx3 + 48 | 0; //@line 19316
  HEAP32[$431 >> 2] = $26; //@line 19317
  $432 = $ReallocAsyncCtx3 + 52 | 0; //@line 19318
  HEAP32[$432 >> 2] = $28; //@line 19319
  $433 = $ReallocAsyncCtx3 + 56 | 0; //@line 19320
  HEAP32[$433 >> 2] = $30; //@line 19321
  $434 = $ReallocAsyncCtx3 + 60 | 0; //@line 19322
  HEAP32[$434 >> 2] = $32; //@line 19323
  $435 = $ReallocAsyncCtx3 + 64 | 0; //@line 19324
  HEAP32[$435 >> 2] = $34; //@line 19325
  $436 = $ReallocAsyncCtx3 + 68 | 0; //@line 19326
  HEAP32[$436 >> 2] = $36; //@line 19327
  $437 = $ReallocAsyncCtx3 + 72 | 0; //@line 19328
  HEAP32[$437 >> 2] = $38; //@line 19329
  $438 = $ReallocAsyncCtx3 + 76 | 0; //@line 19330
  HEAP32[$438 >> 2] = $40; //@line 19331
  $439 = $ReallocAsyncCtx3 + 80 | 0; //@line 19332
  HEAP32[$439 >> 2] = $42; //@line 19333
  $440 = $ReallocAsyncCtx3 + 84 | 0; //@line 19334
  HEAP32[$440 >> 2] = $44; //@line 19335
  $441 = $ReallocAsyncCtx3 + 88 | 0; //@line 19336
  HEAP32[$441 >> 2] = $46; //@line 19337
  $442 = $ReallocAsyncCtx3 + 92 | 0; //@line 19338
  HEAP32[$442 >> 2] = $48; //@line 19339
  $443 = $ReallocAsyncCtx3 + 96 | 0; //@line 19340
  HEAP32[$443 >> 2] = $50; //@line 19341
  $444 = $ReallocAsyncCtx3 + 100 | 0; //@line 19342
  HEAP32[$444 >> 2] = $52; //@line 19343
  $445 = $ReallocAsyncCtx3 + 104 | 0; //@line 19344
  HEAP32[$445 >> 2] = $54; //@line 19345
  $446 = $ReallocAsyncCtx3 + 108 | 0; //@line 19346
  HEAP8[$446 >> 0] = $411; //@line 19347
  $447 = $ReallocAsyncCtx3 + 112 | 0; //@line 19348
  HEAP32[$447 >> 2] = $56; //@line 19349
  $448 = $ReallocAsyncCtx3 + 116 | 0; //@line 19350
  HEAP32[$448 >> 2] = $58; //@line 19351
  $449 = $ReallocAsyncCtx3 + 120 | 0; //@line 19352
  HEAP32[$449 >> 2] = $60; //@line 19353
  $450 = $ReallocAsyncCtx3 + 124 | 0; //@line 19354
  HEAP32[$450 >> 2] = $62; //@line 19355
  $451 = $ReallocAsyncCtx3 + 128 | 0; //@line 19356
  HEAP32[$451 >> 2] = $64; //@line 19357
  $452 = $ReallocAsyncCtx3 + 132 | 0; //@line 19358
  HEAP32[$452 >> 2] = $68; //@line 19359
  $453 = $ReallocAsyncCtx3 + 136 | 0; //@line 19360
  HEAP32[$453 >> 2] = $70; //@line 19361
  $454 = $ReallocAsyncCtx3 + 140 | 0; //@line 19362
  HEAP32[$454 >> 2] = $72; //@line 19363
  $455 = $ReallocAsyncCtx3 + 144 | 0; //@line 19364
  HEAP32[$455 >> 2] = $74; //@line 19365
  $456 = $ReallocAsyncCtx3 + 148 | 0; //@line 19366
  HEAP32[$456 >> 2] = $76; //@line 19367
  $457 = $ReallocAsyncCtx3 + 152 | 0; //@line 19368
  HEAP32[$457 >> 2] = $78; //@line 19369
  $458 = $ReallocAsyncCtx3 + 156 | 0; //@line 19370
  HEAP32[$458 >> 2] = $80; //@line 19371
  $459 = $ReallocAsyncCtx3 + 160 | 0; //@line 19372
  HEAP32[$459 >> 2] = $82; //@line 19373
  $460 = $ReallocAsyncCtx3 + 164 | 0; //@line 19374
  HEAP32[$460 >> 2] = $84; //@line 19375
  $461 = $ReallocAsyncCtx3 + 168 | 0; //@line 19376
  HEAP32[$461 >> 2] = $86; //@line 19377
  $462 = $ReallocAsyncCtx3 + 172 | 0; //@line 19378
  HEAP32[$462 >> 2] = $88; //@line 19379
  $463 = $ReallocAsyncCtx3 + 176 | 0; //@line 19380
  HEAP32[$463 >> 2] = $90; //@line 19381
  $464 = $ReallocAsyncCtx3 + 180 | 0; //@line 19382
  HEAP32[$464 >> 2] = $92; //@line 19383
  $465 = $ReallocAsyncCtx3 + 184 | 0; //@line 19384
  HEAP32[$465 >> 2] = $94; //@line 19385
  $466 = $ReallocAsyncCtx3 + 188 | 0; //@line 19386
  HEAP32[$466 >> 2] = $96; //@line 19387
  $467 = $ReallocAsyncCtx3 + 192 | 0; //@line 19388
  HEAP32[$467 >> 2] = $98; //@line 19389
  $468 = $ReallocAsyncCtx3 + 196 | 0; //@line 19390
  HEAP32[$468 >> 2] = $100; //@line 19391
  $469 = $ReallocAsyncCtx3 + 200 | 0; //@line 19392
  HEAP32[$469 >> 2] = $104; //@line 19393
  $470 = $ReallocAsyncCtx3 + 204 | 0; //@line 19394
  HEAP32[$470 >> 2] = $106; //@line 19395
  $471 = $ReallocAsyncCtx3 + 208 | 0; //@line 19396
  HEAP32[$471 >> 2] = $108; //@line 19397
  $472 = $ReallocAsyncCtx3 + 212 | 0; //@line 19398
  HEAP32[$472 >> 2] = $110; //@line 19399
  $473 = $ReallocAsyncCtx3 + 216 | 0; //@line 19400
  HEAP32[$473 >> 2] = $112; //@line 19401
  $474 = $ReallocAsyncCtx3 + 220 | 0; //@line 19402
  HEAP32[$474 >> 2] = $114; //@line 19403
  $475 = $ReallocAsyncCtx3 + 224 | 0; //@line 19404
  HEAP32[$475 >> 2] = $116; //@line 19405
  $476 = $ReallocAsyncCtx3 + 228 | 0; //@line 19406
  HEAP32[$476 >> 2] = $118; //@line 19407
  $477 = $ReallocAsyncCtx3 + 232 | 0; //@line 19408
  HEAP32[$477 >> 2] = $120; //@line 19409
  $478 = $ReallocAsyncCtx3 + 236 | 0; //@line 19410
  HEAP32[$478 >> 2] = $122; //@line 19411
  $479 = $ReallocAsyncCtx3 + 240 | 0; //@line 19412
  HEAP32[$479 >> 2] = $124; //@line 19413
  $480 = $ReallocAsyncCtx3 + 244 | 0; //@line 19414
  HEAP32[$480 >> 2] = $126; //@line 19415
  $481 = $ReallocAsyncCtx3 + 248 | 0; //@line 19416
  HEAP32[$481 >> 2] = $128; //@line 19417
  $482 = $ReallocAsyncCtx3 + 252 | 0; //@line 19418
  HEAP32[$482 >> 2] = $130; //@line 19419
  $483 = $ReallocAsyncCtx3 + 256 | 0; //@line 19420
  HEAP32[$483 >> 2] = $132; //@line 19421
  $484 = $ReallocAsyncCtx3 + 260 | 0; //@line 19422
  HEAP32[$484 >> 2] = $134; //@line 19423
  $485 = $ReallocAsyncCtx3 + 264 | 0; //@line 19424
  HEAP32[$485 >> 2] = $136; //@line 19425
  sp = STACKTOP; //@line 19426
  return;
 } else if ((label | 0) == 27) {
  $504 = $$0$be + 2 << 24 >> 24; //@line 19430
  $507 = HEAP8[$136 + ($139 & 255) >> 0] | 0; //@line 19433
  HEAP8[$56 >> 0] = 0; //@line 19434
  $508 = $507 & 255; //@line 19435
  HEAP8[$48 >> 0] = $508 >>> 5 & 1; //@line 19439
  if ($508 & 16 | 0) {
   HEAP8[$56 >> 0] = 1; //@line 19443
  }
  HEAP8[$40 >> 0] = $508 & 15; //@line 19447
  $517 = HEAP32[(HEAP32[$34 >> 2] | 0) + 44 >> 2] | 0; //@line 19450
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 19451
  $518 = FUNCTION_TABLE_iii[$517 & 31]($14, $60) | 0; //@line 19452
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 598; //@line 19455
   $519 = $ReallocAsyncCtx4 + 4 | 0; //@line 19456
   HEAP32[$519 >> 2] = $2; //@line 19457
   $520 = $ReallocAsyncCtx4 + 8 | 0; //@line 19458
   HEAP8[$520 >> 0] = $4; //@line 19459
   $521 = $ReallocAsyncCtx4 + 12 | 0; //@line 19460
   HEAP32[$521 >> 2] = $6; //@line 19461
   $522 = $ReallocAsyncCtx4 + 16 | 0; //@line 19462
   HEAP8[$522 >> 0] = $8; //@line 19463
   $523 = $ReallocAsyncCtx4 + 17 | 0; //@line 19464
   HEAP8[$523 >> 0] = $10; //@line 19465
   $524 = $ReallocAsyncCtx4 + 20 | 0; //@line 19466
   HEAP32[$524 >> 2] = $12; //@line 19467
   $525 = $ReallocAsyncCtx4 + 24 | 0; //@line 19468
   HEAP32[$525 >> 2] = $14; //@line 19469
   $526 = $ReallocAsyncCtx4 + 28 | 0; //@line 19470
   HEAP32[$526 >> 2] = $16; //@line 19471
   $527 = $ReallocAsyncCtx4 + 32 | 0; //@line 19472
   HEAP32[$527 >> 2] = $18; //@line 19473
   $528 = $ReallocAsyncCtx4 + 36 | 0; //@line 19474
   HEAP32[$528 >> 2] = $20; //@line 19475
   $529 = $ReallocAsyncCtx4 + 40 | 0; //@line 19476
   HEAP32[$529 >> 2] = $22; //@line 19477
   $530 = $ReallocAsyncCtx4 + 44 | 0; //@line 19478
   HEAP32[$530 >> 2] = $24; //@line 19479
   $531 = $ReallocAsyncCtx4 + 48 | 0; //@line 19480
   HEAP32[$531 >> 2] = $26; //@line 19481
   $532 = $ReallocAsyncCtx4 + 52 | 0; //@line 19482
   HEAP32[$532 >> 2] = $28; //@line 19483
   $533 = $ReallocAsyncCtx4 + 56 | 0; //@line 19484
   HEAP32[$533 >> 2] = $30; //@line 19485
   $534 = $ReallocAsyncCtx4 + 60 | 0; //@line 19486
   HEAP8[$534 >> 0] = $504; //@line 19487
   $535 = $ReallocAsyncCtx4 + 64 | 0; //@line 19488
   HEAP32[$535 >> 2] = $32; //@line 19489
   $536 = $ReallocAsyncCtx4 + 68 | 0; //@line 19490
   HEAP32[$536 >> 2] = $34; //@line 19491
   $537 = $ReallocAsyncCtx4 + 72 | 0; //@line 19492
   HEAP32[$537 >> 2] = $36; //@line 19493
   $538 = $ReallocAsyncCtx4 + 76 | 0; //@line 19494
   HEAP32[$538 >> 2] = $38; //@line 19495
   $539 = $ReallocAsyncCtx4 + 80 | 0; //@line 19496
   HEAP32[$539 >> 2] = $40; //@line 19497
   $540 = $ReallocAsyncCtx4 + 84 | 0; //@line 19498
   HEAP32[$540 >> 2] = $42; //@line 19499
   $541 = $ReallocAsyncCtx4 + 88 | 0; //@line 19500
   HEAP32[$541 >> 2] = $44; //@line 19501
   $542 = $ReallocAsyncCtx4 + 92 | 0; //@line 19502
   HEAP32[$542 >> 2] = $46; //@line 19503
   $543 = $ReallocAsyncCtx4 + 96 | 0; //@line 19504
   HEAP32[$543 >> 2] = $48; //@line 19505
   $544 = $ReallocAsyncCtx4 + 100 | 0; //@line 19506
   HEAP32[$544 >> 2] = $50; //@line 19507
   $545 = $ReallocAsyncCtx4 + 104 | 0; //@line 19508
   HEAP32[$545 >> 2] = $52; //@line 19509
   $546 = $ReallocAsyncCtx4 + 108 | 0; //@line 19510
   HEAP32[$546 >> 2] = $54; //@line 19511
   $547 = $ReallocAsyncCtx4 + 112 | 0; //@line 19512
   HEAP32[$547 >> 2] = $56; //@line 19513
   $548 = $ReallocAsyncCtx4 + 116 | 0; //@line 19514
   HEAP32[$548 >> 2] = $58; //@line 19515
   $549 = $ReallocAsyncCtx4 + 120 | 0; //@line 19516
   HEAP32[$549 >> 2] = $60; //@line 19517
   $550 = $ReallocAsyncCtx4 + 124 | 0; //@line 19518
   HEAP32[$550 >> 2] = $62; //@line 19519
   $551 = $ReallocAsyncCtx4 + 128 | 0; //@line 19520
   HEAP32[$551 >> 2] = $64; //@line 19521
   $552 = $ReallocAsyncCtx4 + 132 | 0; //@line 19522
   HEAP32[$552 >> 2] = $68; //@line 19523
   $553 = $ReallocAsyncCtx4 + 136 | 0; //@line 19524
   HEAP32[$553 >> 2] = $70; //@line 19525
   $554 = $ReallocAsyncCtx4 + 140 | 0; //@line 19526
   HEAP32[$554 >> 2] = $72; //@line 19527
   $555 = $ReallocAsyncCtx4 + 144 | 0; //@line 19528
   HEAP32[$555 >> 2] = $74; //@line 19529
   $556 = $ReallocAsyncCtx4 + 148 | 0; //@line 19530
   HEAP32[$556 >> 2] = $76; //@line 19531
   $557 = $ReallocAsyncCtx4 + 152 | 0; //@line 19532
   HEAP32[$557 >> 2] = $78; //@line 19533
   $558 = $ReallocAsyncCtx4 + 156 | 0; //@line 19534
   HEAP32[$558 >> 2] = $80; //@line 19535
   $559 = $ReallocAsyncCtx4 + 160 | 0; //@line 19536
   HEAP32[$559 >> 2] = $82; //@line 19537
   $560 = $ReallocAsyncCtx4 + 164 | 0; //@line 19538
   HEAP32[$560 >> 2] = $84; //@line 19539
   $561 = $ReallocAsyncCtx4 + 168 | 0; //@line 19540
   HEAP32[$561 >> 2] = $86; //@line 19541
   $562 = $ReallocAsyncCtx4 + 172 | 0; //@line 19542
   HEAP32[$562 >> 2] = $88; //@line 19543
   $563 = $ReallocAsyncCtx4 + 176 | 0; //@line 19544
   HEAP32[$563 >> 2] = $90; //@line 19545
   $564 = $ReallocAsyncCtx4 + 180 | 0; //@line 19546
   HEAP32[$564 >> 2] = $92; //@line 19547
   $565 = $ReallocAsyncCtx4 + 184 | 0; //@line 19548
   HEAP32[$565 >> 2] = $94; //@line 19549
   $566 = $ReallocAsyncCtx4 + 188 | 0; //@line 19550
   HEAP32[$566 >> 2] = $96; //@line 19551
   $567 = $ReallocAsyncCtx4 + 192 | 0; //@line 19552
   HEAP32[$567 >> 2] = $98; //@line 19553
   $568 = $ReallocAsyncCtx4 + 196 | 0; //@line 19554
   HEAP32[$568 >> 2] = $100; //@line 19555
   $569 = $ReallocAsyncCtx4 + 200 | 0; //@line 19556
   HEAP32[$569 >> 2] = $$096$be; //@line 19557
   $570 = $ReallocAsyncCtx4 + 204 | 0; //@line 19558
   HEAP32[$570 >> 2] = $104; //@line 19559
   $571 = $ReallocAsyncCtx4 + 208 | 0; //@line 19560
   HEAP32[$571 >> 2] = $106; //@line 19561
   $572 = $ReallocAsyncCtx4 + 212 | 0; //@line 19562
   HEAP32[$572 >> 2] = $108; //@line 19563
   $573 = $ReallocAsyncCtx4 + 216 | 0; //@line 19564
   HEAP32[$573 >> 2] = $110; //@line 19565
   $574 = $ReallocAsyncCtx4 + 220 | 0; //@line 19566
   HEAP32[$574 >> 2] = $112; //@line 19567
   $575 = $ReallocAsyncCtx4 + 224 | 0; //@line 19568
   HEAP32[$575 >> 2] = $114; //@line 19569
   $576 = $ReallocAsyncCtx4 + 228 | 0; //@line 19570
   HEAP32[$576 >> 2] = $116; //@line 19571
   $577 = $ReallocAsyncCtx4 + 232 | 0; //@line 19572
   HEAP32[$577 >> 2] = $118; //@line 19573
   $578 = $ReallocAsyncCtx4 + 236 | 0; //@line 19574
   HEAP32[$578 >> 2] = $120; //@line 19575
   $579 = $ReallocAsyncCtx4 + 240 | 0; //@line 19576
   HEAP32[$579 >> 2] = $122; //@line 19577
   $580 = $ReallocAsyncCtx4 + 244 | 0; //@line 19578
   HEAP32[$580 >> 2] = $124; //@line 19579
   $581 = $ReallocAsyncCtx4 + 248 | 0; //@line 19580
   HEAP32[$581 >> 2] = $126; //@line 19581
   $582 = $ReallocAsyncCtx4 + 252 | 0; //@line 19582
   HEAP32[$582 >> 2] = $128; //@line 19583
   $583 = $ReallocAsyncCtx4 + 256 | 0; //@line 19584
   HEAP32[$583 >> 2] = $130; //@line 19585
   $584 = $ReallocAsyncCtx4 + 260 | 0; //@line 19586
   HEAP32[$584 >> 2] = $132; //@line 19587
   $585 = $ReallocAsyncCtx4 + 264 | 0; //@line 19588
   HEAP32[$585 >> 2] = $134; //@line 19589
   $586 = $ReallocAsyncCtx4 + 268 | 0; //@line 19590
   HEAP32[$586 >> 2] = $136; //@line 19591
   sp = STACKTOP; //@line 19592
   return;
  }
  HEAP8[___async_retval >> 0] = $518 & 1; //@line 19597
  ___async_unwind = 0; //@line 19598
  HEAP32[$ReallocAsyncCtx4 >> 2] = 598; //@line 19599
  $519 = $ReallocAsyncCtx4 + 4 | 0; //@line 19600
  HEAP32[$519 >> 2] = $2; //@line 19601
  $520 = $ReallocAsyncCtx4 + 8 | 0; //@line 19602
  HEAP8[$520 >> 0] = $4; //@line 19603
  $521 = $ReallocAsyncCtx4 + 12 | 0; //@line 19604
  HEAP32[$521 >> 2] = $6; //@line 19605
  $522 = $ReallocAsyncCtx4 + 16 | 0; //@line 19606
  HEAP8[$522 >> 0] = $8; //@line 19607
  $523 = $ReallocAsyncCtx4 + 17 | 0; //@line 19608
  HEAP8[$523 >> 0] = $10; //@line 19609
  $524 = $ReallocAsyncCtx4 + 20 | 0; //@line 19610
  HEAP32[$524 >> 2] = $12; //@line 19611
  $525 = $ReallocAsyncCtx4 + 24 | 0; //@line 19612
  HEAP32[$525 >> 2] = $14; //@line 19613
  $526 = $ReallocAsyncCtx4 + 28 | 0; //@line 19614
  HEAP32[$526 >> 2] = $16; //@line 19615
  $527 = $ReallocAsyncCtx4 + 32 | 0; //@line 19616
  HEAP32[$527 >> 2] = $18; //@line 19617
  $528 = $ReallocAsyncCtx4 + 36 | 0; //@line 19618
  HEAP32[$528 >> 2] = $20; //@line 19619
  $529 = $ReallocAsyncCtx4 + 40 | 0; //@line 19620
  HEAP32[$529 >> 2] = $22; //@line 19621
  $530 = $ReallocAsyncCtx4 + 44 | 0; //@line 19622
  HEAP32[$530 >> 2] = $24; //@line 19623
  $531 = $ReallocAsyncCtx4 + 48 | 0; //@line 19624
  HEAP32[$531 >> 2] = $26; //@line 19625
  $532 = $ReallocAsyncCtx4 + 52 | 0; //@line 19626
  HEAP32[$532 >> 2] = $28; //@line 19627
  $533 = $ReallocAsyncCtx4 + 56 | 0; //@line 19628
  HEAP32[$533 >> 2] = $30; //@line 19629
  $534 = $ReallocAsyncCtx4 + 60 | 0; //@line 19630
  HEAP8[$534 >> 0] = $504; //@line 19631
  $535 = $ReallocAsyncCtx4 + 64 | 0; //@line 19632
  HEAP32[$535 >> 2] = $32; //@line 19633
  $536 = $ReallocAsyncCtx4 + 68 | 0; //@line 19634
  HEAP32[$536 >> 2] = $34; //@line 19635
  $537 = $ReallocAsyncCtx4 + 72 | 0; //@line 19636
  HEAP32[$537 >> 2] = $36; //@line 19637
  $538 = $ReallocAsyncCtx4 + 76 | 0; //@line 19638
  HEAP32[$538 >> 2] = $38; //@line 19639
  $539 = $ReallocAsyncCtx4 + 80 | 0; //@line 19640
  HEAP32[$539 >> 2] = $40; //@line 19641
  $540 = $ReallocAsyncCtx4 + 84 | 0; //@line 19642
  HEAP32[$540 >> 2] = $42; //@line 19643
  $541 = $ReallocAsyncCtx4 + 88 | 0; //@line 19644
  HEAP32[$541 >> 2] = $44; //@line 19645
  $542 = $ReallocAsyncCtx4 + 92 | 0; //@line 19646
  HEAP32[$542 >> 2] = $46; //@line 19647
  $543 = $ReallocAsyncCtx4 + 96 | 0; //@line 19648
  HEAP32[$543 >> 2] = $48; //@line 19649
  $544 = $ReallocAsyncCtx4 + 100 | 0; //@line 19650
  HEAP32[$544 >> 2] = $50; //@line 19651
  $545 = $ReallocAsyncCtx4 + 104 | 0; //@line 19652
  HEAP32[$545 >> 2] = $52; //@line 19653
  $546 = $ReallocAsyncCtx4 + 108 | 0; //@line 19654
  HEAP32[$546 >> 2] = $54; //@line 19655
  $547 = $ReallocAsyncCtx4 + 112 | 0; //@line 19656
  HEAP32[$547 >> 2] = $56; //@line 19657
  $548 = $ReallocAsyncCtx4 + 116 | 0; //@line 19658
  HEAP32[$548 >> 2] = $58; //@line 19659
  $549 = $ReallocAsyncCtx4 + 120 | 0; //@line 19660
  HEAP32[$549 >> 2] = $60; //@line 19661
  $550 = $ReallocAsyncCtx4 + 124 | 0; //@line 19662
  HEAP32[$550 >> 2] = $62; //@line 19663
  $551 = $ReallocAsyncCtx4 + 128 | 0; //@line 19664
  HEAP32[$551 >> 2] = $64; //@line 19665
  $552 = $ReallocAsyncCtx4 + 132 | 0; //@line 19666
  HEAP32[$552 >> 2] = $68; //@line 19667
  $553 = $ReallocAsyncCtx4 + 136 | 0; //@line 19668
  HEAP32[$553 >> 2] = $70; //@line 19669
  $554 = $ReallocAsyncCtx4 + 140 | 0; //@line 19670
  HEAP32[$554 >> 2] = $72; //@line 19671
  $555 = $ReallocAsyncCtx4 + 144 | 0; //@line 19672
  HEAP32[$555 >> 2] = $74; //@line 19673
  $556 = $ReallocAsyncCtx4 + 148 | 0; //@line 19674
  HEAP32[$556 >> 2] = $76; //@line 19675
  $557 = $ReallocAsyncCtx4 + 152 | 0; //@line 19676
  HEAP32[$557 >> 2] = $78; //@line 19677
  $558 = $ReallocAsyncCtx4 + 156 | 0; //@line 19678
  HEAP32[$558 >> 2] = $80; //@line 19679
  $559 = $ReallocAsyncCtx4 + 160 | 0; //@line 19680
  HEAP32[$559 >> 2] = $82; //@line 19681
  $560 = $ReallocAsyncCtx4 + 164 | 0; //@line 19682
  HEAP32[$560 >> 2] = $84; //@line 19683
  $561 = $ReallocAsyncCtx4 + 168 | 0; //@line 19684
  HEAP32[$561 >> 2] = $86; //@line 19685
  $562 = $ReallocAsyncCtx4 + 172 | 0; //@line 19686
  HEAP32[$562 >> 2] = $88; //@line 19687
  $563 = $ReallocAsyncCtx4 + 176 | 0; //@line 19688
  HEAP32[$563 >> 2] = $90; //@line 19689
  $564 = $ReallocAsyncCtx4 + 180 | 0; //@line 19690
  HEAP32[$564 >> 2] = $92; //@line 19691
  $565 = $ReallocAsyncCtx4 + 184 | 0; //@line 19692
  HEAP32[$565 >> 2] = $94; //@line 19693
  $566 = $ReallocAsyncCtx4 + 188 | 0; //@line 19694
  HEAP32[$566 >> 2] = $96; //@line 19695
  $567 = $ReallocAsyncCtx4 + 192 | 0; //@line 19696
  HEAP32[$567 >> 2] = $98; //@line 19697
  $568 = $ReallocAsyncCtx4 + 196 | 0; //@line 19698
  HEAP32[$568 >> 2] = $100; //@line 19699
  $569 = $ReallocAsyncCtx4 + 200 | 0; //@line 19700
  HEAP32[$569 >> 2] = $$096$be; //@line 19701
  $570 = $ReallocAsyncCtx4 + 204 | 0; //@line 19702
  HEAP32[$570 >> 2] = $104; //@line 19703
  $571 = $ReallocAsyncCtx4 + 208 | 0; //@line 19704
  HEAP32[$571 >> 2] = $106; //@line 19705
  $572 = $ReallocAsyncCtx4 + 212 | 0; //@line 19706
  HEAP32[$572 >> 2] = $108; //@line 19707
  $573 = $ReallocAsyncCtx4 + 216 | 0; //@line 19708
  HEAP32[$573 >> 2] = $110; //@line 19709
  $574 = $ReallocAsyncCtx4 + 220 | 0; //@line 19710
  HEAP32[$574 >> 2] = $112; //@line 19711
  $575 = $ReallocAsyncCtx4 + 224 | 0; //@line 19712
  HEAP32[$575 >> 2] = $114; //@line 19713
  $576 = $ReallocAsyncCtx4 + 228 | 0; //@line 19714
  HEAP32[$576 >> 2] = $116; //@line 19715
  $577 = $ReallocAsyncCtx4 + 232 | 0; //@line 19716
  HEAP32[$577 >> 2] = $118; //@line 19717
  $578 = $ReallocAsyncCtx4 + 236 | 0; //@line 19718
  HEAP32[$578 >> 2] = $120; //@line 19719
  $579 = $ReallocAsyncCtx4 + 240 | 0; //@line 19720
  HEAP32[$579 >> 2] = $122; //@line 19721
  $580 = $ReallocAsyncCtx4 + 244 | 0; //@line 19722
  HEAP32[$580 >> 2] = $124; //@line 19723
  $581 = $ReallocAsyncCtx4 + 248 | 0; //@line 19724
  HEAP32[$581 >> 2] = $126; //@line 19725
  $582 = $ReallocAsyncCtx4 + 252 | 0; //@line 19726
  HEAP32[$582 >> 2] = $128; //@line 19727
  $583 = $ReallocAsyncCtx4 + 256 | 0; //@line 19728
  HEAP32[$583 >> 2] = $130; //@line 19729
  $584 = $ReallocAsyncCtx4 + 260 | 0; //@line 19730
  HEAP32[$584 >> 2] = $132; //@line 19731
  $585 = $ReallocAsyncCtx4 + 264 | 0; //@line 19732
  HEAP32[$585 >> 2] = $134; //@line 19733
  $586 = $ReallocAsyncCtx4 + 268 | 0; //@line 19734
  HEAP32[$586 >> 2] = $136; //@line 19735
  sp = STACKTOP; //@line 19736
  return;
 } else if ((label | 0) == 32) {
  HEAP8[$12 >> 0] = HEAP8[$136 + ($139 & 255) >> 0] | 0; //@line 19744
  $604 = $$0$be + 5 << 24 >> 24; //@line 19757
  HEAP32[$134 >> 2] = (HEAPU8[$136 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$136 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$136 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 19765
  $614 = HEAP32[(HEAP32[$124 >> 2] | 0) + 48 >> 2] | 0; //@line 19768
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 19769
  $615 = FUNCTION_TABLE_iii[$614 & 31]($14, $54) | 0; //@line 19770
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 599; //@line 19773
   $616 = $ReallocAsyncCtx5 + 4 | 0; //@line 19774
   HEAP32[$616 >> 2] = $2; //@line 19775
   $617 = $ReallocAsyncCtx5 + 8 | 0; //@line 19776
   HEAP8[$617 >> 0] = $4; //@line 19777
   $618 = $ReallocAsyncCtx5 + 12 | 0; //@line 19778
   HEAP32[$618 >> 2] = $6; //@line 19779
   $619 = $ReallocAsyncCtx5 + 16 | 0; //@line 19780
   HEAP8[$619 >> 0] = $8; //@line 19781
   $620 = $ReallocAsyncCtx5 + 17 | 0; //@line 19782
   HEAP8[$620 >> 0] = $10; //@line 19783
   $621 = $ReallocAsyncCtx5 + 20 | 0; //@line 19784
   HEAP32[$621 >> 2] = $12; //@line 19785
   $622 = $ReallocAsyncCtx5 + 24 | 0; //@line 19786
   HEAP32[$622 >> 2] = $14; //@line 19787
   $623 = $ReallocAsyncCtx5 + 28 | 0; //@line 19788
   HEAP32[$623 >> 2] = $16; //@line 19789
   $624 = $ReallocAsyncCtx5 + 32 | 0; //@line 19790
   HEAP32[$624 >> 2] = $18; //@line 19791
   $625 = $ReallocAsyncCtx5 + 36 | 0; //@line 19792
   HEAP32[$625 >> 2] = $20; //@line 19793
   $626 = $ReallocAsyncCtx5 + 40 | 0; //@line 19794
   HEAP32[$626 >> 2] = $22; //@line 19795
   $627 = $ReallocAsyncCtx5 + 44 | 0; //@line 19796
   HEAP32[$627 >> 2] = $24; //@line 19797
   $628 = $ReallocAsyncCtx5 + 48 | 0; //@line 19798
   HEAP32[$628 >> 2] = $26; //@line 19799
   $629 = $ReallocAsyncCtx5 + 52 | 0; //@line 19800
   HEAP32[$629 >> 2] = $28; //@line 19801
   $630 = $ReallocAsyncCtx5 + 56 | 0; //@line 19802
   HEAP32[$630 >> 2] = $30; //@line 19803
   $631 = $ReallocAsyncCtx5 + 60 | 0; //@line 19804
   HEAP32[$631 >> 2] = $32; //@line 19805
   $632 = $ReallocAsyncCtx5 + 64 | 0; //@line 19806
   HEAP32[$632 >> 2] = $34; //@line 19807
   $633 = $ReallocAsyncCtx5 + 68 | 0; //@line 19808
   HEAP32[$633 >> 2] = $36; //@line 19809
   $634 = $ReallocAsyncCtx5 + 72 | 0; //@line 19810
   HEAP32[$634 >> 2] = $38; //@line 19811
   $635 = $ReallocAsyncCtx5 + 76 | 0; //@line 19812
   HEAP32[$635 >> 2] = $40; //@line 19813
   $636 = $ReallocAsyncCtx5 + 80 | 0; //@line 19814
   HEAP32[$636 >> 2] = $42; //@line 19815
   $637 = $ReallocAsyncCtx5 + 84 | 0; //@line 19816
   HEAP32[$637 >> 2] = $44; //@line 19817
   $638 = $ReallocAsyncCtx5 + 88 | 0; //@line 19818
   HEAP32[$638 >> 2] = $46; //@line 19819
   $639 = $ReallocAsyncCtx5 + 92 | 0; //@line 19820
   HEAP32[$639 >> 2] = $48; //@line 19821
   $640 = $ReallocAsyncCtx5 + 96 | 0; //@line 19822
   HEAP32[$640 >> 2] = $50; //@line 19823
   $641 = $ReallocAsyncCtx5 + 100 | 0; //@line 19824
   HEAP32[$641 >> 2] = $52; //@line 19825
   $642 = $ReallocAsyncCtx5 + 104 | 0; //@line 19826
   HEAP32[$642 >> 2] = $54; //@line 19827
   $643 = $ReallocAsyncCtx5 + 108 | 0; //@line 19828
   HEAP8[$643 >> 0] = $604; //@line 19829
   $644 = $ReallocAsyncCtx5 + 112 | 0; //@line 19830
   HEAP32[$644 >> 2] = $56; //@line 19831
   $645 = $ReallocAsyncCtx5 + 116 | 0; //@line 19832
   HEAP32[$645 >> 2] = $58; //@line 19833
   $646 = $ReallocAsyncCtx5 + 120 | 0; //@line 19834
   HEAP32[$646 >> 2] = $60; //@line 19835
   $647 = $ReallocAsyncCtx5 + 124 | 0; //@line 19836
   HEAP32[$647 >> 2] = $62; //@line 19837
   $648 = $ReallocAsyncCtx5 + 128 | 0; //@line 19838
   HEAP32[$648 >> 2] = $64; //@line 19839
   $649 = $ReallocAsyncCtx5 + 132 | 0; //@line 19840
   HEAP32[$649 >> 2] = $68; //@line 19841
   $650 = $ReallocAsyncCtx5 + 136 | 0; //@line 19842
   HEAP32[$650 >> 2] = $70; //@line 19843
   $651 = $ReallocAsyncCtx5 + 140 | 0; //@line 19844
   HEAP32[$651 >> 2] = $72; //@line 19845
   $652 = $ReallocAsyncCtx5 + 144 | 0; //@line 19846
   HEAP32[$652 >> 2] = $74; //@line 19847
   $653 = $ReallocAsyncCtx5 + 148 | 0; //@line 19848
   HEAP32[$653 >> 2] = $76; //@line 19849
   $654 = $ReallocAsyncCtx5 + 152 | 0; //@line 19850
   HEAP32[$654 >> 2] = $78; //@line 19851
   $655 = $ReallocAsyncCtx5 + 156 | 0; //@line 19852
   HEAP32[$655 >> 2] = $80; //@line 19853
   $656 = $ReallocAsyncCtx5 + 160 | 0; //@line 19854
   HEAP32[$656 >> 2] = $82; //@line 19855
   $657 = $ReallocAsyncCtx5 + 164 | 0; //@line 19856
   HEAP32[$657 >> 2] = $84; //@line 19857
   $658 = $ReallocAsyncCtx5 + 168 | 0; //@line 19858
   HEAP32[$658 >> 2] = $86; //@line 19859
   $659 = $ReallocAsyncCtx5 + 172 | 0; //@line 19860
   HEAP32[$659 >> 2] = $88; //@line 19861
   $660 = $ReallocAsyncCtx5 + 176 | 0; //@line 19862
   HEAP32[$660 >> 2] = $90; //@line 19863
   $661 = $ReallocAsyncCtx5 + 180 | 0; //@line 19864
   HEAP32[$661 >> 2] = $92; //@line 19865
   $662 = $ReallocAsyncCtx5 + 184 | 0; //@line 19866
   HEAP32[$662 >> 2] = $94; //@line 19867
   $663 = $ReallocAsyncCtx5 + 188 | 0; //@line 19868
   HEAP32[$663 >> 2] = $96; //@line 19869
   $664 = $ReallocAsyncCtx5 + 192 | 0; //@line 19870
   HEAP32[$664 >> 2] = $98; //@line 19871
   $665 = $ReallocAsyncCtx5 + 196 | 0; //@line 19872
   HEAP32[$665 >> 2] = $100; //@line 19873
   $666 = $ReallocAsyncCtx5 + 200 | 0; //@line 19874
   HEAP32[$666 >> 2] = $104; //@line 19875
   $667 = $ReallocAsyncCtx5 + 204 | 0; //@line 19876
   HEAP32[$667 >> 2] = $106; //@line 19877
   $668 = $ReallocAsyncCtx5 + 208 | 0; //@line 19878
   HEAP32[$668 >> 2] = $108; //@line 19879
   $669 = $ReallocAsyncCtx5 + 212 | 0; //@line 19880
   HEAP32[$669 >> 2] = $110; //@line 19881
   $670 = $ReallocAsyncCtx5 + 216 | 0; //@line 19882
   HEAP32[$670 >> 2] = $112; //@line 19883
   $671 = $ReallocAsyncCtx5 + 220 | 0; //@line 19884
   HEAP32[$671 >> 2] = $114; //@line 19885
   $672 = $ReallocAsyncCtx5 + 224 | 0; //@line 19886
   HEAP32[$672 >> 2] = $116; //@line 19887
   $673 = $ReallocAsyncCtx5 + 228 | 0; //@line 19888
   HEAP32[$673 >> 2] = $118; //@line 19889
   $674 = $ReallocAsyncCtx5 + 232 | 0; //@line 19890
   HEAP32[$674 >> 2] = $120; //@line 19891
   $675 = $ReallocAsyncCtx5 + 236 | 0; //@line 19892
   HEAP32[$675 >> 2] = $122; //@line 19893
   $676 = $ReallocAsyncCtx5 + 240 | 0; //@line 19894
   HEAP32[$676 >> 2] = $124; //@line 19895
   $677 = $ReallocAsyncCtx5 + 244 | 0; //@line 19896
   HEAP32[$677 >> 2] = $126; //@line 19897
   $678 = $ReallocAsyncCtx5 + 248 | 0; //@line 19898
   HEAP32[$678 >> 2] = $128; //@line 19899
   $679 = $ReallocAsyncCtx5 + 252 | 0; //@line 19900
   HEAP32[$679 >> 2] = $130; //@line 19901
   $680 = $ReallocAsyncCtx5 + 256 | 0; //@line 19902
   HEAP32[$680 >> 2] = $132; //@line 19903
   $681 = $ReallocAsyncCtx5 + 260 | 0; //@line 19904
   HEAP32[$681 >> 2] = $134; //@line 19905
   $682 = $ReallocAsyncCtx5 + 264 | 0; //@line 19906
   HEAP32[$682 >> 2] = $136; //@line 19907
   sp = STACKTOP; //@line 19908
   return;
  }
  HEAP8[___async_retval >> 0] = $615; //@line 19912
  ___async_unwind = 0; //@line 19913
  HEAP32[$ReallocAsyncCtx5 >> 2] = 599; //@line 19914
  $616 = $ReallocAsyncCtx5 + 4 | 0; //@line 19915
  HEAP32[$616 >> 2] = $2; //@line 19916
  $617 = $ReallocAsyncCtx5 + 8 | 0; //@line 19917
  HEAP8[$617 >> 0] = $4; //@line 19918
  $618 = $ReallocAsyncCtx5 + 12 | 0; //@line 19919
  HEAP32[$618 >> 2] = $6; //@line 19920
  $619 = $ReallocAsyncCtx5 + 16 | 0; //@line 19921
  HEAP8[$619 >> 0] = $8; //@line 19922
  $620 = $ReallocAsyncCtx5 + 17 | 0; //@line 19923
  HEAP8[$620 >> 0] = $10; //@line 19924
  $621 = $ReallocAsyncCtx5 + 20 | 0; //@line 19925
  HEAP32[$621 >> 2] = $12; //@line 19926
  $622 = $ReallocAsyncCtx5 + 24 | 0; //@line 19927
  HEAP32[$622 >> 2] = $14; //@line 19928
  $623 = $ReallocAsyncCtx5 + 28 | 0; //@line 19929
  HEAP32[$623 >> 2] = $16; //@line 19930
  $624 = $ReallocAsyncCtx5 + 32 | 0; //@line 19931
  HEAP32[$624 >> 2] = $18; //@line 19932
  $625 = $ReallocAsyncCtx5 + 36 | 0; //@line 19933
  HEAP32[$625 >> 2] = $20; //@line 19934
  $626 = $ReallocAsyncCtx5 + 40 | 0; //@line 19935
  HEAP32[$626 >> 2] = $22; //@line 19936
  $627 = $ReallocAsyncCtx5 + 44 | 0; //@line 19937
  HEAP32[$627 >> 2] = $24; //@line 19938
  $628 = $ReallocAsyncCtx5 + 48 | 0; //@line 19939
  HEAP32[$628 >> 2] = $26; //@line 19940
  $629 = $ReallocAsyncCtx5 + 52 | 0; //@line 19941
  HEAP32[$629 >> 2] = $28; //@line 19942
  $630 = $ReallocAsyncCtx5 + 56 | 0; //@line 19943
  HEAP32[$630 >> 2] = $30; //@line 19944
  $631 = $ReallocAsyncCtx5 + 60 | 0; //@line 19945
  HEAP32[$631 >> 2] = $32; //@line 19946
  $632 = $ReallocAsyncCtx5 + 64 | 0; //@line 19947
  HEAP32[$632 >> 2] = $34; //@line 19948
  $633 = $ReallocAsyncCtx5 + 68 | 0; //@line 19949
  HEAP32[$633 >> 2] = $36; //@line 19950
  $634 = $ReallocAsyncCtx5 + 72 | 0; //@line 19951
  HEAP32[$634 >> 2] = $38; //@line 19952
  $635 = $ReallocAsyncCtx5 + 76 | 0; //@line 19953
  HEAP32[$635 >> 2] = $40; //@line 19954
  $636 = $ReallocAsyncCtx5 + 80 | 0; //@line 19955
  HEAP32[$636 >> 2] = $42; //@line 19956
  $637 = $ReallocAsyncCtx5 + 84 | 0; //@line 19957
  HEAP32[$637 >> 2] = $44; //@line 19958
  $638 = $ReallocAsyncCtx5 + 88 | 0; //@line 19959
  HEAP32[$638 >> 2] = $46; //@line 19960
  $639 = $ReallocAsyncCtx5 + 92 | 0; //@line 19961
  HEAP32[$639 >> 2] = $48; //@line 19962
  $640 = $ReallocAsyncCtx5 + 96 | 0; //@line 19963
  HEAP32[$640 >> 2] = $50; //@line 19964
  $641 = $ReallocAsyncCtx5 + 100 | 0; //@line 19965
  HEAP32[$641 >> 2] = $52; //@line 19966
  $642 = $ReallocAsyncCtx5 + 104 | 0; //@line 19967
  HEAP32[$642 >> 2] = $54; //@line 19968
  $643 = $ReallocAsyncCtx5 + 108 | 0; //@line 19969
  HEAP8[$643 >> 0] = $604; //@line 19970
  $644 = $ReallocAsyncCtx5 + 112 | 0; //@line 19971
  HEAP32[$644 >> 2] = $56; //@line 19972
  $645 = $ReallocAsyncCtx5 + 116 | 0; //@line 19973
  HEAP32[$645 >> 2] = $58; //@line 19974
  $646 = $ReallocAsyncCtx5 + 120 | 0; //@line 19975
  HEAP32[$646 >> 2] = $60; //@line 19976
  $647 = $ReallocAsyncCtx5 + 124 | 0; //@line 19977
  HEAP32[$647 >> 2] = $62; //@line 19978
  $648 = $ReallocAsyncCtx5 + 128 | 0; //@line 19979
  HEAP32[$648 >> 2] = $64; //@line 19980
  $649 = $ReallocAsyncCtx5 + 132 | 0; //@line 19981
  HEAP32[$649 >> 2] = $68; //@line 19982
  $650 = $ReallocAsyncCtx5 + 136 | 0; //@line 19983
  HEAP32[$650 >> 2] = $70; //@line 19984
  $651 = $ReallocAsyncCtx5 + 140 | 0; //@line 19985
  HEAP32[$651 >> 2] = $72; //@line 19986
  $652 = $ReallocAsyncCtx5 + 144 | 0; //@line 19987
  HEAP32[$652 >> 2] = $74; //@line 19988
  $653 = $ReallocAsyncCtx5 + 148 | 0; //@line 19989
  HEAP32[$653 >> 2] = $76; //@line 19990
  $654 = $ReallocAsyncCtx5 + 152 | 0; //@line 19991
  HEAP32[$654 >> 2] = $78; //@line 19992
  $655 = $ReallocAsyncCtx5 + 156 | 0; //@line 19993
  HEAP32[$655 >> 2] = $80; //@line 19994
  $656 = $ReallocAsyncCtx5 + 160 | 0; //@line 19995
  HEAP32[$656 >> 2] = $82; //@line 19996
  $657 = $ReallocAsyncCtx5 + 164 | 0; //@line 19997
  HEAP32[$657 >> 2] = $84; //@line 19998
  $658 = $ReallocAsyncCtx5 + 168 | 0; //@line 19999
  HEAP32[$658 >> 2] = $86; //@line 20000
  $659 = $ReallocAsyncCtx5 + 172 | 0; //@line 20001
  HEAP32[$659 >> 2] = $88; //@line 20002
  $660 = $ReallocAsyncCtx5 + 176 | 0; //@line 20003
  HEAP32[$660 >> 2] = $90; //@line 20004
  $661 = $ReallocAsyncCtx5 + 180 | 0; //@line 20005
  HEAP32[$661 >> 2] = $92; //@line 20006
  $662 = $ReallocAsyncCtx5 + 184 | 0; //@line 20007
  HEAP32[$662 >> 2] = $94; //@line 20008
  $663 = $ReallocAsyncCtx5 + 188 | 0; //@line 20009
  HEAP32[$663 >> 2] = $96; //@line 20010
  $664 = $ReallocAsyncCtx5 + 192 | 0; //@line 20011
  HEAP32[$664 >> 2] = $98; //@line 20012
  $665 = $ReallocAsyncCtx5 + 196 | 0; //@line 20013
  HEAP32[$665 >> 2] = $100; //@line 20014
  $666 = $ReallocAsyncCtx5 + 200 | 0; //@line 20015
  HEAP32[$666 >> 2] = $104; //@line 20016
  $667 = $ReallocAsyncCtx5 + 204 | 0; //@line 20017
  HEAP32[$667 >> 2] = $106; //@line 20018
  $668 = $ReallocAsyncCtx5 + 208 | 0; //@line 20019
  HEAP32[$668 >> 2] = $108; //@line 20020
  $669 = $ReallocAsyncCtx5 + 212 | 0; //@line 20021
  HEAP32[$669 >> 2] = $110; //@line 20022
  $670 = $ReallocAsyncCtx5 + 216 | 0; //@line 20023
  HEAP32[$670 >> 2] = $112; //@line 20024
  $671 = $ReallocAsyncCtx5 + 220 | 0; //@line 20025
  HEAP32[$671 >> 2] = $114; //@line 20026
  $672 = $ReallocAsyncCtx5 + 224 | 0; //@line 20027
  HEAP32[$672 >> 2] = $116; //@line 20028
  $673 = $ReallocAsyncCtx5 + 228 | 0; //@line 20029
  HEAP32[$673 >> 2] = $118; //@line 20030
  $674 = $ReallocAsyncCtx5 + 232 | 0; //@line 20031
  HEAP32[$674 >> 2] = $120; //@line 20032
  $675 = $ReallocAsyncCtx5 + 236 | 0; //@line 20033
  HEAP32[$675 >> 2] = $122; //@line 20034
  $676 = $ReallocAsyncCtx5 + 240 | 0; //@line 20035
  HEAP32[$676 >> 2] = $124; //@line 20036
  $677 = $ReallocAsyncCtx5 + 244 | 0; //@line 20037
  HEAP32[$677 >> 2] = $126; //@line 20038
  $678 = $ReallocAsyncCtx5 + 248 | 0; //@line 20039
  HEAP32[$678 >> 2] = $128; //@line 20040
  $679 = $ReallocAsyncCtx5 + 252 | 0; //@line 20041
  HEAP32[$679 >> 2] = $130; //@line 20042
  $680 = $ReallocAsyncCtx5 + 256 | 0; //@line 20043
  HEAP32[$680 >> 2] = $132; //@line 20044
  $681 = $ReallocAsyncCtx5 + 260 | 0; //@line 20045
  HEAP32[$681 >> 2] = $134; //@line 20046
  $682 = $ReallocAsyncCtx5 + 264 | 0; //@line 20047
  HEAP32[$682 >> 2] = $136; //@line 20048
  sp = STACKTOP; //@line 20049
  return;
 } else if ((label | 0) == 36) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 20054
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_25($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i104 = 0, $$096$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $234 = 0, $239 = 0, $24 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $352 = 0, $353 = 0, $36 = 0, $364 = 0, $365 = 0, $38 = 0, $4 = 0, $40 = 0, $402 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $478 = 0, $48 = 0, $482 = 0, $486 = 0, $489 = 0, $495 = 0, $498 = 0, $499 = 0, $50 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $58 = 0, $595 = 0, $6 = 0, $60 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20095
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20097
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 20099
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20101
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 20103
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 20105
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 20107
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 20109
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 20111
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 20113
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 20115
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 20117
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 20119
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 20121
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 20123
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 20125
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 20127
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 20129
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 20131
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 20133
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 20135
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 20137
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 20139
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 20141
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 20143
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 20145
 $52 = HEAP8[$0 + 100 >> 0] | 0; //@line 20147
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 20149
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 20151
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 20153
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 20155
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 20157
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 20159
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 20161
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 20163
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 20165
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 20167
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 20169
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 20171
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 20173
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 20175
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 20177
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 20179
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 20181
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 20183
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 20185
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 20187
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 20189
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 20191
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 20193
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 20195
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 20197
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 20199
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 20201
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 20203
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 20205
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 20207
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 20209
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 20211
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 20213
 $120 = HEAP32[$0 + 236 >> 2] | 0; //@line 20215
 $122 = HEAP32[$0 + 240 >> 2] | 0; //@line 20217
 $124 = HEAP32[$0 + 244 >> 2] | 0; //@line 20219
 $126 = HEAP32[$0 + 248 >> 2] | 0; //@line 20221
 $128 = HEAP32[$0 + 252 >> 2] | 0; //@line 20223
 $130 = HEAP32[$0 + 256 >> 2] | 0; //@line 20225
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 20227
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 20229
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 20231
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$46 >> 0] = HEAP8[$74 >> 0] | 0; //@line 20236
  HEAP32[$44 >> 2] = HEAP32[$60 >> 2]; //@line 20238
  HEAP8[$36 >> 0] = HEAP8[$84 >> 0] | 0; //@line 20240
 }
 $352 = HEAP8[$128 >> 0] | 0; //@line 20243
 $353 = $352 & 255; //@line 20244
 if (((-128 - (HEAP8[$118 >> 0] | 0) & 255) + -1 | 0) > ($353 | 0)) {
  HEAP8[$124 + 4 + $353 >> 0] = 5; //@line 20252
  HEAP8[$128 >> 0] = $352 + 2 << 24 >> 24; //@line 20254
  HEAP8[($352 + 1 & 255) + ($124 + 4) >> 0] = $AsyncRetVal; //@line 20257
  HEAP8[$28 >> 0] = 1; //@line 20258
  HEAP8[$102 >> 0] = 1; //@line 20259
  $$0$i104 = 0; //@line 20260
 } else {
  $$0$i104 = -1e3; //@line 20262
 }
 $$0$be = $52; //@line 20264
 $$096$be = $$0$i104; //@line 20264
 L8 : while (1) {
  if (($$0$be & 255) >= ($10 & 255)) {
   label = 33; //@line 20268
   break;
  }
  $137 = $$0$be + 1 << 24 >> 24; //@line 20272
  switch (HEAP8[$134 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 20277
    break L8;
    break;
   }
  case 5:
   {
    label = 9; //@line 20282
    break L8;
    break;
   }
  case 7:
   {
    label = 19; //@line 20287
    break L8;
    break;
   }
  case 9:
   {
    label = 24; //@line 20292
    break L8;
    break;
   }
  case 10:
   {
    label = 29; //@line 20297
    break L8;
    break;
   }
  case 2:
   {
    HEAP32[$6 >> 2] = 0; //@line 20302
    HEAP8[$18 >> 0] = HEAP8[$134 + ($137 & 255) >> 0] | 0; //@line 20307
    HEAP8[$120 >> 0] = HEAP8[$134 + ($$0$be + 2 & 255) >> 0] | 0; //@line 20312
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 20313
    continue L8;
    break;
   }
  case 4:
   {
    $231 = $$0$be + 2 << 24 >> 24; //@line 20318
    $234 = HEAP8[$134 + ($137 & 255) >> 0] | 0; //@line 20321
    HEAP8[$108 >> 0] = $234; //@line 20322
    HEAP16[$86 >> 1] = 1 << ($234 & 255); //@line 20326
    $239 = HEAP8[$128 >> 0] | 0; //@line 20328
    if (($239 & 255) >= (-128 - (HEAP8[$118 >> 0] | 0) & 255)) {
     $$0$be = $231; //@line 20332
     $$096$be = -1e3; //@line 20332
     continue L8;
    }
    HEAP8[$128 >> 0] = $239 + 1 << 24 >> 24; //@line 20338
    HEAP8[($239 & 255) + ($124 + 4) >> 0] = 4; //@line 20339
    HEAP8[$102 >> 0] = 1; //@line 20340
    $$0$be = $231; //@line 20341
    $$096$be = 0; //@line 20341
    continue L8;
    break;
   }
  case 6:
   {
    $364 = HEAP8[$128 >> 0] | 0; //@line 20347
    $365 = $364 & 255; //@line 20348
    if (((-128 - (HEAP8[$118 >> 0] | 0) & 255) + -2 | 0) <= ($365 | 0)) {
     $$0$be = $137; //@line 20354
     $$096$be = -1e3; //@line 20354
     continue L8;
    }
    HEAP8[$124 + 4 + $365 >> 0] = 6; //@line 20359
    HEAP8[($364 + 1 & 255) + ($124 + 4) >> 0] = -1; //@line 20363
    HEAP8[$128 >> 0] = $364 + 3 << 24 >> 24; //@line 20365
    HEAP8[($364 + 2 & 255) + ($124 + 4) >> 0] = $4; //@line 20368
    HEAP8[$102 >> 0] = 1; //@line 20369
    $$0$be = $137; //@line 20370
    $$096$be = 0; //@line 20370
    continue L8;
    break;
   }
  case 8:
   {
    $478 = $$0$be + 2 << 24 >> 24; //@line 20375
    $482 = HEAP8[$134 + ($137 & 255) >> 0] & 15; //@line 20379
    $486 = ($482 + ($482 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 20384
    HEAP32[$80 >> 2] = $486; //@line 20385
    HEAP32[$68 >> 2] = $486 + 1e3; //@line 20387
    $489 = HEAP8[$128 >> 0] | 0; //@line 20389
    if (($489 & 255) >= (-128 - (HEAP8[$118 >> 0] | 0) & 255)) {
     $$0$be = $478; //@line 20393
     $$096$be = -1e3; //@line 20393
     continue L8;
    }
    HEAP8[$128 >> 0] = $489 + 1 << 24 >> 24; //@line 20399
    HEAP8[($489 & 255) + ($124 + 4) >> 0] = 8; //@line 20400
    HEAP8[$28 >> 0] = 1; //@line 20401
    HEAP8[$102 >> 0] = 1; //@line 20402
    $$0$be = $478; //@line 20403
    $$096$be = 0; //@line 20403
    continue L8;
    break;
   }
  default:
   {
    $$0$be = $137; //@line 20408
    $$096$be = -1013; //@line 20408
    continue L8;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$112 >> 0] = 0; //@line 20414
  HEAP8[$76 >> 0] = 0; //@line 20415
  HEAP8[$82 >> 0] = 0; //@line 20416
  HEAP8[$72 >> 0] = 0; //@line 20417
  $148 = $137 & 255; //@line 20418
  $149 = $148 + -1 | 0; //@line 20419
  HEAP32[$100 >> 2] = $134 + $149; //@line 20421
  HEAP8[$110 >> 0] = $42 - $149; //@line 20424
  HEAP8[$98 >> 0] = HEAP8[$94 >> 0] | 0; //@line 20426
  HEAP8[$78 >> 0] = HEAP8[$70 >> 0] | 0; //@line 20428
  HEAP8[$38 >> 0] = HEAP8[$64 >> 0] | 0; //@line 20430
  HEAP8[$30 >> 0] = HEAP8[$50 >> 0] | 0; //@line 20432
  HEAP8[$2 >> 0] = HEAP8[$32 >> 0] | 0; //@line 20434
  $160 = HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] | 0; //@line 20437
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 20438
  $161 = FUNCTION_TABLE_iiiiiii[$160 & 3]($14, $104, $112, $76, $82, $72) | 0; //@line 20439
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 595; //@line 20442
   $162 = $ReallocAsyncCtx + 4 | 0; //@line 20443
   HEAP32[$162 >> 2] = $2; //@line 20444
   $163 = $ReallocAsyncCtx + 8 | 0; //@line 20445
   HEAP8[$163 >> 0] = $4; //@line 20446
   $164 = $ReallocAsyncCtx + 12 | 0; //@line 20447
   HEAP32[$164 >> 2] = $6; //@line 20448
   $165 = $ReallocAsyncCtx + 16 | 0; //@line 20449
   HEAP8[$165 >> 0] = $8; //@line 20450
   $166 = $ReallocAsyncCtx + 17 | 0; //@line 20451
   HEAP8[$166 >> 0] = $10; //@line 20452
   $167 = $ReallocAsyncCtx + 20 | 0; //@line 20453
   HEAP32[$167 >> 2] = $12; //@line 20454
   $168 = $ReallocAsyncCtx + 24 | 0; //@line 20455
   HEAP32[$168 >> 2] = $14; //@line 20456
   $169 = $ReallocAsyncCtx + 28 | 0; //@line 20457
   HEAP32[$169 >> 2] = $16; //@line 20458
   $170 = $ReallocAsyncCtx + 32 | 0; //@line 20459
   HEAP32[$170 >> 2] = $18; //@line 20460
   $171 = $ReallocAsyncCtx + 36 | 0; //@line 20461
   HEAP32[$171 >> 2] = $20; //@line 20462
   $172 = $ReallocAsyncCtx + 40 | 0; //@line 20463
   HEAP32[$172 >> 2] = $22; //@line 20464
   $173 = $ReallocAsyncCtx + 44 | 0; //@line 20465
   HEAP32[$173 >> 2] = $24; //@line 20466
   $174 = $ReallocAsyncCtx + 48 | 0; //@line 20467
   HEAP32[$174 >> 2] = $26; //@line 20468
   $175 = $ReallocAsyncCtx + 52 | 0; //@line 20469
   HEAP32[$175 >> 2] = $28; //@line 20470
   $176 = $ReallocAsyncCtx + 56 | 0; //@line 20471
   HEAP32[$176 >> 2] = $30; //@line 20472
   $177 = $ReallocAsyncCtx + 60 | 0; //@line 20473
   HEAP32[$177 >> 2] = $32; //@line 20474
   $178 = $ReallocAsyncCtx + 64 | 0; //@line 20475
   HEAP32[$178 >> 2] = $34; //@line 20476
   $179 = $ReallocAsyncCtx + 68 | 0; //@line 20477
   HEAP32[$179 >> 2] = $36; //@line 20478
   $180 = $ReallocAsyncCtx + 72 | 0; //@line 20479
   HEAP32[$180 >> 2] = $38; //@line 20480
   $181 = $ReallocAsyncCtx + 76 | 0; //@line 20481
   HEAP32[$181 >> 2] = $40; //@line 20482
   $182 = $ReallocAsyncCtx + 80 | 0; //@line 20483
   HEAP32[$182 >> 2] = $42; //@line 20484
   $183 = $ReallocAsyncCtx + 84 | 0; //@line 20485
   HEAP32[$183 >> 2] = $44; //@line 20486
   $184 = $ReallocAsyncCtx + 88 | 0; //@line 20487
   HEAP32[$184 >> 2] = $46; //@line 20488
   $185 = $ReallocAsyncCtx + 92 | 0; //@line 20489
   HEAP32[$185 >> 2] = $48; //@line 20490
   $186 = $ReallocAsyncCtx + 96 | 0; //@line 20491
   HEAP32[$186 >> 2] = $50; //@line 20492
   $187 = $ReallocAsyncCtx + 100 | 0; //@line 20493
   HEAP32[$187 >> 2] = $54; //@line 20494
   $188 = $ReallocAsyncCtx + 104 | 0; //@line 20495
   HEAP32[$188 >> 2] = $56; //@line 20496
   $189 = $ReallocAsyncCtx + 108 | 0; //@line 20497
   HEAP32[$189 >> 2] = $58; //@line 20498
   $190 = $ReallocAsyncCtx + 112 | 0; //@line 20499
   HEAP32[$190 >> 2] = $60; //@line 20500
   $191 = $ReallocAsyncCtx + 116 | 0; //@line 20501
   HEAP32[$191 >> 2] = $62; //@line 20502
   $192 = $ReallocAsyncCtx + 120 | 0; //@line 20503
   HEAP32[$192 >> 2] = $64; //@line 20504
   $193 = $ReallocAsyncCtx + 124 | 0; //@line 20505
   HEAP32[$193 >> 2] = $66; //@line 20506
   $194 = $ReallocAsyncCtx + 128 | 0; //@line 20507
   HEAP32[$194 >> 2] = $148; //@line 20508
   $195 = $ReallocAsyncCtx + 132 | 0; //@line 20509
   HEAP32[$195 >> 2] = $68; //@line 20510
   $196 = $ReallocAsyncCtx + 136 | 0; //@line 20511
   HEAP32[$196 >> 2] = $70; //@line 20512
   $197 = $ReallocAsyncCtx + 140 | 0; //@line 20513
   HEAP32[$197 >> 2] = $72; //@line 20514
   $198 = $ReallocAsyncCtx + 144 | 0; //@line 20515
   HEAP32[$198 >> 2] = $74; //@line 20516
   $199 = $ReallocAsyncCtx + 148 | 0; //@line 20517
   HEAP32[$199 >> 2] = $76; //@line 20518
   $200 = $ReallocAsyncCtx + 152 | 0; //@line 20519
   HEAP32[$200 >> 2] = $78; //@line 20520
   $201 = $ReallocAsyncCtx + 156 | 0; //@line 20521
   HEAP32[$201 >> 2] = $80; //@line 20522
   $202 = $ReallocAsyncCtx + 160 | 0; //@line 20523
   HEAP32[$202 >> 2] = $82; //@line 20524
   $203 = $ReallocAsyncCtx + 164 | 0; //@line 20525
   HEAP32[$203 >> 2] = $84; //@line 20526
   $204 = $ReallocAsyncCtx + 168 | 0; //@line 20527
   HEAP32[$204 >> 2] = $86; //@line 20528
   $205 = $ReallocAsyncCtx + 172 | 0; //@line 20529
   HEAP32[$205 >> 2] = $88; //@line 20530
   $206 = $ReallocAsyncCtx + 176 | 0; //@line 20531
   HEAP32[$206 >> 2] = $90; //@line 20532
   $207 = $ReallocAsyncCtx + 180 | 0; //@line 20533
   HEAP32[$207 >> 2] = $92; //@line 20534
   $208 = $ReallocAsyncCtx + 184 | 0; //@line 20535
   HEAP32[$208 >> 2] = $94; //@line 20536
   $209 = $ReallocAsyncCtx + 188 | 0; //@line 20537
   HEAP32[$209 >> 2] = $96; //@line 20538
   $210 = $ReallocAsyncCtx + 192 | 0; //@line 20539
   HEAP32[$210 >> 2] = $98; //@line 20540
   $211 = $ReallocAsyncCtx + 196 | 0; //@line 20541
   HEAP32[$211 >> 2] = $100; //@line 20542
   $212 = $ReallocAsyncCtx + 200 | 0; //@line 20543
   HEAP32[$212 >> 2] = $$096$be; //@line 20544
   $213 = $ReallocAsyncCtx + 204 | 0; //@line 20545
   HEAP32[$213 >> 2] = $102; //@line 20546
   $214 = $ReallocAsyncCtx + 208 | 0; //@line 20547
   HEAP32[$214 >> 2] = $104; //@line 20548
   $215 = $ReallocAsyncCtx + 212 | 0; //@line 20549
   HEAP32[$215 >> 2] = $106; //@line 20550
   $216 = $ReallocAsyncCtx + 216 | 0; //@line 20551
   HEAP32[$216 >> 2] = $108; //@line 20552
   $217 = $ReallocAsyncCtx + 220 | 0; //@line 20553
   HEAP32[$217 >> 2] = $110; //@line 20554
   $218 = $ReallocAsyncCtx + 224 | 0; //@line 20555
   HEAP32[$218 >> 2] = $112; //@line 20556
   $219 = $ReallocAsyncCtx + 228 | 0; //@line 20557
   HEAP32[$219 >> 2] = $114; //@line 20558
   $220 = $ReallocAsyncCtx + 232 | 0; //@line 20559
   HEAP32[$220 >> 2] = $116; //@line 20560
   $221 = $ReallocAsyncCtx + 236 | 0; //@line 20561
   HEAP32[$221 >> 2] = $118; //@line 20562
   $222 = $ReallocAsyncCtx + 240 | 0; //@line 20563
   HEAP32[$222 >> 2] = $120; //@line 20564
   $223 = $ReallocAsyncCtx + 244 | 0; //@line 20565
   HEAP32[$223 >> 2] = $122; //@line 20566
   $224 = $ReallocAsyncCtx + 248 | 0; //@line 20567
   HEAP32[$224 >> 2] = $124; //@line 20568
   $225 = $ReallocAsyncCtx + 252 | 0; //@line 20569
   HEAP32[$225 >> 2] = $126; //@line 20570
   $226 = $ReallocAsyncCtx + 256 | 0; //@line 20571
   HEAP32[$226 >> 2] = $128; //@line 20572
   $227 = $ReallocAsyncCtx + 260 | 0; //@line 20573
   HEAP32[$227 >> 2] = $130; //@line 20574
   $228 = $ReallocAsyncCtx + 264 | 0; //@line 20575
   HEAP32[$228 >> 2] = $132; //@line 20576
   $229 = $ReallocAsyncCtx + 268 | 0; //@line 20577
   HEAP32[$229 >> 2] = $134; //@line 20578
   sp = STACKTOP; //@line 20579
   return;
  }
  HEAP8[___async_retval >> 0] = $161; //@line 20583
  ___async_unwind = 0; //@line 20584
  HEAP32[$ReallocAsyncCtx >> 2] = 595; //@line 20585
  $162 = $ReallocAsyncCtx + 4 | 0; //@line 20586
  HEAP32[$162 >> 2] = $2; //@line 20587
  $163 = $ReallocAsyncCtx + 8 | 0; //@line 20588
  HEAP8[$163 >> 0] = $4; //@line 20589
  $164 = $ReallocAsyncCtx + 12 | 0; //@line 20590
  HEAP32[$164 >> 2] = $6; //@line 20591
  $165 = $ReallocAsyncCtx + 16 | 0; //@line 20592
  HEAP8[$165 >> 0] = $8; //@line 20593
  $166 = $ReallocAsyncCtx + 17 | 0; //@line 20594
  HEAP8[$166 >> 0] = $10; //@line 20595
  $167 = $ReallocAsyncCtx + 20 | 0; //@line 20596
  HEAP32[$167 >> 2] = $12; //@line 20597
  $168 = $ReallocAsyncCtx + 24 | 0; //@line 20598
  HEAP32[$168 >> 2] = $14; //@line 20599
  $169 = $ReallocAsyncCtx + 28 | 0; //@line 20600
  HEAP32[$169 >> 2] = $16; //@line 20601
  $170 = $ReallocAsyncCtx + 32 | 0; //@line 20602
  HEAP32[$170 >> 2] = $18; //@line 20603
  $171 = $ReallocAsyncCtx + 36 | 0; //@line 20604
  HEAP32[$171 >> 2] = $20; //@line 20605
  $172 = $ReallocAsyncCtx + 40 | 0; //@line 20606
  HEAP32[$172 >> 2] = $22; //@line 20607
  $173 = $ReallocAsyncCtx + 44 | 0; //@line 20608
  HEAP32[$173 >> 2] = $24; //@line 20609
  $174 = $ReallocAsyncCtx + 48 | 0; //@line 20610
  HEAP32[$174 >> 2] = $26; //@line 20611
  $175 = $ReallocAsyncCtx + 52 | 0; //@line 20612
  HEAP32[$175 >> 2] = $28; //@line 20613
  $176 = $ReallocAsyncCtx + 56 | 0; //@line 20614
  HEAP32[$176 >> 2] = $30; //@line 20615
  $177 = $ReallocAsyncCtx + 60 | 0; //@line 20616
  HEAP32[$177 >> 2] = $32; //@line 20617
  $178 = $ReallocAsyncCtx + 64 | 0; //@line 20618
  HEAP32[$178 >> 2] = $34; //@line 20619
  $179 = $ReallocAsyncCtx + 68 | 0; //@line 20620
  HEAP32[$179 >> 2] = $36; //@line 20621
  $180 = $ReallocAsyncCtx + 72 | 0; //@line 20622
  HEAP32[$180 >> 2] = $38; //@line 20623
  $181 = $ReallocAsyncCtx + 76 | 0; //@line 20624
  HEAP32[$181 >> 2] = $40; //@line 20625
  $182 = $ReallocAsyncCtx + 80 | 0; //@line 20626
  HEAP32[$182 >> 2] = $42; //@line 20627
  $183 = $ReallocAsyncCtx + 84 | 0; //@line 20628
  HEAP32[$183 >> 2] = $44; //@line 20629
  $184 = $ReallocAsyncCtx + 88 | 0; //@line 20630
  HEAP32[$184 >> 2] = $46; //@line 20631
  $185 = $ReallocAsyncCtx + 92 | 0; //@line 20632
  HEAP32[$185 >> 2] = $48; //@line 20633
  $186 = $ReallocAsyncCtx + 96 | 0; //@line 20634
  HEAP32[$186 >> 2] = $50; //@line 20635
  $187 = $ReallocAsyncCtx + 100 | 0; //@line 20636
  HEAP32[$187 >> 2] = $54; //@line 20637
  $188 = $ReallocAsyncCtx + 104 | 0; //@line 20638
  HEAP32[$188 >> 2] = $56; //@line 20639
  $189 = $ReallocAsyncCtx + 108 | 0; //@line 20640
  HEAP32[$189 >> 2] = $58; //@line 20641
  $190 = $ReallocAsyncCtx + 112 | 0; //@line 20642
  HEAP32[$190 >> 2] = $60; //@line 20643
  $191 = $ReallocAsyncCtx + 116 | 0; //@line 20644
  HEAP32[$191 >> 2] = $62; //@line 20645
  $192 = $ReallocAsyncCtx + 120 | 0; //@line 20646
  HEAP32[$192 >> 2] = $64; //@line 20647
  $193 = $ReallocAsyncCtx + 124 | 0; //@line 20648
  HEAP32[$193 >> 2] = $66; //@line 20649
  $194 = $ReallocAsyncCtx + 128 | 0; //@line 20650
  HEAP32[$194 >> 2] = $148; //@line 20651
  $195 = $ReallocAsyncCtx + 132 | 0; //@line 20652
  HEAP32[$195 >> 2] = $68; //@line 20653
  $196 = $ReallocAsyncCtx + 136 | 0; //@line 20654
  HEAP32[$196 >> 2] = $70; //@line 20655
  $197 = $ReallocAsyncCtx + 140 | 0; //@line 20656
  HEAP32[$197 >> 2] = $72; //@line 20657
  $198 = $ReallocAsyncCtx + 144 | 0; //@line 20658
  HEAP32[$198 >> 2] = $74; //@line 20659
  $199 = $ReallocAsyncCtx + 148 | 0; //@line 20660
  HEAP32[$199 >> 2] = $76; //@line 20661
  $200 = $ReallocAsyncCtx + 152 | 0; //@line 20662
  HEAP32[$200 >> 2] = $78; //@line 20663
  $201 = $ReallocAsyncCtx + 156 | 0; //@line 20664
  HEAP32[$201 >> 2] = $80; //@line 20665
  $202 = $ReallocAsyncCtx + 160 | 0; //@line 20666
  HEAP32[$202 >> 2] = $82; //@line 20667
  $203 = $ReallocAsyncCtx + 164 | 0; //@line 20668
  HEAP32[$203 >> 2] = $84; //@line 20669
  $204 = $ReallocAsyncCtx + 168 | 0; //@line 20670
  HEAP32[$204 >> 2] = $86; //@line 20671
  $205 = $ReallocAsyncCtx + 172 | 0; //@line 20672
  HEAP32[$205 >> 2] = $88; //@line 20673
  $206 = $ReallocAsyncCtx + 176 | 0; //@line 20674
  HEAP32[$206 >> 2] = $90; //@line 20675
  $207 = $ReallocAsyncCtx + 180 | 0; //@line 20676
  HEAP32[$207 >> 2] = $92; //@line 20677
  $208 = $ReallocAsyncCtx + 184 | 0; //@line 20678
  HEAP32[$208 >> 2] = $94; //@line 20679
  $209 = $ReallocAsyncCtx + 188 | 0; //@line 20680
  HEAP32[$209 >> 2] = $96; //@line 20681
  $210 = $ReallocAsyncCtx + 192 | 0; //@line 20682
  HEAP32[$210 >> 2] = $98; //@line 20683
  $211 = $ReallocAsyncCtx + 196 | 0; //@line 20684
  HEAP32[$211 >> 2] = $100; //@line 20685
  $212 = $ReallocAsyncCtx + 200 | 0; //@line 20686
  HEAP32[$212 >> 2] = $$096$be; //@line 20687
  $213 = $ReallocAsyncCtx + 204 | 0; //@line 20688
  HEAP32[$213 >> 2] = $102; //@line 20689
  $214 = $ReallocAsyncCtx + 208 | 0; //@line 20690
  HEAP32[$214 >> 2] = $104; //@line 20691
  $215 = $ReallocAsyncCtx + 212 | 0; //@line 20692
  HEAP32[$215 >> 2] = $106; //@line 20693
  $216 = $ReallocAsyncCtx + 216 | 0; //@line 20694
  HEAP32[$216 >> 2] = $108; //@line 20695
  $217 = $ReallocAsyncCtx + 220 | 0; //@line 20696
  HEAP32[$217 >> 2] = $110; //@line 20697
  $218 = $ReallocAsyncCtx + 224 | 0; //@line 20698
  HEAP32[$218 >> 2] = $112; //@line 20699
  $219 = $ReallocAsyncCtx + 228 | 0; //@line 20700
  HEAP32[$219 >> 2] = $114; //@line 20701
  $220 = $ReallocAsyncCtx + 232 | 0; //@line 20702
  HEAP32[$220 >> 2] = $116; //@line 20703
  $221 = $ReallocAsyncCtx + 236 | 0; //@line 20704
  HEAP32[$221 >> 2] = $118; //@line 20705
  $222 = $ReallocAsyncCtx + 240 | 0; //@line 20706
  HEAP32[$222 >> 2] = $120; //@line 20707
  $223 = $ReallocAsyncCtx + 244 | 0; //@line 20708
  HEAP32[$223 >> 2] = $122; //@line 20709
  $224 = $ReallocAsyncCtx + 248 | 0; //@line 20710
  HEAP32[$224 >> 2] = $124; //@line 20711
  $225 = $ReallocAsyncCtx + 252 | 0; //@line 20712
  HEAP32[$225 >> 2] = $126; //@line 20713
  $226 = $ReallocAsyncCtx + 256 | 0; //@line 20714
  HEAP32[$226 >> 2] = $128; //@line 20715
  $227 = $ReallocAsyncCtx + 260 | 0; //@line 20716
  HEAP32[$227 >> 2] = $130; //@line 20717
  $228 = $ReallocAsyncCtx + 264 | 0; //@line 20718
  HEAP32[$228 >> 2] = $132; //@line 20719
  $229 = $ReallocAsyncCtx + 268 | 0; //@line 20720
  HEAP32[$229 >> 2] = $134; //@line 20721
  sp = STACKTOP; //@line 20722
  return;
 } else if ((label | 0) == 9) {
  $247 = HEAP8[$134 + ($137 & 255) >> 0] | 0; //@line 20728
  HEAP8[$84 >> 0] = ($247 & 255) >>> 4 & 7; //@line 20733
  HEAP8[$74 >> 0] = $247 & 15; //@line 20735
  $266 = $$0$be + 5 << 24 >> 24; //@line 20749
  HEAP32[$60 >> 2] = (HEAPU8[$134 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$134 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$134 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 20757
  $276 = HEAP32[(HEAP32[$54 >> 2] | 0) + 40 >> 2] | 0; //@line 20760
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 20761
  $277 = FUNCTION_TABLE_iii[$276 & 31]($14, $96) | 0; //@line 20762
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 596; //@line 20765
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 20766
   HEAP32[$278 >> 2] = $2; //@line 20767
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 20768
   HEAP8[$279 >> 0] = $4; //@line 20769
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 20770
   HEAP32[$280 >> 2] = $6; //@line 20771
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 20772
   HEAP8[$281 >> 0] = $8; //@line 20773
   $282 = $ReallocAsyncCtx2 + 17 | 0; //@line 20774
   HEAP8[$282 >> 0] = $10; //@line 20775
   $283 = $ReallocAsyncCtx2 + 20 | 0; //@line 20776
   HEAP32[$283 >> 2] = $12; //@line 20777
   $284 = $ReallocAsyncCtx2 + 24 | 0; //@line 20778
   HEAP32[$284 >> 2] = $14; //@line 20779
   $285 = $ReallocAsyncCtx2 + 28 | 0; //@line 20780
   HEAP32[$285 >> 2] = $16; //@line 20781
   $286 = $ReallocAsyncCtx2 + 32 | 0; //@line 20782
   HEAP32[$286 >> 2] = $18; //@line 20783
   $287 = $ReallocAsyncCtx2 + 36 | 0; //@line 20784
   HEAP32[$287 >> 2] = $20; //@line 20785
   $288 = $ReallocAsyncCtx2 + 40 | 0; //@line 20786
   HEAP32[$288 >> 2] = $22; //@line 20787
   $289 = $ReallocAsyncCtx2 + 44 | 0; //@line 20788
   HEAP32[$289 >> 2] = $24; //@line 20789
   $290 = $ReallocAsyncCtx2 + 48 | 0; //@line 20790
   HEAP32[$290 >> 2] = $26; //@line 20791
   $291 = $ReallocAsyncCtx2 + 52 | 0; //@line 20792
   HEAP32[$291 >> 2] = $28; //@line 20793
   $292 = $ReallocAsyncCtx2 + 56 | 0; //@line 20794
   HEAP32[$292 >> 2] = $30; //@line 20795
   $293 = $ReallocAsyncCtx2 + 60 | 0; //@line 20796
   HEAP32[$293 >> 2] = $32; //@line 20797
   $294 = $ReallocAsyncCtx2 + 64 | 0; //@line 20798
   HEAP32[$294 >> 2] = $34; //@line 20799
   $295 = $ReallocAsyncCtx2 + 68 | 0; //@line 20800
   HEAP32[$295 >> 2] = $36; //@line 20801
   $296 = $ReallocAsyncCtx2 + 72 | 0; //@line 20802
   HEAP32[$296 >> 2] = $38; //@line 20803
   $297 = $ReallocAsyncCtx2 + 76 | 0; //@line 20804
   HEAP32[$297 >> 2] = $40; //@line 20805
   $298 = $ReallocAsyncCtx2 + 80 | 0; //@line 20806
   HEAP32[$298 >> 2] = $42; //@line 20807
   $299 = $ReallocAsyncCtx2 + 84 | 0; //@line 20808
   HEAP32[$299 >> 2] = $44; //@line 20809
   $300 = $ReallocAsyncCtx2 + 88 | 0; //@line 20810
   HEAP32[$300 >> 2] = $46; //@line 20811
   $301 = $ReallocAsyncCtx2 + 92 | 0; //@line 20812
   HEAP32[$301 >> 2] = $48; //@line 20813
   $302 = $ReallocAsyncCtx2 + 96 | 0; //@line 20814
   HEAP32[$302 >> 2] = $50; //@line 20815
   $303 = $ReallocAsyncCtx2 + 100 | 0; //@line 20816
   HEAP8[$303 >> 0] = $266; //@line 20817
   $304 = $ReallocAsyncCtx2 + 104 | 0; //@line 20818
   HEAP32[$304 >> 2] = $54; //@line 20819
   $305 = $ReallocAsyncCtx2 + 108 | 0; //@line 20820
   HEAP32[$305 >> 2] = $56; //@line 20821
   $306 = $ReallocAsyncCtx2 + 112 | 0; //@line 20822
   HEAP32[$306 >> 2] = $58; //@line 20823
   $307 = $ReallocAsyncCtx2 + 116 | 0; //@line 20824
   HEAP32[$307 >> 2] = $60; //@line 20825
   $308 = $ReallocAsyncCtx2 + 120 | 0; //@line 20826
   HEAP32[$308 >> 2] = $62; //@line 20827
   $309 = $ReallocAsyncCtx2 + 124 | 0; //@line 20828
   HEAP32[$309 >> 2] = $64; //@line 20829
   $310 = $ReallocAsyncCtx2 + 128 | 0; //@line 20830
   HEAP32[$310 >> 2] = $66; //@line 20831
   $311 = $ReallocAsyncCtx2 + 132 | 0; //@line 20832
   HEAP32[$311 >> 2] = $68; //@line 20833
   $312 = $ReallocAsyncCtx2 + 136 | 0; //@line 20834
   HEAP32[$312 >> 2] = $70; //@line 20835
   $313 = $ReallocAsyncCtx2 + 140 | 0; //@line 20836
   HEAP32[$313 >> 2] = $72; //@line 20837
   $314 = $ReallocAsyncCtx2 + 144 | 0; //@line 20838
   HEAP32[$314 >> 2] = $74; //@line 20839
   $315 = $ReallocAsyncCtx2 + 148 | 0; //@line 20840
   HEAP32[$315 >> 2] = $76; //@line 20841
   $316 = $ReallocAsyncCtx2 + 152 | 0; //@line 20842
   HEAP32[$316 >> 2] = $78; //@line 20843
   $317 = $ReallocAsyncCtx2 + 156 | 0; //@line 20844
   HEAP32[$317 >> 2] = $80; //@line 20845
   $318 = $ReallocAsyncCtx2 + 160 | 0; //@line 20846
   HEAP32[$318 >> 2] = $82; //@line 20847
   $319 = $ReallocAsyncCtx2 + 164 | 0; //@line 20848
   HEAP32[$319 >> 2] = $84; //@line 20849
   $320 = $ReallocAsyncCtx2 + 168 | 0; //@line 20850
   HEAP32[$320 >> 2] = $86; //@line 20851
   $321 = $ReallocAsyncCtx2 + 172 | 0; //@line 20852
   HEAP32[$321 >> 2] = $88; //@line 20853
   $322 = $ReallocAsyncCtx2 + 176 | 0; //@line 20854
   HEAP32[$322 >> 2] = $90; //@line 20855
   $323 = $ReallocAsyncCtx2 + 180 | 0; //@line 20856
   HEAP32[$323 >> 2] = $92; //@line 20857
   $324 = $ReallocAsyncCtx2 + 184 | 0; //@line 20858
   HEAP32[$324 >> 2] = $94; //@line 20859
   $325 = $ReallocAsyncCtx2 + 188 | 0; //@line 20860
   HEAP32[$325 >> 2] = $96; //@line 20861
   $326 = $ReallocAsyncCtx2 + 192 | 0; //@line 20862
   HEAP32[$326 >> 2] = $98; //@line 20863
   $327 = $ReallocAsyncCtx2 + 196 | 0; //@line 20864
   HEAP32[$327 >> 2] = $100; //@line 20865
   $328 = $ReallocAsyncCtx2 + 200 | 0; //@line 20866
   HEAP32[$328 >> 2] = $102; //@line 20867
   $329 = $ReallocAsyncCtx2 + 204 | 0; //@line 20868
   HEAP32[$329 >> 2] = $104; //@line 20869
   $330 = $ReallocAsyncCtx2 + 208 | 0; //@line 20870
   HEAP32[$330 >> 2] = $106; //@line 20871
   $331 = $ReallocAsyncCtx2 + 212 | 0; //@line 20872
   HEAP32[$331 >> 2] = $108; //@line 20873
   $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 20874
   HEAP32[$332 >> 2] = $110; //@line 20875
   $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 20876
   HEAP32[$333 >> 2] = $112; //@line 20877
   $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 20878
   HEAP32[$334 >> 2] = $114; //@line 20879
   $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 20880
   HEAP32[$335 >> 2] = $116; //@line 20881
   $336 = $ReallocAsyncCtx2 + 232 | 0; //@line 20882
   HEAP32[$336 >> 2] = $118; //@line 20883
   $337 = $ReallocAsyncCtx2 + 236 | 0; //@line 20884
   HEAP32[$337 >> 2] = $120; //@line 20885
   $338 = $ReallocAsyncCtx2 + 240 | 0; //@line 20886
   HEAP32[$338 >> 2] = $122; //@line 20887
   $339 = $ReallocAsyncCtx2 + 244 | 0; //@line 20888
   HEAP32[$339 >> 2] = $124; //@line 20889
   $340 = $ReallocAsyncCtx2 + 248 | 0; //@line 20890
   HEAP32[$340 >> 2] = $126; //@line 20891
   $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 20892
   HEAP32[$341 >> 2] = $128; //@line 20893
   $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 20894
   HEAP32[$342 >> 2] = $130; //@line 20895
   $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 20896
   HEAP32[$343 >> 2] = $132; //@line 20897
   $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 20898
   HEAP32[$344 >> 2] = $134; //@line 20899
   sp = STACKTOP; //@line 20900
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 20904
  ___async_unwind = 0; //@line 20905
  HEAP32[$ReallocAsyncCtx2 >> 2] = 596; //@line 20906
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 20907
  HEAP32[$278 >> 2] = $2; //@line 20908
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 20909
  HEAP8[$279 >> 0] = $4; //@line 20910
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 20911
  HEAP32[$280 >> 2] = $6; //@line 20912
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 20913
  HEAP8[$281 >> 0] = $8; //@line 20914
  $282 = $ReallocAsyncCtx2 + 17 | 0; //@line 20915
  HEAP8[$282 >> 0] = $10; //@line 20916
  $283 = $ReallocAsyncCtx2 + 20 | 0; //@line 20917
  HEAP32[$283 >> 2] = $12; //@line 20918
  $284 = $ReallocAsyncCtx2 + 24 | 0; //@line 20919
  HEAP32[$284 >> 2] = $14; //@line 20920
  $285 = $ReallocAsyncCtx2 + 28 | 0; //@line 20921
  HEAP32[$285 >> 2] = $16; //@line 20922
  $286 = $ReallocAsyncCtx2 + 32 | 0; //@line 20923
  HEAP32[$286 >> 2] = $18; //@line 20924
  $287 = $ReallocAsyncCtx2 + 36 | 0; //@line 20925
  HEAP32[$287 >> 2] = $20; //@line 20926
  $288 = $ReallocAsyncCtx2 + 40 | 0; //@line 20927
  HEAP32[$288 >> 2] = $22; //@line 20928
  $289 = $ReallocAsyncCtx2 + 44 | 0; //@line 20929
  HEAP32[$289 >> 2] = $24; //@line 20930
  $290 = $ReallocAsyncCtx2 + 48 | 0; //@line 20931
  HEAP32[$290 >> 2] = $26; //@line 20932
  $291 = $ReallocAsyncCtx2 + 52 | 0; //@line 20933
  HEAP32[$291 >> 2] = $28; //@line 20934
  $292 = $ReallocAsyncCtx2 + 56 | 0; //@line 20935
  HEAP32[$292 >> 2] = $30; //@line 20936
  $293 = $ReallocAsyncCtx2 + 60 | 0; //@line 20937
  HEAP32[$293 >> 2] = $32; //@line 20938
  $294 = $ReallocAsyncCtx2 + 64 | 0; //@line 20939
  HEAP32[$294 >> 2] = $34; //@line 20940
  $295 = $ReallocAsyncCtx2 + 68 | 0; //@line 20941
  HEAP32[$295 >> 2] = $36; //@line 20942
  $296 = $ReallocAsyncCtx2 + 72 | 0; //@line 20943
  HEAP32[$296 >> 2] = $38; //@line 20944
  $297 = $ReallocAsyncCtx2 + 76 | 0; //@line 20945
  HEAP32[$297 >> 2] = $40; //@line 20946
  $298 = $ReallocAsyncCtx2 + 80 | 0; //@line 20947
  HEAP32[$298 >> 2] = $42; //@line 20948
  $299 = $ReallocAsyncCtx2 + 84 | 0; //@line 20949
  HEAP32[$299 >> 2] = $44; //@line 20950
  $300 = $ReallocAsyncCtx2 + 88 | 0; //@line 20951
  HEAP32[$300 >> 2] = $46; //@line 20952
  $301 = $ReallocAsyncCtx2 + 92 | 0; //@line 20953
  HEAP32[$301 >> 2] = $48; //@line 20954
  $302 = $ReallocAsyncCtx2 + 96 | 0; //@line 20955
  HEAP32[$302 >> 2] = $50; //@line 20956
  $303 = $ReallocAsyncCtx2 + 100 | 0; //@line 20957
  HEAP8[$303 >> 0] = $266; //@line 20958
  $304 = $ReallocAsyncCtx2 + 104 | 0; //@line 20959
  HEAP32[$304 >> 2] = $54; //@line 20960
  $305 = $ReallocAsyncCtx2 + 108 | 0; //@line 20961
  HEAP32[$305 >> 2] = $56; //@line 20962
  $306 = $ReallocAsyncCtx2 + 112 | 0; //@line 20963
  HEAP32[$306 >> 2] = $58; //@line 20964
  $307 = $ReallocAsyncCtx2 + 116 | 0; //@line 20965
  HEAP32[$307 >> 2] = $60; //@line 20966
  $308 = $ReallocAsyncCtx2 + 120 | 0; //@line 20967
  HEAP32[$308 >> 2] = $62; //@line 20968
  $309 = $ReallocAsyncCtx2 + 124 | 0; //@line 20969
  HEAP32[$309 >> 2] = $64; //@line 20970
  $310 = $ReallocAsyncCtx2 + 128 | 0; //@line 20971
  HEAP32[$310 >> 2] = $66; //@line 20972
  $311 = $ReallocAsyncCtx2 + 132 | 0; //@line 20973
  HEAP32[$311 >> 2] = $68; //@line 20974
  $312 = $ReallocAsyncCtx2 + 136 | 0; //@line 20975
  HEAP32[$312 >> 2] = $70; //@line 20976
  $313 = $ReallocAsyncCtx2 + 140 | 0; //@line 20977
  HEAP32[$313 >> 2] = $72; //@line 20978
  $314 = $ReallocAsyncCtx2 + 144 | 0; //@line 20979
  HEAP32[$314 >> 2] = $74; //@line 20980
  $315 = $ReallocAsyncCtx2 + 148 | 0; //@line 20981
  HEAP32[$315 >> 2] = $76; //@line 20982
  $316 = $ReallocAsyncCtx2 + 152 | 0; //@line 20983
  HEAP32[$316 >> 2] = $78; //@line 20984
  $317 = $ReallocAsyncCtx2 + 156 | 0; //@line 20985
  HEAP32[$317 >> 2] = $80; //@line 20986
  $318 = $ReallocAsyncCtx2 + 160 | 0; //@line 20987
  HEAP32[$318 >> 2] = $82; //@line 20988
  $319 = $ReallocAsyncCtx2 + 164 | 0; //@line 20989
  HEAP32[$319 >> 2] = $84; //@line 20990
  $320 = $ReallocAsyncCtx2 + 168 | 0; //@line 20991
  HEAP32[$320 >> 2] = $86; //@line 20992
  $321 = $ReallocAsyncCtx2 + 172 | 0; //@line 20993
  HEAP32[$321 >> 2] = $88; //@line 20994
  $322 = $ReallocAsyncCtx2 + 176 | 0; //@line 20995
  HEAP32[$322 >> 2] = $90; //@line 20996
  $323 = $ReallocAsyncCtx2 + 180 | 0; //@line 20997
  HEAP32[$323 >> 2] = $92; //@line 20998
  $324 = $ReallocAsyncCtx2 + 184 | 0; //@line 20999
  HEAP32[$324 >> 2] = $94; //@line 21000
  $325 = $ReallocAsyncCtx2 + 188 | 0; //@line 21001
  HEAP32[$325 >> 2] = $96; //@line 21002
  $326 = $ReallocAsyncCtx2 + 192 | 0; //@line 21003
  HEAP32[$326 >> 2] = $98; //@line 21004
  $327 = $ReallocAsyncCtx2 + 196 | 0; //@line 21005
  HEAP32[$327 >> 2] = $100; //@line 21006
  $328 = $ReallocAsyncCtx2 + 200 | 0; //@line 21007
  HEAP32[$328 >> 2] = $102; //@line 21008
  $329 = $ReallocAsyncCtx2 + 204 | 0; //@line 21009
  HEAP32[$329 >> 2] = $104; //@line 21010
  $330 = $ReallocAsyncCtx2 + 208 | 0; //@line 21011
  HEAP32[$330 >> 2] = $106; //@line 21012
  $331 = $ReallocAsyncCtx2 + 212 | 0; //@line 21013
  HEAP32[$331 >> 2] = $108; //@line 21014
  $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 21015
  HEAP32[$332 >> 2] = $110; //@line 21016
  $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 21017
  HEAP32[$333 >> 2] = $112; //@line 21018
  $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 21019
  HEAP32[$334 >> 2] = $114; //@line 21020
  $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 21021
  HEAP32[$335 >> 2] = $116; //@line 21022
  $336 = $ReallocAsyncCtx2 + 232 | 0; //@line 21023
  HEAP32[$336 >> 2] = $118; //@line 21024
  $337 = $ReallocAsyncCtx2 + 236 | 0; //@line 21025
  HEAP32[$337 >> 2] = $120; //@line 21026
  $338 = $ReallocAsyncCtx2 + 240 | 0; //@line 21027
  HEAP32[$338 >> 2] = $122; //@line 21028
  $339 = $ReallocAsyncCtx2 + 244 | 0; //@line 21029
  HEAP32[$339 >> 2] = $124; //@line 21030
  $340 = $ReallocAsyncCtx2 + 248 | 0; //@line 21031
  HEAP32[$340 >> 2] = $126; //@line 21032
  $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 21033
  HEAP32[$341 >> 2] = $128; //@line 21034
  $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 21035
  HEAP32[$342 >> 2] = $130; //@line 21036
  $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 21037
  HEAP32[$343 >> 2] = $132; //@line 21038
  $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 21039
  HEAP32[$344 >> 2] = $134; //@line 21040
  sp = STACKTOP; //@line 21041
  return;
 } else if ((label | 0) == 19) {
  HEAP8[$130 >> 0] = HEAP8[$134 + ($137 & 255) >> 0] | 0; //@line 21049
  HEAP32[$116 >> 2] = $66; //@line 21050
  HEAP32[$114 >> 2] = (HEAPU8[$134 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$134 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$134 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 21071
  HEAP32[$106 >> 2] = 0; //@line 21072
  $402 = $$0$be + 6 << 24 >> 24; //@line 21073
  HEAP8[$88 >> 0] = HEAP8[$134 + ($$0$be + 5 & 255) >> 0] | 0; //@line 21077
  $408 = HEAP32[(HEAP32[$92 >> 2] | 0) + 8 >> 2] | 0; //@line 21080
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 21081
  $409 = FUNCTION_TABLE_iii[$408 & 31]($14, $90) | 0; //@line 21082
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 597; //@line 21085
   $410 = $ReallocAsyncCtx3 + 4 | 0; //@line 21086
   HEAP32[$410 >> 2] = $2; //@line 21087
   $411 = $ReallocAsyncCtx3 + 8 | 0; //@line 21088
   HEAP8[$411 >> 0] = $4; //@line 21089
   $412 = $ReallocAsyncCtx3 + 12 | 0; //@line 21090
   HEAP32[$412 >> 2] = $6; //@line 21091
   $413 = $ReallocAsyncCtx3 + 16 | 0; //@line 21092
   HEAP8[$413 >> 0] = $8; //@line 21093
   $414 = $ReallocAsyncCtx3 + 17 | 0; //@line 21094
   HEAP8[$414 >> 0] = $10; //@line 21095
   $415 = $ReallocAsyncCtx3 + 20 | 0; //@line 21096
   HEAP32[$415 >> 2] = $12; //@line 21097
   $416 = $ReallocAsyncCtx3 + 24 | 0; //@line 21098
   HEAP32[$416 >> 2] = $14; //@line 21099
   $417 = $ReallocAsyncCtx3 + 28 | 0; //@line 21100
   HEAP32[$417 >> 2] = $16; //@line 21101
   $418 = $ReallocAsyncCtx3 + 32 | 0; //@line 21102
   HEAP32[$418 >> 2] = $18; //@line 21103
   $419 = $ReallocAsyncCtx3 + 36 | 0; //@line 21104
   HEAP32[$419 >> 2] = $20; //@line 21105
   $420 = $ReallocAsyncCtx3 + 40 | 0; //@line 21106
   HEAP32[$420 >> 2] = $22; //@line 21107
   $421 = $ReallocAsyncCtx3 + 44 | 0; //@line 21108
   HEAP32[$421 >> 2] = $24; //@line 21109
   $422 = $ReallocAsyncCtx3 + 48 | 0; //@line 21110
   HEAP32[$422 >> 2] = $26; //@line 21111
   $423 = $ReallocAsyncCtx3 + 52 | 0; //@line 21112
   HEAP32[$423 >> 2] = $28; //@line 21113
   $424 = $ReallocAsyncCtx3 + 56 | 0; //@line 21114
   HEAP32[$424 >> 2] = $30; //@line 21115
   $425 = $ReallocAsyncCtx3 + 60 | 0; //@line 21116
   HEAP32[$425 >> 2] = $32; //@line 21117
   $426 = $ReallocAsyncCtx3 + 64 | 0; //@line 21118
   HEAP32[$426 >> 2] = $34; //@line 21119
   $427 = $ReallocAsyncCtx3 + 68 | 0; //@line 21120
   HEAP32[$427 >> 2] = $36; //@line 21121
   $428 = $ReallocAsyncCtx3 + 72 | 0; //@line 21122
   HEAP32[$428 >> 2] = $38; //@line 21123
   $429 = $ReallocAsyncCtx3 + 76 | 0; //@line 21124
   HEAP32[$429 >> 2] = $40; //@line 21125
   $430 = $ReallocAsyncCtx3 + 80 | 0; //@line 21126
   HEAP32[$430 >> 2] = $42; //@line 21127
   $431 = $ReallocAsyncCtx3 + 84 | 0; //@line 21128
   HEAP32[$431 >> 2] = $44; //@line 21129
   $432 = $ReallocAsyncCtx3 + 88 | 0; //@line 21130
   HEAP32[$432 >> 2] = $46; //@line 21131
   $433 = $ReallocAsyncCtx3 + 92 | 0; //@line 21132
   HEAP32[$433 >> 2] = $48; //@line 21133
   $434 = $ReallocAsyncCtx3 + 96 | 0; //@line 21134
   HEAP32[$434 >> 2] = $50; //@line 21135
   $435 = $ReallocAsyncCtx3 + 100 | 0; //@line 21136
   HEAP32[$435 >> 2] = $54; //@line 21137
   $436 = $ReallocAsyncCtx3 + 104 | 0; //@line 21138
   HEAP32[$436 >> 2] = $56; //@line 21139
   $437 = $ReallocAsyncCtx3 + 108 | 0; //@line 21140
   HEAP8[$437 >> 0] = $402; //@line 21141
   $438 = $ReallocAsyncCtx3 + 112 | 0; //@line 21142
   HEAP32[$438 >> 2] = $58; //@line 21143
   $439 = $ReallocAsyncCtx3 + 116 | 0; //@line 21144
   HEAP32[$439 >> 2] = $60; //@line 21145
   $440 = $ReallocAsyncCtx3 + 120 | 0; //@line 21146
   HEAP32[$440 >> 2] = $62; //@line 21147
   $441 = $ReallocAsyncCtx3 + 124 | 0; //@line 21148
   HEAP32[$441 >> 2] = $64; //@line 21149
   $442 = $ReallocAsyncCtx3 + 128 | 0; //@line 21150
   HEAP32[$442 >> 2] = $66; //@line 21151
   $443 = $ReallocAsyncCtx3 + 132 | 0; //@line 21152
   HEAP32[$443 >> 2] = $68; //@line 21153
   $444 = $ReallocAsyncCtx3 + 136 | 0; //@line 21154
   HEAP32[$444 >> 2] = $70; //@line 21155
   $445 = $ReallocAsyncCtx3 + 140 | 0; //@line 21156
   HEAP32[$445 >> 2] = $72; //@line 21157
   $446 = $ReallocAsyncCtx3 + 144 | 0; //@line 21158
   HEAP32[$446 >> 2] = $74; //@line 21159
   $447 = $ReallocAsyncCtx3 + 148 | 0; //@line 21160
   HEAP32[$447 >> 2] = $76; //@line 21161
   $448 = $ReallocAsyncCtx3 + 152 | 0; //@line 21162
   HEAP32[$448 >> 2] = $78; //@line 21163
   $449 = $ReallocAsyncCtx3 + 156 | 0; //@line 21164
   HEAP32[$449 >> 2] = $80; //@line 21165
   $450 = $ReallocAsyncCtx3 + 160 | 0; //@line 21166
   HEAP32[$450 >> 2] = $82; //@line 21167
   $451 = $ReallocAsyncCtx3 + 164 | 0; //@line 21168
   HEAP32[$451 >> 2] = $84; //@line 21169
   $452 = $ReallocAsyncCtx3 + 168 | 0; //@line 21170
   HEAP32[$452 >> 2] = $86; //@line 21171
   $453 = $ReallocAsyncCtx3 + 172 | 0; //@line 21172
   HEAP32[$453 >> 2] = $88; //@line 21173
   $454 = $ReallocAsyncCtx3 + 176 | 0; //@line 21174
   HEAP32[$454 >> 2] = $90; //@line 21175
   $455 = $ReallocAsyncCtx3 + 180 | 0; //@line 21176
   HEAP32[$455 >> 2] = $92; //@line 21177
   $456 = $ReallocAsyncCtx3 + 184 | 0; //@line 21178
   HEAP32[$456 >> 2] = $94; //@line 21179
   $457 = $ReallocAsyncCtx3 + 188 | 0; //@line 21180
   HEAP32[$457 >> 2] = $96; //@line 21181
   $458 = $ReallocAsyncCtx3 + 192 | 0; //@line 21182
   HEAP32[$458 >> 2] = $98; //@line 21183
   $459 = $ReallocAsyncCtx3 + 196 | 0; //@line 21184
   HEAP32[$459 >> 2] = $100; //@line 21185
   $460 = $ReallocAsyncCtx3 + 200 | 0; //@line 21186
   HEAP32[$460 >> 2] = $102; //@line 21187
   $461 = $ReallocAsyncCtx3 + 204 | 0; //@line 21188
   HEAP32[$461 >> 2] = $104; //@line 21189
   $462 = $ReallocAsyncCtx3 + 208 | 0; //@line 21190
   HEAP32[$462 >> 2] = $106; //@line 21191
   $463 = $ReallocAsyncCtx3 + 212 | 0; //@line 21192
   HEAP32[$463 >> 2] = $108; //@line 21193
   $464 = $ReallocAsyncCtx3 + 216 | 0; //@line 21194
   HEAP32[$464 >> 2] = $110; //@line 21195
   $465 = $ReallocAsyncCtx3 + 220 | 0; //@line 21196
   HEAP32[$465 >> 2] = $112; //@line 21197
   $466 = $ReallocAsyncCtx3 + 224 | 0; //@line 21198
   HEAP32[$466 >> 2] = $114; //@line 21199
   $467 = $ReallocAsyncCtx3 + 228 | 0; //@line 21200
   HEAP32[$467 >> 2] = $116; //@line 21201
   $468 = $ReallocAsyncCtx3 + 232 | 0; //@line 21202
   HEAP32[$468 >> 2] = $118; //@line 21203
   $469 = $ReallocAsyncCtx3 + 236 | 0; //@line 21204
   HEAP32[$469 >> 2] = $120; //@line 21205
   $470 = $ReallocAsyncCtx3 + 240 | 0; //@line 21206
   HEAP32[$470 >> 2] = $122; //@line 21207
   $471 = $ReallocAsyncCtx3 + 244 | 0; //@line 21208
   HEAP32[$471 >> 2] = $124; //@line 21209
   $472 = $ReallocAsyncCtx3 + 248 | 0; //@line 21210
   HEAP32[$472 >> 2] = $126; //@line 21211
   $473 = $ReallocAsyncCtx3 + 252 | 0; //@line 21212
   HEAP32[$473 >> 2] = $128; //@line 21213
   $474 = $ReallocAsyncCtx3 + 256 | 0; //@line 21214
   HEAP32[$474 >> 2] = $130; //@line 21215
   $475 = $ReallocAsyncCtx3 + 260 | 0; //@line 21216
   HEAP32[$475 >> 2] = $132; //@line 21217
   $476 = $ReallocAsyncCtx3 + 264 | 0; //@line 21218
   HEAP32[$476 >> 2] = $134; //@line 21219
   sp = STACKTOP; //@line 21220
   return;
  }
  HEAP8[___async_retval >> 0] = $409; //@line 21224
  ___async_unwind = 0; //@line 21225
  HEAP32[$ReallocAsyncCtx3 >> 2] = 597; //@line 21226
  $410 = $ReallocAsyncCtx3 + 4 | 0; //@line 21227
  HEAP32[$410 >> 2] = $2; //@line 21228
  $411 = $ReallocAsyncCtx3 + 8 | 0; //@line 21229
  HEAP8[$411 >> 0] = $4; //@line 21230
  $412 = $ReallocAsyncCtx3 + 12 | 0; //@line 21231
  HEAP32[$412 >> 2] = $6; //@line 21232
  $413 = $ReallocAsyncCtx3 + 16 | 0; //@line 21233
  HEAP8[$413 >> 0] = $8; //@line 21234
  $414 = $ReallocAsyncCtx3 + 17 | 0; //@line 21235
  HEAP8[$414 >> 0] = $10; //@line 21236
  $415 = $ReallocAsyncCtx3 + 20 | 0; //@line 21237
  HEAP32[$415 >> 2] = $12; //@line 21238
  $416 = $ReallocAsyncCtx3 + 24 | 0; //@line 21239
  HEAP32[$416 >> 2] = $14; //@line 21240
  $417 = $ReallocAsyncCtx3 + 28 | 0; //@line 21241
  HEAP32[$417 >> 2] = $16; //@line 21242
  $418 = $ReallocAsyncCtx3 + 32 | 0; //@line 21243
  HEAP32[$418 >> 2] = $18; //@line 21244
  $419 = $ReallocAsyncCtx3 + 36 | 0; //@line 21245
  HEAP32[$419 >> 2] = $20; //@line 21246
  $420 = $ReallocAsyncCtx3 + 40 | 0; //@line 21247
  HEAP32[$420 >> 2] = $22; //@line 21248
  $421 = $ReallocAsyncCtx3 + 44 | 0; //@line 21249
  HEAP32[$421 >> 2] = $24; //@line 21250
  $422 = $ReallocAsyncCtx3 + 48 | 0; //@line 21251
  HEAP32[$422 >> 2] = $26; //@line 21252
  $423 = $ReallocAsyncCtx3 + 52 | 0; //@line 21253
  HEAP32[$423 >> 2] = $28; //@line 21254
  $424 = $ReallocAsyncCtx3 + 56 | 0; //@line 21255
  HEAP32[$424 >> 2] = $30; //@line 21256
  $425 = $ReallocAsyncCtx3 + 60 | 0; //@line 21257
  HEAP32[$425 >> 2] = $32; //@line 21258
  $426 = $ReallocAsyncCtx3 + 64 | 0; //@line 21259
  HEAP32[$426 >> 2] = $34; //@line 21260
  $427 = $ReallocAsyncCtx3 + 68 | 0; //@line 21261
  HEAP32[$427 >> 2] = $36; //@line 21262
  $428 = $ReallocAsyncCtx3 + 72 | 0; //@line 21263
  HEAP32[$428 >> 2] = $38; //@line 21264
  $429 = $ReallocAsyncCtx3 + 76 | 0; //@line 21265
  HEAP32[$429 >> 2] = $40; //@line 21266
  $430 = $ReallocAsyncCtx3 + 80 | 0; //@line 21267
  HEAP32[$430 >> 2] = $42; //@line 21268
  $431 = $ReallocAsyncCtx3 + 84 | 0; //@line 21269
  HEAP32[$431 >> 2] = $44; //@line 21270
  $432 = $ReallocAsyncCtx3 + 88 | 0; //@line 21271
  HEAP32[$432 >> 2] = $46; //@line 21272
  $433 = $ReallocAsyncCtx3 + 92 | 0; //@line 21273
  HEAP32[$433 >> 2] = $48; //@line 21274
  $434 = $ReallocAsyncCtx3 + 96 | 0; //@line 21275
  HEAP32[$434 >> 2] = $50; //@line 21276
  $435 = $ReallocAsyncCtx3 + 100 | 0; //@line 21277
  HEAP32[$435 >> 2] = $54; //@line 21278
  $436 = $ReallocAsyncCtx3 + 104 | 0; //@line 21279
  HEAP32[$436 >> 2] = $56; //@line 21280
  $437 = $ReallocAsyncCtx3 + 108 | 0; //@line 21281
  HEAP8[$437 >> 0] = $402; //@line 21282
  $438 = $ReallocAsyncCtx3 + 112 | 0; //@line 21283
  HEAP32[$438 >> 2] = $58; //@line 21284
  $439 = $ReallocAsyncCtx3 + 116 | 0; //@line 21285
  HEAP32[$439 >> 2] = $60; //@line 21286
  $440 = $ReallocAsyncCtx3 + 120 | 0; //@line 21287
  HEAP32[$440 >> 2] = $62; //@line 21288
  $441 = $ReallocAsyncCtx3 + 124 | 0; //@line 21289
  HEAP32[$441 >> 2] = $64; //@line 21290
  $442 = $ReallocAsyncCtx3 + 128 | 0; //@line 21291
  HEAP32[$442 >> 2] = $66; //@line 21292
  $443 = $ReallocAsyncCtx3 + 132 | 0; //@line 21293
  HEAP32[$443 >> 2] = $68; //@line 21294
  $444 = $ReallocAsyncCtx3 + 136 | 0; //@line 21295
  HEAP32[$444 >> 2] = $70; //@line 21296
  $445 = $ReallocAsyncCtx3 + 140 | 0; //@line 21297
  HEAP32[$445 >> 2] = $72; //@line 21298
  $446 = $ReallocAsyncCtx3 + 144 | 0; //@line 21299
  HEAP32[$446 >> 2] = $74; //@line 21300
  $447 = $ReallocAsyncCtx3 + 148 | 0; //@line 21301
  HEAP32[$447 >> 2] = $76; //@line 21302
  $448 = $ReallocAsyncCtx3 + 152 | 0; //@line 21303
  HEAP32[$448 >> 2] = $78; //@line 21304
  $449 = $ReallocAsyncCtx3 + 156 | 0; //@line 21305
  HEAP32[$449 >> 2] = $80; //@line 21306
  $450 = $ReallocAsyncCtx3 + 160 | 0; //@line 21307
  HEAP32[$450 >> 2] = $82; //@line 21308
  $451 = $ReallocAsyncCtx3 + 164 | 0; //@line 21309
  HEAP32[$451 >> 2] = $84; //@line 21310
  $452 = $ReallocAsyncCtx3 + 168 | 0; //@line 21311
  HEAP32[$452 >> 2] = $86; //@line 21312
  $453 = $ReallocAsyncCtx3 + 172 | 0; //@line 21313
  HEAP32[$453 >> 2] = $88; //@line 21314
  $454 = $ReallocAsyncCtx3 + 176 | 0; //@line 21315
  HEAP32[$454 >> 2] = $90; //@line 21316
  $455 = $ReallocAsyncCtx3 + 180 | 0; //@line 21317
  HEAP32[$455 >> 2] = $92; //@line 21318
  $456 = $ReallocAsyncCtx3 + 184 | 0; //@line 21319
  HEAP32[$456 >> 2] = $94; //@line 21320
  $457 = $ReallocAsyncCtx3 + 188 | 0; //@line 21321
  HEAP32[$457 >> 2] = $96; //@line 21322
  $458 = $ReallocAsyncCtx3 + 192 | 0; //@line 21323
  HEAP32[$458 >> 2] = $98; //@line 21324
  $459 = $ReallocAsyncCtx3 + 196 | 0; //@line 21325
  HEAP32[$459 >> 2] = $100; //@line 21326
  $460 = $ReallocAsyncCtx3 + 200 | 0; //@line 21327
  HEAP32[$460 >> 2] = $102; //@line 21328
  $461 = $ReallocAsyncCtx3 + 204 | 0; //@line 21329
  HEAP32[$461 >> 2] = $104; //@line 21330
  $462 = $ReallocAsyncCtx3 + 208 | 0; //@line 21331
  HEAP32[$462 >> 2] = $106; //@line 21332
  $463 = $ReallocAsyncCtx3 + 212 | 0; //@line 21333
  HEAP32[$463 >> 2] = $108; //@line 21334
  $464 = $ReallocAsyncCtx3 + 216 | 0; //@line 21335
  HEAP32[$464 >> 2] = $110; //@line 21336
  $465 = $ReallocAsyncCtx3 + 220 | 0; //@line 21337
  HEAP32[$465 >> 2] = $112; //@line 21338
  $466 = $ReallocAsyncCtx3 + 224 | 0; //@line 21339
  HEAP32[$466 >> 2] = $114; //@line 21340
  $467 = $ReallocAsyncCtx3 + 228 | 0; //@line 21341
  HEAP32[$467 >> 2] = $116; //@line 21342
  $468 = $ReallocAsyncCtx3 + 232 | 0; //@line 21343
  HEAP32[$468 >> 2] = $118; //@line 21344
  $469 = $ReallocAsyncCtx3 + 236 | 0; //@line 21345
  HEAP32[$469 >> 2] = $120; //@line 21346
  $470 = $ReallocAsyncCtx3 + 240 | 0; //@line 21347
  HEAP32[$470 >> 2] = $122; //@line 21348
  $471 = $ReallocAsyncCtx3 + 244 | 0; //@line 21349
  HEAP32[$471 >> 2] = $124; //@line 21350
  $472 = $ReallocAsyncCtx3 + 248 | 0; //@line 21351
  HEAP32[$472 >> 2] = $126; //@line 21352
  $473 = $ReallocAsyncCtx3 + 252 | 0; //@line 21353
  HEAP32[$473 >> 2] = $128; //@line 21354
  $474 = $ReallocAsyncCtx3 + 256 | 0; //@line 21355
  HEAP32[$474 >> 2] = $130; //@line 21356
  $475 = $ReallocAsyncCtx3 + 260 | 0; //@line 21357
  HEAP32[$475 >> 2] = $132; //@line 21358
  $476 = $ReallocAsyncCtx3 + 264 | 0; //@line 21359
  HEAP32[$476 >> 2] = $134; //@line 21360
  sp = STACKTOP; //@line 21361
  return;
 } else if ((label | 0) == 24) {
  $495 = $$0$be + 2 << 24 >> 24; //@line 21365
  $498 = HEAP8[$134 + ($137 & 255) >> 0] | 0; //@line 21368
  HEAP8[$58 >> 0] = 0; //@line 21369
  $499 = $498 & 255; //@line 21370
  HEAP8[$48 >> 0] = $499 >>> 5 & 1; //@line 21374
  if ($499 & 16 | 0) {
   HEAP8[$58 >> 0] = 1; //@line 21378
  }
  HEAP8[$40 >> 0] = $499 & 15; //@line 21382
  $508 = HEAP32[(HEAP32[$34 >> 2] | 0) + 44 >> 2] | 0; //@line 21385
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 21386
  $509 = FUNCTION_TABLE_iii[$508 & 31]($14, $62) | 0; //@line 21387
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 598; //@line 21390
   $510 = $ReallocAsyncCtx4 + 4 | 0; //@line 21391
   HEAP32[$510 >> 2] = $2; //@line 21392
   $511 = $ReallocAsyncCtx4 + 8 | 0; //@line 21393
   HEAP8[$511 >> 0] = $4; //@line 21394
   $512 = $ReallocAsyncCtx4 + 12 | 0; //@line 21395
   HEAP32[$512 >> 2] = $6; //@line 21396
   $513 = $ReallocAsyncCtx4 + 16 | 0; //@line 21397
   HEAP8[$513 >> 0] = $8; //@line 21398
   $514 = $ReallocAsyncCtx4 + 17 | 0; //@line 21399
   HEAP8[$514 >> 0] = $10; //@line 21400
   $515 = $ReallocAsyncCtx4 + 20 | 0; //@line 21401
   HEAP32[$515 >> 2] = $12; //@line 21402
   $516 = $ReallocAsyncCtx4 + 24 | 0; //@line 21403
   HEAP32[$516 >> 2] = $14; //@line 21404
   $517 = $ReallocAsyncCtx4 + 28 | 0; //@line 21405
   HEAP32[$517 >> 2] = $16; //@line 21406
   $518 = $ReallocAsyncCtx4 + 32 | 0; //@line 21407
   HEAP32[$518 >> 2] = $18; //@line 21408
   $519 = $ReallocAsyncCtx4 + 36 | 0; //@line 21409
   HEAP32[$519 >> 2] = $20; //@line 21410
   $520 = $ReallocAsyncCtx4 + 40 | 0; //@line 21411
   HEAP32[$520 >> 2] = $22; //@line 21412
   $521 = $ReallocAsyncCtx4 + 44 | 0; //@line 21413
   HEAP32[$521 >> 2] = $24; //@line 21414
   $522 = $ReallocAsyncCtx4 + 48 | 0; //@line 21415
   HEAP32[$522 >> 2] = $26; //@line 21416
   $523 = $ReallocAsyncCtx4 + 52 | 0; //@line 21417
   HEAP32[$523 >> 2] = $28; //@line 21418
   $524 = $ReallocAsyncCtx4 + 56 | 0; //@line 21419
   HEAP32[$524 >> 2] = $30; //@line 21420
   $525 = $ReallocAsyncCtx4 + 60 | 0; //@line 21421
   HEAP8[$525 >> 0] = $495; //@line 21422
   $526 = $ReallocAsyncCtx4 + 64 | 0; //@line 21423
   HEAP32[$526 >> 2] = $32; //@line 21424
   $527 = $ReallocAsyncCtx4 + 68 | 0; //@line 21425
   HEAP32[$527 >> 2] = $34; //@line 21426
   $528 = $ReallocAsyncCtx4 + 72 | 0; //@line 21427
   HEAP32[$528 >> 2] = $36; //@line 21428
   $529 = $ReallocAsyncCtx4 + 76 | 0; //@line 21429
   HEAP32[$529 >> 2] = $38; //@line 21430
   $530 = $ReallocAsyncCtx4 + 80 | 0; //@line 21431
   HEAP32[$530 >> 2] = $40; //@line 21432
   $531 = $ReallocAsyncCtx4 + 84 | 0; //@line 21433
   HEAP32[$531 >> 2] = $42; //@line 21434
   $532 = $ReallocAsyncCtx4 + 88 | 0; //@line 21435
   HEAP32[$532 >> 2] = $44; //@line 21436
   $533 = $ReallocAsyncCtx4 + 92 | 0; //@line 21437
   HEAP32[$533 >> 2] = $46; //@line 21438
   $534 = $ReallocAsyncCtx4 + 96 | 0; //@line 21439
   HEAP32[$534 >> 2] = $48; //@line 21440
   $535 = $ReallocAsyncCtx4 + 100 | 0; //@line 21441
   HEAP32[$535 >> 2] = $50; //@line 21442
   $536 = $ReallocAsyncCtx4 + 104 | 0; //@line 21443
   HEAP32[$536 >> 2] = $54; //@line 21444
   $537 = $ReallocAsyncCtx4 + 108 | 0; //@line 21445
   HEAP32[$537 >> 2] = $56; //@line 21446
   $538 = $ReallocAsyncCtx4 + 112 | 0; //@line 21447
   HEAP32[$538 >> 2] = $58; //@line 21448
   $539 = $ReallocAsyncCtx4 + 116 | 0; //@line 21449
   HEAP32[$539 >> 2] = $60; //@line 21450
   $540 = $ReallocAsyncCtx4 + 120 | 0; //@line 21451
   HEAP32[$540 >> 2] = $62; //@line 21452
   $541 = $ReallocAsyncCtx4 + 124 | 0; //@line 21453
   HEAP32[$541 >> 2] = $64; //@line 21454
   $542 = $ReallocAsyncCtx4 + 128 | 0; //@line 21455
   HEAP32[$542 >> 2] = $66; //@line 21456
   $543 = $ReallocAsyncCtx4 + 132 | 0; //@line 21457
   HEAP32[$543 >> 2] = $68; //@line 21458
   $544 = $ReallocAsyncCtx4 + 136 | 0; //@line 21459
   HEAP32[$544 >> 2] = $70; //@line 21460
   $545 = $ReallocAsyncCtx4 + 140 | 0; //@line 21461
   HEAP32[$545 >> 2] = $72; //@line 21462
   $546 = $ReallocAsyncCtx4 + 144 | 0; //@line 21463
   HEAP32[$546 >> 2] = $74; //@line 21464
   $547 = $ReallocAsyncCtx4 + 148 | 0; //@line 21465
   HEAP32[$547 >> 2] = $76; //@line 21466
   $548 = $ReallocAsyncCtx4 + 152 | 0; //@line 21467
   HEAP32[$548 >> 2] = $78; //@line 21468
   $549 = $ReallocAsyncCtx4 + 156 | 0; //@line 21469
   HEAP32[$549 >> 2] = $80; //@line 21470
   $550 = $ReallocAsyncCtx4 + 160 | 0; //@line 21471
   HEAP32[$550 >> 2] = $82; //@line 21472
   $551 = $ReallocAsyncCtx4 + 164 | 0; //@line 21473
   HEAP32[$551 >> 2] = $84; //@line 21474
   $552 = $ReallocAsyncCtx4 + 168 | 0; //@line 21475
   HEAP32[$552 >> 2] = $86; //@line 21476
   $553 = $ReallocAsyncCtx4 + 172 | 0; //@line 21477
   HEAP32[$553 >> 2] = $88; //@line 21478
   $554 = $ReallocAsyncCtx4 + 176 | 0; //@line 21479
   HEAP32[$554 >> 2] = $90; //@line 21480
   $555 = $ReallocAsyncCtx4 + 180 | 0; //@line 21481
   HEAP32[$555 >> 2] = $92; //@line 21482
   $556 = $ReallocAsyncCtx4 + 184 | 0; //@line 21483
   HEAP32[$556 >> 2] = $94; //@line 21484
   $557 = $ReallocAsyncCtx4 + 188 | 0; //@line 21485
   HEAP32[$557 >> 2] = $96; //@line 21486
   $558 = $ReallocAsyncCtx4 + 192 | 0; //@line 21487
   HEAP32[$558 >> 2] = $98; //@line 21488
   $559 = $ReallocAsyncCtx4 + 196 | 0; //@line 21489
   HEAP32[$559 >> 2] = $100; //@line 21490
   $560 = $ReallocAsyncCtx4 + 200 | 0; //@line 21491
   HEAP32[$560 >> 2] = $$096$be; //@line 21492
   $561 = $ReallocAsyncCtx4 + 204 | 0; //@line 21493
   HEAP32[$561 >> 2] = $102; //@line 21494
   $562 = $ReallocAsyncCtx4 + 208 | 0; //@line 21495
   HEAP32[$562 >> 2] = $104; //@line 21496
   $563 = $ReallocAsyncCtx4 + 212 | 0; //@line 21497
   HEAP32[$563 >> 2] = $106; //@line 21498
   $564 = $ReallocAsyncCtx4 + 216 | 0; //@line 21499
   HEAP32[$564 >> 2] = $108; //@line 21500
   $565 = $ReallocAsyncCtx4 + 220 | 0; //@line 21501
   HEAP32[$565 >> 2] = $110; //@line 21502
   $566 = $ReallocAsyncCtx4 + 224 | 0; //@line 21503
   HEAP32[$566 >> 2] = $112; //@line 21504
   $567 = $ReallocAsyncCtx4 + 228 | 0; //@line 21505
   HEAP32[$567 >> 2] = $114; //@line 21506
   $568 = $ReallocAsyncCtx4 + 232 | 0; //@line 21507
   HEAP32[$568 >> 2] = $116; //@line 21508
   $569 = $ReallocAsyncCtx4 + 236 | 0; //@line 21509
   HEAP32[$569 >> 2] = $118; //@line 21510
   $570 = $ReallocAsyncCtx4 + 240 | 0; //@line 21511
   HEAP32[$570 >> 2] = $120; //@line 21512
   $571 = $ReallocAsyncCtx4 + 244 | 0; //@line 21513
   HEAP32[$571 >> 2] = $122; //@line 21514
   $572 = $ReallocAsyncCtx4 + 248 | 0; //@line 21515
   HEAP32[$572 >> 2] = $124; //@line 21516
   $573 = $ReallocAsyncCtx4 + 252 | 0; //@line 21517
   HEAP32[$573 >> 2] = $126; //@line 21518
   $574 = $ReallocAsyncCtx4 + 256 | 0; //@line 21519
   HEAP32[$574 >> 2] = $128; //@line 21520
   $575 = $ReallocAsyncCtx4 + 260 | 0; //@line 21521
   HEAP32[$575 >> 2] = $130; //@line 21522
   $576 = $ReallocAsyncCtx4 + 264 | 0; //@line 21523
   HEAP32[$576 >> 2] = $132; //@line 21524
   $577 = $ReallocAsyncCtx4 + 268 | 0; //@line 21525
   HEAP32[$577 >> 2] = $134; //@line 21526
   sp = STACKTOP; //@line 21527
   return;
  }
  HEAP8[___async_retval >> 0] = $509 & 1; //@line 21532
  ___async_unwind = 0; //@line 21533
  HEAP32[$ReallocAsyncCtx4 >> 2] = 598; //@line 21534
  $510 = $ReallocAsyncCtx4 + 4 | 0; //@line 21535
  HEAP32[$510 >> 2] = $2; //@line 21536
  $511 = $ReallocAsyncCtx4 + 8 | 0; //@line 21537
  HEAP8[$511 >> 0] = $4; //@line 21538
  $512 = $ReallocAsyncCtx4 + 12 | 0; //@line 21539
  HEAP32[$512 >> 2] = $6; //@line 21540
  $513 = $ReallocAsyncCtx4 + 16 | 0; //@line 21541
  HEAP8[$513 >> 0] = $8; //@line 21542
  $514 = $ReallocAsyncCtx4 + 17 | 0; //@line 21543
  HEAP8[$514 >> 0] = $10; //@line 21544
  $515 = $ReallocAsyncCtx4 + 20 | 0; //@line 21545
  HEAP32[$515 >> 2] = $12; //@line 21546
  $516 = $ReallocAsyncCtx4 + 24 | 0; //@line 21547
  HEAP32[$516 >> 2] = $14; //@line 21548
  $517 = $ReallocAsyncCtx4 + 28 | 0; //@line 21549
  HEAP32[$517 >> 2] = $16; //@line 21550
  $518 = $ReallocAsyncCtx4 + 32 | 0; //@line 21551
  HEAP32[$518 >> 2] = $18; //@line 21552
  $519 = $ReallocAsyncCtx4 + 36 | 0; //@line 21553
  HEAP32[$519 >> 2] = $20; //@line 21554
  $520 = $ReallocAsyncCtx4 + 40 | 0; //@line 21555
  HEAP32[$520 >> 2] = $22; //@line 21556
  $521 = $ReallocAsyncCtx4 + 44 | 0; //@line 21557
  HEAP32[$521 >> 2] = $24; //@line 21558
  $522 = $ReallocAsyncCtx4 + 48 | 0; //@line 21559
  HEAP32[$522 >> 2] = $26; //@line 21560
  $523 = $ReallocAsyncCtx4 + 52 | 0; //@line 21561
  HEAP32[$523 >> 2] = $28; //@line 21562
  $524 = $ReallocAsyncCtx4 + 56 | 0; //@line 21563
  HEAP32[$524 >> 2] = $30; //@line 21564
  $525 = $ReallocAsyncCtx4 + 60 | 0; //@line 21565
  HEAP8[$525 >> 0] = $495; //@line 21566
  $526 = $ReallocAsyncCtx4 + 64 | 0; //@line 21567
  HEAP32[$526 >> 2] = $32; //@line 21568
  $527 = $ReallocAsyncCtx4 + 68 | 0; //@line 21569
  HEAP32[$527 >> 2] = $34; //@line 21570
  $528 = $ReallocAsyncCtx4 + 72 | 0; //@line 21571
  HEAP32[$528 >> 2] = $36; //@line 21572
  $529 = $ReallocAsyncCtx4 + 76 | 0; //@line 21573
  HEAP32[$529 >> 2] = $38; //@line 21574
  $530 = $ReallocAsyncCtx4 + 80 | 0; //@line 21575
  HEAP32[$530 >> 2] = $40; //@line 21576
  $531 = $ReallocAsyncCtx4 + 84 | 0; //@line 21577
  HEAP32[$531 >> 2] = $42; //@line 21578
  $532 = $ReallocAsyncCtx4 + 88 | 0; //@line 21579
  HEAP32[$532 >> 2] = $44; //@line 21580
  $533 = $ReallocAsyncCtx4 + 92 | 0; //@line 21581
  HEAP32[$533 >> 2] = $46; //@line 21582
  $534 = $ReallocAsyncCtx4 + 96 | 0; //@line 21583
  HEAP32[$534 >> 2] = $48; //@line 21584
  $535 = $ReallocAsyncCtx4 + 100 | 0; //@line 21585
  HEAP32[$535 >> 2] = $50; //@line 21586
  $536 = $ReallocAsyncCtx4 + 104 | 0; //@line 21587
  HEAP32[$536 >> 2] = $54; //@line 21588
  $537 = $ReallocAsyncCtx4 + 108 | 0; //@line 21589
  HEAP32[$537 >> 2] = $56; //@line 21590
  $538 = $ReallocAsyncCtx4 + 112 | 0; //@line 21591
  HEAP32[$538 >> 2] = $58; //@line 21592
  $539 = $ReallocAsyncCtx4 + 116 | 0; //@line 21593
  HEAP32[$539 >> 2] = $60; //@line 21594
  $540 = $ReallocAsyncCtx4 + 120 | 0; //@line 21595
  HEAP32[$540 >> 2] = $62; //@line 21596
  $541 = $ReallocAsyncCtx4 + 124 | 0; //@line 21597
  HEAP32[$541 >> 2] = $64; //@line 21598
  $542 = $ReallocAsyncCtx4 + 128 | 0; //@line 21599
  HEAP32[$542 >> 2] = $66; //@line 21600
  $543 = $ReallocAsyncCtx4 + 132 | 0; //@line 21601
  HEAP32[$543 >> 2] = $68; //@line 21602
  $544 = $ReallocAsyncCtx4 + 136 | 0; //@line 21603
  HEAP32[$544 >> 2] = $70; //@line 21604
  $545 = $ReallocAsyncCtx4 + 140 | 0; //@line 21605
  HEAP32[$545 >> 2] = $72; //@line 21606
  $546 = $ReallocAsyncCtx4 + 144 | 0; //@line 21607
  HEAP32[$546 >> 2] = $74; //@line 21608
  $547 = $ReallocAsyncCtx4 + 148 | 0; //@line 21609
  HEAP32[$547 >> 2] = $76; //@line 21610
  $548 = $ReallocAsyncCtx4 + 152 | 0; //@line 21611
  HEAP32[$548 >> 2] = $78; //@line 21612
  $549 = $ReallocAsyncCtx4 + 156 | 0; //@line 21613
  HEAP32[$549 >> 2] = $80; //@line 21614
  $550 = $ReallocAsyncCtx4 + 160 | 0; //@line 21615
  HEAP32[$550 >> 2] = $82; //@line 21616
  $551 = $ReallocAsyncCtx4 + 164 | 0; //@line 21617
  HEAP32[$551 >> 2] = $84; //@line 21618
  $552 = $ReallocAsyncCtx4 + 168 | 0; //@line 21619
  HEAP32[$552 >> 2] = $86; //@line 21620
  $553 = $ReallocAsyncCtx4 + 172 | 0; //@line 21621
  HEAP32[$553 >> 2] = $88; //@line 21622
  $554 = $ReallocAsyncCtx4 + 176 | 0; //@line 21623
  HEAP32[$554 >> 2] = $90; //@line 21624
  $555 = $ReallocAsyncCtx4 + 180 | 0; //@line 21625
  HEAP32[$555 >> 2] = $92; //@line 21626
  $556 = $ReallocAsyncCtx4 + 184 | 0; //@line 21627
  HEAP32[$556 >> 2] = $94; //@line 21628
  $557 = $ReallocAsyncCtx4 + 188 | 0; //@line 21629
  HEAP32[$557 >> 2] = $96; //@line 21630
  $558 = $ReallocAsyncCtx4 + 192 | 0; //@line 21631
  HEAP32[$558 >> 2] = $98; //@line 21632
  $559 = $ReallocAsyncCtx4 + 196 | 0; //@line 21633
  HEAP32[$559 >> 2] = $100; //@line 21634
  $560 = $ReallocAsyncCtx4 + 200 | 0; //@line 21635
  HEAP32[$560 >> 2] = $$096$be; //@line 21636
  $561 = $ReallocAsyncCtx4 + 204 | 0; //@line 21637
  HEAP32[$561 >> 2] = $102; //@line 21638
  $562 = $ReallocAsyncCtx4 + 208 | 0; //@line 21639
  HEAP32[$562 >> 2] = $104; //@line 21640
  $563 = $ReallocAsyncCtx4 + 212 | 0; //@line 21641
  HEAP32[$563 >> 2] = $106; //@line 21642
  $564 = $ReallocAsyncCtx4 + 216 | 0; //@line 21643
  HEAP32[$564 >> 2] = $108; //@line 21644
  $565 = $ReallocAsyncCtx4 + 220 | 0; //@line 21645
  HEAP32[$565 >> 2] = $110; //@line 21646
  $566 = $ReallocAsyncCtx4 + 224 | 0; //@line 21647
  HEAP32[$566 >> 2] = $112; //@line 21648
  $567 = $ReallocAsyncCtx4 + 228 | 0; //@line 21649
  HEAP32[$567 >> 2] = $114; //@line 21650
  $568 = $ReallocAsyncCtx4 + 232 | 0; //@line 21651
  HEAP32[$568 >> 2] = $116; //@line 21652
  $569 = $ReallocAsyncCtx4 + 236 | 0; //@line 21653
  HEAP32[$569 >> 2] = $118; //@line 21654
  $570 = $ReallocAsyncCtx4 + 240 | 0; //@line 21655
  HEAP32[$570 >> 2] = $120; //@line 21656
  $571 = $ReallocAsyncCtx4 + 244 | 0; //@line 21657
  HEAP32[$571 >> 2] = $122; //@line 21658
  $572 = $ReallocAsyncCtx4 + 248 | 0; //@line 21659
  HEAP32[$572 >> 2] = $124; //@line 21660
  $573 = $ReallocAsyncCtx4 + 252 | 0; //@line 21661
  HEAP32[$573 >> 2] = $126; //@line 21662
  $574 = $ReallocAsyncCtx4 + 256 | 0; //@line 21663
  HEAP32[$574 >> 2] = $128; //@line 21664
  $575 = $ReallocAsyncCtx4 + 260 | 0; //@line 21665
  HEAP32[$575 >> 2] = $130; //@line 21666
  $576 = $ReallocAsyncCtx4 + 264 | 0; //@line 21667
  HEAP32[$576 >> 2] = $132; //@line 21668
  $577 = $ReallocAsyncCtx4 + 268 | 0; //@line 21669
  HEAP32[$577 >> 2] = $134; //@line 21670
  sp = STACKTOP; //@line 21671
  return;
 } else if ((label | 0) == 29) {
  HEAP8[$12 >> 0] = HEAP8[$134 + ($137 & 255) >> 0] | 0; //@line 21679
  $595 = $$0$be + 5 << 24 >> 24; //@line 21692
  HEAP32[$132 >> 2] = (HEAPU8[$134 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$134 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$134 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 21700
  $605 = HEAP32[(HEAP32[$122 >> 2] | 0) + 48 >> 2] | 0; //@line 21703
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 21704
  $606 = FUNCTION_TABLE_iii[$605 & 31]($14, $56) | 0; //@line 21705
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 599; //@line 21708
   $607 = $ReallocAsyncCtx5 + 4 | 0; //@line 21709
   HEAP32[$607 >> 2] = $2; //@line 21710
   $608 = $ReallocAsyncCtx5 + 8 | 0; //@line 21711
   HEAP8[$608 >> 0] = $4; //@line 21712
   $609 = $ReallocAsyncCtx5 + 12 | 0; //@line 21713
   HEAP32[$609 >> 2] = $6; //@line 21714
   $610 = $ReallocAsyncCtx5 + 16 | 0; //@line 21715
   HEAP8[$610 >> 0] = $8; //@line 21716
   $611 = $ReallocAsyncCtx5 + 17 | 0; //@line 21717
   HEAP8[$611 >> 0] = $10; //@line 21718
   $612 = $ReallocAsyncCtx5 + 20 | 0; //@line 21719
   HEAP32[$612 >> 2] = $12; //@line 21720
   $613 = $ReallocAsyncCtx5 + 24 | 0; //@line 21721
   HEAP32[$613 >> 2] = $14; //@line 21722
   $614 = $ReallocAsyncCtx5 + 28 | 0; //@line 21723
   HEAP32[$614 >> 2] = $16; //@line 21724
   $615 = $ReallocAsyncCtx5 + 32 | 0; //@line 21725
   HEAP32[$615 >> 2] = $18; //@line 21726
   $616 = $ReallocAsyncCtx5 + 36 | 0; //@line 21727
   HEAP32[$616 >> 2] = $20; //@line 21728
   $617 = $ReallocAsyncCtx5 + 40 | 0; //@line 21729
   HEAP32[$617 >> 2] = $22; //@line 21730
   $618 = $ReallocAsyncCtx5 + 44 | 0; //@line 21731
   HEAP32[$618 >> 2] = $24; //@line 21732
   $619 = $ReallocAsyncCtx5 + 48 | 0; //@line 21733
   HEAP32[$619 >> 2] = $26; //@line 21734
   $620 = $ReallocAsyncCtx5 + 52 | 0; //@line 21735
   HEAP32[$620 >> 2] = $28; //@line 21736
   $621 = $ReallocAsyncCtx5 + 56 | 0; //@line 21737
   HEAP32[$621 >> 2] = $30; //@line 21738
   $622 = $ReallocAsyncCtx5 + 60 | 0; //@line 21739
   HEAP32[$622 >> 2] = $32; //@line 21740
   $623 = $ReallocAsyncCtx5 + 64 | 0; //@line 21741
   HEAP32[$623 >> 2] = $34; //@line 21742
   $624 = $ReallocAsyncCtx5 + 68 | 0; //@line 21743
   HEAP32[$624 >> 2] = $36; //@line 21744
   $625 = $ReallocAsyncCtx5 + 72 | 0; //@line 21745
   HEAP32[$625 >> 2] = $38; //@line 21746
   $626 = $ReallocAsyncCtx5 + 76 | 0; //@line 21747
   HEAP32[$626 >> 2] = $40; //@line 21748
   $627 = $ReallocAsyncCtx5 + 80 | 0; //@line 21749
   HEAP32[$627 >> 2] = $42; //@line 21750
   $628 = $ReallocAsyncCtx5 + 84 | 0; //@line 21751
   HEAP32[$628 >> 2] = $44; //@line 21752
   $629 = $ReallocAsyncCtx5 + 88 | 0; //@line 21753
   HEAP32[$629 >> 2] = $46; //@line 21754
   $630 = $ReallocAsyncCtx5 + 92 | 0; //@line 21755
   HEAP32[$630 >> 2] = $48; //@line 21756
   $631 = $ReallocAsyncCtx5 + 96 | 0; //@line 21757
   HEAP32[$631 >> 2] = $50; //@line 21758
   $632 = $ReallocAsyncCtx5 + 100 | 0; //@line 21759
   HEAP32[$632 >> 2] = $54; //@line 21760
   $633 = $ReallocAsyncCtx5 + 104 | 0; //@line 21761
   HEAP32[$633 >> 2] = $56; //@line 21762
   $634 = $ReallocAsyncCtx5 + 108 | 0; //@line 21763
   HEAP8[$634 >> 0] = $595; //@line 21764
   $635 = $ReallocAsyncCtx5 + 112 | 0; //@line 21765
   HEAP32[$635 >> 2] = $58; //@line 21766
   $636 = $ReallocAsyncCtx5 + 116 | 0; //@line 21767
   HEAP32[$636 >> 2] = $60; //@line 21768
   $637 = $ReallocAsyncCtx5 + 120 | 0; //@line 21769
   HEAP32[$637 >> 2] = $62; //@line 21770
   $638 = $ReallocAsyncCtx5 + 124 | 0; //@line 21771
   HEAP32[$638 >> 2] = $64; //@line 21772
   $639 = $ReallocAsyncCtx5 + 128 | 0; //@line 21773
   HEAP32[$639 >> 2] = $66; //@line 21774
   $640 = $ReallocAsyncCtx5 + 132 | 0; //@line 21775
   HEAP32[$640 >> 2] = $68; //@line 21776
   $641 = $ReallocAsyncCtx5 + 136 | 0; //@line 21777
   HEAP32[$641 >> 2] = $70; //@line 21778
   $642 = $ReallocAsyncCtx5 + 140 | 0; //@line 21779
   HEAP32[$642 >> 2] = $72; //@line 21780
   $643 = $ReallocAsyncCtx5 + 144 | 0; //@line 21781
   HEAP32[$643 >> 2] = $74; //@line 21782
   $644 = $ReallocAsyncCtx5 + 148 | 0; //@line 21783
   HEAP32[$644 >> 2] = $76; //@line 21784
   $645 = $ReallocAsyncCtx5 + 152 | 0; //@line 21785
   HEAP32[$645 >> 2] = $78; //@line 21786
   $646 = $ReallocAsyncCtx5 + 156 | 0; //@line 21787
   HEAP32[$646 >> 2] = $80; //@line 21788
   $647 = $ReallocAsyncCtx5 + 160 | 0; //@line 21789
   HEAP32[$647 >> 2] = $82; //@line 21790
   $648 = $ReallocAsyncCtx5 + 164 | 0; //@line 21791
   HEAP32[$648 >> 2] = $84; //@line 21792
   $649 = $ReallocAsyncCtx5 + 168 | 0; //@line 21793
   HEAP32[$649 >> 2] = $86; //@line 21794
   $650 = $ReallocAsyncCtx5 + 172 | 0; //@line 21795
   HEAP32[$650 >> 2] = $88; //@line 21796
   $651 = $ReallocAsyncCtx5 + 176 | 0; //@line 21797
   HEAP32[$651 >> 2] = $90; //@line 21798
   $652 = $ReallocAsyncCtx5 + 180 | 0; //@line 21799
   HEAP32[$652 >> 2] = $92; //@line 21800
   $653 = $ReallocAsyncCtx5 + 184 | 0; //@line 21801
   HEAP32[$653 >> 2] = $94; //@line 21802
   $654 = $ReallocAsyncCtx5 + 188 | 0; //@line 21803
   HEAP32[$654 >> 2] = $96; //@line 21804
   $655 = $ReallocAsyncCtx5 + 192 | 0; //@line 21805
   HEAP32[$655 >> 2] = $98; //@line 21806
   $656 = $ReallocAsyncCtx5 + 196 | 0; //@line 21807
   HEAP32[$656 >> 2] = $100; //@line 21808
   $657 = $ReallocAsyncCtx5 + 200 | 0; //@line 21809
   HEAP32[$657 >> 2] = $102; //@line 21810
   $658 = $ReallocAsyncCtx5 + 204 | 0; //@line 21811
   HEAP32[$658 >> 2] = $104; //@line 21812
   $659 = $ReallocAsyncCtx5 + 208 | 0; //@line 21813
   HEAP32[$659 >> 2] = $106; //@line 21814
   $660 = $ReallocAsyncCtx5 + 212 | 0; //@line 21815
   HEAP32[$660 >> 2] = $108; //@line 21816
   $661 = $ReallocAsyncCtx5 + 216 | 0; //@line 21817
   HEAP32[$661 >> 2] = $110; //@line 21818
   $662 = $ReallocAsyncCtx5 + 220 | 0; //@line 21819
   HEAP32[$662 >> 2] = $112; //@line 21820
   $663 = $ReallocAsyncCtx5 + 224 | 0; //@line 21821
   HEAP32[$663 >> 2] = $114; //@line 21822
   $664 = $ReallocAsyncCtx5 + 228 | 0; //@line 21823
   HEAP32[$664 >> 2] = $116; //@line 21824
   $665 = $ReallocAsyncCtx5 + 232 | 0; //@line 21825
   HEAP32[$665 >> 2] = $118; //@line 21826
   $666 = $ReallocAsyncCtx5 + 236 | 0; //@line 21827
   HEAP32[$666 >> 2] = $120; //@line 21828
   $667 = $ReallocAsyncCtx5 + 240 | 0; //@line 21829
   HEAP32[$667 >> 2] = $122; //@line 21830
   $668 = $ReallocAsyncCtx5 + 244 | 0; //@line 21831
   HEAP32[$668 >> 2] = $124; //@line 21832
   $669 = $ReallocAsyncCtx5 + 248 | 0; //@line 21833
   HEAP32[$669 >> 2] = $126; //@line 21834
   $670 = $ReallocAsyncCtx5 + 252 | 0; //@line 21835
   HEAP32[$670 >> 2] = $128; //@line 21836
   $671 = $ReallocAsyncCtx5 + 256 | 0; //@line 21837
   HEAP32[$671 >> 2] = $130; //@line 21838
   $672 = $ReallocAsyncCtx5 + 260 | 0; //@line 21839
   HEAP32[$672 >> 2] = $132; //@line 21840
   $673 = $ReallocAsyncCtx5 + 264 | 0; //@line 21841
   HEAP32[$673 >> 2] = $134; //@line 21842
   sp = STACKTOP; //@line 21843
   return;
  }
  HEAP8[___async_retval >> 0] = $606; //@line 21847
  ___async_unwind = 0; //@line 21848
  HEAP32[$ReallocAsyncCtx5 >> 2] = 599; //@line 21849
  $607 = $ReallocAsyncCtx5 + 4 | 0; //@line 21850
  HEAP32[$607 >> 2] = $2; //@line 21851
  $608 = $ReallocAsyncCtx5 + 8 | 0; //@line 21852
  HEAP8[$608 >> 0] = $4; //@line 21853
  $609 = $ReallocAsyncCtx5 + 12 | 0; //@line 21854
  HEAP32[$609 >> 2] = $6; //@line 21855
  $610 = $ReallocAsyncCtx5 + 16 | 0; //@line 21856
  HEAP8[$610 >> 0] = $8; //@line 21857
  $611 = $ReallocAsyncCtx5 + 17 | 0; //@line 21858
  HEAP8[$611 >> 0] = $10; //@line 21859
  $612 = $ReallocAsyncCtx5 + 20 | 0; //@line 21860
  HEAP32[$612 >> 2] = $12; //@line 21861
  $613 = $ReallocAsyncCtx5 + 24 | 0; //@line 21862
  HEAP32[$613 >> 2] = $14; //@line 21863
  $614 = $ReallocAsyncCtx5 + 28 | 0; //@line 21864
  HEAP32[$614 >> 2] = $16; //@line 21865
  $615 = $ReallocAsyncCtx5 + 32 | 0; //@line 21866
  HEAP32[$615 >> 2] = $18; //@line 21867
  $616 = $ReallocAsyncCtx5 + 36 | 0; //@line 21868
  HEAP32[$616 >> 2] = $20; //@line 21869
  $617 = $ReallocAsyncCtx5 + 40 | 0; //@line 21870
  HEAP32[$617 >> 2] = $22; //@line 21871
  $618 = $ReallocAsyncCtx5 + 44 | 0; //@line 21872
  HEAP32[$618 >> 2] = $24; //@line 21873
  $619 = $ReallocAsyncCtx5 + 48 | 0; //@line 21874
  HEAP32[$619 >> 2] = $26; //@line 21875
  $620 = $ReallocAsyncCtx5 + 52 | 0; //@line 21876
  HEAP32[$620 >> 2] = $28; //@line 21877
  $621 = $ReallocAsyncCtx5 + 56 | 0; //@line 21878
  HEAP32[$621 >> 2] = $30; //@line 21879
  $622 = $ReallocAsyncCtx5 + 60 | 0; //@line 21880
  HEAP32[$622 >> 2] = $32; //@line 21881
  $623 = $ReallocAsyncCtx5 + 64 | 0; //@line 21882
  HEAP32[$623 >> 2] = $34; //@line 21883
  $624 = $ReallocAsyncCtx5 + 68 | 0; //@line 21884
  HEAP32[$624 >> 2] = $36; //@line 21885
  $625 = $ReallocAsyncCtx5 + 72 | 0; //@line 21886
  HEAP32[$625 >> 2] = $38; //@line 21887
  $626 = $ReallocAsyncCtx5 + 76 | 0; //@line 21888
  HEAP32[$626 >> 2] = $40; //@line 21889
  $627 = $ReallocAsyncCtx5 + 80 | 0; //@line 21890
  HEAP32[$627 >> 2] = $42; //@line 21891
  $628 = $ReallocAsyncCtx5 + 84 | 0; //@line 21892
  HEAP32[$628 >> 2] = $44; //@line 21893
  $629 = $ReallocAsyncCtx5 + 88 | 0; //@line 21894
  HEAP32[$629 >> 2] = $46; //@line 21895
  $630 = $ReallocAsyncCtx5 + 92 | 0; //@line 21896
  HEAP32[$630 >> 2] = $48; //@line 21897
  $631 = $ReallocAsyncCtx5 + 96 | 0; //@line 21898
  HEAP32[$631 >> 2] = $50; //@line 21899
  $632 = $ReallocAsyncCtx5 + 100 | 0; //@line 21900
  HEAP32[$632 >> 2] = $54; //@line 21901
  $633 = $ReallocAsyncCtx5 + 104 | 0; //@line 21902
  HEAP32[$633 >> 2] = $56; //@line 21903
  $634 = $ReallocAsyncCtx5 + 108 | 0; //@line 21904
  HEAP8[$634 >> 0] = $595; //@line 21905
  $635 = $ReallocAsyncCtx5 + 112 | 0; //@line 21906
  HEAP32[$635 >> 2] = $58; //@line 21907
  $636 = $ReallocAsyncCtx5 + 116 | 0; //@line 21908
  HEAP32[$636 >> 2] = $60; //@line 21909
  $637 = $ReallocAsyncCtx5 + 120 | 0; //@line 21910
  HEAP32[$637 >> 2] = $62; //@line 21911
  $638 = $ReallocAsyncCtx5 + 124 | 0; //@line 21912
  HEAP32[$638 >> 2] = $64; //@line 21913
  $639 = $ReallocAsyncCtx5 + 128 | 0; //@line 21914
  HEAP32[$639 >> 2] = $66; //@line 21915
  $640 = $ReallocAsyncCtx5 + 132 | 0; //@line 21916
  HEAP32[$640 >> 2] = $68; //@line 21917
  $641 = $ReallocAsyncCtx5 + 136 | 0; //@line 21918
  HEAP32[$641 >> 2] = $70; //@line 21919
  $642 = $ReallocAsyncCtx5 + 140 | 0; //@line 21920
  HEAP32[$642 >> 2] = $72; //@line 21921
  $643 = $ReallocAsyncCtx5 + 144 | 0; //@line 21922
  HEAP32[$643 >> 2] = $74; //@line 21923
  $644 = $ReallocAsyncCtx5 + 148 | 0; //@line 21924
  HEAP32[$644 >> 2] = $76; //@line 21925
  $645 = $ReallocAsyncCtx5 + 152 | 0; //@line 21926
  HEAP32[$645 >> 2] = $78; //@line 21927
  $646 = $ReallocAsyncCtx5 + 156 | 0; //@line 21928
  HEAP32[$646 >> 2] = $80; //@line 21929
  $647 = $ReallocAsyncCtx5 + 160 | 0; //@line 21930
  HEAP32[$647 >> 2] = $82; //@line 21931
  $648 = $ReallocAsyncCtx5 + 164 | 0; //@line 21932
  HEAP32[$648 >> 2] = $84; //@line 21933
  $649 = $ReallocAsyncCtx5 + 168 | 0; //@line 21934
  HEAP32[$649 >> 2] = $86; //@line 21935
  $650 = $ReallocAsyncCtx5 + 172 | 0; //@line 21936
  HEAP32[$650 >> 2] = $88; //@line 21937
  $651 = $ReallocAsyncCtx5 + 176 | 0; //@line 21938
  HEAP32[$651 >> 2] = $90; //@line 21939
  $652 = $ReallocAsyncCtx5 + 180 | 0; //@line 21940
  HEAP32[$652 >> 2] = $92; //@line 21941
  $653 = $ReallocAsyncCtx5 + 184 | 0; //@line 21942
  HEAP32[$653 >> 2] = $94; //@line 21943
  $654 = $ReallocAsyncCtx5 + 188 | 0; //@line 21944
  HEAP32[$654 >> 2] = $96; //@line 21945
  $655 = $ReallocAsyncCtx5 + 192 | 0; //@line 21946
  HEAP32[$655 >> 2] = $98; //@line 21947
  $656 = $ReallocAsyncCtx5 + 196 | 0; //@line 21948
  HEAP32[$656 >> 2] = $100; //@line 21949
  $657 = $ReallocAsyncCtx5 + 200 | 0; //@line 21950
  HEAP32[$657 >> 2] = $102; //@line 21951
  $658 = $ReallocAsyncCtx5 + 204 | 0; //@line 21952
  HEAP32[$658 >> 2] = $104; //@line 21953
  $659 = $ReallocAsyncCtx5 + 208 | 0; //@line 21954
  HEAP32[$659 >> 2] = $106; //@line 21955
  $660 = $ReallocAsyncCtx5 + 212 | 0; //@line 21956
  HEAP32[$660 >> 2] = $108; //@line 21957
  $661 = $ReallocAsyncCtx5 + 216 | 0; //@line 21958
  HEAP32[$661 >> 2] = $110; //@line 21959
  $662 = $ReallocAsyncCtx5 + 220 | 0; //@line 21960
  HEAP32[$662 >> 2] = $112; //@line 21961
  $663 = $ReallocAsyncCtx5 + 224 | 0; //@line 21962
  HEAP32[$663 >> 2] = $114; //@line 21963
  $664 = $ReallocAsyncCtx5 + 228 | 0; //@line 21964
  HEAP32[$664 >> 2] = $116; //@line 21965
  $665 = $ReallocAsyncCtx5 + 232 | 0; //@line 21966
  HEAP32[$665 >> 2] = $118; //@line 21967
  $666 = $ReallocAsyncCtx5 + 236 | 0; //@line 21968
  HEAP32[$666 >> 2] = $120; //@line 21969
  $667 = $ReallocAsyncCtx5 + 240 | 0; //@line 21970
  HEAP32[$667 >> 2] = $122; //@line 21971
  $668 = $ReallocAsyncCtx5 + 244 | 0; //@line 21972
  HEAP32[$668 >> 2] = $124; //@line 21973
  $669 = $ReallocAsyncCtx5 + 248 | 0; //@line 21974
  HEAP32[$669 >> 2] = $126; //@line 21975
  $670 = $ReallocAsyncCtx5 + 252 | 0; //@line 21976
  HEAP32[$670 >> 2] = $128; //@line 21977
  $671 = $ReallocAsyncCtx5 + 256 | 0; //@line 21978
  HEAP32[$671 >> 2] = $130; //@line 21979
  $672 = $ReallocAsyncCtx5 + 260 | 0; //@line 21980
  HEAP32[$672 >> 2] = $132; //@line 21981
  $673 = $ReallocAsyncCtx5 + 264 | 0; //@line 21982
  HEAP32[$673 >> 2] = $134; //@line 21983
  sp = STACKTOP; //@line 21984
  return;
 } else if ((label | 0) == 33) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 21989
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_27($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$096$be = 0, $$2 = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $139 = 0, $14 = 0, $150 = 0, $151 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $233 = 0, $236 = 0, $24 = 0, $241 = 0, $249 = 0, $26 = 0, $268 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $349 = 0, $350 = 0, $36 = 0, $38 = 0, $387 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $463 = 0, $467 = 0, $471 = 0, $474 = 0, $48 = 0, $480 = 0, $483 = 0, $484 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $572 = 0, $58 = 0, $594 = 0, $6 = 0, $60 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 23954
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23956
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 23958
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23960
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 23962
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 23964
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 23966
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 23968
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 23970
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 23972
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 23974
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 23976
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 23978
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 23980
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 23982
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 23984
 $32 = HEAP8[$0 + 60 >> 0] | 0; //@line 23986
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 23988
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 23990
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 23992
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 23994
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 23996
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 23998
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 24000
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 24002
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 24004
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 24006
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 24008
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 24010
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 24012
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 24014
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 24016
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 24018
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 24020
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 24022
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 24024
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 24026
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 24028
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 24030
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 24032
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 24034
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 24036
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 24038
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 24040
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 24042
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 24044
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 24046
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 24048
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 24050
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 24052
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 24054
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 24056
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 24058
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 24060
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 24062
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 24064
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 24066
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 24068
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 24070
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 24072
 $120 = HEAP32[$0 + 236 >> 2] | 0; //@line 24074
 $122 = HEAP32[$0 + 240 >> 2] | 0; //@line 24076
 $124 = HEAP32[$0 + 244 >> 2] | 0; //@line 24078
 $126 = HEAP32[$0 + 248 >> 2] | 0; //@line 24080
 $128 = HEAP32[$0 + 252 >> 2] | 0; //@line 24082
 $130 = HEAP32[$0 + 256 >> 2] | 0; //@line 24084
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 24086
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 24088
 $136 = HEAP32[$0 + 268 >> 2] | 0; //@line 24090
 if (HEAP8[___async_retval >> 0] & 1) {
  HEAP8[$70 >> 0] = HEAP8[$58 >> 0] | 0; //@line 24096
  HEAP8[$26 >> 0] = HEAP8[$50 >> 0] | 0; //@line 24098
  HEAPF32[$20 >> 2] = +(HEAPU8[13863 + (HEAPU8[$42 >> 0] | 0) >> 0] | 0); //@line 24104
  $572 = HEAP8[$130 >> 0] | 0; //@line 24106
  if (($572 & 255) < (-128 - (HEAP8[$120 >> 0] | 0) & 255)) {
   HEAP8[$130 >> 0] = $572 + 1 << 24 >> 24; //@line 24113
   HEAP8[($572 & 255) + ($126 + 4) >> 0] = 9; //@line 24114
   HEAP8[$104 >> 0] = 1; //@line 24115
   $$2 = 0; //@line 24116
  } else {
   $$2 = -1e3; //@line 24118
  }
 } else {
  $$2 = $102; //@line 24121
 }
 $$0$be = $32; //@line 24123
 $$096$be = $$2; //@line 24123
 L6 : while (1) {
  if (($$0$be & 255) >= ($10 & 255)) {
   label = 32; //@line 24127
   break;
  }
  $139 = $$0$be + 1 << 24 >> 24; //@line 24131
  switch (HEAP8[$136 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 24136
    break L6;
    break;
   }
  case 5:
   {
    label = 9; //@line 24141
    break L6;
    break;
   }
  case 7:
   {
    label = 14; //@line 24146
    break L6;
    break;
   }
  case 9:
   {
    label = 19; //@line 24151
    break L6;
    break;
   }
  case 10:
   {
    label = 28; //@line 24156
    break L6;
    break;
   }
  case 2:
   {
    HEAP32[$6 >> 2] = 0; //@line 24161
    HEAP8[$18 >> 0] = HEAP8[$136 + ($139 & 255) >> 0] | 0; //@line 24166
    HEAP8[$122 >> 0] = HEAP8[$136 + ($$0$be + 2 & 255) >> 0] | 0; //@line 24171
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 24172
    continue L6;
    break;
   }
  case 4:
   {
    $233 = $$0$be + 2 << 24 >> 24; //@line 24177
    $236 = HEAP8[$136 + ($139 & 255) >> 0] | 0; //@line 24180
    HEAP8[$110 >> 0] = $236; //@line 24181
    HEAP16[$86 >> 1] = 1 << ($236 & 255); //@line 24185
    $241 = HEAP8[$130 >> 0] | 0; //@line 24187
    if (($241 & 255) >= (-128 - (HEAP8[$120 >> 0] | 0) & 255)) {
     $$0$be = $233; //@line 24191
     $$096$be = -1e3; //@line 24191
     continue L6;
    }
    HEAP8[$130 >> 0] = $241 + 1 << 24 >> 24; //@line 24197
    HEAP8[($241 & 255) + ($126 + 4) >> 0] = 4; //@line 24198
    HEAP8[$104 >> 0] = 1; //@line 24199
    $$0$be = $233; //@line 24200
    $$096$be = 0; //@line 24200
    continue L6;
    break;
   }
  case 6:
   {
    $349 = HEAP8[$130 >> 0] | 0; //@line 24206
    $350 = $349 & 255; //@line 24207
    if (((-128 - (HEAP8[$120 >> 0] | 0) & 255) + -2 | 0) <= ($350 | 0)) {
     $$0$be = $139; //@line 24213
     $$096$be = -1e3; //@line 24213
     continue L6;
    }
    HEAP8[$126 + 4 + $350 >> 0] = 6; //@line 24218
    HEAP8[($349 + 1 & 255) + ($126 + 4) >> 0] = -1; //@line 24222
    HEAP8[$130 >> 0] = $349 + 3 << 24 >> 24; //@line 24224
    HEAP8[($349 + 2 & 255) + ($126 + 4) >> 0] = $4; //@line 24227
    HEAP8[$104 >> 0] = 1; //@line 24228
    $$0$be = $139; //@line 24229
    $$096$be = 0; //@line 24229
    continue L6;
    break;
   }
  case 8:
   {
    $463 = $$0$be + 2 << 24 >> 24; //@line 24234
    $467 = HEAP8[$136 + ($139 & 255) >> 0] & 15; //@line 24238
    $471 = ($467 + ($467 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 24243
    HEAP32[$80 >> 2] = $471; //@line 24244
    HEAP32[$68 >> 2] = $471 + 1e3; //@line 24246
    $474 = HEAP8[$130 >> 0] | 0; //@line 24248
    if (($474 & 255) >= (-128 - (HEAP8[$120 >> 0] | 0) & 255)) {
     $$0$be = $463; //@line 24252
     $$096$be = -1e3; //@line 24252
     continue L6;
    }
    HEAP8[$130 >> 0] = $474 + 1 << 24 >> 24; //@line 24258
    HEAP8[($474 & 255) + ($126 + 4) >> 0] = 8; //@line 24259
    HEAP8[$28 >> 0] = 1; //@line 24260
    HEAP8[$104 >> 0] = 1; //@line 24261
    $$0$be = $463; //@line 24262
    $$096$be = 0; //@line 24262
    continue L6;
    break;
   }
  default:
   {
    $$0$be = $139; //@line 24267
    $$096$be = -1013; //@line 24267
    continue L6;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$114 >> 0] = 0; //@line 24273
  HEAP8[$76 >> 0] = 0; //@line 24274
  HEAP8[$82 >> 0] = 0; //@line 24275
  HEAP8[$72 >> 0] = 0; //@line 24276
  $150 = $139 & 255; //@line 24277
  $151 = $150 + -1 | 0; //@line 24278
  HEAP32[$100 >> 2] = $136 + $151; //@line 24280
  HEAP8[$112 >> 0] = $44 - $151; //@line 24283
  HEAP8[$98 >> 0] = HEAP8[$94 >> 0] | 0; //@line 24285
  HEAP8[$78 >> 0] = HEAP8[$70 >> 0] | 0; //@line 24287
  HEAP8[$40 >> 0] = HEAP8[$64 >> 0] | 0; //@line 24289
  HEAP8[$30 >> 0] = HEAP8[$52 >> 0] | 0; //@line 24291
  HEAP8[$2 >> 0] = HEAP8[$34 >> 0] | 0; //@line 24293
  $162 = HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] | 0; //@line 24296
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 24297
  $163 = FUNCTION_TABLE_iiiiiii[$162 & 3]($14, $106, $114, $76, $82, $72) | 0; //@line 24298
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 595; //@line 24301
   $164 = $ReallocAsyncCtx + 4 | 0; //@line 24302
   HEAP32[$164 >> 2] = $2; //@line 24303
   $165 = $ReallocAsyncCtx + 8 | 0; //@line 24304
   HEAP8[$165 >> 0] = $4; //@line 24305
   $166 = $ReallocAsyncCtx + 12 | 0; //@line 24306
   HEAP32[$166 >> 2] = $6; //@line 24307
   $167 = $ReallocAsyncCtx + 16 | 0; //@line 24308
   HEAP8[$167 >> 0] = $8; //@line 24309
   $168 = $ReallocAsyncCtx + 17 | 0; //@line 24310
   HEAP8[$168 >> 0] = $10; //@line 24311
   $169 = $ReallocAsyncCtx + 20 | 0; //@line 24312
   HEAP32[$169 >> 2] = $12; //@line 24313
   $170 = $ReallocAsyncCtx + 24 | 0; //@line 24314
   HEAP32[$170 >> 2] = $14; //@line 24315
   $171 = $ReallocAsyncCtx + 28 | 0; //@line 24316
   HEAP32[$171 >> 2] = $16; //@line 24317
   $172 = $ReallocAsyncCtx + 32 | 0; //@line 24318
   HEAP32[$172 >> 2] = $18; //@line 24319
   $173 = $ReallocAsyncCtx + 36 | 0; //@line 24320
   HEAP32[$173 >> 2] = $20; //@line 24321
   $174 = $ReallocAsyncCtx + 40 | 0; //@line 24322
   HEAP32[$174 >> 2] = $22; //@line 24323
   $175 = $ReallocAsyncCtx + 44 | 0; //@line 24324
   HEAP32[$175 >> 2] = $24; //@line 24325
   $176 = $ReallocAsyncCtx + 48 | 0; //@line 24326
   HEAP32[$176 >> 2] = $26; //@line 24327
   $177 = $ReallocAsyncCtx + 52 | 0; //@line 24328
   HEAP32[$177 >> 2] = $28; //@line 24329
   $178 = $ReallocAsyncCtx + 56 | 0; //@line 24330
   HEAP32[$178 >> 2] = $30; //@line 24331
   $179 = $ReallocAsyncCtx + 60 | 0; //@line 24332
   HEAP32[$179 >> 2] = $34; //@line 24333
   $180 = $ReallocAsyncCtx + 64 | 0; //@line 24334
   HEAP32[$180 >> 2] = $36; //@line 24335
   $181 = $ReallocAsyncCtx + 68 | 0; //@line 24336
   HEAP32[$181 >> 2] = $38; //@line 24337
   $182 = $ReallocAsyncCtx + 72 | 0; //@line 24338
   HEAP32[$182 >> 2] = $40; //@line 24339
   $183 = $ReallocAsyncCtx + 76 | 0; //@line 24340
   HEAP32[$183 >> 2] = $42; //@line 24341
   $184 = $ReallocAsyncCtx + 80 | 0; //@line 24342
   HEAP32[$184 >> 2] = $44; //@line 24343
   $185 = $ReallocAsyncCtx + 84 | 0; //@line 24344
   HEAP32[$185 >> 2] = $46; //@line 24345
   $186 = $ReallocAsyncCtx + 88 | 0; //@line 24346
   HEAP32[$186 >> 2] = $48; //@line 24347
   $187 = $ReallocAsyncCtx + 92 | 0; //@line 24348
   HEAP32[$187 >> 2] = $50; //@line 24349
   $188 = $ReallocAsyncCtx + 96 | 0; //@line 24350
   HEAP32[$188 >> 2] = $52; //@line 24351
   $189 = $ReallocAsyncCtx + 100 | 0; //@line 24352
   HEAP32[$189 >> 2] = $54; //@line 24353
   $190 = $ReallocAsyncCtx + 104 | 0; //@line 24354
   HEAP32[$190 >> 2] = $56; //@line 24355
   $191 = $ReallocAsyncCtx + 108 | 0; //@line 24356
   HEAP32[$191 >> 2] = $58; //@line 24357
   $192 = $ReallocAsyncCtx + 112 | 0; //@line 24358
   HEAP32[$192 >> 2] = $60; //@line 24359
   $193 = $ReallocAsyncCtx + 116 | 0; //@line 24360
   HEAP32[$193 >> 2] = $62; //@line 24361
   $194 = $ReallocAsyncCtx + 120 | 0; //@line 24362
   HEAP32[$194 >> 2] = $64; //@line 24363
   $195 = $ReallocAsyncCtx + 124 | 0; //@line 24364
   HEAP32[$195 >> 2] = $66; //@line 24365
   $196 = $ReallocAsyncCtx + 128 | 0; //@line 24366
   HEAP32[$196 >> 2] = $150; //@line 24367
   $197 = $ReallocAsyncCtx + 132 | 0; //@line 24368
   HEAP32[$197 >> 2] = $68; //@line 24369
   $198 = $ReallocAsyncCtx + 136 | 0; //@line 24370
   HEAP32[$198 >> 2] = $70; //@line 24371
   $199 = $ReallocAsyncCtx + 140 | 0; //@line 24372
   HEAP32[$199 >> 2] = $72; //@line 24373
   $200 = $ReallocAsyncCtx + 144 | 0; //@line 24374
   HEAP32[$200 >> 2] = $74; //@line 24375
   $201 = $ReallocAsyncCtx + 148 | 0; //@line 24376
   HEAP32[$201 >> 2] = $76; //@line 24377
   $202 = $ReallocAsyncCtx + 152 | 0; //@line 24378
   HEAP32[$202 >> 2] = $78; //@line 24379
   $203 = $ReallocAsyncCtx + 156 | 0; //@line 24380
   HEAP32[$203 >> 2] = $80; //@line 24381
   $204 = $ReallocAsyncCtx + 160 | 0; //@line 24382
   HEAP32[$204 >> 2] = $82; //@line 24383
   $205 = $ReallocAsyncCtx + 164 | 0; //@line 24384
   HEAP32[$205 >> 2] = $84; //@line 24385
   $206 = $ReallocAsyncCtx + 168 | 0; //@line 24386
   HEAP32[$206 >> 2] = $86; //@line 24387
   $207 = $ReallocAsyncCtx + 172 | 0; //@line 24388
   HEAP32[$207 >> 2] = $88; //@line 24389
   $208 = $ReallocAsyncCtx + 176 | 0; //@line 24390
   HEAP32[$208 >> 2] = $90; //@line 24391
   $209 = $ReallocAsyncCtx + 180 | 0; //@line 24392
   HEAP32[$209 >> 2] = $92; //@line 24393
   $210 = $ReallocAsyncCtx + 184 | 0; //@line 24394
   HEAP32[$210 >> 2] = $94; //@line 24395
   $211 = $ReallocAsyncCtx + 188 | 0; //@line 24396
   HEAP32[$211 >> 2] = $96; //@line 24397
   $212 = $ReallocAsyncCtx + 192 | 0; //@line 24398
   HEAP32[$212 >> 2] = $98; //@line 24399
   $213 = $ReallocAsyncCtx + 196 | 0; //@line 24400
   HEAP32[$213 >> 2] = $100; //@line 24401
   $214 = $ReallocAsyncCtx + 200 | 0; //@line 24402
   HEAP32[$214 >> 2] = $$096$be; //@line 24403
   $215 = $ReallocAsyncCtx + 204 | 0; //@line 24404
   HEAP32[$215 >> 2] = $104; //@line 24405
   $216 = $ReallocAsyncCtx + 208 | 0; //@line 24406
   HEAP32[$216 >> 2] = $106; //@line 24407
   $217 = $ReallocAsyncCtx + 212 | 0; //@line 24408
   HEAP32[$217 >> 2] = $108; //@line 24409
   $218 = $ReallocAsyncCtx + 216 | 0; //@line 24410
   HEAP32[$218 >> 2] = $110; //@line 24411
   $219 = $ReallocAsyncCtx + 220 | 0; //@line 24412
   HEAP32[$219 >> 2] = $112; //@line 24413
   $220 = $ReallocAsyncCtx + 224 | 0; //@line 24414
   HEAP32[$220 >> 2] = $114; //@line 24415
   $221 = $ReallocAsyncCtx + 228 | 0; //@line 24416
   HEAP32[$221 >> 2] = $116; //@line 24417
   $222 = $ReallocAsyncCtx + 232 | 0; //@line 24418
   HEAP32[$222 >> 2] = $118; //@line 24419
   $223 = $ReallocAsyncCtx + 236 | 0; //@line 24420
   HEAP32[$223 >> 2] = $120; //@line 24421
   $224 = $ReallocAsyncCtx + 240 | 0; //@line 24422
   HEAP32[$224 >> 2] = $122; //@line 24423
   $225 = $ReallocAsyncCtx + 244 | 0; //@line 24424
   HEAP32[$225 >> 2] = $124; //@line 24425
   $226 = $ReallocAsyncCtx + 248 | 0; //@line 24426
   HEAP32[$226 >> 2] = $126; //@line 24427
   $227 = $ReallocAsyncCtx + 252 | 0; //@line 24428
   HEAP32[$227 >> 2] = $128; //@line 24429
   $228 = $ReallocAsyncCtx + 256 | 0; //@line 24430
   HEAP32[$228 >> 2] = $130; //@line 24431
   $229 = $ReallocAsyncCtx + 260 | 0; //@line 24432
   HEAP32[$229 >> 2] = $132; //@line 24433
   $230 = $ReallocAsyncCtx + 264 | 0; //@line 24434
   HEAP32[$230 >> 2] = $134; //@line 24435
   $231 = $ReallocAsyncCtx + 268 | 0; //@line 24436
   HEAP32[$231 >> 2] = $136; //@line 24437
   sp = STACKTOP; //@line 24438
   return;
  }
  HEAP8[___async_retval >> 0] = $163; //@line 24442
  ___async_unwind = 0; //@line 24443
  HEAP32[$ReallocAsyncCtx >> 2] = 595; //@line 24444
  $164 = $ReallocAsyncCtx + 4 | 0; //@line 24445
  HEAP32[$164 >> 2] = $2; //@line 24446
  $165 = $ReallocAsyncCtx + 8 | 0; //@line 24447
  HEAP8[$165 >> 0] = $4; //@line 24448
  $166 = $ReallocAsyncCtx + 12 | 0; //@line 24449
  HEAP32[$166 >> 2] = $6; //@line 24450
  $167 = $ReallocAsyncCtx + 16 | 0; //@line 24451
  HEAP8[$167 >> 0] = $8; //@line 24452
  $168 = $ReallocAsyncCtx + 17 | 0; //@line 24453
  HEAP8[$168 >> 0] = $10; //@line 24454
  $169 = $ReallocAsyncCtx + 20 | 0; //@line 24455
  HEAP32[$169 >> 2] = $12; //@line 24456
  $170 = $ReallocAsyncCtx + 24 | 0; //@line 24457
  HEAP32[$170 >> 2] = $14; //@line 24458
  $171 = $ReallocAsyncCtx + 28 | 0; //@line 24459
  HEAP32[$171 >> 2] = $16; //@line 24460
  $172 = $ReallocAsyncCtx + 32 | 0; //@line 24461
  HEAP32[$172 >> 2] = $18; //@line 24462
  $173 = $ReallocAsyncCtx + 36 | 0; //@line 24463
  HEAP32[$173 >> 2] = $20; //@line 24464
  $174 = $ReallocAsyncCtx + 40 | 0; //@line 24465
  HEAP32[$174 >> 2] = $22; //@line 24466
  $175 = $ReallocAsyncCtx + 44 | 0; //@line 24467
  HEAP32[$175 >> 2] = $24; //@line 24468
  $176 = $ReallocAsyncCtx + 48 | 0; //@line 24469
  HEAP32[$176 >> 2] = $26; //@line 24470
  $177 = $ReallocAsyncCtx + 52 | 0; //@line 24471
  HEAP32[$177 >> 2] = $28; //@line 24472
  $178 = $ReallocAsyncCtx + 56 | 0; //@line 24473
  HEAP32[$178 >> 2] = $30; //@line 24474
  $179 = $ReallocAsyncCtx + 60 | 0; //@line 24475
  HEAP32[$179 >> 2] = $34; //@line 24476
  $180 = $ReallocAsyncCtx + 64 | 0; //@line 24477
  HEAP32[$180 >> 2] = $36; //@line 24478
  $181 = $ReallocAsyncCtx + 68 | 0; //@line 24479
  HEAP32[$181 >> 2] = $38; //@line 24480
  $182 = $ReallocAsyncCtx + 72 | 0; //@line 24481
  HEAP32[$182 >> 2] = $40; //@line 24482
  $183 = $ReallocAsyncCtx + 76 | 0; //@line 24483
  HEAP32[$183 >> 2] = $42; //@line 24484
  $184 = $ReallocAsyncCtx + 80 | 0; //@line 24485
  HEAP32[$184 >> 2] = $44; //@line 24486
  $185 = $ReallocAsyncCtx + 84 | 0; //@line 24487
  HEAP32[$185 >> 2] = $46; //@line 24488
  $186 = $ReallocAsyncCtx + 88 | 0; //@line 24489
  HEAP32[$186 >> 2] = $48; //@line 24490
  $187 = $ReallocAsyncCtx + 92 | 0; //@line 24491
  HEAP32[$187 >> 2] = $50; //@line 24492
  $188 = $ReallocAsyncCtx + 96 | 0; //@line 24493
  HEAP32[$188 >> 2] = $52; //@line 24494
  $189 = $ReallocAsyncCtx + 100 | 0; //@line 24495
  HEAP32[$189 >> 2] = $54; //@line 24496
  $190 = $ReallocAsyncCtx + 104 | 0; //@line 24497
  HEAP32[$190 >> 2] = $56; //@line 24498
  $191 = $ReallocAsyncCtx + 108 | 0; //@line 24499
  HEAP32[$191 >> 2] = $58; //@line 24500
  $192 = $ReallocAsyncCtx + 112 | 0; //@line 24501
  HEAP32[$192 >> 2] = $60; //@line 24502
  $193 = $ReallocAsyncCtx + 116 | 0; //@line 24503
  HEAP32[$193 >> 2] = $62; //@line 24504
  $194 = $ReallocAsyncCtx + 120 | 0; //@line 24505
  HEAP32[$194 >> 2] = $64; //@line 24506
  $195 = $ReallocAsyncCtx + 124 | 0; //@line 24507
  HEAP32[$195 >> 2] = $66; //@line 24508
  $196 = $ReallocAsyncCtx + 128 | 0; //@line 24509
  HEAP32[$196 >> 2] = $150; //@line 24510
  $197 = $ReallocAsyncCtx + 132 | 0; //@line 24511
  HEAP32[$197 >> 2] = $68; //@line 24512
  $198 = $ReallocAsyncCtx + 136 | 0; //@line 24513
  HEAP32[$198 >> 2] = $70; //@line 24514
  $199 = $ReallocAsyncCtx + 140 | 0; //@line 24515
  HEAP32[$199 >> 2] = $72; //@line 24516
  $200 = $ReallocAsyncCtx + 144 | 0; //@line 24517
  HEAP32[$200 >> 2] = $74; //@line 24518
  $201 = $ReallocAsyncCtx + 148 | 0; //@line 24519
  HEAP32[$201 >> 2] = $76; //@line 24520
  $202 = $ReallocAsyncCtx + 152 | 0; //@line 24521
  HEAP32[$202 >> 2] = $78; //@line 24522
  $203 = $ReallocAsyncCtx + 156 | 0; //@line 24523
  HEAP32[$203 >> 2] = $80; //@line 24524
  $204 = $ReallocAsyncCtx + 160 | 0; //@line 24525
  HEAP32[$204 >> 2] = $82; //@line 24526
  $205 = $ReallocAsyncCtx + 164 | 0; //@line 24527
  HEAP32[$205 >> 2] = $84; //@line 24528
  $206 = $ReallocAsyncCtx + 168 | 0; //@line 24529
  HEAP32[$206 >> 2] = $86; //@line 24530
  $207 = $ReallocAsyncCtx + 172 | 0; //@line 24531
  HEAP32[$207 >> 2] = $88; //@line 24532
  $208 = $ReallocAsyncCtx + 176 | 0; //@line 24533
  HEAP32[$208 >> 2] = $90; //@line 24534
  $209 = $ReallocAsyncCtx + 180 | 0; //@line 24535
  HEAP32[$209 >> 2] = $92; //@line 24536
  $210 = $ReallocAsyncCtx + 184 | 0; //@line 24537
  HEAP32[$210 >> 2] = $94; //@line 24538
  $211 = $ReallocAsyncCtx + 188 | 0; //@line 24539
  HEAP32[$211 >> 2] = $96; //@line 24540
  $212 = $ReallocAsyncCtx + 192 | 0; //@line 24541
  HEAP32[$212 >> 2] = $98; //@line 24542
  $213 = $ReallocAsyncCtx + 196 | 0; //@line 24543
  HEAP32[$213 >> 2] = $100; //@line 24544
  $214 = $ReallocAsyncCtx + 200 | 0; //@line 24545
  HEAP32[$214 >> 2] = $$096$be; //@line 24546
  $215 = $ReallocAsyncCtx + 204 | 0; //@line 24547
  HEAP32[$215 >> 2] = $104; //@line 24548
  $216 = $ReallocAsyncCtx + 208 | 0; //@line 24549
  HEAP32[$216 >> 2] = $106; //@line 24550
  $217 = $ReallocAsyncCtx + 212 | 0; //@line 24551
  HEAP32[$217 >> 2] = $108; //@line 24552
  $218 = $ReallocAsyncCtx + 216 | 0; //@line 24553
  HEAP32[$218 >> 2] = $110; //@line 24554
  $219 = $ReallocAsyncCtx + 220 | 0; //@line 24555
  HEAP32[$219 >> 2] = $112; //@line 24556
  $220 = $ReallocAsyncCtx + 224 | 0; //@line 24557
  HEAP32[$220 >> 2] = $114; //@line 24558
  $221 = $ReallocAsyncCtx + 228 | 0; //@line 24559
  HEAP32[$221 >> 2] = $116; //@line 24560
  $222 = $ReallocAsyncCtx + 232 | 0; //@line 24561
  HEAP32[$222 >> 2] = $118; //@line 24562
  $223 = $ReallocAsyncCtx + 236 | 0; //@line 24563
  HEAP32[$223 >> 2] = $120; //@line 24564
  $224 = $ReallocAsyncCtx + 240 | 0; //@line 24565
  HEAP32[$224 >> 2] = $122; //@line 24566
  $225 = $ReallocAsyncCtx + 244 | 0; //@line 24567
  HEAP32[$225 >> 2] = $124; //@line 24568
  $226 = $ReallocAsyncCtx + 248 | 0; //@line 24569
  HEAP32[$226 >> 2] = $126; //@line 24570
  $227 = $ReallocAsyncCtx + 252 | 0; //@line 24571
  HEAP32[$227 >> 2] = $128; //@line 24572
  $228 = $ReallocAsyncCtx + 256 | 0; //@line 24573
  HEAP32[$228 >> 2] = $130; //@line 24574
  $229 = $ReallocAsyncCtx + 260 | 0; //@line 24575
  HEAP32[$229 >> 2] = $132; //@line 24576
  $230 = $ReallocAsyncCtx + 264 | 0; //@line 24577
  HEAP32[$230 >> 2] = $134; //@line 24578
  $231 = $ReallocAsyncCtx + 268 | 0; //@line 24579
  HEAP32[$231 >> 2] = $136; //@line 24580
  sp = STACKTOP; //@line 24581
  return;
 } else if ((label | 0) == 9) {
  $249 = HEAP8[$136 + ($139 & 255) >> 0] | 0; //@line 24587
  HEAP8[$84 >> 0] = ($249 & 255) >>> 4 & 7; //@line 24592
  HEAP8[$74 >> 0] = $249 & 15; //@line 24594
  $268 = $$0$be + 5 << 24 >> 24; //@line 24608
  HEAP32[$60 >> 2] = (HEAPU8[$136 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$136 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$136 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 24616
  $278 = HEAP32[(HEAP32[$54 >> 2] | 0) + 40 >> 2] | 0; //@line 24619
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 24620
  $279 = FUNCTION_TABLE_iii[$278 & 31]($14, $96) | 0; //@line 24621
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 596; //@line 24624
   $280 = $ReallocAsyncCtx2 + 4 | 0; //@line 24625
   HEAP32[$280 >> 2] = $2; //@line 24626
   $281 = $ReallocAsyncCtx2 + 8 | 0; //@line 24627
   HEAP8[$281 >> 0] = $4; //@line 24628
   $282 = $ReallocAsyncCtx2 + 12 | 0; //@line 24629
   HEAP32[$282 >> 2] = $6; //@line 24630
   $283 = $ReallocAsyncCtx2 + 16 | 0; //@line 24631
   HEAP8[$283 >> 0] = $8; //@line 24632
   $284 = $ReallocAsyncCtx2 + 17 | 0; //@line 24633
   HEAP8[$284 >> 0] = $10; //@line 24634
   $285 = $ReallocAsyncCtx2 + 20 | 0; //@line 24635
   HEAP32[$285 >> 2] = $12; //@line 24636
   $286 = $ReallocAsyncCtx2 + 24 | 0; //@line 24637
   HEAP32[$286 >> 2] = $14; //@line 24638
   $287 = $ReallocAsyncCtx2 + 28 | 0; //@line 24639
   HEAP32[$287 >> 2] = $16; //@line 24640
   $288 = $ReallocAsyncCtx2 + 32 | 0; //@line 24641
   HEAP32[$288 >> 2] = $18; //@line 24642
   $289 = $ReallocAsyncCtx2 + 36 | 0; //@line 24643
   HEAP32[$289 >> 2] = $20; //@line 24644
   $290 = $ReallocAsyncCtx2 + 40 | 0; //@line 24645
   HEAP32[$290 >> 2] = $22; //@line 24646
   $291 = $ReallocAsyncCtx2 + 44 | 0; //@line 24647
   HEAP32[$291 >> 2] = $24; //@line 24648
   $292 = $ReallocAsyncCtx2 + 48 | 0; //@line 24649
   HEAP32[$292 >> 2] = $26; //@line 24650
   $293 = $ReallocAsyncCtx2 + 52 | 0; //@line 24651
   HEAP32[$293 >> 2] = $28; //@line 24652
   $294 = $ReallocAsyncCtx2 + 56 | 0; //@line 24653
   HEAP32[$294 >> 2] = $30; //@line 24654
   $295 = $ReallocAsyncCtx2 + 60 | 0; //@line 24655
   HEAP32[$295 >> 2] = $34; //@line 24656
   $296 = $ReallocAsyncCtx2 + 64 | 0; //@line 24657
   HEAP32[$296 >> 2] = $36; //@line 24658
   $297 = $ReallocAsyncCtx2 + 68 | 0; //@line 24659
   HEAP32[$297 >> 2] = $38; //@line 24660
   $298 = $ReallocAsyncCtx2 + 72 | 0; //@line 24661
   HEAP32[$298 >> 2] = $40; //@line 24662
   $299 = $ReallocAsyncCtx2 + 76 | 0; //@line 24663
   HEAP32[$299 >> 2] = $42; //@line 24664
   $300 = $ReallocAsyncCtx2 + 80 | 0; //@line 24665
   HEAP32[$300 >> 2] = $44; //@line 24666
   $301 = $ReallocAsyncCtx2 + 84 | 0; //@line 24667
   HEAP32[$301 >> 2] = $46; //@line 24668
   $302 = $ReallocAsyncCtx2 + 88 | 0; //@line 24669
   HEAP32[$302 >> 2] = $48; //@line 24670
   $303 = $ReallocAsyncCtx2 + 92 | 0; //@line 24671
   HEAP32[$303 >> 2] = $50; //@line 24672
   $304 = $ReallocAsyncCtx2 + 96 | 0; //@line 24673
   HEAP32[$304 >> 2] = $52; //@line 24674
   $305 = $ReallocAsyncCtx2 + 100 | 0; //@line 24675
   HEAP8[$305 >> 0] = $268; //@line 24676
   $306 = $ReallocAsyncCtx2 + 104 | 0; //@line 24677
   HEAP32[$306 >> 2] = $54; //@line 24678
   $307 = $ReallocAsyncCtx2 + 108 | 0; //@line 24679
   HEAP32[$307 >> 2] = $56; //@line 24680
   $308 = $ReallocAsyncCtx2 + 112 | 0; //@line 24681
   HEAP32[$308 >> 2] = $58; //@line 24682
   $309 = $ReallocAsyncCtx2 + 116 | 0; //@line 24683
   HEAP32[$309 >> 2] = $60; //@line 24684
   $310 = $ReallocAsyncCtx2 + 120 | 0; //@line 24685
   HEAP32[$310 >> 2] = $62; //@line 24686
   $311 = $ReallocAsyncCtx2 + 124 | 0; //@line 24687
   HEAP32[$311 >> 2] = $64; //@line 24688
   $312 = $ReallocAsyncCtx2 + 128 | 0; //@line 24689
   HEAP32[$312 >> 2] = $66; //@line 24690
   $313 = $ReallocAsyncCtx2 + 132 | 0; //@line 24691
   HEAP32[$313 >> 2] = $68; //@line 24692
   $314 = $ReallocAsyncCtx2 + 136 | 0; //@line 24693
   HEAP32[$314 >> 2] = $70; //@line 24694
   $315 = $ReallocAsyncCtx2 + 140 | 0; //@line 24695
   HEAP32[$315 >> 2] = $72; //@line 24696
   $316 = $ReallocAsyncCtx2 + 144 | 0; //@line 24697
   HEAP32[$316 >> 2] = $74; //@line 24698
   $317 = $ReallocAsyncCtx2 + 148 | 0; //@line 24699
   HEAP32[$317 >> 2] = $76; //@line 24700
   $318 = $ReallocAsyncCtx2 + 152 | 0; //@line 24701
   HEAP32[$318 >> 2] = $78; //@line 24702
   $319 = $ReallocAsyncCtx2 + 156 | 0; //@line 24703
   HEAP32[$319 >> 2] = $80; //@line 24704
   $320 = $ReallocAsyncCtx2 + 160 | 0; //@line 24705
   HEAP32[$320 >> 2] = $82; //@line 24706
   $321 = $ReallocAsyncCtx2 + 164 | 0; //@line 24707
   HEAP32[$321 >> 2] = $84; //@line 24708
   $322 = $ReallocAsyncCtx2 + 168 | 0; //@line 24709
   HEAP32[$322 >> 2] = $86; //@line 24710
   $323 = $ReallocAsyncCtx2 + 172 | 0; //@line 24711
   HEAP32[$323 >> 2] = $88; //@line 24712
   $324 = $ReallocAsyncCtx2 + 176 | 0; //@line 24713
   HEAP32[$324 >> 2] = $90; //@line 24714
   $325 = $ReallocAsyncCtx2 + 180 | 0; //@line 24715
   HEAP32[$325 >> 2] = $92; //@line 24716
   $326 = $ReallocAsyncCtx2 + 184 | 0; //@line 24717
   HEAP32[$326 >> 2] = $94; //@line 24718
   $327 = $ReallocAsyncCtx2 + 188 | 0; //@line 24719
   HEAP32[$327 >> 2] = $96; //@line 24720
   $328 = $ReallocAsyncCtx2 + 192 | 0; //@line 24721
   HEAP32[$328 >> 2] = $98; //@line 24722
   $329 = $ReallocAsyncCtx2 + 196 | 0; //@line 24723
   HEAP32[$329 >> 2] = $100; //@line 24724
   $330 = $ReallocAsyncCtx2 + 200 | 0; //@line 24725
   HEAP32[$330 >> 2] = $104; //@line 24726
   $331 = $ReallocAsyncCtx2 + 204 | 0; //@line 24727
   HEAP32[$331 >> 2] = $106; //@line 24728
   $332 = $ReallocAsyncCtx2 + 208 | 0; //@line 24729
   HEAP32[$332 >> 2] = $108; //@line 24730
   $333 = $ReallocAsyncCtx2 + 212 | 0; //@line 24731
   HEAP32[$333 >> 2] = $110; //@line 24732
   $334 = $ReallocAsyncCtx2 + 216 | 0; //@line 24733
   HEAP32[$334 >> 2] = $112; //@line 24734
   $335 = $ReallocAsyncCtx2 + 220 | 0; //@line 24735
   HEAP32[$335 >> 2] = $114; //@line 24736
   $336 = $ReallocAsyncCtx2 + 224 | 0; //@line 24737
   HEAP32[$336 >> 2] = $116; //@line 24738
   $337 = $ReallocAsyncCtx2 + 228 | 0; //@line 24739
   HEAP32[$337 >> 2] = $118; //@line 24740
   $338 = $ReallocAsyncCtx2 + 232 | 0; //@line 24741
   HEAP32[$338 >> 2] = $120; //@line 24742
   $339 = $ReallocAsyncCtx2 + 236 | 0; //@line 24743
   HEAP32[$339 >> 2] = $122; //@line 24744
   $340 = $ReallocAsyncCtx2 + 240 | 0; //@line 24745
   HEAP32[$340 >> 2] = $124; //@line 24746
   $341 = $ReallocAsyncCtx2 + 244 | 0; //@line 24747
   HEAP32[$341 >> 2] = $126; //@line 24748
   $342 = $ReallocAsyncCtx2 + 248 | 0; //@line 24749
   HEAP32[$342 >> 2] = $128; //@line 24750
   $343 = $ReallocAsyncCtx2 + 252 | 0; //@line 24751
   HEAP32[$343 >> 2] = $130; //@line 24752
   $344 = $ReallocAsyncCtx2 + 256 | 0; //@line 24753
   HEAP32[$344 >> 2] = $132; //@line 24754
   $345 = $ReallocAsyncCtx2 + 260 | 0; //@line 24755
   HEAP32[$345 >> 2] = $134; //@line 24756
   $346 = $ReallocAsyncCtx2 + 264 | 0; //@line 24757
   HEAP32[$346 >> 2] = $136; //@line 24758
   sp = STACKTOP; //@line 24759
   return;
  }
  HEAP8[___async_retval >> 0] = $279; //@line 24763
  ___async_unwind = 0; //@line 24764
  HEAP32[$ReallocAsyncCtx2 >> 2] = 596; //@line 24765
  $280 = $ReallocAsyncCtx2 + 4 | 0; //@line 24766
  HEAP32[$280 >> 2] = $2; //@line 24767
  $281 = $ReallocAsyncCtx2 + 8 | 0; //@line 24768
  HEAP8[$281 >> 0] = $4; //@line 24769
  $282 = $ReallocAsyncCtx2 + 12 | 0; //@line 24770
  HEAP32[$282 >> 2] = $6; //@line 24771
  $283 = $ReallocAsyncCtx2 + 16 | 0; //@line 24772
  HEAP8[$283 >> 0] = $8; //@line 24773
  $284 = $ReallocAsyncCtx2 + 17 | 0; //@line 24774
  HEAP8[$284 >> 0] = $10; //@line 24775
  $285 = $ReallocAsyncCtx2 + 20 | 0; //@line 24776
  HEAP32[$285 >> 2] = $12; //@line 24777
  $286 = $ReallocAsyncCtx2 + 24 | 0; //@line 24778
  HEAP32[$286 >> 2] = $14; //@line 24779
  $287 = $ReallocAsyncCtx2 + 28 | 0; //@line 24780
  HEAP32[$287 >> 2] = $16; //@line 24781
  $288 = $ReallocAsyncCtx2 + 32 | 0; //@line 24782
  HEAP32[$288 >> 2] = $18; //@line 24783
  $289 = $ReallocAsyncCtx2 + 36 | 0; //@line 24784
  HEAP32[$289 >> 2] = $20; //@line 24785
  $290 = $ReallocAsyncCtx2 + 40 | 0; //@line 24786
  HEAP32[$290 >> 2] = $22; //@line 24787
  $291 = $ReallocAsyncCtx2 + 44 | 0; //@line 24788
  HEAP32[$291 >> 2] = $24; //@line 24789
  $292 = $ReallocAsyncCtx2 + 48 | 0; //@line 24790
  HEAP32[$292 >> 2] = $26; //@line 24791
  $293 = $ReallocAsyncCtx2 + 52 | 0; //@line 24792
  HEAP32[$293 >> 2] = $28; //@line 24793
  $294 = $ReallocAsyncCtx2 + 56 | 0; //@line 24794
  HEAP32[$294 >> 2] = $30; //@line 24795
  $295 = $ReallocAsyncCtx2 + 60 | 0; //@line 24796
  HEAP32[$295 >> 2] = $34; //@line 24797
  $296 = $ReallocAsyncCtx2 + 64 | 0; //@line 24798
  HEAP32[$296 >> 2] = $36; //@line 24799
  $297 = $ReallocAsyncCtx2 + 68 | 0; //@line 24800
  HEAP32[$297 >> 2] = $38; //@line 24801
  $298 = $ReallocAsyncCtx2 + 72 | 0; //@line 24802
  HEAP32[$298 >> 2] = $40; //@line 24803
  $299 = $ReallocAsyncCtx2 + 76 | 0; //@line 24804
  HEAP32[$299 >> 2] = $42; //@line 24805
  $300 = $ReallocAsyncCtx2 + 80 | 0; //@line 24806
  HEAP32[$300 >> 2] = $44; //@line 24807
  $301 = $ReallocAsyncCtx2 + 84 | 0; //@line 24808
  HEAP32[$301 >> 2] = $46; //@line 24809
  $302 = $ReallocAsyncCtx2 + 88 | 0; //@line 24810
  HEAP32[$302 >> 2] = $48; //@line 24811
  $303 = $ReallocAsyncCtx2 + 92 | 0; //@line 24812
  HEAP32[$303 >> 2] = $50; //@line 24813
  $304 = $ReallocAsyncCtx2 + 96 | 0; //@line 24814
  HEAP32[$304 >> 2] = $52; //@line 24815
  $305 = $ReallocAsyncCtx2 + 100 | 0; //@line 24816
  HEAP8[$305 >> 0] = $268; //@line 24817
  $306 = $ReallocAsyncCtx2 + 104 | 0; //@line 24818
  HEAP32[$306 >> 2] = $54; //@line 24819
  $307 = $ReallocAsyncCtx2 + 108 | 0; //@line 24820
  HEAP32[$307 >> 2] = $56; //@line 24821
  $308 = $ReallocAsyncCtx2 + 112 | 0; //@line 24822
  HEAP32[$308 >> 2] = $58; //@line 24823
  $309 = $ReallocAsyncCtx2 + 116 | 0; //@line 24824
  HEAP32[$309 >> 2] = $60; //@line 24825
  $310 = $ReallocAsyncCtx2 + 120 | 0; //@line 24826
  HEAP32[$310 >> 2] = $62; //@line 24827
  $311 = $ReallocAsyncCtx2 + 124 | 0; //@line 24828
  HEAP32[$311 >> 2] = $64; //@line 24829
  $312 = $ReallocAsyncCtx2 + 128 | 0; //@line 24830
  HEAP32[$312 >> 2] = $66; //@line 24831
  $313 = $ReallocAsyncCtx2 + 132 | 0; //@line 24832
  HEAP32[$313 >> 2] = $68; //@line 24833
  $314 = $ReallocAsyncCtx2 + 136 | 0; //@line 24834
  HEAP32[$314 >> 2] = $70; //@line 24835
  $315 = $ReallocAsyncCtx2 + 140 | 0; //@line 24836
  HEAP32[$315 >> 2] = $72; //@line 24837
  $316 = $ReallocAsyncCtx2 + 144 | 0; //@line 24838
  HEAP32[$316 >> 2] = $74; //@line 24839
  $317 = $ReallocAsyncCtx2 + 148 | 0; //@line 24840
  HEAP32[$317 >> 2] = $76; //@line 24841
  $318 = $ReallocAsyncCtx2 + 152 | 0; //@line 24842
  HEAP32[$318 >> 2] = $78; //@line 24843
  $319 = $ReallocAsyncCtx2 + 156 | 0; //@line 24844
  HEAP32[$319 >> 2] = $80; //@line 24845
  $320 = $ReallocAsyncCtx2 + 160 | 0; //@line 24846
  HEAP32[$320 >> 2] = $82; //@line 24847
  $321 = $ReallocAsyncCtx2 + 164 | 0; //@line 24848
  HEAP32[$321 >> 2] = $84; //@line 24849
  $322 = $ReallocAsyncCtx2 + 168 | 0; //@line 24850
  HEAP32[$322 >> 2] = $86; //@line 24851
  $323 = $ReallocAsyncCtx2 + 172 | 0; //@line 24852
  HEAP32[$323 >> 2] = $88; //@line 24853
  $324 = $ReallocAsyncCtx2 + 176 | 0; //@line 24854
  HEAP32[$324 >> 2] = $90; //@line 24855
  $325 = $ReallocAsyncCtx2 + 180 | 0; //@line 24856
  HEAP32[$325 >> 2] = $92; //@line 24857
  $326 = $ReallocAsyncCtx2 + 184 | 0; //@line 24858
  HEAP32[$326 >> 2] = $94; //@line 24859
  $327 = $ReallocAsyncCtx2 + 188 | 0; //@line 24860
  HEAP32[$327 >> 2] = $96; //@line 24861
  $328 = $ReallocAsyncCtx2 + 192 | 0; //@line 24862
  HEAP32[$328 >> 2] = $98; //@line 24863
  $329 = $ReallocAsyncCtx2 + 196 | 0; //@line 24864
  HEAP32[$329 >> 2] = $100; //@line 24865
  $330 = $ReallocAsyncCtx2 + 200 | 0; //@line 24866
  HEAP32[$330 >> 2] = $104; //@line 24867
  $331 = $ReallocAsyncCtx2 + 204 | 0; //@line 24868
  HEAP32[$331 >> 2] = $106; //@line 24869
  $332 = $ReallocAsyncCtx2 + 208 | 0; //@line 24870
  HEAP32[$332 >> 2] = $108; //@line 24871
  $333 = $ReallocAsyncCtx2 + 212 | 0; //@line 24872
  HEAP32[$333 >> 2] = $110; //@line 24873
  $334 = $ReallocAsyncCtx2 + 216 | 0; //@line 24874
  HEAP32[$334 >> 2] = $112; //@line 24875
  $335 = $ReallocAsyncCtx2 + 220 | 0; //@line 24876
  HEAP32[$335 >> 2] = $114; //@line 24877
  $336 = $ReallocAsyncCtx2 + 224 | 0; //@line 24878
  HEAP32[$336 >> 2] = $116; //@line 24879
  $337 = $ReallocAsyncCtx2 + 228 | 0; //@line 24880
  HEAP32[$337 >> 2] = $118; //@line 24881
  $338 = $ReallocAsyncCtx2 + 232 | 0; //@line 24882
  HEAP32[$338 >> 2] = $120; //@line 24883
  $339 = $ReallocAsyncCtx2 + 236 | 0; //@line 24884
  HEAP32[$339 >> 2] = $122; //@line 24885
  $340 = $ReallocAsyncCtx2 + 240 | 0; //@line 24886
  HEAP32[$340 >> 2] = $124; //@line 24887
  $341 = $ReallocAsyncCtx2 + 244 | 0; //@line 24888
  HEAP32[$341 >> 2] = $126; //@line 24889
  $342 = $ReallocAsyncCtx2 + 248 | 0; //@line 24890
  HEAP32[$342 >> 2] = $128; //@line 24891
  $343 = $ReallocAsyncCtx2 + 252 | 0; //@line 24892
  HEAP32[$343 >> 2] = $130; //@line 24893
  $344 = $ReallocAsyncCtx2 + 256 | 0; //@line 24894
  HEAP32[$344 >> 2] = $132; //@line 24895
  $345 = $ReallocAsyncCtx2 + 260 | 0; //@line 24896
  HEAP32[$345 >> 2] = $134; //@line 24897
  $346 = $ReallocAsyncCtx2 + 264 | 0; //@line 24898
  HEAP32[$346 >> 2] = $136; //@line 24899
  sp = STACKTOP; //@line 24900
  return;
 } else if ((label | 0) == 14) {
  HEAP8[$132 >> 0] = HEAP8[$136 + ($139 & 255) >> 0] | 0; //@line 24908
  HEAP32[$118 >> 2] = $66; //@line 24909
  HEAP32[$116 >> 2] = (HEAPU8[$136 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$136 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$136 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 24930
  HEAP32[$108 >> 2] = 0; //@line 24931
  $387 = $$0$be + 6 << 24 >> 24; //@line 24932
  HEAP8[$88 >> 0] = HEAP8[$136 + ($$0$be + 5 & 255) >> 0] | 0; //@line 24936
  $393 = HEAP32[(HEAP32[$92 >> 2] | 0) + 8 >> 2] | 0; //@line 24939
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 24940
  $394 = FUNCTION_TABLE_iii[$393 & 31]($14, $90) | 0; //@line 24941
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 597; //@line 24944
   $395 = $ReallocAsyncCtx3 + 4 | 0; //@line 24945
   HEAP32[$395 >> 2] = $2; //@line 24946
   $396 = $ReallocAsyncCtx3 + 8 | 0; //@line 24947
   HEAP8[$396 >> 0] = $4; //@line 24948
   $397 = $ReallocAsyncCtx3 + 12 | 0; //@line 24949
   HEAP32[$397 >> 2] = $6; //@line 24950
   $398 = $ReallocAsyncCtx3 + 16 | 0; //@line 24951
   HEAP8[$398 >> 0] = $8; //@line 24952
   $399 = $ReallocAsyncCtx3 + 17 | 0; //@line 24953
   HEAP8[$399 >> 0] = $10; //@line 24954
   $400 = $ReallocAsyncCtx3 + 20 | 0; //@line 24955
   HEAP32[$400 >> 2] = $12; //@line 24956
   $401 = $ReallocAsyncCtx3 + 24 | 0; //@line 24957
   HEAP32[$401 >> 2] = $14; //@line 24958
   $402 = $ReallocAsyncCtx3 + 28 | 0; //@line 24959
   HEAP32[$402 >> 2] = $16; //@line 24960
   $403 = $ReallocAsyncCtx3 + 32 | 0; //@line 24961
   HEAP32[$403 >> 2] = $18; //@line 24962
   $404 = $ReallocAsyncCtx3 + 36 | 0; //@line 24963
   HEAP32[$404 >> 2] = $20; //@line 24964
   $405 = $ReallocAsyncCtx3 + 40 | 0; //@line 24965
   HEAP32[$405 >> 2] = $22; //@line 24966
   $406 = $ReallocAsyncCtx3 + 44 | 0; //@line 24967
   HEAP32[$406 >> 2] = $24; //@line 24968
   $407 = $ReallocAsyncCtx3 + 48 | 0; //@line 24969
   HEAP32[$407 >> 2] = $26; //@line 24970
   $408 = $ReallocAsyncCtx3 + 52 | 0; //@line 24971
   HEAP32[$408 >> 2] = $28; //@line 24972
   $409 = $ReallocAsyncCtx3 + 56 | 0; //@line 24973
   HEAP32[$409 >> 2] = $30; //@line 24974
   $410 = $ReallocAsyncCtx3 + 60 | 0; //@line 24975
   HEAP32[$410 >> 2] = $34; //@line 24976
   $411 = $ReallocAsyncCtx3 + 64 | 0; //@line 24977
   HEAP32[$411 >> 2] = $36; //@line 24978
   $412 = $ReallocAsyncCtx3 + 68 | 0; //@line 24979
   HEAP32[$412 >> 2] = $38; //@line 24980
   $413 = $ReallocAsyncCtx3 + 72 | 0; //@line 24981
   HEAP32[$413 >> 2] = $40; //@line 24982
   $414 = $ReallocAsyncCtx3 + 76 | 0; //@line 24983
   HEAP32[$414 >> 2] = $42; //@line 24984
   $415 = $ReallocAsyncCtx3 + 80 | 0; //@line 24985
   HEAP32[$415 >> 2] = $44; //@line 24986
   $416 = $ReallocAsyncCtx3 + 84 | 0; //@line 24987
   HEAP32[$416 >> 2] = $46; //@line 24988
   $417 = $ReallocAsyncCtx3 + 88 | 0; //@line 24989
   HEAP32[$417 >> 2] = $48; //@line 24990
   $418 = $ReallocAsyncCtx3 + 92 | 0; //@line 24991
   HEAP32[$418 >> 2] = $50; //@line 24992
   $419 = $ReallocAsyncCtx3 + 96 | 0; //@line 24993
   HEAP32[$419 >> 2] = $52; //@line 24994
   $420 = $ReallocAsyncCtx3 + 100 | 0; //@line 24995
   HEAP32[$420 >> 2] = $54; //@line 24996
   $421 = $ReallocAsyncCtx3 + 104 | 0; //@line 24997
   HEAP32[$421 >> 2] = $56; //@line 24998
   $422 = $ReallocAsyncCtx3 + 108 | 0; //@line 24999
   HEAP8[$422 >> 0] = $387; //@line 25000
   $423 = $ReallocAsyncCtx3 + 112 | 0; //@line 25001
   HEAP32[$423 >> 2] = $58; //@line 25002
   $424 = $ReallocAsyncCtx3 + 116 | 0; //@line 25003
   HEAP32[$424 >> 2] = $60; //@line 25004
   $425 = $ReallocAsyncCtx3 + 120 | 0; //@line 25005
   HEAP32[$425 >> 2] = $62; //@line 25006
   $426 = $ReallocAsyncCtx3 + 124 | 0; //@line 25007
   HEAP32[$426 >> 2] = $64; //@line 25008
   $427 = $ReallocAsyncCtx3 + 128 | 0; //@line 25009
   HEAP32[$427 >> 2] = $66; //@line 25010
   $428 = $ReallocAsyncCtx3 + 132 | 0; //@line 25011
   HEAP32[$428 >> 2] = $68; //@line 25012
   $429 = $ReallocAsyncCtx3 + 136 | 0; //@line 25013
   HEAP32[$429 >> 2] = $70; //@line 25014
   $430 = $ReallocAsyncCtx3 + 140 | 0; //@line 25015
   HEAP32[$430 >> 2] = $72; //@line 25016
   $431 = $ReallocAsyncCtx3 + 144 | 0; //@line 25017
   HEAP32[$431 >> 2] = $74; //@line 25018
   $432 = $ReallocAsyncCtx3 + 148 | 0; //@line 25019
   HEAP32[$432 >> 2] = $76; //@line 25020
   $433 = $ReallocAsyncCtx3 + 152 | 0; //@line 25021
   HEAP32[$433 >> 2] = $78; //@line 25022
   $434 = $ReallocAsyncCtx3 + 156 | 0; //@line 25023
   HEAP32[$434 >> 2] = $80; //@line 25024
   $435 = $ReallocAsyncCtx3 + 160 | 0; //@line 25025
   HEAP32[$435 >> 2] = $82; //@line 25026
   $436 = $ReallocAsyncCtx3 + 164 | 0; //@line 25027
   HEAP32[$436 >> 2] = $84; //@line 25028
   $437 = $ReallocAsyncCtx3 + 168 | 0; //@line 25029
   HEAP32[$437 >> 2] = $86; //@line 25030
   $438 = $ReallocAsyncCtx3 + 172 | 0; //@line 25031
   HEAP32[$438 >> 2] = $88; //@line 25032
   $439 = $ReallocAsyncCtx3 + 176 | 0; //@line 25033
   HEAP32[$439 >> 2] = $90; //@line 25034
   $440 = $ReallocAsyncCtx3 + 180 | 0; //@line 25035
   HEAP32[$440 >> 2] = $92; //@line 25036
   $441 = $ReallocAsyncCtx3 + 184 | 0; //@line 25037
   HEAP32[$441 >> 2] = $94; //@line 25038
   $442 = $ReallocAsyncCtx3 + 188 | 0; //@line 25039
   HEAP32[$442 >> 2] = $96; //@line 25040
   $443 = $ReallocAsyncCtx3 + 192 | 0; //@line 25041
   HEAP32[$443 >> 2] = $98; //@line 25042
   $444 = $ReallocAsyncCtx3 + 196 | 0; //@line 25043
   HEAP32[$444 >> 2] = $100; //@line 25044
   $445 = $ReallocAsyncCtx3 + 200 | 0; //@line 25045
   HEAP32[$445 >> 2] = $104; //@line 25046
   $446 = $ReallocAsyncCtx3 + 204 | 0; //@line 25047
   HEAP32[$446 >> 2] = $106; //@line 25048
   $447 = $ReallocAsyncCtx3 + 208 | 0; //@line 25049
   HEAP32[$447 >> 2] = $108; //@line 25050
   $448 = $ReallocAsyncCtx3 + 212 | 0; //@line 25051
   HEAP32[$448 >> 2] = $110; //@line 25052
   $449 = $ReallocAsyncCtx3 + 216 | 0; //@line 25053
   HEAP32[$449 >> 2] = $112; //@line 25054
   $450 = $ReallocAsyncCtx3 + 220 | 0; //@line 25055
   HEAP32[$450 >> 2] = $114; //@line 25056
   $451 = $ReallocAsyncCtx3 + 224 | 0; //@line 25057
   HEAP32[$451 >> 2] = $116; //@line 25058
   $452 = $ReallocAsyncCtx3 + 228 | 0; //@line 25059
   HEAP32[$452 >> 2] = $118; //@line 25060
   $453 = $ReallocAsyncCtx3 + 232 | 0; //@line 25061
   HEAP32[$453 >> 2] = $120; //@line 25062
   $454 = $ReallocAsyncCtx3 + 236 | 0; //@line 25063
   HEAP32[$454 >> 2] = $122; //@line 25064
   $455 = $ReallocAsyncCtx3 + 240 | 0; //@line 25065
   HEAP32[$455 >> 2] = $124; //@line 25066
   $456 = $ReallocAsyncCtx3 + 244 | 0; //@line 25067
   HEAP32[$456 >> 2] = $126; //@line 25068
   $457 = $ReallocAsyncCtx3 + 248 | 0; //@line 25069
   HEAP32[$457 >> 2] = $128; //@line 25070
   $458 = $ReallocAsyncCtx3 + 252 | 0; //@line 25071
   HEAP32[$458 >> 2] = $130; //@line 25072
   $459 = $ReallocAsyncCtx3 + 256 | 0; //@line 25073
   HEAP32[$459 >> 2] = $132; //@line 25074
   $460 = $ReallocAsyncCtx3 + 260 | 0; //@line 25075
   HEAP32[$460 >> 2] = $134; //@line 25076
   $461 = $ReallocAsyncCtx3 + 264 | 0; //@line 25077
   HEAP32[$461 >> 2] = $136; //@line 25078
   sp = STACKTOP; //@line 25079
   return;
  }
  HEAP8[___async_retval >> 0] = $394; //@line 25083
  ___async_unwind = 0; //@line 25084
  HEAP32[$ReallocAsyncCtx3 >> 2] = 597; //@line 25085
  $395 = $ReallocAsyncCtx3 + 4 | 0; //@line 25086
  HEAP32[$395 >> 2] = $2; //@line 25087
  $396 = $ReallocAsyncCtx3 + 8 | 0; //@line 25088
  HEAP8[$396 >> 0] = $4; //@line 25089
  $397 = $ReallocAsyncCtx3 + 12 | 0; //@line 25090
  HEAP32[$397 >> 2] = $6; //@line 25091
  $398 = $ReallocAsyncCtx3 + 16 | 0; //@line 25092
  HEAP8[$398 >> 0] = $8; //@line 25093
  $399 = $ReallocAsyncCtx3 + 17 | 0; //@line 25094
  HEAP8[$399 >> 0] = $10; //@line 25095
  $400 = $ReallocAsyncCtx3 + 20 | 0; //@line 25096
  HEAP32[$400 >> 2] = $12; //@line 25097
  $401 = $ReallocAsyncCtx3 + 24 | 0; //@line 25098
  HEAP32[$401 >> 2] = $14; //@line 25099
  $402 = $ReallocAsyncCtx3 + 28 | 0; //@line 25100
  HEAP32[$402 >> 2] = $16; //@line 25101
  $403 = $ReallocAsyncCtx3 + 32 | 0; //@line 25102
  HEAP32[$403 >> 2] = $18; //@line 25103
  $404 = $ReallocAsyncCtx3 + 36 | 0; //@line 25104
  HEAP32[$404 >> 2] = $20; //@line 25105
  $405 = $ReallocAsyncCtx3 + 40 | 0; //@line 25106
  HEAP32[$405 >> 2] = $22; //@line 25107
  $406 = $ReallocAsyncCtx3 + 44 | 0; //@line 25108
  HEAP32[$406 >> 2] = $24; //@line 25109
  $407 = $ReallocAsyncCtx3 + 48 | 0; //@line 25110
  HEAP32[$407 >> 2] = $26; //@line 25111
  $408 = $ReallocAsyncCtx3 + 52 | 0; //@line 25112
  HEAP32[$408 >> 2] = $28; //@line 25113
  $409 = $ReallocAsyncCtx3 + 56 | 0; //@line 25114
  HEAP32[$409 >> 2] = $30; //@line 25115
  $410 = $ReallocAsyncCtx3 + 60 | 0; //@line 25116
  HEAP32[$410 >> 2] = $34; //@line 25117
  $411 = $ReallocAsyncCtx3 + 64 | 0; //@line 25118
  HEAP32[$411 >> 2] = $36; //@line 25119
  $412 = $ReallocAsyncCtx3 + 68 | 0; //@line 25120
  HEAP32[$412 >> 2] = $38; //@line 25121
  $413 = $ReallocAsyncCtx3 + 72 | 0; //@line 25122
  HEAP32[$413 >> 2] = $40; //@line 25123
  $414 = $ReallocAsyncCtx3 + 76 | 0; //@line 25124
  HEAP32[$414 >> 2] = $42; //@line 25125
  $415 = $ReallocAsyncCtx3 + 80 | 0; //@line 25126
  HEAP32[$415 >> 2] = $44; //@line 25127
  $416 = $ReallocAsyncCtx3 + 84 | 0; //@line 25128
  HEAP32[$416 >> 2] = $46; //@line 25129
  $417 = $ReallocAsyncCtx3 + 88 | 0; //@line 25130
  HEAP32[$417 >> 2] = $48; //@line 25131
  $418 = $ReallocAsyncCtx3 + 92 | 0; //@line 25132
  HEAP32[$418 >> 2] = $50; //@line 25133
  $419 = $ReallocAsyncCtx3 + 96 | 0; //@line 25134
  HEAP32[$419 >> 2] = $52; //@line 25135
  $420 = $ReallocAsyncCtx3 + 100 | 0; //@line 25136
  HEAP32[$420 >> 2] = $54; //@line 25137
  $421 = $ReallocAsyncCtx3 + 104 | 0; //@line 25138
  HEAP32[$421 >> 2] = $56; //@line 25139
  $422 = $ReallocAsyncCtx3 + 108 | 0; //@line 25140
  HEAP8[$422 >> 0] = $387; //@line 25141
  $423 = $ReallocAsyncCtx3 + 112 | 0; //@line 25142
  HEAP32[$423 >> 2] = $58; //@line 25143
  $424 = $ReallocAsyncCtx3 + 116 | 0; //@line 25144
  HEAP32[$424 >> 2] = $60; //@line 25145
  $425 = $ReallocAsyncCtx3 + 120 | 0; //@line 25146
  HEAP32[$425 >> 2] = $62; //@line 25147
  $426 = $ReallocAsyncCtx3 + 124 | 0; //@line 25148
  HEAP32[$426 >> 2] = $64; //@line 25149
  $427 = $ReallocAsyncCtx3 + 128 | 0; //@line 25150
  HEAP32[$427 >> 2] = $66; //@line 25151
  $428 = $ReallocAsyncCtx3 + 132 | 0; //@line 25152
  HEAP32[$428 >> 2] = $68; //@line 25153
  $429 = $ReallocAsyncCtx3 + 136 | 0; //@line 25154
  HEAP32[$429 >> 2] = $70; //@line 25155
  $430 = $ReallocAsyncCtx3 + 140 | 0; //@line 25156
  HEAP32[$430 >> 2] = $72; //@line 25157
  $431 = $ReallocAsyncCtx3 + 144 | 0; //@line 25158
  HEAP32[$431 >> 2] = $74; //@line 25159
  $432 = $ReallocAsyncCtx3 + 148 | 0; //@line 25160
  HEAP32[$432 >> 2] = $76; //@line 25161
  $433 = $ReallocAsyncCtx3 + 152 | 0; //@line 25162
  HEAP32[$433 >> 2] = $78; //@line 25163
  $434 = $ReallocAsyncCtx3 + 156 | 0; //@line 25164
  HEAP32[$434 >> 2] = $80; //@line 25165
  $435 = $ReallocAsyncCtx3 + 160 | 0; //@line 25166
  HEAP32[$435 >> 2] = $82; //@line 25167
  $436 = $ReallocAsyncCtx3 + 164 | 0; //@line 25168
  HEAP32[$436 >> 2] = $84; //@line 25169
  $437 = $ReallocAsyncCtx3 + 168 | 0; //@line 25170
  HEAP32[$437 >> 2] = $86; //@line 25171
  $438 = $ReallocAsyncCtx3 + 172 | 0; //@line 25172
  HEAP32[$438 >> 2] = $88; //@line 25173
  $439 = $ReallocAsyncCtx3 + 176 | 0; //@line 25174
  HEAP32[$439 >> 2] = $90; //@line 25175
  $440 = $ReallocAsyncCtx3 + 180 | 0; //@line 25176
  HEAP32[$440 >> 2] = $92; //@line 25177
  $441 = $ReallocAsyncCtx3 + 184 | 0; //@line 25178
  HEAP32[$441 >> 2] = $94; //@line 25179
  $442 = $ReallocAsyncCtx3 + 188 | 0; //@line 25180
  HEAP32[$442 >> 2] = $96; //@line 25181
  $443 = $ReallocAsyncCtx3 + 192 | 0; //@line 25182
  HEAP32[$443 >> 2] = $98; //@line 25183
  $444 = $ReallocAsyncCtx3 + 196 | 0; //@line 25184
  HEAP32[$444 >> 2] = $100; //@line 25185
  $445 = $ReallocAsyncCtx3 + 200 | 0; //@line 25186
  HEAP32[$445 >> 2] = $104; //@line 25187
  $446 = $ReallocAsyncCtx3 + 204 | 0; //@line 25188
  HEAP32[$446 >> 2] = $106; //@line 25189
  $447 = $ReallocAsyncCtx3 + 208 | 0; //@line 25190
  HEAP32[$447 >> 2] = $108; //@line 25191
  $448 = $ReallocAsyncCtx3 + 212 | 0; //@line 25192
  HEAP32[$448 >> 2] = $110; //@line 25193
  $449 = $ReallocAsyncCtx3 + 216 | 0; //@line 25194
  HEAP32[$449 >> 2] = $112; //@line 25195
  $450 = $ReallocAsyncCtx3 + 220 | 0; //@line 25196
  HEAP32[$450 >> 2] = $114; //@line 25197
  $451 = $ReallocAsyncCtx3 + 224 | 0; //@line 25198
  HEAP32[$451 >> 2] = $116; //@line 25199
  $452 = $ReallocAsyncCtx3 + 228 | 0; //@line 25200
  HEAP32[$452 >> 2] = $118; //@line 25201
  $453 = $ReallocAsyncCtx3 + 232 | 0; //@line 25202
  HEAP32[$453 >> 2] = $120; //@line 25203
  $454 = $ReallocAsyncCtx3 + 236 | 0; //@line 25204
  HEAP32[$454 >> 2] = $122; //@line 25205
  $455 = $ReallocAsyncCtx3 + 240 | 0; //@line 25206
  HEAP32[$455 >> 2] = $124; //@line 25207
  $456 = $ReallocAsyncCtx3 + 244 | 0; //@line 25208
  HEAP32[$456 >> 2] = $126; //@line 25209
  $457 = $ReallocAsyncCtx3 + 248 | 0; //@line 25210
  HEAP32[$457 >> 2] = $128; //@line 25211
  $458 = $ReallocAsyncCtx3 + 252 | 0; //@line 25212
  HEAP32[$458 >> 2] = $130; //@line 25213
  $459 = $ReallocAsyncCtx3 + 256 | 0; //@line 25214
  HEAP32[$459 >> 2] = $132; //@line 25215
  $460 = $ReallocAsyncCtx3 + 260 | 0; //@line 25216
  HEAP32[$460 >> 2] = $134; //@line 25217
  $461 = $ReallocAsyncCtx3 + 264 | 0; //@line 25218
  HEAP32[$461 >> 2] = $136; //@line 25219
  sp = STACKTOP; //@line 25220
  return;
 } else if ((label | 0) == 19) {
  $480 = $$0$be + 2 << 24 >> 24; //@line 25224
  $483 = HEAP8[$136 + ($139 & 255) >> 0] | 0; //@line 25227
  HEAP8[$58 >> 0] = 0; //@line 25228
  $484 = $483 & 255; //@line 25229
  HEAP8[$50 >> 0] = $484 >>> 5 & 1; //@line 25233
  if ($484 & 16 | 0) {
   HEAP8[$58 >> 0] = 1; //@line 25237
  }
  HEAP8[$42 >> 0] = $484 & 15; //@line 25241
  $493 = HEAP32[(HEAP32[$36 >> 2] | 0) + 44 >> 2] | 0; //@line 25244
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 25245
  $494 = FUNCTION_TABLE_iii[$493 & 31]($14, $62) | 0; //@line 25246
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 598; //@line 25249
   $495 = $ReallocAsyncCtx4 + 4 | 0; //@line 25250
   HEAP32[$495 >> 2] = $2; //@line 25251
   $496 = $ReallocAsyncCtx4 + 8 | 0; //@line 25252
   HEAP8[$496 >> 0] = $4; //@line 25253
   $497 = $ReallocAsyncCtx4 + 12 | 0; //@line 25254
   HEAP32[$497 >> 2] = $6; //@line 25255
   $498 = $ReallocAsyncCtx4 + 16 | 0; //@line 25256
   HEAP8[$498 >> 0] = $8; //@line 25257
   $499 = $ReallocAsyncCtx4 + 17 | 0; //@line 25258
   HEAP8[$499 >> 0] = $10; //@line 25259
   $500 = $ReallocAsyncCtx4 + 20 | 0; //@line 25260
   HEAP32[$500 >> 2] = $12; //@line 25261
   $501 = $ReallocAsyncCtx4 + 24 | 0; //@line 25262
   HEAP32[$501 >> 2] = $14; //@line 25263
   $502 = $ReallocAsyncCtx4 + 28 | 0; //@line 25264
   HEAP32[$502 >> 2] = $16; //@line 25265
   $503 = $ReallocAsyncCtx4 + 32 | 0; //@line 25266
   HEAP32[$503 >> 2] = $18; //@line 25267
   $504 = $ReallocAsyncCtx4 + 36 | 0; //@line 25268
   HEAP32[$504 >> 2] = $20; //@line 25269
   $505 = $ReallocAsyncCtx4 + 40 | 0; //@line 25270
   HEAP32[$505 >> 2] = $22; //@line 25271
   $506 = $ReallocAsyncCtx4 + 44 | 0; //@line 25272
   HEAP32[$506 >> 2] = $24; //@line 25273
   $507 = $ReallocAsyncCtx4 + 48 | 0; //@line 25274
   HEAP32[$507 >> 2] = $26; //@line 25275
   $508 = $ReallocAsyncCtx4 + 52 | 0; //@line 25276
   HEAP32[$508 >> 2] = $28; //@line 25277
   $509 = $ReallocAsyncCtx4 + 56 | 0; //@line 25278
   HEAP32[$509 >> 2] = $30; //@line 25279
   $510 = $ReallocAsyncCtx4 + 60 | 0; //@line 25280
   HEAP8[$510 >> 0] = $480; //@line 25281
   $511 = $ReallocAsyncCtx4 + 64 | 0; //@line 25282
   HEAP32[$511 >> 2] = $34; //@line 25283
   $512 = $ReallocAsyncCtx4 + 68 | 0; //@line 25284
   HEAP32[$512 >> 2] = $36; //@line 25285
   $513 = $ReallocAsyncCtx4 + 72 | 0; //@line 25286
   HEAP32[$513 >> 2] = $38; //@line 25287
   $514 = $ReallocAsyncCtx4 + 76 | 0; //@line 25288
   HEAP32[$514 >> 2] = $40; //@line 25289
   $515 = $ReallocAsyncCtx4 + 80 | 0; //@line 25290
   HEAP32[$515 >> 2] = $42; //@line 25291
   $516 = $ReallocAsyncCtx4 + 84 | 0; //@line 25292
   HEAP32[$516 >> 2] = $44; //@line 25293
   $517 = $ReallocAsyncCtx4 + 88 | 0; //@line 25294
   HEAP32[$517 >> 2] = $46; //@line 25295
   $518 = $ReallocAsyncCtx4 + 92 | 0; //@line 25296
   HEAP32[$518 >> 2] = $48; //@line 25297
   $519 = $ReallocAsyncCtx4 + 96 | 0; //@line 25298
   HEAP32[$519 >> 2] = $50; //@line 25299
   $520 = $ReallocAsyncCtx4 + 100 | 0; //@line 25300
   HEAP32[$520 >> 2] = $52; //@line 25301
   $521 = $ReallocAsyncCtx4 + 104 | 0; //@line 25302
   HEAP32[$521 >> 2] = $54; //@line 25303
   $522 = $ReallocAsyncCtx4 + 108 | 0; //@line 25304
   HEAP32[$522 >> 2] = $56; //@line 25305
   $523 = $ReallocAsyncCtx4 + 112 | 0; //@line 25306
   HEAP32[$523 >> 2] = $58; //@line 25307
   $524 = $ReallocAsyncCtx4 + 116 | 0; //@line 25308
   HEAP32[$524 >> 2] = $60; //@line 25309
   $525 = $ReallocAsyncCtx4 + 120 | 0; //@line 25310
   HEAP32[$525 >> 2] = $62; //@line 25311
   $526 = $ReallocAsyncCtx4 + 124 | 0; //@line 25312
   HEAP32[$526 >> 2] = $64; //@line 25313
   $527 = $ReallocAsyncCtx4 + 128 | 0; //@line 25314
   HEAP32[$527 >> 2] = $66; //@line 25315
   $528 = $ReallocAsyncCtx4 + 132 | 0; //@line 25316
   HEAP32[$528 >> 2] = $68; //@line 25317
   $529 = $ReallocAsyncCtx4 + 136 | 0; //@line 25318
   HEAP32[$529 >> 2] = $70; //@line 25319
   $530 = $ReallocAsyncCtx4 + 140 | 0; //@line 25320
   HEAP32[$530 >> 2] = $72; //@line 25321
   $531 = $ReallocAsyncCtx4 + 144 | 0; //@line 25322
   HEAP32[$531 >> 2] = $74; //@line 25323
   $532 = $ReallocAsyncCtx4 + 148 | 0; //@line 25324
   HEAP32[$532 >> 2] = $76; //@line 25325
   $533 = $ReallocAsyncCtx4 + 152 | 0; //@line 25326
   HEAP32[$533 >> 2] = $78; //@line 25327
   $534 = $ReallocAsyncCtx4 + 156 | 0; //@line 25328
   HEAP32[$534 >> 2] = $80; //@line 25329
   $535 = $ReallocAsyncCtx4 + 160 | 0; //@line 25330
   HEAP32[$535 >> 2] = $82; //@line 25331
   $536 = $ReallocAsyncCtx4 + 164 | 0; //@line 25332
   HEAP32[$536 >> 2] = $84; //@line 25333
   $537 = $ReallocAsyncCtx4 + 168 | 0; //@line 25334
   HEAP32[$537 >> 2] = $86; //@line 25335
   $538 = $ReallocAsyncCtx4 + 172 | 0; //@line 25336
   HEAP32[$538 >> 2] = $88; //@line 25337
   $539 = $ReallocAsyncCtx4 + 176 | 0; //@line 25338
   HEAP32[$539 >> 2] = $90; //@line 25339
   $540 = $ReallocAsyncCtx4 + 180 | 0; //@line 25340
   HEAP32[$540 >> 2] = $92; //@line 25341
   $541 = $ReallocAsyncCtx4 + 184 | 0; //@line 25342
   HEAP32[$541 >> 2] = $94; //@line 25343
   $542 = $ReallocAsyncCtx4 + 188 | 0; //@line 25344
   HEAP32[$542 >> 2] = $96; //@line 25345
   $543 = $ReallocAsyncCtx4 + 192 | 0; //@line 25346
   HEAP32[$543 >> 2] = $98; //@line 25347
   $544 = $ReallocAsyncCtx4 + 196 | 0; //@line 25348
   HEAP32[$544 >> 2] = $100; //@line 25349
   $545 = $ReallocAsyncCtx4 + 200 | 0; //@line 25350
   HEAP32[$545 >> 2] = $$096$be; //@line 25351
   $546 = $ReallocAsyncCtx4 + 204 | 0; //@line 25352
   HEAP32[$546 >> 2] = $104; //@line 25353
   $547 = $ReallocAsyncCtx4 + 208 | 0; //@line 25354
   HEAP32[$547 >> 2] = $106; //@line 25355
   $548 = $ReallocAsyncCtx4 + 212 | 0; //@line 25356
   HEAP32[$548 >> 2] = $108; //@line 25357
   $549 = $ReallocAsyncCtx4 + 216 | 0; //@line 25358
   HEAP32[$549 >> 2] = $110; //@line 25359
   $550 = $ReallocAsyncCtx4 + 220 | 0; //@line 25360
   HEAP32[$550 >> 2] = $112; //@line 25361
   $551 = $ReallocAsyncCtx4 + 224 | 0; //@line 25362
   HEAP32[$551 >> 2] = $114; //@line 25363
   $552 = $ReallocAsyncCtx4 + 228 | 0; //@line 25364
   HEAP32[$552 >> 2] = $116; //@line 25365
   $553 = $ReallocAsyncCtx4 + 232 | 0; //@line 25366
   HEAP32[$553 >> 2] = $118; //@line 25367
   $554 = $ReallocAsyncCtx4 + 236 | 0; //@line 25368
   HEAP32[$554 >> 2] = $120; //@line 25369
   $555 = $ReallocAsyncCtx4 + 240 | 0; //@line 25370
   HEAP32[$555 >> 2] = $122; //@line 25371
   $556 = $ReallocAsyncCtx4 + 244 | 0; //@line 25372
   HEAP32[$556 >> 2] = $124; //@line 25373
   $557 = $ReallocAsyncCtx4 + 248 | 0; //@line 25374
   HEAP32[$557 >> 2] = $126; //@line 25375
   $558 = $ReallocAsyncCtx4 + 252 | 0; //@line 25376
   HEAP32[$558 >> 2] = $128; //@line 25377
   $559 = $ReallocAsyncCtx4 + 256 | 0; //@line 25378
   HEAP32[$559 >> 2] = $130; //@line 25379
   $560 = $ReallocAsyncCtx4 + 260 | 0; //@line 25380
   HEAP32[$560 >> 2] = $132; //@line 25381
   $561 = $ReallocAsyncCtx4 + 264 | 0; //@line 25382
   HEAP32[$561 >> 2] = $134; //@line 25383
   $562 = $ReallocAsyncCtx4 + 268 | 0; //@line 25384
   HEAP32[$562 >> 2] = $136; //@line 25385
   sp = STACKTOP; //@line 25386
   return;
  }
  HEAP8[___async_retval >> 0] = $494 & 1; //@line 25391
  ___async_unwind = 0; //@line 25392
  HEAP32[$ReallocAsyncCtx4 >> 2] = 598; //@line 25393
  $495 = $ReallocAsyncCtx4 + 4 | 0; //@line 25394
  HEAP32[$495 >> 2] = $2; //@line 25395
  $496 = $ReallocAsyncCtx4 + 8 | 0; //@line 25396
  HEAP8[$496 >> 0] = $4; //@line 25397
  $497 = $ReallocAsyncCtx4 + 12 | 0; //@line 25398
  HEAP32[$497 >> 2] = $6; //@line 25399
  $498 = $ReallocAsyncCtx4 + 16 | 0; //@line 25400
  HEAP8[$498 >> 0] = $8; //@line 25401
  $499 = $ReallocAsyncCtx4 + 17 | 0; //@line 25402
  HEAP8[$499 >> 0] = $10; //@line 25403
  $500 = $ReallocAsyncCtx4 + 20 | 0; //@line 25404
  HEAP32[$500 >> 2] = $12; //@line 25405
  $501 = $ReallocAsyncCtx4 + 24 | 0; //@line 25406
  HEAP32[$501 >> 2] = $14; //@line 25407
  $502 = $ReallocAsyncCtx4 + 28 | 0; //@line 25408
  HEAP32[$502 >> 2] = $16; //@line 25409
  $503 = $ReallocAsyncCtx4 + 32 | 0; //@line 25410
  HEAP32[$503 >> 2] = $18; //@line 25411
  $504 = $ReallocAsyncCtx4 + 36 | 0; //@line 25412
  HEAP32[$504 >> 2] = $20; //@line 25413
  $505 = $ReallocAsyncCtx4 + 40 | 0; //@line 25414
  HEAP32[$505 >> 2] = $22; //@line 25415
  $506 = $ReallocAsyncCtx4 + 44 | 0; //@line 25416
  HEAP32[$506 >> 2] = $24; //@line 25417
  $507 = $ReallocAsyncCtx4 + 48 | 0; //@line 25418
  HEAP32[$507 >> 2] = $26; //@line 25419
  $508 = $ReallocAsyncCtx4 + 52 | 0; //@line 25420
  HEAP32[$508 >> 2] = $28; //@line 25421
  $509 = $ReallocAsyncCtx4 + 56 | 0; //@line 25422
  HEAP32[$509 >> 2] = $30; //@line 25423
  $510 = $ReallocAsyncCtx4 + 60 | 0; //@line 25424
  HEAP8[$510 >> 0] = $480; //@line 25425
  $511 = $ReallocAsyncCtx4 + 64 | 0; //@line 25426
  HEAP32[$511 >> 2] = $34; //@line 25427
  $512 = $ReallocAsyncCtx4 + 68 | 0; //@line 25428
  HEAP32[$512 >> 2] = $36; //@line 25429
  $513 = $ReallocAsyncCtx4 + 72 | 0; //@line 25430
  HEAP32[$513 >> 2] = $38; //@line 25431
  $514 = $ReallocAsyncCtx4 + 76 | 0; //@line 25432
  HEAP32[$514 >> 2] = $40; //@line 25433
  $515 = $ReallocAsyncCtx4 + 80 | 0; //@line 25434
  HEAP32[$515 >> 2] = $42; //@line 25435
  $516 = $ReallocAsyncCtx4 + 84 | 0; //@line 25436
  HEAP32[$516 >> 2] = $44; //@line 25437
  $517 = $ReallocAsyncCtx4 + 88 | 0; //@line 25438
  HEAP32[$517 >> 2] = $46; //@line 25439
  $518 = $ReallocAsyncCtx4 + 92 | 0; //@line 25440
  HEAP32[$518 >> 2] = $48; //@line 25441
  $519 = $ReallocAsyncCtx4 + 96 | 0; //@line 25442
  HEAP32[$519 >> 2] = $50; //@line 25443
  $520 = $ReallocAsyncCtx4 + 100 | 0; //@line 25444
  HEAP32[$520 >> 2] = $52; //@line 25445
  $521 = $ReallocAsyncCtx4 + 104 | 0; //@line 25446
  HEAP32[$521 >> 2] = $54; //@line 25447
  $522 = $ReallocAsyncCtx4 + 108 | 0; //@line 25448
  HEAP32[$522 >> 2] = $56; //@line 25449
  $523 = $ReallocAsyncCtx4 + 112 | 0; //@line 25450
  HEAP32[$523 >> 2] = $58; //@line 25451
  $524 = $ReallocAsyncCtx4 + 116 | 0; //@line 25452
  HEAP32[$524 >> 2] = $60; //@line 25453
  $525 = $ReallocAsyncCtx4 + 120 | 0; //@line 25454
  HEAP32[$525 >> 2] = $62; //@line 25455
  $526 = $ReallocAsyncCtx4 + 124 | 0; //@line 25456
  HEAP32[$526 >> 2] = $64; //@line 25457
  $527 = $ReallocAsyncCtx4 + 128 | 0; //@line 25458
  HEAP32[$527 >> 2] = $66; //@line 25459
  $528 = $ReallocAsyncCtx4 + 132 | 0; //@line 25460
  HEAP32[$528 >> 2] = $68; //@line 25461
  $529 = $ReallocAsyncCtx4 + 136 | 0; //@line 25462
  HEAP32[$529 >> 2] = $70; //@line 25463
  $530 = $ReallocAsyncCtx4 + 140 | 0; //@line 25464
  HEAP32[$530 >> 2] = $72; //@line 25465
  $531 = $ReallocAsyncCtx4 + 144 | 0; //@line 25466
  HEAP32[$531 >> 2] = $74; //@line 25467
  $532 = $ReallocAsyncCtx4 + 148 | 0; //@line 25468
  HEAP32[$532 >> 2] = $76; //@line 25469
  $533 = $ReallocAsyncCtx4 + 152 | 0; //@line 25470
  HEAP32[$533 >> 2] = $78; //@line 25471
  $534 = $ReallocAsyncCtx4 + 156 | 0; //@line 25472
  HEAP32[$534 >> 2] = $80; //@line 25473
  $535 = $ReallocAsyncCtx4 + 160 | 0; //@line 25474
  HEAP32[$535 >> 2] = $82; //@line 25475
  $536 = $ReallocAsyncCtx4 + 164 | 0; //@line 25476
  HEAP32[$536 >> 2] = $84; //@line 25477
  $537 = $ReallocAsyncCtx4 + 168 | 0; //@line 25478
  HEAP32[$537 >> 2] = $86; //@line 25479
  $538 = $ReallocAsyncCtx4 + 172 | 0; //@line 25480
  HEAP32[$538 >> 2] = $88; //@line 25481
  $539 = $ReallocAsyncCtx4 + 176 | 0; //@line 25482
  HEAP32[$539 >> 2] = $90; //@line 25483
  $540 = $ReallocAsyncCtx4 + 180 | 0; //@line 25484
  HEAP32[$540 >> 2] = $92; //@line 25485
  $541 = $ReallocAsyncCtx4 + 184 | 0; //@line 25486
  HEAP32[$541 >> 2] = $94; //@line 25487
  $542 = $ReallocAsyncCtx4 + 188 | 0; //@line 25488
  HEAP32[$542 >> 2] = $96; //@line 25489
  $543 = $ReallocAsyncCtx4 + 192 | 0; //@line 25490
  HEAP32[$543 >> 2] = $98; //@line 25491
  $544 = $ReallocAsyncCtx4 + 196 | 0; //@line 25492
  HEAP32[$544 >> 2] = $100; //@line 25493
  $545 = $ReallocAsyncCtx4 + 200 | 0; //@line 25494
  HEAP32[$545 >> 2] = $$096$be; //@line 25495
  $546 = $ReallocAsyncCtx4 + 204 | 0; //@line 25496
  HEAP32[$546 >> 2] = $104; //@line 25497
  $547 = $ReallocAsyncCtx4 + 208 | 0; //@line 25498
  HEAP32[$547 >> 2] = $106; //@line 25499
  $548 = $ReallocAsyncCtx4 + 212 | 0; //@line 25500
  HEAP32[$548 >> 2] = $108; //@line 25501
  $549 = $ReallocAsyncCtx4 + 216 | 0; //@line 25502
  HEAP32[$549 >> 2] = $110; //@line 25503
  $550 = $ReallocAsyncCtx4 + 220 | 0; //@line 25504
  HEAP32[$550 >> 2] = $112; //@line 25505
  $551 = $ReallocAsyncCtx4 + 224 | 0; //@line 25506
  HEAP32[$551 >> 2] = $114; //@line 25507
  $552 = $ReallocAsyncCtx4 + 228 | 0; //@line 25508
  HEAP32[$552 >> 2] = $116; //@line 25509
  $553 = $ReallocAsyncCtx4 + 232 | 0; //@line 25510
  HEAP32[$553 >> 2] = $118; //@line 25511
  $554 = $ReallocAsyncCtx4 + 236 | 0; //@line 25512
  HEAP32[$554 >> 2] = $120; //@line 25513
  $555 = $ReallocAsyncCtx4 + 240 | 0; //@line 25514
  HEAP32[$555 >> 2] = $122; //@line 25515
  $556 = $ReallocAsyncCtx4 + 244 | 0; //@line 25516
  HEAP32[$556 >> 2] = $124; //@line 25517
  $557 = $ReallocAsyncCtx4 + 248 | 0; //@line 25518
  HEAP32[$557 >> 2] = $126; //@line 25519
  $558 = $ReallocAsyncCtx4 + 252 | 0; //@line 25520
  HEAP32[$558 >> 2] = $128; //@line 25521
  $559 = $ReallocAsyncCtx4 + 256 | 0; //@line 25522
  HEAP32[$559 >> 2] = $130; //@line 25523
  $560 = $ReallocAsyncCtx4 + 260 | 0; //@line 25524
  HEAP32[$560 >> 2] = $132; //@line 25525
  $561 = $ReallocAsyncCtx4 + 264 | 0; //@line 25526
  HEAP32[$561 >> 2] = $134; //@line 25527
  $562 = $ReallocAsyncCtx4 + 268 | 0; //@line 25528
  HEAP32[$562 >> 2] = $136; //@line 25529
  sp = STACKTOP; //@line 25530
  return;
 } else if ((label | 0) == 28) {
  HEAP8[$12 >> 0] = HEAP8[$136 + ($139 & 255) >> 0] | 0; //@line 25538
  $594 = $$0$be + 5 << 24 >> 24; //@line 25551
  HEAP32[$134 >> 2] = (HEAPU8[$136 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$136 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$136 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 25559
  $604 = HEAP32[(HEAP32[$124 >> 2] | 0) + 48 >> 2] | 0; //@line 25562
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 25563
  $605 = FUNCTION_TABLE_iii[$604 & 31]($14, $56) | 0; //@line 25564
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 599; //@line 25567
   $606 = $ReallocAsyncCtx5 + 4 | 0; //@line 25568
   HEAP32[$606 >> 2] = $2; //@line 25569
   $607 = $ReallocAsyncCtx5 + 8 | 0; //@line 25570
   HEAP8[$607 >> 0] = $4; //@line 25571
   $608 = $ReallocAsyncCtx5 + 12 | 0; //@line 25572
   HEAP32[$608 >> 2] = $6; //@line 25573
   $609 = $ReallocAsyncCtx5 + 16 | 0; //@line 25574
   HEAP8[$609 >> 0] = $8; //@line 25575
   $610 = $ReallocAsyncCtx5 + 17 | 0; //@line 25576
   HEAP8[$610 >> 0] = $10; //@line 25577
   $611 = $ReallocAsyncCtx5 + 20 | 0; //@line 25578
   HEAP32[$611 >> 2] = $12; //@line 25579
   $612 = $ReallocAsyncCtx5 + 24 | 0; //@line 25580
   HEAP32[$612 >> 2] = $14; //@line 25581
   $613 = $ReallocAsyncCtx5 + 28 | 0; //@line 25582
   HEAP32[$613 >> 2] = $16; //@line 25583
   $614 = $ReallocAsyncCtx5 + 32 | 0; //@line 25584
   HEAP32[$614 >> 2] = $18; //@line 25585
   $615 = $ReallocAsyncCtx5 + 36 | 0; //@line 25586
   HEAP32[$615 >> 2] = $20; //@line 25587
   $616 = $ReallocAsyncCtx5 + 40 | 0; //@line 25588
   HEAP32[$616 >> 2] = $22; //@line 25589
   $617 = $ReallocAsyncCtx5 + 44 | 0; //@line 25590
   HEAP32[$617 >> 2] = $24; //@line 25591
   $618 = $ReallocAsyncCtx5 + 48 | 0; //@line 25592
   HEAP32[$618 >> 2] = $26; //@line 25593
   $619 = $ReallocAsyncCtx5 + 52 | 0; //@line 25594
   HEAP32[$619 >> 2] = $28; //@line 25595
   $620 = $ReallocAsyncCtx5 + 56 | 0; //@line 25596
   HEAP32[$620 >> 2] = $30; //@line 25597
   $621 = $ReallocAsyncCtx5 + 60 | 0; //@line 25598
   HEAP32[$621 >> 2] = $34; //@line 25599
   $622 = $ReallocAsyncCtx5 + 64 | 0; //@line 25600
   HEAP32[$622 >> 2] = $36; //@line 25601
   $623 = $ReallocAsyncCtx5 + 68 | 0; //@line 25602
   HEAP32[$623 >> 2] = $38; //@line 25603
   $624 = $ReallocAsyncCtx5 + 72 | 0; //@line 25604
   HEAP32[$624 >> 2] = $40; //@line 25605
   $625 = $ReallocAsyncCtx5 + 76 | 0; //@line 25606
   HEAP32[$625 >> 2] = $42; //@line 25607
   $626 = $ReallocAsyncCtx5 + 80 | 0; //@line 25608
   HEAP32[$626 >> 2] = $44; //@line 25609
   $627 = $ReallocAsyncCtx5 + 84 | 0; //@line 25610
   HEAP32[$627 >> 2] = $46; //@line 25611
   $628 = $ReallocAsyncCtx5 + 88 | 0; //@line 25612
   HEAP32[$628 >> 2] = $48; //@line 25613
   $629 = $ReallocAsyncCtx5 + 92 | 0; //@line 25614
   HEAP32[$629 >> 2] = $50; //@line 25615
   $630 = $ReallocAsyncCtx5 + 96 | 0; //@line 25616
   HEAP32[$630 >> 2] = $52; //@line 25617
   $631 = $ReallocAsyncCtx5 + 100 | 0; //@line 25618
   HEAP32[$631 >> 2] = $54; //@line 25619
   $632 = $ReallocAsyncCtx5 + 104 | 0; //@line 25620
   HEAP32[$632 >> 2] = $56; //@line 25621
   $633 = $ReallocAsyncCtx5 + 108 | 0; //@line 25622
   HEAP8[$633 >> 0] = $594; //@line 25623
   $634 = $ReallocAsyncCtx5 + 112 | 0; //@line 25624
   HEAP32[$634 >> 2] = $58; //@line 25625
   $635 = $ReallocAsyncCtx5 + 116 | 0; //@line 25626
   HEAP32[$635 >> 2] = $60; //@line 25627
   $636 = $ReallocAsyncCtx5 + 120 | 0; //@line 25628
   HEAP32[$636 >> 2] = $62; //@line 25629
   $637 = $ReallocAsyncCtx5 + 124 | 0; //@line 25630
   HEAP32[$637 >> 2] = $64; //@line 25631
   $638 = $ReallocAsyncCtx5 + 128 | 0; //@line 25632
   HEAP32[$638 >> 2] = $66; //@line 25633
   $639 = $ReallocAsyncCtx5 + 132 | 0; //@line 25634
   HEAP32[$639 >> 2] = $68; //@line 25635
   $640 = $ReallocAsyncCtx5 + 136 | 0; //@line 25636
   HEAP32[$640 >> 2] = $70; //@line 25637
   $641 = $ReallocAsyncCtx5 + 140 | 0; //@line 25638
   HEAP32[$641 >> 2] = $72; //@line 25639
   $642 = $ReallocAsyncCtx5 + 144 | 0; //@line 25640
   HEAP32[$642 >> 2] = $74; //@line 25641
   $643 = $ReallocAsyncCtx5 + 148 | 0; //@line 25642
   HEAP32[$643 >> 2] = $76; //@line 25643
   $644 = $ReallocAsyncCtx5 + 152 | 0; //@line 25644
   HEAP32[$644 >> 2] = $78; //@line 25645
   $645 = $ReallocAsyncCtx5 + 156 | 0; //@line 25646
   HEAP32[$645 >> 2] = $80; //@line 25647
   $646 = $ReallocAsyncCtx5 + 160 | 0; //@line 25648
   HEAP32[$646 >> 2] = $82; //@line 25649
   $647 = $ReallocAsyncCtx5 + 164 | 0; //@line 25650
   HEAP32[$647 >> 2] = $84; //@line 25651
   $648 = $ReallocAsyncCtx5 + 168 | 0; //@line 25652
   HEAP32[$648 >> 2] = $86; //@line 25653
   $649 = $ReallocAsyncCtx5 + 172 | 0; //@line 25654
   HEAP32[$649 >> 2] = $88; //@line 25655
   $650 = $ReallocAsyncCtx5 + 176 | 0; //@line 25656
   HEAP32[$650 >> 2] = $90; //@line 25657
   $651 = $ReallocAsyncCtx5 + 180 | 0; //@line 25658
   HEAP32[$651 >> 2] = $92; //@line 25659
   $652 = $ReallocAsyncCtx5 + 184 | 0; //@line 25660
   HEAP32[$652 >> 2] = $94; //@line 25661
   $653 = $ReallocAsyncCtx5 + 188 | 0; //@line 25662
   HEAP32[$653 >> 2] = $96; //@line 25663
   $654 = $ReallocAsyncCtx5 + 192 | 0; //@line 25664
   HEAP32[$654 >> 2] = $98; //@line 25665
   $655 = $ReallocAsyncCtx5 + 196 | 0; //@line 25666
   HEAP32[$655 >> 2] = $100; //@line 25667
   $656 = $ReallocAsyncCtx5 + 200 | 0; //@line 25668
   HEAP32[$656 >> 2] = $104; //@line 25669
   $657 = $ReallocAsyncCtx5 + 204 | 0; //@line 25670
   HEAP32[$657 >> 2] = $106; //@line 25671
   $658 = $ReallocAsyncCtx5 + 208 | 0; //@line 25672
   HEAP32[$658 >> 2] = $108; //@line 25673
   $659 = $ReallocAsyncCtx5 + 212 | 0; //@line 25674
   HEAP32[$659 >> 2] = $110; //@line 25675
   $660 = $ReallocAsyncCtx5 + 216 | 0; //@line 25676
   HEAP32[$660 >> 2] = $112; //@line 25677
   $661 = $ReallocAsyncCtx5 + 220 | 0; //@line 25678
   HEAP32[$661 >> 2] = $114; //@line 25679
   $662 = $ReallocAsyncCtx5 + 224 | 0; //@line 25680
   HEAP32[$662 >> 2] = $116; //@line 25681
   $663 = $ReallocAsyncCtx5 + 228 | 0; //@line 25682
   HEAP32[$663 >> 2] = $118; //@line 25683
   $664 = $ReallocAsyncCtx5 + 232 | 0; //@line 25684
   HEAP32[$664 >> 2] = $120; //@line 25685
   $665 = $ReallocAsyncCtx5 + 236 | 0; //@line 25686
   HEAP32[$665 >> 2] = $122; //@line 25687
   $666 = $ReallocAsyncCtx5 + 240 | 0; //@line 25688
   HEAP32[$666 >> 2] = $124; //@line 25689
   $667 = $ReallocAsyncCtx5 + 244 | 0; //@line 25690
   HEAP32[$667 >> 2] = $126; //@line 25691
   $668 = $ReallocAsyncCtx5 + 248 | 0; //@line 25692
   HEAP32[$668 >> 2] = $128; //@line 25693
   $669 = $ReallocAsyncCtx5 + 252 | 0; //@line 25694
   HEAP32[$669 >> 2] = $130; //@line 25695
   $670 = $ReallocAsyncCtx5 + 256 | 0; //@line 25696
   HEAP32[$670 >> 2] = $132; //@line 25697
   $671 = $ReallocAsyncCtx5 + 260 | 0; //@line 25698
   HEAP32[$671 >> 2] = $134; //@line 25699
   $672 = $ReallocAsyncCtx5 + 264 | 0; //@line 25700
   HEAP32[$672 >> 2] = $136; //@line 25701
   sp = STACKTOP; //@line 25702
   return;
  }
  HEAP8[___async_retval >> 0] = $605; //@line 25706
  ___async_unwind = 0; //@line 25707
  HEAP32[$ReallocAsyncCtx5 >> 2] = 599; //@line 25708
  $606 = $ReallocAsyncCtx5 + 4 | 0; //@line 25709
  HEAP32[$606 >> 2] = $2; //@line 25710
  $607 = $ReallocAsyncCtx5 + 8 | 0; //@line 25711
  HEAP8[$607 >> 0] = $4; //@line 25712
  $608 = $ReallocAsyncCtx5 + 12 | 0; //@line 25713
  HEAP32[$608 >> 2] = $6; //@line 25714
  $609 = $ReallocAsyncCtx5 + 16 | 0; //@line 25715
  HEAP8[$609 >> 0] = $8; //@line 25716
  $610 = $ReallocAsyncCtx5 + 17 | 0; //@line 25717
  HEAP8[$610 >> 0] = $10; //@line 25718
  $611 = $ReallocAsyncCtx5 + 20 | 0; //@line 25719
  HEAP32[$611 >> 2] = $12; //@line 25720
  $612 = $ReallocAsyncCtx5 + 24 | 0; //@line 25721
  HEAP32[$612 >> 2] = $14; //@line 25722
  $613 = $ReallocAsyncCtx5 + 28 | 0; //@line 25723
  HEAP32[$613 >> 2] = $16; //@line 25724
  $614 = $ReallocAsyncCtx5 + 32 | 0; //@line 25725
  HEAP32[$614 >> 2] = $18; //@line 25726
  $615 = $ReallocAsyncCtx5 + 36 | 0; //@line 25727
  HEAP32[$615 >> 2] = $20; //@line 25728
  $616 = $ReallocAsyncCtx5 + 40 | 0; //@line 25729
  HEAP32[$616 >> 2] = $22; //@line 25730
  $617 = $ReallocAsyncCtx5 + 44 | 0; //@line 25731
  HEAP32[$617 >> 2] = $24; //@line 25732
  $618 = $ReallocAsyncCtx5 + 48 | 0; //@line 25733
  HEAP32[$618 >> 2] = $26; //@line 25734
  $619 = $ReallocAsyncCtx5 + 52 | 0; //@line 25735
  HEAP32[$619 >> 2] = $28; //@line 25736
  $620 = $ReallocAsyncCtx5 + 56 | 0; //@line 25737
  HEAP32[$620 >> 2] = $30; //@line 25738
  $621 = $ReallocAsyncCtx5 + 60 | 0; //@line 25739
  HEAP32[$621 >> 2] = $34; //@line 25740
  $622 = $ReallocAsyncCtx5 + 64 | 0; //@line 25741
  HEAP32[$622 >> 2] = $36; //@line 25742
  $623 = $ReallocAsyncCtx5 + 68 | 0; //@line 25743
  HEAP32[$623 >> 2] = $38; //@line 25744
  $624 = $ReallocAsyncCtx5 + 72 | 0; //@line 25745
  HEAP32[$624 >> 2] = $40; //@line 25746
  $625 = $ReallocAsyncCtx5 + 76 | 0; //@line 25747
  HEAP32[$625 >> 2] = $42; //@line 25748
  $626 = $ReallocAsyncCtx5 + 80 | 0; //@line 25749
  HEAP32[$626 >> 2] = $44; //@line 25750
  $627 = $ReallocAsyncCtx5 + 84 | 0; //@line 25751
  HEAP32[$627 >> 2] = $46; //@line 25752
  $628 = $ReallocAsyncCtx5 + 88 | 0; //@line 25753
  HEAP32[$628 >> 2] = $48; //@line 25754
  $629 = $ReallocAsyncCtx5 + 92 | 0; //@line 25755
  HEAP32[$629 >> 2] = $50; //@line 25756
  $630 = $ReallocAsyncCtx5 + 96 | 0; //@line 25757
  HEAP32[$630 >> 2] = $52; //@line 25758
  $631 = $ReallocAsyncCtx5 + 100 | 0; //@line 25759
  HEAP32[$631 >> 2] = $54; //@line 25760
  $632 = $ReallocAsyncCtx5 + 104 | 0; //@line 25761
  HEAP32[$632 >> 2] = $56; //@line 25762
  $633 = $ReallocAsyncCtx5 + 108 | 0; //@line 25763
  HEAP8[$633 >> 0] = $594; //@line 25764
  $634 = $ReallocAsyncCtx5 + 112 | 0; //@line 25765
  HEAP32[$634 >> 2] = $58; //@line 25766
  $635 = $ReallocAsyncCtx5 + 116 | 0; //@line 25767
  HEAP32[$635 >> 2] = $60; //@line 25768
  $636 = $ReallocAsyncCtx5 + 120 | 0; //@line 25769
  HEAP32[$636 >> 2] = $62; //@line 25770
  $637 = $ReallocAsyncCtx5 + 124 | 0; //@line 25771
  HEAP32[$637 >> 2] = $64; //@line 25772
  $638 = $ReallocAsyncCtx5 + 128 | 0; //@line 25773
  HEAP32[$638 >> 2] = $66; //@line 25774
  $639 = $ReallocAsyncCtx5 + 132 | 0; //@line 25775
  HEAP32[$639 >> 2] = $68; //@line 25776
  $640 = $ReallocAsyncCtx5 + 136 | 0; //@line 25777
  HEAP32[$640 >> 2] = $70; //@line 25778
  $641 = $ReallocAsyncCtx5 + 140 | 0; //@line 25779
  HEAP32[$641 >> 2] = $72; //@line 25780
  $642 = $ReallocAsyncCtx5 + 144 | 0; //@line 25781
  HEAP32[$642 >> 2] = $74; //@line 25782
  $643 = $ReallocAsyncCtx5 + 148 | 0; //@line 25783
  HEAP32[$643 >> 2] = $76; //@line 25784
  $644 = $ReallocAsyncCtx5 + 152 | 0; //@line 25785
  HEAP32[$644 >> 2] = $78; //@line 25786
  $645 = $ReallocAsyncCtx5 + 156 | 0; //@line 25787
  HEAP32[$645 >> 2] = $80; //@line 25788
  $646 = $ReallocAsyncCtx5 + 160 | 0; //@line 25789
  HEAP32[$646 >> 2] = $82; //@line 25790
  $647 = $ReallocAsyncCtx5 + 164 | 0; //@line 25791
  HEAP32[$647 >> 2] = $84; //@line 25792
  $648 = $ReallocAsyncCtx5 + 168 | 0; //@line 25793
  HEAP32[$648 >> 2] = $86; //@line 25794
  $649 = $ReallocAsyncCtx5 + 172 | 0; //@line 25795
  HEAP32[$649 >> 2] = $88; //@line 25796
  $650 = $ReallocAsyncCtx5 + 176 | 0; //@line 25797
  HEAP32[$650 >> 2] = $90; //@line 25798
  $651 = $ReallocAsyncCtx5 + 180 | 0; //@line 25799
  HEAP32[$651 >> 2] = $92; //@line 25800
  $652 = $ReallocAsyncCtx5 + 184 | 0; //@line 25801
  HEAP32[$652 >> 2] = $94; //@line 25802
  $653 = $ReallocAsyncCtx5 + 188 | 0; //@line 25803
  HEAP32[$653 >> 2] = $96; //@line 25804
  $654 = $ReallocAsyncCtx5 + 192 | 0; //@line 25805
  HEAP32[$654 >> 2] = $98; //@line 25806
  $655 = $ReallocAsyncCtx5 + 196 | 0; //@line 25807
  HEAP32[$655 >> 2] = $100; //@line 25808
  $656 = $ReallocAsyncCtx5 + 200 | 0; //@line 25809
  HEAP32[$656 >> 2] = $104; //@line 25810
  $657 = $ReallocAsyncCtx5 + 204 | 0; //@line 25811
  HEAP32[$657 >> 2] = $106; //@line 25812
  $658 = $ReallocAsyncCtx5 + 208 | 0; //@line 25813
  HEAP32[$658 >> 2] = $108; //@line 25814
  $659 = $ReallocAsyncCtx5 + 212 | 0; //@line 25815
  HEAP32[$659 >> 2] = $110; //@line 25816
  $660 = $ReallocAsyncCtx5 + 216 | 0; //@line 25817
  HEAP32[$660 >> 2] = $112; //@line 25818
  $661 = $ReallocAsyncCtx5 + 220 | 0; //@line 25819
  HEAP32[$661 >> 2] = $114; //@line 25820
  $662 = $ReallocAsyncCtx5 + 224 | 0; //@line 25821
  HEAP32[$662 >> 2] = $116; //@line 25822
  $663 = $ReallocAsyncCtx5 + 228 | 0; //@line 25823
  HEAP32[$663 >> 2] = $118; //@line 25824
  $664 = $ReallocAsyncCtx5 + 232 | 0; //@line 25825
  HEAP32[$664 >> 2] = $120; //@line 25826
  $665 = $ReallocAsyncCtx5 + 236 | 0; //@line 25827
  HEAP32[$665 >> 2] = $122; //@line 25828
  $666 = $ReallocAsyncCtx5 + 240 | 0; //@line 25829
  HEAP32[$666 >> 2] = $124; //@line 25830
  $667 = $ReallocAsyncCtx5 + 244 | 0; //@line 25831
  HEAP32[$667 >> 2] = $126; //@line 25832
  $668 = $ReallocAsyncCtx5 + 248 | 0; //@line 25833
  HEAP32[$668 >> 2] = $128; //@line 25834
  $669 = $ReallocAsyncCtx5 + 252 | 0; //@line 25835
  HEAP32[$669 >> 2] = $130; //@line 25836
  $670 = $ReallocAsyncCtx5 + 256 | 0; //@line 25837
  HEAP32[$670 >> 2] = $132; //@line 25838
  $671 = $ReallocAsyncCtx5 + 260 | 0; //@line 25839
  HEAP32[$671 >> 2] = $134; //@line 25840
  $672 = $ReallocAsyncCtx5 + 264 | 0; //@line 25841
  HEAP32[$672 >> 2] = $136; //@line 25842
  sp = STACKTOP; //@line 25843
  return;
 } else if ((label | 0) == 32) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 25848
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_26($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i108 = 0, $$096$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $234 = 0, $239 = 0, $24 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $347 = 0, $348 = 0, $36 = 0, $38 = 0, $385 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $462 = 0, $463 = 0, $473 = 0, $477 = 0, $48 = 0, $481 = 0, $484 = 0, $490 = 0, $493 = 0, $494 = 0, $50 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $58 = 0, $590 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 22030
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22032
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 22034
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22036
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 22038
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 22040
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 22042
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 22044
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 22046
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 22048
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 22050
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 22052
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 22054
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 22056
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 22058
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 22060
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 22062
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 22064
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 22066
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 22068
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 22070
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 22072
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 22074
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 22076
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 22078
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 22080
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 22082
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 22084
 $56 = HEAP8[$0 + 108 >> 0] | 0; //@line 22086
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 22088
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 22090
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 22092
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 22094
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 22096
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 22098
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 22100
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 22102
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 22104
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 22106
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 22108
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 22110
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 22112
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 22114
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 22116
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 22118
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 22120
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 22122
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 22124
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 22126
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 22128
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 22130
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 22132
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 22134
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 22136
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 22138
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 22140
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 22142
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 22144
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 22146
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 22148
 $120 = HEAP32[$0 + 236 >> 2] | 0; //@line 22150
 $122 = HEAP32[$0 + 240 >> 2] | 0; //@line 22152
 $124 = HEAP32[$0 + 244 >> 2] | 0; //@line 22154
 $126 = HEAP32[$0 + 248 >> 2] | 0; //@line 22156
 $128 = HEAP32[$0 + 252 >> 2] | 0; //@line 22158
 $130 = HEAP32[$0 + 256 >> 2] | 0; //@line 22160
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 22162
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 22164
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 22166
 $462 = HEAP8[$128 >> 0] | 0; //@line 22168
 $463 = $462 & 255; //@line 22169
 if (((-128 - (HEAP8[$118 >> 0] | 0) & 255) + -1 | 0) > ($463 | 0)) {
  HEAP8[$124 + 4 + $463 >> 0] = 7; //@line 22180
  HEAP8[$128 >> 0] = $462 + 2 << 24 >> 24; //@line 22181
  HEAP8[($462 + 1 & 255) + ($124 + 4) >> 0] = $AsyncRetVal; //@line 22182
  HEAP8[$102 >> 0] = 1; //@line 22183
  $$0$i108 = 0; //@line 22184
 } else {
  $$0$i108 = -1e3; //@line 22186
 }
 $$0$be = $56; //@line 22188
 $$096$be = $$0$i108; //@line 22188
 L5 : while (1) {
  if (($$0$be & 255) >= ($10 & 255)) {
   label = 31; //@line 22192
   break;
  }
  $137 = $$0$be + 1 << 24 >> 24; //@line 22196
  switch (HEAP8[$134 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 22201
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 22206
    break L5;
    break;
   }
  case 7:
   {
    label = 14; //@line 22211
    break L5;
    break;
   }
  case 9:
   {
    label = 22; //@line 22216
    break L5;
    break;
   }
  case 10:
   {
    label = 27; //@line 22221
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$6 >> 2] = 0; //@line 22226
    HEAP8[$18 >> 0] = HEAP8[$134 + ($137 & 255) >> 0] | 0; //@line 22231
    HEAP8[$120 >> 0] = HEAP8[$134 + ($$0$be + 2 & 255) >> 0] | 0; //@line 22236
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 22237
    continue L5;
    break;
   }
  case 4:
   {
    $231 = $$0$be + 2 << 24 >> 24; //@line 22242
    $234 = HEAP8[$134 + ($137 & 255) >> 0] | 0; //@line 22245
    HEAP8[$108 >> 0] = $234; //@line 22246
    HEAP16[$86 >> 1] = 1 << ($234 & 255); //@line 22250
    $239 = HEAP8[$128 >> 0] | 0; //@line 22252
    if (($239 & 255) >= (-128 - (HEAP8[$118 >> 0] | 0) & 255)) {
     $$0$be = $231; //@line 22256
     $$096$be = -1e3; //@line 22256
     continue L5;
    }
    HEAP8[$128 >> 0] = $239 + 1 << 24 >> 24; //@line 22262
    HEAP8[($239 & 255) + ($124 + 4) >> 0] = 4; //@line 22263
    HEAP8[$102 >> 0] = 1; //@line 22264
    $$0$be = $231; //@line 22265
    $$096$be = 0; //@line 22265
    continue L5;
    break;
   }
  case 6:
   {
    $347 = HEAP8[$128 >> 0] | 0; //@line 22271
    $348 = $347 & 255; //@line 22272
    if (((-128 - (HEAP8[$118 >> 0] | 0) & 255) + -2 | 0) <= ($348 | 0)) {
     $$0$be = $137; //@line 22278
     $$096$be = -1e3; //@line 22278
     continue L5;
    }
    HEAP8[$124 + 4 + $348 >> 0] = 6; //@line 22283
    HEAP8[($347 + 1 & 255) + ($124 + 4) >> 0] = -1; //@line 22287
    HEAP8[$128 >> 0] = $347 + 3 << 24 >> 24; //@line 22289
    HEAP8[($347 + 2 & 255) + ($124 + 4) >> 0] = $4; //@line 22292
    HEAP8[$102 >> 0] = 1; //@line 22293
    $$0$be = $137; //@line 22294
    $$096$be = 0; //@line 22294
    continue L5;
    break;
   }
  case 8:
   {
    $473 = $$0$be + 2 << 24 >> 24; //@line 22299
    $477 = HEAP8[$134 + ($137 & 255) >> 0] & 15; //@line 22303
    $481 = ($477 + ($477 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 22308
    HEAP32[$80 >> 2] = $481; //@line 22309
    HEAP32[$68 >> 2] = $481 + 1e3; //@line 22311
    $484 = HEAP8[$128 >> 0] | 0; //@line 22313
    if (($484 & 255) >= (-128 - (HEAP8[$118 >> 0] | 0) & 255)) {
     $$0$be = $473; //@line 22317
     $$096$be = -1e3; //@line 22317
     continue L5;
    }
    HEAP8[$128 >> 0] = $484 + 1 << 24 >> 24; //@line 22323
    HEAP8[($484 & 255) + ($124 + 4) >> 0] = 8; //@line 22324
    HEAP8[$28 >> 0] = 1; //@line 22325
    HEAP8[$102 >> 0] = 1; //@line 22326
    $$0$be = $473; //@line 22327
    $$096$be = 0; //@line 22327
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $137; //@line 22332
    $$096$be = -1013; //@line 22332
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$112 >> 0] = 0; //@line 22338
  HEAP8[$76 >> 0] = 0; //@line 22339
  HEAP8[$82 >> 0] = 0; //@line 22340
  HEAP8[$72 >> 0] = 0; //@line 22341
  $148 = $137 & 255; //@line 22342
  $149 = $148 + -1 | 0; //@line 22343
  HEAP32[$100 >> 2] = $134 + $149; //@line 22345
  HEAP8[$110 >> 0] = $42 - $149; //@line 22348
  HEAP8[$98 >> 0] = HEAP8[$94 >> 0] | 0; //@line 22350
  HEAP8[$78 >> 0] = HEAP8[$70 >> 0] | 0; //@line 22352
  HEAP8[$38 >> 0] = HEAP8[$64 >> 0] | 0; //@line 22354
  HEAP8[$30 >> 0] = HEAP8[$50 >> 0] | 0; //@line 22356
  HEAP8[$2 >> 0] = HEAP8[$32 >> 0] | 0; //@line 22358
  $160 = HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] | 0; //@line 22361
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 22362
  $161 = FUNCTION_TABLE_iiiiiii[$160 & 3]($14, $104, $112, $76, $82, $72) | 0; //@line 22363
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 595; //@line 22366
   $162 = $ReallocAsyncCtx + 4 | 0; //@line 22367
   HEAP32[$162 >> 2] = $2; //@line 22368
   $163 = $ReallocAsyncCtx + 8 | 0; //@line 22369
   HEAP8[$163 >> 0] = $4; //@line 22370
   $164 = $ReallocAsyncCtx + 12 | 0; //@line 22371
   HEAP32[$164 >> 2] = $6; //@line 22372
   $165 = $ReallocAsyncCtx + 16 | 0; //@line 22373
   HEAP8[$165 >> 0] = $8; //@line 22374
   $166 = $ReallocAsyncCtx + 17 | 0; //@line 22375
   HEAP8[$166 >> 0] = $10; //@line 22376
   $167 = $ReallocAsyncCtx + 20 | 0; //@line 22377
   HEAP32[$167 >> 2] = $12; //@line 22378
   $168 = $ReallocAsyncCtx + 24 | 0; //@line 22379
   HEAP32[$168 >> 2] = $14; //@line 22380
   $169 = $ReallocAsyncCtx + 28 | 0; //@line 22381
   HEAP32[$169 >> 2] = $16; //@line 22382
   $170 = $ReallocAsyncCtx + 32 | 0; //@line 22383
   HEAP32[$170 >> 2] = $18; //@line 22384
   $171 = $ReallocAsyncCtx + 36 | 0; //@line 22385
   HEAP32[$171 >> 2] = $20; //@line 22386
   $172 = $ReallocAsyncCtx + 40 | 0; //@line 22387
   HEAP32[$172 >> 2] = $22; //@line 22388
   $173 = $ReallocAsyncCtx + 44 | 0; //@line 22389
   HEAP32[$173 >> 2] = $24; //@line 22390
   $174 = $ReallocAsyncCtx + 48 | 0; //@line 22391
   HEAP32[$174 >> 2] = $26; //@line 22392
   $175 = $ReallocAsyncCtx + 52 | 0; //@line 22393
   HEAP32[$175 >> 2] = $28; //@line 22394
   $176 = $ReallocAsyncCtx + 56 | 0; //@line 22395
   HEAP32[$176 >> 2] = $30; //@line 22396
   $177 = $ReallocAsyncCtx + 60 | 0; //@line 22397
   HEAP32[$177 >> 2] = $32; //@line 22398
   $178 = $ReallocAsyncCtx + 64 | 0; //@line 22399
   HEAP32[$178 >> 2] = $34; //@line 22400
   $179 = $ReallocAsyncCtx + 68 | 0; //@line 22401
   HEAP32[$179 >> 2] = $36; //@line 22402
   $180 = $ReallocAsyncCtx + 72 | 0; //@line 22403
   HEAP32[$180 >> 2] = $38; //@line 22404
   $181 = $ReallocAsyncCtx + 76 | 0; //@line 22405
   HEAP32[$181 >> 2] = $40; //@line 22406
   $182 = $ReallocAsyncCtx + 80 | 0; //@line 22407
   HEAP32[$182 >> 2] = $42; //@line 22408
   $183 = $ReallocAsyncCtx + 84 | 0; //@line 22409
   HEAP32[$183 >> 2] = $44; //@line 22410
   $184 = $ReallocAsyncCtx + 88 | 0; //@line 22411
   HEAP32[$184 >> 2] = $46; //@line 22412
   $185 = $ReallocAsyncCtx + 92 | 0; //@line 22413
   HEAP32[$185 >> 2] = $48; //@line 22414
   $186 = $ReallocAsyncCtx + 96 | 0; //@line 22415
   HEAP32[$186 >> 2] = $50; //@line 22416
   $187 = $ReallocAsyncCtx + 100 | 0; //@line 22417
   HEAP32[$187 >> 2] = $52; //@line 22418
   $188 = $ReallocAsyncCtx + 104 | 0; //@line 22419
   HEAP32[$188 >> 2] = $54; //@line 22420
   $189 = $ReallocAsyncCtx + 108 | 0; //@line 22421
   HEAP32[$189 >> 2] = $58; //@line 22422
   $190 = $ReallocAsyncCtx + 112 | 0; //@line 22423
   HEAP32[$190 >> 2] = $60; //@line 22424
   $191 = $ReallocAsyncCtx + 116 | 0; //@line 22425
   HEAP32[$191 >> 2] = $62; //@line 22426
   $192 = $ReallocAsyncCtx + 120 | 0; //@line 22427
   HEAP32[$192 >> 2] = $64; //@line 22428
   $193 = $ReallocAsyncCtx + 124 | 0; //@line 22429
   HEAP32[$193 >> 2] = $66; //@line 22430
   $194 = $ReallocAsyncCtx + 128 | 0; //@line 22431
   HEAP32[$194 >> 2] = $148; //@line 22432
   $195 = $ReallocAsyncCtx + 132 | 0; //@line 22433
   HEAP32[$195 >> 2] = $68; //@line 22434
   $196 = $ReallocAsyncCtx + 136 | 0; //@line 22435
   HEAP32[$196 >> 2] = $70; //@line 22436
   $197 = $ReallocAsyncCtx + 140 | 0; //@line 22437
   HEAP32[$197 >> 2] = $72; //@line 22438
   $198 = $ReallocAsyncCtx + 144 | 0; //@line 22439
   HEAP32[$198 >> 2] = $74; //@line 22440
   $199 = $ReallocAsyncCtx + 148 | 0; //@line 22441
   HEAP32[$199 >> 2] = $76; //@line 22442
   $200 = $ReallocAsyncCtx + 152 | 0; //@line 22443
   HEAP32[$200 >> 2] = $78; //@line 22444
   $201 = $ReallocAsyncCtx + 156 | 0; //@line 22445
   HEAP32[$201 >> 2] = $80; //@line 22446
   $202 = $ReallocAsyncCtx + 160 | 0; //@line 22447
   HEAP32[$202 >> 2] = $82; //@line 22448
   $203 = $ReallocAsyncCtx + 164 | 0; //@line 22449
   HEAP32[$203 >> 2] = $84; //@line 22450
   $204 = $ReallocAsyncCtx + 168 | 0; //@line 22451
   HEAP32[$204 >> 2] = $86; //@line 22452
   $205 = $ReallocAsyncCtx + 172 | 0; //@line 22453
   HEAP32[$205 >> 2] = $88; //@line 22454
   $206 = $ReallocAsyncCtx + 176 | 0; //@line 22455
   HEAP32[$206 >> 2] = $90; //@line 22456
   $207 = $ReallocAsyncCtx + 180 | 0; //@line 22457
   HEAP32[$207 >> 2] = $92; //@line 22458
   $208 = $ReallocAsyncCtx + 184 | 0; //@line 22459
   HEAP32[$208 >> 2] = $94; //@line 22460
   $209 = $ReallocAsyncCtx + 188 | 0; //@line 22461
   HEAP32[$209 >> 2] = $96; //@line 22462
   $210 = $ReallocAsyncCtx + 192 | 0; //@line 22463
   HEAP32[$210 >> 2] = $98; //@line 22464
   $211 = $ReallocAsyncCtx + 196 | 0; //@line 22465
   HEAP32[$211 >> 2] = $100; //@line 22466
   $212 = $ReallocAsyncCtx + 200 | 0; //@line 22467
   HEAP32[$212 >> 2] = $$096$be; //@line 22468
   $213 = $ReallocAsyncCtx + 204 | 0; //@line 22469
   HEAP32[$213 >> 2] = $102; //@line 22470
   $214 = $ReallocAsyncCtx + 208 | 0; //@line 22471
   HEAP32[$214 >> 2] = $104; //@line 22472
   $215 = $ReallocAsyncCtx + 212 | 0; //@line 22473
   HEAP32[$215 >> 2] = $106; //@line 22474
   $216 = $ReallocAsyncCtx + 216 | 0; //@line 22475
   HEAP32[$216 >> 2] = $108; //@line 22476
   $217 = $ReallocAsyncCtx + 220 | 0; //@line 22477
   HEAP32[$217 >> 2] = $110; //@line 22478
   $218 = $ReallocAsyncCtx + 224 | 0; //@line 22479
   HEAP32[$218 >> 2] = $112; //@line 22480
   $219 = $ReallocAsyncCtx + 228 | 0; //@line 22481
   HEAP32[$219 >> 2] = $114; //@line 22482
   $220 = $ReallocAsyncCtx + 232 | 0; //@line 22483
   HEAP32[$220 >> 2] = $116; //@line 22484
   $221 = $ReallocAsyncCtx + 236 | 0; //@line 22485
   HEAP32[$221 >> 2] = $118; //@line 22486
   $222 = $ReallocAsyncCtx + 240 | 0; //@line 22487
   HEAP32[$222 >> 2] = $120; //@line 22488
   $223 = $ReallocAsyncCtx + 244 | 0; //@line 22489
   HEAP32[$223 >> 2] = $122; //@line 22490
   $224 = $ReallocAsyncCtx + 248 | 0; //@line 22491
   HEAP32[$224 >> 2] = $124; //@line 22492
   $225 = $ReallocAsyncCtx + 252 | 0; //@line 22493
   HEAP32[$225 >> 2] = $126; //@line 22494
   $226 = $ReallocAsyncCtx + 256 | 0; //@line 22495
   HEAP32[$226 >> 2] = $128; //@line 22496
   $227 = $ReallocAsyncCtx + 260 | 0; //@line 22497
   HEAP32[$227 >> 2] = $130; //@line 22498
   $228 = $ReallocAsyncCtx + 264 | 0; //@line 22499
   HEAP32[$228 >> 2] = $132; //@line 22500
   $229 = $ReallocAsyncCtx + 268 | 0; //@line 22501
   HEAP32[$229 >> 2] = $134; //@line 22502
   sp = STACKTOP; //@line 22503
   return;
  }
  HEAP8[___async_retval >> 0] = $161; //@line 22507
  ___async_unwind = 0; //@line 22508
  HEAP32[$ReallocAsyncCtx >> 2] = 595; //@line 22509
  $162 = $ReallocAsyncCtx + 4 | 0; //@line 22510
  HEAP32[$162 >> 2] = $2; //@line 22511
  $163 = $ReallocAsyncCtx + 8 | 0; //@line 22512
  HEAP8[$163 >> 0] = $4; //@line 22513
  $164 = $ReallocAsyncCtx + 12 | 0; //@line 22514
  HEAP32[$164 >> 2] = $6; //@line 22515
  $165 = $ReallocAsyncCtx + 16 | 0; //@line 22516
  HEAP8[$165 >> 0] = $8; //@line 22517
  $166 = $ReallocAsyncCtx + 17 | 0; //@line 22518
  HEAP8[$166 >> 0] = $10; //@line 22519
  $167 = $ReallocAsyncCtx + 20 | 0; //@line 22520
  HEAP32[$167 >> 2] = $12; //@line 22521
  $168 = $ReallocAsyncCtx + 24 | 0; //@line 22522
  HEAP32[$168 >> 2] = $14; //@line 22523
  $169 = $ReallocAsyncCtx + 28 | 0; //@line 22524
  HEAP32[$169 >> 2] = $16; //@line 22525
  $170 = $ReallocAsyncCtx + 32 | 0; //@line 22526
  HEAP32[$170 >> 2] = $18; //@line 22527
  $171 = $ReallocAsyncCtx + 36 | 0; //@line 22528
  HEAP32[$171 >> 2] = $20; //@line 22529
  $172 = $ReallocAsyncCtx + 40 | 0; //@line 22530
  HEAP32[$172 >> 2] = $22; //@line 22531
  $173 = $ReallocAsyncCtx + 44 | 0; //@line 22532
  HEAP32[$173 >> 2] = $24; //@line 22533
  $174 = $ReallocAsyncCtx + 48 | 0; //@line 22534
  HEAP32[$174 >> 2] = $26; //@line 22535
  $175 = $ReallocAsyncCtx + 52 | 0; //@line 22536
  HEAP32[$175 >> 2] = $28; //@line 22537
  $176 = $ReallocAsyncCtx + 56 | 0; //@line 22538
  HEAP32[$176 >> 2] = $30; //@line 22539
  $177 = $ReallocAsyncCtx + 60 | 0; //@line 22540
  HEAP32[$177 >> 2] = $32; //@line 22541
  $178 = $ReallocAsyncCtx + 64 | 0; //@line 22542
  HEAP32[$178 >> 2] = $34; //@line 22543
  $179 = $ReallocAsyncCtx + 68 | 0; //@line 22544
  HEAP32[$179 >> 2] = $36; //@line 22545
  $180 = $ReallocAsyncCtx + 72 | 0; //@line 22546
  HEAP32[$180 >> 2] = $38; //@line 22547
  $181 = $ReallocAsyncCtx + 76 | 0; //@line 22548
  HEAP32[$181 >> 2] = $40; //@line 22549
  $182 = $ReallocAsyncCtx + 80 | 0; //@line 22550
  HEAP32[$182 >> 2] = $42; //@line 22551
  $183 = $ReallocAsyncCtx + 84 | 0; //@line 22552
  HEAP32[$183 >> 2] = $44; //@line 22553
  $184 = $ReallocAsyncCtx + 88 | 0; //@line 22554
  HEAP32[$184 >> 2] = $46; //@line 22555
  $185 = $ReallocAsyncCtx + 92 | 0; //@line 22556
  HEAP32[$185 >> 2] = $48; //@line 22557
  $186 = $ReallocAsyncCtx + 96 | 0; //@line 22558
  HEAP32[$186 >> 2] = $50; //@line 22559
  $187 = $ReallocAsyncCtx + 100 | 0; //@line 22560
  HEAP32[$187 >> 2] = $52; //@line 22561
  $188 = $ReallocAsyncCtx + 104 | 0; //@line 22562
  HEAP32[$188 >> 2] = $54; //@line 22563
  $189 = $ReallocAsyncCtx + 108 | 0; //@line 22564
  HEAP32[$189 >> 2] = $58; //@line 22565
  $190 = $ReallocAsyncCtx + 112 | 0; //@line 22566
  HEAP32[$190 >> 2] = $60; //@line 22567
  $191 = $ReallocAsyncCtx + 116 | 0; //@line 22568
  HEAP32[$191 >> 2] = $62; //@line 22569
  $192 = $ReallocAsyncCtx + 120 | 0; //@line 22570
  HEAP32[$192 >> 2] = $64; //@line 22571
  $193 = $ReallocAsyncCtx + 124 | 0; //@line 22572
  HEAP32[$193 >> 2] = $66; //@line 22573
  $194 = $ReallocAsyncCtx + 128 | 0; //@line 22574
  HEAP32[$194 >> 2] = $148; //@line 22575
  $195 = $ReallocAsyncCtx + 132 | 0; //@line 22576
  HEAP32[$195 >> 2] = $68; //@line 22577
  $196 = $ReallocAsyncCtx + 136 | 0; //@line 22578
  HEAP32[$196 >> 2] = $70; //@line 22579
  $197 = $ReallocAsyncCtx + 140 | 0; //@line 22580
  HEAP32[$197 >> 2] = $72; //@line 22581
  $198 = $ReallocAsyncCtx + 144 | 0; //@line 22582
  HEAP32[$198 >> 2] = $74; //@line 22583
  $199 = $ReallocAsyncCtx + 148 | 0; //@line 22584
  HEAP32[$199 >> 2] = $76; //@line 22585
  $200 = $ReallocAsyncCtx + 152 | 0; //@line 22586
  HEAP32[$200 >> 2] = $78; //@line 22587
  $201 = $ReallocAsyncCtx + 156 | 0; //@line 22588
  HEAP32[$201 >> 2] = $80; //@line 22589
  $202 = $ReallocAsyncCtx + 160 | 0; //@line 22590
  HEAP32[$202 >> 2] = $82; //@line 22591
  $203 = $ReallocAsyncCtx + 164 | 0; //@line 22592
  HEAP32[$203 >> 2] = $84; //@line 22593
  $204 = $ReallocAsyncCtx + 168 | 0; //@line 22594
  HEAP32[$204 >> 2] = $86; //@line 22595
  $205 = $ReallocAsyncCtx + 172 | 0; //@line 22596
  HEAP32[$205 >> 2] = $88; //@line 22597
  $206 = $ReallocAsyncCtx + 176 | 0; //@line 22598
  HEAP32[$206 >> 2] = $90; //@line 22599
  $207 = $ReallocAsyncCtx + 180 | 0; //@line 22600
  HEAP32[$207 >> 2] = $92; //@line 22601
  $208 = $ReallocAsyncCtx + 184 | 0; //@line 22602
  HEAP32[$208 >> 2] = $94; //@line 22603
  $209 = $ReallocAsyncCtx + 188 | 0; //@line 22604
  HEAP32[$209 >> 2] = $96; //@line 22605
  $210 = $ReallocAsyncCtx + 192 | 0; //@line 22606
  HEAP32[$210 >> 2] = $98; //@line 22607
  $211 = $ReallocAsyncCtx + 196 | 0; //@line 22608
  HEAP32[$211 >> 2] = $100; //@line 22609
  $212 = $ReallocAsyncCtx + 200 | 0; //@line 22610
  HEAP32[$212 >> 2] = $$096$be; //@line 22611
  $213 = $ReallocAsyncCtx + 204 | 0; //@line 22612
  HEAP32[$213 >> 2] = $102; //@line 22613
  $214 = $ReallocAsyncCtx + 208 | 0; //@line 22614
  HEAP32[$214 >> 2] = $104; //@line 22615
  $215 = $ReallocAsyncCtx + 212 | 0; //@line 22616
  HEAP32[$215 >> 2] = $106; //@line 22617
  $216 = $ReallocAsyncCtx + 216 | 0; //@line 22618
  HEAP32[$216 >> 2] = $108; //@line 22619
  $217 = $ReallocAsyncCtx + 220 | 0; //@line 22620
  HEAP32[$217 >> 2] = $110; //@line 22621
  $218 = $ReallocAsyncCtx + 224 | 0; //@line 22622
  HEAP32[$218 >> 2] = $112; //@line 22623
  $219 = $ReallocAsyncCtx + 228 | 0; //@line 22624
  HEAP32[$219 >> 2] = $114; //@line 22625
  $220 = $ReallocAsyncCtx + 232 | 0; //@line 22626
  HEAP32[$220 >> 2] = $116; //@line 22627
  $221 = $ReallocAsyncCtx + 236 | 0; //@line 22628
  HEAP32[$221 >> 2] = $118; //@line 22629
  $222 = $ReallocAsyncCtx + 240 | 0; //@line 22630
  HEAP32[$222 >> 2] = $120; //@line 22631
  $223 = $ReallocAsyncCtx + 244 | 0; //@line 22632
  HEAP32[$223 >> 2] = $122; //@line 22633
  $224 = $ReallocAsyncCtx + 248 | 0; //@line 22634
  HEAP32[$224 >> 2] = $124; //@line 22635
  $225 = $ReallocAsyncCtx + 252 | 0; //@line 22636
  HEAP32[$225 >> 2] = $126; //@line 22637
  $226 = $ReallocAsyncCtx + 256 | 0; //@line 22638
  HEAP32[$226 >> 2] = $128; //@line 22639
  $227 = $ReallocAsyncCtx + 260 | 0; //@line 22640
  HEAP32[$227 >> 2] = $130; //@line 22641
  $228 = $ReallocAsyncCtx + 264 | 0; //@line 22642
  HEAP32[$228 >> 2] = $132; //@line 22643
  $229 = $ReallocAsyncCtx + 268 | 0; //@line 22644
  HEAP32[$229 >> 2] = $134; //@line 22645
  sp = STACKTOP; //@line 22646
  return;
 } else if ((label | 0) == 9) {
  $247 = HEAP8[$134 + ($137 & 255) >> 0] | 0; //@line 22652
  HEAP8[$84 >> 0] = ($247 & 255) >>> 4 & 7; //@line 22657
  HEAP8[$74 >> 0] = $247 & 15; //@line 22659
  $266 = $$0$be + 5 << 24 >> 24; //@line 22673
  HEAP32[$60 >> 2] = (HEAPU8[$134 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$134 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$134 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 22681
  $276 = HEAP32[(HEAP32[$52 >> 2] | 0) + 40 >> 2] | 0; //@line 22684
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 22685
  $277 = FUNCTION_TABLE_iii[$276 & 31]($14, $96) | 0; //@line 22686
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 596; //@line 22689
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 22690
   HEAP32[$278 >> 2] = $2; //@line 22691
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 22692
   HEAP8[$279 >> 0] = $4; //@line 22693
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 22694
   HEAP32[$280 >> 2] = $6; //@line 22695
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 22696
   HEAP8[$281 >> 0] = $8; //@line 22697
   $282 = $ReallocAsyncCtx2 + 17 | 0; //@line 22698
   HEAP8[$282 >> 0] = $10; //@line 22699
   $283 = $ReallocAsyncCtx2 + 20 | 0; //@line 22700
   HEAP32[$283 >> 2] = $12; //@line 22701
   $284 = $ReallocAsyncCtx2 + 24 | 0; //@line 22702
   HEAP32[$284 >> 2] = $14; //@line 22703
   $285 = $ReallocAsyncCtx2 + 28 | 0; //@line 22704
   HEAP32[$285 >> 2] = $16; //@line 22705
   $286 = $ReallocAsyncCtx2 + 32 | 0; //@line 22706
   HEAP32[$286 >> 2] = $18; //@line 22707
   $287 = $ReallocAsyncCtx2 + 36 | 0; //@line 22708
   HEAP32[$287 >> 2] = $20; //@line 22709
   $288 = $ReallocAsyncCtx2 + 40 | 0; //@line 22710
   HEAP32[$288 >> 2] = $22; //@line 22711
   $289 = $ReallocAsyncCtx2 + 44 | 0; //@line 22712
   HEAP32[$289 >> 2] = $24; //@line 22713
   $290 = $ReallocAsyncCtx2 + 48 | 0; //@line 22714
   HEAP32[$290 >> 2] = $26; //@line 22715
   $291 = $ReallocAsyncCtx2 + 52 | 0; //@line 22716
   HEAP32[$291 >> 2] = $28; //@line 22717
   $292 = $ReallocAsyncCtx2 + 56 | 0; //@line 22718
   HEAP32[$292 >> 2] = $30; //@line 22719
   $293 = $ReallocAsyncCtx2 + 60 | 0; //@line 22720
   HEAP32[$293 >> 2] = $32; //@line 22721
   $294 = $ReallocAsyncCtx2 + 64 | 0; //@line 22722
   HEAP32[$294 >> 2] = $34; //@line 22723
   $295 = $ReallocAsyncCtx2 + 68 | 0; //@line 22724
   HEAP32[$295 >> 2] = $36; //@line 22725
   $296 = $ReallocAsyncCtx2 + 72 | 0; //@line 22726
   HEAP32[$296 >> 2] = $38; //@line 22727
   $297 = $ReallocAsyncCtx2 + 76 | 0; //@line 22728
   HEAP32[$297 >> 2] = $40; //@line 22729
   $298 = $ReallocAsyncCtx2 + 80 | 0; //@line 22730
   HEAP32[$298 >> 2] = $42; //@line 22731
   $299 = $ReallocAsyncCtx2 + 84 | 0; //@line 22732
   HEAP32[$299 >> 2] = $44; //@line 22733
   $300 = $ReallocAsyncCtx2 + 88 | 0; //@line 22734
   HEAP32[$300 >> 2] = $46; //@line 22735
   $301 = $ReallocAsyncCtx2 + 92 | 0; //@line 22736
   HEAP32[$301 >> 2] = $48; //@line 22737
   $302 = $ReallocAsyncCtx2 + 96 | 0; //@line 22738
   HEAP32[$302 >> 2] = $50; //@line 22739
   $303 = $ReallocAsyncCtx2 + 100 | 0; //@line 22740
   HEAP8[$303 >> 0] = $266; //@line 22741
   $304 = $ReallocAsyncCtx2 + 104 | 0; //@line 22742
   HEAP32[$304 >> 2] = $52; //@line 22743
   $305 = $ReallocAsyncCtx2 + 108 | 0; //@line 22744
   HEAP32[$305 >> 2] = $54; //@line 22745
   $306 = $ReallocAsyncCtx2 + 112 | 0; //@line 22746
   HEAP32[$306 >> 2] = $58; //@line 22747
   $307 = $ReallocAsyncCtx2 + 116 | 0; //@line 22748
   HEAP32[$307 >> 2] = $60; //@line 22749
   $308 = $ReallocAsyncCtx2 + 120 | 0; //@line 22750
   HEAP32[$308 >> 2] = $62; //@line 22751
   $309 = $ReallocAsyncCtx2 + 124 | 0; //@line 22752
   HEAP32[$309 >> 2] = $64; //@line 22753
   $310 = $ReallocAsyncCtx2 + 128 | 0; //@line 22754
   HEAP32[$310 >> 2] = $66; //@line 22755
   $311 = $ReallocAsyncCtx2 + 132 | 0; //@line 22756
   HEAP32[$311 >> 2] = $68; //@line 22757
   $312 = $ReallocAsyncCtx2 + 136 | 0; //@line 22758
   HEAP32[$312 >> 2] = $70; //@line 22759
   $313 = $ReallocAsyncCtx2 + 140 | 0; //@line 22760
   HEAP32[$313 >> 2] = $72; //@line 22761
   $314 = $ReallocAsyncCtx2 + 144 | 0; //@line 22762
   HEAP32[$314 >> 2] = $74; //@line 22763
   $315 = $ReallocAsyncCtx2 + 148 | 0; //@line 22764
   HEAP32[$315 >> 2] = $76; //@line 22765
   $316 = $ReallocAsyncCtx2 + 152 | 0; //@line 22766
   HEAP32[$316 >> 2] = $78; //@line 22767
   $317 = $ReallocAsyncCtx2 + 156 | 0; //@line 22768
   HEAP32[$317 >> 2] = $80; //@line 22769
   $318 = $ReallocAsyncCtx2 + 160 | 0; //@line 22770
   HEAP32[$318 >> 2] = $82; //@line 22771
   $319 = $ReallocAsyncCtx2 + 164 | 0; //@line 22772
   HEAP32[$319 >> 2] = $84; //@line 22773
   $320 = $ReallocAsyncCtx2 + 168 | 0; //@line 22774
   HEAP32[$320 >> 2] = $86; //@line 22775
   $321 = $ReallocAsyncCtx2 + 172 | 0; //@line 22776
   HEAP32[$321 >> 2] = $88; //@line 22777
   $322 = $ReallocAsyncCtx2 + 176 | 0; //@line 22778
   HEAP32[$322 >> 2] = $90; //@line 22779
   $323 = $ReallocAsyncCtx2 + 180 | 0; //@line 22780
   HEAP32[$323 >> 2] = $92; //@line 22781
   $324 = $ReallocAsyncCtx2 + 184 | 0; //@line 22782
   HEAP32[$324 >> 2] = $94; //@line 22783
   $325 = $ReallocAsyncCtx2 + 188 | 0; //@line 22784
   HEAP32[$325 >> 2] = $96; //@line 22785
   $326 = $ReallocAsyncCtx2 + 192 | 0; //@line 22786
   HEAP32[$326 >> 2] = $98; //@line 22787
   $327 = $ReallocAsyncCtx2 + 196 | 0; //@line 22788
   HEAP32[$327 >> 2] = $100; //@line 22789
   $328 = $ReallocAsyncCtx2 + 200 | 0; //@line 22790
   HEAP32[$328 >> 2] = $102; //@line 22791
   $329 = $ReallocAsyncCtx2 + 204 | 0; //@line 22792
   HEAP32[$329 >> 2] = $104; //@line 22793
   $330 = $ReallocAsyncCtx2 + 208 | 0; //@line 22794
   HEAP32[$330 >> 2] = $106; //@line 22795
   $331 = $ReallocAsyncCtx2 + 212 | 0; //@line 22796
   HEAP32[$331 >> 2] = $108; //@line 22797
   $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 22798
   HEAP32[$332 >> 2] = $110; //@line 22799
   $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 22800
   HEAP32[$333 >> 2] = $112; //@line 22801
   $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 22802
   HEAP32[$334 >> 2] = $114; //@line 22803
   $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 22804
   HEAP32[$335 >> 2] = $116; //@line 22805
   $336 = $ReallocAsyncCtx2 + 232 | 0; //@line 22806
   HEAP32[$336 >> 2] = $118; //@line 22807
   $337 = $ReallocAsyncCtx2 + 236 | 0; //@line 22808
   HEAP32[$337 >> 2] = $120; //@line 22809
   $338 = $ReallocAsyncCtx2 + 240 | 0; //@line 22810
   HEAP32[$338 >> 2] = $122; //@line 22811
   $339 = $ReallocAsyncCtx2 + 244 | 0; //@line 22812
   HEAP32[$339 >> 2] = $124; //@line 22813
   $340 = $ReallocAsyncCtx2 + 248 | 0; //@line 22814
   HEAP32[$340 >> 2] = $126; //@line 22815
   $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 22816
   HEAP32[$341 >> 2] = $128; //@line 22817
   $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 22818
   HEAP32[$342 >> 2] = $130; //@line 22819
   $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 22820
   HEAP32[$343 >> 2] = $132; //@line 22821
   $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 22822
   HEAP32[$344 >> 2] = $134; //@line 22823
   sp = STACKTOP; //@line 22824
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 22828
  ___async_unwind = 0; //@line 22829
  HEAP32[$ReallocAsyncCtx2 >> 2] = 596; //@line 22830
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 22831
  HEAP32[$278 >> 2] = $2; //@line 22832
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 22833
  HEAP8[$279 >> 0] = $4; //@line 22834
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 22835
  HEAP32[$280 >> 2] = $6; //@line 22836
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 22837
  HEAP8[$281 >> 0] = $8; //@line 22838
  $282 = $ReallocAsyncCtx2 + 17 | 0; //@line 22839
  HEAP8[$282 >> 0] = $10; //@line 22840
  $283 = $ReallocAsyncCtx2 + 20 | 0; //@line 22841
  HEAP32[$283 >> 2] = $12; //@line 22842
  $284 = $ReallocAsyncCtx2 + 24 | 0; //@line 22843
  HEAP32[$284 >> 2] = $14; //@line 22844
  $285 = $ReallocAsyncCtx2 + 28 | 0; //@line 22845
  HEAP32[$285 >> 2] = $16; //@line 22846
  $286 = $ReallocAsyncCtx2 + 32 | 0; //@line 22847
  HEAP32[$286 >> 2] = $18; //@line 22848
  $287 = $ReallocAsyncCtx2 + 36 | 0; //@line 22849
  HEAP32[$287 >> 2] = $20; //@line 22850
  $288 = $ReallocAsyncCtx2 + 40 | 0; //@line 22851
  HEAP32[$288 >> 2] = $22; //@line 22852
  $289 = $ReallocAsyncCtx2 + 44 | 0; //@line 22853
  HEAP32[$289 >> 2] = $24; //@line 22854
  $290 = $ReallocAsyncCtx2 + 48 | 0; //@line 22855
  HEAP32[$290 >> 2] = $26; //@line 22856
  $291 = $ReallocAsyncCtx2 + 52 | 0; //@line 22857
  HEAP32[$291 >> 2] = $28; //@line 22858
  $292 = $ReallocAsyncCtx2 + 56 | 0; //@line 22859
  HEAP32[$292 >> 2] = $30; //@line 22860
  $293 = $ReallocAsyncCtx2 + 60 | 0; //@line 22861
  HEAP32[$293 >> 2] = $32; //@line 22862
  $294 = $ReallocAsyncCtx2 + 64 | 0; //@line 22863
  HEAP32[$294 >> 2] = $34; //@line 22864
  $295 = $ReallocAsyncCtx2 + 68 | 0; //@line 22865
  HEAP32[$295 >> 2] = $36; //@line 22866
  $296 = $ReallocAsyncCtx2 + 72 | 0; //@line 22867
  HEAP32[$296 >> 2] = $38; //@line 22868
  $297 = $ReallocAsyncCtx2 + 76 | 0; //@line 22869
  HEAP32[$297 >> 2] = $40; //@line 22870
  $298 = $ReallocAsyncCtx2 + 80 | 0; //@line 22871
  HEAP32[$298 >> 2] = $42; //@line 22872
  $299 = $ReallocAsyncCtx2 + 84 | 0; //@line 22873
  HEAP32[$299 >> 2] = $44; //@line 22874
  $300 = $ReallocAsyncCtx2 + 88 | 0; //@line 22875
  HEAP32[$300 >> 2] = $46; //@line 22876
  $301 = $ReallocAsyncCtx2 + 92 | 0; //@line 22877
  HEAP32[$301 >> 2] = $48; //@line 22878
  $302 = $ReallocAsyncCtx2 + 96 | 0; //@line 22879
  HEAP32[$302 >> 2] = $50; //@line 22880
  $303 = $ReallocAsyncCtx2 + 100 | 0; //@line 22881
  HEAP8[$303 >> 0] = $266; //@line 22882
  $304 = $ReallocAsyncCtx2 + 104 | 0; //@line 22883
  HEAP32[$304 >> 2] = $52; //@line 22884
  $305 = $ReallocAsyncCtx2 + 108 | 0; //@line 22885
  HEAP32[$305 >> 2] = $54; //@line 22886
  $306 = $ReallocAsyncCtx2 + 112 | 0; //@line 22887
  HEAP32[$306 >> 2] = $58; //@line 22888
  $307 = $ReallocAsyncCtx2 + 116 | 0; //@line 22889
  HEAP32[$307 >> 2] = $60; //@line 22890
  $308 = $ReallocAsyncCtx2 + 120 | 0; //@line 22891
  HEAP32[$308 >> 2] = $62; //@line 22892
  $309 = $ReallocAsyncCtx2 + 124 | 0; //@line 22893
  HEAP32[$309 >> 2] = $64; //@line 22894
  $310 = $ReallocAsyncCtx2 + 128 | 0; //@line 22895
  HEAP32[$310 >> 2] = $66; //@line 22896
  $311 = $ReallocAsyncCtx2 + 132 | 0; //@line 22897
  HEAP32[$311 >> 2] = $68; //@line 22898
  $312 = $ReallocAsyncCtx2 + 136 | 0; //@line 22899
  HEAP32[$312 >> 2] = $70; //@line 22900
  $313 = $ReallocAsyncCtx2 + 140 | 0; //@line 22901
  HEAP32[$313 >> 2] = $72; //@line 22902
  $314 = $ReallocAsyncCtx2 + 144 | 0; //@line 22903
  HEAP32[$314 >> 2] = $74; //@line 22904
  $315 = $ReallocAsyncCtx2 + 148 | 0; //@line 22905
  HEAP32[$315 >> 2] = $76; //@line 22906
  $316 = $ReallocAsyncCtx2 + 152 | 0; //@line 22907
  HEAP32[$316 >> 2] = $78; //@line 22908
  $317 = $ReallocAsyncCtx2 + 156 | 0; //@line 22909
  HEAP32[$317 >> 2] = $80; //@line 22910
  $318 = $ReallocAsyncCtx2 + 160 | 0; //@line 22911
  HEAP32[$318 >> 2] = $82; //@line 22912
  $319 = $ReallocAsyncCtx2 + 164 | 0; //@line 22913
  HEAP32[$319 >> 2] = $84; //@line 22914
  $320 = $ReallocAsyncCtx2 + 168 | 0; //@line 22915
  HEAP32[$320 >> 2] = $86; //@line 22916
  $321 = $ReallocAsyncCtx2 + 172 | 0; //@line 22917
  HEAP32[$321 >> 2] = $88; //@line 22918
  $322 = $ReallocAsyncCtx2 + 176 | 0; //@line 22919
  HEAP32[$322 >> 2] = $90; //@line 22920
  $323 = $ReallocAsyncCtx2 + 180 | 0; //@line 22921
  HEAP32[$323 >> 2] = $92; //@line 22922
  $324 = $ReallocAsyncCtx2 + 184 | 0; //@line 22923
  HEAP32[$324 >> 2] = $94; //@line 22924
  $325 = $ReallocAsyncCtx2 + 188 | 0; //@line 22925
  HEAP32[$325 >> 2] = $96; //@line 22926
  $326 = $ReallocAsyncCtx2 + 192 | 0; //@line 22927
  HEAP32[$326 >> 2] = $98; //@line 22928
  $327 = $ReallocAsyncCtx2 + 196 | 0; //@line 22929
  HEAP32[$327 >> 2] = $100; //@line 22930
  $328 = $ReallocAsyncCtx2 + 200 | 0; //@line 22931
  HEAP32[$328 >> 2] = $102; //@line 22932
  $329 = $ReallocAsyncCtx2 + 204 | 0; //@line 22933
  HEAP32[$329 >> 2] = $104; //@line 22934
  $330 = $ReallocAsyncCtx2 + 208 | 0; //@line 22935
  HEAP32[$330 >> 2] = $106; //@line 22936
  $331 = $ReallocAsyncCtx2 + 212 | 0; //@line 22937
  HEAP32[$331 >> 2] = $108; //@line 22938
  $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 22939
  HEAP32[$332 >> 2] = $110; //@line 22940
  $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 22941
  HEAP32[$333 >> 2] = $112; //@line 22942
  $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 22943
  HEAP32[$334 >> 2] = $114; //@line 22944
  $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 22945
  HEAP32[$335 >> 2] = $116; //@line 22946
  $336 = $ReallocAsyncCtx2 + 232 | 0; //@line 22947
  HEAP32[$336 >> 2] = $118; //@line 22948
  $337 = $ReallocAsyncCtx2 + 236 | 0; //@line 22949
  HEAP32[$337 >> 2] = $120; //@line 22950
  $338 = $ReallocAsyncCtx2 + 240 | 0; //@line 22951
  HEAP32[$338 >> 2] = $122; //@line 22952
  $339 = $ReallocAsyncCtx2 + 244 | 0; //@line 22953
  HEAP32[$339 >> 2] = $124; //@line 22954
  $340 = $ReallocAsyncCtx2 + 248 | 0; //@line 22955
  HEAP32[$340 >> 2] = $126; //@line 22956
  $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 22957
  HEAP32[$341 >> 2] = $128; //@line 22958
  $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 22959
  HEAP32[$342 >> 2] = $130; //@line 22960
  $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 22961
  HEAP32[$343 >> 2] = $132; //@line 22962
  $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 22963
  HEAP32[$344 >> 2] = $134; //@line 22964
  sp = STACKTOP; //@line 22965
  return;
 } else if ((label | 0) == 14) {
  HEAP8[$130 >> 0] = HEAP8[$134 + ($137 & 255) >> 0] | 0; //@line 22973
  HEAP32[$116 >> 2] = $66; //@line 22974
  HEAP32[$114 >> 2] = (HEAPU8[$134 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$134 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$134 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 22995
  HEAP32[$106 >> 2] = 0; //@line 22996
  $385 = $$0$be + 6 << 24 >> 24; //@line 22997
  HEAP8[$88 >> 0] = HEAP8[$134 + ($$0$be + 5 & 255) >> 0] | 0; //@line 23001
  $391 = HEAP32[(HEAP32[$92 >> 2] | 0) + 8 >> 2] | 0; //@line 23004
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 23005
  $392 = FUNCTION_TABLE_iii[$391 & 31]($14, $90) | 0; //@line 23006
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 597; //@line 23009
   $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 23010
   HEAP32[$393 >> 2] = $2; //@line 23011
   $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 23012
   HEAP8[$394 >> 0] = $4; //@line 23013
   $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 23014
   HEAP32[$395 >> 2] = $6; //@line 23015
   $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 23016
   HEAP8[$396 >> 0] = $8; //@line 23017
   $397 = $ReallocAsyncCtx3 + 17 | 0; //@line 23018
   HEAP8[$397 >> 0] = $10; //@line 23019
   $398 = $ReallocAsyncCtx3 + 20 | 0; //@line 23020
   HEAP32[$398 >> 2] = $12; //@line 23021
   $399 = $ReallocAsyncCtx3 + 24 | 0; //@line 23022
   HEAP32[$399 >> 2] = $14; //@line 23023
   $400 = $ReallocAsyncCtx3 + 28 | 0; //@line 23024
   HEAP32[$400 >> 2] = $16; //@line 23025
   $401 = $ReallocAsyncCtx3 + 32 | 0; //@line 23026
   HEAP32[$401 >> 2] = $18; //@line 23027
   $402 = $ReallocAsyncCtx3 + 36 | 0; //@line 23028
   HEAP32[$402 >> 2] = $20; //@line 23029
   $403 = $ReallocAsyncCtx3 + 40 | 0; //@line 23030
   HEAP32[$403 >> 2] = $22; //@line 23031
   $404 = $ReallocAsyncCtx3 + 44 | 0; //@line 23032
   HEAP32[$404 >> 2] = $24; //@line 23033
   $405 = $ReallocAsyncCtx3 + 48 | 0; //@line 23034
   HEAP32[$405 >> 2] = $26; //@line 23035
   $406 = $ReallocAsyncCtx3 + 52 | 0; //@line 23036
   HEAP32[$406 >> 2] = $28; //@line 23037
   $407 = $ReallocAsyncCtx3 + 56 | 0; //@line 23038
   HEAP32[$407 >> 2] = $30; //@line 23039
   $408 = $ReallocAsyncCtx3 + 60 | 0; //@line 23040
   HEAP32[$408 >> 2] = $32; //@line 23041
   $409 = $ReallocAsyncCtx3 + 64 | 0; //@line 23042
   HEAP32[$409 >> 2] = $34; //@line 23043
   $410 = $ReallocAsyncCtx3 + 68 | 0; //@line 23044
   HEAP32[$410 >> 2] = $36; //@line 23045
   $411 = $ReallocAsyncCtx3 + 72 | 0; //@line 23046
   HEAP32[$411 >> 2] = $38; //@line 23047
   $412 = $ReallocAsyncCtx3 + 76 | 0; //@line 23048
   HEAP32[$412 >> 2] = $40; //@line 23049
   $413 = $ReallocAsyncCtx3 + 80 | 0; //@line 23050
   HEAP32[$413 >> 2] = $42; //@line 23051
   $414 = $ReallocAsyncCtx3 + 84 | 0; //@line 23052
   HEAP32[$414 >> 2] = $44; //@line 23053
   $415 = $ReallocAsyncCtx3 + 88 | 0; //@line 23054
   HEAP32[$415 >> 2] = $46; //@line 23055
   $416 = $ReallocAsyncCtx3 + 92 | 0; //@line 23056
   HEAP32[$416 >> 2] = $48; //@line 23057
   $417 = $ReallocAsyncCtx3 + 96 | 0; //@line 23058
   HEAP32[$417 >> 2] = $50; //@line 23059
   $418 = $ReallocAsyncCtx3 + 100 | 0; //@line 23060
   HEAP32[$418 >> 2] = $52; //@line 23061
   $419 = $ReallocAsyncCtx3 + 104 | 0; //@line 23062
   HEAP32[$419 >> 2] = $54; //@line 23063
   $420 = $ReallocAsyncCtx3 + 108 | 0; //@line 23064
   HEAP8[$420 >> 0] = $385; //@line 23065
   $421 = $ReallocAsyncCtx3 + 112 | 0; //@line 23066
   HEAP32[$421 >> 2] = $58; //@line 23067
   $422 = $ReallocAsyncCtx3 + 116 | 0; //@line 23068
   HEAP32[$422 >> 2] = $60; //@line 23069
   $423 = $ReallocAsyncCtx3 + 120 | 0; //@line 23070
   HEAP32[$423 >> 2] = $62; //@line 23071
   $424 = $ReallocAsyncCtx3 + 124 | 0; //@line 23072
   HEAP32[$424 >> 2] = $64; //@line 23073
   $425 = $ReallocAsyncCtx3 + 128 | 0; //@line 23074
   HEAP32[$425 >> 2] = $66; //@line 23075
   $426 = $ReallocAsyncCtx3 + 132 | 0; //@line 23076
   HEAP32[$426 >> 2] = $68; //@line 23077
   $427 = $ReallocAsyncCtx3 + 136 | 0; //@line 23078
   HEAP32[$427 >> 2] = $70; //@line 23079
   $428 = $ReallocAsyncCtx3 + 140 | 0; //@line 23080
   HEAP32[$428 >> 2] = $72; //@line 23081
   $429 = $ReallocAsyncCtx3 + 144 | 0; //@line 23082
   HEAP32[$429 >> 2] = $74; //@line 23083
   $430 = $ReallocAsyncCtx3 + 148 | 0; //@line 23084
   HEAP32[$430 >> 2] = $76; //@line 23085
   $431 = $ReallocAsyncCtx3 + 152 | 0; //@line 23086
   HEAP32[$431 >> 2] = $78; //@line 23087
   $432 = $ReallocAsyncCtx3 + 156 | 0; //@line 23088
   HEAP32[$432 >> 2] = $80; //@line 23089
   $433 = $ReallocAsyncCtx3 + 160 | 0; //@line 23090
   HEAP32[$433 >> 2] = $82; //@line 23091
   $434 = $ReallocAsyncCtx3 + 164 | 0; //@line 23092
   HEAP32[$434 >> 2] = $84; //@line 23093
   $435 = $ReallocAsyncCtx3 + 168 | 0; //@line 23094
   HEAP32[$435 >> 2] = $86; //@line 23095
   $436 = $ReallocAsyncCtx3 + 172 | 0; //@line 23096
   HEAP32[$436 >> 2] = $88; //@line 23097
   $437 = $ReallocAsyncCtx3 + 176 | 0; //@line 23098
   HEAP32[$437 >> 2] = $90; //@line 23099
   $438 = $ReallocAsyncCtx3 + 180 | 0; //@line 23100
   HEAP32[$438 >> 2] = $92; //@line 23101
   $439 = $ReallocAsyncCtx3 + 184 | 0; //@line 23102
   HEAP32[$439 >> 2] = $94; //@line 23103
   $440 = $ReallocAsyncCtx3 + 188 | 0; //@line 23104
   HEAP32[$440 >> 2] = $96; //@line 23105
   $441 = $ReallocAsyncCtx3 + 192 | 0; //@line 23106
   HEAP32[$441 >> 2] = $98; //@line 23107
   $442 = $ReallocAsyncCtx3 + 196 | 0; //@line 23108
   HEAP32[$442 >> 2] = $100; //@line 23109
   $443 = $ReallocAsyncCtx3 + 200 | 0; //@line 23110
   HEAP32[$443 >> 2] = $102; //@line 23111
   $444 = $ReallocAsyncCtx3 + 204 | 0; //@line 23112
   HEAP32[$444 >> 2] = $104; //@line 23113
   $445 = $ReallocAsyncCtx3 + 208 | 0; //@line 23114
   HEAP32[$445 >> 2] = $106; //@line 23115
   $446 = $ReallocAsyncCtx3 + 212 | 0; //@line 23116
   HEAP32[$446 >> 2] = $108; //@line 23117
   $447 = $ReallocAsyncCtx3 + 216 | 0; //@line 23118
   HEAP32[$447 >> 2] = $110; //@line 23119
   $448 = $ReallocAsyncCtx3 + 220 | 0; //@line 23120
   HEAP32[$448 >> 2] = $112; //@line 23121
   $449 = $ReallocAsyncCtx3 + 224 | 0; //@line 23122
   HEAP32[$449 >> 2] = $114; //@line 23123
   $450 = $ReallocAsyncCtx3 + 228 | 0; //@line 23124
   HEAP32[$450 >> 2] = $116; //@line 23125
   $451 = $ReallocAsyncCtx3 + 232 | 0; //@line 23126
   HEAP32[$451 >> 2] = $118; //@line 23127
   $452 = $ReallocAsyncCtx3 + 236 | 0; //@line 23128
   HEAP32[$452 >> 2] = $120; //@line 23129
   $453 = $ReallocAsyncCtx3 + 240 | 0; //@line 23130
   HEAP32[$453 >> 2] = $122; //@line 23131
   $454 = $ReallocAsyncCtx3 + 244 | 0; //@line 23132
   HEAP32[$454 >> 2] = $124; //@line 23133
   $455 = $ReallocAsyncCtx3 + 248 | 0; //@line 23134
   HEAP32[$455 >> 2] = $126; //@line 23135
   $456 = $ReallocAsyncCtx3 + 252 | 0; //@line 23136
   HEAP32[$456 >> 2] = $128; //@line 23137
   $457 = $ReallocAsyncCtx3 + 256 | 0; //@line 23138
   HEAP32[$457 >> 2] = $130; //@line 23139
   $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 23140
   HEAP32[$458 >> 2] = $132; //@line 23141
   $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 23142
   HEAP32[$459 >> 2] = $134; //@line 23143
   sp = STACKTOP; //@line 23144
   return;
  }
  HEAP8[___async_retval >> 0] = $392; //@line 23148
  ___async_unwind = 0; //@line 23149
  HEAP32[$ReallocAsyncCtx3 >> 2] = 597; //@line 23150
  $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 23151
  HEAP32[$393 >> 2] = $2; //@line 23152
  $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 23153
  HEAP8[$394 >> 0] = $4; //@line 23154
  $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 23155
  HEAP32[$395 >> 2] = $6; //@line 23156
  $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 23157
  HEAP8[$396 >> 0] = $8; //@line 23158
  $397 = $ReallocAsyncCtx3 + 17 | 0; //@line 23159
  HEAP8[$397 >> 0] = $10; //@line 23160
  $398 = $ReallocAsyncCtx3 + 20 | 0; //@line 23161
  HEAP32[$398 >> 2] = $12; //@line 23162
  $399 = $ReallocAsyncCtx3 + 24 | 0; //@line 23163
  HEAP32[$399 >> 2] = $14; //@line 23164
  $400 = $ReallocAsyncCtx3 + 28 | 0; //@line 23165
  HEAP32[$400 >> 2] = $16; //@line 23166
  $401 = $ReallocAsyncCtx3 + 32 | 0; //@line 23167
  HEAP32[$401 >> 2] = $18; //@line 23168
  $402 = $ReallocAsyncCtx3 + 36 | 0; //@line 23169
  HEAP32[$402 >> 2] = $20; //@line 23170
  $403 = $ReallocAsyncCtx3 + 40 | 0; //@line 23171
  HEAP32[$403 >> 2] = $22; //@line 23172
  $404 = $ReallocAsyncCtx3 + 44 | 0; //@line 23173
  HEAP32[$404 >> 2] = $24; //@line 23174
  $405 = $ReallocAsyncCtx3 + 48 | 0; //@line 23175
  HEAP32[$405 >> 2] = $26; //@line 23176
  $406 = $ReallocAsyncCtx3 + 52 | 0; //@line 23177
  HEAP32[$406 >> 2] = $28; //@line 23178
  $407 = $ReallocAsyncCtx3 + 56 | 0; //@line 23179
  HEAP32[$407 >> 2] = $30; //@line 23180
  $408 = $ReallocAsyncCtx3 + 60 | 0; //@line 23181
  HEAP32[$408 >> 2] = $32; //@line 23182
  $409 = $ReallocAsyncCtx3 + 64 | 0; //@line 23183
  HEAP32[$409 >> 2] = $34; //@line 23184
  $410 = $ReallocAsyncCtx3 + 68 | 0; //@line 23185
  HEAP32[$410 >> 2] = $36; //@line 23186
  $411 = $ReallocAsyncCtx3 + 72 | 0; //@line 23187
  HEAP32[$411 >> 2] = $38; //@line 23188
  $412 = $ReallocAsyncCtx3 + 76 | 0; //@line 23189
  HEAP32[$412 >> 2] = $40; //@line 23190
  $413 = $ReallocAsyncCtx3 + 80 | 0; //@line 23191
  HEAP32[$413 >> 2] = $42; //@line 23192
  $414 = $ReallocAsyncCtx3 + 84 | 0; //@line 23193
  HEAP32[$414 >> 2] = $44; //@line 23194
  $415 = $ReallocAsyncCtx3 + 88 | 0; //@line 23195
  HEAP32[$415 >> 2] = $46; //@line 23196
  $416 = $ReallocAsyncCtx3 + 92 | 0; //@line 23197
  HEAP32[$416 >> 2] = $48; //@line 23198
  $417 = $ReallocAsyncCtx3 + 96 | 0; //@line 23199
  HEAP32[$417 >> 2] = $50; //@line 23200
  $418 = $ReallocAsyncCtx3 + 100 | 0; //@line 23201
  HEAP32[$418 >> 2] = $52; //@line 23202
  $419 = $ReallocAsyncCtx3 + 104 | 0; //@line 23203
  HEAP32[$419 >> 2] = $54; //@line 23204
  $420 = $ReallocAsyncCtx3 + 108 | 0; //@line 23205
  HEAP8[$420 >> 0] = $385; //@line 23206
  $421 = $ReallocAsyncCtx3 + 112 | 0; //@line 23207
  HEAP32[$421 >> 2] = $58; //@line 23208
  $422 = $ReallocAsyncCtx3 + 116 | 0; //@line 23209
  HEAP32[$422 >> 2] = $60; //@line 23210
  $423 = $ReallocAsyncCtx3 + 120 | 0; //@line 23211
  HEAP32[$423 >> 2] = $62; //@line 23212
  $424 = $ReallocAsyncCtx3 + 124 | 0; //@line 23213
  HEAP32[$424 >> 2] = $64; //@line 23214
  $425 = $ReallocAsyncCtx3 + 128 | 0; //@line 23215
  HEAP32[$425 >> 2] = $66; //@line 23216
  $426 = $ReallocAsyncCtx3 + 132 | 0; //@line 23217
  HEAP32[$426 >> 2] = $68; //@line 23218
  $427 = $ReallocAsyncCtx3 + 136 | 0; //@line 23219
  HEAP32[$427 >> 2] = $70; //@line 23220
  $428 = $ReallocAsyncCtx3 + 140 | 0; //@line 23221
  HEAP32[$428 >> 2] = $72; //@line 23222
  $429 = $ReallocAsyncCtx3 + 144 | 0; //@line 23223
  HEAP32[$429 >> 2] = $74; //@line 23224
  $430 = $ReallocAsyncCtx3 + 148 | 0; //@line 23225
  HEAP32[$430 >> 2] = $76; //@line 23226
  $431 = $ReallocAsyncCtx3 + 152 | 0; //@line 23227
  HEAP32[$431 >> 2] = $78; //@line 23228
  $432 = $ReallocAsyncCtx3 + 156 | 0; //@line 23229
  HEAP32[$432 >> 2] = $80; //@line 23230
  $433 = $ReallocAsyncCtx3 + 160 | 0; //@line 23231
  HEAP32[$433 >> 2] = $82; //@line 23232
  $434 = $ReallocAsyncCtx3 + 164 | 0; //@line 23233
  HEAP32[$434 >> 2] = $84; //@line 23234
  $435 = $ReallocAsyncCtx3 + 168 | 0; //@line 23235
  HEAP32[$435 >> 2] = $86; //@line 23236
  $436 = $ReallocAsyncCtx3 + 172 | 0; //@line 23237
  HEAP32[$436 >> 2] = $88; //@line 23238
  $437 = $ReallocAsyncCtx3 + 176 | 0; //@line 23239
  HEAP32[$437 >> 2] = $90; //@line 23240
  $438 = $ReallocAsyncCtx3 + 180 | 0; //@line 23241
  HEAP32[$438 >> 2] = $92; //@line 23242
  $439 = $ReallocAsyncCtx3 + 184 | 0; //@line 23243
  HEAP32[$439 >> 2] = $94; //@line 23244
  $440 = $ReallocAsyncCtx3 + 188 | 0; //@line 23245
  HEAP32[$440 >> 2] = $96; //@line 23246
  $441 = $ReallocAsyncCtx3 + 192 | 0; //@line 23247
  HEAP32[$441 >> 2] = $98; //@line 23248
  $442 = $ReallocAsyncCtx3 + 196 | 0; //@line 23249
  HEAP32[$442 >> 2] = $100; //@line 23250
  $443 = $ReallocAsyncCtx3 + 200 | 0; //@line 23251
  HEAP32[$443 >> 2] = $102; //@line 23252
  $444 = $ReallocAsyncCtx3 + 204 | 0; //@line 23253
  HEAP32[$444 >> 2] = $104; //@line 23254
  $445 = $ReallocAsyncCtx3 + 208 | 0; //@line 23255
  HEAP32[$445 >> 2] = $106; //@line 23256
  $446 = $ReallocAsyncCtx3 + 212 | 0; //@line 23257
  HEAP32[$446 >> 2] = $108; //@line 23258
  $447 = $ReallocAsyncCtx3 + 216 | 0; //@line 23259
  HEAP32[$447 >> 2] = $110; //@line 23260
  $448 = $ReallocAsyncCtx3 + 220 | 0; //@line 23261
  HEAP32[$448 >> 2] = $112; //@line 23262
  $449 = $ReallocAsyncCtx3 + 224 | 0; //@line 23263
  HEAP32[$449 >> 2] = $114; //@line 23264
  $450 = $ReallocAsyncCtx3 + 228 | 0; //@line 23265
  HEAP32[$450 >> 2] = $116; //@line 23266
  $451 = $ReallocAsyncCtx3 + 232 | 0; //@line 23267
  HEAP32[$451 >> 2] = $118; //@line 23268
  $452 = $ReallocAsyncCtx3 + 236 | 0; //@line 23269
  HEAP32[$452 >> 2] = $120; //@line 23270
  $453 = $ReallocAsyncCtx3 + 240 | 0; //@line 23271
  HEAP32[$453 >> 2] = $122; //@line 23272
  $454 = $ReallocAsyncCtx3 + 244 | 0; //@line 23273
  HEAP32[$454 >> 2] = $124; //@line 23274
  $455 = $ReallocAsyncCtx3 + 248 | 0; //@line 23275
  HEAP32[$455 >> 2] = $126; //@line 23276
  $456 = $ReallocAsyncCtx3 + 252 | 0; //@line 23277
  HEAP32[$456 >> 2] = $128; //@line 23278
  $457 = $ReallocAsyncCtx3 + 256 | 0; //@line 23279
  HEAP32[$457 >> 2] = $130; //@line 23280
  $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 23281
  HEAP32[$458 >> 2] = $132; //@line 23282
  $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 23283
  HEAP32[$459 >> 2] = $134; //@line 23284
  sp = STACKTOP; //@line 23285
  return;
 } else if ((label | 0) == 22) {
  $490 = $$0$be + 2 << 24 >> 24; //@line 23289
  $493 = HEAP8[$134 + ($137 & 255) >> 0] | 0; //@line 23292
  HEAP8[$58 >> 0] = 0; //@line 23293
  $494 = $493 & 255; //@line 23294
  HEAP8[$48 >> 0] = $494 >>> 5 & 1; //@line 23298
  if ($494 & 16 | 0) {
   HEAP8[$58 >> 0] = 1; //@line 23302
  }
  HEAP8[$40 >> 0] = $494 & 15; //@line 23306
  $503 = HEAP32[(HEAP32[$34 >> 2] | 0) + 44 >> 2] | 0; //@line 23309
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 23310
  $504 = FUNCTION_TABLE_iii[$503 & 31]($14, $62) | 0; //@line 23311
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 598; //@line 23314
   $505 = $ReallocAsyncCtx4 + 4 | 0; //@line 23315
   HEAP32[$505 >> 2] = $2; //@line 23316
   $506 = $ReallocAsyncCtx4 + 8 | 0; //@line 23317
   HEAP8[$506 >> 0] = $4; //@line 23318
   $507 = $ReallocAsyncCtx4 + 12 | 0; //@line 23319
   HEAP32[$507 >> 2] = $6; //@line 23320
   $508 = $ReallocAsyncCtx4 + 16 | 0; //@line 23321
   HEAP8[$508 >> 0] = $8; //@line 23322
   $509 = $ReallocAsyncCtx4 + 17 | 0; //@line 23323
   HEAP8[$509 >> 0] = $10; //@line 23324
   $510 = $ReallocAsyncCtx4 + 20 | 0; //@line 23325
   HEAP32[$510 >> 2] = $12; //@line 23326
   $511 = $ReallocAsyncCtx4 + 24 | 0; //@line 23327
   HEAP32[$511 >> 2] = $14; //@line 23328
   $512 = $ReallocAsyncCtx4 + 28 | 0; //@line 23329
   HEAP32[$512 >> 2] = $16; //@line 23330
   $513 = $ReallocAsyncCtx4 + 32 | 0; //@line 23331
   HEAP32[$513 >> 2] = $18; //@line 23332
   $514 = $ReallocAsyncCtx4 + 36 | 0; //@line 23333
   HEAP32[$514 >> 2] = $20; //@line 23334
   $515 = $ReallocAsyncCtx4 + 40 | 0; //@line 23335
   HEAP32[$515 >> 2] = $22; //@line 23336
   $516 = $ReallocAsyncCtx4 + 44 | 0; //@line 23337
   HEAP32[$516 >> 2] = $24; //@line 23338
   $517 = $ReallocAsyncCtx4 + 48 | 0; //@line 23339
   HEAP32[$517 >> 2] = $26; //@line 23340
   $518 = $ReallocAsyncCtx4 + 52 | 0; //@line 23341
   HEAP32[$518 >> 2] = $28; //@line 23342
   $519 = $ReallocAsyncCtx4 + 56 | 0; //@line 23343
   HEAP32[$519 >> 2] = $30; //@line 23344
   $520 = $ReallocAsyncCtx4 + 60 | 0; //@line 23345
   HEAP8[$520 >> 0] = $490; //@line 23346
   $521 = $ReallocAsyncCtx4 + 64 | 0; //@line 23347
   HEAP32[$521 >> 2] = $32; //@line 23348
   $522 = $ReallocAsyncCtx4 + 68 | 0; //@line 23349
   HEAP32[$522 >> 2] = $34; //@line 23350
   $523 = $ReallocAsyncCtx4 + 72 | 0; //@line 23351
   HEAP32[$523 >> 2] = $36; //@line 23352
   $524 = $ReallocAsyncCtx4 + 76 | 0; //@line 23353
   HEAP32[$524 >> 2] = $38; //@line 23354
   $525 = $ReallocAsyncCtx4 + 80 | 0; //@line 23355
   HEAP32[$525 >> 2] = $40; //@line 23356
   $526 = $ReallocAsyncCtx4 + 84 | 0; //@line 23357
   HEAP32[$526 >> 2] = $42; //@line 23358
   $527 = $ReallocAsyncCtx4 + 88 | 0; //@line 23359
   HEAP32[$527 >> 2] = $44; //@line 23360
   $528 = $ReallocAsyncCtx4 + 92 | 0; //@line 23361
   HEAP32[$528 >> 2] = $46; //@line 23362
   $529 = $ReallocAsyncCtx4 + 96 | 0; //@line 23363
   HEAP32[$529 >> 2] = $48; //@line 23364
   $530 = $ReallocAsyncCtx4 + 100 | 0; //@line 23365
   HEAP32[$530 >> 2] = $50; //@line 23366
   $531 = $ReallocAsyncCtx4 + 104 | 0; //@line 23367
   HEAP32[$531 >> 2] = $52; //@line 23368
   $532 = $ReallocAsyncCtx4 + 108 | 0; //@line 23369
   HEAP32[$532 >> 2] = $54; //@line 23370
   $533 = $ReallocAsyncCtx4 + 112 | 0; //@line 23371
   HEAP32[$533 >> 2] = $58; //@line 23372
   $534 = $ReallocAsyncCtx4 + 116 | 0; //@line 23373
   HEAP32[$534 >> 2] = $60; //@line 23374
   $535 = $ReallocAsyncCtx4 + 120 | 0; //@line 23375
   HEAP32[$535 >> 2] = $62; //@line 23376
   $536 = $ReallocAsyncCtx4 + 124 | 0; //@line 23377
   HEAP32[$536 >> 2] = $64; //@line 23378
   $537 = $ReallocAsyncCtx4 + 128 | 0; //@line 23379
   HEAP32[$537 >> 2] = $66; //@line 23380
   $538 = $ReallocAsyncCtx4 + 132 | 0; //@line 23381
   HEAP32[$538 >> 2] = $68; //@line 23382
   $539 = $ReallocAsyncCtx4 + 136 | 0; //@line 23383
   HEAP32[$539 >> 2] = $70; //@line 23384
   $540 = $ReallocAsyncCtx4 + 140 | 0; //@line 23385
   HEAP32[$540 >> 2] = $72; //@line 23386
   $541 = $ReallocAsyncCtx4 + 144 | 0; //@line 23387
   HEAP32[$541 >> 2] = $74; //@line 23388
   $542 = $ReallocAsyncCtx4 + 148 | 0; //@line 23389
   HEAP32[$542 >> 2] = $76; //@line 23390
   $543 = $ReallocAsyncCtx4 + 152 | 0; //@line 23391
   HEAP32[$543 >> 2] = $78; //@line 23392
   $544 = $ReallocAsyncCtx4 + 156 | 0; //@line 23393
   HEAP32[$544 >> 2] = $80; //@line 23394
   $545 = $ReallocAsyncCtx4 + 160 | 0; //@line 23395
   HEAP32[$545 >> 2] = $82; //@line 23396
   $546 = $ReallocAsyncCtx4 + 164 | 0; //@line 23397
   HEAP32[$546 >> 2] = $84; //@line 23398
   $547 = $ReallocAsyncCtx4 + 168 | 0; //@line 23399
   HEAP32[$547 >> 2] = $86; //@line 23400
   $548 = $ReallocAsyncCtx4 + 172 | 0; //@line 23401
   HEAP32[$548 >> 2] = $88; //@line 23402
   $549 = $ReallocAsyncCtx4 + 176 | 0; //@line 23403
   HEAP32[$549 >> 2] = $90; //@line 23404
   $550 = $ReallocAsyncCtx4 + 180 | 0; //@line 23405
   HEAP32[$550 >> 2] = $92; //@line 23406
   $551 = $ReallocAsyncCtx4 + 184 | 0; //@line 23407
   HEAP32[$551 >> 2] = $94; //@line 23408
   $552 = $ReallocAsyncCtx4 + 188 | 0; //@line 23409
   HEAP32[$552 >> 2] = $96; //@line 23410
   $553 = $ReallocAsyncCtx4 + 192 | 0; //@line 23411
   HEAP32[$553 >> 2] = $98; //@line 23412
   $554 = $ReallocAsyncCtx4 + 196 | 0; //@line 23413
   HEAP32[$554 >> 2] = $100; //@line 23414
   $555 = $ReallocAsyncCtx4 + 200 | 0; //@line 23415
   HEAP32[$555 >> 2] = $$096$be; //@line 23416
   $556 = $ReallocAsyncCtx4 + 204 | 0; //@line 23417
   HEAP32[$556 >> 2] = $102; //@line 23418
   $557 = $ReallocAsyncCtx4 + 208 | 0; //@line 23419
   HEAP32[$557 >> 2] = $104; //@line 23420
   $558 = $ReallocAsyncCtx4 + 212 | 0; //@line 23421
   HEAP32[$558 >> 2] = $106; //@line 23422
   $559 = $ReallocAsyncCtx4 + 216 | 0; //@line 23423
   HEAP32[$559 >> 2] = $108; //@line 23424
   $560 = $ReallocAsyncCtx4 + 220 | 0; //@line 23425
   HEAP32[$560 >> 2] = $110; //@line 23426
   $561 = $ReallocAsyncCtx4 + 224 | 0; //@line 23427
   HEAP32[$561 >> 2] = $112; //@line 23428
   $562 = $ReallocAsyncCtx4 + 228 | 0; //@line 23429
   HEAP32[$562 >> 2] = $114; //@line 23430
   $563 = $ReallocAsyncCtx4 + 232 | 0; //@line 23431
   HEAP32[$563 >> 2] = $116; //@line 23432
   $564 = $ReallocAsyncCtx4 + 236 | 0; //@line 23433
   HEAP32[$564 >> 2] = $118; //@line 23434
   $565 = $ReallocAsyncCtx4 + 240 | 0; //@line 23435
   HEAP32[$565 >> 2] = $120; //@line 23436
   $566 = $ReallocAsyncCtx4 + 244 | 0; //@line 23437
   HEAP32[$566 >> 2] = $122; //@line 23438
   $567 = $ReallocAsyncCtx4 + 248 | 0; //@line 23439
   HEAP32[$567 >> 2] = $124; //@line 23440
   $568 = $ReallocAsyncCtx4 + 252 | 0; //@line 23441
   HEAP32[$568 >> 2] = $126; //@line 23442
   $569 = $ReallocAsyncCtx4 + 256 | 0; //@line 23443
   HEAP32[$569 >> 2] = $128; //@line 23444
   $570 = $ReallocAsyncCtx4 + 260 | 0; //@line 23445
   HEAP32[$570 >> 2] = $130; //@line 23446
   $571 = $ReallocAsyncCtx4 + 264 | 0; //@line 23447
   HEAP32[$571 >> 2] = $132; //@line 23448
   $572 = $ReallocAsyncCtx4 + 268 | 0; //@line 23449
   HEAP32[$572 >> 2] = $134; //@line 23450
   sp = STACKTOP; //@line 23451
   return;
  }
  HEAP8[___async_retval >> 0] = $504 & 1; //@line 23456
  ___async_unwind = 0; //@line 23457
  HEAP32[$ReallocAsyncCtx4 >> 2] = 598; //@line 23458
  $505 = $ReallocAsyncCtx4 + 4 | 0; //@line 23459
  HEAP32[$505 >> 2] = $2; //@line 23460
  $506 = $ReallocAsyncCtx4 + 8 | 0; //@line 23461
  HEAP8[$506 >> 0] = $4; //@line 23462
  $507 = $ReallocAsyncCtx4 + 12 | 0; //@line 23463
  HEAP32[$507 >> 2] = $6; //@line 23464
  $508 = $ReallocAsyncCtx4 + 16 | 0; //@line 23465
  HEAP8[$508 >> 0] = $8; //@line 23466
  $509 = $ReallocAsyncCtx4 + 17 | 0; //@line 23467
  HEAP8[$509 >> 0] = $10; //@line 23468
  $510 = $ReallocAsyncCtx4 + 20 | 0; //@line 23469
  HEAP32[$510 >> 2] = $12; //@line 23470
  $511 = $ReallocAsyncCtx4 + 24 | 0; //@line 23471
  HEAP32[$511 >> 2] = $14; //@line 23472
  $512 = $ReallocAsyncCtx4 + 28 | 0; //@line 23473
  HEAP32[$512 >> 2] = $16; //@line 23474
  $513 = $ReallocAsyncCtx4 + 32 | 0; //@line 23475
  HEAP32[$513 >> 2] = $18; //@line 23476
  $514 = $ReallocAsyncCtx4 + 36 | 0; //@line 23477
  HEAP32[$514 >> 2] = $20; //@line 23478
  $515 = $ReallocAsyncCtx4 + 40 | 0; //@line 23479
  HEAP32[$515 >> 2] = $22; //@line 23480
  $516 = $ReallocAsyncCtx4 + 44 | 0; //@line 23481
  HEAP32[$516 >> 2] = $24; //@line 23482
  $517 = $ReallocAsyncCtx4 + 48 | 0; //@line 23483
  HEAP32[$517 >> 2] = $26; //@line 23484
  $518 = $ReallocAsyncCtx4 + 52 | 0; //@line 23485
  HEAP32[$518 >> 2] = $28; //@line 23486
  $519 = $ReallocAsyncCtx4 + 56 | 0; //@line 23487
  HEAP32[$519 >> 2] = $30; //@line 23488
  $520 = $ReallocAsyncCtx4 + 60 | 0; //@line 23489
  HEAP8[$520 >> 0] = $490; //@line 23490
  $521 = $ReallocAsyncCtx4 + 64 | 0; //@line 23491
  HEAP32[$521 >> 2] = $32; //@line 23492
  $522 = $ReallocAsyncCtx4 + 68 | 0; //@line 23493
  HEAP32[$522 >> 2] = $34; //@line 23494
  $523 = $ReallocAsyncCtx4 + 72 | 0; //@line 23495
  HEAP32[$523 >> 2] = $36; //@line 23496
  $524 = $ReallocAsyncCtx4 + 76 | 0; //@line 23497
  HEAP32[$524 >> 2] = $38; //@line 23498
  $525 = $ReallocAsyncCtx4 + 80 | 0; //@line 23499
  HEAP32[$525 >> 2] = $40; //@line 23500
  $526 = $ReallocAsyncCtx4 + 84 | 0; //@line 23501
  HEAP32[$526 >> 2] = $42; //@line 23502
  $527 = $ReallocAsyncCtx4 + 88 | 0; //@line 23503
  HEAP32[$527 >> 2] = $44; //@line 23504
  $528 = $ReallocAsyncCtx4 + 92 | 0; //@line 23505
  HEAP32[$528 >> 2] = $46; //@line 23506
  $529 = $ReallocAsyncCtx4 + 96 | 0; //@line 23507
  HEAP32[$529 >> 2] = $48; //@line 23508
  $530 = $ReallocAsyncCtx4 + 100 | 0; //@line 23509
  HEAP32[$530 >> 2] = $50; //@line 23510
  $531 = $ReallocAsyncCtx4 + 104 | 0; //@line 23511
  HEAP32[$531 >> 2] = $52; //@line 23512
  $532 = $ReallocAsyncCtx4 + 108 | 0; //@line 23513
  HEAP32[$532 >> 2] = $54; //@line 23514
  $533 = $ReallocAsyncCtx4 + 112 | 0; //@line 23515
  HEAP32[$533 >> 2] = $58; //@line 23516
  $534 = $ReallocAsyncCtx4 + 116 | 0; //@line 23517
  HEAP32[$534 >> 2] = $60; //@line 23518
  $535 = $ReallocAsyncCtx4 + 120 | 0; //@line 23519
  HEAP32[$535 >> 2] = $62; //@line 23520
  $536 = $ReallocAsyncCtx4 + 124 | 0; //@line 23521
  HEAP32[$536 >> 2] = $64; //@line 23522
  $537 = $ReallocAsyncCtx4 + 128 | 0; //@line 23523
  HEAP32[$537 >> 2] = $66; //@line 23524
  $538 = $ReallocAsyncCtx4 + 132 | 0; //@line 23525
  HEAP32[$538 >> 2] = $68; //@line 23526
  $539 = $ReallocAsyncCtx4 + 136 | 0; //@line 23527
  HEAP32[$539 >> 2] = $70; //@line 23528
  $540 = $ReallocAsyncCtx4 + 140 | 0; //@line 23529
  HEAP32[$540 >> 2] = $72; //@line 23530
  $541 = $ReallocAsyncCtx4 + 144 | 0; //@line 23531
  HEAP32[$541 >> 2] = $74; //@line 23532
  $542 = $ReallocAsyncCtx4 + 148 | 0; //@line 23533
  HEAP32[$542 >> 2] = $76; //@line 23534
  $543 = $ReallocAsyncCtx4 + 152 | 0; //@line 23535
  HEAP32[$543 >> 2] = $78; //@line 23536
  $544 = $ReallocAsyncCtx4 + 156 | 0; //@line 23537
  HEAP32[$544 >> 2] = $80; //@line 23538
  $545 = $ReallocAsyncCtx4 + 160 | 0; //@line 23539
  HEAP32[$545 >> 2] = $82; //@line 23540
  $546 = $ReallocAsyncCtx4 + 164 | 0; //@line 23541
  HEAP32[$546 >> 2] = $84; //@line 23542
  $547 = $ReallocAsyncCtx4 + 168 | 0; //@line 23543
  HEAP32[$547 >> 2] = $86; //@line 23544
  $548 = $ReallocAsyncCtx4 + 172 | 0; //@line 23545
  HEAP32[$548 >> 2] = $88; //@line 23546
  $549 = $ReallocAsyncCtx4 + 176 | 0; //@line 23547
  HEAP32[$549 >> 2] = $90; //@line 23548
  $550 = $ReallocAsyncCtx4 + 180 | 0; //@line 23549
  HEAP32[$550 >> 2] = $92; //@line 23550
  $551 = $ReallocAsyncCtx4 + 184 | 0; //@line 23551
  HEAP32[$551 >> 2] = $94; //@line 23552
  $552 = $ReallocAsyncCtx4 + 188 | 0; //@line 23553
  HEAP32[$552 >> 2] = $96; //@line 23554
  $553 = $ReallocAsyncCtx4 + 192 | 0; //@line 23555
  HEAP32[$553 >> 2] = $98; //@line 23556
  $554 = $ReallocAsyncCtx4 + 196 | 0; //@line 23557
  HEAP32[$554 >> 2] = $100; //@line 23558
  $555 = $ReallocAsyncCtx4 + 200 | 0; //@line 23559
  HEAP32[$555 >> 2] = $$096$be; //@line 23560
  $556 = $ReallocAsyncCtx4 + 204 | 0; //@line 23561
  HEAP32[$556 >> 2] = $102; //@line 23562
  $557 = $ReallocAsyncCtx4 + 208 | 0; //@line 23563
  HEAP32[$557 >> 2] = $104; //@line 23564
  $558 = $ReallocAsyncCtx4 + 212 | 0; //@line 23565
  HEAP32[$558 >> 2] = $106; //@line 23566
  $559 = $ReallocAsyncCtx4 + 216 | 0; //@line 23567
  HEAP32[$559 >> 2] = $108; //@line 23568
  $560 = $ReallocAsyncCtx4 + 220 | 0; //@line 23569
  HEAP32[$560 >> 2] = $110; //@line 23570
  $561 = $ReallocAsyncCtx4 + 224 | 0; //@line 23571
  HEAP32[$561 >> 2] = $112; //@line 23572
  $562 = $ReallocAsyncCtx4 + 228 | 0; //@line 23573
  HEAP32[$562 >> 2] = $114; //@line 23574
  $563 = $ReallocAsyncCtx4 + 232 | 0; //@line 23575
  HEAP32[$563 >> 2] = $116; //@line 23576
  $564 = $ReallocAsyncCtx4 + 236 | 0; //@line 23577
  HEAP32[$564 >> 2] = $118; //@line 23578
  $565 = $ReallocAsyncCtx4 + 240 | 0; //@line 23579
  HEAP32[$565 >> 2] = $120; //@line 23580
  $566 = $ReallocAsyncCtx4 + 244 | 0; //@line 23581
  HEAP32[$566 >> 2] = $122; //@line 23582
  $567 = $ReallocAsyncCtx4 + 248 | 0; //@line 23583
  HEAP32[$567 >> 2] = $124; //@line 23584
  $568 = $ReallocAsyncCtx4 + 252 | 0; //@line 23585
  HEAP32[$568 >> 2] = $126; //@line 23586
  $569 = $ReallocAsyncCtx4 + 256 | 0; //@line 23587
  HEAP32[$569 >> 2] = $128; //@line 23588
  $570 = $ReallocAsyncCtx4 + 260 | 0; //@line 23589
  HEAP32[$570 >> 2] = $130; //@line 23590
  $571 = $ReallocAsyncCtx4 + 264 | 0; //@line 23591
  HEAP32[$571 >> 2] = $132; //@line 23592
  $572 = $ReallocAsyncCtx4 + 268 | 0; //@line 23593
  HEAP32[$572 >> 2] = $134; //@line 23594
  sp = STACKTOP; //@line 23595
  return;
 } else if ((label | 0) == 27) {
  HEAP8[$12 >> 0] = HEAP8[$134 + ($137 & 255) >> 0] | 0; //@line 23603
  $590 = $$0$be + 5 << 24 >> 24; //@line 23616
  HEAP32[$132 >> 2] = (HEAPU8[$134 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$134 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$134 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 23624
  $600 = HEAP32[(HEAP32[$122 >> 2] | 0) + 48 >> 2] | 0; //@line 23627
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 23628
  $601 = FUNCTION_TABLE_iii[$600 & 31]($14, $54) | 0; //@line 23629
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 599; //@line 23632
   $602 = $ReallocAsyncCtx5 + 4 | 0; //@line 23633
   HEAP32[$602 >> 2] = $2; //@line 23634
   $603 = $ReallocAsyncCtx5 + 8 | 0; //@line 23635
   HEAP8[$603 >> 0] = $4; //@line 23636
   $604 = $ReallocAsyncCtx5 + 12 | 0; //@line 23637
   HEAP32[$604 >> 2] = $6; //@line 23638
   $605 = $ReallocAsyncCtx5 + 16 | 0; //@line 23639
   HEAP8[$605 >> 0] = $8; //@line 23640
   $606 = $ReallocAsyncCtx5 + 17 | 0; //@line 23641
   HEAP8[$606 >> 0] = $10; //@line 23642
   $607 = $ReallocAsyncCtx5 + 20 | 0; //@line 23643
   HEAP32[$607 >> 2] = $12; //@line 23644
   $608 = $ReallocAsyncCtx5 + 24 | 0; //@line 23645
   HEAP32[$608 >> 2] = $14; //@line 23646
   $609 = $ReallocAsyncCtx5 + 28 | 0; //@line 23647
   HEAP32[$609 >> 2] = $16; //@line 23648
   $610 = $ReallocAsyncCtx5 + 32 | 0; //@line 23649
   HEAP32[$610 >> 2] = $18; //@line 23650
   $611 = $ReallocAsyncCtx5 + 36 | 0; //@line 23651
   HEAP32[$611 >> 2] = $20; //@line 23652
   $612 = $ReallocAsyncCtx5 + 40 | 0; //@line 23653
   HEAP32[$612 >> 2] = $22; //@line 23654
   $613 = $ReallocAsyncCtx5 + 44 | 0; //@line 23655
   HEAP32[$613 >> 2] = $24; //@line 23656
   $614 = $ReallocAsyncCtx5 + 48 | 0; //@line 23657
   HEAP32[$614 >> 2] = $26; //@line 23658
   $615 = $ReallocAsyncCtx5 + 52 | 0; //@line 23659
   HEAP32[$615 >> 2] = $28; //@line 23660
   $616 = $ReallocAsyncCtx5 + 56 | 0; //@line 23661
   HEAP32[$616 >> 2] = $30; //@line 23662
   $617 = $ReallocAsyncCtx5 + 60 | 0; //@line 23663
   HEAP32[$617 >> 2] = $32; //@line 23664
   $618 = $ReallocAsyncCtx5 + 64 | 0; //@line 23665
   HEAP32[$618 >> 2] = $34; //@line 23666
   $619 = $ReallocAsyncCtx5 + 68 | 0; //@line 23667
   HEAP32[$619 >> 2] = $36; //@line 23668
   $620 = $ReallocAsyncCtx5 + 72 | 0; //@line 23669
   HEAP32[$620 >> 2] = $38; //@line 23670
   $621 = $ReallocAsyncCtx5 + 76 | 0; //@line 23671
   HEAP32[$621 >> 2] = $40; //@line 23672
   $622 = $ReallocAsyncCtx5 + 80 | 0; //@line 23673
   HEAP32[$622 >> 2] = $42; //@line 23674
   $623 = $ReallocAsyncCtx5 + 84 | 0; //@line 23675
   HEAP32[$623 >> 2] = $44; //@line 23676
   $624 = $ReallocAsyncCtx5 + 88 | 0; //@line 23677
   HEAP32[$624 >> 2] = $46; //@line 23678
   $625 = $ReallocAsyncCtx5 + 92 | 0; //@line 23679
   HEAP32[$625 >> 2] = $48; //@line 23680
   $626 = $ReallocAsyncCtx5 + 96 | 0; //@line 23681
   HEAP32[$626 >> 2] = $50; //@line 23682
   $627 = $ReallocAsyncCtx5 + 100 | 0; //@line 23683
   HEAP32[$627 >> 2] = $52; //@line 23684
   $628 = $ReallocAsyncCtx5 + 104 | 0; //@line 23685
   HEAP32[$628 >> 2] = $54; //@line 23686
   $629 = $ReallocAsyncCtx5 + 108 | 0; //@line 23687
   HEAP8[$629 >> 0] = $590; //@line 23688
   $630 = $ReallocAsyncCtx5 + 112 | 0; //@line 23689
   HEAP32[$630 >> 2] = $58; //@line 23690
   $631 = $ReallocAsyncCtx5 + 116 | 0; //@line 23691
   HEAP32[$631 >> 2] = $60; //@line 23692
   $632 = $ReallocAsyncCtx5 + 120 | 0; //@line 23693
   HEAP32[$632 >> 2] = $62; //@line 23694
   $633 = $ReallocAsyncCtx5 + 124 | 0; //@line 23695
   HEAP32[$633 >> 2] = $64; //@line 23696
   $634 = $ReallocAsyncCtx5 + 128 | 0; //@line 23697
   HEAP32[$634 >> 2] = $66; //@line 23698
   $635 = $ReallocAsyncCtx5 + 132 | 0; //@line 23699
   HEAP32[$635 >> 2] = $68; //@line 23700
   $636 = $ReallocAsyncCtx5 + 136 | 0; //@line 23701
   HEAP32[$636 >> 2] = $70; //@line 23702
   $637 = $ReallocAsyncCtx5 + 140 | 0; //@line 23703
   HEAP32[$637 >> 2] = $72; //@line 23704
   $638 = $ReallocAsyncCtx5 + 144 | 0; //@line 23705
   HEAP32[$638 >> 2] = $74; //@line 23706
   $639 = $ReallocAsyncCtx5 + 148 | 0; //@line 23707
   HEAP32[$639 >> 2] = $76; //@line 23708
   $640 = $ReallocAsyncCtx5 + 152 | 0; //@line 23709
   HEAP32[$640 >> 2] = $78; //@line 23710
   $641 = $ReallocAsyncCtx5 + 156 | 0; //@line 23711
   HEAP32[$641 >> 2] = $80; //@line 23712
   $642 = $ReallocAsyncCtx5 + 160 | 0; //@line 23713
   HEAP32[$642 >> 2] = $82; //@line 23714
   $643 = $ReallocAsyncCtx5 + 164 | 0; //@line 23715
   HEAP32[$643 >> 2] = $84; //@line 23716
   $644 = $ReallocAsyncCtx5 + 168 | 0; //@line 23717
   HEAP32[$644 >> 2] = $86; //@line 23718
   $645 = $ReallocAsyncCtx5 + 172 | 0; //@line 23719
   HEAP32[$645 >> 2] = $88; //@line 23720
   $646 = $ReallocAsyncCtx5 + 176 | 0; //@line 23721
   HEAP32[$646 >> 2] = $90; //@line 23722
   $647 = $ReallocAsyncCtx5 + 180 | 0; //@line 23723
   HEAP32[$647 >> 2] = $92; //@line 23724
   $648 = $ReallocAsyncCtx5 + 184 | 0; //@line 23725
   HEAP32[$648 >> 2] = $94; //@line 23726
   $649 = $ReallocAsyncCtx5 + 188 | 0; //@line 23727
   HEAP32[$649 >> 2] = $96; //@line 23728
   $650 = $ReallocAsyncCtx5 + 192 | 0; //@line 23729
   HEAP32[$650 >> 2] = $98; //@line 23730
   $651 = $ReallocAsyncCtx5 + 196 | 0; //@line 23731
   HEAP32[$651 >> 2] = $100; //@line 23732
   $652 = $ReallocAsyncCtx5 + 200 | 0; //@line 23733
   HEAP32[$652 >> 2] = $102; //@line 23734
   $653 = $ReallocAsyncCtx5 + 204 | 0; //@line 23735
   HEAP32[$653 >> 2] = $104; //@line 23736
   $654 = $ReallocAsyncCtx5 + 208 | 0; //@line 23737
   HEAP32[$654 >> 2] = $106; //@line 23738
   $655 = $ReallocAsyncCtx5 + 212 | 0; //@line 23739
   HEAP32[$655 >> 2] = $108; //@line 23740
   $656 = $ReallocAsyncCtx5 + 216 | 0; //@line 23741
   HEAP32[$656 >> 2] = $110; //@line 23742
   $657 = $ReallocAsyncCtx5 + 220 | 0; //@line 23743
   HEAP32[$657 >> 2] = $112; //@line 23744
   $658 = $ReallocAsyncCtx5 + 224 | 0; //@line 23745
   HEAP32[$658 >> 2] = $114; //@line 23746
   $659 = $ReallocAsyncCtx5 + 228 | 0; //@line 23747
   HEAP32[$659 >> 2] = $116; //@line 23748
   $660 = $ReallocAsyncCtx5 + 232 | 0; //@line 23749
   HEAP32[$660 >> 2] = $118; //@line 23750
   $661 = $ReallocAsyncCtx5 + 236 | 0; //@line 23751
   HEAP32[$661 >> 2] = $120; //@line 23752
   $662 = $ReallocAsyncCtx5 + 240 | 0; //@line 23753
   HEAP32[$662 >> 2] = $122; //@line 23754
   $663 = $ReallocAsyncCtx5 + 244 | 0; //@line 23755
   HEAP32[$663 >> 2] = $124; //@line 23756
   $664 = $ReallocAsyncCtx5 + 248 | 0; //@line 23757
   HEAP32[$664 >> 2] = $126; //@line 23758
   $665 = $ReallocAsyncCtx5 + 252 | 0; //@line 23759
   HEAP32[$665 >> 2] = $128; //@line 23760
   $666 = $ReallocAsyncCtx5 + 256 | 0; //@line 23761
   HEAP32[$666 >> 2] = $130; //@line 23762
   $667 = $ReallocAsyncCtx5 + 260 | 0; //@line 23763
   HEAP32[$667 >> 2] = $132; //@line 23764
   $668 = $ReallocAsyncCtx5 + 264 | 0; //@line 23765
   HEAP32[$668 >> 2] = $134; //@line 23766
   sp = STACKTOP; //@line 23767
   return;
  }
  HEAP8[___async_retval >> 0] = $601; //@line 23771
  ___async_unwind = 0; //@line 23772
  HEAP32[$ReallocAsyncCtx5 >> 2] = 599; //@line 23773
  $602 = $ReallocAsyncCtx5 + 4 | 0; //@line 23774
  HEAP32[$602 >> 2] = $2; //@line 23775
  $603 = $ReallocAsyncCtx5 + 8 | 0; //@line 23776
  HEAP8[$603 >> 0] = $4; //@line 23777
  $604 = $ReallocAsyncCtx5 + 12 | 0; //@line 23778
  HEAP32[$604 >> 2] = $6; //@line 23779
  $605 = $ReallocAsyncCtx5 + 16 | 0; //@line 23780
  HEAP8[$605 >> 0] = $8; //@line 23781
  $606 = $ReallocAsyncCtx5 + 17 | 0; //@line 23782
  HEAP8[$606 >> 0] = $10; //@line 23783
  $607 = $ReallocAsyncCtx5 + 20 | 0; //@line 23784
  HEAP32[$607 >> 2] = $12; //@line 23785
  $608 = $ReallocAsyncCtx5 + 24 | 0; //@line 23786
  HEAP32[$608 >> 2] = $14; //@line 23787
  $609 = $ReallocAsyncCtx5 + 28 | 0; //@line 23788
  HEAP32[$609 >> 2] = $16; //@line 23789
  $610 = $ReallocAsyncCtx5 + 32 | 0; //@line 23790
  HEAP32[$610 >> 2] = $18; //@line 23791
  $611 = $ReallocAsyncCtx5 + 36 | 0; //@line 23792
  HEAP32[$611 >> 2] = $20; //@line 23793
  $612 = $ReallocAsyncCtx5 + 40 | 0; //@line 23794
  HEAP32[$612 >> 2] = $22; //@line 23795
  $613 = $ReallocAsyncCtx5 + 44 | 0; //@line 23796
  HEAP32[$613 >> 2] = $24; //@line 23797
  $614 = $ReallocAsyncCtx5 + 48 | 0; //@line 23798
  HEAP32[$614 >> 2] = $26; //@line 23799
  $615 = $ReallocAsyncCtx5 + 52 | 0; //@line 23800
  HEAP32[$615 >> 2] = $28; //@line 23801
  $616 = $ReallocAsyncCtx5 + 56 | 0; //@line 23802
  HEAP32[$616 >> 2] = $30; //@line 23803
  $617 = $ReallocAsyncCtx5 + 60 | 0; //@line 23804
  HEAP32[$617 >> 2] = $32; //@line 23805
  $618 = $ReallocAsyncCtx5 + 64 | 0; //@line 23806
  HEAP32[$618 >> 2] = $34; //@line 23807
  $619 = $ReallocAsyncCtx5 + 68 | 0; //@line 23808
  HEAP32[$619 >> 2] = $36; //@line 23809
  $620 = $ReallocAsyncCtx5 + 72 | 0; //@line 23810
  HEAP32[$620 >> 2] = $38; //@line 23811
  $621 = $ReallocAsyncCtx5 + 76 | 0; //@line 23812
  HEAP32[$621 >> 2] = $40; //@line 23813
  $622 = $ReallocAsyncCtx5 + 80 | 0; //@line 23814
  HEAP32[$622 >> 2] = $42; //@line 23815
  $623 = $ReallocAsyncCtx5 + 84 | 0; //@line 23816
  HEAP32[$623 >> 2] = $44; //@line 23817
  $624 = $ReallocAsyncCtx5 + 88 | 0; //@line 23818
  HEAP32[$624 >> 2] = $46; //@line 23819
  $625 = $ReallocAsyncCtx5 + 92 | 0; //@line 23820
  HEAP32[$625 >> 2] = $48; //@line 23821
  $626 = $ReallocAsyncCtx5 + 96 | 0; //@line 23822
  HEAP32[$626 >> 2] = $50; //@line 23823
  $627 = $ReallocAsyncCtx5 + 100 | 0; //@line 23824
  HEAP32[$627 >> 2] = $52; //@line 23825
  $628 = $ReallocAsyncCtx5 + 104 | 0; //@line 23826
  HEAP32[$628 >> 2] = $54; //@line 23827
  $629 = $ReallocAsyncCtx5 + 108 | 0; //@line 23828
  HEAP8[$629 >> 0] = $590; //@line 23829
  $630 = $ReallocAsyncCtx5 + 112 | 0; //@line 23830
  HEAP32[$630 >> 2] = $58; //@line 23831
  $631 = $ReallocAsyncCtx5 + 116 | 0; //@line 23832
  HEAP32[$631 >> 2] = $60; //@line 23833
  $632 = $ReallocAsyncCtx5 + 120 | 0; //@line 23834
  HEAP32[$632 >> 2] = $62; //@line 23835
  $633 = $ReallocAsyncCtx5 + 124 | 0; //@line 23836
  HEAP32[$633 >> 2] = $64; //@line 23837
  $634 = $ReallocAsyncCtx5 + 128 | 0; //@line 23838
  HEAP32[$634 >> 2] = $66; //@line 23839
  $635 = $ReallocAsyncCtx5 + 132 | 0; //@line 23840
  HEAP32[$635 >> 2] = $68; //@line 23841
  $636 = $ReallocAsyncCtx5 + 136 | 0; //@line 23842
  HEAP32[$636 >> 2] = $70; //@line 23843
  $637 = $ReallocAsyncCtx5 + 140 | 0; //@line 23844
  HEAP32[$637 >> 2] = $72; //@line 23845
  $638 = $ReallocAsyncCtx5 + 144 | 0; //@line 23846
  HEAP32[$638 >> 2] = $74; //@line 23847
  $639 = $ReallocAsyncCtx5 + 148 | 0; //@line 23848
  HEAP32[$639 >> 2] = $76; //@line 23849
  $640 = $ReallocAsyncCtx5 + 152 | 0; //@line 23850
  HEAP32[$640 >> 2] = $78; //@line 23851
  $641 = $ReallocAsyncCtx5 + 156 | 0; //@line 23852
  HEAP32[$641 >> 2] = $80; //@line 23853
  $642 = $ReallocAsyncCtx5 + 160 | 0; //@line 23854
  HEAP32[$642 >> 2] = $82; //@line 23855
  $643 = $ReallocAsyncCtx5 + 164 | 0; //@line 23856
  HEAP32[$643 >> 2] = $84; //@line 23857
  $644 = $ReallocAsyncCtx5 + 168 | 0; //@line 23858
  HEAP32[$644 >> 2] = $86; //@line 23859
  $645 = $ReallocAsyncCtx5 + 172 | 0; //@line 23860
  HEAP32[$645 >> 2] = $88; //@line 23861
  $646 = $ReallocAsyncCtx5 + 176 | 0; //@line 23862
  HEAP32[$646 >> 2] = $90; //@line 23863
  $647 = $ReallocAsyncCtx5 + 180 | 0; //@line 23864
  HEAP32[$647 >> 2] = $92; //@line 23865
  $648 = $ReallocAsyncCtx5 + 184 | 0; //@line 23866
  HEAP32[$648 >> 2] = $94; //@line 23867
  $649 = $ReallocAsyncCtx5 + 188 | 0; //@line 23868
  HEAP32[$649 >> 2] = $96; //@line 23869
  $650 = $ReallocAsyncCtx5 + 192 | 0; //@line 23870
  HEAP32[$650 >> 2] = $98; //@line 23871
  $651 = $ReallocAsyncCtx5 + 196 | 0; //@line 23872
  HEAP32[$651 >> 2] = $100; //@line 23873
  $652 = $ReallocAsyncCtx5 + 200 | 0; //@line 23874
  HEAP32[$652 >> 2] = $102; //@line 23875
  $653 = $ReallocAsyncCtx5 + 204 | 0; //@line 23876
  HEAP32[$653 >> 2] = $104; //@line 23877
  $654 = $ReallocAsyncCtx5 + 208 | 0; //@line 23878
  HEAP32[$654 >> 2] = $106; //@line 23879
  $655 = $ReallocAsyncCtx5 + 212 | 0; //@line 23880
  HEAP32[$655 >> 2] = $108; //@line 23881
  $656 = $ReallocAsyncCtx5 + 216 | 0; //@line 23882
  HEAP32[$656 >> 2] = $110; //@line 23883
  $657 = $ReallocAsyncCtx5 + 220 | 0; //@line 23884
  HEAP32[$657 >> 2] = $112; //@line 23885
  $658 = $ReallocAsyncCtx5 + 224 | 0; //@line 23886
  HEAP32[$658 >> 2] = $114; //@line 23887
  $659 = $ReallocAsyncCtx5 + 228 | 0; //@line 23888
  HEAP32[$659 >> 2] = $116; //@line 23889
  $660 = $ReallocAsyncCtx5 + 232 | 0; //@line 23890
  HEAP32[$660 >> 2] = $118; //@line 23891
  $661 = $ReallocAsyncCtx5 + 236 | 0; //@line 23892
  HEAP32[$661 >> 2] = $120; //@line 23893
  $662 = $ReallocAsyncCtx5 + 240 | 0; //@line 23894
  HEAP32[$662 >> 2] = $122; //@line 23895
  $663 = $ReallocAsyncCtx5 + 244 | 0; //@line 23896
  HEAP32[$663 >> 2] = $124; //@line 23897
  $664 = $ReallocAsyncCtx5 + 248 | 0; //@line 23898
  HEAP32[$664 >> 2] = $126; //@line 23899
  $665 = $ReallocAsyncCtx5 + 252 | 0; //@line 23900
  HEAP32[$665 >> 2] = $128; //@line 23901
  $666 = $ReallocAsyncCtx5 + 256 | 0; //@line 23902
  HEAP32[$666 >> 2] = $130; //@line 23903
  $667 = $ReallocAsyncCtx5 + 260 | 0; //@line 23904
  HEAP32[$667 >> 2] = $132; //@line 23905
  $668 = $ReallocAsyncCtx5 + 264 | 0; //@line 23906
  HEAP32[$668 >> 2] = $134; //@line 23907
  sp = STACKTOP; //@line 23908
  return;
 } else if ((label | 0) == 31) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 23913
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_28($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i98 = 0, $$096$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $234 = 0, $239 = 0, $24 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $347 = 0, $348 = 0, $36 = 0, $38 = 0, $385 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $461 = 0, $465 = 0, $469 = 0, $472 = 0, $478 = 0, $48 = 0, $481 = 0, $482 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $578 = 0, $58 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $659 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25889
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25891
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 25893
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25895
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 25897
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 25899
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 25901
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 25903
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 25905
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 25907
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 25909
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 25911
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 25913
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 25915
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 25917
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 25919
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 25921
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 25923
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 25925
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 25927
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 25929
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 25931
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 25933
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 25935
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 25937
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 25939
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 25941
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 25943
 $56 = HEAP8[$0 + 108 >> 0] | 0; //@line 25945
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 25947
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 25949
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 25951
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 25953
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 25955
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 25957
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 25959
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 25961
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 25963
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 25965
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 25967
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 25969
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 25971
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 25973
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 25975
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 25977
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 25979
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 25981
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 25983
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 25985
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 25987
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 25989
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 25991
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 25993
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 25995
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 25997
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 25999
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 26001
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 26003
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 26005
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 26007
 $120 = HEAP32[$0 + 236 >> 2] | 0; //@line 26009
 $122 = HEAP32[$0 + 240 >> 2] | 0; //@line 26011
 $124 = HEAP32[$0 + 244 >> 2] | 0; //@line 26013
 $126 = HEAP32[$0 + 248 >> 2] | 0; //@line 26015
 $128 = HEAP32[$0 + 252 >> 2] | 0; //@line 26017
 $130 = HEAP32[$0 + 256 >> 2] | 0; //@line 26019
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 26021
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 26023
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 26025
 $659 = HEAP8[$128 >> 0] | 0; //@line 26027
 if (($659 & 255) < (-128 - (HEAP8[$118 >> 0] | 0) & 255)) {
  HEAP8[($659 & 255) + ($124 + 4) >> 0] = 10; //@line 26034
  HEAP8[$128 >> 0] = $659 + 2 << 24 >> 24; //@line 26036
  HEAP8[($659 + 1 & 255) + ($124 + 4) >> 0] = $AsyncRetVal; //@line 26039
  HEAP8[$28 >> 0] = 1; //@line 26040
  HEAP8[$102 >> 0] = 1; //@line 26041
  $$0$i98 = 0; //@line 26042
 } else {
  $$0$i98 = -1e3; //@line 26044
 }
 $$0$be = $56; //@line 26046
 $$096$be = $$0$i98; //@line 26046
 L5 : while (1) {
  if (($$0$be & 255) >= ($10 & 255)) {
   label = 31; //@line 26050
   break;
  }
  $137 = $$0$be + 1 << 24 >> 24; //@line 26054
  switch (HEAP8[$134 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 26059
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 26064
    break L5;
    break;
   }
  case 7:
   {
    label = 14; //@line 26069
    break L5;
    break;
   }
  case 9:
   {
    label = 19; //@line 26074
    break L5;
    break;
   }
  case 10:
   {
    label = 24; //@line 26079
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$6 >> 2] = 0; //@line 26084
    HEAP8[$18 >> 0] = HEAP8[$134 + ($137 & 255) >> 0] | 0; //@line 26089
    HEAP8[$120 >> 0] = HEAP8[$134 + ($$0$be + 2 & 255) >> 0] | 0; //@line 26094
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 26095
    continue L5;
    break;
   }
  case 4:
   {
    $231 = $$0$be + 2 << 24 >> 24; //@line 26100
    $234 = HEAP8[$134 + ($137 & 255) >> 0] | 0; //@line 26103
    HEAP8[$108 >> 0] = $234; //@line 26104
    HEAP16[$86 >> 1] = 1 << ($234 & 255); //@line 26108
    $239 = HEAP8[$128 >> 0] | 0; //@line 26110
    if (($239 & 255) >= (-128 - (HEAP8[$118 >> 0] | 0) & 255)) {
     $$0$be = $231; //@line 26114
     $$096$be = -1e3; //@line 26114
     continue L5;
    }
    HEAP8[$128 >> 0] = $239 + 1 << 24 >> 24; //@line 26120
    HEAP8[($239 & 255) + ($124 + 4) >> 0] = 4; //@line 26121
    HEAP8[$102 >> 0] = 1; //@line 26122
    $$0$be = $231; //@line 26123
    $$096$be = 0; //@line 26123
    continue L5;
    break;
   }
  case 6:
   {
    $347 = HEAP8[$128 >> 0] | 0; //@line 26129
    $348 = $347 & 255; //@line 26130
    if (((-128 - (HEAP8[$118 >> 0] | 0) & 255) + -2 | 0) <= ($348 | 0)) {
     $$0$be = $137; //@line 26136
     $$096$be = -1e3; //@line 26136
     continue L5;
    }
    HEAP8[$124 + 4 + $348 >> 0] = 6; //@line 26141
    HEAP8[($347 + 1 & 255) + ($124 + 4) >> 0] = -1; //@line 26145
    HEAP8[$128 >> 0] = $347 + 3 << 24 >> 24; //@line 26147
    HEAP8[($347 + 2 & 255) + ($124 + 4) >> 0] = $4; //@line 26150
    HEAP8[$102 >> 0] = 1; //@line 26151
    $$0$be = $137; //@line 26152
    $$096$be = 0; //@line 26152
    continue L5;
    break;
   }
  case 8:
   {
    $461 = $$0$be + 2 << 24 >> 24; //@line 26157
    $465 = HEAP8[$134 + ($137 & 255) >> 0] & 15; //@line 26161
    $469 = ($465 + ($465 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 26166
    HEAP32[$80 >> 2] = $469; //@line 26167
    HEAP32[$68 >> 2] = $469 + 1e3; //@line 26169
    $472 = HEAP8[$128 >> 0] | 0; //@line 26171
    if (($472 & 255) >= (-128 - (HEAP8[$118 >> 0] | 0) & 255)) {
     $$0$be = $461; //@line 26175
     $$096$be = -1e3; //@line 26175
     continue L5;
    }
    HEAP8[$128 >> 0] = $472 + 1 << 24 >> 24; //@line 26181
    HEAP8[($472 & 255) + ($124 + 4) >> 0] = 8; //@line 26182
    HEAP8[$28 >> 0] = 1; //@line 26183
    HEAP8[$102 >> 0] = 1; //@line 26184
    $$0$be = $461; //@line 26185
    $$096$be = 0; //@line 26185
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $137; //@line 26190
    $$096$be = -1013; //@line 26190
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$112 >> 0] = 0; //@line 26196
  HEAP8[$76 >> 0] = 0; //@line 26197
  HEAP8[$82 >> 0] = 0; //@line 26198
  HEAP8[$72 >> 0] = 0; //@line 26199
  $148 = $137 & 255; //@line 26200
  $149 = $148 + -1 | 0; //@line 26201
  HEAP32[$100 >> 2] = $134 + $149; //@line 26203
  HEAP8[$110 >> 0] = $42 - $149; //@line 26206
  HEAP8[$98 >> 0] = HEAP8[$94 >> 0] | 0; //@line 26208
  HEAP8[$78 >> 0] = HEAP8[$70 >> 0] | 0; //@line 26210
  HEAP8[$38 >> 0] = HEAP8[$64 >> 0] | 0; //@line 26212
  HEAP8[$30 >> 0] = HEAP8[$50 >> 0] | 0; //@line 26214
  HEAP8[$2 >> 0] = HEAP8[$32 >> 0] | 0; //@line 26216
  $160 = HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] | 0; //@line 26219
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 26220
  $161 = FUNCTION_TABLE_iiiiiii[$160 & 3]($14, $104, $112, $76, $82, $72) | 0; //@line 26221
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 595; //@line 26224
   $162 = $ReallocAsyncCtx + 4 | 0; //@line 26225
   HEAP32[$162 >> 2] = $2; //@line 26226
   $163 = $ReallocAsyncCtx + 8 | 0; //@line 26227
   HEAP8[$163 >> 0] = $4; //@line 26228
   $164 = $ReallocAsyncCtx + 12 | 0; //@line 26229
   HEAP32[$164 >> 2] = $6; //@line 26230
   $165 = $ReallocAsyncCtx + 16 | 0; //@line 26231
   HEAP8[$165 >> 0] = $8; //@line 26232
   $166 = $ReallocAsyncCtx + 17 | 0; //@line 26233
   HEAP8[$166 >> 0] = $10; //@line 26234
   $167 = $ReallocAsyncCtx + 20 | 0; //@line 26235
   HEAP32[$167 >> 2] = $12; //@line 26236
   $168 = $ReallocAsyncCtx + 24 | 0; //@line 26237
   HEAP32[$168 >> 2] = $14; //@line 26238
   $169 = $ReallocAsyncCtx + 28 | 0; //@line 26239
   HEAP32[$169 >> 2] = $16; //@line 26240
   $170 = $ReallocAsyncCtx + 32 | 0; //@line 26241
   HEAP32[$170 >> 2] = $18; //@line 26242
   $171 = $ReallocAsyncCtx + 36 | 0; //@line 26243
   HEAP32[$171 >> 2] = $20; //@line 26244
   $172 = $ReallocAsyncCtx + 40 | 0; //@line 26245
   HEAP32[$172 >> 2] = $22; //@line 26246
   $173 = $ReallocAsyncCtx + 44 | 0; //@line 26247
   HEAP32[$173 >> 2] = $24; //@line 26248
   $174 = $ReallocAsyncCtx + 48 | 0; //@line 26249
   HEAP32[$174 >> 2] = $26; //@line 26250
   $175 = $ReallocAsyncCtx + 52 | 0; //@line 26251
   HEAP32[$175 >> 2] = $28; //@line 26252
   $176 = $ReallocAsyncCtx + 56 | 0; //@line 26253
   HEAP32[$176 >> 2] = $30; //@line 26254
   $177 = $ReallocAsyncCtx + 60 | 0; //@line 26255
   HEAP32[$177 >> 2] = $32; //@line 26256
   $178 = $ReallocAsyncCtx + 64 | 0; //@line 26257
   HEAP32[$178 >> 2] = $34; //@line 26258
   $179 = $ReallocAsyncCtx + 68 | 0; //@line 26259
   HEAP32[$179 >> 2] = $36; //@line 26260
   $180 = $ReallocAsyncCtx + 72 | 0; //@line 26261
   HEAP32[$180 >> 2] = $38; //@line 26262
   $181 = $ReallocAsyncCtx + 76 | 0; //@line 26263
   HEAP32[$181 >> 2] = $40; //@line 26264
   $182 = $ReallocAsyncCtx + 80 | 0; //@line 26265
   HEAP32[$182 >> 2] = $42; //@line 26266
   $183 = $ReallocAsyncCtx + 84 | 0; //@line 26267
   HEAP32[$183 >> 2] = $44; //@line 26268
   $184 = $ReallocAsyncCtx + 88 | 0; //@line 26269
   HEAP32[$184 >> 2] = $46; //@line 26270
   $185 = $ReallocAsyncCtx + 92 | 0; //@line 26271
   HEAP32[$185 >> 2] = $48; //@line 26272
   $186 = $ReallocAsyncCtx + 96 | 0; //@line 26273
   HEAP32[$186 >> 2] = $50; //@line 26274
   $187 = $ReallocAsyncCtx + 100 | 0; //@line 26275
   HEAP32[$187 >> 2] = $52; //@line 26276
   $188 = $ReallocAsyncCtx + 104 | 0; //@line 26277
   HEAP32[$188 >> 2] = $54; //@line 26278
   $189 = $ReallocAsyncCtx + 108 | 0; //@line 26279
   HEAP32[$189 >> 2] = $58; //@line 26280
   $190 = $ReallocAsyncCtx + 112 | 0; //@line 26281
   HEAP32[$190 >> 2] = $60; //@line 26282
   $191 = $ReallocAsyncCtx + 116 | 0; //@line 26283
   HEAP32[$191 >> 2] = $62; //@line 26284
   $192 = $ReallocAsyncCtx + 120 | 0; //@line 26285
   HEAP32[$192 >> 2] = $64; //@line 26286
   $193 = $ReallocAsyncCtx + 124 | 0; //@line 26287
   HEAP32[$193 >> 2] = $66; //@line 26288
   $194 = $ReallocAsyncCtx + 128 | 0; //@line 26289
   HEAP32[$194 >> 2] = $148; //@line 26290
   $195 = $ReallocAsyncCtx + 132 | 0; //@line 26291
   HEAP32[$195 >> 2] = $68; //@line 26292
   $196 = $ReallocAsyncCtx + 136 | 0; //@line 26293
   HEAP32[$196 >> 2] = $70; //@line 26294
   $197 = $ReallocAsyncCtx + 140 | 0; //@line 26295
   HEAP32[$197 >> 2] = $72; //@line 26296
   $198 = $ReallocAsyncCtx + 144 | 0; //@line 26297
   HEAP32[$198 >> 2] = $74; //@line 26298
   $199 = $ReallocAsyncCtx + 148 | 0; //@line 26299
   HEAP32[$199 >> 2] = $76; //@line 26300
   $200 = $ReallocAsyncCtx + 152 | 0; //@line 26301
   HEAP32[$200 >> 2] = $78; //@line 26302
   $201 = $ReallocAsyncCtx + 156 | 0; //@line 26303
   HEAP32[$201 >> 2] = $80; //@line 26304
   $202 = $ReallocAsyncCtx + 160 | 0; //@line 26305
   HEAP32[$202 >> 2] = $82; //@line 26306
   $203 = $ReallocAsyncCtx + 164 | 0; //@line 26307
   HEAP32[$203 >> 2] = $84; //@line 26308
   $204 = $ReallocAsyncCtx + 168 | 0; //@line 26309
   HEAP32[$204 >> 2] = $86; //@line 26310
   $205 = $ReallocAsyncCtx + 172 | 0; //@line 26311
   HEAP32[$205 >> 2] = $88; //@line 26312
   $206 = $ReallocAsyncCtx + 176 | 0; //@line 26313
   HEAP32[$206 >> 2] = $90; //@line 26314
   $207 = $ReallocAsyncCtx + 180 | 0; //@line 26315
   HEAP32[$207 >> 2] = $92; //@line 26316
   $208 = $ReallocAsyncCtx + 184 | 0; //@line 26317
   HEAP32[$208 >> 2] = $94; //@line 26318
   $209 = $ReallocAsyncCtx + 188 | 0; //@line 26319
   HEAP32[$209 >> 2] = $96; //@line 26320
   $210 = $ReallocAsyncCtx + 192 | 0; //@line 26321
   HEAP32[$210 >> 2] = $98; //@line 26322
   $211 = $ReallocAsyncCtx + 196 | 0; //@line 26323
   HEAP32[$211 >> 2] = $100; //@line 26324
   $212 = $ReallocAsyncCtx + 200 | 0; //@line 26325
   HEAP32[$212 >> 2] = $$096$be; //@line 26326
   $213 = $ReallocAsyncCtx + 204 | 0; //@line 26327
   HEAP32[$213 >> 2] = $102; //@line 26328
   $214 = $ReallocAsyncCtx + 208 | 0; //@line 26329
   HEAP32[$214 >> 2] = $104; //@line 26330
   $215 = $ReallocAsyncCtx + 212 | 0; //@line 26331
   HEAP32[$215 >> 2] = $106; //@line 26332
   $216 = $ReallocAsyncCtx + 216 | 0; //@line 26333
   HEAP32[$216 >> 2] = $108; //@line 26334
   $217 = $ReallocAsyncCtx + 220 | 0; //@line 26335
   HEAP32[$217 >> 2] = $110; //@line 26336
   $218 = $ReallocAsyncCtx + 224 | 0; //@line 26337
   HEAP32[$218 >> 2] = $112; //@line 26338
   $219 = $ReallocAsyncCtx + 228 | 0; //@line 26339
   HEAP32[$219 >> 2] = $114; //@line 26340
   $220 = $ReallocAsyncCtx + 232 | 0; //@line 26341
   HEAP32[$220 >> 2] = $116; //@line 26342
   $221 = $ReallocAsyncCtx + 236 | 0; //@line 26343
   HEAP32[$221 >> 2] = $118; //@line 26344
   $222 = $ReallocAsyncCtx + 240 | 0; //@line 26345
   HEAP32[$222 >> 2] = $120; //@line 26346
   $223 = $ReallocAsyncCtx + 244 | 0; //@line 26347
   HEAP32[$223 >> 2] = $122; //@line 26348
   $224 = $ReallocAsyncCtx + 248 | 0; //@line 26349
   HEAP32[$224 >> 2] = $124; //@line 26350
   $225 = $ReallocAsyncCtx + 252 | 0; //@line 26351
   HEAP32[$225 >> 2] = $126; //@line 26352
   $226 = $ReallocAsyncCtx + 256 | 0; //@line 26353
   HEAP32[$226 >> 2] = $128; //@line 26354
   $227 = $ReallocAsyncCtx + 260 | 0; //@line 26355
   HEAP32[$227 >> 2] = $130; //@line 26356
   $228 = $ReallocAsyncCtx + 264 | 0; //@line 26357
   HEAP32[$228 >> 2] = $132; //@line 26358
   $229 = $ReallocAsyncCtx + 268 | 0; //@line 26359
   HEAP32[$229 >> 2] = $134; //@line 26360
   sp = STACKTOP; //@line 26361
   return;
  }
  HEAP8[___async_retval >> 0] = $161; //@line 26365
  ___async_unwind = 0; //@line 26366
  HEAP32[$ReallocAsyncCtx >> 2] = 595; //@line 26367
  $162 = $ReallocAsyncCtx + 4 | 0; //@line 26368
  HEAP32[$162 >> 2] = $2; //@line 26369
  $163 = $ReallocAsyncCtx + 8 | 0; //@line 26370
  HEAP8[$163 >> 0] = $4; //@line 26371
  $164 = $ReallocAsyncCtx + 12 | 0; //@line 26372
  HEAP32[$164 >> 2] = $6; //@line 26373
  $165 = $ReallocAsyncCtx + 16 | 0; //@line 26374
  HEAP8[$165 >> 0] = $8; //@line 26375
  $166 = $ReallocAsyncCtx + 17 | 0; //@line 26376
  HEAP8[$166 >> 0] = $10; //@line 26377
  $167 = $ReallocAsyncCtx + 20 | 0; //@line 26378
  HEAP32[$167 >> 2] = $12; //@line 26379
  $168 = $ReallocAsyncCtx + 24 | 0; //@line 26380
  HEAP32[$168 >> 2] = $14; //@line 26381
  $169 = $ReallocAsyncCtx + 28 | 0; //@line 26382
  HEAP32[$169 >> 2] = $16; //@line 26383
  $170 = $ReallocAsyncCtx + 32 | 0; //@line 26384
  HEAP32[$170 >> 2] = $18; //@line 26385
  $171 = $ReallocAsyncCtx + 36 | 0; //@line 26386
  HEAP32[$171 >> 2] = $20; //@line 26387
  $172 = $ReallocAsyncCtx + 40 | 0; //@line 26388
  HEAP32[$172 >> 2] = $22; //@line 26389
  $173 = $ReallocAsyncCtx + 44 | 0; //@line 26390
  HEAP32[$173 >> 2] = $24; //@line 26391
  $174 = $ReallocAsyncCtx + 48 | 0; //@line 26392
  HEAP32[$174 >> 2] = $26; //@line 26393
  $175 = $ReallocAsyncCtx + 52 | 0; //@line 26394
  HEAP32[$175 >> 2] = $28; //@line 26395
  $176 = $ReallocAsyncCtx + 56 | 0; //@line 26396
  HEAP32[$176 >> 2] = $30; //@line 26397
  $177 = $ReallocAsyncCtx + 60 | 0; //@line 26398
  HEAP32[$177 >> 2] = $32; //@line 26399
  $178 = $ReallocAsyncCtx + 64 | 0; //@line 26400
  HEAP32[$178 >> 2] = $34; //@line 26401
  $179 = $ReallocAsyncCtx + 68 | 0; //@line 26402
  HEAP32[$179 >> 2] = $36; //@line 26403
  $180 = $ReallocAsyncCtx + 72 | 0; //@line 26404
  HEAP32[$180 >> 2] = $38; //@line 26405
  $181 = $ReallocAsyncCtx + 76 | 0; //@line 26406
  HEAP32[$181 >> 2] = $40; //@line 26407
  $182 = $ReallocAsyncCtx + 80 | 0; //@line 26408
  HEAP32[$182 >> 2] = $42; //@line 26409
  $183 = $ReallocAsyncCtx + 84 | 0; //@line 26410
  HEAP32[$183 >> 2] = $44; //@line 26411
  $184 = $ReallocAsyncCtx + 88 | 0; //@line 26412
  HEAP32[$184 >> 2] = $46; //@line 26413
  $185 = $ReallocAsyncCtx + 92 | 0; //@line 26414
  HEAP32[$185 >> 2] = $48; //@line 26415
  $186 = $ReallocAsyncCtx + 96 | 0; //@line 26416
  HEAP32[$186 >> 2] = $50; //@line 26417
  $187 = $ReallocAsyncCtx + 100 | 0; //@line 26418
  HEAP32[$187 >> 2] = $52; //@line 26419
  $188 = $ReallocAsyncCtx + 104 | 0; //@line 26420
  HEAP32[$188 >> 2] = $54; //@line 26421
  $189 = $ReallocAsyncCtx + 108 | 0; //@line 26422
  HEAP32[$189 >> 2] = $58; //@line 26423
  $190 = $ReallocAsyncCtx + 112 | 0; //@line 26424
  HEAP32[$190 >> 2] = $60; //@line 26425
  $191 = $ReallocAsyncCtx + 116 | 0; //@line 26426
  HEAP32[$191 >> 2] = $62; //@line 26427
  $192 = $ReallocAsyncCtx + 120 | 0; //@line 26428
  HEAP32[$192 >> 2] = $64; //@line 26429
  $193 = $ReallocAsyncCtx + 124 | 0; //@line 26430
  HEAP32[$193 >> 2] = $66; //@line 26431
  $194 = $ReallocAsyncCtx + 128 | 0; //@line 26432
  HEAP32[$194 >> 2] = $148; //@line 26433
  $195 = $ReallocAsyncCtx + 132 | 0; //@line 26434
  HEAP32[$195 >> 2] = $68; //@line 26435
  $196 = $ReallocAsyncCtx + 136 | 0; //@line 26436
  HEAP32[$196 >> 2] = $70; //@line 26437
  $197 = $ReallocAsyncCtx + 140 | 0; //@line 26438
  HEAP32[$197 >> 2] = $72; //@line 26439
  $198 = $ReallocAsyncCtx + 144 | 0; //@line 26440
  HEAP32[$198 >> 2] = $74; //@line 26441
  $199 = $ReallocAsyncCtx + 148 | 0; //@line 26442
  HEAP32[$199 >> 2] = $76; //@line 26443
  $200 = $ReallocAsyncCtx + 152 | 0; //@line 26444
  HEAP32[$200 >> 2] = $78; //@line 26445
  $201 = $ReallocAsyncCtx + 156 | 0; //@line 26446
  HEAP32[$201 >> 2] = $80; //@line 26447
  $202 = $ReallocAsyncCtx + 160 | 0; //@line 26448
  HEAP32[$202 >> 2] = $82; //@line 26449
  $203 = $ReallocAsyncCtx + 164 | 0; //@line 26450
  HEAP32[$203 >> 2] = $84; //@line 26451
  $204 = $ReallocAsyncCtx + 168 | 0; //@line 26452
  HEAP32[$204 >> 2] = $86; //@line 26453
  $205 = $ReallocAsyncCtx + 172 | 0; //@line 26454
  HEAP32[$205 >> 2] = $88; //@line 26455
  $206 = $ReallocAsyncCtx + 176 | 0; //@line 26456
  HEAP32[$206 >> 2] = $90; //@line 26457
  $207 = $ReallocAsyncCtx + 180 | 0; //@line 26458
  HEAP32[$207 >> 2] = $92; //@line 26459
  $208 = $ReallocAsyncCtx + 184 | 0; //@line 26460
  HEAP32[$208 >> 2] = $94; //@line 26461
  $209 = $ReallocAsyncCtx + 188 | 0; //@line 26462
  HEAP32[$209 >> 2] = $96; //@line 26463
  $210 = $ReallocAsyncCtx + 192 | 0; //@line 26464
  HEAP32[$210 >> 2] = $98; //@line 26465
  $211 = $ReallocAsyncCtx + 196 | 0; //@line 26466
  HEAP32[$211 >> 2] = $100; //@line 26467
  $212 = $ReallocAsyncCtx + 200 | 0; //@line 26468
  HEAP32[$212 >> 2] = $$096$be; //@line 26469
  $213 = $ReallocAsyncCtx + 204 | 0; //@line 26470
  HEAP32[$213 >> 2] = $102; //@line 26471
  $214 = $ReallocAsyncCtx + 208 | 0; //@line 26472
  HEAP32[$214 >> 2] = $104; //@line 26473
  $215 = $ReallocAsyncCtx + 212 | 0; //@line 26474
  HEAP32[$215 >> 2] = $106; //@line 26475
  $216 = $ReallocAsyncCtx + 216 | 0; //@line 26476
  HEAP32[$216 >> 2] = $108; //@line 26477
  $217 = $ReallocAsyncCtx + 220 | 0; //@line 26478
  HEAP32[$217 >> 2] = $110; //@line 26479
  $218 = $ReallocAsyncCtx + 224 | 0; //@line 26480
  HEAP32[$218 >> 2] = $112; //@line 26481
  $219 = $ReallocAsyncCtx + 228 | 0; //@line 26482
  HEAP32[$219 >> 2] = $114; //@line 26483
  $220 = $ReallocAsyncCtx + 232 | 0; //@line 26484
  HEAP32[$220 >> 2] = $116; //@line 26485
  $221 = $ReallocAsyncCtx + 236 | 0; //@line 26486
  HEAP32[$221 >> 2] = $118; //@line 26487
  $222 = $ReallocAsyncCtx + 240 | 0; //@line 26488
  HEAP32[$222 >> 2] = $120; //@line 26489
  $223 = $ReallocAsyncCtx + 244 | 0; //@line 26490
  HEAP32[$223 >> 2] = $122; //@line 26491
  $224 = $ReallocAsyncCtx + 248 | 0; //@line 26492
  HEAP32[$224 >> 2] = $124; //@line 26493
  $225 = $ReallocAsyncCtx + 252 | 0; //@line 26494
  HEAP32[$225 >> 2] = $126; //@line 26495
  $226 = $ReallocAsyncCtx + 256 | 0; //@line 26496
  HEAP32[$226 >> 2] = $128; //@line 26497
  $227 = $ReallocAsyncCtx + 260 | 0; //@line 26498
  HEAP32[$227 >> 2] = $130; //@line 26499
  $228 = $ReallocAsyncCtx + 264 | 0; //@line 26500
  HEAP32[$228 >> 2] = $132; //@line 26501
  $229 = $ReallocAsyncCtx + 268 | 0; //@line 26502
  HEAP32[$229 >> 2] = $134; //@line 26503
  sp = STACKTOP; //@line 26504
  return;
 } else if ((label | 0) == 9) {
  $247 = HEAP8[$134 + ($137 & 255) >> 0] | 0; //@line 26510
  HEAP8[$84 >> 0] = ($247 & 255) >>> 4 & 7; //@line 26515
  HEAP8[$74 >> 0] = $247 & 15; //@line 26517
  $266 = $$0$be + 5 << 24 >> 24; //@line 26531
  HEAP32[$60 >> 2] = (HEAPU8[$134 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$134 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$134 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 26539
  $276 = HEAP32[(HEAP32[$52 >> 2] | 0) + 40 >> 2] | 0; //@line 26542
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 26543
  $277 = FUNCTION_TABLE_iii[$276 & 31]($14, $96) | 0; //@line 26544
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 596; //@line 26547
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 26548
   HEAP32[$278 >> 2] = $2; //@line 26549
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 26550
   HEAP8[$279 >> 0] = $4; //@line 26551
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 26552
   HEAP32[$280 >> 2] = $6; //@line 26553
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 26554
   HEAP8[$281 >> 0] = $8; //@line 26555
   $282 = $ReallocAsyncCtx2 + 17 | 0; //@line 26556
   HEAP8[$282 >> 0] = $10; //@line 26557
   $283 = $ReallocAsyncCtx2 + 20 | 0; //@line 26558
   HEAP32[$283 >> 2] = $12; //@line 26559
   $284 = $ReallocAsyncCtx2 + 24 | 0; //@line 26560
   HEAP32[$284 >> 2] = $14; //@line 26561
   $285 = $ReallocAsyncCtx2 + 28 | 0; //@line 26562
   HEAP32[$285 >> 2] = $16; //@line 26563
   $286 = $ReallocAsyncCtx2 + 32 | 0; //@line 26564
   HEAP32[$286 >> 2] = $18; //@line 26565
   $287 = $ReallocAsyncCtx2 + 36 | 0; //@line 26566
   HEAP32[$287 >> 2] = $20; //@line 26567
   $288 = $ReallocAsyncCtx2 + 40 | 0; //@line 26568
   HEAP32[$288 >> 2] = $22; //@line 26569
   $289 = $ReallocAsyncCtx2 + 44 | 0; //@line 26570
   HEAP32[$289 >> 2] = $24; //@line 26571
   $290 = $ReallocAsyncCtx2 + 48 | 0; //@line 26572
   HEAP32[$290 >> 2] = $26; //@line 26573
   $291 = $ReallocAsyncCtx2 + 52 | 0; //@line 26574
   HEAP32[$291 >> 2] = $28; //@line 26575
   $292 = $ReallocAsyncCtx2 + 56 | 0; //@line 26576
   HEAP32[$292 >> 2] = $30; //@line 26577
   $293 = $ReallocAsyncCtx2 + 60 | 0; //@line 26578
   HEAP32[$293 >> 2] = $32; //@line 26579
   $294 = $ReallocAsyncCtx2 + 64 | 0; //@line 26580
   HEAP32[$294 >> 2] = $34; //@line 26581
   $295 = $ReallocAsyncCtx2 + 68 | 0; //@line 26582
   HEAP32[$295 >> 2] = $36; //@line 26583
   $296 = $ReallocAsyncCtx2 + 72 | 0; //@line 26584
   HEAP32[$296 >> 2] = $38; //@line 26585
   $297 = $ReallocAsyncCtx2 + 76 | 0; //@line 26586
   HEAP32[$297 >> 2] = $40; //@line 26587
   $298 = $ReallocAsyncCtx2 + 80 | 0; //@line 26588
   HEAP32[$298 >> 2] = $42; //@line 26589
   $299 = $ReallocAsyncCtx2 + 84 | 0; //@line 26590
   HEAP32[$299 >> 2] = $44; //@line 26591
   $300 = $ReallocAsyncCtx2 + 88 | 0; //@line 26592
   HEAP32[$300 >> 2] = $46; //@line 26593
   $301 = $ReallocAsyncCtx2 + 92 | 0; //@line 26594
   HEAP32[$301 >> 2] = $48; //@line 26595
   $302 = $ReallocAsyncCtx2 + 96 | 0; //@line 26596
   HEAP32[$302 >> 2] = $50; //@line 26597
   $303 = $ReallocAsyncCtx2 + 100 | 0; //@line 26598
   HEAP8[$303 >> 0] = $266; //@line 26599
   $304 = $ReallocAsyncCtx2 + 104 | 0; //@line 26600
   HEAP32[$304 >> 2] = $52; //@line 26601
   $305 = $ReallocAsyncCtx2 + 108 | 0; //@line 26602
   HEAP32[$305 >> 2] = $54; //@line 26603
   $306 = $ReallocAsyncCtx2 + 112 | 0; //@line 26604
   HEAP32[$306 >> 2] = $58; //@line 26605
   $307 = $ReallocAsyncCtx2 + 116 | 0; //@line 26606
   HEAP32[$307 >> 2] = $60; //@line 26607
   $308 = $ReallocAsyncCtx2 + 120 | 0; //@line 26608
   HEAP32[$308 >> 2] = $62; //@line 26609
   $309 = $ReallocAsyncCtx2 + 124 | 0; //@line 26610
   HEAP32[$309 >> 2] = $64; //@line 26611
   $310 = $ReallocAsyncCtx2 + 128 | 0; //@line 26612
   HEAP32[$310 >> 2] = $66; //@line 26613
   $311 = $ReallocAsyncCtx2 + 132 | 0; //@line 26614
   HEAP32[$311 >> 2] = $68; //@line 26615
   $312 = $ReallocAsyncCtx2 + 136 | 0; //@line 26616
   HEAP32[$312 >> 2] = $70; //@line 26617
   $313 = $ReallocAsyncCtx2 + 140 | 0; //@line 26618
   HEAP32[$313 >> 2] = $72; //@line 26619
   $314 = $ReallocAsyncCtx2 + 144 | 0; //@line 26620
   HEAP32[$314 >> 2] = $74; //@line 26621
   $315 = $ReallocAsyncCtx2 + 148 | 0; //@line 26622
   HEAP32[$315 >> 2] = $76; //@line 26623
   $316 = $ReallocAsyncCtx2 + 152 | 0; //@line 26624
   HEAP32[$316 >> 2] = $78; //@line 26625
   $317 = $ReallocAsyncCtx2 + 156 | 0; //@line 26626
   HEAP32[$317 >> 2] = $80; //@line 26627
   $318 = $ReallocAsyncCtx2 + 160 | 0; //@line 26628
   HEAP32[$318 >> 2] = $82; //@line 26629
   $319 = $ReallocAsyncCtx2 + 164 | 0; //@line 26630
   HEAP32[$319 >> 2] = $84; //@line 26631
   $320 = $ReallocAsyncCtx2 + 168 | 0; //@line 26632
   HEAP32[$320 >> 2] = $86; //@line 26633
   $321 = $ReallocAsyncCtx2 + 172 | 0; //@line 26634
   HEAP32[$321 >> 2] = $88; //@line 26635
   $322 = $ReallocAsyncCtx2 + 176 | 0; //@line 26636
   HEAP32[$322 >> 2] = $90; //@line 26637
   $323 = $ReallocAsyncCtx2 + 180 | 0; //@line 26638
   HEAP32[$323 >> 2] = $92; //@line 26639
   $324 = $ReallocAsyncCtx2 + 184 | 0; //@line 26640
   HEAP32[$324 >> 2] = $94; //@line 26641
   $325 = $ReallocAsyncCtx2 + 188 | 0; //@line 26642
   HEAP32[$325 >> 2] = $96; //@line 26643
   $326 = $ReallocAsyncCtx2 + 192 | 0; //@line 26644
   HEAP32[$326 >> 2] = $98; //@line 26645
   $327 = $ReallocAsyncCtx2 + 196 | 0; //@line 26646
   HEAP32[$327 >> 2] = $100; //@line 26647
   $328 = $ReallocAsyncCtx2 + 200 | 0; //@line 26648
   HEAP32[$328 >> 2] = $102; //@line 26649
   $329 = $ReallocAsyncCtx2 + 204 | 0; //@line 26650
   HEAP32[$329 >> 2] = $104; //@line 26651
   $330 = $ReallocAsyncCtx2 + 208 | 0; //@line 26652
   HEAP32[$330 >> 2] = $106; //@line 26653
   $331 = $ReallocAsyncCtx2 + 212 | 0; //@line 26654
   HEAP32[$331 >> 2] = $108; //@line 26655
   $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 26656
   HEAP32[$332 >> 2] = $110; //@line 26657
   $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 26658
   HEAP32[$333 >> 2] = $112; //@line 26659
   $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 26660
   HEAP32[$334 >> 2] = $114; //@line 26661
   $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 26662
   HEAP32[$335 >> 2] = $116; //@line 26663
   $336 = $ReallocAsyncCtx2 + 232 | 0; //@line 26664
   HEAP32[$336 >> 2] = $118; //@line 26665
   $337 = $ReallocAsyncCtx2 + 236 | 0; //@line 26666
   HEAP32[$337 >> 2] = $120; //@line 26667
   $338 = $ReallocAsyncCtx2 + 240 | 0; //@line 26668
   HEAP32[$338 >> 2] = $122; //@line 26669
   $339 = $ReallocAsyncCtx2 + 244 | 0; //@line 26670
   HEAP32[$339 >> 2] = $124; //@line 26671
   $340 = $ReallocAsyncCtx2 + 248 | 0; //@line 26672
   HEAP32[$340 >> 2] = $126; //@line 26673
   $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 26674
   HEAP32[$341 >> 2] = $128; //@line 26675
   $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 26676
   HEAP32[$342 >> 2] = $130; //@line 26677
   $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 26678
   HEAP32[$343 >> 2] = $132; //@line 26679
   $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 26680
   HEAP32[$344 >> 2] = $134; //@line 26681
   sp = STACKTOP; //@line 26682
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 26686
  ___async_unwind = 0; //@line 26687
  HEAP32[$ReallocAsyncCtx2 >> 2] = 596; //@line 26688
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 26689
  HEAP32[$278 >> 2] = $2; //@line 26690
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 26691
  HEAP8[$279 >> 0] = $4; //@line 26692
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 26693
  HEAP32[$280 >> 2] = $6; //@line 26694
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 26695
  HEAP8[$281 >> 0] = $8; //@line 26696
  $282 = $ReallocAsyncCtx2 + 17 | 0; //@line 26697
  HEAP8[$282 >> 0] = $10; //@line 26698
  $283 = $ReallocAsyncCtx2 + 20 | 0; //@line 26699
  HEAP32[$283 >> 2] = $12; //@line 26700
  $284 = $ReallocAsyncCtx2 + 24 | 0; //@line 26701
  HEAP32[$284 >> 2] = $14; //@line 26702
  $285 = $ReallocAsyncCtx2 + 28 | 0; //@line 26703
  HEAP32[$285 >> 2] = $16; //@line 26704
  $286 = $ReallocAsyncCtx2 + 32 | 0; //@line 26705
  HEAP32[$286 >> 2] = $18; //@line 26706
  $287 = $ReallocAsyncCtx2 + 36 | 0; //@line 26707
  HEAP32[$287 >> 2] = $20; //@line 26708
  $288 = $ReallocAsyncCtx2 + 40 | 0; //@line 26709
  HEAP32[$288 >> 2] = $22; //@line 26710
  $289 = $ReallocAsyncCtx2 + 44 | 0; //@line 26711
  HEAP32[$289 >> 2] = $24; //@line 26712
  $290 = $ReallocAsyncCtx2 + 48 | 0; //@line 26713
  HEAP32[$290 >> 2] = $26; //@line 26714
  $291 = $ReallocAsyncCtx2 + 52 | 0; //@line 26715
  HEAP32[$291 >> 2] = $28; //@line 26716
  $292 = $ReallocAsyncCtx2 + 56 | 0; //@line 26717
  HEAP32[$292 >> 2] = $30; //@line 26718
  $293 = $ReallocAsyncCtx2 + 60 | 0; //@line 26719
  HEAP32[$293 >> 2] = $32; //@line 26720
  $294 = $ReallocAsyncCtx2 + 64 | 0; //@line 26721
  HEAP32[$294 >> 2] = $34; //@line 26722
  $295 = $ReallocAsyncCtx2 + 68 | 0; //@line 26723
  HEAP32[$295 >> 2] = $36; //@line 26724
  $296 = $ReallocAsyncCtx2 + 72 | 0; //@line 26725
  HEAP32[$296 >> 2] = $38; //@line 26726
  $297 = $ReallocAsyncCtx2 + 76 | 0; //@line 26727
  HEAP32[$297 >> 2] = $40; //@line 26728
  $298 = $ReallocAsyncCtx2 + 80 | 0; //@line 26729
  HEAP32[$298 >> 2] = $42; //@line 26730
  $299 = $ReallocAsyncCtx2 + 84 | 0; //@line 26731
  HEAP32[$299 >> 2] = $44; //@line 26732
  $300 = $ReallocAsyncCtx2 + 88 | 0; //@line 26733
  HEAP32[$300 >> 2] = $46; //@line 26734
  $301 = $ReallocAsyncCtx2 + 92 | 0; //@line 26735
  HEAP32[$301 >> 2] = $48; //@line 26736
  $302 = $ReallocAsyncCtx2 + 96 | 0; //@line 26737
  HEAP32[$302 >> 2] = $50; //@line 26738
  $303 = $ReallocAsyncCtx2 + 100 | 0; //@line 26739
  HEAP8[$303 >> 0] = $266; //@line 26740
  $304 = $ReallocAsyncCtx2 + 104 | 0; //@line 26741
  HEAP32[$304 >> 2] = $52; //@line 26742
  $305 = $ReallocAsyncCtx2 + 108 | 0; //@line 26743
  HEAP32[$305 >> 2] = $54; //@line 26744
  $306 = $ReallocAsyncCtx2 + 112 | 0; //@line 26745
  HEAP32[$306 >> 2] = $58; //@line 26746
  $307 = $ReallocAsyncCtx2 + 116 | 0; //@line 26747
  HEAP32[$307 >> 2] = $60; //@line 26748
  $308 = $ReallocAsyncCtx2 + 120 | 0; //@line 26749
  HEAP32[$308 >> 2] = $62; //@line 26750
  $309 = $ReallocAsyncCtx2 + 124 | 0; //@line 26751
  HEAP32[$309 >> 2] = $64; //@line 26752
  $310 = $ReallocAsyncCtx2 + 128 | 0; //@line 26753
  HEAP32[$310 >> 2] = $66; //@line 26754
  $311 = $ReallocAsyncCtx2 + 132 | 0; //@line 26755
  HEAP32[$311 >> 2] = $68; //@line 26756
  $312 = $ReallocAsyncCtx2 + 136 | 0; //@line 26757
  HEAP32[$312 >> 2] = $70; //@line 26758
  $313 = $ReallocAsyncCtx2 + 140 | 0; //@line 26759
  HEAP32[$313 >> 2] = $72; //@line 26760
  $314 = $ReallocAsyncCtx2 + 144 | 0; //@line 26761
  HEAP32[$314 >> 2] = $74; //@line 26762
  $315 = $ReallocAsyncCtx2 + 148 | 0; //@line 26763
  HEAP32[$315 >> 2] = $76; //@line 26764
  $316 = $ReallocAsyncCtx2 + 152 | 0; //@line 26765
  HEAP32[$316 >> 2] = $78; //@line 26766
  $317 = $ReallocAsyncCtx2 + 156 | 0; //@line 26767
  HEAP32[$317 >> 2] = $80; //@line 26768
  $318 = $ReallocAsyncCtx2 + 160 | 0; //@line 26769
  HEAP32[$318 >> 2] = $82; //@line 26770
  $319 = $ReallocAsyncCtx2 + 164 | 0; //@line 26771
  HEAP32[$319 >> 2] = $84; //@line 26772
  $320 = $ReallocAsyncCtx2 + 168 | 0; //@line 26773
  HEAP32[$320 >> 2] = $86; //@line 26774
  $321 = $ReallocAsyncCtx2 + 172 | 0; //@line 26775
  HEAP32[$321 >> 2] = $88; //@line 26776
  $322 = $ReallocAsyncCtx2 + 176 | 0; //@line 26777
  HEAP32[$322 >> 2] = $90; //@line 26778
  $323 = $ReallocAsyncCtx2 + 180 | 0; //@line 26779
  HEAP32[$323 >> 2] = $92; //@line 26780
  $324 = $ReallocAsyncCtx2 + 184 | 0; //@line 26781
  HEAP32[$324 >> 2] = $94; //@line 26782
  $325 = $ReallocAsyncCtx2 + 188 | 0; //@line 26783
  HEAP32[$325 >> 2] = $96; //@line 26784
  $326 = $ReallocAsyncCtx2 + 192 | 0; //@line 26785
  HEAP32[$326 >> 2] = $98; //@line 26786
  $327 = $ReallocAsyncCtx2 + 196 | 0; //@line 26787
  HEAP32[$327 >> 2] = $100; //@line 26788
  $328 = $ReallocAsyncCtx2 + 200 | 0; //@line 26789
  HEAP32[$328 >> 2] = $102; //@line 26790
  $329 = $ReallocAsyncCtx2 + 204 | 0; //@line 26791
  HEAP32[$329 >> 2] = $104; //@line 26792
  $330 = $ReallocAsyncCtx2 + 208 | 0; //@line 26793
  HEAP32[$330 >> 2] = $106; //@line 26794
  $331 = $ReallocAsyncCtx2 + 212 | 0; //@line 26795
  HEAP32[$331 >> 2] = $108; //@line 26796
  $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 26797
  HEAP32[$332 >> 2] = $110; //@line 26798
  $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 26799
  HEAP32[$333 >> 2] = $112; //@line 26800
  $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 26801
  HEAP32[$334 >> 2] = $114; //@line 26802
  $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 26803
  HEAP32[$335 >> 2] = $116; //@line 26804
  $336 = $ReallocAsyncCtx2 + 232 | 0; //@line 26805
  HEAP32[$336 >> 2] = $118; //@line 26806
  $337 = $ReallocAsyncCtx2 + 236 | 0; //@line 26807
  HEAP32[$337 >> 2] = $120; //@line 26808
  $338 = $ReallocAsyncCtx2 + 240 | 0; //@line 26809
  HEAP32[$338 >> 2] = $122; //@line 26810
  $339 = $ReallocAsyncCtx2 + 244 | 0; //@line 26811
  HEAP32[$339 >> 2] = $124; //@line 26812
  $340 = $ReallocAsyncCtx2 + 248 | 0; //@line 26813
  HEAP32[$340 >> 2] = $126; //@line 26814
  $341 = $ReallocAsyncCtx2 + 252 | 0; //@line 26815
  HEAP32[$341 >> 2] = $128; //@line 26816
  $342 = $ReallocAsyncCtx2 + 256 | 0; //@line 26817
  HEAP32[$342 >> 2] = $130; //@line 26818
  $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 26819
  HEAP32[$343 >> 2] = $132; //@line 26820
  $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 26821
  HEAP32[$344 >> 2] = $134; //@line 26822
  sp = STACKTOP; //@line 26823
  return;
 } else if ((label | 0) == 14) {
  HEAP8[$130 >> 0] = HEAP8[$134 + ($137 & 255) >> 0] | 0; //@line 26831
  HEAP32[$116 >> 2] = $66; //@line 26832
  HEAP32[$114 >> 2] = (HEAPU8[$134 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$134 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$134 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 26853
  HEAP32[$106 >> 2] = 0; //@line 26854
  $385 = $$0$be + 6 << 24 >> 24; //@line 26855
  HEAP8[$88 >> 0] = HEAP8[$134 + ($$0$be + 5 & 255) >> 0] | 0; //@line 26859
  $391 = HEAP32[(HEAP32[$92 >> 2] | 0) + 8 >> 2] | 0; //@line 26862
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 26863
  $392 = FUNCTION_TABLE_iii[$391 & 31]($14, $90) | 0; //@line 26864
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 597; //@line 26867
   $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 26868
   HEAP32[$393 >> 2] = $2; //@line 26869
   $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 26870
   HEAP8[$394 >> 0] = $4; //@line 26871
   $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 26872
   HEAP32[$395 >> 2] = $6; //@line 26873
   $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 26874
   HEAP8[$396 >> 0] = $8; //@line 26875
   $397 = $ReallocAsyncCtx3 + 17 | 0; //@line 26876
   HEAP8[$397 >> 0] = $10; //@line 26877
   $398 = $ReallocAsyncCtx3 + 20 | 0; //@line 26878
   HEAP32[$398 >> 2] = $12; //@line 26879
   $399 = $ReallocAsyncCtx3 + 24 | 0; //@line 26880
   HEAP32[$399 >> 2] = $14; //@line 26881
   $400 = $ReallocAsyncCtx3 + 28 | 0; //@line 26882
   HEAP32[$400 >> 2] = $16; //@line 26883
   $401 = $ReallocAsyncCtx3 + 32 | 0; //@line 26884
   HEAP32[$401 >> 2] = $18; //@line 26885
   $402 = $ReallocAsyncCtx3 + 36 | 0; //@line 26886
   HEAP32[$402 >> 2] = $20; //@line 26887
   $403 = $ReallocAsyncCtx3 + 40 | 0; //@line 26888
   HEAP32[$403 >> 2] = $22; //@line 26889
   $404 = $ReallocAsyncCtx3 + 44 | 0; //@line 26890
   HEAP32[$404 >> 2] = $24; //@line 26891
   $405 = $ReallocAsyncCtx3 + 48 | 0; //@line 26892
   HEAP32[$405 >> 2] = $26; //@line 26893
   $406 = $ReallocAsyncCtx3 + 52 | 0; //@line 26894
   HEAP32[$406 >> 2] = $28; //@line 26895
   $407 = $ReallocAsyncCtx3 + 56 | 0; //@line 26896
   HEAP32[$407 >> 2] = $30; //@line 26897
   $408 = $ReallocAsyncCtx3 + 60 | 0; //@line 26898
   HEAP32[$408 >> 2] = $32; //@line 26899
   $409 = $ReallocAsyncCtx3 + 64 | 0; //@line 26900
   HEAP32[$409 >> 2] = $34; //@line 26901
   $410 = $ReallocAsyncCtx3 + 68 | 0; //@line 26902
   HEAP32[$410 >> 2] = $36; //@line 26903
   $411 = $ReallocAsyncCtx3 + 72 | 0; //@line 26904
   HEAP32[$411 >> 2] = $38; //@line 26905
   $412 = $ReallocAsyncCtx3 + 76 | 0; //@line 26906
   HEAP32[$412 >> 2] = $40; //@line 26907
   $413 = $ReallocAsyncCtx3 + 80 | 0; //@line 26908
   HEAP32[$413 >> 2] = $42; //@line 26909
   $414 = $ReallocAsyncCtx3 + 84 | 0; //@line 26910
   HEAP32[$414 >> 2] = $44; //@line 26911
   $415 = $ReallocAsyncCtx3 + 88 | 0; //@line 26912
   HEAP32[$415 >> 2] = $46; //@line 26913
   $416 = $ReallocAsyncCtx3 + 92 | 0; //@line 26914
   HEAP32[$416 >> 2] = $48; //@line 26915
   $417 = $ReallocAsyncCtx3 + 96 | 0; //@line 26916
   HEAP32[$417 >> 2] = $50; //@line 26917
   $418 = $ReallocAsyncCtx3 + 100 | 0; //@line 26918
   HEAP32[$418 >> 2] = $52; //@line 26919
   $419 = $ReallocAsyncCtx3 + 104 | 0; //@line 26920
   HEAP32[$419 >> 2] = $54; //@line 26921
   $420 = $ReallocAsyncCtx3 + 108 | 0; //@line 26922
   HEAP8[$420 >> 0] = $385; //@line 26923
   $421 = $ReallocAsyncCtx3 + 112 | 0; //@line 26924
   HEAP32[$421 >> 2] = $58; //@line 26925
   $422 = $ReallocAsyncCtx3 + 116 | 0; //@line 26926
   HEAP32[$422 >> 2] = $60; //@line 26927
   $423 = $ReallocAsyncCtx3 + 120 | 0; //@line 26928
   HEAP32[$423 >> 2] = $62; //@line 26929
   $424 = $ReallocAsyncCtx3 + 124 | 0; //@line 26930
   HEAP32[$424 >> 2] = $64; //@line 26931
   $425 = $ReallocAsyncCtx3 + 128 | 0; //@line 26932
   HEAP32[$425 >> 2] = $66; //@line 26933
   $426 = $ReallocAsyncCtx3 + 132 | 0; //@line 26934
   HEAP32[$426 >> 2] = $68; //@line 26935
   $427 = $ReallocAsyncCtx3 + 136 | 0; //@line 26936
   HEAP32[$427 >> 2] = $70; //@line 26937
   $428 = $ReallocAsyncCtx3 + 140 | 0; //@line 26938
   HEAP32[$428 >> 2] = $72; //@line 26939
   $429 = $ReallocAsyncCtx3 + 144 | 0; //@line 26940
   HEAP32[$429 >> 2] = $74; //@line 26941
   $430 = $ReallocAsyncCtx3 + 148 | 0; //@line 26942
   HEAP32[$430 >> 2] = $76; //@line 26943
   $431 = $ReallocAsyncCtx3 + 152 | 0; //@line 26944
   HEAP32[$431 >> 2] = $78; //@line 26945
   $432 = $ReallocAsyncCtx3 + 156 | 0; //@line 26946
   HEAP32[$432 >> 2] = $80; //@line 26947
   $433 = $ReallocAsyncCtx3 + 160 | 0; //@line 26948
   HEAP32[$433 >> 2] = $82; //@line 26949
   $434 = $ReallocAsyncCtx3 + 164 | 0; //@line 26950
   HEAP32[$434 >> 2] = $84; //@line 26951
   $435 = $ReallocAsyncCtx3 + 168 | 0; //@line 26952
   HEAP32[$435 >> 2] = $86; //@line 26953
   $436 = $ReallocAsyncCtx3 + 172 | 0; //@line 26954
   HEAP32[$436 >> 2] = $88; //@line 26955
   $437 = $ReallocAsyncCtx3 + 176 | 0; //@line 26956
   HEAP32[$437 >> 2] = $90; //@line 26957
   $438 = $ReallocAsyncCtx3 + 180 | 0; //@line 26958
   HEAP32[$438 >> 2] = $92; //@line 26959
   $439 = $ReallocAsyncCtx3 + 184 | 0; //@line 26960
   HEAP32[$439 >> 2] = $94; //@line 26961
   $440 = $ReallocAsyncCtx3 + 188 | 0; //@line 26962
   HEAP32[$440 >> 2] = $96; //@line 26963
   $441 = $ReallocAsyncCtx3 + 192 | 0; //@line 26964
   HEAP32[$441 >> 2] = $98; //@line 26965
   $442 = $ReallocAsyncCtx3 + 196 | 0; //@line 26966
   HEAP32[$442 >> 2] = $100; //@line 26967
   $443 = $ReallocAsyncCtx3 + 200 | 0; //@line 26968
   HEAP32[$443 >> 2] = $102; //@line 26969
   $444 = $ReallocAsyncCtx3 + 204 | 0; //@line 26970
   HEAP32[$444 >> 2] = $104; //@line 26971
   $445 = $ReallocAsyncCtx3 + 208 | 0; //@line 26972
   HEAP32[$445 >> 2] = $106; //@line 26973
   $446 = $ReallocAsyncCtx3 + 212 | 0; //@line 26974
   HEAP32[$446 >> 2] = $108; //@line 26975
   $447 = $ReallocAsyncCtx3 + 216 | 0; //@line 26976
   HEAP32[$447 >> 2] = $110; //@line 26977
   $448 = $ReallocAsyncCtx3 + 220 | 0; //@line 26978
   HEAP32[$448 >> 2] = $112; //@line 26979
   $449 = $ReallocAsyncCtx3 + 224 | 0; //@line 26980
   HEAP32[$449 >> 2] = $114; //@line 26981
   $450 = $ReallocAsyncCtx3 + 228 | 0; //@line 26982
   HEAP32[$450 >> 2] = $116; //@line 26983
   $451 = $ReallocAsyncCtx3 + 232 | 0; //@line 26984
   HEAP32[$451 >> 2] = $118; //@line 26985
   $452 = $ReallocAsyncCtx3 + 236 | 0; //@line 26986
   HEAP32[$452 >> 2] = $120; //@line 26987
   $453 = $ReallocAsyncCtx3 + 240 | 0; //@line 26988
   HEAP32[$453 >> 2] = $122; //@line 26989
   $454 = $ReallocAsyncCtx3 + 244 | 0; //@line 26990
   HEAP32[$454 >> 2] = $124; //@line 26991
   $455 = $ReallocAsyncCtx3 + 248 | 0; //@line 26992
   HEAP32[$455 >> 2] = $126; //@line 26993
   $456 = $ReallocAsyncCtx3 + 252 | 0; //@line 26994
   HEAP32[$456 >> 2] = $128; //@line 26995
   $457 = $ReallocAsyncCtx3 + 256 | 0; //@line 26996
   HEAP32[$457 >> 2] = $130; //@line 26997
   $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 26998
   HEAP32[$458 >> 2] = $132; //@line 26999
   $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 27000
   HEAP32[$459 >> 2] = $134; //@line 27001
   sp = STACKTOP; //@line 27002
   return;
  }
  HEAP8[___async_retval >> 0] = $392; //@line 27006
  ___async_unwind = 0; //@line 27007
  HEAP32[$ReallocAsyncCtx3 >> 2] = 597; //@line 27008
  $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 27009
  HEAP32[$393 >> 2] = $2; //@line 27010
  $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 27011
  HEAP8[$394 >> 0] = $4; //@line 27012
  $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 27013
  HEAP32[$395 >> 2] = $6; //@line 27014
  $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 27015
  HEAP8[$396 >> 0] = $8; //@line 27016
  $397 = $ReallocAsyncCtx3 + 17 | 0; //@line 27017
  HEAP8[$397 >> 0] = $10; //@line 27018
  $398 = $ReallocAsyncCtx3 + 20 | 0; //@line 27019
  HEAP32[$398 >> 2] = $12; //@line 27020
  $399 = $ReallocAsyncCtx3 + 24 | 0; //@line 27021
  HEAP32[$399 >> 2] = $14; //@line 27022
  $400 = $ReallocAsyncCtx3 + 28 | 0; //@line 27023
  HEAP32[$400 >> 2] = $16; //@line 27024
  $401 = $ReallocAsyncCtx3 + 32 | 0; //@line 27025
  HEAP32[$401 >> 2] = $18; //@line 27026
  $402 = $ReallocAsyncCtx3 + 36 | 0; //@line 27027
  HEAP32[$402 >> 2] = $20; //@line 27028
  $403 = $ReallocAsyncCtx3 + 40 | 0; //@line 27029
  HEAP32[$403 >> 2] = $22; //@line 27030
  $404 = $ReallocAsyncCtx3 + 44 | 0; //@line 27031
  HEAP32[$404 >> 2] = $24; //@line 27032
  $405 = $ReallocAsyncCtx3 + 48 | 0; //@line 27033
  HEAP32[$405 >> 2] = $26; //@line 27034
  $406 = $ReallocAsyncCtx3 + 52 | 0; //@line 27035
  HEAP32[$406 >> 2] = $28; //@line 27036
  $407 = $ReallocAsyncCtx3 + 56 | 0; //@line 27037
  HEAP32[$407 >> 2] = $30; //@line 27038
  $408 = $ReallocAsyncCtx3 + 60 | 0; //@line 27039
  HEAP32[$408 >> 2] = $32; //@line 27040
  $409 = $ReallocAsyncCtx3 + 64 | 0; //@line 27041
  HEAP32[$409 >> 2] = $34; //@line 27042
  $410 = $ReallocAsyncCtx3 + 68 | 0; //@line 27043
  HEAP32[$410 >> 2] = $36; //@line 27044
  $411 = $ReallocAsyncCtx3 + 72 | 0; //@line 27045
  HEAP32[$411 >> 2] = $38; //@line 27046
  $412 = $ReallocAsyncCtx3 + 76 | 0; //@line 27047
  HEAP32[$412 >> 2] = $40; //@line 27048
  $413 = $ReallocAsyncCtx3 + 80 | 0; //@line 27049
  HEAP32[$413 >> 2] = $42; //@line 27050
  $414 = $ReallocAsyncCtx3 + 84 | 0; //@line 27051
  HEAP32[$414 >> 2] = $44; //@line 27052
  $415 = $ReallocAsyncCtx3 + 88 | 0; //@line 27053
  HEAP32[$415 >> 2] = $46; //@line 27054
  $416 = $ReallocAsyncCtx3 + 92 | 0; //@line 27055
  HEAP32[$416 >> 2] = $48; //@line 27056
  $417 = $ReallocAsyncCtx3 + 96 | 0; //@line 27057
  HEAP32[$417 >> 2] = $50; //@line 27058
  $418 = $ReallocAsyncCtx3 + 100 | 0; //@line 27059
  HEAP32[$418 >> 2] = $52; //@line 27060
  $419 = $ReallocAsyncCtx3 + 104 | 0; //@line 27061
  HEAP32[$419 >> 2] = $54; //@line 27062
  $420 = $ReallocAsyncCtx3 + 108 | 0; //@line 27063
  HEAP8[$420 >> 0] = $385; //@line 27064
  $421 = $ReallocAsyncCtx3 + 112 | 0; //@line 27065
  HEAP32[$421 >> 2] = $58; //@line 27066
  $422 = $ReallocAsyncCtx3 + 116 | 0; //@line 27067
  HEAP32[$422 >> 2] = $60; //@line 27068
  $423 = $ReallocAsyncCtx3 + 120 | 0; //@line 27069
  HEAP32[$423 >> 2] = $62; //@line 27070
  $424 = $ReallocAsyncCtx3 + 124 | 0; //@line 27071
  HEAP32[$424 >> 2] = $64; //@line 27072
  $425 = $ReallocAsyncCtx3 + 128 | 0; //@line 27073
  HEAP32[$425 >> 2] = $66; //@line 27074
  $426 = $ReallocAsyncCtx3 + 132 | 0; //@line 27075
  HEAP32[$426 >> 2] = $68; //@line 27076
  $427 = $ReallocAsyncCtx3 + 136 | 0; //@line 27077
  HEAP32[$427 >> 2] = $70; //@line 27078
  $428 = $ReallocAsyncCtx3 + 140 | 0; //@line 27079
  HEAP32[$428 >> 2] = $72; //@line 27080
  $429 = $ReallocAsyncCtx3 + 144 | 0; //@line 27081
  HEAP32[$429 >> 2] = $74; //@line 27082
  $430 = $ReallocAsyncCtx3 + 148 | 0; //@line 27083
  HEAP32[$430 >> 2] = $76; //@line 27084
  $431 = $ReallocAsyncCtx3 + 152 | 0; //@line 27085
  HEAP32[$431 >> 2] = $78; //@line 27086
  $432 = $ReallocAsyncCtx3 + 156 | 0; //@line 27087
  HEAP32[$432 >> 2] = $80; //@line 27088
  $433 = $ReallocAsyncCtx3 + 160 | 0; //@line 27089
  HEAP32[$433 >> 2] = $82; //@line 27090
  $434 = $ReallocAsyncCtx3 + 164 | 0; //@line 27091
  HEAP32[$434 >> 2] = $84; //@line 27092
  $435 = $ReallocAsyncCtx3 + 168 | 0; //@line 27093
  HEAP32[$435 >> 2] = $86; //@line 27094
  $436 = $ReallocAsyncCtx3 + 172 | 0; //@line 27095
  HEAP32[$436 >> 2] = $88; //@line 27096
  $437 = $ReallocAsyncCtx3 + 176 | 0; //@line 27097
  HEAP32[$437 >> 2] = $90; //@line 27098
  $438 = $ReallocAsyncCtx3 + 180 | 0; //@line 27099
  HEAP32[$438 >> 2] = $92; //@line 27100
  $439 = $ReallocAsyncCtx3 + 184 | 0; //@line 27101
  HEAP32[$439 >> 2] = $94; //@line 27102
  $440 = $ReallocAsyncCtx3 + 188 | 0; //@line 27103
  HEAP32[$440 >> 2] = $96; //@line 27104
  $441 = $ReallocAsyncCtx3 + 192 | 0; //@line 27105
  HEAP32[$441 >> 2] = $98; //@line 27106
  $442 = $ReallocAsyncCtx3 + 196 | 0; //@line 27107
  HEAP32[$442 >> 2] = $100; //@line 27108
  $443 = $ReallocAsyncCtx3 + 200 | 0; //@line 27109
  HEAP32[$443 >> 2] = $102; //@line 27110
  $444 = $ReallocAsyncCtx3 + 204 | 0; //@line 27111
  HEAP32[$444 >> 2] = $104; //@line 27112
  $445 = $ReallocAsyncCtx3 + 208 | 0; //@line 27113
  HEAP32[$445 >> 2] = $106; //@line 27114
  $446 = $ReallocAsyncCtx3 + 212 | 0; //@line 27115
  HEAP32[$446 >> 2] = $108; //@line 27116
  $447 = $ReallocAsyncCtx3 + 216 | 0; //@line 27117
  HEAP32[$447 >> 2] = $110; //@line 27118
  $448 = $ReallocAsyncCtx3 + 220 | 0; //@line 27119
  HEAP32[$448 >> 2] = $112; //@line 27120
  $449 = $ReallocAsyncCtx3 + 224 | 0; //@line 27121
  HEAP32[$449 >> 2] = $114; //@line 27122
  $450 = $ReallocAsyncCtx3 + 228 | 0; //@line 27123
  HEAP32[$450 >> 2] = $116; //@line 27124
  $451 = $ReallocAsyncCtx3 + 232 | 0; //@line 27125
  HEAP32[$451 >> 2] = $118; //@line 27126
  $452 = $ReallocAsyncCtx3 + 236 | 0; //@line 27127
  HEAP32[$452 >> 2] = $120; //@line 27128
  $453 = $ReallocAsyncCtx3 + 240 | 0; //@line 27129
  HEAP32[$453 >> 2] = $122; //@line 27130
  $454 = $ReallocAsyncCtx3 + 244 | 0; //@line 27131
  HEAP32[$454 >> 2] = $124; //@line 27132
  $455 = $ReallocAsyncCtx3 + 248 | 0; //@line 27133
  HEAP32[$455 >> 2] = $126; //@line 27134
  $456 = $ReallocAsyncCtx3 + 252 | 0; //@line 27135
  HEAP32[$456 >> 2] = $128; //@line 27136
  $457 = $ReallocAsyncCtx3 + 256 | 0; //@line 27137
  HEAP32[$457 >> 2] = $130; //@line 27138
  $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 27139
  HEAP32[$458 >> 2] = $132; //@line 27140
  $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 27141
  HEAP32[$459 >> 2] = $134; //@line 27142
  sp = STACKTOP; //@line 27143
  return;
 } else if ((label | 0) == 19) {
  $478 = $$0$be + 2 << 24 >> 24; //@line 27147
  $481 = HEAP8[$134 + ($137 & 255) >> 0] | 0; //@line 27150
  HEAP8[$58 >> 0] = 0; //@line 27151
  $482 = $481 & 255; //@line 27152
  HEAP8[$48 >> 0] = $482 >>> 5 & 1; //@line 27156
  if ($482 & 16 | 0) {
   HEAP8[$58 >> 0] = 1; //@line 27160
  }
  HEAP8[$40 >> 0] = $482 & 15; //@line 27164
  $491 = HEAP32[(HEAP32[$34 >> 2] | 0) + 44 >> 2] | 0; //@line 27167
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 27168
  $492 = FUNCTION_TABLE_iii[$491 & 31]($14, $62) | 0; //@line 27169
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 598; //@line 27172
   $493 = $ReallocAsyncCtx4 + 4 | 0; //@line 27173
   HEAP32[$493 >> 2] = $2; //@line 27174
   $494 = $ReallocAsyncCtx4 + 8 | 0; //@line 27175
   HEAP8[$494 >> 0] = $4; //@line 27176
   $495 = $ReallocAsyncCtx4 + 12 | 0; //@line 27177
   HEAP32[$495 >> 2] = $6; //@line 27178
   $496 = $ReallocAsyncCtx4 + 16 | 0; //@line 27179
   HEAP8[$496 >> 0] = $8; //@line 27180
   $497 = $ReallocAsyncCtx4 + 17 | 0; //@line 27181
   HEAP8[$497 >> 0] = $10; //@line 27182
   $498 = $ReallocAsyncCtx4 + 20 | 0; //@line 27183
   HEAP32[$498 >> 2] = $12; //@line 27184
   $499 = $ReallocAsyncCtx4 + 24 | 0; //@line 27185
   HEAP32[$499 >> 2] = $14; //@line 27186
   $500 = $ReallocAsyncCtx4 + 28 | 0; //@line 27187
   HEAP32[$500 >> 2] = $16; //@line 27188
   $501 = $ReallocAsyncCtx4 + 32 | 0; //@line 27189
   HEAP32[$501 >> 2] = $18; //@line 27190
   $502 = $ReallocAsyncCtx4 + 36 | 0; //@line 27191
   HEAP32[$502 >> 2] = $20; //@line 27192
   $503 = $ReallocAsyncCtx4 + 40 | 0; //@line 27193
   HEAP32[$503 >> 2] = $22; //@line 27194
   $504 = $ReallocAsyncCtx4 + 44 | 0; //@line 27195
   HEAP32[$504 >> 2] = $24; //@line 27196
   $505 = $ReallocAsyncCtx4 + 48 | 0; //@line 27197
   HEAP32[$505 >> 2] = $26; //@line 27198
   $506 = $ReallocAsyncCtx4 + 52 | 0; //@line 27199
   HEAP32[$506 >> 2] = $28; //@line 27200
   $507 = $ReallocAsyncCtx4 + 56 | 0; //@line 27201
   HEAP32[$507 >> 2] = $30; //@line 27202
   $508 = $ReallocAsyncCtx4 + 60 | 0; //@line 27203
   HEAP8[$508 >> 0] = $478; //@line 27204
   $509 = $ReallocAsyncCtx4 + 64 | 0; //@line 27205
   HEAP32[$509 >> 2] = $32; //@line 27206
   $510 = $ReallocAsyncCtx4 + 68 | 0; //@line 27207
   HEAP32[$510 >> 2] = $34; //@line 27208
   $511 = $ReallocAsyncCtx4 + 72 | 0; //@line 27209
   HEAP32[$511 >> 2] = $36; //@line 27210
   $512 = $ReallocAsyncCtx4 + 76 | 0; //@line 27211
   HEAP32[$512 >> 2] = $38; //@line 27212
   $513 = $ReallocAsyncCtx4 + 80 | 0; //@line 27213
   HEAP32[$513 >> 2] = $40; //@line 27214
   $514 = $ReallocAsyncCtx4 + 84 | 0; //@line 27215
   HEAP32[$514 >> 2] = $42; //@line 27216
   $515 = $ReallocAsyncCtx4 + 88 | 0; //@line 27217
   HEAP32[$515 >> 2] = $44; //@line 27218
   $516 = $ReallocAsyncCtx4 + 92 | 0; //@line 27219
   HEAP32[$516 >> 2] = $46; //@line 27220
   $517 = $ReallocAsyncCtx4 + 96 | 0; //@line 27221
   HEAP32[$517 >> 2] = $48; //@line 27222
   $518 = $ReallocAsyncCtx4 + 100 | 0; //@line 27223
   HEAP32[$518 >> 2] = $50; //@line 27224
   $519 = $ReallocAsyncCtx4 + 104 | 0; //@line 27225
   HEAP32[$519 >> 2] = $52; //@line 27226
   $520 = $ReallocAsyncCtx4 + 108 | 0; //@line 27227
   HEAP32[$520 >> 2] = $54; //@line 27228
   $521 = $ReallocAsyncCtx4 + 112 | 0; //@line 27229
   HEAP32[$521 >> 2] = $58; //@line 27230
   $522 = $ReallocAsyncCtx4 + 116 | 0; //@line 27231
   HEAP32[$522 >> 2] = $60; //@line 27232
   $523 = $ReallocAsyncCtx4 + 120 | 0; //@line 27233
   HEAP32[$523 >> 2] = $62; //@line 27234
   $524 = $ReallocAsyncCtx4 + 124 | 0; //@line 27235
   HEAP32[$524 >> 2] = $64; //@line 27236
   $525 = $ReallocAsyncCtx4 + 128 | 0; //@line 27237
   HEAP32[$525 >> 2] = $66; //@line 27238
   $526 = $ReallocAsyncCtx4 + 132 | 0; //@line 27239
   HEAP32[$526 >> 2] = $68; //@line 27240
   $527 = $ReallocAsyncCtx4 + 136 | 0; //@line 27241
   HEAP32[$527 >> 2] = $70; //@line 27242
   $528 = $ReallocAsyncCtx4 + 140 | 0; //@line 27243
   HEAP32[$528 >> 2] = $72; //@line 27244
   $529 = $ReallocAsyncCtx4 + 144 | 0; //@line 27245
   HEAP32[$529 >> 2] = $74; //@line 27246
   $530 = $ReallocAsyncCtx4 + 148 | 0; //@line 27247
   HEAP32[$530 >> 2] = $76; //@line 27248
   $531 = $ReallocAsyncCtx4 + 152 | 0; //@line 27249
   HEAP32[$531 >> 2] = $78; //@line 27250
   $532 = $ReallocAsyncCtx4 + 156 | 0; //@line 27251
   HEAP32[$532 >> 2] = $80; //@line 27252
   $533 = $ReallocAsyncCtx4 + 160 | 0; //@line 27253
   HEAP32[$533 >> 2] = $82; //@line 27254
   $534 = $ReallocAsyncCtx4 + 164 | 0; //@line 27255
   HEAP32[$534 >> 2] = $84; //@line 27256
   $535 = $ReallocAsyncCtx4 + 168 | 0; //@line 27257
   HEAP32[$535 >> 2] = $86; //@line 27258
   $536 = $ReallocAsyncCtx4 + 172 | 0; //@line 27259
   HEAP32[$536 >> 2] = $88; //@line 27260
   $537 = $ReallocAsyncCtx4 + 176 | 0; //@line 27261
   HEAP32[$537 >> 2] = $90; //@line 27262
   $538 = $ReallocAsyncCtx4 + 180 | 0; //@line 27263
   HEAP32[$538 >> 2] = $92; //@line 27264
   $539 = $ReallocAsyncCtx4 + 184 | 0; //@line 27265
   HEAP32[$539 >> 2] = $94; //@line 27266
   $540 = $ReallocAsyncCtx4 + 188 | 0; //@line 27267
   HEAP32[$540 >> 2] = $96; //@line 27268
   $541 = $ReallocAsyncCtx4 + 192 | 0; //@line 27269
   HEAP32[$541 >> 2] = $98; //@line 27270
   $542 = $ReallocAsyncCtx4 + 196 | 0; //@line 27271
   HEAP32[$542 >> 2] = $100; //@line 27272
   $543 = $ReallocAsyncCtx4 + 200 | 0; //@line 27273
   HEAP32[$543 >> 2] = $$096$be; //@line 27274
   $544 = $ReallocAsyncCtx4 + 204 | 0; //@line 27275
   HEAP32[$544 >> 2] = $102; //@line 27276
   $545 = $ReallocAsyncCtx4 + 208 | 0; //@line 27277
   HEAP32[$545 >> 2] = $104; //@line 27278
   $546 = $ReallocAsyncCtx4 + 212 | 0; //@line 27279
   HEAP32[$546 >> 2] = $106; //@line 27280
   $547 = $ReallocAsyncCtx4 + 216 | 0; //@line 27281
   HEAP32[$547 >> 2] = $108; //@line 27282
   $548 = $ReallocAsyncCtx4 + 220 | 0; //@line 27283
   HEAP32[$548 >> 2] = $110; //@line 27284
   $549 = $ReallocAsyncCtx4 + 224 | 0; //@line 27285
   HEAP32[$549 >> 2] = $112; //@line 27286
   $550 = $ReallocAsyncCtx4 + 228 | 0; //@line 27287
   HEAP32[$550 >> 2] = $114; //@line 27288
   $551 = $ReallocAsyncCtx4 + 232 | 0; //@line 27289
   HEAP32[$551 >> 2] = $116; //@line 27290
   $552 = $ReallocAsyncCtx4 + 236 | 0; //@line 27291
   HEAP32[$552 >> 2] = $118; //@line 27292
   $553 = $ReallocAsyncCtx4 + 240 | 0; //@line 27293
   HEAP32[$553 >> 2] = $120; //@line 27294
   $554 = $ReallocAsyncCtx4 + 244 | 0; //@line 27295
   HEAP32[$554 >> 2] = $122; //@line 27296
   $555 = $ReallocAsyncCtx4 + 248 | 0; //@line 27297
   HEAP32[$555 >> 2] = $124; //@line 27298
   $556 = $ReallocAsyncCtx4 + 252 | 0; //@line 27299
   HEAP32[$556 >> 2] = $126; //@line 27300
   $557 = $ReallocAsyncCtx4 + 256 | 0; //@line 27301
   HEAP32[$557 >> 2] = $128; //@line 27302
   $558 = $ReallocAsyncCtx4 + 260 | 0; //@line 27303
   HEAP32[$558 >> 2] = $130; //@line 27304
   $559 = $ReallocAsyncCtx4 + 264 | 0; //@line 27305
   HEAP32[$559 >> 2] = $132; //@line 27306
   $560 = $ReallocAsyncCtx4 + 268 | 0; //@line 27307
   HEAP32[$560 >> 2] = $134; //@line 27308
   sp = STACKTOP; //@line 27309
   return;
  }
  HEAP8[___async_retval >> 0] = $492 & 1; //@line 27314
  ___async_unwind = 0; //@line 27315
  HEAP32[$ReallocAsyncCtx4 >> 2] = 598; //@line 27316
  $493 = $ReallocAsyncCtx4 + 4 | 0; //@line 27317
  HEAP32[$493 >> 2] = $2; //@line 27318
  $494 = $ReallocAsyncCtx4 + 8 | 0; //@line 27319
  HEAP8[$494 >> 0] = $4; //@line 27320
  $495 = $ReallocAsyncCtx4 + 12 | 0; //@line 27321
  HEAP32[$495 >> 2] = $6; //@line 27322
  $496 = $ReallocAsyncCtx4 + 16 | 0; //@line 27323
  HEAP8[$496 >> 0] = $8; //@line 27324
  $497 = $ReallocAsyncCtx4 + 17 | 0; //@line 27325
  HEAP8[$497 >> 0] = $10; //@line 27326
  $498 = $ReallocAsyncCtx4 + 20 | 0; //@line 27327
  HEAP32[$498 >> 2] = $12; //@line 27328
  $499 = $ReallocAsyncCtx4 + 24 | 0; //@line 27329
  HEAP32[$499 >> 2] = $14; //@line 27330
  $500 = $ReallocAsyncCtx4 + 28 | 0; //@line 27331
  HEAP32[$500 >> 2] = $16; //@line 27332
  $501 = $ReallocAsyncCtx4 + 32 | 0; //@line 27333
  HEAP32[$501 >> 2] = $18; //@line 27334
  $502 = $ReallocAsyncCtx4 + 36 | 0; //@line 27335
  HEAP32[$502 >> 2] = $20; //@line 27336
  $503 = $ReallocAsyncCtx4 + 40 | 0; //@line 27337
  HEAP32[$503 >> 2] = $22; //@line 27338
  $504 = $ReallocAsyncCtx4 + 44 | 0; //@line 27339
  HEAP32[$504 >> 2] = $24; //@line 27340
  $505 = $ReallocAsyncCtx4 + 48 | 0; //@line 27341
  HEAP32[$505 >> 2] = $26; //@line 27342
  $506 = $ReallocAsyncCtx4 + 52 | 0; //@line 27343
  HEAP32[$506 >> 2] = $28; //@line 27344
  $507 = $ReallocAsyncCtx4 + 56 | 0; //@line 27345
  HEAP32[$507 >> 2] = $30; //@line 27346
  $508 = $ReallocAsyncCtx4 + 60 | 0; //@line 27347
  HEAP8[$508 >> 0] = $478; //@line 27348
  $509 = $ReallocAsyncCtx4 + 64 | 0; //@line 27349
  HEAP32[$509 >> 2] = $32; //@line 27350
  $510 = $ReallocAsyncCtx4 + 68 | 0; //@line 27351
  HEAP32[$510 >> 2] = $34; //@line 27352
  $511 = $ReallocAsyncCtx4 + 72 | 0; //@line 27353
  HEAP32[$511 >> 2] = $36; //@line 27354
  $512 = $ReallocAsyncCtx4 + 76 | 0; //@line 27355
  HEAP32[$512 >> 2] = $38; //@line 27356
  $513 = $ReallocAsyncCtx4 + 80 | 0; //@line 27357
  HEAP32[$513 >> 2] = $40; //@line 27358
  $514 = $ReallocAsyncCtx4 + 84 | 0; //@line 27359
  HEAP32[$514 >> 2] = $42; //@line 27360
  $515 = $ReallocAsyncCtx4 + 88 | 0; //@line 27361
  HEAP32[$515 >> 2] = $44; //@line 27362
  $516 = $ReallocAsyncCtx4 + 92 | 0; //@line 27363
  HEAP32[$516 >> 2] = $46; //@line 27364
  $517 = $ReallocAsyncCtx4 + 96 | 0; //@line 27365
  HEAP32[$517 >> 2] = $48; //@line 27366
  $518 = $ReallocAsyncCtx4 + 100 | 0; //@line 27367
  HEAP32[$518 >> 2] = $50; //@line 27368
  $519 = $ReallocAsyncCtx4 + 104 | 0; //@line 27369
  HEAP32[$519 >> 2] = $52; //@line 27370
  $520 = $ReallocAsyncCtx4 + 108 | 0; //@line 27371
  HEAP32[$520 >> 2] = $54; //@line 27372
  $521 = $ReallocAsyncCtx4 + 112 | 0; //@line 27373
  HEAP32[$521 >> 2] = $58; //@line 27374
  $522 = $ReallocAsyncCtx4 + 116 | 0; //@line 27375
  HEAP32[$522 >> 2] = $60; //@line 27376
  $523 = $ReallocAsyncCtx4 + 120 | 0; //@line 27377
  HEAP32[$523 >> 2] = $62; //@line 27378
  $524 = $ReallocAsyncCtx4 + 124 | 0; //@line 27379
  HEAP32[$524 >> 2] = $64; //@line 27380
  $525 = $ReallocAsyncCtx4 + 128 | 0; //@line 27381
  HEAP32[$525 >> 2] = $66; //@line 27382
  $526 = $ReallocAsyncCtx4 + 132 | 0; //@line 27383
  HEAP32[$526 >> 2] = $68; //@line 27384
  $527 = $ReallocAsyncCtx4 + 136 | 0; //@line 27385
  HEAP32[$527 >> 2] = $70; //@line 27386
  $528 = $ReallocAsyncCtx4 + 140 | 0; //@line 27387
  HEAP32[$528 >> 2] = $72; //@line 27388
  $529 = $ReallocAsyncCtx4 + 144 | 0; //@line 27389
  HEAP32[$529 >> 2] = $74; //@line 27390
  $530 = $ReallocAsyncCtx4 + 148 | 0; //@line 27391
  HEAP32[$530 >> 2] = $76; //@line 27392
  $531 = $ReallocAsyncCtx4 + 152 | 0; //@line 27393
  HEAP32[$531 >> 2] = $78; //@line 27394
  $532 = $ReallocAsyncCtx4 + 156 | 0; //@line 27395
  HEAP32[$532 >> 2] = $80; //@line 27396
  $533 = $ReallocAsyncCtx4 + 160 | 0; //@line 27397
  HEAP32[$533 >> 2] = $82; //@line 27398
  $534 = $ReallocAsyncCtx4 + 164 | 0; //@line 27399
  HEAP32[$534 >> 2] = $84; //@line 27400
  $535 = $ReallocAsyncCtx4 + 168 | 0; //@line 27401
  HEAP32[$535 >> 2] = $86; //@line 27402
  $536 = $ReallocAsyncCtx4 + 172 | 0; //@line 27403
  HEAP32[$536 >> 2] = $88; //@line 27404
  $537 = $ReallocAsyncCtx4 + 176 | 0; //@line 27405
  HEAP32[$537 >> 2] = $90; //@line 27406
  $538 = $ReallocAsyncCtx4 + 180 | 0; //@line 27407
  HEAP32[$538 >> 2] = $92; //@line 27408
  $539 = $ReallocAsyncCtx4 + 184 | 0; //@line 27409
  HEAP32[$539 >> 2] = $94; //@line 27410
  $540 = $ReallocAsyncCtx4 + 188 | 0; //@line 27411
  HEAP32[$540 >> 2] = $96; //@line 27412
  $541 = $ReallocAsyncCtx4 + 192 | 0; //@line 27413
  HEAP32[$541 >> 2] = $98; //@line 27414
  $542 = $ReallocAsyncCtx4 + 196 | 0; //@line 27415
  HEAP32[$542 >> 2] = $100; //@line 27416
  $543 = $ReallocAsyncCtx4 + 200 | 0; //@line 27417
  HEAP32[$543 >> 2] = $$096$be; //@line 27418
  $544 = $ReallocAsyncCtx4 + 204 | 0; //@line 27419
  HEAP32[$544 >> 2] = $102; //@line 27420
  $545 = $ReallocAsyncCtx4 + 208 | 0; //@line 27421
  HEAP32[$545 >> 2] = $104; //@line 27422
  $546 = $ReallocAsyncCtx4 + 212 | 0; //@line 27423
  HEAP32[$546 >> 2] = $106; //@line 27424
  $547 = $ReallocAsyncCtx4 + 216 | 0; //@line 27425
  HEAP32[$547 >> 2] = $108; //@line 27426
  $548 = $ReallocAsyncCtx4 + 220 | 0; //@line 27427
  HEAP32[$548 >> 2] = $110; //@line 27428
  $549 = $ReallocAsyncCtx4 + 224 | 0; //@line 27429
  HEAP32[$549 >> 2] = $112; //@line 27430
  $550 = $ReallocAsyncCtx4 + 228 | 0; //@line 27431
  HEAP32[$550 >> 2] = $114; //@line 27432
  $551 = $ReallocAsyncCtx4 + 232 | 0; //@line 27433
  HEAP32[$551 >> 2] = $116; //@line 27434
  $552 = $ReallocAsyncCtx4 + 236 | 0; //@line 27435
  HEAP32[$552 >> 2] = $118; //@line 27436
  $553 = $ReallocAsyncCtx4 + 240 | 0; //@line 27437
  HEAP32[$553 >> 2] = $120; //@line 27438
  $554 = $ReallocAsyncCtx4 + 244 | 0; //@line 27439
  HEAP32[$554 >> 2] = $122; //@line 27440
  $555 = $ReallocAsyncCtx4 + 248 | 0; //@line 27441
  HEAP32[$555 >> 2] = $124; //@line 27442
  $556 = $ReallocAsyncCtx4 + 252 | 0; //@line 27443
  HEAP32[$556 >> 2] = $126; //@line 27444
  $557 = $ReallocAsyncCtx4 + 256 | 0; //@line 27445
  HEAP32[$557 >> 2] = $128; //@line 27446
  $558 = $ReallocAsyncCtx4 + 260 | 0; //@line 27447
  HEAP32[$558 >> 2] = $130; //@line 27448
  $559 = $ReallocAsyncCtx4 + 264 | 0; //@line 27449
  HEAP32[$559 >> 2] = $132; //@line 27450
  $560 = $ReallocAsyncCtx4 + 268 | 0; //@line 27451
  HEAP32[$560 >> 2] = $134; //@line 27452
  sp = STACKTOP; //@line 27453
  return;
 } else if ((label | 0) == 24) {
  HEAP8[$12 >> 0] = HEAP8[$134 + ($137 & 255) >> 0] | 0; //@line 27461
  $578 = $$0$be + 5 << 24 >> 24; //@line 27474
  HEAP32[$132 >> 2] = (HEAPU8[$134 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$134 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$134 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 27482
  $588 = HEAP32[(HEAP32[$122 >> 2] | 0) + 48 >> 2] | 0; //@line 27485
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 27486
  $589 = FUNCTION_TABLE_iii[$588 & 31]($14, $54) | 0; //@line 27487
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 599; //@line 27490
   $590 = $ReallocAsyncCtx5 + 4 | 0; //@line 27491
   HEAP32[$590 >> 2] = $2; //@line 27492
   $591 = $ReallocAsyncCtx5 + 8 | 0; //@line 27493
   HEAP8[$591 >> 0] = $4; //@line 27494
   $592 = $ReallocAsyncCtx5 + 12 | 0; //@line 27495
   HEAP32[$592 >> 2] = $6; //@line 27496
   $593 = $ReallocAsyncCtx5 + 16 | 0; //@line 27497
   HEAP8[$593 >> 0] = $8; //@line 27498
   $594 = $ReallocAsyncCtx5 + 17 | 0; //@line 27499
   HEAP8[$594 >> 0] = $10; //@line 27500
   $595 = $ReallocAsyncCtx5 + 20 | 0; //@line 27501
   HEAP32[$595 >> 2] = $12; //@line 27502
   $596 = $ReallocAsyncCtx5 + 24 | 0; //@line 27503
   HEAP32[$596 >> 2] = $14; //@line 27504
   $597 = $ReallocAsyncCtx5 + 28 | 0; //@line 27505
   HEAP32[$597 >> 2] = $16; //@line 27506
   $598 = $ReallocAsyncCtx5 + 32 | 0; //@line 27507
   HEAP32[$598 >> 2] = $18; //@line 27508
   $599 = $ReallocAsyncCtx5 + 36 | 0; //@line 27509
   HEAP32[$599 >> 2] = $20; //@line 27510
   $600 = $ReallocAsyncCtx5 + 40 | 0; //@line 27511
   HEAP32[$600 >> 2] = $22; //@line 27512
   $601 = $ReallocAsyncCtx5 + 44 | 0; //@line 27513
   HEAP32[$601 >> 2] = $24; //@line 27514
   $602 = $ReallocAsyncCtx5 + 48 | 0; //@line 27515
   HEAP32[$602 >> 2] = $26; //@line 27516
   $603 = $ReallocAsyncCtx5 + 52 | 0; //@line 27517
   HEAP32[$603 >> 2] = $28; //@line 27518
   $604 = $ReallocAsyncCtx5 + 56 | 0; //@line 27519
   HEAP32[$604 >> 2] = $30; //@line 27520
   $605 = $ReallocAsyncCtx5 + 60 | 0; //@line 27521
   HEAP32[$605 >> 2] = $32; //@line 27522
   $606 = $ReallocAsyncCtx5 + 64 | 0; //@line 27523
   HEAP32[$606 >> 2] = $34; //@line 27524
   $607 = $ReallocAsyncCtx5 + 68 | 0; //@line 27525
   HEAP32[$607 >> 2] = $36; //@line 27526
   $608 = $ReallocAsyncCtx5 + 72 | 0; //@line 27527
   HEAP32[$608 >> 2] = $38; //@line 27528
   $609 = $ReallocAsyncCtx5 + 76 | 0; //@line 27529
   HEAP32[$609 >> 2] = $40; //@line 27530
   $610 = $ReallocAsyncCtx5 + 80 | 0; //@line 27531
   HEAP32[$610 >> 2] = $42; //@line 27532
   $611 = $ReallocAsyncCtx5 + 84 | 0; //@line 27533
   HEAP32[$611 >> 2] = $44; //@line 27534
   $612 = $ReallocAsyncCtx5 + 88 | 0; //@line 27535
   HEAP32[$612 >> 2] = $46; //@line 27536
   $613 = $ReallocAsyncCtx5 + 92 | 0; //@line 27537
   HEAP32[$613 >> 2] = $48; //@line 27538
   $614 = $ReallocAsyncCtx5 + 96 | 0; //@line 27539
   HEAP32[$614 >> 2] = $50; //@line 27540
   $615 = $ReallocAsyncCtx5 + 100 | 0; //@line 27541
   HEAP32[$615 >> 2] = $52; //@line 27542
   $616 = $ReallocAsyncCtx5 + 104 | 0; //@line 27543
   HEAP32[$616 >> 2] = $54; //@line 27544
   $617 = $ReallocAsyncCtx5 + 108 | 0; //@line 27545
   HEAP8[$617 >> 0] = $578; //@line 27546
   $618 = $ReallocAsyncCtx5 + 112 | 0; //@line 27547
   HEAP32[$618 >> 2] = $58; //@line 27548
   $619 = $ReallocAsyncCtx5 + 116 | 0; //@line 27549
   HEAP32[$619 >> 2] = $60; //@line 27550
   $620 = $ReallocAsyncCtx5 + 120 | 0; //@line 27551
   HEAP32[$620 >> 2] = $62; //@line 27552
   $621 = $ReallocAsyncCtx5 + 124 | 0; //@line 27553
   HEAP32[$621 >> 2] = $64; //@line 27554
   $622 = $ReallocAsyncCtx5 + 128 | 0; //@line 27555
   HEAP32[$622 >> 2] = $66; //@line 27556
   $623 = $ReallocAsyncCtx5 + 132 | 0; //@line 27557
   HEAP32[$623 >> 2] = $68; //@line 27558
   $624 = $ReallocAsyncCtx5 + 136 | 0; //@line 27559
   HEAP32[$624 >> 2] = $70; //@line 27560
   $625 = $ReallocAsyncCtx5 + 140 | 0; //@line 27561
   HEAP32[$625 >> 2] = $72; //@line 27562
   $626 = $ReallocAsyncCtx5 + 144 | 0; //@line 27563
   HEAP32[$626 >> 2] = $74; //@line 27564
   $627 = $ReallocAsyncCtx5 + 148 | 0; //@line 27565
   HEAP32[$627 >> 2] = $76; //@line 27566
   $628 = $ReallocAsyncCtx5 + 152 | 0; //@line 27567
   HEAP32[$628 >> 2] = $78; //@line 27568
   $629 = $ReallocAsyncCtx5 + 156 | 0; //@line 27569
   HEAP32[$629 >> 2] = $80; //@line 27570
   $630 = $ReallocAsyncCtx5 + 160 | 0; //@line 27571
   HEAP32[$630 >> 2] = $82; //@line 27572
   $631 = $ReallocAsyncCtx5 + 164 | 0; //@line 27573
   HEAP32[$631 >> 2] = $84; //@line 27574
   $632 = $ReallocAsyncCtx5 + 168 | 0; //@line 27575
   HEAP32[$632 >> 2] = $86; //@line 27576
   $633 = $ReallocAsyncCtx5 + 172 | 0; //@line 27577
   HEAP32[$633 >> 2] = $88; //@line 27578
   $634 = $ReallocAsyncCtx5 + 176 | 0; //@line 27579
   HEAP32[$634 >> 2] = $90; //@line 27580
   $635 = $ReallocAsyncCtx5 + 180 | 0; //@line 27581
   HEAP32[$635 >> 2] = $92; //@line 27582
   $636 = $ReallocAsyncCtx5 + 184 | 0; //@line 27583
   HEAP32[$636 >> 2] = $94; //@line 27584
   $637 = $ReallocAsyncCtx5 + 188 | 0; //@line 27585
   HEAP32[$637 >> 2] = $96; //@line 27586
   $638 = $ReallocAsyncCtx5 + 192 | 0; //@line 27587
   HEAP32[$638 >> 2] = $98; //@line 27588
   $639 = $ReallocAsyncCtx5 + 196 | 0; //@line 27589
   HEAP32[$639 >> 2] = $100; //@line 27590
   $640 = $ReallocAsyncCtx5 + 200 | 0; //@line 27591
   HEAP32[$640 >> 2] = $102; //@line 27592
   $641 = $ReallocAsyncCtx5 + 204 | 0; //@line 27593
   HEAP32[$641 >> 2] = $104; //@line 27594
   $642 = $ReallocAsyncCtx5 + 208 | 0; //@line 27595
   HEAP32[$642 >> 2] = $106; //@line 27596
   $643 = $ReallocAsyncCtx5 + 212 | 0; //@line 27597
   HEAP32[$643 >> 2] = $108; //@line 27598
   $644 = $ReallocAsyncCtx5 + 216 | 0; //@line 27599
   HEAP32[$644 >> 2] = $110; //@line 27600
   $645 = $ReallocAsyncCtx5 + 220 | 0; //@line 27601
   HEAP32[$645 >> 2] = $112; //@line 27602
   $646 = $ReallocAsyncCtx5 + 224 | 0; //@line 27603
   HEAP32[$646 >> 2] = $114; //@line 27604
   $647 = $ReallocAsyncCtx5 + 228 | 0; //@line 27605
   HEAP32[$647 >> 2] = $116; //@line 27606
   $648 = $ReallocAsyncCtx5 + 232 | 0; //@line 27607
   HEAP32[$648 >> 2] = $118; //@line 27608
   $649 = $ReallocAsyncCtx5 + 236 | 0; //@line 27609
   HEAP32[$649 >> 2] = $120; //@line 27610
   $650 = $ReallocAsyncCtx5 + 240 | 0; //@line 27611
   HEAP32[$650 >> 2] = $122; //@line 27612
   $651 = $ReallocAsyncCtx5 + 244 | 0; //@line 27613
   HEAP32[$651 >> 2] = $124; //@line 27614
   $652 = $ReallocAsyncCtx5 + 248 | 0; //@line 27615
   HEAP32[$652 >> 2] = $126; //@line 27616
   $653 = $ReallocAsyncCtx5 + 252 | 0; //@line 27617
   HEAP32[$653 >> 2] = $128; //@line 27618
   $654 = $ReallocAsyncCtx5 + 256 | 0; //@line 27619
   HEAP32[$654 >> 2] = $130; //@line 27620
   $655 = $ReallocAsyncCtx5 + 260 | 0; //@line 27621
   HEAP32[$655 >> 2] = $132; //@line 27622
   $656 = $ReallocAsyncCtx5 + 264 | 0; //@line 27623
   HEAP32[$656 >> 2] = $134; //@line 27624
   sp = STACKTOP; //@line 27625
   return;
  }
  HEAP8[___async_retval >> 0] = $589; //@line 27629
  ___async_unwind = 0; //@line 27630
  HEAP32[$ReallocAsyncCtx5 >> 2] = 599; //@line 27631
  $590 = $ReallocAsyncCtx5 + 4 | 0; //@line 27632
  HEAP32[$590 >> 2] = $2; //@line 27633
  $591 = $ReallocAsyncCtx5 + 8 | 0; //@line 27634
  HEAP8[$591 >> 0] = $4; //@line 27635
  $592 = $ReallocAsyncCtx5 + 12 | 0; //@line 27636
  HEAP32[$592 >> 2] = $6; //@line 27637
  $593 = $ReallocAsyncCtx5 + 16 | 0; //@line 27638
  HEAP8[$593 >> 0] = $8; //@line 27639
  $594 = $ReallocAsyncCtx5 + 17 | 0; //@line 27640
  HEAP8[$594 >> 0] = $10; //@line 27641
  $595 = $ReallocAsyncCtx5 + 20 | 0; //@line 27642
  HEAP32[$595 >> 2] = $12; //@line 27643
  $596 = $ReallocAsyncCtx5 + 24 | 0; //@line 27644
  HEAP32[$596 >> 2] = $14; //@line 27645
  $597 = $ReallocAsyncCtx5 + 28 | 0; //@line 27646
  HEAP32[$597 >> 2] = $16; //@line 27647
  $598 = $ReallocAsyncCtx5 + 32 | 0; //@line 27648
  HEAP32[$598 >> 2] = $18; //@line 27649
  $599 = $ReallocAsyncCtx5 + 36 | 0; //@line 27650
  HEAP32[$599 >> 2] = $20; //@line 27651
  $600 = $ReallocAsyncCtx5 + 40 | 0; //@line 27652
  HEAP32[$600 >> 2] = $22; //@line 27653
  $601 = $ReallocAsyncCtx5 + 44 | 0; //@line 27654
  HEAP32[$601 >> 2] = $24; //@line 27655
  $602 = $ReallocAsyncCtx5 + 48 | 0; //@line 27656
  HEAP32[$602 >> 2] = $26; //@line 27657
  $603 = $ReallocAsyncCtx5 + 52 | 0; //@line 27658
  HEAP32[$603 >> 2] = $28; //@line 27659
  $604 = $ReallocAsyncCtx5 + 56 | 0; //@line 27660
  HEAP32[$604 >> 2] = $30; //@line 27661
  $605 = $ReallocAsyncCtx5 + 60 | 0; //@line 27662
  HEAP32[$605 >> 2] = $32; //@line 27663
  $606 = $ReallocAsyncCtx5 + 64 | 0; //@line 27664
  HEAP32[$606 >> 2] = $34; //@line 27665
  $607 = $ReallocAsyncCtx5 + 68 | 0; //@line 27666
  HEAP32[$607 >> 2] = $36; //@line 27667
  $608 = $ReallocAsyncCtx5 + 72 | 0; //@line 27668
  HEAP32[$608 >> 2] = $38; //@line 27669
  $609 = $ReallocAsyncCtx5 + 76 | 0; //@line 27670
  HEAP32[$609 >> 2] = $40; //@line 27671
  $610 = $ReallocAsyncCtx5 + 80 | 0; //@line 27672
  HEAP32[$610 >> 2] = $42; //@line 27673
  $611 = $ReallocAsyncCtx5 + 84 | 0; //@line 27674
  HEAP32[$611 >> 2] = $44; //@line 27675
  $612 = $ReallocAsyncCtx5 + 88 | 0; //@line 27676
  HEAP32[$612 >> 2] = $46; //@line 27677
  $613 = $ReallocAsyncCtx5 + 92 | 0; //@line 27678
  HEAP32[$613 >> 2] = $48; //@line 27679
  $614 = $ReallocAsyncCtx5 + 96 | 0; //@line 27680
  HEAP32[$614 >> 2] = $50; //@line 27681
  $615 = $ReallocAsyncCtx5 + 100 | 0; //@line 27682
  HEAP32[$615 >> 2] = $52; //@line 27683
  $616 = $ReallocAsyncCtx5 + 104 | 0; //@line 27684
  HEAP32[$616 >> 2] = $54; //@line 27685
  $617 = $ReallocAsyncCtx5 + 108 | 0; //@line 27686
  HEAP8[$617 >> 0] = $578; //@line 27687
  $618 = $ReallocAsyncCtx5 + 112 | 0; //@line 27688
  HEAP32[$618 >> 2] = $58; //@line 27689
  $619 = $ReallocAsyncCtx5 + 116 | 0; //@line 27690
  HEAP32[$619 >> 2] = $60; //@line 27691
  $620 = $ReallocAsyncCtx5 + 120 | 0; //@line 27692
  HEAP32[$620 >> 2] = $62; //@line 27693
  $621 = $ReallocAsyncCtx5 + 124 | 0; //@line 27694
  HEAP32[$621 >> 2] = $64; //@line 27695
  $622 = $ReallocAsyncCtx5 + 128 | 0; //@line 27696
  HEAP32[$622 >> 2] = $66; //@line 27697
  $623 = $ReallocAsyncCtx5 + 132 | 0; //@line 27698
  HEAP32[$623 >> 2] = $68; //@line 27699
  $624 = $ReallocAsyncCtx5 + 136 | 0; //@line 27700
  HEAP32[$624 >> 2] = $70; //@line 27701
  $625 = $ReallocAsyncCtx5 + 140 | 0; //@line 27702
  HEAP32[$625 >> 2] = $72; //@line 27703
  $626 = $ReallocAsyncCtx5 + 144 | 0; //@line 27704
  HEAP32[$626 >> 2] = $74; //@line 27705
  $627 = $ReallocAsyncCtx5 + 148 | 0; //@line 27706
  HEAP32[$627 >> 2] = $76; //@line 27707
  $628 = $ReallocAsyncCtx5 + 152 | 0; //@line 27708
  HEAP32[$628 >> 2] = $78; //@line 27709
  $629 = $ReallocAsyncCtx5 + 156 | 0; //@line 27710
  HEAP32[$629 >> 2] = $80; //@line 27711
  $630 = $ReallocAsyncCtx5 + 160 | 0; //@line 27712
  HEAP32[$630 >> 2] = $82; //@line 27713
  $631 = $ReallocAsyncCtx5 + 164 | 0; //@line 27714
  HEAP32[$631 >> 2] = $84; //@line 27715
  $632 = $ReallocAsyncCtx5 + 168 | 0; //@line 27716
  HEAP32[$632 >> 2] = $86; //@line 27717
  $633 = $ReallocAsyncCtx5 + 172 | 0; //@line 27718
  HEAP32[$633 >> 2] = $88; //@line 27719
  $634 = $ReallocAsyncCtx5 + 176 | 0; //@line 27720
  HEAP32[$634 >> 2] = $90; //@line 27721
  $635 = $ReallocAsyncCtx5 + 180 | 0; //@line 27722
  HEAP32[$635 >> 2] = $92; //@line 27723
  $636 = $ReallocAsyncCtx5 + 184 | 0; //@line 27724
  HEAP32[$636 >> 2] = $94; //@line 27725
  $637 = $ReallocAsyncCtx5 + 188 | 0; //@line 27726
  HEAP32[$637 >> 2] = $96; //@line 27727
  $638 = $ReallocAsyncCtx5 + 192 | 0; //@line 27728
  HEAP32[$638 >> 2] = $98; //@line 27729
  $639 = $ReallocAsyncCtx5 + 196 | 0; //@line 27730
  HEAP32[$639 >> 2] = $100; //@line 27731
  $640 = $ReallocAsyncCtx5 + 200 | 0; //@line 27732
  HEAP32[$640 >> 2] = $102; //@line 27733
  $641 = $ReallocAsyncCtx5 + 204 | 0; //@line 27734
  HEAP32[$641 >> 2] = $104; //@line 27735
  $642 = $ReallocAsyncCtx5 + 208 | 0; //@line 27736
  HEAP32[$642 >> 2] = $106; //@line 27737
  $643 = $ReallocAsyncCtx5 + 212 | 0; //@line 27738
  HEAP32[$643 >> 2] = $108; //@line 27739
  $644 = $ReallocAsyncCtx5 + 216 | 0; //@line 27740
  HEAP32[$644 >> 2] = $110; //@line 27741
  $645 = $ReallocAsyncCtx5 + 220 | 0; //@line 27742
  HEAP32[$645 >> 2] = $112; //@line 27743
  $646 = $ReallocAsyncCtx5 + 224 | 0; //@line 27744
  HEAP32[$646 >> 2] = $114; //@line 27745
  $647 = $ReallocAsyncCtx5 + 228 | 0; //@line 27746
  HEAP32[$647 >> 2] = $116; //@line 27747
  $648 = $ReallocAsyncCtx5 + 232 | 0; //@line 27748
  HEAP32[$648 >> 2] = $118; //@line 27749
  $649 = $ReallocAsyncCtx5 + 236 | 0; //@line 27750
  HEAP32[$649 >> 2] = $120; //@line 27751
  $650 = $ReallocAsyncCtx5 + 240 | 0; //@line 27752
  HEAP32[$650 >> 2] = $122; //@line 27753
  $651 = $ReallocAsyncCtx5 + 244 | 0; //@line 27754
  HEAP32[$651 >> 2] = $124; //@line 27755
  $652 = $ReallocAsyncCtx5 + 248 | 0; //@line 27756
  HEAP32[$652 >> 2] = $126; //@line 27757
  $653 = $ReallocAsyncCtx5 + 252 | 0; //@line 27758
  HEAP32[$653 >> 2] = $128; //@line 27759
  $654 = $ReallocAsyncCtx5 + 256 | 0; //@line 27760
  HEAP32[$654 >> 2] = $130; //@line 27761
  $655 = $ReallocAsyncCtx5 + 260 | 0; //@line 27762
  HEAP32[$655 >> 2] = $132; //@line 27763
  $656 = $ReallocAsyncCtx5 + 264 | 0; //@line 27764
  HEAP32[$656 >> 2] = $134; //@line 27765
  sp = STACKTOP; //@line 27766
  return;
 } else if ((label | 0) == 31) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 27771
  return;
 }
}
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 7310
 STACKTOP = STACKTOP + 16 | 0; //@line 7311
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7311
 $1 = sp; //@line 7312
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 7319
   $7 = $6 >>> 3; //@line 7320
   $8 = HEAP32[5896] | 0; //@line 7321
   $9 = $8 >>> $7; //@line 7322
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 7328
    $16 = 23624 + ($14 << 1 << 2) | 0; //@line 7330
    $17 = $16 + 8 | 0; //@line 7331
    $18 = HEAP32[$17 >> 2] | 0; //@line 7332
    $19 = $18 + 8 | 0; //@line 7333
    $20 = HEAP32[$19 >> 2] | 0; //@line 7334
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[5896] = $8 & ~(1 << $14); //@line 7341
     } else {
      if ((HEAP32[5900] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 7346
      }
      $27 = $20 + 12 | 0; //@line 7349
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 7353
       HEAP32[$17 >> 2] = $20; //@line 7354
       break;
      } else {
       _abort(); //@line 7357
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 7362
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 7365
    $34 = $18 + $30 + 4 | 0; //@line 7367
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 7370
    $$0 = $19; //@line 7371
    STACKTOP = sp; //@line 7372
    return $$0 | 0; //@line 7372
   }
   $37 = HEAP32[5898] | 0; //@line 7374
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 7380
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 7383
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 7386
     $49 = $47 >>> 12 & 16; //@line 7388
     $50 = $47 >>> $49; //@line 7389
     $52 = $50 >>> 5 & 8; //@line 7391
     $54 = $50 >>> $52; //@line 7393
     $56 = $54 >>> 2 & 4; //@line 7395
     $58 = $54 >>> $56; //@line 7397
     $60 = $58 >>> 1 & 2; //@line 7399
     $62 = $58 >>> $60; //@line 7401
     $64 = $62 >>> 1 & 1; //@line 7403
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 7406
     $69 = 23624 + ($67 << 1 << 2) | 0; //@line 7408
     $70 = $69 + 8 | 0; //@line 7409
     $71 = HEAP32[$70 >> 2] | 0; //@line 7410
     $72 = $71 + 8 | 0; //@line 7411
     $73 = HEAP32[$72 >> 2] | 0; //@line 7412
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 7418
       HEAP32[5896] = $77; //@line 7419
       $98 = $77; //@line 7420
      } else {
       if ((HEAP32[5900] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 7425
       }
       $80 = $73 + 12 | 0; //@line 7428
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 7432
        HEAP32[$70 >> 2] = $73; //@line 7433
        $98 = $8; //@line 7434
        break;
       } else {
        _abort(); //@line 7437
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 7442
     $84 = $83 - $6 | 0; //@line 7443
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 7446
     $87 = $71 + $6 | 0; //@line 7447
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 7450
     HEAP32[$71 + $83 >> 2] = $84; //@line 7452
     if ($37 | 0) {
      $92 = HEAP32[5901] | 0; //@line 7455
      $93 = $37 >>> 3; //@line 7456
      $95 = 23624 + ($93 << 1 << 2) | 0; //@line 7458
      $96 = 1 << $93; //@line 7459
      if (!($98 & $96)) {
       HEAP32[5896] = $98 | $96; //@line 7464
       $$0199 = $95; //@line 7466
       $$pre$phiZ2D = $95 + 8 | 0; //@line 7466
      } else {
       $101 = $95 + 8 | 0; //@line 7468
       $102 = HEAP32[$101 >> 2] | 0; //@line 7469
       if ((HEAP32[5900] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 7473
       } else {
        $$0199 = $102; //@line 7476
        $$pre$phiZ2D = $101; //@line 7476
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 7479
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 7481
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 7483
      HEAP32[$92 + 12 >> 2] = $95; //@line 7485
     }
     HEAP32[5898] = $84; //@line 7487
     HEAP32[5901] = $87; //@line 7488
     $$0 = $72; //@line 7489
     STACKTOP = sp; //@line 7490
     return $$0 | 0; //@line 7490
    }
    $108 = HEAP32[5897] | 0; //@line 7492
    if (!$108) {
     $$0197 = $6; //@line 7495
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 7499
     $114 = $112 >>> 12 & 16; //@line 7501
     $115 = $112 >>> $114; //@line 7502
     $117 = $115 >>> 5 & 8; //@line 7504
     $119 = $115 >>> $117; //@line 7506
     $121 = $119 >>> 2 & 4; //@line 7508
     $123 = $119 >>> $121; //@line 7510
     $125 = $123 >>> 1 & 2; //@line 7512
     $127 = $123 >>> $125; //@line 7514
     $129 = $127 >>> 1 & 1; //@line 7516
     $134 = HEAP32[23888 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 7521
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 7525
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 7531
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 7534
      $$0193$lcssa$i = $138; //@line 7534
     } else {
      $$01926$i = $134; //@line 7536
      $$01935$i = $138; //@line 7536
      $146 = $143; //@line 7536
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 7541
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 7542
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 7543
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 7544
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 7550
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 7553
        $$0193$lcssa$i = $$$0193$i; //@line 7553
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 7556
        $$01935$i = $$$0193$i; //@line 7556
       }
      }
     }
     $157 = HEAP32[5900] | 0; //@line 7560
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 7563
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 7566
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 7569
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 7573
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 7575
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 7579
       $176 = HEAP32[$175 >> 2] | 0; //@line 7580
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 7583
        $179 = HEAP32[$178 >> 2] | 0; //@line 7584
        if (!$179) {
         $$3$i = 0; //@line 7587
         break;
        } else {
         $$1196$i = $179; //@line 7590
         $$1198$i = $178; //@line 7590
        }
       } else {
        $$1196$i = $176; //@line 7593
        $$1198$i = $175; //@line 7593
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 7596
        $182 = HEAP32[$181 >> 2] | 0; //@line 7597
        if ($182 | 0) {
         $$1196$i = $182; //@line 7600
         $$1198$i = $181; //@line 7600
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 7603
        $185 = HEAP32[$184 >> 2] | 0; //@line 7604
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 7609
         $$1198$i = $184; //@line 7609
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 7614
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 7617
        $$3$i = $$1196$i; //@line 7618
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 7623
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 7626
       }
       $169 = $167 + 12 | 0; //@line 7629
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 7633
       }
       $172 = $164 + 8 | 0; //@line 7636
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 7640
        HEAP32[$172 >> 2] = $167; //@line 7641
        $$3$i = $164; //@line 7642
        break;
       } else {
        _abort(); //@line 7645
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 7654
       $191 = 23888 + ($190 << 2) | 0; //@line 7655
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 7660
         if (!$$3$i) {
          HEAP32[5897] = $108 & ~(1 << $190); //@line 7666
          break L73;
         }
        } else {
         if ((HEAP32[5900] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 7673
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 7681
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[5900] | 0; //@line 7691
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 7694
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 7698
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 7700
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 7706
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 7710
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 7712
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 7718
       if ($214 | 0) {
        if ((HEAP32[5900] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 7724
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 7728
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 7730
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 7738
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 7741
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 7743
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 7746
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 7750
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 7753
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 7755
      if ($37 | 0) {
       $234 = HEAP32[5901] | 0; //@line 7758
       $235 = $37 >>> 3; //@line 7759
       $237 = 23624 + ($235 << 1 << 2) | 0; //@line 7761
       $238 = 1 << $235; //@line 7762
       if (!($8 & $238)) {
        HEAP32[5896] = $8 | $238; //@line 7767
        $$0189$i = $237; //@line 7769
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 7769
       } else {
        $242 = $237 + 8 | 0; //@line 7771
        $243 = HEAP32[$242 >> 2] | 0; //@line 7772
        if ((HEAP32[5900] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 7776
        } else {
         $$0189$i = $243; //@line 7779
         $$pre$phi$iZ2D = $242; //@line 7779
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 7782
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 7784
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 7786
       HEAP32[$234 + 12 >> 2] = $237; //@line 7788
      }
      HEAP32[5898] = $$0193$lcssa$i; //@line 7790
      HEAP32[5901] = $159; //@line 7791
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 7794
     STACKTOP = sp; //@line 7795
     return $$0 | 0; //@line 7795
    }
   } else {
    $$0197 = $6; //@line 7798
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 7803
   } else {
    $251 = $0 + 11 | 0; //@line 7805
    $252 = $251 & -8; //@line 7806
    $253 = HEAP32[5897] | 0; //@line 7807
    if (!$253) {
     $$0197 = $252; //@line 7810
    } else {
     $255 = 0 - $252 | 0; //@line 7812
     $256 = $251 >>> 8; //@line 7813
     if (!$256) {
      $$0358$i = 0; //@line 7816
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 7820
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 7824
       $262 = $256 << $261; //@line 7825
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 7828
       $267 = $262 << $265; //@line 7830
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 7833
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 7838
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 7844
      }
     }
     $282 = HEAP32[23888 + ($$0358$i << 2) >> 2] | 0; //@line 7848
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 7852
       $$3$i203 = 0; //@line 7852
       $$3350$i = $255; //@line 7852
       label = 81; //@line 7853
      } else {
       $$0342$i = 0; //@line 7860
       $$0347$i = $255; //@line 7860
       $$0353$i = $282; //@line 7860
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 7860
       $$0362$i = 0; //@line 7860
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 7865
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 7870
          $$435113$i = 0; //@line 7870
          $$435712$i = $$0353$i; //@line 7870
          label = 85; //@line 7871
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 7874
          $$1348$i = $292; //@line 7874
         }
        } else {
         $$1343$i = $$0342$i; //@line 7877
         $$1348$i = $$0347$i; //@line 7877
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 7880
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 7883
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 7887
        $302 = ($$0353$i | 0) == 0; //@line 7888
        if ($302) {
         $$2355$i = $$1363$i; //@line 7893
         $$3$i203 = $$1343$i; //@line 7893
         $$3350$i = $$1348$i; //@line 7893
         label = 81; //@line 7894
         break;
        } else {
         $$0342$i = $$1343$i; //@line 7897
         $$0347$i = $$1348$i; //@line 7897
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 7897
         $$0362$i = $$1363$i; //@line 7897
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 7907
       $309 = $253 & ($306 | 0 - $306); //@line 7910
       if (!$309) {
        $$0197 = $252; //@line 7913
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 7918
       $315 = $313 >>> 12 & 16; //@line 7920
       $316 = $313 >>> $315; //@line 7921
       $318 = $316 >>> 5 & 8; //@line 7923
       $320 = $316 >>> $318; //@line 7925
       $322 = $320 >>> 2 & 4; //@line 7927
       $324 = $320 >>> $322; //@line 7929
       $326 = $324 >>> 1 & 2; //@line 7931
       $328 = $324 >>> $326; //@line 7933
       $330 = $328 >>> 1 & 1; //@line 7935
       $$4$ph$i = 0; //@line 7941
       $$4357$ph$i = HEAP32[23888 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 7941
      } else {
       $$4$ph$i = $$3$i203; //@line 7943
       $$4357$ph$i = $$2355$i; //@line 7943
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 7947
       $$4351$lcssa$i = $$3350$i; //@line 7947
      } else {
       $$414$i = $$4$ph$i; //@line 7949
       $$435113$i = $$3350$i; //@line 7949
       $$435712$i = $$4357$ph$i; //@line 7949
       label = 85; //@line 7950
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 7955
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 7959
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 7960
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 7961
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 7962
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 7968
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 7971
        $$4351$lcssa$i = $$$4351$i; //@line 7971
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 7974
        $$435113$i = $$$4351$i; //@line 7974
        label = 85; //@line 7975
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 7981
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[5898] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[5900] | 0; //@line 7987
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 7990
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 7993
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 7996
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 8000
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 8002
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 8006
         $371 = HEAP32[$370 >> 2] | 0; //@line 8007
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 8010
          $374 = HEAP32[$373 >> 2] | 0; //@line 8011
          if (!$374) {
           $$3372$i = 0; //@line 8014
           break;
          } else {
           $$1370$i = $374; //@line 8017
           $$1374$i = $373; //@line 8017
          }
         } else {
          $$1370$i = $371; //@line 8020
          $$1374$i = $370; //@line 8020
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 8023
          $377 = HEAP32[$376 >> 2] | 0; //@line 8024
          if ($377 | 0) {
           $$1370$i = $377; //@line 8027
           $$1374$i = $376; //@line 8027
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 8030
          $380 = HEAP32[$379 >> 2] | 0; //@line 8031
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 8036
           $$1374$i = $379; //@line 8036
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 8041
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 8044
          $$3372$i = $$1370$i; //@line 8045
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 8050
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 8053
         }
         $364 = $362 + 12 | 0; //@line 8056
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 8060
         }
         $367 = $359 + 8 | 0; //@line 8063
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 8067
          HEAP32[$367 >> 2] = $362; //@line 8068
          $$3372$i = $359; //@line 8069
          break;
         } else {
          _abort(); //@line 8072
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 8080
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 8083
         $386 = 23888 + ($385 << 2) | 0; //@line 8084
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 8089
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 8094
            HEAP32[5897] = $391; //@line 8095
            $475 = $391; //@line 8096
            break L164;
           }
          } else {
           if ((HEAP32[5900] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 8103
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 8111
            if (!$$3372$i) {
             $475 = $253; //@line 8114
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[5900] | 0; //@line 8122
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 8125
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 8129
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 8131
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 8137
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 8141
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 8143
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 8149
         if (!$409) {
          $475 = $253; //@line 8152
         } else {
          if ((HEAP32[5900] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 8157
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 8161
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 8163
           $475 = $253; //@line 8164
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 8173
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 8176
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 8178
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 8181
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 8185
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 8188
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 8190
         $428 = $$4351$lcssa$i >>> 3; //@line 8191
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 23624 + ($428 << 1 << 2) | 0; //@line 8195
          $432 = HEAP32[5896] | 0; //@line 8196
          $433 = 1 << $428; //@line 8197
          if (!($432 & $433)) {
           HEAP32[5896] = $432 | $433; //@line 8202
           $$0368$i = $431; //@line 8204
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 8204
          } else {
           $437 = $431 + 8 | 0; //@line 8206
           $438 = HEAP32[$437 >> 2] | 0; //@line 8207
           if ((HEAP32[5900] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 8211
           } else {
            $$0368$i = $438; //@line 8214
            $$pre$phi$i211Z2D = $437; //@line 8214
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 8217
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 8219
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 8221
          HEAP32[$354 + 12 >> 2] = $431; //@line 8223
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 8226
         if (!$444) {
          $$0361$i = 0; //@line 8229
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 8233
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 8237
           $450 = $444 << $449; //@line 8238
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 8241
           $455 = $450 << $453; //@line 8243
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 8246
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 8251
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 8257
          }
         }
         $469 = 23888 + ($$0361$i << 2) | 0; //@line 8260
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 8262
         $471 = $354 + 16 | 0; //@line 8263
         HEAP32[$471 + 4 >> 2] = 0; //@line 8265
         HEAP32[$471 >> 2] = 0; //@line 8266
         $473 = 1 << $$0361$i; //@line 8267
         if (!($475 & $473)) {
          HEAP32[5897] = $475 | $473; //@line 8272
          HEAP32[$469 >> 2] = $354; //@line 8273
          HEAP32[$354 + 24 >> 2] = $469; //@line 8275
          HEAP32[$354 + 12 >> 2] = $354; //@line 8277
          HEAP32[$354 + 8 >> 2] = $354; //@line 8279
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 8288
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 8288
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 8295
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 8299
          $494 = HEAP32[$492 >> 2] | 0; //@line 8301
          if (!$494) {
           label = 136; //@line 8304
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 8307
           $$0345$i = $494; //@line 8307
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[5900] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 8314
          } else {
           HEAP32[$492 >> 2] = $354; //@line 8317
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 8319
           HEAP32[$354 + 12 >> 2] = $354; //@line 8321
           HEAP32[$354 + 8 >> 2] = $354; //@line 8323
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 8328
          $502 = HEAP32[$501 >> 2] | 0; //@line 8329
          $503 = HEAP32[5900] | 0; //@line 8330
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 8336
           HEAP32[$501 >> 2] = $354; //@line 8337
           HEAP32[$354 + 8 >> 2] = $502; //@line 8339
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 8341
           HEAP32[$354 + 24 >> 2] = 0; //@line 8343
           break;
          } else {
           _abort(); //@line 8346
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 8353
       STACKTOP = sp; //@line 8354
       return $$0 | 0; //@line 8354
      } else {
       $$0197 = $252; //@line 8356
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[5898] | 0; //@line 8363
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 8366
  $515 = HEAP32[5901] | 0; //@line 8367
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 8370
   HEAP32[5901] = $517; //@line 8371
   HEAP32[5898] = $514; //@line 8372
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 8375
   HEAP32[$515 + $512 >> 2] = $514; //@line 8377
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 8380
  } else {
   HEAP32[5898] = 0; //@line 8382
   HEAP32[5901] = 0; //@line 8383
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 8386
   $526 = $515 + $512 + 4 | 0; //@line 8388
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 8391
  }
  $$0 = $515 + 8 | 0; //@line 8394
  STACKTOP = sp; //@line 8395
  return $$0 | 0; //@line 8395
 }
 $530 = HEAP32[5899] | 0; //@line 8397
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 8400
  HEAP32[5899] = $532; //@line 8401
  $533 = HEAP32[5902] | 0; //@line 8402
  $534 = $533 + $$0197 | 0; //@line 8403
  HEAP32[5902] = $534; //@line 8404
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 8407
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 8410
  $$0 = $533 + 8 | 0; //@line 8412
  STACKTOP = sp; //@line 8413
  return $$0 | 0; //@line 8413
 }
 if (!(HEAP32[6014] | 0)) {
  HEAP32[6016] = 4096; //@line 8418
  HEAP32[6015] = 4096; //@line 8419
  HEAP32[6017] = -1; //@line 8420
  HEAP32[6018] = -1; //@line 8421
  HEAP32[6019] = 0; //@line 8422
  HEAP32[6007] = 0; //@line 8423
  HEAP32[6014] = $1 & -16 ^ 1431655768; //@line 8427
  $548 = 4096; //@line 8428
 } else {
  $548 = HEAP32[6016] | 0; //@line 8431
 }
 $545 = $$0197 + 48 | 0; //@line 8433
 $546 = $$0197 + 47 | 0; //@line 8434
 $547 = $548 + $546 | 0; //@line 8435
 $549 = 0 - $548 | 0; //@line 8436
 $550 = $547 & $549; //@line 8437
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 8440
  STACKTOP = sp; //@line 8441
  return $$0 | 0; //@line 8441
 }
 $552 = HEAP32[6006] | 0; //@line 8443
 if ($552 | 0) {
  $554 = HEAP32[6004] | 0; //@line 8446
  $555 = $554 + $550 | 0; //@line 8447
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 8452
   STACKTOP = sp; //@line 8453
   return $$0 | 0; //@line 8453
  }
 }
 L244 : do {
  if (!(HEAP32[6007] & 4)) {
   $561 = HEAP32[5902] | 0; //@line 8461
   L246 : do {
    if (!$561) {
     label = 163; //@line 8465
    } else {
     $$0$i$i = 24032; //@line 8467
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 8469
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 8472
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 8481
      if (!$570) {
       label = 163; //@line 8484
       break L246;
      } else {
       $$0$i$i = $570; //@line 8487
      }
     }
     $595 = $547 - $530 & $549; //@line 8491
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 8494
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 8502
       } else {
        $$723947$i = $595; //@line 8504
        $$748$i = $597; //@line 8504
        label = 180; //@line 8505
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 8509
       $$2253$ph$i = $595; //@line 8509
       label = 171; //@line 8510
      }
     } else {
      $$2234243136$i = 0; //@line 8513
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 8519
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 8522
     } else {
      $574 = $572; //@line 8524
      $575 = HEAP32[6015] | 0; //@line 8525
      $576 = $575 + -1 | 0; //@line 8526
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 8534
      $584 = HEAP32[6004] | 0; //@line 8535
      $585 = $$$i + $584 | 0; //@line 8536
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[6006] | 0; //@line 8541
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 8548
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 8552
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 8555
        $$748$i = $572; //@line 8555
        label = 180; //@line 8556
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 8559
        $$2253$ph$i = $$$i; //@line 8559
        label = 171; //@line 8560
       }
      } else {
       $$2234243136$i = 0; //@line 8563
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 8570
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 8579
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 8582
       $$748$i = $$2247$ph$i; //@line 8582
       label = 180; //@line 8583
       break L244;
      }
     }
     $607 = HEAP32[6016] | 0; //@line 8587
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 8591
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 8594
      $$748$i = $$2247$ph$i; //@line 8594
      label = 180; //@line 8595
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 8601
      $$2234243136$i = 0; //@line 8602
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 8606
      $$748$i = $$2247$ph$i; //@line 8606
      label = 180; //@line 8607
      break L244;
     }
    }
   } while (0);
   HEAP32[6007] = HEAP32[6007] | 4; //@line 8614
   $$4236$i = $$2234243136$i; //@line 8615
   label = 178; //@line 8616
  } else {
   $$4236$i = 0; //@line 8618
   label = 178; //@line 8619
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 8625
   $621 = _sbrk(0) | 0; //@line 8626
   $627 = $621 - $620 | 0; //@line 8634
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 8636
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 8644
    $$748$i = $620; //@line 8644
    label = 180; //@line 8645
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[6004] | 0) + $$723947$i | 0; //@line 8651
  HEAP32[6004] = $633; //@line 8652
  if ($633 >>> 0 > (HEAP32[6005] | 0) >>> 0) {
   HEAP32[6005] = $633; //@line 8656
  }
  $636 = HEAP32[5902] | 0; //@line 8658
  do {
   if (!$636) {
    $638 = HEAP32[5900] | 0; //@line 8662
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[5900] = $$748$i; //@line 8667
    }
    HEAP32[6008] = $$748$i; //@line 8669
    HEAP32[6009] = $$723947$i; //@line 8670
    HEAP32[6011] = 0; //@line 8671
    HEAP32[5905] = HEAP32[6014]; //@line 8673
    HEAP32[5904] = -1; //@line 8674
    HEAP32[5909] = 23624; //@line 8675
    HEAP32[5908] = 23624; //@line 8676
    HEAP32[5911] = 23632; //@line 8677
    HEAP32[5910] = 23632; //@line 8678
    HEAP32[5913] = 23640; //@line 8679
    HEAP32[5912] = 23640; //@line 8680
    HEAP32[5915] = 23648; //@line 8681
    HEAP32[5914] = 23648; //@line 8682
    HEAP32[5917] = 23656; //@line 8683
    HEAP32[5916] = 23656; //@line 8684
    HEAP32[5919] = 23664; //@line 8685
    HEAP32[5918] = 23664; //@line 8686
    HEAP32[5921] = 23672; //@line 8687
    HEAP32[5920] = 23672; //@line 8688
    HEAP32[5923] = 23680; //@line 8689
    HEAP32[5922] = 23680; //@line 8690
    HEAP32[5925] = 23688; //@line 8691
    HEAP32[5924] = 23688; //@line 8692
    HEAP32[5927] = 23696; //@line 8693
    HEAP32[5926] = 23696; //@line 8694
    HEAP32[5929] = 23704; //@line 8695
    HEAP32[5928] = 23704; //@line 8696
    HEAP32[5931] = 23712; //@line 8697
    HEAP32[5930] = 23712; //@line 8698
    HEAP32[5933] = 23720; //@line 8699
    HEAP32[5932] = 23720; //@line 8700
    HEAP32[5935] = 23728; //@line 8701
    HEAP32[5934] = 23728; //@line 8702
    HEAP32[5937] = 23736; //@line 8703
    HEAP32[5936] = 23736; //@line 8704
    HEAP32[5939] = 23744; //@line 8705
    HEAP32[5938] = 23744; //@line 8706
    HEAP32[5941] = 23752; //@line 8707
    HEAP32[5940] = 23752; //@line 8708
    HEAP32[5943] = 23760; //@line 8709
    HEAP32[5942] = 23760; //@line 8710
    HEAP32[5945] = 23768; //@line 8711
    HEAP32[5944] = 23768; //@line 8712
    HEAP32[5947] = 23776; //@line 8713
    HEAP32[5946] = 23776; //@line 8714
    HEAP32[5949] = 23784; //@line 8715
    HEAP32[5948] = 23784; //@line 8716
    HEAP32[5951] = 23792; //@line 8717
    HEAP32[5950] = 23792; //@line 8718
    HEAP32[5953] = 23800; //@line 8719
    HEAP32[5952] = 23800; //@line 8720
    HEAP32[5955] = 23808; //@line 8721
    HEAP32[5954] = 23808; //@line 8722
    HEAP32[5957] = 23816; //@line 8723
    HEAP32[5956] = 23816; //@line 8724
    HEAP32[5959] = 23824; //@line 8725
    HEAP32[5958] = 23824; //@line 8726
    HEAP32[5961] = 23832; //@line 8727
    HEAP32[5960] = 23832; //@line 8728
    HEAP32[5963] = 23840; //@line 8729
    HEAP32[5962] = 23840; //@line 8730
    HEAP32[5965] = 23848; //@line 8731
    HEAP32[5964] = 23848; //@line 8732
    HEAP32[5967] = 23856; //@line 8733
    HEAP32[5966] = 23856; //@line 8734
    HEAP32[5969] = 23864; //@line 8735
    HEAP32[5968] = 23864; //@line 8736
    HEAP32[5971] = 23872; //@line 8737
    HEAP32[5970] = 23872; //@line 8738
    $642 = $$723947$i + -40 | 0; //@line 8739
    $644 = $$748$i + 8 | 0; //@line 8741
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 8746
    $650 = $$748$i + $649 | 0; //@line 8747
    $651 = $642 - $649 | 0; //@line 8748
    HEAP32[5902] = $650; //@line 8749
    HEAP32[5899] = $651; //@line 8750
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 8753
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 8756
    HEAP32[5903] = HEAP32[6018]; //@line 8758
   } else {
    $$024367$i = 24032; //@line 8760
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 8762
     $658 = $$024367$i + 4 | 0; //@line 8763
     $659 = HEAP32[$658 >> 2] | 0; //@line 8764
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 8768
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 8772
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 8777
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 8791
       $673 = (HEAP32[5899] | 0) + $$723947$i | 0; //@line 8793
       $675 = $636 + 8 | 0; //@line 8795
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 8800
       $681 = $636 + $680 | 0; //@line 8801
       $682 = $673 - $680 | 0; //@line 8802
       HEAP32[5902] = $681; //@line 8803
       HEAP32[5899] = $682; //@line 8804
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 8807
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 8810
       HEAP32[5903] = HEAP32[6018]; //@line 8812
       break;
      }
     }
    }
    $688 = HEAP32[5900] | 0; //@line 8817
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[5900] = $$748$i; //@line 8820
     $753 = $$748$i; //@line 8821
    } else {
     $753 = $688; //@line 8823
    }
    $690 = $$748$i + $$723947$i | 0; //@line 8825
    $$124466$i = 24032; //@line 8826
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 8831
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 8835
     if (!$694) {
      $$0$i$i$i = 24032; //@line 8838
      break;
     } else {
      $$124466$i = $694; //@line 8841
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 8850
      $700 = $$124466$i + 4 | 0; //@line 8851
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 8854
      $704 = $$748$i + 8 | 0; //@line 8856
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 8862
      $712 = $690 + 8 | 0; //@line 8864
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 8870
      $722 = $710 + $$0197 | 0; //@line 8874
      $723 = $718 - $710 - $$0197 | 0; //@line 8875
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 8878
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[5899] | 0) + $723 | 0; //@line 8883
        HEAP32[5899] = $728; //@line 8884
        HEAP32[5902] = $722; //@line 8885
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 8888
       } else {
        if ((HEAP32[5901] | 0) == ($718 | 0)) {
         $734 = (HEAP32[5898] | 0) + $723 | 0; //@line 8894
         HEAP32[5898] = $734; //@line 8895
         HEAP32[5901] = $722; //@line 8896
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 8899
         HEAP32[$722 + $734 >> 2] = $734; //@line 8901
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 8905
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 8909
         $743 = $739 >>> 3; //@line 8910
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 8915
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 8917
           $750 = 23624 + ($743 << 1 << 2) | 0; //@line 8919
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 8925
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 8934
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[5896] = HEAP32[5896] & ~(1 << $743); //@line 8944
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 8951
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 8955
             }
             $764 = $748 + 8 | 0; //@line 8958
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 8962
              break;
             }
             _abort(); //@line 8965
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 8970
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 8971
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 8974
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 8976
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 8980
             $783 = $782 + 4 | 0; //@line 8981
             $784 = HEAP32[$783 >> 2] | 0; //@line 8982
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 8985
              if (!$786) {
               $$3$i$i = 0; //@line 8988
               break;
              } else {
               $$1291$i$i = $786; //@line 8991
               $$1293$i$i = $782; //@line 8991
              }
             } else {
              $$1291$i$i = $784; //@line 8994
              $$1293$i$i = $783; //@line 8994
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 8997
              $789 = HEAP32[$788 >> 2] | 0; //@line 8998
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 9001
               $$1293$i$i = $788; //@line 9001
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 9004
              $792 = HEAP32[$791 >> 2] | 0; //@line 9005
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 9010
               $$1293$i$i = $791; //@line 9010
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 9015
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 9018
              $$3$i$i = $$1291$i$i; //@line 9019
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 9024
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 9027
             }
             $776 = $774 + 12 | 0; //@line 9030
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 9034
             }
             $779 = $771 + 8 | 0; //@line 9037
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 9041
              HEAP32[$779 >> 2] = $774; //@line 9042
              $$3$i$i = $771; //@line 9043
              break;
             } else {
              _abort(); //@line 9046
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 9056
           $798 = 23888 + ($797 << 2) | 0; //@line 9057
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 9062
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[5897] = HEAP32[5897] & ~(1 << $797); //@line 9071
             break L311;
            } else {
             if ((HEAP32[5900] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 9077
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 9085
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[5900] | 0; //@line 9095
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 9098
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 9102
           $815 = $718 + 16 | 0; //@line 9103
           $816 = HEAP32[$815 >> 2] | 0; //@line 9104
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 9110
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 9114
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 9116
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 9122
           if (!$822) {
            break;
           }
           if ((HEAP32[5900] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 9130
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 9134
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 9136
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 9143
         $$0287$i$i = $742 + $723 | 0; //@line 9143
        } else {
         $$0$i17$i = $718; //@line 9145
         $$0287$i$i = $723; //@line 9145
        }
        $830 = $$0$i17$i + 4 | 0; //@line 9147
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 9150
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 9153
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 9155
        $836 = $$0287$i$i >>> 3; //@line 9156
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 23624 + ($836 << 1 << 2) | 0; //@line 9160
         $840 = HEAP32[5896] | 0; //@line 9161
         $841 = 1 << $836; //@line 9162
         do {
          if (!($840 & $841)) {
           HEAP32[5896] = $840 | $841; //@line 9168
           $$0295$i$i = $839; //@line 9170
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 9170
          } else {
           $845 = $839 + 8 | 0; //@line 9172
           $846 = HEAP32[$845 >> 2] | 0; //@line 9173
           if ((HEAP32[5900] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 9177
            $$pre$phi$i19$iZ2D = $845; //@line 9177
            break;
           }
           _abort(); //@line 9180
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 9184
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 9186
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 9188
         HEAP32[$722 + 12 >> 2] = $839; //@line 9190
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 9193
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 9197
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 9201
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 9206
          $858 = $852 << $857; //@line 9207
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 9210
          $863 = $858 << $861; //@line 9212
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 9215
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 9220
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 9226
         }
        } while (0);
        $877 = 23888 + ($$0296$i$i << 2) | 0; //@line 9229
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 9231
        $879 = $722 + 16 | 0; //@line 9232
        HEAP32[$879 + 4 >> 2] = 0; //@line 9234
        HEAP32[$879 >> 2] = 0; //@line 9235
        $881 = HEAP32[5897] | 0; //@line 9236
        $882 = 1 << $$0296$i$i; //@line 9237
        if (!($881 & $882)) {
         HEAP32[5897] = $881 | $882; //@line 9242
         HEAP32[$877 >> 2] = $722; //@line 9243
         HEAP32[$722 + 24 >> 2] = $877; //@line 9245
         HEAP32[$722 + 12 >> 2] = $722; //@line 9247
         HEAP32[$722 + 8 >> 2] = $722; //@line 9249
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 9258
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 9258
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 9265
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 9269
         $902 = HEAP32[$900 >> 2] | 0; //@line 9271
         if (!$902) {
          label = 260; //@line 9274
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 9277
          $$0289$i$i = $902; //@line 9277
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[5900] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 9284
         } else {
          HEAP32[$900 >> 2] = $722; //@line 9287
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 9289
          HEAP32[$722 + 12 >> 2] = $722; //@line 9291
          HEAP32[$722 + 8 >> 2] = $722; //@line 9293
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 9298
         $910 = HEAP32[$909 >> 2] | 0; //@line 9299
         $911 = HEAP32[5900] | 0; //@line 9300
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 9306
          HEAP32[$909 >> 2] = $722; //@line 9307
          HEAP32[$722 + 8 >> 2] = $910; //@line 9309
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 9311
          HEAP32[$722 + 24 >> 2] = 0; //@line 9313
          break;
         } else {
          _abort(); //@line 9316
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 9323
      STACKTOP = sp; //@line 9324
      return $$0 | 0; //@line 9324
     } else {
      $$0$i$i$i = 24032; //@line 9326
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 9330
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 9335
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 9343
    }
    $927 = $923 + -47 | 0; //@line 9345
    $929 = $927 + 8 | 0; //@line 9347
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 9353
    $936 = $636 + 16 | 0; //@line 9354
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 9356
    $939 = $938 + 8 | 0; //@line 9357
    $940 = $938 + 24 | 0; //@line 9358
    $941 = $$723947$i + -40 | 0; //@line 9359
    $943 = $$748$i + 8 | 0; //@line 9361
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 9366
    $949 = $$748$i + $948 | 0; //@line 9367
    $950 = $941 - $948 | 0; //@line 9368
    HEAP32[5902] = $949; //@line 9369
    HEAP32[5899] = $950; //@line 9370
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 9373
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 9376
    HEAP32[5903] = HEAP32[6018]; //@line 9378
    $956 = $938 + 4 | 0; //@line 9379
    HEAP32[$956 >> 2] = 27; //@line 9380
    HEAP32[$939 >> 2] = HEAP32[6008]; //@line 9381
    HEAP32[$939 + 4 >> 2] = HEAP32[6009]; //@line 9381
    HEAP32[$939 + 8 >> 2] = HEAP32[6010]; //@line 9381
    HEAP32[$939 + 12 >> 2] = HEAP32[6011]; //@line 9381
    HEAP32[6008] = $$748$i; //@line 9382
    HEAP32[6009] = $$723947$i; //@line 9383
    HEAP32[6011] = 0; //@line 9384
    HEAP32[6010] = $939; //@line 9385
    $958 = $940; //@line 9386
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 9388
     HEAP32[$958 >> 2] = 7; //@line 9389
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 9402
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 9405
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 9408
     HEAP32[$938 >> 2] = $964; //@line 9409
     $969 = $964 >>> 3; //@line 9410
     if ($964 >>> 0 < 256) {
      $972 = 23624 + ($969 << 1 << 2) | 0; //@line 9414
      $973 = HEAP32[5896] | 0; //@line 9415
      $974 = 1 << $969; //@line 9416
      if (!($973 & $974)) {
       HEAP32[5896] = $973 | $974; //@line 9421
       $$0211$i$i = $972; //@line 9423
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 9423
      } else {
       $978 = $972 + 8 | 0; //@line 9425
       $979 = HEAP32[$978 >> 2] | 0; //@line 9426
       if ((HEAP32[5900] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 9430
       } else {
        $$0211$i$i = $979; //@line 9433
        $$pre$phi$i$iZ2D = $978; //@line 9433
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 9436
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 9438
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 9440
      HEAP32[$636 + 12 >> 2] = $972; //@line 9442
      break;
     }
     $985 = $964 >>> 8; //@line 9445
     if (!$985) {
      $$0212$i$i = 0; //@line 9448
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 9452
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 9456
       $991 = $985 << $990; //@line 9457
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 9460
       $996 = $991 << $994; //@line 9462
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 9465
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 9470
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 9476
      }
     }
     $1010 = 23888 + ($$0212$i$i << 2) | 0; //@line 9479
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 9481
     HEAP32[$636 + 20 >> 2] = 0; //@line 9483
     HEAP32[$936 >> 2] = 0; //@line 9484
     $1013 = HEAP32[5897] | 0; //@line 9485
     $1014 = 1 << $$0212$i$i; //@line 9486
     if (!($1013 & $1014)) {
      HEAP32[5897] = $1013 | $1014; //@line 9491
      HEAP32[$1010 >> 2] = $636; //@line 9492
      HEAP32[$636 + 24 >> 2] = $1010; //@line 9494
      HEAP32[$636 + 12 >> 2] = $636; //@line 9496
      HEAP32[$636 + 8 >> 2] = $636; //@line 9498
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 9507
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 9507
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 9514
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 9518
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 9520
      if (!$1034) {
       label = 286; //@line 9523
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 9526
       $$0207$i$i = $1034; //@line 9526
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[5900] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 9533
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 9536
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 9538
       HEAP32[$636 + 12 >> 2] = $636; //@line 9540
       HEAP32[$636 + 8 >> 2] = $636; //@line 9542
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 9547
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 9548
      $1043 = HEAP32[5900] | 0; //@line 9549
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 9555
       HEAP32[$1041 >> 2] = $636; //@line 9556
       HEAP32[$636 + 8 >> 2] = $1042; //@line 9558
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 9560
       HEAP32[$636 + 24 >> 2] = 0; //@line 9562
       break;
      } else {
       _abort(); //@line 9565
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[5899] | 0; //@line 9572
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 9575
   HEAP32[5899] = $1054; //@line 9576
   $1055 = HEAP32[5902] | 0; //@line 9577
   $1056 = $1055 + $$0197 | 0; //@line 9578
   HEAP32[5902] = $1056; //@line 9579
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 9582
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 9585
   $$0 = $1055 + 8 | 0; //@line 9587
   STACKTOP = sp; //@line 9588
   return $$0 | 0; //@line 9588
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 9592
 $$0 = 0; //@line 9593
 STACKTOP = sp; //@line 9594
 return $$0 | 0; //@line 9594
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_435($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy24 = 0, $$pre20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $118 = 0, $12 = 0, $124 = 0, $130 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $159 = 0, $16 = 0, $170 = 0, $174 = 0, $178 = 0, $18 = 0, $183 = 0, $189 = 0, $190 = 0, $195 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $220 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $243 = 0, $245 = 0, $246 = 0, $251 = 0, $253 = 0, $254 = 0, $255 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $287 = 0, $288 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $340 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $351 = 0, $352 = 0, $354 = 0, $355 = 0, $356 = 0, $358 = 0, $359 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $368 = 0, $372 = 0, $373 = 0, $375 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $39 = 0, $4 = 0, $53 = 0, $6 = 0, $61 = 0, $64 = 0, $69 = 0, $73 = 0, $74 = 0, $8 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 28347
 STACKTOP = STACKTOP + 16 | 0; //@line 28348
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 28348
 $$byval_copy24 = sp + 8 | 0; //@line 28349
 $$byval_copy = sp; //@line 28350
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28352
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28354
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28356
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28358
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28360
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28362
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28364
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28366
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28368
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28370
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28372
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28374
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28376
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28378
 $29 = $2 + 944 | 0; //@line 28379
 $30 = HEAP8[$29 >> 0] | 0; //@line 28380
 $$pre20 = $2 + 968 | 0; //@line 28383
 if ($30 & 32) {
  $33 = HEAP32[$$pre20 >> 2] | 0; //@line 28385
  if ($33 & 64 | 0) {
   HEAP32[$$pre20 >> 2] = $33 & -66; //@line 28390
  }
  do {
   if (!($30 & 9)) {
    label = 9; //@line 28396
   } else {
    $39 = $2 + 288 | 0; //@line 28398
    if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($39) | 0) + 4 >> 2] | 0) != 2) {
     if ((HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] | 0) != 2) {
      label = 9; //@line 28410
      break;
     }
    }
    HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 28416
    __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 4 | 0); //@line 28418
    $53 = HEAP8[$2 + 895 >> 0] | 0; //@line 28420
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($39) | 0) + 11 >> 0] = $53; //@line 28423
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($39) | 0) + 10 >> 0] = 0; //@line 28426
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($39) | 0) + 12 >> 2] = 0; //@line 28429
    $170 = $2 + 373 | 0; //@line 28431
   }
  } while (0);
  do {
   if ((label | 0) == 9) {
    $61 = $2 + 373 | 0; //@line 28436
    if (!(HEAP8[$61 >> 0] | 0)) {
     $64 = HEAP8[$29 >> 0] | 0; //@line 28440
     if (!($64 & 9)) {
      $170 = $61; //@line 28444
     } else {
      if ($64 & 8) {
       $69 = $2 + 264 | 0; //@line 28449
       if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($69) | 0) >> 2] | 0)) {
        $73 = $2 + 897 | 0; //@line 28454
        $74 = HEAP8[$73 >> 0] | 0; //@line 28455
        HEAP8[(__ZN11LoRaMacMlme16get_confirmationEv($69) | 0) + 14 >> 0] = $74; //@line 28458
        if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($69) | 0) + 4 >> 2] | 0)) {
         HEAP32[$2 + 956 >> 2] = 0; //@line 28465
         HEAP8[$2 + 380 >> 0] = 0; //@line 28467
         HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 28470
         $170 = $61; //@line 28471
         break;
        }
        if ((HEAPU8[$73 >> 0] | 0) >= (HEAPU8[$2 + 896 >> 0] | 0)) {
         HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 28481
         $170 = $61; //@line 28482
         break;
        }
        HEAP8[$29 >> 0] = HEAP8[$29 >> 0] & -33; //@line 28487
        $94 = HEAP32[$2 + 1328 >> 2] | 0; //@line 28489
        HEAP32[$28 >> 2] = 465; //@line 28490
        HEAP32[$28 + 4 >> 2] = 0; //@line 28492
        $ReallocAsyncCtx12 = _emscripten_realloc_async_context(68) | 0; //@line 28493
        HEAP32[$$byval_copy >> 2] = HEAP32[$28 >> 2]; //@line 28494
        HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$28 + 4 >> 2]; //@line 28494
        $95 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($94, $2, $$byval_copy) | 0; //@line 28495
        if (___async) {
         HEAP32[$ReallocAsyncCtx12 >> 2] = 466; //@line 28498
         $96 = $ReallocAsyncCtx12 + 4 | 0; //@line 28499
         HEAP32[$96 >> 2] = $29; //@line 28500
         $97 = $ReallocAsyncCtx12 + 8 | 0; //@line 28501
         HEAP32[$97 >> 2] = $2; //@line 28502
         $98 = $ReallocAsyncCtx12 + 12 | 0; //@line 28503
         HEAP32[$98 >> 2] = $4; //@line 28504
         $99 = $ReallocAsyncCtx12 + 16 | 0; //@line 28505
         HEAP32[$99 >> 2] = $6; //@line 28506
         $100 = $ReallocAsyncCtx12 + 20 | 0; //@line 28507
         HEAP32[$100 >> 2] = $8; //@line 28508
         $101 = $ReallocAsyncCtx12 + 24 | 0; //@line 28509
         HEAP32[$101 >> 2] = $10; //@line 28510
         $102 = $ReallocAsyncCtx12 + 28 | 0; //@line 28511
         HEAP32[$102 >> 2] = $12; //@line 28512
         $103 = $ReallocAsyncCtx12 + 32 | 0; //@line 28513
         HEAP32[$103 >> 2] = $28; //@line 28514
         $104 = $ReallocAsyncCtx12 + 36 | 0; //@line 28515
         HEAP32[$104 >> 2] = $14; //@line 28516
         $105 = $ReallocAsyncCtx12 + 40 | 0; //@line 28517
         HEAP32[$105 >> 2] = $16; //@line 28518
         $106 = $ReallocAsyncCtx12 + 44 | 0; //@line 28519
         HEAP32[$106 >> 2] = $18; //@line 28520
         $107 = $ReallocAsyncCtx12 + 48 | 0; //@line 28521
         HEAP32[$107 >> 2] = $20; //@line 28522
         $108 = $ReallocAsyncCtx12 + 52 | 0; //@line 28523
         HEAP32[$108 >> 2] = $22; //@line 28524
         $109 = $ReallocAsyncCtx12 + 56 | 0; //@line 28525
         HEAP32[$109 >> 2] = $24; //@line 28526
         $110 = $ReallocAsyncCtx12 + 60 | 0; //@line 28527
         HEAP32[$110 >> 2] = $$pre20; //@line 28528
         $111 = $ReallocAsyncCtx12 + 64 | 0; //@line 28529
         HEAP32[$111 >> 2] = $61; //@line 28530
         sp = STACKTOP; //@line 28531
         STACKTOP = sp; //@line 28532
         return;
        }
        HEAP32[___async_retval >> 2] = $95; //@line 28535
        ___async_unwind = 0; //@line 28536
        HEAP32[$ReallocAsyncCtx12 >> 2] = 466; //@line 28537
        $96 = $ReallocAsyncCtx12 + 4 | 0; //@line 28538
        HEAP32[$96 >> 2] = $29; //@line 28539
        $97 = $ReallocAsyncCtx12 + 8 | 0; //@line 28540
        HEAP32[$97 >> 2] = $2; //@line 28541
        $98 = $ReallocAsyncCtx12 + 12 | 0; //@line 28542
        HEAP32[$98 >> 2] = $4; //@line 28543
        $99 = $ReallocAsyncCtx12 + 16 | 0; //@line 28544
        HEAP32[$99 >> 2] = $6; //@line 28545
        $100 = $ReallocAsyncCtx12 + 20 | 0; //@line 28546
        HEAP32[$100 >> 2] = $8; //@line 28547
        $101 = $ReallocAsyncCtx12 + 24 | 0; //@line 28548
        HEAP32[$101 >> 2] = $10; //@line 28549
        $102 = $ReallocAsyncCtx12 + 28 | 0; //@line 28550
        HEAP32[$102 >> 2] = $12; //@line 28551
        $103 = $ReallocAsyncCtx12 + 32 | 0; //@line 28552
        HEAP32[$103 >> 2] = $28; //@line 28553
        $104 = $ReallocAsyncCtx12 + 36 | 0; //@line 28554
        HEAP32[$104 >> 2] = $14; //@line 28555
        $105 = $ReallocAsyncCtx12 + 40 | 0; //@line 28556
        HEAP32[$105 >> 2] = $16; //@line 28557
        $106 = $ReallocAsyncCtx12 + 44 | 0; //@line 28558
        HEAP32[$106 >> 2] = $18; //@line 28559
        $107 = $ReallocAsyncCtx12 + 48 | 0; //@line 28560
        HEAP32[$107 >> 2] = $20; //@line 28561
        $108 = $ReallocAsyncCtx12 + 52 | 0; //@line 28562
        HEAP32[$108 >> 2] = $22; //@line 28563
        $109 = $ReallocAsyncCtx12 + 56 | 0; //@line 28564
        HEAP32[$109 >> 2] = $24; //@line 28565
        $110 = $ReallocAsyncCtx12 + 60 | 0; //@line 28566
        HEAP32[$110 >> 2] = $$pre20; //@line 28567
        $111 = $ReallocAsyncCtx12 + 64 | 0; //@line 28568
        HEAP32[$111 >> 2] = $61; //@line 28569
        sp = STACKTOP; //@line 28570
        STACKTOP = sp; //@line 28571
        return;
       }
      }
      $113 = $2 + 380 | 0; //@line 28574
      $118 = HEAP8[$29 >> 0] | 0; //@line 28579
      if (($118 & 2) == 0 ? (HEAPU8[$113 >> 0] | 0) < (HEAPU8[$2 + 1128 >> 0] | 0) : 0) {
       HEAP8[$29 >> 0] = $118 & -33; //@line 28585
       $137 = HEAP32[$2 + 1328 >> 2] | 0; //@line 28587
       HEAP32[$26 >> 2] = 465; //@line 28588
       HEAP32[$26 + 4 >> 2] = 0; //@line 28590
       $ReallocAsyncCtx11 = _emscripten_realloc_async_context(68) | 0; //@line 28591
       HEAP32[$$byval_copy24 >> 2] = HEAP32[$26 >> 2]; //@line 28592
       HEAP32[$$byval_copy24 + 4 >> 2] = HEAP32[$26 + 4 >> 2]; //@line 28592
       $138 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($137, $2, $$byval_copy24) | 0; //@line 28593
       if (___async) {
        HEAP32[$ReallocAsyncCtx11 >> 2] = 468; //@line 28596
        $139 = $ReallocAsyncCtx11 + 4 | 0; //@line 28597
        HEAP32[$139 >> 2] = $29; //@line 28598
        $140 = $ReallocAsyncCtx11 + 8 | 0; //@line 28599
        HEAP32[$140 >> 2] = $2; //@line 28600
        $141 = $ReallocAsyncCtx11 + 12 | 0; //@line 28601
        HEAP32[$141 >> 2] = $4; //@line 28602
        $142 = $ReallocAsyncCtx11 + 16 | 0; //@line 28603
        HEAP32[$142 >> 2] = $6; //@line 28604
        $143 = $ReallocAsyncCtx11 + 20 | 0; //@line 28605
        HEAP32[$143 >> 2] = $8; //@line 28606
        $144 = $ReallocAsyncCtx11 + 24 | 0; //@line 28607
        HEAP32[$144 >> 2] = $10; //@line 28608
        $145 = $ReallocAsyncCtx11 + 28 | 0; //@line 28609
        HEAP32[$145 >> 2] = $12; //@line 28610
        $146 = $ReallocAsyncCtx11 + 32 | 0; //@line 28611
        HEAP32[$146 >> 2] = $14; //@line 28612
        $147 = $ReallocAsyncCtx11 + 36 | 0; //@line 28613
        HEAP32[$147 >> 2] = $16; //@line 28614
        $148 = $ReallocAsyncCtx11 + 40 | 0; //@line 28615
        HEAP32[$148 >> 2] = $18; //@line 28616
        $149 = $ReallocAsyncCtx11 + 44 | 0; //@line 28617
        HEAP32[$149 >> 2] = $20; //@line 28618
        $150 = $ReallocAsyncCtx11 + 48 | 0; //@line 28619
        HEAP32[$150 >> 2] = $22; //@line 28620
        $151 = $ReallocAsyncCtx11 + 52 | 0; //@line 28621
        HEAP32[$151 >> 2] = $24; //@line 28622
        $152 = $ReallocAsyncCtx11 + 56 | 0; //@line 28623
        HEAP32[$152 >> 2] = $$pre20; //@line 28624
        $153 = $ReallocAsyncCtx11 + 60 | 0; //@line 28625
        HEAP32[$153 >> 2] = $61; //@line 28626
        $154 = $ReallocAsyncCtx11 + 64 | 0; //@line 28627
        HEAP32[$154 >> 2] = $26; //@line 28628
        sp = STACKTOP; //@line 28629
        STACKTOP = sp; //@line 28630
        return;
       }
       HEAP32[___async_retval >> 2] = $138; //@line 28633
       ___async_unwind = 0; //@line 28634
       HEAP32[$ReallocAsyncCtx11 >> 2] = 468; //@line 28635
       $139 = $ReallocAsyncCtx11 + 4 | 0; //@line 28636
       HEAP32[$139 >> 2] = $29; //@line 28637
       $140 = $ReallocAsyncCtx11 + 8 | 0; //@line 28638
       HEAP32[$140 >> 2] = $2; //@line 28639
       $141 = $ReallocAsyncCtx11 + 12 | 0; //@line 28640
       HEAP32[$141 >> 2] = $4; //@line 28641
       $142 = $ReallocAsyncCtx11 + 16 | 0; //@line 28642
       HEAP32[$142 >> 2] = $6; //@line 28643
       $143 = $ReallocAsyncCtx11 + 20 | 0; //@line 28644
       HEAP32[$143 >> 2] = $8; //@line 28645
       $144 = $ReallocAsyncCtx11 + 24 | 0; //@line 28646
       HEAP32[$144 >> 2] = $10; //@line 28647
       $145 = $ReallocAsyncCtx11 + 28 | 0; //@line 28648
       HEAP32[$145 >> 2] = $12; //@line 28649
       $146 = $ReallocAsyncCtx11 + 32 | 0; //@line 28650
       HEAP32[$146 >> 2] = $14; //@line 28651
       $147 = $ReallocAsyncCtx11 + 36 | 0; //@line 28652
       HEAP32[$147 >> 2] = $16; //@line 28653
       $148 = $ReallocAsyncCtx11 + 40 | 0; //@line 28654
       HEAP32[$148 >> 2] = $18; //@line 28655
       $149 = $ReallocAsyncCtx11 + 44 | 0; //@line 28656
       HEAP32[$149 >> 2] = $20; //@line 28657
       $150 = $ReallocAsyncCtx11 + 48 | 0; //@line 28658
       HEAP32[$150 >> 2] = $22; //@line 28659
       $151 = $ReallocAsyncCtx11 + 52 | 0; //@line 28660
       HEAP32[$151 >> 2] = $24; //@line 28661
       $152 = $ReallocAsyncCtx11 + 56 | 0; //@line 28662
       HEAP32[$152 >> 2] = $$pre20; //@line 28663
       $153 = $ReallocAsyncCtx11 + 60 | 0; //@line 28664
       HEAP32[$153 >> 2] = $61; //@line 28665
       $154 = $ReallocAsyncCtx11 + 64 | 0; //@line 28666
       HEAP32[$154 >> 2] = $26; //@line 28667
       sp = STACKTOP; //@line 28668
       STACKTOP = sp; //@line 28669
       return;
      }
      if (!($118 & 2)) {
       __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 4 | 0); //@line 28675
       $124 = $2 + 964 | 0; //@line 28676
       HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + 1; //@line 28679
      }
      HEAP8[$113 >> 0] = 0; //@line 28681
      if (!(HEAP8[$2 + 370 >> 0] | 0)) {
       $130 = $2 + 956 | 0; //@line 28686
       HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 1; //@line 28689
      }
      HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 28693
      $170 = $61; //@line 28694
     }
    } else {
     $170 = $61; //@line 28697
    }
   }
  } while (0);
  do {
   if (HEAP8[$29 >> 0] & 2) {
    $159 = $2 + 288 | 0; //@line 28706
    if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($159) | 0) + 10 >> 0] | 0)) {
     if ((HEAPU8[$2 + 895 >> 0] | 0) <= (HEAPU8[$2 + 894 >> 0] | 0)) {
      break;
     }
    }
    HEAP8[$2 + 377 >> 0] = 0; //@line 28722
    HEAP8[$170 >> 0] = 0; //@line 28723
    if (!(HEAP8[$2 + 370 >> 0] | 0)) {
     $174 = $2 + 956 | 0; //@line 28728
     HEAP32[$174 >> 2] = (HEAP32[$174 >> 2] | 0) + 1; //@line 28731
    }
    $178 = HEAP8[$2 + 895 >> 0] | 0; //@line 28734
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($159) | 0) + 11 >> 0] = $178; //@line 28737
    HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 28740
   }
  } while (0);
  $183 = $2 + 377 | 0; //@line 28743
  if (HEAP8[$183 >> 0] | 0) {
   if (!(HEAP32[$$pre20 >> 2] & 16)) {
    HEAP8[$183 >> 0] = 0; //@line 28751
    $189 = $2 + 895 | 0; //@line 28752
    $190 = HEAP8[$189 >> 0] | 0; //@line 28753
    if (!(($190 & 255) < 9 ? ($190 & 255) < (HEAPU8[$2 + 894 >> 0] | 0) : 0)) {
     $220 = HEAP32[$2 >> 2] | 0; //@line 28760
     $223 = HEAP32[(HEAP32[$220 >> 2] | 0) + 16 >> 2] | 0; //@line 28763
     $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 28764
     FUNCTION_TABLE_vi[$223 & 1023]($220); //@line 28765
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 471; //@line 28768
      $224 = $ReallocAsyncCtx + 4 | 0; //@line 28769
      HEAP32[$224 >> 2] = $29; //@line 28770
      $225 = $ReallocAsyncCtx + 8 | 0; //@line 28771
      HEAP32[$225 >> 2] = $2; //@line 28772
      $226 = $ReallocAsyncCtx + 12 | 0; //@line 28773
      HEAP32[$226 >> 2] = $4; //@line 28774
      $227 = $ReallocAsyncCtx + 16 | 0; //@line 28775
      HEAP32[$227 >> 2] = $22; //@line 28776
      $228 = $ReallocAsyncCtx + 20 | 0; //@line 28777
      HEAP32[$228 >> 2] = $24; //@line 28778
      $229 = $ReallocAsyncCtx + 24 | 0; //@line 28779
      HEAP32[$229 >> 2] = $14; //@line 28780
      $230 = $ReallocAsyncCtx + 28 | 0; //@line 28781
      HEAP32[$230 >> 2] = $16; //@line 28782
      $231 = $ReallocAsyncCtx + 32 | 0; //@line 28783
      HEAP32[$231 >> 2] = $18; //@line 28784
      $232 = $ReallocAsyncCtx + 36 | 0; //@line 28785
      HEAP32[$232 >> 2] = $20; //@line 28786
      $233 = $ReallocAsyncCtx + 40 | 0; //@line 28787
      HEAP32[$233 >> 2] = $6; //@line 28788
      $234 = $ReallocAsyncCtx + 44 | 0; //@line 28789
      HEAP32[$234 >> 2] = $8; //@line 28790
      $235 = $ReallocAsyncCtx + 48 | 0; //@line 28791
      HEAP32[$235 >> 2] = $10; //@line 28792
      $236 = $ReallocAsyncCtx + 52 | 0; //@line 28793
      HEAP32[$236 >> 2] = $12; //@line 28794
      $237 = $ReallocAsyncCtx + 56 | 0; //@line 28795
      HEAP32[$237 >> 2] = $$pre20; //@line 28796
      $238 = $ReallocAsyncCtx + 60 | 0; //@line 28797
      HEAP32[$238 >> 2] = $170; //@line 28798
      $239 = $ReallocAsyncCtx + 64 | 0; //@line 28799
      HEAP32[$239 >> 2] = $189; //@line 28800
      sp = STACKTOP; //@line 28801
      STACKTOP = sp; //@line 28802
      return;
     }
     ___async_unwind = 0; //@line 28804
     HEAP32[$ReallocAsyncCtx >> 2] = 471; //@line 28805
     $224 = $ReallocAsyncCtx + 4 | 0; //@line 28806
     HEAP32[$224 >> 2] = $29; //@line 28807
     $225 = $ReallocAsyncCtx + 8 | 0; //@line 28808
     HEAP32[$225 >> 2] = $2; //@line 28809
     $226 = $ReallocAsyncCtx + 12 | 0; //@line 28810
     HEAP32[$226 >> 2] = $4; //@line 28811
     $227 = $ReallocAsyncCtx + 16 | 0; //@line 28812
     HEAP32[$227 >> 2] = $22; //@line 28813
     $228 = $ReallocAsyncCtx + 20 | 0; //@line 28814
     HEAP32[$228 >> 2] = $24; //@line 28815
     $229 = $ReallocAsyncCtx + 24 | 0; //@line 28816
     HEAP32[$229 >> 2] = $14; //@line 28817
     $230 = $ReallocAsyncCtx + 28 | 0; //@line 28818
     HEAP32[$230 >> 2] = $16; //@line 28819
     $231 = $ReallocAsyncCtx + 32 | 0; //@line 28820
     HEAP32[$231 >> 2] = $18; //@line 28821
     $232 = $ReallocAsyncCtx + 36 | 0; //@line 28822
     HEAP32[$232 >> 2] = $20; //@line 28823
     $233 = $ReallocAsyncCtx + 40 | 0; //@line 28824
     HEAP32[$233 >> 2] = $6; //@line 28825
     $234 = $ReallocAsyncCtx + 44 | 0; //@line 28826
     HEAP32[$234 >> 2] = $8; //@line 28827
     $235 = $ReallocAsyncCtx + 48 | 0; //@line 28828
     HEAP32[$235 >> 2] = $10; //@line 28829
     $236 = $ReallocAsyncCtx + 52 | 0; //@line 28830
     HEAP32[$236 >> 2] = $12; //@line 28831
     $237 = $ReallocAsyncCtx + 56 | 0; //@line 28832
     HEAP32[$237 >> 2] = $$pre20; //@line 28833
     $238 = $ReallocAsyncCtx + 60 | 0; //@line 28834
     HEAP32[$238 >> 2] = $170; //@line 28835
     $239 = $ReallocAsyncCtx + 64 | 0; //@line 28836
     HEAP32[$239 >> 2] = $189; //@line 28837
     sp = STACKTOP; //@line 28838
     STACKTOP = sp; //@line 28839
     return;
    }
    $195 = $190 + 1 << 24 >> 24; //@line 28841
    HEAP8[$189 >> 0] = $195; //@line 28842
    if ($195 & 1) {
     $199 = $2 + 1097 | 0; //@line 28847
     HEAP8[$199 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$2 >> 2] | 0, HEAP8[$199 >> 0] | 0) | 0; //@line 28850
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 28852
    $202 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 28853
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 470; //@line 28856
     $203 = $ReallocAsyncCtx9 + 4 | 0; //@line 28857
     HEAP32[$203 >> 2] = $29; //@line 28858
     $204 = $ReallocAsyncCtx9 + 8 | 0; //@line 28859
     HEAP32[$204 >> 2] = $2; //@line 28860
     $205 = $ReallocAsyncCtx9 + 12 | 0; //@line 28861
     HEAP32[$205 >> 2] = $4; //@line 28862
     $206 = $ReallocAsyncCtx9 + 16 | 0; //@line 28863
     HEAP32[$206 >> 2] = $6; //@line 28864
     $207 = $ReallocAsyncCtx9 + 20 | 0; //@line 28865
     HEAP32[$207 >> 2] = $8; //@line 28866
     $208 = $ReallocAsyncCtx9 + 24 | 0; //@line 28867
     HEAP32[$208 >> 2] = $10; //@line 28868
     $209 = $ReallocAsyncCtx9 + 28 | 0; //@line 28869
     HEAP32[$209 >> 2] = $12; //@line 28870
     $210 = $ReallocAsyncCtx9 + 32 | 0; //@line 28871
     HEAP32[$210 >> 2] = $14; //@line 28872
     $211 = $ReallocAsyncCtx9 + 36 | 0; //@line 28873
     HEAP32[$211 >> 2] = $16; //@line 28874
     $212 = $ReallocAsyncCtx9 + 40 | 0; //@line 28875
     HEAP32[$212 >> 2] = $18; //@line 28876
     $213 = $ReallocAsyncCtx9 + 44 | 0; //@line 28877
     HEAP32[$213 >> 2] = $20; //@line 28878
     $214 = $ReallocAsyncCtx9 + 48 | 0; //@line 28879
     HEAP32[$214 >> 2] = $22; //@line 28880
     $215 = $ReallocAsyncCtx9 + 52 | 0; //@line 28881
     HEAP32[$215 >> 2] = $24; //@line 28882
     $216 = $ReallocAsyncCtx9 + 56 | 0; //@line 28883
     HEAP32[$216 >> 2] = $$pre20; //@line 28884
     $217 = $ReallocAsyncCtx9 + 60 | 0; //@line 28885
     HEAP32[$217 >> 2] = $170; //@line 28886
     $218 = $ReallocAsyncCtx9 + 64 | 0; //@line 28887
     HEAP32[$218 >> 2] = $189; //@line 28888
     sp = STACKTOP; //@line 28889
     STACKTOP = sp; //@line 28890
     return;
    }
    HEAP32[___async_retval >> 2] = $202; //@line 28893
    ___async_unwind = 0; //@line 28894
    HEAP32[$ReallocAsyncCtx9 >> 2] = 470; //@line 28895
    $203 = $ReallocAsyncCtx9 + 4 | 0; //@line 28896
    HEAP32[$203 >> 2] = $29; //@line 28897
    $204 = $ReallocAsyncCtx9 + 8 | 0; //@line 28898
    HEAP32[$204 >> 2] = $2; //@line 28899
    $205 = $ReallocAsyncCtx9 + 12 | 0; //@line 28900
    HEAP32[$205 >> 2] = $4; //@line 28901
    $206 = $ReallocAsyncCtx9 + 16 | 0; //@line 28902
    HEAP32[$206 >> 2] = $6; //@line 28903
    $207 = $ReallocAsyncCtx9 + 20 | 0; //@line 28904
    HEAP32[$207 >> 2] = $8; //@line 28905
    $208 = $ReallocAsyncCtx9 + 24 | 0; //@line 28906
    HEAP32[$208 >> 2] = $10; //@line 28907
    $209 = $ReallocAsyncCtx9 + 28 | 0; //@line 28908
    HEAP32[$209 >> 2] = $12; //@line 28909
    $210 = $ReallocAsyncCtx9 + 32 | 0; //@line 28910
    HEAP32[$210 >> 2] = $14; //@line 28911
    $211 = $ReallocAsyncCtx9 + 36 | 0; //@line 28912
    HEAP32[$211 >> 2] = $16; //@line 28913
    $212 = $ReallocAsyncCtx9 + 40 | 0; //@line 28914
    HEAP32[$212 >> 2] = $18; //@line 28915
    $213 = $ReallocAsyncCtx9 + 44 | 0; //@line 28916
    HEAP32[$213 >> 2] = $20; //@line 28917
    $214 = $ReallocAsyncCtx9 + 48 | 0; //@line 28918
    HEAP32[$214 >> 2] = $22; //@line 28919
    $215 = $ReallocAsyncCtx9 + 52 | 0; //@line 28920
    HEAP32[$215 >> 2] = $24; //@line 28921
    $216 = $ReallocAsyncCtx9 + 56 | 0; //@line 28922
    HEAP32[$216 >> 2] = $$pre20; //@line 28923
    $217 = $ReallocAsyncCtx9 + 60 | 0; //@line 28924
    HEAP32[$217 >> 2] = $170; //@line 28925
    $218 = $ReallocAsyncCtx9 + 64 | 0; //@line 28926
    HEAP32[$218 >> 2] = $189; //@line 28927
    sp = STACKTOP; //@line 28928
    STACKTOP = sp; //@line 28929
    return;
   }
  }
 }
 $240 = HEAP32[$$pre20 >> 2] | 0; //@line 28933
 $243 = $240 & -3; //@line 28936
 if (!($240 & 2)) {
  $245 = $240; //@line 28938
 } else {
  HEAP32[$$pre20 >> 2] = $243; //@line 28940
  $245 = $243; //@line 28941
 }
 if ($245 | 0) {
  $330 = HEAP32[$22 >> 2] | 0; //@line 28945
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 28946
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($330, $24, 1e3); //@line 28947
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 477; //@line 28950
   $331 = $ReallocAsyncCtx8 + 4 | 0; //@line 28951
   HEAP32[$331 >> 2] = $2; //@line 28952
   $332 = $ReallocAsyncCtx8 + 8 | 0; //@line 28953
   HEAP32[$332 >> 2] = $4; //@line 28954
   $333 = $ReallocAsyncCtx8 + 12 | 0; //@line 28955
   HEAP32[$333 >> 2] = $29; //@line 28956
   $334 = $ReallocAsyncCtx8 + 16 | 0; //@line 28957
   HEAP32[$334 >> 2] = $6; //@line 28958
   $335 = $ReallocAsyncCtx8 + 20 | 0; //@line 28959
   HEAP32[$335 >> 2] = $8; //@line 28960
   $336 = $ReallocAsyncCtx8 + 24 | 0; //@line 28961
   HEAP32[$336 >> 2] = $10; //@line 28962
   $337 = $ReallocAsyncCtx8 + 28 | 0; //@line 28963
   HEAP32[$337 >> 2] = $12; //@line 28964
   sp = STACKTOP; //@line 28965
   STACKTOP = sp; //@line 28966
   return;
  }
  ___async_unwind = 0; //@line 28968
  HEAP32[$ReallocAsyncCtx8 >> 2] = 477; //@line 28969
  $331 = $ReallocAsyncCtx8 + 4 | 0; //@line 28970
  HEAP32[$331 >> 2] = $2; //@line 28971
  $332 = $ReallocAsyncCtx8 + 8 | 0; //@line 28972
  HEAP32[$332 >> 2] = $4; //@line 28973
  $333 = $ReallocAsyncCtx8 + 12 | 0; //@line 28974
  HEAP32[$333 >> 2] = $29; //@line 28975
  $334 = $ReallocAsyncCtx8 + 16 | 0; //@line 28976
  HEAP32[$334 >> 2] = $6; //@line 28977
  $335 = $ReallocAsyncCtx8 + 20 | 0; //@line 28978
  HEAP32[$335 >> 2] = $8; //@line 28979
  $336 = $ReallocAsyncCtx8 + 24 | 0; //@line 28980
  HEAP32[$336 >> 2] = $10; //@line 28981
  $337 = $ReallocAsyncCtx8 + 28 | 0; //@line 28982
  HEAP32[$337 >> 2] = $12; //@line 28983
  sp = STACKTOP; //@line 28984
  STACKTOP = sp; //@line 28985
  return;
 }
 $246 = HEAP8[$29 >> 0] | 0; //@line 28987
 if ($246 & 1) {
  HEAP8[$29 >> 0] = $246 & -2; //@line 28992
  $251 = HEAP32[$2 + 1324 >> 2] | 0; //@line 28994
  $253 = __ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0; //@line 28996
  $254 = $251 + 12 | 0; //@line 28997
  $255 = HEAP32[$254 >> 2] | 0; //@line 28998
  if (!$255) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 29001
   _mbed_assert_internal(15352, 15357, 1102); //@line 29002
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 472; //@line 29005
    $257 = $ReallocAsyncCtx18 + 4 | 0; //@line 29006
    HEAP32[$257 >> 2] = $29; //@line 29007
    $258 = $ReallocAsyncCtx18 + 8 | 0; //@line 29008
    HEAP32[$258 >> 2] = $2; //@line 29009
    $259 = $ReallocAsyncCtx18 + 12 | 0; //@line 29010
    HEAP32[$259 >> 2] = $4; //@line 29011
    $260 = $ReallocAsyncCtx18 + 16 | 0; //@line 29012
    HEAP32[$260 >> 2] = $6; //@line 29013
    $261 = $ReallocAsyncCtx18 + 20 | 0; //@line 29014
    HEAP32[$261 >> 2] = $8; //@line 29015
    $262 = $ReallocAsyncCtx18 + 24 | 0; //@line 29016
    HEAP32[$262 >> 2] = $10; //@line 29017
    $263 = $ReallocAsyncCtx18 + 28 | 0; //@line 29018
    HEAP32[$263 >> 2] = $12; //@line 29019
    $264 = $ReallocAsyncCtx18 + 32 | 0; //@line 29020
    HEAP32[$264 >> 2] = $254; //@line 29021
    $265 = $ReallocAsyncCtx18 + 36 | 0; //@line 29022
    HEAP32[$265 >> 2] = $251; //@line 29023
    $266 = $ReallocAsyncCtx18 + 40 | 0; //@line 29024
    HEAP32[$266 >> 2] = $253; //@line 29025
    $267 = $ReallocAsyncCtx18 + 44 | 0; //@line 29026
    HEAP32[$267 >> 2] = $14; //@line 29027
    $268 = $ReallocAsyncCtx18 + 48 | 0; //@line 29028
    HEAP32[$268 >> 2] = $16; //@line 29029
    $269 = $ReallocAsyncCtx18 + 52 | 0; //@line 29030
    HEAP32[$269 >> 2] = $18; //@line 29031
    $270 = $ReallocAsyncCtx18 + 56 | 0; //@line 29032
    HEAP32[$270 >> 2] = $20; //@line 29033
    sp = STACKTOP; //@line 29034
    STACKTOP = sp; //@line 29035
    return;
   }
   ___async_unwind = 0; //@line 29037
   HEAP32[$ReallocAsyncCtx18 >> 2] = 472; //@line 29038
   $257 = $ReallocAsyncCtx18 + 4 | 0; //@line 29039
   HEAP32[$257 >> 2] = $29; //@line 29040
   $258 = $ReallocAsyncCtx18 + 8 | 0; //@line 29041
   HEAP32[$258 >> 2] = $2; //@line 29042
   $259 = $ReallocAsyncCtx18 + 12 | 0; //@line 29043
   HEAP32[$259 >> 2] = $4; //@line 29044
   $260 = $ReallocAsyncCtx18 + 16 | 0; //@line 29045
   HEAP32[$260 >> 2] = $6; //@line 29046
   $261 = $ReallocAsyncCtx18 + 20 | 0; //@line 29047
   HEAP32[$261 >> 2] = $8; //@line 29048
   $262 = $ReallocAsyncCtx18 + 24 | 0; //@line 29049
   HEAP32[$262 >> 2] = $10; //@line 29050
   $263 = $ReallocAsyncCtx18 + 28 | 0; //@line 29051
   HEAP32[$263 >> 2] = $12; //@line 29052
   $264 = $ReallocAsyncCtx18 + 32 | 0; //@line 29053
   HEAP32[$264 >> 2] = $254; //@line 29054
   $265 = $ReallocAsyncCtx18 + 36 | 0; //@line 29055
   HEAP32[$265 >> 2] = $251; //@line 29056
   $266 = $ReallocAsyncCtx18 + 40 | 0; //@line 29057
   HEAP32[$266 >> 2] = $253; //@line 29058
   $267 = $ReallocAsyncCtx18 + 44 | 0; //@line 29059
   HEAP32[$267 >> 2] = $14; //@line 29060
   $268 = $ReallocAsyncCtx18 + 48 | 0; //@line 29061
   HEAP32[$268 >> 2] = $16; //@line 29062
   $269 = $ReallocAsyncCtx18 + 52 | 0; //@line 29063
   HEAP32[$269 >> 2] = $18; //@line 29064
   $270 = $ReallocAsyncCtx18 + 56 | 0; //@line 29065
   HEAP32[$270 >> 2] = $20; //@line 29066
   sp = STACKTOP; //@line 29067
   STACKTOP = sp; //@line 29068
   return;
  } else {
   $271 = HEAP32[$255 >> 2] | 0; //@line 29070
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 29071
   FUNCTION_TABLE_vii[$271 & 31]($251, $253); //@line 29072
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 473; //@line 29075
    $272 = $ReallocAsyncCtx2 + 4 | 0; //@line 29076
    HEAP32[$272 >> 2] = $29; //@line 29077
    $273 = $ReallocAsyncCtx2 + 8 | 0; //@line 29078
    HEAP32[$273 >> 2] = $2; //@line 29079
    $274 = $ReallocAsyncCtx2 + 12 | 0; //@line 29080
    HEAP32[$274 >> 2] = $4; //@line 29081
    $275 = $ReallocAsyncCtx2 + 16 | 0; //@line 29082
    HEAP32[$275 >> 2] = $14; //@line 29083
    $276 = $ReallocAsyncCtx2 + 20 | 0; //@line 29084
    HEAP32[$276 >> 2] = $16; //@line 29085
    $277 = $ReallocAsyncCtx2 + 24 | 0; //@line 29086
    HEAP32[$277 >> 2] = $18; //@line 29087
    $278 = $ReallocAsyncCtx2 + 28 | 0; //@line 29088
    HEAP32[$278 >> 2] = $20; //@line 29089
    $279 = $ReallocAsyncCtx2 + 32 | 0; //@line 29090
    HEAP32[$279 >> 2] = $6; //@line 29091
    $280 = $ReallocAsyncCtx2 + 36 | 0; //@line 29092
    HEAP32[$280 >> 2] = $8; //@line 29093
    $281 = $ReallocAsyncCtx2 + 40 | 0; //@line 29094
    HEAP32[$281 >> 2] = $10; //@line 29095
    $282 = $ReallocAsyncCtx2 + 44 | 0; //@line 29096
    HEAP32[$282 >> 2] = $12; //@line 29097
    sp = STACKTOP; //@line 29098
    STACKTOP = sp; //@line 29099
    return;
   }
   ___async_unwind = 0; //@line 29101
   HEAP32[$ReallocAsyncCtx2 >> 2] = 473; //@line 29102
   $272 = $ReallocAsyncCtx2 + 4 | 0; //@line 29103
   HEAP32[$272 >> 2] = $29; //@line 29104
   $273 = $ReallocAsyncCtx2 + 8 | 0; //@line 29105
   HEAP32[$273 >> 2] = $2; //@line 29106
   $274 = $ReallocAsyncCtx2 + 12 | 0; //@line 29107
   HEAP32[$274 >> 2] = $4; //@line 29108
   $275 = $ReallocAsyncCtx2 + 16 | 0; //@line 29109
   HEAP32[$275 >> 2] = $14; //@line 29110
   $276 = $ReallocAsyncCtx2 + 20 | 0; //@line 29111
   HEAP32[$276 >> 2] = $16; //@line 29112
   $277 = $ReallocAsyncCtx2 + 24 | 0; //@line 29113
   HEAP32[$277 >> 2] = $18; //@line 29114
   $278 = $ReallocAsyncCtx2 + 28 | 0; //@line 29115
   HEAP32[$278 >> 2] = $20; //@line 29116
   $279 = $ReallocAsyncCtx2 + 32 | 0; //@line 29117
   HEAP32[$279 >> 2] = $6; //@line 29118
   $280 = $ReallocAsyncCtx2 + 36 | 0; //@line 29119
   HEAP32[$280 >> 2] = $8; //@line 29120
   $281 = $ReallocAsyncCtx2 + 40 | 0; //@line 29121
   HEAP32[$281 >> 2] = $10; //@line 29122
   $282 = $ReallocAsyncCtx2 + 44 | 0; //@line 29123
   HEAP32[$282 >> 2] = $12; //@line 29124
   sp = STACKTOP; //@line 29125
   STACKTOP = sp; //@line 29126
   return;
  }
 }
 if ($246 & 8) {
  HEAP8[$29 >> 0] = $246 & -9; //@line 29133
  $287 = HEAP32[$2 + 1324 >> 2] | 0; //@line 29135
  $288 = $287 + 32 | 0; //@line 29136
  $290 = __ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0; //@line 29138
  $291 = $287 + 44 | 0; //@line 29139
  $292 = HEAP32[$291 >> 2] | 0; //@line 29140
  if (!$292) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 29143
   _mbed_assert_internal(15352, 15357, 1102); //@line 29144
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 474; //@line 29147
    $294 = $ReallocAsyncCtx17 + 4 | 0; //@line 29148
    HEAP32[$294 >> 2] = $29; //@line 29149
    $295 = $ReallocAsyncCtx17 + 8 | 0; //@line 29150
    HEAP32[$295 >> 2] = $2; //@line 29151
    $296 = $ReallocAsyncCtx17 + 12 | 0; //@line 29152
    HEAP32[$296 >> 2] = $4; //@line 29153
    $297 = $ReallocAsyncCtx17 + 16 | 0; //@line 29154
    HEAP32[$297 >> 2] = $6; //@line 29155
    $298 = $ReallocAsyncCtx17 + 20 | 0; //@line 29156
    HEAP32[$298 >> 2] = $8; //@line 29157
    $299 = $ReallocAsyncCtx17 + 24 | 0; //@line 29158
    HEAP32[$299 >> 2] = $10; //@line 29159
    $300 = $ReallocAsyncCtx17 + 28 | 0; //@line 29160
    HEAP32[$300 >> 2] = $12; //@line 29161
    $301 = $ReallocAsyncCtx17 + 32 | 0; //@line 29162
    HEAP32[$301 >> 2] = $14; //@line 29163
    $302 = $ReallocAsyncCtx17 + 36 | 0; //@line 29164
    HEAP32[$302 >> 2] = $16; //@line 29165
    $303 = $ReallocAsyncCtx17 + 40 | 0; //@line 29166
    HEAP32[$303 >> 2] = $18; //@line 29167
    $304 = $ReallocAsyncCtx17 + 44 | 0; //@line 29168
    HEAP32[$304 >> 2] = $20; //@line 29169
    $305 = $ReallocAsyncCtx17 + 48 | 0; //@line 29170
    HEAP32[$305 >> 2] = $288; //@line 29171
    $306 = $ReallocAsyncCtx17 + 52 | 0; //@line 29172
    HEAP32[$306 >> 2] = $290; //@line 29173
    $307 = $ReallocAsyncCtx17 + 56 | 0; //@line 29174
    HEAP32[$307 >> 2] = $291; //@line 29175
    sp = STACKTOP; //@line 29176
    STACKTOP = sp; //@line 29177
    return;
   }
   ___async_unwind = 0; //@line 29179
   HEAP32[$ReallocAsyncCtx17 >> 2] = 474; //@line 29180
   $294 = $ReallocAsyncCtx17 + 4 | 0; //@line 29181
   HEAP32[$294 >> 2] = $29; //@line 29182
   $295 = $ReallocAsyncCtx17 + 8 | 0; //@line 29183
   HEAP32[$295 >> 2] = $2; //@line 29184
   $296 = $ReallocAsyncCtx17 + 12 | 0; //@line 29185
   HEAP32[$296 >> 2] = $4; //@line 29186
   $297 = $ReallocAsyncCtx17 + 16 | 0; //@line 29187
   HEAP32[$297 >> 2] = $6; //@line 29188
   $298 = $ReallocAsyncCtx17 + 20 | 0; //@line 29189
   HEAP32[$298 >> 2] = $8; //@line 29190
   $299 = $ReallocAsyncCtx17 + 24 | 0; //@line 29191
   HEAP32[$299 >> 2] = $10; //@line 29192
   $300 = $ReallocAsyncCtx17 + 28 | 0; //@line 29193
   HEAP32[$300 >> 2] = $12; //@line 29194
   $301 = $ReallocAsyncCtx17 + 32 | 0; //@line 29195
   HEAP32[$301 >> 2] = $14; //@line 29196
   $302 = $ReallocAsyncCtx17 + 36 | 0; //@line 29197
   HEAP32[$302 >> 2] = $16; //@line 29198
   $303 = $ReallocAsyncCtx17 + 40 | 0; //@line 29199
   HEAP32[$303 >> 2] = $18; //@line 29200
   $304 = $ReallocAsyncCtx17 + 44 | 0; //@line 29201
   HEAP32[$304 >> 2] = $20; //@line 29202
   $305 = $ReallocAsyncCtx17 + 48 | 0; //@line 29203
   HEAP32[$305 >> 2] = $288; //@line 29204
   $306 = $ReallocAsyncCtx17 + 52 | 0; //@line 29205
   HEAP32[$306 >> 2] = $290; //@line 29206
   $307 = $ReallocAsyncCtx17 + 56 | 0; //@line 29207
   HEAP32[$307 >> 2] = $291; //@line 29208
   sp = STACKTOP; //@line 29209
   STACKTOP = sp; //@line 29210
   return;
  } else {
   $308 = HEAP32[$292 >> 2] | 0; //@line 29212
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 29213
   FUNCTION_TABLE_vii[$308 & 31]($288, $290); //@line 29214
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 29217
    $309 = $ReallocAsyncCtx3 + 4 | 0; //@line 29218
    HEAP32[$309 >> 2] = $2; //@line 29219
    $310 = $ReallocAsyncCtx3 + 8 | 0; //@line 29220
    HEAP32[$310 >> 2] = $4; //@line 29221
    $311 = $ReallocAsyncCtx3 + 12 | 0; //@line 29222
    HEAP32[$311 >> 2] = $29; //@line 29223
    $312 = $ReallocAsyncCtx3 + 16 | 0; //@line 29224
    HEAP32[$312 >> 2] = $14; //@line 29225
    $313 = $ReallocAsyncCtx3 + 20 | 0; //@line 29226
    HEAP32[$313 >> 2] = $16; //@line 29227
    $314 = $ReallocAsyncCtx3 + 24 | 0; //@line 29228
    HEAP32[$314 >> 2] = $18; //@line 29229
    $315 = $ReallocAsyncCtx3 + 28 | 0; //@line 29230
    HEAP32[$315 >> 2] = $20; //@line 29231
    $316 = $ReallocAsyncCtx3 + 32 | 0; //@line 29232
    HEAP32[$316 >> 2] = $6; //@line 29233
    $317 = $ReallocAsyncCtx3 + 36 | 0; //@line 29234
    HEAP32[$317 >> 2] = $8; //@line 29235
    $318 = $ReallocAsyncCtx3 + 40 | 0; //@line 29236
    HEAP32[$318 >> 2] = $10; //@line 29237
    $319 = $ReallocAsyncCtx3 + 44 | 0; //@line 29238
    HEAP32[$319 >> 2] = $12; //@line 29239
    sp = STACKTOP; //@line 29240
    STACKTOP = sp; //@line 29241
    return;
   }
   ___async_unwind = 0; //@line 29243
   HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 29244
   $309 = $ReallocAsyncCtx3 + 4 | 0; //@line 29245
   HEAP32[$309 >> 2] = $2; //@line 29246
   $310 = $ReallocAsyncCtx3 + 8 | 0; //@line 29247
   HEAP32[$310 >> 2] = $4; //@line 29248
   $311 = $ReallocAsyncCtx3 + 12 | 0; //@line 29249
   HEAP32[$311 >> 2] = $29; //@line 29250
   $312 = $ReallocAsyncCtx3 + 16 | 0; //@line 29251
   HEAP32[$312 >> 2] = $14; //@line 29252
   $313 = $ReallocAsyncCtx3 + 20 | 0; //@line 29253
   HEAP32[$313 >> 2] = $16; //@line 29254
   $314 = $ReallocAsyncCtx3 + 24 | 0; //@line 29255
   HEAP32[$314 >> 2] = $18; //@line 29256
   $315 = $ReallocAsyncCtx3 + 28 | 0; //@line 29257
   HEAP32[$315 >> 2] = $20; //@line 29258
   $316 = $ReallocAsyncCtx3 + 32 | 0; //@line 29259
   HEAP32[$316 >> 2] = $6; //@line 29260
   $317 = $ReallocAsyncCtx3 + 36 | 0; //@line 29261
   HEAP32[$317 >> 2] = $8; //@line 29262
   $318 = $ReallocAsyncCtx3 + 40 | 0; //@line 29263
   HEAP32[$318 >> 2] = $10; //@line 29264
   $319 = $ReallocAsyncCtx3 + 44 | 0; //@line 29265
   HEAP32[$319 >> 2] = $12; //@line 29266
   sp = STACKTOP; //@line 29267
   STACKTOP = sp; //@line 29268
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($2 + 4 | 0) | 0) {
  _printf(13258, $14) | 0; //@line 29274
  _printf(13405, $18) | 0; //@line 29275
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 29276
  _putchar(10) | 0; //@line 29277
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 476; //@line 29280
   $322 = $ReallocAsyncCtx7 + 4 | 0; //@line 29281
   HEAP32[$322 >> 2] = $2; //@line 29282
   $323 = $ReallocAsyncCtx7 + 8 | 0; //@line 29283
   HEAP32[$323 >> 2] = $4; //@line 29284
   $324 = $ReallocAsyncCtx7 + 12 | 0; //@line 29285
   HEAP32[$324 >> 2] = $29; //@line 29286
   $325 = $ReallocAsyncCtx7 + 16 | 0; //@line 29287
   HEAP32[$325 >> 2] = $6; //@line 29288
   $326 = $ReallocAsyncCtx7 + 20 | 0; //@line 29289
   HEAP32[$326 >> 2] = $8; //@line 29290
   $327 = $ReallocAsyncCtx7 + 24 | 0; //@line 29291
   HEAP32[$327 >> 2] = $10; //@line 29292
   $328 = $ReallocAsyncCtx7 + 28 | 0; //@line 29293
   HEAP32[$328 >> 2] = $12; //@line 29294
   sp = STACKTOP; //@line 29295
   STACKTOP = sp; //@line 29296
   return;
  }
  ___async_unwind = 0; //@line 29298
  HEAP32[$ReallocAsyncCtx7 >> 2] = 476; //@line 29299
  $322 = $ReallocAsyncCtx7 + 4 | 0; //@line 29300
  HEAP32[$322 >> 2] = $2; //@line 29301
  $323 = $ReallocAsyncCtx7 + 8 | 0; //@line 29302
  HEAP32[$323 >> 2] = $4; //@line 29303
  $324 = $ReallocAsyncCtx7 + 12 | 0; //@line 29304
  HEAP32[$324 >> 2] = $29; //@line 29305
  $325 = $ReallocAsyncCtx7 + 16 | 0; //@line 29306
  HEAP32[$325 >> 2] = $6; //@line 29307
  $326 = $ReallocAsyncCtx7 + 20 | 0; //@line 29308
  HEAP32[$326 >> 2] = $8; //@line 29309
  $327 = $ReallocAsyncCtx7 + 24 | 0; //@line 29310
  HEAP32[$327 >> 2] = $10; //@line 29311
  $328 = $ReallocAsyncCtx7 + 28 | 0; //@line 29312
  HEAP32[$328 >> 2] = $12; //@line 29313
  sp = STACKTOP; //@line 29314
  STACKTOP = sp; //@line 29315
  return;
 }
 $329 = HEAP8[$29 >> 0] & -33; //@line 29318
 HEAP8[$29 >> 0] = $329; //@line 29319
 do {
  if (!($329 & 2)) {
   $368 = $329; //@line 29324
  } else {
   $340 = $329 & -3; //@line 29326
   HEAP8[$29 >> 0] = $340; //@line 29327
   if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
    _printf(13258, $6) | 0; //@line 29332
    _printf(13285, $10) | 0; //@line 29333
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 29334
    _putchar(10) | 0; //@line 29335
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 29338
     $344 = $ReallocAsyncCtx6 + 4 | 0; //@line 29339
     HEAP32[$344 >> 2] = $2; //@line 29340
     $345 = $ReallocAsyncCtx6 + 8 | 0; //@line 29341
     HEAP32[$345 >> 2] = $4; //@line 29342
     $346 = $ReallocAsyncCtx6 + 12 | 0; //@line 29343
     HEAP32[$346 >> 2] = $4; //@line 29344
     $347 = $ReallocAsyncCtx6 + 16 | 0; //@line 29345
     HEAP32[$347 >> 2] = $29; //@line 29346
     sp = STACKTOP; //@line 29347
     STACKTOP = sp; //@line 29348
     return;
    }
    ___async_unwind = 0; //@line 29350
    HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 29351
    $344 = $ReallocAsyncCtx6 + 4 | 0; //@line 29352
    HEAP32[$344 >> 2] = $2; //@line 29353
    $345 = $ReallocAsyncCtx6 + 8 | 0; //@line 29354
    HEAP32[$345 >> 2] = $4; //@line 29355
    $346 = $ReallocAsyncCtx6 + 12 | 0; //@line 29356
    HEAP32[$346 >> 2] = $4; //@line 29357
    $347 = $ReallocAsyncCtx6 + 16 | 0; //@line 29358
    HEAP32[$347 >> 2] = $29; //@line 29359
    sp = STACKTOP; //@line 29360
    STACKTOP = sp; //@line 29361
    return;
   }
   if ($340 & 4) {
    $366 = $340 & -5; //@line 29366
    HEAP8[$29 >> 0] = $366; //@line 29367
    $368 = $366; //@line 29368
    break;
   }
   $351 = HEAP32[$2 + 1324 >> 2] | 0; //@line 29372
   $352 = $351 + 16 | 0; //@line 29373
   $354 = __ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0; //@line 29375
   $355 = $351 + 28 | 0; //@line 29376
   $356 = HEAP32[$355 >> 2] | 0; //@line 29377
   if (!$356) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 29380
    _mbed_assert_internal(15352, 15357, 1102); //@line 29381
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 29384
     $358 = $ReallocAsyncCtx15 + 4 | 0; //@line 29385
     HEAP32[$358 >> 2] = $355; //@line 29386
     $359 = $ReallocAsyncCtx15 + 8 | 0; //@line 29387
     HEAP32[$359 >> 2] = $352; //@line 29388
     $360 = $ReallocAsyncCtx15 + 12 | 0; //@line 29389
     HEAP32[$360 >> 2] = $354; //@line 29390
     $361 = $ReallocAsyncCtx15 + 16 | 0; //@line 29391
     HEAP32[$361 >> 2] = $29; //@line 29392
     $362 = $ReallocAsyncCtx15 + 20 | 0; //@line 29393
     HEAP32[$362 >> 2] = $2; //@line 29394
     sp = STACKTOP; //@line 29395
     STACKTOP = sp; //@line 29396
     return;
    }
    ___async_unwind = 0; //@line 29398
    HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 29399
    $358 = $ReallocAsyncCtx15 + 4 | 0; //@line 29400
    HEAP32[$358 >> 2] = $355; //@line 29401
    $359 = $ReallocAsyncCtx15 + 8 | 0; //@line 29402
    HEAP32[$359 >> 2] = $352; //@line 29403
    $360 = $ReallocAsyncCtx15 + 12 | 0; //@line 29404
    HEAP32[$360 >> 2] = $354; //@line 29405
    $361 = $ReallocAsyncCtx15 + 16 | 0; //@line 29406
    HEAP32[$361 >> 2] = $29; //@line 29407
    $362 = $ReallocAsyncCtx15 + 20 | 0; //@line 29408
    HEAP32[$362 >> 2] = $2; //@line 29409
    sp = STACKTOP; //@line 29410
    STACKTOP = sp; //@line 29411
    return;
   } else {
    $363 = HEAP32[$356 >> 2] | 0; //@line 29413
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 29414
    FUNCTION_TABLE_vii[$363 & 31]($352, $354); //@line 29415
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 29418
     $364 = $ReallocAsyncCtx4 + 4 | 0; //@line 29419
     HEAP32[$364 >> 2] = $29; //@line 29420
     $365 = $ReallocAsyncCtx4 + 8 | 0; //@line 29421
     HEAP32[$365 >> 2] = $2; //@line 29422
     sp = STACKTOP; //@line 29423
     STACKTOP = sp; //@line 29424
     return;
    }
    ___async_unwind = 0; //@line 29426
    HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 29427
    $364 = $ReallocAsyncCtx4 + 4 | 0; //@line 29428
    HEAP32[$364 >> 2] = $29; //@line 29429
    $365 = $ReallocAsyncCtx4 + 8 | 0; //@line 29430
    HEAP32[$365 >> 2] = $2; //@line 29431
    sp = STACKTOP; //@line 29432
    STACKTOP = sp; //@line 29433
    return;
   }
  }
 } while (0);
 if (!($368 & 16)) {
  STACKTOP = sp; //@line 29440
  return;
 }
 HEAP8[$29 >> 0] = $368 & -17; //@line 29443
 $372 = HEAP32[$2 + 1324 >> 2] | 0; //@line 29445
 $373 = $372 + 48 | 0; //@line 29446
 $375 = __ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0; //@line 29448
 $376 = $372 + 60 | 0; //@line 29449
 $377 = HEAP32[$376 >> 2] | 0; //@line 29450
 if (!$377) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 29453
  _mbed_assert_internal(15352, 15357, 1102); //@line 29454
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 29457
   $379 = $ReallocAsyncCtx14 + 4 | 0; //@line 29458
   HEAP32[$379 >> 2] = $376; //@line 29459
   $380 = $ReallocAsyncCtx14 + 8 | 0; //@line 29460
   HEAP32[$380 >> 2] = $373; //@line 29461
   $381 = $ReallocAsyncCtx14 + 12 | 0; //@line 29462
   HEAP32[$381 >> 2] = $375; //@line 29463
   sp = STACKTOP; //@line 29464
   STACKTOP = sp; //@line 29465
   return;
  }
  ___async_unwind = 0; //@line 29467
  HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 29468
  $379 = $ReallocAsyncCtx14 + 4 | 0; //@line 29469
  HEAP32[$379 >> 2] = $376; //@line 29470
  $380 = $ReallocAsyncCtx14 + 8 | 0; //@line 29471
  HEAP32[$380 >> 2] = $373; //@line 29472
  $381 = $ReallocAsyncCtx14 + 12 | 0; //@line 29473
  HEAP32[$381 >> 2] = $375; //@line 29474
  sp = STACKTOP; //@line 29475
  STACKTOP = sp; //@line 29476
  return;
 } else {
  $382 = HEAP32[$377 >> 2] | 0; //@line 29478
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 29479
  FUNCTION_TABLE_vii[$382 & 31]($373, $375); //@line 29480
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 29483
   sp = STACKTOP; //@line 29484
   STACKTOP = sp; //@line 29485
   return;
  }
  ___async_unwind = 0; //@line 29487
  HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 29488
  sp = STACKTOP; //@line 29489
  STACKTOP = sp; //@line 29490
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0174 = 0, $$0174209 = 0, $$0174210 = 0, $$1$off0 = 0, $$1169 = 0, $$1171 = 0, $$1173 = 0, $$1175 = 0, $$3$off0204 = 0, $$3179 = 0, $$sink = 0, $$sink200 = 0, $$sink207 = 0, $110 = 0, $111 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $131 = 0, $132 = 0, $215 = 0, $225 = 0, $229 = 0, $236 = 0, $239 = 0, $258 = 0, $27 = 0, $28 = 0, $285 = 0, $29 = 0, $303 = 0, $305 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $339 = 0, $340 = 0, $341 = 0, $343 = 0, $37 = 0, $385 = 0, $425 = 0, $429 = 0, $431 = 0, $451 = 0, $454 = 0, $455 = 0, $465 = 0, $467 = 0, $468 = 0, $472 = 0, $473 = 0, $488 = 0, $490 = 0, $491 = 0, $492 = 0, $496 = 0, $5 = 0, $500 = 0, $505 = 0, $506 = 0, $508 = 0, $509 = 0, $537 = 0, $540 = 0, $541 = 0, $543 = 0, $544 = 0, $57 = 0, $584 = 0, $589 = 0, $590 = 0, $602 = 0, $603 = 0, $605 = 0, $606 = 0, $634 = 0, $640 = 0, $643 = 0, $654 = 0, $660 = 0, $666 = 0, $677 = 0, $686 = 0, $689 = 0, $82 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx102 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $AsyncCtx32 = 0, $AsyncCtx36 = 0, $AsyncCtx40 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx50 = 0, $AsyncCtx53 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $AsyncCtx68 = 0, $AsyncCtx72 = 0, $AsyncCtx76 = 0, $AsyncCtx79 = 0, $AsyncCtx83 = 0, $AsyncCtx87 = 0, $AsyncCtx91 = 0, $AsyncCtx95 = 0, $AsyncCtx99 = 0, $sext = 0, $trunc = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12189
 STACKTOP = STACKTOP + 80 | 0; //@line 12190
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 12190
 $vararg_buffer16 = sp + 64 | 0; //@line 12191
 $vararg_buffer14 = sp + 56 | 0; //@line 12192
 $vararg_buffer12 = sp + 48 | 0; //@line 12193
 $vararg_buffer10 = sp + 40 | 0; //@line 12194
 $vararg_buffer8 = sp + 32 | 0; //@line 12195
 $vararg_buffer6 = sp + 24 | 0; //@line 12196
 $vararg_buffer1 = sp + 8 | 0; //@line 12197
 $vararg_buffer = sp; //@line 12198
 _printf(13258, $vararg_buffer) | 0; //@line 12199
 $5 = $2 & 65535; //@line 12200
 HEAP32[$vararg_buffer1 >> 2] = $1; //@line 12203
 HEAP32[$vararg_buffer1 + 4 >> 2] = $5; //@line 12205
 HEAP32[$vararg_buffer1 + 8 >> 2] = $3 << 16 >> 16; //@line 12207
 HEAP32[$vararg_buffer1 + 12 >> 2] = $4 << 24 >> 24; //@line 12209
 _printf(13350, $vararg_buffer1) | 0; //@line 12210
 $AsyncCtx32 = _emscripten_alloc_async_context(80, sp) | 0; //@line 12211
 _putchar(10) | 0; //@line 12212
 if (___async) {
  HEAP32[$AsyncCtx32 >> 2] = 391; //@line 12215
  HEAP32[$AsyncCtx32 + 4 >> 2] = $0; //@line 12217
  HEAP32[$AsyncCtx32 + 8 >> 2] = $5; //@line 12219
  HEAP32[$AsyncCtx32 + 12 >> 2] = $1; //@line 12221
  HEAP32[$AsyncCtx32 + 16 >> 2] = $vararg_buffer1; //@line 12223
  HEAP32[$AsyncCtx32 + 20 >> 2] = $vararg_buffer; //@line 12225
  HEAP32[$AsyncCtx32 + 24 >> 2] = $vararg_buffer14; //@line 12227
  HEAP32[$AsyncCtx32 + 28 >> 2] = $vararg_buffer14; //@line 12229
  HEAP32[$AsyncCtx32 + 32 >> 2] = $vararg_buffer16; //@line 12231
  HEAP32[$AsyncCtx32 + 36 >> 2] = $vararg_buffer16; //@line 12233
  HEAP8[$AsyncCtx32 + 40 >> 0] = $4; //@line 12235
  HEAP32[$AsyncCtx32 + 44 >> 2] = $vararg_buffer10; //@line 12237
  HEAP32[$AsyncCtx32 + 48 >> 2] = $vararg_buffer10; //@line 12239
  HEAP32[$AsyncCtx32 + 52 >> 2] = $vararg_buffer12; //@line 12241
  HEAP32[$AsyncCtx32 + 56 >> 2] = $vararg_buffer12; //@line 12243
  HEAP32[$AsyncCtx32 + 60 >> 2] = $vararg_buffer6; //@line 12245
  HEAP32[$AsyncCtx32 + 64 >> 2] = $vararg_buffer6; //@line 12247
  HEAP32[$AsyncCtx32 + 68 >> 2] = $vararg_buffer8; //@line 12249
  HEAP32[$AsyncCtx32 + 72 >> 2] = $vararg_buffer8; //@line 12251
  HEAP16[$AsyncCtx32 + 76 >> 1] = $3; //@line 12253
  sp = STACKTOP; //@line 12254
  STACKTOP = sp; //@line 12255
  return;
 }
 _emscripten_free_async_context($AsyncCtx32 | 0); //@line 12257
 HEAP32[$vararg_buffer >> 2] = 0; //@line 12258
 $27 = $0 + 912 | 0; //@line 12259
 $28 = $0 + 928 | 0; //@line 12260
 $29 = $0 + 288 | 0; //@line 12261
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 10 >> 0] = 0; //@line 12264
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 20 >> 1] = $3; //@line 12267
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 22 >> 0] = $4; //@line 12270
 $37 = HEAP32[$0 + 364 >> 2] | 0; //@line 12272
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 24 >> 2] = $37; //@line 12275
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 9 >> 0] = 0; //@line 12278
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 8 >> 0] = 0; //@line 12281
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 11 >> 0] = 0; //@line 12284
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 12 >> 2] = 0; //@line 12287
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 16 >> 1] = 0; //@line 12290
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 18 >> 0] = 0; //@line 12293
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 28 >> 0] = 0; //@line 12296
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 32 >> 2] = 0; //@line 12299
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) >> 2] = 0; //@line 12301
 $57 = HEAP32[$0 >> 2] | 0; //@line 12302
 $AsyncCtx79 = _emscripten_alloc_async_context(100, sp) | 0; //@line 12303
 __ZN7LoRaPHY18put_radio_to_sleepEv($57); //@line 12304
 if (___async) {
  HEAP32[$AsyncCtx79 >> 2] = 392; //@line 12307
  HEAP32[$AsyncCtx79 + 4 >> 2] = $vararg_buffer; //@line 12309
  HEAP32[$AsyncCtx79 + 8 >> 2] = $vararg_buffer1; //@line 12311
  HEAP32[$AsyncCtx79 + 12 >> 2] = $29; //@line 12313
  HEAP32[$AsyncCtx79 + 16 >> 2] = $0; //@line 12315
  HEAP32[$AsyncCtx79 + 20 >> 2] = $0; //@line 12317
  HEAP32[$AsyncCtx79 + 24 >> 2] = $5; //@line 12319
  HEAP32[$AsyncCtx79 + 28 >> 2] = $1; //@line 12321
  HEAP32[$AsyncCtx79 + 32 >> 2] = $27; //@line 12323
  HEAP32[$AsyncCtx79 + 36 >> 2] = $28; //@line 12325
  HEAP32[$AsyncCtx79 + 40 >> 2] = $vararg_buffer1; //@line 12327
  HEAP32[$AsyncCtx79 + 44 >> 2] = $vararg_buffer; //@line 12329
  HEAP32[$AsyncCtx79 + 48 >> 2] = $vararg_buffer14; //@line 12331
  HEAP32[$AsyncCtx79 + 52 >> 2] = $vararg_buffer14; //@line 12333
  HEAP32[$AsyncCtx79 + 56 >> 2] = $vararg_buffer16; //@line 12335
  HEAP32[$AsyncCtx79 + 60 >> 2] = $vararg_buffer16; //@line 12337
  HEAP8[$AsyncCtx79 + 64 >> 0] = $4; //@line 12339
  HEAP32[$AsyncCtx79 + 68 >> 2] = $vararg_buffer10; //@line 12341
  HEAP32[$AsyncCtx79 + 72 >> 2] = $vararg_buffer10; //@line 12343
  HEAP32[$AsyncCtx79 + 76 >> 2] = $vararg_buffer12; //@line 12345
  HEAP32[$AsyncCtx79 + 80 >> 2] = $vararg_buffer12; //@line 12347
  HEAP32[$AsyncCtx79 + 84 >> 2] = $vararg_buffer6; //@line 12349
  HEAP32[$AsyncCtx79 + 88 >> 2] = $vararg_buffer6; //@line 12351
  HEAP32[$AsyncCtx79 + 92 >> 2] = $vararg_buffer8; //@line 12353
  HEAP32[$AsyncCtx79 + 96 >> 2] = $vararg_buffer8; //@line 12355
  sp = STACKTOP; //@line 12356
  STACKTOP = sp; //@line 12357
  return;
 }
 _emscripten_free_async_context($AsyncCtx79 | 0); //@line 12359
 $82 = $0 + 356 | 0; //@line 12360
 $83 = HEAP32[$82 >> 2] | 0; //@line 12361
 $AsyncCtx102 = _emscripten_alloc_async_context(104, sp) | 0; //@line 12363
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($83, $0 + 1056 | 0); //@line 12364
 if (___async) {
  HEAP32[$AsyncCtx102 >> 2] = 393; //@line 12367
  HEAP32[$AsyncCtx102 + 4 >> 2] = $vararg_buffer; //@line 12369
  HEAP32[$AsyncCtx102 + 8 >> 2] = $vararg_buffer1; //@line 12371
  HEAP32[$AsyncCtx102 + 12 >> 2] = $29; //@line 12373
  HEAP32[$AsyncCtx102 + 16 >> 2] = $0; //@line 12375
  HEAP32[$AsyncCtx102 + 20 >> 2] = $0; //@line 12377
  HEAP32[$AsyncCtx102 + 24 >> 2] = $5; //@line 12379
  HEAP32[$AsyncCtx102 + 28 >> 2] = $82; //@line 12381
  HEAP32[$AsyncCtx102 + 32 >> 2] = $1; //@line 12383
  HEAP32[$AsyncCtx102 + 36 >> 2] = $27; //@line 12385
  HEAP32[$AsyncCtx102 + 40 >> 2] = $28; //@line 12387
  HEAP32[$AsyncCtx102 + 44 >> 2] = $vararg_buffer1; //@line 12389
  HEAP32[$AsyncCtx102 + 48 >> 2] = $vararg_buffer6; //@line 12391
  HEAP32[$AsyncCtx102 + 52 >> 2] = $vararg_buffer6; //@line 12393
  HEAP32[$AsyncCtx102 + 56 >> 2] = $vararg_buffer8; //@line 12395
  HEAP32[$AsyncCtx102 + 60 >> 2] = $vararg_buffer8; //@line 12397
  HEAP32[$AsyncCtx102 + 64 >> 2] = $vararg_buffer; //@line 12399
  HEAP32[$AsyncCtx102 + 68 >> 2] = $vararg_buffer14; //@line 12401
  HEAP32[$AsyncCtx102 + 72 >> 2] = $vararg_buffer14; //@line 12403
  HEAP32[$AsyncCtx102 + 76 >> 2] = $vararg_buffer16; //@line 12405
  HEAP32[$AsyncCtx102 + 80 >> 2] = $vararg_buffer16; //@line 12407
  HEAP8[$AsyncCtx102 + 84 >> 0] = $4; //@line 12409
  HEAP32[$AsyncCtx102 + 88 >> 2] = $vararg_buffer10; //@line 12411
  HEAP32[$AsyncCtx102 + 92 >> 2] = $vararg_buffer10; //@line 12413
  HEAP32[$AsyncCtx102 + 96 >> 2] = $vararg_buffer12; //@line 12415
  HEAP32[$AsyncCtx102 + 100 >> 2] = $vararg_buffer12; //@line 12417
  sp = STACKTOP; //@line 12418
  STACKTOP = sp; //@line 12419
  return;
 }
 _emscripten_free_async_context($AsyncCtx102 | 0); //@line 12421
 $110 = HEAP8[$1 >> 0] | 0; //@line 12422
 $trunc = ($110 & 255) >>> 5; //@line 12423
 L10 : do {
  switch ($trunc & 7) {
  case 1:
   {
    $111 = $0 + 372 | 0; //@line 12428
    if (HEAP8[$111 >> 0] | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 12434
     $AsyncCtx60 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12435
     __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12436
     if (___async) {
      HEAP32[$AsyncCtx60 >> 2] = 394; //@line 12439
      HEAP32[$AsyncCtx60 + 4 >> 2] = $vararg_buffer; //@line 12441
      HEAP32[$AsyncCtx60 + 8 >> 2] = $vararg_buffer1; //@line 12443
      sp = STACKTOP; //@line 12444
      STACKTOP = sp; //@line 12445
      return;
     }
     _emscripten_free_async_context($AsyncCtx60 | 0); //@line 12447
     STACKTOP = sp; //@line 12448
     return;
    }
    $121 = $0 + 908 | 0; //@line 12453
    $123 = $0 + 638 | 0; //@line 12455
    $124 = $0 + 639 | 0; //@line 12456
    if (__Z18decrypt_join_framePKhtS0_Ph($1 + 1 | 0, $5 + 65535 & 65535, HEAP32[$121 >> 2] | 0, $124) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 13; //@line 12462
     STACKTOP = sp; //@line 12463
     return;
    }
    HEAP8[$123 >> 0] = $110; //@line 12465
    $129 = $5 + -4 | 0; //@line 12466
    $131 = HEAP32[$121 >> 2] | 0; //@line 12468
    $AsyncCtx72 = _emscripten_alloc_async_context(64, sp) | 0; //@line 12469
    $132 = __Z22compute_join_frame_micPKhtS0_Pj($123, $129 & 65535, $131, $vararg_buffer) | 0; //@line 12470
    if (___async) {
     HEAP32[$AsyncCtx72 >> 2] = 395; //@line 12473
     HEAP32[$AsyncCtx72 + 4 >> 2] = $0; //@line 12475
     HEAP32[$AsyncCtx72 + 8 >> 2] = $129; //@line 12477
     HEAP32[$AsyncCtx72 + 12 >> 2] = $5; //@line 12479
     HEAP32[$AsyncCtx72 + 16 >> 2] = $vararg_buffer; //@line 12481
     HEAP32[$AsyncCtx72 + 20 >> 2] = $29; //@line 12483
     HEAP32[$AsyncCtx72 + 24 >> 2] = $vararg_buffer; //@line 12485
     HEAP32[$AsyncCtx72 + 28 >> 2] = $vararg_buffer1; //@line 12487
     HEAP32[$AsyncCtx72 + 32 >> 2] = $121; //@line 12489
     HEAP32[$AsyncCtx72 + 36 >> 2] = $124; //@line 12491
     HEAP32[$AsyncCtx72 + 40 >> 2] = $27; //@line 12493
     HEAP32[$AsyncCtx72 + 44 >> 2] = $28; //@line 12495
     HEAP32[$AsyncCtx72 + 48 >> 2] = $82; //@line 12497
     HEAP32[$AsyncCtx72 + 52 >> 2] = $vararg_buffer1; //@line 12499
     HEAP32[$AsyncCtx72 + 56 >> 2] = $0; //@line 12501
     HEAP32[$AsyncCtx72 + 60 >> 2] = $111; //@line 12503
     sp = STACKTOP; //@line 12504
     STACKTOP = sp; //@line 12505
     return;
    }
    _emscripten_free_async_context($AsyncCtx72 | 0); //@line 12507
    if ($132 | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 13; //@line 12512
     STACKTOP = sp; //@line 12513
     return;
    }
    if ((HEAPU8[$5 + -3 + ($0 + 638) >> 0] << 8 | HEAPU8[$0 + 638 + $129 >> 0] | HEAPU8[$5 + -2 + ($0 + 638) >> 0] << 16 | HEAPU8[$5 + -1 + ($0 + 638) >> 0] << 24 | 0) != (HEAP32[$vararg_buffer >> 2] | 0)) {
     HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 7; //@line 12542
     break L10;
    }
    if (__Z28compute_skeys_for_join_framePKhS0_tPhS1_(HEAP32[$121 >> 2] | 0, $124, HEAP16[$0 + 946 >> 1] | 0, $27, $28) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 13; //@line 12553
     STACKTOP = sp; //@line 12554
     return;
    }
    HEAP32[$0 + 948 >> 2] = HEAPU8[$0 + 644 >> 0] << 16 | (HEAPU8[$0 + 643 >> 0] << 8 | HEAPU8[$0 + 642 >> 0]); //@line 12570
    HEAP32[$0 + 952 >> 2] = HEAPU8[$0 + 648 >> 0] << 24 | (HEAPU8[$0 + 647 >> 0] << 16 | (HEAPU8[$0 + 646 >> 0] << 8 | HEAPU8[$0 + 645 >> 0])); //@line 12590
    $215 = HEAP8[$0 + 649 >> 0] | 0; //@line 12592
    HEAP8[$0 + 1129 >> 0] = ($215 & 255) >>> 4 & 7; //@line 12598
    HEAP8[$0 + 1136 >> 0] = $215 & 15; //@line 12601
    $225 = HEAP8[$0 + 650 >> 0] & 15; //@line 12604
    $229 = $225 << 24 >> 24 == 0 ? 1e3 : ($225 & 255) * 1e3 | 0; //@line 12609
    HEAP32[$0 + 1112 >> 2] = $229; //@line 12610
    HEAP32[$0 + 1116 >> 2] = $229 + 1e3; //@line 12613
    HEAP32[$vararg_buffer1 >> 2] = $0 + 651; //@line 12615
    HEAP8[$vararg_buffer1 + 4 >> 0] = $5 + 239; //@line 12619
    $236 = HEAP32[$0 >> 2] | 0; //@line 12620
    $239 = HEAP32[(HEAP32[$236 >> 2] | 0) + 20 >> 2] | 0; //@line 12623
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 12624
    FUNCTION_TABLE_vii[$239 & 31]($236, $vararg_buffer1); //@line 12625
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 396; //@line 12628
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12630
     HEAP32[$AsyncCtx + 8 >> 2] = $111; //@line 12632
     HEAP32[$AsyncCtx + 12 >> 2] = $82; //@line 12634
     HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 12636
     HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer1; //@line 12638
     sp = STACKTOP; //@line 12639
     STACKTOP = sp; //@line 12640
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 12642
     HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 0; //@line 12646
     HEAP8[$111 >> 0] = 1; //@line 12647
     break L10;
    }
    break;
   }
  case 3:
  case 5:
   {
    $258 = __ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 10 >> 0] | 0, (HEAP8[$0 + 369 >> 0] | 0) != 0) | 0; //@line 12660
    $sext = ($5 << 16) + -851968 | 0; //@line 12662
    if (((($sext | 0) < 0 ? 0 : $sext >> 16) | 0) > ($258 & 255 | 0)) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 12671
     $AsyncCtx56 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12672
     __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12673
     if (___async) {
      HEAP32[$AsyncCtx56 >> 2] = 397; //@line 12676
      HEAP32[$AsyncCtx56 + 4 >> 2] = $vararg_buffer; //@line 12678
      HEAP32[$AsyncCtx56 + 8 >> 2] = $vararg_buffer1; //@line 12680
      sp = STACKTOP; //@line 12681
      STACKTOP = sp; //@line 12682
      return;
     }
     _emscripten_free_async_context($AsyncCtx56 | 0); //@line 12684
     STACKTOP = sp; //@line 12685
     return;
    }
    $285 = HEAPU8[$1 + 2 >> 0] << 8 | HEAPU8[$1 + 1 >> 0] | HEAPU8[$1 + 3 >> 0] << 16 | HEAPU8[$1 + 4 >> 0] << 24; //@line 12704
    L52 : do {
     if (($285 | 0) == (HEAP32[$0 + 952 >> 2] | 0)) {
      $$1169 = 0; //@line 12711
      $$1171 = $28; //@line 12711
      $$1173 = $27; //@line 12711
      $$1175 = 0; //@line 12711
      $$sink207 = $0 + 960 | 0; //@line 12711
     } else {
      $$0174209 = HEAP32[$0 + 1208 >> 2] | 0; //@line 12714
      L55 : do {
       if ($$0174209 | 0) {
        $$0174210 = $$0174209; //@line 12718
        while (1) {
         if (($285 | 0) == (HEAP32[$$0174210 >> 2] | 0)) {
          break;
         }
         $$0174 = HEAP32[$$0174210 + 40 >> 2] | 0; //@line 12726
         if (!$$0174) {
          break L55;
         } else {
          $$0174210 = $$0174; //@line 12731
         }
        }
        $$1169 = 1; //@line 12737
        $$1171 = $$0174210 + 20 | 0; //@line 12737
        $$1173 = $$0174210 + 4 | 0; //@line 12737
        $$1175 = $$0174210; //@line 12737
        $$sink207 = $$0174210 + 36 | 0; //@line 12737
        break L52;
       }
      } while (0);
      HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 11; //@line 12743
      $AsyncCtx53 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12744
      __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12745
      if (___async) {
       HEAP32[$AsyncCtx53 >> 2] = 398; //@line 12748
       HEAP32[$AsyncCtx53 + 4 >> 2] = $vararg_buffer; //@line 12750
       HEAP32[$AsyncCtx53 + 8 >> 2] = $vararg_buffer1; //@line 12752
       sp = STACKTOP; //@line 12753
       STACKTOP = sp; //@line 12754
       return;
      }
      _emscripten_free_async_context($AsyncCtx53 | 0); //@line 12756
      STACKTOP = sp; //@line 12757
      return;
     }
    } while (0);
    $303 = HEAP32[$$sink207 >> 2] | 0; //@line 12760
    $305 = HEAP8[$1 + 5 >> 0] | 0; //@line 12762
    $314 = $305 & 15; //@line 12771
    $315 = $314 & 255; //@line 12772
    $316 = $315 + 8 | 0; //@line 12773
    $317 = $316 & 255; //@line 12774
    $318 = $5 + -4 | 0; //@line 12775
    $339 = HEAPU8[$1 + ($5 + -3) >> 0] << 8 | HEAPU8[$1 + $318 >> 0] | HEAPU8[$1 + ($5 + -2) >> 0] << 16 | HEAPU8[$1 + ($5 + -1) >> 0] << 24; //@line 12796
    $340 = (HEAPU8[$1 + 7 >> 0] << 8 | HEAPU8[$1 + 6 >> 0]) - $303 | 0; //@line 12797
    $341 = $340 & 65535; //@line 12798
    do {
     if ($341 >>> 0 < 32768) {
      $343 = $341 + $303 | 0; //@line 12802
      $AsyncCtx68 = _emscripten_alloc_async_context(148, sp) | 0; //@line 12804
      __Z11compute_micPKhtS0_jhjPj($1, $318 & 65535, $$1173, $285, 1, $343, $vararg_buffer) | 0; //@line 12805
      if (___async) {
       HEAP32[$AsyncCtx68 >> 2] = 399; //@line 12808
       HEAP32[$AsyncCtx68 + 4 >> 2] = $vararg_buffer10; //@line 12810
       HEAP32[$AsyncCtx68 + 8 >> 2] = $vararg_buffer; //@line 12812
       HEAP32[$AsyncCtx68 + 12 >> 2] = $285; //@line 12814
       HEAP32[$AsyncCtx68 + 16 >> 2] = $$1173; //@line 12816
       HEAP32[$AsyncCtx68 + 20 >> 2] = $0; //@line 12818
       HEAP32[$AsyncCtx68 + 24 >> 2] = $$1175; //@line 12820
       HEAP32[$AsyncCtx68 + 28 >> 2] = $vararg_buffer16; //@line 12822
       HEAP8[$AsyncCtx68 + 32 >> 0] = $$1169; //@line 12824
       HEAP32[$AsyncCtx68 + 36 >> 2] = $318; //@line 12826
       HEAP32[$AsyncCtx68 + 40 >> 2] = $vararg_buffer16; //@line 12828
       HEAP32[$AsyncCtx68 + 44 >> 2] = $$1171; //@line 12830
       HEAP32[$AsyncCtx68 + 48 >> 2] = $vararg_buffer10; //@line 12832
       HEAP32[$AsyncCtx68 + 52 >> 2] = $343; //@line 12834
       HEAP32[$AsyncCtx68 + 56 >> 2] = $29; //@line 12836
       HEAP32[$AsyncCtx68 + 60 >> 2] = $vararg_buffer; //@line 12838
       HEAP32[$AsyncCtx68 + 64 >> 2] = $vararg_buffer14; //@line 12840
       HEAP32[$AsyncCtx68 + 68 >> 2] = $vararg_buffer8; //@line 12842
       HEAP32[$AsyncCtx68 + 72 >> 2] = $vararg_buffer14; //@line 12844
       HEAP32[$AsyncCtx68 + 76 >> 2] = $vararg_buffer8; //@line 12846
       HEAP8[$AsyncCtx68 + 80 >> 0] = $314; //@line 12848
       HEAP32[$AsyncCtx68 + 84 >> 2] = $339; //@line 12850
       HEAP32[$AsyncCtx68 + 88 >> 2] = $vararg_buffer12; //@line 12852
       HEAP8[$AsyncCtx68 + 92 >> 0] = $trunc; //@line 12854
       HEAP32[$AsyncCtx68 + 96 >> 2] = $0; //@line 12856
       HEAP8[$AsyncCtx68 + 100 >> 0] = $317; //@line 12858
       HEAP32[$AsyncCtx68 + 104 >> 2] = $1; //@line 12860
       HEAP32[$AsyncCtx68 + 108 >> 2] = $vararg_buffer6; //@line 12862
       HEAP8[$AsyncCtx68 + 112 >> 0] = $4; //@line 12864
       HEAP32[$AsyncCtx68 + 116 >> 2] = $vararg_buffer6; //@line 12866
       HEAP32[$AsyncCtx68 + 120 >> 2] = $82; //@line 12868
       HEAP8[$AsyncCtx68 + 124 >> 0] = $305; //@line 12870
       HEAP32[$AsyncCtx68 + 128 >> 2] = $315; //@line 12872
       HEAP32[$AsyncCtx68 + 132 >> 2] = $vararg_buffer1; //@line 12874
       HEAP32[$AsyncCtx68 + 136 >> 2] = $341; //@line 12876
       HEAP32[$AsyncCtx68 + 140 >> 2] = $316; //@line 12878
       HEAP32[$AsyncCtx68 + 144 >> 2] = $vararg_buffer12; //@line 12880
       sp = STACKTOP; //@line 12881
       STACKTOP = sp; //@line 12882
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx68 | 0); //@line 12884
       $$3179 = $343; //@line 12887
       $$sink200 = ($339 | 0) == (HEAP32[$vararg_buffer >> 2] | 0); //@line 12887
       break;
      }
     } else {
      $385 = $303 + 65536 + ($340 << 16 >> 16) | 0; //@line 12894
      $AsyncCtx64 = _emscripten_alloc_async_context(152, sp) | 0; //@line 12896
      __Z11compute_micPKhtS0_jhjPj($1, $318 & 65535, $$1173, $285, 1, $385, $vararg_buffer) | 0; //@line 12897
      if (___async) {
       HEAP32[$AsyncCtx64 >> 2] = 400; //@line 12900
       HEAP32[$AsyncCtx64 + 4 >> 2] = $vararg_buffer10; //@line 12902
       HEAP32[$AsyncCtx64 + 8 >> 2] = $vararg_buffer; //@line 12904
       HEAP32[$AsyncCtx64 + 12 >> 2] = $285; //@line 12906
       HEAP32[$AsyncCtx64 + 16 >> 2] = $$1173; //@line 12908
       HEAP32[$AsyncCtx64 + 20 >> 2] = $0; //@line 12910
       HEAP32[$AsyncCtx64 + 24 >> 2] = $$1175; //@line 12912
       HEAP32[$AsyncCtx64 + 28 >> 2] = $vararg_buffer16; //@line 12914
       HEAP8[$AsyncCtx64 + 32 >> 0] = $$1169; //@line 12916
       HEAP32[$AsyncCtx64 + 36 >> 2] = $318; //@line 12918
       HEAP32[$AsyncCtx64 + 40 >> 2] = $vararg_buffer16; //@line 12920
       HEAP32[$AsyncCtx64 + 44 >> 2] = $$1171; //@line 12922
       HEAP32[$AsyncCtx64 + 48 >> 2] = $vararg_buffer10; //@line 12924
       HEAP32[$AsyncCtx64 + 52 >> 2] = $29; //@line 12926
       HEAP32[$AsyncCtx64 + 56 >> 2] = $303; //@line 12928
       HEAP32[$AsyncCtx64 + 60 >> 2] = $385; //@line 12930
       HEAP32[$AsyncCtx64 + 64 >> 2] = $vararg_buffer; //@line 12932
       HEAP32[$AsyncCtx64 + 68 >> 2] = $vararg_buffer14; //@line 12934
       HEAP32[$AsyncCtx64 + 72 >> 2] = $vararg_buffer8; //@line 12936
       HEAP32[$AsyncCtx64 + 76 >> 2] = $vararg_buffer14; //@line 12938
       HEAP32[$AsyncCtx64 + 80 >> 2] = $vararg_buffer8; //@line 12940
       HEAP8[$AsyncCtx64 + 84 >> 0] = $314; //@line 12942
       HEAP32[$AsyncCtx64 + 88 >> 2] = $339; //@line 12944
       HEAP32[$AsyncCtx64 + 92 >> 2] = $vararg_buffer12; //@line 12946
       HEAP8[$AsyncCtx64 + 96 >> 0] = $trunc; //@line 12948
       HEAP32[$AsyncCtx64 + 100 >> 2] = $0; //@line 12950
       HEAP8[$AsyncCtx64 + 104 >> 0] = $317; //@line 12952
       HEAP32[$AsyncCtx64 + 108 >> 2] = $1; //@line 12954
       HEAP32[$AsyncCtx64 + 112 >> 2] = $vararg_buffer6; //@line 12956
       HEAP8[$AsyncCtx64 + 116 >> 0] = $4; //@line 12958
       HEAP32[$AsyncCtx64 + 120 >> 2] = $vararg_buffer6; //@line 12960
       HEAP32[$AsyncCtx64 + 124 >> 2] = $82; //@line 12962
       HEAP8[$AsyncCtx64 + 128 >> 0] = $305; //@line 12964
       HEAP32[$AsyncCtx64 + 132 >> 2] = $315; //@line 12966
       HEAP32[$AsyncCtx64 + 136 >> 2] = $vararg_buffer1; //@line 12968
       HEAP32[$AsyncCtx64 + 140 >> 2] = $341; //@line 12970
       HEAP32[$AsyncCtx64 + 144 >> 2] = $316; //@line 12972
       HEAP32[$AsyncCtx64 + 148 >> 2] = $vararg_buffer12; //@line 12974
       sp = STACKTOP; //@line 12975
       STACKTOP = sp; //@line 12976
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx64 | 0); //@line 12978
       $425 = ($339 | 0) == (HEAP32[$vararg_buffer >> 2] | 0); //@line 12980
       $$3179 = $425 ? $385 : $303; //@line 12982
       $$sink200 = $425; //@line 12982
       break;
      }
     }
    } while (0);
    $429 = $341 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv(HEAP32[$0 >> 2] | 0) | 0) & 65535) >>> 0; //@line 12990
    $431 = (__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 | 0; //@line 12992
    if (!$429) {
     HEAP32[$431 >> 2] = 10; //@line 12994
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 32 >> 2] = $$3179; //@line 12997
     $AsyncCtx50 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12998
     __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12999
     if (___async) {
      HEAP32[$AsyncCtx50 >> 2] = 401; //@line 13002
      HEAP32[$AsyncCtx50 + 4 >> 2] = $vararg_buffer; //@line 13004
      HEAP32[$AsyncCtx50 + 8 >> 2] = $vararg_buffer1; //@line 13006
      sp = STACKTOP; //@line 13007
      STACKTOP = sp; //@line 13008
      return;
     }
     _emscripten_free_async_context($AsyncCtx50 | 0); //@line 13010
     STACKTOP = sp; //@line 13011
     return;
    }
    if (!$$sink200) {
     HEAP32[$431 >> 2] = 12; //@line 13014
     $AsyncCtx40 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13015
     __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 13016
     if (___async) {
      HEAP32[$AsyncCtx40 >> 2] = 412; //@line 13019
      HEAP32[$AsyncCtx40 + 4 >> 2] = $vararg_buffer; //@line 13021
      HEAP32[$AsyncCtx40 + 8 >> 2] = $vararg_buffer1; //@line 13023
      sp = STACKTOP; //@line 13024
      STACKTOP = sp; //@line 13025
      return;
     }
     _emscripten_free_async_context($AsyncCtx40 | 0); //@line 13027
     STACKTOP = sp; //@line 13028
     return;
    }
    HEAP32[$431 >> 2] = 0; //@line 13030
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 8 >> 0] = $$1169; //@line 13033
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 11 >> 0] = ($305 & 255) >>> 4 & 1; //@line 13038
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 12 >> 2] = 0; //@line 13041
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 16 >> 1] = 0; //@line 13044
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 32 >> 2] = $$3179; //@line 13047
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 4 >> 2] = 0; //@line 13050
    HEAP32[$0 + 964 >> 2] = 0; //@line 13052
    $451 = $0 + 4 | 0; //@line 13053
    __ZN14LoRaMacCommand19clear_repeat_bufferEv($451); //@line 13054
    do {
     if ($$1169 << 24 >> 24 == 1) {
      HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) >> 2] = 2; //@line 13059
      $454 = $$1175 + 36 | 0; //@line 13060
      $455 = HEAP32[$454 >> 2] | 0; //@line 13061
      if (($455 | 0) != ($$3179 | 0) | ($455 | 0) == 0) {
       $$1$off0 = 0; //@line 13066
       $$sink = $454; //@line 13066
      } else {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 8; //@line 13070
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 32 >> 2] = $$3179; //@line 13073
       $AsyncCtx47 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13074
       __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 13075
       if (___async) {
        HEAP32[$AsyncCtx47 >> 2] = 402; //@line 13078
        HEAP32[$AsyncCtx47 + 4 >> 2] = $vararg_buffer; //@line 13080
        HEAP32[$AsyncCtx47 + 8 >> 2] = $vararg_buffer1; //@line 13082
        sp = STACKTOP; //@line 13083
        STACKTOP = sp; //@line 13084
        return;
       }
       _emscripten_free_async_context($AsyncCtx47 | 0); //@line 13086
       STACKTOP = sp; //@line 13087
       return;
      }
     } else {
      $465 = $0 + 374 | 0; //@line 13091
      if ($trunc << 24 >> 24 == 5) {
       HEAP8[$465 >> 0] = 1; //@line 13093
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) >> 2] = 1; //@line 13095
       $467 = $0 + 960 | 0; //@line 13096
       $468 = HEAP32[$467 >> 2] | 0; //@line 13097
       $$1$off0 = ($468 | 0) != 0 & ($468 | 0) == ($$3179 | 0); //@line 13101
       $$sink = $467; //@line 13101
       break;
      }
      HEAP8[$465 >> 0] = 0; //@line 13104
      HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) >> 2] = 0; //@line 13106
      $472 = $0 + 960 | 0; //@line 13107
      $473 = HEAP32[$472 >> 2] | 0; //@line 13108
      if (($473 | 0) != ($$3179 | 0) | ($473 | 0) == 0) {
       $$1$off0 = 0; //@line 13113
       $$sink = $472; //@line 13113
      } else {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 8; //@line 13117
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 32 >> 2] = $$3179; //@line 13120
       $AsyncCtx44 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13121
       __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 13122
       if (___async) {
        HEAP32[$AsyncCtx44 >> 2] = 403; //@line 13125
        HEAP32[$AsyncCtx44 + 4 >> 2] = $vararg_buffer; //@line 13127
        HEAP32[$AsyncCtx44 + 8 >> 2] = $vararg_buffer1; //@line 13129
        sp = STACKTOP; //@line 13130
        STACKTOP = sp; //@line 13131
        return;
       }
       _emscripten_free_async_context($AsyncCtx44 | 0); //@line 13133
       STACKTOP = sp; //@line 13134
       return;
      }
     }
    } while (0);
    HEAP32[$$sink >> 2] = $$3179; //@line 13138
    if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) >> 2] | 0) == 1) {
     if ($305 & 32) {
      __ZN14LoRaMacCommand20clear_command_bufferEv($451); //@line 13146
     }
    } else {
     __ZN14LoRaMacCommand20clear_command_bufferEv($451); //@line 13149
    }
    do {
     if (($318 | 0) > ($316 | 0)) {
      $488 = $315 + 9 | 0; //@line 13154
      $490 = HEAP8[$1 + $316 >> 0] | 0; //@line 13156
      $491 = $318 - $488 | 0; //@line 13157
      $492 = $491 & 255; //@line 13158
      HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 9 >> 0] = $490; //@line 13161
      $496 = $314 << 24 >> 24 == 0; //@line 13163
      if (!($490 << 24 >> 24)) {
       if (!$496) {
        $$3$off0204 = 6; //@line 13166
        break;
       }
       $500 = $0 + 638 | 0; //@line 13172
       if (__Z15decrypt_payloadPKhtS0_jhjPh($1 + $488 | 0, $491 & 255, $$1173, $285, 1, $$3179, $500) | 0) {
        HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 13; //@line 13178
       }
       $505 = $0 + 264 | 0; //@line 13180
       $506 = __ZN11LoRaMacMlme16get_confirmationEv($505) | 0; //@line 13181
       $508 = HEAP32[$0 >> 2] | 0; //@line 13183
       $AsyncCtx91 = _emscripten_alloc_async_context(56, sp) | 0; //@line 13184
       $509 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($451, $500, 0, $492, $4, $506, $0 + 1096 | 0, $508) | 0; //@line 13185
       if (___async) {
        HEAP32[$AsyncCtx91 >> 2] = 404; //@line 13188
        HEAP32[$AsyncCtx91 + 4 >> 2] = $vararg_buffer; //@line 13190
        HEAP32[$AsyncCtx91 + 8 >> 2] = $vararg_buffer1; //@line 13192
        HEAP32[$AsyncCtx91 + 12 >> 2] = $vararg_buffer6; //@line 13194
        HEAP32[$AsyncCtx91 + 16 >> 2] = $vararg_buffer6; //@line 13196
        HEAP32[$AsyncCtx91 + 20 >> 2] = $vararg_buffer8; //@line 13198
        HEAP32[$AsyncCtx91 + 24 >> 2] = $vararg_buffer8; //@line 13200
        HEAP32[$AsyncCtx91 + 28 >> 2] = $29; //@line 13202
        HEAP8[$AsyncCtx91 + 32 >> 0] = $$1$off0 & 1; //@line 13205
        HEAP32[$AsyncCtx91 + 36 >> 2] = $505; //@line 13207
        HEAP32[$AsyncCtx91 + 40 >> 2] = $0; //@line 13209
        HEAP32[$AsyncCtx91 + 44 >> 2] = $451; //@line 13211
        HEAP8[$AsyncCtx91 + 48 >> 0] = $305; //@line 13213
        HEAP32[$AsyncCtx91 + 52 >> 2] = $82; //@line 13215
        sp = STACKTOP; //@line 13216
        STACKTOP = sp; //@line 13217
        return;
       }
       _emscripten_free_async_context($AsyncCtx91 | 0); //@line 13219
       if ($509 | 0) {
        HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 13224
        if ($$1$off0) {
         $$3$off0204 = 6; //@line 13226
         break;
        } else {
         label = 101; //@line 13229
         break;
        }
       }
       if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($451) | 0)) {
        label = 100; //@line 13235
        break;
       }
       _printf(13258, $vararg_buffer6) | 0; //@line 13238
       _printf(13405, $vararg_buffer8) | 0; //@line 13239
       $AsyncCtx28 = _emscripten_alloc_async_context(36, sp) | 0; //@line 13240
       _putchar(10) | 0; //@line 13241
       if (___async) {
        HEAP32[$AsyncCtx28 >> 2] = 405; //@line 13244
        HEAP32[$AsyncCtx28 + 4 >> 2] = $505; //@line 13246
        HEAP32[$AsyncCtx28 + 8 >> 2] = $0; //@line 13248
        HEAP32[$AsyncCtx28 + 12 >> 2] = $451; //@line 13250
        HEAP8[$AsyncCtx28 + 16 >> 0] = $$1$off0 & 1; //@line 13253
        HEAP8[$AsyncCtx28 + 17 >> 0] = $305; //@line 13255
        HEAP32[$AsyncCtx28 + 20 >> 2] = $29; //@line 13257
        HEAP32[$AsyncCtx28 + 24 >> 2] = $82; //@line 13259
        HEAP32[$AsyncCtx28 + 28 >> 2] = $vararg_buffer; //@line 13261
        HEAP32[$AsyncCtx28 + 32 >> 2] = $vararg_buffer1; //@line 13263
        sp = STACKTOP; //@line 13264
        STACKTOP = sp; //@line 13265
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx28 | 0); //@line 13267
        HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($505) | 0) >> 2] = 4; //@line 13269
        $537 = $0 + 944 | 0; //@line 13270
        HEAP8[$537 >> 0] = HEAP8[$537 >> 0] | 16; //@line 13273
        __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($451); //@line 13274
        if ($$1$off0) {
         $$3$off0204 = 6; //@line 13276
         break;
        } else {
         label = 101; //@line 13279
         break;
        }
       }
      }
      do {
       if (!$496) {
        $540 = $0 + 264 | 0; //@line 13286
        $541 = __ZN11LoRaMacMlme16get_confirmationEv($540) | 0; //@line 13287
        $543 = HEAP32[$0 >> 2] | 0; //@line 13289
        $AsyncCtx87 = _emscripten_alloc_async_context(76, sp) | 0; //@line 13290
        $544 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($451, $1, 8, $317, $4, $541, $0 + 1096 | 0, $543) | 0; //@line 13291
        if (___async) {
         HEAP32[$AsyncCtx87 >> 2] = 406; //@line 13294
         HEAP32[$AsyncCtx87 + 4 >> 2] = $vararg_buffer; //@line 13296
         HEAP32[$AsyncCtx87 + 8 >> 2] = $vararg_buffer1; //@line 13298
         HEAP32[$AsyncCtx87 + 12 >> 2] = $0; //@line 13300
         HEAP32[$AsyncCtx87 + 16 >> 2] = $82; //@line 13302
         HEAP32[$AsyncCtx87 + 20 >> 2] = $29; //@line 13304
         HEAP8[$AsyncCtx87 + 24 >> 0] = $305; //@line 13306
         HEAP8[$AsyncCtx87 + 25 >> 0] = $$1$off0 & 1; //@line 13309
         HEAP32[$AsyncCtx87 + 28 >> 2] = $1; //@line 13311
         HEAP32[$AsyncCtx87 + 32 >> 2] = $488; //@line 13313
         HEAP32[$AsyncCtx87 + 36 >> 2] = $491; //@line 13315
         HEAP32[$AsyncCtx87 + 40 >> 2] = $$1171; //@line 13317
         HEAP32[$AsyncCtx87 + 44 >> 2] = $285; //@line 13319
         HEAP32[$AsyncCtx87 + 48 >> 2] = $$3179; //@line 13321
         HEAP32[$AsyncCtx87 + 52 >> 2] = $vararg_buffer10; //@line 13323
         HEAP32[$AsyncCtx87 + 56 >> 2] = $vararg_buffer10; //@line 13325
         HEAP32[$AsyncCtx87 + 60 >> 2] = $vararg_buffer12; //@line 13327
         HEAP32[$AsyncCtx87 + 64 >> 2] = $vararg_buffer12; //@line 13329
         HEAP32[$AsyncCtx87 + 68 >> 2] = $451; //@line 13331
         HEAP32[$AsyncCtx87 + 72 >> 2] = $540; //@line 13333
         sp = STACKTOP; //@line 13334
         STACKTOP = sp; //@line 13335
         return;
        }
        _emscripten_free_async_context($AsyncCtx87 | 0); //@line 13337
        if ($544 | 0) {
         HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 13342
         break;
        }
        if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($451) | 0) {
         _printf(13258, $vararg_buffer10) | 0; //@line 13347
         _printf(13405, $vararg_buffer12) | 0; //@line 13348
         $AsyncCtx24 = _emscripten_alloc_async_context(60, sp) | 0; //@line 13349
         _putchar(10) | 0; //@line 13350
         if (___async) {
          HEAP32[$AsyncCtx24 >> 2] = 407; //@line 13353
          HEAP32[$AsyncCtx24 + 4 >> 2] = $vararg_buffer; //@line 13355
          HEAP32[$AsyncCtx24 + 8 >> 2] = $vararg_buffer1; //@line 13357
          HEAP32[$AsyncCtx24 + 12 >> 2] = $0; //@line 13359
          HEAP32[$AsyncCtx24 + 16 >> 2] = $82; //@line 13361
          HEAP32[$AsyncCtx24 + 20 >> 2] = $29; //@line 13363
          HEAP8[$AsyncCtx24 + 24 >> 0] = $305; //@line 13365
          HEAP8[$AsyncCtx24 + 25 >> 0] = $$1$off0 & 1; //@line 13368
          HEAP32[$AsyncCtx24 + 28 >> 2] = $1; //@line 13370
          HEAP32[$AsyncCtx24 + 32 >> 2] = $488; //@line 13372
          HEAP32[$AsyncCtx24 + 36 >> 2] = $491; //@line 13374
          HEAP32[$AsyncCtx24 + 40 >> 2] = $$1171; //@line 13376
          HEAP32[$AsyncCtx24 + 44 >> 2] = $285; //@line 13378
          HEAP32[$AsyncCtx24 + 48 >> 2] = $$3179; //@line 13380
          HEAP32[$AsyncCtx24 + 52 >> 2] = $540; //@line 13382
          HEAP32[$AsyncCtx24 + 56 >> 2] = $451; //@line 13384
          sp = STACKTOP; //@line 13385
          STACKTOP = sp; //@line 13386
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx24 | 0); //@line 13388
          HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($540) | 0) >> 2] = 4; //@line 13390
          $584 = $0 + 944 | 0; //@line 13391
          HEAP8[$584 >> 0] = HEAP8[$584 >> 0] | 16; //@line 13394
          __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($451); //@line 13395
          break;
         }
        }
       }
      } while (0);
      $589 = $491 & 255; //@line 13403
      $590 = $0 + 638 | 0; //@line 13404
      if (__Z15decrypt_payloadPKhtS0_jhjPh($1 + $488 | 0, $589, $$1171, $285, 1, $$3179, $590) | 0) {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 13; //@line 13410
      }
      if ($$1$off0) {
       $$3$off0204 = 6; //@line 13413
      } else {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 12 >> 2] = $590; //@line 13417
       HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 16 >> 1] = $589; //@line 13420
       HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 18 >> 0] = 1; //@line 13423
       label = 101; //@line 13424
      }
     } else {
      if (!($314 << 24 >> 24)) {
       label = 100; //@line 13429
      } else {
       $602 = $0 + 264 | 0; //@line 13431
       $603 = __ZN11LoRaMacMlme16get_confirmationEv($602) | 0; //@line 13432
       $605 = HEAP32[$0 >> 2] | 0; //@line 13434
       $AsyncCtx83 = _emscripten_alloc_async_context(52, sp) | 0; //@line 13435
       $606 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($451, $1, 8, $317, $4, $603, $0 + 1096 | 0, $605) | 0; //@line 13436
       if (___async) {
        HEAP32[$AsyncCtx83 >> 2] = 408; //@line 13439
        HEAP32[$AsyncCtx83 + 4 >> 2] = $vararg_buffer; //@line 13441
        HEAP32[$AsyncCtx83 + 8 >> 2] = $vararg_buffer1; //@line 13443
        HEAP32[$AsyncCtx83 + 12 >> 2] = $0; //@line 13445
        HEAP32[$AsyncCtx83 + 16 >> 2] = $82; //@line 13447
        HEAP32[$AsyncCtx83 + 20 >> 2] = $602; //@line 13449
        HEAP32[$AsyncCtx83 + 24 >> 2] = $451; //@line 13451
        HEAP8[$AsyncCtx83 + 28 >> 0] = $$1$off0 & 1; //@line 13454
        HEAP8[$AsyncCtx83 + 29 >> 0] = $305; //@line 13456
        HEAP32[$AsyncCtx83 + 32 >> 2] = $29; //@line 13458
        HEAP32[$AsyncCtx83 + 36 >> 2] = $vararg_buffer14; //@line 13460
        HEAP32[$AsyncCtx83 + 40 >> 2] = $vararg_buffer14; //@line 13462
        HEAP32[$AsyncCtx83 + 44 >> 2] = $vararg_buffer16; //@line 13464
        HEAP32[$AsyncCtx83 + 48 >> 2] = $vararg_buffer16; //@line 13466
        sp = STACKTOP; //@line 13467
        STACKTOP = sp; //@line 13468
        return;
       }
       _emscripten_free_async_context($AsyncCtx83 | 0); //@line 13470
       if ($606 | 0) {
        HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 13475
        if ($$1$off0) {
         $$3$off0204 = 6; //@line 13477
         break;
        } else {
         label = 101; //@line 13480
         break;
        }
       }
       if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($451) | 0) {
        _printf(13258, $vararg_buffer14) | 0; //@line 13486
        _printf(13405, $vararg_buffer16) | 0; //@line 13487
        $AsyncCtx20 = _emscripten_alloc_async_context(36, sp) | 0; //@line 13488
        _putchar(10) | 0; //@line 13489
        if (___async) {
         HEAP32[$AsyncCtx20 >> 2] = 409; //@line 13492
         HEAP32[$AsyncCtx20 + 4 >> 2] = $602; //@line 13494
         HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 13496
         HEAP32[$AsyncCtx20 + 12 >> 2] = $451; //@line 13498
         HEAP8[$AsyncCtx20 + 16 >> 0] = $$1$off0 & 1; //@line 13501
         HEAP8[$AsyncCtx20 + 17 >> 0] = $305; //@line 13503
         HEAP32[$AsyncCtx20 + 20 >> 2] = $29; //@line 13505
         HEAP32[$AsyncCtx20 + 24 >> 2] = $82; //@line 13507
         HEAP32[$AsyncCtx20 + 28 >> 2] = $vararg_buffer; //@line 13509
         HEAP32[$AsyncCtx20 + 32 >> 2] = $vararg_buffer1; //@line 13511
         sp = STACKTOP; //@line 13512
         STACKTOP = sp; //@line 13513
         return;
        } else {
         _emscripten_free_async_context($AsyncCtx20 | 0); //@line 13515
         HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($602) | 0) >> 2] = 4; //@line 13517
         $634 = $0 + 944 | 0; //@line 13518
         HEAP8[$634 >> 0] = HEAP8[$634 >> 0] | 16; //@line 13521
         __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($451); //@line 13522
         if ($$1$off0) {
          $$3$off0204 = 6; //@line 13524
          break;
         } else {
          label = 101; //@line 13527
          break;
         }
        }
       } else {
        label = 100; //@line 13532
       }
      }
     }
    } while (0);
    if ((label | 0) == 100) {
     if ($$1$off0) {
      $$3$off0204 = 6; //@line 13539
     } else {
      label = 101; //@line 13541
     }
    }
    do {
     if ((label | 0) == 101) {
      $640 = (__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 10 | 0; //@line 13549
      if ($305 & 32) {
       HEAP8[$640 >> 0] = 1; //@line 13551
       HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 28 >> 0] = 1; //@line 13554
       $643 = HEAP32[$82 >> 2] | 0; //@line 13555
       $AsyncCtx99 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13557
       __ZN18LoRaWANTimeHandler4stopER13timer_event_t($643, $0 + 1076 | 0); //@line 13558
       if (___async) {
        HEAP32[$AsyncCtx99 >> 2] = 410; //@line 13561
        HEAP32[$AsyncCtx99 + 4 >> 2] = $0; //@line 13563
        HEAP32[$AsyncCtx99 + 8 >> 2] = $82; //@line 13565
        HEAP32[$AsyncCtx99 + 12 >> 2] = $vararg_buffer; //@line 13567
        HEAP32[$AsyncCtx99 + 16 >> 2] = $vararg_buffer1; //@line 13569
        sp = STACKTOP; //@line 13570
        STACKTOP = sp; //@line 13571
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx99 | 0); //@line 13573
        $$3$off0204 = 2; //@line 13574
        break;
       }
      }
      HEAP8[$640 >> 0] = 0; //@line 13578
      if ((HEAPU8[$0 + 895 >> 0] | 0) > (HEAPU8[$0 + 894 >> 0] | 0)) {
       $654 = HEAP32[$82 >> 2] | 0; //@line 13585
       $AsyncCtx95 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13587
       __ZN18LoRaWANTimeHandler4stopER13timer_event_t($654, $0 + 1076 | 0); //@line 13588
       if (___async) {
        HEAP32[$AsyncCtx95 >> 2] = 411; //@line 13591
        HEAP32[$AsyncCtx95 + 4 >> 2] = $0; //@line 13593
        HEAP32[$AsyncCtx95 + 8 >> 2] = $82; //@line 13595
        HEAP32[$AsyncCtx95 + 12 >> 2] = $vararg_buffer; //@line 13597
        HEAP32[$AsyncCtx95 + 16 >> 2] = $vararg_buffer1; //@line 13599
        sp = STACKTOP; //@line 13600
        STACKTOP = sp; //@line 13601
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx95 | 0); //@line 13603
        $$3$off0204 = 2; //@line 13604
        break;
       }
      } else {
       $$3$off0204 = 2; //@line 13608
      }
     }
    } while (0);
    $660 = $0 + 944 | 0; //@line 13612
    HEAP8[$660 >> 0] = $$3$off0204 | HEAP8[$660 >> 0] & -7; //@line 13616
    break;
   }
  case 7:
   {
    $666 = $0 + 638 | 0; //@line 13620
    _memcpy($666 | 0, $1 + 1 | 0, $5 | 0) | 0; //@line 13622
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) >> 2] = 3; //@line 13624
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 0; //@line 13627
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 12 >> 2] = $666; //@line 13630
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 16 >> 1] = $5 + 65535; //@line 13635
    $677 = $0 + 944 | 0; //@line 13636
    HEAP8[$677 >> 0] = HEAP8[$677 >> 0] | 2; //@line 13639
    break;
   }
  default:
   {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 13645
    $AsyncCtx36 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13646
    __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 13647
    if (___async) {
     HEAP32[$AsyncCtx36 >> 2] = 413; //@line 13650
     HEAP32[$AsyncCtx36 + 4 >> 2] = $0; //@line 13652
     HEAP32[$AsyncCtx36 + 8 >> 2] = $82; //@line 13654
     HEAP32[$AsyncCtx36 + 12 >> 2] = $vararg_buffer; //@line 13656
     HEAP32[$AsyncCtx36 + 16 >> 2] = $vararg_buffer1; //@line 13658
     sp = STACKTOP; //@line 13659
     STACKTOP = sp; //@line 13660
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx36 | 0); //@line 13662
     break L10;
    }
   }
  }
 } while (0);
 $686 = $0 + 944 | 0; //@line 13668
 HEAP8[$686 >> 0] = HEAP8[$686 >> 0] | 32; //@line 13671
 $689 = HEAP32[$82 >> 2] | 0; //@line 13672
 $AsyncCtx76 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13674
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($689, $0 + 996 | 0, 1); //@line 13675
 if (___async) {
  HEAP32[$AsyncCtx76 >> 2] = 414; //@line 13678
  HEAP32[$AsyncCtx76 + 4 >> 2] = $vararg_buffer; //@line 13680
  HEAP32[$AsyncCtx76 + 8 >> 2] = $vararg_buffer1; //@line 13682
  sp = STACKTOP; //@line 13683
  STACKTOP = sp; //@line 13684
  return;
 }
 _emscripten_free_async_context($AsyncCtx76 | 0); //@line 13686
 STACKTOP = sp; //@line 13687
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_434($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $145 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $234 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $245 = 0, $246 = 0, $248 = 0, $249 = 0, $250 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $262 = 0, $266 = 0, $267 = 0, $269 = 0, $270 = 0, $271 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $54 = 0, $6 = 0, $68 = 0, $72 = 0, $77 = 0, $8 = 0, $83 = 0, $84 = 0, $89 = 0, $93 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 27418
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27420
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27422
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27424
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27426
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27428
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27430
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27432
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27434
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27436
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27438
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 27440
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 27442
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 27444
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 27446
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 27448
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 27450
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx20 = _emscripten_realloc_async_context(68) | 0; //@line 27455
  _mbed_assert_internal(13142, 13151, 194); //@line 27456
  if (___async) {
   HEAP32[$ReallocAsyncCtx20 >> 2] = 467; //@line 27459
   $35 = $ReallocAsyncCtx20 + 4 | 0; //@line 27460
   HEAP32[$35 >> 2] = $2; //@line 27461
   $36 = $ReallocAsyncCtx20 + 8 | 0; //@line 27462
   HEAP32[$36 >> 2] = $4; //@line 27463
   $37 = $ReallocAsyncCtx20 + 12 | 0; //@line 27464
   HEAP32[$37 >> 2] = $6; //@line 27465
   $38 = $ReallocAsyncCtx20 + 16 | 0; //@line 27466
   HEAP32[$38 >> 2] = $8; //@line 27467
   $39 = $ReallocAsyncCtx20 + 20 | 0; //@line 27468
   HEAP32[$39 >> 2] = $10; //@line 27469
   $40 = $ReallocAsyncCtx20 + 24 | 0; //@line 27470
   HEAP32[$40 >> 2] = $12; //@line 27471
   $41 = $ReallocAsyncCtx20 + 28 | 0; //@line 27472
   HEAP32[$41 >> 2] = $14; //@line 27473
   $42 = $ReallocAsyncCtx20 + 32 | 0; //@line 27474
   HEAP32[$42 >> 2] = $16; //@line 27475
   $43 = $ReallocAsyncCtx20 + 36 | 0; //@line 27476
   HEAP32[$43 >> 2] = $18; //@line 27477
   $44 = $ReallocAsyncCtx20 + 40 | 0; //@line 27478
   HEAP32[$44 >> 2] = $20; //@line 27479
   $45 = $ReallocAsyncCtx20 + 44 | 0; //@line 27480
   HEAP32[$45 >> 2] = $22; //@line 27481
   $46 = $ReallocAsyncCtx20 + 48 | 0; //@line 27482
   HEAP32[$46 >> 2] = $24; //@line 27483
   $47 = $ReallocAsyncCtx20 + 52 | 0; //@line 27484
   HEAP32[$47 >> 2] = $26; //@line 27485
   $48 = $ReallocAsyncCtx20 + 56 | 0; //@line 27486
   HEAP32[$48 >> 2] = $28; //@line 27487
   $49 = $ReallocAsyncCtx20 + 60 | 0; //@line 27488
   HEAP32[$49 >> 2] = $30; //@line 27489
   $50 = $ReallocAsyncCtx20 + 64 | 0; //@line 27490
   HEAP32[$50 >> 2] = $32; //@line 27491
   sp = STACKTOP; //@line 27492
   return;
  }
  ___async_unwind = 0; //@line 27495
  HEAP32[$ReallocAsyncCtx20 >> 2] = 467; //@line 27496
  $35 = $ReallocAsyncCtx20 + 4 | 0; //@line 27497
  HEAP32[$35 >> 2] = $2; //@line 27498
  $36 = $ReallocAsyncCtx20 + 8 | 0; //@line 27499
  HEAP32[$36 >> 2] = $4; //@line 27500
  $37 = $ReallocAsyncCtx20 + 12 | 0; //@line 27501
  HEAP32[$37 >> 2] = $6; //@line 27502
  $38 = $ReallocAsyncCtx20 + 16 | 0; //@line 27503
  HEAP32[$38 >> 2] = $8; //@line 27504
  $39 = $ReallocAsyncCtx20 + 20 | 0; //@line 27505
  HEAP32[$39 >> 2] = $10; //@line 27506
  $40 = $ReallocAsyncCtx20 + 24 | 0; //@line 27507
  HEAP32[$40 >> 2] = $12; //@line 27508
  $41 = $ReallocAsyncCtx20 + 28 | 0; //@line 27509
  HEAP32[$41 >> 2] = $14; //@line 27510
  $42 = $ReallocAsyncCtx20 + 32 | 0; //@line 27511
  HEAP32[$42 >> 2] = $16; //@line 27512
  $43 = $ReallocAsyncCtx20 + 36 | 0; //@line 27513
  HEAP32[$43 >> 2] = $18; //@line 27514
  $44 = $ReallocAsyncCtx20 + 40 | 0; //@line 27515
  HEAP32[$44 >> 2] = $20; //@line 27516
  $45 = $ReallocAsyncCtx20 + 44 | 0; //@line 27517
  HEAP32[$45 >> 2] = $22; //@line 27518
  $46 = $ReallocAsyncCtx20 + 48 | 0; //@line 27519
  HEAP32[$46 >> 2] = $24; //@line 27520
  $47 = $ReallocAsyncCtx20 + 52 | 0; //@line 27521
  HEAP32[$47 >> 2] = $26; //@line 27522
  $48 = $ReallocAsyncCtx20 + 56 | 0; //@line 27523
  HEAP32[$48 >> 2] = $28; //@line 27524
  $49 = $ReallocAsyncCtx20 + 60 | 0; //@line 27525
  HEAP32[$49 >> 2] = $30; //@line 27526
  $50 = $ReallocAsyncCtx20 + 64 | 0; //@line 27527
  HEAP32[$50 >> 2] = $32; //@line 27528
  sp = STACKTOP; //@line 27529
  return;
 }
 do {
  if (HEAP8[$2 >> 0] & 2) {
   $54 = $4 + 288 | 0; //@line 27537
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($54) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 27553
   HEAP8[$32 >> 0] = 0; //@line 27554
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $68 = $4 + 956 | 0; //@line 27559
    HEAP32[$68 >> 2] = (HEAP32[$68 >> 2] | 0) + 1; //@line 27562
   }
   $72 = HEAP8[$4 + 895 >> 0] | 0; //@line 27565
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($54) | 0) + 11 >> 0] = $72; //@line 27568
   HEAP32[$30 >> 2] = HEAP32[$30 >> 2] & -2; //@line 27571
  }
 } while (0);
 $77 = $4 + 377 | 0; //@line 27574
 if (HEAP8[$77 >> 0] | 0) {
  if (!(HEAP32[$30 >> 2] & 16)) {
   HEAP8[$77 >> 0] = 0; //@line 27582
   $83 = $4 + 895 | 0; //@line 27583
   $84 = HEAP8[$83 >> 0] | 0; //@line 27584
   if (!(($84 & 255) < 9 ? ($84 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $114 = HEAP32[$4 >> 2] | 0; //@line 27591
    $117 = HEAP32[(HEAP32[$114 >> 2] | 0) + 16 >> 2] | 0; //@line 27594
    $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 27595
    FUNCTION_TABLE_vi[$117 & 1023]($114); //@line 27596
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 471; //@line 27599
     $118 = $ReallocAsyncCtx + 4 | 0; //@line 27600
     HEAP32[$118 >> 2] = $2; //@line 27601
     $119 = $ReallocAsyncCtx + 8 | 0; //@line 27602
     HEAP32[$119 >> 2] = $4; //@line 27603
     $120 = $ReallocAsyncCtx + 12 | 0; //@line 27604
     HEAP32[$120 >> 2] = $6; //@line 27605
     $121 = $ReallocAsyncCtx + 16 | 0; //@line 27606
     HEAP32[$121 >> 2] = $26; //@line 27607
     $122 = $ReallocAsyncCtx + 20 | 0; //@line 27608
     HEAP32[$122 >> 2] = $28; //@line 27609
     $123 = $ReallocAsyncCtx + 24 | 0; //@line 27610
     HEAP32[$123 >> 2] = $18; //@line 27611
     $124 = $ReallocAsyncCtx + 28 | 0; //@line 27612
     HEAP32[$124 >> 2] = $20; //@line 27613
     $125 = $ReallocAsyncCtx + 32 | 0; //@line 27614
     HEAP32[$125 >> 2] = $22; //@line 27615
     $126 = $ReallocAsyncCtx + 36 | 0; //@line 27616
     HEAP32[$126 >> 2] = $24; //@line 27617
     $127 = $ReallocAsyncCtx + 40 | 0; //@line 27618
     HEAP32[$127 >> 2] = $8; //@line 27619
     $128 = $ReallocAsyncCtx + 44 | 0; //@line 27620
     HEAP32[$128 >> 2] = $10; //@line 27621
     $129 = $ReallocAsyncCtx + 48 | 0; //@line 27622
     HEAP32[$129 >> 2] = $12; //@line 27623
     $130 = $ReallocAsyncCtx + 52 | 0; //@line 27624
     HEAP32[$130 >> 2] = $14; //@line 27625
     $131 = $ReallocAsyncCtx + 56 | 0; //@line 27626
     HEAP32[$131 >> 2] = $30; //@line 27627
     $132 = $ReallocAsyncCtx + 60 | 0; //@line 27628
     HEAP32[$132 >> 2] = $32; //@line 27629
     $133 = $ReallocAsyncCtx + 64 | 0; //@line 27630
     HEAP32[$133 >> 2] = $83; //@line 27631
     sp = STACKTOP; //@line 27632
     return;
    }
    ___async_unwind = 0; //@line 27635
    HEAP32[$ReallocAsyncCtx >> 2] = 471; //@line 27636
    $118 = $ReallocAsyncCtx + 4 | 0; //@line 27637
    HEAP32[$118 >> 2] = $2; //@line 27638
    $119 = $ReallocAsyncCtx + 8 | 0; //@line 27639
    HEAP32[$119 >> 2] = $4; //@line 27640
    $120 = $ReallocAsyncCtx + 12 | 0; //@line 27641
    HEAP32[$120 >> 2] = $6; //@line 27642
    $121 = $ReallocAsyncCtx + 16 | 0; //@line 27643
    HEAP32[$121 >> 2] = $26; //@line 27644
    $122 = $ReallocAsyncCtx + 20 | 0; //@line 27645
    HEAP32[$122 >> 2] = $28; //@line 27646
    $123 = $ReallocAsyncCtx + 24 | 0; //@line 27647
    HEAP32[$123 >> 2] = $18; //@line 27648
    $124 = $ReallocAsyncCtx + 28 | 0; //@line 27649
    HEAP32[$124 >> 2] = $20; //@line 27650
    $125 = $ReallocAsyncCtx + 32 | 0; //@line 27651
    HEAP32[$125 >> 2] = $22; //@line 27652
    $126 = $ReallocAsyncCtx + 36 | 0; //@line 27653
    HEAP32[$126 >> 2] = $24; //@line 27654
    $127 = $ReallocAsyncCtx + 40 | 0; //@line 27655
    HEAP32[$127 >> 2] = $8; //@line 27656
    $128 = $ReallocAsyncCtx + 44 | 0; //@line 27657
    HEAP32[$128 >> 2] = $10; //@line 27658
    $129 = $ReallocAsyncCtx + 48 | 0; //@line 27659
    HEAP32[$129 >> 2] = $12; //@line 27660
    $130 = $ReallocAsyncCtx + 52 | 0; //@line 27661
    HEAP32[$130 >> 2] = $14; //@line 27662
    $131 = $ReallocAsyncCtx + 56 | 0; //@line 27663
    HEAP32[$131 >> 2] = $30; //@line 27664
    $132 = $ReallocAsyncCtx + 60 | 0; //@line 27665
    HEAP32[$132 >> 2] = $32; //@line 27666
    $133 = $ReallocAsyncCtx + 64 | 0; //@line 27667
    HEAP32[$133 >> 2] = $83; //@line 27668
    sp = STACKTOP; //@line 27669
    return;
   }
   $89 = $84 + 1 << 24 >> 24; //@line 27672
   HEAP8[$83 >> 0] = $89; //@line 27673
   if ($89 & 1) {
    $93 = $4 + 1097 | 0; //@line 27678
    HEAP8[$93 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$93 >> 0] | 0) | 0; //@line 27681
   }
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 27683
   $96 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 27684
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 470; //@line 27687
    $97 = $ReallocAsyncCtx9 + 4 | 0; //@line 27688
    HEAP32[$97 >> 2] = $2; //@line 27689
    $98 = $ReallocAsyncCtx9 + 8 | 0; //@line 27690
    HEAP32[$98 >> 2] = $4; //@line 27691
    $99 = $ReallocAsyncCtx9 + 12 | 0; //@line 27692
    HEAP32[$99 >> 2] = $6; //@line 27693
    $100 = $ReallocAsyncCtx9 + 16 | 0; //@line 27694
    HEAP32[$100 >> 2] = $8; //@line 27695
    $101 = $ReallocAsyncCtx9 + 20 | 0; //@line 27696
    HEAP32[$101 >> 2] = $10; //@line 27697
    $102 = $ReallocAsyncCtx9 + 24 | 0; //@line 27698
    HEAP32[$102 >> 2] = $12; //@line 27699
    $103 = $ReallocAsyncCtx9 + 28 | 0; //@line 27700
    HEAP32[$103 >> 2] = $14; //@line 27701
    $104 = $ReallocAsyncCtx9 + 32 | 0; //@line 27702
    HEAP32[$104 >> 2] = $18; //@line 27703
    $105 = $ReallocAsyncCtx9 + 36 | 0; //@line 27704
    HEAP32[$105 >> 2] = $20; //@line 27705
    $106 = $ReallocAsyncCtx9 + 40 | 0; //@line 27706
    HEAP32[$106 >> 2] = $22; //@line 27707
    $107 = $ReallocAsyncCtx9 + 44 | 0; //@line 27708
    HEAP32[$107 >> 2] = $24; //@line 27709
    $108 = $ReallocAsyncCtx9 + 48 | 0; //@line 27710
    HEAP32[$108 >> 2] = $26; //@line 27711
    $109 = $ReallocAsyncCtx9 + 52 | 0; //@line 27712
    HEAP32[$109 >> 2] = $28; //@line 27713
    $110 = $ReallocAsyncCtx9 + 56 | 0; //@line 27714
    HEAP32[$110 >> 2] = $30; //@line 27715
    $111 = $ReallocAsyncCtx9 + 60 | 0; //@line 27716
    HEAP32[$111 >> 2] = $32; //@line 27717
    $112 = $ReallocAsyncCtx9 + 64 | 0; //@line 27718
    HEAP32[$112 >> 2] = $83; //@line 27719
    sp = STACKTOP; //@line 27720
    return;
   }
   HEAP32[___async_retval >> 2] = $96; //@line 27724
   ___async_unwind = 0; //@line 27725
   HEAP32[$ReallocAsyncCtx9 >> 2] = 470; //@line 27726
   $97 = $ReallocAsyncCtx9 + 4 | 0; //@line 27727
   HEAP32[$97 >> 2] = $2; //@line 27728
   $98 = $ReallocAsyncCtx9 + 8 | 0; //@line 27729
   HEAP32[$98 >> 2] = $4; //@line 27730
   $99 = $ReallocAsyncCtx9 + 12 | 0; //@line 27731
   HEAP32[$99 >> 2] = $6; //@line 27732
   $100 = $ReallocAsyncCtx9 + 16 | 0; //@line 27733
   HEAP32[$100 >> 2] = $8; //@line 27734
   $101 = $ReallocAsyncCtx9 + 20 | 0; //@line 27735
   HEAP32[$101 >> 2] = $10; //@line 27736
   $102 = $ReallocAsyncCtx9 + 24 | 0; //@line 27737
   HEAP32[$102 >> 2] = $12; //@line 27738
   $103 = $ReallocAsyncCtx9 + 28 | 0; //@line 27739
   HEAP32[$103 >> 2] = $14; //@line 27740
   $104 = $ReallocAsyncCtx9 + 32 | 0; //@line 27741
   HEAP32[$104 >> 2] = $18; //@line 27742
   $105 = $ReallocAsyncCtx9 + 36 | 0; //@line 27743
   HEAP32[$105 >> 2] = $20; //@line 27744
   $106 = $ReallocAsyncCtx9 + 40 | 0; //@line 27745
   HEAP32[$106 >> 2] = $22; //@line 27746
   $107 = $ReallocAsyncCtx9 + 44 | 0; //@line 27747
   HEAP32[$107 >> 2] = $24; //@line 27748
   $108 = $ReallocAsyncCtx9 + 48 | 0; //@line 27749
   HEAP32[$108 >> 2] = $26; //@line 27750
   $109 = $ReallocAsyncCtx9 + 52 | 0; //@line 27751
   HEAP32[$109 >> 2] = $28; //@line 27752
   $110 = $ReallocAsyncCtx9 + 56 | 0; //@line 27753
   HEAP32[$110 >> 2] = $30; //@line 27754
   $111 = $ReallocAsyncCtx9 + 60 | 0; //@line 27755
   HEAP32[$111 >> 2] = $32; //@line 27756
   $112 = $ReallocAsyncCtx9 + 64 | 0; //@line 27757
   HEAP32[$112 >> 2] = $83; //@line 27758
   sp = STACKTOP; //@line 27759
   return;
  }
 }
 $134 = HEAP32[$30 >> 2] | 0; //@line 27763
 $137 = $134 & -3; //@line 27766
 if (!($134 & 2)) {
  $139 = $134; //@line 27768
 } else {
  HEAP32[$30 >> 2] = $137; //@line 27770
  $139 = $137; //@line 27771
 }
 if ($139 | 0) {
  $224 = HEAP32[$26 >> 2] | 0; //@line 27775
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 27776
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($224, $28, 1e3); //@line 27777
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 477; //@line 27780
   $225 = $ReallocAsyncCtx8 + 4 | 0; //@line 27781
   HEAP32[$225 >> 2] = $4; //@line 27782
   $226 = $ReallocAsyncCtx8 + 8 | 0; //@line 27783
   HEAP32[$226 >> 2] = $6; //@line 27784
   $227 = $ReallocAsyncCtx8 + 12 | 0; //@line 27785
   HEAP32[$227 >> 2] = $2; //@line 27786
   $228 = $ReallocAsyncCtx8 + 16 | 0; //@line 27787
   HEAP32[$228 >> 2] = $8; //@line 27788
   $229 = $ReallocAsyncCtx8 + 20 | 0; //@line 27789
   HEAP32[$229 >> 2] = $10; //@line 27790
   $230 = $ReallocAsyncCtx8 + 24 | 0; //@line 27791
   HEAP32[$230 >> 2] = $12; //@line 27792
   $231 = $ReallocAsyncCtx8 + 28 | 0; //@line 27793
   HEAP32[$231 >> 2] = $14; //@line 27794
   sp = STACKTOP; //@line 27795
   return;
  }
  ___async_unwind = 0; //@line 27798
  HEAP32[$ReallocAsyncCtx8 >> 2] = 477; //@line 27799
  $225 = $ReallocAsyncCtx8 + 4 | 0; //@line 27800
  HEAP32[$225 >> 2] = $4; //@line 27801
  $226 = $ReallocAsyncCtx8 + 8 | 0; //@line 27802
  HEAP32[$226 >> 2] = $6; //@line 27803
  $227 = $ReallocAsyncCtx8 + 12 | 0; //@line 27804
  HEAP32[$227 >> 2] = $2; //@line 27805
  $228 = $ReallocAsyncCtx8 + 16 | 0; //@line 27806
  HEAP32[$228 >> 2] = $8; //@line 27807
  $229 = $ReallocAsyncCtx8 + 20 | 0; //@line 27808
  HEAP32[$229 >> 2] = $10; //@line 27809
  $230 = $ReallocAsyncCtx8 + 24 | 0; //@line 27810
  HEAP32[$230 >> 2] = $12; //@line 27811
  $231 = $ReallocAsyncCtx8 + 28 | 0; //@line 27812
  HEAP32[$231 >> 2] = $14; //@line 27813
  sp = STACKTOP; //@line 27814
  return;
 }
 $140 = HEAP8[$2 >> 0] | 0; //@line 27817
 if ($140 & 1) {
  HEAP8[$2 >> 0] = $140 & -2; //@line 27822
  $145 = HEAP32[$4 + 1324 >> 2] | 0; //@line 27824
  $147 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 27826
  $148 = $145 + 12 | 0; //@line 27827
  $149 = HEAP32[$148 >> 2] | 0; //@line 27828
  if (!$149) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 27831
   _mbed_assert_internal(15352, 15357, 1102); //@line 27832
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 472; //@line 27835
    $151 = $ReallocAsyncCtx18 + 4 | 0; //@line 27836
    HEAP32[$151 >> 2] = $2; //@line 27837
    $152 = $ReallocAsyncCtx18 + 8 | 0; //@line 27838
    HEAP32[$152 >> 2] = $4; //@line 27839
    $153 = $ReallocAsyncCtx18 + 12 | 0; //@line 27840
    HEAP32[$153 >> 2] = $6; //@line 27841
    $154 = $ReallocAsyncCtx18 + 16 | 0; //@line 27842
    HEAP32[$154 >> 2] = $8; //@line 27843
    $155 = $ReallocAsyncCtx18 + 20 | 0; //@line 27844
    HEAP32[$155 >> 2] = $10; //@line 27845
    $156 = $ReallocAsyncCtx18 + 24 | 0; //@line 27846
    HEAP32[$156 >> 2] = $12; //@line 27847
    $157 = $ReallocAsyncCtx18 + 28 | 0; //@line 27848
    HEAP32[$157 >> 2] = $14; //@line 27849
    $158 = $ReallocAsyncCtx18 + 32 | 0; //@line 27850
    HEAP32[$158 >> 2] = $148; //@line 27851
    $159 = $ReallocAsyncCtx18 + 36 | 0; //@line 27852
    HEAP32[$159 >> 2] = $145; //@line 27853
    $160 = $ReallocAsyncCtx18 + 40 | 0; //@line 27854
    HEAP32[$160 >> 2] = $147; //@line 27855
    $161 = $ReallocAsyncCtx18 + 44 | 0; //@line 27856
    HEAP32[$161 >> 2] = $18; //@line 27857
    $162 = $ReallocAsyncCtx18 + 48 | 0; //@line 27858
    HEAP32[$162 >> 2] = $20; //@line 27859
    $163 = $ReallocAsyncCtx18 + 52 | 0; //@line 27860
    HEAP32[$163 >> 2] = $22; //@line 27861
    $164 = $ReallocAsyncCtx18 + 56 | 0; //@line 27862
    HEAP32[$164 >> 2] = $24; //@line 27863
    sp = STACKTOP; //@line 27864
    return;
   }
   ___async_unwind = 0; //@line 27867
   HEAP32[$ReallocAsyncCtx18 >> 2] = 472; //@line 27868
   $151 = $ReallocAsyncCtx18 + 4 | 0; //@line 27869
   HEAP32[$151 >> 2] = $2; //@line 27870
   $152 = $ReallocAsyncCtx18 + 8 | 0; //@line 27871
   HEAP32[$152 >> 2] = $4; //@line 27872
   $153 = $ReallocAsyncCtx18 + 12 | 0; //@line 27873
   HEAP32[$153 >> 2] = $6; //@line 27874
   $154 = $ReallocAsyncCtx18 + 16 | 0; //@line 27875
   HEAP32[$154 >> 2] = $8; //@line 27876
   $155 = $ReallocAsyncCtx18 + 20 | 0; //@line 27877
   HEAP32[$155 >> 2] = $10; //@line 27878
   $156 = $ReallocAsyncCtx18 + 24 | 0; //@line 27879
   HEAP32[$156 >> 2] = $12; //@line 27880
   $157 = $ReallocAsyncCtx18 + 28 | 0; //@line 27881
   HEAP32[$157 >> 2] = $14; //@line 27882
   $158 = $ReallocAsyncCtx18 + 32 | 0; //@line 27883
   HEAP32[$158 >> 2] = $148; //@line 27884
   $159 = $ReallocAsyncCtx18 + 36 | 0; //@line 27885
   HEAP32[$159 >> 2] = $145; //@line 27886
   $160 = $ReallocAsyncCtx18 + 40 | 0; //@line 27887
   HEAP32[$160 >> 2] = $147; //@line 27888
   $161 = $ReallocAsyncCtx18 + 44 | 0; //@line 27889
   HEAP32[$161 >> 2] = $18; //@line 27890
   $162 = $ReallocAsyncCtx18 + 48 | 0; //@line 27891
   HEAP32[$162 >> 2] = $20; //@line 27892
   $163 = $ReallocAsyncCtx18 + 52 | 0; //@line 27893
   HEAP32[$163 >> 2] = $22; //@line 27894
   $164 = $ReallocAsyncCtx18 + 56 | 0; //@line 27895
   HEAP32[$164 >> 2] = $24; //@line 27896
   sp = STACKTOP; //@line 27897
   return;
  } else {
   $165 = HEAP32[$149 >> 2] | 0; //@line 27900
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 27901
   FUNCTION_TABLE_vii[$165 & 31]($145, $147); //@line 27902
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 473; //@line 27905
    $166 = $ReallocAsyncCtx2 + 4 | 0; //@line 27906
    HEAP32[$166 >> 2] = $2; //@line 27907
    $167 = $ReallocAsyncCtx2 + 8 | 0; //@line 27908
    HEAP32[$167 >> 2] = $4; //@line 27909
    $168 = $ReallocAsyncCtx2 + 12 | 0; //@line 27910
    HEAP32[$168 >> 2] = $6; //@line 27911
    $169 = $ReallocAsyncCtx2 + 16 | 0; //@line 27912
    HEAP32[$169 >> 2] = $18; //@line 27913
    $170 = $ReallocAsyncCtx2 + 20 | 0; //@line 27914
    HEAP32[$170 >> 2] = $20; //@line 27915
    $171 = $ReallocAsyncCtx2 + 24 | 0; //@line 27916
    HEAP32[$171 >> 2] = $22; //@line 27917
    $172 = $ReallocAsyncCtx2 + 28 | 0; //@line 27918
    HEAP32[$172 >> 2] = $24; //@line 27919
    $173 = $ReallocAsyncCtx2 + 32 | 0; //@line 27920
    HEAP32[$173 >> 2] = $8; //@line 27921
    $174 = $ReallocAsyncCtx2 + 36 | 0; //@line 27922
    HEAP32[$174 >> 2] = $10; //@line 27923
    $175 = $ReallocAsyncCtx2 + 40 | 0; //@line 27924
    HEAP32[$175 >> 2] = $12; //@line 27925
    $176 = $ReallocAsyncCtx2 + 44 | 0; //@line 27926
    HEAP32[$176 >> 2] = $14; //@line 27927
    sp = STACKTOP; //@line 27928
    return;
   }
   ___async_unwind = 0; //@line 27931
   HEAP32[$ReallocAsyncCtx2 >> 2] = 473; //@line 27932
   $166 = $ReallocAsyncCtx2 + 4 | 0; //@line 27933
   HEAP32[$166 >> 2] = $2; //@line 27934
   $167 = $ReallocAsyncCtx2 + 8 | 0; //@line 27935
   HEAP32[$167 >> 2] = $4; //@line 27936
   $168 = $ReallocAsyncCtx2 + 12 | 0; //@line 27937
   HEAP32[$168 >> 2] = $6; //@line 27938
   $169 = $ReallocAsyncCtx2 + 16 | 0; //@line 27939
   HEAP32[$169 >> 2] = $18; //@line 27940
   $170 = $ReallocAsyncCtx2 + 20 | 0; //@line 27941
   HEAP32[$170 >> 2] = $20; //@line 27942
   $171 = $ReallocAsyncCtx2 + 24 | 0; //@line 27943
   HEAP32[$171 >> 2] = $22; //@line 27944
   $172 = $ReallocAsyncCtx2 + 28 | 0; //@line 27945
   HEAP32[$172 >> 2] = $24; //@line 27946
   $173 = $ReallocAsyncCtx2 + 32 | 0; //@line 27947
   HEAP32[$173 >> 2] = $8; //@line 27948
   $174 = $ReallocAsyncCtx2 + 36 | 0; //@line 27949
   HEAP32[$174 >> 2] = $10; //@line 27950
   $175 = $ReallocAsyncCtx2 + 40 | 0; //@line 27951
   HEAP32[$175 >> 2] = $12; //@line 27952
   $176 = $ReallocAsyncCtx2 + 44 | 0; //@line 27953
   HEAP32[$176 >> 2] = $14; //@line 27954
   sp = STACKTOP; //@line 27955
   return;
  }
 }
 if ($140 & 8) {
  HEAP8[$2 >> 0] = $140 & -9; //@line 27963
  $181 = HEAP32[$4 + 1324 >> 2] | 0; //@line 27965
  $182 = $181 + 32 | 0; //@line 27966
  $184 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 27968
  $185 = $181 + 44 | 0; //@line 27969
  $186 = HEAP32[$185 >> 2] | 0; //@line 27970
  if (!$186) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 27973
   _mbed_assert_internal(15352, 15357, 1102); //@line 27974
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 474; //@line 27977
    $188 = $ReallocAsyncCtx17 + 4 | 0; //@line 27978
    HEAP32[$188 >> 2] = $2; //@line 27979
    $189 = $ReallocAsyncCtx17 + 8 | 0; //@line 27980
    HEAP32[$189 >> 2] = $4; //@line 27981
    $190 = $ReallocAsyncCtx17 + 12 | 0; //@line 27982
    HEAP32[$190 >> 2] = $6; //@line 27983
    $191 = $ReallocAsyncCtx17 + 16 | 0; //@line 27984
    HEAP32[$191 >> 2] = $8; //@line 27985
    $192 = $ReallocAsyncCtx17 + 20 | 0; //@line 27986
    HEAP32[$192 >> 2] = $10; //@line 27987
    $193 = $ReallocAsyncCtx17 + 24 | 0; //@line 27988
    HEAP32[$193 >> 2] = $12; //@line 27989
    $194 = $ReallocAsyncCtx17 + 28 | 0; //@line 27990
    HEAP32[$194 >> 2] = $14; //@line 27991
    $195 = $ReallocAsyncCtx17 + 32 | 0; //@line 27992
    HEAP32[$195 >> 2] = $18; //@line 27993
    $196 = $ReallocAsyncCtx17 + 36 | 0; //@line 27994
    HEAP32[$196 >> 2] = $20; //@line 27995
    $197 = $ReallocAsyncCtx17 + 40 | 0; //@line 27996
    HEAP32[$197 >> 2] = $22; //@line 27997
    $198 = $ReallocAsyncCtx17 + 44 | 0; //@line 27998
    HEAP32[$198 >> 2] = $24; //@line 27999
    $199 = $ReallocAsyncCtx17 + 48 | 0; //@line 28000
    HEAP32[$199 >> 2] = $182; //@line 28001
    $200 = $ReallocAsyncCtx17 + 52 | 0; //@line 28002
    HEAP32[$200 >> 2] = $184; //@line 28003
    $201 = $ReallocAsyncCtx17 + 56 | 0; //@line 28004
    HEAP32[$201 >> 2] = $185; //@line 28005
    sp = STACKTOP; //@line 28006
    return;
   }
   ___async_unwind = 0; //@line 28009
   HEAP32[$ReallocAsyncCtx17 >> 2] = 474; //@line 28010
   $188 = $ReallocAsyncCtx17 + 4 | 0; //@line 28011
   HEAP32[$188 >> 2] = $2; //@line 28012
   $189 = $ReallocAsyncCtx17 + 8 | 0; //@line 28013
   HEAP32[$189 >> 2] = $4; //@line 28014
   $190 = $ReallocAsyncCtx17 + 12 | 0; //@line 28015
   HEAP32[$190 >> 2] = $6; //@line 28016
   $191 = $ReallocAsyncCtx17 + 16 | 0; //@line 28017
   HEAP32[$191 >> 2] = $8; //@line 28018
   $192 = $ReallocAsyncCtx17 + 20 | 0; //@line 28019
   HEAP32[$192 >> 2] = $10; //@line 28020
   $193 = $ReallocAsyncCtx17 + 24 | 0; //@line 28021
   HEAP32[$193 >> 2] = $12; //@line 28022
   $194 = $ReallocAsyncCtx17 + 28 | 0; //@line 28023
   HEAP32[$194 >> 2] = $14; //@line 28024
   $195 = $ReallocAsyncCtx17 + 32 | 0; //@line 28025
   HEAP32[$195 >> 2] = $18; //@line 28026
   $196 = $ReallocAsyncCtx17 + 36 | 0; //@line 28027
   HEAP32[$196 >> 2] = $20; //@line 28028
   $197 = $ReallocAsyncCtx17 + 40 | 0; //@line 28029
   HEAP32[$197 >> 2] = $22; //@line 28030
   $198 = $ReallocAsyncCtx17 + 44 | 0; //@line 28031
   HEAP32[$198 >> 2] = $24; //@line 28032
   $199 = $ReallocAsyncCtx17 + 48 | 0; //@line 28033
   HEAP32[$199 >> 2] = $182; //@line 28034
   $200 = $ReallocAsyncCtx17 + 52 | 0; //@line 28035
   HEAP32[$200 >> 2] = $184; //@line 28036
   $201 = $ReallocAsyncCtx17 + 56 | 0; //@line 28037
   HEAP32[$201 >> 2] = $185; //@line 28038
   sp = STACKTOP; //@line 28039
   return;
  } else {
   $202 = HEAP32[$186 >> 2] | 0; //@line 28042
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 28043
   FUNCTION_TABLE_vii[$202 & 31]($182, $184); //@line 28044
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 28047
    $203 = $ReallocAsyncCtx3 + 4 | 0; //@line 28048
    HEAP32[$203 >> 2] = $4; //@line 28049
    $204 = $ReallocAsyncCtx3 + 8 | 0; //@line 28050
    HEAP32[$204 >> 2] = $6; //@line 28051
    $205 = $ReallocAsyncCtx3 + 12 | 0; //@line 28052
    HEAP32[$205 >> 2] = $2; //@line 28053
    $206 = $ReallocAsyncCtx3 + 16 | 0; //@line 28054
    HEAP32[$206 >> 2] = $18; //@line 28055
    $207 = $ReallocAsyncCtx3 + 20 | 0; //@line 28056
    HEAP32[$207 >> 2] = $20; //@line 28057
    $208 = $ReallocAsyncCtx3 + 24 | 0; //@line 28058
    HEAP32[$208 >> 2] = $22; //@line 28059
    $209 = $ReallocAsyncCtx3 + 28 | 0; //@line 28060
    HEAP32[$209 >> 2] = $24; //@line 28061
    $210 = $ReallocAsyncCtx3 + 32 | 0; //@line 28062
    HEAP32[$210 >> 2] = $8; //@line 28063
    $211 = $ReallocAsyncCtx3 + 36 | 0; //@line 28064
    HEAP32[$211 >> 2] = $10; //@line 28065
    $212 = $ReallocAsyncCtx3 + 40 | 0; //@line 28066
    HEAP32[$212 >> 2] = $12; //@line 28067
    $213 = $ReallocAsyncCtx3 + 44 | 0; //@line 28068
    HEAP32[$213 >> 2] = $14; //@line 28069
    sp = STACKTOP; //@line 28070
    return;
   }
   ___async_unwind = 0; //@line 28073
   HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 28074
   $203 = $ReallocAsyncCtx3 + 4 | 0; //@line 28075
   HEAP32[$203 >> 2] = $4; //@line 28076
   $204 = $ReallocAsyncCtx3 + 8 | 0; //@line 28077
   HEAP32[$204 >> 2] = $6; //@line 28078
   $205 = $ReallocAsyncCtx3 + 12 | 0; //@line 28079
   HEAP32[$205 >> 2] = $2; //@line 28080
   $206 = $ReallocAsyncCtx3 + 16 | 0; //@line 28081
   HEAP32[$206 >> 2] = $18; //@line 28082
   $207 = $ReallocAsyncCtx3 + 20 | 0; //@line 28083
   HEAP32[$207 >> 2] = $20; //@line 28084
   $208 = $ReallocAsyncCtx3 + 24 | 0; //@line 28085
   HEAP32[$208 >> 2] = $22; //@line 28086
   $209 = $ReallocAsyncCtx3 + 28 | 0; //@line 28087
   HEAP32[$209 >> 2] = $24; //@line 28088
   $210 = $ReallocAsyncCtx3 + 32 | 0; //@line 28089
   HEAP32[$210 >> 2] = $8; //@line 28090
   $211 = $ReallocAsyncCtx3 + 36 | 0; //@line 28091
   HEAP32[$211 >> 2] = $10; //@line 28092
   $212 = $ReallocAsyncCtx3 + 40 | 0; //@line 28093
   HEAP32[$212 >> 2] = $12; //@line 28094
   $213 = $ReallocAsyncCtx3 + 44 | 0; //@line 28095
   HEAP32[$213 >> 2] = $14; //@line 28096
   sp = STACKTOP; //@line 28097
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(13258, $18) | 0; //@line 28104
  _printf(13405, $22) | 0; //@line 28105
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 28106
  _putchar(10) | 0; //@line 28107
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 476; //@line 28110
   $216 = $ReallocAsyncCtx7 + 4 | 0; //@line 28111
   HEAP32[$216 >> 2] = $4; //@line 28112
   $217 = $ReallocAsyncCtx7 + 8 | 0; //@line 28113
   HEAP32[$217 >> 2] = $6; //@line 28114
   $218 = $ReallocAsyncCtx7 + 12 | 0; //@line 28115
   HEAP32[$218 >> 2] = $2; //@line 28116
   $219 = $ReallocAsyncCtx7 + 16 | 0; //@line 28117
   HEAP32[$219 >> 2] = $8; //@line 28118
   $220 = $ReallocAsyncCtx7 + 20 | 0; //@line 28119
   HEAP32[$220 >> 2] = $10; //@line 28120
   $221 = $ReallocAsyncCtx7 + 24 | 0; //@line 28121
   HEAP32[$221 >> 2] = $12; //@line 28122
   $222 = $ReallocAsyncCtx7 + 28 | 0; //@line 28123
   HEAP32[$222 >> 2] = $14; //@line 28124
   sp = STACKTOP; //@line 28125
   return;
  }
  ___async_unwind = 0; //@line 28128
  HEAP32[$ReallocAsyncCtx7 >> 2] = 476; //@line 28129
  $216 = $ReallocAsyncCtx7 + 4 | 0; //@line 28130
  HEAP32[$216 >> 2] = $4; //@line 28131
  $217 = $ReallocAsyncCtx7 + 8 | 0; //@line 28132
  HEAP32[$217 >> 2] = $6; //@line 28133
  $218 = $ReallocAsyncCtx7 + 12 | 0; //@line 28134
  HEAP32[$218 >> 2] = $2; //@line 28135
  $219 = $ReallocAsyncCtx7 + 16 | 0; //@line 28136
  HEAP32[$219 >> 2] = $8; //@line 28137
  $220 = $ReallocAsyncCtx7 + 20 | 0; //@line 28138
  HEAP32[$220 >> 2] = $10; //@line 28139
  $221 = $ReallocAsyncCtx7 + 24 | 0; //@line 28140
  HEAP32[$221 >> 2] = $12; //@line 28141
  $222 = $ReallocAsyncCtx7 + 28 | 0; //@line 28142
  HEAP32[$222 >> 2] = $14; //@line 28143
  sp = STACKTOP; //@line 28144
  return;
 }
 $223 = HEAP8[$2 >> 0] & -33; //@line 28148
 HEAP8[$2 >> 0] = $223; //@line 28149
 do {
  if (!($223 & 2)) {
   $262 = $223; //@line 28154
  } else {
   $234 = $223 & -3; //@line 28156
   HEAP8[$2 >> 0] = $234; //@line 28157
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(13258, $8) | 0; //@line 28162
    _printf(13285, $12) | 0; //@line 28163
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 28164
    _putchar(10) | 0; //@line 28165
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 28168
     $238 = $ReallocAsyncCtx6 + 4 | 0; //@line 28169
     HEAP32[$238 >> 2] = $4; //@line 28170
     $239 = $ReallocAsyncCtx6 + 8 | 0; //@line 28171
     HEAP32[$239 >> 2] = $6; //@line 28172
     $240 = $ReallocAsyncCtx6 + 12 | 0; //@line 28173
     HEAP32[$240 >> 2] = $6; //@line 28174
     $241 = $ReallocAsyncCtx6 + 16 | 0; //@line 28175
     HEAP32[$241 >> 2] = $2; //@line 28176
     sp = STACKTOP; //@line 28177
     return;
    }
    ___async_unwind = 0; //@line 28180
    HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 28181
    $238 = $ReallocAsyncCtx6 + 4 | 0; //@line 28182
    HEAP32[$238 >> 2] = $4; //@line 28183
    $239 = $ReallocAsyncCtx6 + 8 | 0; //@line 28184
    HEAP32[$239 >> 2] = $6; //@line 28185
    $240 = $ReallocAsyncCtx6 + 12 | 0; //@line 28186
    HEAP32[$240 >> 2] = $6; //@line 28187
    $241 = $ReallocAsyncCtx6 + 16 | 0; //@line 28188
    HEAP32[$241 >> 2] = $2; //@line 28189
    sp = STACKTOP; //@line 28190
    return;
   }
   if ($234 & 4) {
    $260 = $234 & -5; //@line 28196
    HEAP8[$2 >> 0] = $260; //@line 28197
    $262 = $260; //@line 28198
    break;
   }
   $245 = HEAP32[$4 + 1324 >> 2] | 0; //@line 28202
   $246 = $245 + 16 | 0; //@line 28203
   $248 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 28205
   $249 = $245 + 28 | 0; //@line 28206
   $250 = HEAP32[$249 >> 2] | 0; //@line 28207
   if (!$250) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 28210
    _mbed_assert_internal(15352, 15357, 1102); //@line 28211
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 28214
     $252 = $ReallocAsyncCtx15 + 4 | 0; //@line 28215
     HEAP32[$252 >> 2] = $249; //@line 28216
     $253 = $ReallocAsyncCtx15 + 8 | 0; //@line 28217
     HEAP32[$253 >> 2] = $246; //@line 28218
     $254 = $ReallocAsyncCtx15 + 12 | 0; //@line 28219
     HEAP32[$254 >> 2] = $248; //@line 28220
     $255 = $ReallocAsyncCtx15 + 16 | 0; //@line 28221
     HEAP32[$255 >> 2] = $2; //@line 28222
     $256 = $ReallocAsyncCtx15 + 20 | 0; //@line 28223
     HEAP32[$256 >> 2] = $4; //@line 28224
     sp = STACKTOP; //@line 28225
     return;
    }
    ___async_unwind = 0; //@line 28228
    HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 28229
    $252 = $ReallocAsyncCtx15 + 4 | 0; //@line 28230
    HEAP32[$252 >> 2] = $249; //@line 28231
    $253 = $ReallocAsyncCtx15 + 8 | 0; //@line 28232
    HEAP32[$253 >> 2] = $246; //@line 28233
    $254 = $ReallocAsyncCtx15 + 12 | 0; //@line 28234
    HEAP32[$254 >> 2] = $248; //@line 28235
    $255 = $ReallocAsyncCtx15 + 16 | 0; //@line 28236
    HEAP32[$255 >> 2] = $2; //@line 28237
    $256 = $ReallocAsyncCtx15 + 20 | 0; //@line 28238
    HEAP32[$256 >> 2] = $4; //@line 28239
    sp = STACKTOP; //@line 28240
    return;
   } else {
    $257 = HEAP32[$250 >> 2] | 0; //@line 28243
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 28244
    FUNCTION_TABLE_vii[$257 & 31]($246, $248); //@line 28245
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 28248
     $258 = $ReallocAsyncCtx4 + 4 | 0; //@line 28249
     HEAP32[$258 >> 2] = $2; //@line 28250
     $259 = $ReallocAsyncCtx4 + 8 | 0; //@line 28251
     HEAP32[$259 >> 2] = $4; //@line 28252
     sp = STACKTOP; //@line 28253
     return;
    }
    ___async_unwind = 0; //@line 28256
    HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 28257
    $258 = $ReallocAsyncCtx4 + 4 | 0; //@line 28258
    HEAP32[$258 >> 2] = $2; //@line 28259
    $259 = $ReallocAsyncCtx4 + 8 | 0; //@line 28260
    HEAP32[$259 >> 2] = $4; //@line 28261
    sp = STACKTOP; //@line 28262
    return;
   }
  }
 } while (0);
 if (!($262 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $262 & -17; //@line 28273
 $266 = HEAP32[$4 + 1324 >> 2] | 0; //@line 28275
 $267 = $266 + 48 | 0; //@line 28276
 $269 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 28278
 $270 = $266 + 60 | 0; //@line 28279
 $271 = HEAP32[$270 >> 2] | 0; //@line 28280
 if (!$271) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 28283
  _mbed_assert_internal(15352, 15357, 1102); //@line 28284
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 28287
   $273 = $ReallocAsyncCtx14 + 4 | 0; //@line 28288
   HEAP32[$273 >> 2] = $270; //@line 28289
   $274 = $ReallocAsyncCtx14 + 8 | 0; //@line 28290
   HEAP32[$274 >> 2] = $267; //@line 28291
   $275 = $ReallocAsyncCtx14 + 12 | 0; //@line 28292
   HEAP32[$275 >> 2] = $269; //@line 28293
   sp = STACKTOP; //@line 28294
   return;
  }
  ___async_unwind = 0; //@line 28297
  HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 28298
  $273 = $ReallocAsyncCtx14 + 4 | 0; //@line 28299
  HEAP32[$273 >> 2] = $270; //@line 28300
  $274 = $ReallocAsyncCtx14 + 8 | 0; //@line 28301
  HEAP32[$274 >> 2] = $267; //@line 28302
  $275 = $ReallocAsyncCtx14 + 12 | 0; //@line 28303
  HEAP32[$275 >> 2] = $269; //@line 28304
  sp = STACKTOP; //@line 28305
  return;
 } else {
  $276 = HEAP32[$271 >> 2] | 0; //@line 28308
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 28309
  FUNCTION_TABLE_vii[$276 & 31]($267, $269); //@line 28310
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 28313
   sp = STACKTOP; //@line 28314
   return;
  }
  ___async_unwind = 0; //@line 28317
  HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 28318
  sp = STACKTOP; //@line 28319
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_433($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $145 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $234 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $245 = 0, $246 = 0, $248 = 0, $249 = 0, $250 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $262 = 0, $266 = 0, $267 = 0, $269 = 0, $270 = 0, $271 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $54 = 0, $6 = 0, $68 = 0, $72 = 0, $77 = 0, $8 = 0, $83 = 0, $84 = 0, $89 = 0, $93 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 26495
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26497
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26499
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26501
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26503
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26505
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26507
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26509
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26511
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26513
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26515
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26517
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26519
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 26521
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 26523
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 26525
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 26527
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx19 = _emscripten_realloc_async_context(68) | 0; //@line 26532
  _mbed_assert_internal(13142, 13151, 194); //@line 26533
  if (___async) {
   HEAP32[$ReallocAsyncCtx19 >> 2] = 469; //@line 26536
   $35 = $ReallocAsyncCtx19 + 4 | 0; //@line 26537
   HEAP32[$35 >> 2] = $2; //@line 26538
   $36 = $ReallocAsyncCtx19 + 8 | 0; //@line 26539
   HEAP32[$36 >> 2] = $4; //@line 26540
   $37 = $ReallocAsyncCtx19 + 12 | 0; //@line 26541
   HEAP32[$37 >> 2] = $6; //@line 26542
   $38 = $ReallocAsyncCtx19 + 16 | 0; //@line 26543
   HEAP32[$38 >> 2] = $8; //@line 26544
   $39 = $ReallocAsyncCtx19 + 20 | 0; //@line 26545
   HEAP32[$39 >> 2] = $10; //@line 26546
   $40 = $ReallocAsyncCtx19 + 24 | 0; //@line 26547
   HEAP32[$40 >> 2] = $12; //@line 26548
   $41 = $ReallocAsyncCtx19 + 28 | 0; //@line 26549
   HEAP32[$41 >> 2] = $14; //@line 26550
   $42 = $ReallocAsyncCtx19 + 32 | 0; //@line 26551
   HEAP32[$42 >> 2] = $16; //@line 26552
   $43 = $ReallocAsyncCtx19 + 36 | 0; //@line 26553
   HEAP32[$43 >> 2] = $18; //@line 26554
   $44 = $ReallocAsyncCtx19 + 40 | 0; //@line 26555
   HEAP32[$44 >> 2] = $20; //@line 26556
   $45 = $ReallocAsyncCtx19 + 44 | 0; //@line 26557
   HEAP32[$45 >> 2] = $22; //@line 26558
   $46 = $ReallocAsyncCtx19 + 48 | 0; //@line 26559
   HEAP32[$46 >> 2] = $24; //@line 26560
   $47 = $ReallocAsyncCtx19 + 52 | 0; //@line 26561
   HEAP32[$47 >> 2] = $26; //@line 26562
   $48 = $ReallocAsyncCtx19 + 56 | 0; //@line 26563
   HEAP32[$48 >> 2] = $28; //@line 26564
   $49 = $ReallocAsyncCtx19 + 60 | 0; //@line 26565
   HEAP32[$49 >> 2] = $30; //@line 26566
   $50 = $ReallocAsyncCtx19 + 64 | 0; //@line 26567
   HEAP32[$50 >> 2] = $32; //@line 26568
   sp = STACKTOP; //@line 26569
   return;
  }
  ___async_unwind = 0; //@line 26572
  HEAP32[$ReallocAsyncCtx19 >> 2] = 469; //@line 26573
  $35 = $ReallocAsyncCtx19 + 4 | 0; //@line 26574
  HEAP32[$35 >> 2] = $2; //@line 26575
  $36 = $ReallocAsyncCtx19 + 8 | 0; //@line 26576
  HEAP32[$36 >> 2] = $4; //@line 26577
  $37 = $ReallocAsyncCtx19 + 12 | 0; //@line 26578
  HEAP32[$37 >> 2] = $6; //@line 26579
  $38 = $ReallocAsyncCtx19 + 16 | 0; //@line 26580
  HEAP32[$38 >> 2] = $8; //@line 26581
  $39 = $ReallocAsyncCtx19 + 20 | 0; //@line 26582
  HEAP32[$39 >> 2] = $10; //@line 26583
  $40 = $ReallocAsyncCtx19 + 24 | 0; //@line 26584
  HEAP32[$40 >> 2] = $12; //@line 26585
  $41 = $ReallocAsyncCtx19 + 28 | 0; //@line 26586
  HEAP32[$41 >> 2] = $14; //@line 26587
  $42 = $ReallocAsyncCtx19 + 32 | 0; //@line 26588
  HEAP32[$42 >> 2] = $16; //@line 26589
  $43 = $ReallocAsyncCtx19 + 36 | 0; //@line 26590
  HEAP32[$43 >> 2] = $18; //@line 26591
  $44 = $ReallocAsyncCtx19 + 40 | 0; //@line 26592
  HEAP32[$44 >> 2] = $20; //@line 26593
  $45 = $ReallocAsyncCtx19 + 44 | 0; //@line 26594
  HEAP32[$45 >> 2] = $22; //@line 26595
  $46 = $ReallocAsyncCtx19 + 48 | 0; //@line 26596
  HEAP32[$46 >> 2] = $24; //@line 26597
  $47 = $ReallocAsyncCtx19 + 52 | 0; //@line 26598
  HEAP32[$47 >> 2] = $26; //@line 26599
  $48 = $ReallocAsyncCtx19 + 56 | 0; //@line 26600
  HEAP32[$48 >> 2] = $28; //@line 26601
  $49 = $ReallocAsyncCtx19 + 60 | 0; //@line 26602
  HEAP32[$49 >> 2] = $30; //@line 26603
  $50 = $ReallocAsyncCtx19 + 64 | 0; //@line 26604
  HEAP32[$50 >> 2] = $32; //@line 26605
  sp = STACKTOP; //@line 26606
  return;
 }
 do {
  if (HEAP8[$2 >> 0] & 2) {
   $54 = $4 + 288 | 0; //@line 26614
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($54) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 26630
   HEAP8[$30 >> 0] = 0; //@line 26631
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $68 = $4 + 956 | 0; //@line 26636
    HEAP32[$68 >> 2] = (HEAP32[$68 >> 2] | 0) + 1; //@line 26639
   }
   $72 = HEAP8[$4 + 895 >> 0] | 0; //@line 26642
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($54) | 0) + 11 >> 0] = $72; //@line 26645
   HEAP32[$28 >> 2] = HEAP32[$28 >> 2] & -2; //@line 26648
  }
 } while (0);
 $77 = $4 + 377 | 0; //@line 26651
 if (HEAP8[$77 >> 0] | 0) {
  if (!(HEAP32[$28 >> 2] & 16)) {
   HEAP8[$77 >> 0] = 0; //@line 26659
   $83 = $4 + 895 | 0; //@line 26660
   $84 = HEAP8[$83 >> 0] | 0; //@line 26661
   if (!(($84 & 255) < 9 ? ($84 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $114 = HEAP32[$4 >> 2] | 0; //@line 26668
    $117 = HEAP32[(HEAP32[$114 >> 2] | 0) + 16 >> 2] | 0; //@line 26671
    $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 26672
    FUNCTION_TABLE_vi[$117 & 1023]($114); //@line 26673
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 471; //@line 26676
     $118 = $ReallocAsyncCtx + 4 | 0; //@line 26677
     HEAP32[$118 >> 2] = $2; //@line 26678
     $119 = $ReallocAsyncCtx + 8 | 0; //@line 26679
     HEAP32[$119 >> 2] = $4; //@line 26680
     $120 = $ReallocAsyncCtx + 12 | 0; //@line 26681
     HEAP32[$120 >> 2] = $6; //@line 26682
     $121 = $ReallocAsyncCtx + 16 | 0; //@line 26683
     HEAP32[$121 >> 2] = $24; //@line 26684
     $122 = $ReallocAsyncCtx + 20 | 0; //@line 26685
     HEAP32[$122 >> 2] = $26; //@line 26686
     $123 = $ReallocAsyncCtx + 24 | 0; //@line 26687
     HEAP32[$123 >> 2] = $16; //@line 26688
     $124 = $ReallocAsyncCtx + 28 | 0; //@line 26689
     HEAP32[$124 >> 2] = $18; //@line 26690
     $125 = $ReallocAsyncCtx + 32 | 0; //@line 26691
     HEAP32[$125 >> 2] = $20; //@line 26692
     $126 = $ReallocAsyncCtx + 36 | 0; //@line 26693
     HEAP32[$126 >> 2] = $22; //@line 26694
     $127 = $ReallocAsyncCtx + 40 | 0; //@line 26695
     HEAP32[$127 >> 2] = $8; //@line 26696
     $128 = $ReallocAsyncCtx + 44 | 0; //@line 26697
     HEAP32[$128 >> 2] = $10; //@line 26698
     $129 = $ReallocAsyncCtx + 48 | 0; //@line 26699
     HEAP32[$129 >> 2] = $12; //@line 26700
     $130 = $ReallocAsyncCtx + 52 | 0; //@line 26701
     HEAP32[$130 >> 2] = $14; //@line 26702
     $131 = $ReallocAsyncCtx + 56 | 0; //@line 26703
     HEAP32[$131 >> 2] = $28; //@line 26704
     $132 = $ReallocAsyncCtx + 60 | 0; //@line 26705
     HEAP32[$132 >> 2] = $30; //@line 26706
     $133 = $ReallocAsyncCtx + 64 | 0; //@line 26707
     HEAP32[$133 >> 2] = $83; //@line 26708
     sp = STACKTOP; //@line 26709
     return;
    }
    ___async_unwind = 0; //@line 26712
    HEAP32[$ReallocAsyncCtx >> 2] = 471; //@line 26713
    $118 = $ReallocAsyncCtx + 4 | 0; //@line 26714
    HEAP32[$118 >> 2] = $2; //@line 26715
    $119 = $ReallocAsyncCtx + 8 | 0; //@line 26716
    HEAP32[$119 >> 2] = $4; //@line 26717
    $120 = $ReallocAsyncCtx + 12 | 0; //@line 26718
    HEAP32[$120 >> 2] = $6; //@line 26719
    $121 = $ReallocAsyncCtx + 16 | 0; //@line 26720
    HEAP32[$121 >> 2] = $24; //@line 26721
    $122 = $ReallocAsyncCtx + 20 | 0; //@line 26722
    HEAP32[$122 >> 2] = $26; //@line 26723
    $123 = $ReallocAsyncCtx + 24 | 0; //@line 26724
    HEAP32[$123 >> 2] = $16; //@line 26725
    $124 = $ReallocAsyncCtx + 28 | 0; //@line 26726
    HEAP32[$124 >> 2] = $18; //@line 26727
    $125 = $ReallocAsyncCtx + 32 | 0; //@line 26728
    HEAP32[$125 >> 2] = $20; //@line 26729
    $126 = $ReallocAsyncCtx + 36 | 0; //@line 26730
    HEAP32[$126 >> 2] = $22; //@line 26731
    $127 = $ReallocAsyncCtx + 40 | 0; //@line 26732
    HEAP32[$127 >> 2] = $8; //@line 26733
    $128 = $ReallocAsyncCtx + 44 | 0; //@line 26734
    HEAP32[$128 >> 2] = $10; //@line 26735
    $129 = $ReallocAsyncCtx + 48 | 0; //@line 26736
    HEAP32[$129 >> 2] = $12; //@line 26737
    $130 = $ReallocAsyncCtx + 52 | 0; //@line 26738
    HEAP32[$130 >> 2] = $14; //@line 26739
    $131 = $ReallocAsyncCtx + 56 | 0; //@line 26740
    HEAP32[$131 >> 2] = $28; //@line 26741
    $132 = $ReallocAsyncCtx + 60 | 0; //@line 26742
    HEAP32[$132 >> 2] = $30; //@line 26743
    $133 = $ReallocAsyncCtx + 64 | 0; //@line 26744
    HEAP32[$133 >> 2] = $83; //@line 26745
    sp = STACKTOP; //@line 26746
    return;
   }
   $89 = $84 + 1 << 24 >> 24; //@line 26749
   HEAP8[$83 >> 0] = $89; //@line 26750
   if ($89 & 1) {
    $93 = $4 + 1097 | 0; //@line 26755
    HEAP8[$93 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$93 >> 0] | 0) | 0; //@line 26758
   }
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 26760
   $96 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 26761
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 470; //@line 26764
    $97 = $ReallocAsyncCtx9 + 4 | 0; //@line 26765
    HEAP32[$97 >> 2] = $2; //@line 26766
    $98 = $ReallocAsyncCtx9 + 8 | 0; //@line 26767
    HEAP32[$98 >> 2] = $4; //@line 26768
    $99 = $ReallocAsyncCtx9 + 12 | 0; //@line 26769
    HEAP32[$99 >> 2] = $6; //@line 26770
    $100 = $ReallocAsyncCtx9 + 16 | 0; //@line 26771
    HEAP32[$100 >> 2] = $8; //@line 26772
    $101 = $ReallocAsyncCtx9 + 20 | 0; //@line 26773
    HEAP32[$101 >> 2] = $10; //@line 26774
    $102 = $ReallocAsyncCtx9 + 24 | 0; //@line 26775
    HEAP32[$102 >> 2] = $12; //@line 26776
    $103 = $ReallocAsyncCtx9 + 28 | 0; //@line 26777
    HEAP32[$103 >> 2] = $14; //@line 26778
    $104 = $ReallocAsyncCtx9 + 32 | 0; //@line 26779
    HEAP32[$104 >> 2] = $16; //@line 26780
    $105 = $ReallocAsyncCtx9 + 36 | 0; //@line 26781
    HEAP32[$105 >> 2] = $18; //@line 26782
    $106 = $ReallocAsyncCtx9 + 40 | 0; //@line 26783
    HEAP32[$106 >> 2] = $20; //@line 26784
    $107 = $ReallocAsyncCtx9 + 44 | 0; //@line 26785
    HEAP32[$107 >> 2] = $22; //@line 26786
    $108 = $ReallocAsyncCtx9 + 48 | 0; //@line 26787
    HEAP32[$108 >> 2] = $24; //@line 26788
    $109 = $ReallocAsyncCtx9 + 52 | 0; //@line 26789
    HEAP32[$109 >> 2] = $26; //@line 26790
    $110 = $ReallocAsyncCtx9 + 56 | 0; //@line 26791
    HEAP32[$110 >> 2] = $28; //@line 26792
    $111 = $ReallocAsyncCtx9 + 60 | 0; //@line 26793
    HEAP32[$111 >> 2] = $30; //@line 26794
    $112 = $ReallocAsyncCtx9 + 64 | 0; //@line 26795
    HEAP32[$112 >> 2] = $83; //@line 26796
    sp = STACKTOP; //@line 26797
    return;
   }
   HEAP32[___async_retval >> 2] = $96; //@line 26801
   ___async_unwind = 0; //@line 26802
   HEAP32[$ReallocAsyncCtx9 >> 2] = 470; //@line 26803
   $97 = $ReallocAsyncCtx9 + 4 | 0; //@line 26804
   HEAP32[$97 >> 2] = $2; //@line 26805
   $98 = $ReallocAsyncCtx9 + 8 | 0; //@line 26806
   HEAP32[$98 >> 2] = $4; //@line 26807
   $99 = $ReallocAsyncCtx9 + 12 | 0; //@line 26808
   HEAP32[$99 >> 2] = $6; //@line 26809
   $100 = $ReallocAsyncCtx9 + 16 | 0; //@line 26810
   HEAP32[$100 >> 2] = $8; //@line 26811
   $101 = $ReallocAsyncCtx9 + 20 | 0; //@line 26812
   HEAP32[$101 >> 2] = $10; //@line 26813
   $102 = $ReallocAsyncCtx9 + 24 | 0; //@line 26814
   HEAP32[$102 >> 2] = $12; //@line 26815
   $103 = $ReallocAsyncCtx9 + 28 | 0; //@line 26816
   HEAP32[$103 >> 2] = $14; //@line 26817
   $104 = $ReallocAsyncCtx9 + 32 | 0; //@line 26818
   HEAP32[$104 >> 2] = $16; //@line 26819
   $105 = $ReallocAsyncCtx9 + 36 | 0; //@line 26820
   HEAP32[$105 >> 2] = $18; //@line 26821
   $106 = $ReallocAsyncCtx9 + 40 | 0; //@line 26822
   HEAP32[$106 >> 2] = $20; //@line 26823
   $107 = $ReallocAsyncCtx9 + 44 | 0; //@line 26824
   HEAP32[$107 >> 2] = $22; //@line 26825
   $108 = $ReallocAsyncCtx9 + 48 | 0; //@line 26826
   HEAP32[$108 >> 2] = $24; //@line 26827
   $109 = $ReallocAsyncCtx9 + 52 | 0; //@line 26828
   HEAP32[$109 >> 2] = $26; //@line 26829
   $110 = $ReallocAsyncCtx9 + 56 | 0; //@line 26830
   HEAP32[$110 >> 2] = $28; //@line 26831
   $111 = $ReallocAsyncCtx9 + 60 | 0; //@line 26832
   HEAP32[$111 >> 2] = $30; //@line 26833
   $112 = $ReallocAsyncCtx9 + 64 | 0; //@line 26834
   HEAP32[$112 >> 2] = $83; //@line 26835
   sp = STACKTOP; //@line 26836
   return;
  }
 }
 $134 = HEAP32[$28 >> 2] | 0; //@line 26840
 $137 = $134 & -3; //@line 26843
 if (!($134 & 2)) {
  $139 = $134; //@line 26845
 } else {
  HEAP32[$28 >> 2] = $137; //@line 26847
  $139 = $137; //@line 26848
 }
 if ($139 | 0) {
  $224 = HEAP32[$24 >> 2] | 0; //@line 26852
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 26853
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($224, $26, 1e3); //@line 26854
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 477; //@line 26857
   $225 = $ReallocAsyncCtx8 + 4 | 0; //@line 26858
   HEAP32[$225 >> 2] = $4; //@line 26859
   $226 = $ReallocAsyncCtx8 + 8 | 0; //@line 26860
   HEAP32[$226 >> 2] = $6; //@line 26861
   $227 = $ReallocAsyncCtx8 + 12 | 0; //@line 26862
   HEAP32[$227 >> 2] = $2; //@line 26863
   $228 = $ReallocAsyncCtx8 + 16 | 0; //@line 26864
   HEAP32[$228 >> 2] = $8; //@line 26865
   $229 = $ReallocAsyncCtx8 + 20 | 0; //@line 26866
   HEAP32[$229 >> 2] = $10; //@line 26867
   $230 = $ReallocAsyncCtx8 + 24 | 0; //@line 26868
   HEAP32[$230 >> 2] = $12; //@line 26869
   $231 = $ReallocAsyncCtx8 + 28 | 0; //@line 26870
   HEAP32[$231 >> 2] = $14; //@line 26871
   sp = STACKTOP; //@line 26872
   return;
  }
  ___async_unwind = 0; //@line 26875
  HEAP32[$ReallocAsyncCtx8 >> 2] = 477; //@line 26876
  $225 = $ReallocAsyncCtx8 + 4 | 0; //@line 26877
  HEAP32[$225 >> 2] = $4; //@line 26878
  $226 = $ReallocAsyncCtx8 + 8 | 0; //@line 26879
  HEAP32[$226 >> 2] = $6; //@line 26880
  $227 = $ReallocAsyncCtx8 + 12 | 0; //@line 26881
  HEAP32[$227 >> 2] = $2; //@line 26882
  $228 = $ReallocAsyncCtx8 + 16 | 0; //@line 26883
  HEAP32[$228 >> 2] = $8; //@line 26884
  $229 = $ReallocAsyncCtx8 + 20 | 0; //@line 26885
  HEAP32[$229 >> 2] = $10; //@line 26886
  $230 = $ReallocAsyncCtx8 + 24 | 0; //@line 26887
  HEAP32[$230 >> 2] = $12; //@line 26888
  $231 = $ReallocAsyncCtx8 + 28 | 0; //@line 26889
  HEAP32[$231 >> 2] = $14; //@line 26890
  sp = STACKTOP; //@line 26891
  return;
 }
 $140 = HEAP8[$2 >> 0] | 0; //@line 26894
 if ($140 & 1) {
  HEAP8[$2 >> 0] = $140 & -2; //@line 26899
  $145 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26901
  $147 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 26903
  $148 = $145 + 12 | 0; //@line 26904
  $149 = HEAP32[$148 >> 2] | 0; //@line 26905
  if (!$149) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 26908
   _mbed_assert_internal(15352, 15357, 1102); //@line 26909
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 472; //@line 26912
    $151 = $ReallocAsyncCtx18 + 4 | 0; //@line 26913
    HEAP32[$151 >> 2] = $2; //@line 26914
    $152 = $ReallocAsyncCtx18 + 8 | 0; //@line 26915
    HEAP32[$152 >> 2] = $4; //@line 26916
    $153 = $ReallocAsyncCtx18 + 12 | 0; //@line 26917
    HEAP32[$153 >> 2] = $6; //@line 26918
    $154 = $ReallocAsyncCtx18 + 16 | 0; //@line 26919
    HEAP32[$154 >> 2] = $8; //@line 26920
    $155 = $ReallocAsyncCtx18 + 20 | 0; //@line 26921
    HEAP32[$155 >> 2] = $10; //@line 26922
    $156 = $ReallocAsyncCtx18 + 24 | 0; //@line 26923
    HEAP32[$156 >> 2] = $12; //@line 26924
    $157 = $ReallocAsyncCtx18 + 28 | 0; //@line 26925
    HEAP32[$157 >> 2] = $14; //@line 26926
    $158 = $ReallocAsyncCtx18 + 32 | 0; //@line 26927
    HEAP32[$158 >> 2] = $148; //@line 26928
    $159 = $ReallocAsyncCtx18 + 36 | 0; //@line 26929
    HEAP32[$159 >> 2] = $145; //@line 26930
    $160 = $ReallocAsyncCtx18 + 40 | 0; //@line 26931
    HEAP32[$160 >> 2] = $147; //@line 26932
    $161 = $ReallocAsyncCtx18 + 44 | 0; //@line 26933
    HEAP32[$161 >> 2] = $16; //@line 26934
    $162 = $ReallocAsyncCtx18 + 48 | 0; //@line 26935
    HEAP32[$162 >> 2] = $18; //@line 26936
    $163 = $ReallocAsyncCtx18 + 52 | 0; //@line 26937
    HEAP32[$163 >> 2] = $20; //@line 26938
    $164 = $ReallocAsyncCtx18 + 56 | 0; //@line 26939
    HEAP32[$164 >> 2] = $22; //@line 26940
    sp = STACKTOP; //@line 26941
    return;
   }
   ___async_unwind = 0; //@line 26944
   HEAP32[$ReallocAsyncCtx18 >> 2] = 472; //@line 26945
   $151 = $ReallocAsyncCtx18 + 4 | 0; //@line 26946
   HEAP32[$151 >> 2] = $2; //@line 26947
   $152 = $ReallocAsyncCtx18 + 8 | 0; //@line 26948
   HEAP32[$152 >> 2] = $4; //@line 26949
   $153 = $ReallocAsyncCtx18 + 12 | 0; //@line 26950
   HEAP32[$153 >> 2] = $6; //@line 26951
   $154 = $ReallocAsyncCtx18 + 16 | 0; //@line 26952
   HEAP32[$154 >> 2] = $8; //@line 26953
   $155 = $ReallocAsyncCtx18 + 20 | 0; //@line 26954
   HEAP32[$155 >> 2] = $10; //@line 26955
   $156 = $ReallocAsyncCtx18 + 24 | 0; //@line 26956
   HEAP32[$156 >> 2] = $12; //@line 26957
   $157 = $ReallocAsyncCtx18 + 28 | 0; //@line 26958
   HEAP32[$157 >> 2] = $14; //@line 26959
   $158 = $ReallocAsyncCtx18 + 32 | 0; //@line 26960
   HEAP32[$158 >> 2] = $148; //@line 26961
   $159 = $ReallocAsyncCtx18 + 36 | 0; //@line 26962
   HEAP32[$159 >> 2] = $145; //@line 26963
   $160 = $ReallocAsyncCtx18 + 40 | 0; //@line 26964
   HEAP32[$160 >> 2] = $147; //@line 26965
   $161 = $ReallocAsyncCtx18 + 44 | 0; //@line 26966
   HEAP32[$161 >> 2] = $16; //@line 26967
   $162 = $ReallocAsyncCtx18 + 48 | 0; //@line 26968
   HEAP32[$162 >> 2] = $18; //@line 26969
   $163 = $ReallocAsyncCtx18 + 52 | 0; //@line 26970
   HEAP32[$163 >> 2] = $20; //@line 26971
   $164 = $ReallocAsyncCtx18 + 56 | 0; //@line 26972
   HEAP32[$164 >> 2] = $22; //@line 26973
   sp = STACKTOP; //@line 26974
   return;
  } else {
   $165 = HEAP32[$149 >> 2] | 0; //@line 26977
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 26978
   FUNCTION_TABLE_vii[$165 & 31]($145, $147); //@line 26979
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 473; //@line 26982
    $166 = $ReallocAsyncCtx2 + 4 | 0; //@line 26983
    HEAP32[$166 >> 2] = $2; //@line 26984
    $167 = $ReallocAsyncCtx2 + 8 | 0; //@line 26985
    HEAP32[$167 >> 2] = $4; //@line 26986
    $168 = $ReallocAsyncCtx2 + 12 | 0; //@line 26987
    HEAP32[$168 >> 2] = $6; //@line 26988
    $169 = $ReallocAsyncCtx2 + 16 | 0; //@line 26989
    HEAP32[$169 >> 2] = $16; //@line 26990
    $170 = $ReallocAsyncCtx2 + 20 | 0; //@line 26991
    HEAP32[$170 >> 2] = $18; //@line 26992
    $171 = $ReallocAsyncCtx2 + 24 | 0; //@line 26993
    HEAP32[$171 >> 2] = $20; //@line 26994
    $172 = $ReallocAsyncCtx2 + 28 | 0; //@line 26995
    HEAP32[$172 >> 2] = $22; //@line 26996
    $173 = $ReallocAsyncCtx2 + 32 | 0; //@line 26997
    HEAP32[$173 >> 2] = $8; //@line 26998
    $174 = $ReallocAsyncCtx2 + 36 | 0; //@line 26999
    HEAP32[$174 >> 2] = $10; //@line 27000
    $175 = $ReallocAsyncCtx2 + 40 | 0; //@line 27001
    HEAP32[$175 >> 2] = $12; //@line 27002
    $176 = $ReallocAsyncCtx2 + 44 | 0; //@line 27003
    HEAP32[$176 >> 2] = $14; //@line 27004
    sp = STACKTOP; //@line 27005
    return;
   }
   ___async_unwind = 0; //@line 27008
   HEAP32[$ReallocAsyncCtx2 >> 2] = 473; //@line 27009
   $166 = $ReallocAsyncCtx2 + 4 | 0; //@line 27010
   HEAP32[$166 >> 2] = $2; //@line 27011
   $167 = $ReallocAsyncCtx2 + 8 | 0; //@line 27012
   HEAP32[$167 >> 2] = $4; //@line 27013
   $168 = $ReallocAsyncCtx2 + 12 | 0; //@line 27014
   HEAP32[$168 >> 2] = $6; //@line 27015
   $169 = $ReallocAsyncCtx2 + 16 | 0; //@line 27016
   HEAP32[$169 >> 2] = $16; //@line 27017
   $170 = $ReallocAsyncCtx2 + 20 | 0; //@line 27018
   HEAP32[$170 >> 2] = $18; //@line 27019
   $171 = $ReallocAsyncCtx2 + 24 | 0; //@line 27020
   HEAP32[$171 >> 2] = $20; //@line 27021
   $172 = $ReallocAsyncCtx2 + 28 | 0; //@line 27022
   HEAP32[$172 >> 2] = $22; //@line 27023
   $173 = $ReallocAsyncCtx2 + 32 | 0; //@line 27024
   HEAP32[$173 >> 2] = $8; //@line 27025
   $174 = $ReallocAsyncCtx2 + 36 | 0; //@line 27026
   HEAP32[$174 >> 2] = $10; //@line 27027
   $175 = $ReallocAsyncCtx2 + 40 | 0; //@line 27028
   HEAP32[$175 >> 2] = $12; //@line 27029
   $176 = $ReallocAsyncCtx2 + 44 | 0; //@line 27030
   HEAP32[$176 >> 2] = $14; //@line 27031
   sp = STACKTOP; //@line 27032
   return;
  }
 }
 if ($140 & 8) {
  HEAP8[$2 >> 0] = $140 & -9; //@line 27040
  $181 = HEAP32[$4 + 1324 >> 2] | 0; //@line 27042
  $182 = $181 + 32 | 0; //@line 27043
  $184 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 27045
  $185 = $181 + 44 | 0; //@line 27046
  $186 = HEAP32[$185 >> 2] | 0; //@line 27047
  if (!$186) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 27050
   _mbed_assert_internal(15352, 15357, 1102); //@line 27051
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 474; //@line 27054
    $188 = $ReallocAsyncCtx17 + 4 | 0; //@line 27055
    HEAP32[$188 >> 2] = $2; //@line 27056
    $189 = $ReallocAsyncCtx17 + 8 | 0; //@line 27057
    HEAP32[$189 >> 2] = $4; //@line 27058
    $190 = $ReallocAsyncCtx17 + 12 | 0; //@line 27059
    HEAP32[$190 >> 2] = $6; //@line 27060
    $191 = $ReallocAsyncCtx17 + 16 | 0; //@line 27061
    HEAP32[$191 >> 2] = $8; //@line 27062
    $192 = $ReallocAsyncCtx17 + 20 | 0; //@line 27063
    HEAP32[$192 >> 2] = $10; //@line 27064
    $193 = $ReallocAsyncCtx17 + 24 | 0; //@line 27065
    HEAP32[$193 >> 2] = $12; //@line 27066
    $194 = $ReallocAsyncCtx17 + 28 | 0; //@line 27067
    HEAP32[$194 >> 2] = $14; //@line 27068
    $195 = $ReallocAsyncCtx17 + 32 | 0; //@line 27069
    HEAP32[$195 >> 2] = $16; //@line 27070
    $196 = $ReallocAsyncCtx17 + 36 | 0; //@line 27071
    HEAP32[$196 >> 2] = $18; //@line 27072
    $197 = $ReallocAsyncCtx17 + 40 | 0; //@line 27073
    HEAP32[$197 >> 2] = $20; //@line 27074
    $198 = $ReallocAsyncCtx17 + 44 | 0; //@line 27075
    HEAP32[$198 >> 2] = $22; //@line 27076
    $199 = $ReallocAsyncCtx17 + 48 | 0; //@line 27077
    HEAP32[$199 >> 2] = $182; //@line 27078
    $200 = $ReallocAsyncCtx17 + 52 | 0; //@line 27079
    HEAP32[$200 >> 2] = $184; //@line 27080
    $201 = $ReallocAsyncCtx17 + 56 | 0; //@line 27081
    HEAP32[$201 >> 2] = $185; //@line 27082
    sp = STACKTOP; //@line 27083
    return;
   }
   ___async_unwind = 0; //@line 27086
   HEAP32[$ReallocAsyncCtx17 >> 2] = 474; //@line 27087
   $188 = $ReallocAsyncCtx17 + 4 | 0; //@line 27088
   HEAP32[$188 >> 2] = $2; //@line 27089
   $189 = $ReallocAsyncCtx17 + 8 | 0; //@line 27090
   HEAP32[$189 >> 2] = $4; //@line 27091
   $190 = $ReallocAsyncCtx17 + 12 | 0; //@line 27092
   HEAP32[$190 >> 2] = $6; //@line 27093
   $191 = $ReallocAsyncCtx17 + 16 | 0; //@line 27094
   HEAP32[$191 >> 2] = $8; //@line 27095
   $192 = $ReallocAsyncCtx17 + 20 | 0; //@line 27096
   HEAP32[$192 >> 2] = $10; //@line 27097
   $193 = $ReallocAsyncCtx17 + 24 | 0; //@line 27098
   HEAP32[$193 >> 2] = $12; //@line 27099
   $194 = $ReallocAsyncCtx17 + 28 | 0; //@line 27100
   HEAP32[$194 >> 2] = $14; //@line 27101
   $195 = $ReallocAsyncCtx17 + 32 | 0; //@line 27102
   HEAP32[$195 >> 2] = $16; //@line 27103
   $196 = $ReallocAsyncCtx17 + 36 | 0; //@line 27104
   HEAP32[$196 >> 2] = $18; //@line 27105
   $197 = $ReallocAsyncCtx17 + 40 | 0; //@line 27106
   HEAP32[$197 >> 2] = $20; //@line 27107
   $198 = $ReallocAsyncCtx17 + 44 | 0; //@line 27108
   HEAP32[$198 >> 2] = $22; //@line 27109
   $199 = $ReallocAsyncCtx17 + 48 | 0; //@line 27110
   HEAP32[$199 >> 2] = $182; //@line 27111
   $200 = $ReallocAsyncCtx17 + 52 | 0; //@line 27112
   HEAP32[$200 >> 2] = $184; //@line 27113
   $201 = $ReallocAsyncCtx17 + 56 | 0; //@line 27114
   HEAP32[$201 >> 2] = $185; //@line 27115
   sp = STACKTOP; //@line 27116
   return;
  } else {
   $202 = HEAP32[$186 >> 2] | 0; //@line 27119
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 27120
   FUNCTION_TABLE_vii[$202 & 31]($182, $184); //@line 27121
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 27124
    $203 = $ReallocAsyncCtx3 + 4 | 0; //@line 27125
    HEAP32[$203 >> 2] = $4; //@line 27126
    $204 = $ReallocAsyncCtx3 + 8 | 0; //@line 27127
    HEAP32[$204 >> 2] = $6; //@line 27128
    $205 = $ReallocAsyncCtx3 + 12 | 0; //@line 27129
    HEAP32[$205 >> 2] = $2; //@line 27130
    $206 = $ReallocAsyncCtx3 + 16 | 0; //@line 27131
    HEAP32[$206 >> 2] = $16; //@line 27132
    $207 = $ReallocAsyncCtx3 + 20 | 0; //@line 27133
    HEAP32[$207 >> 2] = $18; //@line 27134
    $208 = $ReallocAsyncCtx3 + 24 | 0; //@line 27135
    HEAP32[$208 >> 2] = $20; //@line 27136
    $209 = $ReallocAsyncCtx3 + 28 | 0; //@line 27137
    HEAP32[$209 >> 2] = $22; //@line 27138
    $210 = $ReallocAsyncCtx3 + 32 | 0; //@line 27139
    HEAP32[$210 >> 2] = $8; //@line 27140
    $211 = $ReallocAsyncCtx3 + 36 | 0; //@line 27141
    HEAP32[$211 >> 2] = $10; //@line 27142
    $212 = $ReallocAsyncCtx3 + 40 | 0; //@line 27143
    HEAP32[$212 >> 2] = $12; //@line 27144
    $213 = $ReallocAsyncCtx3 + 44 | 0; //@line 27145
    HEAP32[$213 >> 2] = $14; //@line 27146
    sp = STACKTOP; //@line 27147
    return;
   }
   ___async_unwind = 0; //@line 27150
   HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 27151
   $203 = $ReallocAsyncCtx3 + 4 | 0; //@line 27152
   HEAP32[$203 >> 2] = $4; //@line 27153
   $204 = $ReallocAsyncCtx3 + 8 | 0; //@line 27154
   HEAP32[$204 >> 2] = $6; //@line 27155
   $205 = $ReallocAsyncCtx3 + 12 | 0; //@line 27156
   HEAP32[$205 >> 2] = $2; //@line 27157
   $206 = $ReallocAsyncCtx3 + 16 | 0; //@line 27158
   HEAP32[$206 >> 2] = $16; //@line 27159
   $207 = $ReallocAsyncCtx3 + 20 | 0; //@line 27160
   HEAP32[$207 >> 2] = $18; //@line 27161
   $208 = $ReallocAsyncCtx3 + 24 | 0; //@line 27162
   HEAP32[$208 >> 2] = $20; //@line 27163
   $209 = $ReallocAsyncCtx3 + 28 | 0; //@line 27164
   HEAP32[$209 >> 2] = $22; //@line 27165
   $210 = $ReallocAsyncCtx3 + 32 | 0; //@line 27166
   HEAP32[$210 >> 2] = $8; //@line 27167
   $211 = $ReallocAsyncCtx3 + 36 | 0; //@line 27168
   HEAP32[$211 >> 2] = $10; //@line 27169
   $212 = $ReallocAsyncCtx3 + 40 | 0; //@line 27170
   HEAP32[$212 >> 2] = $12; //@line 27171
   $213 = $ReallocAsyncCtx3 + 44 | 0; //@line 27172
   HEAP32[$213 >> 2] = $14; //@line 27173
   sp = STACKTOP; //@line 27174
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(13258, $16) | 0; //@line 27181
  _printf(13405, $20) | 0; //@line 27182
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 27183
  _putchar(10) | 0; //@line 27184
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 476; //@line 27187
   $216 = $ReallocAsyncCtx7 + 4 | 0; //@line 27188
   HEAP32[$216 >> 2] = $4; //@line 27189
   $217 = $ReallocAsyncCtx7 + 8 | 0; //@line 27190
   HEAP32[$217 >> 2] = $6; //@line 27191
   $218 = $ReallocAsyncCtx7 + 12 | 0; //@line 27192
   HEAP32[$218 >> 2] = $2; //@line 27193
   $219 = $ReallocAsyncCtx7 + 16 | 0; //@line 27194
   HEAP32[$219 >> 2] = $8; //@line 27195
   $220 = $ReallocAsyncCtx7 + 20 | 0; //@line 27196
   HEAP32[$220 >> 2] = $10; //@line 27197
   $221 = $ReallocAsyncCtx7 + 24 | 0; //@line 27198
   HEAP32[$221 >> 2] = $12; //@line 27199
   $222 = $ReallocAsyncCtx7 + 28 | 0; //@line 27200
   HEAP32[$222 >> 2] = $14; //@line 27201
   sp = STACKTOP; //@line 27202
   return;
  }
  ___async_unwind = 0; //@line 27205
  HEAP32[$ReallocAsyncCtx7 >> 2] = 476; //@line 27206
  $216 = $ReallocAsyncCtx7 + 4 | 0; //@line 27207
  HEAP32[$216 >> 2] = $4; //@line 27208
  $217 = $ReallocAsyncCtx7 + 8 | 0; //@line 27209
  HEAP32[$217 >> 2] = $6; //@line 27210
  $218 = $ReallocAsyncCtx7 + 12 | 0; //@line 27211
  HEAP32[$218 >> 2] = $2; //@line 27212
  $219 = $ReallocAsyncCtx7 + 16 | 0; //@line 27213
  HEAP32[$219 >> 2] = $8; //@line 27214
  $220 = $ReallocAsyncCtx7 + 20 | 0; //@line 27215
  HEAP32[$220 >> 2] = $10; //@line 27216
  $221 = $ReallocAsyncCtx7 + 24 | 0; //@line 27217
  HEAP32[$221 >> 2] = $12; //@line 27218
  $222 = $ReallocAsyncCtx7 + 28 | 0; //@line 27219
  HEAP32[$222 >> 2] = $14; //@line 27220
  sp = STACKTOP; //@line 27221
  return;
 }
 $223 = HEAP8[$2 >> 0] & -33; //@line 27225
 HEAP8[$2 >> 0] = $223; //@line 27226
 do {
  if (!($223 & 2)) {
   $262 = $223; //@line 27231
  } else {
   $234 = $223 & -3; //@line 27233
   HEAP8[$2 >> 0] = $234; //@line 27234
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(13258, $8) | 0; //@line 27239
    _printf(13285, $12) | 0; //@line 27240
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 27241
    _putchar(10) | 0; //@line 27242
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 27245
     $238 = $ReallocAsyncCtx6 + 4 | 0; //@line 27246
     HEAP32[$238 >> 2] = $4; //@line 27247
     $239 = $ReallocAsyncCtx6 + 8 | 0; //@line 27248
     HEAP32[$239 >> 2] = $6; //@line 27249
     $240 = $ReallocAsyncCtx6 + 12 | 0; //@line 27250
     HEAP32[$240 >> 2] = $6; //@line 27251
     $241 = $ReallocAsyncCtx6 + 16 | 0; //@line 27252
     HEAP32[$241 >> 2] = $2; //@line 27253
     sp = STACKTOP; //@line 27254
     return;
    }
    ___async_unwind = 0; //@line 27257
    HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 27258
    $238 = $ReallocAsyncCtx6 + 4 | 0; //@line 27259
    HEAP32[$238 >> 2] = $4; //@line 27260
    $239 = $ReallocAsyncCtx6 + 8 | 0; //@line 27261
    HEAP32[$239 >> 2] = $6; //@line 27262
    $240 = $ReallocAsyncCtx6 + 12 | 0; //@line 27263
    HEAP32[$240 >> 2] = $6; //@line 27264
    $241 = $ReallocAsyncCtx6 + 16 | 0; //@line 27265
    HEAP32[$241 >> 2] = $2; //@line 27266
    sp = STACKTOP; //@line 27267
    return;
   }
   if ($234 & 4) {
    $260 = $234 & -5; //@line 27273
    HEAP8[$2 >> 0] = $260; //@line 27274
    $262 = $260; //@line 27275
    break;
   }
   $245 = HEAP32[$4 + 1324 >> 2] | 0; //@line 27279
   $246 = $245 + 16 | 0; //@line 27280
   $248 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 27282
   $249 = $245 + 28 | 0; //@line 27283
   $250 = HEAP32[$249 >> 2] | 0; //@line 27284
   if (!$250) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 27287
    _mbed_assert_internal(15352, 15357, 1102); //@line 27288
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 27291
     $252 = $ReallocAsyncCtx15 + 4 | 0; //@line 27292
     HEAP32[$252 >> 2] = $249; //@line 27293
     $253 = $ReallocAsyncCtx15 + 8 | 0; //@line 27294
     HEAP32[$253 >> 2] = $246; //@line 27295
     $254 = $ReallocAsyncCtx15 + 12 | 0; //@line 27296
     HEAP32[$254 >> 2] = $248; //@line 27297
     $255 = $ReallocAsyncCtx15 + 16 | 0; //@line 27298
     HEAP32[$255 >> 2] = $2; //@line 27299
     $256 = $ReallocAsyncCtx15 + 20 | 0; //@line 27300
     HEAP32[$256 >> 2] = $4; //@line 27301
     sp = STACKTOP; //@line 27302
     return;
    }
    ___async_unwind = 0; //@line 27305
    HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 27306
    $252 = $ReallocAsyncCtx15 + 4 | 0; //@line 27307
    HEAP32[$252 >> 2] = $249; //@line 27308
    $253 = $ReallocAsyncCtx15 + 8 | 0; //@line 27309
    HEAP32[$253 >> 2] = $246; //@line 27310
    $254 = $ReallocAsyncCtx15 + 12 | 0; //@line 27311
    HEAP32[$254 >> 2] = $248; //@line 27312
    $255 = $ReallocAsyncCtx15 + 16 | 0; //@line 27313
    HEAP32[$255 >> 2] = $2; //@line 27314
    $256 = $ReallocAsyncCtx15 + 20 | 0; //@line 27315
    HEAP32[$256 >> 2] = $4; //@line 27316
    sp = STACKTOP; //@line 27317
    return;
   } else {
    $257 = HEAP32[$250 >> 2] | 0; //@line 27320
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 27321
    FUNCTION_TABLE_vii[$257 & 31]($246, $248); //@line 27322
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 27325
     $258 = $ReallocAsyncCtx4 + 4 | 0; //@line 27326
     HEAP32[$258 >> 2] = $2; //@line 27327
     $259 = $ReallocAsyncCtx4 + 8 | 0; //@line 27328
     HEAP32[$259 >> 2] = $4; //@line 27329
     sp = STACKTOP; //@line 27330
     return;
    }
    ___async_unwind = 0; //@line 27333
    HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 27334
    $258 = $ReallocAsyncCtx4 + 4 | 0; //@line 27335
    HEAP32[$258 >> 2] = $2; //@line 27336
    $259 = $ReallocAsyncCtx4 + 8 | 0; //@line 27337
    HEAP32[$259 >> 2] = $4; //@line 27338
    sp = STACKTOP; //@line 27339
    return;
   }
  }
 } while (0);
 if (!($262 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $262 & -17; //@line 27350
 $266 = HEAP32[$4 + 1324 >> 2] | 0; //@line 27352
 $267 = $266 + 48 | 0; //@line 27353
 $269 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 27355
 $270 = $266 + 60 | 0; //@line 27356
 $271 = HEAP32[$270 >> 2] | 0; //@line 27357
 if (!$271) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 27360
  _mbed_assert_internal(15352, 15357, 1102); //@line 27361
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 27364
   $273 = $ReallocAsyncCtx14 + 4 | 0; //@line 27365
   HEAP32[$273 >> 2] = $270; //@line 27366
   $274 = $ReallocAsyncCtx14 + 8 | 0; //@line 27367
   HEAP32[$274 >> 2] = $267; //@line 27368
   $275 = $ReallocAsyncCtx14 + 12 | 0; //@line 27369
   HEAP32[$275 >> 2] = $269; //@line 27370
   sp = STACKTOP; //@line 27371
   return;
  }
  ___async_unwind = 0; //@line 27374
  HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 27375
  $273 = $ReallocAsyncCtx14 + 4 | 0; //@line 27376
  HEAP32[$273 >> 2] = $270; //@line 27377
  $274 = $ReallocAsyncCtx14 + 8 | 0; //@line 27378
  HEAP32[$274 >> 2] = $267; //@line 27379
  $275 = $ReallocAsyncCtx14 + 12 | 0; //@line 27380
  HEAP32[$275 >> 2] = $269; //@line 27381
  sp = STACKTOP; //@line 27382
  return;
 } else {
  $276 = HEAP32[$271 >> 2] | 0; //@line 27385
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 27386
  FUNCTION_TABLE_vii[$276 & 31]($267, $269); //@line 27387
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 27390
   sp = STACKTOP; //@line 27391
   return;
  }
  ___async_unwind = 0; //@line 27394
  HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 27395
  sp = STACKTOP; //@line 27396
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy98 = 0, $$pre20 = 0, $1 = 0, $119 = 0, $124 = 0, $130 = 0, $136 = 0, $143 = 0, $144 = 0, $181 = 0, $19 = 0, $192 = 0, $196 = 0, $2 = 0, $20 = 0, $200 = 0, $205 = 0, $211 = 0, $212 = 0, $217 = 0, $221 = 0, $224 = 0, $23 = 0, $244 = 0, $252 = 0, $256 = 0, $262 = 0, $265 = 0, $268 = 0, $288 = 0, $29 = 0, $291 = 0, $297 = 0, $3 = 0, $300 = 0, $303 = 0, $305 = 0, $306 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $331 = 0, $332 = 0, $345 = 0, $349 = 0, $350 = 0, $352 = 0, $353 = 0, $354 = 0, $370 = 0, $371 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $4 = 0, $407 = 0, $409 = 0, $418 = 0, $419 = 0, $429 = 0, $43 = 0, $432 = 0, $433 = 0, $435 = 0, $436 = 0, $437 = 0, $444 = 0, $445 = 0, $448 = 0, $449 = 0, $451 = 0, $455 = 0, $456 = 0, $458 = 0, $459 = 0, $460 = 0, $465 = 0, $466 = 0, $51 = 0, $54 = 0, $59 = 0, $63 = 0, $64 = 0, $84 = 0, $85 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx36 = 0, $AsyncCtx40 = 0, $AsyncCtx44 = 0, $AsyncCtx48 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $AsyncCtx68 = 0, $AsyncCtx72 = 0, $AsyncCtx76 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14911
 STACKTOP = STACKTOP + 48 | 0; //@line 14912
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 14912
 $$byval_copy98 = sp + 40 | 0; //@line 14913
 $vararg_buffer5 = sp + 24 | 0; //@line 14914
 $vararg_buffer3 = sp + 16 | 0; //@line 14915
 $vararg_buffer1 = sp + 8 | 0; //@line 14916
 $vararg_buffer = sp; //@line 14917
 $1 = sp + 32 | 0; //@line 14918
 $2 = $0 + 356 | 0; //@line 14919
 $3 = HEAP32[$2 >> 2] | 0; //@line 14920
 $4 = $0 + 996 | 0; //@line 14921
 $AsyncCtx48 = _emscripten_alloc_async_context(60, sp) | 0; //@line 14922
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($3, $4); //@line 14923
 if (___async) {
  HEAP32[$AsyncCtx48 >> 2] = 464; //@line 14926
  HEAP32[$AsyncCtx48 + 4 >> 2] = $0; //@line 14928
  HEAP32[$AsyncCtx48 + 8 >> 2] = $1; //@line 14930
  HEAP32[$AsyncCtx48 + 12 >> 2] = $vararg_buffer3; //@line 14932
  HEAP32[$AsyncCtx48 + 16 >> 2] = $vararg_buffer3; //@line 14934
  HEAP32[$AsyncCtx48 + 20 >> 2] = $vararg_buffer5; //@line 14936
  HEAP32[$AsyncCtx48 + 24 >> 2] = $vararg_buffer5; //@line 14938
  HEAP32[$AsyncCtx48 + 28 >> 2] = $vararg_buffer; //@line 14940
  HEAP32[$AsyncCtx48 + 32 >> 2] = $vararg_buffer; //@line 14942
  HEAP32[$AsyncCtx48 + 36 >> 2] = $vararg_buffer1; //@line 14944
  HEAP32[$AsyncCtx48 + 40 >> 2] = $vararg_buffer1; //@line 14946
  HEAP32[$AsyncCtx48 + 44 >> 2] = $2; //@line 14948
  HEAP32[$AsyncCtx48 + 48 >> 2] = $4; //@line 14950
  HEAP32[$AsyncCtx48 + 52 >> 2] = $1; //@line 14952
  HEAP32[$AsyncCtx48 + 56 >> 2] = $1; //@line 14954
  sp = STACKTOP; //@line 14955
  STACKTOP = sp; //@line 14956
  return;
 }
 _emscripten_free_async_context($AsyncCtx48 | 0); //@line 14958
 $19 = $0 + 944 | 0; //@line 14959
 $20 = HEAP8[$19 >> 0] | 0; //@line 14960
 $$pre20 = $0 + 968 | 0; //@line 14963
 do {
  if ($20 & 32) {
   $23 = HEAP32[$$pre20 >> 2] | 0; //@line 14966
   if ($23 & 64 | 0) {
    HEAP32[$$pre20 >> 2] = $23 & -66; //@line 14971
   }
   do {
    if (!($20 & 9)) {
     label = 10; //@line 14977
    } else {
     $29 = $0 + 288 | 0; //@line 14979
     if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 4 >> 2] | 0) != 2) {
      if ((HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] | 0) != 2) {
       label = 10; //@line 14991
       break;
      }
     }
     HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 14997
     __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 14999
     $43 = HEAP8[$0 + 895 >> 0] | 0; //@line 15001
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 11 >> 0] = $43; //@line 15004
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 10 >> 0] = 0; //@line 15007
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 12 >> 2] = 0; //@line 15010
     $192 = $0 + 373 | 0; //@line 15012
    }
   } while (0);
   do {
    if ((label | 0) == 10) {
     $51 = $0 + 373 | 0; //@line 15017
     if (!(HEAP8[$51 >> 0] | 0)) {
      $54 = HEAP8[$19 >> 0] | 0; //@line 15021
      if (!($54 & 9)) {
       $192 = $51; //@line 15025
      } else {
       if ($54 & 8) {
        $59 = $0 + 264 | 0; //@line 15030
        if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($59) | 0) >> 2] | 0)) {
         $63 = $0 + 897 | 0; //@line 15035
         $64 = HEAP8[$63 >> 0] | 0; //@line 15036
         HEAP8[(__ZN11LoRaMacMlme16get_confirmationEv($59) | 0) + 14 >> 0] = $64; //@line 15039
         if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($59) | 0) + 4 >> 2] | 0)) {
          HEAP32[$0 + 956 >> 2] = 0; //@line 15046
          HEAP8[$0 + 380 >> 0] = 0; //@line 15048
          HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 15051
          $192 = $51; //@line 15052
          break;
         }
         if ((HEAPU8[$63 >> 0] | 0) >= (HEAPU8[$0 + 896 >> 0] | 0)) {
          HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 15062
          $192 = $51; //@line 15063
          break;
         }
         HEAP8[$19 >> 0] = HEAP8[$19 >> 0] & -33; //@line 15068
         $84 = HEAP32[$0 + 1328 >> 2] | 0; //@line 15070
         HEAP32[$1 >> 2] = 465; //@line 15071
         HEAP32[$1 + 4 >> 2] = 0; //@line 15073
         $AsyncCtx44 = _emscripten_alloc_async_context(68, sp) | 0; //@line 15074
         HEAP32[$$byval_copy98 >> 2] = HEAP32[$1 >> 2]; //@line 15075
         HEAP32[$$byval_copy98 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 15075
         $85 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($84, $0, $$byval_copy98) | 0; //@line 15076
         if (___async) {
          HEAP32[$AsyncCtx44 >> 2] = 466; //@line 15079
          HEAP32[$AsyncCtx44 + 4 >> 2] = $19; //@line 15081
          HEAP32[$AsyncCtx44 + 8 >> 2] = $0; //@line 15083
          HEAP32[$AsyncCtx44 + 12 >> 2] = $1; //@line 15085
          HEAP32[$AsyncCtx44 + 16 >> 2] = $vararg_buffer3; //@line 15087
          HEAP32[$AsyncCtx44 + 20 >> 2] = $vararg_buffer3; //@line 15089
          HEAP32[$AsyncCtx44 + 24 >> 2] = $vararg_buffer5; //@line 15091
          HEAP32[$AsyncCtx44 + 28 >> 2] = $vararg_buffer5; //@line 15093
          HEAP32[$AsyncCtx44 + 32 >> 2] = $1; //@line 15095
          HEAP32[$AsyncCtx44 + 36 >> 2] = $vararg_buffer; //@line 15097
          HEAP32[$AsyncCtx44 + 40 >> 2] = $vararg_buffer; //@line 15099
          HEAP32[$AsyncCtx44 + 44 >> 2] = $vararg_buffer1; //@line 15101
          HEAP32[$AsyncCtx44 + 48 >> 2] = $vararg_buffer1; //@line 15103
          HEAP32[$AsyncCtx44 + 52 >> 2] = $2; //@line 15105
          HEAP32[$AsyncCtx44 + 56 >> 2] = $4; //@line 15107
          HEAP32[$AsyncCtx44 + 60 >> 2] = $$pre20; //@line 15109
          HEAP32[$AsyncCtx44 + 64 >> 2] = $51; //@line 15111
          sp = STACKTOP; //@line 15112
          STACKTOP = sp; //@line 15113
          return;
         }
         _emscripten_free_async_context($AsyncCtx44 | 0); //@line 15115
         do {
          if (!$85) {
           $AsyncCtx76 = _emscripten_alloc_async_context(68, sp) | 0; //@line 15119
           _mbed_assert_internal(13142, 13151, 194); //@line 15120
           if (___async) {
            HEAP32[$AsyncCtx76 >> 2] = 467; //@line 15123
            HEAP32[$AsyncCtx76 + 4 >> 2] = $19; //@line 15125
            HEAP32[$AsyncCtx76 + 8 >> 2] = $0; //@line 15127
            HEAP32[$AsyncCtx76 + 12 >> 2] = $1; //@line 15129
            HEAP32[$AsyncCtx76 + 16 >> 2] = $vararg_buffer3; //@line 15131
            HEAP32[$AsyncCtx76 + 20 >> 2] = $vararg_buffer3; //@line 15133
            HEAP32[$AsyncCtx76 + 24 >> 2] = $vararg_buffer5; //@line 15135
            HEAP32[$AsyncCtx76 + 28 >> 2] = $vararg_buffer5; //@line 15137
            HEAP32[$AsyncCtx76 + 32 >> 2] = $1; //@line 15139
            HEAP32[$AsyncCtx76 + 36 >> 2] = $vararg_buffer; //@line 15141
            HEAP32[$AsyncCtx76 + 40 >> 2] = $vararg_buffer; //@line 15143
            HEAP32[$AsyncCtx76 + 44 >> 2] = $vararg_buffer1; //@line 15145
            HEAP32[$AsyncCtx76 + 48 >> 2] = $vararg_buffer1; //@line 15147
            HEAP32[$AsyncCtx76 + 52 >> 2] = $2; //@line 15149
            HEAP32[$AsyncCtx76 + 56 >> 2] = $4; //@line 15151
            HEAP32[$AsyncCtx76 + 60 >> 2] = $$pre20; //@line 15153
            HEAP32[$AsyncCtx76 + 64 >> 2] = $51; //@line 15155
            sp = STACKTOP; //@line 15156
            STACKTOP = sp; //@line 15157
            return;
           } else {
            _emscripten_free_async_context($AsyncCtx76 | 0); //@line 15159
            break;
           }
          }
         } while (0);
         $192 = $51; //@line 15164
         break;
        }
       }
       $119 = $0 + 380 | 0; //@line 15168
       $124 = HEAP8[$19 >> 0] | 0; //@line 15173
       if (!(($124 & 2) == 0 ? (HEAPU8[$119 >> 0] | 0) < (HEAPU8[$0 + 1128 >> 0] | 0) : 0)) {
        if (!($124 & 2)) {
         __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 15182
         $130 = $0 + 964 | 0; //@line 15183
         HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 1; //@line 15186
        }
        HEAP8[$119 >> 0] = 0; //@line 15188
        if (!(HEAP8[$0 + 370 >> 0] | 0)) {
         $136 = $0 + 956 | 0; //@line 15193
         HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + 1; //@line 15196
        }
        HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 15200
        $192 = $51; //@line 15201
        break;
       }
       HEAP8[$19 >> 0] = $124 & -33; //@line 15205
       $143 = HEAP32[$0 + 1328 >> 2] | 0; //@line 15207
       HEAP32[$1 >> 2] = 465; //@line 15208
       HEAP32[$1 + 4 >> 2] = 0; //@line 15210
       $AsyncCtx40 = _emscripten_alloc_async_context(68, sp) | 0; //@line 15211
       HEAP32[$$byval_copy98 >> 2] = HEAP32[$1 >> 2]; //@line 15212
       HEAP32[$$byval_copy98 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 15212
       $144 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($143, $0, $$byval_copy98) | 0; //@line 15213
       if (___async) {
        HEAP32[$AsyncCtx40 >> 2] = 468; //@line 15216
        HEAP32[$AsyncCtx40 + 4 >> 2] = $19; //@line 15218
        HEAP32[$AsyncCtx40 + 8 >> 2] = $0; //@line 15220
        HEAP32[$AsyncCtx40 + 12 >> 2] = $1; //@line 15222
        HEAP32[$AsyncCtx40 + 16 >> 2] = $vararg_buffer3; //@line 15224
        HEAP32[$AsyncCtx40 + 20 >> 2] = $vararg_buffer3; //@line 15226
        HEAP32[$AsyncCtx40 + 24 >> 2] = $vararg_buffer5; //@line 15228
        HEAP32[$AsyncCtx40 + 28 >> 2] = $vararg_buffer5; //@line 15230
        HEAP32[$AsyncCtx40 + 32 >> 2] = $vararg_buffer; //@line 15232
        HEAP32[$AsyncCtx40 + 36 >> 2] = $vararg_buffer; //@line 15234
        HEAP32[$AsyncCtx40 + 40 >> 2] = $vararg_buffer1; //@line 15236
        HEAP32[$AsyncCtx40 + 44 >> 2] = $vararg_buffer1; //@line 15238
        HEAP32[$AsyncCtx40 + 48 >> 2] = $2; //@line 15240
        HEAP32[$AsyncCtx40 + 52 >> 2] = $4; //@line 15242
        HEAP32[$AsyncCtx40 + 56 >> 2] = $$pre20; //@line 15244
        HEAP32[$AsyncCtx40 + 60 >> 2] = $51; //@line 15246
        HEAP32[$AsyncCtx40 + 64 >> 2] = $1; //@line 15248
        sp = STACKTOP; //@line 15249
        STACKTOP = sp; //@line 15250
        return;
       }
       _emscripten_free_async_context($AsyncCtx40 | 0); //@line 15252
       do {
        if (!$144) {
         $AsyncCtx72 = _emscripten_alloc_async_context(68, sp) | 0; //@line 15256
         _mbed_assert_internal(13142, 13151, 194); //@line 15257
         if (___async) {
          HEAP32[$AsyncCtx72 >> 2] = 469; //@line 15260
          HEAP32[$AsyncCtx72 + 4 >> 2] = $19; //@line 15262
          HEAP32[$AsyncCtx72 + 8 >> 2] = $0; //@line 15264
          HEAP32[$AsyncCtx72 + 12 >> 2] = $1; //@line 15266
          HEAP32[$AsyncCtx72 + 16 >> 2] = $vararg_buffer3; //@line 15268
          HEAP32[$AsyncCtx72 + 20 >> 2] = $vararg_buffer3; //@line 15270
          HEAP32[$AsyncCtx72 + 24 >> 2] = $vararg_buffer5; //@line 15272
          HEAP32[$AsyncCtx72 + 28 >> 2] = $vararg_buffer5; //@line 15274
          HEAP32[$AsyncCtx72 + 32 >> 2] = $vararg_buffer; //@line 15276
          HEAP32[$AsyncCtx72 + 36 >> 2] = $vararg_buffer; //@line 15278
          HEAP32[$AsyncCtx72 + 40 >> 2] = $vararg_buffer1; //@line 15280
          HEAP32[$AsyncCtx72 + 44 >> 2] = $vararg_buffer1; //@line 15282
          HEAP32[$AsyncCtx72 + 48 >> 2] = $2; //@line 15284
          HEAP32[$AsyncCtx72 + 52 >> 2] = $4; //@line 15286
          HEAP32[$AsyncCtx72 + 56 >> 2] = $$pre20; //@line 15288
          HEAP32[$AsyncCtx72 + 60 >> 2] = $51; //@line 15290
          HEAP32[$AsyncCtx72 + 64 >> 2] = $1; //@line 15292
          sp = STACKTOP; //@line 15293
          STACKTOP = sp; //@line 15294
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx72 | 0); //@line 15296
          break;
         }
        }
       } while (0);
       $192 = $51; //@line 15301
      }
     } else {
      $192 = $51; //@line 15304
     }
    }
   } while (0);
   do {
    if (HEAP8[$19 >> 0] & 2) {
     $181 = $0 + 288 | 0; //@line 15313
     if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($181) | 0) + 10 >> 0] | 0)) {
      if ((HEAPU8[$0 + 895 >> 0] | 0) <= (HEAPU8[$0 + 894 >> 0] | 0)) {
       break;
      }
     }
     HEAP8[$0 + 377 >> 0] = 0; //@line 15329
     HEAP8[$192 >> 0] = 0; //@line 15330
     if (!(HEAP8[$0 + 370 >> 0] | 0)) {
      $196 = $0 + 956 | 0; //@line 15335
      HEAP32[$196 >> 2] = (HEAP32[$196 >> 2] | 0) + 1; //@line 15338
     }
     $200 = HEAP8[$0 + 895 >> 0] | 0; //@line 15341
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($181) | 0) + 11 >> 0] = $200; //@line 15344
     HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 15347
    }
   } while (0);
   $205 = $0 + 377 | 0; //@line 15350
   if (HEAP8[$205 >> 0] | 0) {
    if (!(HEAP32[$$pre20 >> 2] & 16)) {
     HEAP8[$205 >> 0] = 0; //@line 15358
     $211 = $0 + 895 | 0; //@line 15359
     $212 = HEAP8[$211 >> 0] | 0; //@line 15360
     if (!(($212 & 255) < 9 ? ($212 & 255) < (HEAPU8[$0 + 894 >> 0] | 0) : 0)) {
      $265 = HEAP32[$0 >> 2] | 0; //@line 15367
      $268 = HEAP32[(HEAP32[$265 >> 2] | 0) + 16 >> 2] | 0; //@line 15370
      $AsyncCtx = _emscripten_alloc_async_context(68, sp) | 0; //@line 15371
      FUNCTION_TABLE_vi[$268 & 1023]($265); //@line 15372
      if (___async) {
       HEAP32[$AsyncCtx >> 2] = 471; //@line 15375
       HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 15377
       HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 15379
       HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 15381
       HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 15383
       HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 15385
       HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 15387
       HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer; //@line 15389
       HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer1; //@line 15391
       HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer1; //@line 15393
       HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer3; //@line 15395
       HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer3; //@line 15397
       HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer5; //@line 15399
       HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer5; //@line 15401
       HEAP32[$AsyncCtx + 56 >> 2] = $$pre20; //@line 15403
       HEAP32[$AsyncCtx + 60 >> 2] = $192; //@line 15405
       HEAP32[$AsyncCtx + 64 >> 2] = $211; //@line 15407
       sp = STACKTOP; //@line 15408
       STACKTOP = sp; //@line 15409
       return;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 15411
      HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 15414
      __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 15416
      HEAP8[$192 >> 0] = 0; //@line 15417
      $288 = $0 + 288 | 0; //@line 15418
      HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($288) | 0) + 10 >> 0] = 0; //@line 15421
      $291 = HEAP8[$211 >> 0] | 0; //@line 15422
      HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($288) | 0) + 11 >> 0] = $291; //@line 15425
      if (HEAP8[$0 + 370 >> 0] | 0) {
       break;
      }
      $297 = $0 + 956 | 0; //@line 15432
      HEAP32[$297 >> 2] = (HEAP32[$297 >> 2] | 0) + 1; //@line 15435
      break;
     }
     $217 = $212 + 1 << 24 >> 24; //@line 15438
     HEAP8[$211 >> 0] = $217; //@line 15439
     if ($217 & 1) {
      $221 = $0 + 1097 | 0; //@line 15444
      HEAP8[$221 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$0 >> 2] | 0, HEAP8[$221 >> 0] | 0) | 0; //@line 15447
     }
     $AsyncCtx33 = _emscripten_alloc_async_context(68, sp) | 0; //@line 15449
     $224 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 15450
     if (___async) {
      HEAP32[$AsyncCtx33 >> 2] = 470; //@line 15453
      HEAP32[$AsyncCtx33 + 4 >> 2] = $19; //@line 15455
      HEAP32[$AsyncCtx33 + 8 >> 2] = $0; //@line 15457
      HEAP32[$AsyncCtx33 + 12 >> 2] = $1; //@line 15459
      HEAP32[$AsyncCtx33 + 16 >> 2] = $vararg_buffer3; //@line 15461
      HEAP32[$AsyncCtx33 + 20 >> 2] = $vararg_buffer3; //@line 15463
      HEAP32[$AsyncCtx33 + 24 >> 2] = $vararg_buffer5; //@line 15465
      HEAP32[$AsyncCtx33 + 28 >> 2] = $vararg_buffer5; //@line 15467
      HEAP32[$AsyncCtx33 + 32 >> 2] = $vararg_buffer; //@line 15469
      HEAP32[$AsyncCtx33 + 36 >> 2] = $vararg_buffer; //@line 15471
      HEAP32[$AsyncCtx33 + 40 >> 2] = $vararg_buffer1; //@line 15473
      HEAP32[$AsyncCtx33 + 44 >> 2] = $vararg_buffer1; //@line 15475
      HEAP32[$AsyncCtx33 + 48 >> 2] = $2; //@line 15477
      HEAP32[$AsyncCtx33 + 52 >> 2] = $4; //@line 15479
      HEAP32[$AsyncCtx33 + 56 >> 2] = $$pre20; //@line 15481
      HEAP32[$AsyncCtx33 + 60 >> 2] = $192; //@line 15483
      HEAP32[$AsyncCtx33 + 64 >> 2] = $211; //@line 15485
      sp = STACKTOP; //@line 15486
      STACKTOP = sp; //@line 15487
      return;
     }
     _emscripten_free_async_context($AsyncCtx33 | 0); //@line 15489
     if (!$224) {
      HEAP8[$19 >> 0] = HEAP8[$19 >> 0] & -33; //@line 15494
      break;
     }
     $244 = $0 + 288 | 0; //@line 15497
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($244) | 0) + 4 >> 2] = 9; //@line 15500
     __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 15502
     HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 15505
     HEAP8[$192 >> 0] = 0; //@line 15506
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($244) | 0) + 10 >> 0] = 0; //@line 15509
     $252 = HEAP8[$211 >> 0] | 0; //@line 15510
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($244) | 0) + 11 >> 0] = $252; //@line 15513
     $256 = HEAP8[$0 + 1097 >> 0] | 0; //@line 15515
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($244) | 0) + 8 >> 0] = $256; //@line 15518
     if (!(HEAP8[$0 + 370 >> 0] | 0)) {
      $262 = $0 + 956 | 0; //@line 15523
      HEAP32[$262 >> 2] = (HEAP32[$262 >> 2] | 0) + 1; //@line 15526
     }
    }
   }
  }
 } while (0);
 $300 = HEAP32[$$pre20 >> 2] | 0; //@line 15532
 $303 = $300 & -3; //@line 15535
 if (!($300 & 2)) {
  $305 = $300; //@line 15537
 } else {
  HEAP32[$$pre20 >> 2] = $303; //@line 15539
  $305 = $303; //@line 15540
 }
 do {
  if (!$305) {
   $306 = HEAP8[$19 >> 0] | 0; //@line 15545
   do {
    if (!($306 & 1)) {
     $345 = $306; //@line 15550
    } else {
     HEAP8[$19 >> 0] = $306 & -2; //@line 15553
     $311 = HEAP32[$0 + 1324 >> 2] | 0; //@line 15555
     $313 = __ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0; //@line 15557
     $314 = $311 + 12 | 0; //@line 15558
     $315 = HEAP32[$314 >> 2] | 0; //@line 15559
     do {
      if (!$315) {
       $AsyncCtx68 = _emscripten_alloc_async_context(60, sp) | 0; //@line 15563
       _mbed_assert_internal(15352, 15357, 1102); //@line 15564
       if (___async) {
        HEAP32[$AsyncCtx68 >> 2] = 472; //@line 15567
        HEAP32[$AsyncCtx68 + 4 >> 2] = $19; //@line 15569
        HEAP32[$AsyncCtx68 + 8 >> 2] = $0; //@line 15571
        HEAP32[$AsyncCtx68 + 12 >> 2] = $1; //@line 15573
        HEAP32[$AsyncCtx68 + 16 >> 2] = $vararg_buffer3; //@line 15575
        HEAP32[$AsyncCtx68 + 20 >> 2] = $vararg_buffer3; //@line 15577
        HEAP32[$AsyncCtx68 + 24 >> 2] = $vararg_buffer5; //@line 15579
        HEAP32[$AsyncCtx68 + 28 >> 2] = $vararg_buffer5; //@line 15581
        HEAP32[$AsyncCtx68 + 32 >> 2] = $314; //@line 15583
        HEAP32[$AsyncCtx68 + 36 >> 2] = $311; //@line 15585
        HEAP32[$AsyncCtx68 + 40 >> 2] = $313; //@line 15587
        HEAP32[$AsyncCtx68 + 44 >> 2] = $vararg_buffer; //@line 15589
        HEAP32[$AsyncCtx68 + 48 >> 2] = $vararg_buffer; //@line 15591
        HEAP32[$AsyncCtx68 + 52 >> 2] = $vararg_buffer1; //@line 15593
        HEAP32[$AsyncCtx68 + 56 >> 2] = $vararg_buffer1; //@line 15595
        sp = STACKTOP; //@line 15596
        STACKTOP = sp; //@line 15597
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx68 | 0); //@line 15599
        $332 = HEAP32[$314 >> 2] | 0; //@line 15601
        break;
       }
      } else {
       $332 = $315; //@line 15605
      }
     } while (0);
     $331 = HEAP32[$332 >> 2] | 0; //@line 15608
     $AsyncCtx8 = _emscripten_alloc_async_context(48, sp) | 0; //@line 15609
     FUNCTION_TABLE_vii[$331 & 31]($311, $313); //@line 15610
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 473; //@line 15613
      HEAP32[$AsyncCtx8 + 4 >> 2] = $19; //@line 15615
      HEAP32[$AsyncCtx8 + 8 >> 2] = $0; //@line 15617
      HEAP32[$AsyncCtx8 + 12 >> 2] = $1; //@line 15619
      HEAP32[$AsyncCtx8 + 16 >> 2] = $vararg_buffer; //@line 15621
      HEAP32[$AsyncCtx8 + 20 >> 2] = $vararg_buffer; //@line 15623
      HEAP32[$AsyncCtx8 + 24 >> 2] = $vararg_buffer1; //@line 15625
      HEAP32[$AsyncCtx8 + 28 >> 2] = $vararg_buffer1; //@line 15627
      HEAP32[$AsyncCtx8 + 32 >> 2] = $vararg_buffer3; //@line 15629
      HEAP32[$AsyncCtx8 + 36 >> 2] = $vararg_buffer3; //@line 15631
      HEAP32[$AsyncCtx8 + 40 >> 2] = $vararg_buffer5; //@line 15633
      HEAP32[$AsyncCtx8 + 44 >> 2] = $vararg_buffer5; //@line 15635
      sp = STACKTOP; //@line 15636
      STACKTOP = sp; //@line 15637
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 15639
      $345 = HEAP8[$19 >> 0] | 0; //@line 15641
      break;
     }
    }
   } while (0);
   do {
    if ($345 & 8) {
     HEAP8[$19 >> 0] = $345 & -9; //@line 15651
     $349 = HEAP32[$0 + 1324 >> 2] | 0; //@line 15653
     $350 = $349 + 32 | 0; //@line 15654
     $352 = __ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0; //@line 15656
     $353 = $349 + 44 | 0; //@line 15657
     $354 = HEAP32[$353 >> 2] | 0; //@line 15658
     do {
      if (!$354) {
       $AsyncCtx64 = _emscripten_alloc_async_context(60, sp) | 0; //@line 15662
       _mbed_assert_internal(15352, 15357, 1102); //@line 15663
       if (___async) {
        HEAP32[$AsyncCtx64 >> 2] = 474; //@line 15666
        HEAP32[$AsyncCtx64 + 4 >> 2] = $19; //@line 15668
        HEAP32[$AsyncCtx64 + 8 >> 2] = $0; //@line 15670
        HEAP32[$AsyncCtx64 + 12 >> 2] = $1; //@line 15672
        HEAP32[$AsyncCtx64 + 16 >> 2] = $vararg_buffer3; //@line 15674
        HEAP32[$AsyncCtx64 + 20 >> 2] = $vararg_buffer3; //@line 15676
        HEAP32[$AsyncCtx64 + 24 >> 2] = $vararg_buffer5; //@line 15678
        HEAP32[$AsyncCtx64 + 28 >> 2] = $vararg_buffer5; //@line 15680
        HEAP32[$AsyncCtx64 + 32 >> 2] = $vararg_buffer; //@line 15682
        HEAP32[$AsyncCtx64 + 36 >> 2] = $vararg_buffer; //@line 15684
        HEAP32[$AsyncCtx64 + 40 >> 2] = $vararg_buffer1; //@line 15686
        HEAP32[$AsyncCtx64 + 44 >> 2] = $vararg_buffer1; //@line 15688
        HEAP32[$AsyncCtx64 + 48 >> 2] = $350; //@line 15690
        HEAP32[$AsyncCtx64 + 52 >> 2] = $352; //@line 15692
        HEAP32[$AsyncCtx64 + 56 >> 2] = $353; //@line 15694
        sp = STACKTOP; //@line 15695
        STACKTOP = sp; //@line 15696
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx64 | 0); //@line 15698
        $371 = HEAP32[$353 >> 2] | 0; //@line 15700
        break;
       }
      } else {
       $371 = $354; //@line 15704
      }
     } while (0);
     $370 = HEAP32[$371 >> 2] | 0; //@line 15707
     $AsyncCtx11 = _emscripten_alloc_async_context(48, sp) | 0; //@line 15708
     FUNCTION_TABLE_vii[$370 & 31]($350, $352); //@line 15709
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 475; //@line 15712
      HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 15714
      HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 15716
      HEAP32[$AsyncCtx11 + 12 >> 2] = $19; //@line 15718
      HEAP32[$AsyncCtx11 + 16 >> 2] = $vararg_buffer; //@line 15720
      HEAP32[$AsyncCtx11 + 20 >> 2] = $vararg_buffer; //@line 15722
      HEAP32[$AsyncCtx11 + 24 >> 2] = $vararg_buffer1; //@line 15724
      HEAP32[$AsyncCtx11 + 28 >> 2] = $vararg_buffer1; //@line 15726
      HEAP32[$AsyncCtx11 + 32 >> 2] = $vararg_buffer3; //@line 15728
      HEAP32[$AsyncCtx11 + 36 >> 2] = $vararg_buffer3; //@line 15730
      HEAP32[$AsyncCtx11 + 40 >> 2] = $vararg_buffer5; //@line 15732
      HEAP32[$AsyncCtx11 + 44 >> 2] = $vararg_buffer5; //@line 15734
      sp = STACKTOP; //@line 15735
      STACKTOP = sp; //@line 15736
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15738
      break;
     }
    }
   } while (0);
   do {
    if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($0 + 4 | 0) | 0) {
     _printf(13258, $vararg_buffer) | 0; //@line 15747
     _printf(13405, $vararg_buffer1) | 0; //@line 15748
     $AsyncCtx25 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15749
     _putchar(10) | 0; //@line 15750
     if (___async) {
      HEAP32[$AsyncCtx25 >> 2] = 476; //@line 15753
      HEAP32[$AsyncCtx25 + 4 >> 2] = $0; //@line 15755
      HEAP32[$AsyncCtx25 + 8 >> 2] = $1; //@line 15757
      HEAP32[$AsyncCtx25 + 12 >> 2] = $19; //@line 15759
      HEAP32[$AsyncCtx25 + 16 >> 2] = $vararg_buffer3; //@line 15761
      HEAP32[$AsyncCtx25 + 20 >> 2] = $vararg_buffer3; //@line 15763
      HEAP32[$AsyncCtx25 + 24 >> 2] = $vararg_buffer5; //@line 15765
      HEAP32[$AsyncCtx25 + 28 >> 2] = $vararg_buffer5; //@line 15767
      sp = STACKTOP; //@line 15768
      STACKTOP = sp; //@line 15769
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx25 | 0); //@line 15771
      HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($0 + 264 | 0) | 0) >> 2] = 4; //@line 15774
      $395 = HEAP8[$19 >> 0] | 16; //@line 15776
      HEAP8[$19 >> 0] = $395; //@line 15777
      $397 = $395; //@line 15778
      break;
     }
    } else {
     $397 = HEAP8[$19 >> 0] | 0; //@line 15783
    }
   } while (0);
   $396 = $397 & -33; //@line 15786
   HEAP8[$19 >> 0] = $396; //@line 15787
   $407 = $396; //@line 15788
  } else {
   $398 = HEAP32[$2 >> 2] | 0; //@line 15790
   $AsyncCtx29 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15791
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($398, $4, 1e3); //@line 15792
   if (___async) {
    HEAP32[$AsyncCtx29 >> 2] = 477; //@line 15795
    HEAP32[$AsyncCtx29 + 4 >> 2] = $0; //@line 15797
    HEAP32[$AsyncCtx29 + 8 >> 2] = $1; //@line 15799
    HEAP32[$AsyncCtx29 + 12 >> 2] = $19; //@line 15801
    HEAP32[$AsyncCtx29 + 16 >> 2] = $vararg_buffer3; //@line 15803
    HEAP32[$AsyncCtx29 + 20 >> 2] = $vararg_buffer3; //@line 15805
    HEAP32[$AsyncCtx29 + 24 >> 2] = $vararg_buffer5; //@line 15807
    HEAP32[$AsyncCtx29 + 28 >> 2] = $vararg_buffer5; //@line 15809
    sp = STACKTOP; //@line 15810
    STACKTOP = sp; //@line 15811
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx29 | 0); //@line 15813
    $407 = HEAP8[$19 >> 0] | 0; //@line 15815
    break;
   }
  }
 } while (0);
 if (!($407 & 2)) {
  $451 = $407; //@line 15823
 } else {
  $409 = $407 & -3; //@line 15825
  HEAP8[$19 >> 0] = $409; //@line 15826
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   _printf(13258, $vararg_buffer3) | 0; //@line 15831
   _printf(13285, $vararg_buffer5) | 0; //@line 15832
   $AsyncCtx21 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15833
   _putchar(10) | 0; //@line 15834
   if (___async) {
    HEAP32[$AsyncCtx21 >> 2] = 478; //@line 15837
    HEAP32[$AsyncCtx21 + 4 >> 2] = $0; //@line 15839
    HEAP32[$AsyncCtx21 + 8 >> 2] = $1; //@line 15841
    HEAP32[$AsyncCtx21 + 12 >> 2] = $1; //@line 15843
    HEAP32[$AsyncCtx21 + 16 >> 2] = $19; //@line 15845
    sp = STACKTOP; //@line 15846
    STACKTOP = sp; //@line 15847
    return;
   }
   _emscripten_free_async_context($AsyncCtx21 | 0); //@line 15849
   $418 = HEAP32[$0 + 1328 >> 2] | 0; //@line 15851
   HEAP32[$1 >> 2] = 366; //@line 15852
   HEAP32[$1 + 4 >> 2] = 0; //@line 15854
   $AsyncCtx36 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15855
   HEAP32[$$byval_copy98 >> 2] = HEAP32[$1 >> 2]; //@line 15856
   HEAP32[$$byval_copy98 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 15856
   $419 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($418, $0, $$byval_copy98) | 0; //@line 15857
   if (___async) {
    HEAP32[$AsyncCtx36 >> 2] = 479; //@line 15860
    HEAP32[$AsyncCtx36 + 4 >> 2] = $1; //@line 15862
    HEAP32[$AsyncCtx36 + 8 >> 2] = $0; //@line 15864
    HEAP32[$AsyncCtx36 + 12 >> 2] = $19; //@line 15866
    sp = STACKTOP; //@line 15867
    STACKTOP = sp; //@line 15868
    return;
   }
   _emscripten_free_async_context($AsyncCtx36 | 0); //@line 15870
   do {
    if (!$419) {
     $AsyncCtx60 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15874
     _mbed_assert_internal(13142, 13151, 217); //@line 15875
     if (___async) {
      HEAP32[$AsyncCtx60 >> 2] = 480; //@line 15878
      HEAP32[$AsyncCtx60 + 4 >> 2] = $1; //@line 15880
      HEAP32[$AsyncCtx60 + 8 >> 2] = $0; //@line 15882
      HEAP32[$AsyncCtx60 + 12 >> 2] = $19; //@line 15884
      sp = STACKTOP; //@line 15885
      STACKTOP = sp; //@line 15886
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx60 | 0); //@line 15888
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 15894
   $429 = HEAP8[$19 >> 0] | 0; //@line 15896
  } else {
   $429 = $409; //@line 15898
  }
  do {
   if (!($429 & 4)) {
    $432 = HEAP32[$0 + 1324 >> 2] | 0; //@line 15905
    $433 = $432 + 16 | 0; //@line 15906
    $435 = __ZN11LoRaMacMcps14get_indicationEv($0 + 288 | 0) | 0; //@line 15908
    $436 = $432 + 28 | 0; //@line 15909
    $437 = HEAP32[$436 >> 2] | 0; //@line 15910
    do {
     if (!$437) {
      $AsyncCtx56 = _emscripten_alloc_async_context(24, sp) | 0; //@line 15914
      _mbed_assert_internal(15352, 15357, 1102); //@line 15915
      if (___async) {
       HEAP32[$AsyncCtx56 >> 2] = 481; //@line 15918
       HEAP32[$AsyncCtx56 + 4 >> 2] = $436; //@line 15920
       HEAP32[$AsyncCtx56 + 8 >> 2] = $433; //@line 15922
       HEAP32[$AsyncCtx56 + 12 >> 2] = $435; //@line 15924
       HEAP32[$AsyncCtx56 + 16 >> 2] = $19; //@line 15926
       HEAP32[$AsyncCtx56 + 20 >> 2] = $0; //@line 15928
       sp = STACKTOP; //@line 15929
       STACKTOP = sp; //@line 15930
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx56 | 0); //@line 15932
       $445 = HEAP32[$436 >> 2] | 0; //@line 15934
       break;
      }
     } else {
      $445 = $437; //@line 15938
     }
    } while (0);
    $444 = HEAP32[$445 >> 2] | 0; //@line 15941
    $AsyncCtx14 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15942
    FUNCTION_TABLE_vii[$444 & 31]($433, $435); //@line 15943
    if (___async) {
     HEAP32[$AsyncCtx14 >> 2] = 482; //@line 15946
     HEAP32[$AsyncCtx14 + 4 >> 2] = $19; //@line 15948
     HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 15950
     sp = STACKTOP; //@line 15951
     STACKTOP = sp; //@line 15952
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx14 | 0); //@line 15954
     $449 = HEAP8[$19 >> 0] | 0; //@line 15956
     break;
    }
   } else {
    $449 = $429; //@line 15960
   }
  } while (0);
  $448 = $449 & -5; //@line 15963
  HEAP8[$19 >> 0] = $448; //@line 15964
  $451 = $448; //@line 15965
 }
 if (!($451 & 16)) {
  STACKTOP = sp; //@line 15970
  return;
 }
 HEAP8[$19 >> 0] = $451 & -17; //@line 15973
 $455 = HEAP32[$0 + 1324 >> 2] | 0; //@line 15975
 $456 = $455 + 48 | 0; //@line 15976
 $458 = __ZN11LoRaMacMlme14get_indicationEv($0 + 264 | 0) | 0; //@line 15978
 $459 = $455 + 60 | 0; //@line 15979
 $460 = HEAP32[$459 >> 2] | 0; //@line 15980
 do {
  if (!$460) {
   $AsyncCtx52 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15984
   _mbed_assert_internal(15352, 15357, 1102); //@line 15985
   if (___async) {
    HEAP32[$AsyncCtx52 >> 2] = 483; //@line 15988
    HEAP32[$AsyncCtx52 + 4 >> 2] = $459; //@line 15990
    HEAP32[$AsyncCtx52 + 8 >> 2] = $456; //@line 15992
    HEAP32[$AsyncCtx52 + 12 >> 2] = $458; //@line 15994
    sp = STACKTOP; //@line 15995
    STACKTOP = sp; //@line 15996
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx52 | 0); //@line 15998
    $466 = HEAP32[$459 >> 2] | 0; //@line 16000
    break;
   }
  } else {
   $466 = $460; //@line 16004
  }
 } while (0);
 $465 = HEAP32[$466 >> 2] | 0; //@line 16007
 $AsyncCtx17 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16008
 FUNCTION_TABLE_vii[$465 & 31]($456, $458); //@line 16009
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 484; //@line 16012
  sp = STACKTOP; //@line 16013
  STACKTOP = sp; //@line 16014
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 16016
 STACKTOP = sp; //@line 16017
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_442($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $127 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $216 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $227 = 0, $228 = 0, $230 = 0, $231 = 0, $232 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $244 = 0, $248 = 0, $249 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $36 = 0, $4 = 0, $50 = 0, $54 = 0, $59 = 0, $6 = 0, $65 = 0, $66 = 0, $71 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 30683
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30685
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30687
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30689
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30691
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30693
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30695
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30697
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30701
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30703
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30705
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30707
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 30709
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 30711
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 30713
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 30715
 do {
  if (HEAP8[$2 >> 0] & 2) {
   $36 = $4 + 288 | 0; //@line 30721
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 30737
   HEAP8[$32 >> 0] = 0; //@line 30738
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $50 = $4 + 956 | 0; //@line 30743
    HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + 1; //@line 30746
   }
   $54 = HEAP8[$4 + 895 >> 0] | 0; //@line 30749
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 11 >> 0] = $54; //@line 30752
   HEAP32[$30 >> 2] = HEAP32[$30 >> 2] & -2; //@line 30755
  }
 } while (0);
 $59 = $4 + 377 | 0; //@line 30758
 if (HEAP8[$59 >> 0] | 0) {
  if (!(HEAP32[$30 >> 2] & 16)) {
   HEAP8[$59 >> 0] = 0; //@line 30766
   $65 = $4 + 895 | 0; //@line 30767
   $66 = HEAP8[$65 >> 0] | 0; //@line 30768
   if (!(($66 & 255) < 9 ? ($66 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $96 = HEAP32[$4 >> 2] | 0; //@line 30775
    $99 = HEAP32[(HEAP32[$96 >> 2] | 0) + 16 >> 2] | 0; //@line 30778
    $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 30779
    FUNCTION_TABLE_vi[$99 & 1023]($96); //@line 30780
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 471; //@line 30783
     $100 = $ReallocAsyncCtx + 4 | 0; //@line 30784
     HEAP32[$100 >> 2] = $2; //@line 30785
     $101 = $ReallocAsyncCtx + 8 | 0; //@line 30786
     HEAP32[$101 >> 2] = $4; //@line 30787
     $102 = $ReallocAsyncCtx + 12 | 0; //@line 30788
     HEAP32[$102 >> 2] = $6; //@line 30789
     $103 = $ReallocAsyncCtx + 16 | 0; //@line 30790
     HEAP32[$103 >> 2] = $26; //@line 30791
     $104 = $ReallocAsyncCtx + 20 | 0; //@line 30792
     HEAP32[$104 >> 2] = $28; //@line 30793
     $105 = $ReallocAsyncCtx + 24 | 0; //@line 30794
     HEAP32[$105 >> 2] = $18; //@line 30795
     $106 = $ReallocAsyncCtx + 28 | 0; //@line 30796
     HEAP32[$106 >> 2] = $20; //@line 30797
     $107 = $ReallocAsyncCtx + 32 | 0; //@line 30798
     HEAP32[$107 >> 2] = $22; //@line 30799
     $108 = $ReallocAsyncCtx + 36 | 0; //@line 30800
     HEAP32[$108 >> 2] = $24; //@line 30801
     $109 = $ReallocAsyncCtx + 40 | 0; //@line 30802
     HEAP32[$109 >> 2] = $8; //@line 30803
     $110 = $ReallocAsyncCtx + 44 | 0; //@line 30804
     HEAP32[$110 >> 2] = $10; //@line 30805
     $111 = $ReallocAsyncCtx + 48 | 0; //@line 30806
     HEAP32[$111 >> 2] = $12; //@line 30807
     $112 = $ReallocAsyncCtx + 52 | 0; //@line 30808
     HEAP32[$112 >> 2] = $14; //@line 30809
     $113 = $ReallocAsyncCtx + 56 | 0; //@line 30810
     HEAP32[$113 >> 2] = $30; //@line 30811
     $114 = $ReallocAsyncCtx + 60 | 0; //@line 30812
     HEAP32[$114 >> 2] = $32; //@line 30813
     $115 = $ReallocAsyncCtx + 64 | 0; //@line 30814
     HEAP32[$115 >> 2] = $65; //@line 30815
     sp = STACKTOP; //@line 30816
     return;
    }
    ___async_unwind = 0; //@line 30819
    HEAP32[$ReallocAsyncCtx >> 2] = 471; //@line 30820
    $100 = $ReallocAsyncCtx + 4 | 0; //@line 30821
    HEAP32[$100 >> 2] = $2; //@line 30822
    $101 = $ReallocAsyncCtx + 8 | 0; //@line 30823
    HEAP32[$101 >> 2] = $4; //@line 30824
    $102 = $ReallocAsyncCtx + 12 | 0; //@line 30825
    HEAP32[$102 >> 2] = $6; //@line 30826
    $103 = $ReallocAsyncCtx + 16 | 0; //@line 30827
    HEAP32[$103 >> 2] = $26; //@line 30828
    $104 = $ReallocAsyncCtx + 20 | 0; //@line 30829
    HEAP32[$104 >> 2] = $28; //@line 30830
    $105 = $ReallocAsyncCtx + 24 | 0; //@line 30831
    HEAP32[$105 >> 2] = $18; //@line 30832
    $106 = $ReallocAsyncCtx + 28 | 0; //@line 30833
    HEAP32[$106 >> 2] = $20; //@line 30834
    $107 = $ReallocAsyncCtx + 32 | 0; //@line 30835
    HEAP32[$107 >> 2] = $22; //@line 30836
    $108 = $ReallocAsyncCtx + 36 | 0; //@line 30837
    HEAP32[$108 >> 2] = $24; //@line 30838
    $109 = $ReallocAsyncCtx + 40 | 0; //@line 30839
    HEAP32[$109 >> 2] = $8; //@line 30840
    $110 = $ReallocAsyncCtx + 44 | 0; //@line 30841
    HEAP32[$110 >> 2] = $10; //@line 30842
    $111 = $ReallocAsyncCtx + 48 | 0; //@line 30843
    HEAP32[$111 >> 2] = $12; //@line 30844
    $112 = $ReallocAsyncCtx + 52 | 0; //@line 30845
    HEAP32[$112 >> 2] = $14; //@line 30846
    $113 = $ReallocAsyncCtx + 56 | 0; //@line 30847
    HEAP32[$113 >> 2] = $30; //@line 30848
    $114 = $ReallocAsyncCtx + 60 | 0; //@line 30849
    HEAP32[$114 >> 2] = $32; //@line 30850
    $115 = $ReallocAsyncCtx + 64 | 0; //@line 30851
    HEAP32[$115 >> 2] = $65; //@line 30852
    sp = STACKTOP; //@line 30853
    return;
   }
   $71 = $66 + 1 << 24 >> 24; //@line 30856
   HEAP8[$65 >> 0] = $71; //@line 30857
   if ($71 & 1) {
    $75 = $4 + 1097 | 0; //@line 30862
    HEAP8[$75 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$75 >> 0] | 0) | 0; //@line 30865
   }
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 30867
   $78 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 30868
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 470; //@line 30871
    $79 = $ReallocAsyncCtx9 + 4 | 0; //@line 30872
    HEAP32[$79 >> 2] = $2; //@line 30873
    $80 = $ReallocAsyncCtx9 + 8 | 0; //@line 30874
    HEAP32[$80 >> 2] = $4; //@line 30875
    $81 = $ReallocAsyncCtx9 + 12 | 0; //@line 30876
    HEAP32[$81 >> 2] = $6; //@line 30877
    $82 = $ReallocAsyncCtx9 + 16 | 0; //@line 30878
    HEAP32[$82 >> 2] = $8; //@line 30879
    $83 = $ReallocAsyncCtx9 + 20 | 0; //@line 30880
    HEAP32[$83 >> 2] = $10; //@line 30881
    $84 = $ReallocAsyncCtx9 + 24 | 0; //@line 30882
    HEAP32[$84 >> 2] = $12; //@line 30883
    $85 = $ReallocAsyncCtx9 + 28 | 0; //@line 30884
    HEAP32[$85 >> 2] = $14; //@line 30885
    $86 = $ReallocAsyncCtx9 + 32 | 0; //@line 30886
    HEAP32[$86 >> 2] = $18; //@line 30887
    $87 = $ReallocAsyncCtx9 + 36 | 0; //@line 30888
    HEAP32[$87 >> 2] = $20; //@line 30889
    $88 = $ReallocAsyncCtx9 + 40 | 0; //@line 30890
    HEAP32[$88 >> 2] = $22; //@line 30891
    $89 = $ReallocAsyncCtx9 + 44 | 0; //@line 30892
    HEAP32[$89 >> 2] = $24; //@line 30893
    $90 = $ReallocAsyncCtx9 + 48 | 0; //@line 30894
    HEAP32[$90 >> 2] = $26; //@line 30895
    $91 = $ReallocAsyncCtx9 + 52 | 0; //@line 30896
    HEAP32[$91 >> 2] = $28; //@line 30897
    $92 = $ReallocAsyncCtx9 + 56 | 0; //@line 30898
    HEAP32[$92 >> 2] = $30; //@line 30899
    $93 = $ReallocAsyncCtx9 + 60 | 0; //@line 30900
    HEAP32[$93 >> 2] = $32; //@line 30901
    $94 = $ReallocAsyncCtx9 + 64 | 0; //@line 30902
    HEAP32[$94 >> 2] = $65; //@line 30903
    sp = STACKTOP; //@line 30904
    return;
   }
   HEAP32[___async_retval >> 2] = $78; //@line 30908
   ___async_unwind = 0; //@line 30909
   HEAP32[$ReallocAsyncCtx9 >> 2] = 470; //@line 30910
   $79 = $ReallocAsyncCtx9 + 4 | 0; //@line 30911
   HEAP32[$79 >> 2] = $2; //@line 30912
   $80 = $ReallocAsyncCtx9 + 8 | 0; //@line 30913
   HEAP32[$80 >> 2] = $4; //@line 30914
   $81 = $ReallocAsyncCtx9 + 12 | 0; //@line 30915
   HEAP32[$81 >> 2] = $6; //@line 30916
   $82 = $ReallocAsyncCtx9 + 16 | 0; //@line 30917
   HEAP32[$82 >> 2] = $8; //@line 30918
   $83 = $ReallocAsyncCtx9 + 20 | 0; //@line 30919
   HEAP32[$83 >> 2] = $10; //@line 30920
   $84 = $ReallocAsyncCtx9 + 24 | 0; //@line 30921
   HEAP32[$84 >> 2] = $12; //@line 30922
   $85 = $ReallocAsyncCtx9 + 28 | 0; //@line 30923
   HEAP32[$85 >> 2] = $14; //@line 30924
   $86 = $ReallocAsyncCtx9 + 32 | 0; //@line 30925
   HEAP32[$86 >> 2] = $18; //@line 30926
   $87 = $ReallocAsyncCtx9 + 36 | 0; //@line 30927
   HEAP32[$87 >> 2] = $20; //@line 30928
   $88 = $ReallocAsyncCtx9 + 40 | 0; //@line 30929
   HEAP32[$88 >> 2] = $22; //@line 30930
   $89 = $ReallocAsyncCtx9 + 44 | 0; //@line 30931
   HEAP32[$89 >> 2] = $24; //@line 30932
   $90 = $ReallocAsyncCtx9 + 48 | 0; //@line 30933
   HEAP32[$90 >> 2] = $26; //@line 30934
   $91 = $ReallocAsyncCtx9 + 52 | 0; //@line 30935
   HEAP32[$91 >> 2] = $28; //@line 30936
   $92 = $ReallocAsyncCtx9 + 56 | 0; //@line 30937
   HEAP32[$92 >> 2] = $30; //@line 30938
   $93 = $ReallocAsyncCtx9 + 60 | 0; //@line 30939
   HEAP32[$93 >> 2] = $32; //@line 30940
   $94 = $ReallocAsyncCtx9 + 64 | 0; //@line 30941
   HEAP32[$94 >> 2] = $65; //@line 30942
   sp = STACKTOP; //@line 30943
   return;
  }
 }
 $116 = HEAP32[$30 >> 2] | 0; //@line 30947
 $119 = $116 & -3; //@line 30950
 if (!($116 & 2)) {
  $121 = $116; //@line 30952
 } else {
  HEAP32[$30 >> 2] = $119; //@line 30954
  $121 = $119; //@line 30955
 }
 if ($121 | 0) {
  $206 = HEAP32[$26 >> 2] | 0; //@line 30959
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 30960
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($206, $28, 1e3); //@line 30961
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 477; //@line 30964
   $207 = $ReallocAsyncCtx8 + 4 | 0; //@line 30965
   HEAP32[$207 >> 2] = $4; //@line 30966
   $208 = $ReallocAsyncCtx8 + 8 | 0; //@line 30967
   HEAP32[$208 >> 2] = $6; //@line 30968
   $209 = $ReallocAsyncCtx8 + 12 | 0; //@line 30969
   HEAP32[$209 >> 2] = $2; //@line 30970
   $210 = $ReallocAsyncCtx8 + 16 | 0; //@line 30971
   HEAP32[$210 >> 2] = $8; //@line 30972
   $211 = $ReallocAsyncCtx8 + 20 | 0; //@line 30973
   HEAP32[$211 >> 2] = $10; //@line 30974
   $212 = $ReallocAsyncCtx8 + 24 | 0; //@line 30975
   HEAP32[$212 >> 2] = $12; //@line 30976
   $213 = $ReallocAsyncCtx8 + 28 | 0; //@line 30977
   HEAP32[$213 >> 2] = $14; //@line 30978
   sp = STACKTOP; //@line 30979
   return;
  }
  ___async_unwind = 0; //@line 30982
  HEAP32[$ReallocAsyncCtx8 >> 2] = 477; //@line 30983
  $207 = $ReallocAsyncCtx8 + 4 | 0; //@line 30984
  HEAP32[$207 >> 2] = $4; //@line 30985
  $208 = $ReallocAsyncCtx8 + 8 | 0; //@line 30986
  HEAP32[$208 >> 2] = $6; //@line 30987
  $209 = $ReallocAsyncCtx8 + 12 | 0; //@line 30988
  HEAP32[$209 >> 2] = $2; //@line 30989
  $210 = $ReallocAsyncCtx8 + 16 | 0; //@line 30990
  HEAP32[$210 >> 2] = $8; //@line 30991
  $211 = $ReallocAsyncCtx8 + 20 | 0; //@line 30992
  HEAP32[$211 >> 2] = $10; //@line 30993
  $212 = $ReallocAsyncCtx8 + 24 | 0; //@line 30994
  HEAP32[$212 >> 2] = $12; //@line 30995
  $213 = $ReallocAsyncCtx8 + 28 | 0; //@line 30996
  HEAP32[$213 >> 2] = $14; //@line 30997
  sp = STACKTOP; //@line 30998
  return;
 }
 $122 = HEAP8[$2 >> 0] | 0; //@line 31001
 if ($122 & 1) {
  HEAP8[$2 >> 0] = $122 & -2; //@line 31006
  $127 = HEAP32[$4 + 1324 >> 2] | 0; //@line 31008
  $129 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 31010
  $130 = $127 + 12 | 0; //@line 31011
  $131 = HEAP32[$130 >> 2] | 0; //@line 31012
  if (!$131) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 31015
   _mbed_assert_internal(15352, 15357, 1102); //@line 31016
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 472; //@line 31019
    $133 = $ReallocAsyncCtx18 + 4 | 0; //@line 31020
    HEAP32[$133 >> 2] = $2; //@line 31021
    $134 = $ReallocAsyncCtx18 + 8 | 0; //@line 31022
    HEAP32[$134 >> 2] = $4; //@line 31023
    $135 = $ReallocAsyncCtx18 + 12 | 0; //@line 31024
    HEAP32[$135 >> 2] = $6; //@line 31025
    $136 = $ReallocAsyncCtx18 + 16 | 0; //@line 31026
    HEAP32[$136 >> 2] = $8; //@line 31027
    $137 = $ReallocAsyncCtx18 + 20 | 0; //@line 31028
    HEAP32[$137 >> 2] = $10; //@line 31029
    $138 = $ReallocAsyncCtx18 + 24 | 0; //@line 31030
    HEAP32[$138 >> 2] = $12; //@line 31031
    $139 = $ReallocAsyncCtx18 + 28 | 0; //@line 31032
    HEAP32[$139 >> 2] = $14; //@line 31033
    $140 = $ReallocAsyncCtx18 + 32 | 0; //@line 31034
    HEAP32[$140 >> 2] = $130; //@line 31035
    $141 = $ReallocAsyncCtx18 + 36 | 0; //@line 31036
    HEAP32[$141 >> 2] = $127; //@line 31037
    $142 = $ReallocAsyncCtx18 + 40 | 0; //@line 31038
    HEAP32[$142 >> 2] = $129; //@line 31039
    $143 = $ReallocAsyncCtx18 + 44 | 0; //@line 31040
    HEAP32[$143 >> 2] = $18; //@line 31041
    $144 = $ReallocAsyncCtx18 + 48 | 0; //@line 31042
    HEAP32[$144 >> 2] = $20; //@line 31043
    $145 = $ReallocAsyncCtx18 + 52 | 0; //@line 31044
    HEAP32[$145 >> 2] = $22; //@line 31045
    $146 = $ReallocAsyncCtx18 + 56 | 0; //@line 31046
    HEAP32[$146 >> 2] = $24; //@line 31047
    sp = STACKTOP; //@line 31048
    return;
   }
   ___async_unwind = 0; //@line 31051
   HEAP32[$ReallocAsyncCtx18 >> 2] = 472; //@line 31052
   $133 = $ReallocAsyncCtx18 + 4 | 0; //@line 31053
   HEAP32[$133 >> 2] = $2; //@line 31054
   $134 = $ReallocAsyncCtx18 + 8 | 0; //@line 31055
   HEAP32[$134 >> 2] = $4; //@line 31056
   $135 = $ReallocAsyncCtx18 + 12 | 0; //@line 31057
   HEAP32[$135 >> 2] = $6; //@line 31058
   $136 = $ReallocAsyncCtx18 + 16 | 0; //@line 31059
   HEAP32[$136 >> 2] = $8; //@line 31060
   $137 = $ReallocAsyncCtx18 + 20 | 0; //@line 31061
   HEAP32[$137 >> 2] = $10; //@line 31062
   $138 = $ReallocAsyncCtx18 + 24 | 0; //@line 31063
   HEAP32[$138 >> 2] = $12; //@line 31064
   $139 = $ReallocAsyncCtx18 + 28 | 0; //@line 31065
   HEAP32[$139 >> 2] = $14; //@line 31066
   $140 = $ReallocAsyncCtx18 + 32 | 0; //@line 31067
   HEAP32[$140 >> 2] = $130; //@line 31068
   $141 = $ReallocAsyncCtx18 + 36 | 0; //@line 31069
   HEAP32[$141 >> 2] = $127; //@line 31070
   $142 = $ReallocAsyncCtx18 + 40 | 0; //@line 31071
   HEAP32[$142 >> 2] = $129; //@line 31072
   $143 = $ReallocAsyncCtx18 + 44 | 0; //@line 31073
   HEAP32[$143 >> 2] = $18; //@line 31074
   $144 = $ReallocAsyncCtx18 + 48 | 0; //@line 31075
   HEAP32[$144 >> 2] = $20; //@line 31076
   $145 = $ReallocAsyncCtx18 + 52 | 0; //@line 31077
   HEAP32[$145 >> 2] = $22; //@line 31078
   $146 = $ReallocAsyncCtx18 + 56 | 0; //@line 31079
   HEAP32[$146 >> 2] = $24; //@line 31080
   sp = STACKTOP; //@line 31081
   return;
  } else {
   $147 = HEAP32[$131 >> 2] | 0; //@line 31084
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 31085
   FUNCTION_TABLE_vii[$147 & 31]($127, $129); //@line 31086
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 473; //@line 31089
    $148 = $ReallocAsyncCtx2 + 4 | 0; //@line 31090
    HEAP32[$148 >> 2] = $2; //@line 31091
    $149 = $ReallocAsyncCtx2 + 8 | 0; //@line 31092
    HEAP32[$149 >> 2] = $4; //@line 31093
    $150 = $ReallocAsyncCtx2 + 12 | 0; //@line 31094
    HEAP32[$150 >> 2] = $6; //@line 31095
    $151 = $ReallocAsyncCtx2 + 16 | 0; //@line 31096
    HEAP32[$151 >> 2] = $18; //@line 31097
    $152 = $ReallocAsyncCtx2 + 20 | 0; //@line 31098
    HEAP32[$152 >> 2] = $20; //@line 31099
    $153 = $ReallocAsyncCtx2 + 24 | 0; //@line 31100
    HEAP32[$153 >> 2] = $22; //@line 31101
    $154 = $ReallocAsyncCtx2 + 28 | 0; //@line 31102
    HEAP32[$154 >> 2] = $24; //@line 31103
    $155 = $ReallocAsyncCtx2 + 32 | 0; //@line 31104
    HEAP32[$155 >> 2] = $8; //@line 31105
    $156 = $ReallocAsyncCtx2 + 36 | 0; //@line 31106
    HEAP32[$156 >> 2] = $10; //@line 31107
    $157 = $ReallocAsyncCtx2 + 40 | 0; //@line 31108
    HEAP32[$157 >> 2] = $12; //@line 31109
    $158 = $ReallocAsyncCtx2 + 44 | 0; //@line 31110
    HEAP32[$158 >> 2] = $14; //@line 31111
    sp = STACKTOP; //@line 31112
    return;
   }
   ___async_unwind = 0; //@line 31115
   HEAP32[$ReallocAsyncCtx2 >> 2] = 473; //@line 31116
   $148 = $ReallocAsyncCtx2 + 4 | 0; //@line 31117
   HEAP32[$148 >> 2] = $2; //@line 31118
   $149 = $ReallocAsyncCtx2 + 8 | 0; //@line 31119
   HEAP32[$149 >> 2] = $4; //@line 31120
   $150 = $ReallocAsyncCtx2 + 12 | 0; //@line 31121
   HEAP32[$150 >> 2] = $6; //@line 31122
   $151 = $ReallocAsyncCtx2 + 16 | 0; //@line 31123
   HEAP32[$151 >> 2] = $18; //@line 31124
   $152 = $ReallocAsyncCtx2 + 20 | 0; //@line 31125
   HEAP32[$152 >> 2] = $20; //@line 31126
   $153 = $ReallocAsyncCtx2 + 24 | 0; //@line 31127
   HEAP32[$153 >> 2] = $22; //@line 31128
   $154 = $ReallocAsyncCtx2 + 28 | 0; //@line 31129
   HEAP32[$154 >> 2] = $24; //@line 31130
   $155 = $ReallocAsyncCtx2 + 32 | 0; //@line 31131
   HEAP32[$155 >> 2] = $8; //@line 31132
   $156 = $ReallocAsyncCtx2 + 36 | 0; //@line 31133
   HEAP32[$156 >> 2] = $10; //@line 31134
   $157 = $ReallocAsyncCtx2 + 40 | 0; //@line 31135
   HEAP32[$157 >> 2] = $12; //@line 31136
   $158 = $ReallocAsyncCtx2 + 44 | 0; //@line 31137
   HEAP32[$158 >> 2] = $14; //@line 31138
   sp = STACKTOP; //@line 31139
   return;
  }
 }
 if ($122 & 8) {
  HEAP8[$2 >> 0] = $122 & -9; //@line 31147
  $163 = HEAP32[$4 + 1324 >> 2] | 0; //@line 31149
  $164 = $163 + 32 | 0; //@line 31150
  $166 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 31152
  $167 = $163 + 44 | 0; //@line 31153
  $168 = HEAP32[$167 >> 2] | 0; //@line 31154
  if (!$168) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 31157
   _mbed_assert_internal(15352, 15357, 1102); //@line 31158
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 474; //@line 31161
    $170 = $ReallocAsyncCtx17 + 4 | 0; //@line 31162
    HEAP32[$170 >> 2] = $2; //@line 31163
    $171 = $ReallocAsyncCtx17 + 8 | 0; //@line 31164
    HEAP32[$171 >> 2] = $4; //@line 31165
    $172 = $ReallocAsyncCtx17 + 12 | 0; //@line 31166
    HEAP32[$172 >> 2] = $6; //@line 31167
    $173 = $ReallocAsyncCtx17 + 16 | 0; //@line 31168
    HEAP32[$173 >> 2] = $8; //@line 31169
    $174 = $ReallocAsyncCtx17 + 20 | 0; //@line 31170
    HEAP32[$174 >> 2] = $10; //@line 31171
    $175 = $ReallocAsyncCtx17 + 24 | 0; //@line 31172
    HEAP32[$175 >> 2] = $12; //@line 31173
    $176 = $ReallocAsyncCtx17 + 28 | 0; //@line 31174
    HEAP32[$176 >> 2] = $14; //@line 31175
    $177 = $ReallocAsyncCtx17 + 32 | 0; //@line 31176
    HEAP32[$177 >> 2] = $18; //@line 31177
    $178 = $ReallocAsyncCtx17 + 36 | 0; //@line 31178
    HEAP32[$178 >> 2] = $20; //@line 31179
    $179 = $ReallocAsyncCtx17 + 40 | 0; //@line 31180
    HEAP32[$179 >> 2] = $22; //@line 31181
    $180 = $ReallocAsyncCtx17 + 44 | 0; //@line 31182
    HEAP32[$180 >> 2] = $24; //@line 31183
    $181 = $ReallocAsyncCtx17 + 48 | 0; //@line 31184
    HEAP32[$181 >> 2] = $164; //@line 31185
    $182 = $ReallocAsyncCtx17 + 52 | 0; //@line 31186
    HEAP32[$182 >> 2] = $166; //@line 31187
    $183 = $ReallocAsyncCtx17 + 56 | 0; //@line 31188
    HEAP32[$183 >> 2] = $167; //@line 31189
    sp = STACKTOP; //@line 31190
    return;
   }
   ___async_unwind = 0; //@line 31193
   HEAP32[$ReallocAsyncCtx17 >> 2] = 474; //@line 31194
   $170 = $ReallocAsyncCtx17 + 4 | 0; //@line 31195
   HEAP32[$170 >> 2] = $2; //@line 31196
   $171 = $ReallocAsyncCtx17 + 8 | 0; //@line 31197
   HEAP32[$171 >> 2] = $4; //@line 31198
   $172 = $ReallocAsyncCtx17 + 12 | 0; //@line 31199
   HEAP32[$172 >> 2] = $6; //@line 31200
   $173 = $ReallocAsyncCtx17 + 16 | 0; //@line 31201
   HEAP32[$173 >> 2] = $8; //@line 31202
   $174 = $ReallocAsyncCtx17 + 20 | 0; //@line 31203
   HEAP32[$174 >> 2] = $10; //@line 31204
   $175 = $ReallocAsyncCtx17 + 24 | 0; //@line 31205
   HEAP32[$175 >> 2] = $12; //@line 31206
   $176 = $ReallocAsyncCtx17 + 28 | 0; //@line 31207
   HEAP32[$176 >> 2] = $14; //@line 31208
   $177 = $ReallocAsyncCtx17 + 32 | 0; //@line 31209
   HEAP32[$177 >> 2] = $18; //@line 31210
   $178 = $ReallocAsyncCtx17 + 36 | 0; //@line 31211
   HEAP32[$178 >> 2] = $20; //@line 31212
   $179 = $ReallocAsyncCtx17 + 40 | 0; //@line 31213
   HEAP32[$179 >> 2] = $22; //@line 31214
   $180 = $ReallocAsyncCtx17 + 44 | 0; //@line 31215
   HEAP32[$180 >> 2] = $24; //@line 31216
   $181 = $ReallocAsyncCtx17 + 48 | 0; //@line 31217
   HEAP32[$181 >> 2] = $164; //@line 31218
   $182 = $ReallocAsyncCtx17 + 52 | 0; //@line 31219
   HEAP32[$182 >> 2] = $166; //@line 31220
   $183 = $ReallocAsyncCtx17 + 56 | 0; //@line 31221
   HEAP32[$183 >> 2] = $167; //@line 31222
   sp = STACKTOP; //@line 31223
   return;
  } else {
   $184 = HEAP32[$168 >> 2] | 0; //@line 31226
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 31227
   FUNCTION_TABLE_vii[$184 & 31]($164, $166); //@line 31228
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 31231
    $185 = $ReallocAsyncCtx3 + 4 | 0; //@line 31232
    HEAP32[$185 >> 2] = $4; //@line 31233
    $186 = $ReallocAsyncCtx3 + 8 | 0; //@line 31234
    HEAP32[$186 >> 2] = $6; //@line 31235
    $187 = $ReallocAsyncCtx3 + 12 | 0; //@line 31236
    HEAP32[$187 >> 2] = $2; //@line 31237
    $188 = $ReallocAsyncCtx3 + 16 | 0; //@line 31238
    HEAP32[$188 >> 2] = $18; //@line 31239
    $189 = $ReallocAsyncCtx3 + 20 | 0; //@line 31240
    HEAP32[$189 >> 2] = $20; //@line 31241
    $190 = $ReallocAsyncCtx3 + 24 | 0; //@line 31242
    HEAP32[$190 >> 2] = $22; //@line 31243
    $191 = $ReallocAsyncCtx3 + 28 | 0; //@line 31244
    HEAP32[$191 >> 2] = $24; //@line 31245
    $192 = $ReallocAsyncCtx3 + 32 | 0; //@line 31246
    HEAP32[$192 >> 2] = $8; //@line 31247
    $193 = $ReallocAsyncCtx3 + 36 | 0; //@line 31248
    HEAP32[$193 >> 2] = $10; //@line 31249
    $194 = $ReallocAsyncCtx3 + 40 | 0; //@line 31250
    HEAP32[$194 >> 2] = $12; //@line 31251
    $195 = $ReallocAsyncCtx3 + 44 | 0; //@line 31252
    HEAP32[$195 >> 2] = $14; //@line 31253
    sp = STACKTOP; //@line 31254
    return;
   }
   ___async_unwind = 0; //@line 31257
   HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 31258
   $185 = $ReallocAsyncCtx3 + 4 | 0; //@line 31259
   HEAP32[$185 >> 2] = $4; //@line 31260
   $186 = $ReallocAsyncCtx3 + 8 | 0; //@line 31261
   HEAP32[$186 >> 2] = $6; //@line 31262
   $187 = $ReallocAsyncCtx3 + 12 | 0; //@line 31263
   HEAP32[$187 >> 2] = $2; //@line 31264
   $188 = $ReallocAsyncCtx3 + 16 | 0; //@line 31265
   HEAP32[$188 >> 2] = $18; //@line 31266
   $189 = $ReallocAsyncCtx3 + 20 | 0; //@line 31267
   HEAP32[$189 >> 2] = $20; //@line 31268
   $190 = $ReallocAsyncCtx3 + 24 | 0; //@line 31269
   HEAP32[$190 >> 2] = $22; //@line 31270
   $191 = $ReallocAsyncCtx3 + 28 | 0; //@line 31271
   HEAP32[$191 >> 2] = $24; //@line 31272
   $192 = $ReallocAsyncCtx3 + 32 | 0; //@line 31273
   HEAP32[$192 >> 2] = $8; //@line 31274
   $193 = $ReallocAsyncCtx3 + 36 | 0; //@line 31275
   HEAP32[$193 >> 2] = $10; //@line 31276
   $194 = $ReallocAsyncCtx3 + 40 | 0; //@line 31277
   HEAP32[$194 >> 2] = $12; //@line 31278
   $195 = $ReallocAsyncCtx3 + 44 | 0; //@line 31279
   HEAP32[$195 >> 2] = $14; //@line 31280
   sp = STACKTOP; //@line 31281
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(13258, $18) | 0; //@line 31288
  _printf(13405, $22) | 0; //@line 31289
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 31290
  _putchar(10) | 0; //@line 31291
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 476; //@line 31294
   $198 = $ReallocAsyncCtx7 + 4 | 0; //@line 31295
   HEAP32[$198 >> 2] = $4; //@line 31296
   $199 = $ReallocAsyncCtx7 + 8 | 0; //@line 31297
   HEAP32[$199 >> 2] = $6; //@line 31298
   $200 = $ReallocAsyncCtx7 + 12 | 0; //@line 31299
   HEAP32[$200 >> 2] = $2; //@line 31300
   $201 = $ReallocAsyncCtx7 + 16 | 0; //@line 31301
   HEAP32[$201 >> 2] = $8; //@line 31302
   $202 = $ReallocAsyncCtx7 + 20 | 0; //@line 31303
   HEAP32[$202 >> 2] = $10; //@line 31304
   $203 = $ReallocAsyncCtx7 + 24 | 0; //@line 31305
   HEAP32[$203 >> 2] = $12; //@line 31306
   $204 = $ReallocAsyncCtx7 + 28 | 0; //@line 31307
   HEAP32[$204 >> 2] = $14; //@line 31308
   sp = STACKTOP; //@line 31309
   return;
  }
  ___async_unwind = 0; //@line 31312
  HEAP32[$ReallocAsyncCtx7 >> 2] = 476; //@line 31313
  $198 = $ReallocAsyncCtx7 + 4 | 0; //@line 31314
  HEAP32[$198 >> 2] = $4; //@line 31315
  $199 = $ReallocAsyncCtx7 + 8 | 0; //@line 31316
  HEAP32[$199 >> 2] = $6; //@line 31317
  $200 = $ReallocAsyncCtx7 + 12 | 0; //@line 31318
  HEAP32[$200 >> 2] = $2; //@line 31319
  $201 = $ReallocAsyncCtx7 + 16 | 0; //@line 31320
  HEAP32[$201 >> 2] = $8; //@line 31321
  $202 = $ReallocAsyncCtx7 + 20 | 0; //@line 31322
  HEAP32[$202 >> 2] = $10; //@line 31323
  $203 = $ReallocAsyncCtx7 + 24 | 0; //@line 31324
  HEAP32[$203 >> 2] = $12; //@line 31325
  $204 = $ReallocAsyncCtx7 + 28 | 0; //@line 31326
  HEAP32[$204 >> 2] = $14; //@line 31327
  sp = STACKTOP; //@line 31328
  return;
 }
 $205 = HEAP8[$2 >> 0] & -33; //@line 31332
 HEAP8[$2 >> 0] = $205; //@line 31333
 do {
  if (!($205 & 2)) {
   $244 = $205; //@line 31338
  } else {
   $216 = $205 & -3; //@line 31340
   HEAP8[$2 >> 0] = $216; //@line 31341
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(13258, $8) | 0; //@line 31346
    _printf(13285, $12) | 0; //@line 31347
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 31348
    _putchar(10) | 0; //@line 31349
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 31352
     $220 = $ReallocAsyncCtx6 + 4 | 0; //@line 31353
     HEAP32[$220 >> 2] = $4; //@line 31354
     $221 = $ReallocAsyncCtx6 + 8 | 0; //@line 31355
     HEAP32[$221 >> 2] = $6; //@line 31356
     $222 = $ReallocAsyncCtx6 + 12 | 0; //@line 31357
     HEAP32[$222 >> 2] = $6; //@line 31358
     $223 = $ReallocAsyncCtx6 + 16 | 0; //@line 31359
     HEAP32[$223 >> 2] = $2; //@line 31360
     sp = STACKTOP; //@line 31361
     return;
    }
    ___async_unwind = 0; //@line 31364
    HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 31365
    $220 = $ReallocAsyncCtx6 + 4 | 0; //@line 31366
    HEAP32[$220 >> 2] = $4; //@line 31367
    $221 = $ReallocAsyncCtx6 + 8 | 0; //@line 31368
    HEAP32[$221 >> 2] = $6; //@line 31369
    $222 = $ReallocAsyncCtx6 + 12 | 0; //@line 31370
    HEAP32[$222 >> 2] = $6; //@line 31371
    $223 = $ReallocAsyncCtx6 + 16 | 0; //@line 31372
    HEAP32[$223 >> 2] = $2; //@line 31373
    sp = STACKTOP; //@line 31374
    return;
   }
   if ($216 & 4) {
    $242 = $216 & -5; //@line 31380
    HEAP8[$2 >> 0] = $242; //@line 31381
    $244 = $242; //@line 31382
    break;
   }
   $227 = HEAP32[$4 + 1324 >> 2] | 0; //@line 31386
   $228 = $227 + 16 | 0; //@line 31387
   $230 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 31389
   $231 = $227 + 28 | 0; //@line 31390
   $232 = HEAP32[$231 >> 2] | 0; //@line 31391
   if (!$232) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 31394
    _mbed_assert_internal(15352, 15357, 1102); //@line 31395
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 31398
     $234 = $ReallocAsyncCtx15 + 4 | 0; //@line 31399
     HEAP32[$234 >> 2] = $231; //@line 31400
     $235 = $ReallocAsyncCtx15 + 8 | 0; //@line 31401
     HEAP32[$235 >> 2] = $228; //@line 31402
     $236 = $ReallocAsyncCtx15 + 12 | 0; //@line 31403
     HEAP32[$236 >> 2] = $230; //@line 31404
     $237 = $ReallocAsyncCtx15 + 16 | 0; //@line 31405
     HEAP32[$237 >> 2] = $2; //@line 31406
     $238 = $ReallocAsyncCtx15 + 20 | 0; //@line 31407
     HEAP32[$238 >> 2] = $4; //@line 31408
     sp = STACKTOP; //@line 31409
     return;
    }
    ___async_unwind = 0; //@line 31412
    HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 31413
    $234 = $ReallocAsyncCtx15 + 4 | 0; //@line 31414
    HEAP32[$234 >> 2] = $231; //@line 31415
    $235 = $ReallocAsyncCtx15 + 8 | 0; //@line 31416
    HEAP32[$235 >> 2] = $228; //@line 31417
    $236 = $ReallocAsyncCtx15 + 12 | 0; //@line 31418
    HEAP32[$236 >> 2] = $230; //@line 31419
    $237 = $ReallocAsyncCtx15 + 16 | 0; //@line 31420
    HEAP32[$237 >> 2] = $2; //@line 31421
    $238 = $ReallocAsyncCtx15 + 20 | 0; //@line 31422
    HEAP32[$238 >> 2] = $4; //@line 31423
    sp = STACKTOP; //@line 31424
    return;
   } else {
    $239 = HEAP32[$232 >> 2] | 0; //@line 31427
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 31428
    FUNCTION_TABLE_vii[$239 & 31]($228, $230); //@line 31429
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 31432
     $240 = $ReallocAsyncCtx4 + 4 | 0; //@line 31433
     HEAP32[$240 >> 2] = $2; //@line 31434
     $241 = $ReallocAsyncCtx4 + 8 | 0; //@line 31435
     HEAP32[$241 >> 2] = $4; //@line 31436
     sp = STACKTOP; //@line 31437
     return;
    }
    ___async_unwind = 0; //@line 31440
    HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 31441
    $240 = $ReallocAsyncCtx4 + 4 | 0; //@line 31442
    HEAP32[$240 >> 2] = $2; //@line 31443
    $241 = $ReallocAsyncCtx4 + 8 | 0; //@line 31444
    HEAP32[$241 >> 2] = $4; //@line 31445
    sp = STACKTOP; //@line 31446
    return;
   }
  }
 } while (0);
 if (!($244 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $244 & -17; //@line 31457
 $248 = HEAP32[$4 + 1324 >> 2] | 0; //@line 31459
 $249 = $248 + 48 | 0; //@line 31460
 $251 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 31462
 $252 = $248 + 60 | 0; //@line 31463
 $253 = HEAP32[$252 >> 2] | 0; //@line 31464
 if (!$253) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 31467
  _mbed_assert_internal(15352, 15357, 1102); //@line 31468
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 31471
   $255 = $ReallocAsyncCtx14 + 4 | 0; //@line 31472
   HEAP32[$255 >> 2] = $252; //@line 31473
   $256 = $ReallocAsyncCtx14 + 8 | 0; //@line 31474
   HEAP32[$256 >> 2] = $249; //@line 31475
   $257 = $ReallocAsyncCtx14 + 12 | 0; //@line 31476
   HEAP32[$257 >> 2] = $251; //@line 31477
   sp = STACKTOP; //@line 31478
   return;
  }
  ___async_unwind = 0; //@line 31481
  HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 31482
  $255 = $ReallocAsyncCtx14 + 4 | 0; //@line 31483
  HEAP32[$255 >> 2] = $252; //@line 31484
  $256 = $ReallocAsyncCtx14 + 8 | 0; //@line 31485
  HEAP32[$256 >> 2] = $249; //@line 31486
  $257 = $ReallocAsyncCtx14 + 12 | 0; //@line 31487
  HEAP32[$257 >> 2] = $251; //@line 31488
  sp = STACKTOP; //@line 31489
  return;
 } else {
  $258 = HEAP32[$253 >> 2] | 0; //@line 31492
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 31493
  FUNCTION_TABLE_vii[$258 & 31]($249, $251); //@line 31494
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 31497
   sp = STACKTOP; //@line 31498
   return;
  }
  ___async_unwind = 0; //@line 31501
  HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 31502
  sp = STACKTOP; //@line 31503
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_441($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $127 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $216 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $227 = 0, $228 = 0, $230 = 0, $231 = 0, $232 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $244 = 0, $248 = 0, $249 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $28 = 0, $30 = 0, $36 = 0, $4 = 0, $50 = 0, $54 = 0, $59 = 0, $6 = 0, $65 = 0, $66 = 0, $71 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 29842
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29844
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29846
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29848
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29850
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29852
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29854
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29856
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29858
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29860
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29862
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29864
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29866
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 29868
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 29870
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 29872
 do {
  if (HEAP8[$2 >> 0] & 2) {
   $36 = $4 + 288 | 0; //@line 29880
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 29896
   HEAP8[$30 >> 0] = 0; //@line 29897
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $50 = $4 + 956 | 0; //@line 29902
    HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + 1; //@line 29905
   }
   $54 = HEAP8[$4 + 895 >> 0] | 0; //@line 29908
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 11 >> 0] = $54; //@line 29911
   HEAP32[$28 >> 2] = HEAP32[$28 >> 2] & -2; //@line 29914
  }
 } while (0);
 $59 = $4 + 377 | 0; //@line 29917
 if (HEAP8[$59 >> 0] | 0) {
  if (!(HEAP32[$28 >> 2] & 16)) {
   HEAP8[$59 >> 0] = 0; //@line 29925
   $65 = $4 + 895 | 0; //@line 29926
   $66 = HEAP8[$65 >> 0] | 0; //@line 29927
   if (!(($66 & 255) < 9 ? ($66 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $96 = HEAP32[$4 >> 2] | 0; //@line 29934
    $99 = HEAP32[(HEAP32[$96 >> 2] | 0) + 16 >> 2] | 0; //@line 29937
    $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 29938
    FUNCTION_TABLE_vi[$99 & 1023]($96); //@line 29939
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 471; //@line 29942
     $100 = $ReallocAsyncCtx + 4 | 0; //@line 29943
     HEAP32[$100 >> 2] = $2; //@line 29944
     $101 = $ReallocAsyncCtx + 8 | 0; //@line 29945
     HEAP32[$101 >> 2] = $4; //@line 29946
     $102 = $ReallocAsyncCtx + 12 | 0; //@line 29947
     HEAP32[$102 >> 2] = $6; //@line 29948
     $103 = $ReallocAsyncCtx + 16 | 0; //@line 29949
     HEAP32[$103 >> 2] = $24; //@line 29950
     $104 = $ReallocAsyncCtx + 20 | 0; //@line 29951
     HEAP32[$104 >> 2] = $26; //@line 29952
     $105 = $ReallocAsyncCtx + 24 | 0; //@line 29953
     HEAP32[$105 >> 2] = $16; //@line 29954
     $106 = $ReallocAsyncCtx + 28 | 0; //@line 29955
     HEAP32[$106 >> 2] = $18; //@line 29956
     $107 = $ReallocAsyncCtx + 32 | 0; //@line 29957
     HEAP32[$107 >> 2] = $20; //@line 29958
     $108 = $ReallocAsyncCtx + 36 | 0; //@line 29959
     HEAP32[$108 >> 2] = $22; //@line 29960
     $109 = $ReallocAsyncCtx + 40 | 0; //@line 29961
     HEAP32[$109 >> 2] = $8; //@line 29962
     $110 = $ReallocAsyncCtx + 44 | 0; //@line 29963
     HEAP32[$110 >> 2] = $10; //@line 29964
     $111 = $ReallocAsyncCtx + 48 | 0; //@line 29965
     HEAP32[$111 >> 2] = $12; //@line 29966
     $112 = $ReallocAsyncCtx + 52 | 0; //@line 29967
     HEAP32[$112 >> 2] = $14; //@line 29968
     $113 = $ReallocAsyncCtx + 56 | 0; //@line 29969
     HEAP32[$113 >> 2] = $28; //@line 29970
     $114 = $ReallocAsyncCtx + 60 | 0; //@line 29971
     HEAP32[$114 >> 2] = $30; //@line 29972
     $115 = $ReallocAsyncCtx + 64 | 0; //@line 29973
     HEAP32[$115 >> 2] = $65; //@line 29974
     sp = STACKTOP; //@line 29975
     return;
    }
    ___async_unwind = 0; //@line 29978
    HEAP32[$ReallocAsyncCtx >> 2] = 471; //@line 29979
    $100 = $ReallocAsyncCtx + 4 | 0; //@line 29980
    HEAP32[$100 >> 2] = $2; //@line 29981
    $101 = $ReallocAsyncCtx + 8 | 0; //@line 29982
    HEAP32[$101 >> 2] = $4; //@line 29983
    $102 = $ReallocAsyncCtx + 12 | 0; //@line 29984
    HEAP32[$102 >> 2] = $6; //@line 29985
    $103 = $ReallocAsyncCtx + 16 | 0; //@line 29986
    HEAP32[$103 >> 2] = $24; //@line 29987
    $104 = $ReallocAsyncCtx + 20 | 0; //@line 29988
    HEAP32[$104 >> 2] = $26; //@line 29989
    $105 = $ReallocAsyncCtx + 24 | 0; //@line 29990
    HEAP32[$105 >> 2] = $16; //@line 29991
    $106 = $ReallocAsyncCtx + 28 | 0; //@line 29992
    HEAP32[$106 >> 2] = $18; //@line 29993
    $107 = $ReallocAsyncCtx + 32 | 0; //@line 29994
    HEAP32[$107 >> 2] = $20; //@line 29995
    $108 = $ReallocAsyncCtx + 36 | 0; //@line 29996
    HEAP32[$108 >> 2] = $22; //@line 29997
    $109 = $ReallocAsyncCtx + 40 | 0; //@line 29998
    HEAP32[$109 >> 2] = $8; //@line 29999
    $110 = $ReallocAsyncCtx + 44 | 0; //@line 30000
    HEAP32[$110 >> 2] = $10; //@line 30001
    $111 = $ReallocAsyncCtx + 48 | 0; //@line 30002
    HEAP32[$111 >> 2] = $12; //@line 30003
    $112 = $ReallocAsyncCtx + 52 | 0; //@line 30004
    HEAP32[$112 >> 2] = $14; //@line 30005
    $113 = $ReallocAsyncCtx + 56 | 0; //@line 30006
    HEAP32[$113 >> 2] = $28; //@line 30007
    $114 = $ReallocAsyncCtx + 60 | 0; //@line 30008
    HEAP32[$114 >> 2] = $30; //@line 30009
    $115 = $ReallocAsyncCtx + 64 | 0; //@line 30010
    HEAP32[$115 >> 2] = $65; //@line 30011
    sp = STACKTOP; //@line 30012
    return;
   }
   $71 = $66 + 1 << 24 >> 24; //@line 30015
   HEAP8[$65 >> 0] = $71; //@line 30016
   if ($71 & 1) {
    $75 = $4 + 1097 | 0; //@line 30021
    HEAP8[$75 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$75 >> 0] | 0) | 0; //@line 30024
   }
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 30026
   $78 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 30027
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 470; //@line 30030
    $79 = $ReallocAsyncCtx9 + 4 | 0; //@line 30031
    HEAP32[$79 >> 2] = $2; //@line 30032
    $80 = $ReallocAsyncCtx9 + 8 | 0; //@line 30033
    HEAP32[$80 >> 2] = $4; //@line 30034
    $81 = $ReallocAsyncCtx9 + 12 | 0; //@line 30035
    HEAP32[$81 >> 2] = $6; //@line 30036
    $82 = $ReallocAsyncCtx9 + 16 | 0; //@line 30037
    HEAP32[$82 >> 2] = $8; //@line 30038
    $83 = $ReallocAsyncCtx9 + 20 | 0; //@line 30039
    HEAP32[$83 >> 2] = $10; //@line 30040
    $84 = $ReallocAsyncCtx9 + 24 | 0; //@line 30041
    HEAP32[$84 >> 2] = $12; //@line 30042
    $85 = $ReallocAsyncCtx9 + 28 | 0; //@line 30043
    HEAP32[$85 >> 2] = $14; //@line 30044
    $86 = $ReallocAsyncCtx9 + 32 | 0; //@line 30045
    HEAP32[$86 >> 2] = $16; //@line 30046
    $87 = $ReallocAsyncCtx9 + 36 | 0; //@line 30047
    HEAP32[$87 >> 2] = $18; //@line 30048
    $88 = $ReallocAsyncCtx9 + 40 | 0; //@line 30049
    HEAP32[$88 >> 2] = $20; //@line 30050
    $89 = $ReallocAsyncCtx9 + 44 | 0; //@line 30051
    HEAP32[$89 >> 2] = $22; //@line 30052
    $90 = $ReallocAsyncCtx9 + 48 | 0; //@line 30053
    HEAP32[$90 >> 2] = $24; //@line 30054
    $91 = $ReallocAsyncCtx9 + 52 | 0; //@line 30055
    HEAP32[$91 >> 2] = $26; //@line 30056
    $92 = $ReallocAsyncCtx9 + 56 | 0; //@line 30057
    HEAP32[$92 >> 2] = $28; //@line 30058
    $93 = $ReallocAsyncCtx9 + 60 | 0; //@line 30059
    HEAP32[$93 >> 2] = $30; //@line 30060
    $94 = $ReallocAsyncCtx9 + 64 | 0; //@line 30061
    HEAP32[$94 >> 2] = $65; //@line 30062
    sp = STACKTOP; //@line 30063
    return;
   }
   HEAP32[___async_retval >> 2] = $78; //@line 30067
   ___async_unwind = 0; //@line 30068
   HEAP32[$ReallocAsyncCtx9 >> 2] = 470; //@line 30069
   $79 = $ReallocAsyncCtx9 + 4 | 0; //@line 30070
   HEAP32[$79 >> 2] = $2; //@line 30071
   $80 = $ReallocAsyncCtx9 + 8 | 0; //@line 30072
   HEAP32[$80 >> 2] = $4; //@line 30073
   $81 = $ReallocAsyncCtx9 + 12 | 0; //@line 30074
   HEAP32[$81 >> 2] = $6; //@line 30075
   $82 = $ReallocAsyncCtx9 + 16 | 0; //@line 30076
   HEAP32[$82 >> 2] = $8; //@line 30077
   $83 = $ReallocAsyncCtx9 + 20 | 0; //@line 30078
   HEAP32[$83 >> 2] = $10; //@line 30079
   $84 = $ReallocAsyncCtx9 + 24 | 0; //@line 30080
   HEAP32[$84 >> 2] = $12; //@line 30081
   $85 = $ReallocAsyncCtx9 + 28 | 0; //@line 30082
   HEAP32[$85 >> 2] = $14; //@line 30083
   $86 = $ReallocAsyncCtx9 + 32 | 0; //@line 30084
   HEAP32[$86 >> 2] = $16; //@line 30085
   $87 = $ReallocAsyncCtx9 + 36 | 0; //@line 30086
   HEAP32[$87 >> 2] = $18; //@line 30087
   $88 = $ReallocAsyncCtx9 + 40 | 0; //@line 30088
   HEAP32[$88 >> 2] = $20; //@line 30089
   $89 = $ReallocAsyncCtx9 + 44 | 0; //@line 30090
   HEAP32[$89 >> 2] = $22; //@line 30091
   $90 = $ReallocAsyncCtx9 + 48 | 0; //@line 30092
   HEAP32[$90 >> 2] = $24; //@line 30093
   $91 = $ReallocAsyncCtx9 + 52 | 0; //@line 30094
   HEAP32[$91 >> 2] = $26; //@line 30095
   $92 = $ReallocAsyncCtx9 + 56 | 0; //@line 30096
   HEAP32[$92 >> 2] = $28; //@line 30097
   $93 = $ReallocAsyncCtx9 + 60 | 0; //@line 30098
   HEAP32[$93 >> 2] = $30; //@line 30099
   $94 = $ReallocAsyncCtx9 + 64 | 0; //@line 30100
   HEAP32[$94 >> 2] = $65; //@line 30101
   sp = STACKTOP; //@line 30102
   return;
  }
 }
 $116 = HEAP32[$28 >> 2] | 0; //@line 30106
 $119 = $116 & -3; //@line 30109
 if (!($116 & 2)) {
  $121 = $116; //@line 30111
 } else {
  HEAP32[$28 >> 2] = $119; //@line 30113
  $121 = $119; //@line 30114
 }
 if ($121 | 0) {
  $206 = HEAP32[$24 >> 2] | 0; //@line 30118
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 30119
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($206, $26, 1e3); //@line 30120
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 477; //@line 30123
   $207 = $ReallocAsyncCtx8 + 4 | 0; //@line 30124
   HEAP32[$207 >> 2] = $4; //@line 30125
   $208 = $ReallocAsyncCtx8 + 8 | 0; //@line 30126
   HEAP32[$208 >> 2] = $6; //@line 30127
   $209 = $ReallocAsyncCtx8 + 12 | 0; //@line 30128
   HEAP32[$209 >> 2] = $2; //@line 30129
   $210 = $ReallocAsyncCtx8 + 16 | 0; //@line 30130
   HEAP32[$210 >> 2] = $8; //@line 30131
   $211 = $ReallocAsyncCtx8 + 20 | 0; //@line 30132
   HEAP32[$211 >> 2] = $10; //@line 30133
   $212 = $ReallocAsyncCtx8 + 24 | 0; //@line 30134
   HEAP32[$212 >> 2] = $12; //@line 30135
   $213 = $ReallocAsyncCtx8 + 28 | 0; //@line 30136
   HEAP32[$213 >> 2] = $14; //@line 30137
   sp = STACKTOP; //@line 30138
   return;
  }
  ___async_unwind = 0; //@line 30141
  HEAP32[$ReallocAsyncCtx8 >> 2] = 477; //@line 30142
  $207 = $ReallocAsyncCtx8 + 4 | 0; //@line 30143
  HEAP32[$207 >> 2] = $4; //@line 30144
  $208 = $ReallocAsyncCtx8 + 8 | 0; //@line 30145
  HEAP32[$208 >> 2] = $6; //@line 30146
  $209 = $ReallocAsyncCtx8 + 12 | 0; //@line 30147
  HEAP32[$209 >> 2] = $2; //@line 30148
  $210 = $ReallocAsyncCtx8 + 16 | 0; //@line 30149
  HEAP32[$210 >> 2] = $8; //@line 30150
  $211 = $ReallocAsyncCtx8 + 20 | 0; //@line 30151
  HEAP32[$211 >> 2] = $10; //@line 30152
  $212 = $ReallocAsyncCtx8 + 24 | 0; //@line 30153
  HEAP32[$212 >> 2] = $12; //@line 30154
  $213 = $ReallocAsyncCtx8 + 28 | 0; //@line 30155
  HEAP32[$213 >> 2] = $14; //@line 30156
  sp = STACKTOP; //@line 30157
  return;
 }
 $122 = HEAP8[$2 >> 0] | 0; //@line 30160
 if ($122 & 1) {
  HEAP8[$2 >> 0] = $122 & -2; //@line 30165
  $127 = HEAP32[$4 + 1324 >> 2] | 0; //@line 30167
  $129 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 30169
  $130 = $127 + 12 | 0; //@line 30170
  $131 = HEAP32[$130 >> 2] | 0; //@line 30171
  if (!$131) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 30174
   _mbed_assert_internal(15352, 15357, 1102); //@line 30175
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 472; //@line 30178
    $133 = $ReallocAsyncCtx18 + 4 | 0; //@line 30179
    HEAP32[$133 >> 2] = $2; //@line 30180
    $134 = $ReallocAsyncCtx18 + 8 | 0; //@line 30181
    HEAP32[$134 >> 2] = $4; //@line 30182
    $135 = $ReallocAsyncCtx18 + 12 | 0; //@line 30183
    HEAP32[$135 >> 2] = $6; //@line 30184
    $136 = $ReallocAsyncCtx18 + 16 | 0; //@line 30185
    HEAP32[$136 >> 2] = $8; //@line 30186
    $137 = $ReallocAsyncCtx18 + 20 | 0; //@line 30187
    HEAP32[$137 >> 2] = $10; //@line 30188
    $138 = $ReallocAsyncCtx18 + 24 | 0; //@line 30189
    HEAP32[$138 >> 2] = $12; //@line 30190
    $139 = $ReallocAsyncCtx18 + 28 | 0; //@line 30191
    HEAP32[$139 >> 2] = $14; //@line 30192
    $140 = $ReallocAsyncCtx18 + 32 | 0; //@line 30193
    HEAP32[$140 >> 2] = $130; //@line 30194
    $141 = $ReallocAsyncCtx18 + 36 | 0; //@line 30195
    HEAP32[$141 >> 2] = $127; //@line 30196
    $142 = $ReallocAsyncCtx18 + 40 | 0; //@line 30197
    HEAP32[$142 >> 2] = $129; //@line 30198
    $143 = $ReallocAsyncCtx18 + 44 | 0; //@line 30199
    HEAP32[$143 >> 2] = $16; //@line 30200
    $144 = $ReallocAsyncCtx18 + 48 | 0; //@line 30201
    HEAP32[$144 >> 2] = $18; //@line 30202
    $145 = $ReallocAsyncCtx18 + 52 | 0; //@line 30203
    HEAP32[$145 >> 2] = $20; //@line 30204
    $146 = $ReallocAsyncCtx18 + 56 | 0; //@line 30205
    HEAP32[$146 >> 2] = $22; //@line 30206
    sp = STACKTOP; //@line 30207
    return;
   }
   ___async_unwind = 0; //@line 30210
   HEAP32[$ReallocAsyncCtx18 >> 2] = 472; //@line 30211
   $133 = $ReallocAsyncCtx18 + 4 | 0; //@line 30212
   HEAP32[$133 >> 2] = $2; //@line 30213
   $134 = $ReallocAsyncCtx18 + 8 | 0; //@line 30214
   HEAP32[$134 >> 2] = $4; //@line 30215
   $135 = $ReallocAsyncCtx18 + 12 | 0; //@line 30216
   HEAP32[$135 >> 2] = $6; //@line 30217
   $136 = $ReallocAsyncCtx18 + 16 | 0; //@line 30218
   HEAP32[$136 >> 2] = $8; //@line 30219
   $137 = $ReallocAsyncCtx18 + 20 | 0; //@line 30220
   HEAP32[$137 >> 2] = $10; //@line 30221
   $138 = $ReallocAsyncCtx18 + 24 | 0; //@line 30222
   HEAP32[$138 >> 2] = $12; //@line 30223
   $139 = $ReallocAsyncCtx18 + 28 | 0; //@line 30224
   HEAP32[$139 >> 2] = $14; //@line 30225
   $140 = $ReallocAsyncCtx18 + 32 | 0; //@line 30226
   HEAP32[$140 >> 2] = $130; //@line 30227
   $141 = $ReallocAsyncCtx18 + 36 | 0; //@line 30228
   HEAP32[$141 >> 2] = $127; //@line 30229
   $142 = $ReallocAsyncCtx18 + 40 | 0; //@line 30230
   HEAP32[$142 >> 2] = $129; //@line 30231
   $143 = $ReallocAsyncCtx18 + 44 | 0; //@line 30232
   HEAP32[$143 >> 2] = $16; //@line 30233
   $144 = $ReallocAsyncCtx18 + 48 | 0; //@line 30234
   HEAP32[$144 >> 2] = $18; //@line 30235
   $145 = $ReallocAsyncCtx18 + 52 | 0; //@line 30236
   HEAP32[$145 >> 2] = $20; //@line 30237
   $146 = $ReallocAsyncCtx18 + 56 | 0; //@line 30238
   HEAP32[$146 >> 2] = $22; //@line 30239
   sp = STACKTOP; //@line 30240
   return;
  } else {
   $147 = HEAP32[$131 >> 2] | 0; //@line 30243
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 30244
   FUNCTION_TABLE_vii[$147 & 31]($127, $129); //@line 30245
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 473; //@line 30248
    $148 = $ReallocAsyncCtx2 + 4 | 0; //@line 30249
    HEAP32[$148 >> 2] = $2; //@line 30250
    $149 = $ReallocAsyncCtx2 + 8 | 0; //@line 30251
    HEAP32[$149 >> 2] = $4; //@line 30252
    $150 = $ReallocAsyncCtx2 + 12 | 0; //@line 30253
    HEAP32[$150 >> 2] = $6; //@line 30254
    $151 = $ReallocAsyncCtx2 + 16 | 0; //@line 30255
    HEAP32[$151 >> 2] = $16; //@line 30256
    $152 = $ReallocAsyncCtx2 + 20 | 0; //@line 30257
    HEAP32[$152 >> 2] = $18; //@line 30258
    $153 = $ReallocAsyncCtx2 + 24 | 0; //@line 30259
    HEAP32[$153 >> 2] = $20; //@line 30260
    $154 = $ReallocAsyncCtx2 + 28 | 0; //@line 30261
    HEAP32[$154 >> 2] = $22; //@line 30262
    $155 = $ReallocAsyncCtx2 + 32 | 0; //@line 30263
    HEAP32[$155 >> 2] = $8; //@line 30264
    $156 = $ReallocAsyncCtx2 + 36 | 0; //@line 30265
    HEAP32[$156 >> 2] = $10; //@line 30266
    $157 = $ReallocAsyncCtx2 + 40 | 0; //@line 30267
    HEAP32[$157 >> 2] = $12; //@line 30268
    $158 = $ReallocAsyncCtx2 + 44 | 0; //@line 30269
    HEAP32[$158 >> 2] = $14; //@line 30270
    sp = STACKTOP; //@line 30271
    return;
   }
   ___async_unwind = 0; //@line 30274
   HEAP32[$ReallocAsyncCtx2 >> 2] = 473; //@line 30275
   $148 = $ReallocAsyncCtx2 + 4 | 0; //@line 30276
   HEAP32[$148 >> 2] = $2; //@line 30277
   $149 = $ReallocAsyncCtx2 + 8 | 0; //@line 30278
   HEAP32[$149 >> 2] = $4; //@line 30279
   $150 = $ReallocAsyncCtx2 + 12 | 0; //@line 30280
   HEAP32[$150 >> 2] = $6; //@line 30281
   $151 = $ReallocAsyncCtx2 + 16 | 0; //@line 30282
   HEAP32[$151 >> 2] = $16; //@line 30283
   $152 = $ReallocAsyncCtx2 + 20 | 0; //@line 30284
   HEAP32[$152 >> 2] = $18; //@line 30285
   $153 = $ReallocAsyncCtx2 + 24 | 0; //@line 30286
   HEAP32[$153 >> 2] = $20; //@line 30287
   $154 = $ReallocAsyncCtx2 + 28 | 0; //@line 30288
   HEAP32[$154 >> 2] = $22; //@line 30289
   $155 = $ReallocAsyncCtx2 + 32 | 0; //@line 30290
   HEAP32[$155 >> 2] = $8; //@line 30291
   $156 = $ReallocAsyncCtx2 + 36 | 0; //@line 30292
   HEAP32[$156 >> 2] = $10; //@line 30293
   $157 = $ReallocAsyncCtx2 + 40 | 0; //@line 30294
   HEAP32[$157 >> 2] = $12; //@line 30295
   $158 = $ReallocAsyncCtx2 + 44 | 0; //@line 30296
   HEAP32[$158 >> 2] = $14; //@line 30297
   sp = STACKTOP; //@line 30298
   return;
  }
 }
 if ($122 & 8) {
  HEAP8[$2 >> 0] = $122 & -9; //@line 30306
  $163 = HEAP32[$4 + 1324 >> 2] | 0; //@line 30308
  $164 = $163 + 32 | 0; //@line 30309
  $166 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 30311
  $167 = $163 + 44 | 0; //@line 30312
  $168 = HEAP32[$167 >> 2] | 0; //@line 30313
  if (!$168) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 30316
   _mbed_assert_internal(15352, 15357, 1102); //@line 30317
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 474; //@line 30320
    $170 = $ReallocAsyncCtx17 + 4 | 0; //@line 30321
    HEAP32[$170 >> 2] = $2; //@line 30322
    $171 = $ReallocAsyncCtx17 + 8 | 0; //@line 30323
    HEAP32[$171 >> 2] = $4; //@line 30324
    $172 = $ReallocAsyncCtx17 + 12 | 0; //@line 30325
    HEAP32[$172 >> 2] = $6; //@line 30326
    $173 = $ReallocAsyncCtx17 + 16 | 0; //@line 30327
    HEAP32[$173 >> 2] = $8; //@line 30328
    $174 = $ReallocAsyncCtx17 + 20 | 0; //@line 30329
    HEAP32[$174 >> 2] = $10; //@line 30330
    $175 = $ReallocAsyncCtx17 + 24 | 0; //@line 30331
    HEAP32[$175 >> 2] = $12; //@line 30332
    $176 = $ReallocAsyncCtx17 + 28 | 0; //@line 30333
    HEAP32[$176 >> 2] = $14; //@line 30334
    $177 = $ReallocAsyncCtx17 + 32 | 0; //@line 30335
    HEAP32[$177 >> 2] = $16; //@line 30336
    $178 = $ReallocAsyncCtx17 + 36 | 0; //@line 30337
    HEAP32[$178 >> 2] = $18; //@line 30338
    $179 = $ReallocAsyncCtx17 + 40 | 0; //@line 30339
    HEAP32[$179 >> 2] = $20; //@line 30340
    $180 = $ReallocAsyncCtx17 + 44 | 0; //@line 30341
    HEAP32[$180 >> 2] = $22; //@line 30342
    $181 = $ReallocAsyncCtx17 + 48 | 0; //@line 30343
    HEAP32[$181 >> 2] = $164; //@line 30344
    $182 = $ReallocAsyncCtx17 + 52 | 0; //@line 30345
    HEAP32[$182 >> 2] = $166; //@line 30346
    $183 = $ReallocAsyncCtx17 + 56 | 0; //@line 30347
    HEAP32[$183 >> 2] = $167; //@line 30348
    sp = STACKTOP; //@line 30349
    return;
   }
   ___async_unwind = 0; //@line 30352
   HEAP32[$ReallocAsyncCtx17 >> 2] = 474; //@line 30353
   $170 = $ReallocAsyncCtx17 + 4 | 0; //@line 30354
   HEAP32[$170 >> 2] = $2; //@line 30355
   $171 = $ReallocAsyncCtx17 + 8 | 0; //@line 30356
   HEAP32[$171 >> 2] = $4; //@line 30357
   $172 = $ReallocAsyncCtx17 + 12 | 0; //@line 30358
   HEAP32[$172 >> 2] = $6; //@line 30359
   $173 = $ReallocAsyncCtx17 + 16 | 0; //@line 30360
   HEAP32[$173 >> 2] = $8; //@line 30361
   $174 = $ReallocAsyncCtx17 + 20 | 0; //@line 30362
   HEAP32[$174 >> 2] = $10; //@line 30363
   $175 = $ReallocAsyncCtx17 + 24 | 0; //@line 30364
   HEAP32[$175 >> 2] = $12; //@line 30365
   $176 = $ReallocAsyncCtx17 + 28 | 0; //@line 30366
   HEAP32[$176 >> 2] = $14; //@line 30367
   $177 = $ReallocAsyncCtx17 + 32 | 0; //@line 30368
   HEAP32[$177 >> 2] = $16; //@line 30369
   $178 = $ReallocAsyncCtx17 + 36 | 0; //@line 30370
   HEAP32[$178 >> 2] = $18; //@line 30371
   $179 = $ReallocAsyncCtx17 + 40 | 0; //@line 30372
   HEAP32[$179 >> 2] = $20; //@line 30373
   $180 = $ReallocAsyncCtx17 + 44 | 0; //@line 30374
   HEAP32[$180 >> 2] = $22; //@line 30375
   $181 = $ReallocAsyncCtx17 + 48 | 0; //@line 30376
   HEAP32[$181 >> 2] = $164; //@line 30377
   $182 = $ReallocAsyncCtx17 + 52 | 0; //@line 30378
   HEAP32[$182 >> 2] = $166; //@line 30379
   $183 = $ReallocAsyncCtx17 + 56 | 0; //@line 30380
   HEAP32[$183 >> 2] = $167; //@line 30381
   sp = STACKTOP; //@line 30382
   return;
  } else {
   $184 = HEAP32[$168 >> 2] | 0; //@line 30385
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 30386
   FUNCTION_TABLE_vii[$184 & 31]($164, $166); //@line 30387
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 30390
    $185 = $ReallocAsyncCtx3 + 4 | 0; //@line 30391
    HEAP32[$185 >> 2] = $4; //@line 30392
    $186 = $ReallocAsyncCtx3 + 8 | 0; //@line 30393
    HEAP32[$186 >> 2] = $6; //@line 30394
    $187 = $ReallocAsyncCtx3 + 12 | 0; //@line 30395
    HEAP32[$187 >> 2] = $2; //@line 30396
    $188 = $ReallocAsyncCtx3 + 16 | 0; //@line 30397
    HEAP32[$188 >> 2] = $16; //@line 30398
    $189 = $ReallocAsyncCtx3 + 20 | 0; //@line 30399
    HEAP32[$189 >> 2] = $18; //@line 30400
    $190 = $ReallocAsyncCtx3 + 24 | 0; //@line 30401
    HEAP32[$190 >> 2] = $20; //@line 30402
    $191 = $ReallocAsyncCtx3 + 28 | 0; //@line 30403
    HEAP32[$191 >> 2] = $22; //@line 30404
    $192 = $ReallocAsyncCtx3 + 32 | 0; //@line 30405
    HEAP32[$192 >> 2] = $8; //@line 30406
    $193 = $ReallocAsyncCtx3 + 36 | 0; //@line 30407
    HEAP32[$193 >> 2] = $10; //@line 30408
    $194 = $ReallocAsyncCtx3 + 40 | 0; //@line 30409
    HEAP32[$194 >> 2] = $12; //@line 30410
    $195 = $ReallocAsyncCtx3 + 44 | 0; //@line 30411
    HEAP32[$195 >> 2] = $14; //@line 30412
    sp = STACKTOP; //@line 30413
    return;
   }
   ___async_unwind = 0; //@line 30416
   HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 30417
   $185 = $ReallocAsyncCtx3 + 4 | 0; //@line 30418
   HEAP32[$185 >> 2] = $4; //@line 30419
   $186 = $ReallocAsyncCtx3 + 8 | 0; //@line 30420
   HEAP32[$186 >> 2] = $6; //@line 30421
   $187 = $ReallocAsyncCtx3 + 12 | 0; //@line 30422
   HEAP32[$187 >> 2] = $2; //@line 30423
   $188 = $ReallocAsyncCtx3 + 16 | 0; //@line 30424
   HEAP32[$188 >> 2] = $16; //@line 30425
   $189 = $ReallocAsyncCtx3 + 20 | 0; //@line 30426
   HEAP32[$189 >> 2] = $18; //@line 30427
   $190 = $ReallocAsyncCtx3 + 24 | 0; //@line 30428
   HEAP32[$190 >> 2] = $20; //@line 30429
   $191 = $ReallocAsyncCtx3 + 28 | 0; //@line 30430
   HEAP32[$191 >> 2] = $22; //@line 30431
   $192 = $ReallocAsyncCtx3 + 32 | 0; //@line 30432
   HEAP32[$192 >> 2] = $8; //@line 30433
   $193 = $ReallocAsyncCtx3 + 36 | 0; //@line 30434
   HEAP32[$193 >> 2] = $10; //@line 30435
   $194 = $ReallocAsyncCtx3 + 40 | 0; //@line 30436
   HEAP32[$194 >> 2] = $12; //@line 30437
   $195 = $ReallocAsyncCtx3 + 44 | 0; //@line 30438
   HEAP32[$195 >> 2] = $14; //@line 30439
   sp = STACKTOP; //@line 30440
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(13258, $16) | 0; //@line 30447
  _printf(13405, $20) | 0; //@line 30448
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 30449
  _putchar(10) | 0; //@line 30450
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 476; //@line 30453
   $198 = $ReallocAsyncCtx7 + 4 | 0; //@line 30454
   HEAP32[$198 >> 2] = $4; //@line 30455
   $199 = $ReallocAsyncCtx7 + 8 | 0; //@line 30456
   HEAP32[$199 >> 2] = $6; //@line 30457
   $200 = $ReallocAsyncCtx7 + 12 | 0; //@line 30458
   HEAP32[$200 >> 2] = $2; //@line 30459
   $201 = $ReallocAsyncCtx7 + 16 | 0; //@line 30460
   HEAP32[$201 >> 2] = $8; //@line 30461
   $202 = $ReallocAsyncCtx7 + 20 | 0; //@line 30462
   HEAP32[$202 >> 2] = $10; //@line 30463
   $203 = $ReallocAsyncCtx7 + 24 | 0; //@line 30464
   HEAP32[$203 >> 2] = $12; //@line 30465
   $204 = $ReallocAsyncCtx7 + 28 | 0; //@line 30466
   HEAP32[$204 >> 2] = $14; //@line 30467
   sp = STACKTOP; //@line 30468
   return;
  }
  ___async_unwind = 0; //@line 30471
  HEAP32[$ReallocAsyncCtx7 >> 2] = 476; //@line 30472
  $198 = $ReallocAsyncCtx7 + 4 | 0; //@line 30473
  HEAP32[$198 >> 2] = $4; //@line 30474
  $199 = $ReallocAsyncCtx7 + 8 | 0; //@line 30475
  HEAP32[$199 >> 2] = $6; //@line 30476
  $200 = $ReallocAsyncCtx7 + 12 | 0; //@line 30477
  HEAP32[$200 >> 2] = $2; //@line 30478
  $201 = $ReallocAsyncCtx7 + 16 | 0; //@line 30479
  HEAP32[$201 >> 2] = $8; //@line 30480
  $202 = $ReallocAsyncCtx7 + 20 | 0; //@line 30481
  HEAP32[$202 >> 2] = $10; //@line 30482
  $203 = $ReallocAsyncCtx7 + 24 | 0; //@line 30483
  HEAP32[$203 >> 2] = $12; //@line 30484
  $204 = $ReallocAsyncCtx7 + 28 | 0; //@line 30485
  HEAP32[$204 >> 2] = $14; //@line 30486
  sp = STACKTOP; //@line 30487
  return;
 }
 $205 = HEAP8[$2 >> 0] & -33; //@line 30491
 HEAP8[$2 >> 0] = $205; //@line 30492
 do {
  if (!($205 & 2)) {
   $244 = $205; //@line 30497
  } else {
   $216 = $205 & -3; //@line 30499
   HEAP8[$2 >> 0] = $216; //@line 30500
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(13258, $8) | 0; //@line 30505
    _printf(13285, $12) | 0; //@line 30506
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 30507
    _putchar(10) | 0; //@line 30508
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 30511
     $220 = $ReallocAsyncCtx6 + 4 | 0; //@line 30512
     HEAP32[$220 >> 2] = $4; //@line 30513
     $221 = $ReallocAsyncCtx6 + 8 | 0; //@line 30514
     HEAP32[$221 >> 2] = $6; //@line 30515
     $222 = $ReallocAsyncCtx6 + 12 | 0; //@line 30516
     HEAP32[$222 >> 2] = $6; //@line 30517
     $223 = $ReallocAsyncCtx6 + 16 | 0; //@line 30518
     HEAP32[$223 >> 2] = $2; //@line 30519
     sp = STACKTOP; //@line 30520
     return;
    }
    ___async_unwind = 0; //@line 30523
    HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 30524
    $220 = $ReallocAsyncCtx6 + 4 | 0; //@line 30525
    HEAP32[$220 >> 2] = $4; //@line 30526
    $221 = $ReallocAsyncCtx6 + 8 | 0; //@line 30527
    HEAP32[$221 >> 2] = $6; //@line 30528
    $222 = $ReallocAsyncCtx6 + 12 | 0; //@line 30529
    HEAP32[$222 >> 2] = $6; //@line 30530
    $223 = $ReallocAsyncCtx6 + 16 | 0; //@line 30531
    HEAP32[$223 >> 2] = $2; //@line 30532
    sp = STACKTOP; //@line 30533
    return;
   }
   if ($216 & 4) {
    $242 = $216 & -5; //@line 30539
    HEAP8[$2 >> 0] = $242; //@line 30540
    $244 = $242; //@line 30541
    break;
   }
   $227 = HEAP32[$4 + 1324 >> 2] | 0; //@line 30545
   $228 = $227 + 16 | 0; //@line 30546
   $230 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 30548
   $231 = $227 + 28 | 0; //@line 30549
   $232 = HEAP32[$231 >> 2] | 0; //@line 30550
   if (!$232) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 30553
    _mbed_assert_internal(15352, 15357, 1102); //@line 30554
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 30557
     $234 = $ReallocAsyncCtx15 + 4 | 0; //@line 30558
     HEAP32[$234 >> 2] = $231; //@line 30559
     $235 = $ReallocAsyncCtx15 + 8 | 0; //@line 30560
     HEAP32[$235 >> 2] = $228; //@line 30561
     $236 = $ReallocAsyncCtx15 + 12 | 0; //@line 30562
     HEAP32[$236 >> 2] = $230; //@line 30563
     $237 = $ReallocAsyncCtx15 + 16 | 0; //@line 30564
     HEAP32[$237 >> 2] = $2; //@line 30565
     $238 = $ReallocAsyncCtx15 + 20 | 0; //@line 30566
     HEAP32[$238 >> 2] = $4; //@line 30567
     sp = STACKTOP; //@line 30568
     return;
    }
    ___async_unwind = 0; //@line 30571
    HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 30572
    $234 = $ReallocAsyncCtx15 + 4 | 0; //@line 30573
    HEAP32[$234 >> 2] = $231; //@line 30574
    $235 = $ReallocAsyncCtx15 + 8 | 0; //@line 30575
    HEAP32[$235 >> 2] = $228; //@line 30576
    $236 = $ReallocAsyncCtx15 + 12 | 0; //@line 30577
    HEAP32[$236 >> 2] = $230; //@line 30578
    $237 = $ReallocAsyncCtx15 + 16 | 0; //@line 30579
    HEAP32[$237 >> 2] = $2; //@line 30580
    $238 = $ReallocAsyncCtx15 + 20 | 0; //@line 30581
    HEAP32[$238 >> 2] = $4; //@line 30582
    sp = STACKTOP; //@line 30583
    return;
   } else {
    $239 = HEAP32[$232 >> 2] | 0; //@line 30586
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 30587
    FUNCTION_TABLE_vii[$239 & 31]($228, $230); //@line 30588
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 30591
     $240 = $ReallocAsyncCtx4 + 4 | 0; //@line 30592
     HEAP32[$240 >> 2] = $2; //@line 30593
     $241 = $ReallocAsyncCtx4 + 8 | 0; //@line 30594
     HEAP32[$241 >> 2] = $4; //@line 30595
     sp = STACKTOP; //@line 30596
     return;
    }
    ___async_unwind = 0; //@line 30599
    HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 30600
    $240 = $ReallocAsyncCtx4 + 4 | 0; //@line 30601
    HEAP32[$240 >> 2] = $2; //@line 30602
    $241 = $ReallocAsyncCtx4 + 8 | 0; //@line 30603
    HEAP32[$241 >> 2] = $4; //@line 30604
    sp = STACKTOP; //@line 30605
    return;
   }
  }
 } while (0);
 if (!($244 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $244 & -17; //@line 30616
 $248 = HEAP32[$4 + 1324 >> 2] | 0; //@line 30618
 $249 = $248 + 48 | 0; //@line 30619
 $251 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 30621
 $252 = $248 + 60 | 0; //@line 30622
 $253 = HEAP32[$252 >> 2] | 0; //@line 30623
 if (!$253) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 30626
  _mbed_assert_internal(15352, 15357, 1102); //@line 30627
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 30630
   $255 = $ReallocAsyncCtx14 + 4 | 0; //@line 30631
   HEAP32[$255 >> 2] = $252; //@line 30632
   $256 = $ReallocAsyncCtx14 + 8 | 0; //@line 30633
   HEAP32[$256 >> 2] = $249; //@line 30634
   $257 = $ReallocAsyncCtx14 + 12 | 0; //@line 30635
   HEAP32[$257 >> 2] = $251; //@line 30636
   sp = STACKTOP; //@line 30637
   return;
  }
  ___async_unwind = 0; //@line 30640
  HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 30641
  $255 = $ReallocAsyncCtx14 + 4 | 0; //@line 30642
  HEAP32[$255 >> 2] = $252; //@line 30643
  $256 = $ReallocAsyncCtx14 + 8 | 0; //@line 30644
  HEAP32[$256 >> 2] = $249; //@line 30645
  $257 = $ReallocAsyncCtx14 + 12 | 0; //@line 30646
  HEAP32[$257 >> 2] = $251; //@line 30647
  sp = STACKTOP; //@line 30648
  return;
 } else {
  $258 = HEAP32[$253 >> 2] | 0; //@line 30651
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 30652
  FUNCTION_TABLE_vii[$258 & 31]($249, $251); //@line 30653
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 30656
   sp = STACKTOP; //@line 30657
   return;
  }
  ___async_unwind = 0; //@line 30660
  HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 30661
  sp = STACKTOP; //@line 30662
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0$be = 0, $$0$i = 0, $$0$i104 = 0, $$0$i108 = 0, $$0$i98 = 0, $$0116 = 0, $$095113 = 0, $$096$be = 0, $$096$lcssa = 0, $$096115 = 0, $$1$lcssa = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $147 = 0, $15 = 0, $151 = 0, $156 = 0, $157 = 0, $16 = 0, $160 = 0, $166 = 0, $169 = 0, $17 = 0, $174 = 0, $18 = 0, $182 = 0, $19 = 0, $20 = 0, $201 = 0, $21 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $286 = 0, $287 = 0, $29 = 0, $298 = 0, $299 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $336 = 0, $34 = 0, $342 = 0, $343 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $412 = 0, $413 = 0, $42 = 0, $423 = 0, $427 = 0, $43 = 0, $431 = 0, $434 = 0, $44 = 0, $440 = 0, $443 = 0, $444 = 0, $45 = 0, $453 = 0, $454 = 0, $46 = 0, $47 = 0, $49 = 0, $531 = 0, $553 = 0, $563 = 0, $564 = 0, $60 = 0, $61 = 0, $633 = 0, $643 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20946
 STACKTOP = STACKTOP + 32 | 0; //@line 20947
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 20947
 $8 = sp + 12 | 0; //@line 20948
 $9 = sp; //@line 20949
 $10 = sp + 26 | 0; //@line 20950
 $11 = sp + 25 | 0; //@line 20951
 $12 = sp + 24 | 0; //@line 20952
 $13 = $3 & 255; //@line 20953
 if (($2 & 255) >= ($3 & 255)) {
  $$096$lcssa = 0; //@line 20956
  STACKTOP = sp; //@line 20957
  return $$096$lcssa | 0; //@line 20957
 }
 $15 = $5 + 4 | 0; //@line 20959
 $16 = $5 + 12 | 0; //@line 20960
 $17 = $5 + 13 | 0; //@line 20961
 $18 = $8 + 4 | 0; //@line 20962
 $19 = $6 + 60 | 0; //@line 20963
 $20 = $8 + 6 | 0; //@line 20964
 $21 = $6 + 44 | 0; //@line 20965
 $22 = $8 + 5 | 0; //@line 20966
 $23 = $6 + 1 | 0; //@line 20967
 $24 = $8 + 7 | 0; //@line 20968
 $25 = $8 + 8 | 0; //@line 20969
 $26 = $6 + 32 | 0; //@line 20970
 $27 = $8 + 9 | 0; //@line 20971
 $28 = $0 + 3 | 0; //@line 20972
 $29 = $0 + 2 | 0; //@line 20973
 $30 = $6 + 56 | 0; //@line 20974
 $31 = $6 + 58 | 0; //@line 20975
 $32 = $8 + 1 | 0; //@line 20976
 $33 = $8 + 4 | 0; //@line 20977
 $34 = $6 + 40 | 0; //@line 20978
 $35 = $6 + 36 | 0; //@line 20979
 $36 = $6 + 33 | 0; //@line 20980
 $37 = $0 + 1 | 0; //@line 20981
 $38 = $8 + 4 | 0; //@line 20982
 $39 = $9 + 4 | 0; //@line 20983
 $40 = $9 + 8 | 0; //@line 20984
 $41 = $6 + 16 | 0; //@line 20985
 $42 = $6 + 20 | 0; //@line 20986
 $43 = $8 + 1 | 0; //@line 20987
 $44 = $8 + 2 | 0; //@line 20988
 $45 = $6 + 45 | 0; //@line 20989
 $46 = $6 + 48 | 0; //@line 20990
 $47 = $8 + 4 | 0; //@line 20991
 $$0116 = $2; //@line 20992
 $$096115 = 0; //@line 20992
 L4 : while (1) {
  $49 = $$0116 + 1 << 24 >> 24; //@line 20995
  switch (HEAP8[$1 + ($$0116 & 255) >> 0] | 0) {
  case 2:
   {
    HEAP32[$15 >> 2] = 0; //@line 21000
    HEAP8[$16 >> 0] = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 21005
    HEAP8[$17 >> 0] = HEAP8[$1 + ($$0116 + 2 & 255) >> 0] | 0; //@line 21010
    $$0$be = $$0116 + 3 << 24 >> 24; //@line 21011
    $$096$be = $$096115; //@line 21011
    break;
   }
  case 3:
   {
    HEAP8[$9 >> 0] = 0; //@line 21015
    HEAP8[$10 >> 0] = 0; //@line 21016
    HEAP8[$11 >> 0] = 0; //@line 21017
    HEAP8[$12 >> 0] = 0; //@line 21018
    $60 = $49 & 255; //@line 21019
    $61 = $60 + -1 | 0; //@line 21020
    HEAP32[$8 >> 2] = $1 + $61; //@line 21022
    HEAP8[$18 >> 0] = $13 - $61; //@line 21025
    HEAP8[$20 >> 0] = HEAP8[$19 >> 0] | 0; //@line 21027
    HEAP8[$22 >> 0] = HEAP8[$21 >> 0] | 0; //@line 21029
    HEAP8[$24 >> 0] = HEAP8[$23 >> 0] | 0; //@line 21031
    HEAP8[$25 >> 0] = HEAP8[$6 >> 0] | 0; //@line 21033
    HEAP8[$27 >> 0] = HEAP8[$26 >> 0] | 0; //@line 21035
    $72 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 21038
    $AsyncCtx = _emscripten_alloc_async_context(272, sp) | 0; //@line 21039
    $73 = FUNCTION_TABLE_iiiiiii[$72 & 3]($7, $8, $9, $10, $11, $12) | 0; //@line 21040
    if (___async) {
     label = 6; //@line 21043
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 21046
    if (($73 & 7) == 7) {
     HEAP8[$23 >> 0] = HEAP8[$9 >> 0] | 0; //@line 21051
     HEAP8[$6 >> 0] = HEAP8[$10 >> 0] | 0; //@line 21053
     HEAP8[$26 >> 0] = HEAP8[$11 >> 0] | 0; //@line 21055
    }
    $147 = HEAP8[$12 >> 0] | 0; //@line 21057
    if (($147 & 255) > 4) {
     $div = ($147 & 255) / 5 | 0; //@line 21060
     $151 = (-128 - (HEAP8[$28 >> 0] | 0) & 255) + -1 | 0; //@line 21065
     $$095113 = 0; //@line 21066
     $157 = HEAP8[$29 >> 0] | 0; //@line 21066
     while (1) {
      $156 = $157 & 255; //@line 21068
      if (($151 | 0) > ($156 | 0)) {
       $160 = $157 + 2 << 24 >> 24; //@line 21072
       HEAP8[$0 + 4 + $156 >> 0] = 3; //@line 21076
       HEAP8[$29 >> 0] = $160; //@line 21077
       HEAP8[($157 + 1 & 255) + ($0 + 4) >> 0] = $73; //@line 21078
       HEAP8[$0 >> 0] = 1; //@line 21079
       $$0$i = 0; //@line 21080
       $643 = $160; //@line 21080
      } else {
       $$0$i = -1e3; //@line 21082
       $643 = $157; //@line 21082
      }
      $$095113 = $$095113 + 1 << 24 >> 24; //@line 21084
      if (($$095113 & 255) >= ($div & 255)) {
       $$1$lcssa = $$0$i; //@line 21089
       break;
      } else {
       $157 = $643; //@line 21087
      }
     }
    } else {
     $$1$lcssa = $$096115; //@line 21094
    }
    $$0$be = $60 + 255 + ($147 & 255) & 255; //@line 21100
    $$096$be = $$1$lcssa; //@line 21100
    break;
   }
  case 4:
   {
    $166 = $$0116 + 2 << 24 >> 24; //@line 21104
    $169 = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 21107
    HEAP8[$30 >> 0] = $169; //@line 21108
    HEAP16[$31 >> 1] = 1 << ($169 & 255); //@line 21112
    $174 = HEAP8[$29 >> 0] | 0; //@line 21114
    if (($174 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
     HEAP8[$29 >> 0] = $174 + 1 << 24 >> 24; //@line 21121
     HEAP8[($174 & 255) + ($0 + 4) >> 0] = 4; //@line 21122
     HEAP8[$0 >> 0] = 1; //@line 21123
     $$0$be = $166; //@line 21124
     $$096$be = 0; //@line 21124
    } else {
     $$0$be = $166; //@line 21126
     $$096$be = -1e3; //@line 21126
    }
    break;
   }
  case 5:
   {
    $182 = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 21133
    HEAP8[$32 >> 0] = ($182 & 255) >>> 4 & 7; //@line 21138
    HEAP8[$8 >> 0] = $182 & 15; //@line 21140
    $201 = $$0116 + 5 << 24 >> 24; //@line 21154
    HEAP32[$33 >> 2] = (HEAPU8[$1 + ($$0116 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0116 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0116 + 2 & 255) >> 0])) * 100; //@line 21162
    $211 = HEAP32[(HEAP32[$7 >> 2] | 0) + 40 >> 2] | 0; //@line 21165
    $AsyncCtx3 = _emscripten_alloc_async_context(268, sp) | 0; //@line 21166
    $212 = FUNCTION_TABLE_iii[$211 & 31]($7, $8) | 0; //@line 21167
    if (___async) {
     label = 18; //@line 21170
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 21173
    if (($212 & 7) == 7) {
     HEAP8[$34 >> 0] = HEAP8[$8 >> 0] | 0; //@line 21178
     HEAP32[$35 >> 2] = HEAP32[$33 >> 2]; //@line 21180
     HEAP8[$36 >> 0] = HEAP8[$32 >> 0] | 0; //@line 21182
    }
    $286 = HEAP8[$29 >> 0] | 0; //@line 21185
    $287 = $286 & 255; //@line 21186
    if (((-128 - (HEAP8[$28 >> 0] | 0) & 255) + -1 | 0) > ($287 | 0)) {
     HEAP8[$0 + 4 + $287 >> 0] = 5; //@line 21194
     HEAP8[$29 >> 0] = $286 + 2 << 24 >> 24; //@line 21196
     HEAP8[($286 + 1 & 255) + ($0 + 4) >> 0] = $212; //@line 21199
     HEAP8[$37 >> 0] = 1; //@line 21200
     HEAP8[$0 >> 0] = 1; //@line 21201
     $$0$i104 = 0; //@line 21202
    } else {
     $$0$i104 = -1e3; //@line 21204
    }
    $$0$be = $201; //@line 21206
    $$096$be = $$0$i104; //@line 21206
    break;
   }
  case 6:
   {
    $298 = HEAP8[$29 >> 0] | 0; //@line 21211
    $299 = $298 & 255; //@line 21212
    if (((-128 - (HEAP8[$28 >> 0] | 0) & 255) + -2 | 0) > ($299 | 0)) {
     HEAP8[$0 + 4 + $299 >> 0] = 6; //@line 21220
     HEAP8[($298 + 1 & 255) + ($0 + 4) >> 0] = -1; //@line 21224
     HEAP8[$29 >> 0] = $298 + 3 << 24 >> 24; //@line 21226
     HEAP8[($298 + 2 & 255) + ($0 + 4) >> 0] = $4; //@line 21229
     HEAP8[$0 >> 0] = 1; //@line 21230
     $$0$be = $49; //@line 21231
     $$096$be = 0; //@line 21231
    } else {
     $$0$be = $49; //@line 21233
     $$096$be = -1e3; //@line 21233
    }
    break;
   }
  case 7:
   {
    HEAP8[$38 >> 0] = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 21242
    HEAP32[$8 >> 2] = $9; //@line 21243
    HEAP32[$9 >> 2] = (HEAPU8[$1 + ($$0116 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0116 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0116 + 2 & 255) >> 0])) * 100; //@line 21264
    HEAP32[$39 >> 2] = 0; //@line 21265
    $336 = $$0116 + 6 << 24 >> 24; //@line 21266
    HEAP8[$40 >> 0] = HEAP8[$1 + ($$0116 + 5 & 255) >> 0] | 0; //@line 21270
    $342 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 21273
    $AsyncCtx7 = _emscripten_alloc_async_context(268, sp) | 0; //@line 21274
    $343 = FUNCTION_TABLE_iii[$342 & 31]($7, $8) | 0; //@line 21275
    if (___async) {
     label = 27; //@line 21278
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 21281
    $412 = HEAP8[$29 >> 0] | 0; //@line 21283
    $413 = $412 & 255; //@line 21284
    if (((-128 - (HEAP8[$28 >> 0] | 0) & 255) + -1 | 0) > ($413 | 0)) {
     HEAP8[$0 + 4 + $413 >> 0] = 7; //@line 21295
     HEAP8[$29 >> 0] = $412 + 2 << 24 >> 24; //@line 21296
     HEAP8[($412 + 1 & 255) + ($0 + 4) >> 0] = $343; //@line 21297
     HEAP8[$0 >> 0] = 1; //@line 21298
     $$0$i108 = 0; //@line 21299
    } else {
     $$0$i108 = -1e3; //@line 21301
    }
    $$0$be = $336; //@line 21303
    $$096$be = $$0$i108; //@line 21303
    break;
   }
  case 8:
   {
    $423 = $$0116 + 2 << 24 >> 24; //@line 21307
    $427 = HEAP8[$1 + ($49 & 255) >> 0] & 15; //@line 21311
    $431 = ($427 + ($427 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 21316
    HEAP32[$41 >> 2] = $431; //@line 21317
    HEAP32[$42 >> 2] = $431 + 1e3; //@line 21319
    $434 = HEAP8[$29 >> 0] | 0; //@line 21321
    if (($434 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
     HEAP8[$29 >> 0] = $434 + 1 << 24 >> 24; //@line 21328
     HEAP8[($434 & 255) + ($0 + 4) >> 0] = 8; //@line 21329
     HEAP8[$37 >> 0] = 1; //@line 21330
     HEAP8[$0 >> 0] = 1; //@line 21331
     $$0$be = $423; //@line 21332
     $$096$be = 0; //@line 21332
    } else {
     $$0$be = $423; //@line 21334
     $$096$be = -1e3; //@line 21334
    }
    break;
   }
  case 9:
   {
    $440 = $$0116 + 2 << 24 >> 24; //@line 21339
    $443 = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 21342
    HEAP8[$8 >> 0] = 0; //@line 21343
    $444 = $443 & 255; //@line 21344
    HEAP8[$43 >> 0] = $444 >>> 5 & 1; //@line 21348
    if ($444 & 16 | 0) {
     HEAP8[$8 >> 0] = 1; //@line 21352
    }
    HEAP8[$44 >> 0] = $444 & 15; //@line 21356
    $453 = HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] | 0; //@line 21359
    $AsyncCtx11 = _emscripten_alloc_async_context(272, sp) | 0; //@line 21360
    $454 = FUNCTION_TABLE_iii[$453 & 31]($7, $8) | 0; //@line 21361
    if (___async) {
     label = 36; //@line 21364
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 21367
    if ($454) {
     HEAP8[$21 >> 0] = HEAP8[$8 >> 0] | 0; //@line 21370
     HEAP8[$45 >> 0] = HEAP8[$43 >> 0] | 0; //@line 21372
     HEAPF32[$46 >> 2] = +(HEAPU8[13863 + (HEAPU8[$44 >> 0] | 0) >> 0] | 0); //@line 21378
     $531 = HEAP8[$29 >> 0] | 0; //@line 21380
     if (($531 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
      HEAP8[$29 >> 0] = $531 + 1 << 24 >> 24; //@line 21387
      HEAP8[($531 & 255) + ($0 + 4) >> 0] = 9; //@line 21388
      HEAP8[$0 >> 0] = 1; //@line 21389
      $$2 = 0; //@line 21390
     } else {
      $$2 = -1e3; //@line 21392
     }
    } else {
     $$2 = $$096115; //@line 21395
    }
    $$0$be = $440; //@line 21397
    $$096$be = $$2; //@line 21397
    break;
   }
  case 10:
   {
    HEAP8[$8 >> 0] = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 21405
    $553 = $$0116 + 5 << 24 >> 24; //@line 21418
    HEAP32[$47 >> 2] = (HEAPU8[$1 + ($$0116 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0116 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0116 + 2 & 255) >> 0])) * 100; //@line 21426
    $563 = HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] | 0; //@line 21429
    $AsyncCtx15 = _emscripten_alloc_async_context(268, sp) | 0; //@line 21430
    $564 = FUNCTION_TABLE_iii[$563 & 31]($7, $8) | 0; //@line 21431
    if (___async) {
     label = 42; //@line 21434
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 21437
    $633 = HEAP8[$29 >> 0] | 0; //@line 21439
    if (($633 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
     HEAP8[($633 & 255) + ($0 + 4) >> 0] = 10; //@line 21446
     HEAP8[$29 >> 0] = $633 + 2 << 24 >> 24; //@line 21448
     HEAP8[($633 + 1 & 255) + ($0 + 4) >> 0] = $564; //@line 21451
     HEAP8[$37 >> 0] = 1; //@line 21452
     HEAP8[$0 >> 0] = 1; //@line 21453
     $$0$i98 = 0; //@line 21454
    } else {
     $$0$i98 = -1e3; //@line 21456
    }
    $$0$be = $553; //@line 21458
    $$096$be = $$0$i98; //@line 21458
    break;
   }
  default:
   {
    $$0$be = $49; //@line 21462
    $$096$be = -1013; //@line 21462
   }
  }
  if (($$0$be & 255) < ($3 & 255)) {
   $$0116 = $$0$be; //@line 21467
   $$096115 = $$096$be; //@line 21467
  } else {
   $$096$lcssa = $$096$be; //@line 21469
   label = 47; //@line 21470
   break;
  }
 }
 if ((label | 0) == 6) {
  HEAP32[$AsyncCtx >> 2] = 595; //@line 21475
  HEAP32[$AsyncCtx + 4 >> 2] = $27; //@line 21477
  HEAP8[$AsyncCtx + 8 >> 0] = $4; //@line 21479
  HEAP32[$AsyncCtx + 12 >> 2] = $15; //@line 21481
  HEAP8[$AsyncCtx + 16 >> 0] = $2; //@line 21483
  HEAP8[$AsyncCtx + 17 >> 0] = $3; //@line 21485
  HEAP32[$AsyncCtx + 20 >> 2] = $8; //@line 21487
  HEAP32[$AsyncCtx + 24 >> 2] = $7; //@line 21489
  HEAP32[$AsyncCtx + 28 >> 2] = $9; //@line 21491
  HEAP32[$AsyncCtx + 32 >> 2] = $16; //@line 21493
  HEAP32[$AsyncCtx + 36 >> 2] = $46; //@line 21495
  HEAP32[$AsyncCtx + 40 >> 2] = $8; //@line 21497
  HEAP32[$AsyncCtx + 44 >> 2] = $7; //@line 21499
  HEAP32[$AsyncCtx + 48 >> 2] = $45; //@line 21501
  HEAP32[$AsyncCtx + 52 >> 2] = $37; //@line 21503
  HEAP32[$AsyncCtx + 56 >> 2] = $25; //@line 21505
  HEAP32[$AsyncCtx + 60 >> 2] = $26; //@line 21507
  HEAP32[$AsyncCtx + 64 >> 2] = $7; //@line 21509
  HEAP32[$AsyncCtx + 68 >> 2] = $36; //@line 21511
  HEAP32[$AsyncCtx + 72 >> 2] = $24; //@line 21513
  HEAP32[$AsyncCtx + 76 >> 2] = $44; //@line 21515
  HEAP32[$AsyncCtx + 80 >> 2] = $13; //@line 21517
  HEAP32[$AsyncCtx + 84 >> 2] = $35; //@line 21519
  HEAP32[$AsyncCtx + 88 >> 2] = $34; //@line 21521
  HEAP32[$AsyncCtx + 92 >> 2] = $43; //@line 21523
  HEAP32[$AsyncCtx + 96 >> 2] = $6; //@line 21525
  HEAP32[$AsyncCtx + 100 >> 2] = $7; //@line 21527
  HEAP32[$AsyncCtx + 104 >> 2] = $8; //@line 21529
  HEAP32[$AsyncCtx + 108 >> 2] = $8; //@line 21531
  HEAP32[$AsyncCtx + 112 >> 2] = $33; //@line 21533
  HEAP32[$AsyncCtx + 116 >> 2] = $8; //@line 21535
  HEAP32[$AsyncCtx + 120 >> 2] = $23; //@line 21537
  HEAP32[$AsyncCtx + 124 >> 2] = $9; //@line 21539
  HEAP32[$AsyncCtx + 128 >> 2] = $60; //@line 21541
  HEAP32[$AsyncCtx + 132 >> 2] = $42; //@line 21543
  HEAP32[$AsyncCtx + 136 >> 2] = $21; //@line 21545
  HEAP32[$AsyncCtx + 140 >> 2] = $12; //@line 21547
  HEAP32[$AsyncCtx + 144 >> 2] = $8; //@line 21549
  HEAP32[$AsyncCtx + 148 >> 2] = $10; //@line 21551
  HEAP32[$AsyncCtx + 152 >> 2] = $22; //@line 21553
  HEAP32[$AsyncCtx + 156 >> 2] = $41; //@line 21555
  HEAP32[$AsyncCtx + 160 >> 2] = $11; //@line 21557
  HEAP32[$AsyncCtx + 164 >> 2] = $32; //@line 21559
  HEAP32[$AsyncCtx + 168 >> 2] = $31; //@line 21561
  HEAP32[$AsyncCtx + 172 >> 2] = $40; //@line 21563
  HEAP32[$AsyncCtx + 176 >> 2] = $8; //@line 21565
  HEAP32[$AsyncCtx + 180 >> 2] = $7; //@line 21567
  HEAP32[$AsyncCtx + 184 >> 2] = $19; //@line 21569
  HEAP32[$AsyncCtx + 188 >> 2] = $8; //@line 21571
  HEAP32[$AsyncCtx + 192 >> 2] = $20; //@line 21573
  HEAP32[$AsyncCtx + 196 >> 2] = $8; //@line 21575
  HEAP32[$AsyncCtx + 200 >> 2] = $$096115; //@line 21577
  HEAP32[$AsyncCtx + 204 >> 2] = $0; //@line 21579
  HEAP32[$AsyncCtx + 208 >> 2] = $8; //@line 21581
  HEAP32[$AsyncCtx + 212 >> 2] = $39; //@line 21583
  HEAP32[$AsyncCtx + 216 >> 2] = $30; //@line 21585
  HEAP32[$AsyncCtx + 220 >> 2] = $18; //@line 21587
  HEAP32[$AsyncCtx + 224 >> 2] = $9; //@line 21589
  HEAP32[$AsyncCtx + 228 >> 2] = $9; //@line 21591
  HEAP32[$AsyncCtx + 232 >> 2] = $8; //@line 21593
  HEAP32[$AsyncCtx + 236 >> 2] = $28; //@line 21595
  HEAP32[$AsyncCtx + 240 >> 2] = $17; //@line 21597
  HEAP32[$AsyncCtx + 244 >> 2] = $7; //@line 21599
  HEAP32[$AsyncCtx + 248 >> 2] = $0; //@line 21601
  HEAP32[$AsyncCtx + 252 >> 2] = $8; //@line 21603
  HEAP32[$AsyncCtx + 256 >> 2] = $29; //@line 21605
  HEAP32[$AsyncCtx + 260 >> 2] = $38; //@line 21607
  HEAP32[$AsyncCtx + 264 >> 2] = $47; //@line 21609
  HEAP32[$AsyncCtx + 268 >> 2] = $1; //@line 21611
  sp = STACKTOP; //@line 21612
  STACKTOP = sp; //@line 21613
  return 0; //@line 21613
 } else if ((label | 0) == 18) {
  HEAP32[$AsyncCtx3 >> 2] = 596; //@line 21616
  HEAP32[$AsyncCtx3 + 4 >> 2] = $27; //@line 21618
  HEAP8[$AsyncCtx3 + 8 >> 0] = $4; //@line 21620
  HEAP32[$AsyncCtx3 + 12 >> 2] = $15; //@line 21622
  HEAP8[$AsyncCtx3 + 16 >> 0] = $2; //@line 21624
  HEAP8[$AsyncCtx3 + 17 >> 0] = $3; //@line 21626
  HEAP32[$AsyncCtx3 + 20 >> 2] = $8; //@line 21628
  HEAP32[$AsyncCtx3 + 24 >> 2] = $7; //@line 21630
  HEAP32[$AsyncCtx3 + 28 >> 2] = $9; //@line 21632
  HEAP32[$AsyncCtx3 + 32 >> 2] = $16; //@line 21634
  HEAP32[$AsyncCtx3 + 36 >> 2] = $46; //@line 21636
  HEAP32[$AsyncCtx3 + 40 >> 2] = $8; //@line 21638
  HEAP32[$AsyncCtx3 + 44 >> 2] = $7; //@line 21640
  HEAP32[$AsyncCtx3 + 48 >> 2] = $45; //@line 21642
  HEAP32[$AsyncCtx3 + 52 >> 2] = $37; //@line 21644
  HEAP32[$AsyncCtx3 + 56 >> 2] = $25; //@line 21646
  HEAP32[$AsyncCtx3 + 60 >> 2] = $26; //@line 21648
  HEAP32[$AsyncCtx3 + 64 >> 2] = $7; //@line 21650
  HEAP32[$AsyncCtx3 + 68 >> 2] = $36; //@line 21652
  HEAP32[$AsyncCtx3 + 72 >> 2] = $24; //@line 21654
  HEAP32[$AsyncCtx3 + 76 >> 2] = $44; //@line 21656
  HEAP32[$AsyncCtx3 + 80 >> 2] = $13; //@line 21658
  HEAP32[$AsyncCtx3 + 84 >> 2] = $35; //@line 21660
  HEAP32[$AsyncCtx3 + 88 >> 2] = $34; //@line 21662
  HEAP32[$AsyncCtx3 + 92 >> 2] = $43; //@line 21664
  HEAP32[$AsyncCtx3 + 96 >> 2] = $6; //@line 21666
  HEAP8[$AsyncCtx3 + 100 >> 0] = $201; //@line 21668
  HEAP32[$AsyncCtx3 + 104 >> 2] = $7; //@line 21670
  HEAP32[$AsyncCtx3 + 108 >> 2] = $8; //@line 21672
  HEAP32[$AsyncCtx3 + 112 >> 2] = $8; //@line 21674
  HEAP32[$AsyncCtx3 + 116 >> 2] = $33; //@line 21676
  HEAP32[$AsyncCtx3 + 120 >> 2] = $8; //@line 21678
  HEAP32[$AsyncCtx3 + 124 >> 2] = $23; //@line 21680
  HEAP32[$AsyncCtx3 + 128 >> 2] = $9; //@line 21682
  HEAP32[$AsyncCtx3 + 132 >> 2] = $42; //@line 21684
  HEAP32[$AsyncCtx3 + 136 >> 2] = $21; //@line 21686
  HEAP32[$AsyncCtx3 + 140 >> 2] = $12; //@line 21688
  HEAP32[$AsyncCtx3 + 144 >> 2] = $8; //@line 21690
  HEAP32[$AsyncCtx3 + 148 >> 2] = $10; //@line 21692
  HEAP32[$AsyncCtx3 + 152 >> 2] = $22; //@line 21694
  HEAP32[$AsyncCtx3 + 156 >> 2] = $41; //@line 21696
  HEAP32[$AsyncCtx3 + 160 >> 2] = $11; //@line 21698
  HEAP32[$AsyncCtx3 + 164 >> 2] = $32; //@line 21700
  HEAP32[$AsyncCtx3 + 168 >> 2] = $31; //@line 21702
  HEAP32[$AsyncCtx3 + 172 >> 2] = $40; //@line 21704
  HEAP32[$AsyncCtx3 + 176 >> 2] = $8; //@line 21706
  HEAP32[$AsyncCtx3 + 180 >> 2] = $7; //@line 21708
  HEAP32[$AsyncCtx3 + 184 >> 2] = $19; //@line 21710
  HEAP32[$AsyncCtx3 + 188 >> 2] = $8; //@line 21712
  HEAP32[$AsyncCtx3 + 192 >> 2] = $20; //@line 21714
  HEAP32[$AsyncCtx3 + 196 >> 2] = $8; //@line 21716
  HEAP32[$AsyncCtx3 + 200 >> 2] = $0; //@line 21718
  HEAP32[$AsyncCtx3 + 204 >> 2] = $8; //@line 21720
  HEAP32[$AsyncCtx3 + 208 >> 2] = $39; //@line 21722
  HEAP32[$AsyncCtx3 + 212 >> 2] = $30; //@line 21724
  HEAP32[$AsyncCtx3 + 216 >> 2] = $18; //@line 21726
  HEAP32[$AsyncCtx3 + 220 >> 2] = $9; //@line 21728
  HEAP32[$AsyncCtx3 + 224 >> 2] = $9; //@line 21730
  HEAP32[$AsyncCtx3 + 228 >> 2] = $8; //@line 21732
  HEAP32[$AsyncCtx3 + 232 >> 2] = $28; //@line 21734
  HEAP32[$AsyncCtx3 + 236 >> 2] = $17; //@line 21736
  HEAP32[$AsyncCtx3 + 240 >> 2] = $7; //@line 21738
  HEAP32[$AsyncCtx3 + 244 >> 2] = $0; //@line 21740
  HEAP32[$AsyncCtx3 + 248 >> 2] = $8; //@line 21742
  HEAP32[$AsyncCtx3 + 252 >> 2] = $29; //@line 21744
  HEAP32[$AsyncCtx3 + 256 >> 2] = $38; //@line 21746
  HEAP32[$AsyncCtx3 + 260 >> 2] = $47; //@line 21748
  HEAP32[$AsyncCtx3 + 264 >> 2] = $1; //@line 21750
  sp = STACKTOP; //@line 21751
  STACKTOP = sp; //@line 21752
  return 0; //@line 21752
 } else if ((label | 0) == 27) {
  HEAP32[$AsyncCtx7 >> 2] = 597; //@line 21755
  HEAP32[$AsyncCtx7 + 4 >> 2] = $27; //@line 21757
  HEAP8[$AsyncCtx7 + 8 >> 0] = $4; //@line 21759
  HEAP32[$AsyncCtx7 + 12 >> 2] = $15; //@line 21761
  HEAP8[$AsyncCtx7 + 16 >> 0] = $2; //@line 21763
  HEAP8[$AsyncCtx7 + 17 >> 0] = $3; //@line 21765
  HEAP32[$AsyncCtx7 + 20 >> 2] = $8; //@line 21767
  HEAP32[$AsyncCtx7 + 24 >> 2] = $7; //@line 21769
  HEAP32[$AsyncCtx7 + 28 >> 2] = $9; //@line 21771
  HEAP32[$AsyncCtx7 + 32 >> 2] = $16; //@line 21773
  HEAP32[$AsyncCtx7 + 36 >> 2] = $46; //@line 21775
  HEAP32[$AsyncCtx7 + 40 >> 2] = $8; //@line 21777
  HEAP32[$AsyncCtx7 + 44 >> 2] = $7; //@line 21779
  HEAP32[$AsyncCtx7 + 48 >> 2] = $45; //@line 21781
  HEAP32[$AsyncCtx7 + 52 >> 2] = $37; //@line 21783
  HEAP32[$AsyncCtx7 + 56 >> 2] = $25; //@line 21785
  HEAP32[$AsyncCtx7 + 60 >> 2] = $26; //@line 21787
  HEAP32[$AsyncCtx7 + 64 >> 2] = $7; //@line 21789
  HEAP32[$AsyncCtx7 + 68 >> 2] = $36; //@line 21791
  HEAP32[$AsyncCtx7 + 72 >> 2] = $24; //@line 21793
  HEAP32[$AsyncCtx7 + 76 >> 2] = $44; //@line 21795
  HEAP32[$AsyncCtx7 + 80 >> 2] = $13; //@line 21797
  HEAP32[$AsyncCtx7 + 84 >> 2] = $35; //@line 21799
  HEAP32[$AsyncCtx7 + 88 >> 2] = $34; //@line 21801
  HEAP32[$AsyncCtx7 + 92 >> 2] = $43; //@line 21803
  HEAP32[$AsyncCtx7 + 96 >> 2] = $6; //@line 21805
  HEAP32[$AsyncCtx7 + 100 >> 2] = $7; //@line 21807
  HEAP32[$AsyncCtx7 + 104 >> 2] = $8; //@line 21809
  HEAP8[$AsyncCtx7 + 108 >> 0] = $336; //@line 21811
  HEAP32[$AsyncCtx7 + 112 >> 2] = $8; //@line 21813
  HEAP32[$AsyncCtx7 + 116 >> 2] = $33; //@line 21815
  HEAP32[$AsyncCtx7 + 120 >> 2] = $8; //@line 21817
  HEAP32[$AsyncCtx7 + 124 >> 2] = $23; //@line 21819
  HEAP32[$AsyncCtx7 + 128 >> 2] = $9; //@line 21821
  HEAP32[$AsyncCtx7 + 132 >> 2] = $42; //@line 21823
  HEAP32[$AsyncCtx7 + 136 >> 2] = $21; //@line 21825
  HEAP32[$AsyncCtx7 + 140 >> 2] = $12; //@line 21827
  HEAP32[$AsyncCtx7 + 144 >> 2] = $8; //@line 21829
  HEAP32[$AsyncCtx7 + 148 >> 2] = $10; //@line 21831
  HEAP32[$AsyncCtx7 + 152 >> 2] = $22; //@line 21833
  HEAP32[$AsyncCtx7 + 156 >> 2] = $41; //@line 21835
  HEAP32[$AsyncCtx7 + 160 >> 2] = $11; //@line 21837
  HEAP32[$AsyncCtx7 + 164 >> 2] = $32; //@line 21839
  HEAP32[$AsyncCtx7 + 168 >> 2] = $31; //@line 21841
  HEAP32[$AsyncCtx7 + 172 >> 2] = $40; //@line 21843
  HEAP32[$AsyncCtx7 + 176 >> 2] = $8; //@line 21845
  HEAP32[$AsyncCtx7 + 180 >> 2] = $7; //@line 21847
  HEAP32[$AsyncCtx7 + 184 >> 2] = $19; //@line 21849
  HEAP32[$AsyncCtx7 + 188 >> 2] = $8; //@line 21851
  HEAP32[$AsyncCtx7 + 192 >> 2] = $20; //@line 21853
  HEAP32[$AsyncCtx7 + 196 >> 2] = $8; //@line 21855
  HEAP32[$AsyncCtx7 + 200 >> 2] = $0; //@line 21857
  HEAP32[$AsyncCtx7 + 204 >> 2] = $8; //@line 21859
  HEAP32[$AsyncCtx7 + 208 >> 2] = $39; //@line 21861
  HEAP32[$AsyncCtx7 + 212 >> 2] = $30; //@line 21863
  HEAP32[$AsyncCtx7 + 216 >> 2] = $18; //@line 21865
  HEAP32[$AsyncCtx7 + 220 >> 2] = $9; //@line 21867
  HEAP32[$AsyncCtx7 + 224 >> 2] = $9; //@line 21869
  HEAP32[$AsyncCtx7 + 228 >> 2] = $8; //@line 21871
  HEAP32[$AsyncCtx7 + 232 >> 2] = $28; //@line 21873
  HEAP32[$AsyncCtx7 + 236 >> 2] = $17; //@line 21875
  HEAP32[$AsyncCtx7 + 240 >> 2] = $7; //@line 21877
  HEAP32[$AsyncCtx7 + 244 >> 2] = $0; //@line 21879
  HEAP32[$AsyncCtx7 + 248 >> 2] = $8; //@line 21881
  HEAP32[$AsyncCtx7 + 252 >> 2] = $29; //@line 21883
  HEAP32[$AsyncCtx7 + 256 >> 2] = $38; //@line 21885
  HEAP32[$AsyncCtx7 + 260 >> 2] = $47; //@line 21887
  HEAP32[$AsyncCtx7 + 264 >> 2] = $1; //@line 21889
  sp = STACKTOP; //@line 21890
  STACKTOP = sp; //@line 21891
  return 0; //@line 21891
 } else if ((label | 0) == 36) {
  HEAP32[$AsyncCtx11 >> 2] = 598; //@line 21894
  HEAP32[$AsyncCtx11 + 4 >> 2] = $27; //@line 21896
  HEAP8[$AsyncCtx11 + 8 >> 0] = $4; //@line 21898
  HEAP32[$AsyncCtx11 + 12 >> 2] = $15; //@line 21900
  HEAP8[$AsyncCtx11 + 16 >> 0] = $2; //@line 21902
  HEAP8[$AsyncCtx11 + 17 >> 0] = $3; //@line 21904
  HEAP32[$AsyncCtx11 + 20 >> 2] = $8; //@line 21906
  HEAP32[$AsyncCtx11 + 24 >> 2] = $7; //@line 21908
  HEAP32[$AsyncCtx11 + 28 >> 2] = $9; //@line 21910
  HEAP32[$AsyncCtx11 + 32 >> 2] = $16; //@line 21912
  HEAP32[$AsyncCtx11 + 36 >> 2] = $46; //@line 21914
  HEAP32[$AsyncCtx11 + 40 >> 2] = $8; //@line 21916
  HEAP32[$AsyncCtx11 + 44 >> 2] = $7; //@line 21918
  HEAP32[$AsyncCtx11 + 48 >> 2] = $45; //@line 21920
  HEAP32[$AsyncCtx11 + 52 >> 2] = $37; //@line 21922
  HEAP32[$AsyncCtx11 + 56 >> 2] = $25; //@line 21924
  HEAP8[$AsyncCtx11 + 60 >> 0] = $440; //@line 21926
  HEAP32[$AsyncCtx11 + 64 >> 2] = $26; //@line 21928
  HEAP32[$AsyncCtx11 + 68 >> 2] = $7; //@line 21930
  HEAP32[$AsyncCtx11 + 72 >> 2] = $36; //@line 21932
  HEAP32[$AsyncCtx11 + 76 >> 2] = $24; //@line 21934
  HEAP32[$AsyncCtx11 + 80 >> 2] = $44; //@line 21936
  HEAP32[$AsyncCtx11 + 84 >> 2] = $13; //@line 21938
  HEAP32[$AsyncCtx11 + 88 >> 2] = $35; //@line 21940
  HEAP32[$AsyncCtx11 + 92 >> 2] = $34; //@line 21942
  HEAP32[$AsyncCtx11 + 96 >> 2] = $43; //@line 21944
  HEAP32[$AsyncCtx11 + 100 >> 2] = $6; //@line 21946
  HEAP32[$AsyncCtx11 + 104 >> 2] = $7; //@line 21948
  HEAP32[$AsyncCtx11 + 108 >> 2] = $8; //@line 21950
  HEAP32[$AsyncCtx11 + 112 >> 2] = $8; //@line 21952
  HEAP32[$AsyncCtx11 + 116 >> 2] = $33; //@line 21954
  HEAP32[$AsyncCtx11 + 120 >> 2] = $8; //@line 21956
  HEAP32[$AsyncCtx11 + 124 >> 2] = $23; //@line 21958
  HEAP32[$AsyncCtx11 + 128 >> 2] = $9; //@line 21960
  HEAP32[$AsyncCtx11 + 132 >> 2] = $42; //@line 21962
  HEAP32[$AsyncCtx11 + 136 >> 2] = $21; //@line 21964
  HEAP32[$AsyncCtx11 + 140 >> 2] = $12; //@line 21966
  HEAP32[$AsyncCtx11 + 144 >> 2] = $8; //@line 21968
  HEAP32[$AsyncCtx11 + 148 >> 2] = $10; //@line 21970
  HEAP32[$AsyncCtx11 + 152 >> 2] = $22; //@line 21972
  HEAP32[$AsyncCtx11 + 156 >> 2] = $41; //@line 21974
  HEAP32[$AsyncCtx11 + 160 >> 2] = $11; //@line 21976
  HEAP32[$AsyncCtx11 + 164 >> 2] = $32; //@line 21978
  HEAP32[$AsyncCtx11 + 168 >> 2] = $31; //@line 21980
  HEAP32[$AsyncCtx11 + 172 >> 2] = $40; //@line 21982
  HEAP32[$AsyncCtx11 + 176 >> 2] = $8; //@line 21984
  HEAP32[$AsyncCtx11 + 180 >> 2] = $7; //@line 21986
  HEAP32[$AsyncCtx11 + 184 >> 2] = $19; //@line 21988
  HEAP32[$AsyncCtx11 + 188 >> 2] = $8; //@line 21990
  HEAP32[$AsyncCtx11 + 192 >> 2] = $20; //@line 21992
  HEAP32[$AsyncCtx11 + 196 >> 2] = $8; //@line 21994
  HEAP32[$AsyncCtx11 + 200 >> 2] = $$096115; //@line 21996
  HEAP32[$AsyncCtx11 + 204 >> 2] = $0; //@line 21998
  HEAP32[$AsyncCtx11 + 208 >> 2] = $8; //@line 22000
  HEAP32[$AsyncCtx11 + 212 >> 2] = $39; //@line 22002
  HEAP32[$AsyncCtx11 + 216 >> 2] = $30; //@line 22004
  HEAP32[$AsyncCtx11 + 220 >> 2] = $18; //@line 22006
  HEAP32[$AsyncCtx11 + 224 >> 2] = $9; //@line 22008
  HEAP32[$AsyncCtx11 + 228 >> 2] = $9; //@line 22010
  HEAP32[$AsyncCtx11 + 232 >> 2] = $8; //@line 22012
  HEAP32[$AsyncCtx11 + 236 >> 2] = $28; //@line 22014
  HEAP32[$AsyncCtx11 + 240 >> 2] = $17; //@line 22016
  HEAP32[$AsyncCtx11 + 244 >> 2] = $7; //@line 22018
  HEAP32[$AsyncCtx11 + 248 >> 2] = $0; //@line 22020
  HEAP32[$AsyncCtx11 + 252 >> 2] = $8; //@line 22022
  HEAP32[$AsyncCtx11 + 256 >> 2] = $29; //@line 22024
  HEAP32[$AsyncCtx11 + 260 >> 2] = $38; //@line 22026
  HEAP32[$AsyncCtx11 + 264 >> 2] = $47; //@line 22028
  HEAP32[$AsyncCtx11 + 268 >> 2] = $1; //@line 22030
  sp = STACKTOP; //@line 22031
  STACKTOP = sp; //@line 22032
  return 0; //@line 22032
 } else if ((label | 0) == 42) {
  HEAP32[$AsyncCtx15 >> 2] = 599; //@line 22035
  HEAP32[$AsyncCtx15 + 4 >> 2] = $27; //@line 22037
  HEAP8[$AsyncCtx15 + 8 >> 0] = $4; //@line 22039
  HEAP32[$AsyncCtx15 + 12 >> 2] = $15; //@line 22041
  HEAP8[$AsyncCtx15 + 16 >> 0] = $2; //@line 22043
  HEAP8[$AsyncCtx15 + 17 >> 0] = $3; //@line 22045
  HEAP32[$AsyncCtx15 + 20 >> 2] = $8; //@line 22047
  HEAP32[$AsyncCtx15 + 24 >> 2] = $7; //@line 22049
  HEAP32[$AsyncCtx15 + 28 >> 2] = $9; //@line 22051
  HEAP32[$AsyncCtx15 + 32 >> 2] = $16; //@line 22053
  HEAP32[$AsyncCtx15 + 36 >> 2] = $46; //@line 22055
  HEAP32[$AsyncCtx15 + 40 >> 2] = $8; //@line 22057
  HEAP32[$AsyncCtx15 + 44 >> 2] = $7; //@line 22059
  HEAP32[$AsyncCtx15 + 48 >> 2] = $45; //@line 22061
  HEAP32[$AsyncCtx15 + 52 >> 2] = $37; //@line 22063
  HEAP32[$AsyncCtx15 + 56 >> 2] = $25; //@line 22065
  HEAP32[$AsyncCtx15 + 60 >> 2] = $26; //@line 22067
  HEAP32[$AsyncCtx15 + 64 >> 2] = $7; //@line 22069
  HEAP32[$AsyncCtx15 + 68 >> 2] = $36; //@line 22071
  HEAP32[$AsyncCtx15 + 72 >> 2] = $24; //@line 22073
  HEAP32[$AsyncCtx15 + 76 >> 2] = $44; //@line 22075
  HEAP32[$AsyncCtx15 + 80 >> 2] = $13; //@line 22077
  HEAP32[$AsyncCtx15 + 84 >> 2] = $35; //@line 22079
  HEAP32[$AsyncCtx15 + 88 >> 2] = $34; //@line 22081
  HEAP32[$AsyncCtx15 + 92 >> 2] = $43; //@line 22083
  HEAP32[$AsyncCtx15 + 96 >> 2] = $6; //@line 22085
  HEAP32[$AsyncCtx15 + 100 >> 2] = $7; //@line 22087
  HEAP32[$AsyncCtx15 + 104 >> 2] = $8; //@line 22089
  HEAP8[$AsyncCtx15 + 108 >> 0] = $553; //@line 22091
  HEAP32[$AsyncCtx15 + 112 >> 2] = $8; //@line 22093
  HEAP32[$AsyncCtx15 + 116 >> 2] = $33; //@line 22095
  HEAP32[$AsyncCtx15 + 120 >> 2] = $8; //@line 22097
  HEAP32[$AsyncCtx15 + 124 >> 2] = $23; //@line 22099
  HEAP32[$AsyncCtx15 + 128 >> 2] = $9; //@line 22101
  HEAP32[$AsyncCtx15 + 132 >> 2] = $42; //@line 22103
  HEAP32[$AsyncCtx15 + 136 >> 2] = $21; //@line 22105
  HEAP32[$AsyncCtx15 + 140 >> 2] = $12; //@line 22107
  HEAP32[$AsyncCtx15 + 144 >> 2] = $8; //@line 22109
  HEAP32[$AsyncCtx15 + 148 >> 2] = $10; //@line 22111
  HEAP32[$AsyncCtx15 + 152 >> 2] = $22; //@line 22113
  HEAP32[$AsyncCtx15 + 156 >> 2] = $41; //@line 22115
  HEAP32[$AsyncCtx15 + 160 >> 2] = $11; //@line 22117
  HEAP32[$AsyncCtx15 + 164 >> 2] = $32; //@line 22119
  HEAP32[$AsyncCtx15 + 168 >> 2] = $31; //@line 22121
  HEAP32[$AsyncCtx15 + 172 >> 2] = $40; //@line 22123
  HEAP32[$AsyncCtx15 + 176 >> 2] = $8; //@line 22125
  HEAP32[$AsyncCtx15 + 180 >> 2] = $7; //@line 22127
  HEAP32[$AsyncCtx15 + 184 >> 2] = $19; //@line 22129
  HEAP32[$AsyncCtx15 + 188 >> 2] = $8; //@line 22131
  HEAP32[$AsyncCtx15 + 192 >> 2] = $20; //@line 22133
  HEAP32[$AsyncCtx15 + 196 >> 2] = $8; //@line 22135
  HEAP32[$AsyncCtx15 + 200 >> 2] = $0; //@line 22137
  HEAP32[$AsyncCtx15 + 204 >> 2] = $8; //@line 22139
  HEAP32[$AsyncCtx15 + 208 >> 2] = $39; //@line 22141
  HEAP32[$AsyncCtx15 + 212 >> 2] = $30; //@line 22143
  HEAP32[$AsyncCtx15 + 216 >> 2] = $18; //@line 22145
  HEAP32[$AsyncCtx15 + 220 >> 2] = $9; //@line 22147
  HEAP32[$AsyncCtx15 + 224 >> 2] = $9; //@line 22149
  HEAP32[$AsyncCtx15 + 228 >> 2] = $8; //@line 22151
  HEAP32[$AsyncCtx15 + 232 >> 2] = $28; //@line 22153
  HEAP32[$AsyncCtx15 + 236 >> 2] = $17; //@line 22155
  HEAP32[$AsyncCtx15 + 240 >> 2] = $7; //@line 22157
  HEAP32[$AsyncCtx15 + 244 >> 2] = $0; //@line 22159
  HEAP32[$AsyncCtx15 + 248 >> 2] = $8; //@line 22161
  HEAP32[$AsyncCtx15 + 252 >> 2] = $29; //@line 22163
  HEAP32[$AsyncCtx15 + 256 >> 2] = $38; //@line 22165
  HEAP32[$AsyncCtx15 + 260 >> 2] = $47; //@line 22167
  HEAP32[$AsyncCtx15 + 264 >> 2] = $1; //@line 22169
  sp = STACKTOP; //@line 22170
  STACKTOP = sp; //@line 22171
  return 0; //@line 22171
 } else if ((label | 0) == 47) {
  STACKTOP = sp; //@line 22174
  return $$096$lcssa | 0; //@line 22174
 }
 return 0; //@line 22176
}
function __ZN12LoRaWANStack18lora_state_machineEv($0) {
 $0 = $0 | 0;
 var $$029 = 0, $$1 = 0, $1 = 0, $102 = 0, $104 = 0, $110 = 0, $111 = 0, $115 = 0, $118 = 0, $125 = 0, $126 = 0, $168 = 0, $169 = 0, $173 = 0, $175 = 0, $181 = 0, $182 = 0, $186 = 0, $189 = 0, $194 = 0, $197 = 0, $2 = 0, $215 = 0, $216 = 0, $220 = 0, $222 = 0, $229 = 0, $230 = 0, $235 = 0, $238 = 0, $250 = 0, $251 = 0, $255 = 0, $257 = 0, $265 = 0, $266 = 0, $272 = 0, $275 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $50 = 0, $51 = 0, $55 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $68 = 0, $7 = 0, $71 = 0, $92 = 0, $97 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx100 = 0, $AsyncCtx103 = 0, $AsyncCtx106 = 0, $AsyncCtx110 = 0, $AsyncCtx114 = 0, $AsyncCtx118 = 0, $AsyncCtx12 = 0, $AsyncCtx122 = 0, $AsyncCtx126 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx36 = 0, $AsyncCtx40 = 0, $AsyncCtx44 = 0, $AsyncCtx48 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $AsyncCtx68 = 0, $AsyncCtx72 = 0, $AsyncCtx76 = 0, $AsyncCtx79 = 0, $AsyncCtx83 = 0, $AsyncCtx87 = 0, $AsyncCtx91 = 0, $AsyncCtx94 = 0, $AsyncCtx97 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 7513
 STACKTOP = STACKTOP + 160 | 0; //@line 7514
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160); //@line 7514
 $vararg_buffer9 = sp + 56 | 0; //@line 7515
 $vararg_buffer7 = sp + 48 | 0; //@line 7516
 $vararg_buffer5 = sp + 40 | 0; //@line 7517
 $vararg_buffer3 = sp + 32 | 0; //@line 7518
 $vararg_buffer1 = sp + 8 | 0; //@line 7519
 $1 = sp + 144 | 0; //@line 7521
 $2 = sp + 128 | 0; //@line 7522
 $3 = sp + 112 | 0; //@line 7523
 $4 = sp + 96 | 0; //@line 7524
 $5 = sp + 80 | 0; //@line 7525
 $6 = sp + 64 | 0; //@line 7526
 _printf(12430, sp) | 0; //@line 7527
 $7 = $0 + 1876 | 0; //@line 7528
 HEAP32[$vararg_buffer1 >> 2] = HEAP32[$7 >> 2]; //@line 7530
 _printf(12443, $vararg_buffer1) | 0; //@line 7531
 $AsyncCtx52 = _emscripten_alloc_async_context(76, sp) | 0; //@line 7532
 _putchar(10) | 0; //@line 7533
 if (___async) {
  HEAP32[$AsyncCtx52 >> 2] = 243; //@line 7536
  HEAP32[$AsyncCtx52 + 4 >> 2] = $4; //@line 7538
  HEAP32[$AsyncCtx52 + 8 >> 2] = $1; //@line 7540
  HEAP32[$AsyncCtx52 + 12 >> 2] = $0; //@line 7542
  HEAP32[$AsyncCtx52 + 16 >> 2] = $7; //@line 7544
  HEAP32[$AsyncCtx52 + 20 >> 2] = $2; //@line 7546
  HEAP32[$AsyncCtx52 + 24 >> 2] = $1; //@line 7548
  HEAP32[$AsyncCtx52 + 28 >> 2] = $3; //@line 7550
  HEAP32[$AsyncCtx52 + 32 >> 2] = $vararg_buffer7; //@line 7552
  HEAP32[$AsyncCtx52 + 36 >> 2] = $vararg_buffer7; //@line 7554
  HEAP32[$AsyncCtx52 + 40 >> 2] = $vararg_buffer9; //@line 7556
  HEAP32[$AsyncCtx52 + 44 >> 2] = $vararg_buffer9; //@line 7558
  HEAP32[$AsyncCtx52 + 48 >> 2] = $6; //@line 7560
  HEAP32[$AsyncCtx52 + 52 >> 2] = $vararg_buffer3; //@line 7562
  HEAP32[$AsyncCtx52 + 56 >> 2] = $vararg_buffer3; //@line 7564
  HEAP32[$AsyncCtx52 + 60 >> 2] = $vararg_buffer5; //@line 7566
  HEAP32[$AsyncCtx52 + 64 >> 2] = $vararg_buffer5; //@line 7568
  HEAP32[$AsyncCtx52 + 68 >> 2] = $5; //@line 7570
  HEAP32[$AsyncCtx52 + 72 >> 2] = $vararg_buffer1; //@line 7572
  sp = STACKTOP; //@line 7573
  STACKTOP = sp; //@line 7574
  return 0; //@line 7574
 }
 _emscripten_free_async_context($AsyncCtx52 | 0); //@line 7576
 switch (HEAP32[$7 >> 2] | 0) {
 case 7:
  {
   $28 = $0 + 4 | 0; //@line 7580
   $AsyncCtx87 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7581
   __ZN7LoRaMac19remove_channel_planEv($28) | 0; //@line 7582
   if (___async) {
    HEAP32[$AsyncCtx87 >> 2] = 244; //@line 7585
    HEAP32[$AsyncCtx87 + 4 >> 2] = $1; //@line 7587
    HEAP32[$AsyncCtx87 + 8 >> 2] = $28; //@line 7589
    HEAP32[$AsyncCtx87 + 12 >> 2] = $0; //@line 7591
    HEAP32[$AsyncCtx87 + 16 >> 2] = $1; //@line 7593
    HEAP32[$AsyncCtx87 + 20 >> 2] = $2; //@line 7595
    sp = STACKTOP; //@line 7596
    STACKTOP = sp; //@line 7597
    return 0; //@line 7597
   }
   _emscripten_free_async_context($AsyncCtx87 | 0); //@line 7599
   $AsyncCtx83 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7600
   __ZN7LoRaMac10disconnectEv($28); //@line 7601
   if (___async) {
    HEAP32[$AsyncCtx83 >> 2] = 245; //@line 7604
    HEAP32[$AsyncCtx83 + 4 >> 2] = $1; //@line 7606
    HEAP32[$AsyncCtx83 + 8 >> 2] = $28; //@line 7608
    HEAP32[$AsyncCtx83 + 12 >> 2] = $0; //@line 7610
    HEAP32[$AsyncCtx83 + 16 >> 2] = $1; //@line 7612
    HEAP32[$AsyncCtx83 + 20 >> 2] = $2; //@line 7614
    sp = STACKTOP; //@line 7615
    STACKTOP = sp; //@line 7616
    return 0; //@line 7616
   }
   _emscripten_free_async_context($AsyncCtx83 | 0); //@line 7618
   HEAP32[$1 >> 2] = 1; //@line 7619
   HEAP8[$1 + 4 >> 0] = 0; //@line 7621
   $AsyncCtx79 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7622
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($28, $1) | 0; //@line 7623
   if (___async) {
    HEAP32[$AsyncCtx79 >> 2] = 246; //@line 7626
    HEAP32[$AsyncCtx79 + 4 >> 2] = $0; //@line 7628
    HEAP32[$AsyncCtx79 + 8 >> 2] = $1; //@line 7630
    HEAP32[$AsyncCtx79 + 12 >> 2] = $2; //@line 7632
    sp = STACKTOP; //@line 7633
    STACKTOP = sp; //@line 7634
    return 0; //@line 7634
   }
   _emscripten_free_async_context($AsyncCtx79 | 0); //@line 7636
   HEAP8[$0 + 1964 >> 0] = 0; //@line 7639
   HEAP32[$0 + 2256 >> 2] = 0; //@line 7641
   HEAP8[$0 + 2236 >> 0] = 0; //@line 7643
   HEAP16[$0 + 2282 >> 1] = 0; //@line 7645
   HEAP16[$0 + 2260 >> 1] = 0; //@line 7647
   HEAP8[$0 + 1932 >> 0] = 0; //@line 7649
   $50 = $0 + 1892 | 0; //@line 7650
   _memset($0 + 1975 | 0, 0, 259) | 0; //@line 7651
   $51 = HEAP32[$50 >> 2] | 0; //@line 7652
   if (!$51) {
    $$1 = -1011; //@line 7655
    STACKTOP = sp; //@line 7656
    return $$1 | 0; //@line 7656
   }
   $55 = HEAP32[$0 + 2288 >> 2] | 0; //@line 7660
   $57 = HEAP32[$51 + 4 >> 2] | 0; //@line 7662
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 7663
   FUNCTION_TABLE_vii[$57 & 31]($2, $0 + 1880 | 0); //@line 7664
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 247; //@line 7667
    HEAP32[$AsyncCtx + 4 >> 2] = $50; //@line 7669
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 7671
    HEAP32[$AsyncCtx + 12 >> 2] = $55; //@line 7673
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 7675
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 7677
    sp = STACKTOP; //@line 7678
    STACKTOP = sp; //@line 7679
    return 0; //@line 7679
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7681
   $63 = $2 + 12 | 0; //@line 7683
   HEAP32[$63 >> 2] = HEAP32[$50 >> 2]; //@line 7684
   $AsyncCtx106 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7685
   $64 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($55, $2, 1) | 0; //@line 7686
   if (___async) {
    HEAP32[$AsyncCtx106 >> 2] = 248; //@line 7689
    HEAP32[$AsyncCtx106 + 4 >> 2] = $63; //@line 7691
    HEAP32[$AsyncCtx106 + 8 >> 2] = $2; //@line 7693
    HEAP32[$AsyncCtx106 + 12 >> 2] = $1; //@line 7695
    sp = STACKTOP; //@line 7696
    STACKTOP = sp; //@line 7697
    return 0; //@line 7697
   }
   _emscripten_free_async_context($AsyncCtx106 | 0); //@line 7699
   $68 = HEAP32[$63 >> 2] | 0; //@line 7700
   do {
    if ($68 | 0) {
     $71 = HEAP32[$68 + 8 >> 2] | 0; //@line 7705
     $AsyncCtx12 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7706
     FUNCTION_TABLE_vi[$71 & 1023]($2); //@line 7707
     if (___async) {
      HEAP32[$AsyncCtx12 >> 2] = 249; //@line 7710
      HEAP32[$AsyncCtx12 + 4 >> 2] = $64; //@line 7712
      HEAP32[$AsyncCtx12 + 8 >> 2] = $1; //@line 7714
      sp = STACKTOP; //@line 7715
      STACKTOP = sp; //@line 7716
      return 0; //@line 7716
     } else {
      _emscripten_free_async_context($AsyncCtx12 | 0); //@line 7718
      break;
     }
    }
   } while (0);
   if ($64 | 0) {
    $$1 = -1011; //@line 7725
    STACKTOP = sp; //@line 7726
    return $$1 | 0; //@line 7726
   }
   $AsyncCtx126 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7728
   _mbed_assert_internal(13142, 12226, 1141); //@line 7729
   if (___async) {
    HEAP32[$AsyncCtx126 >> 2] = 250; //@line 7732
    HEAP32[$AsyncCtx126 + 4 >> 2] = $1; //@line 7734
    sp = STACKTOP; //@line 7735
    STACKTOP = sp; //@line 7736
    return 0; //@line 7736
   }
   _emscripten_free_async_context($AsyncCtx126 | 0); //@line 7738
   $$1 = -1011; //@line 7739
   STACKTOP = sp; //@line 7740
   return $$1 | 0; //@line 7740
  }
 case 1:
  {
   $$1 = 0; //@line 7744
   STACKTOP = sp; //@line 7745
   return $$1 | 0; //@line 7745
  }
 case 2:
  {
   if (HEAP8[$0 + 1936 >> 0] | 0) {
    $$1 = -1003; //@line 7753
    STACKTOP = sp; //@line 7754
    return $$1 | 0; //@line 7754
   }
   HEAP32[$vararg_buffer1 >> 2] = 0; //@line 7756
   HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[$0 + 1940 >> 2]; //@line 7760
   HEAP32[$vararg_buffer1 + 8 >> 2] = HEAP32[$0 + 1944 >> 2]; //@line 7764
   HEAP32[$vararg_buffer1 + 12 >> 2] = HEAP32[$0 + 1948 >> 2]; //@line 7768
   HEAP8[$vararg_buffer1 + 16 >> 0] = HEAP8[$0 + 1952 >> 0] | 0; //@line 7772
   $AsyncCtx91 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7774
   $92 = __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($0 + 4 | 0, $vararg_buffer1) | 0; //@line 7775
   if (___async) {
    HEAP32[$AsyncCtx91 >> 2] = 251; //@line 7778
    HEAP32[$AsyncCtx91 + 4 >> 2] = $vararg_buffer1; //@line 7780
    HEAP32[$AsyncCtx91 + 8 >> 2] = $1; //@line 7782
    sp = STACKTOP; //@line 7783
    STACKTOP = sp; //@line 7784
    return 0; //@line 7784
   }
   _emscripten_free_async_context($AsyncCtx91 | 0); //@line 7786
   $$1 = ($92 | 0) == 0 ? -1016 : $92; //@line 7789
   STACKTOP = sp; //@line 7790
   return $$1 | 0; //@line 7790
  }
 case 4:
  {
   HEAP8[$0 + 1932 >> 0] = 1; //@line 7795
   $97 = $0 + 1892 | 0; //@line 7796
   $98 = HEAP32[$97 >> 2] | 0; //@line 7797
   if (!$98) {
    $$1 = 0; //@line 7800
    STACKTOP = sp; //@line 7801
    return $$1 | 0; //@line 7801
   }
   $102 = HEAP32[$0 + 2288 >> 2] | 0; //@line 7805
   $104 = HEAP32[$98 + 4 >> 2] | 0; //@line 7807
   $AsyncCtx15 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7808
   FUNCTION_TABLE_vii[$104 & 31]($3, $0 + 1880 | 0); //@line 7809
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 252; //@line 7812
    HEAP32[$AsyncCtx15 + 4 >> 2] = $97; //@line 7814
    HEAP32[$AsyncCtx15 + 8 >> 2] = $3; //@line 7816
    HEAP32[$AsyncCtx15 + 12 >> 2] = $102; //@line 7818
    HEAP32[$AsyncCtx15 + 16 >> 2] = $3; //@line 7820
    HEAP32[$AsyncCtx15 + 20 >> 2] = $1; //@line 7822
    sp = STACKTOP; //@line 7823
    STACKTOP = sp; //@line 7824
    return 0; //@line 7824
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7826
   $110 = $3 + 12 | 0; //@line 7828
   HEAP32[$110 >> 2] = HEAP32[$97 >> 2]; //@line 7829
   $AsyncCtx103 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7830
   $111 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($102, $3, 0) | 0; //@line 7831
   if (___async) {
    HEAP32[$AsyncCtx103 >> 2] = 253; //@line 7834
    HEAP32[$AsyncCtx103 + 4 >> 2] = $110; //@line 7836
    HEAP32[$AsyncCtx103 + 8 >> 2] = $3; //@line 7838
    HEAP32[$AsyncCtx103 + 12 >> 2] = $1; //@line 7840
    sp = STACKTOP; //@line 7841
    STACKTOP = sp; //@line 7842
    return 0; //@line 7842
   }
   _emscripten_free_async_context($AsyncCtx103 | 0); //@line 7844
   $115 = HEAP32[$110 >> 2] | 0; //@line 7845
   do {
    if ($115 | 0) {
     $118 = HEAP32[$115 + 8 >> 2] | 0; //@line 7850
     $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7851
     FUNCTION_TABLE_vi[$118 & 1023]($3); //@line 7852
     if (___async) {
      HEAP32[$AsyncCtx19 >> 2] = 254; //@line 7855
      HEAP32[$AsyncCtx19 + 4 >> 2] = $111; //@line 7857
      HEAP32[$AsyncCtx19 + 8 >> 2] = $1; //@line 7859
      sp = STACKTOP; //@line 7860
      STACKTOP = sp; //@line 7861
      return 0; //@line 7861
     } else {
      _emscripten_free_async_context($AsyncCtx19 | 0); //@line 7863
      break;
     }
    }
   } while (0);
   if ($111 | 0) {
    $$1 = 0; //@line 7870
    STACKTOP = sp; //@line 7871
    return $$1 | 0; //@line 7871
   }
   $AsyncCtx122 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7873
   _mbed_assert_internal(13142, 12226, 1186); //@line 7874
   if (___async) {
    HEAP32[$AsyncCtx122 >> 2] = 255; //@line 7877
    HEAP32[$AsyncCtx122 + 4 >> 2] = $1; //@line 7879
    sp = STACKTOP; //@line 7880
    STACKTOP = sp; //@line 7881
    return 0; //@line 7881
   }
   _emscripten_free_async_context($AsyncCtx122 | 0); //@line 7883
   $$1 = 0; //@line 7884
   STACKTOP = sp; //@line 7885
   return $$1 | 0; //@line 7885
  }
 case 3:
  {
   HEAP32[$1 >> 2] = 3; //@line 7889
   $125 = $1 + 4 | 0; //@line 7892
   HEAP32[$125 >> 2] = HEAP32[$0 + 1940 >> 2]; //@line 7893
   $126 = $0 + 4 | 0; //@line 7894
   $AsyncCtx76 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7895
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($126, $1) | 0; //@line 7896
   if (___async) {
    HEAP32[$AsyncCtx76 >> 2] = 256; //@line 7899
    HEAP32[$AsyncCtx76 + 4 >> 2] = $0; //@line 7901
    HEAP32[$AsyncCtx76 + 8 >> 2] = $4; //@line 7903
    HEAP32[$AsyncCtx76 + 12 >> 2] = $1; //@line 7905
    HEAP32[$AsyncCtx76 + 16 >> 2] = $1; //@line 7907
    HEAP32[$AsyncCtx76 + 20 >> 2] = $125; //@line 7909
    HEAP32[$AsyncCtx76 + 24 >> 2] = $126; //@line 7911
    HEAP32[$AsyncCtx76 + 28 >> 2] = $1; //@line 7913
    HEAP32[$AsyncCtx76 + 32 >> 2] = $125; //@line 7915
    sp = STACKTOP; //@line 7916
    STACKTOP = sp; //@line 7917
    return 0; //@line 7917
   }
   _emscripten_free_async_context($AsyncCtx76 | 0); //@line 7919
   HEAP32[$1 >> 2] = 4; //@line 7920
   HEAP32[$125 >> 2] = HEAP32[$0 + 1944 >> 2]; //@line 7923
   $AsyncCtx72 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7924
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($126, $1) | 0; //@line 7925
   if (___async) {
    HEAP32[$AsyncCtx72 >> 2] = 257; //@line 7928
    HEAP32[$AsyncCtx72 + 4 >> 2] = $0; //@line 7930
    HEAP32[$AsyncCtx72 + 8 >> 2] = $4; //@line 7932
    HEAP32[$AsyncCtx72 + 12 >> 2] = $1; //@line 7934
    HEAP32[$AsyncCtx72 + 16 >> 2] = $1; //@line 7936
    HEAP32[$AsyncCtx72 + 20 >> 2] = $125; //@line 7938
    HEAP32[$AsyncCtx72 + 24 >> 2] = $126; //@line 7940
    HEAP32[$AsyncCtx72 + 28 >> 2] = $1; //@line 7942
    HEAP32[$AsyncCtx72 + 32 >> 2] = $125; //@line 7944
    sp = STACKTOP; //@line 7945
    STACKTOP = sp; //@line 7946
    return 0; //@line 7946
   }
   _emscripten_free_async_context($AsyncCtx72 | 0); //@line 7948
   HEAP32[$1 >> 2] = 5; //@line 7949
   HEAP32[$125 >> 2] = HEAP32[$0 + 1948 >> 2]; //@line 7952
   $AsyncCtx68 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7953
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($126, $1) | 0; //@line 7954
   if (___async) {
    HEAP32[$AsyncCtx68 >> 2] = 258; //@line 7957
    HEAP32[$AsyncCtx68 + 4 >> 2] = $0; //@line 7959
    HEAP32[$AsyncCtx68 + 8 >> 2] = $4; //@line 7961
    HEAP32[$AsyncCtx68 + 12 >> 2] = $1; //@line 7963
    HEAP32[$AsyncCtx68 + 16 >> 2] = $1; //@line 7965
    HEAP32[$AsyncCtx68 + 20 >> 2] = $125; //@line 7967
    HEAP32[$AsyncCtx68 + 24 >> 2] = $126; //@line 7969
    HEAP32[$AsyncCtx68 + 28 >> 2] = $1; //@line 7971
    HEAP32[$AsyncCtx68 + 32 >> 2] = $125; //@line 7973
    sp = STACKTOP; //@line 7974
    STACKTOP = sp; //@line 7975
    return 0; //@line 7975
   }
   _emscripten_free_async_context($AsyncCtx68 | 0); //@line 7977
   HEAP32[$1 >> 2] = 6; //@line 7978
   HEAP32[$125 >> 2] = HEAP32[$0 + 1952 >> 2]; //@line 7981
   $AsyncCtx64 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7982
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($126, $1) | 0; //@line 7983
   if (___async) {
    HEAP32[$AsyncCtx64 >> 2] = 259; //@line 7986
    HEAP32[$AsyncCtx64 + 4 >> 2] = $1; //@line 7988
    HEAP32[$AsyncCtx64 + 8 >> 2] = $125; //@line 7990
    HEAP32[$AsyncCtx64 + 12 >> 2] = $126; //@line 7992
    HEAP32[$AsyncCtx64 + 16 >> 2] = $1; //@line 7994
    HEAP32[$AsyncCtx64 + 20 >> 2] = $0; //@line 7996
    HEAP32[$AsyncCtx64 + 24 >> 2] = $1; //@line 7998
    HEAP32[$AsyncCtx64 + 28 >> 2] = $4; //@line 8000
    sp = STACKTOP; //@line 8001
    STACKTOP = sp; //@line 8002
    return 0; //@line 8002
   }
   _emscripten_free_async_context($AsyncCtx64 | 0); //@line 8004
   HEAP32[$1 >> 2] = 1; //@line 8005
   HEAP8[$125 >> 0] = 1; //@line 8006
   $AsyncCtx60 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8007
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($126, $1) | 0; //@line 8008
   if (___async) {
    HEAP32[$AsyncCtx60 >> 2] = 260; //@line 8011
    HEAP32[$AsyncCtx60 + 4 >> 2] = $0; //@line 8013
    HEAP32[$AsyncCtx60 + 8 >> 2] = $1; //@line 8015
    HEAP32[$AsyncCtx60 + 12 >> 2] = $4; //@line 8017
    sp = STACKTOP; //@line 8018
    STACKTOP = sp; //@line 8019
    return 0; //@line 8019
   }
   _emscripten_free_async_context($AsyncCtx60 | 0); //@line 8021
   HEAP8[$0 + 1932 >> 0] = 1; //@line 8023
   $168 = $0 + 1892 | 0; //@line 8024
   $169 = HEAP32[$168 >> 2] | 0; //@line 8025
   if (!$169) {
    $$1 = 0; //@line 8028
    STACKTOP = sp; //@line 8029
    return $$1 | 0; //@line 8029
   }
   $173 = HEAP32[$0 + 2288 >> 2] | 0; //@line 8033
   $175 = HEAP32[$169 + 4 >> 2] | 0; //@line 8035
   $AsyncCtx22 = _emscripten_alloc_async_context(24, sp) | 0; //@line 8036
   FUNCTION_TABLE_vii[$175 & 31]($4, $0 + 1880 | 0); //@line 8037
   if (___async) {
    HEAP32[$AsyncCtx22 >> 2] = 261; //@line 8040
    HEAP32[$AsyncCtx22 + 4 >> 2] = $168; //@line 8042
    HEAP32[$AsyncCtx22 + 8 >> 2] = $4; //@line 8044
    HEAP32[$AsyncCtx22 + 12 >> 2] = $173; //@line 8046
    HEAP32[$AsyncCtx22 + 16 >> 2] = $4; //@line 8048
    HEAP32[$AsyncCtx22 + 20 >> 2] = $1; //@line 8050
    sp = STACKTOP; //@line 8051
    STACKTOP = sp; //@line 8052
    return 0; //@line 8052
   }
   _emscripten_free_async_context($AsyncCtx22 | 0); //@line 8054
   $181 = $4 + 12 | 0; //@line 8056
   HEAP32[$181 >> 2] = HEAP32[$168 >> 2]; //@line 8057
   $AsyncCtx100 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8058
   $182 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($173, $4, 0) | 0; //@line 8059
   if (___async) {
    HEAP32[$AsyncCtx100 >> 2] = 262; //@line 8062
    HEAP32[$AsyncCtx100 + 4 >> 2] = $181; //@line 8064
    HEAP32[$AsyncCtx100 + 8 >> 2] = $4; //@line 8066
    HEAP32[$AsyncCtx100 + 12 >> 2] = $1; //@line 8068
    sp = STACKTOP; //@line 8069
    STACKTOP = sp; //@line 8070
    return 0; //@line 8070
   }
   _emscripten_free_async_context($AsyncCtx100 | 0); //@line 8072
   $186 = HEAP32[$181 >> 2] | 0; //@line 8073
   do {
    if ($186 | 0) {
     $189 = HEAP32[$186 + 8 >> 2] | 0; //@line 8078
     $AsyncCtx26 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8079
     FUNCTION_TABLE_vi[$189 & 1023]($4); //@line 8080
     if (___async) {
      HEAP32[$AsyncCtx26 >> 2] = 263; //@line 8083
      HEAP32[$AsyncCtx26 + 4 >> 2] = $182; //@line 8085
      HEAP32[$AsyncCtx26 + 8 >> 2] = $1; //@line 8087
      sp = STACKTOP; //@line 8088
      STACKTOP = sp; //@line 8089
      return 0; //@line 8089
     } else {
      _emscripten_free_async_context($AsyncCtx26 | 0); //@line 8091
      break;
     }
    }
   } while (0);
   if ($182 | 0) {
    $$1 = 0; //@line 8098
    STACKTOP = sp; //@line 8099
    return $$1 | 0; //@line 8099
   }
   $AsyncCtx118 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8101
   _mbed_assert_internal(13142, 12226, 1223); //@line 8102
   if (___async) {
    HEAP32[$AsyncCtx118 >> 2] = 264; //@line 8105
    HEAP32[$AsyncCtx118 + 4 >> 2] = $1; //@line 8107
    sp = STACKTOP; //@line 8108
    STACKTOP = sp; //@line 8109
    return 0; //@line 8109
   }
   _emscripten_free_async_context($AsyncCtx118 | 0); //@line 8111
   $$1 = 0; //@line 8112
   STACKTOP = sp; //@line 8113
   return $$1 | 0; //@line 8113
  }
 case 5:
  {
   $194 = $0 + 1964 | 0; //@line 8117
   L111 : do {
    if (!(HEAP8[$194 >> 0] | 0)) {
     HEAP8[$194 >> 0] = 1; //@line 8122
     $AsyncCtx56 = _emscripten_alloc_async_context(56, sp) | 0; //@line 8123
     $197 = __ZN12LoRaWANStack17send_frame_to_macEv($0) | 0; //@line 8124
     if (___async) {
      HEAP32[$AsyncCtx56 >> 2] = 265; //@line 8127
      HEAP32[$AsyncCtx56 + 4 >> 2] = $7; //@line 8129
      HEAP32[$AsyncCtx56 + 8 >> 2] = $1; //@line 8131
      HEAP32[$AsyncCtx56 + 12 >> 2] = $0; //@line 8133
      HEAP32[$AsyncCtx56 + 16 >> 2] = $6; //@line 8135
      HEAP32[$AsyncCtx56 + 20 >> 2] = $vararg_buffer7; //@line 8137
      HEAP32[$AsyncCtx56 + 24 >> 2] = $vararg_buffer7; //@line 8139
      HEAP32[$AsyncCtx56 + 28 >> 2] = $vararg_buffer9; //@line 8141
      HEAP32[$AsyncCtx56 + 32 >> 2] = $vararg_buffer9; //@line 8143
      HEAP32[$AsyncCtx56 + 36 >> 2] = $vararg_buffer3; //@line 8145
      HEAP32[$AsyncCtx56 + 40 >> 2] = $vararg_buffer3; //@line 8147
      HEAP32[$AsyncCtx56 + 44 >> 2] = $vararg_buffer5; //@line 8149
      HEAP32[$AsyncCtx56 + 48 >> 2] = $vararg_buffer5; //@line 8151
      HEAP32[$AsyncCtx56 + 52 >> 2] = $5; //@line 8153
      sp = STACKTOP; //@line 8154
      STACKTOP = sp; //@line 8155
      return 0; //@line 8155
     }
     _emscripten_free_async_context($AsyncCtx56 | 0); //@line 8157
     switch ($197 | 0) {
     case 0:
      {
       $$029 = 0; //@line 8160
       break L111;
       break;
      }
     case -1014:
      {
       _printf(12178, $vararg_buffer3) | 0; //@line 8165
       _printf(12465, $vararg_buffer5) | 0; //@line 8166
       $AsyncCtx48 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8167
       _putchar(10) | 0; //@line 8168
       if (___async) {
        HEAP32[$AsyncCtx48 >> 2] = 266; //@line 8171
        HEAP32[$AsyncCtx48 + 4 >> 2] = $0; //@line 8173
        HEAP32[$AsyncCtx48 + 8 >> 2] = $7; //@line 8175
        HEAP32[$AsyncCtx48 + 12 >> 2] = $5; //@line 8177
        HEAP32[$AsyncCtx48 + 16 >> 2] = $1; //@line 8179
        sp = STACKTOP; //@line 8180
        STACKTOP = sp; //@line 8181
        return 0; //@line 8181
       }
       _emscripten_free_async_context($AsyncCtx48 | 0); //@line 8183
       $215 = $0 + 1892 | 0; //@line 8184
       $216 = HEAP32[$215 >> 2] | 0; //@line 8185
       if (!$216) {
        $$029 = -1014; //@line 8188
        break L111;
       }
       $220 = HEAP32[$0 + 2288 >> 2] | 0; //@line 8193
       $222 = HEAP32[$216 + 4 >> 2] | 0; //@line 8195
       $AsyncCtx29 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8196
       FUNCTION_TABLE_vii[$222 & 31]($5, $0 + 1880 | 0); //@line 8197
       if (___async) {
        HEAP32[$AsyncCtx29 >> 2] = 267; //@line 8200
        HEAP32[$AsyncCtx29 + 4 >> 2] = $215; //@line 8202
        HEAP32[$AsyncCtx29 + 8 >> 2] = $5; //@line 8204
        HEAP32[$AsyncCtx29 + 12 >> 2] = $220; //@line 8206
        HEAP32[$AsyncCtx29 + 16 >> 2] = $5; //@line 8208
        HEAP32[$AsyncCtx29 + 20 >> 2] = $7; //@line 8210
        HEAP32[$AsyncCtx29 + 24 >> 2] = $1; //@line 8212
        sp = STACKTOP; //@line 8213
        STACKTOP = sp; //@line 8214
        return 0; //@line 8214
       }
       _emscripten_free_async_context($AsyncCtx29 | 0); //@line 8216
       $229 = $5 + 12 | 0; //@line 8218
       HEAP32[$229 >> 2] = HEAP32[$215 >> 2]; //@line 8219
       $AsyncCtx97 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8220
       $230 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($220, $5, 5) | 0; //@line 8221
       if (___async) {
        HEAP32[$AsyncCtx97 >> 2] = 268; //@line 8224
        HEAP32[$AsyncCtx97 + 4 >> 2] = $229; //@line 8226
        HEAP32[$AsyncCtx97 + 8 >> 2] = $5; //@line 8228
        HEAP32[$AsyncCtx97 + 12 >> 2] = $7; //@line 8230
        HEAP32[$AsyncCtx97 + 16 >> 2] = $1; //@line 8232
        sp = STACKTOP; //@line 8233
        STACKTOP = sp; //@line 8234
        return 0; //@line 8234
       }
       _emscripten_free_async_context($AsyncCtx97 | 0); //@line 8236
       $235 = HEAP32[$229 >> 2] | 0; //@line 8237
       do {
        if ($235 | 0) {
         $238 = HEAP32[$235 + 8 >> 2] | 0; //@line 8242
         $AsyncCtx33 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8243
         FUNCTION_TABLE_vi[$238 & 1023]($5); //@line 8244
         if (___async) {
          HEAP32[$AsyncCtx33 >> 2] = 269; //@line 8247
          HEAP32[$AsyncCtx33 + 4 >> 2] = $230; //@line 8249
          HEAP32[$AsyncCtx33 + 8 >> 2] = $7; //@line 8251
          HEAP32[$AsyncCtx33 + 12 >> 2] = $1; //@line 8253
          sp = STACKTOP; //@line 8254
          STACKTOP = sp; //@line 8255
          return 0; //@line 8255
         } else {
          _emscripten_free_async_context($AsyncCtx33 | 0); //@line 8257
          break;
         }
        }
       } while (0);
       if ($230 | 0) {
        $$029 = -1014; //@line 8264
        break L111;
       }
       $AsyncCtx114 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8267
       _mbed_assert_internal(13142, 12226, 1243); //@line 8268
       if (___async) {
        HEAP32[$AsyncCtx114 >> 2] = 270; //@line 8271
        HEAP32[$AsyncCtx114 + 4 >> 2] = $7; //@line 8273
        HEAP32[$AsyncCtx114 + 8 >> 2] = $1; //@line 8275
        sp = STACKTOP; //@line 8276
        STACKTOP = sp; //@line 8277
        return 0; //@line 8277
       } else {
        _emscripten_free_async_context($AsyncCtx114 | 0); //@line 8279
        $$029 = -1014; //@line 8280
        break L111;
       }
       break;
      }
     default:
      {
       _printf(12178, $vararg_buffer7) | 0; //@line 8286
       _printf(12500, $vararg_buffer9) | 0; //@line 8287
       $AsyncCtx44 = _emscripten_alloc_async_context(24, sp) | 0; //@line 8288
       _putchar(10) | 0; //@line 8289
       if (___async) {
        HEAP32[$AsyncCtx44 >> 2] = 271; //@line 8292
        HEAP32[$AsyncCtx44 + 4 >> 2] = $0; //@line 8294
        HEAP32[$AsyncCtx44 + 8 >> 2] = $197; //@line 8296
        HEAP32[$AsyncCtx44 + 12 >> 2] = $7; //@line 8298
        HEAP32[$AsyncCtx44 + 16 >> 2] = $6; //@line 8300
        HEAP32[$AsyncCtx44 + 20 >> 2] = $1; //@line 8302
        sp = STACKTOP; //@line 8303
        STACKTOP = sp; //@line 8304
        return 0; //@line 8304
       }
       _emscripten_free_async_context($AsyncCtx44 | 0); //@line 8306
       $250 = $0 + 1892 | 0; //@line 8307
       $251 = HEAP32[$250 >> 2] | 0; //@line 8308
       if (!$251) {
        $$029 = $197; //@line 8311
        break L111;
       }
       $255 = HEAP32[$0 + 2288 >> 2] | 0; //@line 8316
       $257 = HEAP32[$251 + 4 >> 2] | 0; //@line 8318
       $AsyncCtx36 = _emscripten_alloc_async_context(32, sp) | 0; //@line 8319
       FUNCTION_TABLE_vii[$257 & 31]($6, $0 + 1880 | 0); //@line 8320
       if (___async) {
        HEAP32[$AsyncCtx36 >> 2] = 272; //@line 8323
        HEAP32[$AsyncCtx36 + 4 >> 2] = $250; //@line 8325
        HEAP32[$AsyncCtx36 + 8 >> 2] = $6; //@line 8327
        HEAP32[$AsyncCtx36 + 12 >> 2] = $255; //@line 8329
        HEAP32[$AsyncCtx36 + 16 >> 2] = $6; //@line 8331
        HEAP32[$AsyncCtx36 + 20 >> 2] = $197; //@line 8333
        HEAP32[$AsyncCtx36 + 24 >> 2] = $7; //@line 8335
        HEAP32[$AsyncCtx36 + 28 >> 2] = $1; //@line 8337
        sp = STACKTOP; //@line 8338
        STACKTOP = sp; //@line 8339
        return 0; //@line 8339
       }
       _emscripten_free_async_context($AsyncCtx36 | 0); //@line 8341
       $265 = $6 + 12 | 0; //@line 8343
       HEAP32[$265 >> 2] = HEAP32[$250 >> 2]; //@line 8344
       $AsyncCtx94 = _emscripten_alloc_async_context(24, sp) | 0; //@line 8345
       $266 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($255, $6, 6) | 0; //@line 8346
       if (___async) {
        HEAP32[$AsyncCtx94 >> 2] = 273; //@line 8349
        HEAP32[$AsyncCtx94 + 4 >> 2] = $265; //@line 8351
        HEAP32[$AsyncCtx94 + 8 >> 2] = $6; //@line 8353
        HEAP32[$AsyncCtx94 + 12 >> 2] = $197; //@line 8355
        HEAP32[$AsyncCtx94 + 16 >> 2] = $7; //@line 8357
        HEAP32[$AsyncCtx94 + 20 >> 2] = $1; //@line 8359
        sp = STACKTOP; //@line 8360
        STACKTOP = sp; //@line 8361
        return 0; //@line 8361
       }
       _emscripten_free_async_context($AsyncCtx94 | 0); //@line 8363
       $272 = HEAP32[$265 >> 2] | 0; //@line 8364
       do {
        if ($272 | 0) {
         $275 = HEAP32[$272 + 8 >> 2] | 0; //@line 8369
         $AsyncCtx40 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8370
         FUNCTION_TABLE_vi[$275 & 1023]($6); //@line 8371
         if (___async) {
          HEAP32[$AsyncCtx40 >> 2] = 274; //@line 8374
          HEAP32[$AsyncCtx40 + 4 >> 2] = $266; //@line 8376
          HEAP32[$AsyncCtx40 + 8 >> 2] = $197; //@line 8378
          HEAP32[$AsyncCtx40 + 12 >> 2] = $7; //@line 8380
          HEAP32[$AsyncCtx40 + 16 >> 2] = $1; //@line 8382
          sp = STACKTOP; //@line 8383
          STACKTOP = sp; //@line 8384
          return 0; //@line 8384
         } else {
          _emscripten_free_async_context($AsyncCtx40 | 0); //@line 8386
          break;
         }
        }
       } while (0);
       if ($266 | 0) {
        $$029 = $197; //@line 8393
        break L111;
       }
       $AsyncCtx110 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8396
       _mbed_assert_internal(13142, 12226, 1251); //@line 8397
       if (___async) {
        HEAP32[$AsyncCtx110 >> 2] = 275; //@line 8400
        HEAP32[$AsyncCtx110 + 4 >> 2] = $197; //@line 8402
        HEAP32[$AsyncCtx110 + 8 >> 2] = $7; //@line 8404
        HEAP32[$AsyncCtx110 + 12 >> 2] = $1; //@line 8406
        sp = STACKTOP; //@line 8407
        STACKTOP = sp; //@line 8408
        return 0; //@line 8408
       } else {
        _emscripten_free_async_context($AsyncCtx110 | 0); //@line 8410
        $$029 = $197; //@line 8411
        break L111;
       }
      }
     }
    } else {
     $$029 = 0; //@line 8417
    }
   } while (0);
   HEAP32[$7 >> 2] = 6; //@line 8420
   $$1 = $$029; //@line 8421
   STACKTOP = sp; //@line 8422
   return $$1 | 0; //@line 8422
  }
 case 6:
  {
   $$1 = -1018; //@line 8426
   STACKTOP = sp; //@line 8427
   return $$1 | 0; //@line 8427
  }
 case 0:
  {
   $$1 = -1011; //@line 8431
   STACKTOP = sp; //@line 8432
   return $$1 | 0; //@line 8432
  }
 default:
  {
   $$1 = -1002; //@line 8436
   STACKTOP = sp; //@line 8437
   return $$1 | 0; //@line 8437
  }
 }
 return 0; //@line 8440
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_91($0) {
 $0 = $0 | 0;
 var $$0174 = 0, $$0174209 = 0, $$0174210 = 0, $$1169 = 0, $$1171 = 0, $$1173 = 0, $$1175 = 0, $$sink207 = 0, $10 = 0, $105 = 0, $106 = 0, $12 = 0, $124 = 0, $139 = 0, $14 = 0, $140 = 0, $142 = 0, $144 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $222 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $272 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $284 = 0, $286 = 0, $287 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $90 = 0, $97 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx6 = 0, $sext = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 34419
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34421
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34423
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34425
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34427
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34429
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34431
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34433
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 34435
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 34437
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 34439
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 34441
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 34443
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 34445
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 34447
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 34449
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 34451
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 34453
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 34455
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 34457
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 34459
 $42 = HEAP8[$0 + 84 >> 0] | 0; //@line 34461
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 34463
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 34465
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 34467
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 34469
 $51 = HEAP8[$16 >> 0] | 0; //@line 34470
 $trunc = ($51 & 255) >>> 5; //@line 34471
 switch ($trunc & 7) {
 case 1:
  {
   $52 = $8 + 372 | 0; //@line 34475
   if (HEAP8[$52 >> 0] | 0) {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 4 >> 2] = 1; //@line 34481
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 34482
    __ZN7LoRaMac21prepare_rx_done_abortEv($8); //@line 34483
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 394; //@line 34486
     $57 = $ReallocAsyncCtx13 + 4 | 0; //@line 34487
     HEAP32[$57 >> 2] = $2; //@line 34488
     $58 = $ReallocAsyncCtx13 + 8 | 0; //@line 34489
     HEAP32[$58 >> 2] = $4; //@line 34490
     sp = STACKTOP; //@line 34491
     return;
    }
    ___async_unwind = 0; //@line 34494
    HEAP32[$ReallocAsyncCtx13 >> 2] = 394; //@line 34495
    $57 = $ReallocAsyncCtx13 + 4 | 0; //@line 34496
    HEAP32[$57 >> 2] = $2; //@line 34497
    $58 = $ReallocAsyncCtx13 + 8 | 0; //@line 34498
    HEAP32[$58 >> 2] = $4; //@line 34499
    sp = STACKTOP; //@line 34500
    return;
   }
   $62 = $8 + 908 | 0; //@line 34506
   $64 = $8 + 638 | 0; //@line 34508
   $65 = $8 + 639 | 0; //@line 34509
   if (__Z18decrypt_join_framePKhtS0_Ph($16 + 1 | 0, $12 + 65535 & 65535, HEAP32[$62 >> 2] | 0, $65) | 0) {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 4 >> 2] = 13; //@line 34515
    return;
   }
   HEAP8[$64 >> 0] = $51; //@line 34518
   $70 = $12 + -4 | 0; //@line 34519
   $72 = HEAP32[$62 >> 2] | 0; //@line 34521
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(64) | 0; //@line 34522
   $73 = __Z22compute_join_frame_micPKhtS0_Pj($64, $70 & 65535, $72, $32) | 0; //@line 34523
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 395; //@line 34526
    $74 = $ReallocAsyncCtx16 + 4 | 0; //@line 34527
    HEAP32[$74 >> 2] = $8; //@line 34528
    $75 = $ReallocAsyncCtx16 + 8 | 0; //@line 34529
    HEAP32[$75 >> 2] = $70; //@line 34530
    $76 = $ReallocAsyncCtx16 + 12 | 0; //@line 34531
    HEAP32[$76 >> 2] = $12; //@line 34532
    $77 = $ReallocAsyncCtx16 + 16 | 0; //@line 34533
    HEAP32[$77 >> 2] = $32; //@line 34534
    $78 = $ReallocAsyncCtx16 + 20 | 0; //@line 34535
    HEAP32[$78 >> 2] = $6; //@line 34536
    $79 = $ReallocAsyncCtx16 + 24 | 0; //@line 34537
    HEAP32[$79 >> 2] = $2; //@line 34538
    $80 = $ReallocAsyncCtx16 + 28 | 0; //@line 34539
    HEAP32[$80 >> 2] = $4; //@line 34540
    $81 = $ReallocAsyncCtx16 + 32 | 0; //@line 34541
    HEAP32[$81 >> 2] = $62; //@line 34542
    $82 = $ReallocAsyncCtx16 + 36 | 0; //@line 34543
    HEAP32[$82 >> 2] = $65; //@line 34544
    $83 = $ReallocAsyncCtx16 + 40 | 0; //@line 34545
    HEAP32[$83 >> 2] = $18; //@line 34546
    $84 = $ReallocAsyncCtx16 + 44 | 0; //@line 34547
    HEAP32[$84 >> 2] = $20; //@line 34548
    $85 = $ReallocAsyncCtx16 + 48 | 0; //@line 34549
    HEAP32[$85 >> 2] = $14; //@line 34550
    $86 = $ReallocAsyncCtx16 + 52 | 0; //@line 34551
    HEAP32[$86 >> 2] = $22; //@line 34552
    $87 = $ReallocAsyncCtx16 + 56 | 0; //@line 34553
    HEAP32[$87 >> 2] = $10; //@line 34554
    $88 = $ReallocAsyncCtx16 + 60 | 0; //@line 34555
    HEAP32[$88 >> 2] = $52; //@line 34556
    sp = STACKTOP; //@line 34557
    return;
   }
   HEAP32[___async_retval >> 2] = $73; //@line 34561
   ___async_unwind = 0; //@line 34562
   HEAP32[$ReallocAsyncCtx16 >> 2] = 395; //@line 34563
   $74 = $ReallocAsyncCtx16 + 4 | 0; //@line 34564
   HEAP32[$74 >> 2] = $8; //@line 34565
   $75 = $ReallocAsyncCtx16 + 8 | 0; //@line 34566
   HEAP32[$75 >> 2] = $70; //@line 34567
   $76 = $ReallocAsyncCtx16 + 12 | 0; //@line 34568
   HEAP32[$76 >> 2] = $12; //@line 34569
   $77 = $ReallocAsyncCtx16 + 16 | 0; //@line 34570
   HEAP32[$77 >> 2] = $32; //@line 34571
   $78 = $ReallocAsyncCtx16 + 20 | 0; //@line 34572
   HEAP32[$78 >> 2] = $6; //@line 34573
   $79 = $ReallocAsyncCtx16 + 24 | 0; //@line 34574
   HEAP32[$79 >> 2] = $2; //@line 34575
   $80 = $ReallocAsyncCtx16 + 28 | 0; //@line 34576
   HEAP32[$80 >> 2] = $4; //@line 34577
   $81 = $ReallocAsyncCtx16 + 32 | 0; //@line 34578
   HEAP32[$81 >> 2] = $62; //@line 34579
   $82 = $ReallocAsyncCtx16 + 36 | 0; //@line 34580
   HEAP32[$82 >> 2] = $65; //@line 34581
   $83 = $ReallocAsyncCtx16 + 40 | 0; //@line 34582
   HEAP32[$83 >> 2] = $18; //@line 34583
   $84 = $ReallocAsyncCtx16 + 44 | 0; //@line 34584
   HEAP32[$84 >> 2] = $20; //@line 34585
   $85 = $ReallocAsyncCtx16 + 48 | 0; //@line 34586
   HEAP32[$85 >> 2] = $14; //@line 34587
   $86 = $ReallocAsyncCtx16 + 52 | 0; //@line 34588
   HEAP32[$86 >> 2] = $22; //@line 34589
   $87 = $ReallocAsyncCtx16 + 56 | 0; //@line 34590
   HEAP32[$87 >> 2] = $10; //@line 34591
   $88 = $ReallocAsyncCtx16 + 60 | 0; //@line 34592
   HEAP32[$88 >> 2] = $52; //@line 34593
   sp = STACKTOP; //@line 34594
   return;
  }
 case 3:
 case 5:
  {
   $90 = HEAP32[$10 >> 2] | 0; //@line 34599
   $97 = __ZN7LoRaPHY15get_max_payloadEhb($90, HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 10 >> 0] | 0, (HEAP8[$8 + 369 >> 0] | 0) != 0) | 0; //@line 34606
   $sext = ($12 << 16) + -851968 | 0; //@line 34608
   if (((($sext | 0) < 0 ? 0 : $sext >> 16) | 0) > ($97 & 255 | 0)) {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 4 >> 2] = 1; //@line 34617
    $ReallocAsyncCtx12 = _emscripten_realloc_async_context(12) | 0; //@line 34618
    __ZN7LoRaMac21prepare_rx_done_abortEv($8); //@line 34619
    if (___async) {
     HEAP32[$ReallocAsyncCtx12 >> 2] = 397; //@line 34622
     $105 = $ReallocAsyncCtx12 + 4 | 0; //@line 34623
     HEAP32[$105 >> 2] = $2; //@line 34624
     $106 = $ReallocAsyncCtx12 + 8 | 0; //@line 34625
     HEAP32[$106 >> 2] = $4; //@line 34626
     sp = STACKTOP; //@line 34627
     return;
    }
    ___async_unwind = 0; //@line 34630
    HEAP32[$ReallocAsyncCtx12 >> 2] = 397; //@line 34631
    $105 = $ReallocAsyncCtx12 + 4 | 0; //@line 34632
    HEAP32[$105 >> 2] = $2; //@line 34633
    $106 = $ReallocAsyncCtx12 + 8 | 0; //@line 34634
    HEAP32[$106 >> 2] = $4; //@line 34635
    sp = STACKTOP; //@line 34636
    return;
   }
   $124 = HEAPU8[$16 + 2 >> 0] << 8 | HEAPU8[$16 + 1 >> 0] | HEAPU8[$16 + 3 >> 0] << 16 | HEAPU8[$16 + 4 >> 0] << 24; //@line 34656
   L32 : do {
    if (($124 | 0) == (HEAP32[$8 + 952 >> 2] | 0)) {
     $$1169 = 0; //@line 34663
     $$1171 = $20; //@line 34663
     $$1173 = $18; //@line 34663
     $$1175 = 0; //@line 34663
     $$sink207 = $8 + 960 | 0; //@line 34663
    } else {
     $$0174209 = HEAP32[$8 + 1208 >> 2] | 0; //@line 34666
     L35 : do {
      if ($$0174209 | 0) {
       $$0174210 = $$0174209; //@line 34670
       while (1) {
        if (($124 | 0) == (HEAP32[$$0174210 >> 2] | 0)) {
         break;
        }
        $$0174 = HEAP32[$$0174210 + 40 >> 2] | 0; //@line 34678
        if (!$$0174) {
         break L35;
        } else {
         $$0174210 = $$0174; //@line 34683
        }
       }
       $$1169 = 1; //@line 34689
       $$1171 = $$0174210 + 20 | 0; //@line 34689
       $$1173 = $$0174210 + 4 | 0; //@line 34689
       $$1175 = $$0174210; //@line 34689
       $$sink207 = $$0174210 + 36 | 0; //@line 34689
       break L32;
      }
     } while (0);
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 4 >> 2] = 11; //@line 34695
     $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 34696
     __ZN7LoRaMac21prepare_rx_done_abortEv($8); //@line 34697
     if (___async) {
      HEAP32[$ReallocAsyncCtx11 >> 2] = 398; //@line 34700
      $139 = $ReallocAsyncCtx11 + 4 | 0; //@line 34701
      HEAP32[$139 >> 2] = $2; //@line 34702
      $140 = $ReallocAsyncCtx11 + 8 | 0; //@line 34703
      HEAP32[$140 >> 2] = $4; //@line 34704
      sp = STACKTOP; //@line 34705
      return;
     }
     ___async_unwind = 0; //@line 34708
     HEAP32[$ReallocAsyncCtx11 >> 2] = 398; //@line 34709
     $139 = $ReallocAsyncCtx11 + 4 | 0; //@line 34710
     HEAP32[$139 >> 2] = $2; //@line 34711
     $140 = $ReallocAsyncCtx11 + 8 | 0; //@line 34712
     HEAP32[$140 >> 2] = $4; //@line 34713
     sp = STACKTOP; //@line 34714
     return;
    }
   } while (0);
   $142 = HEAP32[$$sink207 >> 2] | 0; //@line 34718
   $144 = HEAP8[$16 + 5 >> 0] | 0; //@line 34720
   $153 = $144 & 15; //@line 34729
   $154 = $153 & 255; //@line 34730
   $155 = $154 + 8 | 0; //@line 34731
   $156 = $155 & 255; //@line 34732
   $157 = $12 + -4 | 0; //@line 34733
   $178 = HEAPU8[$16 + ($12 + -3) >> 0] << 8 | HEAPU8[$16 + $157 >> 0] | HEAPU8[$16 + ($12 + -2) >> 0] << 16 | HEAPU8[$16 + ($12 + -1) >> 0] << 24; //@line 34754
   $179 = (HEAPU8[$16 + 7 >> 0] << 8 | HEAPU8[$16 + 6 >> 0]) - $142 | 0; //@line 34755
   $180 = $179 & 65535; //@line 34756
   if ($180 >>> 0 < 32768) {
    $182 = $180 + $142 | 0; //@line 34759
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(148) | 0; //@line 34761
    __Z11compute_micPKhtS0_jhjPj($16, $157 & 65535, $$1173, $124, 1, $182, $32) | 0; //@line 34762
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 399; //@line 34765
     $184 = $ReallocAsyncCtx15 + 4 | 0; //@line 34766
     HEAP32[$184 >> 2] = $46; //@line 34767
     $185 = $ReallocAsyncCtx15 + 8 | 0; //@line 34768
     HEAP32[$185 >> 2] = $2; //@line 34769
     $186 = $ReallocAsyncCtx15 + 12 | 0; //@line 34770
     HEAP32[$186 >> 2] = $124; //@line 34771
     $187 = $ReallocAsyncCtx15 + 16 | 0; //@line 34772
     HEAP32[$187 >> 2] = $$1173; //@line 34773
     $188 = $ReallocAsyncCtx15 + 20 | 0; //@line 34774
     HEAP32[$188 >> 2] = $10; //@line 34775
     $189 = $ReallocAsyncCtx15 + 24 | 0; //@line 34776
     HEAP32[$189 >> 2] = $$1175; //@line 34777
     $190 = $ReallocAsyncCtx15 + 28 | 0; //@line 34778
     HEAP32[$190 >> 2] = $40; //@line 34779
     $191 = $ReallocAsyncCtx15 + 32 | 0; //@line 34780
     HEAP8[$191 >> 0] = $$1169; //@line 34781
     $192 = $ReallocAsyncCtx15 + 36 | 0; //@line 34782
     HEAP32[$192 >> 2] = $157; //@line 34783
     $193 = $ReallocAsyncCtx15 + 40 | 0; //@line 34784
     HEAP32[$193 >> 2] = $38; //@line 34785
     $194 = $ReallocAsyncCtx15 + 44 | 0; //@line 34786
     HEAP32[$194 >> 2] = $$1171; //@line 34787
     $195 = $ReallocAsyncCtx15 + 48 | 0; //@line 34788
     HEAP32[$195 >> 2] = $44; //@line 34789
     $196 = $ReallocAsyncCtx15 + 52 | 0; //@line 34790
     HEAP32[$196 >> 2] = $182; //@line 34791
     $197 = $ReallocAsyncCtx15 + 56 | 0; //@line 34792
     HEAP32[$197 >> 2] = $6; //@line 34793
     $198 = $ReallocAsyncCtx15 + 60 | 0; //@line 34794
     HEAP32[$198 >> 2] = $32; //@line 34795
     $199 = $ReallocAsyncCtx15 + 64 | 0; //@line 34796
     HEAP32[$199 >> 2] = $36; //@line 34797
     $200 = $ReallocAsyncCtx15 + 68 | 0; //@line 34798
     HEAP32[$200 >> 2] = $28; //@line 34799
     $201 = $ReallocAsyncCtx15 + 72 | 0; //@line 34800
     HEAP32[$201 >> 2] = $34; //@line 34801
     $202 = $ReallocAsyncCtx15 + 76 | 0; //@line 34802
     HEAP32[$202 >> 2] = $30; //@line 34803
     $203 = $ReallocAsyncCtx15 + 80 | 0; //@line 34804
     HEAP8[$203 >> 0] = $153; //@line 34805
     $204 = $ReallocAsyncCtx15 + 84 | 0; //@line 34806
     HEAP32[$204 >> 2] = $178; //@line 34807
     $205 = $ReallocAsyncCtx15 + 88 | 0; //@line 34808
     HEAP32[$205 >> 2] = $50; //@line 34809
     $206 = $ReallocAsyncCtx15 + 92 | 0; //@line 34810
     HEAP8[$206 >> 0] = $trunc; //@line 34811
     $207 = $ReallocAsyncCtx15 + 96 | 0; //@line 34812
     HEAP32[$207 >> 2] = $8; //@line 34813
     $208 = $ReallocAsyncCtx15 + 100 | 0; //@line 34814
     HEAP8[$208 >> 0] = $156; //@line 34815
     $209 = $ReallocAsyncCtx15 + 104 | 0; //@line 34816
     HEAP32[$209 >> 2] = $16; //@line 34817
     $210 = $ReallocAsyncCtx15 + 108 | 0; //@line 34818
     HEAP32[$210 >> 2] = $24; //@line 34819
     $211 = $ReallocAsyncCtx15 + 112 | 0; //@line 34820
     HEAP8[$211 >> 0] = $42; //@line 34821
     $212 = $ReallocAsyncCtx15 + 116 | 0; //@line 34822
     HEAP32[$212 >> 2] = $26; //@line 34823
     $213 = $ReallocAsyncCtx15 + 120 | 0; //@line 34824
     HEAP32[$213 >> 2] = $14; //@line 34825
     $214 = $ReallocAsyncCtx15 + 124 | 0; //@line 34826
     HEAP8[$214 >> 0] = $144; //@line 34827
     $215 = $ReallocAsyncCtx15 + 128 | 0; //@line 34828
     HEAP32[$215 >> 2] = $154; //@line 34829
     $216 = $ReallocAsyncCtx15 + 132 | 0; //@line 34830
     HEAP32[$216 >> 2] = $4; //@line 34831
     $217 = $ReallocAsyncCtx15 + 136 | 0; //@line 34832
     HEAP32[$217 >> 2] = $180; //@line 34833
     $218 = $ReallocAsyncCtx15 + 140 | 0; //@line 34834
     HEAP32[$218 >> 2] = $155; //@line 34835
     $219 = $ReallocAsyncCtx15 + 144 | 0; //@line 34836
     HEAP32[$219 >> 2] = $48; //@line 34837
     sp = STACKTOP; //@line 34838
     return;
    }
    ___async_unwind = 0; //@line 34841
    HEAP32[$ReallocAsyncCtx15 >> 2] = 399; //@line 34842
    $184 = $ReallocAsyncCtx15 + 4 | 0; //@line 34843
    HEAP32[$184 >> 2] = $46; //@line 34844
    $185 = $ReallocAsyncCtx15 + 8 | 0; //@line 34845
    HEAP32[$185 >> 2] = $2; //@line 34846
    $186 = $ReallocAsyncCtx15 + 12 | 0; //@line 34847
    HEAP32[$186 >> 2] = $124; //@line 34848
    $187 = $ReallocAsyncCtx15 + 16 | 0; //@line 34849
    HEAP32[$187 >> 2] = $$1173; //@line 34850
    $188 = $ReallocAsyncCtx15 + 20 | 0; //@line 34851
    HEAP32[$188 >> 2] = $10; //@line 34852
    $189 = $ReallocAsyncCtx15 + 24 | 0; //@line 34853
    HEAP32[$189 >> 2] = $$1175; //@line 34854
    $190 = $ReallocAsyncCtx15 + 28 | 0; //@line 34855
    HEAP32[$190 >> 2] = $40; //@line 34856
    $191 = $ReallocAsyncCtx15 + 32 | 0; //@line 34857
    HEAP8[$191 >> 0] = $$1169; //@line 34858
    $192 = $ReallocAsyncCtx15 + 36 | 0; //@line 34859
    HEAP32[$192 >> 2] = $157; //@line 34860
    $193 = $ReallocAsyncCtx15 + 40 | 0; //@line 34861
    HEAP32[$193 >> 2] = $38; //@line 34862
    $194 = $ReallocAsyncCtx15 + 44 | 0; //@line 34863
    HEAP32[$194 >> 2] = $$1171; //@line 34864
    $195 = $ReallocAsyncCtx15 + 48 | 0; //@line 34865
    HEAP32[$195 >> 2] = $44; //@line 34866
    $196 = $ReallocAsyncCtx15 + 52 | 0; //@line 34867
    HEAP32[$196 >> 2] = $182; //@line 34868
    $197 = $ReallocAsyncCtx15 + 56 | 0; //@line 34869
    HEAP32[$197 >> 2] = $6; //@line 34870
    $198 = $ReallocAsyncCtx15 + 60 | 0; //@line 34871
    HEAP32[$198 >> 2] = $32; //@line 34872
    $199 = $ReallocAsyncCtx15 + 64 | 0; //@line 34873
    HEAP32[$199 >> 2] = $36; //@line 34874
    $200 = $ReallocAsyncCtx15 + 68 | 0; //@line 34875
    HEAP32[$200 >> 2] = $28; //@line 34876
    $201 = $ReallocAsyncCtx15 + 72 | 0; //@line 34877
    HEAP32[$201 >> 2] = $34; //@line 34878
    $202 = $ReallocAsyncCtx15 + 76 | 0; //@line 34879
    HEAP32[$202 >> 2] = $30; //@line 34880
    $203 = $ReallocAsyncCtx15 + 80 | 0; //@line 34881
    HEAP8[$203 >> 0] = $153; //@line 34882
    $204 = $ReallocAsyncCtx15 + 84 | 0; //@line 34883
    HEAP32[$204 >> 2] = $178; //@line 34884
    $205 = $ReallocAsyncCtx15 + 88 | 0; //@line 34885
    HEAP32[$205 >> 2] = $50; //@line 34886
    $206 = $ReallocAsyncCtx15 + 92 | 0; //@line 34887
    HEAP8[$206 >> 0] = $trunc; //@line 34888
    $207 = $ReallocAsyncCtx15 + 96 | 0; //@line 34889
    HEAP32[$207 >> 2] = $8; //@line 34890
    $208 = $ReallocAsyncCtx15 + 100 | 0; //@line 34891
    HEAP8[$208 >> 0] = $156; //@line 34892
    $209 = $ReallocAsyncCtx15 + 104 | 0; //@line 34893
    HEAP32[$209 >> 2] = $16; //@line 34894
    $210 = $ReallocAsyncCtx15 + 108 | 0; //@line 34895
    HEAP32[$210 >> 2] = $24; //@line 34896
    $211 = $ReallocAsyncCtx15 + 112 | 0; //@line 34897
    HEAP8[$211 >> 0] = $42; //@line 34898
    $212 = $ReallocAsyncCtx15 + 116 | 0; //@line 34899
    HEAP32[$212 >> 2] = $26; //@line 34900
    $213 = $ReallocAsyncCtx15 + 120 | 0; //@line 34901
    HEAP32[$213 >> 2] = $14; //@line 34902
    $214 = $ReallocAsyncCtx15 + 124 | 0; //@line 34903
    HEAP8[$214 >> 0] = $144; //@line 34904
    $215 = $ReallocAsyncCtx15 + 128 | 0; //@line 34905
    HEAP32[$215 >> 2] = $154; //@line 34906
    $216 = $ReallocAsyncCtx15 + 132 | 0; //@line 34907
    HEAP32[$216 >> 2] = $4; //@line 34908
    $217 = $ReallocAsyncCtx15 + 136 | 0; //@line 34909
    HEAP32[$217 >> 2] = $180; //@line 34910
    $218 = $ReallocAsyncCtx15 + 140 | 0; //@line 34911
    HEAP32[$218 >> 2] = $155; //@line 34912
    $219 = $ReallocAsyncCtx15 + 144 | 0; //@line 34913
    HEAP32[$219 >> 2] = $48; //@line 34914
    sp = STACKTOP; //@line 34915
    return;
   } else {
    $222 = $142 + 65536 + ($179 << 16 >> 16) | 0; //@line 34921
    $ReallocAsyncCtx14 = _emscripten_realloc_async_context(152) | 0; //@line 34923
    __Z11compute_micPKhtS0_jhjPj($16, $157 & 65535, $$1173, $124, 1, $222, $32) | 0; //@line 34924
    if (___async) {
     HEAP32[$ReallocAsyncCtx14 >> 2] = 400; //@line 34927
     $224 = $ReallocAsyncCtx14 + 4 | 0; //@line 34928
     HEAP32[$224 >> 2] = $46; //@line 34929
     $225 = $ReallocAsyncCtx14 + 8 | 0; //@line 34930
     HEAP32[$225 >> 2] = $2; //@line 34931
     $226 = $ReallocAsyncCtx14 + 12 | 0; //@line 34932
     HEAP32[$226 >> 2] = $124; //@line 34933
     $227 = $ReallocAsyncCtx14 + 16 | 0; //@line 34934
     HEAP32[$227 >> 2] = $$1173; //@line 34935
     $228 = $ReallocAsyncCtx14 + 20 | 0; //@line 34936
     HEAP32[$228 >> 2] = $10; //@line 34937
     $229 = $ReallocAsyncCtx14 + 24 | 0; //@line 34938
     HEAP32[$229 >> 2] = $$1175; //@line 34939
     $230 = $ReallocAsyncCtx14 + 28 | 0; //@line 34940
     HEAP32[$230 >> 2] = $40; //@line 34941
     $231 = $ReallocAsyncCtx14 + 32 | 0; //@line 34942
     HEAP8[$231 >> 0] = $$1169; //@line 34943
     $232 = $ReallocAsyncCtx14 + 36 | 0; //@line 34944
     HEAP32[$232 >> 2] = $157; //@line 34945
     $233 = $ReallocAsyncCtx14 + 40 | 0; //@line 34946
     HEAP32[$233 >> 2] = $38; //@line 34947
     $234 = $ReallocAsyncCtx14 + 44 | 0; //@line 34948
     HEAP32[$234 >> 2] = $$1171; //@line 34949
     $235 = $ReallocAsyncCtx14 + 48 | 0; //@line 34950
     HEAP32[$235 >> 2] = $44; //@line 34951
     $236 = $ReallocAsyncCtx14 + 52 | 0; //@line 34952
     HEAP32[$236 >> 2] = $6; //@line 34953
     $237 = $ReallocAsyncCtx14 + 56 | 0; //@line 34954
     HEAP32[$237 >> 2] = $142; //@line 34955
     $238 = $ReallocAsyncCtx14 + 60 | 0; //@line 34956
     HEAP32[$238 >> 2] = $222; //@line 34957
     $239 = $ReallocAsyncCtx14 + 64 | 0; //@line 34958
     HEAP32[$239 >> 2] = $32; //@line 34959
     $240 = $ReallocAsyncCtx14 + 68 | 0; //@line 34960
     HEAP32[$240 >> 2] = $36; //@line 34961
     $241 = $ReallocAsyncCtx14 + 72 | 0; //@line 34962
     HEAP32[$241 >> 2] = $28; //@line 34963
     $242 = $ReallocAsyncCtx14 + 76 | 0; //@line 34964
     HEAP32[$242 >> 2] = $34; //@line 34965
     $243 = $ReallocAsyncCtx14 + 80 | 0; //@line 34966
     HEAP32[$243 >> 2] = $30; //@line 34967
     $244 = $ReallocAsyncCtx14 + 84 | 0; //@line 34968
     HEAP8[$244 >> 0] = $153; //@line 34969
     $245 = $ReallocAsyncCtx14 + 88 | 0; //@line 34970
     HEAP32[$245 >> 2] = $178; //@line 34971
     $246 = $ReallocAsyncCtx14 + 92 | 0; //@line 34972
     HEAP32[$246 >> 2] = $50; //@line 34973
     $247 = $ReallocAsyncCtx14 + 96 | 0; //@line 34974
     HEAP8[$247 >> 0] = $trunc; //@line 34975
     $248 = $ReallocAsyncCtx14 + 100 | 0; //@line 34976
     HEAP32[$248 >> 2] = $8; //@line 34977
     $249 = $ReallocAsyncCtx14 + 104 | 0; //@line 34978
     HEAP8[$249 >> 0] = $156; //@line 34979
     $250 = $ReallocAsyncCtx14 + 108 | 0; //@line 34980
     HEAP32[$250 >> 2] = $16; //@line 34981
     $251 = $ReallocAsyncCtx14 + 112 | 0; //@line 34982
     HEAP32[$251 >> 2] = $24; //@line 34983
     $252 = $ReallocAsyncCtx14 + 116 | 0; //@line 34984
     HEAP8[$252 >> 0] = $42; //@line 34985
     $253 = $ReallocAsyncCtx14 + 120 | 0; //@line 34986
     HEAP32[$253 >> 2] = $26; //@line 34987
     $254 = $ReallocAsyncCtx14 + 124 | 0; //@line 34988
     HEAP32[$254 >> 2] = $14; //@line 34989
     $255 = $ReallocAsyncCtx14 + 128 | 0; //@line 34990
     HEAP8[$255 >> 0] = $144; //@line 34991
     $256 = $ReallocAsyncCtx14 + 132 | 0; //@line 34992
     HEAP32[$256 >> 2] = $154; //@line 34993
     $257 = $ReallocAsyncCtx14 + 136 | 0; //@line 34994
     HEAP32[$257 >> 2] = $4; //@line 34995
     $258 = $ReallocAsyncCtx14 + 140 | 0; //@line 34996
     HEAP32[$258 >> 2] = $180; //@line 34997
     $259 = $ReallocAsyncCtx14 + 144 | 0; //@line 34998
     HEAP32[$259 >> 2] = $155; //@line 34999
     $260 = $ReallocAsyncCtx14 + 148 | 0; //@line 35000
     HEAP32[$260 >> 2] = $48; //@line 35001
     sp = STACKTOP; //@line 35002
     return;
    }
    ___async_unwind = 0; //@line 35005
    HEAP32[$ReallocAsyncCtx14 >> 2] = 400; //@line 35006
    $224 = $ReallocAsyncCtx14 + 4 | 0; //@line 35007
    HEAP32[$224 >> 2] = $46; //@line 35008
    $225 = $ReallocAsyncCtx14 + 8 | 0; //@line 35009
    HEAP32[$225 >> 2] = $2; //@line 35010
    $226 = $ReallocAsyncCtx14 + 12 | 0; //@line 35011
    HEAP32[$226 >> 2] = $124; //@line 35012
    $227 = $ReallocAsyncCtx14 + 16 | 0; //@line 35013
    HEAP32[$227 >> 2] = $$1173; //@line 35014
    $228 = $ReallocAsyncCtx14 + 20 | 0; //@line 35015
    HEAP32[$228 >> 2] = $10; //@line 35016
    $229 = $ReallocAsyncCtx14 + 24 | 0; //@line 35017
    HEAP32[$229 >> 2] = $$1175; //@line 35018
    $230 = $ReallocAsyncCtx14 + 28 | 0; //@line 35019
    HEAP32[$230 >> 2] = $40; //@line 35020
    $231 = $ReallocAsyncCtx14 + 32 | 0; //@line 35021
    HEAP8[$231 >> 0] = $$1169; //@line 35022
    $232 = $ReallocAsyncCtx14 + 36 | 0; //@line 35023
    HEAP32[$232 >> 2] = $157; //@line 35024
    $233 = $ReallocAsyncCtx14 + 40 | 0; //@line 35025
    HEAP32[$233 >> 2] = $38; //@line 35026
    $234 = $ReallocAsyncCtx14 + 44 | 0; //@line 35027
    HEAP32[$234 >> 2] = $$1171; //@line 35028
    $235 = $ReallocAsyncCtx14 + 48 | 0; //@line 35029
    HEAP32[$235 >> 2] = $44; //@line 35030
    $236 = $ReallocAsyncCtx14 + 52 | 0; //@line 35031
    HEAP32[$236 >> 2] = $6; //@line 35032
    $237 = $ReallocAsyncCtx14 + 56 | 0; //@line 35033
    HEAP32[$237 >> 2] = $142; //@line 35034
    $238 = $ReallocAsyncCtx14 + 60 | 0; //@line 35035
    HEAP32[$238 >> 2] = $222; //@line 35036
    $239 = $ReallocAsyncCtx14 + 64 | 0; //@line 35037
    HEAP32[$239 >> 2] = $32; //@line 35038
    $240 = $ReallocAsyncCtx14 + 68 | 0; //@line 35039
    HEAP32[$240 >> 2] = $36; //@line 35040
    $241 = $ReallocAsyncCtx14 + 72 | 0; //@line 35041
    HEAP32[$241 >> 2] = $28; //@line 35042
    $242 = $ReallocAsyncCtx14 + 76 | 0; //@line 35043
    HEAP32[$242 >> 2] = $34; //@line 35044
    $243 = $ReallocAsyncCtx14 + 80 | 0; //@line 35045
    HEAP32[$243 >> 2] = $30; //@line 35046
    $244 = $ReallocAsyncCtx14 + 84 | 0; //@line 35047
    HEAP8[$244 >> 0] = $153; //@line 35048
    $245 = $ReallocAsyncCtx14 + 88 | 0; //@line 35049
    HEAP32[$245 >> 2] = $178; //@line 35050
    $246 = $ReallocAsyncCtx14 + 92 | 0; //@line 35051
    HEAP32[$246 >> 2] = $50; //@line 35052
    $247 = $ReallocAsyncCtx14 + 96 | 0; //@line 35053
    HEAP8[$247 >> 0] = $trunc; //@line 35054
    $248 = $ReallocAsyncCtx14 + 100 | 0; //@line 35055
    HEAP32[$248 >> 2] = $8; //@line 35056
    $249 = $ReallocAsyncCtx14 + 104 | 0; //@line 35057
    HEAP8[$249 >> 0] = $156; //@line 35058
    $250 = $ReallocAsyncCtx14 + 108 | 0; //@line 35059
    HEAP32[$250 >> 2] = $16; //@line 35060
    $251 = $ReallocAsyncCtx14 + 112 | 0; //@line 35061
    HEAP32[$251 >> 2] = $24; //@line 35062
    $252 = $ReallocAsyncCtx14 + 116 | 0; //@line 35063
    HEAP8[$252 >> 0] = $42; //@line 35064
    $253 = $ReallocAsyncCtx14 + 120 | 0; //@line 35065
    HEAP32[$253 >> 2] = $26; //@line 35066
    $254 = $ReallocAsyncCtx14 + 124 | 0; //@line 35067
    HEAP32[$254 >> 2] = $14; //@line 35068
    $255 = $ReallocAsyncCtx14 + 128 | 0; //@line 35069
    HEAP8[$255 >> 0] = $144; //@line 35070
    $256 = $ReallocAsyncCtx14 + 132 | 0; //@line 35071
    HEAP32[$256 >> 2] = $154; //@line 35072
    $257 = $ReallocAsyncCtx14 + 136 | 0; //@line 35073
    HEAP32[$257 >> 2] = $4; //@line 35074
    $258 = $ReallocAsyncCtx14 + 140 | 0; //@line 35075
    HEAP32[$258 >> 2] = $180; //@line 35076
    $259 = $ReallocAsyncCtx14 + 144 | 0; //@line 35077
    HEAP32[$259 >> 2] = $155; //@line 35078
    $260 = $ReallocAsyncCtx14 + 148 | 0; //@line 35079
    HEAP32[$260 >> 2] = $48; //@line 35080
    sp = STACKTOP; //@line 35081
    return;
   }
   break;
  }
 case 7:
  {
   $261 = $8 + 638 | 0; //@line 35087
   _memcpy($261 | 0, $16 + 1 | 0, $12 | 0) | 0; //@line 35089
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) >> 2] = 3; //@line 35091
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 4 >> 2] = 0; //@line 35094
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 12 >> 2] = $261; //@line 35097
   HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 16 >> 1] = $12 + 65535; //@line 35102
   $272 = $8 + 944 | 0; //@line 35103
   HEAP8[$272 >> 0] = HEAP8[$272 >> 0] | 2; //@line 35106
   $281 = $8 + 944 | 0; //@line 35107
   HEAP8[$281 >> 0] = HEAP8[$281 >> 0] | 32; //@line 35110
   $284 = HEAP32[$14 >> 2] | 0; //@line 35111
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 35113
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($284, $8 + 996 | 0, 1); //@line 35114
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 35117
    $286 = $ReallocAsyncCtx17 + 4 | 0; //@line 35118
    HEAP32[$286 >> 2] = $2; //@line 35119
    $287 = $ReallocAsyncCtx17 + 8 | 0; //@line 35120
    HEAP32[$287 >> 2] = $4; //@line 35121
    sp = STACKTOP; //@line 35122
    return;
   }
   ___async_unwind = 0; //@line 35125
   HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 35126
   $286 = $ReallocAsyncCtx17 + 4 | 0; //@line 35127
   HEAP32[$286 >> 2] = $2; //@line 35128
   $287 = $ReallocAsyncCtx17 + 8 | 0; //@line 35129
   HEAP32[$287 >> 2] = $4; //@line 35130
   sp = STACKTOP; //@line 35131
   return;
  }
 default:
  {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 4 >> 2] = 1; //@line 35138
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 35139
   __ZN7LoRaMac21prepare_rx_done_abortEv($8); //@line 35140
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 413; //@line 35143
    $277 = $ReallocAsyncCtx6 + 4 | 0; //@line 35144
    HEAP32[$277 >> 2] = $8; //@line 35145
    $278 = $ReallocAsyncCtx6 + 8 | 0; //@line 35146
    HEAP32[$278 >> 2] = $14; //@line 35147
    $279 = $ReallocAsyncCtx6 + 12 | 0; //@line 35148
    HEAP32[$279 >> 2] = $2; //@line 35149
    $280 = $ReallocAsyncCtx6 + 16 | 0; //@line 35150
    HEAP32[$280 >> 2] = $4; //@line 35151
    sp = STACKTOP; //@line 35152
    return;
   }
   ___async_unwind = 0; //@line 35155
   HEAP32[$ReallocAsyncCtx6 >> 2] = 413; //@line 35156
   $277 = $ReallocAsyncCtx6 + 4 | 0; //@line 35157
   HEAP32[$277 >> 2] = $8; //@line 35158
   $278 = $ReallocAsyncCtx6 + 8 | 0; //@line 35159
   HEAP32[$278 >> 2] = $14; //@line 35160
   $279 = $ReallocAsyncCtx6 + 12 | 0; //@line 35161
   HEAP32[$279 >> 2] = $2; //@line 35162
   $280 = $ReallocAsyncCtx6 + 16 | 0; //@line 35163
   HEAP32[$280 >> 2] = $4; //@line 35164
   sp = STACKTOP; //@line 35165
   return;
  }
 }
}
function _equeue_dispatch__async_cb_383($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$03956$i = 0, $$03956$i$phi = 0, $$04055$i = 0, $$0405571$i = 0, $$04063$i = 0, $$04159$i = 0, $$04258$i = 0, $$057$i = 0, $$065 = 0, $$06790 = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val13 = 0, $$expand_i1_val9 = 0, $$sink$in$i$i = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $127 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $16 = 0, $165 = 0, $166 = 0, $168 = 0, $171 = 0, $173 = 0, $176 = 0, $179 = 0, $18 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $190 = 0, $193 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $44 = 0, $45 = 0, $48 = 0, $54 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $69 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $93 = 0, $95 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0, $$04159$i$looptemp = 0, $$04258$i$looptemp = 0;
 sp = STACKTOP; //@line 20519
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20521
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20523
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20525
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20527
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20529
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20531
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20533
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20535
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20537
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20539
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20541
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20543
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20545
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 20548
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20550
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20552
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20554
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20556
 _equeue_mutex_lock($22); //@line 20557
 HEAP8[$24 >> 0] = (HEAPU8[$24 >> 0] | 0) + 1; //@line 20562
 if (((HEAP32[$14 >> 2] | 0) - $36 | 0) < 1) {
  HEAP32[$14 >> 2] = $36; //@line 20567
 }
 $44 = HEAP32[$16 >> 2] | 0; //@line 20569
 HEAP32[$18 >> 2] = $44; //@line 20570
 $45 = $44; //@line 20571
 L6 : do {
  if (!$44) {
   $$04055$i = $6; //@line 20575
   $54 = $45; //@line 20575
   label = 8; //@line 20576
  } else {
   $$04063$i = $6; //@line 20578
   $48 = $45; //@line 20578
   do {
    if (((HEAP32[$48 + 20 >> 2] | 0) - $36 | 0) >= 1) {
     $$04055$i = $$04063$i; //@line 20585
     $54 = $48; //@line 20585
     label = 8; //@line 20586
     break L6;
    }
    $$04063$i = $48 + 8 | 0; //@line 20589
    $48 = HEAP32[$$04063$i >> 2] | 0; //@line 20590
   } while (($48 | 0) != 0);
   HEAP32[$20 >> 2] = 0; //@line 20598
   $$0405571$i = $$04063$i; //@line 20599
  }
 } while (0);
 if ((label | 0) == 8) {
  HEAP32[$20 >> 2] = $54; //@line 20603
  if (!$54) {
   $$0405571$i = $$04055$i; //@line 20606
  } else {
   HEAP32[$54 + 16 >> 2] = $20; //@line 20609
   $$0405571$i = $$04055$i; //@line 20610
  }
 }
 HEAP32[$$0405571$i >> 2] = 0; //@line 20613
 _equeue_mutex_unlock($22); //@line 20614
 $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72 = HEAP32[$6 >> 2] | 0; //@line 20615
 L15 : do {
  if (!$$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72) {} else {
   $$04159$i = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72; //@line 20620
   $$04258$i = $6; //@line 20620
   do {
    $$04258$i$looptemp = $$04258$i;
    $$04258$i = $$04159$i + 8 | 0; //@line 20622
    $$04159$i$looptemp = $$04159$i;
    $$04159$i = HEAP32[$$04258$i >> 2] | 0; //@line 20623
    $$03956$i = 0; //@line 20624
    $$057$i = $$04159$i$looptemp; //@line 20624
    while (1) {
     HEAP32[$$057$i + 8 >> 2] = $$03956$i; //@line 20627
     $63 = HEAP32[$$057$i + 12 >> 2] | 0; //@line 20629
     if (!$63) {
      break;
     } else {
      $$03956$i$phi = $$057$i; //@line 20634
      $$057$i = $63; //@line 20634
      $$03956$i = $$03956$i$phi; //@line 20634
     }
    }
    HEAP32[$$04258$i$looptemp >> 2] = $$057$i; //@line 20637
   } while (($$04159$i | 0) != 0);
   $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 = HEAP32[$6 >> 2] | 0; //@line 20645
   if ($$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 | 0) {
    $$06790 = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73; //@line 20648
    while (1) {
     $66 = $$06790 + 8 | 0; //@line 20650
     $67 = HEAP32[$66 >> 2] | 0; //@line 20651
     $69 = HEAP32[$$06790 + 32 >> 2] | 0; //@line 20653
     if ($69 | 0) {
      label = 17; //@line 20656
      break;
     }
     $93 = HEAP32[$$06790 + 24 >> 2] | 0; //@line 20660
     if (($93 | 0) > -1) {
      label = 21; //@line 20663
      break;
     }
     $117 = $$06790 + 4 | 0; //@line 20667
     $118 = HEAP8[$117 >> 0] | 0; //@line 20668
     HEAP8[$117 >> 0] = (($118 + 1 & 255) << HEAP32[$2 >> 2] | 0) == 0 ? 1 : ($118 & 255) + 1 & 255; //@line 20677
     $127 = HEAP32[$$06790 + 28 >> 2] | 0; //@line 20679
     if ($127 | 0) {
      label = 25; //@line 20682
      break;
     }
     _equeue_mutex_lock($12); //@line 20685
     $150 = HEAP32[$10 >> 2] | 0; //@line 20686
     L28 : do {
      if (!$150) {
       $$02329$i$i = $10; //@line 20690
       label = 34; //@line 20691
      } else {
       $152 = HEAP32[$$06790 >> 2] | 0; //@line 20693
       $$025$i$i = $10; //@line 20694
       $154 = $150; //@line 20694
       while (1) {
        $153 = HEAP32[$154 >> 2] | 0; //@line 20696
        if ($153 >>> 0 >= $152 >>> 0) {
         break;
        }
        $156 = $154 + 8 | 0; //@line 20701
        $157 = HEAP32[$156 >> 2] | 0; //@line 20702
        if (!$157) {
         $$02329$i$i = $156; //@line 20705
         label = 34; //@line 20706
         break L28;
        } else {
         $$025$i$i = $156; //@line 20709
         $154 = $157; //@line 20709
        }
       }
       if (($153 | 0) == ($152 | 0)) {
        HEAP32[$$06790 + 12 >> 2] = $154; //@line 20715
        $$02330$i$i = $$025$i$i; //@line 20718
        $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 20718
       } else {
        $$02329$i$i = $$025$i$i; //@line 20720
        label = 34; //@line 20721
       }
      }
     } while (0);
     if ((label | 0) == 34) {
      label = 0; //@line 20726
      HEAP32[$$06790 + 12 >> 2] = 0; //@line 20728
      $$02330$i$i = $$02329$i$i; //@line 20729
      $$sink$in$i$i = $$02329$i$i; //@line 20729
     }
     HEAP32[$66 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 20732
     HEAP32[$$02330$i$i >> 2] = $$06790; //@line 20733
     _equeue_mutex_unlock($12); //@line 20734
     if (!$67) {
      break L15;
     } else {
      $$06790 = $67; //@line 20739
     }
    }
    if ((label | 0) == 17) {
     $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 20744
     FUNCTION_TABLE_vi[$69 & 1023]($$06790 + 36 | 0); //@line 20745
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 185; //@line 20748
      $72 = $ReallocAsyncCtx + 4 | 0; //@line 20749
      HEAP32[$72 >> 2] = $2; //@line 20750
      $73 = $ReallocAsyncCtx + 8 | 0; //@line 20751
      HEAP32[$73 >> 2] = $$06790; //@line 20752
      $74 = $ReallocAsyncCtx + 12 | 0; //@line 20753
      HEAP32[$74 >> 2] = $4; //@line 20754
      $75 = $ReallocAsyncCtx + 16 | 0; //@line 20755
      HEAP32[$75 >> 2] = $67; //@line 20756
      $76 = $ReallocAsyncCtx + 20 | 0; //@line 20757
      HEAP32[$76 >> 2] = $6; //@line 20758
      $77 = $ReallocAsyncCtx + 24 | 0; //@line 20759
      HEAP32[$77 >> 2] = $8; //@line 20760
      $78 = $ReallocAsyncCtx + 28 | 0; //@line 20761
      HEAP32[$78 >> 2] = $10; //@line 20762
      $79 = $ReallocAsyncCtx + 32 | 0; //@line 20763
      HEAP32[$79 >> 2] = $12; //@line 20764
      $80 = $ReallocAsyncCtx + 36 | 0; //@line 20765
      HEAP32[$80 >> 2] = $14; //@line 20766
      $81 = $ReallocAsyncCtx + 40 | 0; //@line 20767
      HEAP32[$81 >> 2] = $16; //@line 20768
      $82 = $ReallocAsyncCtx + 44 | 0; //@line 20769
      HEAP32[$82 >> 2] = $18; //@line 20770
      $83 = $ReallocAsyncCtx + 48 | 0; //@line 20771
      HEAP32[$83 >> 2] = $20; //@line 20772
      $84 = $ReallocAsyncCtx + 52 | 0; //@line 20773
      HEAP32[$84 >> 2] = $22; //@line 20774
      $85 = $ReallocAsyncCtx + 56 | 0; //@line 20775
      HEAP32[$85 >> 2] = $24; //@line 20776
      $86 = $ReallocAsyncCtx + 60 | 0; //@line 20777
      HEAP32[$86 >> 2] = $26; //@line 20778
      $87 = $ReallocAsyncCtx + 64 | 0; //@line 20779
      $$expand_i1_val = $28 & 1; //@line 20780
      HEAP8[$87 >> 0] = $$expand_i1_val; //@line 20781
      $88 = $ReallocAsyncCtx + 68 | 0; //@line 20782
      HEAP32[$88 >> 2] = $66; //@line 20783
      $89 = $ReallocAsyncCtx + 72 | 0; //@line 20784
      HEAP32[$89 >> 2] = $30; //@line 20785
      $90 = $ReallocAsyncCtx + 76 | 0; //@line 20786
      HEAP32[$90 >> 2] = $32; //@line 20787
      $91 = $ReallocAsyncCtx + 80 | 0; //@line 20788
      HEAP32[$91 >> 2] = $34; //@line 20789
      sp = STACKTOP; //@line 20790
      return;
     }
     ___async_unwind = 0; //@line 20793
     HEAP32[$ReallocAsyncCtx >> 2] = 185; //@line 20794
     $72 = $ReallocAsyncCtx + 4 | 0; //@line 20795
     HEAP32[$72 >> 2] = $2; //@line 20796
     $73 = $ReallocAsyncCtx + 8 | 0; //@line 20797
     HEAP32[$73 >> 2] = $$06790; //@line 20798
     $74 = $ReallocAsyncCtx + 12 | 0; //@line 20799
     HEAP32[$74 >> 2] = $4; //@line 20800
     $75 = $ReallocAsyncCtx + 16 | 0; //@line 20801
     HEAP32[$75 >> 2] = $67; //@line 20802
     $76 = $ReallocAsyncCtx + 20 | 0; //@line 20803
     HEAP32[$76 >> 2] = $6; //@line 20804
     $77 = $ReallocAsyncCtx + 24 | 0; //@line 20805
     HEAP32[$77 >> 2] = $8; //@line 20806
     $78 = $ReallocAsyncCtx + 28 | 0; //@line 20807
     HEAP32[$78 >> 2] = $10; //@line 20808
     $79 = $ReallocAsyncCtx + 32 | 0; //@line 20809
     HEAP32[$79 >> 2] = $12; //@line 20810
     $80 = $ReallocAsyncCtx + 36 | 0; //@line 20811
     HEAP32[$80 >> 2] = $14; //@line 20812
     $81 = $ReallocAsyncCtx + 40 | 0; //@line 20813
     HEAP32[$81 >> 2] = $16; //@line 20814
     $82 = $ReallocAsyncCtx + 44 | 0; //@line 20815
     HEAP32[$82 >> 2] = $18; //@line 20816
     $83 = $ReallocAsyncCtx + 48 | 0; //@line 20817
     HEAP32[$83 >> 2] = $20; //@line 20818
     $84 = $ReallocAsyncCtx + 52 | 0; //@line 20819
     HEAP32[$84 >> 2] = $22; //@line 20820
     $85 = $ReallocAsyncCtx + 56 | 0; //@line 20821
     HEAP32[$85 >> 2] = $24; //@line 20822
     $86 = $ReallocAsyncCtx + 60 | 0; //@line 20823
     HEAP32[$86 >> 2] = $26; //@line 20824
     $87 = $ReallocAsyncCtx + 64 | 0; //@line 20825
     $$expand_i1_val = $28 & 1; //@line 20826
     HEAP8[$87 >> 0] = $$expand_i1_val; //@line 20827
     $88 = $ReallocAsyncCtx + 68 | 0; //@line 20828
     HEAP32[$88 >> 2] = $66; //@line 20829
     $89 = $ReallocAsyncCtx + 72 | 0; //@line 20830
     HEAP32[$89 >> 2] = $30; //@line 20831
     $90 = $ReallocAsyncCtx + 76 | 0; //@line 20832
     HEAP32[$90 >> 2] = $32; //@line 20833
     $91 = $ReallocAsyncCtx + 80 | 0; //@line 20834
     HEAP32[$91 >> 2] = $34; //@line 20835
     sp = STACKTOP; //@line 20836
     return;
    } else if ((label | 0) == 21) {
     $95 = $$06790 + 20 | 0; //@line 20840
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $93; //@line 20843
     $98 = _equeue_tick() | 0; //@line 20844
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 20845
     _equeue_enqueue($4, $$06790, $98) | 0; //@line 20846
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 186; //@line 20849
      $99 = $ReallocAsyncCtx4 + 4 | 0; //@line 20850
      HEAP32[$99 >> 2] = $2; //@line 20851
      $100 = $ReallocAsyncCtx4 + 8 | 0; //@line 20852
      HEAP32[$100 >> 2] = $34; //@line 20853
      $101 = $ReallocAsyncCtx4 + 12 | 0; //@line 20854
      HEAP32[$101 >> 2] = $22; //@line 20855
      $102 = $ReallocAsyncCtx4 + 16 | 0; //@line 20856
      HEAP32[$102 >> 2] = $4; //@line 20857
      $103 = $ReallocAsyncCtx4 + 20 | 0; //@line 20858
      HEAP32[$103 >> 2] = $67; //@line 20859
      $104 = $ReallocAsyncCtx4 + 24 | 0; //@line 20860
      HEAP32[$104 >> 2] = $6; //@line 20861
      $105 = $ReallocAsyncCtx4 + 28 | 0; //@line 20862
      HEAP32[$105 >> 2] = $8; //@line 20863
      $106 = $ReallocAsyncCtx4 + 32 | 0; //@line 20864
      HEAP32[$106 >> 2] = $10; //@line 20865
      $107 = $ReallocAsyncCtx4 + 36 | 0; //@line 20866
      HEAP32[$107 >> 2] = $12; //@line 20867
      $108 = $ReallocAsyncCtx4 + 40 | 0; //@line 20868
      HEAP32[$108 >> 2] = $14; //@line 20869
      $109 = $ReallocAsyncCtx4 + 44 | 0; //@line 20870
      HEAP32[$109 >> 2] = $16; //@line 20871
      $110 = $ReallocAsyncCtx4 + 48 | 0; //@line 20872
      HEAP32[$110 >> 2] = $18; //@line 20873
      $111 = $ReallocAsyncCtx4 + 52 | 0; //@line 20874
      HEAP32[$111 >> 2] = $20; //@line 20875
      $112 = $ReallocAsyncCtx4 + 56 | 0; //@line 20876
      HEAP32[$112 >> 2] = $24; //@line 20877
      $113 = $ReallocAsyncCtx4 + 60 | 0; //@line 20878
      HEAP32[$113 >> 2] = $26; //@line 20879
      $114 = $ReallocAsyncCtx4 + 64 | 0; //@line 20880
      $$expand_i1_val9 = $28 & 1; //@line 20881
      HEAP8[$114 >> 0] = $$expand_i1_val9; //@line 20882
      $115 = $ReallocAsyncCtx4 + 68 | 0; //@line 20883
      HEAP32[$115 >> 2] = $30; //@line 20884
      $116 = $ReallocAsyncCtx4 + 72 | 0; //@line 20885
      HEAP32[$116 >> 2] = $32; //@line 20886
      sp = STACKTOP; //@line 20887
      return;
     }
     ___async_unwind = 0; //@line 20890
     HEAP32[$ReallocAsyncCtx4 >> 2] = 186; //@line 20891
     $99 = $ReallocAsyncCtx4 + 4 | 0; //@line 20892
     HEAP32[$99 >> 2] = $2; //@line 20893
     $100 = $ReallocAsyncCtx4 + 8 | 0; //@line 20894
     HEAP32[$100 >> 2] = $34; //@line 20895
     $101 = $ReallocAsyncCtx4 + 12 | 0; //@line 20896
     HEAP32[$101 >> 2] = $22; //@line 20897
     $102 = $ReallocAsyncCtx4 + 16 | 0; //@line 20898
     HEAP32[$102 >> 2] = $4; //@line 20899
     $103 = $ReallocAsyncCtx4 + 20 | 0; //@line 20900
     HEAP32[$103 >> 2] = $67; //@line 20901
     $104 = $ReallocAsyncCtx4 + 24 | 0; //@line 20902
     HEAP32[$104 >> 2] = $6; //@line 20903
     $105 = $ReallocAsyncCtx4 + 28 | 0; //@line 20904
     HEAP32[$105 >> 2] = $8; //@line 20905
     $106 = $ReallocAsyncCtx4 + 32 | 0; //@line 20906
     HEAP32[$106 >> 2] = $10; //@line 20907
     $107 = $ReallocAsyncCtx4 + 36 | 0; //@line 20908
     HEAP32[$107 >> 2] = $12; //@line 20909
     $108 = $ReallocAsyncCtx4 + 40 | 0; //@line 20910
     HEAP32[$108 >> 2] = $14; //@line 20911
     $109 = $ReallocAsyncCtx4 + 44 | 0; //@line 20912
     HEAP32[$109 >> 2] = $16; //@line 20913
     $110 = $ReallocAsyncCtx4 + 48 | 0; //@line 20914
     HEAP32[$110 >> 2] = $18; //@line 20915
     $111 = $ReallocAsyncCtx4 + 52 | 0; //@line 20916
     HEAP32[$111 >> 2] = $20; //@line 20917
     $112 = $ReallocAsyncCtx4 + 56 | 0; //@line 20918
     HEAP32[$112 >> 2] = $24; //@line 20919
     $113 = $ReallocAsyncCtx4 + 60 | 0; //@line 20920
     HEAP32[$113 >> 2] = $26; //@line 20921
     $114 = $ReallocAsyncCtx4 + 64 | 0; //@line 20922
     $$expand_i1_val9 = $28 & 1; //@line 20923
     HEAP8[$114 >> 0] = $$expand_i1_val9; //@line 20924
     $115 = $ReallocAsyncCtx4 + 68 | 0; //@line 20925
     HEAP32[$115 >> 2] = $30; //@line 20926
     $116 = $ReallocAsyncCtx4 + 72 | 0; //@line 20927
     HEAP32[$116 >> 2] = $32; //@line 20928
     sp = STACKTOP; //@line 20929
     return;
    } else if ((label | 0) == 25) {
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 20934
     FUNCTION_TABLE_vi[$127 & 1023]($$06790 + 36 | 0); //@line 20935
     if (___async) {
      HEAP32[$ReallocAsyncCtx2 >> 2] = 187; //@line 20938
      $130 = $ReallocAsyncCtx2 + 4 | 0; //@line 20939
      HEAP32[$130 >> 2] = $2; //@line 20940
      $131 = $ReallocAsyncCtx2 + 8 | 0; //@line 20941
      HEAP32[$131 >> 2] = $34; //@line 20942
      $132 = $ReallocAsyncCtx2 + 12 | 0; //@line 20943
      HEAP32[$132 >> 2] = $22; //@line 20944
      $133 = $ReallocAsyncCtx2 + 16 | 0; //@line 20945
      HEAP32[$133 >> 2] = $4; //@line 20946
      $134 = $ReallocAsyncCtx2 + 20 | 0; //@line 20947
      HEAP32[$134 >> 2] = $67; //@line 20948
      $135 = $ReallocAsyncCtx2 + 24 | 0; //@line 20949
      HEAP32[$135 >> 2] = $6; //@line 20950
      $136 = $ReallocAsyncCtx2 + 28 | 0; //@line 20951
      HEAP32[$136 >> 2] = $8; //@line 20952
      $137 = $ReallocAsyncCtx2 + 32 | 0; //@line 20953
      HEAP32[$137 >> 2] = $10; //@line 20954
      $138 = $ReallocAsyncCtx2 + 36 | 0; //@line 20955
      HEAP32[$138 >> 2] = $12; //@line 20956
      $139 = $ReallocAsyncCtx2 + 40 | 0; //@line 20957
      HEAP32[$139 >> 2] = $14; //@line 20958
      $140 = $ReallocAsyncCtx2 + 44 | 0; //@line 20959
      HEAP32[$140 >> 2] = $16; //@line 20960
      $141 = $ReallocAsyncCtx2 + 48 | 0; //@line 20961
      HEAP32[$141 >> 2] = $18; //@line 20962
      $142 = $ReallocAsyncCtx2 + 52 | 0; //@line 20963
      HEAP32[$142 >> 2] = $20; //@line 20964
      $143 = $ReallocAsyncCtx2 + 56 | 0; //@line 20965
      HEAP32[$143 >> 2] = $24; //@line 20966
      $144 = $ReallocAsyncCtx2 + 60 | 0; //@line 20967
      HEAP32[$144 >> 2] = $26; //@line 20968
      $145 = $ReallocAsyncCtx2 + 64 | 0; //@line 20969
      $$expand_i1_val11 = $28 & 1; //@line 20970
      HEAP8[$145 >> 0] = $$expand_i1_val11; //@line 20971
      $146 = $ReallocAsyncCtx2 + 68 | 0; //@line 20972
      HEAP32[$146 >> 2] = $30; //@line 20973
      $147 = $ReallocAsyncCtx2 + 72 | 0; //@line 20974
      HEAP32[$147 >> 2] = $32; //@line 20975
      $148 = $ReallocAsyncCtx2 + 76 | 0; //@line 20976
      HEAP32[$148 >> 2] = $$06790; //@line 20977
      $149 = $ReallocAsyncCtx2 + 80 | 0; //@line 20978
      HEAP32[$149 >> 2] = $66; //@line 20979
      sp = STACKTOP; //@line 20980
      return;
     }
     ___async_unwind = 0; //@line 20983
     HEAP32[$ReallocAsyncCtx2 >> 2] = 187; //@line 20984
     $130 = $ReallocAsyncCtx2 + 4 | 0; //@line 20985
     HEAP32[$130 >> 2] = $2; //@line 20986
     $131 = $ReallocAsyncCtx2 + 8 | 0; //@line 20987
     HEAP32[$131 >> 2] = $34; //@line 20988
     $132 = $ReallocAsyncCtx2 + 12 | 0; //@line 20989
     HEAP32[$132 >> 2] = $22; //@line 20990
     $133 = $ReallocAsyncCtx2 + 16 | 0; //@line 20991
     HEAP32[$133 >> 2] = $4; //@line 20992
     $134 = $ReallocAsyncCtx2 + 20 | 0; //@line 20993
     HEAP32[$134 >> 2] = $67; //@line 20994
     $135 = $ReallocAsyncCtx2 + 24 | 0; //@line 20995
     HEAP32[$135 >> 2] = $6; //@line 20996
     $136 = $ReallocAsyncCtx2 + 28 | 0; //@line 20997
     HEAP32[$136 >> 2] = $8; //@line 20998
     $137 = $ReallocAsyncCtx2 + 32 | 0; //@line 20999
     HEAP32[$137 >> 2] = $10; //@line 21000
     $138 = $ReallocAsyncCtx2 + 36 | 0; //@line 21001
     HEAP32[$138 >> 2] = $12; //@line 21002
     $139 = $ReallocAsyncCtx2 + 40 | 0; //@line 21003
     HEAP32[$139 >> 2] = $14; //@line 21004
     $140 = $ReallocAsyncCtx2 + 44 | 0; //@line 21005
     HEAP32[$140 >> 2] = $16; //@line 21006
     $141 = $ReallocAsyncCtx2 + 48 | 0; //@line 21007
     HEAP32[$141 >> 2] = $18; //@line 21008
     $142 = $ReallocAsyncCtx2 + 52 | 0; //@line 21009
     HEAP32[$142 >> 2] = $20; //@line 21010
     $143 = $ReallocAsyncCtx2 + 56 | 0; //@line 21011
     HEAP32[$143 >> 2] = $24; //@line 21012
     $144 = $ReallocAsyncCtx2 + 60 | 0; //@line 21013
     HEAP32[$144 >> 2] = $26; //@line 21014
     $145 = $ReallocAsyncCtx2 + 64 | 0; //@line 21015
     $$expand_i1_val11 = $28 & 1; //@line 21016
     HEAP8[$145 >> 0] = $$expand_i1_val11; //@line 21017
     $146 = $ReallocAsyncCtx2 + 68 | 0; //@line 21018
     HEAP32[$146 >> 2] = $30; //@line 21019
     $147 = $ReallocAsyncCtx2 + 72 | 0; //@line 21020
     HEAP32[$147 >> 2] = $32; //@line 21021
     $148 = $ReallocAsyncCtx2 + 76 | 0; //@line 21022
     HEAP32[$148 >> 2] = $$06790; //@line 21023
     $149 = $ReallocAsyncCtx2 + 80 | 0; //@line 21024
     HEAP32[$149 >> 2] = $66; //@line 21025
     sp = STACKTOP; //@line 21026
     return;
    }
   }
  }
 } while (0);
 $165 = _equeue_tick() | 0; //@line 21032
 if ($28) {
  $166 = $26 - $165 | 0; //@line 21034
  if (($166 | 0) < 1) {
   $168 = $4 + 40 | 0; //@line 21037
   if (HEAP32[$168 >> 2] | 0) {
    _equeue_mutex_lock($22); //@line 21041
    $171 = HEAP32[$168 >> 2] | 0; //@line 21042
    if ($171 | 0) {
     $173 = HEAP32[$20 >> 2] | 0; //@line 21045
     if ($173 | 0) {
      $176 = HEAP32[$4 + 44 >> 2] | 0; //@line 21049
      $179 = (HEAP32[$173 + 20 >> 2] | 0) - $165 | 0; //@line 21052
      $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 21056
      FUNCTION_TABLE_vii[$171 & 31]($176, $179 & ~($179 >> 31)); //@line 21057
      if (___async) {
       HEAP32[$ReallocAsyncCtx3 >> 2] = 188; //@line 21060
       $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 21061
       HEAP32[$183 >> 2] = $34; //@line 21062
       $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 21063
       HEAP32[$184 >> 2] = $22; //@line 21064
       $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 21065
       HEAP32[$185 >> 2] = $30; //@line 21066
       sp = STACKTOP; //@line 21067
       return;
      }
      ___async_unwind = 0; //@line 21070
      HEAP32[$ReallocAsyncCtx3 >> 2] = 188; //@line 21071
      $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 21072
      HEAP32[$183 >> 2] = $34; //@line 21073
      $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 21074
      HEAP32[$184 >> 2] = $22; //@line 21075
      $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 21076
      HEAP32[$185 >> 2] = $30; //@line 21077
      sp = STACKTOP; //@line 21078
      return;
     }
    }
    HEAP8[$34 >> 0] = 1; //@line 21082
    _equeue_mutex_unlock($22); //@line 21083
   }
   HEAP8[$30 >> 0] = 0; //@line 21085
   return;
  } else {
   $$065 = $166; //@line 21088
  }
 } else {
  $$065 = -1; //@line 21091
 }
 _equeue_mutex_lock($22); //@line 21093
 $186 = HEAP32[$20 >> 2] | 0; //@line 21094
 if (!$186) {
  $$2 = $$065; //@line 21097
 } else {
  $190 = (HEAP32[$186 + 20 >> 2] | 0) - $165 | 0; //@line 21101
  $193 = $190 & ~($190 >> 31); //@line 21104
  $$2 = $193 >>> 0 < $$065 >>> 0 ? $193 : $$065; //@line 21107
 }
 _equeue_mutex_unlock($22); //@line 21109
 _equeue_sema_wait($32, $$2) | 0; //@line 21110
 do {
  if (HEAP8[$30 >> 0] | 0) {
   _equeue_mutex_lock($22); //@line 21115
   if (!(HEAP8[$30 >> 0] | 0)) {
    _equeue_mutex_unlock($22); //@line 21119
    break;
   }
   HEAP8[$30 >> 0] = 0; //@line 21122
   _equeue_mutex_unlock($22); //@line 21123
   return;
  }
 } while (0);
 $199 = _equeue_tick() | 0; //@line 21127
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 21128
 _wait_ms(20); //@line 21129
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 189; //@line 21132
  $200 = $ReallocAsyncCtx5 + 4 | 0; //@line 21133
  HEAP32[$200 >> 2] = $2; //@line 21134
  $201 = $ReallocAsyncCtx5 + 8 | 0; //@line 21135
  HEAP32[$201 >> 2] = $4; //@line 21136
  $202 = $ReallocAsyncCtx5 + 12 | 0; //@line 21137
  HEAP32[$202 >> 2] = $6; //@line 21138
  $203 = $ReallocAsyncCtx5 + 16 | 0; //@line 21139
  HEAP32[$203 >> 2] = $8; //@line 21140
  $204 = $ReallocAsyncCtx5 + 20 | 0; //@line 21141
  HEAP32[$204 >> 2] = $10; //@line 21142
  $205 = $ReallocAsyncCtx5 + 24 | 0; //@line 21143
  HEAP32[$205 >> 2] = $12; //@line 21144
  $206 = $ReallocAsyncCtx5 + 28 | 0; //@line 21145
  HEAP32[$206 >> 2] = $14; //@line 21146
  $207 = $ReallocAsyncCtx5 + 32 | 0; //@line 21147
  HEAP32[$207 >> 2] = $16; //@line 21148
  $208 = $ReallocAsyncCtx5 + 36 | 0; //@line 21149
  HEAP32[$208 >> 2] = $18; //@line 21150
  $209 = $ReallocAsyncCtx5 + 40 | 0; //@line 21151
  HEAP32[$209 >> 2] = $20; //@line 21152
  $210 = $ReallocAsyncCtx5 + 44 | 0; //@line 21153
  HEAP32[$210 >> 2] = $22; //@line 21154
  $211 = $ReallocAsyncCtx5 + 48 | 0; //@line 21155
  HEAP32[$211 >> 2] = $24; //@line 21156
  $212 = $ReallocAsyncCtx5 + 52 | 0; //@line 21157
  HEAP32[$212 >> 2] = $26; //@line 21158
  $213 = $ReallocAsyncCtx5 + 56 | 0; //@line 21159
  $$expand_i1_val13 = $28 & 1; //@line 21160
  HEAP8[$213 >> 0] = $$expand_i1_val13; //@line 21161
  $214 = $ReallocAsyncCtx5 + 60 | 0; //@line 21162
  HEAP32[$214 >> 2] = $30; //@line 21163
  $215 = $ReallocAsyncCtx5 + 64 | 0; //@line 21164
  HEAP32[$215 >> 2] = $32; //@line 21165
  $216 = $ReallocAsyncCtx5 + 68 | 0; //@line 21166
  HEAP32[$216 >> 2] = $34; //@line 21167
  $217 = $ReallocAsyncCtx5 + 72 | 0; //@line 21168
  HEAP32[$217 >> 2] = $199; //@line 21169
  sp = STACKTOP; //@line 21170
  return;
 }
 ___async_unwind = 0; //@line 21173
 HEAP32[$ReallocAsyncCtx5 >> 2] = 189; //@line 21174
 $200 = $ReallocAsyncCtx5 + 4 | 0; //@line 21175
 HEAP32[$200 >> 2] = $2; //@line 21176
 $201 = $ReallocAsyncCtx5 + 8 | 0; //@line 21177
 HEAP32[$201 >> 2] = $4; //@line 21178
 $202 = $ReallocAsyncCtx5 + 12 | 0; //@line 21179
 HEAP32[$202 >> 2] = $6; //@line 21180
 $203 = $ReallocAsyncCtx5 + 16 | 0; //@line 21181
 HEAP32[$203 >> 2] = $8; //@line 21182
 $204 = $ReallocAsyncCtx5 + 20 | 0; //@line 21183
 HEAP32[$204 >> 2] = $10; //@line 21184
 $205 = $ReallocAsyncCtx5 + 24 | 0; //@line 21185
 HEAP32[$205 >> 2] = $12; //@line 21186
 $206 = $ReallocAsyncCtx5 + 28 | 0; //@line 21187
 HEAP32[$206 >> 2] = $14; //@line 21188
 $207 = $ReallocAsyncCtx5 + 32 | 0; //@line 21189
 HEAP32[$207 >> 2] = $16; //@line 21190
 $208 = $ReallocAsyncCtx5 + 36 | 0; //@line 21191
 HEAP32[$208 >> 2] = $18; //@line 21192
 $209 = $ReallocAsyncCtx5 + 40 | 0; //@line 21193
 HEAP32[$209 >> 2] = $20; //@line 21194
 $210 = $ReallocAsyncCtx5 + 44 | 0; //@line 21195
 HEAP32[$210 >> 2] = $22; //@line 21196
 $211 = $ReallocAsyncCtx5 + 48 | 0; //@line 21197
 HEAP32[$211 >> 2] = $24; //@line 21198
 $212 = $ReallocAsyncCtx5 + 52 | 0; //@line 21199
 HEAP32[$212 >> 2] = $26; //@line 21200
 $213 = $ReallocAsyncCtx5 + 56 | 0; //@line 21201
 $$expand_i1_val13 = $28 & 1; //@line 21202
 HEAP8[$213 >> 0] = $$expand_i1_val13; //@line 21203
 $214 = $ReallocAsyncCtx5 + 60 | 0; //@line 21204
 HEAP32[$214 >> 2] = $30; //@line 21205
 $215 = $ReallocAsyncCtx5 + 64 | 0; //@line 21206
 HEAP32[$215 >> 2] = $32; //@line 21207
 $216 = $ReallocAsyncCtx5 + 68 | 0; //@line 21208
 HEAP32[$216 >> 2] = $34; //@line 21209
 $217 = $ReallocAsyncCtx5 + 72 | 0; //@line 21210
 HEAP32[$217 >> 2] = $199; //@line 21211
 sp = STACKTOP; //@line 21212
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_81($0) {
 $0 = $0 | 0;
 var $$$1177 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val29 = 0, $$1$off0$expand_i1_val31 = 0, $$3$off0204 = 0, $$sink = 0, $10 = 0, $102 = 0, $105 = 0, $106 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $119 = 0, $12 = 0, $123 = 0, $124 = 0, $131 = 0, $132 = 0, $139 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $147 = 0, $151 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $215 = 0, $216 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $237 = 0, $24 = 0, $240 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $251 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $261 = 0, $262 = 0, $263 = 0, $266 = 0, $268 = 0, $269 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $8 = 0, $80 = 0, $82 = 0, $85 = 0, $86 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 31842
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31844
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31846
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31848
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31850
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31852
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31854
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31856
 $16 = HEAP8[$0 + 32 >> 0] | 0; //@line 31858
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31860
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31862
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31864
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 31866
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 31868
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 31876
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 31878
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 31880
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 31882
 $42 = HEAP8[$0 + 84 >> 0] | 0; //@line 31884
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 31888
 $48 = HEAP8[$0 + 96 >> 0] | 0; //@line 31890
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 31892
 $52 = HEAP8[$0 + 104 >> 0] | 0; //@line 31894
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 31896
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 31898
 $58 = HEAP8[$0 + 116 >> 0] | 0; //@line 31900
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 31902
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 31904
 $64 = HEAP8[$0 + 128 >> 0] | 0; //@line 31906
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 31908
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 31910
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 31912
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 31914
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 31916
 $76 = (HEAP32[$0 + 88 >> 2] | 0) == (HEAP32[HEAP32[$0 + 64 >> 2] >> 2] | 0); //@line 31918
 $$$1177 = $76 ? HEAP32[$0 + 60 >> 2] | 0 : HEAP32[$0 + 56 >> 2] | 0; //@line 31919
 $80 = $70 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv(HEAP32[$10 >> 2] | 0) | 0) & 65535) >>> 0; //@line 31923
 $82 = (__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 4 | 0; //@line 31925
 if (!$80) {
  HEAP32[$82 >> 2] = 10; //@line 31927
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 32 >> 2] = $$$1177; //@line 31930
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 31931
  __ZN7LoRaMac21prepare_rx_done_abortEv($50); //@line 31932
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 401; //@line 31935
   $85 = $ReallocAsyncCtx10 + 4 | 0; //@line 31936
   HEAP32[$85 >> 2] = $4; //@line 31937
   $86 = $ReallocAsyncCtx10 + 8 | 0; //@line 31938
   HEAP32[$86 >> 2] = $68; //@line 31939
   sp = STACKTOP; //@line 31940
   return;
  }
  ___async_unwind = 0; //@line 31943
  HEAP32[$ReallocAsyncCtx10 >> 2] = 401; //@line 31944
  $85 = $ReallocAsyncCtx10 + 4 | 0; //@line 31945
  HEAP32[$85 >> 2] = $4; //@line 31946
  $86 = $ReallocAsyncCtx10 + 8 | 0; //@line 31947
  HEAP32[$86 >> 2] = $68; //@line 31948
  sp = STACKTOP; //@line 31949
  return;
 }
 if (!$76) {
  HEAP32[$82 >> 2] = 12; //@line 31953
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 31954
  __ZN7LoRaMac21prepare_rx_done_abortEv($50); //@line 31955
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 412; //@line 31958
   $261 = $ReallocAsyncCtx7 + 4 | 0; //@line 31959
   HEAP32[$261 >> 2] = $4; //@line 31960
   $262 = $ReallocAsyncCtx7 + 8 | 0; //@line 31961
   HEAP32[$262 >> 2] = $68; //@line 31962
   sp = STACKTOP; //@line 31963
   return;
  }
  ___async_unwind = 0; //@line 31966
  HEAP32[$ReallocAsyncCtx7 >> 2] = 412; //@line 31967
  $261 = $ReallocAsyncCtx7 + 4 | 0; //@line 31968
  HEAP32[$261 >> 2] = $4; //@line 31969
  $262 = $ReallocAsyncCtx7 + 8 | 0; //@line 31970
  HEAP32[$262 >> 2] = $68; //@line 31971
  sp = STACKTOP; //@line 31972
  return;
 }
 HEAP32[$82 >> 2] = 0; //@line 31975
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 8 >> 0] = $16; //@line 31978
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 11 >> 0] = ($64 & 255) >>> 4 & 1; //@line 31983
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 12 >> 2] = 0; //@line 31986
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 16 >> 1] = 0; //@line 31989
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 32 >> 2] = $$$1177; //@line 31992
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($26) | 0) + 4 >> 2] = 0; //@line 31995
 HEAP32[$50 + 964 >> 2] = 0; //@line 31997
 $102 = $50 + 4 | 0; //@line 31998
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($102); //@line 31999
 do {
  if ($16 << 24 >> 24 == 1) {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) >> 2] = 2; //@line 32004
   $105 = $12 + 36 | 0; //@line 32005
   $106 = HEAP32[$105 >> 2] | 0; //@line 32006
   if (($106 | 0) != ($$$1177 | 0) | ($106 | 0) == 0) {
    $$1$off0 = 0; //@line 32011
    $$sink = $105; //@line 32011
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 4 >> 2] = 8; //@line 32015
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 32 >> 2] = $$$1177; //@line 32018
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 32019
    __ZN7LoRaMac21prepare_rx_done_abortEv($50); //@line 32020
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 402; //@line 32023
     $113 = $ReallocAsyncCtx9 + 4 | 0; //@line 32024
     HEAP32[$113 >> 2] = $4; //@line 32025
     $114 = $ReallocAsyncCtx9 + 8 | 0; //@line 32026
     HEAP32[$114 >> 2] = $68; //@line 32027
     sp = STACKTOP; //@line 32028
     return;
    }
    ___async_unwind = 0; //@line 32031
    HEAP32[$ReallocAsyncCtx9 >> 2] = 402; //@line 32032
    $113 = $ReallocAsyncCtx9 + 4 | 0; //@line 32033
    HEAP32[$113 >> 2] = $4; //@line 32034
    $114 = $ReallocAsyncCtx9 + 8 | 0; //@line 32035
    HEAP32[$114 >> 2] = $68; //@line 32036
    sp = STACKTOP; //@line 32037
    return;
   }
  } else {
   $116 = $50 + 374 | 0; //@line 32042
   if ($48 << 24 >> 24 == 5) {
    HEAP8[$116 >> 0] = 1; //@line 32044
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) >> 2] = 1; //@line 32046
    $118 = $50 + 960 | 0; //@line 32047
    $119 = HEAP32[$118 >> 2] | 0; //@line 32048
    $$1$off0 = ($119 | 0) != 0 & ($119 | 0) == ($$$1177 | 0); //@line 32052
    $$sink = $118; //@line 32052
    break;
   }
   HEAP8[$116 >> 0] = 0; //@line 32055
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) >> 2] = 0; //@line 32057
   $123 = $50 + 960 | 0; //@line 32058
   $124 = HEAP32[$123 >> 2] | 0; //@line 32059
   if (($124 | 0) != ($$$1177 | 0) | ($124 | 0) == 0) {
    $$1$off0 = 0; //@line 32064
    $$sink = $123; //@line 32064
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 4 >> 2] = 8; //@line 32068
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 32 >> 2] = $$$1177; //@line 32071
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 32072
    __ZN7LoRaMac21prepare_rx_done_abortEv($50); //@line 32073
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 32076
     $131 = $ReallocAsyncCtx8 + 4 | 0; //@line 32077
     HEAP32[$131 >> 2] = $4; //@line 32078
     $132 = $ReallocAsyncCtx8 + 8 | 0; //@line 32079
     HEAP32[$132 >> 2] = $68; //@line 32080
     sp = STACKTOP; //@line 32081
     return;
    }
    ___async_unwind = 0; //@line 32084
    HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 32085
    $131 = $ReallocAsyncCtx8 + 4 | 0; //@line 32086
    HEAP32[$131 >> 2] = $4; //@line 32087
    $132 = $ReallocAsyncCtx8 + 8 | 0; //@line 32088
    HEAP32[$132 >> 2] = $68; //@line 32089
    sp = STACKTOP; //@line 32090
    return;
   }
  }
 } while (0);
 HEAP32[$$sink >> 2] = $$$1177; //@line 32095
 if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($26) | 0) >> 2] | 0) == 1) {
  if ($64 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($102); //@line 32103
  }
 } else {
  __ZN14LoRaMacCommand20clear_command_bufferEv($102); //@line 32106
 }
 do {
  if (($18 | 0) > ($72 | 0)) {
   $139 = $66 + 9 | 0; //@line 32111
   $141 = HEAP8[$54 + $72 >> 0] | 0; //@line 32113
   $142 = $18 - $139 | 0; //@line 32114
   $143 = $142 & 255; //@line 32115
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 9 >> 0] = $141; //@line 32118
   $147 = $42 << 24 >> 24 == 0; //@line 32120
   if (!($141 << 24 >> 24)) {
    if (!$147) {
     $$3$off0204 = 6; //@line 32123
     break;
    }
    $151 = $50 + 638 | 0; //@line 32129
    if (__Z15decrypt_payloadPKhtS0_jhjPh($54 + $139 | 0, $142 & 255, $8, $6, 1, $$$1177, $151) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 4 >> 2] = 13; //@line 32135
    }
    $156 = $50 + 264 | 0; //@line 32137
    $157 = __ZN11LoRaMacMlme16get_confirmationEv($156) | 0; //@line 32138
    $159 = HEAP32[$10 >> 2] | 0; //@line 32140
    $ReallocAsyncCtx21 = _emscripten_realloc_async_context(56) | 0; //@line 32141
    $160 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($102, $151, 0, $143, $58, $157, $50 + 1096 | 0, $159) | 0; //@line 32142
    if (___async) {
     HEAP32[$ReallocAsyncCtx21 >> 2] = 404; //@line 32145
     $161 = $ReallocAsyncCtx21 + 4 | 0; //@line 32146
     HEAP32[$161 >> 2] = $4; //@line 32147
     $162 = $ReallocAsyncCtx21 + 8 | 0; //@line 32148
     HEAP32[$162 >> 2] = $68; //@line 32149
     $163 = $ReallocAsyncCtx21 + 12 | 0; //@line 32150
     HEAP32[$163 >> 2] = $56; //@line 32151
     $164 = $ReallocAsyncCtx21 + 16 | 0; //@line 32152
     HEAP32[$164 >> 2] = $60; //@line 32153
     $165 = $ReallocAsyncCtx21 + 20 | 0; //@line 32154
     HEAP32[$165 >> 2] = $36; //@line 32155
     $166 = $ReallocAsyncCtx21 + 24 | 0; //@line 32156
     HEAP32[$166 >> 2] = $40; //@line 32157
     $167 = $ReallocAsyncCtx21 + 28 | 0; //@line 32158
     HEAP32[$167 >> 2] = $26; //@line 32159
     $168 = $ReallocAsyncCtx21 + 32 | 0; //@line 32160
     $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 32161
     HEAP8[$168 >> 0] = $$1$off0$expand_i1_val; //@line 32162
     $169 = $ReallocAsyncCtx21 + 36 | 0; //@line 32163
     HEAP32[$169 >> 2] = $156; //@line 32164
     $170 = $ReallocAsyncCtx21 + 40 | 0; //@line 32165
     HEAP32[$170 >> 2] = $50; //@line 32166
     $171 = $ReallocAsyncCtx21 + 44 | 0; //@line 32167
     HEAP32[$171 >> 2] = $102; //@line 32168
     $172 = $ReallocAsyncCtx21 + 48 | 0; //@line 32169
     HEAP8[$172 >> 0] = $64; //@line 32170
     $173 = $ReallocAsyncCtx21 + 52 | 0; //@line 32171
     HEAP32[$173 >> 2] = $62; //@line 32172
     sp = STACKTOP; //@line 32173
     return;
    }
    HEAP32[___async_retval >> 2] = $160; //@line 32177
    ___async_unwind = 0; //@line 32178
    HEAP32[$ReallocAsyncCtx21 >> 2] = 404; //@line 32179
    $161 = $ReallocAsyncCtx21 + 4 | 0; //@line 32180
    HEAP32[$161 >> 2] = $4; //@line 32181
    $162 = $ReallocAsyncCtx21 + 8 | 0; //@line 32182
    HEAP32[$162 >> 2] = $68; //@line 32183
    $163 = $ReallocAsyncCtx21 + 12 | 0; //@line 32184
    HEAP32[$163 >> 2] = $56; //@line 32185
    $164 = $ReallocAsyncCtx21 + 16 | 0; //@line 32186
    HEAP32[$164 >> 2] = $60; //@line 32187
    $165 = $ReallocAsyncCtx21 + 20 | 0; //@line 32188
    HEAP32[$165 >> 2] = $36; //@line 32189
    $166 = $ReallocAsyncCtx21 + 24 | 0; //@line 32190
    HEAP32[$166 >> 2] = $40; //@line 32191
    $167 = $ReallocAsyncCtx21 + 28 | 0; //@line 32192
    HEAP32[$167 >> 2] = $26; //@line 32193
    $168 = $ReallocAsyncCtx21 + 32 | 0; //@line 32194
    $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 32195
    HEAP8[$168 >> 0] = $$1$off0$expand_i1_val; //@line 32196
    $169 = $ReallocAsyncCtx21 + 36 | 0; //@line 32197
    HEAP32[$169 >> 2] = $156; //@line 32198
    $170 = $ReallocAsyncCtx21 + 40 | 0; //@line 32199
    HEAP32[$170 >> 2] = $50; //@line 32200
    $171 = $ReallocAsyncCtx21 + 44 | 0; //@line 32201
    HEAP32[$171 >> 2] = $102; //@line 32202
    $172 = $ReallocAsyncCtx21 + 48 | 0; //@line 32203
    HEAP8[$172 >> 0] = $64; //@line 32204
    $173 = $ReallocAsyncCtx21 + 52 | 0; //@line 32205
    HEAP32[$173 >> 2] = $62; //@line 32206
    sp = STACKTOP; //@line 32207
    return;
   }
   if ($147) {
    $202 = $142 & 255; //@line 32213
    $203 = $50 + 638 | 0; //@line 32214
    if (__Z15decrypt_payloadPKhtS0_jhjPh($54 + $139 | 0, $202, $22, $6, 1, $$$1177, $203) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 4 >> 2] = 13; //@line 32220
    }
    if ($$1$off0) {
     $$3$off0204 = 6; //@line 32223
     break;
    }
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 12 >> 2] = $203; //@line 32228
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 16 >> 1] = $202; //@line 32231
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 18 >> 0] = 1; //@line 32234
    label = 44; //@line 32235
    break;
   } else {
    $175 = $50 + 264 | 0; //@line 32238
    $176 = __ZN11LoRaMacMlme16get_confirmationEv($175) | 0; //@line 32239
    $178 = HEAP32[$10 >> 2] | 0; //@line 32241
    $ReallocAsyncCtx20 = _emscripten_realloc_async_context(76) | 0; //@line 32242
    $179 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($102, $54, 8, $52, $58, $176, $50 + 1096 | 0, $178) | 0; //@line 32243
    if (___async) {
     HEAP32[$ReallocAsyncCtx20 >> 2] = 406; //@line 32246
     $180 = $ReallocAsyncCtx20 + 4 | 0; //@line 32247
     HEAP32[$180 >> 2] = $4; //@line 32248
     $181 = $ReallocAsyncCtx20 + 8 | 0; //@line 32249
     HEAP32[$181 >> 2] = $68; //@line 32250
     $182 = $ReallocAsyncCtx20 + 12 | 0; //@line 32251
     HEAP32[$182 >> 2] = $50; //@line 32252
     $183 = $ReallocAsyncCtx20 + 16 | 0; //@line 32253
     HEAP32[$183 >> 2] = $62; //@line 32254
     $184 = $ReallocAsyncCtx20 + 20 | 0; //@line 32255
     HEAP32[$184 >> 2] = $26; //@line 32256
     $185 = $ReallocAsyncCtx20 + 24 | 0; //@line 32257
     HEAP8[$185 >> 0] = $64; //@line 32258
     $186 = $ReallocAsyncCtx20 + 25 | 0; //@line 32259
     $$1$off0$expand_i1_val29 = $$1$off0 & 1; //@line 32260
     HEAP8[$186 >> 0] = $$1$off0$expand_i1_val29; //@line 32261
     $187 = $ReallocAsyncCtx20 + 28 | 0; //@line 32262
     HEAP32[$187 >> 2] = $54; //@line 32263
     $188 = $ReallocAsyncCtx20 + 32 | 0; //@line 32264
     HEAP32[$188 >> 2] = $139; //@line 32265
     $189 = $ReallocAsyncCtx20 + 36 | 0; //@line 32266
     HEAP32[$189 >> 2] = $142; //@line 32267
     $190 = $ReallocAsyncCtx20 + 40 | 0; //@line 32268
     HEAP32[$190 >> 2] = $22; //@line 32269
     $191 = $ReallocAsyncCtx20 + 44 | 0; //@line 32270
     HEAP32[$191 >> 2] = $6; //@line 32271
     $192 = $ReallocAsyncCtx20 + 48 | 0; //@line 32272
     HEAP32[$192 >> 2] = $$$1177; //@line 32273
     $193 = $ReallocAsyncCtx20 + 52 | 0; //@line 32274
     HEAP32[$193 >> 2] = $24; //@line 32275
     $194 = $ReallocAsyncCtx20 + 56 | 0; //@line 32276
     HEAP32[$194 >> 2] = $2; //@line 32277
     $195 = $ReallocAsyncCtx20 + 60 | 0; //@line 32278
     HEAP32[$195 >> 2] = $74; //@line 32279
     $196 = $ReallocAsyncCtx20 + 64 | 0; //@line 32280
     HEAP32[$196 >> 2] = $46; //@line 32281
     $197 = $ReallocAsyncCtx20 + 68 | 0; //@line 32282
     HEAP32[$197 >> 2] = $102; //@line 32283
     $198 = $ReallocAsyncCtx20 + 72 | 0; //@line 32284
     HEAP32[$198 >> 2] = $175; //@line 32285
     sp = STACKTOP; //@line 32286
     return;
    }
    HEAP32[___async_retval >> 2] = $179; //@line 32290
    ___async_unwind = 0; //@line 32291
    HEAP32[$ReallocAsyncCtx20 >> 2] = 406; //@line 32292
    $180 = $ReallocAsyncCtx20 + 4 | 0; //@line 32293
    HEAP32[$180 >> 2] = $4; //@line 32294
    $181 = $ReallocAsyncCtx20 + 8 | 0; //@line 32295
    HEAP32[$181 >> 2] = $68; //@line 32296
    $182 = $ReallocAsyncCtx20 + 12 | 0; //@line 32297
    HEAP32[$182 >> 2] = $50; //@line 32298
    $183 = $ReallocAsyncCtx20 + 16 | 0; //@line 32299
    HEAP32[$183 >> 2] = $62; //@line 32300
    $184 = $ReallocAsyncCtx20 + 20 | 0; //@line 32301
    HEAP32[$184 >> 2] = $26; //@line 32302
    $185 = $ReallocAsyncCtx20 + 24 | 0; //@line 32303
    HEAP8[$185 >> 0] = $64; //@line 32304
    $186 = $ReallocAsyncCtx20 + 25 | 0; //@line 32305
    $$1$off0$expand_i1_val29 = $$1$off0 & 1; //@line 32306
    HEAP8[$186 >> 0] = $$1$off0$expand_i1_val29; //@line 32307
    $187 = $ReallocAsyncCtx20 + 28 | 0; //@line 32308
    HEAP32[$187 >> 2] = $54; //@line 32309
    $188 = $ReallocAsyncCtx20 + 32 | 0; //@line 32310
    HEAP32[$188 >> 2] = $139; //@line 32311
    $189 = $ReallocAsyncCtx20 + 36 | 0; //@line 32312
    HEAP32[$189 >> 2] = $142; //@line 32313
    $190 = $ReallocAsyncCtx20 + 40 | 0; //@line 32314
    HEAP32[$190 >> 2] = $22; //@line 32315
    $191 = $ReallocAsyncCtx20 + 44 | 0; //@line 32316
    HEAP32[$191 >> 2] = $6; //@line 32317
    $192 = $ReallocAsyncCtx20 + 48 | 0; //@line 32318
    HEAP32[$192 >> 2] = $$$1177; //@line 32319
    $193 = $ReallocAsyncCtx20 + 52 | 0; //@line 32320
    HEAP32[$193 >> 2] = $24; //@line 32321
    $194 = $ReallocAsyncCtx20 + 56 | 0; //@line 32322
    HEAP32[$194 >> 2] = $2; //@line 32323
    $195 = $ReallocAsyncCtx20 + 60 | 0; //@line 32324
    HEAP32[$195 >> 2] = $74; //@line 32325
    $196 = $ReallocAsyncCtx20 + 64 | 0; //@line 32326
    HEAP32[$196 >> 2] = $46; //@line 32327
    $197 = $ReallocAsyncCtx20 + 68 | 0; //@line 32328
    HEAP32[$197 >> 2] = $102; //@line 32329
    $198 = $ReallocAsyncCtx20 + 72 | 0; //@line 32330
    HEAP32[$198 >> 2] = $175; //@line 32331
    sp = STACKTOP; //@line 32332
    return;
   }
  } else {
   if (!($42 << 24 >> 24)) {
    if ($$1$off0) {
     $$3$off0204 = 6; //@line 32339
     break;
    } else {
     label = 44; //@line 32342
     break;
    }
   }
   $215 = $50 + 264 | 0; //@line 32346
   $216 = __ZN11LoRaMacMlme16get_confirmationEv($215) | 0; //@line 32347
   $218 = HEAP32[$10 >> 2] | 0; //@line 32349
   $ReallocAsyncCtx19 = _emscripten_realloc_async_context(52) | 0; //@line 32350
   $219 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($102, $54, 8, $52, $58, $216, $50 + 1096 | 0, $218) | 0; //@line 32351
   if (___async) {
    HEAP32[$ReallocAsyncCtx19 >> 2] = 408; //@line 32354
    $220 = $ReallocAsyncCtx19 + 4 | 0; //@line 32355
    HEAP32[$220 >> 2] = $4; //@line 32356
    $221 = $ReallocAsyncCtx19 + 8 | 0; //@line 32357
    HEAP32[$221 >> 2] = $68; //@line 32358
    $222 = $ReallocAsyncCtx19 + 12 | 0; //@line 32359
    HEAP32[$222 >> 2] = $50; //@line 32360
    $223 = $ReallocAsyncCtx19 + 16 | 0; //@line 32361
    HEAP32[$223 >> 2] = $62; //@line 32362
    $224 = $ReallocAsyncCtx19 + 20 | 0; //@line 32363
    HEAP32[$224 >> 2] = $215; //@line 32364
    $225 = $ReallocAsyncCtx19 + 24 | 0; //@line 32365
    HEAP32[$225 >> 2] = $102; //@line 32366
    $226 = $ReallocAsyncCtx19 + 28 | 0; //@line 32367
    $$1$off0$expand_i1_val31 = $$1$off0 & 1; //@line 32368
    HEAP8[$226 >> 0] = $$1$off0$expand_i1_val31; //@line 32369
    $227 = $ReallocAsyncCtx19 + 29 | 0; //@line 32370
    HEAP8[$227 >> 0] = $64; //@line 32371
    $228 = $ReallocAsyncCtx19 + 32 | 0; //@line 32372
    HEAP32[$228 >> 2] = $26; //@line 32373
    $229 = $ReallocAsyncCtx19 + 36 | 0; //@line 32374
    HEAP32[$229 >> 2] = $38; //@line 32375
    $230 = $ReallocAsyncCtx19 + 40 | 0; //@line 32376
    HEAP32[$230 >> 2] = $34; //@line 32377
    $231 = $ReallocAsyncCtx19 + 44 | 0; //@line 32378
    HEAP32[$231 >> 2] = $20; //@line 32379
    $232 = $ReallocAsyncCtx19 + 48 | 0; //@line 32380
    HEAP32[$232 >> 2] = $14; //@line 32381
    sp = STACKTOP; //@line 32382
    return;
   }
   HEAP32[___async_retval >> 2] = $219; //@line 32386
   ___async_unwind = 0; //@line 32387
   HEAP32[$ReallocAsyncCtx19 >> 2] = 408; //@line 32388
   $220 = $ReallocAsyncCtx19 + 4 | 0; //@line 32389
   HEAP32[$220 >> 2] = $4; //@line 32390
   $221 = $ReallocAsyncCtx19 + 8 | 0; //@line 32391
   HEAP32[$221 >> 2] = $68; //@line 32392
   $222 = $ReallocAsyncCtx19 + 12 | 0; //@line 32393
   HEAP32[$222 >> 2] = $50; //@line 32394
   $223 = $ReallocAsyncCtx19 + 16 | 0; //@line 32395
   HEAP32[$223 >> 2] = $62; //@line 32396
   $224 = $ReallocAsyncCtx19 + 20 | 0; //@line 32397
   HEAP32[$224 >> 2] = $215; //@line 32398
   $225 = $ReallocAsyncCtx19 + 24 | 0; //@line 32399
   HEAP32[$225 >> 2] = $102; //@line 32400
   $226 = $ReallocAsyncCtx19 + 28 | 0; //@line 32401
   $$1$off0$expand_i1_val31 = $$1$off0 & 1; //@line 32402
   HEAP8[$226 >> 0] = $$1$off0$expand_i1_val31; //@line 32403
   $227 = $ReallocAsyncCtx19 + 29 | 0; //@line 32404
   HEAP8[$227 >> 0] = $64; //@line 32405
   $228 = $ReallocAsyncCtx19 + 32 | 0; //@line 32406
   HEAP32[$228 >> 2] = $26; //@line 32407
   $229 = $ReallocAsyncCtx19 + 36 | 0; //@line 32408
   HEAP32[$229 >> 2] = $38; //@line 32409
   $230 = $ReallocAsyncCtx19 + 40 | 0; //@line 32410
   HEAP32[$230 >> 2] = $34; //@line 32411
   $231 = $ReallocAsyncCtx19 + 44 | 0; //@line 32412
   HEAP32[$231 >> 2] = $20; //@line 32413
   $232 = $ReallocAsyncCtx19 + 48 | 0; //@line 32414
   HEAP32[$232 >> 2] = $14; //@line 32415
   sp = STACKTOP; //@line 32416
   return;
  }
 } while (0);
 if ((label | 0) == 44) {
  $237 = (__ZN11LoRaMacMcps16get_confirmationEv($26) | 0) + 10 | 0; //@line 32424
  if ($64 & 32) {
   HEAP8[$237 >> 0] = 1; //@line 32426
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($26) | 0) + 28 >> 0] = 1; //@line 32429
   $240 = HEAP32[$62 >> 2] | 0; //@line 32430
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 32432
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($240, $50 + 1076 | 0); //@line 32433
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 410; //@line 32436
    $242 = $ReallocAsyncCtx23 + 4 | 0; //@line 32437
    HEAP32[$242 >> 2] = $50; //@line 32438
    $243 = $ReallocAsyncCtx23 + 8 | 0; //@line 32439
    HEAP32[$243 >> 2] = $62; //@line 32440
    $244 = $ReallocAsyncCtx23 + 12 | 0; //@line 32441
    HEAP32[$244 >> 2] = $4; //@line 32442
    $245 = $ReallocAsyncCtx23 + 16 | 0; //@line 32443
    HEAP32[$245 >> 2] = $68; //@line 32444
    sp = STACKTOP; //@line 32445
    return;
   }
   ___async_unwind = 0; //@line 32448
   HEAP32[$ReallocAsyncCtx23 >> 2] = 410; //@line 32449
   $242 = $ReallocAsyncCtx23 + 4 | 0; //@line 32450
   HEAP32[$242 >> 2] = $50; //@line 32451
   $243 = $ReallocAsyncCtx23 + 8 | 0; //@line 32452
   HEAP32[$243 >> 2] = $62; //@line 32453
   $244 = $ReallocAsyncCtx23 + 12 | 0; //@line 32454
   HEAP32[$244 >> 2] = $4; //@line 32455
   $245 = $ReallocAsyncCtx23 + 16 | 0; //@line 32456
   HEAP32[$245 >> 2] = $68; //@line 32457
   sp = STACKTOP; //@line 32458
   return;
  }
  HEAP8[$237 >> 0] = 0; //@line 32461
  if ((HEAPU8[$50 + 895 >> 0] | 0) > (HEAPU8[$50 + 894 >> 0] | 0)) {
   $251 = HEAP32[$62 >> 2] | 0; //@line 32468
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 32470
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($251, $50 + 1076 | 0); //@line 32471
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 411; //@line 32474
    $253 = $ReallocAsyncCtx22 + 4 | 0; //@line 32475
    HEAP32[$253 >> 2] = $50; //@line 32476
    $254 = $ReallocAsyncCtx22 + 8 | 0; //@line 32477
    HEAP32[$254 >> 2] = $62; //@line 32478
    $255 = $ReallocAsyncCtx22 + 12 | 0; //@line 32479
    HEAP32[$255 >> 2] = $4; //@line 32480
    $256 = $ReallocAsyncCtx22 + 16 | 0; //@line 32481
    HEAP32[$256 >> 2] = $68; //@line 32482
    sp = STACKTOP; //@line 32483
    return;
   }
   ___async_unwind = 0; //@line 32486
   HEAP32[$ReallocAsyncCtx22 >> 2] = 411; //@line 32487
   $253 = $ReallocAsyncCtx22 + 4 | 0; //@line 32488
   HEAP32[$253 >> 2] = $50; //@line 32489
   $254 = $ReallocAsyncCtx22 + 8 | 0; //@line 32490
   HEAP32[$254 >> 2] = $62; //@line 32491
   $255 = $ReallocAsyncCtx22 + 12 | 0; //@line 32492
   HEAP32[$255 >> 2] = $4; //@line 32493
   $256 = $ReallocAsyncCtx22 + 16 | 0; //@line 32494
   HEAP32[$256 >> 2] = $68; //@line 32495
   sp = STACKTOP; //@line 32496
   return;
  } else {
   $$3$off0204 = 2; //@line 32499
  }
 }
 $257 = $50 + 944 | 0; //@line 32502
 HEAP8[$257 >> 0] = $$3$off0204 | HEAP8[$257 >> 0] & -7; //@line 32506
 $263 = $50 + 944 | 0; //@line 32507
 HEAP8[$263 >> 0] = HEAP8[$263 >> 0] | 32; //@line 32510
 $266 = HEAP32[$62 >> 2] | 0; //@line 32511
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 32513
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($266, $50 + 996 | 0, 1); //@line 32514
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 32517
  $268 = $ReallocAsyncCtx17 + 4 | 0; //@line 32518
  HEAP32[$268 >> 2] = $4; //@line 32519
  $269 = $ReallocAsyncCtx17 + 8 | 0; //@line 32520
  HEAP32[$269 >> 2] = $68; //@line 32521
  sp = STACKTOP; //@line 32522
  return;
 }
 ___async_unwind = 0; //@line 32525
 HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 32526
 $268 = $ReallocAsyncCtx17 + 4 | 0; //@line 32527
 HEAP32[$268 >> 2] = $4; //@line 32528
 $269 = $ReallocAsyncCtx17 + 8 | 0; //@line 32529
 HEAP32[$269 >> 2] = $68; //@line 32530
 sp = STACKTOP; //@line 32531
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_82($0) {
 $0 = $0 | 0;
 var $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val29 = 0, $$1$off0$expand_i1_val31 = 0, $$3$off0204 = 0, $$sink = 0, $10 = 0, $100 = 0, $103 = 0, $104 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $117 = 0, $12 = 0, $121 = 0, $122 = 0, $129 = 0, $130 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $145 = 0, $149 = 0, $154 = 0, $155 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $213 = 0, $214 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $235 = 0, $238 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $249 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $264 = 0, $266 = 0, $267 = 0, $28 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $78 = 0, $8 = 0, $80 = 0, $83 = 0, $84 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 32551
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32553
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32555
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32557
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32559
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32561
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32563
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32565
 $16 = HEAP8[$0 + 32 >> 0] | 0; //@line 32567
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32569
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32571
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 32573
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 32575
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 32577
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 32579
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 32583
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 32585
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 32587
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 32589
 $40 = HEAP8[$0 + 80 >> 0] | 0; //@line 32591
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 32595
 $46 = HEAP8[$0 + 92 >> 0] | 0; //@line 32597
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 32599
 $50 = HEAP8[$0 + 100 >> 0] | 0; //@line 32601
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 32603
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 32605
 $56 = HEAP8[$0 + 112 >> 0] | 0; //@line 32607
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 32609
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 32611
 $62 = HEAP8[$0 + 124 >> 0] | 0; //@line 32613
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 32615
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 32617
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 32619
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 32621
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 32623
 $74 = (HEAP32[$0 + 84 >> 2] | 0) == (HEAP32[HEAP32[$0 + 60 >> 2] >> 2] | 0); //@line 32625
 $78 = $68 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv(HEAP32[$10 >> 2] | 0) | 0) & 65535) >>> 0; //@line 32629
 $80 = (__ZN11LoRaMacMcps14get_indicationEv($28) | 0) + 4 | 0; //@line 32631
 if (!$78) {
  HEAP32[$80 >> 2] = 10; //@line 32633
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($28) | 0) + 32 >> 2] = $26; //@line 32636
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 32637
  __ZN7LoRaMac21prepare_rx_done_abortEv($48); //@line 32638
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 401; //@line 32641
   $83 = $ReallocAsyncCtx10 + 4 | 0; //@line 32642
   HEAP32[$83 >> 2] = $4; //@line 32643
   $84 = $ReallocAsyncCtx10 + 8 | 0; //@line 32644
   HEAP32[$84 >> 2] = $66; //@line 32645
   sp = STACKTOP; //@line 32646
   return;
  }
  ___async_unwind = 0; //@line 32649
  HEAP32[$ReallocAsyncCtx10 >> 2] = 401; //@line 32650
  $83 = $ReallocAsyncCtx10 + 4 | 0; //@line 32651
  HEAP32[$83 >> 2] = $4; //@line 32652
  $84 = $ReallocAsyncCtx10 + 8 | 0; //@line 32653
  HEAP32[$84 >> 2] = $66; //@line 32654
  sp = STACKTOP; //@line 32655
  return;
 }
 if (!$74) {
  HEAP32[$80 >> 2] = 12; //@line 32659
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 32660
  __ZN7LoRaMac21prepare_rx_done_abortEv($48); //@line 32661
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 412; //@line 32664
   $259 = $ReallocAsyncCtx7 + 4 | 0; //@line 32665
   HEAP32[$259 >> 2] = $4; //@line 32666
   $260 = $ReallocAsyncCtx7 + 8 | 0; //@line 32667
   HEAP32[$260 >> 2] = $66; //@line 32668
   sp = STACKTOP; //@line 32669
   return;
  }
  ___async_unwind = 0; //@line 32672
  HEAP32[$ReallocAsyncCtx7 >> 2] = 412; //@line 32673
  $259 = $ReallocAsyncCtx7 + 4 | 0; //@line 32674
  HEAP32[$259 >> 2] = $4; //@line 32675
  $260 = $ReallocAsyncCtx7 + 8 | 0; //@line 32676
  HEAP32[$260 >> 2] = $66; //@line 32677
  sp = STACKTOP; //@line 32678
  return;
 }
 HEAP32[$80 >> 2] = 0; //@line 32681
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($28) | 0) + 8 >> 0] = $16; //@line 32684
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($28) | 0) + 11 >> 0] = ($62 & 255) >>> 4 & 1; //@line 32689
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($28) | 0) + 12 >> 2] = 0; //@line 32692
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($28) | 0) + 16 >> 1] = 0; //@line 32695
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($28) | 0) + 32 >> 2] = $26; //@line 32698
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($28) | 0) + 4 >> 2] = 0; //@line 32701
 HEAP32[$48 + 964 >> 2] = 0; //@line 32703
 $100 = $48 + 4 | 0; //@line 32704
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($100); //@line 32705
 do {
  if ($16 << 24 >> 24 == 1) {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($28) | 0) >> 2] = 2; //@line 32710
   $103 = $12 + 36 | 0; //@line 32711
   $104 = HEAP32[$103 >> 2] | 0; //@line 32712
   if (($104 | 0) != ($26 | 0) | ($104 | 0) == 0) {
    $$1$off0 = 0; //@line 32717
    $$sink = $103; //@line 32717
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($28) | 0) + 4 >> 2] = 8; //@line 32721
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($28) | 0) + 32 >> 2] = $26; //@line 32724
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 32725
    __ZN7LoRaMac21prepare_rx_done_abortEv($48); //@line 32726
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 402; //@line 32729
     $111 = $ReallocAsyncCtx9 + 4 | 0; //@line 32730
     HEAP32[$111 >> 2] = $4; //@line 32731
     $112 = $ReallocAsyncCtx9 + 8 | 0; //@line 32732
     HEAP32[$112 >> 2] = $66; //@line 32733
     sp = STACKTOP; //@line 32734
     return;
    }
    ___async_unwind = 0; //@line 32737
    HEAP32[$ReallocAsyncCtx9 >> 2] = 402; //@line 32738
    $111 = $ReallocAsyncCtx9 + 4 | 0; //@line 32739
    HEAP32[$111 >> 2] = $4; //@line 32740
    $112 = $ReallocAsyncCtx9 + 8 | 0; //@line 32741
    HEAP32[$112 >> 2] = $66; //@line 32742
    sp = STACKTOP; //@line 32743
    return;
   }
  } else {
   $114 = $48 + 374 | 0; //@line 32748
   if ($46 << 24 >> 24 == 5) {
    HEAP8[$114 >> 0] = 1; //@line 32750
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($28) | 0) >> 2] = 1; //@line 32752
    $116 = $48 + 960 | 0; //@line 32753
    $117 = HEAP32[$116 >> 2] | 0; //@line 32754
    $$1$off0 = ($117 | 0) != 0 & ($117 | 0) == ($26 | 0); //@line 32758
    $$sink = $116; //@line 32758
    break;
   }
   HEAP8[$114 >> 0] = 0; //@line 32761
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($28) | 0) >> 2] = 0; //@line 32763
   $121 = $48 + 960 | 0; //@line 32764
   $122 = HEAP32[$121 >> 2] | 0; //@line 32765
   if (($122 | 0) != ($26 | 0) | ($122 | 0) == 0) {
    $$1$off0 = 0; //@line 32770
    $$sink = $121; //@line 32770
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($28) | 0) + 4 >> 2] = 8; //@line 32774
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($28) | 0) + 32 >> 2] = $26; //@line 32777
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 32778
    __ZN7LoRaMac21prepare_rx_done_abortEv($48); //@line 32779
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 32782
     $129 = $ReallocAsyncCtx8 + 4 | 0; //@line 32783
     HEAP32[$129 >> 2] = $4; //@line 32784
     $130 = $ReallocAsyncCtx8 + 8 | 0; //@line 32785
     HEAP32[$130 >> 2] = $66; //@line 32786
     sp = STACKTOP; //@line 32787
     return;
    }
    ___async_unwind = 0; //@line 32790
    HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 32791
    $129 = $ReallocAsyncCtx8 + 4 | 0; //@line 32792
    HEAP32[$129 >> 2] = $4; //@line 32793
    $130 = $ReallocAsyncCtx8 + 8 | 0; //@line 32794
    HEAP32[$130 >> 2] = $66; //@line 32795
    sp = STACKTOP; //@line 32796
    return;
   }
  }
 } while (0);
 HEAP32[$$sink >> 2] = $26; //@line 32801
 if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($28) | 0) >> 2] | 0) == 1) {
  if ($62 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($100); //@line 32809
  }
 } else {
  __ZN14LoRaMacCommand20clear_command_bufferEv($100); //@line 32812
 }
 do {
  if (($18 | 0) > ($70 | 0)) {
   $137 = $64 + 9 | 0; //@line 32817
   $139 = HEAP8[$52 + $70 >> 0] | 0; //@line 32819
   $140 = $18 - $137 | 0; //@line 32820
   $141 = $140 & 255; //@line 32821
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($28) | 0) + 9 >> 0] = $139; //@line 32824
   $145 = $40 << 24 >> 24 == 0; //@line 32826
   if (!($139 << 24 >> 24)) {
    if (!$145) {
     $$3$off0204 = 6; //@line 32829
     break;
    }
    $149 = $48 + 638 | 0; //@line 32835
    if (__Z15decrypt_payloadPKhtS0_jhjPh($52 + $137 | 0, $140 & 255, $8, $6, 1, $26, $149) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($28) | 0) + 4 >> 2] = 13; //@line 32841
    }
    $154 = $48 + 264 | 0; //@line 32843
    $155 = __ZN11LoRaMacMlme16get_confirmationEv($154) | 0; //@line 32844
    $157 = HEAP32[$10 >> 2] | 0; //@line 32846
    $ReallocAsyncCtx21 = _emscripten_realloc_async_context(56) | 0; //@line 32847
    $158 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($100, $149, 0, $141, $56, $155, $48 + 1096 | 0, $157) | 0; //@line 32848
    if (___async) {
     HEAP32[$ReallocAsyncCtx21 >> 2] = 404; //@line 32851
     $159 = $ReallocAsyncCtx21 + 4 | 0; //@line 32852
     HEAP32[$159 >> 2] = $4; //@line 32853
     $160 = $ReallocAsyncCtx21 + 8 | 0; //@line 32854
     HEAP32[$160 >> 2] = $66; //@line 32855
     $161 = $ReallocAsyncCtx21 + 12 | 0; //@line 32856
     HEAP32[$161 >> 2] = $54; //@line 32857
     $162 = $ReallocAsyncCtx21 + 16 | 0; //@line 32858
     HEAP32[$162 >> 2] = $58; //@line 32859
     $163 = $ReallocAsyncCtx21 + 20 | 0; //@line 32860
     HEAP32[$163 >> 2] = $34; //@line 32861
     $164 = $ReallocAsyncCtx21 + 24 | 0; //@line 32862
     HEAP32[$164 >> 2] = $38; //@line 32863
     $165 = $ReallocAsyncCtx21 + 28 | 0; //@line 32864
     HEAP32[$165 >> 2] = $28; //@line 32865
     $166 = $ReallocAsyncCtx21 + 32 | 0; //@line 32866
     $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 32867
     HEAP8[$166 >> 0] = $$1$off0$expand_i1_val; //@line 32868
     $167 = $ReallocAsyncCtx21 + 36 | 0; //@line 32869
     HEAP32[$167 >> 2] = $154; //@line 32870
     $168 = $ReallocAsyncCtx21 + 40 | 0; //@line 32871
     HEAP32[$168 >> 2] = $48; //@line 32872
     $169 = $ReallocAsyncCtx21 + 44 | 0; //@line 32873
     HEAP32[$169 >> 2] = $100; //@line 32874
     $170 = $ReallocAsyncCtx21 + 48 | 0; //@line 32875
     HEAP8[$170 >> 0] = $62; //@line 32876
     $171 = $ReallocAsyncCtx21 + 52 | 0; //@line 32877
     HEAP32[$171 >> 2] = $60; //@line 32878
     sp = STACKTOP; //@line 32879
     return;
    }
    HEAP32[___async_retval >> 2] = $158; //@line 32883
    ___async_unwind = 0; //@line 32884
    HEAP32[$ReallocAsyncCtx21 >> 2] = 404; //@line 32885
    $159 = $ReallocAsyncCtx21 + 4 | 0; //@line 32886
    HEAP32[$159 >> 2] = $4; //@line 32887
    $160 = $ReallocAsyncCtx21 + 8 | 0; //@line 32888
    HEAP32[$160 >> 2] = $66; //@line 32889
    $161 = $ReallocAsyncCtx21 + 12 | 0; //@line 32890
    HEAP32[$161 >> 2] = $54; //@line 32891
    $162 = $ReallocAsyncCtx21 + 16 | 0; //@line 32892
    HEAP32[$162 >> 2] = $58; //@line 32893
    $163 = $ReallocAsyncCtx21 + 20 | 0; //@line 32894
    HEAP32[$163 >> 2] = $34; //@line 32895
    $164 = $ReallocAsyncCtx21 + 24 | 0; //@line 32896
    HEAP32[$164 >> 2] = $38; //@line 32897
    $165 = $ReallocAsyncCtx21 + 28 | 0; //@line 32898
    HEAP32[$165 >> 2] = $28; //@line 32899
    $166 = $ReallocAsyncCtx21 + 32 | 0; //@line 32900
    $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 32901
    HEAP8[$166 >> 0] = $$1$off0$expand_i1_val; //@line 32902
    $167 = $ReallocAsyncCtx21 + 36 | 0; //@line 32903
    HEAP32[$167 >> 2] = $154; //@line 32904
    $168 = $ReallocAsyncCtx21 + 40 | 0; //@line 32905
    HEAP32[$168 >> 2] = $48; //@line 32906
    $169 = $ReallocAsyncCtx21 + 44 | 0; //@line 32907
    HEAP32[$169 >> 2] = $100; //@line 32908
    $170 = $ReallocAsyncCtx21 + 48 | 0; //@line 32909
    HEAP8[$170 >> 0] = $62; //@line 32910
    $171 = $ReallocAsyncCtx21 + 52 | 0; //@line 32911
    HEAP32[$171 >> 2] = $60; //@line 32912
    sp = STACKTOP; //@line 32913
    return;
   }
   if ($145) {
    $200 = $140 & 255; //@line 32919
    $201 = $48 + 638 | 0; //@line 32920
    if (__Z15decrypt_payloadPKhtS0_jhjPh($52 + $137 | 0, $200, $22, $6, 1, $26, $201) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($28) | 0) + 4 >> 2] = 13; //@line 32926
    }
    if ($$1$off0) {
     $$3$off0204 = 6; //@line 32929
     break;
    }
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($28) | 0) + 12 >> 2] = $201; //@line 32934
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($28) | 0) + 16 >> 1] = $200; //@line 32937
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($28) | 0) + 18 >> 0] = 1; //@line 32940
    label = 44; //@line 32941
    break;
   } else {
    $173 = $48 + 264 | 0; //@line 32944
    $174 = __ZN11LoRaMacMlme16get_confirmationEv($173) | 0; //@line 32945
    $176 = HEAP32[$10 >> 2] | 0; //@line 32947
    $ReallocAsyncCtx20 = _emscripten_realloc_async_context(76) | 0; //@line 32948
    $177 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($100, $52, 8, $50, $56, $174, $48 + 1096 | 0, $176) | 0; //@line 32949
    if (___async) {
     HEAP32[$ReallocAsyncCtx20 >> 2] = 406; //@line 32952
     $178 = $ReallocAsyncCtx20 + 4 | 0; //@line 32953
     HEAP32[$178 >> 2] = $4; //@line 32954
     $179 = $ReallocAsyncCtx20 + 8 | 0; //@line 32955
     HEAP32[$179 >> 2] = $66; //@line 32956
     $180 = $ReallocAsyncCtx20 + 12 | 0; //@line 32957
     HEAP32[$180 >> 2] = $48; //@line 32958
     $181 = $ReallocAsyncCtx20 + 16 | 0; //@line 32959
     HEAP32[$181 >> 2] = $60; //@line 32960
     $182 = $ReallocAsyncCtx20 + 20 | 0; //@line 32961
     HEAP32[$182 >> 2] = $28; //@line 32962
     $183 = $ReallocAsyncCtx20 + 24 | 0; //@line 32963
     HEAP8[$183 >> 0] = $62; //@line 32964
     $184 = $ReallocAsyncCtx20 + 25 | 0; //@line 32965
     $$1$off0$expand_i1_val29 = $$1$off0 & 1; //@line 32966
     HEAP8[$184 >> 0] = $$1$off0$expand_i1_val29; //@line 32967
     $185 = $ReallocAsyncCtx20 + 28 | 0; //@line 32968
     HEAP32[$185 >> 2] = $52; //@line 32969
     $186 = $ReallocAsyncCtx20 + 32 | 0; //@line 32970
     HEAP32[$186 >> 2] = $137; //@line 32971
     $187 = $ReallocAsyncCtx20 + 36 | 0; //@line 32972
     HEAP32[$187 >> 2] = $140; //@line 32973
     $188 = $ReallocAsyncCtx20 + 40 | 0; //@line 32974
     HEAP32[$188 >> 2] = $22; //@line 32975
     $189 = $ReallocAsyncCtx20 + 44 | 0; //@line 32976
     HEAP32[$189 >> 2] = $6; //@line 32977
     $190 = $ReallocAsyncCtx20 + 48 | 0; //@line 32978
     HEAP32[$190 >> 2] = $26; //@line 32979
     $191 = $ReallocAsyncCtx20 + 52 | 0; //@line 32980
     HEAP32[$191 >> 2] = $24; //@line 32981
     $192 = $ReallocAsyncCtx20 + 56 | 0; //@line 32982
     HEAP32[$192 >> 2] = $2; //@line 32983
     $193 = $ReallocAsyncCtx20 + 60 | 0; //@line 32984
     HEAP32[$193 >> 2] = $72; //@line 32985
     $194 = $ReallocAsyncCtx20 + 64 | 0; //@line 32986
     HEAP32[$194 >> 2] = $44; //@line 32987
     $195 = $ReallocAsyncCtx20 + 68 | 0; //@line 32988
     HEAP32[$195 >> 2] = $100; //@line 32989
     $196 = $ReallocAsyncCtx20 + 72 | 0; //@line 32990
     HEAP32[$196 >> 2] = $173; //@line 32991
     sp = STACKTOP; //@line 32992
     return;
    }
    HEAP32[___async_retval >> 2] = $177; //@line 32996
    ___async_unwind = 0; //@line 32997
    HEAP32[$ReallocAsyncCtx20 >> 2] = 406; //@line 32998
    $178 = $ReallocAsyncCtx20 + 4 | 0; //@line 32999
    HEAP32[$178 >> 2] = $4; //@line 33000
    $179 = $ReallocAsyncCtx20 + 8 | 0; //@line 33001
    HEAP32[$179 >> 2] = $66; //@line 33002
    $180 = $ReallocAsyncCtx20 + 12 | 0; //@line 33003
    HEAP32[$180 >> 2] = $48; //@line 33004
    $181 = $ReallocAsyncCtx20 + 16 | 0; //@line 33005
    HEAP32[$181 >> 2] = $60; //@line 33006
    $182 = $ReallocAsyncCtx20 + 20 | 0; //@line 33007
    HEAP32[$182 >> 2] = $28; //@line 33008
    $183 = $ReallocAsyncCtx20 + 24 | 0; //@line 33009
    HEAP8[$183 >> 0] = $62; //@line 33010
    $184 = $ReallocAsyncCtx20 + 25 | 0; //@line 33011
    $$1$off0$expand_i1_val29 = $$1$off0 & 1; //@line 33012
    HEAP8[$184 >> 0] = $$1$off0$expand_i1_val29; //@line 33013
    $185 = $ReallocAsyncCtx20 + 28 | 0; //@line 33014
    HEAP32[$185 >> 2] = $52; //@line 33015
    $186 = $ReallocAsyncCtx20 + 32 | 0; //@line 33016
    HEAP32[$186 >> 2] = $137; //@line 33017
    $187 = $ReallocAsyncCtx20 + 36 | 0; //@line 33018
    HEAP32[$187 >> 2] = $140; //@line 33019
    $188 = $ReallocAsyncCtx20 + 40 | 0; //@line 33020
    HEAP32[$188 >> 2] = $22; //@line 33021
    $189 = $ReallocAsyncCtx20 + 44 | 0; //@line 33022
    HEAP32[$189 >> 2] = $6; //@line 33023
    $190 = $ReallocAsyncCtx20 + 48 | 0; //@line 33024
    HEAP32[$190 >> 2] = $26; //@line 33025
    $191 = $ReallocAsyncCtx20 + 52 | 0; //@line 33026
    HEAP32[$191 >> 2] = $24; //@line 33027
    $192 = $ReallocAsyncCtx20 + 56 | 0; //@line 33028
    HEAP32[$192 >> 2] = $2; //@line 33029
    $193 = $ReallocAsyncCtx20 + 60 | 0; //@line 33030
    HEAP32[$193 >> 2] = $72; //@line 33031
    $194 = $ReallocAsyncCtx20 + 64 | 0; //@line 33032
    HEAP32[$194 >> 2] = $44; //@line 33033
    $195 = $ReallocAsyncCtx20 + 68 | 0; //@line 33034
    HEAP32[$195 >> 2] = $100; //@line 33035
    $196 = $ReallocAsyncCtx20 + 72 | 0; //@line 33036
    HEAP32[$196 >> 2] = $173; //@line 33037
    sp = STACKTOP; //@line 33038
    return;
   }
  } else {
   if (!($40 << 24 >> 24)) {
    if ($$1$off0) {
     $$3$off0204 = 6; //@line 33045
     break;
    } else {
     label = 44; //@line 33048
     break;
    }
   }
   $213 = $48 + 264 | 0; //@line 33052
   $214 = __ZN11LoRaMacMlme16get_confirmationEv($213) | 0; //@line 33053
   $216 = HEAP32[$10 >> 2] | 0; //@line 33055
   $ReallocAsyncCtx19 = _emscripten_realloc_async_context(52) | 0; //@line 33056
   $217 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($100, $52, 8, $50, $56, $214, $48 + 1096 | 0, $216) | 0; //@line 33057
   if (___async) {
    HEAP32[$ReallocAsyncCtx19 >> 2] = 408; //@line 33060
    $218 = $ReallocAsyncCtx19 + 4 | 0; //@line 33061
    HEAP32[$218 >> 2] = $4; //@line 33062
    $219 = $ReallocAsyncCtx19 + 8 | 0; //@line 33063
    HEAP32[$219 >> 2] = $66; //@line 33064
    $220 = $ReallocAsyncCtx19 + 12 | 0; //@line 33065
    HEAP32[$220 >> 2] = $48; //@line 33066
    $221 = $ReallocAsyncCtx19 + 16 | 0; //@line 33067
    HEAP32[$221 >> 2] = $60; //@line 33068
    $222 = $ReallocAsyncCtx19 + 20 | 0; //@line 33069
    HEAP32[$222 >> 2] = $213; //@line 33070
    $223 = $ReallocAsyncCtx19 + 24 | 0; //@line 33071
    HEAP32[$223 >> 2] = $100; //@line 33072
    $224 = $ReallocAsyncCtx19 + 28 | 0; //@line 33073
    $$1$off0$expand_i1_val31 = $$1$off0 & 1; //@line 33074
    HEAP8[$224 >> 0] = $$1$off0$expand_i1_val31; //@line 33075
    $225 = $ReallocAsyncCtx19 + 29 | 0; //@line 33076
    HEAP8[$225 >> 0] = $62; //@line 33077
    $226 = $ReallocAsyncCtx19 + 32 | 0; //@line 33078
    HEAP32[$226 >> 2] = $28; //@line 33079
    $227 = $ReallocAsyncCtx19 + 36 | 0; //@line 33080
    HEAP32[$227 >> 2] = $36; //@line 33081
    $228 = $ReallocAsyncCtx19 + 40 | 0; //@line 33082
    HEAP32[$228 >> 2] = $32; //@line 33083
    $229 = $ReallocAsyncCtx19 + 44 | 0; //@line 33084
    HEAP32[$229 >> 2] = $20; //@line 33085
    $230 = $ReallocAsyncCtx19 + 48 | 0; //@line 33086
    HEAP32[$230 >> 2] = $14; //@line 33087
    sp = STACKTOP; //@line 33088
    return;
   }
   HEAP32[___async_retval >> 2] = $217; //@line 33092
   ___async_unwind = 0; //@line 33093
   HEAP32[$ReallocAsyncCtx19 >> 2] = 408; //@line 33094
   $218 = $ReallocAsyncCtx19 + 4 | 0; //@line 33095
   HEAP32[$218 >> 2] = $4; //@line 33096
   $219 = $ReallocAsyncCtx19 + 8 | 0; //@line 33097
   HEAP32[$219 >> 2] = $66; //@line 33098
   $220 = $ReallocAsyncCtx19 + 12 | 0; //@line 33099
   HEAP32[$220 >> 2] = $48; //@line 33100
   $221 = $ReallocAsyncCtx19 + 16 | 0; //@line 33101
   HEAP32[$221 >> 2] = $60; //@line 33102
   $222 = $ReallocAsyncCtx19 + 20 | 0; //@line 33103
   HEAP32[$222 >> 2] = $213; //@line 33104
   $223 = $ReallocAsyncCtx19 + 24 | 0; //@line 33105
   HEAP32[$223 >> 2] = $100; //@line 33106
   $224 = $ReallocAsyncCtx19 + 28 | 0; //@line 33107
   $$1$off0$expand_i1_val31 = $$1$off0 & 1; //@line 33108
   HEAP8[$224 >> 0] = $$1$off0$expand_i1_val31; //@line 33109
   $225 = $ReallocAsyncCtx19 + 29 | 0; //@line 33110
   HEAP8[$225 >> 0] = $62; //@line 33111
   $226 = $ReallocAsyncCtx19 + 32 | 0; //@line 33112
   HEAP32[$226 >> 2] = $28; //@line 33113
   $227 = $ReallocAsyncCtx19 + 36 | 0; //@line 33114
   HEAP32[$227 >> 2] = $36; //@line 33115
   $228 = $ReallocAsyncCtx19 + 40 | 0; //@line 33116
   HEAP32[$228 >> 2] = $32; //@line 33117
   $229 = $ReallocAsyncCtx19 + 44 | 0; //@line 33118
   HEAP32[$229 >> 2] = $20; //@line 33119
   $230 = $ReallocAsyncCtx19 + 48 | 0; //@line 33120
   HEAP32[$230 >> 2] = $14; //@line 33121
   sp = STACKTOP; //@line 33122
   return;
  }
 } while (0);
 if ((label | 0) == 44) {
  $235 = (__ZN11LoRaMacMcps16get_confirmationEv($28) | 0) + 10 | 0; //@line 33130
  if ($62 & 32) {
   HEAP8[$235 >> 0] = 1; //@line 33132
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($28) | 0) + 28 >> 0] = 1; //@line 33135
   $238 = HEAP32[$60 >> 2] | 0; //@line 33136
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 33138
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($238, $48 + 1076 | 0); //@line 33139
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 410; //@line 33142
    $240 = $ReallocAsyncCtx23 + 4 | 0; //@line 33143
    HEAP32[$240 >> 2] = $48; //@line 33144
    $241 = $ReallocAsyncCtx23 + 8 | 0; //@line 33145
    HEAP32[$241 >> 2] = $60; //@line 33146
    $242 = $ReallocAsyncCtx23 + 12 | 0; //@line 33147
    HEAP32[$242 >> 2] = $4; //@line 33148
    $243 = $ReallocAsyncCtx23 + 16 | 0; //@line 33149
    HEAP32[$243 >> 2] = $66; //@line 33150
    sp = STACKTOP; //@line 33151
    return;
   }
   ___async_unwind = 0; //@line 33154
   HEAP32[$ReallocAsyncCtx23 >> 2] = 410; //@line 33155
   $240 = $ReallocAsyncCtx23 + 4 | 0; //@line 33156
   HEAP32[$240 >> 2] = $48; //@line 33157
   $241 = $ReallocAsyncCtx23 + 8 | 0; //@line 33158
   HEAP32[$241 >> 2] = $60; //@line 33159
   $242 = $ReallocAsyncCtx23 + 12 | 0; //@line 33160
   HEAP32[$242 >> 2] = $4; //@line 33161
   $243 = $ReallocAsyncCtx23 + 16 | 0; //@line 33162
   HEAP32[$243 >> 2] = $66; //@line 33163
   sp = STACKTOP; //@line 33164
   return;
  }
  HEAP8[$235 >> 0] = 0; //@line 33167
  if ((HEAPU8[$48 + 895 >> 0] | 0) > (HEAPU8[$48 + 894 >> 0] | 0)) {
   $249 = HEAP32[$60 >> 2] | 0; //@line 33174
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 33176
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($249, $48 + 1076 | 0); //@line 33177
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 411; //@line 33180
    $251 = $ReallocAsyncCtx22 + 4 | 0; //@line 33181
    HEAP32[$251 >> 2] = $48; //@line 33182
    $252 = $ReallocAsyncCtx22 + 8 | 0; //@line 33183
    HEAP32[$252 >> 2] = $60; //@line 33184
    $253 = $ReallocAsyncCtx22 + 12 | 0; //@line 33185
    HEAP32[$253 >> 2] = $4; //@line 33186
    $254 = $ReallocAsyncCtx22 + 16 | 0; //@line 33187
    HEAP32[$254 >> 2] = $66; //@line 33188
    sp = STACKTOP; //@line 33189
    return;
   }
   ___async_unwind = 0; //@line 33192
   HEAP32[$ReallocAsyncCtx22 >> 2] = 411; //@line 33193
   $251 = $ReallocAsyncCtx22 + 4 | 0; //@line 33194
   HEAP32[$251 >> 2] = $48; //@line 33195
   $252 = $ReallocAsyncCtx22 + 8 | 0; //@line 33196
   HEAP32[$252 >> 2] = $60; //@line 33197
   $253 = $ReallocAsyncCtx22 + 12 | 0; //@line 33198
   HEAP32[$253 >> 2] = $4; //@line 33199
   $254 = $ReallocAsyncCtx22 + 16 | 0; //@line 33200
   HEAP32[$254 >> 2] = $66; //@line 33201
   sp = STACKTOP; //@line 33202
   return;
  } else {
   $$3$off0204 = 2; //@line 33205
  }
 }
 $255 = $48 + 944 | 0; //@line 33208
 HEAP8[$255 >> 0] = $$3$off0204 | HEAP8[$255 >> 0] & -7; //@line 33212
 $261 = $48 + 944 | 0; //@line 33213
 HEAP8[$261 >> 0] = HEAP8[$261 >> 0] | 32; //@line 33216
 $264 = HEAP32[$60 >> 2] | 0; //@line 33217
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 33219
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($264, $48 + 996 | 0, 1); //@line 33220
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 33223
  $266 = $ReallocAsyncCtx17 + 4 | 0; //@line 33224
  HEAP32[$266 >> 2] = $4; //@line 33225
  $267 = $ReallocAsyncCtx17 + 8 | 0; //@line 33226
  HEAP32[$267 >> 2] = $66; //@line 33227
  sp = STACKTOP; //@line 33228
  return;
 }
 ___async_unwind = 0; //@line 33231
 HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 33232
 $266 = $ReallocAsyncCtx17 + 4 | 0; //@line 33233
 HEAP32[$266 >> 2] = $4; //@line 33234
 $267 = $ReallocAsyncCtx17 + 8 | 0; //@line 33235
 HEAP32[$267 >> 2] = $66; //@line 33236
 sp = STACKTOP; //@line 33237
 return;
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13238
 STACKTOP = STACKTOP + 560 | 0; //@line 13239
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 13239
 $6 = sp + 8 | 0; //@line 13240
 $7 = sp; //@line 13241
 $8 = sp + 524 | 0; //@line 13242
 $9 = $8; //@line 13243
 $10 = sp + 512 | 0; //@line 13244
 HEAP32[$7 >> 2] = 0; //@line 13245
 $11 = $10 + 12 | 0; //@line 13246
 ___DOUBLE_BITS_677($1) | 0; //@line 13247
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 13252
  $$0520 = 1; //@line 13252
  $$0521 = 16746; //@line 13252
 } else {
  $$0471 = $1; //@line 13263
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 13263
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 16747 : 16752 : 16749; //@line 13263
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 13265
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 13274
   $31 = $$0520 + 3 | 0; //@line 13279
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 13281
   _out_670($0, $$0521, $$0520); //@line 13282
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 16773 : 16777 : $27 ? 16765 : 16769, 3); //@line 13283
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 13285
   $$sink560 = $31; //@line 13286
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 13289
   $36 = $35 != 0.0; //@line 13290
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 13294
   }
   $39 = $5 | 32; //@line 13296
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 13299
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 13302
    $44 = $$0520 | 2; //@line 13303
    $46 = 12 - $3 | 0; //@line 13305
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 13310
     } else {
      $$0509585 = 8.0; //@line 13312
      $$1508586 = $46; //@line 13312
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 13314
       $$0509585 = $$0509585 * 16.0; //@line 13315
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 13330
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 13335
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 13340
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 13343
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 13346
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 13349
     HEAP8[$68 >> 0] = 48; //@line 13350
     $$0511 = $68; //@line 13351
    } else {
     $$0511 = $66; //@line 13353
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 13360
    $76 = $$0511 + -2 | 0; //@line 13363
    HEAP8[$76 >> 0] = $5 + 15; //@line 13364
    $77 = ($3 | 0) < 1; //@line 13365
    $79 = ($4 & 8 | 0) == 0; //@line 13367
    $$0523 = $8; //@line 13368
    $$2473 = $$1472; //@line 13368
    while (1) {
     $80 = ~~$$2473; //@line 13370
     $86 = $$0523 + 1 | 0; //@line 13376
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[16781 + $80 >> 0]; //@line 13377
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 13380
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 13389
      } else {
       HEAP8[$86 >> 0] = 46; //@line 13392
       $$1524 = $$0523 + 2 | 0; //@line 13393
      }
     } else {
      $$1524 = $86; //@line 13396
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 13400
     }
    }
    $$pre693 = $$1524; //@line 13406
    if (!$3) {
     label = 24; //@line 13408
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 13416
      $$sink = $3 + 2 | 0; //@line 13416
     } else {
      label = 24; //@line 13418
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 13422
     $$pre$phi691Z2D = $101; //@line 13423
     $$sink = $101; //@line 13423
    }
    $104 = $11 - $76 | 0; //@line 13427
    $106 = $104 + $44 + $$sink | 0; //@line 13429
    _pad_676($0, 32, $2, $106, $4); //@line 13430
    _out_670($0, $$0521$, $44); //@line 13431
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 13433
    _out_670($0, $8, $$pre$phi691Z2D); //@line 13434
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 13436
    _out_670($0, $76, $104); //@line 13437
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 13439
    $$sink560 = $106; //@line 13440
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 13444
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 13448
    HEAP32[$7 >> 2] = $113; //@line 13449
    $$3 = $35 * 268435456.0; //@line 13450
    $$pr = $113; //@line 13450
   } else {
    $$3 = $35; //@line 13453
    $$pr = HEAP32[$7 >> 2] | 0; //@line 13453
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 13457
   $$0498 = $$561; //@line 13458
   $$4 = $$3; //@line 13458
   do {
    $116 = ~~$$4 >>> 0; //@line 13460
    HEAP32[$$0498 >> 2] = $116; //@line 13461
    $$0498 = $$0498 + 4 | 0; //@line 13462
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 13465
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 13475
    $$1499662 = $$0498; //@line 13475
    $124 = $$pr; //@line 13475
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 13478
     $$0488655 = $$1499662 + -4 | 0; //@line 13479
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 13482
     } else {
      $$0488657 = $$0488655; //@line 13484
      $$0497656 = 0; //@line 13484
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 13487
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 13489
       $131 = tempRet0; //@line 13490
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 13491
       HEAP32[$$0488657 >> 2] = $132; //@line 13493
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 13494
       $$0488657 = $$0488657 + -4 | 0; //@line 13496
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 13506
      } else {
       $138 = $$1482663 + -4 | 0; //@line 13508
       HEAP32[$138 >> 2] = $$0497656; //@line 13509
       $$2483$ph = $138; //@line 13510
      }
     }
     $$2500 = $$1499662; //@line 13513
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 13519
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 13523
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 13529
     HEAP32[$7 >> 2] = $144; //@line 13530
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 13533
      $$1499662 = $$2500; //@line 13533
      $124 = $144; //@line 13533
     } else {
      $$1482$lcssa = $$2483$ph; //@line 13535
      $$1499$lcssa = $$2500; //@line 13535
      $$pr566 = $144; //@line 13535
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 13540
    $$1499$lcssa = $$0498; //@line 13540
    $$pr566 = $$pr; //@line 13540
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 13546
    $150 = ($39 | 0) == 102; //@line 13547
    $$3484650 = $$1482$lcssa; //@line 13548
    $$3501649 = $$1499$lcssa; //@line 13548
    $152 = $$pr566; //@line 13548
    while (1) {
     $151 = 0 - $152 | 0; //@line 13550
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 13552
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 13556
      $161 = 1e9 >>> $154; //@line 13557
      $$0487644 = 0; //@line 13558
      $$1489643 = $$3484650; //@line 13558
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 13560
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 13564
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 13565
       $$1489643 = $$1489643 + 4 | 0; //@line 13566
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 13577
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 13580
       $$4502 = $$3501649; //@line 13580
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 13583
       $$$3484700 = $$$3484; //@line 13584
       $$4502 = $$3501649 + 4 | 0; //@line 13584
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 13591
      $$4502 = $$3501649; //@line 13591
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 13593
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 13600
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 13602
     HEAP32[$7 >> 2] = $152; //@line 13603
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 13608
      $$3501$lcssa = $$$4502; //@line 13608
      break;
     } else {
      $$3484650 = $$$3484700; //@line 13606
      $$3501649 = $$$4502; //@line 13606
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 13613
    $$3501$lcssa = $$1499$lcssa; //@line 13613
   }
   $185 = $$561; //@line 13616
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 13621
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 13622
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 13625
    } else {
     $$0514639 = $189; //@line 13627
     $$0530638 = 10; //@line 13627
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 13629
      $193 = $$0514639 + 1 | 0; //@line 13630
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 13633
       break;
      } else {
       $$0514639 = $193; //@line 13636
      }
     }
    }
   } else {
    $$1515 = 0; //@line 13641
   }
   $198 = ($39 | 0) == 103; //@line 13646
   $199 = ($$540 | 0) != 0; //@line 13647
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 13650
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 13659
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 13662
    $213 = ($209 | 0) % 9 | 0; //@line 13663
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 13666
     $$1531632 = 10; //@line 13666
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 13669
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 13672
       $$1531632 = $215; //@line 13672
      } else {
       $$1531$lcssa = $215; //@line 13674
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 13679
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 13681
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 13682
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 13685
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 13688
     $$4518 = $$1515; //@line 13688
     $$8 = $$3484$lcssa; //@line 13688
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 13693
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 13694
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 13699
     if (!$$0520) {
      $$1467 = $$$564; //@line 13702
      $$1469 = $$543; //@line 13702
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 13705
      $$1467 = $230 ? -$$$564 : $$$564; //@line 13710
      $$1469 = $230 ? -$$543 : $$543; //@line 13710
     }
     $233 = $217 - $218 | 0; //@line 13712
     HEAP32[$212 >> 2] = $233; //@line 13713
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 13717
      HEAP32[$212 >> 2] = $236; //@line 13718
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 13721
       $$sink547625 = $212; //@line 13721
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 13723
        HEAP32[$$sink547625 >> 2] = 0; //@line 13724
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 13727
         HEAP32[$240 >> 2] = 0; //@line 13728
         $$6 = $240; //@line 13729
        } else {
         $$6 = $$5486626; //@line 13731
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 13734
        HEAP32[$238 >> 2] = $242; //@line 13735
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 13738
         $$sink547625 = $238; //@line 13738
        } else {
         $$5486$lcssa = $$6; //@line 13740
         $$sink547$lcssa = $238; //@line 13740
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 13745
       $$sink547$lcssa = $212; //@line 13745
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 13750
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 13751
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 13754
       $$4518 = $247; //@line 13754
       $$8 = $$5486$lcssa; //@line 13754
      } else {
       $$2516621 = $247; //@line 13756
       $$2532620 = 10; //@line 13756
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 13758
        $251 = $$2516621 + 1 | 0; //@line 13759
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 13762
         $$4518 = $251; //@line 13762
         $$8 = $$5486$lcssa; //@line 13762
         break;
        } else {
         $$2516621 = $251; //@line 13765
        }
       }
      }
     } else {
      $$4492 = $212; //@line 13770
      $$4518 = $$1515; //@line 13770
      $$8 = $$3484$lcssa; //@line 13770
     }
    }
    $253 = $$4492 + 4 | 0; //@line 13773
    $$5519$ph = $$4518; //@line 13776
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 13776
    $$9$ph = $$8; //@line 13776
   } else {
    $$5519$ph = $$1515; //@line 13778
    $$7505$ph = $$3501$lcssa; //@line 13778
    $$9$ph = $$3484$lcssa; //@line 13778
   }
   $$7505 = $$7505$ph; //@line 13780
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 13784
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 13787
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 13791
    } else {
     $$lcssa675 = 1; //@line 13793
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 13797
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 13802
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 13810
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 13810
     } else {
      $$0479 = $5 + -2 | 0; //@line 13814
      $$2476 = $$540$ + -1 | 0; //@line 13814
     }
     $267 = $4 & 8; //@line 13816
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 13821
       if (!$270) {
        $$2529 = 9; //@line 13824
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 13829
         $$3533616 = 10; //@line 13829
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 13831
          $275 = $$1528617 + 1 | 0; //@line 13832
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 13838
           break;
          } else {
           $$1528617 = $275; //@line 13836
          }
         }
        } else {
         $$2529 = 0; //@line 13843
        }
       }
      } else {
       $$2529 = 9; //@line 13847
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 13855
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 13857
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 13859
       $$1480 = $$0479; //@line 13862
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 13862
       $$pre$phi698Z2D = 0; //@line 13862
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 13866
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 13868
       $$1480 = $$0479; //@line 13871
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 13871
       $$pre$phi698Z2D = 0; //@line 13871
       break;
      }
     } else {
      $$1480 = $$0479; //@line 13875
      $$3477 = $$2476; //@line 13875
      $$pre$phi698Z2D = $267; //@line 13875
     }
    } else {
     $$1480 = $5; //@line 13879
     $$3477 = $$540; //@line 13879
     $$pre$phi698Z2D = $4 & 8; //@line 13879
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 13882
   $294 = ($292 | 0) != 0 & 1; //@line 13884
   $296 = ($$1480 | 32 | 0) == 102; //@line 13886
   if ($296) {
    $$2513 = 0; //@line 13890
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 13890
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 13893
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 13896
    $304 = $11; //@line 13897
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 13902
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 13904
      HEAP8[$308 >> 0] = 48; //@line 13905
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 13910
      } else {
       $$1512$lcssa = $308; //@line 13912
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 13917
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 13924
    $318 = $$1512$lcssa + -2 | 0; //@line 13926
    HEAP8[$318 >> 0] = $$1480; //@line 13927
    $$2513 = $318; //@line 13930
    $$pn = $304 - $318 | 0; //@line 13930
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 13935
   _pad_676($0, 32, $2, $323, $4); //@line 13936
   _out_670($0, $$0521, $$0520); //@line 13937
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 13939
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 13942
    $326 = $8 + 9 | 0; //@line 13943
    $327 = $326; //@line 13944
    $328 = $8 + 8 | 0; //@line 13945
    $$5493600 = $$0496$$9; //@line 13946
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 13949
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 13954
       $$1465 = $328; //@line 13955
      } else {
       $$1465 = $330; //@line 13957
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 13964
       $$0464597 = $330; //@line 13965
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 13967
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 13970
        } else {
         $$1465 = $335; //@line 13972
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 13977
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 13982
     $$5493600 = $$5493600 + 4 | 0; //@line 13983
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 16797, 1); //@line 13993
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 13999
     $$6494592 = $$5493600; //@line 13999
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 14002
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 14007
       $$0463587 = $347; //@line 14008
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 14010
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 14013
        } else {
         $$0463$lcssa = $351; //@line 14015
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 14020
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 14024
      $$6494592 = $$6494592 + 4 | 0; //@line 14025
      $356 = $$4478593 + -9 | 0; //@line 14026
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 14033
       break;
      } else {
       $$4478593 = $356; //@line 14031
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 14038
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 14041
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 14044
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 14047
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 14048
     $365 = $363; //@line 14049
     $366 = 0 - $9 | 0; //@line 14050
     $367 = $8 + 8 | 0; //@line 14051
     $$5605 = $$3477; //@line 14052
     $$7495604 = $$9$ph; //@line 14052
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 14055
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 14058
       $$0 = $367; //@line 14059
      } else {
       $$0 = $369; //@line 14061
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 14066
        _out_670($0, $$0, 1); //@line 14067
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 14071
         break;
        }
        _out_670($0, 16797, 1); //@line 14074
        $$2 = $375; //@line 14075
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 14079
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 14084
        $$1601 = $$0; //@line 14085
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 14087
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 14090
         } else {
          $$2 = $373; //@line 14092
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 14099
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 14102
      $381 = $$5605 - $378 | 0; //@line 14103
      $$7495604 = $$7495604 + 4 | 0; //@line 14104
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 14111
       break;
      } else {
       $$5605 = $381; //@line 14109
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 14116
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 14119
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 14123
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 14126
   $$sink560 = $323; //@line 14127
  }
 } while (0);
 STACKTOP = sp; //@line 14132
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 14132
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_431($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $110 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $158 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $169 = 0, $170 = 0, $172 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $186 = 0, $190 = 0, $191 = 0, $193 = 0, $194 = 0, $195 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $37 = 0, $4 = 0, $45 = 0, $49 = 0, $55 = 0, $58 = 0, $6 = 0, $61 = 0, $63 = 0, $64 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 25674
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25676
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25678
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25680
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25682
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25684
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25686
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25688
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25690
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25692
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25694
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 25696
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 25698
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 25700
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 25702
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 25704
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 25706
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP8[$2 >> 0] = HEAP8[$2 >> 0] & -33; //@line 25713
 } else {
  $37 = $4 + 288 | 0; //@line 25715
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($37) | 0) + 4 >> 2] = 9; //@line 25718
  __ZN14LoRaMacCommand20clear_command_bufferEv($4 + 4 | 0); //@line 25720
  HEAP32[$28 >> 2] = HEAP32[$28 >> 2] & -2; //@line 25723
  HEAP8[$30 >> 0] = 0; //@line 25724
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($37) | 0) + 10 >> 0] = 0; //@line 25727
  $45 = HEAP8[$32 >> 0] | 0; //@line 25728
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($37) | 0) + 11 >> 0] = $45; //@line 25731
  $49 = HEAP8[$4 + 1097 >> 0] | 0; //@line 25733
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($37) | 0) + 8 >> 0] = $49; //@line 25736
  if (!(HEAP8[$4 + 370 >> 0] | 0)) {
   $55 = $4 + 956 | 0; //@line 25741
   HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + 1; //@line 25744
  }
 }
 $58 = HEAP32[$28 >> 2] | 0; //@line 25747
 $61 = $58 & -3; //@line 25750
 if (!($58 & 2)) {
  $63 = $58; //@line 25752
 } else {
  HEAP32[$28 >> 2] = $61; //@line 25754
  $63 = $61; //@line 25755
 }
 if ($63 | 0) {
  $148 = HEAP32[$24 >> 2] | 0; //@line 25759
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 25760
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($148, $26, 1e3); //@line 25761
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 477; //@line 25764
   $149 = $ReallocAsyncCtx8 + 4 | 0; //@line 25765
   HEAP32[$149 >> 2] = $4; //@line 25766
   $150 = $ReallocAsyncCtx8 + 8 | 0; //@line 25767
   HEAP32[$150 >> 2] = $6; //@line 25768
   $151 = $ReallocAsyncCtx8 + 12 | 0; //@line 25769
   HEAP32[$151 >> 2] = $2; //@line 25770
   $152 = $ReallocAsyncCtx8 + 16 | 0; //@line 25771
   HEAP32[$152 >> 2] = $8; //@line 25772
   $153 = $ReallocAsyncCtx8 + 20 | 0; //@line 25773
   HEAP32[$153 >> 2] = $10; //@line 25774
   $154 = $ReallocAsyncCtx8 + 24 | 0; //@line 25775
   HEAP32[$154 >> 2] = $12; //@line 25776
   $155 = $ReallocAsyncCtx8 + 28 | 0; //@line 25777
   HEAP32[$155 >> 2] = $14; //@line 25778
   sp = STACKTOP; //@line 25779
   return;
  }
  ___async_unwind = 0; //@line 25782
  HEAP32[$ReallocAsyncCtx8 >> 2] = 477; //@line 25783
  $149 = $ReallocAsyncCtx8 + 4 | 0; //@line 25784
  HEAP32[$149 >> 2] = $4; //@line 25785
  $150 = $ReallocAsyncCtx8 + 8 | 0; //@line 25786
  HEAP32[$150 >> 2] = $6; //@line 25787
  $151 = $ReallocAsyncCtx8 + 12 | 0; //@line 25788
  HEAP32[$151 >> 2] = $2; //@line 25789
  $152 = $ReallocAsyncCtx8 + 16 | 0; //@line 25790
  HEAP32[$152 >> 2] = $8; //@line 25791
  $153 = $ReallocAsyncCtx8 + 20 | 0; //@line 25792
  HEAP32[$153 >> 2] = $10; //@line 25793
  $154 = $ReallocAsyncCtx8 + 24 | 0; //@line 25794
  HEAP32[$154 >> 2] = $12; //@line 25795
  $155 = $ReallocAsyncCtx8 + 28 | 0; //@line 25796
  HEAP32[$155 >> 2] = $14; //@line 25797
  sp = STACKTOP; //@line 25798
  return;
 }
 $64 = HEAP8[$2 >> 0] | 0; //@line 25801
 if ($64 & 1) {
  HEAP8[$2 >> 0] = $64 & -2; //@line 25806
  $69 = HEAP32[$4 + 1324 >> 2] | 0; //@line 25808
  $71 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 25810
  $72 = $69 + 12 | 0; //@line 25811
  $73 = HEAP32[$72 >> 2] | 0; //@line 25812
  if (!$73) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 25815
   _mbed_assert_internal(15352, 15357, 1102); //@line 25816
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 472; //@line 25819
    $75 = $ReallocAsyncCtx18 + 4 | 0; //@line 25820
    HEAP32[$75 >> 2] = $2; //@line 25821
    $76 = $ReallocAsyncCtx18 + 8 | 0; //@line 25822
    HEAP32[$76 >> 2] = $4; //@line 25823
    $77 = $ReallocAsyncCtx18 + 12 | 0; //@line 25824
    HEAP32[$77 >> 2] = $6; //@line 25825
    $78 = $ReallocAsyncCtx18 + 16 | 0; //@line 25826
    HEAP32[$78 >> 2] = $8; //@line 25827
    $79 = $ReallocAsyncCtx18 + 20 | 0; //@line 25828
    HEAP32[$79 >> 2] = $10; //@line 25829
    $80 = $ReallocAsyncCtx18 + 24 | 0; //@line 25830
    HEAP32[$80 >> 2] = $12; //@line 25831
    $81 = $ReallocAsyncCtx18 + 28 | 0; //@line 25832
    HEAP32[$81 >> 2] = $14; //@line 25833
    $82 = $ReallocAsyncCtx18 + 32 | 0; //@line 25834
    HEAP32[$82 >> 2] = $72; //@line 25835
    $83 = $ReallocAsyncCtx18 + 36 | 0; //@line 25836
    HEAP32[$83 >> 2] = $69; //@line 25837
    $84 = $ReallocAsyncCtx18 + 40 | 0; //@line 25838
    HEAP32[$84 >> 2] = $71; //@line 25839
    $85 = $ReallocAsyncCtx18 + 44 | 0; //@line 25840
    HEAP32[$85 >> 2] = $16; //@line 25841
    $86 = $ReallocAsyncCtx18 + 48 | 0; //@line 25842
    HEAP32[$86 >> 2] = $18; //@line 25843
    $87 = $ReallocAsyncCtx18 + 52 | 0; //@line 25844
    HEAP32[$87 >> 2] = $20; //@line 25845
    $88 = $ReallocAsyncCtx18 + 56 | 0; //@line 25846
    HEAP32[$88 >> 2] = $22; //@line 25847
    sp = STACKTOP; //@line 25848
    return;
   }
   ___async_unwind = 0; //@line 25851
   HEAP32[$ReallocAsyncCtx18 >> 2] = 472; //@line 25852
   $75 = $ReallocAsyncCtx18 + 4 | 0; //@line 25853
   HEAP32[$75 >> 2] = $2; //@line 25854
   $76 = $ReallocAsyncCtx18 + 8 | 0; //@line 25855
   HEAP32[$76 >> 2] = $4; //@line 25856
   $77 = $ReallocAsyncCtx18 + 12 | 0; //@line 25857
   HEAP32[$77 >> 2] = $6; //@line 25858
   $78 = $ReallocAsyncCtx18 + 16 | 0; //@line 25859
   HEAP32[$78 >> 2] = $8; //@line 25860
   $79 = $ReallocAsyncCtx18 + 20 | 0; //@line 25861
   HEAP32[$79 >> 2] = $10; //@line 25862
   $80 = $ReallocAsyncCtx18 + 24 | 0; //@line 25863
   HEAP32[$80 >> 2] = $12; //@line 25864
   $81 = $ReallocAsyncCtx18 + 28 | 0; //@line 25865
   HEAP32[$81 >> 2] = $14; //@line 25866
   $82 = $ReallocAsyncCtx18 + 32 | 0; //@line 25867
   HEAP32[$82 >> 2] = $72; //@line 25868
   $83 = $ReallocAsyncCtx18 + 36 | 0; //@line 25869
   HEAP32[$83 >> 2] = $69; //@line 25870
   $84 = $ReallocAsyncCtx18 + 40 | 0; //@line 25871
   HEAP32[$84 >> 2] = $71; //@line 25872
   $85 = $ReallocAsyncCtx18 + 44 | 0; //@line 25873
   HEAP32[$85 >> 2] = $16; //@line 25874
   $86 = $ReallocAsyncCtx18 + 48 | 0; //@line 25875
   HEAP32[$86 >> 2] = $18; //@line 25876
   $87 = $ReallocAsyncCtx18 + 52 | 0; //@line 25877
   HEAP32[$87 >> 2] = $20; //@line 25878
   $88 = $ReallocAsyncCtx18 + 56 | 0; //@line 25879
   HEAP32[$88 >> 2] = $22; //@line 25880
   sp = STACKTOP; //@line 25881
   return;
  } else {
   $89 = HEAP32[$73 >> 2] | 0; //@line 25884
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 25885
   FUNCTION_TABLE_vii[$89 & 31]($69, $71); //@line 25886
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 473; //@line 25889
    $90 = $ReallocAsyncCtx2 + 4 | 0; //@line 25890
    HEAP32[$90 >> 2] = $2; //@line 25891
    $91 = $ReallocAsyncCtx2 + 8 | 0; //@line 25892
    HEAP32[$91 >> 2] = $4; //@line 25893
    $92 = $ReallocAsyncCtx2 + 12 | 0; //@line 25894
    HEAP32[$92 >> 2] = $6; //@line 25895
    $93 = $ReallocAsyncCtx2 + 16 | 0; //@line 25896
    HEAP32[$93 >> 2] = $16; //@line 25897
    $94 = $ReallocAsyncCtx2 + 20 | 0; //@line 25898
    HEAP32[$94 >> 2] = $18; //@line 25899
    $95 = $ReallocAsyncCtx2 + 24 | 0; //@line 25900
    HEAP32[$95 >> 2] = $20; //@line 25901
    $96 = $ReallocAsyncCtx2 + 28 | 0; //@line 25902
    HEAP32[$96 >> 2] = $22; //@line 25903
    $97 = $ReallocAsyncCtx2 + 32 | 0; //@line 25904
    HEAP32[$97 >> 2] = $8; //@line 25905
    $98 = $ReallocAsyncCtx2 + 36 | 0; //@line 25906
    HEAP32[$98 >> 2] = $10; //@line 25907
    $99 = $ReallocAsyncCtx2 + 40 | 0; //@line 25908
    HEAP32[$99 >> 2] = $12; //@line 25909
    $100 = $ReallocAsyncCtx2 + 44 | 0; //@line 25910
    HEAP32[$100 >> 2] = $14; //@line 25911
    sp = STACKTOP; //@line 25912
    return;
   }
   ___async_unwind = 0; //@line 25915
   HEAP32[$ReallocAsyncCtx2 >> 2] = 473; //@line 25916
   $90 = $ReallocAsyncCtx2 + 4 | 0; //@line 25917
   HEAP32[$90 >> 2] = $2; //@line 25918
   $91 = $ReallocAsyncCtx2 + 8 | 0; //@line 25919
   HEAP32[$91 >> 2] = $4; //@line 25920
   $92 = $ReallocAsyncCtx2 + 12 | 0; //@line 25921
   HEAP32[$92 >> 2] = $6; //@line 25922
   $93 = $ReallocAsyncCtx2 + 16 | 0; //@line 25923
   HEAP32[$93 >> 2] = $16; //@line 25924
   $94 = $ReallocAsyncCtx2 + 20 | 0; //@line 25925
   HEAP32[$94 >> 2] = $18; //@line 25926
   $95 = $ReallocAsyncCtx2 + 24 | 0; //@line 25927
   HEAP32[$95 >> 2] = $20; //@line 25928
   $96 = $ReallocAsyncCtx2 + 28 | 0; //@line 25929
   HEAP32[$96 >> 2] = $22; //@line 25930
   $97 = $ReallocAsyncCtx2 + 32 | 0; //@line 25931
   HEAP32[$97 >> 2] = $8; //@line 25932
   $98 = $ReallocAsyncCtx2 + 36 | 0; //@line 25933
   HEAP32[$98 >> 2] = $10; //@line 25934
   $99 = $ReallocAsyncCtx2 + 40 | 0; //@line 25935
   HEAP32[$99 >> 2] = $12; //@line 25936
   $100 = $ReallocAsyncCtx2 + 44 | 0; //@line 25937
   HEAP32[$100 >> 2] = $14; //@line 25938
   sp = STACKTOP; //@line 25939
   return;
  }
 }
 if ($64 & 8) {
  HEAP8[$2 >> 0] = $64 & -9; //@line 25947
  $105 = HEAP32[$4 + 1324 >> 2] | 0; //@line 25949
  $106 = $105 + 32 | 0; //@line 25950
  $108 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 25952
  $109 = $105 + 44 | 0; //@line 25953
  $110 = HEAP32[$109 >> 2] | 0; //@line 25954
  if (!$110) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 25957
   _mbed_assert_internal(15352, 15357, 1102); //@line 25958
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 474; //@line 25961
    $112 = $ReallocAsyncCtx17 + 4 | 0; //@line 25962
    HEAP32[$112 >> 2] = $2; //@line 25963
    $113 = $ReallocAsyncCtx17 + 8 | 0; //@line 25964
    HEAP32[$113 >> 2] = $4; //@line 25965
    $114 = $ReallocAsyncCtx17 + 12 | 0; //@line 25966
    HEAP32[$114 >> 2] = $6; //@line 25967
    $115 = $ReallocAsyncCtx17 + 16 | 0; //@line 25968
    HEAP32[$115 >> 2] = $8; //@line 25969
    $116 = $ReallocAsyncCtx17 + 20 | 0; //@line 25970
    HEAP32[$116 >> 2] = $10; //@line 25971
    $117 = $ReallocAsyncCtx17 + 24 | 0; //@line 25972
    HEAP32[$117 >> 2] = $12; //@line 25973
    $118 = $ReallocAsyncCtx17 + 28 | 0; //@line 25974
    HEAP32[$118 >> 2] = $14; //@line 25975
    $119 = $ReallocAsyncCtx17 + 32 | 0; //@line 25976
    HEAP32[$119 >> 2] = $16; //@line 25977
    $120 = $ReallocAsyncCtx17 + 36 | 0; //@line 25978
    HEAP32[$120 >> 2] = $18; //@line 25979
    $121 = $ReallocAsyncCtx17 + 40 | 0; //@line 25980
    HEAP32[$121 >> 2] = $20; //@line 25981
    $122 = $ReallocAsyncCtx17 + 44 | 0; //@line 25982
    HEAP32[$122 >> 2] = $22; //@line 25983
    $123 = $ReallocAsyncCtx17 + 48 | 0; //@line 25984
    HEAP32[$123 >> 2] = $106; //@line 25985
    $124 = $ReallocAsyncCtx17 + 52 | 0; //@line 25986
    HEAP32[$124 >> 2] = $108; //@line 25987
    $125 = $ReallocAsyncCtx17 + 56 | 0; //@line 25988
    HEAP32[$125 >> 2] = $109; //@line 25989
    sp = STACKTOP; //@line 25990
    return;
   }
   ___async_unwind = 0; //@line 25993
   HEAP32[$ReallocAsyncCtx17 >> 2] = 474; //@line 25994
   $112 = $ReallocAsyncCtx17 + 4 | 0; //@line 25995
   HEAP32[$112 >> 2] = $2; //@line 25996
   $113 = $ReallocAsyncCtx17 + 8 | 0; //@line 25997
   HEAP32[$113 >> 2] = $4; //@line 25998
   $114 = $ReallocAsyncCtx17 + 12 | 0; //@line 25999
   HEAP32[$114 >> 2] = $6; //@line 26000
   $115 = $ReallocAsyncCtx17 + 16 | 0; //@line 26001
   HEAP32[$115 >> 2] = $8; //@line 26002
   $116 = $ReallocAsyncCtx17 + 20 | 0; //@line 26003
   HEAP32[$116 >> 2] = $10; //@line 26004
   $117 = $ReallocAsyncCtx17 + 24 | 0; //@line 26005
   HEAP32[$117 >> 2] = $12; //@line 26006
   $118 = $ReallocAsyncCtx17 + 28 | 0; //@line 26007
   HEAP32[$118 >> 2] = $14; //@line 26008
   $119 = $ReallocAsyncCtx17 + 32 | 0; //@line 26009
   HEAP32[$119 >> 2] = $16; //@line 26010
   $120 = $ReallocAsyncCtx17 + 36 | 0; //@line 26011
   HEAP32[$120 >> 2] = $18; //@line 26012
   $121 = $ReallocAsyncCtx17 + 40 | 0; //@line 26013
   HEAP32[$121 >> 2] = $20; //@line 26014
   $122 = $ReallocAsyncCtx17 + 44 | 0; //@line 26015
   HEAP32[$122 >> 2] = $22; //@line 26016
   $123 = $ReallocAsyncCtx17 + 48 | 0; //@line 26017
   HEAP32[$123 >> 2] = $106; //@line 26018
   $124 = $ReallocAsyncCtx17 + 52 | 0; //@line 26019
   HEAP32[$124 >> 2] = $108; //@line 26020
   $125 = $ReallocAsyncCtx17 + 56 | 0; //@line 26021
   HEAP32[$125 >> 2] = $109; //@line 26022
   sp = STACKTOP; //@line 26023
   return;
  } else {
   $126 = HEAP32[$110 >> 2] | 0; //@line 26026
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 26027
   FUNCTION_TABLE_vii[$126 & 31]($106, $108); //@line 26028
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 26031
    $127 = $ReallocAsyncCtx3 + 4 | 0; //@line 26032
    HEAP32[$127 >> 2] = $4; //@line 26033
    $128 = $ReallocAsyncCtx3 + 8 | 0; //@line 26034
    HEAP32[$128 >> 2] = $6; //@line 26035
    $129 = $ReallocAsyncCtx3 + 12 | 0; //@line 26036
    HEAP32[$129 >> 2] = $2; //@line 26037
    $130 = $ReallocAsyncCtx3 + 16 | 0; //@line 26038
    HEAP32[$130 >> 2] = $16; //@line 26039
    $131 = $ReallocAsyncCtx3 + 20 | 0; //@line 26040
    HEAP32[$131 >> 2] = $18; //@line 26041
    $132 = $ReallocAsyncCtx3 + 24 | 0; //@line 26042
    HEAP32[$132 >> 2] = $20; //@line 26043
    $133 = $ReallocAsyncCtx3 + 28 | 0; //@line 26044
    HEAP32[$133 >> 2] = $22; //@line 26045
    $134 = $ReallocAsyncCtx3 + 32 | 0; //@line 26046
    HEAP32[$134 >> 2] = $8; //@line 26047
    $135 = $ReallocAsyncCtx3 + 36 | 0; //@line 26048
    HEAP32[$135 >> 2] = $10; //@line 26049
    $136 = $ReallocAsyncCtx3 + 40 | 0; //@line 26050
    HEAP32[$136 >> 2] = $12; //@line 26051
    $137 = $ReallocAsyncCtx3 + 44 | 0; //@line 26052
    HEAP32[$137 >> 2] = $14; //@line 26053
    sp = STACKTOP; //@line 26054
    return;
   }
   ___async_unwind = 0; //@line 26057
   HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 26058
   $127 = $ReallocAsyncCtx3 + 4 | 0; //@line 26059
   HEAP32[$127 >> 2] = $4; //@line 26060
   $128 = $ReallocAsyncCtx3 + 8 | 0; //@line 26061
   HEAP32[$128 >> 2] = $6; //@line 26062
   $129 = $ReallocAsyncCtx3 + 12 | 0; //@line 26063
   HEAP32[$129 >> 2] = $2; //@line 26064
   $130 = $ReallocAsyncCtx3 + 16 | 0; //@line 26065
   HEAP32[$130 >> 2] = $16; //@line 26066
   $131 = $ReallocAsyncCtx3 + 20 | 0; //@line 26067
   HEAP32[$131 >> 2] = $18; //@line 26068
   $132 = $ReallocAsyncCtx3 + 24 | 0; //@line 26069
   HEAP32[$132 >> 2] = $20; //@line 26070
   $133 = $ReallocAsyncCtx3 + 28 | 0; //@line 26071
   HEAP32[$133 >> 2] = $22; //@line 26072
   $134 = $ReallocAsyncCtx3 + 32 | 0; //@line 26073
   HEAP32[$134 >> 2] = $8; //@line 26074
   $135 = $ReallocAsyncCtx3 + 36 | 0; //@line 26075
   HEAP32[$135 >> 2] = $10; //@line 26076
   $136 = $ReallocAsyncCtx3 + 40 | 0; //@line 26077
   HEAP32[$136 >> 2] = $12; //@line 26078
   $137 = $ReallocAsyncCtx3 + 44 | 0; //@line 26079
   HEAP32[$137 >> 2] = $14; //@line 26080
   sp = STACKTOP; //@line 26081
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(13258, $16) | 0; //@line 26088
  _printf(13405, $20) | 0; //@line 26089
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 26090
  _putchar(10) | 0; //@line 26091
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 476; //@line 26094
   $140 = $ReallocAsyncCtx7 + 4 | 0; //@line 26095
   HEAP32[$140 >> 2] = $4; //@line 26096
   $141 = $ReallocAsyncCtx7 + 8 | 0; //@line 26097
   HEAP32[$141 >> 2] = $6; //@line 26098
   $142 = $ReallocAsyncCtx7 + 12 | 0; //@line 26099
   HEAP32[$142 >> 2] = $2; //@line 26100
   $143 = $ReallocAsyncCtx7 + 16 | 0; //@line 26101
   HEAP32[$143 >> 2] = $8; //@line 26102
   $144 = $ReallocAsyncCtx7 + 20 | 0; //@line 26103
   HEAP32[$144 >> 2] = $10; //@line 26104
   $145 = $ReallocAsyncCtx7 + 24 | 0; //@line 26105
   HEAP32[$145 >> 2] = $12; //@line 26106
   $146 = $ReallocAsyncCtx7 + 28 | 0; //@line 26107
   HEAP32[$146 >> 2] = $14; //@line 26108
   sp = STACKTOP; //@line 26109
   return;
  }
  ___async_unwind = 0; //@line 26112
  HEAP32[$ReallocAsyncCtx7 >> 2] = 476; //@line 26113
  $140 = $ReallocAsyncCtx7 + 4 | 0; //@line 26114
  HEAP32[$140 >> 2] = $4; //@line 26115
  $141 = $ReallocAsyncCtx7 + 8 | 0; //@line 26116
  HEAP32[$141 >> 2] = $6; //@line 26117
  $142 = $ReallocAsyncCtx7 + 12 | 0; //@line 26118
  HEAP32[$142 >> 2] = $2; //@line 26119
  $143 = $ReallocAsyncCtx7 + 16 | 0; //@line 26120
  HEAP32[$143 >> 2] = $8; //@line 26121
  $144 = $ReallocAsyncCtx7 + 20 | 0; //@line 26122
  HEAP32[$144 >> 2] = $10; //@line 26123
  $145 = $ReallocAsyncCtx7 + 24 | 0; //@line 26124
  HEAP32[$145 >> 2] = $12; //@line 26125
  $146 = $ReallocAsyncCtx7 + 28 | 0; //@line 26126
  HEAP32[$146 >> 2] = $14; //@line 26127
  sp = STACKTOP; //@line 26128
  return;
 }
 $147 = HEAP8[$2 >> 0] & -33; //@line 26132
 HEAP8[$2 >> 0] = $147; //@line 26133
 do {
  if (!($147 & 2)) {
   $186 = $147; //@line 26138
  } else {
   $158 = $147 & -3; //@line 26140
   HEAP8[$2 >> 0] = $158; //@line 26141
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(13258, $8) | 0; //@line 26146
    _printf(13285, $12) | 0; //@line 26147
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 26148
    _putchar(10) | 0; //@line 26149
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 26152
     $162 = $ReallocAsyncCtx6 + 4 | 0; //@line 26153
     HEAP32[$162 >> 2] = $4; //@line 26154
     $163 = $ReallocAsyncCtx6 + 8 | 0; //@line 26155
     HEAP32[$163 >> 2] = $6; //@line 26156
     $164 = $ReallocAsyncCtx6 + 12 | 0; //@line 26157
     HEAP32[$164 >> 2] = $6; //@line 26158
     $165 = $ReallocAsyncCtx6 + 16 | 0; //@line 26159
     HEAP32[$165 >> 2] = $2; //@line 26160
     sp = STACKTOP; //@line 26161
     return;
    }
    ___async_unwind = 0; //@line 26164
    HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 26165
    $162 = $ReallocAsyncCtx6 + 4 | 0; //@line 26166
    HEAP32[$162 >> 2] = $4; //@line 26167
    $163 = $ReallocAsyncCtx6 + 8 | 0; //@line 26168
    HEAP32[$163 >> 2] = $6; //@line 26169
    $164 = $ReallocAsyncCtx6 + 12 | 0; //@line 26170
    HEAP32[$164 >> 2] = $6; //@line 26171
    $165 = $ReallocAsyncCtx6 + 16 | 0; //@line 26172
    HEAP32[$165 >> 2] = $2; //@line 26173
    sp = STACKTOP; //@line 26174
    return;
   }
   if ($158 & 4) {
    $184 = $158 & -5; //@line 26180
    HEAP8[$2 >> 0] = $184; //@line 26181
    $186 = $184; //@line 26182
    break;
   }
   $169 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26186
   $170 = $169 + 16 | 0; //@line 26187
   $172 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 26189
   $173 = $169 + 28 | 0; //@line 26190
   $174 = HEAP32[$173 >> 2] | 0; //@line 26191
   if (!$174) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 26194
    _mbed_assert_internal(15352, 15357, 1102); //@line 26195
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 26198
     $176 = $ReallocAsyncCtx15 + 4 | 0; //@line 26199
     HEAP32[$176 >> 2] = $173; //@line 26200
     $177 = $ReallocAsyncCtx15 + 8 | 0; //@line 26201
     HEAP32[$177 >> 2] = $170; //@line 26202
     $178 = $ReallocAsyncCtx15 + 12 | 0; //@line 26203
     HEAP32[$178 >> 2] = $172; //@line 26204
     $179 = $ReallocAsyncCtx15 + 16 | 0; //@line 26205
     HEAP32[$179 >> 2] = $2; //@line 26206
     $180 = $ReallocAsyncCtx15 + 20 | 0; //@line 26207
     HEAP32[$180 >> 2] = $4; //@line 26208
     sp = STACKTOP; //@line 26209
     return;
    }
    ___async_unwind = 0; //@line 26212
    HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 26213
    $176 = $ReallocAsyncCtx15 + 4 | 0; //@line 26214
    HEAP32[$176 >> 2] = $173; //@line 26215
    $177 = $ReallocAsyncCtx15 + 8 | 0; //@line 26216
    HEAP32[$177 >> 2] = $170; //@line 26217
    $178 = $ReallocAsyncCtx15 + 12 | 0; //@line 26218
    HEAP32[$178 >> 2] = $172; //@line 26219
    $179 = $ReallocAsyncCtx15 + 16 | 0; //@line 26220
    HEAP32[$179 >> 2] = $2; //@line 26221
    $180 = $ReallocAsyncCtx15 + 20 | 0; //@line 26222
    HEAP32[$180 >> 2] = $4; //@line 26223
    sp = STACKTOP; //@line 26224
    return;
   } else {
    $181 = HEAP32[$174 >> 2] | 0; //@line 26227
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 26228
    FUNCTION_TABLE_vii[$181 & 31]($170, $172); //@line 26229
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 26232
     $182 = $ReallocAsyncCtx4 + 4 | 0; //@line 26233
     HEAP32[$182 >> 2] = $2; //@line 26234
     $183 = $ReallocAsyncCtx4 + 8 | 0; //@line 26235
     HEAP32[$183 >> 2] = $4; //@line 26236
     sp = STACKTOP; //@line 26237
     return;
    }
    ___async_unwind = 0; //@line 26240
    HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 26241
    $182 = $ReallocAsyncCtx4 + 4 | 0; //@line 26242
    HEAP32[$182 >> 2] = $2; //@line 26243
    $183 = $ReallocAsyncCtx4 + 8 | 0; //@line 26244
    HEAP32[$183 >> 2] = $4; //@line 26245
    sp = STACKTOP; //@line 26246
    return;
   }
  }
 } while (0);
 if (!($186 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $186 & -17; //@line 26257
 $190 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26259
 $191 = $190 + 48 | 0; //@line 26260
 $193 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 26262
 $194 = $190 + 60 | 0; //@line 26263
 $195 = HEAP32[$194 >> 2] | 0; //@line 26264
 if (!$195) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 26267
  _mbed_assert_internal(15352, 15357, 1102); //@line 26268
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 26271
   $197 = $ReallocAsyncCtx14 + 4 | 0; //@line 26272
   HEAP32[$197 >> 2] = $194; //@line 26273
   $198 = $ReallocAsyncCtx14 + 8 | 0; //@line 26274
   HEAP32[$198 >> 2] = $191; //@line 26275
   $199 = $ReallocAsyncCtx14 + 12 | 0; //@line 26276
   HEAP32[$199 >> 2] = $193; //@line 26277
   sp = STACKTOP; //@line 26278
   return;
  }
  ___async_unwind = 0; //@line 26281
  HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 26282
  $197 = $ReallocAsyncCtx14 + 4 | 0; //@line 26283
  HEAP32[$197 >> 2] = $194; //@line 26284
  $198 = $ReallocAsyncCtx14 + 8 | 0; //@line 26285
  HEAP32[$198 >> 2] = $191; //@line 26286
  $199 = $ReallocAsyncCtx14 + 12 | 0; //@line 26287
  HEAP32[$199 >> 2] = $193; //@line 26288
  sp = STACKTOP; //@line 26289
  return;
 } else {
  $200 = HEAP32[$195 >> 2] | 0; //@line 26292
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 26293
  FUNCTION_TABLE_vii[$200 & 31]($191, $193); //@line 26294
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 26297
   sp = STACKTOP; //@line 26298
   return;
  }
  ___async_unwind = 0; //@line 26301
  HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 26302
  sp = STACKTOP; //@line 26303
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $148 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $159 = 0, $16 = 0, $160 = 0, $162 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $176 = 0, $18 = 0, $180 = 0, $181 = 0, $183 = 0, $184 = 0, $185 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $36 = 0, $39 = 0, $4 = 0, $45 = 0, $48 = 0, $51 = 0, $53 = 0, $54 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $95 = 0, $96 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 23876
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23878
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23880
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23882
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23884
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23886
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23888
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23890
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23892
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23894
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23896
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23898
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23900
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 23902
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 23904
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 23906
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 23908
 HEAP32[$28 >> 2] = HEAP32[$28 >> 2] & -2; //@line 23911
 __ZN14LoRaMacCommand20clear_command_bufferEv($4 + 4 | 0); //@line 23913
 HEAP8[$30 >> 0] = 0; //@line 23914
 $36 = $4 + 288 | 0; //@line 23915
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 10 >> 0] = 0; //@line 23918
 $39 = HEAP8[$32 >> 0] | 0; //@line 23919
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 11 >> 0] = $39; //@line 23922
 if (!(HEAP8[$4 + 370 >> 0] | 0)) {
  $45 = $4 + 956 | 0; //@line 23927
  HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + 1; //@line 23930
 }
 $48 = HEAP32[$28 >> 2] | 0; //@line 23932
 $51 = $48 & -3; //@line 23935
 if (!($48 & 2)) {
  $53 = $48; //@line 23937
 } else {
  HEAP32[$28 >> 2] = $51; //@line 23939
  $53 = $51; //@line 23940
 }
 if ($53 | 0) {
  $138 = HEAP32[$8 >> 2] | 0; //@line 23944
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 23945
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($138, $10, 1e3); //@line 23946
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 477; //@line 23949
   $139 = $ReallocAsyncCtx8 + 4 | 0; //@line 23950
   HEAP32[$139 >> 2] = $4; //@line 23951
   $140 = $ReallocAsyncCtx8 + 8 | 0; //@line 23952
   HEAP32[$140 >> 2] = $6; //@line 23953
   $141 = $ReallocAsyncCtx8 + 12 | 0; //@line 23954
   HEAP32[$141 >> 2] = $2; //@line 23955
   $142 = $ReallocAsyncCtx8 + 16 | 0; //@line 23956
   HEAP32[$142 >> 2] = $20; //@line 23957
   $143 = $ReallocAsyncCtx8 + 20 | 0; //@line 23958
   HEAP32[$143 >> 2] = $22; //@line 23959
   $144 = $ReallocAsyncCtx8 + 24 | 0; //@line 23960
   HEAP32[$144 >> 2] = $24; //@line 23961
   $145 = $ReallocAsyncCtx8 + 28 | 0; //@line 23962
   HEAP32[$145 >> 2] = $26; //@line 23963
   sp = STACKTOP; //@line 23964
   return;
  }
  ___async_unwind = 0; //@line 23967
  HEAP32[$ReallocAsyncCtx8 >> 2] = 477; //@line 23968
  $139 = $ReallocAsyncCtx8 + 4 | 0; //@line 23969
  HEAP32[$139 >> 2] = $4; //@line 23970
  $140 = $ReallocAsyncCtx8 + 8 | 0; //@line 23971
  HEAP32[$140 >> 2] = $6; //@line 23972
  $141 = $ReallocAsyncCtx8 + 12 | 0; //@line 23973
  HEAP32[$141 >> 2] = $2; //@line 23974
  $142 = $ReallocAsyncCtx8 + 16 | 0; //@line 23975
  HEAP32[$142 >> 2] = $20; //@line 23976
  $143 = $ReallocAsyncCtx8 + 20 | 0; //@line 23977
  HEAP32[$143 >> 2] = $22; //@line 23978
  $144 = $ReallocAsyncCtx8 + 24 | 0; //@line 23979
  HEAP32[$144 >> 2] = $24; //@line 23980
  $145 = $ReallocAsyncCtx8 + 28 | 0; //@line 23981
  HEAP32[$145 >> 2] = $26; //@line 23982
  sp = STACKTOP; //@line 23983
  return;
 }
 $54 = HEAP8[$2 >> 0] | 0; //@line 23986
 if ($54 & 1) {
  HEAP8[$2 >> 0] = $54 & -2; //@line 23991
  $59 = HEAP32[$4 + 1324 >> 2] | 0; //@line 23993
  $61 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 23995
  $62 = $59 + 12 | 0; //@line 23996
  $63 = HEAP32[$62 >> 2] | 0; //@line 23997
  if (!$63) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 24000
   _mbed_assert_internal(15352, 15357, 1102); //@line 24001
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 472; //@line 24004
    $65 = $ReallocAsyncCtx18 + 4 | 0; //@line 24005
    HEAP32[$65 >> 2] = $2; //@line 24006
    $66 = $ReallocAsyncCtx18 + 8 | 0; //@line 24007
    HEAP32[$66 >> 2] = $4; //@line 24008
    $67 = $ReallocAsyncCtx18 + 12 | 0; //@line 24009
    HEAP32[$67 >> 2] = $6; //@line 24010
    $68 = $ReallocAsyncCtx18 + 16 | 0; //@line 24011
    HEAP32[$68 >> 2] = $20; //@line 24012
    $69 = $ReallocAsyncCtx18 + 20 | 0; //@line 24013
    HEAP32[$69 >> 2] = $22; //@line 24014
    $70 = $ReallocAsyncCtx18 + 24 | 0; //@line 24015
    HEAP32[$70 >> 2] = $24; //@line 24016
    $71 = $ReallocAsyncCtx18 + 28 | 0; //@line 24017
    HEAP32[$71 >> 2] = $26; //@line 24018
    $72 = $ReallocAsyncCtx18 + 32 | 0; //@line 24019
    HEAP32[$72 >> 2] = $62; //@line 24020
    $73 = $ReallocAsyncCtx18 + 36 | 0; //@line 24021
    HEAP32[$73 >> 2] = $59; //@line 24022
    $74 = $ReallocAsyncCtx18 + 40 | 0; //@line 24023
    HEAP32[$74 >> 2] = $61; //@line 24024
    $75 = $ReallocAsyncCtx18 + 44 | 0; //@line 24025
    HEAP32[$75 >> 2] = $12; //@line 24026
    $76 = $ReallocAsyncCtx18 + 48 | 0; //@line 24027
    HEAP32[$76 >> 2] = $14; //@line 24028
    $77 = $ReallocAsyncCtx18 + 52 | 0; //@line 24029
    HEAP32[$77 >> 2] = $16; //@line 24030
    $78 = $ReallocAsyncCtx18 + 56 | 0; //@line 24031
    HEAP32[$78 >> 2] = $18; //@line 24032
    sp = STACKTOP; //@line 24033
    return;
   }
   ___async_unwind = 0; //@line 24036
   HEAP32[$ReallocAsyncCtx18 >> 2] = 472; //@line 24037
   $65 = $ReallocAsyncCtx18 + 4 | 0; //@line 24038
   HEAP32[$65 >> 2] = $2; //@line 24039
   $66 = $ReallocAsyncCtx18 + 8 | 0; //@line 24040
   HEAP32[$66 >> 2] = $4; //@line 24041
   $67 = $ReallocAsyncCtx18 + 12 | 0; //@line 24042
   HEAP32[$67 >> 2] = $6; //@line 24043
   $68 = $ReallocAsyncCtx18 + 16 | 0; //@line 24044
   HEAP32[$68 >> 2] = $20; //@line 24045
   $69 = $ReallocAsyncCtx18 + 20 | 0; //@line 24046
   HEAP32[$69 >> 2] = $22; //@line 24047
   $70 = $ReallocAsyncCtx18 + 24 | 0; //@line 24048
   HEAP32[$70 >> 2] = $24; //@line 24049
   $71 = $ReallocAsyncCtx18 + 28 | 0; //@line 24050
   HEAP32[$71 >> 2] = $26; //@line 24051
   $72 = $ReallocAsyncCtx18 + 32 | 0; //@line 24052
   HEAP32[$72 >> 2] = $62; //@line 24053
   $73 = $ReallocAsyncCtx18 + 36 | 0; //@line 24054
   HEAP32[$73 >> 2] = $59; //@line 24055
   $74 = $ReallocAsyncCtx18 + 40 | 0; //@line 24056
   HEAP32[$74 >> 2] = $61; //@line 24057
   $75 = $ReallocAsyncCtx18 + 44 | 0; //@line 24058
   HEAP32[$75 >> 2] = $12; //@line 24059
   $76 = $ReallocAsyncCtx18 + 48 | 0; //@line 24060
   HEAP32[$76 >> 2] = $14; //@line 24061
   $77 = $ReallocAsyncCtx18 + 52 | 0; //@line 24062
   HEAP32[$77 >> 2] = $16; //@line 24063
   $78 = $ReallocAsyncCtx18 + 56 | 0; //@line 24064
   HEAP32[$78 >> 2] = $18; //@line 24065
   sp = STACKTOP; //@line 24066
   return;
  } else {
   $79 = HEAP32[$63 >> 2] | 0; //@line 24069
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 24070
   FUNCTION_TABLE_vii[$79 & 31]($59, $61); //@line 24071
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 473; //@line 24074
    $80 = $ReallocAsyncCtx2 + 4 | 0; //@line 24075
    HEAP32[$80 >> 2] = $2; //@line 24076
    $81 = $ReallocAsyncCtx2 + 8 | 0; //@line 24077
    HEAP32[$81 >> 2] = $4; //@line 24078
    $82 = $ReallocAsyncCtx2 + 12 | 0; //@line 24079
    HEAP32[$82 >> 2] = $6; //@line 24080
    $83 = $ReallocAsyncCtx2 + 16 | 0; //@line 24081
    HEAP32[$83 >> 2] = $12; //@line 24082
    $84 = $ReallocAsyncCtx2 + 20 | 0; //@line 24083
    HEAP32[$84 >> 2] = $14; //@line 24084
    $85 = $ReallocAsyncCtx2 + 24 | 0; //@line 24085
    HEAP32[$85 >> 2] = $16; //@line 24086
    $86 = $ReallocAsyncCtx2 + 28 | 0; //@line 24087
    HEAP32[$86 >> 2] = $18; //@line 24088
    $87 = $ReallocAsyncCtx2 + 32 | 0; //@line 24089
    HEAP32[$87 >> 2] = $20; //@line 24090
    $88 = $ReallocAsyncCtx2 + 36 | 0; //@line 24091
    HEAP32[$88 >> 2] = $22; //@line 24092
    $89 = $ReallocAsyncCtx2 + 40 | 0; //@line 24093
    HEAP32[$89 >> 2] = $24; //@line 24094
    $90 = $ReallocAsyncCtx2 + 44 | 0; //@line 24095
    HEAP32[$90 >> 2] = $26; //@line 24096
    sp = STACKTOP; //@line 24097
    return;
   }
   ___async_unwind = 0; //@line 24100
   HEAP32[$ReallocAsyncCtx2 >> 2] = 473; //@line 24101
   $80 = $ReallocAsyncCtx2 + 4 | 0; //@line 24102
   HEAP32[$80 >> 2] = $2; //@line 24103
   $81 = $ReallocAsyncCtx2 + 8 | 0; //@line 24104
   HEAP32[$81 >> 2] = $4; //@line 24105
   $82 = $ReallocAsyncCtx2 + 12 | 0; //@line 24106
   HEAP32[$82 >> 2] = $6; //@line 24107
   $83 = $ReallocAsyncCtx2 + 16 | 0; //@line 24108
   HEAP32[$83 >> 2] = $12; //@line 24109
   $84 = $ReallocAsyncCtx2 + 20 | 0; //@line 24110
   HEAP32[$84 >> 2] = $14; //@line 24111
   $85 = $ReallocAsyncCtx2 + 24 | 0; //@line 24112
   HEAP32[$85 >> 2] = $16; //@line 24113
   $86 = $ReallocAsyncCtx2 + 28 | 0; //@line 24114
   HEAP32[$86 >> 2] = $18; //@line 24115
   $87 = $ReallocAsyncCtx2 + 32 | 0; //@line 24116
   HEAP32[$87 >> 2] = $20; //@line 24117
   $88 = $ReallocAsyncCtx2 + 36 | 0; //@line 24118
   HEAP32[$88 >> 2] = $22; //@line 24119
   $89 = $ReallocAsyncCtx2 + 40 | 0; //@line 24120
   HEAP32[$89 >> 2] = $24; //@line 24121
   $90 = $ReallocAsyncCtx2 + 44 | 0; //@line 24122
   HEAP32[$90 >> 2] = $26; //@line 24123
   sp = STACKTOP; //@line 24124
   return;
  }
 }
 if ($54 & 8) {
  HEAP8[$2 >> 0] = $54 & -9; //@line 24132
  $95 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24134
  $96 = $95 + 32 | 0; //@line 24135
  $98 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 24137
  $99 = $95 + 44 | 0; //@line 24138
  $100 = HEAP32[$99 >> 2] | 0; //@line 24139
  if (!$100) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 24142
   _mbed_assert_internal(15352, 15357, 1102); //@line 24143
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 474; //@line 24146
    $102 = $ReallocAsyncCtx17 + 4 | 0; //@line 24147
    HEAP32[$102 >> 2] = $2; //@line 24148
    $103 = $ReallocAsyncCtx17 + 8 | 0; //@line 24149
    HEAP32[$103 >> 2] = $4; //@line 24150
    $104 = $ReallocAsyncCtx17 + 12 | 0; //@line 24151
    HEAP32[$104 >> 2] = $6; //@line 24152
    $105 = $ReallocAsyncCtx17 + 16 | 0; //@line 24153
    HEAP32[$105 >> 2] = $20; //@line 24154
    $106 = $ReallocAsyncCtx17 + 20 | 0; //@line 24155
    HEAP32[$106 >> 2] = $22; //@line 24156
    $107 = $ReallocAsyncCtx17 + 24 | 0; //@line 24157
    HEAP32[$107 >> 2] = $24; //@line 24158
    $108 = $ReallocAsyncCtx17 + 28 | 0; //@line 24159
    HEAP32[$108 >> 2] = $26; //@line 24160
    $109 = $ReallocAsyncCtx17 + 32 | 0; //@line 24161
    HEAP32[$109 >> 2] = $12; //@line 24162
    $110 = $ReallocAsyncCtx17 + 36 | 0; //@line 24163
    HEAP32[$110 >> 2] = $14; //@line 24164
    $111 = $ReallocAsyncCtx17 + 40 | 0; //@line 24165
    HEAP32[$111 >> 2] = $16; //@line 24166
    $112 = $ReallocAsyncCtx17 + 44 | 0; //@line 24167
    HEAP32[$112 >> 2] = $18; //@line 24168
    $113 = $ReallocAsyncCtx17 + 48 | 0; //@line 24169
    HEAP32[$113 >> 2] = $96; //@line 24170
    $114 = $ReallocAsyncCtx17 + 52 | 0; //@line 24171
    HEAP32[$114 >> 2] = $98; //@line 24172
    $115 = $ReallocAsyncCtx17 + 56 | 0; //@line 24173
    HEAP32[$115 >> 2] = $99; //@line 24174
    sp = STACKTOP; //@line 24175
    return;
   }
   ___async_unwind = 0; //@line 24178
   HEAP32[$ReallocAsyncCtx17 >> 2] = 474; //@line 24179
   $102 = $ReallocAsyncCtx17 + 4 | 0; //@line 24180
   HEAP32[$102 >> 2] = $2; //@line 24181
   $103 = $ReallocAsyncCtx17 + 8 | 0; //@line 24182
   HEAP32[$103 >> 2] = $4; //@line 24183
   $104 = $ReallocAsyncCtx17 + 12 | 0; //@line 24184
   HEAP32[$104 >> 2] = $6; //@line 24185
   $105 = $ReallocAsyncCtx17 + 16 | 0; //@line 24186
   HEAP32[$105 >> 2] = $20; //@line 24187
   $106 = $ReallocAsyncCtx17 + 20 | 0; //@line 24188
   HEAP32[$106 >> 2] = $22; //@line 24189
   $107 = $ReallocAsyncCtx17 + 24 | 0; //@line 24190
   HEAP32[$107 >> 2] = $24; //@line 24191
   $108 = $ReallocAsyncCtx17 + 28 | 0; //@line 24192
   HEAP32[$108 >> 2] = $26; //@line 24193
   $109 = $ReallocAsyncCtx17 + 32 | 0; //@line 24194
   HEAP32[$109 >> 2] = $12; //@line 24195
   $110 = $ReallocAsyncCtx17 + 36 | 0; //@line 24196
   HEAP32[$110 >> 2] = $14; //@line 24197
   $111 = $ReallocAsyncCtx17 + 40 | 0; //@line 24198
   HEAP32[$111 >> 2] = $16; //@line 24199
   $112 = $ReallocAsyncCtx17 + 44 | 0; //@line 24200
   HEAP32[$112 >> 2] = $18; //@line 24201
   $113 = $ReallocAsyncCtx17 + 48 | 0; //@line 24202
   HEAP32[$113 >> 2] = $96; //@line 24203
   $114 = $ReallocAsyncCtx17 + 52 | 0; //@line 24204
   HEAP32[$114 >> 2] = $98; //@line 24205
   $115 = $ReallocAsyncCtx17 + 56 | 0; //@line 24206
   HEAP32[$115 >> 2] = $99; //@line 24207
   sp = STACKTOP; //@line 24208
   return;
  } else {
   $116 = HEAP32[$100 >> 2] | 0; //@line 24211
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 24212
   FUNCTION_TABLE_vii[$116 & 31]($96, $98); //@line 24213
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 24216
    $117 = $ReallocAsyncCtx3 + 4 | 0; //@line 24217
    HEAP32[$117 >> 2] = $4; //@line 24218
    $118 = $ReallocAsyncCtx3 + 8 | 0; //@line 24219
    HEAP32[$118 >> 2] = $6; //@line 24220
    $119 = $ReallocAsyncCtx3 + 12 | 0; //@line 24221
    HEAP32[$119 >> 2] = $2; //@line 24222
    $120 = $ReallocAsyncCtx3 + 16 | 0; //@line 24223
    HEAP32[$120 >> 2] = $12; //@line 24224
    $121 = $ReallocAsyncCtx3 + 20 | 0; //@line 24225
    HEAP32[$121 >> 2] = $14; //@line 24226
    $122 = $ReallocAsyncCtx3 + 24 | 0; //@line 24227
    HEAP32[$122 >> 2] = $16; //@line 24228
    $123 = $ReallocAsyncCtx3 + 28 | 0; //@line 24229
    HEAP32[$123 >> 2] = $18; //@line 24230
    $124 = $ReallocAsyncCtx3 + 32 | 0; //@line 24231
    HEAP32[$124 >> 2] = $20; //@line 24232
    $125 = $ReallocAsyncCtx3 + 36 | 0; //@line 24233
    HEAP32[$125 >> 2] = $22; //@line 24234
    $126 = $ReallocAsyncCtx3 + 40 | 0; //@line 24235
    HEAP32[$126 >> 2] = $24; //@line 24236
    $127 = $ReallocAsyncCtx3 + 44 | 0; //@line 24237
    HEAP32[$127 >> 2] = $26; //@line 24238
    sp = STACKTOP; //@line 24239
    return;
   }
   ___async_unwind = 0; //@line 24242
   HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 24243
   $117 = $ReallocAsyncCtx3 + 4 | 0; //@line 24244
   HEAP32[$117 >> 2] = $4; //@line 24245
   $118 = $ReallocAsyncCtx3 + 8 | 0; //@line 24246
   HEAP32[$118 >> 2] = $6; //@line 24247
   $119 = $ReallocAsyncCtx3 + 12 | 0; //@line 24248
   HEAP32[$119 >> 2] = $2; //@line 24249
   $120 = $ReallocAsyncCtx3 + 16 | 0; //@line 24250
   HEAP32[$120 >> 2] = $12; //@line 24251
   $121 = $ReallocAsyncCtx3 + 20 | 0; //@line 24252
   HEAP32[$121 >> 2] = $14; //@line 24253
   $122 = $ReallocAsyncCtx3 + 24 | 0; //@line 24254
   HEAP32[$122 >> 2] = $16; //@line 24255
   $123 = $ReallocAsyncCtx3 + 28 | 0; //@line 24256
   HEAP32[$123 >> 2] = $18; //@line 24257
   $124 = $ReallocAsyncCtx3 + 32 | 0; //@line 24258
   HEAP32[$124 >> 2] = $20; //@line 24259
   $125 = $ReallocAsyncCtx3 + 36 | 0; //@line 24260
   HEAP32[$125 >> 2] = $22; //@line 24261
   $126 = $ReallocAsyncCtx3 + 40 | 0; //@line 24262
   HEAP32[$126 >> 2] = $24; //@line 24263
   $127 = $ReallocAsyncCtx3 + 44 | 0; //@line 24264
   HEAP32[$127 >> 2] = $26; //@line 24265
   sp = STACKTOP; //@line 24266
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(13258, $12) | 0; //@line 24273
  _printf(13405, $16) | 0; //@line 24274
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 24275
  _putchar(10) | 0; //@line 24276
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 476; //@line 24279
   $130 = $ReallocAsyncCtx7 + 4 | 0; //@line 24280
   HEAP32[$130 >> 2] = $4; //@line 24281
   $131 = $ReallocAsyncCtx7 + 8 | 0; //@line 24282
   HEAP32[$131 >> 2] = $6; //@line 24283
   $132 = $ReallocAsyncCtx7 + 12 | 0; //@line 24284
   HEAP32[$132 >> 2] = $2; //@line 24285
   $133 = $ReallocAsyncCtx7 + 16 | 0; //@line 24286
   HEAP32[$133 >> 2] = $20; //@line 24287
   $134 = $ReallocAsyncCtx7 + 20 | 0; //@line 24288
   HEAP32[$134 >> 2] = $22; //@line 24289
   $135 = $ReallocAsyncCtx7 + 24 | 0; //@line 24290
   HEAP32[$135 >> 2] = $24; //@line 24291
   $136 = $ReallocAsyncCtx7 + 28 | 0; //@line 24292
   HEAP32[$136 >> 2] = $26; //@line 24293
   sp = STACKTOP; //@line 24294
   return;
  }
  ___async_unwind = 0; //@line 24297
  HEAP32[$ReallocAsyncCtx7 >> 2] = 476; //@line 24298
  $130 = $ReallocAsyncCtx7 + 4 | 0; //@line 24299
  HEAP32[$130 >> 2] = $4; //@line 24300
  $131 = $ReallocAsyncCtx7 + 8 | 0; //@line 24301
  HEAP32[$131 >> 2] = $6; //@line 24302
  $132 = $ReallocAsyncCtx7 + 12 | 0; //@line 24303
  HEAP32[$132 >> 2] = $2; //@line 24304
  $133 = $ReallocAsyncCtx7 + 16 | 0; //@line 24305
  HEAP32[$133 >> 2] = $20; //@line 24306
  $134 = $ReallocAsyncCtx7 + 20 | 0; //@line 24307
  HEAP32[$134 >> 2] = $22; //@line 24308
  $135 = $ReallocAsyncCtx7 + 24 | 0; //@line 24309
  HEAP32[$135 >> 2] = $24; //@line 24310
  $136 = $ReallocAsyncCtx7 + 28 | 0; //@line 24311
  HEAP32[$136 >> 2] = $26; //@line 24312
  sp = STACKTOP; //@line 24313
  return;
 }
 $137 = HEAP8[$2 >> 0] & -33; //@line 24317
 HEAP8[$2 >> 0] = $137; //@line 24318
 do {
  if (!($137 & 2)) {
   $176 = $137; //@line 24323
  } else {
   $148 = $137 & -3; //@line 24325
   HEAP8[$2 >> 0] = $148; //@line 24326
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(13258, $20) | 0; //@line 24331
    _printf(13285, $24) | 0; //@line 24332
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 24333
    _putchar(10) | 0; //@line 24334
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 24337
     $152 = $ReallocAsyncCtx6 + 4 | 0; //@line 24338
     HEAP32[$152 >> 2] = $4; //@line 24339
     $153 = $ReallocAsyncCtx6 + 8 | 0; //@line 24340
     HEAP32[$153 >> 2] = $6; //@line 24341
     $154 = $ReallocAsyncCtx6 + 12 | 0; //@line 24342
     HEAP32[$154 >> 2] = $6; //@line 24343
     $155 = $ReallocAsyncCtx6 + 16 | 0; //@line 24344
     HEAP32[$155 >> 2] = $2; //@line 24345
     sp = STACKTOP; //@line 24346
     return;
    }
    ___async_unwind = 0; //@line 24349
    HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 24350
    $152 = $ReallocAsyncCtx6 + 4 | 0; //@line 24351
    HEAP32[$152 >> 2] = $4; //@line 24352
    $153 = $ReallocAsyncCtx6 + 8 | 0; //@line 24353
    HEAP32[$153 >> 2] = $6; //@line 24354
    $154 = $ReallocAsyncCtx6 + 12 | 0; //@line 24355
    HEAP32[$154 >> 2] = $6; //@line 24356
    $155 = $ReallocAsyncCtx6 + 16 | 0; //@line 24357
    HEAP32[$155 >> 2] = $2; //@line 24358
    sp = STACKTOP; //@line 24359
    return;
   }
   if ($148 & 4) {
    $174 = $148 & -5; //@line 24365
    HEAP8[$2 >> 0] = $174; //@line 24366
    $176 = $174; //@line 24367
    break;
   }
   $159 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24371
   $160 = $159 + 16 | 0; //@line 24372
   $162 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 24374
   $163 = $159 + 28 | 0; //@line 24375
   $164 = HEAP32[$163 >> 2] | 0; //@line 24376
   if (!$164) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 24379
    _mbed_assert_internal(15352, 15357, 1102); //@line 24380
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 24383
     $166 = $ReallocAsyncCtx15 + 4 | 0; //@line 24384
     HEAP32[$166 >> 2] = $163; //@line 24385
     $167 = $ReallocAsyncCtx15 + 8 | 0; //@line 24386
     HEAP32[$167 >> 2] = $160; //@line 24387
     $168 = $ReallocAsyncCtx15 + 12 | 0; //@line 24388
     HEAP32[$168 >> 2] = $162; //@line 24389
     $169 = $ReallocAsyncCtx15 + 16 | 0; //@line 24390
     HEAP32[$169 >> 2] = $2; //@line 24391
     $170 = $ReallocAsyncCtx15 + 20 | 0; //@line 24392
     HEAP32[$170 >> 2] = $4; //@line 24393
     sp = STACKTOP; //@line 24394
     return;
    }
    ___async_unwind = 0; //@line 24397
    HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 24398
    $166 = $ReallocAsyncCtx15 + 4 | 0; //@line 24399
    HEAP32[$166 >> 2] = $163; //@line 24400
    $167 = $ReallocAsyncCtx15 + 8 | 0; //@line 24401
    HEAP32[$167 >> 2] = $160; //@line 24402
    $168 = $ReallocAsyncCtx15 + 12 | 0; //@line 24403
    HEAP32[$168 >> 2] = $162; //@line 24404
    $169 = $ReallocAsyncCtx15 + 16 | 0; //@line 24405
    HEAP32[$169 >> 2] = $2; //@line 24406
    $170 = $ReallocAsyncCtx15 + 20 | 0; //@line 24407
    HEAP32[$170 >> 2] = $4; //@line 24408
    sp = STACKTOP; //@line 24409
    return;
   } else {
    $171 = HEAP32[$164 >> 2] | 0; //@line 24412
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 24413
    FUNCTION_TABLE_vii[$171 & 31]($160, $162); //@line 24414
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 24417
     $172 = $ReallocAsyncCtx4 + 4 | 0; //@line 24418
     HEAP32[$172 >> 2] = $2; //@line 24419
     $173 = $ReallocAsyncCtx4 + 8 | 0; //@line 24420
     HEAP32[$173 >> 2] = $4; //@line 24421
     sp = STACKTOP; //@line 24422
     return;
    }
    ___async_unwind = 0; //@line 24425
    HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 24426
    $172 = $ReallocAsyncCtx4 + 4 | 0; //@line 24427
    HEAP32[$172 >> 2] = $2; //@line 24428
    $173 = $ReallocAsyncCtx4 + 8 | 0; //@line 24429
    HEAP32[$173 >> 2] = $4; //@line 24430
    sp = STACKTOP; //@line 24431
    return;
   }
  }
 } while (0);
 if (!($176 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $176 & -17; //@line 24442
 $180 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24444
 $181 = $180 + 48 | 0; //@line 24445
 $183 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 24447
 $184 = $180 + 60 | 0; //@line 24448
 $185 = HEAP32[$184 >> 2] | 0; //@line 24449
 if (!$185) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 24452
  _mbed_assert_internal(15352, 15357, 1102); //@line 24453
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 24456
   $187 = $ReallocAsyncCtx14 + 4 | 0; //@line 24457
   HEAP32[$187 >> 2] = $184; //@line 24458
   $188 = $ReallocAsyncCtx14 + 8 | 0; //@line 24459
   HEAP32[$188 >> 2] = $181; //@line 24460
   $189 = $ReallocAsyncCtx14 + 12 | 0; //@line 24461
   HEAP32[$189 >> 2] = $183; //@line 24462
   sp = STACKTOP; //@line 24463
   return;
  }
  ___async_unwind = 0; //@line 24466
  HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 24467
  $187 = $ReallocAsyncCtx14 + 4 | 0; //@line 24468
  HEAP32[$187 >> 2] = $184; //@line 24469
  $188 = $ReallocAsyncCtx14 + 8 | 0; //@line 24470
  HEAP32[$188 >> 2] = $181; //@line 24471
  $189 = $ReallocAsyncCtx14 + 12 | 0; //@line 24472
  HEAP32[$189 >> 2] = $183; //@line 24473
  sp = STACKTOP; //@line 24474
  return;
 } else {
  $190 = HEAP32[$185 >> 2] | 0; //@line 24477
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 24478
  FUNCTION_TABLE_vii[$190 & 31]($181, $183); //@line 24479
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 24482
   sp = STACKTOP; //@line 24483
   return;
  }
  ___async_unwind = 0; //@line 24486
  HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 24487
  sp = STACKTOP; //@line 24488
  return;
 }
}
function _equeue_dispatch__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$065 = 0, $$06790$reg2mem$0 = 0, $$06790$reg2mem$0$phi = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val31 = 0, $$expand_i1_val33 = 0, $$expand_i1_val35 = 0, $$reg2mem$0 = 0, $$reg2mem24$0 = 0, $$sink$in$i$i = 0, $10 = 0, $102 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $14 = 0, $140 = 0, $141 = 0, $143 = 0, $146 = 0, $148 = 0, $151 = 0, $154 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $165 = 0, $168 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $36 = 0, $38 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18640
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18642
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18646
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18650
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18652
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18654
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18656
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18658
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18660
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18662
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18664
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18666
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 18668
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 18670
 $32 = HEAP8[$0 + 64 >> 0] & 1; //@line 18673
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 18677
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 18679
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 18681
 $$06790$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 18682
 $$reg2mem$0 = HEAP32[$0 + 16 >> 2] | 0; //@line 18682
 $$reg2mem24$0 = HEAP32[$0 + 68 >> 2] | 0; //@line 18682
 while (1) {
  $68 = HEAP32[$$06790$reg2mem$0 + 24 >> 2] | 0; //@line 18685
  if (($68 | 0) > -1) {
   label = 8; //@line 18688
   break;
  }
  $92 = $$06790$reg2mem$0 + 4 | 0; //@line 18692
  $93 = HEAP8[$92 >> 0] | 0; //@line 18693
  HEAP8[$92 >> 0] = (($93 + 1 & 255) << HEAP32[$2 >> 2] | 0) == 0 ? 1 : ($93 & 255) + 1 & 255; //@line 18702
  $102 = HEAP32[$$06790$reg2mem$0 + 28 >> 2] | 0; //@line 18704
  if ($102 | 0) {
   label = 12; //@line 18707
   break;
  }
  _equeue_mutex_lock($16); //@line 18710
  $125 = HEAP32[$14 >> 2] | 0; //@line 18711
  L6 : do {
   if (!$125) {
    $$02329$i$i = $14; //@line 18715
    label = 21; //@line 18716
   } else {
    $127 = HEAP32[$$06790$reg2mem$0 >> 2] | 0; //@line 18718
    $$025$i$i = $14; //@line 18719
    $129 = $125; //@line 18719
    while (1) {
     $128 = HEAP32[$129 >> 2] | 0; //@line 18721
     if ($128 >>> 0 >= $127 >>> 0) {
      break;
     }
     $131 = $129 + 8 | 0; //@line 18726
     $132 = HEAP32[$131 >> 2] | 0; //@line 18727
     if (!$132) {
      $$02329$i$i = $131; //@line 18730
      label = 21; //@line 18731
      break L6;
     } else {
      $$025$i$i = $131; //@line 18734
      $129 = $132; //@line 18734
     }
    }
    if (($128 | 0) == ($127 | 0)) {
     HEAP32[$$06790$reg2mem$0 + 12 >> 2] = $129; //@line 18740
     $$02330$i$i = $$025$i$i; //@line 18743
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 18743
    } else {
     $$02329$i$i = $$025$i$i; //@line 18745
     label = 21; //@line 18746
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 18751
   HEAP32[$$06790$reg2mem$0 + 12 >> 2] = 0; //@line 18753
   $$02330$i$i = $$02329$i$i; //@line 18754
   $$sink$in$i$i = $$02329$i$i; //@line 18754
  }
  HEAP32[$$reg2mem24$0 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 18757
  HEAP32[$$02330$i$i >> 2] = $$06790$reg2mem$0; //@line 18758
  _equeue_mutex_unlock($16); //@line 18759
  if (!$$reg2mem$0) {
   label = 24; //@line 18762
   break;
  }
  $41 = $$reg2mem$0 + 8 | 0; //@line 18765
  $42 = HEAP32[$41 >> 2] | 0; //@line 18766
  $44 = HEAP32[$$reg2mem$0 + 32 >> 2] | 0; //@line 18768
  if (!$44) {
   $$06790$reg2mem$0$phi = $$reg2mem$0; //@line 18771
   $$reg2mem$0 = $42; //@line 18771
   $$reg2mem24$0 = $41; //@line 18771
   $$06790$reg2mem$0 = $$06790$reg2mem$0$phi; //@line 18771
  } else {
   label = 3; //@line 18773
   break;
  }
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 18779
  FUNCTION_TABLE_vi[$44 & 1023]($$reg2mem$0 + 36 | 0); //@line 18780
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 185; //@line 18783
   $47 = $ReallocAsyncCtx + 4 | 0; //@line 18784
   HEAP32[$47 >> 2] = $2; //@line 18785
   $48 = $ReallocAsyncCtx + 8 | 0; //@line 18786
   HEAP32[$48 >> 2] = $$reg2mem$0; //@line 18787
   $49 = $ReallocAsyncCtx + 12 | 0; //@line 18788
   HEAP32[$49 >> 2] = $6; //@line 18789
   $50 = $ReallocAsyncCtx + 16 | 0; //@line 18790
   HEAP32[$50 >> 2] = $42; //@line 18791
   $51 = $ReallocAsyncCtx + 20 | 0; //@line 18792
   HEAP32[$51 >> 2] = $10; //@line 18793
   $52 = $ReallocAsyncCtx + 24 | 0; //@line 18794
   HEAP32[$52 >> 2] = $12; //@line 18795
   $53 = $ReallocAsyncCtx + 28 | 0; //@line 18796
   HEAP32[$53 >> 2] = $14; //@line 18797
   $54 = $ReallocAsyncCtx + 32 | 0; //@line 18798
   HEAP32[$54 >> 2] = $16; //@line 18799
   $55 = $ReallocAsyncCtx + 36 | 0; //@line 18800
   HEAP32[$55 >> 2] = $18; //@line 18801
   $56 = $ReallocAsyncCtx + 40 | 0; //@line 18802
   HEAP32[$56 >> 2] = $20; //@line 18803
   $57 = $ReallocAsyncCtx + 44 | 0; //@line 18804
   HEAP32[$57 >> 2] = $22; //@line 18805
   $58 = $ReallocAsyncCtx + 48 | 0; //@line 18806
   HEAP32[$58 >> 2] = $24; //@line 18807
   $59 = $ReallocAsyncCtx + 52 | 0; //@line 18808
   HEAP32[$59 >> 2] = $26; //@line 18809
   $60 = $ReallocAsyncCtx + 56 | 0; //@line 18810
   HEAP32[$60 >> 2] = $28; //@line 18811
   $61 = $ReallocAsyncCtx + 60 | 0; //@line 18812
   HEAP32[$61 >> 2] = $30; //@line 18813
   $62 = $ReallocAsyncCtx + 64 | 0; //@line 18814
   $$expand_i1_val = $32 & 1; //@line 18815
   HEAP8[$62 >> 0] = $$expand_i1_val; //@line 18816
   $63 = $ReallocAsyncCtx + 68 | 0; //@line 18817
   HEAP32[$63 >> 2] = $41; //@line 18818
   $64 = $ReallocAsyncCtx + 72 | 0; //@line 18819
   HEAP32[$64 >> 2] = $36; //@line 18820
   $65 = $ReallocAsyncCtx + 76 | 0; //@line 18821
   HEAP32[$65 >> 2] = $38; //@line 18822
   $66 = $ReallocAsyncCtx + 80 | 0; //@line 18823
   HEAP32[$66 >> 2] = $40; //@line 18824
   sp = STACKTOP; //@line 18825
   return;
  }
  ___async_unwind = 0; //@line 18828
  HEAP32[$ReallocAsyncCtx >> 2] = 185; //@line 18829
  $47 = $ReallocAsyncCtx + 4 | 0; //@line 18830
  HEAP32[$47 >> 2] = $2; //@line 18831
  $48 = $ReallocAsyncCtx + 8 | 0; //@line 18832
  HEAP32[$48 >> 2] = $$reg2mem$0; //@line 18833
  $49 = $ReallocAsyncCtx + 12 | 0; //@line 18834
  HEAP32[$49 >> 2] = $6; //@line 18835
  $50 = $ReallocAsyncCtx + 16 | 0; //@line 18836
  HEAP32[$50 >> 2] = $42; //@line 18837
  $51 = $ReallocAsyncCtx + 20 | 0; //@line 18838
  HEAP32[$51 >> 2] = $10; //@line 18839
  $52 = $ReallocAsyncCtx + 24 | 0; //@line 18840
  HEAP32[$52 >> 2] = $12; //@line 18841
  $53 = $ReallocAsyncCtx + 28 | 0; //@line 18842
  HEAP32[$53 >> 2] = $14; //@line 18843
  $54 = $ReallocAsyncCtx + 32 | 0; //@line 18844
  HEAP32[$54 >> 2] = $16; //@line 18845
  $55 = $ReallocAsyncCtx + 36 | 0; //@line 18846
  HEAP32[$55 >> 2] = $18; //@line 18847
  $56 = $ReallocAsyncCtx + 40 | 0; //@line 18848
  HEAP32[$56 >> 2] = $20; //@line 18849
  $57 = $ReallocAsyncCtx + 44 | 0; //@line 18850
  HEAP32[$57 >> 2] = $22; //@line 18851
  $58 = $ReallocAsyncCtx + 48 | 0; //@line 18852
  HEAP32[$58 >> 2] = $24; //@line 18853
  $59 = $ReallocAsyncCtx + 52 | 0; //@line 18854
  HEAP32[$59 >> 2] = $26; //@line 18855
  $60 = $ReallocAsyncCtx + 56 | 0; //@line 18856
  HEAP32[$60 >> 2] = $28; //@line 18857
  $61 = $ReallocAsyncCtx + 60 | 0; //@line 18858
  HEAP32[$61 >> 2] = $30; //@line 18859
  $62 = $ReallocAsyncCtx + 64 | 0; //@line 18860
  $$expand_i1_val = $32 & 1; //@line 18861
  HEAP8[$62 >> 0] = $$expand_i1_val; //@line 18862
  $63 = $ReallocAsyncCtx + 68 | 0; //@line 18863
  HEAP32[$63 >> 2] = $41; //@line 18864
  $64 = $ReallocAsyncCtx + 72 | 0; //@line 18865
  HEAP32[$64 >> 2] = $36; //@line 18866
  $65 = $ReallocAsyncCtx + 76 | 0; //@line 18867
  HEAP32[$65 >> 2] = $38; //@line 18868
  $66 = $ReallocAsyncCtx + 80 | 0; //@line 18869
  HEAP32[$66 >> 2] = $40; //@line 18870
  sp = STACKTOP; //@line 18871
  return;
 } else if ((label | 0) == 8) {
  $70 = $$06790$reg2mem$0 + 20 | 0; //@line 18875
  HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + $68; //@line 18878
  $73 = _equeue_tick() | 0; //@line 18879
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 18880
  _equeue_enqueue($6, $$06790$reg2mem$0, $73) | 0; //@line 18881
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 186; //@line 18884
   $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 18885
   HEAP32[$74 >> 2] = $2; //@line 18886
   $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 18887
   HEAP32[$75 >> 2] = $40; //@line 18888
   $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 18889
   HEAP32[$76 >> 2] = $26; //@line 18890
   $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 18891
   HEAP32[$77 >> 2] = $6; //@line 18892
   $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 18893
   HEAP32[$78 >> 2] = $$reg2mem$0; //@line 18894
   $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 18895
   HEAP32[$79 >> 2] = $10; //@line 18896
   $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 18897
   HEAP32[$80 >> 2] = $12; //@line 18898
   $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 18899
   HEAP32[$81 >> 2] = $14; //@line 18900
   $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 18901
   HEAP32[$82 >> 2] = $16; //@line 18902
   $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 18903
   HEAP32[$83 >> 2] = $18; //@line 18904
   $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 18905
   HEAP32[$84 >> 2] = $20; //@line 18906
   $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 18907
   HEAP32[$85 >> 2] = $22; //@line 18908
   $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 18909
   HEAP32[$86 >> 2] = $24; //@line 18910
   $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 18911
   HEAP32[$87 >> 2] = $28; //@line 18912
   $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 18913
   HEAP32[$88 >> 2] = $30; //@line 18914
   $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 18915
   $$expand_i1_val31 = $32 & 1; //@line 18916
   HEAP8[$89 >> 0] = $$expand_i1_val31; //@line 18917
   $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 18918
   HEAP32[$90 >> 2] = $36; //@line 18919
   $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 18920
   HEAP32[$91 >> 2] = $38; //@line 18921
   sp = STACKTOP; //@line 18922
   return;
  }
  ___async_unwind = 0; //@line 18925
  HEAP32[$ReallocAsyncCtx4 >> 2] = 186; //@line 18926
  $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 18927
  HEAP32[$74 >> 2] = $2; //@line 18928
  $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 18929
  HEAP32[$75 >> 2] = $40; //@line 18930
  $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 18931
  HEAP32[$76 >> 2] = $26; //@line 18932
  $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 18933
  HEAP32[$77 >> 2] = $6; //@line 18934
  $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 18935
  HEAP32[$78 >> 2] = $$reg2mem$0; //@line 18936
  $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 18937
  HEAP32[$79 >> 2] = $10; //@line 18938
  $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 18939
  HEAP32[$80 >> 2] = $12; //@line 18940
  $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 18941
  HEAP32[$81 >> 2] = $14; //@line 18942
  $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 18943
  HEAP32[$82 >> 2] = $16; //@line 18944
  $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 18945
  HEAP32[$83 >> 2] = $18; //@line 18946
  $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 18947
  HEAP32[$84 >> 2] = $20; //@line 18948
  $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 18949
  HEAP32[$85 >> 2] = $22; //@line 18950
  $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 18951
  HEAP32[$86 >> 2] = $24; //@line 18952
  $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 18953
  HEAP32[$87 >> 2] = $28; //@line 18954
  $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 18955
  HEAP32[$88 >> 2] = $30; //@line 18956
  $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 18957
  $$expand_i1_val31 = $32 & 1; //@line 18958
  HEAP8[$89 >> 0] = $$expand_i1_val31; //@line 18959
  $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 18960
  HEAP32[$90 >> 2] = $36; //@line 18961
  $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 18962
  HEAP32[$91 >> 2] = $38; //@line 18963
  sp = STACKTOP; //@line 18964
  return;
 } else if ((label | 0) == 12) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 18969
  FUNCTION_TABLE_vi[$102 & 1023]($$06790$reg2mem$0 + 36 | 0); //@line 18970
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 187; //@line 18973
   $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 18974
   HEAP32[$105 >> 2] = $2; //@line 18975
   $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 18976
   HEAP32[$106 >> 2] = $40; //@line 18977
   $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 18978
   HEAP32[$107 >> 2] = $26; //@line 18979
   $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 18980
   HEAP32[$108 >> 2] = $6; //@line 18981
   $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 18982
   HEAP32[$109 >> 2] = $$reg2mem$0; //@line 18983
   $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 18984
   HEAP32[$110 >> 2] = $10; //@line 18985
   $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 18986
   HEAP32[$111 >> 2] = $12; //@line 18987
   $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 18988
   HEAP32[$112 >> 2] = $14; //@line 18989
   $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 18990
   HEAP32[$113 >> 2] = $16; //@line 18991
   $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 18992
   HEAP32[$114 >> 2] = $18; //@line 18993
   $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 18994
   HEAP32[$115 >> 2] = $20; //@line 18995
   $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 18996
   HEAP32[$116 >> 2] = $22; //@line 18997
   $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 18998
   HEAP32[$117 >> 2] = $24; //@line 18999
   $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 19000
   HEAP32[$118 >> 2] = $28; //@line 19001
   $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 19002
   HEAP32[$119 >> 2] = $30; //@line 19003
   $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 19004
   $$expand_i1_val33 = $32 & 1; //@line 19005
   HEAP8[$120 >> 0] = $$expand_i1_val33; //@line 19006
   $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 19007
   HEAP32[$121 >> 2] = $36; //@line 19008
   $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 19009
   HEAP32[$122 >> 2] = $38; //@line 19010
   $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 19011
   HEAP32[$123 >> 2] = $$06790$reg2mem$0; //@line 19012
   $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 19013
   HEAP32[$124 >> 2] = $$reg2mem24$0; //@line 19014
   sp = STACKTOP; //@line 19015
   return;
  }
  ___async_unwind = 0; //@line 19018
  HEAP32[$ReallocAsyncCtx2 >> 2] = 187; //@line 19019
  $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 19020
  HEAP32[$105 >> 2] = $2; //@line 19021
  $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 19022
  HEAP32[$106 >> 2] = $40; //@line 19023
  $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 19024
  HEAP32[$107 >> 2] = $26; //@line 19025
  $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 19026
  HEAP32[$108 >> 2] = $6; //@line 19027
  $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 19028
  HEAP32[$109 >> 2] = $$reg2mem$0; //@line 19029
  $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 19030
  HEAP32[$110 >> 2] = $10; //@line 19031
  $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 19032
  HEAP32[$111 >> 2] = $12; //@line 19033
  $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 19034
  HEAP32[$112 >> 2] = $14; //@line 19035
  $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 19036
  HEAP32[$113 >> 2] = $16; //@line 19037
  $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 19038
  HEAP32[$114 >> 2] = $18; //@line 19039
  $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 19040
  HEAP32[$115 >> 2] = $20; //@line 19041
  $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 19042
  HEAP32[$116 >> 2] = $22; //@line 19043
  $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 19044
  HEAP32[$117 >> 2] = $24; //@line 19045
  $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 19046
  HEAP32[$118 >> 2] = $28; //@line 19047
  $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 19048
  HEAP32[$119 >> 2] = $30; //@line 19049
  $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 19050
  $$expand_i1_val33 = $32 & 1; //@line 19051
  HEAP8[$120 >> 0] = $$expand_i1_val33; //@line 19052
  $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 19053
  HEAP32[$121 >> 2] = $36; //@line 19054
  $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 19055
  HEAP32[$122 >> 2] = $38; //@line 19056
  $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 19057
  HEAP32[$123 >> 2] = $$06790$reg2mem$0; //@line 19058
  $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 19059
  HEAP32[$124 >> 2] = $$reg2mem24$0; //@line 19060
  sp = STACKTOP; //@line 19061
  return;
 } else if ((label | 0) == 24) {
  $140 = _equeue_tick() | 0; //@line 19065
  if ($32) {
   $141 = $30 - $140 | 0; //@line 19067
   if (($141 | 0) < 1) {
    $143 = $6 + 40 | 0; //@line 19070
    if (HEAP32[$143 >> 2] | 0) {
     _equeue_mutex_lock($26); //@line 19074
     $146 = HEAP32[$143 >> 2] | 0; //@line 19075
     if ($146 | 0) {
      $148 = HEAP32[$24 >> 2] | 0; //@line 19078
      if ($148 | 0) {
       $151 = HEAP32[$6 + 44 >> 2] | 0; //@line 19082
       $154 = (HEAP32[$148 + 20 >> 2] | 0) - $140 | 0; //@line 19085
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 19089
       FUNCTION_TABLE_vii[$146 & 31]($151, $154 & ~($154 >> 31)); //@line 19090
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 188; //@line 19093
        $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 19094
        HEAP32[$158 >> 2] = $40; //@line 19095
        $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 19096
        HEAP32[$159 >> 2] = $26; //@line 19097
        $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 19098
        HEAP32[$160 >> 2] = $36; //@line 19099
        sp = STACKTOP; //@line 19100
        return;
       }
       ___async_unwind = 0; //@line 19103
       HEAP32[$ReallocAsyncCtx3 >> 2] = 188; //@line 19104
       $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 19105
       HEAP32[$158 >> 2] = $40; //@line 19106
       $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 19107
       HEAP32[$159 >> 2] = $26; //@line 19108
       $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 19109
       HEAP32[$160 >> 2] = $36; //@line 19110
       sp = STACKTOP; //@line 19111
       return;
      }
     }
     HEAP8[$40 >> 0] = 1; //@line 19115
     _equeue_mutex_unlock($26); //@line 19116
    }
    HEAP8[$36 >> 0] = 0; //@line 19118
    return;
   } else {
    $$065 = $141; //@line 19121
   }
  } else {
   $$065 = -1; //@line 19124
  }
  _equeue_mutex_lock($26); //@line 19126
  $161 = HEAP32[$24 >> 2] | 0; //@line 19127
  if (!$161) {
   $$2 = $$065; //@line 19130
  } else {
   $165 = (HEAP32[$161 + 20 >> 2] | 0) - $140 | 0; //@line 19134
   $168 = $165 & ~($165 >> 31); //@line 19137
   $$2 = $168 >>> 0 < $$065 >>> 0 ? $168 : $$065; //@line 19140
  }
  _equeue_mutex_unlock($26); //@line 19142
  _equeue_sema_wait($38, $$2) | 0; //@line 19143
  do {
   if (HEAP8[$36 >> 0] | 0) {
    _equeue_mutex_lock($26); //@line 19148
    if (!(HEAP8[$36 >> 0] | 0)) {
     _equeue_mutex_unlock($26); //@line 19152
     break;
    }
    HEAP8[$36 >> 0] = 0; //@line 19155
    _equeue_mutex_unlock($26); //@line 19156
    return;
   }
  } while (0);
  $174 = _equeue_tick() | 0; //@line 19160
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 19161
  _wait_ms(20); //@line 19162
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 189; //@line 19165
   $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 19166
   HEAP32[$175 >> 2] = $2; //@line 19167
   $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 19168
   HEAP32[$176 >> 2] = $6; //@line 19169
   $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 19170
   HEAP32[$177 >> 2] = $10; //@line 19171
   $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 19172
   HEAP32[$178 >> 2] = $12; //@line 19173
   $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 19174
   HEAP32[$179 >> 2] = $14; //@line 19175
   $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 19176
   HEAP32[$180 >> 2] = $16; //@line 19177
   $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 19178
   HEAP32[$181 >> 2] = $18; //@line 19179
   $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 19180
   HEAP32[$182 >> 2] = $20; //@line 19181
   $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 19182
   HEAP32[$183 >> 2] = $22; //@line 19183
   $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 19184
   HEAP32[$184 >> 2] = $24; //@line 19185
   $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 19186
   HEAP32[$185 >> 2] = $26; //@line 19187
   $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 19188
   HEAP32[$186 >> 2] = $28; //@line 19189
   $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 19190
   HEAP32[$187 >> 2] = $30; //@line 19191
   $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 19192
   $$expand_i1_val35 = $32 & 1; //@line 19193
   HEAP8[$188 >> 0] = $$expand_i1_val35; //@line 19194
   $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 19195
   HEAP32[$189 >> 2] = $36; //@line 19196
   $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 19197
   HEAP32[$190 >> 2] = $38; //@line 19198
   $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 19199
   HEAP32[$191 >> 2] = $40; //@line 19200
   $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 19201
   HEAP32[$192 >> 2] = $174; //@line 19202
   sp = STACKTOP; //@line 19203
   return;
  }
  ___async_unwind = 0; //@line 19206
  HEAP32[$ReallocAsyncCtx5 >> 2] = 189; //@line 19207
  $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 19208
  HEAP32[$175 >> 2] = $2; //@line 19209
  $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 19210
  HEAP32[$176 >> 2] = $6; //@line 19211
  $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 19212
  HEAP32[$177 >> 2] = $10; //@line 19213
  $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 19214
  HEAP32[$178 >> 2] = $12; //@line 19215
  $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 19216
  HEAP32[$179 >> 2] = $14; //@line 19217
  $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 19218
  HEAP32[$180 >> 2] = $16; //@line 19219
  $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 19220
  HEAP32[$181 >> 2] = $18; //@line 19221
  $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 19222
  HEAP32[$182 >> 2] = $20; //@line 19223
  $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 19224
  HEAP32[$183 >> 2] = $22; //@line 19225
  $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 19226
  HEAP32[$184 >> 2] = $24; //@line 19227
  $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 19228
  HEAP32[$185 >> 2] = $26; //@line 19229
  $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 19230
  HEAP32[$186 >> 2] = $28; //@line 19231
  $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 19232
  HEAP32[$187 >> 2] = $30; //@line 19233
  $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 19234
  $$expand_i1_val35 = $32 & 1; //@line 19235
  HEAP8[$188 >> 0] = $$expand_i1_val35; //@line 19236
  $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 19237
  HEAP32[$189 >> 2] = $36; //@line 19238
  $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 19239
  HEAP32[$190 >> 2] = $38; //@line 19240
  $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 19241
  HEAP32[$191 >> 2] = $40; //@line 19242
  $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 19243
  HEAP32[$192 >> 2] = $174; //@line 19244
  sp = STACKTOP; //@line 19245
  return;
 }
}
function _equeue_dispatch__async_cb_380($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$065 = 0, $$06790$reg2mem$0 = 0, $$06790$reg2mem$0$phi = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val31 = 0, $$expand_i1_val33 = 0, $$expand_i1_val35 = 0, $$reg2mem$0 = 0, $$reg2mem24$0 = 0, $$sink$in$i$i = 0, $102 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $14 = 0, $140 = 0, $141 = 0, $143 = 0, $146 = 0, $148 = 0, $151 = 0, $154 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $165 = 0, $168 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19263
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19265
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19267
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19269
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19271
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19275
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19277
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19279
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19281
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19283
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19285
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19287
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19289
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19291
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 19293
 $32 = HEAP8[$0 + 64 >> 0] & 1; //@line 19296
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 19298
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 19300
 $$06790$reg2mem$0 = HEAP32[$0 + 76 >> 2] | 0; //@line 19305
 $$reg2mem$0 = HEAP32[$0 + 20 >> 2] | 0; //@line 19305
 $$reg2mem24$0 = HEAP32[$0 + 80 >> 2] | 0; //@line 19305
 while (1) {
  _equeue_mutex_lock($18); //@line 19307
  $125 = HEAP32[$16 >> 2] | 0; //@line 19308
  L4 : do {
   if (!$125) {
    $$02329$i$i = $16; //@line 19312
    label = 21; //@line 19313
   } else {
    $127 = HEAP32[$$06790$reg2mem$0 >> 2] | 0; //@line 19315
    $$025$i$i = $16; //@line 19316
    $129 = $125; //@line 19316
    while (1) {
     $128 = HEAP32[$129 >> 2] | 0; //@line 19318
     if ($128 >>> 0 >= $127 >>> 0) {
      break;
     }
     $131 = $129 + 8 | 0; //@line 19323
     $132 = HEAP32[$131 >> 2] | 0; //@line 19324
     if (!$132) {
      $$02329$i$i = $131; //@line 19327
      label = 21; //@line 19328
      break L4;
     } else {
      $$025$i$i = $131; //@line 19331
      $129 = $132; //@line 19331
     }
    }
    if (($128 | 0) == ($127 | 0)) {
     HEAP32[$$06790$reg2mem$0 + 12 >> 2] = $129; //@line 19337
     $$02330$i$i = $$025$i$i; //@line 19340
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 19340
    } else {
     $$02329$i$i = $$025$i$i; //@line 19342
     label = 21; //@line 19343
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 19348
   HEAP32[$$06790$reg2mem$0 + 12 >> 2] = 0; //@line 19350
   $$02330$i$i = $$02329$i$i; //@line 19351
   $$sink$in$i$i = $$02329$i$i; //@line 19351
  }
  HEAP32[$$reg2mem24$0 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 19354
  HEAP32[$$02330$i$i >> 2] = $$06790$reg2mem$0; //@line 19355
  _equeue_mutex_unlock($18); //@line 19356
  if (!$$reg2mem$0) {
   label = 24; //@line 19359
   break;
  }
  $$reg2mem24$0 = $$reg2mem$0 + 8 | 0; //@line 19362
  $42 = HEAP32[$$reg2mem24$0 >> 2] | 0; //@line 19363
  $44 = HEAP32[$$reg2mem$0 + 32 >> 2] | 0; //@line 19365
  if ($44 | 0) {
   label = 3; //@line 19368
   break;
  }
  $68 = HEAP32[$$reg2mem$0 + 24 >> 2] | 0; //@line 19372
  if (($68 | 0) > -1) {
   label = 7; //@line 19375
   break;
  }
  $92 = $$reg2mem$0 + 4 | 0; //@line 19379
  $93 = HEAP8[$92 >> 0] | 0; //@line 19380
  HEAP8[$92 >> 0] = (($93 + 1 & 255) << HEAP32[$2 >> 2] | 0) == 0 ? 1 : ($93 & 255) + 1 & 255; //@line 19389
  $102 = HEAP32[$$reg2mem$0 + 28 >> 2] | 0; //@line 19391
  if ($102 | 0) {
   label = 11; //@line 19396
   break;
  } else {
   $$06790$reg2mem$0$phi = $$reg2mem$0; //@line 19394
   $$reg2mem$0 = $42; //@line 19394
   $$06790$reg2mem$0 = $$06790$reg2mem$0$phi; //@line 19394
  }
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 19402
  FUNCTION_TABLE_vi[$44 & 1023]($$reg2mem$0 + 36 | 0); //@line 19403
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 185; //@line 19406
   $47 = $ReallocAsyncCtx + 4 | 0; //@line 19407
   HEAP32[$47 >> 2] = $2; //@line 19408
   $48 = $ReallocAsyncCtx + 8 | 0; //@line 19409
   HEAP32[$48 >> 2] = $$reg2mem$0; //@line 19410
   $49 = $ReallocAsyncCtx + 12 | 0; //@line 19411
   HEAP32[$49 >> 2] = $8; //@line 19412
   $50 = $ReallocAsyncCtx + 16 | 0; //@line 19413
   HEAP32[$50 >> 2] = $42; //@line 19414
   $51 = $ReallocAsyncCtx + 20 | 0; //@line 19415
   HEAP32[$51 >> 2] = $12; //@line 19416
   $52 = $ReallocAsyncCtx + 24 | 0; //@line 19417
   HEAP32[$52 >> 2] = $14; //@line 19418
   $53 = $ReallocAsyncCtx + 28 | 0; //@line 19419
   HEAP32[$53 >> 2] = $16; //@line 19420
   $54 = $ReallocAsyncCtx + 32 | 0; //@line 19421
   HEAP32[$54 >> 2] = $18; //@line 19422
   $55 = $ReallocAsyncCtx + 36 | 0; //@line 19423
   HEAP32[$55 >> 2] = $20; //@line 19424
   $56 = $ReallocAsyncCtx + 40 | 0; //@line 19425
   HEAP32[$56 >> 2] = $22; //@line 19426
   $57 = $ReallocAsyncCtx + 44 | 0; //@line 19427
   HEAP32[$57 >> 2] = $24; //@line 19428
   $58 = $ReallocAsyncCtx + 48 | 0; //@line 19429
   HEAP32[$58 >> 2] = $26; //@line 19430
   $59 = $ReallocAsyncCtx + 52 | 0; //@line 19431
   HEAP32[$59 >> 2] = $6; //@line 19432
   $60 = $ReallocAsyncCtx + 56 | 0; //@line 19433
   HEAP32[$60 >> 2] = $28; //@line 19434
   $61 = $ReallocAsyncCtx + 60 | 0; //@line 19435
   HEAP32[$61 >> 2] = $30; //@line 19436
   $62 = $ReallocAsyncCtx + 64 | 0; //@line 19437
   $$expand_i1_val = $32 & 1; //@line 19438
   HEAP8[$62 >> 0] = $$expand_i1_val; //@line 19439
   $63 = $ReallocAsyncCtx + 68 | 0; //@line 19440
   HEAP32[$63 >> 2] = $$reg2mem24$0; //@line 19441
   $64 = $ReallocAsyncCtx + 72 | 0; //@line 19442
   HEAP32[$64 >> 2] = $34; //@line 19443
   $65 = $ReallocAsyncCtx + 76 | 0; //@line 19444
   HEAP32[$65 >> 2] = $36; //@line 19445
   $66 = $ReallocAsyncCtx + 80 | 0; //@line 19446
   HEAP32[$66 >> 2] = $4; //@line 19447
   sp = STACKTOP; //@line 19448
   return;
  }
  ___async_unwind = 0; //@line 19451
  HEAP32[$ReallocAsyncCtx >> 2] = 185; //@line 19452
  $47 = $ReallocAsyncCtx + 4 | 0; //@line 19453
  HEAP32[$47 >> 2] = $2; //@line 19454
  $48 = $ReallocAsyncCtx + 8 | 0; //@line 19455
  HEAP32[$48 >> 2] = $$reg2mem$0; //@line 19456
  $49 = $ReallocAsyncCtx + 12 | 0; //@line 19457
  HEAP32[$49 >> 2] = $8; //@line 19458
  $50 = $ReallocAsyncCtx + 16 | 0; //@line 19459
  HEAP32[$50 >> 2] = $42; //@line 19460
  $51 = $ReallocAsyncCtx + 20 | 0; //@line 19461
  HEAP32[$51 >> 2] = $12; //@line 19462
  $52 = $ReallocAsyncCtx + 24 | 0; //@line 19463
  HEAP32[$52 >> 2] = $14; //@line 19464
  $53 = $ReallocAsyncCtx + 28 | 0; //@line 19465
  HEAP32[$53 >> 2] = $16; //@line 19466
  $54 = $ReallocAsyncCtx + 32 | 0; //@line 19467
  HEAP32[$54 >> 2] = $18; //@line 19468
  $55 = $ReallocAsyncCtx + 36 | 0; //@line 19469
  HEAP32[$55 >> 2] = $20; //@line 19470
  $56 = $ReallocAsyncCtx + 40 | 0; //@line 19471
  HEAP32[$56 >> 2] = $22; //@line 19472
  $57 = $ReallocAsyncCtx + 44 | 0; //@line 19473
  HEAP32[$57 >> 2] = $24; //@line 19474
  $58 = $ReallocAsyncCtx + 48 | 0; //@line 19475
  HEAP32[$58 >> 2] = $26; //@line 19476
  $59 = $ReallocAsyncCtx + 52 | 0; //@line 19477
  HEAP32[$59 >> 2] = $6; //@line 19478
  $60 = $ReallocAsyncCtx + 56 | 0; //@line 19479
  HEAP32[$60 >> 2] = $28; //@line 19480
  $61 = $ReallocAsyncCtx + 60 | 0; //@line 19481
  HEAP32[$61 >> 2] = $30; //@line 19482
  $62 = $ReallocAsyncCtx + 64 | 0; //@line 19483
  $$expand_i1_val = $32 & 1; //@line 19484
  HEAP8[$62 >> 0] = $$expand_i1_val; //@line 19485
  $63 = $ReallocAsyncCtx + 68 | 0; //@line 19486
  HEAP32[$63 >> 2] = $$reg2mem24$0; //@line 19487
  $64 = $ReallocAsyncCtx + 72 | 0; //@line 19488
  HEAP32[$64 >> 2] = $34; //@line 19489
  $65 = $ReallocAsyncCtx + 76 | 0; //@line 19490
  HEAP32[$65 >> 2] = $36; //@line 19491
  $66 = $ReallocAsyncCtx + 80 | 0; //@line 19492
  HEAP32[$66 >> 2] = $4; //@line 19493
  sp = STACKTOP; //@line 19494
  return;
 } else if ((label | 0) == 7) {
  $70 = $$reg2mem$0 + 20 | 0; //@line 19498
  HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + $68; //@line 19501
  $73 = _equeue_tick() | 0; //@line 19502
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 19503
  _equeue_enqueue($8, $$reg2mem$0, $73) | 0; //@line 19504
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 186; //@line 19507
   $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 19508
   HEAP32[$74 >> 2] = $2; //@line 19509
   $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 19510
   HEAP32[$75 >> 2] = $4; //@line 19511
   $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 19512
   HEAP32[$76 >> 2] = $6; //@line 19513
   $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 19514
   HEAP32[$77 >> 2] = $8; //@line 19515
   $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 19516
   HEAP32[$78 >> 2] = $42; //@line 19517
   $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 19518
   HEAP32[$79 >> 2] = $12; //@line 19519
   $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 19520
   HEAP32[$80 >> 2] = $14; //@line 19521
   $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 19522
   HEAP32[$81 >> 2] = $16; //@line 19523
   $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 19524
   HEAP32[$82 >> 2] = $18; //@line 19525
   $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 19526
   HEAP32[$83 >> 2] = $20; //@line 19527
   $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 19528
   HEAP32[$84 >> 2] = $22; //@line 19529
   $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 19530
   HEAP32[$85 >> 2] = $24; //@line 19531
   $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 19532
   HEAP32[$86 >> 2] = $26; //@line 19533
   $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 19534
   HEAP32[$87 >> 2] = $28; //@line 19535
   $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 19536
   HEAP32[$88 >> 2] = $30; //@line 19537
   $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 19538
   $$expand_i1_val31 = $32 & 1; //@line 19539
   HEAP8[$89 >> 0] = $$expand_i1_val31; //@line 19540
   $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 19541
   HEAP32[$90 >> 2] = $34; //@line 19542
   $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 19543
   HEAP32[$91 >> 2] = $36; //@line 19544
   sp = STACKTOP; //@line 19545
   return;
  }
  ___async_unwind = 0; //@line 19548
  HEAP32[$ReallocAsyncCtx4 >> 2] = 186; //@line 19549
  $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 19550
  HEAP32[$74 >> 2] = $2; //@line 19551
  $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 19552
  HEAP32[$75 >> 2] = $4; //@line 19553
  $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 19554
  HEAP32[$76 >> 2] = $6; //@line 19555
  $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 19556
  HEAP32[$77 >> 2] = $8; //@line 19557
  $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 19558
  HEAP32[$78 >> 2] = $42; //@line 19559
  $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 19560
  HEAP32[$79 >> 2] = $12; //@line 19561
  $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 19562
  HEAP32[$80 >> 2] = $14; //@line 19563
  $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 19564
  HEAP32[$81 >> 2] = $16; //@line 19565
  $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 19566
  HEAP32[$82 >> 2] = $18; //@line 19567
  $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 19568
  HEAP32[$83 >> 2] = $20; //@line 19569
  $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 19570
  HEAP32[$84 >> 2] = $22; //@line 19571
  $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 19572
  HEAP32[$85 >> 2] = $24; //@line 19573
  $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 19574
  HEAP32[$86 >> 2] = $26; //@line 19575
  $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 19576
  HEAP32[$87 >> 2] = $28; //@line 19577
  $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 19578
  HEAP32[$88 >> 2] = $30; //@line 19579
  $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 19580
  $$expand_i1_val31 = $32 & 1; //@line 19581
  HEAP8[$89 >> 0] = $$expand_i1_val31; //@line 19582
  $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 19583
  HEAP32[$90 >> 2] = $34; //@line 19584
  $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 19585
  HEAP32[$91 >> 2] = $36; //@line 19586
  sp = STACKTOP; //@line 19587
  return;
 } else if ((label | 0) == 11) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 19592
  FUNCTION_TABLE_vi[$102 & 1023]($$reg2mem$0 + 36 | 0); //@line 19593
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 187; //@line 19596
   $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 19597
   HEAP32[$105 >> 2] = $2; //@line 19598
   $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 19599
   HEAP32[$106 >> 2] = $4; //@line 19600
   $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 19601
   HEAP32[$107 >> 2] = $6; //@line 19602
   $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 19603
   HEAP32[$108 >> 2] = $8; //@line 19604
   $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 19605
   HEAP32[$109 >> 2] = $42; //@line 19606
   $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 19607
   HEAP32[$110 >> 2] = $12; //@line 19608
   $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 19609
   HEAP32[$111 >> 2] = $14; //@line 19610
   $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 19611
   HEAP32[$112 >> 2] = $16; //@line 19612
   $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 19613
   HEAP32[$113 >> 2] = $18; //@line 19614
   $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 19615
   HEAP32[$114 >> 2] = $20; //@line 19616
   $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 19617
   HEAP32[$115 >> 2] = $22; //@line 19618
   $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 19619
   HEAP32[$116 >> 2] = $24; //@line 19620
   $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 19621
   HEAP32[$117 >> 2] = $26; //@line 19622
   $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 19623
   HEAP32[$118 >> 2] = $28; //@line 19624
   $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 19625
   HEAP32[$119 >> 2] = $30; //@line 19626
   $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 19627
   $$expand_i1_val33 = $32 & 1; //@line 19628
   HEAP8[$120 >> 0] = $$expand_i1_val33; //@line 19629
   $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 19630
   HEAP32[$121 >> 2] = $34; //@line 19631
   $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 19632
   HEAP32[$122 >> 2] = $36; //@line 19633
   $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 19634
   HEAP32[$123 >> 2] = $$reg2mem$0; //@line 19635
   $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 19636
   HEAP32[$124 >> 2] = $$reg2mem24$0; //@line 19637
   sp = STACKTOP; //@line 19638
   return;
  }
  ___async_unwind = 0; //@line 19641
  HEAP32[$ReallocAsyncCtx2 >> 2] = 187; //@line 19642
  $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 19643
  HEAP32[$105 >> 2] = $2; //@line 19644
  $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 19645
  HEAP32[$106 >> 2] = $4; //@line 19646
  $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 19647
  HEAP32[$107 >> 2] = $6; //@line 19648
  $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 19649
  HEAP32[$108 >> 2] = $8; //@line 19650
  $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 19651
  HEAP32[$109 >> 2] = $42; //@line 19652
  $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 19653
  HEAP32[$110 >> 2] = $12; //@line 19654
  $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 19655
  HEAP32[$111 >> 2] = $14; //@line 19656
  $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 19657
  HEAP32[$112 >> 2] = $16; //@line 19658
  $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 19659
  HEAP32[$113 >> 2] = $18; //@line 19660
  $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 19661
  HEAP32[$114 >> 2] = $20; //@line 19662
  $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 19663
  HEAP32[$115 >> 2] = $22; //@line 19664
  $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 19665
  HEAP32[$116 >> 2] = $24; //@line 19666
  $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 19667
  HEAP32[$117 >> 2] = $26; //@line 19668
  $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 19669
  HEAP32[$118 >> 2] = $28; //@line 19670
  $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 19671
  HEAP32[$119 >> 2] = $30; //@line 19672
  $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 19673
  $$expand_i1_val33 = $32 & 1; //@line 19674
  HEAP8[$120 >> 0] = $$expand_i1_val33; //@line 19675
  $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 19676
  HEAP32[$121 >> 2] = $34; //@line 19677
  $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 19678
  HEAP32[$122 >> 2] = $36; //@line 19679
  $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 19680
  HEAP32[$123 >> 2] = $$reg2mem$0; //@line 19681
  $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 19682
  HEAP32[$124 >> 2] = $$reg2mem24$0; //@line 19683
  sp = STACKTOP; //@line 19684
  return;
 } else if ((label | 0) == 24) {
  $140 = _equeue_tick() | 0; //@line 19688
  if ($32) {
   $141 = $30 - $140 | 0; //@line 19690
   if (($141 | 0) < 1) {
    $143 = $8 + 40 | 0; //@line 19693
    if (HEAP32[$143 >> 2] | 0) {
     _equeue_mutex_lock($6); //@line 19697
     $146 = HEAP32[$143 >> 2] | 0; //@line 19698
     if ($146 | 0) {
      $148 = HEAP32[$26 >> 2] | 0; //@line 19701
      if ($148 | 0) {
       $151 = HEAP32[$8 + 44 >> 2] | 0; //@line 19705
       $154 = (HEAP32[$148 + 20 >> 2] | 0) - $140 | 0; //@line 19708
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 19712
       FUNCTION_TABLE_vii[$146 & 31]($151, $154 & ~($154 >> 31)); //@line 19713
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 188; //@line 19716
        $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 19717
        HEAP32[$158 >> 2] = $4; //@line 19718
        $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 19719
        HEAP32[$159 >> 2] = $6; //@line 19720
        $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 19721
        HEAP32[$160 >> 2] = $34; //@line 19722
        sp = STACKTOP; //@line 19723
        return;
       }
       ___async_unwind = 0; //@line 19726
       HEAP32[$ReallocAsyncCtx3 >> 2] = 188; //@line 19727
       $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 19728
       HEAP32[$158 >> 2] = $4; //@line 19729
       $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 19730
       HEAP32[$159 >> 2] = $6; //@line 19731
       $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 19732
       HEAP32[$160 >> 2] = $34; //@line 19733
       sp = STACKTOP; //@line 19734
       return;
      }
     }
     HEAP8[$4 >> 0] = 1; //@line 19738
     _equeue_mutex_unlock($6); //@line 19739
    }
    HEAP8[$34 >> 0] = 0; //@line 19741
    return;
   } else {
    $$065 = $141; //@line 19744
   }
  } else {
   $$065 = -1; //@line 19747
  }
  _equeue_mutex_lock($6); //@line 19749
  $161 = HEAP32[$26 >> 2] | 0; //@line 19750
  if (!$161) {
   $$2 = $$065; //@line 19753
  } else {
   $165 = (HEAP32[$161 + 20 >> 2] | 0) - $140 | 0; //@line 19757
   $168 = $165 & ~($165 >> 31); //@line 19760
   $$2 = $168 >>> 0 < $$065 >>> 0 ? $168 : $$065; //@line 19763
  }
  _equeue_mutex_unlock($6); //@line 19765
  _equeue_sema_wait($36, $$2) | 0; //@line 19766
  do {
   if (HEAP8[$34 >> 0] | 0) {
    _equeue_mutex_lock($6); //@line 19771
    if (!(HEAP8[$34 >> 0] | 0)) {
     _equeue_mutex_unlock($6); //@line 19775
     break;
    }
    HEAP8[$34 >> 0] = 0; //@line 19778
    _equeue_mutex_unlock($6); //@line 19779
    return;
   }
  } while (0);
  $174 = _equeue_tick() | 0; //@line 19783
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 19784
  _wait_ms(20); //@line 19785
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 189; //@line 19788
   $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 19789
   HEAP32[$175 >> 2] = $2; //@line 19790
   $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 19791
   HEAP32[$176 >> 2] = $8; //@line 19792
   $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 19793
   HEAP32[$177 >> 2] = $12; //@line 19794
   $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 19795
   HEAP32[$178 >> 2] = $14; //@line 19796
   $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 19797
   HEAP32[$179 >> 2] = $16; //@line 19798
   $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 19799
   HEAP32[$180 >> 2] = $18; //@line 19800
   $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 19801
   HEAP32[$181 >> 2] = $20; //@line 19802
   $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 19803
   HEAP32[$182 >> 2] = $22; //@line 19804
   $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 19805
   HEAP32[$183 >> 2] = $24; //@line 19806
   $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 19807
   HEAP32[$184 >> 2] = $26; //@line 19808
   $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 19809
   HEAP32[$185 >> 2] = $6; //@line 19810
   $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 19811
   HEAP32[$186 >> 2] = $28; //@line 19812
   $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 19813
   HEAP32[$187 >> 2] = $30; //@line 19814
   $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 19815
   $$expand_i1_val35 = $32 & 1; //@line 19816
   HEAP8[$188 >> 0] = $$expand_i1_val35; //@line 19817
   $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 19818
   HEAP32[$189 >> 2] = $34; //@line 19819
   $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 19820
   HEAP32[$190 >> 2] = $36; //@line 19821
   $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 19822
   HEAP32[$191 >> 2] = $4; //@line 19823
   $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 19824
   HEAP32[$192 >> 2] = $174; //@line 19825
   sp = STACKTOP; //@line 19826
   return;
  }
  ___async_unwind = 0; //@line 19829
  HEAP32[$ReallocAsyncCtx5 >> 2] = 189; //@line 19830
  $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 19831
  HEAP32[$175 >> 2] = $2; //@line 19832
  $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 19833
  HEAP32[$176 >> 2] = $8; //@line 19834
  $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 19835
  HEAP32[$177 >> 2] = $12; //@line 19836
  $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 19837
  HEAP32[$178 >> 2] = $14; //@line 19838
  $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 19839
  HEAP32[$179 >> 2] = $16; //@line 19840
  $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 19841
  HEAP32[$180 >> 2] = $18; //@line 19842
  $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 19843
  HEAP32[$181 >> 2] = $20; //@line 19844
  $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 19845
  HEAP32[$182 >> 2] = $22; //@line 19846
  $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 19847
  HEAP32[$183 >> 2] = $24; //@line 19848
  $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 19849
  HEAP32[$184 >> 2] = $26; //@line 19850
  $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 19851
  HEAP32[$185 >> 2] = $6; //@line 19852
  $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 19853
  HEAP32[$186 >> 2] = $28; //@line 19854
  $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 19855
  HEAP32[$187 >> 2] = $30; //@line 19856
  $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 19857
  $$expand_i1_val35 = $32 & 1; //@line 19858
  HEAP8[$188 >> 0] = $$expand_i1_val35; //@line 19859
  $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 19860
  HEAP32[$189 >> 2] = $34; //@line 19861
  $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 19862
  HEAP32[$190 >> 2] = $36; //@line 19863
  $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 19864
  HEAP32[$191 >> 2] = $4; //@line 19865
  $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 19866
  HEAP32[$192 >> 2] = $174; //@line 19867
  sp = STACKTOP; //@line 19868
  return;
 }
}
function _equeue_dispatch__async_cb_382($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$065 = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val16 = 0, $$reg2mem$0 = 0, $$sink$in$i$i = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $142 = 0, $144 = 0, $147 = 0, $150 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $164 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $66 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19900
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19902
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19904
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19906
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19908
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19912
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19914
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19916
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19918
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19920
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19922
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19924
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19926
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19928
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 19930
 $32 = HEAP8[$0 + 64 >> 0] & 1; //@line 19933
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 19935
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 19937
 $$reg2mem$0 = HEAP32[$0 + 20 >> 2] | 0; //@line 19938
 while (1) {
  if (!$$reg2mem$0) {
   label = 24; //@line 19942
   break;
  }
  $37 = $$reg2mem$0 + 8 | 0; //@line 19945
  $38 = HEAP32[$37 >> 2] | 0; //@line 19946
  $40 = HEAP32[$$reg2mem$0 + 32 >> 2] | 0; //@line 19948
  if ($40 | 0) {
   label = 3; //@line 19951
   break;
  }
  $64 = HEAP32[$$reg2mem$0 + 24 >> 2] | 0; //@line 19955
  if (($64 | 0) > -1) {
   label = 7; //@line 19958
   break;
  }
  $88 = $$reg2mem$0 + 4 | 0; //@line 19962
  $89 = HEAP8[$88 >> 0] | 0; //@line 19963
  HEAP8[$88 >> 0] = (($89 + 1 & 255) << HEAP32[$2 >> 2] | 0) == 0 ? 1 : ($89 & 255) + 1 & 255; //@line 19972
  $98 = HEAP32[$$reg2mem$0 + 28 >> 2] | 0; //@line 19974
  if ($98 | 0) {
   label = 12; //@line 19977
   break;
  }
  _equeue_mutex_lock($18); //@line 19980
  $121 = HEAP32[$16 >> 2] | 0; //@line 19981
  L8 : do {
   if (!$121) {
    $$02329$i$i = $16; //@line 19985
    label = 21; //@line 19986
   } else {
    $123 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 19988
    $$025$i$i = $16; //@line 19989
    $125 = $121; //@line 19989
    while (1) {
     $124 = HEAP32[$125 >> 2] | 0; //@line 19991
     if ($124 >>> 0 >= $123 >>> 0) {
      break;
     }
     $127 = $125 + 8 | 0; //@line 19996
     $128 = HEAP32[$127 >> 2] | 0; //@line 19997
     if (!$128) {
      $$02329$i$i = $127; //@line 20000
      label = 21; //@line 20001
      break L8;
     } else {
      $$025$i$i = $127; //@line 20004
      $125 = $128; //@line 20004
     }
    }
    if (($124 | 0) == ($123 | 0)) {
     HEAP32[$$reg2mem$0 + 12 >> 2] = $125; //@line 20010
     $$02330$i$i = $$025$i$i; //@line 20013
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 20013
    } else {
     $$02329$i$i = $$025$i$i; //@line 20015
     label = 21; //@line 20016
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 20021
   HEAP32[$$reg2mem$0 + 12 >> 2] = 0; //@line 20023
   $$02330$i$i = $$02329$i$i; //@line 20024
   $$sink$in$i$i = $$02329$i$i; //@line 20024
  }
  HEAP32[$37 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 20027
  HEAP32[$$02330$i$i >> 2] = $$reg2mem$0; //@line 20028
  _equeue_mutex_unlock($18); //@line 20029
  $$reg2mem$0 = $38; //@line 20030
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 20034
  FUNCTION_TABLE_vi[$40 & 1023]($$reg2mem$0 + 36 | 0); //@line 20035
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 185; //@line 20038
   $43 = $ReallocAsyncCtx + 4 | 0; //@line 20039
   HEAP32[$43 >> 2] = $2; //@line 20040
   $44 = $ReallocAsyncCtx + 8 | 0; //@line 20041
   HEAP32[$44 >> 2] = $$reg2mem$0; //@line 20042
   $45 = $ReallocAsyncCtx + 12 | 0; //@line 20043
   HEAP32[$45 >> 2] = $8; //@line 20044
   $46 = $ReallocAsyncCtx + 16 | 0; //@line 20045
   HEAP32[$46 >> 2] = $38; //@line 20046
   $47 = $ReallocAsyncCtx + 20 | 0; //@line 20047
   HEAP32[$47 >> 2] = $12; //@line 20048
   $48 = $ReallocAsyncCtx + 24 | 0; //@line 20049
   HEAP32[$48 >> 2] = $14; //@line 20050
   $49 = $ReallocAsyncCtx + 28 | 0; //@line 20051
   HEAP32[$49 >> 2] = $16; //@line 20052
   $50 = $ReallocAsyncCtx + 32 | 0; //@line 20053
   HEAP32[$50 >> 2] = $18; //@line 20054
   $51 = $ReallocAsyncCtx + 36 | 0; //@line 20055
   HEAP32[$51 >> 2] = $20; //@line 20056
   $52 = $ReallocAsyncCtx + 40 | 0; //@line 20057
   HEAP32[$52 >> 2] = $22; //@line 20058
   $53 = $ReallocAsyncCtx + 44 | 0; //@line 20059
   HEAP32[$53 >> 2] = $24; //@line 20060
   $54 = $ReallocAsyncCtx + 48 | 0; //@line 20061
   HEAP32[$54 >> 2] = $26; //@line 20062
   $55 = $ReallocAsyncCtx + 52 | 0; //@line 20063
   HEAP32[$55 >> 2] = $6; //@line 20064
   $56 = $ReallocAsyncCtx + 56 | 0; //@line 20065
   HEAP32[$56 >> 2] = $28; //@line 20066
   $57 = $ReallocAsyncCtx + 60 | 0; //@line 20067
   HEAP32[$57 >> 2] = $30; //@line 20068
   $58 = $ReallocAsyncCtx + 64 | 0; //@line 20069
   $$expand_i1_val = $32 & 1; //@line 20070
   HEAP8[$58 >> 0] = $$expand_i1_val; //@line 20071
   $59 = $ReallocAsyncCtx + 68 | 0; //@line 20072
   HEAP32[$59 >> 2] = $37; //@line 20073
   $60 = $ReallocAsyncCtx + 72 | 0; //@line 20074
   HEAP32[$60 >> 2] = $34; //@line 20075
   $61 = $ReallocAsyncCtx + 76 | 0; //@line 20076
   HEAP32[$61 >> 2] = $36; //@line 20077
   $62 = $ReallocAsyncCtx + 80 | 0; //@line 20078
   HEAP32[$62 >> 2] = $4; //@line 20079
   sp = STACKTOP; //@line 20080
   return;
  }
  ___async_unwind = 0; //@line 20083
  HEAP32[$ReallocAsyncCtx >> 2] = 185; //@line 20084
  $43 = $ReallocAsyncCtx + 4 | 0; //@line 20085
  HEAP32[$43 >> 2] = $2; //@line 20086
  $44 = $ReallocAsyncCtx + 8 | 0; //@line 20087
  HEAP32[$44 >> 2] = $$reg2mem$0; //@line 20088
  $45 = $ReallocAsyncCtx + 12 | 0; //@line 20089
  HEAP32[$45 >> 2] = $8; //@line 20090
  $46 = $ReallocAsyncCtx + 16 | 0; //@line 20091
  HEAP32[$46 >> 2] = $38; //@line 20092
  $47 = $ReallocAsyncCtx + 20 | 0; //@line 20093
  HEAP32[$47 >> 2] = $12; //@line 20094
  $48 = $ReallocAsyncCtx + 24 | 0; //@line 20095
  HEAP32[$48 >> 2] = $14; //@line 20096
  $49 = $ReallocAsyncCtx + 28 | 0; //@line 20097
  HEAP32[$49 >> 2] = $16; //@line 20098
  $50 = $ReallocAsyncCtx + 32 | 0; //@line 20099
  HEAP32[$50 >> 2] = $18; //@line 20100
  $51 = $ReallocAsyncCtx + 36 | 0; //@line 20101
  HEAP32[$51 >> 2] = $20; //@line 20102
  $52 = $ReallocAsyncCtx + 40 | 0; //@line 20103
  HEAP32[$52 >> 2] = $22; //@line 20104
  $53 = $ReallocAsyncCtx + 44 | 0; //@line 20105
  HEAP32[$53 >> 2] = $24; //@line 20106
  $54 = $ReallocAsyncCtx + 48 | 0; //@line 20107
  HEAP32[$54 >> 2] = $26; //@line 20108
  $55 = $ReallocAsyncCtx + 52 | 0; //@line 20109
  HEAP32[$55 >> 2] = $6; //@line 20110
  $56 = $ReallocAsyncCtx + 56 | 0; //@line 20111
  HEAP32[$56 >> 2] = $28; //@line 20112
  $57 = $ReallocAsyncCtx + 60 | 0; //@line 20113
  HEAP32[$57 >> 2] = $30; //@line 20114
  $58 = $ReallocAsyncCtx + 64 | 0; //@line 20115
  $$expand_i1_val = $32 & 1; //@line 20116
  HEAP8[$58 >> 0] = $$expand_i1_val; //@line 20117
  $59 = $ReallocAsyncCtx + 68 | 0; //@line 20118
  HEAP32[$59 >> 2] = $37; //@line 20119
  $60 = $ReallocAsyncCtx + 72 | 0; //@line 20120
  HEAP32[$60 >> 2] = $34; //@line 20121
  $61 = $ReallocAsyncCtx + 76 | 0; //@line 20122
  HEAP32[$61 >> 2] = $36; //@line 20123
  $62 = $ReallocAsyncCtx + 80 | 0; //@line 20124
  HEAP32[$62 >> 2] = $4; //@line 20125
  sp = STACKTOP; //@line 20126
  return;
 } else if ((label | 0) == 7) {
  $66 = $$reg2mem$0 + 20 | 0; //@line 20130
  HEAP32[$66 >> 2] = (HEAP32[$66 >> 2] | 0) + $64; //@line 20133
  $69 = _equeue_tick() | 0; //@line 20134
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 20135
  _equeue_enqueue($8, $$reg2mem$0, $69) | 0; //@line 20136
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 186; //@line 20139
   $70 = $ReallocAsyncCtx4 + 4 | 0; //@line 20140
   HEAP32[$70 >> 2] = $2; //@line 20141
   $71 = $ReallocAsyncCtx4 + 8 | 0; //@line 20142
   HEAP32[$71 >> 2] = $4; //@line 20143
   $72 = $ReallocAsyncCtx4 + 12 | 0; //@line 20144
   HEAP32[$72 >> 2] = $6; //@line 20145
   $73 = $ReallocAsyncCtx4 + 16 | 0; //@line 20146
   HEAP32[$73 >> 2] = $8; //@line 20147
   $74 = $ReallocAsyncCtx4 + 20 | 0; //@line 20148
   HEAP32[$74 >> 2] = $38; //@line 20149
   $75 = $ReallocAsyncCtx4 + 24 | 0; //@line 20150
   HEAP32[$75 >> 2] = $12; //@line 20151
   $76 = $ReallocAsyncCtx4 + 28 | 0; //@line 20152
   HEAP32[$76 >> 2] = $14; //@line 20153
   $77 = $ReallocAsyncCtx4 + 32 | 0; //@line 20154
   HEAP32[$77 >> 2] = $16; //@line 20155
   $78 = $ReallocAsyncCtx4 + 36 | 0; //@line 20156
   HEAP32[$78 >> 2] = $18; //@line 20157
   $79 = $ReallocAsyncCtx4 + 40 | 0; //@line 20158
   HEAP32[$79 >> 2] = $20; //@line 20159
   $80 = $ReallocAsyncCtx4 + 44 | 0; //@line 20160
   HEAP32[$80 >> 2] = $22; //@line 20161
   $81 = $ReallocAsyncCtx4 + 48 | 0; //@line 20162
   HEAP32[$81 >> 2] = $24; //@line 20163
   $82 = $ReallocAsyncCtx4 + 52 | 0; //@line 20164
   HEAP32[$82 >> 2] = $26; //@line 20165
   $83 = $ReallocAsyncCtx4 + 56 | 0; //@line 20166
   HEAP32[$83 >> 2] = $28; //@line 20167
   $84 = $ReallocAsyncCtx4 + 60 | 0; //@line 20168
   HEAP32[$84 >> 2] = $30; //@line 20169
   $85 = $ReallocAsyncCtx4 + 64 | 0; //@line 20170
   $$expand_i1_val12 = $32 & 1; //@line 20171
   HEAP8[$85 >> 0] = $$expand_i1_val12; //@line 20172
   $86 = $ReallocAsyncCtx4 + 68 | 0; //@line 20173
   HEAP32[$86 >> 2] = $34; //@line 20174
   $87 = $ReallocAsyncCtx4 + 72 | 0; //@line 20175
   HEAP32[$87 >> 2] = $36; //@line 20176
   sp = STACKTOP; //@line 20177
   return;
  }
  ___async_unwind = 0; //@line 20180
  HEAP32[$ReallocAsyncCtx4 >> 2] = 186; //@line 20181
  $70 = $ReallocAsyncCtx4 + 4 | 0; //@line 20182
  HEAP32[$70 >> 2] = $2; //@line 20183
  $71 = $ReallocAsyncCtx4 + 8 | 0; //@line 20184
  HEAP32[$71 >> 2] = $4; //@line 20185
  $72 = $ReallocAsyncCtx4 + 12 | 0; //@line 20186
  HEAP32[$72 >> 2] = $6; //@line 20187
  $73 = $ReallocAsyncCtx4 + 16 | 0; //@line 20188
  HEAP32[$73 >> 2] = $8; //@line 20189
  $74 = $ReallocAsyncCtx4 + 20 | 0; //@line 20190
  HEAP32[$74 >> 2] = $38; //@line 20191
  $75 = $ReallocAsyncCtx4 + 24 | 0; //@line 20192
  HEAP32[$75 >> 2] = $12; //@line 20193
  $76 = $ReallocAsyncCtx4 + 28 | 0; //@line 20194
  HEAP32[$76 >> 2] = $14; //@line 20195
  $77 = $ReallocAsyncCtx4 + 32 | 0; //@line 20196
  HEAP32[$77 >> 2] = $16; //@line 20197
  $78 = $ReallocAsyncCtx4 + 36 | 0; //@line 20198
  HEAP32[$78 >> 2] = $18; //@line 20199
  $79 = $ReallocAsyncCtx4 + 40 | 0; //@line 20200
  HEAP32[$79 >> 2] = $20; //@line 20201
  $80 = $ReallocAsyncCtx4 + 44 | 0; //@line 20202
  HEAP32[$80 >> 2] = $22; //@line 20203
  $81 = $ReallocAsyncCtx4 + 48 | 0; //@line 20204
  HEAP32[$81 >> 2] = $24; //@line 20205
  $82 = $ReallocAsyncCtx4 + 52 | 0; //@line 20206
  HEAP32[$82 >> 2] = $26; //@line 20207
  $83 = $ReallocAsyncCtx4 + 56 | 0; //@line 20208
  HEAP32[$83 >> 2] = $28; //@line 20209
  $84 = $ReallocAsyncCtx4 + 60 | 0; //@line 20210
  HEAP32[$84 >> 2] = $30; //@line 20211
  $85 = $ReallocAsyncCtx4 + 64 | 0; //@line 20212
  $$expand_i1_val12 = $32 & 1; //@line 20213
  HEAP8[$85 >> 0] = $$expand_i1_val12; //@line 20214
  $86 = $ReallocAsyncCtx4 + 68 | 0; //@line 20215
  HEAP32[$86 >> 2] = $34; //@line 20216
  $87 = $ReallocAsyncCtx4 + 72 | 0; //@line 20217
  HEAP32[$87 >> 2] = $36; //@line 20218
  sp = STACKTOP; //@line 20219
  return;
 } else if ((label | 0) == 12) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 20224
  FUNCTION_TABLE_vi[$98 & 1023]($$reg2mem$0 + 36 | 0); //@line 20225
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 187; //@line 20228
   $101 = $ReallocAsyncCtx2 + 4 | 0; //@line 20229
   HEAP32[$101 >> 2] = $2; //@line 20230
   $102 = $ReallocAsyncCtx2 + 8 | 0; //@line 20231
   HEAP32[$102 >> 2] = $4; //@line 20232
   $103 = $ReallocAsyncCtx2 + 12 | 0; //@line 20233
   HEAP32[$103 >> 2] = $6; //@line 20234
   $104 = $ReallocAsyncCtx2 + 16 | 0; //@line 20235
   HEAP32[$104 >> 2] = $8; //@line 20236
   $105 = $ReallocAsyncCtx2 + 20 | 0; //@line 20237
   HEAP32[$105 >> 2] = $38; //@line 20238
   $106 = $ReallocAsyncCtx2 + 24 | 0; //@line 20239
   HEAP32[$106 >> 2] = $12; //@line 20240
   $107 = $ReallocAsyncCtx2 + 28 | 0; //@line 20241
   HEAP32[$107 >> 2] = $14; //@line 20242
   $108 = $ReallocAsyncCtx2 + 32 | 0; //@line 20243
   HEAP32[$108 >> 2] = $16; //@line 20244
   $109 = $ReallocAsyncCtx2 + 36 | 0; //@line 20245
   HEAP32[$109 >> 2] = $18; //@line 20246
   $110 = $ReallocAsyncCtx2 + 40 | 0; //@line 20247
   HEAP32[$110 >> 2] = $20; //@line 20248
   $111 = $ReallocAsyncCtx2 + 44 | 0; //@line 20249
   HEAP32[$111 >> 2] = $22; //@line 20250
   $112 = $ReallocAsyncCtx2 + 48 | 0; //@line 20251
   HEAP32[$112 >> 2] = $24; //@line 20252
   $113 = $ReallocAsyncCtx2 + 52 | 0; //@line 20253
   HEAP32[$113 >> 2] = $26; //@line 20254
   $114 = $ReallocAsyncCtx2 + 56 | 0; //@line 20255
   HEAP32[$114 >> 2] = $28; //@line 20256
   $115 = $ReallocAsyncCtx2 + 60 | 0; //@line 20257
   HEAP32[$115 >> 2] = $30; //@line 20258
   $116 = $ReallocAsyncCtx2 + 64 | 0; //@line 20259
   $$expand_i1_val14 = $32 & 1; //@line 20260
   HEAP8[$116 >> 0] = $$expand_i1_val14; //@line 20261
   $117 = $ReallocAsyncCtx2 + 68 | 0; //@line 20262
   HEAP32[$117 >> 2] = $34; //@line 20263
   $118 = $ReallocAsyncCtx2 + 72 | 0; //@line 20264
   HEAP32[$118 >> 2] = $36; //@line 20265
   $119 = $ReallocAsyncCtx2 + 76 | 0; //@line 20266
   HEAP32[$119 >> 2] = $$reg2mem$0; //@line 20267
   $120 = $ReallocAsyncCtx2 + 80 | 0; //@line 20268
   HEAP32[$120 >> 2] = $37; //@line 20269
   sp = STACKTOP; //@line 20270
   return;
  }
  ___async_unwind = 0; //@line 20273
  HEAP32[$ReallocAsyncCtx2 >> 2] = 187; //@line 20274
  $101 = $ReallocAsyncCtx2 + 4 | 0; //@line 20275
  HEAP32[$101 >> 2] = $2; //@line 20276
  $102 = $ReallocAsyncCtx2 + 8 | 0; //@line 20277
  HEAP32[$102 >> 2] = $4; //@line 20278
  $103 = $ReallocAsyncCtx2 + 12 | 0; //@line 20279
  HEAP32[$103 >> 2] = $6; //@line 20280
  $104 = $ReallocAsyncCtx2 + 16 | 0; //@line 20281
  HEAP32[$104 >> 2] = $8; //@line 20282
  $105 = $ReallocAsyncCtx2 + 20 | 0; //@line 20283
  HEAP32[$105 >> 2] = $38; //@line 20284
  $106 = $ReallocAsyncCtx2 + 24 | 0; //@line 20285
  HEAP32[$106 >> 2] = $12; //@line 20286
  $107 = $ReallocAsyncCtx2 + 28 | 0; //@line 20287
  HEAP32[$107 >> 2] = $14; //@line 20288
  $108 = $ReallocAsyncCtx2 + 32 | 0; //@line 20289
  HEAP32[$108 >> 2] = $16; //@line 20290
  $109 = $ReallocAsyncCtx2 + 36 | 0; //@line 20291
  HEAP32[$109 >> 2] = $18; //@line 20292
  $110 = $ReallocAsyncCtx2 + 40 | 0; //@line 20293
  HEAP32[$110 >> 2] = $20; //@line 20294
  $111 = $ReallocAsyncCtx2 + 44 | 0; //@line 20295
  HEAP32[$111 >> 2] = $22; //@line 20296
  $112 = $ReallocAsyncCtx2 + 48 | 0; //@line 20297
  HEAP32[$112 >> 2] = $24; //@line 20298
  $113 = $ReallocAsyncCtx2 + 52 | 0; //@line 20299
  HEAP32[$113 >> 2] = $26; //@line 20300
  $114 = $ReallocAsyncCtx2 + 56 | 0; //@line 20301
  HEAP32[$114 >> 2] = $28; //@line 20302
  $115 = $ReallocAsyncCtx2 + 60 | 0; //@line 20303
  HEAP32[$115 >> 2] = $30; //@line 20304
  $116 = $ReallocAsyncCtx2 + 64 | 0; //@line 20305
  $$expand_i1_val14 = $32 & 1; //@line 20306
  HEAP8[$116 >> 0] = $$expand_i1_val14; //@line 20307
  $117 = $ReallocAsyncCtx2 + 68 | 0; //@line 20308
  HEAP32[$117 >> 2] = $34; //@line 20309
  $118 = $ReallocAsyncCtx2 + 72 | 0; //@line 20310
  HEAP32[$118 >> 2] = $36; //@line 20311
  $119 = $ReallocAsyncCtx2 + 76 | 0; //@line 20312
  HEAP32[$119 >> 2] = $$reg2mem$0; //@line 20313
  $120 = $ReallocAsyncCtx2 + 80 | 0; //@line 20314
  HEAP32[$120 >> 2] = $37; //@line 20315
  sp = STACKTOP; //@line 20316
  return;
 } else if ((label | 0) == 24) {
  $136 = _equeue_tick() | 0; //@line 20320
  if ($32) {
   $137 = $30 - $136 | 0; //@line 20322
   if (($137 | 0) < 1) {
    $139 = $8 + 40 | 0; //@line 20325
    if (HEAP32[$139 >> 2] | 0) {
     _equeue_mutex_lock($6); //@line 20329
     $142 = HEAP32[$139 >> 2] | 0; //@line 20330
     if ($142 | 0) {
      $144 = HEAP32[$26 >> 2] | 0; //@line 20333
      if ($144 | 0) {
       $147 = HEAP32[$8 + 44 >> 2] | 0; //@line 20337
       $150 = (HEAP32[$144 + 20 >> 2] | 0) - $136 | 0; //@line 20340
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 20344
       FUNCTION_TABLE_vii[$142 & 31]($147, $150 & ~($150 >> 31)); //@line 20345
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 188; //@line 20348
        $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 20349
        HEAP32[$154 >> 2] = $4; //@line 20350
        $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 20351
        HEAP32[$155 >> 2] = $6; //@line 20352
        $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 20353
        HEAP32[$156 >> 2] = $34; //@line 20354
        sp = STACKTOP; //@line 20355
        return;
       }
       ___async_unwind = 0; //@line 20358
       HEAP32[$ReallocAsyncCtx3 >> 2] = 188; //@line 20359
       $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 20360
       HEAP32[$154 >> 2] = $4; //@line 20361
       $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 20362
       HEAP32[$155 >> 2] = $6; //@line 20363
       $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 20364
       HEAP32[$156 >> 2] = $34; //@line 20365
       sp = STACKTOP; //@line 20366
       return;
      }
     }
     HEAP8[$4 >> 0] = 1; //@line 20370
     _equeue_mutex_unlock($6); //@line 20371
    }
    HEAP8[$34 >> 0] = 0; //@line 20373
    return;
   } else {
    $$065 = $137; //@line 20376
   }
  } else {
   $$065 = -1; //@line 20379
  }
  _equeue_mutex_lock($6); //@line 20381
  $157 = HEAP32[$26 >> 2] | 0; //@line 20382
  if (!$157) {
   $$2 = $$065; //@line 20385
  } else {
   $161 = (HEAP32[$157 + 20 >> 2] | 0) - $136 | 0; //@line 20389
   $164 = $161 & ~($161 >> 31); //@line 20392
   $$2 = $164 >>> 0 < $$065 >>> 0 ? $164 : $$065; //@line 20395
  }
  _equeue_mutex_unlock($6); //@line 20397
  _equeue_sema_wait($36, $$2) | 0; //@line 20398
  do {
   if (HEAP8[$34 >> 0] | 0) {
    _equeue_mutex_lock($6); //@line 20403
    if (!(HEAP8[$34 >> 0] | 0)) {
     _equeue_mutex_unlock($6); //@line 20407
     break;
    }
    HEAP8[$34 >> 0] = 0; //@line 20410
    _equeue_mutex_unlock($6); //@line 20411
    return;
   }
  } while (0);
  $170 = _equeue_tick() | 0; //@line 20415
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 20416
  _wait_ms(20); //@line 20417
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 189; //@line 20420
   $171 = $ReallocAsyncCtx5 + 4 | 0; //@line 20421
   HEAP32[$171 >> 2] = $2; //@line 20422
   $172 = $ReallocAsyncCtx5 + 8 | 0; //@line 20423
   HEAP32[$172 >> 2] = $8; //@line 20424
   $173 = $ReallocAsyncCtx5 + 12 | 0; //@line 20425
   HEAP32[$173 >> 2] = $12; //@line 20426
   $174 = $ReallocAsyncCtx5 + 16 | 0; //@line 20427
   HEAP32[$174 >> 2] = $14; //@line 20428
   $175 = $ReallocAsyncCtx5 + 20 | 0; //@line 20429
   HEAP32[$175 >> 2] = $16; //@line 20430
   $176 = $ReallocAsyncCtx5 + 24 | 0; //@line 20431
   HEAP32[$176 >> 2] = $18; //@line 20432
   $177 = $ReallocAsyncCtx5 + 28 | 0; //@line 20433
   HEAP32[$177 >> 2] = $20; //@line 20434
   $178 = $ReallocAsyncCtx5 + 32 | 0; //@line 20435
   HEAP32[$178 >> 2] = $22; //@line 20436
   $179 = $ReallocAsyncCtx5 + 36 | 0; //@line 20437
   HEAP32[$179 >> 2] = $24; //@line 20438
   $180 = $ReallocAsyncCtx5 + 40 | 0; //@line 20439
   HEAP32[$180 >> 2] = $26; //@line 20440
   $181 = $ReallocAsyncCtx5 + 44 | 0; //@line 20441
   HEAP32[$181 >> 2] = $6; //@line 20442
   $182 = $ReallocAsyncCtx5 + 48 | 0; //@line 20443
   HEAP32[$182 >> 2] = $28; //@line 20444
   $183 = $ReallocAsyncCtx5 + 52 | 0; //@line 20445
   HEAP32[$183 >> 2] = $30; //@line 20446
   $184 = $ReallocAsyncCtx5 + 56 | 0; //@line 20447
   $$expand_i1_val16 = $32 & 1; //@line 20448
   HEAP8[$184 >> 0] = $$expand_i1_val16; //@line 20449
   $185 = $ReallocAsyncCtx5 + 60 | 0; //@line 20450
   HEAP32[$185 >> 2] = $34; //@line 20451
   $186 = $ReallocAsyncCtx5 + 64 | 0; //@line 20452
   HEAP32[$186 >> 2] = $36; //@line 20453
   $187 = $ReallocAsyncCtx5 + 68 | 0; //@line 20454
   HEAP32[$187 >> 2] = $4; //@line 20455
   $188 = $ReallocAsyncCtx5 + 72 | 0; //@line 20456
   HEAP32[$188 >> 2] = $170; //@line 20457
   sp = STACKTOP; //@line 20458
   return;
  }
  ___async_unwind = 0; //@line 20461
  HEAP32[$ReallocAsyncCtx5 >> 2] = 189; //@line 20462
  $171 = $ReallocAsyncCtx5 + 4 | 0; //@line 20463
  HEAP32[$171 >> 2] = $2; //@line 20464
  $172 = $ReallocAsyncCtx5 + 8 | 0; //@line 20465
  HEAP32[$172 >> 2] = $8; //@line 20466
  $173 = $ReallocAsyncCtx5 + 12 | 0; //@line 20467
  HEAP32[$173 >> 2] = $12; //@line 20468
  $174 = $ReallocAsyncCtx5 + 16 | 0; //@line 20469
  HEAP32[$174 >> 2] = $14; //@line 20470
  $175 = $ReallocAsyncCtx5 + 20 | 0; //@line 20471
  HEAP32[$175 >> 2] = $16; //@line 20472
  $176 = $ReallocAsyncCtx5 + 24 | 0; //@line 20473
  HEAP32[$176 >> 2] = $18; //@line 20474
  $177 = $ReallocAsyncCtx5 + 28 | 0; //@line 20475
  HEAP32[$177 >> 2] = $20; //@line 20476
  $178 = $ReallocAsyncCtx5 + 32 | 0; //@line 20477
  HEAP32[$178 >> 2] = $22; //@line 20478
  $179 = $ReallocAsyncCtx5 + 36 | 0; //@line 20479
  HEAP32[$179 >> 2] = $24; //@line 20480
  $180 = $ReallocAsyncCtx5 + 40 | 0; //@line 20481
  HEAP32[$180 >> 2] = $26; //@line 20482
  $181 = $ReallocAsyncCtx5 + 44 | 0; //@line 20483
  HEAP32[$181 >> 2] = $6; //@line 20484
  $182 = $ReallocAsyncCtx5 + 48 | 0; //@line 20485
  HEAP32[$182 >> 2] = $28; //@line 20486
  $183 = $ReallocAsyncCtx5 + 52 | 0; //@line 20487
  HEAP32[$183 >> 2] = $30; //@line 20488
  $184 = $ReallocAsyncCtx5 + 56 | 0; //@line 20489
  $$expand_i1_val16 = $32 & 1; //@line 20490
  HEAP8[$184 >> 0] = $$expand_i1_val16; //@line 20491
  $185 = $ReallocAsyncCtx5 + 60 | 0; //@line 20492
  HEAP32[$185 >> 2] = $34; //@line 20493
  $186 = $ReallocAsyncCtx5 + 64 | 0; //@line 20494
  HEAP32[$186 >> 2] = $36; //@line 20495
  $187 = $ReallocAsyncCtx5 + 68 | 0; //@line 20496
  HEAP32[$187 >> 2] = $4; //@line 20497
  $188 = $ReallocAsyncCtx5 + 72 | 0; //@line 20498
  HEAP32[$188 >> 2] = $170; //@line 20499
  sp = STACKTOP; //@line 20500
  return;
 }
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 11810
 STACKTOP = STACKTOP + 64 | 0; //@line 11811
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 11811
 $5 = sp + 16 | 0; //@line 11812
 $6 = sp; //@line 11813
 $7 = sp + 24 | 0; //@line 11814
 $8 = sp + 8 | 0; //@line 11815
 $9 = sp + 20 | 0; //@line 11816
 HEAP32[$5 >> 2] = $1; //@line 11817
 $10 = ($0 | 0) != 0; //@line 11818
 $11 = $7 + 40 | 0; //@line 11819
 $12 = $11; //@line 11820
 $13 = $7 + 39 | 0; //@line 11821
 $14 = $8 + 4 | 0; //@line 11822
 $$0243 = 0; //@line 11823
 $$0247 = 0; //@line 11823
 $$0269 = 0; //@line 11823
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 11832
     $$1248 = -1; //@line 11833
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 11837
     break;
    }
   } else {
    $$1248 = $$0247; //@line 11841
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 11844
  $21 = HEAP8[$20 >> 0] | 0; //@line 11845
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 11848
   break;
  } else {
   $23 = $21; //@line 11851
   $25 = $20; //@line 11851
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 11856
     $27 = $25; //@line 11856
     label = 9; //@line 11857
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 11862
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 11869
   HEAP32[$5 >> 2] = $24; //@line 11870
   $23 = HEAP8[$24 >> 0] | 0; //@line 11872
   $25 = $24; //@line 11872
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 11877
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 11882
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 11885
     $27 = $27 + 2 | 0; //@line 11886
     HEAP32[$5 >> 2] = $27; //@line 11887
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 11894
      break;
     } else {
      $$0249303 = $30; //@line 11891
      label = 9; //@line 11892
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 11902
  if ($10) {
   _out_670($0, $20, $36); //@line 11904
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 11908
   $$0247 = $$1248; //@line 11908
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 11916
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 11917
  if ($43) {
   $$0253 = -1; //@line 11919
   $$1270 = $$0269; //@line 11919
   $$sink = 1; //@line 11919
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 11929
    $$1270 = 1; //@line 11929
    $$sink = 3; //@line 11929
   } else {
    $$0253 = -1; //@line 11931
    $$1270 = $$0269; //@line 11931
    $$sink = 1; //@line 11931
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 11934
  HEAP32[$5 >> 2] = $51; //@line 11935
  $52 = HEAP8[$51 >> 0] | 0; //@line 11936
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 11938
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 11945
   $$lcssa291 = $52; //@line 11945
   $$lcssa292 = $51; //@line 11945
  } else {
   $$0262309 = 0; //@line 11947
   $60 = $52; //@line 11947
   $65 = $51; //@line 11947
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 11952
    $64 = $65 + 1 | 0; //@line 11953
    HEAP32[$5 >> 2] = $64; //@line 11954
    $66 = HEAP8[$64 >> 0] | 0; //@line 11955
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 11957
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 11964
     $$lcssa291 = $66; //@line 11964
     $$lcssa292 = $64; //@line 11964
     break;
    } else {
     $$0262309 = $63; //@line 11967
     $60 = $66; //@line 11967
     $65 = $64; //@line 11967
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 11979
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 11981
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 11986
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 11991
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 12003
     $$2271 = 1; //@line 12003
     $storemerge274 = $79 + 3 | 0; //@line 12003
    } else {
     label = 23; //@line 12005
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 12009
    if ($$1270 | 0) {
     $$0 = -1; //@line 12012
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12027
     $106 = HEAP32[$105 >> 2] | 0; //@line 12028
     HEAP32[$2 >> 2] = $105 + 4; //@line 12030
     $363 = $106; //@line 12031
    } else {
     $363 = 0; //@line 12033
    }
    $$0259 = $363; //@line 12037
    $$2271 = 0; //@line 12037
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 12037
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 12039
   $109 = ($$0259 | 0) < 0; //@line 12040
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 12045
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 12045
   $$3272 = $$2271; //@line 12045
   $115 = $storemerge274; //@line 12045
  } else {
   $112 = _getint_671($5) | 0; //@line 12047
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 12050
    break;
   }
   $$1260 = $112; //@line 12054
   $$1263 = $$0262$lcssa; //@line 12054
   $$3272 = $$1270; //@line 12054
   $115 = HEAP32[$5 >> 2] | 0; //@line 12054
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 12065
     $156 = _getint_671($5) | 0; //@line 12066
     $$0254 = $156; //@line 12068
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 12068
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 12077
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 12082
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 12087
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 12094
      $144 = $125 + 4 | 0; //@line 12098
      HEAP32[$5 >> 2] = $144; //@line 12099
      $$0254 = $140; //@line 12100
      $$pre345 = $144; //@line 12100
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 12106
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12121
     $152 = HEAP32[$151 >> 2] | 0; //@line 12122
     HEAP32[$2 >> 2] = $151 + 4; //@line 12124
     $364 = $152; //@line 12125
    } else {
     $364 = 0; //@line 12127
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 12130
    HEAP32[$5 >> 2] = $154; //@line 12131
    $$0254 = $364; //@line 12132
    $$pre345 = $154; //@line 12132
   } else {
    $$0254 = -1; //@line 12134
    $$pre345 = $115; //@line 12134
   }
  } while (0);
  $$0252 = 0; //@line 12137
  $158 = $$pre345; //@line 12137
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 12144
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 12147
   HEAP32[$5 >> 2] = $158; //@line 12148
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (16265 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 12153
   $168 = $167 & 255; //@line 12154
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 12158
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 12165
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 12169
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 12173
     break L1;
    } else {
     label = 50; //@line 12176
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 12181
     $176 = $3 + ($$0253 << 3) | 0; //@line 12183
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 12188
     $182 = $6; //@line 12189
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 12191
     HEAP32[$182 + 4 >> 2] = $181; //@line 12194
     label = 50; //@line 12195
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 12199
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 12202
    $187 = HEAP32[$5 >> 2] | 0; //@line 12204
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 12208
   if ($10) {
    $187 = $158; //@line 12210
   } else {
    $$0243 = 0; //@line 12212
    $$0247 = $$1248; //@line 12212
    $$0269 = $$3272; //@line 12212
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 12218
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 12224
  $196 = $$1263 & -65537; //@line 12227
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 12228
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12236
       $$0243 = 0; //@line 12237
       $$0247 = $$1248; //@line 12237
       $$0269 = $$3272; //@line 12237
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12243
       $$0243 = 0; //@line 12244
       $$0247 = $$1248; //@line 12244
       $$0269 = $$3272; //@line 12244
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 12252
       HEAP32[$208 >> 2] = $$1248; //@line 12254
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 12257
       $$0243 = 0; //@line 12258
       $$0247 = $$1248; //@line 12258
       $$0269 = $$3272; //@line 12258
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 12265
       $$0243 = 0; //@line 12266
       $$0247 = $$1248; //@line 12266
       $$0269 = $$3272; //@line 12266
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 12273
       $$0243 = 0; //@line 12274
       $$0247 = $$1248; //@line 12274
       $$0269 = $$3272; //@line 12274
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12280
       $$0243 = 0; //@line 12281
       $$0247 = $$1248; //@line 12281
       $$0269 = $$3272; //@line 12281
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 12289
       HEAP32[$220 >> 2] = $$1248; //@line 12291
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 12294
       $$0243 = 0; //@line 12295
       $$0247 = $$1248; //@line 12295
       $$0269 = $$3272; //@line 12295
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 12300
       $$0247 = $$1248; //@line 12300
       $$0269 = $$3272; //@line 12300
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 12310
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 12310
     $$3265 = $$1263$ | 8; //@line 12310
     label = 62; //@line 12311
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 12315
     $$1255 = $$0254; //@line 12315
     $$3265 = $$1263$; //@line 12315
     label = 62; //@line 12316
     break;
    }
   case 111:
    {
     $242 = $6; //@line 12320
     $244 = HEAP32[$242 >> 2] | 0; //@line 12322
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 12325
     $248 = _fmt_o($244, $247, $11) | 0; //@line 12326
     $252 = $12 - $248 | 0; //@line 12330
     $$0228 = $248; //@line 12335
     $$1233 = 0; //@line 12335
     $$1238 = 16729; //@line 12335
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 12335
     $$4266 = $$1263$; //@line 12335
     $281 = $244; //@line 12335
     $283 = $247; //@line 12335
     label = 68; //@line 12336
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 12340
     $258 = HEAP32[$256 >> 2] | 0; //@line 12342
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 12345
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 12348
      $264 = tempRet0; //@line 12349
      $265 = $6; //@line 12350
      HEAP32[$265 >> 2] = $263; //@line 12352
      HEAP32[$265 + 4 >> 2] = $264; //@line 12355
      $$0232 = 1; //@line 12356
      $$0237 = 16729; //@line 12356
      $275 = $263; //@line 12356
      $276 = $264; //@line 12356
      label = 67; //@line 12357
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 12369
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 16729 : 16731 : 16730; //@line 12369
      $275 = $258; //@line 12369
      $276 = $261; //@line 12369
      label = 67; //@line 12370
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 12376
     $$0232 = 0; //@line 12382
     $$0237 = 16729; //@line 12382
     $275 = HEAP32[$197 >> 2] | 0; //@line 12382
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 12382
     label = 67; //@line 12383
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 12394
     $$2 = $13; //@line 12395
     $$2234 = 0; //@line 12395
     $$2239 = 16729; //@line 12395
     $$2251 = $11; //@line 12395
     $$5 = 1; //@line 12395
     $$6268 = $196; //@line 12395
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 12402
     label = 72; //@line 12403
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 12407
     $$1 = $302 | 0 ? $302 : 16739; //@line 12410
     label = 72; //@line 12411
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 12421
     HEAP32[$14 >> 2] = 0; //@line 12422
     HEAP32[$6 >> 2] = $8; //@line 12423
     $$4258354 = -1; //@line 12424
     $365 = $8; //@line 12424
     label = 76; //@line 12425
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 12429
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 12432
      $$0240$lcssa356 = 0; //@line 12433
      label = 85; //@line 12434
     } else {
      $$4258354 = $$0254; //@line 12436
      $365 = $$pre348; //@line 12436
      label = 76; //@line 12437
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 12444
     $$0247 = $$1248; //@line 12444
     $$0269 = $$3272; //@line 12444
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 12449
     $$2234 = 0; //@line 12449
     $$2239 = 16729; //@line 12449
     $$2251 = $11; //@line 12449
     $$5 = $$0254; //@line 12449
     $$6268 = $$1263$; //@line 12449
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 12455
    $227 = $6; //@line 12456
    $229 = HEAP32[$227 >> 2] | 0; //@line 12458
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 12461
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 12463
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 12469
    $$0228 = $234; //@line 12474
    $$1233 = $or$cond278 ? 0 : 2; //@line 12474
    $$1238 = $or$cond278 ? 16729 : 16729 + ($$1236 >> 4) | 0; //@line 12474
    $$2256 = $$1255; //@line 12474
    $$4266 = $$3265; //@line 12474
    $281 = $229; //@line 12474
    $283 = $232; //@line 12474
    label = 68; //@line 12475
   } else if ((label | 0) == 67) {
    label = 0; //@line 12478
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 12480
    $$1233 = $$0232; //@line 12480
    $$1238 = $$0237; //@line 12480
    $$2256 = $$0254; //@line 12480
    $$4266 = $$1263$; //@line 12480
    $281 = $275; //@line 12480
    $283 = $276; //@line 12480
    label = 68; //@line 12481
   } else if ((label | 0) == 72) {
    label = 0; //@line 12484
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 12485
    $306 = ($305 | 0) == 0; //@line 12486
    $$2 = $$1; //@line 12493
    $$2234 = 0; //@line 12493
    $$2239 = 16729; //@line 12493
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 12493
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 12493
    $$6268 = $196; //@line 12493
   } else if ((label | 0) == 76) {
    label = 0; //@line 12496
    $$0229316 = $365; //@line 12497
    $$0240315 = 0; //@line 12497
    $$1244314 = 0; //@line 12497
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 12499
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 12502
      $$2245 = $$1244314; //@line 12502
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 12505
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 12511
      $$2245 = $320; //@line 12511
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 12515
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 12518
      $$0240315 = $325; //@line 12518
      $$1244314 = $320; //@line 12518
     } else {
      $$0240$lcssa = $325; //@line 12520
      $$2245 = $320; //@line 12520
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 12526
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 12529
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 12532
     label = 85; //@line 12533
    } else {
     $$1230327 = $365; //@line 12535
     $$1241326 = 0; //@line 12535
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 12537
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 12540
       label = 85; //@line 12541
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 12544
      $$1241326 = $331 + $$1241326 | 0; //@line 12545
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 12548
       label = 85; //@line 12549
       break L97;
      }
      _out_670($0, $9, $331); //@line 12553
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 12558
       label = 85; //@line 12559
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 12556
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 12567
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 12573
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 12575
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 12580
   $$2 = $or$cond ? $$0228 : $11; //@line 12585
   $$2234 = $$1233; //@line 12585
   $$2239 = $$1238; //@line 12585
   $$2251 = $11; //@line 12585
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 12585
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 12585
  } else if ((label | 0) == 85) {
   label = 0; //@line 12588
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 12590
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 12593
   $$0247 = $$1248; //@line 12593
   $$0269 = $$3272; //@line 12593
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 12598
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 12600
  $345 = $$$5 + $$2234 | 0; //@line 12601
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 12603
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 12604
  _out_670($0, $$2239, $$2234); //@line 12605
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 12607
  _pad_676($0, 48, $$$5, $343, 0); //@line 12608
  _out_670($0, $$2, $343); //@line 12609
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 12611
  $$0243 = $$2261; //@line 12612
  $$0247 = $$1248; //@line 12612
  $$0269 = $$3272; //@line 12612
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 12620
    } else {
     $$2242302 = 1; //@line 12622
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 12625
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 12628
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 12632
      $356 = $$2242302 + 1 | 0; //@line 12633
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 12636
      } else {
       $$2242$lcssa = $356; //@line 12638
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 12644
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 12650
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 12656
       } else {
        $$0 = 1; //@line 12658
        break;
       }
      }
     } else {
      $$0 = 1; //@line 12663
     }
    }
   } else {
    $$0 = $$1248; //@line 12667
   }
  }
 } while (0);
 STACKTOP = sp; //@line 12671
 return $$0 | 0; //@line 12671
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_325($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $32 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $51 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 14550
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14552
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14554
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14556
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14558
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14560
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14562
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14564
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14566
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14568
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 14570
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 14572
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 14574
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 14576
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 14578
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 14582
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 14586
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 14588
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 14590
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 14592
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 14594
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 14596
 _emscripten_asm_const_i(2) | 0; //@line 14597
 HEAP8[$2 + 688 >> 0] = 1; //@line 14599
 if (HEAP8[$24 >> 0] | 0) {
  $51 = _emscripten_asm_const_i(3) | 0; //@line 14603
  $54 = $51 - (HEAP32[$2 + 784 >> 2] | 0) | 0; //@line 14606
  _printf(10904, $28) | 0; //@line 14607
  HEAP32[$32 >> 2] = $54; //@line 14608
  _printf(11364, $32) | 0; //@line 14609
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(16) | 0; //@line 14610
  _putchar(10) | 0; //@line 14611
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 69; //@line 14614
   $55 = $ReallocAsyncCtx11 + 4 | 0; //@line 14615
   HEAP32[$55 >> 2] = $24; //@line 14616
   $56 = $ReallocAsyncCtx11 + 8 | 0; //@line 14617
   HEAP32[$56 >> 2] = $2; //@line 14618
   $57 = $ReallocAsyncCtx11 + 12 | 0; //@line 14619
   HEAP32[$57 >> 2] = $26; //@line 14620
   sp = STACKTOP; //@line 14621
   return;
  }
  ___async_unwind = 0; //@line 14624
  HEAP32[$ReallocAsyncCtx11 >> 2] = 69; //@line 14625
  $55 = $ReallocAsyncCtx11 + 4 | 0; //@line 14626
  HEAP32[$55 >> 2] = $24; //@line 14627
  $56 = $ReallocAsyncCtx11 + 8 | 0; //@line 14628
  HEAP32[$56 >> 2] = $2; //@line 14629
  $57 = $ReallocAsyncCtx11 + 12 | 0; //@line 14630
  HEAP32[$57 >> 2] = $26; //@line 14631
  sp = STACKTOP; //@line 14632
  return;
 }
 if ($6 | 0) {
  $59 = $2 + 1112 | 0; //@line 14637
  $60 = $4 + 12 | 0; //@line 14638
  HEAP32[$4 >> 2] = 74; //@line 14639
  HEAP32[$4 + 4 >> 2] = 0; //@line 14641
  HEAP32[$4 + 8 >> 2] = $2; //@line 14643
  HEAP32[$60 >> 2] = 648; //@line 14644
  $61 = ___muldi3($6 | 0, 0, 1e3, 0) | 0; //@line 14645
  $62 = tempRet0; //@line 14646
  $63 = $2 + 1152 | 0; //@line 14647
  do {
   if (($63 | 0) != ($4 | 0)) {
    $65 = $2 + 1164 | 0; //@line 14651
    $66 = HEAP32[$65 >> 2] | 0; //@line 14652
    if ($66 | 0) {
     $69 = HEAP32[$66 + 8 >> 2] | 0; //@line 14656
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(96) | 0; //@line 14657
     FUNCTION_TABLE_vi[$69 & 1023]($63); //@line 14658
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 75; //@line 14661
      $70 = $ReallocAsyncCtx4 + 4 | 0; //@line 14662
      HEAP32[$70 >> 2] = $4; //@line 14663
      $71 = $ReallocAsyncCtx4 + 8 | 0; //@line 14664
      HEAP32[$71 >> 2] = $2; //@line 14665
      $72 = $ReallocAsyncCtx4 + 12 | 0; //@line 14666
      HEAP32[$72 >> 2] = $59; //@line 14667
      $73 = $ReallocAsyncCtx4 + 16 | 0; //@line 14668
      $74 = $73; //@line 14669
      $75 = $74; //@line 14670
      HEAP32[$75 >> 2] = $61; //@line 14671
      $76 = $74 + 4 | 0; //@line 14672
      $77 = $76; //@line 14673
      HEAP32[$77 >> 2] = $62; //@line 14674
      $78 = $ReallocAsyncCtx4 + 24 | 0; //@line 14675
      HEAP32[$78 >> 2] = $60; //@line 14676
      $79 = $ReallocAsyncCtx4 + 28 | 0; //@line 14677
      HEAP32[$79 >> 2] = $8; //@line 14678
      $80 = $ReallocAsyncCtx4 + 32 | 0; //@line 14679
      HEAP32[$80 >> 2] = $10; //@line 14680
      $81 = $ReallocAsyncCtx4 + 36 | 0; //@line 14681
      HEAP32[$81 >> 2] = $12; //@line 14682
      $82 = $ReallocAsyncCtx4 + 40 | 0; //@line 14683
      HEAP32[$82 >> 2] = $14; //@line 14684
      $83 = $ReallocAsyncCtx4 + 44 | 0; //@line 14685
      HEAP32[$83 >> 2] = $16; //@line 14686
      $84 = $ReallocAsyncCtx4 + 48 | 0; //@line 14687
      HEAP32[$84 >> 2] = $18; //@line 14688
      $85 = $ReallocAsyncCtx4 + 52 | 0; //@line 14689
      HEAP32[$85 >> 2] = $20; //@line 14690
      $86 = $ReallocAsyncCtx4 + 56 | 0; //@line 14691
      HEAP32[$86 >> 2] = $22; //@line 14692
      $87 = $ReallocAsyncCtx4 + 60 | 0; //@line 14693
      HEAP32[$87 >> 2] = $65; //@line 14694
      $88 = $ReallocAsyncCtx4 + 64 | 0; //@line 14695
      HEAP32[$88 >> 2] = $63; //@line 14696
      $89 = $ReallocAsyncCtx4 + 68 | 0; //@line 14697
      HEAP32[$89 >> 2] = $36; //@line 14698
      $90 = $ReallocAsyncCtx4 + 72 | 0; //@line 14699
      HEAP32[$90 >> 2] = $38; //@line 14700
      $91 = $ReallocAsyncCtx4 + 76 | 0; //@line 14701
      HEAP32[$91 >> 2] = $40; //@line 14702
      $92 = $ReallocAsyncCtx4 + 80 | 0; //@line 14703
      HEAP32[$92 >> 2] = $42; //@line 14704
      $93 = $ReallocAsyncCtx4 + 84 | 0; //@line 14705
      HEAP32[$93 >> 2] = $44; //@line 14706
      $94 = $ReallocAsyncCtx4 + 88 | 0; //@line 14707
      HEAP32[$94 >> 2] = $46; //@line 14708
      sp = STACKTOP; //@line 14709
      return;
     }
     ___async_unwind = 0; //@line 14712
     HEAP32[$ReallocAsyncCtx4 >> 2] = 75; //@line 14713
     $70 = $ReallocAsyncCtx4 + 4 | 0; //@line 14714
     HEAP32[$70 >> 2] = $4; //@line 14715
     $71 = $ReallocAsyncCtx4 + 8 | 0; //@line 14716
     HEAP32[$71 >> 2] = $2; //@line 14717
     $72 = $ReallocAsyncCtx4 + 12 | 0; //@line 14718
     HEAP32[$72 >> 2] = $59; //@line 14719
     $73 = $ReallocAsyncCtx4 + 16 | 0; //@line 14720
     $74 = $73; //@line 14721
     $75 = $74; //@line 14722
     HEAP32[$75 >> 2] = $61; //@line 14723
     $76 = $74 + 4 | 0; //@line 14724
     $77 = $76; //@line 14725
     HEAP32[$77 >> 2] = $62; //@line 14726
     $78 = $ReallocAsyncCtx4 + 24 | 0; //@line 14727
     HEAP32[$78 >> 2] = $60; //@line 14728
     $79 = $ReallocAsyncCtx4 + 28 | 0; //@line 14729
     HEAP32[$79 >> 2] = $8; //@line 14730
     $80 = $ReallocAsyncCtx4 + 32 | 0; //@line 14731
     HEAP32[$80 >> 2] = $10; //@line 14732
     $81 = $ReallocAsyncCtx4 + 36 | 0; //@line 14733
     HEAP32[$81 >> 2] = $12; //@line 14734
     $82 = $ReallocAsyncCtx4 + 40 | 0; //@line 14735
     HEAP32[$82 >> 2] = $14; //@line 14736
     $83 = $ReallocAsyncCtx4 + 44 | 0; //@line 14737
     HEAP32[$83 >> 2] = $16; //@line 14738
     $84 = $ReallocAsyncCtx4 + 48 | 0; //@line 14739
     HEAP32[$84 >> 2] = $18; //@line 14740
     $85 = $ReallocAsyncCtx4 + 52 | 0; //@line 14741
     HEAP32[$85 >> 2] = $20; //@line 14742
     $86 = $ReallocAsyncCtx4 + 56 | 0; //@line 14743
     HEAP32[$86 >> 2] = $22; //@line 14744
     $87 = $ReallocAsyncCtx4 + 60 | 0; //@line 14745
     HEAP32[$87 >> 2] = $65; //@line 14746
     $88 = $ReallocAsyncCtx4 + 64 | 0; //@line 14747
     HEAP32[$88 >> 2] = $63; //@line 14748
     $89 = $ReallocAsyncCtx4 + 68 | 0; //@line 14749
     HEAP32[$89 >> 2] = $36; //@line 14750
     $90 = $ReallocAsyncCtx4 + 72 | 0; //@line 14751
     HEAP32[$90 >> 2] = $38; //@line 14752
     $91 = $ReallocAsyncCtx4 + 76 | 0; //@line 14753
     HEAP32[$91 >> 2] = $40; //@line 14754
     $92 = $ReallocAsyncCtx4 + 80 | 0; //@line 14755
     HEAP32[$92 >> 2] = $42; //@line 14756
     $93 = $ReallocAsyncCtx4 + 84 | 0; //@line 14757
     HEAP32[$93 >> 2] = $44; //@line 14758
     $94 = $ReallocAsyncCtx4 + 88 | 0; //@line 14759
     HEAP32[$94 >> 2] = $46; //@line 14760
     sp = STACKTOP; //@line 14761
     return;
    }
    $95 = HEAP32[$60 >> 2] | 0; //@line 14764
    if (!$95) {
     HEAP32[$65 >> 2] = 0; //@line 14767
     break;
    }
    $98 = HEAP32[$95 + 4 >> 2] | 0; //@line 14771
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(88) | 0; //@line 14772
    FUNCTION_TABLE_vii[$98 & 31]($63, $4); //@line 14773
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 76; //@line 14776
     $99 = $ReallocAsyncCtx5 + 4 | 0; //@line 14777
     HEAP32[$99 >> 2] = $4; //@line 14778
     $100 = $ReallocAsyncCtx5 + 8 | 0; //@line 14779
     HEAP32[$100 >> 2] = $2; //@line 14780
     $101 = $ReallocAsyncCtx5 + 12 | 0; //@line 14781
     HEAP32[$101 >> 2] = $59; //@line 14782
     $102 = $ReallocAsyncCtx5 + 16 | 0; //@line 14783
     $103 = $102; //@line 14784
     $104 = $103; //@line 14785
     HEAP32[$104 >> 2] = $61; //@line 14786
     $105 = $103 + 4 | 0; //@line 14787
     $106 = $105; //@line 14788
     HEAP32[$106 >> 2] = $62; //@line 14789
     $107 = $ReallocAsyncCtx5 + 24 | 0; //@line 14790
     HEAP32[$107 >> 2] = $60; //@line 14791
     $108 = $ReallocAsyncCtx5 + 28 | 0; //@line 14792
     HEAP32[$108 >> 2] = $8; //@line 14793
     $109 = $ReallocAsyncCtx5 + 32 | 0; //@line 14794
     HEAP32[$109 >> 2] = $10; //@line 14795
     $110 = $ReallocAsyncCtx5 + 36 | 0; //@line 14796
     HEAP32[$110 >> 2] = $12; //@line 14797
     $111 = $ReallocAsyncCtx5 + 40 | 0; //@line 14798
     HEAP32[$111 >> 2] = $14; //@line 14799
     $112 = $ReallocAsyncCtx5 + 44 | 0; //@line 14800
     HEAP32[$112 >> 2] = $16; //@line 14801
     $113 = $ReallocAsyncCtx5 + 48 | 0; //@line 14802
     HEAP32[$113 >> 2] = $18; //@line 14803
     $114 = $ReallocAsyncCtx5 + 52 | 0; //@line 14804
     HEAP32[$114 >> 2] = $20; //@line 14805
     $115 = $ReallocAsyncCtx5 + 56 | 0; //@line 14806
     HEAP32[$115 >> 2] = $22; //@line 14807
     $116 = $ReallocAsyncCtx5 + 60 | 0; //@line 14808
     HEAP32[$116 >> 2] = $65; //@line 14809
     $117 = $ReallocAsyncCtx5 + 64 | 0; //@line 14810
     HEAP32[$117 >> 2] = $36; //@line 14811
     $118 = $ReallocAsyncCtx5 + 68 | 0; //@line 14812
     HEAP32[$118 >> 2] = $38; //@line 14813
     $119 = $ReallocAsyncCtx5 + 72 | 0; //@line 14814
     HEAP32[$119 >> 2] = $40; //@line 14815
     $120 = $ReallocAsyncCtx5 + 76 | 0; //@line 14816
     HEAP32[$120 >> 2] = $42; //@line 14817
     $121 = $ReallocAsyncCtx5 + 80 | 0; //@line 14818
     HEAP32[$121 >> 2] = $44; //@line 14819
     $122 = $ReallocAsyncCtx5 + 84 | 0; //@line 14820
     HEAP32[$122 >> 2] = $46; //@line 14821
     sp = STACKTOP; //@line 14822
     return;
    }
    ___async_unwind = 0; //@line 14825
    HEAP32[$ReallocAsyncCtx5 >> 2] = 76; //@line 14826
    $99 = $ReallocAsyncCtx5 + 4 | 0; //@line 14827
    HEAP32[$99 >> 2] = $4; //@line 14828
    $100 = $ReallocAsyncCtx5 + 8 | 0; //@line 14829
    HEAP32[$100 >> 2] = $2; //@line 14830
    $101 = $ReallocAsyncCtx5 + 12 | 0; //@line 14831
    HEAP32[$101 >> 2] = $59; //@line 14832
    $102 = $ReallocAsyncCtx5 + 16 | 0; //@line 14833
    $103 = $102; //@line 14834
    $104 = $103; //@line 14835
    HEAP32[$104 >> 2] = $61; //@line 14836
    $105 = $103 + 4 | 0; //@line 14837
    $106 = $105; //@line 14838
    HEAP32[$106 >> 2] = $62; //@line 14839
    $107 = $ReallocAsyncCtx5 + 24 | 0; //@line 14840
    HEAP32[$107 >> 2] = $60; //@line 14841
    $108 = $ReallocAsyncCtx5 + 28 | 0; //@line 14842
    HEAP32[$108 >> 2] = $8; //@line 14843
    $109 = $ReallocAsyncCtx5 + 32 | 0; //@line 14844
    HEAP32[$109 >> 2] = $10; //@line 14845
    $110 = $ReallocAsyncCtx5 + 36 | 0; //@line 14846
    HEAP32[$110 >> 2] = $12; //@line 14847
    $111 = $ReallocAsyncCtx5 + 40 | 0; //@line 14848
    HEAP32[$111 >> 2] = $14; //@line 14849
    $112 = $ReallocAsyncCtx5 + 44 | 0; //@line 14850
    HEAP32[$112 >> 2] = $16; //@line 14851
    $113 = $ReallocAsyncCtx5 + 48 | 0; //@line 14852
    HEAP32[$113 >> 2] = $18; //@line 14853
    $114 = $ReallocAsyncCtx5 + 52 | 0; //@line 14854
    HEAP32[$114 >> 2] = $20; //@line 14855
    $115 = $ReallocAsyncCtx5 + 56 | 0; //@line 14856
    HEAP32[$115 >> 2] = $22; //@line 14857
    $116 = $ReallocAsyncCtx5 + 60 | 0; //@line 14858
    HEAP32[$116 >> 2] = $65; //@line 14859
    $117 = $ReallocAsyncCtx5 + 64 | 0; //@line 14860
    HEAP32[$117 >> 2] = $36; //@line 14861
    $118 = $ReallocAsyncCtx5 + 68 | 0; //@line 14862
    HEAP32[$118 >> 2] = $38; //@line 14863
    $119 = $ReallocAsyncCtx5 + 72 | 0; //@line 14864
    HEAP32[$119 >> 2] = $40; //@line 14865
    $120 = $ReallocAsyncCtx5 + 76 | 0; //@line 14866
    HEAP32[$120 >> 2] = $42; //@line 14867
    $121 = $ReallocAsyncCtx5 + 80 | 0; //@line 14868
    HEAP32[$121 >> 2] = $44; //@line 14869
    $122 = $ReallocAsyncCtx5 + 84 | 0; //@line 14870
    HEAP32[$122 >> 2] = $46; //@line 14871
    sp = STACKTOP; //@line 14872
    return;
   }
  } while (0);
  __ZN4mbed6Ticker5setupEy($59, $61, $62); //@line 14876
  $123 = HEAP32[$60 >> 2] | 0; //@line 14877
  if ($123 | 0) {
   $126 = HEAP32[$123 + 8 >> 2] | 0; //@line 14881
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 14882
   FUNCTION_TABLE_vi[$126 & 1023]($4); //@line 14883
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 77; //@line 14886
    $127 = $ReallocAsyncCtx6 + 4 | 0; //@line 14887
    HEAP32[$127 >> 2] = $2; //@line 14888
    $128 = $ReallocAsyncCtx6 + 8 | 0; //@line 14889
    HEAP32[$128 >> 2] = $8; //@line 14890
    $129 = $ReallocAsyncCtx6 + 12 | 0; //@line 14891
    HEAP32[$129 >> 2] = $10; //@line 14892
    $130 = $ReallocAsyncCtx6 + 16 | 0; //@line 14893
    HEAP32[$130 >> 2] = $12; //@line 14894
    $131 = $ReallocAsyncCtx6 + 20 | 0; //@line 14895
    HEAP32[$131 >> 2] = $14; //@line 14896
    $132 = $ReallocAsyncCtx6 + 24 | 0; //@line 14897
    HEAP32[$132 >> 2] = $16; //@line 14898
    $133 = $ReallocAsyncCtx6 + 28 | 0; //@line 14899
    HEAP32[$133 >> 2] = $18; //@line 14900
    $134 = $ReallocAsyncCtx6 + 32 | 0; //@line 14901
    HEAP32[$134 >> 2] = $20; //@line 14902
    $135 = $ReallocAsyncCtx6 + 36 | 0; //@line 14903
    HEAP32[$135 >> 2] = $22; //@line 14904
    $136 = $ReallocAsyncCtx6 + 40 | 0; //@line 14905
    HEAP32[$136 >> 2] = $36; //@line 14906
    $137 = $ReallocAsyncCtx6 + 44 | 0; //@line 14907
    HEAP32[$137 >> 2] = $38; //@line 14908
    $138 = $ReallocAsyncCtx6 + 48 | 0; //@line 14909
    HEAP32[$138 >> 2] = $40; //@line 14910
    $139 = $ReallocAsyncCtx6 + 52 | 0; //@line 14911
    HEAP32[$139 >> 2] = $42; //@line 14912
    $140 = $ReallocAsyncCtx6 + 56 | 0; //@line 14913
    HEAP32[$140 >> 2] = $44; //@line 14914
    $141 = $ReallocAsyncCtx6 + 60 | 0; //@line 14915
    HEAP32[$141 >> 2] = $46; //@line 14916
    sp = STACKTOP; //@line 14917
    return;
   }
   ___async_unwind = 0; //@line 14920
   HEAP32[$ReallocAsyncCtx6 >> 2] = 77; //@line 14921
   $127 = $ReallocAsyncCtx6 + 4 | 0; //@line 14922
   HEAP32[$127 >> 2] = $2; //@line 14923
   $128 = $ReallocAsyncCtx6 + 8 | 0; //@line 14924
   HEAP32[$128 >> 2] = $8; //@line 14925
   $129 = $ReallocAsyncCtx6 + 12 | 0; //@line 14926
   HEAP32[$129 >> 2] = $10; //@line 14927
   $130 = $ReallocAsyncCtx6 + 16 | 0; //@line 14928
   HEAP32[$130 >> 2] = $12; //@line 14929
   $131 = $ReallocAsyncCtx6 + 20 | 0; //@line 14930
   HEAP32[$131 >> 2] = $14; //@line 14931
   $132 = $ReallocAsyncCtx6 + 24 | 0; //@line 14932
   HEAP32[$132 >> 2] = $16; //@line 14933
   $133 = $ReallocAsyncCtx6 + 28 | 0; //@line 14934
   HEAP32[$133 >> 2] = $18; //@line 14935
   $134 = $ReallocAsyncCtx6 + 32 | 0; //@line 14936
   HEAP32[$134 >> 2] = $20; //@line 14937
   $135 = $ReallocAsyncCtx6 + 36 | 0; //@line 14938
   HEAP32[$135 >> 2] = $22; //@line 14939
   $136 = $ReallocAsyncCtx6 + 40 | 0; //@line 14940
   HEAP32[$136 >> 2] = $36; //@line 14941
   $137 = $ReallocAsyncCtx6 + 44 | 0; //@line 14942
   HEAP32[$137 >> 2] = $38; //@line 14943
   $138 = $ReallocAsyncCtx6 + 48 | 0; //@line 14944
   HEAP32[$138 >> 2] = $40; //@line 14945
   $139 = $ReallocAsyncCtx6 + 52 | 0; //@line 14946
   HEAP32[$139 >> 2] = $42; //@line 14947
   $140 = $ReallocAsyncCtx6 + 56 | 0; //@line 14948
   HEAP32[$140 >> 2] = $44; //@line 14949
   $141 = $ReallocAsyncCtx6 + 60 | 0; //@line 14950
   HEAP32[$141 >> 2] = $46; //@line 14951
   sp = STACKTOP; //@line 14952
   return;
  }
 }
 $144 = (HEAP8[$2 + 770 >> 0] | 0) == 0; //@line 14958
 _printf(10904, $40) | 0; //@line 14959
 if ($144) {
  HEAP32[$36 >> 2] = 6; //@line 14961
  _printf(10970, $36) | 0; //@line 14962
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 14963
  _putchar(10) | 0; //@line 14964
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 81; //@line 14967
   $150 = $ReallocAsyncCtx8 + 4 | 0; //@line 14968
   HEAP32[$150 >> 2] = $2; //@line 14969
   $151 = $ReallocAsyncCtx8 + 8 | 0; //@line 14970
   HEAP32[$151 >> 2] = $16; //@line 14971
   $152 = $ReallocAsyncCtx8 + 12 | 0; //@line 14972
   HEAP32[$152 >> 2] = $18; //@line 14973
   $153 = $ReallocAsyncCtx8 + 16 | 0; //@line 14974
   HEAP32[$153 >> 2] = $20; //@line 14975
   $154 = $ReallocAsyncCtx8 + 20 | 0; //@line 14976
   HEAP32[$154 >> 2] = $22; //@line 14977
   sp = STACKTOP; //@line 14978
   return;
  }
  ___async_unwind = 0; //@line 14981
  HEAP32[$ReallocAsyncCtx8 >> 2] = 81; //@line 14982
  $150 = $ReallocAsyncCtx8 + 4 | 0; //@line 14983
  HEAP32[$150 >> 2] = $2; //@line 14984
  $151 = $ReallocAsyncCtx8 + 8 | 0; //@line 14985
  HEAP32[$151 >> 2] = $16; //@line 14986
  $152 = $ReallocAsyncCtx8 + 12 | 0; //@line 14987
  HEAP32[$152 >> 2] = $18; //@line 14988
  $153 = $ReallocAsyncCtx8 + 16 | 0; //@line 14989
  HEAP32[$153 >> 2] = $20; //@line 14990
  $154 = $ReallocAsyncCtx8 + 20 | 0; //@line 14991
  HEAP32[$154 >> 2] = $22; //@line 14992
  sp = STACKTOP; //@line 14993
  return;
 } else {
  HEAP32[$44 >> 2] = 5; //@line 14996
  _printf(10970, $44) | 0; //@line 14997
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 14998
  _putchar(10) | 0; //@line 14999
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 78; //@line 15002
   $145 = $ReallocAsyncCtx10 + 4 | 0; //@line 15003
   HEAP32[$145 >> 2] = $2; //@line 15004
   $146 = $ReallocAsyncCtx10 + 8 | 0; //@line 15005
   HEAP32[$146 >> 2] = $8; //@line 15006
   $147 = $ReallocAsyncCtx10 + 12 | 0; //@line 15007
   HEAP32[$147 >> 2] = $10; //@line 15008
   $148 = $ReallocAsyncCtx10 + 16 | 0; //@line 15009
   HEAP32[$148 >> 2] = $12; //@line 15010
   $149 = $ReallocAsyncCtx10 + 20 | 0; //@line 15011
   HEAP32[$149 >> 2] = $14; //@line 15012
   sp = STACKTOP; //@line 15013
   return;
  }
  ___async_unwind = 0; //@line 15016
  HEAP32[$ReallocAsyncCtx10 >> 2] = 78; //@line 15017
  $145 = $ReallocAsyncCtx10 + 4 | 0; //@line 15018
  HEAP32[$145 >> 2] = $2; //@line 15019
  $146 = $ReallocAsyncCtx10 + 8 | 0; //@line 15020
  HEAP32[$146 >> 2] = $8; //@line 15021
  $147 = $ReallocAsyncCtx10 + 12 | 0; //@line 15022
  HEAP32[$147 >> 2] = $10; //@line 15023
  $148 = $ReallocAsyncCtx10 + 16 | 0; //@line 15024
  HEAP32[$148 >> 2] = $12; //@line 15025
  $149 = $ReallocAsyncCtx10 + 20 | 0; //@line 15026
  HEAP32[$149 >> 2] = $14; //@line 15027
  sp = STACKTOP; //@line 15028
  return;
 }
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$off0 = 0, $162 = 0, $175 = 0, $195 = 0, $32 = 0, $58 = 0, $AsyncCtx = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx55 = 0, $AsyncCtx58 = 0, $AsyncCtx61 = 0, $AsyncCtx64 = 0, $AsyncCtx68 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1686
 STACKTOP = STACKTOP + 128 | 0; //@line 1687
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 1687
 $vararg_buffer23 = sp + 112 | 0; //@line 1688
 $vararg_buffer21 = sp + 104 | 0; //@line 1689
 $vararg_buffer19 = sp + 96 | 0; //@line 1690
 $vararg_buffer17 = sp + 88 | 0; //@line 1691
 $vararg_buffer14 = sp + 56 | 0; //@line 1692
 $vararg_buffer12 = sp + 48 | 0; //@line 1693
 $vararg_buffer9 = sp + 40 | 0; //@line 1694
 $vararg_buffer7 = sp + 32 | 0; //@line 1695
 $vararg_buffer5 = sp + 24 | 0; //@line 1696
 $vararg_buffer3 = sp + 16 | 0; //@line 1697
 _printf(10904, sp) | 0; //@line 1700
 _printf(11057, sp + 8 | 0) | 0; //@line 1701
 $AsyncCtx49 = _emscripten_alloc_async_context(108, sp) | 0; //@line 1702
 _putchar(10) | 0; //@line 1703
 if (___async) {
  HEAP32[$AsyncCtx49 >> 2] = 92; //@line 1706
  HEAP16[$AsyncCtx49 + 4 >> 1] = $3; //@line 1708
  HEAP32[$AsyncCtx49 + 8 >> 2] = $4; //@line 1710
  HEAP32[$AsyncCtx49 + 12 >> 2] = $vararg_buffer14; //@line 1712
  HEAP32[$AsyncCtx49 + 16 >> 2] = $0; //@line 1714
  HEAP32[$AsyncCtx49 + 20 >> 2] = $vararg_buffer21; //@line 1716
  HEAP32[$AsyncCtx49 + 24 >> 2] = $vararg_buffer21; //@line 1718
  HEAP32[$AsyncCtx49 + 28 >> 2] = $vararg_buffer23; //@line 1720
  HEAP32[$AsyncCtx49 + 32 >> 2] = $vararg_buffer23; //@line 1722
  HEAP32[$AsyncCtx49 + 36 >> 2] = $vararg_buffer7; //@line 1724
  HEAP32[$AsyncCtx49 + 40 >> 2] = $vararg_buffer7; //@line 1726
  HEAP32[$AsyncCtx49 + 44 >> 2] = $vararg_buffer9; //@line 1728
  HEAP32[$AsyncCtx49 + 48 >> 2] = $vararg_buffer9; //@line 1730
  HEAP32[$AsyncCtx49 + 52 >> 2] = $vararg_buffer17; //@line 1732
  HEAP32[$AsyncCtx49 + 56 >> 2] = $vararg_buffer17; //@line 1734
  HEAP32[$AsyncCtx49 + 60 >> 2] = $vararg_buffer19; //@line 1736
  HEAP32[$AsyncCtx49 + 64 >> 2] = $vararg_buffer19; //@line 1738
  HEAP32[$AsyncCtx49 + 68 >> 2] = $vararg_buffer12; //@line 1740
  HEAP32[$AsyncCtx49 + 72 >> 2] = $vararg_buffer12; //@line 1742
  HEAP32[$AsyncCtx49 + 76 >> 2] = $vararg_buffer14; //@line 1744
  HEAP32[$AsyncCtx49 + 80 >> 2] = $vararg_buffer14; //@line 1746
  HEAP32[$AsyncCtx49 + 84 >> 2] = $2; //@line 1748
  HEAP32[$AsyncCtx49 + 88 >> 2] = $1; //@line 1750
  HEAP32[$AsyncCtx49 + 92 >> 2] = $vararg_buffer3; //@line 1752
  HEAP32[$AsyncCtx49 + 96 >> 2] = $vararg_buffer3; //@line 1754
  HEAP32[$AsyncCtx49 + 100 >> 2] = $vararg_buffer5; //@line 1756
  HEAP32[$AsyncCtx49 + 104 >> 2] = $vararg_buffer5; //@line 1758
  sp = STACKTOP; //@line 1759
  STACKTOP = sp; //@line 1760
  return 0; //@line 1760
 }
 _emscripten_free_async_context($AsyncCtx49 | 0); //@line 1762
 $32 = $0 + 689 | 0; //@line 1764
 HEAP8[$32 >> 0] = $1; //@line 1765
 _printf(10904, $vararg_buffer3) | 0; //@line 1766
 HEAP32[$vararg_buffer5 >> 2] = HEAPU8[$32 >> 0]; //@line 1769
 _printf(11079, $vararg_buffer5) | 0; //@line 1770
 $AsyncCtx45 = _emscripten_alloc_async_context(88, sp) | 0; //@line 1771
 _putchar(10) | 0; //@line 1772
 if (___async) {
  HEAP32[$AsyncCtx45 >> 2] = 93; //@line 1775
  HEAP16[$AsyncCtx45 + 4 >> 1] = $3; //@line 1777
  HEAP32[$AsyncCtx45 + 8 >> 2] = $4; //@line 1779
  HEAP32[$AsyncCtx45 + 12 >> 2] = $vararg_buffer14; //@line 1781
  HEAP32[$AsyncCtx45 + 16 >> 2] = $0; //@line 1783
  HEAP32[$AsyncCtx45 + 20 >> 2] = $vararg_buffer21; //@line 1785
  HEAP32[$AsyncCtx45 + 24 >> 2] = $vararg_buffer21; //@line 1787
  HEAP32[$AsyncCtx45 + 28 >> 2] = $vararg_buffer23; //@line 1789
  HEAP32[$AsyncCtx45 + 32 >> 2] = $vararg_buffer23; //@line 1791
  HEAP32[$AsyncCtx45 + 36 >> 2] = $vararg_buffer7; //@line 1793
  HEAP32[$AsyncCtx45 + 40 >> 2] = $vararg_buffer7; //@line 1795
  HEAP32[$AsyncCtx45 + 44 >> 2] = $vararg_buffer9; //@line 1797
  HEAP32[$AsyncCtx45 + 48 >> 2] = $vararg_buffer9; //@line 1799
  HEAP32[$AsyncCtx45 + 52 >> 2] = $vararg_buffer17; //@line 1801
  HEAP32[$AsyncCtx45 + 56 >> 2] = $vararg_buffer17; //@line 1803
  HEAP32[$AsyncCtx45 + 60 >> 2] = $vararg_buffer19; //@line 1805
  HEAP32[$AsyncCtx45 + 64 >> 2] = $vararg_buffer19; //@line 1807
  HEAP32[$AsyncCtx45 + 68 >> 2] = $vararg_buffer12; //@line 1809
  HEAP32[$AsyncCtx45 + 72 >> 2] = $vararg_buffer12; //@line 1811
  HEAP32[$AsyncCtx45 + 76 >> 2] = $vararg_buffer14; //@line 1813
  HEAP32[$AsyncCtx45 + 80 >> 2] = $vararg_buffer14; //@line 1815
  HEAP32[$AsyncCtx45 + 84 >> 2] = $2; //@line 1817
  sp = STACKTOP; //@line 1818
  STACKTOP = sp; //@line 1819
  return 0; //@line 1819
 }
 _emscripten_free_async_context($AsyncCtx45 | 0); //@line 1821
 $58 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 1824
 $AsyncCtx = _emscripten_alloc_async_context(84, sp) | 0; //@line 1825
 FUNCTION_TABLE_vii[$58 & 31]($0, $2); //@line 1826
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 94; //@line 1829
  HEAP16[$AsyncCtx + 4 >> 1] = $3; //@line 1831
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 1833
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer14; //@line 1835
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 1837
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer21; //@line 1839
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer21; //@line 1841
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer23; //@line 1843
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer23; //@line 1845
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer7; //@line 1847
  HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer7; //@line 1849
  HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer9; //@line 1851
  HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer9; //@line 1853
  HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer17; //@line 1855
  HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer17; //@line 1857
  HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer19; //@line 1859
  HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer19; //@line 1861
  HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer12; //@line 1863
  HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer12; //@line 1865
  HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer14; //@line 1867
  HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer14; //@line 1869
  sp = STACKTOP; //@line 1870
  STACKTOP = sp; //@line 1871
  return 0; //@line 1871
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1873
 _printf(10904, $vararg_buffer7) | 0; //@line 1874
 HEAP32[$vararg_buffer9 >> 2] = 5; //@line 1875
 _printf(10970, $vararg_buffer9) | 0; //@line 1876
 $AsyncCtx41 = _emscripten_alloc_async_context(68, sp) | 0; //@line 1877
 _putchar(10) | 0; //@line 1878
 if (___async) {
  HEAP32[$AsyncCtx41 >> 2] = 95; //@line 1881
  HEAP16[$AsyncCtx41 + 4 >> 1] = $3; //@line 1883
  HEAP32[$AsyncCtx41 + 8 >> 2] = $4; //@line 1885
  HEAP32[$AsyncCtx41 + 12 >> 2] = $vararg_buffer14; //@line 1887
  HEAP32[$AsyncCtx41 + 16 >> 2] = $0; //@line 1889
  HEAP32[$AsyncCtx41 + 20 >> 2] = $vararg_buffer21; //@line 1891
  HEAP32[$AsyncCtx41 + 24 >> 2] = $vararg_buffer21; //@line 1893
  HEAP32[$AsyncCtx41 + 28 >> 2] = $vararg_buffer23; //@line 1895
  HEAP32[$AsyncCtx41 + 32 >> 2] = $vararg_buffer23; //@line 1897
  HEAP32[$AsyncCtx41 + 36 >> 2] = $vararg_buffer17; //@line 1899
  HEAP32[$AsyncCtx41 + 40 >> 2] = $vararg_buffer17; //@line 1901
  HEAP32[$AsyncCtx41 + 44 >> 2] = $vararg_buffer19; //@line 1903
  HEAP32[$AsyncCtx41 + 48 >> 2] = $vararg_buffer19; //@line 1905
  HEAP32[$AsyncCtx41 + 52 >> 2] = $vararg_buffer12; //@line 1907
  HEAP32[$AsyncCtx41 + 56 >> 2] = $vararg_buffer12; //@line 1909
  HEAP32[$AsyncCtx41 + 60 >> 2] = $vararg_buffer14; //@line 1911
  HEAP32[$AsyncCtx41 + 64 >> 2] = $vararg_buffer14; //@line 1913
  sp = STACKTOP; //@line 1914
  STACKTOP = sp; //@line 1915
  return 0; //@line 1915
 }
 _emscripten_free_async_context($AsyncCtx41 | 0); //@line 1917
 $AsyncCtx52 = _emscripten_alloc_async_context(68, sp) | 0; //@line 1918
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1919
 if (___async) {
  HEAP32[$AsyncCtx52 >> 2] = 96; //@line 1922
  HEAP16[$AsyncCtx52 + 4 >> 1] = $3; //@line 1924
  HEAP32[$AsyncCtx52 + 8 >> 2] = $4; //@line 1926
  HEAP32[$AsyncCtx52 + 12 >> 2] = $vararg_buffer14; //@line 1928
  HEAP32[$AsyncCtx52 + 16 >> 2] = $0; //@line 1930
  HEAP32[$AsyncCtx52 + 20 >> 2] = $vararg_buffer21; //@line 1932
  HEAP32[$AsyncCtx52 + 24 >> 2] = $vararg_buffer21; //@line 1934
  HEAP32[$AsyncCtx52 + 28 >> 2] = $vararg_buffer23; //@line 1936
  HEAP32[$AsyncCtx52 + 32 >> 2] = $vararg_buffer23; //@line 1938
  HEAP32[$AsyncCtx52 + 36 >> 2] = $vararg_buffer17; //@line 1940
  HEAP32[$AsyncCtx52 + 40 >> 2] = $vararg_buffer17; //@line 1942
  HEAP32[$AsyncCtx52 + 44 >> 2] = $vararg_buffer19; //@line 1944
  HEAP32[$AsyncCtx52 + 48 >> 2] = $vararg_buffer19; //@line 1946
  HEAP32[$AsyncCtx52 + 52 >> 2] = $vararg_buffer12; //@line 1948
  HEAP32[$AsyncCtx52 + 56 >> 2] = $vararg_buffer12; //@line 1950
  HEAP32[$AsyncCtx52 + 60 >> 2] = $vararg_buffer14; //@line 1952
  HEAP32[$AsyncCtx52 + 64 >> 2] = $vararg_buffer14; //@line 1954
  sp = STACKTOP; //@line 1955
  STACKTOP = sp; //@line 1956
  return 0; //@line 1956
 }
 _emscripten_free_async_context($AsyncCtx52 | 0); //@line 1958
 _printf(10904, $vararg_buffer12) | 0; //@line 1959
 HEAP32[$vararg_buffer14 >> 2] = 5; //@line 1960
 _printf(10999, $vararg_buffer14) | 0; //@line 1961
 $AsyncCtx37 = _emscripten_alloc_async_context(52, sp) | 0; //@line 1962
 _putchar(10) | 0; //@line 1963
 if (___async) {
  HEAP32[$AsyncCtx37 >> 2] = 97; //@line 1966
  HEAP16[$AsyncCtx37 + 4 >> 1] = $3; //@line 1968
  HEAP32[$AsyncCtx37 + 8 >> 2] = $4; //@line 1970
  HEAP32[$AsyncCtx37 + 12 >> 2] = $vararg_buffer14; //@line 1972
  HEAP32[$AsyncCtx37 + 16 >> 2] = $0; //@line 1974
  HEAP32[$AsyncCtx37 + 20 >> 2] = $vararg_buffer21; //@line 1976
  HEAP32[$AsyncCtx37 + 24 >> 2] = $vararg_buffer21; //@line 1978
  HEAP32[$AsyncCtx37 + 28 >> 2] = $vararg_buffer23; //@line 1980
  HEAP32[$AsyncCtx37 + 32 >> 2] = $vararg_buffer23; //@line 1982
  HEAP32[$AsyncCtx37 + 36 >> 2] = $vararg_buffer17; //@line 1984
  HEAP32[$AsyncCtx37 + 40 >> 2] = $vararg_buffer17; //@line 1986
  HEAP32[$AsyncCtx37 + 44 >> 2] = $vararg_buffer19; //@line 1988
  HEAP32[$AsyncCtx37 + 48 >> 2] = $vararg_buffer19; //@line 1990
  sp = STACKTOP; //@line 1991
  STACKTOP = sp; //@line 1992
  return 0; //@line 1992
 }
 _emscripten_free_async_context($AsyncCtx37 | 0); //@line 1994
 $AsyncCtx68 = _emscripten_alloc_async_context(52, sp) | 0; //@line 1995
 _wait_ms(1); //@line 1996
 if (___async) {
  HEAP32[$AsyncCtx68 >> 2] = 98; //@line 1999
  HEAP16[$AsyncCtx68 + 4 >> 1] = $3; //@line 2001
  HEAP32[$AsyncCtx68 + 8 >> 2] = $vararg_buffer14; //@line 2003
  HEAP32[$AsyncCtx68 + 12 >> 2] = $4; //@line 2005
  HEAP32[$AsyncCtx68 + 16 >> 2] = $vararg_buffer21; //@line 2007
  HEAP32[$AsyncCtx68 + 20 >> 2] = $vararg_buffer21; //@line 2009
  HEAP32[$AsyncCtx68 + 24 >> 2] = $vararg_buffer23; //@line 2011
  HEAP32[$AsyncCtx68 + 28 >> 2] = $vararg_buffer23; //@line 2013
  HEAP32[$AsyncCtx68 + 32 >> 2] = $0; //@line 2015
  HEAP32[$AsyncCtx68 + 36 >> 2] = $vararg_buffer17; //@line 2017
  HEAP32[$AsyncCtx68 + 40 >> 2] = $vararg_buffer17; //@line 2019
  HEAP32[$AsyncCtx68 + 44 >> 2] = $vararg_buffer19; //@line 2021
  HEAP32[$AsyncCtx68 + 48 >> 2] = $vararg_buffer19; //@line 2023
  sp = STACKTOP; //@line 2024
  STACKTOP = sp; //@line 2025
  return 0; //@line 2025
 }
 _emscripten_free_async_context($AsyncCtx68 | 0); //@line 2027
 $AsyncCtx55 = _emscripten_alloc_async_context(56, sp) | 0; //@line 2028
 __ZN4mbed5TimerC2Ev($vararg_buffer14); //@line 2029
 if (___async) {
  HEAP32[$AsyncCtx55 >> 2] = 99; //@line 2032
  HEAP16[$AsyncCtx55 + 4 >> 1] = $3; //@line 2034
  HEAP32[$AsyncCtx55 + 8 >> 2] = $4; //@line 2036
  HEAP32[$AsyncCtx55 + 12 >> 2] = $0; //@line 2038
  HEAP32[$AsyncCtx55 + 16 >> 2] = $vararg_buffer14; //@line 2040
  HEAP32[$AsyncCtx55 + 20 >> 2] = $vararg_buffer14; //@line 2042
  HEAP32[$AsyncCtx55 + 24 >> 2] = $vararg_buffer21; //@line 2044
  HEAP32[$AsyncCtx55 + 28 >> 2] = $vararg_buffer21; //@line 2046
  HEAP32[$AsyncCtx55 + 32 >> 2] = $vararg_buffer23; //@line 2048
  HEAP32[$AsyncCtx55 + 36 >> 2] = $vararg_buffer23; //@line 2050
  HEAP32[$AsyncCtx55 + 40 >> 2] = $vararg_buffer17; //@line 2052
  HEAP32[$AsyncCtx55 + 44 >> 2] = $vararg_buffer17; //@line 2054
  HEAP32[$AsyncCtx55 + 48 >> 2] = $vararg_buffer19; //@line 2056
  HEAP32[$AsyncCtx55 + 52 >> 2] = $vararg_buffer19; //@line 2058
  sp = STACKTOP; //@line 2059
  STACKTOP = sp; //@line 2060
  return 0; //@line 2060
 }
 _emscripten_free_async_context($AsyncCtx55 | 0); //@line 2062
 $AsyncCtx58 = _emscripten_alloc_async_context(56, sp) | 0; //@line 2063
 __ZN4mbed5Timer5startEv($vararg_buffer14); //@line 2064
 if (___async) {
  HEAP32[$AsyncCtx58 >> 2] = 100; //@line 2067
  HEAP16[$AsyncCtx58 + 4 >> 1] = $3; //@line 2069
  HEAP32[$AsyncCtx58 + 8 >> 2] = $vararg_buffer14; //@line 2071
  HEAP32[$AsyncCtx58 + 12 >> 2] = $4; //@line 2073
  HEAP32[$AsyncCtx58 + 16 >> 2] = $vararg_buffer21; //@line 2075
  HEAP32[$AsyncCtx58 + 20 >> 2] = $vararg_buffer21; //@line 2077
  HEAP32[$AsyncCtx58 + 24 >> 2] = $vararg_buffer23; //@line 2079
  HEAP32[$AsyncCtx58 + 28 >> 2] = $vararg_buffer23; //@line 2081
  HEAP32[$AsyncCtx58 + 32 >> 2] = $0; //@line 2083
  HEAP32[$AsyncCtx58 + 36 >> 2] = $vararg_buffer14; //@line 2085
  HEAP32[$AsyncCtx58 + 40 >> 2] = $vararg_buffer17; //@line 2087
  HEAP32[$AsyncCtx58 + 44 >> 2] = $vararg_buffer17; //@line 2089
  HEAP32[$AsyncCtx58 + 48 >> 2] = $vararg_buffer19; //@line 2091
  HEAP32[$AsyncCtx58 + 52 >> 2] = $vararg_buffer19; //@line 2093
  sp = STACKTOP; //@line 2094
  STACKTOP = sp; //@line 2095
  return 0; //@line 2095
 }
 _emscripten_free_async_context($AsyncCtx58 | 0); //@line 2097
 L28 : do {
  if ($3 << 16 >> 16 < -1) {
   $AsyncCtx64 = _emscripten_alloc_async_context(36, sp) | 0; //@line 2101
   $162 = __ZN4mbed5Timer7read_msEv($vararg_buffer14) | 0; //@line 2102
   if (___async) {
    HEAP32[$AsyncCtx64 >> 2] = 101; //@line 2105
    HEAP32[$AsyncCtx64 + 4 >> 2] = $4; //@line 2107
    HEAP32[$AsyncCtx64 + 8 >> 2] = $vararg_buffer17; //@line 2109
    HEAP32[$AsyncCtx64 + 12 >> 2] = $vararg_buffer17; //@line 2111
    HEAP32[$AsyncCtx64 + 16 >> 2] = $vararg_buffer19; //@line 2113
    HEAP32[$AsyncCtx64 + 20 >> 2] = $vararg_buffer19; //@line 2115
    HEAP32[$AsyncCtx64 + 24 >> 2] = $0; //@line 2117
    HEAP32[$AsyncCtx64 + 28 >> 2] = $vararg_buffer14; //@line 2119
    HEAP32[$AsyncCtx64 + 32 >> 2] = $vararg_buffer14; //@line 2121
    sp = STACKTOP; //@line 2122
    STACKTOP = sp; //@line 2123
    return 0; //@line 2123
   }
   _emscripten_free_async_context($AsyncCtx64 | 0); //@line 2125
   if (($162 | 0) < ($4 | 0)) {
    _printf(10904, $vararg_buffer17) | 0; //@line 2128
    _printf(11092, $vararg_buffer19) | 0; //@line 2129
    $AsyncCtx34 = _emscripten_alloc_async_context(16, sp) | 0; //@line 2130
    _putchar(10) | 0; //@line 2131
    if (___async) {
     HEAP32[$AsyncCtx34 >> 2] = 102; //@line 2134
     HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 2136
     HEAP32[$AsyncCtx34 + 8 >> 2] = $vararg_buffer14; //@line 2138
     HEAP32[$AsyncCtx34 + 12 >> 2] = $vararg_buffer14; //@line 2140
     sp = STACKTOP; //@line 2141
     STACKTOP = sp; //@line 2142
     return 0; //@line 2142
    } else {
     _emscripten_free_async_context($AsyncCtx34 | 0); //@line 2144
     $$0$off0 = 0; //@line 2145
     break;
    }
   } else {
    $$0$off0 = 1; //@line 2149
   }
  } else {
   while (1) {
    $AsyncCtx61 = _emscripten_alloc_async_context(36, sp) | 0; //@line 2153
    $175 = __ZN4mbed5Timer7read_msEv($vararg_buffer14) | 0; //@line 2154
    if (___async) {
     label = 27; //@line 2157
     break;
    }
    _emscripten_free_async_context($AsyncCtx61 | 0); //@line 2160
    if (($175 | 0) >= ($4 | 0)) {
     $$0$off0 = 1; //@line 2163
     break L28;
    }
    _printf(10904, $vararg_buffer21) | 0; //@line 2166
    _printf(11092, $vararg_buffer23) | 0; //@line 2167
    $AsyncCtx30 = _emscripten_alloc_async_context(36, sp) | 0; //@line 2168
    _putchar(10) | 0; //@line 2169
    if (___async) {
     label = 30; //@line 2172
     break;
    }
    _emscripten_free_async_context($AsyncCtx30 | 0); //@line 2175
   }
   if ((label | 0) == 27) {
    HEAP32[$AsyncCtx61 >> 2] = 103; //@line 2178
    HEAP32[$AsyncCtx61 + 4 >> 2] = $4; //@line 2180
    HEAP32[$AsyncCtx61 + 8 >> 2] = $vararg_buffer21; //@line 2182
    HEAP32[$AsyncCtx61 + 12 >> 2] = $vararg_buffer21; //@line 2184
    HEAP32[$AsyncCtx61 + 16 >> 2] = $vararg_buffer23; //@line 2186
    HEAP32[$AsyncCtx61 + 20 >> 2] = $vararg_buffer23; //@line 2188
    HEAP32[$AsyncCtx61 + 24 >> 2] = $0; //@line 2190
    HEAP32[$AsyncCtx61 + 28 >> 2] = $vararg_buffer14; //@line 2192
    HEAP32[$AsyncCtx61 + 32 >> 2] = $vararg_buffer14; //@line 2194
    sp = STACKTOP; //@line 2195
    STACKTOP = sp; //@line 2196
    return 0; //@line 2196
   } else if ((label | 0) == 30) {
    HEAP32[$AsyncCtx30 >> 2] = 104; //@line 2199
    HEAP32[$AsyncCtx30 + 4 >> 2] = $vararg_buffer14; //@line 2201
    HEAP32[$AsyncCtx30 + 8 >> 2] = $4; //@line 2203
    HEAP32[$AsyncCtx30 + 12 >> 2] = $vararg_buffer21; //@line 2205
    HEAP32[$AsyncCtx30 + 16 >> 2] = $vararg_buffer21; //@line 2207
    HEAP32[$AsyncCtx30 + 20 >> 2] = $vararg_buffer23; //@line 2209
    HEAP32[$AsyncCtx30 + 24 >> 2] = $vararg_buffer23; //@line 2211
    HEAP32[$AsyncCtx30 + 28 >> 2] = $0; //@line 2213
    HEAP32[$AsyncCtx30 + 32 >> 2] = $vararg_buffer14; //@line 2215
    sp = STACKTOP; //@line 2216
    STACKTOP = sp; //@line 2217
    return 0; //@line 2217
   }
  }
 } while (0);
 $195 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 2223
 $AsyncCtx27 = _emscripten_alloc_async_context(16, sp) | 0; //@line 2224
 FUNCTION_TABLE_vi[$195 & 1023]($0); //@line 2225
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 105; //@line 2228
  HEAP32[$AsyncCtx27 + 4 >> 2] = $vararg_buffer14; //@line 2230
  HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer14; //@line 2232
  HEAP8[$AsyncCtx27 + 12 >> 0] = $$0$off0 & 1; //@line 2235
  sp = STACKTOP; //@line 2236
  STACKTOP = sp; //@line 2237
  return 0; //@line 2237
 } else {
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 2239
  __ZN4mbed5TimerD2Ev($vararg_buffer14); //@line 2240
  STACKTOP = sp; //@line 2241
  return $$0$off0 | 0; //@line 2241
 }
 return 0; //@line 2243
}
function __ZN12LoRaWANStack9handle_txEhPKhth($0, $1, $2, $3, $trunc) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $trunc = $trunc | 0;
 var $$0 = 0, $$0$i43 = 0, $$1 = 0, $123 = 0, $130 = 0, $154 = 0, $155 = 0, $156 = 0, $191 = 0, $196 = 0, $205 = 0, $220 = 0, $4 = 0, $48 = 0, $49 = 0, $50 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx36 = 0, $AsyncCtx40 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx63 = 0, $AsyncCtx66 = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9261
 STACKTOP = STACKTOP + 128 | 0; //@line 9262
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 9262
 $vararg_buffer31 = sp + 112 | 0; //@line 9263
 $vararg_buffer29 = sp + 104 | 0; //@line 9264
 $vararg_buffer25 = sp + 96 | 0; //@line 9265
 $vararg_buffer23 = sp + 88 | 0; //@line 9266
 $vararg_buffer19 = sp + 80 | 0; //@line 9267
 $vararg_buffer17 = sp + 72 | 0; //@line 9268
 $vararg_buffer15 = sp + 64 | 0; //@line 9269
 $vararg_buffer13 = sp + 56 | 0; //@line 9270
 $vararg_buffer11 = sp + 48 | 0; //@line 9271
 $vararg_buffer9 = sp + 40 | 0; //@line 9272
 $vararg_buffer6 = sp + 32 | 0; //@line 9273
 $vararg_buffer4 = sp + 24 | 0; //@line 9274
 $vararg_buffer1 = sp + 8 | 0; //@line 9275
 _printf(12430, sp) | 0; //@line 9277
 $4 = $0 + 1932 | 0; //@line 9278
 $7 = $0 + 1964 | 0; //@line 9281
 $9 = HEAPU8[$7 >> 0] | 0; //@line 9283
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$4 >> 0]; //@line 9284
 HEAP32[$vararg_buffer1 + 4 >> 2] = $9; //@line 9286
 _printf(12597, $vararg_buffer1) | 0; //@line 9287
 $AsyncCtx55 = _emscripten_alloc_async_context(132, sp) | 0; //@line 9288
 _putchar(10) | 0; //@line 9289
 if (___async) {
  HEAP32[$AsyncCtx55 >> 2] = 303; //@line 9292
  HEAP32[$AsyncCtx55 + 4 >> 2] = $vararg_buffer19; //@line 9294
  HEAP32[$AsyncCtx55 + 8 >> 2] = $vararg_buffer1; //@line 9296
  HEAP32[$AsyncCtx55 + 12 >> 2] = $vararg_buffer25; //@line 9298
  HEAP32[$AsyncCtx55 + 16 >> 2] = $vararg_buffer6; //@line 9300
  HEAP32[$AsyncCtx55 + 20 >> 2] = $vararg_buffer19; //@line 9302
  HEAP32[$AsyncCtx55 + 24 >> 2] = $vararg_buffer13; //@line 9304
  HEAP32[$AsyncCtx55 + 28 >> 2] = $vararg_buffer6; //@line 9306
  HEAP32[$AsyncCtx55 + 32 >> 2] = $vararg_buffer6; //@line 9308
  HEAP32[$AsyncCtx55 + 36 >> 2] = $vararg_buffer11; //@line 9310
  HEAP32[$AsyncCtx55 + 40 >> 2] = $4; //@line 9312
  HEAP32[$AsyncCtx55 + 44 >> 2] = $vararg_buffer17; //@line 9314
  HEAP32[$AsyncCtx55 + 48 >> 2] = $vararg_buffer11; //@line 9316
  HEAP32[$AsyncCtx55 + 52 >> 2] = $vararg_buffer17; //@line 9318
  HEAP32[$AsyncCtx55 + 56 >> 2] = $vararg_buffer31; //@line 9320
  HEAP32[$AsyncCtx55 + 60 >> 2] = $0; //@line 9322
  HEAP32[$AsyncCtx55 + 64 >> 2] = $vararg_buffer29; //@line 9324
  HEAP8[$AsyncCtx55 + 68 >> 0] = $1; //@line 9326
  HEAP32[$AsyncCtx55 + 72 >> 2] = $vararg_buffer31; //@line 9328
  HEAP32[$AsyncCtx55 + 76 >> 2] = $vararg_buffer15; //@line 9330
  HEAP32[$AsyncCtx55 + 80 >> 2] = $vararg_buffer23; //@line 9332
  HEAP32[$AsyncCtx55 + 84 >> 2] = $vararg_buffer15; //@line 9334
  HEAP32[$AsyncCtx55 + 88 >> 2] = $vararg_buffer9; //@line 9336
  HEAP32[$AsyncCtx55 + 92 >> 2] = $vararg_buffer23; //@line 9338
  HEAP16[$AsyncCtx55 + 96 >> 1] = $3; //@line 9340
  HEAP8[$AsyncCtx55 + 98 >> 0] = $trunc; //@line 9342
  HEAP32[$AsyncCtx55 + 100 >> 2] = $2; //@line 9344
  HEAP32[$AsyncCtx55 + 104 >> 2] = $vararg_buffer9; //@line 9346
  HEAP32[$AsyncCtx55 + 108 >> 2] = $vararg_buffer4; //@line 9348
  HEAP32[$AsyncCtx55 + 112 >> 2] = $vararg_buffer29; //@line 9350
  HEAP32[$AsyncCtx55 + 116 >> 2] = $7; //@line 9352
  HEAP32[$AsyncCtx55 + 120 >> 2] = $vararg_buffer13; //@line 9354
  HEAP32[$AsyncCtx55 + 124 >> 2] = $vararg_buffer4; //@line 9356
  HEAP32[$AsyncCtx55 + 128 >> 2] = $vararg_buffer25; //@line 9358
  sp = STACKTOP; //@line 9359
  STACKTOP = sp; //@line 9360
  return 0; //@line 9360
 }
 _emscripten_free_async_context($AsyncCtx55 | 0); //@line 9362
 if (!(HEAP8[$4 >> 0] | 0)) {
  $$1 = -1017; //@line 9366
  STACKTOP = sp; //@line 9367
  return $$1 | 0; //@line 9367
 }
 if (HEAP8[$7 >> 0] | 0) {
  $$1 = -1001; //@line 9372
  STACKTOP = sp; //@line 9373
  return $$1 | 0; //@line 9373
 }
 $48 = $3 << 16 >> 16 == 0; //@line 9376
 if (!(($2 | 0) != 0 | $48)) {
  $$1 = -1003; //@line 9379
  STACKTOP = sp; //@line 9380
  return $$1 | 0; //@line 9380
 }
 HEAP32[$vararg_buffer1 >> 2] = 1; //@line 9382
 $49 = $0 + 4 | 0; //@line 9383
 $AsyncCtx63 = _emscripten_alloc_async_context(136, sp) | 0; //@line 9384
 $50 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($49, $vararg_buffer1) | 0; //@line 9385
 if (___async) {
  HEAP32[$AsyncCtx63 >> 2] = 304; //@line 9388
  HEAP32[$AsyncCtx63 + 4 >> 2] = $vararg_buffer19; //@line 9390
  HEAP32[$AsyncCtx63 + 8 >> 2] = $vararg_buffer1; //@line 9392
  HEAP32[$AsyncCtx63 + 12 >> 2] = $vararg_buffer25; //@line 9394
  HEAP32[$AsyncCtx63 + 16 >> 2] = $vararg_buffer6; //@line 9396
  HEAP32[$AsyncCtx63 + 20 >> 2] = $vararg_buffer19; //@line 9398
  HEAP32[$AsyncCtx63 + 24 >> 2] = $vararg_buffer13; //@line 9400
  HEAP8[$AsyncCtx63 + 28 >> 0] = $48 & 1; //@line 9403
  HEAP32[$AsyncCtx63 + 32 >> 2] = $vararg_buffer6; //@line 9405
  HEAP32[$AsyncCtx63 + 36 >> 2] = $vararg_buffer6; //@line 9407
  HEAP32[$AsyncCtx63 + 40 >> 2] = $vararg_buffer11; //@line 9409
  HEAP32[$AsyncCtx63 + 44 >> 2] = $vararg_buffer17; //@line 9411
  HEAP32[$AsyncCtx63 + 48 >> 2] = $vararg_buffer11; //@line 9413
  HEAP32[$AsyncCtx63 + 52 >> 2] = $vararg_buffer17; //@line 9415
  HEAP32[$AsyncCtx63 + 56 >> 2] = $vararg_buffer31; //@line 9417
  HEAP32[$AsyncCtx63 + 60 >> 2] = $49; //@line 9419
  HEAP32[$AsyncCtx63 + 64 >> 2] = $0; //@line 9421
  HEAP32[$AsyncCtx63 + 68 >> 2] = $vararg_buffer29; //@line 9423
  HEAP8[$AsyncCtx63 + 72 >> 0] = $1; //@line 9425
  HEAP32[$AsyncCtx63 + 76 >> 2] = $vararg_buffer31; //@line 9427
  HEAP32[$AsyncCtx63 + 80 >> 2] = $vararg_buffer15; //@line 9429
  HEAP32[$AsyncCtx63 + 84 >> 2] = $vararg_buffer23; //@line 9431
  HEAP32[$AsyncCtx63 + 88 >> 2] = $vararg_buffer15; //@line 9433
  HEAP32[$AsyncCtx63 + 92 >> 2] = $vararg_buffer9; //@line 9435
  HEAP32[$AsyncCtx63 + 96 >> 2] = $vararg_buffer23; //@line 9437
  HEAP16[$AsyncCtx63 + 100 >> 1] = $3; //@line 9439
  HEAP8[$AsyncCtx63 + 102 >> 0] = $trunc; //@line 9441
  HEAP32[$AsyncCtx63 + 104 >> 2] = $2; //@line 9443
  HEAP32[$AsyncCtx63 + 108 >> 2] = $vararg_buffer9; //@line 9445
  HEAP32[$AsyncCtx63 + 112 >> 2] = $vararg_buffer4; //@line 9447
  HEAP32[$AsyncCtx63 + 116 >> 2] = $vararg_buffer1; //@line 9449
  HEAP32[$AsyncCtx63 + 120 >> 2] = $vararg_buffer29; //@line 9451
  HEAP32[$AsyncCtx63 + 124 >> 2] = $vararg_buffer13; //@line 9453
  HEAP32[$AsyncCtx63 + 128 >> 2] = $vararg_buffer4; //@line 9455
  HEAP32[$AsyncCtx63 + 132 >> 2] = $vararg_buffer25; //@line 9457
  sp = STACKTOP; //@line 9458
  STACKTOP = sp; //@line 9459
  return 0; //@line 9459
 }
 _emscripten_free_async_context($AsyncCtx63 | 0); //@line 9461
 _printf(12430, $vararg_buffer4) | 0; //@line 9462
 HEAP32[$vararg_buffer6 >> 2] = $50; //@line 9463
 _printf(12650, $vararg_buffer6) | 0; //@line 9464
 $AsyncCtx51 = _emscripten_alloc_async_context(124, sp) | 0; //@line 9465
 _putchar(10) | 0; //@line 9466
 if (___async) {
  HEAP32[$AsyncCtx51 >> 2] = 305; //@line 9469
  HEAP8[$AsyncCtx51 + 4 >> 0] = $trunc; //@line 9471
  HEAP32[$AsyncCtx51 + 8 >> 2] = $0; //@line 9473
  HEAP32[$AsyncCtx51 + 12 >> 2] = $2; //@line 9475
  HEAP16[$AsyncCtx51 + 16 >> 1] = $3; //@line 9477
  HEAP8[$AsyncCtx51 + 18 >> 0] = $48 & 1; //@line 9480
  HEAP32[$AsyncCtx51 + 20 >> 2] = $vararg_buffer17; //@line 9482
  HEAP32[$AsyncCtx51 + 24 >> 2] = $vararg_buffer17; //@line 9484
  HEAP32[$AsyncCtx51 + 28 >> 2] = $vararg_buffer19; //@line 9486
  HEAP32[$AsyncCtx51 + 32 >> 2] = $vararg_buffer19; //@line 9488
  HEAP32[$AsyncCtx51 + 36 >> 2] = $50; //@line 9490
  HEAP32[$AsyncCtx51 + 40 >> 2] = $vararg_buffer29; //@line 9492
  HEAP32[$AsyncCtx51 + 44 >> 2] = $vararg_buffer29; //@line 9494
  HEAP32[$AsyncCtx51 + 48 >> 2] = $vararg_buffer31; //@line 9496
  HEAP32[$AsyncCtx51 + 52 >> 2] = $vararg_buffer31; //@line 9498
  HEAP32[$AsyncCtx51 + 56 >> 2] = $vararg_buffer23; //@line 9500
  HEAP32[$AsyncCtx51 + 60 >> 2] = $vararg_buffer23; //@line 9502
  HEAP32[$AsyncCtx51 + 64 >> 2] = $vararg_buffer25; //@line 9504
  HEAP32[$AsyncCtx51 + 68 >> 2] = $vararg_buffer25; //@line 9506
  HEAP32[$AsyncCtx51 + 72 >> 2] = $vararg_buffer6; //@line 9508
  HEAP32[$AsyncCtx51 + 76 >> 2] = $vararg_buffer1; //@line 9510
  HEAP8[$AsyncCtx51 + 80 >> 0] = $1; //@line 9512
  HEAP32[$AsyncCtx51 + 84 >> 2] = $vararg_buffer1; //@line 9514
  HEAP32[$AsyncCtx51 + 88 >> 2] = $49; //@line 9516
  HEAP32[$AsyncCtx51 + 92 >> 2] = $vararg_buffer13; //@line 9518
  HEAP32[$AsyncCtx51 + 96 >> 2] = $vararg_buffer13; //@line 9520
  HEAP32[$AsyncCtx51 + 100 >> 2] = $vararg_buffer15; //@line 9522
  HEAP32[$AsyncCtx51 + 104 >> 2] = $vararg_buffer15; //@line 9524
  HEAP32[$AsyncCtx51 + 108 >> 2] = $vararg_buffer9; //@line 9526
  HEAP32[$AsyncCtx51 + 112 >> 2] = $vararg_buffer9; //@line 9528
  HEAP32[$AsyncCtx51 + 116 >> 2] = $vararg_buffer11; //@line 9530
  HEAP32[$AsyncCtx51 + 120 >> 2] = $vararg_buffer11; //@line 9532
  sp = STACKTOP; //@line 9533
  STACKTOP = sp; //@line 9534
  return 0; //@line 9534
 }
 _emscripten_free_async_context($AsyncCtx51 | 0); //@line 9536
 if (!$50) {
  if (!(HEAP8[$vararg_buffer1 + 4 >> 0] | 0)) {
   $$0 = -1009; //@line 9543
  } else {
   label = 12; //@line 9545
  }
 } else {
  label = 12; //@line 9548
 }
 do {
  if ((label | 0) == 12) {
   if (($1 + -1 & 255) >= 223) {
    _printf(12178, $vararg_buffer9) | 0; //@line 9555
    _printf(12667, $vararg_buffer11) | 0; //@line 9556
    $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9557
    _putchar(10) | 0; //@line 9558
    if (___async) {
     HEAP32[$AsyncCtx47 >> 2] = 306; //@line 9561
     HEAP32[$AsyncCtx47 + 4 >> 2] = $vararg_buffer1; //@line 9563
     sp = STACKTOP; //@line 9564
     STACKTOP = sp; //@line 9565
     return 0; //@line 9565
    } else {
     _emscripten_free_async_context($AsyncCtx47 | 0); //@line 9567
     $$0 = -1015; //@line 9568
     break;
    }
   }
   $123 = $0 + 2285 | 0; //@line 9572
   HEAP8[$123 >> 0] = $1; //@line 9573
   if ($trunc << 24 >> 24 == 0 | ($trunc & 15) == 3) {
    _printf(12178, $vararg_buffer13) | 0; //@line 9579
    _printf(12704, $vararg_buffer15) | 0; //@line 9580
    $AsyncCtx44 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9581
    _putchar(10) | 0; //@line 9582
    if (___async) {
     HEAP32[$AsyncCtx44 >> 2] = 307; //@line 9585
     HEAP32[$AsyncCtx44 + 4 >> 2] = $vararg_buffer1; //@line 9587
     sp = STACKTOP; //@line 9588
     STACKTOP = sp; //@line 9589
     return 0; //@line 9589
    } else {
     _emscripten_free_async_context($AsyncCtx44 | 0); //@line 9591
     $$0 = -1003; //@line 9592
     break;
    }
   }
   HEAP8[$0 + 1965 >> 0] = $1; //@line 9597
   $AsyncCtx59 = _emscripten_alloc_async_context(84, sp) | 0; //@line 9599
   $130 = __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t($49, $3 & 255, $vararg_buffer6) | 0; //@line 9600
   if (___async) {
    HEAP32[$AsyncCtx59 >> 2] = 308; //@line 9603
    HEAP8[$AsyncCtx59 + 4 >> 0] = $trunc; //@line 9605
    HEAP32[$AsyncCtx59 + 8 >> 2] = $0; //@line 9607
    HEAP32[$AsyncCtx59 + 12 >> 2] = $2; //@line 9609
    HEAP16[$AsyncCtx59 + 16 >> 1] = $3; //@line 9611
    HEAP8[$AsyncCtx59 + 18 >> 0] = $48 & 1; //@line 9614
    HEAP32[$AsyncCtx59 + 20 >> 2] = $vararg_buffer17; //@line 9616
    HEAP32[$AsyncCtx59 + 24 >> 2] = $vararg_buffer17; //@line 9618
    HEAP32[$AsyncCtx59 + 28 >> 2] = $vararg_buffer19; //@line 9620
    HEAP32[$AsyncCtx59 + 32 >> 2] = $vararg_buffer19; //@line 9622
    HEAP32[$AsyncCtx59 + 36 >> 2] = $vararg_buffer29; //@line 9624
    HEAP32[$AsyncCtx59 + 40 >> 2] = $vararg_buffer29; //@line 9626
    HEAP32[$AsyncCtx59 + 44 >> 2] = $vararg_buffer31; //@line 9628
    HEAP32[$AsyncCtx59 + 48 >> 2] = $vararg_buffer31; //@line 9630
    HEAP32[$AsyncCtx59 + 52 >> 2] = $vararg_buffer23; //@line 9632
    HEAP32[$AsyncCtx59 + 56 >> 2] = $vararg_buffer23; //@line 9634
    HEAP32[$AsyncCtx59 + 60 >> 2] = $vararg_buffer25; //@line 9636
    HEAP32[$AsyncCtx59 + 64 >> 2] = $vararg_buffer25; //@line 9638
    HEAP32[$AsyncCtx59 + 68 >> 2] = $123; //@line 9640
    HEAP32[$AsyncCtx59 + 72 >> 2] = $vararg_buffer6; //@line 9642
    HEAP32[$AsyncCtx59 + 76 >> 2] = $vararg_buffer6; //@line 9644
    HEAP32[$AsyncCtx59 + 80 >> 2] = $vararg_buffer1; //@line 9646
    sp = STACKTOP; //@line 9647
    STACKTOP = sp; //@line 9648
    return 0; //@line 9648
   }
   _emscripten_free_async_context($AsyncCtx59 | 0); //@line 9650
   $154 = ($130 | 0) == -1010 ? HEAP8[$vararg_buffer6 >> 0] | 0 : HEAP8[$vararg_buffer6 + 1 >> 0] | 0; //@line 9655
   $$0$i43 = $154 & 255; //@line 9656
   $155 = $154 & 255; //@line 9657
   $156 = $3 & 65535; //@line 9658
   do {
    if (($$0$i43 & 65535) < ($3 & 65535)) {
     _printf(12430, $vararg_buffer17) | 0; //@line 9662
     HEAP32[$vararg_buffer19 >> 2] = $156; //@line 9663
     HEAP32[$vararg_buffer19 + 4 >> 2] = $155; //@line 9665
     _printf(12764, $vararg_buffer19) | 0; //@line 9666
     $AsyncCtx40 = _emscripten_alloc_async_context(68, sp) | 0; //@line 9667
     _putchar(10) | 0; //@line 9668
     if (___async) {
      HEAP32[$AsyncCtx40 >> 2] = 309; //@line 9671
      HEAP32[$AsyncCtx40 + 4 >> 2] = $156; //@line 9673
      HEAP32[$AsyncCtx40 + 8 >> 2] = $155; //@line 9675
      HEAP32[$AsyncCtx40 + 12 >> 2] = $0; //@line 9677
      HEAP16[$AsyncCtx40 + 16 >> 1] = $$0$i43; //@line 9679
      HEAP32[$AsyncCtx40 + 20 >> 2] = $2; //@line 9681
      HEAP8[$AsyncCtx40 + 24 >> 0] = $trunc; //@line 9683
      HEAP32[$AsyncCtx40 + 28 >> 2] = $vararg_buffer23; //@line 9685
      HEAP32[$AsyncCtx40 + 32 >> 2] = $vararg_buffer23; //@line 9687
      HEAP32[$AsyncCtx40 + 36 >> 2] = $vararg_buffer25; //@line 9689
      HEAP32[$AsyncCtx40 + 40 >> 2] = $vararg_buffer25; //@line 9691
      HEAP32[$AsyncCtx40 + 44 >> 2] = $123; //@line 9693
      HEAP32[$AsyncCtx40 + 48 >> 2] = $vararg_buffer29; //@line 9695
      HEAP32[$AsyncCtx40 + 52 >> 2] = $vararg_buffer29; //@line 9697
      HEAP32[$AsyncCtx40 + 56 >> 2] = $vararg_buffer31; //@line 9699
      HEAP32[$AsyncCtx40 + 60 >> 2] = $vararg_buffer31; //@line 9701
      HEAP32[$AsyncCtx40 + 64 >> 2] = $vararg_buffer1; //@line 9703
      sp = STACKTOP; //@line 9704
      STACKTOP = sp; //@line 9705
      return 0; //@line 9705
     } else {
      _emscripten_free_async_context($AsyncCtx40 | 0); //@line 9707
      HEAP16[$0 + 2232 >> 1] = $156 - $155; //@line 9711
      HEAP16[$0 + 2230 >> 1] = $$0$i43; //@line 9713
      _memcpy($0 + 1975 | 0, $2 | 0, $155 | 0) | 0; //@line 9715
      break;
     }
    } else {
     HEAP16[$0 + 2230 >> 1] = $3; //@line 9720
     HEAP16[$0 + 2232 >> 1] = 0; //@line 9722
     if (!$48) {
      _memcpy($0 + 1975 | 0, $2 | 0, $156 | 0) | 0; //@line 9725
     }
    }
   } while (0);
   switch ($trunc & 15) {
   case 9:
   case 5:
   case 1:
    {
     HEAP32[$0 + 1968 >> 2] = 0; //@line 9733
     HEAP8[$0 + 1972 >> 0] = HEAP8[$123 >> 0] | 0; //@line 9736
     switch ($trunc & 15) {
     case 6:
     case 2:
      {
       label = 30; //@line 9740
       break;
      }
     default:
      {}
     }
     break;
    }
   case 10:
   case 6:
   case 2:
    {
     label = 30; //@line 9749
     break;
    }
   default:
    {}
   }
   if ((label | 0) == 30) {
    HEAP32[$0 + 1968 >> 2] = 1; //@line 9757
    HEAP8[$0 + 1972 >> 0] = HEAP8[$123 >> 0] | 0; //@line 9760
    HEAP8[$0 + 1974 >> 0] = HEAP8[$0 + 2284 >> 0] | 0; //@line 9764
   }
   _printf(12430, $vararg_buffer23) | 0; //@line 9766
   $191 = $0 + 2230 | 0; //@line 9767
   $196 = HEAPU16[$0 + 2232 >> 1] | 0; //@line 9772
   HEAP32[$vararg_buffer25 >> 2] = HEAPU16[$191 >> 1]; //@line 9773
   HEAP32[$vararg_buffer25 + 4 >> 2] = $196; //@line 9775
   _printf(12819, $vararg_buffer25) | 0; //@line 9776
   $AsyncCtx36 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9777
   _putchar(10) | 0; //@line 9778
   if (___async) {
    HEAP32[$AsyncCtx36 >> 2] = 310; //@line 9781
    HEAP32[$AsyncCtx36 + 4 >> 2] = $0; //@line 9783
    HEAP32[$AsyncCtx36 + 8 >> 2] = $vararg_buffer29; //@line 9785
    HEAP32[$AsyncCtx36 + 12 >> 2] = $vararg_buffer29; //@line 9787
    HEAP32[$AsyncCtx36 + 16 >> 2] = $vararg_buffer31; //@line 9789
    HEAP32[$AsyncCtx36 + 20 >> 2] = $vararg_buffer31; //@line 9791
    HEAP32[$AsyncCtx36 + 24 >> 2] = $191; //@line 9793
    HEAP32[$AsyncCtx36 + 28 >> 2] = $vararg_buffer1; //@line 9795
    sp = STACKTOP; //@line 9796
    STACKTOP = sp; //@line 9797
    return 0; //@line 9797
   }
   _emscripten_free_async_context($AsyncCtx36 | 0); //@line 9799
   HEAP32[$0 + 1876 >> 2] = 5; //@line 9801
   $AsyncCtx66 = _emscripten_alloc_async_context(28, sp) | 0; //@line 9802
   $205 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 9803
   if (___async) {
    HEAP32[$AsyncCtx66 >> 2] = 311; //@line 9806
    HEAP32[$AsyncCtx66 + 4 >> 2] = $vararg_buffer29; //@line 9808
    HEAP32[$AsyncCtx66 + 8 >> 2] = $vararg_buffer29; //@line 9810
    HEAP32[$AsyncCtx66 + 12 >> 2] = $vararg_buffer31; //@line 9812
    HEAP32[$AsyncCtx66 + 16 >> 2] = $vararg_buffer31; //@line 9814
    HEAP32[$AsyncCtx66 + 20 >> 2] = $191; //@line 9816
    HEAP32[$AsyncCtx66 + 24 >> 2] = $vararg_buffer1; //@line 9818
    sp = STACKTOP; //@line 9819
    STACKTOP = sp; //@line 9820
    return 0; //@line 9820
   }
   _emscripten_free_async_context($AsyncCtx66 | 0); //@line 9822
   _printf(12430, $vararg_buffer29) | 0; //@line 9823
   HEAP32[$vararg_buffer31 >> 2] = $205; //@line 9824
   _printf(12845, $vararg_buffer31) | 0; //@line 9825
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 9826
   _putchar(10) | 0; //@line 9827
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 312; //@line 9830
    HEAP32[$AsyncCtx + 4 >> 2] = $205; //@line 9832
    HEAP32[$AsyncCtx + 8 >> 2] = $191; //@line 9834
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 9836
    sp = STACKTOP; //@line 9837
    STACKTOP = sp; //@line 9838
    return 0; //@line 9838
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 9840
   if (!$205) {
    $220 = HEAPU16[$191 >> 1] | 0; //@line 9845
   } else {
    $220 = $205 << 16 >> 16; //@line 9849
   }
   $$0 = $220 & 65535; //@line 9852
  }
 } while (0);
 $$1 = $$0; //@line 9855
 STACKTOP = sp; //@line 9856
 return $$1 | 0; //@line 9856
}
function __ZN7LoRaMac11schedule_txEv($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$pre$phiZ2D = 0, $$sink = 0, $1 = 0, $108 = 0, $11 = 0, $126 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $14 = 0, $151 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $179 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $2 = 0, $20 = 0, $215 = 0, $216 = 0, $218 = 0, $240 = 0, $258 = 0, $261 = 0, $270 = 0, $272 = 0, $28 = 0, $3 = 0, $34 = 0, $35 = 0, $37 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 16278
 STACKTOP = STACKTOP + 80 | 0; //@line 16279
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 16279
 $vararg_buffer10 = sp + 40 | 0; //@line 16280
 $vararg_buffer8 = sp + 32 | 0; //@line 16281
 $vararg_buffer6 = sp + 24 | 0; //@line 16282
 $vararg_buffer4 = sp + 16 | 0; //@line 16283
 $vararg_buffer1 = sp + 8 | 0; //@line 16284
 $vararg_buffer = sp; //@line 16285
 $1 = sp + 60 | 0; //@line 16286
 $2 = sp + 56 | 0; //@line 16287
 $3 = sp + 44 | 0; //@line 16288
 HEAP32[$2 >> 2] = 0; //@line 16289
 switch (HEAP8[$0 + 1152 >> 0] | 0) {
 case 0:
  {
   $6 = $0 + 984 | 0; //@line 16294
   HEAP32[$6 >> 2] = 0; //@line 16295
   $$pre$phiZ2D = $6; //@line 16296
   break;
  }
 case -1:
  {
   $$1 = -1011; //@line 16300
   STACKTOP = sp; //@line 16301
   return $$1 | 0; //@line 16301
  }
 default:
  {
   $$pre$phiZ2D = $0 + 984 | 0; //@line 16306
  }
 }
 $8 = HEAP8[$0 + 379 >> 0] | 0; //@line 16310
 $9 = $0 + 372 | 0; //@line 16311
 HEAP8[$1 >> 0] = HEAP8[$9 >> 0] | 0; //@line 16313
 $11 = $0 + 375 | 0; //@line 16314
 HEAP8[$11 >> 0] = 1; //@line 16315
 HEAP8[$1 + 2 >> 0] = 1; //@line 16317
 HEAP8[$1 + 3 >> 0] = $8; //@line 16319
 $14 = $0 + 356 | 0; //@line 16320
 HEAP32[$1 + 4 >> 2] = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$14 >> 2] | 0, HEAP32[$0 + 988 >> 2] | 0) | 0; //@line 16326
 $20 = $0 + 992 | 0; //@line 16327
 HEAP32[$1 + 8 >> 2] = HEAP32[$20 >> 2]; //@line 16330
 HEAP8[$1 + 1 >> 0] = HEAP8[$0 + 376 >> 0] | 0; //@line 16334
 __ZN7LoRaPHY17calculate_backoffEP16backoff_params_s(HEAP32[$0 >> 2] | 0, $1); //@line 16336
 $28 = HEAP32[$20 >> 2] | 0; //@line 16338
 $34 = (Math_imul($28, HEAPU16[$0 + 1154 >> 1] | 0) | 0) + ((HEAP32[$$pre$phiZ2D >> 2] | 0) - $28) | 0; //@line 16344
 HEAP32[$$pre$phiZ2D >> 2] = $34; //@line 16345
 HEAP32[$3 >> 2] = $34; //@line 16346
 $35 = $0 + 1097 | 0; //@line 16347
 $37 = $3 + 8 | 0; //@line 16349
 HEAP8[$37 >> 0] = HEAP8[$35 >> 0] | 0; //@line 16350
 HEAP8[$11 >> 0] = 1; //@line 16351
 HEAP8[$3 + 10 >> 0] = 1; //@line 16353
 HEAP8[$3 + 9 >> 0] = HEAP8[$9 >> 0] | 0; //@line 16356
 HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 980 >> 2]; //@line 16360
 $44 = HEAP32[$0 >> 2] | 0; //@line 16361
 $47 = HEAP32[(HEAP32[$44 >> 2] | 0) + 56 >> 2] | 0; //@line 16364
 $48 = $0 + 378 | 0; //@line 16365
 $AsyncCtx = _emscripten_alloc_async_context(100, sp) | 0; //@line 16366
 $49 = FUNCTION_TABLE_iiiiii[$47 & 7]($44, $3, $48, $2, $$pre$phiZ2D) | 0; //@line 16367
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 491; //@line 16370
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16372
  HEAP32[$AsyncCtx + 8 >> 2] = $35; //@line 16374
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer4; //@line 16376
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer4; //@line 16378
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer6; //@line 16380
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer6; //@line 16382
  HEAP32[$AsyncCtx + 28 >> 2] = $48; //@line 16384
  HEAP32[$AsyncCtx + 32 >> 2] = $2; //@line 16386
  HEAP32[$AsyncCtx + 36 >> 2] = $3; //@line 16388
  HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 16390
  HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer8; //@line 16392
  HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer8; //@line 16394
  HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer10; //@line 16396
  HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer10; //@line 16398
  HEAP32[$AsyncCtx + 60 >> 2] = $0; //@line 16400
  HEAP32[$AsyncCtx + 64 >> 2] = $14; //@line 16402
  HEAP32[$AsyncCtx + 68 >> 2] = $9; //@line 16404
  HEAP32[$AsyncCtx + 72 >> 2] = $37; //@line 16406
  HEAP32[$AsyncCtx + 76 >> 2] = $3; //@line 16408
  HEAP32[$AsyncCtx + 80 >> 2] = $$pre$phiZ2D; //@line 16410
  HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer; //@line 16412
  HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer; //@line 16414
  HEAP32[$AsyncCtx + 92 >> 2] = $vararg_buffer1; //@line 16416
  HEAP32[$AsyncCtx + 96 >> 2] = $vararg_buffer1; //@line 16418
  sp = STACKTOP; //@line 16419
  STACKTOP = sp; //@line 16420
  return 0; //@line 16420
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16422
 L9 : do {
  if (!$49) {
   while (1) {
    $75 = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 16427
    HEAP8[$35 >> 0] = $75; //@line 16428
    HEAP8[$37 >> 0] = $75; //@line 16429
    $76 = HEAP32[$0 >> 2] | 0; //@line 16430
    $79 = HEAP32[(HEAP32[$76 >> 2] | 0) + 56 >> 2] | 0; //@line 16433
    $AsyncCtx14 = _emscripten_alloc_async_context(100, sp) | 0; //@line 16434
    $80 = FUNCTION_TABLE_iiiiii[$79 & 7]($76, $3, $48, $2, $$pre$phiZ2D) | 0; //@line 16435
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 16440
    if ($80) {
     break L9;
    }
   }
   HEAP32[$AsyncCtx14 >> 2] = 492; //@line 16445
   HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 16447
   HEAP32[$AsyncCtx14 + 8 >> 2] = $35; //@line 16449
   HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer4; //@line 16451
   HEAP32[$AsyncCtx14 + 16 >> 2] = $vararg_buffer4; //@line 16453
   HEAP32[$AsyncCtx14 + 20 >> 2] = $vararg_buffer6; //@line 16455
   HEAP32[$AsyncCtx14 + 24 >> 2] = $vararg_buffer6; //@line 16457
   HEAP32[$AsyncCtx14 + 28 >> 2] = $48; //@line 16459
   HEAP32[$AsyncCtx14 + 32 >> 2] = $2; //@line 16461
   HEAP32[$AsyncCtx14 + 36 >> 2] = $3; //@line 16463
   HEAP32[$AsyncCtx14 + 40 >> 2] = $2; //@line 16465
   HEAP32[$AsyncCtx14 + 44 >> 2] = $vararg_buffer8; //@line 16467
   HEAP32[$AsyncCtx14 + 48 >> 2] = $vararg_buffer8; //@line 16469
   HEAP32[$AsyncCtx14 + 52 >> 2] = $vararg_buffer10; //@line 16471
   HEAP32[$AsyncCtx14 + 56 >> 2] = $vararg_buffer10; //@line 16473
   HEAP32[$AsyncCtx14 + 60 >> 2] = $0; //@line 16475
   HEAP32[$AsyncCtx14 + 64 >> 2] = $14; //@line 16477
   HEAP32[$AsyncCtx14 + 68 >> 2] = $9; //@line 16479
   HEAP32[$AsyncCtx14 + 72 >> 2] = $37; //@line 16481
   HEAP32[$AsyncCtx14 + 76 >> 2] = $3; //@line 16483
   HEAP32[$AsyncCtx14 + 80 >> 2] = $$pre$phiZ2D; //@line 16485
   HEAP32[$AsyncCtx14 + 84 >> 2] = $vararg_buffer; //@line 16487
   HEAP32[$AsyncCtx14 + 88 >> 2] = $vararg_buffer; //@line 16489
   HEAP32[$AsyncCtx14 + 92 >> 2] = $vararg_buffer1; //@line 16491
   HEAP32[$AsyncCtx14 + 96 >> 2] = $vararg_buffer1; //@line 16493
   sp = STACKTOP; //@line 16494
   STACKTOP = sp; //@line 16495
   return 0; //@line 16495
  }
 } while (0);
 _printf(13544, $vararg_buffer) | 0; //@line 16498
 $108 = HEAP8[$37 >> 0] | 0; //@line 16502
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$48 >> 0]; //@line 16503
 HEAP32[$vararg_buffer1 + 4 >> 2] = $108; //@line 16505
 _printf(13557, $vararg_buffer1) | 0; //@line 16506
 $AsyncCtx35 = _emscripten_alloc_async_context(72, sp) | 0; //@line 16507
 _putchar(10) | 0; //@line 16508
 if (___async) {
  HEAP32[$AsyncCtx35 >> 2] = 493; //@line 16511
  HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 16513
  HEAP32[$AsyncCtx35 + 8 >> 2] = $35; //@line 16515
  HEAP32[$AsyncCtx35 + 12 >> 2] = $vararg_buffer4; //@line 16517
  HEAP32[$AsyncCtx35 + 16 >> 2] = $vararg_buffer4; //@line 16519
  HEAP32[$AsyncCtx35 + 20 >> 2] = $vararg_buffer6; //@line 16521
  HEAP32[$AsyncCtx35 + 24 >> 2] = $vararg_buffer6; //@line 16523
  HEAP32[$AsyncCtx35 + 28 >> 2] = $48; //@line 16525
  HEAP32[$AsyncCtx35 + 32 >> 2] = $2; //@line 16527
  HEAP32[$AsyncCtx35 + 36 >> 2] = $3; //@line 16529
  HEAP32[$AsyncCtx35 + 40 >> 2] = $2; //@line 16531
  HEAP32[$AsyncCtx35 + 44 >> 2] = $vararg_buffer8; //@line 16533
  HEAP32[$AsyncCtx35 + 48 >> 2] = $vararg_buffer8; //@line 16535
  HEAP32[$AsyncCtx35 + 52 >> 2] = $vararg_buffer10; //@line 16537
  HEAP32[$AsyncCtx35 + 56 >> 2] = $vararg_buffer10; //@line 16539
  HEAP32[$AsyncCtx35 + 60 >> 2] = $14; //@line 16541
  HEAP32[$AsyncCtx35 + 64 >> 2] = $0; //@line 16543
  HEAP32[$AsyncCtx35 + 68 >> 2] = $9; //@line 16545
  sp = STACKTOP; //@line 16546
  STACKTOP = sp; //@line 16547
  return 0; //@line 16547
 }
 _emscripten_free_async_context($AsyncCtx35 | 0); //@line 16549
 $126 = HEAP32[$0 >> 2] | 0; //@line 16550
 $129 = HEAP32[(HEAP32[$126 >> 2] | 0) + 72 >> 2] | 0; //@line 16553
 $130 = HEAP8[$35 >> 0] | 0; //@line 16554
 $132 = HEAP8[$0 + 1129 >> 0] | 0; //@line 16556
 $AsyncCtx17 = _emscripten_alloc_async_context(72, sp) | 0; //@line 16557
 $133 = FUNCTION_TABLE_iiii[$129 & 15]($126, $130, $132) | 0; //@line 16558
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 494; //@line 16561
  HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 16563
  HEAP32[$AsyncCtx17 + 8 >> 2] = $35; //@line 16565
  HEAP32[$AsyncCtx17 + 12 >> 2] = $vararg_buffer4; //@line 16567
  HEAP32[$AsyncCtx17 + 16 >> 2] = $vararg_buffer4; //@line 16569
  HEAP32[$AsyncCtx17 + 20 >> 2] = $vararg_buffer6; //@line 16571
  HEAP32[$AsyncCtx17 + 24 >> 2] = $vararg_buffer6; //@line 16573
  HEAP32[$AsyncCtx17 + 28 >> 2] = $48; //@line 16575
  HEAP32[$AsyncCtx17 + 32 >> 2] = $2; //@line 16577
  HEAP32[$AsyncCtx17 + 36 >> 2] = $3; //@line 16579
  HEAP32[$AsyncCtx17 + 40 >> 2] = $2; //@line 16581
  HEAP32[$AsyncCtx17 + 44 >> 2] = $vararg_buffer8; //@line 16583
  HEAP32[$AsyncCtx17 + 48 >> 2] = $vararg_buffer8; //@line 16585
  HEAP32[$AsyncCtx17 + 52 >> 2] = $vararg_buffer10; //@line 16587
  HEAP32[$AsyncCtx17 + 56 >> 2] = $vararg_buffer10; //@line 16589
  HEAP32[$AsyncCtx17 + 60 >> 2] = $0; //@line 16591
  HEAP32[$AsyncCtx17 + 64 >> 2] = $14; //@line 16593
  HEAP32[$AsyncCtx17 + 68 >> 2] = $9; //@line 16595
  sp = STACKTOP; //@line 16596
  STACKTOP = sp; //@line 16597
  return 0; //@line 16597
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 16599
 $151 = HEAP32[$0 >> 2] | 0; //@line 16600
 $154 = HEAP32[(HEAP32[$151 >> 2] | 0) + 28 >> 2] | 0; //@line 16603
 $155 = $0 + 1104 | 0; //@line 16604
 $156 = HEAP8[$155 >> 0] | 0; //@line 16605
 $157 = $0 + 1100 | 0; //@line 16606
 $158 = HEAP32[$157 >> 2] | 0; //@line 16607
 $AsyncCtx20 = _emscripten_alloc_async_context(80, sp) | 0; //@line 16609
 FUNCTION_TABLE_viiiii[$154 & 7]($151, $133, $156, $158, $0 + 1160 | 0); //@line 16610
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 495; //@line 16613
  HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 16615
  HEAP32[$AsyncCtx20 + 8 >> 2] = $35; //@line 16617
  HEAP32[$AsyncCtx20 + 12 >> 2] = $vararg_buffer4; //@line 16619
  HEAP32[$AsyncCtx20 + 16 >> 2] = $vararg_buffer4; //@line 16621
  HEAP32[$AsyncCtx20 + 20 >> 2] = $vararg_buffer6; //@line 16623
  HEAP32[$AsyncCtx20 + 24 >> 2] = $vararg_buffer6; //@line 16625
  HEAP32[$AsyncCtx20 + 28 >> 2] = $48; //@line 16627
  HEAP32[$AsyncCtx20 + 32 >> 2] = $2; //@line 16629
  HEAP32[$AsyncCtx20 + 36 >> 2] = $3; //@line 16631
  HEAP32[$AsyncCtx20 + 40 >> 2] = $2; //@line 16633
  HEAP32[$AsyncCtx20 + 44 >> 2] = $vararg_buffer8; //@line 16635
  HEAP32[$AsyncCtx20 + 48 >> 2] = $vararg_buffer8; //@line 16637
  HEAP32[$AsyncCtx20 + 52 >> 2] = $vararg_buffer10; //@line 16639
  HEAP32[$AsyncCtx20 + 56 >> 2] = $vararg_buffer10; //@line 16641
  HEAP32[$AsyncCtx20 + 60 >> 2] = $14; //@line 16643
  HEAP32[$AsyncCtx20 + 64 >> 2] = $0; //@line 16645
  HEAP32[$AsyncCtx20 + 68 >> 2] = $155; //@line 16647
  HEAP32[$AsyncCtx20 + 72 >> 2] = $157; //@line 16649
  HEAP32[$AsyncCtx20 + 76 >> 2] = $9; //@line 16651
  sp = STACKTOP; //@line 16652
  STACKTOP = sp; //@line 16653
  return 0; //@line 16653
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 16655
 $179 = HEAP32[$0 >> 2] | 0; //@line 16656
 $182 = HEAP32[(HEAP32[$179 >> 2] | 0) + 28 >> 2] | 0; //@line 16659
 $184 = HEAP8[$0 + 1136 >> 0] | 0; //@line 16661
 $185 = HEAP8[$155 >> 0] | 0; //@line 16662
 $186 = HEAP32[$157 >> 2] | 0; //@line 16663
 $AsyncCtx23 = _emscripten_alloc_async_context(72, sp) | 0; //@line 16665
 FUNCTION_TABLE_viiiii[$182 & 7]($179, $184, $185, $186, $0 + 1184 | 0); //@line 16666
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 496; //@line 16669
  HEAP32[$AsyncCtx23 + 4 >> 2] = $9; //@line 16671
  HEAP32[$AsyncCtx23 + 8 >> 2] = $0; //@line 16673
  HEAP32[$AsyncCtx23 + 12 >> 2] = $35; //@line 16675
  HEAP32[$AsyncCtx23 + 16 >> 2] = $vararg_buffer4; //@line 16677
  HEAP32[$AsyncCtx23 + 20 >> 2] = $vararg_buffer4; //@line 16679
  HEAP32[$AsyncCtx23 + 24 >> 2] = $vararg_buffer6; //@line 16681
  HEAP32[$AsyncCtx23 + 28 >> 2] = $vararg_buffer6; //@line 16683
  HEAP32[$AsyncCtx23 + 32 >> 2] = $0; //@line 16685
  HEAP32[$AsyncCtx23 + 36 >> 2] = $3; //@line 16687
  HEAP32[$AsyncCtx23 + 40 >> 2] = $2; //@line 16689
  HEAP32[$AsyncCtx23 + 44 >> 2] = $2; //@line 16691
  HEAP32[$AsyncCtx23 + 48 >> 2] = $48; //@line 16693
  HEAP32[$AsyncCtx23 + 52 >> 2] = $vararg_buffer8; //@line 16695
  HEAP32[$AsyncCtx23 + 56 >> 2] = $vararg_buffer8; //@line 16697
  HEAP32[$AsyncCtx23 + 60 >> 2] = $vararg_buffer10; //@line 16699
  HEAP32[$AsyncCtx23 + 64 >> 2] = $vararg_buffer10; //@line 16701
  HEAP32[$AsyncCtx23 + 68 >> 2] = $14; //@line 16703
  sp = STACKTOP; //@line 16704
  STACKTOP = sp; //@line 16705
  return 0; //@line 16705
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 16707
 do {
  if (!(HEAP8[$9 >> 0] | 0)) {
   HEAP32[$0 + 972 >> 2] = (HEAP32[$0 + 1172 >> 2] | 0) + (HEAP32[$0 + 1120 >> 2] | 0); //@line 16718
   $$sink = $0 + 1124 | 0; //@line 16720
  } else {
   $215 = HEAP8[$0 + 893 >> 0] | 0; //@line 16723
   $216 = HEAP8[$35 >> 0] | 0; //@line 16724
   $218 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0 + 4 | 0) | 0; //@line 16726
   _printf(13258, $vararg_buffer4) | 0; //@line 16727
   _printf(13584, $vararg_buffer6) | 0; //@line 16728
   $AsyncCtx31 = _emscripten_alloc_async_context(52, sp) | 0; //@line 16729
   _putchar(10) | 0; //@line 16730
   if (___async) {
    HEAP32[$AsyncCtx31 >> 2] = 497; //@line 16733
    HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 16735
    HEAP32[$AsyncCtx31 + 8 >> 2] = $0; //@line 16737
    HEAP8[$AsyncCtx31 + 12 >> 0] = $216; //@line 16739
    HEAP8[$AsyncCtx31 + 13 >> 0] = $215; //@line 16741
    HEAP8[$AsyncCtx31 + 14 >> 0] = $218; //@line 16743
    HEAP32[$AsyncCtx31 + 16 >> 2] = $3; //@line 16745
    HEAP32[$AsyncCtx31 + 20 >> 2] = $2; //@line 16747
    HEAP32[$AsyncCtx31 + 24 >> 2] = $2; //@line 16749
    HEAP32[$AsyncCtx31 + 28 >> 2] = $48; //@line 16751
    HEAP32[$AsyncCtx31 + 32 >> 2] = $vararg_buffer8; //@line 16753
    HEAP32[$AsyncCtx31 + 36 >> 2] = $vararg_buffer8; //@line 16755
    HEAP32[$AsyncCtx31 + 40 >> 2] = $vararg_buffer10; //@line 16757
    HEAP32[$AsyncCtx31 + 44 >> 2] = $vararg_buffer10; //@line 16759
    HEAP32[$AsyncCtx31 + 48 >> 2] = $14; //@line 16761
    sp = STACKTOP; //@line 16762
    STACKTOP = sp; //@line 16763
    return 0; //@line 16763
   }
   _emscripten_free_async_context($AsyncCtx31 | 0); //@line 16765
   $240 = ($218 & 255) + ($215 & 255) | 0; //@line 16773
   if ($240 >>> 0 < 256 & $240 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, $216, (HEAP8[$0 + 369 >> 0] | 0) != 0) | 0) & 255) >>> 0) {
    HEAP32[$0 + 972 >> 2] = (HEAP32[$0 + 1172 >> 2] | 0) + (HEAP32[$0 + 1112 >> 2] | 0); //@line 16785
    $$sink = $0 + 1116 | 0; //@line 16787
    break;
   } else {
    $$1 = -1010; //@line 16790
    STACKTOP = sp; //@line 16791
    return $$1 | 0; //@line 16791
   }
  }
 } while (0);
 HEAP32[$0 + 976 >> 2] = (HEAP32[$0 + 1196 >> 2] | 0) + (HEAP32[$$sink >> 2] | 0); //@line 16800
 if (!(HEAP32[$2 >> 2] | 0)) {
  $258 = HEAP8[$48 >> 0] | 0; //@line 16804
  $AsyncCtx42 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16805
  __ZN7LoRaMac21send_frame_on_channelEh($0, $258) | 0; //@line 16806
  if (___async) {
   HEAP32[$AsyncCtx42 >> 2] = 498; //@line 16809
   HEAP32[$AsyncCtx42 + 4 >> 2] = $3; //@line 16811
   HEAP32[$AsyncCtx42 + 8 >> 2] = $2; //@line 16813
   sp = STACKTOP; //@line 16814
   STACKTOP = sp; //@line 16815
   return 0; //@line 16815
  }
  _emscripten_free_async_context($AsyncCtx42 | 0); //@line 16817
  $$1 = 0; //@line 16818
  STACKTOP = sp; //@line 16819
  return $$1 | 0; //@line 16819
 }
 $261 = $0 + 968 | 0; //@line 16821
 HEAP32[$261 >> 2] = HEAP32[$261 >> 2] | 16; //@line 16824
 _printf(13544, $vararg_buffer8) | 0; //@line 16825
 HEAP32[$vararg_buffer10 >> 2] = HEAP32[$2 >> 2]; //@line 16827
 _printf(13608, $vararg_buffer10) | 0; //@line 16828
 $AsyncCtx27 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16829
 _putchar(10) | 0; //@line 16830
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 499; //@line 16833
  HEAP32[$AsyncCtx27 + 4 >> 2] = $14; //@line 16835
  HEAP32[$AsyncCtx27 + 8 >> 2] = $0; //@line 16837
  HEAP32[$AsyncCtx27 + 12 >> 2] = $2; //@line 16839
  HEAP32[$AsyncCtx27 + 16 >> 2] = $3; //@line 16841
  HEAP32[$AsyncCtx27 + 20 >> 2] = $2; //@line 16843
  sp = STACKTOP; //@line 16844
  STACKTOP = sp; //@line 16845
  return 0; //@line 16845
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 16847
 $270 = HEAP32[$14 >> 2] | 0; //@line 16848
 $272 = HEAP32[$2 >> 2] | 0; //@line 16850
 $AsyncCtx38 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16851
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($270, $0 + 1016 | 0, $272); //@line 16852
 if (___async) {
  HEAP32[$AsyncCtx38 >> 2] = 500; //@line 16855
  HEAP32[$AsyncCtx38 + 4 >> 2] = $3; //@line 16857
  HEAP32[$AsyncCtx38 + 8 >> 2] = $2; //@line 16859
  sp = STACKTOP; //@line 16860
  STACKTOP = sp; //@line 16861
  return 0; //@line 16861
 }
 _emscripten_free_async_context($AsyncCtx38 | 0); //@line 16863
 $$1 = 0; //@line 16864
 STACKTOP = sp; //@line 16865
 return $$1 | 0; //@line 16865
}
function __ZN7LoRaMac22get_phy_event_handlersEv($0) {
 $0 = $0 | 0;
 var $$pre = 0, $$pre$i$i = 0, $$pre$i$i21 = 0, $$pre$i$i34 = 0, $$pre$i$i50 = 0, $$pre$i$i66 = 0, $$pre119 = 0, $$pre120 = 0, $$pre121 = 0, $$pre122 = 0, $1 = 0, $102 = 0, $103 = 0, $114 = 0, $115 = 0, $121 = 0, $122 = 0, $124 = 0, $125 = 0, $128 = 0, $138 = 0, $139 = 0, $149 = 0, $150 = 0, $155 = 0, $156 = 0, $158 = 0, $159 = 0, $162 = 0, $170 = 0, $171 = 0, $179 = 0, $180 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $35 = 0, $36 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $6 = 0, $63 = 0, $64 = 0, $76 = 0, $77 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $9 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx41 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19499
 STACKTOP = STACKTOP + 16 | 0; //@line 19500
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19500
 $1 = sp; //@line 19501
 $2 = $1 + 12 | 0; //@line 19502
 HEAP32[$1 >> 2] = 571; //@line 19503
 HEAP32[$1 + 4 >> 2] = 0; //@line 19505
 HEAP32[$1 + 8 >> 2] = $0; //@line 19507
 HEAP32[$2 >> 2] = 848; //@line 19508
 $3 = $0 + 1212 | 0; //@line 19509
 do {
  if (($3 | 0) == ($1 | 0)) {
   $35 = 848; //@line 19513
   label = 10; //@line 19514
  } else {
   $5 = $0 + 1224 | 0; //@line 19516
   $6 = HEAP32[$5 >> 2] | 0; //@line 19517
   if (!$6) {
    $21 = 848; //@line 19520
   } else {
    $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 19523
    $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 19524
    FUNCTION_TABLE_vi[$9 & 1023]($3); //@line 19525
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 572; //@line 19528
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 19530
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 19532
     HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 19534
     HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 19536
     HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 19538
     HEAP32[$AsyncCtx + 24 >> 2] = $5; //@line 19540
     HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 19542
     HEAP32[$AsyncCtx + 32 >> 2] = $2; //@line 19544
     HEAP32[$AsyncCtx + 36 >> 2] = $1; //@line 19546
     sp = STACKTOP; //@line 19547
     STACKTOP = sp; //@line 19548
     return 0; //@line 19548
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 19550
    $$pre = HEAP32[$2 >> 2] | 0; //@line 19551
    if (!$$pre) {
     HEAP32[$5 >> 2] = 0; //@line 19554
     break;
    } else {
     $21 = $$pre; //@line 19557
    }
   }
   $22 = HEAP32[$21 + 4 >> 2] | 0; //@line 19561
   $AsyncCtx2 = _emscripten_alloc_async_context(40, sp) | 0; //@line 19562
   FUNCTION_TABLE_vii[$22 & 31]($3, $1); //@line 19563
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 573; //@line 19566
    HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 19568
    HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 19570
    HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 19572
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 19574
    HEAP32[$AsyncCtx2 + 20 >> 2] = $3; //@line 19576
    HEAP32[$AsyncCtx2 + 24 >> 2] = $1; //@line 19578
    HEAP32[$AsyncCtx2 + 28 >> 2] = $1; //@line 19580
    HEAP32[$AsyncCtx2 + 32 >> 2] = $2; //@line 19582
    HEAP32[$AsyncCtx2 + 36 >> 2] = $5; //@line 19584
    sp = STACKTOP; //@line 19585
    STACKTOP = sp; //@line 19586
    return 0; //@line 19586
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 19588
    $$pre$i$i = HEAP32[$2 >> 2] | 0; //@line 19589
    HEAP32[$5 >> 2] = $$pre$i$i; //@line 19591
    if (!$$pre$i$i) {
     break;
    } else {
     $35 = $$pre$i$i; //@line 19596
     label = 10; //@line 19597
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 10) {
   $36 = HEAP32[$35 + 8 >> 2] | 0; //@line 19606
   $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 19607
   FUNCTION_TABLE_vi[$36 & 1023]($1); //@line 19608
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 574; //@line 19611
    HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 19613
    HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 19615
    HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 19617
    HEAP32[$AsyncCtx5 + 16 >> 2] = $1; //@line 19619
    HEAP32[$AsyncCtx5 + 20 >> 2] = $3; //@line 19621
    HEAP32[$AsyncCtx5 + 24 >> 2] = $1; //@line 19623
    HEAP32[$AsyncCtx5 + 28 >> 2] = $1; //@line 19625
    sp = STACKTOP; //@line 19626
    STACKTOP = sp; //@line 19627
    return 0; //@line 19627
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 19629
    break;
   }
  }
 } while (0);
 $44 = $1 + 12 | 0; //@line 19634
 HEAP32[$1 >> 2] = 7; //@line 19635
 HEAP32[$1 + 4 >> 2] = 0; //@line 19637
 HEAP32[$1 + 8 >> 2] = $0; //@line 19639
 HEAP32[$44 >> 2] = 860; //@line 19640
 $45 = $0 + 1244 | 0; //@line 19641
 do {
  if (($45 | 0) == ($1 | 0)) {
   $76 = 860; //@line 19645
   label = 22; //@line 19646
  } else {
   $47 = $0 + 1256 | 0; //@line 19648
   $48 = HEAP32[$47 >> 2] | 0; //@line 19649
   if (!$48) {
    $63 = 860; //@line 19652
   } else {
    $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 19655
    $AsyncCtx8 = _emscripten_alloc_async_context(40, sp) | 0; //@line 19656
    FUNCTION_TABLE_vi[$51 & 1023]($45); //@line 19657
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 575; //@line 19660
     HEAP32[$AsyncCtx8 + 4 >> 2] = $0; //@line 19662
     HEAP32[$AsyncCtx8 + 8 >> 2] = $1; //@line 19664
     HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 19666
     HEAP32[$AsyncCtx8 + 16 >> 2] = $44; //@line 19668
     HEAP32[$AsyncCtx8 + 20 >> 2] = $47; //@line 19670
     HEAP32[$AsyncCtx8 + 24 >> 2] = $1; //@line 19672
     HEAP32[$AsyncCtx8 + 28 >> 2] = $1; //@line 19674
     HEAP32[$AsyncCtx8 + 32 >> 2] = $45; //@line 19676
     HEAP32[$AsyncCtx8 + 36 >> 2] = $1; //@line 19678
     sp = STACKTOP; //@line 19679
     STACKTOP = sp; //@line 19680
     return 0; //@line 19680
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 19682
    $$pre119 = HEAP32[$44 >> 2] | 0; //@line 19683
    if (!$$pre119) {
     HEAP32[$47 >> 2] = 0; //@line 19686
     break;
    } else {
     $63 = $$pre119; //@line 19689
    }
   }
   $64 = HEAP32[$63 + 4 >> 2] | 0; //@line 19693
   $AsyncCtx11 = _emscripten_alloc_async_context(36, sp) | 0; //@line 19694
   FUNCTION_TABLE_vii[$64 & 31]($45, $1); //@line 19695
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 576; //@line 19698
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 19700
    HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 19702
    HEAP32[$AsyncCtx11 + 12 >> 2] = $3; //@line 19704
    HEAP32[$AsyncCtx11 + 16 >> 2] = $44; //@line 19706
    HEAP32[$AsyncCtx11 + 20 >> 2] = $47; //@line 19708
    HEAP32[$AsyncCtx11 + 24 >> 2] = $1; //@line 19710
    HEAP32[$AsyncCtx11 + 28 >> 2] = $1; //@line 19712
    HEAP32[$AsyncCtx11 + 32 >> 2] = $1; //@line 19714
    sp = STACKTOP; //@line 19715
    STACKTOP = sp; //@line 19716
    return 0; //@line 19716
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 19718
    $$pre$i$i21 = HEAP32[$44 >> 2] | 0; //@line 19719
    HEAP32[$47 >> 2] = $$pre$i$i21; //@line 19721
    if (!$$pre$i$i21) {
     break;
    } else {
     $76 = $$pre$i$i21; //@line 19726
     label = 22; //@line 19727
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 22) {
   $77 = HEAP32[$76 + 8 >> 2] | 0; //@line 19736
   $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 19737
   FUNCTION_TABLE_vi[$77 & 1023]($1); //@line 19738
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 577; //@line 19741
    HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 19743
    HEAP32[$AsyncCtx14 + 8 >> 2] = $1; //@line 19745
    HEAP32[$AsyncCtx14 + 12 >> 2] = $3; //@line 19747
    HEAP32[$AsyncCtx14 + 16 >> 2] = $1; //@line 19749
    HEAP32[$AsyncCtx14 + 20 >> 2] = $1; //@line 19751
    HEAP32[$AsyncCtx14 + 24 >> 2] = $1; //@line 19753
    sp = STACKTOP; //@line 19754
    STACKTOP = sp; //@line 19755
    return 0; //@line 19755
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 19757
    break;
   }
  }
 } while (0);
 $84 = $1 + 12 | 0; //@line 19762
 HEAP32[$1 >> 2] = 578; //@line 19763
 HEAP32[$1 + 4 >> 2] = 0; //@line 19765
 HEAP32[$1 + 8 >> 2] = $0; //@line 19767
 HEAP32[$84 >> 2] = 848; //@line 19768
 $85 = $0 + 1276 | 0; //@line 19769
 do {
  if (($85 | 0) == ($1 | 0)) {
   $114 = 848; //@line 19773
   label = 34; //@line 19774
  } else {
   $87 = $0 + 1288 | 0; //@line 19776
   $88 = HEAP32[$87 >> 2] | 0; //@line 19777
   if (!$88) {
    $102 = 848; //@line 19780
   } else {
    $91 = HEAP32[$88 + 8 >> 2] | 0; //@line 19783
    $AsyncCtx17 = _emscripten_alloc_async_context(36, sp) | 0; //@line 19784
    FUNCTION_TABLE_vi[$91 & 1023]($85); //@line 19785
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 579; //@line 19788
     HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 19790
     HEAP32[$AsyncCtx17 + 8 >> 2] = $1; //@line 19792
     HEAP32[$AsyncCtx17 + 12 >> 2] = $84; //@line 19794
     HEAP32[$AsyncCtx17 + 16 >> 2] = $3; //@line 19796
     HEAP32[$AsyncCtx17 + 20 >> 2] = $87; //@line 19798
     HEAP32[$AsyncCtx17 + 24 >> 2] = $1; //@line 19800
     HEAP32[$AsyncCtx17 + 28 >> 2] = $1; //@line 19802
     HEAP32[$AsyncCtx17 + 32 >> 2] = $85; //@line 19804
     sp = STACKTOP; //@line 19805
     STACKTOP = sp; //@line 19806
     return 0; //@line 19806
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 19808
    $$pre120 = HEAP32[$84 >> 2] | 0; //@line 19809
    if (!$$pre120) {
     HEAP32[$87 >> 2] = 0; //@line 19812
     break;
    } else {
     $102 = $$pre120; //@line 19815
    }
   }
   $103 = HEAP32[$102 + 4 >> 2] | 0; //@line 19819
   $AsyncCtx20 = _emscripten_alloc_async_context(32, sp) | 0; //@line 19820
   FUNCTION_TABLE_vii[$103 & 31]($85, $1); //@line 19821
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 580; //@line 19824
    HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 19826
    HEAP32[$AsyncCtx20 + 8 >> 2] = $1; //@line 19828
    HEAP32[$AsyncCtx20 + 12 >> 2] = $3; //@line 19830
    HEAP32[$AsyncCtx20 + 16 >> 2] = $84; //@line 19832
    HEAP32[$AsyncCtx20 + 20 >> 2] = $87; //@line 19834
    HEAP32[$AsyncCtx20 + 24 >> 2] = $1; //@line 19836
    HEAP32[$AsyncCtx20 + 28 >> 2] = $1; //@line 19838
    sp = STACKTOP; //@line 19839
    STACKTOP = sp; //@line 19840
    return 0; //@line 19840
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 19842
    $$pre$i$i34 = HEAP32[$84 >> 2] | 0; //@line 19843
    HEAP32[$87 >> 2] = $$pre$i$i34; //@line 19845
    if (!$$pre$i$i34) {
     break;
    } else {
     $114 = $$pre$i$i34; //@line 19850
     label = 34; //@line 19851
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 34) {
   $115 = HEAP32[$114 + 8 >> 2] | 0; //@line 19860
   $AsyncCtx23 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19861
   FUNCTION_TABLE_vi[$115 & 1023]($1); //@line 19862
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 581; //@line 19865
    HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 19867
    HEAP32[$AsyncCtx23 + 8 >> 2] = $1; //@line 19869
    HEAP32[$AsyncCtx23 + 12 >> 2] = $3; //@line 19871
    HEAP32[$AsyncCtx23 + 16 >> 2] = $1; //@line 19873
    HEAP32[$AsyncCtx23 + 20 >> 2] = $1; //@line 19875
    sp = STACKTOP; //@line 19876
    STACKTOP = sp; //@line 19877
    return 0; //@line 19877
   } else {
    _emscripten_free_async_context($AsyncCtx23 | 0); //@line 19879
    break;
   }
  }
 } while (0);
 $121 = $1 + 12 | 0; //@line 19884
 HEAP32[$1 >> 2] = 582; //@line 19885
 HEAP32[$1 + 4 >> 2] = 0; //@line 19887
 HEAP32[$1 + 8 >> 2] = $0; //@line 19889
 HEAP32[$121 >> 2] = 848; //@line 19890
 $122 = $0 + 1228 | 0; //@line 19891
 do {
  if (($122 | 0) == ($1 | 0)) {
   $149 = 848; //@line 19895
   label = 46; //@line 19896
  } else {
   $124 = $0 + 1240 | 0; //@line 19898
   $125 = HEAP32[$124 >> 2] | 0; //@line 19899
   if (!$125) {
    $138 = 848; //@line 19902
   } else {
    $128 = HEAP32[$125 + 8 >> 2] | 0; //@line 19905
    $AsyncCtx26 = _emscripten_alloc_async_context(32, sp) | 0; //@line 19906
    FUNCTION_TABLE_vi[$128 & 1023]($122); //@line 19907
    if (___async) {
     HEAP32[$AsyncCtx26 >> 2] = 583; //@line 19910
     HEAP32[$AsyncCtx26 + 4 >> 2] = $0; //@line 19912
     HEAP32[$AsyncCtx26 + 8 >> 2] = $1; //@line 19914
     HEAP32[$AsyncCtx26 + 12 >> 2] = $1; //@line 19916
     HEAP32[$AsyncCtx26 + 16 >> 2] = $122; //@line 19918
     HEAP32[$AsyncCtx26 + 20 >> 2] = $124; //@line 19920
     HEAP32[$AsyncCtx26 + 24 >> 2] = $3; //@line 19922
     HEAP32[$AsyncCtx26 + 28 >> 2] = $121; //@line 19924
     sp = STACKTOP; //@line 19925
     STACKTOP = sp; //@line 19926
     return 0; //@line 19926
    }
    _emscripten_free_async_context($AsyncCtx26 | 0); //@line 19928
    $$pre121 = HEAP32[$121 >> 2] | 0; //@line 19929
    if (!$$pre121) {
     HEAP32[$124 >> 2] = 0; //@line 19932
     break;
    } else {
     $138 = $$pre121; //@line 19935
    }
   }
   $139 = HEAP32[$138 + 4 >> 2] | 0; //@line 19939
   $AsyncCtx29 = _emscripten_alloc_async_context(28, sp) | 0; //@line 19940
   FUNCTION_TABLE_vii[$139 & 31]($122, $1); //@line 19941
   if (___async) {
    HEAP32[$AsyncCtx29 >> 2] = 584; //@line 19944
    HEAP32[$AsyncCtx29 + 4 >> 2] = $0; //@line 19946
    HEAP32[$AsyncCtx29 + 8 >> 2] = $1; //@line 19948
    HEAP32[$AsyncCtx29 + 12 >> 2] = $1; //@line 19950
    HEAP32[$AsyncCtx29 + 16 >> 2] = $3; //@line 19952
    HEAP32[$AsyncCtx29 + 20 >> 2] = $121; //@line 19954
    HEAP32[$AsyncCtx29 + 24 >> 2] = $124; //@line 19956
    sp = STACKTOP; //@line 19957
    STACKTOP = sp; //@line 19958
    return 0; //@line 19958
   } else {
    _emscripten_free_async_context($AsyncCtx29 | 0); //@line 19960
    $$pre$i$i50 = HEAP32[$121 >> 2] | 0; //@line 19961
    HEAP32[$124 >> 2] = $$pre$i$i50; //@line 19963
    if (!$$pre$i$i50) {
     break;
    } else {
     $149 = $$pre$i$i50; //@line 19968
     label = 46; //@line 19969
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 46) {
   $150 = HEAP32[$149 + 8 >> 2] | 0; //@line 19978
   $AsyncCtx32 = _emscripten_alloc_async_context(20, sp) | 0; //@line 19979
   FUNCTION_TABLE_vi[$150 & 1023]($1); //@line 19980
   if (___async) {
    HEAP32[$AsyncCtx32 >> 2] = 585; //@line 19983
    HEAP32[$AsyncCtx32 + 4 >> 2] = $1; //@line 19985
    HEAP32[$AsyncCtx32 + 8 >> 2] = $1; //@line 19987
    HEAP32[$AsyncCtx32 + 12 >> 2] = $0; //@line 19989
    HEAP32[$AsyncCtx32 + 16 >> 2] = $3; //@line 19991
    sp = STACKTOP; //@line 19992
    STACKTOP = sp; //@line 19993
    return 0; //@line 19993
   } else {
    _emscripten_free_async_context($AsyncCtx32 | 0); //@line 19995
    break;
   }
  }
 } while (0);
 $155 = $1 + 12 | 0; //@line 20000
 HEAP32[$1 >> 2] = 586; //@line 20001
 HEAP32[$1 + 4 >> 2] = 0; //@line 20003
 HEAP32[$1 + 8 >> 2] = $0; //@line 20005
 HEAP32[$155 >> 2] = 848; //@line 20006
 $156 = $0 + 1260 | 0; //@line 20007
 if (($156 | 0) == ($1 | 0)) {
  $179 = 848; //@line 20010
 } else {
  $158 = $0 + 1272 | 0; //@line 20012
  $159 = HEAP32[$158 >> 2] | 0; //@line 20013
  if (!$159) {
   $170 = 848; //@line 20016
  } else {
   $162 = HEAP32[$159 + 8 >> 2] | 0; //@line 20019
   $AsyncCtx35 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20020
   FUNCTION_TABLE_vi[$162 & 1023]($156); //@line 20021
   if (___async) {
    HEAP32[$AsyncCtx35 >> 2] = 587; //@line 20024
    HEAP32[$AsyncCtx35 + 4 >> 2] = $155; //@line 20026
    HEAP32[$AsyncCtx35 + 8 >> 2] = $158; //@line 20028
    HEAP32[$AsyncCtx35 + 12 >> 2] = $156; //@line 20030
    HEAP32[$AsyncCtx35 + 16 >> 2] = $1; //@line 20032
    HEAP32[$AsyncCtx35 + 20 >> 2] = $3; //@line 20034
    sp = STACKTOP; //@line 20035
    STACKTOP = sp; //@line 20036
    return 0; //@line 20036
   }
   _emscripten_free_async_context($AsyncCtx35 | 0); //@line 20038
   $$pre122 = HEAP32[$155 >> 2] | 0; //@line 20039
   if (!$$pre122) {
    HEAP32[$158 >> 2] = 0; //@line 20042
    STACKTOP = sp; //@line 20043
    return $3 | 0; //@line 20043
   } else {
    $170 = $$pre122; //@line 20045
   }
  }
  $171 = HEAP32[$170 + 4 >> 2] | 0; //@line 20049
  $AsyncCtx38 = _emscripten_alloc_async_context(20, sp) | 0; //@line 20050
  FUNCTION_TABLE_vii[$171 & 31]($156, $1); //@line 20051
  if (___async) {
   HEAP32[$AsyncCtx38 >> 2] = 588; //@line 20054
   HEAP32[$AsyncCtx38 + 4 >> 2] = $155; //@line 20056
   HEAP32[$AsyncCtx38 + 8 >> 2] = $158; //@line 20058
   HEAP32[$AsyncCtx38 + 12 >> 2] = $1; //@line 20060
   HEAP32[$AsyncCtx38 + 16 >> 2] = $3; //@line 20062
   sp = STACKTOP; //@line 20063
   STACKTOP = sp; //@line 20064
   return 0; //@line 20064
  }
  _emscripten_free_async_context($AsyncCtx38 | 0); //@line 20066
  $$pre$i$i66 = HEAP32[$155 >> 2] | 0; //@line 20067
  HEAP32[$158 >> 2] = $$pre$i$i66; //@line 20069
  if (!$$pre$i$i66) {
   STACKTOP = sp; //@line 20072
   return $3 | 0; //@line 20072
  } else {
   $179 = $$pre$i$i66; //@line 20074
  }
 }
 $180 = HEAP32[$179 + 8 >> 2] | 0; //@line 20078
 $AsyncCtx41 = _emscripten_alloc_async_context(12, sp) | 0; //@line 20079
 FUNCTION_TABLE_vi[$180 & 1023]($1); //@line 20080
 if (___async) {
  HEAP32[$AsyncCtx41 >> 2] = 589; //@line 20083
  HEAP32[$AsyncCtx41 + 4 >> 2] = $1; //@line 20085
  HEAP32[$AsyncCtx41 + 8 >> 2] = $3; //@line 20087
  sp = STACKTOP; //@line 20088
  STACKTOP = sp; //@line 20089
  return 0; //@line 20089
 }
 _emscripten_free_async_context($AsyncCtx41 | 0); //@line 20091
 STACKTOP = sp; //@line 20092
 return $3 | 0; //@line 20092
}
function _mbedtls_cipher_cmac_finish($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$013$i = 0, $$01720$i55 = 0, $$019$i = 0, $$019$i52 = 0, $$021$i54 = 0, $$09$i = 0, $$09$i41 = 0, $$09$i45 = 0, $$sink$sink$i = 0, $12 = 0, $129 = 0, $132 = 0, $145 = 0, $148 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $170 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0, $202 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, label = 0, sp = 0, $156$looptemp = 0;
 sp = STACKTOP; //@line 3152
 STACKTOP = STACKTOP + 80 | 0; //@line 3153
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 3153
 $2 = sp + 56 | 0; //@line 3154
 $3 = sp + 4 | 0; //@line 3155
 $4 = sp + 40 | 0; //@line 3156
 $5 = sp + 24 | 0; //@line 3157
 $6 = sp + 8 | 0; //@line 3158
 $7 = sp; //@line 3159
 if (!$0) {
  $$0 = -24832; //@line 3162
  STACKTOP = sp; //@line 3163
  return $$0 | 0; //@line 3163
 }
 $9 = HEAP32[$0 >> 2] | 0; //@line 3165
 if (!$9) {
  $$0 = -24832; //@line 3168
  STACKTOP = sp; //@line 3169
  return $$0 | 0; //@line 3169
 }
 $12 = HEAP32[$0 + 64 >> 2] | 0; //@line 3172
 if (($1 | 0) == 0 | ($12 | 0) == 0) {
  $$0 = -24832; //@line 3177
  STACKTOP = sp; //@line 3178
  return $$0 | 0; //@line 3178
 }
 $16 = HEAP32[$9 + 24 >> 2] | 0; //@line 3181
 $17 = $4 + 1 | 0; //@line 3182
 HEAP8[$4 >> 0] = 0; //@line 3183
 $18 = $4 + 2 | 0; //@line 3184
 HEAP8[$17 >> 0] = 0; //@line 3185
 $19 = $4 + 3 | 0; //@line 3186
 HEAP8[$18 >> 0] = 0; //@line 3187
 $20 = $4 + 4 | 0; //@line 3188
 HEAP8[$19 >> 0] = 0; //@line 3189
 $21 = $4 + 5 | 0; //@line 3190
 HEAP8[$20 >> 0] = 0; //@line 3191
 $22 = $4 + 6 | 0; //@line 3192
 HEAP8[$21 >> 0] = 0; //@line 3193
 $23 = $4 + 7 | 0; //@line 3194
 HEAP8[$22 >> 0] = 0; //@line 3195
 $24 = $4 + 8 | 0; //@line 3196
 HEAP8[$23 >> 0] = 0; //@line 3197
 $25 = $4 + 9 | 0; //@line 3198
 HEAP8[$24 >> 0] = 0; //@line 3199
 $26 = $4 + 10 | 0; //@line 3200
 HEAP8[$25 >> 0] = 0; //@line 3201
 $27 = $4 + 11 | 0; //@line 3202
 HEAP8[$26 >> 0] = 0; //@line 3203
 $28 = $4 + 12 | 0; //@line 3204
 HEAP8[$27 >> 0] = 0; //@line 3205
 $29 = $4 + 13 | 0; //@line 3206
 HEAP8[$28 >> 0] = 0; //@line 3207
 $30 = $4 + 14 | 0; //@line 3208
 HEAP8[$29 >> 0] = 0; //@line 3209
 $31 = $4 + 15 | 0; //@line 3210
 HEAP8[$30 >> 0] = 0; //@line 3211
 HEAP8[$31 >> 0] = 0; //@line 3212
 $32 = $5 + 1 | 0; //@line 3213
 HEAP8[$5 >> 0] = 0; //@line 3214
 $33 = $5 + 2 | 0; //@line 3215
 HEAP8[$32 >> 0] = 0; //@line 3216
 $34 = $5 + 3 | 0; //@line 3217
 HEAP8[$33 >> 0] = 0; //@line 3218
 $35 = $5 + 4 | 0; //@line 3219
 HEAP8[$34 >> 0] = 0; //@line 3220
 $36 = $5 + 5 | 0; //@line 3221
 HEAP8[$35 >> 0] = 0; //@line 3222
 $37 = $5 + 6 | 0; //@line 3223
 HEAP8[$36 >> 0] = 0; //@line 3224
 $38 = $5 + 7 | 0; //@line 3225
 HEAP8[$37 >> 0] = 0; //@line 3226
 $39 = $5 + 8 | 0; //@line 3227
 HEAP8[$38 >> 0] = 0; //@line 3228
 $40 = $5 + 9 | 0; //@line 3229
 HEAP8[$39 >> 0] = 0; //@line 3230
 $41 = $5 + 10 | 0; //@line 3231
 HEAP8[$40 >> 0] = 0; //@line 3232
 $42 = $5 + 11 | 0; //@line 3233
 HEAP8[$41 >> 0] = 0; //@line 3234
 $43 = $5 + 12 | 0; //@line 3235
 HEAP8[$42 >> 0] = 0; //@line 3236
 $44 = $5 + 13 | 0; //@line 3237
 HEAP8[$43 >> 0] = 0; //@line 3238
 $45 = $5 + 14 | 0; //@line 3239
 HEAP8[$44 >> 0] = 0; //@line 3240
 $46 = $5 + 15 | 0; //@line 3241
 HEAP8[$45 >> 0] = 0; //@line 3242
 HEAP8[$46 >> 0] = 0; //@line 3243
 $47 = $2 + 1 | 0; //@line 3244
 HEAP8[$2 >> 0] = 0; //@line 3245
 $48 = $2 + 2 | 0; //@line 3246
 HEAP8[$47 >> 0] = 0; //@line 3247
 $49 = $2 + 3 | 0; //@line 3248
 HEAP8[$48 >> 0] = 0; //@line 3249
 $50 = $2 + 4 | 0; //@line 3250
 HEAP8[$49 >> 0] = 0; //@line 3251
 $51 = $2 + 5 | 0; //@line 3252
 HEAP8[$50 >> 0] = 0; //@line 3253
 $52 = $2 + 6 | 0; //@line 3254
 HEAP8[$51 >> 0] = 0; //@line 3255
 $53 = $2 + 7 | 0; //@line 3256
 HEAP8[$52 >> 0] = 0; //@line 3257
 $54 = $2 + 8 | 0; //@line 3258
 HEAP8[$53 >> 0] = 0; //@line 3259
 $55 = $2 + 9 | 0; //@line 3260
 HEAP8[$54 >> 0] = 0; //@line 3261
 $56 = $2 + 10 | 0; //@line 3262
 HEAP8[$55 >> 0] = 0; //@line 3263
 $57 = $2 + 11 | 0; //@line 3264
 HEAP8[$56 >> 0] = 0; //@line 3265
 $58 = $2 + 12 | 0; //@line 3266
 HEAP8[$57 >> 0] = 0; //@line 3267
 $59 = $2 + 13 | 0; //@line 3268
 HEAP8[$58 >> 0] = 0; //@line 3269
 $60 = $2 + 14 | 0; //@line 3270
 HEAP8[$59 >> 0] = 0; //@line 3271
 $61 = $2 + 15 | 0; //@line 3272
 HEAP8[$60 >> 0] = 0; //@line 3273
 HEAP8[$61 >> 0] = 0; //@line 3274
 $64 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 3277
 $AsyncCtx2 = _emscripten_alloc_async_context(252, sp) | 0; //@line 3278
 $65 = _mbedtls_cipher_update($0, $2, $64, $2, $3) | 0; //@line 3279
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 693; //@line 3282
  HEAP32[$AsyncCtx2 + 4 >> 2] = $12; //@line 3284
  HEAP32[$AsyncCtx2 + 8 >> 2] = $46; //@line 3286
  HEAP32[$AsyncCtx2 + 12 >> 2] = $34; //@line 3288
  HEAP32[$AsyncCtx2 + 16 >> 2] = $37; //@line 3290
  HEAP32[$AsyncCtx2 + 20 >> 2] = $54; //@line 3292
  HEAP32[$AsyncCtx2 + 24 >> 2] = $2; //@line 3294
  HEAP32[$AsyncCtx2 + 28 >> 2] = $25; //@line 3296
  HEAP32[$AsyncCtx2 + 32 >> 2] = $57; //@line 3298
  HEAP32[$AsyncCtx2 + 36 >> 2] = $47; //@line 3300
  HEAP32[$AsyncCtx2 + 40 >> 2] = $5; //@line 3302
  HEAP32[$AsyncCtx2 + 44 >> 2] = $18; //@line 3304
  HEAP32[$AsyncCtx2 + 48 >> 2] = $39; //@line 3306
  HEAP32[$AsyncCtx2 + 52 >> 2] = $30; //@line 3308
  HEAP32[$AsyncCtx2 + 56 >> 2] = $59; //@line 3310
  HEAP32[$AsyncCtx2 + 60 >> 2] = $64; //@line 3312
  HEAP32[$AsyncCtx2 + 64 >> 2] = $22; //@line 3314
  HEAP32[$AsyncCtx2 + 68 >> 2] = $36; //@line 3316
  HEAP32[$AsyncCtx2 + 72 >> 2] = $50; //@line 3318
  HEAP32[$AsyncCtx2 + 76 >> 2] = $56; //@line 3320
  HEAP32[$AsyncCtx2 + 80 >> 2] = $40; //@line 3322
  HEAP32[$AsyncCtx2 + 84 >> 2] = $43; //@line 3324
  HEAP32[$AsyncCtx2 + 88 >> 2] = $60; //@line 3326
  HEAP32[$AsyncCtx2 + 92 >> 2] = $19; //@line 3328
  HEAP32[$AsyncCtx2 + 96 >> 2] = $33; //@line 3330
  HEAP32[$AsyncCtx2 + 100 >> 2] = $6; //@line 3332
  HEAP32[$AsyncCtx2 + 104 >> 2] = $32; //@line 3334
  HEAP32[$AsyncCtx2 + 108 >> 2] = $53; //@line 3336
  HEAP32[$AsyncCtx2 + 112 >> 2] = $20; //@line 3338
  HEAP32[$AsyncCtx2 + 116 >> 2] = $23; //@line 3340
  HEAP32[$AsyncCtx2 + 120 >> 2] = $16; //@line 3342
  HEAP32[$AsyncCtx2 + 124 >> 2] = $26; //@line 3344
  HEAP32[$AsyncCtx2 + 128 >> 2] = $29; //@line 3346
  HEAP32[$AsyncCtx2 + 132 >> 2] = $38; //@line 3348
  HEAP32[$AsyncCtx2 + 136 >> 2] = $35; //@line 3350
  HEAP32[$AsyncCtx2 + 140 >> 2] = $49; //@line 3352
  HEAP32[$AsyncCtx2 + 144 >> 2] = $41; //@line 3354
  HEAP32[$AsyncCtx2 + 148 >> 2] = $61; //@line 3356
  HEAP32[$AsyncCtx2 + 152 >> 2] = $55; //@line 3358
  HEAP32[$AsyncCtx2 + 156 >> 2] = $44; //@line 3360
  HEAP32[$AsyncCtx2 + 160 >> 2] = $7; //@line 3362
  HEAP32[$AsyncCtx2 + 164 >> 2] = $6; //@line 3364
  HEAP32[$AsyncCtx2 + 168 >> 2] = $3; //@line 3366
  HEAP32[$AsyncCtx2 + 172 >> 2] = $52; //@line 3368
  HEAP32[$AsyncCtx2 + 176 >> 2] = $5; //@line 3370
  HEAP32[$AsyncCtx2 + 180 >> 2] = $2; //@line 3372
  HEAP32[$AsyncCtx2 + 184 >> 2] = $7; //@line 3374
  HEAP32[$AsyncCtx2 + 188 >> 2] = $28; //@line 3376
  HEAP32[$AsyncCtx2 + 192 >> 2] = $42; //@line 3378
  HEAP32[$AsyncCtx2 + 196 >> 2] = $1; //@line 3380
  HEAP32[$AsyncCtx2 + 200 >> 2] = $12; //@line 3382
  HEAP32[$AsyncCtx2 + 204 >> 2] = $0; //@line 3384
  HEAP32[$AsyncCtx2 + 208 >> 2] = $21; //@line 3386
  HEAP32[$AsyncCtx2 + 212 >> 2] = $27; //@line 3388
  HEAP32[$AsyncCtx2 + 216 >> 2] = $4; //@line 3390
  HEAP32[$AsyncCtx2 + 220 >> 2] = $4; //@line 3392
  HEAP32[$AsyncCtx2 + 224 >> 2] = $48; //@line 3394
  HEAP32[$AsyncCtx2 + 228 >> 2] = $51; //@line 3396
  HEAP32[$AsyncCtx2 + 232 >> 2] = $31; //@line 3398
  HEAP32[$AsyncCtx2 + 236 >> 2] = $45; //@line 3400
  HEAP32[$AsyncCtx2 + 240 >> 2] = $58; //@line 3402
  HEAP32[$AsyncCtx2 + 244 >> 2] = $17; //@line 3404
  HEAP32[$AsyncCtx2 + 248 >> 2] = $24; //@line 3406
  sp = STACKTOP; //@line 3407
  STACKTOP = sp; //@line 3408
  return 0; //@line 3408
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3410
 L13 : do {
  if (!$65) {
   switch ($64 | 0) {
   case 16:
    {
     $$019$i52 = 135; //@line 3416
     break;
    }
   case 8:
    {
     $$019$i52 = 27; //@line 3420
     break;
    }
   default:
    {
     break L13;
    }
   }
   $129 = $64 + -1 | 0; //@line 3427
   $$01720$i55 = 0; //@line 3428
   $$021$i54 = $129; //@line 3428
   while (1) {
    $132 = HEAPU8[$2 + $$021$i54 >> 0] | 0; //@line 3432
    HEAP8[$4 + $$021$i54 >> 0] = $132 << 1 | $$01720$i55; //@line 3437
    if (($$021$i54 | 0) > 0) {
     $$01720$i55 = $132 >>> 7; //@line 3442
     $$021$i54 = $$021$i54 + -1 | 0; //@line 3442
    } else {
     break;
    }
   }
   $145 = $4 + $129 | 0; //@line 3452
   $148 = $$019$i52 & 0 - ((HEAPU8[$2 >> 0] | 0) >>> 7) ^ (HEAPU8[$145 >> 0] | 0); //@line 3455
   HEAP8[$145 >> 0] = $148; //@line 3457
   switch ($64 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 3460
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 3464
     break;
    }
   default:
    {
     break L13;
    }
   }
   HEAP8[$5 + $129 >> 0] = $148 << 1; //@line 3474
   if (($129 | 0) > 0) {
    $156 = $148; //@line 3478
    $157 = $64 + -2 | 0; //@line 3478
    while (1) {
     $156$looptemp = $156;
     $156 = HEAPU8[$4 + $157 >> 0] | 0; //@line 3483
     HEAP8[$5 + $157 >> 0] = $156 << 1 | $156$looptemp >>> 7; //@line 3488
     if (($157 | 0) <= 0) {
      break;
     } else {
      $157 = $157 + -1 | 0; //@line 3492
     }
    }
   }
   $170 = $5 + $129 | 0; //@line 3503
   HEAP8[$170 >> 0] = $$019$i & 0 - ((HEAPU8[$4 >> 0] | 0) >>> 7) ^ (HEAPU8[$170 >> 0] | 0); //@line 3508
  }
 } while (0);
 HEAP8[$2 >> 0] = 0; //@line 3511
 HEAP8[$47 >> 0] = 0; //@line 3512
 HEAP8[$48 >> 0] = 0; //@line 3513
 HEAP8[$49 >> 0] = 0; //@line 3514
 HEAP8[$50 >> 0] = 0; //@line 3515
 HEAP8[$51 >> 0] = 0; //@line 3516
 HEAP8[$52 >> 0] = 0; //@line 3517
 HEAP8[$53 >> 0] = 0; //@line 3518
 HEAP8[$54 >> 0] = 0; //@line 3519
 HEAP8[$55 >> 0] = 0; //@line 3520
 HEAP8[$56 >> 0] = 0; //@line 3521
 HEAP8[$57 >> 0] = 0; //@line 3522
 HEAP8[$58 >> 0] = 0; //@line 3523
 HEAP8[$59 >> 0] = 0; //@line 3524
 HEAP8[$60 >> 0] = 0; //@line 3525
 HEAP8[$61 >> 0] = 0; //@line 3526
 $175 = $12 + 16 | 0; //@line 3527
 $176 = $12 + 32 | 0; //@line 3528
 $177 = HEAP32[$176 >> 2] | 0; //@line 3529
 if ($177 >>> 0 < $16 >>> 0) {
  $$013$i = 0; //@line 3532
  do {
   if ($$013$i >>> 0 < $177 >>> 0) {
    $$sink$sink$i = HEAP8[$12 + 16 + $$013$i >> 0] | 0; //@line 3538
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($177 | 0) ? -128 : 0; //@line 3542
   }
   HEAP8[$6 + $$013$i >> 0] = $$sink$sink$i; //@line 3545
   $$013$i = $$013$i + 1 | 0; //@line 3546
  } while (($$013$i | 0) != ($16 | 0));
  $$09$i45 = 0; //@line 3549
  do {
   $185 = $6 + $$09$i45 | 0; //@line 3556
   HEAP8[$185 >> 0] = HEAP8[$5 + $$09$i45 >> 0] ^ HEAP8[$185 >> 0]; //@line 3561
   $$09$i45 = $$09$i45 + 1 | 0; //@line 3562
  } while (($$09$i45 | 0) != ($16 | 0));
  label = 25; //@line 3565
 } else {
  if ($16 | 0) {
   $$09$i41 = 0; //@line 3574
   do {
    HEAP8[$6 + $$09$i41 >> 0] = HEAP8[$4 + $$09$i41 >> 0] ^ HEAP8[$12 + 16 + $$09$i41 >> 0]; //@line 3582
    $$09$i41 = $$09$i41 + 1 | 0; //@line 3583
   } while (($$09$i41 | 0) != ($16 | 0));
   label = 25; //@line 3586
  }
 }
 if ((label | 0) == 25) {
  if ($16 | 0) {
   $$09$i = 0; //@line 3597
   do {
    $202 = $12 + $$09$i | 0; //@line 3601
    HEAP8[$202 >> 0] = HEAP8[$202 >> 0] ^ HEAP8[$6 + $$09$i >> 0]; //@line 3604
    $$09$i = $$09$i + 1 | 0; //@line 3605
   } while (($$09$i | 0) != ($16 | 0));
  }
 }
 $AsyncCtx = _emscripten_alloc_async_context(164, sp) | 0; //@line 3615
 $206 = _mbedtls_cipher_update($0, $12, $16, $12, $7) | 0; //@line 3616
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 694; //@line 3619
  HEAP32[$AsyncCtx + 4 >> 2] = $175; //@line 3621
  HEAP32[$AsyncCtx + 8 >> 2] = $12; //@line 3623
  HEAP32[$AsyncCtx + 12 >> 2] = $46; //@line 3625
  HEAP32[$AsyncCtx + 16 >> 2] = $34; //@line 3627
  HEAP32[$AsyncCtx + 20 >> 2] = $37; //@line 3629
  HEAP32[$AsyncCtx + 24 >> 2] = $25; //@line 3631
  HEAP32[$AsyncCtx + 28 >> 2] = $5; //@line 3633
  HEAP32[$AsyncCtx + 32 >> 2] = $18; //@line 3635
  HEAP32[$AsyncCtx + 36 >> 2] = $39; //@line 3637
  HEAP32[$AsyncCtx + 40 >> 2] = $30; //@line 3639
  HEAP32[$AsyncCtx + 44 >> 2] = $22; //@line 3641
  HEAP32[$AsyncCtx + 48 >> 2] = $36; //@line 3643
  HEAP32[$AsyncCtx + 52 >> 2] = $40; //@line 3645
  HEAP32[$AsyncCtx + 56 >> 2] = $43; //@line 3647
  HEAP32[$AsyncCtx + 60 >> 2] = $19; //@line 3649
  HEAP32[$AsyncCtx + 64 >> 2] = $33; //@line 3651
  HEAP32[$AsyncCtx + 68 >> 2] = $6; //@line 3653
  HEAP32[$AsyncCtx + 72 >> 2] = $32; //@line 3655
  HEAP32[$AsyncCtx + 76 >> 2] = $20; //@line 3657
  HEAP32[$AsyncCtx + 80 >> 2] = $23; //@line 3659
  HEAP32[$AsyncCtx + 84 >> 2] = $16; //@line 3661
  HEAP32[$AsyncCtx + 88 >> 2] = $26; //@line 3663
  HEAP32[$AsyncCtx + 92 >> 2] = $29; //@line 3665
  HEAP32[$AsyncCtx + 96 >> 2] = $38; //@line 3667
  HEAP32[$AsyncCtx + 100 >> 2] = $35; //@line 3669
  HEAP32[$AsyncCtx + 104 >> 2] = $41; //@line 3671
  HEAP32[$AsyncCtx + 108 >> 2] = $44; //@line 3673
  HEAP32[$AsyncCtx + 112 >> 2] = $7; //@line 3675
  HEAP32[$AsyncCtx + 116 >> 2] = $28; //@line 3677
  HEAP32[$AsyncCtx + 120 >> 2] = $42; //@line 3679
  HEAP32[$AsyncCtx + 124 >> 2] = $1; //@line 3681
  HEAP32[$AsyncCtx + 128 >> 2] = $12; //@line 3683
  HEAP32[$AsyncCtx + 132 >> 2] = $176; //@line 3685
  HEAP32[$AsyncCtx + 136 >> 2] = $21; //@line 3687
  HEAP32[$AsyncCtx + 140 >> 2] = $27; //@line 3689
  HEAP32[$AsyncCtx + 144 >> 2] = $4; //@line 3691
  HEAP32[$AsyncCtx + 148 >> 2] = $31; //@line 3693
  HEAP32[$AsyncCtx + 152 >> 2] = $45; //@line 3695
  HEAP32[$AsyncCtx + 156 >> 2] = $17; //@line 3697
  HEAP32[$AsyncCtx + 160 >> 2] = $24; //@line 3699
  sp = STACKTOP; //@line 3700
  STACKTOP = sp; //@line 3701
  return 0; //@line 3701
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3703
 if (!$206) {
  _memcpy($1 | 0, $12 | 0, $16 | 0) | 0; //@line 3706
 }
 HEAP8[$4 >> 0] = 0; //@line 3708
 HEAP8[$17 >> 0] = 0; //@line 3709
 HEAP8[$18 >> 0] = 0; //@line 3710
 HEAP8[$19 >> 0] = 0; //@line 3711
 HEAP8[$20 >> 0] = 0; //@line 3712
 HEAP8[$21 >> 0] = 0; //@line 3713
 HEAP8[$22 >> 0] = 0; //@line 3714
 HEAP8[$23 >> 0] = 0; //@line 3715
 HEAP8[$24 >> 0] = 0; //@line 3716
 HEAP8[$25 >> 0] = 0; //@line 3717
 HEAP8[$26 >> 0] = 0; //@line 3718
 HEAP8[$27 >> 0] = 0; //@line 3719
 HEAP8[$28 >> 0] = 0; //@line 3720
 HEAP8[$29 >> 0] = 0; //@line 3721
 HEAP8[$30 >> 0] = 0; //@line 3722
 HEAP8[$31 >> 0] = 0; //@line 3723
 HEAP8[$5 >> 0] = 0; //@line 3724
 HEAP8[$32 >> 0] = 0; //@line 3725
 HEAP8[$33 >> 0] = 0; //@line 3726
 HEAP8[$34 >> 0] = 0; //@line 3727
 HEAP8[$35 >> 0] = 0; //@line 3728
 HEAP8[$36 >> 0] = 0; //@line 3729
 HEAP8[$37 >> 0] = 0; //@line 3730
 HEAP8[$38 >> 0] = 0; //@line 3731
 HEAP8[$39 >> 0] = 0; //@line 3732
 HEAP8[$40 >> 0] = 0; //@line 3733
 HEAP8[$41 >> 0] = 0; //@line 3734
 HEAP8[$42 >> 0] = 0; //@line 3735
 HEAP8[$43 >> 0] = 0; //@line 3736
 HEAP8[$44 >> 0] = 0; //@line 3737
 HEAP8[$45 >> 0] = 0; //@line 3738
 HEAP8[$46 >> 0] = 0; //@line 3739
 HEAP32[$176 >> 2] = 0; //@line 3740
 HEAP8[$175 >> 0] = 0; //@line 3742
 HEAP8[$12 + 17 >> 0] = 0; //@line 3744
 HEAP8[$12 + 18 >> 0] = 0; //@line 3746
 HEAP8[$12 + 19 >> 0] = 0; //@line 3748
 HEAP8[$12 + 20 >> 0] = 0; //@line 3750
 HEAP8[$12 + 21 >> 0] = 0; //@line 3752
 HEAP8[$12 + 22 >> 0] = 0; //@line 3754
 HEAP8[$12 + 23 >> 0] = 0; //@line 3756
 HEAP8[$12 + 24 >> 0] = 0; //@line 3758
 HEAP8[$12 + 25 >> 0] = 0; //@line 3760
 HEAP8[$12 + 26 >> 0] = 0; //@line 3762
 HEAP8[$12 + 27 >> 0] = 0; //@line 3764
 HEAP8[$12 + 28 >> 0] = 0; //@line 3766
 HEAP8[$12 + 29 >> 0] = 0; //@line 3768
 HEAP8[$12 + 30 >> 0] = 0; //@line 3770
 HEAP8[$12 + 31 >> 0] = 0; //@line 3771
 HEAP8[$12 >> 0] = 0; //@line 3773
 HEAP8[$12 + 1 >> 0] = 0; //@line 3775
 HEAP8[$12 + 2 >> 0] = 0; //@line 3777
 HEAP8[$12 + 3 >> 0] = 0; //@line 3779
 HEAP8[$12 + 4 >> 0] = 0; //@line 3781
 HEAP8[$12 + 5 >> 0] = 0; //@line 3783
 HEAP8[$12 + 6 >> 0] = 0; //@line 3785
 HEAP8[$12 + 7 >> 0] = 0; //@line 3787
 HEAP8[$12 + 8 >> 0] = 0; //@line 3789
 HEAP8[$12 + 9 >> 0] = 0; //@line 3791
 HEAP8[$12 + 10 >> 0] = 0; //@line 3793
 HEAP8[$12 + 11 >> 0] = 0; //@line 3795
 HEAP8[$12 + 12 >> 0] = 0; //@line 3797
 HEAP8[$12 + 13 >> 0] = 0; //@line 3799
 HEAP8[$12 + 14 >> 0] = 0; //@line 3801
 HEAP8[$12 + 15 >> 0] = 0; //@line 3802
 $$0 = $206; //@line 3803
 STACKTOP = sp; //@line 3804
 return $$0 | 0; //@line 3804
}
function __ZN16SX1276_LoRaRadio7receiveEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $105 = 0, $108 = 0, $113 = 0, $133 = 0, $134 = 0, $137 = 0, $155 = 0, $2 = 0, $3 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $49 = 0, $55 = 0, $58 = 0, $6 = 0, $63 = 0, $64 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $84 = 0, $AsyncCtx = 0, $AsyncCtx28 = 0, $AsyncCtx32 = 0, $AsyncCtx36 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx62 = 0, $AsyncCtx66 = 0, $AsyncCtx69 = 0, $AsyncCtx72 = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 835
 STACKTOP = STACKTOP + 128 | 0; //@line 836
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 836
 $vararg_buffer24 = sp + 80 | 0; //@line 837
 $vararg_buffer22 = sp + 72 | 0; //@line 838
 $vararg_buffer19 = sp + 64 | 0; //@line 839
 $vararg_buffer16 = sp + 56 | 0; //@line 840
 $vararg_buffer14 = sp + 48 | 0; //@line 841
 $vararg_buffer11 = sp + 40 | 0; //@line 842
 $vararg_buffer9 = sp + 32 | 0; //@line 843
 $vararg_buffer6 = sp + 24 | 0; //@line 844
 $vararg_buffer4 = sp + 16 | 0; //@line 845
 $vararg_buffer1 = sp + 8 | 0; //@line 846
 $2 = sp + 104 | 0; //@line 848
 $3 = sp + 88 | 0; //@line 849
 _printf(10904, sp) | 0; //@line 850
 $4 = $0 + 783 | 0; //@line 851
 $6 = HEAPU8[$4 >> 0] | 0; //@line 853
 HEAP32[$vararg_buffer1 >> 2] = $1; //@line 854
 HEAP32[$vararg_buffer1 + 4 >> 2] = $6; //@line 856
 _printf(11264, $vararg_buffer1) | 0; //@line 857
 $AsyncCtx66 = _emscripten_alloc_async_context(96, sp) | 0; //@line 858
 _putchar(10) | 0; //@line 859
 if (___async) {
  HEAP32[$AsyncCtx66 >> 2] = 68; //@line 862
  HEAP32[$AsyncCtx66 + 4 >> 2] = $0; //@line 864
  HEAP32[$AsyncCtx66 + 8 >> 2] = $3; //@line 866
  HEAP32[$AsyncCtx66 + 12 >> 2] = $1; //@line 868
  HEAP32[$AsyncCtx66 + 16 >> 2] = $vararg_buffer14; //@line 870
  HEAP32[$AsyncCtx66 + 20 >> 2] = $vararg_buffer14; //@line 872
  HEAP32[$AsyncCtx66 + 24 >> 2] = $vararg_buffer16; //@line 874
  HEAP32[$AsyncCtx66 + 28 >> 2] = $vararg_buffer16; //@line 876
  HEAP32[$AsyncCtx66 + 32 >> 2] = $vararg_buffer22; //@line 878
  HEAP32[$AsyncCtx66 + 36 >> 2] = $vararg_buffer22; //@line 880
  HEAP32[$AsyncCtx66 + 40 >> 2] = $vararg_buffer24; //@line 882
  HEAP32[$AsyncCtx66 + 44 >> 2] = $vararg_buffer24; //@line 884
  HEAP32[$AsyncCtx66 + 48 >> 2] = $4; //@line 886
  HEAP32[$AsyncCtx66 + 52 >> 2] = $2; //@line 888
  HEAP32[$AsyncCtx66 + 56 >> 2] = $vararg_buffer4; //@line 890
  HEAP32[$AsyncCtx66 + 60 >> 2] = $vararg_buffer4; //@line 892
  HEAP32[$AsyncCtx66 + 64 >> 2] = $vararg_buffer6; //@line 894
  HEAP32[$AsyncCtx66 + 68 >> 2] = $vararg_buffer6; //@line 896
  HEAP32[$AsyncCtx66 + 72 >> 2] = $vararg_buffer19; //@line 898
  HEAP32[$AsyncCtx66 + 76 >> 2] = $vararg_buffer19; //@line 900
  HEAP32[$AsyncCtx66 + 80 >> 2] = $vararg_buffer9; //@line 902
  HEAP32[$AsyncCtx66 + 84 >> 2] = $vararg_buffer9; //@line 904
  HEAP32[$AsyncCtx66 + 88 >> 2] = $vararg_buffer11; //@line 906
  HEAP32[$AsyncCtx66 + 92 >> 2] = $vararg_buffer11; //@line 908
  sp = STACKTOP; //@line 909
  STACKTOP = sp; //@line 910
  return;
 }
 _emscripten_free_async_context($AsyncCtx66 | 0); //@line 912
 _emscripten_asm_const_i(2) | 0; //@line 913
 HEAP8[$0 + 688 >> 0] = 1; //@line 915
 if (HEAP8[$4 >> 0] | 0) {
  $34 = _emscripten_asm_const_i(3) | 0; //@line 919
  $37 = $34 - (HEAP32[$0 + 784 >> 2] | 0) | 0; //@line 922
  _printf(10904, $vararg_buffer4) | 0; //@line 923
  HEAP32[$vararg_buffer6 >> 2] = $37; //@line 924
  _printf(11364, $vararg_buffer6) | 0; //@line 925
  $AsyncCtx62 = _emscripten_alloc_async_context(16, sp) | 0; //@line 926
  _putchar(10) | 0; //@line 927
  if (___async) {
   HEAP32[$AsyncCtx62 >> 2] = 69; //@line 930
   HEAP32[$AsyncCtx62 + 4 >> 2] = $4; //@line 932
   HEAP32[$AsyncCtx62 + 8 >> 2] = $0; //@line 934
   HEAP32[$AsyncCtx62 + 12 >> 2] = $2; //@line 936
   sp = STACKTOP; //@line 937
   STACKTOP = sp; //@line 938
   return;
  }
  _emscripten_free_async_context($AsyncCtx62 | 0); //@line 940
  HEAP8[$4 >> 0] = 0; //@line 941
  $41 = $0 + 1112 | 0; //@line 942
  $42 = $2 + 12 | 0; //@line 943
  HEAP32[$2 >> 2] = 70; //@line 944
  HEAP32[$2 + 4 >> 2] = 0; //@line 946
  HEAP32[$2 + 8 >> 2] = $0; //@line 948
  HEAP32[$42 >> 2] = 648; //@line 949
  $43 = $0 + 1152 | 0; //@line 950
  if (($43 | 0) != ($2 | 0)) {
   $45 = $0 + 1164 | 0; //@line 953
   $46 = HEAP32[$45 >> 2] | 0; //@line 954
   do {
    if ($46 | 0) {
     $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 959
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 960
     FUNCTION_TABLE_vi[$49 & 1023]($43); //@line 961
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 71; //@line 964
      HEAP32[$AsyncCtx + 4 >> 2] = $42; //@line 966
      HEAP32[$AsyncCtx + 8 >> 2] = $45; //@line 968
      HEAP32[$AsyncCtx + 12 >> 2] = $43; //@line 970
      HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 972
      HEAP32[$AsyncCtx + 20 >> 2] = $41; //@line 974
      sp = STACKTOP; //@line 975
      STACKTOP = sp; //@line 976
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 978
      break;
     }
    }
   } while (0);
   $55 = HEAP32[$42 >> 2] | 0; //@line 983
   do {
    if (!$55) {
     $63 = 0; //@line 987
    } else {
     $58 = HEAP32[$55 + 4 >> 2] | 0; //@line 990
     $AsyncCtx28 = _emscripten_alloc_async_context(20, sp) | 0; //@line 991
     FUNCTION_TABLE_vii[$58 & 31]($43, $2); //@line 992
     if (___async) {
      HEAP32[$AsyncCtx28 >> 2] = 72; //@line 995
      HEAP32[$AsyncCtx28 + 4 >> 2] = $42; //@line 997
      HEAP32[$AsyncCtx28 + 8 >> 2] = $45; //@line 999
      HEAP32[$AsyncCtx28 + 12 >> 2] = $41; //@line 1001
      HEAP32[$AsyncCtx28 + 16 >> 2] = $2; //@line 1003
      sp = STACKTOP; //@line 1004
      STACKTOP = sp; //@line 1005
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx28 | 0); //@line 1007
      $63 = HEAP32[$42 >> 2] | 0; //@line 1009
      break;
     }
    }
   } while (0);
   HEAP32[$45 >> 2] = $63; //@line 1014
  }
  __ZN4mbed6Ticker5setupEy($41, 2e5, 0); //@line 1016
  $64 = HEAP32[$42 >> 2] | 0; //@line 1017
  if (!$64) {
   STACKTOP = sp; //@line 1020
   return;
  }
  $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 1023
  $AsyncCtx32 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1024
  FUNCTION_TABLE_vi[$67 & 1023]($2); //@line 1025
  if (___async) {
   HEAP32[$AsyncCtx32 >> 2] = 73; //@line 1028
   sp = STACKTOP; //@line 1029
   STACKTOP = sp; //@line 1030
   return;
  }
  _emscripten_free_async_context($AsyncCtx32 | 0); //@line 1032
  STACKTOP = sp; //@line 1033
  return;
 }
 do {
  if ($1 | 0) {
   $69 = $0 + 1112 | 0; //@line 1038
   $70 = $3 + 12 | 0; //@line 1039
   HEAP32[$3 >> 2] = 74; //@line 1040
   HEAP32[$3 + 4 >> 2] = 0; //@line 1042
   HEAP32[$3 + 8 >> 2] = $0; //@line 1044
   HEAP32[$70 >> 2] = 648; //@line 1045
   $71 = ___muldi3($1 | 0, 0, 1e3, 0) | 0; //@line 1046
   $72 = tempRet0; //@line 1047
   $73 = $0 + 1152 | 0; //@line 1048
   if (($73 | 0) != ($3 | 0)) {
    $75 = $0 + 1164 | 0; //@line 1051
    $76 = HEAP32[$75 >> 2] | 0; //@line 1052
    do {
     if ($76 | 0) {
      $79 = HEAP32[$76 + 8 >> 2] | 0; //@line 1057
      $AsyncCtx36 = _emscripten_alloc_async_context(96, sp) | 0; //@line 1058
      FUNCTION_TABLE_vi[$79 & 1023]($73); //@line 1059
      if (___async) {
       HEAP32[$AsyncCtx36 >> 2] = 75; //@line 1062
       HEAP32[$AsyncCtx36 + 4 >> 2] = $3; //@line 1064
       HEAP32[$AsyncCtx36 + 8 >> 2] = $0; //@line 1066
       HEAP32[$AsyncCtx36 + 12 >> 2] = $69; //@line 1068
       $84 = $AsyncCtx36 + 16 | 0; //@line 1070
       HEAP32[$84 >> 2] = $71; //@line 1072
       HEAP32[$84 + 4 >> 2] = $72; //@line 1075
       HEAP32[$AsyncCtx36 + 24 >> 2] = $70; //@line 1077
       HEAP32[$AsyncCtx36 + 28 >> 2] = $vararg_buffer14; //@line 1079
       HEAP32[$AsyncCtx36 + 32 >> 2] = $vararg_buffer14; //@line 1081
       HEAP32[$AsyncCtx36 + 36 >> 2] = $vararg_buffer16; //@line 1083
       HEAP32[$AsyncCtx36 + 40 >> 2] = $vararg_buffer16; //@line 1085
       HEAP32[$AsyncCtx36 + 44 >> 2] = $vararg_buffer22; //@line 1087
       HEAP32[$AsyncCtx36 + 48 >> 2] = $vararg_buffer22; //@line 1089
       HEAP32[$AsyncCtx36 + 52 >> 2] = $vararg_buffer24; //@line 1091
       HEAP32[$AsyncCtx36 + 56 >> 2] = $vararg_buffer24; //@line 1093
       HEAP32[$AsyncCtx36 + 60 >> 2] = $75; //@line 1095
       HEAP32[$AsyncCtx36 + 64 >> 2] = $73; //@line 1097
       HEAP32[$AsyncCtx36 + 68 >> 2] = $vararg_buffer19; //@line 1099
       HEAP32[$AsyncCtx36 + 72 >> 2] = $vararg_buffer19; //@line 1101
       HEAP32[$AsyncCtx36 + 76 >> 2] = $vararg_buffer9; //@line 1103
       HEAP32[$AsyncCtx36 + 80 >> 2] = $vararg_buffer9; //@line 1105
       HEAP32[$AsyncCtx36 + 84 >> 2] = $vararg_buffer11; //@line 1107
       HEAP32[$AsyncCtx36 + 88 >> 2] = $vararg_buffer11; //@line 1109
       sp = STACKTOP; //@line 1110
       STACKTOP = sp; //@line 1111
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx36 | 0); //@line 1113
       break;
      }
     }
    } while (0);
    $105 = HEAP32[$70 >> 2] | 0; //@line 1118
    do {
     if (!$105) {
      $133 = 0; //@line 1122
     } else {
      $108 = HEAP32[$105 + 4 >> 2] | 0; //@line 1125
      $AsyncCtx39 = _emscripten_alloc_async_context(88, sp) | 0; //@line 1126
      FUNCTION_TABLE_vii[$108 & 31]($73, $3); //@line 1127
      if (___async) {
       HEAP32[$AsyncCtx39 >> 2] = 76; //@line 1130
       HEAP32[$AsyncCtx39 + 4 >> 2] = $3; //@line 1132
       HEAP32[$AsyncCtx39 + 8 >> 2] = $0; //@line 1134
       HEAP32[$AsyncCtx39 + 12 >> 2] = $69; //@line 1136
       $113 = $AsyncCtx39 + 16 | 0; //@line 1138
       HEAP32[$113 >> 2] = $71; //@line 1140
       HEAP32[$113 + 4 >> 2] = $72; //@line 1143
       HEAP32[$AsyncCtx39 + 24 >> 2] = $70; //@line 1145
       HEAP32[$AsyncCtx39 + 28 >> 2] = $vararg_buffer14; //@line 1147
       HEAP32[$AsyncCtx39 + 32 >> 2] = $vararg_buffer14; //@line 1149
       HEAP32[$AsyncCtx39 + 36 >> 2] = $vararg_buffer16; //@line 1151
       HEAP32[$AsyncCtx39 + 40 >> 2] = $vararg_buffer16; //@line 1153
       HEAP32[$AsyncCtx39 + 44 >> 2] = $vararg_buffer22; //@line 1155
       HEAP32[$AsyncCtx39 + 48 >> 2] = $vararg_buffer22; //@line 1157
       HEAP32[$AsyncCtx39 + 52 >> 2] = $vararg_buffer24; //@line 1159
       HEAP32[$AsyncCtx39 + 56 >> 2] = $vararg_buffer24; //@line 1161
       HEAP32[$AsyncCtx39 + 60 >> 2] = $75; //@line 1163
       HEAP32[$AsyncCtx39 + 64 >> 2] = $vararg_buffer19; //@line 1165
       HEAP32[$AsyncCtx39 + 68 >> 2] = $vararg_buffer19; //@line 1167
       HEAP32[$AsyncCtx39 + 72 >> 2] = $vararg_buffer9; //@line 1169
       HEAP32[$AsyncCtx39 + 76 >> 2] = $vararg_buffer9; //@line 1171
       HEAP32[$AsyncCtx39 + 80 >> 2] = $vararg_buffer11; //@line 1173
       HEAP32[$AsyncCtx39 + 84 >> 2] = $vararg_buffer11; //@line 1175
       sp = STACKTOP; //@line 1176
       STACKTOP = sp; //@line 1177
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx39 | 0); //@line 1179
       $133 = HEAP32[$70 >> 2] | 0; //@line 1181
       break;
      }
     }
    } while (0);
    HEAP32[$75 >> 2] = $133; //@line 1186
   }
   __ZN4mbed6Ticker5setupEy($69, $71, $72); //@line 1188
   $134 = HEAP32[$70 >> 2] | 0; //@line 1189
   if ($134 | 0) {
    $137 = HEAP32[$134 + 8 >> 2] | 0; //@line 1193
    $AsyncCtx43 = _emscripten_alloc_async_context(64, sp) | 0; //@line 1194
    FUNCTION_TABLE_vi[$137 & 1023]($3); //@line 1195
    if (___async) {
     HEAP32[$AsyncCtx43 >> 2] = 77; //@line 1198
     HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 1200
     HEAP32[$AsyncCtx43 + 8 >> 2] = $vararg_buffer14; //@line 1202
     HEAP32[$AsyncCtx43 + 12 >> 2] = $vararg_buffer14; //@line 1204
     HEAP32[$AsyncCtx43 + 16 >> 2] = $vararg_buffer16; //@line 1206
     HEAP32[$AsyncCtx43 + 20 >> 2] = $vararg_buffer16; //@line 1208
     HEAP32[$AsyncCtx43 + 24 >> 2] = $vararg_buffer22; //@line 1210
     HEAP32[$AsyncCtx43 + 28 >> 2] = $vararg_buffer22; //@line 1212
     HEAP32[$AsyncCtx43 + 32 >> 2] = $vararg_buffer24; //@line 1214
     HEAP32[$AsyncCtx43 + 36 >> 2] = $vararg_buffer24; //@line 1216
     HEAP32[$AsyncCtx43 + 40 >> 2] = $vararg_buffer19; //@line 1218
     HEAP32[$AsyncCtx43 + 44 >> 2] = $vararg_buffer19; //@line 1220
     HEAP32[$AsyncCtx43 + 48 >> 2] = $vararg_buffer9; //@line 1222
     HEAP32[$AsyncCtx43 + 52 >> 2] = $vararg_buffer9; //@line 1224
     HEAP32[$AsyncCtx43 + 56 >> 2] = $vararg_buffer11; //@line 1226
     HEAP32[$AsyncCtx43 + 60 >> 2] = $vararg_buffer11; //@line 1228
     sp = STACKTOP; //@line 1229
     STACKTOP = sp; //@line 1230
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx43 | 0); //@line 1232
     break;
    }
   }
  }
 } while (0);
 $155 = (HEAP8[$0 + 770 >> 0] | 0) == 0; //@line 1240
 _printf(10904, $vararg_buffer9) | 0; //@line 1241
 if ($155) {
  HEAP32[$vararg_buffer19 >> 2] = 6; //@line 1243
  _printf(10970, $vararg_buffer19) | 0; //@line 1244
  $AsyncCtx51 = _emscripten_alloc_async_context(24, sp) | 0; //@line 1245
  _putchar(10) | 0; //@line 1246
  if (___async) {
   HEAP32[$AsyncCtx51 >> 2] = 81; //@line 1249
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 1251
   HEAP32[$AsyncCtx51 + 8 >> 2] = $vararg_buffer22; //@line 1253
   HEAP32[$AsyncCtx51 + 12 >> 2] = $vararg_buffer22; //@line 1255
   HEAP32[$AsyncCtx51 + 16 >> 2] = $vararg_buffer24; //@line 1257
   HEAP32[$AsyncCtx51 + 20 >> 2] = $vararg_buffer24; //@line 1259
   sp = STACKTOP; //@line 1260
   STACKTOP = sp; //@line 1261
   return;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 1263
  $AsyncCtx69 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1264
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1265
  if (___async) {
   HEAP32[$AsyncCtx69 >> 2] = 82; //@line 1268
   HEAP32[$AsyncCtx69 + 4 >> 2] = $vararg_buffer22; //@line 1270
   HEAP32[$AsyncCtx69 + 8 >> 2] = $vararg_buffer22; //@line 1272
   HEAP32[$AsyncCtx69 + 12 >> 2] = $vararg_buffer24; //@line 1274
   HEAP32[$AsyncCtx69 + 16 >> 2] = $vararg_buffer24; //@line 1276
   sp = STACKTOP; //@line 1277
   STACKTOP = sp; //@line 1278
   return;
  }
  _emscripten_free_async_context($AsyncCtx69 | 0); //@line 1280
  _printf(10904, $vararg_buffer22) | 0; //@line 1281
  HEAP32[$vararg_buffer24 >> 2] = 6; //@line 1282
  _printf(10999, $vararg_buffer24) | 0; //@line 1283
  $AsyncCtx47 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1284
  _putchar(10) | 0; //@line 1285
  if (___async) {
   HEAP32[$AsyncCtx47 >> 2] = 83; //@line 1288
   sp = STACKTOP; //@line 1289
   STACKTOP = sp; //@line 1290
   return;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 1292
  STACKTOP = sp; //@line 1293
  return;
 } else {
  HEAP32[$vararg_buffer11 >> 2] = 5; //@line 1295
  _printf(10970, $vararg_buffer11) | 0; //@line 1296
  $AsyncCtx59 = _emscripten_alloc_async_context(24, sp) | 0; //@line 1297
  _putchar(10) | 0; //@line 1298
  if (___async) {
   HEAP32[$AsyncCtx59 >> 2] = 78; //@line 1301
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 1303
   HEAP32[$AsyncCtx59 + 8 >> 2] = $vararg_buffer14; //@line 1305
   HEAP32[$AsyncCtx59 + 12 >> 2] = $vararg_buffer14; //@line 1307
   HEAP32[$AsyncCtx59 + 16 >> 2] = $vararg_buffer16; //@line 1309
   HEAP32[$AsyncCtx59 + 20 >> 2] = $vararg_buffer16; //@line 1311
   sp = STACKTOP; //@line 1312
   STACKTOP = sp; //@line 1313
   return;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 1315
  $AsyncCtx72 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1316
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1317
  if (___async) {
   HEAP32[$AsyncCtx72 >> 2] = 79; //@line 1320
   HEAP32[$AsyncCtx72 + 4 >> 2] = $vararg_buffer14; //@line 1322
   HEAP32[$AsyncCtx72 + 8 >> 2] = $vararg_buffer14; //@line 1324
   HEAP32[$AsyncCtx72 + 12 >> 2] = $vararg_buffer16; //@line 1326
   HEAP32[$AsyncCtx72 + 16 >> 2] = $vararg_buffer16; //@line 1328
   sp = STACKTOP; //@line 1329
   STACKTOP = sp; //@line 1330
   return;
  }
  _emscripten_free_async_context($AsyncCtx72 | 0); //@line 1332
  _printf(10904, $vararg_buffer14) | 0; //@line 1333
  HEAP32[$vararg_buffer16 >> 2] = 5; //@line 1334
  _printf(10999, $vararg_buffer16) | 0; //@line 1335
  $AsyncCtx55 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1336
  _putchar(10) | 0; //@line 1337
  if (___async) {
   HEAP32[$AsyncCtx55 >> 2] = 80; //@line 1340
   sp = STACKTOP; //@line 1341
   STACKTOP = sp; //@line 1342
   return;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 1344
  STACKTOP = sp; //@line 1345
  return;
 }
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 9621
 $3 = HEAP32[5900] | 0; //@line 9622
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 9625
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 9629
 $7 = $6 & 3; //@line 9630
 if (($7 | 0) == 1) {
  _abort(); //@line 9633
 }
 $9 = $6 & -8; //@line 9636
 $10 = $2 + $9 | 0; //@line 9637
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 9642
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 9648
   $17 = $13 + $9 | 0; //@line 9649
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 9652
   }
   if ((HEAP32[5901] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 9658
    $106 = HEAP32[$105 >> 2] | 0; //@line 9659
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 9663
     $$1382 = $17; //@line 9663
     $114 = $16; //@line 9663
     break;
    }
    HEAP32[5898] = $17; //@line 9666
    HEAP32[$105 >> 2] = $106 & -2; //@line 9668
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 9671
    HEAP32[$16 + $17 >> 2] = $17; //@line 9673
    return;
   }
   $21 = $13 >>> 3; //@line 9676
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 9680
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 9682
    $28 = 23624 + ($21 << 1 << 2) | 0; //@line 9684
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 9689
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 9696
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[5896] = HEAP32[5896] & ~(1 << $21); //@line 9706
     $$1 = $16; //@line 9707
     $$1382 = $17; //@line 9707
     $114 = $16; //@line 9707
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 9713
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 9717
     }
     $41 = $26 + 8 | 0; //@line 9720
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 9724
     } else {
      _abort(); //@line 9726
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 9731
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 9732
    $$1 = $16; //@line 9733
    $$1382 = $17; //@line 9733
    $114 = $16; //@line 9733
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 9737
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 9739
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 9743
     $60 = $59 + 4 | 0; //@line 9744
     $61 = HEAP32[$60 >> 2] | 0; //@line 9745
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 9748
      if (!$63) {
       $$3 = 0; //@line 9751
       break;
      } else {
       $$1387 = $63; //@line 9754
       $$1390 = $59; //@line 9754
      }
     } else {
      $$1387 = $61; //@line 9757
      $$1390 = $60; //@line 9757
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 9760
      $66 = HEAP32[$65 >> 2] | 0; //@line 9761
      if ($66 | 0) {
       $$1387 = $66; //@line 9764
       $$1390 = $65; //@line 9764
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 9767
      $69 = HEAP32[$68 >> 2] | 0; //@line 9768
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 9773
       $$1390 = $68; //@line 9773
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 9778
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 9781
      $$3 = $$1387; //@line 9782
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 9787
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 9790
     }
     $53 = $51 + 12 | 0; //@line 9793
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 9797
     }
     $56 = $48 + 8 | 0; //@line 9800
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 9804
      HEAP32[$56 >> 2] = $51; //@line 9805
      $$3 = $48; //@line 9806
      break;
     } else {
      _abort(); //@line 9809
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 9816
    $$1382 = $17; //@line 9816
    $114 = $16; //@line 9816
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 9819
    $75 = 23888 + ($74 << 2) | 0; //@line 9820
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 9825
      if (!$$3) {
       HEAP32[5897] = HEAP32[5897] & ~(1 << $74); //@line 9832
       $$1 = $16; //@line 9833
       $$1382 = $17; //@line 9833
       $114 = $16; //@line 9833
       break L10;
      }
     } else {
      if ((HEAP32[5900] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 9840
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 9848
       if (!$$3) {
        $$1 = $16; //@line 9851
        $$1382 = $17; //@line 9851
        $114 = $16; //@line 9851
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[5900] | 0; //@line 9859
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 9862
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 9866
    $92 = $16 + 16 | 0; //@line 9867
    $93 = HEAP32[$92 >> 2] | 0; //@line 9868
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 9874
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 9878
       HEAP32[$93 + 24 >> 2] = $$3; //@line 9880
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 9886
    if (!$99) {
     $$1 = $16; //@line 9889
     $$1382 = $17; //@line 9889
     $114 = $16; //@line 9889
    } else {
     if ((HEAP32[5900] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 9894
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 9898
      HEAP32[$99 + 24 >> 2] = $$3; //@line 9900
      $$1 = $16; //@line 9901
      $$1382 = $17; //@line 9901
      $114 = $16; //@line 9901
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 9907
   $$1382 = $9; //@line 9907
   $114 = $2; //@line 9907
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 9912
 }
 $115 = $10 + 4 | 0; //@line 9915
 $116 = HEAP32[$115 >> 2] | 0; //@line 9916
 if (!($116 & 1)) {
  _abort(); //@line 9920
 }
 if (!($116 & 2)) {
  if ((HEAP32[5902] | 0) == ($10 | 0)) {
   $124 = (HEAP32[5899] | 0) + $$1382 | 0; //@line 9930
   HEAP32[5899] = $124; //@line 9931
   HEAP32[5902] = $$1; //@line 9932
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 9935
   if (($$1 | 0) != (HEAP32[5901] | 0)) {
    return;
   }
   HEAP32[5901] = 0; //@line 9941
   HEAP32[5898] = 0; //@line 9942
   return;
  }
  if ((HEAP32[5901] | 0) == ($10 | 0)) {
   $132 = (HEAP32[5898] | 0) + $$1382 | 0; //@line 9949
   HEAP32[5898] = $132; //@line 9950
   HEAP32[5901] = $114; //@line 9951
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 9954
   HEAP32[$114 + $132 >> 2] = $132; //@line 9956
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 9960
  $138 = $116 >>> 3; //@line 9961
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 9966
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 9968
    $145 = 23624 + ($138 << 1 << 2) | 0; //@line 9970
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[5900] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 9976
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 9983
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[5896] = HEAP32[5896] & ~(1 << $138); //@line 9993
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 9999
    } else {
     if ((HEAP32[5900] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 10004
     }
     $160 = $143 + 8 | 0; //@line 10007
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 10011
     } else {
      _abort(); //@line 10013
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 10018
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 10019
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 10022
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 10024
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 10028
      $180 = $179 + 4 | 0; //@line 10029
      $181 = HEAP32[$180 >> 2] | 0; //@line 10030
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 10033
       if (!$183) {
        $$3400 = 0; //@line 10036
        break;
       } else {
        $$1398 = $183; //@line 10039
        $$1402 = $179; //@line 10039
       }
      } else {
       $$1398 = $181; //@line 10042
       $$1402 = $180; //@line 10042
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 10045
       $186 = HEAP32[$185 >> 2] | 0; //@line 10046
       if ($186 | 0) {
        $$1398 = $186; //@line 10049
        $$1402 = $185; //@line 10049
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 10052
       $189 = HEAP32[$188 >> 2] | 0; //@line 10053
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 10058
        $$1402 = $188; //@line 10058
       }
      }
      if ((HEAP32[5900] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 10064
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 10067
       $$3400 = $$1398; //@line 10068
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 10073
      if ((HEAP32[5900] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 10077
      }
      $173 = $170 + 12 | 0; //@line 10080
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 10084
      }
      $176 = $167 + 8 | 0; //@line 10087
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 10091
       HEAP32[$176 >> 2] = $170; //@line 10092
       $$3400 = $167; //@line 10093
       break;
      } else {
       _abort(); //@line 10096
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 10104
     $196 = 23888 + ($195 << 2) | 0; //@line 10105
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 10110
       if (!$$3400) {
        HEAP32[5897] = HEAP32[5897] & ~(1 << $195); //@line 10117
        break L108;
       }
      } else {
       if ((HEAP32[5900] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 10124
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 10132
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[5900] | 0; //@line 10142
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 10145
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 10149
     $213 = $10 + 16 | 0; //@line 10150
     $214 = HEAP32[$213 >> 2] | 0; //@line 10151
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 10157
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 10161
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 10163
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 10169
     if ($220 | 0) {
      if ((HEAP32[5900] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 10175
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 10179
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 10181
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 10190
  HEAP32[$114 + $137 >> 2] = $137; //@line 10192
  if (($$1 | 0) == (HEAP32[5901] | 0)) {
   HEAP32[5898] = $137; //@line 10196
   return;
  } else {
   $$2 = $137; //@line 10199
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 10203
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 10206
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 10208
  $$2 = $$1382; //@line 10209
 }
 $235 = $$2 >>> 3; //@line 10211
 if ($$2 >>> 0 < 256) {
  $238 = 23624 + ($235 << 1 << 2) | 0; //@line 10215
  $239 = HEAP32[5896] | 0; //@line 10216
  $240 = 1 << $235; //@line 10217
  if (!($239 & $240)) {
   HEAP32[5896] = $239 | $240; //@line 10222
   $$0403 = $238; //@line 10224
   $$pre$phiZ2D = $238 + 8 | 0; //@line 10224
  } else {
   $244 = $238 + 8 | 0; //@line 10226
   $245 = HEAP32[$244 >> 2] | 0; //@line 10227
   if ((HEAP32[5900] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 10231
   } else {
    $$0403 = $245; //@line 10234
    $$pre$phiZ2D = $244; //@line 10234
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 10237
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 10239
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 10241
  HEAP32[$$1 + 12 >> 2] = $238; //@line 10243
  return;
 }
 $251 = $$2 >>> 8; //@line 10246
 if (!$251) {
  $$0396 = 0; //@line 10249
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 10253
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 10257
   $257 = $251 << $256; //@line 10258
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 10261
   $262 = $257 << $260; //@line 10263
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 10266
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 10271
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 10277
  }
 }
 $276 = 23888 + ($$0396 << 2) | 0; //@line 10280
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 10282
 HEAP32[$$1 + 20 >> 2] = 0; //@line 10285
 HEAP32[$$1 + 16 >> 2] = 0; //@line 10286
 $280 = HEAP32[5897] | 0; //@line 10287
 $281 = 1 << $$0396; //@line 10288
 do {
  if (!($280 & $281)) {
   HEAP32[5897] = $280 | $281; //@line 10294
   HEAP32[$276 >> 2] = $$1; //@line 10295
   HEAP32[$$1 + 24 >> 2] = $276; //@line 10297
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 10299
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 10301
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 10309
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 10309
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 10316
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 10320
    $301 = HEAP32[$299 >> 2] | 0; //@line 10322
    if (!$301) {
     label = 121; //@line 10325
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 10328
     $$0384 = $301; //@line 10328
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[5900] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 10335
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 10338
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 10340
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 10342
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 10344
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 10349
    $309 = HEAP32[$308 >> 2] | 0; //@line 10350
    $310 = HEAP32[5900] | 0; //@line 10351
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 10357
     HEAP32[$308 >> 2] = $$1; //@line 10358
     HEAP32[$$1 + 8 >> 2] = $309; //@line 10360
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 10362
     HEAP32[$$1 + 24 >> 2] = 0; //@line 10364
     break;
    } else {
     _abort(); //@line 10367
    }
   }
  }
 } while (0);
 $319 = (HEAP32[5904] | 0) + -1 | 0; //@line 10374
 HEAP32[5904] = $319; //@line 10375
 if (!$319) {
  $$0212$in$i = 24040; //@line 10378
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 10383
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 10389
  }
 }
 HEAP32[5904] = -1; //@line 10392
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_305($0) {
 $0 = $0 | 0;
 var $$013$i = 0, $$01720$i55 = 0, $$019$i = 0, $$019$i52 = 0, $$021$i54 = 0, $$09$i = 0, $$09$i41 = 0, $$09$i45 = 0, $$sink$sink$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $127 = 0, $130 = 0, $14 = 0, $143 = 0, $146 = 0, $154 = 0, $155 = 0, $16 = 0, $168 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $183 = 0, $2 = 0, $20 = 0, $200 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0, $154$looptemp = 0;
 sp = STACKTOP; //@line 12480
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12482
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12484
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12486
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12488
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12490
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12492
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12494
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12496
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12498
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12500
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12502
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12504
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12506
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 12508
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 12510
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 12512
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 12514
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 12516
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 12518
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 12520
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 12522
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 12524
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 12526
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 12528
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 12530
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 12532
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 12534
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 12536
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 12538
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 12540
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 12542
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 12544
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 12546
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 12548
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 12550
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 12552
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 12554
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 12556
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 12558
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 12560
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 12562
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 12566
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 12568
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 12570
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 12572
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 12574
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 12576
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 12578
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 12580
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 12582
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 12584
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 12586
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 12588
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 12590
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 12592
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 12594
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 12596
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 12598
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 12600
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 12602
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 12604
 L2 : do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   switch ($30 | 0) {
   case 16:
    {
     $$019$i52 = 135; //@line 12612
     break;
    }
   case 8:
    {
     $$019$i52 = 27; //@line 12616
     break;
    }
   default:
    {
     break L2;
    }
   }
   $127 = $30 + -1 | 0; //@line 12623
   $$01720$i55 = 0; //@line 12624
   $$021$i54 = $127; //@line 12624
   while (1) {
    $130 = HEAPU8[$12 + $$021$i54 >> 0] | 0; //@line 12628
    HEAP8[$110 + $$021$i54 >> 0] = $130 << 1 | $$01720$i55; //@line 12633
    if (($$021$i54 | 0) > 0) {
     $$01720$i55 = $130 >>> 7; //@line 12638
     $$021$i54 = $$021$i54 + -1 | 0; //@line 12638
    } else {
     break;
    }
   }
   $143 = $110 + $127 | 0; //@line 12648
   $146 = $$019$i52 & 0 - ((HEAPU8[$90 >> 0] | 0) >>> 7) ^ (HEAPU8[$143 >> 0] | 0); //@line 12651
   HEAP8[$143 >> 0] = $146; //@line 12653
   switch ($30 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 12656
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 12660
     break;
    }
   default:
    {
     break L2;
    }
   }
   HEAP8[$88 + $127 >> 0] = $146 << 1; //@line 12670
   if (($127 | 0) > 0) {
    $154 = $146; //@line 12674
    $155 = $30 + -2 | 0; //@line 12674
    while (1) {
     $154$looptemp = $154;
     $154 = HEAPU8[$110 + $155 >> 0] | 0; //@line 12679
     HEAP8[$88 + $155 >> 0] = $154 << 1 | $154$looptemp >>> 7; //@line 12684
     if (($155 | 0) <= 0) {
      break;
     } else {
      $155 = $155 + -1 | 0; //@line 12688
     }
    }
   }
   $168 = $88 + $127 | 0; //@line 12699
   HEAP8[$168 >> 0] = $$019$i & 0 - ((HEAPU8[$108 >> 0] | 0) >>> 7) ^ (HEAPU8[$168 >> 0] | 0); //@line 12704
  }
 } while (0);
 HEAP8[$90 >> 0] = 0; //@line 12707
 HEAP8[$18 >> 0] = 0; //@line 12708
 HEAP8[$112 >> 0] = 0; //@line 12709
 HEAP8[$70 >> 0] = 0; //@line 12710
 HEAP8[$36 >> 0] = 0; //@line 12711
 HEAP8[$114 >> 0] = 0; //@line 12712
 HEAP8[$86 >> 0] = 0; //@line 12713
 HEAP8[$54 >> 0] = 0; //@line 12714
 HEAP8[$10 >> 0] = 0; //@line 12715
 HEAP8[$76 >> 0] = 0; //@line 12716
 HEAP8[$38 >> 0] = 0; //@line 12717
 HEAP8[$16 >> 0] = 0; //@line 12718
 HEAP8[$120 >> 0] = 0; //@line 12719
 HEAP8[$28 >> 0] = 0; //@line 12720
 HEAP8[$44 >> 0] = 0; //@line 12721
 HEAP8[$74 >> 0] = 0; //@line 12722
 $173 = $2 + 16 | 0; //@line 12723
 $174 = $2 + 32 | 0; //@line 12724
 $175 = HEAP32[$174 >> 2] | 0; //@line 12725
 if ($175 >>> 0 < $60 >>> 0) {
  $$013$i = 0; //@line 12728
  do {
   if ($$013$i >>> 0 < $175 >>> 0) {
    $$sink$sink$i = HEAP8[$2 + 16 + $$013$i >> 0] | 0; //@line 12734
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($175 | 0) ? -128 : 0; //@line 12738
   }
   HEAP8[$82 + $$013$i >> 0] = $$sink$sink$i; //@line 12741
   $$013$i = $$013$i + 1 | 0; //@line 12742
  } while (($$013$i | 0) != ($60 | 0));
  $$09$i45 = 0; //@line 12745
  do {
   $183 = $82 + $$09$i45 | 0; //@line 12752
   HEAP8[$183 >> 0] = HEAP8[$88 + $$09$i45 >> 0] ^ HEAP8[$183 >> 0]; //@line 12757
   $$09$i45 = $$09$i45 + 1 | 0; //@line 12758
  } while (($$09$i45 | 0) != ($60 | 0));
  label = 21; //@line 12761
 } else {
  if ($60 | 0) {
   $$09$i41 = 0; //@line 12770
   do {
    HEAP8[$82 + $$09$i41 >> 0] = HEAP8[$110 + $$09$i41 >> 0] ^ HEAP8[$2 + 16 + $$09$i41 >> 0]; //@line 12778
    $$09$i41 = $$09$i41 + 1 | 0; //@line 12779
   } while (($$09$i41 | 0) != ($60 | 0));
   label = 21; //@line 12782
  }
 }
 if ((label | 0) == 21) {
  if ($60 | 0) {
   $$09$i = 0; //@line 12793
   do {
    $200 = $2 + $$09$i | 0; //@line 12797
    HEAP8[$200 >> 0] = HEAP8[$200 >> 0] ^ HEAP8[$82 + $$09$i >> 0]; //@line 12800
    $$09$i = $$09$i + 1 | 0; //@line 12801
   } while (($$09$i | 0) != ($60 | 0));
  }
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(164) | 0; //@line 12811
 $204 = _mbedtls_cipher_update($102, $100, $60, $100, $80) | 0; //@line 12812
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 694; //@line 12815
  $205 = $ReallocAsyncCtx + 4 | 0; //@line 12816
  HEAP32[$205 >> 2] = $173; //@line 12817
  $206 = $ReallocAsyncCtx + 8 | 0; //@line 12818
  HEAP32[$206 >> 2] = $2; //@line 12819
  $207 = $ReallocAsyncCtx + 12 | 0; //@line 12820
  HEAP32[$207 >> 2] = $4; //@line 12821
  $208 = $ReallocAsyncCtx + 16 | 0; //@line 12822
  HEAP32[$208 >> 2] = $6; //@line 12823
  $209 = $ReallocAsyncCtx + 20 | 0; //@line 12824
  HEAP32[$209 >> 2] = $8; //@line 12825
  $210 = $ReallocAsyncCtx + 24 | 0; //@line 12826
  HEAP32[$210 >> 2] = $14; //@line 12827
  $211 = $ReallocAsyncCtx + 28 | 0; //@line 12828
  HEAP32[$211 >> 2] = $20; //@line 12829
  $212 = $ReallocAsyncCtx + 32 | 0; //@line 12830
  HEAP32[$212 >> 2] = $22; //@line 12831
  $213 = $ReallocAsyncCtx + 36 | 0; //@line 12832
  HEAP32[$213 >> 2] = $24; //@line 12833
  $214 = $ReallocAsyncCtx + 40 | 0; //@line 12834
  HEAP32[$214 >> 2] = $26; //@line 12835
  $215 = $ReallocAsyncCtx + 44 | 0; //@line 12836
  HEAP32[$215 >> 2] = $32; //@line 12837
  $216 = $ReallocAsyncCtx + 48 | 0; //@line 12838
  HEAP32[$216 >> 2] = $34; //@line 12839
  $217 = $ReallocAsyncCtx + 52 | 0; //@line 12840
  HEAP32[$217 >> 2] = $40; //@line 12841
  $218 = $ReallocAsyncCtx + 56 | 0; //@line 12842
  HEAP32[$218 >> 2] = $42; //@line 12843
  $219 = $ReallocAsyncCtx + 60 | 0; //@line 12844
  HEAP32[$219 >> 2] = $46; //@line 12845
  $220 = $ReallocAsyncCtx + 64 | 0; //@line 12846
  HEAP32[$220 >> 2] = $48; //@line 12847
  $221 = $ReallocAsyncCtx + 68 | 0; //@line 12848
  HEAP32[$221 >> 2] = $50; //@line 12849
  $222 = $ReallocAsyncCtx + 72 | 0; //@line 12850
  HEAP32[$222 >> 2] = $52; //@line 12851
  $223 = $ReallocAsyncCtx + 76 | 0; //@line 12852
  HEAP32[$223 >> 2] = $56; //@line 12853
  $224 = $ReallocAsyncCtx + 80 | 0; //@line 12854
  HEAP32[$224 >> 2] = $58; //@line 12855
  $225 = $ReallocAsyncCtx + 84 | 0; //@line 12856
  HEAP32[$225 >> 2] = $60; //@line 12857
  $226 = $ReallocAsyncCtx + 88 | 0; //@line 12858
  HEAP32[$226 >> 2] = $62; //@line 12859
  $227 = $ReallocAsyncCtx + 92 | 0; //@line 12860
  HEAP32[$227 >> 2] = $64; //@line 12861
  $228 = $ReallocAsyncCtx + 96 | 0; //@line 12862
  HEAP32[$228 >> 2] = $66; //@line 12863
  $229 = $ReallocAsyncCtx + 100 | 0; //@line 12864
  HEAP32[$229 >> 2] = $68; //@line 12865
  $230 = $ReallocAsyncCtx + 104 | 0; //@line 12866
  HEAP32[$230 >> 2] = $72; //@line 12867
  $231 = $ReallocAsyncCtx + 108 | 0; //@line 12868
  HEAP32[$231 >> 2] = $78; //@line 12869
  $232 = $ReallocAsyncCtx + 112 | 0; //@line 12870
  HEAP32[$232 >> 2] = $92; //@line 12871
  $233 = $ReallocAsyncCtx + 116 | 0; //@line 12872
  HEAP32[$233 >> 2] = $94; //@line 12873
  $234 = $ReallocAsyncCtx + 120 | 0; //@line 12874
  HEAP32[$234 >> 2] = $96; //@line 12875
  $235 = $ReallocAsyncCtx + 124 | 0; //@line 12876
  HEAP32[$235 >> 2] = $98; //@line 12877
  $236 = $ReallocAsyncCtx + 128 | 0; //@line 12878
  HEAP32[$236 >> 2] = $100; //@line 12879
  $237 = $ReallocAsyncCtx + 132 | 0; //@line 12880
  HEAP32[$237 >> 2] = $174; //@line 12881
  $238 = $ReallocAsyncCtx + 136 | 0; //@line 12882
  HEAP32[$238 >> 2] = $104; //@line 12883
  $239 = $ReallocAsyncCtx + 140 | 0; //@line 12884
  HEAP32[$239 >> 2] = $106; //@line 12885
  $240 = $ReallocAsyncCtx + 144 | 0; //@line 12886
  HEAP32[$240 >> 2] = $108; //@line 12887
  $241 = $ReallocAsyncCtx + 148 | 0; //@line 12888
  HEAP32[$241 >> 2] = $116; //@line 12889
  $242 = $ReallocAsyncCtx + 152 | 0; //@line 12890
  HEAP32[$242 >> 2] = $118; //@line 12891
  $243 = $ReallocAsyncCtx + 156 | 0; //@line 12892
  HEAP32[$243 >> 2] = $122; //@line 12893
  $244 = $ReallocAsyncCtx + 160 | 0; //@line 12894
  HEAP32[$244 >> 2] = $124; //@line 12895
  sp = STACKTOP; //@line 12896
  return;
 }
 HEAP32[___async_retval >> 2] = $204; //@line 12900
 ___async_unwind = 0; //@line 12901
 HEAP32[$ReallocAsyncCtx >> 2] = 694; //@line 12902
 $205 = $ReallocAsyncCtx + 4 | 0; //@line 12903
 HEAP32[$205 >> 2] = $173; //@line 12904
 $206 = $ReallocAsyncCtx + 8 | 0; //@line 12905
 HEAP32[$206 >> 2] = $2; //@line 12906
 $207 = $ReallocAsyncCtx + 12 | 0; //@line 12907
 HEAP32[$207 >> 2] = $4; //@line 12908
 $208 = $ReallocAsyncCtx + 16 | 0; //@line 12909
 HEAP32[$208 >> 2] = $6; //@line 12910
 $209 = $ReallocAsyncCtx + 20 | 0; //@line 12911
 HEAP32[$209 >> 2] = $8; //@line 12912
 $210 = $ReallocAsyncCtx + 24 | 0; //@line 12913
 HEAP32[$210 >> 2] = $14; //@line 12914
 $211 = $ReallocAsyncCtx + 28 | 0; //@line 12915
 HEAP32[$211 >> 2] = $20; //@line 12916
 $212 = $ReallocAsyncCtx + 32 | 0; //@line 12917
 HEAP32[$212 >> 2] = $22; //@line 12918
 $213 = $ReallocAsyncCtx + 36 | 0; //@line 12919
 HEAP32[$213 >> 2] = $24; //@line 12920
 $214 = $ReallocAsyncCtx + 40 | 0; //@line 12921
 HEAP32[$214 >> 2] = $26; //@line 12922
 $215 = $ReallocAsyncCtx + 44 | 0; //@line 12923
 HEAP32[$215 >> 2] = $32; //@line 12924
 $216 = $ReallocAsyncCtx + 48 | 0; //@line 12925
 HEAP32[$216 >> 2] = $34; //@line 12926
 $217 = $ReallocAsyncCtx + 52 | 0; //@line 12927
 HEAP32[$217 >> 2] = $40; //@line 12928
 $218 = $ReallocAsyncCtx + 56 | 0; //@line 12929
 HEAP32[$218 >> 2] = $42; //@line 12930
 $219 = $ReallocAsyncCtx + 60 | 0; //@line 12931
 HEAP32[$219 >> 2] = $46; //@line 12932
 $220 = $ReallocAsyncCtx + 64 | 0; //@line 12933
 HEAP32[$220 >> 2] = $48; //@line 12934
 $221 = $ReallocAsyncCtx + 68 | 0; //@line 12935
 HEAP32[$221 >> 2] = $50; //@line 12936
 $222 = $ReallocAsyncCtx + 72 | 0; //@line 12937
 HEAP32[$222 >> 2] = $52; //@line 12938
 $223 = $ReallocAsyncCtx + 76 | 0; //@line 12939
 HEAP32[$223 >> 2] = $56; //@line 12940
 $224 = $ReallocAsyncCtx + 80 | 0; //@line 12941
 HEAP32[$224 >> 2] = $58; //@line 12942
 $225 = $ReallocAsyncCtx + 84 | 0; //@line 12943
 HEAP32[$225 >> 2] = $60; //@line 12944
 $226 = $ReallocAsyncCtx + 88 | 0; //@line 12945
 HEAP32[$226 >> 2] = $62; //@line 12946
 $227 = $ReallocAsyncCtx + 92 | 0; //@line 12947
 HEAP32[$227 >> 2] = $64; //@line 12948
 $228 = $ReallocAsyncCtx + 96 | 0; //@line 12949
 HEAP32[$228 >> 2] = $66; //@line 12950
 $229 = $ReallocAsyncCtx + 100 | 0; //@line 12951
 HEAP32[$229 >> 2] = $68; //@line 12952
 $230 = $ReallocAsyncCtx + 104 | 0; //@line 12953
 HEAP32[$230 >> 2] = $72; //@line 12954
 $231 = $ReallocAsyncCtx + 108 | 0; //@line 12955
 HEAP32[$231 >> 2] = $78; //@line 12956
 $232 = $ReallocAsyncCtx + 112 | 0; //@line 12957
 HEAP32[$232 >> 2] = $92; //@line 12958
 $233 = $ReallocAsyncCtx + 116 | 0; //@line 12959
 HEAP32[$233 >> 2] = $94; //@line 12960
 $234 = $ReallocAsyncCtx + 120 | 0; //@line 12961
 HEAP32[$234 >> 2] = $96; //@line 12962
 $235 = $ReallocAsyncCtx + 124 | 0; //@line 12963
 HEAP32[$235 >> 2] = $98; //@line 12964
 $236 = $ReallocAsyncCtx + 128 | 0; //@line 12965
 HEAP32[$236 >> 2] = $100; //@line 12966
 $237 = $ReallocAsyncCtx + 132 | 0; //@line 12967
 HEAP32[$237 >> 2] = $174; //@line 12968
 $238 = $ReallocAsyncCtx + 136 | 0; //@line 12969
 HEAP32[$238 >> 2] = $104; //@line 12970
 $239 = $ReallocAsyncCtx + 140 | 0; //@line 12971
 HEAP32[$239 >> 2] = $106; //@line 12972
 $240 = $ReallocAsyncCtx + 144 | 0; //@line 12973
 HEAP32[$240 >> 2] = $108; //@line 12974
 $241 = $ReallocAsyncCtx + 148 | 0; //@line 12975
 HEAP32[$241 >> 2] = $116; //@line 12976
 $242 = $ReallocAsyncCtx + 152 | 0; //@line 12977
 HEAP32[$242 >> 2] = $118; //@line 12978
 $243 = $ReallocAsyncCtx + 156 | 0; //@line 12979
 HEAP32[$243 >> 2] = $122; //@line 12980
 $244 = $ReallocAsyncCtx + 160 | 0; //@line 12981
 HEAP32[$244 >> 2] = $124; //@line 12982
 sp = STACKTOP; //@line 12983
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_424($0) {
 $0 = $0 | 0;
 var $$pre13 = 0, $10 = 0, $100 = 0, $104 = 0, $105 = 0, $107 = 0, $108 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $72 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $88 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 24501
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24503
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24505
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24507
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24509
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24511
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24513
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24515
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24517
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24519
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24521
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24523
 $$pre13 = HEAP8[$2 >> 0] | 0; //@line 24524
 if ($$pre13 & 8) {
  HEAP8[$2 >> 0] = $$pre13 & -9; //@line 24529
  $27 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24531
  $28 = $27 + 32 | 0; //@line 24532
  $30 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 24534
  $31 = $27 + 44 | 0; //@line 24535
  $32 = HEAP32[$31 >> 2] | 0; //@line 24536
  if (!$32) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 24539
   _mbed_assert_internal(15352, 15357, 1102); //@line 24540
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 474; //@line 24543
    $34 = $ReallocAsyncCtx17 + 4 | 0; //@line 24544
    HEAP32[$34 >> 2] = $2; //@line 24545
    $35 = $ReallocAsyncCtx17 + 8 | 0; //@line 24546
    HEAP32[$35 >> 2] = $4; //@line 24547
    $36 = $ReallocAsyncCtx17 + 12 | 0; //@line 24548
    HEAP32[$36 >> 2] = $6; //@line 24549
    $37 = $ReallocAsyncCtx17 + 16 | 0; //@line 24550
    HEAP32[$37 >> 2] = $16; //@line 24551
    $38 = $ReallocAsyncCtx17 + 20 | 0; //@line 24552
    HEAP32[$38 >> 2] = $18; //@line 24553
    $39 = $ReallocAsyncCtx17 + 24 | 0; //@line 24554
    HEAP32[$39 >> 2] = $20; //@line 24555
    $40 = $ReallocAsyncCtx17 + 28 | 0; //@line 24556
    HEAP32[$40 >> 2] = $22; //@line 24557
    $41 = $ReallocAsyncCtx17 + 32 | 0; //@line 24558
    HEAP32[$41 >> 2] = $8; //@line 24559
    $42 = $ReallocAsyncCtx17 + 36 | 0; //@line 24560
    HEAP32[$42 >> 2] = $10; //@line 24561
    $43 = $ReallocAsyncCtx17 + 40 | 0; //@line 24562
    HEAP32[$43 >> 2] = $12; //@line 24563
    $44 = $ReallocAsyncCtx17 + 44 | 0; //@line 24564
    HEAP32[$44 >> 2] = $14; //@line 24565
    $45 = $ReallocAsyncCtx17 + 48 | 0; //@line 24566
    HEAP32[$45 >> 2] = $28; //@line 24567
    $46 = $ReallocAsyncCtx17 + 52 | 0; //@line 24568
    HEAP32[$46 >> 2] = $30; //@line 24569
    $47 = $ReallocAsyncCtx17 + 56 | 0; //@line 24570
    HEAP32[$47 >> 2] = $31; //@line 24571
    sp = STACKTOP; //@line 24572
    return;
   }
   ___async_unwind = 0; //@line 24575
   HEAP32[$ReallocAsyncCtx17 >> 2] = 474; //@line 24576
   $34 = $ReallocAsyncCtx17 + 4 | 0; //@line 24577
   HEAP32[$34 >> 2] = $2; //@line 24578
   $35 = $ReallocAsyncCtx17 + 8 | 0; //@line 24579
   HEAP32[$35 >> 2] = $4; //@line 24580
   $36 = $ReallocAsyncCtx17 + 12 | 0; //@line 24581
   HEAP32[$36 >> 2] = $6; //@line 24582
   $37 = $ReallocAsyncCtx17 + 16 | 0; //@line 24583
   HEAP32[$37 >> 2] = $16; //@line 24584
   $38 = $ReallocAsyncCtx17 + 20 | 0; //@line 24585
   HEAP32[$38 >> 2] = $18; //@line 24586
   $39 = $ReallocAsyncCtx17 + 24 | 0; //@line 24587
   HEAP32[$39 >> 2] = $20; //@line 24588
   $40 = $ReallocAsyncCtx17 + 28 | 0; //@line 24589
   HEAP32[$40 >> 2] = $22; //@line 24590
   $41 = $ReallocAsyncCtx17 + 32 | 0; //@line 24591
   HEAP32[$41 >> 2] = $8; //@line 24592
   $42 = $ReallocAsyncCtx17 + 36 | 0; //@line 24593
   HEAP32[$42 >> 2] = $10; //@line 24594
   $43 = $ReallocAsyncCtx17 + 40 | 0; //@line 24595
   HEAP32[$43 >> 2] = $12; //@line 24596
   $44 = $ReallocAsyncCtx17 + 44 | 0; //@line 24597
   HEAP32[$44 >> 2] = $14; //@line 24598
   $45 = $ReallocAsyncCtx17 + 48 | 0; //@line 24599
   HEAP32[$45 >> 2] = $28; //@line 24600
   $46 = $ReallocAsyncCtx17 + 52 | 0; //@line 24601
   HEAP32[$46 >> 2] = $30; //@line 24602
   $47 = $ReallocAsyncCtx17 + 56 | 0; //@line 24603
   HEAP32[$47 >> 2] = $31; //@line 24604
   sp = STACKTOP; //@line 24605
   return;
  } else {
   $48 = HEAP32[$32 >> 2] | 0; //@line 24608
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 24609
   FUNCTION_TABLE_vii[$48 & 31]($28, $30); //@line 24610
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 24613
    $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 24614
    HEAP32[$49 >> 2] = $4; //@line 24615
    $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 24616
    HEAP32[$50 >> 2] = $6; //@line 24617
    $51 = $ReallocAsyncCtx3 + 12 | 0; //@line 24618
    HEAP32[$51 >> 2] = $2; //@line 24619
    $52 = $ReallocAsyncCtx3 + 16 | 0; //@line 24620
    HEAP32[$52 >> 2] = $8; //@line 24621
    $53 = $ReallocAsyncCtx3 + 20 | 0; //@line 24622
    HEAP32[$53 >> 2] = $10; //@line 24623
    $54 = $ReallocAsyncCtx3 + 24 | 0; //@line 24624
    HEAP32[$54 >> 2] = $12; //@line 24625
    $55 = $ReallocAsyncCtx3 + 28 | 0; //@line 24626
    HEAP32[$55 >> 2] = $14; //@line 24627
    $56 = $ReallocAsyncCtx3 + 32 | 0; //@line 24628
    HEAP32[$56 >> 2] = $16; //@line 24629
    $57 = $ReallocAsyncCtx3 + 36 | 0; //@line 24630
    HEAP32[$57 >> 2] = $18; //@line 24631
    $58 = $ReallocAsyncCtx3 + 40 | 0; //@line 24632
    HEAP32[$58 >> 2] = $20; //@line 24633
    $59 = $ReallocAsyncCtx3 + 44 | 0; //@line 24634
    HEAP32[$59 >> 2] = $22; //@line 24635
    sp = STACKTOP; //@line 24636
    return;
   }
   ___async_unwind = 0; //@line 24639
   HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 24640
   $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 24641
   HEAP32[$49 >> 2] = $4; //@line 24642
   $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 24643
   HEAP32[$50 >> 2] = $6; //@line 24644
   $51 = $ReallocAsyncCtx3 + 12 | 0; //@line 24645
   HEAP32[$51 >> 2] = $2; //@line 24646
   $52 = $ReallocAsyncCtx3 + 16 | 0; //@line 24647
   HEAP32[$52 >> 2] = $8; //@line 24648
   $53 = $ReallocAsyncCtx3 + 20 | 0; //@line 24649
   HEAP32[$53 >> 2] = $10; //@line 24650
   $54 = $ReallocAsyncCtx3 + 24 | 0; //@line 24651
   HEAP32[$54 >> 2] = $12; //@line 24652
   $55 = $ReallocAsyncCtx3 + 28 | 0; //@line 24653
   HEAP32[$55 >> 2] = $14; //@line 24654
   $56 = $ReallocAsyncCtx3 + 32 | 0; //@line 24655
   HEAP32[$56 >> 2] = $16; //@line 24656
   $57 = $ReallocAsyncCtx3 + 36 | 0; //@line 24657
   HEAP32[$57 >> 2] = $18; //@line 24658
   $58 = $ReallocAsyncCtx3 + 40 | 0; //@line 24659
   HEAP32[$58 >> 2] = $20; //@line 24660
   $59 = $ReallocAsyncCtx3 + 44 | 0; //@line 24661
   HEAP32[$59 >> 2] = $22; //@line 24662
   sp = STACKTOP; //@line 24663
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(13258, $8) | 0; //@line 24670
  _printf(13405, $12) | 0; //@line 24671
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 24672
  _putchar(10) | 0; //@line 24673
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 476; //@line 24676
   $62 = $ReallocAsyncCtx7 + 4 | 0; //@line 24677
   HEAP32[$62 >> 2] = $4; //@line 24678
   $63 = $ReallocAsyncCtx7 + 8 | 0; //@line 24679
   HEAP32[$63 >> 2] = $6; //@line 24680
   $64 = $ReallocAsyncCtx7 + 12 | 0; //@line 24681
   HEAP32[$64 >> 2] = $2; //@line 24682
   $65 = $ReallocAsyncCtx7 + 16 | 0; //@line 24683
   HEAP32[$65 >> 2] = $16; //@line 24684
   $66 = $ReallocAsyncCtx7 + 20 | 0; //@line 24685
   HEAP32[$66 >> 2] = $18; //@line 24686
   $67 = $ReallocAsyncCtx7 + 24 | 0; //@line 24687
   HEAP32[$67 >> 2] = $20; //@line 24688
   $68 = $ReallocAsyncCtx7 + 28 | 0; //@line 24689
   HEAP32[$68 >> 2] = $22; //@line 24690
   sp = STACKTOP; //@line 24691
   return;
  }
  ___async_unwind = 0; //@line 24694
  HEAP32[$ReallocAsyncCtx7 >> 2] = 476; //@line 24695
  $62 = $ReallocAsyncCtx7 + 4 | 0; //@line 24696
  HEAP32[$62 >> 2] = $4; //@line 24697
  $63 = $ReallocAsyncCtx7 + 8 | 0; //@line 24698
  HEAP32[$63 >> 2] = $6; //@line 24699
  $64 = $ReallocAsyncCtx7 + 12 | 0; //@line 24700
  HEAP32[$64 >> 2] = $2; //@line 24701
  $65 = $ReallocAsyncCtx7 + 16 | 0; //@line 24702
  HEAP32[$65 >> 2] = $16; //@line 24703
  $66 = $ReallocAsyncCtx7 + 20 | 0; //@line 24704
  HEAP32[$66 >> 2] = $18; //@line 24705
  $67 = $ReallocAsyncCtx7 + 24 | 0; //@line 24706
  HEAP32[$67 >> 2] = $20; //@line 24707
  $68 = $ReallocAsyncCtx7 + 28 | 0; //@line 24708
  HEAP32[$68 >> 2] = $22; //@line 24709
  sp = STACKTOP; //@line 24710
  return;
 }
 $69 = HEAP8[$2 >> 0] & -33; //@line 24714
 HEAP8[$2 >> 0] = $69; //@line 24715
 do {
  if (!($69 & 2)) {
   $100 = $69; //@line 24720
  } else {
   $72 = $69 & -3; //@line 24722
   HEAP8[$2 >> 0] = $72; //@line 24723
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(13258, $16) | 0; //@line 24728
    _printf(13285, $20) | 0; //@line 24729
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 24730
    _putchar(10) | 0; //@line 24731
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 24734
     $76 = $ReallocAsyncCtx6 + 4 | 0; //@line 24735
     HEAP32[$76 >> 2] = $4; //@line 24736
     $77 = $ReallocAsyncCtx6 + 8 | 0; //@line 24737
     HEAP32[$77 >> 2] = $6; //@line 24738
     $78 = $ReallocAsyncCtx6 + 12 | 0; //@line 24739
     HEAP32[$78 >> 2] = $6; //@line 24740
     $79 = $ReallocAsyncCtx6 + 16 | 0; //@line 24741
     HEAP32[$79 >> 2] = $2; //@line 24742
     sp = STACKTOP; //@line 24743
     return;
    }
    ___async_unwind = 0; //@line 24746
    HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 24747
    $76 = $ReallocAsyncCtx6 + 4 | 0; //@line 24748
    HEAP32[$76 >> 2] = $4; //@line 24749
    $77 = $ReallocAsyncCtx6 + 8 | 0; //@line 24750
    HEAP32[$77 >> 2] = $6; //@line 24751
    $78 = $ReallocAsyncCtx6 + 12 | 0; //@line 24752
    HEAP32[$78 >> 2] = $6; //@line 24753
    $79 = $ReallocAsyncCtx6 + 16 | 0; //@line 24754
    HEAP32[$79 >> 2] = $2; //@line 24755
    sp = STACKTOP; //@line 24756
    return;
   }
   if ($72 & 4) {
    $98 = $72 & -5; //@line 24762
    HEAP8[$2 >> 0] = $98; //@line 24763
    $100 = $98; //@line 24764
    break;
   }
   $83 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24768
   $84 = $83 + 16 | 0; //@line 24769
   $86 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 24771
   $87 = $83 + 28 | 0; //@line 24772
   $88 = HEAP32[$87 >> 2] | 0; //@line 24773
   if (!$88) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 24776
    _mbed_assert_internal(15352, 15357, 1102); //@line 24777
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 24780
     $90 = $ReallocAsyncCtx15 + 4 | 0; //@line 24781
     HEAP32[$90 >> 2] = $87; //@line 24782
     $91 = $ReallocAsyncCtx15 + 8 | 0; //@line 24783
     HEAP32[$91 >> 2] = $84; //@line 24784
     $92 = $ReallocAsyncCtx15 + 12 | 0; //@line 24785
     HEAP32[$92 >> 2] = $86; //@line 24786
     $93 = $ReallocAsyncCtx15 + 16 | 0; //@line 24787
     HEAP32[$93 >> 2] = $2; //@line 24788
     $94 = $ReallocAsyncCtx15 + 20 | 0; //@line 24789
     HEAP32[$94 >> 2] = $4; //@line 24790
     sp = STACKTOP; //@line 24791
     return;
    }
    ___async_unwind = 0; //@line 24794
    HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 24795
    $90 = $ReallocAsyncCtx15 + 4 | 0; //@line 24796
    HEAP32[$90 >> 2] = $87; //@line 24797
    $91 = $ReallocAsyncCtx15 + 8 | 0; //@line 24798
    HEAP32[$91 >> 2] = $84; //@line 24799
    $92 = $ReallocAsyncCtx15 + 12 | 0; //@line 24800
    HEAP32[$92 >> 2] = $86; //@line 24801
    $93 = $ReallocAsyncCtx15 + 16 | 0; //@line 24802
    HEAP32[$93 >> 2] = $2; //@line 24803
    $94 = $ReallocAsyncCtx15 + 20 | 0; //@line 24804
    HEAP32[$94 >> 2] = $4; //@line 24805
    sp = STACKTOP; //@line 24806
    return;
   } else {
    $95 = HEAP32[$88 >> 2] | 0; //@line 24809
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 24810
    FUNCTION_TABLE_vii[$95 & 31]($84, $86); //@line 24811
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 24814
     $96 = $ReallocAsyncCtx4 + 4 | 0; //@line 24815
     HEAP32[$96 >> 2] = $2; //@line 24816
     $97 = $ReallocAsyncCtx4 + 8 | 0; //@line 24817
     HEAP32[$97 >> 2] = $4; //@line 24818
     sp = STACKTOP; //@line 24819
     return;
    }
    ___async_unwind = 0; //@line 24822
    HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 24823
    $96 = $ReallocAsyncCtx4 + 4 | 0; //@line 24824
    HEAP32[$96 >> 2] = $2; //@line 24825
    $97 = $ReallocAsyncCtx4 + 8 | 0; //@line 24826
    HEAP32[$97 >> 2] = $4; //@line 24827
    sp = STACKTOP; //@line 24828
    return;
   }
  }
 } while (0);
 if (!($100 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $100 & -17; //@line 24839
 $104 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24841
 $105 = $104 + 48 | 0; //@line 24842
 $107 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 24844
 $108 = $104 + 60 | 0; //@line 24845
 $109 = HEAP32[$108 >> 2] | 0; //@line 24846
 if (!$109) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 24849
  _mbed_assert_internal(15352, 15357, 1102); //@line 24850
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 24853
   $111 = $ReallocAsyncCtx14 + 4 | 0; //@line 24854
   HEAP32[$111 >> 2] = $108; //@line 24855
   $112 = $ReallocAsyncCtx14 + 8 | 0; //@line 24856
   HEAP32[$112 >> 2] = $105; //@line 24857
   $113 = $ReallocAsyncCtx14 + 12 | 0; //@line 24858
   HEAP32[$113 >> 2] = $107; //@line 24859
   sp = STACKTOP; //@line 24860
   return;
  }
  ___async_unwind = 0; //@line 24863
  HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 24864
  $111 = $ReallocAsyncCtx14 + 4 | 0; //@line 24865
  HEAP32[$111 >> 2] = $108; //@line 24866
  $112 = $ReallocAsyncCtx14 + 8 | 0; //@line 24867
  HEAP32[$112 >> 2] = $105; //@line 24868
  $113 = $ReallocAsyncCtx14 + 12 | 0; //@line 24869
  HEAP32[$113 >> 2] = $107; //@line 24870
  sp = STACKTOP; //@line 24871
  return;
 } else {
  $114 = HEAP32[$109 >> 2] | 0; //@line 24874
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 24875
  FUNCTION_TABLE_vii[$114 & 31]($105, $107); //@line 24876
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 24879
   sp = STACKTOP; //@line 24880
   return;
  }
  ___async_unwind = 0; //@line 24883
  HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 24884
  sp = STACKTOP; //@line 24885
  return;
 }
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$016 = 0, $$05$i = 0, $$06$i = 0, $100 = 0, $108 = 0, $111 = 0, $117 = 0, $119 = 0, $126 = 0, $129 = 0, $134 = 0, $136 = 0, $142 = 0, $145 = 0, $149 = 0, $151 = 0, $156 = 0, $159 = 0, $17 = 0, $39 = 0, $4 = 0, $5 = 0, $51 = 0, $52 = 0, $6 = 0, $61 = 0, $69 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $88 = 0, $91 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx37 = 0, $AsyncCtx40 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 17921
 STACKTOP = STACKTOP + 80 | 0; //@line 17922
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 17922
 $4 = sp + 64 | 0; //@line 17923
 $5 = sp + 48 | 0; //@line 17924
 $6 = sp + 32 | 0; //@line 17925
 $7 = sp + 16 | 0; //@line 17926
 $8 = sp; //@line 17927
 HEAP32[$0 + 1328 >> 2] = $3; //@line 17929
 if (!$1) {
  $$016 = -1003; //@line 17932
  STACKTOP = sp; //@line 17933
  return $$016 | 0; //@line 17933
 }
 HEAP32[$0 >> 2] = $2; //@line 17935
 __ZN11LoRaMacMlme23activate_mlme_subsystemEP7LoRaPHY($0 + 264 | 0, $2); //@line 17937
 __ZN10LoRaMacMib22activate_mib_subsystemEP7LoRaPHY($0 + 348 | 0, HEAP32[$0 >> 2] | 0); //@line 17940
 __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0 + 352 | 0, HEAP32[$0 >> 2] | 0); //@line 17943
 HEAP32[$0 + 1324 >> 2] = $1; //@line 17945
 $17 = $0 + 360 | 0; //@line 17946
 HEAP8[$0 + 944 >> 0] = 0; //@line 17948
 HEAP32[$17 >> 2] = 0; //@line 17949
 HEAP32[$0 + 968 >> 2] = 0; //@line 17951
 HEAP8[$0 + 897 >> 0] = 0; //@line 17953
 HEAP8[$0 + 896 >> 0] = 1; //@line 17955
 HEAP8[$0 + 369 >> 0] = 0; //@line 17957
 HEAP32[$0 + 980 >> 2] = 0; //@line 17959
 HEAP32[$0 + 984 >> 2] = 0; //@line 17961
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $17, 1); //@line 17963
 HEAP32[$0 + 1100 >> 2] = 10; //@line 17965
 HEAP8[$0 + 1104 >> 0] = 6; //@line 17967
 HEAP8[$0 + 1128 >> 0] = 1; //@line 17969
 HEAP8[$0 + 372 >> 0] = 0; //@line 17971
 HEAP32[$0 + 956 >> 2] = 0; //@line 17973
 HEAP32[$0 + 960 >> 2] = 0; //@line 17975
 HEAP32[$0 + 964 >> 2] = 0; //@line 17977
 HEAP8[$0 + 380 >> 0] = 0; //@line 17979
 HEAP8[$0 + 894 >> 0] = 1; //@line 17981
 HEAP8[$0 + 895 >> 0] = 1; //@line 17983
 HEAP8[$0 + 377 >> 0] = 0; //@line 17985
 HEAP8[$0 + 1152 >> 0] = 0; //@line 17987
 HEAP16[$0 + 1154 >> 1] = 1; //@line 17989
 $39 = $0 + 4 | 0; //@line 17990
 __ZN14LoRaMacCommand20clear_command_bufferEv($39); //@line 17991
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($39); //@line 17992
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($39); //@line 17993
 HEAP8[$0 + 371 >> 0] = 1; //@line 17995
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $17, 0); //@line 17997
 HEAP8[$0 + 373 >> 0] = 0; //@line 17999
 HEAP8[$0 + 374 >> 0] = 0; //@line 18001
 $$05$i = HEAP32[$0 + 1208 >> 2] | 0; //@line 18003
 if ($$05$i | 0) {
  $$06$i = $$05$i; //@line 18006
  do {
   HEAP32[$$06$i + 36 >> 2] = 0; //@line 18009
   $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 18011
  } while (($$06$i | 0) != 0);
 }
 HEAP8[$0 + 378 >> 0] = 0; //@line 18021
 HEAP8[$0 + 379 >> 0] = 0; //@line 18023
 $51 = HEAP32[$0 >> 2] | 0; //@line 18024
 $AsyncCtx34 = _emscripten_alloc_async_context(32, sp) | 0; //@line 18025
 $52 = __ZN7LoRaPHY13get_radio_rngEv($51) | 0; //@line 18026
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 525; //@line 18029
  HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 18031
  HEAP32[$AsyncCtx34 + 8 >> 2] = $8; //@line 18033
  HEAP32[$AsyncCtx34 + 12 >> 2] = $7; //@line 18035
  HEAP32[$AsyncCtx34 + 16 >> 2] = $6; //@line 18037
  HEAP32[$AsyncCtx34 + 20 >> 2] = $5; //@line 18039
  HEAP32[$AsyncCtx34 + 24 >> 2] = $4; //@line 18041
  HEAP32[$AsyncCtx34 + 28 >> 2] = $0; //@line 18043
  sp = STACKTOP; //@line 18044
  STACKTOP = sp; //@line 18045
  return 0; //@line 18045
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 18047
 _srand($52); //@line 18048
 HEAP8[$0 + 368 >> 0] = 1; //@line 18050
 $61 = HEAP32[$0 >> 2] | 0; //@line 18051
 $AsyncCtx37 = _emscripten_alloc_async_context(32, sp) | 0; //@line 18052
 __ZN7LoRaPHY25setup_public_network_modeEb($61, 1); //@line 18053
 if (___async) {
  HEAP32[$AsyncCtx37 >> 2] = 526; //@line 18056
  HEAP32[$AsyncCtx37 + 4 >> 2] = $0; //@line 18058
  HEAP32[$AsyncCtx37 + 8 >> 2] = $8; //@line 18060
  HEAP32[$AsyncCtx37 + 12 >> 2] = $7; //@line 18062
  HEAP32[$AsyncCtx37 + 16 >> 2] = $6; //@line 18064
  HEAP32[$AsyncCtx37 + 20 >> 2] = $5; //@line 18066
  HEAP32[$AsyncCtx37 + 24 >> 2] = $4; //@line 18068
  HEAP32[$AsyncCtx37 + 28 >> 2] = $0; //@line 18070
  sp = STACKTOP; //@line 18071
  STACKTOP = sp; //@line 18072
  return 0; //@line 18072
 }
 _emscripten_free_async_context($AsyncCtx37 | 0); //@line 18074
 $69 = HEAP32[$0 >> 2] | 0; //@line 18075
 $AsyncCtx40 = _emscripten_alloc_async_context(28, sp) | 0; //@line 18076
 __ZN7LoRaPHY18put_radio_to_sleepEv($69); //@line 18077
 if (___async) {
  HEAP32[$AsyncCtx40 >> 2] = 527; //@line 18080
  HEAP32[$AsyncCtx40 + 4 >> 2] = $0; //@line 18082
  HEAP32[$AsyncCtx40 + 8 >> 2] = $7; //@line 18084
  HEAP32[$AsyncCtx40 + 12 >> 2] = $8; //@line 18086
  HEAP32[$AsyncCtx40 + 16 >> 2] = $6; //@line 18088
  HEAP32[$AsyncCtx40 + 20 >> 2] = $5; //@line 18090
  HEAP32[$AsyncCtx40 + 24 >> 2] = $4; //@line 18092
  sp = STACKTOP; //@line 18093
  STACKTOP = sp; //@line 18094
  return 0; //@line 18094
 }
 _emscripten_free_async_context($AsyncCtx40 | 0); //@line 18096
 $76 = $0 + 356 | 0; //@line 18097
 $77 = HEAP32[$76 >> 2] | 0; //@line 18098
 $79 = $4 + 12 | 0; //@line 18100
 HEAP32[$4 >> 2] = 528; //@line 18101
 HEAP32[$4 + 4 >> 2] = 0; //@line 18103
 HEAP32[$4 + 8 >> 2] = $0; //@line 18105
 HEAP32[$79 >> 2] = 848; //@line 18106
 $AsyncCtx30 = _emscripten_alloc_async_context(36, sp) | 0; //@line 18107
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($77, $0 + 996 | 0, $4); //@line 18108
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 529; //@line 18111
  HEAP32[$AsyncCtx30 + 4 >> 2] = $76; //@line 18113
  HEAP32[$AsyncCtx30 + 8 >> 2] = $0; //@line 18115
  HEAP32[$AsyncCtx30 + 12 >> 2] = $7; //@line 18117
  HEAP32[$AsyncCtx30 + 16 >> 2] = $8; //@line 18119
  HEAP32[$AsyncCtx30 + 20 >> 2] = $6; //@line 18121
  HEAP32[$AsyncCtx30 + 24 >> 2] = $5; //@line 18123
  HEAP32[$AsyncCtx30 + 28 >> 2] = $4; //@line 18125
  HEAP32[$AsyncCtx30 + 32 >> 2] = $79; //@line 18127
  sp = STACKTOP; //@line 18128
  STACKTOP = sp; //@line 18129
  return 0; //@line 18129
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 18131
 $88 = HEAP32[$79 >> 2] | 0; //@line 18132
 do {
  if ($88 | 0) {
   $91 = HEAP32[$88 + 8 >> 2] | 0; //@line 18137
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 18138
   FUNCTION_TABLE_vi[$91 & 1023]($4); //@line 18139
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 530; //@line 18142
    HEAP32[$AsyncCtx + 4 >> 2] = $76; //@line 18144
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 18146
    HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 18148
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 18150
    HEAP32[$AsyncCtx + 20 >> 2] = $7; //@line 18152
    HEAP32[$AsyncCtx + 24 >> 2] = $8; //@line 18154
    sp = STACKTOP; //@line 18155
    STACKTOP = sp; //@line 18156
    return 0; //@line 18156
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 18158
    break;
   }
  }
 } while (0);
 $98 = HEAP32[$76 >> 2] | 0; //@line 18163
 $100 = $5 + 12 | 0; //@line 18165
 HEAP32[$5 >> 2] = 531; //@line 18166
 HEAP32[$5 + 4 >> 2] = 0; //@line 18168
 HEAP32[$5 + 8 >> 2] = $0; //@line 18170
 HEAP32[$100 >> 2] = 848; //@line 18171
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 18172
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($98, $0 + 1016 | 0, $5); //@line 18173
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 532; //@line 18176
  HEAP32[$AsyncCtx27 + 4 >> 2] = $76; //@line 18178
  HEAP32[$AsyncCtx27 + 8 >> 2] = $0; //@line 18180
  HEAP32[$AsyncCtx27 + 12 >> 2] = $7; //@line 18182
  HEAP32[$AsyncCtx27 + 16 >> 2] = $8; //@line 18184
  HEAP32[$AsyncCtx27 + 20 >> 2] = $6; //@line 18186
  HEAP32[$AsyncCtx27 + 24 >> 2] = $5; //@line 18188
  HEAP32[$AsyncCtx27 + 28 >> 2] = $100; //@line 18190
  sp = STACKTOP; //@line 18191
  STACKTOP = sp; //@line 18192
  return 0; //@line 18192
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 18194
 $108 = HEAP32[$100 >> 2] | 0; //@line 18195
 do {
  if ($108 | 0) {
   $111 = HEAP32[$108 + 8 >> 2] | 0; //@line 18200
   $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18201
   FUNCTION_TABLE_vi[$111 & 1023]($5); //@line 18202
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 533; //@line 18205
    HEAP32[$AsyncCtx3 + 4 >> 2] = $76; //@line 18207
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 18209
    HEAP32[$AsyncCtx3 + 12 >> 2] = $6; //@line 18211
    HEAP32[$AsyncCtx3 + 16 >> 2] = $7; //@line 18213
    HEAP32[$AsyncCtx3 + 20 >> 2] = $8; //@line 18215
    sp = STACKTOP; //@line 18216
    STACKTOP = sp; //@line 18217
    return 0; //@line 18217
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18219
    break;
   }
  }
 } while (0);
 $117 = HEAP32[$76 >> 2] | 0; //@line 18224
 $119 = $6 + 12 | 0; //@line 18226
 HEAP32[$6 >> 2] = 534; //@line 18227
 HEAP32[$6 + 4 >> 2] = 0; //@line 18229
 HEAP32[$6 + 8 >> 2] = $0; //@line 18231
 HEAP32[$119 >> 2] = 848; //@line 18232
 $AsyncCtx24 = _emscripten_alloc_async_context(28, sp) | 0; //@line 18233
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($117, $0 + 1036 | 0, $6); //@line 18234
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 535; //@line 18237
  HEAP32[$AsyncCtx24 + 4 >> 2] = $76; //@line 18239
  HEAP32[$AsyncCtx24 + 8 >> 2] = $0; //@line 18241
  HEAP32[$AsyncCtx24 + 12 >> 2] = $7; //@line 18243
  HEAP32[$AsyncCtx24 + 16 >> 2] = $8; //@line 18245
  HEAP32[$AsyncCtx24 + 20 >> 2] = $6; //@line 18247
  HEAP32[$AsyncCtx24 + 24 >> 2] = $119; //@line 18249
  sp = STACKTOP; //@line 18250
  STACKTOP = sp; //@line 18251
  return 0; //@line 18251
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 18253
 $126 = HEAP32[$119 >> 2] | 0; //@line 18254
 do {
  if ($126 | 0) {
   $129 = HEAP32[$126 + 8 >> 2] | 0; //@line 18259
   $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18260
   FUNCTION_TABLE_vi[$129 & 1023]($6); //@line 18261
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 536; //@line 18264
    HEAP32[$AsyncCtx7 + 4 >> 2] = $76; //@line 18266
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 18268
    HEAP32[$AsyncCtx7 + 12 >> 2] = $7; //@line 18270
    HEAP32[$AsyncCtx7 + 16 >> 2] = $8; //@line 18272
    sp = STACKTOP; //@line 18273
    STACKTOP = sp; //@line 18274
    return 0; //@line 18274
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 18276
    break;
   }
  }
 } while (0);
 $134 = HEAP32[$76 >> 2] | 0; //@line 18281
 $136 = $7 + 12 | 0; //@line 18283
 HEAP32[$7 >> 2] = 537; //@line 18284
 HEAP32[$7 + 4 >> 2] = 0; //@line 18286
 HEAP32[$7 + 8 >> 2] = $0; //@line 18288
 HEAP32[$136 >> 2] = 848; //@line 18289
 $AsyncCtx21 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18290
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($134, $0 + 1056 | 0, $7); //@line 18291
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 538; //@line 18294
  HEAP32[$AsyncCtx21 + 4 >> 2] = $136; //@line 18296
  HEAP32[$AsyncCtx21 + 8 >> 2] = $76; //@line 18298
  HEAP32[$AsyncCtx21 + 12 >> 2] = $0; //@line 18300
  HEAP32[$AsyncCtx21 + 16 >> 2] = $8; //@line 18302
  HEAP32[$AsyncCtx21 + 20 >> 2] = $7; //@line 18304
  sp = STACKTOP; //@line 18305
  STACKTOP = sp; //@line 18306
  return 0; //@line 18306
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 18308
 $142 = HEAP32[$136 >> 2] | 0; //@line 18309
 do {
  if ($142 | 0) {
   $145 = HEAP32[$142 + 8 >> 2] | 0; //@line 18314
   $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 18315
   FUNCTION_TABLE_vi[$145 & 1023]($7); //@line 18316
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 539; //@line 18319
    HEAP32[$AsyncCtx11 + 4 >> 2] = $76; //@line 18321
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 18323
    HEAP32[$AsyncCtx11 + 12 >> 2] = $8; //@line 18325
    sp = STACKTOP; //@line 18326
    STACKTOP = sp; //@line 18327
    return 0; //@line 18327
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 18329
    break;
   }
  }
 } while (0);
 $149 = HEAP32[$76 >> 2] | 0; //@line 18334
 $151 = $8 + 12 | 0; //@line 18336
 HEAP32[$8 >> 2] = 540; //@line 18337
 HEAP32[$8 + 4 >> 2] = 0; //@line 18339
 HEAP32[$8 + 8 >> 2] = $0; //@line 18341
 HEAP32[$151 >> 2] = 848; //@line 18342
 $AsyncCtx18 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18343
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($149, $0 + 1076 | 0, $8); //@line 18344
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 541; //@line 18347
  HEAP32[$AsyncCtx18 + 4 >> 2] = $151; //@line 18349
  HEAP32[$AsyncCtx18 + 8 >> 2] = $76; //@line 18351
  HEAP32[$AsyncCtx18 + 12 >> 2] = $0; //@line 18353
  HEAP32[$AsyncCtx18 + 16 >> 2] = $8; //@line 18355
  sp = STACKTOP; //@line 18356
  STACKTOP = sp; //@line 18357
  return 0; //@line 18357
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 18359
 $156 = HEAP32[$151 >> 2] | 0; //@line 18360
 do {
  if ($156 | 0) {
   $159 = HEAP32[$156 + 8 >> 2] | 0; //@line 18365
   $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18366
   FUNCTION_TABLE_vi[$159 & 1023]($8); //@line 18367
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 542; //@line 18370
    HEAP32[$AsyncCtx15 + 4 >> 2] = $76; //@line 18372
    HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 18374
    sp = STACKTOP; //@line 18375
    STACKTOP = sp; //@line 18376
    return 0; //@line 18376
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 18378
    break;
   }
  }
 } while (0);
 HEAP32[$0 + 988 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$76 >> 2] | 0) | 0; //@line 18386
 $$016 = 0; //@line 18387
 STACKTOP = sp; //@line 18388
 return $$016 | 0; //@line 18388
}
function _equeue_dispatch($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$03956$i = 0, $$03956$i$phi = 0, $$04055$i = 0, $$0405571$i = 0, $$04063$i = 0, $$04159$i = 0, $$04258$i = 0, $$057$i = 0, $$065 = 0, $$06790 = 0, $$2 = 0, $$idx = 0, $$sink$in$i$i = 0, $$sroa$0$i = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72 = 0, $10 = 0, $103 = 0, $11 = 0, $12 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $141 = 0, $142 = 0, $144 = 0, $147 = 0, $149 = 0, $152 = 0, $155 = 0, $162 = 0, $166 = 0, $169 = 0, $175 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $3 = 0, $30 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $45 = 0, $5 = 0, $6 = 0, $69 = 0, $7 = 0, $71 = 0, $74 = 0, $8 = 0, $9 = 0, $93 = 0, $94 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$04159$i$looptemp = 0, $$04258$i$looptemp = 0;
 sp = STACKTOP; //@line 5232
 STACKTOP = STACKTOP + 16 | 0; //@line 5233
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5233
 $$sroa$0$i = sp; //@line 5234
 $2 = _equeue_tick() | 0; //@line 5235
 $3 = $2 + $1 | 0; //@line 5236
 $4 = $0 + 36 | 0; //@line 5237
 HEAP8[$4 >> 0] = 0; //@line 5238
 $5 = $0 + 128 | 0; //@line 5239
 $6 = $0 + 9 | 0; //@line 5240
 $7 = $0 + 4 | 0; //@line 5241
 $8 = ($1 | 0) > -1; //@line 5242
 $9 = $0 + 48 | 0; //@line 5243
 $10 = $0 + 8 | 0; //@line 5244
 $$idx = $0 + 16 | 0; //@line 5245
 $11 = $0 + 156 | 0; //@line 5246
 $12 = $0 + 24 | 0; //@line 5247
 $$0 = $2; //@line 5248
 L1 : while (1) {
  _equeue_mutex_lock($5); //@line 5250
  HEAP8[$6 >> 0] = (HEAPU8[$6 >> 0] | 0) + 1; //@line 5255
  if (((HEAP32[$7 >> 2] | 0) - $$0 | 0) < 1) {
   HEAP32[$7 >> 2] = $$0; //@line 5260
  }
  $20 = HEAP32[$0 >> 2] | 0; //@line 5262
  HEAP32[$$sroa$0$i >> 2] = $20; //@line 5263
  $21 = $20; //@line 5264
  L6 : do {
   if (!$20) {
    $$04055$i = $$sroa$0$i; //@line 5268
    $30 = $21; //@line 5268
    label = 8; //@line 5269
   } else {
    $$04063$i = $$sroa$0$i; //@line 5271
    $24 = $21; //@line 5271
    do {
     if (((HEAP32[$24 + 20 >> 2] | 0) - $$0 | 0) >= 1) {
      $$04055$i = $$04063$i; //@line 5278
      $30 = $24; //@line 5278
      label = 8; //@line 5279
      break L6;
     }
     $$04063$i = $24 + 8 | 0; //@line 5282
     $24 = HEAP32[$$04063$i >> 2] | 0; //@line 5283
    } while (($24 | 0) != 0);
    HEAP32[$0 >> 2] = 0; //@line 5291
    $$0405571$i = $$04063$i; //@line 5292
   }
  } while (0);
  if ((label | 0) == 8) {
   label = 0; //@line 5296
   HEAP32[$0 >> 2] = $30; //@line 5297
   if (!$30) {
    $$0405571$i = $$04055$i; //@line 5300
   } else {
    HEAP32[$30 + 16 >> 2] = $0; //@line 5303
    $$0405571$i = $$04055$i; //@line 5304
   }
  }
  HEAP32[$$0405571$i >> 2] = 0; //@line 5307
  _equeue_mutex_unlock($5); //@line 5308
  $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72 = HEAP32[$$sroa$0$i >> 2] | 0; //@line 5309
  if (!$$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72) {} else {
   $$04159$i = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i72; //@line 5313
   $$04258$i = $$sroa$0$i; //@line 5313
   do {
    $$04258$i$looptemp = $$04258$i;
    $$04258$i = $$04159$i + 8 | 0; //@line 5315
    $$04159$i$looptemp = $$04159$i;
    $$04159$i = HEAP32[$$04258$i >> 2] | 0; //@line 5316
    $$03956$i = 0; //@line 5317
    $$057$i = $$04159$i$looptemp; //@line 5317
    while (1) {
     HEAP32[$$057$i + 8 >> 2] = $$03956$i; //@line 5320
     $39 = HEAP32[$$057$i + 12 >> 2] | 0; //@line 5322
     if (!$39) {
      break;
     } else {
      $$03956$i$phi = $$057$i; //@line 5327
      $$057$i = $39; //@line 5327
      $$03956$i = $$03956$i$phi; //@line 5327
     }
    }
    HEAP32[$$04258$i$looptemp >> 2] = $$057$i; //@line 5330
   } while (($$04159$i | 0) != 0);
   $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 = HEAP32[$$sroa$0$i >> 2] | 0; //@line 5338
   if ($$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73 | 0) {
    $$06790 = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i73; //@line 5341
    while (1) {
     $42 = $$06790 + 8 | 0; //@line 5343
     $43 = HEAP32[$42 >> 2] | 0; //@line 5344
     $45 = HEAP32[$$06790 + 32 >> 2] | 0; //@line 5346
     if ($45 | 0) {
      $AsyncCtx = _emscripten_alloc_async_context(84, sp) | 0; //@line 5350
      FUNCTION_TABLE_vi[$45 & 1023]($$06790 + 36 | 0); //@line 5351
      if (___async) {
       label = 18; //@line 5354
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 5357
     }
     $69 = HEAP32[$$06790 + 24 >> 2] | 0; //@line 5360
     if (($69 | 0) > -1) {
      $71 = $$06790 + 20 | 0; //@line 5363
      HEAP32[$71 >> 2] = (HEAP32[$71 >> 2] | 0) + $69; //@line 5366
      $74 = _equeue_tick() | 0; //@line 5367
      $AsyncCtx11 = _emscripten_alloc_async_context(76, sp) | 0; //@line 5368
      _equeue_enqueue($0, $$06790, $74) | 0; //@line 5369
      if (___async) {
       label = 22; //@line 5372
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5375
     } else {
      $93 = $$06790 + 4 | 0; //@line 5378
      $94 = HEAP8[$93 >> 0] | 0; //@line 5379
      HEAP8[$93 >> 0] = (($94 + 1 & 255) << HEAP32[$$idx >> 2] | 0) == 0 ? 1 : ($94 & 255) + 1 & 255; //@line 5388
      $103 = HEAP32[$$06790 + 28 >> 2] | 0; //@line 5390
      if ($103 | 0) {
       $AsyncCtx3 = _emscripten_alloc_async_context(84, sp) | 0; //@line 5394
       FUNCTION_TABLE_vi[$103 & 1023]($$06790 + 36 | 0); //@line 5395
       if (___async) {
        label = 26; //@line 5398
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5401
      }
      _equeue_mutex_lock($11); //@line 5403
      $126 = HEAP32[$12 >> 2] | 0; //@line 5404
      L37 : do {
       if (!$126) {
        $$02329$i$i = $12; //@line 5408
        label = 34; //@line 5409
       } else {
        $128 = HEAP32[$$06790 >> 2] | 0; //@line 5411
        $$025$i$i = $12; //@line 5412
        $130 = $126; //@line 5412
        while (1) {
         $129 = HEAP32[$130 >> 2] | 0; //@line 5414
         if ($129 >>> 0 >= $128 >>> 0) {
          break;
         }
         $132 = $130 + 8 | 0; //@line 5419
         $133 = HEAP32[$132 >> 2] | 0; //@line 5420
         if (!$133) {
          $$02329$i$i = $132; //@line 5423
          label = 34; //@line 5424
          break L37;
         } else {
          $$025$i$i = $132; //@line 5427
          $130 = $133; //@line 5427
         }
        }
        if (($129 | 0) == ($128 | 0)) {
         HEAP32[$$06790 + 12 >> 2] = $130; //@line 5433
         $$02330$i$i = $$025$i$i; //@line 5436
         $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 5436
        } else {
         $$02329$i$i = $$025$i$i; //@line 5438
         label = 34; //@line 5439
        }
       }
      } while (0);
      if ((label | 0) == 34) {
       label = 0; //@line 5444
       HEAP32[$$06790 + 12 >> 2] = 0; //@line 5446
       $$02330$i$i = $$02329$i$i; //@line 5447
       $$sink$in$i$i = $$02329$i$i; //@line 5447
      }
      HEAP32[$42 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 5450
      HEAP32[$$02330$i$i >> 2] = $$06790; //@line 5451
      _equeue_mutex_unlock($11); //@line 5452
     }
     if (!$43) {
      break;
     } else {
      $$06790 = $43; //@line 5458
     }
    }
   }
  }
  $141 = _equeue_tick() | 0; //@line 5463
  if ($8) {
   $142 = $3 - $141 | 0; //@line 5465
   if (($142 | 0) < 1) {
    label = 39; //@line 5468
    break;
   } else {
    $$065 = $142; //@line 5471
   }
  } else {
   $$065 = -1; //@line 5474
  }
  _equeue_mutex_lock($5); //@line 5476
  $162 = HEAP32[$0 >> 2] | 0; //@line 5477
  if (!$162) {
   $$2 = $$065; //@line 5480
  } else {
   $166 = (HEAP32[$162 + 20 >> 2] | 0) - $141 | 0; //@line 5484
   $169 = $166 & ~($166 >> 31); //@line 5487
   $$2 = $169 >>> 0 < $$065 >>> 0 ? $169 : $$065; //@line 5490
  }
  _equeue_mutex_unlock($5); //@line 5492
  _equeue_sema_wait($9, $$2) | 0; //@line 5493
  if (HEAP8[$10 >> 0] | 0) {
   _equeue_mutex_lock($5); //@line 5497
   if (HEAP8[$10 >> 0] | 0) {
    label = 51; //@line 5501
    break;
   }
   _equeue_mutex_unlock($5); //@line 5504
  }
  $175 = _equeue_tick() | 0; //@line 5506
  $AsyncCtx15 = _emscripten_alloc_async_context(76, sp) | 0; //@line 5507
  _wait_ms(20); //@line 5508
  if (___async) {
   label = 54; //@line 5511
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 5514
  $$0 = $175; //@line 5515
 }
 if ((label | 0) == 18) {
  HEAP32[$AsyncCtx >> 2] = 185; //@line 5518
  HEAP32[$AsyncCtx + 4 >> 2] = $$idx; //@line 5520
  HEAP32[$AsyncCtx + 8 >> 2] = $$06790; //@line 5522
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 5524
  HEAP32[$AsyncCtx + 16 >> 2] = $43; //@line 5526
  HEAP32[$AsyncCtx + 20 >> 2] = $$sroa$0$i; //@line 5528
  HEAP32[$AsyncCtx + 24 >> 2] = $$sroa$0$i; //@line 5530
  HEAP32[$AsyncCtx + 28 >> 2] = $12; //@line 5532
  HEAP32[$AsyncCtx + 32 >> 2] = $11; //@line 5534
  HEAP32[$AsyncCtx + 36 >> 2] = $7; //@line 5536
  HEAP32[$AsyncCtx + 40 >> 2] = $0; //@line 5538
  HEAP32[$AsyncCtx + 44 >> 2] = $$sroa$0$i; //@line 5540
  HEAP32[$AsyncCtx + 48 >> 2] = $0; //@line 5542
  HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 5544
  HEAP32[$AsyncCtx + 56 >> 2] = $6; //@line 5546
  HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 5548
  HEAP8[$AsyncCtx + 64 >> 0] = $8 & 1; //@line 5551
  HEAP32[$AsyncCtx + 68 >> 2] = $42; //@line 5553
  HEAP32[$AsyncCtx + 72 >> 2] = $10; //@line 5555
  HEAP32[$AsyncCtx + 76 >> 2] = $9; //@line 5557
  HEAP32[$AsyncCtx + 80 >> 2] = $4; //@line 5559
  sp = STACKTOP; //@line 5560
  STACKTOP = sp; //@line 5561
  return;
 } else if ((label | 0) == 22) {
  HEAP32[$AsyncCtx11 >> 2] = 186; //@line 5564
  HEAP32[$AsyncCtx11 + 4 >> 2] = $$idx; //@line 5566
  HEAP32[$AsyncCtx11 + 8 >> 2] = $4; //@line 5568
  HEAP32[$AsyncCtx11 + 12 >> 2] = $5; //@line 5570
  HEAP32[$AsyncCtx11 + 16 >> 2] = $0; //@line 5572
  HEAP32[$AsyncCtx11 + 20 >> 2] = $43; //@line 5574
  HEAP32[$AsyncCtx11 + 24 >> 2] = $$sroa$0$i; //@line 5576
  HEAP32[$AsyncCtx11 + 28 >> 2] = $$sroa$0$i; //@line 5578
  HEAP32[$AsyncCtx11 + 32 >> 2] = $12; //@line 5580
  HEAP32[$AsyncCtx11 + 36 >> 2] = $11; //@line 5582
  HEAP32[$AsyncCtx11 + 40 >> 2] = $7; //@line 5584
  HEAP32[$AsyncCtx11 + 44 >> 2] = $0; //@line 5586
  HEAP32[$AsyncCtx11 + 48 >> 2] = $$sroa$0$i; //@line 5588
  HEAP32[$AsyncCtx11 + 52 >> 2] = $0; //@line 5590
  HEAP32[$AsyncCtx11 + 56 >> 2] = $6; //@line 5592
  HEAP32[$AsyncCtx11 + 60 >> 2] = $3; //@line 5594
  HEAP8[$AsyncCtx11 + 64 >> 0] = $8 & 1; //@line 5597
  HEAP32[$AsyncCtx11 + 68 >> 2] = $10; //@line 5599
  HEAP32[$AsyncCtx11 + 72 >> 2] = $9; //@line 5601
  sp = STACKTOP; //@line 5602
  STACKTOP = sp; //@line 5603
  return;
 } else if ((label | 0) == 26) {
  HEAP32[$AsyncCtx3 >> 2] = 187; //@line 5606
  HEAP32[$AsyncCtx3 + 4 >> 2] = $$idx; //@line 5608
  HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 5610
  HEAP32[$AsyncCtx3 + 12 >> 2] = $5; //@line 5612
  HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 5614
  HEAP32[$AsyncCtx3 + 20 >> 2] = $43; //@line 5616
  HEAP32[$AsyncCtx3 + 24 >> 2] = $$sroa$0$i; //@line 5618
  HEAP32[$AsyncCtx3 + 28 >> 2] = $$sroa$0$i; //@line 5620
  HEAP32[$AsyncCtx3 + 32 >> 2] = $12; //@line 5622
  HEAP32[$AsyncCtx3 + 36 >> 2] = $11; //@line 5624
  HEAP32[$AsyncCtx3 + 40 >> 2] = $7; //@line 5626
  HEAP32[$AsyncCtx3 + 44 >> 2] = $0; //@line 5628
  HEAP32[$AsyncCtx3 + 48 >> 2] = $$sroa$0$i; //@line 5630
  HEAP32[$AsyncCtx3 + 52 >> 2] = $0; //@line 5632
  HEAP32[$AsyncCtx3 + 56 >> 2] = $6; //@line 5634
  HEAP32[$AsyncCtx3 + 60 >> 2] = $3; //@line 5636
  HEAP8[$AsyncCtx3 + 64 >> 0] = $8 & 1; //@line 5639
  HEAP32[$AsyncCtx3 + 68 >> 2] = $10; //@line 5641
  HEAP32[$AsyncCtx3 + 72 >> 2] = $9; //@line 5643
  HEAP32[$AsyncCtx3 + 76 >> 2] = $$06790; //@line 5645
  HEAP32[$AsyncCtx3 + 80 >> 2] = $42; //@line 5647
  sp = STACKTOP; //@line 5648
  STACKTOP = sp; //@line 5649
  return;
 } else if ((label | 0) == 39) {
  $144 = $0 + 40 | 0; //@line 5652
  if (HEAP32[$144 >> 2] | 0) {
   _equeue_mutex_lock($5); //@line 5656
   $147 = HEAP32[$144 >> 2] | 0; //@line 5657
   do {
    if ($147 | 0) {
     $149 = HEAP32[$0 >> 2] | 0; //@line 5661
     if ($149 | 0) {
      $152 = HEAP32[$0 + 44 >> 2] | 0; //@line 5665
      $155 = (HEAP32[$149 + 20 >> 2] | 0) - $141 | 0; //@line 5668
      $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5672
      FUNCTION_TABLE_vii[$147 & 31]($152, $155 & ~($155 >> 31)); //@line 5673
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 188; //@line 5676
       HEAP32[$AsyncCtx7 + 4 >> 2] = $4; //@line 5678
       HEAP32[$AsyncCtx7 + 8 >> 2] = $5; //@line 5680
       HEAP32[$AsyncCtx7 + 12 >> 2] = $10; //@line 5682
       sp = STACKTOP; //@line 5683
       STACKTOP = sp; //@line 5684
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5686
       break;
      }
     }
    }
   } while (0);
   HEAP8[$4 >> 0] = 1; //@line 5692
   _equeue_mutex_unlock($5); //@line 5693
  }
  HEAP8[$10 >> 0] = 0; //@line 5695
  STACKTOP = sp; //@line 5696
  return;
 } else if ((label | 0) == 51) {
  HEAP8[$10 >> 0] = 0; //@line 5699
  _equeue_mutex_unlock($5); //@line 5700
  STACKTOP = sp; //@line 5701
  return;
 } else if ((label | 0) == 54) {
  HEAP32[$AsyncCtx15 >> 2] = 189; //@line 5704
  HEAP32[$AsyncCtx15 + 4 >> 2] = $$idx; //@line 5706
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 5708
  HEAP32[$AsyncCtx15 + 12 >> 2] = $$sroa$0$i; //@line 5710
  HEAP32[$AsyncCtx15 + 16 >> 2] = $$sroa$0$i; //@line 5712
  HEAP32[$AsyncCtx15 + 20 >> 2] = $12; //@line 5714
  HEAP32[$AsyncCtx15 + 24 >> 2] = $11; //@line 5716
  HEAP32[$AsyncCtx15 + 28 >> 2] = $7; //@line 5718
  HEAP32[$AsyncCtx15 + 32 >> 2] = $0; //@line 5720
  HEAP32[$AsyncCtx15 + 36 >> 2] = $$sroa$0$i; //@line 5722
  HEAP32[$AsyncCtx15 + 40 >> 2] = $0; //@line 5724
  HEAP32[$AsyncCtx15 + 44 >> 2] = $5; //@line 5726
  HEAP32[$AsyncCtx15 + 48 >> 2] = $6; //@line 5728
  HEAP32[$AsyncCtx15 + 52 >> 2] = $3; //@line 5730
  HEAP8[$AsyncCtx15 + 56 >> 0] = $8 & 1; //@line 5733
  HEAP32[$AsyncCtx15 + 60 >> 2] = $10; //@line 5735
  HEAP32[$AsyncCtx15 + 64 >> 2] = $9; //@line 5737
  HEAP32[$AsyncCtx15 + 68 >> 2] = $4; //@line 5739
  HEAP32[$AsyncCtx15 + 72 >> 2] = $175; //@line 5741
  sp = STACKTOP; //@line 5742
  STACKTOP = sp; //@line 5743
  return;
 }
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$054 = 0, $$055 = 0, $$05564 = 0, $$056 = 0, $$05663 = 0, $$05766 = 0, $$06065 = 0, $$158 = 0, $$15862 = 0, $$259 = 0, $$extract$t = 0, $$pre$phiZ2D = 0, $10 = 0, $103 = 0, $109 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $142 = 0, $147 = 0, $148 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $169 = 0, $170 = 0, $174 = 0, $176 = 0, $182 = 0, $183 = 0, $186 = 0, $188 = 0, $201 = 0, $213 = 0, $222 = 0, $227 = 0, $229 = 0, $230 = 0, $231 = 0, $238 = 0, $41 = 0, $6 = 0, $64 = 0, $65 = 0, $7 = 0, $72 = 0, $74 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $95 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17029
 STACKTOP = STACKTOP + 16 | 0; //@line 17030
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17030
 $6 = sp; //@line 17031
 HEAP32[$6 >> 2] = 0; //@line 17032
 $7 = $0 + 636 | 0; //@line 17033
 HEAP16[$7 >> 1] = 0; //@line 17034
 $8 = $0 + 373 | 0; //@line 17035
 HEAP8[$8 >> 0] = 0; //@line 17036
 $9 = ($4 | 0) == 0; //@line 17037
 $$extract$t = $9 ? 0 : $5 & 255; //@line 17039
 $10 = $0 + 893 | 0; //@line 17040
 HEAP8[$10 >> 0] = $$extract$t; //@line 17041
 $12 = $0 + 381 | 0; //@line 17043
 HEAP8[$12 >> 0] = HEAP8[$1 >> 0] | 0; //@line 17044
 switch ((HEAPU8[$1 >> 0] | 0) >>> 5 & 7) {
 case 0:
  {
   HEAP16[$7 >> 1] = 1; //@line 17050
   $16 = HEAP32[$0 + 904 >> 2] | 0; //@line 17053
   HEAP8[$0 + 389 >> 0] = HEAP8[$16 >> 0] | 0; //@line 17058
   HEAP8[$0 + 388 >> 0] = HEAP8[$16 + 1 >> 0] | 0; //@line 17062
   HEAP8[$0 + 387 >> 0] = HEAP8[$16 + 2 >> 0] | 0; //@line 17066
   HEAP8[$0 + 386 >> 0] = HEAP8[$16 + 3 >> 0] | 0; //@line 17070
   HEAP8[$0 + 385 >> 0] = HEAP8[$16 + 4 >> 0] | 0; //@line 17074
   HEAP8[$0 + 384 >> 0] = HEAP8[$16 + 5 >> 0] | 0; //@line 17078
   HEAP8[$0 + 383 >> 0] = HEAP8[$16 + 6 >> 0] | 0; //@line 17081
   HEAP8[$0 + 382 >> 0] = HEAP8[$16 + 7 >> 0] | 0; //@line 17083
   HEAP16[$7 >> 1] = 9; //@line 17084
   $41 = HEAP32[$0 + 900 >> 2] | 0; //@line 17087
   HEAP8[$0 + 397 >> 0] = HEAP8[$41 >> 0] | 0; //@line 17092
   HEAP8[$0 + 396 >> 0] = HEAP8[$41 + 1 >> 0] | 0; //@line 17096
   HEAP8[$0 + 395 >> 0] = HEAP8[$41 + 2 >> 0] | 0; //@line 17100
   HEAP8[$0 + 394 >> 0] = HEAP8[$41 + 3 >> 0] | 0; //@line 17104
   HEAP8[$0 + 393 >> 0] = HEAP8[$41 + 4 >> 0] | 0; //@line 17108
   HEAP8[$0 + 392 >> 0] = HEAP8[$41 + 5 >> 0] | 0; //@line 17112
   HEAP8[$0 + 391 >> 0] = HEAP8[$41 + 6 >> 0] | 0; //@line 17115
   HEAP8[$0 + 390 >> 0] = HEAP8[$41 + 7 >> 0] | 0; //@line 17117
   HEAP16[$7 >> 1] = 17; //@line 17118
   $64 = HEAP32[$0 >> 2] | 0; //@line 17119
   $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 17120
   $65 = __ZN7LoRaPHY13get_radio_rngEv($64) | 0; //@line 17121
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 504; //@line 17124
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 17126
    HEAP32[$AsyncCtx11 + 8 >> 2] = $7; //@line 17128
    HEAP32[$AsyncCtx11 + 12 >> 2] = $12; //@line 17130
    HEAP32[$AsyncCtx11 + 16 >> 2] = $6; //@line 17132
    HEAP32[$AsyncCtx11 + 20 >> 2] = $6; //@line 17134
    sp = STACKTOP; //@line 17135
    STACKTOP = sp; //@line 17136
    return 0; //@line 17136
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 17138
   $72 = $0 + 946 | 0; //@line 17140
   HEAP16[$72 >> 1] = $65; //@line 17141
   $74 = HEAP16[$7 >> 1] | 0; //@line 17143
   HEAP16[$7 >> 1] = $74 + 1 << 16 >> 16; //@line 17145
   HEAP8[($74 & 65535) + ($0 + 381) >> 0] = $65; //@line 17148
   $80 = (HEAPU16[$72 >> 1] | 0) >>> 8 & 255; //@line 17151
   $81 = HEAP16[$7 >> 1] | 0; //@line 17152
   HEAP16[$7 >> 1] = $81 + 1 << 16 >> 16; //@line 17154
   HEAP8[($81 & 65535) + ($0 + 381) >> 0] = $80; //@line 17157
   $86 = HEAP16[$7 >> 1] & 255; //@line 17159
   $88 = HEAP32[$0 + 908 >> 2] | 0; //@line 17161
   $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 17162
   $89 = __Z22compute_join_frame_micPKhtS0_Pj($12, $86, $88, $6) | 0; //@line 17163
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 505; //@line 17166
    HEAP32[$AsyncCtx3 + 4 >> 2] = $6; //@line 17168
    HEAP32[$AsyncCtx3 + 8 >> 2] = $7; //@line 17170
    HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 17172
    HEAP32[$AsyncCtx3 + 16 >> 2] = $6; //@line 17174
    sp = STACKTOP; //@line 17175
    STACKTOP = sp; //@line 17176
    return 0; //@line 17176
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17178
   if ($89 | 0) {
    $$0 = -1014; //@line 17181
    STACKTOP = sp; //@line 17182
    return $$0 | 0; //@line 17182
   }
   $95 = HEAP32[$6 >> 2] | 0; //@line 17184
   $97 = HEAP16[$7 >> 1] | 0; //@line 17186
   HEAP16[$7 >> 1] = $97 + 1 << 16 >> 16; //@line 17188
   HEAP8[($97 & 65535) + ($0 + 381) >> 0] = $95; //@line 17191
   $103 = HEAP16[$7 >> 1] | 0; //@line 17194
   HEAP16[$7 >> 1] = $103 + 1 << 16 >> 16; //@line 17196
   HEAP8[($103 & 65535) + ($0 + 381) >> 0] = $95 >>> 8; //@line 17199
   $109 = HEAP16[$7 >> 1] | 0; //@line 17202
   HEAP16[$7 >> 1] = $109 + 1 << 16 >> 16; //@line 17204
   HEAP8[($109 & 65535) + ($0 + 381) >> 0] = $95 >>> 16; //@line 17207
   $115 = HEAP16[$7 >> 1] | 0; //@line 17210
   HEAP16[$7 >> 1] = $115 + 1 << 16 >> 16; //@line 17212
   HEAP8[($115 & 65535) + ($0 + 381) >> 0] = $95 >>> 24; //@line 17215
   $$0 = 0; //@line 17216
   STACKTOP = sp; //@line 17217
   return $$0 | 0; //@line 17217
  }
 case 4:
  {
   HEAP8[$8 >> 0] = 1; //@line 17221
   break;
  }
 case 2:
  {
   break;
  }
 case 7:
  {
   if ($9 | $$extract$t << 24 >> 24 == 0) {
    $$0 = 0; //@line 17231
    STACKTOP = sp; //@line 17232
    return $$0 | 0; //@line 17232
   }
   _memcpy($0 + 382 | 0, $4 | 0, $$extract$t & 255 | 0) | 0; //@line 17236
   HEAP16[$7 >> 1] = (HEAPU8[$10 >> 0] | 0) + 1; //@line 17241
   $$0 = 0; //@line 17242
   STACKTOP = sp; //@line 17243
   return $$0 | 0; //@line 17243
  }
 default:
  {
   $$0 = -1002; //@line 17247
   STACKTOP = sp; //@line 17248
   return $$0 | 0; //@line 17248
  }
 }
 if (!(HEAP8[$0 + 372 >> 0] | 0)) {
  $$0 = -1009; //@line 17255
  STACKTOP = sp; //@line 17256
  return $$0 | 0; //@line 17256
 }
 if (HEAP8[$0 + 1156 >> 0] | 0) {
  $125 = HEAP32[$0 >> 2] | 0; //@line 17262
  $AsyncCtx7 = _emscripten_alloc_async_context(44, sp) | 0; //@line 17266
  $129 = __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($125, 1, $0 + 1097 | 0, $0 + 1096 | 0, $0 + 964 | 0) | 0; //@line 17267
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 506; //@line 17270
   HEAP32[$AsyncCtx7 + 4 >> 2] = $10; //@line 17272
   HEAP32[$AsyncCtx7 + 8 >> 2] = $7; //@line 17274
   HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 17276
   HEAP32[$AsyncCtx7 + 16 >> 2] = $12; //@line 17278
   HEAP32[$AsyncCtx7 + 20 >> 2] = $6; //@line 17280
   HEAP32[$AsyncCtx7 + 24 >> 2] = $6; //@line 17282
   HEAP8[$AsyncCtx7 + 28 >> 0] = $3; //@line 17284
   HEAP32[$AsyncCtx7 + 32 >> 2] = $4; //@line 17286
   HEAP32[$AsyncCtx7 + 36 >> 2] = $2; //@line 17288
   HEAP8[$AsyncCtx7 + 40 >> 0] = $9 & 1; //@line 17291
   sp = STACKTOP; //@line 17292
   STACKTOP = sp; //@line 17293
   return 0; //@line 17293
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 17295
  if ($129) {
   HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 64; //@line 17299
  }
 }
 $142 = $0 + 374 | 0; //@line 17302
 if (!(HEAP8[$142 >> 0] | 0)) {
  $$pre$phiZ2D = $2; //@line 17306
 } else {
  HEAP8[$142 >> 0] = 0; //@line 17308
  HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 32; //@line 17311
  $$pre$phiZ2D = $2; //@line 17312
 }
 $147 = $0 + 952 | 0; //@line 17314
 $148 = HEAP32[$147 >> 2] | 0; //@line 17315
 HEAP8[$0 + 382 >> 0] = $148; //@line 17318
 HEAP8[$0 + 383 >> 0] = $148 >>> 8; //@line 17322
 HEAP8[$0 + 384 >> 0] = $148 >>> 16; //@line 17326
 HEAP8[$0 + 385 >> 0] = $148 >>> 24; //@line 17330
 $161 = $0 + 386 | 0; //@line 17332
 HEAP8[$161 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 17333
 $162 = $0 + 956 | 0; //@line 17334
 $163 = HEAP32[$162 >> 2] | 0; //@line 17335
 HEAP8[$0 + 387 >> 0] = $163; //@line 17338
 HEAP8[$0 + 388 >> 0] = $163 >>> 8; //@line 17342
 $169 = $0 + 4 | 0; //@line 17343
 __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($169); //@line 17344
 $170 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($169) | 0; //@line 17345
 do {
  if ($9) {
   label = 27; //@line 17348
  } else {
   if (!(HEAP8[$10 >> 0] | 0)) {
    label = 27; //@line 17353
   } else {
    if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($169) | 0)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($169); //@line 17357
     $$05564 = $3; //@line 17358
     $$05663 = $4; //@line 17358
     $$15862 = 8; //@line 17358
     label = 31; //@line 17359
     break;
    }
    $174 = $170 & 255; //@line 17362
    if (($170 & 255) >= 16) {
     HEAP8[$10 >> 0] = $170; //@line 17365
     $$055 = 0; //@line 17367
     $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($169) | 0; //@line 17367
     $$158 = 8; //@line 17367
     label = 30; //@line 17368
     break;
    }
    $176 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 17371
    $182 = ($176 & 255) + $174 & 15 | $176 & -16; //@line 17377
    HEAP8[$$pre$phiZ2D >> 0] = $182; //@line 17378
    HEAP8[$161 >> 0] = $182; //@line 17379
    $183 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($169) | 0; //@line 17380
    if (!($170 << 24 >> 24)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($169); //@line 17383
     $$05564 = $3; //@line 17384
     $$05663 = $4; //@line 17384
     $$15862 = 8; //@line 17384
     label = 31; //@line 17385
     break;
    } else {
     $$05766 = 8; //@line 17388
     $$06065 = 0; //@line 17388
     $186 = 0; //@line 17388
     while (1) {
      $188 = $$05766 + 1 << 24 >> 24; //@line 17392
      HEAP8[($$05766 & 255) + ($0 + 381) >> 0] = HEAP8[$183 + $186 >> 0] | 0; //@line 17395
      $$06065 = $$06065 + 1 << 16 >> 16; //@line 17396
      $186 = $$06065 & 65535; //@line 17397
      if ($186 >>> 0 >= $174 >>> 0) {
       $$055 = $3; //@line 17402
       $$056 = $4; //@line 17402
       $$158 = $188; //@line 17402
       label = 30; //@line 17403
       break;
      } else {
       $$05766 = $188; //@line 17400
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 27) {
  if (!($170 << 24 >> 24)) {
   $$055 = $3; //@line 17414
   $$056 = $4; //@line 17414
   $$158 = 8; //@line 17414
   label = 30; //@line 17415
  } else {
   if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($169) | 0) {
    HEAP8[$10 >> 0] = $170; //@line 17419
    $$055 = 0; //@line 17421
    $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($169) | 0; //@line 17421
    $$158 = 8; //@line 17421
    label = 30; //@line 17422
   } else {
    $$055 = $3; //@line 17424
    $$056 = $4; //@line 17424
    $$158 = 8; //@line 17424
    label = 30; //@line 17425
   }
  }
 }
 if ((label | 0) == 30) {
  __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($169); //@line 17430
  if (!$$056) {
   $$054 = 0; //@line 17433
   $$259 = $$158; //@line 17433
  } else {
   $$05564 = $$055; //@line 17435
   $$05663 = $$056; //@line 17435
   $$15862 = $$158; //@line 17435
   label = 31; //@line 17436
  }
 }
 do {
  if ((label | 0) == 31) {
   if (!(HEAP8[$10 >> 0] | 0)) {
    $$054 = 0; //@line 17444
    $$259 = $$15862; //@line 17444
   } else {
    $201 = $$15862 + 1 << 24 >> 24; //@line 17446
    HEAP8[($$15862 & 255) + ($0 + 381) >> 0] = $$05564; //@line 17449
    if (!($$05564 << 24 >> 24)) {
     __ZN14LoRaMacCommand20clear_command_bufferEv($169); //@line 17452
     $213 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$10 >> 0] | 0, $0 + 912 | 0, HEAP32[$147 >> 2] | 0, 0, HEAP32[$162 >> 2] | 0, ($201 & 255) + ($0 + 381) | 0) | 0) == 0; //@line 17461
     $$054 = $213 ? 0 : -1014; //@line 17463
     $$259 = $201; //@line 17463
     break;
    } else {
     $222 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$10 >> 0] | 0, $0 + 928 | 0, HEAP32[$147 >> 2] | 0, 0, HEAP32[$162 >> 2] | 0, ($201 & 255) + ($0 + 381) | 0) | 0) == 0; //@line 17474
     $$054 = $222 ? 0 : -1014; //@line 17476
     $$259 = $201; //@line 17476
     break;
    }
   }
  }
 } while (0);
 $227 = (HEAPU8[$10 >> 0] | 0) + ($$259 & 255) & 65535; //@line 17486
 HEAP16[$7 >> 1] = $227; //@line 17487
 $229 = HEAP32[$147 >> 2] | 0; //@line 17489
 $230 = HEAP32[$162 >> 2] | 0; //@line 17490
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 17491
 $231 = __Z11compute_micPKhtS0_jhjPj($12, $227, $0 + 912 | 0, $229, 0, $230, $6) | 0; //@line 17492
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 507; //@line 17495
  HEAP32[$AsyncCtx + 4 >> 2] = $$054; //@line 17497
  HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 17499
  HEAP32[$AsyncCtx + 12 >> 2] = $7; //@line 17501
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 17503
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 17505
  sp = STACKTOP; //@line 17506
  STACKTOP = sp; //@line 17507
  return 0; //@line 17507
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17509
 $238 = HEAP32[$6 >> 2] | 0; //@line 17512
 HEAP8[(HEAPU16[$7 >> 1] | 0) + ($0 + 381) >> 0] = $238; //@line 17517
 HEAP8[(HEAPU16[$7 >> 1] | 0) + 1 + ($0 + 381) >> 0] = $238 >>> 8; //@line 17524
 HEAP8[(HEAPU16[$7 >> 1] | 0) + 2 + ($0 + 381) >> 0] = $238 >>> 16; //@line 17531
 HEAP8[(HEAPU16[$7 >> 1] | 0) + 3 + ($0 + 381) >> 0] = $238 >>> 24; //@line 17538
 HEAP16[$7 >> 1] = (HEAPU16[$7 >> 1] | 0) + 4; //@line 17543
 $$0 = ($231 | 0) == 0 ? $$054 : -1014; //@line 17544
 STACKTOP = sp; //@line 17545
 return $$0 | 0; //@line 17545
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_317($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 13706
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13708
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13710
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13712
 $8 = $0 + 16 | 0; //@line 13714
 $10 = HEAP32[$8 >> 2] | 0; //@line 13716
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 13719
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 13721
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 13723
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 13725
 $21 = HEAP32[$0 + 36 >> 2] | 0; //@line 13727
 $23 = HEAP32[$0 + 40 >> 2] | 0; //@line 13729
 $25 = HEAP32[$0 + 44 >> 2] | 0; //@line 13731
 $27 = HEAP32[$0 + 48 >> 2] | 0; //@line 13733
 $29 = HEAP32[$0 + 52 >> 2] | 0; //@line 13735
 $31 = HEAP32[$0 + 56 >> 2] | 0; //@line 13737
 $33 = HEAP32[$0 + 60 >> 2] | 0; //@line 13739
 $35 = HEAP32[$0 + 64 >> 2] | 0; //@line 13741
 $37 = HEAP32[$0 + 68 >> 2] | 0; //@line 13743
 $39 = HEAP32[$0 + 72 >> 2] | 0; //@line 13745
 $41 = HEAP32[$0 + 76 >> 2] | 0; //@line 13747
 $43 = HEAP32[$0 + 80 >> 2] | 0; //@line 13749
 $45 = HEAP32[$0 + 84 >> 2] | 0; //@line 13751
 $47 = HEAP32[$0 + 88 >> 2] | 0; //@line 13753
 $48 = HEAP32[$15 >> 2] | 0; //@line 13754
 if ($48 | 0) {
  $51 = HEAP32[$48 + 4 >> 2] | 0; //@line 13758
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(88) | 0; //@line 13759
  FUNCTION_TABLE_vii[$51 & 31]($35, $2); //@line 13760
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 76; //@line 13763
   $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 13764
   HEAP32[$52 >> 2] = $2; //@line 13765
   $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 13766
   HEAP32[$53 >> 2] = $4; //@line 13767
   $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 13768
   HEAP32[$54 >> 2] = $6; //@line 13769
   $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 13770
   $56 = $55; //@line 13771
   $57 = $56; //@line 13772
   HEAP32[$57 >> 2] = $10; //@line 13773
   $58 = $56 + 4 | 0; //@line 13774
   $59 = $58; //@line 13775
   HEAP32[$59 >> 2] = $13; //@line 13776
   $60 = $ReallocAsyncCtx5 + 24 | 0; //@line 13777
   HEAP32[$60 >> 2] = $15; //@line 13778
   $61 = $ReallocAsyncCtx5 + 28 | 0; //@line 13779
   HEAP32[$61 >> 2] = $17; //@line 13780
   $62 = $ReallocAsyncCtx5 + 32 | 0; //@line 13781
   HEAP32[$62 >> 2] = $19; //@line 13782
   $63 = $ReallocAsyncCtx5 + 36 | 0; //@line 13783
   HEAP32[$63 >> 2] = $21; //@line 13784
   $64 = $ReallocAsyncCtx5 + 40 | 0; //@line 13785
   HEAP32[$64 >> 2] = $23; //@line 13786
   $65 = $ReallocAsyncCtx5 + 44 | 0; //@line 13787
   HEAP32[$65 >> 2] = $25; //@line 13788
   $66 = $ReallocAsyncCtx5 + 48 | 0; //@line 13789
   HEAP32[$66 >> 2] = $27; //@line 13790
   $67 = $ReallocAsyncCtx5 + 52 | 0; //@line 13791
   HEAP32[$67 >> 2] = $29; //@line 13792
   $68 = $ReallocAsyncCtx5 + 56 | 0; //@line 13793
   HEAP32[$68 >> 2] = $31; //@line 13794
   $69 = $ReallocAsyncCtx5 + 60 | 0; //@line 13795
   HEAP32[$69 >> 2] = $33; //@line 13796
   $70 = $ReallocAsyncCtx5 + 64 | 0; //@line 13797
   HEAP32[$70 >> 2] = $37; //@line 13798
   $71 = $ReallocAsyncCtx5 + 68 | 0; //@line 13799
   HEAP32[$71 >> 2] = $39; //@line 13800
   $72 = $ReallocAsyncCtx5 + 72 | 0; //@line 13801
   HEAP32[$72 >> 2] = $41; //@line 13802
   $73 = $ReallocAsyncCtx5 + 76 | 0; //@line 13803
   HEAP32[$73 >> 2] = $43; //@line 13804
   $74 = $ReallocAsyncCtx5 + 80 | 0; //@line 13805
   HEAP32[$74 >> 2] = $45; //@line 13806
   $75 = $ReallocAsyncCtx5 + 84 | 0; //@line 13807
   HEAP32[$75 >> 2] = $47; //@line 13808
   sp = STACKTOP; //@line 13809
   return;
  }
  ___async_unwind = 0; //@line 13812
  HEAP32[$ReallocAsyncCtx5 >> 2] = 76; //@line 13813
  $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 13814
  HEAP32[$52 >> 2] = $2; //@line 13815
  $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 13816
  HEAP32[$53 >> 2] = $4; //@line 13817
  $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 13818
  HEAP32[$54 >> 2] = $6; //@line 13819
  $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 13820
  $56 = $55; //@line 13821
  $57 = $56; //@line 13822
  HEAP32[$57 >> 2] = $10; //@line 13823
  $58 = $56 + 4 | 0; //@line 13824
  $59 = $58; //@line 13825
  HEAP32[$59 >> 2] = $13; //@line 13826
  $60 = $ReallocAsyncCtx5 + 24 | 0; //@line 13827
  HEAP32[$60 >> 2] = $15; //@line 13828
  $61 = $ReallocAsyncCtx5 + 28 | 0; //@line 13829
  HEAP32[$61 >> 2] = $17; //@line 13830
  $62 = $ReallocAsyncCtx5 + 32 | 0; //@line 13831
  HEAP32[$62 >> 2] = $19; //@line 13832
  $63 = $ReallocAsyncCtx5 + 36 | 0; //@line 13833
  HEAP32[$63 >> 2] = $21; //@line 13834
  $64 = $ReallocAsyncCtx5 + 40 | 0; //@line 13835
  HEAP32[$64 >> 2] = $23; //@line 13836
  $65 = $ReallocAsyncCtx5 + 44 | 0; //@line 13837
  HEAP32[$65 >> 2] = $25; //@line 13838
  $66 = $ReallocAsyncCtx5 + 48 | 0; //@line 13839
  HEAP32[$66 >> 2] = $27; //@line 13840
  $67 = $ReallocAsyncCtx5 + 52 | 0; //@line 13841
  HEAP32[$67 >> 2] = $29; //@line 13842
  $68 = $ReallocAsyncCtx5 + 56 | 0; //@line 13843
  HEAP32[$68 >> 2] = $31; //@line 13844
  $69 = $ReallocAsyncCtx5 + 60 | 0; //@line 13845
  HEAP32[$69 >> 2] = $33; //@line 13846
  $70 = $ReallocAsyncCtx5 + 64 | 0; //@line 13847
  HEAP32[$70 >> 2] = $37; //@line 13848
  $71 = $ReallocAsyncCtx5 + 68 | 0; //@line 13849
  HEAP32[$71 >> 2] = $39; //@line 13850
  $72 = $ReallocAsyncCtx5 + 72 | 0; //@line 13851
  HEAP32[$72 >> 2] = $41; //@line 13852
  $73 = $ReallocAsyncCtx5 + 76 | 0; //@line 13853
  HEAP32[$73 >> 2] = $43; //@line 13854
  $74 = $ReallocAsyncCtx5 + 80 | 0; //@line 13855
  HEAP32[$74 >> 2] = $45; //@line 13856
  $75 = $ReallocAsyncCtx5 + 84 | 0; //@line 13857
  HEAP32[$75 >> 2] = $47; //@line 13858
  sp = STACKTOP; //@line 13859
  return;
 }
 HEAP32[$33 >> 2] = 0; //@line 13862
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 13863
 $76 = HEAP32[$15 >> 2] | 0; //@line 13864
 if ($76 | 0) {
  $79 = HEAP32[$76 + 8 >> 2] | 0; //@line 13868
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 13869
  FUNCTION_TABLE_vi[$79 & 1023]($2); //@line 13870
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 77; //@line 13873
   $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 13874
   HEAP32[$80 >> 2] = $4; //@line 13875
   $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 13876
   HEAP32[$81 >> 2] = $17; //@line 13877
   $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 13878
   HEAP32[$82 >> 2] = $19; //@line 13879
   $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 13880
   HEAP32[$83 >> 2] = $21; //@line 13881
   $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 13882
   HEAP32[$84 >> 2] = $23; //@line 13883
   $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 13884
   HEAP32[$85 >> 2] = $25; //@line 13885
   $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 13886
   HEAP32[$86 >> 2] = $27; //@line 13887
   $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 13888
   HEAP32[$87 >> 2] = $29; //@line 13889
   $88 = $ReallocAsyncCtx6 + 36 | 0; //@line 13890
   HEAP32[$88 >> 2] = $31; //@line 13891
   $89 = $ReallocAsyncCtx6 + 40 | 0; //@line 13892
   HEAP32[$89 >> 2] = $37; //@line 13893
   $90 = $ReallocAsyncCtx6 + 44 | 0; //@line 13894
   HEAP32[$90 >> 2] = $39; //@line 13895
   $91 = $ReallocAsyncCtx6 + 48 | 0; //@line 13896
   HEAP32[$91 >> 2] = $41; //@line 13897
   $92 = $ReallocAsyncCtx6 + 52 | 0; //@line 13898
   HEAP32[$92 >> 2] = $43; //@line 13899
   $93 = $ReallocAsyncCtx6 + 56 | 0; //@line 13900
   HEAP32[$93 >> 2] = $45; //@line 13901
   $94 = $ReallocAsyncCtx6 + 60 | 0; //@line 13902
   HEAP32[$94 >> 2] = $47; //@line 13903
   sp = STACKTOP; //@line 13904
   return;
  }
  ___async_unwind = 0; //@line 13907
  HEAP32[$ReallocAsyncCtx6 >> 2] = 77; //@line 13908
  $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 13909
  HEAP32[$80 >> 2] = $4; //@line 13910
  $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 13911
  HEAP32[$81 >> 2] = $17; //@line 13912
  $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 13913
  HEAP32[$82 >> 2] = $19; //@line 13914
  $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 13915
  HEAP32[$83 >> 2] = $21; //@line 13916
  $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 13917
  HEAP32[$84 >> 2] = $23; //@line 13918
  $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 13919
  HEAP32[$85 >> 2] = $25; //@line 13920
  $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 13921
  HEAP32[$86 >> 2] = $27; //@line 13922
  $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 13923
  HEAP32[$87 >> 2] = $29; //@line 13924
  $88 = $ReallocAsyncCtx6 + 36 | 0; //@line 13925
  HEAP32[$88 >> 2] = $31; //@line 13926
  $89 = $ReallocAsyncCtx6 + 40 | 0; //@line 13927
  HEAP32[$89 >> 2] = $37; //@line 13928
  $90 = $ReallocAsyncCtx6 + 44 | 0; //@line 13929
  HEAP32[$90 >> 2] = $39; //@line 13930
  $91 = $ReallocAsyncCtx6 + 48 | 0; //@line 13931
  HEAP32[$91 >> 2] = $41; //@line 13932
  $92 = $ReallocAsyncCtx6 + 52 | 0; //@line 13933
  HEAP32[$92 >> 2] = $43; //@line 13934
  $93 = $ReallocAsyncCtx6 + 56 | 0; //@line 13935
  HEAP32[$93 >> 2] = $45; //@line 13936
  $94 = $ReallocAsyncCtx6 + 60 | 0; //@line 13937
  HEAP32[$94 >> 2] = $47; //@line 13938
  sp = STACKTOP; //@line 13939
  return;
 }
 $97 = (HEAP8[$4 + 770 >> 0] | 0) == 0; //@line 13944
 _printf(10904, $41) | 0; //@line 13945
 if ($97) {
  HEAP32[$37 >> 2] = 6; //@line 13947
  _printf(10970, $37) | 0; //@line 13948
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 13949
  _putchar(10) | 0; //@line 13950
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 81; //@line 13953
   $103 = $ReallocAsyncCtx8 + 4 | 0; //@line 13954
   HEAP32[$103 >> 2] = $4; //@line 13955
   $104 = $ReallocAsyncCtx8 + 8 | 0; //@line 13956
   HEAP32[$104 >> 2] = $25; //@line 13957
   $105 = $ReallocAsyncCtx8 + 12 | 0; //@line 13958
   HEAP32[$105 >> 2] = $27; //@line 13959
   $106 = $ReallocAsyncCtx8 + 16 | 0; //@line 13960
   HEAP32[$106 >> 2] = $29; //@line 13961
   $107 = $ReallocAsyncCtx8 + 20 | 0; //@line 13962
   HEAP32[$107 >> 2] = $31; //@line 13963
   sp = STACKTOP; //@line 13964
   return;
  }
  ___async_unwind = 0; //@line 13967
  HEAP32[$ReallocAsyncCtx8 >> 2] = 81; //@line 13968
  $103 = $ReallocAsyncCtx8 + 4 | 0; //@line 13969
  HEAP32[$103 >> 2] = $4; //@line 13970
  $104 = $ReallocAsyncCtx8 + 8 | 0; //@line 13971
  HEAP32[$104 >> 2] = $25; //@line 13972
  $105 = $ReallocAsyncCtx8 + 12 | 0; //@line 13973
  HEAP32[$105 >> 2] = $27; //@line 13974
  $106 = $ReallocAsyncCtx8 + 16 | 0; //@line 13975
  HEAP32[$106 >> 2] = $29; //@line 13976
  $107 = $ReallocAsyncCtx8 + 20 | 0; //@line 13977
  HEAP32[$107 >> 2] = $31; //@line 13978
  sp = STACKTOP; //@line 13979
  return;
 } else {
  HEAP32[$45 >> 2] = 5; //@line 13982
  _printf(10970, $45) | 0; //@line 13983
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 13984
  _putchar(10) | 0; //@line 13985
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 78; //@line 13988
   $98 = $ReallocAsyncCtx10 + 4 | 0; //@line 13989
   HEAP32[$98 >> 2] = $4; //@line 13990
   $99 = $ReallocAsyncCtx10 + 8 | 0; //@line 13991
   HEAP32[$99 >> 2] = $17; //@line 13992
   $100 = $ReallocAsyncCtx10 + 12 | 0; //@line 13993
   HEAP32[$100 >> 2] = $19; //@line 13994
   $101 = $ReallocAsyncCtx10 + 16 | 0; //@line 13995
   HEAP32[$101 >> 2] = $21; //@line 13996
   $102 = $ReallocAsyncCtx10 + 20 | 0; //@line 13997
   HEAP32[$102 >> 2] = $23; //@line 13998
   sp = STACKTOP; //@line 13999
   return;
  }
  ___async_unwind = 0; //@line 14002
  HEAP32[$ReallocAsyncCtx10 >> 2] = 78; //@line 14003
  $98 = $ReallocAsyncCtx10 + 4 | 0; //@line 14004
  HEAP32[$98 >> 2] = $4; //@line 14005
  $99 = $ReallocAsyncCtx10 + 8 | 0; //@line 14006
  HEAP32[$99 >> 2] = $17; //@line 14007
  $100 = $ReallocAsyncCtx10 + 12 | 0; //@line 14008
  HEAP32[$100 >> 2] = $19; //@line 14009
  $101 = $ReallocAsyncCtx10 + 16 | 0; //@line 14010
  HEAP32[$101 >> 2] = $21; //@line 14011
  $102 = $ReallocAsyncCtx10 + 20 | 0; //@line 14012
  HEAP32[$102 >> 2] = $23; //@line 14013
  sp = STACKTOP; //@line 14014
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_402($0) {
 $0 = $0 | 0;
 var $$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $108 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $65 = 0, $66 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22575
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22577
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22579
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22581
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22583
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22585
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22587
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22589
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22591
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22593
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22595
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22597
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22599
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22601
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 22603
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 22605
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 22607
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 22609
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 22611
 switch (HEAP32[$8 >> 2] | 0) {
 case 7:
  {
   $38 = $6 + 4 | 0; //@line 22615
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(24) | 0; //@line 22616
   __ZN7LoRaMac19remove_channel_planEv($38) | 0; //@line 22617
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 244; //@line 22620
    $39 = $ReallocAsyncCtx22 + 4 | 0; //@line 22621
    HEAP32[$39 >> 2] = $12; //@line 22622
    $40 = $ReallocAsyncCtx22 + 8 | 0; //@line 22623
    HEAP32[$40 >> 2] = $38; //@line 22624
    $41 = $ReallocAsyncCtx22 + 12 | 0; //@line 22625
    HEAP32[$41 >> 2] = $6; //@line 22626
    $42 = $ReallocAsyncCtx22 + 16 | 0; //@line 22627
    HEAP32[$42 >> 2] = $4; //@line 22628
    $43 = $ReallocAsyncCtx22 + 20 | 0; //@line 22629
    HEAP32[$43 >> 2] = $10; //@line 22630
    sp = STACKTOP; //@line 22631
    return;
   }
   ___async_unwind = 0; //@line 22634
   HEAP32[$ReallocAsyncCtx22 >> 2] = 244; //@line 22635
   $39 = $ReallocAsyncCtx22 + 4 | 0; //@line 22636
   HEAP32[$39 >> 2] = $12; //@line 22637
   $40 = $ReallocAsyncCtx22 + 8 | 0; //@line 22638
   HEAP32[$40 >> 2] = $38; //@line 22639
   $41 = $ReallocAsyncCtx22 + 12 | 0; //@line 22640
   HEAP32[$41 >> 2] = $6; //@line 22641
   $42 = $ReallocAsyncCtx22 + 16 | 0; //@line 22642
   HEAP32[$42 >> 2] = $4; //@line 22643
   $43 = $ReallocAsyncCtx22 + 20 | 0; //@line 22644
   HEAP32[$43 >> 2] = $10; //@line 22645
   sp = STACKTOP; //@line 22646
   return;
  }
 case 1:
  {
   $$1 = 0; //@line 22651
   $108 = ___async_retval; //@line 22652
   HEAP32[$108 >> 2] = $$1; //@line 22653
   return;
  }
 case 2:
  {
   if (HEAP8[$6 + 1936 >> 0] | 0) {
    $$1 = -1003; //@line 22662
    $108 = ___async_retval; //@line 22663
    HEAP32[$108 >> 2] = $$1; //@line 22664
    return;
   }
   HEAP32[$36 >> 2] = 0; //@line 22667
   HEAP32[$36 + 4 >> 2] = HEAP32[$6 + 1940 >> 2]; //@line 22671
   HEAP32[$36 + 8 >> 2] = HEAP32[$6 + 1944 >> 2]; //@line 22675
   HEAP32[$36 + 12 >> 2] = HEAP32[$6 + 1948 >> 2]; //@line 22679
   HEAP8[$36 + 16 >> 0] = HEAP8[$6 + 1952 >> 0] | 0; //@line 22683
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(12) | 0; //@line 22685
   $60 = __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($6 + 4 | 0, $36) | 0; //@line 22686
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 251; //@line 22689
    $61 = $ReallocAsyncCtx23 + 4 | 0; //@line 22690
    HEAP32[$61 >> 2] = $36; //@line 22691
    $62 = $ReallocAsyncCtx23 + 8 | 0; //@line 22692
    HEAP32[$62 >> 2] = $4; //@line 22693
    sp = STACKTOP; //@line 22694
    return;
   }
   HEAP32[___async_retval >> 2] = $60; //@line 22698
   ___async_unwind = 0; //@line 22699
   HEAP32[$ReallocAsyncCtx23 >> 2] = 251; //@line 22700
   $61 = $ReallocAsyncCtx23 + 4 | 0; //@line 22701
   HEAP32[$61 >> 2] = $36; //@line 22702
   $62 = $ReallocAsyncCtx23 + 8 | 0; //@line 22703
   HEAP32[$62 >> 2] = $4; //@line 22704
   sp = STACKTOP; //@line 22705
   return;
  }
 case 4:
  {
   HEAP8[$6 + 1932 >> 0] = 1; //@line 22711
   $65 = $6 + 1892 | 0; //@line 22712
   $66 = HEAP32[$65 >> 2] | 0; //@line 22713
   if (!$66) {
    $$1 = 0; //@line 22716
    $108 = ___async_retval; //@line 22717
    HEAP32[$108 >> 2] = $$1; //@line 22718
    return;
   }
   $70 = HEAP32[$6 + 2288 >> 2] | 0; //@line 22723
   $72 = HEAP32[$66 + 4 >> 2] | 0; //@line 22725
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 22726
   FUNCTION_TABLE_vii[$72 & 31]($14, $6 + 1880 | 0); //@line 22727
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 252; //@line 22730
    $73 = $ReallocAsyncCtx3 + 4 | 0; //@line 22731
    HEAP32[$73 >> 2] = $65; //@line 22732
    $74 = $ReallocAsyncCtx3 + 8 | 0; //@line 22733
    HEAP32[$74 >> 2] = $14; //@line 22734
    $75 = $ReallocAsyncCtx3 + 12 | 0; //@line 22735
    HEAP32[$75 >> 2] = $70; //@line 22736
    $76 = $ReallocAsyncCtx3 + 16 | 0; //@line 22737
    HEAP32[$76 >> 2] = $14; //@line 22738
    $77 = $ReallocAsyncCtx3 + 20 | 0; //@line 22739
    HEAP32[$77 >> 2] = $4; //@line 22740
    sp = STACKTOP; //@line 22741
    return;
   }
   ___async_unwind = 0; //@line 22744
   HEAP32[$ReallocAsyncCtx3 >> 2] = 252; //@line 22745
   $73 = $ReallocAsyncCtx3 + 4 | 0; //@line 22746
   HEAP32[$73 >> 2] = $65; //@line 22747
   $74 = $ReallocAsyncCtx3 + 8 | 0; //@line 22748
   HEAP32[$74 >> 2] = $14; //@line 22749
   $75 = $ReallocAsyncCtx3 + 12 | 0; //@line 22750
   HEAP32[$75 >> 2] = $70; //@line 22751
   $76 = $ReallocAsyncCtx3 + 16 | 0; //@line 22752
   HEAP32[$76 >> 2] = $14; //@line 22753
   $77 = $ReallocAsyncCtx3 + 20 | 0; //@line 22754
   HEAP32[$77 >> 2] = $4; //@line 22755
   sp = STACKTOP; //@line 22756
   return;
  }
 case 3:
  {
   HEAP32[$12 >> 2] = 3; //@line 22761
   $80 = $12 + 4 | 0; //@line 22764
   HEAP32[$80 >> 2] = HEAP32[$6 + 1940 >> 2]; //@line 22765
   $81 = $6 + 4 | 0; //@line 22766
   $ReallocAsyncCtx19 = _emscripten_realloc_async_context(36) | 0; //@line 22767
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($81, $12) | 0; //@line 22768
   if (___async) {
    HEAP32[$ReallocAsyncCtx19 >> 2] = 256; //@line 22771
    $82 = $ReallocAsyncCtx19 + 4 | 0; //@line 22772
    HEAP32[$82 >> 2] = $6; //@line 22773
    $83 = $ReallocAsyncCtx19 + 8 | 0; //@line 22774
    HEAP32[$83 >> 2] = $2; //@line 22775
    $84 = $ReallocAsyncCtx19 + 12 | 0; //@line 22776
    HEAP32[$84 >> 2] = $4; //@line 22777
    $85 = $ReallocAsyncCtx19 + 16 | 0; //@line 22778
    HEAP32[$85 >> 2] = $12; //@line 22779
    $86 = $ReallocAsyncCtx19 + 20 | 0; //@line 22780
    HEAP32[$86 >> 2] = $80; //@line 22781
    $87 = $ReallocAsyncCtx19 + 24 | 0; //@line 22782
    HEAP32[$87 >> 2] = $81; //@line 22783
    $88 = $ReallocAsyncCtx19 + 28 | 0; //@line 22784
    HEAP32[$88 >> 2] = $12; //@line 22785
    $89 = $ReallocAsyncCtx19 + 32 | 0; //@line 22786
    HEAP32[$89 >> 2] = $80; //@line 22787
    sp = STACKTOP; //@line 22788
    return;
   }
   ___async_unwind = 0; //@line 22791
   HEAP32[$ReallocAsyncCtx19 >> 2] = 256; //@line 22792
   $82 = $ReallocAsyncCtx19 + 4 | 0; //@line 22793
   HEAP32[$82 >> 2] = $6; //@line 22794
   $83 = $ReallocAsyncCtx19 + 8 | 0; //@line 22795
   HEAP32[$83 >> 2] = $2; //@line 22796
   $84 = $ReallocAsyncCtx19 + 12 | 0; //@line 22797
   HEAP32[$84 >> 2] = $4; //@line 22798
   $85 = $ReallocAsyncCtx19 + 16 | 0; //@line 22799
   HEAP32[$85 >> 2] = $12; //@line 22800
   $86 = $ReallocAsyncCtx19 + 20 | 0; //@line 22801
   HEAP32[$86 >> 2] = $80; //@line 22802
   $87 = $ReallocAsyncCtx19 + 24 | 0; //@line 22803
   HEAP32[$87 >> 2] = $81; //@line 22804
   $88 = $ReallocAsyncCtx19 + 28 | 0; //@line 22805
   HEAP32[$88 >> 2] = $12; //@line 22806
   $89 = $ReallocAsyncCtx19 + 32 | 0; //@line 22807
   HEAP32[$89 >> 2] = $80; //@line 22808
   sp = STACKTOP; //@line 22809
   return;
  }
 case 5:
  {
   $90 = $6 + 1964 | 0; //@line 22814
   if (HEAP8[$90 >> 0] | 0) {
    HEAP32[$8 >> 2] = 6; //@line 22818
    $$1 = 0; //@line 22819
    $108 = ___async_retval; //@line 22820
    HEAP32[$108 >> 2] = $$1; //@line 22821
    return;
   }
   HEAP8[$90 >> 0] = 1; //@line 22824
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(56) | 0; //@line 22825
   $93 = __ZN12LoRaWANStack17send_frame_to_macEv($6) | 0; //@line 22826
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 265; //@line 22829
    $94 = $ReallocAsyncCtx14 + 4 | 0; //@line 22830
    HEAP32[$94 >> 2] = $8; //@line 22831
    $95 = $ReallocAsyncCtx14 + 8 | 0; //@line 22832
    HEAP32[$95 >> 2] = $4; //@line 22833
    $96 = $ReallocAsyncCtx14 + 12 | 0; //@line 22834
    HEAP32[$96 >> 2] = $6; //@line 22835
    $97 = $ReallocAsyncCtx14 + 16 | 0; //@line 22836
    HEAP32[$97 >> 2] = $24; //@line 22837
    $98 = $ReallocAsyncCtx14 + 20 | 0; //@line 22838
    HEAP32[$98 >> 2] = $16; //@line 22839
    $99 = $ReallocAsyncCtx14 + 24 | 0; //@line 22840
    HEAP32[$99 >> 2] = $18; //@line 22841
    $100 = $ReallocAsyncCtx14 + 28 | 0; //@line 22842
    HEAP32[$100 >> 2] = $20; //@line 22843
    $101 = $ReallocAsyncCtx14 + 32 | 0; //@line 22844
    HEAP32[$101 >> 2] = $22; //@line 22845
    $102 = $ReallocAsyncCtx14 + 36 | 0; //@line 22846
    HEAP32[$102 >> 2] = $26; //@line 22847
    $103 = $ReallocAsyncCtx14 + 40 | 0; //@line 22848
    HEAP32[$103 >> 2] = $28; //@line 22849
    $104 = $ReallocAsyncCtx14 + 44 | 0; //@line 22850
    HEAP32[$104 >> 2] = $30; //@line 22851
    $105 = $ReallocAsyncCtx14 + 48 | 0; //@line 22852
    HEAP32[$105 >> 2] = $32; //@line 22853
    $106 = $ReallocAsyncCtx14 + 52 | 0; //@line 22854
    HEAP32[$106 >> 2] = $34; //@line 22855
    sp = STACKTOP; //@line 22856
    return;
   }
   HEAP32[___async_retval >> 2] = $93; //@line 22860
   ___async_unwind = 0; //@line 22861
   HEAP32[$ReallocAsyncCtx14 >> 2] = 265; //@line 22862
   $94 = $ReallocAsyncCtx14 + 4 | 0; //@line 22863
   HEAP32[$94 >> 2] = $8; //@line 22864
   $95 = $ReallocAsyncCtx14 + 8 | 0; //@line 22865
   HEAP32[$95 >> 2] = $4; //@line 22866
   $96 = $ReallocAsyncCtx14 + 12 | 0; //@line 22867
   HEAP32[$96 >> 2] = $6; //@line 22868
   $97 = $ReallocAsyncCtx14 + 16 | 0; //@line 22869
   HEAP32[$97 >> 2] = $24; //@line 22870
   $98 = $ReallocAsyncCtx14 + 20 | 0; //@line 22871
   HEAP32[$98 >> 2] = $16; //@line 22872
   $99 = $ReallocAsyncCtx14 + 24 | 0; //@line 22873
   HEAP32[$99 >> 2] = $18; //@line 22874
   $100 = $ReallocAsyncCtx14 + 28 | 0; //@line 22875
   HEAP32[$100 >> 2] = $20; //@line 22876
   $101 = $ReallocAsyncCtx14 + 32 | 0; //@line 22877
   HEAP32[$101 >> 2] = $22; //@line 22878
   $102 = $ReallocAsyncCtx14 + 36 | 0; //@line 22879
   HEAP32[$102 >> 2] = $26; //@line 22880
   $103 = $ReallocAsyncCtx14 + 40 | 0; //@line 22881
   HEAP32[$103 >> 2] = $28; //@line 22882
   $104 = $ReallocAsyncCtx14 + 44 | 0; //@line 22883
   HEAP32[$104 >> 2] = $30; //@line 22884
   $105 = $ReallocAsyncCtx14 + 48 | 0; //@line 22885
   HEAP32[$105 >> 2] = $32; //@line 22886
   $106 = $ReallocAsyncCtx14 + 52 | 0; //@line 22887
   HEAP32[$106 >> 2] = $34; //@line 22888
   sp = STACKTOP; //@line 22889
   return;
  }
 case 6:
  {
   $$1 = -1018; //@line 22894
   $108 = ___async_retval; //@line 22895
   HEAP32[$108 >> 2] = $$1; //@line 22896
   return;
  }
 case 0:
  {
   $$1 = -1011; //@line 22901
   $108 = ___async_retval; //@line 22902
   HEAP32[$108 >> 2] = $$1; //@line 22903
   return;
  }
 default:
  {
   $$1 = -1002; //@line 22908
   $108 = ___async_retval; //@line 22909
   HEAP32[$108 >> 2] = $$1; //@line 22910
   return;
  }
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$pre$phiZ2D = 0, $$sroa$0$0$copyload = 0, $10 = 0, $101 = 0, $102 = 0, $105 = 0, $113 = 0, $119 = 0, $122 = 0, $13 = 0, $134 = 0, $137 = 0, $16 = 0, $34 = 0, $35 = 0, $57 = 0, $60 = 0, $70 = 0, $72 = 0, $73 = 0, $8 = 0, $86 = 0, $88 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $AsyncCtx32 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 11344
 STACKTOP = STACKTOP + 32 | 0; //@line 11345
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11345
 $$byval_copy = sp + 24 | 0; //@line 11346
 $vararg_buffer3 = sp + 16 | 0; //@line 11347
 $vararg_buffer1 = sp + 8 | 0; //@line 11348
 $vararg_buffer = sp; //@line 11349
 _printf(13258, $vararg_buffer) | 0; //@line 11350
 _printf(13271, $vararg_buffer1) | 0; //@line 11351
 $AsyncCtx13 = _emscripten_alloc_async_context(32, sp) | 0; //@line 11352
 _putchar(10) | 0; //@line 11353
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 363; //@line 11356
  HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 11358
  HEAP32[$AsyncCtx13 + 8 >> 2] = $vararg_buffer; //@line 11360
  HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer1; //@line 11362
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer3; //@line 11364
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer3; //@line 11366
  HEAP32[$AsyncCtx13 + 24 >> 2] = $$byval_copy; //@line 11368
  HEAP32[$AsyncCtx13 + 28 >> 2] = $$byval_copy; //@line 11370
  sp = STACKTOP; //@line 11371
  STACKTOP = sp; //@line 11372
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 11374
 $8 = $0 + 356 | 0; //@line 11375
 $10 = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$8 >> 2] | 0) | 0; //@line 11377
 $$sroa$0$0$copyload = HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) >> 2] | 0; //@line 11380
 $13 = $0 + 360 | 0; //@line 11381
 do {
  if ((HEAP32[$13 >> 2] | 0) == 2) {
   _printf(13258, $vararg_buffer3) | 0; //@line 11386
   _printf(13285, $$byval_copy) | 0; //@line 11387
   $AsyncCtx9 = _emscripten_alloc_async_context(40, sp) | 0; //@line 11388
   _putchar(10) | 0; //@line 11389
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 365; //@line 11392
    HEAP32[$AsyncCtx9 + 4 >> 2] = $8; //@line 11394
    HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 11396
    HEAP32[$AsyncCtx9 + 12 >> 2] = $10; //@line 11398
    HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer; //@line 11400
    HEAP32[$AsyncCtx9 + 20 >> 2] = $13; //@line 11402
    HEAP32[$AsyncCtx9 + 24 >> 2] = $vararg_buffer1; //@line 11404
    HEAP32[$AsyncCtx9 + 28 >> 2] = $vararg_buffer1; //@line 11406
    HEAP32[$AsyncCtx9 + 32 >> 2] = $$sroa$0$0$copyload; //@line 11408
    HEAP32[$AsyncCtx9 + 36 >> 2] = $vararg_buffer; //@line 11410
    sp = STACKTOP; //@line 11411
    STACKTOP = sp; //@line 11412
    return;
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 11414
   $34 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11416
   HEAP32[$vararg_buffer1 >> 2] = 366; //@line 11417
   HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 11419
   $AsyncCtx35 = _emscripten_alloc_async_context(36, sp) | 0; //@line 11420
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 11421
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 11421
   $35 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($34, $0, $$byval_copy) | 0; //@line 11422
   if (___async) {
    HEAP32[$AsyncCtx35 >> 2] = 367; //@line 11425
    HEAP32[$AsyncCtx35 + 4 >> 2] = $8; //@line 11427
    HEAP32[$AsyncCtx35 + 8 >> 2] = $0; //@line 11429
    HEAP32[$AsyncCtx35 + 12 >> 2] = $10; //@line 11431
    HEAP32[$AsyncCtx35 + 16 >> 2] = $vararg_buffer; //@line 11433
    HEAP32[$AsyncCtx35 + 20 >> 2] = $13; //@line 11435
    HEAP32[$AsyncCtx35 + 24 >> 2] = $$sroa$0$0$copyload; //@line 11437
    HEAP32[$AsyncCtx35 + 28 >> 2] = $vararg_buffer; //@line 11439
    HEAP32[$AsyncCtx35 + 32 >> 2] = $vararg_buffer1; //@line 11441
    sp = STACKTOP; //@line 11442
    STACKTOP = sp; //@line 11443
    return;
   }
   _emscripten_free_async_context($AsyncCtx35 | 0); //@line 11445
   do {
    if (!$35) {
     $AsyncCtx39 = _emscripten_alloc_async_context(36, sp) | 0; //@line 11449
     _mbed_assert_internal(13142, 13151, 217); //@line 11450
     if (___async) {
      HEAP32[$AsyncCtx39 >> 2] = 368; //@line 11453
      HEAP32[$AsyncCtx39 + 4 >> 2] = $8; //@line 11455
      HEAP32[$AsyncCtx39 + 8 >> 2] = $0; //@line 11457
      HEAP32[$AsyncCtx39 + 12 >> 2] = $10; //@line 11459
      HEAP32[$AsyncCtx39 + 16 >> 2] = $vararg_buffer; //@line 11461
      HEAP32[$AsyncCtx39 + 20 >> 2] = $13; //@line 11463
      HEAP32[$AsyncCtx39 + 24 >> 2] = $$sroa$0$0$copyload; //@line 11465
      HEAP32[$AsyncCtx39 + 28 >> 2] = $vararg_buffer; //@line 11467
      HEAP32[$AsyncCtx39 + 32 >> 2] = $vararg_buffer1; //@line 11469
      sp = STACKTOP; //@line 11470
      STACKTOP = sp; //@line 11471
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx39 | 0); //@line 11473
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 11479
  } else {
   $16 = HEAP32[$0 >> 2] | 0; //@line 11481
   $AsyncCtx32 = _emscripten_alloc_async_context(32, sp) | 0; //@line 11482
   __ZN7LoRaPHY18put_radio_to_sleepEv($16); //@line 11483
   if (___async) {
    HEAP32[$AsyncCtx32 >> 2] = 364; //@line 11486
    HEAP32[$AsyncCtx32 + 4 >> 2] = $8; //@line 11488
    HEAP32[$AsyncCtx32 + 8 >> 2] = $0; //@line 11490
    HEAP32[$AsyncCtx32 + 12 >> 2] = $10; //@line 11492
    HEAP32[$AsyncCtx32 + 16 >> 2] = $vararg_buffer; //@line 11494
    HEAP32[$AsyncCtx32 + 20 >> 2] = $13; //@line 11496
    HEAP32[$AsyncCtx32 + 24 >> 2] = $$sroa$0$0$copyload; //@line 11498
    HEAP32[$AsyncCtx32 + 28 >> 2] = $vararg_buffer; //@line 11500
    sp = STACKTOP; //@line 11501
    STACKTOP = sp; //@line 11502
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx32 | 0); //@line 11504
    break;
   }
  }
 } while (0);
 do {
  if (!(HEAP8[$0 + 371 >> 0] | 0)) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 11517
   $101 = $0 + 944 | 0; //@line 11518
   $102 = HEAP8[$101 >> 0] | 0; //@line 11519
   if (!($102 << 24 >> 24)) {
    HEAP8[$101 >> 0] = 1; //@line 11522
    $105 = 1; //@line 11523
   } else {
    $105 = $102; //@line 11525
   }
   HEAP8[$101 >> 0] = $105 | 32; //@line 11528
  } else {
   $57 = HEAP32[$8 >> 2] | 0; //@line 11530
   $60 = HEAP32[$0 + 972 >> 2] | 0; //@line 11533
   $AsyncCtx28 = _emscripten_alloc_async_context(32, sp) | 0; //@line 11534
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($57, $0 + 1036 | 0, $60); //@line 11535
   if (___async) {
    HEAP32[$AsyncCtx28 >> 2] = 369; //@line 11538
    HEAP32[$AsyncCtx28 + 4 >> 2] = $13; //@line 11540
    HEAP32[$AsyncCtx28 + 8 >> 2] = $0; //@line 11542
    HEAP32[$AsyncCtx28 + 12 >> 2] = $8; //@line 11544
    HEAP32[$AsyncCtx28 + 16 >> 2] = $$sroa$0$0$copyload; //@line 11546
    HEAP32[$AsyncCtx28 + 20 >> 2] = $vararg_buffer; //@line 11548
    HEAP32[$AsyncCtx28 + 24 >> 2] = $vararg_buffer; //@line 11550
    HEAP32[$AsyncCtx28 + 28 >> 2] = $10; //@line 11552
    sp = STACKTOP; //@line 11553
    STACKTOP = sp; //@line 11554
    return;
   }
   _emscripten_free_async_context($AsyncCtx28 | 0); //@line 11556
   if ((HEAP32[$13 >> 2] | 0) == 2) {
    $$pre$phiZ2D = $0 + 976 | 0; //@line 11561
   } else {
    $70 = HEAP32[$8 >> 2] | 0; //@line 11563
    $72 = $0 + 976 | 0; //@line 11565
    $73 = HEAP32[$72 >> 2] | 0; //@line 11566
    $AsyncCtx24 = _emscripten_alloc_async_context(36, sp) | 0; //@line 11567
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($70, $0 + 1056 | 0, $73); //@line 11568
    if (___async) {
     HEAP32[$AsyncCtx24 >> 2] = 370; //@line 11571
     HEAP32[$AsyncCtx24 + 4 >> 2] = $13; //@line 11573
     HEAP32[$AsyncCtx24 + 8 >> 2] = $72; //@line 11575
     HEAP32[$AsyncCtx24 + 12 >> 2] = $8; //@line 11577
     HEAP32[$AsyncCtx24 + 16 >> 2] = $0; //@line 11579
     HEAP32[$AsyncCtx24 + 20 >> 2] = $$sroa$0$0$copyload; //@line 11581
     HEAP32[$AsyncCtx24 + 24 >> 2] = $vararg_buffer; //@line 11583
     HEAP32[$AsyncCtx24 + 28 >> 2] = $vararg_buffer; //@line 11585
     HEAP32[$AsyncCtx24 + 32 >> 2] = $10; //@line 11587
     sp = STACKTOP; //@line 11588
     STACKTOP = sp; //@line 11589
     return;
    }
    _emscripten_free_async_context($AsyncCtx24 | 0); //@line 11591
    if ((HEAP32[$13 >> 2] | 0) == 2) {
     $$pre$phiZ2D = $72; //@line 11595
    } else {
     if (!(HEAP8[$0 + 373 >> 0] | 0)) {
      break;
     } else {
      $$pre$phiZ2D = $72; //@line 11603
     }
    }
   }
   $86 = HEAP32[$8 >> 2] | 0; //@line 11607
   $88 = HEAP32[$$pre$phiZ2D >> 2] | 0; //@line 11609
   $91 = (__ZN7LoRaPHY15get_ack_timeoutEv(HEAP32[$0 >> 2] | 0) | 0) + $88 | 0; //@line 11612
   $AsyncCtx20 = _emscripten_alloc_async_context(28, sp) | 0; //@line 11613
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($86, $0 + 1076 | 0, $91); //@line 11614
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 371; //@line 11617
    HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 11619
    HEAP32[$AsyncCtx20 + 8 >> 2] = $$sroa$0$0$copyload; //@line 11621
    HEAP32[$AsyncCtx20 + 12 >> 2] = $vararg_buffer; //@line 11623
    HEAP32[$AsyncCtx20 + 16 >> 2] = $vararg_buffer; //@line 11625
    HEAP32[$AsyncCtx20 + 20 >> 2] = $10; //@line 11627
    HEAP32[$AsyncCtx20 + 24 >> 2] = $8; //@line 11629
    sp = STACKTOP; //@line 11630
    STACKTOP = sp; //@line 11631
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 11633
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 376 >> 0] = ($$sroa$0$0$copyload | 0) == 0 & (HEAP8[$0 + 944 >> 0] & 8) != 0 & 1; //@line 11646
 $113 = HEAP8[$0 + 378 >> 0] | 0; //@line 11648
 HEAP8[$0 + 379 >> 0] = $113; //@line 11650
 HEAP8[$vararg_buffer >> 0] = $113; //@line 11651
 HEAP8[$vararg_buffer + 1 >> 0] = HEAP8[$0 + 372 >> 0] | 0; //@line 11655
 HEAP32[$vararg_buffer + 4 >> 2] = $10; //@line 11657
 $119 = HEAP32[$0 >> 2] | 0; //@line 11658
 $122 = HEAP32[(HEAP32[$119 >> 2] | 0) + 12 >> 2] | 0; //@line 11661
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 11662
 FUNCTION_TABLE_vii[$122 & 31]($119, $vararg_buffer); //@line 11663
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 372; //@line 11666
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11668
  HEAP32[$AsyncCtx + 8 >> 2] = $10; //@line 11670
  HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 11672
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 11674
  sp = STACKTOP; //@line 11675
  STACKTOP = sp; //@line 11676
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11678
 HEAP32[$0 + 980 >> 2] = $10; //@line 11680
 if (!(HEAP8[$0 + 373 >> 0] | 0)) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 11688
  $134 = $0 + 380 | 0; //@line 11689
  HEAP8[$134 >> 0] = (HEAP8[$134 >> 0] | 0) + 1 << 24 >> 24; //@line 11692
 }
 $137 = HEAP32[$8 >> 2] | 0; //@line 11694
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11696
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($137, $0 + 996 | 0, 1); //@line 11697
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 373; //@line 11700
  HEAP32[$AsyncCtx17 + 4 >> 2] = $vararg_buffer; //@line 11702
  sp = STACKTOP; //@line 11703
  STACKTOP = sp; //@line 11704
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx17 | 0); //@line 11706
  STACKTOP = sp; //@line 11707
  return;
 }
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i22 = 0, $$024 = 0, $$05$i = 0, $$06$i = 0, $$1 = 0, $10 = 0, $100 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0.0, $114 = 0.0, $116 = 0, $12 = 0, $120 = 0, $127 = 0, $128 = 0, $132 = 0, $14 = 0, $140 = 0, $22 = 0, $24 = 0, $27 = 0, $30 = 0, $38 = 0, $39 = 0, $42 = 0, $43 = 0, $46 = 0, $55 = 0, $6 = 0, $67 = 0, $70 = 0, $74 = 0, $75 = 0, $85 = 0, $9 = 0, $92 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx4 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18750
 STACKTOP = STACKTOP + 16 | 0; //@line 18751
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18751
 $vararg_buffer1 = sp + 8 | 0; //@line 18752
 $vararg_buffer = sp; //@line 18753
 _printf(13258, $vararg_buffer) | 0; //@line 18754
 _printf(13789, $vararg_buffer1) | 0; //@line 18755
 $AsyncCtx4 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18756
 _putchar(10) | 0; //@line 18757
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 554; //@line 18760
  HEAP32[$AsyncCtx4 + 4 >> 2] = $0; //@line 18762
  HEAP32[$AsyncCtx4 + 8 >> 2] = $1; //@line 18764
  HEAP32[$AsyncCtx4 + 12 >> 2] = $vararg_buffer; //@line 18766
  HEAP32[$AsyncCtx4 + 16 >> 2] = $vararg_buffer1; //@line 18768
  sp = STACKTOP; //@line 18769
  STACKTOP = sp; //@line 18770
  return 0; //@line 18770
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 18772
 $6 = $0 + 968 | 0; //@line 18773
 if (HEAP32[$6 >> 2] | 0) {
  $$1 = -1e3; //@line 18777
  STACKTOP = sp; //@line 18778
  return $$1 | 0; //@line 18778
 }
 $9 = $0 + 264 | 0; //@line 18780
 __ZN11LoRaMacMlme18reset_confirmationEv($9); //@line 18781
 $10 = HEAP32[$1 >> 2] | 0; //@line 18782
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($9) | 0) >> 2] = $10; //@line 18784
 $12 = $0 + 944 | 0; //@line 18785
 $14 = HEAP8[$12 >> 0] | 8; //@line 18787
 HEAP8[$12 >> 0] = $14; //@line 18788
 switch (HEAP32[$1 >> 2] | 0) {
 case 1:
  {
   $$0 = __ZN14LoRaMacCommand15add_mac_commandEhhh($0 + 4 | 0, 2, 0, 0) | 0; //@line 18794
   label = 32; //@line 18795
   break;
  }
 case 0:
  {
   if (HEAP32[$6 >> 2] & 16 | 0) {
    $$1 = -1e3; //@line 18803
    STACKTOP = sp; //@line 18804
    return $$1 | 0; //@line 18804
   }
   $22 = HEAP32[$1 + 4 >> 2] | 0; //@line 18807
   if (!$22) {
    $$1 = -1003; //@line 18810
    STACKTOP = sp; //@line 18811
    return $$1 | 0; //@line 18811
   }
   $24 = $1 + 8 | 0; //@line 18813
   if (!(HEAP32[$24 >> 2] | 0)) {
    $$1 = -1003; //@line 18817
    STACKTOP = sp; //@line 18818
    return $$1 | 0; //@line 18818
   }
   $27 = $1 + 12 | 0; //@line 18820
   if (!(HEAP32[$27 >> 2] | 0)) {
    $$1 = -1003; //@line 18824
    STACKTOP = sp; //@line 18825
    return $$1 | 0; //@line 18825
   }
   $30 = $1 + 16 | 0; //@line 18827
   if (!(HEAP8[$30 >> 0] | 0)) {
    $$1 = -1003; //@line 18831
    STACKTOP = sp; //@line 18832
    return $$1 | 0; //@line 18832
   }
   HEAP32[$0 + 900 >> 2] = $22; //@line 18835
   HEAP32[$0 + 904 >> 2] = HEAP32[$24 >> 2]; //@line 18838
   HEAP32[$0 + 908 >> 2] = HEAP32[$27 >> 2]; //@line 18841
   $38 = HEAP8[$30 >> 0] | 0; //@line 18842
   $39 = $0 + 896 | 0; //@line 18843
   HEAP8[$39 >> 0] = $38; //@line 18844
   $42 = __ZN7LoRaPHY21verify_nb_join_trialsEh(HEAP32[$0 >> 2] | 0, HEAP8[$30 >> 0] | 0) | 0; //@line 18847
   HEAP8[$39 >> 0] = $42 ? $38 : 12; //@line 18849
   $43 = $0 + 897 | 0; //@line 18850
   HEAP8[$43 >> 0] = 0; //@line 18851
   HEAP8[$0 + 372 >> 0] = 0; //@line 18854
   $46 = $0 + 956 | 0; //@line 18855
   HEAP32[$46 >> 2] = 0; //@line 18856
   HEAP32[$0 + 960 >> 2] = 0; //@line 18858
   HEAP32[$0 + 964 >> 2] = 0; //@line 18860
   HEAP8[$0 + 380 >> 0] = 0; //@line 18862
   HEAP8[$0 + 894 >> 0] = 1; //@line 18864
   HEAP8[$0 + 895 >> 0] = 1; //@line 18866
   HEAP8[$0 + 377 >> 0] = 0; //@line 18868
   HEAP8[$0 + 1152 >> 0] = 0; //@line 18870
   HEAP16[$0 + 1154 >> 1] = 1; //@line 18872
   $55 = $0 + 4 | 0; //@line 18873
   __ZN14LoRaMacCommand20clear_command_bufferEv($55); //@line 18874
   __ZN14LoRaMacCommand19clear_repeat_bufferEv($55); //@line 18875
   __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($55); //@line 18876
   HEAP8[$0 + 371 >> 0] = 1; //@line 18878
   __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $0 + 360 | 0, 0); //@line 18880
   HEAP8[$0 + 373 >> 0] = 0; //@line 18882
   HEAP8[$0 + 374 >> 0] = 0; //@line 18884
   $$05$i = HEAP32[$0 + 1208 >> 2] | 0; //@line 18886
   if ($$05$i | 0) {
    $$06$i = $$05$i; //@line 18889
    do {
     HEAP32[$$06$i + 36 >> 2] = 0; //@line 18892
     $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 18894
    } while (($$06$i | 0) != 0);
   }
   HEAP8[$0 + 378 >> 0] = 0; //@line 18904
   HEAP8[$0 + 379 >> 0] = 0; //@line 18906
   $67 = HEAP32[$0 >> 2] | 0; //@line 18907
   $70 = HEAP32[(HEAP32[$67 >> 2] | 0) + 52 >> 2] | 0; //@line 18910
   $74 = (HEAPU8[$43 >> 0] | 0) + 1 & 255; //@line 18914
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 18915
   $75 = FUNCTION_TABLE_iii[$70 & 31]($67, $74) | 0; //@line 18916
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 555; //@line 18919
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 18921
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 18923
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 18925
    HEAP32[$AsyncCtx + 16 >> 2] = $46; //@line 18927
    HEAP32[$AsyncCtx + 20 >> 2] = $12; //@line 18929
    sp = STACKTOP; //@line 18930
    STACKTOP = sp; //@line 18931
    return 0; //@line 18931
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 18933
   HEAP8[$0 + 1097 >> 0] = $75; //@line 18935
   HEAP8[$vararg_buffer >> 0] = 0; //@line 18936
   HEAP8[$vararg_buffer1 >> 0] = HEAP8[$0 + 1156 >> 0] << 7; //@line 18940
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18941
   $85 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $vararg_buffer, $vararg_buffer1, 0, 0, 0) | 0; //@line 18942
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 556; //@line 18945
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 18947
    HEAP32[$AsyncCtx7 + 8 >> 2] = $46; //@line 18949
    HEAP32[$AsyncCtx7 + 12 >> 2] = $vararg_buffer1; //@line 18951
    HEAP32[$AsyncCtx7 + 16 >> 2] = $vararg_buffer; //@line 18953
    HEAP32[$AsyncCtx7 + 20 >> 2] = $12; //@line 18955
    sp = STACKTOP; //@line 18956
    STACKTOP = sp; //@line 18957
    return 0; //@line 18957
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 18959
   do {
    if (!$85) {
     $92 = $0 + 288 | 0; //@line 18963
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($92) | 0) + 11 >> 0] = 0; //@line 18966
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($92) | 0) + 10 >> 0] = 0; //@line 18969
     $97 = HEAP32[$46 >> 2] | 0; //@line 18970
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($92) | 0) + 16 >> 2] = $97; //@line 18973
     $AsyncCtx27 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18974
     $100 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 18975
     if (___async) {
      HEAP32[$AsyncCtx27 >> 2] = 557; //@line 18978
      HEAP32[$AsyncCtx27 + 4 >> 2] = $vararg_buffer1; //@line 18980
      HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer; //@line 18982
      HEAP32[$AsyncCtx27 + 12 >> 2] = $12; //@line 18984
      HEAP32[$AsyncCtx27 + 16 >> 2] = $0; //@line 18986
      sp = STACKTOP; //@line 18987
      STACKTOP = sp; //@line 18988
      return 0; //@line 18988
     } else {
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 18990
      $$0$i22 = $100; //@line 18991
      break;
     }
    } else {
     $$0$i22 = $85; //@line 18995
    }
   } while (0);
   $$0 = $$0$i22; //@line 18998
   label = 32; //@line 18999
   break;
  }
 case 2:
  {
   $106 = HEAP8[$0 + 378 >> 0] | 0; //@line 19004
   $108 = HEAP8[$0 + 1097 >> 0] | 0; //@line 19006
   $110 = HEAP8[$0 + 1096 >> 0] | 0; //@line 19008
   $112 = +HEAPF32[$0 + 1144 >> 2]; //@line 19010
   $114 = +HEAPF32[$0 + 1148 >> 2]; //@line 19012
   $116 = HEAP16[$1 + 4 >> 1] | 0; //@line 19014
   $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 19015
   __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($9, $106, $108, $110, $112, $114, $116); //@line 19016
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 558; //@line 19019
    HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 19021
    HEAP32[$AsyncCtx23 + 8 >> 2] = $6; //@line 19023
    sp = STACKTOP; //@line 19024
    STACKTOP = sp; //@line 19025
    return 0; //@line 19025
   }
   _emscripten_free_async_context($AsyncCtx23 | 0); //@line 19027
   $120 = HEAP32[$0 + 356 >> 2] | 0; //@line 19029
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19031
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($120, $0 + 996 | 0, 1e3); //@line 19032
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 559; //@line 19035
    HEAP32[$AsyncCtx15 + 4 >> 2] = $6; //@line 19037
    sp = STACKTOP; //@line 19038
    STACKTOP = sp; //@line 19039
    return 0; //@line 19039
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 19041
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 1; //@line 19044
   $$1 = 0; //@line 19045
   STACKTOP = sp; //@line 19046
   return $$1 | 0; //@line 19046
  }
 case 3:
  {
   $127 = HEAP8[$1 + 12 >> 0] | 0; //@line 19052
   $128 = HEAP16[$1 + 4 >> 1] | 0; //@line 19053
   $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 19054
   __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($9, 0, 0, $127, 0.0, 0.0, $128); //@line 19055
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 560; //@line 19058
    HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 19060
    HEAP32[$AsyncCtx19 + 8 >> 2] = $6; //@line 19062
    sp = STACKTOP; //@line 19063
    STACKTOP = sp; //@line 19064
    return 0; //@line 19064
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 19066
   $132 = HEAP32[$0 + 356 >> 2] | 0; //@line 19068
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19070
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($132, $0 + 996 | 0, 1e3); //@line 19071
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 561; //@line 19074
    HEAP32[$AsyncCtx11 + 4 >> 2] = $6; //@line 19076
    sp = STACKTOP; //@line 19077
    STACKTOP = sp; //@line 19078
    return 0; //@line 19078
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 19080
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 1; //@line 19083
   $$1 = 0; //@line 19084
   STACKTOP = sp; //@line 19085
   return $$1 | 0; //@line 19085
  }
 default:
  {
   $$024 = -1002; //@line 19089
   $140 = $14; //@line 19089
  }
 }
 do {
  if ((label | 0) == 32) {
   if (!$$0) {
    $$1 = 0; //@line 19096
    STACKTOP = sp; //@line 19097
    return $$1 | 0; //@line 19097
   } else {
    $$024 = $$0; //@line 19100
    $140 = HEAP8[$12 >> 0] | 0; //@line 19100
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 373 >> 0] = 0; //@line 19106
 HEAP8[$12 >> 0] = $140 & -9; //@line 19108
 $$1 = $$024; //@line 19109
 STACKTOP = sp; //@line 19110
 return $$1 | 0; //@line 19110
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$080 = 0, $100 = 0, $118 = 0, $12 = 0, $123 = 0, $128 = 0, $133 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $36 = 0, $4 = 0, $40 = 0, $44 = 0, $55 = 0, $60 = 0, $61 = 0, $70 = 0, $73 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $89 = 0, $94 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 22882
 L1 : do {
  if (!$1) {
   $$080 = -1003; //@line 22886
  } else {
   $4 = HEAP32[$0 >> 2] | 0; //@line 22888
   if (!$4) {
    $$080 = -1003; //@line 22891
   } else {
    do {
     switch (HEAP32[$1 >> 2] | 0) {
     case 0:
      {
       $8 = HEAP32[$1 + 4 >> 2] | 0; //@line 22898
       HEAP32[$2 >> 2] = $8; //@line 22899
       switch ($8 | 0) {
       case 0:
        {
         $AsyncCtx19 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22902
         __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 22903
         if (___async) {
          HEAP32[$AsyncCtx19 >> 2] = 611; //@line 22906
          sp = STACKTOP; //@line 22907
          return 0; //@line 22908
         } else {
          _emscripten_free_async_context($AsyncCtx19 | 0); //@line 22910
          $$080 = 0; //@line 22911
          break L1;
         }
         break;
        }
       case 2:
        {
         break;
        }
       default:
        {
         $$080 = 0; //@line 22920
         break L1;
        }
       }
       HEAP8[$2 + 13 >> 0] = 0; //@line 22925
       $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 22926
       __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 22927
       if (___async) {
        HEAP32[$AsyncCtx15 >> 2] = 612; //@line 22930
        HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 22932
        HEAP32[$AsyncCtx15 + 8 >> 2] = $2; //@line 22934
        sp = STACKTOP; //@line 22935
        return 0; //@line 22936
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 22938
       $12 = HEAP32[$0 >> 2] | 0; //@line 22939
       $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 22942
       $17 = HEAP8[$2 + 776 >> 0] | 0; //@line 22944
       $19 = HEAP8[$2 + 744 >> 0] | 0; //@line 22946
       $21 = HEAP32[$2 + 740 >> 2] | 0; //@line 22948
       $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 22950
       FUNCTION_TABLE_viiiii[$15 & 7]($12, $17, $19, $21, $2 + 824 | 0); //@line 22951
       if (___async) {
        HEAP32[$AsyncCtx >> 2] = 613; //@line 22954
        sp = STACKTOP; //@line 22955
        return 0; //@line 22956
       } else {
        _emscripten_free_async_context($AsyncCtx | 0); //@line 22958
        $$080 = 0; //@line 22959
        break L1;
       }
       break;
      }
     case 1:
      {
       HEAP8[$2 + 12 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 22968
       $$080 = 0; //@line 22969
       break L1;
       break;
      }
     case 2:
      {
       HEAP8[$2 + 796 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 22977
       $$080 = 0; //@line 22978
       break L1;
       break;
      }
     case 3:
      {
       HEAP32[$2 + 588 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 22986
       $$080 = 0; //@line 22987
       break L1;
       break;
      }
     case 4:
      {
       HEAP32[$2 + 592 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 22995
       $$080 = 0; //@line 22996
       break L1;
       break;
      }
     case 5:
      {
       $36 = HEAP32[$1 + 4 >> 2] | 0; //@line 23002
       if (!$36) {
        $$080 = -1003; //@line 23005
        break L1;
       }
       dest = $2 + 552 | 0; //@line 23009
       src = $36; //@line 23009
       stop = dest + 16 | 0; //@line 23009
       do {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 23009
        dest = dest + 1 | 0; //@line 23009
        src = src + 1 | 0; //@line 23009
       } while ((dest | 0) < (stop | 0));
       $$080 = 0; //@line 23010
       break L1;
       break;
      }
     case 6:
      {
       $40 = HEAP32[$1 + 4 >> 2] | 0; //@line 23016
       if (!$40) {
        $$080 = -1003; //@line 23019
        break L1;
       }
       dest = $2 + 568 | 0; //@line 23023
       src = $40; //@line 23023
       stop = dest + 16 | 0; //@line 23023
       do {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 23023
        dest = dest + 1 | 0; //@line 23023
        src = src + 1 | 0; //@line 23023
       } while ((dest | 0) < (stop | 0));
       $$080 = 0; //@line 23024
       break L1;
       break;
      }
     case 7:
      {
       $44 = HEAP8[$1 + 4 >> 0] | 0; //@line 23030
       HEAP8[$2 + 8 >> 0] = $44; //@line 23033
       $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 23034
       __ZN7LoRaPHY25setup_public_network_modeEb($4, $44 << 24 >> 24 != 0); //@line 23035
       if (___async) {
        HEAP32[$AsyncCtx7 >> 2] = 614; //@line 23038
        sp = STACKTOP; //@line 23039
        return 0; //@line 23040
       } else {
        _emscripten_free_async_context($AsyncCtx7 | 0); //@line 23042
        $$080 = 0; //@line 23043
        break L1;
       }
       break;
      }
     case 8:
      {
       HEAP8[$2 + 9 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 23052
       $$080 = 0; //@line 23053
       break L1;
       break;
      }
     case 10:
      {
       if (!(__ZN7LoRaPHY18verify_rx_datarateEh($4, HEAP8[$1 + 8 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 23062
        break L1;
       }
       $55 = $1 + 4 | 0; //@line 23067
       $60 = HEAP32[$55 + 4 >> 2] | 0; //@line 23072
       $61 = $2 + 772 | 0; //@line 23073
       HEAP32[$61 >> 2] = HEAP32[$55 >> 2]; //@line 23075
       HEAP32[$61 + 4 >> 2] = $60; //@line 23078
       if ((HEAP32[$2 >> 2] | 0) != 2) {
        $$080 = 0; //@line 23082
        break L1;
       }
       if (!(HEAP8[$2 + 12 >> 0] | 0)) {
        $$080 = 0; //@line 23089
        break L1;
       }
       $70 = HEAP32[$0 >> 2] | 0; //@line 23092
       $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 23093
       __ZN7LoRaPHY18put_radio_to_sleepEv($70); //@line 23094
       if (___async) {
        HEAP32[$AsyncCtx11 >> 2] = 615; //@line 23097
        HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 23099
        HEAP32[$AsyncCtx11 + 8 >> 2] = $2; //@line 23101
        sp = STACKTOP; //@line 23102
        return 0; //@line 23103
       }
       _emscripten_free_async_context($AsyncCtx11 | 0); //@line 23105
       $73 = HEAP32[$0 >> 2] | 0; //@line 23106
       $76 = HEAP32[(HEAP32[$73 >> 2] | 0) + 28 >> 2] | 0; //@line 23109
       $78 = HEAP8[$2 + 776 >> 0] | 0; //@line 23111
       $80 = HEAP8[$2 + 744 >> 0] | 0; //@line 23113
       $82 = HEAP32[$2 + 740 >> 2] | 0; //@line 23115
       $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 23117
       FUNCTION_TABLE_viiiii[$76 & 7]($73, $78, $80, $82, $2 + 824 | 0); //@line 23118
       if (___async) {
        HEAP32[$AsyncCtx3 >> 2] = 616; //@line 23121
        sp = STACKTOP; //@line 23122
        return 0; //@line 23123
       } else {
        _emscripten_free_async_context($AsyncCtx3 | 0); //@line 23125
        $$080 = 0; //@line 23126
        break L1;
       }
       break;
      }
     case 11:
      {
       if (!(__ZN7LoRaPHY18verify_rx_datarateEh($4, HEAP8[$1 + 8 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 23136
        break L1;
       }
       $89 = $1 + 4 | 0; //@line 23141
       $94 = HEAP32[$89 + 4 >> 2] | 0; //@line 23146
       $95 = $2 + 772 | 0; //@line 23147
       HEAP32[$95 >> 2] = HEAP32[$89 >> 2]; //@line 23149
       HEAP32[$95 + 4 >> 2] = $94; //@line 23152
       $$080 = 0; //@line 23153
       break L1;
       break;
      }
     case 29:
      {
       HEAP32[$2 + 788 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23161
       $$080 = 0; //@line 23162
       break L1;
       break;
      }
     case 28:
      {
       HEAP8[$2 + 744 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 23170
       $$080 = 0; //@line 23171
       break L1;
       break;
      }
     case 14:
      {
       $100 = HEAP8[$1 + 4 >> 0] | 0; //@line 23177
       if (($100 + -1 & 255) >= 15) {
        $$080 = -1003; //@line 23181
        break L1;
       }
       HEAP8[$2 + 768 >> 0] = $100; //@line 23185
       $$080 = 0; //@line 23186
       break L1;
       break;
      }
     case 15:
      {
       HEAP32[$2 + 748 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23194
       $$080 = 0; //@line 23195
       break L1;
       break;
      }
     case 16:
      {
       HEAP32[$2 + 752 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23203
       $$080 = 0; //@line 23204
       break L1;
       break;
      }
     case 17:
      {
       HEAP32[$2 + 756 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23212
       $$080 = 0; //@line 23213
       break L1;
       break;
      }
     case 18:
      {
       HEAP32[$2 + 760 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23221
       $$080 = 0; //@line 23222
       break L1;
       break;
      }
     case 19:
      {
       HEAP32[$2 + 764 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23230
       $$080 = 0; //@line 23231
       break L1;
       break;
      }
     case 20:
      {
       $118 = $1 + 4 | 0; //@line 23236
       if (!(__ZN7LoRaPHY18verify_tx_datarateEhb($4, HEAP8[$118 >> 0] | 0, 1) | 0)) {
        $$080 = -1003; //@line 23240
        break L1;
       }
       HEAP8[$2 + 737 >> 0] = HEAP8[$118 >> 0] | 0; //@line 23245
       $$080 = 0; //@line 23246
       break L1;
       break;
      }
     case 21:
      {
       $123 = $1 + 4 | 0; //@line 23251
       if (!(__ZN7LoRaPHY18verify_tx_datarateEhb($4, HEAP8[$123 >> 0] | 0, 0) | 0)) {
        $$080 = -1003; //@line 23255
        break L1;
       }
       HEAP8[$2 + 737 >> 0] = HEAP8[$123 >> 0] | 0; //@line 23260
       $$080 = 0; //@line 23261
       break L1;
       break;
      }
     case 23:
      {
       $128 = $1 + 4 | 0; //@line 23266
       if (!(__ZN7LoRaPHY15verify_tx_powerEh($4, HEAP8[$128 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 23270
        break L1;
       }
       HEAP8[$2 + 736 >> 0] = HEAP8[$128 >> 0] | 0; //@line 23275
       $$080 = 0; //@line 23276
       break L1;
       break;
      }
     case 22:
      {
       $133 = $1 + 4 | 0; //@line 23281
       if (!(__ZN7LoRaPHY15verify_tx_powerEh($4, HEAP8[$133 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 23285
        break L1;
       }
       HEAP8[$2 + 736 >> 0] = HEAP8[$133 >> 0] | 0; //@line 23290
       $$080 = 0; //@line 23291
       break L1;
       break;
      }
     case 24:
      {
       HEAP32[$2 + 596 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23299
       $$080 = 0; //@line 23300
       break L1;
       break;
      }
     case 25:
      {
       HEAP32[$2 + 600 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23308
       $$080 = 0; //@line 23309
       break L1;
       break;
      }
     case 27:
      {
       HEAP32[$2 + 740 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23317
       $$080 = 0; //@line 23318
       break L1;
       break;
      }
     default:
      {
       $$080 = -1002; //@line 23323
       break L1;
      }
     }
    } while (0);
   }
  }
 } while (0);
 return $$080 | 0; //@line 23331
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $37 = 0, $4 = 0, $42 = 0, $43 = 0, $46 = 0, $49 = 0, $53 = 0, $55 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $67 = 0, $74 = 0, $75 = 0, $79 = 0, $81 = 0, $86 = 0, $87 = 0, $90 = 0, $93 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx48 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx63 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 6430
 STACKTOP = STACKTOP + 96 | 0; //@line 6431
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 6431
 $vararg_buffer9 = sp + 40 | 0; //@line 6432
 $vararg_buffer7 = sp + 32 | 0; //@line 6433
 $vararg_buffer5 = sp + 24 | 0; //@line 6434
 $vararg_buffer3 = sp + 16 | 0; //@line 6435
 $2 = sp + 80 | 0; //@line 6438
 $3 = sp + 64 | 0; //@line 6439
 $4 = sp + 48 | 0; //@line 6440
 if (!$1) {
  _printf(12178, sp) | 0; //@line 6443
  _printf(12870, sp + 8 | 0) | 0; //@line 6444
  $AsyncCtx39 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6445
  _putchar(10) | 0; //@line 6446
  if (___async) {
   HEAP32[$AsyncCtx39 >> 2] = 200; //@line 6449
   sp = STACKTOP; //@line 6450
   STACKTOP = sp; //@line 6451
   return;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 6453
  $AsyncCtx63 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6454
  _mbed_assert_internal(14804, 12226, 766); //@line 6455
  if (___async) {
   HEAP32[$AsyncCtx63 >> 2] = 201; //@line 6458
   sp = STACKTOP; //@line 6459
   STACKTOP = sp; //@line 6460
   return;
  }
  _emscripten_free_async_context($AsyncCtx63 | 0); //@line 6462
  STACKTOP = sp; //@line 6463
  return;
 }
 _printf(12430, $vararg_buffer3) | 0; //@line 6465
 $6 = $1 + 4 | 0; //@line 6466
 HEAP32[$vararg_buffer5 >> 2] = HEAP32[$6 >> 2]; //@line 6468
 _printf(12905, $vararg_buffer5) | 0; //@line 6469
 $AsyncCtx35 = _emscripten_alloc_async_context(44, sp) | 0; //@line 6470
 _putchar(10) | 0; //@line 6471
 if (___async) {
  HEAP32[$AsyncCtx35 >> 2] = 202; //@line 6474
  HEAP32[$AsyncCtx35 + 4 >> 2] = $6; //@line 6476
  HEAP32[$AsyncCtx35 + 8 >> 2] = $2; //@line 6478
  HEAP32[$AsyncCtx35 + 12 >> 2] = $0; //@line 6480
  HEAP32[$AsyncCtx35 + 16 >> 2] = $3; //@line 6482
  HEAP32[$AsyncCtx35 + 20 >> 2] = $1; //@line 6484
  HEAP32[$AsyncCtx35 + 24 >> 2] = $4; //@line 6486
  HEAP32[$AsyncCtx35 + 28 >> 2] = $vararg_buffer7; //@line 6488
  HEAP32[$AsyncCtx35 + 32 >> 2] = $vararg_buffer7; //@line 6490
  HEAP32[$AsyncCtx35 + 36 >> 2] = $vararg_buffer9; //@line 6492
  HEAP32[$AsyncCtx35 + 40 >> 2] = $vararg_buffer9; //@line 6494
  sp = STACKTOP; //@line 6495
  STACKTOP = sp; //@line 6496
  return;
 }
 _emscripten_free_async_context($AsyncCtx35 | 0); //@line 6498
 if (!(HEAP32[$6 >> 2] | 0)) {
  HEAP32[$0 + 1956 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 6505
  HEAP8[$0 + 1964 >> 0] = 0; //@line 6507
  $74 = $0 + 1892 | 0; //@line 6508
  $75 = HEAP32[$74 >> 2] | 0; //@line 6509
  if (!$75) {
   STACKTOP = sp; //@line 6512
   return;
  }
  $79 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6516
  $81 = HEAP32[$75 + 4 >> 2] | 0; //@line 6518
  $AsyncCtx23 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6519
  FUNCTION_TABLE_vii[$81 & 31]($4, $0 + 1880 | 0); //@line 6520
  if (___async) {
   HEAP32[$AsyncCtx23 >> 2] = 212; //@line 6523
   HEAP32[$AsyncCtx23 + 4 >> 2] = $74; //@line 6525
   HEAP32[$AsyncCtx23 + 8 >> 2] = $4; //@line 6527
   HEAP32[$AsyncCtx23 + 12 >> 2] = $79; //@line 6529
   HEAP32[$AsyncCtx23 + 16 >> 2] = $4; //@line 6531
   sp = STACKTOP; //@line 6532
   STACKTOP = sp; //@line 6533
   return;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6535
  $86 = $4 + 12 | 0; //@line 6537
  HEAP32[$86 >> 2] = HEAP32[$74 >> 2]; //@line 6538
  $AsyncCtx42 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6539
  $87 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($79, $4, 2) | 0; //@line 6540
  if (___async) {
   HEAP32[$AsyncCtx42 >> 2] = 213; //@line 6543
   HEAP32[$AsyncCtx42 + 4 >> 2] = $86; //@line 6545
   HEAP32[$AsyncCtx42 + 8 >> 2] = $4; //@line 6547
   sp = STACKTOP; //@line 6548
   STACKTOP = sp; //@line 6549
   return;
  }
  _emscripten_free_async_context($AsyncCtx42 | 0); //@line 6551
  $90 = HEAP32[$86 >> 2] | 0; //@line 6552
  do {
   if ($90 | 0) {
    $93 = HEAP32[$90 + 8 >> 2] | 0; //@line 6557
    $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6558
    FUNCTION_TABLE_vi[$93 & 1023]($4); //@line 6559
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 214; //@line 6562
     HEAP32[$AsyncCtx27 + 4 >> 2] = $87; //@line 6564
     sp = STACKTOP; //@line 6565
     STACKTOP = sp; //@line 6566
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6568
     break;
    }
   }
  } while (0);
  if ($87 | 0) {
   STACKTOP = sp; //@line 6575
   return;
  }
  $AsyncCtx52 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6577
  _mbed_assert_internal(13142, 12226, 821); //@line 6578
  if (___async) {
   HEAP32[$AsyncCtx52 >> 2] = 215; //@line 6581
   sp = STACKTOP; //@line 6582
   STACKTOP = sp; //@line 6583
   return;
  }
  _emscripten_free_async_context($AsyncCtx52 | 0); //@line 6585
  STACKTOP = sp; //@line 6586
  return;
 }
 HEAP8[$0 + 1964 >> 0] = 0; //@line 6589
 _memset($0 + 1975 | 0, 0, 255) | 0; //@line 6591
 HEAP16[$0 + 2230 >> 1] = 255; //@line 6593
 _printf(12178, $vararg_buffer7) | 0; //@line 6594
 HEAP32[$vararg_buffer9 >> 2] = HEAP32[$6 >> 2]; //@line 6596
 _printf(12937, $vararg_buffer9) | 0; //@line 6597
 $AsyncCtx31 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6598
 _putchar(10) | 0; //@line 6599
 if (___async) {
  HEAP32[$AsyncCtx31 >> 2] = 203; //@line 6602
  HEAP32[$AsyncCtx31 + 4 >> 2] = $2; //@line 6604
  HEAP32[$AsyncCtx31 + 8 >> 2] = $0; //@line 6606
  HEAP32[$AsyncCtx31 + 12 >> 2] = $3; //@line 6608
  HEAP32[$AsyncCtx31 + 16 >> 2] = $6; //@line 6610
  sp = STACKTOP; //@line 6611
  STACKTOP = sp; //@line 6612
  return;
 }
 _emscripten_free_async_context($AsyncCtx31 | 0); //@line 6614
 $30 = $0 + 1880 | 0; //@line 6617
 $31 = $0 + 1892 | 0; //@line 6618
 $32 = HEAP32[$31 >> 2] | 0; //@line 6619
 $33 = ($32 | 0) != 0; //@line 6620
 if ((HEAP32[$6 >> 2] | 0) == 2) {
  if (!$33) {
   STACKTOP = sp; //@line 6623
   return;
  }
  $35 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6626
  $37 = HEAP32[$32 + 4 >> 2] | 0; //@line 6628
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 6629
  FUNCTION_TABLE_vii[$37 & 31]($2, $30); //@line 6630
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 204; //@line 6633
   HEAP32[$AsyncCtx + 4 >> 2] = $31; //@line 6635
   HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6637
   HEAP32[$AsyncCtx + 12 >> 2] = $35; //@line 6639
   HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 6641
   sp = STACKTOP; //@line 6642
   STACKTOP = sp; //@line 6643
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6645
  $42 = $2 + 12 | 0; //@line 6647
  HEAP32[$42 >> 2] = HEAP32[$31 >> 2]; //@line 6648
  $AsyncCtx48 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6649
  $43 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($35, $2, 3) | 0; //@line 6650
  if (___async) {
   HEAP32[$AsyncCtx48 >> 2] = 205; //@line 6653
   HEAP32[$AsyncCtx48 + 4 >> 2] = $42; //@line 6655
   HEAP32[$AsyncCtx48 + 8 >> 2] = $2; //@line 6657
   sp = STACKTOP; //@line 6658
   STACKTOP = sp; //@line 6659
   return;
  }
  _emscripten_free_async_context($AsyncCtx48 | 0); //@line 6661
  $46 = HEAP32[$42 >> 2] | 0; //@line 6662
  do {
   if ($46 | 0) {
    $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 6667
    $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6668
    FUNCTION_TABLE_vi[$49 & 1023]($2); //@line 6669
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 206; //@line 6672
     HEAP32[$AsyncCtx13 + 4 >> 2] = $43; //@line 6674
     sp = STACKTOP; //@line 6675
     STACKTOP = sp; //@line 6676
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx13 | 0); //@line 6678
     break;
    }
   }
  } while (0);
  if ($43 | 0) {
   STACKTOP = sp; //@line 6685
   return;
  }
  $AsyncCtx60 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6687
  _mbed_assert_internal(13142, 12226, 786); //@line 6688
  if (___async) {
   HEAP32[$AsyncCtx60 >> 2] = 207; //@line 6691
   sp = STACKTOP; //@line 6692
   STACKTOP = sp; //@line 6693
   return;
  }
  _emscripten_free_async_context($AsyncCtx60 | 0); //@line 6695
  STACKTOP = sp; //@line 6696
  return;
 } else {
  if (!$33) {
   STACKTOP = sp; //@line 6699
   return;
  }
  $53 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6702
  $55 = HEAP32[$32 + 4 >> 2] | 0; //@line 6704
  $AsyncCtx16 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6705
  FUNCTION_TABLE_vii[$55 & 31]($3, $30); //@line 6706
  if (___async) {
   HEAP32[$AsyncCtx16 >> 2] = 208; //@line 6709
   HEAP32[$AsyncCtx16 + 4 >> 2] = $31; //@line 6711
   HEAP32[$AsyncCtx16 + 8 >> 2] = $3; //@line 6713
   HEAP32[$AsyncCtx16 + 12 >> 2] = $53; //@line 6715
   HEAP32[$AsyncCtx16 + 16 >> 2] = $3; //@line 6717
   sp = STACKTOP; //@line 6718
   STACKTOP = sp; //@line 6719
   return;
  }
  _emscripten_free_async_context($AsyncCtx16 | 0); //@line 6721
  $60 = $3 + 12 | 0; //@line 6723
  HEAP32[$60 >> 2] = HEAP32[$31 >> 2]; //@line 6724
  $AsyncCtx45 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6725
  $61 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($53, $3, 4) | 0; //@line 6726
  if (___async) {
   HEAP32[$AsyncCtx45 >> 2] = 209; //@line 6729
   HEAP32[$AsyncCtx45 + 4 >> 2] = $60; //@line 6731
   HEAP32[$AsyncCtx45 + 8 >> 2] = $3; //@line 6733
   sp = STACKTOP; //@line 6734
   STACKTOP = sp; //@line 6735
   return;
  }
  _emscripten_free_async_context($AsyncCtx45 | 0); //@line 6737
  $64 = HEAP32[$60 >> 2] | 0; //@line 6738
  do {
   if ($64 | 0) {
    $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 6743
    $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6744
    FUNCTION_TABLE_vi[$67 & 1023]($3); //@line 6745
    if (___async) {
     HEAP32[$AsyncCtx20 >> 2] = 210; //@line 6748
     HEAP32[$AsyncCtx20 + 4 >> 2] = $61; //@line 6750
     sp = STACKTOP; //@line 6751
     STACKTOP = sp; //@line 6752
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx20 | 0); //@line 6754
     break;
    }
   }
  } while (0);
  if ($61 | 0) {
   STACKTOP = sp; //@line 6761
   return;
  }
  $AsyncCtx56 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6763
  _mbed_assert_internal(13142, 12226, 797); //@line 6764
  if (___async) {
   HEAP32[$AsyncCtx56 >> 2] = 211; //@line 6767
   sp = STACKTOP; //@line 6768
   STACKTOP = sp; //@line 6769
   return;
  }
  _emscripten_free_async_context($AsyncCtx56 | 0); //@line 6771
  STACKTOP = sp; //@line 6772
  return;
 }
}
function _mbedtls_gcm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$i = 0, $108 = 0, $110 = 0, $115 = 0, $120 = 0, $125 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $141 = 0, $143 = 0, $148 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $166 = 0, $171 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $187 = 0, $189 = 0, $194 = 0, $198 = 0, $199 = 0, $201 = 0, $205 = 0, $206 = 0, $208 = 0, $212 = 0, $213 = 0, $215 = 0, $219 = 0, $220 = 0, $222 = 0, $226 = 0, $227 = 0, $229 = 0, $233 = 0, $234 = 0, $236 = 0, $240 = 0, $241 = 0, $243 = 0, $247 = 0, $248 = 0, $250 = 0, $257 = 0, $26 = 0, $264 = 0, $271 = 0, $278 = 0, $285 = 0, $292 = 0, $299 = 0, $306 = 0, $313 = 0, $32 = 0, $320 = 0, $327 = 0, $334 = 0, $341 = 0, $348 = 0, $4 = 0, $5 = 0, $54 = 0, $6 = 0, $72 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 3837
 STACKTOP = STACKTOP + 32 | 0; //@line 3838
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 3838
 $4 = sp + 8 | 0; //@line 3839
 $5 = sp; //@line 3840
 $6 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 3841
 if (!$6) {
  $$0 = -20; //@line 3844
  STACKTOP = sp; //@line 3845
  return $$0 | 0; //@line 3845
 }
 if ((HEAP32[$6 + 24 >> 2] | 0) != 16) {
  $$0 = -20; //@line 3851
  STACKTOP = sp; //@line 3852
  return $$0 | 0; //@line 3852
 }
 $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 3854
 _mbedtls_cipher_free($0); //@line 3855
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 695; //@line 3858
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 3860
  HEAP32[$AsyncCtx11 + 8 >> 2] = $6; //@line 3862
  HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 3864
  HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 3866
  HEAP32[$AsyncCtx11 + 20 >> 2] = $4; //@line 3868
  HEAP32[$AsyncCtx11 + 24 >> 2] = $5; //@line 3870
  HEAP32[$AsyncCtx11 + 28 >> 2] = $0; //@line 3872
  sp = STACKTOP; //@line 3873
  STACKTOP = sp; //@line 3874
  return 0; //@line 3874
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3876
 $AsyncCtx7 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3877
 $18 = _mbedtls_cipher_setup($0, $6) | 0; //@line 3878
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 696; //@line 3881
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 3883
  HEAP32[$AsyncCtx7 + 8 >> 2] = $2; //@line 3885
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 3887
  HEAP32[$AsyncCtx7 + 16 >> 2] = $4; //@line 3889
  HEAP32[$AsyncCtx7 + 20 >> 2] = $5; //@line 3891
  HEAP32[$AsyncCtx7 + 24 >> 2] = $0; //@line 3893
  sp = STACKTOP; //@line 3894
  STACKTOP = sp; //@line 3895
  return 0; //@line 3895
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 3897
 if ($18 | 0) {
  $$0 = $18; //@line 3900
  STACKTOP = sp; //@line 3901
  return $$0 | 0; //@line 3901
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3903
 $26 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 3904
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 697; //@line 3907
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 3909
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 3911
  HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 3913
  HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 3915
  sp = STACKTOP; //@line 3916
  STACKTOP = sp; //@line 3917
  return 0; //@line 3917
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3919
 if ($26 | 0) {
  $$0 = $26; //@line 3922
  STACKTOP = sp; //@line 3923
  return $$0 | 0; //@line 3923
 }
 HEAP32[$5 >> 2] = 0; //@line 3925
 dest = $4; //@line 3926
 stop = dest + 16 | 0; //@line 3926
 do {
  HEAP8[dest >> 0] = 0; //@line 3926
  dest = dest + 1 | 0; //@line 3926
 } while ((dest | 0) < (stop | 0));
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 3927
 $32 = _mbedtls_cipher_update($0, $4, 16, $4, $5) | 0; //@line 3928
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 698; //@line 3931
  HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 3933
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 3935
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 3937
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 3939
  sp = STACKTOP; //@line 3940
  STACKTOP = sp; //@line 3941
  return 0; //@line 3941
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3943
 if (!$32) {
  $54 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[$4 >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 3962
  $72 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 3980
  $90 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 3998
  $108 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 4016
  $110 = $0 + 136 | 0; //@line 4018
  HEAP32[$110 >> 2] = $108; //@line 4020
  HEAP32[$110 + 4 >> 2] = $90; //@line 4023
  $115 = $0 + 264 | 0; //@line 4025
  HEAP32[$115 >> 2] = $72; //@line 4027
  HEAP32[$115 + 4 >> 2] = $54; //@line 4030
  $120 = $0 + 200 | 0; //@line 4032
  HEAP32[$120 >> 2] = 0; //@line 4034
  HEAP32[$120 + 4 >> 2] = 0; //@line 4037
  $125 = $0 + 72 | 0; //@line 4039
  HEAP32[$125 >> 2] = 0; //@line 4041
  HEAP32[$125 + 4 >> 2] = 0; //@line 4044
  $130 = _i64Subtract(0, 0, $108 & 1 | 0, 0) | 0; //@line 4046
  $132 = _bitshift64Shl($72 | 0, 0, 63) | 0; //@line 4048
  $133 = tempRet0; //@line 4049
  $134 = _bitshift64Lshr($108 | 0, $90 | 0, 1) | 0; //@line 4050
  $136 = $134 | $132; //@line 4052
  $137 = tempRet0 | $133; //@line 4053
  $138 = _bitshift64Lshr($72 | 0, $54 | 0, 1) | 0; //@line 4054
  $139 = tempRet0; //@line 4055
  $141 = $130 & -520093696 ^ $139; //@line 4057
  $143 = $0 + 104 | 0; //@line 4059
  HEAP32[$143 >> 2] = $136; //@line 4061
  HEAP32[$143 + 4 >> 2] = $137; //@line 4064
  $148 = $0 + 232 | 0; //@line 4066
  HEAP32[$148 >> 2] = $138; //@line 4068
  HEAP32[$148 + 4 >> 2] = $141; //@line 4071
  $153 = _i64Subtract(0, 0, $134 & 1 | 0, 0) | 0; //@line 4073
  $155 = _bitshift64Shl($138 | 0, $139 | 0, 63) | 0; //@line 4075
  $156 = tempRet0; //@line 4076
  $157 = _bitshift64Lshr($136 | 0, $137 | 0, 1) | 0; //@line 4077
  $159 = $157 | $155; //@line 4079
  $160 = tempRet0 | $156; //@line 4080
  $161 = _bitshift64Lshr($138 | 0, $141 | 0, 1) | 0; //@line 4081
  $162 = tempRet0; //@line 4082
  $164 = $153 & -520093696 ^ $162; //@line 4084
  $166 = $0 + 88 | 0; //@line 4086
  HEAP32[$166 >> 2] = $159; //@line 4088
  HEAP32[$166 + 4 >> 2] = $160; //@line 4091
  $171 = $0 + 216 | 0; //@line 4093
  HEAP32[$171 >> 2] = $161; //@line 4095
  HEAP32[$171 + 4 >> 2] = $164; //@line 4098
  $176 = _i64Subtract(0, 0, $157 & 1 | 0, 0) | 0; //@line 4100
  $178 = _bitshift64Shl($161 | 0, $162 | 0, 63) | 0; //@line 4102
  $179 = tempRet0; //@line 4103
  $180 = _bitshift64Lshr($159 | 0, $160 | 0, 1) | 0; //@line 4104
  $182 = $178 | $180; //@line 4106
  $183 = $179 | tempRet0; //@line 4107
  $184 = _bitshift64Lshr($161 | 0, $164 | 0, 1) | 0; //@line 4108
  $187 = $176 & -520093696 ^ tempRet0; //@line 4111
  $189 = $0 + 80 | 0; //@line 4113
  HEAP32[$189 >> 2] = $182; //@line 4115
  HEAP32[$189 + 4 >> 2] = $183; //@line 4118
  $194 = $0 + 208 | 0; //@line 4120
  HEAP32[$194 >> 2] = $184; //@line 4122
  HEAP32[$194 + 4 >> 2] = $187; //@line 4125
  $198 = $184 ^ $161; //@line 4126
  $199 = $187 ^ $164; //@line 4127
  $201 = $0 + 224 | 0; //@line 4129
  HEAP32[$201 >> 2] = $198; //@line 4131
  HEAP32[$201 + 4 >> 2] = $199; //@line 4134
  $205 = $182 ^ $159; //@line 4135
  $206 = $183 ^ $160; //@line 4136
  $208 = $0 + 96 | 0; //@line 4138
  HEAP32[$208 >> 2] = $205; //@line 4140
  HEAP32[$208 + 4 >> 2] = $206; //@line 4143
  $212 = $184 ^ $138; //@line 4144
  $213 = $187 ^ $141; //@line 4145
  $215 = $0 + 240 | 0; //@line 4147
  HEAP32[$215 >> 2] = $212; //@line 4149
  HEAP32[$215 + 4 >> 2] = $213; //@line 4152
  $219 = $182 ^ $136; //@line 4153
  $220 = $183 ^ $137; //@line 4154
  $222 = $0 + 112 | 0; //@line 4156
  HEAP32[$222 >> 2] = $219; //@line 4158
  HEAP32[$222 + 4 >> 2] = $220; //@line 4161
  $226 = $161 ^ $138; //@line 4162
  $227 = $164 ^ $141; //@line 4163
  $229 = $0 + 248 | 0; //@line 4165
  HEAP32[$229 >> 2] = $226; //@line 4167
  HEAP32[$229 + 4 >> 2] = $227; //@line 4170
  $233 = $159 ^ $136; //@line 4171
  $234 = $160 ^ $137; //@line 4172
  $236 = $0 + 120 | 0; //@line 4174
  HEAP32[$236 >> 2] = $233; //@line 4176
  HEAP32[$236 + 4 >> 2] = $234; //@line 4179
  $240 = $198 ^ $138; //@line 4180
  $241 = $199 ^ $141; //@line 4181
  $243 = $0 + 256 | 0; //@line 4183
  HEAP32[$243 >> 2] = $240; //@line 4185
  HEAP32[$243 + 4 >> 2] = $241; //@line 4188
  $247 = $205 ^ $136; //@line 4189
  $248 = $206 ^ $137; //@line 4190
  $250 = $0 + 128 | 0; //@line 4192
  HEAP32[$250 >> 2] = $247; //@line 4194
  HEAP32[$250 + 4 >> 2] = $248; //@line 4197
  $257 = $0 + 272 | 0; //@line 4201
  HEAP32[$257 >> 2] = $184 ^ $72; //@line 4203
  HEAP32[$257 + 4 >> 2] = $187 ^ $54; //@line 4206
  $264 = $0 + 144 | 0; //@line 4210
  HEAP32[$264 >> 2] = $182 ^ $108; //@line 4212
  HEAP32[$264 + 4 >> 2] = $183 ^ $90; //@line 4215
  $271 = $0 + 280 | 0; //@line 4219
  HEAP32[$271 >> 2] = $161 ^ $72; //@line 4221
  HEAP32[$271 + 4 >> 2] = $164 ^ $54; //@line 4224
  $278 = $0 + 152 | 0; //@line 4228
  HEAP32[$278 >> 2] = $159 ^ $108; //@line 4230
  HEAP32[$278 + 4 >> 2] = $160 ^ $90; //@line 4233
  $285 = $0 + 288 | 0; //@line 4237
  HEAP32[$285 >> 2] = $198 ^ $72; //@line 4239
  HEAP32[$285 + 4 >> 2] = $199 ^ $54; //@line 4242
  $292 = $0 + 160 | 0; //@line 4246
  HEAP32[$292 >> 2] = $205 ^ $108; //@line 4248
  HEAP32[$292 + 4 >> 2] = $206 ^ $90; //@line 4251
  $299 = $0 + 296 | 0; //@line 4255
  HEAP32[$299 >> 2] = $138 ^ $72; //@line 4257
  HEAP32[$299 + 4 >> 2] = $141 ^ $54; //@line 4260
  $306 = $0 + 168 | 0; //@line 4264
  HEAP32[$306 >> 2] = $136 ^ $108; //@line 4266
  HEAP32[$306 + 4 >> 2] = $137 ^ $90; //@line 4269
  $313 = $0 + 304 | 0; //@line 4273
  HEAP32[$313 >> 2] = $212 ^ $72; //@line 4275
  HEAP32[$313 + 4 >> 2] = $213 ^ $54; //@line 4278
  $320 = $0 + 176 | 0; //@line 4282
  HEAP32[$320 >> 2] = $219 ^ $108; //@line 4284
  HEAP32[$320 + 4 >> 2] = $220 ^ $90; //@line 4287
  $327 = $0 + 312 | 0; //@line 4291
  HEAP32[$327 >> 2] = $226 ^ $72; //@line 4293
  HEAP32[$327 + 4 >> 2] = $227 ^ $54; //@line 4296
  $334 = $0 + 184 | 0; //@line 4300
  HEAP32[$334 >> 2] = $233 ^ $108; //@line 4302
  HEAP32[$334 + 4 >> 2] = $234 ^ $90; //@line 4305
  $341 = $0 + 320 | 0; //@line 4309
  HEAP32[$341 >> 2] = $240 ^ $72; //@line 4311
  HEAP32[$341 + 4 >> 2] = $241 ^ $54; //@line 4314
  $348 = $0 + 192 | 0; //@line 4318
  HEAP32[$348 >> 2] = $247 ^ $108; //@line 4320
  HEAP32[$348 + 4 >> 2] = $248 ^ $90; //@line 4323
  $$0$i = 0; //@line 4324
 } else {
  $$0$i = $32; //@line 4326
 }
 $$0 = $$0$i; //@line 4328
 STACKTOP = sp; //@line 4329
 return $$0 | 0; //@line 4329
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15919
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 15925
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 15934
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 15939
      $19 = $1 + 44 | 0; //@line 15940
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 15949
      $26 = $1 + 52 | 0; //@line 15950
      $27 = $1 + 53 | 0; //@line 15951
      $28 = $1 + 54 | 0; //@line 15952
      $29 = $0 + 8 | 0; //@line 15953
      $30 = $1 + 24 | 0; //@line 15954
      $$081$off0 = 0; //@line 15955
      $$084 = $0 + 16 | 0; //@line 15955
      $$085$off0 = 0; //@line 15955
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 15959
        label = 20; //@line 15960
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 15963
       HEAP8[$27 >> 0] = 0; //@line 15964
       $AsyncCtx15 = _emscripten_alloc_async_context(56, sp) | 0; //@line 15965
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 15966
       if (___async) {
        label = 12; //@line 15969
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 15972
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 15976
        label = 20; //@line 15977
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 15984
         $$186$off0 = $$085$off0; //@line 15984
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 15993
           label = 20; //@line 15994
           break L10;
          } else {
           $$182$off0 = 1; //@line 15997
           $$186$off0 = $$085$off0; //@line 15997
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 16004
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 16011
          break L10;
         } else {
          $$182$off0 = 1; //@line 16014
          $$186$off0 = 1; //@line 16014
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 16019
       $$084 = $$084 + 8 | 0; //@line 16019
       $$085$off0 = $$186$off0; //@line 16019
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 807; //@line 16022
       HEAP8[$AsyncCtx15 + 4 >> 0] = $$085$off0 & 1; //@line 16025
       HEAP8[$AsyncCtx15 + 5 >> 0] = $$081$off0 & 1; //@line 16028
       HEAP32[$AsyncCtx15 + 8 >> 2] = $$084; //@line 16030
       HEAP32[$AsyncCtx15 + 12 >> 2] = $28; //@line 16032
       HEAP32[$AsyncCtx15 + 16 >> 2] = $29; //@line 16034
       HEAP32[$AsyncCtx15 + 20 >> 2] = $2; //@line 16036
       HEAP32[$AsyncCtx15 + 24 >> 2] = $13; //@line 16038
       HEAP32[$AsyncCtx15 + 28 >> 2] = $1; //@line 16040
       HEAP32[$AsyncCtx15 + 32 >> 2] = $30; //@line 16042
       HEAP32[$AsyncCtx15 + 36 >> 2] = $19; //@line 16044
       HEAP32[$AsyncCtx15 + 40 >> 2] = $26; //@line 16046
       HEAP32[$AsyncCtx15 + 44 >> 2] = $27; //@line 16048
       HEAP8[$AsyncCtx15 + 48 >> 0] = $4 & 1; //@line 16051
       HEAP32[$AsyncCtx15 + 52 >> 2] = $25; //@line 16053
       sp = STACKTOP; //@line 16054
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 16060
         $61 = $1 + 40 | 0; //@line 16061
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 16064
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 16072
           if ($$283$off0) {
            label = 25; //@line 16074
            break;
           } else {
            $69 = 4; //@line 16077
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 16084
        } else {
         $69 = 4; //@line 16086
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 16091
      }
      HEAP32[$19 >> 2] = $69; //@line 16093
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 16102
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 16107
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 16108
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16109
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 16110
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 808; //@line 16113
    HEAP32[$AsyncCtx11 + 4 >> 2] = $73; //@line 16115
    HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 16117
    HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 16119
    HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 16121
    HEAP8[$AsyncCtx11 + 20 >> 0] = $4 & 1; //@line 16124
    HEAP32[$AsyncCtx11 + 24 >> 2] = $0; //@line 16126
    HEAP32[$AsyncCtx11 + 28 >> 2] = $72; //@line 16128
    sp = STACKTOP; //@line 16129
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 16132
   $81 = $0 + 24 | 0; //@line 16133
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 16137
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 16141
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 16148
       $$2 = $81; //@line 16149
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 16161
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 16162
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 16167
        $136 = $$2 + 8 | 0; //@line 16168
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 16171
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 811; //@line 16176
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 16178
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 16180
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 16182
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 16184
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 16186
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 16188
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 16190
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 16193
       sp = STACKTOP; //@line 16194
       return;
      }
      $104 = $1 + 24 | 0; //@line 16197
      $105 = $1 + 54 | 0; //@line 16198
      $$1 = $81; //@line 16199
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 16215
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 16216
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16221
       $122 = $$1 + 8 | 0; //@line 16222
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 16225
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 810; //@line 16230
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 16232
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 16234
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 16236
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 16238
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 16240
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 16242
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 16244
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 16246
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 16249
      sp = STACKTOP; //@line 16250
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 16254
    $$0 = $81; //@line 16255
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16262
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 16263
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 16268
     $100 = $$0 + 8 | 0; //@line 16269
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 16272
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 809; //@line 16277
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 16279
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 16281
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 16283
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 16285
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 16287
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 16289
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 16292
    sp = STACKTOP; //@line 16293
    return;
   }
  }
 } while (0);
 return;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 7
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 8
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 9
 $d_sroa_0_0_extract_trunc = $b$0; //@line 10
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 11
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 12
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 14
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 17
    HEAP32[$rem + 4 >> 2] = 0; //@line 18
   }
   $_0$1 = 0; //@line 20
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 21
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 22
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 25
    $_0$0 = 0; //@line 26
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 27
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 29
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 30
   $_0$1 = 0; //@line 31
   $_0$0 = 0; //@line 32
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 36
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 41
     HEAP32[$rem + 4 >> 2] = 0; //@line 42
    }
    $_0$1 = 0; //@line 44
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 45
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 46
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 50
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 51
    }
    $_0$1 = 0; //@line 53
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 54
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 55
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 57
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 60
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 61
    }
    $_0$1 = 0; //@line 63
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 64
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 65
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 68
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 70
    $58 = 31 - $51 | 0; //@line 71
    $sr_1_ph = $57; //@line 72
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 73
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 74
    $q_sroa_0_1_ph = 0; //@line 75
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 76
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 80
    $_0$0 = 0; //@line 81
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 82
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 84
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 85
   $_0$1 = 0; //@line 86
   $_0$0 = 0; //@line 87
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 88
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 92
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 94
     $126 = 31 - $119 | 0; //@line 95
     $130 = $119 - 31 >> 31; //@line 96
     $sr_1_ph = $125; //@line 97
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 98
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 99
     $q_sroa_0_1_ph = 0; //@line 100
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 101
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 105
     $_0$0 = 0; //@line 106
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 107
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 109
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 110
    $_0$1 = 0; //@line 111
    $_0$0 = 0; //@line 112
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 113
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 115
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 118
    $89 = 64 - $88 | 0; //@line 119
    $91 = 32 - $88 | 0; //@line 120
    $92 = $91 >> 31; //@line 121
    $95 = $88 - 32 | 0; //@line 122
    $105 = $95 >> 31; //@line 123
    $sr_1_ph = $88; //@line 124
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 125
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 126
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 127
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 128
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 132
    HEAP32[$rem + 4 >> 2] = 0; //@line 133
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 136
    $_0$0 = $a$0 | 0 | 0; //@line 137
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 138
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 140
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 141
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 142
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 143
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 148
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 149
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 150
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 151
  $carry_0_lcssa$1 = 0; //@line 152
  $carry_0_lcssa$0 = 0; //@line 153
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 155
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 156
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 157
  $137$1 = tempRet0; //@line 158
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 159
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 160
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 161
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 162
  $sr_1202 = $sr_1_ph; //@line 163
  $carry_0203 = 0; //@line 164
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 166
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 167
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 168
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 169
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 170
   $150$1 = tempRet0; //@line 171
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 172
   $carry_0203 = $151$0 & 1; //@line 173
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 175
   $r_sroa_1_1200 = tempRet0; //@line 176
   $sr_1202 = $sr_1202 - 1 | 0; //@line 177
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 189
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 190
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 191
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 192
  $carry_0_lcssa$1 = 0; //@line 193
  $carry_0_lcssa$0 = $carry_0203; //@line 194
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 196
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 197
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 200
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 201
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 203
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 204
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 205
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $16 = 0, $2 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $38 = 0, $39 = 0, $42 = 0, $45 = 0, $51 = 0, $52 = 0, $56 = 0, $58 = 0, $64 = 0, $66 = 0, $68 = 0, $69 = 0, $72 = 0, $75 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx34 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx53 = 0, $AsyncCtx56 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 7086
 STACKTOP = STACKTOP + 80 | 0; //@line 7087
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 7087
 $vararg_buffer9 = sp + 40 | 0; //@line 7088
 $vararg_buffer7 = sp + 32 | 0; //@line 7089
 $vararg_buffer5 = sp + 24 | 0; //@line 7090
 $vararg_buffer3 = sp + 16 | 0; //@line 7091
 $2 = sp + 64 | 0; //@line 7094
 $3 = sp + 48 | 0; //@line 7095
 if (!$1) {
  _printf(12178, sp) | 0; //@line 7098
  _printf(12191, sp + 8 | 0) | 0; //@line 7099
  $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7100
  _putchar(10) | 0; //@line 7101
  if (___async) {
   HEAP32[$AsyncCtx31 >> 2] = 227; //@line 7104
   sp = STACKTOP; //@line 7105
   STACKTOP = sp; //@line 7106
   return;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 7108
  $AsyncCtx56 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7109
  _mbed_assert_internal(14804, 12226, 694); //@line 7110
  if (___async) {
   HEAP32[$AsyncCtx56 >> 2] = 228; //@line 7113
   sp = STACKTOP; //@line 7114
   STACKTOP = sp; //@line 7115
   return;
  }
  _emscripten_free_async_context($AsyncCtx56 | 0); //@line 7117
  STACKTOP = sp; //@line 7118
  return;
 }
 switch (HEAP32[$1 >> 2] | 0) {
 case 0:
  {
   $9 = $0 + 1876 | 0; //@line 7126
   if (!(HEAP32[$1 + 4 >> 2] | 0)) {
    HEAP32[$9 >> 2] = 4; //@line 7128
    $AsyncCtx45 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7129
    $10 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 7130
    if (___async) {
     HEAP32[$AsyncCtx45 >> 2] = 229; //@line 7133
     HEAP32[$AsyncCtx45 + 4 >> 2] = $vararg_buffer3; //@line 7135
     HEAP32[$AsyncCtx45 + 8 >> 2] = $vararg_buffer3; //@line 7137
     HEAP32[$AsyncCtx45 + 12 >> 2] = $vararg_buffer5; //@line 7139
     HEAP32[$AsyncCtx45 + 16 >> 2] = $vararg_buffer5; //@line 7141
     sp = STACKTOP; //@line 7142
     STACKTOP = sp; //@line 7143
     return;
    }
    _emscripten_free_async_context($AsyncCtx45 | 0); //@line 7145
    if (!$10) {
     STACKTOP = sp; //@line 7148
     return;
    }
    _printf(12178, $vararg_buffer3) | 0; //@line 7150
    _printf(12324, $vararg_buffer5) | 0; //@line 7151
    $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7152
    _putchar(10) | 0; //@line 7153
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 230; //@line 7156
     sp = STACKTOP; //@line 7157
     STACKTOP = sp; //@line 7158
     return;
    }
    _emscripten_free_async_context($AsyncCtx27 | 0); //@line 7160
    STACKTOP = sp; //@line 7161
    return;
   }
   HEAP32[$9 >> 2] = 6; //@line 7163
   $AsyncCtx41 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7164
   $16 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 7165
   if (___async) {
    HEAP32[$AsyncCtx41 >> 2] = 231; //@line 7168
    HEAP32[$AsyncCtx41 + 4 >> 2] = $vararg_buffer7; //@line 7170
    HEAP32[$AsyncCtx41 + 8 >> 2] = $vararg_buffer7; //@line 7172
    HEAP32[$AsyncCtx41 + 12 >> 2] = $vararg_buffer9; //@line 7174
    HEAP32[$AsyncCtx41 + 16 >> 2] = $vararg_buffer9; //@line 7176
    HEAP32[$AsyncCtx41 + 20 >> 2] = $0; //@line 7178
    HEAP32[$AsyncCtx41 + 24 >> 2] = $2; //@line 7180
    sp = STACKTOP; //@line 7181
    STACKTOP = sp; //@line 7182
    return;
   }
   _emscripten_free_async_context($AsyncCtx41 | 0); //@line 7184
   do {
    if (($16 | 0) != -1018) {
     _printf(12178, $vararg_buffer7) | 0; //@line 7188
     _printf(12376, $vararg_buffer9) | 0; //@line 7189
     $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7190
     _putchar(10) | 0; //@line 7191
     if (___async) {
      HEAP32[$AsyncCtx23 >> 2] = 232; //@line 7194
      HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 7196
      HEAP32[$AsyncCtx23 + 8 >> 2] = $2; //@line 7198
      sp = STACKTOP; //@line 7199
      STACKTOP = sp; //@line 7200
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx23 | 0); //@line 7202
      break;
     }
    }
   } while (0);
   $26 = $0 + 1892 | 0; //@line 7207
   $27 = HEAP32[$26 >> 2] | 0; //@line 7208
   if (!$27) {
    STACKTOP = sp; //@line 7211
    return;
   }
   $31 = HEAP32[$0 + 2288 >> 2] | 0; //@line 7215
   $33 = HEAP32[$27 + 4 >> 2] | 0; //@line 7217
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 7218
   FUNCTION_TABLE_vii[$33 & 31]($2, $0 + 1880 | 0); //@line 7219
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 233; //@line 7222
    HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 7224
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 7226
    HEAP32[$AsyncCtx + 12 >> 2] = $31; //@line 7228
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 7230
    sp = STACKTOP; //@line 7231
    STACKTOP = sp; //@line 7232
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7234
   $38 = $2 + 12 | 0; //@line 7236
   HEAP32[$38 >> 2] = HEAP32[$26 >> 2]; //@line 7237
   $AsyncCtx37 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7238
   $39 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($31, $2, 10) | 0; //@line 7239
   if (___async) {
    HEAP32[$AsyncCtx37 >> 2] = 234; //@line 7242
    HEAP32[$AsyncCtx37 + 4 >> 2] = $38; //@line 7244
    HEAP32[$AsyncCtx37 + 8 >> 2] = $2; //@line 7246
    sp = STACKTOP; //@line 7247
    STACKTOP = sp; //@line 7248
    return;
   }
   _emscripten_free_async_context($AsyncCtx37 | 0); //@line 7250
   $42 = HEAP32[$38 >> 2] | 0; //@line 7251
   do {
    if ($42 | 0) {
     $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 7256
     $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7257
     FUNCTION_TABLE_vi[$45 & 1023]($2); //@line 7258
     if (___async) {
      HEAP32[$AsyncCtx12 >> 2] = 235; //@line 7261
      HEAP32[$AsyncCtx12 + 4 >> 2] = $39; //@line 7263
      sp = STACKTOP; //@line 7264
      STACKTOP = sp; //@line 7265
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx12 | 0); //@line 7267
      break;
     }
    }
   } while (0);
   if ($39 | 0) {
    STACKTOP = sp; //@line 7274
    return;
   }
   $AsyncCtx53 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7276
   _mbed_assert_internal(13142, 12226, 715); //@line 7277
   if (___async) {
    HEAP32[$AsyncCtx53 >> 2] = 236; //@line 7280
    sp = STACKTOP; //@line 7281
    STACKTOP = sp; //@line 7282
    return;
   }
   _emscripten_free_async_context($AsyncCtx53 | 0); //@line 7284
   STACKTOP = sp; //@line 7285
   return;
  }
 case 1:
  {
   if (HEAP32[$1 + 4 >> 2] | 0) {
    STACKTOP = sp; //@line 7293
    return;
   }
   $51 = $0 + 1908 | 0; //@line 7295
   $52 = HEAP32[$51 >> 2] | 0; //@line 7296
   if (!$52) {
    STACKTOP = sp; //@line 7299
    return;
   }
   $56 = HEAP32[$0 + 2288 >> 2] | 0; //@line 7303
   $58 = HEAP32[$52 + 4 >> 2] | 0; //@line 7305
   $AsyncCtx15 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7306
   FUNCTION_TABLE_vii[$58 & 31]($3, $0 + 1896 | 0); //@line 7307
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 237; //@line 7310
    HEAP32[$AsyncCtx15 + 4 >> 2] = $51; //@line 7312
    HEAP32[$AsyncCtx15 + 8 >> 2] = $3; //@line 7314
    HEAP32[$AsyncCtx15 + 12 >> 2] = $1; //@line 7316
    HEAP32[$AsyncCtx15 + 16 >> 2] = $56; //@line 7318
    HEAP32[$AsyncCtx15 + 20 >> 2] = $3; //@line 7320
    sp = STACKTOP; //@line 7321
    STACKTOP = sp; //@line 7322
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7324
   $64 = $3 + 12 | 0; //@line 7326
   HEAP32[$64 >> 2] = HEAP32[$51 >> 2]; //@line 7327
   $66 = HEAP8[$1 + 12 >> 0] | 0; //@line 7329
   $68 = HEAP8[$1 + 13 >> 0] | 0; //@line 7331
   $AsyncCtx34 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7332
   $69 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($56, $3, $66, $68) | 0; //@line 7333
   if (___async) {
    HEAP32[$AsyncCtx34 >> 2] = 238; //@line 7336
    HEAP32[$AsyncCtx34 + 4 >> 2] = $64; //@line 7338
    HEAP32[$AsyncCtx34 + 8 >> 2] = $3; //@line 7340
    sp = STACKTOP; //@line 7341
    STACKTOP = sp; //@line 7342
    return;
   }
   _emscripten_free_async_context($AsyncCtx34 | 0); //@line 7344
   $72 = HEAP32[$64 >> 2] | 0; //@line 7345
   do {
    if ($72 | 0) {
     $75 = HEAP32[$72 + 8 >> 2] | 0; //@line 7350
     $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7351
     FUNCTION_TABLE_vi[$75 & 1023]($3); //@line 7352
     if (___async) {
      HEAP32[$AsyncCtx19 >> 2] = 239; //@line 7355
      HEAP32[$AsyncCtx19 + 4 >> 2] = $69; //@line 7357
      sp = STACKTOP; //@line 7358
      STACKTOP = sp; //@line 7359
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx19 | 0); //@line 7361
      break;
     }
    }
   } while (0);
   if ($69 | 0) {
    STACKTOP = sp; //@line 7368
    return;
   }
   $AsyncCtx49 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7370
   _mbed_assert_internal(13142, 12226, 737); //@line 7371
   if (___async) {
    HEAP32[$AsyncCtx49 >> 2] = 240; //@line 7374
    sp = STACKTOP; //@line 7375
    STACKTOP = sp; //@line 7376
    return;
   }
   _emscripten_free_async_context($AsyncCtx49 | 0); //@line 7378
   STACKTOP = sp; //@line 7379
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 7383
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 var $106 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $47 = 0, $49 = 0, $62 = 0, $64 = 0, $77 = 0, $79 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 3593
 HEAP32[$0 >> 2] = 560; //@line 3594
 $19 = $0 + 4 | 0; //@line 3595
 HEAP32[$19 >> 2] = 0; //@line 3596
 HEAP32[$19 + 4 >> 2] = 0; //@line 3596
 HEAP32[$19 + 8 >> 2] = 0; //@line 3596
 HEAP32[$19 + 12 >> 2] = 0; //@line 3596
 HEAP32[$19 + 16 >> 2] = 0; //@line 3596
 HEAP32[$19 + 20 >> 2] = 0; //@line 3596
 _gpio_init_out_ex($19, $4, 1); //@line 3597
 $20 = $0 + 28 | 0; //@line 3598
 HEAP32[$20 >> 2] = 0; //@line 3599
 HEAP32[$20 + 4 >> 2] = 0; //@line 3599
 HEAP32[$20 + 8 >> 2] = 0; //@line 3599
 HEAP32[$20 + 12 >> 2] = 0; //@line 3599
 HEAP32[$20 + 16 >> 2] = 0; //@line 3599
 HEAP32[$20 + 20 >> 2] = 0; //@line 3599
 _gpio_init_in($20, $5); //@line 3600
 __ZN4mbed11InterruptInC2E7PinName($0 + 52 | 0, $6); //@line 3602
 __ZN4mbed11InterruptInC2E7PinName($0 + 124 | 0, $7); //@line 3604
 __ZN4mbed11InterruptInC2E7PinName($0 + 196 | 0, $8); //@line 3606
 __ZN4mbed11InterruptInC2E7PinName($0 + 268 | 0, $9); //@line 3608
 __ZN4mbed11InterruptInC2E7PinName($0 + 340 | 0, $10); //@line 3610
 __ZN4mbed11InterruptInC2E7PinName($0 + 412 | 0, $11); //@line 3612
 $27 = $0 + 484 | 0; //@line 3613
 HEAP32[$27 >> 2] = 0; //@line 3614
 HEAP32[$27 + 4 >> 2] = 0; //@line 3614
 HEAP32[$27 + 8 >> 2] = 0; //@line 3614
 HEAP32[$27 + 12 >> 2] = 0; //@line 3614
 HEAP32[$27 + 16 >> 2] = 0; //@line 3614
 HEAP32[$27 + 20 >> 2] = 0; //@line 3614
 _gpio_init_out_ex($27, $12, 0); //@line 3615
 $28 = $0 + 508 | 0; //@line 3616
 HEAP32[$28 >> 2] = 0; //@line 3617
 HEAP32[$28 + 4 >> 2] = 0; //@line 3617
 HEAP32[$28 + 8 >> 2] = 0; //@line 3617
 HEAP32[$28 + 12 >> 2] = 0; //@line 3617
 HEAP32[$28 + 16 >> 2] = 0; //@line 3617
 HEAP32[$28 + 20 >> 2] = 0; //@line 3617
 _gpio_init_out_ex($28, $13, 0); //@line 3618
 $29 = $0 + 532 | 0; //@line 3619
 HEAP32[$29 >> 2] = 0; //@line 3620
 HEAP32[$29 + 4 >> 2] = 0; //@line 3620
 HEAP32[$29 + 8 >> 2] = 0; //@line 3620
 HEAP32[$29 + 12 >> 2] = 0; //@line 3620
 HEAP32[$29 + 16 >> 2] = 0; //@line 3620
 HEAP32[$29 + 20 >> 2] = 0; //@line 3620
 _gpio_init_out_ex($29, $14, 0); //@line 3621
 $30 = $0 + 556 | 0; //@line 3622
 HEAP32[$30 >> 2] = 0; //@line 3623
 HEAP32[$30 + 4 >> 2] = 0; //@line 3623
 HEAP32[$30 + 8 >> 2] = 0; //@line 3623
 HEAP32[$30 + 12 >> 2] = 0; //@line 3623
 HEAP32[$30 + 16 >> 2] = 0; //@line 3623
 HEAP32[$30 + 20 >> 2] = 0; //@line 3623
 _gpio_init_out_ex($30, $15, 0); //@line 3624
 $31 = $0 + 580 | 0; //@line 3625
 HEAP32[$31 >> 2] = 0; //@line 3626
 HEAP32[$31 + 4 >> 2] = 0; //@line 3626
 HEAP32[$31 + 8 >> 2] = 0; //@line 3626
 HEAP32[$31 + 12 >> 2] = 0; //@line 3626
 HEAP32[$31 + 16 >> 2] = 0; //@line 3626
 HEAP32[$31 + 20 >> 2] = 0; //@line 3626
 _gpio_init_inout($31, $16, 0, 0, 0); //@line 3627
 $32 = $0 + 604 | 0; //@line 3628
 HEAP32[$32 >> 2] = 0; //@line 3629
 HEAP32[$32 + 4 >> 2] = 0; //@line 3629
 HEAP32[$32 + 8 >> 2] = 0; //@line 3629
 HEAP32[$32 + 12 >> 2] = 0; //@line 3629
 HEAP32[$32 + 16 >> 2] = 0; //@line 3629
 HEAP32[$32 + 20 >> 2] = 0; //@line 3629
 _gpio_init_out($32, $17); //@line 3630
 $33 = $0 + 628 | 0; //@line 3631
 HEAP32[$33 >> 2] = 0; //@line 3632
 HEAP32[$33 + 4 >> 2] = 0; //@line 3632
 HEAP32[$33 + 8 >> 2] = 0; //@line 3632
 HEAP32[$33 + 12 >> 2] = 0; //@line 3632
 HEAP32[$33 + 16 >> 2] = 0; //@line 3632
 HEAP32[$33 + 20 >> 2] = 0; //@line 3632
 _gpio_init_out($33, $18); //@line 3633
 $34 = $0 + 1048 | 0; //@line 3634
 $AsyncCtx11 = _emscripten_alloc_async_context(52, sp) | 0; //@line 3635
 __ZN4mbed10TimerEventC2Ev($34); //@line 3636
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 153; //@line 3639
  HEAP32[$AsyncCtx11 + 4 >> 2] = $34; //@line 3641
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 3643
  HEAP32[$AsyncCtx11 + 12 >> 2] = $16; //@line 3645
  HEAP32[$AsyncCtx11 + 16 >> 2] = $17; //@line 3647
  HEAP32[$AsyncCtx11 + 20 >> 2] = $12; //@line 3649
  HEAP32[$AsyncCtx11 + 24 >> 2] = $13; //@line 3651
  HEAP32[$AsyncCtx11 + 28 >> 2] = $15; //@line 3653
  HEAP32[$AsyncCtx11 + 32 >> 2] = $14; //@line 3655
  HEAP32[$AsyncCtx11 + 36 >> 2] = $18; //@line 3657
  HEAP32[$AsyncCtx11 + 40 >> 2] = $10; //@line 3659
  HEAP32[$AsyncCtx11 + 44 >> 2] = $11; //@line 3661
  HEAP32[$AsyncCtx11 + 48 >> 2] = $33; //@line 3663
  sp = STACKTOP; //@line 3664
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3667
 $47 = $0 + 1088 | 0; //@line 3668
 HEAP32[$47 >> 2] = 0; //@line 3669
 HEAP32[$47 + 4 >> 2] = 0; //@line 3669
 HEAP32[$47 + 8 >> 2] = 0; //@line 3669
 HEAP32[$47 + 12 >> 2] = 0; //@line 3669
 HEAP8[$0 + 1104 >> 0] = 1; //@line 3671
 HEAP32[$34 >> 2] = 684; //@line 3672
 $49 = $0 + 1112 | 0; //@line 3673
 $AsyncCtx7 = _emscripten_alloc_async_context(52, sp) | 0; //@line 3674
 __ZN4mbed10TimerEventC2Ev($49); //@line 3675
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 154; //@line 3678
  HEAP32[$AsyncCtx7 + 4 >> 2] = $49; //@line 3680
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 3682
  HEAP32[$AsyncCtx7 + 12 >> 2] = $16; //@line 3684
  HEAP32[$AsyncCtx7 + 16 >> 2] = $17; //@line 3686
  HEAP32[$AsyncCtx7 + 20 >> 2] = $12; //@line 3688
  HEAP32[$AsyncCtx7 + 24 >> 2] = $13; //@line 3690
  HEAP32[$AsyncCtx7 + 28 >> 2] = $15; //@line 3692
  HEAP32[$AsyncCtx7 + 32 >> 2] = $14; //@line 3694
  HEAP32[$AsyncCtx7 + 36 >> 2] = $18; //@line 3696
  HEAP32[$AsyncCtx7 + 40 >> 2] = $10; //@line 3698
  HEAP32[$AsyncCtx7 + 44 >> 2] = $11; //@line 3700
  HEAP32[$AsyncCtx7 + 48 >> 2] = $33; //@line 3702
  sp = STACKTOP; //@line 3703
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 3706
 $62 = $0 + 1152 | 0; //@line 3707
 HEAP32[$62 >> 2] = 0; //@line 3708
 HEAP32[$62 + 4 >> 2] = 0; //@line 3708
 HEAP32[$62 + 8 >> 2] = 0; //@line 3708
 HEAP32[$62 + 12 >> 2] = 0; //@line 3708
 HEAP8[$0 + 1168 >> 0] = 1; //@line 3710
 HEAP32[$49 >> 2] = 684; //@line 3711
 $64 = $0 + 1176 | 0; //@line 3712
 $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 3713
 __ZN4mbed10TimerEventC2Ev($64); //@line 3714
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 155; //@line 3717
  HEAP32[$AsyncCtx3 + 4 >> 2] = $64; //@line 3719
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 3721
  HEAP32[$AsyncCtx3 + 12 >> 2] = $16; //@line 3723
  HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 3725
  HEAP32[$AsyncCtx3 + 20 >> 2] = $12; //@line 3727
  HEAP32[$AsyncCtx3 + 24 >> 2] = $13; //@line 3729
  HEAP32[$AsyncCtx3 + 28 >> 2] = $15; //@line 3731
  HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 3733
  HEAP32[$AsyncCtx3 + 36 >> 2] = $18; //@line 3735
  HEAP32[$AsyncCtx3 + 40 >> 2] = $10; //@line 3737
  HEAP32[$AsyncCtx3 + 44 >> 2] = $11; //@line 3739
  HEAP32[$AsyncCtx3 + 48 >> 2] = $33; //@line 3741
  sp = STACKTOP; //@line 3742
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3745
 $77 = $0 + 1216 | 0; //@line 3746
 HEAP32[$77 >> 2] = 0; //@line 3747
 HEAP32[$77 + 4 >> 2] = 0; //@line 3747
 HEAP32[$77 + 8 >> 2] = 0; //@line 3747
 HEAP32[$77 + 12 >> 2] = 0; //@line 3747
 HEAP8[$0 + 1232 >> 0] = 1; //@line 3749
 HEAP32[$64 >> 2] = 684; //@line 3750
 $79 = $0 + 1240 | 0; //@line 3751
 $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 3752
 __ZN4mbed10TimerEventC2Ev($79); //@line 3753
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 156; //@line 3756
  HEAP32[$AsyncCtx + 4 >> 2] = $79; //@line 3758
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 3760
  HEAP32[$AsyncCtx + 12 >> 2] = $16; //@line 3762
  HEAP32[$AsyncCtx + 16 >> 2] = $17; //@line 3764
  HEAP32[$AsyncCtx + 20 >> 2] = $12; //@line 3766
  HEAP32[$AsyncCtx + 24 >> 2] = $13; //@line 3768
  HEAP32[$AsyncCtx + 28 >> 2] = $15; //@line 3770
  HEAP32[$AsyncCtx + 32 >> 2] = $14; //@line 3772
  HEAP32[$AsyncCtx + 36 >> 2] = $18; //@line 3774
  HEAP32[$AsyncCtx + 40 >> 2] = $10; //@line 3776
  HEAP32[$AsyncCtx + 44 >> 2] = $11; //@line 3778
  HEAP32[$AsyncCtx + 48 >> 2] = $33; //@line 3780
  sp = STACKTOP; //@line 3781
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3784
 $92 = $0 + 1280 | 0; //@line 3785
 HEAP32[$92 >> 2] = 0; //@line 3786
 HEAP32[$92 + 4 >> 2] = 0; //@line 3786
 HEAP32[$92 + 8 >> 2] = 0; //@line 3786
 HEAP32[$92 + 12 >> 2] = 0; //@line 3786
 HEAP8[$0 + 1296 >> 0] = 1; //@line 3788
 HEAP32[$79 >> 2] = 684; //@line 3789
 HEAP32[$0 + 668 >> 2] = $16; //@line 3791
 HEAP32[$0 + 672 >> 2] = $17; //@line 3793
 HEAP32[$0 + 652 >> 2] = $12; //@line 3795
 HEAP32[$0 + 656 >> 2] = $13; //@line 3797
 HEAP32[$0 + 664 >> 2] = $15; //@line 3799
 HEAP32[$0 + 660 >> 2] = $14; //@line 3801
 HEAP32[$0 + 676 >> 2] = $18; //@line 3803
 HEAP32[$0 + 680 >> 2] = $10; //@line 3805
 HEAP32[$0 + 684 >> 2] = $11; //@line 3807
 HEAP32[$0 + 788 >> 2] = 0; //@line 3809
 if (($18 | 0) == -1) {
  $106 = _emscripten_asm_const_ii(7, $0 | 0) | 0; //@line 3812
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$33 >> 2] | 0, 1) | 0; //@line 3816
 $106 = _emscripten_asm_const_ii(7, $0 | 0) | 0; //@line 3817
 return;
}
function _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$04056 = 0, $$04255 = 0, $$044 = 0, $$04554 = 0, $$14160 = 0, $$14160$us = 0, $$14359 = 0, $$14359$us = 0, $$14658 = 0, $$14658$us = 0, $10 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $127 = 0, $13 = 0, $131 = 0, $135 = 0, $139 = 0, $14 = 0, $143 = 0, $147 = 0, $15 = 0, $151 = 0, $155 = 0, $159 = 0, $16 = 0, $163 = 0, $167 = 0, $17 = 0, $171 = 0, $175 = 0, $179 = 0, $18 = 0, $183 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 1165
 STACKTOP = STACKTOP + 16 | 0; //@line 1166
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1166
 $6 = sp; //@line 1167
 if ($2 & 15 | 0) {
  $$044 = -34; //@line 1171
  STACKTOP = sp; //@line 1172
  return $$044 | 0; //@line 1172
 }
 $10 = ($2 | 0) == 0; //@line 1175
 if (!$1) {
  if ($10) {
   $$044 = 0; //@line 1178
   STACKTOP = sp; //@line 1179
   return $$044 | 0; //@line 1179
  }
  $109 = $3 + 1 | 0; //@line 1181
  $110 = $3 + 2 | 0; //@line 1182
  $111 = $3 + 3 | 0; //@line 1183
  $112 = $3 + 4 | 0; //@line 1184
  $113 = $3 + 5 | 0; //@line 1185
  $114 = $3 + 6 | 0; //@line 1186
  $115 = $3 + 7 | 0; //@line 1187
  $116 = $3 + 8 | 0; //@line 1188
  $117 = $3 + 9 | 0; //@line 1189
  $118 = $3 + 10 | 0; //@line 1190
  $119 = $3 + 11 | 0; //@line 1191
  $120 = $3 + 12 | 0; //@line 1192
  $121 = $3 + 13 | 0; //@line 1193
  $122 = $3 + 14 | 0; //@line 1194
  $123 = $3 + 15 | 0; //@line 1195
  $$04056 = $5; //@line 1196
  $$04255 = $4; //@line 1196
  $$04554 = $2; //@line 1196
  while (1) {
   dest = $6; //@line 1198
   src = $$04255; //@line 1198
   stop = dest + 16 | 0; //@line 1198
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1198
    dest = dest + 1 | 0; //@line 1198
    src = src + 1 | 0; //@line 1198
   } while ((dest | 0) < (stop | 0));
   _mbedtls_internal_aes_decrypt($0, $$04255, $$04056) | 0; //@line 1199
   HEAP8[$$04056 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$04056 >> 0]; //@line 1203
   $127 = $$04056 + 1 | 0; //@line 1204
   HEAP8[$127 >> 0] = HEAP8[$109 >> 0] ^ HEAP8[$127 >> 0]; //@line 1208
   $131 = $$04056 + 2 | 0; //@line 1209
   HEAP8[$131 >> 0] = HEAP8[$110 >> 0] ^ HEAP8[$131 >> 0]; //@line 1213
   $135 = $$04056 + 3 | 0; //@line 1214
   HEAP8[$135 >> 0] = HEAP8[$111 >> 0] ^ HEAP8[$135 >> 0]; //@line 1218
   $139 = $$04056 + 4 | 0; //@line 1219
   HEAP8[$139 >> 0] = HEAP8[$112 >> 0] ^ HEAP8[$139 >> 0]; //@line 1223
   $143 = $$04056 + 5 | 0; //@line 1224
   HEAP8[$143 >> 0] = HEAP8[$113 >> 0] ^ HEAP8[$143 >> 0]; //@line 1228
   $147 = $$04056 + 6 | 0; //@line 1229
   HEAP8[$147 >> 0] = HEAP8[$114 >> 0] ^ HEAP8[$147 >> 0]; //@line 1233
   $151 = $$04056 + 7 | 0; //@line 1234
   HEAP8[$151 >> 0] = HEAP8[$115 >> 0] ^ HEAP8[$151 >> 0]; //@line 1238
   $155 = $$04056 + 8 | 0; //@line 1239
   HEAP8[$155 >> 0] = HEAP8[$116 >> 0] ^ HEAP8[$155 >> 0]; //@line 1243
   $159 = $$04056 + 9 | 0; //@line 1244
   HEAP8[$159 >> 0] = HEAP8[$117 >> 0] ^ HEAP8[$159 >> 0]; //@line 1248
   $163 = $$04056 + 10 | 0; //@line 1249
   HEAP8[$163 >> 0] = HEAP8[$118 >> 0] ^ HEAP8[$163 >> 0]; //@line 1253
   $167 = $$04056 + 11 | 0; //@line 1254
   HEAP8[$167 >> 0] = HEAP8[$119 >> 0] ^ HEAP8[$167 >> 0]; //@line 1258
   $171 = $$04056 + 12 | 0; //@line 1259
   HEAP8[$171 >> 0] = HEAP8[$120 >> 0] ^ HEAP8[$171 >> 0]; //@line 1263
   $175 = $$04056 + 13 | 0; //@line 1264
   HEAP8[$175 >> 0] = HEAP8[$121 >> 0] ^ HEAP8[$175 >> 0]; //@line 1268
   $179 = $$04056 + 14 | 0; //@line 1269
   HEAP8[$179 >> 0] = HEAP8[$122 >> 0] ^ HEAP8[$179 >> 0]; //@line 1273
   $183 = $$04056 + 15 | 0; //@line 1274
   HEAP8[$183 >> 0] = HEAP8[$123 >> 0] ^ HEAP8[$183 >> 0]; //@line 1278
   dest = $3; //@line 1279
   src = $6; //@line 1279
   stop = dest + 16 | 0; //@line 1279
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1279
    dest = dest + 1 | 0; //@line 1279
    src = src + 1 | 0; //@line 1279
   } while ((dest | 0) < (stop | 0));
   $$04554 = $$04554 + -16 | 0; //@line 1282
   if (!$$04554) {
    $$044 = 0; //@line 1285
    break;
   } else {
    $$04056 = $$04056 + 16 | 0; //@line 1288
    $$04255 = $$04255 + 16 | 0; //@line 1288
   }
  }
  STACKTOP = sp; //@line 1291
  return $$044 | 0; //@line 1291
 }
 if ($10) {
  $$044 = 0; //@line 1294
  STACKTOP = sp; //@line 1295
  return $$044 | 0; //@line 1295
 }
 $12 = $3 + 1 | 0; //@line 1298
 $13 = $3 + 2 | 0; //@line 1299
 $14 = $3 + 3 | 0; //@line 1300
 $15 = $3 + 4 | 0; //@line 1301
 $16 = $3 + 5 | 0; //@line 1302
 $17 = $3 + 6 | 0; //@line 1303
 $18 = $3 + 7 | 0; //@line 1304
 $19 = $3 + 8 | 0; //@line 1305
 $20 = $3 + 9 | 0; //@line 1306
 $21 = $3 + 10 | 0; //@line 1307
 $22 = $3 + 11 | 0; //@line 1308
 $23 = $3 + 12 | 0; //@line 1309
 $24 = $3 + 13 | 0; //@line 1310
 $25 = $3 + 14 | 0; //@line 1311
 $26 = $3 + 15 | 0; //@line 1312
 if (($1 | 0) == 1) {
  $$14160$us = $5; //@line 1314
  $$14359$us = $4; //@line 1314
  $$14658$us = $2; //@line 1314
  while (1) {
   HEAP8[$$14160$us >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359$us >> 0]; //@line 1319
   HEAP8[$$14160$us + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359$us + 1 >> 0]; //@line 1325
   HEAP8[$$14160$us + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359$us + 2 >> 0]; //@line 1331
   HEAP8[$$14160$us + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359$us + 3 >> 0]; //@line 1337
   HEAP8[$$14160$us + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359$us + 4 >> 0]; //@line 1343
   HEAP8[$$14160$us + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359$us + 5 >> 0]; //@line 1349
   HEAP8[$$14160$us + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359$us + 6 >> 0]; //@line 1355
   HEAP8[$$14160$us + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359$us + 7 >> 0]; //@line 1361
   HEAP8[$$14160$us + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359$us + 8 >> 0]; //@line 1367
   HEAP8[$$14160$us + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359$us + 9 >> 0]; //@line 1373
   HEAP8[$$14160$us + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359$us + 10 >> 0]; //@line 1379
   HEAP8[$$14160$us + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359$us + 11 >> 0]; //@line 1385
   HEAP8[$$14160$us + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359$us + 12 >> 0]; //@line 1391
   HEAP8[$$14160$us + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359$us + 13 >> 0]; //@line 1397
   HEAP8[$$14160$us + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359$us + 14 >> 0]; //@line 1403
   HEAP8[$$14160$us + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359$us + 15 >> 0]; //@line 1409
   _mbedtls_internal_aes_encrypt($0, $$14160$us, $$14160$us) | 0; //@line 1410
   dest = $3; //@line 1411
   src = $$14160$us; //@line 1411
   stop = dest + 16 | 0; //@line 1411
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1411
    dest = dest + 1 | 0; //@line 1411
    src = src + 1 | 0; //@line 1411
   } while ((dest | 0) < (stop | 0));
   $$14658$us = $$14658$us + -16 | 0; //@line 1414
   if (!$$14658$us) {
    $$044 = 0; //@line 1417
    break;
   } else {
    $$14160$us = $$14160$us + 16 | 0; //@line 1420
    $$14359$us = $$14359$us + 16 | 0; //@line 1420
   }
  }
  STACKTOP = sp; //@line 1423
  return $$044 | 0; //@line 1423
 } else {
  $$14160 = $5; //@line 1425
  $$14359 = $4; //@line 1425
  $$14658 = $2; //@line 1425
  while (1) {
   HEAP8[$$14160 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359 >> 0]; //@line 1430
   HEAP8[$$14160 + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359 + 1 >> 0]; //@line 1436
   HEAP8[$$14160 + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359 + 2 >> 0]; //@line 1442
   HEAP8[$$14160 + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359 + 3 >> 0]; //@line 1448
   HEAP8[$$14160 + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359 + 4 >> 0]; //@line 1454
   HEAP8[$$14160 + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359 + 5 >> 0]; //@line 1460
   HEAP8[$$14160 + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359 + 6 >> 0]; //@line 1466
   HEAP8[$$14160 + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359 + 7 >> 0]; //@line 1472
   HEAP8[$$14160 + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359 + 8 >> 0]; //@line 1478
   HEAP8[$$14160 + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359 + 9 >> 0]; //@line 1484
   HEAP8[$$14160 + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359 + 10 >> 0]; //@line 1490
   HEAP8[$$14160 + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359 + 11 >> 0]; //@line 1496
   HEAP8[$$14160 + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359 + 12 >> 0]; //@line 1502
   HEAP8[$$14160 + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359 + 13 >> 0]; //@line 1508
   HEAP8[$$14160 + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359 + 14 >> 0]; //@line 1514
   HEAP8[$$14160 + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359 + 15 >> 0]; //@line 1520
   _mbedtls_internal_aes_decrypt($0, $$14160, $$14160) | 0; //@line 1521
   dest = $3; //@line 1522
   src = $$14160; //@line 1522
   stop = dest + 16 | 0; //@line 1522
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1522
    dest = dest + 1 | 0; //@line 1522
    src = src + 1 | 0; //@line 1522
   } while ((dest | 0) < (stop | 0));
   $$14658 = $$14658 + -16 | 0; //@line 1525
   if (!$$14658) {
    $$044 = 0; //@line 1528
    break;
   } else {
    $$14160 = $$14160 + 16 | 0; //@line 1531
    $$14359 = $$14359 + 16 | 0; //@line 1531
   }
  }
  STACKTOP = sp; //@line 1534
  return $$044 | 0; //@line 1534
 }
 return 0; //@line 1536
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_87($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $$expand_i1_val = 0, $10 = 0, $100 = 0, $103 = 0, $105 = 0, $106 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $32 = 0, $36 = 0, $38 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $62 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 33820
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33822
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33824
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33826
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33828
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33830
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 33832
 $14 = HEAP8[$0 + 25 >> 0] & 1; //@line 33835
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 33837
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 33839
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 33841
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 33843
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 33845
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 33847
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 33849
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 33853
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 33857
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 33859
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($36) | 0) {
   _printf(13258, $28) | 0; //@line 33866
   _printf(13405, $32) | 0; //@line 33867
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(60) | 0; //@line 33868
   _putchar(10) | 0; //@line 33869
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 407; //@line 33872
    $44 = $ReallocAsyncCtx3 + 4 | 0; //@line 33873
    HEAP32[$44 >> 2] = $2; //@line 33874
    $45 = $ReallocAsyncCtx3 + 8 | 0; //@line 33875
    HEAP32[$45 >> 2] = $4; //@line 33876
    $46 = $ReallocAsyncCtx3 + 12 | 0; //@line 33877
    HEAP32[$46 >> 2] = $6; //@line 33878
    $47 = $ReallocAsyncCtx3 + 16 | 0; //@line 33879
    HEAP32[$47 >> 2] = $8; //@line 33880
    $48 = $ReallocAsyncCtx3 + 20 | 0; //@line 33881
    HEAP32[$48 >> 2] = $10; //@line 33882
    $49 = $ReallocAsyncCtx3 + 24 | 0; //@line 33883
    HEAP8[$49 >> 0] = $12; //@line 33884
    $50 = $ReallocAsyncCtx3 + 25 | 0; //@line 33885
    $$expand_i1_val = $14 & 1; //@line 33886
    HEAP8[$50 >> 0] = $$expand_i1_val; //@line 33887
    $51 = $ReallocAsyncCtx3 + 28 | 0; //@line 33888
    HEAP32[$51 >> 2] = $16; //@line 33889
    $52 = $ReallocAsyncCtx3 + 32 | 0; //@line 33890
    HEAP32[$52 >> 2] = $18; //@line 33891
    $53 = $ReallocAsyncCtx3 + 36 | 0; //@line 33892
    HEAP32[$53 >> 2] = $20; //@line 33893
    $54 = $ReallocAsyncCtx3 + 40 | 0; //@line 33894
    HEAP32[$54 >> 2] = $22; //@line 33895
    $55 = $ReallocAsyncCtx3 + 44 | 0; //@line 33896
    HEAP32[$55 >> 2] = $24; //@line 33897
    $56 = $ReallocAsyncCtx3 + 48 | 0; //@line 33898
    HEAP32[$56 >> 2] = $26; //@line 33899
    $57 = $ReallocAsyncCtx3 + 52 | 0; //@line 33900
    HEAP32[$57 >> 2] = $38; //@line 33901
    $58 = $ReallocAsyncCtx3 + 56 | 0; //@line 33902
    HEAP32[$58 >> 2] = $36; //@line 33903
    sp = STACKTOP; //@line 33904
    return;
   }
   ___async_unwind = 0; //@line 33907
   HEAP32[$ReallocAsyncCtx3 >> 2] = 407; //@line 33908
   $44 = $ReallocAsyncCtx3 + 4 | 0; //@line 33909
   HEAP32[$44 >> 2] = $2; //@line 33910
   $45 = $ReallocAsyncCtx3 + 8 | 0; //@line 33911
   HEAP32[$45 >> 2] = $4; //@line 33912
   $46 = $ReallocAsyncCtx3 + 12 | 0; //@line 33913
   HEAP32[$46 >> 2] = $6; //@line 33914
   $47 = $ReallocAsyncCtx3 + 16 | 0; //@line 33915
   HEAP32[$47 >> 2] = $8; //@line 33916
   $48 = $ReallocAsyncCtx3 + 20 | 0; //@line 33917
   HEAP32[$48 >> 2] = $10; //@line 33918
   $49 = $ReallocAsyncCtx3 + 24 | 0; //@line 33919
   HEAP8[$49 >> 0] = $12; //@line 33920
   $50 = $ReallocAsyncCtx3 + 25 | 0; //@line 33921
   $$expand_i1_val = $14 & 1; //@line 33922
   HEAP8[$50 >> 0] = $$expand_i1_val; //@line 33923
   $51 = $ReallocAsyncCtx3 + 28 | 0; //@line 33924
   HEAP32[$51 >> 2] = $16; //@line 33925
   $52 = $ReallocAsyncCtx3 + 32 | 0; //@line 33926
   HEAP32[$52 >> 2] = $18; //@line 33927
   $53 = $ReallocAsyncCtx3 + 36 | 0; //@line 33928
   HEAP32[$53 >> 2] = $20; //@line 33929
   $54 = $ReallocAsyncCtx3 + 40 | 0; //@line 33930
   HEAP32[$54 >> 2] = $22; //@line 33931
   $55 = $ReallocAsyncCtx3 + 44 | 0; //@line 33932
   HEAP32[$55 >> 2] = $24; //@line 33933
   $56 = $ReallocAsyncCtx3 + 48 | 0; //@line 33934
   HEAP32[$56 >> 2] = $26; //@line 33935
   $57 = $ReallocAsyncCtx3 + 52 | 0; //@line 33936
   HEAP32[$57 >> 2] = $38; //@line 33937
   $58 = $ReallocAsyncCtx3 + 56 | 0; //@line 33938
   HEAP32[$58 >> 2] = $36; //@line 33939
   sp = STACKTOP; //@line 33940
   return;
  }
 } else {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 1; //@line 33946
 }
 $61 = $20 & 255; //@line 33950
 $62 = $6 + 638 | 0; //@line 33951
 if (__Z15decrypt_payloadPKhtS0_jhjPh($16 + $18 | 0, $61, $22, $24, 1, $26, $62) | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 33957
 }
 if ($14) {
  $$3$off0204 = 6; //@line 33960
 } else {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 12 >> 2] = $62; //@line 33964
  HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 16 >> 1] = $61; //@line 33967
  HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 18 >> 0] = 1; //@line 33970
  $76 = (__ZN11LoRaMacMcps16get_confirmationEv($10) | 0) + 10 | 0; //@line 33974
  if ($12 & 32) {
   HEAP8[$76 >> 0] = 1; //@line 33976
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 28 >> 0] = 1; //@line 33979
   $79 = HEAP32[$8 >> 2] | 0; //@line 33980
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 33982
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($79, $6 + 1076 | 0); //@line 33983
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 410; //@line 33986
    $81 = $ReallocAsyncCtx23 + 4 | 0; //@line 33987
    HEAP32[$81 >> 2] = $6; //@line 33988
    $82 = $ReallocAsyncCtx23 + 8 | 0; //@line 33989
    HEAP32[$82 >> 2] = $8; //@line 33990
    $83 = $ReallocAsyncCtx23 + 12 | 0; //@line 33991
    HEAP32[$83 >> 2] = $2; //@line 33992
    $84 = $ReallocAsyncCtx23 + 16 | 0; //@line 33993
    HEAP32[$84 >> 2] = $4; //@line 33994
    sp = STACKTOP; //@line 33995
    return;
   }
   ___async_unwind = 0; //@line 33998
   HEAP32[$ReallocAsyncCtx23 >> 2] = 410; //@line 33999
   $81 = $ReallocAsyncCtx23 + 4 | 0; //@line 34000
   HEAP32[$81 >> 2] = $6; //@line 34001
   $82 = $ReallocAsyncCtx23 + 8 | 0; //@line 34002
   HEAP32[$82 >> 2] = $8; //@line 34003
   $83 = $ReallocAsyncCtx23 + 12 | 0; //@line 34004
   HEAP32[$83 >> 2] = $2; //@line 34005
   $84 = $ReallocAsyncCtx23 + 16 | 0; //@line 34006
   HEAP32[$84 >> 2] = $4; //@line 34007
   sp = STACKTOP; //@line 34008
   return;
  }
  HEAP8[$76 >> 0] = 0; //@line 34011
  if ((HEAPU8[$6 + 895 >> 0] | 0) > (HEAPU8[$6 + 894 >> 0] | 0)) {
   $90 = HEAP32[$8 >> 2] | 0; //@line 34018
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 34020
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($90, $6 + 1076 | 0); //@line 34021
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 411; //@line 34024
    $92 = $ReallocAsyncCtx22 + 4 | 0; //@line 34025
    HEAP32[$92 >> 2] = $6; //@line 34026
    $93 = $ReallocAsyncCtx22 + 8 | 0; //@line 34027
    HEAP32[$93 >> 2] = $8; //@line 34028
    $94 = $ReallocAsyncCtx22 + 12 | 0; //@line 34029
    HEAP32[$94 >> 2] = $2; //@line 34030
    $95 = $ReallocAsyncCtx22 + 16 | 0; //@line 34031
    HEAP32[$95 >> 2] = $4; //@line 34032
    sp = STACKTOP; //@line 34033
    return;
   }
   ___async_unwind = 0; //@line 34036
   HEAP32[$ReallocAsyncCtx22 >> 2] = 411; //@line 34037
   $92 = $ReallocAsyncCtx22 + 4 | 0; //@line 34038
   HEAP32[$92 >> 2] = $6; //@line 34039
   $93 = $ReallocAsyncCtx22 + 8 | 0; //@line 34040
   HEAP32[$93 >> 2] = $8; //@line 34041
   $94 = $ReallocAsyncCtx22 + 12 | 0; //@line 34042
   HEAP32[$94 >> 2] = $2; //@line 34043
   $95 = $ReallocAsyncCtx22 + 16 | 0; //@line 34044
   HEAP32[$95 >> 2] = $4; //@line 34045
   sp = STACKTOP; //@line 34046
   return;
  } else {
   $$3$off0204 = 2; //@line 34049
  }
 }
 $96 = $6 + 944 | 0; //@line 34052
 HEAP8[$96 >> 0] = $$3$off0204 | HEAP8[$96 >> 0] & -7; //@line 34056
 $100 = $6 + 944 | 0; //@line 34057
 HEAP8[$100 >> 0] = HEAP8[$100 >> 0] | 32; //@line 34060
 $103 = HEAP32[$8 >> 2] | 0; //@line 34061
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 34063
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($103, $6 + 996 | 0, 1); //@line 34064
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 34067
  $105 = $ReallocAsyncCtx17 + 4 | 0; //@line 34068
  HEAP32[$105 >> 2] = $2; //@line 34069
  $106 = $ReallocAsyncCtx17 + 8 | 0; //@line 34070
  HEAP32[$106 >> 2] = $4; //@line 34071
  sp = STACKTOP; //@line 34072
  return;
 }
 ___async_unwind = 0; //@line 34075
 HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 34076
 $105 = $ReallocAsyncCtx17 + 4 | 0; //@line 34077
 HEAP32[$105 >> 2] = $2; //@line 34078
 $106 = $ReallocAsyncCtx17 + 8 | 0; //@line 34079
 HEAP32[$106 >> 2] = $4; //@line 34080
 sp = STACKTOP; //@line 34081
 return;
}
function _initialize($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$037 = 0, $1 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $109 = 0, $115 = 0, $116 = 0, $117 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $140 = 0, $142 = 0, $148 = 0, $149 = 0, $150 = 0, $159 = 0, $160 = 0, $161 = 0, $163 = 0, $167 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $18 = 0, $25 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $52 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $70 = 0, $73 = 0, $77 = 0, $78 = 0, $85 = 0, $86 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4799
 $1 = $0 + 4 | 0; //@line 4800
 if (HEAP8[(HEAP32[$1 >> 2] | 0) + 56 >> 0] | 0) {
  return;
 }
 $7 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0; //@line 4809
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4810
 FUNCTION_TABLE_v[$7 & 15](); //@line 4811
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 702; //@line 4814
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4816
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 4818
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 4820
  sp = STACKTOP; //@line 4821
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4824
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 4827
 $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 4828
 $14 = FUNCTION_TABLE_i[$13 & 7]() | 0; //@line 4829
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 703; //@line 4832
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 4834
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 4836
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 4838
  sp = STACKTOP; //@line 4839
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4842
 $18 = HEAP32[$14 >> 2] | 0; //@line 4843
 do {
  if (!$18) {
   $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4847
   _mbed_assert_internal(14804, 14806, 41); //@line 4848
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 704; //@line 4851
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 4853
    HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 4855
    HEAP32[$AsyncCtx20 + 12 >> 2] = $0; //@line 4857
    HEAP32[$AsyncCtx20 + 16 >> 2] = $14; //@line 4859
    sp = STACKTOP; //@line 4860
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 4863
    $$0 = 1e6; //@line 4864
    break;
   }
  } else {
   $$0 = $18; //@line 4868
  }
 } while (0);
 $25 = HEAP32[$14 + 4 >> 2] | 0; //@line 4872
 do {
  if (($25 + -4 | 0) >>> 0 > 28) {
   $AsyncCtx16 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4877
   _mbed_assert_internal(14804, 14806, 47); //@line 4878
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 705; //@line 4881
    HEAP32[$AsyncCtx16 + 4 >> 2] = $$0; //@line 4883
    HEAP32[$AsyncCtx16 + 8 >> 2] = $1; //@line 4885
    HEAP32[$AsyncCtx16 + 12 >> 2] = $0; //@line 4887
    HEAP32[$AsyncCtx16 + 16 >> 2] = $0; //@line 4889
    sp = STACKTOP; //@line 4890
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 4893
    $$037 = 32; //@line 4894
    break;
   }
  } else {
   $$037 = $25; //@line 4898
  }
 } while (0);
 $32 = 7 << $$037 + -4; //@line 4902
 $33 = ___muldi3($32 | 0, 0, 1e6, 0) | 0; //@line 4903
 $34 = tempRet0; //@line 4904
 $35 = _i64Add($$0 | 0, 0, -1, -1) | 0; //@line 4905
 $37 = _i64Add($35 | 0, tempRet0 | 0, $33 | 0, $34 | 0) | 0; //@line 4907
 $39 = ___udivdi3($37 | 0, tempRet0 | 0, $$0 | 0, 0) | 0; //@line 4909
 $40 = tempRet0; //@line 4910
 $41 = HEAP32[$1 >> 2] | 0; //@line 4911
 HEAP32[$41 >> 2] = 0; //@line 4912
 HEAP32[$41 + 4 >> 2] = 0; //@line 4914
 $45 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 4917
 $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 4918
 $46 = FUNCTION_TABLE_i[$45 & 7]() | 0; //@line 4919
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 706; //@line 4922
  HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 4924
  HEAP32[$AsyncCtx6 + 8 >> 2] = $$0; //@line 4926
  HEAP32[$AsyncCtx6 + 12 >> 2] = $$037; //@line 4928
  HEAP32[$AsyncCtx6 + 16 >> 2] = $32; //@line 4930
  $52 = $AsyncCtx6 + 24 | 0; //@line 4932
  HEAP32[$52 >> 2] = $39; //@line 4934
  HEAP32[$52 + 4 >> 2] = $40; //@line 4937
  HEAP32[$AsyncCtx6 + 32 >> 2] = $0; //@line 4939
  HEAP32[$AsyncCtx6 + 36 >> 2] = $0; //@line 4941
  sp = STACKTOP; //@line 4942
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 4945
 $58 = HEAP32[$1 >> 2] | 0; //@line 4946
 $59 = $58 + 32 | 0; //@line 4947
 HEAP32[$59 >> 2] = $46; //@line 4948
 $60 = $58 + 40 | 0; //@line 4949
 $61 = $60; //@line 4950
 HEAP32[$61 >> 2] = 0; //@line 4952
 HEAP32[$61 + 4 >> 2] = 0; //@line 4955
 $65 = $58 + 8 | 0; //@line 4956
 HEAP32[$65 >> 2] = $$0; //@line 4957
 $66 = _bitshift64Shl(1, 0, $$037 | 0) | 0; //@line 4958
 $68 = _i64Add($66 | 0, tempRet0 | 0, -1, 0) | 0; //@line 4960
 $70 = $58 + 12 | 0; //@line 4962
 HEAP32[$70 >> 2] = $68; //@line 4963
 HEAP32[$58 + 16 >> 2] = $32; //@line 4965
 $73 = $58 + 24 | 0; //@line 4967
 HEAP32[$73 >> 2] = $39; //@line 4969
 HEAP32[$73 + 4 >> 2] = $40; //@line 4972
 $77 = $58 + 48 | 0; //@line 4973
 $78 = $77; //@line 4974
 HEAP32[$78 >> 2] = 0; //@line 4976
 HEAP32[$78 + 4 >> 2] = 0; //@line 4979
 HEAP8[$58 + 56 >> 0] = 1; //@line 4981
 $85 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 4984
 $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4985
 $86 = FUNCTION_TABLE_i[$85 & 7]() | 0; //@line 4986
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 707; //@line 4989
  HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 4991
  HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 4993
  HEAP32[$AsyncCtx9 + 12 >> 2] = $59; //@line 4995
  HEAP32[$AsyncCtx9 + 16 >> 2] = $70; //@line 4997
  HEAP32[$AsyncCtx9 + 20 >> 2] = $65; //@line 4999
  HEAP32[$AsyncCtx9 + 24 >> 2] = $60; //@line 5001
  HEAP32[$AsyncCtx9 + 28 >> 2] = $77; //@line 5003
  sp = STACKTOP; //@line 5004
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 5007
 if (($86 | 0) != (HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] | 0)) {
  $101 = $86 - (HEAP32[$59 >> 2] | 0) & HEAP32[$70 >> 2]; //@line 5016
  HEAP32[$59 >> 2] = $86; //@line 5017
  $102 = HEAP32[$65 >> 2] | 0; //@line 5018
  L30 : do {
   if (($102 | 0) < 1e6) {
    switch ($102 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 22; //@line 5027
      break L30;
     }
    }
    $103 = ___muldi3($101 | 0, 0, 1e6, 0) | 0; //@line 5031
    $105 = _bitshift64Lshr($103 | 0, tempRet0 | 0, 15) | 0; //@line 5033
    $106 = tempRet0; //@line 5034
    $109 = $60; //@line 5037
    $115 = _i64Add(HEAP32[$109 >> 2] | 0, HEAP32[$109 + 4 >> 2] | 0, $101 * 1e6 & 32704 | 0, 0) | 0; //@line 5043
    $116 = tempRet0; //@line 5044
    $117 = $60; //@line 5045
    HEAP32[$117 >> 2] = $115; //@line 5047
    HEAP32[$117 + 4 >> 2] = $116; //@line 5050
    if ($116 >>> 0 < 0 | ($116 | 0) == 0 & $115 >>> 0 < 32768) {
     $173 = $105; //@line 5057
     $174 = $106; //@line 5057
    } else {
     $126 = _i64Add($105 | 0, $106 | 0, 1, 0) | 0; //@line 5059
     $127 = tempRet0; //@line 5060
     $128 = _i64Add($115 | 0, $116 | 0, -32768, -1) | 0; //@line 5061
     $130 = $60; //@line 5063
     HEAP32[$130 >> 2] = $128; //@line 5065
     HEAP32[$130 + 4 >> 2] = tempRet0; //@line 5068
     $173 = $126; //@line 5069
     $174 = $127; //@line 5069
    }
   } else {
    switch ($102 | 0) {
    case 1e6:
     {
      $173 = $101; //@line 5074
      $174 = 0; //@line 5074
      break;
     }
    default:
     {
      label = 22; //@line 5078
     }
    }
   }
  } while (0);
  if ((label | 0) == 22) {
   $134 = ___muldi3($101 | 0, 0, 1e6, 0) | 0; //@line 5084
   $135 = tempRet0; //@line 5085
   $136 = ___udivdi3($134 | 0, $135 | 0, $102 | 0, 0) | 0; //@line 5086
   $137 = tempRet0; //@line 5087
   $138 = ___muldi3($136 | 0, $137 | 0, $102 | 0, 0) | 0; //@line 5088
   $140 = _i64Subtract($134 | 0, $135 | 0, $138 | 0, tempRet0 | 0) | 0; //@line 5090
   $142 = $60; //@line 5092
   $148 = _i64Add($140 | 0, tempRet0 | 0, HEAP32[$142 >> 2] | 0, HEAP32[$142 + 4 >> 2] | 0) | 0; //@line 5098
   $149 = tempRet0; //@line 5099
   $150 = $60; //@line 5100
   HEAP32[$150 >> 2] = $148; //@line 5102
   HEAP32[$150 + 4 >> 2] = $149; //@line 5105
   if ($149 >>> 0 < 0 | ($149 | 0) == 0 & $148 >>> 0 < $102 >>> 0) {
    $173 = $136; //@line 5112
    $174 = $137; //@line 5112
   } else {
    $159 = _i64Add($136 | 0, $137 | 0, 1, 0) | 0; //@line 5114
    $160 = tempRet0; //@line 5115
    $161 = _i64Subtract($148 | 0, $149 | 0, $102 | 0, 0) | 0; //@line 5116
    $163 = $60; //@line 5118
    HEAP32[$163 >> 2] = $161; //@line 5120
    HEAP32[$163 + 4 >> 2] = tempRet0; //@line 5123
    $173 = $159; //@line 5124
    $174 = $160; //@line 5124
   }
  }
  $167 = $77; //@line 5127
  $175 = _i64Add(HEAP32[$167 >> 2] | 0, HEAP32[$167 + 4 >> 2] | 0, $173 | 0, $174 | 0) | 0; //@line 5133
  $177 = $77; //@line 5135
  HEAP32[$177 >> 2] = $175; //@line 5137
  HEAP32[$177 + 4 >> 2] = tempRet0; //@line 5140
 }
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5142
 _schedule_interrupt($0); //@line 5143
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 708; //@line 5146
  sp = STACKTOP; //@line 5147
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 5150
 return;
}
function __ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$026$$026$i = 0, $$026$i = 0, $$028$i = 0, $$028$i4751 = 0, $$028$lcssa = 0, $$02862 = 0, $$029$be = 0, $$029$lcssa = 0, $$02961 = 0, $$1 = 0, $$127$i53 = 0, $$130$$$$i = 0, $$2$i = 0, $$2$i54 = 0, $$256 = 0, $$3 = 0, $$3$i52 = 0, $$lcssa76 = 0, $$lcssa77 = 0, $$pre = 0, $$sroa$034$0$lcssa = 0, $$sroa$034$058 = 0, $$sroa$1038$0$lcssa = 0, $$sroa$1038$060 = 0, $$sroa$636$0$lcssa = 0, $$sroa$636$059 = 0, $10 = 0, $107 = 0, $11 = 0, $112 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $121 = 0, $123 = 0, $127 = 0, $128 = 0, $13 = 0, $132 = 0, $17 = 0, $18 = 0, $19 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $42 = 0, $45 = 0, $52 = 0, $69 = 0, $7 = 0, $71 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $98 = 0, $indvars$iv = 0, $indvars$iv$i = 0, $indvars$iv$i31 = 0, $indvars$iv80 = 0, $wide$trip$count$i = 0, label = 0;
 $7 = HEAP8[$1 + 4 >> 0] | 0; //@line 24807
 L1 : do {
  if (!($7 << 24 >> 24)) {
   $$028$lcssa = 0; //@line 24811
   $$029$lcssa = 7; //@line 24811
   $$sroa$034$0$lcssa = 0; //@line 24811
   $$sroa$1038$0$lcssa = 0; //@line 24811
   $$sroa$636$0$lcssa = 0; //@line 24811
   $92 = 0; //@line 24811
  } else {
   $9 = HEAP32[$1 >> 2] | 0; //@line 24813
   $10 = $0 + 20 | 0; //@line 24814
   $11 = $0 + 112 | 0; //@line 24815
   $$02862 = 0; //@line 24816
   $$02961 = 7; //@line 24816
   $$lcssa76 = 0; //@line 24816
   $$sroa$034$058 = 0; //@line 24816
   $$sroa$1038$060 = 0; //@line 24816
   $$sroa$636$059 = 0; //@line 24816
   $13 = 0; //@line 24816
   while (1) {
    $12 = $9 + $13 | 0; //@line 24818
    if ((HEAP8[$12 >> 0] | 0) != 3) {
     $$028$lcssa = $$02862; //@line 24822
     $$029$lcssa = $$02961; //@line 24822
     $$sroa$034$0$lcssa = $$sroa$034$058; //@line 24822
     $$sroa$1038$0$lcssa = $$sroa$1038$060; //@line 24822
     $$sroa$636$0$lcssa = $$sroa$636$059; //@line 24822
     $92 = $$lcssa76; //@line 24822
     break L1;
    }
    $17 = HEAP8[$12 + 1 >> 0] | 0; //@line 24826
    $18 = $17 & 15; //@line 24827
    $19 = ($17 & 255) >>> 4; //@line 24828
    $27 = HEAPU8[$12 + 3 >> 0] << 8 | HEAPU8[$12 + 2 >> 0]; //@line 24836
    $28 = $27 & 65535; //@line 24837
    $30 = HEAP8[$12 + 4 >> 0] | 0; //@line 24839
    $32 = ($30 & 255) >>> 4; //@line 24841
    $34 = $32 & 7; //@line 24843
    $35 = $30 & 15; //@line 24844
    $36 = $13 + 5 | 0; //@line 24845
    $37 = $36 & 255; //@line 24846
    $$1 = $28 << 16 >> 16 == 0 & $34 << 24 >> 24 == 0 ? 6 : 7; //@line 24850
    L6 : do {
     switch ($32 & 7) {
     case 6:
     case 0:
      {
       $42 = HEAP8[$10 >> 0] | 0; //@line 24856
       if (!($42 << 24 >> 24)) {
        $$029$be = $$1; //@line 24859
        $$lcssa77 = $28; //@line 24859
       } else {
        $45 = $42 & 255; //@line 24862
        if ($34 << 24 >> 24 != 6) {
         $$256 = $$1; //@line 24864
         $indvars$iv = 0; //@line 24864
         while (1) {
          if (!($27 & 1 << ($indvars$iv & 15))) {
           $$3 = $$256; //@line 24871
          } else {
           $$3 = (HEAP32[(HEAP32[$11 >> 2] | 0) + ($indvars$iv * 12 | 0) >> 2] | 0) == 0 ? $$256 & -2 : $$256; //@line 24879
          }
          $indvars$iv = $indvars$iv + 1 | 0; //@line 24881
          if ($indvars$iv >>> 0 >= $45 >>> 0) {
           $$029$be = $$3; //@line 24886
           $$lcssa77 = $28; //@line 24886
           break L6;
          } else {
           $$256 = $$3; //@line 24884
          }
         }
        }
        $$pre = HEAP32[$11 >> 2] | 0; //@line 24891
        $52 = $28; //@line 24892
        $indvars$iv80 = 0; //@line 24892
        while (1) {
         if (!(HEAP32[$$pre + ($indvars$iv80 * 12 | 0) >> 2] | 0)) {
          $132 = $52; //@line 24898
         } else {
          $132 = (1 << ($indvars$iv80 & 15) | $52 & 65535) & 65535; //@line 24905
         }
         $indvars$iv80 = $indvars$iv80 + 1 | 0; //@line 24907
         if ($indvars$iv80 >>> 0 >= $45 >>> 0) {
          $$029$be = $$1; //@line 24912
          $$lcssa77 = $132; //@line 24912
          break;
         } else {
          $52 = $132; //@line 24910
         }
        }
       }
       break;
      }
     default:
      {
       $$029$be = 6; //@line 24920
       $$lcssa77 = $28; //@line 24920
      }
     }
    } while (0);
    if (($7 & 255) > ($37 & 255)) {
     $$02862 = $37; //@line 24927
     $$02961 = $$029$be; //@line 24927
     $$lcssa76 = $$lcssa77; //@line 24927
     $$sroa$034$058 = $35; //@line 24927
     $$sroa$1038$060 = $18; //@line 24927
     $$sroa$636$059 = $19; //@line 24927
     $13 = $36 & 255; //@line 24927
    } else {
     $$028$lcssa = $37; //@line 24929
     $$029$lcssa = $$029$be; //@line 24929
     $$sroa$034$0$lcssa = $35; //@line 24929
     $$sroa$1038$0$lcssa = $18; //@line 24929
     $$sroa$636$0$lcssa = $19; //@line 24929
     $92 = $$lcssa77; //@line 24929
     break L1;
    }
   }
  }
 } while (0);
 $69 = HEAP8[$1 + 7 >> 0] | 0; //@line 24938
 $71 = HEAP8[$1 + 8 >> 0] | 0; //@line 24940
 if (!(HEAP8[$1 + 6 >> 0] | 0)) {
  if ($$sroa$636$0$lcssa << 24 >> 24 == 15 & $$sroa$1038$0$lcssa << 24 >> 24 == 15) {
   $$026$i = $71; //@line 24949
   $$028$i = $69; //@line 24949
  } else {
   $$028$i4751 = $69; //@line 24951
   $$127$i53 = $71; //@line 24951
   $$2$i54 = HEAP8[$1 + 9 >> 0] | 0; //@line 24951
   $$3$i52 = 0; //@line 24951
   HEAP8[$2 >> 0] = $$028$i4751; //@line 24952
   HEAP8[$3 >> 0] = $$127$i53; //@line 24953
   HEAP8[$4 >> 0] = $$2$i54; //@line 24954
   HEAP8[$5 >> 0] = $$028$lcssa; //@line 24955
   return $$3$i52 | 0; //@line 24956
  }
 } else {
  $$026$i = $$sroa$1038$0$lcssa; //@line 24959
  $$028$i = $$sroa$636$0$lcssa; //@line 24959
 }
 if (!($$029$lcssa << 24 >> 24)) {
  $$028$i4751 = $$028$i; //@line 24963
  $$127$i53 = $$026$i; //@line 24963
  $$2$i54 = $$sroa$034$0$lcssa; //@line 24963
  $$3$i52 = 0; //@line 24963
  HEAP8[$2 >> 0] = $$028$i4751; //@line 24964
  HEAP8[$3 >> 0] = $$127$i53; //@line 24965
  HEAP8[$4 >> 0] = $$2$i54; //@line 24966
  HEAP8[$5 >> 0] = $$028$lcssa; //@line 24967
  return $$3$i52 | 0; //@line 24968
 }
 $83 = HEAP32[$0 + 112 >> 2] | 0; //@line 24975
 L30 : do {
  if ($$028$i << 24 >> 24 < (HEAP8[$0 + 26 >> 0] | 0) ? 1 : $$028$i << 24 >> 24 > (HEAP8[$0 + 27 >> 0] | 0)) {
   label = 24; //@line 24981
  } else {
   $88 = HEAP8[$0 + 20 >> 0] | 0; //@line 24984
   if (!($88 << 24 >> 24)) {
    label = 24; //@line 24987
   } else {
    $90 = $88 & 255; //@line 24989
    $91 = $92 & 65535; //@line 24990
    $indvars$iv$i31 = 0; //@line 24991
    while (1) {
     if (1 << ($indvars$iv$i31 & 15) & $91 | 0) {
      $98 = HEAP8[$83 + ($indvars$iv$i31 * 12 | 0) + 8 >> 0] | 0; //@line 24999
      if (!(($98 & 15) > $$028$i << 24 >> 24 ? 1 : ($98 & 255) >>> 4 << 24 >> 24 < $$028$i << 24 >> 24)) {
       $117 = $$029$lcssa; //@line 25006
       break L30;
      }
     }
     $indvars$iv$i31 = $indvars$iv$i31 + 1 | 0; //@line 25010
     if ($indvars$iv$i31 >>> 0 >= $90 >>> 0) {
      label = 24; //@line 25015
      break;
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 24) {
  $117 = $$029$lcssa & -3; //@line 25024
 }
 $107 = HEAP8[$0 + 22 >> 0] | 0; //@line 25027
 $112 = $$026$i << 24 >> 24 < $107 << 24 >> 24 ? 1 : $$026$i << 24 >> 24 > (HEAP8[$0 + 21 >> 0] | 0); //@line 25032
 $115 = ($107 & 255 | 0) > ($$026$i << 24 >> 24 | 0); //@line 25035
 $$130$$$$i = $112 ? $115 ? $117 : $117 & -5 : $117; //@line 25038
 $$$026$$026$i = $115 & $112 ? $107 : $$026$i; //@line 25040
 $119 = $$130$$$$i << 24 >> 24 == 7; //@line 25041
 $$2$i = $$sroa$034$0$lcssa << 24 >> 24 == 0 & $119 ? 1 : $$sroa$034$0$lcssa; //@line 25044
 if (!$119) {
  $$028$i4751 = $$028$i; //@line 25046
  $$127$i53 = $$$026$$026$i; //@line 25046
  $$2$i54 = $$2$i; //@line 25046
  $$3$i52 = $$130$$$$i; //@line 25046
  HEAP8[$2 >> 0] = $$028$i4751; //@line 25047
  HEAP8[$3 >> 0] = $$127$i53; //@line 25048
  HEAP8[$4 >> 0] = $$2$i54; //@line 25049
  HEAP8[$5 >> 0] = $$028$lcssa; //@line 25050
  return $$3$i52 | 0; //@line 25051
 }
 $121 = $0 + 120 | 0; //@line 25053
 $123 = $0 + 128 | 0; //@line 25055
 _memset(HEAP32[$121 >> 2] | 0, 0, HEAPU8[$123 >> 0] << 1 | 0) | 0; //@line 25059
 $127 = HEAP32[$121 >> 2] | 0; //@line 25060
 $128 = HEAP8[$123 >> 0] | 0; //@line 25061
 if (!(($127 | 0) != 0 & $128 << 24 >> 24 != 0)) {
  $$028$i4751 = $$028$i; //@line 25066
  $$127$i53 = $$$026$$026$i; //@line 25066
  $$2$i54 = $$2$i; //@line 25066
  $$3$i52 = 7; //@line 25066
  HEAP8[$2 >> 0] = $$028$i4751; //@line 25067
  HEAP8[$3 >> 0] = $$127$i53; //@line 25068
  HEAP8[$4 >> 0] = $$2$i54; //@line 25069
  HEAP8[$5 >> 0] = $$028$lcssa; //@line 25070
  return $$3$i52 | 0; //@line 25071
 }
 $wide$trip$count$i = $128 & 255; //@line 25073
 $indvars$iv$i = 0; //@line 25074
 do {
  HEAP16[$127 + ($indvars$iv$i << 1) >> 1] = $92; //@line 25077
  $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 25078
 } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
 $$028$i4751 = $$028$i; //@line 25081
 $$127$i53 = $$$026$$026$i; //@line 25081
 $$2$i54 = $$2$i; //@line 25081
 $$3$i52 = 7; //@line 25081
 HEAP8[$2 >> 0] = $$028$i4751; //@line 25087
 HEAP8[$3 >> 0] = $$127$i53; //@line 25088
 HEAP8[$4 >> 0] = $$2$i54; //@line 25089
 HEAP8[$5 >> 0] = $$028$lcssa; //@line 25090
 return $$3$i52 | 0; //@line 25091
}
function _schedule_interrupt($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $1 = 0, $10 = 0, $104 = 0, $107 = 0, $109 = 0, $11 = 0, $112 = 0, $113 = 0, $115 = 0, $118 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $144 = 0, $146 = 0, $148 = 0, $151 = 0, $153 = 0, $160 = 0, $161 = 0, $164 = 0, $166 = 0, $168 = 0, $174 = 0, $175 = 0, $179 = 0, $187 = 0, $19 = 0, $195 = 0, $198 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $35 = 0, $36 = 0, $37 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $69 = 0, $70 = 0, $71 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $88 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5167
 $1 = $0 + 4 | 0; //@line 5168
 $2 = HEAP32[$1 >> 2] | 0; //@line 5169
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5172
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5173
 $6 = FUNCTION_TABLE_i[$5 & 7]() | 0; //@line 5174
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 709; //@line 5177
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5179
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 5181
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 5183
  sp = STACKTOP; //@line 5184
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5187
 $10 = HEAP32[$1 >> 2] | 0; //@line 5188
 $11 = $10 + 32 | 0; //@line 5189
 if (($6 | 0) != (HEAP32[$11 >> 2] | 0)) {
  $14 = $2 + 32 | 0; //@line 5193
  $19 = $6 - (HEAP32[$14 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 5198
  HEAP32[$14 >> 2] = $6; //@line 5199
  $21 = HEAP32[$2 + 8 >> 2] | 0; //@line 5201
  L6 : do {
   if (($21 | 0) < 1e6) {
    switch ($21 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 7; //@line 5210
      break L6;
     }
    }
    $22 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5214
    $24 = _bitshift64Lshr($22 | 0, tempRet0 | 0, 15) | 0; //@line 5216
    $25 = tempRet0; //@line 5217
    $28 = $2 + 40 | 0; //@line 5220
    $29 = $28; //@line 5221
    $35 = _i64Add(HEAP32[$29 >> 2] | 0, HEAP32[$29 + 4 >> 2] | 0, $19 * 1e6 & 32704 | 0, 0) | 0; //@line 5227
    $36 = tempRet0; //@line 5228
    $37 = $28; //@line 5229
    HEAP32[$37 >> 2] = $35; //@line 5231
    HEAP32[$37 + 4 >> 2] = $36; //@line 5234
    if ($36 >>> 0 < 0 | ($36 | 0) == 0 & $35 >>> 0 < 32768) {
     $95 = $24; //@line 5241
     $96 = $25; //@line 5241
    } else {
     $46 = _i64Add($24 | 0, $25 | 0, 1, 0) | 0; //@line 5243
     $47 = tempRet0; //@line 5244
     $48 = _i64Add($35 | 0, $36 | 0, -32768, -1) | 0; //@line 5245
     $50 = $28; //@line 5247
     HEAP32[$50 >> 2] = $48; //@line 5249
     HEAP32[$50 + 4 >> 2] = tempRet0; //@line 5252
     $95 = $46; //@line 5253
     $96 = $47; //@line 5253
    }
   } else {
    switch ($21 | 0) {
    case 1e6:
     {
      $95 = $19; //@line 5258
      $96 = 0; //@line 5258
      break;
     }
    default:
     {
      label = 7; //@line 5262
     }
    }
   }
  } while (0);
  if ((label | 0) == 7) {
   $54 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5268
   $55 = tempRet0; //@line 5269
   $56 = ___udivdi3($54 | 0, $55 | 0, $21 | 0, 0) | 0; //@line 5270
   $57 = tempRet0; //@line 5271
   $58 = ___muldi3($56 | 0, $57 | 0, $21 | 0, 0) | 0; //@line 5272
   $60 = _i64Subtract($54 | 0, $55 | 0, $58 | 0, tempRet0 | 0) | 0; //@line 5274
   $62 = $2 + 40 | 0; //@line 5276
   $63 = $62; //@line 5277
   $69 = _i64Add($60 | 0, tempRet0 | 0, HEAP32[$63 >> 2] | 0, HEAP32[$63 + 4 >> 2] | 0) | 0; //@line 5283
   $70 = tempRet0; //@line 5284
   $71 = $62; //@line 5285
   HEAP32[$71 >> 2] = $69; //@line 5287
   HEAP32[$71 + 4 >> 2] = $70; //@line 5290
   if ($70 >>> 0 < 0 | ($70 | 0) == 0 & $69 >>> 0 < $21 >>> 0) {
    $95 = $56; //@line 5297
    $96 = $57; //@line 5297
   } else {
    $80 = _i64Add($56 | 0, $57 | 0, 1, 0) | 0; //@line 5299
    $81 = tempRet0; //@line 5300
    $82 = _i64Subtract($69 | 0, $70 | 0, $21 | 0, 0) | 0; //@line 5301
    $84 = $62; //@line 5303
    HEAP32[$84 >> 2] = $82; //@line 5305
    HEAP32[$84 + 4 >> 2] = tempRet0; //@line 5308
    $95 = $80; //@line 5309
    $96 = $81; //@line 5309
   }
  }
  $88 = $2 + 48 | 0; //@line 5312
  $89 = $88; //@line 5313
  $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 5319
  $99 = $88; //@line 5321
  HEAP32[$99 >> 2] = $97; //@line 5323
  HEAP32[$99 + 4 >> 2] = tempRet0; //@line 5326
 }
 $104 = HEAP32[$10 + 4 >> 2] | 0; //@line 5329
 if (!$104) {
  $195 = (HEAP32[$2 + 16 >> 2] | 0) + (HEAP32[$2 + 32 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 5339
  $198 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 5342
  $AsyncCtx22 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5343
  FUNCTION_TABLE_vi[$198 & 1023]($195); //@line 5344
  if (___async) {
   HEAP32[$AsyncCtx22 >> 2] = 715; //@line 5347
   sp = STACKTOP; //@line 5348
   return;
  } else {
   _emscripten_free_async_context($AsyncCtx22 | 0); //@line 5351
   return;
  }
 }
 $107 = $10 + 48 | 0; //@line 5356
 $109 = HEAP32[$107 >> 2] | 0; //@line 5358
 $112 = HEAP32[$107 + 4 >> 2] | 0; //@line 5361
 $113 = $104; //@line 5362
 $115 = HEAP32[$113 >> 2] | 0; //@line 5364
 $118 = HEAP32[$113 + 4 >> 2] | 0; //@line 5367
 if (!($118 >>> 0 > $112 >>> 0 | ($118 | 0) == ($112 | 0) & $115 >>> 0 > $109 >>> 0)) {
  $126 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 5376
  $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5377
  FUNCTION_TABLE_v[$126 & 15](); //@line 5378
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 710; //@line 5381
   sp = STACKTOP; //@line 5382
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5385
  return;
 }
 $127 = _i64Subtract($115 | 0, $118 | 0, $109 | 0, $112 | 0) | 0; //@line 5388
 $128 = tempRet0; //@line 5389
 $130 = HEAP32[$10 + 16 >> 2] | 0; //@line 5391
 $132 = $10 + 24 | 0; //@line 5393
 $137 = HEAP32[$132 + 4 >> 2] | 0; //@line 5398
 L29 : do {
  if ($128 >>> 0 > $137 >>> 0 | (($128 | 0) == ($137 | 0) ? $127 >>> 0 > (HEAP32[$132 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $130; //@line 5406
  } else {
   $144 = HEAP32[$10 + 8 >> 2] | 0; //@line 5409
   L31 : do {
    if (($144 | 0) < 1e6) {
     switch ($144 | 0) {
     case 32768:
      {
       break;
      }
     default:
      {
       break L31;
      }
     }
     $146 = _bitshift64Shl($127 | 0, $128 | 0, 15) | 0; //@line 5421
     $148 = ___udivdi3($146 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 5423
     $$0$i = $130 >>> 0 < $148 >>> 0 ? $130 : $148; //@line 5427
     break L29;
    } else {
     switch ($144 | 0) {
     case 1e6:
      {
       break;
      }
     default:
      {
       break L31;
      }
     }
     $$0$i = $130 >>> 0 < $127 >>> 0 ? $130 : $127; //@line 5440
     break L29;
    }
   } while (0);
   $151 = ___muldi3($127 | 0, $128 | 0, $144 | 0, 0) | 0; //@line 5444
   $153 = ___udivdi3($151 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 5446
   $$0$i = $130 >>> 0 < $153 >>> 0 ? $130 : $153; //@line 5450
  }
 } while (0);
 $160 = (HEAP32[$11 >> 2] | 0) + $$0$i & HEAP32[$10 + 12 >> 2]; //@line 5457
 $161 = $2 + 32 | 0; //@line 5458
 $164 = HEAP32[$0 >> 2] | 0; //@line 5461
 if (($160 | 0) == (HEAP32[$161 >> 2] | 0)) {
  $166 = HEAP32[$164 + 20 >> 2] | 0; //@line 5464
  $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5465
  FUNCTION_TABLE_v[$166 & 15](); //@line 5466
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 711; //@line 5469
   sp = STACKTOP; //@line 5470
   return;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5473
  return;
 }
 $168 = HEAP32[$164 + 16 >> 2] | 0; //@line 5477
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5478
 FUNCTION_TABLE_vi[$168 & 1023]($160); //@line 5479
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 712; //@line 5482
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 5484
  HEAP32[$AsyncCtx11 + 8 >> 2] = $161; //@line 5486
  HEAP32[$AsyncCtx11 + 12 >> 2] = $160; //@line 5488
  sp = STACKTOP; //@line 5489
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5492
 $174 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5495
 $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5496
 $175 = FUNCTION_TABLE_i[$174 & 7]() | 0; //@line 5497
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 713; //@line 5500
  HEAP32[$AsyncCtx14 + 4 >> 2] = $161; //@line 5502
  HEAP32[$AsyncCtx14 + 8 >> 2] = $160; //@line 5504
  HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 5506
  sp = STACKTOP; //@line 5507
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 5510
 $179 = HEAP32[$161 >> 2] | 0; //@line 5511
 if ($160 >>> 0 > $179 >>> 0) {
  if (!($175 >>> 0 >= $160 >>> 0 | $175 >>> 0 < $179 >>> 0)) {
   return;
  }
 } else {
  if (!($175 >>> 0 >= $160 >>> 0 & $175 >>> 0 < $179 >>> 0)) {
   return;
  }
 }
 $187 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 5530
 $AsyncCtx18 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5531
 FUNCTION_TABLE_v[$187 & 15](); //@line 5532
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 714; //@line 5535
  sp = STACKTOP; //@line 5536
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 5539
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$038 = 0, $$040 = 0, $101 = 0, $104 = 0, $11 = 0, $112 = 0, $115 = 0, $118 = 0, $122 = 0, $125 = 0, $136 = 0, $139 = 0, $142 = 0, $146 = 0, $149 = 0, $18 = 0, $21 = 0, $22 = 0, $29 = 0, $30 = 0, $33 = 0, $4 = 0, $45 = 0, $47 = 0, $51 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $65 = 0, $7 = 0, $76 = 0, $79 = 0, $8 = 0, $93 = 0, $96 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 24099
 $4 = HEAP8[$1 + 1 >> 0] | 0; //@line 24101
 $6 = HEAP32[$1 + 4 >> 2] | 0; //@line 24103
 $7 = $0 + 4 | 0; //@line 24104
 $8 = HEAP32[$7 >> 2] | 0; //@line 24105
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 72 >> 2] | 0; //@line 24108
 $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 24109
 FUNCTION_TABLE_vi[$11 & 1023]($8); //@line 24110
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 622; //@line 24113
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 24115
  HEAP8[$AsyncCtx + 8 >> 0] = $4; //@line 24117
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 24119
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 24121
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 24123
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 24125
  sp = STACKTOP; //@line 24126
  return 0; //@line 24127
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 24129
 $18 = HEAP32[$7 >> 2] | 0; //@line 24130
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 40 >> 2] | 0; //@line 24133
 $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 24134
 $22 = FUNCTION_TABLE_ii[$21 & 15]($18) | 0; //@line 24135
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 623; //@line 24138
  HEAP32[$AsyncCtx2 + 4 >> 2] = $7; //@line 24140
  HEAP8[$AsyncCtx2 + 8 >> 0] = $4; //@line 24142
  HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 24144
  HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 24146
  HEAP32[$AsyncCtx2 + 20 >> 2] = $6; //@line 24148
  HEAP32[$AsyncCtx2 + 24 >> 2] = $2; //@line 24150
  sp = STACKTOP; //@line 24151
  return 0; //@line 24152
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 24154
 $29 = $22 << 24 >> 24 == 0; //@line 24155
 $30 = HEAP32[$7 >> 2] | 0; //@line 24156
 $33 = HEAP32[(HEAP32[$30 >> 2] | 0) + 76 >> 2] | 0; //@line 24159
 $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 24160
 FUNCTION_TABLE_vi[$33 & 1023]($30); //@line 24161
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 624; //@line 24164
  HEAP32[$AsyncCtx5 + 4 >> 2] = $7; //@line 24166
  HEAP8[$AsyncCtx5 + 8 >> 0] = $4; //@line 24168
  HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 24170
  HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 24172
  HEAP32[$AsyncCtx5 + 20 >> 2] = $6; //@line 24174
  HEAP32[$AsyncCtx5 + 24 >> 2] = $2; //@line 24176
  HEAP8[$AsyncCtx5 + 28 >> 0] = $29 & 1; //@line 24179
  sp = STACKTOP; //@line 24180
  return 0; //@line 24181
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 24183
 if (!$29) {
  $$0 = 0; //@line 24185
  return $$0 | 0; //@line 24186
 }
 if (!(HEAP32[$1 + 20 >> 2] | 0)) {
  $45 = HEAP32[$0 + 112 >> 2] | 0; //@line 24193
  $47 = HEAPU8[$1 >> 0] | 0; //@line 24195
  $51 = HEAP32[$45 + ($47 * 12 | 0) + 4 >> 2] | 0; //@line 24199
  $$040 = ($51 | 0) == 0 ? HEAP32[$45 + ($47 * 12 | 0) >> 2] | 0 : $51; //@line 24202
 } else {
  $$040 = $6; //@line 24204
 }
 $56 = HEAP32[$0 + 96 >> 2] | 0; //@line 24209
 $58 = HEAP32[$0 + 104 >> 2] | 0; //@line 24211
 $59 = $4 & 255; //@line 24212
 $61 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $59 >> 0] | 0; //@line 24214
 $62 = HEAP32[$7 >> 2] | 0; //@line 24215
 $65 = HEAP32[(HEAP32[$62 >> 2] | 0) + 72 >> 2] | 0; //@line 24218
 $AsyncCtx9 = _emscripten_alloc_async_context(44, sp) | 0; //@line 24219
 FUNCTION_TABLE_vi[$65 & 1023]($62); //@line 24220
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 625; //@line 24223
  HEAP32[$AsyncCtx9 + 4 >> 2] = $7; //@line 24225
  HEAP32[$AsyncCtx9 + 8 >> 2] = $$040; //@line 24227
  HEAP8[$AsyncCtx9 + 12 >> 0] = $4; //@line 24229
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 24231
  HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 24233
  HEAP8[$AsyncCtx9 + 24 >> 0] = $61; //@line 24235
  HEAP32[$AsyncCtx9 + 28 >> 2] = $56; //@line 24237
  HEAP32[$AsyncCtx9 + 32 >> 2] = $58; //@line 24239
  HEAP32[$AsyncCtx9 + 36 >> 2] = $59; //@line 24241
  HEAP32[$AsyncCtx9 + 40 >> 2] = $2; //@line 24243
  sp = STACKTOP; //@line 24244
  return 0; //@line 24245
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 24247
 $76 = HEAP32[$7 >> 2] | 0; //@line 24248
 $79 = HEAP32[(HEAP32[$76 >> 2] | 0) + 32 >> 2] | 0; //@line 24251
 $AsyncCtx12 = _emscripten_alloc_async_context(40, sp) | 0; //@line 24252
 FUNCTION_TABLE_vii[$79 & 31]($76, $$040); //@line 24253
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 626; //@line 24256
  HEAP8[$AsyncCtx12 + 4 >> 0] = $4; //@line 24258
  HEAP32[$AsyncCtx12 + 8 >> 2] = $0; //@line 24260
  HEAP32[$AsyncCtx12 + 12 >> 2] = $7; //@line 24262
  HEAP32[$AsyncCtx12 + 16 >> 2] = $1; //@line 24264
  HEAP8[$AsyncCtx12 + 20 >> 0] = $61; //@line 24266
  HEAP32[$AsyncCtx12 + 24 >> 2] = $56; //@line 24268
  HEAP32[$AsyncCtx12 + 28 >> 2] = $58; //@line 24270
  HEAP32[$AsyncCtx12 + 32 >> 2] = $59; //@line 24272
  HEAP32[$AsyncCtx12 + 36 >> 2] = $2; //@line 24274
  sp = STACKTOP; //@line 24275
  return 0; //@line 24276
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 24278
 do {
  if ($4 << 24 >> 24 == 7) {
   if (!(HEAP8[$0 + 14 >> 0] | 0)) {
    label = 19; //@line 24286
   } else {
    $93 = HEAP32[$7 >> 2] | 0; //@line 24288
    $96 = HEAP32[(HEAP32[$93 >> 2] | 0) + 16 >> 2] | 0; //@line 24291
    $101 = HEAP32[$1 + 8 >> 2] & 65535; //@line 24296
    $104 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 24299
    $AsyncCtx16 = _emscripten_alloc_async_context(32, sp) | 0; //@line 24300
    FUNCTION_TABLE_viiiiiiiiiiiiiii[$96 & 1]($93, 0, 5e4, ($61 & 255) * 1e3 | 0, 0, 83333, 5, $101, 0, 0, 1, 0, 0, 0, $104); //@line 24301
    if (___async) {
     HEAP32[$AsyncCtx16 >> 2] = 627; //@line 24304
     HEAP32[$AsyncCtx16 + 4 >> 2] = $1; //@line 24306
     HEAP32[$AsyncCtx16 + 8 >> 2] = $56; //@line 24308
     HEAP32[$AsyncCtx16 + 12 >> 2] = $58; //@line 24310
     HEAP32[$AsyncCtx16 + 16 >> 2] = $59; //@line 24312
     HEAP32[$AsyncCtx16 + 20 >> 2] = $7; //@line 24314
     HEAP8[$AsyncCtx16 + 24 >> 0] = $61; //@line 24316
     HEAP32[$AsyncCtx16 + 28 >> 2] = $2; //@line 24318
     sp = STACKTOP; //@line 24319
     return 0; //@line 24320
    } else {
     _emscripten_free_async_context($AsyncCtx16 | 0); //@line 24322
     $$038 = 0; //@line 24323
     break;
    }
   }
  } else {
   label = 19; //@line 24328
  }
 } while (0);
 do {
  if ((label | 0) == 19) {
   $112 = HEAP32[$7 >> 2] | 0; //@line 24333
   $115 = HEAP32[(HEAP32[$112 >> 2] | 0) + 16 >> 2] | 0; //@line 24336
   $118 = HEAPU8[$1 + 2 >> 0] | 0; //@line 24339
   $122 = HEAP32[$1 + 8 >> 2] & 65535; //@line 24343
   $125 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 24346
   $AsyncCtx20 = _emscripten_alloc_async_context(32, sp) | 0; //@line 24347
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$115 & 1]($112, 1, $118, $61 & 255, 1, 0, 8, $122, 0, 0, 0, 0, 0, 1, $125); //@line 24348
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 628; //@line 24351
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 24353
    HEAP32[$AsyncCtx20 + 8 >> 2] = $56; //@line 24355
    HEAP32[$AsyncCtx20 + 12 >> 2] = $58; //@line 24357
    HEAP32[$AsyncCtx20 + 16 >> 2] = $59; //@line 24359
    HEAP32[$AsyncCtx20 + 20 >> 2] = $7; //@line 24361
    HEAP8[$AsyncCtx20 + 24 >> 0] = $61; //@line 24363
    HEAP32[$AsyncCtx20 + 28 >> 2] = $2; //@line 24365
    sp = STACKTOP; //@line 24366
    return 0; //@line 24367
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 24369
    $$038 = 1; //@line 24370
    break;
   }
  }
 } while (0);
 $136 = HEAP32[$7 >> 2] | 0; //@line 24381
 $139 = HEAP32[(HEAP32[$136 >> 2] | 0) + 44 >> 2] | 0; //@line 24384
 $142 = (HEAPU8[((HEAP8[$1 + 17 >> 0] | 0) == 0 ? $56 : $58) + $59 >> 0] | 0) + 13 & 255; //@line 24387
 $AsyncCtx24 = _emscripten_alloc_async_context(16, sp) | 0; //@line 24388
 FUNCTION_TABLE_viii[$139 & 7]($136, $$038, $142); //@line 24389
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 629; //@line 24392
  HEAP32[$AsyncCtx24 + 4 >> 2] = $7; //@line 24394
  HEAP8[$AsyncCtx24 + 8 >> 0] = $61; //@line 24396
  HEAP32[$AsyncCtx24 + 12 >> 2] = $2; //@line 24398
  sp = STACKTOP; //@line 24399
  return 0; //@line 24400
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 24402
 $146 = HEAP32[$7 >> 2] | 0; //@line 24403
 $149 = HEAP32[(HEAP32[$146 >> 2] | 0) + 76 >> 2] | 0; //@line 24406
 $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 24407
 FUNCTION_TABLE_vi[$149 & 1023]($146); //@line 24408
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 630; //@line 24411
  HEAP8[$AsyncCtx27 + 4 >> 0] = $61; //@line 24413
  HEAP32[$AsyncCtx27 + 8 >> 2] = $2; //@line 24415
  sp = STACKTOP; //@line 24416
  return 0; //@line 24417
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 24419
 HEAP8[$2 >> 0] = $61; //@line 24420
 $$0 = 1; //@line 24421
 return $$0 | 0; //@line 24422
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3950
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3952
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3954
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3956
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3958
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3960
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3962
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3964
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3966
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3968
 $$pre = HEAP32[$16 >> 2] | 0; //@line 3969
 if ($$pre | 0) {
  $21 = HEAP32[$$pre + 4 >> 2] | 0; //@line 3973
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 3974
  FUNCTION_TABLE_vii[$21 & 31]($10, $6); //@line 3975
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 573; //@line 3978
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 3979
   HEAP32[$22 >> 2] = $2; //@line 3980
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 3981
   HEAP32[$23 >> 2] = $4; //@line 3982
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 3983
   HEAP32[$24 >> 2] = $6; //@line 3984
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 3985
   HEAP32[$25 >> 2] = $8; //@line 3986
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 3987
   HEAP32[$26 >> 2] = $10; //@line 3988
   $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 3989
   HEAP32[$27 >> 2] = $14; //@line 3990
   $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 3991
   HEAP32[$28 >> 2] = $18; //@line 3992
   $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 3993
   HEAP32[$29 >> 2] = $16; //@line 3994
   $30 = $ReallocAsyncCtx2 + 36 | 0; //@line 3995
   HEAP32[$30 >> 2] = $12; //@line 3996
   sp = STACKTOP; //@line 3997
   return;
  }
  ___async_unwind = 0; //@line 4000
  HEAP32[$ReallocAsyncCtx2 >> 2] = 573; //@line 4001
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 4002
  HEAP32[$22 >> 2] = $2; //@line 4003
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 4004
  HEAP32[$23 >> 2] = $4; //@line 4005
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 4006
  HEAP32[$24 >> 2] = $6; //@line 4007
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 4008
  HEAP32[$25 >> 2] = $8; //@line 4009
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 4010
  HEAP32[$26 >> 2] = $10; //@line 4011
  $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 4012
  HEAP32[$27 >> 2] = $14; //@line 4013
  $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 4014
  HEAP32[$28 >> 2] = $18; //@line 4015
  $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 4016
  HEAP32[$29 >> 2] = $16; //@line 4017
  $30 = $ReallocAsyncCtx2 + 36 | 0; //@line 4018
  HEAP32[$30 >> 2] = $12; //@line 4019
  sp = STACKTOP; //@line 4020
  return;
 }
 HEAP32[$12 >> 2] = 0; //@line 4023
 $31 = $8 + 12 | 0; //@line 4024
 HEAP32[$8 >> 2] = 7; //@line 4025
 HEAP32[$8 + 4 >> 2] = 0; //@line 4027
 HEAP32[$8 + 8 >> 2] = $2; //@line 4029
 HEAP32[$31 >> 2] = 860; //@line 4030
 $32 = $2 + 1244 | 0; //@line 4031
 if (($32 | 0) == ($8 | 0)) {
  $59 = HEAP32[217] | 0; //@line 4035
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 4036
  FUNCTION_TABLE_vi[$59 & 1023]($8); //@line 4037
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 577; //@line 4040
   $60 = $ReallocAsyncCtx6 + 4 | 0; //@line 4041
   HEAP32[$60 >> 2] = $2; //@line 4042
   $61 = $ReallocAsyncCtx6 + 8 | 0; //@line 4043
   HEAP32[$61 >> 2] = $4; //@line 4044
   $62 = $ReallocAsyncCtx6 + 12 | 0; //@line 4045
   HEAP32[$62 >> 2] = $10; //@line 4046
   $63 = $ReallocAsyncCtx6 + 16 | 0; //@line 4047
   HEAP32[$63 >> 2] = $8; //@line 4048
   $64 = $ReallocAsyncCtx6 + 20 | 0; //@line 4049
   HEAP32[$64 >> 2] = $14; //@line 4050
   $65 = $ReallocAsyncCtx6 + 24 | 0; //@line 4051
   HEAP32[$65 >> 2] = $18; //@line 4052
   sp = STACKTOP; //@line 4053
   return;
  }
  ___async_unwind = 0; //@line 4056
  HEAP32[$ReallocAsyncCtx6 >> 2] = 577; //@line 4057
  $60 = $ReallocAsyncCtx6 + 4 | 0; //@line 4058
  HEAP32[$60 >> 2] = $2; //@line 4059
  $61 = $ReallocAsyncCtx6 + 8 | 0; //@line 4060
  HEAP32[$61 >> 2] = $4; //@line 4061
  $62 = $ReallocAsyncCtx6 + 12 | 0; //@line 4062
  HEAP32[$62 >> 2] = $10; //@line 4063
  $63 = $ReallocAsyncCtx6 + 16 | 0; //@line 4064
  HEAP32[$63 >> 2] = $8; //@line 4065
  $64 = $ReallocAsyncCtx6 + 20 | 0; //@line 4066
  HEAP32[$64 >> 2] = $14; //@line 4067
  $65 = $ReallocAsyncCtx6 + 24 | 0; //@line 4068
  HEAP32[$65 >> 2] = $18; //@line 4069
  sp = STACKTOP; //@line 4070
  return;
 }
 $34 = $2 + 1256 | 0; //@line 4073
 $35 = HEAP32[$34 >> 2] | 0; //@line 4074
 if (!$35) {
  $49 = HEAP32[216] | 0; //@line 4078
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 4079
  FUNCTION_TABLE_vii[$49 & 31]($32, $8); //@line 4080
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 576; //@line 4083
   $50 = $ReallocAsyncCtx5 + 4 | 0; //@line 4084
   HEAP32[$50 >> 2] = $2; //@line 4085
   $51 = $ReallocAsyncCtx5 + 8 | 0; //@line 4086
   HEAP32[$51 >> 2] = $4; //@line 4087
   $52 = $ReallocAsyncCtx5 + 12 | 0; //@line 4088
   HEAP32[$52 >> 2] = $10; //@line 4089
   $53 = $ReallocAsyncCtx5 + 16 | 0; //@line 4090
   HEAP32[$53 >> 2] = $31; //@line 4091
   $54 = $ReallocAsyncCtx5 + 20 | 0; //@line 4092
   HEAP32[$54 >> 2] = $34; //@line 4093
   $55 = $ReallocAsyncCtx5 + 24 | 0; //@line 4094
   HEAP32[$55 >> 2] = $8; //@line 4095
   $56 = $ReallocAsyncCtx5 + 28 | 0; //@line 4096
   HEAP32[$56 >> 2] = $14; //@line 4097
   $57 = $ReallocAsyncCtx5 + 32 | 0; //@line 4098
   HEAP32[$57 >> 2] = $18; //@line 4099
   sp = STACKTOP; //@line 4100
   return;
  }
  ___async_unwind = 0; //@line 4103
  HEAP32[$ReallocAsyncCtx5 >> 2] = 576; //@line 4104
  $50 = $ReallocAsyncCtx5 + 4 | 0; //@line 4105
  HEAP32[$50 >> 2] = $2; //@line 4106
  $51 = $ReallocAsyncCtx5 + 8 | 0; //@line 4107
  HEAP32[$51 >> 2] = $4; //@line 4108
  $52 = $ReallocAsyncCtx5 + 12 | 0; //@line 4109
  HEAP32[$52 >> 2] = $10; //@line 4110
  $53 = $ReallocAsyncCtx5 + 16 | 0; //@line 4111
  HEAP32[$53 >> 2] = $31; //@line 4112
  $54 = $ReallocAsyncCtx5 + 20 | 0; //@line 4113
  HEAP32[$54 >> 2] = $34; //@line 4114
  $55 = $ReallocAsyncCtx5 + 24 | 0; //@line 4115
  HEAP32[$55 >> 2] = $8; //@line 4116
  $56 = $ReallocAsyncCtx5 + 28 | 0; //@line 4117
  HEAP32[$56 >> 2] = $14; //@line 4118
  $57 = $ReallocAsyncCtx5 + 32 | 0; //@line 4119
  HEAP32[$57 >> 2] = $18; //@line 4120
  sp = STACKTOP; //@line 4121
  return;
 } else {
  $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 4125
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 4126
  FUNCTION_TABLE_vi[$38 & 1023]($32); //@line 4127
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 575; //@line 4130
   $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 4131
   HEAP32[$39 >> 2] = $2; //@line 4132
   $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 4133
   HEAP32[$40 >> 2] = $4; //@line 4134
   $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 4135
   HEAP32[$41 >> 2] = $10; //@line 4136
   $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 4137
   HEAP32[$42 >> 2] = $31; //@line 4138
   $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 4139
   HEAP32[$43 >> 2] = $34; //@line 4140
   $44 = $ReallocAsyncCtx4 + 24 | 0; //@line 4141
   HEAP32[$44 >> 2] = $8; //@line 4142
   $45 = $ReallocAsyncCtx4 + 28 | 0; //@line 4143
   HEAP32[$45 >> 2] = $14; //@line 4144
   $46 = $ReallocAsyncCtx4 + 32 | 0; //@line 4145
   HEAP32[$46 >> 2] = $32; //@line 4146
   $47 = $ReallocAsyncCtx4 + 36 | 0; //@line 4147
   HEAP32[$47 >> 2] = $18; //@line 4148
   sp = STACKTOP; //@line 4149
   return;
  }
  ___async_unwind = 0; //@line 4152
  HEAP32[$ReallocAsyncCtx4 >> 2] = 575; //@line 4153
  $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 4154
  HEAP32[$39 >> 2] = $2; //@line 4155
  $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 4156
  HEAP32[$40 >> 2] = $4; //@line 4157
  $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 4158
  HEAP32[$41 >> 2] = $10; //@line 4159
  $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 4160
  HEAP32[$42 >> 2] = $31; //@line 4161
  $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 4162
  HEAP32[$43 >> 2] = $34; //@line 4163
  $44 = $ReallocAsyncCtx4 + 24 | 0; //@line 4164
  HEAP32[$44 >> 2] = $8; //@line 4165
  $45 = $ReallocAsyncCtx4 + 28 | 0; //@line 4166
  HEAP32[$45 >> 2] = $14; //@line 4167
  $46 = $ReallocAsyncCtx4 + 32 | 0; //@line 4168
  HEAP32[$46 >> 2] = $32; //@line 4169
  $47 = $ReallocAsyncCtx4 + 36 | 0; //@line 4170
  HEAP32[$47 >> 2] = $18; //@line 4171
  sp = STACKTOP; //@line 4172
  return;
 }
}
function _main() {
 var $$0 = 0, $$1 = 0, $$pr = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $26 = 0, $30 = 0, $37 = 0, $40 = 0, $46 = 0, $50 = 0, $51 = 0, $54 = 0, $62 = 0, $63 = 0, $72 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $AsyncCtx36 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6701
 STACKTOP = STACKTOP + 48 | 0; //@line 6702
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 6702
 $vararg_buffer = sp; //@line 6703
 $0 = sp + 8 | 0; //@line 6704
 $1 = sp + 24 | 0; //@line 6705
 if (!((HEAP8[15593] | HEAP8[15592] | HEAP8[15594] | HEAP8[15595] | HEAP8[15596] | HEAP8[15597] | HEAP8[15598] | HEAP8[15599]) << 24 >> 24)) {
  $AsyncCtx29 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6723
  _puts(15600) | 0; //@line 6724
  if (___async) {
   HEAP32[$AsyncCtx29 >> 2] = 752; //@line 6727
   sp = STACKTOP; //@line 6728
   STACKTOP = sp; //@line 6729
   return 0; //@line 6729
  }
  _emscripten_free_async_context($AsyncCtx29 | 0); //@line 6731
  $$1 = -1; //@line 6732
  STACKTOP = sp; //@line 6733
  return $$1 | 0; //@line 6733
 }
 $AsyncCtx25 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6735
 _puts(15636) | 0; //@line 6736
 if (___async) {
  HEAP32[$AsyncCtx25 >> 2] = 753; //@line 6739
  HEAP32[$AsyncCtx25 + 4 >> 2] = $1; //@line 6741
  HEAP32[$AsyncCtx25 + 8 >> 2] = $0; //@line 6743
  HEAP32[$AsyncCtx25 + 12 >> 2] = $1; //@line 6745
  HEAP32[$AsyncCtx25 + 16 >> 2] = $vararg_buffer; //@line 6747
  HEAP32[$AsyncCtx25 + 20 >> 2] = $vararg_buffer; //@line 6749
  sp = STACKTOP; //@line 6750
  STACKTOP = sp; //@line 6751
  return 0; //@line 6751
 }
 _emscripten_free_async_context($AsyncCtx25 | 0); //@line 6753
 if (__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE(23528, 23328) | 0) {
  $AsyncCtx21 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6757
  _puts(15703) | 0; //@line 6758
  if (___async) {
   HEAP32[$AsyncCtx21 >> 2] = 754; //@line 6761
   sp = STACKTOP; //@line 6762
   STACKTOP = sp; //@line 6763
   return 0; //@line 6763
  }
  _emscripten_free_async_context($AsyncCtx21 | 0); //@line 6765
  $$1 = -1; //@line 6766
  STACKTOP = sp; //@line 6767
  return $$1 | 0; //@line 6767
 }
 $26 = $0 + 4 | 0; //@line 6770
 HEAP32[$26 >> 2] = 0; //@line 6772
 HEAP32[$26 + 4 >> 2] = 0; //@line 6775
 HEAP32[$0 >> 2] = 7; //@line 6776
 $30 = $0 + 12 | 0; //@line 6777
 HEAP32[$30 >> 2] = 10120; //@line 6778
 $AsyncCtx36 = _emscripten_alloc_async_context(28, sp) | 0; //@line 6779
 __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE(23256, $0); //@line 6780
 if (___async) {
  HEAP32[$AsyncCtx36 >> 2] = 755; //@line 6783
  HEAP32[$AsyncCtx36 + 4 >> 2] = $1; //@line 6785
  HEAP32[$AsyncCtx36 + 8 >> 2] = $0; //@line 6787
  HEAP32[$AsyncCtx36 + 12 >> 2] = $1; //@line 6789
  HEAP32[$AsyncCtx36 + 16 >> 2] = $vararg_buffer; //@line 6791
  HEAP32[$AsyncCtx36 + 20 >> 2] = $vararg_buffer; //@line 6793
  HEAP32[$AsyncCtx36 + 24 >> 2] = $30; //@line 6795
  sp = STACKTOP; //@line 6796
  STACKTOP = sp; //@line 6797
  return 0; //@line 6797
 }
 _emscripten_free_async_context($AsyncCtx36 | 0); //@line 6799
 $37 = HEAP32[$30 >> 2] | 0; //@line 6800
 do {
  if ($37 | 0) {
   $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 6805
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 6806
   FUNCTION_TABLE_vi[$40 & 1023]($0); //@line 6807
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 756; //@line 6810
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6812
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 6814
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 6816
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 6818
    sp = STACKTOP; //@line 6819
    STACKTOP = sp; //@line 6820
    return 0; //@line 6820
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6822
    break;
   }
  }
 } while (0);
 $46 = $1 + 4 | 0; //@line 6828
 HEAP32[$46 >> 2] = 0; //@line 6830
 HEAP32[$46 + 4 >> 2] = 0; //@line 6833
 HEAP32[$1 >> 2] = 757; //@line 6834
 $50 = $1 + 12 | 0; //@line 6835
 HEAP32[$50 >> 2] = 10140; //@line 6836
 $51 = HEAP32[5887] | 0; //@line 6837
 if (!$51) {
  $62 = 10140; //@line 6840
  label = 22; //@line 6841
 } else {
  $54 = HEAP32[$51 + 8 >> 2] | 0; //@line 6844
  $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6845
  FUNCTION_TABLE_vi[$54 & 1023](23536); //@line 6846
  if (___async) {
   HEAP32[$AsyncCtx2 >> 2] = 758; //@line 6849
   HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 6851
   HEAP32[$AsyncCtx2 + 8 >> 2] = $50; //@line 6853
   HEAP32[$AsyncCtx2 + 12 >> 2] = $vararg_buffer; //@line 6855
   HEAP32[$AsyncCtx2 + 16 >> 2] = $vararg_buffer; //@line 6857
   HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 6859
   sp = STACKTOP; //@line 6860
   STACKTOP = sp; //@line 6861
   return 0; //@line 6861
  }
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6863
  $$pr = HEAP32[$50 >> 2] | 0; //@line 6864
  if (!$$pr) {
   HEAP32[5887] = 0; //@line 6867
  } else {
   $62 = $$pr; //@line 6869
   label = 22; //@line 6870
  }
 }
 do {
  if ((label | 0) == 22) {
   $63 = HEAP32[$62 + 4 >> 2] | 0; //@line 6876
   $AsyncCtx5 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6877
   FUNCTION_TABLE_vii[$63 & 31](23536, $1); //@line 6878
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 759; //@line 6881
    HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 6883
    HEAP32[$AsyncCtx5 + 8 >> 2] = $50; //@line 6885
    HEAP32[$AsyncCtx5 + 12 >> 2] = $vararg_buffer; //@line 6887
    HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer; //@line 6889
    HEAP32[$AsyncCtx5 + 20 >> 2] = $1; //@line 6891
    sp = STACKTOP; //@line 6892
    STACKTOP = sp; //@line 6893
    return 0; //@line 6893
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6895
   $$pre$i$i = HEAP32[$50 >> 2] | 0; //@line 6896
   HEAP32[5887] = $$pre$i$i; //@line 6897
   if ($$pre$i$i | 0) {
    $72 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 6902
    $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6903
    FUNCTION_TABLE_vi[$72 & 1023]($1); //@line 6904
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 760; //@line 6907
     HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 6909
     HEAP32[$AsyncCtx9 + 8 >> 2] = $1; //@line 6911
     HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer; //@line 6913
     HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer; //@line 6915
     sp = STACKTOP; //@line 6916
     STACKTOP = sp; //@line 6917
     return 0; //@line 6917
    } else {
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 6919
     break;
    }
   }
  }
 } while (0);
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(23528, 23536) | 0; //@line 6925
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(23528) | 0) {
  $AsyncCtx17 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6929
  _puts(15731) | 0; //@line 6930
  if (___async) {
   HEAP32[$AsyncCtx17 >> 2] = 761; //@line 6933
   sp = STACKTOP; //@line 6934
   STACKTOP = sp; //@line 6935
   return 0; //@line 6935
  }
  _emscripten_free_async_context($AsyncCtx17 | 0); //@line 6937
  $$1 = -1; //@line 6938
  STACKTOP = sp; //@line 6939
  return $$1 | 0; //@line 6939
 }
 __ZN16LoRaWANInterface12set_datarateEh(23528, 5) | 0; //@line 6941
 HEAP8[$1 >> 0] = 0; //@line 6942
 HEAP32[$1 + 4 >> 2] = 15592; //@line 6944
 HEAP32[$1 + 8 >> 2] = 15765; //@line 6946
 HEAP32[$1 + 12 >> 2] = 15773; //@line 6948
 HEAP8[$1 + 16 >> 0] = 3; //@line 6950
 $83 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(23528, $1) | 0; //@line 6951
 L50 : do {
  switch ($83 | 0) {
  case 0:
  case -1016:
   {
    $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6955
    _puts(15818) | 0; //@line 6956
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 762; //@line 6959
     HEAP32[$AsyncCtx13 + 4 >> 2] = $1; //@line 6961
     sp = STACKTOP; //@line 6962
     STACKTOP = sp; //@line 6963
     return 0; //@line 6963
    }
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 6965
    $AsyncCtx32 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6966
    __ZN6events10EventQueue8dispatchEi(23328, -1); //@line 6967
    if (___async) {
     HEAP32[$AsyncCtx32 >> 2] = 763; //@line 6970
     HEAP32[$AsyncCtx32 + 4 >> 2] = $1; //@line 6972
     sp = STACKTOP; //@line 6973
     STACKTOP = sp; //@line 6974
     return 0; //@line 6974
    } else {
     _emscripten_free_async_context($AsyncCtx32 | 0); //@line 6976
     $$0 = 0; //@line 6977
     break L50;
    }
    break;
   }
  default:
   {
    HEAP32[$vararg_buffer >> 2] = $83; //@line 6983
    _printf(15789, $vararg_buffer) | 0; //@line 6984
    $$0 = -1; //@line 6985
   }
  }
 } while (0);
 $$1 = $$0; //@line 6989
 STACKTOP = sp; //@line 6990
 return $$1 | 0; //@line 6990
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_425($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 24896
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24898
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24900
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24902
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24904
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24908
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24912
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24914
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24916
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24918
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($2 + 4 | 0) | 0) {
  _printf(13258, $8) | 0; //@line 24922
  _printf(13405, $12) | 0; //@line 24923
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 24924
  _putchar(10) | 0; //@line 24925
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 476; //@line 24928
   $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 24929
   HEAP32[$25 >> 2] = $2; //@line 24930
   $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 24931
   HEAP32[$26 >> 2] = $4; //@line 24932
   $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 24933
   HEAP32[$27 >> 2] = $6; //@line 24934
   $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 24935
   HEAP32[$28 >> 2] = $16; //@line 24936
   $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 24937
   HEAP32[$29 >> 2] = $18; //@line 24938
   $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 24939
   HEAP32[$30 >> 2] = $20; //@line 24940
   $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 24941
   HEAP32[$31 >> 2] = $22; //@line 24942
   sp = STACKTOP; //@line 24943
   return;
  }
  ___async_unwind = 0; //@line 24946
  HEAP32[$ReallocAsyncCtx7 >> 2] = 476; //@line 24947
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 24948
  HEAP32[$25 >> 2] = $2; //@line 24949
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 24950
  HEAP32[$26 >> 2] = $4; //@line 24951
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 24952
  HEAP32[$27 >> 2] = $6; //@line 24953
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 24954
  HEAP32[$28 >> 2] = $16; //@line 24955
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 24956
  HEAP32[$29 >> 2] = $18; //@line 24957
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 24958
  HEAP32[$30 >> 2] = $20; //@line 24959
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 24960
  HEAP32[$31 >> 2] = $22; //@line 24961
  sp = STACKTOP; //@line 24962
  return;
 }
 $32 = HEAP8[$6 >> 0] & -33; //@line 24966
 HEAP8[$6 >> 0] = $32; //@line 24967
 do {
  if (!($32 & 2)) {
   $63 = $32; //@line 24972
  } else {
   $35 = $32 & -3; //@line 24974
   HEAP8[$6 >> 0] = $35; //@line 24975
   if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
    _printf(13258, $16) | 0; //@line 24980
    _printf(13285, $20) | 0; //@line 24981
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 24982
    _putchar(10) | 0; //@line 24983
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 24986
     $39 = $ReallocAsyncCtx6 + 4 | 0; //@line 24987
     HEAP32[$39 >> 2] = $2; //@line 24988
     $40 = $ReallocAsyncCtx6 + 8 | 0; //@line 24989
     HEAP32[$40 >> 2] = $4; //@line 24990
     $41 = $ReallocAsyncCtx6 + 12 | 0; //@line 24991
     HEAP32[$41 >> 2] = $4; //@line 24992
     $42 = $ReallocAsyncCtx6 + 16 | 0; //@line 24993
     HEAP32[$42 >> 2] = $6; //@line 24994
     sp = STACKTOP; //@line 24995
     return;
    }
    ___async_unwind = 0; //@line 24998
    HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 24999
    $39 = $ReallocAsyncCtx6 + 4 | 0; //@line 25000
    HEAP32[$39 >> 2] = $2; //@line 25001
    $40 = $ReallocAsyncCtx6 + 8 | 0; //@line 25002
    HEAP32[$40 >> 2] = $4; //@line 25003
    $41 = $ReallocAsyncCtx6 + 12 | 0; //@line 25004
    HEAP32[$41 >> 2] = $4; //@line 25005
    $42 = $ReallocAsyncCtx6 + 16 | 0; //@line 25006
    HEAP32[$42 >> 2] = $6; //@line 25007
    sp = STACKTOP; //@line 25008
    return;
   }
   if ($35 & 4) {
    $61 = $35 & -5; //@line 25014
    HEAP8[$6 >> 0] = $61; //@line 25015
    $63 = $61; //@line 25016
    break;
   }
   $46 = HEAP32[$2 + 1324 >> 2] | 0; //@line 25020
   $47 = $46 + 16 | 0; //@line 25021
   $49 = __ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0; //@line 25023
   $50 = $46 + 28 | 0; //@line 25024
   $51 = HEAP32[$50 >> 2] | 0; //@line 25025
   if (!$51) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 25028
    _mbed_assert_internal(15352, 15357, 1102); //@line 25029
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 25032
     $53 = $ReallocAsyncCtx15 + 4 | 0; //@line 25033
     HEAP32[$53 >> 2] = $50; //@line 25034
     $54 = $ReallocAsyncCtx15 + 8 | 0; //@line 25035
     HEAP32[$54 >> 2] = $47; //@line 25036
     $55 = $ReallocAsyncCtx15 + 12 | 0; //@line 25037
     HEAP32[$55 >> 2] = $49; //@line 25038
     $56 = $ReallocAsyncCtx15 + 16 | 0; //@line 25039
     HEAP32[$56 >> 2] = $6; //@line 25040
     $57 = $ReallocAsyncCtx15 + 20 | 0; //@line 25041
     HEAP32[$57 >> 2] = $2; //@line 25042
     sp = STACKTOP; //@line 25043
     return;
    }
    ___async_unwind = 0; //@line 25046
    HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 25047
    $53 = $ReallocAsyncCtx15 + 4 | 0; //@line 25048
    HEAP32[$53 >> 2] = $50; //@line 25049
    $54 = $ReallocAsyncCtx15 + 8 | 0; //@line 25050
    HEAP32[$54 >> 2] = $47; //@line 25051
    $55 = $ReallocAsyncCtx15 + 12 | 0; //@line 25052
    HEAP32[$55 >> 2] = $49; //@line 25053
    $56 = $ReallocAsyncCtx15 + 16 | 0; //@line 25054
    HEAP32[$56 >> 2] = $6; //@line 25055
    $57 = $ReallocAsyncCtx15 + 20 | 0; //@line 25056
    HEAP32[$57 >> 2] = $2; //@line 25057
    sp = STACKTOP; //@line 25058
    return;
   } else {
    $58 = HEAP32[$51 >> 2] | 0; //@line 25061
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 25062
    FUNCTION_TABLE_vii[$58 & 31]($47, $49); //@line 25063
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 25066
     $59 = $ReallocAsyncCtx4 + 4 | 0; //@line 25067
     HEAP32[$59 >> 2] = $6; //@line 25068
     $60 = $ReallocAsyncCtx4 + 8 | 0; //@line 25069
     HEAP32[$60 >> 2] = $2; //@line 25070
     sp = STACKTOP; //@line 25071
     return;
    }
    ___async_unwind = 0; //@line 25074
    HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 25075
    $59 = $ReallocAsyncCtx4 + 4 | 0; //@line 25076
    HEAP32[$59 >> 2] = $6; //@line 25077
    $60 = $ReallocAsyncCtx4 + 8 | 0; //@line 25078
    HEAP32[$60 >> 2] = $2; //@line 25079
    sp = STACKTOP; //@line 25080
    return;
   }
  }
 } while (0);
 if (!($63 & 16)) {
  return;
 }
 HEAP8[$6 >> 0] = $63 & -17; //@line 25091
 $67 = HEAP32[$2 + 1324 >> 2] | 0; //@line 25093
 $68 = $67 + 48 | 0; //@line 25094
 $70 = __ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0; //@line 25096
 $71 = $67 + 60 | 0; //@line 25097
 $72 = HEAP32[$71 >> 2] | 0; //@line 25098
 if (!$72) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 25101
  _mbed_assert_internal(15352, 15357, 1102); //@line 25102
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 25105
   $74 = $ReallocAsyncCtx14 + 4 | 0; //@line 25106
   HEAP32[$74 >> 2] = $71; //@line 25107
   $75 = $ReallocAsyncCtx14 + 8 | 0; //@line 25108
   HEAP32[$75 >> 2] = $68; //@line 25109
   $76 = $ReallocAsyncCtx14 + 12 | 0; //@line 25110
   HEAP32[$76 >> 2] = $70; //@line 25111
   sp = STACKTOP; //@line 25112
   return;
  }
  ___async_unwind = 0; //@line 25115
  HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 25116
  $74 = $ReallocAsyncCtx14 + 4 | 0; //@line 25117
  HEAP32[$74 >> 2] = $71; //@line 25118
  $75 = $ReallocAsyncCtx14 + 8 | 0; //@line 25119
  HEAP32[$75 >> 2] = $68; //@line 25120
  $76 = $ReallocAsyncCtx14 + 12 | 0; //@line 25121
  HEAP32[$76 >> 2] = $70; //@line 25122
  sp = STACKTOP; //@line 25123
  return;
 } else {
  $77 = HEAP32[$72 >> 2] | 0; //@line 25126
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 25127
  FUNCTION_TABLE_vii[$77 & 31]($68, $70); //@line 25128
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 25131
   sp = STACKTOP; //@line 25132
   return;
  }
  ___async_unwind = 0; //@line 25135
  HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 25136
  sp = STACKTOP; //@line 25137
  return;
 }
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $42 = 0, $43 = 0, $5 = 0, $58 = 0, $59 = 0, $63 = 0, $65 = 0, $73 = 0, $74 = 0, $80 = 0, $83 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx8 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 6785
 STACKTOP = STACKTOP + 64 | 0; //@line 6786
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 6786
 $vararg_buffer5 = sp + 24 | 0; //@line 6787
 $vararg_buffer3 = sp + 16 | 0; //@line 6788
 $2 = sp + 48 | 0; //@line 6791
 $3 = sp + 32 | 0; //@line 6792
 if (!$1) {
  _printf(12178, sp) | 0; //@line 6795
  _printf(12524, sp + 8 | 0) | 0; //@line 6796
  $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6797
  _putchar(10) | 0; //@line 6798
  if (___async) {
   HEAP32[$AsyncCtx23 >> 2] = 216; //@line 6801
   sp = STACKTOP; //@line 6802
   STACKTOP = sp; //@line 6803
   return;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6805
  STACKTOP = sp; //@line 6806
  return;
 }
 _printf(12430, $vararg_buffer3) | 0; //@line 6808
 $5 = $1 + 4 | 0; //@line 6809
 HEAP32[$vararg_buffer5 >> 2] = HEAP32[$5 >> 2]; //@line 6811
 _printf(12562, $vararg_buffer5) | 0; //@line 6812
 $AsyncCtx19 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6813
 _putchar(10) | 0; //@line 6814
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 217; //@line 6817
  HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 6819
  HEAP32[$AsyncCtx19 + 8 >> 2] = $3; //@line 6821
  HEAP32[$AsyncCtx19 + 12 >> 2] = $1; //@line 6823
  HEAP32[$AsyncCtx19 + 16 >> 2] = $2; //@line 6825
  HEAP32[$AsyncCtx19 + 20 >> 2] = $5; //@line 6827
  sp = STACKTOP; //@line 6828
  STACKTOP = sp; //@line 6829
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 6831
 if (HEAP32[$5 >> 2] | 0) {
  $14 = $0 + 1892 | 0; //@line 6835
  $15 = HEAP32[$14 >> 2] | 0; //@line 6836
  if (!$15) {
   STACKTOP = sp; //@line 6839
   return;
  }
  $19 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6843
  $21 = HEAP32[$15 + 4 >> 2] | 0; //@line 6845
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 6846
  FUNCTION_TABLE_vii[$21 & 31]($2, $0 + 1880 | 0); //@line 6847
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 218; //@line 6850
   HEAP32[$AsyncCtx + 4 >> 2] = $14; //@line 6852
   HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6854
   HEAP32[$AsyncCtx + 12 >> 2] = $19; //@line 6856
   HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 6858
   sp = STACKTOP; //@line 6859
   STACKTOP = sp; //@line 6860
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6862
  $26 = $2 + 12 | 0; //@line 6864
  HEAP32[$26 >> 2] = HEAP32[$14 >> 2]; //@line 6865
  $AsyncCtx33 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6866
  $27 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($19, $2, 9) | 0; //@line 6867
  if (___async) {
   HEAP32[$AsyncCtx33 >> 2] = 219; //@line 6870
   HEAP32[$AsyncCtx33 + 4 >> 2] = $26; //@line 6872
   HEAP32[$AsyncCtx33 + 8 >> 2] = $2; //@line 6874
   sp = STACKTOP; //@line 6875
   STACKTOP = sp; //@line 6876
   return;
  }
  _emscripten_free_async_context($AsyncCtx33 | 0); //@line 6878
  $30 = HEAP32[$26 >> 2] | 0; //@line 6879
  do {
   if ($30 | 0) {
    $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 6884
    $AsyncCtx8 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6885
    FUNCTION_TABLE_vi[$33 & 1023]($2); //@line 6886
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 220; //@line 6889
     HEAP32[$AsyncCtx8 + 4 >> 2] = $27; //@line 6891
     sp = STACKTOP; //@line 6892
     STACKTOP = sp; //@line 6893
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx8 | 0); //@line 6895
     break;
    }
   }
  } while (0);
  if ($27 | 0) {
   STACKTOP = sp; //@line 6902
   return;
  }
  $AsyncCtx41 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6904
  _mbed_assert_internal(13142, 12226, 843); //@line 6905
  if (___async) {
   HEAP32[$AsyncCtx41 >> 2] = 221; //@line 6908
   sp = STACKTOP; //@line 6909
   STACKTOP = sp; //@line 6910
   return;
  }
  _emscripten_free_async_context($AsyncCtx41 | 0); //@line 6912
  STACKTOP = sp; //@line 6913
  return;
 }
 $36 = $0 + 1960 | 0; //@line 6915
 HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 1; //@line 6918
 if (!(HEAP8[$1 + 18 >> 0] | 0)) {
  STACKTOP = sp; //@line 6923
  return;
 }
 $42 = $1 + 9 | 0; //@line 6925
 $43 = HEAP8[$42 >> 0] | 0; //@line 6926
 if ($43 << 24 >> 24 == -32) {
  STACKTOP = sp; //@line 6929
  return;
 }
 if (($43 + -1 & 255) >= 223) {
  if ((HEAP32[$1 >> 2] | 0) != 3) {
   STACKTOP = sp; //@line 6937
   return;
  }
 }
 HEAP32[$0 + 2240 >> 2] = 2; //@line 6941
 HEAP16[$0 + 2260 >> 1] = HEAP16[$1 + 16 >> 1] | 0; //@line 6945
 HEAP8[$0 + 2253 >> 0] = HEAP8[$42 >> 0] | 0; //@line 6948
 HEAP32[$0 + 2256 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 6952
 HEAP8[$0 + 2236 >> 0] = 1; //@line 6954
 $58 = $0 + 1892 | 0; //@line 6955
 $59 = HEAP32[$58 >> 2] | 0; //@line 6956
 do {
  if ($59 | 0) {
   $63 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6962
   $65 = HEAP32[$59 + 4 >> 2] | 0; //@line 6964
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6965
   FUNCTION_TABLE_vii[$65 & 31]($3, $0 + 1880 | 0); //@line 6966
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 222; //@line 6969
    HEAP32[$AsyncCtx11 + 4 >> 2] = $58; //@line 6971
    HEAP32[$AsyncCtx11 + 8 >> 2] = $3; //@line 6973
    HEAP32[$AsyncCtx11 + 12 >> 2] = $63; //@line 6975
    HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 6977
    HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 6979
    HEAP32[$AsyncCtx11 + 24 >> 2] = $42; //@line 6981
    HEAP32[$AsyncCtx11 + 28 >> 2] = $0; //@line 6983
    sp = STACKTOP; //@line 6984
    STACKTOP = sp; //@line 6985
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6987
   $73 = $3 + 12 | 0; //@line 6989
   HEAP32[$73 >> 2] = HEAP32[$58 >> 2]; //@line 6990
   $AsyncCtx30 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6991
   $74 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($63, $3, 7) | 0; //@line 6992
   if (___async) {
    HEAP32[$AsyncCtx30 >> 2] = 223; //@line 6995
    HEAP32[$AsyncCtx30 + 4 >> 2] = $73; //@line 6997
    HEAP32[$AsyncCtx30 + 8 >> 2] = $3; //@line 6999
    HEAP32[$AsyncCtx30 + 12 >> 2] = $1; //@line 7001
    HEAP32[$AsyncCtx30 + 16 >> 2] = $42; //@line 7003
    HEAP32[$AsyncCtx30 + 20 >> 2] = $0; //@line 7005
    sp = STACKTOP; //@line 7006
    STACKTOP = sp; //@line 7007
    return;
   }
   _emscripten_free_async_context($AsyncCtx30 | 0); //@line 7009
   $80 = HEAP32[$73 >> 2] | 0; //@line 7010
   do {
    if ($80 | 0) {
     $83 = HEAP32[$80 + 8 >> 2] | 0; //@line 7015
     $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7016
     FUNCTION_TABLE_vi[$83 & 1023]($3); //@line 7017
     if (___async) {
      HEAP32[$AsyncCtx15 >> 2] = 224; //@line 7020
      HEAP32[$AsyncCtx15 + 4 >> 2] = $74; //@line 7022
      HEAP32[$AsyncCtx15 + 8 >> 2] = $1; //@line 7024
      HEAP32[$AsyncCtx15 + 12 >> 2] = $42; //@line 7026
      HEAP32[$AsyncCtx15 + 16 >> 2] = $0; //@line 7028
      sp = STACKTOP; //@line 7029
      STACKTOP = sp; //@line 7030
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7032
      break;
     }
    }
   } while (0);
   if (!$74) {
    $AsyncCtx37 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7039
    _mbed_assert_internal(13142, 12226, 909); //@line 7040
    if (___async) {
     HEAP32[$AsyncCtx37 >> 2] = 225; //@line 7043
     HEAP32[$AsyncCtx37 + 4 >> 2] = $1; //@line 7045
     HEAP32[$AsyncCtx37 + 8 >> 2] = $42; //@line 7047
     HEAP32[$AsyncCtx37 + 12 >> 2] = $0; //@line 7049
     sp = STACKTOP; //@line 7050
     STACKTOP = sp; //@line 7051
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx37 | 0); //@line 7053
     break;
    }
   }
  }
 } while (0);
 if (!(HEAP8[$1 + 11 >> 0] | 0)) {
  STACKTOP = sp; //@line 7063
  return;
 }
 $95 = HEAP8[$42 >> 0] | 0; //@line 7065
 $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7066
 __ZN12LoRaWANStack9handle_txEhPKhth($0, $95, 0, 0, 2) | 0; //@line 7067
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 226; //@line 7070
  sp = STACKTOP; //@line 7071
  STACKTOP = sp; //@line 7072
  return;
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 7074
 STACKTOP = sp; //@line 7075
 return;
}
function _schedule_interrupt__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $102 = 0, $105 = 0, $107 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $12 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $130 = 0, $135 = 0, $142 = 0, $144 = 0, $146 = 0, $149 = 0, $151 = 0, $158 = 0, $159 = 0, $162 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $177 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $86 = 0, $87 = 0, $9 = 0, $93 = 0, $94 = 0, $95 = 0, $97 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 36315
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36317
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36319
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 36323
 $8 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 36324
 $9 = $8 + 32 | 0; //@line 36325
 if (($AsyncRetVal | 0) != (HEAP32[$9 >> 2] | 0)) {
  $12 = $4 + 32 | 0; //@line 36329
  $17 = $AsyncRetVal - (HEAP32[$12 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 36334
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 36335
  $19 = HEAP32[$4 + 8 >> 2] | 0; //@line 36337
  L4 : do {
   if (($19 | 0) < 1e6) {
    switch ($19 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 6; //@line 36346
      break L4;
     }
    }
    $20 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 36350
    $22 = _bitshift64Lshr($20 | 0, tempRet0 | 0, 15) | 0; //@line 36352
    $23 = tempRet0; //@line 36353
    $26 = $4 + 40 | 0; //@line 36356
    $27 = $26; //@line 36357
    $33 = _i64Add(HEAP32[$27 >> 2] | 0, HEAP32[$27 + 4 >> 2] | 0, $17 * 1e6 & 32704 | 0, 0) | 0; //@line 36363
    $34 = tempRet0; //@line 36364
    $35 = $26; //@line 36365
    HEAP32[$35 >> 2] = $33; //@line 36367
    HEAP32[$35 + 4 >> 2] = $34; //@line 36370
    if ($34 >>> 0 < 0 | ($34 | 0) == 0 & $33 >>> 0 < 32768) {
     $93 = $22; //@line 36377
     $94 = $23; //@line 36377
    } else {
     $44 = _i64Add($22 | 0, $23 | 0, 1, 0) | 0; //@line 36379
     $45 = tempRet0; //@line 36380
     $46 = _i64Add($33 | 0, $34 | 0, -32768, -1) | 0; //@line 36381
     $48 = $26; //@line 36383
     HEAP32[$48 >> 2] = $46; //@line 36385
     HEAP32[$48 + 4 >> 2] = tempRet0; //@line 36388
     $93 = $44; //@line 36389
     $94 = $45; //@line 36389
    }
   } else {
    switch ($19 | 0) {
    case 1e6:
     {
      $93 = $17; //@line 36394
      $94 = 0; //@line 36394
      break;
     }
    default:
     {
      label = 6; //@line 36398
     }
    }
   }
  } while (0);
  if ((label | 0) == 6) {
   $52 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 36404
   $53 = tempRet0; //@line 36405
   $54 = ___udivdi3($52 | 0, $53 | 0, $19 | 0, 0) | 0; //@line 36406
   $55 = tempRet0; //@line 36407
   $56 = ___muldi3($54 | 0, $55 | 0, $19 | 0, 0) | 0; //@line 36408
   $58 = _i64Subtract($52 | 0, $53 | 0, $56 | 0, tempRet0 | 0) | 0; //@line 36410
   $60 = $4 + 40 | 0; //@line 36412
   $61 = $60; //@line 36413
   $67 = _i64Add($58 | 0, tempRet0 | 0, HEAP32[$61 >> 2] | 0, HEAP32[$61 + 4 >> 2] | 0) | 0; //@line 36419
   $68 = tempRet0; //@line 36420
   $69 = $60; //@line 36421
   HEAP32[$69 >> 2] = $67; //@line 36423
   HEAP32[$69 + 4 >> 2] = $68; //@line 36426
   if ($68 >>> 0 < 0 | ($68 | 0) == 0 & $67 >>> 0 < $19 >>> 0) {
    $93 = $54; //@line 36433
    $94 = $55; //@line 36433
   } else {
    $78 = _i64Add($54 | 0, $55 | 0, 1, 0) | 0; //@line 36435
    $79 = tempRet0; //@line 36436
    $80 = _i64Subtract($67 | 0, $68 | 0, $19 | 0, 0) | 0; //@line 36437
    $82 = $60; //@line 36439
    HEAP32[$82 >> 2] = $80; //@line 36441
    HEAP32[$82 + 4 >> 2] = tempRet0; //@line 36444
    $93 = $78; //@line 36445
    $94 = $79; //@line 36445
   }
  }
  $86 = $4 + 48 | 0; //@line 36448
  $87 = $86; //@line 36449
  $95 = _i64Add(HEAP32[$87 >> 2] | 0, HEAP32[$87 + 4 >> 2] | 0, $93 | 0, $94 | 0) | 0; //@line 36455
  $97 = $86; //@line 36457
  HEAP32[$97 >> 2] = $95; //@line 36459
  HEAP32[$97 + 4 >> 2] = tempRet0; //@line 36462
 }
 $102 = HEAP32[$8 + 4 >> 2] | 0; //@line 36465
 if (!$102) {
  $177 = (HEAP32[$4 + 16 >> 2] | 0) + (HEAP32[$4 + 32 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 36475
  $180 = HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0; //@line 36478
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 36479
  FUNCTION_TABLE_vi[$180 & 1023]($177); //@line 36480
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 715; //@line 36483
   sp = STACKTOP; //@line 36484
   return;
  }
  ___async_unwind = 0; //@line 36487
  HEAP32[$ReallocAsyncCtx7 >> 2] = 715; //@line 36488
  sp = STACKTOP; //@line 36489
  return;
 }
 $105 = $8 + 48 | 0; //@line 36493
 $107 = HEAP32[$105 >> 2] | 0; //@line 36495
 $110 = HEAP32[$105 + 4 >> 2] | 0; //@line 36498
 $111 = $102; //@line 36499
 $113 = HEAP32[$111 >> 2] | 0; //@line 36501
 $116 = HEAP32[$111 + 4 >> 2] | 0; //@line 36504
 if (!($116 >>> 0 > $110 >>> 0 | ($116 | 0) == ($110 | 0) & $113 >>> 0 > $107 >>> 0)) {
  $124 = HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] | 0; //@line 36513
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 36514
  FUNCTION_TABLE_v[$124 & 15](); //@line 36515
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 710; //@line 36518
   sp = STACKTOP; //@line 36519
   return;
  }
  ___async_unwind = 0; //@line 36522
  HEAP32[$ReallocAsyncCtx2 >> 2] = 710; //@line 36523
  sp = STACKTOP; //@line 36524
  return;
 }
 $125 = _i64Subtract($113 | 0, $116 | 0, $107 | 0, $110 | 0) | 0; //@line 36527
 $126 = tempRet0; //@line 36528
 $128 = HEAP32[$8 + 16 >> 2] | 0; //@line 36530
 $130 = $8 + 24 | 0; //@line 36532
 $135 = HEAP32[$130 + 4 >> 2] | 0; //@line 36537
 L28 : do {
  if ($126 >>> 0 > $135 >>> 0 | (($126 | 0) == ($135 | 0) ? $125 >>> 0 > (HEAP32[$130 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $128; //@line 36545
  } else {
   $142 = HEAP32[$8 + 8 >> 2] | 0; //@line 36548
   L30 : do {
    if (($142 | 0) < 1e6) {
     switch ($142 | 0) {
     case 32768:
      {
       break;
      }
     default:
      {
       break L30;
      }
     }
     $144 = _bitshift64Shl($125 | 0, $126 | 0, 15) | 0; //@line 36560
     $146 = ___udivdi3($144 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 36562
     $$0$i = $128 >>> 0 < $146 >>> 0 ? $128 : $146; //@line 36566
     break L28;
    } else {
     switch ($142 | 0) {
     case 1e6:
      {
       break;
      }
     default:
      {
       break L30;
      }
     }
     $$0$i = $128 >>> 0 < $125 >>> 0 ? $128 : $125; //@line 36579
     break L28;
    }
   } while (0);
   $149 = ___muldi3($125 | 0, $126 | 0, $142 | 0, 0) | 0; //@line 36583
   $151 = ___udivdi3($149 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 36585
   $$0$i = $128 >>> 0 < $151 >>> 0 ? $128 : $151; //@line 36589
  }
 } while (0);
 $158 = (HEAP32[$9 >> 2] | 0) + $$0$i & HEAP32[$8 + 12 >> 2]; //@line 36596
 $159 = $4 + 32 | 0; //@line 36597
 $162 = HEAP32[$2 >> 2] | 0; //@line 36600
 if (($158 | 0) == (HEAP32[$159 >> 2] | 0)) {
  $164 = HEAP32[$162 + 20 >> 2] | 0; //@line 36603
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 36604
  FUNCTION_TABLE_v[$164 & 15](); //@line 36605
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 711; //@line 36608
   sp = STACKTOP; //@line 36609
   return;
  }
  ___async_unwind = 0; //@line 36612
  HEAP32[$ReallocAsyncCtx3 >> 2] = 711; //@line 36613
  sp = STACKTOP; //@line 36614
  return;
 } else {
  $166 = HEAP32[$162 + 16 >> 2] | 0; //@line 36618
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 36619
  FUNCTION_TABLE_vi[$166 & 1023]($158); //@line 36620
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 712; //@line 36623
   $167 = $ReallocAsyncCtx4 + 4 | 0; //@line 36624
   HEAP32[$167 >> 2] = $2; //@line 36625
   $168 = $ReallocAsyncCtx4 + 8 | 0; //@line 36626
   HEAP32[$168 >> 2] = $159; //@line 36627
   $169 = $ReallocAsyncCtx4 + 12 | 0; //@line 36628
   HEAP32[$169 >> 2] = $158; //@line 36629
   sp = STACKTOP; //@line 36630
   return;
  }
  ___async_unwind = 0; //@line 36633
  HEAP32[$ReallocAsyncCtx4 >> 2] = 712; //@line 36634
  $167 = $ReallocAsyncCtx4 + 4 | 0; //@line 36635
  HEAP32[$167 >> 2] = $2; //@line 36636
  $168 = $ReallocAsyncCtx4 + 8 | 0; //@line 36637
  HEAP32[$168 >> 2] = $159; //@line 36638
  $169 = $ReallocAsyncCtx4 + 12 | 0; //@line 36639
  HEAP32[$169 >> 2] = $158; //@line 36640
  sp = STACKTOP; //@line 36641
  return;
 }
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_160($0) {
 $0 = $0 | 0;
 var $$024 = 0, $$05$i = 0, $$06$i = 0, $$1 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $108 = 0, $109 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $25 = 0, $27 = 0, $30 = 0, $33 = 0, $4 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $49 = 0, $58 = 0, $6 = 0, $70 = 0, $73 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0.0, $94 = 0.0, $96 = 0, $97 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1673
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1675
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1677
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1679
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1681
 $9 = $2 + 968 | 0; //@line 1682
 if (HEAP32[$9 >> 2] | 0) {
  $$1 = -1e3; //@line 1686
  $109 = ___async_retval; //@line 1687
  HEAP32[$109 >> 2] = $$1; //@line 1688
  return;
 }
 $12 = $2 + 264 | 0; //@line 1691
 __ZN11LoRaMacMlme18reset_confirmationEv($12); //@line 1692
 $13 = HEAP32[$4 >> 2] | 0; //@line 1693
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($12) | 0) >> 2] = $13; //@line 1695
 $15 = $2 + 944 | 0; //@line 1696
 $17 = HEAP8[$15 >> 0] | 8; //@line 1698
 HEAP8[$15 >> 0] = $17; //@line 1699
 L5 : do {
  switch (HEAP32[$4 >> 2] | 0) {
  case 1:
   {
    $20 = __ZN14LoRaMacCommand15add_mac_commandEhhh($2 + 4 | 0, 2, 0, 0) | 0; //@line 1705
    if (!$20) {
     $$1 = 0; //@line 1708
     $109 = ___async_retval; //@line 1709
     HEAP32[$109 >> 2] = $$1; //@line 1710
     return;
    } else {
     $$024 = $20; //@line 1714
     $108 = HEAP8[$15 >> 0] | 0; //@line 1714
     break L5;
    }
    break;
   }
  case 0:
   {
    if (HEAP32[$9 >> 2] & 16 | 0) {
     $$1 = -1e3; //@line 1724
     $109 = ___async_retval; //@line 1725
     HEAP32[$109 >> 2] = $$1; //@line 1726
     return;
    }
    $25 = HEAP32[$4 + 4 >> 2] | 0; //@line 1730
    if (!$25) {
     $$1 = -1003; //@line 1733
     $109 = ___async_retval; //@line 1734
     HEAP32[$109 >> 2] = $$1; //@line 1735
     return;
    }
    $27 = $4 + 8 | 0; //@line 1738
    if (!(HEAP32[$27 >> 2] | 0)) {
     $$1 = -1003; //@line 1742
     $109 = ___async_retval; //@line 1743
     HEAP32[$109 >> 2] = $$1; //@line 1744
     return;
    }
    $30 = $4 + 12 | 0; //@line 1747
    if (!(HEAP32[$30 >> 2] | 0)) {
     $$1 = -1003; //@line 1751
     $109 = ___async_retval; //@line 1752
     HEAP32[$109 >> 2] = $$1; //@line 1753
     return;
    }
    $33 = $4 + 16 | 0; //@line 1756
    if (!(HEAP8[$33 >> 0] | 0)) {
     $$1 = -1003; //@line 1760
     $109 = ___async_retval; //@line 1761
     HEAP32[$109 >> 2] = $$1; //@line 1762
     return;
    }
    HEAP32[$2 + 900 >> 2] = $25; //@line 1766
    HEAP32[$2 + 904 >> 2] = HEAP32[$27 >> 2]; //@line 1769
    HEAP32[$2 + 908 >> 2] = HEAP32[$30 >> 2]; //@line 1772
    $41 = HEAP8[$33 >> 0] | 0; //@line 1773
    $42 = $2 + 896 | 0; //@line 1774
    HEAP8[$42 >> 0] = $41; //@line 1775
    $45 = __ZN7LoRaPHY21verify_nb_join_trialsEh(HEAP32[$2 >> 2] | 0, HEAP8[$33 >> 0] | 0) | 0; //@line 1778
    HEAP8[$42 >> 0] = $45 ? $41 : 12; //@line 1780
    $46 = $2 + 897 | 0; //@line 1781
    HEAP8[$46 >> 0] = 0; //@line 1782
    HEAP8[$2 + 372 >> 0] = 0; //@line 1785
    $49 = $2 + 956 | 0; //@line 1786
    HEAP32[$49 >> 2] = 0; //@line 1787
    HEAP32[$2 + 960 >> 2] = 0; //@line 1789
    HEAP32[$2 + 964 >> 2] = 0; //@line 1791
    HEAP8[$2 + 380 >> 0] = 0; //@line 1793
    HEAP8[$2 + 894 >> 0] = 1; //@line 1795
    HEAP8[$2 + 895 >> 0] = 1; //@line 1797
    HEAP8[$2 + 377 >> 0] = 0; //@line 1799
    HEAP8[$2 + 1152 >> 0] = 0; //@line 1801
    HEAP16[$2 + 1154 >> 1] = 1; //@line 1803
    $58 = $2 + 4 | 0; //@line 1804
    __ZN14LoRaMacCommand20clear_command_bufferEv($58); //@line 1805
    __ZN14LoRaMacCommand19clear_repeat_bufferEv($58); //@line 1806
    __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($58); //@line 1807
    HEAP8[$2 + 371 >> 0] = 1; //@line 1809
    __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$2 >> 2] | 0, $2 + 360 | 0, 0); //@line 1811
    HEAP8[$2 + 373 >> 0] = 0; //@line 1813
    HEAP8[$2 + 374 >> 0] = 0; //@line 1815
    $$05$i = HEAP32[$2 + 1208 >> 2] | 0; //@line 1817
    if ($$05$i | 0) {
     $$06$i = $$05$i; //@line 1820
     do {
      HEAP32[$$06$i + 36 >> 2] = 0; //@line 1823
      $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 1825
     } while (($$06$i | 0) != 0);
    }
    HEAP8[$2 + 378 >> 0] = 0; //@line 1835
    HEAP8[$2 + 379 >> 0] = 0; //@line 1837
    $70 = HEAP32[$2 >> 2] | 0; //@line 1838
    $73 = HEAP32[(HEAP32[$70 >> 2] | 0) + 52 >> 2] | 0; //@line 1841
    $77 = (HEAPU8[$46 >> 0] | 0) + 1 & 255; //@line 1845
    $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 1846
    $78 = FUNCTION_TABLE_iii[$73 & 31]($70, $77) | 0; //@line 1847
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 555; //@line 1850
     $79 = $ReallocAsyncCtx + 4 | 0; //@line 1851
     HEAP32[$79 >> 2] = $2; //@line 1852
     $80 = $ReallocAsyncCtx + 8 | 0; //@line 1853
     HEAP32[$80 >> 2] = $6; //@line 1854
     $81 = $ReallocAsyncCtx + 12 | 0; //@line 1855
     HEAP32[$81 >> 2] = $8; //@line 1856
     $82 = $ReallocAsyncCtx + 16 | 0; //@line 1857
     HEAP32[$82 >> 2] = $49; //@line 1858
     $83 = $ReallocAsyncCtx + 20 | 0; //@line 1859
     HEAP32[$83 >> 2] = $15; //@line 1860
     sp = STACKTOP; //@line 1861
     return;
    }
    HEAP8[___async_retval >> 0] = $78; //@line 1865
    ___async_unwind = 0; //@line 1866
    HEAP32[$ReallocAsyncCtx >> 2] = 555; //@line 1867
    $79 = $ReallocAsyncCtx + 4 | 0; //@line 1868
    HEAP32[$79 >> 2] = $2; //@line 1869
    $80 = $ReallocAsyncCtx + 8 | 0; //@line 1870
    HEAP32[$80 >> 2] = $6; //@line 1871
    $81 = $ReallocAsyncCtx + 12 | 0; //@line 1872
    HEAP32[$81 >> 2] = $8; //@line 1873
    $82 = $ReallocAsyncCtx + 16 | 0; //@line 1874
    HEAP32[$82 >> 2] = $49; //@line 1875
    $83 = $ReallocAsyncCtx + 20 | 0; //@line 1876
    HEAP32[$83 >> 2] = $15; //@line 1877
    sp = STACKTOP; //@line 1878
    return;
   }
  case 2:
   {
    $86 = HEAP8[$2 + 378 >> 0] | 0; //@line 1884
    $88 = HEAP8[$2 + 1097 >> 0] | 0; //@line 1886
    $90 = HEAP8[$2 + 1096 >> 0] | 0; //@line 1888
    $92 = +HEAPF32[$2 + 1144 >> 2]; //@line 1890
    $94 = +HEAPF32[$2 + 1148 >> 2]; //@line 1892
    $96 = HEAP16[$4 + 4 >> 1] | 0; //@line 1894
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 1895
    __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($12, $86, $88, $90, $92, $94, $96); //@line 1896
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 558; //@line 1899
     $97 = $ReallocAsyncCtx7 + 4 | 0; //@line 1900
     HEAP32[$97 >> 2] = $2; //@line 1901
     $98 = $ReallocAsyncCtx7 + 8 | 0; //@line 1902
     HEAP32[$98 >> 2] = $9; //@line 1903
     sp = STACKTOP; //@line 1904
     return;
    }
    ___async_unwind = 0; //@line 1907
    HEAP32[$ReallocAsyncCtx7 >> 2] = 558; //@line 1908
    $97 = $ReallocAsyncCtx7 + 4 | 0; //@line 1909
    HEAP32[$97 >> 2] = $2; //@line 1910
    $98 = $ReallocAsyncCtx7 + 8 | 0; //@line 1911
    HEAP32[$98 >> 2] = $9; //@line 1912
    sp = STACKTOP; //@line 1913
    return;
   }
  case 3:
   {
    $101 = HEAP8[$4 + 12 >> 0] | 0; //@line 1920
    $102 = HEAP16[$4 + 4 >> 1] | 0; //@line 1921
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 1922
    __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($12, 0, 0, $101, 0.0, 0.0, $102); //@line 1923
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 560; //@line 1926
     $103 = $ReallocAsyncCtx6 + 4 | 0; //@line 1927
     HEAP32[$103 >> 2] = $2; //@line 1928
     $104 = $ReallocAsyncCtx6 + 8 | 0; //@line 1929
     HEAP32[$104 >> 2] = $9; //@line 1930
     sp = STACKTOP; //@line 1931
     return;
    }
    ___async_unwind = 0; //@line 1934
    HEAP32[$ReallocAsyncCtx6 >> 2] = 560; //@line 1935
    $103 = $ReallocAsyncCtx6 + 4 | 0; //@line 1936
    HEAP32[$103 >> 2] = $2; //@line 1937
    $104 = $ReallocAsyncCtx6 + 8 | 0; //@line 1938
    HEAP32[$104 >> 2] = $9; //@line 1939
    sp = STACKTOP; //@line 1940
    return;
   }
  default:
   {
    $$024 = -1002; //@line 1945
    $108 = $17; //@line 1945
   }
  }
 } while (0);
 HEAP8[$2 + 373 >> 0] = 0; //@line 1950
 HEAP8[$15 >> 0] = $108 & -9; //@line 1952
 $$1 = $$024; //@line 1953
 $109 = ___async_retval; //@line 1954
 HEAP32[$109 >> 2] = $$1; //@line 1955
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $68 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 748
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 750
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 752
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 754
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 756
 $10 = HEAP8[$0 + 16 >> 0] | 0; //@line 758
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 760
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 762
 $$pre$i = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 765
 $17 = $14 + 12 | 0; //@line 766
 HEAP32[$17 >> 2] = $$pre$i; //@line 767
 if ($$pre$i | 0) {
  $20 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 772
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 773
  FUNCTION_TABLE_vii[$20 & 31]($2, $14); //@line 774
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 416; //@line 777
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 778
   HEAP32[$21 >> 2] = $17; //@line 779
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 780
   HEAP32[$22 >> 2] = $2; //@line 781
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 782
   HEAP32[$23 >> 2] = $17; //@line 783
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 784
   HEAP32[$24 >> 2] = $4; //@line 785
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 786
   HEAP16[$25 >> 1] = $6; //@line 787
   $26 = $ReallocAsyncCtx2 + 22 | 0; //@line 788
   HEAP16[$26 >> 1] = $8; //@line 789
   $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 790
   HEAP8[$27 >> 0] = $10; //@line 791
   $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 792
   HEAP32[$28 >> 2] = $12; //@line 793
   $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 794
   HEAP32[$29 >> 2] = $14; //@line 795
   sp = STACKTOP; //@line 796
   return;
  }
  ___async_unwind = 0; //@line 799
  HEAP32[$ReallocAsyncCtx2 >> 2] = 416; //@line 800
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 801
  HEAP32[$21 >> 2] = $17; //@line 802
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 803
  HEAP32[$22 >> 2] = $2; //@line 804
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 805
  HEAP32[$23 >> 2] = $17; //@line 806
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 807
  HEAP32[$24 >> 2] = $4; //@line 808
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 809
  HEAP16[$25 >> 1] = $6; //@line 810
  $26 = $ReallocAsyncCtx2 + 22 | 0; //@line 811
  HEAP16[$26 >> 1] = $8; //@line 812
  $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 813
  HEAP8[$27 >> 0] = $10; //@line 814
  $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 815
  HEAP32[$28 >> 2] = $12; //@line 816
  $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 817
  HEAP32[$29 >> 2] = $14; //@line 818
  sp = STACKTOP; //@line 819
  return;
 }
 $30 = $2 + 12 | 0; //@line 822
 HEAP32[$30 >> 2] = 0; //@line 823
 $31 = $2 + 16 | 0; //@line 824
 HEAP32[$31 >> 2] = $4; //@line 825
 HEAP16[$2 + 20 >> 1] = $6; //@line 827
 HEAP16[$2 + 22 >> 1] = $8; //@line 829
 HEAP8[$2 + 24 >> 0] = $10; //@line 831
 $35 = _equeue_alloc($12, 28) | 0; //@line 832
 if ($35 | 0) {
  $37 = HEAP32[$30 >> 2] | 0; //@line 835
  if (!$37) {
   HEAP32[$35 + 12 >> 2] = 0; //@line 839
   $50 = $35 + 16 | 0; //@line 840
   HEAP32[$50 >> 2] = HEAP32[$31 >> 2]; //@line 841
   HEAP32[$50 + 4 >> 2] = HEAP32[$31 + 4 >> 2]; //@line 841
   HEAP8[$50 + 8 >> 0] = HEAP8[$31 + 8 >> 0] | 0; //@line 841
   _equeue_event_dtor($35, 418); //@line 842
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 843
   $51 = _equeue_post($12, 419, $35) | 0; //@line 844
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 420; //@line 847
    $52 = $ReallocAsyncCtx6 + 4 | 0; //@line 848
    HEAP32[$52 >> 2] = $30; //@line 849
    $53 = $ReallocAsyncCtx6 + 8 | 0; //@line 850
    HEAP32[$53 >> 2] = $17; //@line 851
    $54 = $ReallocAsyncCtx6 + 12 | 0; //@line 852
    HEAP32[$54 >> 2] = $2; //@line 853
    $55 = $ReallocAsyncCtx6 + 16 | 0; //@line 854
    HEAP32[$55 >> 2] = $14; //@line 855
    sp = STACKTOP; //@line 856
    return;
   }
   HEAP32[___async_retval >> 2] = $51; //@line 860
   ___async_unwind = 0; //@line 861
   HEAP32[$ReallocAsyncCtx6 >> 2] = 420; //@line 862
   $52 = $ReallocAsyncCtx6 + 4 | 0; //@line 863
   HEAP32[$52 >> 2] = $30; //@line 864
   $53 = $ReallocAsyncCtx6 + 8 | 0; //@line 865
   HEAP32[$53 >> 2] = $17; //@line 866
   $54 = $ReallocAsyncCtx6 + 12 | 0; //@line 867
   HEAP32[$54 >> 2] = $2; //@line 868
   $55 = $ReallocAsyncCtx6 + 16 | 0; //@line 869
   HEAP32[$55 >> 2] = $14; //@line 870
   sp = STACKTOP; //@line 871
   return;
  } else {
   $40 = HEAP32[$37 + 4 >> 2] | 0; //@line 875
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 876
   FUNCTION_TABLE_vii[$40 & 31]($35, $2); //@line 877
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 417; //@line 880
    $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 881
    HEAP32[$41 >> 2] = $30; //@line 882
    $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 883
    HEAP32[$42 >> 2] = $35; //@line 884
    $43 = $ReallocAsyncCtx3 + 12 | 0; //@line 885
    HEAP32[$43 >> 2] = $31; //@line 886
    $44 = $ReallocAsyncCtx3 + 16 | 0; //@line 887
    HEAP32[$44 >> 2] = $12; //@line 888
    $45 = $ReallocAsyncCtx3 + 20 | 0; //@line 889
    HEAP32[$45 >> 2] = $30; //@line 890
    $46 = $ReallocAsyncCtx3 + 24 | 0; //@line 891
    HEAP32[$46 >> 2] = $17; //@line 892
    $47 = $ReallocAsyncCtx3 + 28 | 0; //@line 893
    HEAP32[$47 >> 2] = $2; //@line 894
    $48 = $ReallocAsyncCtx3 + 32 | 0; //@line 895
    HEAP32[$48 >> 2] = $14; //@line 896
    sp = STACKTOP; //@line 897
    return;
   }
   ___async_unwind = 0; //@line 900
   HEAP32[$ReallocAsyncCtx3 >> 2] = 417; //@line 901
   $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 902
   HEAP32[$41 >> 2] = $30; //@line 903
   $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 904
   HEAP32[$42 >> 2] = $35; //@line 905
   $43 = $ReallocAsyncCtx3 + 12 | 0; //@line 906
   HEAP32[$43 >> 2] = $31; //@line 907
   $44 = $ReallocAsyncCtx3 + 16 | 0; //@line 908
   HEAP32[$44 >> 2] = $12; //@line 909
   $45 = $ReallocAsyncCtx3 + 20 | 0; //@line 910
   HEAP32[$45 >> 2] = $30; //@line 911
   $46 = $ReallocAsyncCtx3 + 24 | 0; //@line 912
   HEAP32[$46 >> 2] = $17; //@line 913
   $47 = $ReallocAsyncCtx3 + 28 | 0; //@line 914
   HEAP32[$47 >> 2] = $2; //@line 915
   $48 = $ReallocAsyncCtx3 + 32 | 0; //@line 916
   HEAP32[$48 >> 2] = $14; //@line 917
   sp = STACKTOP; //@line 918
   return;
  }
 }
 $57 = HEAP32[$30 >> 2] | 0; //@line 922
 if ($57 | 0) {
  $60 = HEAP32[$57 + 8 >> 2] | 0; //@line 926
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 927
  FUNCTION_TABLE_vi[$60 & 1023]($2); //@line 928
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 421; //@line 931
   $61 = $ReallocAsyncCtx4 + 4 | 0; //@line 932
   HEAP32[$61 >> 2] = $17; //@line 933
   $62 = $ReallocAsyncCtx4 + 8 | 0; //@line 934
   HEAP32[$62 >> 2] = 0; //@line 935
   $63 = $ReallocAsyncCtx4 + 12 | 0; //@line 936
   HEAP32[$63 >> 2] = $14; //@line 937
   sp = STACKTOP; //@line 938
   return;
  }
  ___async_unwind = 0; //@line 941
  HEAP32[$ReallocAsyncCtx4 >> 2] = 421; //@line 942
  $61 = $ReallocAsyncCtx4 + 4 | 0; //@line 943
  HEAP32[$61 >> 2] = $17; //@line 944
  $62 = $ReallocAsyncCtx4 + 8 | 0; //@line 945
  HEAP32[$62 >> 2] = 0; //@line 946
  $63 = $ReallocAsyncCtx4 + 12 | 0; //@line 947
  HEAP32[$63 >> 2] = $14; //@line 948
  sp = STACKTOP; //@line 949
  return;
 }
 $64 = HEAP32[$17 >> 2] | 0; //@line 952
 if (!$64) {
  HEAP32[___async_retval >> 2] = 0; //@line 956
  return;
 }
 $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 960
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 961
 FUNCTION_TABLE_vi[$67 & 1023]($14); //@line 962
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 422; //@line 965
  $68 = $ReallocAsyncCtx5 + 4 | 0; //@line 966
  HEAP32[$68 >> 2] = 0; //@line 967
  sp = STACKTOP; //@line 968
  return;
 }
 ___async_unwind = 0; //@line 971
 HEAP32[$ReallocAsyncCtx5 >> 2] = 422; //@line 972
 $68 = $ReallocAsyncCtx5 + 4 | 0; //@line 973
 HEAP32[$68 >> 2] = 0; //@line 974
 sp = STACKTOP; //@line 975
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_189($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $12 = 0, $14 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 4182
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4184
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4186
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4188
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4190
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4192
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4194
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4196
 $$pre$i$i = HEAP32[HEAP32[$0 + 32 >> 2] >> 2] | 0; //@line 4201
 HEAP32[HEAP32[$0 + 36 >> 2] >> 2] = $$pre$i$i; //@line 4203
 if ($$pre$i$i | 0) {
  $22 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 4207
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 4208
  FUNCTION_TABLE_vi[$22 & 1023]($6); //@line 4209
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 574; //@line 4212
   $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 4213
   HEAP32[$23 >> 2] = $2; //@line 4214
   $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 4215
   HEAP32[$24 >> 2] = $4; //@line 4216
   $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 4217
   HEAP32[$25 >> 2] = $6; //@line 4218
   $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 4219
   HEAP32[$26 >> 2] = $8; //@line 4220
   $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 4221
   HEAP32[$27 >> 2] = $10; //@line 4222
   $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 4223
   HEAP32[$28 >> 2] = $12; //@line 4224
   $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 4225
   HEAP32[$29 >> 2] = $14; //@line 4226
   sp = STACKTOP; //@line 4227
   return;
  }
  ___async_unwind = 0; //@line 4230
  HEAP32[$ReallocAsyncCtx3 >> 2] = 574; //@line 4231
  $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 4232
  HEAP32[$23 >> 2] = $2; //@line 4233
  $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 4234
  HEAP32[$24 >> 2] = $4; //@line 4235
  $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 4236
  HEAP32[$25 >> 2] = $6; //@line 4237
  $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 4238
  HEAP32[$26 >> 2] = $8; //@line 4239
  $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 4240
  HEAP32[$27 >> 2] = $10; //@line 4241
  $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 4242
  HEAP32[$28 >> 2] = $12; //@line 4243
  $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 4244
  HEAP32[$29 >> 2] = $14; //@line 4245
  sp = STACKTOP; //@line 4246
  return;
 }
 $30 = $8 + 12 | 0; //@line 4249
 HEAP32[$8 >> 2] = 7; //@line 4250
 HEAP32[$8 + 4 >> 2] = 0; //@line 4252
 HEAP32[$8 + 8 >> 2] = $2; //@line 4254
 HEAP32[$30 >> 2] = 860; //@line 4255
 $31 = $2 + 1244 | 0; //@line 4256
 if (($31 | 0) == ($8 | 0)) {
  $58 = HEAP32[217] | 0; //@line 4260
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 4261
  FUNCTION_TABLE_vi[$58 & 1023]($8); //@line 4262
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 577; //@line 4265
   $59 = $ReallocAsyncCtx6 + 4 | 0; //@line 4266
   HEAP32[$59 >> 2] = $2; //@line 4267
   $60 = $ReallocAsyncCtx6 + 8 | 0; //@line 4268
   HEAP32[$60 >> 2] = $4; //@line 4269
   $61 = $ReallocAsyncCtx6 + 12 | 0; //@line 4270
   HEAP32[$61 >> 2] = $10; //@line 4271
   $62 = $ReallocAsyncCtx6 + 16 | 0; //@line 4272
   HEAP32[$62 >> 2] = $8; //@line 4273
   $63 = $ReallocAsyncCtx6 + 20 | 0; //@line 4274
   HEAP32[$63 >> 2] = $12; //@line 4275
   $64 = $ReallocAsyncCtx6 + 24 | 0; //@line 4276
   HEAP32[$64 >> 2] = $14; //@line 4277
   sp = STACKTOP; //@line 4278
   return;
  }
  ___async_unwind = 0; //@line 4281
  HEAP32[$ReallocAsyncCtx6 >> 2] = 577; //@line 4282
  $59 = $ReallocAsyncCtx6 + 4 | 0; //@line 4283
  HEAP32[$59 >> 2] = $2; //@line 4284
  $60 = $ReallocAsyncCtx6 + 8 | 0; //@line 4285
  HEAP32[$60 >> 2] = $4; //@line 4286
  $61 = $ReallocAsyncCtx6 + 12 | 0; //@line 4287
  HEAP32[$61 >> 2] = $10; //@line 4288
  $62 = $ReallocAsyncCtx6 + 16 | 0; //@line 4289
  HEAP32[$62 >> 2] = $8; //@line 4290
  $63 = $ReallocAsyncCtx6 + 20 | 0; //@line 4291
  HEAP32[$63 >> 2] = $12; //@line 4292
  $64 = $ReallocAsyncCtx6 + 24 | 0; //@line 4293
  HEAP32[$64 >> 2] = $14; //@line 4294
  sp = STACKTOP; //@line 4295
  return;
 }
 $33 = $2 + 1256 | 0; //@line 4298
 $34 = HEAP32[$33 >> 2] | 0; //@line 4299
 if (!$34) {
  $48 = HEAP32[216] | 0; //@line 4303
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 4304
  FUNCTION_TABLE_vii[$48 & 31]($31, $8); //@line 4305
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 576; //@line 4308
   $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 4309
   HEAP32[$49 >> 2] = $2; //@line 4310
   $50 = $ReallocAsyncCtx5 + 8 | 0; //@line 4311
   HEAP32[$50 >> 2] = $4; //@line 4312
   $51 = $ReallocAsyncCtx5 + 12 | 0; //@line 4313
   HEAP32[$51 >> 2] = $10; //@line 4314
   $52 = $ReallocAsyncCtx5 + 16 | 0; //@line 4315
   HEAP32[$52 >> 2] = $30; //@line 4316
   $53 = $ReallocAsyncCtx5 + 20 | 0; //@line 4317
   HEAP32[$53 >> 2] = $33; //@line 4318
   $54 = $ReallocAsyncCtx5 + 24 | 0; //@line 4319
   HEAP32[$54 >> 2] = $8; //@line 4320
   $55 = $ReallocAsyncCtx5 + 28 | 0; //@line 4321
   HEAP32[$55 >> 2] = $12; //@line 4322
   $56 = $ReallocAsyncCtx5 + 32 | 0; //@line 4323
   HEAP32[$56 >> 2] = $14; //@line 4324
   sp = STACKTOP; //@line 4325
   return;
  }
  ___async_unwind = 0; //@line 4328
  HEAP32[$ReallocAsyncCtx5 >> 2] = 576; //@line 4329
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 4330
  HEAP32[$49 >> 2] = $2; //@line 4331
  $50 = $ReallocAsyncCtx5 + 8 | 0; //@line 4332
  HEAP32[$50 >> 2] = $4; //@line 4333
  $51 = $ReallocAsyncCtx5 + 12 | 0; //@line 4334
  HEAP32[$51 >> 2] = $10; //@line 4335
  $52 = $ReallocAsyncCtx5 + 16 | 0; //@line 4336
  HEAP32[$52 >> 2] = $30; //@line 4337
  $53 = $ReallocAsyncCtx5 + 20 | 0; //@line 4338
  HEAP32[$53 >> 2] = $33; //@line 4339
  $54 = $ReallocAsyncCtx5 + 24 | 0; //@line 4340
  HEAP32[$54 >> 2] = $8; //@line 4341
  $55 = $ReallocAsyncCtx5 + 28 | 0; //@line 4342
  HEAP32[$55 >> 2] = $12; //@line 4343
  $56 = $ReallocAsyncCtx5 + 32 | 0; //@line 4344
  HEAP32[$56 >> 2] = $14; //@line 4345
  sp = STACKTOP; //@line 4346
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 4350
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 4351
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 4352
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 575; //@line 4355
   $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 4356
   HEAP32[$38 >> 2] = $2; //@line 4357
   $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 4358
   HEAP32[$39 >> 2] = $4; //@line 4359
   $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 4360
   HEAP32[$40 >> 2] = $10; //@line 4361
   $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 4362
   HEAP32[$41 >> 2] = $30; //@line 4363
   $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 4364
   HEAP32[$42 >> 2] = $33; //@line 4365
   $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 4366
   HEAP32[$43 >> 2] = $8; //@line 4367
   $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 4368
   HEAP32[$44 >> 2] = $12; //@line 4369
   $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 4370
   HEAP32[$45 >> 2] = $31; //@line 4371
   $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 4372
   HEAP32[$46 >> 2] = $14; //@line 4373
   sp = STACKTOP; //@line 4374
   return;
  }
  ___async_unwind = 0; //@line 4377
  HEAP32[$ReallocAsyncCtx4 >> 2] = 575; //@line 4378
  $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 4379
  HEAP32[$38 >> 2] = $2; //@line 4380
  $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 4381
  HEAP32[$39 >> 2] = $4; //@line 4382
  $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 4383
  HEAP32[$40 >> 2] = $10; //@line 4384
  $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 4385
  HEAP32[$41 >> 2] = $30; //@line 4386
  $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 4387
  HEAP32[$42 >> 2] = $33; //@line 4388
  $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 4389
  HEAP32[$43 >> 2] = $8; //@line 4390
  $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 4391
  HEAP32[$44 >> 2] = $12; //@line 4392
  $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 4393
  HEAP32[$45 >> 2] = $31; //@line 4394
  $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 4395
  HEAP32[$46 >> 2] = $14; //@line 4396
  sp = STACKTOP; //@line 4397
  return;
 }
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5830
 STACKTOP = STACKTOP + 32 | 0; //@line 5831
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 5831
 $0 = sp; //@line 5832
 _gpio_init_out($0, 50); //@line 5833
 while (1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5836
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5837
  _wait_ms(150); //@line 5838
  if (___async) {
   label = 3; //@line 5841
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 5844
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5846
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5847
  _wait_ms(150); //@line 5848
  if (___async) {
   label = 5; //@line 5851
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 5854
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5856
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5857
  _wait_ms(150); //@line 5858
  if (___async) {
   label = 7; //@line 5861
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 5864
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5866
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5867
  _wait_ms(150); //@line 5868
  if (___async) {
   label = 9; //@line 5871
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 5874
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5876
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5877
  _wait_ms(150); //@line 5878
  if (___async) {
   label = 11; //@line 5881
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 5884
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5886
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5887
  _wait_ms(150); //@line 5888
  if (___async) {
   label = 13; //@line 5891
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 5894
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5896
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5897
  _wait_ms(150); //@line 5898
  if (___async) {
   label = 15; //@line 5901
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 5904
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5906
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5907
  _wait_ms(150); //@line 5908
  if (___async) {
   label = 17; //@line 5911
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 5914
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5916
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5917
  _wait_ms(400); //@line 5918
  if (___async) {
   label = 19; //@line 5921
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 5924
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5926
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5927
  _wait_ms(400); //@line 5928
  if (___async) {
   label = 21; //@line 5931
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 5934
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5936
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5937
  _wait_ms(400); //@line 5938
  if (___async) {
   label = 23; //@line 5941
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 5944
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5946
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5947
  _wait_ms(400); //@line 5948
  if (___async) {
   label = 25; //@line 5951
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 5954
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5956
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5957
  _wait_ms(400); //@line 5958
  if (___async) {
   label = 27; //@line 5961
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5964
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5966
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5967
  _wait_ms(400); //@line 5968
  if (___async) {
   label = 29; //@line 5971
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5974
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 5976
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5977
  _wait_ms(400); //@line 5978
  if (___async) {
   label = 31; //@line 5981
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5984
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 5986
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5987
  _wait_ms(400); //@line 5988
  if (___async) {
   label = 33; //@line 5991
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5994
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 720; //@line 5998
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 6000
   sp = STACKTOP; //@line 6001
   STACKTOP = sp; //@line 6002
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 721; //@line 6006
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 6008
   sp = STACKTOP; //@line 6009
   STACKTOP = sp; //@line 6010
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 722; //@line 6014
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 6016
   sp = STACKTOP; //@line 6017
   STACKTOP = sp; //@line 6018
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 723; //@line 6022
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 6024
   sp = STACKTOP; //@line 6025
   STACKTOP = sp; //@line 6026
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 724; //@line 6030
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 6032
   sp = STACKTOP; //@line 6033
   STACKTOP = sp; //@line 6034
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 725; //@line 6038
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 6040
   sp = STACKTOP; //@line 6041
   STACKTOP = sp; //@line 6042
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 726; //@line 6046
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 6048
   sp = STACKTOP; //@line 6049
   STACKTOP = sp; //@line 6050
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 727; //@line 6054
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 6056
   sp = STACKTOP; //@line 6057
   STACKTOP = sp; //@line 6058
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 728; //@line 6062
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 6064
   sp = STACKTOP; //@line 6065
   STACKTOP = sp; //@line 6066
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 729; //@line 6070
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 6072
   sp = STACKTOP; //@line 6073
   STACKTOP = sp; //@line 6074
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 730; //@line 6078
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 6080
   sp = STACKTOP; //@line 6081
   STACKTOP = sp; //@line 6082
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 731; //@line 6086
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 6088
   sp = STACKTOP; //@line 6089
   STACKTOP = sp; //@line 6090
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 732; //@line 6094
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 6096
   sp = STACKTOP; //@line 6097
   STACKTOP = sp; //@line 6098
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 733; //@line 6102
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 6104
   sp = STACKTOP; //@line 6105
   STACKTOP = sp; //@line 6106
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 734; //@line 6110
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 6112
   sp = STACKTOP; //@line 6113
   STACKTOP = sp; //@line 6114
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 735; //@line 6118
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6120
   sp = STACKTOP; //@line 6121
   STACKTOP = sp; //@line 6122
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_11($0) {
 $0 = $0 | 0;
 var $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $58 = 0, $59 = 0, $61 = 0, $64 = 0, $67 = 0, $69 = 0, $72 = 0, $75 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17035
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17037
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17039
 $5 = $2 + 688 | 0; //@line 17040
 switch (HEAP8[$5 >> 0] | 0) {
 case 1:
  {
   if (!(HEAP8[$2 + 689 >> 0] | 0)) {
    HEAP8[$2 + 732 >> 0] = 0; //@line 17049
    HEAP8[$2 + 733 >> 0] = 0; //@line 17051
    HEAP16[$2 + 744 >> 1] = 0; //@line 17053
    HEAP16[$2 + 742 >> 1] = 0; //@line 17055
    if (!(HEAP8[$2 + 722 >> 0] | 0)) {
     HEAP8[$5 >> 0] = 0; //@line 17060
     $17 = $2 + 1176 | 0; //@line 17061
     $18 = $4 + 12 | 0; //@line 17062
     HEAP32[$4 >> 2] = 74; //@line 17063
     HEAP32[$4 + 4 >> 2] = 0; //@line 17065
     HEAP32[$4 + 8 >> 2] = $2; //@line 17067
     HEAP32[$18 >> 2] = 648; //@line 17068
     $21 = ___muldi3(HEAP32[$2 + 728 >> 2] | 0, 0, 1e3, 0) | 0; //@line 17071
     $22 = tempRet0; //@line 17072
     $23 = $2 + 1216 | 0; //@line 17073
     do {
      if (($23 | 0) != ($4 | 0)) {
       $25 = $2 + 1228 | 0; //@line 17077
       $26 = HEAP32[$25 >> 2] | 0; //@line 17078
       if ($26 | 0) {
        $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 17082
        $ReallocAsyncCtx = _emscripten_realloc_async_context(40) | 0; //@line 17083
        FUNCTION_TABLE_vi[$29 & 1023]($23); //@line 17084
        if (___async) {
         HEAP32[$ReallocAsyncCtx >> 2] = 133; //@line 17087
         $30 = $ReallocAsyncCtx + 4 | 0; //@line 17088
         HEAP32[$30 >> 2] = $18; //@line 17089
         $31 = $ReallocAsyncCtx + 8 | 0; //@line 17090
         HEAP32[$31 >> 2] = $25; //@line 17091
         $32 = $ReallocAsyncCtx + 12 | 0; //@line 17092
         HEAP32[$32 >> 2] = $23; //@line 17093
         $33 = $ReallocAsyncCtx + 16 | 0; //@line 17094
         HEAP32[$33 >> 2] = $4; //@line 17095
         $34 = $ReallocAsyncCtx + 20 | 0; //@line 17096
         HEAP32[$34 >> 2] = $17; //@line 17097
         $35 = $ReallocAsyncCtx + 24 | 0; //@line 17098
         $36 = $35; //@line 17099
         $37 = $36; //@line 17100
         HEAP32[$37 >> 2] = $21; //@line 17101
         $38 = $36 + 4 | 0; //@line 17102
         $39 = $38; //@line 17103
         HEAP32[$39 >> 2] = $22; //@line 17104
         $40 = $ReallocAsyncCtx + 32 | 0; //@line 17105
         HEAP32[$40 >> 2] = $2; //@line 17106
         sp = STACKTOP; //@line 17107
         return;
        }
        ___async_unwind = 0; //@line 17110
        HEAP32[$ReallocAsyncCtx >> 2] = 133; //@line 17111
        $30 = $ReallocAsyncCtx + 4 | 0; //@line 17112
        HEAP32[$30 >> 2] = $18; //@line 17113
        $31 = $ReallocAsyncCtx + 8 | 0; //@line 17114
        HEAP32[$31 >> 2] = $25; //@line 17115
        $32 = $ReallocAsyncCtx + 12 | 0; //@line 17116
        HEAP32[$32 >> 2] = $23; //@line 17117
        $33 = $ReallocAsyncCtx + 16 | 0; //@line 17118
        HEAP32[$33 >> 2] = $4; //@line 17119
        $34 = $ReallocAsyncCtx + 20 | 0; //@line 17120
        HEAP32[$34 >> 2] = $17; //@line 17121
        $35 = $ReallocAsyncCtx + 24 | 0; //@line 17122
        $36 = $35; //@line 17123
        $37 = $36; //@line 17124
        HEAP32[$37 >> 2] = $21; //@line 17125
        $38 = $36 + 4 | 0; //@line 17126
        $39 = $38; //@line 17127
        HEAP32[$39 >> 2] = $22; //@line 17128
        $40 = $ReallocAsyncCtx + 32 | 0; //@line 17129
        HEAP32[$40 >> 2] = $2; //@line 17130
        sp = STACKTOP; //@line 17131
        return;
       }
       $41 = HEAP32[$18 >> 2] | 0; //@line 17134
       if (!$41) {
        HEAP32[$25 >> 2] = 0; //@line 17137
        break;
       }
       $44 = HEAP32[$41 + 4 >> 2] | 0; //@line 17141
       $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 17142
       FUNCTION_TABLE_vii[$44 & 31]($23, $4); //@line 17143
       if (___async) {
        HEAP32[$ReallocAsyncCtx2 >> 2] = 134; //@line 17146
        $45 = $ReallocAsyncCtx2 + 4 | 0; //@line 17147
        HEAP32[$45 >> 2] = $18; //@line 17148
        $46 = $ReallocAsyncCtx2 + 8 | 0; //@line 17149
        HEAP32[$46 >> 2] = $25; //@line 17150
        $47 = $ReallocAsyncCtx2 + 12 | 0; //@line 17151
        HEAP32[$47 >> 2] = $17; //@line 17152
        $48 = $ReallocAsyncCtx2 + 16 | 0; //@line 17153
        $49 = $48; //@line 17154
        $50 = $49; //@line 17155
        HEAP32[$50 >> 2] = $21; //@line 17156
        $51 = $49 + 4 | 0; //@line 17157
        $52 = $51; //@line 17158
        HEAP32[$52 >> 2] = $22; //@line 17159
        $53 = $ReallocAsyncCtx2 + 24 | 0; //@line 17160
        HEAP32[$53 >> 2] = $2; //@line 17161
        $54 = $ReallocAsyncCtx2 + 28 | 0; //@line 17162
        HEAP32[$54 >> 2] = $4; //@line 17163
        sp = STACKTOP; //@line 17164
        return;
       }
       ___async_unwind = 0; //@line 17167
       HEAP32[$ReallocAsyncCtx2 >> 2] = 134; //@line 17168
       $45 = $ReallocAsyncCtx2 + 4 | 0; //@line 17169
       HEAP32[$45 >> 2] = $18; //@line 17170
       $46 = $ReallocAsyncCtx2 + 8 | 0; //@line 17171
       HEAP32[$46 >> 2] = $25; //@line 17172
       $47 = $ReallocAsyncCtx2 + 12 | 0; //@line 17173
       HEAP32[$47 >> 2] = $17; //@line 17174
       $48 = $ReallocAsyncCtx2 + 16 | 0; //@line 17175
       $49 = $48; //@line 17176
       $50 = $49; //@line 17177
       HEAP32[$50 >> 2] = $21; //@line 17178
       $51 = $49 + 4 | 0; //@line 17179
       $52 = $51; //@line 17180
       HEAP32[$52 >> 2] = $22; //@line 17181
       $53 = $ReallocAsyncCtx2 + 24 | 0; //@line 17182
       HEAP32[$53 >> 2] = $2; //@line 17183
       $54 = $ReallocAsyncCtx2 + 28 | 0; //@line 17184
       HEAP32[$54 >> 2] = $4; //@line 17185
       sp = STACKTOP; //@line 17186
       return;
      }
     } while (0);
     __ZN4mbed6Ticker5setupEy($17, $21, $22); //@line 17190
     $55 = HEAP32[$18 >> 2] | 0; //@line 17191
     if ($55 | 0) {
      $58 = HEAP32[$55 + 8 >> 2] | 0; //@line 17195
      $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 17196
      FUNCTION_TABLE_vi[$58 & 1023]($4); //@line 17197
      if (___async) {
       HEAP32[$ReallocAsyncCtx3 >> 2] = 135; //@line 17200
       $59 = $ReallocAsyncCtx3 + 4 | 0; //@line 17201
       HEAP32[$59 >> 2] = $2; //@line 17202
       sp = STACKTOP; //@line 17203
       return;
      }
      ___async_unwind = 0; //@line 17206
      HEAP32[$ReallocAsyncCtx3 >> 2] = 135; //@line 17207
      $59 = $ReallocAsyncCtx3 + 4 | 0; //@line 17208
      HEAP32[$59 >> 2] = $2; //@line 17209
      sp = STACKTOP; //@line 17210
      return;
     }
    }
   }
   $61 = HEAP32[$2 + 788 >> 2] | 0; //@line 17216
   if (!$61) {
    return;
   }
   $64 = HEAP32[$61 + 60 >> 2] | 0; //@line 17222
   if (!$64) {
    return;
   }
   $67 = HEAP32[$64 >> 2] | 0; //@line 17228
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 17229
   FUNCTION_TABLE_vi[$67 & 1023]($61 + 48 | 0); //@line 17230
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 136; //@line 17233
    sp = STACKTOP; //@line 17234
    return;
   }
   ___async_unwind = 0; //@line 17237
   HEAP32[$ReallocAsyncCtx4 >> 2] = 136; //@line 17238
   sp = STACKTOP; //@line 17239
   return;
  }
 case 2:
  {
   HEAP8[$5 >> 0] = 0; //@line 17244
   $69 = HEAP32[$2 + 788 >> 2] | 0; //@line 17246
   if (!$69) {
    return;
   }
   $72 = HEAP32[$69 + 28 >> 2] | 0; //@line 17252
   if (!$72) {
    return;
   }
   $75 = HEAP32[$72 >> 2] | 0; //@line 17258
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 17259
   FUNCTION_TABLE_vi[$75 & 1023]($69 + 16 | 0); //@line 17260
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 137; //@line 17263
    sp = STACKTOP; //@line 17264
    return;
   }
   ___async_unwind = 0; //@line 17267
   HEAP32[$ReallocAsyncCtx5 >> 2] = 137; //@line 17268
   sp = STACKTOP; //@line 17269
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_191($0) {
 $0 = $0 | 0;
 var $$pre119 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 4579
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4581
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4583
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4585
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4587
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4589
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4591
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4593
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4595
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 4597
 $$pre119 = HEAP32[$8 >> 2] | 0; //@line 4598
 if ($$pre119 | 0) {
  $21 = HEAP32[$$pre119 + 4 >> 2] | 0; //@line 4602
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 4603
  FUNCTION_TABLE_vii[$21 & 31]($16, $12); //@line 4604
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 576; //@line 4607
   $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 4608
   HEAP32[$22 >> 2] = $2; //@line 4609
   $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 4610
   HEAP32[$23 >> 2] = $4; //@line 4611
   $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 4612
   HEAP32[$24 >> 2] = $6; //@line 4613
   $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 4614
   HEAP32[$25 >> 2] = $8; //@line 4615
   $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 4616
   HEAP32[$26 >> 2] = $10; //@line 4617
   $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 4618
   HEAP32[$27 >> 2] = $12; //@line 4619
   $28 = $ReallocAsyncCtx5 + 28 | 0; //@line 4620
   HEAP32[$28 >> 2] = $14; //@line 4621
   $29 = $ReallocAsyncCtx5 + 32 | 0; //@line 4622
   HEAP32[$29 >> 2] = $18; //@line 4623
   sp = STACKTOP; //@line 4624
   return;
  }
  ___async_unwind = 0; //@line 4627
  HEAP32[$ReallocAsyncCtx5 >> 2] = 576; //@line 4628
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 4629
  HEAP32[$22 >> 2] = $2; //@line 4630
  $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 4631
  HEAP32[$23 >> 2] = $4; //@line 4632
  $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 4633
  HEAP32[$24 >> 2] = $6; //@line 4634
  $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 4635
  HEAP32[$25 >> 2] = $8; //@line 4636
  $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 4637
  HEAP32[$26 >> 2] = $10; //@line 4638
  $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 4639
  HEAP32[$27 >> 2] = $12; //@line 4640
  $28 = $ReallocAsyncCtx5 + 28 | 0; //@line 4641
  HEAP32[$28 >> 2] = $14; //@line 4642
  $29 = $ReallocAsyncCtx5 + 32 | 0; //@line 4643
  HEAP32[$29 >> 2] = $18; //@line 4644
  sp = STACKTOP; //@line 4645
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 4648
 $30 = $14 + 12 | 0; //@line 4649
 HEAP32[$14 >> 2] = 578; //@line 4650
 HEAP32[$14 + 4 >> 2] = 0; //@line 4652
 HEAP32[$14 + 8 >> 2] = $2; //@line 4654
 HEAP32[$30 >> 2] = 848; //@line 4655
 $31 = $2 + 1276 | 0; //@line 4656
 if (($31 | 0) == ($14 | 0)) {
  $56 = HEAP32[214] | 0; //@line 4660
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 4661
  FUNCTION_TABLE_vi[$56 & 1023]($14); //@line 4662
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 581; //@line 4665
   $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 4666
   HEAP32[$57 >> 2] = $2; //@line 4667
   $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 4668
   HEAP32[$58 >> 2] = $4; //@line 4669
   $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 4670
   HEAP32[$59 >> 2] = $6; //@line 4671
   $60 = $ReallocAsyncCtx9 + 16 | 0; //@line 4672
   HEAP32[$60 >> 2] = $14; //@line 4673
   $61 = $ReallocAsyncCtx9 + 20 | 0; //@line 4674
   HEAP32[$61 >> 2] = $18; //@line 4675
   sp = STACKTOP; //@line 4676
   return;
  }
  ___async_unwind = 0; //@line 4679
  HEAP32[$ReallocAsyncCtx9 >> 2] = 581; //@line 4680
  $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 4681
  HEAP32[$57 >> 2] = $2; //@line 4682
  $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 4683
  HEAP32[$58 >> 2] = $4; //@line 4684
  $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 4685
  HEAP32[$59 >> 2] = $6; //@line 4686
  $60 = $ReallocAsyncCtx9 + 16 | 0; //@line 4687
  HEAP32[$60 >> 2] = $14; //@line 4688
  $61 = $ReallocAsyncCtx9 + 20 | 0; //@line 4689
  HEAP32[$61 >> 2] = $18; //@line 4690
  sp = STACKTOP; //@line 4691
  return;
 }
 $33 = $2 + 1288 | 0; //@line 4694
 $34 = HEAP32[$33 >> 2] | 0; //@line 4695
 if (!$34) {
  $47 = HEAP32[213] | 0; //@line 4699
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 4700
  FUNCTION_TABLE_vii[$47 & 31]($31, $14); //@line 4701
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 580; //@line 4704
   $48 = $ReallocAsyncCtx8 + 4 | 0; //@line 4705
   HEAP32[$48 >> 2] = $2; //@line 4706
   $49 = $ReallocAsyncCtx8 + 8 | 0; //@line 4707
   HEAP32[$49 >> 2] = $4; //@line 4708
   $50 = $ReallocAsyncCtx8 + 12 | 0; //@line 4709
   HEAP32[$50 >> 2] = $6; //@line 4710
   $51 = $ReallocAsyncCtx8 + 16 | 0; //@line 4711
   HEAP32[$51 >> 2] = $30; //@line 4712
   $52 = $ReallocAsyncCtx8 + 20 | 0; //@line 4713
   HEAP32[$52 >> 2] = $33; //@line 4714
   $53 = $ReallocAsyncCtx8 + 24 | 0; //@line 4715
   HEAP32[$53 >> 2] = $14; //@line 4716
   $54 = $ReallocAsyncCtx8 + 28 | 0; //@line 4717
   HEAP32[$54 >> 2] = $18; //@line 4718
   sp = STACKTOP; //@line 4719
   return;
  }
  ___async_unwind = 0; //@line 4722
  HEAP32[$ReallocAsyncCtx8 >> 2] = 580; //@line 4723
  $48 = $ReallocAsyncCtx8 + 4 | 0; //@line 4724
  HEAP32[$48 >> 2] = $2; //@line 4725
  $49 = $ReallocAsyncCtx8 + 8 | 0; //@line 4726
  HEAP32[$49 >> 2] = $4; //@line 4727
  $50 = $ReallocAsyncCtx8 + 12 | 0; //@line 4728
  HEAP32[$50 >> 2] = $6; //@line 4729
  $51 = $ReallocAsyncCtx8 + 16 | 0; //@line 4730
  HEAP32[$51 >> 2] = $30; //@line 4731
  $52 = $ReallocAsyncCtx8 + 20 | 0; //@line 4732
  HEAP32[$52 >> 2] = $33; //@line 4733
  $53 = $ReallocAsyncCtx8 + 24 | 0; //@line 4734
  HEAP32[$53 >> 2] = $14; //@line 4735
  $54 = $ReallocAsyncCtx8 + 28 | 0; //@line 4736
  HEAP32[$54 >> 2] = $18; //@line 4737
  sp = STACKTOP; //@line 4738
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 4742
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 4743
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 4744
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 579; //@line 4747
   $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 4748
   HEAP32[$38 >> 2] = $2; //@line 4749
   $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 4750
   HEAP32[$39 >> 2] = $4; //@line 4751
   $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 4752
   HEAP32[$40 >> 2] = $30; //@line 4753
   $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 4754
   HEAP32[$41 >> 2] = $6; //@line 4755
   $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 4756
   HEAP32[$42 >> 2] = $33; //@line 4757
   $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 4758
   HEAP32[$43 >> 2] = $14; //@line 4759
   $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 4760
   HEAP32[$44 >> 2] = $18; //@line 4761
   $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 4762
   HEAP32[$45 >> 2] = $31; //@line 4763
   sp = STACKTOP; //@line 4764
   return;
  }
  ___async_unwind = 0; //@line 4767
  HEAP32[$ReallocAsyncCtx7 >> 2] = 579; //@line 4768
  $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 4769
  HEAP32[$38 >> 2] = $2; //@line 4770
  $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 4771
  HEAP32[$39 >> 2] = $4; //@line 4772
  $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 4773
  HEAP32[$40 >> 2] = $30; //@line 4774
  $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 4775
  HEAP32[$41 >> 2] = $6; //@line 4776
  $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 4777
  HEAP32[$42 >> 2] = $33; //@line 4778
  $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 4779
  HEAP32[$43 >> 2] = $14; //@line 4780
  $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 4781
  HEAP32[$44 >> 2] = $18; //@line 4782
  $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 4783
  HEAP32[$45 >> 2] = $31; //@line 4784
  sp = STACKTOP; //@line 4785
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 35677
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35679
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 35681
 $6 = HEAP8[$0 + 9 >> 0] | 0; //@line 35683
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 35685
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 35687
 $$pre$i = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 35690
 $13 = $10 + 12 | 0; //@line 35691
 HEAP32[$13 >> 2] = $$pre$i; //@line 35692
 if ($$pre$i | 0) {
  $16 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 35697
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 35698
  FUNCTION_TABLE_vii[$16 & 31]($2, $10); //@line 35699
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 285; //@line 35702
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 35703
   HEAP32[$17 >> 2] = $13; //@line 35704
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 35705
   HEAP32[$18 >> 2] = $2; //@line 35706
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 35707
   HEAP8[$19 >> 0] = $4; //@line 35708
   $20 = $ReallocAsyncCtx2 + 13 | 0; //@line 35709
   HEAP8[$20 >> 0] = $6; //@line 35710
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 35711
   HEAP32[$21 >> 2] = $8; //@line 35712
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 35713
   HEAP32[$22 >> 2] = $13; //@line 35714
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 35715
   HEAP32[$23 >> 2] = $10; //@line 35716
   sp = STACKTOP; //@line 35717
   return;
  }
  ___async_unwind = 0; //@line 35720
  HEAP32[$ReallocAsyncCtx2 >> 2] = 285; //@line 35721
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 35722
  HEAP32[$17 >> 2] = $13; //@line 35723
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 35724
  HEAP32[$18 >> 2] = $2; //@line 35725
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 35726
  HEAP8[$19 >> 0] = $4; //@line 35727
  $20 = $ReallocAsyncCtx2 + 13 | 0; //@line 35728
  HEAP8[$20 >> 0] = $6; //@line 35729
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 35730
  HEAP32[$21 >> 2] = $8; //@line 35731
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 35732
  HEAP32[$22 >> 2] = $13; //@line 35733
  $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 35734
  HEAP32[$23 >> 2] = $10; //@line 35735
  sp = STACKTOP; //@line 35736
  return;
 }
 $24 = $2 + 12 | 0; //@line 35739
 HEAP32[$24 >> 2] = 0; //@line 35740
 $25 = $2 + 16 | 0; //@line 35741
 HEAP8[$25 >> 0] = $4; //@line 35742
 HEAP8[$2 + 17 >> 0] = $6; //@line 35744
 $27 = _equeue_alloc($8, 20) | 0; //@line 35745
 if ($27 | 0) {
  $29 = HEAP32[$24 >> 2] | 0; //@line 35748
  if (!$29) {
   HEAP32[$27 + 12 >> 2] = 0; //@line 35752
   HEAP16[$27 + 16 >> 1] = HEAP16[$25 >> 1] | 0; //@line 35755
   _equeue_event_dtor($27, 287); //@line 35756
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 35757
   $44 = _equeue_post($8, 288, $27) | 0; //@line 35758
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 289; //@line 35761
    $45 = $ReallocAsyncCtx6 + 4 | 0; //@line 35762
    HEAP32[$45 >> 2] = $24; //@line 35763
    $46 = $ReallocAsyncCtx6 + 8 | 0; //@line 35764
    HEAP32[$46 >> 2] = $13; //@line 35765
    $47 = $ReallocAsyncCtx6 + 12 | 0; //@line 35766
    HEAP32[$47 >> 2] = $2; //@line 35767
    $48 = $ReallocAsyncCtx6 + 16 | 0; //@line 35768
    HEAP32[$48 >> 2] = $10; //@line 35769
    sp = STACKTOP; //@line 35770
    return;
   }
   HEAP32[___async_retval >> 2] = $44; //@line 35774
   ___async_unwind = 0; //@line 35775
   HEAP32[$ReallocAsyncCtx6 >> 2] = 289; //@line 35776
   $45 = $ReallocAsyncCtx6 + 4 | 0; //@line 35777
   HEAP32[$45 >> 2] = $24; //@line 35778
   $46 = $ReallocAsyncCtx6 + 8 | 0; //@line 35779
   HEAP32[$46 >> 2] = $13; //@line 35780
   $47 = $ReallocAsyncCtx6 + 12 | 0; //@line 35781
   HEAP32[$47 >> 2] = $2; //@line 35782
   $48 = $ReallocAsyncCtx6 + 16 | 0; //@line 35783
   HEAP32[$48 >> 2] = $10; //@line 35784
   sp = STACKTOP; //@line 35785
   return;
  } else {
   $32 = HEAP32[$29 + 4 >> 2] | 0; //@line 35789
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 35790
   FUNCTION_TABLE_vii[$32 & 31]($27, $2); //@line 35791
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 35794
    $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 35795
    HEAP32[$33 >> 2] = $24; //@line 35796
    $34 = $ReallocAsyncCtx3 + 8 | 0; //@line 35797
    HEAP32[$34 >> 2] = $27; //@line 35798
    $35 = $ReallocAsyncCtx3 + 12 | 0; //@line 35799
    HEAP32[$35 >> 2] = $25; //@line 35800
    $36 = $ReallocAsyncCtx3 + 16 | 0; //@line 35801
    HEAP32[$36 >> 2] = $8; //@line 35802
    $37 = $ReallocAsyncCtx3 + 20 | 0; //@line 35803
    HEAP32[$37 >> 2] = $24; //@line 35804
    $38 = $ReallocAsyncCtx3 + 24 | 0; //@line 35805
    HEAP32[$38 >> 2] = $13; //@line 35806
    $39 = $ReallocAsyncCtx3 + 28 | 0; //@line 35807
    HEAP32[$39 >> 2] = $2; //@line 35808
    $40 = $ReallocAsyncCtx3 + 32 | 0; //@line 35809
    HEAP32[$40 >> 2] = $10; //@line 35810
    sp = STACKTOP; //@line 35811
    return;
   }
   ___async_unwind = 0; //@line 35814
   HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 35815
   $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 35816
   HEAP32[$33 >> 2] = $24; //@line 35817
   $34 = $ReallocAsyncCtx3 + 8 | 0; //@line 35818
   HEAP32[$34 >> 2] = $27; //@line 35819
   $35 = $ReallocAsyncCtx3 + 12 | 0; //@line 35820
   HEAP32[$35 >> 2] = $25; //@line 35821
   $36 = $ReallocAsyncCtx3 + 16 | 0; //@line 35822
   HEAP32[$36 >> 2] = $8; //@line 35823
   $37 = $ReallocAsyncCtx3 + 20 | 0; //@line 35824
   HEAP32[$37 >> 2] = $24; //@line 35825
   $38 = $ReallocAsyncCtx3 + 24 | 0; //@line 35826
   HEAP32[$38 >> 2] = $13; //@line 35827
   $39 = $ReallocAsyncCtx3 + 28 | 0; //@line 35828
   HEAP32[$39 >> 2] = $2; //@line 35829
   $40 = $ReallocAsyncCtx3 + 32 | 0; //@line 35830
   HEAP32[$40 >> 2] = $10; //@line 35831
   sp = STACKTOP; //@line 35832
   return;
  }
 }
 $50 = HEAP32[$24 >> 2] | 0; //@line 35836
 if ($50 | 0) {
  $53 = HEAP32[$50 + 8 >> 2] | 0; //@line 35840
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 35841
  FUNCTION_TABLE_vi[$53 & 1023]($2); //@line 35842
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 290; //@line 35845
   $54 = $ReallocAsyncCtx4 + 4 | 0; //@line 35846
   HEAP32[$54 >> 2] = $13; //@line 35847
   $55 = $ReallocAsyncCtx4 + 8 | 0; //@line 35848
   HEAP32[$55 >> 2] = 0; //@line 35849
   $56 = $ReallocAsyncCtx4 + 12 | 0; //@line 35850
   HEAP32[$56 >> 2] = $10; //@line 35851
   sp = STACKTOP; //@line 35852
   return;
  }
  ___async_unwind = 0; //@line 35855
  HEAP32[$ReallocAsyncCtx4 >> 2] = 290; //@line 35856
  $54 = $ReallocAsyncCtx4 + 4 | 0; //@line 35857
  HEAP32[$54 >> 2] = $13; //@line 35858
  $55 = $ReallocAsyncCtx4 + 8 | 0; //@line 35859
  HEAP32[$55 >> 2] = 0; //@line 35860
  $56 = $ReallocAsyncCtx4 + 12 | 0; //@line 35861
  HEAP32[$56 >> 2] = $10; //@line 35862
  sp = STACKTOP; //@line 35863
  return;
 }
 $57 = HEAP32[$13 >> 2] | 0; //@line 35866
 if (!$57) {
  HEAP32[___async_retval >> 2] = 0; //@line 35870
  return;
 }
 $60 = HEAP32[$57 + 8 >> 2] | 0; //@line 35874
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 35875
 FUNCTION_TABLE_vi[$60 & 1023]($10); //@line 35876
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 35879
  $61 = $ReallocAsyncCtx5 + 4 | 0; //@line 35880
  HEAP32[$61 >> 2] = 0; //@line 35881
  sp = STACKTOP; //@line 35882
  return;
 }
 ___async_unwind = 0; //@line 35885
 HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 35886
 $61 = $ReallocAsyncCtx5 + 4 | 0; //@line 35887
 HEAP32[$61 >> 2] = 0; //@line 35888
 sp = STACKTOP; //@line 35889
 return;
}
function __ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb_443($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $48 = 0, $54 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31743
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31745
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 31751
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 31753
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 31755
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 31757
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 31759
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 31761
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 31763
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 31765
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 31767
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 31769
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 31771
 $34 = HEAP8[$2 >> 0] | 0; //@line 31772
 $39 = ($34 & 255) + (HEAPU8[$0 + 8 >> 0] | 0) & 255; //@line 31776
 $30 = (HEAP8[$0 + 9 >> 0] | 0) + 1 << 24 >> 24; //@line 31777
 if (($30 & 255) >= (HEAPU8[$8 >> 0] | 0)) {
  return;
 }
 if ((($34 & 255) + (HEAPU8[$10 >> 0] | 0) | 0) >>> 0 > ($30 & 255) >>> 0) {
  $37 = HEAP32[$14 >> 2] | 0; //@line 31790
  $38 = $39 & 255; //@line 31791
  $42 = HEAPU8[$37 + $38 >> 0] | 0; //@line 31794
  HEAP32[$16 >> 2] = $42; //@line 31795
  $48 = (HEAPU8[$37 + ($38 + 1) >> 0] | 0) << 8 | $42; //@line 31801
  HEAP32[$16 >> 2] = $48; //@line 31802
  $54 = (HEAPU8[$37 + ($38 + 2) >> 0] | 0) << 16 | $48; //@line 31808
  HEAP32[$16 >> 2] = $54 * 100; //@line 31810
  HEAP32[$18 >> 2] = 0; //@line 31811
  if ($54 | 0) {
   $59 = HEAP32[(HEAP32[$26 >> 2] | 0) + 60 >> 2] | 0; //@line 31816
   $ReallocAsyncCtx = _emscripten_realloc_async_context(56) | 0; //@line 31817
   FUNCTION_TABLE_iiii[$59 & 15]($24, $28, $30) | 0; //@line 31818
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 620; //@line 31821
    $60 = $ReallocAsyncCtx + 4 | 0; //@line 31822
    HEAP32[$60 >> 2] = $2; //@line 31823
    $61 = $ReallocAsyncCtx + 8 | 0; //@line 31824
    HEAP8[$61 >> 0] = $39; //@line 31825
    $62 = $ReallocAsyncCtx + 9 | 0; //@line 31826
    HEAP8[$62 >> 0] = $30; //@line 31827
    $63 = $ReallocAsyncCtx + 12 | 0; //@line 31828
    HEAP32[$63 >> 2] = $8; //@line 31829
    $64 = $ReallocAsyncCtx + 16 | 0; //@line 31830
    HEAP32[$64 >> 2] = $10; //@line 31831
    $65 = $ReallocAsyncCtx + 20 | 0; //@line 31832
    HEAP32[$65 >> 2] = $12; //@line 31833
    $66 = $ReallocAsyncCtx + 24 | 0; //@line 31834
    HEAP32[$66 >> 2] = $14; //@line 31835
    $67 = $ReallocAsyncCtx + 28 | 0; //@line 31836
    HEAP32[$67 >> 2] = $16; //@line 31837
    $68 = $ReallocAsyncCtx + 32 | 0; //@line 31838
    HEAP32[$68 >> 2] = $18; //@line 31839
    $69 = $ReallocAsyncCtx + 36 | 0; //@line 31840
    HEAP32[$69 >> 2] = $20; //@line 31841
    $70 = $ReallocAsyncCtx + 40 | 0; //@line 31842
    HEAP32[$70 >> 2] = $22; //@line 31843
    $71 = $ReallocAsyncCtx + 44 | 0; //@line 31844
    HEAP32[$71 >> 2] = $24; //@line 31845
    $72 = $ReallocAsyncCtx + 48 | 0; //@line 31846
    HEAP32[$72 >> 2] = $26; //@line 31847
    $73 = $ReallocAsyncCtx + 52 | 0; //@line 31848
    HEAP32[$73 >> 2] = $28; //@line 31849
    sp = STACKTOP; //@line 31850
    return;
   }
   ___async_unwind = 0; //@line 31853
   HEAP32[$ReallocAsyncCtx >> 2] = 620; //@line 31854
   $60 = $ReallocAsyncCtx + 4 | 0; //@line 31855
   HEAP32[$60 >> 2] = $2; //@line 31856
   $61 = $ReallocAsyncCtx + 8 | 0; //@line 31857
   HEAP8[$61 >> 0] = $39; //@line 31858
   $62 = $ReallocAsyncCtx + 9 | 0; //@line 31859
   HEAP8[$62 >> 0] = $30; //@line 31860
   $63 = $ReallocAsyncCtx + 12 | 0; //@line 31861
   HEAP32[$63 >> 2] = $8; //@line 31862
   $64 = $ReallocAsyncCtx + 16 | 0; //@line 31863
   HEAP32[$64 >> 2] = $10; //@line 31864
   $65 = $ReallocAsyncCtx + 20 | 0; //@line 31865
   HEAP32[$65 >> 2] = $12; //@line 31866
   $66 = $ReallocAsyncCtx + 24 | 0; //@line 31867
   HEAP32[$66 >> 2] = $14; //@line 31868
   $67 = $ReallocAsyncCtx + 28 | 0; //@line 31869
   HEAP32[$67 >> 2] = $16; //@line 31870
   $68 = $ReallocAsyncCtx + 32 | 0; //@line 31871
   HEAP32[$68 >> 2] = $18; //@line 31872
   $69 = $ReallocAsyncCtx + 36 | 0; //@line 31873
   HEAP32[$69 >> 2] = $20; //@line 31874
   $70 = $ReallocAsyncCtx + 40 | 0; //@line 31875
   HEAP32[$70 >> 2] = $22; //@line 31876
   $71 = $ReallocAsyncCtx + 44 | 0; //@line 31877
   HEAP32[$71 >> 2] = $24; //@line 31878
   $72 = $ReallocAsyncCtx + 48 | 0; //@line 31879
   HEAP32[$72 >> 2] = $26; //@line 31880
   $73 = $ReallocAsyncCtx + 52 | 0; //@line 31881
   HEAP32[$73 >> 2] = $28; //@line 31882
   sp = STACKTOP; //@line 31883
   return;
  }
 } else {
  HEAP32[$16 >> 2] = 0; //@line 31887
  HEAP8[$20 >> 0] = 0; //@line 31888
  HEAP32[$18 >> 2] = 0; //@line 31889
 }
 $76 = HEAP32[(HEAP32[$22 >> 2] | 0) + 64 >> 2] | 0; //@line 31893
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 31894
 FUNCTION_TABLE_iii[$76 & 31]($24, $30) | 0; //@line 31895
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 621; //@line 31898
  $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 31899
  HEAP32[$77 >> 2] = $2; //@line 31900
  $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 31901
  HEAP8[$78 >> 0] = $39; //@line 31902
  $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 31903
  HEAP8[$79 >> 0] = $30; //@line 31904
  $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 31905
  HEAP32[$80 >> 2] = $8; //@line 31906
  $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 31907
  HEAP32[$81 >> 2] = $10; //@line 31908
  $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 31909
  HEAP32[$82 >> 2] = $12; //@line 31910
  $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 31911
  HEAP32[$83 >> 2] = $14; //@line 31912
  $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 31913
  HEAP32[$84 >> 2] = $16; //@line 31914
  $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 31915
  HEAP32[$85 >> 2] = $18; //@line 31916
  $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 31917
  HEAP32[$86 >> 2] = $20; //@line 31918
  $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 31919
  HEAP32[$87 >> 2] = $22; //@line 31920
  $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 31921
  HEAP32[$88 >> 2] = $24; //@line 31922
  $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 31923
  HEAP32[$89 >> 2] = $26; //@line 31924
  $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 31925
  HEAP32[$90 >> 2] = $28; //@line 31926
  sp = STACKTOP; //@line 31927
  return;
 }
 ___async_unwind = 0; //@line 31930
 HEAP32[$ReallocAsyncCtx2 >> 2] = 621; //@line 31931
 $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 31932
 HEAP32[$77 >> 2] = $2; //@line 31933
 $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 31934
 HEAP8[$78 >> 0] = $39; //@line 31935
 $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 31936
 HEAP8[$79 >> 0] = $30; //@line 31937
 $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 31938
 HEAP32[$80 >> 2] = $8; //@line 31939
 $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 31940
 HEAP32[$81 >> 2] = $10; //@line 31941
 $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 31942
 HEAP32[$82 >> 2] = $12; //@line 31943
 $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 31944
 HEAP32[$83 >> 2] = $14; //@line 31945
 $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 31946
 HEAP32[$84 >> 2] = $16; //@line 31947
 $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 31948
 HEAP32[$85 >> 2] = $18; //@line 31949
 $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 31950
 HEAP32[$86 >> 2] = $20; //@line 31951
 $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 31952
 HEAP32[$87 >> 2] = $22; //@line 31953
 $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 31954
 HEAP32[$88 >> 2] = $24; //@line 31955
 $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 31956
 HEAP32[$89 >> 2] = $26; //@line 31957
 $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 31958
 HEAP32[$90 >> 2] = $28; //@line 31959
 sp = STACKTOP; //@line 31960
 return;
}
function __ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $48 = 0, $54 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31515
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31517
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 31523
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 31525
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 31527
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 31529
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 31531
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 31533
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 31535
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 31537
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 31539
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 31541
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 31543
 $34 = HEAP8[$2 >> 0] | 0; //@line 31544
 $39 = ($34 & 255) + (HEAPU8[$0 + 8 >> 0] | 0) & 255; //@line 31548
 $30 = (HEAP8[$0 + 9 >> 0] | 0) + 1 << 24 >> 24; //@line 31549
 if (($30 & 255) >= (HEAPU8[$8 >> 0] | 0)) {
  return;
 }
 if ((($34 & 255) + (HEAPU8[$10 >> 0] | 0) | 0) >>> 0 > ($30 & 255) >>> 0) {
  $37 = HEAP32[$14 >> 2] | 0; //@line 31562
  $38 = $39 & 255; //@line 31563
  $42 = HEAPU8[$37 + $38 >> 0] | 0; //@line 31566
  HEAP32[$16 >> 2] = $42; //@line 31567
  $48 = (HEAPU8[$37 + ($38 + 1) >> 0] | 0) << 8 | $42; //@line 31573
  HEAP32[$16 >> 2] = $48; //@line 31574
  $54 = (HEAPU8[$37 + ($38 + 2) >> 0] | 0) << 16 | $48; //@line 31580
  HEAP32[$16 >> 2] = $54 * 100; //@line 31582
  HEAP32[$18 >> 2] = 0; //@line 31583
  if ($54 | 0) {
   $59 = HEAP32[(HEAP32[$26 >> 2] | 0) + 60 >> 2] | 0; //@line 31588
   $ReallocAsyncCtx = _emscripten_realloc_async_context(56) | 0; //@line 31589
   FUNCTION_TABLE_iiii[$59 & 15]($24, $28, $30) | 0; //@line 31590
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 620; //@line 31593
    $60 = $ReallocAsyncCtx + 4 | 0; //@line 31594
    HEAP32[$60 >> 2] = $2; //@line 31595
    $61 = $ReallocAsyncCtx + 8 | 0; //@line 31596
    HEAP8[$61 >> 0] = $39; //@line 31597
    $62 = $ReallocAsyncCtx + 9 | 0; //@line 31598
    HEAP8[$62 >> 0] = $30; //@line 31599
    $63 = $ReallocAsyncCtx + 12 | 0; //@line 31600
    HEAP32[$63 >> 2] = $8; //@line 31601
    $64 = $ReallocAsyncCtx + 16 | 0; //@line 31602
    HEAP32[$64 >> 2] = $10; //@line 31603
    $65 = $ReallocAsyncCtx + 20 | 0; //@line 31604
    HEAP32[$65 >> 2] = $12; //@line 31605
    $66 = $ReallocAsyncCtx + 24 | 0; //@line 31606
    HEAP32[$66 >> 2] = $14; //@line 31607
    $67 = $ReallocAsyncCtx + 28 | 0; //@line 31608
    HEAP32[$67 >> 2] = $16; //@line 31609
    $68 = $ReallocAsyncCtx + 32 | 0; //@line 31610
    HEAP32[$68 >> 2] = $18; //@line 31611
    $69 = $ReallocAsyncCtx + 36 | 0; //@line 31612
    HEAP32[$69 >> 2] = $20; //@line 31613
    $70 = $ReallocAsyncCtx + 40 | 0; //@line 31614
    HEAP32[$70 >> 2] = $22; //@line 31615
    $71 = $ReallocAsyncCtx + 44 | 0; //@line 31616
    HEAP32[$71 >> 2] = $24; //@line 31617
    $72 = $ReallocAsyncCtx + 48 | 0; //@line 31618
    HEAP32[$72 >> 2] = $26; //@line 31619
    $73 = $ReallocAsyncCtx + 52 | 0; //@line 31620
    HEAP32[$73 >> 2] = $28; //@line 31621
    sp = STACKTOP; //@line 31622
    return;
   }
   ___async_unwind = 0; //@line 31625
   HEAP32[$ReallocAsyncCtx >> 2] = 620; //@line 31626
   $60 = $ReallocAsyncCtx + 4 | 0; //@line 31627
   HEAP32[$60 >> 2] = $2; //@line 31628
   $61 = $ReallocAsyncCtx + 8 | 0; //@line 31629
   HEAP8[$61 >> 0] = $39; //@line 31630
   $62 = $ReallocAsyncCtx + 9 | 0; //@line 31631
   HEAP8[$62 >> 0] = $30; //@line 31632
   $63 = $ReallocAsyncCtx + 12 | 0; //@line 31633
   HEAP32[$63 >> 2] = $8; //@line 31634
   $64 = $ReallocAsyncCtx + 16 | 0; //@line 31635
   HEAP32[$64 >> 2] = $10; //@line 31636
   $65 = $ReallocAsyncCtx + 20 | 0; //@line 31637
   HEAP32[$65 >> 2] = $12; //@line 31638
   $66 = $ReallocAsyncCtx + 24 | 0; //@line 31639
   HEAP32[$66 >> 2] = $14; //@line 31640
   $67 = $ReallocAsyncCtx + 28 | 0; //@line 31641
   HEAP32[$67 >> 2] = $16; //@line 31642
   $68 = $ReallocAsyncCtx + 32 | 0; //@line 31643
   HEAP32[$68 >> 2] = $18; //@line 31644
   $69 = $ReallocAsyncCtx + 36 | 0; //@line 31645
   HEAP32[$69 >> 2] = $20; //@line 31646
   $70 = $ReallocAsyncCtx + 40 | 0; //@line 31647
   HEAP32[$70 >> 2] = $22; //@line 31648
   $71 = $ReallocAsyncCtx + 44 | 0; //@line 31649
   HEAP32[$71 >> 2] = $24; //@line 31650
   $72 = $ReallocAsyncCtx + 48 | 0; //@line 31651
   HEAP32[$72 >> 2] = $26; //@line 31652
   $73 = $ReallocAsyncCtx + 52 | 0; //@line 31653
   HEAP32[$73 >> 2] = $28; //@line 31654
   sp = STACKTOP; //@line 31655
   return;
  }
 } else {
  HEAP32[$16 >> 2] = 0; //@line 31659
  HEAP8[$20 >> 0] = 0; //@line 31660
  HEAP32[$18 >> 2] = 0; //@line 31661
 }
 $76 = HEAP32[(HEAP32[$22 >> 2] | 0) + 64 >> 2] | 0; //@line 31665
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 31666
 FUNCTION_TABLE_iii[$76 & 31]($24, $30) | 0; //@line 31667
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 621; //@line 31670
  $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 31671
  HEAP32[$77 >> 2] = $2; //@line 31672
  $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 31673
  HEAP8[$78 >> 0] = $39; //@line 31674
  $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 31675
  HEAP8[$79 >> 0] = $30; //@line 31676
  $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 31677
  HEAP32[$80 >> 2] = $8; //@line 31678
  $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 31679
  HEAP32[$81 >> 2] = $10; //@line 31680
  $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 31681
  HEAP32[$82 >> 2] = $12; //@line 31682
  $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 31683
  HEAP32[$83 >> 2] = $14; //@line 31684
  $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 31685
  HEAP32[$84 >> 2] = $16; //@line 31686
  $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 31687
  HEAP32[$85 >> 2] = $18; //@line 31688
  $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 31689
  HEAP32[$86 >> 2] = $20; //@line 31690
  $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 31691
  HEAP32[$87 >> 2] = $22; //@line 31692
  $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 31693
  HEAP32[$88 >> 2] = $24; //@line 31694
  $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 31695
  HEAP32[$89 >> 2] = $26; //@line 31696
  $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 31697
  HEAP32[$90 >> 2] = $28; //@line 31698
  sp = STACKTOP; //@line 31699
  return;
 }
 ___async_unwind = 0; //@line 31702
 HEAP32[$ReallocAsyncCtx2 >> 2] = 621; //@line 31703
 $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 31704
 HEAP32[$77 >> 2] = $2; //@line 31705
 $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 31706
 HEAP8[$78 >> 0] = $39; //@line 31707
 $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 31708
 HEAP8[$79 >> 0] = $30; //@line 31709
 $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 31710
 HEAP32[$80 >> 2] = $8; //@line 31711
 $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 31712
 HEAP32[$81 >> 2] = $10; //@line 31713
 $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 31714
 HEAP32[$82 >> 2] = $12; //@line 31715
 $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 31716
 HEAP32[$83 >> 2] = $14; //@line 31717
 $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 31718
 HEAP32[$84 >> 2] = $16; //@line 31719
 $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 31720
 HEAP32[$85 >> 2] = $18; //@line 31721
 $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 31722
 HEAP32[$86 >> 2] = $20; //@line 31723
 $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 31724
 HEAP32[$87 >> 2] = $22; //@line 31725
 $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 31726
 HEAP32[$88 >> 2] = $24; //@line 31727
 $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 31728
 HEAP32[$89 >> 2] = $26; //@line 31729
 $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 31730
 HEAP32[$90 >> 2] = $28; //@line 31731
 sp = STACKTOP; //@line 31732
 return;
}
function _mbedtls_gcm_setkey__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $121 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $139 = 0, $144 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $160 = 0, $162 = 0, $167 = 0, $171 = 0, $172 = 0, $174 = 0, $178 = 0, $179 = 0, $181 = 0, $185 = 0, $186 = 0, $188 = 0, $192 = 0, $193 = 0, $195 = 0, $199 = 0, $200 = 0, $202 = 0, $206 = 0, $207 = 0, $209 = 0, $213 = 0, $214 = 0, $216 = 0, $220 = 0, $221 = 0, $223 = 0, $230 = 0, $237 = 0, $244 = 0, $251 = 0, $258 = 0, $265 = 0, $27 = 0, $272 = 0, $279 = 0, $286 = 0, $293 = 0, $300 = 0, $307 = 0, $314 = 0, $321 = 0, $4 = 0, $45 = 0, $6 = 0, $63 = 0, $81 = 0, $83 = 0, $88 = 0, $93 = 0, $98 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10674
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10676
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10680
 if (!$AsyncRetVal) {
  $27 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 10699
  $45 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 10717
  $63 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 10735
  $81 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 10753
  $83 = $6 + 136 | 0; //@line 10755
  HEAP32[$83 >> 2] = $81; //@line 10757
  HEAP32[$83 + 4 >> 2] = $63; //@line 10760
  $88 = $6 + 264 | 0; //@line 10762
  HEAP32[$88 >> 2] = $45; //@line 10764
  HEAP32[$88 + 4 >> 2] = $27; //@line 10767
  $93 = $6 + 200 | 0; //@line 10769
  HEAP32[$93 >> 2] = 0; //@line 10771
  HEAP32[$93 + 4 >> 2] = 0; //@line 10774
  $98 = $6 + 72 | 0; //@line 10776
  HEAP32[$98 >> 2] = 0; //@line 10778
  HEAP32[$98 + 4 >> 2] = 0; //@line 10781
  $103 = _i64Subtract(0, 0, $81 & 1 | 0, 0) | 0; //@line 10783
  $105 = _bitshift64Shl($45 | 0, 0, 63) | 0; //@line 10785
  $106 = tempRet0; //@line 10786
  $107 = _bitshift64Lshr($81 | 0, $63 | 0, 1) | 0; //@line 10787
  $109 = $107 | $105; //@line 10789
  $110 = tempRet0 | $106; //@line 10790
  $111 = _bitshift64Lshr($45 | 0, $27 | 0, 1) | 0; //@line 10791
  $112 = tempRet0; //@line 10792
  $114 = $103 & -520093696 ^ $112; //@line 10794
  $116 = $6 + 104 | 0; //@line 10796
  HEAP32[$116 >> 2] = $109; //@line 10798
  HEAP32[$116 + 4 >> 2] = $110; //@line 10801
  $121 = $6 + 232 | 0; //@line 10803
  HEAP32[$121 >> 2] = $111; //@line 10805
  HEAP32[$121 + 4 >> 2] = $114; //@line 10808
  $126 = _i64Subtract(0, 0, $107 & 1 | 0, 0) | 0; //@line 10810
  $128 = _bitshift64Shl($111 | 0, $112 | 0, 63) | 0; //@line 10812
  $129 = tempRet0; //@line 10813
  $130 = _bitshift64Lshr($109 | 0, $110 | 0, 1) | 0; //@line 10814
  $132 = $130 | $128; //@line 10816
  $133 = tempRet0 | $129; //@line 10817
  $134 = _bitshift64Lshr($111 | 0, $114 | 0, 1) | 0; //@line 10818
  $135 = tempRet0; //@line 10819
  $137 = $126 & -520093696 ^ $135; //@line 10821
  $139 = $6 + 88 | 0; //@line 10823
  HEAP32[$139 >> 2] = $132; //@line 10825
  HEAP32[$139 + 4 >> 2] = $133; //@line 10828
  $144 = $6 + 216 | 0; //@line 10830
  HEAP32[$144 >> 2] = $134; //@line 10832
  HEAP32[$144 + 4 >> 2] = $137; //@line 10835
  $149 = _i64Subtract(0, 0, $130 & 1 | 0, 0) | 0; //@line 10837
  $151 = _bitshift64Shl($134 | 0, $135 | 0, 63) | 0; //@line 10839
  $152 = tempRet0; //@line 10840
  $153 = _bitshift64Lshr($132 | 0, $133 | 0, 1) | 0; //@line 10841
  $155 = $151 | $153; //@line 10843
  $156 = $152 | tempRet0; //@line 10844
  $157 = _bitshift64Lshr($134 | 0, $137 | 0, 1) | 0; //@line 10845
  $160 = $149 & -520093696 ^ tempRet0; //@line 10848
  $162 = $6 + 80 | 0; //@line 10850
  HEAP32[$162 >> 2] = $155; //@line 10852
  HEAP32[$162 + 4 >> 2] = $156; //@line 10855
  $167 = $6 + 208 | 0; //@line 10857
  HEAP32[$167 >> 2] = $157; //@line 10859
  HEAP32[$167 + 4 >> 2] = $160; //@line 10862
  $171 = $157 ^ $134; //@line 10863
  $172 = $160 ^ $137; //@line 10864
  $174 = $6 + 224 | 0; //@line 10866
  HEAP32[$174 >> 2] = $171; //@line 10868
  HEAP32[$174 + 4 >> 2] = $172; //@line 10871
  $178 = $155 ^ $132; //@line 10872
  $179 = $156 ^ $133; //@line 10873
  $181 = $6 + 96 | 0; //@line 10875
  HEAP32[$181 >> 2] = $178; //@line 10877
  HEAP32[$181 + 4 >> 2] = $179; //@line 10880
  $185 = $157 ^ $111; //@line 10881
  $186 = $160 ^ $114; //@line 10882
  $188 = $6 + 240 | 0; //@line 10884
  HEAP32[$188 >> 2] = $185; //@line 10886
  HEAP32[$188 + 4 >> 2] = $186; //@line 10889
  $192 = $155 ^ $109; //@line 10890
  $193 = $156 ^ $110; //@line 10891
  $195 = $6 + 112 | 0; //@line 10893
  HEAP32[$195 >> 2] = $192; //@line 10895
  HEAP32[$195 + 4 >> 2] = $193; //@line 10898
  $199 = $134 ^ $111; //@line 10899
  $200 = $137 ^ $114; //@line 10900
  $202 = $6 + 248 | 0; //@line 10902
  HEAP32[$202 >> 2] = $199; //@line 10904
  HEAP32[$202 + 4 >> 2] = $200; //@line 10907
  $206 = $132 ^ $109; //@line 10908
  $207 = $133 ^ $110; //@line 10909
  $209 = $6 + 120 | 0; //@line 10911
  HEAP32[$209 >> 2] = $206; //@line 10913
  HEAP32[$209 + 4 >> 2] = $207; //@line 10916
  $213 = $171 ^ $111; //@line 10917
  $214 = $172 ^ $114; //@line 10918
  $216 = $6 + 256 | 0; //@line 10920
  HEAP32[$216 >> 2] = $213; //@line 10922
  HEAP32[$216 + 4 >> 2] = $214; //@line 10925
  $220 = $178 ^ $109; //@line 10926
  $221 = $179 ^ $110; //@line 10927
  $223 = $6 + 128 | 0; //@line 10929
  HEAP32[$223 >> 2] = $220; //@line 10931
  HEAP32[$223 + 4 >> 2] = $221; //@line 10934
  $230 = $6 + 272 | 0; //@line 10938
  HEAP32[$230 >> 2] = $157 ^ $45; //@line 10940
  HEAP32[$230 + 4 >> 2] = $160 ^ $27; //@line 10943
  $237 = $6 + 144 | 0; //@line 10947
  HEAP32[$237 >> 2] = $155 ^ $81; //@line 10949
  HEAP32[$237 + 4 >> 2] = $156 ^ $63; //@line 10952
  $244 = $6 + 280 | 0; //@line 10956
  HEAP32[$244 >> 2] = $134 ^ $45; //@line 10958
  HEAP32[$244 + 4 >> 2] = $137 ^ $27; //@line 10961
  $251 = $6 + 152 | 0; //@line 10965
  HEAP32[$251 >> 2] = $132 ^ $81; //@line 10967
  HEAP32[$251 + 4 >> 2] = $133 ^ $63; //@line 10970
  $258 = $6 + 288 | 0; //@line 10974
  HEAP32[$258 >> 2] = $171 ^ $45; //@line 10976
  HEAP32[$258 + 4 >> 2] = $172 ^ $27; //@line 10979
  $265 = $6 + 160 | 0; //@line 10983
  HEAP32[$265 >> 2] = $178 ^ $81; //@line 10985
  HEAP32[$265 + 4 >> 2] = $179 ^ $63; //@line 10988
  $272 = $6 + 296 | 0; //@line 10992
  HEAP32[$272 >> 2] = $111 ^ $45; //@line 10994
  HEAP32[$272 + 4 >> 2] = $114 ^ $27; //@line 10997
  $279 = $6 + 168 | 0; //@line 11001
  HEAP32[$279 >> 2] = $109 ^ $81; //@line 11003
  HEAP32[$279 + 4 >> 2] = $110 ^ $63; //@line 11006
  $286 = $6 + 304 | 0; //@line 11010
  HEAP32[$286 >> 2] = $185 ^ $45; //@line 11012
  HEAP32[$286 + 4 >> 2] = $186 ^ $27; //@line 11015
  $293 = $6 + 176 | 0; //@line 11019
  HEAP32[$293 >> 2] = $192 ^ $81; //@line 11021
  HEAP32[$293 + 4 >> 2] = $193 ^ $63; //@line 11024
  $300 = $6 + 312 | 0; //@line 11028
  HEAP32[$300 >> 2] = $199 ^ $45; //@line 11030
  HEAP32[$300 + 4 >> 2] = $200 ^ $27; //@line 11033
  $307 = $6 + 184 | 0; //@line 11037
  HEAP32[$307 >> 2] = $206 ^ $81; //@line 11039
  HEAP32[$307 + 4 >> 2] = $207 ^ $63; //@line 11042
  $314 = $6 + 320 | 0; //@line 11046
  HEAP32[$314 >> 2] = $213 ^ $45; //@line 11048
  HEAP32[$314 + 4 >> 2] = $214 ^ $27; //@line 11051
  $321 = $6 + 192 | 0; //@line 11055
  HEAP32[$321 >> 2] = $220 ^ $81; //@line 11057
  HEAP32[$321 + 4 >> 2] = $221 ^ $63; //@line 11060
  $$0$i = 0; //@line 11061
 } else {
  $$0$i = $AsyncRetVal; //@line 11063
 }
 HEAP32[___async_retval >> 2] = $$0$i; //@line 11066
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 33237
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33241
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33243
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33245
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33247
 $$pre$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 33248
 $11 = $4 + 12 | 0; //@line 33249
 HEAP32[$11 >> 2] = $$pre$i; //@line 33250
 if ($$pre$i | 0) {
  $14 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 33255
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 33256
  FUNCTION_TABLE_vii[$14 & 31]($6, $4); //@line 33257
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 277; //@line 33260
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 33261
   HEAP32[$15 >> 2] = $11; //@line 33262
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 33263
   HEAP32[$16 >> 2] = $4; //@line 33264
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 33265
   HEAP32[$17 >> 2] = $11; //@line 33266
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 33267
   HEAP32[$18 >> 2] = $6; //@line 33268
   $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 33269
   HEAP32[$19 >> 2] = $8; //@line 33270
   $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 33271
   HEAP32[$20 >> 2] = $10; //@line 33272
   sp = STACKTOP; //@line 33273
   return;
  }
  ___async_unwind = 0; //@line 33276
  HEAP32[$ReallocAsyncCtx2 >> 2] = 277; //@line 33277
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 33278
  HEAP32[$15 >> 2] = $11; //@line 33279
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 33280
  HEAP32[$16 >> 2] = $4; //@line 33281
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 33282
  HEAP32[$17 >> 2] = $11; //@line 33283
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 33284
  HEAP32[$18 >> 2] = $6; //@line 33285
  $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 33286
  HEAP32[$19 >> 2] = $8; //@line 33287
  $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 33288
  HEAP32[$20 >> 2] = $10; //@line 33289
  sp = STACKTOP; //@line 33290
  return;
 }
 $21 = $6 + 12 | 0; //@line 33293
 HEAP32[$21 >> 2] = 0; //@line 33294
 $22 = $6 + 16 | 0; //@line 33295
 HEAP32[$22 >> 2] = $8; //@line 33296
 $23 = _equeue_alloc($10, 20) | 0; //@line 33297
 if ($23 | 0) {
  $25 = HEAP32[$21 >> 2] | 0; //@line 33300
  if (!$25) {
   HEAP32[$23 + 12 >> 2] = 0; //@line 33304
   HEAP32[$23 + 16 >> 2] = HEAP32[$22 >> 2]; //@line 33307
   _equeue_event_dtor($23, 279); //@line 33308
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 33309
   $40 = _equeue_post($10, 280, $23) | 0; //@line 33310
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 281; //@line 33313
    $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 33314
    HEAP32[$41 >> 2] = $21; //@line 33315
    $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 33316
    HEAP32[$42 >> 2] = $11; //@line 33317
    $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 33318
    HEAP32[$43 >> 2] = $6; //@line 33319
    $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 33320
    HEAP32[$44 >> 2] = $4; //@line 33321
    sp = STACKTOP; //@line 33322
    return;
   }
   HEAP32[___async_retval >> 2] = $40; //@line 33326
   ___async_unwind = 0; //@line 33327
   HEAP32[$ReallocAsyncCtx6 >> 2] = 281; //@line 33328
   $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 33329
   HEAP32[$41 >> 2] = $21; //@line 33330
   $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 33331
   HEAP32[$42 >> 2] = $11; //@line 33332
   $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 33333
   HEAP32[$43 >> 2] = $6; //@line 33334
   $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 33335
   HEAP32[$44 >> 2] = $4; //@line 33336
   sp = STACKTOP; //@line 33337
   return;
  } else {
   $28 = HEAP32[$25 + 4 >> 2] | 0; //@line 33341
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 33342
   FUNCTION_TABLE_vii[$28 & 31]($23, $6); //@line 33343
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 278; //@line 33346
    $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 33347
    HEAP32[$29 >> 2] = $21; //@line 33348
    $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 33349
    HEAP32[$30 >> 2] = $23; //@line 33350
    $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 33351
    HEAP32[$31 >> 2] = $22; //@line 33352
    $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 33353
    HEAP32[$32 >> 2] = $10; //@line 33354
    $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 33355
    HEAP32[$33 >> 2] = $21; //@line 33356
    $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 33357
    HEAP32[$34 >> 2] = $11; //@line 33358
    $35 = $ReallocAsyncCtx3 + 28 | 0; //@line 33359
    HEAP32[$35 >> 2] = $6; //@line 33360
    $36 = $ReallocAsyncCtx3 + 32 | 0; //@line 33361
    HEAP32[$36 >> 2] = $4; //@line 33362
    sp = STACKTOP; //@line 33363
    return;
   }
   ___async_unwind = 0; //@line 33366
   HEAP32[$ReallocAsyncCtx3 >> 2] = 278; //@line 33367
   $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 33368
   HEAP32[$29 >> 2] = $21; //@line 33369
   $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 33370
   HEAP32[$30 >> 2] = $23; //@line 33371
   $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 33372
   HEAP32[$31 >> 2] = $22; //@line 33373
   $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 33374
   HEAP32[$32 >> 2] = $10; //@line 33375
   $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 33376
   HEAP32[$33 >> 2] = $21; //@line 33377
   $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 33378
   HEAP32[$34 >> 2] = $11; //@line 33379
   $35 = $ReallocAsyncCtx3 + 28 | 0; //@line 33380
   HEAP32[$35 >> 2] = $6; //@line 33381
   $36 = $ReallocAsyncCtx3 + 32 | 0; //@line 33382
   HEAP32[$36 >> 2] = $4; //@line 33383
   sp = STACKTOP; //@line 33384
   return;
  }
 }
 $46 = HEAP32[$21 >> 2] | 0; //@line 33388
 if ($46 | 0) {
  $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 33392
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 33393
  FUNCTION_TABLE_vi[$49 & 1023]($6); //@line 33394
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 282; //@line 33397
   $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 33398
   HEAP32[$50 >> 2] = $11; //@line 33399
   $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 33400
   HEAP32[$51 >> 2] = 0; //@line 33401
   $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 33402
   HEAP32[$52 >> 2] = $4; //@line 33403
   sp = STACKTOP; //@line 33404
   return;
  }
  ___async_unwind = 0; //@line 33407
  HEAP32[$ReallocAsyncCtx4 >> 2] = 282; //@line 33408
  $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 33409
  HEAP32[$50 >> 2] = $11; //@line 33410
  $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 33411
  HEAP32[$51 >> 2] = 0; //@line 33412
  $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 33413
  HEAP32[$52 >> 2] = $4; //@line 33414
  sp = STACKTOP; //@line 33415
  return;
 }
 $53 = HEAP32[$11 >> 2] | 0; //@line 33418
 if (!$53) {
  HEAP32[___async_retval >> 2] = 0; //@line 33422
  return;
 }
 $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 33426
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 33427
 FUNCTION_TABLE_vi[$56 & 1023]($4); //@line 33428
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 283; //@line 33431
  $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 33432
  HEAP32[$57 >> 2] = 0; //@line 33433
  sp = STACKTOP; //@line 33434
  return;
 }
 ___async_unwind = 0; //@line 33437
 HEAP32[$ReallocAsyncCtx5 >> 2] = 283; //@line 33438
 $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 33439
 HEAP32[$57 >> 2] = 0; //@line 33440
 sp = STACKTOP; //@line 33441
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_318($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 14025
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14027
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14029
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14031
 $8 = $0 + 16 | 0; //@line 14033
 $10 = HEAP32[$8 >> 2] | 0; //@line 14035
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 14038
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 14040
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 14042
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 14044
 $21 = HEAP32[$0 + 36 >> 2] | 0; //@line 14046
 $23 = HEAP32[$0 + 40 >> 2] | 0; //@line 14048
 $25 = HEAP32[$0 + 44 >> 2] | 0; //@line 14050
 $27 = HEAP32[$0 + 48 >> 2] | 0; //@line 14052
 $29 = HEAP32[$0 + 52 >> 2] | 0; //@line 14054
 $31 = HEAP32[$0 + 56 >> 2] | 0; //@line 14056
 $35 = HEAP32[$0 + 64 >> 2] | 0; //@line 14060
 $37 = HEAP32[$0 + 68 >> 2] | 0; //@line 14062
 $39 = HEAP32[$0 + 72 >> 2] | 0; //@line 14064
 $41 = HEAP32[$0 + 76 >> 2] | 0; //@line 14066
 $43 = HEAP32[$0 + 80 >> 2] | 0; //@line 14068
 $45 = HEAP32[$0 + 84 >> 2] | 0; //@line 14070
 HEAP32[HEAP32[$0 + 60 >> 2] >> 2] = HEAP32[$15 >> 2]; //@line 14072
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 14073
 $46 = HEAP32[$15 >> 2] | 0; //@line 14074
 if ($46 | 0) {
  $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 14078
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 14079
  FUNCTION_TABLE_vi[$49 & 1023]($2); //@line 14080
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 77; //@line 14083
   $50 = $ReallocAsyncCtx6 + 4 | 0; //@line 14084
   HEAP32[$50 >> 2] = $4; //@line 14085
   $51 = $ReallocAsyncCtx6 + 8 | 0; //@line 14086
   HEAP32[$51 >> 2] = $17; //@line 14087
   $52 = $ReallocAsyncCtx6 + 12 | 0; //@line 14088
   HEAP32[$52 >> 2] = $19; //@line 14089
   $53 = $ReallocAsyncCtx6 + 16 | 0; //@line 14090
   HEAP32[$53 >> 2] = $21; //@line 14091
   $54 = $ReallocAsyncCtx6 + 20 | 0; //@line 14092
   HEAP32[$54 >> 2] = $23; //@line 14093
   $55 = $ReallocAsyncCtx6 + 24 | 0; //@line 14094
   HEAP32[$55 >> 2] = $25; //@line 14095
   $56 = $ReallocAsyncCtx6 + 28 | 0; //@line 14096
   HEAP32[$56 >> 2] = $27; //@line 14097
   $57 = $ReallocAsyncCtx6 + 32 | 0; //@line 14098
   HEAP32[$57 >> 2] = $29; //@line 14099
   $58 = $ReallocAsyncCtx6 + 36 | 0; //@line 14100
   HEAP32[$58 >> 2] = $31; //@line 14101
   $59 = $ReallocAsyncCtx6 + 40 | 0; //@line 14102
   HEAP32[$59 >> 2] = $35; //@line 14103
   $60 = $ReallocAsyncCtx6 + 44 | 0; //@line 14104
   HEAP32[$60 >> 2] = $37; //@line 14105
   $61 = $ReallocAsyncCtx6 + 48 | 0; //@line 14106
   HEAP32[$61 >> 2] = $39; //@line 14107
   $62 = $ReallocAsyncCtx6 + 52 | 0; //@line 14108
   HEAP32[$62 >> 2] = $41; //@line 14109
   $63 = $ReallocAsyncCtx6 + 56 | 0; //@line 14110
   HEAP32[$63 >> 2] = $43; //@line 14111
   $64 = $ReallocAsyncCtx6 + 60 | 0; //@line 14112
   HEAP32[$64 >> 2] = $45; //@line 14113
   sp = STACKTOP; //@line 14114
   return;
  }
  ___async_unwind = 0; //@line 14117
  HEAP32[$ReallocAsyncCtx6 >> 2] = 77; //@line 14118
  $50 = $ReallocAsyncCtx6 + 4 | 0; //@line 14119
  HEAP32[$50 >> 2] = $4; //@line 14120
  $51 = $ReallocAsyncCtx6 + 8 | 0; //@line 14121
  HEAP32[$51 >> 2] = $17; //@line 14122
  $52 = $ReallocAsyncCtx6 + 12 | 0; //@line 14123
  HEAP32[$52 >> 2] = $19; //@line 14124
  $53 = $ReallocAsyncCtx6 + 16 | 0; //@line 14125
  HEAP32[$53 >> 2] = $21; //@line 14126
  $54 = $ReallocAsyncCtx6 + 20 | 0; //@line 14127
  HEAP32[$54 >> 2] = $23; //@line 14128
  $55 = $ReallocAsyncCtx6 + 24 | 0; //@line 14129
  HEAP32[$55 >> 2] = $25; //@line 14130
  $56 = $ReallocAsyncCtx6 + 28 | 0; //@line 14131
  HEAP32[$56 >> 2] = $27; //@line 14132
  $57 = $ReallocAsyncCtx6 + 32 | 0; //@line 14133
  HEAP32[$57 >> 2] = $29; //@line 14134
  $58 = $ReallocAsyncCtx6 + 36 | 0; //@line 14135
  HEAP32[$58 >> 2] = $31; //@line 14136
  $59 = $ReallocAsyncCtx6 + 40 | 0; //@line 14137
  HEAP32[$59 >> 2] = $35; //@line 14138
  $60 = $ReallocAsyncCtx6 + 44 | 0; //@line 14139
  HEAP32[$60 >> 2] = $37; //@line 14140
  $61 = $ReallocAsyncCtx6 + 48 | 0; //@line 14141
  HEAP32[$61 >> 2] = $39; //@line 14142
  $62 = $ReallocAsyncCtx6 + 52 | 0; //@line 14143
  HEAP32[$62 >> 2] = $41; //@line 14144
  $63 = $ReallocAsyncCtx6 + 56 | 0; //@line 14145
  HEAP32[$63 >> 2] = $43; //@line 14146
  $64 = $ReallocAsyncCtx6 + 60 | 0; //@line 14147
  HEAP32[$64 >> 2] = $45; //@line 14148
  sp = STACKTOP; //@line 14149
  return;
 }
 $67 = (HEAP8[$4 + 770 >> 0] | 0) == 0; //@line 14154
 _printf(10904, $39) | 0; //@line 14155
 if ($67) {
  HEAP32[$35 >> 2] = 6; //@line 14157
  _printf(10970, $35) | 0; //@line 14158
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 14159
  _putchar(10) | 0; //@line 14160
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 81; //@line 14163
   $73 = $ReallocAsyncCtx8 + 4 | 0; //@line 14164
   HEAP32[$73 >> 2] = $4; //@line 14165
   $74 = $ReallocAsyncCtx8 + 8 | 0; //@line 14166
   HEAP32[$74 >> 2] = $25; //@line 14167
   $75 = $ReallocAsyncCtx8 + 12 | 0; //@line 14168
   HEAP32[$75 >> 2] = $27; //@line 14169
   $76 = $ReallocAsyncCtx8 + 16 | 0; //@line 14170
   HEAP32[$76 >> 2] = $29; //@line 14171
   $77 = $ReallocAsyncCtx8 + 20 | 0; //@line 14172
   HEAP32[$77 >> 2] = $31; //@line 14173
   sp = STACKTOP; //@line 14174
   return;
  }
  ___async_unwind = 0; //@line 14177
  HEAP32[$ReallocAsyncCtx8 >> 2] = 81; //@line 14178
  $73 = $ReallocAsyncCtx8 + 4 | 0; //@line 14179
  HEAP32[$73 >> 2] = $4; //@line 14180
  $74 = $ReallocAsyncCtx8 + 8 | 0; //@line 14181
  HEAP32[$74 >> 2] = $25; //@line 14182
  $75 = $ReallocAsyncCtx8 + 12 | 0; //@line 14183
  HEAP32[$75 >> 2] = $27; //@line 14184
  $76 = $ReallocAsyncCtx8 + 16 | 0; //@line 14185
  HEAP32[$76 >> 2] = $29; //@line 14186
  $77 = $ReallocAsyncCtx8 + 20 | 0; //@line 14187
  HEAP32[$77 >> 2] = $31; //@line 14188
  sp = STACKTOP; //@line 14189
  return;
 } else {
  HEAP32[$43 >> 2] = 5; //@line 14192
  _printf(10970, $43) | 0; //@line 14193
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 14194
  _putchar(10) | 0; //@line 14195
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 78; //@line 14198
   $68 = $ReallocAsyncCtx10 + 4 | 0; //@line 14199
   HEAP32[$68 >> 2] = $4; //@line 14200
   $69 = $ReallocAsyncCtx10 + 8 | 0; //@line 14201
   HEAP32[$69 >> 2] = $17; //@line 14202
   $70 = $ReallocAsyncCtx10 + 12 | 0; //@line 14203
   HEAP32[$70 >> 2] = $19; //@line 14204
   $71 = $ReallocAsyncCtx10 + 16 | 0; //@line 14205
   HEAP32[$71 >> 2] = $21; //@line 14206
   $72 = $ReallocAsyncCtx10 + 20 | 0; //@line 14207
   HEAP32[$72 >> 2] = $23; //@line 14208
   sp = STACKTOP; //@line 14209
   return;
  }
  ___async_unwind = 0; //@line 14212
  HEAP32[$ReallocAsyncCtx10 >> 2] = 78; //@line 14213
  $68 = $ReallocAsyncCtx10 + 4 | 0; //@line 14214
  HEAP32[$68 >> 2] = $4; //@line 14215
  $69 = $ReallocAsyncCtx10 + 8 | 0; //@line 14216
  HEAP32[$69 >> 2] = $17; //@line 14217
  $70 = $ReallocAsyncCtx10 + 12 | 0; //@line 14218
  HEAP32[$70 >> 2] = $19; //@line 14219
  $71 = $ReallocAsyncCtx10 + 16 | 0; //@line 14220
  HEAP32[$71 >> 2] = $21; //@line 14221
  $72 = $ReallocAsyncCtx10 + 20 | 0; //@line 14222
  HEAP32[$72 >> 2] = $23; //@line 14223
  sp = STACKTOP; //@line 14224
  return;
 }
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $103 = 0, $106 = 0, $107 = 0, $109 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $127 = 0, $130 = 0, $19 = 0, $20 = 0, $23 = 0, $29 = 0, $35 = 0, $41 = 0, $42 = 0, $43 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $67 = 0, $7 = 0, $85 = 0, $88 = 0, $90 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx6 = 0, $switch$selectcmp$i = 0, $switch$selectcmp4$i = 0, sp = 0;
 sp = STACKTOP; //@line 24522
 $6 = $1 + 1 | 0; //@line 24525
 $7 = HEAP8[$6 >> 0] | 0; //@line 24526
 $10 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + ($7 << 24 >> 24) >> 0] | 0; //@line 24529
 $12 = HEAP32[$0 + 112 >> 2] | 0; //@line 24531
 $19 = $1 + 2 | 0; //@line 24538
 $20 = HEAP8[$19 >> 0] | 0; //@line 24539
 $23 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 24542
 if ($20 << 24 >> 24 > $23 << 24 >> 24) {
  HEAP8[$19 >> 0] = $23; //@line 24545
  $35 = $23; //@line 24546
 } else {
  $35 = $20; //@line 24548
 }
 $29 = HEAP32[(HEAP32[$0 + 80 >> 2] | 0) + (($7 & 255) << 2) >> 2] | 0; //@line 24554
 $switch$selectcmp$i = ($29 | 0) == 25e4; //@line 24555
 $switch$selectcmp4$i = ($29 | 0) == 5e5; //@line 24556
 $41 = ~~+Math_floor(+(+HEAPF32[$1 + 4 >> 2] - +($35 << 24 >> 24 << 1 >>> 0) - +HEAPF32[$1 + 8 >> 2])); //@line 24567
 $42 = $0 + 4 | 0; //@line 24568
 $43 = HEAP32[$42 >> 2] | 0; //@line 24569
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 72 >> 2] | 0; //@line 24572
 $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 24573
 FUNCTION_TABLE_vi[$46 & 1023]($43); //@line 24574
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 631; //@line 24577
  HEAP32[$AsyncCtx + 4 >> 2] = $42; //@line 24579
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 24581
  HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 24583
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 24585
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 24587
  HEAP8[$AsyncCtx + 24 >> 0] = $switch$selectcmp$i & 1; //@line 24590
  HEAP8[$AsyncCtx + 25 >> 0] = $switch$selectcmp4$i & 1; //@line 24593
  HEAP8[$AsyncCtx + 26 >> 0] = $10; //@line 24595
  HEAP8[$AsyncCtx + 27 >> 0] = $41; //@line 24597
  HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 24599
  HEAP32[$AsyncCtx + 32 >> 2] = $3; //@line 24601
  HEAP32[$AsyncCtx + 36 >> 2] = $19; //@line 24603
  HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 24605
  sp = STACKTOP; //@line 24606
  return 0; //@line 24607
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 24609
 $60 = HEAP32[$42 >> 2] | 0; //@line 24610
 $63 = HEAP32[(HEAP32[$60 >> 2] | 0) + 32 >> 2] | 0; //@line 24613
 $67 = HEAP32[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 24617
 $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 24618
 FUNCTION_TABLE_vii[$63 & 31]($60, $67); //@line 24619
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 632; //@line 24622
  HEAP32[$AsyncCtx2 + 4 >> 2] = $6; //@line 24624
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 24626
  HEAP32[$AsyncCtx2 + 12 >> 2] = $42; //@line 24628
  HEAP8[$AsyncCtx2 + 16 >> 0] = $switch$selectcmp$i & 1; //@line 24631
  HEAP8[$AsyncCtx2 + 17 >> 0] = $switch$selectcmp4$i & 1; //@line 24634
  HEAP8[$AsyncCtx2 + 18 >> 0] = $10; //@line 24636
  HEAP8[$AsyncCtx2 + 19 >> 0] = $41; //@line 24638
  HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 24640
  HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 24642
  HEAP32[$AsyncCtx2 + 28 >> 2] = $19; //@line 24644
  HEAP32[$AsyncCtx2 + 32 >> 2] = $2; //@line 24646
  sp = STACKTOP; //@line 24647
  return 0; //@line 24648
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 24650
 $85 = HEAP32[$42 >> 2] | 0; //@line 24657
 $88 = HEAP32[(HEAP32[$85 >> 2] | 0) + 20 >> 2] | 0; //@line 24660
 $90 = $switch$selectcmp4$i ? 2 : $switch$selectcmp$i & 1; //@line 24662
 $91 = $10 << 24 >> 24; //@line 24663
 do {
  if ((HEAP8[$6 >> 0] | 0) == (HEAPU8[$0 + 27 >> 0] | 0)) {
   $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 24667
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 0, $41, 25e3, $90, $91 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 24668
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 633; //@line 24671
    HEAP32[$AsyncCtx6 + 4 >> 2] = $42; //@line 24673
    HEAP32[$AsyncCtx6 + 8 >> 2] = $1; //@line 24675
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 24677
    HEAP32[$AsyncCtx6 + 16 >> 2] = $19; //@line 24679
    HEAP32[$AsyncCtx6 + 20 >> 2] = $2; //@line 24681
    sp = STACKTOP; //@line 24682
    return 0; //@line 24683
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 24685
    $$0 = 0; //@line 24686
    break;
   }
  } else {
   $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 24690
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 1, $41, 0, $90, $91, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 24691
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 634; //@line 24694
    HEAP32[$AsyncCtx10 + 4 >> 2] = $42; //@line 24696
    HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 24698
    HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 24700
    HEAP32[$AsyncCtx10 + 16 >> 2] = $19; //@line 24702
    HEAP32[$AsyncCtx10 + 20 >> 2] = $2; //@line 24704
    sp = STACKTOP; //@line 24705
    return 0; //@line 24706
   } else {
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 24708
    $$0 = 1; //@line 24709
    break;
   }
  }
 } while (0);
 $103 = HEAP32[$42 >> 2] | 0; //@line 24714
 $106 = HEAP32[(HEAP32[$103 >> 2] | 0) + 44 >> 2] | 0; //@line 24717
 $107 = $1 + 12 | 0; //@line 24718
 $109 = HEAP16[$107 >> 1] & 255; //@line 24720
 $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 24721
 FUNCTION_TABLE_viii[$106 & 7]($103, $$0, $109); //@line 24722
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 635; //@line 24725
  HEAP32[$AsyncCtx14 + 4 >> 2] = $42; //@line 24727
  HEAP32[$AsyncCtx14 + 8 >> 2] = $107; //@line 24729
  HEAP32[$AsyncCtx14 + 12 >> 2] = $$0; //@line 24731
  HEAP32[$AsyncCtx14 + 16 >> 2] = $3; //@line 24733
  HEAP32[$AsyncCtx14 + 20 >> 2] = $19; //@line 24735
  HEAP32[$AsyncCtx14 + 24 >> 2] = $2; //@line 24737
  sp = STACKTOP; //@line 24738
  return 0; //@line 24739
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 24741
 $116 = HEAP32[$42 >> 2] | 0; //@line 24742
 $119 = HEAP32[(HEAP32[$116 >> 2] | 0) + 52 >> 2] | 0; //@line 24745
 $121 = HEAP16[$107 >> 1] & 255; //@line 24747
 $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 24748
 $122 = FUNCTION_TABLE_iiii[$119 & 15]($116, $$0, $121) | 0; //@line 24749
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 636; //@line 24752
  HEAP32[$AsyncCtx17 + 4 >> 2] = $3; //@line 24754
  HEAP32[$AsyncCtx17 + 8 >> 2] = $42; //@line 24756
  HEAP32[$AsyncCtx17 + 12 >> 2] = $19; //@line 24758
  HEAP32[$AsyncCtx17 + 16 >> 2] = $2; //@line 24760
  sp = STACKTOP; //@line 24761
  return 0; //@line 24762
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 24764
 HEAP32[$3 >> 2] = $122; //@line 24765
 $127 = HEAP32[$42 >> 2] | 0; //@line 24766
 $130 = HEAP32[(HEAP32[$127 >> 2] | 0) + 76 >> 2] | 0; //@line 24769
 $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 24770
 FUNCTION_TABLE_vi[$130 & 1023]($127); //@line 24771
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 637; //@line 24774
  HEAP32[$AsyncCtx20 + 4 >> 2] = $19; //@line 24776
  HEAP32[$AsyncCtx20 + 8 >> 2] = $2; //@line 24778
  sp = STACKTOP; //@line 24779
  return 0; //@line 24780
 } else {
  _emscripten_free_async_context($AsyncCtx20 | 0); //@line 24782
  HEAP8[$2 >> 0] = HEAP8[$19 >> 0] | 0; //@line 24784
  return 1; //@line 24785
 }
 return 0; //@line 24787
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_98($0) {
 $0 = $0 | 0;
 var $$0$i43 = 0, $15 = 0, $19 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $35 = 0, $41 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $77 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 35782
 $trunc = HEAP8[$0 + 4 >> 0] | 0; //@line 35784
 $3 = HEAP32[$0 + 8 >> 2] | 0; //@line 35786
 $5 = HEAP32[$0 + 12 >> 2] | 0; //@line 35788
 $7 = HEAP16[$0 + 16 >> 1] | 0; //@line 35790
 $9 = HEAP8[$0 + 18 >> 0] & 1; //@line 35793
 $15 = HEAP32[$0 + 28 >> 2] | 0; //@line 35799
 $19 = HEAP32[$0 + 36 >> 2] | 0; //@line 35803
 $21 = HEAP32[$0 + 40 >> 2] | 0; //@line 35805
 $23 = HEAP32[$0 + 44 >> 2] | 0; //@line 35807
 $25 = HEAP32[$0 + 48 >> 2] | 0; //@line 35809
 $27 = HEAP32[$0 + 52 >> 2] | 0; //@line 35811
 $29 = HEAP32[$0 + 56 >> 2] | 0; //@line 35813
 $31 = HEAP32[$0 + 60 >> 2] | 0; //@line 35815
 $33 = HEAP32[$0 + 64 >> 2] | 0; //@line 35817
 $35 = HEAP32[$0 + 68 >> 2] | 0; //@line 35819
 $41 = HEAP32[$0 + 80 >> 2] | 0; //@line 35825
 $45 = (HEAP32[___async_retval >> 2] | 0) == -1010 ? HEAP8[HEAP32[$0 + 76 >> 2] >> 0] | 0 : HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + 1 >> 0] | 0; //@line 35832
 $$0$i43 = $45 & 255; //@line 35833
 $46 = $45 & 255; //@line 35834
 $47 = $7 & 65535; //@line 35835
 if (($$0$i43 & 65535) < ($7 & 65535)) {
  _printf(12430, HEAP32[$0 + 20 >> 2] | 0) | 0; //@line 35838
  HEAP32[$15 >> 2] = $47; //@line 35839
  HEAP32[$15 + 4 >> 2] = $46; //@line 35841
  _printf(12764, $15) | 0; //@line 35842
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(68) | 0; //@line 35843
  _putchar(10) | 0; //@line 35844
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 309; //@line 35847
   $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 35848
   HEAP32[$49 >> 2] = $47; //@line 35849
   $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 35850
   HEAP32[$50 >> 2] = $46; //@line 35851
   $51 = $ReallocAsyncCtx3 + 12 | 0; //@line 35852
   HEAP32[$51 >> 2] = $3; //@line 35853
   $52 = $ReallocAsyncCtx3 + 16 | 0; //@line 35854
   HEAP16[$52 >> 1] = $$0$i43; //@line 35855
   $53 = $ReallocAsyncCtx3 + 20 | 0; //@line 35856
   HEAP32[$53 >> 2] = $5; //@line 35857
   $54 = $ReallocAsyncCtx3 + 24 | 0; //@line 35858
   HEAP8[$54 >> 0] = $trunc; //@line 35859
   $55 = $ReallocAsyncCtx3 + 28 | 0; //@line 35860
   HEAP32[$55 >> 2] = $27; //@line 35861
   $56 = $ReallocAsyncCtx3 + 32 | 0; //@line 35862
   HEAP32[$56 >> 2] = $29; //@line 35863
   $57 = $ReallocAsyncCtx3 + 36 | 0; //@line 35864
   HEAP32[$57 >> 2] = $31; //@line 35865
   $58 = $ReallocAsyncCtx3 + 40 | 0; //@line 35866
   HEAP32[$58 >> 2] = $33; //@line 35867
   $59 = $ReallocAsyncCtx3 + 44 | 0; //@line 35868
   HEAP32[$59 >> 2] = $35; //@line 35869
   $60 = $ReallocAsyncCtx3 + 48 | 0; //@line 35870
   HEAP32[$60 >> 2] = $19; //@line 35871
   $61 = $ReallocAsyncCtx3 + 52 | 0; //@line 35872
   HEAP32[$61 >> 2] = $21; //@line 35873
   $62 = $ReallocAsyncCtx3 + 56 | 0; //@line 35874
   HEAP32[$62 >> 2] = $23; //@line 35875
   $63 = $ReallocAsyncCtx3 + 60 | 0; //@line 35876
   HEAP32[$63 >> 2] = $25; //@line 35877
   $64 = $ReallocAsyncCtx3 + 64 | 0; //@line 35878
   HEAP32[$64 >> 2] = $41; //@line 35879
   sp = STACKTOP; //@line 35880
   return;
  }
  ___async_unwind = 0; //@line 35883
  HEAP32[$ReallocAsyncCtx3 >> 2] = 309; //@line 35884
  $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 35885
  HEAP32[$49 >> 2] = $47; //@line 35886
  $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 35887
  HEAP32[$50 >> 2] = $46; //@line 35888
  $51 = $ReallocAsyncCtx3 + 12 | 0; //@line 35889
  HEAP32[$51 >> 2] = $3; //@line 35890
  $52 = $ReallocAsyncCtx3 + 16 | 0; //@line 35891
  HEAP16[$52 >> 1] = $$0$i43; //@line 35892
  $53 = $ReallocAsyncCtx3 + 20 | 0; //@line 35893
  HEAP32[$53 >> 2] = $5; //@line 35894
  $54 = $ReallocAsyncCtx3 + 24 | 0; //@line 35895
  HEAP8[$54 >> 0] = $trunc; //@line 35896
  $55 = $ReallocAsyncCtx3 + 28 | 0; //@line 35897
  HEAP32[$55 >> 2] = $27; //@line 35898
  $56 = $ReallocAsyncCtx3 + 32 | 0; //@line 35899
  HEAP32[$56 >> 2] = $29; //@line 35900
  $57 = $ReallocAsyncCtx3 + 36 | 0; //@line 35901
  HEAP32[$57 >> 2] = $31; //@line 35902
  $58 = $ReallocAsyncCtx3 + 40 | 0; //@line 35903
  HEAP32[$58 >> 2] = $33; //@line 35904
  $59 = $ReallocAsyncCtx3 + 44 | 0; //@line 35905
  HEAP32[$59 >> 2] = $35; //@line 35906
  $60 = $ReallocAsyncCtx3 + 48 | 0; //@line 35907
  HEAP32[$60 >> 2] = $19; //@line 35908
  $61 = $ReallocAsyncCtx3 + 52 | 0; //@line 35909
  HEAP32[$61 >> 2] = $21; //@line 35910
  $62 = $ReallocAsyncCtx3 + 56 | 0; //@line 35911
  HEAP32[$62 >> 2] = $23; //@line 35912
  $63 = $ReallocAsyncCtx3 + 60 | 0; //@line 35913
  HEAP32[$63 >> 2] = $25; //@line 35914
  $64 = $ReallocAsyncCtx3 + 64 | 0; //@line 35915
  HEAP32[$64 >> 2] = $41; //@line 35916
  sp = STACKTOP; //@line 35917
  return;
 }
 HEAP16[$3 + 2230 >> 1] = $7; //@line 35921
 HEAP16[$3 + 2232 >> 1] = 0; //@line 35923
 if (!$9) {
  _memcpy($3 + 1975 | 0, $5 | 0, $47 | 0) | 0; //@line 35926
 }
 switch ($trunc & 15) {
 case 9:
 case 5:
 case 1:
  {
   HEAP32[$3 + 1968 >> 2] = 0; //@line 35932
   HEAP8[$3 + 1972 >> 0] = HEAP8[$35 >> 0] | 0; //@line 35935
   switch ($trunc & 15) {
   case 6:
   case 2:
    {
     label = 10; //@line 35939
     break;
    }
   default:
    {}
   }
   break;
  }
 case 10:
 case 6:
 case 2:
  {
   label = 10; //@line 35948
   break;
  }
 default:
  {}
 }
 if ((label | 0) == 10) {
  HEAP32[$3 + 1968 >> 2] = 1; //@line 35956
  HEAP8[$3 + 1972 >> 0] = HEAP8[$35 >> 0] | 0; //@line 35959
  HEAP8[$3 + 1974 >> 0] = HEAP8[$3 + 2284 >> 0] | 0; //@line 35963
 }
 _printf(12430, $27) | 0; //@line 35965
 $77 = $3 + 2230 | 0; //@line 35966
 $82 = HEAPU16[$3 + 2232 >> 1] | 0; //@line 35971
 HEAP32[$31 >> 2] = HEAPU16[$77 >> 1]; //@line 35972
 HEAP32[$31 + 4 >> 2] = $82; //@line 35974
 _printf(12819, $31) | 0; //@line 35975
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 35976
 _putchar(10) | 0; //@line 35977
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 310; //@line 35980
  $83 = $ReallocAsyncCtx2 + 4 | 0; //@line 35981
  HEAP32[$83 >> 2] = $3; //@line 35982
  $84 = $ReallocAsyncCtx2 + 8 | 0; //@line 35983
  HEAP32[$84 >> 2] = $19; //@line 35984
  $85 = $ReallocAsyncCtx2 + 12 | 0; //@line 35985
  HEAP32[$85 >> 2] = $21; //@line 35986
  $86 = $ReallocAsyncCtx2 + 16 | 0; //@line 35987
  HEAP32[$86 >> 2] = $23; //@line 35988
  $87 = $ReallocAsyncCtx2 + 20 | 0; //@line 35989
  HEAP32[$87 >> 2] = $25; //@line 35990
  $88 = $ReallocAsyncCtx2 + 24 | 0; //@line 35991
  HEAP32[$88 >> 2] = $77; //@line 35992
  $89 = $ReallocAsyncCtx2 + 28 | 0; //@line 35993
  HEAP32[$89 >> 2] = $41; //@line 35994
  sp = STACKTOP; //@line 35995
  return;
 }
 ___async_unwind = 0; //@line 35998
 HEAP32[$ReallocAsyncCtx2 >> 2] = 310; //@line 35999
 $83 = $ReallocAsyncCtx2 + 4 | 0; //@line 36000
 HEAP32[$83 >> 2] = $3; //@line 36001
 $84 = $ReallocAsyncCtx2 + 8 | 0; //@line 36002
 HEAP32[$84 >> 2] = $19; //@line 36003
 $85 = $ReallocAsyncCtx2 + 12 | 0; //@line 36004
 HEAP32[$85 >> 2] = $21; //@line 36005
 $86 = $ReallocAsyncCtx2 + 16 | 0; //@line 36006
 HEAP32[$86 >> 2] = $23; //@line 36007
 $87 = $ReallocAsyncCtx2 + 20 | 0; //@line 36008
 HEAP32[$87 >> 2] = $25; //@line 36009
 $88 = $ReallocAsyncCtx2 + 24 | 0; //@line 36010
 HEAP32[$88 >> 2] = $77; //@line 36011
 $89 = $ReallocAsyncCtx2 + 28 | 0; //@line 36012
 HEAP32[$89 >> 2] = $41; //@line 36013
 sp = STACKTOP; //@line 36014
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_192($0) {
 $0 = $0 | 0;
 var $$pre$i$i21 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 4795
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4797
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4799
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4801
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4807
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4809
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4811
 $$pre$i$i21 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 4812
 HEAP32[HEAP32[$0 + 20 >> 2] >> 2] = $$pre$i$i21; //@line 4814
 if ($$pre$i$i21 | 0) {
  $20 = HEAP32[$$pre$i$i21 + 8 >> 2] | 0; //@line 4818
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 4819
  FUNCTION_TABLE_vi[$20 & 1023]($12); //@line 4820
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 577; //@line 4823
   $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 4824
   HEAP32[$21 >> 2] = $2; //@line 4825
   $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 4826
   HEAP32[$22 >> 2] = $4; //@line 4827
   $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 4828
   HEAP32[$23 >> 2] = $6; //@line 4829
   $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 4830
   HEAP32[$24 >> 2] = $12; //@line 4831
   $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 4832
   HEAP32[$25 >> 2] = $14; //@line 4833
   $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 4834
   HEAP32[$26 >> 2] = $16; //@line 4835
   sp = STACKTOP; //@line 4836
   return;
  }
  ___async_unwind = 0; //@line 4839
  HEAP32[$ReallocAsyncCtx6 >> 2] = 577; //@line 4840
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 4841
  HEAP32[$21 >> 2] = $2; //@line 4842
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 4843
  HEAP32[$22 >> 2] = $4; //@line 4844
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 4845
  HEAP32[$23 >> 2] = $6; //@line 4846
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 4847
  HEAP32[$24 >> 2] = $12; //@line 4848
  $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 4849
  HEAP32[$25 >> 2] = $14; //@line 4850
  $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 4851
  HEAP32[$26 >> 2] = $16; //@line 4852
  sp = STACKTOP; //@line 4853
  return;
 }
 $27 = $14 + 12 | 0; //@line 4856
 HEAP32[$14 >> 2] = 578; //@line 4857
 HEAP32[$14 + 4 >> 2] = 0; //@line 4859
 HEAP32[$14 + 8 >> 2] = $2; //@line 4861
 HEAP32[$27 >> 2] = 848; //@line 4862
 $28 = $2 + 1276 | 0; //@line 4863
 if (($28 | 0) == ($14 | 0)) {
  $53 = HEAP32[214] | 0; //@line 4867
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 4868
  FUNCTION_TABLE_vi[$53 & 1023]($14); //@line 4869
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 581; //@line 4872
   $54 = $ReallocAsyncCtx9 + 4 | 0; //@line 4873
   HEAP32[$54 >> 2] = $2; //@line 4874
   $55 = $ReallocAsyncCtx9 + 8 | 0; //@line 4875
   HEAP32[$55 >> 2] = $4; //@line 4876
   $56 = $ReallocAsyncCtx9 + 12 | 0; //@line 4877
   HEAP32[$56 >> 2] = $6; //@line 4878
   $57 = $ReallocAsyncCtx9 + 16 | 0; //@line 4879
   HEAP32[$57 >> 2] = $14; //@line 4880
   $58 = $ReallocAsyncCtx9 + 20 | 0; //@line 4881
   HEAP32[$58 >> 2] = $16; //@line 4882
   sp = STACKTOP; //@line 4883
   return;
  }
  ___async_unwind = 0; //@line 4886
  HEAP32[$ReallocAsyncCtx9 >> 2] = 581; //@line 4887
  $54 = $ReallocAsyncCtx9 + 4 | 0; //@line 4888
  HEAP32[$54 >> 2] = $2; //@line 4889
  $55 = $ReallocAsyncCtx9 + 8 | 0; //@line 4890
  HEAP32[$55 >> 2] = $4; //@line 4891
  $56 = $ReallocAsyncCtx9 + 12 | 0; //@line 4892
  HEAP32[$56 >> 2] = $6; //@line 4893
  $57 = $ReallocAsyncCtx9 + 16 | 0; //@line 4894
  HEAP32[$57 >> 2] = $14; //@line 4895
  $58 = $ReallocAsyncCtx9 + 20 | 0; //@line 4896
  HEAP32[$58 >> 2] = $16; //@line 4897
  sp = STACKTOP; //@line 4898
  return;
 }
 $30 = $2 + 1288 | 0; //@line 4901
 $31 = HEAP32[$30 >> 2] | 0; //@line 4902
 if (!$31) {
  $44 = HEAP32[213] | 0; //@line 4906
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 4907
  FUNCTION_TABLE_vii[$44 & 31]($28, $14); //@line 4908
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 580; //@line 4911
   $45 = $ReallocAsyncCtx8 + 4 | 0; //@line 4912
   HEAP32[$45 >> 2] = $2; //@line 4913
   $46 = $ReallocAsyncCtx8 + 8 | 0; //@line 4914
   HEAP32[$46 >> 2] = $4; //@line 4915
   $47 = $ReallocAsyncCtx8 + 12 | 0; //@line 4916
   HEAP32[$47 >> 2] = $6; //@line 4917
   $48 = $ReallocAsyncCtx8 + 16 | 0; //@line 4918
   HEAP32[$48 >> 2] = $27; //@line 4919
   $49 = $ReallocAsyncCtx8 + 20 | 0; //@line 4920
   HEAP32[$49 >> 2] = $30; //@line 4921
   $50 = $ReallocAsyncCtx8 + 24 | 0; //@line 4922
   HEAP32[$50 >> 2] = $14; //@line 4923
   $51 = $ReallocAsyncCtx8 + 28 | 0; //@line 4924
   HEAP32[$51 >> 2] = $16; //@line 4925
   sp = STACKTOP; //@line 4926
   return;
  }
  ___async_unwind = 0; //@line 4929
  HEAP32[$ReallocAsyncCtx8 >> 2] = 580; //@line 4930
  $45 = $ReallocAsyncCtx8 + 4 | 0; //@line 4931
  HEAP32[$45 >> 2] = $2; //@line 4932
  $46 = $ReallocAsyncCtx8 + 8 | 0; //@line 4933
  HEAP32[$46 >> 2] = $4; //@line 4934
  $47 = $ReallocAsyncCtx8 + 12 | 0; //@line 4935
  HEAP32[$47 >> 2] = $6; //@line 4936
  $48 = $ReallocAsyncCtx8 + 16 | 0; //@line 4937
  HEAP32[$48 >> 2] = $27; //@line 4938
  $49 = $ReallocAsyncCtx8 + 20 | 0; //@line 4939
  HEAP32[$49 >> 2] = $30; //@line 4940
  $50 = $ReallocAsyncCtx8 + 24 | 0; //@line 4941
  HEAP32[$50 >> 2] = $14; //@line 4942
  $51 = $ReallocAsyncCtx8 + 28 | 0; //@line 4943
  HEAP32[$51 >> 2] = $16; //@line 4944
  sp = STACKTOP; //@line 4945
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 4949
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 4950
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 4951
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 579; //@line 4954
   $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 4955
   HEAP32[$35 >> 2] = $2; //@line 4956
   $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 4957
   HEAP32[$36 >> 2] = $4; //@line 4958
   $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 4959
   HEAP32[$37 >> 2] = $27; //@line 4960
   $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 4961
   HEAP32[$38 >> 2] = $6; //@line 4962
   $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 4963
   HEAP32[$39 >> 2] = $30; //@line 4964
   $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 4965
   HEAP32[$40 >> 2] = $14; //@line 4966
   $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 4967
   HEAP32[$41 >> 2] = $16; //@line 4968
   $42 = $ReallocAsyncCtx7 + 32 | 0; //@line 4969
   HEAP32[$42 >> 2] = $28; //@line 4970
   sp = STACKTOP; //@line 4971
   return;
  }
  ___async_unwind = 0; //@line 4974
  HEAP32[$ReallocAsyncCtx7 >> 2] = 579; //@line 4975
  $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 4976
  HEAP32[$35 >> 2] = $2; //@line 4977
  $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 4978
  HEAP32[$36 >> 2] = $4; //@line 4979
  $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 4980
  HEAP32[$37 >> 2] = $27; //@line 4981
  $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 4982
  HEAP32[$38 >> 2] = $6; //@line 4983
  $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 4984
  HEAP32[$39 >> 2] = $30; //@line 4985
  $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 4986
  HEAP32[$40 >> 2] = $14; //@line 4987
  $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 4988
  HEAP32[$41 >> 2] = $16; //@line 4989
  $42 = $ReallocAsyncCtx7 + 32 | 0; //@line 4990
  HEAP32[$42 >> 2] = $28; //@line 4991
  sp = STACKTOP; //@line 4992
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_88($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $$expand_i1_val = 0, $10 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $71 = 0, $73 = 0, $74 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx4 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 34091
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34093
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34095
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34097
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34101
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34105
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 34108
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 34110
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 34112
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 34114
 $24 = HEAP8[$0 + 48 >> 0] | 0; //@line 34116
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 34118
 do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($22) | 0)) {
    if ($16) {
     $$3$off0204 = 6; //@line 34127
     break;
    } else {
     label = 9; //@line 34130
     break;
    }
   }
   _printf(13258, $6) | 0; //@line 34134
   _printf(13405, $10) | 0; //@line 34135
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 34136
   _putchar(10) | 0; //@line 34137
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 405; //@line 34140
    $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 34141
    HEAP32[$32 >> 2] = $18; //@line 34142
    $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 34143
    HEAP32[$33 >> 2] = $20; //@line 34144
    $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 34145
    HEAP32[$34 >> 2] = $22; //@line 34146
    $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 34147
    $$expand_i1_val = $16 & 1; //@line 34148
    HEAP8[$35 >> 0] = $$expand_i1_val; //@line 34149
    $36 = $ReallocAsyncCtx4 + 17 | 0; //@line 34150
    HEAP8[$36 >> 0] = $24; //@line 34151
    $37 = $ReallocAsyncCtx4 + 20 | 0; //@line 34152
    HEAP32[$37 >> 2] = $14; //@line 34153
    $38 = $ReallocAsyncCtx4 + 24 | 0; //@line 34154
    HEAP32[$38 >> 2] = $26; //@line 34155
    $39 = $ReallocAsyncCtx4 + 28 | 0; //@line 34156
    HEAP32[$39 >> 2] = $2; //@line 34157
    $40 = $ReallocAsyncCtx4 + 32 | 0; //@line 34158
    HEAP32[$40 >> 2] = $4; //@line 34159
    sp = STACKTOP; //@line 34160
    return;
   }
   ___async_unwind = 0; //@line 34163
   HEAP32[$ReallocAsyncCtx4 >> 2] = 405; //@line 34164
   $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 34165
   HEAP32[$32 >> 2] = $18; //@line 34166
   $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 34167
   HEAP32[$33 >> 2] = $20; //@line 34168
   $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 34169
   HEAP32[$34 >> 2] = $22; //@line 34170
   $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 34171
   $$expand_i1_val = $16 & 1; //@line 34172
   HEAP8[$35 >> 0] = $$expand_i1_val; //@line 34173
   $36 = $ReallocAsyncCtx4 + 17 | 0; //@line 34174
   HEAP8[$36 >> 0] = $24; //@line 34175
   $37 = $ReallocAsyncCtx4 + 20 | 0; //@line 34176
   HEAP32[$37 >> 2] = $14; //@line 34177
   $38 = $ReallocAsyncCtx4 + 24 | 0; //@line 34178
   HEAP32[$38 >> 2] = $26; //@line 34179
   $39 = $ReallocAsyncCtx4 + 28 | 0; //@line 34180
   HEAP32[$39 >> 2] = $2; //@line 34181
   $40 = $ReallocAsyncCtx4 + 32 | 0; //@line 34182
   HEAP32[$40 >> 2] = $4; //@line 34183
   sp = STACKTOP; //@line 34184
   return;
  } else {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($14) | 0) + 4 >> 2] = 1; //@line 34189
   if ($16) {
    $$3$off0204 = 6; //@line 34191
   } else {
    label = 9; //@line 34193
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  $44 = (__ZN11LoRaMacMcps16get_confirmationEv($14) | 0) + 10 | 0; //@line 34201
  if ($24 & 32) {
   HEAP8[$44 >> 0] = 1; //@line 34203
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($14) | 0) + 28 >> 0] = 1; //@line 34206
   $47 = HEAP32[$26 >> 2] | 0; //@line 34207
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 34209
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($47, $20 + 1076 | 0); //@line 34210
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 410; //@line 34213
    $49 = $ReallocAsyncCtx23 + 4 | 0; //@line 34214
    HEAP32[$49 >> 2] = $20; //@line 34215
    $50 = $ReallocAsyncCtx23 + 8 | 0; //@line 34216
    HEAP32[$50 >> 2] = $26; //@line 34217
    $51 = $ReallocAsyncCtx23 + 12 | 0; //@line 34218
    HEAP32[$51 >> 2] = $2; //@line 34219
    $52 = $ReallocAsyncCtx23 + 16 | 0; //@line 34220
    HEAP32[$52 >> 2] = $4; //@line 34221
    sp = STACKTOP; //@line 34222
    return;
   }
   ___async_unwind = 0; //@line 34225
   HEAP32[$ReallocAsyncCtx23 >> 2] = 410; //@line 34226
   $49 = $ReallocAsyncCtx23 + 4 | 0; //@line 34227
   HEAP32[$49 >> 2] = $20; //@line 34228
   $50 = $ReallocAsyncCtx23 + 8 | 0; //@line 34229
   HEAP32[$50 >> 2] = $26; //@line 34230
   $51 = $ReallocAsyncCtx23 + 12 | 0; //@line 34231
   HEAP32[$51 >> 2] = $2; //@line 34232
   $52 = $ReallocAsyncCtx23 + 16 | 0; //@line 34233
   HEAP32[$52 >> 2] = $4; //@line 34234
   sp = STACKTOP; //@line 34235
   return;
  }
  HEAP8[$44 >> 0] = 0; //@line 34238
  if ((HEAPU8[$20 + 895 >> 0] | 0) > (HEAPU8[$20 + 894 >> 0] | 0)) {
   $58 = HEAP32[$26 >> 2] | 0; //@line 34245
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 34247
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($58, $20 + 1076 | 0); //@line 34248
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 411; //@line 34251
    $60 = $ReallocAsyncCtx22 + 4 | 0; //@line 34252
    HEAP32[$60 >> 2] = $20; //@line 34253
    $61 = $ReallocAsyncCtx22 + 8 | 0; //@line 34254
    HEAP32[$61 >> 2] = $26; //@line 34255
    $62 = $ReallocAsyncCtx22 + 12 | 0; //@line 34256
    HEAP32[$62 >> 2] = $2; //@line 34257
    $63 = $ReallocAsyncCtx22 + 16 | 0; //@line 34258
    HEAP32[$63 >> 2] = $4; //@line 34259
    sp = STACKTOP; //@line 34260
    return;
   }
   ___async_unwind = 0; //@line 34263
   HEAP32[$ReallocAsyncCtx22 >> 2] = 411; //@line 34264
   $60 = $ReallocAsyncCtx22 + 4 | 0; //@line 34265
   HEAP32[$60 >> 2] = $20; //@line 34266
   $61 = $ReallocAsyncCtx22 + 8 | 0; //@line 34267
   HEAP32[$61 >> 2] = $26; //@line 34268
   $62 = $ReallocAsyncCtx22 + 12 | 0; //@line 34269
   HEAP32[$62 >> 2] = $2; //@line 34270
   $63 = $ReallocAsyncCtx22 + 16 | 0; //@line 34271
   HEAP32[$63 >> 2] = $4; //@line 34272
   sp = STACKTOP; //@line 34273
   return;
  } else {
   $$3$off0204 = 2; //@line 34276
  }
 }
 $64 = $20 + 944 | 0; //@line 34279
 HEAP8[$64 >> 0] = $$3$off0204 | HEAP8[$64 >> 0] & -7; //@line 34283
 $68 = $20 + 944 | 0; //@line 34284
 HEAP8[$68 >> 0] = HEAP8[$68 >> 0] | 32; //@line 34287
 $71 = HEAP32[$26 >> 2] | 0; //@line 34288
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 34290
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($71, $20 + 996 | 0, 1); //@line 34291
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 34294
  $73 = $ReallocAsyncCtx17 + 4 | 0; //@line 34295
  HEAP32[$73 >> 2] = $2; //@line 34296
  $74 = $ReallocAsyncCtx17 + 8 | 0; //@line 34297
  HEAP32[$74 >> 2] = $4; //@line 34298
  sp = STACKTOP; //@line 34299
  return;
 }
 ___async_unwind = 0; //@line 34302
 HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 34303
 $73 = $ReallocAsyncCtx17 + 4 | 0; //@line 34304
 HEAP32[$73 >> 2] = $2; //@line 34305
 $74 = $ReallocAsyncCtx17 + 8 | 0; //@line 34306
 HEAP32[$74 >> 2] = $4; //@line 34307
 sp = STACKTOP; //@line 34308
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_86($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $71 = 0, $73 = 0, $74 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 33592
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33594
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33596
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33598
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33600
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33602
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33604
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 33607
 $16 = HEAP8[$0 + 29 >> 0] | 0; //@line 33609
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 33611
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 33613
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 33617
 do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($12) | 0)) {
    if ($14) {
     $$3$off0204 = 6; //@line 33628
     break;
    } else {
     label = 9; //@line 33631
     break;
    }
   }
   _printf(13258, $20) | 0; //@line 33635
   _printf(13405, $24) | 0; //@line 33636
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 33637
   _putchar(10) | 0; //@line 33638
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 409; //@line 33641
    $32 = $ReallocAsyncCtx2 + 4 | 0; //@line 33642
    HEAP32[$32 >> 2] = $10; //@line 33643
    $33 = $ReallocAsyncCtx2 + 8 | 0; //@line 33644
    HEAP32[$33 >> 2] = $6; //@line 33645
    $34 = $ReallocAsyncCtx2 + 12 | 0; //@line 33646
    HEAP32[$34 >> 2] = $12; //@line 33647
    $35 = $ReallocAsyncCtx2 + 16 | 0; //@line 33648
    $$expand_i1_val = $14 & 1; //@line 33649
    HEAP8[$35 >> 0] = $$expand_i1_val; //@line 33650
    $36 = $ReallocAsyncCtx2 + 17 | 0; //@line 33651
    HEAP8[$36 >> 0] = $16; //@line 33652
    $37 = $ReallocAsyncCtx2 + 20 | 0; //@line 33653
    HEAP32[$37 >> 2] = $18; //@line 33654
    $38 = $ReallocAsyncCtx2 + 24 | 0; //@line 33655
    HEAP32[$38 >> 2] = $8; //@line 33656
    $39 = $ReallocAsyncCtx2 + 28 | 0; //@line 33657
    HEAP32[$39 >> 2] = $2; //@line 33658
    $40 = $ReallocAsyncCtx2 + 32 | 0; //@line 33659
    HEAP32[$40 >> 2] = $4; //@line 33660
    sp = STACKTOP; //@line 33661
    return;
   }
   ___async_unwind = 0; //@line 33664
   HEAP32[$ReallocAsyncCtx2 >> 2] = 409; //@line 33665
   $32 = $ReallocAsyncCtx2 + 4 | 0; //@line 33666
   HEAP32[$32 >> 2] = $10; //@line 33667
   $33 = $ReallocAsyncCtx2 + 8 | 0; //@line 33668
   HEAP32[$33 >> 2] = $6; //@line 33669
   $34 = $ReallocAsyncCtx2 + 12 | 0; //@line 33670
   HEAP32[$34 >> 2] = $12; //@line 33671
   $35 = $ReallocAsyncCtx2 + 16 | 0; //@line 33672
   $$expand_i1_val = $14 & 1; //@line 33673
   HEAP8[$35 >> 0] = $$expand_i1_val; //@line 33674
   $36 = $ReallocAsyncCtx2 + 17 | 0; //@line 33675
   HEAP8[$36 >> 0] = $16; //@line 33676
   $37 = $ReallocAsyncCtx2 + 20 | 0; //@line 33677
   HEAP32[$37 >> 2] = $18; //@line 33678
   $38 = $ReallocAsyncCtx2 + 24 | 0; //@line 33679
   HEAP32[$38 >> 2] = $8; //@line 33680
   $39 = $ReallocAsyncCtx2 + 28 | 0; //@line 33681
   HEAP32[$39 >> 2] = $2; //@line 33682
   $40 = $ReallocAsyncCtx2 + 32 | 0; //@line 33683
   HEAP32[$40 >> 2] = $4; //@line 33684
   sp = STACKTOP; //@line 33685
   return;
  } else {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($18) | 0) + 4 >> 2] = 1; //@line 33690
   if ($14) {
    $$3$off0204 = 6; //@line 33692
   } else {
    label = 9; //@line 33694
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  $44 = (__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 10 | 0; //@line 33702
  if ($16 & 32) {
   HEAP8[$44 >> 0] = 1; //@line 33704
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($18) | 0) + 28 >> 0] = 1; //@line 33707
   $47 = HEAP32[$8 >> 2] | 0; //@line 33708
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 33710
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($47, $6 + 1076 | 0); //@line 33711
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 410; //@line 33714
    $49 = $ReallocAsyncCtx23 + 4 | 0; //@line 33715
    HEAP32[$49 >> 2] = $6; //@line 33716
    $50 = $ReallocAsyncCtx23 + 8 | 0; //@line 33717
    HEAP32[$50 >> 2] = $8; //@line 33718
    $51 = $ReallocAsyncCtx23 + 12 | 0; //@line 33719
    HEAP32[$51 >> 2] = $2; //@line 33720
    $52 = $ReallocAsyncCtx23 + 16 | 0; //@line 33721
    HEAP32[$52 >> 2] = $4; //@line 33722
    sp = STACKTOP; //@line 33723
    return;
   }
   ___async_unwind = 0; //@line 33726
   HEAP32[$ReallocAsyncCtx23 >> 2] = 410; //@line 33727
   $49 = $ReallocAsyncCtx23 + 4 | 0; //@line 33728
   HEAP32[$49 >> 2] = $6; //@line 33729
   $50 = $ReallocAsyncCtx23 + 8 | 0; //@line 33730
   HEAP32[$50 >> 2] = $8; //@line 33731
   $51 = $ReallocAsyncCtx23 + 12 | 0; //@line 33732
   HEAP32[$51 >> 2] = $2; //@line 33733
   $52 = $ReallocAsyncCtx23 + 16 | 0; //@line 33734
   HEAP32[$52 >> 2] = $4; //@line 33735
   sp = STACKTOP; //@line 33736
   return;
  }
  HEAP8[$44 >> 0] = 0; //@line 33739
  if ((HEAPU8[$6 + 895 >> 0] | 0) > (HEAPU8[$6 + 894 >> 0] | 0)) {
   $58 = HEAP32[$8 >> 2] | 0; //@line 33746
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 33748
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($58, $6 + 1076 | 0); //@line 33749
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 411; //@line 33752
    $60 = $ReallocAsyncCtx22 + 4 | 0; //@line 33753
    HEAP32[$60 >> 2] = $6; //@line 33754
    $61 = $ReallocAsyncCtx22 + 8 | 0; //@line 33755
    HEAP32[$61 >> 2] = $8; //@line 33756
    $62 = $ReallocAsyncCtx22 + 12 | 0; //@line 33757
    HEAP32[$62 >> 2] = $2; //@line 33758
    $63 = $ReallocAsyncCtx22 + 16 | 0; //@line 33759
    HEAP32[$63 >> 2] = $4; //@line 33760
    sp = STACKTOP; //@line 33761
    return;
   }
   ___async_unwind = 0; //@line 33764
   HEAP32[$ReallocAsyncCtx22 >> 2] = 411; //@line 33765
   $60 = $ReallocAsyncCtx22 + 4 | 0; //@line 33766
   HEAP32[$60 >> 2] = $6; //@line 33767
   $61 = $ReallocAsyncCtx22 + 8 | 0; //@line 33768
   HEAP32[$61 >> 2] = $8; //@line 33769
   $62 = $ReallocAsyncCtx22 + 12 | 0; //@line 33770
   HEAP32[$62 >> 2] = $2; //@line 33771
   $63 = $ReallocAsyncCtx22 + 16 | 0; //@line 33772
   HEAP32[$63 >> 2] = $4; //@line 33773
   sp = STACKTOP; //@line 33774
   return;
  } else {
   $$3$off0204 = 2; //@line 33777
  }
 }
 $64 = $6 + 944 | 0; //@line 33780
 HEAP8[$64 >> 0] = $$3$off0204 | HEAP8[$64 >> 0] & -7; //@line 33784
 $68 = $6 + 944 | 0; //@line 33785
 HEAP8[$68 >> 0] = HEAP8[$68 >> 0] | 32; //@line 33788
 $71 = HEAP32[$8 >> 2] | 0; //@line 33789
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 33791
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($71, $6 + 996 | 0, 1); //@line 33792
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 33795
  $73 = $ReallocAsyncCtx17 + 4 | 0; //@line 33796
  HEAP32[$73 >> 2] = $2; //@line 33797
  $74 = $ReallocAsyncCtx17 + 8 | 0; //@line 33798
  HEAP32[$74 >> 2] = $4; //@line 33799
  sp = STACKTOP; //@line 33800
  return;
 }
 ___async_unwind = 0; //@line 33803
 HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 33804
 $73 = $ReallocAsyncCtx17 + 4 | 0; //@line 33805
 HEAP32[$73 >> 2] = $2; //@line 33806
 $74 = $ReallocAsyncCtx17 + 8 | 0; //@line 33807
 HEAP32[$74 >> 2] = $4; //@line 33808
 sp = STACKTOP; //@line 33809
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_387($0) {
 $0 = $0 | 0;
 var $$054 = 0, $$055 = 0, $$05564 = 0, $$056 = 0, $$05663 = 0, $$05766 = 0, $$06065 = 0, $$158 = 0, $$15862 = 0, $$259 = 0, $$pre$phiZ2D = 0, $10 = 0, $104 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $29 = 0, $30 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $51 = 0, $52 = 0, $56 = 0, $58 = 0, $6 = 0, $64 = 0, $65 = 0, $68 = 0, $70 = 0, $8 = 0, $83 = 0, $95 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21671
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21673
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21675
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21677
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21679
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21681
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21683
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 21685
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21687
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21689
 $20 = HEAP8[$0 + 40 >> 0] & 1; //@line 21692
 if (HEAP8[___async_retval >> 0] & 1) {
  HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 64; //@line 21699
 }
 $24 = $6 + 374 | 0; //@line 21701
 if (!(HEAP8[$24 >> 0] | 0)) {
  $$pre$phiZ2D = $18; //@line 21705
 } else {
  HEAP8[$24 >> 0] = 0; //@line 21707
  HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 32; //@line 21710
  $$pre$phiZ2D = $18; //@line 21711
 }
 $29 = $6 + 952 | 0; //@line 21713
 $30 = HEAP32[$29 >> 2] | 0; //@line 21714
 HEAP8[$6 + 382 >> 0] = $30; //@line 21717
 HEAP8[$6 + 383 >> 0] = $30 >>> 8; //@line 21721
 HEAP8[$6 + 384 >> 0] = $30 >>> 16; //@line 21725
 HEAP8[$6 + 385 >> 0] = $30 >>> 24; //@line 21729
 $43 = $6 + 386 | 0; //@line 21731
 HEAP8[$43 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 21732
 $44 = $6 + 956 | 0; //@line 21733
 $45 = HEAP32[$44 >> 2] | 0; //@line 21734
 HEAP8[$6 + 387 >> 0] = $45; //@line 21737
 HEAP8[$6 + 388 >> 0] = $45 >>> 8; //@line 21741
 $51 = $6 + 4 | 0; //@line 21742
 __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($51); //@line 21743
 $52 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($51) | 0; //@line 21744
 do {
  if ($20) {
   label = 16; //@line 21747
  } else {
   if (!(HEAP8[$2 >> 0] | 0)) {
    label = 16; //@line 21752
   } else {
    if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($51) | 0)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($51); //@line 21756
     $$05564 = $14; //@line 21757
     $$05663 = $16; //@line 21757
     $$15862 = 8; //@line 21757
     label = 20; //@line 21758
     break;
    }
    $56 = $52 & 255; //@line 21761
    if (($52 & 255) >= 16) {
     HEAP8[$2 >> 0] = $52; //@line 21764
     $$055 = 0; //@line 21766
     $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($51) | 0; //@line 21766
     $$158 = 8; //@line 21766
     label = 19; //@line 21767
     break;
    }
    $58 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 21770
    $64 = ($58 & 255) + $56 & 15 | $58 & -16; //@line 21776
    HEAP8[$$pre$phiZ2D >> 0] = $64; //@line 21777
    HEAP8[$43 >> 0] = $64; //@line 21778
    $65 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($51) | 0; //@line 21779
    if (!($52 << 24 >> 24)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($51); //@line 21782
     $$05564 = $14; //@line 21783
     $$05663 = $16; //@line 21783
     $$15862 = 8; //@line 21783
     label = 20; //@line 21784
     break;
    } else {
     $$05766 = 8; //@line 21787
     $$06065 = 0; //@line 21787
     $68 = 0; //@line 21787
     while (1) {
      $70 = $$05766 + 1 << 24 >> 24; //@line 21791
      HEAP8[($$05766 & 255) + ($6 + 381) >> 0] = HEAP8[$65 + $68 >> 0] | 0; //@line 21794
      $$06065 = $$06065 + 1 << 16 >> 16; //@line 21795
      $68 = $$06065 & 65535; //@line 21796
      if ($68 >>> 0 >= $56 >>> 0) {
       $$055 = $14; //@line 21801
       $$056 = $16; //@line 21801
       $$158 = $70; //@line 21801
       label = 19; //@line 21802
       break;
      } else {
       $$05766 = $70; //@line 21799
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 16) {
  if (!($52 << 24 >> 24)) {
   $$055 = $14; //@line 21813
   $$056 = $16; //@line 21813
   $$158 = 8; //@line 21813
   label = 19; //@line 21814
  } else {
   if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($51) | 0) {
    HEAP8[$2 >> 0] = $52; //@line 21818
    $$055 = 0; //@line 21820
    $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($51) | 0; //@line 21820
    $$158 = 8; //@line 21820
    label = 19; //@line 21821
   } else {
    $$055 = $14; //@line 21823
    $$056 = $16; //@line 21823
    $$158 = 8; //@line 21823
    label = 19; //@line 21824
   }
  }
 }
 if ((label | 0) == 19) {
  __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($51); //@line 21829
  if (!$$056) {
   $$054 = 0; //@line 21832
   $$259 = $$158; //@line 21832
  } else {
   $$05564 = $$055; //@line 21834
   $$05663 = $$056; //@line 21834
   $$15862 = $$158; //@line 21834
   label = 20; //@line 21835
  }
 }
 do {
  if ((label | 0) == 20) {
   if (!(HEAP8[$2 >> 0] | 0)) {
    $$054 = 0; //@line 21843
    $$259 = $$15862; //@line 21843
   } else {
    $83 = $$15862 + 1 << 24 >> 24; //@line 21845
    HEAP8[($$15862 & 255) + ($6 + 381) >> 0] = $$05564; //@line 21848
    if (!($$05564 << 24 >> 24)) {
     __ZN14LoRaMacCommand20clear_command_bufferEv($51); //@line 21851
     $95 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$2 >> 0] | 0, $6 + 912 | 0, HEAP32[$29 >> 2] | 0, 0, HEAP32[$44 >> 2] | 0, ($83 & 255) + ($6 + 381) | 0) | 0) == 0; //@line 21860
     $$054 = $95 ? 0 : -1014; //@line 21862
     $$259 = $83; //@line 21862
     break;
    } else {
     $104 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$2 >> 0] | 0, $6 + 928 | 0, HEAP32[$29 >> 2] | 0, 0, HEAP32[$44 >> 2] | 0, ($83 & 255) + ($6 + 381) | 0) | 0) == 0; //@line 21873
     $$054 = $104 ? 0 : -1014; //@line 21875
     $$259 = $83; //@line 21875
     break;
    }
   }
  }
 } while (0);
 $109 = (HEAPU8[$2 >> 0] | 0) + ($$259 & 255) & 65535; //@line 21885
 HEAP16[$4 >> 1] = $109; //@line 21886
 $111 = HEAP32[$29 >> 2] | 0; //@line 21888
 $112 = HEAP32[$44 >> 2] | 0; //@line 21889
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 21890
 $113 = __Z11compute_micPKhtS0_jhjPj($8, $109, $6 + 912 | 0, $111, 0, $112, $10) | 0; //@line 21891
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 507; //@line 21894
  $114 = $ReallocAsyncCtx + 4 | 0; //@line 21895
  HEAP32[$114 >> 2] = $$054; //@line 21896
  $115 = $ReallocAsyncCtx + 8 | 0; //@line 21897
  HEAP32[$115 >> 2] = $10; //@line 21898
  $116 = $ReallocAsyncCtx + 12 | 0; //@line 21899
  HEAP32[$116 >> 2] = $4; //@line 21900
  $117 = $ReallocAsyncCtx + 16 | 0; //@line 21901
  HEAP32[$117 >> 2] = $6; //@line 21902
  $118 = $ReallocAsyncCtx + 20 | 0; //@line 21903
  HEAP32[$118 >> 2] = $12; //@line 21904
  sp = STACKTOP; //@line 21905
  return;
 }
 HEAP32[___async_retval >> 2] = $113; //@line 21909
 ___async_unwind = 0; //@line 21910
 HEAP32[$ReallocAsyncCtx >> 2] = 507; //@line 21911
 $114 = $ReallocAsyncCtx + 4 | 0; //@line 21912
 HEAP32[$114 >> 2] = $$054; //@line 21913
 $115 = $ReallocAsyncCtx + 8 | 0; //@line 21914
 HEAP32[$115 >> 2] = $10; //@line 21915
 $116 = $ReallocAsyncCtx + 12 | 0; //@line 21916
 HEAP32[$116 >> 2] = $4; //@line 21917
 $117 = $ReallocAsyncCtx + 16 | 0; //@line 21918
 HEAP32[$117 >> 2] = $6; //@line 21919
 $118 = $ReallocAsyncCtx + 20 | 0; //@line 21920
 HEAP32[$118 >> 2] = $12; //@line 21921
 sp = STACKTOP; //@line 21922
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_72($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $49 = 0, $6 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 31522
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31524
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31526
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31528
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31530
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31532
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31534
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31536
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31538
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31540
 $20 = HEAP8[$0 + 40 >> 0] | 0; //@line 31542
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31544
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 31546
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 31548
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 31550
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 31552
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 31554
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 31556
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 31558
 $38 = HEAP16[$0 + 76 >> 1] | 0; //@line 31560
 HEAP32[$10 >> 2] = 0; //@line 31561
 $39 = $2 + 912 | 0; //@line 31562
 $40 = $2 + 928 | 0; //@line 31563
 $41 = $2 + 288 | 0; //@line 31564
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($41) | 0) + 10 >> 0] = 0; //@line 31567
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 20 >> 1] = $38; //@line 31570
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 22 >> 0] = $20; //@line 31573
 $49 = HEAP32[$2 + 364 >> 2] | 0; //@line 31575
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 24 >> 2] = $49; //@line 31578
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 9 >> 0] = 0; //@line 31581
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 8 >> 0] = 0; //@line 31584
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 11 >> 0] = 0; //@line 31587
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 12 >> 2] = 0; //@line 31590
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 16 >> 1] = 0; //@line 31593
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 18 >> 0] = 0; //@line 31596
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 28 >> 0] = 0; //@line 31599
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 32 >> 2] = 0; //@line 31602
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) >> 2] = 0; //@line 31604
 $69 = HEAP32[$2 >> 2] | 0; //@line 31605
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(100) | 0; //@line 31606
 __ZN7LoRaPHY18put_radio_to_sleepEv($69); //@line 31607
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 392; //@line 31610
  $70 = $ReallocAsyncCtx18 + 4 | 0; //@line 31611
  HEAP32[$70 >> 2] = $10; //@line 31612
  $71 = $ReallocAsyncCtx18 + 8 | 0; //@line 31613
  HEAP32[$71 >> 2] = $8; //@line 31614
  $72 = $ReallocAsyncCtx18 + 12 | 0; //@line 31615
  HEAP32[$72 >> 2] = $41; //@line 31616
  $73 = $ReallocAsyncCtx18 + 16 | 0; //@line 31617
  HEAP32[$73 >> 2] = $2; //@line 31618
  $74 = $ReallocAsyncCtx18 + 20 | 0; //@line 31619
  HEAP32[$74 >> 2] = $2; //@line 31620
  $75 = $ReallocAsyncCtx18 + 24 | 0; //@line 31621
  HEAP32[$75 >> 2] = $4; //@line 31622
  $76 = $ReallocAsyncCtx18 + 28 | 0; //@line 31623
  HEAP32[$76 >> 2] = $6; //@line 31624
  $77 = $ReallocAsyncCtx18 + 32 | 0; //@line 31625
  HEAP32[$77 >> 2] = $39; //@line 31626
  $78 = $ReallocAsyncCtx18 + 36 | 0; //@line 31627
  HEAP32[$78 >> 2] = $40; //@line 31628
  $79 = $ReallocAsyncCtx18 + 40 | 0; //@line 31629
  HEAP32[$79 >> 2] = $8; //@line 31630
  $80 = $ReallocAsyncCtx18 + 44 | 0; //@line 31631
  HEAP32[$80 >> 2] = $10; //@line 31632
  $81 = $ReallocAsyncCtx18 + 48 | 0; //@line 31633
  HEAP32[$81 >> 2] = $12; //@line 31634
  $82 = $ReallocAsyncCtx18 + 52 | 0; //@line 31635
  HEAP32[$82 >> 2] = $14; //@line 31636
  $83 = $ReallocAsyncCtx18 + 56 | 0; //@line 31637
  HEAP32[$83 >> 2] = $16; //@line 31638
  $84 = $ReallocAsyncCtx18 + 60 | 0; //@line 31639
  HEAP32[$84 >> 2] = $18; //@line 31640
  $85 = $ReallocAsyncCtx18 + 64 | 0; //@line 31641
  HEAP8[$85 >> 0] = $20; //@line 31642
  $86 = $ReallocAsyncCtx18 + 68 | 0; //@line 31643
  HEAP32[$86 >> 2] = $22; //@line 31644
  $87 = $ReallocAsyncCtx18 + 72 | 0; //@line 31645
  HEAP32[$87 >> 2] = $24; //@line 31646
  $88 = $ReallocAsyncCtx18 + 76 | 0; //@line 31647
  HEAP32[$88 >> 2] = $26; //@line 31648
  $89 = $ReallocAsyncCtx18 + 80 | 0; //@line 31649
  HEAP32[$89 >> 2] = $28; //@line 31650
  $90 = $ReallocAsyncCtx18 + 84 | 0; //@line 31651
  HEAP32[$90 >> 2] = $30; //@line 31652
  $91 = $ReallocAsyncCtx18 + 88 | 0; //@line 31653
  HEAP32[$91 >> 2] = $32; //@line 31654
  $92 = $ReallocAsyncCtx18 + 92 | 0; //@line 31655
  HEAP32[$92 >> 2] = $34; //@line 31656
  $93 = $ReallocAsyncCtx18 + 96 | 0; //@line 31657
  HEAP32[$93 >> 2] = $36; //@line 31658
  sp = STACKTOP; //@line 31659
  return;
 }
 ___async_unwind = 0; //@line 31662
 HEAP32[$ReallocAsyncCtx18 >> 2] = 392; //@line 31663
 $70 = $ReallocAsyncCtx18 + 4 | 0; //@line 31664
 HEAP32[$70 >> 2] = $10; //@line 31665
 $71 = $ReallocAsyncCtx18 + 8 | 0; //@line 31666
 HEAP32[$71 >> 2] = $8; //@line 31667
 $72 = $ReallocAsyncCtx18 + 12 | 0; //@line 31668
 HEAP32[$72 >> 2] = $41; //@line 31669
 $73 = $ReallocAsyncCtx18 + 16 | 0; //@line 31670
 HEAP32[$73 >> 2] = $2; //@line 31671
 $74 = $ReallocAsyncCtx18 + 20 | 0; //@line 31672
 HEAP32[$74 >> 2] = $2; //@line 31673
 $75 = $ReallocAsyncCtx18 + 24 | 0; //@line 31674
 HEAP32[$75 >> 2] = $4; //@line 31675
 $76 = $ReallocAsyncCtx18 + 28 | 0; //@line 31676
 HEAP32[$76 >> 2] = $6; //@line 31677
 $77 = $ReallocAsyncCtx18 + 32 | 0; //@line 31678
 HEAP32[$77 >> 2] = $39; //@line 31679
 $78 = $ReallocAsyncCtx18 + 36 | 0; //@line 31680
 HEAP32[$78 >> 2] = $40; //@line 31681
 $79 = $ReallocAsyncCtx18 + 40 | 0; //@line 31682
 HEAP32[$79 >> 2] = $8; //@line 31683
 $80 = $ReallocAsyncCtx18 + 44 | 0; //@line 31684
 HEAP32[$80 >> 2] = $10; //@line 31685
 $81 = $ReallocAsyncCtx18 + 48 | 0; //@line 31686
 HEAP32[$81 >> 2] = $12; //@line 31687
 $82 = $ReallocAsyncCtx18 + 52 | 0; //@line 31688
 HEAP32[$82 >> 2] = $14; //@line 31689
 $83 = $ReallocAsyncCtx18 + 56 | 0; //@line 31690
 HEAP32[$83 >> 2] = $16; //@line 31691
 $84 = $ReallocAsyncCtx18 + 60 | 0; //@line 31692
 HEAP32[$84 >> 2] = $18; //@line 31693
 $85 = $ReallocAsyncCtx18 + 64 | 0; //@line 31694
 HEAP8[$85 >> 0] = $20; //@line 31695
 $86 = $ReallocAsyncCtx18 + 68 | 0; //@line 31696
 HEAP32[$86 >> 2] = $22; //@line 31697
 $87 = $ReallocAsyncCtx18 + 72 | 0; //@line 31698
 HEAP32[$87 >> 2] = $24; //@line 31699
 $88 = $ReallocAsyncCtx18 + 76 | 0; //@line 31700
 HEAP32[$88 >> 2] = $26; //@line 31701
 $89 = $ReallocAsyncCtx18 + 80 | 0; //@line 31702
 HEAP32[$89 >> 2] = $28; //@line 31703
 $90 = $ReallocAsyncCtx18 + 84 | 0; //@line 31704
 HEAP32[$90 >> 2] = $30; //@line 31705
 $91 = $ReallocAsyncCtx18 + 88 | 0; //@line 31706
 HEAP32[$91 >> 2] = $32; //@line 31707
 $92 = $ReallocAsyncCtx18 + 92 | 0; //@line 31708
 HEAP32[$92 >> 2] = $34; //@line 31709
 $93 = $ReallocAsyncCtx18 + 96 | 0; //@line 31710
 HEAP32[$93 >> 2] = $36; //@line 31711
 sp = STACKTOP; //@line 31712
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_364($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17244
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17246
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17248
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17250
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17252
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17254
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17256
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17258
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17260
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17262
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17264
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17266
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 17268
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 17270
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 17272
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 17274
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 17276
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 17278
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 17280
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 17282
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 17284
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 17286
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 17288
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 17290
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 17292
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  $51 = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$30 >> 2] | 0) | 0; //@line 17298
  HEAP8[$4 >> 0] = $51; //@line 17299
  HEAP8[$36 >> 0] = $51; //@line 17300
  $52 = HEAP32[$30 >> 2] | 0; //@line 17301
  $55 = HEAP32[(HEAP32[$52 >> 2] | 0) + 56 >> 2] | 0; //@line 17304
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(100) | 0; //@line 17305
  $56 = FUNCTION_TABLE_iiiiii[$55 & 7]($52, $38, $14, $16, $40) | 0; //@line 17306
  if (!___async) {
   HEAP8[___async_retval >> 0] = $56 & 1; //@line 17311
   ___async_unwind = 0; //@line 17312
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 492; //@line 17314
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 17316
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 17318
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 17320
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 17322
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 17324
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 17326
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 17328
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 17330
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 17332
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 17334
  HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 17336
  HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 17338
  HEAP32[$ReallocAsyncCtx2 + 52 >> 2] = $26; //@line 17340
  HEAP32[$ReallocAsyncCtx2 + 56 >> 2] = $28; //@line 17342
  HEAP32[$ReallocAsyncCtx2 + 60 >> 2] = $30; //@line 17344
  HEAP32[$ReallocAsyncCtx2 + 64 >> 2] = $32; //@line 17346
  HEAP32[$ReallocAsyncCtx2 + 68 >> 2] = $34; //@line 17348
  HEAP32[$ReallocAsyncCtx2 + 72 >> 2] = $36; //@line 17350
  HEAP32[$ReallocAsyncCtx2 + 76 >> 2] = $38; //@line 17352
  HEAP32[$ReallocAsyncCtx2 + 80 >> 2] = $40; //@line 17354
  HEAP32[$ReallocAsyncCtx2 + 84 >> 2] = $42; //@line 17356
  HEAP32[$ReallocAsyncCtx2 + 88 >> 2] = $44; //@line 17358
  HEAP32[$ReallocAsyncCtx2 + 92 >> 2] = $46; //@line 17360
  HEAP32[$ReallocAsyncCtx2 + 96 >> 2] = $48; //@line 17362
  sp = STACKTOP; //@line 17363
  return;
 }
 _printf(13544, $42) | 0; //@line 17366
 $85 = HEAP8[$36 >> 0] | 0; //@line 17370
 HEAP32[$46 >> 2] = HEAPU8[$14 >> 0]; //@line 17371
 HEAP32[$46 + 4 >> 2] = $85; //@line 17373
 _printf(13557, $46) | 0; //@line 17374
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(72) | 0; //@line 17375
 _putchar(10) | 0; //@line 17376
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 493; //@line 17379
  $86 = $ReallocAsyncCtx8 + 4 | 0; //@line 17380
  HEAP32[$86 >> 2] = $2; //@line 17381
  $87 = $ReallocAsyncCtx8 + 8 | 0; //@line 17382
  HEAP32[$87 >> 2] = $4; //@line 17383
  $88 = $ReallocAsyncCtx8 + 12 | 0; //@line 17384
  HEAP32[$88 >> 2] = $6; //@line 17385
  $89 = $ReallocAsyncCtx8 + 16 | 0; //@line 17386
  HEAP32[$89 >> 2] = $8; //@line 17387
  $90 = $ReallocAsyncCtx8 + 20 | 0; //@line 17388
  HEAP32[$90 >> 2] = $10; //@line 17389
  $91 = $ReallocAsyncCtx8 + 24 | 0; //@line 17390
  HEAP32[$91 >> 2] = $12; //@line 17391
  $92 = $ReallocAsyncCtx8 + 28 | 0; //@line 17392
  HEAP32[$92 >> 2] = $14; //@line 17393
  $93 = $ReallocAsyncCtx8 + 32 | 0; //@line 17394
  HEAP32[$93 >> 2] = $16; //@line 17395
  $94 = $ReallocAsyncCtx8 + 36 | 0; //@line 17396
  HEAP32[$94 >> 2] = $18; //@line 17397
  $95 = $ReallocAsyncCtx8 + 40 | 0; //@line 17398
  HEAP32[$95 >> 2] = $20; //@line 17399
  $96 = $ReallocAsyncCtx8 + 44 | 0; //@line 17400
  HEAP32[$96 >> 2] = $22; //@line 17401
  $97 = $ReallocAsyncCtx8 + 48 | 0; //@line 17402
  HEAP32[$97 >> 2] = $24; //@line 17403
  $98 = $ReallocAsyncCtx8 + 52 | 0; //@line 17404
  HEAP32[$98 >> 2] = $26; //@line 17405
  $99 = $ReallocAsyncCtx8 + 56 | 0; //@line 17406
  HEAP32[$99 >> 2] = $28; //@line 17407
  $100 = $ReallocAsyncCtx8 + 60 | 0; //@line 17408
  HEAP32[$100 >> 2] = $32; //@line 17409
  $101 = $ReallocAsyncCtx8 + 64 | 0; //@line 17410
  HEAP32[$101 >> 2] = $30; //@line 17411
  $102 = $ReallocAsyncCtx8 + 68 | 0; //@line 17412
  HEAP32[$102 >> 2] = $34; //@line 17413
  sp = STACKTOP; //@line 17414
  return;
 }
 ___async_unwind = 0; //@line 17417
 HEAP32[$ReallocAsyncCtx8 >> 2] = 493; //@line 17418
 $86 = $ReallocAsyncCtx8 + 4 | 0; //@line 17419
 HEAP32[$86 >> 2] = $2; //@line 17420
 $87 = $ReallocAsyncCtx8 + 8 | 0; //@line 17421
 HEAP32[$87 >> 2] = $4; //@line 17422
 $88 = $ReallocAsyncCtx8 + 12 | 0; //@line 17423
 HEAP32[$88 >> 2] = $6; //@line 17424
 $89 = $ReallocAsyncCtx8 + 16 | 0; //@line 17425
 HEAP32[$89 >> 2] = $8; //@line 17426
 $90 = $ReallocAsyncCtx8 + 20 | 0; //@line 17427
 HEAP32[$90 >> 2] = $10; //@line 17428
 $91 = $ReallocAsyncCtx8 + 24 | 0; //@line 17429
 HEAP32[$91 >> 2] = $12; //@line 17430
 $92 = $ReallocAsyncCtx8 + 28 | 0; //@line 17431
 HEAP32[$92 >> 2] = $14; //@line 17432
 $93 = $ReallocAsyncCtx8 + 32 | 0; //@line 17433
 HEAP32[$93 >> 2] = $16; //@line 17434
 $94 = $ReallocAsyncCtx8 + 36 | 0; //@line 17435
 HEAP32[$94 >> 2] = $18; //@line 17436
 $95 = $ReallocAsyncCtx8 + 40 | 0; //@line 17437
 HEAP32[$95 >> 2] = $20; //@line 17438
 $96 = $ReallocAsyncCtx8 + 44 | 0; //@line 17439
 HEAP32[$96 >> 2] = $22; //@line 17440
 $97 = $ReallocAsyncCtx8 + 48 | 0; //@line 17441
 HEAP32[$97 >> 2] = $24; //@line 17442
 $98 = $ReallocAsyncCtx8 + 52 | 0; //@line 17443
 HEAP32[$98 >> 2] = $26; //@line 17444
 $99 = $ReallocAsyncCtx8 + 56 | 0; //@line 17445
 HEAP32[$99 >> 2] = $28; //@line 17446
 $100 = $ReallocAsyncCtx8 + 60 | 0; //@line 17447
 HEAP32[$100 >> 2] = $32; //@line 17448
 $101 = $ReallocAsyncCtx8 + 64 | 0; //@line 17449
 HEAP32[$101 >> 2] = $30; //@line 17450
 $102 = $ReallocAsyncCtx8 + 68 | 0; //@line 17451
 HEAP32[$102 >> 2] = $34; //@line 17452
 sp = STACKTOP; //@line 17453
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17024
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17026
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17028
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17030
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17032
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17034
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17036
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17038
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17040
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17042
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17044
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17046
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 17048
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 17050
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 17052
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 17054
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 17056
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 17058
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 17060
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 17062
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 17064
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 17066
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 17068
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 17070
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 17072
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  $51 = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$30 >> 2] | 0) | 0; //@line 17078
  HEAP8[$4 >> 0] = $51; //@line 17079
  HEAP8[$36 >> 0] = $51; //@line 17080
  $52 = HEAP32[$30 >> 2] | 0; //@line 17081
  $55 = HEAP32[(HEAP32[$52 >> 2] | 0) + 56 >> 2] | 0; //@line 17084
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(100) | 0; //@line 17085
  $56 = FUNCTION_TABLE_iiiiii[$55 & 7]($52, $38, $14, $16, $40) | 0; //@line 17086
  if (!___async) {
   HEAP8[___async_retval >> 0] = $56 & 1; //@line 17091
   ___async_unwind = 0; //@line 17092
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 492; //@line 17094
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 17096
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 17098
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 17100
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 17102
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 17104
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 17106
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 17108
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 17110
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 17112
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 17114
  HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 17116
  HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 17118
  HEAP32[$ReallocAsyncCtx2 + 52 >> 2] = $26; //@line 17120
  HEAP32[$ReallocAsyncCtx2 + 56 >> 2] = $28; //@line 17122
  HEAP32[$ReallocAsyncCtx2 + 60 >> 2] = $30; //@line 17124
  HEAP32[$ReallocAsyncCtx2 + 64 >> 2] = $32; //@line 17126
  HEAP32[$ReallocAsyncCtx2 + 68 >> 2] = $34; //@line 17128
  HEAP32[$ReallocAsyncCtx2 + 72 >> 2] = $36; //@line 17130
  HEAP32[$ReallocAsyncCtx2 + 76 >> 2] = $38; //@line 17132
  HEAP32[$ReallocAsyncCtx2 + 80 >> 2] = $40; //@line 17134
  HEAP32[$ReallocAsyncCtx2 + 84 >> 2] = $42; //@line 17136
  HEAP32[$ReallocAsyncCtx2 + 88 >> 2] = $44; //@line 17138
  HEAP32[$ReallocAsyncCtx2 + 92 >> 2] = $46; //@line 17140
  HEAP32[$ReallocAsyncCtx2 + 96 >> 2] = $48; //@line 17142
  sp = STACKTOP; //@line 17143
  return;
 }
 _printf(13544, $42) | 0; //@line 17146
 $85 = HEAP8[$36 >> 0] | 0; //@line 17150
 HEAP32[$46 >> 2] = HEAPU8[$14 >> 0]; //@line 17151
 HEAP32[$46 + 4 >> 2] = $85; //@line 17153
 _printf(13557, $46) | 0; //@line 17154
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(72) | 0; //@line 17155
 _putchar(10) | 0; //@line 17156
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 493; //@line 17159
  $86 = $ReallocAsyncCtx8 + 4 | 0; //@line 17160
  HEAP32[$86 >> 2] = $2; //@line 17161
  $87 = $ReallocAsyncCtx8 + 8 | 0; //@line 17162
  HEAP32[$87 >> 2] = $4; //@line 17163
  $88 = $ReallocAsyncCtx8 + 12 | 0; //@line 17164
  HEAP32[$88 >> 2] = $6; //@line 17165
  $89 = $ReallocAsyncCtx8 + 16 | 0; //@line 17166
  HEAP32[$89 >> 2] = $8; //@line 17167
  $90 = $ReallocAsyncCtx8 + 20 | 0; //@line 17168
  HEAP32[$90 >> 2] = $10; //@line 17169
  $91 = $ReallocAsyncCtx8 + 24 | 0; //@line 17170
  HEAP32[$91 >> 2] = $12; //@line 17171
  $92 = $ReallocAsyncCtx8 + 28 | 0; //@line 17172
  HEAP32[$92 >> 2] = $14; //@line 17173
  $93 = $ReallocAsyncCtx8 + 32 | 0; //@line 17174
  HEAP32[$93 >> 2] = $16; //@line 17175
  $94 = $ReallocAsyncCtx8 + 36 | 0; //@line 17176
  HEAP32[$94 >> 2] = $18; //@line 17177
  $95 = $ReallocAsyncCtx8 + 40 | 0; //@line 17178
  HEAP32[$95 >> 2] = $20; //@line 17179
  $96 = $ReallocAsyncCtx8 + 44 | 0; //@line 17180
  HEAP32[$96 >> 2] = $22; //@line 17181
  $97 = $ReallocAsyncCtx8 + 48 | 0; //@line 17182
  HEAP32[$97 >> 2] = $24; //@line 17183
  $98 = $ReallocAsyncCtx8 + 52 | 0; //@line 17184
  HEAP32[$98 >> 2] = $26; //@line 17185
  $99 = $ReallocAsyncCtx8 + 56 | 0; //@line 17186
  HEAP32[$99 >> 2] = $28; //@line 17187
  $100 = $ReallocAsyncCtx8 + 60 | 0; //@line 17188
  HEAP32[$100 >> 2] = $32; //@line 17189
  $101 = $ReallocAsyncCtx8 + 64 | 0; //@line 17190
  HEAP32[$101 >> 2] = $30; //@line 17191
  $102 = $ReallocAsyncCtx8 + 68 | 0; //@line 17192
  HEAP32[$102 >> 2] = $34; //@line 17193
  sp = STACKTOP; //@line 17194
  return;
 }
 ___async_unwind = 0; //@line 17197
 HEAP32[$ReallocAsyncCtx8 >> 2] = 493; //@line 17198
 $86 = $ReallocAsyncCtx8 + 4 | 0; //@line 17199
 HEAP32[$86 >> 2] = $2; //@line 17200
 $87 = $ReallocAsyncCtx8 + 8 | 0; //@line 17201
 HEAP32[$87 >> 2] = $4; //@line 17202
 $88 = $ReallocAsyncCtx8 + 12 | 0; //@line 17203
 HEAP32[$88 >> 2] = $6; //@line 17204
 $89 = $ReallocAsyncCtx8 + 16 | 0; //@line 17205
 HEAP32[$89 >> 2] = $8; //@line 17206
 $90 = $ReallocAsyncCtx8 + 20 | 0; //@line 17207
 HEAP32[$90 >> 2] = $10; //@line 17208
 $91 = $ReallocAsyncCtx8 + 24 | 0; //@line 17209
 HEAP32[$91 >> 2] = $12; //@line 17210
 $92 = $ReallocAsyncCtx8 + 28 | 0; //@line 17211
 HEAP32[$92 >> 2] = $14; //@line 17212
 $93 = $ReallocAsyncCtx8 + 32 | 0; //@line 17213
 HEAP32[$93 >> 2] = $16; //@line 17214
 $94 = $ReallocAsyncCtx8 + 36 | 0; //@line 17215
 HEAP32[$94 >> 2] = $18; //@line 17216
 $95 = $ReallocAsyncCtx8 + 40 | 0; //@line 17217
 HEAP32[$95 >> 2] = $20; //@line 17218
 $96 = $ReallocAsyncCtx8 + 44 | 0; //@line 17219
 HEAP32[$96 >> 2] = $22; //@line 17220
 $97 = $ReallocAsyncCtx8 + 48 | 0; //@line 17221
 HEAP32[$97 >> 2] = $24; //@line 17222
 $98 = $ReallocAsyncCtx8 + 52 | 0; //@line 17223
 HEAP32[$98 >> 2] = $26; //@line 17224
 $99 = $ReallocAsyncCtx8 + 56 | 0; //@line 17225
 HEAP32[$99 >> 2] = $28; //@line 17226
 $100 = $ReallocAsyncCtx8 + 60 | 0; //@line 17227
 HEAP32[$100 >> 2] = $32; //@line 17228
 $101 = $ReallocAsyncCtx8 + 64 | 0; //@line 17229
 HEAP32[$101 >> 2] = $30; //@line 17230
 $102 = $ReallocAsyncCtx8 + 68 | 0; //@line 17231
 HEAP32[$102 >> 2] = $34; //@line 17232
 sp = STACKTOP; //@line 17233
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_194($0) {
 $0 = $0 | 0;
 var $$pre120 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 5160
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5162
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5164
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5166
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5168
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5170
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5172
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5174
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 5176
 $$pre120 = HEAP32[$6 >> 2] | 0; //@line 5177
 if ($$pre120 | 0) {
  $19 = HEAP32[$$pre120 + 4 >> 2] | 0; //@line 5181
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 5182
  FUNCTION_TABLE_vii[$19 & 31]($16, $12); //@line 5183
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 580; //@line 5186
   $20 = $ReallocAsyncCtx8 + 4 | 0; //@line 5187
   HEAP32[$20 >> 2] = $2; //@line 5188
   $21 = $ReallocAsyncCtx8 + 8 | 0; //@line 5189
   HEAP32[$21 >> 2] = $4; //@line 5190
   $22 = $ReallocAsyncCtx8 + 12 | 0; //@line 5191
   HEAP32[$22 >> 2] = $8; //@line 5192
   $23 = $ReallocAsyncCtx8 + 16 | 0; //@line 5193
   HEAP32[$23 >> 2] = $6; //@line 5194
   $24 = $ReallocAsyncCtx8 + 20 | 0; //@line 5195
   HEAP32[$24 >> 2] = $10; //@line 5196
   $25 = $ReallocAsyncCtx8 + 24 | 0; //@line 5197
   HEAP32[$25 >> 2] = $12; //@line 5198
   $26 = $ReallocAsyncCtx8 + 28 | 0; //@line 5199
   HEAP32[$26 >> 2] = $14; //@line 5200
   sp = STACKTOP; //@line 5201
   return;
  }
  ___async_unwind = 0; //@line 5204
  HEAP32[$ReallocAsyncCtx8 >> 2] = 580; //@line 5205
  $20 = $ReallocAsyncCtx8 + 4 | 0; //@line 5206
  HEAP32[$20 >> 2] = $2; //@line 5207
  $21 = $ReallocAsyncCtx8 + 8 | 0; //@line 5208
  HEAP32[$21 >> 2] = $4; //@line 5209
  $22 = $ReallocAsyncCtx8 + 12 | 0; //@line 5210
  HEAP32[$22 >> 2] = $8; //@line 5211
  $23 = $ReallocAsyncCtx8 + 16 | 0; //@line 5212
  HEAP32[$23 >> 2] = $6; //@line 5213
  $24 = $ReallocAsyncCtx8 + 20 | 0; //@line 5214
  HEAP32[$24 >> 2] = $10; //@line 5215
  $25 = $ReallocAsyncCtx8 + 24 | 0; //@line 5216
  HEAP32[$25 >> 2] = $12; //@line 5217
  $26 = $ReallocAsyncCtx8 + 28 | 0; //@line 5218
  HEAP32[$26 >> 2] = $14; //@line 5219
  sp = STACKTOP; //@line 5220
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 5223
 $27 = $14 + 12 | 0; //@line 5224
 HEAP32[$14 >> 2] = 582; //@line 5225
 HEAP32[$14 + 4 >> 2] = 0; //@line 5227
 HEAP32[$14 + 8 >> 2] = $2; //@line 5229
 HEAP32[$27 >> 2] = 848; //@line 5230
 $28 = $2 + 1228 | 0; //@line 5231
 if (($28 | 0) == ($14 | 0)) {
  $51 = HEAP32[214] | 0; //@line 5235
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 5236
  FUNCTION_TABLE_vi[$51 & 1023]($14); //@line 5237
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 585; //@line 5240
   $52 = $ReallocAsyncCtx12 + 4 | 0; //@line 5241
   HEAP32[$52 >> 2] = $14; //@line 5242
   $53 = $ReallocAsyncCtx12 + 8 | 0; //@line 5243
   HEAP32[$53 >> 2] = $4; //@line 5244
   $54 = $ReallocAsyncCtx12 + 12 | 0; //@line 5245
   HEAP32[$54 >> 2] = $2; //@line 5246
   $55 = $ReallocAsyncCtx12 + 16 | 0; //@line 5247
   HEAP32[$55 >> 2] = $8; //@line 5248
   sp = STACKTOP; //@line 5249
   return;
  }
  ___async_unwind = 0; //@line 5252
  HEAP32[$ReallocAsyncCtx12 >> 2] = 585; //@line 5253
  $52 = $ReallocAsyncCtx12 + 4 | 0; //@line 5254
  HEAP32[$52 >> 2] = $14; //@line 5255
  $53 = $ReallocAsyncCtx12 + 8 | 0; //@line 5256
  HEAP32[$53 >> 2] = $4; //@line 5257
  $54 = $ReallocAsyncCtx12 + 12 | 0; //@line 5258
  HEAP32[$54 >> 2] = $2; //@line 5259
  $55 = $ReallocAsyncCtx12 + 16 | 0; //@line 5260
  HEAP32[$55 >> 2] = $8; //@line 5261
  sp = STACKTOP; //@line 5262
  return;
 }
 $30 = $2 + 1240 | 0; //@line 5265
 $31 = HEAP32[$30 >> 2] | 0; //@line 5266
 if (!$31) {
  $43 = HEAP32[213] | 0; //@line 5270
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 5271
  FUNCTION_TABLE_vii[$43 & 31]($28, $14); //@line 5272
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 584; //@line 5275
   $44 = $ReallocAsyncCtx11 + 4 | 0; //@line 5276
   HEAP32[$44 >> 2] = $2; //@line 5277
   $45 = $ReallocAsyncCtx11 + 8 | 0; //@line 5278
   HEAP32[$45 >> 2] = $14; //@line 5279
   $46 = $ReallocAsyncCtx11 + 12 | 0; //@line 5280
   HEAP32[$46 >> 2] = $4; //@line 5281
   $47 = $ReallocAsyncCtx11 + 16 | 0; //@line 5282
   HEAP32[$47 >> 2] = $8; //@line 5283
   $48 = $ReallocAsyncCtx11 + 20 | 0; //@line 5284
   HEAP32[$48 >> 2] = $27; //@line 5285
   $49 = $ReallocAsyncCtx11 + 24 | 0; //@line 5286
   HEAP32[$49 >> 2] = $30; //@line 5287
   sp = STACKTOP; //@line 5288
   return;
  }
  ___async_unwind = 0; //@line 5291
  HEAP32[$ReallocAsyncCtx11 >> 2] = 584; //@line 5292
  $44 = $ReallocAsyncCtx11 + 4 | 0; //@line 5293
  HEAP32[$44 >> 2] = $2; //@line 5294
  $45 = $ReallocAsyncCtx11 + 8 | 0; //@line 5295
  HEAP32[$45 >> 2] = $14; //@line 5296
  $46 = $ReallocAsyncCtx11 + 12 | 0; //@line 5297
  HEAP32[$46 >> 2] = $4; //@line 5298
  $47 = $ReallocAsyncCtx11 + 16 | 0; //@line 5299
  HEAP32[$47 >> 2] = $8; //@line 5300
  $48 = $ReallocAsyncCtx11 + 20 | 0; //@line 5301
  HEAP32[$48 >> 2] = $27; //@line 5302
  $49 = $ReallocAsyncCtx11 + 24 | 0; //@line 5303
  HEAP32[$49 >> 2] = $30; //@line 5304
  sp = STACKTOP; //@line 5305
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 5309
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 5310
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 5311
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 583; //@line 5314
   $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 5315
   HEAP32[$35 >> 2] = $2; //@line 5316
   $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 5317
   HEAP32[$36 >> 2] = $14; //@line 5318
   $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 5319
   HEAP32[$37 >> 2] = $4; //@line 5320
   $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 5321
   HEAP32[$38 >> 2] = $28; //@line 5322
   $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 5323
   HEAP32[$39 >> 2] = $30; //@line 5324
   $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 5325
   HEAP32[$40 >> 2] = $8; //@line 5326
   $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 5327
   HEAP32[$41 >> 2] = $27; //@line 5328
   sp = STACKTOP; //@line 5329
   return;
  }
  ___async_unwind = 0; //@line 5332
  HEAP32[$ReallocAsyncCtx10 >> 2] = 583; //@line 5333
  $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 5334
  HEAP32[$35 >> 2] = $2; //@line 5335
  $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 5336
  HEAP32[$36 >> 2] = $14; //@line 5337
  $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 5338
  HEAP32[$37 >> 2] = $4; //@line 5339
  $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 5340
  HEAP32[$38 >> 2] = $28; //@line 5341
  $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 5342
  HEAP32[$39 >> 2] = $30; //@line 5343
  $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 5344
  HEAP32[$40 >> 2] = $8; //@line 5345
  $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 5346
  HEAP32[$41 >> 2] = $27; //@line 5347
  sp = STACKTOP; //@line 5348
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 6396
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6398
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6400
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6402
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6404
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6406
 $$pre = HEAP32[$2 >> 2] | 0; //@line 6407
 if ($$pre | 0) {
  $13 = HEAP32[$$pre + 4 >> 2] | 0; //@line 6411
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 6412
  FUNCTION_TABLE_vii[$13 & 31]($10, $6); //@line 6413
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 321; //@line 6416
   $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 6417
   HEAP32[$14 >> 2] = $2; //@line 6418
   $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 6419
   HEAP32[$15 >> 2] = $4; //@line 6420
   $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 6421
   HEAP32[$16 >> 2] = $6; //@line 6422
   $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 6423
   HEAP32[$17 >> 2] = $8; //@line 6424
   sp = STACKTOP; //@line 6425
   return;
  }
  ___async_unwind = 0; //@line 6428
  HEAP32[$ReallocAsyncCtx2 >> 2] = 321; //@line 6429
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 6430
  HEAP32[$14 >> 2] = $2; //@line 6431
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 6432
  HEAP32[$15 >> 2] = $4; //@line 6433
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 6434
  HEAP32[$16 >> 2] = $6; //@line 6435
  $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 6436
  HEAP32[$17 >> 2] = $8; //@line 6437
  sp = STACKTOP; //@line 6438
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 6441
 $18 = $6 + 16 | 0; //@line 6442
 $19 = $6 + 28 | 0; //@line 6443
 $20 = HEAP32[$19 >> 2] | 0; //@line 6444
 if ($20 | 0) {
  $22 = $4 + 1896 | 0; //@line 6447
  if (($22 | 0) != ($18 | 0)) {
   $24 = $4 + 1908 | 0; //@line 6450
   $25 = HEAP32[$24 >> 2] | 0; //@line 6451
   if (!$25) {
    $36 = HEAP32[$20 + 4 >> 2] | 0; //@line 6455
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 6456
    FUNCTION_TABLE_vii[$36 & 31]($22, $18); //@line 6457
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 323; //@line 6460
     $37 = $ReallocAsyncCtx4 + 4 | 0; //@line 6461
     HEAP32[$37 >> 2] = $19; //@line 6462
     $38 = $ReallocAsyncCtx4 + 8 | 0; //@line 6463
     HEAP32[$38 >> 2] = $24; //@line 6464
     $39 = $ReallocAsyncCtx4 + 12 | 0; //@line 6465
     HEAP32[$39 >> 2] = $6; //@line 6466
     $40 = $ReallocAsyncCtx4 + 16 | 0; //@line 6467
     HEAP32[$40 >> 2] = $4; //@line 6468
     sp = STACKTOP; //@line 6469
     return;
    }
    ___async_unwind = 0; //@line 6472
    HEAP32[$ReallocAsyncCtx4 >> 2] = 323; //@line 6473
    $37 = $ReallocAsyncCtx4 + 4 | 0; //@line 6474
    HEAP32[$37 >> 2] = $19; //@line 6475
    $38 = $ReallocAsyncCtx4 + 8 | 0; //@line 6476
    HEAP32[$38 >> 2] = $24; //@line 6477
    $39 = $ReallocAsyncCtx4 + 12 | 0; //@line 6478
    HEAP32[$39 >> 2] = $6; //@line 6479
    $40 = $ReallocAsyncCtx4 + 16 | 0; //@line 6480
    HEAP32[$40 >> 2] = $4; //@line 6481
    sp = STACKTOP; //@line 6482
    return;
   } else {
    $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 6486
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 6487
    FUNCTION_TABLE_vi[$28 & 1023]($22); //@line 6488
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 322; //@line 6491
     $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 6492
     HEAP32[$29 >> 2] = $19; //@line 6493
     $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 6494
     HEAP32[$30 >> 2] = $24; //@line 6495
     $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 6496
     HEAP32[$31 >> 2] = $22; //@line 6497
     $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 6498
     HEAP32[$32 >> 2] = $18; //@line 6499
     $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 6500
     HEAP32[$33 >> 2] = $6; //@line 6501
     $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 6502
     HEAP32[$34 >> 2] = $4; //@line 6503
     sp = STACKTOP; //@line 6504
     return;
    }
    ___async_unwind = 0; //@line 6507
    HEAP32[$ReallocAsyncCtx3 >> 2] = 322; //@line 6508
    $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 6509
    HEAP32[$29 >> 2] = $19; //@line 6510
    $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 6511
    HEAP32[$30 >> 2] = $24; //@line 6512
    $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 6513
    HEAP32[$31 >> 2] = $22; //@line 6514
    $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 6515
    HEAP32[$32 >> 2] = $18; //@line 6516
    $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 6517
    HEAP32[$33 >> 2] = $6; //@line 6518
    $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 6519
    HEAP32[$34 >> 2] = $4; //@line 6520
    sp = STACKTOP; //@line 6521
    return;
   }
  }
 }
 $41 = $6 + 32 | 0; //@line 6526
 $42 = $6 + 44 | 0; //@line 6527
 $43 = HEAP32[$42 >> 2] | 0; //@line 6528
 if (!$43) {
  return;
 }
 $45 = $4 + 1912 | 0; //@line 6533
 if (($45 | 0) == ($41 | 0)) {
  return;
 }
 $47 = $4 + 1924 | 0; //@line 6538
 $48 = HEAP32[$47 >> 2] | 0; //@line 6539
 if (!$48) {
  $57 = HEAP32[$43 + 4 >> 2] | 0; //@line 6543
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 6544
  FUNCTION_TABLE_vii[$57 & 31]($45, $41); //@line 6545
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 325; //@line 6548
   $58 = $ReallocAsyncCtx6 + 4 | 0; //@line 6549
   HEAP32[$58 >> 2] = $42; //@line 6550
   $59 = $ReallocAsyncCtx6 + 8 | 0; //@line 6551
   HEAP32[$59 >> 2] = $47; //@line 6552
   sp = STACKTOP; //@line 6553
   return;
  }
  ___async_unwind = 0; //@line 6556
  HEAP32[$ReallocAsyncCtx6 >> 2] = 325; //@line 6557
  $58 = $ReallocAsyncCtx6 + 4 | 0; //@line 6558
  HEAP32[$58 >> 2] = $42; //@line 6559
  $59 = $ReallocAsyncCtx6 + 8 | 0; //@line 6560
  HEAP32[$59 >> 2] = $47; //@line 6561
  sp = STACKTOP; //@line 6562
  return;
 } else {
  $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 6566
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 6567
  FUNCTION_TABLE_vi[$51 & 1023]($45); //@line 6568
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 324; //@line 6571
   $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 6572
   HEAP32[$52 >> 2] = $42; //@line 6573
   $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 6574
   HEAP32[$53 >> 2] = $47; //@line 6575
   $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 6576
   HEAP32[$54 >> 2] = $45; //@line 6577
   $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 6578
   HEAP32[$55 >> 2] = $41; //@line 6579
   sp = STACKTOP; //@line 6580
   return;
  }
  ___async_unwind = 0; //@line 6583
  HEAP32[$ReallocAsyncCtx5 >> 2] = 324; //@line 6584
  $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 6585
  HEAP32[$52 >> 2] = $42; //@line 6586
  $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 6587
  HEAP32[$53 >> 2] = $47; //@line 6588
  $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 6589
  HEAP32[$54 >> 2] = $45; //@line 6590
  $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 6591
  HEAP32[$55 >> 2] = $41; //@line 6592
  sp = STACKTOP; //@line 6593
  return;
 }
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$05$i = 0, $$06$i = 0, $20 = 0, $42 = 0, $54 = 0, $57 = 0, $62 = 0, $63 = 0, $77 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 16027
 STACKTOP = STACKTOP + 32 | 0; //@line 16028
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 16028
 $vararg_buffer5 = sp + 24 | 0; //@line 16029
 $vararg_buffer3 = sp + 16 | 0; //@line 16030
 $vararg_buffer1 = sp + 8 | 0; //@line 16031
 $vararg_buffer = sp; //@line 16032
 _printf(13258, $vararg_buffer) | 0; //@line 16033
 _printf(13658, $vararg_buffer1) | 0; //@line 16034
 $AsyncCtx12 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16035
 _putchar(10) | 0; //@line 16036
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 485; //@line 16039
  HEAP32[$AsyncCtx12 + 4 >> 2] = $0; //@line 16041
  HEAP32[$AsyncCtx12 + 8 >> 2] = $vararg_buffer3; //@line 16043
  HEAP32[$AsyncCtx12 + 12 >> 2] = $vararg_buffer3; //@line 16045
  HEAP32[$AsyncCtx12 + 16 >> 2] = $vararg_buffer5; //@line 16047
  HEAP32[$AsyncCtx12 + 20 >> 2] = $vararg_buffer5; //@line 16049
  HEAP32[$AsyncCtx12 + 24 >> 2] = $vararg_buffer1; //@line 16051
  HEAP32[$AsyncCtx12 + 28 >> 2] = $vararg_buffer; //@line 16053
  sp = STACKTOP; //@line 16054
  STACKTOP = sp; //@line 16055
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 16057
 $9 = HEAP32[$0 + 356 >> 2] | 0; //@line 16059
 $AsyncCtx21 = _emscripten_alloc_async_context(40, sp) | 0; //@line 16061
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($9, $0 + 1016 | 0); //@line 16062
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 486; //@line 16065
  HEAP32[$AsyncCtx21 + 4 >> 2] = $0; //@line 16067
  HEAP32[$AsyncCtx21 + 8 >> 2] = $vararg_buffer1; //@line 16069
  HEAP32[$AsyncCtx21 + 12 >> 2] = $vararg_buffer; //@line 16071
  HEAP32[$AsyncCtx21 + 16 >> 2] = $vararg_buffer1; //@line 16073
  HEAP32[$AsyncCtx21 + 20 >> 2] = $vararg_buffer; //@line 16075
  HEAP32[$AsyncCtx21 + 24 >> 2] = $vararg_buffer3; //@line 16077
  HEAP32[$AsyncCtx21 + 28 >> 2] = $vararg_buffer3; //@line 16079
  HEAP32[$AsyncCtx21 + 32 >> 2] = $vararg_buffer5; //@line 16081
  HEAP32[$AsyncCtx21 + 36 >> 2] = $vararg_buffer5; //@line 16083
  sp = STACKTOP; //@line 16084
  STACKTOP = sp; //@line 16085
  return;
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 16087
 $20 = $0 + 968 | 0; //@line 16088
 HEAP32[$20 >> 2] = HEAP32[$20 >> 2] & -17; //@line 16091
 if (HEAP8[$0 + 944 >> 0] & 8) {
  if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) >> 2] | 0)) {
   HEAP8[$0 + 372 >> 0] = 0; //@line 16104
   HEAP32[$0 + 956 >> 2] = 0; //@line 16106
   HEAP32[$0 + 960 >> 2] = 0; //@line 16108
   HEAP32[$0 + 964 >> 2] = 0; //@line 16110
   HEAP8[$0 + 380 >> 0] = 0; //@line 16112
   HEAP8[$0 + 894 >> 0] = 1; //@line 16114
   HEAP8[$0 + 895 >> 0] = 1; //@line 16116
   HEAP8[$0 + 377 >> 0] = 0; //@line 16118
   HEAP8[$0 + 1152 >> 0] = 0; //@line 16120
   HEAP16[$0 + 1154 >> 1] = 1; //@line 16122
   $42 = $0 + 4 | 0; //@line 16123
   __ZN14LoRaMacCommand20clear_command_bufferEv($42); //@line 16124
   __ZN14LoRaMacCommand19clear_repeat_bufferEv($42); //@line 16125
   __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($42); //@line 16126
   HEAP8[$0 + 371 >> 0] = 1; //@line 16128
   __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $0 + 360 | 0, 0); //@line 16130
   HEAP8[$0 + 373 >> 0] = 0; //@line 16132
   HEAP8[$0 + 374 >> 0] = 0; //@line 16134
   $$05$i = HEAP32[$0 + 1208 >> 2] | 0; //@line 16136
   if ($$05$i | 0) {
    $$06$i = $$05$i; //@line 16139
    do {
     HEAP32[$$06$i + 36 >> 2] = 0; //@line 16142
     $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 16144
    } while (($$06$i | 0) != 0);
   }
   HEAP8[$0 + 378 >> 0] = 0; //@line 16154
   HEAP8[$0 + 379 >> 0] = 0; //@line 16156
   $54 = HEAP32[$0 >> 2] | 0; //@line 16157
   $57 = HEAP32[(HEAP32[$54 >> 2] | 0) + 52 >> 2] | 0; //@line 16160
   $62 = (HEAPU8[$0 + 897 >> 0] | 0) + 1 & 255; //@line 16165
   $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 16166
   $63 = FUNCTION_TABLE_iii[$57 & 31]($54, $62) | 0; //@line 16167
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 487; //@line 16170
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16172
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 16174
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 16176
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 16178
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 16180
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer3; //@line 16182
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer3; //@line 16184
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer5; //@line 16186
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer5; //@line 16188
    sp = STACKTOP; //@line 16189
    STACKTOP = sp; //@line 16190
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 16192
   HEAP8[$0 + 1097 >> 0] = $63; //@line 16194
   HEAP8[$vararg_buffer1 >> 0] = 0; //@line 16195
   HEAP8[$vararg_buffer >> 0] = HEAP8[$0 + 1156 >> 0] << 7; //@line 16199
   $AsyncCtx15 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16200
   $77 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $vararg_buffer1, $vararg_buffer, 0, 0, 0) | 0; //@line 16201
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 488; //@line 16204
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 16206
    HEAP32[$AsyncCtx15 + 8 >> 2] = $vararg_buffer3; //@line 16208
    HEAP32[$AsyncCtx15 + 12 >> 2] = $vararg_buffer3; //@line 16210
    HEAP32[$AsyncCtx15 + 16 >> 2] = $vararg_buffer5; //@line 16212
    HEAP32[$AsyncCtx15 + 20 >> 2] = $vararg_buffer5; //@line 16214
    HEAP32[$AsyncCtx15 + 24 >> 2] = $vararg_buffer; //@line 16216
    HEAP32[$AsyncCtx15 + 28 >> 2] = $vararg_buffer1; //@line 16218
    sp = STACKTOP; //@line 16219
    STACKTOP = sp; //@line 16220
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 16222
   if ($77 | 0) {
    _printf(13684, $vararg_buffer3) | 0; //@line 16225
    HEAP32[$vararg_buffer5 >> 2] = $77; //@line 16226
    _printf(13697, $vararg_buffer5) | 0; //@line 16227
    $AsyncCtx8 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16228
    _putchar(10) | 0; //@line 16229
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 490; //@line 16232
     HEAP32[$AsyncCtx8 + 4 >> 2] = $vararg_buffer; //@line 16234
     HEAP32[$AsyncCtx8 + 8 >> 2] = $vararg_buffer1; //@line 16236
     sp = STACKTOP; //@line 16237
     STACKTOP = sp; //@line 16238
     return;
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 16240
    STACKTOP = sp; //@line 16241
    return;
   }
  }
 }
 $AsyncCtx18 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16245
 __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 16246
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 489; //@line 16249
  HEAP32[$AsyncCtx18 + 4 >> 2] = $vararg_buffer; //@line 16251
  HEAP32[$AsyncCtx18 + 8 >> 2] = $vararg_buffer1; //@line 16253
  sp = STACKTOP; //@line 16254
  STACKTOP = sp; //@line 16255
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 16257
 STACKTOP = sp; //@line 16258
 return;
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 var $$ = 0, $$sink = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $82 = 0, $AsyncCtx = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 521
 STACKTOP = STACKTOP + 64 | 0; //@line 522
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 522
 $vararg_buffer14 = sp + 56 | 0; //@line 523
 $vararg_buffer12 = sp + 48 | 0; //@line 524
 $vararg_buffer10 = sp + 40 | 0; //@line 525
 $vararg_buffer8 = sp + 32 | 0; //@line 526
 $vararg_buffer5 = sp + 24 | 0; //@line 527
 $vararg_buffer3 = sp + 16 | 0; //@line 528
 $vararg_buffer1 = sp + 8 | 0; //@line 529
 $14 = $8 & 1; //@line 531
 $15 = $9 & 1; //@line 532
 $16 = $10 & 1; //@line 533
 $17 = $12 & 1; //@line 534
 $19 = $0 + 689 | 0; //@line 536
 HEAP8[$19 >> 0] = $1; //@line 537
 _printf(10904, sp) | 0; //@line 538
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$19 >> 0]; //@line 541
 _printf(11079, $vararg_buffer1) | 0; //@line 542
 $AsyncCtx26 = _emscripten_alloc_async_context(92, sp) | 0; //@line 543
 _putchar(10) | 0; //@line 544
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 63; //@line 547
  HEAP32[$AsyncCtx26 + 4 >> 2] = $vararg_buffer3; //@line 549
  HEAP32[$AsyncCtx26 + 8 >> 2] = $vararg_buffer3; //@line 551
  HEAP8[$AsyncCtx26 + 12 >> 0] = $2; //@line 553
  HEAP32[$AsyncCtx26 + 16 >> 2] = $vararg_buffer5; //@line 555
  HEAP32[$AsyncCtx26 + 20 >> 2] = $vararg_buffer5; //@line 557
  HEAP32[$AsyncCtx26 + 24 >> 2] = $1; //@line 559
  HEAP32[$AsyncCtx26 + 28 >> 2] = $0; //@line 561
  HEAP32[$AsyncCtx26 + 32 >> 2] = $3; //@line 563
  HEAP32[$AsyncCtx26 + 36 >> 2] = $4; //@line 565
  HEAP32[$AsyncCtx26 + 40 >> 2] = $5; //@line 567
  HEAP16[$AsyncCtx26 + 44 >> 1] = $7; //@line 569
  HEAP8[$AsyncCtx26 + 46 >> 0] = $14; //@line 571
  HEAP8[$AsyncCtx26 + 47 >> 0] = $15; //@line 573
  HEAP8[$AsyncCtx26 + 48 >> 0] = $17; //@line 575
  HEAP32[$AsyncCtx26 + 52 >> 2] = $13; //@line 577
  HEAP32[$AsyncCtx26 + 56 >> 2] = $vararg_buffer8; //@line 579
  HEAP32[$AsyncCtx26 + 60 >> 2] = $vararg_buffer8; //@line 581
  HEAP32[$AsyncCtx26 + 64 >> 2] = $vararg_buffer10; //@line 583
  HEAP32[$AsyncCtx26 + 68 >> 2] = $vararg_buffer10; //@line 585
  HEAP8[$AsyncCtx26 + 72 >> 0] = $6; //@line 587
  HEAP8[$AsyncCtx26 + 73 >> 0] = $16; //@line 589
  HEAP8[$AsyncCtx26 + 74 >> 0] = $11; //@line 591
  HEAP32[$AsyncCtx26 + 76 >> 2] = $vararg_buffer12; //@line 593
  HEAP32[$AsyncCtx26 + 80 >> 2] = $vararg_buffer12; //@line 595
  HEAP32[$AsyncCtx26 + 84 >> 2] = $vararg_buffer14; //@line 597
  HEAP32[$AsyncCtx26 + 88 >> 2] = $vararg_buffer14; //@line 599
  sp = STACKTOP; //@line 600
  STACKTOP = sp; //@line 601
  return;
 }
 _emscripten_free_async_context($AsyncCtx26 | 0); //@line 603
 _printf(10904, $vararg_buffer3) | 0; //@line 604
 HEAP32[$vararg_buffer5 >> 2] = $2 << 24 >> 24; //@line 606
 _printf(11557, $vararg_buffer5) | 0; //@line 607
 $AsyncCtx22 = _emscripten_alloc_async_context(76, sp) | 0; //@line 608
 _putchar(10) | 0; //@line 609
 if (___async) {
  HEAP32[$AsyncCtx22 >> 2] = 64; //@line 612
  HEAP32[$AsyncCtx22 + 4 >> 2] = $1; //@line 614
  HEAP32[$AsyncCtx22 + 8 >> 2] = $0; //@line 616
  HEAP8[$AsyncCtx22 + 12 >> 0] = $2; //@line 618
  HEAP32[$AsyncCtx22 + 16 >> 2] = $3; //@line 620
  HEAP32[$AsyncCtx22 + 20 >> 2] = $4; //@line 622
  HEAP32[$AsyncCtx22 + 24 >> 2] = $5; //@line 624
  HEAP16[$AsyncCtx22 + 28 >> 1] = $7; //@line 626
  HEAP8[$AsyncCtx22 + 30 >> 0] = $14; //@line 628
  HEAP8[$AsyncCtx22 + 31 >> 0] = $15; //@line 630
  HEAP8[$AsyncCtx22 + 32 >> 0] = $17; //@line 632
  HEAP32[$AsyncCtx22 + 36 >> 2] = $13; //@line 634
  HEAP32[$AsyncCtx22 + 40 >> 2] = $vararg_buffer8; //@line 636
  HEAP32[$AsyncCtx22 + 44 >> 2] = $vararg_buffer8; //@line 638
  HEAP32[$AsyncCtx22 + 48 >> 2] = $vararg_buffer10; //@line 640
  HEAP32[$AsyncCtx22 + 52 >> 2] = $vararg_buffer10; //@line 642
  HEAP8[$AsyncCtx22 + 56 >> 0] = $6; //@line 644
  HEAP8[$AsyncCtx22 + 57 >> 0] = $16; //@line 646
  HEAP8[$AsyncCtx22 + 58 >> 0] = $11; //@line 648
  HEAP32[$AsyncCtx22 + 60 >> 2] = $vararg_buffer12; //@line 650
  HEAP32[$AsyncCtx22 + 64 >> 2] = $vararg_buffer12; //@line 652
  HEAP32[$AsyncCtx22 + 68 >> 2] = $vararg_buffer14; //@line 654
  HEAP32[$AsyncCtx22 + 72 >> 2] = $vararg_buffer14; //@line 656
  sp = STACKTOP; //@line 657
  STACKTOP = sp; //@line 658
  return;
 }
 _emscripten_free_async_context($AsyncCtx22 | 0); //@line 660
 switch ($1 | 0) {
 case 0:
  {
   HEAP8[$0 + 696 >> 0] = $2; //@line 664
   HEAP32[$0 + 700 >> 2] = $3; //@line 666
   HEAP32[$0 + 704 >> 2] = $4; //@line 668
   HEAP32[$0 + 712 >> 2] = $5; //@line 670
   HEAP16[$0 + 716 >> 1] = $7; //@line 672
   HEAP8[$0 + 718 >> 0] = $14; //@line 674
   HEAP8[$0 + 720 >> 0] = $15; //@line 676
   HEAP8[$0 + 721 >> 0] = $17; //@line 678
   HEAP32[$0 + 724 >> 2] = $13; //@line 680
   _printf(10904, $vararg_buffer8) | 0; //@line 681
   _printf(11584, $vararg_buffer10) | 0; //@line 682
   $AsyncCtx18 = _emscripten_alloc_async_context(4, sp) | 0; //@line 683
   _putchar(10) | 0; //@line 684
   if (___async) {
    HEAP32[$AsyncCtx18 >> 2] = 65; //@line 687
    sp = STACKTOP; //@line 688
    STACKTOP = sp; //@line 689
    return;
   }
   _emscripten_free_async_context($AsyncCtx18 | 0); //@line 691
   STACKTOP = sp; //@line 692
   return;
  }
 case 1:
  {
   HEAP8[$0 + 748 >> 0] = $2; //@line 697
   if ($4 >>> 0 > 2) {
    while (1) {}
   }
   $82 = $4 + 7 | 0; //@line 703
   HEAP32[$0 + 752 >> 2] = $82; //@line 705
   HEAP32[$0 + 756 >> 2] = $5; //@line 707
   HEAP8[$0 + 761 >> 0] = $6; //@line 709
   HEAP16[$0 + 762 >> 1] = $7; //@line 711
   HEAP8[$0 + 764 >> 0] = $14; //@line 713
   HEAP8[$0 + 767 >> 0] = $16; //@line 715
   HEAP8[$0 + 768 >> 0] = $11; //@line 717
   HEAP8[$0 + 766 >> 0] = $15; //@line 719
   HEAP8[$0 + 769 >> 0] = $17; //@line 721
   HEAP32[$0 + 772 >> 2] = $13; //@line 723
   $$ = $5 >>> 0 > 6 ? $5 : 6; //@line 725
   if (($4 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 13; //@line 733
   } else {
    if (($82 | 0) == 8 & $$ >>> 0 > 11) {
     label = 13; //@line 739
    } else {
     $$sink = 0; //@line 741
    }
   }
   if ((label | 0) == 13) {
    $$sink = 1; //@line 745
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 748
   _printf(10904, $vararg_buffer12) | 0; //@line 749
   _printf(11602, $vararg_buffer14) | 0; //@line 750
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 751
   _putchar(10) | 0; //@line 752
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 66; //@line 755
    sp = STACKTOP; //@line 756
    STACKTOP = sp; //@line 757
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 759
   STACKTOP = sp; //@line 760
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 764
   return;
  }
 }
}
function _mbedtls_cipher_update($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0102 = 0, $$0103 = 0, $$0105 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre$phi107Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $12 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $36 = 0, $37 = 0, $40 = 0, $41 = 0, $45 = 0, $49 = 0, $50 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $80 = 0, $85 = 0, $94 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2355
 if (!$0) {
  $$1 = -24832; //@line 2358
  return $$1 | 0; //@line 2359
 }
 $6 = HEAP32[$0 >> 2] | 0; //@line 2361
 if (($4 | 0) == 0 | ($6 | 0) == 0) {
  $$1 = -24832; //@line 2366
  return $$1 | 0; //@line 2367
 }
 HEAP32[$4 >> 2] = 0; //@line 2369
 $10 = HEAP32[$6 + 24 >> 2] | 0; //@line 2371
 $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 2373
 switch ($12 | 0) {
 case 1:
  {
   if (($10 | 0) != ($2 | 0)) {
    $$1 = -25216; //@line 2378
    return $$1 | 0; //@line 2379
   }
   HEAP32[$4 >> 2] = $2; //@line 2381
   $17 = HEAP32[(HEAP32[$6 + 28 >> 2] | 0) + 4 >> 2] | 0; //@line 2385
   $19 = HEAP32[$0 + 60 >> 2] | 0; //@line 2387
   $21 = HEAP32[$0 + 8 >> 2] | 0; //@line 2389
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2390
   $22 = FUNCTION_TABLE_iiiii[$17 & 3]($19, $21, $1, $3) | 0; //@line 2391
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 681; //@line 2394
    sp = STACKTOP; //@line 2395
    return 0; //@line 2396
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 2398
   $$1 = $22; //@line 2399
   return $$1 | 0; //@line 2400
  }
 case 6:
  {
   HEAP32[$4 >> 2] = $2; //@line 2404
   $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 2406
   $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2407
   $25 = _mbedtls_gcm_update($24, $2, $1, $3) | 0; //@line 2408
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 682; //@line 2411
    sp = STACKTOP; //@line 2412
    return 0; //@line 2413
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2415
   $$1 = $25; //@line 2416
   return $$1 | 0; //@line 2417
  }
 default:
  {
   if (!$10) {
    $$1 = -25472; //@line 2423
    return $$1 | 0; //@line 2424
   }
   if (($1 | 0) == ($3 | 0)) {
    if (HEAP32[$0 + 36 >> 2] | 0) {
     $$1 = -24832; //@line 2432
     return $$1 | 0; //@line 2433
    }
    if (($2 >>> 0) % ($10 >>> 0) | 0 | 0) {
     $$1 = -24832; //@line 2438
     return $$1 | 0; //@line 2439
    }
   }
   if (($12 | 0) != 2) {
    $$1 = -24704; //@line 2444
    return $$1 | 0; //@line 2445
   }
   $34 = $0 + 8 | 0; //@line 2447
   switch (HEAP32[$34 >> 2] | 0) {
   case 0:
    {
     $36 = $0 + 36 | 0; //@line 2451
     $37 = HEAP32[$36 >> 2] | 0; //@line 2452
     if (($10 - $37 | 0) >>> 0 < $2 >>> 0) {
      label = 18; //@line 2456
     } else {
      $$pre$phiZ2D = $36; //@line 2458
      $45 = $37; //@line 2458
      label = 20; //@line 2459
     }
     break;
    }
   case 1:
    {
     $40 = $0 + 36 | 0; //@line 2464
     $41 = HEAP32[$40 >> 2] | 0; //@line 2465
     if (($10 - $41 | 0) >>> 0 > $2 >>> 0) {
      $$pre$phiZ2D = $40; //@line 2469
      $45 = $41; //@line 2469
      label = 20; //@line 2470
     } else {
      $$pre$phi107Z2D = $40; //@line 2472
      $49 = $41; //@line 2472
     }
     break;
    }
   default:
    {
     label = 18; //@line 2477
    }
   }
   if ((label | 0) == 18) {
    $$phi$trans$insert = $0 + 36 | 0; //@line 2481
    $$pre$phi107Z2D = $$phi$trans$insert; //@line 2483
    $49 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 2483
   } else if ((label | 0) == 20) {
    _memcpy($0 + 20 + $45 | 0, $1 | 0, $2 | 0) | 0; //@line 2487
    HEAP32[$$pre$phiZ2D >> 2] = (HEAP32[$$pre$phiZ2D >> 2] | 0) + $2; //@line 2490
    $$1 = 0; //@line 2491
    return $$1 | 0; //@line 2492
   }
   do {
    if (!$49) {
     $$0102 = $3; //@line 2497
     $$0103 = $2; //@line 2497
     $$0105 = $1; //@line 2497
    } else {
     $50 = $10 - $49 | 0; //@line 2499
     _memcpy($0 + 20 + $49 | 0, $1 | 0, $50 | 0) | 0; //@line 2501
     $56 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 2506
     $58 = HEAP32[$0 + 60 >> 2] | 0; //@line 2508
     $59 = HEAP32[$34 >> 2] | 0; //@line 2509
     $AsyncCtx3 = _emscripten_alloc_async_context(44, sp) | 0; //@line 2512
     $62 = FUNCTION_TABLE_iiiiiii[$56 & 3]($58, $59, $10, $0 + 40 | 0, $0 + 20 | 0, $3) | 0; //@line 2513
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 683; //@line 2516
      HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 2518
      HEAP32[$AsyncCtx3 + 8 >> 2] = $10; //@line 2520
      HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 2522
      HEAP32[$AsyncCtx3 + 16 >> 2] = $$pre$phi107Z2D; //@line 2524
      HEAP32[$AsyncCtx3 + 20 >> 2] = $1; //@line 2526
      HEAP32[$AsyncCtx3 + 24 >> 2] = $50; //@line 2528
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 2530
      HEAP32[$AsyncCtx3 + 32 >> 2] = $34; //@line 2532
      HEAP32[$AsyncCtx3 + 36 >> 2] = $0; //@line 2534
      HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 2536
      sp = STACKTOP; //@line 2537
      return 0; //@line 2538
     }
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2540
     if (!$62) {
      HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $10; //@line 2545
      HEAP32[$$pre$phi107Z2D >> 2] = 0; //@line 2547
      $$0102 = $3 + $10 | 0; //@line 2550
      $$0103 = $2 - $50 | 0; //@line 2550
      $$0105 = $1 + $50 | 0; //@line 2550
      break;
     } else {
      $$1 = $62; //@line 2553
      return $$1 | 0; //@line 2554
     }
    }
   } while (0);
   if (!$$0103) {
    $$1 = 0; //@line 2560
    return $$1 | 0; //@line 2561
   }
   $80 = ($$0103 >>> 0) % ($10 >>> 0) | 0; //@line 2563
   if (!$80) {
    $$0 = (HEAP32[$34 >> 2] | 0) == 0 ? $10 : 0; //@line 2569
   } else {
    $$0 = $80; //@line 2571
   }
   $85 = $$0103 - $$0 | 0; //@line 2574
   _memcpy($0 + 20 | 0, $$0105 + $85 | 0, $$0 | 0) | 0; //@line 2576
   HEAP32[$$pre$phi107Z2D >> 2] = (HEAP32[$$pre$phi107Z2D >> 2] | 0) + $$0; //@line 2579
   if (!$85) {
    $$1 = 0; //@line 2582
    return $$1 | 0; //@line 2583
   }
   $94 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 2589
   $96 = HEAP32[$0 + 60 >> 2] | 0; //@line 2591
   $97 = HEAP32[$34 >> 2] | 0; //@line 2592
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2594
   $99 = FUNCTION_TABLE_iiiiiii[$94 & 3]($96, $97, $85, $0 + 40 | 0, $$0105, $$0102) | 0; //@line 2595
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 684; //@line 2598
    HEAP32[$AsyncCtx7 + 4 >> 2] = $4; //@line 2600
    HEAP32[$AsyncCtx7 + 8 >> 2] = $85; //@line 2602
    sp = STACKTOP; //@line 2603
    return 0; //@line 2604
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2606
   if ($99 | 0) {
    $$1 = $99; //@line 2609
    return $$1 | 0; //@line 2610
   }
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $85; //@line 2614
   $$1 = 0; //@line 2615
   return $$1 | 0; //@line 2616
  }
 }
 return 0; //@line 2619
}
function _mbedtls_cipher_cmac_update($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$06984 = 0, $$06984$us = 0, $$070 = 0, $$073 = 0, $$09$i = 0, $$09$i75 = 0, $$1$lcssa = 0, $$174$lcssa = 0, $$17481 = 0, $$182 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $22 = 0, $26 = 0, $3 = 0, $38 = 0, $43 = 0, $46 = 0, $5 = 0, $58 = 0, $62 = 0, $66 = 0, $79 = 0, $80 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2879
 STACKTOP = STACKTOP + 16 | 0; //@line 2880
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2880
 $3 = sp; //@line 2881
 if (!$0) {
  $$0 = -24832; //@line 2884
  STACKTOP = sp; //@line 2885
  return $$0 | 0; //@line 2885
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 2887
 if (($1 | 0) == 0 | ($5 | 0) == 0) {
  $$0 = -24832; //@line 2892
  STACKTOP = sp; //@line 2893
  return $$0 | 0; //@line 2893
 }
 $9 = HEAP32[$0 + 64 >> 2] | 0; //@line 2896
 if (!$9) {
  $$0 = -24832; //@line 2899
  STACKTOP = sp; //@line 2900
  return $$0 | 0; //@line 2900
 }
 $12 = HEAP32[$5 + 24 >> 2] | 0; //@line 2903
 $13 = $9 + 32 | 0; //@line 2904
 $14 = HEAP32[$13 >> 2] | 0; //@line 2905
 do {
  if (!$14) {
   $$070 = $1; //@line 2909
   $$073 = $2; //@line 2909
  } else {
   $16 = $12 - $14 | 0; //@line 2911
   if ($16 >>> 0 < $2 >>> 0) {
    _memcpy($9 + 16 + $14 | 0, $1 | 0, $16 | 0) | 0; //@line 2915
    if ($12 | 0) {
     $$09$i = 0; //@line 2918
     do {
      $22 = $9 + $$09$i | 0; //@line 2922
      HEAP8[$22 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$9 + 16 + $$09$i >> 0]; //@line 2925
      $$09$i = $$09$i + 1 | 0; //@line 2926
     } while (($$09$i | 0) != ($12 | 0));
    }
    $AsyncCtx5 = _emscripten_alloc_async_context(40, sp) | 0; //@line 2935
    $26 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 2936
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 690; //@line 2939
     HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 2941
     HEAP32[$AsyncCtx5 + 8 >> 2] = $9; //@line 2943
     HEAP32[$AsyncCtx5 + 12 >> 2] = $12; //@line 2945
     HEAP32[$AsyncCtx5 + 16 >> 2] = $3; //@line 2947
     HEAP32[$AsyncCtx5 + 20 >> 2] = $9; //@line 2949
     HEAP32[$AsyncCtx5 + 24 >> 2] = $3; //@line 2951
     HEAP32[$AsyncCtx5 + 28 >> 2] = $13; //@line 2953
     HEAP32[$AsyncCtx5 + 32 >> 2] = $2; //@line 2955
     HEAP32[$AsyncCtx5 + 36 >> 2] = $1; //@line 2957
     sp = STACKTOP; //@line 2958
     STACKTOP = sp; //@line 2959
     return 0; //@line 2959
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 2961
    if (!$26) {
     $38 = $12 - (HEAP32[$13 >> 2] | 0) | 0; //@line 2965
     HEAP32[$13 >> 2] = 0; //@line 2968
     $$070 = $1 + $38 | 0; //@line 2969
     $$073 = $2 - $38 | 0; //@line 2969
     break;
    } else {
     $$0 = $26; //@line 2972
     STACKTOP = sp; //@line 2973
     return $$0 | 0; //@line 2973
    }
   } else {
    $$070 = $1; //@line 2976
    $$073 = $2; //@line 2976
   }
  }
 } while (0);
 $43 = (($12 + -1 + $$073 | 0) >>> 0) / ($12 >>> 0) | 0; //@line 2982
 L24 : do {
  if ($43 >>> 0 > 1) {
   if (!$12) {
    $$06984$us = 1; //@line 2988
    while (1) {
     $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 2990
     $46 = _mbedtls_cipher_update($0, $9, 0, $9, $3) | 0; //@line 2991
     if (___async) {
      label = 15; //@line 2994
      break;
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2997
     if ($46 | 0) {
      $$0 = $46; //@line 3000
      label = 26; //@line 3001
      break;
     }
     $58 = $$06984$us + 1 | 0; //@line 3004
     if ($58 >>> 0 < $43 >>> 0) {
      $$06984$us = $58; //@line 3007
     } else {
      $$1$lcssa = $$070; //@line 3009
      $$174$lcssa = $$073; //@line 3009
      break L24;
     }
    }
    if ((label | 0) == 15) {
     HEAP32[$AsyncCtx2 >> 2] = 691; //@line 3014
     HEAP32[$AsyncCtx2 + 4 >> 2] = $$06984$us; //@line 3016
     HEAP32[$AsyncCtx2 + 8 >> 2] = $43; //@line 3018
     HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 3020
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 3022
     HEAP32[$AsyncCtx2 + 20 >> 2] = $9; //@line 3024
     HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3026
     HEAP32[$AsyncCtx2 + 28 >> 2] = $$073; //@line 3028
     HEAP32[$AsyncCtx2 + 32 >> 2] = $$070; //@line 3030
     HEAP32[$AsyncCtx2 + 36 >> 2] = $13; //@line 3032
     HEAP32[$AsyncCtx2 + 40 >> 2] = $9; //@line 3034
     sp = STACKTOP; //@line 3035
     STACKTOP = sp; //@line 3036
     return 0; //@line 3036
    } else if ((label | 0) == 26) {
     STACKTOP = sp; //@line 3039
     return $$0 | 0; //@line 3039
    }
   } else {
    $$06984 = 1; //@line 3042
    $$17481 = $$073; //@line 3042
    $$182 = $$070; //@line 3042
   }
   while (1) {
    $$09$i75 = 0; //@line 3045
    do {
     $62 = $9 + $$09$i75 | 0; //@line 3049
     HEAP8[$62 >> 0] = HEAP8[$62 >> 0] ^ HEAP8[$$182 + $$09$i75 >> 0]; //@line 3052
     $$09$i75 = $$09$i75 + 1 | 0; //@line 3053
    } while (($$09$i75 | 0) != ($12 | 0));
    $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 3061
    $66 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 3062
    if (___async) {
     label = 21; //@line 3065
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3068
    if ($66 | 0) {
     $$0 = $66; //@line 3071
     label = 26; //@line 3072
     break;
    }
    $79 = $$17481 - $12 | 0; //@line 3075
    $80 = $$182 + $12 | 0; //@line 3076
    $81 = $$06984 + 1 | 0; //@line 3077
    if ($81 >>> 0 < $43 >>> 0) {
     $$06984 = $81; //@line 3080
     $$17481 = $79; //@line 3080
     $$182 = $80; //@line 3080
    } else {
     $$1$lcssa = $80; //@line 3082
     $$174$lcssa = $79; //@line 3082
     break L24;
    }
   }
   if ((label | 0) == 21) {
    HEAP32[$AsyncCtx >> 2] = 692; //@line 3087
    HEAP32[$AsyncCtx + 4 >> 2] = $$17481; //@line 3089
    HEAP32[$AsyncCtx + 8 >> 2] = $12; //@line 3091
    HEAP32[$AsyncCtx + 12 >> 2] = $$182; //@line 3093
    HEAP32[$AsyncCtx + 16 >> 2] = $$06984; //@line 3095
    HEAP32[$AsyncCtx + 20 >> 2] = $43; //@line 3097
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 3099
    HEAP32[$AsyncCtx + 28 >> 2] = $13; //@line 3101
    HEAP32[$AsyncCtx + 32 >> 2] = $9; //@line 3103
    HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 3105
    HEAP32[$AsyncCtx + 40 >> 2] = $9; //@line 3107
    HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 3109
    sp = STACKTOP; //@line 3110
    STACKTOP = sp; //@line 3111
    return 0; //@line 3111
   } else if ((label | 0) == 26) {
    STACKTOP = sp; //@line 3114
    return $$0 | 0; //@line 3114
   }
  } else {
   $$1$lcssa = $$070; //@line 3117
   $$174$lcssa = $$073; //@line 3117
  }
 } while (0);
 if (!$$174$lcssa) {
  $$0 = 0; //@line 3122
  STACKTOP = sp; //@line 3123
  return $$0 | 0; //@line 3123
 }
 _memcpy((HEAP32[$13 >> 2] | 0) + ($9 + 16) | 0, $$1$lcssa | 0, $$174$lcssa | 0) | 0; //@line 3127
 HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + $$174$lcssa; //@line 3130
 $$0 = 0; //@line 3131
 STACKTOP = sp; //@line 3132
 return $$0 | 0; //@line 3132
}
function __ZN7LoRaMac11schedule_txEv__async_cb_367($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $4 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 17661
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17665
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17669
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17673
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17677
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17679
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17681
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17683
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 17685
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 17687
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 17689
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 17691
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 17693
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 17695
 if (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) {
  $45 = HEAP8[$4 + 893 >> 0] | 0; //@line 17700
  $46 = HEAP8[HEAP32[$0 + 12 >> 2] >> 0] | 0; //@line 17701
  $48 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($4 + 4 | 0) | 0; //@line 17703
  _printf(13258, $8) | 0; //@line 17704
  _printf(13584, $12) | 0; //@line 17705
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(52) | 0; //@line 17706
  _putchar(10) | 0; //@line 17707
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 497; //@line 17710
   $49 = $ReallocAsyncCtx7 + 4 | 0; //@line 17711
   HEAP32[$49 >> 2] = $16; //@line 17712
   $50 = $ReallocAsyncCtx7 + 8 | 0; //@line 17713
   HEAP32[$50 >> 2] = $4; //@line 17714
   $51 = $ReallocAsyncCtx7 + 12 | 0; //@line 17715
   HEAP8[$51 >> 0] = $46; //@line 17716
   $52 = $ReallocAsyncCtx7 + 13 | 0; //@line 17717
   HEAP8[$52 >> 0] = $45; //@line 17718
   $53 = $ReallocAsyncCtx7 + 14 | 0; //@line 17719
   HEAP8[$53 >> 0] = $48; //@line 17720
   $54 = $ReallocAsyncCtx7 + 16 | 0; //@line 17721
   HEAP32[$54 >> 2] = $18; //@line 17722
   $55 = $ReallocAsyncCtx7 + 20 | 0; //@line 17723
   HEAP32[$55 >> 2] = $20; //@line 17724
   $56 = $ReallocAsyncCtx7 + 24 | 0; //@line 17725
   HEAP32[$56 >> 2] = $22; //@line 17726
   $57 = $ReallocAsyncCtx7 + 28 | 0; //@line 17727
   HEAP32[$57 >> 2] = $24; //@line 17728
   $58 = $ReallocAsyncCtx7 + 32 | 0; //@line 17729
   HEAP32[$58 >> 2] = $26; //@line 17730
   $59 = $ReallocAsyncCtx7 + 36 | 0; //@line 17731
   HEAP32[$59 >> 2] = $28; //@line 17732
   $60 = $ReallocAsyncCtx7 + 40 | 0; //@line 17733
   HEAP32[$60 >> 2] = $30; //@line 17734
   $61 = $ReallocAsyncCtx7 + 44 | 0; //@line 17735
   HEAP32[$61 >> 2] = $32; //@line 17736
   $62 = $ReallocAsyncCtx7 + 48 | 0; //@line 17737
   HEAP32[$62 >> 2] = $34; //@line 17738
   sp = STACKTOP; //@line 17739
   return;
  }
  ___async_unwind = 0; //@line 17742
  HEAP32[$ReallocAsyncCtx7 >> 2] = 497; //@line 17743
  $49 = $ReallocAsyncCtx7 + 4 | 0; //@line 17744
  HEAP32[$49 >> 2] = $16; //@line 17745
  $50 = $ReallocAsyncCtx7 + 8 | 0; //@line 17746
  HEAP32[$50 >> 2] = $4; //@line 17747
  $51 = $ReallocAsyncCtx7 + 12 | 0; //@line 17748
  HEAP8[$51 >> 0] = $46; //@line 17749
  $52 = $ReallocAsyncCtx7 + 13 | 0; //@line 17750
  HEAP8[$52 >> 0] = $45; //@line 17751
  $53 = $ReallocAsyncCtx7 + 14 | 0; //@line 17752
  HEAP8[$53 >> 0] = $48; //@line 17753
  $54 = $ReallocAsyncCtx7 + 16 | 0; //@line 17754
  HEAP32[$54 >> 2] = $18; //@line 17755
  $55 = $ReallocAsyncCtx7 + 20 | 0; //@line 17756
  HEAP32[$55 >> 2] = $20; //@line 17757
  $56 = $ReallocAsyncCtx7 + 24 | 0; //@line 17758
  HEAP32[$56 >> 2] = $22; //@line 17759
  $57 = $ReallocAsyncCtx7 + 28 | 0; //@line 17760
  HEAP32[$57 >> 2] = $24; //@line 17761
  $58 = $ReallocAsyncCtx7 + 32 | 0; //@line 17762
  HEAP32[$58 >> 2] = $26; //@line 17763
  $59 = $ReallocAsyncCtx7 + 36 | 0; //@line 17764
  HEAP32[$59 >> 2] = $28; //@line 17765
  $60 = $ReallocAsyncCtx7 + 40 | 0; //@line 17766
  HEAP32[$60 >> 2] = $30; //@line 17767
  $61 = $ReallocAsyncCtx7 + 44 | 0; //@line 17768
  HEAP32[$61 >> 2] = $32; //@line 17769
  $62 = $ReallocAsyncCtx7 + 48 | 0; //@line 17770
  HEAP32[$62 >> 2] = $34; //@line 17771
  sp = STACKTOP; //@line 17772
  return;
 }
 HEAP32[$4 + 972 >> 2] = (HEAP32[$4 + 1172 >> 2] | 0) + (HEAP32[$4 + 1120 >> 2] | 0); //@line 17781
 HEAP32[$4 + 976 >> 2] = (HEAP32[$4 + 1196 >> 2] | 0) + (HEAP32[$4 + 1124 >> 2] | 0); //@line 17788
 if (!(HEAP32[$22 >> 2] | 0)) {
  $70 = HEAP8[$24 >> 0] | 0; //@line 17792
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 17793
  __ZN7LoRaMac21send_frame_on_channelEh($4, $70) | 0; //@line 17794
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 498; //@line 17797
   $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 17798
   HEAP32[$71 >> 2] = $18; //@line 17799
   $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 17800
   HEAP32[$72 >> 2] = $20; //@line 17801
   sp = STACKTOP; //@line 17802
   return;
  }
  ___async_unwind = 0; //@line 17805
  HEAP32[$ReallocAsyncCtx10 >> 2] = 498; //@line 17806
  $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 17807
  HEAP32[$71 >> 2] = $18; //@line 17808
  $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 17809
  HEAP32[$72 >> 2] = $20; //@line 17810
  sp = STACKTOP; //@line 17811
  return;
 } else {
  $73 = $4 + 968 | 0; //@line 17814
  HEAP32[$73 >> 2] = HEAP32[$73 >> 2] | 16; //@line 17817
  _printf(13544, $26) | 0; //@line 17818
  HEAP32[$30 >> 2] = HEAP32[$22 >> 2]; //@line 17820
  _printf(13608, $30) | 0; //@line 17821
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 17822
  _putchar(10) | 0; //@line 17823
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 499; //@line 17826
   $77 = $ReallocAsyncCtx6 + 4 | 0; //@line 17827
   HEAP32[$77 >> 2] = $34; //@line 17828
   $78 = $ReallocAsyncCtx6 + 8 | 0; //@line 17829
   HEAP32[$78 >> 2] = $4; //@line 17830
   $79 = $ReallocAsyncCtx6 + 12 | 0; //@line 17831
   HEAP32[$79 >> 2] = $22; //@line 17832
   $80 = $ReallocAsyncCtx6 + 16 | 0; //@line 17833
   HEAP32[$80 >> 2] = $18; //@line 17834
   $81 = $ReallocAsyncCtx6 + 20 | 0; //@line 17835
   HEAP32[$81 >> 2] = $20; //@line 17836
   sp = STACKTOP; //@line 17837
   return;
  }
  ___async_unwind = 0; //@line 17840
  HEAP32[$ReallocAsyncCtx6 >> 2] = 499; //@line 17841
  $77 = $ReallocAsyncCtx6 + 4 | 0; //@line 17842
  HEAP32[$77 >> 2] = $34; //@line 17843
  $78 = $ReallocAsyncCtx6 + 8 | 0; //@line 17844
  HEAP32[$78 >> 2] = $4; //@line 17845
  $79 = $ReallocAsyncCtx6 + 12 | 0; //@line 17846
  HEAP32[$79 >> 2] = $22; //@line 17847
  $80 = $ReallocAsyncCtx6 + 16 | 0; //@line 17848
  HEAP32[$80 >> 2] = $18; //@line 17849
  $81 = $ReallocAsyncCtx6 + 20 | 0; //@line 17850
  HEAP32[$81 >> 2] = $20; //@line 17851
  sp = STACKTOP; //@line 17852
  return;
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_195($0) {
 $0 = $0 | 0;
 var $$pre$i$i34 = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 5358
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5360
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5362
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5364
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5370
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5372
 $$pre$i$i34 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 5373
 HEAP32[HEAP32[$0 + 20 >> 2] >> 2] = $$pre$i$i34; //@line 5375
 if ($$pre$i$i34 | 0) {
  $18 = HEAP32[$$pre$i$i34 + 8 >> 2] | 0; //@line 5379
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 5380
  FUNCTION_TABLE_vi[$18 & 1023]($12); //@line 5381
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 581; //@line 5384
   $19 = $ReallocAsyncCtx9 + 4 | 0; //@line 5385
   HEAP32[$19 >> 2] = $2; //@line 5386
   $20 = $ReallocAsyncCtx9 + 8 | 0; //@line 5387
   HEAP32[$20 >> 2] = $4; //@line 5388
   $21 = $ReallocAsyncCtx9 + 12 | 0; //@line 5389
   HEAP32[$21 >> 2] = $6; //@line 5390
   $22 = $ReallocAsyncCtx9 + 16 | 0; //@line 5391
   HEAP32[$22 >> 2] = $12; //@line 5392
   $23 = $ReallocAsyncCtx9 + 20 | 0; //@line 5393
   HEAP32[$23 >> 2] = $14; //@line 5394
   sp = STACKTOP; //@line 5395
   return;
  }
  ___async_unwind = 0; //@line 5398
  HEAP32[$ReallocAsyncCtx9 >> 2] = 581; //@line 5399
  $19 = $ReallocAsyncCtx9 + 4 | 0; //@line 5400
  HEAP32[$19 >> 2] = $2; //@line 5401
  $20 = $ReallocAsyncCtx9 + 8 | 0; //@line 5402
  HEAP32[$20 >> 2] = $4; //@line 5403
  $21 = $ReallocAsyncCtx9 + 12 | 0; //@line 5404
  HEAP32[$21 >> 2] = $6; //@line 5405
  $22 = $ReallocAsyncCtx9 + 16 | 0; //@line 5406
  HEAP32[$22 >> 2] = $12; //@line 5407
  $23 = $ReallocAsyncCtx9 + 20 | 0; //@line 5408
  HEAP32[$23 >> 2] = $14; //@line 5409
  sp = STACKTOP; //@line 5410
  return;
 }
 $24 = $14 + 12 | 0; //@line 5413
 HEAP32[$14 >> 2] = 582; //@line 5414
 HEAP32[$14 + 4 >> 2] = 0; //@line 5416
 HEAP32[$14 + 8 >> 2] = $2; //@line 5418
 HEAP32[$24 >> 2] = 848; //@line 5419
 $25 = $2 + 1228 | 0; //@line 5420
 if (($25 | 0) == ($14 | 0)) {
  $48 = HEAP32[214] | 0; //@line 5424
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 5425
  FUNCTION_TABLE_vi[$48 & 1023]($14); //@line 5426
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 585; //@line 5429
   $49 = $ReallocAsyncCtx12 + 4 | 0; //@line 5430
   HEAP32[$49 >> 2] = $14; //@line 5431
   $50 = $ReallocAsyncCtx12 + 8 | 0; //@line 5432
   HEAP32[$50 >> 2] = $4; //@line 5433
   $51 = $ReallocAsyncCtx12 + 12 | 0; //@line 5434
   HEAP32[$51 >> 2] = $2; //@line 5435
   $52 = $ReallocAsyncCtx12 + 16 | 0; //@line 5436
   HEAP32[$52 >> 2] = $6; //@line 5437
   sp = STACKTOP; //@line 5438
   return;
  }
  ___async_unwind = 0; //@line 5441
  HEAP32[$ReallocAsyncCtx12 >> 2] = 585; //@line 5442
  $49 = $ReallocAsyncCtx12 + 4 | 0; //@line 5443
  HEAP32[$49 >> 2] = $14; //@line 5444
  $50 = $ReallocAsyncCtx12 + 8 | 0; //@line 5445
  HEAP32[$50 >> 2] = $4; //@line 5446
  $51 = $ReallocAsyncCtx12 + 12 | 0; //@line 5447
  HEAP32[$51 >> 2] = $2; //@line 5448
  $52 = $ReallocAsyncCtx12 + 16 | 0; //@line 5449
  HEAP32[$52 >> 2] = $6; //@line 5450
  sp = STACKTOP; //@line 5451
  return;
 }
 $27 = $2 + 1240 | 0; //@line 5454
 $28 = HEAP32[$27 >> 2] | 0; //@line 5455
 if (!$28) {
  $40 = HEAP32[213] | 0; //@line 5459
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 5460
  FUNCTION_TABLE_vii[$40 & 31]($25, $14); //@line 5461
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 584; //@line 5464
   $41 = $ReallocAsyncCtx11 + 4 | 0; //@line 5465
   HEAP32[$41 >> 2] = $2; //@line 5466
   $42 = $ReallocAsyncCtx11 + 8 | 0; //@line 5467
   HEAP32[$42 >> 2] = $14; //@line 5468
   $43 = $ReallocAsyncCtx11 + 12 | 0; //@line 5469
   HEAP32[$43 >> 2] = $4; //@line 5470
   $44 = $ReallocAsyncCtx11 + 16 | 0; //@line 5471
   HEAP32[$44 >> 2] = $6; //@line 5472
   $45 = $ReallocAsyncCtx11 + 20 | 0; //@line 5473
   HEAP32[$45 >> 2] = $24; //@line 5474
   $46 = $ReallocAsyncCtx11 + 24 | 0; //@line 5475
   HEAP32[$46 >> 2] = $27; //@line 5476
   sp = STACKTOP; //@line 5477
   return;
  }
  ___async_unwind = 0; //@line 5480
  HEAP32[$ReallocAsyncCtx11 >> 2] = 584; //@line 5481
  $41 = $ReallocAsyncCtx11 + 4 | 0; //@line 5482
  HEAP32[$41 >> 2] = $2; //@line 5483
  $42 = $ReallocAsyncCtx11 + 8 | 0; //@line 5484
  HEAP32[$42 >> 2] = $14; //@line 5485
  $43 = $ReallocAsyncCtx11 + 12 | 0; //@line 5486
  HEAP32[$43 >> 2] = $4; //@line 5487
  $44 = $ReallocAsyncCtx11 + 16 | 0; //@line 5488
  HEAP32[$44 >> 2] = $6; //@line 5489
  $45 = $ReallocAsyncCtx11 + 20 | 0; //@line 5490
  HEAP32[$45 >> 2] = $24; //@line 5491
  $46 = $ReallocAsyncCtx11 + 24 | 0; //@line 5492
  HEAP32[$46 >> 2] = $27; //@line 5493
  sp = STACKTOP; //@line 5494
  return;
 } else {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 5498
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 5499
  FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 5500
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 583; //@line 5503
   $32 = $ReallocAsyncCtx10 + 4 | 0; //@line 5504
   HEAP32[$32 >> 2] = $2; //@line 5505
   $33 = $ReallocAsyncCtx10 + 8 | 0; //@line 5506
   HEAP32[$33 >> 2] = $14; //@line 5507
   $34 = $ReallocAsyncCtx10 + 12 | 0; //@line 5508
   HEAP32[$34 >> 2] = $4; //@line 5509
   $35 = $ReallocAsyncCtx10 + 16 | 0; //@line 5510
   HEAP32[$35 >> 2] = $25; //@line 5511
   $36 = $ReallocAsyncCtx10 + 20 | 0; //@line 5512
   HEAP32[$36 >> 2] = $27; //@line 5513
   $37 = $ReallocAsyncCtx10 + 24 | 0; //@line 5514
   HEAP32[$37 >> 2] = $6; //@line 5515
   $38 = $ReallocAsyncCtx10 + 28 | 0; //@line 5516
   HEAP32[$38 >> 2] = $24; //@line 5517
   sp = STACKTOP; //@line 5518
   return;
  }
  ___async_unwind = 0; //@line 5521
  HEAP32[$ReallocAsyncCtx10 >> 2] = 583; //@line 5522
  $32 = $ReallocAsyncCtx10 + 4 | 0; //@line 5523
  HEAP32[$32 >> 2] = $2; //@line 5524
  $33 = $ReallocAsyncCtx10 + 8 | 0; //@line 5525
  HEAP32[$33 >> 2] = $14; //@line 5526
  $34 = $ReallocAsyncCtx10 + 12 | 0; //@line 5527
  HEAP32[$34 >> 2] = $4; //@line 5528
  $35 = $ReallocAsyncCtx10 + 16 | 0; //@line 5529
  HEAP32[$35 >> 2] = $25; //@line 5530
  $36 = $ReallocAsyncCtx10 + 20 | 0; //@line 5531
  HEAP32[$36 >> 2] = $27; //@line 5532
  $37 = $ReallocAsyncCtx10 + 24 | 0; //@line 5533
  HEAP32[$37 >> 2] = $6; //@line 5534
  $38 = $ReallocAsyncCtx10 + 28 | 0; //@line 5535
  HEAP32[$38 >> 2] = $24; //@line 5536
  sp = STACKTOP; //@line 5537
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_429($0) {
 $0 = $0 | 0;
 var $12 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25269
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25271
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25273
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25275
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25277
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25281
 HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0) >> 2] = 4; //@line 25286
 $18 = HEAP8[$6 >> 0] | 16; //@line 25288
 HEAP8[$6 >> 0] = $18; //@line 25289
 $19 = $18 & -33; //@line 25290
 HEAP8[$6 >> 0] = $19; //@line 25291
 do {
  if (!($19 & 2)) {
   $50 = $19; //@line 25296
  } else {
   $22 = $19 & -3; //@line 25298
   HEAP8[$6 >> 0] = $22; //@line 25299
   if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
    _printf(13258, $8) | 0; //@line 25304
    _printf(13285, $12) | 0; //@line 25305
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 25306
    _putchar(10) | 0; //@line 25307
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 25310
     $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 25311
     HEAP32[$26 >> 2] = $2; //@line 25312
     $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 25313
     HEAP32[$27 >> 2] = $4; //@line 25314
     $28 = $ReallocAsyncCtx6 + 12 | 0; //@line 25315
     HEAP32[$28 >> 2] = $4; //@line 25316
     $29 = $ReallocAsyncCtx6 + 16 | 0; //@line 25317
     HEAP32[$29 >> 2] = $6; //@line 25318
     sp = STACKTOP; //@line 25319
     return;
    }
    ___async_unwind = 0; //@line 25322
    HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 25323
    $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 25324
    HEAP32[$26 >> 2] = $2; //@line 25325
    $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 25326
    HEAP32[$27 >> 2] = $4; //@line 25327
    $28 = $ReallocAsyncCtx6 + 12 | 0; //@line 25328
    HEAP32[$28 >> 2] = $4; //@line 25329
    $29 = $ReallocAsyncCtx6 + 16 | 0; //@line 25330
    HEAP32[$29 >> 2] = $6; //@line 25331
    sp = STACKTOP; //@line 25332
    return;
   }
   if ($22 & 4) {
    $48 = $22 & -5; //@line 25338
    HEAP8[$6 >> 0] = $48; //@line 25339
    $50 = $48; //@line 25340
    break;
   }
   $33 = HEAP32[$2 + 1324 >> 2] | 0; //@line 25344
   $34 = $33 + 16 | 0; //@line 25345
   $36 = __ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0; //@line 25347
   $37 = $33 + 28 | 0; //@line 25348
   $38 = HEAP32[$37 >> 2] | 0; //@line 25349
   if (!$38) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 25352
    _mbed_assert_internal(15352, 15357, 1102); //@line 25353
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 25356
     $40 = $ReallocAsyncCtx15 + 4 | 0; //@line 25357
     HEAP32[$40 >> 2] = $37; //@line 25358
     $41 = $ReallocAsyncCtx15 + 8 | 0; //@line 25359
     HEAP32[$41 >> 2] = $34; //@line 25360
     $42 = $ReallocAsyncCtx15 + 12 | 0; //@line 25361
     HEAP32[$42 >> 2] = $36; //@line 25362
     $43 = $ReallocAsyncCtx15 + 16 | 0; //@line 25363
     HEAP32[$43 >> 2] = $6; //@line 25364
     $44 = $ReallocAsyncCtx15 + 20 | 0; //@line 25365
     HEAP32[$44 >> 2] = $2; //@line 25366
     sp = STACKTOP; //@line 25367
     return;
    }
    ___async_unwind = 0; //@line 25370
    HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 25371
    $40 = $ReallocAsyncCtx15 + 4 | 0; //@line 25372
    HEAP32[$40 >> 2] = $37; //@line 25373
    $41 = $ReallocAsyncCtx15 + 8 | 0; //@line 25374
    HEAP32[$41 >> 2] = $34; //@line 25375
    $42 = $ReallocAsyncCtx15 + 12 | 0; //@line 25376
    HEAP32[$42 >> 2] = $36; //@line 25377
    $43 = $ReallocAsyncCtx15 + 16 | 0; //@line 25378
    HEAP32[$43 >> 2] = $6; //@line 25379
    $44 = $ReallocAsyncCtx15 + 20 | 0; //@line 25380
    HEAP32[$44 >> 2] = $2; //@line 25381
    sp = STACKTOP; //@line 25382
    return;
   } else {
    $45 = HEAP32[$38 >> 2] | 0; //@line 25385
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 25386
    FUNCTION_TABLE_vii[$45 & 31]($34, $36); //@line 25387
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 25390
     $46 = $ReallocAsyncCtx4 + 4 | 0; //@line 25391
     HEAP32[$46 >> 2] = $6; //@line 25392
     $47 = $ReallocAsyncCtx4 + 8 | 0; //@line 25393
     HEAP32[$47 >> 2] = $2; //@line 25394
     sp = STACKTOP; //@line 25395
     return;
    }
    ___async_unwind = 0; //@line 25398
    HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 25399
    $46 = $ReallocAsyncCtx4 + 4 | 0; //@line 25400
    HEAP32[$46 >> 2] = $6; //@line 25401
    $47 = $ReallocAsyncCtx4 + 8 | 0; //@line 25402
    HEAP32[$47 >> 2] = $2; //@line 25403
    sp = STACKTOP; //@line 25404
    return;
   }
  }
 } while (0);
 if (!($50 & 16)) {
  return;
 }
 HEAP8[$6 >> 0] = $50 & -17; //@line 25415
 $54 = HEAP32[$2 + 1324 >> 2] | 0; //@line 25417
 $55 = $54 + 48 | 0; //@line 25418
 $57 = __ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0; //@line 25420
 $58 = $54 + 60 | 0; //@line 25421
 $59 = HEAP32[$58 >> 2] | 0; //@line 25422
 if (!$59) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 25425
  _mbed_assert_internal(15352, 15357, 1102); //@line 25426
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 25429
   $61 = $ReallocAsyncCtx14 + 4 | 0; //@line 25430
   HEAP32[$61 >> 2] = $58; //@line 25431
   $62 = $ReallocAsyncCtx14 + 8 | 0; //@line 25432
   HEAP32[$62 >> 2] = $55; //@line 25433
   $63 = $ReallocAsyncCtx14 + 12 | 0; //@line 25434
   HEAP32[$63 >> 2] = $57; //@line 25435
   sp = STACKTOP; //@line 25436
   return;
  }
  ___async_unwind = 0; //@line 25439
  HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 25440
  $61 = $ReallocAsyncCtx14 + 4 | 0; //@line 25441
  HEAP32[$61 >> 2] = $58; //@line 25442
  $62 = $ReallocAsyncCtx14 + 8 | 0; //@line 25443
  HEAP32[$62 >> 2] = $55; //@line 25444
  $63 = $ReallocAsyncCtx14 + 12 | 0; //@line 25445
  HEAP32[$63 >> 2] = $57; //@line 25446
  sp = STACKTOP; //@line 25447
  return;
 } else {
  $64 = HEAP32[$59 >> 2] | 0; //@line 25450
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 25451
  FUNCTION_TABLE_vii[$64 & 31]($55, $57); //@line 25452
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 25455
   sp = STACKTOP; //@line 25456
   return;
  }
  ___async_unwind = 0; //@line 25459
  HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 25460
  sp = STACKTOP; //@line 25461
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $13 = 0, $22 = 0, $25 = 0, $35 = 0, $36 = 0, $37 = 0, $41 = 0, $43 = 0, $46 = 0, $53 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $64 = 0, $67 = 0, $7 = 0, $71 = 0, $74 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 13701
 STACKTOP = STACKTOP + 48 | 0; //@line 13702
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 13702
 $6 = sp + 16 | 0; //@line 13703
 $7 = sp; //@line 13704
 $8 = $1 + 12 | 0; //@line 13705
 $9 = HEAP32[$8 >> 2] | 0; //@line 13706
 do {
  if (!$9) {
   $11 = $7 + 12 | 0; //@line 13710
   HEAP32[$11 >> 2] = 0; //@line 13711
   $36 = 0; //@line 13712
   $53 = $11; //@line 13712
  } else {
   $13 = HEAP32[$9 + 4 >> 2] | 0; //@line 13715
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 13716
   FUNCTION_TABLE_vii[$13 & 31]($7, $1); //@line 13717
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 415; //@line 13720
    HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 13722
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 13724
    HEAP16[$AsyncCtx + 12 >> 1] = $3; //@line 13726
    HEAP16[$AsyncCtx + 14 >> 1] = $4; //@line 13728
    HEAP8[$AsyncCtx + 16 >> 0] = $5; //@line 13730
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 13732
    HEAP32[$AsyncCtx + 24 >> 2] = $7; //@line 13734
    HEAP32[$AsyncCtx + 28 >> 2] = $8; //@line 13736
    sp = STACKTOP; //@line 13737
    STACKTOP = sp; //@line 13738
    return 0; //@line 13738
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 13740
   $$pre$i = HEAP32[$8 >> 2] | 0; //@line 13741
   $22 = $7 + 12 | 0; //@line 13742
   HEAP32[$22 >> 2] = $$pre$i; //@line 13743
   if (!$$pre$i) {
    $36 = 0; //@line 13746
    $53 = $22; //@line 13746
   } else {
    $25 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 13750
    $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 13751
    FUNCTION_TABLE_vii[$25 & 31]($6, $7); //@line 13752
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 416; //@line 13755
     HEAP32[$AsyncCtx2 + 4 >> 2] = $22; //@line 13757
     HEAP32[$AsyncCtx2 + 8 >> 2] = $6; //@line 13759
     HEAP32[$AsyncCtx2 + 12 >> 2] = $22; //@line 13761
     HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 13763
     HEAP16[$AsyncCtx2 + 20 >> 1] = $3; //@line 13765
     HEAP16[$AsyncCtx2 + 22 >> 1] = $4; //@line 13767
     HEAP8[$AsyncCtx2 + 24 >> 0] = $5; //@line 13769
     HEAP32[$AsyncCtx2 + 28 >> 2] = $0; //@line 13771
     HEAP32[$AsyncCtx2 + 32 >> 2] = $7; //@line 13773
     sp = STACKTOP; //@line 13774
     STACKTOP = sp; //@line 13775
     return 0; //@line 13775
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 13777
     $36 = HEAP32[$22 >> 2] | 0; //@line 13779
     $53 = $22; //@line 13779
     break;
    }
   }
  }
 } while (0);
 $35 = $6 + 12 | 0; //@line 13785
 HEAP32[$35 >> 2] = $36; //@line 13786
 $37 = $6 + 16 | 0; //@line 13787
 HEAP32[$37 >> 2] = $2; //@line 13788
 HEAP16[$6 + 20 >> 1] = $3; //@line 13790
 HEAP16[$6 + 22 >> 1] = $4; //@line 13792
 HEAP8[$6 + 24 >> 0] = $5; //@line 13794
 $41 = _equeue_alloc($0, 28) | 0; //@line 13795
 do {
  if (!$41) {
   $$0$i = 0; //@line 13799
  } else {
   $43 = HEAP32[$35 >> 2] | 0; //@line 13801
   do {
    if (!$43) {
     $57 = 0; //@line 13805
    } else {
     $46 = HEAP32[$43 + 4 >> 2] | 0; //@line 13808
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 13809
     FUNCTION_TABLE_vii[$46 & 31]($41, $6); //@line 13810
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 417; //@line 13813
      HEAP32[$AsyncCtx5 + 4 >> 2] = $35; //@line 13815
      HEAP32[$AsyncCtx5 + 8 >> 2] = $41; //@line 13817
      HEAP32[$AsyncCtx5 + 12 >> 2] = $37; //@line 13819
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 13821
      HEAP32[$AsyncCtx5 + 20 >> 2] = $35; //@line 13823
      HEAP32[$AsyncCtx5 + 24 >> 2] = $53; //@line 13825
      HEAP32[$AsyncCtx5 + 28 >> 2] = $6; //@line 13827
      HEAP32[$AsyncCtx5 + 32 >> 2] = $7; //@line 13829
      sp = STACKTOP; //@line 13830
      STACKTOP = sp; //@line 13831
      return 0; //@line 13831
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 13833
      $57 = HEAP32[$35 >> 2] | 0; //@line 13835
      break;
     }
    }
   } while (0);
   HEAP32[$41 + 12 >> 2] = $57; //@line 13841
   $58 = $41 + 16 | 0; //@line 13842
   HEAP32[$58 >> 2] = HEAP32[$37 >> 2]; //@line 13843
   HEAP32[$58 + 4 >> 2] = HEAP32[$37 + 4 >> 2]; //@line 13843
   HEAP8[$58 + 8 >> 0] = HEAP8[$37 + 8 >> 0] | 0; //@line 13843
   _equeue_event_dtor($41, 418); //@line 13844
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13845
   $59 = _equeue_post($0, 419, $41) | 0; //@line 13846
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 420; //@line 13849
    HEAP32[$AsyncCtx15 + 4 >> 2] = $35; //@line 13851
    HEAP32[$AsyncCtx15 + 8 >> 2] = $53; //@line 13853
    HEAP32[$AsyncCtx15 + 12 >> 2] = $6; //@line 13855
    HEAP32[$AsyncCtx15 + 16 >> 2] = $7; //@line 13857
    sp = STACKTOP; //@line 13858
    STACKTOP = sp; //@line 13859
    return 0; //@line 13859
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 13861
    $$0$i = $59; //@line 13862
    break;
   }
  }
 } while (0);
 $64 = HEAP32[$35 >> 2] | 0; //@line 13867
 do {
  if ($64 | 0) {
   $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 13872
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13873
   FUNCTION_TABLE_vi[$67 & 1023]($6); //@line 13874
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 421; //@line 13877
    HEAP32[$AsyncCtx8 + 4 >> 2] = $53; //@line 13879
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 13881
    HEAP32[$AsyncCtx8 + 12 >> 2] = $7; //@line 13883
    sp = STACKTOP; //@line 13884
    STACKTOP = sp; //@line 13885
    return 0; //@line 13885
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 13887
    break;
   }
  }
 } while (0);
 $71 = HEAP32[$53 >> 2] | 0; //@line 13892
 if (!$71) {
  STACKTOP = sp; //@line 13895
  return $$0$i | 0; //@line 13895
 }
 $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 13898
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13899
 FUNCTION_TABLE_vi[$74 & 1023]($7); //@line 13900
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 422; //@line 13903
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 13905
  sp = STACKTOP; //@line 13906
  STACKTOP = sp; //@line 13907
  return 0; //@line 13907
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 13909
 STACKTOP = sp; //@line 13910
 return $$0$i | 0; //@line 13910
}
function _mbedtls_cipher_cmac_update__async_cb_330($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15366
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15368
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15370
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15372
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15374
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15376
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15378
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15380
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15382
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15384
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15386
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 15389
  $66 = ___async_retval; //@line 15390
  HEAP32[$66 >> 2] = $$0; //@line 15391
  return;
 }
 $22 = $6 - (HEAP32[$14 >> 2] | 0) | 0; //@line 15395
 $23 = $18 + $22 | 0; //@line 15396
 $24 = $16 - $22 | 0; //@line 15397
 HEAP32[$14 >> 2] = 0; //@line 15398
 $27 = (($6 + -1 + $24 | 0) >>> 0) / ($6 >>> 0) | 0; //@line 15401
 if ($27 >>> 0 <= 1) {
  if (!$24) {
   $$0 = 0; //@line 15406
   $66 = ___async_retval; //@line 15407
   HEAP32[$66 >> 2] = $$0; //@line 15408
   return;
  }
  _memcpy((HEAP32[$14 >> 2] | 0) + ($10 + 16) | 0, $23 | 0, $24 | 0) | 0; //@line 15413
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + $24; //@line 15416
  $$0 = 0; //@line 15417
  $66 = ___async_retval; //@line 15418
  HEAP32[$66 >> 2] = $$0; //@line 15419
  return;
 }
 if (!$6) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 15424
  $30 = _mbedtls_cipher_update($2, $4, 0, $4, $8) | 0; //@line 15425
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 691; //@line 15428
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 15429
   HEAP32[$31 >> 2] = 1; //@line 15430
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 15431
   HEAP32[$32 >> 2] = $27; //@line 15432
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 15433
   HEAP32[$33 >> 2] = $12; //@line 15434
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 15435
   HEAP32[$34 >> 2] = $2; //@line 15436
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 15437
   HEAP32[$35 >> 2] = $4; //@line 15438
   $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 15439
   HEAP32[$36 >> 2] = $8; //@line 15440
   $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 15441
   HEAP32[$37 >> 2] = $24; //@line 15442
   $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 15443
   HEAP32[$38 >> 2] = $23; //@line 15444
   $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 15445
   HEAP32[$39 >> 2] = $14; //@line 15446
   $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 15447
   HEAP32[$40 >> 2] = $10; //@line 15448
   sp = STACKTOP; //@line 15449
   return;
  }
  HEAP32[___async_retval >> 2] = $30; //@line 15453
  ___async_unwind = 0; //@line 15454
  HEAP32[$ReallocAsyncCtx2 >> 2] = 691; //@line 15455
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 15456
  HEAP32[$31 >> 2] = 1; //@line 15457
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 15458
  HEAP32[$32 >> 2] = $27; //@line 15459
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 15460
  HEAP32[$33 >> 2] = $12; //@line 15461
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 15462
  HEAP32[$34 >> 2] = $2; //@line 15463
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 15464
  HEAP32[$35 >> 2] = $4; //@line 15465
  $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 15466
  HEAP32[$36 >> 2] = $8; //@line 15467
  $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 15468
  HEAP32[$37 >> 2] = $24; //@line 15469
  $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 15470
  HEAP32[$38 >> 2] = $23; //@line 15471
  $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 15472
  HEAP32[$39 >> 2] = $14; //@line 15473
  $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 15474
  HEAP32[$40 >> 2] = $10; //@line 15475
  sp = STACKTOP; //@line 15476
  return;
 }
 $$09$i75 = 0; //@line 15479
 do {
  $44 = $10 + $$09$i75 | 0; //@line 15483
  HEAP8[$44 >> 0] = HEAP8[$44 >> 0] ^ HEAP8[$23 + $$09$i75 >> 0]; //@line 15486
  $$09$i75 = $$09$i75 + 1 | 0; //@line 15487
 } while (($$09$i75 | 0) != ($6 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 15495
 $48 = _mbedtls_cipher_update($2, $4, $6, $4, $8) | 0; //@line 15496
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 692; //@line 15499
  $49 = $ReallocAsyncCtx + 4 | 0; //@line 15500
  HEAP32[$49 >> 2] = $24; //@line 15501
  $50 = $ReallocAsyncCtx + 8 | 0; //@line 15502
  HEAP32[$50 >> 2] = $6; //@line 15503
  $51 = $ReallocAsyncCtx + 12 | 0; //@line 15504
  HEAP32[$51 >> 2] = $23; //@line 15505
  $52 = $ReallocAsyncCtx + 16 | 0; //@line 15506
  HEAP32[$52 >> 2] = 1; //@line 15507
  $53 = $ReallocAsyncCtx + 20 | 0; //@line 15508
  HEAP32[$53 >> 2] = $27; //@line 15509
  $54 = $ReallocAsyncCtx + 24 | 0; //@line 15510
  HEAP32[$54 >> 2] = $12; //@line 15511
  $55 = $ReallocAsyncCtx + 28 | 0; //@line 15512
  HEAP32[$55 >> 2] = $14; //@line 15513
  $56 = $ReallocAsyncCtx + 32 | 0; //@line 15514
  HEAP32[$56 >> 2] = $10; //@line 15515
  $57 = $ReallocAsyncCtx + 36 | 0; //@line 15516
  HEAP32[$57 >> 2] = $2; //@line 15517
  $58 = $ReallocAsyncCtx + 40 | 0; //@line 15518
  HEAP32[$58 >> 2] = $4; //@line 15519
  $59 = $ReallocAsyncCtx + 44 | 0; //@line 15520
  HEAP32[$59 >> 2] = $8; //@line 15521
  sp = STACKTOP; //@line 15522
  return;
 }
 HEAP32[___async_retval >> 2] = $48; //@line 15526
 ___async_unwind = 0; //@line 15527
 HEAP32[$ReallocAsyncCtx >> 2] = 692; //@line 15528
 $49 = $ReallocAsyncCtx + 4 | 0; //@line 15529
 HEAP32[$49 >> 2] = $24; //@line 15530
 $50 = $ReallocAsyncCtx + 8 | 0; //@line 15531
 HEAP32[$50 >> 2] = $6; //@line 15532
 $51 = $ReallocAsyncCtx + 12 | 0; //@line 15533
 HEAP32[$51 >> 2] = $23; //@line 15534
 $52 = $ReallocAsyncCtx + 16 | 0; //@line 15535
 HEAP32[$52 >> 2] = 1; //@line 15536
 $53 = $ReallocAsyncCtx + 20 | 0; //@line 15537
 HEAP32[$53 >> 2] = $27; //@line 15538
 $54 = $ReallocAsyncCtx + 24 | 0; //@line 15539
 HEAP32[$54 >> 2] = $12; //@line 15540
 $55 = $ReallocAsyncCtx + 28 | 0; //@line 15541
 HEAP32[$55 >> 2] = $14; //@line 15542
 $56 = $ReallocAsyncCtx + 32 | 0; //@line 15543
 HEAP32[$56 >> 2] = $10; //@line 15544
 $57 = $ReallocAsyncCtx + 36 | 0; //@line 15545
 HEAP32[$57 >> 2] = $2; //@line 15546
 $58 = $ReallocAsyncCtx + 40 | 0; //@line 15547
 HEAP32[$58 >> 2] = $4; //@line 15548
 $59 = $ReallocAsyncCtx + 44 | 0; //@line 15549
 HEAP32[$59 >> 2] = $8; //@line 15550
 sp = STACKTOP; //@line 15551
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $13 = 0, $17 = 0, $21 = 0, $23 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $37 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2471
 HEAP32[$0 >> 2] = 560; //@line 2472
 $1 = $0 + 1240 | 0; //@line 2473
 HEAP32[$1 >> 2] = 10108; //@line 2474
 __ZN4mbed6Ticker6detachEv($1); //@line 2475
 $3 = HEAP32[$0 + 1292 >> 2] | 0; //@line 2477
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 2483
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2484
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 1280 | 0); //@line 2485
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 113; //@line 2488
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2490
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 2492
    sp = STACKTOP; //@line 2493
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2496
    break;
   }
  }
 } while (0);
 $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2501
 __ZN4mbed10TimerEventD2Ev($1); //@line 2502
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 114; //@line 2505
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 2507
  sp = STACKTOP; //@line 2508
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 2511
 $11 = $0 + 1176 | 0; //@line 2512
 HEAP32[$11 >> 2] = 10108; //@line 2513
 __ZN4mbed6Ticker6detachEv($11); //@line 2514
 $13 = HEAP32[$0 + 1228 >> 2] | 0; //@line 2516
 do {
  if ($13 | 0) {
   $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 2522
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2523
   FUNCTION_TABLE_vi[$17 & 1023]($0 + 1216 | 0); //@line 2524
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 115; //@line 2527
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2529
    HEAP32[$AsyncCtx3 + 8 >> 2] = $11; //@line 2531
    sp = STACKTOP; //@line 2532
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2535
    break;
   }
  }
 } while (0);
 $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2540
 __ZN4mbed10TimerEventD2Ev($11); //@line 2541
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 116; //@line 2544
  HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 2546
  sp = STACKTOP; //@line 2547
  return;
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 2550
 $21 = $0 + 1112 | 0; //@line 2551
 HEAP32[$21 >> 2] = 10108; //@line 2552
 __ZN4mbed6Ticker6detachEv($21); //@line 2553
 $23 = HEAP32[$0 + 1164 >> 2] | 0; //@line 2555
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 2561
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2562
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 1152 | 0); //@line 2563
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 117; //@line 2566
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 2568
    HEAP32[$AsyncCtx7 + 8 >> 2] = $21; //@line 2570
    sp = STACKTOP; //@line 2571
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2574
    break;
   }
  }
 } while (0);
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2579
 __ZN4mbed10TimerEventD2Ev($21); //@line 2580
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 118; //@line 2583
  HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 2585
  sp = STACKTOP; //@line 2586
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 2589
 $31 = $0 + 1048 | 0; //@line 2590
 HEAP32[$31 >> 2] = 10108; //@line 2591
 __ZN4mbed6Ticker6detachEv($31); //@line 2592
 $33 = HEAP32[$0 + 1100 >> 2] | 0; //@line 2594
 do {
  if ($33 | 0) {
   $37 = HEAP32[$33 + 8 >> 2] | 0; //@line 2600
   $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2601
   FUNCTION_TABLE_vi[$37 & 1023]($0 + 1088 | 0); //@line 2602
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 119; //@line 2605
    HEAP32[$AsyncCtx11 + 4 >> 2] = $31; //@line 2607
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 2609
    sp = STACKTOP; //@line 2610
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2613
    break;
   }
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2618
 __ZN4mbed10TimerEventD2Ev($31); //@line 2619
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 120; //@line 2622
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 2624
  sp = STACKTOP; //@line 2625
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 2628
 $AsyncCtx46 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2630
 __ZN4mbed11InterruptInD2Ev($0 + 412 | 0); //@line 2631
 if (___async) {
  HEAP32[$AsyncCtx46 >> 2] = 121; //@line 2634
  HEAP32[$AsyncCtx46 + 4 >> 2] = $0; //@line 2636
  sp = STACKTOP; //@line 2637
  return;
 }
 _emscripten_free_async_context($AsyncCtx46 | 0); //@line 2640
 $AsyncCtx42 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2642
 __ZN4mbed11InterruptInD2Ev($0 + 340 | 0); //@line 2643
 if (___async) {
  HEAP32[$AsyncCtx42 >> 2] = 122; //@line 2646
  HEAP32[$AsyncCtx42 + 4 >> 2] = $0; //@line 2648
  sp = STACKTOP; //@line 2649
  return;
 }
 _emscripten_free_async_context($AsyncCtx42 | 0); //@line 2652
 $AsyncCtx38 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2654
 __ZN4mbed11InterruptInD2Ev($0 + 268 | 0); //@line 2655
 if (___async) {
  HEAP32[$AsyncCtx38 >> 2] = 123; //@line 2658
  HEAP32[$AsyncCtx38 + 4 >> 2] = $0; //@line 2660
  sp = STACKTOP; //@line 2661
  return;
 }
 _emscripten_free_async_context($AsyncCtx38 | 0); //@line 2664
 $AsyncCtx34 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2666
 __ZN4mbed11InterruptInD2Ev($0 + 196 | 0); //@line 2667
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 124; //@line 2670
  HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 2672
  sp = STACKTOP; //@line 2673
  return;
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 2676
 $AsyncCtx30 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2678
 __ZN4mbed11InterruptInD2Ev($0 + 124 | 0); //@line 2679
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 125; //@line 2682
  HEAP32[$AsyncCtx30 + 4 >> 2] = $0; //@line 2684
  sp = STACKTOP; //@line 2685
  return;
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 2688
 $AsyncCtx26 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2690
 __ZN4mbed11InterruptInD2Ev($0 + 52 | 0); //@line 2691
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 126; //@line 2694
  sp = STACKTOP; //@line 2695
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx26 | 0); //@line 2698
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_430($0) {
 $0 = $0 | 0;
 var $$pre16 = 0, $12 = 0, $17 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25471
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25473
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25475
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25477
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25479
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25483
 $$pre16 = HEAP8[$6 >> 0] | 0; //@line 25486
 do {
  if (!($$pre16 & 2)) {
   $45 = $$pre16; //@line 25491
  } else {
   $17 = $$pre16 & -3; //@line 25493
   HEAP8[$6 >> 0] = $17; //@line 25494
   if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
    _printf(13258, $8) | 0; //@line 25499
    _printf(13285, $12) | 0; //@line 25500
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 25501
    _putchar(10) | 0; //@line 25502
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 25505
     $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 25506
     HEAP32[$21 >> 2] = $2; //@line 25507
     $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 25508
     HEAP32[$22 >> 2] = $4; //@line 25509
     $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 25510
     HEAP32[$23 >> 2] = $4; //@line 25511
     $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 25512
     HEAP32[$24 >> 2] = $6; //@line 25513
     sp = STACKTOP; //@line 25514
     return;
    }
    ___async_unwind = 0; //@line 25517
    HEAP32[$ReallocAsyncCtx6 >> 2] = 478; //@line 25518
    $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 25519
    HEAP32[$21 >> 2] = $2; //@line 25520
    $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 25521
    HEAP32[$22 >> 2] = $4; //@line 25522
    $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 25523
    HEAP32[$23 >> 2] = $4; //@line 25524
    $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 25525
    HEAP32[$24 >> 2] = $6; //@line 25526
    sp = STACKTOP; //@line 25527
    return;
   }
   if ($17 & 4) {
    $43 = $17 & -5; //@line 25533
    HEAP8[$6 >> 0] = $43; //@line 25534
    $45 = $43; //@line 25535
    break;
   }
   $28 = HEAP32[$2 + 1324 >> 2] | 0; //@line 25539
   $29 = $28 + 16 | 0; //@line 25540
   $31 = __ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0; //@line 25542
   $32 = $28 + 28 | 0; //@line 25543
   $33 = HEAP32[$32 >> 2] | 0; //@line 25544
   if (!$33) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 25547
    _mbed_assert_internal(15352, 15357, 1102); //@line 25548
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 25551
     $35 = $ReallocAsyncCtx15 + 4 | 0; //@line 25552
     HEAP32[$35 >> 2] = $32; //@line 25553
     $36 = $ReallocAsyncCtx15 + 8 | 0; //@line 25554
     HEAP32[$36 >> 2] = $29; //@line 25555
     $37 = $ReallocAsyncCtx15 + 12 | 0; //@line 25556
     HEAP32[$37 >> 2] = $31; //@line 25557
     $38 = $ReallocAsyncCtx15 + 16 | 0; //@line 25558
     HEAP32[$38 >> 2] = $6; //@line 25559
     $39 = $ReallocAsyncCtx15 + 20 | 0; //@line 25560
     HEAP32[$39 >> 2] = $2; //@line 25561
     sp = STACKTOP; //@line 25562
     return;
    }
    ___async_unwind = 0; //@line 25565
    HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 25566
    $35 = $ReallocAsyncCtx15 + 4 | 0; //@line 25567
    HEAP32[$35 >> 2] = $32; //@line 25568
    $36 = $ReallocAsyncCtx15 + 8 | 0; //@line 25569
    HEAP32[$36 >> 2] = $29; //@line 25570
    $37 = $ReallocAsyncCtx15 + 12 | 0; //@line 25571
    HEAP32[$37 >> 2] = $31; //@line 25572
    $38 = $ReallocAsyncCtx15 + 16 | 0; //@line 25573
    HEAP32[$38 >> 2] = $6; //@line 25574
    $39 = $ReallocAsyncCtx15 + 20 | 0; //@line 25575
    HEAP32[$39 >> 2] = $2; //@line 25576
    sp = STACKTOP; //@line 25577
    return;
   } else {
    $40 = HEAP32[$33 >> 2] | 0; //@line 25580
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 25581
    FUNCTION_TABLE_vii[$40 & 31]($29, $31); //@line 25582
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 25585
     $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 25586
     HEAP32[$41 >> 2] = $6; //@line 25587
     $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 25588
     HEAP32[$42 >> 2] = $2; //@line 25589
     sp = STACKTOP; //@line 25590
     return;
    }
    ___async_unwind = 0; //@line 25593
    HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 25594
    $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 25595
    HEAP32[$41 >> 2] = $6; //@line 25596
    $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 25597
    HEAP32[$42 >> 2] = $2; //@line 25598
    sp = STACKTOP; //@line 25599
    return;
   }
  }
 } while (0);
 if (!($45 & 16)) {
  return;
 }
 HEAP8[$6 >> 0] = $45 & -17; //@line 25610
 $49 = HEAP32[$2 + 1324 >> 2] | 0; //@line 25612
 $50 = $49 + 48 | 0; //@line 25613
 $52 = __ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0; //@line 25615
 $53 = $49 + 60 | 0; //@line 25616
 $54 = HEAP32[$53 >> 2] | 0; //@line 25617
 if (!$54) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 25620
  _mbed_assert_internal(15352, 15357, 1102); //@line 25621
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 25624
   $56 = $ReallocAsyncCtx14 + 4 | 0; //@line 25625
   HEAP32[$56 >> 2] = $53; //@line 25626
   $57 = $ReallocAsyncCtx14 + 8 | 0; //@line 25627
   HEAP32[$57 >> 2] = $50; //@line 25628
   $58 = $ReallocAsyncCtx14 + 12 | 0; //@line 25629
   HEAP32[$58 >> 2] = $52; //@line 25630
   sp = STACKTOP; //@line 25631
   return;
  }
  ___async_unwind = 0; //@line 25634
  HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 25635
  $56 = $ReallocAsyncCtx14 + 4 | 0; //@line 25636
  HEAP32[$56 >> 2] = $53; //@line 25637
  $57 = $ReallocAsyncCtx14 + 8 | 0; //@line 25638
  HEAP32[$57 >> 2] = $50; //@line 25639
  $58 = $ReallocAsyncCtx14 + 12 | 0; //@line 25640
  HEAP32[$58 >> 2] = $52; //@line 25641
  sp = STACKTOP; //@line 25642
  return;
 } else {
  $59 = HEAP32[$54 >> 2] | 0; //@line 25645
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 25646
  FUNCTION_TABLE_vii[$59 & 31]($50, $52); //@line 25647
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 25650
   sp = STACKTOP; //@line 25651
   return;
  }
  ___async_unwind = 0; //@line 25654
  HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 25655
  sp = STACKTOP; //@line 25656
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre = 0, $$pre12 = 0, $$pre13 = 0, $12 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $46 = 0, $47 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $63 = 0, $70 = 0, $71 = 0, $74 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10084
 if (!$1) {
  return;
 }
 $3 = $1 + 12 | 0; //@line 10089
 $4 = HEAP32[$3 >> 2] | 0; //@line 10090
 if ($4 | 0) {
  $6 = $0 + 1880 | 0; //@line 10093
  if (($6 | 0) != ($1 | 0)) {
   $8 = $0 + 1892 | 0; //@line 10096
   $9 = HEAP32[$8 >> 2] | 0; //@line 10097
   do {
    if (!$9) {
     $20 = $4; //@line 10101
     label = 8; //@line 10102
    } else {
     $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 10105
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 10106
     FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 10107
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 320; //@line 10110
      HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 10112
      HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 10114
      HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 10116
      HEAP32[$AsyncCtx + 16 >> 2] = $8; //@line 10118
      HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 10120
      sp = STACKTOP; //@line 10121
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 10124
      $$pre = HEAP32[$3 >> 2] | 0; //@line 10125
      if (!$$pre) {
       $26 = 0; //@line 10128
       break;
      } else {
       $20 = $$pre; //@line 10131
       label = 8; //@line 10132
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 8) {
     $21 = HEAP32[$20 + 4 >> 2] | 0; //@line 10141
     $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10142
     FUNCTION_TABLE_vii[$21 & 31]($6, $1); //@line 10143
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 321; //@line 10146
      HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 10148
      HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 10150
      HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 10152
      HEAP32[$AsyncCtx2 + 16 >> 2] = $8; //@line 10154
      sp = STACKTOP; //@line 10155
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10158
      $26 = HEAP32[$3 >> 2] | 0; //@line 10160
      break;
     }
    }
   } while (0);
   HEAP32[$8 >> 2] = $26; //@line 10165
  }
 }
 $27 = $1 + 16 | 0; //@line 10168
 $28 = $1 + 28 | 0; //@line 10169
 $29 = HEAP32[$28 >> 2] | 0; //@line 10170
 if ($29 | 0) {
  $31 = $0 + 1896 | 0; //@line 10173
  if (($31 | 0) != ($27 | 0)) {
   $33 = $0 + 1908 | 0; //@line 10176
   $34 = HEAP32[$33 >> 2] | 0; //@line 10177
   do {
    if (!$34) {
     $46 = $29; //@line 10181
     label = 18; //@line 10182
    } else {
     $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 10185
     $AsyncCtx5 = _emscripten_alloc_async_context(28, sp) | 0; //@line 10186
     FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 10187
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 322; //@line 10190
      HEAP32[$AsyncCtx5 + 4 >> 2] = $28; //@line 10192
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 10194
      HEAP32[$AsyncCtx5 + 12 >> 2] = $31; //@line 10196
      HEAP32[$AsyncCtx5 + 16 >> 2] = $27; //@line 10198
      HEAP32[$AsyncCtx5 + 20 >> 2] = $1; //@line 10200
      HEAP32[$AsyncCtx5 + 24 >> 2] = $0; //@line 10202
      sp = STACKTOP; //@line 10203
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10206
      $$pre12 = HEAP32[$28 >> 2] | 0; //@line 10207
      if (!$$pre12) {
       $52 = 0; //@line 10210
       break;
      } else {
       $46 = $$pre12; //@line 10213
       label = 18; //@line 10214
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 18) {
     $47 = HEAP32[$46 + 4 >> 2] | 0; //@line 10223
     $AsyncCtx8 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10224
     FUNCTION_TABLE_vii[$47 & 31]($31, $27); //@line 10225
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 323; //@line 10228
      HEAP32[$AsyncCtx8 + 4 >> 2] = $28; //@line 10230
      HEAP32[$AsyncCtx8 + 8 >> 2] = $33; //@line 10232
      HEAP32[$AsyncCtx8 + 12 >> 2] = $1; //@line 10234
      HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 10236
      sp = STACKTOP; //@line 10237
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 10240
      $52 = HEAP32[$28 >> 2] | 0; //@line 10242
      break;
     }
    }
   } while (0);
   HEAP32[$33 >> 2] = $52; //@line 10247
  }
 }
 $53 = $1 + 32 | 0; //@line 10250
 $54 = $1 + 44 | 0; //@line 10251
 $55 = HEAP32[$54 >> 2] | 0; //@line 10252
 if (!$55) {
  return;
 }
 $57 = $0 + 1912 | 0; //@line 10257
 if (($57 | 0) == ($53 | 0)) {
  return;
 }
 $59 = $0 + 1924 | 0; //@line 10262
 $60 = HEAP32[$59 >> 2] | 0; //@line 10263
 do {
  if (!$60) {
   $70 = $55; //@line 10267
   label = 28; //@line 10268
  } else {
   $63 = HEAP32[$60 + 8 >> 2] | 0; //@line 10271
   $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10272
   FUNCTION_TABLE_vi[$63 & 1023]($57); //@line 10273
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 324; //@line 10276
    HEAP32[$AsyncCtx11 + 4 >> 2] = $54; //@line 10278
    HEAP32[$AsyncCtx11 + 8 >> 2] = $59; //@line 10280
    HEAP32[$AsyncCtx11 + 12 >> 2] = $57; //@line 10282
    HEAP32[$AsyncCtx11 + 16 >> 2] = $53; //@line 10284
    sp = STACKTOP; //@line 10285
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 10288
    $$pre13 = HEAP32[$54 >> 2] | 0; //@line 10289
    if (!$$pre13) {
     $74 = 0; //@line 10292
     break;
    } else {
     $70 = $$pre13; //@line 10295
     label = 28; //@line 10296
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 28) {
   $71 = HEAP32[$70 + 4 >> 2] | 0; //@line 10305
   $AsyncCtx14 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10306
   FUNCTION_TABLE_vii[$71 & 31]($57, $53); //@line 10307
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 325; //@line 10310
    HEAP32[$AsyncCtx14 + 4 >> 2] = $54; //@line 10312
    HEAP32[$AsyncCtx14 + 8 >> 2] = $59; //@line 10314
    sp = STACKTOP; //@line 10315
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 10318
    $74 = HEAP32[$54 >> 2] | 0; //@line 10320
    break;
   }
  }
 } while (0);
 HEAP32[$59 >> 2] = $74; //@line 10325
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $36 = 0, $42 = 0, $45 = 0, $50 = 0, $51 = 0, $54 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 3159
 STACKTOP = STACKTOP + 64 | 0; //@line 3160
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 3160
 $vararg_buffer10 = sp + 40 | 0; //@line 3161
 $vararg_buffer8 = sp + 32 | 0; //@line 3162
 $vararg_buffer5 = sp + 24 | 0; //@line 3163
 $vararg_buffer3 = sp + 16 | 0; //@line 3164
 $vararg_buffer1 = sp + 8 | 0; //@line 3165
 $2 = sp + 48 | 0; //@line 3167
 _printf(10904, sp) | 0; //@line 3168
 HEAP32[$vararg_buffer1 >> 2] = $1; //@line 3169
 _printf(11535, $vararg_buffer1) | 0; //@line 3170
 $AsyncCtx29 = _emscripten_alloc_async_context(44, sp) | 0; //@line 3171
 _putchar(10) | 0; //@line 3172
 if (___async) {
  HEAP32[$AsyncCtx29 >> 2] = 139; //@line 3175
  HEAP32[$AsyncCtx29 + 4 >> 2] = $2; //@line 3177
  HEAP32[$AsyncCtx29 + 8 >> 2] = $0; //@line 3179
  HEAP32[$AsyncCtx29 + 12 >> 2] = $vararg_buffer3; //@line 3181
  HEAP32[$AsyncCtx29 + 16 >> 2] = $vararg_buffer3; //@line 3183
  HEAP32[$AsyncCtx29 + 20 >> 2] = $vararg_buffer5; //@line 3185
  HEAP32[$AsyncCtx29 + 24 >> 2] = $vararg_buffer5; //@line 3187
  HEAP32[$AsyncCtx29 + 28 >> 2] = $vararg_buffer8; //@line 3189
  HEAP32[$AsyncCtx29 + 32 >> 2] = $vararg_buffer8; //@line 3191
  HEAP32[$AsyncCtx29 + 36 >> 2] = $vararg_buffer10; //@line 3193
  HEAP32[$AsyncCtx29 + 40 >> 2] = $vararg_buffer10; //@line 3195
  sp = STACKTOP; //@line 3196
  STACKTOP = sp; //@line 3197
  return;
 }
 _emscripten_free_async_context($AsyncCtx29 | 0); //@line 3199
 HEAP8[$0 + 688 >> 0] = 2; //@line 3201
 _printf(10904, $vararg_buffer3) | 0; //@line 3202
 HEAP32[$vararg_buffer5 >> 2] = 3; //@line 3203
 _printf(10970, $vararg_buffer5) | 0; //@line 3204
 $AsyncCtx25 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3205
 _putchar(10) | 0; //@line 3206
 if (___async) {
  HEAP32[$AsyncCtx25 >> 2] = 140; //@line 3209
  HEAP32[$AsyncCtx25 + 4 >> 2] = $2; //@line 3211
  HEAP32[$AsyncCtx25 + 8 >> 2] = $0; //@line 3213
  HEAP32[$AsyncCtx25 + 12 >> 2] = $vararg_buffer8; //@line 3215
  HEAP32[$AsyncCtx25 + 16 >> 2] = $vararg_buffer8; //@line 3217
  HEAP32[$AsyncCtx25 + 20 >> 2] = $vararg_buffer10; //@line 3219
  HEAP32[$AsyncCtx25 + 24 >> 2] = $vararg_buffer10; //@line 3221
  sp = STACKTOP; //@line 3222
  STACKTOP = sp; //@line 3223
  return;
 }
 _emscripten_free_async_context($AsyncCtx25 | 0); //@line 3225
 $AsyncCtx32 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3226
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 3227
 if (___async) {
  HEAP32[$AsyncCtx32 >> 2] = 141; //@line 3230
  HEAP32[$AsyncCtx32 + 4 >> 2] = $2; //@line 3232
  HEAP32[$AsyncCtx32 + 8 >> 2] = $0; //@line 3234
  HEAP32[$AsyncCtx32 + 12 >> 2] = $vararg_buffer8; //@line 3236
  HEAP32[$AsyncCtx32 + 16 >> 2] = $vararg_buffer8; //@line 3238
  HEAP32[$AsyncCtx32 + 20 >> 2] = $vararg_buffer10; //@line 3240
  HEAP32[$AsyncCtx32 + 24 >> 2] = $vararg_buffer10; //@line 3242
  sp = STACKTOP; //@line 3243
  STACKTOP = sp; //@line 3244
  return;
 }
 _emscripten_free_async_context($AsyncCtx32 | 0); //@line 3246
 _printf(10904, $vararg_buffer8) | 0; //@line 3247
 HEAP32[$vararg_buffer10 >> 2] = 3; //@line 3248
 _printf(10999, $vararg_buffer10) | 0; //@line 3249
 $AsyncCtx21 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3250
 _putchar(10) | 0; //@line 3251
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 142; //@line 3254
  HEAP32[$AsyncCtx21 + 4 >> 2] = $0; //@line 3256
  HEAP32[$AsyncCtx21 + 8 >> 2] = $2; //@line 3258
  sp = STACKTOP; //@line 3259
  STACKTOP = sp; //@line 3260
  return;
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 3262
 $28 = $0 + 1240 | 0; //@line 3263
 $29 = $2 + 12 | 0; //@line 3264
 HEAP32[$2 >> 2] = 143; //@line 3265
 HEAP32[$2 + 4 >> 2] = 0; //@line 3267
 HEAP32[$2 + 8 >> 2] = $0; //@line 3269
 HEAP32[$29 >> 2] = 648; //@line 3270
 $30 = $0 + 1280 | 0; //@line 3271
 if (($30 | 0) != ($2 | 0)) {
  $32 = $0 + 1292 | 0; //@line 3274
  $33 = HEAP32[$32 >> 2] | 0; //@line 3275
  do {
   if ($33 | 0) {
    $36 = HEAP32[$33 + 8 >> 2] | 0; //@line 3280
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 3281
    FUNCTION_TABLE_vi[$36 & 1023]($30); //@line 3282
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 144; //@line 3285
     HEAP32[$AsyncCtx + 4 >> 2] = $29; //@line 3287
     HEAP32[$AsyncCtx + 8 >> 2] = $32; //@line 3289
     HEAP32[$AsyncCtx + 12 >> 2] = $30; //@line 3291
     HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 3293
     HEAP32[$AsyncCtx + 20 >> 2] = $28; //@line 3295
     sp = STACKTOP; //@line 3296
     STACKTOP = sp; //@line 3297
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 3299
     break;
    }
   }
  } while (0);
  $42 = HEAP32[$29 >> 2] | 0; //@line 3304
  do {
   if (!$42) {
    $50 = 0; //@line 3308
   } else {
    $45 = HEAP32[$42 + 4 >> 2] | 0; //@line 3311
    $AsyncCtx14 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3312
    FUNCTION_TABLE_vii[$45 & 31]($30, $2); //@line 3313
    if (___async) {
     HEAP32[$AsyncCtx14 >> 2] = 145; //@line 3316
     HEAP32[$AsyncCtx14 + 4 >> 2] = $29; //@line 3318
     HEAP32[$AsyncCtx14 + 8 >> 2] = $32; //@line 3320
     HEAP32[$AsyncCtx14 + 12 >> 2] = $28; //@line 3322
     HEAP32[$AsyncCtx14 + 16 >> 2] = $2; //@line 3324
     sp = STACKTOP; //@line 3325
     STACKTOP = sp; //@line 3326
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx14 | 0); //@line 3328
     $50 = HEAP32[$29 >> 2] | 0; //@line 3330
     break;
    }
   }
  } while (0);
  HEAP32[$32 >> 2] = $50; //@line 3335
 }
 __ZN4mbed6Ticker5setupEy($28, 1e5, 0); //@line 3337
 $51 = HEAP32[$29 >> 2] | 0; //@line 3338
 if (!$51) {
  STACKTOP = sp; //@line 3341
  return;
 }
 $54 = HEAP32[$51 + 8 >> 2] | 0; //@line 3344
 $AsyncCtx18 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3345
 FUNCTION_TABLE_vi[$54 & 1023]($2); //@line 3346
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 146; //@line 3349
  sp = STACKTOP; //@line 3350
  STACKTOP = sp; //@line 3351
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 3353
 STACKTOP = sp; //@line 3354
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $15 = 0, $16 = 0, $28 = 0, $33 = 0, $40 = 0, $44 = 0, $48 = 0, $51 = 0, $62 = 0, $66 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14467
 STACKTOP = STACKTOP + 32 | 0; //@line 14468
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 14468
 $$byval_copy = sp + 24 | 0; //@line 14469
 $vararg_buffer3 = sp + 16 | 0; //@line 14470
 $vararg_buffer1 = sp + 8 | 0; //@line 14471
 _printf(13258, sp) | 0; //@line 14473
 _printf(13504, $vararg_buffer1) | 0; //@line 14474
 $AsyncCtx9 = _emscripten_alloc_async_context(28, sp) | 0; //@line 14475
 _putchar(10) | 0; //@line 14476
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 446; //@line 14479
  HEAP32[$AsyncCtx9 + 4 >> 2] = $vararg_buffer1; //@line 14481
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer3; //@line 14483
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer3; //@line 14485
  HEAP32[$AsyncCtx9 + 16 >> 2] = $$byval_copy; //@line 14487
  HEAP32[$AsyncCtx9 + 20 >> 2] = $$byval_copy; //@line 14489
  HEAP32[$AsyncCtx9 + 24 >> 2] = $0; //@line 14491
  sp = STACKTOP; //@line 14492
  STACKTOP = sp; //@line 14493
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 14495
 $7 = $0 + 360 | 0; //@line 14496
 do {
  if ((HEAP32[$7 >> 2] | 0) == 2) {
   _printf(13258, $vararg_buffer3) | 0; //@line 14501
   _printf(13285, $$byval_copy) | 0; //@line 14502
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 14503
   _putchar(10) | 0; //@line 14504
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 447; //@line 14507
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14509
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 14511
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 14513
    HEAP32[$AsyncCtx + 16 >> 2] = $7; //@line 14515
    sp = STACKTOP; //@line 14516
    STACKTOP = sp; //@line 14517
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14519
   $15 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14521
   HEAP32[$vararg_buffer1 >> 2] = 366; //@line 14522
   HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 14524
   $AsyncCtx20 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14525
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 14526
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 14526
   $16 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($15, $0, $$byval_copy) | 0; //@line 14527
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 448; //@line 14530
    HEAP32[$AsyncCtx20 + 4 >> 2] = $vararg_buffer1; //@line 14532
    HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 14534
    HEAP32[$AsyncCtx20 + 12 >> 2] = $7; //@line 14536
    sp = STACKTOP; //@line 14537
    STACKTOP = sp; //@line 14538
    return;
   }
   _emscripten_free_async_context($AsyncCtx20 | 0); //@line 14540
   do {
    if (!$16) {
     $AsyncCtx28 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14544
     _mbed_assert_internal(13142, 13151, 217); //@line 14545
     if (___async) {
      HEAP32[$AsyncCtx28 >> 2] = 449; //@line 14548
      HEAP32[$AsyncCtx28 + 4 >> 2] = $vararg_buffer1; //@line 14550
      HEAP32[$AsyncCtx28 + 8 >> 2] = $0; //@line 14552
      HEAP32[$AsyncCtx28 + 12 >> 2] = $7; //@line 14554
      sp = STACKTOP; //@line 14555
      STACKTOP = sp; //@line 14556
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx28 | 0); //@line 14558
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 14564
   if (!(HEAP8[$0 + 373 >> 0] | 0)) {
    label = 24; //@line 14569
   } else {
    label = 23; //@line 14571
   }
  } else {
   $28 = HEAP32[$0 >> 2] | 0; //@line 14574
   $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14575
   __ZN7LoRaPHY18put_radio_to_sleepEv($28); //@line 14576
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 450; //@line 14579
    HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 14581
    HEAP32[$AsyncCtx17 + 8 >> 2] = $7; //@line 14583
    sp = STACKTOP; //@line 14584
    STACKTOP = sp; //@line 14585
    return;
   }
   _emscripten_free_async_context($AsyncCtx17 | 0); //@line 14587
   $33 = (HEAP8[$0 + 373 >> 0] | 0) != 0; //@line 14593
   if (HEAP32[$0 + 364 >> 2] | 0) {
    if ($33) {
     label = 23; //@line 14596
     break;
    } else {
     label = 24; //@line 14599
     break;
    }
   }
   if ($33) {
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 3; //@line 14607
   }
   HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 3; //@line 14612
   $40 = $0 + 356 | 0; //@line 14613
   $44 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$40 >> 2] | 0, HEAP32[$0 + 980 >> 2] | 0) | 0; //@line 14617
   if ($44 >>> 0 >= (HEAP32[$0 + 976 >> 2] | 0) >>> 0) {
    $48 = HEAP32[$40 >> 2] | 0; //@line 14622
    $AsyncCtx24 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14624
    __ZN18LoRaWANTimeHandler4stopER13timer_event_t($48, $0 + 1056 | 0); //@line 14625
    if (___async) {
     HEAP32[$AsyncCtx24 >> 2] = 451; //@line 14628
     HEAP32[$AsyncCtx24 + 4 >> 2] = $0; //@line 14630
     sp = STACKTOP; //@line 14631
     STACKTOP = sp; //@line 14632
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx24 | 0); //@line 14634
     $51 = $0 + 944 | 0; //@line 14635
     HEAP8[$51 >> 0] = HEAP8[$51 >> 0] | 32; //@line 14638
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 23) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 14648
  label = 24; //@line 14649
 }
 if ((label | 0) == 24) {
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 14655
  if ((HEAP32[$7 >> 2] | 0) != 2) {
   $62 = $0 + 944 | 0; //@line 14659
   HEAP8[$62 >> 0] = HEAP8[$62 >> 0] | 32; //@line 14662
  }
 }
 $66 = HEAP32[$0 + 356 >> 2] | 0; //@line 14666
 $AsyncCtx13 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14668
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($66, $0 + 996 | 0, 1); //@line 14669
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 452; //@line 14672
  sp = STACKTOP; //@line 14673
  STACKTOP = sp; //@line 14674
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx13 | 0); //@line 14676
  STACKTOP = sp; //@line 14677
  return;
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_52($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $49 = 0, $57 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29548
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29550
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29552
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29554
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29556
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29558
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29560
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29562
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29564
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 29569
  _mbed_assert_internal(13142, 13151, 217); //@line 29570
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 368; //@line 29573
   $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 29574
   HEAP32[$19 >> 2] = $2; //@line 29575
   $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 29576
   HEAP32[$20 >> 2] = $4; //@line 29577
   $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 29578
   HEAP32[$21 >> 2] = $6; //@line 29579
   $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 29580
   HEAP32[$22 >> 2] = $8; //@line 29581
   $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 29582
   HEAP32[$23 >> 2] = $10; //@line 29583
   $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 29584
   HEAP32[$24 >> 2] = $12; //@line 29585
   $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 29586
   HEAP32[$25 >> 2] = $14; //@line 29587
   $26 = $ReallocAsyncCtx10 + 32 | 0; //@line 29588
   HEAP32[$26 >> 2] = $16; //@line 29589
   sp = STACKTOP; //@line 29590
   return;
  }
  ___async_unwind = 0; //@line 29593
  HEAP32[$ReallocAsyncCtx10 >> 2] = 368; //@line 29594
  $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 29595
  HEAP32[$19 >> 2] = $2; //@line 29596
  $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 29597
  HEAP32[$20 >> 2] = $4; //@line 29598
  $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 29599
  HEAP32[$21 >> 2] = $6; //@line 29600
  $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 29601
  HEAP32[$22 >> 2] = $8; //@line 29602
  $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 29603
  HEAP32[$23 >> 2] = $10; //@line 29604
  $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 29605
  HEAP32[$24 >> 2] = $12; //@line 29606
  $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 29607
  HEAP32[$25 >> 2] = $14; //@line 29608
  $26 = $ReallocAsyncCtx10 + 32 | 0; //@line 29609
  HEAP32[$26 >> 2] = $16; //@line 29610
  sp = STACKTOP; //@line 29611
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 29615
 if (HEAP8[$4 + 371 >> 0] | 0) {
  $31 = HEAP32[$2 >> 2] | 0; //@line 29620
  $34 = HEAP32[$4 + 972 >> 2] | 0; //@line 29623
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 29624
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($31, $4 + 1036 | 0, $34); //@line 29625
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 369; //@line 29628
   $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 29629
   HEAP32[$35 >> 2] = $10; //@line 29630
   $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 29631
   HEAP32[$36 >> 2] = $4; //@line 29632
   $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 29633
   HEAP32[$37 >> 2] = $2; //@line 29634
   $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 29635
   HEAP32[$38 >> 2] = $12; //@line 29636
   $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 29637
   HEAP32[$39 >> 2] = $8; //@line 29638
   $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 29639
   HEAP32[$40 >> 2] = $14; //@line 29640
   $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 29641
   HEAP32[$41 >> 2] = $6; //@line 29642
   sp = STACKTOP; //@line 29643
   return;
  }
  ___async_unwind = 0; //@line 29646
  HEAP32[$ReallocAsyncCtx7 >> 2] = 369; //@line 29647
  $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 29648
  HEAP32[$35 >> 2] = $10; //@line 29649
  $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 29650
  HEAP32[$36 >> 2] = $4; //@line 29651
  $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 29652
  HEAP32[$37 >> 2] = $2; //@line 29653
  $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 29654
  HEAP32[$38 >> 2] = $12; //@line 29655
  $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 29656
  HEAP32[$39 >> 2] = $8; //@line 29657
  $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 29658
  HEAP32[$40 >> 2] = $14; //@line 29659
  $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 29660
  HEAP32[$41 >> 2] = $6; //@line 29661
  sp = STACKTOP; //@line 29662
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 29668
 $45 = $4 + 944 | 0; //@line 29669
 $46 = HEAP8[$45 >> 0] | 0; //@line 29670
 if (!($46 << 24 >> 24)) {
  HEAP8[$45 >> 0] = 1; //@line 29673
  $49 = 1; //@line 29674
 } else {
  $49 = $46; //@line 29676
 }
 HEAP8[$45 >> 0] = $49 | 32; //@line 29679
 HEAP8[$4 + 376 >> 0] = ($12 | 0) == 0 & (HEAP8[$4 + 944 >> 0] & 8) != 0 & 1; //@line 29688
 $57 = HEAP8[$4 + 378 >> 0] | 0; //@line 29690
 HEAP8[$4 + 379 >> 0] = $57; //@line 29692
 HEAP8[$8 >> 0] = $57; //@line 29693
 HEAP8[$14 + 1 >> 0] = HEAP8[$4 + 372 >> 0] | 0; //@line 29697
 HEAP32[$14 + 4 >> 2] = $6; //@line 29699
 $63 = HEAP32[$4 >> 2] | 0; //@line 29700
 $66 = HEAP32[(HEAP32[$63 >> 2] | 0) + 12 >> 2] | 0; //@line 29703
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 29704
 FUNCTION_TABLE_vii[$66 & 31]($63, $14); //@line 29705
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 372; //@line 29708
  $67 = $ReallocAsyncCtx + 4 | 0; //@line 29709
  HEAP32[$67 >> 2] = $4; //@line 29710
  $68 = $ReallocAsyncCtx + 8 | 0; //@line 29711
  HEAP32[$68 >> 2] = $6; //@line 29712
  $69 = $ReallocAsyncCtx + 12 | 0; //@line 29713
  HEAP32[$69 >> 2] = $2; //@line 29714
  $70 = $ReallocAsyncCtx + 16 | 0; //@line 29715
  HEAP32[$70 >> 2] = $8; //@line 29716
  sp = STACKTOP; //@line 29717
  return;
 }
 ___async_unwind = 0; //@line 29720
 HEAP32[$ReallocAsyncCtx >> 2] = 372; //@line 29721
 $67 = $ReallocAsyncCtx + 4 | 0; //@line 29722
 HEAP32[$67 >> 2] = $4; //@line 29723
 $68 = $ReallocAsyncCtx + 8 | 0; //@line 29724
 HEAP32[$68 >> 2] = $6; //@line 29725
 $69 = $ReallocAsyncCtx + 12 | 0; //@line 29726
 HEAP32[$69 >> 2] = $2; //@line 29727
 $70 = $ReallocAsyncCtx + 16 | 0; //@line 29728
 HEAP32[$70 >> 2] = $8; //@line 29729
 sp = STACKTOP; //@line 29730
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_190($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 4406
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4408
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4410
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4414
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4416
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4418
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4420
 $15 = $8 + 12 | 0; //@line 4421
 HEAP32[$8 >> 2] = 7; //@line 4422
 HEAP32[$8 + 4 >> 2] = 0; //@line 4424
 HEAP32[$8 + 8 >> 2] = $2; //@line 4426
 HEAP32[$15 >> 2] = 860; //@line 4427
 $16 = $2 + 1244 | 0; //@line 4428
 if (($16 | 0) == ($8 | 0)) {
  $43 = HEAP32[217] | 0; //@line 4432
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 4433
  FUNCTION_TABLE_vi[$43 & 1023]($8); //@line 4434
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 577; //@line 4437
   $44 = $ReallocAsyncCtx6 + 4 | 0; //@line 4438
   HEAP32[$44 >> 2] = $2; //@line 4439
   $45 = $ReallocAsyncCtx6 + 8 | 0; //@line 4440
   HEAP32[$45 >> 2] = $4; //@line 4441
   $46 = $ReallocAsyncCtx6 + 12 | 0; //@line 4442
   HEAP32[$46 >> 2] = $10; //@line 4443
   $47 = $ReallocAsyncCtx6 + 16 | 0; //@line 4444
   HEAP32[$47 >> 2] = $8; //@line 4445
   $48 = $ReallocAsyncCtx6 + 20 | 0; //@line 4446
   HEAP32[$48 >> 2] = $12; //@line 4447
   $49 = $ReallocAsyncCtx6 + 24 | 0; //@line 4448
   HEAP32[$49 >> 2] = $14; //@line 4449
   sp = STACKTOP; //@line 4450
   return;
  }
  ___async_unwind = 0; //@line 4453
  HEAP32[$ReallocAsyncCtx6 >> 2] = 577; //@line 4454
  $44 = $ReallocAsyncCtx6 + 4 | 0; //@line 4455
  HEAP32[$44 >> 2] = $2; //@line 4456
  $45 = $ReallocAsyncCtx6 + 8 | 0; //@line 4457
  HEAP32[$45 >> 2] = $4; //@line 4458
  $46 = $ReallocAsyncCtx6 + 12 | 0; //@line 4459
  HEAP32[$46 >> 2] = $10; //@line 4460
  $47 = $ReallocAsyncCtx6 + 16 | 0; //@line 4461
  HEAP32[$47 >> 2] = $8; //@line 4462
  $48 = $ReallocAsyncCtx6 + 20 | 0; //@line 4463
  HEAP32[$48 >> 2] = $12; //@line 4464
  $49 = $ReallocAsyncCtx6 + 24 | 0; //@line 4465
  HEAP32[$49 >> 2] = $14; //@line 4466
  sp = STACKTOP; //@line 4467
  return;
 }
 $18 = $2 + 1256 | 0; //@line 4470
 $19 = HEAP32[$18 >> 2] | 0; //@line 4471
 if (!$19) {
  $33 = HEAP32[216] | 0; //@line 4475
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 4476
  FUNCTION_TABLE_vii[$33 & 31]($16, $8); //@line 4477
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 576; //@line 4480
   $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 4481
   HEAP32[$34 >> 2] = $2; //@line 4482
   $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 4483
   HEAP32[$35 >> 2] = $4; //@line 4484
   $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 4485
   HEAP32[$36 >> 2] = $10; //@line 4486
   $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 4487
   HEAP32[$37 >> 2] = $15; //@line 4488
   $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 4489
   HEAP32[$38 >> 2] = $18; //@line 4490
   $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 4491
   HEAP32[$39 >> 2] = $8; //@line 4492
   $40 = $ReallocAsyncCtx5 + 28 | 0; //@line 4493
   HEAP32[$40 >> 2] = $12; //@line 4494
   $41 = $ReallocAsyncCtx5 + 32 | 0; //@line 4495
   HEAP32[$41 >> 2] = $14; //@line 4496
   sp = STACKTOP; //@line 4497
   return;
  }
  ___async_unwind = 0; //@line 4500
  HEAP32[$ReallocAsyncCtx5 >> 2] = 576; //@line 4501
  $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 4502
  HEAP32[$34 >> 2] = $2; //@line 4503
  $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 4504
  HEAP32[$35 >> 2] = $4; //@line 4505
  $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 4506
  HEAP32[$36 >> 2] = $10; //@line 4507
  $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 4508
  HEAP32[$37 >> 2] = $15; //@line 4509
  $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 4510
  HEAP32[$38 >> 2] = $18; //@line 4511
  $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 4512
  HEAP32[$39 >> 2] = $8; //@line 4513
  $40 = $ReallocAsyncCtx5 + 28 | 0; //@line 4514
  HEAP32[$40 >> 2] = $12; //@line 4515
  $41 = $ReallocAsyncCtx5 + 32 | 0; //@line 4516
  HEAP32[$41 >> 2] = $14; //@line 4517
  sp = STACKTOP; //@line 4518
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 4522
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 4523
  FUNCTION_TABLE_vi[$22 & 1023]($16); //@line 4524
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 575; //@line 4527
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 4528
   HEAP32[$23 >> 2] = $2; //@line 4529
   $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 4530
   HEAP32[$24 >> 2] = $4; //@line 4531
   $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 4532
   HEAP32[$25 >> 2] = $10; //@line 4533
   $26 = $ReallocAsyncCtx4 + 16 | 0; //@line 4534
   HEAP32[$26 >> 2] = $15; //@line 4535
   $27 = $ReallocAsyncCtx4 + 20 | 0; //@line 4536
   HEAP32[$27 >> 2] = $18; //@line 4537
   $28 = $ReallocAsyncCtx4 + 24 | 0; //@line 4538
   HEAP32[$28 >> 2] = $8; //@line 4539
   $29 = $ReallocAsyncCtx4 + 28 | 0; //@line 4540
   HEAP32[$29 >> 2] = $12; //@line 4541
   $30 = $ReallocAsyncCtx4 + 32 | 0; //@line 4542
   HEAP32[$30 >> 2] = $16; //@line 4543
   $31 = $ReallocAsyncCtx4 + 36 | 0; //@line 4544
   HEAP32[$31 >> 2] = $14; //@line 4545
   sp = STACKTOP; //@line 4546
   return;
  }
  ___async_unwind = 0; //@line 4549
  HEAP32[$ReallocAsyncCtx4 >> 2] = 575; //@line 4550
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 4551
  HEAP32[$23 >> 2] = $2; //@line 4552
  $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 4553
  HEAP32[$24 >> 2] = $4; //@line 4554
  $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 4555
  HEAP32[$25 >> 2] = $10; //@line 4556
  $26 = $ReallocAsyncCtx4 + 16 | 0; //@line 4557
  HEAP32[$26 >> 2] = $15; //@line 4558
  $27 = $ReallocAsyncCtx4 + 20 | 0; //@line 4559
  HEAP32[$27 >> 2] = $18; //@line 4560
  $28 = $ReallocAsyncCtx4 + 24 | 0; //@line 4561
  HEAP32[$28 >> 2] = $8; //@line 4562
  $29 = $ReallocAsyncCtx4 + 28 | 0; //@line 4563
  HEAP32[$29 >> 2] = $12; //@line 4564
  $30 = $ReallocAsyncCtx4 + 32 | 0; //@line 4565
  HEAP32[$30 >> 2] = $16; //@line 4566
  $31 = $ReallocAsyncCtx4 + 36 | 0; //@line 4567
  HEAP32[$31 >> 2] = $14; //@line 4568
  sp = STACKTOP; //@line 4569
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_148($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $24 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 984
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 988
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 990
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 992
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 994
 $12 = HEAP16[$0 + 22 >> 1] | 0; //@line 996
 $14 = HEAP8[$0 + 24 >> 0] | 0; //@line 998
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 1000
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 1002
 $19 = $4 + 12 | 0; //@line 1004
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 1005
 $20 = $4 + 16 | 0; //@line 1006
 HEAP32[$20 >> 2] = $8; //@line 1007
 HEAP16[$4 + 20 >> 1] = $10; //@line 1009
 HEAP16[$4 + 22 >> 1] = $12; //@line 1011
 HEAP8[$4 + 24 >> 0] = $14; //@line 1013
 $24 = _equeue_alloc($16, 28) | 0; //@line 1014
 if ($24 | 0) {
  $26 = HEAP32[$19 >> 2] | 0; //@line 1017
  if (!$26) {
   HEAP32[$24 + 12 >> 2] = 0; //@line 1021
   $39 = $24 + 16 | 0; //@line 1022
   HEAP32[$39 >> 2] = HEAP32[$20 >> 2]; //@line 1023
   HEAP32[$39 + 4 >> 2] = HEAP32[$20 + 4 >> 2]; //@line 1023
   HEAP8[$39 + 8 >> 0] = HEAP8[$20 + 8 >> 0] | 0; //@line 1023
   _equeue_event_dtor($24, 418); //@line 1024
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 1025
   $40 = _equeue_post($16, 419, $24) | 0; //@line 1026
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 420; //@line 1029
    $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 1030
    HEAP32[$41 >> 2] = $19; //@line 1031
    $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 1032
    HEAP32[$42 >> 2] = $6; //@line 1033
    $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 1034
    HEAP32[$43 >> 2] = $4; //@line 1035
    $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 1036
    HEAP32[$44 >> 2] = $18; //@line 1037
    sp = STACKTOP; //@line 1038
    return;
   }
   HEAP32[___async_retval >> 2] = $40; //@line 1042
   ___async_unwind = 0; //@line 1043
   HEAP32[$ReallocAsyncCtx6 >> 2] = 420; //@line 1044
   $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 1045
   HEAP32[$41 >> 2] = $19; //@line 1046
   $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 1047
   HEAP32[$42 >> 2] = $6; //@line 1048
   $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 1049
   HEAP32[$43 >> 2] = $4; //@line 1050
   $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 1051
   HEAP32[$44 >> 2] = $18; //@line 1052
   sp = STACKTOP; //@line 1053
   return;
  } else {
   $29 = HEAP32[$26 + 4 >> 2] | 0; //@line 1057
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 1058
   FUNCTION_TABLE_vii[$29 & 31]($24, $4); //@line 1059
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 417; //@line 1062
    $30 = $ReallocAsyncCtx3 + 4 | 0; //@line 1063
    HEAP32[$30 >> 2] = $19; //@line 1064
    $31 = $ReallocAsyncCtx3 + 8 | 0; //@line 1065
    HEAP32[$31 >> 2] = $24; //@line 1066
    $32 = $ReallocAsyncCtx3 + 12 | 0; //@line 1067
    HEAP32[$32 >> 2] = $20; //@line 1068
    $33 = $ReallocAsyncCtx3 + 16 | 0; //@line 1069
    HEAP32[$33 >> 2] = $16; //@line 1070
    $34 = $ReallocAsyncCtx3 + 20 | 0; //@line 1071
    HEAP32[$34 >> 2] = $19; //@line 1072
    $35 = $ReallocAsyncCtx3 + 24 | 0; //@line 1073
    HEAP32[$35 >> 2] = $6; //@line 1074
    $36 = $ReallocAsyncCtx3 + 28 | 0; //@line 1075
    HEAP32[$36 >> 2] = $4; //@line 1076
    $37 = $ReallocAsyncCtx3 + 32 | 0; //@line 1077
    HEAP32[$37 >> 2] = $18; //@line 1078
    sp = STACKTOP; //@line 1079
    return;
   }
   ___async_unwind = 0; //@line 1082
   HEAP32[$ReallocAsyncCtx3 >> 2] = 417; //@line 1083
   $30 = $ReallocAsyncCtx3 + 4 | 0; //@line 1084
   HEAP32[$30 >> 2] = $19; //@line 1085
   $31 = $ReallocAsyncCtx3 + 8 | 0; //@line 1086
   HEAP32[$31 >> 2] = $24; //@line 1087
   $32 = $ReallocAsyncCtx3 + 12 | 0; //@line 1088
   HEAP32[$32 >> 2] = $20; //@line 1089
   $33 = $ReallocAsyncCtx3 + 16 | 0; //@line 1090
   HEAP32[$33 >> 2] = $16; //@line 1091
   $34 = $ReallocAsyncCtx3 + 20 | 0; //@line 1092
   HEAP32[$34 >> 2] = $19; //@line 1093
   $35 = $ReallocAsyncCtx3 + 24 | 0; //@line 1094
   HEAP32[$35 >> 2] = $6; //@line 1095
   $36 = $ReallocAsyncCtx3 + 28 | 0; //@line 1096
   HEAP32[$36 >> 2] = $4; //@line 1097
   $37 = $ReallocAsyncCtx3 + 32 | 0; //@line 1098
   HEAP32[$37 >> 2] = $18; //@line 1099
   sp = STACKTOP; //@line 1100
   return;
  }
 }
 $46 = HEAP32[$19 >> 2] | 0; //@line 1104
 if ($46 | 0) {
  $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 1108
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 1109
  FUNCTION_TABLE_vi[$49 & 1023]($4); //@line 1110
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 421; //@line 1113
   $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 1114
   HEAP32[$50 >> 2] = $6; //@line 1115
   $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 1116
   HEAP32[$51 >> 2] = 0; //@line 1117
   $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 1118
   HEAP32[$52 >> 2] = $18; //@line 1119
   sp = STACKTOP; //@line 1120
   return;
  }
  ___async_unwind = 0; //@line 1123
  HEAP32[$ReallocAsyncCtx4 >> 2] = 421; //@line 1124
  $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 1125
  HEAP32[$50 >> 2] = $6; //@line 1126
  $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 1127
  HEAP32[$51 >> 2] = 0; //@line 1128
  $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 1129
  HEAP32[$52 >> 2] = $18; //@line 1130
  sp = STACKTOP; //@line 1131
  return;
 }
 $53 = HEAP32[$6 >> 2] | 0; //@line 1134
 if (!$53) {
  HEAP32[___async_retval >> 2] = 0; //@line 1138
  return;
 }
 $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 1142
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 1143
 FUNCTION_TABLE_vi[$56 & 1023]($18); //@line 1144
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 422; //@line 1147
  $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 1148
  HEAP32[$57 >> 2] = 0; //@line 1149
  sp = STACKTOP; //@line 1150
  return;
 }
 ___async_unwind = 0; //@line 1153
 HEAP32[$ReallocAsyncCtx5 >> 2] = 422; //@line 1154
 $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 1155
 HEAP32[$57 >> 2] = 0; //@line 1156
 sp = STACKTOP; //@line 1157
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $35 = 0, $4 = 0, $40 = 0, $43 = 0, $48 = 0, $54 = 0, $55 = 0, $58 = 0, $61 = 0, $64 = 0, $67 = 0, $69 = 0, $72 = 0, $75 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx4 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 2884
 STACKTOP = STACKTOP + 32 | 0; //@line 2885
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 2885
 $1 = sp + 16 | 0; //@line 2888
 _printf(10904, sp) | 0; //@line 2889
 _printf(11385, sp + 8 | 0) | 0; //@line 2890
 $AsyncCtx18 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2891
 _putchar(10) | 0; //@line 2892
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 132; //@line 2895
  HEAP32[$AsyncCtx18 + 4 >> 2] = $0; //@line 2897
  HEAP32[$AsyncCtx18 + 8 >> 2] = $1; //@line 2899
  sp = STACKTOP; //@line 2900
  STACKTOP = sp; //@line 2901
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 2903
 $4 = $0 + 688 | 0; //@line 2904
 switch (HEAP8[$4 >> 0] | 0) {
 case 1:
  {
   do {
    if (!(HEAP8[$0 + 689 >> 0] | 0)) {
     HEAP8[$0 + 732 >> 0] = 0; //@line 2914
     HEAP8[$0 + 733 >> 0] = 0; //@line 2916
     HEAP16[$0 + 744 >> 1] = 0; //@line 2918
     HEAP16[$0 + 742 >> 1] = 0; //@line 2920
     if (!(HEAP8[$0 + 722 >> 0] | 0)) {
      HEAP8[$4 >> 0] = 0; //@line 2925
      $16 = $0 + 1176 | 0; //@line 2926
      $17 = $1 + 12 | 0; //@line 2927
      HEAP32[$1 >> 2] = 74; //@line 2928
      HEAP32[$1 + 4 >> 2] = 0; //@line 2930
      HEAP32[$1 + 8 >> 2] = $0; //@line 2932
      HEAP32[$17 >> 2] = 648; //@line 2933
      $20 = ___muldi3(HEAP32[$0 + 728 >> 2] | 0, 0, 1e3, 0) | 0; //@line 2936
      $21 = tempRet0; //@line 2937
      $22 = $0 + 1216 | 0; //@line 2938
      if (($22 | 0) != ($1 | 0)) {
       $24 = $0 + 1228 | 0; //@line 2941
       $25 = HEAP32[$24 >> 2] | 0; //@line 2942
       do {
        if ($25 | 0) {
         $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 2947
         $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 2948
         FUNCTION_TABLE_vi[$28 & 1023]($22); //@line 2949
         if (___async) {
          HEAP32[$AsyncCtx >> 2] = 133; //@line 2952
          HEAP32[$AsyncCtx + 4 >> 2] = $17; //@line 2954
          HEAP32[$AsyncCtx + 8 >> 2] = $24; //@line 2956
          HEAP32[$AsyncCtx + 12 >> 2] = $22; //@line 2958
          HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 2960
          HEAP32[$AsyncCtx + 20 >> 2] = $16; //@line 2962
          $35 = $AsyncCtx + 24 | 0; //@line 2964
          HEAP32[$35 >> 2] = $20; //@line 2966
          HEAP32[$35 + 4 >> 2] = $21; //@line 2969
          HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 2971
          sp = STACKTOP; //@line 2972
          STACKTOP = sp; //@line 2973
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx | 0); //@line 2975
          break;
         }
        }
       } while (0);
       $40 = HEAP32[$17 >> 2] | 0; //@line 2980
       do {
        if (!$40) {
         $54 = 0; //@line 2984
        } else {
         $43 = HEAP32[$40 + 4 >> 2] | 0; //@line 2987
         $AsyncCtx4 = _emscripten_alloc_async_context(32, sp) | 0; //@line 2988
         FUNCTION_TABLE_vii[$43 & 31]($22, $1); //@line 2989
         if (___async) {
          HEAP32[$AsyncCtx4 >> 2] = 134; //@line 2992
          HEAP32[$AsyncCtx4 + 4 >> 2] = $17; //@line 2994
          HEAP32[$AsyncCtx4 + 8 >> 2] = $24; //@line 2996
          HEAP32[$AsyncCtx4 + 12 >> 2] = $16; //@line 2998
          $48 = $AsyncCtx4 + 16 | 0; //@line 3000
          HEAP32[$48 >> 2] = $20; //@line 3002
          HEAP32[$48 + 4 >> 2] = $21; //@line 3005
          HEAP32[$AsyncCtx4 + 24 >> 2] = $0; //@line 3007
          HEAP32[$AsyncCtx4 + 28 >> 2] = $1; //@line 3009
          sp = STACKTOP; //@line 3010
          STACKTOP = sp; //@line 3011
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx4 | 0); //@line 3013
          $54 = HEAP32[$17 >> 2] | 0; //@line 3015
          break;
         }
        }
       } while (0);
       HEAP32[$24 >> 2] = $54; //@line 3020
      }
      __ZN4mbed6Ticker5setupEy($16, $20, $21); //@line 3022
      $55 = HEAP32[$17 >> 2] | 0; //@line 3023
      if ($55 | 0) {
       $58 = HEAP32[$55 + 8 >> 2] | 0; //@line 3027
       $AsyncCtx8 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3028
       FUNCTION_TABLE_vi[$58 & 1023]($1); //@line 3029
       if (___async) {
        HEAP32[$AsyncCtx8 >> 2] = 135; //@line 3032
        HEAP32[$AsyncCtx8 + 4 >> 2] = $0; //@line 3034
        sp = STACKTOP; //@line 3035
        STACKTOP = sp; //@line 3036
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx8 | 0); //@line 3038
        break;
       }
      }
     }
    }
   } while (0);
   $61 = HEAP32[$0 + 788 >> 2] | 0; //@line 3046
   if (!$61) {
    STACKTOP = sp; //@line 3049
    return;
   }
   $64 = HEAP32[$61 + 60 >> 2] | 0; //@line 3052
   if (!$64) {
    STACKTOP = sp; //@line 3055
    return;
   }
   $67 = HEAP32[$64 >> 2] | 0; //@line 3058
   $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3059
   FUNCTION_TABLE_vi[$67 & 1023]($61 + 48 | 0); //@line 3060
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 136; //@line 3063
    sp = STACKTOP; //@line 3064
    STACKTOP = sp; //@line 3065
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3067
   STACKTOP = sp; //@line 3068
   return;
  }
 case 2:
  {
   HEAP8[$4 >> 0] = 0; //@line 3072
   $69 = HEAP32[$0 + 788 >> 2] | 0; //@line 3074
   if (!$69) {
    STACKTOP = sp; //@line 3077
    return;
   }
   $72 = HEAP32[$69 + 28 >> 2] | 0; //@line 3080
   if (!$72) {
    STACKTOP = sp; //@line 3083
    return;
   }
   $75 = HEAP32[$72 >> 2] | 0; //@line 3086
   $AsyncCtx14 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3087
   FUNCTION_TABLE_vi[$75 & 1023]($69 + 16 | 0); //@line 3088
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 137; //@line 3091
    sp = STACKTOP; //@line 3092
    STACKTOP = sp; //@line 3093
    return;
   }
   _emscripten_free_async_context($AsyncCtx14 | 0); //@line 3095
   STACKTOP = sp; //@line 3096
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 3100
   return;
  }
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_484($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 35898
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35900
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35902
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 35904
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 35906
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 35908
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 35912
 $15 = $4 + 12 | 0; //@line 35914
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] >> 2]; //@line 35915
 $16 = $4 + 16 | 0; //@line 35916
 HEAP8[$16 >> 0] = $6; //@line 35917
 HEAP8[$4 + 17 >> 0] = $8; //@line 35919
 $18 = _equeue_alloc($10, 20) | 0; //@line 35920
 if ($18 | 0) {
  $20 = HEAP32[$15 >> 2] | 0; //@line 35923
  if (!$20) {
   HEAP32[$18 + 12 >> 2] = 0; //@line 35927
   HEAP16[$18 + 16 >> 1] = HEAP16[$16 >> 1] | 0; //@line 35930
   _equeue_event_dtor($18, 287); //@line 35931
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 35932
   $35 = _equeue_post($10, 288, $18) | 0; //@line 35933
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 289; //@line 35936
    $36 = $ReallocAsyncCtx6 + 4 | 0; //@line 35937
    HEAP32[$36 >> 2] = $15; //@line 35938
    $37 = $ReallocAsyncCtx6 + 8 | 0; //@line 35939
    HEAP32[$37 >> 2] = $2; //@line 35940
    $38 = $ReallocAsyncCtx6 + 12 | 0; //@line 35941
    HEAP32[$38 >> 2] = $4; //@line 35942
    $39 = $ReallocAsyncCtx6 + 16 | 0; //@line 35943
    HEAP32[$39 >> 2] = $14; //@line 35944
    sp = STACKTOP; //@line 35945
    return;
   }
   HEAP32[___async_retval >> 2] = $35; //@line 35949
   ___async_unwind = 0; //@line 35950
   HEAP32[$ReallocAsyncCtx6 >> 2] = 289; //@line 35951
   $36 = $ReallocAsyncCtx6 + 4 | 0; //@line 35952
   HEAP32[$36 >> 2] = $15; //@line 35953
   $37 = $ReallocAsyncCtx6 + 8 | 0; //@line 35954
   HEAP32[$37 >> 2] = $2; //@line 35955
   $38 = $ReallocAsyncCtx6 + 12 | 0; //@line 35956
   HEAP32[$38 >> 2] = $4; //@line 35957
   $39 = $ReallocAsyncCtx6 + 16 | 0; //@line 35958
   HEAP32[$39 >> 2] = $14; //@line 35959
   sp = STACKTOP; //@line 35960
   return;
  } else {
   $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 35964
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 35965
   FUNCTION_TABLE_vii[$23 & 31]($18, $4); //@line 35966
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 35969
    $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 35970
    HEAP32[$24 >> 2] = $15; //@line 35971
    $25 = $ReallocAsyncCtx3 + 8 | 0; //@line 35972
    HEAP32[$25 >> 2] = $18; //@line 35973
    $26 = $ReallocAsyncCtx3 + 12 | 0; //@line 35974
    HEAP32[$26 >> 2] = $16; //@line 35975
    $27 = $ReallocAsyncCtx3 + 16 | 0; //@line 35976
    HEAP32[$27 >> 2] = $10; //@line 35977
    $28 = $ReallocAsyncCtx3 + 20 | 0; //@line 35978
    HEAP32[$28 >> 2] = $15; //@line 35979
    $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 35980
    HEAP32[$29 >> 2] = $2; //@line 35981
    $30 = $ReallocAsyncCtx3 + 28 | 0; //@line 35982
    HEAP32[$30 >> 2] = $4; //@line 35983
    $31 = $ReallocAsyncCtx3 + 32 | 0; //@line 35984
    HEAP32[$31 >> 2] = $14; //@line 35985
    sp = STACKTOP; //@line 35986
    return;
   }
   ___async_unwind = 0; //@line 35989
   HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 35990
   $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 35991
   HEAP32[$24 >> 2] = $15; //@line 35992
   $25 = $ReallocAsyncCtx3 + 8 | 0; //@line 35993
   HEAP32[$25 >> 2] = $18; //@line 35994
   $26 = $ReallocAsyncCtx3 + 12 | 0; //@line 35995
   HEAP32[$26 >> 2] = $16; //@line 35996
   $27 = $ReallocAsyncCtx3 + 16 | 0; //@line 35997
   HEAP32[$27 >> 2] = $10; //@line 35998
   $28 = $ReallocAsyncCtx3 + 20 | 0; //@line 35999
   HEAP32[$28 >> 2] = $15; //@line 36000
   $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 36001
   HEAP32[$29 >> 2] = $2; //@line 36002
   $30 = $ReallocAsyncCtx3 + 28 | 0; //@line 36003
   HEAP32[$30 >> 2] = $4; //@line 36004
   $31 = $ReallocAsyncCtx3 + 32 | 0; //@line 36005
   HEAP32[$31 >> 2] = $14; //@line 36006
   sp = STACKTOP; //@line 36007
   return;
  }
 }
 $41 = HEAP32[$15 >> 2] | 0; //@line 36011
 if ($41 | 0) {
  $44 = HEAP32[$41 + 8 >> 2] | 0; //@line 36015
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 36016
  FUNCTION_TABLE_vi[$44 & 1023]($4); //@line 36017
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 290; //@line 36020
   $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 36021
   HEAP32[$45 >> 2] = $2; //@line 36022
   $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 36023
   HEAP32[$46 >> 2] = 0; //@line 36024
   $47 = $ReallocAsyncCtx4 + 12 | 0; //@line 36025
   HEAP32[$47 >> 2] = $14; //@line 36026
   sp = STACKTOP; //@line 36027
   return;
  }
  ___async_unwind = 0; //@line 36030
  HEAP32[$ReallocAsyncCtx4 >> 2] = 290; //@line 36031
  $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 36032
  HEAP32[$45 >> 2] = $2; //@line 36033
  $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 36034
  HEAP32[$46 >> 2] = 0; //@line 36035
  $47 = $ReallocAsyncCtx4 + 12 | 0; //@line 36036
  HEAP32[$47 >> 2] = $14; //@line 36037
  sp = STACKTOP; //@line 36038
  return;
 }
 $48 = HEAP32[$2 >> 2] | 0; //@line 36041
 if (!$48) {
  HEAP32[___async_retval >> 2] = 0; //@line 36045
  return;
 }
 $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 36049
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 36050
 FUNCTION_TABLE_vi[$51 & 1023]($14); //@line 36051
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 36054
  $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 36055
  HEAP32[$52 >> 2] = 0; //@line 36056
  sp = STACKTOP; //@line 36057
  return;
 }
 ___async_unwind = 0; //@line 36060
 HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 36061
 $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 36062
 HEAP32[$52 >> 2] = 0; //@line 36063
 sp = STACKTOP; //@line 36064
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $18 = 0, $21 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $38 = 0, $4 = 0, $45 = 0, $49 = 0, $5 = 0, $52 = 0, $57 = 0, $6 = 0, $60 = 0, $64 = 0, $67 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8655
 STACKTOP = STACKTOP + 48 | 0; //@line 8656
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 8656
 $4 = sp + 16 | 0; //@line 8657
 $5 = sp; //@line 8658
 $6 = $1 + 12 | 0; //@line 8659
 $7 = HEAP32[$6 >> 2] | 0; //@line 8660
 do {
  if (!$7) {
   $9 = $5 + 12 | 0; //@line 8664
   HEAP32[$9 >> 2] = 0; //@line 8665
   $30 = 0; //@line 8666
   $45 = $9; //@line 8666
  } else {
   $11 = HEAP32[$7 + 4 >> 2] | 0; //@line 8669
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 8670
   FUNCTION_TABLE_vii[$11 & 31]($5, $1); //@line 8671
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 284; //@line 8674
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 8676
    HEAP8[$AsyncCtx + 8 >> 0] = $2; //@line 8678
    HEAP8[$AsyncCtx + 9 >> 0] = $3; //@line 8680
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 8682
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 8684
    HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 8686
    sp = STACKTOP; //@line 8687
    STACKTOP = sp; //@line 8688
    return 0; //@line 8688
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 8690
   $$pre$i = HEAP32[$6 >> 2] | 0; //@line 8691
   $18 = $5 + 12 | 0; //@line 8692
   HEAP32[$18 >> 2] = $$pre$i; //@line 8693
   if (!$$pre$i) {
    $30 = 0; //@line 8696
    $45 = $18; //@line 8696
   } else {
    $21 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 8700
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8701
    FUNCTION_TABLE_vii[$21 & 31]($4, $5); //@line 8702
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 285; //@line 8705
     HEAP32[$AsyncCtx2 + 4 >> 2] = $18; //@line 8707
     HEAP32[$AsyncCtx2 + 8 >> 2] = $4; //@line 8709
     HEAP8[$AsyncCtx2 + 12 >> 0] = $2; //@line 8711
     HEAP8[$AsyncCtx2 + 13 >> 0] = $3; //@line 8713
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 8715
     HEAP32[$AsyncCtx2 + 20 >> 2] = $18; //@line 8717
     HEAP32[$AsyncCtx2 + 24 >> 2] = $5; //@line 8719
     sp = STACKTOP; //@line 8720
     STACKTOP = sp; //@line 8721
     return 0; //@line 8721
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8723
     $30 = HEAP32[$18 >> 2] | 0; //@line 8725
     $45 = $18; //@line 8725
     break;
    }
   }
  }
 } while (0);
 $29 = $4 + 12 | 0; //@line 8731
 HEAP32[$29 >> 2] = $30; //@line 8732
 $31 = $4 + 16 | 0; //@line 8733
 HEAP8[$31 >> 0] = $2; //@line 8734
 HEAP8[$4 + 17 >> 0] = $3; //@line 8736
 $33 = _equeue_alloc($0, 20) | 0; //@line 8737
 do {
  if (!$33) {
   $$0$i = 0; //@line 8741
  } else {
   $35 = HEAP32[$29 >> 2] | 0; //@line 8743
   do {
    if (!$35) {
     $49 = 0; //@line 8747
    } else {
     $38 = HEAP32[$35 + 4 >> 2] | 0; //@line 8750
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8751
     FUNCTION_TABLE_vii[$38 & 31]($33, $4); //@line 8752
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 286; //@line 8755
      HEAP32[$AsyncCtx5 + 4 >> 2] = $29; //@line 8757
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 8759
      HEAP32[$AsyncCtx5 + 12 >> 2] = $31; //@line 8761
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 8763
      HEAP32[$AsyncCtx5 + 20 >> 2] = $29; //@line 8765
      HEAP32[$AsyncCtx5 + 24 >> 2] = $45; //@line 8767
      HEAP32[$AsyncCtx5 + 28 >> 2] = $4; //@line 8769
      HEAP32[$AsyncCtx5 + 32 >> 2] = $5; //@line 8771
      sp = STACKTOP; //@line 8772
      STACKTOP = sp; //@line 8773
      return 0; //@line 8773
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8775
      $49 = HEAP32[$29 >> 2] | 0; //@line 8777
      break;
     }
    }
   } while (0);
   HEAP32[$33 + 12 >> 2] = $49; //@line 8783
   HEAP16[$33 + 16 >> 1] = HEAP16[$31 >> 1] | 0; //@line 8786
   _equeue_event_dtor($33, 287); //@line 8787
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8788
   $52 = _equeue_post($0, 288, $33) | 0; //@line 8789
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 289; //@line 8792
    HEAP32[$AsyncCtx15 + 4 >> 2] = $29; //@line 8794
    HEAP32[$AsyncCtx15 + 8 >> 2] = $45; //@line 8796
    HEAP32[$AsyncCtx15 + 12 >> 2] = $4; //@line 8798
    HEAP32[$AsyncCtx15 + 16 >> 2] = $5; //@line 8800
    sp = STACKTOP; //@line 8801
    STACKTOP = sp; //@line 8802
    return 0; //@line 8802
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8804
    $$0$i = $52; //@line 8805
    break;
   }
  }
 } while (0);
 $57 = HEAP32[$29 >> 2] | 0; //@line 8810
 do {
  if ($57 | 0) {
   $60 = HEAP32[$57 + 8 >> 2] | 0; //@line 8815
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8816
   FUNCTION_TABLE_vi[$60 & 1023]($4); //@line 8817
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 290; //@line 8820
    HEAP32[$AsyncCtx8 + 4 >> 2] = $45; //@line 8822
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 8824
    HEAP32[$AsyncCtx8 + 12 >> 2] = $5; //@line 8826
    sp = STACKTOP; //@line 8827
    STACKTOP = sp; //@line 8828
    return 0; //@line 8828
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 8830
    break;
   }
  }
 } while (0);
 $64 = HEAP32[$45 >> 2] | 0; //@line 8835
 if (!$64) {
  STACKTOP = sp; //@line 8838
  return $$0$i | 0; //@line 8838
 }
 $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 8841
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8842
 FUNCTION_TABLE_vi[$67 & 1023]($5); //@line 8843
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 291; //@line 8846
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 8848
  sp = STACKTOP; //@line 8849
  STACKTOP = sp; //@line 8850
  return 0; //@line 8850
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 8852
 STACKTOP = sp; //@line 8853
 return $$0$i | 0; //@line 8853
}
function __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$sroa$5 = 0, $$sroa$5$0$$sroa_raw_idx = 0, $34 = 0, $39 = 0, $40 = 0, $45 = 0, sp = 0;
 sp = STACKTOP; //@line 23343
 STACKTOP = STACKTOP + 16 | 0; //@line 23344
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 23344
 $$sroa$5 = sp; //@line 23345
 L1 : do {
  if (!$1) {
   $$0 = -1003; //@line 23349
  } else {
   do {
    switch (HEAP32[$1 >> 2] | 0) {
    case 0:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 >> 2]; //@line 23357
      $$0 = 0; //@line 23358
      break L1;
      break;
     }
    case 1:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 12 >> 0] | 0; //@line 23366
      $$0 = 0; //@line 23367
      break L1;
      break;
     }
    case 2:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 796 >> 0] | 0; //@line 23375
      $$0 = 0; //@line 23376
      break L1;
      break;
     }
    case 3:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 588 >> 2]; //@line 23384
      $$0 = 0; //@line 23385
      break L1;
      break;
     }
    case 4:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 592 >> 2]; //@line 23393
      $$0 = 0; //@line 23394
      break L1;
      break;
     }
    case 5:
     {
      HEAP32[$1 + 4 >> 2] = $2 + 552; //@line 23401
      $$0 = 0; //@line 23402
      break L1;
      break;
     }
    case 6:
     {
      HEAP32[$1 + 4 >> 2] = $2 + 568; //@line 23409
      $$0 = 0; //@line 23410
      break L1;
      break;
     }
    case 7:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 8 >> 0] | 0; //@line 23418
      $$0 = 0; //@line 23419
      break L1;
      break;
     }
    case 8:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 9 >> 0] | 0; //@line 23427
      $$0 = 0; //@line 23428
      break L1;
      break;
     }
    case 9:
     {
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY16get_phy_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 23436
      $$0 = 0; //@line 23437
      break L1;
      break;
     }
    case 10:
     {
      $34 = $2 + 772 | 0; //@line 23444
      $39 = HEAP32[$34 + 4 >> 2] | 0; //@line 23449
      $40 = $1 + 4 | 0; //@line 23450
      HEAP32[$40 >> 2] = HEAP32[$34 >> 2]; //@line 23452
      HEAP32[$40 + 4 >> 2] = $39; //@line 23455
      $$0 = 0; //@line 23456
      break L1;
      break;
     }
    case 11:
     {
      $45 = __ZN7LoRaPHY24get_default_rx2_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 23462
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY25get_default_rx2_frequencyEv(HEAP32[$0 >> 2] | 0) | 0; //@line 23466
      HEAP8[$1 + 8 >> 0] = $45; //@line 23468
      $$sroa$5$0$$sroa_raw_idx = $1 + 9 | 0; //@line 23469
      HEAP8[$$sroa$5$0$$sroa_raw_idx >> 0] = HEAP8[$$sroa$5 >> 0] | 0; //@line 23470
      HEAP8[$$sroa$5$0$$sroa_raw_idx + 1 >> 0] = HEAP8[$$sroa$5 + 1 >> 0] | 0; //@line 23470
      HEAP8[$$sroa$5$0$$sroa_raw_idx + 2 >> 0] = HEAP8[$$sroa$5 + 2 >> 0] | 0; //@line 23470
      $$0 = 0; //@line 23471
      break L1;
      break;
     }
    case 13:
     {
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 1) | 0; //@line 23479
      $$0 = 0; //@line 23480
      break L1;
      break;
     }
    case 12:
     {
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 23488
      $$0 = 0; //@line 23489
      break L1;
      break;
     }
    case 14:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 768 >> 0] | 0; //@line 23497
      $$0 = 0; //@line 23498
      break L1;
      break;
     }
    case 15:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 748 >> 2]; //@line 23506
      $$0 = 0; //@line 23507
      break L1;
      break;
     }
    case 16:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 752 >> 2]; //@line 23515
      $$0 = 0; //@line 23516
      break L1;
      break;
     }
    case 17:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 756 >> 2]; //@line 23524
      $$0 = 0; //@line 23525
      break L1;
      break;
     }
    case 18:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 760 >> 2]; //@line 23533
      $$0 = 0; //@line 23534
      break L1;
      break;
     }
    case 19:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 764 >> 2]; //@line 23542
      $$0 = 0; //@line 23543
      break L1;
      break;
     }
    case 20:
     {
      HEAP8[$1 + 4 >> 0] = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 23551
      $$0 = 0; //@line 23552
      break L1;
      break;
     }
    case 21:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 737 >> 0] | 0; //@line 23560
      $$0 = 0; //@line 23561
      break L1;
      break;
     }
    case 23:
     {
      HEAP8[$1 + 4 >> 0] = __ZN7LoRaPHY20get_default_tx_powerEv(HEAP32[$0 >> 2] | 0) | 0; //@line 23569
      $$0 = 0; //@line 23570
      break L1;
      break;
     }
    case 22:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 736 >> 0] | 0; //@line 23578
      $$0 = 0; //@line 23579
      break L1;
      break;
     }
    case 24:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 596 >> 2]; //@line 23587
      $$0 = 0; //@line 23588
      break L1;
      break;
     }
    case 25:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 600 >> 2]; //@line 23596
      $$0 = 0; //@line 23597
      break L1;
      break;
     }
    case 26:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 848 >> 2]; //@line 23605
      $$0 = 0; //@line 23606
      break L1;
      break;
     }
    case 27:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 740 >> 2]; //@line 23614
      $$0 = 0; //@line 23615
      break L1;
      break;
     }
    case 28:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 744 >> 0] | 0; //@line 23623
      $$0 = 0; //@line 23624
      break L1;
      break;
     }
    case 29:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 788 >> 2]; //@line 23632
      $$0 = 0; //@line 23633
      break L1;
      break;
     }
    default:
     {
      $$0 = -1002; //@line 23638
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 STACKTOP = sp; //@line 23645
 return $$0 | 0; //@line 23645
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_457($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 33450
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33454
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33456
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33458
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33460
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33462
 $13 = $8 + 12 | 0; //@line 33464
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 33465
 $14 = $8 + 16 | 0; //@line 33466
 HEAP32[$14 >> 2] = $10; //@line 33467
 $15 = _equeue_alloc($12, 20) | 0; //@line 33468
 if ($15 | 0) {
  $17 = HEAP32[$13 >> 2] | 0; //@line 33471
  if (!$17) {
   HEAP32[$15 + 12 >> 2] = 0; //@line 33475
   HEAP32[$15 + 16 >> 2] = HEAP32[$14 >> 2]; //@line 33478
   _equeue_event_dtor($15, 279); //@line 33479
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 33480
   $32 = _equeue_post($12, 280, $15) | 0; //@line 33481
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 281; //@line 33484
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 33485
    HEAP32[$33 >> 2] = $13; //@line 33486
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 33487
    HEAP32[$34 >> 2] = $6; //@line 33488
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 33489
    HEAP32[$35 >> 2] = $8; //@line 33490
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 33491
    HEAP32[$36 >> 2] = $4; //@line 33492
    sp = STACKTOP; //@line 33493
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 33497
   ___async_unwind = 0; //@line 33498
   HEAP32[$ReallocAsyncCtx6 >> 2] = 281; //@line 33499
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 33500
   HEAP32[$33 >> 2] = $13; //@line 33501
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 33502
   HEAP32[$34 >> 2] = $6; //@line 33503
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 33504
   HEAP32[$35 >> 2] = $8; //@line 33505
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 33506
   HEAP32[$36 >> 2] = $4; //@line 33507
   sp = STACKTOP; //@line 33508
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 33512
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 33513
   FUNCTION_TABLE_vii[$20 & 31]($15, $8); //@line 33514
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 278; //@line 33517
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 33518
    HEAP32[$21 >> 2] = $13; //@line 33519
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 33520
    HEAP32[$22 >> 2] = $15; //@line 33521
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 33522
    HEAP32[$23 >> 2] = $14; //@line 33523
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 33524
    HEAP32[$24 >> 2] = $12; //@line 33525
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 33526
    HEAP32[$25 >> 2] = $13; //@line 33527
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 33528
    HEAP32[$26 >> 2] = $6; //@line 33529
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 33530
    HEAP32[$27 >> 2] = $8; //@line 33531
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 33532
    HEAP32[$28 >> 2] = $4; //@line 33533
    sp = STACKTOP; //@line 33534
    return;
   }
   ___async_unwind = 0; //@line 33537
   HEAP32[$ReallocAsyncCtx3 >> 2] = 278; //@line 33538
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 33539
   HEAP32[$21 >> 2] = $13; //@line 33540
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 33541
   HEAP32[$22 >> 2] = $15; //@line 33542
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 33543
   HEAP32[$23 >> 2] = $14; //@line 33544
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 33545
   HEAP32[$24 >> 2] = $12; //@line 33546
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 33547
   HEAP32[$25 >> 2] = $13; //@line 33548
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 33549
   HEAP32[$26 >> 2] = $6; //@line 33550
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 33551
   HEAP32[$27 >> 2] = $8; //@line 33552
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 33553
   HEAP32[$28 >> 2] = $4; //@line 33554
   sp = STACKTOP; //@line 33555
   return;
  }
 }
 $38 = HEAP32[$13 >> 2] | 0; //@line 33559
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 33563
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 33564
  FUNCTION_TABLE_vi[$41 & 1023]($8); //@line 33565
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 282; //@line 33568
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 33569
   HEAP32[$42 >> 2] = $6; //@line 33570
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 33571
   HEAP32[$43 >> 2] = 0; //@line 33572
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 33573
   HEAP32[$44 >> 2] = $4; //@line 33574
   sp = STACKTOP; //@line 33575
   return;
  }
  ___async_unwind = 0; //@line 33578
  HEAP32[$ReallocAsyncCtx4 >> 2] = 282; //@line 33579
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 33580
  HEAP32[$42 >> 2] = $6; //@line 33581
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 33582
  HEAP32[$43 >> 2] = 0; //@line 33583
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 33584
  HEAP32[$44 >> 2] = $4; //@line 33585
  sp = STACKTOP; //@line 33586
  return;
 }
 $45 = HEAP32[$6 >> 2] | 0; //@line 33589
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 33593
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 33597
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 33598
 FUNCTION_TABLE_vi[$48 & 1023]($4); //@line 33599
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 283; //@line 33602
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 33603
  HEAP32[$49 >> 2] = 0; //@line 33604
  sp = STACKTOP; //@line 33605
  return;
 }
 ___async_unwind = 0; //@line 33608
 HEAP32[$ReallocAsyncCtx5 >> 2] = 283; //@line 33609
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 33610
 HEAP32[$49 >> 2] = 0; //@line 33611
 sp = STACKTOP; //@line 33612
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_197($0) {
 $0 = $0 | 0;
 var $$pre121 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 5690
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5692
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5694
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5696
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5698
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5700
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5702
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5704
 $$pre121 = HEAP32[$14 >> 2] | 0; //@line 5705
 if ($$pre121 | 0) {
  $17 = HEAP32[$$pre121 + 4 >> 2] | 0; //@line 5709
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 5710
  FUNCTION_TABLE_vii[$17 & 31]($8, $4); //@line 5711
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 584; //@line 5714
   $18 = $ReallocAsyncCtx11 + 4 | 0; //@line 5715
   HEAP32[$18 >> 2] = $2; //@line 5716
   $19 = $ReallocAsyncCtx11 + 8 | 0; //@line 5717
   HEAP32[$19 >> 2] = $4; //@line 5718
   $20 = $ReallocAsyncCtx11 + 12 | 0; //@line 5719
   HEAP32[$20 >> 2] = $6; //@line 5720
   $21 = $ReallocAsyncCtx11 + 16 | 0; //@line 5721
   HEAP32[$21 >> 2] = $12; //@line 5722
   $22 = $ReallocAsyncCtx11 + 20 | 0; //@line 5723
   HEAP32[$22 >> 2] = $14; //@line 5724
   $23 = $ReallocAsyncCtx11 + 24 | 0; //@line 5725
   HEAP32[$23 >> 2] = $10; //@line 5726
   sp = STACKTOP; //@line 5727
   return;
  }
  ___async_unwind = 0; //@line 5730
  HEAP32[$ReallocAsyncCtx11 >> 2] = 584; //@line 5731
  $18 = $ReallocAsyncCtx11 + 4 | 0; //@line 5732
  HEAP32[$18 >> 2] = $2; //@line 5733
  $19 = $ReallocAsyncCtx11 + 8 | 0; //@line 5734
  HEAP32[$19 >> 2] = $4; //@line 5735
  $20 = $ReallocAsyncCtx11 + 12 | 0; //@line 5736
  HEAP32[$20 >> 2] = $6; //@line 5737
  $21 = $ReallocAsyncCtx11 + 16 | 0; //@line 5738
  HEAP32[$21 >> 2] = $12; //@line 5739
  $22 = $ReallocAsyncCtx11 + 20 | 0; //@line 5740
  HEAP32[$22 >> 2] = $14; //@line 5741
  $23 = $ReallocAsyncCtx11 + 24 | 0; //@line 5742
  HEAP32[$23 >> 2] = $10; //@line 5743
  sp = STACKTOP; //@line 5744
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 5747
 $24 = $6 + 12 | 0; //@line 5748
 HEAP32[$6 >> 2] = 586; //@line 5749
 HEAP32[$6 + 4 >> 2] = 0; //@line 5751
 HEAP32[$6 + 8 >> 2] = $2; //@line 5753
 HEAP32[$24 >> 2] = 848; //@line 5754
 $25 = $2 + 1260 | 0; //@line 5755
 if (($25 | 0) == ($6 | 0)) {
  $44 = HEAP32[214] | 0; //@line 5759
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 5760
  FUNCTION_TABLE_vi[$44 & 1023]($6); //@line 5761
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 589; //@line 5764
   $45 = $ReallocAsyncCtx15 + 4 | 0; //@line 5765
   HEAP32[$45 >> 2] = $6; //@line 5766
   $46 = $ReallocAsyncCtx15 + 8 | 0; //@line 5767
   HEAP32[$46 >> 2] = $12; //@line 5768
   sp = STACKTOP; //@line 5769
   return;
  }
  ___async_unwind = 0; //@line 5772
  HEAP32[$ReallocAsyncCtx15 >> 2] = 589; //@line 5773
  $45 = $ReallocAsyncCtx15 + 4 | 0; //@line 5774
  HEAP32[$45 >> 2] = $6; //@line 5775
  $46 = $ReallocAsyncCtx15 + 8 | 0; //@line 5776
  HEAP32[$46 >> 2] = $12; //@line 5777
  sp = STACKTOP; //@line 5778
  return;
 }
 $27 = $2 + 1272 | 0; //@line 5781
 $28 = HEAP32[$27 >> 2] | 0; //@line 5782
 if (!$28) {
  $38 = HEAP32[213] | 0; //@line 5786
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 5787
  FUNCTION_TABLE_vii[$38 & 31]($25, $6); //@line 5788
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 588; //@line 5791
   $39 = $ReallocAsyncCtx14 + 4 | 0; //@line 5792
   HEAP32[$39 >> 2] = $24; //@line 5793
   $40 = $ReallocAsyncCtx14 + 8 | 0; //@line 5794
   HEAP32[$40 >> 2] = $27; //@line 5795
   $41 = $ReallocAsyncCtx14 + 12 | 0; //@line 5796
   HEAP32[$41 >> 2] = $6; //@line 5797
   $42 = $ReallocAsyncCtx14 + 16 | 0; //@line 5798
   HEAP32[$42 >> 2] = $12; //@line 5799
   sp = STACKTOP; //@line 5800
   return;
  }
  ___async_unwind = 0; //@line 5803
  HEAP32[$ReallocAsyncCtx14 >> 2] = 588; //@line 5804
  $39 = $ReallocAsyncCtx14 + 4 | 0; //@line 5805
  HEAP32[$39 >> 2] = $24; //@line 5806
  $40 = $ReallocAsyncCtx14 + 8 | 0; //@line 5807
  HEAP32[$40 >> 2] = $27; //@line 5808
  $41 = $ReallocAsyncCtx14 + 12 | 0; //@line 5809
  HEAP32[$41 >> 2] = $6; //@line 5810
  $42 = $ReallocAsyncCtx14 + 16 | 0; //@line 5811
  HEAP32[$42 >> 2] = $12; //@line 5812
  sp = STACKTOP; //@line 5813
  return;
 } else {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 5817
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 5818
  FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 5819
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 587; //@line 5822
   $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 5823
   HEAP32[$32 >> 2] = $24; //@line 5824
   $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 5825
   HEAP32[$33 >> 2] = $27; //@line 5826
   $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 5827
   HEAP32[$34 >> 2] = $25; //@line 5828
   $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 5829
   HEAP32[$35 >> 2] = $6; //@line 5830
   $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 5831
   HEAP32[$36 >> 2] = $12; //@line 5832
   sp = STACKTOP; //@line 5833
   return;
  }
  ___async_unwind = 0; //@line 5836
  HEAP32[$ReallocAsyncCtx13 >> 2] = 587; //@line 5837
  $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 5838
  HEAP32[$32 >> 2] = $24; //@line 5839
  $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 5840
  HEAP32[$33 >> 2] = $27; //@line 5841
  $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 5842
  HEAP32[$34 >> 2] = $25; //@line 5843
  $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 5844
  HEAP32[$35 >> 2] = $6; //@line 5845
  $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 5846
  HEAP32[$36 >> 2] = $12; //@line 5847
  sp = STACKTOP; //@line 5848
  return;
 }
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $20 = 0, $34 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 2282
 STACKTOP = STACKTOP + 64 | 0; //@line 2283
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 2283
 $vararg_buffer12 = sp + 48 | 0; //@line 2284
 $vararg_buffer10 = sp + 40 | 0; //@line 2285
 $vararg_buffer7 = sp + 32 | 0; //@line 2286
 $vararg_buffer5 = sp + 24 | 0; //@line 2287
 $vararg_buffer1 = sp + 8 | 0; //@line 2288
 _printf(10904, sp) | 0; //@line 2290
 $5 = $3 & 65535; //@line 2292
 HEAP32[$vararg_buffer1 >> 2] = $1; //@line 2293
 HEAP32[$vararg_buffer1 + 4 >> 2] = $2 << 24 >> 24; //@line 2295
 HEAP32[$vararg_buffer1 + 8 >> 2] = $5; //@line 2297
 _printf(10918, $vararg_buffer1) | 0; //@line 2298
 $AsyncCtx27 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2299
 _putchar(10) | 0; //@line 2300
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 107; //@line 2303
  HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 2305
  HEAP32[$AsyncCtx27 + 8 >> 2] = $1; //@line 2307
  HEAP8[$AsyncCtx27 + 12 >> 0] = $2; //@line 2309
  HEAP32[$AsyncCtx27 + 16 >> 2] = $5; //@line 2311
  HEAP32[$AsyncCtx27 + 20 >> 2] = $vararg_buffer5; //@line 2313
  HEAP32[$AsyncCtx27 + 24 >> 2] = $vararg_buffer5; //@line 2315
  HEAP32[$AsyncCtx27 + 28 >> 2] = $vararg_buffer7; //@line 2317
  HEAP32[$AsyncCtx27 + 32 >> 2] = $vararg_buffer7; //@line 2319
  HEAP32[$AsyncCtx27 + 36 >> 2] = $vararg_buffer10; //@line 2321
  HEAP32[$AsyncCtx27 + 40 >> 2] = $vararg_buffer10; //@line 2323
  HEAP32[$AsyncCtx27 + 44 >> 2] = $vararg_buffer12; //@line 2325
  HEAP32[$AsyncCtx27 + 48 >> 2] = $vararg_buffer12; //@line 2327
  sp = STACKTOP; //@line 2328
  STACKTOP = sp; //@line 2329
  return;
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 2331
 $20 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 2334
 $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 2335
 FUNCTION_TABLE_vii[$20 & 31]($0, $1); //@line 2336
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 108; //@line 2339
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2341
  HEAP8[$AsyncCtx + 8 >> 0] = $2; //@line 2343
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 2345
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer5; //@line 2347
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer5; //@line 2349
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer7; //@line 2351
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer7; //@line 2353
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer10; //@line 2355
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer10; //@line 2357
  HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer12; //@line 2359
  HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer12; //@line 2361
  sp = STACKTOP; //@line 2362
  STACKTOP = sp; //@line 2363
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2365
 $34 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 2368
 $AsyncCtx16 = _emscripten_alloc_async_context(40, sp) | 0; //@line 2369
 FUNCTION_TABLE_viiiiiiiiiiiiii[$34 & 1]($0, 0, $2, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $5); //@line 2370
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 109; //@line 2373
  HEAP32[$AsyncCtx16 + 4 >> 2] = $0; //@line 2375
  HEAP32[$AsyncCtx16 + 8 >> 2] = $vararg_buffer5; //@line 2377
  HEAP32[$AsyncCtx16 + 12 >> 2] = $vararg_buffer5; //@line 2379
  HEAP32[$AsyncCtx16 + 16 >> 2] = $vararg_buffer7; //@line 2381
  HEAP32[$AsyncCtx16 + 20 >> 2] = $vararg_buffer7; //@line 2383
  HEAP32[$AsyncCtx16 + 24 >> 2] = $vararg_buffer10; //@line 2385
  HEAP32[$AsyncCtx16 + 28 >> 2] = $vararg_buffer10; //@line 2387
  HEAP32[$AsyncCtx16 + 32 >> 2] = $vararg_buffer12; //@line 2389
  HEAP32[$AsyncCtx16 + 36 >> 2] = $vararg_buffer12; //@line 2391
  sp = STACKTOP; //@line 2392
  STACKTOP = sp; //@line 2393
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 2395
 HEAP8[$0 + 688 >> 0] = 2; //@line 2397
 _printf(10904, $vararg_buffer5) | 0; //@line 2398
 HEAP32[$vararg_buffer7 >> 2] = 3; //@line 2399
 _printf(10970, $vararg_buffer7) | 0; //@line 2400
 $AsyncCtx23 = _emscripten_alloc_async_context(24, sp) | 0; //@line 2401
 _putchar(10) | 0; //@line 2402
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 110; //@line 2405
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 2407
  HEAP32[$AsyncCtx23 + 8 >> 2] = $vararg_buffer10; //@line 2409
  HEAP32[$AsyncCtx23 + 12 >> 2] = $vararg_buffer10; //@line 2411
  HEAP32[$AsyncCtx23 + 16 >> 2] = $vararg_buffer12; //@line 2413
  HEAP32[$AsyncCtx23 + 20 >> 2] = $vararg_buffer12; //@line 2415
  sp = STACKTOP; //@line 2416
  STACKTOP = sp; //@line 2417
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 2419
 $AsyncCtx30 = _emscripten_alloc_async_context(20, sp) | 0; //@line 2420
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 2421
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 111; //@line 2424
  HEAP32[$AsyncCtx30 + 4 >> 2] = $vararg_buffer10; //@line 2426
  HEAP32[$AsyncCtx30 + 8 >> 2] = $vararg_buffer10; //@line 2428
  HEAP32[$AsyncCtx30 + 12 >> 2] = $vararg_buffer12; //@line 2430
  HEAP32[$AsyncCtx30 + 16 >> 2] = $vararg_buffer12; //@line 2432
  sp = STACKTOP; //@line 2433
  STACKTOP = sp; //@line 2434
  return;
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 2436
 _printf(10904, $vararg_buffer10) | 0; //@line 2437
 HEAP32[$vararg_buffer12 >> 2] = 3; //@line 2438
 _printf(10999, $vararg_buffer12) | 0; //@line 2439
 $AsyncCtx19 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2440
 _putchar(10) | 0; //@line 2441
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 112; //@line 2444
  sp = STACKTOP; //@line 2445
  STACKTOP = sp; //@line 2446
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 2448
  STACKTOP = sp; //@line 2449
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_206($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 6603
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6607
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6609
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 6613
 $9 = $6 + 16 | 0; //@line 6614
 $10 = $6 + 28 | 0; //@line 6615
 $11 = HEAP32[$10 >> 2] | 0; //@line 6616
 if ($11 | 0) {
  $13 = $4 + 1896 | 0; //@line 6619
  if (($13 | 0) != ($9 | 0)) {
   $15 = $4 + 1908 | 0; //@line 6622
   $16 = HEAP32[$15 >> 2] | 0; //@line 6623
   if (!$16) {
    $27 = HEAP32[$11 + 4 >> 2] | 0; //@line 6627
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 6628
    FUNCTION_TABLE_vii[$27 & 31]($13, $9); //@line 6629
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 323; //@line 6632
     $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 6633
     HEAP32[$28 >> 2] = $10; //@line 6634
     $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 6635
     HEAP32[$29 >> 2] = $15; //@line 6636
     $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 6637
     HEAP32[$30 >> 2] = $6; //@line 6638
     $31 = $ReallocAsyncCtx4 + 16 | 0; //@line 6639
     HEAP32[$31 >> 2] = $4; //@line 6640
     sp = STACKTOP; //@line 6641
     return;
    }
    ___async_unwind = 0; //@line 6644
    HEAP32[$ReallocAsyncCtx4 >> 2] = 323; //@line 6645
    $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 6646
    HEAP32[$28 >> 2] = $10; //@line 6647
    $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 6648
    HEAP32[$29 >> 2] = $15; //@line 6649
    $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 6650
    HEAP32[$30 >> 2] = $6; //@line 6651
    $31 = $ReallocAsyncCtx4 + 16 | 0; //@line 6652
    HEAP32[$31 >> 2] = $4; //@line 6653
    sp = STACKTOP; //@line 6654
    return;
   } else {
    $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 6658
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 6659
    FUNCTION_TABLE_vi[$19 & 1023]($13); //@line 6660
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 322; //@line 6663
     $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 6664
     HEAP32[$20 >> 2] = $10; //@line 6665
     $21 = $ReallocAsyncCtx3 + 8 | 0; //@line 6666
     HEAP32[$21 >> 2] = $15; //@line 6667
     $22 = $ReallocAsyncCtx3 + 12 | 0; //@line 6668
     HEAP32[$22 >> 2] = $13; //@line 6669
     $23 = $ReallocAsyncCtx3 + 16 | 0; //@line 6670
     HEAP32[$23 >> 2] = $9; //@line 6671
     $24 = $ReallocAsyncCtx3 + 20 | 0; //@line 6672
     HEAP32[$24 >> 2] = $6; //@line 6673
     $25 = $ReallocAsyncCtx3 + 24 | 0; //@line 6674
     HEAP32[$25 >> 2] = $4; //@line 6675
     sp = STACKTOP; //@line 6676
     return;
    }
    ___async_unwind = 0; //@line 6679
    HEAP32[$ReallocAsyncCtx3 >> 2] = 322; //@line 6680
    $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 6681
    HEAP32[$20 >> 2] = $10; //@line 6682
    $21 = $ReallocAsyncCtx3 + 8 | 0; //@line 6683
    HEAP32[$21 >> 2] = $15; //@line 6684
    $22 = $ReallocAsyncCtx3 + 12 | 0; //@line 6685
    HEAP32[$22 >> 2] = $13; //@line 6686
    $23 = $ReallocAsyncCtx3 + 16 | 0; //@line 6687
    HEAP32[$23 >> 2] = $9; //@line 6688
    $24 = $ReallocAsyncCtx3 + 20 | 0; //@line 6689
    HEAP32[$24 >> 2] = $6; //@line 6690
    $25 = $ReallocAsyncCtx3 + 24 | 0; //@line 6691
    HEAP32[$25 >> 2] = $4; //@line 6692
    sp = STACKTOP; //@line 6693
    return;
   }
  }
 }
 $32 = $6 + 32 | 0; //@line 6698
 $33 = $6 + 44 | 0; //@line 6699
 $34 = HEAP32[$33 >> 2] | 0; //@line 6700
 if (!$34) {
  return;
 }
 $36 = $4 + 1912 | 0; //@line 6705
 if (($36 | 0) == ($32 | 0)) {
  return;
 }
 $38 = $4 + 1924 | 0; //@line 6710
 $39 = HEAP32[$38 >> 2] | 0; //@line 6711
 if (!$39) {
  $48 = HEAP32[$34 + 4 >> 2] | 0; //@line 6715
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 6716
  FUNCTION_TABLE_vii[$48 & 31]($36, $32); //@line 6717
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 325; //@line 6720
   $49 = $ReallocAsyncCtx6 + 4 | 0; //@line 6721
   HEAP32[$49 >> 2] = $33; //@line 6722
   $50 = $ReallocAsyncCtx6 + 8 | 0; //@line 6723
   HEAP32[$50 >> 2] = $38; //@line 6724
   sp = STACKTOP; //@line 6725
   return;
  }
  ___async_unwind = 0; //@line 6728
  HEAP32[$ReallocAsyncCtx6 >> 2] = 325; //@line 6729
  $49 = $ReallocAsyncCtx6 + 4 | 0; //@line 6730
  HEAP32[$49 >> 2] = $33; //@line 6731
  $50 = $ReallocAsyncCtx6 + 8 | 0; //@line 6732
  HEAP32[$50 >> 2] = $38; //@line 6733
  sp = STACKTOP; //@line 6734
  return;
 } else {
  $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 6738
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 6739
  FUNCTION_TABLE_vi[$42 & 1023]($36); //@line 6740
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 324; //@line 6743
   $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 6744
   HEAP32[$43 >> 2] = $33; //@line 6745
   $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 6746
   HEAP32[$44 >> 2] = $38; //@line 6747
   $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 6748
   HEAP32[$45 >> 2] = $36; //@line 6749
   $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 6750
   HEAP32[$46 >> 2] = $32; //@line 6751
   sp = STACKTOP; //@line 6752
   return;
  }
  ___async_unwind = 0; //@line 6755
  HEAP32[$ReallocAsyncCtx5 >> 2] = 324; //@line 6756
  $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 6757
  HEAP32[$43 >> 2] = $33; //@line 6758
  $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 6759
  HEAP32[$44 >> 2] = $38; //@line 6760
  $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 6761
  HEAP32[$45 >> 2] = $36; //@line 6762
  $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 6763
  HEAP32[$46 >> 2] = $32; //@line 6764
  sp = STACKTOP; //@line 6765
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$pre$i = 0, $10 = 0, $16 = 0, $19 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $34 = 0, $4 = 0, $41 = 0, $45 = 0, $48 = 0, $5 = 0, $53 = 0, $56 = 0, $6 = 0, $60 = 0, $63 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8451
 STACKTOP = STACKTOP + 48 | 0; //@line 8452
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 8452
 $3 = sp + 16 | 0; //@line 8453
 $4 = sp; //@line 8454
 $5 = $1 + 12 | 0; //@line 8455
 $6 = HEAP32[$5 >> 2] | 0; //@line 8456
 do {
  if (!$6) {
   $8 = $4 + 12 | 0; //@line 8460
   HEAP32[$8 >> 2] = 0; //@line 8461
   $27 = 0; //@line 8462
   $41 = $8; //@line 8462
  } else {
   $10 = HEAP32[$6 + 4 >> 2] | 0; //@line 8465
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 8466
   FUNCTION_TABLE_vii[$10 & 31]($4, $1); //@line 8467
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 276; //@line 8470
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 8472
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 8474
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 8476
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 8478
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 8480
    sp = STACKTOP; //@line 8481
    STACKTOP = sp; //@line 8482
    return 0; //@line 8482
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 8484
   $$pre$i = HEAP32[$5 >> 2] | 0; //@line 8485
   $16 = $4 + 12 | 0; //@line 8486
   HEAP32[$16 >> 2] = $$pre$i; //@line 8487
   if (!$$pre$i) {
    $27 = 0; //@line 8490
    $41 = $16; //@line 8490
   } else {
    $19 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 8494
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8495
    FUNCTION_TABLE_vii[$19 & 31]($3, $4); //@line 8496
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 277; //@line 8499
     HEAP32[$AsyncCtx2 + 4 >> 2] = $16; //@line 8501
     HEAP32[$AsyncCtx2 + 8 >> 2] = $4; //@line 8503
     HEAP32[$AsyncCtx2 + 12 >> 2] = $16; //@line 8505
     HEAP32[$AsyncCtx2 + 16 >> 2] = $3; //@line 8507
     HEAP32[$AsyncCtx2 + 20 >> 2] = $2; //@line 8509
     HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 8511
     sp = STACKTOP; //@line 8512
     STACKTOP = sp; //@line 8513
     return 0; //@line 8513
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8515
     $27 = HEAP32[$16 >> 2] | 0; //@line 8517
     $41 = $16; //@line 8517
     break;
    }
   }
  }
 } while (0);
 $26 = $3 + 12 | 0; //@line 8523
 HEAP32[$26 >> 2] = $27; //@line 8524
 $28 = $3 + 16 | 0; //@line 8525
 HEAP32[$28 >> 2] = $2; //@line 8526
 $29 = _equeue_alloc($0, 20) | 0; //@line 8527
 do {
  if (!$29) {
   $$0$i = 0; //@line 8531
  } else {
   $31 = HEAP32[$26 >> 2] | 0; //@line 8533
   do {
    if (!$31) {
     $45 = 0; //@line 8537
    } else {
     $34 = HEAP32[$31 + 4 >> 2] | 0; //@line 8540
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8541
     FUNCTION_TABLE_vii[$34 & 31]($29, $3); //@line 8542
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 278; //@line 8545
      HEAP32[$AsyncCtx5 + 4 >> 2] = $26; //@line 8547
      HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 8549
      HEAP32[$AsyncCtx5 + 12 >> 2] = $28; //@line 8551
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 8553
      HEAP32[$AsyncCtx5 + 20 >> 2] = $26; //@line 8555
      HEAP32[$AsyncCtx5 + 24 >> 2] = $41; //@line 8557
      HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 8559
      HEAP32[$AsyncCtx5 + 32 >> 2] = $4; //@line 8561
      sp = STACKTOP; //@line 8562
      STACKTOP = sp; //@line 8563
      return 0; //@line 8563
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8565
      $45 = HEAP32[$26 >> 2] | 0; //@line 8567
      break;
     }
    }
   } while (0);
   HEAP32[$29 + 12 >> 2] = $45; //@line 8573
   HEAP32[$29 + 16 >> 2] = HEAP32[$28 >> 2]; //@line 8576
   _equeue_event_dtor($29, 279); //@line 8577
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8578
   $48 = _equeue_post($0, 280, $29) | 0; //@line 8579
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 281; //@line 8582
    HEAP32[$AsyncCtx15 + 4 >> 2] = $26; //@line 8584
    HEAP32[$AsyncCtx15 + 8 >> 2] = $41; //@line 8586
    HEAP32[$AsyncCtx15 + 12 >> 2] = $3; //@line 8588
    HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 8590
    sp = STACKTOP; //@line 8591
    STACKTOP = sp; //@line 8592
    return 0; //@line 8592
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8594
    $$0$i = $48; //@line 8595
    break;
   }
  }
 } while (0);
 $53 = HEAP32[$26 >> 2] | 0; //@line 8600
 do {
  if ($53 | 0) {
   $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 8605
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8606
   FUNCTION_TABLE_vi[$56 & 1023]($3); //@line 8607
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 282; //@line 8610
    HEAP32[$AsyncCtx8 + 4 >> 2] = $41; //@line 8612
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 8614
    HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 8616
    sp = STACKTOP; //@line 8617
    STACKTOP = sp; //@line 8618
    return 0; //@line 8618
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 8620
    break;
   }
  }
 } while (0);
 $60 = HEAP32[$41 >> 2] | 0; //@line 8625
 if (!$60) {
  STACKTOP = sp; //@line 8628
  return $$0$i | 0; //@line 8628
 }
 $63 = HEAP32[$60 + 8 >> 2] | 0; //@line 8631
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8632
 FUNCTION_TABLE_vi[$63 & 1023]($4); //@line 8633
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 283; //@line 8636
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 8638
  sp = STACKTOP; //@line 8639
  STACKTOP = sp; //@line 8640
  return 0; //@line 8640
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 8642
 STACKTOP = sp; //@line 8643
 return $$0$i | 0; //@line 8643
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_432($0) {
 $0 = $0 | 0;
 var $$pre17 = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26312
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26314
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26316
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26318
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 26323
  _mbed_assert_internal(13142, 13151, 217); //@line 26324
  if (___async) {
   HEAP32[$ReallocAsyncCtx16 >> 2] = 480; //@line 26327
   $9 = $ReallocAsyncCtx16 + 4 | 0; //@line 26328
   HEAP32[$9 >> 2] = $2; //@line 26329
   $10 = $ReallocAsyncCtx16 + 8 | 0; //@line 26330
   HEAP32[$10 >> 2] = $4; //@line 26331
   $11 = $ReallocAsyncCtx16 + 12 | 0; //@line 26332
   HEAP32[$11 >> 2] = $6; //@line 26333
   sp = STACKTOP; //@line 26334
   return;
  }
  ___async_unwind = 0; //@line 26337
  HEAP32[$ReallocAsyncCtx16 >> 2] = 480; //@line 26338
  $9 = $ReallocAsyncCtx16 + 4 | 0; //@line 26339
  HEAP32[$9 >> 2] = $2; //@line 26340
  $10 = $ReallocAsyncCtx16 + 8 | 0; //@line 26341
  HEAP32[$10 >> 2] = $4; //@line 26342
  $11 = $ReallocAsyncCtx16 + 12 | 0; //@line 26343
  HEAP32[$11 >> 2] = $6; //@line 26344
  sp = STACKTOP; //@line 26345
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 26349
 $$pre17 = HEAP8[$6 >> 0] | 0; //@line 26350
 if (!($$pre17 & 4)) {
  $16 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26355
  $17 = $16 + 16 | 0; //@line 26356
  $19 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 26358
  $20 = $16 + 28 | 0; //@line 26359
  $21 = HEAP32[$20 >> 2] | 0; //@line 26360
  if (!$21) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 26363
   _mbed_assert_internal(15352, 15357, 1102); //@line 26364
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 26367
    $23 = $ReallocAsyncCtx15 + 4 | 0; //@line 26368
    HEAP32[$23 >> 2] = $20; //@line 26369
    $24 = $ReallocAsyncCtx15 + 8 | 0; //@line 26370
    HEAP32[$24 >> 2] = $17; //@line 26371
    $25 = $ReallocAsyncCtx15 + 12 | 0; //@line 26372
    HEAP32[$25 >> 2] = $19; //@line 26373
    $26 = $ReallocAsyncCtx15 + 16 | 0; //@line 26374
    HEAP32[$26 >> 2] = $6; //@line 26375
    $27 = $ReallocAsyncCtx15 + 20 | 0; //@line 26376
    HEAP32[$27 >> 2] = $4; //@line 26377
    sp = STACKTOP; //@line 26378
    return;
   }
   ___async_unwind = 0; //@line 26381
   HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 26382
   $23 = $ReallocAsyncCtx15 + 4 | 0; //@line 26383
   HEAP32[$23 >> 2] = $20; //@line 26384
   $24 = $ReallocAsyncCtx15 + 8 | 0; //@line 26385
   HEAP32[$24 >> 2] = $17; //@line 26386
   $25 = $ReallocAsyncCtx15 + 12 | 0; //@line 26387
   HEAP32[$25 >> 2] = $19; //@line 26388
   $26 = $ReallocAsyncCtx15 + 16 | 0; //@line 26389
   HEAP32[$26 >> 2] = $6; //@line 26390
   $27 = $ReallocAsyncCtx15 + 20 | 0; //@line 26391
   HEAP32[$27 >> 2] = $4; //@line 26392
   sp = STACKTOP; //@line 26393
   return;
  } else {
   $28 = HEAP32[$21 >> 2] | 0; //@line 26396
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 26397
   FUNCTION_TABLE_vii[$28 & 31]($17, $19); //@line 26398
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 26401
    $29 = $ReallocAsyncCtx4 + 4 | 0; //@line 26402
    HEAP32[$29 >> 2] = $6; //@line 26403
    $30 = $ReallocAsyncCtx4 + 8 | 0; //@line 26404
    HEAP32[$30 >> 2] = $4; //@line 26405
    sp = STACKTOP; //@line 26406
    return;
   }
   ___async_unwind = 0; //@line 26409
   HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 26410
   $29 = $ReallocAsyncCtx4 + 4 | 0; //@line 26411
   HEAP32[$29 >> 2] = $6; //@line 26412
   $30 = $ReallocAsyncCtx4 + 8 | 0; //@line 26413
   HEAP32[$30 >> 2] = $4; //@line 26414
   sp = STACKTOP; //@line 26415
   return;
  }
 }
 $31 = $$pre17 & -5; //@line 26419
 HEAP8[$6 >> 0] = $31; //@line 26420
 if (!($31 & 16)) {
  return;
 }
 HEAP8[$6 >> 0] = $31 & -17; //@line 26427
 $36 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26429
 $37 = $36 + 48 | 0; //@line 26430
 $39 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 26432
 $40 = $36 + 60 | 0; //@line 26433
 $41 = HEAP32[$40 >> 2] | 0; //@line 26434
 if (!$41) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 26437
  _mbed_assert_internal(15352, 15357, 1102); //@line 26438
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 26441
   $43 = $ReallocAsyncCtx14 + 4 | 0; //@line 26442
   HEAP32[$43 >> 2] = $40; //@line 26443
   $44 = $ReallocAsyncCtx14 + 8 | 0; //@line 26444
   HEAP32[$44 >> 2] = $37; //@line 26445
   $45 = $ReallocAsyncCtx14 + 12 | 0; //@line 26446
   HEAP32[$45 >> 2] = $39; //@line 26447
   sp = STACKTOP; //@line 26448
   return;
  }
  ___async_unwind = 0; //@line 26451
  HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 26452
  $43 = $ReallocAsyncCtx14 + 4 | 0; //@line 26453
  HEAP32[$43 >> 2] = $40; //@line 26454
  $44 = $ReallocAsyncCtx14 + 8 | 0; //@line 26455
  HEAP32[$44 >> 2] = $37; //@line 26456
  $45 = $ReallocAsyncCtx14 + 12 | 0; //@line 26457
  HEAP32[$45 >> 2] = $39; //@line 26458
  sp = STACKTOP; //@line 26459
  return;
 } else {
  $46 = HEAP32[$41 >> 2] | 0; //@line 26462
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 26463
  FUNCTION_TABLE_vii[$46 & 31]($37, $39); //@line 26464
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 26467
   sp = STACKTOP; //@line 26468
   return;
  }
  ___async_unwind = 0; //@line 26471
  HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 26472
  sp = STACKTOP; //@line 26473
  return;
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_193($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 5001
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5003
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5005
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5007
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5011
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5013
 $13 = $10 + 12 | 0; //@line 5014
 HEAP32[$10 >> 2] = 578; //@line 5015
 HEAP32[$10 + 4 >> 2] = 0; //@line 5017
 HEAP32[$10 + 8 >> 2] = $2; //@line 5019
 HEAP32[$13 >> 2] = 848; //@line 5020
 $14 = $2 + 1276 | 0; //@line 5021
 if (($14 | 0) == ($10 | 0)) {
  $39 = HEAP32[214] | 0; //@line 5025
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 5026
  FUNCTION_TABLE_vi[$39 & 1023]($10); //@line 5027
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 581; //@line 5030
   $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 5031
   HEAP32[$40 >> 2] = $2; //@line 5032
   $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 5033
   HEAP32[$41 >> 2] = $4; //@line 5034
   $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 5035
   HEAP32[$42 >> 2] = $6; //@line 5036
   $43 = $ReallocAsyncCtx9 + 16 | 0; //@line 5037
   HEAP32[$43 >> 2] = $10; //@line 5038
   $44 = $ReallocAsyncCtx9 + 20 | 0; //@line 5039
   HEAP32[$44 >> 2] = $12; //@line 5040
   sp = STACKTOP; //@line 5041
   return;
  }
  ___async_unwind = 0; //@line 5044
  HEAP32[$ReallocAsyncCtx9 >> 2] = 581; //@line 5045
  $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 5046
  HEAP32[$40 >> 2] = $2; //@line 5047
  $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 5048
  HEAP32[$41 >> 2] = $4; //@line 5049
  $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 5050
  HEAP32[$42 >> 2] = $6; //@line 5051
  $43 = $ReallocAsyncCtx9 + 16 | 0; //@line 5052
  HEAP32[$43 >> 2] = $10; //@line 5053
  $44 = $ReallocAsyncCtx9 + 20 | 0; //@line 5054
  HEAP32[$44 >> 2] = $12; //@line 5055
  sp = STACKTOP; //@line 5056
  return;
 }
 $16 = $2 + 1288 | 0; //@line 5059
 $17 = HEAP32[$16 >> 2] | 0; //@line 5060
 if (!$17) {
  $30 = HEAP32[213] | 0; //@line 5064
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 5065
  FUNCTION_TABLE_vii[$30 & 31]($14, $10); //@line 5066
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 580; //@line 5069
   $31 = $ReallocAsyncCtx8 + 4 | 0; //@line 5070
   HEAP32[$31 >> 2] = $2; //@line 5071
   $32 = $ReallocAsyncCtx8 + 8 | 0; //@line 5072
   HEAP32[$32 >> 2] = $4; //@line 5073
   $33 = $ReallocAsyncCtx8 + 12 | 0; //@line 5074
   HEAP32[$33 >> 2] = $6; //@line 5075
   $34 = $ReallocAsyncCtx8 + 16 | 0; //@line 5076
   HEAP32[$34 >> 2] = $13; //@line 5077
   $35 = $ReallocAsyncCtx8 + 20 | 0; //@line 5078
   HEAP32[$35 >> 2] = $16; //@line 5079
   $36 = $ReallocAsyncCtx8 + 24 | 0; //@line 5080
   HEAP32[$36 >> 2] = $10; //@line 5081
   $37 = $ReallocAsyncCtx8 + 28 | 0; //@line 5082
   HEAP32[$37 >> 2] = $12; //@line 5083
   sp = STACKTOP; //@line 5084
   return;
  }
  ___async_unwind = 0; //@line 5087
  HEAP32[$ReallocAsyncCtx8 >> 2] = 580; //@line 5088
  $31 = $ReallocAsyncCtx8 + 4 | 0; //@line 5089
  HEAP32[$31 >> 2] = $2; //@line 5090
  $32 = $ReallocAsyncCtx8 + 8 | 0; //@line 5091
  HEAP32[$32 >> 2] = $4; //@line 5092
  $33 = $ReallocAsyncCtx8 + 12 | 0; //@line 5093
  HEAP32[$33 >> 2] = $6; //@line 5094
  $34 = $ReallocAsyncCtx8 + 16 | 0; //@line 5095
  HEAP32[$34 >> 2] = $13; //@line 5096
  $35 = $ReallocAsyncCtx8 + 20 | 0; //@line 5097
  HEAP32[$35 >> 2] = $16; //@line 5098
  $36 = $ReallocAsyncCtx8 + 24 | 0; //@line 5099
  HEAP32[$36 >> 2] = $10; //@line 5100
  $37 = $ReallocAsyncCtx8 + 28 | 0; //@line 5101
  HEAP32[$37 >> 2] = $12; //@line 5102
  sp = STACKTOP; //@line 5103
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 5107
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 5108
  FUNCTION_TABLE_vi[$20 & 1023]($14); //@line 5109
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 579; //@line 5112
   $21 = $ReallocAsyncCtx7 + 4 | 0; //@line 5113
   HEAP32[$21 >> 2] = $2; //@line 5114
   $22 = $ReallocAsyncCtx7 + 8 | 0; //@line 5115
   HEAP32[$22 >> 2] = $4; //@line 5116
   $23 = $ReallocAsyncCtx7 + 12 | 0; //@line 5117
   HEAP32[$23 >> 2] = $13; //@line 5118
   $24 = $ReallocAsyncCtx7 + 16 | 0; //@line 5119
   HEAP32[$24 >> 2] = $6; //@line 5120
   $25 = $ReallocAsyncCtx7 + 20 | 0; //@line 5121
   HEAP32[$25 >> 2] = $16; //@line 5122
   $26 = $ReallocAsyncCtx7 + 24 | 0; //@line 5123
   HEAP32[$26 >> 2] = $10; //@line 5124
   $27 = $ReallocAsyncCtx7 + 28 | 0; //@line 5125
   HEAP32[$27 >> 2] = $12; //@line 5126
   $28 = $ReallocAsyncCtx7 + 32 | 0; //@line 5127
   HEAP32[$28 >> 2] = $14; //@line 5128
   sp = STACKTOP; //@line 5129
   return;
  }
  ___async_unwind = 0; //@line 5132
  HEAP32[$ReallocAsyncCtx7 >> 2] = 579; //@line 5133
  $21 = $ReallocAsyncCtx7 + 4 | 0; //@line 5134
  HEAP32[$21 >> 2] = $2; //@line 5135
  $22 = $ReallocAsyncCtx7 + 8 | 0; //@line 5136
  HEAP32[$22 >> 2] = $4; //@line 5137
  $23 = $ReallocAsyncCtx7 + 12 | 0; //@line 5138
  HEAP32[$23 >> 2] = $13; //@line 5139
  $24 = $ReallocAsyncCtx7 + 16 | 0; //@line 5140
  HEAP32[$24 >> 2] = $6; //@line 5141
  $25 = $ReallocAsyncCtx7 + 20 | 0; //@line 5142
  HEAP32[$25 >> 2] = $16; //@line 5143
  $26 = $ReallocAsyncCtx7 + 24 | 0; //@line 5144
  HEAP32[$26 >> 2] = $10; //@line 5145
  $27 = $ReallocAsyncCtx7 + 28 | 0; //@line 5146
  HEAP32[$27 >> 2] = $12; //@line 5147
  $28 = $ReallocAsyncCtx7 + 32 | 0; //@line 5148
  HEAP32[$28 >> 2] = $14; //@line 5149
  sp = STACKTOP; //@line 5150
  return;
 }
}
function _mbedtls_gcm_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$061 = 0, $$163 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $75 = 0, $8 = 0, $84 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9594
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9596
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9598
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9600
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9602
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9604
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9606
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9608
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9610
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9612
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9614
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9616
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9618
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 9620
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 9622
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 9624
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 9626
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9628
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 9631
  $84 = ___async_retval; //@line 9632
  HEAP32[$84 >> 2] = $$0; //@line 9633
  return;
 }
 if ($2 | 0) {
  $$163 = 0; //@line 9638
  do {
   $67 = $8 + 376 + $$163 | 0; //@line 9642
   $68 = $14 + $$163 | 0; //@line 9643
   if (!(HEAP32[$18 >> 2] | 0)) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 9648
   }
   $75 = HEAP8[$68 >> 0] ^ HEAP8[$20 + $$163 >> 0]; //@line 9653
   HEAP8[$16 + $$163 >> 0] = $75; //@line 9655
   if ((HEAP32[$18 >> 2] | 0) == 1) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 9661
   }
   $$163 = $$163 + 1 | 0; //@line 9663
  } while ($$163 >>> 0 < $2 >>> 0);
 }
 _gcm_mult($8, $10, $10); //@line 9672
 $35 = $12 - $2 | 0; //@line 9673
 $51 = $14 + $2 | 0; //@line 9674
 $53 = $16 + $2 | 0; //@line 9675
 if (!$35) {
  $$0 = 0; //@line 9678
  $84 = ___async_retval; //@line 9679
  HEAP32[$84 >> 2] = $$0; //@line 9680
  return;
 }
 $36 = $35 >>> 0 < 16 ? $35 : 16; //@line 9684
 $$061 = 16; //@line 9685
 do {
  if ($$061 >>> 0 <= 12) {
   break;
  }
  $$061 = $$061 + -1 | 0; //@line 9691
  $39 = $8 + 360 + $$061 | 0; //@line 9692
  $41 = (HEAP8[$39 >> 0] | 0) + 1 << 24 >> 24; //@line 9694
  HEAP8[$39 >> 0] = $41; //@line 9695
 } while (!($41 << 24 >> 24));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 9703
 $43 = _mbedtls_cipher_update($28, $30, 16, $6, $32) | 0; //@line 9704
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 699; //@line 9707
  $44 = $ReallocAsyncCtx + 4 | 0; //@line 9708
  HEAP32[$44 >> 2] = $36; //@line 9709
  $45 = $ReallocAsyncCtx + 8 | 0; //@line 9710
  HEAP32[$45 >> 2] = $4; //@line 9711
  $46 = $ReallocAsyncCtx + 12 | 0; //@line 9712
  HEAP32[$46 >> 2] = $6; //@line 9713
  $47 = $ReallocAsyncCtx + 16 | 0; //@line 9714
  HEAP32[$47 >> 2] = $8; //@line 9715
  $48 = $ReallocAsyncCtx + 20 | 0; //@line 9716
  HEAP32[$48 >> 2] = $10; //@line 9717
  $49 = $ReallocAsyncCtx + 24 | 0; //@line 9718
  HEAP32[$49 >> 2] = $35; //@line 9719
  $50 = $ReallocAsyncCtx + 28 | 0; //@line 9720
  HEAP32[$50 >> 2] = $51; //@line 9721
  $52 = $ReallocAsyncCtx + 32 | 0; //@line 9722
  HEAP32[$52 >> 2] = $53; //@line 9723
  $54 = $ReallocAsyncCtx + 36 | 0; //@line 9724
  HEAP32[$54 >> 2] = $18; //@line 9725
  $55 = $ReallocAsyncCtx + 40 | 0; //@line 9726
  HEAP32[$55 >> 2] = $20; //@line 9727
  $56 = $ReallocAsyncCtx + 44 | 0; //@line 9728
  HEAP32[$56 >> 2] = $22; //@line 9729
  $57 = $ReallocAsyncCtx + 48 | 0; //@line 9730
  HEAP32[$57 >> 2] = $24; //@line 9731
  $58 = $ReallocAsyncCtx + 52 | 0; //@line 9732
  HEAP32[$58 >> 2] = $26; //@line 9733
  $59 = $ReallocAsyncCtx + 56 | 0; //@line 9734
  HEAP32[$59 >> 2] = $28; //@line 9735
  $60 = $ReallocAsyncCtx + 60 | 0; //@line 9736
  HEAP32[$60 >> 2] = $30; //@line 9737
  $61 = $ReallocAsyncCtx + 64 | 0; //@line 9738
  HEAP32[$61 >> 2] = $32; //@line 9739
  sp = STACKTOP; //@line 9740
  return;
 }
 HEAP32[___async_retval >> 2] = $43; //@line 9744
 ___async_unwind = 0; //@line 9745
 HEAP32[$ReallocAsyncCtx >> 2] = 699; //@line 9746
 $44 = $ReallocAsyncCtx + 4 | 0; //@line 9747
 HEAP32[$44 >> 2] = $36; //@line 9748
 $45 = $ReallocAsyncCtx + 8 | 0; //@line 9749
 HEAP32[$45 >> 2] = $4; //@line 9750
 $46 = $ReallocAsyncCtx + 12 | 0; //@line 9751
 HEAP32[$46 >> 2] = $6; //@line 9752
 $47 = $ReallocAsyncCtx + 16 | 0; //@line 9753
 HEAP32[$47 >> 2] = $8; //@line 9754
 $48 = $ReallocAsyncCtx + 20 | 0; //@line 9755
 HEAP32[$48 >> 2] = $10; //@line 9756
 $49 = $ReallocAsyncCtx + 24 | 0; //@line 9757
 HEAP32[$49 >> 2] = $35; //@line 9758
 $50 = $ReallocAsyncCtx + 28 | 0; //@line 9759
 HEAP32[$50 >> 2] = $51; //@line 9760
 $52 = $ReallocAsyncCtx + 32 | 0; //@line 9761
 HEAP32[$52 >> 2] = $53; //@line 9762
 $54 = $ReallocAsyncCtx + 36 | 0; //@line 9763
 HEAP32[$54 >> 2] = $18; //@line 9764
 $55 = $ReallocAsyncCtx + 40 | 0; //@line 9765
 HEAP32[$55 >> 2] = $20; //@line 9766
 $56 = $ReallocAsyncCtx + 44 | 0; //@line 9767
 HEAP32[$56 >> 2] = $22; //@line 9768
 $57 = $ReallocAsyncCtx + 48 | 0; //@line 9769
 HEAP32[$57 >> 2] = $24; //@line 9770
 $58 = $ReallocAsyncCtx + 52 | 0; //@line 9771
 HEAP32[$58 >> 2] = $26; //@line 9772
 $59 = $ReallocAsyncCtx + 56 | 0; //@line 9773
 HEAP32[$59 >> 2] = $28; //@line 9774
 $60 = $ReallocAsyncCtx + 60 | 0; //@line 9775
 HEAP32[$60 >> 2] = $30; //@line 9776
 $61 = $ReallocAsyncCtx + 64 | 0; //@line 9777
 HEAP32[$61 >> 2] = $32; //@line 9778
 sp = STACKTOP; //@line 9779
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_70($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $30 = 0, $32 = 0, $37 = 0, $38 = 0, $4 = 0, $52 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, sp = 0;
 sp = STACKTOP; //@line 31191
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31193
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31195
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31197
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31199
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31201
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 31203
 $14 = HEAP8[$0 + 25 >> 0] & 1; //@line 31206
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 31208
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 31210
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 31212
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 31214
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 31216
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 31218
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 31222
 HEAP32[(__ZN11LoRaMacMlme14get_indicationEv(HEAP32[$0 + 52 >> 2] | 0) | 0) >> 2] = 4; //@line 31224
 $32 = $6 + 944 | 0; //@line 31225
 HEAP8[$32 >> 0] = HEAP8[$32 >> 0] | 16; //@line 31228
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($30); //@line 31229
 $37 = $20 & 255; //@line 31232
 $38 = $6 + 638 | 0; //@line 31233
 if (__Z15decrypt_payloadPKhtS0_jhjPh($16 + $18 | 0, $37, $22, $24, 1, $26, $38) | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 31239
 }
 if ($14) {
  $$3$off0204 = 6; //@line 31242
 } else {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 12 >> 2] = $38; //@line 31246
  HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 16 >> 1] = $37; //@line 31249
  HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 18 >> 0] = 1; //@line 31252
  $52 = (__ZN11LoRaMacMcps16get_confirmationEv($10) | 0) + 10 | 0; //@line 31256
  if ($12 & 32) {
   HEAP8[$52 >> 0] = 1; //@line 31258
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 28 >> 0] = 1; //@line 31261
   $55 = HEAP32[$8 >> 2] | 0; //@line 31262
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 31264
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($55, $6 + 1076 | 0); //@line 31265
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 410; //@line 31268
    $57 = $ReallocAsyncCtx23 + 4 | 0; //@line 31269
    HEAP32[$57 >> 2] = $6; //@line 31270
    $58 = $ReallocAsyncCtx23 + 8 | 0; //@line 31271
    HEAP32[$58 >> 2] = $8; //@line 31272
    $59 = $ReallocAsyncCtx23 + 12 | 0; //@line 31273
    HEAP32[$59 >> 2] = $2; //@line 31274
    $60 = $ReallocAsyncCtx23 + 16 | 0; //@line 31275
    HEAP32[$60 >> 2] = $4; //@line 31276
    sp = STACKTOP; //@line 31277
    return;
   }
   ___async_unwind = 0; //@line 31280
   HEAP32[$ReallocAsyncCtx23 >> 2] = 410; //@line 31281
   $57 = $ReallocAsyncCtx23 + 4 | 0; //@line 31282
   HEAP32[$57 >> 2] = $6; //@line 31283
   $58 = $ReallocAsyncCtx23 + 8 | 0; //@line 31284
   HEAP32[$58 >> 2] = $8; //@line 31285
   $59 = $ReallocAsyncCtx23 + 12 | 0; //@line 31286
   HEAP32[$59 >> 2] = $2; //@line 31287
   $60 = $ReallocAsyncCtx23 + 16 | 0; //@line 31288
   HEAP32[$60 >> 2] = $4; //@line 31289
   sp = STACKTOP; //@line 31290
   return;
  }
  HEAP8[$52 >> 0] = 0; //@line 31293
  if ((HEAPU8[$6 + 895 >> 0] | 0) > (HEAPU8[$6 + 894 >> 0] | 0)) {
   $66 = HEAP32[$8 >> 2] | 0; //@line 31300
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 31302
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($66, $6 + 1076 | 0); //@line 31303
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 411; //@line 31306
    $68 = $ReallocAsyncCtx22 + 4 | 0; //@line 31307
    HEAP32[$68 >> 2] = $6; //@line 31308
    $69 = $ReallocAsyncCtx22 + 8 | 0; //@line 31309
    HEAP32[$69 >> 2] = $8; //@line 31310
    $70 = $ReallocAsyncCtx22 + 12 | 0; //@line 31311
    HEAP32[$70 >> 2] = $2; //@line 31312
    $71 = $ReallocAsyncCtx22 + 16 | 0; //@line 31313
    HEAP32[$71 >> 2] = $4; //@line 31314
    sp = STACKTOP; //@line 31315
    return;
   }
   ___async_unwind = 0; //@line 31318
   HEAP32[$ReallocAsyncCtx22 >> 2] = 411; //@line 31319
   $68 = $ReallocAsyncCtx22 + 4 | 0; //@line 31320
   HEAP32[$68 >> 2] = $6; //@line 31321
   $69 = $ReallocAsyncCtx22 + 8 | 0; //@line 31322
   HEAP32[$69 >> 2] = $8; //@line 31323
   $70 = $ReallocAsyncCtx22 + 12 | 0; //@line 31324
   HEAP32[$70 >> 2] = $2; //@line 31325
   $71 = $ReallocAsyncCtx22 + 16 | 0; //@line 31326
   HEAP32[$71 >> 2] = $4; //@line 31327
   sp = STACKTOP; //@line 31328
   return;
  } else {
   $$3$off0204 = 2; //@line 31331
  }
 }
 $72 = $6 + 944 | 0; //@line 31334
 HEAP8[$72 >> 0] = $$3$off0204 | HEAP8[$72 >> 0] & -7; //@line 31338
 $76 = $6 + 944 | 0; //@line 31339
 HEAP8[$76 >> 0] = HEAP8[$76 >> 0] | 32; //@line 31342
 $79 = HEAP32[$8 >> 2] | 0; //@line 31343
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 31345
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($79, $6 + 996 | 0, 1); //@line 31346
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 31349
  $81 = $ReallocAsyncCtx17 + 4 | 0; //@line 31350
  HEAP32[$81 >> 2] = $2; //@line 31351
  $82 = $ReallocAsyncCtx17 + 8 | 0; //@line 31352
  HEAP32[$82 >> 2] = $4; //@line 31353
  sp = STACKTOP; //@line 31354
  return;
 }
 ___async_unwind = 0; //@line 31357
 HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 31358
 $81 = $ReallocAsyncCtx17 + 4 | 0; //@line 31359
 HEAP32[$81 >> 2] = $2; //@line 31360
 $82 = $ReallocAsyncCtx17 + 8 | 0; //@line 31361
 HEAP32[$82 >> 2] = $4; //@line 31362
 sp = STACKTOP; //@line 31363
 return;
}
function __ZN7LoRaMac17on_radio_rx_errorEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $14 = 0, $15 = 0, $25 = 0, $29 = 0, $36 = 0, $40 = 0, $44 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14238
 STACKTOP = STACKTOP + 32 | 0; //@line 14239
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 14239
 $$byval_copy = sp + 24 | 0; //@line 14240
 $vararg_buffer3 = sp + 16 | 0; //@line 14241
 $vararg_buffer1 = sp + 8 | 0; //@line 14242
 _printf(13258, sp) | 0; //@line 14244
 _printf(13486, $vararg_buffer1) | 0; //@line 14245
 $AsyncCtx9 = _emscripten_alloc_async_context(28, sp) | 0; //@line 14246
 _putchar(10) | 0; //@line 14247
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 437; //@line 14250
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 14252
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer1; //@line 14254
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer3; //@line 14256
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer3; //@line 14258
  HEAP32[$AsyncCtx9 + 20 >> 2] = $$byval_copy; //@line 14260
  HEAP32[$AsyncCtx9 + 24 >> 2] = $$byval_copy; //@line 14262
  sp = STACKTOP; //@line 14263
  STACKTOP = sp; //@line 14264
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 14266
 do {
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   _printf(13258, $vararg_buffer3) | 0; //@line 14272
   _printf(13285, $$byval_copy) | 0; //@line 14273
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14274
   _putchar(10) | 0; //@line 14275
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 438; //@line 14278
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14280
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 14282
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 14284
    sp = STACKTOP; //@line 14285
    STACKTOP = sp; //@line 14286
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14288
   $14 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14290
   HEAP32[$vararg_buffer1 >> 2] = 366; //@line 14291
   HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 14293
   $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14294
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 14295
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 14295
   $15 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($14, $0, $$byval_copy) | 0; //@line 14296
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 439; //@line 14299
    HEAP32[$AsyncCtx16 + 4 >> 2] = $vararg_buffer1; //@line 14301
    HEAP32[$AsyncCtx16 + 8 >> 2] = $0; //@line 14303
    sp = STACKTOP; //@line 14304
    STACKTOP = sp; //@line 14305
    return;
   }
   _emscripten_free_async_context($AsyncCtx16 | 0); //@line 14307
   do {
    if (!$15) {
     $AsyncCtx24 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14311
     _mbed_assert_internal(13142, 13151, 217); //@line 14312
     if (___async) {
      HEAP32[$AsyncCtx24 >> 2] = 440; //@line 14315
      HEAP32[$AsyncCtx24 + 4 >> 2] = $vararg_buffer1; //@line 14317
      HEAP32[$AsyncCtx24 + 8 >> 2] = $0; //@line 14319
      sp = STACKTOP; //@line 14320
      STACKTOP = sp; //@line 14321
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx24 | 0); //@line 14323
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 14329
   if (!(HEAP8[$0 + 373 >> 0] | 0)) {
    label = 24; //@line 14334
   } else {
    label = 23; //@line 14336
   }
  } else {
   $25 = HEAP32[$0 >> 2] | 0; //@line 14339
   $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14340
   __ZN7LoRaPHY18put_radio_to_sleepEv($25); //@line 14341
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 441; //@line 14344
    HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 14346
    sp = STACKTOP; //@line 14347
    STACKTOP = sp; //@line 14348
    return;
   }
   _emscripten_free_async_context($AsyncCtx13 | 0); //@line 14350
   $29 = (HEAP8[$0 + 373 >> 0] | 0) != 0; //@line 14356
   if (HEAP32[$0 + 364 >> 2] | 0) {
    if ($29) {
     label = 23; //@line 14359
     break;
    } else {
     label = 24; //@line 14362
     break;
    }
   }
   if ($29) {
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 5; //@line 14370
   }
   HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 5; //@line 14375
   $36 = $0 + 356 | 0; //@line 14376
   $40 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$36 >> 2] | 0, HEAP32[$0 + 980 >> 2] | 0) | 0; //@line 14380
   if ($40 >>> 0 < (HEAP32[$0 + 976 >> 2] | 0) >>> 0) {
    STACKTOP = sp; //@line 14385
    return;
   }
   $44 = HEAP32[$36 >> 2] | 0; //@line 14387
   $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14389
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($44, $0 + 1056 | 0); //@line 14390
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 442; //@line 14393
    HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 14395
    sp = STACKTOP; //@line 14396
    STACKTOP = sp; //@line 14397
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 14399
    break;
   }
  }
 } while (0);
 if ((label | 0) == 23) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 14408
  label = 24; //@line 14409
 }
 if ((label | 0) == 24) {
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 14415
 }
 $53 = $0 + 944 | 0; //@line 14417
 HEAP8[$53 >> 0] = HEAP8[$53 >> 0] | 32; //@line 14420
 STACKTOP = sp; //@line 14421
 return;
}
function _initialize__async_cb_478($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 35035
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35037
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35039
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35041
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 35043
 $8 = HEAP32[$AsyncRetVal >> 2] | 0; //@line 35044
 if (!$8) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 35047
  _mbed_assert_internal(14804, 14806, 41); //@line 35048
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 704; //@line 35051
   $10 = $ReallocAsyncCtx7 + 4 | 0; //@line 35052
   HEAP32[$10 >> 2] = $2; //@line 35053
   $11 = $ReallocAsyncCtx7 + 8 | 0; //@line 35054
   HEAP32[$11 >> 2] = $6; //@line 35055
   $12 = $ReallocAsyncCtx7 + 12 | 0; //@line 35056
   HEAP32[$12 >> 2] = $4; //@line 35057
   $13 = $ReallocAsyncCtx7 + 16 | 0; //@line 35058
   HEAP32[$13 >> 2] = $AsyncRetVal; //@line 35059
   sp = STACKTOP; //@line 35060
   return;
  }
  ___async_unwind = 0; //@line 35063
  HEAP32[$ReallocAsyncCtx7 >> 2] = 704; //@line 35064
  $10 = $ReallocAsyncCtx7 + 4 | 0; //@line 35065
  HEAP32[$10 >> 2] = $2; //@line 35066
  $11 = $ReallocAsyncCtx7 + 8 | 0; //@line 35067
  HEAP32[$11 >> 2] = $6; //@line 35068
  $12 = $ReallocAsyncCtx7 + 12 | 0; //@line 35069
  HEAP32[$12 >> 2] = $4; //@line 35070
  $13 = $ReallocAsyncCtx7 + 16 | 0; //@line 35071
  HEAP32[$13 >> 2] = $AsyncRetVal; //@line 35072
  sp = STACKTOP; //@line 35073
  return;
 }
 $15 = HEAP32[$AsyncRetVal + 4 >> 2] | 0; //@line 35077
 if (($15 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 35081
  _mbed_assert_internal(14804, 14806, 47); //@line 35082
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 705; //@line 35085
   $17 = $ReallocAsyncCtx6 + 4 | 0; //@line 35086
   HEAP32[$17 >> 2] = $8; //@line 35087
   $18 = $ReallocAsyncCtx6 + 8 | 0; //@line 35088
   HEAP32[$18 >> 2] = $2; //@line 35089
   $19 = $ReallocAsyncCtx6 + 12 | 0; //@line 35090
   HEAP32[$19 >> 2] = $4; //@line 35091
   $20 = $ReallocAsyncCtx6 + 16 | 0; //@line 35092
   HEAP32[$20 >> 2] = $6; //@line 35093
   sp = STACKTOP; //@line 35094
   return;
  }
  ___async_unwind = 0; //@line 35097
  HEAP32[$ReallocAsyncCtx6 >> 2] = 705; //@line 35098
  $17 = $ReallocAsyncCtx6 + 4 | 0; //@line 35099
  HEAP32[$17 >> 2] = $8; //@line 35100
  $18 = $ReallocAsyncCtx6 + 8 | 0; //@line 35101
  HEAP32[$18 >> 2] = $2; //@line 35102
  $19 = $ReallocAsyncCtx6 + 12 | 0; //@line 35103
  HEAP32[$19 >> 2] = $4; //@line 35104
  $20 = $ReallocAsyncCtx6 + 16 | 0; //@line 35105
  HEAP32[$20 >> 2] = $6; //@line 35106
  sp = STACKTOP; //@line 35107
  return;
 } else {
  $22 = 7 << $15 + -4; //@line 35111
  $23 = ___muldi3($22 | 0, 0, 1e6, 0) | 0; //@line 35112
  $24 = tempRet0; //@line 35113
  $25 = _i64Add($8 | 0, 0, -1, -1) | 0; //@line 35114
  $27 = _i64Add($25 | 0, tempRet0 | 0, $23 | 0, $24 | 0) | 0; //@line 35116
  $29 = ___udivdi3($27 | 0, tempRet0 | 0, $8 | 0, 0) | 0; //@line 35118
  $30 = tempRet0; //@line 35119
  $31 = HEAP32[$2 >> 2] | 0; //@line 35120
  HEAP32[$31 >> 2] = 0; //@line 35121
  HEAP32[$31 + 4 >> 2] = 0; //@line 35123
  $35 = HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0; //@line 35126
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 35127
  $36 = FUNCTION_TABLE_i[$35 & 7]() | 0; //@line 35128
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 706; //@line 35131
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 35132
   HEAP32[$37 >> 2] = $2; //@line 35133
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 35134
   HEAP32[$38 >> 2] = $8; //@line 35135
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 35136
   HEAP32[$39 >> 2] = $15; //@line 35137
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 35138
   HEAP32[$40 >> 2] = $22; //@line 35139
   $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 35140
   $42 = $41; //@line 35141
   $43 = $42; //@line 35142
   HEAP32[$43 >> 2] = $29; //@line 35143
   $44 = $42 + 4 | 0; //@line 35144
   $45 = $44; //@line 35145
   HEAP32[$45 >> 2] = $30; //@line 35146
   $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 35147
   HEAP32[$46 >> 2] = $4; //@line 35148
   $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 35149
   HEAP32[$47 >> 2] = $6; //@line 35150
   sp = STACKTOP; //@line 35151
   return;
  }
  HEAP32[___async_retval >> 2] = $36; //@line 35155
  ___async_unwind = 0; //@line 35156
  HEAP32[$ReallocAsyncCtx3 >> 2] = 706; //@line 35157
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 35158
  HEAP32[$37 >> 2] = $2; //@line 35159
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 35160
  HEAP32[$38 >> 2] = $8; //@line 35161
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 35162
  HEAP32[$39 >> 2] = $15; //@line 35163
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 35164
  HEAP32[$40 >> 2] = $22; //@line 35165
  $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 35166
  $42 = $41; //@line 35167
  $43 = $42; //@line 35168
  HEAP32[$43 >> 2] = $29; //@line 35169
  $44 = $42 + 4 | 0; //@line 35170
  $45 = $44; //@line 35171
  HEAP32[$45 >> 2] = $30; //@line 35172
  $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 35173
  HEAP32[$46 >> 2] = $4; //@line 35174
  $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 35175
  HEAP32[$47 >> 2] = $6; //@line 35176
  sp = STACKTOP; //@line 35177
  return;
 }
}
function _mbedtls_cipher_free($0) {
 $0 = $0 | 0;
 var $101 = 0, $105 = 0, $109 = 0, $113 = 0, $2 = 0, $3 = 0, $42 = 0, $48 = 0, $53 = 0, $57 = 0, $61 = 0, $65 = 0, $69 = 0, $73 = 0, $77 = 0, $81 = 0, $85 = 0, $89 = 0, $93 = 0, $97 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1871
 if (!$0) {
  return;
 }
 $2 = $0 + 64 | 0; //@line 1876
 $3 = HEAP32[$2 >> 2] | 0; //@line 1877
 if ($3 | 0) {
  HEAP8[$3 >> 0] = 0; //@line 1881
  HEAP8[$3 + 1 >> 0] = 0; //@line 1883
  HEAP8[$3 + 2 >> 0] = 0; //@line 1885
  HEAP8[$3 + 3 >> 0] = 0; //@line 1887
  HEAP8[$3 + 4 >> 0] = 0; //@line 1889
  HEAP8[$3 + 5 >> 0] = 0; //@line 1891
  HEAP8[$3 + 6 >> 0] = 0; //@line 1893
  HEAP8[$3 + 7 >> 0] = 0; //@line 1895
  HEAP8[$3 + 8 >> 0] = 0; //@line 1897
  HEAP8[$3 + 9 >> 0] = 0; //@line 1899
  HEAP8[$3 + 10 >> 0] = 0; //@line 1901
  HEAP8[$3 + 11 >> 0] = 0; //@line 1903
  HEAP8[$3 + 12 >> 0] = 0; //@line 1905
  HEAP8[$3 + 13 >> 0] = 0; //@line 1907
  HEAP8[$3 + 14 >> 0] = 0; //@line 1909
  HEAP8[$3 + 15 >> 0] = 0; //@line 1911
  HEAP8[$3 + 16 >> 0] = 0; //@line 1913
  HEAP8[$3 + 17 >> 0] = 0; //@line 1915
  HEAP8[$3 + 18 >> 0] = 0; //@line 1917
  HEAP8[$3 + 19 >> 0] = 0; //@line 1919
  HEAP8[$3 + 20 >> 0] = 0; //@line 1921
  HEAP8[$3 + 21 >> 0] = 0; //@line 1923
  HEAP8[$3 + 22 >> 0] = 0; //@line 1925
  HEAP8[$3 + 23 >> 0] = 0; //@line 1927
  HEAP8[$3 + 24 >> 0] = 0; //@line 1929
  HEAP8[$3 + 25 >> 0] = 0; //@line 1931
  HEAP8[$3 + 26 >> 0] = 0; //@line 1933
  HEAP8[$3 + 27 >> 0] = 0; //@line 1935
  HEAP8[$3 + 28 >> 0] = 0; //@line 1937
  HEAP8[$3 + 29 >> 0] = 0; //@line 1939
  HEAP8[$3 + 30 >> 0] = 0; //@line 1941
  HEAP8[$3 + 31 >> 0] = 0; //@line 1943
  HEAP8[$3 + 32 >> 0] = 0; //@line 1945
  HEAP8[$3 + 33 >> 0] = 0; //@line 1947
  HEAP8[$3 + 34 >> 0] = 0; //@line 1949
  HEAP8[$3 + 35 >> 0] = 0; //@line 1950
  _free(HEAP32[$2 >> 2] | 0); //@line 1952
 }
 $42 = HEAP32[$0 + 60 >> 2] | 0; //@line 1955
 do {
  if ($42 | 0) {
   $48 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 24 >> 2] | 0; //@line 1963
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1964
   FUNCTION_TABLE_vi[$48 & 1023]($42); //@line 1965
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 677; //@line 1968
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1970
    sp = STACKTOP; //@line 1971
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1974
    break;
   }
  }
 } while (0);
 HEAP8[$0 >> 0] = 0; //@line 1980
 HEAP8[$0 + 1 >> 0] = 0; //@line 1982
 HEAP8[$0 + 2 >> 0] = 0; //@line 1984
 $53 = $0 + 4 | 0; //@line 1985
 HEAP8[$0 + 3 >> 0] = 0; //@line 1986
 HEAP8[$53 >> 0] = 0; //@line 1988
 HEAP8[$53 + 1 >> 0] = 0; //@line 1990
 HEAP8[$53 + 2 >> 0] = 0; //@line 1992
 $57 = $53 + 4 | 0; //@line 1993
 HEAP8[$53 + 3 >> 0] = 0; //@line 1994
 HEAP8[$57 >> 0] = 0; //@line 1996
 HEAP8[$57 + 1 >> 0] = 0; //@line 1998
 HEAP8[$57 + 2 >> 0] = 0; //@line 2000
 $61 = $53 + 8 | 0; //@line 2001
 HEAP8[$57 + 3 >> 0] = 0; //@line 2002
 HEAP8[$61 >> 0] = 0; //@line 2004
 HEAP8[$61 + 1 >> 0] = 0; //@line 2006
 HEAP8[$61 + 2 >> 0] = 0; //@line 2008
 $65 = $53 + 12 | 0; //@line 2009
 HEAP8[$61 + 3 >> 0] = 0; //@line 2010
 HEAP8[$65 >> 0] = 0; //@line 2012
 HEAP8[$65 + 1 >> 0] = 0; //@line 2014
 HEAP8[$65 + 2 >> 0] = 0; //@line 2016
 $69 = $53 + 16 | 0; //@line 2017
 HEAP8[$65 + 3 >> 0] = 0; //@line 2018
 HEAP8[$69 >> 0] = 0; //@line 2020
 HEAP8[$69 + 1 >> 0] = 0; //@line 2022
 HEAP8[$69 + 2 >> 0] = 0; //@line 2024
 $73 = $53 + 20 | 0; //@line 2025
 HEAP8[$69 + 3 >> 0] = 0; //@line 2026
 HEAP8[$73 >> 0] = 0; //@line 2028
 HEAP8[$73 + 1 >> 0] = 0; //@line 2030
 HEAP8[$73 + 2 >> 0] = 0; //@line 2032
 $77 = $53 + 24 | 0; //@line 2033
 HEAP8[$73 + 3 >> 0] = 0; //@line 2034
 HEAP8[$77 >> 0] = 0; //@line 2036
 HEAP8[$77 + 1 >> 0] = 0; //@line 2038
 HEAP8[$77 + 2 >> 0] = 0; //@line 2040
 $81 = $53 + 28 | 0; //@line 2041
 HEAP8[$77 + 3 >> 0] = 0; //@line 2042
 HEAP8[$81 >> 0] = 0; //@line 2044
 HEAP8[$81 + 1 >> 0] = 0; //@line 2046
 HEAP8[$81 + 2 >> 0] = 0; //@line 2048
 $85 = $53 + 32 | 0; //@line 2049
 HEAP8[$81 + 3 >> 0] = 0; //@line 2050
 HEAP8[$85 >> 0] = 0; //@line 2052
 HEAP8[$85 + 1 >> 0] = 0; //@line 2054
 HEAP8[$85 + 2 >> 0] = 0; //@line 2056
 $89 = $53 + 36 | 0; //@line 2057
 HEAP8[$85 + 3 >> 0] = 0; //@line 2058
 HEAP8[$89 >> 0] = 0; //@line 2060
 HEAP8[$89 + 1 >> 0] = 0; //@line 2062
 HEAP8[$89 + 2 >> 0] = 0; //@line 2064
 $93 = $53 + 40 | 0; //@line 2065
 HEAP8[$89 + 3 >> 0] = 0; //@line 2066
 HEAP8[$93 >> 0] = 0; //@line 2068
 HEAP8[$93 + 1 >> 0] = 0; //@line 2070
 HEAP8[$93 + 2 >> 0] = 0; //@line 2072
 $97 = $53 + 44 | 0; //@line 2073
 HEAP8[$93 + 3 >> 0] = 0; //@line 2074
 HEAP8[$97 >> 0] = 0; //@line 2076
 HEAP8[$97 + 1 >> 0] = 0; //@line 2078
 HEAP8[$97 + 2 >> 0] = 0; //@line 2080
 $101 = $53 + 48 | 0; //@line 2081
 HEAP8[$97 + 3 >> 0] = 0; //@line 2082
 HEAP8[$101 >> 0] = 0; //@line 2084
 HEAP8[$101 + 1 >> 0] = 0; //@line 2086
 HEAP8[$101 + 2 >> 0] = 0; //@line 2088
 $105 = $53 + 52 | 0; //@line 2089
 HEAP8[$101 + 3 >> 0] = 0; //@line 2090
 HEAP8[$105 >> 0] = 0; //@line 2092
 HEAP8[$105 + 1 >> 0] = 0; //@line 2094
 HEAP8[$105 + 2 >> 0] = 0; //@line 2096
 $109 = $53 + 56 | 0; //@line 2097
 HEAP8[$105 + 3 >> 0] = 0; //@line 2098
 HEAP8[$109 >> 0] = 0; //@line 2100
 HEAP8[$109 + 1 >> 0] = 0; //@line 2102
 HEAP8[$109 + 2 >> 0] = 0; //@line 2104
 $113 = $53 + 60 | 0; //@line 2105
 HEAP8[$109 + 3 >> 0] = 0; //@line 2106
 HEAP8[$113 >> 0] = 0; //@line 2108
 HEAP8[$113 + 1 >> 0] = 0; //@line 2110
 HEAP8[$113 + 2 >> 0] = 0; //@line 2112
 HEAP8[$113 + 3 >> 0] = 0; //@line 2113
 return;
}
function __ZN12LoRaWANStackC2Ev($0) {
 $0 = $0 | 0;
 var $$pre$i$i45 = 0, $$pre$i$i59 = 0, $$pre$phiZ2D = 0, $$pre106 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $4 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 6246
 STACKTOP = STACKTOP + 16 | 0; //@line 6247
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6247
 $1 = sp; //@line 6248
 __ZN18LoRaWANTimeHandlerC2Ev($0); //@line 6249
 __ZN7LoRaMacC2ER18LoRaWANTimeHandler($0 + 4 | 0, $0); //@line 6251
 __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0 + 1336 | 0, $0); //@line 6253
 $4 = $0 + 2284 | 0; //@line 6254
 $5 = $0 + 1828 | 0; //@line 6255
 dest = $5 + 16 | 0; //@line 6257
 stop = dest + 88 | 0; //@line 6257
 do {
  HEAP32[dest >> 2] = 0; //@line 6257
  dest = dest + 4 | 0; //@line 6257
 } while ((dest | 0) < (stop | 0));
 HEAP8[$4 >> 0] = 1; //@line 6258
 HEAP8[$0 + 2286 >> 0] = 1; //@line 6261
 HEAP32[$0 + 2288 >> 2] = 0; //@line 6263
 HEAP8[$0 + 2285 >> 0] = 15; //@line 6264
 _memset($0 + 1932 | 0, 0, 352) | 0; //@line 6266
 HEAP32[$0 + 1812 >> 2] = 22; //@line 6269
 HEAP32[$0 + 1816 >> 2] = 0; //@line 6271
 HEAP32[$0 + 1820 >> 2] = $0; //@line 6273
 HEAP32[$0 + 1824 >> 2] = 800; //@line 6274
 HEAP32[$1 >> 2] = 23; //@line 6276
 HEAP32[$1 + 4 >> 2] = 0; //@line 6278
 HEAP32[$1 + 8 >> 2] = $0; //@line 6280
 HEAP32[$1 + 12 >> 2] = 812; //@line 6281
 $13 = $0 + 1840 | 0; //@line 6282
 HEAP32[$5 >> 2] = HEAP32[$1 >> 2]; //@line 6283
 HEAP32[$5 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 6283
 HEAP32[$5 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 6283
 HEAP32[$13 >> 2] = 812; //@line 6284
 $14 = $1 + 12 | 0; //@line 6285
 HEAP32[$1 >> 2] = 24; //@line 6286
 HEAP32[$1 + 4 >> 2] = 0; //@line 6288
 HEAP32[$1 + 8 >> 2] = $0; //@line 6290
 HEAP32[$14 >> 2] = 824; //@line 6291
 $15 = $0 + 1844 | 0; //@line 6292
 if (($15 | 0) == ($1 | 0)) {
  $21 = 824; //@line 6295
  label = 3; //@line 6296
 } else {
  __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($15, $1); //@line 6299
  $$pre$i$i45 = HEAP32[$14 >> 2] | 0; //@line 6300
  HEAP32[$0 + 1856 >> 2] = $$pre$i$i45; //@line 6302
  if ($$pre$i$i45 | 0) {
   $21 = $$pre$i$i45; //@line 6305
   label = 3; //@line 6306
  }
 }
 do {
  if ((label | 0) == 3) {
   $22 = HEAP32[$21 + 8 >> 2] | 0; //@line 6312
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 6313
   FUNCTION_TABLE_vi[$22 & 1023]($1); //@line 6314
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 196; //@line 6317
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6319
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 6321
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 6323
    sp = STACKTOP; //@line 6324
    STACKTOP = sp; //@line 6325
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6327
    break;
   }
  }
 } while (0);
 $26 = $1 + 12 | 0; //@line 6332
 HEAP32[$1 >> 2] = 25; //@line 6333
 HEAP32[$1 + 4 >> 2] = 0; //@line 6335
 HEAP32[$1 + 8 >> 2] = $0; //@line 6337
 HEAP32[$26 >> 2] = 836; //@line 6338
 $27 = $0 + 1860 | 0; //@line 6339
 if (($27 | 0) == ($1 | 0)) {
  $48 = 836; //@line 6342
 } else {
  $29 = $0 + 1872 | 0; //@line 6344
  $30 = HEAP32[$29 >> 2] | 0; //@line 6345
  if (!$30) {
   $$pre$phiZ2D = $27; //@line 6348
   $40 = 836; //@line 6348
  } else {
   $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 6351
   $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6352
   FUNCTION_TABLE_vi[$33 & 1023]($27); //@line 6353
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 197; //@line 6356
    HEAP32[$AsyncCtx2 + 4 >> 2] = $26; //@line 6358
    HEAP32[$AsyncCtx2 + 8 >> 2] = $29; //@line 6360
    HEAP32[$AsyncCtx2 + 12 >> 2] = $27; //@line 6362
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 6364
    sp = STACKTOP; //@line 6365
    STACKTOP = sp; //@line 6366
    return;
   }
   _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6368
   $$pre106 = HEAP32[$26 >> 2] | 0; //@line 6369
   if (!$$pre106) {
    HEAP32[$29 >> 2] = 0; //@line 6372
    STACKTOP = sp; //@line 6373
    return;
   } else {
    $$pre$phiZ2D = $27; //@line 6375
    $40 = $$pre106; //@line 6375
   }
  }
  $41 = HEAP32[$40 + 4 >> 2] | 0; //@line 6379
  $AsyncCtx5 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6380
  FUNCTION_TABLE_vii[$41 & 31]($$pre$phiZ2D, $1); //@line 6381
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 198; //@line 6384
   HEAP32[$AsyncCtx5 + 4 >> 2] = $26; //@line 6386
   HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 6388
   HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 6390
   sp = STACKTOP; //@line 6391
   STACKTOP = sp; //@line 6392
   return;
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6394
  $$pre$i$i59 = HEAP32[$26 >> 2] | 0; //@line 6395
  HEAP32[$29 >> 2] = $$pre$i$i59; //@line 6397
  if (!$$pre$i$i59) {
   STACKTOP = sp; //@line 6400
   return;
  } else {
   $48 = $$pre$i$i59; //@line 6402
  }
 }
 $49 = HEAP32[$48 + 8 >> 2] | 0; //@line 6406
 $AsyncCtx8 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6407
 FUNCTION_TABLE_vi[$49 & 1023]($1); //@line 6408
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 199; //@line 6411
  HEAP32[$AsyncCtx8 + 4 >> 2] = $1; //@line 6413
  sp = STACKTOP; //@line 6414
  STACKTOP = sp; //@line 6415
  return;
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 6417
 STACKTOP = sp; //@line 6418
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_198($0) {
 $0 = $0 | 0;
 var $$pre$i$i50 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 5857
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5859
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5861
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5863
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5865
 $$pre$i$i50 = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 5870
 HEAP32[HEAP32[$0 + 24 >> 2] >> 2] = $$pre$i$i50; //@line 5872
 if ($$pre$i$i50 | 0) {
  $16 = HEAP32[$$pre$i$i50 + 8 >> 2] | 0; //@line 5876
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 5877
  FUNCTION_TABLE_vi[$16 & 1023]($4); //@line 5878
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 585; //@line 5881
   $17 = $ReallocAsyncCtx12 + 4 | 0; //@line 5882
   HEAP32[$17 >> 2] = $4; //@line 5883
   $18 = $ReallocAsyncCtx12 + 8 | 0; //@line 5884
   HEAP32[$18 >> 2] = $6; //@line 5885
   $19 = $ReallocAsyncCtx12 + 12 | 0; //@line 5886
   HEAP32[$19 >> 2] = $2; //@line 5887
   $20 = $ReallocAsyncCtx12 + 16 | 0; //@line 5888
   HEAP32[$20 >> 2] = $8; //@line 5889
   sp = STACKTOP; //@line 5890
   return;
  }
  ___async_unwind = 0; //@line 5893
  HEAP32[$ReallocAsyncCtx12 >> 2] = 585; //@line 5894
  $17 = $ReallocAsyncCtx12 + 4 | 0; //@line 5895
  HEAP32[$17 >> 2] = $4; //@line 5896
  $18 = $ReallocAsyncCtx12 + 8 | 0; //@line 5897
  HEAP32[$18 >> 2] = $6; //@line 5898
  $19 = $ReallocAsyncCtx12 + 12 | 0; //@line 5899
  HEAP32[$19 >> 2] = $2; //@line 5900
  $20 = $ReallocAsyncCtx12 + 16 | 0; //@line 5901
  HEAP32[$20 >> 2] = $8; //@line 5902
  sp = STACKTOP; //@line 5903
  return;
 }
 $21 = $6 + 12 | 0; //@line 5906
 HEAP32[$6 >> 2] = 586; //@line 5907
 HEAP32[$6 + 4 >> 2] = 0; //@line 5909
 HEAP32[$6 + 8 >> 2] = $2; //@line 5911
 HEAP32[$21 >> 2] = 848; //@line 5912
 $22 = $2 + 1260 | 0; //@line 5913
 if (($22 | 0) == ($6 | 0)) {
  $41 = HEAP32[214] | 0; //@line 5917
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 5918
  FUNCTION_TABLE_vi[$41 & 1023]($6); //@line 5919
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 589; //@line 5922
   $42 = $ReallocAsyncCtx15 + 4 | 0; //@line 5923
   HEAP32[$42 >> 2] = $6; //@line 5924
   $43 = $ReallocAsyncCtx15 + 8 | 0; //@line 5925
   HEAP32[$43 >> 2] = $8; //@line 5926
   sp = STACKTOP; //@line 5927
   return;
  }
  ___async_unwind = 0; //@line 5930
  HEAP32[$ReallocAsyncCtx15 >> 2] = 589; //@line 5931
  $42 = $ReallocAsyncCtx15 + 4 | 0; //@line 5932
  HEAP32[$42 >> 2] = $6; //@line 5933
  $43 = $ReallocAsyncCtx15 + 8 | 0; //@line 5934
  HEAP32[$43 >> 2] = $8; //@line 5935
  sp = STACKTOP; //@line 5936
  return;
 }
 $24 = $2 + 1272 | 0; //@line 5939
 $25 = HEAP32[$24 >> 2] | 0; //@line 5940
 if (!$25) {
  $35 = HEAP32[213] | 0; //@line 5944
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 5945
  FUNCTION_TABLE_vii[$35 & 31]($22, $6); //@line 5946
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 588; //@line 5949
   $36 = $ReallocAsyncCtx14 + 4 | 0; //@line 5950
   HEAP32[$36 >> 2] = $21; //@line 5951
   $37 = $ReallocAsyncCtx14 + 8 | 0; //@line 5952
   HEAP32[$37 >> 2] = $24; //@line 5953
   $38 = $ReallocAsyncCtx14 + 12 | 0; //@line 5954
   HEAP32[$38 >> 2] = $6; //@line 5955
   $39 = $ReallocAsyncCtx14 + 16 | 0; //@line 5956
   HEAP32[$39 >> 2] = $8; //@line 5957
   sp = STACKTOP; //@line 5958
   return;
  }
  ___async_unwind = 0; //@line 5961
  HEAP32[$ReallocAsyncCtx14 >> 2] = 588; //@line 5962
  $36 = $ReallocAsyncCtx14 + 4 | 0; //@line 5963
  HEAP32[$36 >> 2] = $21; //@line 5964
  $37 = $ReallocAsyncCtx14 + 8 | 0; //@line 5965
  HEAP32[$37 >> 2] = $24; //@line 5966
  $38 = $ReallocAsyncCtx14 + 12 | 0; //@line 5967
  HEAP32[$38 >> 2] = $6; //@line 5968
  $39 = $ReallocAsyncCtx14 + 16 | 0; //@line 5969
  HEAP32[$39 >> 2] = $8; //@line 5970
  sp = STACKTOP; //@line 5971
  return;
 } else {
  $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 5975
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 5976
  FUNCTION_TABLE_vi[$28 & 1023]($22); //@line 5977
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 587; //@line 5980
   $29 = $ReallocAsyncCtx13 + 4 | 0; //@line 5981
   HEAP32[$29 >> 2] = $21; //@line 5982
   $30 = $ReallocAsyncCtx13 + 8 | 0; //@line 5983
   HEAP32[$30 >> 2] = $24; //@line 5984
   $31 = $ReallocAsyncCtx13 + 12 | 0; //@line 5985
   HEAP32[$31 >> 2] = $22; //@line 5986
   $32 = $ReallocAsyncCtx13 + 16 | 0; //@line 5987
   HEAP32[$32 >> 2] = $6; //@line 5988
   $33 = $ReallocAsyncCtx13 + 20 | 0; //@line 5989
   HEAP32[$33 >> 2] = $8; //@line 5990
   sp = STACKTOP; //@line 5991
   return;
  }
  ___async_unwind = 0; //@line 5994
  HEAP32[$ReallocAsyncCtx13 >> 2] = 587; //@line 5995
  $29 = $ReallocAsyncCtx13 + 4 | 0; //@line 5996
  HEAP32[$29 >> 2] = $21; //@line 5997
  $30 = $ReallocAsyncCtx13 + 8 | 0; //@line 5998
  HEAP32[$30 >> 2] = $24; //@line 5999
  $31 = $ReallocAsyncCtx13 + 12 | 0; //@line 6000
  HEAP32[$31 >> 2] = $22; //@line 6001
  $32 = $ReallocAsyncCtx13 + 16 | 0; //@line 6002
  HEAP32[$32 >> 2] = $6; //@line 6003
  $33 = $ReallocAsyncCtx13 + 20 | 0; //@line 6004
  HEAP32[$33 >> 2] = $8; //@line 6005
  sp = STACKTOP; //@line 6006
  return;
 }
}
function _mbedtls_internal_aes_decrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 708
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 794
 $$0136 = $4 + 16 | 0; //@line 794
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 794
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 794
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 794
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 794
 while (1) {
  $110 = HEAP32[1300 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[2324 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0138 >>> 24 << 2) >> 2]; //@line 816
  $130 = HEAP32[1300 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[2324 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0140 >>> 24 << 2) >> 2]; //@line 836
  $150 = HEAP32[1300 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[2324 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0139 >>> 24 << 2) >> 2]; //@line 856
  $170 = HEAP32[1300 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[2324 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0137 >>> 24 << 2) >> 2]; //@line 876
  $171 = $$0136 + 20 | 0; //@line 877
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 878
  $173 = $110 & 255; //@line 879
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[1300 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[2324 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($170 >>> 24 << 2) >> 2]; //@line 940
  $250 = HEAP32[1300 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[2324 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($110 >>> 24 << 2) >> 2]; //@line 960
  $$0$in = $$0$in + -1 | 0; //@line 961
  $$0136 = $$0136 + 32 | 0; //@line 961
  $$0137 = HEAP32[1300 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[2324 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($130 >>> 24 << 2) >> 2]; //@line 961
  $$0138 = HEAP32[1300 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[2324 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($150 >>> 24 << 2) >> 2]; //@line 961
  $$0139 = $250; //@line 961
  $$0140 = $230; //@line 961
 }
 $261 = (HEAPU8[14404 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 973
 $268 = (HEAPU8[14404 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 980
 $274 = (HEAPU8[14404 + ($130 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 986
 $276 = HEAP32[$171 >> 2] | 0; //@line 988
 $281 = $276 ^ (HEAPU8[14404 + ($130 & 255) >> 0] | 0); //@line 993
 $288 = (HEAPU8[14404 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 1000
 $295 = (HEAPU8[14404 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 1007
 $301 = (HEAPU8[14404 + ($150 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 1013
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 1015
 $308 = $303 ^ (HEAPU8[14404 + ($150 & 255) >> 0] | 0); //@line 1020
 $315 = (HEAPU8[14404 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 1027
 $322 = (HEAPU8[14404 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 1034
 $328 = (HEAPU8[14404 + ($170 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 1040
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 1041
 $334 = $329 ^ (HEAPU8[14404 + ($170 & 255) >> 0] | 0); //@line 1046
 $341 = (HEAPU8[14404 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 1053
 $348 = (HEAPU8[14404 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 1060
 $354 = (HEAPU8[14404 + ($110 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 1066
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[14404 + $173 >> 0] | 0); //@line 1068
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 1072
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 1076
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 1080
 HEAP8[$2 + 4 >> 0] = $281; //@line 1083
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 1087
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 1091
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 1095
 HEAP8[$2 + 8 >> 0] = $308; //@line 1098
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 1102
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 1106
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 1110
 HEAP8[$2 + 12 >> 0] = $334; //@line 1113
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 1117
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 1121
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 1125
 return 0; //@line 1126
}
function _mbedtls_internal_aes_encrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 261
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 347
 $$0136 = $4 + 16 | 0; //@line 347
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 347
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 347
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 347
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 347
 while (1) {
  $110 = HEAP32[5396 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[6420 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0139 >>> 24 << 2) >> 2]; //@line 369
  $130 = HEAP32[5396 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[6420 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0137 >>> 24 << 2) >> 2]; //@line 389
  $150 = HEAP32[5396 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[6420 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0138 >>> 24 << 2) >> 2]; //@line 409
  $170 = HEAP32[5396 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[6420 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0140 >>> 24 << 2) >> 2]; //@line 429
  $171 = $$0136 + 20 | 0; //@line 430
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 431
  $173 = $110 & 255; //@line 432
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[5396 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[6420 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($130 >>> 24 << 2) >> 2]; //@line 493
  $250 = HEAP32[5396 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[6420 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($150 >>> 24 << 2) >> 2]; //@line 513
  $$0$in = $$0$in + -1 | 0; //@line 514
  $$0136 = $$0136 + 32 | 0; //@line 514
  $$0137 = HEAP32[5396 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[6420 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($170 >>> 24 << 2) >> 2]; //@line 514
  $$0138 = HEAP32[5396 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[6420 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($110 >>> 24 << 2) >> 2]; //@line 514
  $$0139 = $250; //@line 514
  $$0140 = $230; //@line 514
 }
 $261 = (HEAPU8[14148 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 526
 $268 = (HEAPU8[14148 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 533
 $274 = (HEAPU8[14148 + ($170 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 539
 $276 = HEAP32[$171 >> 2] | 0; //@line 541
 $281 = $276 ^ (HEAPU8[14148 + ($130 & 255) >> 0] | 0); //@line 546
 $288 = (HEAPU8[14148 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 553
 $295 = (HEAPU8[14148 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 560
 $301 = (HEAPU8[14148 + ($110 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 566
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 568
 $308 = $303 ^ (HEAPU8[14148 + ($150 & 255) >> 0] | 0); //@line 573
 $315 = (HEAPU8[14148 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 580
 $322 = (HEAPU8[14148 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 587
 $328 = (HEAPU8[14148 + ($130 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 593
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 594
 $334 = $329 ^ (HEAPU8[14148 + ($170 & 255) >> 0] | 0); //@line 599
 $341 = (HEAPU8[14148 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 606
 $348 = (HEAPU8[14148 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 613
 $354 = (HEAPU8[14148 + ($150 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 619
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[14148 + $173 >> 0] | 0); //@line 621
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 625
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 629
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 633
 HEAP8[$2 + 4 >> 0] = $281; //@line 636
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 640
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 644
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 648
 HEAP8[$2 + 8 >> 0] = $308; //@line 651
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 655
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 659
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 663
 HEAP8[$2 + 12 >> 0] = $334; //@line 666
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 670
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 674
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 678
 return 0; //@line 679
}
function _mbedtls_aes_setkey_enc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0103117 = 0, $$0106 = 0, $$0112 = 0, $$1104111 = 0, $$1114 = 0, $$2105113 = 0, $$2116 = 0, $$3115 = 0, $$sink = 0, $107 = 0, $111 = 0, $115 = 0, $119 = 0, $127 = 0, $129 = 0, $158 = 0, $162 = 0, $166 = 0, $194 = 0, $198 = 0, $202 = 0, $3 = 0, $33 = 0, $35 = 0, $5 = 0, $6 = 0, $64 = 0, $68 = 0, $76 = 0, $78 = 0, $$0112$looptemp = 0, $$1114$looptemp = 0, $$2116$looptemp = 0;
 switch ($2 | 0) {
 case 128:
  {
   $$sink = 10; //@line 27423
   break;
  }
 case 192:
  {
   $$sink = 12; //@line 27427
   break;
  }
 case 256:
  {
   $$sink = 14; //@line 27431
   break;
  }
 default:
  {
   $$0106 = -32; //@line 27435
   return $$0106 | 0; //@line 27436
  }
 }
 HEAP32[$0 >> 2] = $$sink; //@line 27439
 $3 = $0 + 8 | 0; //@line 27440
 HEAP32[$0 + 4 >> 2] = $3; //@line 27442
 $5 = $2 >>> 5; //@line 27443
 $$0103117 = 0; //@line 27444
 do {
  $6 = $$0103117 << 2; //@line 27446
  HEAP32[$0 + 8 + ($$0103117 << 2) >> 2] = (HEAPU8[$1 + ($6 | 1) >> 0] | 0) << 8 | (HEAPU8[$1 + $6 >> 0] | 0) | (HEAPU8[$1 + ($6 | 2) >> 0] | 0) << 16 | (HEAPU8[$1 + ($6 | 3) >> 0] | 0) << 24; //@line 27469
  $$0103117 = $$0103117 + 1 | 0; //@line 27470
 } while (($$0103117 | 0) != ($5 | 0));
 switch (HEAP32[$0 >> 2] | 0) {
 case 10:
  {
   $$0112 = $3; //@line 27482
   $$1104111 = 0; //@line 27482
   $33 = HEAP32[$3 >> 2] | 0; //@line 27482
   do {
    $35 = HEAP32[$$0112 + 12 >> 2] | 0; //@line 27488
    $33 = HEAP32[1260 + ($$1104111 << 2) >> 2] ^ $33 ^ (HEAPU8[14148 + ($35 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[14148 + ($35 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[14148 + ($35 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[14148 + ($35 & 255) >> 0] | 0) << 24; //@line 27513
    $$0112$looptemp = $$0112;
    $$0112 = $$0112 + 16 | 0; //@line 27514
    HEAP32[$$0112 >> 2] = $33; //@line 27515
    $64 = $33 ^ HEAP32[$$0112$looptemp + 4 >> 2]; //@line 27518
    HEAP32[$$0112$looptemp + 20 >> 2] = $64; //@line 27520
    $68 = HEAP32[$$0112$looptemp + 8 >> 2] ^ $64; //@line 27523
    HEAP32[$$0112$looptemp + 24 >> 2] = $68; //@line 27525
    HEAP32[$$0112$looptemp + 28 >> 2] = $35 ^ $68; //@line 27528
    $$1104111 = $$1104111 + 1 | 0; //@line 27529
   } while (($$1104111 | 0) != 10);
   $$0106 = 0; //@line 27532
   return $$0106 | 0; //@line 27538
  }
 case 12:
  {
   $$1114 = $3; //@line 27543
   $$2105113 = 0; //@line 27543
   $76 = HEAP32[$3 >> 2] | 0; //@line 27543
   do {
    $78 = HEAP32[$$1114 + 20 >> 2] | 0; //@line 27549
    $76 = HEAP32[1260 + ($$2105113 << 2) >> 2] ^ $76 ^ (HEAPU8[14148 + ($78 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[14148 + ($78 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[14148 + ($78 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[14148 + ($78 & 255) >> 0] | 0) << 24; //@line 27574
    $$1114$looptemp = $$1114;
    $$1114 = $$1114 + 24 | 0; //@line 27575
    HEAP32[$$1114 >> 2] = $76; //@line 27576
    $107 = $76 ^ HEAP32[$$1114$looptemp + 4 >> 2]; //@line 27579
    HEAP32[$$1114$looptemp + 28 >> 2] = $107; //@line 27581
    $111 = HEAP32[$$1114$looptemp + 8 >> 2] ^ $107; //@line 27584
    HEAP32[$$1114$looptemp + 32 >> 2] = $111; //@line 27586
    $115 = HEAP32[$$1114$looptemp + 12 >> 2] ^ $111; //@line 27589
    HEAP32[$$1114$looptemp + 36 >> 2] = $115; //@line 27591
    $119 = HEAP32[$$1114$looptemp + 16 >> 2] ^ $115; //@line 27594
    HEAP32[$$1114$looptemp + 40 >> 2] = $119; //@line 27596
    HEAP32[$$1114$looptemp + 44 >> 2] = $78 ^ $119; //@line 27599
    $$2105113 = $$2105113 + 1 | 0; //@line 27600
   } while (($$2105113 | 0) != 8);
   $$0106 = 0; //@line 27603
   return $$0106 | 0; //@line 27609
  }
 case 14:
  {
   $$2116 = $3; //@line 27614
   $$3115 = 0; //@line 27614
   $127 = HEAP32[$3 >> 2] | 0; //@line 27614
   do {
    $129 = HEAP32[$$2116 + 28 >> 2] | 0; //@line 27620
    $127 = HEAP32[1260 + ($$3115 << 2) >> 2] ^ $127 ^ (HEAPU8[14148 + ($129 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[14148 + ($129 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[14148 + ($129 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[14148 + ($129 & 255) >> 0] | 0) << 24; //@line 27645
    $$2116$looptemp = $$2116;
    $$2116 = $$2116 + 32 | 0; //@line 27646
    HEAP32[$$2116 >> 2] = $127; //@line 27647
    $158 = $127 ^ HEAP32[$$2116$looptemp + 4 >> 2]; //@line 27650
    HEAP32[$$2116$looptemp + 36 >> 2] = $158; //@line 27652
    $162 = HEAP32[$$2116$looptemp + 8 >> 2] ^ $158; //@line 27655
    HEAP32[$$2116$looptemp + 40 >> 2] = $162; //@line 27657
    $166 = HEAP32[$$2116$looptemp + 12 >> 2] ^ $162; //@line 27660
    HEAP32[$$2116$looptemp + 44 >> 2] = $166; //@line 27662
    $194 = HEAP32[$$2116$looptemp + 16 >> 2] ^ (HEAPU8[14148 + ($166 & 255) >> 0] | 0) ^ (HEAPU8[14148 + ($166 >>> 8 & 255) >> 0] | 0) << 8 ^ (HEAPU8[14148 + ($166 >>> 16 & 255) >> 0] | 0) << 16 ^ (HEAPU8[14148 + ($166 >>> 24) >> 0] | 0) << 24; //@line 27689
    HEAP32[$$2116$looptemp + 48 >> 2] = $194; //@line 27691
    $198 = $194 ^ HEAP32[$$2116$looptemp + 20 >> 2]; //@line 27694
    HEAP32[$$2116$looptemp + 52 >> 2] = $198; //@line 27696
    $202 = HEAP32[$$2116$looptemp + 24 >> 2] ^ $198; //@line 27699
    HEAP32[$$2116$looptemp + 56 >> 2] = $202; //@line 27701
    HEAP32[$$2116$looptemp + 60 >> 2] = $129 ^ $202; //@line 27704
    $$3115 = $$3115 + 1 | 0; //@line 27705
   } while (($$3115 | 0) != 7);
   $$0106 = 0; //@line 27708
   return $$0106 | 0; //@line 27714
  }
 default:
  {
   $$0106 = 0; //@line 27718
   return $$0106 | 0; //@line 27719
  }
 }
 return 0; //@line 27722
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv($0) {
 $0 = $0 | 0;
 var $17 = 0, $27 = 0, $32 = 0, $41 = 0, $44 = 0, $47 = 0, $56 = 0, $58 = 0, $62 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx8 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 17681
 STACKTOP = STACKTOP + 32 | 0; //@line 17682
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17682
 $vararg_buffer5 = sp + 24 | 0; //@line 17683
 $vararg_buffer3 = sp + 16 | 0; //@line 17684
 _printf(13258, sp) | 0; //@line 17687
 _printf(13763, sp + 8 | 0) | 0; //@line 17688
 $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 17689
 _putchar(10) | 0; //@line 17690
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 516; //@line 17693
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 17695
  HEAP32[$AsyncCtx11 + 8 >> 2] = $vararg_buffer3; //@line 17697
  HEAP32[$AsyncCtx11 + 12 >> 2] = $vararg_buffer3; //@line 17699
  HEAP32[$AsyncCtx11 + 16 >> 2] = $vararg_buffer5; //@line 17701
  HEAP32[$AsyncCtx11 + 20 >> 2] = $vararg_buffer5; //@line 17703
  sp = STACKTOP; //@line 17704
  STACKTOP = sp; //@line 17705
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 17707
 $7 = HEAP32[$0 + 356 >> 2] | 0; //@line 17709
 $AsyncCtx21 = _emscripten_alloc_async_context(24, sp) | 0; //@line 17711
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($7, $0 + 1036 | 0); //@line 17712
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 517; //@line 17715
  HEAP32[$AsyncCtx21 + 4 >> 2] = $0; //@line 17717
  HEAP32[$AsyncCtx21 + 8 >> 2] = $vararg_buffer3; //@line 17719
  HEAP32[$AsyncCtx21 + 12 >> 2] = $vararg_buffer3; //@line 17721
  HEAP32[$AsyncCtx21 + 16 >> 2] = $vararg_buffer5; //@line 17723
  HEAP32[$AsyncCtx21 + 20 >> 2] = $vararg_buffer5; //@line 17725
  sp = STACKTOP; //@line 17726
  STACKTOP = sp; //@line 17727
  return;
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 17729
 HEAP32[$0 + 364 >> 2] = 0; //@line 17731
 $17 = $0 + 1160 | 0; //@line 17734
 HEAP8[$17 >> 0] = HEAP8[$0 + 378 >> 0] | 0; //@line 17735
 HEAP8[$0 + 1163 >> 0] = HEAP8[$0 + 1129 >> 0] | 0; //@line 17739
 HEAP8[$0 + 1176 >> 0] = HEAP8[$0 + 1141 >> 0] | 0; //@line 17743
 HEAP8[$0 + 1177 >> 0] = HEAP8[$0 + 369 >> 0] | 0; //@line 17747
 $27 = $0 + 1178 | 0; //@line 17748
 HEAP8[$27 >> 0] = 0; //@line 17749
 HEAP32[$0 + 1180 >> 2] = 0; //@line 17751
 do {
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   $32 = HEAP32[$0 >> 2] | 0; //@line 17757
   $AsyncCtx18 = _emscripten_alloc_async_context(36, sp) | 0; //@line 17758
   __ZN7LoRaPHY20put_radio_to_standbyEv($32); //@line 17759
   if (___async) {
    HEAP32[$AsyncCtx18 >> 2] = 518; //@line 17762
    HEAP32[$AsyncCtx18 + 4 >> 2] = $0; //@line 17764
    HEAP32[$AsyncCtx18 + 8 >> 2] = $0; //@line 17766
    HEAP32[$AsyncCtx18 + 12 >> 2] = $17; //@line 17768
    HEAP32[$AsyncCtx18 + 16 >> 2] = $27; //@line 17770
    HEAP32[$AsyncCtx18 + 20 >> 2] = $vararg_buffer3; //@line 17772
    HEAP32[$AsyncCtx18 + 24 >> 2] = $vararg_buffer3; //@line 17774
    HEAP32[$AsyncCtx18 + 28 >> 2] = $vararg_buffer5; //@line 17776
    HEAP32[$AsyncCtx18 + 32 >> 2] = $vararg_buffer5; //@line 17778
    sp = STACKTOP; //@line 17779
    STACKTOP = sp; //@line 17780
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx18 | 0); //@line 17782
    break;
   }
  }
 } while (0);
 $41 = HEAP32[$0 >> 2] | 0; //@line 17787
 $44 = HEAP32[(HEAP32[$41 >> 2] | 0) + 24 >> 2] | 0; //@line 17790
 $47 = (__ZN11LoRaMacMcps14get_indicationEv($0 + 288 | 0) | 0) + 10 | 0; //@line 17793
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 17794
 FUNCTION_TABLE_iiii[$44 & 15]($41, $17, $47) | 0; //@line 17795
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 519; //@line 17798
  HEAP32[$AsyncCtx + 4 >> 2] = $27; //@line 17800
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 17802
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer3; //@line 17804
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 17806
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer5; //@line 17808
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer5; //@line 17810
  HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 17812
  sp = STACKTOP; //@line 17813
  STACKTOP = sp; //@line 17814
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17816
 $56 = (HEAP8[$27 >> 0] | 0) != 0; //@line 17818
 $58 = HEAP32[$0 + 1108 >> 2] | 0; //@line 17820
 _printf(13258, $vararg_buffer3) | 0; //@line 17821
 _printf(13334, $vararg_buffer5) | 0; //@line 17822
 $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 17823
 _putchar(10) | 0; //@line 17824
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 520; //@line 17827
  HEAP32[$AsyncCtx8 + 4 >> 2] = $0; //@line 17829
  HEAP8[$AsyncCtx8 + 8 >> 0] = $56 & 1; //@line 17832
  HEAP32[$AsyncCtx8 + 12 >> 2] = $58; //@line 17834
  sp = STACKTOP; //@line 17835
  STACKTOP = sp; //@line 17836
  return;
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 17838
 $62 = HEAP32[$0 >> 2] | 0; //@line 17839
 $AsyncCtx14 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17840
 __ZN7LoRaPHY15setup_rx_windowEbj($62, $56, $58); //@line 17841
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 521; //@line 17844
  sp = STACKTOP; //@line 17845
  STACKTOP = sp; //@line 17846
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx14 | 0); //@line 17848
  STACKTOP = sp; //@line 17849
  return;
 }
}
function __ZN12LoRaWANStack17send_frame_to_macEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$pre$phiZ2D = 0, $$sink2$sink = 0, $1 = 0, $14 = 0, $15 = 0, $2 = 0, $38 = 0, $39 = 0, $4 = 0, $58 = 0, $59 = 0, $72 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 9006
 STACKTOP = STACKTOP + 32 | 0; //@line 9007
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9007
 $1 = sp + 16 | 0; //@line 9008
 $2 = sp; //@line 9009
 $4 = HEAP32[$0 + 1968 >> 2] | 0; //@line 9011
 HEAP32[$1 >> 2] = $4; //@line 9012
 L1 : do {
  switch ($4 | 0) {
  case 0:
   {
    HEAP32[$1 + 8 >> 2] = $0 + 1975; //@line 9018
    HEAP16[$1 + 12 >> 1] = HEAP16[$0 + 2230 >> 1] | 0; //@line 9022
    HEAP8[$1 + 4 >> 0] = HEAP8[$0 + 1972 >> 0] | 0; //@line 9026
    HEAP8[$1 + 6 >> 0] = 1; //@line 9028
    HEAP32[$2 >> 2] = 21; //@line 9029
    $14 = $0 + 4 | 0; //@line 9030
    $AsyncCtx11 = _emscripten_alloc_async_context(28, sp) | 0; //@line 9031
    $15 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($14, $2) | 0; //@line 9032
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 298; //@line 9035
     HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 9037
     HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 9039
     HEAP32[$AsyncCtx11 + 12 >> 2] = $14; //@line 9041
     HEAP32[$AsyncCtx11 + 16 >> 2] = $1; //@line 9043
     HEAP32[$AsyncCtx11 + 20 >> 2] = $2; //@line 9045
     HEAP32[$AsyncCtx11 + 24 >> 2] = $1; //@line 9047
     sp = STACKTOP; //@line 9048
     STACKTOP = sp; //@line 9049
     return 0; //@line 9049
    }
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 9051
    if (!$15) {
     $$pre$phiZ2D = $14; //@line 9056
     $$sink2$sink = HEAP8[$2 + 4 >> 0] | 0; //@line 9056
     break L1;
    } else {
     $$pre$phiZ2D = $14; //@line 9061
     $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv($0 + 1336 | 0) | 0; //@line 9061
     break L1;
    }
    break;
   }
  case 1:
   {
    HEAP32[$1 + 8 >> 2] = $0 + 1975; //@line 9069
    HEAP16[$1 + 12 >> 1] = HEAP16[$0 + 2230 >> 1] | 0; //@line 9073
    HEAP8[$1 + 4 >> 0] = HEAP8[$0 + 1972 >> 0] | 0; //@line 9077
    HEAP8[$1 + 6 >> 0] = HEAP8[$0 + 1974 >> 0] | 0; //@line 9081
    HEAP32[$2 >> 2] = 21; //@line 9082
    $38 = $0 + 4 | 0; //@line 9083
    $AsyncCtx7 = _emscripten_alloc_async_context(28, sp) | 0; //@line 9084
    $39 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($38, $2) | 0; //@line 9085
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 299; //@line 9088
     HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 9090
     HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 9092
     HEAP32[$AsyncCtx7 + 12 >> 2] = $38; //@line 9094
     HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 9096
     HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 9098
     HEAP32[$AsyncCtx7 + 24 >> 2] = $1; //@line 9100
     sp = STACKTOP; //@line 9101
     STACKTOP = sp; //@line 9102
     return 0; //@line 9102
    }
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9104
    if (!$39) {
     $$pre$phiZ2D = $38; //@line 9109
     $$sink2$sink = HEAP8[$2 + 4 >> 0] | 0; //@line 9109
     break L1;
    } else {
     $$pre$phiZ2D = $38; //@line 9114
     $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv($0 + 1336 | 0) | 0; //@line 9114
     break L1;
    }
    break;
   }
  case 3:
   {
    HEAP32[$1 + 8 >> 2] = $0 + 1975; //@line 9122
    HEAP16[$1 + 12 >> 1] = HEAP16[$0 + 2230 >> 1] | 0; //@line 9126
    HEAP8[$1 + 4 >> 0] = 0; //@line 9128
    HEAP8[$1 + 6 >> 0] = 1; //@line 9130
    HEAP32[$2 >> 2] = 21; //@line 9131
    $58 = $0 + 4 | 0; //@line 9132
    $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 9133
    $59 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($58, $2) | 0; //@line 9134
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 300; //@line 9137
     HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 9139
     HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 9141
     HEAP32[$AsyncCtx3 + 12 >> 2] = $58; //@line 9143
     HEAP32[$AsyncCtx3 + 16 >> 2] = $1; //@line 9145
     HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 9147
     HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 9149
     sp = STACKTOP; //@line 9150
     STACKTOP = sp; //@line 9151
     return 0; //@line 9151
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9153
    if (!$59) {
     $$pre$phiZ2D = $58; //@line 9158
     $$sink2$sink = HEAP8[$2 + 4 >> 0] | 0; //@line 9158
     break L1;
    } else {
     $$pre$phiZ2D = $58; //@line 9163
     $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv($0 + 1336 | 0) | 0; //@line 9163
     break L1;
    }
    break;
   }
  default:
   {
    $$0 = -1002; //@line 9169
    STACKTOP = sp; //@line 9170
    return $$0 | 0; //@line 9170
   }
  }
 } while (0);
 HEAP8[$1 + 5 >> 0] = $$sink2$sink; //@line 9175
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 9176
 $72 = __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($$pre$phiZ2D, $1) | 0; //@line 9177
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 301; //@line 9180
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 9182
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9184
  sp = STACKTOP; //@line 9185
  STACKTOP = sp; //@line 9186
  return 0; //@line 9186
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9188
 $$0 = $72; //@line 9189
 STACKTOP = sp; //@line 9190
 return $$0 | 0; //@line 9190
}
function __ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$01722$i = 0, $$01821$i = 0, $$023$i = 0, $$2$i = 0, $$220$i = 0, $$sink = 0, $10 = 0, $11 = 0, $15 = 0, $22 = 0, $23 = 0, $25 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $5 = 0, $55 = 0, $57 = 0, $7 = 0, $75 = 0, $78 = 0, $8 = 0, $9 = 0, $91 = 0, $92 = 0, $indvars$iv$i = 0, $indvars$iv$i27 = 0, $wide$trip$count$i = 0, $wide$trip$count$i25 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 25277
 STACKTOP = STACKTOP + 16 | 0; //@line 25278
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 25278
 $5 = sp; //@line 25279
 dest = $5; //@line 25280
 stop = dest + 16 | 0; //@line 25280
 do {
  HEAP8[dest >> 0] = 255; //@line 25280
  dest = dest + 1 | 0; //@line 25280
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[$0 + 72 >> 2] | 0; //@line 25282
 $8 = $0 + 120 | 0; //@line 25283
 $9 = HEAP32[$8 >> 2] | 0; //@line 25284
 $10 = $0 + 128 | 0; //@line 25285
 $11 = HEAP8[$10 >> 0] | 0; //@line 25286
 if (!((__ZN7LoRaPHY19num_active_channelsEPthh(0, $9, 0, $11) | 0) << 24 >> 24)) {
  $15 = HEAP32[$0 + 124 >> 2] | 0; //@line 25291
  if ($11 << 24 >> 24 != 0 & (($9 | 0) != 0 & ($15 | 0) != 0)) {
   $wide$trip$count$i = $11 & 255; //@line 25298
   $indvars$iv$i = 0; //@line 25299
   do {
    HEAP16[$9 + ($indvars$iv$i << 1) >> 1] = HEAP16[$15 + ($indvars$iv$i << 1) >> 1] | 0; //@line 25304
    $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 25305
   } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
  }
 }
 $22 = HEAP32[$1 >> 2] | 0; //@line 25315
 $23 = $0 + 8 | 0; //@line 25316
 $25 = $1 + 4 | 0; //@line 25318
 if ($22 >>> 0 > (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) >>> 0) {
  $78 = HEAP32[$1 >> 2] | 0; //@line 25323
  $$0 = 1; //@line 25328
  $$sink = $78 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) | 0; //@line 25328
  HEAP32[$3 >> 2] = $$sink; //@line 25329
  STACKTOP = sp; //@line 25330
  return $$0 | 0; //@line 25330
 }
 HEAP32[$4 >> 2] = 0; //@line 25332
 $37 = __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, (HEAP8[$1 + 9 >> 0] | 0) != 0, (HEAP8[$1 + 10 >> 0] | 0) != 0, $7, HEAP8[$0 + 76 >> 0] | 0) | 0; //@line 25341
 $39 = HEAP8[$1 + 8 >> 0] | 0; //@line 25343
 $40 = HEAP32[$8 >> 2] | 0; //@line 25344
 $42 = HEAP8[$0 + 20 >> 0] | 0; //@line 25346
 do {
  if ($42 << 24 >> 24) {
   $44 = $0 + 112 | 0; //@line 25350
   $45 = $0 + 72 | 0; //@line 25351
   $$01722$i = 0; //@line 25352
   $$01821$i = 0; //@line 25352
   $$023$i = 0; //@line 25352
   $47 = 0; //@line 25352
   while (1) {
    do {
     if (!(1 << ($47 & 15) & HEAPU16[$40 + ($47 >>> 4 << 1) >> 1])) {
      $$2$i = $$023$i; //@line 25364
      $$220$i = $$01821$i; //@line 25364
     } else {
      $55 = HEAP32[$44 >> 2] | 0; //@line 25366
      $57 = HEAP8[$55 + ($47 * 12 | 0) + 8 >> 0] | 0; //@line 25368
      if ($57 << 24 >> 24 >> 4 << 24 >> 24 < $39 << 24 >> 24 ? 1 : ($57 << 4 & 255) << 24 >> 24 >> 4 << 24 >> 24 > $39 << 24 >> 24) {
       $$2$i = $$023$i; //@line 25376
       $$220$i = $$01821$i; //@line 25376
      } else {
       if (!(HEAP32[(HEAP32[$45 >> 2] | 0) + ((HEAPU8[$55 + ($47 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 12 >> 2] | 0)) {
        HEAP8[$5 + ($$023$i & 255) >> 0] = $$01722$i; //@line 25389
        $$2$i = $$023$i + 1 << 24 >> 24; //@line 25390
        $$220$i = $$01821$i; //@line 25390
        break;
       } else {
        $$2$i = $$023$i; //@line 25394
        $$220$i = $$01821$i + 1 << 24 >> 24; //@line 25394
        break;
       }
      }
     }
    } while (0);
    $75 = $$01722$i + 1 << 24 >> 24; //@line 25400
    if (($75 & 255) < ($42 & 255)) {
     $$01722$i = $75; //@line 25404
     $$01821$i = $$220$i; //@line 25404
     $$023$i = $$2$i; //@line 25404
     $47 = $75 & 255; //@line 25404
    } else {
     break;
    }
   }
   if (!($$2$i << 24 >> 24)) {
    if (!($$220$i << 24 >> 24)) {
     break;
    } else {
     $$0 = 1; //@line 25415
     $$sink = $37; //@line 25415
    }
    HEAP32[$3 >> 2] = $$sink; //@line 25417
    STACKTOP = sp; //@line 25418
    return $$0 | 0; //@line 25418
   } else {
    HEAP8[$2 >> 0] = HEAP8[$5 + ((_rand() | 0) % ($$2$i & 255 | 0) | 0) >> 0] | 0; //@line 25425
    $$0 = 1; //@line 25426
    $$sink = 0; //@line 25426
    HEAP32[$3 >> 2] = $$sink; //@line 25427
    STACKTOP = sp; //@line 25428
    return $$0 | 0; //@line 25428
   }
  }
 } while (0);
 $91 = HEAP32[$0 + 124 >> 2] | 0; //@line 25433
 $92 = HEAP8[$10 >> 0] | 0; //@line 25434
 if (!(($40 | 0) != 0 & ($91 | 0) != 0 & $92 << 24 >> 24 != 0)) {
  $$0 = 0; //@line 25441
  $$sink = 0; //@line 25441
  HEAP32[$3 >> 2] = $$sink; //@line 25442
  STACKTOP = sp; //@line 25443
  return $$0 | 0; //@line 25443
 }
 $wide$trip$count$i25 = $92 & 255; //@line 25445
 $indvars$iv$i27 = 0; //@line 25446
 do {
  HEAP16[$40 + ($indvars$iv$i27 << 1) >> 1] = HEAP16[$91 + ($indvars$iv$i27 << 1) >> 1] | 0; //@line 25451
  $indvars$iv$i27 = $indvars$iv$i27 + 1 | 0; //@line 25452
 } while (($indvars$iv$i27 | 0) != ($wide$trip$count$i25 | 0));
 $$0 = 0; //@line 25455
 $$sink = 0; //@line 25455
 HEAP32[$3 >> 2] = $$sink; //@line 25461
 STACKTOP = sp; //@line 25462
 return $$0 | 0; //@line 25462
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_456($0) {
 $0 = $0 | 0;
 var $$05$i = 0, $$06$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $41 = 0, $53 = 0, $56 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 33061
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33063
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33065
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33067
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33069
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33071
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33073
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33075
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 33077
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 33079
 $19 = $2 + 968 | 0; //@line 33080
 HEAP32[$19 >> 2] = HEAP32[$19 >> 2] & -17; //@line 33083
 if (HEAP8[$2 + 944 >> 0] & 8) {
  if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) >> 2] | 0)) {
   HEAP8[$2 + 372 >> 0] = 0; //@line 33096
   HEAP32[$2 + 956 >> 2] = 0; //@line 33098
   HEAP32[$2 + 960 >> 2] = 0; //@line 33100
   HEAP32[$2 + 964 >> 2] = 0; //@line 33102
   HEAP8[$2 + 380 >> 0] = 0; //@line 33104
   HEAP8[$2 + 894 >> 0] = 1; //@line 33106
   HEAP8[$2 + 895 >> 0] = 1; //@line 33108
   HEAP8[$2 + 377 >> 0] = 0; //@line 33110
   HEAP8[$2 + 1152 >> 0] = 0; //@line 33112
   HEAP16[$2 + 1154 >> 1] = 1; //@line 33114
   $41 = $2 + 4 | 0; //@line 33115
   __ZN14LoRaMacCommand20clear_command_bufferEv($41); //@line 33116
   __ZN14LoRaMacCommand19clear_repeat_bufferEv($41); //@line 33117
   __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($41); //@line 33118
   HEAP8[$2 + 371 >> 0] = 1; //@line 33120
   __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$2 >> 2] | 0, $2 + 360 | 0, 0); //@line 33122
   HEAP8[$2 + 373 >> 0] = 0; //@line 33124
   HEAP8[$2 + 374 >> 0] = 0; //@line 33126
   $$05$i = HEAP32[$2 + 1208 >> 2] | 0; //@line 33128
   if ($$05$i | 0) {
    $$06$i = $$05$i; //@line 33131
    do {
     HEAP32[$$06$i + 36 >> 2] = 0; //@line 33134
     $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 33136
    } while (($$06$i | 0) != 0);
   }
   HEAP8[$2 + 378 >> 0] = 0; //@line 33146
   HEAP8[$2 + 379 >> 0] = 0; //@line 33148
   $53 = HEAP32[$2 >> 2] | 0; //@line 33149
   $56 = HEAP32[(HEAP32[$53 >> 2] | 0) + 52 >> 2] | 0; //@line 33152
   $61 = (HEAPU8[$2 + 897 >> 0] | 0) + 1 & 255; //@line 33157
   $ReallocAsyncCtx = _emscripten_realloc_async_context(40) | 0; //@line 33158
   $62 = FUNCTION_TABLE_iii[$56 & 31]($53, $61) | 0; //@line 33159
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 487; //@line 33162
    $63 = $ReallocAsyncCtx + 4 | 0; //@line 33163
    HEAP32[$63 >> 2] = $2; //@line 33164
    $64 = $ReallocAsyncCtx + 8 | 0; //@line 33165
    HEAP32[$64 >> 2] = $4; //@line 33166
    $65 = $ReallocAsyncCtx + 12 | 0; //@line 33167
    HEAP32[$65 >> 2] = $6; //@line 33168
    $66 = $ReallocAsyncCtx + 16 | 0; //@line 33169
    HEAP32[$66 >> 2] = $8; //@line 33170
    $67 = $ReallocAsyncCtx + 20 | 0; //@line 33171
    HEAP32[$67 >> 2] = $10; //@line 33172
    $68 = $ReallocAsyncCtx + 24 | 0; //@line 33173
    HEAP32[$68 >> 2] = $12; //@line 33174
    $69 = $ReallocAsyncCtx + 28 | 0; //@line 33175
    HEAP32[$69 >> 2] = $14; //@line 33176
    $70 = $ReallocAsyncCtx + 32 | 0; //@line 33177
    HEAP32[$70 >> 2] = $16; //@line 33178
    $71 = $ReallocAsyncCtx + 36 | 0; //@line 33179
    HEAP32[$71 >> 2] = $18; //@line 33180
    sp = STACKTOP; //@line 33181
    return;
   }
   HEAP8[___async_retval >> 0] = $62; //@line 33185
   ___async_unwind = 0; //@line 33186
   HEAP32[$ReallocAsyncCtx >> 2] = 487; //@line 33187
   $63 = $ReallocAsyncCtx + 4 | 0; //@line 33188
   HEAP32[$63 >> 2] = $2; //@line 33189
   $64 = $ReallocAsyncCtx + 8 | 0; //@line 33190
   HEAP32[$64 >> 2] = $4; //@line 33191
   $65 = $ReallocAsyncCtx + 12 | 0; //@line 33192
   HEAP32[$65 >> 2] = $6; //@line 33193
   $66 = $ReallocAsyncCtx + 16 | 0; //@line 33194
   HEAP32[$66 >> 2] = $8; //@line 33195
   $67 = $ReallocAsyncCtx + 20 | 0; //@line 33196
   HEAP32[$67 >> 2] = $10; //@line 33197
   $68 = $ReallocAsyncCtx + 24 | 0; //@line 33198
   HEAP32[$68 >> 2] = $12; //@line 33199
   $69 = $ReallocAsyncCtx + 28 | 0; //@line 33200
   HEAP32[$69 >> 2] = $14; //@line 33201
   $70 = $ReallocAsyncCtx + 32 | 0; //@line 33202
   HEAP32[$70 >> 2] = $16; //@line 33203
   $71 = $ReallocAsyncCtx + 36 | 0; //@line 33204
   HEAP32[$71 >> 2] = $18; //@line 33205
   sp = STACKTOP; //@line 33206
   return;
  }
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 33210
 __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 33211
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 489; //@line 33214
  $73 = $ReallocAsyncCtx5 + 4 | 0; //@line 33215
  HEAP32[$73 >> 2] = $6; //@line 33216
  $74 = $ReallocAsyncCtx5 + 8 | 0; //@line 33217
  HEAP32[$74 >> 2] = $4; //@line 33218
  sp = STACKTOP; //@line 33219
  return;
 }
 ___async_unwind = 0; //@line 33222
 HEAP32[$ReallocAsyncCtx5 >> 2] = 489; //@line 33223
 $73 = $ReallocAsyncCtx5 + 4 | 0; //@line 33224
 HEAP32[$73 >> 2] = $6; //@line 33225
 $74 = $ReallocAsyncCtx5 + 8 | 0; //@line 33226
 HEAP32[$74 >> 2] = $4; //@line 33227
 sp = STACKTOP; //@line 33228
 return;
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$ = 0, $$sink = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $65 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 308
 STACKTOP = STACKTOP + 48 | 0; //@line 309
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 309
 $vararg_buffer9 = sp + 40 | 0; //@line 310
 $vararg_buffer7 = sp + 32 | 0; //@line 311
 $vararg_buffer5 = sp + 24 | 0; //@line 312
 $vararg_buffer3 = sp + 16 | 0; //@line 313
 $vararg_buffer1 = sp + 8 | 0; //@line 314
 $15 = $8 & 1; //@line 316
 $16 = $10 & 1; //@line 317
 $17 = $11 & 1; //@line 318
 $18 = $13 & 1; //@line 319
 $19 = $14 & 1; //@line 320
 $21 = $0 + 689 | 0; //@line 322
 HEAP8[$21 >> 0] = $1; //@line 323
 _printf(10904, sp) | 0; //@line 324
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$21 >> 0]; //@line 327
 _printf(11079, $vararg_buffer1) | 0; //@line 328
 $AsyncCtx17 = _emscripten_alloc_async_context(72, sp) | 0; //@line 329
 _putchar(10) | 0; //@line 330
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 60; //@line 333
  HEAP32[$AsyncCtx17 + 4 >> 2] = $1; //@line 335
  HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 337
  HEAP32[$AsyncCtx17 + 12 >> 2] = $2; //@line 339
  HEAP32[$AsyncCtx17 + 16 >> 2] = $3; //@line 341
  HEAP32[$AsyncCtx17 + 20 >> 2] = $5; //@line 343
  HEAP8[$AsyncCtx17 + 24 >> 0] = $15; //@line 345
  HEAP8[$AsyncCtx17 + 25 >> 0] = $9; //@line 347
  HEAP8[$AsyncCtx17 + 26 >> 0] = $16; //@line 349
  HEAP8[$AsyncCtx17 + 27 >> 0] = $18; //@line 351
  HEAP8[$AsyncCtx17 + 28 >> 0] = $19; //@line 353
  HEAP16[$AsyncCtx17 + 30 >> 1] = $6; //@line 355
  HEAP16[$AsyncCtx17 + 32 >> 1] = $7; //@line 357
  HEAP32[$AsyncCtx17 + 36 >> 2] = $vararg_buffer3; //@line 359
  HEAP32[$AsyncCtx17 + 40 >> 2] = $vararg_buffer3; //@line 361
  HEAP32[$AsyncCtx17 + 44 >> 2] = $vararg_buffer5; //@line 363
  HEAP32[$AsyncCtx17 + 48 >> 2] = $vararg_buffer5; //@line 365
  HEAP8[$AsyncCtx17 + 52 >> 0] = $4; //@line 367
  HEAP8[$AsyncCtx17 + 53 >> 0] = $17; //@line 369
  HEAP8[$AsyncCtx17 + 54 >> 0] = $12; //@line 371
  HEAP32[$AsyncCtx17 + 56 >> 2] = $vararg_buffer7; //@line 373
  HEAP32[$AsyncCtx17 + 60 >> 2] = $vararg_buffer7; //@line 375
  HEAP32[$AsyncCtx17 + 64 >> 2] = $vararg_buffer9; //@line 377
  HEAP32[$AsyncCtx17 + 68 >> 2] = $vararg_buffer9; //@line 379
  sp = STACKTOP; //@line 380
  STACKTOP = sp; //@line 381
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 383
 switch ($1 | 0) {
 case 0:
  {
   HEAP32[$0 + 704 >> 2] = $2; //@line 387
   HEAP32[$0 + 712 >> 2] = $3; //@line 389
   HEAP32[$0 + 708 >> 2] = $5; //@line 391
   HEAP8[$0 + 718 >> 0] = $15; //@line 393
   HEAP8[$0 + 719 >> 0] = $9; //@line 395
   HEAP8[$0 + 720 >> 0] = $16; //@line 397
   HEAP8[$0 + 721 >> 0] = $18; //@line 399
   HEAP8[$0 + 722 >> 0] = $19; //@line 401
   HEAP16[$0 + 716 >> 1] = $6; //@line 403
   HEAP32[$0 + 728 >> 2] = ~~(1.0 / +($3 >>> 0) * 8.0 * +($7 & 65535) * 1.0e3) >>> 0; //@line 412
   _printf(10904, $vararg_buffer3) | 0; //@line 413
   _printf(11621, $vararg_buffer5) | 0; //@line 414
   $AsyncCtx13 = _emscripten_alloc_async_context(4, sp) | 0; //@line 415
   _putchar(10) | 0; //@line 416
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 61; //@line 419
    sp = STACKTOP; //@line 420
    STACKTOP = sp; //@line 421
    return;
   }
   _emscripten_free_async_context($AsyncCtx13 | 0); //@line 423
   STACKTOP = sp; //@line 424
   return;
  }
 case 1:
  {
   if ($2 >>> 0 > 2) {
    while (1) {}
   }
   $65 = $2 + 7 | 0; //@line 433
   HEAP32[$0 + 752 >> 2] = $65; //@line 435
   HEAP32[$0 + 756 >> 2] = $3; //@line 437
   HEAP8[$0 + 761 >> 0] = $4; //@line 439
   HEAP16[$0 + 762 >> 1] = $6; //@line 441
   HEAP8[$0 + 764 >> 0] = $15; //@line 443
   HEAP8[$0 + 765 >> 0] = $9; //@line 445
   HEAP8[$0 + 766 >> 0] = $16; //@line 447
   HEAP8[$0 + 767 >> 0] = $17; //@line 449
   HEAP8[$0 + 768 >> 0] = $12; //@line 451
   HEAP8[$0 + 769 >> 0] = $18; //@line 453
   HEAP8[$0 + 770 >> 0] = $19; //@line 455
   $$ = $3 >>> 0 > 6 ? $3 : 6; //@line 457
   if (($2 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 11; //@line 465
   } else {
    if (($65 | 0) == 8 & $$ >>> 0 > 11) {
     label = 11; //@line 471
    } else {
     $$sink = 0; //@line 473
    }
   }
   if ((label | 0) == 11) {
    $$sink = 1; //@line 477
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 480
   _printf(10904, $vararg_buffer7) | 0; //@line 481
   _printf(11602, $vararg_buffer9) | 0; //@line 482
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 483
   _putchar(10) | 0; //@line 484
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 62; //@line 487
    sp = STACKTOP; //@line 488
    STACKTOP = sp; //@line 489
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 491
   STACKTOP = sp; //@line 492
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 496
   return;
  }
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_196($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 5546
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5548
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5550
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5552
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5556
 $11 = $10 + 12 | 0; //@line 5557
 HEAP32[$10 >> 2] = 582; //@line 5558
 HEAP32[$10 + 4 >> 2] = 0; //@line 5560
 HEAP32[$10 + 8 >> 2] = $2; //@line 5562
 HEAP32[$11 >> 2] = 848; //@line 5563
 $12 = $2 + 1228 | 0; //@line 5564
 if (($12 | 0) == ($10 | 0)) {
  $35 = HEAP32[214] | 0; //@line 5568
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 5569
  FUNCTION_TABLE_vi[$35 & 1023]($10); //@line 5570
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 585; //@line 5573
   $36 = $ReallocAsyncCtx12 + 4 | 0; //@line 5574
   HEAP32[$36 >> 2] = $10; //@line 5575
   $37 = $ReallocAsyncCtx12 + 8 | 0; //@line 5576
   HEAP32[$37 >> 2] = $4; //@line 5577
   $38 = $ReallocAsyncCtx12 + 12 | 0; //@line 5578
   HEAP32[$38 >> 2] = $2; //@line 5579
   $39 = $ReallocAsyncCtx12 + 16 | 0; //@line 5580
   HEAP32[$39 >> 2] = $6; //@line 5581
   sp = STACKTOP; //@line 5582
   return;
  }
  ___async_unwind = 0; //@line 5585
  HEAP32[$ReallocAsyncCtx12 >> 2] = 585; //@line 5586
  $36 = $ReallocAsyncCtx12 + 4 | 0; //@line 5587
  HEAP32[$36 >> 2] = $10; //@line 5588
  $37 = $ReallocAsyncCtx12 + 8 | 0; //@line 5589
  HEAP32[$37 >> 2] = $4; //@line 5590
  $38 = $ReallocAsyncCtx12 + 12 | 0; //@line 5591
  HEAP32[$38 >> 2] = $2; //@line 5592
  $39 = $ReallocAsyncCtx12 + 16 | 0; //@line 5593
  HEAP32[$39 >> 2] = $6; //@line 5594
  sp = STACKTOP; //@line 5595
  return;
 }
 $14 = $2 + 1240 | 0; //@line 5598
 $15 = HEAP32[$14 >> 2] | 0; //@line 5599
 if (!$15) {
  $27 = HEAP32[213] | 0; //@line 5603
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 5604
  FUNCTION_TABLE_vii[$27 & 31]($12, $10); //@line 5605
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 584; //@line 5608
   $28 = $ReallocAsyncCtx11 + 4 | 0; //@line 5609
   HEAP32[$28 >> 2] = $2; //@line 5610
   $29 = $ReallocAsyncCtx11 + 8 | 0; //@line 5611
   HEAP32[$29 >> 2] = $10; //@line 5612
   $30 = $ReallocAsyncCtx11 + 12 | 0; //@line 5613
   HEAP32[$30 >> 2] = $4; //@line 5614
   $31 = $ReallocAsyncCtx11 + 16 | 0; //@line 5615
   HEAP32[$31 >> 2] = $6; //@line 5616
   $32 = $ReallocAsyncCtx11 + 20 | 0; //@line 5617
   HEAP32[$32 >> 2] = $11; //@line 5618
   $33 = $ReallocAsyncCtx11 + 24 | 0; //@line 5619
   HEAP32[$33 >> 2] = $14; //@line 5620
   sp = STACKTOP; //@line 5621
   return;
  }
  ___async_unwind = 0; //@line 5624
  HEAP32[$ReallocAsyncCtx11 >> 2] = 584; //@line 5625
  $28 = $ReallocAsyncCtx11 + 4 | 0; //@line 5626
  HEAP32[$28 >> 2] = $2; //@line 5627
  $29 = $ReallocAsyncCtx11 + 8 | 0; //@line 5628
  HEAP32[$29 >> 2] = $10; //@line 5629
  $30 = $ReallocAsyncCtx11 + 12 | 0; //@line 5630
  HEAP32[$30 >> 2] = $4; //@line 5631
  $31 = $ReallocAsyncCtx11 + 16 | 0; //@line 5632
  HEAP32[$31 >> 2] = $6; //@line 5633
  $32 = $ReallocAsyncCtx11 + 20 | 0; //@line 5634
  HEAP32[$32 >> 2] = $11; //@line 5635
  $33 = $ReallocAsyncCtx11 + 24 | 0; //@line 5636
  HEAP32[$33 >> 2] = $14; //@line 5637
  sp = STACKTOP; //@line 5638
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 5642
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 5643
  FUNCTION_TABLE_vi[$18 & 1023]($12); //@line 5644
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 583; //@line 5647
   $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 5648
   HEAP32[$19 >> 2] = $2; //@line 5649
   $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 5650
   HEAP32[$20 >> 2] = $10; //@line 5651
   $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 5652
   HEAP32[$21 >> 2] = $4; //@line 5653
   $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 5654
   HEAP32[$22 >> 2] = $12; //@line 5655
   $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 5656
   HEAP32[$23 >> 2] = $14; //@line 5657
   $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 5658
   HEAP32[$24 >> 2] = $6; //@line 5659
   $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 5660
   HEAP32[$25 >> 2] = $11; //@line 5661
   sp = STACKTOP; //@line 5662
   return;
  }
  ___async_unwind = 0; //@line 5665
  HEAP32[$ReallocAsyncCtx10 >> 2] = 583; //@line 5666
  $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 5667
  HEAP32[$19 >> 2] = $2; //@line 5668
  $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 5669
  HEAP32[$20 >> 2] = $10; //@line 5670
  $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 5671
  HEAP32[$21 >> 2] = $4; //@line 5672
  $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 5673
  HEAP32[$22 >> 2] = $12; //@line 5674
  $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 5675
  HEAP32[$23 >> 2] = $14; //@line 5676
  $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 5677
  HEAP32[$24 >> 2] = $6; //@line 5678
  $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 5679
  HEAP32[$25 >> 2] = $11; //@line 5680
  sp = STACKTOP; //@line 5681
  return;
 }
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i15 = 0, $$1 = 0, $10 = 0, $16 = 0, $18 = 0, $22 = 0, $26 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $48 = 0, $51 = 0, $58 = 0, $60 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19119
 STACKTOP = STACKTOP + 16 | 0; //@line 19120
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19120
 $vararg_buffer1 = sp + 8 | 0; //@line 19121
 $vararg_buffer = sp; //@line 19122
 _printf(13258, $vararg_buffer) | 0; //@line 19123
 _printf(13802, $vararg_buffer1) | 0; //@line 19124
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 19125
 _putchar(10) | 0; //@line 19126
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 562; //@line 19129
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 19131
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 19133
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 19135
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 19137
  sp = STACKTOP; //@line 19138
  STACKTOP = sp; //@line 19139
  return 0; //@line 19139
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 19141
 if (HEAP32[$0 + 968 >> 2] | 0) {
  $$1 = -1e3; //@line 19146
  STACKTOP = sp; //@line 19147
  return $$1 | 0; //@line 19147
 }
 $10 = HEAP8[$1 + 5 >> 0] | 0; //@line 19150
 if ($10 << 24 >> 24 > (__ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0) << 24 >> 24) {
  $26 = $10; //@line 19155
 } else {
  $26 = __ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 19159
 }
 HEAP8[$vararg_buffer >> 0] = 0; //@line 19161
 $16 = $0 + 288 | 0; //@line 19162
 __ZN11LoRaMacMcps18reset_confirmationEv($16); //@line 19163
 HEAP8[$0 + 895 >> 0] = 1; //@line 19165
 $18 = $0 + 894 | 0; //@line 19166
 HEAP8[$18 >> 0] = 1; //@line 19167
 switch (HEAP32[$1 >> 2] | 0) {
 case 0:
  {
   HEAP8[$vararg_buffer >> 0] = 64; //@line 19171
   label = 10; //@line 19172
   break;
  }
 case 1:
  {
   HEAP8[$vararg_buffer >> 0] = -128; //@line 19176
   HEAP8[$18 >> 0] = HEAP8[$1 + 6 >> 0] | 0; //@line 19179
   label = 10; //@line 19180
   break;
  }
 case 3:
  {
   HEAP8[$vararg_buffer >> 0] = -32; //@line 19184
   label = 10; //@line 19185
   break;
  }
 default:
  {
   $$0 = -1003; //@line 19189
  }
 }
 do {
  if ((label | 0) == 10) {
   $22 = $0 + 1156 | 0; //@line 19194
   if (!(HEAP8[$22 >> 0] | 0)) {
    if (!(__ZN7LoRaPHY18verify_tx_datarateEhb(HEAP32[$0 >> 2] | 0, $26, 0) | 0)) {
     $$0 = -1003; //@line 19201
     break;
    }
    HEAP8[$0 + 1097 >> 0] = $26; //@line 19205
    $35 = HEAP8[$22 >> 0] << 7 & 255; //@line 19208
   } else {
    $35 = -128; //@line 19210
   }
   $30 = HEAP8[$1 + 4 >> 0] | 0; //@line 19213
   $32 = HEAP32[$1 + 8 >> 2] | 0; //@line 19215
   $34 = HEAP16[$1 + 12 >> 1] | 0; //@line 19217
   HEAP8[$vararg_buffer1 >> 0] = $35; //@line 19218
   $AsyncCtx5 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19219
   $36 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $vararg_buffer, $vararg_buffer1, $30, $32, $34) | 0; //@line 19220
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 563; //@line 19223
    HEAP32[$AsyncCtx5 + 4 >> 2] = $16; //@line 19225
    HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 19227
    HEAP32[$AsyncCtx5 + 12 >> 2] = $vararg_buffer1; //@line 19229
    HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer; //@line 19231
    HEAP32[$AsyncCtx5 + 20 >> 2] = $1; //@line 19233
    sp = STACKTOP; //@line 19234
    STACKTOP = sp; //@line 19235
    return 0; //@line 19235
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 19237
   if (!$36) {
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) + 11 >> 0] = 0; //@line 19242
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) + 10 >> 0] = 0; //@line 19245
    $48 = HEAP32[$0 + 956 >> 2] | 0; //@line 19247
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) + 16 >> 2] = $48; //@line 19250
    $AsyncCtx8 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19251
    $51 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 19252
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 564; //@line 19255
     HEAP32[$AsyncCtx8 + 4 >> 2] = $vararg_buffer1; //@line 19257
     HEAP32[$AsyncCtx8 + 8 >> 2] = $1; //@line 19259
     HEAP32[$AsyncCtx8 + 12 >> 2] = $16; //@line 19261
     HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 19263
     HEAP32[$AsyncCtx8 + 20 >> 2] = $vararg_buffer; //@line 19265
     sp = STACKTOP; //@line 19266
     STACKTOP = sp; //@line 19267
     return 0; //@line 19267
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 19269
    if (!$51) {
     $58 = HEAP32[$1 >> 2] | 0; //@line 19272
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) >> 2] = $58; //@line 19274
     $60 = $0 + 944 | 0; //@line 19275
     HEAP8[$60 >> 0] = HEAP8[$60 >> 0] | 1; //@line 19278
     $$0 = 0; //@line 19279
     break;
    } else {
     $$0$i15 = $51; //@line 19282
    }
   } else {
    $$0$i15 = $36; //@line 19285
   }
   HEAP8[$0 + 373 >> 0] = 0; //@line 19288
   $$0 = $$0$i15; //@line 19289
  }
 } while (0);
 $$1 = $$0; //@line 19292
 STACKTOP = sp; //@line 19293
 return $$1 | 0; //@line 19293
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre$i$i4 = 0, $$pre10 = 0, $12 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $4 = 0, $41 = 0, $49 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4002
 STACKTOP = STACKTOP + 16 | 0; //@line 4003
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4003
 $2 = sp; //@line 4004
 $3 = $1 + 12 | 0; //@line 4005
 $4 = HEAP32[$3 >> 2] | 0; //@line 4006
 if ($4 | 0) {
  $6 = $0 + 56 | 0; //@line 4009
  if (($6 | 0) != ($1 | 0)) {
   $8 = $0 + 68 | 0; //@line 4012
   $9 = HEAP32[$8 >> 2] | 0; //@line 4013
   do {
    if (!$9) {
     $20 = $4; //@line 4017
     label = 7; //@line 4018
    } else {
     $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 4021
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 4022
     FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 4023
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 163; //@line 4026
      HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 4028
      HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 4030
      HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 4032
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 4034
      HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 4036
      sp = STACKTOP; //@line 4037
      STACKTOP = sp; //@line 4038
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 4040
      $$pre = HEAP32[$3 >> 2] | 0; //@line 4041
      if (!$$pre) {
       $25 = 0; //@line 4044
       break;
      } else {
       $20 = $$pre; //@line 4047
       label = 7; //@line 4048
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 7) {
     $21 = HEAP32[$20 + 4 >> 2] | 0; //@line 4057
     $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 4058
     FUNCTION_TABLE_vii[$21 & 31]($6, $1); //@line 4059
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 164; //@line 4062
      HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 4064
      HEAP32[$AsyncCtx2 + 8 >> 2] = $8; //@line 4066
      HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 4068
      sp = STACKTOP; //@line 4069
      STACKTOP = sp; //@line 4070
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4072
      $25 = HEAP32[$3 >> 2] | 0; //@line 4074
      break;
     }
    }
   } while (0);
   HEAP32[$8 >> 2] = $25; //@line 4079
  }
  _gpio_irq_set($0 + 28 | 0, 2, 1); //@line 4082
  STACKTOP = sp; //@line 4083
  return;
 }
 HEAP32[$2 >> 2] = 0; //@line 4085
 HEAP32[$2 + 4 >> 2] = 0; //@line 4085
 HEAP32[$2 + 8 >> 2] = 0; //@line 4085
 HEAP32[$2 + 12 >> 2] = 0; //@line 4085
 $27 = $0 + 56 | 0; //@line 4086
 do {
  if (($27 | 0) != ($2 | 0)) {
   $29 = $0 + 68 | 0; //@line 4090
   $30 = HEAP32[$29 >> 2] | 0; //@line 4091
   if ($30 | 0) {
    $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 4095
    $AsyncCtx5 = _emscripten_alloc_async_context(24, sp) | 0; //@line 4096
    FUNCTION_TABLE_vi[$33 & 1023]($27); //@line 4097
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 165; //@line 4100
     HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 4102
     HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 4104
     HEAP32[$AsyncCtx5 + 12 >> 2] = $27; //@line 4106
     HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 4108
     HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 4110
     sp = STACKTOP; //@line 4111
     STACKTOP = sp; //@line 4112
     return;
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 4114
    $$phi$trans$insert = $2 + 12 | 0; //@line 4115
    $$pre10 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 4116
    if ($$pre10 | 0) {
     $41 = HEAP32[$$pre10 + 4 >> 2] | 0; //@line 4120
     $AsyncCtx8 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4121
     FUNCTION_TABLE_vii[$41 & 31]($27, $2); //@line 4122
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 166; //@line 4125
      HEAP32[$AsyncCtx8 + 4 >> 2] = $$phi$trans$insert; //@line 4127
      HEAP32[$AsyncCtx8 + 8 >> 2] = $29; //@line 4129
      HEAP32[$AsyncCtx8 + 12 >> 2] = $2; //@line 4131
      HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 4133
      sp = STACKTOP; //@line 4134
      STACKTOP = sp; //@line 4135
      return;
     }
     _emscripten_free_async_context($AsyncCtx8 | 0); //@line 4137
     $$pre$i$i4 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 4138
     HEAP32[$29 >> 2] = $$pre$i$i4; //@line 4139
     if (!$$pre$i$i4) {
      break;
     }
     $49 = HEAP32[$$pre$i$i4 + 8 >> 2] | 0; //@line 4146
     $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4147
     FUNCTION_TABLE_vi[$49 & 1023]($2); //@line 4148
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 167; //@line 4151
      HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 4153
      HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 4155
      sp = STACKTOP; //@line 4156
      STACKTOP = sp; //@line 4157
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4159
      break;
     }
    }
   }
   HEAP32[$29 >> 2] = 0; //@line 4164
  }
 } while (0);
 _gpio_irq_set($0 + 28 | 0, 2, 0); //@line 4168
 STACKTOP = sp; //@line 4169
 return;
}
function __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $28 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1); //@line 26961
 HEAP32[$0 >> 2] = 968; //@line 26962
 $2 = $0 + 328 | 0; //@line 26963
 HEAP32[$2 >> 2] = HEAP32[262]; //@line 26964
 HEAP32[$2 + 4 >> 2] = HEAP32[263]; //@line 26964
 HEAP32[$2 + 8 >> 2] = HEAP32[264]; //@line 26964
 HEAP32[$2 + 12 >> 2] = HEAP32[265]; //@line 26964
 HEAP32[$2 + 16 >> 2] = HEAP32[266]; //@line 26964
 HEAP32[$2 + 20 >> 2] = HEAP32[267]; //@line 26964
 $3 = $0 + 352 | 0; //@line 26965
 HEAP32[$3 >> 2] = HEAP32[268]; //@line 26966
 HEAP32[$3 + 4 >> 2] = HEAP32[269]; //@line 26966
 HEAP32[$3 + 8 >> 2] = HEAP32[270]; //@line 26966
 HEAP32[$3 + 12 >> 2] = HEAP32[271]; //@line 26966
 HEAP32[$3 + 16 >> 2] = HEAP32[272]; //@line 26966
 HEAP32[$3 + 20 >> 2] = HEAP32[273]; //@line 26966
 $4 = $0 + 376 | 0; //@line 26967
 HEAP32[$4 >> 2] = HEAP32[274]; //@line 26968
 HEAP32[$4 + 4 >> 2] = HEAP32[275]; //@line 26968
 HEAP32[$4 + 8 >> 2] = HEAP32[276]; //@line 26968
 HEAP32[$4 + 12 >> 2] = HEAP32[277]; //@line 26968
 HEAP32[$4 + 16 >> 2] = HEAP32[278]; //@line 26968
 HEAP32[$4 + 20 >> 2] = HEAP32[279]; //@line 26968
 $5 = $0 + 400 | 0; //@line 26969
 HEAP32[$5 >> 2] = HEAP32[280]; //@line 26970
 HEAP32[$5 + 4 >> 2] = HEAP32[281]; //@line 26970
 HEAP32[$5 + 8 >> 2] = HEAP32[282]; //@line 26970
 HEAP32[$5 + 12 >> 2] = HEAP32[283]; //@line 26970
 HEAP32[$5 + 16 >> 2] = HEAP32[284]; //@line 26970
 HEAP32[$5 + 20 >> 2] = HEAP32[285]; //@line 26970
 $6 = $0 + 424 | 0; //@line 26971
 HEAP32[$6 >> 2] = HEAP32[286]; //@line 26972
 HEAP32[$6 + 4 >> 2] = HEAP32[287]; //@line 26972
 HEAP32[$6 + 8 >> 2] = HEAP32[288]; //@line 26972
 HEAP32[$6 + 12 >> 2] = HEAP32[289]; //@line 26972
 HEAP32[$6 + 16 >> 2] = HEAP32[290]; //@line 26972
 HEAP32[$6 + 20 >> 2] = HEAP32[291]; //@line 26972
 $7 = $0 + 448 | 0; //@line 26973
 HEAP32[$7 >> 2] = HEAP32[292]; //@line 26974
 HEAP32[$7 + 4 >> 2] = HEAP32[293]; //@line 26974
 HEAP32[$7 + 8 >> 2] = HEAP32[294]; //@line 26974
 HEAP32[$7 + 12 >> 2] = HEAP32[295]; //@line 26974
 HEAP32[$7 + 16 >> 2] = HEAP32[296]; //@line 26974
 HEAP32[$7 + 20 >> 2] = HEAP32[297]; //@line 26974
 $8 = $0 + 136 | 0; //@line 26975
 HEAP32[$8 >> 2] = HEAP32[298]; //@line 26976
 HEAP32[$8 + 4 >> 2] = HEAP32[299]; //@line 26976
 HEAP32[$8 + 8 >> 2] = HEAP32[300]; //@line 26976
 $9 = $0 + 148 | 0; //@line 26977
 HEAP32[$9 >> 2] = HEAP32[301]; //@line 26978
 HEAP32[$9 + 4 >> 2] = HEAP32[302]; //@line 26978
 HEAP32[$9 + 8 >> 2] = HEAP32[303]; //@line 26978
 $10 = $0 + 160 | 0; //@line 26979
 HEAP32[$10 >> 2] = HEAP32[304]; //@line 26980
 HEAP32[$10 + 4 >> 2] = HEAP32[305]; //@line 26980
 HEAP32[$10 + 8 >> 2] = HEAP32[306]; //@line 26980
 $11 = $0 + 474 | 0; //@line 26981
 HEAP16[$11 >> 1] = 7; //@line 26982
 $12 = $0 + 472 | 0; //@line 26983
 __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $12, $11, 1); //@line 26984
 HEAP32[$0 + 112 >> 2] = $8; //@line 26986
 HEAP8[$0 + 116 >> 0] = 16; //@line 26988
 HEAP32[$0 + 120 >> 2] = $12; //@line 26990
 HEAP32[$0 + 124 >> 2] = $11; //@line 26992
 HEAP8[$0 + 128 >> 0] = 1; //@line 26994
 HEAP32[$0 + 72 >> 2] = $2; //@line 26996
 HEAP8[$0 + 76 >> 0] = 6; //@line 26998
 HEAP32[$0 + 80 >> 2] = 1228; //@line 27000
 HEAP8[$0 + 84 >> 0] = 8; //@line 27002
 HEAP32[$0 + 88 >> 2] = 14001; //@line 27004
 HEAP8[$0 + 92 >> 0] = 8; //@line 27006
 HEAP32[$0 + 96 >> 2] = 14009; //@line 27008
 HEAP8[$0 + 100 >> 0] = 8; //@line 27010
 HEAP32[$0 + 104 >> 2] = 14017; //@line 27012
 HEAP8[$0 + 108 >> 0] = 8; //@line 27014
 $28 = $0 + 132 | 0; //@line 27015
 HEAP8[$28 >> 0] = HEAP8[$28 >> 0] & -4; //@line 27018
 $31 = $0 + 12 | 0; //@line 27019
 $32 = $0 + 18 | 0; //@line 27020
 HEAP32[$31 >> 2] = 16843009; //@line 27021
 HEAP16[$31 + 4 >> 1] = 257; //@line 27021
 HEAP8[$32 >> 0] = 3; //@line 27022
 HEAP8[$0 + 20 >> 0] = 16; //@line 27024
 HEAP8[$0 + 19 >> 0] = 5; //@line 27026
 HEAP8[$0 + 26 >> 0] = 0; //@line 27028
 HEAP8[$0 + 27 >> 0] = 7; //@line 27030
 HEAP8[$0 + 28 >> 0] = 0; //@line 27032
 HEAP8[$0 + 29 >> 0] = 7; //@line 27034
 HEAP8[$0 + 30 >> 0] = 0; //@line 27036
 HEAP8[$0 + 31 >> 0] = 5; //@line 27038
 HEAP8[$0 + 32 >> 0] = 0; //@line 27040
 HEAP8[$0 + 33 >> 0] = 5; //@line 27042
 HEAP8[$0 + 34 >> 0] = 0; //@line 27044
 HEAP8[$0 + 21 >> 0] = 7; //@line 27046
 HEAP8[$0 + 22 >> 0] = 0; //@line 27048
 HEAP8[$0 + 23 >> 0] = 0; //@line 27050
 HEAPF32[$0 + 56 >> 2] = 16.0; //@line 27052
 HEAPF32[$0 + 60 >> 2] = 2.1500000953674316; //@line 27054
 HEAP8[$0 + 24 >> 0] = 64; //@line 27056
 HEAP8[$0 + 25 >> 0] = 32; //@line 27058
 HEAP16[$0 + 36 >> 1] = 3e3; //@line 27060
 HEAP16[$0 + 38 >> 1] = 1e3; //@line 27062
 HEAP16[$0 + 40 >> 1] = 2e3; //@line 27064
 HEAP16[$0 + 46 >> 1] = 7; //@line 27066
 HEAP16[$0 + 42 >> 1] = 5e3; //@line 27068
 HEAP16[$0 + 44 >> 1] = 6e3; //@line 27070
 HEAP16[$0 + 48 >> 1] = 16384; //@line 27072
 HEAP16[$0 + 50 >> 1] = 2e3; //@line 27074
 HEAP16[$0 + 52 >> 1] = 1e3; //@line 27076
 HEAP8[$0 + 64 >> 0] = 0; //@line 27078
 HEAP32[$0 + 68 >> 2] = 869525e3; //@line 27080
 return;
}
function _ticker_read_us($0) {
 $0 = $0 | 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $36 = 0, $37 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $88 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5600
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5601
 _initialize($0); //@line 5602
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 717; //@line 5605
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5607
  sp = STACKTOP; //@line 5608
  tempRet0 = 0; //@line 5609
  return 0; //@line 5610
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5612
 $2 = $0 + 4 | 0; //@line 5613
 $3 = HEAP32[$2 >> 2] | 0; //@line 5614
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5617
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5618
 $7 = FUNCTION_TABLE_i[$6 & 7]() | 0; //@line 5619
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 718; //@line 5622
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 5624
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 5626
  sp = STACKTOP; //@line 5627
  tempRet0 = 0; //@line 5628
  return 0; //@line 5629
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5631
 if (($7 | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $103 = HEAP32[$2 >> 2] | 0; //@line 5637
  $104 = $103 + 48 | 0; //@line 5638
  $105 = $104; //@line 5639
  $106 = $105; //@line 5640
  $107 = HEAP32[$106 >> 2] | 0; //@line 5641
  $108 = $105 + 4 | 0; //@line 5642
  $109 = $108; //@line 5643
  $110 = HEAP32[$109 >> 2] | 0; //@line 5644
  tempRet0 = $110; //@line 5645
  return $107 | 0; //@line 5646
 }
 $14 = $3 + 32 | 0; //@line 5648
 $19 = $7 - (HEAP32[$14 >> 2] | 0) & HEAP32[$3 + 12 >> 2]; //@line 5653
 HEAP32[$14 >> 2] = $7; //@line 5654
 $21 = HEAP32[$3 + 8 >> 2] | 0; //@line 5656
 L10 : do {
  if (($21 | 0) < 1e6) {
   switch ($21 | 0) {
   case 32768:
    {
     break;
    }
   default:
    {
     label = 9; //@line 5665
     break L10;
    }
   }
   $22 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5669
   $24 = _bitshift64Lshr($22 | 0, tempRet0 | 0, 15) | 0; //@line 5671
   $25 = tempRet0; //@line 5672
   $28 = $3 + 40 | 0; //@line 5675
   $29 = $28; //@line 5676
   $35 = _i64Add(HEAP32[$29 >> 2] | 0, HEAP32[$29 + 4 >> 2] | 0, $19 * 1e6 & 32704 | 0, 0) | 0; //@line 5682
   $36 = tempRet0; //@line 5683
   $37 = $28; //@line 5684
   HEAP32[$37 >> 2] = $35; //@line 5686
   HEAP32[$37 + 4 >> 2] = $36; //@line 5689
   if ($36 >>> 0 < 0 | ($36 | 0) == 0 & $35 >>> 0 < 32768) {
    $95 = $24; //@line 5696
    $96 = $25; //@line 5696
   } else {
    $46 = _i64Add($24 | 0, $25 | 0, 1, 0) | 0; //@line 5698
    $47 = tempRet0; //@line 5699
    $48 = _i64Add($35 | 0, $36 | 0, -32768, -1) | 0; //@line 5700
    $50 = $28; //@line 5702
    HEAP32[$50 >> 2] = $48; //@line 5704
    HEAP32[$50 + 4 >> 2] = tempRet0; //@line 5707
    $95 = $46; //@line 5708
    $96 = $47; //@line 5708
   }
  } else {
   switch ($21 | 0) {
   case 1e6:
    {
     $95 = $19; //@line 5713
     $96 = 0; //@line 5713
     break;
    }
   default:
    {
     label = 9; //@line 5717
    }
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  $54 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5723
  $55 = tempRet0; //@line 5724
  $56 = ___udivdi3($54 | 0, $55 | 0, $21 | 0, 0) | 0; //@line 5725
  $57 = tempRet0; //@line 5726
  $58 = ___muldi3($56 | 0, $57 | 0, $21 | 0, 0) | 0; //@line 5727
  $60 = _i64Subtract($54 | 0, $55 | 0, $58 | 0, tempRet0 | 0) | 0; //@line 5729
  $62 = $3 + 40 | 0; //@line 5731
  $63 = $62; //@line 5732
  $69 = _i64Add($60 | 0, tempRet0 | 0, HEAP32[$63 >> 2] | 0, HEAP32[$63 + 4 >> 2] | 0) | 0; //@line 5738
  $70 = tempRet0; //@line 5739
  $71 = $62; //@line 5740
  HEAP32[$71 >> 2] = $69; //@line 5742
  HEAP32[$71 + 4 >> 2] = $70; //@line 5745
  if ($70 >>> 0 < 0 | ($70 | 0) == 0 & $69 >>> 0 < $21 >>> 0) {
   $95 = $56; //@line 5752
   $96 = $57; //@line 5752
  } else {
   $80 = _i64Add($56 | 0, $57 | 0, 1, 0) | 0; //@line 5754
   $81 = tempRet0; //@line 5755
   $82 = _i64Subtract($69 | 0, $70 | 0, $21 | 0, 0) | 0; //@line 5756
   $84 = $62; //@line 5758
   HEAP32[$84 >> 2] = $82; //@line 5760
   HEAP32[$84 + 4 >> 2] = tempRet0; //@line 5763
   $95 = $80; //@line 5764
   $96 = $81; //@line 5764
  }
 }
 $88 = $3 + 48 | 0; //@line 5767
 $89 = $88; //@line 5768
 $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 5774
 $99 = $88; //@line 5776
 HEAP32[$99 >> 2] = $97; //@line 5778
 HEAP32[$99 + 4 >> 2] = tempRet0; //@line 5781
 $103 = HEAP32[$2 >> 2] | 0; //@line 5782
 $104 = $103 + 48 | 0; //@line 5783
 $105 = $104; //@line 5784
 $106 = $105; //@line 5785
 $107 = HEAP32[$106 >> 2] | 0; //@line 5786
 $108 = $105 + 4 | 0; //@line 5787
 $109 = $108; //@line 5788
 $110 = HEAP32[$109 >> 2] | 0; //@line 5789
 tempRet0 = $110; //@line 5790
 return $107 | 0; //@line 5791
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $32 = 0, $33 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19331
 STACKTOP = STACKTOP + 32 | 0; //@line 19332
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 19332
 $$byval_copy = sp + 24 | 0; //@line 19333
 $vararg_buffer3 = sp + 16 | 0; //@line 19334
 $vararg_buffer1 = sp + 8 | 0; //@line 19335
 _printf(13258, sp) | 0; //@line 19337
 _printf(13839, $vararg_buffer1) | 0; //@line 19338
 $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 19339
 _putchar(10) | 0; //@line 19340
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 566; //@line 19343
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 19345
  HEAP32[$AsyncCtx9 + 8 >> 2] = $1; //@line 19347
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer1; //@line 19349
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer3; //@line 19351
  HEAP32[$AsyncCtx9 + 20 >> 2] = $vararg_buffer3; //@line 19353
  HEAP32[$AsyncCtx9 + 24 >> 2] = $$byval_copy; //@line 19355
  HEAP32[$AsyncCtx9 + 28 >> 2] = $$byval_copy; //@line 19357
  sp = STACKTOP; //@line 19358
  STACKTOP = sp; //@line 19359
  return 0; //@line 19359
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 19361
 $10 = $0 + 360 | 0; //@line 19363
 $AsyncCtx12 = _emscripten_alloc_async_context(36, sp) | 0; //@line 19364
 $11 = __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0 + 348 | 0, $1, $10) | 0; //@line 19365
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 567; //@line 19368
  HEAP32[$AsyncCtx12 + 4 >> 2] = $10; //@line 19370
  HEAP32[$AsyncCtx12 + 8 >> 2] = $1; //@line 19372
  HEAP32[$AsyncCtx12 + 12 >> 2] = $vararg_buffer1; //@line 19374
  HEAP32[$AsyncCtx12 + 16 >> 2] = $vararg_buffer3; //@line 19376
  HEAP32[$AsyncCtx12 + 20 >> 2] = $vararg_buffer3; //@line 19378
  HEAP32[$AsyncCtx12 + 24 >> 2] = $$byval_copy; //@line 19380
  HEAP32[$AsyncCtx12 + 28 >> 2] = $$byval_copy; //@line 19382
  HEAP32[$AsyncCtx12 + 32 >> 2] = $0; //@line 19384
  sp = STACKTOP; //@line 19385
  STACKTOP = sp; //@line 19386
  return 0; //@line 19386
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 19388
 if ($11 | 0) {
  STACKTOP = sp; //@line 19391
  return $11 | 0; //@line 19391
 }
 if ((HEAP32[$10 >> 2] | 0) != 2) {
  STACKTOP = sp; //@line 19396
  return $11 | 0; //@line 19396
 }
 switch (HEAP32[$1 >> 2] | 0) {
 case 0:
  {
   break;
  }
 case 10:
  {
   label = 8; //@line 19404
   break;
  }
 default:
  {
   STACKTOP = sp; //@line 19408
   return $11 | 0; //@line 19408
  }
 }
 if ((label | 0) == 8) {
  if (!(HEAP8[$0 + 372 >> 0] | 0)) {
   STACKTOP = sp; //@line 19416
   return $11 | 0; //@line 19416
  }
 }
 _printf(13258, $vararg_buffer3) | 0; //@line 19419
 _printf(13285, $$byval_copy) | 0; //@line 19420
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 19421
 _putchar(10) | 0; //@line 19422
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 568; //@line 19425
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 19427
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 19429
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 19431
  HEAP32[$AsyncCtx + 16 >> 2] = $11; //@line 19433
  sp = STACKTOP; //@line 19434
  STACKTOP = sp; //@line 19435
  return 0; //@line 19435
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 19437
 $32 = HEAP32[$0 + 1328 >> 2] | 0; //@line 19439
 HEAP32[$vararg_buffer1 >> 2] = 366; //@line 19440
 HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 19442
 $AsyncCtx15 = _emscripten_alloc_async_context(16, sp) | 0; //@line 19443
 HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 19444
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 19444
 $33 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($32, $0, $$byval_copy) | 0; //@line 19445
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 569; //@line 19448
  HEAP32[$AsyncCtx15 + 4 >> 2] = $vararg_buffer1; //@line 19450
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 19452
  HEAP32[$AsyncCtx15 + 12 >> 2] = $11; //@line 19454
  sp = STACKTOP; //@line 19455
  STACKTOP = sp; //@line 19456
  return 0; //@line 19456
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 19458
 do {
  if (!$33) {
   $AsyncCtx19 = _emscripten_alloc_async_context(16, sp) | 0; //@line 19462
   _mbed_assert_internal(13142, 13151, 217); //@line 19463
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 570; //@line 19466
    HEAP32[$AsyncCtx19 + 4 >> 2] = $vararg_buffer1; //@line 19468
    HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 19470
    HEAP32[$AsyncCtx19 + 12 >> 2] = $11; //@line 19472
    sp = STACKTOP; //@line 19473
    STACKTOP = sp; //@line 19474
    return 0; //@line 19474
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 19476
    break;
   }
  }
 } while (0);
 HEAP32[$0 + 364 >> 2] = 2; //@line 19482
 STACKTOP = sp; //@line 19483
 return $11 | 0; //@line 19483
}
function __ZL18lora_event_handler11lora_events($0) {
 $0 = $0 | 0;
 var $$07$i = 0, $1 = 0, $10 = 0, $15 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7063
 STACKTOP = STACKTOP + 96 | 0; //@line 7064
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 7064
 $vararg_buffer11 = sp + 32 | 0; //@line 7065
 $vararg_buffer8 = sp + 24 | 0; //@line 7066
 $vararg_buffer4 = sp + 16 | 0; //@line 7067
 $vararg_buffer1 = sp + 8 | 0; //@line 7068
 $vararg_buffer = sp; //@line 7069
 $1 = sp + 36 | 0; //@line 7070
 switch ($0 | 0) {
 case 0:
  {
   $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7073
   _puts(15848) | 0; //@line 7074
   if (___async) {
    HEAP32[$AsyncCtx31 >> 2] = 766; //@line 7077
    sp = STACKTOP; //@line 7078
    STACKTOP = sp; //@line 7079
    return;
   }
   _emscripten_free_async_context($AsyncCtx31 | 0); //@line 7081
   STACKTOP = sp; //@line 7082
   return;
  }
 case 1:
  {
   __ZN6events10EventQueue14break_dispatchEv(23328); //@line 7086
   $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7087
   _puts(15872) | 0; //@line 7088
   if (___async) {
    HEAP32[$AsyncCtx27 >> 2] = 767; //@line 7091
    sp = STACKTOP; //@line 7092
    STACKTOP = sp; //@line 7093
    return;
   }
   _emscripten_free_async_context($AsyncCtx27 | 0); //@line 7095
   STACKTOP = sp; //@line 7096
   return;
  }
 case 2:
  {
   $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7100
   _puts(15898) | 0; //@line 7101
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 768; //@line 7104
    sp = STACKTOP; //@line 7105
    STACKTOP = sp; //@line 7106
    return;
   }
   _emscripten_free_async_context($AsyncCtx23 | 0); //@line 7108
   STACKTOP = sp; //@line 7109
   return;
  }
 case 6:
 case 5:
 case 4:
 case 3:
  {
   HEAP32[$vararg_buffer >> 2] = $0; //@line 7113
   _printf(15929, $vararg_buffer) | 0; //@line 7114
   STACKTOP = sp; //@line 7115
   return;
  }
 case 7:
  {
   $AsyncCtx19 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7119
   _puts(15966) | 0; //@line 7120
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 769; //@line 7123
    HEAP32[$AsyncCtx19 + 4 >> 2] = $1; //@line 7125
    HEAP32[$AsyncCtx19 + 8 >> 2] = $vararg_buffer1; //@line 7127
    HEAP32[$AsyncCtx19 + 12 >> 2] = $vararg_buffer1; //@line 7129
    HEAP32[$AsyncCtx19 + 16 >> 2] = $vararg_buffer4; //@line 7131
    HEAP32[$AsyncCtx19 + 20 >> 2] = $vararg_buffer4; //@line 7133
    HEAP32[$AsyncCtx19 + 24 >> 2] = $vararg_buffer8; //@line 7135
    HEAP32[$AsyncCtx19 + 28 >> 2] = $vararg_buffer8; //@line 7137
    sp = STACKTOP; //@line 7138
    STACKTOP = sp; //@line 7139
    return;
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 7141
   dest = $1; //@line 7142
   stop = dest + 50 | 0; //@line 7142
   do {
    HEAP8[dest >> 0] = 0; //@line 7142
    dest = dest + 1 | 0; //@line 7142
   } while ((dest | 0) < (stop | 0));
   $9 = __ZN16LoRaWANInterface7receiveEhPhti(23528, 15, $1, 50, 3) | 0; //@line 7143
   $10 = $9 << 16 >> 16; //@line 7144
   do {
    if ($9 << 16 >> 16 < 0) {
     HEAP32[$vararg_buffer1 >> 2] = $10; //@line 7148
     _printf(16003, $vararg_buffer1) | 0; //@line 7149
    } else {
     HEAP32[$vararg_buffer4 >> 2] = 15; //@line 7151
     HEAP32[$vararg_buffer4 + 4 >> 2] = $10; //@line 7153
     _printf(16030, $vararg_buffer4) | 0; //@line 7154
     if ($9 << 16 >> 16) {
      $$07$i = 0; //@line 7157
      $15 = 0; //@line 7157
      do {
       HEAP32[$vararg_buffer8 >> 2] = HEAPU8[$1 + $15 >> 0]; //@line 7162
       _printf(16069, $vararg_buffer8) | 0; //@line 7163
       $$07$i = $$07$i + 1 << 24 >> 24; //@line 7164
       $15 = $$07$i & 255; //@line 7165
      } while (($15 | 0) < ($10 | 0));
     }
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7174
     _putchar(10) | 0; //@line 7175
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 770; //@line 7178
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 7180
      sp = STACKTOP; //@line 7181
      STACKTOP = sp; //@line 7182
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 7184
      break;
     }
    }
   } while (0);
   STACKTOP = sp; //@line 7189
   return;
  }
 case 9:
 case 8:
  {
   HEAP32[$vararg_buffer11 >> 2] = $0; //@line 7193
   _printf(16075, $vararg_buffer11) | 0; //@line 7194
   STACKTOP = sp; //@line 7195
   return;
  }
 case 10:
  {
   $AsyncCtx15 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7199
   _puts(16107) | 0; //@line 7200
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 771; //@line 7203
    sp = STACKTOP; //@line 7204
    STACKTOP = sp; //@line 7205
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7207
   STACKTOP = sp; //@line 7208
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 7212
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $27 = 0, $31 = 0, $35 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx26 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 3422
 STACKTOP = STACKTOP + 80 | 0; //@line 3423
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 3423
 $vararg_buffer20 = sp + 64 | 0; //@line 3424
 $vararg_buffer18 = sp + 56 | 0; //@line 3425
 $vararg_buffer14 = sp + 48 | 0; //@line 3426
 $vararg_buffer12 = sp + 40 | 0; //@line 3427
 $vararg_buffer8 = sp + 32 | 0; //@line 3428
 $vararg_buffer6 = sp + 24 | 0; //@line 3429
 $vararg_buffer1 = sp + 8 | 0; //@line 3430
 _printf(10904, sp) | 0; //@line 3432
 $6 = $4 & 255; //@line 3433
 $7 = $5 & 255; //@line 3434
 HEAP32[$vararg_buffer1 >> 2] = $2; //@line 3435
 HEAP32[$vararg_buffer1 + 4 >> 2] = $3; //@line 3437
 HEAP32[$vararg_buffer1 + 8 >> 2] = $6; //@line 3439
 HEAP32[$vararg_buffer1 + 12 >> 2] = $7; //@line 3441
 _printf(11695, $vararg_buffer1) | 0; //@line 3442
 $AsyncCtx34 = _emscripten_alloc_async_context(76, sp) | 0; //@line 3443
 _putchar(10) | 0; //@line 3444
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 149; //@line 3447
  HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 3449
  HEAP32[$AsyncCtx34 + 8 >> 2] = $6; //@line 3451
  HEAP32[$AsyncCtx34 + 12 >> 2] = $7; //@line 3453
  HEAP32[$AsyncCtx34 + 16 >> 2] = $vararg_buffer6; //@line 3455
  HEAP32[$AsyncCtx34 + 20 >> 2] = $vararg_buffer6; //@line 3457
  HEAP32[$AsyncCtx34 + 24 >> 2] = $vararg_buffer8; //@line 3459
  HEAP32[$AsyncCtx34 + 28 >> 2] = $vararg_buffer8; //@line 3461
  HEAP32[$AsyncCtx34 + 32 >> 2] = $3; //@line 3463
  HEAP32[$AsyncCtx34 + 36 >> 2] = $vararg_buffer12; //@line 3465
  HEAP32[$AsyncCtx34 + 40 >> 2] = $vararg_buffer12; //@line 3467
  HEAP32[$AsyncCtx34 + 44 >> 2] = $vararg_buffer14; //@line 3469
  HEAP32[$AsyncCtx34 + 48 >> 2] = $vararg_buffer14; //@line 3471
  HEAP32[$AsyncCtx34 + 52 >> 2] = $1; //@line 3473
  HEAP32[$AsyncCtx34 + 56 >> 2] = $2; //@line 3475
  HEAP32[$AsyncCtx34 + 60 >> 2] = $vararg_buffer18; //@line 3477
  HEAP32[$AsyncCtx34 + 64 >> 2] = $vararg_buffer18; //@line 3479
  HEAP32[$AsyncCtx34 + 68 >> 2] = $vararg_buffer20; //@line 3481
  HEAP32[$AsyncCtx34 + 72 >> 2] = $vararg_buffer20; //@line 3483
  sp = STACKTOP; //@line 3484
  STACKTOP = sp; //@line 3485
  return;
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 3487
 _emscripten_asm_const_i(6) | 0; //@line 3488
 $27 = $0 + 752 | 0; //@line 3489
 if ((HEAP32[$27 >> 2] | 0) != ($6 | 0)) {
  _printf(10904, $vararg_buffer6) | 0; //@line 3493
  HEAP32[$vararg_buffer8 >> 2] = HEAP32[$27 >> 2]; //@line 3495
  HEAP32[$vararg_buffer8 + 4 >> 2] = $6; //@line 3497
  _printf(11777, $vararg_buffer8) | 0; //@line 3498
  $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3499
  _putchar(10) | 0; //@line 3500
  if (___async) {
   HEAP32[$AsyncCtx30 >> 2] = 150; //@line 3503
   sp = STACKTOP; //@line 3504
   STACKTOP = sp; //@line 3505
   return;
  }
  _emscripten_free_async_context($AsyncCtx30 | 0); //@line 3507
  STACKTOP = sp; //@line 3508
  return;
 }
 $31 = $0 + 756 | 0; //@line 3510
 if ((HEAP32[$31 >> 2] | 0) != ($7 | 0)) {
  _printf(10904, $vararg_buffer12) | 0; //@line 3514
  HEAP32[$vararg_buffer14 >> 2] = HEAP32[$31 >> 2]; //@line 3516
  HEAP32[$vararg_buffer14 + 4 >> 2] = $7; //@line 3518
  _printf(11824, $vararg_buffer14) | 0; //@line 3519
  $AsyncCtx26 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3520
  _putchar(10) | 0; //@line 3521
  if (___async) {
   HEAP32[$AsyncCtx26 >> 2] = 151; //@line 3524
   sp = STACKTOP; //@line 3525
   STACKTOP = sp; //@line 3526
   return;
  }
  _emscripten_free_async_context($AsyncCtx26 | 0); //@line 3528
  STACKTOP = sp; //@line 3529
  return;
 }
 $35 = $0 + 692 | 0; //@line 3531
 if ((HEAP32[$35 >> 2] | 0) == ($3 | 0)) {
  _memcpy($0 + 792 | 0, $1 | 0, $2 | 0) | 0; //@line 3536
  HEAP8[$0 + 782 >> 0] = $2; //@line 3539
  HEAP8[$0 + 781 >> 0] = -35; //@line 3541
  HEAP8[$0 + 780 >> 0] = -5; //@line 3543
  HEAP8[$0 + 783 >> 0] = 1; //@line 3545
  HEAP32[$0 + 784 >> 2] = _emscripten_asm_const_i(3) | 0; //@line 3548
  STACKTOP = sp; //@line 3549
  return;
 }
 _printf(10904, $vararg_buffer18) | 0; //@line 3551
 HEAP32[$vararg_buffer20 >> 2] = HEAP32[$35 >> 2]; //@line 3553
 HEAP32[$vararg_buffer20 + 4 >> 2] = $3; //@line 3555
 _printf(11871, $vararg_buffer20) | 0; //@line 3556
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3557
 _putchar(10) | 0; //@line 3558
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 152; //@line 3561
  sp = STACKTOP; //@line 3562
  STACKTOP = sp; //@line 3563
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3565
 STACKTOP = sp; //@line 3566
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_71($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $26 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $50 = 0, $53 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, sp = 0;
 sp = STACKTOP; //@line 31372
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31376
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31378
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 31381
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 31383
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 31385
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 31387
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 31389
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 31391
 HEAP32[(__ZN11LoRaMacMlme14get_indicationEv(HEAP32[$0 + 4 >> 2] | 0) | 0) >> 2] = 4; //@line 31393
 $20 = $4 + 944 | 0; //@line 31394
 HEAP8[$20 >> 0] = HEAP8[$20 >> 0] | 16; //@line 31397
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($6); //@line 31398
 if ($8) {
  $$3$off0204 = 6; //@line 31400
 } else {
  $26 = (__ZN11LoRaMacMcps16get_confirmationEv($12) | 0) + 10 | 0; //@line 31405
  if ($10 & 32) {
   HEAP8[$26 >> 0] = 1; //@line 31407
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 28 >> 0] = 1; //@line 31410
   $29 = HEAP32[$14 >> 2] | 0; //@line 31411
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 31413
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($29, $4 + 1076 | 0); //@line 31414
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 410; //@line 31417
    $31 = $ReallocAsyncCtx23 + 4 | 0; //@line 31418
    HEAP32[$31 >> 2] = $4; //@line 31419
    $32 = $ReallocAsyncCtx23 + 8 | 0; //@line 31420
    HEAP32[$32 >> 2] = $14; //@line 31421
    $33 = $ReallocAsyncCtx23 + 12 | 0; //@line 31422
    HEAP32[$33 >> 2] = $16; //@line 31423
    $34 = $ReallocAsyncCtx23 + 16 | 0; //@line 31424
    HEAP32[$34 >> 2] = $18; //@line 31425
    sp = STACKTOP; //@line 31426
    return;
   }
   ___async_unwind = 0; //@line 31429
   HEAP32[$ReallocAsyncCtx23 >> 2] = 410; //@line 31430
   $31 = $ReallocAsyncCtx23 + 4 | 0; //@line 31431
   HEAP32[$31 >> 2] = $4; //@line 31432
   $32 = $ReallocAsyncCtx23 + 8 | 0; //@line 31433
   HEAP32[$32 >> 2] = $14; //@line 31434
   $33 = $ReallocAsyncCtx23 + 12 | 0; //@line 31435
   HEAP32[$33 >> 2] = $16; //@line 31436
   $34 = $ReallocAsyncCtx23 + 16 | 0; //@line 31437
   HEAP32[$34 >> 2] = $18; //@line 31438
   sp = STACKTOP; //@line 31439
   return;
  }
  HEAP8[$26 >> 0] = 0; //@line 31442
  if ((HEAPU8[$4 + 895 >> 0] | 0) > (HEAPU8[$4 + 894 >> 0] | 0)) {
   $40 = HEAP32[$14 >> 2] | 0; //@line 31449
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 31451
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($40, $4 + 1076 | 0); //@line 31452
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 411; //@line 31455
    $42 = $ReallocAsyncCtx22 + 4 | 0; //@line 31456
    HEAP32[$42 >> 2] = $4; //@line 31457
    $43 = $ReallocAsyncCtx22 + 8 | 0; //@line 31458
    HEAP32[$43 >> 2] = $14; //@line 31459
    $44 = $ReallocAsyncCtx22 + 12 | 0; //@line 31460
    HEAP32[$44 >> 2] = $16; //@line 31461
    $45 = $ReallocAsyncCtx22 + 16 | 0; //@line 31462
    HEAP32[$45 >> 2] = $18; //@line 31463
    sp = STACKTOP; //@line 31464
    return;
   }
   ___async_unwind = 0; //@line 31467
   HEAP32[$ReallocAsyncCtx22 >> 2] = 411; //@line 31468
   $42 = $ReallocAsyncCtx22 + 4 | 0; //@line 31469
   HEAP32[$42 >> 2] = $4; //@line 31470
   $43 = $ReallocAsyncCtx22 + 8 | 0; //@line 31471
   HEAP32[$43 >> 2] = $14; //@line 31472
   $44 = $ReallocAsyncCtx22 + 12 | 0; //@line 31473
   HEAP32[$44 >> 2] = $16; //@line 31474
   $45 = $ReallocAsyncCtx22 + 16 | 0; //@line 31475
   HEAP32[$45 >> 2] = $18; //@line 31476
   sp = STACKTOP; //@line 31477
   return;
  } else {
   $$3$off0204 = 2; //@line 31480
  }
 }
 $46 = $4 + 944 | 0; //@line 31483
 HEAP8[$46 >> 0] = $$3$off0204 | HEAP8[$46 >> 0] & -7; //@line 31487
 $50 = $4 + 944 | 0; //@line 31488
 HEAP8[$50 >> 0] = HEAP8[$50 >> 0] | 32; //@line 31491
 $53 = HEAP32[$14 >> 2] | 0; //@line 31492
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 31494
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($53, $4 + 996 | 0, 1); //@line 31495
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 31498
  $55 = $ReallocAsyncCtx17 + 4 | 0; //@line 31499
  HEAP32[$55 >> 2] = $16; //@line 31500
  $56 = $ReallocAsyncCtx17 + 8 | 0; //@line 31501
  HEAP32[$56 >> 2] = $18; //@line 31502
  sp = STACKTOP; //@line 31503
  return;
 }
 ___async_unwind = 0; //@line 31506
 HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 31507
 $55 = $ReallocAsyncCtx17 + 4 | 0; //@line 31508
 HEAP32[$55 >> 2] = $16; //@line 31509
 $56 = $ReallocAsyncCtx17 + 8 | 0; //@line 31510
 HEAP32[$56 >> 2] = $18; //@line 31511
 sp = STACKTOP; //@line 31512
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_69($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $26 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $50 = 0, $53 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, sp = 0;
 sp = STACKTOP; //@line 31041
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31045
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31047
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 31050
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 31052
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 31054
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 31056
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 31058
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 31060
 HEAP32[(__ZN11LoRaMacMlme14get_indicationEv(HEAP32[$0 + 4 >> 2] | 0) | 0) >> 2] = 4; //@line 31062
 $20 = $4 + 944 | 0; //@line 31063
 HEAP8[$20 >> 0] = HEAP8[$20 >> 0] | 16; //@line 31066
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($6); //@line 31067
 if ($8) {
  $$3$off0204 = 6; //@line 31069
 } else {
  $26 = (__ZN11LoRaMacMcps16get_confirmationEv($12) | 0) + 10 | 0; //@line 31074
  if ($10 & 32) {
   HEAP8[$26 >> 0] = 1; //@line 31076
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 28 >> 0] = 1; //@line 31079
   $29 = HEAP32[$14 >> 2] | 0; //@line 31080
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 31082
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($29, $4 + 1076 | 0); //@line 31083
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 410; //@line 31086
    $31 = $ReallocAsyncCtx23 + 4 | 0; //@line 31087
    HEAP32[$31 >> 2] = $4; //@line 31088
    $32 = $ReallocAsyncCtx23 + 8 | 0; //@line 31089
    HEAP32[$32 >> 2] = $14; //@line 31090
    $33 = $ReallocAsyncCtx23 + 12 | 0; //@line 31091
    HEAP32[$33 >> 2] = $16; //@line 31092
    $34 = $ReallocAsyncCtx23 + 16 | 0; //@line 31093
    HEAP32[$34 >> 2] = $18; //@line 31094
    sp = STACKTOP; //@line 31095
    return;
   }
   ___async_unwind = 0; //@line 31098
   HEAP32[$ReallocAsyncCtx23 >> 2] = 410; //@line 31099
   $31 = $ReallocAsyncCtx23 + 4 | 0; //@line 31100
   HEAP32[$31 >> 2] = $4; //@line 31101
   $32 = $ReallocAsyncCtx23 + 8 | 0; //@line 31102
   HEAP32[$32 >> 2] = $14; //@line 31103
   $33 = $ReallocAsyncCtx23 + 12 | 0; //@line 31104
   HEAP32[$33 >> 2] = $16; //@line 31105
   $34 = $ReallocAsyncCtx23 + 16 | 0; //@line 31106
   HEAP32[$34 >> 2] = $18; //@line 31107
   sp = STACKTOP; //@line 31108
   return;
  }
  HEAP8[$26 >> 0] = 0; //@line 31111
  if ((HEAPU8[$4 + 895 >> 0] | 0) > (HEAPU8[$4 + 894 >> 0] | 0)) {
   $40 = HEAP32[$14 >> 2] | 0; //@line 31118
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 31120
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($40, $4 + 1076 | 0); //@line 31121
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 411; //@line 31124
    $42 = $ReallocAsyncCtx22 + 4 | 0; //@line 31125
    HEAP32[$42 >> 2] = $4; //@line 31126
    $43 = $ReallocAsyncCtx22 + 8 | 0; //@line 31127
    HEAP32[$43 >> 2] = $14; //@line 31128
    $44 = $ReallocAsyncCtx22 + 12 | 0; //@line 31129
    HEAP32[$44 >> 2] = $16; //@line 31130
    $45 = $ReallocAsyncCtx22 + 16 | 0; //@line 31131
    HEAP32[$45 >> 2] = $18; //@line 31132
    sp = STACKTOP; //@line 31133
    return;
   }
   ___async_unwind = 0; //@line 31136
   HEAP32[$ReallocAsyncCtx22 >> 2] = 411; //@line 31137
   $42 = $ReallocAsyncCtx22 + 4 | 0; //@line 31138
   HEAP32[$42 >> 2] = $4; //@line 31139
   $43 = $ReallocAsyncCtx22 + 8 | 0; //@line 31140
   HEAP32[$43 >> 2] = $14; //@line 31141
   $44 = $ReallocAsyncCtx22 + 12 | 0; //@line 31142
   HEAP32[$44 >> 2] = $16; //@line 31143
   $45 = $ReallocAsyncCtx22 + 16 | 0; //@line 31144
   HEAP32[$45 >> 2] = $18; //@line 31145
   sp = STACKTOP; //@line 31146
   return;
  } else {
   $$3$off0204 = 2; //@line 31149
  }
 }
 $46 = $4 + 944 | 0; //@line 31152
 HEAP8[$46 >> 0] = $$3$off0204 | HEAP8[$46 >> 0] & -7; //@line 31156
 $50 = $4 + 944 | 0; //@line 31157
 HEAP8[$50 >> 0] = HEAP8[$50 >> 0] | 32; //@line 31160
 $53 = HEAP32[$14 >> 2] | 0; //@line 31161
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 31163
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($53, $4 + 996 | 0, 1); //@line 31164
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 31167
  $55 = $ReallocAsyncCtx17 + 4 | 0; //@line 31168
  HEAP32[$55 >> 2] = $16; //@line 31169
  $56 = $ReallocAsyncCtx17 + 8 | 0; //@line 31170
  HEAP32[$56 >> 2] = $18; //@line 31171
  sp = STACKTOP; //@line 31172
  return;
 }
 ___async_unwind = 0; //@line 31175
 HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 31176
 $55 = $ReallocAsyncCtx17 + 4 | 0; //@line 31177
 HEAP32[$55 >> 2] = $16; //@line 31178
 $56 = $ReallocAsyncCtx17 + 8 | 0; //@line 31179
 HEAP32[$56 >> 2] = $18; //@line 31180
 sp = STACKTOP; //@line 31181
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_97($0) {
 $0 = $0 | 0;
 var $$1 = 0, $10 = 0, $110 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 35599
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35601
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35603
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35605
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35607
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35609
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 35611
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 35613
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 35615
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 35617
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 35621
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 35623
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 35625
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 35627
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 35629
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 35631
 $34 = HEAP8[$0 + 68 >> 0] | 0; //@line 35633
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 35635
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 35637
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 35639
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 35641
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 35643
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 35645
 $48 = HEAP16[$0 + 96 >> 1] | 0; //@line 35647
 $50 = HEAP8[$0 + 98 >> 0] | 0; //@line 35649
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 35651
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 35653
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 35655
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 35657
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 35659
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 35661
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 35663
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 35665
 if (!(HEAP8[HEAP32[$0 + 40 >> 2] >> 0] | 0)) {
  $$1 = -1017; //@line 35669
  $110 = ___async_retval; //@line 35670
  HEAP16[$110 >> 1] = $$1; //@line 35671
  return;
 }
 if (HEAP8[$60 >> 0] | 0) {
  $$1 = -1001; //@line 35677
  $110 = ___async_retval; //@line 35678
  HEAP16[$110 >> 1] = $$1; //@line 35679
  return;
 }
 $72 = $48 << 16 >> 16 == 0; //@line 35683
 if (!(($52 | 0) != 0 | $72)) {
  $$1 = -1003; //@line 35686
  $110 = ___async_retval; //@line 35687
  HEAP16[$110 >> 1] = $$1; //@line 35688
  return;
 }
 HEAP32[$4 >> 2] = 1; //@line 35691
 $73 = $30 + 4 | 0; //@line 35692
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(136) | 0; //@line 35693
 $74 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($73, $4) | 0; //@line 35694
 if (!___async) {
  HEAP32[___async_retval >> 2] = $74; //@line 35698
  ___async_unwind = 0; //@line 35699
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 304; //@line 35701
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 35703
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 35705
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $6; //@line 35707
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $8; //@line 35709
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $10; //@line 35711
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $12; //@line 35713
 HEAP8[$ReallocAsyncCtx9 + 28 >> 0] = $72 & 1; //@line 35716
 HEAP32[$ReallocAsyncCtx9 + 32 >> 2] = $14; //@line 35718
 HEAP32[$ReallocAsyncCtx9 + 36 >> 2] = $16; //@line 35720
 HEAP32[$ReallocAsyncCtx9 + 40 >> 2] = $18; //@line 35722
 HEAP32[$ReallocAsyncCtx9 + 44 >> 2] = $22; //@line 35724
 HEAP32[$ReallocAsyncCtx9 + 48 >> 2] = $24; //@line 35726
 HEAP32[$ReallocAsyncCtx9 + 52 >> 2] = $26; //@line 35728
 HEAP32[$ReallocAsyncCtx9 + 56 >> 2] = $28; //@line 35730
 HEAP32[$ReallocAsyncCtx9 + 60 >> 2] = $73; //@line 35732
 HEAP32[$ReallocAsyncCtx9 + 64 >> 2] = $30; //@line 35734
 HEAP32[$ReallocAsyncCtx9 + 68 >> 2] = $32; //@line 35736
 HEAP8[$ReallocAsyncCtx9 + 72 >> 0] = $34; //@line 35738
 HEAP32[$ReallocAsyncCtx9 + 76 >> 2] = $36; //@line 35740
 HEAP32[$ReallocAsyncCtx9 + 80 >> 2] = $38; //@line 35742
 HEAP32[$ReallocAsyncCtx9 + 84 >> 2] = $40; //@line 35744
 HEAP32[$ReallocAsyncCtx9 + 88 >> 2] = $42; //@line 35746
 HEAP32[$ReallocAsyncCtx9 + 92 >> 2] = $44; //@line 35748
 HEAP32[$ReallocAsyncCtx9 + 96 >> 2] = $46; //@line 35750
 HEAP16[$ReallocAsyncCtx9 + 100 >> 1] = $48; //@line 35752
 HEAP8[$ReallocAsyncCtx9 + 102 >> 0] = $50; //@line 35754
 HEAP32[$ReallocAsyncCtx9 + 104 >> 2] = $52; //@line 35756
 HEAP32[$ReallocAsyncCtx9 + 108 >> 2] = $54; //@line 35758
 HEAP32[$ReallocAsyncCtx9 + 112 >> 2] = $56; //@line 35760
 HEAP32[$ReallocAsyncCtx9 + 116 >> 2] = $4; //@line 35762
 HEAP32[$ReallocAsyncCtx9 + 120 >> 2] = $58; //@line 35764
 HEAP32[$ReallocAsyncCtx9 + 124 >> 2] = $62; //@line 35766
 HEAP32[$ReallocAsyncCtx9 + 128 >> 2] = $64; //@line 35768
 HEAP32[$ReallocAsyncCtx9 + 132 >> 2] = $66; //@line 35770
 sp = STACKTOP; //@line 35771
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_83($0) {
 $0 = $0 | 0;
 var $10 = 0, $109 = 0, $113 = 0, $12 = 0, $120 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $132 = 0, $135 = 0, $137 = 0, $138 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 33250
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33252
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33254
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33256
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33258
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33260
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33262
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33264
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 33266
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 33268
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 33270
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 33272
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 33274
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 33276
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 33278
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 33280
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 33287
  return;
 }
 if (((HEAPU8[$6 + -3 + ($2 + 638) >> 0] | 0) << 8 | (HEAPU8[$2 + 638 + $4 >> 0] | 0) | (HEAPU8[$6 + -2 + ($2 + 638) >> 0] | 0) << 16 | (HEAPU8[$6 + -1 + ($2 + 638) >> 0] | 0) << 24 | 0) != (HEAP32[$8 >> 2] | 0)) {
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 7; //@line 33317
  $132 = $2 + 944 | 0; //@line 33318
  HEAP8[$132 >> 0] = HEAP8[$132 >> 0] | 32; //@line 33321
  $135 = HEAP32[$24 >> 2] | 0; //@line 33322
  $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 33324
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($135, $2 + 996 | 0, 1); //@line 33325
  if (___async) {
   HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 33328
   $137 = $ReallocAsyncCtx17 + 4 | 0; //@line 33329
   HEAP32[$137 >> 2] = $12; //@line 33330
   $138 = $ReallocAsyncCtx17 + 8 | 0; //@line 33331
   HEAP32[$138 >> 2] = $14; //@line 33332
   sp = STACKTOP; //@line 33333
   return;
  }
  ___async_unwind = 0; //@line 33336
  HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 33337
  $137 = $ReallocAsyncCtx17 + 4 | 0; //@line 33338
  HEAP32[$137 >> 2] = $12; //@line 33339
  $138 = $ReallocAsyncCtx17 + 8 | 0; //@line 33340
  HEAP32[$138 >> 2] = $14; //@line 33341
  sp = STACKTOP; //@line 33342
  return;
 }
 if (__Z28compute_skeys_for_join_framePKhS0_tPhS1_(HEAP32[$16 >> 2] | 0, $18, HEAP16[$2 + 946 >> 1] | 0, $20, $22) | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 33353
  return;
 }
 HEAP32[$2 + 948 >> 2] = (HEAPU8[$2 + 644 >> 0] | 0) << 16 | ((HEAPU8[$2 + 643 >> 0] | 0) << 8 | (HEAPU8[$2 + 642 >> 0] | 0)); //@line 33370
 HEAP32[$2 + 952 >> 2] = (HEAPU8[$2 + 648 >> 0] | 0) << 24 | ((HEAPU8[$2 + 647 >> 0] | 0) << 16 | ((HEAPU8[$2 + 646 >> 0] | 0) << 8 | (HEAPU8[$2 + 645 >> 0] | 0))); //@line 33390
 $99 = HEAP8[$2 + 649 >> 0] | 0; //@line 33392
 HEAP8[$2 + 1129 >> 0] = ($99 & 255) >>> 4 & 7; //@line 33398
 HEAP8[$2 + 1136 >> 0] = $99 & 15; //@line 33401
 $109 = HEAP8[$2 + 650 >> 0] & 15; //@line 33404
 $113 = $109 << 24 >> 24 == 0 ? 1e3 : ($109 & 255) * 1e3 | 0; //@line 33409
 HEAP32[$2 + 1112 >> 2] = $113; //@line 33410
 HEAP32[$2 + 1116 >> 2] = $113 + 1e3; //@line 33413
 HEAP32[$26 >> 2] = $2 + 651; //@line 33415
 HEAP8[$26 + 4 >> 0] = $6 + 239; //@line 33419
 $120 = HEAP32[$28 >> 2] | 0; //@line 33420
 $123 = HEAP32[(HEAP32[$120 >> 2] | 0) + 20 >> 2] | 0; //@line 33423
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 33424
 FUNCTION_TABLE_vii[$123 & 31]($120, $26); //@line 33425
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 396; //@line 33428
  $124 = $ReallocAsyncCtx + 4 | 0; //@line 33429
  HEAP32[$124 >> 2] = $2; //@line 33430
  $125 = $ReallocAsyncCtx + 8 | 0; //@line 33431
  HEAP32[$125 >> 2] = $30; //@line 33432
  $126 = $ReallocAsyncCtx + 12 | 0; //@line 33433
  HEAP32[$126 >> 2] = $24; //@line 33434
  $127 = $ReallocAsyncCtx + 16 | 0; //@line 33435
  HEAP32[$127 >> 2] = $12; //@line 33436
  $128 = $ReallocAsyncCtx + 20 | 0; //@line 33437
  HEAP32[$128 >> 2] = $14; //@line 33438
  sp = STACKTOP; //@line 33439
  return;
 }
 ___async_unwind = 0; //@line 33442
 HEAP32[$ReallocAsyncCtx >> 2] = 396; //@line 33443
 $124 = $ReallocAsyncCtx + 4 | 0; //@line 33444
 HEAP32[$124 >> 2] = $2; //@line 33445
 $125 = $ReallocAsyncCtx + 8 | 0; //@line 33446
 HEAP32[$125 >> 2] = $30; //@line 33447
 $126 = $ReallocAsyncCtx + 12 | 0; //@line 33448
 HEAP32[$126 >> 2] = $24; //@line 33449
 $127 = $ReallocAsyncCtx + 16 | 0; //@line 33450
 HEAP32[$127 >> 2] = $12; //@line 33451
 $128 = $ReallocAsyncCtx + 20 | 0; //@line 33452
 HEAP32[$128 >> 2] = $14; //@line 33453
 sp = STACKTOP; //@line 33454
 return;
}
function __Z15encrypt_payloadPKhtS0_jhjPh($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$044$lcssa$off0 = 0, $$04458 = 0, $$045$lcssa = 0, $$04557 = 0, $$048$lcssa = 0, $$1 = 0, $101 = 0, $107 = 0, $113 = 0, $119 = 0, $125 = 0, $126 = 0, $127 = 0, $134 = 0, $136 = 0, $27 = 0, $29 = 0, $35 = 0, $41 = 0, $47 = 0, $53 = 0, $59 = 0, $65 = 0, $7 = 0, $71 = 0, $77 = 0, $83 = 0, $89 = 0, $95 = 0, $indvars$iv = 0, $wide$trip$count = 0, label = 0;
 _mbedtls_aes_init(22960); //@line 22376
 $7 = _mbedtls_aes_setkey_enc(22960, $2, 128) | 0; //@line 22377
 if ($7 | 0) {
  $$1 = $7; //@line 22380
  _mbedtls_aes_free(22960); //@line 22381
  return $$1 | 0; //@line 22382
 }
 HEAP8[13900] = $4; //@line 22384
 HEAP8[13901] = $3; //@line 22386
 HEAP8[13902] = $3 >>> 8; //@line 22389
 HEAP8[13903] = $3 >>> 16; //@line 22392
 HEAP8[13904] = $3 >>> 24; //@line 22395
 HEAP8[13905] = $5; //@line 22397
 HEAP8[13906] = $5 >>> 8; //@line 22400
 HEAP8[13907] = $5 >>> 16; //@line 22403
 HEAP8[13908] = $5 >>> 24; //@line 22406
 do {
  if (($1 & 65535) > 15) {
   $$04458 = 1; //@line 22411
   $$04557 = 0; //@line 22411
   $126 = $1 & 65535; //@line 22411
   while (1) {
    HEAP8[13910] = $$04458; //@line 22414
    $$04458 = $$04458 + 1 << 16 >> 16; //@line 22415
    $27 = _mbedtls_aes_crypt_ecb(22960, 1, 13895, 24216) | 0; //@line 22416
    if ($27 | 0) {
     $$1 = $27; //@line 22419
     label = 11; //@line 22420
     break;
    }
    $29 = $$04557 & 255; //@line 22423
    HEAP8[$6 + $29 >> 0] = HEAP8[24216] ^ HEAP8[$0 + $29 >> 0]; //@line 22429
    $35 = $29 + 1 | 0; //@line 22430
    HEAP8[$6 + $35 >> 0] = HEAP8[24217] ^ HEAP8[$0 + $35 >> 0]; //@line 22436
    $41 = $29 + 2 | 0; //@line 22437
    HEAP8[$6 + $41 >> 0] = HEAP8[24218] ^ HEAP8[$0 + $41 >> 0]; //@line 22443
    $47 = $29 + 3 | 0; //@line 22444
    HEAP8[$6 + $47 >> 0] = HEAP8[24219] ^ HEAP8[$0 + $47 >> 0]; //@line 22450
    $53 = $29 + 4 | 0; //@line 22451
    HEAP8[$6 + $53 >> 0] = HEAP8[24220] ^ HEAP8[$0 + $53 >> 0]; //@line 22457
    $59 = $29 + 5 | 0; //@line 22458
    HEAP8[$6 + $59 >> 0] = HEAP8[24221] ^ HEAP8[$0 + $59 >> 0]; //@line 22464
    $65 = $29 + 6 | 0; //@line 22465
    HEAP8[$6 + $65 >> 0] = HEAP8[24222] ^ HEAP8[$0 + $65 >> 0]; //@line 22471
    $71 = $29 + 7 | 0; //@line 22472
    HEAP8[$6 + $71 >> 0] = HEAP8[24223] ^ HEAP8[$0 + $71 >> 0]; //@line 22478
    $77 = $29 + 8 | 0; //@line 22479
    HEAP8[$6 + $77 >> 0] = HEAP8[24224] ^ HEAP8[$0 + $77 >> 0]; //@line 22485
    $83 = $29 + 9 | 0; //@line 22486
    HEAP8[$6 + $83 >> 0] = HEAP8[24225] ^ HEAP8[$0 + $83 >> 0]; //@line 22492
    $89 = $29 + 10 | 0; //@line 22493
    HEAP8[$6 + $89 >> 0] = HEAP8[24226] ^ HEAP8[$0 + $89 >> 0]; //@line 22499
    $95 = $29 + 11 | 0; //@line 22500
    HEAP8[$6 + $95 >> 0] = HEAP8[24227] ^ HEAP8[$0 + $95 >> 0]; //@line 22506
    $101 = $29 + 12 | 0; //@line 22507
    HEAP8[$6 + $101 >> 0] = HEAP8[24228] ^ HEAP8[$0 + $101 >> 0]; //@line 22513
    $107 = $29 + 13 | 0; //@line 22514
    HEAP8[$6 + $107 >> 0] = HEAP8[24229] ^ HEAP8[$0 + $107 >> 0]; //@line 22520
    $113 = $29 + 14 | 0; //@line 22521
    HEAP8[$6 + $113 >> 0] = HEAP8[24230] ^ HEAP8[$0 + $113 >> 0]; //@line 22527
    $119 = $29 + 15 | 0; //@line 22528
    HEAP8[$6 + $119 >> 0] = HEAP8[24231] ^ HEAP8[$0 + $119 >> 0]; //@line 22534
    $125 = $126 + 65520 | 0; //@line 22535
    $127 = $125 & 65535; //@line 22536
    if (($127 & 65535) <= 15) {
     label = 6; //@line 22544
     break;
    } else {
     $$04557 = $29 + 16 & 255; //@line 22542
     $126 = $125 & 65535; //@line 22542
    }
   }
   if ((label | 0) == 6) {
    $$044$lcssa$off0 = $$04458 & 255; //@line 22552
    $$045$lcssa = $$04557 + 16 & 255; //@line 22552
    $$048$lcssa = $127; //@line 22552
    break;
   } else if ((label | 0) == 11) {
    _mbedtls_aes_free(22960); //@line 22556
    return $$1 | 0; //@line 22557
   }
  } else {
   $$044$lcssa$off0 = 1; //@line 22560
   $$045$lcssa = 0; //@line 22560
   $$048$lcssa = $1; //@line 22560
  }
 } while (0);
 if (!($$048$lcssa << 16 >> 16)) {
  $$1 = 0; //@line 22565
  _mbedtls_aes_free(22960); //@line 22566
  return $$1 | 0; //@line 22567
 }
 HEAP8[13910] = $$044$lcssa$off0; //@line 22569
 $134 = _mbedtls_aes_crypt_ecb(22960, 1, 13895, 24216) | 0; //@line 22570
 if ($134 | 0) {
  $$1 = $134; //@line 22573
  _mbedtls_aes_free(22960); //@line 22574
  return $$1 | 0; //@line 22575
 }
 $wide$trip$count = $$048$lcssa & 65535; //@line 22577
 $indvars$iv = 0; //@line 22578
 do {
  $136 = $indvars$iv + $$045$lcssa | 0; //@line 22580
  HEAP8[$6 + $136 >> 0] = HEAP8[24216 + $indvars$iv >> 0] ^ HEAP8[$0 + $136 >> 0]; //@line 22587
  $indvars$iv = $indvars$iv + 1 | 0; //@line 22588
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$1 = 0; //@line 22591
 _mbedtls_aes_free(22960); //@line 22597
 return $$1 | 0; //@line 22598
}
function __ZN7LoRaPHY13apply_cf_listEP15cflist_params_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01314 = 0, $$015 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $30 = 0, $33 = 0, $34 = 0, $37 = 0, $43 = 0, $49 = 0, $54 = 0, $71 = 0, $86 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 23901
 STACKTOP = STACKTOP + 16 | 0; //@line 23902
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 23902
 $2 = sp; //@line 23903
 if (!(HEAP8[$0 + 15 >> 0] | 0)) {
  STACKTOP = sp; //@line 23908
  return;
 }
 $15 = $2 + 8 | 0; //@line 23919
 HEAP8[$15 >> 0] = HEAPU8[$0 + 31 >> 0] << 4 | HEAPU8[$0 + 30 >> 0]; //@line 23920
 L4 : do {
  if ((HEAP8[$1 + 4 >> 0] | 0) == 16) {
   $19 = $0 + 18 | 0; //@line 23926
   $20 = HEAP8[$19 >> 0] | 0; //@line 23927
   $21 = $0 + 20 | 0; //@line 23928
   if (($20 & 255) < (HEAPU8[$21 >> 0] | 0)) {
    $24 = $0 + 19 | 0; //@line 23932
    $25 = $2 + 4 | 0; //@line 23933
    $$01314 = 0; //@line 23934
    $$015 = $20; //@line 23934
    $30 = $20; //@line 23934
    while (1) {
     if ((($30 & 255) + (HEAPU8[$24 >> 0] | 0) | 0) >>> 0 > ($$015 & 255) >>> 0) {
      $33 = HEAP32[$1 >> 2] | 0; //@line 23943
      $34 = $$01314 & 255; //@line 23944
      $37 = HEAPU8[$33 + $34 >> 0] | 0; //@line 23947
      HEAP32[$2 >> 2] = $37; //@line 23948
      $43 = HEAPU8[$33 + ($34 + 1) >> 0] << 8 | $37; //@line 23954
      HEAP32[$2 >> 2] = $43; //@line 23955
      $49 = HEAPU8[$33 + ($34 + 2) >> 0] << 16 | $43; //@line 23961
      HEAP32[$2 >> 2] = $49 * 100; //@line 23963
      HEAP32[$25 >> 2] = 0; //@line 23964
      if (!$49) {
       label = 11; //@line 23967
      } else {
       $54 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 23971
       $AsyncCtx = _emscripten_alloc_async_context(56, sp) | 0; //@line 23972
       FUNCTION_TABLE_iiii[$54 & 15]($0, $2, $$015) | 0; //@line 23973
       if (___async) {
        label = 9; //@line 23976
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 23979
      }
     } else {
      HEAP32[$2 >> 2] = 0; //@line 23982
      HEAP8[$15 >> 0] = 0; //@line 23983
      HEAP32[$25 >> 2] = 0; //@line 23984
      label = 11; //@line 23985
     }
     if ((label | 0) == 11) {
      label = 0; //@line 23988
      $71 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 23991
      $AsyncCtx3 = _emscripten_alloc_async_context(56, sp) | 0; //@line 23992
      FUNCTION_TABLE_iii[$71 & 31]($0, $$015) | 0; //@line 23993
      if (___async) {
       label = 12; //@line 23996
       break;
      }
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 23999
     }
     $86 = HEAP8[$19 >> 0] | 0; //@line 24001
     $91 = $$015 + 1 << 24 >> 24; //@line 24006
     if (($91 & 255) < (HEAPU8[$21 >> 0] | 0)) {
      $$01314 = ($86 & 255) + ($$01314 & 255) & 255; //@line 24010
      $$015 = $91; //@line 24010
      $30 = $86; //@line 24010
     } else {
      break L4;
     }
    }
    if ((label | 0) == 9) {
     HEAP32[$AsyncCtx >> 2] = 620; //@line 24016
     HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 24018
     HEAP8[$AsyncCtx + 8 >> 0] = $$01314; //@line 24020
     HEAP8[$AsyncCtx + 9 >> 0] = $$015; //@line 24022
     HEAP32[$AsyncCtx + 12 >> 2] = $21; //@line 24024
     HEAP32[$AsyncCtx + 16 >> 2] = $24; //@line 24026
     HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 24028
     HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 24030
     HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 24032
     HEAP32[$AsyncCtx + 32 >> 2] = $25; //@line 24034
     HEAP32[$AsyncCtx + 36 >> 2] = $15; //@line 24036
     HEAP32[$AsyncCtx + 40 >> 2] = $0; //@line 24038
     HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 24040
     HEAP32[$AsyncCtx + 48 >> 2] = $0; //@line 24042
     HEAP32[$AsyncCtx + 52 >> 2] = $2; //@line 24044
     sp = STACKTOP; //@line 24045
     STACKTOP = sp; //@line 24046
     return;
    } else if ((label | 0) == 12) {
     HEAP32[$AsyncCtx3 >> 2] = 621; //@line 24049
     HEAP32[$AsyncCtx3 + 4 >> 2] = $19; //@line 24051
     HEAP8[$AsyncCtx3 + 8 >> 0] = $$01314; //@line 24053
     HEAP8[$AsyncCtx3 + 9 >> 0] = $$015; //@line 24055
     HEAP32[$AsyncCtx3 + 12 >> 2] = $21; //@line 24057
     HEAP32[$AsyncCtx3 + 16 >> 2] = $24; //@line 24059
     HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 24061
     HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 24063
     HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 24065
     HEAP32[$AsyncCtx3 + 32 >> 2] = $25; //@line 24067
     HEAP32[$AsyncCtx3 + 36 >> 2] = $15; //@line 24069
     HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 24071
     HEAP32[$AsyncCtx3 + 44 >> 2] = $0; //@line 24073
     HEAP32[$AsyncCtx3 + 48 >> 2] = $0; //@line 24075
     HEAP32[$AsyncCtx3 + 52 >> 2] = $2; //@line 24077
     sp = STACKTOP; //@line 24078
     STACKTOP = sp; //@line 24079
     return;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 24084
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_233($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $31 = 0, $32 = 0, $4 = 0, $47 = 0, $48 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 7882
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7884
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7886
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7888
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7890
 if (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0) {
  $13 = $2 + 1892 | 0; //@line 7896
  $14 = HEAP32[$13 >> 2] | 0; //@line 7897
  if (!$14) {
   return;
  }
  $18 = HEAP32[$2 + 2288 >> 2] | 0; //@line 7904
  $20 = HEAP32[$14 + 4 >> 2] | 0; //@line 7906
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 7907
  FUNCTION_TABLE_vii[$20 & 31]($8, $2 + 1880 | 0); //@line 7908
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 218; //@line 7911
   $21 = $ReallocAsyncCtx + 4 | 0; //@line 7912
   HEAP32[$21 >> 2] = $13; //@line 7913
   $22 = $ReallocAsyncCtx + 8 | 0; //@line 7914
   HEAP32[$22 >> 2] = $8; //@line 7915
   $23 = $ReallocAsyncCtx + 12 | 0; //@line 7916
   HEAP32[$23 >> 2] = $18; //@line 7917
   $24 = $ReallocAsyncCtx + 16 | 0; //@line 7918
   HEAP32[$24 >> 2] = $8; //@line 7919
   sp = STACKTOP; //@line 7920
   return;
  }
  ___async_unwind = 0; //@line 7923
  HEAP32[$ReallocAsyncCtx >> 2] = 218; //@line 7924
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 7925
  HEAP32[$21 >> 2] = $13; //@line 7926
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 7927
  HEAP32[$22 >> 2] = $8; //@line 7928
  $23 = $ReallocAsyncCtx + 12 | 0; //@line 7929
  HEAP32[$23 >> 2] = $18; //@line 7930
  $24 = $ReallocAsyncCtx + 16 | 0; //@line 7931
  HEAP32[$24 >> 2] = $8; //@line 7932
  sp = STACKTOP; //@line 7933
  return;
 }
 $25 = $2 + 1960 | 0; //@line 7936
 HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 1; //@line 7939
 if (!(HEAP8[$6 + 18 >> 0] | 0)) {
  return;
 }
 $31 = $6 + 9 | 0; //@line 7946
 $32 = HEAP8[$31 >> 0] | 0; //@line 7947
 if ($32 << 24 >> 24 == -32) {
  return;
 }
 if (($32 + -1 & 255) >= 223) {
  if ((HEAP32[$6 >> 2] | 0) != 3) {
   return;
  }
 }
 HEAP32[$2 + 2240 >> 2] = 2; //@line 7962
 HEAP16[$2 + 2260 >> 1] = HEAP16[$6 + 16 >> 1] | 0; //@line 7966
 HEAP8[$2 + 2253 >> 0] = HEAP8[$31 >> 0] | 0; //@line 7969
 HEAP32[$2 + 2256 >> 2] = HEAP32[$6 + 12 >> 2]; //@line 7973
 HEAP8[$2 + 2236 >> 0] = 1; //@line 7975
 $47 = $2 + 1892 | 0; //@line 7976
 $48 = HEAP32[$47 >> 2] | 0; //@line 7977
 if ($48 | 0) {
  $52 = HEAP32[$2 + 2288 >> 2] | 0; //@line 7982
  $54 = HEAP32[$48 + 4 >> 2] | 0; //@line 7984
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 7985
  FUNCTION_TABLE_vii[$54 & 31]($4, $2 + 1880 | 0); //@line 7986
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 222; //@line 7989
   $55 = $ReallocAsyncCtx3 + 4 | 0; //@line 7990
   HEAP32[$55 >> 2] = $47; //@line 7991
   $56 = $ReallocAsyncCtx3 + 8 | 0; //@line 7992
   HEAP32[$56 >> 2] = $4; //@line 7993
   $57 = $ReallocAsyncCtx3 + 12 | 0; //@line 7994
   HEAP32[$57 >> 2] = $52; //@line 7995
   $58 = $ReallocAsyncCtx3 + 16 | 0; //@line 7996
   HEAP32[$58 >> 2] = $4; //@line 7997
   $59 = $ReallocAsyncCtx3 + 20 | 0; //@line 7998
   HEAP32[$59 >> 2] = $6; //@line 7999
   $60 = $ReallocAsyncCtx3 + 24 | 0; //@line 8000
   HEAP32[$60 >> 2] = $31; //@line 8001
   $61 = $ReallocAsyncCtx3 + 28 | 0; //@line 8002
   HEAP32[$61 >> 2] = $2; //@line 8003
   sp = STACKTOP; //@line 8004
   return;
  }
  ___async_unwind = 0; //@line 8007
  HEAP32[$ReallocAsyncCtx3 >> 2] = 222; //@line 8008
  $55 = $ReallocAsyncCtx3 + 4 | 0; //@line 8009
  HEAP32[$55 >> 2] = $47; //@line 8010
  $56 = $ReallocAsyncCtx3 + 8 | 0; //@line 8011
  HEAP32[$56 >> 2] = $4; //@line 8012
  $57 = $ReallocAsyncCtx3 + 12 | 0; //@line 8013
  HEAP32[$57 >> 2] = $52; //@line 8014
  $58 = $ReallocAsyncCtx3 + 16 | 0; //@line 8015
  HEAP32[$58 >> 2] = $4; //@line 8016
  $59 = $ReallocAsyncCtx3 + 20 | 0; //@line 8017
  HEAP32[$59 >> 2] = $6; //@line 8018
  $60 = $ReallocAsyncCtx3 + 24 | 0; //@line 8019
  HEAP32[$60 >> 2] = $31; //@line 8020
  $61 = $ReallocAsyncCtx3 + 28 | 0; //@line 8021
  HEAP32[$61 >> 2] = $2; //@line 8022
  sp = STACKTOP; //@line 8023
  return;
 }
 if (!(HEAP8[$6 + 11 >> 0] | 0)) {
  return;
 }
 $65 = HEAP8[$31 >> 0] | 0; //@line 8032
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 8033
 __ZN12LoRaWANStack9handle_txEhPKhth($2, $65, 0, 0, 2) | 0; //@line 8034
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 226; //@line 8037
  sp = STACKTOP; //@line 8038
  return;
 }
 ___async_unwind = 0; //@line 8041
 HEAP32[$ReallocAsyncCtx7 >> 2] = 226; //@line 8042
 sp = STACKTOP; //@line 8043
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 15729
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15733
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15735
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15737
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15739
 $11 = $4 + 12 | 0; //@line 15741
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 15742
 $12 = _equeue_alloc($10, 16) | 0; //@line 15743
 if ($12 | 0) {
  $14 = HEAP32[$11 >> 2] | 0; //@line 15746
  if (!$14) {
   HEAP32[$12 + 12 >> 2] = 0; //@line 15750
   _equeue_event_delay($12, $8); //@line 15751
   _equeue_event_dtor($12, 375); //@line 15752
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 15753
   $26 = _equeue_post($10, 376, $12) | 0; //@line 15754
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 669; //@line 15757
    $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 15758
    HEAP32[$27 >> 2] = $6; //@line 15759
    $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 15760
    HEAP32[$28 >> 2] = $11; //@line 15761
    $29 = $ReallocAsyncCtx4 + 12 | 0; //@line 15762
    HEAP32[$29 >> 2] = $4; //@line 15763
    sp = STACKTOP; //@line 15764
    return;
   }
   HEAP32[___async_retval >> 2] = $26; //@line 15768
   ___async_unwind = 0; //@line 15769
   HEAP32[$ReallocAsyncCtx4 >> 2] = 669; //@line 15770
   $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 15771
   HEAP32[$27 >> 2] = $6; //@line 15772
   $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 15773
   HEAP32[$28 >> 2] = $11; //@line 15774
   $29 = $ReallocAsyncCtx4 + 12 | 0; //@line 15775
   HEAP32[$29 >> 2] = $4; //@line 15776
   sp = STACKTOP; //@line 15777
   return;
  } else {
   $17 = HEAP32[$14 + 4 >> 2] | 0; //@line 15781
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 15782
   FUNCTION_TABLE_vii[$17 & 31]($12, $4); //@line 15783
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 668; //@line 15786
    $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 15787
    HEAP32[$18 >> 2] = $11; //@line 15788
    $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 15789
    HEAP32[$19 >> 2] = $12; //@line 15790
    $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 15791
    HEAP32[$20 >> 2] = $8; //@line 15792
    $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 15793
    HEAP32[$21 >> 2] = $10; //@line 15794
    $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 15795
    HEAP32[$22 >> 2] = $6; //@line 15796
    $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 15797
    HEAP32[$23 >> 2] = $11; //@line 15798
    $24 = $ReallocAsyncCtx2 + 28 | 0; //@line 15799
    HEAP32[$24 >> 2] = $4; //@line 15800
    sp = STACKTOP; //@line 15801
    return;
   }
   ___async_unwind = 0; //@line 15804
   HEAP32[$ReallocAsyncCtx2 >> 2] = 668; //@line 15805
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 15806
   HEAP32[$18 >> 2] = $11; //@line 15807
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 15808
   HEAP32[$19 >> 2] = $12; //@line 15809
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 15810
   HEAP32[$20 >> 2] = $8; //@line 15811
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 15812
   HEAP32[$21 >> 2] = $10; //@line 15813
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 15814
   HEAP32[$22 >> 2] = $6; //@line 15815
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 15816
   HEAP32[$23 >> 2] = $11; //@line 15817
   $24 = $ReallocAsyncCtx2 + 28 | 0; //@line 15818
   HEAP32[$24 >> 2] = $4; //@line 15819
   sp = STACKTOP; //@line 15820
   return;
  }
 }
 $31 = $6 + 16 | 0; //@line 15824
 HEAP32[$31 >> 2] = 0; //@line 15825
 $32 = HEAP32[$11 >> 2] | 0; //@line 15826
 if ($32 | 0) {
  $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 15830
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 15831
  FUNCTION_TABLE_vi[$35 & 1023]($4); //@line 15832
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 670; //@line 15835
   $36 = $ReallocAsyncCtx3 + 4 | 0; //@line 15836
   HEAP32[$36 >> 2] = $31; //@line 15837
   sp = STACKTOP; //@line 15838
   return;
  }
  ___async_unwind = 0; //@line 15841
  HEAP32[$ReallocAsyncCtx3 >> 2] = 670; //@line 15842
  $36 = $ReallocAsyncCtx3 + 4 | 0; //@line 15843
  HEAP32[$36 >> 2] = $31; //@line 15844
  sp = STACKTOP; //@line 15845
  return;
 }
 if (0) {
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 15852
 _mbed_assert_internal(14025, 14043, 57); //@line 15853
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 671; //@line 15856
  sp = STACKTOP; //@line 15857
  return;
 }
 ___async_unwind = 0; //@line 15860
 HEAP32[$ReallocAsyncCtx5 >> 2] = 671; //@line 15861
 sp = STACKTOP; //@line 15862
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_438($0) {
 $0 = $0 | 0;
 var $$pre17 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $6 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29553
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29557
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29559
 HEAP32[$4 + 364 >> 2] = 2; //@line 29561
 $$pre17 = HEAP8[$6 >> 0] | 0; //@line 29562
 if (!($$pre17 & 4)) {
  $11 = HEAP32[$4 + 1324 >> 2] | 0; //@line 29567
  $12 = $11 + 16 | 0; //@line 29568
  $14 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 29570
  $15 = $11 + 28 | 0; //@line 29571
  $16 = HEAP32[$15 >> 2] | 0; //@line 29572
  if (!$16) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 29575
   _mbed_assert_internal(15352, 15357, 1102); //@line 29576
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 29579
    $18 = $ReallocAsyncCtx15 + 4 | 0; //@line 29580
    HEAP32[$18 >> 2] = $15; //@line 29581
    $19 = $ReallocAsyncCtx15 + 8 | 0; //@line 29582
    HEAP32[$19 >> 2] = $12; //@line 29583
    $20 = $ReallocAsyncCtx15 + 12 | 0; //@line 29584
    HEAP32[$20 >> 2] = $14; //@line 29585
    $21 = $ReallocAsyncCtx15 + 16 | 0; //@line 29586
    HEAP32[$21 >> 2] = $6; //@line 29587
    $22 = $ReallocAsyncCtx15 + 20 | 0; //@line 29588
    HEAP32[$22 >> 2] = $4; //@line 29589
    sp = STACKTOP; //@line 29590
    return;
   }
   ___async_unwind = 0; //@line 29593
   HEAP32[$ReallocAsyncCtx15 >> 2] = 481; //@line 29594
   $18 = $ReallocAsyncCtx15 + 4 | 0; //@line 29595
   HEAP32[$18 >> 2] = $15; //@line 29596
   $19 = $ReallocAsyncCtx15 + 8 | 0; //@line 29597
   HEAP32[$19 >> 2] = $12; //@line 29598
   $20 = $ReallocAsyncCtx15 + 12 | 0; //@line 29599
   HEAP32[$20 >> 2] = $14; //@line 29600
   $21 = $ReallocAsyncCtx15 + 16 | 0; //@line 29601
   HEAP32[$21 >> 2] = $6; //@line 29602
   $22 = $ReallocAsyncCtx15 + 20 | 0; //@line 29603
   HEAP32[$22 >> 2] = $4; //@line 29604
   sp = STACKTOP; //@line 29605
   return;
  } else {
   $23 = HEAP32[$16 >> 2] | 0; //@line 29608
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 29609
   FUNCTION_TABLE_vii[$23 & 31]($12, $14); //@line 29610
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 29613
    $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 29614
    HEAP32[$24 >> 2] = $6; //@line 29615
    $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 29616
    HEAP32[$25 >> 2] = $4; //@line 29617
    sp = STACKTOP; //@line 29618
    return;
   }
   ___async_unwind = 0; //@line 29621
   HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 29622
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 29623
   HEAP32[$24 >> 2] = $6; //@line 29624
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 29625
   HEAP32[$25 >> 2] = $4; //@line 29626
   sp = STACKTOP; //@line 29627
   return;
  }
 }
 $26 = $$pre17 & -5; //@line 29631
 HEAP8[$6 >> 0] = $26; //@line 29632
 if (!($26 & 16)) {
  return;
 }
 HEAP8[$6 >> 0] = $26 & -17; //@line 29639
 $31 = HEAP32[$4 + 1324 >> 2] | 0; //@line 29641
 $32 = $31 + 48 | 0; //@line 29642
 $34 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 29644
 $35 = $31 + 60 | 0; //@line 29645
 $36 = HEAP32[$35 >> 2] | 0; //@line 29646
 if (!$36) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 29649
  _mbed_assert_internal(15352, 15357, 1102); //@line 29650
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 29653
   $38 = $ReallocAsyncCtx14 + 4 | 0; //@line 29654
   HEAP32[$38 >> 2] = $35; //@line 29655
   $39 = $ReallocAsyncCtx14 + 8 | 0; //@line 29656
   HEAP32[$39 >> 2] = $32; //@line 29657
   $40 = $ReallocAsyncCtx14 + 12 | 0; //@line 29658
   HEAP32[$40 >> 2] = $34; //@line 29659
   sp = STACKTOP; //@line 29660
   return;
  }
  ___async_unwind = 0; //@line 29663
  HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 29664
  $38 = $ReallocAsyncCtx14 + 4 | 0; //@line 29665
  HEAP32[$38 >> 2] = $35; //@line 29666
  $39 = $ReallocAsyncCtx14 + 8 | 0; //@line 29667
  HEAP32[$39 >> 2] = $32; //@line 29668
  $40 = $ReallocAsyncCtx14 + 12 | 0; //@line 29669
  HEAP32[$40 >> 2] = $34; //@line 29670
  sp = STACKTOP; //@line 29671
  return;
 } else {
  $41 = HEAP32[$36 >> 2] | 0; //@line 29674
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 29675
  FUNCTION_TABLE_vii[$41 & 31]($32, $34); //@line 29676
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 29679
   sp = STACKTOP; //@line 29680
   return;
  }
  ___async_unwind = 0; //@line 29683
  HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 29684
  sp = STACKTOP; //@line 29685
  return;
 }
}
function _ticker_read_us__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $58 = 0, $59 = 0, $65 = 0, $66 = 0, $67 = 0, $76 = 0, $77 = 0, $78 = 0, $80 = 0, $84 = 0, $85 = 0, $91 = 0, $92 = 0, $93 = 0, $95 = 0, $99 = 0, $AsyncRetVal = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31973
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31975
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31977
 if (($AsyncRetVal | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $99 = HEAP32[$2 >> 2] | 0; //@line 31983
  $100 = $99 + 48 | 0; //@line 31984
  $101 = $100; //@line 31985
  $102 = $101; //@line 31986
  $103 = HEAP32[$102 >> 2] | 0; //@line 31987
  $104 = $101 + 4 | 0; //@line 31988
  $105 = $104; //@line 31989
  $106 = HEAP32[$105 >> 2] | 0; //@line 31990
  $107 = ___async_retval; //@line 31991
  $108 = $107; //@line 31992
  $109 = $108; //@line 31993
  HEAP32[$109 >> 2] = $103; //@line 31994
  $110 = $108 + 4 | 0; //@line 31995
  $111 = $110; //@line 31996
  HEAP32[$111 >> 2] = $106; //@line 31997
  return;
 }
 $10 = $4 + 32 | 0; //@line 32000
 $15 = $AsyncRetVal - (HEAP32[$10 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 32005
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 32006
 $17 = HEAP32[$4 + 8 >> 2] | 0; //@line 32008
 L5 : do {
  if (($17 | 0) < 1e6) {
   switch ($17 | 0) {
   case 32768:
    {
     break;
    }
   default:
    {
     label = 6; //@line 32017
     break L5;
    }
   }
   $18 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 32021
   $20 = _bitshift64Lshr($18 | 0, tempRet0 | 0, 15) | 0; //@line 32023
   $21 = tempRet0; //@line 32024
   $24 = $4 + 40 | 0; //@line 32027
   $25 = $24; //@line 32028
   $31 = _i64Add(HEAP32[$25 >> 2] | 0, HEAP32[$25 + 4 >> 2] | 0, $15 * 1e6 & 32704 | 0, 0) | 0; //@line 32034
   $32 = tempRet0; //@line 32035
   $33 = $24; //@line 32036
   HEAP32[$33 >> 2] = $31; //@line 32038
   HEAP32[$33 + 4 >> 2] = $32; //@line 32041
   if ($32 >>> 0 < 0 | ($32 | 0) == 0 & $31 >>> 0 < 32768) {
    $91 = $20; //@line 32048
    $92 = $21; //@line 32048
   } else {
    $42 = _i64Add($20 | 0, $21 | 0, 1, 0) | 0; //@line 32050
    $43 = tempRet0; //@line 32051
    $44 = _i64Add($31 | 0, $32 | 0, -32768, -1) | 0; //@line 32052
    $46 = $24; //@line 32054
    HEAP32[$46 >> 2] = $44; //@line 32056
    HEAP32[$46 + 4 >> 2] = tempRet0; //@line 32059
    $91 = $42; //@line 32060
    $92 = $43; //@line 32060
   }
  } else {
   switch ($17 | 0) {
   case 1e6:
    {
     $91 = $15; //@line 32065
     $92 = 0; //@line 32065
     break;
    }
   default:
    {
     label = 6; //@line 32069
    }
   }
  }
 } while (0);
 if ((label | 0) == 6) {
  $50 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 32075
  $51 = tempRet0; //@line 32076
  $52 = ___udivdi3($50 | 0, $51 | 0, $17 | 0, 0) | 0; //@line 32077
  $53 = tempRet0; //@line 32078
  $54 = ___muldi3($52 | 0, $53 | 0, $17 | 0, 0) | 0; //@line 32079
  $56 = _i64Subtract($50 | 0, $51 | 0, $54 | 0, tempRet0 | 0) | 0; //@line 32081
  $58 = $4 + 40 | 0; //@line 32083
  $59 = $58; //@line 32084
  $65 = _i64Add($56 | 0, tempRet0 | 0, HEAP32[$59 >> 2] | 0, HEAP32[$59 + 4 >> 2] | 0) | 0; //@line 32090
  $66 = tempRet0; //@line 32091
  $67 = $58; //@line 32092
  HEAP32[$67 >> 2] = $65; //@line 32094
  HEAP32[$67 + 4 >> 2] = $66; //@line 32097
  if ($66 >>> 0 < 0 | ($66 | 0) == 0 & $65 >>> 0 < $17 >>> 0) {
   $91 = $52; //@line 32104
   $92 = $53; //@line 32104
  } else {
   $76 = _i64Add($52 | 0, $53 | 0, 1, 0) | 0; //@line 32106
   $77 = tempRet0; //@line 32107
   $78 = _i64Subtract($65 | 0, $66 | 0, $17 | 0, 0) | 0; //@line 32108
   $80 = $58; //@line 32110
   HEAP32[$80 >> 2] = $78; //@line 32112
   HEAP32[$80 + 4 >> 2] = tempRet0; //@line 32115
   $91 = $76; //@line 32116
   $92 = $77; //@line 32116
  }
 }
 $84 = $4 + 48 | 0; //@line 32119
 $85 = $84; //@line 32120
 $93 = _i64Add(HEAP32[$85 >> 2] | 0, HEAP32[$85 + 4 >> 2] | 0, $91 | 0, $92 | 0) | 0; //@line 32126
 $95 = $84; //@line 32128
 HEAP32[$95 >> 2] = $93; //@line 32130
 HEAP32[$95 + 4 >> 2] = tempRet0; //@line 32133
 $99 = HEAP32[$2 >> 2] | 0; //@line 32134
 $100 = $99 + 48 | 0; //@line 32135
 $101 = $100; //@line 32136
 $102 = $101; //@line 32137
 $103 = HEAP32[$102 >> 2] | 0; //@line 32138
 $104 = $101 + 4 | 0; //@line 32139
 $105 = $104; //@line 32140
 $106 = HEAP32[$105 >> 2] | 0; //@line 32141
 $107 = ___async_retval; //@line 32142
 $108 = $107; //@line 32143
 $109 = $108; //@line 32144
 HEAP32[$109 >> 2] = $103; //@line 32145
 $110 = $108 + 4 | 0; //@line 32146
 $111 = $110; //@line 32147
 HEAP32[$111 >> 2] = $106; //@line 32148
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_502($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $2 = 0, $24 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 36987
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36989
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36991
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36993
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36995
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36997
 HEAP32[$2 + 364 >> 2] = 0; //@line 36999
 $14 = $2 + 1160 | 0; //@line 37002
 HEAP8[$14 >> 0] = HEAP8[$2 + 378 >> 0] | 0; //@line 37003
 HEAP8[$2 + 1163 >> 0] = HEAP8[$2 + 1129 >> 0] | 0; //@line 37007
 HEAP8[$2 + 1176 >> 0] = HEAP8[$2 + 1141 >> 0] | 0; //@line 37011
 HEAP8[$2 + 1177 >> 0] = HEAP8[$2 + 369 >> 0] | 0; //@line 37015
 $24 = $2 + 1178 | 0; //@line 37016
 HEAP8[$24 >> 0] = 0; //@line 37017
 HEAP32[$2 + 1180 >> 2] = 0; //@line 37019
 if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
  $29 = HEAP32[$2 >> 2] | 0; //@line 37024
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 37025
  __ZN7LoRaPHY20put_radio_to_standbyEv($29); //@line 37026
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 518; //@line 37029
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 37030
   HEAP32[$30 >> 2] = $2; //@line 37031
   $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 37032
   HEAP32[$31 >> 2] = $2; //@line 37033
   $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 37034
   HEAP32[$32 >> 2] = $14; //@line 37035
   $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 37036
   HEAP32[$33 >> 2] = $24; //@line 37037
   $34 = $ReallocAsyncCtx5 + 20 | 0; //@line 37038
   HEAP32[$34 >> 2] = $4; //@line 37039
   $35 = $ReallocAsyncCtx5 + 24 | 0; //@line 37040
   HEAP32[$35 >> 2] = $6; //@line 37041
   $36 = $ReallocAsyncCtx5 + 28 | 0; //@line 37042
   HEAP32[$36 >> 2] = $8; //@line 37043
   $37 = $ReallocAsyncCtx5 + 32 | 0; //@line 37044
   HEAP32[$37 >> 2] = $10; //@line 37045
   sp = STACKTOP; //@line 37046
   return;
  }
  ___async_unwind = 0; //@line 37049
  HEAP32[$ReallocAsyncCtx5 >> 2] = 518; //@line 37050
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 37051
  HEAP32[$30 >> 2] = $2; //@line 37052
  $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 37053
  HEAP32[$31 >> 2] = $2; //@line 37054
  $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 37055
  HEAP32[$32 >> 2] = $14; //@line 37056
  $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 37057
  HEAP32[$33 >> 2] = $24; //@line 37058
  $34 = $ReallocAsyncCtx5 + 20 | 0; //@line 37059
  HEAP32[$34 >> 2] = $4; //@line 37060
  $35 = $ReallocAsyncCtx5 + 24 | 0; //@line 37061
  HEAP32[$35 >> 2] = $6; //@line 37062
  $36 = $ReallocAsyncCtx5 + 28 | 0; //@line 37063
  HEAP32[$36 >> 2] = $8; //@line 37064
  $37 = $ReallocAsyncCtx5 + 32 | 0; //@line 37065
  HEAP32[$37 >> 2] = $10; //@line 37066
  sp = STACKTOP; //@line 37067
  return;
 } else {
  $38 = HEAP32[$2 >> 2] | 0; //@line 37070
  $41 = HEAP32[(HEAP32[$38 >> 2] | 0) + 24 >> 2] | 0; //@line 37073
  $44 = (__ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0) + 10 | 0; //@line 37076
  $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 37077
  FUNCTION_TABLE_iiii[$41 & 15]($38, $14, $44) | 0; //@line 37078
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 519; //@line 37081
   $45 = $ReallocAsyncCtx + 4 | 0; //@line 37082
   HEAP32[$45 >> 2] = $24; //@line 37083
   $46 = $ReallocAsyncCtx + 8 | 0; //@line 37084
   HEAP32[$46 >> 2] = $2; //@line 37085
   $47 = $ReallocAsyncCtx + 12 | 0; //@line 37086
   HEAP32[$47 >> 2] = $4; //@line 37087
   $48 = $ReallocAsyncCtx + 16 | 0; //@line 37088
   HEAP32[$48 >> 2] = $6; //@line 37089
   $49 = $ReallocAsyncCtx + 20 | 0; //@line 37090
   HEAP32[$49 >> 2] = $8; //@line 37091
   $50 = $ReallocAsyncCtx + 24 | 0; //@line 37092
   HEAP32[$50 >> 2] = $10; //@line 37093
   $51 = $ReallocAsyncCtx + 28 | 0; //@line 37094
   HEAP32[$51 >> 2] = $2; //@line 37095
   sp = STACKTOP; //@line 37096
   return;
  }
  ___async_unwind = 0; //@line 37099
  HEAP32[$ReallocAsyncCtx >> 2] = 519; //@line 37100
  $45 = $ReallocAsyncCtx + 4 | 0; //@line 37101
  HEAP32[$45 >> 2] = $24; //@line 37102
  $46 = $ReallocAsyncCtx + 8 | 0; //@line 37103
  HEAP32[$46 >> 2] = $2; //@line 37104
  $47 = $ReallocAsyncCtx + 12 | 0; //@line 37105
  HEAP32[$47 >> 2] = $4; //@line 37106
  $48 = $ReallocAsyncCtx + 16 | 0; //@line 37107
  HEAP32[$48 >> 2] = $6; //@line 37108
  $49 = $ReallocAsyncCtx + 20 | 0; //@line 37109
  HEAP32[$49 >> 2] = $8; //@line 37110
  $50 = $ReallocAsyncCtx + 24 | 0; //@line 37111
  HEAP32[$50 >> 2] = $10; //@line 37112
  $51 = $ReallocAsyncCtx + 28 | 0; //@line 37113
  HEAP32[$51 >> 2] = $2; //@line 37114
  sp = STACKTOP; //@line 37115
  return;
 }
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_96($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $46 = 0, $48 = 0, $52 = 0, $56 = 0, $6 = 0, $60 = 0, $69 = 0, $70 = 0, $74 = 0, $77 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 35410
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 35412
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35414
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35416
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 35418
 $10 = HEAP8[$0 + 18 >> 0] & 1; //@line 35421
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 35423
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 35425
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 35427
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 35429
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 35433
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 35435
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 35437
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 35439
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 35441
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 35443
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 35445
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 35447
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 35449
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 35451
 $42 = HEAP8[$0 + 80 >> 0] | 0; //@line 35453
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 35457
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 35459
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 35463
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 35467
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 35471
 if (!(HEAP32[$0 + 36 >> 2] | 0)) {
  if (!(HEAP8[(HEAP32[$0 + 84 >> 2] | 0) + 4 >> 0] | 0)) {
   HEAP16[___async_retval >> 1] = -1009; //@line 35481
   return;
  }
 }
 if (($42 + -1 & 255) >= 223) {
  _printf(12178, $56) | 0; //@line 35488
  _printf(12667, $60) | 0; //@line 35489
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 35490
  _putchar(10) | 0; //@line 35491
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 306; //@line 35494
   $69 = $ReallocAsyncCtx5 + 4 | 0; //@line 35495
   HEAP32[$69 >> 2] = $40; //@line 35496
   sp = STACKTOP; //@line 35497
   return;
  }
  ___async_unwind = 0; //@line 35500
  HEAP32[$ReallocAsyncCtx5 >> 2] = 306; //@line 35501
  $69 = $ReallocAsyncCtx5 + 4 | 0; //@line 35502
  HEAP32[$69 >> 2] = $40; //@line 35503
  sp = STACKTOP; //@line 35504
  return;
 }
 $70 = $4 + 2285 | 0; //@line 35507
 HEAP8[$70 >> 0] = $42; //@line 35508
 if (!($2 << 24 >> 24 == 0 | ($2 & 15) == 3)) {
  HEAP8[$4 + 1965 >> 0] = $42; //@line 35515
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(84) | 0; //@line 35517
  $77 = __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t($46, $8 & 255, $38) | 0; //@line 35518
  if (!___async) {
   HEAP32[___async_retval >> 2] = $77; //@line 35522
   ___async_unwind = 0; //@line 35523
  }
  HEAP32[$ReallocAsyncCtx8 >> 2] = 308; //@line 35525
  HEAP8[$ReallocAsyncCtx8 + 4 >> 0] = $2; //@line 35527
  HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $4; //@line 35529
  HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $6; //@line 35531
  HEAP16[$ReallocAsyncCtx8 + 16 >> 1] = $8; //@line 35533
  HEAP8[$ReallocAsyncCtx8 + 18 >> 0] = $10 & 1; //@line 35536
  HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $12; //@line 35538
  HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $14; //@line 35540
  HEAP32[$ReallocAsyncCtx8 + 28 >> 2] = $16; //@line 35542
  HEAP32[$ReallocAsyncCtx8 + 32 >> 2] = $18; //@line 35544
  HEAP32[$ReallocAsyncCtx8 + 36 >> 2] = $22; //@line 35546
  HEAP32[$ReallocAsyncCtx8 + 40 >> 2] = $24; //@line 35548
  HEAP32[$ReallocAsyncCtx8 + 44 >> 2] = $26; //@line 35550
  HEAP32[$ReallocAsyncCtx8 + 48 >> 2] = $28; //@line 35552
  HEAP32[$ReallocAsyncCtx8 + 52 >> 2] = $30; //@line 35554
  HEAP32[$ReallocAsyncCtx8 + 56 >> 2] = $32; //@line 35556
  HEAP32[$ReallocAsyncCtx8 + 60 >> 2] = $34; //@line 35558
  HEAP32[$ReallocAsyncCtx8 + 64 >> 2] = $36; //@line 35560
  HEAP32[$ReallocAsyncCtx8 + 68 >> 2] = $70; //@line 35562
  HEAP32[$ReallocAsyncCtx8 + 72 >> 2] = $38; //@line 35564
  HEAP32[$ReallocAsyncCtx8 + 76 >> 2] = $38; //@line 35566
  HEAP32[$ReallocAsyncCtx8 + 80 >> 2] = $40; //@line 35568
  sp = STACKTOP; //@line 35569
  return;
 }
 _printf(12178, $48) | 0; //@line 35572
 _printf(12704, $52) | 0; //@line 35573
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 35574
 _putchar(10) | 0; //@line 35575
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 307; //@line 35578
  $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 35579
  HEAP32[$74 >> 2] = $40; //@line 35580
  sp = STACKTOP; //@line 35581
  return;
 }
 ___async_unwind = 0; //@line 35584
 HEAP32[$ReallocAsyncCtx4 >> 2] = 307; //@line 35585
 $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 35586
 HEAP32[$74 >> 2] = $40; //@line 35587
 sp = STACKTOP; //@line 35588
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $58 = 0, $6 = 0, $60 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12280
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12282
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12284
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12286
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12288
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12290
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12292
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12294
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12296
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12298
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12300
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12302
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12304
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 12306
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 12308
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 12310
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 12314
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 12316
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 12318
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 12322
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 12324
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 12326
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 12328
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 12330
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 12332
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 12336
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 12338
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 12342
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 12344
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 12346
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 12348
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 12350
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 12352
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 12354
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 12356
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 12358
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12360
 if (!$AsyncRetVal) {
  _memcpy(HEAP32[$0 + 124 >> 2] | 0, $64 | 0, HEAP32[$0 + 84 >> 2] | 0) | 0; //@line 12363
 }
 HEAP8[$72 >> 0] = 0; //@line 12365
 HEAP8[$78 >> 0] = 0; //@line 12366
 HEAP8[$16 >> 0] = 0; //@line 12367
 HEAP8[$30 >> 0] = 0; //@line 12368
 HEAP8[$38 >> 0] = 0; //@line 12369
 HEAP8[$68 >> 0] = 0; //@line 12370
 HEAP8[$22 >> 0] = 0; //@line 12371
 HEAP8[$40 >> 0] = 0; //@line 12372
 HEAP8[$80 >> 0] = 0; //@line 12373
 HEAP8[$12 >> 0] = 0; //@line 12374
 HEAP8[$44 >> 0] = 0; //@line 12375
 HEAP8[$70 >> 0] = 0; //@line 12376
 HEAP8[$58 >> 0] = 0; //@line 12377
 HEAP8[$46 >> 0] = 0; //@line 12378
 HEAP8[$20 >> 0] = 0; //@line 12379
 HEAP8[$74 >> 0] = 0; //@line 12380
 HEAP8[$14 >> 0] = 0; //@line 12381
 HEAP8[$36 >> 0] = 0; //@line 12382
 HEAP8[$32 >> 0] = 0; //@line 12383
 HEAP8[$8 >> 0] = 0; //@line 12384
 HEAP8[$50 >> 0] = 0; //@line 12385
 HEAP8[$24 >> 0] = 0; //@line 12386
 HEAP8[$10 >> 0] = 0; //@line 12387
 HEAP8[$48 >> 0] = 0; //@line 12388
 HEAP8[$18 >> 0] = 0; //@line 12389
 HEAP8[$26 >> 0] = 0; //@line 12390
 HEAP8[$52 >> 0] = 0; //@line 12391
 HEAP8[$60 >> 0] = 0; //@line 12392
 HEAP8[$28 >> 0] = 0; //@line 12393
 HEAP8[$54 >> 0] = 0; //@line 12394
 HEAP8[$76 >> 0] = 0; //@line 12395
 HEAP8[$6 >> 0] = 0; //@line 12396
 HEAP32[$66 >> 2] = 0; //@line 12397
 HEAP8[$2 >> 0] = 0; //@line 12399
 HEAP8[$4 + 17 >> 0] = 0; //@line 12401
 HEAP8[$4 + 18 >> 0] = 0; //@line 12403
 HEAP8[$4 + 19 >> 0] = 0; //@line 12405
 HEAP8[$4 + 20 >> 0] = 0; //@line 12407
 HEAP8[$4 + 21 >> 0] = 0; //@line 12409
 HEAP8[$4 + 22 >> 0] = 0; //@line 12411
 HEAP8[$4 + 23 >> 0] = 0; //@line 12413
 HEAP8[$4 + 24 >> 0] = 0; //@line 12415
 HEAP8[$4 + 25 >> 0] = 0; //@line 12417
 HEAP8[$4 + 26 >> 0] = 0; //@line 12419
 HEAP8[$4 + 27 >> 0] = 0; //@line 12421
 HEAP8[$4 + 28 >> 0] = 0; //@line 12423
 HEAP8[$4 + 29 >> 0] = 0; //@line 12425
 HEAP8[$4 + 30 >> 0] = 0; //@line 12427
 HEAP8[$4 + 31 >> 0] = 0; //@line 12428
 HEAP8[$64 >> 0] = 0; //@line 12430
 HEAP8[$4 + 1 >> 0] = 0; //@line 12432
 HEAP8[$4 + 2 >> 0] = 0; //@line 12434
 HEAP8[$4 + 3 >> 0] = 0; //@line 12436
 HEAP8[$4 + 4 >> 0] = 0; //@line 12438
 HEAP8[$4 + 5 >> 0] = 0; //@line 12440
 HEAP8[$4 + 6 >> 0] = 0; //@line 12442
 HEAP8[$4 + 7 >> 0] = 0; //@line 12444
 HEAP8[$4 + 8 >> 0] = 0; //@line 12446
 HEAP8[$4 + 9 >> 0] = 0; //@line 12448
 HEAP8[$4 + 10 >> 0] = 0; //@line 12450
 HEAP8[$4 + 11 >> 0] = 0; //@line 12452
 HEAP8[$4 + 12 >> 0] = 0; //@line 12454
 HEAP8[$4 + 13 >> 0] = 0; //@line 12456
 HEAP8[$4 + 14 >> 0] = 0; //@line 12458
 HEAP8[$4 + 15 >> 0] = 0; //@line 12459
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 12461
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_467($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $23 = 0, $26 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $48 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 34152
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34158
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34160
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 34162
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34164
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34166
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 34168
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 34170
 if ((HEAP8[$0 + 4 >> 0] | 0) == 7) {
  if (HEAP8[(HEAP32[$0 + 8 >> 2] | 0) + 14 >> 0] | 0) {
   $23 = HEAP32[$6 >> 2] | 0; //@line 34177
   $26 = HEAP32[(HEAP32[$23 >> 2] | 0) + 16 >> 2] | 0; //@line 34180
   $31 = HEAP32[$8 + 8 >> 2] & 65535; //@line 34185
   $34 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 34188
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 34189
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$26 & 1]($23, 0, 5e4, ($10 & 255) * 1e3 | 0, 0, 83333, 5, $31, 0, 0, 1, 0, 0, 0, $34); //@line 34190
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 627; //@line 34193
    $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 34194
    HEAP32[$35 >> 2] = $8; //@line 34195
    $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 34196
    HEAP32[$36 >> 2] = $12; //@line 34197
    $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 34198
    HEAP32[$37 >> 2] = $14; //@line 34199
    $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 34200
    HEAP32[$38 >> 2] = $16; //@line 34201
    $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 34202
    HEAP32[$39 >> 2] = $6; //@line 34203
    $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 34204
    HEAP8[$40 >> 0] = $10; //@line 34205
    $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 34206
    HEAP32[$41 >> 2] = $18; //@line 34207
    sp = STACKTOP; //@line 34208
    return;
   }
   ___async_unwind = 0; //@line 34211
   HEAP32[$ReallocAsyncCtx6 >> 2] = 627; //@line 34212
   $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 34213
   HEAP32[$35 >> 2] = $8; //@line 34214
   $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 34215
   HEAP32[$36 >> 2] = $12; //@line 34216
   $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 34217
   HEAP32[$37 >> 2] = $14; //@line 34218
   $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 34219
   HEAP32[$38 >> 2] = $16; //@line 34220
   $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 34221
   HEAP32[$39 >> 2] = $6; //@line 34222
   $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 34223
   HEAP8[$40 >> 0] = $10; //@line 34224
   $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 34225
   HEAP32[$41 >> 2] = $18; //@line 34226
   sp = STACKTOP; //@line 34227
   return;
  }
 }
 $42 = HEAP32[$6 >> 2] | 0; //@line 34231
 $45 = HEAP32[(HEAP32[$42 >> 2] | 0) + 16 >> 2] | 0; //@line 34234
 $48 = HEAPU8[$8 + 2 >> 0] | 0; //@line 34237
 $52 = HEAP32[$8 + 8 >> 2] & 65535; //@line 34241
 $55 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 34244
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 34245
 FUNCTION_TABLE_viiiiiiiiiiiiiii[$45 & 1]($42, 1, $48, $10 & 255, 1, 0, 8, $52, 0, 0, 0, 0, 0, 1, $55); //@line 34246
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 628; //@line 34249
  $56 = $ReallocAsyncCtx7 + 4 | 0; //@line 34250
  HEAP32[$56 >> 2] = $8; //@line 34251
  $57 = $ReallocAsyncCtx7 + 8 | 0; //@line 34252
  HEAP32[$57 >> 2] = $12; //@line 34253
  $58 = $ReallocAsyncCtx7 + 12 | 0; //@line 34254
  HEAP32[$58 >> 2] = $14; //@line 34255
  $59 = $ReallocAsyncCtx7 + 16 | 0; //@line 34256
  HEAP32[$59 >> 2] = $16; //@line 34257
  $60 = $ReallocAsyncCtx7 + 20 | 0; //@line 34258
  HEAP32[$60 >> 2] = $6; //@line 34259
  $61 = $ReallocAsyncCtx7 + 24 | 0; //@line 34260
  HEAP8[$61 >> 0] = $10; //@line 34261
  $62 = $ReallocAsyncCtx7 + 28 | 0; //@line 34262
  HEAP32[$62 >> 2] = $18; //@line 34263
  sp = STACKTOP; //@line 34264
  return;
 }
 ___async_unwind = 0; //@line 34267
 HEAP32[$ReallocAsyncCtx7 >> 2] = 628; //@line 34268
 $56 = $ReallocAsyncCtx7 + 4 | 0; //@line 34269
 HEAP32[$56 >> 2] = $8; //@line 34270
 $57 = $ReallocAsyncCtx7 + 8 | 0; //@line 34271
 HEAP32[$57 >> 2] = $12; //@line 34272
 $58 = $ReallocAsyncCtx7 + 12 | 0; //@line 34273
 HEAP32[$58 >> 2] = $14; //@line 34274
 $59 = $ReallocAsyncCtx7 + 16 | 0; //@line 34275
 HEAP32[$59 >> 2] = $16; //@line 34276
 $60 = $ReallocAsyncCtx7 + 20 | 0; //@line 34277
 HEAP32[$60 >> 2] = $6; //@line 34278
 $61 = $ReallocAsyncCtx7 + 24 | 0; //@line 34279
 HEAP8[$61 >> 0] = $10; //@line 34280
 $62 = $ReallocAsyncCtx7 + 28 | 0; //@line 34281
 HEAP32[$62 >> 2] = $18; //@line 34282
 sp = STACKTOP; //@line 34283
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_46($0) {
 $0 = $0 | 0;
 var $$sroa$0$0$copyload = 0, $12 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 28963
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28965
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28967
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28969
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28971
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28975
 $15 = $2 + 356 | 0; //@line 28978
 $17 = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$15 >> 2] | 0) | 0; //@line 28980
 $$sroa$0$0$copyload = HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) >> 2] | 0; //@line 28983
 $20 = $2 + 360 | 0; //@line 28984
 if ((HEAP32[$20 >> 2] | 0) == 2) {
  _printf(13258, $8) | 0; //@line 28988
  _printf(13285, $12) | 0; //@line 28989
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 28990
  _putchar(10) | 0; //@line 28991
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 365; //@line 28994
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 28995
   HEAP32[$31 >> 2] = $15; //@line 28996
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 28997
   HEAP32[$32 >> 2] = $2; //@line 28998
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 28999
   HEAP32[$33 >> 2] = $17; //@line 29000
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 29001
   HEAP32[$34 >> 2] = $4; //@line 29002
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 29003
   HEAP32[$35 >> 2] = $20; //@line 29004
   $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 29005
   HEAP32[$36 >> 2] = $6; //@line 29006
   $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 29007
   HEAP32[$37 >> 2] = $6; //@line 29008
   $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 29009
   HEAP32[$38 >> 2] = $$sroa$0$0$copyload; //@line 29010
   $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 29011
   HEAP32[$39 >> 2] = $4; //@line 29012
   sp = STACKTOP; //@line 29013
   return;
  }
  ___async_unwind = 0; //@line 29016
  HEAP32[$ReallocAsyncCtx2 >> 2] = 365; //@line 29017
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 29018
  HEAP32[$31 >> 2] = $15; //@line 29019
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 29020
  HEAP32[$32 >> 2] = $2; //@line 29021
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 29022
  HEAP32[$33 >> 2] = $17; //@line 29023
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 29024
  HEAP32[$34 >> 2] = $4; //@line 29025
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 29026
  HEAP32[$35 >> 2] = $20; //@line 29027
  $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 29028
  HEAP32[$36 >> 2] = $6; //@line 29029
  $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 29030
  HEAP32[$37 >> 2] = $6; //@line 29031
  $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 29032
  HEAP32[$38 >> 2] = $$sroa$0$0$copyload; //@line 29033
  $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 29034
  HEAP32[$39 >> 2] = $4; //@line 29035
  sp = STACKTOP; //@line 29036
  return;
 } else {
  $23 = HEAP32[$2 >> 2] | 0; //@line 29039
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 29040
  __ZN7LoRaPHY18put_radio_to_sleepEv($23); //@line 29041
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 364; //@line 29044
   $24 = $ReallocAsyncCtx8 + 4 | 0; //@line 29045
   HEAP32[$24 >> 2] = $15; //@line 29046
   $25 = $ReallocAsyncCtx8 + 8 | 0; //@line 29047
   HEAP32[$25 >> 2] = $2; //@line 29048
   $26 = $ReallocAsyncCtx8 + 12 | 0; //@line 29049
   HEAP32[$26 >> 2] = $17; //@line 29050
   $27 = $ReallocAsyncCtx8 + 16 | 0; //@line 29051
   HEAP32[$27 >> 2] = $4; //@line 29052
   $28 = $ReallocAsyncCtx8 + 20 | 0; //@line 29053
   HEAP32[$28 >> 2] = $20; //@line 29054
   $29 = $ReallocAsyncCtx8 + 24 | 0; //@line 29055
   HEAP32[$29 >> 2] = $$sroa$0$0$copyload; //@line 29056
   $30 = $ReallocAsyncCtx8 + 28 | 0; //@line 29057
   HEAP32[$30 >> 2] = $4; //@line 29058
   sp = STACKTOP; //@line 29059
   return;
  }
  ___async_unwind = 0; //@line 29062
  HEAP32[$ReallocAsyncCtx8 >> 2] = 364; //@line 29063
  $24 = $ReallocAsyncCtx8 + 4 | 0; //@line 29064
  HEAP32[$24 >> 2] = $15; //@line 29065
  $25 = $ReallocAsyncCtx8 + 8 | 0; //@line 29066
  HEAP32[$25 >> 2] = $2; //@line 29067
  $26 = $ReallocAsyncCtx8 + 12 | 0; //@line 29068
  HEAP32[$26 >> 2] = $17; //@line 29069
  $27 = $ReallocAsyncCtx8 + 16 | 0; //@line 29070
  HEAP32[$27 >> 2] = $4; //@line 29071
  $28 = $ReallocAsyncCtx8 + 20 | 0; //@line 29072
  HEAP32[$28 >> 2] = $20; //@line 29073
  $29 = $ReallocAsyncCtx8 + 24 | 0; //@line 29074
  HEAP32[$29 >> 2] = $$sroa$0$0$copyload; //@line 29075
  $30 = $ReallocAsyncCtx8 + 28 | 0; //@line 29076
  HEAP32[$30 >> 2] = $4; //@line 29077
  sp = STACKTOP; //@line 29078
  return;
 }
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv($0) {
 $0 = $0 | 0;
 var $16 = 0, $30 = 0, $31 = 0, $34 = 0, $37 = 0, $38 = 0, $47 = 0, $49 = 0, $54 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx9 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 11927
 STACKTOP = STACKTOP + 32 | 0; //@line 11928
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11928
 $vararg_buffer5 = sp + 24 | 0; //@line 11929
 $vararg_buffer3 = sp + 16 | 0; //@line 11930
 _printf(13258, sp) | 0; //@line 11933
 _printf(13308, sp + 8 | 0) | 0; //@line 11934
 $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11935
 _putchar(10) | 0; //@line 11936
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 383; //@line 11939
  HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 11941
  HEAP32[$AsyncCtx13 + 8 >> 2] = $vararg_buffer3; //@line 11943
  HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer3; //@line 11945
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer5; //@line 11947
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer5; //@line 11949
  sp = STACKTOP; //@line 11950
  STACKTOP = sp; //@line 11951
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 11953
 $7 = HEAP32[$0 + 356 >> 2] | 0; //@line 11955
 $AsyncCtx19 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11957
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($7, $0 + 1056 | 0); //@line 11958
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 384; //@line 11961
  HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 11963
  HEAP32[$AsyncCtx19 + 8 >> 2] = $vararg_buffer3; //@line 11965
  HEAP32[$AsyncCtx19 + 12 >> 2] = $vararg_buffer3; //@line 11967
  HEAP32[$AsyncCtx19 + 16 >> 2] = $vararg_buffer5; //@line 11969
  HEAP32[$AsyncCtx19 + 20 >> 2] = $vararg_buffer5; //@line 11971
  sp = STACKTOP; //@line 11972
  STACKTOP = sp; //@line 11973
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 11975
 $16 = $0 + 1184 | 0; //@line 11978
 HEAP8[$16 >> 0] = HEAP8[$0 + 378 >> 0] | 0; //@line 11979
 HEAP32[$0 + 1188 >> 2] = HEAP32[$0 + 1132 >> 2]; //@line 11983
 HEAP8[$0 + 1200 >> 0] = HEAP8[$0 + 1141 >> 0] | 0; //@line 11987
 HEAP8[$0 + 1201 >> 0] = HEAP8[$0 + 369 >> 0] | 0; //@line 11991
 HEAP32[$0 + 1204 >> 2] = 1; //@line 11993
 $30 = $0 + 1202 | 0; //@line 11997
 HEAP8[$30 >> 0] = (HEAP32[$0 + 360 >> 2] | 0) == 2 & 1; //@line 11999
 $31 = HEAP32[$0 >> 2] | 0; //@line 12000
 $34 = HEAP32[(HEAP32[$31 >> 2] | 0) + 24 >> 2] | 0; //@line 12003
 $37 = (__ZN11LoRaMacMcps14get_indicationEv($0 + 288 | 0) | 0) + 10 | 0; //@line 12006
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 12007
 $38 = FUNCTION_TABLE_iiii[$34 & 15]($31, $16, $37) | 0; //@line 12008
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 385; //@line 12011
  HEAP32[$AsyncCtx + 4 >> 2] = $30; //@line 12013
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 12015
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer3; //@line 12017
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 12019
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer5; //@line 12021
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer5; //@line 12023
  HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 12025
  sp = STACKTOP; //@line 12026
  STACKTOP = sp; //@line 12027
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12029
 if (!$38) {
  STACKTOP = sp; //@line 12031
  return;
 }
 $47 = (HEAP8[$30 >> 0] | 0) != 0; //@line 12034
 $49 = HEAP32[$0 + 1108 >> 2] | 0; //@line 12036
 _printf(13258, $vararg_buffer3) | 0; //@line 12037
 _printf(13334, $vararg_buffer5) | 0; //@line 12038
 $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12039
 _putchar(10) | 0; //@line 12040
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 386; //@line 12043
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 12045
  HEAP8[$AsyncCtx9 + 8 >> 0] = $47 & 1; //@line 12048
  HEAP32[$AsyncCtx9 + 12 >> 2] = $49; //@line 12050
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 12052
  sp = STACKTOP; //@line 12053
  STACKTOP = sp; //@line 12054
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 12056
 $54 = HEAP32[$0 >> 2] | 0; //@line 12057
 $AsyncCtx16 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12058
 __ZN7LoRaPHY15setup_rx_windowEbj($54, $47, $49); //@line 12059
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 387; //@line 12062
  HEAP32[$AsyncCtx16 + 4 >> 2] = $0; //@line 12064
  sp = STACKTOP; //@line 12065
  STACKTOP = sp; //@line 12066
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 12068
 HEAP32[$0 + 364 >> 2] = 1; //@line 12070
 STACKTOP = sp; //@line 12071
 return;
}
function __ZN14LoRaMacCommand15add_mac_commandEhhh($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $15 = 0, $25 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $72 = 0, $73 = 0, $80 = 0, $81 = 0, $87 = 0, $88 = 0;
 $5 = HEAP8[$0 + 3 >> 0] | 0; //@line 20522
 L1 : do {
  switch ($1 << 24 >> 24) {
  case 2:
   {
    $6 = $0 + 2 | 0; //@line 20526
    $7 = HEAP8[$6 >> 0] | 0; //@line 20527
    if (($7 & 255) < (-128 - $5 & 255)) {
     HEAP8[$6 >> 0] = $7 + 1 << 24 >> 24; //@line 20534
     HEAP8[($7 & 255) + ($0 + 4) >> 0] = 2; //@line 20535
     break L1;
    } else {
     $$0 = -1e3; //@line 20538
     return $$0 | 0; //@line 20539
    }
    break;
   }
  case 3:
   {
    $13 = $0 + 2 | 0; //@line 20544
    $14 = HEAP8[$13 >> 0] | 0; //@line 20545
    $15 = $14 & 255; //@line 20546
    if (((-128 - $5 & 255) + -1 | 0) > ($15 | 0)) {
     HEAP8[$0 + 4 + $15 >> 0] = 3; //@line 20557
     HEAP8[$13 >> 0] = $14 + 2 << 24 >> 24; //@line 20558
     HEAP8[($14 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 20559
     break L1;
    } else {
     $$0 = -1e3; //@line 20562
     return $$0 | 0; //@line 20563
    }
    break;
   }
  case 4:
   {
    $25 = $0 + 2 | 0; //@line 20568
    $26 = HEAP8[$25 >> 0] | 0; //@line 20569
    if (($26 & 255) < (-128 - $5 & 255)) {
     HEAP8[$25 >> 0] = $26 + 1 << 24 >> 24; //@line 20576
     HEAP8[($26 & 255) + ($0 + 4) >> 0] = 4; //@line 20577
     break L1;
    } else {
     $$0 = -1e3; //@line 20580
     return $$0 | 0; //@line 20581
    }
    break;
   }
  case 5:
   {
    $32 = $0 + 2 | 0; //@line 20586
    $33 = HEAP8[$32 >> 0] | 0; //@line 20587
    $34 = $33 & 255; //@line 20588
    if (((-128 - $5 & 255) + -1 | 0) > ($34 | 0)) {
     HEAP8[$0 + 4 + $34 >> 0] = 5; //@line 20596
     HEAP8[$32 >> 0] = $33 + 2 << 24 >> 24; //@line 20598
     HEAP8[($33 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 20601
     HEAP8[$0 + 1 >> 0] = 1; //@line 20603
     break L1;
    } else {
     $$0 = -1e3; //@line 20606
     return $$0 | 0; //@line 20607
    }
    break;
   }
  case 6:
   {
    $45 = $0 + 2 | 0; //@line 20612
    $46 = HEAP8[$45 >> 0] | 0; //@line 20613
    $47 = $46 & 255; //@line 20614
    if (((-128 - $5 & 255) + -2 | 0) > ($47 | 0)) {
     HEAP8[$0 + 4 + $47 >> 0] = 6; //@line 20622
     HEAP8[($46 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 20626
     HEAP8[$45 >> 0] = $46 + 3 << 24 >> 24; //@line 20628
     HEAP8[($46 + 2 & 255) + ($0 + 4) >> 0] = $3; //@line 20631
     break L1;
    } else {
     $$0 = -1e3; //@line 20634
     return $$0 | 0; //@line 20635
    }
    break;
   }
  case 7:
   {
    $60 = $0 + 2 | 0; //@line 20640
    $61 = HEAP8[$60 >> 0] | 0; //@line 20641
    $62 = $61 & 255; //@line 20642
    if (((-128 - $5 & 255) + -1 | 0) > ($62 | 0)) {
     HEAP8[$0 + 4 + $62 >> 0] = 7; //@line 20653
     HEAP8[$60 >> 0] = $61 + 2 << 24 >> 24; //@line 20654
     HEAP8[($61 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 20655
     break L1;
    } else {
     $$0 = -1e3; //@line 20658
     return $$0 | 0; //@line 20659
    }
    break;
   }
  case 8:
   {
    $72 = $0 + 2 | 0; //@line 20664
    $73 = HEAP8[$72 >> 0] | 0; //@line 20665
    if (($73 & 255) < (-128 - $5 & 255)) {
     HEAP8[$72 >> 0] = $73 + 1 << 24 >> 24; //@line 20673
     HEAP8[($73 & 255) + ($0 + 4) >> 0] = 8; //@line 20674
     HEAP8[$0 + 1 >> 0] = 1; //@line 20675
     break L1;
    } else {
     $$0 = -1e3; //@line 20678
     return $$0 | 0; //@line 20679
    }
    break;
   }
  case 9:
   {
    $80 = $0 + 2 | 0; //@line 20684
    $81 = HEAP8[$80 >> 0] | 0; //@line 20685
    if (($81 & 255) < (-128 - $5 & 255)) {
     HEAP8[$80 >> 0] = $81 + 1 << 24 >> 24; //@line 20692
     HEAP8[($81 & 255) + ($0 + 4) >> 0] = 9; //@line 20693
     break L1;
    } else {
     $$0 = -1e3; //@line 20696
     return $$0 | 0; //@line 20697
    }
    break;
   }
  case 10:
   {
    $87 = $0 + 2 | 0; //@line 20702
    $88 = HEAP8[$87 >> 0] | 0; //@line 20703
    if (($88 & 255) < (-128 - $5 & 255)) {
     HEAP8[($88 & 255) + ($0 + 4) >> 0] = 10; //@line 20710
     HEAP8[$87 >> 0] = $88 + 2 << 24 >> 24; //@line 20712
     HEAP8[($88 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 20715
     HEAP8[$0 + 1 >> 0] = 1; //@line 20717
     break L1;
    } else {
     $$0 = -1e3; //@line 20720
     return $$0 | 0; //@line 20721
    }
    break;
   }
  default:
   {
    $$0 = -1002; //@line 20726
    return $$0 | 0; //@line 20727
   }
  }
 } while (0);
 HEAP8[$0 >> 0] = 1; //@line 20731
 $$0 = 0; //@line 20732
 return $$0 | 0; //@line 20733
}
function _main__async_cb_142($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 314
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 316
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 318
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 320
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 322
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 324
 $13 = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 327
 if ($13 | 0) {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 331
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 332
  FUNCTION_TABLE_vi[$16 & 1023]($4); //@line 333
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 756; //@line 336
   $17 = $ReallocAsyncCtx + 4 | 0; //@line 337
   HEAP32[$17 >> 2] = $2; //@line 338
   $18 = $ReallocAsyncCtx + 8 | 0; //@line 339
   HEAP32[$18 >> 2] = $8; //@line 340
   $19 = $ReallocAsyncCtx + 12 | 0; //@line 341
   HEAP32[$19 >> 2] = $10; //@line 342
   $20 = $ReallocAsyncCtx + 16 | 0; //@line 343
   HEAP32[$20 >> 2] = $6; //@line 344
   sp = STACKTOP; //@line 345
   return;
  }
  ___async_unwind = 0; //@line 348
  HEAP32[$ReallocAsyncCtx >> 2] = 756; //@line 349
  $17 = $ReallocAsyncCtx + 4 | 0; //@line 350
  HEAP32[$17 >> 2] = $2; //@line 351
  $18 = $ReallocAsyncCtx + 8 | 0; //@line 352
  HEAP32[$18 >> 2] = $8; //@line 353
  $19 = $ReallocAsyncCtx + 12 | 0; //@line 354
  HEAP32[$19 >> 2] = $10; //@line 355
  $20 = $ReallocAsyncCtx + 16 | 0; //@line 356
  HEAP32[$20 >> 2] = $6; //@line 357
  sp = STACKTOP; //@line 358
  return;
 }
 $22 = $2 + 4 | 0; //@line 362
 HEAP32[$22 >> 2] = 0; //@line 364
 HEAP32[$22 + 4 >> 2] = 0; //@line 367
 HEAP32[$2 >> 2] = 757; //@line 368
 $26 = $2 + 12 | 0; //@line 369
 HEAP32[$26 >> 2] = 10140; //@line 370
 $27 = HEAP32[5887] | 0; //@line 371
 if (!$27) {
  $37 = HEAP32[2536] | 0; //@line 375
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 376
  FUNCTION_TABLE_vii[$37 & 31](23536, $2); //@line 377
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 759; //@line 380
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 381
   HEAP32[$38 >> 2] = $2; //@line 382
   $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 383
   HEAP32[$39 >> 2] = $26; //@line 384
   $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 385
   HEAP32[$40 >> 2] = $8; //@line 386
   $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 387
   HEAP32[$41 >> 2] = $10; //@line 388
   $42 = $ReallocAsyncCtx3 + 20 | 0; //@line 389
   HEAP32[$42 >> 2] = $6; //@line 390
   sp = STACKTOP; //@line 391
   return;
  }
  ___async_unwind = 0; //@line 394
  HEAP32[$ReallocAsyncCtx3 >> 2] = 759; //@line 395
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 396
  HEAP32[$38 >> 2] = $2; //@line 397
  $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 398
  HEAP32[$39 >> 2] = $26; //@line 399
  $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 400
  HEAP32[$40 >> 2] = $8; //@line 401
  $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 402
  HEAP32[$41 >> 2] = $10; //@line 403
  $42 = $ReallocAsyncCtx3 + 20 | 0; //@line 404
  HEAP32[$42 >> 2] = $6; //@line 405
  sp = STACKTOP; //@line 406
  return;
 } else {
  $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 410
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 411
  FUNCTION_TABLE_vi[$30 & 1023](23536); //@line 412
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 758; //@line 415
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 416
   HEAP32[$31 >> 2] = $2; //@line 417
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 418
   HEAP32[$32 >> 2] = $26; //@line 419
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 420
   HEAP32[$33 >> 2] = $8; //@line 421
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 422
   HEAP32[$34 >> 2] = $10; //@line 423
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 424
   HEAP32[$35 >> 2] = $6; //@line 425
   sp = STACKTOP; //@line 426
   return;
  }
  ___async_unwind = 0; //@line 429
  HEAP32[$ReallocAsyncCtx2 >> 2] = 758; //@line 430
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 431
  HEAP32[$31 >> 2] = $2; //@line 432
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 433
  HEAP32[$32 >> 2] = $26; //@line 434
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 435
  HEAP32[$33 >> 2] = $8; //@line 436
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 437
  HEAP32[$34 >> 2] = $10; //@line 438
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 439
  HEAP32[$35 >> 2] = $6; //@line 440
  sp = STACKTOP; //@line 441
  return;
 }
}
function _equeue_cancel($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $$sink$in$in$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $24 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $42 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $56 = 0, $57 = 0, $59 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5026
 if (!$1) {
  return;
 }
 $5 = $0 + 16 | 0; //@line 5033
 $10 = (HEAP32[$0 + 12 >> 2] | 0) + ((1 << HEAP32[$5 >> 2]) + -1 & $1) | 0; //@line 5038
 $11 = $0 + 128 | 0; //@line 5039
 _equeue_mutex_lock($11); //@line 5040
 $12 = $10 + 4 | 0; //@line 5041
 $13 = HEAP8[$12 >> 0] | 0; //@line 5042
 $14 = $13 & 255; //@line 5043
 $15 = HEAP32[$5 >> 2] | 0; //@line 5044
 if (($1 >> $15 | 0) != ($14 | 0)) {
  _equeue_mutex_unlock($11); //@line 5048
  return;
 }
 HEAP32[$10 + 32 >> 2] = 0; //@line 5052
 HEAP32[$10 + 24 >> 2] = -1; //@line 5054
 $24 = (HEAP32[$10 + 20 >> 2] | 0) - (HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 5059
 do {
  if (($24 | 0) >= 0) {
   if (!$24) {
    if ((HEAP8[$10 + 5 >> 0] | 0) != (HEAP8[$0 + 9 >> 0] | 0)) {
     break;
    }
   }
   $32 = $10 + 12 | 0; //@line 5074
   $33 = HEAP32[$32 >> 2] | 0; //@line 5075
   $35 = $10 + 8 | 0; //@line 5077
   $36 = HEAP32[$35 >> 2] | 0; //@line 5078
   $37 = $33; //@line 5079
   if (!$33) {
    $44 = $10 + 16 | 0; //@line 5081
    HEAP32[HEAP32[$44 >> 2] >> 2] = $36; //@line 5083
    $46 = HEAP32[$35 >> 2] | 0; //@line 5084
    if ($46 | 0) {
     $$sink$in$in$i = $44; //@line 5087
     $49 = $46; //@line 5087
     label = 13; //@line 5088
    }
   } else {
    $38 = $33 + 8 | 0; //@line 5091
    HEAP32[$38 >> 2] = $36; //@line 5092
    if ($36 | 0) {
     HEAP32[$36 + 16 >> 2] = $38; //@line 5097
    }
    $42 = $10 + 16 | 0; //@line 5099
    HEAP32[HEAP32[$42 >> 2] >> 2] = $37; //@line 5101
    $$sink$in$in$i = $42; //@line 5103
    $49 = HEAP32[$32 >> 2] | 0; //@line 5103
    label = 13; //@line 5104
   }
   if ((label | 0) == 13) {
    HEAP32[$49 + 16 >> 2] = HEAP32[$$sink$in$in$i >> 2]; //@line 5109
   }
   HEAP8[$12 >> 0] = (($13 + 1 & 255) << $15 | 0) == 0 ? 1 : $14 + 1 & 255; //@line 5118
   _equeue_mutex_unlock($11); //@line 5119
   $56 = $10 + 36 | 0; //@line 5120
   $57 = $56 + -36 | 0; //@line 5121
   $59 = HEAP32[$56 + -8 >> 2] | 0; //@line 5123
   do {
    if ($59 | 0) {
     $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5127
     FUNCTION_TABLE_vi[$59 & 1023]($56); //@line 5128
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 184; //@line 5131
      HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5133
      HEAP32[$AsyncCtx + 8 >> 2] = $56; //@line 5135
      HEAP32[$AsyncCtx + 12 >> 2] = $57; //@line 5137
      sp = STACKTOP; //@line 5138
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 5141
      break;
     }
    }
   } while (0);
   $64 = $0 + 156 | 0; //@line 5146
   _equeue_mutex_lock($64); //@line 5147
   $65 = $0 + 24 | 0; //@line 5148
   $66 = HEAP32[$65 >> 2] | 0; //@line 5149
   L28 : do {
    if (!$66) {
     $$02329$i$i = $65; //@line 5153
     label = 24; //@line 5154
    } else {
     $68 = HEAP32[$57 >> 2] | 0; //@line 5156
     $$025$i$i = $65; //@line 5157
     $70 = $66; //@line 5157
     while (1) {
      $69 = HEAP32[$70 >> 2] | 0; //@line 5159
      if ($69 >>> 0 >= $68 >>> 0) {
       break;
      }
      $72 = $70 + 8 | 0; //@line 5164
      $73 = HEAP32[$72 >> 2] | 0; //@line 5165
      if (!$73) {
       $$02329$i$i = $72; //@line 5168
       label = 24; //@line 5169
       break L28;
      } else {
       $$025$i$i = $72; //@line 5172
       $70 = $73; //@line 5172
      }
     }
     if (($69 | 0) == ($68 | 0)) {
      HEAP32[$56 + -24 >> 2] = $70; //@line 5178
      $$02330$i$i = $$025$i$i; //@line 5181
      $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 5181
     } else {
      $$02329$i$i = $$025$i$i; //@line 5183
      label = 24; //@line 5184
     }
    }
   } while (0);
   if ((label | 0) == 24) {
    HEAP32[$56 + -24 >> 2] = 0; //@line 5190
    $$02330$i$i = $$02329$i$i; //@line 5191
    $$sink$in$i$i = $$02329$i$i; //@line 5191
   }
   HEAP32[$56 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 5195
   HEAP32[$$02330$i$i >> 2] = $57; //@line 5196
   _equeue_mutex_unlock($64); //@line 5197
   return;
  }
 } while (0);
 _equeue_mutex_unlock($11); //@line 5201
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $22 = 0, $3 = 0, $31 = 0, $32 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $43 = 0, $5 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 27203
 STACKTOP = STACKTOP + 16 | 0; //@line 27204
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 27204
 $3 = sp; //@line 27205
 $4 = HEAP32[$0 >> 2] | 0; //@line 27206
 $5 = $1 + 12 | 0; //@line 27207
 $6 = HEAP32[$5 >> 2] | 0; //@line 27208
 do {
  if (!$6) {
   $16 = 0; //@line 27212
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 27215
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 27216
   FUNCTION_TABLE_vii[$9 & 31]($3, $1); //@line 27217
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 667; //@line 27220
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 27222
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 27224
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 27226
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 27228
    HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 27230
    sp = STACKTOP; //@line 27231
    STACKTOP = sp; //@line 27232
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 27234
    $16 = HEAP32[$5 >> 2] | 0; //@line 27236
    break;
   }
  }
 } while (0);
 $15 = $3 + 12 | 0; //@line 27241
 HEAP32[$15 >> 2] = $16; //@line 27242
 $17 = _equeue_alloc($4, 16) | 0; //@line 27243
 do {
  if (!$17) {
   $$0$i = 0; //@line 27247
  } else {
   $19 = HEAP32[$15 >> 2] | 0; //@line 27249
   do {
    if (!$19) {
     $31 = 0; //@line 27253
    } else {
     $22 = HEAP32[$19 + 4 >> 2] | 0; //@line 27256
     $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 27257
     FUNCTION_TABLE_vii[$22 & 31]($17, $3); //@line 27258
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 668; //@line 27261
      HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 27263
      HEAP32[$AsyncCtx2 + 8 >> 2] = $17; //@line 27265
      HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 27267
      HEAP32[$AsyncCtx2 + 16 >> 2] = $4; //@line 27269
      HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 27271
      HEAP32[$AsyncCtx2 + 24 >> 2] = $15; //@line 27273
      HEAP32[$AsyncCtx2 + 28 >> 2] = $3; //@line 27275
      sp = STACKTOP; //@line 27276
      STACKTOP = sp; //@line 27277
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 27279
      $31 = HEAP32[$15 >> 2] | 0; //@line 27281
      break;
     }
    }
   } while (0);
   HEAP32[$17 + 12 >> 2] = $31; //@line 27287
   _equeue_event_delay($17, $2); //@line 27288
   _equeue_event_dtor($17, 375); //@line 27289
   $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 27290
   $32 = _equeue_post($4, 376, $17) | 0; //@line 27291
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 669; //@line 27294
    HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 27296
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 27298
    HEAP32[$AsyncCtx9 + 12 >> 2] = $3; //@line 27300
    sp = STACKTOP; //@line 27301
    STACKTOP = sp; //@line 27302
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 27304
    $$0$i = $32; //@line 27305
    break;
   }
  }
 } while (0);
 $36 = $1 + 16 | 0; //@line 27310
 HEAP32[$36 >> 2] = $$0$i; //@line 27311
 $37 = HEAP32[$15 >> 2] | 0; //@line 27312
 do {
  if (!$37) {
   $43 = $$0$i; //@line 27316
  } else {
   $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 27319
   $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 27320
   FUNCTION_TABLE_vi[$40 & 1023]($3); //@line 27321
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 670; //@line 27324
    HEAP32[$AsyncCtx6 + 4 >> 2] = $36; //@line 27326
    sp = STACKTOP; //@line 27327
    STACKTOP = sp; //@line 27328
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 27330
    $43 = HEAP32[$36 >> 2] | 0; //@line 27332
    break;
   }
  }
 } while (0);
 if ($43 | 0) {
  STACKTOP = sp; //@line 27339
  return;
 }
 $AsyncCtx13 = _emscripten_alloc_async_context(4, sp) | 0; //@line 27341
 _mbed_assert_internal(14025, 14043, 57); //@line 27342
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 671; //@line 27345
  sp = STACKTOP; //@line 27346
  STACKTOP = sp; //@line 27347
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 27349
 STACKTOP = sp; //@line 27350
 return;
}
function _gcm_mult($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07475 = 0, $100 = 0, $101 = 0, $103 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $120 = 0, $126 = 0, $130 = 0, $134 = 0, $140 = 0, $144 = 0, $148 = 0, $15 = 0, $154 = 0, $158 = 0, $162 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $46 = 0, $51 = 0, $6 = 0, $60 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $88 = 0, $92 = 0, $94 = 0;
 $4 = HEAP8[$1 + 15 >> 0] | 0; //@line 4346
 $6 = $4 & 15; //@line 4348
 $8 = $0 + 200 + ($6 << 3) | 0; //@line 4350
 $15 = $0 + 72 + ($6 << 3) | 0; //@line 4357
 $$07475 = 15; //@line 4363
 $22 = $4; //@line 4363
 $27 = HEAP32[$15 >> 2] | 0; //@line 4363
 $28 = HEAP32[$8 >> 2] | 0; //@line 4363
 $29 = HEAP32[$8 + 4 >> 2] | 0; //@line 4363
 $32 = HEAP32[$15 + 4 >> 2] | 0; //@line 4363
 while (1) {
  if (($$07475 | 0) == 15) {
   $69 = $27; //@line 4368
   $70 = $28; //@line 4368
   $71 = $29; //@line 4368
   $74 = $32; //@line 4368
  } else {
   $25 = $22 & 15; //@line 4371
   $30 = _bitshift64Shl($28 | 0, $29 | 0, 60) | 0; //@line 4373
   $31 = tempRet0; //@line 4374
   $33 = _bitshift64Lshr($27 | 0, $32 | 0, 4) | 0; //@line 4375
   $36 = tempRet0 | $31; //@line 4378
   $37 = _bitshift64Lshr($28 | 0, $29 | 0, 4) | 0; //@line 4379
   $38 = tempRet0; //@line 4380
   $40 = 208 + (($27 & 15) << 3) | 0; //@line 4382
   $46 = _bitshift64Shl(HEAP32[$40 >> 2] | 0, HEAP32[$40 + 4 >> 2] | 0, 48) | 0; //@line 4388
   $51 = $0 + 200 + ($25 << 3) | 0; //@line 4393
   $60 = $0 + 72 + ($25 << 3) | 0; //@line 4402
   $69 = HEAP32[$60 >> 2] ^ ($33 | $30); //@line 4410
   $70 = $46 ^ $37 ^ HEAP32[$51 >> 2]; //@line 4410
   $71 = tempRet0 ^ $38 ^ HEAP32[$51 + 4 >> 2]; //@line 4410
   $74 = HEAP32[$60 + 4 >> 2] ^ $36; //@line 4410
  }
  $72 = _bitshift64Shl($70 | 0, $71 | 0, 60) | 0; //@line 4413
  $73 = tempRet0; //@line 4414
  $75 = _bitshift64Lshr($69 | 0, $74 | 0, 4) | 0; //@line 4415
  $78 = tempRet0 | $73; //@line 4418
  $79 = _bitshift64Lshr($70 | 0, $71 | 0, 4) | 0; //@line 4419
  $80 = tempRet0; //@line 4420
  $82 = 208 + (($69 & 15) << 3) | 0; //@line 4422
  $88 = _bitshift64Shl(HEAP32[$82 >> 2] | 0, HEAP32[$82 + 4 >> 2] | 0, 48) | 0; //@line 4428
  $92 = ($22 & 255) >>> 4 & 255; //@line 4432
  $94 = $0 + 200 + ($92 << 3) | 0; //@line 4434
  $100 = $88 ^ $79 ^ HEAP32[$94 >> 2]; //@line 4440
  $101 = tempRet0 ^ $80 ^ HEAP32[$94 + 4 >> 2]; //@line 4441
  $103 = $0 + 72 + ($92 << 3) | 0; //@line 4443
  $109 = HEAP32[$103 >> 2] ^ ($75 | $72); //@line 4449
  $110 = HEAP32[$103 + 4 >> 2] ^ $78; //@line 4450
  $111 = $$07475 + -1 | 0; //@line 4451
  if (($$07475 | 0) <= 0) {
   break;
  }
  $$07475 = $111; //@line 4458
  $22 = HEAP8[$1 + $111 >> 0] | 0; //@line 4458
  $27 = $109; //@line 4458
  $28 = $100; //@line 4458
  $29 = $101; //@line 4458
  $32 = $110; //@line 4458
 }
 $113 = _bitshift64Lshr($100 | 0, $101 | 0, 56) | 0; //@line 4460
 HEAP8[$2 >> 0] = $113; //@line 4463
 $116 = _bitshift64Lshr($100 | 0, $101 | 0, 48) | 0; //@line 4464
 HEAP8[$2 + 1 >> 0] = $116; //@line 4468
 $120 = _bitshift64Lshr($100 | 0, $101 | 0, 40) | 0; //@line 4469
 HEAP8[$2 + 2 >> 0] = $120; //@line 4473
 HEAP8[$2 + 3 >> 0] = $101; //@line 4476
 $126 = _bitshift64Lshr($100 | 0, $101 | 0, 24) | 0; //@line 4477
 HEAP8[$2 + 4 >> 0] = $126; //@line 4481
 $130 = _bitshift64Lshr($100 | 0, $101 | 0, 16) | 0; //@line 4482
 HEAP8[$2 + 5 >> 0] = $130; //@line 4486
 $134 = _bitshift64Lshr($100 | 0, $101 | 0, 8) | 0; //@line 4487
 HEAP8[$2 + 6 >> 0] = $134; //@line 4491
 HEAP8[$2 + 7 >> 0] = $100; //@line 4494
 $140 = _bitshift64Lshr($109 | 0, $110 | 0, 56) | 0; //@line 4495
 HEAP8[$2 + 8 >> 0] = $140; //@line 4499
 $144 = _bitshift64Lshr($109 | 0, $110 | 0, 48) | 0; //@line 4500
 HEAP8[$2 + 9 >> 0] = $144; //@line 4504
 $148 = _bitshift64Lshr($109 | 0, $110 | 0, 40) | 0; //@line 4505
 HEAP8[$2 + 10 >> 0] = $148; //@line 4509
 HEAP8[$2 + 11 >> 0] = $110; //@line 4512
 $154 = _bitshift64Lshr($109 | 0, $110 | 0, 24) | 0; //@line 4513
 HEAP8[$2 + 12 >> 0] = $154; //@line 4517
 $158 = _bitshift64Lshr($109 | 0, $110 | 0, 16) | 0; //@line 4518
 HEAP8[$2 + 13 >> 0] = $158; //@line 4522
 $162 = _bitshift64Lshr($109 | 0, $110 | 0, 8) | 0; //@line 4523
 HEAP8[$2 + 14 >> 0] = $162; //@line 4527
 HEAP8[$2 + 15 >> 0] = $109; //@line 4530
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_53($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $2 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $47 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29739
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29741
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29743
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29745
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29747
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29749
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29751
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29753
 HEAP32[$4 + 364 >> 2] = 2; //@line 29757
 if (HEAP8[$4 + 371 >> 0] | 0) {
  $21 = HEAP32[$2 >> 2] | 0; //@line 29762
  $24 = HEAP32[$4 + 972 >> 2] | 0; //@line 29765
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 29766
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 1036 | 0, $24); //@line 29767
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 369; //@line 29770
   $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 29771
   HEAP32[$25 >> 2] = $10; //@line 29772
   $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 29773
   HEAP32[$26 >> 2] = $4; //@line 29774
   $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 29775
   HEAP32[$27 >> 2] = $2; //@line 29776
   $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 29777
   HEAP32[$28 >> 2] = $12; //@line 29778
   $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 29779
   HEAP32[$29 >> 2] = $8; //@line 29780
   $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 29781
   HEAP32[$30 >> 2] = $14; //@line 29782
   $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 29783
   HEAP32[$31 >> 2] = $6; //@line 29784
   sp = STACKTOP; //@line 29785
   return;
  }
  ___async_unwind = 0; //@line 29788
  HEAP32[$ReallocAsyncCtx7 >> 2] = 369; //@line 29789
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 29790
  HEAP32[$25 >> 2] = $10; //@line 29791
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 29792
  HEAP32[$26 >> 2] = $4; //@line 29793
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 29794
  HEAP32[$27 >> 2] = $2; //@line 29795
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 29796
  HEAP32[$28 >> 2] = $12; //@line 29797
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 29798
  HEAP32[$29 >> 2] = $8; //@line 29799
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 29800
  HEAP32[$30 >> 2] = $14; //@line 29801
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 29802
  HEAP32[$31 >> 2] = $6; //@line 29803
  sp = STACKTOP; //@line 29804
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 29810
 $35 = $4 + 944 | 0; //@line 29811
 $36 = HEAP8[$35 >> 0] | 0; //@line 29812
 if (!($36 << 24 >> 24)) {
  HEAP8[$35 >> 0] = 1; //@line 29815
  $39 = 1; //@line 29816
 } else {
  $39 = $36; //@line 29818
 }
 HEAP8[$35 >> 0] = $39 | 32; //@line 29821
 HEAP8[$4 + 376 >> 0] = ($12 | 0) == 0 & (HEAP8[$4 + 944 >> 0] & 8) != 0 & 1; //@line 29830
 $47 = HEAP8[$4 + 378 >> 0] | 0; //@line 29832
 HEAP8[$4 + 379 >> 0] = $47; //@line 29834
 HEAP8[$8 >> 0] = $47; //@line 29835
 HEAP8[$14 + 1 >> 0] = HEAP8[$4 + 372 >> 0] | 0; //@line 29839
 HEAP32[$14 + 4 >> 2] = $6; //@line 29841
 $53 = HEAP32[$4 >> 2] | 0; //@line 29842
 $56 = HEAP32[(HEAP32[$53 >> 2] | 0) + 12 >> 2] | 0; //@line 29845
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 29846
 FUNCTION_TABLE_vii[$56 & 31]($53, $14); //@line 29847
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 372; //@line 29850
  $57 = $ReallocAsyncCtx + 4 | 0; //@line 29851
  HEAP32[$57 >> 2] = $4; //@line 29852
  $58 = $ReallocAsyncCtx + 8 | 0; //@line 29853
  HEAP32[$58 >> 2] = $6; //@line 29854
  $59 = $ReallocAsyncCtx + 12 | 0; //@line 29855
  HEAP32[$59 >> 2] = $2; //@line 29856
  $60 = $ReallocAsyncCtx + 16 | 0; //@line 29857
  HEAP32[$60 >> 2] = $8; //@line 29858
  sp = STACKTOP; //@line 29859
  return;
 }
 ___async_unwind = 0; //@line 29862
 HEAP32[$ReallocAsyncCtx >> 2] = 372; //@line 29863
 $57 = $ReallocAsyncCtx + 4 | 0; //@line 29864
 HEAP32[$57 >> 2] = $4; //@line 29865
 $58 = $ReallocAsyncCtx + 8 | 0; //@line 29866
 HEAP32[$58 >> 2] = $6; //@line 29867
 $59 = $ReallocAsyncCtx + 12 | 0; //@line 29868
 HEAP32[$59 >> 2] = $2; //@line 29869
 $60 = $ReallocAsyncCtx + 16 | 0; //@line 29870
 HEAP32[$60 >> 2] = $8; //@line 29871
 sp = STACKTOP; //@line 29872
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_50($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29292
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29294
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29296
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29298
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29300
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29302
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29304
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29306
 if ((HEAP32[$2 >> 2] | 0) != 2) {
  $17 = HEAP32[$6 >> 2] | 0; //@line 29310
  $19 = $4 + 976 | 0; //@line 29312
  $20 = HEAP32[$19 >> 2] | 0; //@line 29313
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 29314
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($17, $4 + 1056 | 0, $20); //@line 29315
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 370; //@line 29318
   $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 29319
   HEAP32[$21 >> 2] = $2; //@line 29320
   $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 29321
   HEAP32[$22 >> 2] = $19; //@line 29322
   $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 29323
   HEAP32[$23 >> 2] = $6; //@line 29324
   $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 29325
   HEAP32[$24 >> 2] = $4; //@line 29326
   $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 29327
   HEAP32[$25 >> 2] = $8; //@line 29328
   $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 29329
   HEAP32[$26 >> 2] = $10; //@line 29330
   $27 = $ReallocAsyncCtx6 + 28 | 0; //@line 29331
   HEAP32[$27 >> 2] = $12; //@line 29332
   $28 = $ReallocAsyncCtx6 + 32 | 0; //@line 29333
   HEAP32[$28 >> 2] = $14; //@line 29334
   sp = STACKTOP; //@line 29335
   return;
  }
  ___async_unwind = 0; //@line 29338
  HEAP32[$ReallocAsyncCtx6 >> 2] = 370; //@line 29339
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 29340
  HEAP32[$21 >> 2] = $2; //@line 29341
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 29342
  HEAP32[$22 >> 2] = $19; //@line 29343
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 29344
  HEAP32[$23 >> 2] = $6; //@line 29345
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 29346
  HEAP32[$24 >> 2] = $4; //@line 29347
  $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 29348
  HEAP32[$25 >> 2] = $8; //@line 29349
  $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 29350
  HEAP32[$26 >> 2] = $10; //@line 29351
  $27 = $ReallocAsyncCtx6 + 28 | 0; //@line 29352
  HEAP32[$27 >> 2] = $12; //@line 29353
  $28 = $ReallocAsyncCtx6 + 32 | 0; //@line 29354
  HEAP32[$28 >> 2] = $14; //@line 29355
  sp = STACKTOP; //@line 29356
  return;
 }
 $29 = HEAP32[$6 >> 2] | 0; //@line 29360
 $31 = HEAP32[$4 + 976 >> 2] | 0; //@line 29362
 $34 = (__ZN7LoRaPHY15get_ack_timeoutEv(HEAP32[$4 >> 2] | 0) | 0) + $31 | 0; //@line 29365
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 29366
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($29, $4 + 1076 | 0, $34); //@line 29367
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 371; //@line 29370
  $35 = $ReallocAsyncCtx5 + 4 | 0; //@line 29371
  HEAP32[$35 >> 2] = $4; //@line 29372
  $36 = $ReallocAsyncCtx5 + 8 | 0; //@line 29373
  HEAP32[$36 >> 2] = $8; //@line 29374
  $37 = $ReallocAsyncCtx5 + 12 | 0; //@line 29375
  HEAP32[$37 >> 2] = $10; //@line 29376
  $38 = $ReallocAsyncCtx5 + 16 | 0; //@line 29377
  HEAP32[$38 >> 2] = $12; //@line 29378
  $39 = $ReallocAsyncCtx5 + 20 | 0; //@line 29379
  HEAP32[$39 >> 2] = $14; //@line 29380
  $40 = $ReallocAsyncCtx5 + 24 | 0; //@line 29381
  HEAP32[$40 >> 2] = $6; //@line 29382
  sp = STACKTOP; //@line 29383
  return;
 }
 ___async_unwind = 0; //@line 29386
 HEAP32[$ReallocAsyncCtx5 >> 2] = 371; //@line 29387
 $35 = $ReallocAsyncCtx5 + 4 | 0; //@line 29388
 HEAP32[$35 >> 2] = $4; //@line 29389
 $36 = $ReallocAsyncCtx5 + 8 | 0; //@line 29390
 HEAP32[$36 >> 2] = $8; //@line 29391
 $37 = $ReallocAsyncCtx5 + 12 | 0; //@line 29392
 HEAP32[$37 >> 2] = $10; //@line 29393
 $38 = $ReallocAsyncCtx5 + 16 | 0; //@line 29394
 HEAP32[$38 >> 2] = $12; //@line 29395
 $39 = $ReallocAsyncCtx5 + 20 | 0; //@line 29396
 HEAP32[$39 >> 2] = $14; //@line 29397
 $40 = $ReallocAsyncCtx5 + 24 | 0; //@line 29398
 HEAP32[$40 >> 2] = $6; //@line 29399
 sp = STACKTOP; //@line 29400
 return;
}
function __ZN7LoRaMac21send_frame_on_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $18 = 0, $21 = 0, $24 = 0, $25 = 0, $33 = 0, $36 = 0, $39 = 0, $42 = 0, $45 = 0, $48 = 0, $54 = 0, $57 = 0, $6 = 0, $60 = 0, $64 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 16874
 STACKTOP = STACKTOP + 32 | 0; //@line 16875
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 16875
 $vararg_buffer1 = sp + 8 | 0; //@line 16876
 $vararg_buffer = sp; //@line 16877
 _printf(13258, $vararg_buffer) | 0; //@line 16878
 _printf(13636, $vararg_buffer1) | 0; //@line 16879
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 16880
 _putchar(10) | 0; //@line 16881
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 501; //@line 16884
  HEAP32[$AsyncCtx5 + 4 >> 2] = $vararg_buffer1; //@line 16886
  HEAP32[$AsyncCtx5 + 8 >> 2] = $vararg_buffer; //@line 16888
  HEAP8[$AsyncCtx5 + 12 >> 0] = $1; //@line 16890
  HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 16892
  sp = STACKTOP; //@line 16893
  STACKTOP = sp; //@line 16894
  return 0; //@line 16894
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 16896
 HEAP8[$vararg_buffer >> 0] = 0; //@line 16897
 HEAP8[$vararg_buffer1 >> 0] = $1; //@line 16898
 $6 = $0 + 1097 | 0; //@line 16899
 HEAP8[$vararg_buffer1 + 1 >> 0] = HEAP8[$6 >> 0] | 0; //@line 16902
 HEAP8[$vararg_buffer1 + 2 >> 0] = HEAP8[$0 + 1096 >> 0] | 0; //@line 16906
 HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[$0 + 1144 >> 2]; //@line 16910
 HEAP32[$vararg_buffer1 + 8 >> 2] = HEAP32[$0 + 1148 >> 2]; //@line 16914
 $18 = $0 + 636 | 0; //@line 16915
 HEAP16[$vararg_buffer1 + 12 >> 1] = HEAP16[$18 >> 1] | 0; //@line 16918
 $21 = HEAP32[$0 >> 2] | 0; //@line 16919
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 32 >> 2] | 0; //@line 16922
 $25 = $0 + 992 | 0; //@line 16923
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 16924
 FUNCTION_TABLE_iiiii[$24 & 3]($21, $vararg_buffer1, $vararg_buffer, $25) | 0; //@line 16925
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 502; //@line 16928
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16930
  HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 16932
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 16934
  HEAP32[$AsyncCtx + 16 >> 2] = $25; //@line 16936
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 16938
  HEAP32[$AsyncCtx + 24 >> 2] = $18; //@line 16940
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer1; //@line 16942
  sp = STACKTOP; //@line 16943
  STACKTOP = sp; //@line 16944
  return 0; //@line 16944
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16946
 $33 = $0 + 264 | 0; //@line 16947
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($33) | 0) + 4 >> 2] = 1; //@line 16950
 $36 = $0 + 288 | 0; //@line 16951
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 4 >> 2] = 1; //@line 16954
 $39 = HEAP8[$6 >> 0] | 0; //@line 16955
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 8 >> 0] = $39; //@line 16958
 $42 = HEAP8[$vararg_buffer >> 0] | 0; //@line 16959
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 9 >> 0] = $42; //@line 16962
 $45 = HEAP32[$25 >> 2] | 0; //@line 16963
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 12 >> 2] = $45; //@line 16966
 $48 = HEAP32[$25 >> 2] | 0; //@line 16967
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($33) | 0) + 8 >> 2] = $48; //@line 16970
 if (!(HEAP8[$0 + 372 >> 0] | 0)) {
  $54 = $0 + 897 | 0; //@line 16975
  HEAP8[$54 >> 0] = (HEAP8[$54 >> 0] | 0) + 1 << 24 >> 24; //@line 16978
 }
 $57 = HEAP32[$0 >> 2] | 0; //@line 16980
 $60 = HEAP16[$18 >> 1] & 255; //@line 16983
 $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16984
 __ZN7LoRaPHY11handle_sendEPhh($57, $0 + 381 | 0, $60); //@line 16985
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 503; //@line 16988
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 16990
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer; //@line 16992
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer1; //@line 16994
  sp = STACKTOP; //@line 16995
  STACKTOP = sp; //@line 16996
  return 0; //@line 16996
 } else {
  _emscripten_free_async_context($AsyncCtx9 | 0); //@line 16998
  $64 = $0 + 968 | 0; //@line 16999
  HEAP32[$64 >> 2] = HEAP32[$64 >> 2] | 1; //@line 17002
  STACKTOP = sp; //@line 17003
  return 0; //@line 17003
 }
 return 0; //@line 17005
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_51($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $36 = 0, $4 = 0, $44 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29409
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29411
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29413
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29415
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29417
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29419
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29421
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29423
 if (HEAP8[$4 + 371 >> 0] | 0) {
  $18 = HEAP32[$2 >> 2] | 0; //@line 29428
  $21 = HEAP32[$4 + 972 >> 2] | 0; //@line 29431
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 29432
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($18, $4 + 1036 | 0, $21); //@line 29433
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 369; //@line 29436
   $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 29437
   HEAP32[$22 >> 2] = $10; //@line 29438
   $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 29439
   HEAP32[$23 >> 2] = $4; //@line 29440
   $24 = $ReallocAsyncCtx7 + 12 | 0; //@line 29441
   HEAP32[$24 >> 2] = $2; //@line 29442
   $25 = $ReallocAsyncCtx7 + 16 | 0; //@line 29443
   HEAP32[$25 >> 2] = $12; //@line 29444
   $26 = $ReallocAsyncCtx7 + 20 | 0; //@line 29445
   HEAP32[$26 >> 2] = $8; //@line 29446
   $27 = $ReallocAsyncCtx7 + 24 | 0; //@line 29447
   HEAP32[$27 >> 2] = $14; //@line 29448
   $28 = $ReallocAsyncCtx7 + 28 | 0; //@line 29449
   HEAP32[$28 >> 2] = $6; //@line 29450
   sp = STACKTOP; //@line 29451
   return;
  }
  ___async_unwind = 0; //@line 29454
  HEAP32[$ReallocAsyncCtx7 >> 2] = 369; //@line 29455
  $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 29456
  HEAP32[$22 >> 2] = $10; //@line 29457
  $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 29458
  HEAP32[$23 >> 2] = $4; //@line 29459
  $24 = $ReallocAsyncCtx7 + 12 | 0; //@line 29460
  HEAP32[$24 >> 2] = $2; //@line 29461
  $25 = $ReallocAsyncCtx7 + 16 | 0; //@line 29462
  HEAP32[$25 >> 2] = $12; //@line 29463
  $26 = $ReallocAsyncCtx7 + 20 | 0; //@line 29464
  HEAP32[$26 >> 2] = $8; //@line 29465
  $27 = $ReallocAsyncCtx7 + 24 | 0; //@line 29466
  HEAP32[$27 >> 2] = $14; //@line 29467
  $28 = $ReallocAsyncCtx7 + 28 | 0; //@line 29468
  HEAP32[$28 >> 2] = $6; //@line 29469
  sp = STACKTOP; //@line 29470
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 29476
 $32 = $4 + 944 | 0; //@line 29477
 $33 = HEAP8[$32 >> 0] | 0; //@line 29478
 if (!($33 << 24 >> 24)) {
  HEAP8[$32 >> 0] = 1; //@line 29481
  $36 = 1; //@line 29482
 } else {
  $36 = $33; //@line 29484
 }
 HEAP8[$32 >> 0] = $36 | 32; //@line 29487
 HEAP8[$4 + 376 >> 0] = ($12 | 0) == 0 & (HEAP8[$4 + 944 >> 0] & 8) != 0 & 1; //@line 29496
 $44 = HEAP8[$4 + 378 >> 0] | 0; //@line 29498
 HEAP8[$4 + 379 >> 0] = $44; //@line 29500
 HEAP8[$8 >> 0] = $44; //@line 29501
 HEAP8[$14 + 1 >> 0] = HEAP8[$4 + 372 >> 0] | 0; //@line 29505
 HEAP32[$14 + 4 >> 2] = $6; //@line 29507
 $50 = HEAP32[$4 >> 2] | 0; //@line 29508
 $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 12 >> 2] | 0; //@line 29511
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 29512
 FUNCTION_TABLE_vii[$53 & 31]($50, $14); //@line 29513
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 372; //@line 29516
  $54 = $ReallocAsyncCtx + 4 | 0; //@line 29517
  HEAP32[$54 >> 2] = $4; //@line 29518
  $55 = $ReallocAsyncCtx + 8 | 0; //@line 29519
  HEAP32[$55 >> 2] = $6; //@line 29520
  $56 = $ReallocAsyncCtx + 12 | 0; //@line 29521
  HEAP32[$56 >> 2] = $2; //@line 29522
  $57 = $ReallocAsyncCtx + 16 | 0; //@line 29523
  HEAP32[$57 >> 2] = $8; //@line 29524
  sp = STACKTOP; //@line 29525
  return;
 }
 ___async_unwind = 0; //@line 29528
 HEAP32[$ReallocAsyncCtx >> 2] = 372; //@line 29529
 $54 = $ReallocAsyncCtx + 4 | 0; //@line 29530
 HEAP32[$54 >> 2] = $4; //@line 29531
 $55 = $ReallocAsyncCtx + 8 | 0; //@line 29532
 HEAP32[$55 >> 2] = $6; //@line 29533
 $56 = $ReallocAsyncCtx + 12 | 0; //@line 29534
 HEAP32[$56 >> 2] = $2; //@line 29535
 $57 = $ReallocAsyncCtx + 16 | 0; //@line 29536
 HEAP32[$57 >> 2] = $8; //@line 29537
 sp = STACKTOP; //@line 29538
 return;
}
function __ZN12radio_eventsD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 34470
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34472
 $4 = HEAP32[$2 + 92 >> 2] | 0; //@line 34474
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 34479
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 34480
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 80 | 0); //@line 34481
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 349; //@line 34484
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 34485
   HEAP32[$9 >> 2] = $2; //@line 34486
   sp = STACKTOP; //@line 34487
   return;
  }
  ___async_unwind = 0; //@line 34490
  HEAP32[$ReallocAsyncCtx2 >> 2] = 349; //@line 34491
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 34492
  HEAP32[$9 >> 2] = $2; //@line 34493
  sp = STACKTOP; //@line 34494
  return;
 }
 $11 = HEAP32[$2 + 76 >> 2] | 0; //@line 34498
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 34503
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 34504
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 64 | 0); //@line 34505
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 350; //@line 34508
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 34509
   HEAP32[$16 >> 2] = $2; //@line 34510
   sp = STACKTOP; //@line 34511
   return;
  }
  ___async_unwind = 0; //@line 34514
  HEAP32[$ReallocAsyncCtx3 >> 2] = 350; //@line 34515
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 34516
  HEAP32[$16 >> 2] = $2; //@line 34517
  sp = STACKTOP; //@line 34518
  return;
 }
 $18 = HEAP32[$2 + 60 >> 2] | 0; //@line 34522
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 34527
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 34528
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 48 | 0); //@line 34529
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 351; //@line 34532
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 34533
   HEAP32[$23 >> 2] = $2; //@line 34534
   sp = STACKTOP; //@line 34535
   return;
  }
  ___async_unwind = 0; //@line 34538
  HEAP32[$ReallocAsyncCtx4 >> 2] = 351; //@line 34539
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 34540
  HEAP32[$23 >> 2] = $2; //@line 34541
  sp = STACKTOP; //@line 34542
  return;
 }
 $25 = HEAP32[$2 + 44 >> 2] | 0; //@line 34546
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 34551
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 34552
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 32 | 0); //@line 34553
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 34556
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 34557
   HEAP32[$30 >> 2] = $2; //@line 34558
   sp = STACKTOP; //@line 34559
   return;
  }
  ___async_unwind = 0; //@line 34562
  HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 34563
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 34564
  HEAP32[$30 >> 2] = $2; //@line 34565
  sp = STACKTOP; //@line 34566
  return;
 }
 $32 = HEAP32[$2 + 28 >> 2] | 0; //@line 34570
 if ($32 | 0) {
  $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 34575
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 34576
  FUNCTION_TABLE_vi[$36 & 1023]($2 + 16 | 0); //@line 34577
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 353; //@line 34580
   $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 34581
   HEAP32[$37 >> 2] = $2; //@line 34582
   sp = STACKTOP; //@line 34583
   return;
  }
  ___async_unwind = 0; //@line 34586
  HEAP32[$ReallocAsyncCtx6 >> 2] = 353; //@line 34587
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 34588
  HEAP32[$37 >> 2] = $2; //@line 34589
  sp = STACKTOP; //@line 34590
  return;
 }
 $39 = HEAP32[$2 + 12 >> 2] | 0; //@line 34594
 if (!$39) {
  return;
 }
 $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 34600
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 34601
 FUNCTION_TABLE_vi[$42 & 1023]($2); //@line 34602
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 354; //@line 34605
  sp = STACKTOP; //@line 34606
  return;
 }
 ___async_unwind = 0; //@line 34609
 HEAP32[$ReallocAsyncCtx7 >> 2] = 354; //@line 34610
 sp = STACKTOP; //@line 34611
 return;
}
function _initialize__async_cb_483($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 35557
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35559
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35561
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35563
 $10 = HEAP32[(HEAP32[$0 + 16 >> 2] | 0) + 4 >> 2] | 0; //@line 35567
 if (($10 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 35571
  _mbed_assert_internal(14804, 14806, 47); //@line 35572
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 705; //@line 35575
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 35576
   HEAP32[$12 >> 2] = 1e6; //@line 35577
   $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 35578
   HEAP32[$13 >> 2] = $2; //@line 35579
   $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 35580
   HEAP32[$14 >> 2] = $6; //@line 35581
   $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 35582
   HEAP32[$15 >> 2] = $4; //@line 35583
   sp = STACKTOP; //@line 35584
   return;
  }
  ___async_unwind = 0; //@line 35587
  HEAP32[$ReallocAsyncCtx6 >> 2] = 705; //@line 35588
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 35589
  HEAP32[$12 >> 2] = 1e6; //@line 35590
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 35591
  HEAP32[$13 >> 2] = $2; //@line 35592
  $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 35593
  HEAP32[$14 >> 2] = $6; //@line 35594
  $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 35595
  HEAP32[$15 >> 2] = $4; //@line 35596
  sp = STACKTOP; //@line 35597
  return;
 } else {
  $17 = 7 << $10 + -4; //@line 35601
  $18 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 35602
  $19 = tempRet0; //@line 35603
  $20 = _i64Add(1e6, 0, -1, -1) | 0; //@line 35604
  $22 = _i64Add($20 | 0, tempRet0 | 0, $18 | 0, $19 | 0) | 0; //@line 35606
  $24 = ___udivdi3($22 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 35608
  $25 = tempRet0; //@line 35609
  $26 = HEAP32[$2 >> 2] | 0; //@line 35610
  HEAP32[$26 >> 2] = 0; //@line 35611
  HEAP32[$26 + 4 >> 2] = 0; //@line 35613
  $30 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 35616
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 35617
  $31 = FUNCTION_TABLE_i[$30 & 7]() | 0; //@line 35618
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 706; //@line 35621
   $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 35622
   HEAP32[$32 >> 2] = $2; //@line 35623
   $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 35624
   HEAP32[$33 >> 2] = 1e6; //@line 35625
   $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 35626
   HEAP32[$34 >> 2] = $10; //@line 35627
   $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 35628
   HEAP32[$35 >> 2] = $17; //@line 35629
   $36 = $ReallocAsyncCtx3 + 24 | 0; //@line 35630
   $37 = $36; //@line 35631
   $38 = $37; //@line 35632
   HEAP32[$38 >> 2] = $24; //@line 35633
   $39 = $37 + 4 | 0; //@line 35634
   $40 = $39; //@line 35635
   HEAP32[$40 >> 2] = $25; //@line 35636
   $41 = $ReallocAsyncCtx3 + 32 | 0; //@line 35637
   HEAP32[$41 >> 2] = $6; //@line 35638
   $42 = $ReallocAsyncCtx3 + 36 | 0; //@line 35639
   HEAP32[$42 >> 2] = $4; //@line 35640
   sp = STACKTOP; //@line 35641
   return;
  }
  HEAP32[___async_retval >> 2] = $31; //@line 35645
  ___async_unwind = 0; //@line 35646
  HEAP32[$ReallocAsyncCtx3 >> 2] = 706; //@line 35647
  $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 35648
  HEAP32[$32 >> 2] = $2; //@line 35649
  $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 35650
  HEAP32[$33 >> 2] = 1e6; //@line 35651
  $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 35652
  HEAP32[$34 >> 2] = $10; //@line 35653
  $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 35654
  HEAP32[$35 >> 2] = $17; //@line 35655
  $36 = $ReallocAsyncCtx3 + 24 | 0; //@line 35656
  $37 = $36; //@line 35657
  $38 = $37; //@line 35658
  HEAP32[$38 >> 2] = $24; //@line 35659
  $39 = $37 + 4 | 0; //@line 35660
  $40 = $39; //@line 35661
  HEAP32[$40 >> 2] = $25; //@line 35662
  $41 = $ReallocAsyncCtx3 + 32 | 0; //@line 35663
  HEAP32[$41 >> 2] = $6; //@line 35664
  $42 = $ReallocAsyncCtx3 + 36 | 0; //@line 35665
  HEAP32[$42 >> 2] = $4; //@line 35666
  sp = STACKTOP; //@line 35667
  return;
 }
}
function _mbedtls_cipher_cmac_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $53 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15142
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15144
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15146
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15148
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15150
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15152
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15154
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15156
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15158
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15160
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15162
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 15164
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15166
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 15169
  $53 = ___async_retval; //@line 15170
  HEAP32[$53 >> 2] = $$0; //@line 15171
  return;
 }
 $33 = $2 - $4 | 0; //@line 15174
 $25 = $6 + $4 | 0; //@line 15175
 $37 = $8 + 1 | 0; //@line 15176
 if ($37 >>> 0 >= $10 >>> 0) {
  if (!$33) {
   $$0 = 0; //@line 15181
   $53 = ___async_retval; //@line 15182
   HEAP32[$53 >> 2] = $$0; //@line 15183
   return;
  }
  _memcpy((HEAP32[$14 >> 2] | 0) + ($16 + 16) | 0, $25 | 0, $33 | 0) | 0; //@line 15188
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + $33; //@line 15191
  $$0 = 0; //@line 15192
  $53 = ___async_retval; //@line 15193
  HEAP32[$53 >> 2] = $$0; //@line 15194
  return;
 }
 $$09$i75 = 0; //@line 15197
 do {
  $27 = $16 + $$09$i75 | 0; //@line 15201
  HEAP8[$27 >> 0] = HEAP8[$27 >> 0] ^ HEAP8[$25 + $$09$i75 >> 0]; //@line 15204
  $$09$i75 = $$09$i75 + 1 | 0; //@line 15205
 } while (($$09$i75 | 0) != ($4 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 15213
 $31 = _mbedtls_cipher_update($18, $20, $4, $20, $22) | 0; //@line 15214
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 692; //@line 15217
  $32 = $ReallocAsyncCtx + 4 | 0; //@line 15218
  HEAP32[$32 >> 2] = $33; //@line 15219
  $34 = $ReallocAsyncCtx + 8 | 0; //@line 15220
  HEAP32[$34 >> 2] = $4; //@line 15221
  $35 = $ReallocAsyncCtx + 12 | 0; //@line 15222
  HEAP32[$35 >> 2] = $25; //@line 15223
  $36 = $ReallocAsyncCtx + 16 | 0; //@line 15224
  HEAP32[$36 >> 2] = $37; //@line 15225
  $38 = $ReallocAsyncCtx + 20 | 0; //@line 15226
  HEAP32[$38 >> 2] = $10; //@line 15227
  $39 = $ReallocAsyncCtx + 24 | 0; //@line 15228
  HEAP32[$39 >> 2] = $12; //@line 15229
  $40 = $ReallocAsyncCtx + 28 | 0; //@line 15230
  HEAP32[$40 >> 2] = $14; //@line 15231
  $41 = $ReallocAsyncCtx + 32 | 0; //@line 15232
  HEAP32[$41 >> 2] = $16; //@line 15233
  $42 = $ReallocAsyncCtx + 36 | 0; //@line 15234
  HEAP32[$42 >> 2] = $18; //@line 15235
  $43 = $ReallocAsyncCtx + 40 | 0; //@line 15236
  HEAP32[$43 >> 2] = $20; //@line 15237
  $44 = $ReallocAsyncCtx + 44 | 0; //@line 15238
  HEAP32[$44 >> 2] = $22; //@line 15239
  sp = STACKTOP; //@line 15240
  return;
 }
 HEAP32[___async_retval >> 2] = $31; //@line 15244
 ___async_unwind = 0; //@line 15245
 HEAP32[$ReallocAsyncCtx >> 2] = 692; //@line 15246
 $32 = $ReallocAsyncCtx + 4 | 0; //@line 15247
 HEAP32[$32 >> 2] = $33; //@line 15248
 $34 = $ReallocAsyncCtx + 8 | 0; //@line 15249
 HEAP32[$34 >> 2] = $4; //@line 15250
 $35 = $ReallocAsyncCtx + 12 | 0; //@line 15251
 HEAP32[$35 >> 2] = $25; //@line 15252
 $36 = $ReallocAsyncCtx + 16 | 0; //@line 15253
 HEAP32[$36 >> 2] = $37; //@line 15254
 $38 = $ReallocAsyncCtx + 20 | 0; //@line 15255
 HEAP32[$38 >> 2] = $10; //@line 15256
 $39 = $ReallocAsyncCtx + 24 | 0; //@line 15257
 HEAP32[$39 >> 2] = $12; //@line 15258
 $40 = $ReallocAsyncCtx + 28 | 0; //@line 15259
 HEAP32[$40 >> 2] = $14; //@line 15260
 $41 = $ReallocAsyncCtx + 32 | 0; //@line 15261
 HEAP32[$41 >> 2] = $16; //@line 15262
 $42 = $ReallocAsyncCtx + 36 | 0; //@line 15263
 HEAP32[$42 >> 2] = $18; //@line 15264
 $43 = $ReallocAsyncCtx + 40 | 0; //@line 15265
 HEAP32[$43 >> 2] = $20; //@line 15266
 $44 = $ReallocAsyncCtx + 44 | 0; //@line 15267
 HEAP32[$44 >> 2] = $22; //@line 15268
 sp = STACKTOP; //@line 15269
 return;
}
function _mbedtls_gcm_update($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$05966 = 0, $$06065 = 0, $$061 = 0, $$06264 = 0, $$163 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $30 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $5 = 0, $67 = 0, $68 = 0, $75 = 0, $83 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4543
 STACKTOP = STACKTOP + 32 | 0; //@line 4544
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4544
 $4 = sp + 8 | 0; //@line 4545
 $5 = sp; //@line 4546
 HEAP32[$5 >> 2] = 0; //@line 4547
 if ($3 >>> 0 > $2 >>> 0) {
  if (($3 - $2 | 0) >>> 0 < $1 >>> 0) {
   $$0 = -20; //@line 4555
   STACKTOP = sp; //@line 4556
   return $$0 | 0; //@line 4556
  }
 }
 $11 = $0 + 328 | 0; //@line 4559
 $12 = $11; //@line 4560
 $14 = HEAP32[$12 >> 2] | 0; //@line 4562
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 4565
 $18 = _i64Add($14 | 0, $17 | 0, $1 | 0, 0) | 0; //@line 4566
 $19 = tempRet0; //@line 4567
 if ($19 >>> 0 < $17 >>> 0 | ($19 | 0) == ($17 | 0) & $18 >>> 0 < $14 >>> 0 | ($19 >>> 0 > 15 | ($19 | 0) == 15 & $18 >>> 0 > 4294967264)) {
  $$0 = -20; //@line 4580
  STACKTOP = sp; //@line 4581
  return $$0 | 0; //@line 4581
 }
 $30 = $11; //@line 4583
 HEAP32[$30 >> 2] = $18; //@line 4585
 HEAP32[$30 + 4 >> 2] = $19; //@line 4588
 if (!$1) {
  $$0 = 0; //@line 4591
  STACKTOP = sp; //@line 4592
  return $$0 | 0; //@line 4592
 }
 $35 = $0 + 360 | 0; //@line 4594
 $36 = $0 + 376 | 0; //@line 4595
 $37 = $0 + 392 | 0; //@line 4596
 $$05966 = $3; //@line 4597
 $$06065 = $2; //@line 4597
 $$06264 = $1; //@line 4597
 while (1) {
  $39 = $$06264 >>> 0 < 16 ? $$06264 : 16; //@line 4600
  $$061 = 16; //@line 4601
  do {
   if ($$061 >>> 0 <= 12) {
    break;
   }
   $$061 = $$061 + -1 | 0; //@line 4607
   $42 = $0 + 360 + $$061 | 0; //@line 4608
   $44 = (HEAP8[$42 >> 0] | 0) + 1 << 24 >> 24; //@line 4610
   HEAP8[$42 >> 0] = $44; //@line 4611
  } while (!($44 << 24 >> 24));
  $AsyncCtx = _emscripten_alloc_async_context(68, sp) | 0; //@line 4619
  $46 = _mbedtls_cipher_update($0, $35, 16, $4, $5) | 0; //@line 4620
  if (___async) {
   label = 10; //@line 4623
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4626
  if ($46 | 0) {
   $$0 = $46; //@line 4629
   label = 19; //@line 4630
   break;
  }
  if ($39 | 0) {
   $$163 = 0; //@line 4635
   do {
    $67 = $0 + 376 + $$163 | 0; //@line 4639
    $68 = $$06065 + $$163 | 0; //@line 4640
    if (!(HEAP32[$37 >> 2] | 0)) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 4645
    }
    $75 = HEAP8[$68 >> 0] ^ HEAP8[$4 + $$163 >> 0]; //@line 4650
    HEAP8[$$05966 + $$163 >> 0] = $75; //@line 4652
    if ((HEAP32[$37 >> 2] | 0) == 1) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 4658
    }
    $$163 = $$163 + 1 | 0; //@line 4660
   } while ($$163 >>> 0 < $39 >>> 0);
  }
  _gcm_mult($0, $36, $36); //@line 4669
  $83 = $$06264 - $39 | 0; //@line 4670
  if (!$83) {
   $$0 = 0; //@line 4675
   label = 19; //@line 4676
   break;
  } else {
   $$05966 = $$05966 + $39 | 0; //@line 4679
   $$06065 = $$06065 + $39 | 0; //@line 4679
   $$06264 = $83; //@line 4679
  }
 }
 if ((label | 0) == 10) {
  HEAP32[$AsyncCtx >> 2] = 699; //@line 4683
  HEAP32[$AsyncCtx + 4 >> 2] = $39; //@line 4685
  HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 4687
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 4689
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 4691
  HEAP32[$AsyncCtx + 20 >> 2] = $36; //@line 4693
  HEAP32[$AsyncCtx + 24 >> 2] = $$06264; //@line 4695
  HEAP32[$AsyncCtx + 28 >> 2] = $$06065; //@line 4697
  HEAP32[$AsyncCtx + 32 >> 2] = $$05966; //@line 4699
  HEAP32[$AsyncCtx + 36 >> 2] = $37; //@line 4701
  HEAP32[$AsyncCtx + 40 >> 2] = $4; //@line 4703
  HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 4705
  HEAP32[$AsyncCtx + 48 >> 2] = $2; //@line 4707
  HEAP32[$AsyncCtx + 52 >> 2] = $1; //@line 4709
  HEAP32[$AsyncCtx + 56 >> 2] = $0; //@line 4711
  HEAP32[$AsyncCtx + 60 >> 2] = $35; //@line 4713
  HEAP32[$AsyncCtx + 64 >> 2] = $5; //@line 4715
  sp = STACKTOP; //@line 4716
  STACKTOP = sp; //@line 4717
  return 0; //@line 4717
 } else if ((label | 0) == 19) {
  STACKTOP = sp; //@line 4720
  return $$0 | 0; //@line 4720
 }
 return 0; //@line 4722
}
function __Z11compute_micPKhtS0_jhjPj($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $22 = 0, $24 = 0, $26 = 0, $32 = 0, $37 = 0, $42 = 0, $45 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22199
 HEAP8[13884] = $4; //@line 22200
 HEAP8[13885] = $3; //@line 22202
 HEAP8[13886] = $3 >>> 8; //@line 22205
 HEAP8[13887] = $3 >>> 16; //@line 22208
 HEAP8[13888] = $3 >>> 24; //@line 22211
 HEAP8[13889] = $5; //@line 22213
 HEAP8[13890] = $5 >>> 8; //@line 22216
 HEAP8[13891] = $5 >>> 16; //@line 22219
 HEAP8[13892] = $5 >>> 24; //@line 22222
 $22 = $1 & 255; //@line 22224
 HEAP8[13894] = $1; //@line 22226
 _mbedtls_cipher_init(22892); //@line 22227
 $24 = _mbedtls_cipher_info_from_type(2) | 0; //@line 22228
 if (!$24) {
  $$0 = -24960; //@line 22231
 } else {
  $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 22233
  $26 = _mbedtls_cipher_setup(22892, $24) | 0; //@line 22234
  if (___async) {
   HEAP32[$AsyncCtx15 >> 2] = 600; //@line 22237
   HEAP32[$AsyncCtx15 + 4 >> 2] = $6; //@line 22239
   HEAP32[$AsyncCtx15 + 8 >> 2] = $2; //@line 22241
   HEAP32[$AsyncCtx15 + 12 >> 2] = $0; //@line 22243
   HEAP32[$AsyncCtx15 + 16 >> 2] = $22; //@line 22245
   sp = STACKTOP; //@line 22246
   return 0; //@line 22247
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 22249
  if (!$26) {
   $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 22252
   $32 = _mbedtls_cipher_cmac_starts(22892, $2, 128) | 0; //@line 22253
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 601; //@line 22256
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 22258
    HEAP32[$AsyncCtx11 + 8 >> 2] = $22; //@line 22260
    HEAP32[$AsyncCtx11 + 12 >> 2] = $6; //@line 22262
    sp = STACKTOP; //@line 22263
    return 0; //@line 22264
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 22266
   if (!$32) {
    $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 22269
    $37 = _mbedtls_cipher_cmac_update(22892, 13879, 16) | 0; //@line 22270
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 602; //@line 22273
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 22275
     HEAP32[$AsyncCtx3 + 8 >> 2] = $22; //@line 22277
     HEAP32[$AsyncCtx3 + 12 >> 2] = $6; //@line 22279
     sp = STACKTOP; //@line 22280
     return 0; //@line 22281
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 22283
    if (!$37) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 22286
     $42 = _mbedtls_cipher_cmac_update(22892, $0, $22) | 0; //@line 22287
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 603; //@line 22290
      HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 22292
      sp = STACKTOP; //@line 22293
      return 0; //@line 22294
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 22296
     if (!$42) {
      $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22299
      $45 = _mbedtls_cipher_cmac_finish(22892, 24200) | 0; //@line 22300
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 604; //@line 22303
       HEAP32[$AsyncCtx7 + 4 >> 2] = $6; //@line 22305
       sp = STACKTOP; //@line 22306
       return 0; //@line 22307
      }
      _emscripten_free_async_context($AsyncCtx7 | 0); //@line 22309
      if (!$45) {
       HEAP32[$6 >> 2] = (HEAPU8[24202] | 0) << 16 | (HEAPU8[24203] | 0) << 24 | (HEAPU8[24201] | 0) << 8 | (HEAPU8[24200] | 0); //@line 22326
       $$0 = 0; //@line 22327
      } else {
       $$0 = $45; //@line 22329
      }
     } else {
      $$0 = $42; //@line 22332
     }
    } else {
     $$0 = $37; //@line 22335
    }
   } else {
    $$0 = $32; //@line 22338
   }
  } else {
   $$0 = $26; //@line 22341
  }
 }
 $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22344
 _mbedtls_cipher_free(22892); //@line 22345
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 605; //@line 22348
  HEAP32[$AsyncCtx19 + 4 >> 2] = $$0; //@line 22350
  sp = STACKTOP; //@line 22351
  return 0; //@line 22352
 } else {
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 22354
  return $$0 | 0; //@line 22355
 }
 return 0; //@line 22357
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_39($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 28433
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28435
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28437
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28439
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28441
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28443
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28445
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28447
 $17 = HEAP32[HEAP32[$0 + 32 >> 2] >> 2] | 0; //@line 28450
 if (!$17) {
  $27 = HEAP32[$2 >> 2] | 0; //@line 28453
  $29 = $12 + 12 | 0; //@line 28455
  HEAP32[$12 >> 2] = 531; //@line 28456
  HEAP32[$12 + 4 >> 2] = 0; //@line 28458
  HEAP32[$12 + 8 >> 2] = $4; //@line 28460
  HEAP32[$29 >> 2] = 848; //@line 28461
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 28462
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($27, $4 + 1016 | 0, $12); //@line 28463
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 532; //@line 28466
   $30 = $ReallocAsyncCtx9 + 4 | 0; //@line 28467
   HEAP32[$30 >> 2] = $2; //@line 28468
   $31 = $ReallocAsyncCtx9 + 8 | 0; //@line 28469
   HEAP32[$31 >> 2] = $4; //@line 28470
   $32 = $ReallocAsyncCtx9 + 12 | 0; //@line 28471
   HEAP32[$32 >> 2] = $6; //@line 28472
   $33 = $ReallocAsyncCtx9 + 16 | 0; //@line 28473
   HEAP32[$33 >> 2] = $8; //@line 28474
   $34 = $ReallocAsyncCtx9 + 20 | 0; //@line 28475
   HEAP32[$34 >> 2] = $10; //@line 28476
   $35 = $ReallocAsyncCtx9 + 24 | 0; //@line 28477
   HEAP32[$35 >> 2] = $12; //@line 28478
   $36 = $ReallocAsyncCtx9 + 28 | 0; //@line 28479
   HEAP32[$36 >> 2] = $29; //@line 28480
   sp = STACKTOP; //@line 28481
   return;
  }
  ___async_unwind = 0; //@line 28484
  HEAP32[$ReallocAsyncCtx9 >> 2] = 532; //@line 28485
  $30 = $ReallocAsyncCtx9 + 4 | 0; //@line 28486
  HEAP32[$30 >> 2] = $2; //@line 28487
  $31 = $ReallocAsyncCtx9 + 8 | 0; //@line 28488
  HEAP32[$31 >> 2] = $4; //@line 28489
  $32 = $ReallocAsyncCtx9 + 12 | 0; //@line 28490
  HEAP32[$32 >> 2] = $6; //@line 28491
  $33 = $ReallocAsyncCtx9 + 16 | 0; //@line 28492
  HEAP32[$33 >> 2] = $8; //@line 28493
  $34 = $ReallocAsyncCtx9 + 20 | 0; //@line 28494
  HEAP32[$34 >> 2] = $10; //@line 28495
  $35 = $ReallocAsyncCtx9 + 24 | 0; //@line 28496
  HEAP32[$35 >> 2] = $12; //@line 28497
  $36 = $ReallocAsyncCtx9 + 28 | 0; //@line 28498
  HEAP32[$36 >> 2] = $29; //@line 28499
  sp = STACKTOP; //@line 28500
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 28504
  $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 28505
  FUNCTION_TABLE_vi[$20 & 1023]($14); //@line 28506
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 530; //@line 28509
   $21 = $ReallocAsyncCtx + 4 | 0; //@line 28510
   HEAP32[$21 >> 2] = $2; //@line 28511
   $22 = $ReallocAsyncCtx + 8 | 0; //@line 28512
   HEAP32[$22 >> 2] = $4; //@line 28513
   $23 = $ReallocAsyncCtx + 12 | 0; //@line 28514
   HEAP32[$23 >> 2] = $10; //@line 28515
   $24 = $ReallocAsyncCtx + 16 | 0; //@line 28516
   HEAP32[$24 >> 2] = $12; //@line 28517
   $25 = $ReallocAsyncCtx + 20 | 0; //@line 28518
   HEAP32[$25 >> 2] = $6; //@line 28519
   $26 = $ReallocAsyncCtx + 24 | 0; //@line 28520
   HEAP32[$26 >> 2] = $8; //@line 28521
   sp = STACKTOP; //@line 28522
   return;
  }
  ___async_unwind = 0; //@line 28525
  HEAP32[$ReallocAsyncCtx >> 2] = 530; //@line 28526
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 28527
  HEAP32[$21 >> 2] = $2; //@line 28528
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 28529
  HEAP32[$22 >> 2] = $4; //@line 28530
  $23 = $ReallocAsyncCtx + 12 | 0; //@line 28531
  HEAP32[$23 >> 2] = $10; //@line 28532
  $24 = $ReallocAsyncCtx + 16 | 0; //@line 28533
  HEAP32[$24 >> 2] = $12; //@line 28534
  $25 = $ReallocAsyncCtx + 20 | 0; //@line 28535
  HEAP32[$25 >> 2] = $6; //@line 28536
  $26 = $ReallocAsyncCtx + 24 | 0; //@line 28537
  HEAP32[$26 >> 2] = $8; //@line 28538
  sp = STACKTOP; //@line 28539
  return;
 }
}
function _mbedtls_aes_setkey_dec($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$02$i$i = 0, $$031$i$i = 0, $$043$lcssa = 0, $$04353 = 0, $$04555$in = 0, $$051 = 0, $$054 = 0, $$pn$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $128 = 0, $13 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $64 = 0, $8 = 0, $96 = 0, sp = 0, $$04353$looptemp = 0;
 sp = STACKTOP; //@line 14
 STACKTOP = STACKTOP + 288 | 0; //@line 15
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 15
 $3 = sp; //@line 16
 _memset($3 | 0, 0, 280) | 0; //@line 17
 $4 = $0 + 8 | 0; //@line 18
 HEAP32[$0 + 4 >> 2] = $4; //@line 20
 $6 = _mbedtls_aes_setkey_enc($3, $1, $2) | 0; //@line 21
 if (!$6) {
  $8 = HEAP32[$3 >> 2] | 0; //@line 24
  HEAP32[$0 >> 2] = $8; //@line 25
  $10 = HEAP32[$3 + 4 >> 2] | 0; //@line 27
  $11 = $8 << 2; //@line 28
  $12 = $10 + ($11 << 2) | 0; //@line 29
  $13 = $12 + 4 | 0; //@line 30
  HEAP32[$4 >> 2] = HEAP32[$12 >> 2]; //@line 33
  $16 = $13 + 4 | 0; //@line 34
  HEAP32[$0 + 12 >> 2] = HEAP32[$13 >> 2]; //@line 37
  $19 = $16 + 4 | 0; //@line 38
  HEAP32[$0 + 16 >> 2] = HEAP32[$16 >> 2]; //@line 41
  $22 = $19 + 4 | 0; //@line 42
  $24 = $0 + 24 | 0; //@line 44
  HEAP32[$0 + 20 >> 2] = HEAP32[$19 >> 2]; //@line 45
  $$051 = $22 + -32 | 0; //@line 46
  if (($8 | 0) > 1) {
   $26 = ~$8; //@line 49
   $31 = $11 + -4 - ($8 + (($26 | 0) > -3 ? $26 : -3) << 2) | 0; //@line 55
   $$04353 = $24; //@line 56
   $$04555$in = $8; //@line 56
   $$054 = $$051; //@line 56
   while (1) {
    $$04353$looptemp = $$04353;
    $$04353 = $$04353 + 16 | 0; //@line 59
    $32 = HEAP32[$$054 >> 2] | 0; //@line 60
    HEAP32[$$04353$looptemp >> 2] = HEAP32[2324 + ((HEAPU8[14148 + ($32 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[14148 + ($32 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[14148 + ($32 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[14148 + ($32 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 91
    $64 = HEAP32[$$054 + 4 >> 2] | 0; //@line 93
    HEAP32[$$04353$looptemp + 4 >> 2] = HEAP32[2324 + ((HEAPU8[14148 + ($64 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[14148 + ($64 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[14148 + ($64 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[14148 + ($64 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 124
    $96 = HEAP32[$$054 + 8 >> 2] | 0; //@line 126
    HEAP32[$$04353$looptemp + 8 >> 2] = HEAP32[2324 + ((HEAPU8[14148 + ($96 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[14148 + ($96 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[14148 + ($96 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[14148 + ($96 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 157
    $128 = HEAP32[$$054 + 12 >> 2] | 0; //@line 159
    HEAP32[$$04353$looptemp + 12 >> 2] = HEAP32[2324 + ((HEAPU8[14148 + ($128 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[14148 + ($128 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[14148 + ($128 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[14148 + ($128 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 189
    $$054 = $$054 + -16 | 0; //@line 190
    if (($$04555$in | 0) <= 2) {
     break;
    } else {
     $$04555$in = $$04555$in + -1 | 0; //@line 193
    }
   }
   $$0$lcssa = $$054; //@line 199
   $$043$lcssa = $$04353; //@line 199
   $$pn$lcssa = $10 + ($31 << 2) | 0; //@line 199
  } else {
   $$0$lcssa = $$051; //@line 201
   $$043$lcssa = $24; //@line 201
   $$pn$lcssa = $22; //@line 201
  }
  HEAP32[$$043$lcssa >> 2] = HEAP32[$$0$lcssa >> 2]; //@line 206
  HEAP32[$$043$lcssa + 4 >> 2] = HEAP32[$$pn$lcssa + -28 >> 2]; //@line 210
  HEAP32[$$043$lcssa + 8 >> 2] = HEAP32[$$pn$lcssa + -24 >> 2]; //@line 214
  HEAP32[$$043$lcssa + 12 >> 2] = HEAP32[$$pn$lcssa + -20 >> 2]; //@line 216
  $$02$i$i = $3; //@line 217
  $$031$i$i = 280; //@line 217
 } else {
  $$02$i$i = $3; //@line 219
  $$031$i$i = 280; //@line 219
 }
 while (1) {
  $$031$i$i = $$031$i$i + -1 | 0; //@line 222
  HEAP8[$$02$i$i >> 0] = 0; //@line 224
  if (!$$031$i$i) {
   break;
  } else {
   $$02$i$i = $$02$i$i + 1 | 0; //@line 229
  }
 }
 STACKTOP = sp; //@line 232
 return $6 | 0; //@line 232
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $16 = 0, $17 = 0, $30 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 14722
 STACKTOP = STACKTOP + 32 | 0; //@line 14723
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 14723
 $$byval_copy = sp + 24 | 0; //@line 14724
 $vararg_buffer3 = sp + 16 | 0; //@line 14725
 $vararg_buffer1 = sp + 8 | 0; //@line 14726
 _printf(13258, sp) | 0; //@line 14728
 _printf(13524, $vararg_buffer1) | 0; //@line 14729
 $AsyncCtx9 = _emscripten_alloc_async_context(28, sp) | 0; //@line 14730
 _putchar(10) | 0; //@line 14731
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 456; //@line 14734
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 14736
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer1; //@line 14738
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer3; //@line 14740
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer3; //@line 14742
  HEAP32[$AsyncCtx9 + 20 >> 2] = $$byval_copy; //@line 14744
  HEAP32[$AsyncCtx9 + 24 >> 2] = $$byval_copy; //@line 14746
  sp = STACKTOP; //@line 14747
  STACKTOP = sp; //@line 14748
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 14750
 do {
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   _printf(13258, $vararg_buffer3) | 0; //@line 14756
   _printf(13285, $$byval_copy) | 0; //@line 14757
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14758
   _putchar(10) | 0; //@line 14759
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 458; //@line 14762
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14764
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 14766
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 14768
    sp = STACKTOP; //@line 14769
    STACKTOP = sp; //@line 14770
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14772
   $16 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14774
   HEAP32[$vararg_buffer1 >> 2] = 366; //@line 14775
   HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 14777
   $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14778
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 14779
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 14779
   $17 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($16, $0, $$byval_copy) | 0; //@line 14780
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 459; //@line 14783
    HEAP32[$AsyncCtx16 + 4 >> 2] = $vararg_buffer1; //@line 14785
    HEAP32[$AsyncCtx16 + 8 >> 2] = $0; //@line 14787
    sp = STACKTOP; //@line 14788
    STACKTOP = sp; //@line 14789
    return;
   }
   _emscripten_free_async_context($AsyncCtx16 | 0); //@line 14791
   do {
    if (!$17) {
     $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14795
     _mbed_assert_internal(13142, 13151, 217); //@line 14796
     if (___async) {
      HEAP32[$AsyncCtx20 >> 2] = 460; //@line 14799
      HEAP32[$AsyncCtx20 + 4 >> 2] = $vararg_buffer1; //@line 14801
      HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 14803
      sp = STACKTOP; //@line 14804
      STACKTOP = sp; //@line 14805
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx20 | 0); //@line 14807
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 14813
  } else {
   $10 = HEAP32[$0 >> 2] | 0; //@line 14815
   $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14816
   __ZN7LoRaPHY18put_radio_to_sleepEv($10); //@line 14817
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 457; //@line 14820
    HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 14822
    sp = STACKTOP; //@line 14823
    STACKTOP = sp; //@line 14824
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 14826
    break;
   }
  }
 } while (0);
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 14834
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 14838
 $30 = $0 + 944 | 0; //@line 14839
 HEAP8[$30 >> 0] = HEAP8[$30 >> 0] | 32; //@line 14842
 STACKTOP = sp; //@line 14843
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_171($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2576
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 2579
 $4 = HEAP8[$0 + 5 >> 0] & 1; //@line 2582
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 2584
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 2586
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 2588
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 2590
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 2592
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 2594
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 2596
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 2598
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 2600
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 2602
 $26 = HEAP8[$0 + 48 >> 0] & 1; //@line 2605
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 2607
 L2 : do {
  if (!(HEAP8[$8 >> 0] | 0)) {
   do {
    if (!(HEAP8[$24 >> 0] | 0)) {
     $$182$off0 = $4; //@line 2616
     $$186$off0 = $2; //@line 2616
    } else {
     if (!(HEAP8[$22 >> 0] | 0)) {
      if (!(HEAP32[$10 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $2; //@line 2625
       $$283$off0 = 1; //@line 2625
       label = 13; //@line 2626
       break L2;
      } else {
       $$182$off0 = 1; //@line 2629
       $$186$off0 = $2; //@line 2629
       break;
      }
     }
     if ((HEAP32[$18 >> 2] | 0) == 1) {
      label = 18; //@line 2636
      break L2;
     }
     if (!(HEAP32[$10 >> 2] & 2)) {
      label = 18; //@line 2643
      break L2;
     } else {
      $$182$off0 = 1; //@line 2646
      $$186$off0 = 1; //@line 2646
     }
    }
   } while (0);
   $30 = $6 + 8 | 0; //@line 2650
   if ($30 >>> 0 < $28 >>> 0) {
    HEAP8[$22 >> 0] = 0; //@line 2653
    HEAP8[$24 >> 0] = 0; //@line 2654
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 2655
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $16, $12, $12, 1, $26); //@line 2656
    if (!___async) {
     ___async_unwind = 0; //@line 2659
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 807; //@line 2661
    HEAP8[$ReallocAsyncCtx5 + 4 >> 0] = $$186$off0 & 1; //@line 2664
    HEAP8[$ReallocAsyncCtx5 + 5 >> 0] = $$182$off0 & 1; //@line 2667
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $30; //@line 2669
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $8; //@line 2671
    HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 2673
    HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $12; //@line 2675
    HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 2677
    HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 2679
    HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 2681
    HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 2683
    HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $22; //@line 2685
    HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $24; //@line 2687
    HEAP8[$ReallocAsyncCtx5 + 48 >> 0] = $26 & 1; //@line 2690
    HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $28; //@line 2692
    sp = STACKTOP; //@line 2693
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 2696
    $$283$off0 = $$182$off0; //@line 2696
    label = 13; //@line 2697
   }
  } else {
   $$085$off0$reg2mem$0 = $2; //@line 2700
   $$283$off0 = $4; //@line 2700
   label = 13; //@line 2701
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$14 >> 2] = $12; //@line 2707
    $59 = $16 + 40 | 0; //@line 2708
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 2711
    if ((HEAP32[$16 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$18 >> 2] | 0) == 2) {
      HEAP8[$8 >> 0] = 1; //@line 2719
      if ($$283$off0) {
       label = 18; //@line 2721
       break;
      } else {
       $67 = 4; //@line 2724
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 2731
   } else {
    $67 = 4; //@line 2733
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 2738
 }
 HEAP32[$20 >> 2] = $67; //@line 2740
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_207($0) {
 $0 = $0 | 0;
 var $$pre12 = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 6774
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6776
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6778
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6780
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6782
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6784
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6786
 $$pre12 = HEAP32[$2 >> 2] | 0; //@line 6787
 if ($$pre12 | 0) {
  $15 = HEAP32[$$pre12 + 4 >> 2] | 0; //@line 6791
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 6792
  FUNCTION_TABLE_vii[$15 & 31]($6, $8); //@line 6793
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 323; //@line 6796
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 6797
   HEAP32[$16 >> 2] = $2; //@line 6798
   $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 6799
   HEAP32[$17 >> 2] = $4; //@line 6800
   $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 6801
   HEAP32[$18 >> 2] = $10; //@line 6802
   $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 6803
   HEAP32[$19 >> 2] = $12; //@line 6804
   sp = STACKTOP; //@line 6805
   return;
  }
  ___async_unwind = 0; //@line 6808
  HEAP32[$ReallocAsyncCtx4 >> 2] = 323; //@line 6809
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 6810
  HEAP32[$16 >> 2] = $2; //@line 6811
  $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 6812
  HEAP32[$17 >> 2] = $4; //@line 6813
  $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 6814
  HEAP32[$18 >> 2] = $10; //@line 6815
  $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 6816
  HEAP32[$19 >> 2] = $12; //@line 6817
  sp = STACKTOP; //@line 6818
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 6821
 $20 = $10 + 32 | 0; //@line 6822
 $21 = $10 + 44 | 0; //@line 6823
 $22 = HEAP32[$21 >> 2] | 0; //@line 6824
 if (!$22) {
  return;
 }
 $24 = $12 + 1912 | 0; //@line 6829
 if (($24 | 0) == ($20 | 0)) {
  return;
 }
 $26 = $12 + 1924 | 0; //@line 6834
 $27 = HEAP32[$26 >> 2] | 0; //@line 6835
 if (!$27) {
  $36 = HEAP32[$22 + 4 >> 2] | 0; //@line 6839
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 6840
  FUNCTION_TABLE_vii[$36 & 31]($24, $20); //@line 6841
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 325; //@line 6844
   $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 6845
   HEAP32[$37 >> 2] = $21; //@line 6846
   $38 = $ReallocAsyncCtx6 + 8 | 0; //@line 6847
   HEAP32[$38 >> 2] = $26; //@line 6848
   sp = STACKTOP; //@line 6849
   return;
  }
  ___async_unwind = 0; //@line 6852
  HEAP32[$ReallocAsyncCtx6 >> 2] = 325; //@line 6853
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 6854
  HEAP32[$37 >> 2] = $21; //@line 6855
  $38 = $ReallocAsyncCtx6 + 8 | 0; //@line 6856
  HEAP32[$38 >> 2] = $26; //@line 6857
  sp = STACKTOP; //@line 6858
  return;
 } else {
  $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 6862
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 6863
  FUNCTION_TABLE_vi[$30 & 1023]($24); //@line 6864
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 324; //@line 6867
   $31 = $ReallocAsyncCtx5 + 4 | 0; //@line 6868
   HEAP32[$31 >> 2] = $21; //@line 6869
   $32 = $ReallocAsyncCtx5 + 8 | 0; //@line 6870
   HEAP32[$32 >> 2] = $26; //@line 6871
   $33 = $ReallocAsyncCtx5 + 12 | 0; //@line 6872
   HEAP32[$33 >> 2] = $24; //@line 6873
   $34 = $ReallocAsyncCtx5 + 16 | 0; //@line 6874
   HEAP32[$34 >> 2] = $20; //@line 6875
   sp = STACKTOP; //@line 6876
   return;
  }
  ___async_unwind = 0; //@line 6879
  HEAP32[$ReallocAsyncCtx5 >> 2] = 324; //@line 6880
  $31 = $ReallocAsyncCtx5 + 4 | 0; //@line 6881
  HEAP32[$31 >> 2] = $21; //@line 6882
  $32 = $ReallocAsyncCtx5 + 8 | 0; //@line 6883
  HEAP32[$32 >> 2] = $26; //@line 6884
  $33 = $ReallocAsyncCtx5 + 12 | 0; //@line 6885
  HEAP32[$33 >> 2] = $24; //@line 6886
  $34 = $ReallocAsyncCtx5 + 16 | 0; //@line 6887
  HEAP32[$34 >> 2] = $20; //@line 6888
  sp = STACKTOP; //@line 6889
  return;
 }
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_99($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $68 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 36025
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36027
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36029
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36031
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36035
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 36037
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 36040
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 36042
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 36044
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 36046
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 36048
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 36050
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 36052
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 36054
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 36056
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 36058
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 36060
 $36 = HEAP8[$0 + 72 >> 0] | 0; //@line 36062
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 36064
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 36066
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 36068
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 36070
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 36072
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 36074
 $50 = HEAP16[$0 + 100 >> 1] | 0; //@line 36076
 $52 = HEAP8[$0 + 102 >> 0] | 0; //@line 36078
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 36080
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 36082
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 36086
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 36088
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 36090
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 36094
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 36096
 _printf(12430, HEAP32[$0 + 128 >> 2] | 0) | 0; //@line 36097
 HEAP32[$18 >> 2] = $AsyncRetVal; //@line 36098
 _printf(12650, $18) | 0; //@line 36099
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(124) | 0; //@line 36100
 _putchar(10) | 0; //@line 36101
 if (!___async) {
  ___async_unwind = 0; //@line 36104
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 305; //@line 36106
 HEAP8[$ReallocAsyncCtx6 + 4 >> 0] = $52; //@line 36108
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $32; //@line 36110
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $54; //@line 36112
 HEAP16[$ReallocAsyncCtx6 + 16 >> 1] = $50; //@line 36114
 HEAP8[$ReallocAsyncCtx6 + 18 >> 0] = $14 & 1; //@line 36117
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $26; //@line 36119
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $22; //@line 36121
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $2; //@line 36123
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $10; //@line 36125
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $AsyncRetVal; //@line 36127
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $34; //@line 36129
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $62; //@line 36131
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $38; //@line 36133
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $28; //@line 36135
 HEAP32[$ReallocAsyncCtx6 + 56 >> 2] = $42; //@line 36137
 HEAP32[$ReallocAsyncCtx6 + 60 >> 2] = $48; //@line 36139
 HEAP32[$ReallocAsyncCtx6 + 64 >> 2] = $68; //@line 36141
 HEAP32[$ReallocAsyncCtx6 + 68 >> 2] = $6; //@line 36143
 HEAP32[$ReallocAsyncCtx6 + 72 >> 2] = $16; //@line 36145
 HEAP32[$ReallocAsyncCtx6 + 76 >> 2] = $60; //@line 36147
 HEAP8[$ReallocAsyncCtx6 + 80 >> 0] = $36; //@line 36149
 HEAP32[$ReallocAsyncCtx6 + 84 >> 2] = $4; //@line 36151
 HEAP32[$ReallocAsyncCtx6 + 88 >> 2] = $30; //@line 36153
 HEAP32[$ReallocAsyncCtx6 + 92 >> 2] = $12; //@line 36155
 HEAP32[$ReallocAsyncCtx6 + 96 >> 2] = $64; //@line 36157
 HEAP32[$ReallocAsyncCtx6 + 100 >> 2] = $44; //@line 36159
 HEAP32[$ReallocAsyncCtx6 + 104 >> 2] = $40; //@line 36161
 HEAP32[$ReallocAsyncCtx6 + 108 >> 2] = $56; //@line 36163
 HEAP32[$ReallocAsyncCtx6 + 112 >> 2] = $46; //@line 36165
 HEAP32[$ReallocAsyncCtx6 + 116 >> 2] = $24; //@line 36167
 HEAP32[$ReallocAsyncCtx6 + 120 >> 2] = $20; //@line 36169
 sp = STACKTOP; //@line 36170
 return;
}
function _initialize__async_cb_480($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $70 = 0, $71 = 0, $72 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 35299
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35303
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35305
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35309
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 35311
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 35313
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 35315
 if (($AsyncRetVal | 0) != (HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 32 >> 2] | 0)) {
  $23 = $AsyncRetVal - (HEAP32[$6 >> 2] | 0) & HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 35324
  HEAP32[$6 >> 2] = $AsyncRetVal; //@line 35325
  $24 = HEAP32[$10 >> 2] | 0; //@line 35326
  L4 : do {
   if (($24 | 0) < 1e6) {
    switch ($24 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 6; //@line 35335
      break L4;
     }
    }
    $25 = ___muldi3($23 | 0, 0, 1e6, 0) | 0; //@line 35339
    $27 = _bitshift64Lshr($25 | 0, tempRet0 | 0, 15) | 0; //@line 35341
    $28 = tempRet0; //@line 35342
    $31 = $12; //@line 35345
    $37 = _i64Add(HEAP32[$31 >> 2] | 0, HEAP32[$31 + 4 >> 2] | 0, $23 * 1e6 & 32704 | 0, 0) | 0; //@line 35351
    $38 = tempRet0; //@line 35352
    $39 = $12; //@line 35353
    HEAP32[$39 >> 2] = $37; //@line 35355
    HEAP32[$39 + 4 >> 2] = $38; //@line 35358
    if ($38 >>> 0 < 0 | ($38 | 0) == 0 & $37 >>> 0 < 32768) {
     $95 = $27; //@line 35365
     $96 = $28; //@line 35365
    } else {
     $48 = _i64Add($27 | 0, $28 | 0, 1, 0) | 0; //@line 35367
     $49 = tempRet0; //@line 35368
     $50 = _i64Add($37 | 0, $38 | 0, -32768, -1) | 0; //@line 35369
     $52 = $12; //@line 35371
     HEAP32[$52 >> 2] = $50; //@line 35373
     HEAP32[$52 + 4 >> 2] = tempRet0; //@line 35376
     $95 = $48; //@line 35377
     $96 = $49; //@line 35377
    }
   } else {
    switch ($24 | 0) {
    case 1e6:
     {
      $95 = $23; //@line 35382
      $96 = 0; //@line 35382
      break;
     }
    default:
     {
      label = 6; //@line 35386
     }
    }
   }
  } while (0);
  if ((label | 0) == 6) {
   $56 = ___muldi3($23 | 0, 0, 1e6, 0) | 0; //@line 35392
   $57 = tempRet0; //@line 35393
   $58 = ___udivdi3($56 | 0, $57 | 0, $24 | 0, 0) | 0; //@line 35394
   $59 = tempRet0; //@line 35395
   $60 = ___muldi3($58 | 0, $59 | 0, $24 | 0, 0) | 0; //@line 35396
   $62 = _i64Subtract($56 | 0, $57 | 0, $60 | 0, tempRet0 | 0) | 0; //@line 35398
   $64 = $12; //@line 35400
   $70 = _i64Add($62 | 0, tempRet0 | 0, HEAP32[$64 >> 2] | 0, HEAP32[$64 + 4 >> 2] | 0) | 0; //@line 35406
   $71 = tempRet0; //@line 35407
   $72 = $12; //@line 35408
   HEAP32[$72 >> 2] = $70; //@line 35410
   HEAP32[$72 + 4 >> 2] = $71; //@line 35413
   if ($71 >>> 0 < 0 | ($71 | 0) == 0 & $70 >>> 0 < $24 >>> 0) {
    $95 = $58; //@line 35420
    $96 = $59; //@line 35420
   } else {
    $81 = _i64Add($58 | 0, $59 | 0, 1, 0) | 0; //@line 35422
    $82 = tempRet0; //@line 35423
    $83 = _i64Subtract($70 | 0, $71 | 0, $24 | 0, 0) | 0; //@line 35424
    $85 = $12; //@line 35426
    HEAP32[$85 >> 2] = $83; //@line 35428
    HEAP32[$85 + 4 >> 2] = tempRet0; //@line 35431
    $95 = $81; //@line 35432
    $96 = $82; //@line 35432
   }
  }
  $89 = $14; //@line 35435
  $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 35441
  $99 = $14; //@line 35443
  HEAP32[$99 >> 2] = $97; //@line 35445
  HEAP32[$99 + 4 >> 2] = tempRet0; //@line 35448
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 35450
 _schedule_interrupt($4); //@line 35451
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 708; //@line 35454
  sp = STACKTOP; //@line 35455
  return;
 }
 ___async_unwind = 0; //@line 35458
 HEAP32[$ReallocAsyncCtx5 >> 2] = 708; //@line 35459
 sp = STACKTOP; //@line 35460
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_324($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $32 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14421
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14425
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14427
 HEAP8[HEAP32[$0 + 4 >> 2] >> 0] = 0; //@line 14428
 $7 = $4 + 1112 | 0; //@line 14429
 $8 = $6 + 12 | 0; //@line 14430
 HEAP32[$6 >> 2] = 70; //@line 14431
 HEAP32[$6 + 4 >> 2] = 0; //@line 14433
 HEAP32[$6 + 8 >> 2] = $4; //@line 14435
 HEAP32[$8 >> 2] = 648; //@line 14436
 $9 = $4 + 1152 | 0; //@line 14437
 do {
  if (($9 | 0) != ($6 | 0)) {
   $11 = $4 + 1164 | 0; //@line 14441
   $12 = HEAP32[$11 >> 2] | 0; //@line 14442
   if ($12 | 0) {
    $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 14446
    $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 14447
    FUNCTION_TABLE_vi[$15 & 1023]($9); //@line 14448
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 71; //@line 14451
     $16 = $ReallocAsyncCtx + 4 | 0; //@line 14452
     HEAP32[$16 >> 2] = $8; //@line 14453
     $17 = $ReallocAsyncCtx + 8 | 0; //@line 14454
     HEAP32[$17 >> 2] = $11; //@line 14455
     $18 = $ReallocAsyncCtx + 12 | 0; //@line 14456
     HEAP32[$18 >> 2] = $9; //@line 14457
     $19 = $ReallocAsyncCtx + 16 | 0; //@line 14458
     HEAP32[$19 >> 2] = $6; //@line 14459
     $20 = $ReallocAsyncCtx + 20 | 0; //@line 14460
     HEAP32[$20 >> 2] = $7; //@line 14461
     sp = STACKTOP; //@line 14462
     return;
    }
    ___async_unwind = 0; //@line 14465
    HEAP32[$ReallocAsyncCtx >> 2] = 71; //@line 14466
    $16 = $ReallocAsyncCtx + 4 | 0; //@line 14467
    HEAP32[$16 >> 2] = $8; //@line 14468
    $17 = $ReallocAsyncCtx + 8 | 0; //@line 14469
    HEAP32[$17 >> 2] = $11; //@line 14470
    $18 = $ReallocAsyncCtx + 12 | 0; //@line 14471
    HEAP32[$18 >> 2] = $9; //@line 14472
    $19 = $ReallocAsyncCtx + 16 | 0; //@line 14473
    HEAP32[$19 >> 2] = $6; //@line 14474
    $20 = $ReallocAsyncCtx + 20 | 0; //@line 14475
    HEAP32[$20 >> 2] = $7; //@line 14476
    sp = STACKTOP; //@line 14477
    return;
   }
   $21 = HEAP32[$8 >> 2] | 0; //@line 14480
   if (!$21) {
    HEAP32[$11 >> 2] = 0; //@line 14483
    break;
   }
   $24 = HEAP32[$21 + 4 >> 2] | 0; //@line 14487
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 14488
   FUNCTION_TABLE_vii[$24 & 31]($9, $6); //@line 14489
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 72; //@line 14492
    $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 14493
    HEAP32[$25 >> 2] = $8; //@line 14494
    $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 14495
    HEAP32[$26 >> 2] = $11; //@line 14496
    $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 14497
    HEAP32[$27 >> 2] = $7; //@line 14498
    $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 14499
    HEAP32[$28 >> 2] = $6; //@line 14500
    sp = STACKTOP; //@line 14501
    return;
   }
   ___async_unwind = 0; //@line 14504
   HEAP32[$ReallocAsyncCtx2 >> 2] = 72; //@line 14505
   $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 14506
   HEAP32[$25 >> 2] = $8; //@line 14507
   $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 14508
   HEAP32[$26 >> 2] = $11; //@line 14509
   $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 14510
   HEAP32[$27 >> 2] = $7; //@line 14511
   $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 14512
   HEAP32[$28 >> 2] = $6; //@line 14513
   sp = STACKTOP; //@line 14514
   return;
  }
 } while (0);
 __ZN4mbed6Ticker5setupEy($7, 2e5, 0); //@line 14518
 $29 = HEAP32[$8 >> 2] | 0; //@line 14519
 if (!$29) {
  return;
 }
 $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 14525
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 14526
 FUNCTION_TABLE_vi[$32 & 1023]($6); //@line 14527
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 73; //@line 14530
  sp = STACKTOP; //@line 14531
  return;
 }
 ___async_unwind = 0; //@line 14534
 HEAP32[$ReallocAsyncCtx3 >> 2] = 73; //@line 14535
 sp = STACKTOP; //@line 14536
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_199($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 6015
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6019
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6021
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6023
 $9 = $4 + 12 | 0; //@line 6024
 HEAP32[$4 >> 2] = 586; //@line 6025
 HEAP32[$4 + 4 >> 2] = 0; //@line 6027
 HEAP32[$4 + 8 >> 2] = $6; //@line 6029
 HEAP32[$9 >> 2] = 848; //@line 6030
 $10 = $6 + 1260 | 0; //@line 6031
 if (($10 | 0) == ($4 | 0)) {
  $29 = HEAP32[214] | 0; //@line 6035
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 6036
  FUNCTION_TABLE_vi[$29 & 1023]($4); //@line 6037
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 589; //@line 6040
   $30 = $ReallocAsyncCtx15 + 4 | 0; //@line 6041
   HEAP32[$30 >> 2] = $4; //@line 6042
   $31 = $ReallocAsyncCtx15 + 8 | 0; //@line 6043
   HEAP32[$31 >> 2] = $8; //@line 6044
   sp = STACKTOP; //@line 6045
   return;
  }
  ___async_unwind = 0; //@line 6048
  HEAP32[$ReallocAsyncCtx15 >> 2] = 589; //@line 6049
  $30 = $ReallocAsyncCtx15 + 4 | 0; //@line 6050
  HEAP32[$30 >> 2] = $4; //@line 6051
  $31 = $ReallocAsyncCtx15 + 8 | 0; //@line 6052
  HEAP32[$31 >> 2] = $8; //@line 6053
  sp = STACKTOP; //@line 6054
  return;
 }
 $12 = $6 + 1272 | 0; //@line 6057
 $13 = HEAP32[$12 >> 2] | 0; //@line 6058
 if (!$13) {
  $23 = HEAP32[213] | 0; //@line 6062
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 6063
  FUNCTION_TABLE_vii[$23 & 31]($10, $4); //@line 6064
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 588; //@line 6067
   $24 = $ReallocAsyncCtx14 + 4 | 0; //@line 6068
   HEAP32[$24 >> 2] = $9; //@line 6069
   $25 = $ReallocAsyncCtx14 + 8 | 0; //@line 6070
   HEAP32[$25 >> 2] = $12; //@line 6071
   $26 = $ReallocAsyncCtx14 + 12 | 0; //@line 6072
   HEAP32[$26 >> 2] = $4; //@line 6073
   $27 = $ReallocAsyncCtx14 + 16 | 0; //@line 6074
   HEAP32[$27 >> 2] = $8; //@line 6075
   sp = STACKTOP; //@line 6076
   return;
  }
  ___async_unwind = 0; //@line 6079
  HEAP32[$ReallocAsyncCtx14 >> 2] = 588; //@line 6080
  $24 = $ReallocAsyncCtx14 + 4 | 0; //@line 6081
  HEAP32[$24 >> 2] = $9; //@line 6082
  $25 = $ReallocAsyncCtx14 + 8 | 0; //@line 6083
  HEAP32[$25 >> 2] = $12; //@line 6084
  $26 = $ReallocAsyncCtx14 + 12 | 0; //@line 6085
  HEAP32[$26 >> 2] = $4; //@line 6086
  $27 = $ReallocAsyncCtx14 + 16 | 0; //@line 6087
  HEAP32[$27 >> 2] = $8; //@line 6088
  sp = STACKTOP; //@line 6089
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 6093
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 6094
  FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 6095
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 587; //@line 6098
   $17 = $ReallocAsyncCtx13 + 4 | 0; //@line 6099
   HEAP32[$17 >> 2] = $9; //@line 6100
   $18 = $ReallocAsyncCtx13 + 8 | 0; //@line 6101
   HEAP32[$18 >> 2] = $12; //@line 6102
   $19 = $ReallocAsyncCtx13 + 12 | 0; //@line 6103
   HEAP32[$19 >> 2] = $10; //@line 6104
   $20 = $ReallocAsyncCtx13 + 16 | 0; //@line 6105
   HEAP32[$20 >> 2] = $4; //@line 6106
   $21 = $ReallocAsyncCtx13 + 20 | 0; //@line 6107
   HEAP32[$21 >> 2] = $8; //@line 6108
   sp = STACKTOP; //@line 6109
   return;
  }
  ___async_unwind = 0; //@line 6112
  HEAP32[$ReallocAsyncCtx13 >> 2] = 587; //@line 6113
  $17 = $ReallocAsyncCtx13 + 4 | 0; //@line 6114
  HEAP32[$17 >> 2] = $9; //@line 6115
  $18 = $ReallocAsyncCtx13 + 8 | 0; //@line 6116
  HEAP32[$18 >> 2] = $12; //@line 6117
  $19 = $ReallocAsyncCtx13 + 12 | 0; //@line 6118
  HEAP32[$19 >> 2] = $10; //@line 6119
  $20 = $ReallocAsyncCtx13 + 16 | 0; //@line 6120
  HEAP32[$20 >> 2] = $4; //@line 6121
  $21 = $ReallocAsyncCtx13 + 20 | 0; //@line 6122
  HEAP32[$21 >> 2] = $8; //@line 6123
  sp = STACKTOP; //@line 6124
  return;
 }
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_516($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 37851
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37853
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37855
 $5 = $2 + 1240 | 0; //@line 37856
 $6 = $4 + 12 | 0; //@line 37857
 HEAP32[$4 >> 2] = 143; //@line 37858
 HEAP32[$4 + 4 >> 2] = 0; //@line 37860
 HEAP32[$4 + 8 >> 2] = $2; //@line 37862
 HEAP32[$6 >> 2] = 648; //@line 37863
 $7 = $2 + 1280 | 0; //@line 37864
 do {
  if (($7 | 0) != ($4 | 0)) {
   $9 = $2 + 1292 | 0; //@line 37868
   $10 = HEAP32[$9 >> 2] | 0; //@line 37869
   if ($10 | 0) {
    $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 37873
    $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 37874
    FUNCTION_TABLE_vi[$13 & 1023]($7); //@line 37875
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 144; //@line 37878
     $14 = $ReallocAsyncCtx + 4 | 0; //@line 37879
     HEAP32[$14 >> 2] = $6; //@line 37880
     $15 = $ReallocAsyncCtx + 8 | 0; //@line 37881
     HEAP32[$15 >> 2] = $9; //@line 37882
     $16 = $ReallocAsyncCtx + 12 | 0; //@line 37883
     HEAP32[$16 >> 2] = $7; //@line 37884
     $17 = $ReallocAsyncCtx + 16 | 0; //@line 37885
     HEAP32[$17 >> 2] = $4; //@line 37886
     $18 = $ReallocAsyncCtx + 20 | 0; //@line 37887
     HEAP32[$18 >> 2] = $5; //@line 37888
     sp = STACKTOP; //@line 37889
     return;
    }
    ___async_unwind = 0; //@line 37892
    HEAP32[$ReallocAsyncCtx >> 2] = 144; //@line 37893
    $14 = $ReallocAsyncCtx + 4 | 0; //@line 37894
    HEAP32[$14 >> 2] = $6; //@line 37895
    $15 = $ReallocAsyncCtx + 8 | 0; //@line 37896
    HEAP32[$15 >> 2] = $9; //@line 37897
    $16 = $ReallocAsyncCtx + 12 | 0; //@line 37898
    HEAP32[$16 >> 2] = $7; //@line 37899
    $17 = $ReallocAsyncCtx + 16 | 0; //@line 37900
    HEAP32[$17 >> 2] = $4; //@line 37901
    $18 = $ReallocAsyncCtx + 20 | 0; //@line 37902
    HEAP32[$18 >> 2] = $5; //@line 37903
    sp = STACKTOP; //@line 37904
    return;
   }
   $19 = HEAP32[$6 >> 2] | 0; //@line 37907
   if (!$19) {
    HEAP32[$9 >> 2] = 0; //@line 37910
    break;
   }
   $22 = HEAP32[$19 + 4 >> 2] | 0; //@line 37914
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 37915
   FUNCTION_TABLE_vii[$22 & 31]($7, $4); //@line 37916
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 145; //@line 37919
    $23 = $ReallocAsyncCtx2 + 4 | 0; //@line 37920
    HEAP32[$23 >> 2] = $6; //@line 37921
    $24 = $ReallocAsyncCtx2 + 8 | 0; //@line 37922
    HEAP32[$24 >> 2] = $9; //@line 37923
    $25 = $ReallocAsyncCtx2 + 12 | 0; //@line 37924
    HEAP32[$25 >> 2] = $5; //@line 37925
    $26 = $ReallocAsyncCtx2 + 16 | 0; //@line 37926
    HEAP32[$26 >> 2] = $4; //@line 37927
    sp = STACKTOP; //@line 37928
    return;
   }
   ___async_unwind = 0; //@line 37931
   HEAP32[$ReallocAsyncCtx2 >> 2] = 145; //@line 37932
   $23 = $ReallocAsyncCtx2 + 4 | 0; //@line 37933
   HEAP32[$23 >> 2] = $6; //@line 37934
   $24 = $ReallocAsyncCtx2 + 8 | 0; //@line 37935
   HEAP32[$24 >> 2] = $9; //@line 37936
   $25 = $ReallocAsyncCtx2 + 12 | 0; //@line 37937
   HEAP32[$25 >> 2] = $5; //@line 37938
   $26 = $ReallocAsyncCtx2 + 16 | 0; //@line 37939
   HEAP32[$26 >> 2] = $4; //@line 37940
   sp = STACKTOP; //@line 37941
   return;
  }
 } while (0);
 __ZN4mbed6Ticker5setupEy($5, 1e5, 0); //@line 37945
 $27 = HEAP32[$6 >> 2] | 0; //@line 37946
 if (!$27) {
  return;
 }
 $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 37952
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 37953
 FUNCTION_TABLE_vi[$30 & 1023]($4); //@line 37954
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 146; //@line 37957
  sp = STACKTOP; //@line 37958
  return;
 }
 ___async_unwind = 0; //@line 37961
 HEAP32[$ReallocAsyncCtx3 >> 2] = 146; //@line 37962
 sp = STACKTOP; //@line 37963
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 16786
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16788
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16790
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16792
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16794
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16796
 $12 = $0 + 24 | 0; //@line 16798
 $14 = HEAP32[$12 >> 2] | 0; //@line 16800
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 16803
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 16805
 $20 = HEAP32[$2 >> 2] | 0; //@line 16806
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 16810
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 16811
  FUNCTION_TABLE_vii[$23 & 31]($6, $8); //@line 16812
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 134; //@line 16815
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 16816
   HEAP32[$24 >> 2] = $2; //@line 16817
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 16818
   HEAP32[$25 >> 2] = $4; //@line 16819
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 16820
   HEAP32[$26 >> 2] = $10; //@line 16821
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 16822
   $28 = $27; //@line 16823
   $29 = $28; //@line 16824
   HEAP32[$29 >> 2] = $14; //@line 16825
   $30 = $28 + 4 | 0; //@line 16826
   $31 = $30; //@line 16827
   HEAP32[$31 >> 2] = $17; //@line 16828
   $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 16829
   HEAP32[$32 >> 2] = $19; //@line 16830
   $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 16831
   HEAP32[$33 >> 2] = $8; //@line 16832
   sp = STACKTOP; //@line 16833
   return;
  }
  ___async_unwind = 0; //@line 16836
  HEAP32[$ReallocAsyncCtx2 >> 2] = 134; //@line 16837
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 16838
  HEAP32[$24 >> 2] = $2; //@line 16839
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 16840
  HEAP32[$25 >> 2] = $4; //@line 16841
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 16842
  HEAP32[$26 >> 2] = $10; //@line 16843
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 16844
  $28 = $27; //@line 16845
  $29 = $28; //@line 16846
  HEAP32[$29 >> 2] = $14; //@line 16847
  $30 = $28 + 4 | 0; //@line 16848
  $31 = $30; //@line 16849
  HEAP32[$31 >> 2] = $17; //@line 16850
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 16851
  HEAP32[$32 >> 2] = $19; //@line 16852
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 16853
  HEAP32[$33 >> 2] = $8; //@line 16854
  sp = STACKTOP; //@line 16855
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 16858
 __ZN4mbed6Ticker5setupEy($10, $14, $17); //@line 16859
 $34 = HEAP32[$2 >> 2] | 0; //@line 16860
 if ($34 | 0) {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 16864
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 16865
  FUNCTION_TABLE_vi[$37 & 1023]($8); //@line 16866
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 135; //@line 16869
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 16870
   HEAP32[$38 >> 2] = $19; //@line 16871
   sp = STACKTOP; //@line 16872
   return;
  }
  ___async_unwind = 0; //@line 16875
  HEAP32[$ReallocAsyncCtx3 >> 2] = 135; //@line 16876
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 16877
  HEAP32[$38 >> 2] = $19; //@line 16878
  sp = STACKTOP; //@line 16879
  return;
 }
 $40 = HEAP32[$19 + 788 >> 2] | 0; //@line 16883
 if (!$40) {
  return;
 }
 $43 = HEAP32[$40 + 60 >> 2] | 0; //@line 16889
 if (!$43) {
  return;
 }
 $46 = HEAP32[$43 >> 2] | 0; //@line 16895
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 16896
 FUNCTION_TABLE_vi[$46 & 1023]($40 + 48 | 0); //@line 16897
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 136; //@line 16900
  sp = STACKTOP; //@line 16901
  return;
 }
 ___async_unwind = 0; //@line 16904
 HEAP32[$ReallocAsyncCtx4 >> 2] = 136; //@line 16905
 sp = STACKTOP; //@line 16906
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_49($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $40 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29166
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29170
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29172
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29174
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29176
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29178
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29180
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29182
 if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) != 2) {
  if (!(HEAP8[$8 + 373 >> 0] | 0)) {
   HEAP8[$8 + 376 >> 0] = ($10 | 0) == 0 & (HEAP8[$8 + 944 >> 0] & 8) != 0 & 1; //@line 29198
   $40 = HEAP8[$8 + 378 >> 0] | 0; //@line 29200
   HEAP8[$8 + 379 >> 0] = $40; //@line 29202
   HEAP8[$12 >> 0] = $40; //@line 29203
   HEAP8[$14 + 1 >> 0] = HEAP8[$8 + 372 >> 0] | 0; //@line 29207
   HEAP32[$14 + 4 >> 2] = $16; //@line 29209
   $46 = HEAP32[$8 >> 2] | 0; //@line 29210
   $49 = HEAP32[(HEAP32[$46 >> 2] | 0) + 12 >> 2] | 0; //@line 29213
   $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 29214
   FUNCTION_TABLE_vii[$49 & 31]($46, $14); //@line 29215
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 372; //@line 29218
    $50 = $ReallocAsyncCtx + 4 | 0; //@line 29219
    HEAP32[$50 >> 2] = $8; //@line 29220
    $51 = $ReallocAsyncCtx + 8 | 0; //@line 29221
    HEAP32[$51 >> 2] = $16; //@line 29222
    $52 = $ReallocAsyncCtx + 12 | 0; //@line 29223
    HEAP32[$52 >> 2] = $6; //@line 29224
    $53 = $ReallocAsyncCtx + 16 | 0; //@line 29225
    HEAP32[$53 >> 2] = $12; //@line 29226
    sp = STACKTOP; //@line 29227
    return;
   }
   ___async_unwind = 0; //@line 29230
   HEAP32[$ReallocAsyncCtx >> 2] = 372; //@line 29231
   $50 = $ReallocAsyncCtx + 4 | 0; //@line 29232
   HEAP32[$50 >> 2] = $8; //@line 29233
   $51 = $ReallocAsyncCtx + 8 | 0; //@line 29234
   HEAP32[$51 >> 2] = $16; //@line 29235
   $52 = $ReallocAsyncCtx + 12 | 0; //@line 29236
   HEAP32[$52 >> 2] = $6; //@line 29237
   $53 = $ReallocAsyncCtx + 16 | 0; //@line 29238
   HEAP32[$53 >> 2] = $12; //@line 29239
   sp = STACKTOP; //@line 29240
   return;
  }
 }
 $21 = HEAP32[$6 >> 2] | 0; //@line 29244
 $23 = HEAP32[$4 >> 2] | 0; //@line 29246
 $26 = (__ZN7LoRaPHY15get_ack_timeoutEv(HEAP32[$8 >> 2] | 0) | 0) + $23 | 0; //@line 29249
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 29250
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $8 + 1076 | 0, $26); //@line 29251
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 371; //@line 29254
  $27 = $ReallocAsyncCtx5 + 4 | 0; //@line 29255
  HEAP32[$27 >> 2] = $8; //@line 29256
  $28 = $ReallocAsyncCtx5 + 8 | 0; //@line 29257
  HEAP32[$28 >> 2] = $10; //@line 29258
  $29 = $ReallocAsyncCtx5 + 12 | 0; //@line 29259
  HEAP32[$29 >> 2] = $12; //@line 29260
  $30 = $ReallocAsyncCtx5 + 16 | 0; //@line 29261
  HEAP32[$30 >> 2] = $14; //@line 29262
  $31 = $ReallocAsyncCtx5 + 20 | 0; //@line 29263
  HEAP32[$31 >> 2] = $16; //@line 29264
  $32 = $ReallocAsyncCtx5 + 24 | 0; //@line 29265
  HEAP32[$32 >> 2] = $6; //@line 29266
  sp = STACKTOP; //@line 29267
  return;
 }
 ___async_unwind = 0; //@line 29270
 HEAP32[$ReallocAsyncCtx5 >> 2] = 371; //@line 29271
 $27 = $ReallocAsyncCtx5 + 4 | 0; //@line 29272
 HEAP32[$27 >> 2] = $8; //@line 29273
 $28 = $ReallocAsyncCtx5 + 8 | 0; //@line 29274
 HEAP32[$28 >> 2] = $10; //@line 29275
 $29 = $ReallocAsyncCtx5 + 12 | 0; //@line 29276
 HEAP32[$29 >> 2] = $12; //@line 29277
 $30 = $ReallocAsyncCtx5 + 16 | 0; //@line 29278
 HEAP32[$30 >> 2] = $14; //@line 29279
 $31 = $ReallocAsyncCtx5 + 20 | 0; //@line 29280
 HEAP32[$31 >> 2] = $16; //@line 29281
 $32 = $ReallocAsyncCtx5 + 24 | 0; //@line 29282
 HEAP32[$32 >> 2] = $6; //@line 29283
 sp = STACKTOP; //@line 29284
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15757
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 15762
 } else {
  $9 = $1 + 52 | 0; //@line 15764
  $10 = HEAP8[$9 >> 0] | 0; //@line 15765
  $11 = $1 + 53 | 0; //@line 15766
  $12 = HEAP8[$11 >> 0] | 0; //@line 15767
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 15770
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 15771
  HEAP8[$9 >> 0] = 0; //@line 15772
  HEAP8[$11 >> 0] = 0; //@line 15773
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 15774
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 15775
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 805; //@line 15778
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 15780
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 15782
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 15784
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 15786
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 15788
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 15790
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 15792
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 15794
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 15796
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 15798
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 15801
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 15803
   sp = STACKTOP; //@line 15804
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15807
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 15812
    $32 = $0 + 8 | 0; //@line 15813
    $33 = $1 + 54 | 0; //@line 15814
    $$0 = $0 + 24 | 0; //@line 15815
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 15848
     HEAP8[$11 >> 0] = 0; //@line 15849
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 15850
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 15851
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15856
     $62 = $$0 + 8 | 0; //@line 15857
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 15860
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 806; //@line 15865
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 15867
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 15869
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 15871
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 15873
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 15875
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 15877
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 15879
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 15881
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 15883
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 15885
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 15887
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 15889
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 15891
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 15894
    sp = STACKTOP; //@line 15895
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 15899
  HEAP8[$11 >> 0] = $12; //@line 15900
 }
 return;
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 var $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $35 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $54 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10440
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10444
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10446
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10448
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10450
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10452
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10454
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10456
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 10458
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 10460
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10462
 $24 = (HEAP8[$0 + 4 >> 0] | 0) + 1 << 24 >> 24; //@line 10464
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 10466
  $54 = ___async_retval; //@line 10467
  HEAP32[$54 >> 2] = $$1; //@line 10468
  return;
 }
 $25 = $24 & 255; //@line 10473
 if (($24 & 255) >= (HEAPU8[$4 >> 0] | 0)) {
  $$1 = 0; //@line 10475
  $54 = ___async_retval; //@line 10476
  HEAP32[$54 >> 2] = $$1; //@line 10477
  return;
 }
 $26 = HEAP32[$8 >> 2] | 0; //@line 10480
 HEAP8[$10 >> 0] = HEAP8[$26 + ($25 << 4) + 13 >> 0] | 0; //@line 10483
 HEAP8[$12 >> 0] = HEAP8[$26 + ($25 << 4) + 12 >> 0] | 0; //@line 10486
 HEAP32[$14 >> 2] = HEAP32[$26 + ($25 << 4) + 4 >> 2]; //@line 10489
 HEAP32[$16 >> 2] = HEAP32[$26 + ($25 << 4) + 8 >> 2]; //@line 10492
 $35 = HEAP32[$18 >> 2] | 0; //@line 10493
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 60 >> 2] | 0; //@line 10496
 $40 = HEAP8[$26 + ($25 << 4) >> 0] | 0; //@line 10498
 $ReallocAsyncCtx = _emscripten_realloc_async_context(44) | 0; //@line 10499
 $41 = FUNCTION_TABLE_iiii[$38 & 15]($35, $20, $40) | 0; //@line 10500
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 10503
  $42 = $ReallocAsyncCtx + 4 | 0; //@line 10504
  HEAP8[$42 >> 0] = $24; //@line 10505
  $43 = $ReallocAsyncCtx + 8 | 0; //@line 10506
  HEAP32[$43 >> 2] = $4; //@line 10507
  $44 = $ReallocAsyncCtx + 12 | 0; //@line 10508
  HEAP32[$44 >> 2] = $6; //@line 10509
  $45 = $ReallocAsyncCtx + 16 | 0; //@line 10510
  HEAP32[$45 >> 2] = $8; //@line 10511
  $46 = $ReallocAsyncCtx + 20 | 0; //@line 10512
  HEAP32[$46 >> 2] = $10; //@line 10513
  $47 = $ReallocAsyncCtx + 24 | 0; //@line 10514
  HEAP32[$47 >> 2] = $12; //@line 10515
  $48 = $ReallocAsyncCtx + 28 | 0; //@line 10516
  HEAP32[$48 >> 2] = $14; //@line 10517
  $49 = $ReallocAsyncCtx + 32 | 0; //@line 10518
  HEAP32[$49 >> 2] = $16; //@line 10519
  $50 = $ReallocAsyncCtx + 36 | 0; //@line 10520
  HEAP32[$50 >> 2] = $18; //@line 10521
  $51 = $ReallocAsyncCtx + 40 | 0; //@line 10522
  HEAP32[$51 >> 2] = $20; //@line 10523
  sp = STACKTOP; //@line 10524
  return;
 }
 HEAP32[___async_retval >> 2] = $41; //@line 10528
 ___async_unwind = 0; //@line 10529
 HEAP32[$ReallocAsyncCtx >> 2] = 590; //@line 10530
 $42 = $ReallocAsyncCtx + 4 | 0; //@line 10531
 HEAP8[$42 >> 0] = $24; //@line 10532
 $43 = $ReallocAsyncCtx + 8 | 0; //@line 10533
 HEAP32[$43 >> 2] = $4; //@line 10534
 $44 = $ReallocAsyncCtx + 12 | 0; //@line 10535
 HEAP32[$44 >> 2] = $6; //@line 10536
 $45 = $ReallocAsyncCtx + 16 | 0; //@line 10537
 HEAP32[$45 >> 2] = $8; //@line 10538
 $46 = $ReallocAsyncCtx + 20 | 0; //@line 10539
 HEAP32[$46 >> 2] = $10; //@line 10540
 $47 = $ReallocAsyncCtx + 24 | 0; //@line 10541
 HEAP32[$47 >> 2] = $12; //@line 10542
 $48 = $ReallocAsyncCtx + 28 | 0; //@line 10543
 HEAP32[$48 >> 2] = $14; //@line 10544
 $49 = $ReallocAsyncCtx + 32 | 0; //@line 10545
 HEAP32[$49 >> 2] = $16; //@line 10546
 $50 = $ReallocAsyncCtx + 36 | 0; //@line 10547
 HEAP32[$50 >> 2] = $18; //@line 10548
 $51 = $ReallocAsyncCtx + 40 | 0; //@line 10549
 HEAP32[$51 >> 2] = $20; //@line 10550
 sp = STACKTOP; //@line 10551
 return;
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12755
      $10 = HEAP32[$9 >> 2] | 0; //@line 12756
      HEAP32[$2 >> 2] = $9 + 4; //@line 12758
      HEAP32[$0 >> 2] = $10; //@line 12759
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12775
      $17 = HEAP32[$16 >> 2] | 0; //@line 12776
      HEAP32[$2 >> 2] = $16 + 4; //@line 12778
      $20 = $0; //@line 12781
      HEAP32[$20 >> 2] = $17; //@line 12783
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 12786
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12802
      $30 = HEAP32[$29 >> 2] | 0; //@line 12803
      HEAP32[$2 >> 2] = $29 + 4; //@line 12805
      $31 = $0; //@line 12806
      HEAP32[$31 >> 2] = $30; //@line 12808
      HEAP32[$31 + 4 >> 2] = 0; //@line 12811
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 12827
      $41 = $40; //@line 12828
      $43 = HEAP32[$41 >> 2] | 0; //@line 12830
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 12833
      HEAP32[$2 >> 2] = $40 + 8; //@line 12835
      $47 = $0; //@line 12836
      HEAP32[$47 >> 2] = $43; //@line 12838
      HEAP32[$47 + 4 >> 2] = $46; //@line 12841
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12857
      $57 = HEAP32[$56 >> 2] | 0; //@line 12858
      HEAP32[$2 >> 2] = $56 + 4; //@line 12860
      $59 = ($57 & 65535) << 16 >> 16; //@line 12862
      $62 = $0; //@line 12865
      HEAP32[$62 >> 2] = $59; //@line 12867
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 12870
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12886
      $72 = HEAP32[$71 >> 2] | 0; //@line 12887
      HEAP32[$2 >> 2] = $71 + 4; //@line 12889
      $73 = $0; //@line 12891
      HEAP32[$73 >> 2] = $72 & 65535; //@line 12893
      HEAP32[$73 + 4 >> 2] = 0; //@line 12896
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12912
      $83 = HEAP32[$82 >> 2] | 0; //@line 12913
      HEAP32[$2 >> 2] = $82 + 4; //@line 12915
      $85 = ($83 & 255) << 24 >> 24; //@line 12917
      $88 = $0; //@line 12920
      HEAP32[$88 >> 2] = $85; //@line 12922
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 12925
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12941
      $98 = HEAP32[$97 >> 2] | 0; //@line 12942
      HEAP32[$2 >> 2] = $97 + 4; //@line 12944
      $99 = $0; //@line 12946
      HEAP32[$99 >> 2] = $98 & 255; //@line 12948
      HEAP32[$99 + 4 >> 2] = 0; //@line 12951
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 12967
      $109 = +HEAPF64[$108 >> 3]; //@line 12968
      HEAP32[$2 >> 2] = $108 + 8; //@line 12970
      HEAPF64[$0 >> 3] = $109; //@line 12971
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 12987
      $116 = +HEAPF64[$115 >> 3]; //@line 12988
      HEAP32[$2 >> 2] = $115 + 8; //@line 12990
      HEAPF64[$0 >> 3] = $116; //@line 12991
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_170($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2420
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2422
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2424
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2426
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2428
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 2431
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2433
 $15 = $12 + 24 | 0; //@line 2436
 do {
  if ((HEAP32[$0 + 28 >> 2] | 0) > 1) {
   $18 = HEAP32[$12 + 8 >> 2] | 0; //@line 2441
   if (!($18 & 2)) {
    $21 = $4 + 36 | 0; //@line 2445
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $4 + 54 | 0; //@line 2452
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 2463
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 2464
      if (!___async) {
       ___async_unwind = 0; //@line 2467
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 811; //@line 2469
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 2471
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $2; //@line 2473
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 2475
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 2477
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $4; //@line 2479
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $6; //@line 2481
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $8; //@line 2483
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $10 & 1; //@line 2486
      sp = STACKTOP; //@line 2487
      return;
     }
     $36 = $4 + 24 | 0; //@line 2490
     $37 = $4 + 54 | 0; //@line 2491
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 2506
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 2507
     if (!___async) {
      ___async_unwind = 0; //@line 2510
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 810; //@line 2512
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 2514
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $2; //@line 2516
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 2518
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 2520
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 2522
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $4; //@line 2524
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $6; //@line 2526
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $8; //@line 2528
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $10 & 1; //@line 2531
     sp = STACKTOP; //@line 2532
     return;
    }
   }
   $24 = $4 + 54 | 0; //@line 2536
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 2540
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 2541
    if (!___async) {
     ___async_unwind = 0; //@line 2544
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 809; //@line 2546
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 2548
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 2550
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 2552
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $4; //@line 2554
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $6; //@line 2556
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $8; //@line 2558
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $10 & 1; //@line 2561
    sp = STACKTOP; //@line 2562
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12radio_eventsD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $37 = 0, $41 = 0, $44 = 0, $47 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11020
 $2 = HEAP32[$0 + 108 >> 2] | 0; //@line 11022
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 11028
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11029
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 96 | 0); //@line 11030
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 348; //@line 11033
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11035
    sp = STACKTOP; //@line 11036
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11039
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 92 >> 2] | 0; //@line 11045
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 11051
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11052
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 80 | 0); //@line 11053
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 349; //@line 11056
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 11058
    sp = STACKTOP; //@line 11059
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11062
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 76 >> 2] | 0; //@line 11068
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 11074
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11075
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 64 | 0); //@line 11076
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 350; //@line 11079
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 11081
    sp = STACKTOP; //@line 11082
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11085
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 60 >> 2] | 0; //@line 11091
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 11097
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11098
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 48 | 0); //@line 11099
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 351; //@line 11102
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 11104
    sp = STACKTOP; //@line 11105
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11108
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 44 >> 2] | 0; //@line 11114
 do {
  if ($30 | 0) {
   $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 11120
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11121
   FUNCTION_TABLE_vi[$34 & 1023]($0 + 32 | 0); //@line 11122
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 352; //@line 11125
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 11127
    sp = STACKTOP; //@line 11128
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 11131
    break;
   }
  }
 } while (0);
 $37 = HEAP32[$0 + 28 >> 2] | 0; //@line 11137
 do {
  if ($37 | 0) {
   $41 = HEAP32[$37 + 8 >> 2] | 0; //@line 11143
   $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11144
   FUNCTION_TABLE_vi[$41 & 1023]($0 + 16 | 0); //@line 11145
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 353; //@line 11148
    HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 11150
    sp = STACKTOP; //@line 11151
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 11154
    break;
   }
  }
 } while (0);
 $44 = HEAP32[$0 + 12 >> 2] | 0; //@line 11160
 if (!$44) {
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 11166
 $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11167
 FUNCTION_TABLE_vi[$47 & 1023]($0); //@line 11168
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 354; //@line 11171
  sp = STACKTOP; //@line 11172
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 11175
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_38($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 28328
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28330
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28332
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28334
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28336
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28338
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28340
 $15 = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 28343
 if (!$15) {
  $24 = HEAP32[$2 >> 2] | 0; //@line 28346
  $26 = $10 + 12 | 0; //@line 28348
  HEAP32[$10 >> 2] = 534; //@line 28349
  HEAP32[$10 + 4 >> 2] = 0; //@line 28351
  HEAP32[$10 + 8 >> 2] = $4; //@line 28353
  HEAP32[$26 >> 2] = 848; //@line 28354
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(28) | 0; //@line 28355
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($24, $4 + 1036 | 0, $10); //@line 28356
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 535; //@line 28359
   $27 = $ReallocAsyncCtx8 + 4 | 0; //@line 28360
   HEAP32[$27 >> 2] = $2; //@line 28361
   $28 = $ReallocAsyncCtx8 + 8 | 0; //@line 28362
   HEAP32[$28 >> 2] = $4; //@line 28363
   $29 = $ReallocAsyncCtx8 + 12 | 0; //@line 28364
   HEAP32[$29 >> 2] = $6; //@line 28365
   $30 = $ReallocAsyncCtx8 + 16 | 0; //@line 28366
   HEAP32[$30 >> 2] = $8; //@line 28367
   $31 = $ReallocAsyncCtx8 + 20 | 0; //@line 28368
   HEAP32[$31 >> 2] = $10; //@line 28369
   $32 = $ReallocAsyncCtx8 + 24 | 0; //@line 28370
   HEAP32[$32 >> 2] = $26; //@line 28371
   sp = STACKTOP; //@line 28372
   return;
  }
  ___async_unwind = 0; //@line 28375
  HEAP32[$ReallocAsyncCtx8 >> 2] = 535; //@line 28376
  $27 = $ReallocAsyncCtx8 + 4 | 0; //@line 28377
  HEAP32[$27 >> 2] = $2; //@line 28378
  $28 = $ReallocAsyncCtx8 + 8 | 0; //@line 28379
  HEAP32[$28 >> 2] = $4; //@line 28380
  $29 = $ReallocAsyncCtx8 + 12 | 0; //@line 28381
  HEAP32[$29 >> 2] = $6; //@line 28382
  $30 = $ReallocAsyncCtx8 + 16 | 0; //@line 28383
  HEAP32[$30 >> 2] = $8; //@line 28384
  $31 = $ReallocAsyncCtx8 + 20 | 0; //@line 28385
  HEAP32[$31 >> 2] = $10; //@line 28386
  $32 = $ReallocAsyncCtx8 + 24 | 0; //@line 28387
  HEAP32[$32 >> 2] = $26; //@line 28388
  sp = STACKTOP; //@line 28389
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 28393
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 28394
  FUNCTION_TABLE_vi[$18 & 1023]($12); //@line 28395
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 533; //@line 28398
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 28399
   HEAP32[$19 >> 2] = $2; //@line 28400
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 28401
   HEAP32[$20 >> 2] = $4; //@line 28402
   $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 28403
   HEAP32[$21 >> 2] = $10; //@line 28404
   $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 28405
   HEAP32[$22 >> 2] = $6; //@line 28406
   $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 28407
   HEAP32[$23 >> 2] = $8; //@line 28408
   sp = STACKTOP; //@line 28409
   return;
  }
  ___async_unwind = 0; //@line 28412
  HEAP32[$ReallocAsyncCtx2 >> 2] = 533; //@line 28413
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 28414
  HEAP32[$19 >> 2] = $2; //@line 28415
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 28416
  HEAP32[$20 >> 2] = $4; //@line 28417
  $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 28418
  HEAP32[$21 >> 2] = $10; //@line 28419
  $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 28420
  HEAP32[$22 >> 2] = $6; //@line 28421
  $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 28422
  HEAP32[$23 >> 2] = $8; //@line 28423
  sp = STACKTOP; //@line 28424
  return;
 }
}
function __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$011 = 0, $$pre$phi13Z2D = 0, $13 = 0, $14 = 0, $3 = 0, $30 = 0, $33 = 0, $35 = 0, $36 = 0, $40 = 0, $5 = 0, $51 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 18512
 STACKTOP = STACKTOP + 16 | 0; //@line 18513
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18513
 $vararg_buffer1 = sp + 8 | 0; //@line 18514
 $vararg_buffer = sp; //@line 18515
 $3 = $0 + 4 | 0; //@line 18516
 $5 = (__ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($3) | 0) & 255; //@line 18518
 $8 = ((__ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($3) | 0) & 255) + $5 | 0; //@line 18521
 if (!$2) {
  $$011 = -1003; //@line 18524
  STACKTOP = sp; //@line 18525
  return $$011 | 0; //@line 18525
 }
 do {
  if (!(HEAP8[$0 + 1156 >> 0] | 0)) {
   $$pre$phi13Z2D = $0 + 1097 | 0; //@line 18533
  } else {
   $13 = HEAP32[$0 >> 2] | 0; //@line 18535
   $14 = $0 + 1097 | 0; //@line 18536
   $AsyncCtx5 = _emscripten_alloc_async_context(48, sp) | 0; //@line 18539
   __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($13, 0, $14, $0 + 1096 | 0, $0 + 964 | 0) | 0; //@line 18540
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 549; //@line 18543
    HEAP32[$AsyncCtx5 + 4 >> 2] = $14; //@line 18545
    HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 18547
    HEAP32[$AsyncCtx5 + 12 >> 2] = $0; //@line 18549
    HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 18551
    HEAP32[$AsyncCtx5 + 20 >> 2] = $8; //@line 18553
    HEAP32[$AsyncCtx5 + 24 >> 2] = $3; //@line 18555
    HEAP32[$AsyncCtx5 + 28 >> 2] = $vararg_buffer; //@line 18557
    HEAP32[$AsyncCtx5 + 32 >> 2] = $vararg_buffer; //@line 18559
    HEAP32[$AsyncCtx5 + 36 >> 2] = $vararg_buffer1; //@line 18561
    HEAP32[$AsyncCtx5 + 40 >> 2] = $vararg_buffer1; //@line 18563
    HEAP8[$AsyncCtx5 + 44 >> 0] = $1; //@line 18565
    sp = STACKTOP; //@line 18566
    STACKTOP = sp; //@line 18567
    return 0; //@line 18567
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 18569
    $$pre$phi13Z2D = $14; //@line 18570
    break;
   }
  }
 } while (0);
 $30 = $0 + 369 | 0; //@line 18577
 $33 = __ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, HEAP8[$$pre$phi13Z2D >> 0] | 0, (HEAP8[$30 >> 0] | 0) != 0) | 0; //@line 18580
 HEAP8[$2 + 1 >> 0] = $33; //@line 18582
 $35 = $33 & 255; //@line 18583
 $36 = $8 & 255; //@line 18584
 if ($36 >>> 0 > $35 >>> 0) {
  HEAP8[$2 >> 0] = $33; //@line 18587
  __ZN14LoRaMacCommand20clear_command_bufferEv($3); //@line 18588
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($3); //@line 18589
  $$0 = 0; //@line 18590
 } else {
  HEAP8[$2 >> 0] = $35 - $8; //@line 18594
  $$0 = $36; //@line 18595
 }
 $40 = HEAP8[$$pre$phi13Z2D >> 0] | 0; //@line 18597
 _printf(13258, $vararg_buffer) | 0; //@line 18598
 _printf(13584, $vararg_buffer1) | 0; //@line 18599
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 18600
 _putchar(10) | 0; //@line 18601
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 550; //@line 18604
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 18606
  HEAP32[$AsyncCtx + 8 >> 2] = $30; //@line 18608
  HEAP8[$AsyncCtx + 12 >> 0] = $40; //@line 18610
  HEAP8[$AsyncCtx + 13 >> 0] = $1; //@line 18612
  HEAP32[$AsyncCtx + 16 >> 2] = $$0; //@line 18614
  sp = STACKTOP; //@line 18615
  STACKTOP = sp; //@line 18616
  return 0; //@line 18616
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 18618
 $51 = $$0 + ($1 & 255) | 0; //@line 18624
 $or$cond$i = $51 >>> 0 < 256 & $51 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, $40, (HEAP8[$30 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 18628
 $$011 = $or$cond$i ? 0 : -1010; //@line 18630
 STACKTOP = sp; //@line 18631
 return $$011 | 0; //@line 18631
}
function _mbedtls_ccm_free($0) {
 $0 = $0 | 0;
 var $13 = 0, $17 = 0, $21 = 0, $25 = 0, $29 = 0, $33 = 0, $37 = 0, $41 = 0, $45 = 0, $49 = 0, $5 = 0, $53 = 0, $57 = 0, $61 = 0, $65 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1621
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1622
 _mbedtls_cipher_free($0); //@line 1623
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 676; //@line 1626
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1628
  sp = STACKTOP; //@line 1629
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1632
  HEAP8[$0 >> 0] = 0; //@line 1634
  HEAP8[$0 + 1 >> 0] = 0; //@line 1636
  HEAP8[$0 + 2 >> 0] = 0; //@line 1638
  $5 = $0 + 4 | 0; //@line 1639
  HEAP8[$0 + 3 >> 0] = 0; //@line 1640
  HEAP8[$5 >> 0] = 0; //@line 1642
  HEAP8[$5 + 1 >> 0] = 0; //@line 1644
  HEAP8[$5 + 2 >> 0] = 0; //@line 1646
  $9 = $5 + 4 | 0; //@line 1647
  HEAP8[$5 + 3 >> 0] = 0; //@line 1648
  HEAP8[$9 >> 0] = 0; //@line 1650
  HEAP8[$9 + 1 >> 0] = 0; //@line 1652
  HEAP8[$9 + 2 >> 0] = 0; //@line 1654
  $13 = $5 + 8 | 0; //@line 1655
  HEAP8[$9 + 3 >> 0] = 0; //@line 1656
  HEAP8[$13 >> 0] = 0; //@line 1658
  HEAP8[$13 + 1 >> 0] = 0; //@line 1660
  HEAP8[$13 + 2 >> 0] = 0; //@line 1662
  $17 = $5 + 12 | 0; //@line 1663
  HEAP8[$13 + 3 >> 0] = 0; //@line 1664
  HEAP8[$17 >> 0] = 0; //@line 1666
  HEAP8[$17 + 1 >> 0] = 0; //@line 1668
  HEAP8[$17 + 2 >> 0] = 0; //@line 1670
  $21 = $5 + 16 | 0; //@line 1671
  HEAP8[$17 + 3 >> 0] = 0; //@line 1672
  HEAP8[$21 >> 0] = 0; //@line 1674
  HEAP8[$21 + 1 >> 0] = 0; //@line 1676
  HEAP8[$21 + 2 >> 0] = 0; //@line 1678
  $25 = $5 + 20 | 0; //@line 1679
  HEAP8[$21 + 3 >> 0] = 0; //@line 1680
  HEAP8[$25 >> 0] = 0; //@line 1682
  HEAP8[$25 + 1 >> 0] = 0; //@line 1684
  HEAP8[$25 + 2 >> 0] = 0; //@line 1686
  $29 = $5 + 24 | 0; //@line 1687
  HEAP8[$25 + 3 >> 0] = 0; //@line 1688
  HEAP8[$29 >> 0] = 0; //@line 1690
  HEAP8[$29 + 1 >> 0] = 0; //@line 1692
  HEAP8[$29 + 2 >> 0] = 0; //@line 1694
  $33 = $5 + 28 | 0; //@line 1695
  HEAP8[$29 + 3 >> 0] = 0; //@line 1696
  HEAP8[$33 >> 0] = 0; //@line 1698
  HEAP8[$33 + 1 >> 0] = 0; //@line 1700
  HEAP8[$33 + 2 >> 0] = 0; //@line 1702
  $37 = $5 + 32 | 0; //@line 1703
  HEAP8[$33 + 3 >> 0] = 0; //@line 1704
  HEAP8[$37 >> 0] = 0; //@line 1706
  HEAP8[$37 + 1 >> 0] = 0; //@line 1708
  HEAP8[$37 + 2 >> 0] = 0; //@line 1710
  $41 = $5 + 36 | 0; //@line 1711
  HEAP8[$37 + 3 >> 0] = 0; //@line 1712
  HEAP8[$41 >> 0] = 0; //@line 1714
  HEAP8[$41 + 1 >> 0] = 0; //@line 1716
  HEAP8[$41 + 2 >> 0] = 0; //@line 1718
  $45 = $5 + 40 | 0; //@line 1719
  HEAP8[$41 + 3 >> 0] = 0; //@line 1720
  HEAP8[$45 >> 0] = 0; //@line 1722
  HEAP8[$45 + 1 >> 0] = 0; //@line 1724
  HEAP8[$45 + 2 >> 0] = 0; //@line 1726
  $49 = $5 + 44 | 0; //@line 1727
  HEAP8[$45 + 3 >> 0] = 0; //@line 1728
  HEAP8[$49 >> 0] = 0; //@line 1730
  HEAP8[$49 + 1 >> 0] = 0; //@line 1732
  HEAP8[$49 + 2 >> 0] = 0; //@line 1734
  $53 = $5 + 48 | 0; //@line 1735
  HEAP8[$49 + 3 >> 0] = 0; //@line 1736
  HEAP8[$53 >> 0] = 0; //@line 1738
  HEAP8[$53 + 1 >> 0] = 0; //@line 1740
  HEAP8[$53 + 2 >> 0] = 0; //@line 1742
  $57 = $5 + 52 | 0; //@line 1743
  HEAP8[$53 + 3 >> 0] = 0; //@line 1744
  HEAP8[$57 >> 0] = 0; //@line 1746
  HEAP8[$57 + 1 >> 0] = 0; //@line 1748
  HEAP8[$57 + 2 >> 0] = 0; //@line 1750
  $61 = $5 + 56 | 0; //@line 1751
  HEAP8[$57 + 3 >> 0] = 0; //@line 1752
  HEAP8[$61 >> 0] = 0; //@line 1754
  HEAP8[$61 + 1 >> 0] = 0; //@line 1756
  HEAP8[$61 + 2 >> 0] = 0; //@line 1758
  $65 = $5 + 60 | 0; //@line 1759
  HEAP8[$61 + 3 >> 0] = 0; //@line 1760
  HEAP8[$65 >> 0] = 0; //@line 1762
  HEAP8[$65 + 1 >> 0] = 0; //@line 1764
  HEAP8[$65 + 2 >> 0] = 0; //@line 1766
  HEAP8[$65 + 3 >> 0] = 0; //@line 1767
  return;
 }
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 11655
 STACKTOP = STACKTOP + 224 | 0; //@line 11656
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 11656
 $3 = sp + 120 | 0; //@line 11657
 $4 = sp + 80 | 0; //@line 11658
 $5 = sp; //@line 11659
 $6 = sp + 136 | 0; //@line 11660
 dest = $4; //@line 11661
 stop = dest + 40 | 0; //@line 11661
 do {
  HEAP32[dest >> 2] = 0; //@line 11661
  dest = dest + 4 | 0; //@line 11661
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 11663
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 11667
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 11674
  } else {
   $43 = 0; //@line 11676
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 11678
  $14 = $13 & 32; //@line 11679
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 11685
  }
  $19 = $0 + 48 | 0; //@line 11687
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 11692
    $24 = HEAP32[$23 >> 2] | 0; //@line 11693
    HEAP32[$23 >> 2] = $6; //@line 11694
    $25 = $0 + 28 | 0; //@line 11695
    HEAP32[$25 >> 2] = $6; //@line 11696
    $26 = $0 + 20 | 0; //@line 11697
    HEAP32[$26 >> 2] = $6; //@line 11698
    HEAP32[$19 >> 2] = 80; //@line 11699
    $28 = $0 + 16 | 0; //@line 11701
    HEAP32[$28 >> 2] = $6 + 80; //@line 11702
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 11703
    if (!$24) {
     $$1 = $29; //@line 11706
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 11709
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 11710
     FUNCTION_TABLE_iiii[$32 & 15]($0, 0, 0) | 0; //@line 11711
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 782; //@line 11714
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 11716
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 11718
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 11720
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 11722
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 11724
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 11726
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 11728
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 11730
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 11732
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 11734
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 11736
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 11738
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 11740
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 11742
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 11744
      sp = STACKTOP; //@line 11745
      STACKTOP = sp; //@line 11746
      return 0; //@line 11746
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 11748
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 11751
      HEAP32[$23 >> 2] = $24; //@line 11752
      HEAP32[$19 >> 2] = 0; //@line 11753
      HEAP32[$28 >> 2] = 0; //@line 11754
      HEAP32[$25 >> 2] = 0; //@line 11755
      HEAP32[$26 >> 2] = 0; //@line 11756
      $$1 = $$; //@line 11757
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 11763
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 11766
  HEAP32[$0 >> 2] = $51 | $14; //@line 11771
  if ($43 | 0) {
   ___unlockfile($0); //@line 11774
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 11776
 }
 STACKTOP = sp; //@line 11778
 return $$0 | 0; //@line 11778
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_385($0) {
 $0 = $0 | 0;
 var $$ = 0, $$sink = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $30 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $6 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21380
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21384
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21386
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21388
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21390
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 21392
 $14 = HEAP8[$0 + 25 >> 0] | 0; //@line 21394
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 21396
 $18 = HEAP8[$0 + 27 >> 0] | 0; //@line 21398
 $20 = HEAP8[$0 + 28 >> 0] | 0; //@line 21400
 $22 = HEAP16[$0 + 30 >> 1] | 0; //@line 21402
 $24 = HEAP16[$0 + 32 >> 1] | 0; //@line 21404
 $26 = HEAP32[$0 + 36 >> 2] | 0; //@line 21406
 $30 = HEAP32[$0 + 44 >> 2] | 0; //@line 21410
 $34 = HEAP8[$0 + 52 >> 0] | 0; //@line 21414
 $36 = HEAP8[$0 + 53 >> 0] | 0; //@line 21416
 $38 = HEAP8[$0 + 54 >> 0] | 0; //@line 21418
 $40 = HEAP32[$0 + 56 >> 2] | 0; //@line 21420
 $44 = HEAP32[$0 + 64 >> 2] | 0; //@line 21424
 switch (HEAP32[$0 + 4 >> 2] | 0) {
 case 0:
  {
   HEAP32[$4 + 704 >> 2] = $6; //@line 21430
   HEAP32[$4 + 712 >> 2] = $8; //@line 21432
   HEAP32[$4 + 708 >> 2] = $10; //@line 21434
   HEAP8[$4 + 718 >> 0] = $12; //@line 21436
   HEAP8[$4 + 719 >> 0] = $14; //@line 21438
   HEAP8[$4 + 720 >> 0] = $16; //@line 21440
   HEAP8[$4 + 721 >> 0] = $18; //@line 21442
   HEAP8[$4 + 722 >> 0] = $20; //@line 21444
   HEAP16[$4 + 716 >> 1] = $22; //@line 21446
   HEAP32[$4 + 728 >> 2] = ~~(1.0 / +($8 >>> 0) * 8.0 * +($24 & 65535) * 1.0e3) >>> 0; //@line 21455
   _printf(10904, $26) | 0; //@line 21456
   _printf(11621, $30) | 0; //@line 21457
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 21458
   _putchar(10) | 0; //@line 21459
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 61; //@line 21462
    sp = STACKTOP; //@line 21463
    return;
   }
   ___async_unwind = 0; //@line 21466
   HEAP32[$ReallocAsyncCtx2 >> 2] = 61; //@line 21467
   sp = STACKTOP; //@line 21468
   return;
  }
 case 1:
  {
   if ($6 >>> 0 > 2) {
    while (1) {}
   }
   $65 = $6 + 7 | 0; //@line 21478
   HEAP32[$4 + 752 >> 2] = $65; //@line 21480
   HEAP32[$4 + 756 >> 2] = $8; //@line 21482
   HEAP8[$4 + 761 >> 0] = $34; //@line 21484
   HEAP16[$4 + 762 >> 1] = $22; //@line 21486
   HEAP8[$4 + 764 >> 0] = $12; //@line 21488
   HEAP8[$4 + 765 >> 0] = $14; //@line 21490
   HEAP8[$4 + 766 >> 0] = $16; //@line 21492
   HEAP8[$4 + 767 >> 0] = $36; //@line 21494
   HEAP8[$4 + 768 >> 0] = $38; //@line 21496
   HEAP8[$4 + 769 >> 0] = $18; //@line 21498
   HEAP8[$4 + 770 >> 0] = $20; //@line 21500
   $$ = $8 >>> 0 > 6 ? $8 : 6; //@line 21502
   if (($6 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 10; //@line 21510
   } else {
    if (($65 | 0) == 8 & $$ >>> 0 > 11) {
     label = 10; //@line 21516
    } else {
     $$sink = 0; //@line 21518
    }
   }
   if ((label | 0) == 10) {
    $$sink = 1; //@line 21522
   }
   HEAP8[$4 + 760 >> 0] = $$sink; //@line 21525
   _printf(10904, $40) | 0; //@line 21526
   _printf(11602, $44) | 0; //@line 21527
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 21528
   _putchar(10) | 0; //@line 21529
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 62; //@line 21532
    sp = STACKTOP; //@line 21533
    return;
   }
   ___async_unwind = 0; //@line 21536
   HEAP32[$ReallocAsyncCtx >> 2] = 62; //@line 21537
   sp = STACKTOP; //@line 21538
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_319($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $28 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 14233
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14235
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14237
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14239
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14241
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14243
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14245
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14247
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14249
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14251
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 14253
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 14261
 $33 = (HEAP8[$2 + 770 >> 0] | 0) == 0; //@line 14266
 _printf(10904, HEAP32[$0 + 48 >> 2] | 0) | 0; //@line 14267
 if ($33) {
  HEAP32[$20 >> 2] = 6; //@line 14269
  _printf(10970, $20) | 0; //@line 14270
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 14271
  _putchar(10) | 0; //@line 14272
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 81; //@line 14275
   $39 = $ReallocAsyncCtx8 + 4 | 0; //@line 14276
   HEAP32[$39 >> 2] = $2; //@line 14277
   $40 = $ReallocAsyncCtx8 + 8 | 0; //@line 14278
   HEAP32[$40 >> 2] = $12; //@line 14279
   $41 = $ReallocAsyncCtx8 + 12 | 0; //@line 14280
   HEAP32[$41 >> 2] = $14; //@line 14281
   $42 = $ReallocAsyncCtx8 + 16 | 0; //@line 14282
   HEAP32[$42 >> 2] = $16; //@line 14283
   $43 = $ReallocAsyncCtx8 + 20 | 0; //@line 14284
   HEAP32[$43 >> 2] = $18; //@line 14285
   sp = STACKTOP; //@line 14286
   return;
  }
  ___async_unwind = 0; //@line 14289
  HEAP32[$ReallocAsyncCtx8 >> 2] = 81; //@line 14290
  $39 = $ReallocAsyncCtx8 + 4 | 0; //@line 14291
  HEAP32[$39 >> 2] = $2; //@line 14292
  $40 = $ReallocAsyncCtx8 + 8 | 0; //@line 14293
  HEAP32[$40 >> 2] = $12; //@line 14294
  $41 = $ReallocAsyncCtx8 + 12 | 0; //@line 14295
  HEAP32[$41 >> 2] = $14; //@line 14296
  $42 = $ReallocAsyncCtx8 + 16 | 0; //@line 14297
  HEAP32[$42 >> 2] = $16; //@line 14298
  $43 = $ReallocAsyncCtx8 + 20 | 0; //@line 14299
  HEAP32[$43 >> 2] = $18; //@line 14300
  sp = STACKTOP; //@line 14301
  return;
 } else {
  HEAP32[$28 >> 2] = 5; //@line 14304
  _printf(10970, $28) | 0; //@line 14305
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 14306
  _putchar(10) | 0; //@line 14307
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 78; //@line 14310
   $34 = $ReallocAsyncCtx10 + 4 | 0; //@line 14311
   HEAP32[$34 >> 2] = $2; //@line 14312
   $35 = $ReallocAsyncCtx10 + 8 | 0; //@line 14313
   HEAP32[$35 >> 2] = $4; //@line 14314
   $36 = $ReallocAsyncCtx10 + 12 | 0; //@line 14315
   HEAP32[$36 >> 2] = $6; //@line 14316
   $37 = $ReallocAsyncCtx10 + 16 | 0; //@line 14317
   HEAP32[$37 >> 2] = $8; //@line 14318
   $38 = $ReallocAsyncCtx10 + 20 | 0; //@line 14319
   HEAP32[$38 >> 2] = $10; //@line 14320
   sp = STACKTOP; //@line 14321
   return;
  }
  ___async_unwind = 0; //@line 14324
  HEAP32[$ReallocAsyncCtx10 >> 2] = 78; //@line 14325
  $34 = $ReallocAsyncCtx10 + 4 | 0; //@line 14326
  HEAP32[$34 >> 2] = $2; //@line 14327
  $35 = $ReallocAsyncCtx10 + 8 | 0; //@line 14328
  HEAP32[$35 >> 2] = $4; //@line 14329
  $36 = $ReallocAsyncCtx10 + 12 | 0; //@line 14330
  HEAP32[$36 >> 2] = $6; //@line 14331
  $37 = $ReallocAsyncCtx10 + 16 | 0; //@line 14332
  HEAP32[$37 >> 2] = $8; //@line 14333
  $38 = $ReallocAsyncCtx10 + 20 | 0; //@line 14334
  HEAP32[$38 >> 2] = $10; //@line 14335
  sp = STACKTOP; //@line 14336
  return;
 }
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_58($0) {
 $0 = $0 | 0;
 var $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $29 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30334
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30340
 $14 = HEAP8[$0 + 19 >> 0] | 0; //@line 30350
 $16 = HEAP32[$0 + 20 >> 2] | 0; //@line 30352
 $18 = HEAP32[$0 + 24 >> 2] | 0; //@line 30354
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 30356
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 30358
 $29 = HEAP32[$6 >> 2] | 0; //@line 30365
 $32 = HEAP32[(HEAP32[$29 >> 2] | 0) + 20 >> 2] | 0; //@line 30368
 $34 = HEAP8[$0 + 17 >> 0] & 1 ? 2 : HEAP8[$0 + 16 >> 0] & 1; //@line 30370
 $35 = HEAP8[$0 + 18 >> 0] | 0; //@line 30371
 if ((HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) == (HEAPU8[(HEAP32[$0 + 8 >> 2] | 0) + 27 >> 0] | 0)) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 30374
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 0, $14, 25e3, $34, $35 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 30375
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 633; //@line 30378
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 30379
   HEAP32[$37 >> 2] = $6; //@line 30380
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 30381
   HEAP32[$38 >> 2] = $16; //@line 30382
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 30383
   HEAP32[$39 >> 2] = $18; //@line 30384
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 30385
   HEAP32[$40 >> 2] = $20; //@line 30386
   $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 30387
   HEAP32[$41 >> 2] = $22; //@line 30388
   sp = STACKTOP; //@line 30389
   return;
  }
  ___async_unwind = 0; //@line 30392
  HEAP32[$ReallocAsyncCtx3 >> 2] = 633; //@line 30393
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 30394
  HEAP32[$37 >> 2] = $6; //@line 30395
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 30396
  HEAP32[$38 >> 2] = $16; //@line 30397
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 30398
  HEAP32[$39 >> 2] = $18; //@line 30399
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 30400
  HEAP32[$40 >> 2] = $20; //@line 30401
  $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 30402
  HEAP32[$41 >> 2] = $22; //@line 30403
  sp = STACKTOP; //@line 30404
  return;
 } else {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 30407
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 1, $14, 0, $34, $35, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 30408
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 634; //@line 30411
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 30412
   HEAP32[$42 >> 2] = $6; //@line 30413
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 30414
   HEAP32[$43 >> 2] = $16; //@line 30415
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 30416
   HEAP32[$44 >> 2] = $18; //@line 30417
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 30418
   HEAP32[$45 >> 2] = $20; //@line 30419
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 30420
   HEAP32[$46 >> 2] = $22; //@line 30421
   sp = STACKTOP; //@line 30422
   return;
  }
  ___async_unwind = 0; //@line 30425
  HEAP32[$ReallocAsyncCtx4 >> 2] = 634; //@line 30426
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 30427
  HEAP32[$42 >> 2] = $6; //@line 30428
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 30429
  HEAP32[$43 >> 2] = $16; //@line 30430
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 30431
  HEAP32[$44 >> 2] = $18; //@line 30432
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 30433
  HEAP32[$45 >> 2] = $20; //@line 30434
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 30435
  HEAP32[$46 >> 2] = $22; //@line 30436
  sp = STACKTOP; //@line 30437
  return;
 }
}
function __ZN7LoRaMac11schedule_txEv__async_cb_369($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $24 = 0, $28 = 0, $36 = 0, $4 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 17900
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17904
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 17908
 $10 = HEAP8[$0 + 14 >> 0] | 0; //@line 17910
 $12 = HEAP32[$0 + 16 >> 2] | 0; //@line 17912
 $14 = HEAP32[$0 + 20 >> 2] | 0; //@line 17914
 $16 = HEAP32[$0 + 24 >> 2] | 0; //@line 17916
 $18 = HEAP32[$0 + 28 >> 2] | 0; //@line 17918
 $20 = HEAP32[$0 + 32 >> 2] | 0; //@line 17920
 $24 = HEAP32[$0 + 40 >> 2] | 0; //@line 17924
 $28 = HEAP32[$0 + 48 >> 2] | 0; //@line 17928
 $36 = ($10 & 255) + ($8 & 255) | 0; //@line 17936
 if (!($36 >>> 0 < 256 & $36 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0, HEAP8[$0 + 12 >> 0] | 0, (HEAP8[$4 + 369 >> 0] | 0) != 0) | 0) & 255) >>> 0)) {
  HEAP32[___async_retval >> 2] = -1010; //@line 17943
  return;
 }
 HEAP32[$4 + 972 >> 2] = (HEAP32[$4 + 1172 >> 2] | 0) + (HEAP32[$4 + 1112 >> 2] | 0); //@line 17952
 HEAP32[$4 + 976 >> 2] = (HEAP32[$4 + 1196 >> 2] | 0) + (HEAP32[$4 + 1116 >> 2] | 0); //@line 17959
 if (!(HEAP32[$16 >> 2] | 0)) {
  $54 = HEAP8[$18 >> 0] | 0; //@line 17963
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 17964
  __ZN7LoRaMac21send_frame_on_channelEh($4, $54) | 0; //@line 17965
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 498; //@line 17968
   $55 = $ReallocAsyncCtx10 + 4 | 0; //@line 17969
   HEAP32[$55 >> 2] = $12; //@line 17970
   $56 = $ReallocAsyncCtx10 + 8 | 0; //@line 17971
   HEAP32[$56 >> 2] = $14; //@line 17972
   sp = STACKTOP; //@line 17973
   return;
  }
  ___async_unwind = 0; //@line 17976
  HEAP32[$ReallocAsyncCtx10 >> 2] = 498; //@line 17977
  $55 = $ReallocAsyncCtx10 + 4 | 0; //@line 17978
  HEAP32[$55 >> 2] = $12; //@line 17979
  $56 = $ReallocAsyncCtx10 + 8 | 0; //@line 17980
  HEAP32[$56 >> 2] = $14; //@line 17981
  sp = STACKTOP; //@line 17982
  return;
 } else {
  $57 = $4 + 968 | 0; //@line 17985
  HEAP32[$57 >> 2] = HEAP32[$57 >> 2] | 16; //@line 17988
  _printf(13544, $20) | 0; //@line 17989
  HEAP32[$24 >> 2] = HEAP32[$16 >> 2]; //@line 17991
  _printf(13608, $24) | 0; //@line 17992
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 17993
  _putchar(10) | 0; //@line 17994
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 499; //@line 17997
   $61 = $ReallocAsyncCtx6 + 4 | 0; //@line 17998
   HEAP32[$61 >> 2] = $28; //@line 17999
   $62 = $ReallocAsyncCtx6 + 8 | 0; //@line 18000
   HEAP32[$62 >> 2] = $4; //@line 18001
   $63 = $ReallocAsyncCtx6 + 12 | 0; //@line 18002
   HEAP32[$63 >> 2] = $16; //@line 18003
   $64 = $ReallocAsyncCtx6 + 16 | 0; //@line 18004
   HEAP32[$64 >> 2] = $12; //@line 18005
   $65 = $ReallocAsyncCtx6 + 20 | 0; //@line 18006
   HEAP32[$65 >> 2] = $14; //@line 18007
   sp = STACKTOP; //@line 18008
   return;
  }
  ___async_unwind = 0; //@line 18011
  HEAP32[$ReallocAsyncCtx6 >> 2] = 499; //@line 18012
  $61 = $ReallocAsyncCtx6 + 4 | 0; //@line 18013
  HEAP32[$61 >> 2] = $28; //@line 18014
  $62 = $ReallocAsyncCtx6 + 8 | 0; //@line 18015
  HEAP32[$62 >> 2] = $4; //@line 18016
  $63 = $ReallocAsyncCtx6 + 12 | 0; //@line 18017
  HEAP32[$63 >> 2] = $16; //@line 18018
  $64 = $ReallocAsyncCtx6 + 16 | 0; //@line 18019
  HEAP32[$64 >> 2] = $12; //@line 18020
  $65 = $ReallocAsyncCtx6 + 20 | 0; //@line 18021
  HEAP32[$65 >> 2] = $14; //@line 18022
  sp = STACKTOP; //@line 18023
  return;
 }
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb($0) {
 $0 = $0 | 0;
 var $$1 = 0, $13 = 0, $19 = 0, $2 = 0, $21 = 0, $25 = 0, $29 = 0, $33 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2763
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2765
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2767
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2769
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2771
 if (HEAP32[$2 + 968 >> 2] | 0) {
  $$1 = -1e3; //@line 2776
  $46 = ___async_retval; //@line 2777
  HEAP32[$46 >> 2] = $$1; //@line 2778
  return;
 }
 $13 = HEAP8[$4 + 5 >> 0] | 0; //@line 2782
 if ($13 << 24 >> 24 > (__ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$2 >> 2] | 0) | 0) << 24 >> 24) {
  $29 = $13; //@line 2787
 } else {
  $29 = __ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$2 >> 2] | 0) | 0; //@line 2791
 }
 HEAP8[$8 >> 0] = 0; //@line 2793
 $19 = $2 + 288 | 0; //@line 2794
 __ZN11LoRaMacMcps18reset_confirmationEv($19); //@line 2795
 HEAP8[$2 + 895 >> 0] = 1; //@line 2797
 $21 = $2 + 894 | 0; //@line 2798
 HEAP8[$21 >> 0] = 1; //@line 2799
 switch (HEAP32[$4 >> 2] | 0) {
 case 0:
  {
   HEAP8[$8 >> 0] = 64; //@line 2803
   label = 9; //@line 2804
   break;
  }
 case 1:
  {
   HEAP8[$8 >> 0] = -128; //@line 2808
   HEAP8[$21 >> 0] = HEAP8[$4 + 6 >> 0] | 0; //@line 2811
   label = 9; //@line 2812
   break;
  }
 case 3:
  {
   HEAP8[$8 >> 0] = -32; //@line 2816
   label = 9; //@line 2817
   break;
  }
 default:
  {}
 }
 do {
  if ((label | 0) == 9) {
   $25 = $2 + 1156 | 0; //@line 2825
   if (!(HEAP8[$25 >> 0] | 0)) {
    if (!(__ZN7LoRaPHY18verify_tx_datarateEhb(HEAP32[$2 >> 2] | 0, $29, 0) | 0)) {
     break;
    }
    HEAP8[$2 + 1097 >> 0] = $29; //@line 2835
    $38 = HEAP8[$25 >> 0] << 7 & 255; //@line 2838
   } else {
    $38 = -128; //@line 2840
   }
   $33 = HEAP8[$4 + 4 >> 0] | 0; //@line 2843
   $35 = HEAP32[$4 + 8 >> 2] | 0; //@line 2845
   $37 = HEAP16[$4 + 12 >> 1] | 0; //@line 2847
   HEAP8[$6 >> 0] = $38; //@line 2848
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 2849
   $39 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($2, $8, $6, $33, $35, $37) | 0; //@line 2850
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 563; //@line 2853
    $40 = $ReallocAsyncCtx2 + 4 | 0; //@line 2854
    HEAP32[$40 >> 2] = $19; //@line 2855
    $41 = $ReallocAsyncCtx2 + 8 | 0; //@line 2856
    HEAP32[$41 >> 2] = $2; //@line 2857
    $42 = $ReallocAsyncCtx2 + 12 | 0; //@line 2858
    HEAP32[$42 >> 2] = $6; //@line 2859
    $43 = $ReallocAsyncCtx2 + 16 | 0; //@line 2860
    HEAP32[$43 >> 2] = $8; //@line 2861
    $44 = $ReallocAsyncCtx2 + 20 | 0; //@line 2862
    HEAP32[$44 >> 2] = $4; //@line 2863
    sp = STACKTOP; //@line 2864
    return;
   }
   HEAP32[___async_retval >> 2] = $39; //@line 2868
   ___async_unwind = 0; //@line 2869
   HEAP32[$ReallocAsyncCtx2 >> 2] = 563; //@line 2870
   $40 = $ReallocAsyncCtx2 + 4 | 0; //@line 2871
   HEAP32[$40 >> 2] = $19; //@line 2872
   $41 = $ReallocAsyncCtx2 + 8 | 0; //@line 2873
   HEAP32[$41 >> 2] = $2; //@line 2874
   $42 = $ReallocAsyncCtx2 + 12 | 0; //@line 2875
   HEAP32[$42 >> 2] = $6; //@line 2876
   $43 = $ReallocAsyncCtx2 + 16 | 0; //@line 2877
   HEAP32[$43 >> 2] = $8; //@line 2878
   $44 = $ReallocAsyncCtx2 + 20 | 0; //@line 2879
   HEAP32[$44 >> 2] = $4; //@line 2880
   sp = STACKTOP; //@line 2881
   return;
  }
 } while (0);
 $$1 = -1003; //@line 2885
 $46 = ___async_retval; //@line 2886
 HEAP32[$46 >> 2] = $$1; //@line 2887
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_403($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 22920
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22922
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22924
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22926
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22928
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22930
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22934
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22938
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22942
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22946
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22948
 switch ($AsyncRetVal | 0) {
 case 0:
  {
   HEAP32[$2 >> 2] = 6; //@line 22951
   HEAP32[___async_retval >> 2] = 0; //@line 22953
   return;
  }
 case -1014:
  {
   _printf(12178, $18) | 0; //@line 22958
   _printf(12465, $22) | 0; //@line 22959
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 22960
   _putchar(10) | 0; //@line 22961
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 266; //@line 22964
    $28 = $ReallocAsyncCtx12 + 4 | 0; //@line 22965
    HEAP32[$28 >> 2] = $6; //@line 22966
    $29 = $ReallocAsyncCtx12 + 8 | 0; //@line 22967
    HEAP32[$29 >> 2] = $2; //@line 22968
    $30 = $ReallocAsyncCtx12 + 12 | 0; //@line 22969
    HEAP32[$30 >> 2] = $26; //@line 22970
    $31 = $ReallocAsyncCtx12 + 16 | 0; //@line 22971
    HEAP32[$31 >> 2] = $4; //@line 22972
    sp = STACKTOP; //@line 22973
    return;
   }
   ___async_unwind = 0; //@line 22976
   HEAP32[$ReallocAsyncCtx12 >> 2] = 266; //@line 22977
   $28 = $ReallocAsyncCtx12 + 4 | 0; //@line 22978
   HEAP32[$28 >> 2] = $6; //@line 22979
   $29 = $ReallocAsyncCtx12 + 8 | 0; //@line 22980
   HEAP32[$29 >> 2] = $2; //@line 22981
   $30 = $ReallocAsyncCtx12 + 12 | 0; //@line 22982
   HEAP32[$30 >> 2] = $26; //@line 22983
   $31 = $ReallocAsyncCtx12 + 16 | 0; //@line 22984
   HEAP32[$31 >> 2] = $4; //@line 22985
   sp = STACKTOP; //@line 22986
   return;
  }
 default:
  {
   _printf(12178, $10) | 0; //@line 22991
   _printf(12500, $14) | 0; //@line 22992
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(24) | 0; //@line 22993
   _putchar(10) | 0; //@line 22994
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 271; //@line 22997
    $32 = $ReallocAsyncCtx11 + 4 | 0; //@line 22998
    HEAP32[$32 >> 2] = $6; //@line 22999
    $33 = $ReallocAsyncCtx11 + 8 | 0; //@line 23000
    HEAP32[$33 >> 2] = $AsyncRetVal; //@line 23001
    $34 = $ReallocAsyncCtx11 + 12 | 0; //@line 23002
    HEAP32[$34 >> 2] = $2; //@line 23003
    $35 = $ReallocAsyncCtx11 + 16 | 0; //@line 23004
    HEAP32[$35 >> 2] = $8; //@line 23005
    $36 = $ReallocAsyncCtx11 + 20 | 0; //@line 23006
    HEAP32[$36 >> 2] = $4; //@line 23007
    sp = STACKTOP; //@line 23008
    return;
   }
   ___async_unwind = 0; //@line 23011
   HEAP32[$ReallocAsyncCtx11 >> 2] = 271; //@line 23012
   $32 = $ReallocAsyncCtx11 + 4 | 0; //@line 23013
   HEAP32[$32 >> 2] = $6; //@line 23014
   $33 = $ReallocAsyncCtx11 + 8 | 0; //@line 23015
   HEAP32[$33 >> 2] = $AsyncRetVal; //@line 23016
   $34 = $ReallocAsyncCtx11 + 12 | 0; //@line 23017
   HEAP32[$34 >> 2] = $2; //@line 23018
   $35 = $ReallocAsyncCtx11 + 16 | 0; //@line 23019
   HEAP32[$35 >> 2] = $8; //@line 23020
   $36 = $ReallocAsyncCtx11 + 20 | 0; //@line 23021
   HEAP32[$36 >> 2] = $4; //@line 23022
   sp = STACKTOP; //@line 23023
   return;
  }
 }
}
function __ZN7LoRaMac10disconnectEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $29 = 0, $30 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18395
 $1 = $0 + 356 | 0; //@line 18396
 $2 = HEAP32[$1 >> 2] | 0; //@line 18397
 $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18399
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $0 + 996 | 0); //@line 18400
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 543; //@line 18403
  HEAP32[$AsyncCtx19 + 4 >> 2] = $1; //@line 18405
  HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 18407
  sp = STACKTOP; //@line 18408
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 18411
 $6 = HEAP32[$1 >> 2] | 0; //@line 18412
 $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18414
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($6, $0 + 1016 | 0); //@line 18415
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 544; //@line 18418
  HEAP32[$AsyncCtx15 + 4 >> 2] = $1; //@line 18420
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 18422
  sp = STACKTOP; //@line 18423
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 18426
 $10 = HEAP32[$1 >> 2] | 0; //@line 18427
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18429
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($10, $0 + 1036 | 0); //@line 18430
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 545; //@line 18433
  HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 18435
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 18437
  sp = STACKTOP; //@line 18438
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 18441
 $14 = HEAP32[$1 >> 2] | 0; //@line 18442
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18444
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($14, $0 + 1056 | 0); //@line 18445
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 546; //@line 18448
  HEAP32[$AsyncCtx7 + 4 >> 2] = $1; //@line 18450
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 18452
  sp = STACKTOP; //@line 18453
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 18456
 $18 = HEAP32[$1 >> 2] | 0; //@line 18457
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18459
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($18, $0 + 1076 | 0); //@line 18460
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 547; //@line 18463
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 18465
  sp = STACKTOP; //@line 18466
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18469
 $21 = HEAP32[$0 >> 2] | 0; //@line 18470
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 18471
 __ZN7LoRaPHY18put_radio_to_sleepEv($21); //@line 18472
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 548; //@line 18475
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 18477
  sp = STACKTOP; //@line 18478
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18481
  HEAP8[$0 + 372 >> 0] = 0; //@line 18483
  HEAP8[$0 + 377 >> 0] = 0; //@line 18485
  HEAP8[$0 + 371 >> 0] = 1; //@line 18487
  HEAP8[$0 + 373 >> 0] = 0; //@line 18489
  HEAP8[$0 + 374 >> 0] = 0; //@line 18491
  HEAP8[$0 + 944 >> 0] = 0; //@line 18493
  $29 = $0 + 968 | 0; //@line 18494
  HEAP32[$29 >> 2] = 0; //@line 18495
  $30 = $0 + 4 | 0; //@line 18496
  __ZN14LoRaMacCommand20clear_command_bufferEv($30); //@line 18497
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($30); //@line 18498
  __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($30); //@line 18499
  HEAP32[$29 >> 2] = 0; //@line 18500
  return;
 }
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 15292
 STACKTOP = STACKTOP + 64 | 0; //@line 15293
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 15293
 $4 = sp; //@line 15294
 $5 = HEAP32[$0 >> 2] | 0; //@line 15295
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 15298
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 15300
 HEAP32[$4 >> 2] = $2; //@line 15301
 HEAP32[$4 + 4 >> 2] = $0; //@line 15303
 HEAP32[$4 + 8 >> 2] = $1; //@line 15305
 HEAP32[$4 + 12 >> 2] = $3; //@line 15307
 $14 = $4 + 16 | 0; //@line 15308
 $15 = $4 + 20 | 0; //@line 15309
 $16 = $4 + 24 | 0; //@line 15310
 $17 = $4 + 28 | 0; //@line 15311
 $18 = $4 + 32 | 0; //@line 15312
 $19 = $4 + 40 | 0; //@line 15313
 dest = $14; //@line 15314
 stop = dest + 36 | 0; //@line 15314
 do {
  HEAP32[dest >> 2] = 0; //@line 15314
  dest = dest + 4 | 0; //@line 15314
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 15314
 HEAP8[$14 + 38 >> 0] = 0; //@line 15314
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 15319
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 15322
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 15323
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 15324
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 797; //@line 15327
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 15329
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 15331
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 15333
    sp = STACKTOP; //@line 15334
    STACKTOP = sp; //@line 15335
    return 0; //@line 15335
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15337
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 15341
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 15345
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 15348
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 15349
   FUNCTION_TABLE_viiiii[$33 & 7]($10, $4, $8, 1, 0); //@line 15350
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 798; //@line 15353
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 15355
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 15357
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 15359
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 15361
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 15363
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 15365
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 15367
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 15369
    sp = STACKTOP; //@line 15370
    STACKTOP = sp; //@line 15371
    return 0; //@line 15371
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15373
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 15387
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 15395
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 15411
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 15416
  }
 } while (0);
 STACKTOP = sp; //@line 15419
 return $$0 | 0; //@line 15419
}
function _main__async_cb_133($0) {
 $0 = $0 | 0;
 var $$pr = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 37290
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37292
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37294
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 37296
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 37298
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 37300
 $$pr = HEAP32[$4 >> 2] | 0; //@line 37301
 if ($$pr | 0) {
  $13 = HEAP32[$$pr + 4 >> 2] | 0; //@line 37305
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 37306
  FUNCTION_TABLE_vii[$13 & 31](23536, $2); //@line 37307
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 759; //@line 37310
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 37311
   HEAP32[$14 >> 2] = $2; //@line 37312
   $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 37313
   HEAP32[$15 >> 2] = $4; //@line 37314
   $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 37315
   HEAP32[$16 >> 2] = $6; //@line 37316
   $17 = $ReallocAsyncCtx3 + 16 | 0; //@line 37317
   HEAP32[$17 >> 2] = $8; //@line 37318
   $18 = $ReallocAsyncCtx3 + 20 | 0; //@line 37319
   HEAP32[$18 >> 2] = $10; //@line 37320
   sp = STACKTOP; //@line 37321
   return;
  }
  ___async_unwind = 0; //@line 37324
  HEAP32[$ReallocAsyncCtx3 >> 2] = 759; //@line 37325
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 37326
  HEAP32[$14 >> 2] = $2; //@line 37327
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 37328
  HEAP32[$15 >> 2] = $4; //@line 37329
  $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 37330
  HEAP32[$16 >> 2] = $6; //@line 37331
  $17 = $ReallocAsyncCtx3 + 16 | 0; //@line 37332
  HEAP32[$17 >> 2] = $8; //@line 37333
  $18 = $ReallocAsyncCtx3 + 20 | 0; //@line 37334
  HEAP32[$18 >> 2] = $10; //@line 37335
  sp = STACKTOP; //@line 37336
  return;
 }
 HEAP32[5887] = 0; //@line 37339
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(23528, 23536) | 0; //@line 37340
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(23528) | 0) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 37344
  _puts(15731) | 0; //@line 37345
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 761; //@line 37348
   sp = STACKTOP; //@line 37349
   return;
  }
  ___async_unwind = 0; //@line 37352
  HEAP32[$ReallocAsyncCtx6 >> 2] = 761; //@line 37353
  sp = STACKTOP; //@line 37354
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(23528, 5) | 0; //@line 37357
 HEAP8[$10 >> 0] = 0; //@line 37358
 HEAP32[$10 + 4 >> 2] = 15592; //@line 37360
 HEAP32[$10 + 8 >> 2] = 15765; //@line 37362
 HEAP32[$10 + 12 >> 2] = 15773; //@line 37364
 HEAP8[$10 + 16 >> 0] = 3; //@line 37366
 $25 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(23528, $10) | 0; //@line 37367
 switch ($25 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$6 >> 2] = $25; //@line 37373
   _printf(15789, $6) | 0; //@line 37374
   HEAP32[___async_retval >> 2] = -1; //@line 37376
   return;
  }
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 37380
 _puts(15818) | 0; //@line 37381
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 762; //@line 37384
  $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 37385
  HEAP32[$26 >> 2] = $10; //@line 37386
  sp = STACKTOP; //@line 37387
  return;
 }
 ___async_unwind = 0; //@line 37390
 HEAP32[$ReallocAsyncCtx5 >> 2] = 762; //@line 37391
 $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 37392
 HEAP32[$26 >> 2] = $10; //@line 37393
 sp = STACKTOP; //@line 37394
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_472($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $35 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 34619
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34621
 $4 = HEAP32[$2 + 76 >> 2] | 0; //@line 34623
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 34628
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 34629
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 64 | 0); //@line 34630
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 350; //@line 34633
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 34634
   HEAP32[$9 >> 2] = $2; //@line 34635
   sp = STACKTOP; //@line 34636
   return;
  }
  ___async_unwind = 0; //@line 34639
  HEAP32[$ReallocAsyncCtx3 >> 2] = 350; //@line 34640
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 34641
  HEAP32[$9 >> 2] = $2; //@line 34642
  sp = STACKTOP; //@line 34643
  return;
 }
 $11 = HEAP32[$2 + 60 >> 2] | 0; //@line 34647
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 34652
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 34653
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 48 | 0); //@line 34654
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 351; //@line 34657
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 34658
   HEAP32[$16 >> 2] = $2; //@line 34659
   sp = STACKTOP; //@line 34660
   return;
  }
  ___async_unwind = 0; //@line 34663
  HEAP32[$ReallocAsyncCtx4 >> 2] = 351; //@line 34664
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 34665
  HEAP32[$16 >> 2] = $2; //@line 34666
  sp = STACKTOP; //@line 34667
  return;
 }
 $18 = HEAP32[$2 + 44 >> 2] | 0; //@line 34671
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 34676
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 34677
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 32 | 0); //@line 34678
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 34681
   $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 34682
   HEAP32[$23 >> 2] = $2; //@line 34683
   sp = STACKTOP; //@line 34684
   return;
  }
  ___async_unwind = 0; //@line 34687
  HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 34688
  $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 34689
  HEAP32[$23 >> 2] = $2; //@line 34690
  sp = STACKTOP; //@line 34691
  return;
 }
 $25 = HEAP32[$2 + 28 >> 2] | 0; //@line 34695
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 34700
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 34701
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 16 | 0); //@line 34702
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 353; //@line 34705
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 34706
   HEAP32[$30 >> 2] = $2; //@line 34707
   sp = STACKTOP; //@line 34708
   return;
  }
  ___async_unwind = 0; //@line 34711
  HEAP32[$ReallocAsyncCtx6 >> 2] = 353; //@line 34712
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 34713
  HEAP32[$30 >> 2] = $2; //@line 34714
  sp = STACKTOP; //@line 34715
  return;
 }
 $32 = HEAP32[$2 + 12 >> 2] | 0; //@line 34719
 if (!$32) {
  return;
 }
 $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 34725
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 34726
 FUNCTION_TABLE_vi[$35 & 1023]($2); //@line 34727
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 354; //@line 34730
  sp = STACKTOP; //@line 34731
  return;
 }
 ___async_unwind = 0; //@line 34734
 HEAP32[$ReallocAsyncCtx7 >> 2] = 354; //@line 34735
 sp = STACKTOP; //@line 34736
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_93($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $17 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $4 = 0, $46 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 35252
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35256
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35258
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 35260
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35262
 $trunc = HEAP8[$0 + 24 >> 0] | 0; //@line 35264
 $13 = HEAP32[$0 + 28 >> 2] | 0; //@line 35266
 $17 = HEAP32[$0 + 36 >> 2] | 0; //@line 35270
 $21 = HEAP32[$0 + 44 >> 2] | 0; //@line 35274
 $23 = HEAP32[$0 + 48 >> 2] | 0; //@line 35276
 $25 = HEAP32[$0 + 52 >> 2] | 0; //@line 35278
 $27 = HEAP32[$0 + 56 >> 2] | 0; //@line 35280
 $29 = HEAP32[$0 + 60 >> 2] | 0; //@line 35282
 $31 = HEAP32[$0 + 64 >> 2] | 0; //@line 35284
 HEAP16[$6 + 2232 >> 1] = (HEAP32[$0 + 4 >> 2] | 0) - $4; //@line 35288
 HEAP16[$6 + 2230 >> 1] = $8; //@line 35290
 _memcpy($6 + 1975 | 0, $10 | 0, $4 | 0) | 0; //@line 35292
 switch ($trunc & 15) {
 case 9:
 case 5:
 case 1:
  {
   HEAP32[$6 + 1968 >> 2] = 0; //@line 35297
   HEAP8[$6 + 1972 >> 0] = HEAP8[$21 >> 0] | 0; //@line 35300
   switch ($trunc & 15) {
   case 6:
   case 2:
    {
     label = 5; //@line 35304
     break;
    }
   default:
    {}
   }
   break;
  }
 case 10:
 case 6:
 case 2:
  {
   label = 5; //@line 35313
   break;
  }
 default:
  {}
 }
 if ((label | 0) == 5) {
  HEAP32[$6 + 1968 >> 2] = 1; //@line 35321
  HEAP8[$6 + 1972 >> 0] = HEAP8[$21 >> 0] | 0; //@line 35324
  HEAP8[$6 + 1974 >> 0] = HEAP8[$6 + 2284 >> 0] | 0; //@line 35328
 }
 _printf(12430, $13) | 0; //@line 35330
 $46 = $6 + 2230 | 0; //@line 35331
 $51 = HEAPU16[$6 + 2232 >> 1] | 0; //@line 35336
 HEAP32[$17 >> 2] = HEAPU16[$46 >> 1]; //@line 35337
 HEAP32[$17 + 4 >> 2] = $51; //@line 35339
 _printf(12819, $17) | 0; //@line 35340
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 35341
 _putchar(10) | 0; //@line 35342
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 310; //@line 35345
  $52 = $ReallocAsyncCtx2 + 4 | 0; //@line 35346
  HEAP32[$52 >> 2] = $6; //@line 35347
  $53 = $ReallocAsyncCtx2 + 8 | 0; //@line 35348
  HEAP32[$53 >> 2] = $23; //@line 35349
  $54 = $ReallocAsyncCtx2 + 12 | 0; //@line 35350
  HEAP32[$54 >> 2] = $25; //@line 35351
  $55 = $ReallocAsyncCtx2 + 16 | 0; //@line 35352
  HEAP32[$55 >> 2] = $27; //@line 35353
  $56 = $ReallocAsyncCtx2 + 20 | 0; //@line 35354
  HEAP32[$56 >> 2] = $29; //@line 35355
  $57 = $ReallocAsyncCtx2 + 24 | 0; //@line 35356
  HEAP32[$57 >> 2] = $46; //@line 35357
  $58 = $ReallocAsyncCtx2 + 28 | 0; //@line 35358
  HEAP32[$58 >> 2] = $31; //@line 35359
  sp = STACKTOP; //@line 35360
  return;
 }
 ___async_unwind = 0; //@line 35363
 HEAP32[$ReallocAsyncCtx2 >> 2] = 310; //@line 35364
 $52 = $ReallocAsyncCtx2 + 4 | 0; //@line 35365
 HEAP32[$52 >> 2] = $6; //@line 35366
 $53 = $ReallocAsyncCtx2 + 8 | 0; //@line 35367
 HEAP32[$53 >> 2] = $23; //@line 35368
 $54 = $ReallocAsyncCtx2 + 12 | 0; //@line 35369
 HEAP32[$54 >> 2] = $25; //@line 35370
 $55 = $ReallocAsyncCtx2 + 16 | 0; //@line 35371
 HEAP32[$55 >> 2] = $27; //@line 35372
 $56 = $ReallocAsyncCtx2 + 20 | 0; //@line 35373
 HEAP32[$56 >> 2] = $29; //@line 35374
 $57 = $ReallocAsyncCtx2 + 24 | 0; //@line 35375
 HEAP32[$57 >> 2] = $46; //@line 35376
 $58 = $ReallocAsyncCtx2 + 28 | 0; //@line 35377
 HEAP32[$58 >> 2] = $31; //@line 35378
 sp = STACKTOP; //@line 35379
 return;
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_446($0) {
 $0 = $0 | 0;
 var $$ = 0, $$sink = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $28 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 32204
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32208
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 32210
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32212
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32214
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32216
 $14 = HEAP16[$0 + 28 >> 1] | 0; //@line 32218
 $16 = HEAP8[$0 + 30 >> 0] | 0; //@line 32220
 $18 = HEAP8[$0 + 31 >> 0] | 0; //@line 32222
 $20 = HEAP8[$0 + 32 >> 0] | 0; //@line 32224
 $22 = HEAP32[$0 + 36 >> 2] | 0; //@line 32226
 $24 = HEAP32[$0 + 40 >> 2] | 0; //@line 32228
 $28 = HEAP32[$0 + 48 >> 2] | 0; //@line 32232
 $32 = HEAP8[$0 + 56 >> 0] | 0; //@line 32236
 $34 = HEAP8[$0 + 57 >> 0] | 0; //@line 32238
 $36 = HEAP8[$0 + 58 >> 0] | 0; //@line 32240
 $38 = HEAP32[$0 + 60 >> 2] | 0; //@line 32242
 $42 = HEAP32[$0 + 68 >> 2] | 0; //@line 32246
 switch (HEAP32[$0 + 4 >> 2] | 0) {
 case 0:
  {
   HEAP8[$4 + 696 >> 0] = $6; //@line 32252
   HEAP32[$4 + 700 >> 2] = $8; //@line 32254
   HEAP32[$4 + 704 >> 2] = $10; //@line 32256
   HEAP32[$4 + 712 >> 2] = $12; //@line 32258
   HEAP16[$4 + 716 >> 1] = $14; //@line 32260
   HEAP8[$4 + 718 >> 0] = $16; //@line 32262
   HEAP8[$4 + 720 >> 0] = $18; //@line 32264
   HEAP8[$4 + 721 >> 0] = $20; //@line 32266
   HEAP32[$4 + 724 >> 2] = $22; //@line 32268
   _printf(10904, $24) | 0; //@line 32269
   _printf(11584, $28) | 0; //@line 32270
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 32271
   _putchar(10) | 0; //@line 32272
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 65; //@line 32275
    sp = STACKTOP; //@line 32276
    return;
   }
   ___async_unwind = 0; //@line 32279
   HEAP32[$ReallocAsyncCtx2 >> 2] = 65; //@line 32280
   sp = STACKTOP; //@line 32281
   return;
  }
 case 1:
  {
   HEAP8[$4 + 748 >> 0] = $6; //@line 32287
   if ($10 >>> 0 > 2) {
    while (1) {}
   }
   $56 = $10 + 7 | 0; //@line 32293
   HEAP32[$4 + 752 >> 2] = $56; //@line 32295
   HEAP32[$4 + 756 >> 2] = $12; //@line 32297
   HEAP8[$4 + 761 >> 0] = $32; //@line 32299
   HEAP16[$4 + 762 >> 1] = $14; //@line 32301
   HEAP8[$4 + 764 >> 0] = $16; //@line 32303
   HEAP8[$4 + 767 >> 0] = $34; //@line 32305
   HEAP8[$4 + 768 >> 0] = $36; //@line 32307
   HEAP8[$4 + 766 >> 0] = $18; //@line 32309
   HEAP8[$4 + 769 >> 0] = $20; //@line 32311
   HEAP32[$4 + 772 >> 2] = $22; //@line 32313
   $$ = $12 >>> 0 > 6 ? $12 : 6; //@line 32315
   if (($10 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 10; //@line 32323
   } else {
    if (($56 | 0) == 8 & $$ >>> 0 > 11) {
     label = 10; //@line 32329
    } else {
     $$sink = 0; //@line 32331
    }
   }
   if ((label | 0) == 10) {
    $$sink = 1; //@line 32335
   }
   HEAP8[$4 + 760 >> 0] = $$sink; //@line 32338
   _printf(10904, $38) | 0; //@line 32339
   _printf(11602, $42) | 0; //@line 32340
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 32341
   _putchar(10) | 0; //@line 32342
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 66; //@line 32345
    sp = STACKTOP; //@line 32346
    return;
   }
   ___async_unwind = 0; //@line 32349
   HEAP32[$ReallocAsyncCtx >> 2] = 66; //@line 32350
   sp = STACKTOP; //@line 32351
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadio7standbyEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 186
 STACKTOP = STACKTOP + 48 | 0; //@line 187
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 187
 $vararg_buffer9 = sp + 40 | 0; //@line 188
 $vararg_buffer7 = sp + 32 | 0; //@line 189
 $vararg_buffer5 = sp + 24 | 0; //@line 190
 $vararg_buffer3 = sp + 16 | 0; //@line 191
 _printf(10904, sp) | 0; //@line 194
 _printf(11639, sp + 8 | 0) | 0; //@line 195
 $AsyncCtx18 = _emscripten_alloc_async_context(40, sp) | 0; //@line 196
 _putchar(10) | 0; //@line 197
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 56; //@line 200
  HEAP32[$AsyncCtx18 + 4 >> 2] = $0; //@line 202
  HEAP32[$AsyncCtx18 + 8 >> 2] = $vararg_buffer3; //@line 204
  HEAP32[$AsyncCtx18 + 12 >> 2] = $vararg_buffer3; //@line 206
  HEAP32[$AsyncCtx18 + 16 >> 2] = $vararg_buffer5; //@line 208
  HEAP32[$AsyncCtx18 + 20 >> 2] = $vararg_buffer5; //@line 210
  HEAP32[$AsyncCtx18 + 24 >> 2] = $vararg_buffer7; //@line 212
  HEAP32[$AsyncCtx18 + 28 >> 2] = $vararg_buffer7; //@line 214
  HEAP32[$AsyncCtx18 + 32 >> 2] = $vararg_buffer9; //@line 216
  HEAP32[$AsyncCtx18 + 36 >> 2] = $vararg_buffer9; //@line 218
  sp = STACKTOP; //@line 219
  STACKTOP = sp; //@line 220
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 222
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 224
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 226
 _printf(10904, $vararg_buffer3) | 0; //@line 227
 HEAP32[$vararg_buffer5 >> 2] = 1; //@line 228
 _printf(10970, $vararg_buffer5) | 0; //@line 229
 $AsyncCtx14 = _emscripten_alloc_async_context(24, sp) | 0; //@line 230
 _putchar(10) | 0; //@line 231
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 57; //@line 234
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 236
  HEAP32[$AsyncCtx14 + 8 >> 2] = $vararg_buffer7; //@line 238
  HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer7; //@line 240
  HEAP32[$AsyncCtx14 + 16 >> 2] = $vararg_buffer9; //@line 242
  HEAP32[$AsyncCtx14 + 20 >> 2] = $vararg_buffer9; //@line 244
  sp = STACKTOP; //@line 245
  STACKTOP = sp; //@line 246
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 248
 $AsyncCtx21 = _emscripten_alloc_async_context(24, sp) | 0; //@line 249
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 250
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 58; //@line 253
  HEAP32[$AsyncCtx21 + 4 >> 2] = $vararg_buffer7; //@line 255
  HEAP32[$AsyncCtx21 + 8 >> 2] = $vararg_buffer7; //@line 257
  HEAP32[$AsyncCtx21 + 12 >> 2] = $vararg_buffer9; //@line 259
  HEAP32[$AsyncCtx21 + 16 >> 2] = $vararg_buffer9; //@line 261
  HEAP32[$AsyncCtx21 + 20 >> 2] = $0; //@line 263
  sp = STACKTOP; //@line 264
  STACKTOP = sp; //@line 265
  return;
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 267
 _printf(10904, $vararg_buffer7) | 0; //@line 268
 HEAP32[$vararg_buffer9 >> 2] = 1; //@line 269
 _printf(10999, $vararg_buffer9) | 0; //@line 270
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 271
 _putchar(10) | 0; //@line 272
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 59; //@line 275
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 277
  sp = STACKTOP; //@line 278
  STACKTOP = sp; //@line 279
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 281
  HEAP8[$0 + 688 >> 0] = 0; //@line 283
  STACKTOP = sp; //@line 284
  return;
 }
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_465($0) {
 $0 = $0 | 0;
 var $$040 = 0, $10 = 0, $12 = 0, $19 = 0, $2 = 0, $21 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 33983
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33985
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 33987
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33989
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33991
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33993
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33995
 if (!(HEAP8[$0 + 28 >> 0] & 1)) {
  HEAP8[___async_retval >> 0] = 0; //@line 34002
  return;
 }
 if (!(HEAP32[$6 + 20 >> 2] | 0)) {
  $19 = HEAP32[$8 + 112 >> 2] | 0; //@line 34010
  $21 = HEAPU8[$6 >> 0] | 0; //@line 34012
  $25 = HEAP32[$19 + ($21 * 12 | 0) + 4 >> 2] | 0; //@line 34016
  $$040 = ($25 | 0) == 0 ? HEAP32[$19 + ($21 * 12 | 0) >> 2] | 0 : $25; //@line 34019
 } else {
  $$040 = $10; //@line 34021
 }
 $30 = HEAP32[$8 + 96 >> 2] | 0; //@line 34026
 $32 = HEAP32[$8 + 104 >> 2] | 0; //@line 34028
 $33 = $4 & 255; //@line 34029
 $35 = HEAP8[(HEAP32[$8 + 88 >> 2] | 0) + $33 >> 0] | 0; //@line 34031
 $36 = HEAP32[$2 >> 2] | 0; //@line 34032
 $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 72 >> 2] | 0; //@line 34035
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 34036
 FUNCTION_TABLE_vi[$39 & 1023]($36); //@line 34037
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 625; //@line 34040
  $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 34041
  HEAP32[$40 >> 2] = $2; //@line 34042
  $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 34043
  HEAP32[$41 >> 2] = $$040; //@line 34044
  $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 34045
  HEAP8[$42 >> 0] = $4; //@line 34046
  $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 34047
  HEAP32[$43 >> 2] = $8; //@line 34048
  $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 34049
  HEAP32[$44 >> 2] = $6; //@line 34050
  $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 34051
  HEAP8[$45 >> 0] = $35; //@line 34052
  $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 34053
  HEAP32[$46 >> 2] = $30; //@line 34054
  $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 34055
  HEAP32[$47 >> 2] = $32; //@line 34056
  $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 34057
  HEAP32[$48 >> 2] = $33; //@line 34058
  $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 34059
  HEAP32[$49 >> 2] = $12; //@line 34060
  sp = STACKTOP; //@line 34061
  return;
 }
 ___async_unwind = 0; //@line 34064
 HEAP32[$ReallocAsyncCtx4 >> 2] = 625; //@line 34065
 $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 34066
 HEAP32[$40 >> 2] = $2; //@line 34067
 $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 34068
 HEAP32[$41 >> 2] = $$040; //@line 34069
 $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 34070
 HEAP8[$42 >> 0] = $4; //@line 34071
 $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 34072
 HEAP32[$43 >> 2] = $8; //@line 34073
 $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 34074
 HEAP32[$44 >> 2] = $6; //@line 34075
 $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 34076
 HEAP8[$45 >> 0] = $35; //@line 34077
 $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 34078
 HEAP32[$46 >> 2] = $30; //@line 34079
 $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 34080
 HEAP32[$47 >> 2] = $32; //@line 34081
 $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 34082
 HEAP32[$48 >> 2] = $33; //@line 34083
 $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 34084
 HEAP32[$49 >> 2] = $12; //@line 34085
 sp = STACKTOP; //@line 34086
 return;
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 11527
 $7 = ($2 | 0) != 0; //@line 11531
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 11535
   $$03555 = $0; //@line 11536
   $$03654 = $2; //@line 11536
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 11541
     $$036$lcssa64 = $$03654; //@line 11541
     label = 6; //@line 11542
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 11545
    $12 = $$03654 + -1 | 0; //@line 11546
    $16 = ($12 | 0) != 0; //@line 11550
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 11553
     $$03654 = $12; //@line 11553
    } else {
     $$035$lcssa = $11; //@line 11555
     $$036$lcssa = $12; //@line 11555
     $$lcssa = $16; //@line 11555
     label = 5; //@line 11556
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 11561
   $$036$lcssa = $2; //@line 11561
   $$lcssa = $7; //@line 11561
   label = 5; //@line 11562
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 11567
   $$036$lcssa64 = $$036$lcssa; //@line 11567
   label = 6; //@line 11568
  } else {
   $$2 = $$035$lcssa; //@line 11570
   $$3 = 0; //@line 11570
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 11576
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 11579
    $$3 = $$036$lcssa64; //@line 11579
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 11581
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 11585
      $$13745 = $$036$lcssa64; //@line 11585
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 11588
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 11597
       $30 = $$13745 + -4 | 0; //@line 11598
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 11601
        $$13745 = $30; //@line 11601
       } else {
        $$0$lcssa = $29; //@line 11603
        $$137$lcssa = $30; //@line 11603
        label = 11; //@line 11604
        break L11;
       }
      }
      $$140 = $$046; //@line 11608
      $$23839 = $$13745; //@line 11608
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 11610
      $$137$lcssa = $$036$lcssa64; //@line 11610
      label = 11; //@line 11611
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 11617
      $$3 = 0; //@line 11617
      break;
     } else {
      $$140 = $$0$lcssa; //@line 11620
      $$23839 = $$137$lcssa; //@line 11620
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 11627
      $$3 = $$23839; //@line 11627
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 11630
     $$23839 = $$23839 + -1 | 0; //@line 11631
     if (!$$23839) {
      $$2 = $35; //@line 11634
      $$3 = 0; //@line 11634
      break;
     } else {
      $$140 = $35; //@line 11637
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 11645
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 11298
 do {
  if (!$0) {
   do {
    if (!(HEAP32[2602] | 0)) {
     $34 = 0; //@line 11306
    } else {
     $12 = HEAP32[2602] | 0; //@line 11308
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11309
     $13 = _fflush($12) | 0; //@line 11310
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 778; //@line 11313
      sp = STACKTOP; //@line 11314
      return 0; //@line 11315
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 11317
      $34 = $13; //@line 11318
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 11324
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 11328
    } else {
     $$02327 = $$02325; //@line 11330
     $$02426 = $34; //@line 11330
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 11337
      } else {
       $28 = 0; //@line 11339
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11347
       $25 = ___fflush_unlocked($$02327) | 0; //@line 11348
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 11353
       $$1 = $25 | $$02426; //@line 11355
      } else {
       $$1 = $$02426; //@line 11357
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 11361
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 11364
      if (!$$023) {
       $$024$lcssa = $$1; //@line 11367
       break L9;
      } else {
       $$02327 = $$023; //@line 11370
       $$02426 = $$1; //@line 11370
      }
     }
     HEAP32[$AsyncCtx >> 2] = 779; //@line 11373
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 11375
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 11377
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 11379
     sp = STACKTOP; //@line 11380
     return 0; //@line 11381
    }
   } while (0);
   ___ofl_unlock(); //@line 11384
   $$0 = $$024$lcssa; //@line 11385
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11391
    $5 = ___fflush_unlocked($0) | 0; //@line 11392
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 776; //@line 11395
     sp = STACKTOP; //@line 11396
     return 0; //@line 11397
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 11399
     $$0 = $5; //@line 11400
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 11405
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11406
   $7 = ___fflush_unlocked($0) | 0; //@line 11407
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 777; //@line 11410
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 11413
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 11415
    sp = STACKTOP; //@line 11416
    return 0; //@line 11417
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11419
   if ($phitmp) {
    $$0 = $7; //@line 11421
   } else {
    ___unlockfile($0); //@line 11423
    $$0 = $7; //@line 11424
   }
  }
 } while (0);
 return $$0 | 0; //@line 11428
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_262($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 9290
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9292
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9294
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9296
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9298
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9300
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9302
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9304
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9308
 if (HEAP32[$2 >> 2] | 0) {
  HEAP8[$6 + 1964 >> 0] = 0; //@line 9315
  _memset($6 + 1975 | 0, 0, 255) | 0; //@line 9317
  HEAP16[$6 + 2230 >> 1] = 255; //@line 9319
  _printf(12178, $14) | 0; //@line 9320
  HEAP32[$18 >> 2] = HEAP32[$2 >> 2]; //@line 9322
  _printf(12937, $18) | 0; //@line 9323
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 9324
  _putchar(10) | 0; //@line 9325
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 203; //@line 9328
   $27 = $ReallocAsyncCtx7 + 4 | 0; //@line 9329
   HEAP32[$27 >> 2] = $4; //@line 9330
   $28 = $ReallocAsyncCtx7 + 8 | 0; //@line 9331
   HEAP32[$28 >> 2] = $6; //@line 9332
   $29 = $ReallocAsyncCtx7 + 12 | 0; //@line 9333
   HEAP32[$29 >> 2] = $8; //@line 9334
   $30 = $ReallocAsyncCtx7 + 16 | 0; //@line 9335
   HEAP32[$30 >> 2] = $2; //@line 9336
   sp = STACKTOP; //@line 9337
   return;
  }
  ___async_unwind = 0; //@line 9340
  HEAP32[$ReallocAsyncCtx7 >> 2] = 203; //@line 9341
  $27 = $ReallocAsyncCtx7 + 4 | 0; //@line 9342
  HEAP32[$27 >> 2] = $4; //@line 9343
  $28 = $ReallocAsyncCtx7 + 8 | 0; //@line 9344
  HEAP32[$28 >> 2] = $6; //@line 9345
  $29 = $ReallocAsyncCtx7 + 12 | 0; //@line 9346
  HEAP32[$29 >> 2] = $8; //@line 9347
  $30 = $ReallocAsyncCtx7 + 16 | 0; //@line 9348
  HEAP32[$30 >> 2] = $2; //@line 9349
  sp = STACKTOP; //@line 9350
  return;
 }
 HEAP32[$6 + 1956 >> 2] = HEAP32[$10 + 16 >> 2]; //@line 9356
 HEAP8[$6 + 1964 >> 0] = 0; //@line 9358
 $35 = $6 + 1892 | 0; //@line 9359
 $36 = HEAP32[$35 >> 2] | 0; //@line 9360
 if (!$36) {
  return;
 }
 $40 = HEAP32[$6 + 2288 >> 2] | 0; //@line 9367
 $42 = HEAP32[$36 + 4 >> 2] | 0; //@line 9369
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 9370
 FUNCTION_TABLE_vii[$42 & 31]($12, $6 + 1880 | 0); //@line 9371
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 212; //@line 9374
  $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 9375
  HEAP32[$43 >> 2] = $35; //@line 9376
  $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 9377
  HEAP32[$44 >> 2] = $12; //@line 9378
  $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 9379
  HEAP32[$45 >> 2] = $40; //@line 9380
  $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 9381
  HEAP32[$46 >> 2] = $12; //@line 9382
  sp = STACKTOP; //@line 9383
  return;
 }
 ___async_unwind = 0; //@line 9386
 HEAP32[$ReallocAsyncCtx5 >> 2] = 212; //@line 9387
 $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 9388
 HEAP32[$43 >> 2] = $35; //@line 9389
 $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 9390
 HEAP32[$44 >> 2] = $12; //@line 9391
 $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 9392
 HEAP32[$45 >> 2] = $40; //@line 9393
 $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 9394
 HEAP32[$46 >> 2] = $12; //@line 9395
 sp = STACKTOP; //@line 9396
 return;
}
function _mbedtls_cipher_free__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $38 = 0, $42 = 0, $46 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29883
 HEAP8[$2 >> 0] = 0; //@line 29885
 HEAP8[$2 + 1 >> 0] = 0; //@line 29887
 HEAP8[$2 + 2 >> 0] = 0; //@line 29889
 $6 = $2 + 4 | 0; //@line 29890
 HEAP8[$2 + 3 >> 0] = 0; //@line 29891
 HEAP8[$6 >> 0] = 0; //@line 29893
 HEAP8[$6 + 1 >> 0] = 0; //@line 29895
 HEAP8[$6 + 2 >> 0] = 0; //@line 29897
 $10 = $6 + 4 | 0; //@line 29898
 HEAP8[$6 + 3 >> 0] = 0; //@line 29899
 HEAP8[$10 >> 0] = 0; //@line 29901
 HEAP8[$10 + 1 >> 0] = 0; //@line 29903
 HEAP8[$10 + 2 >> 0] = 0; //@line 29905
 $14 = $6 + 8 | 0; //@line 29906
 HEAP8[$10 + 3 >> 0] = 0; //@line 29907
 HEAP8[$14 >> 0] = 0; //@line 29909
 HEAP8[$14 + 1 >> 0] = 0; //@line 29911
 HEAP8[$14 + 2 >> 0] = 0; //@line 29913
 $18 = $6 + 12 | 0; //@line 29914
 HEAP8[$14 + 3 >> 0] = 0; //@line 29915
 HEAP8[$18 >> 0] = 0; //@line 29917
 HEAP8[$18 + 1 >> 0] = 0; //@line 29919
 HEAP8[$18 + 2 >> 0] = 0; //@line 29921
 $22 = $6 + 16 | 0; //@line 29922
 HEAP8[$18 + 3 >> 0] = 0; //@line 29923
 HEAP8[$22 >> 0] = 0; //@line 29925
 HEAP8[$22 + 1 >> 0] = 0; //@line 29927
 HEAP8[$22 + 2 >> 0] = 0; //@line 29929
 $26 = $6 + 20 | 0; //@line 29930
 HEAP8[$22 + 3 >> 0] = 0; //@line 29931
 HEAP8[$26 >> 0] = 0; //@line 29933
 HEAP8[$26 + 1 >> 0] = 0; //@line 29935
 HEAP8[$26 + 2 >> 0] = 0; //@line 29937
 $30 = $6 + 24 | 0; //@line 29938
 HEAP8[$26 + 3 >> 0] = 0; //@line 29939
 HEAP8[$30 >> 0] = 0; //@line 29941
 HEAP8[$30 + 1 >> 0] = 0; //@line 29943
 HEAP8[$30 + 2 >> 0] = 0; //@line 29945
 $34 = $6 + 28 | 0; //@line 29946
 HEAP8[$30 + 3 >> 0] = 0; //@line 29947
 HEAP8[$34 >> 0] = 0; //@line 29949
 HEAP8[$34 + 1 >> 0] = 0; //@line 29951
 HEAP8[$34 + 2 >> 0] = 0; //@line 29953
 $38 = $6 + 32 | 0; //@line 29954
 HEAP8[$34 + 3 >> 0] = 0; //@line 29955
 HEAP8[$38 >> 0] = 0; //@line 29957
 HEAP8[$38 + 1 >> 0] = 0; //@line 29959
 HEAP8[$38 + 2 >> 0] = 0; //@line 29961
 $42 = $6 + 36 | 0; //@line 29962
 HEAP8[$38 + 3 >> 0] = 0; //@line 29963
 HEAP8[$42 >> 0] = 0; //@line 29965
 HEAP8[$42 + 1 >> 0] = 0; //@line 29967
 HEAP8[$42 + 2 >> 0] = 0; //@line 29969
 $46 = $6 + 40 | 0; //@line 29970
 HEAP8[$42 + 3 >> 0] = 0; //@line 29971
 HEAP8[$46 >> 0] = 0; //@line 29973
 HEAP8[$46 + 1 >> 0] = 0; //@line 29975
 HEAP8[$46 + 2 >> 0] = 0; //@line 29977
 $50 = $6 + 44 | 0; //@line 29978
 HEAP8[$46 + 3 >> 0] = 0; //@line 29979
 HEAP8[$50 >> 0] = 0; //@line 29981
 HEAP8[$50 + 1 >> 0] = 0; //@line 29983
 HEAP8[$50 + 2 >> 0] = 0; //@line 29985
 $54 = $6 + 48 | 0; //@line 29986
 HEAP8[$50 + 3 >> 0] = 0; //@line 29987
 HEAP8[$54 >> 0] = 0; //@line 29989
 HEAP8[$54 + 1 >> 0] = 0; //@line 29991
 HEAP8[$54 + 2 >> 0] = 0; //@line 29993
 $58 = $6 + 52 | 0; //@line 29994
 HEAP8[$54 + 3 >> 0] = 0; //@line 29995
 HEAP8[$58 >> 0] = 0; //@line 29997
 HEAP8[$58 + 1 >> 0] = 0; //@line 29999
 HEAP8[$58 + 2 >> 0] = 0; //@line 30001
 $62 = $6 + 56 | 0; //@line 30002
 HEAP8[$58 + 3 >> 0] = 0; //@line 30003
 HEAP8[$62 >> 0] = 0; //@line 30005
 HEAP8[$62 + 1 >> 0] = 0; //@line 30007
 HEAP8[$62 + 2 >> 0] = 0; //@line 30009
 $66 = $6 + 60 | 0; //@line 30010
 HEAP8[$62 + 3 >> 0] = 0; //@line 30011
 HEAP8[$66 >> 0] = 0; //@line 30013
 HEAP8[$66 + 1 >> 0] = 0; //@line 30015
 HEAP8[$66 + 2 >> 0] = 0; //@line 30017
 HEAP8[$66 + 3 >> 0] = 0; //@line 30018
 return;
}
function _mbedtls_ccm_free__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $38 = 0, $42 = 0, $46 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21223
 HEAP8[$2 >> 0] = 0; //@line 21225
 HEAP8[$2 + 1 >> 0] = 0; //@line 21227
 HEAP8[$2 + 2 >> 0] = 0; //@line 21229
 $6 = $2 + 4 | 0; //@line 21230
 HEAP8[$2 + 3 >> 0] = 0; //@line 21231
 HEAP8[$6 >> 0] = 0; //@line 21233
 HEAP8[$6 + 1 >> 0] = 0; //@line 21235
 HEAP8[$6 + 2 >> 0] = 0; //@line 21237
 $10 = $6 + 4 | 0; //@line 21238
 HEAP8[$6 + 3 >> 0] = 0; //@line 21239
 HEAP8[$10 >> 0] = 0; //@line 21241
 HEAP8[$10 + 1 >> 0] = 0; //@line 21243
 HEAP8[$10 + 2 >> 0] = 0; //@line 21245
 $14 = $6 + 8 | 0; //@line 21246
 HEAP8[$10 + 3 >> 0] = 0; //@line 21247
 HEAP8[$14 >> 0] = 0; //@line 21249
 HEAP8[$14 + 1 >> 0] = 0; //@line 21251
 HEAP8[$14 + 2 >> 0] = 0; //@line 21253
 $18 = $6 + 12 | 0; //@line 21254
 HEAP8[$14 + 3 >> 0] = 0; //@line 21255
 HEAP8[$18 >> 0] = 0; //@line 21257
 HEAP8[$18 + 1 >> 0] = 0; //@line 21259
 HEAP8[$18 + 2 >> 0] = 0; //@line 21261
 $22 = $6 + 16 | 0; //@line 21262
 HEAP8[$18 + 3 >> 0] = 0; //@line 21263
 HEAP8[$22 >> 0] = 0; //@line 21265
 HEAP8[$22 + 1 >> 0] = 0; //@line 21267
 HEAP8[$22 + 2 >> 0] = 0; //@line 21269
 $26 = $6 + 20 | 0; //@line 21270
 HEAP8[$22 + 3 >> 0] = 0; //@line 21271
 HEAP8[$26 >> 0] = 0; //@line 21273
 HEAP8[$26 + 1 >> 0] = 0; //@line 21275
 HEAP8[$26 + 2 >> 0] = 0; //@line 21277
 $30 = $6 + 24 | 0; //@line 21278
 HEAP8[$26 + 3 >> 0] = 0; //@line 21279
 HEAP8[$30 >> 0] = 0; //@line 21281
 HEAP8[$30 + 1 >> 0] = 0; //@line 21283
 HEAP8[$30 + 2 >> 0] = 0; //@line 21285
 $34 = $6 + 28 | 0; //@line 21286
 HEAP8[$30 + 3 >> 0] = 0; //@line 21287
 HEAP8[$34 >> 0] = 0; //@line 21289
 HEAP8[$34 + 1 >> 0] = 0; //@line 21291
 HEAP8[$34 + 2 >> 0] = 0; //@line 21293
 $38 = $6 + 32 | 0; //@line 21294
 HEAP8[$34 + 3 >> 0] = 0; //@line 21295
 HEAP8[$38 >> 0] = 0; //@line 21297
 HEAP8[$38 + 1 >> 0] = 0; //@line 21299
 HEAP8[$38 + 2 >> 0] = 0; //@line 21301
 $42 = $6 + 36 | 0; //@line 21302
 HEAP8[$38 + 3 >> 0] = 0; //@line 21303
 HEAP8[$42 >> 0] = 0; //@line 21305
 HEAP8[$42 + 1 >> 0] = 0; //@line 21307
 HEAP8[$42 + 2 >> 0] = 0; //@line 21309
 $46 = $6 + 40 | 0; //@line 21310
 HEAP8[$42 + 3 >> 0] = 0; //@line 21311
 HEAP8[$46 >> 0] = 0; //@line 21313
 HEAP8[$46 + 1 >> 0] = 0; //@line 21315
 HEAP8[$46 + 2 >> 0] = 0; //@line 21317
 $50 = $6 + 44 | 0; //@line 21318
 HEAP8[$46 + 3 >> 0] = 0; //@line 21319
 HEAP8[$50 >> 0] = 0; //@line 21321
 HEAP8[$50 + 1 >> 0] = 0; //@line 21323
 HEAP8[$50 + 2 >> 0] = 0; //@line 21325
 $54 = $6 + 48 | 0; //@line 21326
 HEAP8[$50 + 3 >> 0] = 0; //@line 21327
 HEAP8[$54 >> 0] = 0; //@line 21329
 HEAP8[$54 + 1 >> 0] = 0; //@line 21331
 HEAP8[$54 + 2 >> 0] = 0; //@line 21333
 $58 = $6 + 52 | 0; //@line 21334
 HEAP8[$54 + 3 >> 0] = 0; //@line 21335
 HEAP8[$58 >> 0] = 0; //@line 21337
 HEAP8[$58 + 1 >> 0] = 0; //@line 21339
 HEAP8[$58 + 2 >> 0] = 0; //@line 21341
 $62 = $6 + 56 | 0; //@line 21342
 HEAP8[$58 + 3 >> 0] = 0; //@line 21343
 HEAP8[$62 >> 0] = 0; //@line 21345
 HEAP8[$62 + 1 >> 0] = 0; //@line 21347
 HEAP8[$62 + 2 >> 0] = 0; //@line 21349
 $66 = $6 + 60 | 0; //@line 21350
 HEAP8[$62 + 3 >> 0] = 0; //@line 21351
 HEAP8[$66 >> 0] = 0; //@line 21353
 HEAP8[$66 + 1 >> 0] = 0; //@line 21355
 HEAP8[$66 + 2 >> 0] = 0; //@line 21357
 HEAP8[$66 + 3 >> 0] = 0; //@line 21358
 return;
}
function __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$060 = 0, $$060$us = 0, $$2 = 0, $$2$us = 0, $$pr$us = 0, $$sink2 = 0, $10 = 0, $20 = 0, $26 = 0, $28 = 0, $34 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $indvars$iv = 0, $indvars$iv62 = 0, $wide$trip$count = 0, label = 0;
 if (!($4 << 24 >> 24)) {
  $$0$lcssa = -1; //@line 25919
  return $$0$lcssa | 0; //@line 25920
 }
 $6 = $0 + 8 | 0; //@line 25922
 $wide$trip$count = $4 & 255; //@line 25923
 if ($1) {
  $$060$us = -1; //@line 25925
  $indvars$iv = 0; //@line 25925
  while (1) {
   $7 = $3 + ($indvars$iv * 24 | 0) + 12 | 0; //@line 25927
   do {
    if ($2) {
     $8 = HEAP32[$7 >> 2] | 0; //@line 25930
     $10 = $3 + ($indvars$iv * 24 | 0) + 8 | 0; //@line 25932
     if ($8 >>> 0 <= (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) >>> 0) {
      HEAP32[$7 >> 2] = 0; //@line 25937
      $$2$us = $$060$us; //@line 25938
      break;
     }
     $$pr$us = HEAP32[$7 >> 2] | 0; //@line 25941
     if (!$$pr$us) {
      $$2$us = $$060$us; //@line 25944
     } else {
      if (($$pr$us - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0) >>> 0 < $$060$us >>> 0) {
       $20 = HEAP32[$7 >> 2] | 0; //@line 25952
       $$2$us = $20 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0; //@line 25957
      } else {
       $$2$us = $$060$us; //@line 25959
      }
     }
    } else {
     HEAP32[$7 >> 2] = 0; //@line 25963
     $$2$us = 0; //@line 25964
    }
   } while (0);
   $indvars$iv = $indvars$iv + 1 | 0; //@line 25967
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$0$lcssa = $$2$us; //@line 25970
    break;
   } else {
    $$060$us = $$2$us; //@line 25973
   }
  }
  return $$0$lcssa | 0; //@line 25976
 } else {
  $$060 = -1; //@line 25978
  $indvars$iv62 = 0; //@line 25978
 }
 while (1) {
  $26 = $3 + ($indvars$iv62 * 24 | 0) + 4 | 0; //@line 25982
  $28 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$26 >> 2] | 0) | 0; //@line 25984
  if ($2) {
   $34 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$3 + ($indvars$iv62 * 24 | 0) + 8 >> 2] | 0) | 0; //@line 25990
  } else {
   $34 = 0; //@line 25992
  }
  if ($28 >>> 0 > $34 >>> 0) {
   $$sink2 = $26; //@line 25996
   label = 17; //@line 25997
  } else {
   if ($2) {
    $$sink2 = $3 + ($indvars$iv62 * 24 | 0) + 8 | 0; //@line 26001
    label = 17; //@line 26002
   } else {
    $41 = 0; //@line 26004
   }
  }
  if ((label | 0) == 17) {
   label = 0; //@line 26008
   $41 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$$sink2 >> 2] | 0) | 0; //@line 26012
  }
  $38 = $3 + ($indvars$iv62 * 24 | 0) + 12 | 0; //@line 26014
  $39 = HEAP32[$38 >> 2] | 0; //@line 26015
  if ($39 >>> 0 > $41 >>> 0) {
   $42 = $39 - $41 | 0; //@line 26018
   $$2 = $42 >>> 0 < $$060 >>> 0 ? $42 : $$060; //@line 26021
  } else {
   HEAP32[$38 >> 2] = 0; //@line 26023
   $$2 = $$060; //@line 26024
  }
  $indvars$iv62 = $indvars$iv62 + 1 | 0; //@line 26026
  if (($indvars$iv62 | 0) == ($wide$trip$count | 0)) {
   $$0$lcssa = $$2; //@line 26029
   break;
  } else {
   $$060 = $$2; //@line 26032
  }
 }
 return $$0$lcssa | 0; //@line 26035
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 37193
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37195
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37197
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 37199
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 37201
 $10 = $2 + 4 | 0; //@line 37203
 HEAP32[$10 >> 2] = 0; //@line 37205
 HEAP32[$10 + 4 >> 2] = 0; //@line 37208
 HEAP32[$2 >> 2] = 757; //@line 37209
 $14 = $2 + 12 | 0; //@line 37210
 HEAP32[$14 >> 2] = 10140; //@line 37211
 $15 = HEAP32[5887] | 0; //@line 37212
 if (!$15) {
  $25 = HEAP32[2536] | 0; //@line 37216
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 37217
  FUNCTION_TABLE_vii[$25 & 31](23536, $2); //@line 37218
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 759; //@line 37221
   $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 37222
   HEAP32[$26 >> 2] = $2; //@line 37223
   $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 37224
   HEAP32[$27 >> 2] = $14; //@line 37225
   $28 = $ReallocAsyncCtx3 + 12 | 0; //@line 37226
   HEAP32[$28 >> 2] = $4; //@line 37227
   $29 = $ReallocAsyncCtx3 + 16 | 0; //@line 37228
   HEAP32[$29 >> 2] = $6; //@line 37229
   $30 = $ReallocAsyncCtx3 + 20 | 0; //@line 37230
   HEAP32[$30 >> 2] = $8; //@line 37231
   sp = STACKTOP; //@line 37232
   return;
  }
  ___async_unwind = 0; //@line 37235
  HEAP32[$ReallocAsyncCtx3 >> 2] = 759; //@line 37236
  $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 37237
  HEAP32[$26 >> 2] = $2; //@line 37238
  $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 37239
  HEAP32[$27 >> 2] = $14; //@line 37240
  $28 = $ReallocAsyncCtx3 + 12 | 0; //@line 37241
  HEAP32[$28 >> 2] = $4; //@line 37242
  $29 = $ReallocAsyncCtx3 + 16 | 0; //@line 37243
  HEAP32[$29 >> 2] = $6; //@line 37244
  $30 = $ReallocAsyncCtx3 + 20 | 0; //@line 37245
  HEAP32[$30 >> 2] = $8; //@line 37246
  sp = STACKTOP; //@line 37247
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 37251
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 37252
  FUNCTION_TABLE_vi[$18 & 1023](23536); //@line 37253
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 758; //@line 37256
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 37257
   HEAP32[$19 >> 2] = $2; //@line 37258
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 37259
   HEAP32[$20 >> 2] = $14; //@line 37260
   $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 37261
   HEAP32[$21 >> 2] = $4; //@line 37262
   $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 37263
   HEAP32[$22 >> 2] = $6; //@line 37264
   $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 37265
   HEAP32[$23 >> 2] = $8; //@line 37266
   sp = STACKTOP; //@line 37267
   return;
  }
  ___async_unwind = 0; //@line 37270
  HEAP32[$ReallocAsyncCtx2 >> 2] = 758; //@line 37271
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 37272
  HEAP32[$19 >> 2] = $2; //@line 37273
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 37274
  HEAP32[$20 >> 2] = $14; //@line 37275
  $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 37276
  HEAP32[$21 >> 2] = $4; //@line 37277
  $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 37278
  HEAP32[$22 >> 2] = $6; //@line 37279
  $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 37280
  HEAP32[$23 >> 2] = $8; //@line 37281
  sp = STACKTOP; //@line 37282
  return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15474
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 15480
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 15486
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 15489
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15490
    FUNCTION_TABLE_viiiii[$53 & 7]($50, $1, $2, $3, $4); //@line 15491
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 801; //@line 15494
     sp = STACKTOP; //@line 15495
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15498
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 15506
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 15511
     $19 = $1 + 44 | 0; //@line 15512
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 15518
     HEAP8[$22 >> 0] = 0; //@line 15519
     $23 = $1 + 53 | 0; //@line 15520
     HEAP8[$23 >> 0] = 0; //@line 15521
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 15523
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 15526
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 15527
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 15528
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 800; //@line 15531
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 15533
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 15535
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 15537
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 15539
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 15541
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 15543
      sp = STACKTOP; //@line 15544
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15547
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 15551
      label = 13; //@line 15552
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 15557
       label = 13; //@line 15558
      } else {
       $$037$off039 = 3; //@line 15560
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 15564
      $39 = $1 + 40 | 0; //@line 15565
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 15568
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 15578
        $$037$off039 = $$037$off038; //@line 15579
       } else {
        $$037$off039 = $$037$off038; //@line 15581
       }
      } else {
       $$037$off039 = $$037$off038; //@line 15584
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 15587
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 15594
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $14 = 0, $2 = 0, $27 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 9966
 STACKTOP = STACKTOP + 16 | 0; //@line 9967
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9967
 $2 = sp; //@line 9968
 $3 = $0 + 1876 | 0; //@line 9969
 if (HEAP32[$3 >> 2] | 0) {
  $$0 = 0; //@line 9973
  STACKTOP = sp; //@line 9974
  return $$0 | 0; //@line 9974
 }
 HEAP32[$0 + 2288 >> 2] = $1; //@line 9977
 __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1); //@line 9978
 $7 = $0 + 4 | 0; //@line 9979
 $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9982
 __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE($7, $0 + 1812 | 0, $0 + 1336 | 0, $1) | 0; //@line 9983
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 316; //@line 9986
  HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 9988
  HEAP32[$AsyncCtx7 + 8 >> 2] = $7; //@line 9990
  HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 9992
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 9994
  sp = STACKTOP; //@line 9995
  STACKTOP = sp; //@line 9996
  return 0; //@line 9996
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9998
 HEAP32[$2 >> 2] = 2; //@line 9999
 $14 = $2 + 4 | 0; //@line 10000
 HEAP8[$14 >> 0] = 1; //@line 10001
 $AsyncCtx3 = _emscripten_alloc_async_context(32, sp) | 0; //@line 10002
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($7, $2) | 0; //@line 10003
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 317; //@line 10006
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 10008
  HEAP32[$AsyncCtx3 + 8 >> 2] = $14; //@line 10010
  HEAP32[$AsyncCtx3 + 12 >> 2] = $7; //@line 10012
  HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 10014
  HEAP32[$AsyncCtx3 + 20 >> 2] = $0; //@line 10016
  HEAP32[$AsyncCtx3 + 24 >> 2] = $3; //@line 10018
  HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 10020
  sp = STACKTOP; //@line 10021
  STACKTOP = sp; //@line 10022
  return 0; //@line 10022
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10024
 HEAP32[$2 >> 2] = 7; //@line 10025
 HEAP8[$14 >> 0] = 1; //@line 10026
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 10027
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($7, $2) | 0; //@line 10028
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 318; //@line 10031
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10033
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 10035
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 10037
  sp = STACKTOP; //@line 10038
  STACKTOP = sp; //@line 10039
  return 0; //@line 10039
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10041
 HEAP32[$0 + 1960 >> 2] = 0; //@line 10043
 HEAP32[$0 + 1956 >> 2] = 0; //@line 10045
 HEAP32[$3 >> 2] = 1; //@line 10046
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10047
 $27 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 10048
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 319; //@line 10051
  HEAP32[$AsyncCtx10 + 4 >> 2] = $2; //@line 10053
  sp = STACKTOP; //@line 10054
  STACKTOP = sp; //@line 10055
  return 0; //@line 10055
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 10057
 $$0 = $27; //@line 10058
 STACKTOP = sp; //@line 10059
 return $$0 | 0; //@line 10059
}
function __ZN12LoRaWANStackC2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 9949
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9953
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9955
 $7 = $4 + 12 | 0; //@line 9956
 HEAP32[$4 >> 2] = 25; //@line 9957
 HEAP32[$4 + 4 >> 2] = 0; //@line 9959
 HEAP32[$4 + 8 >> 2] = $6; //@line 9961
 HEAP32[$7 >> 2] = 836; //@line 9962
 $8 = $6 + 1860 | 0; //@line 9963
 if (($8 | 0) == ($4 | 0)) {
  $25 = HEAP32[211] | 0; //@line 9967
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 9968
  FUNCTION_TABLE_vi[$25 & 1023]($4); //@line 9969
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 199; //@line 9972
   $26 = $ReallocAsyncCtx4 + 4 | 0; //@line 9973
   HEAP32[$26 >> 2] = $4; //@line 9974
   sp = STACKTOP; //@line 9975
   return;
  }
  ___async_unwind = 0; //@line 9978
  HEAP32[$ReallocAsyncCtx4 >> 2] = 199; //@line 9979
  $26 = $ReallocAsyncCtx4 + 4 | 0; //@line 9980
  HEAP32[$26 >> 2] = $4; //@line 9981
  sp = STACKTOP; //@line 9982
  return;
 }
 $10 = $6 + 1872 | 0; //@line 9985
 $11 = HEAP32[$10 >> 2] | 0; //@line 9986
 if ($11 | 0) {
  $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 9990
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 9991
  FUNCTION_TABLE_vi[$14 & 1023]($8); //@line 9992
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 197; //@line 9995
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 9996
   HEAP32[$15 >> 2] = $7; //@line 9997
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 9998
   HEAP32[$16 >> 2] = $10; //@line 9999
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 10000
   HEAP32[$17 >> 2] = $8; //@line 10001
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 10002
   HEAP32[$18 >> 2] = $4; //@line 10003
   sp = STACKTOP; //@line 10004
   return;
  }
  ___async_unwind = 0; //@line 10007
  HEAP32[$ReallocAsyncCtx2 >> 2] = 197; //@line 10008
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 10009
  HEAP32[$15 >> 2] = $7; //@line 10010
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 10011
  HEAP32[$16 >> 2] = $10; //@line 10012
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 10013
  HEAP32[$17 >> 2] = $8; //@line 10014
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 10015
  HEAP32[$18 >> 2] = $4; //@line 10016
  sp = STACKTOP; //@line 10017
  return;
 }
 $20 = HEAP32[210] | 0; //@line 10021
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 10022
 FUNCTION_TABLE_vii[$20 & 31]($8, $4); //@line 10023
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 198; //@line 10026
  $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 10027
  HEAP32[$21 >> 2] = $7; //@line 10028
  $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 10029
  HEAP32[$22 >> 2] = $10; //@line 10030
  $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 10031
  HEAP32[$23 >> 2] = $4; //@line 10032
  sp = STACKTOP; //@line 10033
  return;
 }
 ___async_unwind = 0; //@line 10036
 HEAP32[$ReallocAsyncCtx3 >> 2] = 198; //@line 10037
 $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 10038
 HEAP32[$21 >> 2] = $7; //@line 10039
 $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 10040
 HEAP32[$22 >> 2] = $10; //@line 10041
 $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 10042
 HEAP32[$23 >> 2] = $4; //@line 10043
 sp = STACKTOP; //@line 10044
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_37($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 28234
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28236
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28238
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28240
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28242
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28244
 $13 = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 28247
 if (!$13) {
  $21 = HEAP32[$2 >> 2] | 0; //@line 28250
  $23 = $6 + 12 | 0; //@line 28252
  HEAP32[$6 >> 2] = 537; //@line 28253
  HEAP32[$6 + 4 >> 2] = 0; //@line 28255
  HEAP32[$6 + 8 >> 2] = $4; //@line 28257
  HEAP32[$23 >> 2] = 848; //@line 28258
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 28259
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($21, $4 + 1056 | 0, $6); //@line 28260
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 538; //@line 28263
   $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 28264
   HEAP32[$24 >> 2] = $23; //@line 28265
   $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 28266
   HEAP32[$25 >> 2] = $2; //@line 28267
   $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 28268
   HEAP32[$26 >> 2] = $4; //@line 28269
   $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 28270
   HEAP32[$27 >> 2] = $8; //@line 28271
   $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 28272
   HEAP32[$28 >> 2] = $6; //@line 28273
   sp = STACKTOP; //@line 28274
   return;
  }
  ___async_unwind = 0; //@line 28277
  HEAP32[$ReallocAsyncCtx7 >> 2] = 538; //@line 28278
  $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 28279
  HEAP32[$24 >> 2] = $23; //@line 28280
  $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 28281
  HEAP32[$25 >> 2] = $2; //@line 28282
  $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 28283
  HEAP32[$26 >> 2] = $4; //@line 28284
  $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 28285
  HEAP32[$27 >> 2] = $8; //@line 28286
  $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 28287
  HEAP32[$28 >> 2] = $6; //@line 28288
  sp = STACKTOP; //@line 28289
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 28293
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 28294
  FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 28295
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 536; //@line 28298
   $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 28299
   HEAP32[$17 >> 2] = $2; //@line 28300
   $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 28301
   HEAP32[$18 >> 2] = $4; //@line 28302
   $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 28303
   HEAP32[$19 >> 2] = $6; //@line 28304
   $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 28305
   HEAP32[$20 >> 2] = $8; //@line 28306
   sp = STACKTOP; //@line 28307
   return;
  }
  ___async_unwind = 0; //@line 28310
  HEAP32[$ReallocAsyncCtx3 >> 2] = 536; //@line 28311
  $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 28312
  HEAP32[$17 >> 2] = $2; //@line 28313
  $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 28314
  HEAP32[$18 >> 2] = $4; //@line 28315
  $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 28316
  HEAP32[$19 >> 2] = $6; //@line 28317
  $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 28318
  HEAP32[$20 >> 2] = $8; //@line 28319
  sp = STACKTOP; //@line 28320
  return;
 }
}
function _initialize__async_cb_479($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 35187
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35189
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35191
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35193
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35195
 $10 = $0 + 24 | 0; //@line 35197
 $12 = HEAP32[$10 >> 2] | 0; //@line 35199
 $15 = HEAP32[$10 + 4 >> 2] | 0; //@line 35202
 $17 = HEAP32[$0 + 32 >> 2] | 0; //@line 35204
 $19 = HEAP32[$0 + 36 >> 2] | 0; //@line 35206
 $21 = HEAP32[$2 >> 2] | 0; //@line 35209
 $22 = $21 + 32 | 0; //@line 35210
 HEAP32[$22 >> 2] = HEAP32[___async_retval >> 2]; //@line 35211
 $23 = $21 + 40 | 0; //@line 35212
 $24 = $23; //@line 35213
 HEAP32[$24 >> 2] = 0; //@line 35215
 HEAP32[$24 + 4 >> 2] = 0; //@line 35218
 $28 = $21 + 8 | 0; //@line 35219
 HEAP32[$28 >> 2] = $4; //@line 35220
 $29 = _bitshift64Shl(1, 0, $6 | 0) | 0; //@line 35221
 $31 = _i64Add($29 | 0, tempRet0 | 0, -1, 0) | 0; //@line 35223
 $33 = $21 + 12 | 0; //@line 35225
 HEAP32[$33 >> 2] = $31; //@line 35226
 HEAP32[$21 + 16 >> 2] = $8; //@line 35228
 $36 = $21 + 24 | 0; //@line 35230
 HEAP32[$36 >> 2] = $12; //@line 35232
 HEAP32[$36 + 4 >> 2] = $15; //@line 35235
 $40 = $21 + 48 | 0; //@line 35236
 $41 = $40; //@line 35237
 HEAP32[$41 >> 2] = 0; //@line 35239
 HEAP32[$41 + 4 >> 2] = 0; //@line 35242
 HEAP8[$21 + 56 >> 0] = 1; //@line 35244
 $48 = HEAP32[(HEAP32[$17 >> 2] | 0) + 4 >> 2] | 0; //@line 35247
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 35248
 $49 = FUNCTION_TABLE_i[$48 & 7]() | 0; //@line 35249
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 707; //@line 35252
  $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 35253
  HEAP32[$50 >> 2] = $2; //@line 35254
  $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 35255
  HEAP32[$51 >> 2] = $19; //@line 35256
  $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 35257
  HEAP32[$52 >> 2] = $22; //@line 35258
  $53 = $ReallocAsyncCtx4 + 16 | 0; //@line 35259
  HEAP32[$53 >> 2] = $33; //@line 35260
  $54 = $ReallocAsyncCtx4 + 20 | 0; //@line 35261
  HEAP32[$54 >> 2] = $28; //@line 35262
  $55 = $ReallocAsyncCtx4 + 24 | 0; //@line 35263
  HEAP32[$55 >> 2] = $23; //@line 35264
  $56 = $ReallocAsyncCtx4 + 28 | 0; //@line 35265
  HEAP32[$56 >> 2] = $40; //@line 35266
  sp = STACKTOP; //@line 35267
  return;
 }
 HEAP32[___async_retval >> 2] = $49; //@line 35271
 ___async_unwind = 0; //@line 35272
 HEAP32[$ReallocAsyncCtx4 >> 2] = 707; //@line 35273
 $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 35274
 HEAP32[$50 >> 2] = $2; //@line 35275
 $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 35276
 HEAP32[$51 >> 2] = $19; //@line 35277
 $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 35278
 HEAP32[$52 >> 2] = $22; //@line 35279
 $53 = $ReallocAsyncCtx4 + 16 | 0; //@line 35280
 HEAP32[$53 >> 2] = $33; //@line 35281
 $54 = $ReallocAsyncCtx4 + 20 | 0; //@line 35282
 HEAP32[$54 >> 2] = $28; //@line 35283
 $55 = $ReallocAsyncCtx4 + 24 | 0; //@line 35284
 HEAP32[$55 >> 2] = $23; //@line 35285
 $56 = $ReallocAsyncCtx4 + 28 | 0; //@line 35286
 HEAP32[$56 >> 2] = $40; //@line 35287
 sp = STACKTOP; //@line 35288
 return;
}
function _equeue_enqueue($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051$ph = 0, $$05157 = 0, $$0515859 = 0, $$053 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $54 = 0, $65 = 0, $67 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4870
 $13 = $1 - (HEAP32[$0 + 12 >> 2] | 0) | HEAPU8[$1 + 4 >> 0] << HEAP32[$0 + 16 >> 2]; //@line 4881
 $14 = $1 + 20 | 0; //@line 4882
 $16 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 4884
 HEAP32[$14 >> 2] = ($16 & ~($16 >> 31)) + $2; //@line 4889
 HEAP8[$1 + 5 >> 0] = HEAP8[$0 + 9 >> 0] | 0; //@line 4893
 $24 = $0 + 128 | 0; //@line 4894
 _equeue_mutex_lock($24); //@line 4895
 $25 = HEAP32[$0 >> 2] | 0; //@line 4896
 L1 : do {
  if (!$25) {
   $$051$ph = $0; //@line 4900
   label = 5; //@line 4901
  } else {
   $27 = HEAP32[$14 >> 2] | 0; //@line 4903
   $$053 = $0; //@line 4904
   $29 = $25; //@line 4904
   while (1) {
    if (((HEAP32[$29 + 20 >> 2] | 0) - $27 | 0) >= 0) {
     break;
    }
    $33 = $29 + 8 | 0; //@line 4913
    $34 = HEAP32[$33 >> 2] | 0; //@line 4914
    if (!$34) {
     $$051$ph = $33; //@line 4917
     label = 5; //@line 4918
     break L1;
    } else {
     $$053 = $33; //@line 4921
     $29 = $34; //@line 4921
    }
   }
   if ((HEAP32[$29 + 20 >> 2] | 0) != (HEAP32[$14 >> 2] | 0)) {
    $49 = $1 + 8 | 0; //@line 4929
    HEAP32[$49 >> 2] = $29; //@line 4930
    HEAP32[$29 + 16 >> 2] = $49; //@line 4932
    $$0515859 = $$053; //@line 4933
    label = 11; //@line 4934
    break;
   }
   $42 = HEAP32[$29 + 8 >> 2] | 0; //@line 4938
   $43 = $1 + 8 | 0; //@line 4939
   HEAP32[$43 >> 2] = $42; //@line 4940
   if ($42 | 0) {
    HEAP32[$42 + 16 >> 2] = $43; //@line 4944
   }
   $46 = HEAP32[$$053 >> 2] | 0; //@line 4946
   $47 = $1 + 12 | 0; //@line 4947
   HEAP32[$47 >> 2] = $46; //@line 4948
   HEAP32[$46 + 16 >> 2] = $47; //@line 4950
   $$05157 = $$053; //@line 4951
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$1 + 8 >> 2] = 0; //@line 4956
  $$0515859 = $$051$ph; //@line 4957
  label = 11; //@line 4958
 }
 if ((label | 0) == 11) {
  HEAP32[$1 + 12 >> 2] = 0; //@line 4962
  $$05157 = $$0515859; //@line 4963
 }
 HEAP32[$$05157 >> 2] = $1; //@line 4965
 HEAP32[$1 + 16 >> 2] = $$05157; //@line 4967
 $54 = HEAP32[$0 + 40 >> 2] | 0; //@line 4969
 if (!$54) {
  _equeue_mutex_unlock($24); //@line 4972
  return $13 | 0; //@line 4973
 }
 if (!(HEAP8[$0 + 36 >> 0] | 0)) {
  _equeue_mutex_unlock($24); //@line 4979
  return $13 | 0; //@line 4980
 }
 if ((HEAP32[$0 >> 2] | 0) != ($1 | 0)) {
  _equeue_mutex_unlock($24); //@line 4985
  return $13 | 0; //@line 4986
 }
 if (HEAP32[$1 + 12 >> 2] | 0) {
  _equeue_mutex_unlock($24); //@line 4992
  return $13 | 0; //@line 4993
 }
 $65 = HEAP32[$0 + 44 >> 2] | 0; //@line 4996
 $67 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 4998
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5002
 FUNCTION_TABLE_vii[$54 & 31]($65, $67 & ~($67 >> 31)); //@line 5003
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 183; //@line 5006
  HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 5008
  HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 5010
  sp = STACKTOP; //@line 5011
  return 0; //@line 5012
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5014
 _equeue_mutex_unlock($24); //@line 5015
 return $13 | 0; //@line 5016
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_85($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx24 = 0, sp = 0;
 sp = STACKTOP; //@line 33473
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33475
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33477
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33479
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33481
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33483
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33485
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33487
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 33489
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 33491
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 33493
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 33495
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 33497
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 33499
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 33501
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 33503
 $32 = HEAP8[$0 + 64 >> 0] | 0; //@line 33505
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 33507
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 33509
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 33511
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 33513
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 33515
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 33517
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 33519
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 33521
 $49 = $8 + 356 | 0; //@line 33522
 $50 = HEAP32[$49 >> 2] | 0; //@line 33523
 $ReallocAsyncCtx24 = _emscripten_realloc_async_context(104) | 0; //@line 33525
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($50, $8 + 1056 | 0); //@line 33526
 if (!___async) {
  ___async_unwind = 0; //@line 33529
 }
 HEAP32[$ReallocAsyncCtx24 >> 2] = 393; //@line 33531
 HEAP32[$ReallocAsyncCtx24 + 4 >> 2] = $2; //@line 33533
 HEAP32[$ReallocAsyncCtx24 + 8 >> 2] = $4; //@line 33535
 HEAP32[$ReallocAsyncCtx24 + 12 >> 2] = $6; //@line 33537
 HEAP32[$ReallocAsyncCtx24 + 16 >> 2] = $8; //@line 33539
 HEAP32[$ReallocAsyncCtx24 + 20 >> 2] = $10; //@line 33541
 HEAP32[$ReallocAsyncCtx24 + 24 >> 2] = $12; //@line 33543
 HEAP32[$ReallocAsyncCtx24 + 28 >> 2] = $49; //@line 33545
 HEAP32[$ReallocAsyncCtx24 + 32 >> 2] = $14; //@line 33547
 HEAP32[$ReallocAsyncCtx24 + 36 >> 2] = $16; //@line 33549
 HEAP32[$ReallocAsyncCtx24 + 40 >> 2] = $18; //@line 33551
 HEAP32[$ReallocAsyncCtx24 + 44 >> 2] = $20; //@line 33553
 HEAP32[$ReallocAsyncCtx24 + 48 >> 2] = $42; //@line 33555
 HEAP32[$ReallocAsyncCtx24 + 52 >> 2] = $44; //@line 33557
 HEAP32[$ReallocAsyncCtx24 + 56 >> 2] = $46; //@line 33559
 HEAP32[$ReallocAsyncCtx24 + 60 >> 2] = $48; //@line 33561
 HEAP32[$ReallocAsyncCtx24 + 64 >> 2] = $22; //@line 33563
 HEAP32[$ReallocAsyncCtx24 + 68 >> 2] = $24; //@line 33565
 HEAP32[$ReallocAsyncCtx24 + 72 >> 2] = $26; //@line 33567
 HEAP32[$ReallocAsyncCtx24 + 76 >> 2] = $28; //@line 33569
 HEAP32[$ReallocAsyncCtx24 + 80 >> 2] = $30; //@line 33571
 HEAP8[$ReallocAsyncCtx24 + 84 >> 0] = $32; //@line 33573
 HEAP32[$ReallocAsyncCtx24 + 88 >> 2] = $34; //@line 33575
 HEAP32[$ReallocAsyncCtx24 + 92 >> 2] = $36; //@line 33577
 HEAP32[$ReallocAsyncCtx24 + 96 >> 2] = $38; //@line 33579
 HEAP32[$ReallocAsyncCtx24 + 100 >> 2] = $40; //@line 33581
 sp = STACKTOP; //@line 33582
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $2 = 0, $20 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx9 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 10534
 STACKTOP = STACKTOP + 48 | 0; //@line 10535
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 10535
 $vararg_buffer5 = sp + 24 | 0; //@line 10536
 $vararg_buffer3 = sp + 16 | 0; //@line 10537
 $2 = sp + 28 | 0; //@line 10540
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(12178, sp) | 0; //@line 10545
  _printf(12975, sp + 8 | 0) | 0; //@line 10546
  $AsyncCtx9 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10547
  _putchar(10) | 0; //@line 10548
  if (___async) {
   HEAP32[$AsyncCtx9 >> 2] = 335; //@line 10551
   sp = STACKTOP; //@line 10552
   STACKTOP = sp; //@line 10553
   return 0; //@line 10553
  }
  _emscripten_free_async_context($AsyncCtx9 | 0); //@line 10555
  $$1 = -1012; //@line 10556
  STACKTOP = sp; //@line 10557
  return $$1 | 0; //@line 10557
 }
 HEAP32[$2 >> 2] = 2; //@line 10559
 $6 = $0 + 4 | 0; //@line 10560
 $AsyncCtx13 = _emscripten_alloc_async_context(40, sp) | 0; //@line 10561
 $7 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($6, $2) | 0; //@line 10562
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 336; //@line 10565
  HEAP32[$AsyncCtx13 + 4 >> 2] = $2; //@line 10567
  HEAP32[$AsyncCtx13 + 8 >> 2] = $2; //@line 10569
  HEAP8[$AsyncCtx13 + 12 >> 0] = $1; //@line 10571
  HEAP32[$AsyncCtx13 + 16 >> 2] = $6; //@line 10573
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer3; //@line 10575
  HEAP32[$AsyncCtx13 + 24 >> 2] = $vararg_buffer3; //@line 10577
  HEAP32[$AsyncCtx13 + 28 >> 2] = $vararg_buffer5; //@line 10579
  HEAP32[$AsyncCtx13 + 32 >> 2] = $vararg_buffer5; //@line 10581
  HEAP32[$AsyncCtx13 + 36 >> 2] = $2; //@line 10583
  sp = STACKTOP; //@line 10584
  STACKTOP = sp; //@line 10585
  return 0; //@line 10585
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 10587
 do {
  if (!$7) {
   HEAP32[$2 >> 2] = 21; //@line 10591
   HEAP8[$2 + 4 >> 0] = $1; //@line 10593
   $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10594
   $20 = __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $2) | 0; //@line 10595
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 338; //@line 10598
    HEAP32[$AsyncCtx17 + 4 >> 2] = $2; //@line 10600
    sp = STACKTOP; //@line 10601
    STACKTOP = sp; //@line 10602
    return 0; //@line 10602
   } else {
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 10604
    $$0 = $20; //@line 10605
    break;
   }
  } else {
   _printf(12178, $vararg_buffer3) | 0; //@line 10609
   _printf(13036, $vararg_buffer5) | 0; //@line 10610
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10611
   _putchar(10) | 0; //@line 10612
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 337; //@line 10615
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 10617
    sp = STACKTOP; //@line 10618
    STACKTOP = sp; //@line 10619
    return 0; //@line 10619
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10621
    $$0 = -1003; //@line 10622
    break;
   }
  }
 } while (0);
 $$1 = $$0; //@line 10627
 STACKTOP = sp; //@line 10628
 return $$1 | 0; //@line 10628
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 14786
 STACKTOP = STACKTOP + 48 | 0; //@line 14787
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 14787
 $vararg_buffer10 = sp + 32 | 0; //@line 14788
 $vararg_buffer7 = sp + 24 | 0; //@line 14789
 $vararg_buffer3 = sp + 16 | 0; //@line 14790
 $vararg_buffer = sp; //@line 14791
 $0 = sp + 36 | 0; //@line 14792
 $1 = ___cxa_get_globals_fast() | 0; //@line 14793
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 14796
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 14801
   $9 = HEAP32[$7 >> 2] | 0; //@line 14803
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 14806
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 18827; //@line 14812
    _abort_message(18777, $vararg_buffer7); //@line 14813
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 14822
   } else {
    $22 = $3 + 80 | 0; //@line 14824
   }
   HEAP32[$0 >> 2] = $22; //@line 14826
   $23 = HEAP32[$3 >> 2] | 0; //@line 14827
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 14829
   $28 = HEAP32[(HEAP32[110] | 0) + 16 >> 2] | 0; //@line 14832
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 14833
   $29 = FUNCTION_TABLE_iiii[$28 & 15](440, $23, $0) | 0; //@line 14834
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 791; //@line 14837
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14839
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 14841
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 14843
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 14845
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 14847
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 14849
    sp = STACKTOP; //@line 14850
    STACKTOP = sp; //@line 14851
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14853
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 18827; //@line 14855
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 14857
    _abort_message(18736, $vararg_buffer3); //@line 14858
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 14861
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 14864
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14865
   $40 = FUNCTION_TABLE_ii[$39 & 15]($36) | 0; //@line 14866
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 792; //@line 14869
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 14871
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 14873
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 14875
    sp = STACKTOP; //@line 14876
    STACKTOP = sp; //@line 14877
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 14879
    HEAP32[$vararg_buffer >> 2] = 18827; //@line 14880
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 14882
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 14884
    _abort_message(18691, $vararg_buffer); //@line 14885
   }
  }
 }
 _abort_message(18815, $vararg_buffer10); //@line 14890
}
function __ZN18LoRaMacChannelPlan11remove_planEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $32 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20330
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $39 = -1002; //@line 20334
  return $39 | 0; //@line 20335
 }
 $4 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 20338
 $6 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 20340
 $8 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 1) | 0; //@line 20342
 if (!($4 << 24 >> 24)) {
  $39 = 0; //@line 20345
  return $39 | 0; //@line 20346
 }
 $10 = $4 & 255; //@line 20348
 $indvars$iv = 0; //@line 20349
 while (1) {
  if (!(__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $8, $indvars$iv) | 0)) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $6, $indvars$iv) | 0) {
    if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
     $39 = -1002; //@line 20360
     label = 15; //@line 20361
     break;
    }
    if ($indvars$iv >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) >>> 0) {
     $39 = -1003; //@line 20369
     label = 15; //@line 20370
     break;
    }
    $21 = HEAP32[$0 >> 2] | 0; //@line 20373
    $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 20376
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 20378
    $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv & 255) | 0; //@line 20379
    if (___async) {
     label = 9; //@line 20382
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 20385
    if (!$26) {
     $39 = -1003; //@line 20387
     label = 15; //@line 20388
     break;
    }
    $32 = HEAP32[$0 >> 2] | 0; //@line 20391
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20392
    __ZN7LoRaPHY18put_radio_to_sleepEv($32); //@line 20393
    if (___async) {
     label = 12; //@line 20396
     break;
    }
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 20399
   }
  }
  $indvars$iv$next = $indvars$iv + 1 | 0; //@line 20402
  if ($indvars$iv$next >>> 0 < $10 >>> 0) {
   $indvars$iv = $indvars$iv$next; //@line 20405
  } else {
   $39 = 0; //@line 20407
   label = 15; //@line 20408
   break;
  }
 }
 if ((label | 0) == 9) {
  HEAP32[$AsyncCtx >> 2] = 591; //@line 20413
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 20415
  HEAP32[$AsyncCtx + 8 >> 2] = $indvars$iv; //@line 20417
  HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 20419
  HEAP32[$AsyncCtx + 16 >> 2] = $8; //@line 20421
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 20423
  sp = STACKTOP; //@line 20424
  return 0; //@line 20425
 } else if ((label | 0) == 12) {
  HEAP32[$AsyncCtx2 >> 2] = 592; //@line 20428
  HEAP32[$AsyncCtx2 + 4 >> 2] = $indvars$iv; //@line 20430
  HEAP32[$AsyncCtx2 + 8 >> 2] = $10; //@line 20432
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 20434
  HEAP32[$AsyncCtx2 + 16 >> 2] = $8; //@line 20436
  HEAP32[$AsyncCtx2 + 20 >> 2] = $6; //@line 20438
  sp = STACKTOP; //@line 20439
  return 0; //@line 20440
 } else if ((label | 0) == 15) {
  return $39 | 0; //@line 20443
 }
 return 0; //@line 20445
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_236($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 8062
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8066
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8068
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8070
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8072
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8074
 $12 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 8075
 if ($12 | 0) {
  $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 8079
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 8080
  FUNCTION_TABLE_vi[$15 & 1023]($4); //@line 8081
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 224; //@line 8084
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 8085
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 8086
   $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 8087
   HEAP32[$17 >> 2] = $6; //@line 8088
   $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 8089
   HEAP32[$18 >> 2] = $8; //@line 8090
   $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 8091
   HEAP32[$19 >> 2] = $10; //@line 8092
   sp = STACKTOP; //@line 8093
   return;
  }
  ___async_unwind = 0; //@line 8096
  HEAP32[$ReallocAsyncCtx4 >> 2] = 224; //@line 8097
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 8098
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 8099
  $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 8100
  HEAP32[$17 >> 2] = $6; //@line 8101
  $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 8102
  HEAP32[$18 >> 2] = $8; //@line 8103
  $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 8104
  HEAP32[$19 >> 2] = $10; //@line 8105
  sp = STACKTOP; //@line 8106
  return;
 }
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(16) | 0; //@line 8111
  _mbed_assert_internal(13142, 12226, 909); //@line 8112
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 225; //@line 8115
   $21 = $ReallocAsyncCtx10 + 4 | 0; //@line 8116
   HEAP32[$21 >> 2] = $6; //@line 8117
   $22 = $ReallocAsyncCtx10 + 8 | 0; //@line 8118
   HEAP32[$22 >> 2] = $8; //@line 8119
   $23 = $ReallocAsyncCtx10 + 12 | 0; //@line 8120
   HEAP32[$23 >> 2] = $10; //@line 8121
   sp = STACKTOP; //@line 8122
   return;
  }
  ___async_unwind = 0; //@line 8125
  HEAP32[$ReallocAsyncCtx10 >> 2] = 225; //@line 8126
  $21 = $ReallocAsyncCtx10 + 4 | 0; //@line 8127
  HEAP32[$21 >> 2] = $6; //@line 8128
  $22 = $ReallocAsyncCtx10 + 8 | 0; //@line 8129
  HEAP32[$22 >> 2] = $8; //@line 8130
  $23 = $ReallocAsyncCtx10 + 12 | 0; //@line 8131
  HEAP32[$23 >> 2] = $10; //@line 8132
  sp = STACKTOP; //@line 8133
  return;
 }
 if (!(HEAP8[$6 + 11 >> 0] | 0)) {
  return;
 }
 $27 = HEAP8[$8 >> 0] | 0; //@line 8142
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 8143
 __ZN12LoRaWANStack9handle_txEhPKhth($10, $27, 0, 0, 2) | 0; //@line 8144
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 226; //@line 8147
  sp = STACKTOP; //@line 8148
  return;
 }
 ___async_unwind = 0; //@line 8151
 HEAP32[$ReallocAsyncCtx7 >> 2] = 226; //@line 8152
 sp = STACKTOP; //@line 8153
 return;
}
function _main__async_cb_134($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 4
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14
 $$pre$i$i = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 15
 HEAP32[5887] = $$pre$i$i; //@line 16
 if ($$pre$i$i | 0) {
  $14 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 21
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 22
  FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 23
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 760; //@line 26
   $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 27
   HEAP32[$15 >> 2] = $2; //@line 28
   $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 29
   HEAP32[$16 >> 2] = $10; //@line 30
   $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 31
   HEAP32[$17 >> 2] = $6; //@line 32
   $18 = $ReallocAsyncCtx4 + 16 | 0; //@line 33
   HEAP32[$18 >> 2] = $8; //@line 34
   sp = STACKTOP; //@line 35
   return;
  }
  ___async_unwind = 0; //@line 38
  HEAP32[$ReallocAsyncCtx4 >> 2] = 760; //@line 39
  $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 40
  HEAP32[$15 >> 2] = $2; //@line 41
  $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 42
  HEAP32[$16 >> 2] = $10; //@line 43
  $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 44
  HEAP32[$17 >> 2] = $6; //@line 45
  $18 = $ReallocAsyncCtx4 + 16 | 0; //@line 46
  HEAP32[$18 >> 2] = $8; //@line 47
  sp = STACKTOP; //@line 48
  return;
 }
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(23528, 23536) | 0; //@line 51
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(23528) | 0) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 55
  _puts(15731) | 0; //@line 56
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 761; //@line 59
   sp = STACKTOP; //@line 60
   return;
  }
  ___async_unwind = 0; //@line 63
  HEAP32[$ReallocAsyncCtx6 >> 2] = 761; //@line 64
  sp = STACKTOP; //@line 65
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(23528, 5) | 0; //@line 68
 HEAP8[$10 >> 0] = 0; //@line 69
 HEAP32[$10 + 4 >> 2] = 15592; //@line 71
 HEAP32[$10 + 8 >> 2] = 15765; //@line 73
 HEAP32[$10 + 12 >> 2] = 15773; //@line 75
 HEAP8[$10 + 16 >> 0] = 3; //@line 77
 $25 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(23528, $10) | 0; //@line 78
 switch ($25 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$6 >> 2] = $25; //@line 84
   _printf(15789, $6) | 0; //@line 85
   HEAP32[___async_retval >> 2] = -1; //@line 87
   return;
  }
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 91
 _puts(15818) | 0; //@line 92
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 762; //@line 95
  $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 96
  HEAP32[$26 >> 2] = $10; //@line 97
  sp = STACKTOP; //@line 98
  return;
 }
 ___async_unwind = 0; //@line 101
 HEAP32[$ReallocAsyncCtx5 >> 2] = 762; //@line 102
 $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 103
 HEAP32[$26 >> 2] = $10; //@line 104
 sp = STACKTOP; //@line 105
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $19 = 0, $22 = 0, $4 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22621
 _mbedtls_cipher_init(22892); //@line 22622
 $4 = _mbedtls_cipher_info_from_type(2) | 0; //@line 22623
 if (!$4) {
  $$0 = -24960; //@line 22626
 } else {
  $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 22628
  $6 = _mbedtls_cipher_setup(22892, $4) | 0; //@line 22629
  if (___async) {
   HEAP32[$AsyncCtx11 >> 2] = 606; //@line 22632
   HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 22634
   HEAP16[$AsyncCtx11 + 8 >> 1] = $1; //@line 22636
   HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 22638
   HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 22640
   sp = STACKTOP; //@line 22641
   return 0; //@line 22642
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 22644
  if (!$6) {
   $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 22647
   $12 = _mbedtls_cipher_cmac_starts(22892, $2, 128) | 0; //@line 22648
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 607; //@line 22651
    HEAP16[$AsyncCtx7 + 4 >> 1] = $1; //@line 22653
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 22655
    HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 22657
    sp = STACKTOP; //@line 22658
    return 0; //@line 22659
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 22661
   if (!$12) {
    $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 22666
    $19 = _mbedtls_cipher_cmac_update(22892, $0, $1 & 255) | 0; //@line 22667
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 608; //@line 22670
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 22672
     sp = STACKTOP; //@line 22673
     return 0; //@line 22674
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 22676
    if (!$19) {
     $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22679
     $22 = _mbedtls_cipher_cmac_finish(22892, 24200) | 0; //@line 22680
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 609; //@line 22683
      HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 22685
      sp = STACKTOP; //@line 22686
      return 0; //@line 22687
     }
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 22689
     if (!$22) {
      HEAP32[$3 >> 2] = (HEAPU8[24202] | 0) << 16 | (HEAPU8[24203] | 0) << 24 | (HEAPU8[24201] | 0) << 8 | (HEAPU8[24200] | 0); //@line 22706
      $$0 = 0; //@line 22707
     } else {
      $$0 = $22; //@line 22709
     }
    } else {
     $$0 = $19; //@line 22712
    }
   } else {
    $$0 = $12; //@line 22715
   }
  } else {
   $$0 = $6; //@line 22718
  }
 }
 $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22721
 _mbedtls_cipher_free(22892); //@line 22722
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 610; //@line 22725
  HEAP32[$AsyncCtx15 + 4 >> 2] = $$0; //@line 22727
  sp = STACKTOP; //@line 22728
  return 0; //@line 22729
 } else {
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 22731
  return $$0 | 0; //@line 22732
 }
 return 0; //@line 22734
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_296($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $46 = 0, $50 = 0, $54 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11650
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 11652
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11654
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11656
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11658
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11660
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11662
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11664
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11666
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11668
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11670
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11672
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11674
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11676
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 11678
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 11680
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 11682
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 11684
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 11686
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 11688
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 11690
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 11692
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 11696
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 11700
 $54 = $8 + 689 | 0; //@line 11704
 HEAP8[$54 >> 0] = HEAP32[$0 + 88 >> 2]; //@line 11705
 _printf(10904, $46) | 0; //@line 11706
 HEAP32[$50 >> 2] = HEAPU8[$54 >> 0]; //@line 11709
 _printf(11079, $50) | 0; //@line 11710
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(88) | 0; //@line 11711
 _putchar(10) | 0; //@line 11712
 if (!___async) {
  ___async_unwind = 0; //@line 11715
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 93; //@line 11717
 HEAP16[$ReallocAsyncCtx7 + 4 >> 1] = $2; //@line 11719
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 11721
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 11723
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 11725
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 11727
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $12; //@line 11729
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $14; //@line 11731
 HEAP32[$ReallocAsyncCtx7 + 32 >> 2] = $16; //@line 11733
 HEAP32[$ReallocAsyncCtx7 + 36 >> 2] = $18; //@line 11735
 HEAP32[$ReallocAsyncCtx7 + 40 >> 2] = $20; //@line 11737
 HEAP32[$ReallocAsyncCtx7 + 44 >> 2] = $22; //@line 11739
 HEAP32[$ReallocAsyncCtx7 + 48 >> 2] = $24; //@line 11741
 HEAP32[$ReallocAsyncCtx7 + 52 >> 2] = $26; //@line 11743
 HEAP32[$ReallocAsyncCtx7 + 56 >> 2] = $28; //@line 11745
 HEAP32[$ReallocAsyncCtx7 + 60 >> 2] = $30; //@line 11747
 HEAP32[$ReallocAsyncCtx7 + 64 >> 2] = $32; //@line 11749
 HEAP32[$ReallocAsyncCtx7 + 68 >> 2] = $34; //@line 11751
 HEAP32[$ReallocAsyncCtx7 + 72 >> 2] = $36; //@line 11753
 HEAP32[$ReallocAsyncCtx7 + 76 >> 2] = $38; //@line 11755
 HEAP32[$ReallocAsyncCtx7 + 80 >> 2] = $40; //@line 11757
 HEAP32[$ReallocAsyncCtx7 + 84 >> 2] = $42; //@line 11759
 sp = STACKTOP; //@line 11760
 return;
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10453
 STACKTOP = STACKTOP + 48 | 0; //@line 10454
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 10454
 $vararg_buffer3 = sp + 16 | 0; //@line 10455
 $vararg_buffer = sp; //@line 10456
 $3 = sp + 32 | 0; //@line 10457
 $4 = $0 + 28 | 0; //@line 10458
 $5 = HEAP32[$4 >> 2] | 0; //@line 10459
 HEAP32[$3 >> 2] = $5; //@line 10460
 $7 = $0 + 20 | 0; //@line 10462
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 10464
 HEAP32[$3 + 4 >> 2] = $9; //@line 10465
 HEAP32[$3 + 8 >> 2] = $1; //@line 10467
 HEAP32[$3 + 12 >> 2] = $2; //@line 10469
 $12 = $9 + $2 | 0; //@line 10470
 $13 = $0 + 60 | 0; //@line 10471
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 10474
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 10476
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 10478
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 10480
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 10484
  } else {
   $$04756 = 2; //@line 10486
   $$04855 = $12; //@line 10486
   $$04954 = $3; //@line 10486
   $27 = $17; //@line 10486
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 10492
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 10494
    $38 = $27 >>> 0 > $37 >>> 0; //@line 10495
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 10497
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 10499
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 10501
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 10504
    $44 = $$150 + 4 | 0; //@line 10505
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 10508
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 10511
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 10513
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 10515
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 10517
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 10520
     break L1;
    } else {
     $$04756 = $$1; //@line 10523
     $$04954 = $$150; //@line 10523
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 10527
   HEAP32[$4 >> 2] = 0; //@line 10528
   HEAP32[$7 >> 2] = 0; //@line 10529
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 10532
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 10535
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 10540
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 10546
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 10551
  $25 = $20; //@line 10552
  HEAP32[$4 >> 2] = $25; //@line 10553
  HEAP32[$7 >> 2] = $25; //@line 10554
  $$051 = $2; //@line 10555
 }
 STACKTOP = sp; //@line 10557
 return $$051 | 0; //@line 10557
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb_252($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $indvars$iv$reg2mem$0 = 0, label = 0, sp = 0, $indvars$iv$reg2mem$0$looptemp = 0;
 sp = STACKTOP; //@line 8823
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8827
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8829
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8831
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8833
 $indvars$iv$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 8834
 while (1) {
  $indvars$iv$reg2mem$0$looptemp = $indvars$iv$reg2mem$0;
  $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0 + 1 | 0; //@line 8836
  if ($indvars$iv$reg2mem$0 >>> 0 >= $4 >>> 0) {
   $35 = 0; //@line 8839
   label = 11; //@line 8840
   break;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $8, $indvars$iv$reg2mem$0) | 0) {
   $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0; //@line 8846
   continue;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $10, $indvars$iv$reg2mem$0) | 0) {
   break;
  }
 }
 if ((label | 0) == 11) {
  $34 = ___async_retval; //@line 8858
  HEAP32[$34 >> 2] = $35; //@line 8859
  return;
 }
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$6 >> 2] | 0) | 0)) {
  $35 = -1002; //@line 8865
  $34 = ___async_retval; //@line 8866
  HEAP32[$34 >> 2] = $35; //@line 8867
  return;
 }
 if ($indvars$iv$reg2mem$0 >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$6 >> 2] | 0) | 0) & 255) >>> 0) {
  $35 = -1003; //@line 8875
  $34 = ___async_retval; //@line 8876
  HEAP32[$34 >> 2] = $35; //@line 8877
  return;
 }
 $21 = HEAP32[$6 >> 2] | 0; //@line 8880
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 8883
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 8885
 $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv$reg2mem$0 & 255) | 0; //@line 8886
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 591; //@line 8889
  $27 = $ReallocAsyncCtx + 4 | 0; //@line 8890
  HEAP32[$27 >> 2] = $6; //@line 8891
  $28 = $ReallocAsyncCtx + 8 | 0; //@line 8892
  HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 8893
  $29 = $ReallocAsyncCtx + 12 | 0; //@line 8894
  HEAP32[$29 >> 2] = $4; //@line 8895
  $30 = $ReallocAsyncCtx + 16 | 0; //@line 8896
  HEAP32[$30 >> 2] = $8; //@line 8897
  $31 = $ReallocAsyncCtx + 20 | 0; //@line 8898
  HEAP32[$31 >> 2] = $10; //@line 8899
  sp = STACKTOP; //@line 8900
  return;
 }
 HEAP8[___async_retval >> 0] = $26 & 1; //@line 8905
 ___async_unwind = 0; //@line 8906
 HEAP32[$ReallocAsyncCtx >> 2] = 591; //@line 8907
 $27 = $ReallocAsyncCtx + 4 | 0; //@line 8908
 HEAP32[$27 >> 2] = $6; //@line 8909
 $28 = $ReallocAsyncCtx + 8 | 0; //@line 8910
 HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 8911
 $29 = $ReallocAsyncCtx + 12 | 0; //@line 8912
 HEAP32[$29 >> 2] = $4; //@line 8913
 $30 = $ReallocAsyncCtx + 16 | 0; //@line 8914
 HEAP32[$30 >> 2] = $8; //@line 8915
 $31 = $ReallocAsyncCtx + 20 | 0; //@line 8916
 HEAP32[$31 >> 2] = $10; //@line 8917
 sp = STACKTOP; //@line 8918
 return;
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_447($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32366
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 32372
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32374
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32378
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32380
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32382
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32384
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32386
 $22 = HEAP16[$0 + 44 >> 1] | 0; //@line 32388
 $24 = HEAP8[$0 + 46 >> 0] | 0; //@line 32390
 $26 = HEAP8[$0 + 47 >> 0] | 0; //@line 32392
 $28 = HEAP8[$0 + 48 >> 0] | 0; //@line 32394
 $30 = HEAP32[$0 + 52 >> 2] | 0; //@line 32396
 $32 = HEAP32[$0 + 56 >> 2] | 0; //@line 32398
 $34 = HEAP32[$0 + 60 >> 2] | 0; //@line 32400
 $36 = HEAP32[$0 + 64 >> 2] | 0; //@line 32402
 $38 = HEAP32[$0 + 68 >> 2] | 0; //@line 32404
 $40 = HEAP8[$0 + 72 >> 0] | 0; //@line 32406
 $42 = HEAP8[$0 + 73 >> 0] | 0; //@line 32408
 $44 = HEAP8[$0 + 74 >> 0] | 0; //@line 32410
 $46 = HEAP32[$0 + 76 >> 2] | 0; //@line 32412
 $48 = HEAP32[$0 + 80 >> 2] | 0; //@line 32414
 $50 = HEAP32[$0 + 84 >> 2] | 0; //@line 32416
 $52 = HEAP32[$0 + 88 >> 2] | 0; //@line 32418
 _printf(10904, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 32419
 HEAP32[$8 >> 2] = $6 << 24 >> 24; //@line 32421
 _printf(11557, $8) | 0; //@line 32422
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(76) | 0; //@line 32423
 _putchar(10) | 0; //@line 32424
 if (!___async) {
  ___async_unwind = 0; //@line 32427
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 64; //@line 32429
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $12; //@line 32431
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $14; //@line 32433
 HEAP8[$ReallocAsyncCtx3 + 12 >> 0] = $6; //@line 32435
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 32437
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $18; //@line 32439
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $20; //@line 32441
 HEAP16[$ReallocAsyncCtx3 + 28 >> 1] = $22; //@line 32443
 HEAP8[$ReallocAsyncCtx3 + 30 >> 0] = $24; //@line 32445
 HEAP8[$ReallocAsyncCtx3 + 31 >> 0] = $26; //@line 32447
 HEAP8[$ReallocAsyncCtx3 + 32 >> 0] = $28; //@line 32449
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $30; //@line 32451
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $32; //@line 32453
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $34; //@line 32455
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $36; //@line 32457
 HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $38; //@line 32459
 HEAP8[$ReallocAsyncCtx3 + 56 >> 0] = $40; //@line 32461
 HEAP8[$ReallocAsyncCtx3 + 57 >> 0] = $42; //@line 32463
 HEAP8[$ReallocAsyncCtx3 + 58 >> 0] = $44; //@line 32465
 HEAP32[$ReallocAsyncCtx3 + 60 >> 2] = $46; //@line 32467
 HEAP32[$ReallocAsyncCtx3 + 64 >> 2] = $48; //@line 32469
 HEAP32[$ReallocAsyncCtx3 + 68 >> 2] = $50; //@line 32471
 HEAP32[$ReallocAsyncCtx3 + 72 >> 2] = $52; //@line 32473
 sp = STACKTOP; //@line 32474
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_261($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9196
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9198
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9200
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9202
 $11 = $4 + 1880 | 0; //@line 9207
 $12 = $4 + 1892 | 0; //@line 9208
 $13 = HEAP32[$12 >> 2] | 0; //@line 9209
 $14 = ($13 | 0) != 0; //@line 9210
 if ((HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0) == 2) {
  if (!$14) {
   return;
  }
  $16 = HEAP32[$4 + 2288 >> 2] | 0; //@line 9216
  $18 = HEAP32[$13 + 4 >> 2] | 0; //@line 9218
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 9219
  FUNCTION_TABLE_vii[$18 & 31]($2, $11); //@line 9220
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 204; //@line 9223
   $19 = $ReallocAsyncCtx + 4 | 0; //@line 9224
   HEAP32[$19 >> 2] = $12; //@line 9225
   $20 = $ReallocAsyncCtx + 8 | 0; //@line 9226
   HEAP32[$20 >> 2] = $2; //@line 9227
   $21 = $ReallocAsyncCtx + 12 | 0; //@line 9228
   HEAP32[$21 >> 2] = $16; //@line 9229
   $22 = $ReallocAsyncCtx + 16 | 0; //@line 9230
   HEAP32[$22 >> 2] = $2; //@line 9231
   sp = STACKTOP; //@line 9232
   return;
  }
  ___async_unwind = 0; //@line 9235
  HEAP32[$ReallocAsyncCtx >> 2] = 204; //@line 9236
  $19 = $ReallocAsyncCtx + 4 | 0; //@line 9237
  HEAP32[$19 >> 2] = $12; //@line 9238
  $20 = $ReallocAsyncCtx + 8 | 0; //@line 9239
  HEAP32[$20 >> 2] = $2; //@line 9240
  $21 = $ReallocAsyncCtx + 12 | 0; //@line 9241
  HEAP32[$21 >> 2] = $16; //@line 9242
  $22 = $ReallocAsyncCtx + 16 | 0; //@line 9243
  HEAP32[$22 >> 2] = $2; //@line 9244
  sp = STACKTOP; //@line 9245
  return;
 } else {
  if (!$14) {
   return;
  }
  $24 = HEAP32[$4 + 2288 >> 2] | 0; //@line 9252
  $26 = HEAP32[$13 + 4 >> 2] | 0; //@line 9254
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 9255
  FUNCTION_TABLE_vii[$26 & 31]($6, $11); //@line 9256
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 208; //@line 9259
   $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 9260
   HEAP32[$27 >> 2] = $12; //@line 9261
   $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 9262
   HEAP32[$28 >> 2] = $6; //@line 9263
   $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 9264
   HEAP32[$29 >> 2] = $24; //@line 9265
   $30 = $ReallocAsyncCtx3 + 16 | 0; //@line 9266
   HEAP32[$30 >> 2] = $6; //@line 9267
   sp = STACKTOP; //@line 9268
   return;
  }
  ___async_unwind = 0; //@line 9271
  HEAP32[$ReallocAsyncCtx3 >> 2] = 208; //@line 9272
  $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 9273
  HEAP32[$27 >> 2] = $12; //@line 9274
  $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 9275
  HEAP32[$28 >> 2] = $6; //@line 9276
  $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 9277
  HEAP32[$29 >> 2] = $24; //@line 9278
  $30 = $ReallocAsyncCtx3 + 16 | 0; //@line 9279
  HEAP32[$30 >> 2] = $6; //@line 9280
  sp = STACKTOP; //@line 9281
  return;
 }
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$026 = 0, $$1 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $28 = 0, $31 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20121
 STACKTOP = STACKTOP + 16 | 0; //@line 20122
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20122
 $2 = sp; //@line 20123
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$1 = -1002; //@line 20127
  STACKTOP = sp; //@line 20128
  return $$1 | 0; //@line 20128
 }
 $6 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 20131
 $7 = HEAP8[$1 >> 0] | 0; //@line 20132
 if (($7 & 255) > ($6 & 255)) {
  $$1 = -1003; //@line 20135
  STACKTOP = sp; //@line 20136
  return $$1 | 0; //@line 20136
 }
 $9 = $1 + 4 | 0; //@line 20138
 if (!($7 << 24 >> 24)) {
  $$1 = 0; //@line 20141
  STACKTOP = sp; //@line 20142
  return $$1 | 0; //@line 20142
 }
 $11 = $2 + 9 | 0; //@line 20144
 $12 = $2 + 8 | 0; //@line 20145
 $13 = $2 + 4 | 0; //@line 20146
 $$026 = 0; //@line 20147
 $20 = 0; //@line 20147
 while (1) {
  $18 = HEAP32[$9 >> 2] | 0; //@line 20149
  HEAP8[$11 >> 0] = HEAP8[$18 + ($20 << 4) + 13 >> 0] | 0; //@line 20152
  HEAP8[$12 >> 0] = HEAP8[$18 + ($20 << 4) + 12 >> 0] | 0; //@line 20155
  HEAP32[$2 >> 2] = HEAP32[$18 + ($20 << 4) + 4 >> 2]; //@line 20158
  HEAP32[$13 >> 2] = HEAP32[$18 + ($20 << 4) + 8 >> 2]; //@line 20161
  $28 = HEAP32[$0 >> 2] | 0; //@line 20162
  $31 = HEAP32[(HEAP32[$28 >> 2] | 0) + 60 >> 2] | 0; //@line 20165
  $33 = HEAP8[$18 + ($20 << 4) >> 0] | 0; //@line 20167
  $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 20168
  $34 = FUNCTION_TABLE_iiii[$31 & 15]($28, $2, $33) | 0; //@line 20169
  if (___async) {
   label = 7; //@line 20172
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 20175
  $16 = $$026 + 1 << 24 >> 24; //@line 20177
  if ($34 | 0) {
   $$1 = $34; //@line 20179
   label = 9; //@line 20180
   break;
  }
  if (($16 & 255) < (HEAPU8[$1 >> 0] | 0)) {
   $$026 = $16; //@line 20187
   $20 = $16 & 255; //@line 20187
  } else {
   $$1 = 0; //@line 20189
   label = 9; //@line 20190
   break;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx >> 2] = 590; //@line 20195
  HEAP8[$AsyncCtx + 4 >> 0] = $$026; //@line 20197
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 20199
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 20201
  HEAP32[$AsyncCtx + 16 >> 2] = $9; //@line 20203
  HEAP32[$AsyncCtx + 20 >> 2] = $11; //@line 20205
  HEAP32[$AsyncCtx + 24 >> 2] = $12; //@line 20207
  HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 20209
  HEAP32[$AsyncCtx + 32 >> 2] = $13; //@line 20211
  HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 20213
  HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 20215
  sp = STACKTOP; //@line 20216
  STACKTOP = sp; //@line 20217
  return 0; //@line 20217
 } else if ((label | 0) == 9) {
  STACKTOP = sp; //@line 20220
  return $$1 | 0; //@line 20220
 }
 return 0; //@line 20222
}
function __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh__async_cb_177($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $38 = 0, $4 = 0, $42 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3207
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3209
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3211
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3213
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3215
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3219
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3223
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3225
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 3229
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 3233
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 3235
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 3237
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 3241
 _emscripten_asm_const_i(6) | 0; //@line 3244
 $38 = $2 + 752 | 0; //@line 3245
 if ((HEAP32[$38 >> 2] | 0) != ($4 | 0)) {
  _printf(10904, $8) | 0; //@line 3249
  HEAP32[$12 >> 2] = HEAP32[$38 >> 2]; //@line 3251
  HEAP32[$12 + 4 >> 2] = $4; //@line 3253
  _printf(11777, $12) | 0; //@line 3254
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 3255
  _putchar(10) | 0; //@line 3256
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 150; //@line 3259
   sp = STACKTOP; //@line 3260
   return;
  }
  ___async_unwind = 0; //@line 3263
  HEAP32[$ReallocAsyncCtx3 >> 2] = 150; //@line 3264
  sp = STACKTOP; //@line 3265
  return;
 }
 $42 = $2 + 756 | 0; //@line 3268
 if ((HEAP32[$42 >> 2] | 0) != ($6 | 0)) {
  _printf(10904, $18) | 0; //@line 3272
  HEAP32[$22 >> 2] = HEAP32[$42 >> 2]; //@line 3274
  HEAP32[$22 + 4 >> 2] = $6; //@line 3276
  _printf(11824, $22) | 0; //@line 3277
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 3278
  _putchar(10) | 0; //@line 3279
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 151; //@line 3282
   sp = STACKTOP; //@line 3283
   return;
  }
  ___async_unwind = 0; //@line 3286
  HEAP32[$ReallocAsyncCtx2 >> 2] = 151; //@line 3287
  sp = STACKTOP; //@line 3288
  return;
 }
 $46 = $2 + 692 | 0; //@line 3291
 if ((HEAP32[$46 >> 2] | 0) == ($16 | 0)) {
  _memcpy($2 + 792 | 0, $26 | 0, $28 | 0) | 0; //@line 3296
  HEAP8[$2 + 782 >> 0] = $28; //@line 3299
  HEAP8[$2 + 781 >> 0] = -35; //@line 3301
  HEAP8[$2 + 780 >> 0] = -5; //@line 3303
  HEAP8[$2 + 783 >> 0] = 1; //@line 3305
  HEAP32[$2 + 784 >> 2] = _emscripten_asm_const_i(3) | 0; //@line 3308
  return;
 }
 _printf(10904, $30) | 0; //@line 3311
 HEAP32[$34 >> 2] = HEAP32[$46 >> 2]; //@line 3313
 HEAP32[$34 + 4 >> 2] = $16; //@line 3315
 _printf(11871, $34) | 0; //@line 3316
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 3317
 _putchar(10) | 0; //@line 3318
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 152; //@line 3321
  sp = STACKTOP; //@line 3322
  return;
 }
 ___async_unwind = 0; //@line 3325
 HEAP32[$ReallocAsyncCtx >> 2] = 152; //@line 3326
 sp = STACKTOP; //@line 3327
 return;
}
function _initialize__async_cb_482($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 35473
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35475
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35477
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35479
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35481
 $10 = 7 << 32 + -4; //@line 35483
 $11 = ___muldi3($10 | 0, 0, 1e6, 0) | 0; //@line 35484
 $12 = tempRet0; //@line 35485
 $13 = _i64Add($2 | 0, 0, -1, -1) | 0; //@line 35486
 $15 = _i64Add($13 | 0, tempRet0 | 0, $11 | 0, $12 | 0) | 0; //@line 35488
 $17 = ___udivdi3($15 | 0, tempRet0 | 0, $2 | 0, 0) | 0; //@line 35490
 $18 = tempRet0; //@line 35491
 $19 = HEAP32[$4 >> 2] | 0; //@line 35492
 HEAP32[$19 >> 2] = 0; //@line 35493
 HEAP32[$19 + 4 >> 2] = 0; //@line 35495
 $23 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 35498
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 35499
 $24 = FUNCTION_TABLE_i[$23 & 7]() | 0; //@line 35500
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 706; //@line 35503
  $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 35504
  HEAP32[$25 >> 2] = $4; //@line 35505
  $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 35506
  HEAP32[$26 >> 2] = $2; //@line 35507
  $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 35508
  HEAP32[$27 >> 2] = 32; //@line 35509
  $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 35510
  HEAP32[$28 >> 2] = $10; //@line 35511
  $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 35512
  $30 = $29; //@line 35513
  $31 = $30; //@line 35514
  HEAP32[$31 >> 2] = $17; //@line 35515
  $32 = $30 + 4 | 0; //@line 35516
  $33 = $32; //@line 35517
  HEAP32[$33 >> 2] = $18; //@line 35518
  $34 = $ReallocAsyncCtx3 + 32 | 0; //@line 35519
  HEAP32[$34 >> 2] = $6; //@line 35520
  $35 = $ReallocAsyncCtx3 + 36 | 0; //@line 35521
  HEAP32[$35 >> 2] = $8; //@line 35522
  sp = STACKTOP; //@line 35523
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 35527
 ___async_unwind = 0; //@line 35528
 HEAP32[$ReallocAsyncCtx3 >> 2] = 706; //@line 35529
 $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 35530
 HEAP32[$25 >> 2] = $4; //@line 35531
 $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 35532
 HEAP32[$26 >> 2] = $2; //@line 35533
 $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 35534
 HEAP32[$27 >> 2] = 32; //@line 35535
 $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 35536
 HEAP32[$28 >> 2] = $10; //@line 35537
 $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 35538
 $30 = $29; //@line 35539
 $31 = $30; //@line 35540
 HEAP32[$31 >> 2] = $17; //@line 35541
 $32 = $30 + 4 | 0; //@line 35542
 $33 = $32; //@line 35543
 HEAP32[$33 >> 2] = $18; //@line 35544
 $34 = $ReallocAsyncCtx3 + 32 | 0; //@line 35545
 HEAP32[$34 >> 2] = $6; //@line 35546
 $35 = $ReallocAsyncCtx3 + 36 | 0; //@line 35547
 HEAP32[$35 >> 2] = $8; //@line 35548
 sp = STACKTOP; //@line 35549
 return;
}
function __ZN7LoRaPHY11add_channelEP16channel_params_th($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$$123$off0 = 0, $$024 = 0, $$4$off0 = 0, $$5$off039 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $22 = 0, $35 = 0, $43 = 0, $44 = 0, $45 = 0, $50 = 0, $52 = 0, $6 = 0, $62 = 0, $AsyncCtx = 0, $not$ = 0, sp = 0;
 sp = STACKTOP; //@line 25473
 if (!(HEAP8[$0 + 16 >> 0] | 0)) {
  $$024 = -1003; //@line 25478
  return $$024 | 0; //@line 25479
 }
 $6 = $2 & 255; //@line 25481
 if ((HEAPU8[$0 + 20 >> 0] | 0) <= ($2 & 255)) {
  $$024 = -1003; //@line 25486
  return $$024 | 0; //@line 25487
 }
 $11 = HEAP8[$1 + 8 >> 0] | 0; //@line 25490
 $13 = ($11 << 4 & 255) << 24 >> 24 >> 4; //@line 25492
 $15 = HEAP8[$0 + 26 >> 0] | 0; //@line 25494
 $17 = HEAP8[$0 + 27 >> 0] | 0; //@line 25496
 $20 = $11 << 24 >> 24 >> 4; //@line 25500
 $22 = $20 << 24 >> 24 <= $17 << 24 >> 24; //@line 25502
 $$$123$off0 = $13 << 24 >> 24 > $20 << 24 >> 24 | (($13 << 24 >> 24 > $17 << 24 >> 24 ? 1 : $13 << 24 >> 24 < $15 << 24 >> 24) | $20 << 24 >> 24 >= $15 << 24 >> 24 & $22 ^ 1); //@line 25507
 if ((HEAPU8[$0 + 18 >> 0] | 0) > ($2 & 255)) {
  $$4$off0 = ($13 << 24 >> 24 | 0) > ($15 & 255 | 0) | $$$123$off0 | $22 & $20 << 24 >> 24 >= (HEAP8[$0 + 31 >> 0] | 0) ^ 1; //@line 25521
  $35 = HEAP32[$1 >> 2] | 0; //@line 25522
  if (($35 | 0) == (HEAP32[(HEAP32[$0 + 112 >> 2] | 0) + ($6 * 12 | 0) >> 2] | 0)) {
   $$5$off039 = $$4$off0; //@line 25529
   $44 = $35; //@line 25529
  } else {
   $$024 = $$4$off0 ? -1006 : -1004; //@line 25532
   return $$024 | 0; //@line 25533
  }
 } else {
  $$5$off039 = $$$123$off0; //@line 25537
  $44 = HEAP32[$1 >> 2] | 0; //@line 25537
 }
 $43 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 25541
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 25542
 $45 = FUNCTION_TABLE_iii[$43 & 31]($0, $44) | 0; //@line 25543
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 640; //@line 25546
  HEAP8[$AsyncCtx + 4 >> 0] = $$5$off039 & 1; //@line 25549
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 25551
  HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 25553
  HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 25555
  sp = STACKTOP; //@line 25556
  return 0; //@line 25557
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 25559
 $not$ = $45 ^ 1; //@line 25560
 if ($$5$off039 | $not$) {
  $$024 = $$5$off039 ? $$5$off039 & $not$ ? -1006 : -1005 : -1004; //@line 25566
  return $$024 | 0; //@line 25567
 }
 $50 = $0 + 112 | 0; //@line 25569
 $52 = (HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 25571
 HEAP32[$52 >> 2] = HEAP32[$1 >> 2]; //@line 25572
 HEAP32[$52 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 25572
 HEAP32[$52 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 25572
 HEAP8[(HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$1 + 9 >> 0] | 0; //@line 25577
 $62 = (HEAP32[$0 + 120 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 25583
 HEAP16[$62 >> 1] = 1 << ($6 & 15) | HEAPU16[$62 >> 1]; //@line 25588
 $$024 = 0; //@line 25589
 return $$024 | 0; //@line 25590
}
function __ZN7LoRaMac21prepare_rx_done_abortEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $17 = 0, $21 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 14051
 STACKTOP = STACKTOP + 16 | 0; //@line 14052
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14052
 $$byval_copy = sp + 8 | 0; //@line 14053
 $vararg_buffer = sp; //@line 14054
 _printf(13258, $vararg_buffer) | 0; //@line 14055
 _printf(13437, $$byval_copy) | 0; //@line 14056
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 14057
 _putchar(10) | 0; //@line 14058
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 427; //@line 14061
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14063
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 14065
  sp = STACKTOP; //@line 14066
  STACKTOP = sp; //@line 14067
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14069
 $3 = $0 + 968 | 0; //@line 14070
 HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 64; //@line 14073
 if (HEAP8[$0 + 373 >> 0] | 0) {
  $10 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14079
  HEAP32[$vararg_buffer >> 2] = 428; //@line 14080
  HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 14082
  $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14083
  HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer >> 2]; //@line 14084
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer + 4 >> 2]; //@line 14084
  $11 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($10, $0, $$byval_copy) | 0; //@line 14085
  if (___async) {
   HEAP32[$AsyncCtx9 >> 2] = 429; //@line 14088
   HEAP32[$AsyncCtx9 + 4 >> 2] = $vararg_buffer; //@line 14090
   HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 14092
   sp = STACKTOP; //@line 14093
   STACKTOP = sp; //@line 14094
   return;
  }
  _emscripten_free_async_context($AsyncCtx9 | 0); //@line 14096
  do {
   if (!$11) {
    $AsyncCtx13 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14100
    _mbed_assert_internal(13142, 13151, 201); //@line 14101
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 430; //@line 14104
     HEAP32[$AsyncCtx13 + 4 >> 2] = $vararg_buffer; //@line 14106
     HEAP32[$AsyncCtx13 + 8 >> 2] = $0; //@line 14108
     sp = STACKTOP; //@line 14109
     STACKTOP = sp; //@line 14110
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx13 | 0); //@line 14112
     break;
    }
   }
  } while (0);
 }
 $17 = $0 + 944 | 0; //@line 14118
 HEAP8[$17 >> 0] = HEAP8[$17 >> 0] | 34; //@line 14121
 $21 = HEAP32[$0 + 356 >> 2] | 0; //@line 14123
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14125
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $0 + 996 | 0, 1); //@line 14126
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 431; //@line 14129
  sp = STACKTOP; //@line 14130
  STACKTOP = sp; //@line 14131
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 14133
  STACKTOP = sp; //@line 14134
  return;
 }
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_36($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 28150
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28154
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28156
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28158
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28160
 $11 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28161
 if (!$11) {
  $18 = HEAP32[$4 >> 2] | 0; //@line 28164
  $20 = $8 + 12 | 0; //@line 28166
  HEAP32[$8 >> 2] = 540; //@line 28167
  HEAP32[$8 + 4 >> 2] = 0; //@line 28169
  HEAP32[$8 + 8 >> 2] = $6; //@line 28171
  HEAP32[$20 >> 2] = 848; //@line 28172
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 28173
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($18, $6 + 1076 | 0, $8); //@line 28174
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 541; //@line 28177
   $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 28178
   HEAP32[$21 >> 2] = $20; //@line 28179
   $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 28180
   HEAP32[$22 >> 2] = $4; //@line 28181
   $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 28182
   HEAP32[$23 >> 2] = $6; //@line 28183
   $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 28184
   HEAP32[$24 >> 2] = $8; //@line 28185
   sp = STACKTOP; //@line 28186
   return;
  }
  ___async_unwind = 0; //@line 28189
  HEAP32[$ReallocAsyncCtx6 >> 2] = 541; //@line 28190
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 28191
  HEAP32[$21 >> 2] = $20; //@line 28192
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 28193
  HEAP32[$22 >> 2] = $4; //@line 28194
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 28195
  HEAP32[$23 >> 2] = $6; //@line 28196
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 28197
  HEAP32[$24 >> 2] = $8; //@line 28198
  sp = STACKTOP; //@line 28199
  return;
 } else {
  $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 28203
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 28204
  FUNCTION_TABLE_vi[$14 & 1023]($10); //@line 28205
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 539; //@line 28208
   $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 28209
   HEAP32[$15 >> 2] = $4; //@line 28210
   $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 28211
   HEAP32[$16 >> 2] = $6; //@line 28212
   $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 28213
   HEAP32[$17 >> 2] = $8; //@line 28214
   sp = STACKTOP; //@line 28215
   return;
  }
  ___async_unwind = 0; //@line 28218
  HEAP32[$ReallocAsyncCtx4 >> 2] = 539; //@line 28219
  $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 28220
  HEAP32[$15 >> 2] = $4; //@line 28221
  $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 28222
  HEAP32[$16 >> 2] = $6; //@line 28223
  $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 28224
  HEAP32[$17 >> 2] = $8; //@line 28225
  sp = STACKTOP; //@line 28226
  return;
 }
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$unpack10 = 0, $10 = 0, $16 = 0, $17 = 0, $20 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 11716
 STACKTOP = STACKTOP + 16 | 0; //@line 11717
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11717
 $3 = sp; //@line 11718
 $$unpack10 = HEAP32[$2 + 4 >> 2] | 0; //@line 11721
 $4 = $3 + 12 | 0; //@line 11722
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 11723
 HEAP32[$3 + 4 >> 2] = $$unpack10; //@line 11725
 HEAP32[$3 + 8 >> 2] = $1; //@line 11727
 HEAP32[$4 >> 2] = 848; //@line 11728
 $5 = _equeue_alloc($0, 16) | 0; //@line 11729
 do {
  if (!$5) {
   $$0$i = 0; //@line 11733
  } else {
   $7 = HEAP32[$4 >> 2] | 0; //@line 11735
   do {
    if (!$7) {
     $16 = 0; //@line 11739
    } else {
     $10 = HEAP32[$7 + 4 >> 2] | 0; //@line 11742
     $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 11743
     FUNCTION_TABLE_vii[$10 & 31]($5, $3); //@line 11744
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 374; //@line 11747
      HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 11749
      HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 11751
      HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 11753
      HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 11755
      sp = STACKTOP; //@line 11756
      STACKTOP = sp; //@line 11757
      return 0; //@line 11757
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 11759
      $16 = HEAP32[$4 >> 2] | 0; //@line 11761
      break;
     }
    }
   } while (0);
   HEAP32[$5 + 12 >> 2] = $16; //@line 11767
   _equeue_event_dtor($5, 375); //@line 11768
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11769
   $17 = _equeue_post($0, 376, $5) | 0; //@line 11770
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 377; //@line 11773
    HEAP32[$AsyncCtx5 + 4 >> 2] = $4; //@line 11775
    HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 11777
    sp = STACKTOP; //@line 11778
    STACKTOP = sp; //@line 11779
    return 0; //@line 11779
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 11781
    $$0$i = $17; //@line 11782
    break;
   }
  }
 } while (0);
 $20 = HEAP32[$4 >> 2] | 0; //@line 11787
 if (!$20) {
  STACKTOP = sp; //@line 11790
  return $$0$i | 0; //@line 11790
 }
 $23 = HEAP32[$20 + 8 >> 2] | 0; //@line 11793
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11794
 FUNCTION_TABLE_vi[$23 & 1023]($3); //@line 11795
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 378; //@line 11798
  HEAP32[$AsyncCtx2 + 4 >> 2] = $$0$i; //@line 11800
  sp = STACKTOP; //@line 11801
  STACKTOP = sp; //@line 11802
  return 0; //@line 11802
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 11804
 STACKTOP = sp; //@line 11805
 return $$0$i | 0; //@line 11805
}
function __ZN7LoRaMacC2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $18 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, stop = 0;
 __ZN14LoRaMacCommandC2Ev($0 + 4 | 0); //@line 10915
 __ZN11LoRaMacMlmeC2Ev($0 + 264 | 0); //@line 10917
 __ZN10LoRaMacMibC2Ev($0 + 348 | 0); //@line 10919
 __ZN18LoRaMacChannelPlanC2Ev($0 + 352 | 0); //@line 10921
 HEAP32[$0 + 356 >> 2] = $1; //@line 10923
 $7 = $0 + 996 | 0; //@line 10924
 HEAP32[$7 >> 2] = 0; //@line 10925
 HEAP32[$7 + 4 >> 2] = 0; //@line 10925
 HEAP32[$7 + 8 >> 2] = 0; //@line 10925
 HEAP32[$7 + 12 >> 2] = 0; //@line 10925
 $8 = $0 + 1016 | 0; //@line 10926
 HEAP32[$8 >> 2] = 0; //@line 10927
 HEAP32[$8 + 4 >> 2] = 0; //@line 10927
 HEAP32[$8 + 8 >> 2] = 0; //@line 10927
 HEAP32[$8 + 12 >> 2] = 0; //@line 10927
 $9 = $0 + 1036 | 0; //@line 10928
 HEAP32[$9 >> 2] = 0; //@line 10929
 HEAP32[$9 + 4 >> 2] = 0; //@line 10929
 HEAP32[$9 + 8 >> 2] = 0; //@line 10929
 HEAP32[$9 + 12 >> 2] = 0; //@line 10929
 $10 = $0 + 1056 | 0; //@line 10930
 HEAP32[$10 >> 2] = 0; //@line 10931
 HEAP32[$10 + 4 >> 2] = 0; //@line 10931
 HEAP32[$10 + 8 >> 2] = 0; //@line 10931
 HEAP32[$10 + 12 >> 2] = 0; //@line 10931
 $11 = $0 + 1076 | 0; //@line 10932
 HEAP32[$11 >> 2] = 0; //@line 10933
 HEAP32[$11 + 4 >> 2] = 0; //@line 10933
 HEAP32[$11 + 8 >> 2] = 0; //@line 10933
 HEAP32[$11 + 12 >> 2] = 0; //@line 10933
 dest = $0 + 1212 | 0; //@line 10935
 stop = dest + 112 | 0; //@line 10935
 do {
  HEAP32[dest >> 2] = 0; //@line 10935
  dest = dest + 4 | 0; //@line 10935
 } while ((dest | 0) < (stop | 0));
 HEAP32[$0 >> 2] = 0; //@line 10936
 $14 = $0 + 946 | 0; //@line 10938
 HEAP16[$0 + 636 >> 1] = 0; //@line 10940
 HEAP8[$0 + 893 >> 0] = 0; //@line 10942
 HEAP8[$0 + 370 >> 0] = 0; //@line 10944
 $18 = $0 + 371 | 0; //@line 10945
 dest = $0 + 900 | 0; //@line 10946
 stop = dest + 44 | 0; //@line 10946
 do {
  HEAP32[dest >> 2] = 0; //@line 10946
  dest = dest + 4 | 0; //@line 10946
 } while ((dest | 0) < (stop | 0));
 dest = $14; //@line 10947
 stop = dest + 18 | 0; //@line 10947
 do {
  HEAP16[dest >> 1] = 0; //@line 10947
  dest = dest + 2 | 0; //@line 10947
 } while ((dest | 0) < (stop | 0));
 HEAP8[$18 >> 0] = 1; //@line 10948
 HEAP8[$0 + 372 >> 0] = 0; //@line 10950
 HEAP32[$0 + 964 >> 2] = 0; //@line 10952
 HEAP8[$0 + 373 >> 0] = 0; //@line 10954
 HEAP8[$0 + 374 >> 0] = 0; //@line 10956
 HEAP8[$0 + 380 >> 0] = 0; //@line 10958
 HEAP32[$0 + 988 >> 2] = 0; //@line 10960
 HEAP32[$0 + 968 >> 2] = 0; //@line 10962
 HEAP8[$0 + 894 >> 0] = 1; //@line 10964
 HEAP8[$0 + 895 >> 0] = 1; //@line 10966
 HEAP8[$0 + 377 >> 0] = 0; //@line 10968
 HEAP32[$0 + 992 >> 2] = 0; //@line 10970
 HEAP32[$0 + 1208 >> 2] = 0; //@line 10972
 HEAP8[$0 + 1156 >> 0] = 0; //@line 10974
 HEAP8[$0 + 1152 >> 0] = 0; //@line 10976
 HEAP32[$0 + 1324 >> 2] = 0; //@line 10978
 HEAP32[$0 + 1328 >> 2] = 0; //@line 10980
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_365($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 17462
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17464
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17466
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17468
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17470
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17472
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17474
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17476
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17478
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17480
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17482
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17484
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 17486
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 17488
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 17490
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 17492
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 17494
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 17496
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 17498
 $36 = HEAP32[$30 >> 2] | 0; //@line 17499
 $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 28 >> 2] | 0; //@line 17502
 $40 = $2 + 1104 | 0; //@line 17503
 $41 = HEAP8[$40 >> 0] | 0; //@line 17504
 $42 = $2 + 1100 | 0; //@line 17505
 $43 = HEAP32[$42 >> 2] | 0; //@line 17506
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(80) | 0; //@line 17508
 FUNCTION_TABLE_viiiii[$39 & 7]($36, $AsyncRetVal, $41, $43, $2 + 1160 | 0); //@line 17509
 if (!___async) {
  ___async_unwind = 0; //@line 17512
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 495; //@line 17514
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 17516
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 17518
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $6; //@line 17520
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $8; //@line 17522
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $10; //@line 17524
 HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $12; //@line 17526
 HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $14; //@line 17528
 HEAP32[$ReallocAsyncCtx4 + 32 >> 2] = $16; //@line 17530
 HEAP32[$ReallocAsyncCtx4 + 36 >> 2] = $18; //@line 17532
 HEAP32[$ReallocAsyncCtx4 + 40 >> 2] = $20; //@line 17534
 HEAP32[$ReallocAsyncCtx4 + 44 >> 2] = $22; //@line 17536
 HEAP32[$ReallocAsyncCtx4 + 48 >> 2] = $24; //@line 17538
 HEAP32[$ReallocAsyncCtx4 + 52 >> 2] = $26; //@line 17540
 HEAP32[$ReallocAsyncCtx4 + 56 >> 2] = $28; //@line 17542
 HEAP32[$ReallocAsyncCtx4 + 60 >> 2] = $32; //@line 17544
 HEAP32[$ReallocAsyncCtx4 + 64 >> 2] = $30; //@line 17546
 HEAP32[$ReallocAsyncCtx4 + 68 >> 2] = $40; //@line 17548
 HEAP32[$ReallocAsyncCtx4 + 72 >> 2] = $42; //@line 17550
 HEAP32[$ReallocAsyncCtx4 + 76 >> 2] = $34; //@line 17552
 sp = STACKTOP; //@line 17553
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 37396
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37398
 $4 = HEAP32[$2 + 88 >> 2] | 0; //@line 37400
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 37405
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 37406
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 76 | 0); //@line 37407
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 356; //@line 37410
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 37411
   HEAP32[$9 >> 2] = $2; //@line 37412
   sp = STACKTOP; //@line 37413
   return;
  }
  ___async_unwind = 0; //@line 37416
  HEAP32[$ReallocAsyncCtx2 >> 2] = 356; //@line 37417
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 37418
  HEAP32[$9 >> 2] = $2; //@line 37419
  sp = STACKTOP; //@line 37420
  return;
 }
 $11 = HEAP32[$2 + 68 >> 2] | 0; //@line 37424
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 37429
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 37430
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 56 | 0); //@line 37431
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 357; //@line 37434
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 37435
   HEAP32[$16 >> 2] = $2; //@line 37436
   sp = STACKTOP; //@line 37437
   return;
  }
  ___async_unwind = 0; //@line 37440
  HEAP32[$ReallocAsyncCtx3 >> 2] = 357; //@line 37441
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 37442
  HEAP32[$16 >> 2] = $2; //@line 37443
  sp = STACKTOP; //@line 37444
  return;
 }
 $18 = HEAP32[$2 + 48 >> 2] | 0; //@line 37448
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 37453
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 37454
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 36 | 0); //@line 37455
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 358; //@line 37458
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 37459
   HEAP32[$23 >> 2] = $2; //@line 37460
   sp = STACKTOP; //@line 37461
   return;
  }
  ___async_unwind = 0; //@line 37464
  HEAP32[$ReallocAsyncCtx4 >> 2] = 358; //@line 37465
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 37466
  HEAP32[$23 >> 2] = $2; //@line 37467
  sp = STACKTOP; //@line 37468
  return;
 }
 $25 = HEAP32[$2 + 28 >> 2] | 0; //@line 37472
 if (!$25) {
  return;
 }
 $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 37479
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 37480
 FUNCTION_TABLE_vi[$29 & 1023]($2 + 16 | 0); //@line 37481
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 359; //@line 37484
  sp = STACKTOP; //@line 37485
  return;
 }
 ___async_unwind = 0; //@line 37488
 HEAP32[$ReallocAsyncCtx5 >> 2] = 359; //@line 37489
 sp = STACKTOP; //@line 37490
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_473($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 34743
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34745
 $4 = HEAP32[$2 + 60 >> 2] | 0; //@line 34747
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 34752
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 34753
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 48 | 0); //@line 34754
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 351; //@line 34757
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 34758
   HEAP32[$9 >> 2] = $2; //@line 34759
   sp = STACKTOP; //@line 34760
   return;
  }
  ___async_unwind = 0; //@line 34763
  HEAP32[$ReallocAsyncCtx4 >> 2] = 351; //@line 34764
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 34765
  HEAP32[$9 >> 2] = $2; //@line 34766
  sp = STACKTOP; //@line 34767
  return;
 }
 $11 = HEAP32[$2 + 44 >> 2] | 0; //@line 34771
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 34776
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 34777
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 32 | 0); //@line 34778
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 34781
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 34782
   HEAP32[$16 >> 2] = $2; //@line 34783
   sp = STACKTOP; //@line 34784
   return;
  }
  ___async_unwind = 0; //@line 34787
  HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 34788
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 34789
  HEAP32[$16 >> 2] = $2; //@line 34790
  sp = STACKTOP; //@line 34791
  return;
 }
 $18 = HEAP32[$2 + 28 >> 2] | 0; //@line 34795
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 34800
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 34801
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 16 | 0); //@line 34802
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 353; //@line 34805
   $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 34806
   HEAP32[$23 >> 2] = $2; //@line 34807
   sp = STACKTOP; //@line 34808
   return;
  }
  ___async_unwind = 0; //@line 34811
  HEAP32[$ReallocAsyncCtx6 >> 2] = 353; //@line 34812
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 34813
  HEAP32[$23 >> 2] = $2; //@line 34814
  sp = STACKTOP; //@line 34815
  return;
 }
 $25 = HEAP32[$2 + 12 >> 2] | 0; //@line 34819
 if (!$25) {
  return;
 }
 $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 34825
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 34826
 FUNCTION_TABLE_vi[$28 & 1023]($2); //@line 34827
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 354; //@line 34830
  sp = STACKTOP; //@line 34831
  return;
 }
 ___async_unwind = 0; //@line 34834
 HEAP32[$ReallocAsyncCtx7 >> 2] = 354; //@line 34835
 sp = STACKTOP; //@line 34836
 return;
}
function __ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$031 = 0.0, $13 = 0, $17 = 0.0, $52 = 0.0, $AsyncCtx = 0, $AsyncCtx9 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 1536
 STACKTOP = STACKTOP + 32 | 0; //@line 1537
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1537
 $vararg_buffer5 = sp + 24 | 0; //@line 1538
 $vararg_buffer3 = sp + 16 | 0; //@line 1539
 _printf(10904, sp) | 0; //@line 1542
 _printf(11101, sp + 8 | 0) | 0; //@line 1543
 $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 1544
 _putchar(10) | 0; //@line 1545
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 90; //@line 1548
  HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 1550
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer3; //@line 1552
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer3; //@line 1554
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer5; //@line 1556
  HEAP32[$AsyncCtx9 + 20 >> 2] = $vararg_buffer5; //@line 1558
  HEAP32[$AsyncCtx9 + 24 >> 2] = $0; //@line 1560
  HEAP8[$AsyncCtx9 + 28 >> 0] = $2; //@line 1562
  sp = STACKTOP; //@line 1563
  STACKTOP = sp; //@line 1564
  return 0; //@line 1564
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 1566
 switch ($1 | 0) {
 case 0:
  {
   $$0 = 1; //@line 1569
   break;
  }
 case 1:
  {
   switch (HEAP32[$0 + 752 >> 2] | 0) {
   case 7:
    {
     $$031 = 125.0e3; //@line 1577
     break;
    }
   case 8:
    {
     $$031 = 25.0e4; //@line 1581
     break;
    }
   case 9:
    {
     $$031 = 5.0e5; //@line 1585
     break;
    }
   default:
    {
     $$031 = 0.0; //@line 1589
    }
   }
   $13 = HEAP32[$0 + 756 >> 2] | 0; //@line 1593
   $17 = 1.0 / ($$031 / +(1 << $13 | 0)); //@line 1597
   $52 = +Math_ceil(+(+(((($2 & 255) << 3) + 28 - ($13 << 2) + (HEAP8[$0 + 766 >> 0] << 4 & 255) + (HEAP8[$0 + 764 >> 0] | 0 ? -20 : 0) | 0) >>> 0) / +($13 - (HEAP8[$0 + 760 >> 0] | 0 ? 2 : 0) << 2 >>> 0))) * +((HEAPU8[$0 + 761 >> 0] | 0) + 4 | 0); //@line 1633
   $$0 = ~~+Math_floor(+(((+(HEAPU16[$0 + 762 >> 1] | 0) + 4.25) * $17 + $17 * (($52 > 0.0 ? $52 : 0.0) + 8.0)) * 1.0e3 + .999)) >>> 0; //@line 1643
   break;
  }
 default:
  {
   $$0 = 0; //@line 1647
  }
 }
 _printf(10904, $vararg_buffer3) | 0; //@line 1650
 HEAP32[$vararg_buffer5 >> 2] = $$0; //@line 1651
 _printf(11113, $vararg_buffer5) | 0; //@line 1652
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1653
 _putchar(10) | 0; //@line 1654
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 91; //@line 1657
  HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 1659
  sp = STACKTOP; //@line 1660
  STACKTOP = sp; //@line 1661
  return 0; //@line 1661
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1663
  STACKTOP = sp; //@line 1664
  return $$0 | 0; //@line 1664
 }
 return 0; //@line 1666
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_413($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx29 = 0, sp = 0;
 sp = STACKTOP; //@line 23433
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23437
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23439
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23441
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23443
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23445
 $12 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23446
 if ($12 | 0) {
  $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 23450
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 23451
  FUNCTION_TABLE_vi[$15 & 1023]($4); //@line 23452
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 274; //@line 23455
   $16 = $ReallocAsyncCtx10 + 4 | 0; //@line 23456
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 23457
   $17 = $ReallocAsyncCtx10 + 8 | 0; //@line 23458
   HEAP32[$17 >> 2] = $6; //@line 23459
   $18 = $ReallocAsyncCtx10 + 12 | 0; //@line 23460
   HEAP32[$18 >> 2] = $8; //@line 23461
   $19 = $ReallocAsyncCtx10 + 16 | 0; //@line 23462
   HEAP32[$19 >> 2] = $10; //@line 23463
   sp = STACKTOP; //@line 23464
   return;
  }
  ___async_unwind = 0; //@line 23467
  HEAP32[$ReallocAsyncCtx10 >> 2] = 274; //@line 23468
  $16 = $ReallocAsyncCtx10 + 4 | 0; //@line 23469
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 23470
  $17 = $ReallocAsyncCtx10 + 8 | 0; //@line 23471
  HEAP32[$17 >> 2] = $6; //@line 23472
  $18 = $ReallocAsyncCtx10 + 12 | 0; //@line 23473
  HEAP32[$18 >> 2] = $8; //@line 23474
  $19 = $ReallocAsyncCtx10 + 16 | 0; //@line 23475
  HEAP32[$19 >> 2] = $10; //@line 23476
  sp = STACKTOP; //@line 23477
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$8 >> 2] = 6; //@line 23482
  HEAP32[___async_retval >> 2] = $6; //@line 23484
  return;
 }
 $ReallocAsyncCtx29 = _emscripten_realloc_async_context(16) | 0; //@line 23487
 _mbed_assert_internal(13142, 12226, 1251); //@line 23488
 if (___async) {
  HEAP32[$ReallocAsyncCtx29 >> 2] = 275; //@line 23491
  $21 = $ReallocAsyncCtx29 + 4 | 0; //@line 23492
  HEAP32[$21 >> 2] = $6; //@line 23493
  $22 = $ReallocAsyncCtx29 + 8 | 0; //@line 23494
  HEAP32[$22 >> 2] = $8; //@line 23495
  $23 = $ReallocAsyncCtx29 + 12 | 0; //@line 23496
  HEAP32[$23 >> 2] = $10; //@line 23497
  sp = STACKTOP; //@line 23498
  return;
 }
 ___async_unwind = 0; //@line 23501
 HEAP32[$ReallocAsyncCtx29 >> 2] = 275; //@line 23502
 $21 = $ReallocAsyncCtx29 + 4 | 0; //@line 23503
 HEAP32[$21 >> 2] = $6; //@line 23504
 $22 = $ReallocAsyncCtx29 + 8 | 0; //@line 23505
 HEAP32[$22 >> 2] = $8; //@line 23506
 $23 = $ReallocAsyncCtx29 + 12 | 0; //@line 23507
 HEAP32[$23 >> 2] = $10; //@line 23508
 sp = STACKTOP; //@line 23509
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_57($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $2 = 0, $27 = 0, $28 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30167
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30169
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30171
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30173
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30175
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30177
 $13 = $2 + 1184 | 0; //@line 30180
 HEAP8[$13 >> 0] = HEAP8[$2 + 378 >> 0] | 0; //@line 30181
 HEAP32[$2 + 1188 >> 2] = HEAP32[$2 + 1132 >> 2]; //@line 30185
 HEAP8[$2 + 1200 >> 0] = HEAP8[$2 + 1141 >> 0] | 0; //@line 30189
 HEAP8[$2 + 1201 >> 0] = HEAP8[$2 + 369 >> 0] | 0; //@line 30193
 HEAP32[$2 + 1204 >> 2] = 1; //@line 30195
 $27 = $2 + 1202 | 0; //@line 30199
 HEAP8[$27 >> 0] = (HEAP32[$2 + 360 >> 2] | 0) == 2 & 1; //@line 30201
 $28 = HEAP32[$2 >> 2] | 0; //@line 30202
 $31 = HEAP32[(HEAP32[$28 >> 2] | 0) + 24 >> 2] | 0; //@line 30205
 $34 = (__ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0) + 10 | 0; //@line 30208
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 30209
 $35 = FUNCTION_TABLE_iiii[$31 & 15]($28, $13, $34) | 0; //@line 30210
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 385; //@line 30213
  $36 = $ReallocAsyncCtx + 4 | 0; //@line 30214
  HEAP32[$36 >> 2] = $27; //@line 30215
  $37 = $ReallocAsyncCtx + 8 | 0; //@line 30216
  HEAP32[$37 >> 2] = $2; //@line 30217
  $38 = $ReallocAsyncCtx + 12 | 0; //@line 30218
  HEAP32[$38 >> 2] = $4; //@line 30219
  $39 = $ReallocAsyncCtx + 16 | 0; //@line 30220
  HEAP32[$39 >> 2] = $6; //@line 30221
  $40 = $ReallocAsyncCtx + 20 | 0; //@line 30222
  HEAP32[$40 >> 2] = $8; //@line 30223
  $41 = $ReallocAsyncCtx + 24 | 0; //@line 30224
  HEAP32[$41 >> 2] = $10; //@line 30225
  $42 = $ReallocAsyncCtx + 28 | 0; //@line 30226
  HEAP32[$42 >> 2] = $2; //@line 30227
  sp = STACKTOP; //@line 30228
  return;
 }
 HEAP8[___async_retval >> 0] = $35 & 1; //@line 30233
 ___async_unwind = 0; //@line 30234
 HEAP32[$ReallocAsyncCtx >> 2] = 385; //@line 30235
 $36 = $ReallocAsyncCtx + 4 | 0; //@line 30236
 HEAP32[$36 >> 2] = $27; //@line 30237
 $37 = $ReallocAsyncCtx + 8 | 0; //@line 30238
 HEAP32[$37 >> 2] = $2; //@line 30239
 $38 = $ReallocAsyncCtx + 12 | 0; //@line 30240
 HEAP32[$38 >> 2] = $4; //@line 30241
 $39 = $ReallocAsyncCtx + 16 | 0; //@line 30242
 HEAP32[$39 >> 2] = $6; //@line 30243
 $40 = $ReallocAsyncCtx + 20 | 0; //@line 30244
 HEAP32[$40 >> 2] = $8; //@line 30245
 $41 = $ReallocAsyncCtx + 24 | 0; //@line 30246
 HEAP32[$41 >> 2] = $10; //@line 30247
 $42 = $ReallocAsyncCtx + 28 | 0; //@line 30248
 HEAP32[$42 >> 2] = $2; //@line 30249
 sp = STACKTOP; //@line 30250
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_295($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11547
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 11549
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11551
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11553
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11555
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11557
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11559
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11561
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11563
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11565
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11567
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11569
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11571
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11573
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 11575
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 11577
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 11579
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 11581
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 11583
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 11585
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 11587
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 11589
 $45 = HEAP32[(HEAP32[$8 >> 2] | 0) + 32 >> 2] | 0; //@line 11592
 $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 11593
 FUNCTION_TABLE_vii[$45 & 31]($8, $42); //@line 11594
 if (!___async) {
  ___async_unwind = 0; //@line 11597
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 94; //@line 11599
 HEAP16[$ReallocAsyncCtx + 4 >> 1] = $2; //@line 11601
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 11603
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 11605
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 11607
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 11609
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 11611
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 11613
 HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 11615
 HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 11617
 HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 11619
 HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 11621
 HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 11623
 HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 11625
 HEAP32[$ReallocAsyncCtx + 56 >> 2] = $28; //@line 11627
 HEAP32[$ReallocAsyncCtx + 60 >> 2] = $30; //@line 11629
 HEAP32[$ReallocAsyncCtx + 64 >> 2] = $32; //@line 11631
 HEAP32[$ReallocAsyncCtx + 68 >> 2] = $34; //@line 11633
 HEAP32[$ReallocAsyncCtx + 72 >> 2] = $36; //@line 11635
 HEAP32[$ReallocAsyncCtx + 76 >> 2] = $38; //@line 11637
 HEAP32[$ReallocAsyncCtx + 80 >> 2] = $40; //@line 11639
 sp = STACKTOP; //@line 11640
 return;
}
function __ZN14lorawan_timersD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11183
 $2 = HEAP32[$0 + 108 >> 2] | 0; //@line 11185
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 11191
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11192
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 96 | 0); //@line 11193
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 355; //@line 11196
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11198
    sp = STACKTOP; //@line 11199
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11202
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 88 >> 2] | 0; //@line 11208
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 11214
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11215
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 76 | 0); //@line 11216
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 356; //@line 11219
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 11221
    sp = STACKTOP; //@line 11222
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11225
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 68 >> 2] | 0; //@line 11231
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 11237
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11238
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 56 | 0); //@line 11239
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 357; //@line 11242
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 11244
    sp = STACKTOP; //@line 11245
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11248
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 48 >> 2] | 0; //@line 11254
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 11260
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11261
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 36 | 0); //@line 11262
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 358; //@line 11265
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 11267
    sp = STACKTOP; //@line 11268
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11271
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 28 >> 2] | 0; //@line 11277
 if (!$30) {
  return;
 }
 $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 11284
 $AsyncCtx15 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11285
 FUNCTION_TABLE_vi[$34 & 1023]($0 + 16 | 0); //@line 11286
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 359; //@line 11289
  sp = STACKTOP; //@line 11290
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 11293
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$026 = 0, $10 = 0, $15 = 0, $21 = 0.0, $24 = 0.0, $27 = 0, $34 = 0, $35 = 0, $38 = 0, $43 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25649
 $6 = HEAP32[$0 + 112 >> 2] | 0; //@line 25653
 $7 = $1 + 2 | 0; //@line 25654
 $8 = HEAP8[$7 >> 0] | 0; //@line 25655
 $10 = HEAPU8[$1 >> 0] | 0; //@line 25657
 $15 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$6 + ($10 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 25662
 if ($8 << 24 >> 24 > $15 << 24 >> 24) {
  HEAP8[$7 >> 0] = $15; //@line 25665
  $27 = $15; //@line 25666
 } else {
  $27 = $8; //@line 25668
 }
 if (!$2) {
  $$0 = HEAP32[$6 + ($10 * 12 | 0) >> 2] | 0; //@line 25674
 } else {
  $$0 = $2; //@line 25676
 }
 $21 = +HEAPF32[$1 + 4 >> 2]; //@line 25679
 if ($21 > 0.0) {
  $24 = +HEAPF32[$1 + 8 >> 2]; //@line 25683
  if ($24 > 0.0) {
   $$026 = ~~+Math_floor(+($21 - +($27 << 24 >> 24 << 1 >>> 0) - $24)); //@line 25693
  } else {
   $$026 = $27; //@line 25695
  }
 } else {
  $$026 = $27; //@line 25698
 }
 $34 = $0 + 4 | 0; //@line 25700
 $35 = HEAP32[$34 >> 2] | 0; //@line 25701
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 72 >> 2] | 0; //@line 25704
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 25705
 FUNCTION_TABLE_vi[$38 & 1023]($35); //@line 25706
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 641; //@line 25709
  HEAP32[$AsyncCtx + 4 >> 2] = $34; //@line 25711
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 25713
  HEAP32[$AsyncCtx + 12 >> 2] = $$0; //@line 25715
  HEAP8[$AsyncCtx + 16 >> 0] = $$026; //@line 25717
  sp = STACKTOP; //@line 25718
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 25721
 $43 = HEAP32[$34 >> 2] | 0; //@line 25722
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 68 >> 2] | 0; //@line 25725
 $48 = HEAP16[$1 + 12 >> 1] | 0; //@line 25727
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 25728
 FUNCTION_TABLE_viiii[$46 & 7]($43, $$0, $$026, $48); //@line 25729
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 642; //@line 25732
  HEAP32[$AsyncCtx2 + 4 >> 2] = $34; //@line 25734
  sp = STACKTOP; //@line 25735
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 25738
 $50 = HEAP32[$34 >> 2] | 0; //@line 25739
 $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 76 >> 2] | 0; //@line 25742
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 25743
 FUNCTION_TABLE_vi[$53 & 1023]($50); //@line 25744
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 643; //@line 25747
  sp = STACKTOP; //@line 25748
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 25751
  return;
 }
}
function _mbedtls_cipher_update__async_cb_17($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $26 = 0, $27 = 0, $29 = 0, $34 = 0, $4 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17576
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17578
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17580
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17582
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17584
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17586
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17588
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17590
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17592
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17594
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17596
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17598
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 17601
  $52 = ___async_retval; //@line 17602
  HEAP32[$52 >> 2] = $$1; //@line 17603
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 17608
 HEAP32[$8 >> 2] = 0; //@line 17610
 $26 = $10 + $12 | 0; //@line 17611
 $27 = $14 - $12 | 0; //@line 17612
 if (!$27) {
  $$1 = 0; //@line 17615
  $52 = ___async_retval; //@line 17616
  HEAP32[$52 >> 2] = $$1; //@line 17617
  return;
 }
 $29 = ($27 >>> 0) % ($4 >>> 0) | 0; //@line 17620
 if (!$29) {
  $$0 = (HEAP32[$16 >> 2] | 0) == 0 ? $4 : 0; //@line 17626
 } else {
  $$0 = $29; //@line 17628
 }
 $34 = $27 - $$0 | 0; //@line 17631
 _memcpy($18 + 20 | 0, $26 + $34 | 0, $$0 | 0) | 0; //@line 17633
 HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + $$0; //@line 17636
 if (!$34) {
  $$1 = 0; //@line 17639
  $52 = ___async_retval; //@line 17640
  HEAP32[$52 >> 2] = $$1; //@line 17641
  return;
 }
 $43 = HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 17648
 $45 = HEAP32[$18 + 60 >> 2] | 0; //@line 17650
 $46 = HEAP32[$16 >> 2] | 0; //@line 17651
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 17653
 $48 = FUNCTION_TABLE_iiiiiii[$43 & 3]($45, $46, $34, $18 + 40 | 0, $26, $6 + $4 | 0) | 0; //@line 17654
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 684; //@line 17657
  $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 17658
  HEAP32[$49 >> 2] = $2; //@line 17659
  $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 17660
  HEAP32[$50 >> 2] = $34; //@line 17661
  sp = STACKTOP; //@line 17662
  return;
 }
 HEAP32[___async_retval >> 2] = $48; //@line 17666
 ___async_unwind = 0; //@line 17667
 HEAP32[$ReallocAsyncCtx3 >> 2] = 684; //@line 17668
 $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 17669
 HEAP32[$49 >> 2] = $2; //@line 17670
 $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 17671
 HEAP32[$50 >> 2] = $34; //@line 17672
 sp = STACKTOP; //@line 17673
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_311($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13378
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13382
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13384
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 13386
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13388
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 13390
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13392
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13394
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13396
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13398
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 13401
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13403
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 13407
   $27 = $6 + 24 | 0; //@line 13408
   $28 = $4 + 8 | 0; //@line 13409
   $29 = $6 + 54 | 0; //@line 13410
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 13440
    HEAP8[$14 >> 0] = 0; //@line 13441
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 13442
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 13443
    if (!___async) {
     ___async_unwind = 0; //@line 13446
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 806; //@line 13448
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 13450
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 13452
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 13454
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 13456
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 13458
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 13460
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 13462
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 13464
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 13466
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 13468
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 13470
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 13472
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 13474
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 13477
    sp = STACKTOP; //@line 13478
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 13483
 HEAP8[$14 >> 0] = $12; //@line 13484
 return;
}
function __Z28compute_skeys_for_join_framePKhS0_tPhS1_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$$sroa_idx12 = 0, $10 = 0, $12 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 22772
 STACKTOP = STACKTOP + 16 | 0; //@line 22773
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22773
 $5 = sp; //@line 22774
 _mbedtls_aes_init(22960); //@line 22775
 $6 = _mbedtls_aes_setkey_enc(22960, $0, 128) | 0; //@line 22776
 if ($6 | 0) {
  $$0 = $6; //@line 22779
  _mbedtls_aes_free(22960); //@line 22780
  STACKTOP = sp; //@line 22781
  return $$0 | 0; //@line 22781
 }
 $8 = $5 + 9 | 0; //@line 22783
 HEAP8[$8 >> 0] = 0; //@line 22784
 HEAP8[$8 + 1 >> 0] = 0; //@line 22784
 HEAP8[$8 + 2 >> 0] = 0; //@line 22784
 HEAP8[$8 + 3 >> 0] = 0; //@line 22784
 HEAP8[$8 + 4 >> 0] = 0; //@line 22784
 HEAP8[$8 + 5 >> 0] = 0; //@line 22784
 HEAP8[$8 + 6 >> 0] = 0; //@line 22784
 HEAP8[$5 >> 0] = 1; //@line 22785
 $9 = $5 + 1 | 0; //@line 22786
 HEAP8[$9 >> 0] = HEAP8[$1 >> 0] | 0; //@line 22787
 HEAP8[$9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0; //@line 22787
 HEAP8[$9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0; //@line 22787
 HEAP8[$9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0; //@line 22787
 HEAP8[$9 + 4 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 22787
 HEAP8[$9 + 5 >> 0] = HEAP8[$1 + 5 >> 0] | 0; //@line 22787
 $$0$$sroa_idx12 = $5 + 7 | 0; //@line 22788
 HEAP8[$$0$$sroa_idx12 >> 0] = $2; //@line 22789
 HEAP8[$$0$$sroa_idx12 + 1 >> 0] = $2 >> 8; //@line 22789
 $10 = _mbedtls_aes_crypt_ecb(22960, 1, $5, $3) | 0; //@line 22790
 if ($10 | 0) {
  $$0 = $10; //@line 22793
  _mbedtls_aes_free(22960); //@line 22794
  STACKTOP = sp; //@line 22795
  return $$0 | 0; //@line 22795
 }
 $12 = $5 + 9 | 0; //@line 22797
 HEAP8[$12 >> 0] = 0; //@line 22798
 HEAP8[$12 + 1 >> 0] = 0; //@line 22798
 HEAP8[$12 + 2 >> 0] = 0; //@line 22798
 HEAP8[$12 + 3 >> 0] = 0; //@line 22798
 HEAP8[$12 + 4 >> 0] = 0; //@line 22798
 HEAP8[$12 + 5 >> 0] = 0; //@line 22798
 HEAP8[$12 + 6 >> 0] = 0; //@line 22798
 HEAP8[$5 >> 0] = 2; //@line 22799
 HEAP8[$9 >> 0] = HEAP8[$1 >> 0] | 0; //@line 22800
 HEAP8[$9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0; //@line 22800
 HEAP8[$9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0; //@line 22800
 HEAP8[$9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0; //@line 22800
 HEAP8[$9 + 4 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 22800
 HEAP8[$9 + 5 >> 0] = HEAP8[$1 + 5 >> 0] | 0; //@line 22800
 HEAP8[$$0$$sroa_idx12 >> 0] = $2; //@line 22801
 HEAP8[$$0$$sroa_idx12 + 1 >> 0] = $2 >> 8; //@line 22801
 $$0 = _mbedtls_aes_crypt_ecb(22960, 1, $5, $4) | 0; //@line 22803
 _mbedtls_aes_free(22960); //@line 22804
 STACKTOP = sp; //@line 22805
 return $$0 | 0; //@line 22805
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_208($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 6897
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6903
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6905
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 6907
 $9 = $6 + 32 | 0; //@line 6908
 $10 = $6 + 44 | 0; //@line 6909
 $11 = HEAP32[$10 >> 2] | 0; //@line 6910
 if (!$11) {
  return;
 }
 $13 = $8 + 1912 | 0; //@line 6915
 if (($13 | 0) == ($9 | 0)) {
  return;
 }
 $15 = $8 + 1924 | 0; //@line 6920
 $16 = HEAP32[$15 >> 2] | 0; //@line 6921
 if (!$16) {
  $25 = HEAP32[$11 + 4 >> 2] | 0; //@line 6925
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 6926
  FUNCTION_TABLE_vii[$25 & 31]($13, $9); //@line 6927
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 325; //@line 6930
   $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 6931
   HEAP32[$26 >> 2] = $10; //@line 6932
   $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 6933
   HEAP32[$27 >> 2] = $15; //@line 6934
   sp = STACKTOP; //@line 6935
   return;
  }
  ___async_unwind = 0; //@line 6938
  HEAP32[$ReallocAsyncCtx6 >> 2] = 325; //@line 6939
  $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 6940
  HEAP32[$26 >> 2] = $10; //@line 6941
  $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 6942
  HEAP32[$27 >> 2] = $15; //@line 6943
  sp = STACKTOP; //@line 6944
  return;
 } else {
  $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 6948
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 6949
  FUNCTION_TABLE_vi[$19 & 1023]($13); //@line 6950
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 324; //@line 6953
   $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 6954
   HEAP32[$20 >> 2] = $10; //@line 6955
   $21 = $ReallocAsyncCtx5 + 8 | 0; //@line 6956
   HEAP32[$21 >> 2] = $15; //@line 6957
   $22 = $ReallocAsyncCtx5 + 12 | 0; //@line 6958
   HEAP32[$22 >> 2] = $13; //@line 6959
   $23 = $ReallocAsyncCtx5 + 16 | 0; //@line 6960
   HEAP32[$23 >> 2] = $9; //@line 6961
   sp = STACKTOP; //@line 6962
   return;
  }
  ___async_unwind = 0; //@line 6965
  HEAP32[$ReallocAsyncCtx5 >> 2] = 324; //@line 6966
  $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 6967
  HEAP32[$20 >> 2] = $10; //@line 6968
  $21 = $ReallocAsyncCtx5 + 8 | 0; //@line 6969
  HEAP32[$21 >> 2] = $15; //@line 6970
  $22 = $ReallocAsyncCtx5 + 12 | 0; //@line 6971
  HEAP32[$22 >> 2] = $13; //@line 6972
  $23 = $ReallocAsyncCtx5 + 16 | 0; //@line 6973
  HEAP32[$23 >> 2] = $9; //@line 6974
  sp = STACKTOP; //@line 6975
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13262
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13266
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13268
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 13270
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13272
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 13274
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13276
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13278
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13280
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13282
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13284
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13286
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13288
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 13291
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 13292
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 13325
    HEAP8[$14 >> 0] = 0; //@line 13326
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 13327
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 13328
    if (!___async) {
     ___async_unwind = 0; //@line 13331
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 806; //@line 13333
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 13335
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 13337
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 13339
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 13341
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 13343
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 13345
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 13347
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 13349
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 13351
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 13353
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 13355
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 13357
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 13359
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 13362
    sp = STACKTOP; //@line 13363
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 13368
 HEAP8[$14 >> 0] = $12; //@line 13369
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_366($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17562
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17564
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17566
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17568
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17570
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17572
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17574
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17576
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17578
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17580
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17582
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17584
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 17586
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 17588
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 17590
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 17592
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 17594
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 17600
 $39 = HEAP32[$32 >> 2] | 0; //@line 17601
 $42 = HEAP32[(HEAP32[$39 >> 2] | 0) + 28 >> 2] | 0; //@line 17604
 $44 = HEAP8[$2 + 1136 >> 0] | 0; //@line 17606
 $45 = HEAP8[HEAP32[$0 + 68 >> 2] >> 0] | 0; //@line 17607
 $46 = HEAP32[HEAP32[$0 + 72 >> 2] >> 2] | 0; //@line 17608
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(72) | 0; //@line 17610
 FUNCTION_TABLE_viiiii[$42 & 7]($39, $44, $45, $46, $2 + 1184 | 0); //@line 17611
 if (!___async) {
  ___async_unwind = 0; //@line 17614
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 496; //@line 17616
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $38; //@line 17618
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $2; //@line 17620
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $4; //@line 17622
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 17624
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 17626
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 17628
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $12; //@line 17630
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $32; //@line 17632
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 17634
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $20; //@line 17636
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $16; //@line 17638
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $14; //@line 17640
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $22; //@line 17642
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $24; //@line 17644
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $26; //@line 17646
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $28; //@line 17648
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $30; //@line 17650
 sp = STACKTOP; //@line 17651
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_301($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 12084
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12092
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12096
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12098
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12100
 if ((HEAP32[___async_retval >> 2] | 0) < (HEAP32[$0 + 4 >> 2] | 0)) {
  _printf(10904, HEAP32[$0 + 8 >> 2] | 0) | 0; //@line 12105
  _printf(11092, $8) | 0; //@line 12106
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 12107
  _putchar(10) | 0; //@line 12108
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 102; //@line 12111
   $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 12112
   HEAP32[$19 >> 2] = $12; //@line 12113
   $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 12114
   HEAP32[$20 >> 2] = $14; //@line 12115
   $21 = $ReallocAsyncCtx4 + 12 | 0; //@line 12116
   HEAP32[$21 >> 2] = $16; //@line 12117
   sp = STACKTOP; //@line 12118
   return;
  }
  ___async_unwind = 0; //@line 12121
  HEAP32[$ReallocAsyncCtx4 >> 2] = 102; //@line 12122
  $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 12123
  HEAP32[$19 >> 2] = $12; //@line 12124
  $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 12125
  HEAP32[$20 >> 2] = $14; //@line 12126
  $21 = $ReallocAsyncCtx4 + 12 | 0; //@line 12127
  HEAP32[$21 >> 2] = $16; //@line 12128
  sp = STACKTOP; //@line 12129
  return;
 } else {
  $24 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 12134
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 12135
  FUNCTION_TABLE_vi[$24 & 1023]($12); //@line 12136
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 105; //@line 12139
   $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 12140
   HEAP32[$25 >> 2] = $14; //@line 12141
   $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 12142
   HEAP32[$26 >> 2] = $16; //@line 12143
   $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 12144
   $$expand_i1_val = 1; //@line 12145
   HEAP8[$27 >> 0] = $$expand_i1_val; //@line 12146
   sp = STACKTOP; //@line 12147
   return;
  }
  ___async_unwind = 0; //@line 12150
  HEAP32[$ReallocAsyncCtx2 >> 2] = 105; //@line 12151
  $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 12152
  HEAP32[$25 >> 2] = $14; //@line 12153
  $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 12154
  HEAP32[$26 >> 2] = $16; //@line 12155
  $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 12156
  $$expand_i1_val = 1; //@line 12157
  HEAP8[$27 >> 0] = $$expand_i1_val; //@line 12158
  sp = STACKTOP; //@line 12159
  return;
 }
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb_377($0) {
 $0 = $0 | 0;
 var $2 = 0, $21 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18505
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18507
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18509
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 18511
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18513
 HEAP8[$4 >> 0] = 0; //@line 18514
 HEAP8[$2 >> 0] = $6; //@line 18515
 $9 = $8 + 1097 | 0; //@line 18516
 HEAP8[$2 + 1 >> 0] = HEAP8[$9 >> 0] | 0; //@line 18519
 HEAP8[$2 + 2 >> 0] = HEAP8[$8 + 1096 >> 0] | 0; //@line 18523
 HEAP32[$2 + 4 >> 2] = HEAP32[$8 + 1144 >> 2]; //@line 18527
 HEAP32[$2 + 8 >> 2] = HEAP32[$8 + 1148 >> 2]; //@line 18531
 $21 = $8 + 636 | 0; //@line 18532
 HEAP16[$2 + 12 >> 1] = HEAP16[$21 >> 1] | 0; //@line 18535
 $24 = HEAP32[$8 >> 2] | 0; //@line 18536
 $27 = HEAP32[(HEAP32[$24 >> 2] | 0) + 32 >> 2] | 0; //@line 18539
 $28 = $8 + 992 | 0; //@line 18540
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 18541
 FUNCTION_TABLE_iiiii[$27 & 3]($24, $2, $4, $28) | 0; //@line 18542
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 502; //@line 18545
  $29 = $ReallocAsyncCtx + 4 | 0; //@line 18546
  HEAP32[$29 >> 2] = $8; //@line 18547
  $30 = $ReallocAsyncCtx + 8 | 0; //@line 18548
  HEAP32[$30 >> 2] = $9; //@line 18549
  $31 = $ReallocAsyncCtx + 12 | 0; //@line 18550
  HEAP32[$31 >> 2] = $4; //@line 18551
  $32 = $ReallocAsyncCtx + 16 | 0; //@line 18552
  HEAP32[$32 >> 2] = $28; //@line 18553
  $33 = $ReallocAsyncCtx + 20 | 0; //@line 18554
  HEAP32[$33 >> 2] = $8; //@line 18555
  $34 = $ReallocAsyncCtx + 24 | 0; //@line 18556
  HEAP32[$34 >> 2] = $21; //@line 18557
  $35 = $ReallocAsyncCtx + 28 | 0; //@line 18558
  HEAP32[$35 >> 2] = $2; //@line 18559
  sp = STACKTOP; //@line 18560
  return;
 }
 ___async_unwind = 0; //@line 18563
 HEAP32[$ReallocAsyncCtx >> 2] = 502; //@line 18564
 $29 = $ReallocAsyncCtx + 4 | 0; //@line 18565
 HEAP32[$29 >> 2] = $8; //@line 18566
 $30 = $ReallocAsyncCtx + 8 | 0; //@line 18567
 HEAP32[$30 >> 2] = $9; //@line 18568
 $31 = $ReallocAsyncCtx + 12 | 0; //@line 18569
 HEAP32[$31 >> 2] = $4; //@line 18570
 $32 = $ReallocAsyncCtx + 16 | 0; //@line 18571
 HEAP32[$32 >> 2] = $28; //@line 18572
 $33 = $ReallocAsyncCtx + 20 | 0; //@line 18573
 HEAP32[$33 >> 2] = $8; //@line 18574
 $34 = $ReallocAsyncCtx + 24 | 0; //@line 18575
 HEAP32[$34 >> 2] = $21; //@line 18576
 $35 = $ReallocAsyncCtx + 28 | 0; //@line 18577
 HEAP32[$35 >> 2] = $2; //@line 18578
 sp = STACKTOP; //@line 18579
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_370($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18033
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18035
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18037
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18039
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18041
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18043
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18045
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18047
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18049
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18051
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18053
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18055
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18057
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18059
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 18061
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 18063
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 18065
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 18067
 $35 = HEAP32[$32 >> 2] | 0; //@line 18068
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 72 >> 2] | 0; //@line 18071
 $39 = HEAP8[$4 >> 0] | 0; //@line 18072
 $41 = HEAP8[$2 + 1129 >> 0] | 0; //@line 18074
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(72) | 0; //@line 18075
 $42 = FUNCTION_TABLE_iiii[$38 & 15]($35, $39, $41) | 0; //@line 18076
 if (!___async) {
  HEAP8[___async_retval >> 0] = $42; //@line 18080
  ___async_unwind = 0; //@line 18081
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 494; //@line 18083
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 18085
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 18087
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 18089
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 18091
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 18093
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 18095
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 18097
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 18099
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 18101
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 18103
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 18105
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 18107
 HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $26; //@line 18109
 HEAP32[$ReallocAsyncCtx3 + 56 >> 2] = $28; //@line 18111
 HEAP32[$ReallocAsyncCtx3 + 60 >> 2] = $32; //@line 18113
 HEAP32[$ReallocAsyncCtx3 + 64 >> 2] = $30; //@line 18115
 HEAP32[$ReallocAsyncCtx3 + 68 >> 2] = $34; //@line 18117
 sp = STACKTOP; //@line 18118
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $15 = 0, $18 = 0, $20 = 0, $23 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx4 = 0, $AsyncCtx7 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 26376
 STACKTOP = STACKTOP + 16 | 0; //@line 26377
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 26377
 $vararg_buffer1 = sp + 8 | 0; //@line 26378
 _printf(13951, sp) | 0; //@line 26380
 HEAP32[$vararg_buffer1 >> 2] = $2 & 255; //@line 26382
 _printf(13964, $vararg_buffer1) | 0; //@line 26383
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 26384
 _putchar(10) | 0; //@line 26385
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 660; //@line 26388
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 26390
  HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 26392
  HEAP8[$AsyncCtx11 + 12 >> 0] = $2; //@line 26394
  sp = STACKTOP; //@line 26395
  STACKTOP = sp; //@line 26396
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 26398
 $7 = $0 + 4 | 0; //@line 26399
 $8 = HEAP32[$7 >> 2] | 0; //@line 26400
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 72 >> 2] | 0; //@line 26403
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 26404
 FUNCTION_TABLE_vi[$11 & 1023]($8); //@line 26405
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 661; //@line 26408
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 26410
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 26412
  HEAP8[$AsyncCtx + 12 >> 0] = $2; //@line 26414
  sp = STACKTOP; //@line 26415
  STACKTOP = sp; //@line 26416
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 26418
 $15 = HEAP32[$7 >> 2] | 0; //@line 26419
 $18 = HEAP32[(HEAP32[$15 >> 2] | 0) + 24 >> 2] | 0; //@line 26422
 $AsyncCtx4 = _emscripten_alloc_async_context(8, sp) | 0; //@line 26423
 FUNCTION_TABLE_viii[$18 & 7]($15, $1, $2); //@line 26424
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 662; //@line 26427
  HEAP32[$AsyncCtx4 + 4 >> 2] = $7; //@line 26429
  sp = STACKTOP; //@line 26430
  STACKTOP = sp; //@line 26431
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 26433
 $20 = HEAP32[$7 >> 2] | 0; //@line 26434
 $23 = HEAP32[(HEAP32[$20 >> 2] | 0) + 76 >> 2] | 0; //@line 26437
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 26438
 FUNCTION_TABLE_vi[$23 & 1023]($20); //@line 26439
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 663; //@line 26442
  sp = STACKTOP; //@line 26443
  STACKTOP = sp; //@line 26444
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 26446
  STACKTOP = sp; //@line 26447
  return;
 }
}
function __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb_20($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $25 = 0, $28 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17746
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17748
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17750
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17754
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17756
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17758
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17760
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17764
 $22 = HEAP8[$0 + 44 >> 0] | 0; //@line 17768
 $25 = (HEAP32[$0 + 12 >> 2] | 0) + 369 | 0; //@line 17771
 $28 = __ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$4 >> 2] | 0, HEAP8[$2 >> 0] | 0, (HEAP8[$25 >> 0] | 0) != 0) | 0; //@line 17774
 HEAP8[$8 + 1 >> 0] = $28; //@line 17776
 $30 = $28 & 255; //@line 17777
 $31 = $10 & 255; //@line 17778
 if ($31 >>> 0 > $30 >>> 0) {
  HEAP8[$8 >> 0] = $28; //@line 17781
  __ZN14LoRaMacCommand20clear_command_bufferEv($12); //@line 17782
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($12); //@line 17783
  $$0 = 0; //@line 17784
 } else {
  HEAP8[$8 >> 0] = $30 - $10; //@line 17788
  $$0 = $31; //@line 17789
 }
 $35 = HEAP8[$2 >> 0] | 0; //@line 17791
 _printf(13258, $14) | 0; //@line 17792
 _printf(13584, $18) | 0; //@line 17793
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 17794
 _putchar(10) | 0; //@line 17795
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 550; //@line 17798
  $36 = $ReallocAsyncCtx + 4 | 0; //@line 17799
  HEAP32[$36 >> 2] = $4; //@line 17800
  $37 = $ReallocAsyncCtx + 8 | 0; //@line 17801
  HEAP32[$37 >> 2] = $25; //@line 17802
  $38 = $ReallocAsyncCtx + 12 | 0; //@line 17803
  HEAP8[$38 >> 0] = $35; //@line 17804
  $39 = $ReallocAsyncCtx + 13 | 0; //@line 17805
  HEAP8[$39 >> 0] = $22; //@line 17806
  $40 = $ReallocAsyncCtx + 16 | 0; //@line 17807
  HEAP32[$40 >> 2] = $$0; //@line 17808
  sp = STACKTOP; //@line 17809
  return;
 }
 ___async_unwind = 0; //@line 17812
 HEAP32[$ReallocAsyncCtx >> 2] = 550; //@line 17813
 $36 = $ReallocAsyncCtx + 4 | 0; //@line 17814
 HEAP32[$36 >> 2] = $4; //@line 17815
 $37 = $ReallocAsyncCtx + 8 | 0; //@line 17816
 HEAP32[$37 >> 2] = $25; //@line 17817
 $38 = $ReallocAsyncCtx + 12 | 0; //@line 17818
 HEAP8[$38 >> 0] = $35; //@line 17819
 $39 = $ReallocAsyncCtx + 13 | 0; //@line 17820
 HEAP8[$39 >> 0] = $22; //@line 17821
 $40 = $ReallocAsyncCtx + 16 | 0; //@line 17822
 HEAP32[$40 >> 2] = $$0; //@line 17823
 sp = STACKTOP; //@line 17824
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 314
 }
 ret = dest | 0; //@line 317
 dest_end = dest + num | 0; //@line 318
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 322
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 323
   dest = dest + 1 | 0; //@line 324
   src = src + 1 | 0; //@line 325
   num = num - 1 | 0; //@line 326
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 328
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 329
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 331
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 332
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 333
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 334
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 335
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 336
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 337
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 338
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 339
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 340
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 341
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 342
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 343
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 344
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 345
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 346
   dest = dest + 64 | 0; //@line 347
   src = src + 64 | 0; //@line 348
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 351
   dest = dest + 4 | 0; //@line 352
   src = src + 4 | 0; //@line 353
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 357
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 359
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 360
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 361
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 362
   dest = dest + 4 | 0; //@line 363
   src = src + 4 | 0; //@line 364
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 369
  dest = dest + 1 | 0; //@line 370
  src = src + 1 | 0; //@line 371
 }
 return ret | 0; //@line 373
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_300($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12001
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12003
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12005
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12007
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12009
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12011
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12013
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12015
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12017
 if ((HEAP32[___async_retval >> 2] | 0) < ($2 | 0)) {
  _printf(10904, $4) | 0; //@line 12022
  _printf(11092, $8) | 0; //@line 12023
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 12024
  _putchar(10) | 0; //@line 12025
  if (!___async) {
   ___async_unwind = 0; //@line 12028
  }
  HEAP32[$ReallocAsyncCtx3 >> 2] = 104; //@line 12030
  HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $14; //@line 12032
  HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 12034
  HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $4; //@line 12036
  HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $6; //@line 12038
  HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $8; //@line 12040
  HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $10; //@line 12042
  HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $12; //@line 12044
  HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 12046
  sp = STACKTOP; //@line 12047
  return;
 }
 $29 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 12052
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 12053
 FUNCTION_TABLE_vi[$29 & 1023]($12); //@line 12054
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 105; //@line 12057
  $30 = $ReallocAsyncCtx2 + 4 | 0; //@line 12058
  HEAP32[$30 >> 2] = $14; //@line 12059
  $31 = $ReallocAsyncCtx2 + 8 | 0; //@line 12060
  HEAP32[$31 >> 2] = $16; //@line 12061
  $32 = $ReallocAsyncCtx2 + 12 | 0; //@line 12062
  $$expand_i1_val = 1; //@line 12063
  HEAP8[$32 >> 0] = $$expand_i1_val; //@line 12064
  sp = STACKTOP; //@line 12065
  return;
 }
 ___async_unwind = 0; //@line 12068
 HEAP32[$ReallocAsyncCtx2 >> 2] = 105; //@line 12069
 $30 = $ReallocAsyncCtx2 + 4 | 0; //@line 12070
 HEAP32[$30 >> 2] = $14; //@line 12071
 $31 = $ReallocAsyncCtx2 + 8 | 0; //@line 12072
 HEAP32[$31 >> 2] = $16; //@line 12073
 $32 = $ReallocAsyncCtx2 + 12 | 0; //@line 12074
 $$expand_i1_val = 1; //@line 12075
 HEAP8[$32 >> 0] = $$expand_i1_val; //@line 12076
 sp = STACKTOP; //@line 12077
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_299($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 11911
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11915
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11917
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11919
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11921
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11923
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11925
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11927
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11929
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11931
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11933
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11935
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11937
 if ((HEAP16[$0 + 4 >> 1] | 0) < -1) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(36) | 0; //@line 11940
  $28 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 11941
  if (!___async) {
   HEAP32[___async_retval >> 2] = $28; //@line 11945
   ___async_unwind = 0; //@line 11946
  }
  HEAP32[$ReallocAsyncCtx13 >> 2] = 101; //@line 11948
  HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $6; //@line 11950
  HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $20; //@line 11952
  HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $22; //@line 11954
  HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $24; //@line 11956
  HEAP32[$ReallocAsyncCtx13 + 20 >> 2] = $26; //@line 11958
  HEAP32[$ReallocAsyncCtx13 + 24 >> 2] = $16; //@line 11960
  HEAP32[$ReallocAsyncCtx13 + 28 >> 2] = $4; //@line 11962
  HEAP32[$ReallocAsyncCtx13 + 32 >> 2] = $18; //@line 11964
  sp = STACKTOP; //@line 11965
  return;
 } else {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(36) | 0; //@line 11968
  $38 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 11969
  if (!___async) {
   HEAP32[___async_retval >> 2] = $38; //@line 11973
   ___async_unwind = 0; //@line 11974
  }
  HEAP32[$ReallocAsyncCtx12 >> 2] = 103; //@line 11976
  HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $6; //@line 11978
  HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $8; //@line 11980
  HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $10; //@line 11982
  HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $12; //@line 11984
  HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $14; //@line 11986
  HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $16; //@line 11988
  HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $4; //@line 11990
  HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $18; //@line 11992
  sp = STACKTOP; //@line 11993
  return;
 }
}
function _main__async_cb_139($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 216
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 218
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 220
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 222
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 224
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 226
 if (!(__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE(23528, 23328) | 0)) {
  $14 = $4 + 4 | 0; //@line 231
  HEAP32[$14 >> 2] = 0; //@line 233
  HEAP32[$14 + 4 >> 2] = 0; //@line 236
  HEAP32[$4 >> 2] = 7; //@line 237
  $18 = $4 + 12 | 0; //@line 238
  HEAP32[$18 >> 2] = 10120; //@line 239
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 240
  __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE(23256, $4); //@line 241
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 755; //@line 244
   $19 = $ReallocAsyncCtx11 + 4 | 0; //@line 245
   HEAP32[$19 >> 2] = $2; //@line 246
   $20 = $ReallocAsyncCtx11 + 8 | 0; //@line 247
   HEAP32[$20 >> 2] = $4; //@line 248
   $21 = $ReallocAsyncCtx11 + 12 | 0; //@line 249
   HEAP32[$21 >> 2] = $6; //@line 250
   $22 = $ReallocAsyncCtx11 + 16 | 0; //@line 251
   HEAP32[$22 >> 2] = $8; //@line 252
   $23 = $ReallocAsyncCtx11 + 20 | 0; //@line 253
   HEAP32[$23 >> 2] = $10; //@line 254
   $24 = $ReallocAsyncCtx11 + 24 | 0; //@line 255
   HEAP32[$24 >> 2] = $18; //@line 256
   sp = STACKTOP; //@line 257
   return;
  }
  ___async_unwind = 0; //@line 260
  HEAP32[$ReallocAsyncCtx11 >> 2] = 755; //@line 261
  $19 = $ReallocAsyncCtx11 + 4 | 0; //@line 262
  HEAP32[$19 >> 2] = $2; //@line 263
  $20 = $ReallocAsyncCtx11 + 8 | 0; //@line 264
  HEAP32[$20 >> 2] = $4; //@line 265
  $21 = $ReallocAsyncCtx11 + 12 | 0; //@line 266
  HEAP32[$21 >> 2] = $6; //@line 267
  $22 = $ReallocAsyncCtx11 + 16 | 0; //@line 268
  HEAP32[$22 >> 2] = $8; //@line 269
  $23 = $ReallocAsyncCtx11 + 20 | 0; //@line 270
  HEAP32[$23 >> 2] = $10; //@line 271
  $24 = $ReallocAsyncCtx11 + 24 | 0; //@line 272
  HEAP32[$24 >> 2] = $18; //@line 273
  sp = STACKTOP; //@line 274
  return;
 } else {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 277
  _puts(15703) | 0; //@line 278
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 754; //@line 281
   sp = STACKTOP; //@line 282
   return;
  }
  ___async_unwind = 0; //@line 285
  HEAP32[$ReallocAsyncCtx7 >> 2] = 754; //@line 286
  sp = STACKTOP; //@line 287
  return;
 }
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_225($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 7580
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7586
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7590
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7592
 if ((HEAP32[___async_retval >> 2] | 0) != -1018) {
  _printf(12178, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 7597
  _printf(12376, $6) | 0; //@line 7598
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 7599
  _putchar(10) | 0; //@line 7600
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 232; //@line 7603
   $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 7604
   HEAP32[$15 >> 2] = $10; //@line 7605
   $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 7606
   HEAP32[$16 >> 2] = $12; //@line 7607
   sp = STACKTOP; //@line 7608
   return;
  }
  ___async_unwind = 0; //@line 7611
  HEAP32[$ReallocAsyncCtx5 >> 2] = 232; //@line 7612
  $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 7613
  HEAP32[$15 >> 2] = $10; //@line 7614
  $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 7615
  HEAP32[$16 >> 2] = $12; //@line 7616
  sp = STACKTOP; //@line 7617
  return;
 }
 $17 = $10 + 1892 | 0; //@line 7620
 $18 = HEAP32[$17 >> 2] | 0; //@line 7621
 if (!$18) {
  return;
 }
 $22 = HEAP32[$10 + 2288 >> 2] | 0; //@line 7628
 $24 = HEAP32[$18 + 4 >> 2] | 0; //@line 7630
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 7631
 FUNCTION_TABLE_vii[$24 & 31]($12, $10 + 1880 | 0); //@line 7632
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 233; //@line 7635
  $25 = $ReallocAsyncCtx + 4 | 0; //@line 7636
  HEAP32[$25 >> 2] = $17; //@line 7637
  $26 = $ReallocAsyncCtx + 8 | 0; //@line 7638
  HEAP32[$26 >> 2] = $12; //@line 7639
  $27 = $ReallocAsyncCtx + 12 | 0; //@line 7640
  HEAP32[$27 >> 2] = $22; //@line 7641
  $28 = $ReallocAsyncCtx + 16 | 0; //@line 7642
  HEAP32[$28 >> 2] = $12; //@line 7643
  sp = STACKTOP; //@line 7644
  return;
 }
 ___async_unwind = 0; //@line 7647
 HEAP32[$ReallocAsyncCtx >> 2] = 233; //@line 7648
 $25 = $ReallocAsyncCtx + 4 | 0; //@line 7649
 HEAP32[$25 >> 2] = $17; //@line 7650
 $26 = $ReallocAsyncCtx + 8 | 0; //@line 7651
 HEAP32[$26 >> 2] = $12; //@line 7652
 $27 = $ReallocAsyncCtx + 12 | 0; //@line 7653
 HEAP32[$27 >> 2] = $22; //@line 7654
 $28 = $ReallocAsyncCtx + 16 | 0; //@line 7655
 HEAP32[$28 >> 2] = $12; //@line 7656
 sp = STACKTOP; //@line 7657
 return;
}
function __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK25loramac_mib_req_confirm_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038$lcssa = 0, $$03841 = 0, $$1 = 0, $$140 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $32 = 0, $41 = 0, $48 = 0, $7 = 0, $9 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!$2) {
  $$140 = -1003; //@line 20235
  return $$140 | 0; //@line 20236
 }
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$140 = -1002; //@line 20241
  return $$140 | 0; //@line 20242
 }
 $7 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 20245
 $9 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 20247
 if (!($7 << 24 >> 24)) {
  $$038$lcssa = 0; //@line 20250
 } else {
  $11 = $1 + 4 | 0; //@line 20252
  $12 = $2 + 4 | 0; //@line 20253
  $wide$trip$count = $7 & 255; //@line 20254
  $$03841 = 0; //@line 20255
  $indvars$iv = 0; //@line 20255
  while (1) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $9, $indvars$iv) | 0) {
    $15 = HEAP32[$11 >> 2] | 0; //@line 20260
    $16 = $$03841 & 255; //@line 20261
    HEAP8[$15 + ($16 << 4) >> 0] = $indvars$iv; //@line 20264
    HEAP32[$15 + ($16 << 4) + 4 >> 2] = HEAP32[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) >> 2]; //@line 20269
    HEAP8[$15 + ($16 << 4) + 12 >> 0] = HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 8 >> 0] | 0; //@line 20274
    $32 = (HEAP32[$11 >> 2] | 0) + ($16 << 4) + 12 | 0; //@line 20280
    HEAP8[$32 >> 0] = HEAP8[$32 >> 0] & -16 | HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 8 >> 0] & 15; //@line 20284
    $41 = (HEAP32[$11 >> 2] | 0) + ($16 << 4) + 12 | 0; //@line 20290
    HEAP8[$41 >> 0] = HEAP8[$41 >> 0] & 15 | HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 8 >> 0] & -16; //@line 20294
    $48 = HEAP32[$11 >> 2] | 0; //@line 20298
    HEAP8[$48 + ($16 << 4) + 13 >> 0] = HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 9 >> 0] | 0; //@line 20300
    HEAP32[$48 + ($16 << 4) + 8 >> 2] = HEAP32[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 4 >> 2]; //@line 20305
    $$1 = $$03841 + 1 << 24 >> 24; //@line 20307
   } else {
    $$1 = $$03841; //@line 20309
   }
   $indvars$iv = $indvars$iv + 1 | 0; //@line 20311
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$038$lcssa = $$1; //@line 20314
    break;
   } else {
    $$03841 = $$1; //@line 20317
   }
  }
 }
 HEAP8[$1 >> 0] = $$038$lcssa; //@line 20321
 $$140 = 0; //@line 20322
 return $$140 | 0; //@line 20323
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $27 = 0, $30 = 0, $36 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18424
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18426
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18428
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18430
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18432
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18434
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18436
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18438
 $15 = $2 + 264 | 0; //@line 18439
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($15) | 0) + 4 >> 2] = 1; //@line 18442
 $18 = $2 + 288 | 0; //@line 18443
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 4 >> 2] = 1; //@line 18446
 $21 = HEAP8[$4 >> 0] | 0; //@line 18447
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 8 >> 0] = $21; //@line 18450
 $24 = HEAP8[$6 >> 0] | 0; //@line 18451
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 9 >> 0] = $24; //@line 18454
 $27 = HEAP32[$8 >> 2] | 0; //@line 18455
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 12 >> 2] = $27; //@line 18458
 $30 = HEAP32[$8 >> 2] | 0; //@line 18459
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($15) | 0) + 8 >> 2] = $30; //@line 18462
 if (!(HEAP8[$2 + 372 >> 0] | 0)) {
  $36 = $2 + 897 | 0; //@line 18467
  HEAP8[$36 >> 0] = (HEAP8[$36 >> 0] | 0) + 1 << 24 >> 24; //@line 18470
 }
 $39 = HEAP32[$10 >> 2] | 0; //@line 18472
 $42 = HEAP16[$12 >> 1] & 255; //@line 18475
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 18476
 __ZN7LoRaPHY11handle_sendEPhh($39, $2 + 381 | 0, $42); //@line 18477
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 503; //@line 18480
  $43 = $ReallocAsyncCtx3 + 4 | 0; //@line 18481
  HEAP32[$43 >> 2] = $2; //@line 18482
  $44 = $ReallocAsyncCtx3 + 8 | 0; //@line 18483
  HEAP32[$44 >> 2] = $6; //@line 18484
  $45 = $ReallocAsyncCtx3 + 12 | 0; //@line 18485
  HEAP32[$45 >> 2] = $14; //@line 18486
  sp = STACKTOP; //@line 18487
  return;
 }
 ___async_unwind = 0; //@line 18490
 HEAP32[$ReallocAsyncCtx3 >> 2] = 503; //@line 18491
 $43 = $ReallocAsyncCtx3 + 4 | 0; //@line 18492
 HEAP32[$43 >> 2] = $2; //@line 18493
 $44 = $ReallocAsyncCtx3 + 8 | 0; //@line 18494
 HEAP32[$44 >> 2] = $6; //@line 18495
 $45 = $ReallocAsyncCtx3 + 12 | 0; //@line 18496
 HEAP32[$45 >> 2] = $14; //@line 18497
 sp = STACKTOP; //@line 18498
 return;
}
function __ZL12send_messagev() {
 var $0 = 0, $11 = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 6995
 STACKTOP = STACKTOP + 80 | 0; //@line 6996
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 6996
 $vararg_buffer8 = sp + 24 | 0; //@line 6997
 $vararg_buffer5 = sp + 16 | 0; //@line 6998
 $vararg_buffer1 = sp + 8 | 0; //@line 6999
 $vararg_buffer = sp; //@line 7000
 $0 = sp + 28 | 0; //@line 7001
 dest = $0; //@line 7002
 stop = dest + 50 | 0; //@line 7002
 do {
  HEAP8[dest >> 0] = 0; //@line 7002
  dest = dest + 1 | 0; //@line 7002
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$vararg_buffer >> 3] = +__ZN5Sht3115readTemperatureEv(24232); //@line 7005
 _sprintf($0, 16132, $vararg_buffer) | 0; //@line 7006
 $3 = _strlen($0) | 0; //@line 7007
 HEAP32[$vararg_buffer1 >> 2] = $3; //@line 7008
 HEAP32[$vararg_buffer1 + 4 >> 2] = $0; //@line 7010
 _printf(16152, $vararg_buffer1) | 0; //@line 7011
 $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7013
 $5 = __ZN16LoRaWANInterface4sendEhPKhti(23528, 15, $0, $3 & 65535, 1) | 0; //@line 7014
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 764; //@line 7017
  HEAP32[$AsyncCtx13 + 4 >> 2] = $vararg_buffer8; //@line 7019
  HEAP32[$AsyncCtx13 + 8 >> 2] = $vararg_buffer8; //@line 7021
  HEAP32[$AsyncCtx13 + 12 >> 2] = $0; //@line 7023
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer5; //@line 7025
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer5; //@line 7027
  sp = STACKTOP; //@line 7028
  STACKTOP = sp; //@line 7029
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 7031
 $11 = $5 << 16 >> 16; //@line 7032
 if ($5 << 16 >> 16 >= 0) {
  HEAP32[$vararg_buffer8 >> 2] = $11; //@line 7035
  _printf(16228, $vararg_buffer8) | 0; //@line 7036
  STACKTOP = sp; //@line 7037
  return;
 }
 if ($5 << 16 >> 16 != -1001) {
  HEAP32[$vararg_buffer5 >> 2] = $11; //@line 7041
  _printf(16204, $vararg_buffer5) | 0; //@line 7042
  STACKTOP = sp; //@line 7043
  return;
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7045
 _puts(16176) | 0; //@line 7046
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 765; //@line 7049
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7051
  sp = STACKTOP; //@line 7052
  STACKTOP = sp; //@line 7053
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7055
 STACKTOP = sp; //@line 7056
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_161($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$pre = 0, $10 = 0, $13 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 1962
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1964
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1966
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1968
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1970
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1972
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1974
 if (!$AsyncRetVal) {
  $13 = $2 + 288 | 0; //@line 1977
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($13) | 0) + 11 >> 0] = 0; //@line 1980
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($13) | 0) + 10 >> 0] = 0; //@line 1983
  $18 = HEAP32[$4 >> 2] | 0; //@line 1984
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($13) | 0) + 16 >> 2] = $18; //@line 1987
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(20) | 0; //@line 1988
  $21 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 1989
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 557; //@line 1992
   $22 = $ReallocAsyncCtx8 + 4 | 0; //@line 1993
   HEAP32[$22 >> 2] = $6; //@line 1994
   $23 = $ReallocAsyncCtx8 + 8 | 0; //@line 1995
   HEAP32[$23 >> 2] = $8; //@line 1996
   $24 = $ReallocAsyncCtx8 + 12 | 0; //@line 1997
   HEAP32[$24 >> 2] = $10; //@line 1998
   $25 = $ReallocAsyncCtx8 + 16 | 0; //@line 1999
   HEAP32[$25 >> 2] = $2; //@line 2000
   sp = STACKTOP; //@line 2001
   return;
  }
  HEAP32[___async_retval >> 2] = $21; //@line 2005
  ___async_unwind = 0; //@line 2006
  HEAP32[$ReallocAsyncCtx8 >> 2] = 557; //@line 2007
  $22 = $ReallocAsyncCtx8 + 4 | 0; //@line 2008
  HEAP32[$22 >> 2] = $6; //@line 2009
  $23 = $ReallocAsyncCtx8 + 8 | 0; //@line 2010
  HEAP32[$23 >> 2] = $8; //@line 2011
  $24 = $ReallocAsyncCtx8 + 12 | 0; //@line 2012
  HEAP32[$24 >> 2] = $10; //@line 2013
  $25 = $ReallocAsyncCtx8 + 16 | 0; //@line 2014
  HEAP32[$25 >> 2] = $2; //@line 2015
  sp = STACKTOP; //@line 2016
  return;
 }
 if (!$AsyncRetVal) {
  $$1 = 0; //@line 2021
  $30 = ___async_retval; //@line 2022
  HEAP32[$30 >> 2] = $$1; //@line 2023
  return;
 }
 $$pre = HEAP8[$10 >> 0] | 0; //@line 2026
 HEAP8[$2 + 373 >> 0] = 0; //@line 2028
 HEAP8[$10 >> 0] = $$pre & -9; //@line 2030
 $$1 = $AsyncRetVal; //@line 2031
 $30 = ___async_retval; //@line 2032
 HEAP32[$30 >> 2] = $$1; //@line 2033
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 14975
 STACKTOP = STACKTOP + 64 | 0; //@line 14976
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 14976
 $3 = sp; //@line 14977
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 14980
 } else {
  if (!$1) {
   $$2 = 0; //@line 14984
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14986
   $6 = ___dynamic_cast($1, 464, 448, 0) | 0; //@line 14987
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 795; //@line 14990
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 14992
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 14994
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 14996
    sp = STACKTOP; //@line 14997
    STACKTOP = sp; //@line 14998
    return 0; //@line 14998
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15000
   if (!$6) {
    $$2 = 0; //@line 15003
   } else {
    dest = $3 + 4 | 0; //@line 15006
    stop = dest + 52 | 0; //@line 15006
    do {
     HEAP32[dest >> 2] = 0; //@line 15006
     dest = dest + 4 | 0; //@line 15006
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 15007
    HEAP32[$3 + 8 >> 2] = $0; //@line 15009
    HEAP32[$3 + 12 >> 2] = -1; //@line 15011
    HEAP32[$3 + 48 >> 2] = 1; //@line 15013
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 15016
    $18 = HEAP32[$2 >> 2] | 0; //@line 15017
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 15018
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 15019
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 796; //@line 15022
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 15024
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 15026
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 15028
     sp = STACKTOP; //@line 15029
     STACKTOP = sp; //@line 15030
     return 0; //@line 15030
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15032
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 15039
     $$0 = 1; //@line 15040
    } else {
     $$0 = 0; //@line 15042
    }
    $$2 = $$0; //@line 15044
   }
  }
 }
 STACKTOP = sp; //@line 15048
 return $$2 | 0; //@line 15048
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_343($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 16084
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16086
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16092
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16096
 $13 = $12 + 360 | 0; //@line 16097
 if ((HEAP32[$13 >> 2] | 0) == 2) {
  _printf(13258, HEAP32[$0 + 8 >> 2] | 0) | 0; //@line 16101
  _printf(13285, $8) | 0; //@line 16102
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 16103
  _putchar(10) | 0; //@line 16104
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 447; //@line 16107
   $16 = $ReallocAsyncCtx + 4 | 0; //@line 16108
   HEAP32[$16 >> 2] = $12; //@line 16109
   $17 = $ReallocAsyncCtx + 8 | 0; //@line 16110
   HEAP32[$17 >> 2] = $2; //@line 16111
   $18 = $ReallocAsyncCtx + 12 | 0; //@line 16112
   HEAP32[$18 >> 2] = $2; //@line 16113
   $19 = $ReallocAsyncCtx + 16 | 0; //@line 16114
   HEAP32[$19 >> 2] = $13; //@line 16115
   sp = STACKTOP; //@line 16116
   return;
  }
  ___async_unwind = 0; //@line 16119
  HEAP32[$ReallocAsyncCtx >> 2] = 447; //@line 16120
  $16 = $ReallocAsyncCtx + 4 | 0; //@line 16121
  HEAP32[$16 >> 2] = $12; //@line 16122
  $17 = $ReallocAsyncCtx + 8 | 0; //@line 16123
  HEAP32[$17 >> 2] = $2; //@line 16124
  $18 = $ReallocAsyncCtx + 12 | 0; //@line 16125
  HEAP32[$18 >> 2] = $2; //@line 16126
  $19 = $ReallocAsyncCtx + 16 | 0; //@line 16127
  HEAP32[$19 >> 2] = $13; //@line 16128
  sp = STACKTOP; //@line 16129
  return;
 } else {
  $20 = HEAP32[$12 >> 2] | 0; //@line 16132
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 16133
  __ZN7LoRaPHY18put_radio_to_sleepEv($20); //@line 16134
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 450; //@line 16137
   $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 16138
   HEAP32[$21 >> 2] = $12; //@line 16139
   $22 = $ReallocAsyncCtx4 + 8 | 0; //@line 16140
   HEAP32[$22 >> 2] = $13; //@line 16141
   sp = STACKTOP; //@line 16142
   return;
  }
  ___async_unwind = 0; //@line 16145
  HEAP32[$ReallocAsyncCtx4 >> 2] = 450; //@line 16146
  $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 16147
  HEAP32[$21 >> 2] = $12; //@line 16148
  $22 = $ReallocAsyncCtx4 + 8 | 0; //@line 16149
  HEAP32[$22 >> 2] = $13; //@line 16150
  sp = STACKTOP; //@line 16151
  return;
 }
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 14400
 STACKTOP = STACKTOP + 128 | 0; //@line 14401
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 14401
 $4 = sp + 124 | 0; //@line 14402
 $5 = sp; //@line 14403
 dest = $5; //@line 14404
 src = 10656; //@line 14404
 stop = dest + 124 | 0; //@line 14404
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 14404
  dest = dest + 4 | 0; //@line 14404
  src = src + 4 | 0; //@line 14404
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 14410
   $$015 = 1; //@line 14410
   label = 4; //@line 14411
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 14414
   $$0 = -1; //@line 14415
  }
 } else {
  $$014 = $0; //@line 14418
  $$015 = $1; //@line 14418
  label = 4; //@line 14419
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 14423
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 14425
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 14427
  $14 = $5 + 20 | 0; //@line 14428
  HEAP32[$14 >> 2] = $$014; //@line 14429
  HEAP32[$5 + 44 >> 2] = $$014; //@line 14431
  $16 = $$014 + $$$015 | 0; //@line 14432
  $17 = $5 + 16 | 0; //@line 14433
  HEAP32[$17 >> 2] = $16; //@line 14434
  HEAP32[$5 + 28 >> 2] = $16; //@line 14436
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 14437
  $19 = _vfprintf($5, $2, $3) | 0; //@line 14438
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 783; //@line 14441
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 14443
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 14445
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 14447
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 14449
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 14451
   sp = STACKTOP; //@line 14452
   STACKTOP = sp; //@line 14453
   return 0; //@line 14453
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14455
  if (!$$$015) {
   $$0 = $19; //@line 14458
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 14460
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 14465
   $$0 = $19; //@line 14466
  }
 }
 STACKTOP = sp; //@line 14469
 return $$0 | 0; //@line 14469
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11216
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 11218
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11220
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11222
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11224
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11226
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11228
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11230
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11232
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11238
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11242
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 11244
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 11246
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 11248
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 11250
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 11252
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 11254
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 11256
 _printf(10904, HEAP32[$0 + 36 >> 2] | 0) | 0; //@line 11257
 HEAP32[$22 >> 2] = 5; //@line 11258
 _printf(10970, $22) | 0; //@line 11259
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 11260
 _putchar(10) | 0; //@line 11261
 if (!___async) {
  ___async_unwind = 0; //@line 11264
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 95; //@line 11266
 HEAP16[$ReallocAsyncCtx6 + 4 >> 1] = $2; //@line 11268
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 11270
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 11272
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 11274
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 11276
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 11278
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 11280
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 11282
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $26; //@line 11284
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $28; //@line 11286
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $30; //@line 11288
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $32; //@line 11290
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $34; //@line 11292
 HEAP32[$ReallocAsyncCtx6 + 56 >> 2] = $36; //@line 11294
 HEAP32[$ReallocAsyncCtx6 + 60 >> 2] = $38; //@line 11296
 HEAP32[$ReallocAsyncCtx6 + 64 >> 2] = $40; //@line 11298
 sp = STACKTOP; //@line 11299
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16307
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 16313
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 16317
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 16318
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 16319
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 16320
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 812; //@line 16323
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 16325
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 16327
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 16329
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 16331
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 16333
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 16335
    sp = STACKTOP; //@line 16336
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16339
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 16343
    $$0 = $0 + 24 | 0; //@line 16344
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 16346
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 16347
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 16352
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 16358
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 16361
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 813; //@line 16366
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 16368
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 16370
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 16372
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 16374
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 16376
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 16378
    sp = STACKTOP; //@line 16379
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_414($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx30 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 23516
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23520
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23522
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23524
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23526
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23527
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 23531
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 23532
  FUNCTION_TABLE_vi[$13 & 1023]($4); //@line 23533
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 269; //@line 23536
   $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 23537
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 23538
   $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 23539
   HEAP32[$15 >> 2] = $6; //@line 23540
   $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 23541
   HEAP32[$16 >> 2] = $8; //@line 23542
   sp = STACKTOP; //@line 23543
   return;
  }
  ___async_unwind = 0; //@line 23546
  HEAP32[$ReallocAsyncCtx8 >> 2] = 269; //@line 23547
  $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 23548
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 23549
  $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 23550
  HEAP32[$15 >> 2] = $6; //@line 23551
  $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 23552
  HEAP32[$16 >> 2] = $8; //@line 23553
  sp = STACKTOP; //@line 23554
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$6 >> 2] = 6; //@line 23559
  HEAP32[___async_retval >> 2] = -1014; //@line 23561
  return;
 }
 $ReallocAsyncCtx30 = _emscripten_realloc_async_context(12) | 0; //@line 23564
 _mbed_assert_internal(13142, 12226, 1243); //@line 23565
 if (___async) {
  HEAP32[$ReallocAsyncCtx30 >> 2] = 270; //@line 23568
  $18 = $ReallocAsyncCtx30 + 4 | 0; //@line 23569
  HEAP32[$18 >> 2] = $6; //@line 23570
  $19 = $ReallocAsyncCtx30 + 8 | 0; //@line 23571
  HEAP32[$19 >> 2] = $8; //@line 23572
  sp = STACKTOP; //@line 23573
  return;
 }
 ___async_unwind = 0; //@line 23576
 HEAP32[$ReallocAsyncCtx30 >> 2] = 270; //@line 23577
 $18 = $ReallocAsyncCtx30 + 4 | 0; //@line 23578
 HEAP32[$18 >> 2] = $6; //@line 23579
 $19 = $ReallocAsyncCtx30 + 8 | 0; //@line 23580
 HEAP32[$19 >> 2] = $8; //@line 23581
 sp = STACKTOP; //@line 23582
 return;
}
function __ZN7LoRaMac21prepare_rx_done_abortEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $21 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3782
 STACKTOP = STACKTOP + 16 | 0; //@line 3783
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3783
 $$byval_copy = sp; //@line 3784
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3786
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3788
 $5 = $2 + 968 | 0; //@line 3789
 HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 64; //@line 3792
 if (!(HEAP8[$2 + 373 >> 0] | 0)) {
  $17 = $2 + 944 | 0; //@line 3797
  HEAP8[$17 >> 0] = HEAP8[$17 >> 0] | 34; //@line 3800
  $21 = HEAP32[$2 + 356 >> 2] | 0; //@line 3802
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 3804
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $2 + 996 | 0, 1); //@line 3805
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 431; //@line 3808
   sp = STACKTOP; //@line 3809
   STACKTOP = sp; //@line 3810
   return;
  }
  ___async_unwind = 0; //@line 3812
  HEAP32[$ReallocAsyncCtx2 >> 2] = 431; //@line 3813
  sp = STACKTOP; //@line 3814
  STACKTOP = sp; //@line 3815
  return;
 } else {
  $12 = HEAP32[$2 + 1328 >> 2] | 0; //@line 3818
  HEAP32[$4 >> 2] = 428; //@line 3819
  HEAP32[$4 + 4 >> 2] = 0; //@line 3821
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 3822
  HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 3823
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 3823
  $13 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($12, $2, $$byval_copy) | 0; //@line 3824
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 429; //@line 3827
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 3828
   HEAP32[$14 >> 2] = $4; //@line 3829
   $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 3830
   HEAP32[$15 >> 2] = $2; //@line 3831
   sp = STACKTOP; //@line 3832
   STACKTOP = sp; //@line 3833
   return;
  }
  HEAP32[___async_retval >> 2] = $13; //@line 3836
  ___async_unwind = 0; //@line 3837
  HEAP32[$ReallocAsyncCtx3 >> 2] = 429; //@line 3838
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 3839
  HEAP32[$14 >> 2] = $4; //@line 3840
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 3841
  HEAP32[$15 >> 2] = $2; //@line 3842
  sp = STACKTOP; //@line 3843
  STACKTOP = sp; //@line 3844
  return;
 }
}
function _mbedtls_cipher_cmac_update__async_cb_329($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $42 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15277
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15279
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15281
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15283
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15285
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15287
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15289
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15291
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15293
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15295
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15297
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15299
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 15302
  $42 = ___async_retval; //@line 15303
  HEAP32[$42 >> 2] = $$0; //@line 15304
  return;
 }
 $24 = $2 + 1 | 0; //@line 15307
 if ($24 >>> 0 < $4 >>> 0) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 15310
  $22 = _mbedtls_cipher_update($8, $10, 0, $10, $12) | 0; //@line 15311
  if (!___async) {
   HEAP32[___async_retval >> 2] = $22; //@line 15315
   ___async_unwind = 0; //@line 15316
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 691; //@line 15318
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $24; //@line 15320
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 15322
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 15324
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 15326
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 15328
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 15330
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 15332
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 15334
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 15336
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 15338
  sp = STACKTOP; //@line 15339
  return;
 }
 if (!$14) {
  $$0 = 0; //@line 15344
  $42 = ___async_retval; //@line 15345
  HEAP32[$42 >> 2] = $$0; //@line 15346
  return;
 }
 _memcpy((HEAP32[$18 >> 2] | 0) + ($20 + 16) | 0, $16 | 0, $14 | 0) | 0; //@line 15351
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + $14; //@line 15354
 $$0 = 0; //@line 15355
 $42 = ___async_retval; //@line 15356
 HEAP32[$42 >> 2] = $$0; //@line 15357
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_388($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21929
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21931
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21933
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21935
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21937
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21939
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21941
 $13 = $2 + 946 | 0; //@line 21943
 HEAP16[$13 >> 1] = $AsyncRetVal; //@line 21944
 $15 = HEAP16[$4 >> 1] | 0; //@line 21946
 HEAP16[$4 >> 1] = $15 + 1 << 16 >> 16; //@line 21948
 HEAP8[($15 & 65535) + ($2 + 381) >> 0] = $AsyncRetVal; //@line 21951
 $21 = (HEAPU16[$13 >> 1] | 0) >>> 8 & 255; //@line 21954
 $22 = HEAP16[$4 >> 1] | 0; //@line 21955
 HEAP16[$4 >> 1] = $22 + 1 << 16 >> 16; //@line 21957
 HEAP8[($22 & 65535) + ($2 + 381) >> 0] = $21; //@line 21960
 $27 = HEAP16[$4 >> 1] & 255; //@line 21962
 $29 = HEAP32[$2 + 908 >> 2] | 0; //@line 21964
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 21965
 $30 = __Z22compute_join_frame_micPKhtS0_Pj($6, $27, $29, $8) | 0; //@line 21966
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 505; //@line 21969
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 21970
  HEAP32[$31 >> 2] = $8; //@line 21971
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 21972
  HEAP32[$32 >> 2] = $4; //@line 21973
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 21974
  HEAP32[$33 >> 2] = $2; //@line 21975
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 21976
  HEAP32[$34 >> 2] = $10; //@line 21977
  sp = STACKTOP; //@line 21978
  return;
 }
 HEAP32[___async_retval >> 2] = $30; //@line 21982
 ___async_unwind = 0; //@line 21983
 HEAP32[$ReallocAsyncCtx2 >> 2] = 505; //@line 21984
 $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 21985
 HEAP32[$31 >> 2] = $8; //@line 21986
 $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 21987
 HEAP32[$32 >> 2] = $4; //@line 21988
 $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 21989
 HEAP32[$33 >> 2] = $2; //@line 21990
 $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 21991
 HEAP32[$34 >> 2] = $10; //@line 21992
 sp = STACKTOP; //@line 21993
 return;
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_172($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2894
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2896
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2898
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2900
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2902
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2904
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2906
 if (!$AsyncRetVal) {
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 11 >> 0] = 0; //@line 2911
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 10 >> 0] = 0; //@line 2914
  $18 = HEAP32[$4 + 956 >> 2] | 0; //@line 2916
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 16 >> 2] = $18; //@line 2919
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 2920
  $21 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 2921
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 564; //@line 2924
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 2925
   HEAP32[$22 >> 2] = $6; //@line 2926
   $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 2927
   HEAP32[$23 >> 2] = $10; //@line 2928
   $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 2929
   HEAP32[$24 >> 2] = $2; //@line 2930
   $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 2931
   HEAP32[$25 >> 2] = $4; //@line 2932
   $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 2933
   HEAP32[$26 >> 2] = $8; //@line 2934
   sp = STACKTOP; //@line 2935
   return;
  }
  HEAP32[___async_retval >> 2] = $21; //@line 2939
  ___async_unwind = 0; //@line 2940
  HEAP32[$ReallocAsyncCtx3 >> 2] = 564; //@line 2941
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 2942
  HEAP32[$22 >> 2] = $6; //@line 2943
  $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 2944
  HEAP32[$23 >> 2] = $10; //@line 2945
  $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 2946
  HEAP32[$24 >> 2] = $2; //@line 2947
  $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 2948
  HEAP32[$25 >> 2] = $4; //@line 2949
  $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 2950
  HEAP32[$26 >> 2] = $8; //@line 2951
  sp = STACKTOP; //@line 2952
  return;
 } else {
  HEAP8[$4 + 373 >> 0] = 0; //@line 2956
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 2958
  return;
 }
}
function __ZN16LoRaWANInterface4sendEhPKhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $10 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 6054
 STACKTOP = STACKTOP + 16 | 0; //@line 6055
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6055
 $vararg_buffer1 = sp + 8 | 0; //@line 6056
 $vararg_buffer = sp; //@line 6057
 do {
  if (HEAP8[$0 + 4 >> 0] | 0) {
   $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 6065
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 6066
   FUNCTION_TABLE_ii[$10 & 15]($0) | 0; //@line 6067
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 191; //@line 6070
    HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 6072
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 6074
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 6076
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 6078
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 6080
    HEAP32[$AsyncCtx + 24 >> 2] = $4; //@line 6082
    HEAP8[$AsyncCtx + 28 >> 0] = $1; //@line 6084
    HEAP16[$AsyncCtx + 30 >> 1] = $3; //@line 6086
    sp = STACKTOP; //@line 6087
    STACKTOP = sp; //@line 6088
    return 0; //@line 6088
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6090
    break;
   }
  }
 } while (0);
 _printf(12127, $vararg_buffer) | 0; //@line 6095
 _printf(12140, $vararg_buffer1) | 0; //@line 6096
 $AsyncCtx5 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6097
 _putchar(10) | 0; //@line 6098
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 192; //@line 6101
  HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 6103
  HEAP32[$AsyncCtx5 + 8 >> 2] = $4; //@line 6105
  HEAP8[$AsyncCtx5 + 12 >> 0] = $1; //@line 6107
  HEAP16[$AsyncCtx5 + 14 >> 1] = $3; //@line 6109
  sp = STACKTOP; //@line 6110
  STACKTOP = sp; //@line 6111
  return 0; //@line 6111
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6113
 if (!$2) {
  $$0 = -1003; //@line 6116
  STACKTOP = sp; //@line 6117
  return $$0 | 0; //@line 6117
 }
 $$0 = __ZN12LoRaWANStack9handle_txEhPKhth(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1, $2, $3, $4 & 255) | 0; //@line 6122
 STACKTOP = sp; //@line 6123
 return $$0 | 0; //@line 6123
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_461($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 33724
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33728
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33730
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33732
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 33734
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 33735
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 33739
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 33740
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 33741
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 282; //@line 33744
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 33745
   HEAP32[$14 >> 2] = $4; //@line 33746
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 33747
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 33748
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 33749
   HEAP32[$16 >> 2] = $8; //@line 33750
   sp = STACKTOP; //@line 33751
   return;
  }
  ___async_unwind = 0; //@line 33754
  HEAP32[$ReallocAsyncCtx4 >> 2] = 282; //@line 33755
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 33756
  HEAP32[$14 >> 2] = $4; //@line 33757
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 33758
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 33759
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 33760
  HEAP32[$16 >> 2] = $8; //@line 33761
  sp = STACKTOP; //@line 33762
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 33765
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 33769
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 33773
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 33774
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 33775
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 283; //@line 33778
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 33779
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 33780
  sp = STACKTOP; //@line 33781
  return;
 }
 ___async_unwind = 0; //@line 33784
 HEAP32[$ReallocAsyncCtx5 >> 2] = 283; //@line 33785
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 33786
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 33787
 sp = STACKTOP; //@line 33788
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_488($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 36176
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36180
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36182
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36184
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 36186
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 36187
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 36191
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 36192
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 36193
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 290; //@line 36196
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 36197
   HEAP32[$14 >> 2] = $4; //@line 36198
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 36199
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 36200
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 36201
   HEAP32[$16 >> 2] = $8; //@line 36202
   sp = STACKTOP; //@line 36203
   return;
  }
  ___async_unwind = 0; //@line 36206
  HEAP32[$ReallocAsyncCtx4 >> 2] = 290; //@line 36207
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 36208
  HEAP32[$14 >> 2] = $4; //@line 36209
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 36210
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 36211
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 36212
  HEAP32[$16 >> 2] = $8; //@line 36213
  sp = STACKTOP; //@line 36214
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 36217
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 36221
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 36225
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 36226
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 36227
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 36230
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 36231
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 36232
  sp = STACKTOP; //@line 36233
  return;
 }
 ___async_unwind = 0; //@line 36236
 HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 36237
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 36238
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 36239
 sp = STACKTOP; //@line 36240
 return;
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 11163
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 11166
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 11169
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 11172
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 11178
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 11187
     $24 = $13 >>> 2; //@line 11188
     $$090 = 0; //@line 11189
     $$094 = $7; //@line 11189
     while (1) {
      $25 = $$094 >>> 1; //@line 11191
      $26 = $$090 + $25 | 0; //@line 11192
      $27 = $26 << 1; //@line 11193
      $28 = $27 + $23 | 0; //@line 11194
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 11197
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 11201
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 11207
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 11215
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 11219
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 11225
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 11230
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 11233
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 11233
      }
     }
     $46 = $27 + $24 | 0; //@line 11236
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 11239
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 11243
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 11255
     } else {
      $$4 = 0; //@line 11257
     }
    } else {
     $$4 = 0; //@line 11260
    }
   } else {
    $$4 = 0; //@line 11263
   }
  } else {
   $$4 = 0; //@line 11266
  }
 } while (0);
 return $$4 | 0; //@line 11269
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_345($0) {
 $0 = $0 | 0;
 var $14 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $33 = 0, $37 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 16166
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16168
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16170
 $7 = (HEAP8[$2 + 373 >> 0] | 0) != 0; //@line 16176
 if (!(HEAP32[$2 + 364 >> 2] | 0)) {
  if ($7) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 3; //@line 16182
  }
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 3; //@line 16187
  $14 = $2 + 356 | 0; //@line 16188
  $18 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$14 >> 2] | 0, HEAP32[$2 + 980 >> 2] | 0) | 0; //@line 16192
  if ($18 >>> 0 >= (HEAP32[$2 + 976 >> 2] | 0) >>> 0) {
   $22 = HEAP32[$14 >> 2] | 0; //@line 16197
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 16199
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($22, $2 + 1056 | 0); //@line 16200
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 451; //@line 16203
    $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 16204
    HEAP32[$24 >> 2] = $2; //@line 16205
    sp = STACKTOP; //@line 16206
    return;
   }
   ___async_unwind = 0; //@line 16209
   HEAP32[$ReallocAsyncCtx6 >> 2] = 451; //@line 16210
   $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 16211
   HEAP32[$24 >> 2] = $2; //@line 16212
   sp = STACKTOP; //@line 16213
   return;
  }
 } else {
  if ($7) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 16221
  }
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 16226
  if ((HEAP32[$4 >> 2] | 0) != 2) {
   $33 = $2 + 944 | 0; //@line 16230
   HEAP8[$33 >> 0] = HEAP8[$33 >> 0] | 32; //@line 16233
  }
 }
 $37 = HEAP32[$2 + 356 >> 2] | 0; //@line 16237
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 16239
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($37, $2 + 996 | 0, 1); //@line 16240
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 452; //@line 16243
  sp = STACKTOP; //@line 16244
  return;
 }
 ___async_unwind = 0; //@line 16247
 HEAP32[$ReallocAsyncCtx3 >> 2] = 452; //@line 16248
 sp = STACKTOP; //@line 16249
 return;
}
function __ZN12LoRaWANStack9handle_rxEhPhth($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$off0 = 0, $$021 = 0, $$1 = 0, $$pre$phi25Z2D = 0, $12 = 0, $13 = 0, $15 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $27 = 0, $28 = 0, $32 = 0, $8 = 0, label = 0;
 if (!(HEAP8[$0 + 1932 >> 0] | 0)) {
  $$1 = -1017; //@line 10763
  return $$1 | 0; //@line 10764
 }
 $8 = $0 + 2236 | 0; //@line 10766
 if (!(HEAP8[$8 >> 0] | 0)) {
  $$1 = -1001; //@line 10770
  return $$1 | 0; //@line 10771
 }
 if (!$2) {
  $$1 = -1003; //@line 10775
  return $$1 | 0; //@line 10776
 }
 $12 = $0 + 2256 | 0; //@line 10778
 $13 = HEAP32[$12 >> 2] | 0; //@line 10779
 $15 = HEAP16[$0 + 2260 >> 1] | 0; //@line 10781
 if ((HEAP8[$0 + 2253 >> 0] | 0) != $1 << 24 >> 24) {
  $$1 = -1001; //@line 10786
  return $$1 | 0; //@line 10787
 }
 $19 = $15 & 65535; //@line 10789
 $20 = $3 & 65535; //@line 10790
 $22 = $0 + 2282 | 0; //@line 10792
 $24 = (HEAP16[$22 >> 1] | 0) == 0; //@line 10794
 if (($15 & 65535) > ($3 & 65535)) {
  if ($24) {
   $27 = $0 + 2280 | 0; //@line 10799
   HEAP16[$27 >> 1] = $19 - $20; //@line 10800
   HEAP16[$22 >> 1] = $3; //@line 10801
   _memcpy($2 | 0, $13 | 0, $20 | 0) | 0; //@line 10802
   $$0$off0 = 0; //@line 10803
   $$021 = $3; //@line 10803
   $$pre$phi25Z2D = $27; //@line 10803
  } else {
   label = 9; //@line 10805
  }
 } else {
  if ($24) {
   $28 = $0 + 2280 | 0; //@line 10809
   HEAP16[$28 >> 1] = 0; //@line 10810
   HEAP16[$22 >> 1] = 0; //@line 10811
   _memcpy($2 | 0, $13 | 0, $19 | 0) | 0; //@line 10812
   $$0$off0 = 1; //@line 10813
   $$021 = $15; //@line 10813
   $$pre$phi25Z2D = $28; //@line 10813
  } else {
   label = 9; //@line 10815
  }
 }
 if ((label | 0) == 9) {
  $$0$off0 = 0; //@line 10820
  $$021 = $15; //@line 10820
  $$pre$phi25Z2D = $0 + 2280 | 0; //@line 10820
 }
 if (HEAP16[$$pre$phi25Z2D >> 1] | 0) {
  $32 = HEAP16[$0 + 2282 >> 1] | 0; //@line 10826
  if ($32 << 16 >> 16) {
   _memcpy($2 | 0, $13 + ($32 & 65535) | 0, $$021 & 65535 | 0) | 0; //@line 10832
  }
 }
 if (!$$0$off0) {
  $$1 = $$021; //@line 10836
  return $$1 | 0; //@line 10837
 }
 _memset(HEAP32[$12 >> 2] | 0, 0, 255) | 0; //@line 10840
 HEAP8[$8 >> 0] = 0; //@line 10841
 $$1 = $$021; //@line 10842
 return $$1 | 0; //@line 10843
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 37739
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37741
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37743
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 37745
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 37747
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 37749
 $11 = HEAP32[$2 >> 2] | 0; //@line 37750
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 37754
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 37755
  FUNCTION_TABLE_vii[$14 & 31]($6, $8); //@line 37756
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 145; //@line 37759
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 37760
   HEAP32[$15 >> 2] = $2; //@line 37761
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 37762
   HEAP32[$16 >> 2] = $4; //@line 37763
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 37764
   HEAP32[$17 >> 2] = $10; //@line 37765
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 37766
   HEAP32[$18 >> 2] = $8; //@line 37767
   sp = STACKTOP; //@line 37768
   return;
  }
  ___async_unwind = 0; //@line 37771
  HEAP32[$ReallocAsyncCtx2 >> 2] = 145; //@line 37772
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 37773
  HEAP32[$15 >> 2] = $2; //@line 37774
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 37775
  HEAP32[$16 >> 2] = $4; //@line 37776
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 37777
  HEAP32[$17 >> 2] = $10; //@line 37778
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 37779
  HEAP32[$18 >> 2] = $8; //@line 37780
  sp = STACKTOP; //@line 37781
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 37784
 __ZN4mbed6Ticker5setupEy($10, 1e5, 0); //@line 37785
 $19 = HEAP32[$2 >> 2] | 0; //@line 37786
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 37792
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 37793
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 37794
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 146; //@line 37797
  sp = STACKTOP; //@line 37798
  return;
 }
 ___async_unwind = 0; //@line 37801
 HEAP32[$ReallocAsyncCtx3 >> 2] = 146; //@line 37802
 sp = STACKTOP; //@line 37803
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_152($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 1268
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1272
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1274
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1276
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1278
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 1279
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 1283
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 1284
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 1285
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 421; //@line 1288
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 1289
   HEAP32[$14 >> 2] = $4; //@line 1290
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 1291
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 1292
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 1293
   HEAP32[$16 >> 2] = $8; //@line 1294
   sp = STACKTOP; //@line 1295
   return;
  }
  ___async_unwind = 0; //@line 1298
  HEAP32[$ReallocAsyncCtx4 >> 2] = 421; //@line 1299
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 1300
  HEAP32[$14 >> 2] = $4; //@line 1301
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 1302
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 1303
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 1304
  HEAP32[$16 >> 2] = $8; //@line 1305
  sp = STACKTOP; //@line 1306
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 1309
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 1313
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 1317
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 1318
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 1319
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 422; //@line 1322
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 1323
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 1324
  sp = STACKTOP; //@line 1325
  return;
 }
 ___async_unwind = 0; //@line 1328
 HEAP32[$ReallocAsyncCtx5 >> 2] = 422; //@line 1329
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 1330
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 1331
 sp = STACKTOP; //@line 1332
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13590
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13592
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13594
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13596
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13598
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13600
 $11 = HEAP32[$2 >> 2] | 0; //@line 13601
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 13605
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 13606
  FUNCTION_TABLE_vii[$14 & 31]($6, $8); //@line 13607
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 72; //@line 13610
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 13611
   HEAP32[$15 >> 2] = $2; //@line 13612
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 13613
   HEAP32[$16 >> 2] = $4; //@line 13614
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 13615
   HEAP32[$17 >> 2] = $10; //@line 13616
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 13617
   HEAP32[$18 >> 2] = $8; //@line 13618
   sp = STACKTOP; //@line 13619
   return;
  }
  ___async_unwind = 0; //@line 13622
  HEAP32[$ReallocAsyncCtx2 >> 2] = 72; //@line 13623
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 13624
  HEAP32[$15 >> 2] = $2; //@line 13625
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 13626
  HEAP32[$16 >> 2] = $4; //@line 13627
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 13628
  HEAP32[$17 >> 2] = $10; //@line 13629
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 13630
  HEAP32[$18 >> 2] = $8; //@line 13631
  sp = STACKTOP; //@line 13632
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 13635
 __ZN4mbed6Ticker5setupEy($10, 2e5, 0); //@line 13636
 $19 = HEAP32[$2 >> 2] | 0; //@line 13637
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 13643
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 13644
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 13645
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 73; //@line 13648
  sp = STACKTOP; //@line 13649
  return;
 }
 ___async_unwind = 0; //@line 13652
 HEAP32[$ReallocAsyncCtx3 >> 2] = 73; //@line 13653
 sp = STACKTOP; //@line 13654
 return;
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14617
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 14622
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 14627
  } else {
   $20 = $0 & 255; //@line 14629
   $21 = $0 & 255; //@line 14630
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 14636
   } else {
    $26 = $1 + 20 | 0; //@line 14638
    $27 = HEAP32[$26 >> 2] | 0; //@line 14639
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 14645
     HEAP8[$27 >> 0] = $20; //@line 14646
     $34 = $21; //@line 14647
    } else {
     label = 12; //@line 14649
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14654
     $32 = ___overflow($1, $0) | 0; //@line 14655
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 789; //@line 14658
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 14660
      sp = STACKTOP; //@line 14661
      return 0; //@line 14662
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 14664
      $34 = $32; //@line 14665
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 14670
   $$0 = $34; //@line 14671
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 14676
   $8 = $0 & 255; //@line 14677
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 14683
    $14 = HEAP32[$13 >> 2] | 0; //@line 14684
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 14690
     HEAP8[$14 >> 0] = $7; //@line 14691
     $$0 = $8; //@line 14692
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14696
   $19 = ___overflow($1, $0) | 0; //@line 14697
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 788; //@line 14700
    sp = STACKTOP; //@line 14701
    return 0; //@line 14702
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14704
    $$0 = $19; //@line 14705
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 14710
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10828
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 10833
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 10838
  } else {
   $20 = $0 & 255; //@line 10840
   $21 = $0 & 255; //@line 10841
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 10847
   } else {
    $26 = $1 + 20 | 0; //@line 10849
    $27 = HEAP32[$26 >> 2] | 0; //@line 10850
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 10856
     HEAP8[$27 >> 0] = $20; //@line 10857
     $34 = $21; //@line 10858
    } else {
     label = 12; //@line 10860
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10865
     $32 = ___overflow($1, $0) | 0; //@line 10866
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 774; //@line 10869
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 10871
      sp = STACKTOP; //@line 10872
      return 0; //@line 10873
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 10875
      $34 = $32; //@line 10876
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 10881
   $$0 = $34; //@line 10882
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 10887
   $8 = $0 & 255; //@line 10888
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 10894
    $14 = HEAP32[$13 >> 2] | 0; //@line 10895
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 10901
     HEAP8[$14 >> 0] = $7; //@line 10902
     $$0 = $8; //@line 10903
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10907
   $19 = ___overflow($1, $0) | 0; //@line 10908
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 773; //@line 10911
    sp = STACKTOP; //@line 10912
    return 0; //@line 10913
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10915
    $$0 = $19; //@line 10916
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 10921
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11434
 $1 = $0 + 20 | 0; //@line 11435
 $3 = $0 + 28 | 0; //@line 11437
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 11443
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11444
   FUNCTION_TABLE_iiii[$7 & 15]($0, 0, 0) | 0; //@line 11445
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 780; //@line 11448
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11450
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 11452
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 11454
    sp = STACKTOP; //@line 11455
    return 0; //@line 11456
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11458
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 11462
     break;
    } else {
     label = 5; //@line 11465
     break;
    }
   }
  } else {
   label = 5; //@line 11470
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 11474
  $14 = HEAP32[$13 >> 2] | 0; //@line 11475
  $15 = $0 + 8 | 0; //@line 11476
  $16 = HEAP32[$15 >> 2] | 0; //@line 11477
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 11485
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11486
    FUNCTION_TABLE_iiii[$22 & 15]($0, $14 - $16 | 0, 1) | 0; //@line 11487
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 781; //@line 11490
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 11492
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 11494
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 11496
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 11498
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 11500
     sp = STACKTOP; //@line 11501
     return 0; //@line 11502
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11504
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 11510
  HEAP32[$3 >> 2] = 0; //@line 11511
  HEAP32[$1 >> 2] = 0; //@line 11512
  HEAP32[$15 >> 2] = 0; //@line 11513
  HEAP32[$13 >> 2] = 0; //@line 11514
  $$0 = 0; //@line 11515
 }
 return $$0 | 0; //@line 11517
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_294($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 11466
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 11468
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11470
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11472
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11474
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11476
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11478
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11480
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11482
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11484
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11486
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11488
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11490
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11492
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 11494
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 11496
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 11498
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 11499
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($8); //@line 11500
 if (!___async) {
  ___async_unwind = 0; //@line 11503
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 96; //@line 11505
 HEAP16[$ReallocAsyncCtx9 + 4 >> 1] = $2; //@line 11507
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 11509
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $6; //@line 11511
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $8; //@line 11513
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $10; //@line 11515
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $12; //@line 11517
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $14; //@line 11519
 HEAP32[$ReallocAsyncCtx9 + 32 >> 2] = $16; //@line 11521
 HEAP32[$ReallocAsyncCtx9 + 36 >> 2] = $18; //@line 11523
 HEAP32[$ReallocAsyncCtx9 + 40 >> 2] = $20; //@line 11525
 HEAP32[$ReallocAsyncCtx9 + 44 >> 2] = $22; //@line 11527
 HEAP32[$ReallocAsyncCtx9 + 48 >> 2] = $24; //@line 11529
 HEAP32[$ReallocAsyncCtx9 + 52 >> 2] = $26; //@line 11531
 HEAP32[$ReallocAsyncCtx9 + 56 >> 2] = $28; //@line 11533
 HEAP32[$ReallocAsyncCtx9 + 60 >> 2] = $30; //@line 11535
 HEAP32[$ReallocAsyncCtx9 + 64 >> 2] = $32; //@line 11537
 sp = STACKTOP; //@line 11538
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_31($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 27923
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27925
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27927
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27929
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27931
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27933
 $11 = HEAP32[$2 >> 2] | 0; //@line 27934
 $13 = $6 + 12 | 0; //@line 27936
 HEAP32[$6 >> 2] = 534; //@line 27937
 HEAP32[$6 + 4 >> 2] = 0; //@line 27939
 HEAP32[$6 + 8 >> 2] = $4; //@line 27941
 HEAP32[$13 >> 2] = 848; //@line 27942
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(28) | 0; //@line 27943
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($11, $4 + 1036 | 0, $6); //@line 27944
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 535; //@line 27947
  $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 27948
  HEAP32[$14 >> 2] = $2; //@line 27949
  $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 27950
  HEAP32[$15 >> 2] = $4; //@line 27951
  $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 27952
  HEAP32[$16 >> 2] = $8; //@line 27953
  $17 = $ReallocAsyncCtx8 + 16 | 0; //@line 27954
  HEAP32[$17 >> 2] = $10; //@line 27955
  $18 = $ReallocAsyncCtx8 + 20 | 0; //@line 27956
  HEAP32[$18 >> 2] = $6; //@line 27957
  $19 = $ReallocAsyncCtx8 + 24 | 0; //@line 27958
  HEAP32[$19 >> 2] = $13; //@line 27959
  sp = STACKTOP; //@line 27960
  return;
 }
 ___async_unwind = 0; //@line 27963
 HEAP32[$ReallocAsyncCtx8 >> 2] = 535; //@line 27964
 $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 27965
 HEAP32[$14 >> 2] = $2; //@line 27966
 $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 27967
 HEAP32[$15 >> 2] = $4; //@line 27968
 $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 27969
 HEAP32[$16 >> 2] = $8; //@line 27970
 $17 = $ReallocAsyncCtx8 + 16 | 0; //@line 27971
 HEAP32[$17 >> 2] = $10; //@line 27972
 $18 = $ReallocAsyncCtx8 + 20 | 0; //@line 27973
 HEAP32[$18 >> 2] = $6; //@line 27974
 $19 = $ReallocAsyncCtx8 + 24 | 0; //@line 27975
 HEAP32[$19 >> 2] = $13; //@line 27976
 sp = STACKTOP; //@line 27977
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $17 = 0, $20 = 0, $3 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26242
 $3 = $0 + 4 | 0; //@line 26243
 $4 = HEAP32[$3 >> 2] | 0; //@line 26244
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0; //@line 26247
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 26248
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 26249
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 653; //@line 26252
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 26254
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 26257
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 26259
  sp = STACKTOP; //@line 26260
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 26263
 $11 = HEAP32[$3 >> 2] | 0; //@line 26264
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 28 >> 2] | 0; //@line 26267
 do {
  if ($1) {
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 26270
   FUNCTION_TABLE_vii[$14 & 31]($11, 0); //@line 26271
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 655; //@line 26274
    HEAP32[$AsyncCtx7 + 4 >> 2] = $3; //@line 26276
    sp = STACKTOP; //@line 26277
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 26280
    break;
   }
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 26284
   FUNCTION_TABLE_vii[$14 & 31]($11, $2); //@line 26285
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 654; //@line 26288
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 26290
    sp = STACKTOP; //@line 26291
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 26294
    break;
   }
  }
 } while (0);
 $17 = HEAP32[$3 >> 2] | 0; //@line 26299
 $20 = HEAP32[(HEAP32[$17 >> 2] | 0) + 76 >> 2] | 0; //@line 26302
 $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 26303
 FUNCTION_TABLE_vi[$20 & 1023]($17); //@line 26304
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 656; //@line 26307
  sp = STACKTOP; //@line 26308
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 26311
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_409($0) {
 $0 = $0 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23279
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23281
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23283
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23285
 HEAP8[$2 + 1964 >> 0] = 0; //@line 23288
 HEAP32[$2 + 2256 >> 2] = 0; //@line 23290
 HEAP8[$2 + 2236 >> 0] = 0; //@line 23292
 HEAP16[$2 + 2282 >> 1] = 0; //@line 23294
 HEAP16[$2 + 2260 >> 1] = 0; //@line 23296
 HEAP8[$2 + 1932 >> 0] = 0; //@line 23298
 $14 = $2 + 1892 | 0; //@line 23299
 _memset($2 + 1975 | 0, 0, 259) | 0; //@line 23300
 $15 = HEAP32[$14 >> 2] | 0; //@line 23301
 if (!$15) {
  HEAP32[___async_retval >> 2] = -1011; //@line 23305
  return;
 }
 $19 = HEAP32[$2 + 2288 >> 2] | 0; //@line 23310
 $21 = HEAP32[$15 + 4 >> 2] | 0; //@line 23312
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 23313
 FUNCTION_TABLE_vii[$21 & 31]($6, $2 + 1880 | 0); //@line 23314
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 247; //@line 23317
  $22 = $ReallocAsyncCtx + 4 | 0; //@line 23318
  HEAP32[$22 >> 2] = $14; //@line 23319
  $23 = $ReallocAsyncCtx + 8 | 0; //@line 23320
  HEAP32[$23 >> 2] = $6; //@line 23321
  $24 = $ReallocAsyncCtx + 12 | 0; //@line 23322
  HEAP32[$24 >> 2] = $19; //@line 23323
  $25 = $ReallocAsyncCtx + 16 | 0; //@line 23324
  HEAP32[$25 >> 2] = $6; //@line 23325
  $26 = $ReallocAsyncCtx + 20 | 0; //@line 23326
  HEAP32[$26 >> 2] = $4; //@line 23327
  sp = STACKTOP; //@line 23328
  return;
 }
 ___async_unwind = 0; //@line 23331
 HEAP32[$ReallocAsyncCtx >> 2] = 247; //@line 23332
 $22 = $ReallocAsyncCtx + 4 | 0; //@line 23333
 HEAP32[$22 >> 2] = $14; //@line 23334
 $23 = $ReallocAsyncCtx + 8 | 0; //@line 23335
 HEAP32[$23 >> 2] = $6; //@line 23336
 $24 = $ReallocAsyncCtx + 12 | 0; //@line 23337
 HEAP32[$24 >> 2] = $19; //@line 23338
 $25 = $ReallocAsyncCtx + 16 | 0; //@line 23339
 HEAP32[$25 >> 2] = $6; //@line 23340
 $26 = $ReallocAsyncCtx + 20 | 0; //@line 23341
 HEAP32[$26 >> 2] = $4; //@line 23342
 sp = STACKTOP; //@line 23343
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_454($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 32979
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32981
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32983
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32987
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32991
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32993
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 32995
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 32998
  __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 32999
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 489; //@line 33002
   $17 = $ReallocAsyncCtx5 + 4 | 0; //@line 33003
   HEAP32[$17 >> 2] = $12; //@line 33004
   $18 = $ReallocAsyncCtx5 + 8 | 0; //@line 33005
   HEAP32[$18 >> 2] = $14; //@line 33006
   sp = STACKTOP; //@line 33007
   return;
  }
  ___async_unwind = 0; //@line 33010
  HEAP32[$ReallocAsyncCtx5 >> 2] = 489; //@line 33011
  $17 = $ReallocAsyncCtx5 + 4 | 0; //@line 33012
  HEAP32[$17 >> 2] = $12; //@line 33013
  $18 = $ReallocAsyncCtx5 + 8 | 0; //@line 33014
  HEAP32[$18 >> 2] = $14; //@line 33015
  sp = STACKTOP; //@line 33016
  return;
 } else {
  _printf(13684, $4) | 0; //@line 33019
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 33020
  _printf(13697, $8) | 0; //@line 33021
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 33022
  _putchar(10) | 0; //@line 33023
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 490; //@line 33026
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 33027
   HEAP32[$19 >> 2] = $12; //@line 33028
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 33029
   HEAP32[$20 >> 2] = $14; //@line 33030
   sp = STACKTOP; //@line 33031
   return;
  }
  ___async_unwind = 0; //@line 33034
  HEAP32[$ReallocAsyncCtx2 >> 2] = 490; //@line 33035
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 33036
  HEAP32[$19 >> 2] = $12; //@line 33037
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 33038
  HEAP32[$20 >> 2] = $14; //@line 33039
  sp = STACKTOP; //@line 33040
  return;
 }
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_346($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $24 = 0, $28 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 16256
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16258
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16260
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16262
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 16267
  _mbed_assert_internal(13142, 13151, 217); //@line 16268
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 449; //@line 16271
   $9 = $ReallocAsyncCtx7 + 4 | 0; //@line 16272
   HEAP32[$9 >> 2] = $2; //@line 16273
   $10 = $ReallocAsyncCtx7 + 8 | 0; //@line 16274
   HEAP32[$10 >> 2] = $4; //@line 16275
   $11 = $ReallocAsyncCtx7 + 12 | 0; //@line 16276
   HEAP32[$11 >> 2] = $6; //@line 16277
   sp = STACKTOP; //@line 16278
   return;
  }
  ___async_unwind = 0; //@line 16281
  HEAP32[$ReallocAsyncCtx7 >> 2] = 449; //@line 16282
  $9 = $ReallocAsyncCtx7 + 4 | 0; //@line 16283
  HEAP32[$9 >> 2] = $2; //@line 16284
  $10 = $ReallocAsyncCtx7 + 8 | 0; //@line 16285
  HEAP32[$10 >> 2] = $4; //@line 16286
  $11 = $ReallocAsyncCtx7 + 12 | 0; //@line 16287
  HEAP32[$11 >> 2] = $6; //@line 16288
  sp = STACKTOP; //@line 16289
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 16293
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 16301
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 16306
 if ((HEAP32[$6 >> 2] | 0) != 2) {
  $24 = $4 + 944 | 0; //@line 16310
  HEAP8[$24 >> 0] = HEAP8[$24 >> 0] | 32; //@line 16313
 }
 $28 = HEAP32[$4 + 356 >> 2] | 0; //@line 16316
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 16318
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($28, $4 + 996 | 0, 1); //@line 16319
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 452; //@line 16322
  sp = STACKTOP; //@line 16323
  return;
 }
 ___async_unwind = 0; //@line 16326
 HEAP32[$ReallocAsyncCtx3 >> 2] = 452; //@line 16327
 sp = STACKTOP; //@line 16328
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $12 = 0, $15 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12081
 STACKTOP = STACKTOP + 16 | 0; //@line 12082
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12082
 $5 = sp; //@line 12083
 $7 = HEAP32[$0 + 1328 >> 2] | 0; //@line 12085
 $8 = $5 + 12 | 0; //@line 12086
 HEAP32[$5 >> 2] = 6; //@line 12087
 HEAP32[$5 + 4 >> 2] = 0; //@line 12089
 HEAP32[$5 + 8 >> 2] = $0; //@line 12091
 HEAP32[$8 >> 2] = 860; //@line 12092
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12093
 $9 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3_($7, $5, $1, $2, $3, $4) | 0; //@line 12094
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 388; //@line 12097
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 12099
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 12101
  sp = STACKTOP; //@line 12102
  STACKTOP = sp; //@line 12103
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12105
 $12 = HEAP32[$8 >> 2] | 0; //@line 12106
 do {
  if ($12 | 0) {
   $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 12111
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 12112
   FUNCTION_TABLE_vi[$15 & 1023]($5); //@line 12113
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 389; //@line 12116
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 12118
    HEAP32[$AsyncCtx + 8 >> 2] = $9; //@line 12120
    sp = STACKTOP; //@line 12121
    STACKTOP = sp; //@line 12122
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12124
    break;
   }
  }
 } while (0);
 if ($9 | 0) {
  STACKTOP = sp; //@line 12131
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 12133
 _mbed_assert_internal(13142, 13151, 141); //@line 12134
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 390; //@line 12137
  sp = STACKTOP; //@line 12138
  STACKTOP = sp; //@line 12139
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12141
 STACKTOP = sp; //@line 12142
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_401($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22506
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22508
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22510
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22512
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22514
 $9 = $2 + 1892 | 0; //@line 22515
 $10 = HEAP32[$9 >> 2] | 0; //@line 22516
 if (!$10) {
  HEAP32[$4 >> 2] = 6; //@line 22519
  HEAP32[___async_retval >> 2] = -1014; //@line 22521
  return;
 }
 $14 = HEAP32[$2 + 2288 >> 2] | 0; //@line 22526
 $16 = HEAP32[$10 + 4 >> 2] | 0; //@line 22528
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(28) | 0; //@line 22529
 FUNCTION_TABLE_vii[$16 & 31]($6, $2 + 1880 | 0); //@line 22530
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 267; //@line 22533
  $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 22534
  HEAP32[$17 >> 2] = $9; //@line 22535
  $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 22536
  HEAP32[$18 >> 2] = $6; //@line 22537
  $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 22538
  HEAP32[$19 >> 2] = $14; //@line 22539
  $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 22540
  HEAP32[$20 >> 2] = $6; //@line 22541
  $21 = $ReallocAsyncCtx7 + 20 | 0; //@line 22542
  HEAP32[$21 >> 2] = $4; //@line 22543
  $22 = $ReallocAsyncCtx7 + 24 | 0; //@line 22544
  HEAP32[$22 >> 2] = $8; //@line 22545
  sp = STACKTOP; //@line 22546
  return;
 }
 ___async_unwind = 0; //@line 22549
 HEAP32[$ReallocAsyncCtx7 >> 2] = 267; //@line 22550
 $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 22551
 HEAP32[$17 >> 2] = $9; //@line 22552
 $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 22553
 HEAP32[$18 >> 2] = $6; //@line 22554
 $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 22555
 HEAP32[$19 >> 2] = $14; //@line 22556
 $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 22557
 HEAP32[$20 >> 2] = $6; //@line 22558
 $21 = $ReallocAsyncCtx7 + 20 | 0; //@line 22559
 HEAP32[$21 >> 2] = $4; //@line 22560
 $22 = $ReallocAsyncCtx7 + 24 | 0; //@line 22561
 HEAP32[$22 >> 2] = $8; //@line 22562
 sp = STACKTOP; //@line 22563
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_426($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25145
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25147
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25149
 $5 = HEAP8[$2 >> 0] & -5; //@line 25151
 HEAP8[$2 >> 0] = $5; //@line 25152
 if (!($5 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $5 & -17; //@line 25159
 $10 = HEAP32[$4 + 1324 >> 2] | 0; //@line 25161
 $11 = $10 + 48 | 0; //@line 25162
 $13 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 25164
 $14 = $10 + 60 | 0; //@line 25165
 $15 = HEAP32[$14 >> 2] | 0; //@line 25166
 if (!$15) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 25169
  _mbed_assert_internal(15352, 15357, 1102); //@line 25170
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 25173
   $17 = $ReallocAsyncCtx14 + 4 | 0; //@line 25174
   HEAP32[$17 >> 2] = $14; //@line 25175
   $18 = $ReallocAsyncCtx14 + 8 | 0; //@line 25176
   HEAP32[$18 >> 2] = $11; //@line 25177
   $19 = $ReallocAsyncCtx14 + 12 | 0; //@line 25178
   HEAP32[$19 >> 2] = $13; //@line 25179
   sp = STACKTOP; //@line 25180
   return;
  }
  ___async_unwind = 0; //@line 25183
  HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 25184
  $17 = $ReallocAsyncCtx14 + 4 | 0; //@line 25185
  HEAP32[$17 >> 2] = $14; //@line 25186
  $18 = $ReallocAsyncCtx14 + 8 | 0; //@line 25187
  HEAP32[$18 >> 2] = $11; //@line 25188
  $19 = $ReallocAsyncCtx14 + 12 | 0; //@line 25189
  HEAP32[$19 >> 2] = $13; //@line 25190
  sp = STACKTOP; //@line 25191
  return;
 } else {
  $20 = HEAP32[$15 >> 2] | 0; //@line 25194
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 25195
  FUNCTION_TABLE_vii[$20 & 31]($11, $13); //@line 25196
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 25199
   sp = STACKTOP; //@line 25200
   return;
  }
  ___async_unwind = 0; //@line 25203
  HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 25204
  sp = STACKTOP; //@line 25205
  return;
 }
}
function __ZN14lorawan_timersD2Ev__async_cb_508($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 37497
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37499
 $4 = HEAP32[$2 + 68 >> 2] | 0; //@line 37501
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 37506
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 37507
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 56 | 0); //@line 37508
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 357; //@line 37511
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 37512
   HEAP32[$9 >> 2] = $2; //@line 37513
   sp = STACKTOP; //@line 37514
   return;
  }
  ___async_unwind = 0; //@line 37517
  HEAP32[$ReallocAsyncCtx3 >> 2] = 357; //@line 37518
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 37519
  HEAP32[$9 >> 2] = $2; //@line 37520
  sp = STACKTOP; //@line 37521
  return;
 }
 $11 = HEAP32[$2 + 48 >> 2] | 0; //@line 37525
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 37530
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 37531
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 36 | 0); //@line 37532
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 358; //@line 37535
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 37536
   HEAP32[$16 >> 2] = $2; //@line 37537
   sp = STACKTOP; //@line 37538
   return;
  }
  ___async_unwind = 0; //@line 37541
  HEAP32[$ReallocAsyncCtx4 >> 2] = 358; //@line 37542
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 37543
  HEAP32[$16 >> 2] = $2; //@line 37544
  sp = STACKTOP; //@line 37545
  return;
 }
 $18 = HEAP32[$2 + 28 >> 2] | 0; //@line 37549
 if (!$18) {
  return;
 }
 $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 37556
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 37557
 FUNCTION_TABLE_vi[$22 & 1023]($2 + 16 | 0); //@line 37558
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 359; //@line 37561
  sp = STACKTOP; //@line 37562
  return;
 }
 ___async_unwind = 0; //@line 37565
 HEAP32[$ReallocAsyncCtx5 >> 2] = 359; //@line 37566
 sp = STACKTOP; //@line 37567
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_451($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32779
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32781
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32783
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32785
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32787
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32789
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32791
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32793
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32795
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32797
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32799
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 32801
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 32803
 $25 = $4 + 1088 | 0; //@line 32804
 HEAP32[$25 >> 2] = 0; //@line 32805
 HEAP32[$25 + 4 >> 2] = 0; //@line 32805
 HEAP32[$25 + 8 >> 2] = 0; //@line 32805
 HEAP32[$25 + 12 >> 2] = 0; //@line 32805
 HEAP8[$4 + 1104 >> 0] = 1; //@line 32807
 HEAP32[$2 >> 2] = 684; //@line 32808
 $27 = $4 + 1112 | 0; //@line 32809
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(52) | 0; //@line 32810
 __ZN4mbed10TimerEventC2Ev($27); //@line 32811
 if (!___async) {
  ___async_unwind = 0; //@line 32814
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 154; //@line 32816
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $27; //@line 32818
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 32820
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 32822
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 32824
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 32826
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 32828
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 32830
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 32832
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 32834
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 32836
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 32838
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 32840
 sp = STACKTOP; //@line 32841
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_450($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32709
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32711
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32713
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32715
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32717
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32719
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32721
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32723
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32725
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32727
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32729
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 32731
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 32733
 $25 = $4 + 1152 | 0; //@line 32734
 HEAP32[$25 >> 2] = 0; //@line 32735
 HEAP32[$25 + 4 >> 2] = 0; //@line 32735
 HEAP32[$25 + 8 >> 2] = 0; //@line 32735
 HEAP32[$25 + 12 >> 2] = 0; //@line 32735
 HEAP8[$4 + 1168 >> 0] = 1; //@line 32737
 HEAP32[$2 >> 2] = 684; //@line 32738
 $27 = $4 + 1176 | 0; //@line 32739
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(52) | 0; //@line 32740
 __ZN4mbed10TimerEventC2Ev($27); //@line 32741
 if (!___async) {
  ___async_unwind = 0; //@line 32744
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 155; //@line 32746
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $27; //@line 32748
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 32750
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 32752
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 32754
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 32756
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 32758
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 32760
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 32762
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 32764
 HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 32766
 HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 32768
 HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 32770
 sp = STACKTOP; //@line 32771
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_474($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 34843
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34845
 $4 = HEAP32[$2 + 44 >> 2] | 0; //@line 34847
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 34852
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 34853
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 32 | 0); //@line 34854
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 34857
   $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 34858
   HEAP32[$9 >> 2] = $2; //@line 34859
   sp = STACKTOP; //@line 34860
   return;
  }
  ___async_unwind = 0; //@line 34863
  HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 34864
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 34865
  HEAP32[$9 >> 2] = $2; //@line 34866
  sp = STACKTOP; //@line 34867
  return;
 }
 $11 = HEAP32[$2 + 28 >> 2] | 0; //@line 34871
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 34876
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 34877
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 16 | 0); //@line 34878
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 353; //@line 34881
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 34882
   HEAP32[$16 >> 2] = $2; //@line 34883
   sp = STACKTOP; //@line 34884
   return;
  }
  ___async_unwind = 0; //@line 34887
  HEAP32[$ReallocAsyncCtx6 >> 2] = 353; //@line 34888
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 34889
  HEAP32[$16 >> 2] = $2; //@line 34890
  sp = STACKTOP; //@line 34891
  return;
 }
 $18 = HEAP32[$2 + 12 >> 2] | 0; //@line 34895
 if (!$18) {
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 34901
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 34902
 FUNCTION_TABLE_vi[$21 & 1023]($2); //@line 34903
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 354; //@line 34906
  sp = STACKTOP; //@line 34907
  return;
 }
 ___async_unwind = 0; //@line 34910
 HEAP32[$ReallocAsyncCtx7 >> 2] = 354; //@line 34911
 sp = STACKTOP; //@line 34912
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_145($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 600
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 604
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 606
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 608
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 612
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 616
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 618
 L2 : do {
  if (!$AsyncRetVal) {
   if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 2) {
    switch (HEAP32[$4 >> 2] | 0) {
    case 0:
     {
      break;
     }
    case 10:
     {
      if (!(HEAP8[$16 + 372 >> 0] | 0)) {
       break L2;
      }
      break;
     }
    default:
     {
      break L2;
     }
    }
    _printf(13258, $8) | 0; //@line 643
    _printf(13285, $12) | 0; //@line 644
    $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 645
    _putchar(10) | 0; //@line 646
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 568; //@line 649
     $25 = $ReallocAsyncCtx + 4 | 0; //@line 650
     HEAP32[$25 >> 2] = $16; //@line 651
     $26 = $ReallocAsyncCtx + 8 | 0; //@line 652
     HEAP32[$26 >> 2] = $6; //@line 653
     $27 = $ReallocAsyncCtx + 12 | 0; //@line 654
     HEAP32[$27 >> 2] = $6; //@line 655
     $28 = $ReallocAsyncCtx + 16 | 0; //@line 656
     HEAP32[$28 >> 2] = $AsyncRetVal; //@line 657
     sp = STACKTOP; //@line 658
     return;
    }
    ___async_unwind = 0; //@line 661
    HEAP32[$ReallocAsyncCtx >> 2] = 568; //@line 662
    $25 = $ReallocAsyncCtx + 4 | 0; //@line 663
    HEAP32[$25 >> 2] = $16; //@line 664
    $26 = $ReallocAsyncCtx + 8 | 0; //@line 665
    HEAP32[$26 >> 2] = $6; //@line 666
    $27 = $ReallocAsyncCtx + 12 | 0; //@line 667
    HEAP32[$27 >> 2] = $6; //@line 668
    $28 = $ReallocAsyncCtx + 16 | 0; //@line 669
    HEAP32[$28 >> 2] = $AsyncRetVal; //@line 670
    sp = STACKTOP; //@line 671
    return;
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 677
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_449($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 32639
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32641
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32643
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32645
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32647
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32649
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32651
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32653
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32655
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32657
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32659
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 32661
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 32663
 $25 = $4 + 1216 | 0; //@line 32664
 HEAP32[$25 >> 2] = 0; //@line 32665
 HEAP32[$25 + 4 >> 2] = 0; //@line 32665
 HEAP32[$25 + 8 >> 2] = 0; //@line 32665
 HEAP32[$25 + 12 >> 2] = 0; //@line 32665
 HEAP8[$4 + 1232 >> 0] = 1; //@line 32667
 HEAP32[$2 >> 2] = 684; //@line 32668
 $27 = $4 + 1240 | 0; //@line 32669
 $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 32670
 __ZN4mbed10TimerEventC2Ev($27); //@line 32671
 if (!___async) {
  ___async_unwind = 0; //@line 32674
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 156; //@line 32676
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $27; //@line 32678
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 32680
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 32682
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 32684
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 32686
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 32688
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 32690
 HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 32692
 HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 32694
 HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 32696
 HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 32698
 HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 32700
 sp = STACKTOP; //@line 32701
 return;
}
function _equeue_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$037$sink$i = 0, $$03741$i = 0, $$1$i9 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, label = 0;
 $3 = $1 + 39 & -4; //@line 4746
 $4 = $0 + 156 | 0; //@line 4747
 _equeue_mutex_lock($4); //@line 4748
 $5 = $0 + 24 | 0; //@line 4749
 $6 = HEAP32[$5 >> 2] | 0; //@line 4750
 L1 : do {
  if (!$6) {
   label = 7; //@line 4754
  } else {
   $$03741$i = $5; //@line 4756
   $9 = $6; //@line 4756
   while (1) {
    if ((HEAP32[$9 >> 2] | 0) >>> 0 >= $3 >>> 0) {
     break;
    }
    $15 = $9 + 8 | 0; //@line 4763
    $16 = HEAP32[$15 >> 2] | 0; //@line 4764
    if (!$16) {
     label = 7; //@line 4767
     break L1;
    } else {
     $$03741$i = $15; //@line 4770
     $9 = $16; //@line 4770
    }
   }
   $12 = HEAP32[$9 + 12 >> 2] | 0; //@line 4774
   if (!$12) {
    $$037$sink$i = $$03741$i; //@line 4777
   } else {
    HEAP32[$$03741$i >> 2] = $12; //@line 4779
    $$037$sink$i = $12 + 8 | 0; //@line 4781
   }
   HEAP32[$$037$sink$i >> 2] = HEAP32[$9 + 8 >> 2]; //@line 4785
   _equeue_mutex_unlock($4); //@line 4786
   $$1$i9 = $9; //@line 4787
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $18 = $0 + 28 | 0; //@line 4792
   $19 = HEAP32[$18 >> 2] | 0; //@line 4793
   if ($19 >>> 0 < $3 >>> 0) {
    _equeue_mutex_unlock($4); //@line 4796
    $$0 = 0; //@line 4797
    return $$0 | 0; //@line 4798
   } else {
    $21 = $0 + 32 | 0; //@line 4800
    $22 = HEAP32[$21 >> 2] | 0; //@line 4801
    HEAP32[$21 >> 2] = $22 + $3; //@line 4803
    HEAP32[$18 >> 2] = $19 - $3; //@line 4805
    HEAP32[$22 >> 2] = $3; //@line 4806
    HEAP8[$22 + 4 >> 0] = 1; //@line 4808
    _equeue_mutex_unlock($4); //@line 4809
    if (!$22) {
     $$0 = 0; //@line 4812
    } else {
     $$1$i9 = $22; //@line 4814
     break;
    }
    return $$0 | 0; //@line 4817
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 4822
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 4824
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 4826
 $$0 = $$1$i9 + 36 | 0; //@line 4828
 return $$0 | 0; //@line 4829
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_66($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30857
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30859
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 30861
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30863
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30865
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30867
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 30870
  $11 = _mbedtls_cipher_cmac_starts(22892, $2, 128) | 0; //@line 30871
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 607; //@line 30874
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 30875
   HEAP16[$12 >> 1] = $4; //@line 30876
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 30877
   HEAP32[$13 >> 2] = $6; //@line 30878
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 30879
   HEAP32[$14 >> 2] = $8; //@line 30880
   sp = STACKTOP; //@line 30881
   return;
  }
  HEAP32[___async_retval >> 2] = $11; //@line 30885
  ___async_unwind = 0; //@line 30886
  HEAP32[$ReallocAsyncCtx3 >> 2] = 607; //@line 30887
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 30888
  HEAP16[$12 >> 1] = $4; //@line 30889
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 30890
  HEAP32[$13 >> 2] = $6; //@line 30891
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 30892
  HEAP32[$14 >> 2] = $8; //@line 30893
  sp = STACKTOP; //@line 30894
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 30897
  _mbedtls_cipher_free(22892); //@line 30898
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 610; //@line 30901
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 30902
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 30903
   sp = STACKTOP; //@line 30904
   return;
  }
  ___async_unwind = 0; //@line 30907
  HEAP32[$ReallocAsyncCtx5 >> 2] = 610; //@line 30908
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 30909
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 30910
  sp = STACKTOP; //@line 30911
  return;
 }
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_15($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 17487
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17489
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17491
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17493
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17495
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17497
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 17500
  $11 = _mbedtls_cipher_cmac_starts(22892, $4, 128) | 0; //@line 17501
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 601; //@line 17504
   $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 17505
   HEAP32[$12 >> 2] = $6; //@line 17506
   $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 17507
   HEAP32[$13 >> 2] = $8; //@line 17508
   $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 17509
   HEAP32[$14 >> 2] = $2; //@line 17510
   sp = STACKTOP; //@line 17511
   return;
  }
  HEAP32[___async_retval >> 2] = $11; //@line 17515
  ___async_unwind = 0; //@line 17516
  HEAP32[$ReallocAsyncCtx4 >> 2] = 601; //@line 17517
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 17518
  HEAP32[$12 >> 2] = $6; //@line 17519
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 17520
  HEAP32[$13 >> 2] = $8; //@line 17521
  $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 17522
  HEAP32[$14 >> 2] = $2; //@line 17523
  sp = STACKTOP; //@line 17524
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 17527
  _mbedtls_cipher_free(22892); //@line 17528
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 605; //@line 17531
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 17532
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 17533
   sp = STACKTOP; //@line 17534
   return;
  }
  ___async_unwind = 0; //@line 17537
  HEAP32[$ReallocAsyncCtx6 >> 2] = 605; //@line 17538
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 17539
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 17540
  sp = STACKTOP; //@line 17541
  return;
 }
}
function __ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb_281($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$031 = 0.0, $12 = 0, $14 = 0, $18 = 0, $22 = 0.0, $4 = 0, $57 = 0.0, $67 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10240
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10244
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10248
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10252
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 10254
 switch (HEAP32[$0 + 4 >> 2] | 0) {
 case 0:
  {
   $$0 = 1; //@line 10257
   break;
  }
 case 1:
  {
   switch (HEAP32[$12 + 752 >> 2] | 0) {
   case 7:
    {
     $$031 = 125.0e3; //@line 10265
     break;
    }
   case 8:
    {
     $$031 = 25.0e4; //@line 10269
     break;
    }
   case 9:
    {
     $$031 = 5.0e5; //@line 10273
     break;
    }
   default:
    {
     $$031 = 0.0; //@line 10277
    }
   }
   $18 = HEAP32[$12 + 756 >> 2] | 0; //@line 10281
   $22 = 1.0 / ($$031 / +(1 << $18 | 0)); //@line 10285
   $57 = +Math_ceil(+(+(((($14 & 255) << 3) + 28 - ($18 << 2) + (HEAP8[$12 + 766 >> 0] << 4 & 255) + (HEAP8[$12 + 764 >> 0] | 0 ? -20 : 0) | 0) >>> 0) / +($18 - (HEAP8[$12 + 760 >> 0] | 0 ? 2 : 0) << 2 >>> 0))) * +((HEAPU8[$12 + 761 >> 0] | 0) + 4 | 0); //@line 10321
   $$0 = ~~+Math_floor(+(((+(HEAPU16[$12 + 762 >> 1] | 0) + 4.25) * $22 + $22 * (($57 > 0.0 ? $57 : 0.0) + 8.0)) * 1.0e3 + .999)) >>> 0; //@line 10331
   break;
  }
 default:
  {
   $$0 = 0; //@line 10335
  }
 }
 _printf(10904, $4) | 0; //@line 10338
 HEAP32[$8 >> 2] = $$0; //@line 10339
 _printf(11113, $8) | 0; //@line 10340
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 10341
 _putchar(10) | 0; //@line 10342
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 91; //@line 10345
  $67 = $ReallocAsyncCtx + 4 | 0; //@line 10346
  HEAP32[$67 >> 2] = $$0; //@line 10347
  sp = STACKTOP; //@line 10348
  return;
 }
 ___async_unwind = 0; //@line 10351
 HEAP32[$ReallocAsyncCtx >> 2] = 91; //@line 10352
 $67 = $ReallocAsyncCtx + 4 | 0; //@line 10353
 HEAP32[$67 >> 2] = $$0; //@line 10354
 sp = STACKTOP; //@line 10355
 return;
}
function __ZN16SX1276_LoRaRadio5sleepEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx9 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 125
 STACKTOP = STACKTOP + 32 | 0; //@line 126
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 126
 $vararg_buffer5 = sp + 24 | 0; //@line 127
 $vararg_buffer3 = sp + 16 | 0; //@line 128
 _printf(10904, sp) | 0; //@line 131
 _printf(11647, sp + 8 | 0) | 0; //@line 132
 $AsyncCtx9 = _emscripten_alloc_async_context(24, sp) | 0; //@line 133
 _putchar(10) | 0; //@line 134
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 53; //@line 137
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 139
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer3; //@line 141
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer3; //@line 143
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer5; //@line 145
  HEAP32[$AsyncCtx9 + 20 >> 2] = $vararg_buffer5; //@line 147
  sp = STACKTOP; //@line 148
  STACKTOP = sp; //@line 149
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 151
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 153
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 155
 _printf(10904, $vararg_buffer3) | 0; //@line 156
 HEAP32[$vararg_buffer5 >> 2] = 0; //@line 157
 _printf(10970, $vararg_buffer5) | 0; //@line 158
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 159
 _putchar(10) | 0; //@line 160
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 54; //@line 163
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 165
  sp = STACKTOP; //@line 166
  STACKTOP = sp; //@line 167
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 169
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 170
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 171
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 55; //@line 174
  sp = STACKTOP; //@line 175
  STACKTOP = sp; //@line 176
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx12 | 0); //@line 178
  STACKTOP = sp; //@line 179
  return;
 }
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_14($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 17427
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17429
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17431
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17433
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17435
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 17438
  $9 = _mbedtls_cipher_cmac_update(22892, 13879, 16) | 0; //@line 17439
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 602; //@line 17442
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 17443
   HEAP32[$10 >> 2] = $2; //@line 17444
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 17445
   HEAP32[$11 >> 2] = $4; //@line 17446
   $12 = $ReallocAsyncCtx2 + 12 | 0; //@line 17447
   HEAP32[$12 >> 2] = $6; //@line 17448
   sp = STACKTOP; //@line 17449
   return;
  }
  HEAP32[___async_retval >> 2] = $9; //@line 17453
  ___async_unwind = 0; //@line 17454
  HEAP32[$ReallocAsyncCtx2 >> 2] = 602; //@line 17455
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 17456
  HEAP32[$10 >> 2] = $2; //@line 17457
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 17458
  HEAP32[$11 >> 2] = $4; //@line 17459
  $12 = $ReallocAsyncCtx2 + 12 | 0; //@line 17460
  HEAP32[$12 >> 2] = $6; //@line 17461
  sp = STACKTOP; //@line 17462
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 17465
  _mbedtls_cipher_free(22892); //@line 17466
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 605; //@line 17469
   $14 = $ReallocAsyncCtx6 + 4 | 0; //@line 17470
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 17471
   sp = STACKTOP; //@line 17472
   return;
  }
  ___async_unwind = 0; //@line 17475
  HEAP32[$ReallocAsyncCtx6 >> 2] = 605; //@line 17476
  $14 = $ReallocAsyncCtx6 + 4 | 0; //@line 17477
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 17478
  sp = STACKTOP; //@line 17479
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_149($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 1164
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1168
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1170
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1172
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1174
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1176
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1178
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1180
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 1183
 $18 = $4 + 16 | 0; //@line 1184
 HEAP32[$18 >> 2] = HEAP32[$6 >> 2]; //@line 1185
 HEAP32[$18 + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 1185
 HEAP8[$18 + 8 >> 0] = HEAP8[$6 + 8 >> 0] | 0; //@line 1185
 _equeue_event_dtor($4, 418); //@line 1186
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 1187
 $19 = _equeue_post($8, 419, $4) | 0; //@line 1188
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 420; //@line 1191
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 1192
  HEAP32[$20 >> 2] = $10; //@line 1193
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 1194
  HEAP32[$21 >> 2] = $12; //@line 1195
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 1196
  HEAP32[$22 >> 2] = $14; //@line 1197
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 1198
  HEAP32[$23 >> 2] = $16; //@line 1199
  sp = STACKTOP; //@line 1200
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 1204
 ___async_unwind = 0; //@line 1205
 HEAP32[$ReallocAsyncCtx6 >> 2] = 420; //@line 1206
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 1207
 HEAP32[$20 >> 2] = $10; //@line 1208
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 1209
 HEAP32[$21 >> 2] = $12; //@line 1210
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 1211
 HEAP32[$22 >> 2] = $14; //@line 1212
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 1213
 HEAP32[$23 >> 2] = $16; //@line 1214
 sp = STACKTOP; //@line 1215
 return;
}
function __ZN16SX1276_LoRaRadio7standbyEv__async_cb_375($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18326
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18328
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18330
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18334
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18338
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18340
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18342
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18344
 __ZN4mbed6Ticker6detachEv($2 + 1048 | 0); //@line 18346
 __ZN4mbed6Ticker6detachEv($2 + 1112 | 0); //@line 18348
 _printf(10904, $4) | 0; //@line 18349
 HEAP32[$8 >> 2] = 1; //@line 18350
 _printf(10970, $8) | 0; //@line 18351
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 18352
 _putchar(10) | 0; //@line 18353
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 57; //@line 18356
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 18357
  HEAP32[$21 >> 2] = $2; //@line 18358
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 18359
  HEAP32[$22 >> 2] = $12; //@line 18360
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 18361
  HEAP32[$23 >> 2] = $14; //@line 18362
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 18363
  HEAP32[$24 >> 2] = $16; //@line 18364
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 18365
  HEAP32[$25 >> 2] = $18; //@line 18366
  sp = STACKTOP; //@line 18367
  return;
 }
 ___async_unwind = 0; //@line 18370
 HEAP32[$ReallocAsyncCtx2 >> 2] = 57; //@line 18371
 $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 18372
 HEAP32[$21 >> 2] = $2; //@line 18373
 $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 18374
 HEAP32[$22 >> 2] = $12; //@line 18375
 $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 18376
 HEAP32[$23 >> 2] = $14; //@line 18377
 $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 18378
 HEAP32[$24 >> 2] = $16; //@line 18379
 $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 18380
 HEAP32[$25 >> 2] = $18; //@line 18381
 sp = STACKTOP; //@line 18382
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_306($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13037
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13039
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13041
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13047
 if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
  _printf(13258, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 13054
  _printf(13285, $10) | 0; //@line 13055
  $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 13056
  _putchar(10) | 0; //@line 13057
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 458; //@line 13060
   $18 = $ReallocAsyncCtx + 4 | 0; //@line 13061
   HEAP32[$18 >> 2] = $2; //@line 13062
   $19 = $ReallocAsyncCtx + 8 | 0; //@line 13063
   HEAP32[$19 >> 2] = $4; //@line 13064
   $20 = $ReallocAsyncCtx + 12 | 0; //@line 13065
   HEAP32[$20 >> 2] = $4; //@line 13066
   sp = STACKTOP; //@line 13067
   return;
  }
  ___async_unwind = 0; //@line 13070
  HEAP32[$ReallocAsyncCtx >> 2] = 458; //@line 13071
  $18 = $ReallocAsyncCtx + 4 | 0; //@line 13072
  HEAP32[$18 >> 2] = $2; //@line 13073
  $19 = $ReallocAsyncCtx + 8 | 0; //@line 13074
  HEAP32[$19 >> 2] = $4; //@line 13075
  $20 = $ReallocAsyncCtx + 12 | 0; //@line 13076
  HEAP32[$20 >> 2] = $4; //@line 13077
  sp = STACKTOP; //@line 13078
  return;
 } else {
  $16 = HEAP32[$2 >> 2] | 0; //@line 13081
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 13082
  __ZN7LoRaPHY18put_radio_to_sleepEv($16); //@line 13083
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 457; //@line 13086
   $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 13087
   HEAP32[$17 >> 2] = $2; //@line 13088
   sp = STACKTOP; //@line 13089
   return;
  }
  ___async_unwind = 0; //@line 13092
  HEAP32[$ReallocAsyncCtx3 >> 2] = 457; //@line 13093
  $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 13094
  HEAP32[$17 >> 2] = $2; //@line 13095
  sp = STACKTOP; //@line 13096
  return;
 }
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $$09$i = 0, $1 = 0, $12 = 0, $18 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6132
 STACKTOP = STACKTOP + 144 | 0; //@line 6133
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144); //@line 6133
 $1 = sp + 16 | 0; //@line 6134
 $2 = sp; //@line 6135
 HEAP32[$2 >> 2] = $varargs; //@line 6136
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 6137
 $3 = _vsnprintf($1, 128, $0, $2) | 0; //@line 6138
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 736; //@line 6141
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6143
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6145
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 6147
  sp = STACKTOP; //@line 6148
  STACKTOP = sp; //@line 6149
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6151
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 6154
  return;
 }
 if (!(HEAP32[5811] | 0)) {
  _serial_init(23248, 2, 3); //@line 6159
  $$09$i = 0; //@line 6160
 } else {
  $$09$i = 0; //@line 6162
 }
 while (1) {
  $12 = HEAP8[$1 + $$09$i >> 0] | 0; //@line 6167
  $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6168
  _serial_putc(23248, $12); //@line 6169
  if (___async) {
   label = 7; //@line 6172
   break;
  }
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6175
  $18 = $$09$i + 1 | 0; //@line 6176
  if (($18 | 0) == ($3 | 0)) {
   label = 9; //@line 6179
   break;
  } else {
   $$09$i = $18; //@line 6182
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx2 >> 2] = 737; //@line 6186
  HEAP32[$AsyncCtx2 + 4 >> 2] = $$09$i; //@line 6188
  HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 6190
  HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 6192
  HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 6194
  HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 6196
  sp = STACKTOP; //@line 6197
  STACKTOP = sp; //@line 6198
  return;
 } else if ((label | 0) == 9) {
  STACKTOP = sp; //@line 6201
  return;
 }
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_32($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27984
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27986
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27988
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27990
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27992
 $9 = HEAP32[$2 >> 2] | 0; //@line 27993
 $11 = $6 + 12 | 0; //@line 27995
 HEAP32[$6 >> 2] = 537; //@line 27996
 HEAP32[$6 + 4 >> 2] = 0; //@line 27998
 HEAP32[$6 + 8 >> 2] = $4; //@line 28000
 HEAP32[$11 >> 2] = 848; //@line 28001
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 28002
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($9, $4 + 1056 | 0, $6); //@line 28003
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 538; //@line 28006
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 28007
  HEAP32[$12 >> 2] = $11; //@line 28008
  $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 28009
  HEAP32[$13 >> 2] = $2; //@line 28010
  $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 28011
  HEAP32[$14 >> 2] = $4; //@line 28012
  $15 = $ReallocAsyncCtx7 + 16 | 0; //@line 28013
  HEAP32[$15 >> 2] = $8; //@line 28014
  $16 = $ReallocAsyncCtx7 + 20 | 0; //@line 28015
  HEAP32[$16 >> 2] = $6; //@line 28016
  sp = STACKTOP; //@line 28017
  return;
 }
 ___async_unwind = 0; //@line 28020
 HEAP32[$ReallocAsyncCtx7 >> 2] = 538; //@line 28021
 $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 28022
 HEAP32[$12 >> 2] = $11; //@line 28023
 $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 28024
 HEAP32[$13 >> 2] = $2; //@line 28025
 $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 28026
 HEAP32[$14 >> 2] = $4; //@line 28027
 $15 = $ReallocAsyncCtx7 + 16 | 0; //@line 28028
 HEAP32[$15 >> 2] = $8; //@line 28029
 $16 = $ReallocAsyncCtx7 + 20 | 0; //@line 28030
 HEAP32[$16 >> 2] = $6; //@line 28031
 sp = STACKTOP; //@line 28032
 return;
}
function __ZN16SX1276_LoRaRadio18set_public_networkEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 1472
 STACKTOP = STACKTOP + 32 | 0; //@line 1473
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1473
 $vararg_buffer5 = sp + 24 | 0; //@line 1474
 $vararg_buffer3 = sp + 16 | 0; //@line 1475
 $vararg_buffer1 = sp + 8 | 0; //@line 1476
 $2 = $1 & 1; //@line 1478
 $3 = $0 + 689 | 0; //@line 1479
 HEAP8[$3 >> 0] = 1; //@line 1480
 _printf(10904, sp) | 0; //@line 1481
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$3 >> 0]; //@line 1484
 _printf(11079, $vararg_buffer1) | 0; //@line 1485
 $AsyncCtx10 = _emscripten_alloc_async_context(32, sp) | 0; //@line 1486
 _putchar(10) | 0; //@line 1487
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 88; //@line 1490
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 1492
  HEAP8[$AsyncCtx10 + 8 >> 0] = $2; //@line 1494
  HEAP32[$AsyncCtx10 + 12 >> 2] = $vararg_buffer3; //@line 1496
  HEAP32[$AsyncCtx10 + 16 >> 2] = $vararg_buffer3; //@line 1498
  HEAP8[$AsyncCtx10 + 20 >> 0] = $1 & 1; //@line 1501
  HEAP32[$AsyncCtx10 + 24 >> 2] = $vararg_buffer5; //@line 1503
  HEAP32[$AsyncCtx10 + 28 >> 2] = $vararg_buffer5; //@line 1505
  sp = STACKTOP; //@line 1506
  STACKTOP = sp; //@line 1507
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 1509
 HEAP8[$0 + 776 >> 0] = $2; //@line 1511
 _printf(10904, $vararg_buffer3) | 0; //@line 1512
 HEAP32[$vararg_buffer5 >> 2] = $1 & 1; //@line 1514
 _printf(11136, $vararg_buffer5) | 0; //@line 1515
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1516
 _putchar(10) | 0; //@line 1517
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 89; //@line 1520
  sp = STACKTOP; //@line 1521
  STACKTOP = sp; //@line 1522
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1524
  STACKTOP = sp; //@line 1525
  return;
 }
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_240($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8286
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8288
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8290
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8296
 if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
  _printf(13258, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 8303
  _printf(13285, $10) | 0; //@line 8304
  $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 8305
  _putchar(10) | 0; //@line 8306
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 438; //@line 8309
   $16 = $ReallocAsyncCtx + 4 | 0; //@line 8310
   HEAP32[$16 >> 2] = $2; //@line 8311
   $17 = $ReallocAsyncCtx + 8 | 0; //@line 8312
   HEAP32[$17 >> 2] = $4; //@line 8313
   $18 = $ReallocAsyncCtx + 12 | 0; //@line 8314
   HEAP32[$18 >> 2] = $4; //@line 8315
   sp = STACKTOP; //@line 8316
   return;
  }
  ___async_unwind = 0; //@line 8319
  HEAP32[$ReallocAsyncCtx >> 2] = 438; //@line 8320
  $16 = $ReallocAsyncCtx + 4 | 0; //@line 8321
  HEAP32[$16 >> 2] = $2; //@line 8322
  $17 = $ReallocAsyncCtx + 8 | 0; //@line 8323
  HEAP32[$17 >> 2] = $4; //@line 8324
  $18 = $ReallocAsyncCtx + 12 | 0; //@line 8325
  HEAP32[$18 >> 2] = $4; //@line 8326
  sp = STACKTOP; //@line 8327
  return;
 } else {
  $19 = HEAP32[$2 >> 2] | 0; //@line 8330
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 8331
  __ZN7LoRaPHY18put_radio_to_sleepEv($19); //@line 8332
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 441; //@line 8335
   $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 8336
   HEAP32[$20 >> 2] = $2; //@line 8337
   sp = STACKTOP; //@line 8338
   return;
  }
  ___async_unwind = 0; //@line 8341
  HEAP32[$ReallocAsyncCtx3 >> 2] = 441; //@line 8342
  $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 8343
  HEAP32[$20 >> 2] = $2; //@line 8344
  sp = STACKTOP; //@line 8345
  return;
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_48($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $20 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 29094
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29096
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29100
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29102
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29104
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29106
 HEAP8[$2 + 376 >> 0] = (HEAP32[$0 + 8 >> 2] | 0) == 0 & (HEAP8[$2 + 944 >> 0] & 8) != 0 & 1; //@line 29115
 $20 = HEAP8[$2 + 378 >> 0] | 0; //@line 29117
 HEAP8[$2 + 379 >> 0] = $20; //@line 29119
 HEAP8[$6 >> 0] = $20; //@line 29120
 HEAP8[$8 + 1 >> 0] = HEAP8[$2 + 372 >> 0] | 0; //@line 29124
 HEAP32[$8 + 4 >> 2] = $10; //@line 29126
 $26 = HEAP32[$2 >> 2] | 0; //@line 29127
 $29 = HEAP32[(HEAP32[$26 >> 2] | 0) + 12 >> 2] | 0; //@line 29130
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 29131
 FUNCTION_TABLE_vii[$29 & 31]($26, $8); //@line 29132
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 372; //@line 29135
  $30 = $ReallocAsyncCtx + 4 | 0; //@line 29136
  HEAP32[$30 >> 2] = $2; //@line 29137
  $31 = $ReallocAsyncCtx + 8 | 0; //@line 29138
  HEAP32[$31 >> 2] = $10; //@line 29139
  $32 = $ReallocAsyncCtx + 12 | 0; //@line 29140
  HEAP32[$32 >> 2] = $12; //@line 29141
  $33 = $ReallocAsyncCtx + 16 | 0; //@line 29142
  HEAP32[$33 >> 2] = $6; //@line 29143
  sp = STACKTOP; //@line 29144
  return;
 }
 ___async_unwind = 0; //@line 29147
 HEAP32[$ReallocAsyncCtx >> 2] = 372; //@line 29148
 $30 = $ReallocAsyncCtx + 4 | 0; //@line 29149
 HEAP32[$30 >> 2] = $2; //@line 29150
 $31 = $ReallocAsyncCtx + 8 | 0; //@line 29151
 HEAP32[$31 >> 2] = $10; //@line 29152
 $32 = $ReallocAsyncCtx + 12 | 0; //@line 29153
 HEAP32[$32 >> 2] = $12; //@line 29154
 $33 = $ReallocAsyncCtx + 16 | 0; //@line 29155
 HEAP32[$33 >> 2] = $6; //@line 29156
 sp = STACKTOP; //@line 29157
 return;
}
function __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$01315 = 0, $$016 = 0, $$1 = 0, $$114 = 0, $$sink = 0, $2 = 0, $23 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = HEAP8[$0 + 2 >> 0] | 0; //@line 20764
 if (!($2 << 24 >> 24)) {
  $$0$lcssa = 0; //@line 20767
  $26 = $$0$lcssa << 24 >> 24 != 0; //@line 20768
  $$sink = $26 & 1; //@line 20769
  HEAP8[$0 >> 0] = $$sink; //@line 20770
  $27 = $0 + 3 | 0; //@line 20771
  HEAP8[$27 >> 0] = $$0$lcssa; //@line 20772
  return;
 } else {
  $$01315 = 0; //@line 20775
  $$016 = 0; //@line 20775
  $5 = 0; //@line 20775
 }
 while (1) {
  $6 = HEAP8[$0 + 4 + $5 >> 0] | 0; //@line 20779
  switch ($6 << 24 >> 24) {
  case 5:
  case 10:
   {
    $7 = $$01315 + 1 << 24 >> 24; //@line 20782
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = $6; //@line 20786
    HEAP8[($$016 + 1 & 255) + ($0 + 132) >> 0] = HEAP8[($7 & 255) + ($0 + 4) >> 0] | 0; //@line 20793
    $$1 = $$016 + 2 << 24 >> 24; //@line 20794
    $$114 = $7; //@line 20794
    break;
   }
  case 8:
   {
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = 8; //@line 20801
    $$1 = $$016 + 1 << 24 >> 24; //@line 20802
    $$114 = $$01315; //@line 20802
    break;
   }
  case 6:
   {
    $$1 = $$016; //@line 20808
    $$114 = $5 + 2 & 255; //@line 20808
    break;
   }
  case 7:
  case 3:
   {
    $$1 = $$016; //@line 20813
    $$114 = $$01315 + 1 << 24 >> 24; //@line 20813
    break;
   }
  default:
   {
    $$1 = $$016; //@line 20817
    $$114 = $$01315; //@line 20817
   }
  }
  $23 = $$114 + 1 << 24 >> 24; //@line 20820
  if (($23 & 255) < ($2 & 255)) {
   $$01315 = $23; //@line 20824
   $$016 = $$1; //@line 20824
   $5 = $23 & 255; //@line 20824
  } else {
   $$0$lcssa = $$1; //@line 20826
   break;
  }
 }
 $26 = $$0$lcssa << 24 >> 24 != 0; //@line 20830
 $$sink = $26 & 1; //@line 20831
 HEAP8[$0 >> 0] = $$sink; //@line 20832
 $27 = $0 + 3 | 0; //@line 20833
 HEAP8[$27 >> 0] = $$0$lcssa; //@line 20834
 return;
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 11054
 $4 = HEAP32[$3 >> 2] | 0; //@line 11055
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 11062
   label = 5; //@line 11063
  } else {
   $$1 = 0; //@line 11065
  }
 } else {
  $12 = $4; //@line 11069
  label = 5; //@line 11070
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 11074
   $10 = HEAP32[$9 >> 2] | 0; //@line 11075
   $14 = $10; //@line 11078
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $1) | 0; //@line 11083
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 11091
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 11095
       $$141 = $0; //@line 11095
       $$143 = $1; //@line 11095
       $31 = $14; //@line 11095
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 11098
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 11105
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $$038) | 0; //@line 11110
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 11113
      break L5;
     }
     $$139 = $$038; //@line 11119
     $$141 = $0 + $$038 | 0; //@line 11119
     $$143 = $1 - $$038 | 0; //@line 11119
     $31 = HEAP32[$9 >> 2] | 0; //@line 11119
    } else {
     $$139 = 0; //@line 11121
     $$141 = $0; //@line 11121
     $$143 = $1; //@line 11121
     $31 = $14; //@line 11121
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 11124
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 11127
   $$1 = $$139 + $$143 | 0; //@line 11129
  }
 } while (0);
 return $$1 | 0; //@line 11132
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1609
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1611
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1613
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1615
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1617
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1619
 HEAP8[$2 + 1097 >> 0] = HEAP8[___async_retval >> 0] | 0; //@line 1623
 HEAP8[$4 >> 0] = 0; //@line 1624
 HEAP8[$6 >> 0] = HEAP8[$2 + 1156 >> 0] << 7; //@line 1628
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 1629
 $16 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($2, $4, $6, 0, 0, 0) | 0; //@line 1630
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 556; //@line 1633
  $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 1634
  HEAP32[$17 >> 2] = $2; //@line 1635
  $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 1636
  HEAP32[$18 >> 2] = $8; //@line 1637
  $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 1638
  HEAP32[$19 >> 2] = $6; //@line 1639
  $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 1640
  HEAP32[$20 >> 2] = $4; //@line 1641
  $21 = $ReallocAsyncCtx3 + 20 | 0; //@line 1642
  HEAP32[$21 >> 2] = $10; //@line 1643
  sp = STACKTOP; //@line 1644
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 1648
 ___async_unwind = 0; //@line 1649
 HEAP32[$ReallocAsyncCtx3 >> 2] = 556; //@line 1650
 $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 1651
 HEAP32[$17 >> 2] = $2; //@line 1652
 $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 1653
 HEAP32[$18 >> 2] = $8; //@line 1654
 $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 1655
 HEAP32[$19 >> 2] = $6; //@line 1656
 $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 1657
 HEAP32[$20 >> 2] = $4; //@line 1658
 $21 = $ReallocAsyncCtx3 + 20 | 0; //@line 1659
 HEAP32[$21 >> 2] = $10; //@line 1660
 sp = STACKTOP; //@line 1661
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_297($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 11768
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 11770
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11772
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11774
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11776
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11778
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11780
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11782
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11784
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11786
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11788
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11790
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11792
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 11798
 _printf(10904, HEAP32[$0 + 52 >> 2] | 0) | 0; //@line 11801
 HEAP32[$30 >> 2] = 5; //@line 11802
 _printf(10999, $30) | 0; //@line 11803
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(52) | 0; //@line 11804
 _putchar(10) | 0; //@line 11805
 if (!___async) {
  ___async_unwind = 0; //@line 11808
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 97; //@line 11810
 HEAP16[$ReallocAsyncCtx5 + 4 >> 1] = $2; //@line 11812
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 11814
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 11816
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 11818
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 11820
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 11822
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 11824
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 11826
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 11828
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $20; //@line 11830
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $22; //@line 11832
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $24; //@line 11834
 sp = STACKTOP; //@line 11835
 return;
}
function __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $2 = 0, $20 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 10635
 STACKTOP = STACKTOP + 16 | 0; //@line 10636
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10636
 $2 = $0 + 1876 | 0; //@line 10639
 if (!(HEAP32[$2 >> 2] | 0)) {
  _printf(12178, sp) | 0; //@line 10643
  _printf(12975, sp + 8 | 0) | 0; //@line 10644
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10645
  _putchar(10) | 0; //@line 10646
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 339; //@line 10649
   sp = STACKTOP; //@line 10650
   STACKTOP = sp; //@line 10651
   return 0; //@line 10651
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10653
  $$0 = -1012; //@line 10654
  STACKTOP = sp; //@line 10655
  return $$0 | 0; //@line 10655
 } else {
  $6 = HEAP32[$1 + 4 >> 2] | 0; //@line 10658
  $8 = HEAP32[$1 + 8 >> 2] | 0; //@line 10660
  $10 = HEAP32[$1 + 12 >> 2] | 0; //@line 10662
  $12 = HEAP8[$1 + 16 >> 0] | 0; //@line 10664
  HEAP8[$0 + 1936 >> 0] = 0; //@line 10666
  HEAP32[$0 + 1960 >> 2] = 0; //@line 10668
  HEAP32[$0 + 1956 >> 2] = 0; //@line 10670
  HEAP32[$0 + 1944 >> 2] = $8; //@line 10673
  HEAP32[$0 + 1948 >> 2] = $10; //@line 10675
  HEAP32[$0 + 1940 >> 2] = $6; //@line 10676
  HEAP8[$0 + 1952 >> 0] = $12; //@line 10678
  HEAP32[$2 >> 2] = 2; //@line 10679
  $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10680
  $20 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 10681
  if (___async) {
   HEAP32[$AsyncCtx4 >> 2] = 340; //@line 10684
   sp = STACKTOP; //@line 10685
   STACKTOP = sp; //@line 10686
   return 0; //@line 10686
  }
  _emscripten_free_async_context($AsyncCtx4 | 0); //@line 10688
  $$0 = $20; //@line 10689
  STACKTOP = sp; //@line 10690
  return $$0 | 0; //@line 10690
 }
 return 0; //@line 10692
}
function __ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_313($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 13509
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13513
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 13515
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13517
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13519
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13523
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13527
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 21; //@line 13532
  HEAP8[$4 + 4 >> 0] = $6; //@line 13534
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 13535
  $23 = __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($8, $4) | 0; //@line 13536
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 338; //@line 13539
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 13540
   HEAP32[$24 >> 2] = $18; //@line 13541
   sp = STACKTOP; //@line 13542
   return;
  }
  HEAP32[___async_retval >> 2] = $23; //@line 13546
  ___async_unwind = 0; //@line 13547
  HEAP32[$ReallocAsyncCtx4 >> 2] = 338; //@line 13548
  $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 13549
  HEAP32[$24 >> 2] = $18; //@line 13550
  sp = STACKTOP; //@line 13551
  return;
 } else {
  _printf(12178, $10) | 0; //@line 13554
  _printf(13036, $14) | 0; //@line 13555
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 13556
  _putchar(10) | 0; //@line 13557
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 337; //@line 13560
   $21 = $ReallocAsyncCtx + 4 | 0; //@line 13561
   HEAP32[$21 >> 2] = $18; //@line 13562
   sp = STACKTOP; //@line 13563
   return;
  }
  ___async_unwind = 0; //@line 13566
  HEAP32[$ReallocAsyncCtx >> 2] = 337; //@line 13567
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 13568
  HEAP32[$21 >> 2] = $18; //@line 13569
  sp = STACKTOP; //@line 13570
  return;
 }
}
function __ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 1414
 STACKTOP = STACKTOP + 32 | 0; //@line 1415
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1415
 $vararg_buffer5 = sp + 24 | 0; //@line 1416
 $vararg_buffer3 = sp + 16 | 0; //@line 1417
 $vararg_buffer1 = sp + 8 | 0; //@line 1418
 $4 = $0 + 689 | 0; //@line 1421
 HEAP8[$4 >> 0] = $1; //@line 1422
 _printf(10904, sp) | 0; //@line 1423
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$4 >> 0]; //@line 1426
 _printf(11079, $vararg_buffer1) | 0; //@line 1427
 $AsyncCtx11 = _emscripten_alloc_async_context(28, sp) | 0; //@line 1428
 _putchar(10) | 0; //@line 1429
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 86; //@line 1432
  HEAP32[$AsyncCtx11 + 4 >> 2] = $vararg_buffer3; //@line 1434
  HEAP32[$AsyncCtx11 + 8 >> 2] = $vararg_buffer3; //@line 1436
  HEAP8[$AsyncCtx11 + 12 >> 0] = $2; //@line 1438
  HEAP32[$AsyncCtx11 + 16 >> 2] = $vararg_buffer5; //@line 1440
  HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 1442
  HEAP32[$AsyncCtx11 + 24 >> 2] = $vararg_buffer5; //@line 1444
  sp = STACKTOP; //@line 1445
  STACKTOP = sp; //@line 1446
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 1448
 _printf(10904, $vararg_buffer3) | 0; //@line 1449
 HEAP32[$vararg_buffer5 >> 2] = $1; //@line 1451
 HEAP32[$vararg_buffer5 + 4 >> 2] = $2 & 255; //@line 1453
 _printf(11158, $vararg_buffer5) | 0; //@line 1454
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1455
 _putchar(10) | 0; //@line 1456
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 87; //@line 1459
  sp = STACKTOP; //@line 1460
  STACKTOP = sp; //@line 1461
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1463
  STACKTOP = sp; //@line 1464
  return;
 }
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_7($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $27 = 0, $30 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 16913
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16915
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16919
 $8 = $0 + 16 | 0; //@line 16921
 $10 = HEAP32[$8 >> 2] | 0; //@line 16923
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 16926
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 16928
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 16930
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 16932
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 16933
 $18 = HEAP32[$2 >> 2] | 0; //@line 16934
 if ($18 | 0) {
  $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 16938
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 16939
  FUNCTION_TABLE_vi[$21 & 1023]($17); //@line 16940
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 135; //@line 16943
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 16944
   HEAP32[$22 >> 2] = $15; //@line 16945
   sp = STACKTOP; //@line 16946
   return;
  }
  ___async_unwind = 0; //@line 16949
  HEAP32[$ReallocAsyncCtx3 >> 2] = 135; //@line 16950
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 16951
  HEAP32[$22 >> 2] = $15; //@line 16952
  sp = STACKTOP; //@line 16953
  return;
 }
 $24 = HEAP32[$15 + 788 >> 2] | 0; //@line 16957
 if (!$24) {
  return;
 }
 $27 = HEAP32[$24 + 60 >> 2] | 0; //@line 16963
 if (!$27) {
  return;
 }
 $30 = HEAP32[$27 >> 2] | 0; //@line 16969
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 16970
 FUNCTION_TABLE_vi[$30 & 1023]($24 + 48 | 0); //@line 16971
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 136; //@line 16974
  sp = STACKTOP; //@line 16975
  return;
 }
 ___async_unwind = 0; //@line 16978
 HEAP32[$ReallocAsyncCtx4 >> 2] = 136; //@line 16979
 sp = STACKTOP; //@line 16980
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_45($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 28903
 STACKTOP = STACKTOP + 16 | 0; //@line 28904
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 28904
 $$byval_copy = sp; //@line 28905
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28907
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28909
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28911
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28913
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28915
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28917
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28919
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28921
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28923
 $20 = HEAP32[$4 + 1328 >> 2] | 0; //@line 28925
 HEAP32[$14 >> 2] = 366; //@line 28926
 HEAP32[$14 + 4 >> 2] = 0; //@line 28928
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(36) | 0; //@line 28929
 HEAP32[$$byval_copy >> 2] = HEAP32[$14 >> 2]; //@line 28930
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$14 + 4 >> 2]; //@line 28930
 $21 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($20, $4, $$byval_copy) | 0; //@line 28931
 if (!___async) {
  HEAP32[___async_retval >> 2] = $21; //@line 28935
  ___async_unwind = 0; //@line 28936
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 367; //@line 28938
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 28940
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 28942
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $6; //@line 28944
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $8; //@line 28946
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $10; //@line 28948
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $16; //@line 28950
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $18; //@line 28952
 HEAP32[$ReallocAsyncCtx9 + 32 >> 2] = $12; //@line 28954
 sp = STACKTOP; //@line 28955
 STACKTOP = sp; //@line 28956
 return;
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17855
 STACKTOP = STACKTOP + 32 | 0; //@line 17856
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17856
 $$byval_copy = sp + 8 | 0; //@line 17857
 $1 = sp + 16 | 0; //@line 17859
 _printf(13258, sp) | 0; //@line 17860
 _printf(13285, $$byval_copy) | 0; //@line 17861
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 17862
 _putchar(10) | 0; //@line 17863
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 522; //@line 17866
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 17868
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 17870
  sp = STACKTOP; //@line 17871
  STACKTOP = sp; //@line 17872
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17874
 $5 = HEAP32[$0 + 1328 >> 2] | 0; //@line 17876
 HEAP32[$1 >> 2] = 366; //@line 17877
 HEAP32[$1 + 4 >> 2] = 0; //@line 17879
 $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17880
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 17881
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 17881
 $6 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($5, $0, $$byval_copy) | 0; //@line 17882
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 523; //@line 17885
  sp = STACKTOP; //@line 17886
  STACKTOP = sp; //@line 17887
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 17889
 if ($6 | 0) {
  STACKTOP = sp; //@line 17892
  return;
 }
 $AsyncCtx8 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17894
 _mbed_assert_internal(13142, 13151, 217); //@line 17895
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 524; //@line 17898
  sp = STACKTOP; //@line 17899
  STACKTOP = sp; //@line 17900
  return;
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 17902
 STACKTOP = sp; //@line 17903
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17624
 STACKTOP = STACKTOP + 32 | 0; //@line 17625
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17625
 $$byval_copy = sp + 8 | 0; //@line 17626
 $1 = sp + 16 | 0; //@line 17628
 _printf(13258, sp) | 0; //@line 17629
 _printf(13740, $$byval_copy) | 0; //@line 17630
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 17631
 _putchar(10) | 0; //@line 17632
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 512; //@line 17635
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 17637
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 17639
  sp = STACKTOP; //@line 17640
  STACKTOP = sp; //@line 17641
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17643
 $5 = HEAP32[$0 + 1328 >> 2] | 0; //@line 17645
 HEAP32[$1 >> 2] = 513; //@line 17646
 HEAP32[$1 + 4 >> 2] = 0; //@line 17648
 $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17649
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 17650
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 17650
 $6 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($5, $0, $$byval_copy) | 0; //@line 17651
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 514; //@line 17654
  sp = STACKTOP; //@line 17655
  STACKTOP = sp; //@line 17656
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 17658
 if ($6 | 0) {
  STACKTOP = sp; //@line 17661
  return;
 }
 $AsyncCtx8 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17663
 _mbed_assert_internal(13142, 13151, 209); //@line 17664
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 515; //@line 17667
  sp = STACKTOP; //@line 17668
  STACKTOP = sp; //@line 17669
  return;
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 17671
 STACKTOP = sp; //@line 17672
 return;
}
function _mbedtls_cipher_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $22 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2258
 if (!$0) {
  $$0 = -24832; //@line 2261
  return $$0 | 0; //@line 2262
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 2264
 if (!$5) {
  $$0 = -24832; //@line 2267
  return $$0 | 0; //@line 2268
 }
 if (!(HEAP32[$5 + 20 >> 2] & 2)) {
  if ((HEAP32[$5 + 8 >> 2] | 0) != ($2 | 0)) {
   $$0 = -24832; //@line 2279
   return $$0 | 0; //@line 2280
  }
 }
 HEAP32[$0 + 4 >> 2] = $2; //@line 2284
 HEAP32[$0 + 8 >> 2] = $3; //@line 2286
 L11 : do {
  if (($3 | 0) != 1) {
   switch (HEAP32[$5 + 4 >> 2] | 0) {
   case 5:
   case 3:
    {
     break L11;
     break;
    }
   default:
    {}
   }
   if ($3 | 0) {
    $$0 = -24832; //@line 2302
    return $$0 | 0; //@line 2303
   }
   $30 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 16 >> 2] | 0; //@line 2308
   $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 2310
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2311
   $33 = FUNCTION_TABLE_iiii[$30 & 15]($32, $1, $2) | 0; //@line 2312
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 680; //@line 2315
    sp = STACKTOP; //@line 2316
    return 0; //@line 2317
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2319
   $$0 = $33; //@line 2320
   return $$0 | 0; //@line 2321
  }
 } while (0);
 $22 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 12 >> 2] | 0; //@line 2327
 $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 2329
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2330
 $25 = FUNCTION_TABLE_iiii[$22 & 15]($24, $1, $2) | 0; //@line 2331
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 679; //@line 2334
  sp = STACKTOP; //@line 2335
  return 0; //@line 2336
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2338
 $$0 = $25; //@line 2339
 return $$0 | 0; //@line 2340
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_404($0) {
 $0 = $0 | 0;
 var $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23032
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23034
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23036
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23038
 HEAP8[$2 + 1932 >> 0] = 1; //@line 23040
 $8 = $2 + 1892 | 0; //@line 23041
 $9 = HEAP32[$8 >> 2] | 0; //@line 23042
 if (!$9) {
  HEAP32[___async_retval >> 2] = 0; //@line 23046
  return;
 }
 $13 = HEAP32[$2 + 2288 >> 2] | 0; //@line 23051
 $15 = HEAP32[$9 + 4 >> 2] | 0; //@line 23053
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 23054
 FUNCTION_TABLE_vii[$15 & 31]($6, $2 + 1880 | 0); //@line 23055
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 261; //@line 23058
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 23059
  HEAP32[$16 >> 2] = $8; //@line 23060
  $17 = $ReallocAsyncCtx5 + 8 | 0; //@line 23061
  HEAP32[$17 >> 2] = $6; //@line 23062
  $18 = $ReallocAsyncCtx5 + 12 | 0; //@line 23063
  HEAP32[$18 >> 2] = $13; //@line 23064
  $19 = $ReallocAsyncCtx5 + 16 | 0; //@line 23065
  HEAP32[$19 >> 2] = $6; //@line 23066
  $20 = $ReallocAsyncCtx5 + 20 | 0; //@line 23067
  HEAP32[$20 >> 2] = $4; //@line 23068
  sp = STACKTOP; //@line 23069
  return;
 }
 ___async_unwind = 0; //@line 23072
 HEAP32[$ReallocAsyncCtx5 >> 2] = 261; //@line 23073
 $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 23074
 HEAP32[$16 >> 2] = $8; //@line 23075
 $17 = $ReallocAsyncCtx5 + 8 | 0; //@line 23076
 HEAP32[$17 >> 2] = $6; //@line 23077
 $18 = $ReallocAsyncCtx5 + 12 | 0; //@line 23078
 HEAP32[$18 >> 2] = $13; //@line 23079
 $19 = $ReallocAsyncCtx5 + 16 | 0; //@line 23080
 HEAP32[$19 >> 2] = $6; //@line 23081
 $20 = $ReallocAsyncCtx5 + 20 | 0; //@line 23082
 HEAP32[$20 >> 2] = $4; //@line 23083
 sp = STACKTOP; //@line 23084
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_417($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx33 = 0, sp = 0;
 sp = STACKTOP; //@line 23713
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23717
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23719
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23721
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23722
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 23726
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 23727
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 23728
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 249; //@line 23731
   $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 23732
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 23733
   $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 23734
   HEAP32[$13 >> 2] = $6; //@line 23735
   sp = STACKTOP; //@line 23736
   return;
  }
  ___async_unwind = 0; //@line 23739
  HEAP32[$ReallocAsyncCtx2 >> 2] = 249; //@line 23740
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 23741
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 23742
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 23743
  HEAP32[$13 >> 2] = $6; //@line 23744
  sp = STACKTOP; //@line 23745
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = -1011; //@line 23751
  return;
 }
 $ReallocAsyncCtx33 = _emscripten_realloc_async_context(8) | 0; //@line 23754
 _mbed_assert_internal(13142, 12226, 1141); //@line 23755
 if (___async) {
  HEAP32[$ReallocAsyncCtx33 >> 2] = 250; //@line 23758
  $15 = $ReallocAsyncCtx33 + 4 | 0; //@line 23759
  HEAP32[$15 >> 2] = $6; //@line 23760
  sp = STACKTOP; //@line 23761
  return;
 }
 ___async_unwind = 0; //@line 23764
 HEAP32[$ReallocAsyncCtx33 >> 2] = 250; //@line 23765
 $15 = $ReallocAsyncCtx33 + 4 | 0; //@line 23766
 HEAP32[$15 >> 2] = $6; //@line 23767
 sp = STACKTOP; //@line 23768
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $34 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30258
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30260
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30266
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30268
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 30271
 $14 = HEAP8[$0 + 25 >> 0] & 1; //@line 30274
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 30276
 $18 = HEAP8[$0 + 27 >> 0] | 0; //@line 30278
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 30280
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 30282
 $24 = HEAP32[$0 + 36 >> 2] | 0; //@line 30284
 $26 = HEAP32[$0 + 40 >> 2] | 0; //@line 30286
 $27 = HEAP32[$2 >> 2] | 0; //@line 30287
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + 32 >> 2] | 0; //@line 30290
 $34 = HEAP32[(HEAP32[$0 + 12 >> 2] | 0) + ((HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 30294
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 30295
 FUNCTION_TABLE_vii[$30 & 31]($27, $34); //@line 30296
 if (!___async) {
  ___async_unwind = 0; //@line 30299
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 632; //@line 30301
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 30303
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 30305
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 30307
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $12 & 1; //@line 30310
 HEAP8[$ReallocAsyncCtx2 + 17 >> 0] = $14 & 1; //@line 30313
 HEAP8[$ReallocAsyncCtx2 + 18 >> 0] = $16; //@line 30315
 HEAP8[$ReallocAsyncCtx2 + 19 >> 0] = $18; //@line 30317
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $20; //@line 30319
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $22; //@line 30321
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $24; //@line 30323
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $26; //@line 30325
 sp = STACKTOP; //@line 30326
 return;
}
function _mbedtls_gcm_setkey__async_cb_287($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 11073
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11075
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11077
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11079
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11081
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11083
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 11087
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 11090
 dest = $2; //@line 11091
 stop = dest + 16 | 0; //@line 11091
 do {
  HEAP8[dest >> 0] = 0; //@line 11091
  dest = dest + 1 | 0; //@line 11091
 } while ((dest | 0) < (stop | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 11092
 $11 = _mbedtls_cipher_update($6, $2, 16, $2, $4) | 0; //@line 11093
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 698; //@line 11096
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 11097
  HEAP32[$12 >> 2] = $2; //@line 11098
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 11099
  HEAP32[$13 >> 2] = $2; //@line 11100
  $14 = $ReallocAsyncCtx + 12 | 0; //@line 11101
  HEAP32[$14 >> 2] = $8; //@line 11102
  $15 = $ReallocAsyncCtx + 16 | 0; //@line 11103
  HEAP32[$15 >> 2] = $4; //@line 11104
  sp = STACKTOP; //@line 11105
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 11109
 ___async_unwind = 0; //@line 11110
 HEAP32[$ReallocAsyncCtx >> 2] = 698; //@line 11111
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 11112
 HEAP32[$12 >> 2] = $2; //@line 11113
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 11114
 HEAP32[$13 >> 2] = $2; //@line 11115
 $14 = $ReallocAsyncCtx + 12 | 0; //@line 11116
 HEAP32[$14 >> 2] = $8; //@line 11117
 $15 = $ReallocAsyncCtx + 16 | 0; //@line 11118
 HEAP32[$15 >> 2] = $4; //@line 11119
 sp = STACKTOP; //@line 11120
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_416($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23651
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23655
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23657
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23659
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23660
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 23664
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 23665
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 23666
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 254; //@line 23669
   $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 23670
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 23671
   $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 23672
   HEAP32[$13 >> 2] = $6; //@line 23673
   sp = STACKTOP; //@line 23674
   return;
  }
  ___async_unwind = 0; //@line 23677
  HEAP32[$ReallocAsyncCtx4 >> 2] = 254; //@line 23678
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 23679
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 23680
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 23681
  HEAP32[$13 >> 2] = $6; //@line 23682
  sp = STACKTOP; //@line 23683
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 23689
  return;
 }
 $ReallocAsyncCtx32 = _emscripten_realloc_async_context(8) | 0; //@line 23692
 _mbed_assert_internal(13142, 12226, 1186); //@line 23693
 if (___async) {
  HEAP32[$ReallocAsyncCtx32 >> 2] = 255; //@line 23696
  $15 = $ReallocAsyncCtx32 + 4 | 0; //@line 23697
  HEAP32[$15 >> 2] = $6; //@line 23698
  sp = STACKTOP; //@line 23699
  return;
 }
 ___async_unwind = 0; //@line 23702
 HEAP32[$ReallocAsyncCtx32 >> 2] = 255; //@line 23703
 $15 = $ReallocAsyncCtx32 + 4 | 0; //@line 23704
 HEAP32[$15 >> 2] = $6; //@line 23705
 sp = STACKTOP; //@line 23706
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_415($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx31 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23589
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23593
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23595
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23597
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23598
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 23602
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 23603
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 23604
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 263; //@line 23607
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 23608
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 23609
   $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 23610
   HEAP32[$13 >> 2] = $6; //@line 23611
   sp = STACKTOP; //@line 23612
   return;
  }
  ___async_unwind = 0; //@line 23615
  HEAP32[$ReallocAsyncCtx6 >> 2] = 263; //@line 23616
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 23617
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 23618
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 23619
  HEAP32[$13 >> 2] = $6; //@line 23620
  sp = STACKTOP; //@line 23621
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 23627
  return;
 }
 $ReallocAsyncCtx31 = _emscripten_realloc_async_context(8) | 0; //@line 23630
 _mbed_assert_internal(13142, 12226, 1223); //@line 23631
 if (___async) {
  HEAP32[$ReallocAsyncCtx31 >> 2] = 264; //@line 23634
  $15 = $ReallocAsyncCtx31 + 4 | 0; //@line 23635
  HEAP32[$15 >> 2] = $6; //@line 23636
  sp = STACKTOP; //@line 23637
  return;
 }
 ___async_unwind = 0; //@line 23640
 HEAP32[$ReallocAsyncCtx31 >> 2] = 264; //@line 23641
 $15 = $ReallocAsyncCtx31 + 4 | 0; //@line 23642
 HEAP32[$15 >> 2] = $6; //@line 23643
 sp = STACKTOP; //@line 23644
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_298($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 11843
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 11845
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11847
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11849
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11851
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11853
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11855
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11857
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11859
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11861
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11863
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11865
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11867
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11869
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(56) | 0; //@line 11870
 __ZN4mbed5Timer5startEv($8); //@line 11871
 if (!___async) {
  ___async_unwind = 0; //@line 11874
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 100; //@line 11876
 HEAP16[$ReallocAsyncCtx11 + 4 >> 1] = $2; //@line 11878
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $8; //@line 11880
 HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $4; //@line 11882
 HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $12; //@line 11884
 HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $14; //@line 11886
 HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $16; //@line 11888
 HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $18; //@line 11890
 HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $6; //@line 11892
 HEAP32[$ReallocAsyncCtx11 + 36 >> 2] = $10; //@line 11894
 HEAP32[$ReallocAsyncCtx11 + 40 >> 2] = $20; //@line 11896
 HEAP32[$ReallocAsyncCtx11 + 44 >> 2] = $22; //@line 11898
 HEAP32[$ReallocAsyncCtx11 + 48 >> 2] = $24; //@line 11900
 HEAP32[$ReallocAsyncCtx11 + 52 >> 2] = $26; //@line 11902
 sp = STACKTOP; //@line 11903
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_458($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 33619
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33623
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33625
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33627
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33629
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33631
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33633
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 33635
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 33638
 HEAP32[$4 + 16 >> 2] = HEAP32[$6 >> 2]; //@line 33641
 _equeue_event_dtor($4, 279); //@line 33642
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 33643
 $20 = _equeue_post($8, 280, $4) | 0; //@line 33644
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 281; //@line 33647
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 33648
  HEAP32[$21 >> 2] = $10; //@line 33649
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 33650
  HEAP32[$22 >> 2] = $12; //@line 33651
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 33652
  HEAP32[$23 >> 2] = $14; //@line 33653
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 33654
  HEAP32[$24 >> 2] = $16; //@line 33655
  sp = STACKTOP; //@line 33656
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 33660
 ___async_unwind = 0; //@line 33661
 HEAP32[$ReallocAsyncCtx6 >> 2] = 281; //@line 33662
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 33663
 HEAP32[$21 >> 2] = $10; //@line 33664
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 33665
 HEAP32[$22 >> 2] = $12; //@line 33666
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 33667
 HEAP32[$23 >> 2] = $14; //@line 33668
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 33669
 HEAP32[$24 >> 2] = $16; //@line 33670
 sp = STACKTOP; //@line 33671
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_428($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 25219
 STACKTOP = STACKTOP + 16 | 0; //@line 25220
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 25220
 $$byval_copy = sp; //@line 25221
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25223
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25225
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25227
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25229
 $10 = HEAP32[$2 + 1328 >> 2] | 0; //@line 25231
 HEAP32[$4 >> 2] = 366; //@line 25232
 HEAP32[$4 + 4 >> 2] = 0; //@line 25234
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(16) | 0; //@line 25235
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 25236
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 25236
 $11 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($10, $2, $$byval_copy) | 0; //@line 25237
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 479; //@line 25240
  $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 25241
  HEAP32[$12 >> 2] = $6; //@line 25242
  $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 25243
  HEAP32[$13 >> 2] = $2; //@line 25244
  $14 = $ReallocAsyncCtx10 + 12 | 0; //@line 25245
  HEAP32[$14 >> 2] = $8; //@line 25246
  sp = STACKTOP; //@line 25247
  STACKTOP = sp; //@line 25248
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 25251
 ___async_unwind = 0; //@line 25252
 HEAP32[$ReallocAsyncCtx10 >> 2] = 479; //@line 25253
 $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 25254
 HEAP32[$12 >> 2] = $6; //@line 25255
 $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 25256
 HEAP32[$13 >> 2] = $2; //@line 25257
 $14 = $ReallocAsyncCtx10 + 12 | 0; //@line 25258
 HEAP32[$14 >> 2] = $8; //@line 25259
 sp = STACKTOP; //@line 25260
 STACKTOP = sp; //@line 25261
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_485($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 36071
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36075
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36077
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36079
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36081
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 36083
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 36085
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 36087
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 36090
 HEAP16[$4 + 16 >> 1] = HEAP16[$6 >> 1] | 0; //@line 36093
 _equeue_event_dtor($4, 287); //@line 36094
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 36095
 $20 = _equeue_post($8, 288, $4) | 0; //@line 36096
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 289; //@line 36099
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 36100
  HEAP32[$21 >> 2] = $10; //@line 36101
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 36102
  HEAP32[$22 >> 2] = $12; //@line 36103
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 36104
  HEAP32[$23 >> 2] = $14; //@line 36105
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 36106
  HEAP32[$24 >> 2] = $16; //@line 36107
  sp = STACKTOP; //@line 36108
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 36112
 ___async_unwind = 0; //@line 36113
 HEAP32[$ReallocAsyncCtx6 >> 2] = 289; //@line 36114
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 36115
 HEAP32[$21 >> 2] = $10; //@line 36116
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 36117
 HEAP32[$22 >> 2] = $12; //@line 36118
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 36119
 HEAP32[$23 >> 2] = $14; //@line 36120
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 36121
 HEAP32[$24 >> 2] = $16; //@line 36122
 sp = STACKTOP; //@line 36123
 return;
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$i$i = 0, $$sink$i = 0, $11 = 0, $14 = 0, $22 = 0, $28 = 0, $41 = 0, $44 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26800
 $7 = HEAPU8[$0 + 24 >> 0] | 0; //@line 26803
 $8 = $0 + 25 | 0; //@line 26804
 $11 = (HEAPU8[$8 >> 0] | 0) + $7 | 0; //@line 26807
 $14 = $0 + 26 | 0; //@line 26810
 if ((HEAP8[$2 >> 0] | 0) == (HEAPU8[$14 >> 0] | 0)) {
  HEAP32[$4 >> 2] = 0; //@line 26815
  $$0 = 0; //@line 26816
  return $$0 | 0; //@line 26817
 }
 if ((HEAP32[$4 >> 2] | 0) >>> 0 < $7 >>> 0) {
  $$0 = 0; //@line 26822
  return $$0 | 0; //@line 26823
 }
 HEAP8[$3 >> 0] = HEAP8[$0 + 22 >> 0] | 0; //@line 26827
 $22 = HEAP32[$4 >> 2] | 0; //@line 26828
 if ($22 >>> 0 < $11 >>> 0) {
  $$0 = 1; //@line 26831
  return $$0 | 0; //@line 26832
 }
 if ((($22 >>> 0) % ((HEAPU8[$8 >> 0] | 0) >>> 0) | 0 | 0) != 1) {
  $$0 = 1; //@line 26839
  return $$0 | 0; //@line 26840
 }
 $28 = HEAP8[$2 >> 0] | 0; //@line 26842
 $$sink$i = HEAP8[((HEAP8[$0 + 132 >> 0] & 1) == 0 ? $14 : $0 + 35 | 0) >> 0] | 0; //@line 26849
 $$0$i$i = $$sink$i << 24 >> 24 == $28 << 24 >> 24 ? $$sink$i : ($28 & 255) + 255 & 255; //@line 26854
 HEAP8[$2 >> 0] = $$0$i$i; //@line 26855
 $41 = ($$0$i$i << 24 >> 24 | 0) != (HEAPU8[$14 >> 0] | 0); //@line 26859
 if ($41 | $1 ^ 1) {
  $$0 = $41; //@line 26863
  return $$0 | 0; //@line 26864
 }
 $44 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 26868
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 26869
 FUNCTION_TABLE_vi[$44 & 1023]($0); //@line 26870
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 664; //@line 26873
  sp = STACKTOP; //@line 26874
  return 0; //@line 26875
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 26877
 $$0 = 0; //@line 26878
 return $$0 | 0; //@line 26879
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27128
 if (($1 | 0) == ($2 | 0)) {
  $21 = $1 + 16 | 0; //@line 27131
  HEAP32[$21 >> 2] = 0; //@line 27132
  return;
 }
 $4 = $1 + 12 | 0; //@line 27135
 $5 = HEAP32[$4 >> 2] | 0; //@line 27136
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 27141
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 27142
   FUNCTION_TABLE_vi[$8 & 1023]($1); //@line 27143
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 665; //@line 27146
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 27148
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 27150
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 27152
    sp = STACKTOP; //@line 27153
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 27156
    break;
   }
  }
 } while (0);
 $12 = $2 + 12 | 0; //@line 27161
 $13 = HEAP32[$12 >> 2] | 0; //@line 27162
 do {
  if (!$13) {
   $20 = 0; //@line 27166
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 27169
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 27170
   FUNCTION_TABLE_vii[$16 & 31]($1, $2); //@line 27171
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 666; //@line 27174
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 27176
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 27178
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 27180
    sp = STACKTOP; //@line 27181
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 27184
    $20 = HEAP32[$12 >> 2] | 0; //@line 27186
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $20; //@line 27191
 $21 = $1 + 16 | 0; //@line 27192
 HEAP32[$21 >> 2] = 0; //@line 27193
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 16036
 STACKTOP = STACKTOP + 16 | 0; //@line 16037
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16037
 $$byval_copy = sp; //@line 16038
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16040
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16042
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16044
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16046
 $10 = HEAP32[$2 + 1328 >> 2] | 0; //@line 16048
 HEAP32[$4 >> 2] = 366; //@line 16049
 HEAP32[$4 + 4 >> 2] = 0; //@line 16051
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 16052
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 16053
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 16053
 $11 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($10, $2, $$byval_copy) | 0; //@line 16054
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 448; //@line 16057
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 16058
  HEAP32[$12 >> 2] = $6; //@line 16059
  $13 = $ReallocAsyncCtx5 + 8 | 0; //@line 16060
  HEAP32[$13 >> 2] = $2; //@line 16061
  $14 = $ReallocAsyncCtx5 + 12 | 0; //@line 16062
  HEAP32[$14 >> 2] = $8; //@line 16063
  sp = STACKTOP; //@line 16064
  STACKTOP = sp; //@line 16065
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 16068
 ___async_unwind = 0; //@line 16069
 HEAP32[$ReallocAsyncCtx5 >> 2] = 448; //@line 16070
 $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 16071
 HEAP32[$12 >> 2] = $6; //@line 16072
 $13 = $ReallocAsyncCtx5 + 8 | 0; //@line 16073
 HEAP32[$13 >> 2] = $2; //@line 16074
 $14 = $ReallocAsyncCtx5 + 12 | 0; //@line 16075
 HEAP32[$14 >> 2] = $8; //@line 16076
 sp = STACKTOP; //@line 16077
 STACKTOP = sp; //@line 16078
 return;
}
function __ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23754
 L1 : do {
  if (!(HEAP8[$0 + 16 >> 0] | 0)) {
   $$011 = 0; //@line 23760
  } else {
   $5 = HEAP32[$1 >> 2] | 0; //@line 23762
   if (!(HEAP32[$5 >> 2] | 0)) {
    $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 23768
    $12 = HEAP8[$1 + 4 >> 0] | 0; //@line 23770
    $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 23771
    $13 = FUNCTION_TABLE_iii[$10 & 31]($0, $12) | 0; //@line 23772
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 618; //@line 23775
     sp = STACKTOP; //@line 23776
     return 0; //@line 23777
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 23779
     return ($13 ? 3 : 0) | 0; //@line 23781
    }
   }
   $16 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 23786
   $18 = HEAP8[$1 + 4 >> 0] | 0; //@line 23788
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 23789
   $19 = FUNCTION_TABLE_iiii[$16 & 15]($0, $5, $18) | 0; //@line 23790
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 619; //@line 23793
    sp = STACKTOP; //@line 23794
    return 0; //@line 23795
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 23797
   switch ($19 | 0) {
   case 0:
    {
     $$011 = 3; //@line 23800
     break L1;
     break;
    }
   case -1004:
    {
     $$011 = 2; //@line 23805
     break L1;
     break;
    }
   case -1005:
    {
     $$011 = 1; //@line 23810
     break L1;
     break;
    }
   case -1006:
    {
     $$011 = 0; //@line 23815
     break L1;
     break;
    }
   default:
    {
     $$011 = 0; //@line 23820
     break L1;
    }
   }
  }
 } while (0);
 return $$011 | 0; //@line 23826
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_440($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29762
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29764
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29766
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29768
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29770
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29772
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29774
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29776
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29780
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29782
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29784
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29786
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 29788
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 29790
 $29 = HEAP32[HEAP32[HEAP32[$0 + 32 >> 2] >> 2] >> 2] | 0; //@line 29792
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 29793
 FUNCTION_TABLE_vii[$29 & 31]($18, $20); //@line 29794
 if (!___async) {
  ___async_unwind = 0; //@line 29797
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 473; //@line 29799
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 29801
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 29803
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 29805
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $22; //@line 29807
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $24; //@line 29809
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $26; //@line 29811
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $28; //@line 29813
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $8; //@line 29815
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $10; //@line 29817
 HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $12; //@line 29819
 HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $14; //@line 29821
 sp = STACKTOP; //@line 29822
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_439($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29694
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29696
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29698
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29700
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29702
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29704
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29706
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29708
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29710
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29712
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29714
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29716
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29718
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 29720
 $29 = HEAP32[HEAP32[HEAP32[$0 + 56 >> 2] >> 2] >> 2] | 0; //@line 29724
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 29725
 FUNCTION_TABLE_vii[$29 & 31]($24, $26); //@line 29726
 if (!___async) {
  ___async_unwind = 0; //@line 29729
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 29731
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $4; //@line 29733
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 29735
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $2; //@line 29737
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 29739
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $18; //@line 29741
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $20; //@line 29743
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $22; //@line 29745
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $8; //@line 29747
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $10; //@line 29749
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $12; //@line 29751
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $14; //@line 29753
 sp = STACKTOP; //@line 29754
 return;
}
function _mbedtls_cipher_cmac_starts($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2784
 if (!$0) {
  $$0 = -24832; //@line 2787
  return $$0 | 0; //@line 2788
 }
 if (($1 | 0) == 0 | (HEAP32[$0 >> 2] | 0) == 0) {
  $$0 = -24832; //@line 2795
  return $$0 | 0; //@line 2796
 }
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2798
 $7 = _mbedtls_cipher_setkey($0, $1, $2, 1) | 0; //@line 2799
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 689; //@line 2802
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2804
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2806
  sp = STACKTOP; //@line 2807
  return 0; //@line 2808
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2810
 if ($7 | 0) {
  $$0 = $7; //@line 2813
  return $$0 | 0; //@line 2814
 }
 switch (HEAP32[HEAP32[$0 >> 2] >> 2] | 0) {
 case 36:
 case 4:
 case 3:
 case 2:
  {
   break;
  }
 default:
  {
   $$0 = -24832; //@line 2823
   return $$0 | 0; //@line 2824
  }
 }
 $13 = _calloc(1, 36) | 0; //@line 2827
 if (!$13) {
  $$0 = -24960; //@line 2830
  return $$0 | 0; //@line 2831
 }
 HEAP32[$0 + 64 >> 2] = $13; //@line 2834
 HEAP8[$13 >> 0] = 0; //@line 2836
 HEAP8[$13 + 1 >> 0] = 0; //@line 2838
 HEAP8[$13 + 2 >> 0] = 0; //@line 2840
 HEAP8[$13 + 3 >> 0] = 0; //@line 2842
 HEAP8[$13 + 4 >> 0] = 0; //@line 2844
 HEAP8[$13 + 5 >> 0] = 0; //@line 2846
 HEAP8[$13 + 6 >> 0] = 0; //@line 2848
 HEAP8[$13 + 7 >> 0] = 0; //@line 2850
 HEAP8[$13 + 8 >> 0] = 0; //@line 2852
 HEAP8[$13 + 9 >> 0] = 0; //@line 2854
 HEAP8[$13 + 10 >> 0] = 0; //@line 2856
 HEAP8[$13 + 11 >> 0] = 0; //@line 2858
 HEAP8[$13 + 12 >> 0] = 0; //@line 2860
 HEAP8[$13 + 13 >> 0] = 0; //@line 2862
 HEAP8[$13 + 14 >> 0] = 0; //@line 2864
 HEAP8[$13 + 15 >> 0] = 0; //@line 2865
 $$0 = 0; //@line 2866
 return $$0 | 0; //@line 2867
}
function _mbedtls_ccm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $18 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1552
 $4 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 1553
 if (!$4) {
  $$0 = -13; //@line 1556
  return $$0 | 0; //@line 1557
 }
 if ((HEAP32[$4 + 24 >> 2] | 0) != 16) {
  $$0 = -13; //@line 1563
  return $$0 | 0; //@line 1564
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1566
 _mbedtls_cipher_free($0); //@line 1567
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 673; //@line 1570
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 1572
  HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 1574
  HEAP32[$AsyncCtx7 + 12 >> 2] = $2; //@line 1576
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 1578
  sp = STACKTOP; //@line 1579
  return 0; //@line 1580
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 1582
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 1583
 $13 = _mbedtls_cipher_setup($0, $4) | 0; //@line 1584
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 674; //@line 1587
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 1589
  HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 1591
  HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 1593
  sp = STACKTOP; //@line 1594
  return 0; //@line 1595
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 1597
 if ($13 | 0) {
  $$0 = $13; //@line 1600
  return $$0 | 0; //@line 1601
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1603
 $18 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 1604
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 675; //@line 1607
  sp = STACKTOP; //@line 1608
  return 0; //@line 1609
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1611
 $$0 = $18; //@line 1612
 return $$0 | 0; //@line 1613
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_302($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 12168
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 12170
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12172
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12174
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12176
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12178
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12180
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12182
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12184
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12186
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12188
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12190
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12192
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(56) | 0; //@line 12193
 __ZN4mbed5TimerC2Ev($4); //@line 12194
 if (!___async) {
  ___async_unwind = 0; //@line 12197
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 99; //@line 12199
 HEAP16[$ReallocAsyncCtx10 + 4 >> 1] = $2; //@line 12201
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $6; //@line 12203
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $16; //@line 12205
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $4; //@line 12207
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $4; //@line 12209
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $8; //@line 12211
 HEAP32[$ReallocAsyncCtx10 + 28 >> 2] = $10; //@line 12213
 HEAP32[$ReallocAsyncCtx10 + 32 >> 2] = $12; //@line 12215
 HEAP32[$ReallocAsyncCtx10 + 36 >> 2] = $14; //@line 12217
 HEAP32[$ReallocAsyncCtx10 + 40 >> 2] = $18; //@line 12219
 HEAP32[$ReallocAsyncCtx10 + 44 >> 2] = $20; //@line 12221
 HEAP32[$ReallocAsyncCtx10 + 48 >> 2] = $22; //@line 12223
 HEAP32[$ReallocAsyncCtx10 + 52 >> 2] = $24; //@line 12225
 sp = STACKTOP; //@line 12226
 return;
}
function _main__async_cb_135($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 112
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 116
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 118
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(23528, 23536) | 0; //@line 121
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(23528) | 0) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 125
  _puts(15731) | 0; //@line 126
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 761; //@line 129
   sp = STACKTOP; //@line 130
   return;
  }
  ___async_unwind = 0; //@line 133
  HEAP32[$ReallocAsyncCtx6 >> 2] = 761; //@line 134
  sp = STACKTOP; //@line 135
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(23528, 5) | 0; //@line 138
 HEAP8[$4 >> 0] = 0; //@line 139
 HEAP32[$4 + 4 >> 2] = 15592; //@line 141
 HEAP32[$4 + 8 >> 2] = 15765; //@line 143
 HEAP32[$4 + 12 >> 2] = 15773; //@line 145
 HEAP8[$4 + 16 >> 0] = 3; //@line 147
 $15 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(23528, $4) | 0; //@line 148
 switch ($15 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$6 >> 2] = $15; //@line 154
   _printf(15789, $6) | 0; //@line 155
   HEAP32[___async_retval >> 2] = -1; //@line 157
   return;
  }
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 161
 _puts(15818) | 0; //@line 162
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 762; //@line 165
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 166
  HEAP32[$16 >> 2] = $4; //@line 167
  sp = STACKTOP; //@line 168
  return;
 }
 ___async_unwind = 0; //@line 171
 HEAP32[$ReallocAsyncCtx5 >> 2] = 762; //@line 172
 $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 173
 HEAP32[$16 >> 2] = $4; //@line 174
 sp = STACKTOP; //@line 175
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 503
 STACKTOP = STACKTOP + 16 | 0; //@line 504
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 504
 $$byval_copy = sp; //@line 505
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 507
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 509
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 511
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 513
 $10 = HEAP32[$2 + 1328 >> 2] | 0; //@line 515
 HEAP32[$4 >> 2] = 366; //@line 516
 HEAP32[$4 + 4 >> 2] = 0; //@line 518
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 519
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 520
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 520
 $11 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($10, $2, $$byval_copy) | 0; //@line 521
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 569; //@line 524
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 525
  HEAP32[$12 >> 2] = $6; //@line 526
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 527
  HEAP32[$13 >> 2] = $2; //@line 528
  $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 529
  HEAP32[$14 >> 2] = $8; //@line 530
  sp = STACKTOP; //@line 531
  STACKTOP = sp; //@line 532
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 535
 ___async_unwind = 0; //@line 536
 HEAP32[$ReallocAsyncCtx4 >> 2] = 569; //@line 537
 $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 538
 HEAP32[$12 >> 2] = $6; //@line 539
 $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 540
 HEAP32[$13 >> 2] = $2; //@line 541
 $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 542
 HEAP32[$14 >> 2] = $8; //@line 543
 sp = STACKTOP; //@line 544
 STACKTOP = sp; //@line 545
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_248($0) {
 $0 = $0 | 0;
 var $$phi$trans$insert = 0, $$pre10 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 8626
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8630
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8632
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8634
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8636
 $$phi$trans$insert = (HEAP32[$0 + 4 >> 2] | 0) + 12 | 0; //@line 8637
 $$pre10 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 8638
 if (!$$pre10) {
  HEAP32[$4 >> 2] = 0; //@line 8641
  _gpio_irq_set($10 + 28 | 0, 2, 0); //@line 8643
  return;
 }
 $13 = HEAP32[$$pre10 + 4 >> 2] | 0; //@line 8647
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 8648
 FUNCTION_TABLE_vii[$13 & 31]($6, $8); //@line 8649
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 166; //@line 8652
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 8653
  HEAP32[$14 >> 2] = $$phi$trans$insert; //@line 8654
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 8655
  HEAP32[$15 >> 2] = $4; //@line 8656
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 8657
  HEAP32[$16 >> 2] = $8; //@line 8658
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 8659
  HEAP32[$17 >> 2] = $10; //@line 8660
  sp = STACKTOP; //@line 8661
  return;
 }
 ___async_unwind = 0; //@line 8664
 HEAP32[$ReallocAsyncCtx4 >> 2] = 166; //@line 8665
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 8666
 HEAP32[$14 >> 2] = $$phi$trans$insert; //@line 8667
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 8668
 HEAP32[$15 >> 2] = $4; //@line 8669
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 8670
 HEAP32[$16 >> 2] = $8; //@line 8671
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 8672
 HEAP32[$17 >> 2] = $10; //@line 8673
 sp = STACKTOP; //@line 8674
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_232($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 7820
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7824
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7826
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7828
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(16) | 0; //@line 7831
  _mbed_assert_internal(13142, 12226, 909); //@line 7832
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 225; //@line 7835
   $10 = $ReallocAsyncCtx10 + 4 | 0; //@line 7836
   HEAP32[$10 >> 2] = $4; //@line 7837
   $11 = $ReallocAsyncCtx10 + 8 | 0; //@line 7838
   HEAP32[$11 >> 2] = $6; //@line 7839
   $12 = $ReallocAsyncCtx10 + 12 | 0; //@line 7840
   HEAP32[$12 >> 2] = $8; //@line 7841
   sp = STACKTOP; //@line 7842
   return;
  }
  ___async_unwind = 0; //@line 7845
  HEAP32[$ReallocAsyncCtx10 >> 2] = 225; //@line 7846
  $10 = $ReallocAsyncCtx10 + 4 | 0; //@line 7847
  HEAP32[$10 >> 2] = $4; //@line 7848
  $11 = $ReallocAsyncCtx10 + 8 | 0; //@line 7849
  HEAP32[$11 >> 2] = $6; //@line 7850
  $12 = $ReallocAsyncCtx10 + 12 | 0; //@line 7851
  HEAP32[$12 >> 2] = $8; //@line 7852
  sp = STACKTOP; //@line 7853
  return;
 }
 if (!(HEAP8[$4 + 11 >> 0] | 0)) {
  return;
 }
 $16 = HEAP8[$6 >> 0] | 0; //@line 7862
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 7863
 __ZN12LoRaWANStack9handle_txEhPKhth($8, $16, 0, 0, 2) | 0; //@line 7864
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 226; //@line 7867
  sp = STACKTOP; //@line 7868
  return;
 }
 ___async_unwind = 0; //@line 7871
 HEAP32[$ReallocAsyncCtx7 >> 2] = 226; //@line 7872
 sp = STACKTOP; //@line 7873
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $14 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30025
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30029
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30035
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30039
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  return;
 }
 $17 = (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) != 0; //@line 30047
 $19 = HEAP32[$4 + 1108 >> 2] | 0; //@line 30049
 _printf(13258, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 30050
 _printf(13334, $10) | 0; //@line 30051
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 30052
 _putchar(10) | 0; //@line 30053
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 386; //@line 30056
  $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 30057
  HEAP32[$20 >> 2] = $14; //@line 30058
  $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 30059
  $$expand_i1_val = $17 & 1; //@line 30060
  HEAP8[$21 >> 0] = $$expand_i1_val; //@line 30061
  $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 30062
  HEAP32[$22 >> 2] = $19; //@line 30063
  $23 = $ReallocAsyncCtx2 + 16 | 0; //@line 30064
  HEAP32[$23 >> 2] = $4; //@line 30065
  sp = STACKTOP; //@line 30066
  return;
 }
 ___async_unwind = 0; //@line 30069
 HEAP32[$ReallocAsyncCtx2 >> 2] = 386; //@line 30070
 $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 30071
 HEAP32[$20 >> 2] = $14; //@line 30072
 $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 30073
 $$expand_i1_val = $17 & 1; //@line 30074
 HEAP8[$21 >> 0] = $$expand_i1_val; //@line 30075
 $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 30076
 HEAP32[$22 >> 2] = $19; //@line 30077
 $23 = $ReallocAsyncCtx2 + 16 | 0; //@line 30078
 HEAP32[$23 >> 2] = $4; //@line 30079
 sp = STACKTOP; //@line 30080
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_61($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30533
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30535
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30539
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30541
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30543
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30545
 $13 = HEAP32[$2 >> 2] | 0; //@line 30546
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 52 >> 2] | 0; //@line 30549
 $18 = HEAP16[HEAP32[$0 + 8 >> 2] >> 1] & 255; //@line 30551
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 30552
 $19 = FUNCTION_TABLE_iiii[$16 & 15]($13, $6, $18) | 0; //@line 30553
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 636; //@line 30556
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 30557
  HEAP32[$20 >> 2] = $8; //@line 30558
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 30559
  HEAP32[$21 >> 2] = $2; //@line 30560
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 30561
  HEAP32[$22 >> 2] = $10; //@line 30562
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 30563
  HEAP32[$23 >> 2] = $12; //@line 30564
  sp = STACKTOP; //@line 30565
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 30569
 ___async_unwind = 0; //@line 30570
 HEAP32[$ReallocAsyncCtx6 >> 2] = 636; //@line 30571
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 30572
 HEAP32[$20 >> 2] = $8; //@line 30573
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 30574
 HEAP32[$21 >> 2] = $2; //@line 30575
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 30576
 HEAP32[$22 >> 2] = $10; //@line 30577
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 30578
 HEAP32[$23 >> 2] = $12; //@line 30579
 sp = STACKTOP; //@line 30580
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_168($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2291
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2295
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2297
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2299
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2301
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2303
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2305
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2307
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 2310
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 2311
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 2327
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 2328
    if (!___async) {
     ___async_unwind = 0; //@line 2331
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 810; //@line 2333
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 2335
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 2337
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 2339
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 2341
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 2343
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 2345
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 2347
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 2349
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 2352
    sp = STACKTOP; //@line 2353
    return;
   }
  }
 } while (0);
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_125($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 36989
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36991
 $3 = $2 + 1176 | 0; //@line 36992
 HEAP32[$3 >> 2] = 10108; //@line 36993
 __ZN4mbed6Ticker6detachEv($3); //@line 36994
 $5 = HEAP32[$2 + 1228 >> 2] | 0; //@line 36996
 if (!$5) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 36999
  __ZN4mbed10TimerEventD2Ev($3); //@line 37000
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 116; //@line 37003
   $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 37004
   HEAP32[$12 >> 2] = $2; //@line 37005
   sp = STACKTOP; //@line 37006
   return;
  }
  ___async_unwind = 0; //@line 37009
  HEAP32[$ReallocAsyncCtx7 >> 2] = 116; //@line 37010
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 37011
  HEAP32[$12 >> 2] = $2; //@line 37012
  sp = STACKTOP; //@line 37013
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 37018
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 37019
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1216 | 0); //@line 37020
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 115; //@line 37023
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 37024
   HEAP32[$10 >> 2] = $2; //@line 37025
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 37026
   HEAP32[$11 >> 2] = $3; //@line 37027
   sp = STACKTOP; //@line 37028
   return;
  }
  ___async_unwind = 0; //@line 37031
  HEAP32[$ReallocAsyncCtx2 >> 2] = 115; //@line 37032
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 37033
  HEAP32[$10 >> 2] = $2; //@line 37034
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 37035
  HEAP32[$11 >> 2] = $3; //@line 37036
  sp = STACKTOP; //@line 37037
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_124($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 36934
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36936
 $3 = $2 + 1112 | 0; //@line 36937
 HEAP32[$3 >> 2] = 10108; //@line 36938
 __ZN4mbed6Ticker6detachEv($3); //@line 36939
 $5 = HEAP32[$2 + 1164 >> 2] | 0; //@line 36941
 if (!$5) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 36944
  __ZN4mbed10TimerEventD2Ev($3); //@line 36945
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 118; //@line 36948
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 36949
   HEAP32[$12 >> 2] = $2; //@line 36950
   sp = STACKTOP; //@line 36951
   return;
  }
  ___async_unwind = 0; //@line 36954
  HEAP32[$ReallocAsyncCtx6 >> 2] = 118; //@line 36955
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 36956
  HEAP32[$12 >> 2] = $2; //@line 36957
  sp = STACKTOP; //@line 36958
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 36963
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 36964
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1152 | 0); //@line 36965
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 117; //@line 36968
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 36969
   HEAP32[$10 >> 2] = $2; //@line 36970
   $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 36971
   HEAP32[$11 >> 2] = $3; //@line 36972
   sp = STACKTOP; //@line 36973
   return;
  }
  ___async_unwind = 0; //@line 36976
  HEAP32[$ReallocAsyncCtx3 >> 2] = 117; //@line 36977
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 36978
  HEAP32[$10 >> 2] = $2; //@line 36979
  $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 36980
  HEAP32[$11 >> 2] = $3; //@line 36981
  sp = STACKTOP; //@line 36982
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_123($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 36879
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36881
 $3 = $2 + 1048 | 0; //@line 36882
 HEAP32[$3 >> 2] = 10108; //@line 36883
 __ZN4mbed6Ticker6detachEv($3); //@line 36884
 $5 = HEAP32[$2 + 1100 >> 2] | 0; //@line 36886
 if (!$5) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 36889
  __ZN4mbed10TimerEventD2Ev($3); //@line 36890
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 120; //@line 36893
   $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 36894
   HEAP32[$12 >> 2] = $2; //@line 36895
   sp = STACKTOP; //@line 36896
   return;
  }
  ___async_unwind = 0; //@line 36899
  HEAP32[$ReallocAsyncCtx5 >> 2] = 120; //@line 36900
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 36901
  HEAP32[$12 >> 2] = $2; //@line 36902
  sp = STACKTOP; //@line 36903
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 36908
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 36909
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1088 | 0); //@line 36910
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 119; //@line 36913
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 36914
   HEAP32[$10 >> 2] = $3; //@line 36915
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 36916
   HEAP32[$11 >> 2] = $2; //@line 36917
   sp = STACKTOP; //@line 36918
   return;
  }
  ___async_unwind = 0; //@line 36921
  HEAP32[$ReallocAsyncCtx4 >> 2] = 119; //@line 36922
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 36923
  HEAP32[$10 >> 2] = $3; //@line 36924
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 36925
  HEAP32[$11 >> 2] = $2; //@line 36926
  sp = STACKTOP; //@line 36927
  return;
 }
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_355($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16717
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16719
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16721
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 16723
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16725
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16727
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16729
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16731
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16733
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16735
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16737
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16739
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 16741
 $27 = HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0; //@line 16744
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 16745
 FUNCTION_TABLE_vii[$27 & 31]($2, $4); //@line 16746
 if (!___async) {
  ___async_unwind = 0; //@line 16749
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 108; //@line 16751
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 16753
 HEAP8[$ReallocAsyncCtx + 8 >> 0] = $6; //@line 16755
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $8; //@line 16757
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $10; //@line 16759
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $12; //@line 16761
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $14; //@line 16763
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $16; //@line 16765
 HEAP32[$ReallocAsyncCtx + 32 >> 2] = $18; //@line 16767
 HEAP32[$ReallocAsyncCtx + 36 >> 2] = $20; //@line 16769
 HEAP32[$ReallocAsyncCtx + 40 >> 2] = $22; //@line 16771
 HEAP32[$ReallocAsyncCtx + 44 >> 2] = $24; //@line 16773
 sp = STACKTOP; //@line 16774
 return;
}
function __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 10699
 STACKTOP = STACKTOP + 16 | 0; //@line 10700
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10700
 $2 = $0 + 1876 | 0; //@line 10703
 if (!(HEAP32[$2 >> 2] | 0)) {
  _printf(12178, sp) | 0; //@line 10707
  _printf(12975, sp + 8 | 0) | 0; //@line 10708
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10709
  _putchar(10) | 0; //@line 10710
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 341; //@line 10713
   sp = STACKTOP; //@line 10714
   STACKTOP = sp; //@line 10715
   return 0; //@line 10715
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10717
  $$0 = -1012; //@line 10718
  STACKTOP = sp; //@line 10719
  return $$0 | 0; //@line 10719
 } else {
  $6 = HEAP32[$1 + 8 >> 2] | 0; //@line 10722
  $8 = HEAP32[$1 + 12 >> 2] | 0; //@line 10724
  $10 = HEAP32[$1 + 16 >> 2] | 0; //@line 10726
  HEAP8[$0 + 1936 >> 0] = 1; //@line 10728
  HEAP32[$0 + 1944 >> 2] = $6; //@line 10730
  HEAP32[$0 + 1948 >> 2] = $8; //@line 10732
  HEAP32[$0 + 1952 >> 2] = $10; //@line 10734
  HEAP32[$2 >> 2] = 3; //@line 10735
  $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10736
  $15 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 10737
  if (___async) {
   HEAP32[$AsyncCtx4 >> 2] = 342; //@line 10740
   sp = STACKTOP; //@line 10741
   STACKTOP = sp; //@line 10742
   return 0; //@line 10742
  }
  _emscripten_free_async_context($AsyncCtx4 | 0); //@line 10744
  $$0 = $15; //@line 10745
  STACKTOP = sp; //@line 10746
  return $$0 | 0; //@line 10746
 }
 return 0; //@line 10748
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_293($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 11402
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 11404
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11406
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11408
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11410
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11412
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11414
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11416
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11418
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11420
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11422
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11424
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11426
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(52) | 0; //@line 11427
 _wait_ms(1); //@line 11428
 if (!___async) {
  ___async_unwind = 0; //@line 11431
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 98; //@line 11433
 HEAP16[$ReallocAsyncCtx14 + 4 >> 1] = $2; //@line 11435
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $6; //@line 11437
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $4; //@line 11439
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $10; //@line 11441
 HEAP32[$ReallocAsyncCtx14 + 20 >> 2] = $12; //@line 11443
 HEAP32[$ReallocAsyncCtx14 + 24 >> 2] = $14; //@line 11445
 HEAP32[$ReallocAsyncCtx14 + 28 >> 2] = $16; //@line 11447
 HEAP32[$ReallocAsyncCtx14 + 32 >> 2] = $8; //@line 11449
 HEAP32[$ReallocAsyncCtx14 + 36 >> 2] = $18; //@line 11451
 HEAP32[$ReallocAsyncCtx14 + 40 >> 2] = $20; //@line 11453
 HEAP32[$ReallocAsyncCtx14 + 44 >> 2] = $22; //@line 11455
 HEAP32[$ReallocAsyncCtx14 + 48 >> 2] = $24; //@line 11457
 sp = STACKTOP; //@line 11458
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_156($0) {
 $0 = $0 | 0;
 var $$07$i = 0, $12 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 1523
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1525
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1527
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1531
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1535
 dest = $2; //@line 1538
 stop = dest + 50 | 0; //@line 1538
 do {
  HEAP8[dest >> 0] = 0; //@line 1538
  dest = dest + 1 | 0; //@line 1538
 } while ((dest | 0) < (stop | 0));
 $15 = __ZN16LoRaWANInterface7receiveEhPhti(23528, 15, $2, 50, 3) | 0; //@line 1539
 $16 = $15 << 16 >> 16; //@line 1540
 if ($15 << 16 >> 16 < 0) {
  HEAP32[$4 >> 2] = $16; //@line 1543
  _printf(16003, $4) | 0; //@line 1544
  return;
 }
 HEAP32[$8 >> 2] = 15; //@line 1547
 HEAP32[$8 + 4 >> 2] = $16; //@line 1549
 _printf(16030, $8) | 0; //@line 1550
 if ($15 << 16 >> 16) {
  $$07$i = 0; //@line 1553
  $21 = 0; //@line 1553
  do {
   HEAP32[$12 >> 2] = HEAPU8[$2 + $21 >> 0]; //@line 1558
   _printf(16069, $12) | 0; //@line 1559
   $$07$i = $$07$i + 1 << 24 >> 24; //@line 1560
   $21 = $$07$i & 255; //@line 1561
  } while (($21 | 0) < ($16 | 0));
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 1570
 _putchar(10) | 0; //@line 1571
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 770; //@line 1574
  $19 = $ReallocAsyncCtx + 4 | 0; //@line 1575
  HEAP32[$19 >> 2] = $2; //@line 1576
  sp = STACKTOP; //@line 1577
  return;
 }
 ___async_unwind = 0; //@line 1580
 HEAP32[$ReallocAsyncCtx >> 2] = 770; //@line 1581
 $19 = $ReallocAsyncCtx + 4 | 0; //@line 1582
 HEAP32[$19 >> 2] = $2; //@line 1583
 sp = STACKTOP; //@line 1584
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32576
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32578
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32580
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32582
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32584
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32586
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32588
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32590
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32592
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32594
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 32596
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 32598
 $25 = $4 + 1280 | 0; //@line 32599
 HEAP32[$25 >> 2] = 0; //@line 32600
 HEAP32[$25 + 4 >> 2] = 0; //@line 32600
 HEAP32[$25 + 8 >> 2] = 0; //@line 32600
 HEAP32[$25 + 12 >> 2] = 0; //@line 32600
 HEAP8[$4 + 1296 >> 0] = 1; //@line 32602
 HEAP32[$2 >> 2] = 684; //@line 32603
 HEAP32[$4 + 668 >> 2] = $6; //@line 32605
 HEAP32[$4 + 672 >> 2] = $8; //@line 32607
 HEAP32[$4 + 652 >> 2] = $10; //@line 32609
 HEAP32[$4 + 656 >> 2] = $12; //@line 32611
 HEAP32[$4 + 664 >> 2] = $14; //@line 32613
 HEAP32[$4 + 660 >> 2] = $16; //@line 32615
 HEAP32[$4 + 676 >> 2] = $18; //@line 32617
 HEAP32[$4 + 680 >> 2] = $20; //@line 32619
 HEAP32[$4 + 684 >> 2] = $22; //@line 32621
 HEAP32[$4 + 788 >> 2] = 0; //@line 32623
 if (($18 | 0) == -1) {
  $39 = _emscripten_asm_const_ii(7, $4 | 0) | 0; //@line 32626
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$24 >> 2] | 0, 1) | 0; //@line 32630
 $39 = _emscripten_asm_const_ii(7, $4 | 0) | 0; //@line 32631
 return;
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10940
 STACKTOP = STACKTOP + 16 | 0; //@line 10941
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10941
 $2 = sp; //@line 10942
 $3 = $1 & 255; //@line 10943
 HEAP8[$2 >> 0] = $3; //@line 10944
 $4 = $0 + 16 | 0; //@line 10945
 $5 = HEAP32[$4 >> 2] | 0; //@line 10946
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 10953
   label = 4; //@line 10954
  } else {
   $$0 = -1; //@line 10956
  }
 } else {
  $12 = $5; //@line 10959
  label = 4; //@line 10960
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 10964
   $10 = HEAP32[$9 >> 2] | 0; //@line 10965
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 10968
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 10975
     HEAP8[$10 >> 0] = $3; //@line 10976
     $$0 = $13; //@line 10977
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 10982
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10983
   $21 = FUNCTION_TABLE_iiii[$20 & 15]($0, $2, 1) | 0; //@line 10984
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 775; //@line 10987
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 10989
    sp = STACKTOP; //@line 10990
    STACKTOP = sp; //@line 10991
    return 0; //@line 10991
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 10993
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 10998
   } else {
    $$0 = -1; //@line 11000
   }
  }
 } while (0);
 STACKTOP = sp; //@line 11004
 return $$0 | 0; //@line 11004
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_33($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 28038
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28040
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28042
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28044
 $7 = HEAP32[$2 >> 2] | 0; //@line 28045
 $9 = $6 + 12 | 0; //@line 28047
 HEAP32[$6 >> 2] = 540; //@line 28048
 HEAP32[$6 + 4 >> 2] = 0; //@line 28050
 HEAP32[$6 + 8 >> 2] = $4; //@line 28052
 HEAP32[$9 >> 2] = 848; //@line 28053
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 28054
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($7, $4 + 1076 | 0, $6); //@line 28055
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 541; //@line 28058
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 28059
  HEAP32[$10 >> 2] = $9; //@line 28060
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 28061
  HEAP32[$11 >> 2] = $2; //@line 28062
  $12 = $ReallocAsyncCtx6 + 12 | 0; //@line 28063
  HEAP32[$12 >> 2] = $4; //@line 28064
  $13 = $ReallocAsyncCtx6 + 16 | 0; //@line 28065
  HEAP32[$13 >> 2] = $6; //@line 28066
  sp = STACKTOP; //@line 28067
  return;
 }
 ___async_unwind = 0; //@line 28070
 HEAP32[$ReallocAsyncCtx6 >> 2] = 541; //@line 28071
 $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 28072
 HEAP32[$10 >> 2] = $9; //@line 28073
 $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 28074
 HEAP32[$11 >> 2] = $2; //@line 28075
 $12 = $ReallocAsyncCtx6 + 12 | 0; //@line 28076
 HEAP32[$12 >> 2] = $4; //@line 28077
 $13 = $ReallocAsyncCtx6 + 16 | 0; //@line 28078
 HEAP32[$13 >> 2] = $6; //@line 28079
 sp = STACKTOP; //@line 28080
 return;
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 50
 STACKTOP = STACKTOP + 16 | 0; //@line 51
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 51
 $vararg_buffer1 = sp + 8 | 0; //@line 52
 $vararg_buffer = sp; //@line 53
 HEAP32[$0 + 788 >> 2] = $1; //@line 55
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 58
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 59
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 60
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 50; //@line 63
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 65
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 67
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 69
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 71
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer1; //@line 73
  sp = STACKTOP; //@line 74
  STACKTOP = sp; //@line 75
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 77
 $11 = $0 + 689 | 0; //@line 78
 HEAP8[$11 >> 0] = 0; //@line 79
 _printf(10904, $vararg_buffer) | 0; //@line 80
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$11 >> 0]; //@line 83
 _printf(11079, $vararg_buffer1) | 0; //@line 84
 $AsyncCtx4 = _emscripten_alloc_async_context(8, sp) | 0; //@line 85
 _putchar(10) | 0; //@line 86
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 51; //@line 89
  HEAP32[$AsyncCtx4 + 4 >> 2] = $0; //@line 91
  sp = STACKTOP; //@line 92
  STACKTOP = sp; //@line 93
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx4 | 0); //@line 95
  HEAP8[$0 + 688 >> 0] = 0; //@line 97
  STACKTOP = sp; //@line 98
  return;
 }
}
function _equeue_cancel__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18219
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18221
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18223
 $7 = $2 + 156 | 0; //@line 18224
 _equeue_mutex_lock($7); //@line 18225
 $8 = $2 + 24 | 0; //@line 18226
 $9 = HEAP32[$8 >> 2] | 0; //@line 18227
 L3 : do {
  if (!$9) {
   $$02329$i$i = $8; //@line 18231
   label = 9; //@line 18232
  } else {
   $11 = HEAP32[$6 >> 2] | 0; //@line 18234
   $$025$i$i = $8; //@line 18235
   $13 = $9; //@line 18235
   while (1) {
    $12 = HEAP32[$13 >> 2] | 0; //@line 18237
    if ($12 >>> 0 >= $11 >>> 0) {
     break;
    }
    $15 = $13 + 8 | 0; //@line 18242
    $16 = HEAP32[$15 >> 2] | 0; //@line 18243
    if (!$16) {
     $$02329$i$i = $15; //@line 18246
     label = 9; //@line 18247
     break L3;
    } else {
     $$025$i$i = $15; //@line 18250
     $13 = $16; //@line 18250
    }
   }
   if (($12 | 0) == ($11 | 0)) {
    HEAP32[$4 + -24 >> 2] = $13; //@line 18256
    $$02330$i$i = $$025$i$i; //@line 18259
    $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 18259
   } else {
    $$02329$i$i = $$025$i$i; //@line 18261
    label = 9; //@line 18262
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  HEAP32[$4 + -24 >> 2] = 0; //@line 18268
  $$02330$i$i = $$02329$i$i; //@line 18269
  $$sink$in$i$i = $$02329$i$i; //@line 18269
 }
 HEAP32[$4 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 18273
 HEAP32[$$02330$i$i >> 2] = $6; //@line 18274
 _equeue_mutex_unlock($7); //@line 18275
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26319
 $1 = $0 + 4 | 0; //@line 26320
 $2 = HEAP32[$1 >> 2] | 0; //@line 26321
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 26324
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 26325
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 26326
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 657; //@line 26329
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 26331
  sp = STACKTOP; //@line 26332
  return 0; //@line 26333
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 26335
 $7 = HEAP32[$1 >> 2] | 0; //@line 26336
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 26339
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 26340
 $11 = FUNCTION_TABLE_ii[$10 & 15]($7) | 0; //@line 26341
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 658; //@line 26344
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 26346
  sp = STACKTOP; //@line 26347
  return 0; //@line 26348
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 26350
 $13 = HEAP32[$1 >> 2] | 0; //@line 26351
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 76 >> 2] | 0; //@line 26354
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 26355
 FUNCTION_TABLE_vi[$16 & 1023]($13); //@line 26356
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 659; //@line 26359
  HEAP32[$AsyncCtx5 + 4 >> 2] = $11; //@line 26361
  sp = STACKTOP; //@line 26362
  return 0; //@line 26363
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 26365
  return $11 | 0; //@line 26366
 }
 return 0; //@line 26368
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $17 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 6186
 HEAP32[$0 >> 2] = 724; //@line 6187
 HEAP8[$0 + 4 >> 0] = 0; //@line 6189
 $4 = __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 6191
 $7 = HEAP32[(HEAP32[$1 >> 2] | 0) + 72 >> 2] | 0; //@line 6194
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 6195
 FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 6196
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 193; //@line 6199
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6201
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 6203
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 6205
  sp = STACKTOP; //@line 6206
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6209
 $12 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0; //@line 6211
 $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6212
 FUNCTION_TABLE_vii[$12 & 31]($1, $4); //@line 6213
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 194; //@line 6216
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 6218
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 6220
  sp = STACKTOP; //@line 6221
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6224
 $17 = HEAP32[(HEAP32[$1 >> 2] | 0) + 76 >> 2] | 0; //@line 6227
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6228
 FUNCTION_TABLE_vi[$17 & 1023]($1); //@line 6229
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 195; //@line 6232
  sp = STACKTOP; //@line 6233
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6236
  return;
 }
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16572
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16574
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 16576
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16578
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16580
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16582
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16584
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16586
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16588
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16590
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16592
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16594
 $25 = HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] | 0; //@line 16597
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 16598
 FUNCTION_TABLE_viiiiiiiiiiiiii[$25 & 1]($2, 0, $4, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $6); //@line 16599
 if (!___async) {
  ___async_unwind = 0; //@line 16602
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 109; //@line 16604
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 16606
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 16608
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 16610
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 16612
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $14; //@line 16614
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $16; //@line 16616
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $18; //@line 16618
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $20; //@line 16620
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $22; //@line 16622
 sp = STACKTOP; //@line 16623
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_65($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30803
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30807
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30809
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30811
 if (!$AsyncRetVal) {
  $10 = HEAP16[$0 + 4 >> 1] & 255; //@line 30815
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 30816
  $11 = _mbedtls_cipher_cmac_update(22892, $4, $10) | 0; //@line 30817
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 608; //@line 30820
   $12 = $ReallocAsyncCtx + 4 | 0; //@line 30821
   HEAP32[$12 >> 2] = $6; //@line 30822
   sp = STACKTOP; //@line 30823
   return;
  }
  HEAP32[___async_retval >> 2] = $11; //@line 30827
  ___async_unwind = 0; //@line 30828
  HEAP32[$ReallocAsyncCtx >> 2] = 608; //@line 30829
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 30830
  HEAP32[$12 >> 2] = $6; //@line 30831
  sp = STACKTOP; //@line 30832
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 30835
  _mbedtls_cipher_free(22892); //@line 30836
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 610; //@line 30839
   $14 = $ReallocAsyncCtx5 + 4 | 0; //@line 30840
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 30841
   sp = STACKTOP; //@line 30842
   return;
  }
  ___async_unwind = 0; //@line 30845
  HEAP32[$ReallocAsyncCtx5 >> 2] = 610; //@line 30846
  $14 = $ReallocAsyncCtx5 + 4 | 0; //@line 30847
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 30848
  sp = STACKTOP; //@line 30849
  return;
 }
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_241($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $29 = 0, $5 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 8353
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8355
 $5 = (HEAP8[$2 + 373 >> 0] | 0) != 0; //@line 8361
 if (HEAP32[$2 + 364 >> 2] | 0) {
  if ($5) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 8367
  }
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 8372
  $29 = $2 + 944 | 0; //@line 8373
  HEAP8[$29 >> 0] = HEAP8[$29 >> 0] | 32; //@line 8376
  return;
 }
 if ($5) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 5; //@line 8383
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 5; //@line 8388
 $12 = $2 + 356 | 0; //@line 8389
 $16 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$12 >> 2] | 0, HEAP32[$2 + 980 >> 2] | 0) | 0; //@line 8393
 if ($16 >>> 0 < (HEAP32[$2 + 976 >> 2] | 0) >>> 0) {
  return;
 }
 $20 = HEAP32[$12 >> 2] | 0; //@line 8400
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 8402
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($20, $2 + 1056 | 0); //@line 8403
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 442; //@line 8406
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 8407
  HEAP32[$22 >> 2] = $2; //@line 8408
  sp = STACKTOP; //@line 8409
  return;
 }
 ___async_unwind = 0; //@line 8412
 HEAP32[$ReallocAsyncCtx5 >> 2] = 442; //@line 8413
 $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 8414
 HEAP32[$22 >> 2] = $2; //@line 8415
 sp = STACKTOP; //@line 8416
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13939
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 13941
 $4 = HEAP16[$0 + 20 >> 1] | 0; //@line 13943
 $6 = HEAP16[$0 + 22 >> 1] | 0; //@line 13945
 $8 = HEAP8[$0 + 24 >> 0] | 0; //@line 13947
 $9 = $0 + 12 | 0; //@line 13948
 $10 = HEAP32[$9 >> 2] | 0; //@line 13949
 do {
  if (!$10) {
   $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 13953
   _mbed_assert_internal(15352, 15357, 2830); //@line 13954
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 424; //@line 13957
    HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 13959
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 13961
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 13963
    HEAP16[$AsyncCtx2 + 16 >> 1] = $4; //@line 13965
    HEAP16[$AsyncCtx2 + 18 >> 1] = $6; //@line 13967
    HEAP8[$AsyncCtx2 + 20 >> 0] = $8; //@line 13969
    sp = STACKTOP; //@line 13970
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 13973
    $19 = HEAP32[$9 >> 2] | 0; //@line 13975
    break;
   }
  } else {
   $19 = $10; //@line 13979
  }
 } while (0);
 $18 = HEAP32[$19 >> 2] | 0; //@line 13982
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13983
 FUNCTION_TABLE_viiiii[$18 & 7]($0, $2, $4, $6, $8); //@line 13984
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 425; //@line 13987
  sp = STACKTOP; //@line 13988
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13991
  return;
 }
}
function _fflush__async_cb_183($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3569
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3571
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 3573
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 3577
  } else {
   $$02327 = $$02325; //@line 3579
   $$02426 = $AsyncRetVal; //@line 3579
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 3586
    } else {
     $16 = 0; //@line 3588
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 3600
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 3603
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 3606
     break L3;
    } else {
     $$02327 = $$023; //@line 3609
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 3612
   $13 = ___fflush_unlocked($$02327) | 0; //@line 3613
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 3617
    ___async_unwind = 0; //@line 3618
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 779; //@line 3620
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 3622
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 3624
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 3626
   sp = STACKTOP; //@line 3627
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 3631
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 3633
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_12($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 17328
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17330
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17332
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17334
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17336
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 17339
  $9 = _mbedtls_cipher_cmac_update(22892, $2, $4) | 0; //@line 17340
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 603; //@line 17343
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 17344
   HEAP32[$10 >> 2] = $6; //@line 17345
   sp = STACKTOP; //@line 17346
   return;
  }
  HEAP32[___async_retval >> 2] = $9; //@line 17350
  ___async_unwind = 0; //@line 17351
  HEAP32[$ReallocAsyncCtx >> 2] = 603; //@line 17352
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 17353
  HEAP32[$10 >> 2] = $6; //@line 17354
  sp = STACKTOP; //@line 17355
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 17358
  _mbedtls_cipher_free(22892); //@line 17359
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 605; //@line 17362
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 17363
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 17364
   sp = STACKTOP; //@line 17365
   return;
  }
  ___async_unwind = 0; //@line 17368
  HEAP32[$ReallocAsyncCtx6 >> 2] = 605; //@line 17369
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 17370
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 17371
  sp = STACKTOP; //@line 17372
  return;
 }
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 12995
 STACKTOP = STACKTOP + 16 | 0; //@line 12996
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12996
 $$byval_copy = sp; //@line 12997
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12999
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13001
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13003
 $8 = HEAP32[$2 + 1328 >> 2] | 0; //@line 13005
 HEAP32[$4 >> 2] = 366; //@line 13006
 HEAP32[$4 + 4 >> 2] = 0; //@line 13008
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 13009
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 13010
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 13010
 $9 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($8, $2, $$byval_copy) | 0; //@line 13011
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 459; //@line 13014
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 13015
  HEAP32[$10 >> 2] = $6; //@line 13016
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 13017
  HEAP32[$11 >> 2] = $2; //@line 13018
  sp = STACKTOP; //@line 13019
  STACKTOP = sp; //@line 13020
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 13023
 ___async_unwind = 0; //@line 13024
 HEAP32[$ReallocAsyncCtx4 >> 2] = 459; //@line 13025
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 13026
 HEAP32[$10 >> 2] = $6; //@line 13027
 $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 13028
 HEAP32[$11 >> 2] = $2; //@line 13029
 sp = STACKTOP; //@line 13030
 STACKTOP = sp; //@line 13031
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $14 = 0, $17 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26185
 $2 = $0 + 4 | 0; //@line 26186
 $3 = HEAP32[$2 >> 2] | 0; //@line 26187
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 72 >> 2] | 0; //@line 26190
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 26191
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 26192
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 650; //@line 26195
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 26197
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 26200
  sp = STACKTOP; //@line 26201
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 26204
 $9 = HEAP32[$2 >> 2] | 0; //@line 26205
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 48 >> 2] | 0; //@line 26208
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 26209
 FUNCTION_TABLE_vii[$12 & 31]($9, $1); //@line 26210
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 651; //@line 26213
  HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 26215
  sp = STACKTOP; //@line 26216
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 26219
 $14 = HEAP32[$2 >> 2] | 0; //@line 26220
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 76 >> 2] | 0; //@line 26223
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 26224
 FUNCTION_TABLE_vi[$17 & 1023]($14); //@line 26225
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 652; //@line 26228
  sp = STACKTOP; //@line 26229
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 26232
  return;
 }
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_337($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 15869
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15873
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15875
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15877
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15879
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15881
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15883
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 15886
 _equeue_event_delay($4, $6); //@line 15887
 _equeue_event_dtor($4, 375); //@line 15888
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 15889
 $16 = _equeue_post($8, 376, $4) | 0; //@line 15890
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 669; //@line 15893
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 15894
  HEAP32[$17 >> 2] = $10; //@line 15895
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 15896
  HEAP32[$18 >> 2] = $12; //@line 15897
  $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 15898
  HEAP32[$19 >> 2] = $14; //@line 15899
  sp = STACKTOP; //@line 15900
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 15904
 ___async_unwind = 0; //@line 15905
 HEAP32[$ReallocAsyncCtx4 >> 2] = 669; //@line 15906
 $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 15907
 HEAP32[$17 >> 2] = $10; //@line 15908
 $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 15909
 HEAP32[$18 >> 2] = $12; //@line 15910
 $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 15911
 HEAP32[$19 >> 2] = $14; //@line 15912
 sp = STACKTOP; //@line 15913
 return;
}
function _mbedtls_cipher_cmac_starts__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $27 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16423
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16425
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16427
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 16430
  $27 = ___async_retval; //@line 16431
  HEAP32[$27 >> 2] = $$0; //@line 16432
  return;
 }
 switch (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) {
 case 36:
 case 4:
 case 3:
 case 2:
  {
   break;
  }
 default:
  {
   $$0 = -24832; //@line 16442
   $27 = ___async_retval; //@line 16443
   HEAP32[$27 >> 2] = $$0; //@line 16444
   return;
  }
 }
 $9 = _calloc(1, 36) | 0; //@line 16448
 if (!$9) {
  $$0 = -24960; //@line 16451
  $27 = ___async_retval; //@line 16452
  HEAP32[$27 >> 2] = $$0; //@line 16453
  return;
 }
 HEAP32[$4 + 64 >> 2] = $9; //@line 16457
 HEAP8[$9 >> 0] = 0; //@line 16459
 HEAP8[$9 + 1 >> 0] = 0; //@line 16461
 HEAP8[$9 + 2 >> 0] = 0; //@line 16463
 HEAP8[$9 + 3 >> 0] = 0; //@line 16465
 HEAP8[$9 + 4 >> 0] = 0; //@line 16467
 HEAP8[$9 + 5 >> 0] = 0; //@line 16469
 HEAP8[$9 + 6 >> 0] = 0; //@line 16471
 HEAP8[$9 + 7 >> 0] = 0; //@line 16473
 HEAP8[$9 + 8 >> 0] = 0; //@line 16475
 HEAP8[$9 + 9 >> 0] = 0; //@line 16477
 HEAP8[$9 + 10 >> 0] = 0; //@line 16479
 HEAP8[$9 + 11 >> 0] = 0; //@line 16481
 HEAP8[$9 + 12 >> 0] = 0; //@line 16483
 HEAP8[$9 + 13 >> 0] = 0; //@line 16485
 HEAP8[$9 + 14 >> 0] = 0; //@line 16487
 HEAP8[$9 + 15 >> 0] = 0; //@line 16488
 $$0 = 0; //@line 16489
 $27 = ___async_retval; //@line 16490
 HEAP32[$27 >> 2] = $$0; //@line 16491
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_466($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 34093
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34095
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34097
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 34099
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34101
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34103
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 34105
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34107
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 34109
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 34111
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 34113
 $21 = HEAP32[$2 >> 2] | 0; //@line 34114
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 32 >> 2] | 0; //@line 34117
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 34118
 FUNCTION_TABLE_vii[$24 & 31]($21, $4); //@line 34119
 if (!___async) {
  ___async_unwind = 0; //@line 34122
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 626; //@line 34124
 HEAP8[$ReallocAsyncCtx5 + 4 >> 0] = $6; //@line 34126
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 34128
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 34130
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 34132
 HEAP8[$ReallocAsyncCtx5 + 20 >> 0] = $12; //@line 34134
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 34136
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 34138
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 34140
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 34142
 sp = STACKTOP; //@line 34143
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_117($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 36721
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36725
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 36727
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 36728
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 36732
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 36733
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 36734
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 389; //@line 36737
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 36738
   HEAP32[$10 >> 2] = $4; //@line 36739
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 36740
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 36741
   sp = STACKTOP; //@line 36742
   return;
  }
  ___async_unwind = 0; //@line 36745
  HEAP32[$ReallocAsyncCtx >> 2] = 389; //@line 36746
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 36747
  HEAP32[$10 >> 2] = $4; //@line 36748
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 36749
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 36750
  sp = STACKTOP; //@line 36751
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 36758
 _mbed_assert_internal(13142, 13151, 141); //@line 36759
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 390; //@line 36762
  sp = STACKTOP; //@line 36763
  return;
 }
 ___async_unwind = 0; //@line 36766
 HEAP32[$ReallocAsyncCtx3 >> 2] = 390; //@line 36767
 sp = STACKTOP; //@line 36768
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_42($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 28638
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28640
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28642
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28644
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28646
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28648
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28650
 $13 = $2 + 356 | 0; //@line 28651
 $14 = HEAP32[$13 >> 2] | 0; //@line 28652
 $16 = $12 + 12 | 0; //@line 28654
 HEAP32[$12 >> 2] = 528; //@line 28655
 HEAP32[$12 + 4 >> 2] = 0; //@line 28657
 HEAP32[$12 + 8 >> 2] = $2; //@line 28659
 HEAP32[$16 >> 2] = 848; //@line 28660
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 28661
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($14, $2 + 996 | 0, $12); //@line 28662
 if (!___async) {
  ___async_unwind = 0; //@line 28665
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 529; //@line 28667
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $13; //@line 28669
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $2; //@line 28671
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $4; //@line 28673
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $6; //@line 28675
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $8; //@line 28677
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $10; //@line 28679
 HEAP32[$ReallocAsyncCtx10 + 28 >> 2] = $12; //@line 28681
 HEAP32[$ReallocAsyncCtx10 + 32 >> 2] = $16; //@line 28683
 sp = STACKTOP; //@line 28684
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 32861
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32863
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32865
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32867
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32869
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32871
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32873
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32875
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32877
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32879
 HEAP8[$2 + 1097 >> 0] = HEAP8[___async_retval >> 0] | 0; //@line 32883
 HEAP8[$4 >> 0] = 0; //@line 32884
 HEAP8[$6 >> 0] = HEAP8[$2 + 1156 >> 0] << 7; //@line 32888
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 32889
 $24 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($2, $8, $10, 0, 0, 0) | 0; //@line 32890
 if (!___async) {
  HEAP32[___async_retval >> 2] = $24; //@line 32894
  ___async_unwind = 0; //@line 32895
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 488; //@line 32897
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 32899
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $12; //@line 32901
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $14; //@line 32903
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $16; //@line 32905
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $18; //@line 32907
 HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $6; //@line 32909
 HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $4; //@line 32911
 sp = STACKTOP; //@line 32912
 return;
}
function __ZN4mbed5Timer7read_msEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $21 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4404
 $2 = $0 + 16 | 0; //@line 4406
 $4 = HEAP32[$2 >> 2] | 0; //@line 4408
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 4411
 if (!(HEAP32[$0 >> 2] | 0)) {
  $29 = 0; //@line 4415
  $30 = 0; //@line 4415
  $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 4416
  $32 = tempRet0; //@line 4417
  $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 4418
  $34 = tempRet0; //@line 4419
  return $33 | 0; //@line 4420
 }
 $11 = HEAP32[$0 + 24 >> 2] | 0; //@line 4423
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4424
 $12 = _ticker_read_us($11) | 0; //@line 4425
 $13 = tempRet0; //@line 4426
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 176; //@line 4429
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4431
  $16 = $AsyncCtx + 8 | 0; //@line 4433
  HEAP32[$16 >> 2] = $4; //@line 4435
  HEAP32[$16 + 4 >> 2] = $7; //@line 4438
  sp = STACKTOP; //@line 4439
  return 0; //@line 4440
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4442
 $21 = $0 + 8 | 0; //@line 4444
 $27 = _i64Subtract($12 | 0, $13 | 0, HEAP32[$21 >> 2] | 0, HEAP32[$21 + 4 >> 2] | 0) | 0; //@line 4450
 $29 = $27; //@line 4452
 $30 = tempRet0; //@line 4452
 $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 4453
 $32 = tempRet0; //@line 4454
 $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 4455
 $34 = tempRet0; //@line 4456
 return $33 | 0; //@line 4457
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv($0) {
 $0 = $0 | 0;
 var $14 = 0, $17 = 0, $19 = 0, $20 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 2806
 STACKTOP = STACKTOP + 16 | 0; //@line 2807
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2807
 _printf(10904, sp) | 0; //@line 2810
 _printf(11404, sp + 8 | 0) | 0; //@line 2811
 $AsyncCtx4 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2812
 _putchar(10) | 0; //@line 2813
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 129; //@line 2816
  HEAP32[$AsyncCtx4 + 4 >> 2] = $0; //@line 2818
  sp = STACKTOP; //@line 2819
  STACKTOP = sp; //@line 2820
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 2822
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 2824
 HEAP8[$0 + 688 >> 0] = 0; //@line 2826
 $5 = HEAP32[$0 + 788 >> 2] | 0; //@line 2828
 if (!$5) {
  STACKTOP = sp; //@line 2831
  return;
 }
 $8 = HEAP32[$5 + 44 >> 2] | 0; //@line 2834
 if (!$8) {
  STACKTOP = sp; //@line 2837
  return;
 }
 $14 = HEAPU8[$0 + 782 >> 0] | 0; //@line 2843
 $17 = HEAP8[$0 + 781 >> 0] | 0; //@line 2846
 $19 = HEAP8[$0 + 780 >> 0] | 0; //@line 2848
 $20 = HEAP32[$8 >> 2] | 0; //@line 2849
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2850
 FUNCTION_TABLE_viiiii[$20 & 7]($5 + 32 | 0, $0 + 792 | 0, $14, $17, $19); //@line 2851
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 130; //@line 2854
  sp = STACKTOP; //@line 2855
  STACKTOP = sp; //@line 2856
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2858
 STACKTOP = sp; //@line 2859
 return;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 378
 value = value & 255; //@line 380
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 383
   ptr = ptr + 1 | 0; //@line 384
  }
  aligned_end = end & -4 | 0; //@line 387
  block_aligned_end = aligned_end - 64 | 0; //@line 388
  value4 = value | value << 8 | value << 16 | value << 24; //@line 389
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 392
   HEAP32[ptr + 4 >> 2] = value4; //@line 393
   HEAP32[ptr + 8 >> 2] = value4; //@line 394
   HEAP32[ptr + 12 >> 2] = value4; //@line 395
   HEAP32[ptr + 16 >> 2] = value4; //@line 396
   HEAP32[ptr + 20 >> 2] = value4; //@line 397
   HEAP32[ptr + 24 >> 2] = value4; //@line 398
   HEAP32[ptr + 28 >> 2] = value4; //@line 399
   HEAP32[ptr + 32 >> 2] = value4; //@line 400
   HEAP32[ptr + 36 >> 2] = value4; //@line 401
   HEAP32[ptr + 40 >> 2] = value4; //@line 402
   HEAP32[ptr + 44 >> 2] = value4; //@line 403
   HEAP32[ptr + 48 >> 2] = value4; //@line 404
   HEAP32[ptr + 52 >> 2] = value4; //@line 405
   HEAP32[ptr + 56 >> 2] = value4; //@line 406
   HEAP32[ptr + 60 >> 2] = value4; //@line 407
   ptr = ptr + 64 | 0; //@line 408
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 412
   ptr = ptr + 4 | 0; //@line 413
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 418
  ptr = ptr + 1 | 0; //@line 419
 }
 return end - num | 0; //@line 421
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 8244
 STACKTOP = STACKTOP + 16 | 0; //@line 8245
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8245
 $$byval_copy = sp; //@line 8246
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8248
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8250
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8252
 $8 = HEAP32[$2 + 1328 >> 2] | 0; //@line 8254
 HEAP32[$4 >> 2] = 366; //@line 8255
 HEAP32[$4 + 4 >> 2] = 0; //@line 8257
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 8258
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 8259
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 8259
 $9 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($8, $2, $$byval_copy) | 0; //@line 8260
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 439; //@line 8263
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 8264
  HEAP32[$10 >> 2] = $6; //@line 8265
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 8266
  HEAP32[$11 >> 2] = $2; //@line 8267
  sp = STACKTOP; //@line 8268
  STACKTOP = sp; //@line 8269
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 8272
 ___async_unwind = 0; //@line 8273
 HEAP32[$ReallocAsyncCtx4 >> 2] = 439; //@line 8274
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 8275
 HEAP32[$10 >> 2] = $6; //@line 8276
 $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 8277
 HEAP32[$11 >> 2] = $2; //@line 8278
 sp = STACKTOP; //@line 8279
 STACKTOP = sp; //@line 8280
 return;
}
function __ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_187($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 3857
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3859
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3861
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 3866
  _mbed_assert_internal(13142, 13151, 201); //@line 3867
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 430; //@line 3870
   $7 = $ReallocAsyncCtx4 + 4 | 0; //@line 3871
   HEAP32[$7 >> 2] = $2; //@line 3872
   $8 = $ReallocAsyncCtx4 + 8 | 0; //@line 3873
   HEAP32[$8 >> 2] = $4; //@line 3874
   sp = STACKTOP; //@line 3875
   return;
  }
  ___async_unwind = 0; //@line 3878
  HEAP32[$ReallocAsyncCtx4 >> 2] = 430; //@line 3879
  $7 = $ReallocAsyncCtx4 + 4 | 0; //@line 3880
  HEAP32[$7 >> 2] = $2; //@line 3881
  $8 = $ReallocAsyncCtx4 + 8 | 0; //@line 3882
  HEAP32[$8 >> 2] = $4; //@line 3883
  sp = STACKTOP; //@line 3884
  return;
 }
 $9 = $4 + 944 | 0; //@line 3887
 HEAP8[$9 >> 0] = HEAP8[$9 >> 0] | 34; //@line 3890
 $13 = HEAP32[$4 + 356 >> 2] | 0; //@line 3892
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 3894
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($13, $4 + 996 | 0, 1); //@line 3895
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 431; //@line 3898
  sp = STACKTOP; //@line 3899
  return;
 }
 ___async_unwind = 0; //@line 3902
 HEAP32[$ReallocAsyncCtx2 >> 2] = 431; //@line 3903
 sp = STACKTOP; //@line 3904
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2228
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2232
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2234
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2236
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2238
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2240
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2242
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 2245
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 2246
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 2255
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 2256
    if (!___async) {
     ___async_unwind = 0; //@line 2259
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 811; //@line 2261
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 2263
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 2265
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 2267
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 2269
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 2271
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 2273
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 2275
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 2278
    sp = STACKTOP; //@line 2279
    return;
   }
  }
 }
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_220($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7410
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7412
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7414
 $5 = $2 + 1892 | 0; //@line 7415
 $6 = HEAP32[$5 >> 2] | 0; //@line 7416
 if (!$6) {
  return;
 }
 $10 = HEAP32[$2 + 2288 >> 2] | 0; //@line 7423
 $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 7425
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 7426
 FUNCTION_TABLE_vii[$12 & 31]($4, $2 + 1880 | 0); //@line 7427
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 233; //@line 7430
  $13 = $ReallocAsyncCtx + 4 | 0; //@line 7431
  HEAP32[$13 >> 2] = $5; //@line 7432
  $14 = $ReallocAsyncCtx + 8 | 0; //@line 7433
  HEAP32[$14 >> 2] = $4; //@line 7434
  $15 = $ReallocAsyncCtx + 12 | 0; //@line 7435
  HEAP32[$15 >> 2] = $10; //@line 7436
  $16 = $ReallocAsyncCtx + 16 | 0; //@line 7437
  HEAP32[$16 >> 2] = $4; //@line 7438
  sp = STACKTOP; //@line 7439
  return;
 }
 ___async_unwind = 0; //@line 7442
 HEAP32[$ReallocAsyncCtx >> 2] = 233; //@line 7443
 $13 = $ReallocAsyncCtx + 4 | 0; //@line 7444
 HEAP32[$13 >> 2] = $5; //@line 7445
 $14 = $ReallocAsyncCtx + 8 | 0; //@line 7446
 HEAP32[$14 >> 2] = $4; //@line 7447
 $15 = $ReallocAsyncCtx + 12 | 0; //@line 7448
 HEAP32[$15 >> 2] = $10; //@line 7449
 $16 = $ReallocAsyncCtx + 16 | 0; //@line 7450
 HEAP32[$16 >> 2] = $4; //@line 7451
 sp = STACKTOP; //@line 7452
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_339($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 15944
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15948
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15950
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15952
 $8 = (HEAP32[$0 + 4 >> 2] | 0) + 16 | 0; //@line 15953
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 15954
 $9 = HEAP32[$4 >> 2] | 0; //@line 15955
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 15959
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 15960
  FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 15961
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 670; //@line 15964
   $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 15965
   HEAP32[$13 >> 2] = $8; //@line 15966
   sp = STACKTOP; //@line 15967
   return;
  }
  ___async_unwind = 0; //@line 15970
  HEAP32[$ReallocAsyncCtx3 >> 2] = 670; //@line 15971
  $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 15972
  HEAP32[$13 >> 2] = $8; //@line 15973
  sp = STACKTOP; //@line 15974
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 15981
 _mbed_assert_internal(14025, 14043, 57); //@line 15982
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 671; //@line 15985
  sp = STACKTOP; //@line 15986
  return;
 }
 ___async_unwind = 0; //@line 15989
 HEAP32[$ReallocAsyncCtx5 >> 2] = 671; //@line 15990
 sp = STACKTOP; //@line 15991
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_469($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 34347
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34357
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 34359
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34361
 $18 = HEAP32[$10 >> 2] | 0; //@line 34368
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 44 >> 2] | 0; //@line 34371
 $24 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 34374
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 34375
 FUNCTION_TABLE_viii[$21 & 7]($18, 1, $24); //@line 34376
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 629; //@line 34379
  $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 34380
  HEAP32[$25 >> 2] = $10; //@line 34381
  $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 34382
  HEAP8[$26 >> 0] = $12; //@line 34383
  $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 34384
  HEAP32[$27 >> 2] = $14; //@line 34385
  sp = STACKTOP; //@line 34386
  return;
 }
 ___async_unwind = 0; //@line 34389
 HEAP32[$ReallocAsyncCtx8 >> 2] = 629; //@line 34390
 $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 34391
 HEAP32[$25 >> 2] = $10; //@line 34392
 $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 34393
 HEAP8[$26 >> 0] = $12; //@line 34394
 $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 34395
 HEAP32[$27 >> 2] = $14; //@line 34396
 sp = STACKTOP; //@line 34397
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_468($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 34290
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34300
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 34302
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34304
 $18 = HEAP32[$10 >> 2] | 0; //@line 34311
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 44 >> 2] | 0; //@line 34314
 $24 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 34317
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 34318
 FUNCTION_TABLE_viii[$21 & 7]($18, 0, $24); //@line 34319
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 629; //@line 34322
  $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 34323
  HEAP32[$25 >> 2] = $10; //@line 34324
  $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 34325
  HEAP8[$26 >> 0] = $12; //@line 34326
  $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 34327
  HEAP32[$27 >> 2] = $14; //@line 34328
  sp = STACKTOP; //@line 34329
  return;
 }
 ___async_unwind = 0; //@line 34332
 HEAP32[$ReallocAsyncCtx8 >> 2] = 629; //@line 34333
 $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 34334
 HEAP32[$25 >> 2] = $10; //@line 34335
 $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 34336
 HEAP8[$26 >> 0] = $12; //@line 34337
 $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 34338
 HEAP32[$27 >> 2] = $14; //@line 34339
 sp = STACKTOP; //@line 34340
 return;
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3470
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 3480
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 3480
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 3480
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 3484
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 3487
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 3490
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 3498
  } else {
   $20 = 0; //@line 3500
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 3510
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 3514
  HEAP32[___async_retval >> 2] = $$1; //@line 3516
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 3519
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 3520
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 3524
  ___async_unwind = 0; //@line 3525
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 779; //@line 3527
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 3529
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 3531
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 3533
 sp = STACKTOP; //@line 3534
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 14141
 STACKTOP = STACKTOP + 16 | 0; //@line 14142
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14142
 _printf(13258, sp) | 0; //@line 14145
 _printf(13459, sp + 8 | 0) | 0; //@line 14146
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14147
 _putchar(10) | 0; //@line 14148
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 432; //@line 14151
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14153
  sp = STACKTOP; //@line 14154
  STACKTOP = sp; //@line 14155
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14157
 $3 = HEAP32[$0 + 356 >> 2] | 0; //@line 14159
 $AsyncCtx4 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14161
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($3, $0 + 1076 | 0); //@line 14162
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 433; //@line 14165
  HEAP32[$AsyncCtx4 + 4 >> 2] = $0; //@line 14167
  sp = STACKTOP; //@line 14168
  STACKTOP = sp; //@line 14169
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 14171
 if (HEAP8[$0 + 373 >> 0] | 0) {
  HEAP8[$0 + 377 >> 0] = 1; //@line 14177
  $10 = $0 + 968 | 0; //@line 14178
  HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -5; //@line 14181
 }
 if ((HEAP32[$0 + 360 >> 2] | 0) != 2) {
  STACKTOP = sp; //@line 14187
  return;
 }
 $16 = $0 + 944 | 0; //@line 14189
 HEAP8[$16 >> 0] = HEAP8[$16 >> 0] | 32; //@line 14192
 STACKTOP = sp; //@line 14193
 return;
}
function __ZN7LoRaPHY20put_radio_to_standbyEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26132
 $1 = $0 + 4 | 0; //@line 26133
 $2 = HEAP32[$1 >> 2] | 0; //@line 26134
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 26137
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 26138
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 26139
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 647; //@line 26142
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 26144
  sp = STACKTOP; //@line 26145
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 26148
 $7 = HEAP32[$1 >> 2] | 0; //@line 26149
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0; //@line 26152
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 26153
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 26154
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 648; //@line 26157
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 26159
  sp = STACKTOP; //@line 26160
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 26163
 $12 = HEAP32[$1 >> 2] | 0; //@line 26164
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 26167
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 26168
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 26169
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 649; //@line 26172
  sp = STACKTOP; //@line 26173
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 26176
  return;
 }
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10485
 STACKTOP = STACKTOP + 32 | 0; //@line 10486
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10486
 $2 = sp + 12 | 0; //@line 10489
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(12178, sp) | 0; //@line 10494
  _printf(12975, sp + 8 | 0) | 0; //@line 10495
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10496
  _putchar(10) | 0; //@line 10497
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 333; //@line 10500
   sp = STACKTOP; //@line 10501
   STACKTOP = sp; //@line 10502
   return 0; //@line 10502
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10504
  $$0 = -1012; //@line 10505
  STACKTOP = sp; //@line 10506
  return $$0 | 0; //@line 10506
 } else {
  HEAP32[$2 >> 2] = 2; //@line 10509
  HEAP8[$2 + 4 >> 0] = $1 & 1; //@line 10511
  $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10513
  $9 = __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($0 + 4 | 0, $2) | 0; //@line 10514
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 334; //@line 10517
   HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 10519
   sp = STACKTOP; //@line 10520
   STACKTOP = sp; //@line 10521
   return 0; //@line 10521
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10523
  $$0 = $9; //@line 10524
  STACKTOP = sp; //@line 10525
  return $$0 | 0; //@line 10525
 }
 return 0; //@line 10527
}
function __ZN7LoRaPHY18put_radio_to_sleepEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26080
 $1 = $0 + 4 | 0; //@line 26081
 $2 = HEAP32[$1 >> 2] | 0; //@line 26082
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 26085
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 26086
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 26087
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 644; //@line 26090
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 26092
  sp = STACKTOP; //@line 26093
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 26096
 $7 = HEAP32[$1 >> 2] | 0; //@line 26097
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 26100
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 26101
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 26102
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 645; //@line 26105
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 26107
  sp = STACKTOP; //@line 26108
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 26111
 $12 = HEAP32[$1 >> 2] | 0; //@line 26112
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 26115
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 26116
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 26117
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 646; //@line 26120
  sp = STACKTOP; //@line 26121
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 26124
  return;
 }
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3036
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3038
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3040
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3042
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 3047
  } else {
   $9 = $4 + 4 | 0; //@line 3049
   $10 = HEAP32[$9 >> 2] | 0; //@line 3050
   $11 = $4 + 8 | 0; //@line 3051
   $12 = HEAP32[$11 >> 2] | 0; //@line 3052
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 3056
    HEAP32[$6 >> 2] = 0; //@line 3057
    HEAP32[$2 >> 2] = 0; //@line 3058
    HEAP32[$11 >> 2] = 0; //@line 3059
    HEAP32[$9 >> 2] = 0; //@line 3060
    $$0 = 0; //@line 3061
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 3068
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 3069
   FUNCTION_TABLE_iiii[$18 & 15]($4, $10 - $12 | 0, 1) | 0; //@line 3070
   if (!___async) {
    ___async_unwind = 0; //@line 3073
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 781; //@line 3075
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 3077
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 3079
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 3081
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 3083
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 3085
   sp = STACKTOP; //@line 3086
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 3091
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 36813
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36823
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 36827
 $16 = (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) != 0; //@line 36829
 $18 = HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 1108 >> 2] | 0; //@line 36831
 _printf(13258, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 36832
 _printf(13334, $10) | 0; //@line 36833
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 36834
 _putchar(10) | 0; //@line 36835
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 520; //@line 36838
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 36839
  HEAP32[$19 >> 2] = $14; //@line 36840
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 36841
  $$expand_i1_val = $16 & 1; //@line 36842
  HEAP8[$20 >> 0] = $$expand_i1_val; //@line 36843
  $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 36844
  HEAP32[$21 >> 2] = $18; //@line 36845
  sp = STACKTOP; //@line 36846
  return;
 }
 ___async_unwind = 0; //@line 36849
 HEAP32[$ReallocAsyncCtx2 >> 2] = 520; //@line 36850
 $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 36851
 HEAP32[$19 >> 2] = $14; //@line 36852
 $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 36853
 $$expand_i1_val = $16 & 1; //@line 36854
 HEAP8[$20 >> 0] = $$expand_i1_val; //@line 36855
 $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 36856
 HEAP32[$21 >> 2] = $18; //@line 36857
 sp = STACKTOP; //@line 36858
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30708
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30710
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30712
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 30715
  $5 = _mbedtls_cipher_cmac_finish(22892, 24200) | 0; //@line 30716
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 609; //@line 30719
   $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 30720
   HEAP32[$6 >> 2] = $2; //@line 30721
   sp = STACKTOP; //@line 30722
   return;
  }
  HEAP32[___async_retval >> 2] = $5; //@line 30726
  ___async_unwind = 0; //@line 30727
  HEAP32[$ReallocAsyncCtx2 >> 2] = 609; //@line 30728
  $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 30729
  HEAP32[$6 >> 2] = $2; //@line 30730
  sp = STACKTOP; //@line 30731
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 30734
  _mbedtls_cipher_free(22892); //@line 30735
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 610; //@line 30738
   $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 30739
   HEAP32[$8 >> 2] = $AsyncRetVal; //@line 30740
   sp = STACKTOP; //@line 30741
   return;
  }
  ___async_unwind = 0; //@line 30744
  HEAP32[$ReallocAsyncCtx5 >> 2] = 610; //@line 30745
  $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 30746
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 30747
  sp = STACKTOP; //@line 30748
  return;
 }
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7178
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7180
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7185
 $7 = HEAP32[$2 >> 2] | 0; //@line 7186
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] | 0; //@line 7189
 if (HEAP8[$0 + 8 >> 0] & 1) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 7191
  FUNCTION_TABLE_vii[$10 & 31]($7, 0); //@line 7192
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 655; //@line 7195
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 7196
   HEAP32[$12 >> 2] = $2; //@line 7197
   sp = STACKTOP; //@line 7198
   return;
  }
  ___async_unwind = 0; //@line 7201
  HEAP32[$ReallocAsyncCtx3 >> 2] = 655; //@line 7202
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 7203
  HEAP32[$12 >> 2] = $2; //@line 7204
  sp = STACKTOP; //@line 7205
  return;
 } else {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 7208
  FUNCTION_TABLE_vii[$10 & 31]($7, $6); //@line 7209
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 654; //@line 7212
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 7213
   HEAP32[$11 >> 2] = $2; //@line 7214
   sp = STACKTOP; //@line 7215
   return;
  }
  ___async_unwind = 0; //@line 7218
  HEAP32[$ReallocAsyncCtx2 >> 2] = 654; //@line 7219
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 7220
  HEAP32[$11 >> 2] = $2; //@line 7221
  sp = STACKTOP; //@line 7222
  return;
 }
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8560
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8562
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8564
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8566
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8568
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8570
 $$pre = HEAP32[$2 >> 2] | 0; //@line 8571
 if (!$$pre) {
  HEAP32[$4 >> 2] = 0; //@line 8574
  _gpio_irq_set($10 + 28 | 0, 2, 1); //@line 8576
  return;
 }
 $13 = HEAP32[$$pre + 4 >> 2] | 0; //@line 8580
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 8581
 FUNCTION_TABLE_vii[$13 & 31]($6, $8); //@line 8582
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 164; //@line 8585
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 8586
  HEAP32[$14 >> 2] = $2; //@line 8587
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 8588
  HEAP32[$15 >> 2] = $4; //@line 8589
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 8590
  HEAP32[$16 >> 2] = $10; //@line 8591
  sp = STACKTOP; //@line 8592
  return;
 }
 ___async_unwind = 0; //@line 8595
 HEAP32[$ReallocAsyncCtx2 >> 2] = 164; //@line 8596
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 8597
 HEAP32[$14 >> 2] = $2; //@line 8598
 $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 8599
 HEAP32[$15 >> 2] = $4; //@line 8600
 $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 8601
 HEAP32[$16 >> 2] = $10; //@line 8602
 sp = STACKTOP; //@line 8603
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 17281
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17283
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17285
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 17288
  $5 = _mbedtls_cipher_cmac_finish(22892, 24200) | 0; //@line 17289
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 604; //@line 17292
   $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 17293
   HEAP32[$6 >> 2] = $2; //@line 17294
   sp = STACKTOP; //@line 17295
   return;
  }
  HEAP32[___async_retval >> 2] = $5; //@line 17299
  ___async_unwind = 0; //@line 17300
  HEAP32[$ReallocAsyncCtx3 >> 2] = 604; //@line 17301
  $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 17302
  HEAP32[$6 >> 2] = $2; //@line 17303
  sp = STACKTOP; //@line 17304
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 17307
  _mbedtls_cipher_free(22892); //@line 17308
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 605; //@line 17311
   $8 = $ReallocAsyncCtx6 + 4 | 0; //@line 17312
   HEAP32[$8 >> 2] = $AsyncRetVal; //@line 17313
   sp = STACKTOP; //@line 17314
   return;
  }
  ___async_unwind = 0; //@line 17317
  HEAP32[$ReallocAsyncCtx6 >> 2] = 605; //@line 17318
  $8 = $ReallocAsyncCtx6 + 4 | 0; //@line 17319
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 17320
  sp = STACKTOP; //@line 17321
  return;
 }
}
function __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0) {
 $0 = $0 | 0;
 var $14 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2735
 STACKTOP = STACKTOP + 16 | 0; //@line 2736
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2736
 _printf(10904, sp) | 0; //@line 2739
 _printf(11028, sp + 8 | 0) | 0; //@line 2740
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2741
 _putchar(10) | 0; //@line 2742
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 128; //@line 2745
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2747
  sp = STACKTOP; //@line 2748
  STACKTOP = sp; //@line 2749
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2751
 if ((HEAP32[$0 + 652 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 484 >> 2] | 0, 0) | 0; //@line 2758
 }
 if ((HEAP32[$0 + 656 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 508 >> 2] | 0, 0) | 0; //@line 2766
 }
 if ((HEAP32[$0 + 672 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 604 >> 2] | 0, 0) | 0; //@line 2774
 }
 $14 = $0 + 660 | 0; //@line 2776
 if ((HEAP32[$14 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 532 >> 2] | 0, 0) | 0; //@line 2782
  if ((HEAP32[$14 >> 2] | 0) != -1) {
   _emscripten_asm_const_iii(5, HEAP32[$0 + 556 >> 2] | 0, 0) | 0; //@line 2788
  }
 }
 if ((HEAP32[$0 + 668 >> 2] | 0) == -1) {
  STACKTOP = sp; //@line 2795
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$0 + 580 >> 2] | 0, 0) | 0; //@line 2799
 STACKTOP = sp; //@line 2800
 return;
}
function _equeue_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$032$i = 0, $$033$i = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $29 = 0, $5 = 0, $6 = 0;
 $2 = _malloc($1) | 0; //@line 4600
 if (!$2) {
  $$0 = -1; //@line 4603
  return $$0 | 0; //@line 4604
 }
 HEAP32[$0 + 12 >> 2] = $2; //@line 4607
 $5 = $0 + 20 | 0; //@line 4608
 HEAP32[$5 >> 2] = 0; //@line 4609
 $6 = $0 + 16 | 0; //@line 4610
 HEAP32[$6 >> 2] = 0; //@line 4611
 if ($1 | 0) {
  $$033$i = $1; //@line 4614
  $22 = 0; //@line 4614
  do {
   $22 = $22 + 1 | 0; //@line 4616
   $$033$i = $$033$i >>> 1; //@line 4617
  } while (($$033$i | 0) != 0);
  HEAP32[$6 >> 2] = $22; //@line 4625
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 4628
 HEAP32[$0 + 28 >> 2] = $1; //@line 4630
 HEAP32[$0 + 32 >> 2] = $2; //@line 4632
 HEAP32[$0 >> 2] = 0; //@line 4633
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 4636
 HEAP8[$0 + 9 >> 0] = 0; //@line 4638
 HEAP8[$0 + 8 >> 0] = 0; //@line 4640
 HEAP8[$0 + 36 >> 0] = 0; //@line 4642
 HEAP32[$0 + 40 >> 2] = 0; //@line 4644
 HEAP32[$0 + 44 >> 2] = 0; //@line 4646
 $20 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 4648
 if (($20 | 0) < 0) {
  $$032$i = $20; //@line 4651
 } else {
  $26 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 4654
  if (($26 | 0) < 0) {
   $$032$i = $26; //@line 4657
  } else {
   $29 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 4660
   $$032$i = ($29 | 0) < 0 ? $29 : 0; //@line 4663
  }
 }
 HEAP32[$5 >> 2] = $2; //@line 4666
 $$0 = $$032$i; //@line 4667
 return $$0 | 0; //@line 4668
}
function __ZN12LoRaWANStack17send_frame_to_macEv__async_cb_23($0) {
 $0 = $0 | 0;
 var $$sink2$sink = 0, $10 = 0, $12 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17992
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17998
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18000
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18002
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18004
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $$sink2$sink = HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 0] | 0; //@line 18011
 } else {
  $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv((HEAP32[$0 + 8 >> 2] | 0) + 1336 | 0) | 0; //@line 18015
 }
 HEAP8[$8 + 5 >> 0] = $$sink2$sink; //@line 18018
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 18019
 $20 = __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($6, $8) | 0; //@line 18020
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 301; //@line 18023
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 18024
  HEAP32[$21 >> 2] = $10; //@line 18025
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 18026
  HEAP32[$22 >> 2] = $12; //@line 18027
  sp = STACKTOP; //@line 18028
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 18032
 ___async_unwind = 0; //@line 18033
 HEAP32[$ReallocAsyncCtx >> 2] = 301; //@line 18034
 $21 = $ReallocAsyncCtx + 4 | 0; //@line 18035
 HEAP32[$21 >> 2] = $10; //@line 18036
 $22 = $ReallocAsyncCtx + 8 | 0; //@line 18037
 HEAP32[$22 >> 2] = $12; //@line 18038
 sp = STACKTOP; //@line 18039
 return;
}
function __ZN12LoRaWANStack17send_frame_to_macEv__async_cb_22($0) {
 $0 = $0 | 0;
 var $$sink2$sink = 0, $10 = 0, $12 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17938
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17944
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17946
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17948
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17950
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $$sink2$sink = HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 0] | 0; //@line 17957
 } else {
  $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv((HEAP32[$0 + 8 >> 2] | 0) + 1336 | 0) | 0; //@line 17961
 }
 HEAP8[$8 + 5 >> 0] = $$sink2$sink; //@line 17964
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 17965
 $20 = __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($6, $8) | 0; //@line 17966
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 301; //@line 17969
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 17970
  HEAP32[$21 >> 2] = $10; //@line 17971
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 17972
  HEAP32[$22 >> 2] = $12; //@line 17973
  sp = STACKTOP; //@line 17974
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 17978
 ___async_unwind = 0; //@line 17979
 HEAP32[$ReallocAsyncCtx >> 2] = 301; //@line 17980
 $21 = $ReallocAsyncCtx + 4 | 0; //@line 17981
 HEAP32[$21 >> 2] = $10; //@line 17982
 $22 = $ReallocAsyncCtx + 8 | 0; //@line 17983
 HEAP32[$22 >> 2] = $12; //@line 17984
 sp = STACKTOP; //@line 17985
 return;
}
function __ZN12LoRaWANStack17send_frame_to_macEv__async_cb_21($0) {
 $0 = $0 | 0;
 var $$sink2$sink = 0, $10 = 0, $12 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17884
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17890
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17892
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17894
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17896
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $$sink2$sink = HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 0] | 0; //@line 17903
 } else {
  $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv((HEAP32[$0 + 8 >> 2] | 0) + 1336 | 0) | 0; //@line 17907
 }
 HEAP8[$8 + 5 >> 0] = $$sink2$sink; //@line 17910
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 17911
 $20 = __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($6, $8) | 0; //@line 17912
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 301; //@line 17915
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 17916
  HEAP32[$21 >> 2] = $10; //@line 17917
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 17918
  HEAP32[$22 >> 2] = $12; //@line 17919
  sp = STACKTOP; //@line 17920
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 17924
 ___async_unwind = 0; //@line 17925
 HEAP32[$ReallocAsyncCtx >> 2] = 301; //@line 17926
 $21 = $ReallocAsyncCtx + 4 | 0; //@line 17927
 HEAP32[$21 >> 2] = $10; //@line 17928
 $22 = $ReallocAsyncCtx + 8 | 0; //@line 17929
 HEAP32[$22 >> 2] = $12; //@line 17930
 sp = STACKTOP; //@line 17931
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13197
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13199
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13201
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13203
 $7 = $2 + 12 | 0; //@line 13204
 $8 = HEAP32[$7 >> 2] | 0; //@line 13205
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 13208
  HEAP32[$6 + 16 >> 2] = 0; //@line 13210
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 13214
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 13215
 FUNCTION_TABLE_vii[$11 & 31]($6, $2); //@line 13216
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 666; //@line 13219
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 13220
  HEAP32[$12 >> 2] = $7; //@line 13221
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 13222
  HEAP32[$13 >> 2] = $4; //@line 13223
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 13224
  HEAP32[$14 >> 2] = $6; //@line 13225
  sp = STACKTOP; //@line 13226
  return;
 }
 ___async_unwind = 0; //@line 13229
 HEAP32[$ReallocAsyncCtx2 >> 2] = 666; //@line 13230
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 13231
 HEAP32[$12 >> 2] = $7; //@line 13232
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 13233
 HEAP32[$13 >> 2] = $4; //@line 13234
 $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 13235
 HEAP32[$14 >> 2] = $6; //@line 13236
 sp = STACKTOP; //@line 13237
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 27873
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27875
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27877
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27879
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27881
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27883
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27885
 $13 = HEAP32[$2 >> 2] | 0; //@line 27886
 $15 = $8 + 12 | 0; //@line 27888
 HEAP32[$8 >> 2] = 531; //@line 27889
 HEAP32[$8 + 4 >> 2] = 0; //@line 27891
 HEAP32[$8 + 8 >> 2] = $4; //@line 27893
 HEAP32[$15 >> 2] = 848; //@line 27894
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 27895
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($13, $4 + 1016 | 0, $8); //@line 27896
 if (!___async) {
  ___async_unwind = 0; //@line 27899
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 532; //@line 27901
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 27903
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 27905
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $10; //@line 27907
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $12; //@line 27909
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $6; //@line 27911
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $8; //@line 27913
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $15; //@line 27915
 sp = STACKTOP; //@line 27916
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_501($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 36934
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36936
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36938
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36940
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36942
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36944
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 36946
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 36948
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 36950
 $17 = HEAP32[$2 >> 2] | 0; //@line 36951
 $20 = HEAP32[(HEAP32[$17 >> 2] | 0) + 24 >> 2] | 0; //@line 36954
 $23 = (__ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0) + 10 | 0; //@line 36957
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 36958
 FUNCTION_TABLE_iiii[$20 & 15]($17, $6, $23) | 0; //@line 36959
 if (!___async) {
  ___async_unwind = 0; //@line 36962
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 519; //@line 36964
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $8; //@line 36966
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 36968
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $10; //@line 36970
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $12; //@line 36972
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $14; //@line 36974
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $16; //@line 36976
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $2; //@line 36978
 sp = STACKTOP; //@line 36979
 return;
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 14206
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 14211
    $$0 = 1; //@line 14212
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 14225
     $$0 = 1; //@line 14226
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 14230
     $$0 = -1; //@line 14231
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 14241
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 14245
    $$0 = 2; //@line 14246
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 14258
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 14264
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 14268
    $$0 = 3; //@line 14269
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 14279
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 14285
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 14291
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 14295
    $$0 = 4; //@line 14296
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 14300
    $$0 = -1; //@line 14301
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 14306
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20451
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$0 = -1002; //@line 20455
  return $$0 | 0; //@line 20456
 }
 if (((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) <= ($1 & 255)) {
  $$0 = -1003; //@line 20462
  return $$0 | 0; //@line 20463
 }
 $7 = HEAP32[$0 >> 2] | 0; //@line 20465
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 64 >> 2] | 0; //@line 20468
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 20469
 $11 = FUNCTION_TABLE_iii[$10 & 31]($7, $1) | 0; //@line 20470
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 593; //@line 20473
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 20475
  sp = STACKTOP; //@line 20476
  return 0; //@line 20477
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 20479
 if (!$11) {
  $$0 = -1003; //@line 20481
  return $$0 | 0; //@line 20482
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 20484
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 20485
 __ZN7LoRaPHY18put_radio_to_sleepEv($13); //@line 20486
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 594; //@line 20489
  sp = STACKTOP; //@line 20490
  return 0; //@line 20491
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 20493
 $$0 = 0; //@line 20494
 return $$0 | 0; //@line 20495
}
function __ZN12LoRaWANStack22set_link_check_requestEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10848
 STACKTOP = STACKTOP + 32 | 0; //@line 10849
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10849
 $1 = sp + 12 | 0; //@line 10852
 if (!(HEAP32[$0 + 1908 >> 2] | 0)) {
  _printf(12178, sp) | 0; //@line 10857
  _printf(13085, sp + 8 | 0) | 0; //@line 10858
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10859
  _putchar(10) | 0; //@line 10860
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 343; //@line 10863
   sp = STACKTOP; //@line 10864
   STACKTOP = sp; //@line 10865
   return 0; //@line 10865
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10867
  $$0 = -1003; //@line 10868
  STACKTOP = sp; //@line 10869
  return $$0 | 0; //@line 10869
 } else {
  HEAP32[$1 >> 2] = 1; //@line 10871
  $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10873
  $6 = __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($0 + 4 | 0, $1) | 0; //@line 10874
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 344; //@line 10877
   HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 10879
   sp = STACKTOP; //@line 10880
   STACKTOP = sp; //@line 10881
   return 0; //@line 10881
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10883
  $$0 = $6; //@line 10884
  STACKTOP = sp; //@line 10885
  return $$0 | 0; //@line 10885
 }
 return 0; //@line 10887
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 30992
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30994
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30996
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30998
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31000
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31002
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 0; //@line 31006
 HEAP8[$4 >> 0] = 1; //@line 31007
 $14 = $2 + 944 | 0; //@line 31008
 HEAP8[$14 >> 0] = HEAP8[$14 >> 0] | 32; //@line 31011
 $17 = HEAP32[$6 >> 2] | 0; //@line 31012
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 31014
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($17, $2 + 996 | 0, 1); //@line 31015
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 31018
  $19 = $ReallocAsyncCtx17 + 4 | 0; //@line 31019
  HEAP32[$19 >> 2] = $8; //@line 31020
  $20 = $ReallocAsyncCtx17 + 8 | 0; //@line 31021
  HEAP32[$20 >> 2] = $10; //@line 31022
  sp = STACKTOP; //@line 31023
  return;
 }
 ___async_unwind = 0; //@line 31026
 HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 31027
 $19 = $ReallocAsyncCtx17 + 4 | 0; //@line 31028
 HEAP32[$19 >> 2] = $8; //@line 31029
 $20 = $ReallocAsyncCtx17 + 8 | 0; //@line 31030
 HEAP32[$20 >> 2] = $10; //@line 31031
 sp = STACKTOP; //@line 31032
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_408($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 23228
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23230
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23232
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23234
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23236
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23238
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23240
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23242
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23244
 HEAP32[$8 >> 2] = 4; //@line 23245
 HEAP32[$16 >> 2] = HEAP32[$2 + 1944 >> 2]; //@line 23248
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(36) | 0; //@line 23249
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($12, $14) | 0; //@line 23250
 if (!___async) {
  ___async_unwind = 0; //@line 23253
 }
 HEAP32[$ReallocAsyncCtx18 >> 2] = 257; //@line 23255
 HEAP32[$ReallocAsyncCtx18 + 4 >> 2] = $2; //@line 23257
 HEAP32[$ReallocAsyncCtx18 + 8 >> 2] = $4; //@line 23259
 HEAP32[$ReallocAsyncCtx18 + 12 >> 2] = $6; //@line 23261
 HEAP32[$ReallocAsyncCtx18 + 16 >> 2] = $8; //@line 23263
 HEAP32[$ReallocAsyncCtx18 + 20 >> 2] = $10; //@line 23265
 HEAP32[$ReallocAsyncCtx18 + 24 >> 2] = $12; //@line 23267
 HEAP32[$ReallocAsyncCtx18 + 28 >> 2] = $14; //@line 23269
 HEAP32[$ReallocAsyncCtx18 + 32 >> 2] = $16; //@line 23271
 sp = STACKTOP; //@line 23272
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_407($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 23177
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23179
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23181
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23183
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23185
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23187
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23189
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23191
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23193
 HEAP32[$8 >> 2] = 5; //@line 23194
 HEAP32[$16 >> 2] = HEAP32[$2 + 1948 >> 2]; //@line 23197
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(36) | 0; //@line 23198
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($12, $14) | 0; //@line 23199
 if (!___async) {
  ___async_unwind = 0; //@line 23202
 }
 HEAP32[$ReallocAsyncCtx17 >> 2] = 258; //@line 23204
 HEAP32[$ReallocAsyncCtx17 + 4 >> 2] = $2; //@line 23206
 HEAP32[$ReallocAsyncCtx17 + 8 >> 2] = $4; //@line 23208
 HEAP32[$ReallocAsyncCtx17 + 12 >> 2] = $6; //@line 23210
 HEAP32[$ReallocAsyncCtx17 + 16 >> 2] = $8; //@line 23212
 HEAP32[$ReallocAsyncCtx17 + 20 >> 2] = $10; //@line 23214
 HEAP32[$ReallocAsyncCtx17 + 24 >> 2] = $12; //@line 23216
 HEAP32[$ReallocAsyncCtx17 + 28 >> 2] = $14; //@line 23218
 HEAP32[$ReallocAsyncCtx17 + 32 >> 2] = $16; //@line 23220
 sp = STACKTOP; //@line 23221
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_184($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 3666
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3668
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3670
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3672
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3674
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 3679
  return;
 }
 dest = $2 + 4 | 0; //@line 3683
 stop = dest + 52 | 0; //@line 3683
 do {
  HEAP32[dest >> 2] = 0; //@line 3683
  dest = dest + 4 | 0; //@line 3683
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 3684
 HEAP32[$2 + 8 >> 2] = $4; //@line 3686
 HEAP32[$2 + 12 >> 2] = -1; //@line 3688
 HEAP32[$2 + 48 >> 2] = 1; //@line 3690
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 3693
 $16 = HEAP32[$6 >> 2] | 0; //@line 3694
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 3695
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 3696
 if (!___async) {
  ___async_unwind = 0; //@line 3699
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 796; //@line 3701
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 3703
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 3705
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 3707
 sp = STACKTOP; //@line 3708
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb_276($0) {
 $0 = $0 | 0;
 var $$pre106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10050
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10052
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10054
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10056
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10058
 $$pre106 = HEAP32[$2 >> 2] | 0; //@line 10059
 if (!$$pre106) {
  HEAP32[$4 >> 2] = 0; //@line 10062
  return;
 }
 $11 = HEAP32[$$pre106 + 4 >> 2] | 0; //@line 10066
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 10067
 FUNCTION_TABLE_vii[$11 & 31]($6, $8); //@line 10068
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 198; //@line 10071
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 10072
  HEAP32[$12 >> 2] = $2; //@line 10073
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 10074
  HEAP32[$13 >> 2] = $4; //@line 10075
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 10076
  HEAP32[$14 >> 2] = $8; //@line 10077
  sp = STACKTOP; //@line 10078
  return;
 }
 ___async_unwind = 0; //@line 10081
 HEAP32[$ReallocAsyncCtx3 >> 2] = 198; //@line 10082
 $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 10083
 HEAP32[$12 >> 2] = $2; //@line 10084
 $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 10085
 HEAP32[$13 >> 2] = $4; //@line 10086
 $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 10087
 HEAP32[$14 >> 2] = $8; //@line 10088
 sp = STACKTOP; //@line 10089
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_237($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8159
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8163
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8165
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 8166
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 8170
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 8171
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 8172
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 220; //@line 8175
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 8176
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 8177
   sp = STACKTOP; //@line 8178
   return;
  }
  ___async_unwind = 0; //@line 8181
  HEAP32[$ReallocAsyncCtx2 >> 2] = 220; //@line 8182
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 8183
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 8184
  sp = STACKTOP; //@line 8185
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(4) | 0; //@line 8192
 _mbed_assert_internal(13142, 12226, 843); //@line 8193
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 221; //@line 8196
  sp = STACKTOP; //@line 8197
  return;
 }
 ___async_unwind = 0; //@line 8200
 HEAP32[$ReallocAsyncCtx11 >> 2] = 221; //@line 8201
 sp = STACKTOP; //@line 8202
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_100($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 36177
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36183
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36187
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 36189
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 36191
 _printf(12430, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 36192
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 36193
 _printf(12845, $6) | 0; //@line 36194
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 36195
 _putchar(10) | 0; //@line 36196
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 312; //@line 36199
  $14 = $ReallocAsyncCtx + 4 | 0; //@line 36200
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 36201
  $15 = $ReallocAsyncCtx + 8 | 0; //@line 36202
  HEAP32[$15 >> 2] = $10; //@line 36203
  $16 = $ReallocAsyncCtx + 12 | 0; //@line 36204
  HEAP32[$16 >> 2] = $12; //@line 36205
  sp = STACKTOP; //@line 36206
  return;
 }
 ___async_unwind = 0; //@line 36209
 HEAP32[$ReallocAsyncCtx >> 2] = 312; //@line 36210
 $14 = $ReallocAsyncCtx + 4 | 0; //@line 36211
 HEAP32[$14 >> 2] = $AsyncRetVal; //@line 36212
 $15 = $ReallocAsyncCtx + 8 | 0; //@line 36213
 HEAP32[$15 >> 2] = $10; //@line 36214
 $16 = $ReallocAsyncCtx + 12 | 0; //@line 36215
 HEAP32[$16 >> 2] = $12; //@line 36216
 sp = STACKTOP; //@line 36217
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_224($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7530
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7534
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 7536
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 7537
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 7541
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 7542
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 7543
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 235; //@line 7546
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 7547
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 7548
   sp = STACKTOP; //@line 7549
   return;
  }
  ___async_unwind = 0; //@line 7552
  HEAP32[$ReallocAsyncCtx2 >> 2] = 235; //@line 7553
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 7554
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 7555
  sp = STACKTOP; //@line 7556
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 7563
 _mbed_assert_internal(13142, 12226, 715); //@line 7564
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 236; //@line 7567
  sp = STACKTOP; //@line 7568
  return;
 }
 ___async_unwind = 0; //@line 7571
 HEAP32[$ReallocAsyncCtx13 >> 2] = 236; //@line 7572
 sp = STACKTOP; //@line 7573
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_223($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 7481
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7485
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 7487
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 7488
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 7492
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 7493
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 7494
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 239; //@line 7497
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 7498
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 7499
   sp = STACKTOP; //@line 7500
   return;
  }
  ___async_unwind = 0; //@line 7503
  HEAP32[$ReallocAsyncCtx4 >> 2] = 239; //@line 7504
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 7505
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 7506
  sp = STACKTOP; //@line 7507
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(4) | 0; //@line 7514
 _mbed_assert_internal(13142, 12226, 737); //@line 7515
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 240; //@line 7518
  sp = STACKTOP; //@line 7519
  return;
 }
 ___async_unwind = 0; //@line 7522
 HEAP32[$ReallocAsyncCtx12 >> 2] = 240; //@line 7523
 sp = STACKTOP; //@line 7524
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_266($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9517
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9521
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9523
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 9524
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 9528
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 9529
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 9530
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 206; //@line 9533
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 9534
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 9535
   sp = STACKTOP; //@line 9536
   return;
  }
  ___async_unwind = 0; //@line 9539
  HEAP32[$ReallocAsyncCtx2 >> 2] = 206; //@line 9540
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 9541
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 9542
  sp = STACKTOP; //@line 9543
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(4) | 0; //@line 9550
 _mbed_assert_internal(13142, 12226, 786); //@line 9551
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 207; //@line 9554
  sp = STACKTOP; //@line 9555
  return;
 }
 ___async_unwind = 0; //@line 9558
 HEAP32[$ReallocAsyncCtx15 >> 2] = 207; //@line 9559
 sp = STACKTOP; //@line 9560
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_265($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 9468
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9472
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9474
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 9475
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 9479
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 9480
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 9481
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 210; //@line 9484
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 9485
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 9486
   sp = STACKTOP; //@line 9487
   return;
  }
  ___async_unwind = 0; //@line 9490
  HEAP32[$ReallocAsyncCtx4 >> 2] = 210; //@line 9491
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 9492
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 9493
  sp = STACKTOP; //@line 9494
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(4) | 0; //@line 9501
 _mbed_assert_internal(13142, 12226, 797); //@line 9502
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 211; //@line 9505
  sp = STACKTOP; //@line 9506
  return;
 }
 ___async_unwind = 0; //@line 9509
 HEAP32[$ReallocAsyncCtx14 >> 2] = 211; //@line 9510
 sp = STACKTOP; //@line 9511
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_264($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 9419
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9423
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9425
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 9426
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 9430
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 9431
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 9432
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 214; //@line 9435
   $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 9436
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 9437
   sp = STACKTOP; //@line 9438
   return;
  }
  ___async_unwind = 0; //@line 9441
  HEAP32[$ReallocAsyncCtx6 >> 2] = 214; //@line 9442
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 9443
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 9444
  sp = STACKTOP; //@line 9445
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 9452
 _mbed_assert_internal(13142, 12226, 821); //@line 9453
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 215; //@line 9456
  sp = STACKTOP; //@line 9457
  return;
 }
 ___async_unwind = 0; //@line 9460
 HEAP32[$ReallocAsyncCtx13 >> 2] = 215; //@line 9461
 sp = STACKTOP; //@line 9462
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_218($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 7343
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7347
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7349
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7351
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7353
 $11 = $4 + 12 | 0; //@line 7355
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 7356
 $13 = HEAP8[$6 + 12 >> 0] | 0; //@line 7358
 $15 = HEAP8[$6 + 13 >> 0] | 0; //@line 7360
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 7361
 $16 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($8, $4, $13, $15) | 0; //@line 7362
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 238; //@line 7365
  $17 = $ReallocAsyncCtx8 + 4 | 0; //@line 7366
  HEAP32[$17 >> 2] = $11; //@line 7367
  $18 = $ReallocAsyncCtx8 + 8 | 0; //@line 7368
  HEAP32[$18 >> 2] = $10; //@line 7369
  sp = STACKTOP; //@line 7370
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 7374
 ___async_unwind = 0; //@line 7375
 HEAP32[$ReallocAsyncCtx8 >> 2] = 238; //@line 7376
 $17 = $ReallocAsyncCtx8 + 4 | 0; //@line 7377
 HEAP32[$17 >> 2] = $11; //@line 7378
 $18 = $ReallocAsyncCtx8 + 8 | 0; //@line 7379
 HEAP32[$18 >> 2] = $10; //@line 7380
 sp = STACKTOP; //@line 7381
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_169($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2364
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2368
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2370
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2372
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2374
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2376
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 2379
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 2380
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 2386
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 2387
   if (!___async) {
    ___async_unwind = 0; //@line 2390
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 809; //@line 2392
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 2394
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 2396
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 2398
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 2400
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 2402
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 2404
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 2407
   sp = STACKTOP; //@line 2408
   return;
  }
 }
 return;
}
function __ZN7LoRaMac34handle_mac_state_check_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14848
 STACKTOP = STACKTOP + 16 | 0; //@line 14849
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14849
 $$byval_copy = sp + 8 | 0; //@line 14850
 $1 = sp; //@line 14851
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14853
 HEAP32[$1 >> 2] = 461; //@line 14854
 HEAP32[$1 + 4 >> 2] = 0; //@line 14856
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14857
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 14858
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14858
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 14859
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 462; //@line 14862
  sp = STACKTOP; //@line 14863
  STACKTOP = sp; //@line 14864
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14866
 if ($4 | 0) {
  STACKTOP = sp; //@line 14869
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14871
 _mbed_assert_internal(13142, 13151, 187); //@line 14872
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 463; //@line 14875
  sp = STACKTOP; //@line 14876
  STACKTOP = sp; //@line 14877
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14879
 STACKTOP = sp; //@line 14880
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_144($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 551
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 553
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 555
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 557
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 559
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 561
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 563
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 565
 $16 = $2 + 360 | 0; //@line 567
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 568
 $17 = __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($2 + 348 | 0, $4, $16) | 0; //@line 569
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 573
  ___async_unwind = 0; //@line 574
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 567; //@line 576
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $16; //@line 578
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 580
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 582
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 584
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 586
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 588
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 590
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $2; //@line 592
 sp = STACKTOP; //@line 593
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_400($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 22453
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22455
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22457
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22459
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22461
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22463
 $11 = $2 + 1892 | 0; //@line 22464
 $12 = HEAP32[$11 >> 2] | 0; //@line 22465
 if (!$12) {
  HEAP32[$6 >> 2] = 6; //@line 22468
  HEAP32[___async_retval >> 2] = $4; //@line 22470
  return;
 }
 $16 = HEAP32[$2 + 2288 >> 2] | 0; //@line 22475
 $18 = HEAP32[$12 + 4 >> 2] | 0; //@line 22477
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 22478
 FUNCTION_TABLE_vii[$18 & 31]($8, $2 + 1880 | 0); //@line 22479
 if (!___async) {
  ___async_unwind = 0; //@line 22482
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 272; //@line 22484
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $11; //@line 22486
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $8; //@line 22488
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $16; //@line 22490
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $8; //@line 22492
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $4; //@line 22494
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $6; //@line 22496
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $10; //@line 22498
 sp = STACKTOP; //@line 22499
 return;
}
function __ZN7LoRaMac29handle_delayed_tx_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17550
 STACKTOP = STACKTOP + 16 | 0; //@line 17551
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17551
 $$byval_copy = sp + 8 | 0; //@line 17552
 $1 = sp; //@line 17553
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 17555
 HEAP32[$1 >> 2] = 465; //@line 17556
 HEAP32[$1 + 4 >> 2] = 0; //@line 17558
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17559
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 17560
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 17560
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 17561
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 508; //@line 17564
  sp = STACKTOP; //@line 17565
  STACKTOP = sp; //@line 17566
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17568
 if ($4 | 0) {
  STACKTOP = sp; //@line 17571
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17573
 _mbed_assert_internal(13142, 13151, 194); //@line 17574
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 509; //@line 17577
  sp = STACKTOP; //@line 17578
  STACKTOP = sp; //@line 17579
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17581
 STACKTOP = sp; //@line 17582
 return;
}
function __ZN7LoRaMac18handle_ack_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17587
 STACKTOP = STACKTOP + 16 | 0; //@line 17588
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17588
 $$byval_copy = sp + 8 | 0; //@line 17589
 $1 = sp; //@line 17590
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 17592
 HEAP32[$1 >> 2] = 428; //@line 17593
 HEAP32[$1 + 4 >> 2] = 0; //@line 17595
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17596
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 17597
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 17597
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 17598
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 510; //@line 17601
  sp = STACKTOP; //@line 17602
  STACKTOP = sp; //@line 17603
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17605
 if ($4 | 0) {
  STACKTOP = sp; //@line 17608
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17610
 _mbed_assert_internal(13142, 13151, 201); //@line 17611
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 511; //@line 17614
  sp = STACKTOP; //@line 17615
  STACKTOP = sp; //@line 17616
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17618
 STACKTOP = sp; //@line 17619
 return;
}
function __ZN7LoRaMac17handle_tx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14683
 STACKTOP = STACKTOP + 16 | 0; //@line 14684
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14684
 $$byval_copy = sp + 8 | 0; //@line 14685
 $1 = sp; //@line 14686
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14688
 HEAP32[$1 >> 2] = 453; //@line 14689
 HEAP32[$1 + 4 >> 2] = 0; //@line 14691
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14692
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 14693
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14693
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 14694
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 454; //@line 14697
  sp = STACKTOP; //@line 14698
  STACKTOP = sp; //@line 14699
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14701
 if ($4 | 0) {
  STACKTOP = sp; //@line 14704
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14706
 _mbed_assert_internal(13142, 13151, 162); //@line 14707
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 455; //@line 14710
  sp = STACKTOP; //@line 14711
  STACKTOP = sp; //@line 14712
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14714
 STACKTOP = sp; //@line 14715
 return;
}
function __ZN7LoRaMac17handle_rx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14426
 STACKTOP = STACKTOP + 16 | 0; //@line 14427
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14427
 $$byval_copy = sp + 8 | 0; //@line 14428
 $1 = sp; //@line 14429
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14431
 HEAP32[$1 >> 2] = 443; //@line 14432
 HEAP32[$1 + 4 >> 2] = 0; //@line 14434
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14435
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 14436
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14436
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 14437
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 444; //@line 14440
  sp = STACKTOP; //@line 14441
  STACKTOP = sp; //@line 14442
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14444
 if ($4 | 0) {
  STACKTOP = sp; //@line 14447
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14449
 _mbed_assert_internal(13142, 13151, 155); //@line 14450
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 445; //@line 14453
  sp = STACKTOP; //@line 14454
  STACKTOP = sp; //@line 14455
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14457
 STACKTOP = sp; //@line 14458
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_40($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 28547
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28549
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28551
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28553
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28555
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28557
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28559
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28561
 _srand(HEAP32[___async_retval >> 2] | 0); //@line 28564
 HEAP8[$2 + 368 >> 0] = 1; //@line 28566
 $17 = HEAP32[$14 >> 2] | 0; //@line 28567
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(32) | 0; //@line 28568
 __ZN7LoRaPHY25setup_public_network_modeEb($17, 1); //@line 28569
 if (!___async) {
  ___async_unwind = 0; //@line 28572
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 526; //@line 28574
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 28576
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 28578
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $6; //@line 28580
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $8; //@line 28582
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $10; //@line 28584
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $12; //@line 28586
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $14; //@line 28588
 sp = STACKTOP; //@line 28589
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb_509($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 37574
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37576
 $4 = HEAP32[$2 + 48 >> 2] | 0; //@line 37578
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 37583
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 37584
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 36 | 0); //@line 37585
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 358; //@line 37588
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 37589
   HEAP32[$9 >> 2] = $2; //@line 37590
   sp = STACKTOP; //@line 37591
   return;
  }
  ___async_unwind = 0; //@line 37594
  HEAP32[$ReallocAsyncCtx4 >> 2] = 358; //@line 37595
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 37596
  HEAP32[$9 >> 2] = $2; //@line 37597
  sp = STACKTOP; //@line 37598
  return;
 }
 $11 = HEAP32[$2 + 28 >> 2] | 0; //@line 37602
 if (!$11) {
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 37609
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 37610
 FUNCTION_TABLE_vi[$15 & 1023]($2 + 16 | 0); //@line 37611
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 359; //@line 37614
  sp = STACKTOP; //@line 37615
  return;
 }
 ___async_unwind = 0; //@line 37618
 HEAP32[$ReallocAsyncCtx5 >> 2] = 359; //@line 37619
 sp = STACKTOP; //@line 37620
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_291($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 11323
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11325
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11327
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11329
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11331
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11333
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11335
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11337
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11339
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(36) | 0; //@line 11340
 $17 = __ZN4mbed5Timer7read_msEv($2) | 0; //@line 11341
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 11345
  ___async_unwind = 0; //@line 11346
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 103; //@line 11348
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $4; //@line 11350
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $6; //@line 11352
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $8; //@line 11354
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $10; //@line 11356
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $12; //@line 11358
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $14; //@line 11360
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $2; //@line 11362
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $16; //@line 11364
 sp = STACKTOP; //@line 11365
 return;
}
function __ZN7LoRaMac15handle_rx_errorEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14198
 STACKTOP = STACKTOP + 16 | 0; //@line 14199
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14199
 $$byval_copy = sp + 8 | 0; //@line 14200
 $1 = sp; //@line 14201
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14203
 HEAP32[$1 >> 2] = 434; //@line 14204
 HEAP32[$1 + 4 >> 2] = 0; //@line 14206
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14207
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 14208
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14208
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 14209
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 435; //@line 14212
  sp = STACKTOP; //@line 14213
  STACKTOP = sp; //@line 14214
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14216
 if ($4 | 0) {
  STACKTOP = sp; //@line 14219
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14221
 _mbed_assert_internal(13142, 13151, 148); //@line 14222
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 436; //@line 14225
  sp = STACKTOP; //@line 14226
  STACKTOP = sp; //@line 14227
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14229
 STACKTOP = sp; //@line 14230
 return;
}
function __ZN7LoRaMac14handle_tx_doneEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11299
 STACKTOP = STACKTOP + 16 | 0; //@line 11300
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11300
 $$byval_copy = sp + 8 | 0; //@line 11301
 $1 = sp; //@line 11302
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11304
 HEAP32[$1 >> 2] = 360; //@line 11305
 HEAP32[$1 + 4 >> 2] = 0; //@line 11307
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11308
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 11309
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11309
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 11310
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 361; //@line 11313
  sp = STACKTOP; //@line 11314
  STACKTOP = sp; //@line 11315
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11317
 if ($4 | 0) {
  STACKTOP = sp; //@line 11320
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11322
 _mbed_assert_internal(13142, 13151, 134); //@line 11323
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 362; //@line 11326
  sp = STACKTOP; //@line 11327
  STACKTOP = sp; //@line 11328
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11330
 STACKTOP = sp; //@line 11331
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_453($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 32929
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32931
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32933
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32935
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32937
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32939
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32941
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32943
 $16 = HEAP32[$2 + 356 >> 2] | 0; //@line 32945
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(40) | 0; //@line 32947
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($16, $2 + 1016 | 0); //@line 32948
 if (!___async) {
  ___async_unwind = 0; //@line 32951
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 486; //@line 32953
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 32955
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $12; //@line 32957
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $14; //@line 32959
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $12; //@line 32961
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $14; //@line 32963
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $4; //@line 32965
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $6; //@line 32967
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $8; //@line 32969
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $10; //@line 32971
 sp = STACKTOP; //@line 32972
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_406($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 23128
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23130
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23132
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23134
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23136
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23138
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23140
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23142
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23144
 HEAP32[$8 >> 2] = 6; //@line 23145
 HEAP32[$16 >> 2] = HEAP32[$2 + 1952 >> 2]; //@line 23148
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(32) | 0; //@line 23149
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($12, $14) | 0; //@line 23150
 if (!___async) {
  ___async_unwind = 0; //@line 23153
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 259; //@line 23155
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $8; //@line 23157
 HEAP32[$ReallocAsyncCtx16 + 8 >> 2] = $10; //@line 23159
 HEAP32[$ReallocAsyncCtx16 + 12 >> 2] = $12; //@line 23161
 HEAP32[$ReallocAsyncCtx16 + 16 >> 2] = $14; //@line 23163
 HEAP32[$ReallocAsyncCtx16 + 20 >> 2] = $2; //@line 23165
 HEAP32[$ReallocAsyncCtx16 + 24 >> 2] = $6; //@line 23167
 HEAP32[$ReallocAsyncCtx16 + 28 >> 2] = $4; //@line 23169
 sp = STACKTOP; //@line 23170
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8881
 $2 = HEAP8[$0 + 16 >> 0] | 0; //@line 8883
 $4 = HEAP8[$0 + 17 >> 0] | 0; //@line 8885
 $5 = $0 + 12 | 0; //@line 8886
 $6 = HEAP32[$5 >> 2] | 0; //@line 8887
 do {
  if (!$6) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8891
   _mbed_assert_internal(15352, 15357, 1677); //@line 8892
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 293; //@line 8895
    HEAP32[$AsyncCtx2 + 4 >> 2] = $5; //@line 8897
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8899
    HEAP8[$AsyncCtx2 + 12 >> 0] = $2; //@line 8901
    HEAP8[$AsyncCtx2 + 13 >> 0] = $4; //@line 8903
    sp = STACKTOP; //@line 8904
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8907
    $13 = HEAP32[$5 >> 2] | 0; //@line 8909
    break;
   }
  } else {
   $13 = $6; //@line 8913
  }
 } while (0);
 $12 = HEAP32[$13 >> 2] | 0; //@line 8916
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8917
 FUNCTION_TABLE_viii[$12 & 7]($0, $2, $4); //@line 8918
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 294; //@line 8921
  sp = STACKTOP; //@line 8922
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8925
  return;
 }
}
function __ZN12radio_eventsD2Ev__async_cb_475($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 34918
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34920
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 34922
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 34927
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 34928
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 16 | 0); //@line 34929
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 353; //@line 34932
   $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 34933
   HEAP32[$9 >> 2] = $2; //@line 34934
   sp = STACKTOP; //@line 34935
   return;
  }
  ___async_unwind = 0; //@line 34938
  HEAP32[$ReallocAsyncCtx6 >> 2] = 353; //@line 34939
  $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 34940
  HEAP32[$9 >> 2] = $2; //@line 34941
  sp = STACKTOP; //@line 34942
  return;
 }
 $11 = HEAP32[$2 + 12 >> 2] | 0; //@line 34946
 if (!$11) {
  return;
 }
 $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 34952
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 34953
 FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 34954
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 354; //@line 34957
  sp = STACKTOP; //@line 34958
  return;
 }
 ___async_unwind = 0; //@line 34961
 HEAP32[$ReallocAsyncCtx7 >> 2] = 354; //@line 34962
 sp = STACKTOP; //@line 34963
 return;
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_242($0) {
 $0 = $0 | 0;
 var $19 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 8423
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8425
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8427
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 8432
  _mbed_assert_internal(13142, 13151, 217); //@line 8433
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 440; //@line 8436
   $7 = $ReallocAsyncCtx6 + 4 | 0; //@line 8437
   HEAP32[$7 >> 2] = $2; //@line 8438
   $8 = $ReallocAsyncCtx6 + 8 | 0; //@line 8439
   HEAP32[$8 >> 2] = $4; //@line 8440
   sp = STACKTOP; //@line 8441
   return;
  }
  ___async_unwind = 0; //@line 8444
  HEAP32[$ReallocAsyncCtx6 >> 2] = 440; //@line 8445
  $7 = $ReallocAsyncCtx6 + 4 | 0; //@line 8446
  HEAP32[$7 >> 2] = $2; //@line 8447
  $8 = $ReallocAsyncCtx6 + 8 | 0; //@line 8448
  HEAP32[$8 >> 2] = $4; //@line 8449
  sp = STACKTOP; //@line 8450
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 8454
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 8462
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 8467
 $19 = $4 + 944 | 0; //@line 8468
 HEAP8[$19 >> 0] = HEAP8[$19 >> 0] | 32; //@line 8471
 return;
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 13090
  $8 = $0; //@line 13090
  $9 = $1; //@line 13090
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 13092
   $$0914 = $$0914 + -1 | 0; //@line 13096
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 13097
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 13098
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 13106
   }
  }
  $$010$lcssa$off0 = $8; //@line 13111
  $$09$lcssa = $$0914; //@line 13111
 } else {
  $$010$lcssa$off0 = $0; //@line 13113
  $$09$lcssa = $2; //@line 13113
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 13117
 } else {
  $$012 = $$010$lcssa$off0; //@line 13119
  $$111 = $$09$lcssa; //@line 13119
  while (1) {
   $26 = $$111 + -1 | 0; //@line 13124
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 13125
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 13129
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 13132
    $$111 = $26; //@line 13132
   }
  }
 }
 return $$1$lcssa | 0; //@line 13136
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_35($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 28103
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28107
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28109
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28111
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28112
 if (!$9) {
  HEAP32[$6 + 988 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$4 >> 2] | 0) | 0; //@line 28118
  HEAP32[___async_retval >> 2] = 0; //@line 28120
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 28124
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 28125
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 28126
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 542; //@line 28129
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 28130
  HEAP32[$13 >> 2] = $4; //@line 28131
  $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 28132
  HEAP32[$14 >> 2] = $6; //@line 28133
  sp = STACKTOP; //@line 28134
  return;
 }
 ___async_unwind = 0; //@line 28137
 HEAP32[$ReallocAsyncCtx5 >> 2] = 542; //@line 28138
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 28139
 HEAP32[$13 >> 2] = $4; //@line 28140
 $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 28141
 HEAP32[$14 >> 2] = $6; //@line 28142
 sp = STACKTOP; //@line 28143
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_90($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 34360
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34362
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34364
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34366
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34368
 $9 = $2 + 944 | 0; //@line 34369
 HEAP8[$9 >> 0] = 2 | HEAP8[$9 >> 0] & -7; //@line 34373
 $13 = $2 + 944 | 0; //@line 34374
 HEAP8[$13 >> 0] = HEAP8[$13 >> 0] | 32; //@line 34377
 $16 = HEAP32[$4 >> 2] | 0; //@line 34378
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 34380
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($16, $2 + 996 | 0, 1); //@line 34381
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 34384
  $18 = $ReallocAsyncCtx17 + 4 | 0; //@line 34385
  HEAP32[$18 >> 2] = $6; //@line 34386
  $19 = $ReallocAsyncCtx17 + 8 | 0; //@line 34387
  HEAP32[$19 >> 2] = $8; //@line 34388
  sp = STACKTOP; //@line 34389
  return;
 }
 ___async_unwind = 0; //@line 34392
 HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 34393
 $18 = $ReallocAsyncCtx17 + 4 | 0; //@line 34394
 HEAP32[$18 >> 2] = $6; //@line 34395
 $19 = $ReallocAsyncCtx17 + 8 | 0; //@line 34396
 HEAP32[$19 >> 2] = $8; //@line 34397
 sp = STACKTOP; //@line 34398
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_89($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 34315
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34317
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34319
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34321
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34323
 $9 = $2 + 944 | 0; //@line 34324
 HEAP8[$9 >> 0] = 2 | HEAP8[$9 >> 0] & -7; //@line 34328
 $13 = $2 + 944 | 0; //@line 34329
 HEAP8[$13 >> 0] = HEAP8[$13 >> 0] | 32; //@line 34332
 $16 = HEAP32[$4 >> 2] | 0; //@line 34333
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 34335
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($16, $2 + 996 | 0, 1); //@line 34336
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 34339
  $18 = $ReallocAsyncCtx17 + 4 | 0; //@line 34340
  HEAP32[$18 >> 2] = $6; //@line 34341
  $19 = $ReallocAsyncCtx17 + 8 | 0; //@line 34342
  HEAP32[$19 >> 2] = $8; //@line 34343
  sp = STACKTOP; //@line 34344
  return;
 }
 ___async_unwind = 0; //@line 34347
 HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 34348
 $18 = $ReallocAsyncCtx17 + 4 | 0; //@line 34349
 HEAP32[$18 >> 2] = $6; //@line 34350
 $19 = $ReallocAsyncCtx17 + 8 | 0; //@line 34351
 HEAP32[$19 >> 2] = $8; //@line 34352
 sp = STACKTOP; //@line 34353
 return;
}
function __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$$i = 0, $$0 = 0.0, $10 = 0, $13 = 0, $16 = 0, $23 = 0, $28 = 0, $41 = 0, $5 = 0, $51 = 0, $7 = 0, $8 = 0;
 $5 = $1 << 24 >> 24; //@line 24435
 $7 = HEAP8[$0 + 29 >> 0] | 0; //@line 24437
 $8 = $7 & 255; //@line 24438
 $$ = ($5 | 0) < ($8 | 0) ? $5 : $8; //@line 24440
 $10 = $$ & 255; //@line 24441
 HEAP8[$4 + 1 >> 0] = $10; //@line 24443
 $13 = HEAP32[$0 + 80 >> 2] | 0; //@line 24445
 $16 = HEAP32[$13 + (($$ & 255) << 2) >> 2] | 0; //@line 24448
 HEAP8[$4 + 2 >> 0] = ($16 | 0) == 5e5 ? 2 : ($16 | 0) == 25e4 & 1; //@line 24454
 $23 = HEAP32[$0 + 88 >> 2] | 0; //@line 24461
 if (HEAP8[$0 + 14 >> 0] | 0 ? $7 << 24 >> 24 == $10 << 24 >> 24 : 0) {
  $$0 = 8.0 / +(HEAPU8[$23 + $8 >> 0] | 0); //@line 24467
 } else {
  $28 = $$ & 255; //@line 24469
  $$0 = +(1 << HEAPU8[$23 + $28 >> 0] | 0) / +((HEAP32[$13 + ($28 << 2) >> 2] | 0) >>> 0) * 1.0e3; //@line 24480
 }
 $41 = $2 & 255; //@line 24484
 $51 = ~~+Math_ceil(+(($$0 * +(($41 << 1) + -8 | 0) + +($3 << 1 >>> 0)) / $$0)) >>> 0; //@line 24494
 $$$i = $51 >>> 0 > $41 >>> 0 ? $51 : $41; //@line 24496
 HEAP32[$4 + 8 >> 2] = $$$i; //@line 24497
 HEAP32[$4 + 12 >> 2] = ~~+Math_ceil(+($$0 * 4.0 - $$0 * +($$$i >>> 0) * .5 + -1.0)); //@line 24506
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10332
 STACKTOP = STACKTOP + 16 | 0; //@line 10333
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10333
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(12178, sp) | 0; //@line 10340
  _printf(12975, sp + 8 | 0) | 0; //@line 10341
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10342
  _putchar(10) | 0; //@line 10343
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 326; //@line 10346
   sp = STACKTOP; //@line 10347
   STACKTOP = sp; //@line 10348
   return 0; //@line 10348
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10350
  $$0 = -1012; //@line 10351
  STACKTOP = sp; //@line 10352
  return $$0 | 0; //@line 10352
 } else {
  $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10355
  $6 = __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 10356
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 327; //@line 10359
   sp = STACKTOP; //@line 10360
   STACKTOP = sp; //@line 10361
   return 0; //@line 10361
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10363
  $$0 = $6; //@line 10364
  STACKTOP = sp; //@line 10365
  return $$0 | 0; //@line 10365
 }
 return 0; //@line 10367
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_308($0) {
 $0 = $0 | 0;
 var $16 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 13124
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13126
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13128
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 364 >> 2] = 2; //@line 13134
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 13138
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 13142
  $16 = $4 + 944 | 0; //@line 13143
  HEAP8[$16 >> 0] = HEAP8[$16 >> 0] | 32; //@line 13146
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 13149
 _mbed_assert_internal(13142, 13151, 217); //@line 13150
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 460; //@line 13153
  $7 = $ReallocAsyncCtx5 + 4 | 0; //@line 13154
  HEAP32[$7 >> 2] = $2; //@line 13155
  $8 = $ReallocAsyncCtx5 + 8 | 0; //@line 13156
  HEAP32[$8 >> 2] = $4; //@line 13157
  sp = STACKTOP; //@line 13158
  return;
 }
 ___async_unwind = 0; //@line 13161
 HEAP32[$ReallocAsyncCtx5 >> 2] = 460; //@line 13162
 $7 = $ReallocAsyncCtx5 + 4 | 0; //@line 13163
 HEAP32[$7 >> 2] = $2; //@line 13164
 $8 = $ReallocAsyncCtx5 + 8 | 0; //@line 13165
 HEAP32[$8 >> 2] = $4; //@line 13166
 sp = STACKTOP; //@line 13167
 return;
}
function __ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$09 = 0, $$1 = 0, $10 = 0, $15 = 0, $17 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 25179
 if (!(HEAP8[$0 + 17 >> 0] | 0)) {
  $$09 = 0; //@line 25184
  return $$09 | 0; //@line 25185
 }
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 25189
 $8 = $1 + 4 | 0; //@line 25190
 $9 = HEAP32[$8 >> 2] | 0; //@line 25191
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 25192
 $10 = FUNCTION_TABLE_iii[$7 & 31]($0, $9) | 0; //@line 25193
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 639; //@line 25196
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 25198
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 25200
  HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 25202
  sp = STACKTOP; //@line 25203
  return 0; //@line 25204
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 25206
 $$ = $10 ? 3 : 2; //@line 25207
 $15 = HEAP32[$0 + 112 >> 2] | 0; //@line 25209
 $17 = HEAPU8[$1 >> 0] | 0; //@line 25211
 $$1 = (HEAP32[$15 + ($17 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 25216
 if ($$1 << 24 >> 24 != 3) {
  $$09 = $$1; //@line 25219
  return $$09 | 0; //@line 25220
 }
 HEAP32[$15 + ($17 * 12 | 0) + 4 >> 2] = HEAP32[$8 >> 2]; //@line 25224
 $$09 = 3; //@line 25225
 return $$09 | 0; //@line 25226
}
function _equeue_create_inplace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$032 = 0, $$033 = 0, $19 = 0, $21 = 0, $25 = 0, $28 = 0, $5 = 0;
 HEAP32[$0 + 12 >> 2] = $2; //@line 4678
 HEAP32[$0 + 20 >> 2] = 0; //@line 4680
 $5 = $0 + 16 | 0; //@line 4681
 HEAP32[$5 >> 2] = 0; //@line 4682
 if ($1 | 0) {
  $$033 = $1; //@line 4685
  $21 = 0; //@line 4685
  do {
   $21 = $21 + 1 | 0; //@line 4687
   $$033 = $$033 >>> 1; //@line 4688
  } while (($$033 | 0) != 0);
  HEAP32[$5 >> 2] = $21; //@line 4696
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 4699
 HEAP32[$0 + 28 >> 2] = $1; //@line 4701
 HEAP32[$0 + 32 >> 2] = $2; //@line 4703
 HEAP32[$0 >> 2] = 0; //@line 4704
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 4707
 HEAP8[$0 + 9 >> 0] = 0; //@line 4709
 HEAP8[$0 + 8 >> 0] = 0; //@line 4711
 HEAP8[$0 + 36 >> 0] = 0; //@line 4713
 HEAP32[$0 + 40 >> 2] = 0; //@line 4715
 HEAP32[$0 + 44 >> 2] = 0; //@line 4717
 $19 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 4719
 if (($19 | 0) < 0) {
  $$032 = $19; //@line 4722
  return $$032 | 0; //@line 4723
 }
 $25 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 4726
 if (($25 | 0) < 0) {
  $$032 = $25; //@line 4729
  return $$032 | 0; //@line 4730
 }
 $28 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 4733
 $$032 = ($28 | 0) < 0 ? $28 : 0; //@line 4736
 return $$032 | 0; //@line 4737
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_464($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 33933
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33935
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 33937
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33939
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33941
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33943
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33945
 $14 = (HEAP8[___async_retval >> 0] | 0) == 0; //@line 33948
 $15 = HEAP32[$2 >> 2] | 0; //@line 33949
 $18 = HEAP32[(HEAP32[$15 >> 2] | 0) + 76 >> 2] | 0; //@line 33952
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 33953
 FUNCTION_TABLE_vi[$18 & 1023]($15); //@line 33954
 if (!___async) {
  ___async_unwind = 0; //@line 33957
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 624; //@line 33959
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 33961
 HEAP8[$ReallocAsyncCtx3 + 8 >> 0] = $4; //@line 33963
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 33965
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 33967
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 33969
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 33971
 HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 33974
 sp = STACKTOP; //@line 33975
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_146($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 683
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 685
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 687
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 689
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 364 >> 2] = 2; //@line 695
  HEAP32[___async_retval >> 2] = $6; //@line 697
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 700
 _mbed_assert_internal(13142, 13151, 217); //@line 701
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 570; //@line 704
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 705
  HEAP32[$9 >> 2] = $2; //@line 706
  $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 707
  HEAP32[$10 >> 2] = $4; //@line 708
  $11 = $ReallocAsyncCtx5 + 12 | 0; //@line 709
  HEAP32[$11 >> 2] = $6; //@line 710
  sp = STACKTOP; //@line 711
  return;
 }
 ___async_unwind = 0; //@line 714
 HEAP32[$ReallocAsyncCtx5 >> 2] = 570; //@line 715
 $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 716
 HEAP32[$9 >> 2] = $2; //@line 717
 $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 718
 HEAP32[$10 >> 2] = $4; //@line 719
 $11 = $ReallocAsyncCtx5 + 12 | 0; //@line 720
 HEAP32[$11 >> 2] = $6; //@line 721
 sp = STACKTOP; //@line 722
 return;
}
function __ZN12LoRaWANStack16remove_a_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10413
 STACKTOP = STACKTOP + 16 | 0; //@line 10414
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10414
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(12178, sp) | 0; //@line 10421
  _printf(12975, sp + 8 | 0) | 0; //@line 10422
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10423
  _putchar(10) | 0; //@line 10424
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 330; //@line 10427
   sp = STACKTOP; //@line 10428
   STACKTOP = sp; //@line 10429
   return 0; //@line 10429
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10431
  $$0 = -1012; //@line 10432
  STACKTOP = sp; //@line 10433
  return $$0 | 0; //@line 10433
 } else {
  $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10436
  $6 = __ZN7LoRaMac21remove_single_channelEh($0 + 4 | 0, $1) | 0; //@line 10437
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 331; //@line 10440
   sp = STACKTOP; //@line 10441
   STACKTOP = sp; //@line 10442
   return 0; //@line 10442
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10444
  $$0 = $6; //@line 10445
  STACKTOP = sp; //@line 10446
  return $$0 | 0; //@line 10446
 }
 return 0; //@line 10448
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_518($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 38009
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 38011
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 38013
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 38015
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 38019
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 38023
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 38025
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 38027
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 38029
 HEAP8[$4 + 688 >> 0] = 2; //@line 38031
 _printf(10904, $6) | 0; //@line 38032
 HEAP32[$10 >> 2] = 3; //@line 38033
 _printf(10970, $10) | 0; //@line 38034
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 38035
 _putchar(10) | 0; //@line 38036
 if (!___async) {
  ___async_unwind = 0; //@line 38039
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 140; //@line 38041
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 38043
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 38045
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $14; //@line 38047
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $16; //@line 38049
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $18; //@line 38051
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $20; //@line 38053
 sp = STACKTOP; //@line 38054
 return;
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 10706
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 10711
   label = 4; //@line 10712
  } else {
   $$01519 = $0; //@line 10714
   $23 = $1; //@line 10714
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 10719
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 10722
    $23 = $6; //@line 10723
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 10727
     label = 4; //@line 10728
     break;
    } else {
     $$01519 = $6; //@line 10731
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 10737
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 10739
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 10747
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 10755
  } else {
   $$pn = $$0; //@line 10757
   while (1) {
    $19 = $$pn + 1 | 0; //@line 10759
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 10763
     break;
    } else {
     $$pn = $19; //@line 10766
    }
   }
  }
  $$sink = $$1$lcssa; //@line 10771
 }
 return $$sink - $1 | 0; //@line 10774
}
function __ZN12LoRaWANStack17drop_channel_listEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10372
 STACKTOP = STACKTOP + 16 | 0; //@line 10373
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10373
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(12178, sp) | 0; //@line 10380
  _printf(12975, sp + 8 | 0) | 0; //@line 10381
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10382
  _putchar(10) | 0; //@line 10383
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 328; //@line 10386
   sp = STACKTOP; //@line 10387
   STACKTOP = sp; //@line 10388
   return 0; //@line 10388
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10390
  $$0 = -1012; //@line 10391
  STACKTOP = sp; //@line 10392
  return $$0 | 0; //@line 10392
 } else {
  $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10395
  $5 = __ZN7LoRaMac19remove_channel_planEv($0 + 4 | 0) | 0; //@line 10396
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 329; //@line 10399
   sp = STACKTOP; //@line 10400
   STACKTOP = sp; //@line 10401
   return 0; //@line 10401
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10403
  $$0 = $5; //@line 10404
  STACKTOP = sp; //@line 10405
  return $$0 | 0; //@line 10405
 }
 return 0; //@line 10407
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1416
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1418
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1422
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1424
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1426
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1428
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 1432
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 1435
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 1436
   if (!___async) {
    ___async_unwind = 0; //@line 1439
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 813; //@line 1441
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 1443
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 1445
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 1447
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 1449
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 1451
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 1453
   sp = STACKTOP; //@line 1454
   return;
  }
 }
 return;
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $2 = 0, $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3943
 $2 = $0; //@line 3944
 L1 : do {
  switch ($1 | 0) {
  case 1:
   {
    $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 3949
    if ($4 | 0) {
     $7 = HEAP32[$4 >> 2] | 0; //@line 3953
     $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3954
     FUNCTION_TABLE_vi[$7 & 1023]($2 + 40 | 0); //@line 3955
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 161; //@line 3958
      sp = STACKTOP; //@line 3959
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 3962
      break L1;
     }
    }
    break;
   }
  case 2:
   {
    $9 = HEAP32[$2 + 68 >> 2] | 0; //@line 3970
    if ($9 | 0) {
     $12 = HEAP32[$9 >> 2] | 0; //@line 3974
     $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3975
     FUNCTION_TABLE_vi[$12 & 1023]($2 + 56 | 0); //@line 3976
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 162; //@line 3979
      sp = STACKTOP; //@line 3980
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3983
      break L1;
     }
    }
    break;
   }
  default:
   {}
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 15222
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 15229
   $10 = $1 + 16 | 0; //@line 15230
   $11 = HEAP32[$10 >> 2] | 0; //@line 15231
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 15234
    HEAP32[$1 + 24 >> 2] = $4; //@line 15236
    HEAP32[$1 + 36 >> 2] = 1; //@line 15238
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 15248
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 15253
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 15256
    HEAP8[$1 + 54 >> 0] = 1; //@line 15258
    break;
   }
   $21 = $1 + 24 | 0; //@line 15261
   $22 = HEAP32[$21 >> 2] | 0; //@line 15262
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 15265
    $28 = $4; //@line 15266
   } else {
    $28 = $22; //@line 15268
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 15277
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_275($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9908
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9912
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 9914
 $7 = (HEAP32[$0 + 4 >> 2] | 0) + 4 | 0; //@line 9915
 $8 = HEAP32[$7 >> 2] | 0; //@line 9916
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 72 >> 2] | 0; //@line 9919
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 9920
 FUNCTION_TABLE_vi[$11 & 1023]($8); //@line 9921
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 661; //@line 9924
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 9925
  HEAP32[$12 >> 2] = $7; //@line 9926
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 9927
  HEAP32[$13 >> 2] = $4; //@line 9928
  $14 = $ReallocAsyncCtx + 12 | 0; //@line 9929
  HEAP8[$14 >> 0] = $6; //@line 9930
  sp = STACKTOP; //@line 9931
  return;
 }
 ___async_unwind = 0; //@line 9934
 HEAP32[$ReallocAsyncCtx >> 2] = 661; //@line 9935
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 9936
 HEAP32[$12 >> 2] = $7; //@line 9937
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 9938
 HEAP32[$13 >> 2] = $4; //@line 9939
 $14 = $ReallocAsyncCtx + 12 | 0; //@line 9940
 HEAP8[$14 >> 0] = $6; //@line 9941
 sp = STACKTOP; //@line 9942
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8955
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 8957
 $3 = $0 + 12 | 0; //@line 8958
 $4 = HEAP32[$3 >> 2] | 0; //@line 8959
 do {
  if (!$4) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8963
   _mbed_assert_internal(15352, 15357, 1102); //@line 8964
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 296; //@line 8967
    HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 8969
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8971
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 8973
    sp = STACKTOP; //@line 8974
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8977
    $10 = HEAP32[$3 >> 2] | 0; //@line 8979
    break;
   }
  } else {
   $10 = $4; //@line 8983
  }
 } while (0);
 $9 = HEAP32[$10 >> 2] | 0; //@line 8986
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8987
 FUNCTION_TABLE_vii[$9 & 31]($0, $2); //@line 8988
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 297; //@line 8991
  sp = STACKTOP; //@line 8992
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8995
  return;
 }
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_386($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $13 = 0, $19 = 0, $2 = 0, $25 = 0, $31 = 0, $35 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21609
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21611
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21613
 if (HEAP32[___async_retval >> 2] | 0) {
  $$0 = -1014; //@line 21620
  $35 = ___async_retval; //@line 21621
  HEAP32[$35 >> 2] = $$0; //@line 21622
  return;
 }
 $11 = HEAP32[$2 >> 2] | 0; //@line 21625
 $13 = HEAP16[$4 >> 1] | 0; //@line 21627
 HEAP16[$4 >> 1] = $13 + 1 << 16 >> 16; //@line 21629
 HEAP8[($13 & 65535) + ($6 + 381) >> 0] = $11; //@line 21632
 $19 = HEAP16[$4 >> 1] | 0; //@line 21635
 HEAP16[$4 >> 1] = $19 + 1 << 16 >> 16; //@line 21637
 HEAP8[($19 & 65535) + ($6 + 381) >> 0] = $11 >>> 8; //@line 21640
 $25 = HEAP16[$4 >> 1] | 0; //@line 21643
 HEAP16[$4 >> 1] = $25 + 1 << 16 >> 16; //@line 21645
 HEAP8[($25 & 65535) + ($6 + 381) >> 0] = $11 >>> 16; //@line 21648
 $31 = HEAP16[$4 >> 1] | 0; //@line 21651
 HEAP16[$4 >> 1] = $31 + 1 << 16 >> 16; //@line 21653
 HEAP8[($31 & 65535) + ($6 + 381) >> 0] = $11 >>> 24; //@line 21656
 $$0 = 0; //@line 21657
 $35 = ___async_retval; //@line 21658
 HEAP32[$35 >> 2] = $$0; //@line 21659
 return;
}
function _mbedtls_cipher_setup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 2121
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$0 = -24832; //@line 2126
  return $$0 | 0; //@line 2127
 }
 dest = $0; //@line 2129
 stop = dest + 68 | 0; //@line 2129
 do {
  HEAP32[dest >> 2] = 0; //@line 2129
  dest = dest + 4 | 0; //@line 2129
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[(HEAP32[$1 + 28 >> 2] | 0) + 20 >> 2] | 0; //@line 2133
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2134
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 2135
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 678; //@line 2138
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2140
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 2142
  sp = STACKTOP; //@line 2143
  return 0; //@line 2144
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2146
 HEAP32[$0 + 60 >> 2] = $8; //@line 2148
 if (!$8) {
  $$0 = -24960; //@line 2151
  return $$0 | 0; //@line 2152
 }
 HEAP32[$0 >> 2] = $1; //@line 2154
 if ((HEAP32[$1 + 4 >> 2] | 0) != 2) {
  $$0 = 0; //@line 2159
  return $$0 | 0; //@line 2160
 }
 HEAP32[$0 + 12 >> 2] = 4; //@line 2163
 HEAP32[$0 + 16 >> 2] = 14; //@line 2165
 $$0 = 0; //@line 2166
 return $$0 | 0; //@line 2167
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 33888
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33890
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 33892
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33894
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33896
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33898
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33900
 $13 = HEAP32[$2 >> 2] | 0; //@line 33901
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 40 >> 2] | 0; //@line 33904
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 33905
 $17 = FUNCTION_TABLE_ii[$16 & 15]($13) | 0; //@line 33906
 if (!___async) {
  HEAP8[___async_retval >> 0] = $17; //@line 33910
  ___async_unwind = 0; //@line 33911
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 623; //@line 33913
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 33915
 HEAP8[$ReallocAsyncCtx2 + 8 >> 0] = $4; //@line 33917
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 33919
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 33921
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 33923
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 33925
 sp = STACKTOP; //@line 33926
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_209($0) {
 $0 = $0 | 0;
 var $$pre13 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 6982
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6984
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6986
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6988
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6990
 $$pre13 = HEAP32[$2 >> 2] | 0; //@line 6991
 if (!$$pre13) {
  HEAP32[$4 >> 2] = 0; //@line 6994
  return;
 }
 $11 = HEAP32[$$pre13 + 4 >> 2] | 0; //@line 6998
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 6999
 FUNCTION_TABLE_vii[$11 & 31]($6, $8); //@line 7000
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 325; //@line 7003
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 7004
  HEAP32[$12 >> 2] = $2; //@line 7005
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 7006
  HEAP32[$13 >> 2] = $4; //@line 7007
  sp = STACKTOP; //@line 7008
  return;
 }
 ___async_unwind = 0; //@line 7011
 HEAP32[$ReallocAsyncCtx6 >> 2] = 325; //@line 7012
 $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 7013
 HEAP32[$12 >> 2] = $2; //@line 7014
 $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 7015
 HEAP32[$13 >> 2] = $4; //@line 7016
 sp = STACKTOP; //@line 7017
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_231($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 7776
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7780
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7782
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7784
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7786
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7788
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7790
 $15 = $4 + 12 | 0; //@line 7792
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 7793
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 7794
 $16 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 7) | 0; //@line 7795
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 7799
  ___async_unwind = 0; //@line 7800
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 223; //@line 7802
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $15; //@line 7804
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $8; //@line 7806
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $10; //@line 7808
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $12; //@line 7810
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $14; //@line 7812
 sp = STACKTOP; //@line 7813
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_259($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 9134
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9138
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9140
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9142
 $9 = $4 + 12 | 0; //@line 9144
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 9145
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 9146
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 2) | 0; //@line 9147
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 213; //@line 9150
  $11 = $ReallocAsyncCtx10 + 4 | 0; //@line 9151
  HEAP32[$11 >> 2] = $9; //@line 9152
  $12 = $ReallocAsyncCtx10 + 8 | 0; //@line 9153
  HEAP32[$12 >> 2] = $8; //@line 9154
  sp = STACKTOP; //@line 9155
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 9159
 ___async_unwind = 0; //@line 9160
 HEAP32[$ReallocAsyncCtx10 >> 2] = 213; //@line 9161
 $11 = $ReallocAsyncCtx10 + 4 | 0; //@line 9162
 HEAP32[$11 >> 2] = $9; //@line 9163
 $12 = $ReallocAsyncCtx10 + 8 | 0; //@line 9164
 HEAP32[$12 >> 2] = $8; //@line 9165
 sp = STACKTOP; //@line 9166
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_257($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 9073
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9077
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9079
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9081
 $9 = $4 + 12 | 0; //@line 9083
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 9084
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 9085
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 4) | 0; //@line 9086
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 209; //@line 9089
  $11 = $ReallocAsyncCtx11 + 4 | 0; //@line 9090
  HEAP32[$11 >> 2] = $9; //@line 9091
  $12 = $ReallocAsyncCtx11 + 8 | 0; //@line 9092
  HEAP32[$12 >> 2] = $8; //@line 9093
  sp = STACKTOP; //@line 9094
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 9098
 ___async_unwind = 0; //@line 9099
 HEAP32[$ReallocAsyncCtx11 >> 2] = 209; //@line 9100
 $11 = $ReallocAsyncCtx11 + 4 | 0; //@line 9101
 HEAP32[$11 >> 2] = $9; //@line 9102
 $12 = $ReallocAsyncCtx11 + 8 | 0; //@line 9103
 HEAP32[$12 >> 2] = $8; //@line 9104
 sp = STACKTOP; //@line 9105
 return;
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14716
 $1 = HEAP32[2570] | 0; //@line 14717
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 14723
 } else {
  $19 = 0; //@line 14725
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 14731
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 14737
    $12 = HEAP32[$11 >> 2] | 0; //@line 14738
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 14744
     HEAP8[$12 >> 0] = 10; //@line 14745
     $22 = 0; //@line 14746
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 14750
   $17 = ___overflow($1, 10) | 0; //@line 14751
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 790; //@line 14754
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 14756
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 14758
    sp = STACKTOP; //@line 14759
    return 0; //@line 14760
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14762
    $22 = $17 >> 31; //@line 14764
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 14771
 }
 return $22 | 0; //@line 14773
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_73($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 31718
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31720
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31722
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31724
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31726
 $9 = $2 + 944 | 0; //@line 31727
 HEAP8[$9 >> 0] = HEAP8[$9 >> 0] | 32; //@line 31730
 $12 = HEAP32[$4 >> 2] | 0; //@line 31731
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 31733
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($12, $2 + 996 | 0, 1); //@line 31734
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 31737
  $14 = $ReallocAsyncCtx17 + 4 | 0; //@line 31738
  HEAP32[$14 >> 2] = $6; //@line 31739
  $15 = $ReallocAsyncCtx17 + 8 | 0; //@line 31740
  HEAP32[$15 >> 2] = $8; //@line 31741
  sp = STACKTOP; //@line 31742
  return;
 }
 ___async_unwind = 0; //@line 31745
 HEAP32[$ReallocAsyncCtx17 >> 2] = 414; //@line 31746
 $14 = $ReallocAsyncCtx17 + 4 | 0; //@line 31747
 HEAP32[$14 >> 2] = $6; //@line 31748
 $15 = $ReallocAsyncCtx17 + 8 | 0; //@line 31749
 HEAP32[$15 >> 2] = $8; //@line 31750
 sp = STACKTOP; //@line 31751
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 9012
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9016
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9018
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9020
 $9 = $4 + 12 | 0; //@line 9022
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 9023
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(12) | 0; //@line 9024
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 3) | 0; //@line 9025
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 205; //@line 9028
  $11 = $ReallocAsyncCtx12 + 4 | 0; //@line 9029
  HEAP32[$11 >> 2] = $9; //@line 9030
  $12 = $ReallocAsyncCtx12 + 8 | 0; //@line 9031
  HEAP32[$12 >> 2] = $8; //@line 9032
  sp = STACKTOP; //@line 9033
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 9037
 ___async_unwind = 0; //@line 9038
 HEAP32[$ReallocAsyncCtx12 >> 2] = 205; //@line 9039
 $11 = $ReallocAsyncCtx12 + 4 | 0; //@line 9040
 HEAP32[$11 >> 2] = $9; //@line 9041
 $12 = $ReallocAsyncCtx12 + 8 | 0; //@line 9042
 HEAP32[$12 >> 2] = $8; //@line 9043
 sp = STACKTOP; //@line 9044
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_398($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx24 = 0, sp = 0;
 sp = STACKTOP; //@line 22374
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22378
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22380
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22382
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22384
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22386
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22388
 $15 = $4 + 12 | 0; //@line 22390
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22391
 $ReallocAsyncCtx24 = _emscripten_realloc_async_context(24) | 0; //@line 22392
 $16 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 6) | 0; //@line 22393
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 22397
  ___async_unwind = 0; //@line 22398
 }
 HEAP32[$ReallocAsyncCtx24 >> 2] = 273; //@line 22400
 HEAP32[$ReallocAsyncCtx24 + 4 >> 2] = $15; //@line 22402
 HEAP32[$ReallocAsyncCtx24 + 8 >> 2] = $8; //@line 22404
 HEAP32[$ReallocAsyncCtx24 + 12 >> 2] = $10; //@line 22406
 HEAP32[$ReallocAsyncCtx24 + 16 >> 2] = $12; //@line 22408
 HEAP32[$ReallocAsyncCtx24 + 20 >> 2] = $14; //@line 22410
 sp = STACKTOP; //@line 22411
 return;
}
function __ZN4mbed11InterruptInD0Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3874
 HEAP32[$0 >> 2] = 668; //@line 3875
 _gpio_irq_free($0 + 28 | 0); //@line 3877
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 3879
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 3885
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3886
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 3887
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 159; //@line 3890
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3892
    sp = STACKTOP; //@line 3893
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3896
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 3902
 if (!$10) {
  __ZdlPv($0); //@line 3905
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 3910
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3911
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 3912
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 160; //@line 3915
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 3917
  sp = STACKTOP; //@line 3918
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3921
 __ZdlPv($0); //@line 3922
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 7714
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7718
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7720
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7722
 $9 = $4 + 12 | 0; //@line 7724
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 7725
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 7726
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 9) | 0; //@line 7727
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 219; //@line 7730
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 7731
  HEAP32[$11 >> 2] = $9; //@line 7732
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 7733
  HEAP32[$12 >> 2] = $8; //@line 7734
  sp = STACKTOP; //@line 7735
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 7739
 ___async_unwind = 0; //@line 7740
 HEAP32[$ReallocAsyncCtx9 >> 2] = 219; //@line 7741
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 7742
 HEAP32[$11 >> 2] = $9; //@line 7743
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 7744
 HEAP32[$12 >> 2] = $8; //@line 7745
 sp = STACKTOP; //@line 7746
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_92($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 35205
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35207
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35209
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35211
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35213
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35215
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 35217
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 35219
 HEAP32[$2 + 1876 >> 2] = 5; //@line 35221
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(28) | 0; //@line 35222
 $16 = __ZN12LoRaWANStack18lora_state_machineEv($2) | 0; //@line 35223
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 35227
  ___async_unwind = 0; //@line 35228
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 311; //@line 35230
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $4; //@line 35232
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $6; //@line 35234
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $8; //@line 35236
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $10; //@line 35238
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $12; //@line 35240
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $14; //@line 35242
 sp = STACKTOP; //@line 35243
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 7281
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7285
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7287
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7289
 $9 = $4 + 12 | 0; //@line 7291
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 7292
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 7293
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 10) | 0; //@line 7294
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 234; //@line 7297
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 7298
  HEAP32[$11 >> 2] = $9; //@line 7299
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 7300
  HEAP32[$12 >> 2] = $8; //@line 7301
  sp = STACKTOP; //@line 7302
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 7306
 ___async_unwind = 0; //@line 7307
 HEAP32[$ReallocAsyncCtx9 >> 2] = 234; //@line 7308
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 7309
 HEAP32[$11 >> 2] = $9; //@line 7310
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 7311
 HEAP32[$12 >> 2] = $8; //@line 7312
 sp = STACKTOP; //@line 7313
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_201($0) {
 $0 = $0 | 0;
 var $$pre$i$i66 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 6174
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6180
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6182
 $$pre$i$i66 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 6183
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i66; //@line 6185
 if (!$$pre$i$i66) {
  HEAP32[___async_retval >> 2] = $8; //@line 6189
  return;
 }
 $12 = HEAP32[$$pre$i$i66 + 8 >> 2] | 0; //@line 6193
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 6194
 FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 6195
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 589; //@line 6198
  $13 = $ReallocAsyncCtx15 + 4 | 0; //@line 6199
  HEAP32[$13 >> 2] = $6; //@line 6200
  $14 = $ReallocAsyncCtx15 + 8 | 0; //@line 6201
  HEAP32[$14 >> 2] = $8; //@line 6202
  sp = STACKTOP; //@line 6203
  return;
 }
 ___async_unwind = 0; //@line 6206
 HEAP32[$ReallocAsyncCtx15 >> 2] = 589; //@line 6207
 $13 = $ReallocAsyncCtx15 + 4 | 0; //@line 6208
 HEAP32[$13 >> 2] = $6; //@line 6209
 $14 = $ReallocAsyncCtx15 + 8 | 0; //@line 6210
 HEAP32[$14 >> 2] = $8; //@line 6211
 sp = STACKTOP; //@line 6212
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 37239
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37241
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37243
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 37245
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 37247
 HEAP32[$4 + 12 >> 2] = HEAP32[$2 >> 2]; //@line 37250
 _equeue_event_dtor($4, 375); //@line 37251
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 37252
 $10 = _equeue_post($6, 376, $4) | 0; //@line 37253
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 377; //@line 37256
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 37257
  HEAP32[$11 >> 2] = $2; //@line 37258
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 37259
  HEAP32[$12 >> 2] = $8; //@line 37260
  sp = STACKTOP; //@line 37261
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 37265
 ___async_unwind = 0; //@line 37266
 HEAP32[$ReallocAsyncCtx3 >> 2] = 377; //@line 37267
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 37268
 HEAP32[$11 >> 2] = $2; //@line 37269
 $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 37270
 HEAP32[$12 >> 2] = $8; //@line 37271
 sp = STACKTOP; //@line 37272
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_249($0) {
 $0 = $0 | 0;
 var $$pre$i$i4 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 8680
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8686
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8688
 $$pre$i$i4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 8689
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i4; //@line 8690
 if (!$$pre$i$i4) {
  _gpio_irq_set($8 + 28 | 0, 2, 0); //@line 8694
  return;
 }
 $12 = HEAP32[$$pre$i$i4 + 8 >> 2] | 0; //@line 8699
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 8700
 FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 8701
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 167; //@line 8704
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 8705
  HEAP32[$13 >> 2] = $6; //@line 8706
  $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 8707
  HEAP32[$14 >> 2] = $8; //@line 8708
  sp = STACKTOP; //@line 8709
  return;
 }
 ___async_unwind = 0; //@line 8712
 HEAP32[$ReallocAsyncCtx5 >> 2] = 167; //@line 8713
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 8714
 HEAP32[$13 >> 2] = $6; //@line 8715
 $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 8716
 HEAP32[$14 >> 2] = $8; //@line 8717
 sp = STACKTOP; //@line 8718
 return;
}
function __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre$phiZ2D = 0, $26 = 0;
 if ($2) {
  HEAP8[$1 + 15 >> 0] = HEAP8[$0 + 12 >> 0] | 0; //@line 26494
  HEAP32[$1 + 748 >> 2] = HEAPU16[$0 + 36 >> 1]; //@line 26499
  HEAP32[$1 + 752 >> 2] = HEAPU16[$0 + 38 >> 1]; //@line 26504
  HEAP32[$1 + 756 >> 2] = HEAPU16[$0 + 40 >> 1]; //@line 26509
  HEAP32[$1 + 760 >> 2] = HEAPU16[$0 + 42 >> 1]; //@line 26514
  HEAP32[$1 + 764 >> 2] = HEAPU16[$0 + 44 >> 1]; //@line 26519
  $26 = $0 + 132 | 0; //@line 26520
  HEAP8[$1 + 781 >> 0] = (HEAPU8[$26 >> 0] | 0) >>> 1 & 1; //@line 26525
  $$pre$phiZ2D = $26; //@line 26526
 } else {
  $$pre$phiZ2D = $0 + 132 | 0; //@line 26529
 }
 HEAP8[$1 + 736 >> 0] = HEAP8[$0 + 23 >> 0] | 0; //@line 26534
 HEAP8[$1 + 737 >> 0] = HEAP8[$0 + 30 >> 0] | 0; //@line 26538
 HEAP8[$1 + 769 >> 0] = HEAP8[$0 + 34 >> 0] | 0; //@line 26542
 HEAP32[$1 + 772 >> 2] = HEAP32[$0 + 68 >> 2]; //@line 26546
 HEAP8[$1 + 776 >> 0] = HEAP8[$0 + 64 >> 0] | 0; //@line 26550
 HEAP8[$1 + 780 >> 0] = HEAP8[$$pre$phiZ2D >> 0] & 1; //@line 26554
 HEAP32[$1 + 784 >> 2] = HEAP32[$0 + 56 >> 2]; //@line 26558
 HEAP32[$1 + 788 >> 2] = HEAP32[$0 + 60 >> 2]; //@line 26562
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_62($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 30586
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30590
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30592
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30594
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 30597
 $10 = HEAP32[$4 >> 2] | 0; //@line 30598
 $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 76 >> 2] | 0; //@line 30601
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 30602
 FUNCTION_TABLE_vi[$13 & 1023]($10); //@line 30603
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 637; //@line 30606
  $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 30607
  HEAP32[$14 >> 2] = $6; //@line 30608
  $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 30609
  HEAP32[$15 >> 2] = $8; //@line 30610
  sp = STACKTOP; //@line 30611
  return;
 }
 ___async_unwind = 0; //@line 30614
 HEAP32[$ReallocAsyncCtx7 >> 2] = 637; //@line 30615
 $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 30616
 HEAP32[$14 >> 2] = $6; //@line 30617
 $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 30618
 HEAP32[$15 >> 2] = $8; //@line 30619
 sp = STACKTOP; //@line 30620
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb($0) {
 $0 = $0 | 0;
 var $16 = 0, $19 = 0, $2 = 0, $21 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28856
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28858
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28862
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28864
 HEAP32[$2 + 980 >> 2] = HEAP32[$0 + 8 >> 2]; //@line 28866
 if (!(HEAP8[$2 + 373 >> 0] | 0)) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 28874
  $16 = $2 + 380 | 0; //@line 28875
  HEAP8[$16 >> 0] = (HEAP8[$16 >> 0] | 0) + 1 << 24 >> 24; //@line 28878
 }
 $19 = HEAP32[$6 >> 2] | 0; //@line 28880
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 28882
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($19, $2 + 996 | 0, 1); //@line 28883
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 373; //@line 28886
  $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 28887
  HEAP32[$21 >> 2] = $8; //@line 28888
  sp = STACKTOP; //@line 28889
  return;
 }
 ___async_unwind = 0; //@line 28892
 HEAP32[$ReallocAsyncCtx4 >> 2] = 373; //@line 28893
 $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 28894
 HEAP32[$21 >> 2] = $8; //@line 28895
 sp = STACKTOP; //@line 28896
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_60($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30489
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30491
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30495
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30497
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30499
 $11 = HEAP32[$2 >> 2] | 0; //@line 30500
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 30503
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 30504
 $17 = HEAP16[$15 >> 1] & 255; //@line 30506
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 30507
 FUNCTION_TABLE_viii[$14 & 7]($11, 1, $17); //@line 30508
 if (!___async) {
  ___async_unwind = 0; //@line 30511
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 635; //@line 30513
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 30515
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 30517
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 1; //@line 30519
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 30521
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 30523
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 30525
 sp = STACKTOP; //@line 30526
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_59($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30445
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30447
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30451
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30453
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30455
 $11 = HEAP32[$2 >> 2] | 0; //@line 30456
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 30459
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 30460
 $17 = HEAP16[$15 >> 1] & 255; //@line 30462
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 30463
 FUNCTION_TABLE_viii[$14 & 7]($11, 0, $17); //@line 30464
 if (!___async) {
  ___async_unwind = 0; //@line 30467
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 635; //@line 30469
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 30471
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 30473
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 0; //@line 30475
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 30477
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 30479
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 30481
 sp = STACKTOP; //@line 30482
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_352($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 16630
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16632
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16634
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16638
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16642
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16644
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16646
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16648
 HEAP8[$2 + 688 >> 0] = 2; //@line 16650
 _printf(10904, $4) | 0; //@line 16651
 HEAP32[$8 >> 2] = 3; //@line 16652
 _printf(10970, $8) | 0; //@line 16653
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 16654
 _putchar(10) | 0; //@line 16655
 if (!___async) {
  ___async_unwind = 0; //@line 16658
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 110; //@line 16660
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 16662
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $12; //@line 16664
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $14; //@line 16666
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $16; //@line 16668
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $18; //@line 16670
 sp = STACKTOP; //@line 16671
 return;
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$1 = 0, $12 = 0, $22 = 0, $3 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 25098
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 25100
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 64 >> 2] | 0; //@line 25103
 $8 = HEAP32[$1 + 4 >> 2] | 0; //@line 25105
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 25106
 $9 = FUNCTION_TABLE_iii[$6 & 31]($3, $8) | 0; //@line 25107
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 638; //@line 25110
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 25112
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 25114
  sp = STACKTOP; //@line 25115
  return 0; //@line 25116
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 25118
  $$ = $9 ? 7 : 6; //@line 25119
  $12 = HEAP8[$1 >> 0] | 0; //@line 25120
  $$1 = ($12 << 24 >> 24 < (HEAP8[$0 + 28 >> 0] | 0) ? 1 : $12 << 24 >> 24 > (HEAP8[$0 + 29 >> 0] | 0)) ? $$ & 5 : $$; //@line 25129
  $22 = HEAP8[$1 + 1 >> 0] | 0; //@line 25131
  return (($22 << 24 >> 24 < (HEAP8[$0 + 32 >> 0] | 0) ? 1 : $22 << 24 >> 24 > (HEAP8[$0 + 33 >> 0] | 0)) ? $$1 & 3 : $$1) | 0; //@line 25141
 }
 return 0; //@line 25143
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_154($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1464
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1470
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1472
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1474
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1476
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 1481
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 1483
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 1484
 if (!___async) {
  ___async_unwind = 0; //@line 1487
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 813; //@line 1489
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 1491
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 1493
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 1495
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 1497
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 1499
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 1501
 sp = STACKTOP; //@line 1502
 return;
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27784
 STACKTOP = STACKTOP + 16 | 0; //@line 27785
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 27785
 $$byval_copy = sp; //@line 27786
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27788
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27790
 $6 = HEAP32[$2 + 1328 >> 2] | 0; //@line 27792
 HEAP32[$4 >> 2] = 366; //@line 27793
 HEAP32[$4 + 4 >> 2] = 0; //@line 27795
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 27796
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 27797
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 27797
 $7 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($6, $2, $$byval_copy) | 0; //@line 27798
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 523; //@line 27801
  sp = STACKTOP; //@line 27802
  STACKTOP = sp; //@line 27803
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 27806
 ___async_unwind = 0; //@line 27807
 HEAP32[$ReallocAsyncCtx2 >> 2] = 523; //@line 27808
 sp = STACKTOP; //@line 27809
 STACKTOP = sp; //@line 27810
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 36246
 STACKTOP = STACKTOP + 16 | 0; //@line 36247
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 36247
 $$byval_copy = sp; //@line 36248
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36250
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36252
 $6 = HEAP32[$2 + 1328 >> 2] | 0; //@line 36254
 HEAP32[$4 >> 2] = 513; //@line 36255
 HEAP32[$4 + 4 >> 2] = 0; //@line 36257
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 36258
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 36259
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 36259
 $7 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($6, $2, $$byval_copy) | 0; //@line 36260
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 514; //@line 36263
  sp = STACKTOP; //@line 36264
  STACKTOP = sp; //@line 36265
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 36268
 ___async_unwind = 0; //@line 36269
 HEAP32[$ReallocAsyncCtx2 >> 2] = 514; //@line 36270
 sp = STACKTOP; //@line 36271
 STACKTOP = sp; //@line 36272
 return;
}
function __ZN4mbed5TimerC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4304
 HEAP32[$0 >> 2] = 0; //@line 4305
 $1 = $0 + 8 | 0; //@line 4306
 $2 = $0 + 16 | 0; //@line 4307
 HEAP32[$1 >> 2] = 0; //@line 4308
 HEAP32[$1 + 4 >> 2] = 0; //@line 4308
 HEAP32[$1 + 8 >> 2] = 0; //@line 4308
 HEAP32[$1 + 12 >> 2] = 0; //@line 4308
 $4 = $0 + 24 | 0; //@line 4310
 HEAP32[$4 >> 2] = _get_us_ticker_data() | 0; //@line 4311
 HEAP8[$0 + 28 >> 0] = 1; //@line 4313
 $6 = HEAP32[$4 >> 2] | 0; //@line 4314
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 4315
 $7 = _ticker_read_us($6) | 0; //@line 4316
 $8 = tempRet0; //@line 4317
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 174; //@line 4320
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4322
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 4324
  sp = STACKTOP; //@line 4325
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4328
  $11 = $1; //@line 4329
  HEAP32[$11 >> 2] = $7; //@line 4331
  HEAP32[$11 + 4 >> 2] = $8; //@line 4334
  $15 = $2; //@line 4335
  HEAP32[$15 >> 2] = 0; //@line 4337
  HEAP32[$15 + 4 >> 2] = 0; //@line 4340
  return;
 }
}
function __GLOBAL__sub_I_main_cpp() {
 var $AsyncCtx = 0, $AsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 6668
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6669
 __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_(19280, 9, 8, 7, 6, 23, 4, 5, 66, 67, 0, 1, -1, -1, -1, -1, 62, -1, -1); //@line 6670
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 750; //@line 6673
  sp = STACKTOP; //@line 6674
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6677
 __ZN5Sht31C2E7PinNameS0_(24232, 10, 11); //@line 6678
 __ZN4mbed11InterruptInC2E7PinName(23256, 1337); //@line 6679
 __ZN6events10EventQueueC2EjPh(23328, 1664, 0); //@line 6680
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6681
 __ZN16LoRaWANInterfaceC2ER9LoRaRadio(23528, 19280); //@line 6682
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 751; //@line 6685
  sp = STACKTOP; //@line 6686
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6689
  dest = 23536; //@line 6690
  stop = dest + 48 | 0; //@line 6690
  do {
   HEAP32[dest >> 2] = 0; //@line 6690
   dest = dest + 4 | 0; //@line 6690
  } while ((dest | 0) < (stop | 0));
  return;
 }
}
function __ZN7LoRaMac11schedule_txEv__async_cb_368($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 17859
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17867
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17869
 $11 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17870
 $12 = (HEAP32[$0 + 8 >> 2] | 0) + 1016 | 0; //@line 17871
 $13 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 17872
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 17873
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($11, $12, $13); //@line 17874
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 500; //@line 17877
  $14 = $ReallocAsyncCtx9 + 4 | 0; //@line 17878
  HEAP32[$14 >> 2] = $8; //@line 17879
  $15 = $ReallocAsyncCtx9 + 8 | 0; //@line 17880
  HEAP32[$15 >> 2] = $10; //@line 17881
  sp = STACKTOP; //@line 17882
  return;
 }
 ___async_unwind = 0; //@line 17885
 HEAP32[$ReallocAsyncCtx9 >> 2] = 500; //@line 17886
 $14 = $ReallocAsyncCtx9 + 4 | 0; //@line 17887
 HEAP32[$14 >> 2] = $8; //@line 17888
 $15 = $ReallocAsyncCtx9 + 8 | 0; //@line 17889
 HEAP32[$15 >> 2] = $10; //@line 17890
 sp = STACKTOP; //@line 17891
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_41($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 28596
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28598
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28600
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28602
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28604
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28606
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28608
 $15 = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 28611
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(28) | 0; //@line 28612
 __ZN7LoRaPHY18put_radio_to_sleepEv($15); //@line 28613
 if (!___async) {
  ___async_unwind = 0; //@line 28616
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 527; //@line 28618
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 28620
 HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $6; //@line 28622
 HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $4; //@line 28624
 HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $8; //@line 28626
 HEAP32[$ReallocAsyncCtx13 + 20 >> 2] = $10; //@line 28628
 HEAP32[$ReallocAsyncCtx13 + 24 >> 2] = $12; //@line 28630
 sp = STACKTOP; //@line 28631
 return;
}
function _mbedtls_gcm_setkey__async_cb_288($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11127
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11129
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11131
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11133
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11135
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11137
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11139
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11141
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 11145
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 11148
 $15 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 11149
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 11153
  ___async_unwind = 0; //@line 11154
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 697; //@line 11156
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 11158
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 11160
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 11162
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 11164
 sp = STACKTOP; //@line 11165
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22034
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22036
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22038
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22042
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 22046
  label = 4; //@line 22047
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 22052
   label = 4; //@line 22053
  } else {
   $$037$off039 = 3; //@line 22055
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 22059
  $17 = $8 + 40 | 0; //@line 22060
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 22063
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 22073
    $$037$off039 = $$037$off038; //@line 22074
   } else {
    $$037$off039 = $$037$off038; //@line 22076
   }
  } else {
   $$037$off039 = $$037$off038; //@line 22079
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 22082
 return;
}
function __ZN7LoRaPHY11add_channelEP16channel_params_th__async_cb($0) {
 $0 = $0 | 0;
 var $$024 = 0, $10 = 0, $12 = 0, $2 = 0, $22 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $not$ = 0;
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 3125
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3127
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3129
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3131
 $not$ = HEAP8[___async_retval >> 0] & 1 ^ 1; //@line 3135
 if ($2 | $not$) {
  $$024 = $2 ? $2 & $not$ ? -1006 : -1005 : -1004; //@line 3141
  $27 = ___async_retval; //@line 3142
  HEAP32[$27 >> 2] = $$024; //@line 3143
  return;
 }
 $10 = $4 + 112 | 0; //@line 3146
 $12 = (HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 3148
 HEAP32[$12 >> 2] = HEAP32[$8 >> 2]; //@line 3149
 HEAP32[$12 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 3149
 HEAP32[$12 + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 3149
 HEAP8[(HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$8 + 9 >> 0] | 0; //@line 3154
 $22 = (HEAP32[$4 + 120 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 3160
 HEAP16[$22 >> 1] = 1 << ($6 & 15) | (HEAPU16[$22 >> 1] | 0); //@line 3165
 $$024 = 0; //@line 3166
 $27 = ___async_retval; //@line 3167
 HEAP32[$27 >> 2] = $$024; //@line 3168
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 14326
 while (1) {
  if ((HEAPU8[16799 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 14333
   break;
  }
  $7 = $$016 + 1 | 0; //@line 14336
  if (($7 | 0) == 87) {
   $$01214 = 16887; //@line 14339
   $$115 = 87; //@line 14339
   label = 5; //@line 14340
   break;
  } else {
   $$016 = $7; //@line 14343
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 16887; //@line 14349
  } else {
   $$01214 = 16887; //@line 14351
   $$115 = $$016; //@line 14351
   label = 5; //@line 14352
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 14357
   $$113 = $$01214; //@line 14358
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 14362
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 14369
   if (!$$115) {
    $$012$lcssa = $$113; //@line 14372
    break;
   } else {
    $$01214 = $$113; //@line 14375
    label = 5; //@line 14376
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 14383
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 15081
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 15090
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 15095
      HEAP32[$13 >> 2] = $2; //@line 15096
      $19 = $1 + 40 | 0; //@line 15097
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 15100
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 15110
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 15114
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 15121
    }
   }
  }
 } while (0);
 return;
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1345
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1347
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1349
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1351
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 1353
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 1355
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 18827; //@line 1360
  HEAP32[$4 + 4 >> 2] = $6; //@line 1362
  _abort_message(18736, $4); //@line 1363
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 1366
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 1369
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 1370
 $16 = FUNCTION_TABLE_ii[$15 & 15]($12) | 0; //@line 1371
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 1375
  ___async_unwind = 0; //@line 1376
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 792; //@line 1378
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 1380
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 1382
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 1384
 sp = STACKTOP; //@line 1385
 return;
}
function _mbedtls_gcm_setkey__async_cb_289($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11172
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11174
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11176
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11178
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11180
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11182
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11184
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11186
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 11187
 $15 = _mbedtls_cipher_setup($2, $4) | 0; //@line 11188
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 11192
  ___async_unwind = 0; //@line 11193
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 696; //@line 11195
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 11197
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 11199
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $8; //@line 11201
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $10; //@line 11203
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $12; //@line 11205
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $14; //@line 11207
 sp = STACKTOP; //@line 11208
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_179($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3418
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3420
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3422
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3424
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3426
 HEAP32[$2 >> 2] = 2; //@line 3427
 $9 = $2 + 4 | 0; //@line 3428
 HEAP8[$9 >> 0] = 1; //@line 3429
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 3430
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($4, $2) | 0; //@line 3431
 if (!___async) {
  ___async_unwind = 0; //@line 3434
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 317; //@line 3436
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 3438
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $9; //@line 3440
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $4; //@line 3442
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $2; //@line 3444
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $6; //@line 3446
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $8; //@line 3448
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $2; //@line 3450
 sp = STACKTOP; //@line 3451
 return;
}
function __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 $5 = +$5;
 $6 = $6 | 0;
 var $13 = 0, $16 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23701
 STACKTOP = STACKTOP + 16 | 0; //@line 23702
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 23702
 $7 = sp; //@line 23703
 HEAP8[$7 >> 0] = $1; //@line 23704
 HEAP8[$7 + 1 >> 0] = $2; //@line 23706
 HEAP8[$7 + 2 >> 0] = $3; //@line 23708
 HEAPF32[$7 + 4 >> 2] = $4; //@line 23710
 HEAPF32[$7 + 8 >> 2] = $5; //@line 23712
 HEAP16[$7 + 12 >> 1] = $6; //@line 23714
 $13 = HEAP32[$0 >> 2] | 0; //@line 23715
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 68 >> 2] | 0; //@line 23718
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 23719
 FUNCTION_TABLE_viii[$16 & 7]($13, $7, 0); //@line 23720
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 617; //@line 23723
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 23725
  sp = STACKTOP; //@line 23726
  STACKTOP = sp; //@line 23727
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 23729
  STACKTOP = sp; //@line 23730
  return;
 }
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11833
 $1 = $0 + 12 | 0; //@line 11834
 $2 = HEAP32[$1 >> 2] | 0; //@line 11835
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11839
   _mbed_assert_internal(15352, 15357, 528); //@line 11840
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 380; //@line 11843
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 11845
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 11847
    sp = STACKTOP; //@line 11848
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 11851
    $7 = HEAP32[$1 >> 2] | 0; //@line 11853
    break;
   }
  } else {
   $7 = $2; //@line 11857
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 11860
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11861
 FUNCTION_TABLE_vi[$6 & 1023]($0); //@line 11862
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 381; //@line 11865
  sp = STACKTOP; //@line 11866
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11869
  return;
 }
}
function __ZN4mbed11InterruptInD2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3823
 HEAP32[$0 >> 2] = 668; //@line 3824
 _gpio_irq_free($0 + 28 | 0); //@line 3826
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 3828
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 3834
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3835
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 3836
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 157; //@line 3839
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3841
    sp = STACKTOP; //@line 3842
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3845
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 3851
 if (!$10) {
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 3858
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3859
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 3860
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 158; //@line 3863
  sp = STACKTOP; //@line 3864
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3867
 return;
}
function __ZL12send_messagev__async_cb_143($0) {
 $0 = $0 | 0;
 var $12 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 456
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 458
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 462
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 464
 $AsyncRetVal = HEAP16[___async_retval >> 1] | 0; //@line 468
 $12 = $AsyncRetVal << 16 >> 16; //@line 469
 if ($AsyncRetVal << 16 >> 16 >= 0) {
  HEAP32[$2 >> 2] = $12; //@line 472
  _printf(16228, $2) | 0; //@line 473
  return;
 }
 if ($AsyncRetVal << 16 >> 16 != -1001) {
  HEAP32[$8 >> 2] = $12; //@line 478
  _printf(16204, $8) | 0; //@line 479
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 482
 _puts(16176) | 0; //@line 483
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 765; //@line 486
  $15 = $ReallocAsyncCtx + 4 | 0; //@line 487
  HEAP32[$15 >> 2] = $6; //@line 488
  sp = STACKTOP; //@line 489
  return;
 }
 ___async_unwind = 0; //@line 492
 HEAP32[$ReallocAsyncCtx >> 2] = 765; //@line 493
 $15 = $ReallocAsyncCtx + 4 | 0; //@line 494
 HEAP32[$15 >> 2] = $6; //@line 495
 sp = STACKTOP; //@line 496
 return;
}
function __ZN4mbed7Timeout7handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4259
 $1 = $0 + 40 | 0; //@line 4260
 $2 = $0 + 52 | 0; //@line 4261
 $3 = HEAP32[$2 >> 2] | 0; //@line 4262
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4266
   _mbed_assert_internal(15352, 15357, 528); //@line 4267
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 172; //@line 4270
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 4272
    HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 4274
    sp = STACKTOP; //@line 4275
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4278
    $8 = HEAP32[$2 >> 2] | 0; //@line 4280
    break;
   }
  } else {
   $8 = $3; //@line 4284
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 4287
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4288
 FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 4289
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 173; //@line 4292
  sp = STACKTOP; //@line 4293
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4296
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_396($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx25 = 0, sp = 0;
 sp = STACKTOP; //@line 22296
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22300
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22302
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22304
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22306
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22308
 $13 = $4 + 12 | 0; //@line 22310
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22311
 $ReallocAsyncCtx25 = _emscripten_realloc_async_context(20) | 0; //@line 22312
 $14 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 5) | 0; //@line 22313
 if (!___async) {
  HEAP32[___async_retval >> 2] = $14; //@line 22317
  ___async_unwind = 0; //@line 22318
 }
 HEAP32[$ReallocAsyncCtx25 >> 2] = 268; //@line 22320
 HEAP32[$ReallocAsyncCtx25 + 4 >> 2] = $13; //@line 22322
 HEAP32[$ReallocAsyncCtx25 + 8 >> 2] = $8; //@line 22324
 HEAP32[$ReallocAsyncCtx25 + 12 >> 2] = $10; //@line 22326
 HEAP32[$ReallocAsyncCtx25 + 16 >> 2] = $12; //@line 22328
 sp = STACKTOP; //@line 22329
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_519($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 38060
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 38062
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 38064
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 38070
 _printf(10904, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 38073
 HEAP32[$10 >> 2] = 3; //@line 38074
 _printf(10999, $10) | 0; //@line 38075
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 38076
 _putchar(10) | 0; //@line 38077
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 142; //@line 38080
  $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 38081
  HEAP32[$13 >> 2] = $4; //@line 38082
  $14 = $ReallocAsyncCtx4 + 8 | 0; //@line 38083
  HEAP32[$14 >> 2] = $2; //@line 38084
  sp = STACKTOP; //@line 38085
  return;
 }
 ___async_unwind = 0; //@line 38088
 HEAP32[$ReallocAsyncCtx4 >> 2] = 142; //@line 38089
 $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 38090
 HEAP32[$13 >> 2] = $4; //@line 38091
 $14 = $ReallocAsyncCtx4 + 8 | 0; //@line 38092
 HEAP32[$14 >> 2] = $2; //@line 38093
 sp = STACKTOP; //@line 38094
 return;
}
function __ZN4mbed6TickerD0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6456
 HEAP32[$0 >> 2] = 10108; //@line 6457
 $1 = $0 + 40 | 0; //@line 6458
 _emscripten_asm_const_ii(15, $1 | 0) | 0; //@line 6459
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 6461
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 6466
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6467
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 6468
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 743; //@line 6471
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6473
    sp = STACKTOP; //@line 6474
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6477
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6482
 __ZN4mbed10TimerEventD2Ev($0); //@line 6483
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 744; //@line 6486
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 6488
  sp = STACKTOP; //@line 6489
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6492
  __ZdlPv($0); //@line 6493
  return;
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_200($0) {
 $0 = $0 | 0;
 var $$pre122 = 0, $10 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 6132
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6134
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6136
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6138
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6140
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6142
 $$pre122 = HEAP32[$2 >> 2] | 0; //@line 6143
 if (!$$pre122) {
  HEAP32[$4 >> 2] = 0; //@line 6146
  HEAP32[___async_retval >> 2] = $10; //@line 6148
  return;
 }
 $13 = HEAP32[$$pre122 + 4 >> 2] | 0; //@line 6152
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 6153
 FUNCTION_TABLE_vii[$13 & 31]($6, $8); //@line 6154
 if (!___async) {
  ___async_unwind = 0; //@line 6157
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 588; //@line 6159
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 6161
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $4; //@line 6163
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $8; //@line 6165
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $10; //@line 6167
 sp = STACKTOP; //@line 6168
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_470($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 34403
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 34407
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34409
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 34410
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 76 >> 2] | 0; //@line 34413
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 34414
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 34415
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 630; //@line 34418
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 34419
  HEAP8[$11 >> 0] = $4; //@line 34420
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 34421
  HEAP32[$12 >> 2] = $6; //@line 34422
  sp = STACKTOP; //@line 34423
  return;
 }
 ___async_unwind = 0; //@line 34426
 HEAP32[$ReallocAsyncCtx9 >> 2] = 630; //@line 34427
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 34428
 HEAP8[$11 >> 0] = $4; //@line 34429
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 34430
 HEAP32[$12 >> 2] = $6; //@line 34431
 sp = STACKTOP; //@line 34432
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_397($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx30 = 0, sp = 0;
 sp = STACKTOP; //@line 22335
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22339
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22341
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$4 >> 2] = 6; //@line 22344
  HEAP32[___async_retval >> 2] = -1014; //@line 22346
  return;
 }
 $ReallocAsyncCtx30 = _emscripten_realloc_async_context(12) | 0; //@line 22349
 _mbed_assert_internal(13142, 12226, 1243); //@line 22350
 if (___async) {
  HEAP32[$ReallocAsyncCtx30 >> 2] = 270; //@line 22353
  $8 = $ReallocAsyncCtx30 + 4 | 0; //@line 22354
  HEAP32[$8 >> 2] = $4; //@line 22355
  $9 = $ReallocAsyncCtx30 + 8 | 0; //@line 22356
  HEAP32[$9 >> 2] = $6; //@line 22357
  sp = STACKTOP; //@line 22358
  return;
 }
 ___async_unwind = 0; //@line 22361
 HEAP32[$ReallocAsyncCtx30 >> 2] = 270; //@line 22362
 $8 = $ReallocAsyncCtx30 + 4 | 0; //@line 22363
 HEAP32[$8 >> 2] = $4; //@line 22364
 $9 = $ReallocAsyncCtx30 + 8 | 0; //@line 22365
 HEAP32[$9 >> 2] = $6; //@line 22366
 sp = STACKTOP; //@line 22367
 return;
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8778
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8780
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8782
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8784
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8786
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8788
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 8794
  return;
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 8797
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 8798
 __ZN7LoRaPHY18put_radio_to_sleepEv($12); //@line 8799
 if (!___async) {
  ___async_unwind = 0; //@line 8802
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 592; //@line 8804
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 8806
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 8808
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 8810
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 8812
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 8814
 sp = STACKTOP; //@line 8815
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_348($0) {
 $0 = $0 | 0;
 var $19 = 0, $23 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16361
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16365
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16367
 HEAP32[$4 + 364 >> 2] = 2; //@line 16369
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 16377
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 16382
 if ((HEAP32[$6 >> 2] | 0) != 2) {
  $19 = $4 + 944 | 0; //@line 16386
  HEAP8[$19 >> 0] = HEAP8[$19 >> 0] | 32; //@line 16389
 }
 $23 = HEAP32[$4 + 356 >> 2] | 0; //@line 16392
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 16394
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($23, $4 + 996 | 0, 1); //@line 16395
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 452; //@line 16398
  sp = STACKTOP; //@line 16399
  return;
 }
 ___async_unwind = 0; //@line 16402
 HEAP32[$ReallocAsyncCtx3 >> 2] = 452; //@line 16403
 sp = STACKTOP; //@line 16404
 return;
}
function _ticker_read_us__async_cb_444($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 32154
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32156
 $3 = $2 + 4 | 0; //@line 32157
 $4 = HEAP32[$3 >> 2] | 0; //@line 32158
 $7 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 32161
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 32162
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 32163
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 718; //@line 32166
  $9 = $ReallocAsyncCtx + 4 | 0; //@line 32167
  HEAP32[$9 >> 2] = $3; //@line 32168
  $10 = $ReallocAsyncCtx + 8 | 0; //@line 32169
  HEAP32[$10 >> 2] = $4; //@line 32170
  sp = STACKTOP; //@line 32171
  return;
 }
 HEAP32[___async_retval >> 2] = $8; //@line 32175
 ___async_unwind = 0; //@line 32176
 HEAP32[$ReallocAsyncCtx >> 2] = 718; //@line 32177
 $9 = $ReallocAsyncCtx + 4 | 0; //@line 32178
 HEAP32[$9 >> 2] = $3; //@line 32179
 $10 = $ReallocAsyncCtx + 8 | 0; //@line 32180
 HEAP32[$10 >> 2] = $4; //@line 32181
 sp = STACKTOP; //@line 32182
 return;
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6523
 $2 = $0 + 12 | 0; //@line 6525
 $3 = HEAP32[$2 >> 2] | 0; //@line 6526
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6530
   _mbed_assert_internal(15352, 15357, 528); //@line 6531
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 746; //@line 6534
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 6536
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 6538
    sp = STACKTOP; //@line 6539
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6542
    $8 = HEAP32[$2 >> 2] | 0; //@line 6544
    break;
   }
  } else {
   $8 = $3; //@line 6548
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 6551
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6553
 FUNCTION_TABLE_vi[$7 & 1023]($0); //@line 6554
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 747; //@line 6557
  sp = STACKTOP; //@line 6558
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6561
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4215
 HEAP32[$0 >> 2] = 10108; //@line 4216
 __ZN4mbed6Ticker6detachEv($0); //@line 4217
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 4219
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 4225
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4226
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 4227
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 170; //@line 4230
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4232
    sp = STACKTOP; //@line 4233
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4236
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4241
 __ZN4mbed10TimerEventD2Ev($0); //@line 4242
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 171; //@line 4245
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 4247
  sp = STACKTOP; //@line 4248
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4251
  __ZdlPv($0); //@line 4252
  return;
 }
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14914
 STACKTOP = STACKTOP + 16 | 0; //@line 14915
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14915
 $1 = sp; //@line 14916
 HEAP32[$1 >> 2] = $varargs; //@line 14917
 $2 = HEAP32[2538] | 0; //@line 14918
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14919
 _vfprintf($2, $0, $1) | 0; //@line 14920
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 793; //@line 14923
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 14925
  sp = STACKTOP; //@line 14926
  STACKTOP = sp; //@line 14927
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14929
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14930
 _fputc(10, $2) | 0; //@line 14931
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 794; //@line 14934
  sp = STACKTOP; //@line 14935
  STACKTOP = sp; //@line 14936
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 14938
  _abort(); //@line 14939
 }
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_517($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 37970
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37972
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37974
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 37976
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 37978
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 37980
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 37982
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(28) | 0; //@line 37983
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($4); //@line 37984
 if (!___async) {
  ___async_unwind = 0; //@line 37987
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 141; //@line 37989
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 37991
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 37993
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 37995
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 37997
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 37999
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $12; //@line 38001
 sp = STACKTOP; //@line 38002
 return;
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28711
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28713
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28715
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28717
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28719
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[5811] | 0)) {
  _serial_init(23248, 2, 3); //@line 28727
 }
 $12 = HEAP8[$6 >> 0] | 0; //@line 28730
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 28731
 _serial_putc(23248, $12); //@line 28732
 if (!___async) {
  ___async_unwind = 0; //@line 28735
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 737; //@line 28737
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = 0; //@line 28739
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $AsyncRetVal; //@line 28741
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 28743
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $4; //@line 28745
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $6; //@line 28747
 sp = STACKTOP; //@line 28748
 return;
}
function __ZN7LoRaPHY17calculate_backoffEP16backoff_params_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$034 = 0, $$sink = 0, $11 = 0, $13 = 0, $14 = 0, $18 = 0, $3 = 0, $30 = 0;
 $3 = HEAP32[$0 + 72 >> 2] | 0; //@line 26888
 $11 = HEAPU8[(HEAP32[$0 + 112 >> 2] | 0) + ((HEAPU8[$1 + 3 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0; //@line 26896
 $13 = HEAP16[$3 + ($11 * 24 | 0) >> 1] | 0; //@line 26898
 $14 = $3 + ($11 * 24 | 0) + 12 | 0; //@line 26899
 HEAP32[$14 >> 2] = 0; //@line 26900
 if (!(HEAP8[$1 >> 0] | 0)) {
  $18 = HEAP32[$1 + 4 >> 2] | 0; //@line 26905
  $$0 = $18 >>> 0 < 36e5 ? 100 : $18 >>> 0 < 396e5 ? 1e3 : 1e4; //@line 26909
  $$034 = ($13 & 65535) > ($$0 & 65535) ? $13 : $$0; //@line 26912
 } else {
  $$034 = $13; //@line 26914
 }
 if (!(HEAP8[$1 + 2 >> 0] | 0)) {
  if (!(HEAP8[$1 + 1 >> 0] | 0)) {
   $$sink = 0; //@line 26924
   HEAP32[$14 >> 2] = $$sink; //@line 26925
   return;
  }
 }
 $30 = HEAP32[$1 + 8 >> 2] | 0; //@line 26930
 $$sink = (Math_imul($30, $$034 & 65535) | 0) - $30 | 0; //@line 26934
 HEAP32[$14 >> 2] = $$sink; //@line 26935
 return;
}
function __ZN4mbed6TickerD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6415
 HEAP32[$0 >> 2] = 10108; //@line 6416
 $1 = $0 + 40 | 0; //@line 6417
 _emscripten_asm_const_ii(15, $1 | 0) | 0; //@line 6418
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 6420
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 6425
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6426
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 6427
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 741; //@line 6430
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6432
    sp = STACKTOP; //@line 6433
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6436
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6441
 __ZN4mbed10TimerEventD2Ev($0); //@line 6442
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 742; //@line 6445
  sp = STACKTOP; //@line 6446
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6449
  return;
 }
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6230
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6232
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6236
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 6238
 $9 = HEAP32[$2 >> 2] | 0; //@line 6239
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 68 >> 2] | 0; //@line 6242
 $14 = HEAP16[(HEAP32[$0 + 8 >> 2] | 0) + 12 >> 1] | 0; //@line 6244
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 6245
 FUNCTION_TABLE_viiii[$12 & 7]($9, $6, $8, $14); //@line 6246
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 642; //@line 6249
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 6250
  HEAP32[$15 >> 2] = $2; //@line 6251
  sp = STACKTOP; //@line 6252
  return;
 }
 ___async_unwind = 0; //@line 6255
 HEAP32[$ReallocAsyncCtx2 >> 2] = 642; //@line 6256
 $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 6257
 HEAP32[$15 >> 2] = $2; //@line 6258
 sp = STACKTOP; //@line 6259
 return;
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb_68($0) {
 $0 = $0 | 0;
 var $15 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30935
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30937
 __ZN4mbed6Ticker6detachEv($2 + 1112 | 0); //@line 30939
 HEAP8[$2 + 688 >> 0] = 0; //@line 30941
 $6 = HEAP32[$2 + 788 >> 2] | 0; //@line 30943
 if (!$6) {
  return;
 }
 $9 = HEAP32[$6 + 44 >> 2] | 0; //@line 30949
 if (!$9) {
  return;
 }
 $15 = HEAPU8[$2 + 782 >> 0] | 0; //@line 30958
 $18 = HEAP8[$2 + 781 >> 0] | 0; //@line 30961
 $20 = HEAP8[$2 + 780 >> 0] | 0; //@line 30963
 $21 = HEAP32[$9 >> 2] | 0; //@line 30964
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 30965
 FUNCTION_TABLE_viiiii[$21 & 7]($6 + 32 | 0, $2 + 792 | 0, $15, $18, $20); //@line 30966
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 130; //@line 30969
  sp = STACKTOP; //@line 30970
  return;
 }
 ___async_unwind = 0; //@line 30973
 HEAP32[$ReallocAsyncCtx >> 2] = 130; //@line 30974
 sp = STACKTOP; //@line 30975
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_506($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 37288
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37292
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 37294
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 37295
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 37299
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 37303
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 37304
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 37305
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 378; //@line 37308
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 37309
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 37310
  sp = STACKTOP; //@line 37311
  return;
 }
 ___async_unwind = 0; //@line 37314
 HEAP32[$ReallocAsyncCtx2 >> 2] = 378; //@line 37315
 $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 37316
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 37317
 sp = STACKTOP; //@line 37318
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_499($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 36890
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36892
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36894
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36896
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 36898
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 36900
 $12 = HEAP32[$2 + 356 >> 2] | 0; //@line 36902
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 36904
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($12, $2 + 1036 | 0); //@line 36905
 if (!___async) {
  ___async_unwind = 0; //@line 36908
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 517; //@line 36910
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 36912
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 36914
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 36916
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 36918
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 36920
 sp = STACKTOP; //@line 36921
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_55($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30118
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30120
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30122
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30124
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30126
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30128
 $12 = HEAP32[$2 + 356 >> 2] | 0; //@line 30130
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 30132
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($12, $2 + 1056 | 0); //@line 30133
 if (!___async) {
  ___async_unwind = 0; //@line 30136
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 384; //@line 30138
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 30140
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 30142
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 30144
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 30146
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 30148
 sp = STACKTOP; //@line 30149
 return;
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 14157
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 14157
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 14158
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 14159
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 14168
    $$016 = $9; //@line 14171
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 14171
   } else {
    $$016 = $0; //@line 14173
    $storemerge = 0; //@line 14173
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 14175
   $$0 = $$016; //@line 14176
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 14180
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 14186
   HEAP32[tempDoublePtr >> 2] = $2; //@line 14189
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 14189
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 14190
  }
 }
 return +$$0;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_405($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 23091
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23095
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23097
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23099
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23101
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23103
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23105
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 1; //@line 23106
 HEAP8[$4 >> 0] = 1; //@line 23107
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(16) | 0; //@line 23108
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $8) | 0; //@line 23109
 if (!___async) {
  ___async_unwind = 0; //@line 23112
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 260; //@line 23114
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $10; //@line 23116
 HEAP32[$ReallocAsyncCtx15 + 8 >> 2] = $12; //@line 23118
 HEAP32[$ReallocAsyncCtx15 + 12 >> 2] = $14; //@line 23120
 sp = STACKTOP; //@line 23121
 return;
}
function _mbed_error_printf__async_cb_44($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28755
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28759
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28761
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28763
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28765
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 28766
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $14 = HEAP8[$10 + $12 >> 0] | 0; //@line 28773
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 28774
 _serial_putc(23248, $14); //@line 28775
 if (!___async) {
  ___async_unwind = 0; //@line 28778
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 737; //@line 28780
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $12; //@line 28782
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 28784
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 28786
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 28788
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 28790
 sp = STACKTOP; //@line 28791
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 3347
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3349
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3351
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3353
 HEAP32[$2 + 1960 >> 2] = 0; //@line 3355
 HEAP32[$2 + 1956 >> 2] = 0; //@line 3357
 HEAP32[$4 >> 2] = 1; //@line 3358
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 3359
 $9 = __ZN12LoRaWANStack18lora_state_machineEv($2) | 0; //@line 3360
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 319; //@line 3363
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 3364
  HEAP32[$10 >> 2] = $6; //@line 3365
  sp = STACKTOP; //@line 3366
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 3370
 ___async_unwind = 0; //@line 3371
 HEAP32[$ReallocAsyncCtx4 >> 2] = 319; //@line 3372
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 3373
 HEAP32[$10 >> 2] = $6; //@line 3374
 sp = STACKTOP; //@line 3375
 return;
}
function _equeue_sema_wait($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $20 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 5838
 STACKTOP = STACKTOP + 16 | 0; //@line 5839
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5839
 $2 = sp + 8 | 0; //@line 5840
 $3 = sp; //@line 5841
 _pthread_mutex_lock($0 | 0) | 0; //@line 5842
 $4 = $0 + 76 | 0; //@line 5843
 do {
  if (!(HEAP8[$4 >> 0] | 0)) {
   if (($1 | 0) < 0) {
    _pthread_cond_wait($0 + 28 | 0, $0 | 0) | 0; //@line 5851
    break;
   } else {
    _gettimeofday($2 | 0, 0) | 0; //@line 5854
    HEAP32[$3 >> 2] = (HEAP32[$2 >> 2] | 0) + (($1 >>> 0) / 1e3 | 0); //@line 5858
    HEAP32[$3 + 4 >> 2] = ((HEAP32[$2 + 4 >> 2] | 0) * 1e3 | 0) + ($1 * 1e6 | 0); //@line 5865
    _pthread_cond_timedwait($0 + 28 | 0, $0 | 0, $3 | 0) | 0; //@line 5867
    break;
   }
  }
 } while (0);
 $20 = (HEAP8[$4 >> 0] | 0) != 0; //@line 5873
 HEAP8[$4 >> 0] = 0; //@line 5874
 _pthread_mutex_unlock($0 | 0) | 0; //@line 5875
 STACKTOP = sp; //@line 5876
 return $20 | 0; //@line 5876
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_178($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3382
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3386
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3388
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3390
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3392
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3394
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3396
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 7; //@line 3397
 HEAP8[$4 >> 0] = 1; //@line 3398
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 3399
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $8) | 0; //@line 3400
 if (!___async) {
  ___async_unwind = 0; //@line 3403
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 318; //@line 3405
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $10; //@line 3407
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $12; //@line 3409
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $14; //@line 3411
 sp = STACKTOP; //@line 3412
 return;
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 37122
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37124
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37126
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 37130
 $11 = $2 + 689 | 0; //@line 37133
 HEAP8[$11 >> 0] = 0; //@line 37134
 _printf(10904, $4) | 0; //@line 37135
 HEAP32[$8 >> 2] = HEAPU8[$11 >> 0]; //@line 37138
 _printf(11079, $8) | 0; //@line 37139
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 37140
 _putchar(10) | 0; //@line 37141
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 51; //@line 37144
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 37145
  HEAP32[$14 >> 2] = $2; //@line 37146
  sp = STACKTOP; //@line 37147
  return;
 }
 ___async_unwind = 0; //@line 37150
 HEAP32[$ReallocAsyncCtx2 >> 2] = 51; //@line 37151
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 37152
 HEAP32[$14 >> 2] = $2; //@line 37153
 sp = STACKTOP; //@line 37154
 return;
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16543
 STACKTOP = STACKTOP + 16 | 0; //@line 16544
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16544
 $3 = sp; //@line 16545
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 16547
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 16550
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 16551
 $8 = FUNCTION_TABLE_iiii[$7 & 15]($0, $1, $3) | 0; //@line 16552
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 817; //@line 16555
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 16557
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 16559
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 16561
  sp = STACKTOP; //@line 16562
  STACKTOP = sp; //@line 16563
  return 0; //@line 16563
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16565
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 16569
 }
 STACKTOP = sp; //@line 16571
 return $8 & 1 | 0; //@line 16571
}
function __ZN16SX1276_LoRaRadio5sleepEv__async_cb_520($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 38119
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 38121
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 38123
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 38127
 __ZN4mbed6Ticker6detachEv($2 + 1048 | 0); //@line 38131
 __ZN4mbed6Ticker6detachEv($2 + 1112 | 0); //@line 38133
 _printf(10904, $4) | 0; //@line 38134
 HEAP32[$8 >> 2] = 0; //@line 38135
 _printf(10970, $8) | 0; //@line 38136
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 38137
 _putchar(10) | 0; //@line 38138
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 54; //@line 38141
  $13 = $ReallocAsyncCtx + 4 | 0; //@line 38142
  HEAP32[$13 >> 2] = $2; //@line 38143
  sp = STACKTOP; //@line 38144
  return;
 }
 ___async_unwind = 0; //@line 38147
 HEAP32[$ReallocAsyncCtx >> 2] = 54; //@line 38148
 $13 = $ReallocAsyncCtx + 4 | 0; //@line 38149
 HEAP32[$13 >> 2] = $2; //@line 38150
 sp = STACKTOP; //@line 38151
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_394($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx26 = 0, sp = 0;
 sp = STACKTOP; //@line 22229
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22233
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22235
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22237
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22239
 $11 = $4 + 12 | 0; //@line 22241
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22242
 $ReallocAsyncCtx26 = _emscripten_realloc_async_context(16) | 0; //@line 22243
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 0) | 0; //@line 22244
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 22248
  ___async_unwind = 0; //@line 22249
 }
 HEAP32[$ReallocAsyncCtx26 >> 2] = 262; //@line 22251
 HEAP32[$ReallocAsyncCtx26 + 4 >> 2] = $11; //@line 22253
 HEAP32[$ReallocAsyncCtx26 + 8 >> 2] = $8; //@line 22255
 HEAP32[$ReallocAsyncCtx26 + 12 >> 2] = $10; //@line 22257
 sp = STACKTOP; //@line 22258
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_392($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx27 = 0, sp = 0;
 sp = STACKTOP; //@line 22162
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22166
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22168
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22170
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22172
 $11 = $4 + 12 | 0; //@line 22174
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22175
 $ReallocAsyncCtx27 = _emscripten_realloc_async_context(16) | 0; //@line 22176
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 0) | 0; //@line 22177
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 22181
  ___async_unwind = 0; //@line 22182
 }
 HEAP32[$ReallocAsyncCtx27 >> 2] = 253; //@line 22184
 HEAP32[$ReallocAsyncCtx27 + 4 >> 2] = $11; //@line 22186
 HEAP32[$ReallocAsyncCtx27 + 8 >> 2] = $8; //@line 22188
 HEAP32[$ReallocAsyncCtx27 + 12 >> 2] = $10; //@line 22190
 sp = STACKTOP; //@line 22191
 return;
}
function __ZN7LoRaPHY19num_active_channelsEPthh($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$01012 = 0, $$011 = 0, $8 = 0, $9 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 & 255) < ($3 & 255))) {
  $$011 = 0; //@line 25836
  return $$011 | 0; //@line 25837
 }
 $wide$trip$count = $3 & 255; //@line 25840
 $$01012 = 0; //@line 25841
 $indvars$iv = $2 & 255; //@line 25841
 do {
  $8 = HEAP16[$1 + ($indvars$iv << 1) >> 1] | 0; //@line 25844
  $9 = $8 & 65535; //@line 25845
  $$01012 = ($$01012 & 255) + (($9 & 1) + ($9 >>> 1 & 1) + ($9 >>> 2 & 1) + ($9 >>> 3 & 1) + ($9 >>> 4 & 1) + ($9 >>> 5 & 1) + ($9 >>> 6 & 1) + ($9 >>> 7 & 1) + ($9 >>> 8 & 1) + ($9 >>> 9 & 1) + ($9 >>> 10 & 1) + ($9 >>> 11 & 1) + ($9 >>> 12 & 1) + ($9 >>> 13 & 1) + ($9 >>> 14 & 1) + (($8 & 65535) >>> 15 & 65535) & 255) | 0; //@line 25894
  $indvars$iv = $indvars$iv + 1 | 0; //@line 25895
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$011 = $$01012 & 255; //@line 25904
 return $$011 | 0; //@line 25905
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx28 = 0, sp = 0;
 sp = STACKTOP; //@line 22095
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22099
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22101
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22103
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22105
 $11 = $4 + 12 | 0; //@line 22107
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22108
 $ReallocAsyncCtx28 = _emscripten_realloc_async_context(16) | 0; //@line 22109
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 1) | 0; //@line 22110
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 22114
  ___async_unwind = 0; //@line 22115
 }
 HEAP32[$ReallocAsyncCtx28 >> 2] = 248; //@line 22117
 HEAP32[$ReallocAsyncCtx28 + 4 >> 2] = $11; //@line 22119
 HEAP32[$ReallocAsyncCtx28 + 8 >> 2] = $8; //@line 22121
 HEAP32[$ReallocAsyncCtx28 + 12 >> 2] = $10; //@line 22123
 sp = STACKTOP; //@line 22124
 return;
}
function __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19299
 STACKTOP = STACKTOP + 16 | 0; //@line 19300
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19300
 _printf(13258, sp) | 0; //@line 19303
 _printf(13815, sp + 8 | 0) | 0; //@line 19304
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 19305
 _putchar(10) | 0; //@line 19306
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 565; //@line 19309
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 19311
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 19313
  sp = STACKTOP; //@line 19314
  STACKTOP = sp; //@line 19315
  return 0; //@line 19315
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19317
  $6 = __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0 + 348 | 0, $1, $0 + 360 | 0) | 0; //@line 19320
  STACKTOP = sp; //@line 19321
  return $6 | 0; //@line 19321
 }
 return 0; //@line 19323
}
function _schedule_interrupt__async_cb_494($0) {
 $0 = $0 | 0;
 var $16 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 36692
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36696
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36698
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 36700
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 36701
 if ($4 >>> 0 > $8 >>> 0) {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 | $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 } else {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 & $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 }
 $16 = HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] | 0; //@line 36720
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 36721
 FUNCTION_TABLE_v[$16 & 15](); //@line 36722
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 714; //@line 36725
  sp = STACKTOP; //@line 36726
  return;
 }
 ___async_unwind = 0; //@line 36729
 HEAP32[$ReallocAsyncCtx6 >> 2] = 714; //@line 36730
 sp = STACKTOP; //@line 36731
 return;
}
function __ZN4mbed7TimeoutD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4174
 HEAP32[$0 >> 2] = 10108; //@line 4175
 __ZN4mbed6Ticker6detachEv($0); //@line 4176
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 4178
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 4184
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4185
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 4186
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 168; //@line 4189
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4191
    sp = STACKTOP; //@line 4192
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4195
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4200
 __ZN4mbed10TimerEventD2Ev($0); //@line 4201
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 169; //@line 4204
  sp = STACKTOP; //@line 4205
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4208
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_459($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 33677
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33681
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33683
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 33684
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 33688
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 33692
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 33693
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 33694
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 283; //@line 33697
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 33698
  HEAP32[$11 >> 2] = $4; //@line 33699
  sp = STACKTOP; //@line 33700
  return;
 }
 ___async_unwind = 0; //@line 33703
 HEAP32[$ReallocAsyncCtx5 >> 2] = 283; //@line 33704
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 33705
 HEAP32[$11 >> 2] = $4; //@line 33706
 sp = STACKTOP; //@line 33707
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_64($0) {
 $0 = $0 | 0;
 var $$0 = 0, $19 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30756
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30760
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = (HEAPU8[24202] | 0) << 16 | (HEAPU8[24203] | 0) << 24 | (HEAPU8[24201] | 0) << 8 | (HEAPU8[24200] | 0); //@line 30777
  $$0 = 0; //@line 30778
 } else {
  $$0 = $AsyncRetVal; //@line 30780
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 30782
 _mbedtls_cipher_free(22892); //@line 30783
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 610; //@line 30786
  $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 30787
  HEAP32[$19 >> 2] = $$0; //@line 30788
  sp = STACKTOP; //@line 30789
  return;
 }
 ___async_unwind = 0; //@line 30792
 HEAP32[$ReallocAsyncCtx5 >> 2] = 610; //@line 30793
 $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 30794
 HEAP32[$19 >> 2] = $$0; //@line 30795
 sp = STACKTOP; //@line 30796
 return;
}
function __ZN16LoRaWANInterface7connectEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5896
 STACKTOP = STACKTOP + 32 | 0; //@line 5897
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 5897
 $1 = sp; //@line 5898
 HEAP8[$1 >> 0] = 1; //@line 5899
 HEAP32[$1 + 4 >> 2] = 0; //@line 5901
 HEAP32[$1 + 8 >> 2] = 0; //@line 5903
 HEAP32[$1 + 12 >> 2] = 24168; //@line 5905
 HEAP32[$1 + 16 >> 2] = 24184; //@line 5907
 $8 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 5910
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5911
 $9 = FUNCTION_TABLE_iii[$8 & 31]($0, $1) | 0; //@line 5912
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 190; //@line 5915
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5917
  sp = STACKTOP; //@line 5918
  STACKTOP = sp; //@line 5919
  return 0; //@line 5919
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5921
  STACKTOP = sp; //@line 5922
  return $9 | 0; //@line 5922
 }
 return 0; //@line 5924
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15437
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 15443
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 15446
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 15449
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15450
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 15451
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 799; //@line 15454
    sp = STACKTOP; //@line 15455
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15458
    break;
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_486($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 36129
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36133
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36135
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 36136
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 36140
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 36144
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 36145
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 36146
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 36149
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 36150
  HEAP32[$11 >> 2] = $4; //@line 36151
  sp = STACKTOP; //@line 36152
  return;
 }
 ___async_unwind = 0; //@line 36155
 HEAP32[$ReallocAsyncCtx5 >> 2] = 291; //@line 36156
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 36157
 HEAP32[$11 >> 2] = $4; //@line 36158
 sp = STACKTOP; //@line 36159
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_150($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 1221
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1225
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1227
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 1228
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 1232
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 1236
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 1237
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 1238
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 422; //@line 1241
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 1242
  HEAP32[$11 >> 2] = $4; //@line 1243
  sp = STACKTOP; //@line 1244
  return;
 }
 ___async_unwind = 0; //@line 1247
 HEAP32[$ReallocAsyncCtx5 >> 2] = 422; //@line 1248
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 1249
 HEAP32[$11 >> 2] = $4; //@line 1250
 sp = STACKTOP; //@line 1251
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_13($0) {
 $0 = $0 | 0;
 var $$0 = 0, $19 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 17380
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17384
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = (HEAPU8[24202] | 0) << 16 | (HEAPU8[24203] | 0) << 24 | (HEAPU8[24201] | 0) << 8 | (HEAPU8[24200] | 0); //@line 17401
  $$0 = 0; //@line 17402
 } else {
  $$0 = $AsyncRetVal; //@line 17404
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 17406
 _mbedtls_cipher_free(22892); //@line 17407
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 605; //@line 17410
  $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 17411
  HEAP32[$19 >> 2] = $$0; //@line 17412
  sp = STACKTOP; //@line 17413
  return;
 }
 ___async_unwind = 0; //@line 17416
 HEAP32[$ReallocAsyncCtx6 >> 2] = 605; //@line 17417
 $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 17418
 HEAP32[$19 >> 2] = $$0; //@line 17419
 sp = STACKTOP; //@line 17420
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6298
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6306
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6308
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6310
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6312
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6314
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6316
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6318
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 6329
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 6330
 HEAP32[$10 >> 2] = 0; //@line 6331
 HEAP32[$12 >> 2] = 0; //@line 6332
 HEAP32[$14 >> 2] = 0; //@line 6333
 HEAP32[$2 >> 2] = 0; //@line 6334
 $33 = HEAP32[$16 >> 2] | 0; //@line 6335
 HEAP32[$16 >> 2] = $33 | $18; //@line 6340
 if ($20 | 0) {
  ___unlockfile($22); //@line 6343
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 6346
 return;
}
function _get_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$028 = 0, $$02930 = 0, $$031 = 0, $13 = 0, $23 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (($0 | 0) == 0 | ($2 | 0) == 0) {
  $$028 = -24832; //@line 2208
  return $$028 | 0; //@line 2209
 }
 $7 = HEAP8[$0 + ($1 + -1) >> 0] | 0; //@line 2213
 $8 = $7 & 255; //@line 2214
 $9 = $1 - $8 | 0; //@line 2215
 HEAP32[$2 >> 2] = $9; //@line 2216
 $13 = ($7 << 24 >> 24 == 0 | $8 >>> 0 > $1 >>> 0) & 1; //@line 2220
 if (!$1) {
  $$0$lcssa = $13; //@line 2223
 } else {
  $$02930 = 0; //@line 2225
  $$031 = $13; //@line 2225
  while (1) {
   $23 = (($$02930 >>> 0 >= $9 >>> 0 ? (HEAP8[$0 + $$02930 >> 0] ^ $7) & 255 : 0) | $$031 & 255) & 255; //@line 2235
   $$02930 = $$02930 + 1 | 0; //@line 2236
   if (($$02930 | 0) == ($1 | 0)) {
    $$0$lcssa = $23; //@line 2239
    break;
   } else {
    $$031 = $23; //@line 2242
   }
  }
 }
 $$028 = $$0$lcssa << 24 >> 24 ? -25088 : 0; //@line 2248
 return $$028 | 0; //@line 2249
}
function __ZN16LoRaWANInterface4sendEhPKhti__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18149
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18155
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18159
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18161
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 18163
 $16 = HEAP16[$0 + 30 >> 1] | 0; //@line 18165
 _printf(12127, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 18166
 _printf(12140, $6) | 0; //@line 18167
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 18168
 _putchar(10) | 0; //@line 18169
 if (!___async) {
  ___async_unwind = 0; //@line 18172
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 192; //@line 18174
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $10; //@line 18176
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $12; //@line 18178
 HEAP8[$ReallocAsyncCtx2 + 12 >> 0] = $14; //@line 18180
 HEAP16[$ReallocAsyncCtx2 + 14 >> 1] = $16; //@line 18182
 sp = STACKTOP; //@line 18183
 return;
}
function __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10454
 STACKTOP = STACKTOP + 16 | 0; //@line 10455
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10455
 if ((HEAP32[$0 + 1876 >> 2] | 0) >>> 0 >= 3) {
  $$0 = __ZN7LoRaMac16get_channel_planER16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 10464
  STACKTOP = sp; //@line 10465
  return $$0 | 0; //@line 10465
 }
 _printf(12178, sp) | 0; //@line 10467
 _printf(12998, sp + 8 | 0) | 0; //@line 10468
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10469
 _putchar(10) | 0; //@line 10470
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 332; //@line 10473
  sp = STACKTOP; //@line 10474
  STACKTOP = sp; //@line 10475
  return 0; //@line 10475
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10477
 $$0 = -1e3; //@line 10478
 STACKTOP = sp; //@line 10479
 return $$0 | 0; //@line 10479
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_410($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx20 = 0, sp = 0;
 sp = STACKTOP; //@line 23349
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23351
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23353
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23355
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23357
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23359
 HEAP32[$2 >> 2] = 1; //@line 23360
 HEAP8[$2 + 4 >> 0] = 0; //@line 23362
 $ReallocAsyncCtx20 = _emscripten_realloc_async_context(16) | 0; //@line 23363
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($4, $2) | 0; //@line 23364
 if (!___async) {
  ___async_unwind = 0; //@line 23367
 }
 HEAP32[$ReallocAsyncCtx20 >> 2] = 246; //@line 23369
 HEAP32[$ReallocAsyncCtx20 + 4 >> 2] = $6; //@line 23371
 HEAP32[$ReallocAsyncCtx20 + 8 >> 2] = $8; //@line 23373
 HEAP32[$ReallocAsyncCtx20 + 12 >> 2] = $10; //@line 23375
 sp = STACKTOP; //@line 23376
 return;
}
function __ZN16SX1276_LoRaRadio7standbyEv__async_cb_374($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18291
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18293
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18295
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18297
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18299
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18301
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 18302
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 18303
 if (!___async) {
  ___async_unwind = 0; //@line 18306
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 58; //@line 18308
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $4; //@line 18310
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $6; //@line 18312
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $8; //@line 18314
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $10; //@line 18316
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $2; //@line 18318
 sp = STACKTOP; //@line 18319
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_411($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx21 = 0, sp = 0;
 sp = STACKTOP; //@line 23382
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23384
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23386
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23388
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23390
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23392
 $ReallocAsyncCtx21 = _emscripten_realloc_async_context(24) | 0; //@line 23393
 __ZN7LoRaMac10disconnectEv($4); //@line 23394
 if (!___async) {
  ___async_unwind = 0; //@line 23397
 }
 HEAP32[$ReallocAsyncCtx21 >> 2] = 245; //@line 23399
 HEAP32[$ReallocAsyncCtx21 + 4 >> 2] = $2; //@line 23401
 HEAP32[$ReallocAsyncCtx21 + 8 >> 2] = $4; //@line 23403
 HEAP32[$ReallocAsyncCtx21 + 12 >> 2] = $6; //@line 23405
 HEAP32[$ReallocAsyncCtx21 + 16 >> 2] = $8; //@line 23407
 HEAP32[$ReallocAsyncCtx21 + 20 >> 2] = $10; //@line 23409
 sp = STACKTOP; //@line 23410
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb_277($0) {
 $0 = $0 | 0;
 var $$pre$i$i59 = 0, $10 = 0, $11 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 10095
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10101
 $$pre$i$i59 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 10102
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i59; //@line 10104
 if (!$$pre$i$i59) {
  return;
 }
 $10 = HEAP32[$$pre$i$i59 + 8 >> 2] | 0; //@line 10110
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 10111
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 10112
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 199; //@line 10115
  $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 10116
  HEAP32[$11 >> 2] = $6; //@line 10117
  sp = STACKTOP; //@line 10118
  return;
 }
 ___async_unwind = 0; //@line 10121
 HEAP32[$ReallocAsyncCtx4 >> 2] = 199; //@line 10122
 $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 10123
 HEAP32[$11 >> 2] = $6; //@line 10124
 sp = STACKTOP; //@line 10125
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16436
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 16438
 $8 = $7 >> 8; //@line 16439
 if (!($7 & 1)) {
  $$0 = $8; //@line 16443
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 16448
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 16450
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 16453
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16458
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 16459
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 815; //@line 16462
  sp = STACKTOP; //@line 16463
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16466
  return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15606
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 15612
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 15615
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 15618
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15619
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 15620
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 802; //@line 15623
    sp = STACKTOP; //@line 15624
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15627
    break;
   }
  }
 } while (0);
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$unpack$i = 0, $$unpack5$i = 0, $15 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14002
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 14005
 $$unpack5$i = HEAP32[$0 + 4 >> 2] | 0; //@line 14007
 $8 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack5$i >> 1) | 0; //@line 14009
 if (!($$unpack5$i & 1)) {
  $15 = $$unpack$i; //@line 14014
 } else {
  $15 = HEAP32[(HEAP32[$8 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 14019
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14021
 FUNCTION_TABLE_viiiii[$15 & 7]($8, $1, $2, $3, $4); //@line 14022
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 426; //@line 14025
  sp = STACKTOP; //@line 14026
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14029
  return;
 }
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9848
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9850
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9852
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 9854
 $7 = HEAP32[$2 >> 2] | 0; //@line 9855
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] | 0; //@line 9858
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 9859
 FUNCTION_TABLE_viii[$10 & 7]($7, $4, $6); //@line 9860
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 662; //@line 9863
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 9864
  HEAP32[$11 >> 2] = $2; //@line 9865
  sp = STACKTOP; //@line 9866
  return;
 }
 ___async_unwind = 0; //@line 9869
 HEAP32[$ReallocAsyncCtx2 >> 2] = 662; //@line 9870
 $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 9871
 HEAP32[$11 >> 2] = $2; //@line 9872
 sp = STACKTOP; //@line 9873
 return;
}
function ___dynamic_cast__async_cb_448($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32511
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32513
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32515
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32521
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 32536
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 32552
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 32557
    break;
   }
  default:
   {
    $$0 = 0; //@line 32561
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 32566
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16478
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 16480
 $7 = $6 >> 8; //@line 16481
 if (!($6 & 1)) {
  $$0 = $7; //@line 16485
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 16490
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 16492
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 16495
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16500
 FUNCTION_TABLE_viiiii[$16 & 7]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 16501
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 816; //@line 16504
  sp = STACKTOP; //@line 16505
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16508
  return;
 }
}
function _ticker_remove_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5546
 $4 = (HEAP32[$0 + 4 >> 2] | 0) + 4 | 0; //@line 5549
 $5 = HEAP32[$4 >> 2] | 0; //@line 5550
 if (($5 | 0) == ($1 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 5555
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5556
  _schedule_interrupt($0); //@line 5557
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 716; //@line 5560
   sp = STACKTOP; //@line 5561
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5564
  return;
 } else {
  $$0 = $5; //@line 5567
 }
 do {
  if (!$$0) {
   label = 8; //@line 5572
   break;
  }
  $10 = $$0 + 12 | 0; //@line 5575
  $$0 = HEAP32[$10 >> 2] | 0; //@line 5576
 } while (($$0 | 0) != ($1 | 0));
 if ((label | 0) == 8) {
  return;
 }
 HEAP32[$10 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 5589
 return;
}
function __ZN16SX1276_LoRaRadio11set_channelEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 1352
 STACKTOP = STACKTOP + 16 | 0; //@line 1353
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1353
 $vararg_buffer1 = sp + 8 | 0; //@line 1354
 _printf(10904, sp) | 0; //@line 1356
 HEAP32[$vararg_buffer1 >> 2] = $1; //@line 1357
 _printf(11242, $vararg_buffer1) | 0; //@line 1358
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1359
 _putchar(10) | 0; //@line 1360
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 84; //@line 1363
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1365
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 1367
  sp = STACKTOP; //@line 1368
  STACKTOP = sp; //@line 1369
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1371
  HEAP32[$0 + 692 >> 2] = $1; //@line 1373
  STACKTOP = sp; //@line 1374
  return;
 }
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_333($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15581
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15585
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 15586
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0; //@line 15589
 $10 = HEAP8[$4 + 776 >> 0] | 0; //@line 15591
 $12 = HEAP8[$4 + 744 >> 0] | 0; //@line 15593
 $14 = HEAP32[$4 + 740 >> 2] | 0; //@line 15595
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15597
 FUNCTION_TABLE_viiiii[$8 & 7]($5, $10, $12, $14, $4 + 824 | 0); //@line 15598
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 616; //@line 15601
  sp = STACKTOP; //@line 15602
  return;
 }
 ___async_unwind = 0; //@line 15605
 HEAP32[$ReallocAsyncCtx2 >> 2] = 616; //@line 15606
 sp = STACKTOP; //@line 15607
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_354($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 16683
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16685
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16687
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16689
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16691
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16693
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 16694
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 16695
 if (!___async) {
  ___async_unwind = 0; //@line 16698
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 111; //@line 16700
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $4; //@line 16702
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $6; //@line 16704
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $8; //@line 16706
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $10; //@line 16708
 sp = STACKTOP; //@line 16709
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_334($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15613
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15617
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 15618
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0; //@line 15621
 $10 = HEAP8[$4 + 776 >> 0] | 0; //@line 15623
 $12 = HEAP8[$4 + 744 >> 0] | 0; //@line 15625
 $14 = HEAP32[$4 + 740 >> 2] | 0; //@line 15627
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 15629
 FUNCTION_TABLE_viiiii[$8 & 7]($5, $10, $12, $14, $4 + 824 | 0); //@line 15630
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 613; //@line 15633
  sp = STACKTOP; //@line 15634
  return;
 }
 ___async_unwind = 0; //@line 15637
 HEAP32[$ReallocAsyncCtx >> 2] = 613; //@line 15638
 sp = STACKTOP; //@line 15639
 return;
}
function __ZN16SX1276_LoRaRadio18set_low_power_modeEv__async_cb($0) {
 $0 = $0 | 0;
 var $15 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30654
 if ((HEAP32[$2 + 652 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$2 + 484 >> 2] | 0, 0) | 0; //@line 30661
 }
 if ((HEAP32[$2 + 656 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$2 + 508 >> 2] | 0, 0) | 0; //@line 30669
 }
 if ((HEAP32[$2 + 672 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$2 + 604 >> 2] | 0, 0) | 0; //@line 30677
 }
 $15 = $2 + 660 | 0; //@line 30679
 if ((HEAP32[$15 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$2 + 532 >> 2] | 0, 0) | 0; //@line 30685
  if ((HEAP32[$15 >> 2] | 0) != -1) {
   _emscripten_asm_const_iii(5, HEAP32[$2 + 556 >> 2] | 0, 0) | 0; //@line 30691
  }
 }
 if ((HEAP32[$2 + 668 >> 2] | 0) == -1) {
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$2 + 580 >> 2] | 0, 0) | 0; //@line 30702
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16393
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 16395
 $6 = $5 >> 8; //@line 16396
 if (!($5 & 1)) {
  $$0 = $6; //@line 16400
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 16405
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 16407
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 16410
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16415
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 16416
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 814; //@line 16419
  sp = STACKTOP; //@line 16420
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16423
  return;
 }
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_54($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30086
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 30091
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30093
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30095
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30096
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 30097
 __ZN7LoRaPHY15setup_rx_windowEbj($9, $4, $6); //@line 30098
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 387; //@line 30101
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 30102
  HEAP32[$10 >> 2] = $8; //@line 30103
  sp = STACKTOP; //@line 30104
  return;
 }
 ___async_unwind = 0; //@line 30107
 HEAP32[$ReallocAsyncCtx4 >> 2] = 387; //@line 30108
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 30109
 HEAP32[$10 >> 2] = $8; //@line 30110
 sp = STACKTOP; //@line 30111
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_323($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 14387
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14389
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14391
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14393
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14395
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14397
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 14398
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 14399
 if (!___async) {
  ___async_unwind = 0; //@line 14402
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 79; //@line 14404
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $4; //@line 14406
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $6; //@line 14408
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $8; //@line 14410
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $10; //@line 14412
 sp = STACKTOP; //@line 14413
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_321($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 14349
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14351
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14353
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14355
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14357
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14359
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(20) | 0; //@line 14360
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 14361
 if (!___async) {
  ___async_unwind = 0; //@line 14364
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 82; //@line 14366
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $4; //@line 14368
 HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $6; //@line 14370
 HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $8; //@line 14372
 HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $10; //@line 14374
 sp = STACKTOP; //@line 14375
 return;
}
function __ZN16SX1276_LoRaRadio4sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 774
 switch (HEAP8[$0 + 689 >> 0] | 0) {
 case 0:
  {
   _emscripten_asm_const_iiiiiii(0, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 696 >> 0] | 0, HEAP32[$0 + 704 >> 2] | 0, HEAP32[$0 + 712 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 789
   break;
  }
 case 1:
  {
   _emscripten_asm_const_iiiiiii(1, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 748 >> 0] | 0, HEAP32[$0 + 752 >> 2] | 0, HEAP32[$0 + 756 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 803
   break;
  }
 default:
  {}
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 809
 __ZN16SX1276_LoRaRadio8transmitEj($0, 0); //@line 810
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 67; //@line 813
  sp = STACKTOP; //@line 814
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 817
  return;
 }
}
function __ZN7LoRaPHY14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $25 = 0, $4 = 0, $5 = 0;
 $4 = $1 & 255; //@line 25600
 $5 = $4 >>> 4; //@line 25601
 $10 = 1 << ($4 & 15); //@line 25606
 if ($10 & (HEAPU16[(HEAP32[$0 + 124 >> 2] | 0) + ($5 << 1) >> 1] | 0) | 0) {
  $$0 = 0; //@line 25610
  return $$0 | 0; //@line 25611
 }
 $15 = (HEAP32[$0 + 112 >> 2] | 0) + ($4 * 12 | 0) | 0; //@line 25615
 HEAP32[$15 >> 2] = 0; //@line 25616
 HEAP32[$15 + 4 >> 2] = 0; //@line 25616
 HEAP32[$15 + 8 >> 2] = 0; //@line 25616
 if (!((HEAPU8[$0 + 20 >> 0] | 0) > ($1 & 255) ? (($1 & 255) >>> 4 & 255) <= (HEAPU8[$0 + 128 >> 0] | 0) : 0)) {
  $$0 = 0; //@line 25626
  return $$0 | 0; //@line 25627
 }
 $25 = (HEAP32[$0 + 120 >> 2] | 0) + ($5 << 1) | 0; //@line 25632
 HEAP16[$25 >> 1] = ($10 ^ 65535) & (HEAPU16[$25 >> 1] | 0); //@line 25637
 $$0 = 1; //@line 25638
 return $$0 | 0; //@line 25639
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_282($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10399
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10403
 $4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 10404
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 10407
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 10408
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 10409
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 659; //@line 10412
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 10413
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 10414
  sp = STACKTOP; //@line 10415
  return;
 }
 ___async_unwind = 0; //@line 10418
 HEAP32[$ReallocAsyncCtx3 >> 2] = 659; //@line 10419
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 10420
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 10421
 sp = STACKTOP; //@line 10422
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb_167($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2196
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2200
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2202
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 2204
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 2206
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 2208
 $13 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 2210
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 2211
 FUNCTION_TABLE_viiiii[$13 & 7]($4, $6, $8, $10, $12); //@line 2212
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 425; //@line 2215
  sp = STACKTOP; //@line 2216
  return;
 }
 ___async_unwind = 0; //@line 2219
 HEAP32[$ReallocAsyncCtx >> 2] = 425; //@line 2220
 sp = STACKTOP; //@line 2221
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_514($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 37809
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37811
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 37815
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 37817
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 37819
 __ZN4mbed6Ticker5setupEy($6, 1e5, 0); //@line 37820
 $9 = HEAP32[$2 >> 2] | 0; //@line 37821
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 37827
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 37828
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 37829
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 146; //@line 37832
  sp = STACKTOP; //@line 37833
  return;
 }
 ___async_unwind = 0; //@line 37836
 HEAP32[$ReallocAsyncCtx3 >> 2] = 146; //@line 37837
 sp = STACKTOP; //@line 37838
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10370
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10372
 $3 = HEAP32[$2 >> 2] | 0; //@line 10373
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0; //@line 10376
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 10377
 $7 = FUNCTION_TABLE_ii[$6 & 15]($3) | 0; //@line 10378
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 658; //@line 10381
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 10382
  HEAP32[$8 >> 2] = $2; //@line 10383
  sp = STACKTOP; //@line 10384
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 10388
 ___async_unwind = 0; //@line 10389
 HEAP32[$ReallocAsyncCtx2 >> 2] = 658; //@line 10390
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 10391
 HEAP32[$8 >> 2] = $2; //@line 10392
 sp = STACKTOP; //@line 10393
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_315($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13660
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13662
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13666
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13668
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 13670
 __ZN4mbed6Ticker5setupEy($6, 2e5, 0); //@line 13671
 $9 = HEAP32[$2 >> 2] | 0; //@line 13672
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 13678
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 13679
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 13680
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 73; //@line 13683
  sp = STACKTOP; //@line 13684
  return;
 }
 ___async_unwind = 0; //@line 13687
 HEAP32[$ReallocAsyncCtx3 >> 2] = 73; //@line 13688
 sp = STACKTOP; //@line 13689
 return;
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 13155
 STACKTOP = STACKTOP + 256 | 0; //@line 13156
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 13156
 $5 = sp; //@line 13157
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 13163
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 13167
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 13170
   $$011 = $9; //@line 13171
   do {
    _out_670($0, $5, 256); //@line 13173
    $$011 = $$011 + -256 | 0; //@line 13174
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 13183
  } else {
   $$0$lcssa = $9; //@line 13185
  }
  _out_670($0, $5, $$0$lcssa); //@line 13187
 }
 STACKTOP = sp; //@line 13189
 return;
}
function __ZN16SX1276_LoRaRadio7standbyEv__async_cb_376($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18388
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18394
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18398
 _printf(10904, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 18399
 HEAP32[$6 >> 2] = 1; //@line 18400
 _printf(10999, $6) | 0; //@line 18401
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 18402
 _putchar(10) | 0; //@line 18403
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 59; //@line 18406
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 18407
  HEAP32[$11 >> 2] = $10; //@line 18408
  sp = STACKTOP; //@line 18409
  return;
 }
 ___async_unwind = 0; //@line 18412
 HEAP32[$ReallocAsyncCtx >> 2] = 59; //@line 18413
 $11 = $ReallocAsyncCtx + 4 | 0; //@line 18414
 HEAP32[$11 >> 2] = $10; //@line 18415
 sp = STACKTOP; //@line 18416
 return;
}
function __ZN7LoRaMac16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 18688
 STACKTOP = STACKTOP + 16 | 0; //@line 18689
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18689
 $2 = sp; //@line 18690
 $4 = $2 + 4 | 0; //@line 18692
 HEAP32[$4 >> 2] = 0; //@line 18694
 HEAP32[$4 + 4 >> 2] = 0; //@line 18697
 HEAP32[$2 >> 2] = 9; //@line 18698
 $10 = __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0 + 348 | 0, $2, $0 + 360 | 0) | 0; //@line 18701
 if ($10 | 0) {
  $$0 = $10; //@line 18704
  STACKTOP = sp; //@line 18705
  return $$0 | 0; //@line 18705
 }
 $$0 = __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK25loramac_mib_req_confirm_t($0 + 352 | 0, $1, $2) | 0; //@line 18709
 STACKTOP = sp; //@line 18710
 return $$0 | 0; //@line 18710
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8953
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8955
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 8958
 $5 = HEAP32[$2 >> 2] | 0; //@line 8959
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] | 0; //@line 8962
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 8963
 FUNCTION_TABLE_vii[$8 & 31]($5, $4); //@line 8964
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 651; //@line 8967
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 8968
  HEAP32[$9 >> 2] = $2; //@line 8969
  sp = STACKTOP; //@line 8970
  return;
 }
 ___async_unwind = 0; //@line 8973
 HEAP32[$ReallocAsyncCtx2 >> 2] = 651; //@line 8974
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 8975
 HEAP32[$9 >> 2] = $2; //@line 8976
 sp = STACKTOP; //@line 8977
 return;
}
function _mbedtls_ccm_setkey__async_cb_462($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 33824
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33826
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33828
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33830
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 33832
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 33836
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 33839
 $9 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 33840
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 675; //@line 33843
  sp = STACKTOP; //@line 33844
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 33848
 ___async_unwind = 0; //@line 33849
 HEAP32[$ReallocAsyncCtx >> 2] = 675; //@line 33850
 sp = STACKTOP; //@line 33851
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7406
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 7409
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 7411
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 7413
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 7418
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 7423
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7425
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 7426
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 241; //@line 7429
  sp = STACKTOP; //@line 7430
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7433
  return;
 }
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9196
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 9199
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 9201
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 9203
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 9208
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 9213
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9215
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 9216
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 302; //@line 9219
  sp = STACKTOP; //@line 9220
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9223
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_399($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx29 = 0, sp = 0;
 sp = STACKTOP; //@line 22417
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22421
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22423
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22425
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$6 >> 2] = 6; //@line 22428
  HEAP32[___async_retval >> 2] = $4; //@line 22430
  return;
 }
 $ReallocAsyncCtx29 = _emscripten_realloc_async_context(16) | 0; //@line 22433
 _mbed_assert_internal(13142, 12226, 1251); //@line 22434
 if (!___async) {
  ___async_unwind = 0; //@line 22437
 }
 HEAP32[$ReallocAsyncCtx29 >> 2] = 275; //@line 22439
 HEAP32[$ReallocAsyncCtx29 + 4 >> 2] = $4; //@line 22441
 HEAP32[$ReallocAsyncCtx29 + 8 >> 2] = $6; //@line 22443
 HEAP32[$ReallocAsyncCtx29 + 12 >> 2] = $8; //@line 22445
 sp = STACKTOP; //@line 22446
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7455
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 7458
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 7460
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 7462
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 7467
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 7472
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7474
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 7475
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 242; //@line 7478
  sp = STACKTOP; //@line 7479
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7482
  return;
 }
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9862
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 9865
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 9867
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 9869
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 9874
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 9879
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9881
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 9882
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 313; //@line 9885
  sp = STACKTOP; //@line 9886
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9889
  return;
 }
}
function __ZN4mbed11InterruptInD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15653
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15655
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 15657
 if (!$4) {
  __ZdlPv($2); //@line 15660
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 15665
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 15666
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 15667
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 160; //@line 15670
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 15671
  HEAP32[$9 >> 2] = $2; //@line 15672
  sp = STACKTOP; //@line 15673
  return;
 }
 ___async_unwind = 0; //@line 15676
 HEAP32[$ReallocAsyncCtx2 >> 2] = 160; //@line 15677
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 15678
 HEAP32[$9 >> 2] = $2; //@line 15679
 sp = STACKTOP; //@line 15680
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_165($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 2093
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2095
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2097
 $6 = HEAP32[$2 + 356 >> 2] | 0; //@line 2099
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 2101
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $2 + 996 | 0, 1e3); //@line 2102
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 559; //@line 2105
  $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 2106
  HEAP32[$8 >> 2] = $4; //@line 2107
  sp = STACKTOP; //@line 2108
  return;
 }
 ___async_unwind = 0; //@line 2111
 HEAP32[$ReallocAsyncCtx5 >> 2] = 559; //@line 2112
 $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 2113
 HEAP32[$8 >> 2] = $4; //@line 2114
 sp = STACKTOP; //@line 2115
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_164($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 2065
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2067
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2069
 $6 = HEAP32[$2 + 356 >> 2] | 0; //@line 2071
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 2073
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $2 + 996 | 0, 1e3); //@line 2074
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 561; //@line 2077
  $8 = $ReallocAsyncCtx4 + 4 | 0; //@line 2078
  HEAP32[$8 >> 2] = $4; //@line 2079
  sp = STACKTOP; //@line 2080
  return;
 }
 ___async_unwind = 0; //@line 2083
 HEAP32[$ReallocAsyncCtx4 >> 2] = 561; //@line 2084
 $8 = $ReallocAsyncCtx4 + 4 | 0; //@line 2085
 HEAP32[$8 >> 2] = $4; //@line 2086
 sp = STACKTOP; //@line 2087
 return;
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10564
 STACKTOP = STACKTOP + 32 | 0; //@line 10565
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10565
 $vararg_buffer = sp; //@line 10566
 $3 = sp + 20 | 0; //@line 10567
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 10571
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 10573
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 10575
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 10577
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 10579
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 10584
  $10 = -1; //@line 10585
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 10588
 }
 STACKTOP = sp; //@line 10590
 return $10 | 0; //@line 10590
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 5803
 STACKTOP = STACKTOP + 16 | 0; //@line 5804
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5804
 $vararg_buffer = sp; //@line 5805
 HEAP32[$vararg_buffer >> 2] = $0; //@line 5806
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 5808
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 5810
 _mbed_error_printf(14892, $vararg_buffer); //@line 5811
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5812
 _mbed_die(); //@line 5813
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 719; //@line 5816
  sp = STACKTOP; //@line 5817
  STACKTOP = sp; //@line 5818
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5820
  STACKTOP = sp; //@line 5821
  return;
 }
}
function _schedule_interrupt__async_cb_493($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 36660
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36662
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36664
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36666
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 36669
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 36670
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 36671
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 36675
  ___async_unwind = 0; //@line 36676
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 713; //@line 36678
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 36680
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 36682
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 36684
 sp = STACKTOP; //@line 36685
 return;
}
function __ZN7LoRaPHY16verify_frequencyEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01113 = 0, $16 = 0, $3 = 0, $5 = 0, $7 = 0, label = 0;
 $3 = HEAP32[$0 + 72 >> 2] | 0; //@line 25782
 $5 = HEAP8[$0 + 76 >> 0] | 0; //@line 25784
 if (!($5 << 24 >> 24)) {
  $16 = 0; //@line 25787
  return $16 | 0; //@line 25788
 } else {
  $$01113 = 0; //@line 25790
 }
 while (1) {
  $7 = $$01113 & 255; //@line 25793
  if ((HEAP32[$3 + ($7 * 24 | 0) + 20 >> 2] | 0) >>> 0 >= $1 >>> 0) {
   if ((HEAP32[$3 + ($7 * 24 | 0) + 16 >> 2] | 0) >>> 0 <= $1 >>> 0) {
    $16 = 1; //@line 25802
    label = 5; //@line 25803
    break;
   }
  }
  $$01113 = $$01113 + 1 << 24 >> 24; //@line 25807
  if (($$01113 & 255) >= ($5 & 255)) {
   $16 = 0; //@line 25812
   label = 5; //@line 25813
   break;
  }
 }
 if ((label | 0) == 5) {
  return $16 | 0; //@line 25818
 }
 return 0; //@line 25820
}
function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14574
 STACKTOP = STACKTOP + 16 | 0; //@line 14575
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14575
 $1 = sp; //@line 14576
 HEAP32[$1 >> 2] = $varargs; //@line 14577
 $2 = HEAP32[2570] | 0; //@line 14578
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14579
 $3 = _vfprintf($2, $0, $1) | 0; //@line 14580
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 786; //@line 14583
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 14585
  sp = STACKTOP; //@line 14586
  STACKTOP = sp; //@line 14587
  return 0; //@line 14587
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14589
  STACKTOP = sp; //@line 14590
  return $3 | 0; //@line 14590
 }
 return 0; //@line 14592
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16497
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16499
 $3 = HEAP32[$2 >> 2] | 0; //@line 16500
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0; //@line 16503
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 16504
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 16505
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 648; //@line 16508
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 16509
  HEAP32[$7 >> 2] = $2; //@line 16510
  sp = STACKTOP; //@line 16511
  return;
 }
 ___async_unwind = 0; //@line 16514
 HEAP32[$ReallocAsyncCtx2 >> 2] = 648; //@line 16515
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 16516
 HEAP32[$7 >> 2] = $2; //@line 16517
 sp = STACKTOP; //@line 16518
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_391($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx33 = 0, sp = 0;
 sp = STACKTOP; //@line 22130
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22134
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[___async_retval >> 2] = -1011; //@line 22138
  return;
 }
 $ReallocAsyncCtx33 = _emscripten_realloc_async_context(8) | 0; //@line 22141
 _mbed_assert_internal(13142, 12226, 1141); //@line 22142
 if (___async) {
  HEAP32[$ReallocAsyncCtx33 >> 2] = 250; //@line 22145
  $6 = $ReallocAsyncCtx33 + 4 | 0; //@line 22146
  HEAP32[$6 >> 2] = $4; //@line 22147
  sp = STACKTOP; //@line 22148
  return;
 }
 ___async_unwind = 0; //@line 22151
 HEAP32[$ReallocAsyncCtx33 >> 2] = 250; //@line 22152
 $6 = $ReallocAsyncCtx33 + 4 | 0; //@line 22153
 HEAP32[$6 >> 2] = $4; //@line 22154
 sp = STACKTOP; //@line 22155
 return;
}
function _initialize__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 35002
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35004
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35006
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35008
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] | 0; //@line 35011
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 35012
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 35013
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 35017
  ___async_unwind = 0; //@line 35018
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 703; //@line 35020
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 35022
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $2; //@line 35024
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 35026
 sp = STACKTOP; //@line 35027
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16867
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16869
 $3 = HEAP32[$2 >> 2] | 0; //@line 16870
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0; //@line 16873
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 16874
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 16875
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 645; //@line 16878
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 16879
  HEAP32[$7 >> 2] = $2; //@line 16880
  sp = STACKTOP; //@line 16881
  return;
 }
 ___async_unwind = 0; //@line 16884
 HEAP32[$ReallocAsyncCtx2 >> 2] = 645; //@line 16885
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 16886
 HEAP32[$7 >> 2] = $2; //@line 16887
 sp = STACKTOP; //@line 16888
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_395($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx31 = 0, sp = 0;
 sp = STACKTOP; //@line 22264
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22268
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 22272
  return;
 }
 $ReallocAsyncCtx31 = _emscripten_realloc_async_context(8) | 0; //@line 22275
 _mbed_assert_internal(13142, 12226, 1223); //@line 22276
 if (___async) {
  HEAP32[$ReallocAsyncCtx31 >> 2] = 264; //@line 22279
  $6 = $ReallocAsyncCtx31 + 4 | 0; //@line 22280
  HEAP32[$6 >> 2] = $4; //@line 22281
  sp = STACKTOP; //@line 22282
  return;
 }
 ___async_unwind = 0; //@line 22285
 HEAP32[$ReallocAsyncCtx31 >> 2] = 264; //@line 22286
 $6 = $ReallocAsyncCtx31 + 4 | 0; //@line 22287
 HEAP32[$6 >> 2] = $4; //@line 22288
 sp = STACKTOP; //@line 22289
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_393($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx32 = 0, sp = 0;
 sp = STACKTOP; //@line 22197
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22201
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 22205
  return;
 }
 $ReallocAsyncCtx32 = _emscripten_realloc_async_context(8) | 0; //@line 22208
 _mbed_assert_internal(13142, 12226, 1186); //@line 22209
 if (___async) {
  HEAP32[$ReallocAsyncCtx32 >> 2] = 255; //@line 22212
  $6 = $ReallocAsyncCtx32 + 4 | 0; //@line 22213
  HEAP32[$6 >> 2] = $4; //@line 22214
  sp = STACKTOP; //@line 22215
  return;
 }
 ___async_unwind = 0; //@line 22218
 HEAP32[$ReallocAsyncCtx32 >> 2] = 255; //@line 22219
 $6 = $ReallocAsyncCtx32 + 4 | 0; //@line 22220
 HEAP32[$6 >> 2] = $4; //@line 22221
 sp = STACKTOP; //@line 22222
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11876
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 11879
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 11881
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 11883
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 11888
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 11893
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11895
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 11896
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 382; //@line 11899
  sp = STACKTOP; //@line 11900
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11903
  return;
 }
}
function __ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb_272($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9810
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9816
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 9821
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9823
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 776 >> 0] = HEAP8[$0 + 8 >> 0] | 0; //@line 9827
 _printf(10904, $6) | 0; //@line 9828
 HEAP32[$12 >> 2] = $10 & 1; //@line 9830
 _printf(11136, $12) | 0; //@line 9831
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 9832
 _putchar(10) | 0; //@line 9833
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 89; //@line 9836
  sp = STACKTOP; //@line 9837
  return;
 }
 ___async_unwind = 0; //@line 9840
 HEAP32[$ReallocAsyncCtx >> 2] = 89; //@line 9841
 sp = STACKTOP; //@line 9842
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3107
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 3110
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 3112
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 3114
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 3119
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 3124
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3126
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 3127
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 138; //@line 3130
  sp = STACKTOP; //@line 3131
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3134
  return;
 }
}
function _mbedtls_ccm_setkey__async_cb_463($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 33857
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33859
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33861
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33863
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33865
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 33866
 $9 = _mbedtls_cipher_setup($2, $4) | 0; //@line 33867
 if (!___async) {
  HEAP32[___async_retval >> 2] = $9; //@line 33871
  ___async_unwind = 0; //@line 33872
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 674; //@line 33874
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 33876
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 33878
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 33880
 sp = STACKTOP; //@line 33881
 return;
}
function _mbedtls_cipher_info_from_values($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010 = 0, $$011 = 0, $3 = 0, $6 = 0, label = 0;
 $3 = HEAP32[2374] | 0; //@line 1811
 if (!$3) {
  $$010 = 0; //@line 1814
  return $$010 | 0; //@line 1815
 } else {
  $$011 = 9492; //@line 1817
  $6 = $3; //@line 1817
 }
 while (1) {
  if ((HEAP32[HEAP32[$6 + 28 >> 2] >> 2] | 0) == ($0 | 0)) {
   if ((HEAP32[$6 + 8 >> 2] | 0) == ($1 | 0)) {
    if ((HEAP32[$6 + 4 >> 2] | 0) == ($2 | 0)) {
     $$010 = $6; //@line 1833
     label = 6; //@line 1834
     break;
    }
   }
  }
  $6 = HEAP32[$$011 + 12 >> 2] | 0; //@line 1841
  if (!$6) {
   $$010 = 0; //@line 1844
   label = 6; //@line 1845
   break;
  } else {
   $$011 = $$011 + 8 | 0; //@line 1848
  }
 }
 if ((label | 0) == 6) {
  return $$010 | 0; //@line 1852
 }
 return 0; //@line 1854
}
function __ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb_251($0) {
 $0 = $0 | 0;
 var $10 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8742
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 8748
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8750
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8752
 _printf(10904, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 8755
 HEAP32[$8 >> 2] = $10; //@line 8757
 HEAP32[$8 + 4 >> 2] = $6 & 255; //@line 8759
 _printf(11158, $8) | 0; //@line 8760
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 8761
 _putchar(10) | 0; //@line 8762
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 87; //@line 8765
  sp = STACKTOP; //@line 8766
  return;
 }
 ___async_unwind = 0; //@line 8769
 HEAP32[$ReallocAsyncCtx >> 2] = 87; //@line 8770
 sp = STACKTOP; //@line 8771
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_437($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 29521
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29525
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29527
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29529
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29531
 $11 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 29533
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 29534
 FUNCTION_TABLE_vii[$11 & 31]($4, $6); //@line 29535
 if (!___async) {
  ___async_unwind = 0; //@line 29538
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 482; //@line 29540
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $8; //@line 29542
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $10; //@line 29544
 sp = STACKTOP; //@line 29545
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_292($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11371
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11373
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11375
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11377
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0; //@line 11380
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 11381
 FUNCTION_TABLE_vi[$9 & 1023]($2); //@line 11382
 if (!___async) {
  ___async_unwind = 0; //@line 11385
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 105; //@line 11387
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 11389
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 11391
 HEAP8[$ReallocAsyncCtx2 + 12 >> 0] = 0; //@line 11394
 sp = STACKTOP; //@line 11395
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb($0) {
 $0 = $0 | 0;
 var $$054$ = 0, $13 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21558
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21560
 $$054$ = (HEAP32[___async_retval >> 2] | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : -1014; //@line 21566
 $13 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 21567
 HEAP8[(HEAPU16[$6 >> 1] | 0) + ($8 + 381) >> 0] = $13; //@line 21572
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 1 + ($8 + 381) >> 0] = $13 >>> 8; //@line 21579
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 2 + ($8 + 381) >> 0] = $13 >>> 16; //@line 21586
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 3 + ($8 + 381) >> 0] = $13 >>> 24; //@line 21593
 HEAP16[$6 >> 1] = (HEAPU16[$6 >> 1] | 0) + 4; //@line 21598
 HEAP32[___async_retval >> 2] = $$054$; //@line 21600
 return;
}
function _sprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14496
 STACKTOP = STACKTOP + 16 | 0; //@line 14497
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14497
 $2 = sp; //@line 14498
 HEAP32[$2 >> 2] = $varargs; //@line 14499
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14500
 $3 = _vsprintf($0, $1, $2) | 0; //@line 14501
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 784; //@line 14504
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 14506
  sp = STACKTOP; //@line 14507
  STACKTOP = sp; //@line 14508
  return 0; //@line 14508
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14510
  STACKTOP = sp; //@line 14511
  return $3 | 0; //@line 14511
 }
 return 0; //@line 14513
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10164
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10166
 $4 = HEAP32[$2 + 356 >> 2] | 0; //@line 10168
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 10170
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1076 | 0); //@line 10171
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 433; //@line 10174
  $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 10175
  HEAP32[$6 >> 2] = $2; //@line 10176
  sp = STACKTOP; //@line 10177
  return;
 }
 ___async_unwind = 0; //@line 10180
 HEAP32[$ReallocAsyncCtx2 >> 2] = 433; //@line 10181
 $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 10182
 HEAP32[$6 >> 2] = $2; //@line 10183
 sp = STACKTOP; //@line 10184
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_3($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16685
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16689
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16690
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 16692
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1076 | 0); //@line 16693
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 547; //@line 16696
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 16697
  HEAP32[$7 >> 2] = $4; //@line 16698
  sp = STACKTOP; //@line 16699
  return;
 }
 ___async_unwind = 0; //@line 16702
 HEAP32[$ReallocAsyncCtx2 >> 2] = 547; //@line 16703
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 16704
 HEAP32[$7 >> 2] = $4; //@line 16705
 sp = STACKTOP; //@line 16706
 return;
}
function __ZN7LoRaMacD2Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10986
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10988
 __ZN12radio_eventsD2Ev($0 + 1212 | 0); //@line 10989
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 346; //@line 10992
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 10994
  sp = STACKTOP; //@line 10995
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10998
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11000
 __ZN14lorawan_timersD2Ev($0 + 980 | 0); //@line 11001
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 347; //@line 11004
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11006
  sp = STACKTOP; //@line 11007
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11010
  return;
 }
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 15159
 $5 = HEAP32[$4 >> 2] | 0; //@line 15160
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 15164
   HEAP32[$1 + 24 >> 2] = $3; //@line 15166
   HEAP32[$1 + 36 >> 2] = 1; //@line 15168
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 15172
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 15175
    HEAP32[$1 + 24 >> 2] = 2; //@line 15177
    HEAP8[$1 + 54 >> 0] = 1; //@line 15179
    break;
   }
   $10 = $1 + 24 | 0; //@line 15182
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 15186
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9937
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 9939
 $3 = __ZN7LoRaMac22get_phy_event_handlersEv($0 + 4 | 0) | 0; //@line 9940
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 315; //@line 9943
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 9945
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9947
  sp = STACKTOP; //@line 9948
  return 0; //@line 9949
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9951
  $6 = $0 + 1928 | 0; //@line 9952
  HEAP32[$6 >> 2] = $3; //@line 9953
  __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0 + 1336 | 0, $1); //@line 9955
  return HEAP32[$6 >> 2] | 0; //@line 9957
 }
 return 0; //@line 9959
}
function __ZN4mbed5Timer5startEv($0) {
 $0 = $0 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4363
 if (HEAP32[$0 >> 2] | 0) {
  return;
 }
 if (HEAP8[$0 + 28 >> 0] | 0) {}
 $7 = HEAP32[$0 + 24 >> 2] | 0; //@line 4375
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 4376
 $8 = _ticker_read_us($7) | 0; //@line 4377
 $9 = tempRet0; //@line 4378
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 175; //@line 4381
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4383
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 4385
  sp = STACKTOP; //@line 4386
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4389
 $13 = $0 + 8 | 0; //@line 4391
 HEAP32[$13 >> 2] = $8; //@line 4393
 HEAP32[$13 + 4 >> 2] = $9; //@line 4396
 HEAP32[$0 >> 2] = 1; //@line 4397
 return;
}
function __ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$09 = 0, $$1 = 0, $11 = 0, $19 = 0, $6 = 0, $9 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17837
 $$ = HEAP8[___async_retval >> 0] & 1 ? 3 : 2; //@line 17841
 $9 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 112 >> 2] | 0; //@line 17843
 $11 = HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0; //@line 17845
 $$1 = (HEAP32[$9 + ($11 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 17850
 if ($$1 << 24 >> 24 != 3) {
  $$09 = $$1; //@line 17853
  $19 = ___async_retval; //@line 17854
  HEAP8[$19 >> 0] = $$09; //@line 17855
  return;
 }
 HEAP32[$9 + ($11 * 12 | 0) + 4 >> 2] = HEAP32[$6 >> 2]; //@line 17860
 $$09 = 3; //@line 17861
 $19 = ___async_retval; //@line 17862
 HEAP8[$19 >> 0] = $$09; //@line 17863
 return;
}
function _equeue_post($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4836
 $4 = _equeue_tick() | 0; //@line 4838
 HEAP32[$2 + -4 >> 2] = $1; //@line 4840
 $6 = $2 + -16 | 0; //@line 4841
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $4; //@line 4844
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4845
 $9 = _equeue_enqueue($0, $2 + -36 | 0, $4) | 0; //@line 4846
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 182; //@line 4849
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4851
  sp = STACKTOP; //@line 4852
  return 0; //@line 4853
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4855
  _equeue_sema_signal($0 + 48 | 0); //@line 4857
  return $9 | 0; //@line 4858
 }
 return 0; //@line 4860
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_504($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 37206
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 37210
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 37212
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 37214
 $9 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 37216
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 37217
 FUNCTION_TABLE_viii[$9 & 7]($4, $6, $8); //@line 37218
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 294; //@line 37221
  sp = STACKTOP; //@line 37222
  return;
 }
 ___async_unwind = 0; //@line 37225
 HEAP32[$ReallocAsyncCtx >> 2] = 294; //@line 37226
 sp = STACKTOP; //@line 37227
 return;
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 10671
 $3 = HEAP8[$1 >> 0] | 0; //@line 10672
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 10677
  $$lcssa8 = $2; //@line 10677
 } else {
  $$011 = $1; //@line 10679
  $$0710 = $0; //@line 10679
  do {
   $$0710 = $$0710 + 1 | 0; //@line 10681
   $$011 = $$011 + 1 | 0; //@line 10682
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 10683
   $9 = HEAP8[$$011 >> 0] | 0; //@line 10684
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 10689
  $$lcssa8 = $8; //@line 10689
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 10699
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 15709
 STACKTOP = STACKTOP + 16 | 0; //@line 15710
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15710
 $vararg_buffer = sp; //@line 15711
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 15712
 FUNCTION_TABLE_v[$0 & 15](); //@line 15713
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 804; //@line 15716
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 15718
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 15720
  sp = STACKTOP; //@line 15721
  STACKTOP = sp; //@line 15722
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15724
  _abort_message(19118, $vararg_buffer); //@line 15725
 }
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6356
 $2 = HEAP32[2570] | 0; //@line 6357
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6358
 _putc($1, $2) | 0; //@line 6359
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 739; //@line 6362
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 6364
  sp = STACKTOP; //@line 6365
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6368
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6369
 _fflush($2) | 0; //@line 6370
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 740; //@line 6373
  sp = STACKTOP; //@line 6374
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6377
  return;
 }
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10623
 STACKTOP = STACKTOP + 32 | 0; //@line 10624
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10624
 $vararg_buffer = sp; //@line 10625
 HEAP32[$0 + 36 >> 2] = 9; //@line 10628
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 10636
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 10638
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 10640
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 10645
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 10648
 STACKTOP = sp; //@line 10649
 return $14 | 0; //@line 10649
}
function __ZN7LoRaMac10disconnectEv__async_cb_2($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16661
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16663
 $3 = HEAP32[$2 >> 2] | 0; //@line 16664
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 16665
 __ZN7LoRaPHY18put_radio_to_sleepEv($3); //@line 16666
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 548; //@line 16669
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 16670
  HEAP32[$4 >> 2] = $2; //@line 16671
  sp = STACKTOP; //@line 16672
  return;
 }
 ___async_unwind = 0; //@line 16675
 HEAP32[$ReallocAsyncCtx >> 2] = 548; //@line 16676
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 16677
 HEAP32[$4 >> 2] = $2; //@line 16678
 sp = STACKTOP; //@line 16679
 return;
}
function _mbed_die__async_cb_115($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 36645
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36647
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 36649
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 36650
 _wait_ms(150); //@line 36651
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 722; //@line 36654
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 36655
  HEAP32[$4 >> 2] = $2; //@line 36656
  sp = STACKTOP; //@line 36657
  return;
 }
 ___async_unwind = 0; //@line 36660
 HEAP32[$ReallocAsyncCtx14 >> 2] = 722; //@line 36661
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 36662
 HEAP32[$4 >> 2] = $2; //@line 36663
 sp = STACKTOP; //@line 36664
 return;
}
function _mbed_die__async_cb_114($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 36620
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36622
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 36624
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 36625
 _wait_ms(150); //@line 36626
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 723; //@line 36629
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 36630
  HEAP32[$4 >> 2] = $2; //@line 36631
  sp = STACKTOP; //@line 36632
  return;
 }
 ___async_unwind = 0; //@line 36635
 HEAP32[$ReallocAsyncCtx13 >> 2] = 723; //@line 36636
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 36637
 HEAP32[$4 >> 2] = $2; //@line 36638
 sp = STACKTOP; //@line 36639
 return;
}
function _mbed_die__async_cb_113($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 36595
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36597
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 36599
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 36600
 _wait_ms(150); //@line 36601
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 724; //@line 36604
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 36605
  HEAP32[$4 >> 2] = $2; //@line 36606
  sp = STACKTOP; //@line 36607
  return;
 }
 ___async_unwind = 0; //@line 36610
 HEAP32[$ReallocAsyncCtx12 >> 2] = 724; //@line 36611
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 36612
 HEAP32[$4 >> 2] = $2; //@line 36613
 sp = STACKTOP; //@line 36614
 return;
}
function _mbed_die__async_cb_112($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 36570
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36572
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 36574
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 36575
 _wait_ms(150); //@line 36576
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 725; //@line 36579
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 36580
  HEAP32[$4 >> 2] = $2; //@line 36581
  sp = STACKTOP; //@line 36582
  return;
 }
 ___async_unwind = 0; //@line 36585
 HEAP32[$ReallocAsyncCtx11 >> 2] = 725; //@line 36586
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 36587
 HEAP32[$4 >> 2] = $2; //@line 36588
 sp = STACKTOP; //@line 36589
 return;
}
function _mbed_die__async_cb_111($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 36545
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36547
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 36549
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 36550
 _wait_ms(150); //@line 36551
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 726; //@line 36554
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 36555
  HEAP32[$4 >> 2] = $2; //@line 36556
  sp = STACKTOP; //@line 36557
  return;
 }
 ___async_unwind = 0; //@line 36560
 HEAP32[$ReallocAsyncCtx10 >> 2] = 726; //@line 36561
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 36562
 HEAP32[$4 >> 2] = $2; //@line 36563
 sp = STACKTOP; //@line 36564
 return;
}
function _mbed_die__async_cb_110($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 36520
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36522
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 36524
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 36525
 _wait_ms(150); //@line 36526
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 727; //@line 36529
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 36530
  HEAP32[$4 >> 2] = $2; //@line 36531
  sp = STACKTOP; //@line 36532
  return;
 }
 ___async_unwind = 0; //@line 36535
 HEAP32[$ReallocAsyncCtx9 >> 2] = 727; //@line 36536
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 36537
 HEAP32[$4 >> 2] = $2; //@line 36538
 sp = STACKTOP; //@line 36539
 return;
}
function _mbed_die__async_cb_109($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 36495
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36497
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 36499
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 36500
 _wait_ms(400); //@line 36501
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 728; //@line 36504
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 36505
  HEAP32[$4 >> 2] = $2; //@line 36506
  sp = STACKTOP; //@line 36507
  return;
 }
 ___async_unwind = 0; //@line 36510
 HEAP32[$ReallocAsyncCtx8 >> 2] = 728; //@line 36511
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 36512
 HEAP32[$4 >> 2] = $2; //@line 36513
 sp = STACKTOP; //@line 36514
 return;
}
function _mbed_die__async_cb_108($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 36470
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36472
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 36474
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 36475
 _wait_ms(400); //@line 36476
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 729; //@line 36479
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 36480
  HEAP32[$4 >> 2] = $2; //@line 36481
  sp = STACKTOP; //@line 36482
  return;
 }
 ___async_unwind = 0; //@line 36485
 HEAP32[$ReallocAsyncCtx7 >> 2] = 729; //@line 36486
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 36487
 HEAP32[$4 >> 2] = $2; //@line 36488
 sp = STACKTOP; //@line 36489
 return;
}
function _mbed_die__async_cb_107($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 36445
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36447
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 36449
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 36450
 _wait_ms(400); //@line 36451
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 730; //@line 36454
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 36455
  HEAP32[$4 >> 2] = $2; //@line 36456
  sp = STACKTOP; //@line 36457
  return;
 }
 ___async_unwind = 0; //@line 36460
 HEAP32[$ReallocAsyncCtx6 >> 2] = 730; //@line 36461
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 36462
 HEAP32[$4 >> 2] = $2; //@line 36463
 sp = STACKTOP; //@line 36464
 return;
}
function _mbed_die__async_cb_106($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 36420
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36422
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 36424
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 36425
 _wait_ms(400); //@line 36426
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 731; //@line 36429
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 36430
  HEAP32[$4 >> 2] = $2; //@line 36431
  sp = STACKTOP; //@line 36432
  return;
 }
 ___async_unwind = 0; //@line 36435
 HEAP32[$ReallocAsyncCtx5 >> 2] = 731; //@line 36436
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 36437
 HEAP32[$4 >> 2] = $2; //@line 36438
 sp = STACKTOP; //@line 36439
 return;
}
function _mbed_die__async_cb_105($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 36395
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36397
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 36399
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 36400
 _wait_ms(400); //@line 36401
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 732; //@line 36404
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 36405
  HEAP32[$4 >> 2] = $2; //@line 36406
  sp = STACKTOP; //@line 36407
  return;
 }
 ___async_unwind = 0; //@line 36410
 HEAP32[$ReallocAsyncCtx4 >> 2] = 732; //@line 36411
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 36412
 HEAP32[$4 >> 2] = $2; //@line 36413
 sp = STACKTOP; //@line 36414
 return;
}
function _mbed_die__async_cb_104($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 36370
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36372
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 36374
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 36375
 _wait_ms(400); //@line 36376
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 733; //@line 36379
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 36380
  HEAP32[$4 >> 2] = $2; //@line 36381
  sp = STACKTOP; //@line 36382
  return;
 }
 ___async_unwind = 0; //@line 36385
 HEAP32[$ReallocAsyncCtx3 >> 2] = 733; //@line 36386
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 36387
 HEAP32[$4 >> 2] = $2; //@line 36388
 sp = STACKTOP; //@line 36389
 return;
}
function _mbed_die__async_cb_103($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 36345
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36347
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 36349
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 36350
 _wait_ms(400); //@line 36351
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 734; //@line 36354
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 36355
  HEAP32[$4 >> 2] = $2; //@line 36356
  sp = STACKTOP; //@line 36357
  return;
 }
 ___async_unwind = 0; //@line 36360
 HEAP32[$ReallocAsyncCtx2 >> 2] = 734; //@line 36361
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 36362
 HEAP32[$4 >> 2] = $2; //@line 36363
 sp = STACKTOP; //@line 36364
 return;
}
function _mbed_die__async_cb_102($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 36320
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36322
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 36324
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 36325
 _wait_ms(400); //@line 36326
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 735; //@line 36329
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 36330
  HEAP32[$4 >> 2] = $2; //@line 36331
  sp = STACKTOP; //@line 36332
  return;
 }
 ___async_unwind = 0; //@line 36335
 HEAP32[$ReallocAsyncCtx >> 2] = 735; //@line 36336
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 36337
 HEAP32[$4 >> 2] = $2; //@line 36338
 sp = STACKTOP; //@line 36339
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_8($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 16986
 $4 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 788 >> 2] | 0; //@line 16990
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 60 >> 2] | 0; //@line 16996
 if (!$7) {
  return;
 }
 $10 = HEAP32[$7 >> 2] | 0; //@line 17002
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 17003
 FUNCTION_TABLE_vi[$10 & 1023]($4 + 48 | 0); //@line 17004
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 136; //@line 17007
  sp = STACKTOP; //@line 17008
  return;
 }
 ___async_unwind = 0; //@line 17011
 HEAP32[$ReallocAsyncCtx4 >> 2] = 136; //@line 17012
 sp = STACKTOP; //@line 17013
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_1($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16609
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16613
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16615
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 16617
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 16618
 FUNCTION_TABLE_vii[$7 & 31]($4, $6); //@line 16619
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 297; //@line 16622
  sp = STACKTOP; //@line 16623
  return;
 }
 ___async_unwind = 0; //@line 16626
 HEAP32[$ReallocAsyncCtx >> 2] = 297; //@line 16627
 sp = STACKTOP; //@line 16628
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_238($0) {
 $0 = $0 | 0;
 var $10 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 8208
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8214
 if (!(HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 11 >> 0] | 0)) {
  return;
 }
 $10 = HEAP8[HEAP32[$0 + 8 >> 2] >> 0] | 0; //@line 8221
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 8222
 __ZN12LoRaWANStack9handle_txEhPKhth($6, $10, 0, 0, 2) | 0; //@line 8223
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 226; //@line 8226
  sp = STACKTOP; //@line 8227
  return;
 }
 ___async_unwind = 0; //@line 8230
 HEAP32[$ReallocAsyncCtx7 >> 2] = 226; //@line 8231
 sp = STACKTOP; //@line 8232
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10557
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10559
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10561
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10563
 $8 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0; //@line 10565
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 10566
 FUNCTION_TABLE_vii[$8 & 31]($2, $4); //@line 10567
 if (!___async) {
  ___async_unwind = 0; //@line 10570
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 194; //@line 10572
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $6; //@line 10574
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $2; //@line 10576
 sp = STACKTOP; //@line 10577
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_347($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16334
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16336
 $3 = $2 + 944 | 0; //@line 16337
 HEAP8[$3 >> 0] = HEAP8[$3 >> 0] | 32; //@line 16340
 $7 = HEAP32[$2 + 356 >> 2] | 0; //@line 16342
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 16344
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($7, $2 + 996 | 0, 1); //@line 16345
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 452; //@line 16348
  sp = STACKTOP; //@line 16349
  return;
 }
 ___async_unwind = 0; //@line 16352
 HEAP32[$ReallocAsyncCtx3 >> 2] = 452; //@line 16353
 sp = STACKTOP; //@line 16354
 return;
}
function __ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_188($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3910
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3914
 $5 = $4 + 944 | 0; //@line 3915
 HEAP8[$5 >> 0] = HEAP8[$5 >> 0] | 34; //@line 3918
 $9 = HEAP32[$4 + 356 >> 2] | 0; //@line 3920
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 3922
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($9, $4 + 996 | 0, 1); //@line 3923
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 431; //@line 3926
  sp = STACKTOP; //@line 3927
  return;
 }
 ___async_unwind = 0; //@line 3930
 HEAP32[$ReallocAsyncCtx2 >> 2] = 431; //@line 3931
 sp = STACKTOP; //@line 3932
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $9 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16636
 HEAP8[$2 + 372 >> 0] = 0; //@line 16638
 HEAP8[$2 + 377 >> 0] = 0; //@line 16640
 HEAP8[$2 + 371 >> 0] = 1; //@line 16642
 HEAP8[$2 + 373 >> 0] = 0; //@line 16644
 HEAP8[$2 + 374 >> 0] = 0; //@line 16646
 HEAP8[$2 + 944 >> 0] = 0; //@line 16648
 $9 = $2 + 968 | 0; //@line 16649
 HEAP32[$9 >> 2] = 0; //@line 16650
 $10 = $2 + 4 | 0; //@line 16651
 __ZN14LoRaMacCommand20clear_command_bufferEv($10); //@line 16652
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($10); //@line 16653
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($10); //@line 16654
 HEAP32[$9 >> 2] = 0; //@line 16655
 return;
}
function __ZN4mbed10TimerEventC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4489
 HEAP32[$0 >> 2] = 704; //@line 4490
 $1 = $0 + 8 | 0; //@line 4491
 HEAP32[$1 >> 2] = 0; //@line 4492
 HEAP32[$1 + 4 >> 2] = 0; //@line 4492
 HEAP32[$1 + 8 >> 2] = 0; //@line 4492
 HEAP32[$1 + 12 >> 2] = 0; //@line 4492
 $2 = _get_us_ticker_data() | 0; //@line 4493
 HEAP32[$0 + 24 >> 2] = $2; //@line 4495
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4496
 _ticker_set_handler($2, 37); //@line 4497
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 178; //@line 4500
  sp = STACKTOP; //@line 4501
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4504
  return;
 }
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7142
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7144
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 7150
  return;
 }
 $4 = HEAP32[$2 >> 2] | 0; //@line 7153
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 7154
 __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 7155
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 594; //@line 7158
  sp = STACKTOP; //@line 7159
  return;
 }
 ___async_unwind = 0; //@line 7162
 HEAP32[$ReallocAsyncCtx2 >> 2] = 594; //@line 7163
 sp = STACKTOP; //@line 7164
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_226($0) {
 $0 = $0 | 0;
 var $6 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 7663
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7669
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  return;
 }
 _printf(12178, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 7678
 _printf(12324, $6) | 0; //@line 7679
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 7680
 _putchar(10) | 0; //@line 7681
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 230; //@line 7684
  sp = STACKTOP; //@line 7685
  return;
 }
 ___async_unwind = 0; //@line 7688
 HEAP32[$ReallocAsyncCtx6 >> 2] = 230; //@line 7689
 sp = STACKTOP; //@line 7690
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_497($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 36755
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36757
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 36759
 __ZN14lorawan_timersD2Ev($2 + 980 | 0); //@line 36760
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 347; //@line 36763
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 36764
  HEAP32[$4 >> 2] = $2; //@line 36765
  sp = STACKTOP; //@line 36766
  return;
 }
 ___async_unwind = 0; //@line 36769
 HEAP32[$ReallocAsyncCtx >> 2] = 347; //@line 36770
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 36771
 HEAP32[$4 >> 2] = $2; //@line 36772
 sp = STACKTOP; //@line 36773
 return;
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 10794
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 10796
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 10802
  $11 = ___fwritex($0, $4, $3) | 0; //@line 10803
  if ($phitmp) {
   $13 = $11; //@line 10805
  } else {
   ___unlockfile($3); //@line 10807
   $13 = $11; //@line 10808
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 10812
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 10816
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 10819
 }
 return $15 | 0; //@line 10821
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3359
 __ZN4mbed6Ticker6detachEv($0 + 1240 | 0); //@line 3361
 HEAP8[$0 + 688 >> 0] = 0; //@line 3363
 $4 = HEAP32[$0 + 788 >> 2] | 0; //@line 3365
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 12 >> 2] | 0; //@line 3371
 if (!$7) {
  return;
 }
 $9 = HEAP32[$7 >> 2] | 0; //@line 3376
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3377
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 3378
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 147; //@line 3381
  sp = STACKTOP; //@line 3382
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3385
 return;
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 13016
 } else {
  $$056 = $2; //@line 13018
  $15 = $1; //@line 13018
  $8 = $0; //@line 13018
  while (1) {
   $14 = $$056 + -1 | 0; //@line 13026
   HEAP8[$14 >> 0] = HEAPU8[16781 + ($8 & 15) >> 0] | 0 | $3; //@line 13027
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 13028
   $15 = tempRet0; //@line 13029
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 13034
    break;
   } else {
    $$056 = $14; //@line 13037
   }
  }
 }
 return $$05$lcssa | 0; //@line 13041
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_436($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29496
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29500
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29502
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 29504
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 29505
 FUNCTION_TABLE_vii[$7 & 31]($4, $6); //@line 29506
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 29509
  sp = STACKTOP; //@line 29510
  return;
 }
 ___async_unwind = 0; //@line 29513
 HEAP32[$ReallocAsyncCtx5 >> 2] = 484; //@line 29514
 sp = STACKTOP; //@line 29515
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_6($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 16760
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16762
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16764
 $5 = HEAP32[$2 >> 2] | 0; //@line 16765
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 16767
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1016 | 0); //@line 16768
 if (!___async) {
  ___async_unwind = 0; //@line 16771
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 544; //@line 16773
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 16775
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 16777
 sp = STACKTOP; //@line 16778
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_5($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 16736
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16738
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16740
 $5 = HEAP32[$2 >> 2] | 0; //@line 16741
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 16743
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1036 | 0); //@line 16744
 if (!___async) {
  ___async_unwind = 0; //@line 16747
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 545; //@line 16749
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 16751
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 16753
 sp = STACKTOP; //@line 16754
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_4($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16712
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16714
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16716
 $5 = HEAP32[$2 >> 2] | 0; //@line 16717
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 16719
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1056 | 0); //@line 16720
 if (!___async) {
  ___async_unwind = 0; //@line 16723
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 546; //@line 16725
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 16727
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 16729
 sp = STACKTOP; //@line 16730
 return;
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 437
 newDynamicTop = oldDynamicTop + increment | 0; //@line 438
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 442
  ___setErrNo(12); //@line 443
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 447
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 451
   ___setErrNo(12); //@line 452
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 456
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_173($0) {
 $0 = $0 | 0;
 var $$0 = 0, $13 = 0, $15 = 0, $8 = 0, $AsyncRetVal = 0;
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2974
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2978
 if (!$AsyncRetVal) {
  $13 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 2981
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv(HEAP32[$0 + 12 >> 2] | 0) | 0) >> 2] = $13; //@line 2983
  $15 = $8 + 944 | 0; //@line 2984
  HEAP8[$15 >> 0] = HEAP8[$15 >> 0] | 1; //@line 2987
  $$0 = 0; //@line 2988
 } else {
  HEAP8[$8 + 373 >> 0] = 0; //@line 2991
  $$0 = $AsyncRetVal; //@line 2992
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 2995
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_498($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 36864
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 36869
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 36871
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 36872
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 36873
 __ZN7LoRaPHY15setup_rx_windowEbj($7, $4, $6); //@line 36874
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 521; //@line 36877
  sp = STACKTOP; //@line 36878
  return;
 }
 ___async_unwind = 0; //@line 36881
 HEAP32[$ReallocAsyncCtx4 >> 2] = 521; //@line 36882
 sp = STACKTOP; //@line 36883
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_356($0) {
 $0 = $0 | 0;
 var $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16780
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16786
 _printf(10904, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 16789
 HEAP32[$6 >> 2] = 3; //@line 16790
 _printf(10999, $6) | 0; //@line 16791
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 16792
 _putchar(10) | 0; //@line 16793
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 112; //@line 16796
  sp = STACKTOP; //@line 16797
  return;
 }
 ___async_unwind = 0; //@line 16800
 HEAP32[$ReallocAsyncCtx3 >> 2] = 112; //@line 16801
 sp = STACKTOP; //@line 16802
 return;
}
function _mbedtls_gcm_free($0) {
 $0 = $0 | 0;
 var $$034$i = 0, $$05$i = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4727
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4728
 _mbedtls_cipher_free($0); //@line 4729
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 700; //@line 4732
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4734
  sp = STACKTOP; //@line 4735
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4738
 $$034$i = 400; //@line 4739
 $$05$i = $0; //@line 4739
 while (1) {
  $$034$i = $$034$i + -1 | 0; //@line 4741
  HEAP8[$$05$i >> 0] = 0; //@line 4743
  if (!$$034$i) {
   break;
  } else {
   $$05$i = $$05$i + 1 | 0; //@line 4748
  }
 }
 return;
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 15674
 $0 = ___cxa_get_globals_fast() | 0; //@line 15675
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 15678
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 15682
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 15694
    _emscripten_alloc_async_context(4, sp) | 0; //@line 15695
    __ZSt11__terminatePFvvE($16); //@line 15696
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 15701
 _emscripten_alloc_async_context(4, sp) | 0; //@line 15702
 __ZSt11__terminatePFvvE($17); //@line 15703
}
function __GLOBAL__sub_I_main_cpp__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16808
 __ZN5Sht31C2E7PinNameS0_(24232, 10, 11); //@line 16809
 __ZN4mbed11InterruptInC2E7PinName(23256, 1337); //@line 16810
 __ZN6events10EventQueueC2EjPh(23328, 1664, 0); //@line 16811
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 16812
 __ZN16LoRaWANInterfaceC2ER9LoRaRadio(23528, 19280); //@line 16813
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 751; //@line 16816
  sp = STACKTOP; //@line 16817
  return;
 }
 ___async_unwind = 0; //@line 16820
 HEAP32[$ReallocAsyncCtx2 >> 2] = 751; //@line 16821
 sp = STACKTOP; //@line 16822
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb_510($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 37626
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37628
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 37630
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 37637
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 37638
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 16 | 0); //@line 37639
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 359; //@line 37642
  sp = STACKTOP; //@line 37643
  return;
 }
 ___async_unwind = 0; //@line 37646
 HEAP32[$ReallocAsyncCtx5 >> 2] = 359; //@line 37647
 sp = STACKTOP; //@line 37648
 return;
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 11011
 $3 = HEAP8[$1 >> 0] | 0; //@line 11013
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 11017
 $7 = HEAP32[$0 >> 2] | 0; //@line 11018
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 11023
  HEAP32[$0 + 4 >> 2] = 0; //@line 11025
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 11027
  HEAP32[$0 + 28 >> 2] = $14; //@line 11029
  HEAP32[$0 + 20 >> 2] = $14; //@line 11031
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 11037
  $$0 = 0; //@line 11038
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 11041
  $$0 = -1; //@line 11042
 }
 return $$0 | 0; //@line 11044
}
function __ZN4mbed11InterruptInD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23832
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23834
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 23836
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 23843
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 23844
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 23845
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 158; //@line 23848
  sp = STACKTOP; //@line 23849
  return;
 }
 ___async_unwind = 0; //@line 23852
 HEAP32[$ReallocAsyncCtx2 >> 2] = 158; //@line 23853
 sp = STACKTOP; //@line 23854
 return;
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 27356
 $2 = HEAP32[$0 >> 2] | 0; //@line 27357
 $3 = $1 + 16 | 0; //@line 27358
 $4 = HEAP32[$3 >> 2] | 0; //@line 27359
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 27360
 __ZN6events10EventQueue6cancelEi($2, $4); //@line 27361
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 672; //@line 27364
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 27366
  sp = STACKTOP; //@line 27367
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 27370
  HEAP32[$3 >> 2] = 0; //@line 27371
  return;
 }
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18637
 if ((HEAP32[$0 + 968 >> 2] & 33 | 0) == 1) {
  $$0 = -1e3; //@line 18643
  return $$0 | 0; //@line 18644
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18647
 $7 = __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0 + 352 | 0, $1) | 0; //@line 18648
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 551; //@line 18651
  sp = STACKTOP; //@line 18652
  return 0; //@line 18653
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 18655
 $$0 = $7; //@line 18656
 return $$0 | 0; //@line 18657
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_166($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$pre = 0, $13 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2127
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2129
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2131
 if (!$AsyncRetVal) {
  $$1 = 0; //@line 2134
  $13 = ___async_retval; //@line 2135
  HEAP32[$13 >> 2] = $$1; //@line 2136
  return;
 }
 $$pre = HEAP8[$6 >> 0] | 0; //@line 2139
 HEAP8[$8 + 373 >> 0] = 0; //@line 2141
 HEAP8[$6 >> 0] = $$pre & -9; //@line 2143
 $$1 = $AsyncRetVal; //@line 2144
 $13 = ___async_retval; //@line 2145
 HEAP32[$13 >> 2] = $$1; //@line 2146
 return;
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$1 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36226
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36228
 $$ = HEAP8[___async_retval >> 0] & 1 ? 7 : 6; //@line 36232
 $6 = HEAP8[$2 >> 0] | 0; //@line 36233
 $$1 = ($6 << 24 >> 24 < (HEAP8[$4 + 28 >> 0] | 0) ? 1 : $6 << 24 >> 24 > (HEAP8[$4 + 29 >> 0] | 0)) ? $$ & 5 : $$; //@line 36242
 $16 = HEAP8[$2 + 1 >> 0] | 0; //@line 36244
 HEAP8[___async_retval >> 0] = ($16 << 24 >> 24 < (HEAP8[$4 + 32 >> 0] | 0) ? 1 : $16 << 24 >> 24 > (HEAP8[$4 + 33 >> 0] | 0)) ? $$1 & 3 : $$1; //@line 36255
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_476($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 34969
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34971
 $4 = HEAP32[$2 + 12 >> 2] | 0; //@line 34973
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 34979
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 34980
 FUNCTION_TABLE_vi[$7 & 1023]($2); //@line 34981
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 354; //@line 34984
  sp = STACKTOP; //@line 34985
  return;
 }
 ___async_unwind = 0; //@line 34988
 HEAP32[$ReallocAsyncCtx7 >> 2] = 354; //@line 34989
 sp = STACKTOP; //@line 34990
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_327($0) {
 $0 = $0 | 0;
 var $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 15063
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15069
 _printf(10904, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 15072
 HEAP32[$6 >> 2] = 5; //@line 15073
 _printf(10999, $6) | 0; //@line 15074
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 15075
 _putchar(10) | 0; //@line 15076
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 80; //@line 15079
  sp = STACKTOP; //@line 15080
  return;
 }
 ___async_unwind = 0; //@line 15083
 HEAP32[$ReallocAsyncCtx9 >> 2] = 80; //@line 15084
 sp = STACKTOP; //@line 15085
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_326($0) {
 $0 = $0 | 0;
 var $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 15035
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15041
 _printf(10904, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 15044
 HEAP32[$6 >> 2] = 6; //@line 15045
 _printf(10999, $6) | 0; //@line 15046
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 15047
 _putchar(10) | 0; //@line 15048
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 83; //@line 15051
  sp = STACKTOP; //@line 15052
  return;
 }
 ___async_unwind = 0; //@line 15055
 HEAP32[$ReallocAsyncCtx7 >> 2] = 83; //@line 15056
 sp = STACKTOP; //@line 15057
 return;
}
function __ZN4mbed5Timer7read_msEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $18 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $6 = 0, $9 = 0;
 $4 = $0 + 8 | 0; //@line 2157
 $6 = HEAP32[$4 >> 2] | 0; //@line 2159
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 2162
 $11 = ___async_retval; //@line 2164
 $18 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 2171
 $24 = _i64Subtract(HEAP32[$11 >> 2] | 0, HEAP32[$11 + 4 >> 2] | 0, HEAP32[$18 >> 2] | 0, HEAP32[$18 + 4 >> 2] | 0) | 0; //@line 2177
 $26 = _i64Add($24 | 0, tempRet0 | 0, $6 | 0, $9 | 0) | 0; //@line 2179
 $28 = ___udivdi3($26 | 0, tempRet0 | 0, 1e3, 0) | 0; //@line 2181
 HEAP32[___async_retval >> 2] = $28; //@line 2184
 return;
}
function __ZN16SX1276_LoRaRadio9start_cadEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2248
 STACKTOP = STACKTOP + 16 | 0; //@line 2249
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2249
 _printf(10904, sp) | 0; //@line 2252
 _printf(11047, sp + 8 | 0) | 0; //@line 2253
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2254
 _putchar(10) | 0; //@line 2255
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 106; //@line 2258
  sp = STACKTOP; //@line 2259
  STACKTOP = sp; //@line 2260
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2262
  STACKTOP = sp; //@line 2263
  return;
 }
}
function __ZN7LoRaMac21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18716
 if ((HEAP32[$0 + 968 >> 2] & 33 | 0) == 1) {
  $$0 = -1e3; //@line 18722
  return $$0 | 0; //@line 18723
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18726
 $7 = __ZN18LoRaMacChannelPlan21remove_single_channelEh($0 + 352 | 0, $1) | 0; //@line 18727
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 553; //@line 18730
  sp = STACKTOP; //@line 18731
  return 0; //@line 18732
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 18734
 $$0 = $7; //@line 18735
 return $$0 | 0; //@line 18736
}
function _mbedtls_cipher_setup__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28823
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28825
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28827
 HEAP32[$2 + 60 >> 2] = $AsyncRetVal; //@line 28829
 if (!$AsyncRetVal) {
  $$0 = -24960; //@line 28832
 } else {
  HEAP32[$2 >> 2] = $4; //@line 28834
  if ((HEAP32[$4 + 4 >> 2] | 0) == 2) {
   HEAP32[$2 + 12 >> 2] = 4; //@line 28840
   HEAP32[$2 + 16 >> 2] = 14; //@line 28842
   $$0 = 0; //@line 28843
  } else {
   $$0 = 0; //@line 28845
  }
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 28849
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_203($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6265
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 6268
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 6271
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 6272
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 6273
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 643; //@line 6276
  sp = STACKTOP; //@line 6277
  return;
 }
 ___async_unwind = 0; //@line 6280
 HEAP32[$ReallocAsyncCtx3 >> 2] = 643; //@line 6281
 sp = STACKTOP; //@line 6282
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_24($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18051
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18055
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 18057
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 18058
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 18059
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 381; //@line 18062
  sp = STACKTOP; //@line 18063
  return;
 }
 ___async_unwind = 0; //@line 18066
 HEAP32[$ReallocAsyncCtx >> 2] = 381; //@line 18067
 sp = STACKTOP; //@line 18068
 return;
}
function __ZN16SX1276_LoRaRadio11radio_resetEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 104
 STACKTOP = STACKTOP + 16 | 0; //@line 105
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 105
 _printf(10904, sp) | 0; //@line 108
 _printf(11653, sp + 8 | 0) | 0; //@line 109
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 110
 _putchar(10) | 0; //@line 111
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 52; //@line 114
  sp = STACKTOP; //@line 115
  STACKTOP = sp; //@line 116
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 118
  STACKTOP = sp; //@line 119
  return;
 }
}
function __ZN16LoRaWANInterface4sendEhPKhti__async_cb_373($0) {
 $0 = $0 | 0;
 var $$0 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18191
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18193
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 18195
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 18197
 if (!$2) {
  $$0 = -1003; //@line 18200
  $13 = ___async_retval; //@line 18201
  HEAP16[$13 >> 1] = $$0; //@line 18202
  return;
 }
 $$0 = __ZN12LoRaWANStack9handle_txEhPKhth(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $6, $2, $8, $4 & 255) | 0; //@line 18208
 $13 = ___async_retval; //@line 18209
 HEAP16[$13 >> 1] = $$0; //@line 18210
 return;
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 13053
 } else {
  $$06 = $2; //@line 13055
  $11 = $1; //@line 13055
  $7 = $0; //@line 13055
  while (1) {
   $10 = $$06 + -1 | 0; //@line 13060
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 13061
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 13062
   $11 = tempRet0; //@line 13063
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 13068
    break;
   } else {
    $$06 = $10; //@line 13071
   }
  }
 }
 return $$0$lcssa | 0; //@line 13075
}
function __ZN16SX1276_LoRaRadio6randomEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1380
 $1 = _emscripten_asm_const_i(4) | 0; //@line 1381
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 1384
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1385
 FUNCTION_TABLE_vi[$4 & 1023]($0); //@line 1386
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 85; //@line 1389
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 1391
  sp = STACKTOP; //@line 1392
  return 0; //@line 1393
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1395
  return $1 | 0; //@line 1396
 }
 return 0; //@line 1398
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_284($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10583
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10587
 $7 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 76 >> 2] | 0; //@line 10590
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 10591
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 10592
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 195; //@line 10595
  sp = STACKTOP; //@line 10596
  return;
 }
 ___async_unwind = 0; //@line 10599
 HEAP32[$ReallocAsyncCtx3 >> 2] = 195; //@line 10600
 sp = STACKTOP; //@line 10601
 return;
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_349($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16524
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16527
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 16530
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 16531
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 16532
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 649; //@line 16535
  sp = STACKTOP; //@line 16536
  return;
 }
 ___async_unwind = 0; //@line 16539
 HEAP32[$ReallocAsyncCtx3 >> 2] = 649; //@line 16540
 sp = STACKTOP; //@line 16541
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_359($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16894
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16897
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 16900
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 16901
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 16902
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 646; //@line 16905
  sp = STACKTOP; //@line 16906
  return;
 }
 ___async_unwind = 0; //@line 16909
 HEAP32[$ReallocAsyncCtx3 >> 2] = 646; //@line 16910
 sp = STACKTOP; //@line 16911
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_254($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8983
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 8986
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 8989
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 8990
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 8991
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 652; //@line 8994
  sp = STACKTOP; //@line 8995
  return;
 }
 ___async_unwind = 0; //@line 8998
 HEAP32[$ReallocAsyncCtx3 >> 2] = 652; //@line 8999
 sp = STACKTOP; //@line 9000
 return;
}
function __ZN7LoRaPHY16get_alternate_DREh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $12 = 0, $3 = 0, $6 = 0, $8 = 0;
 $3 = HEAP8[$0 + 31 >> 0] | 0; //@line 25234
 $6 = HEAP8[$0 + 26 >> 0] | 0; //@line 25237
 $8 = ($3 & 255) + 1 | 0; //@line 25239
 $12 = (($1 & 255) >>> 0) % (($8 - ($6 & 255) & 255) >>> 0) | 0; //@line 25243
 switch (($12 & 255) << 24 >> 24) {
 case 1:
  {
   $$0 = $3; //@line 25247
   return $$0 | 0; //@line 25248
  }
 case 0:
  {
   $$0 = $6; //@line 25252
   return $$0 | 0; //@line 25253
  }
 default:
  {
   $$0 = $8 - $12 & 255; //@line 25259
   return $$0 | 0; //@line 25260
  }
 }
 return 0; //@line 25263
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_215($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 7252
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 7255
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 7258
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 7259
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 7260
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 656; //@line 7263
  sp = STACKTOP; //@line 7264
  return;
 }
 ___async_unwind = 0; //@line 7267
 HEAP32[$ReallocAsyncCtx4 >> 2] = 656; //@line 7268
 sp = STACKTOP; //@line 7269
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_214($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 7229
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 7232
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 7235
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 7236
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 7237
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 656; //@line 7240
  sp = STACKTOP; //@line 7241
  return;
 }
 ___async_unwind = 0; //@line 7244
 HEAP32[$ReallocAsyncCtx4 >> 2] = 656; //@line 7245
 sp = STACKTOP; //@line 7246
 return;
}
function __ZN7LoRaMac19remove_channel_planEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18662
 if ((HEAP32[$0 + 968 >> 2] & 33 | 0) == 1) {
  $$0 = -1e3; //@line 18668
  return $$0 | 0; //@line 18669
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18672
 $6 = __ZN18LoRaMacChannelPlan11remove_planEv($0 + 352 | 0) | 0; //@line 18673
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 552; //@line 18676
  sp = STACKTOP; //@line 18677
  return 0; //@line 18678
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 18680
 $$0 = $6; //@line 18681
 return $$0 | 0; //@line 18682
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_273($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9879
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 9882
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 9885
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 9886
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 9887
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 663; //@line 9890
  sp = STACKTOP; //@line 9891
  return;
 }
 ___async_unwind = 0; //@line 9894
 HEAP32[$ReallocAsyncCtx3 >> 2] = 663; //@line 9895
 sp = STACKTOP; //@line 9896
 return;
}
function __ZN7LoRaPHY18verify_tx_datarateEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$sink$in = 0, $$sink5 = 0;
 do {
  if ($2) {
   $$sink$in = $0 + 30 | 0; //@line 26743
   $$sink5 = $0 + 31 | 0; //@line 26743
  } else {
   if (!(HEAP8[$0 + 132 >> 0] & 1)) {
    $$sink$in = $0 + 26 | 0; //@line 26752
    $$sink5 = $0 + 27 | 0; //@line 26752
    break;
   } else {
    $$sink$in = $0 + 35 | 0; //@line 26757
    $$sink5 = $0 + 27 | 0; //@line 26757
    break;
   }
  }
 } while (0);
 return ((HEAP8[$$sink$in >> 0] | 0) <= $1 << 24 >> 24 ? (HEAP8[$$sink5 >> 0] | 0) >= $1 << 24 >> 24 : 0) | 0; //@line 26767
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16576
 do {
  if (!$0) {
   $3 = 0; //@line 16580
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16582
   $2 = ___dynamic_cast($0, 464, 520, 0) | 0; //@line 16583
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 818; //@line 16586
    sp = STACKTOP; //@line 16587
    return 0; //@line 16588
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16590
    $3 = ($2 | 0) != 0 & 1; //@line 16593
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 16598
}
function __ZN7LoRaPHY24restore_default_channelsEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $5 = 0, $7 = 0, $8 = 0, $indvars$iv = 0;
 $2 = HEAP8[$0 + 128 >> 0] | 0; //@line 23865
 if (!($2 << 24 >> 24)) {
  return;
 }
 $5 = HEAP32[$0 + 124 >> 2] | 0; //@line 23871
 $7 = HEAP32[$0 + 120 >> 2] | 0; //@line 23873
 $8 = $2 & 255; //@line 23874
 $indvars$iv = 0; //@line 23875
 do {
  $11 = $7 + ($indvars$iv << 1) | 0; //@line 23879
  HEAP16[$11 >> 1] = HEAP16[$11 >> 1] | HEAP16[$5 + ($indvars$iv << 1) >> 1]; //@line 23882
  $indvars$iv = $indvars$iv + 1 | 0; //@line 23883
 } while ($indvars$iv >>> 0 < $8 >>> 0);
 return;
}
function __ZN4mbed7Timeout7handlerEv__async_cb_211($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7041
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7045
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 7047
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 7048
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 7049
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 173; //@line 7052
  sp = STACKTOP; //@line 7053
  return;
 }
 ___async_unwind = 0; //@line 7056
 HEAP32[$ReallocAsyncCtx >> 2] = 173; //@line 7057
 sp = STACKTOP; //@line 7058
 return;
}
function _invoke_ticker__async_cb_389($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22005
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 22011
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 22012
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 22013
 FUNCTION_TABLE_vi[$5 & 1023]($6); //@line 22014
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 747; //@line 22017
  sp = STACKTOP; //@line 22018
  return;
 }
 ___async_unwind = 0; //@line 22021
 HEAP32[$ReallocAsyncCtx >> 2] = 747; //@line 22022
 sp = STACKTOP; //@line 22023
 return;
}
function __Z18decrypt_join_framePKhtS0_Ph($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $4 = 0, $6 = 0;
 _mbedtls_aes_init(22960); //@line 22743
 $4 = _mbedtls_aes_setkey_enc(22960, $2, 128) | 0; //@line 22744
 if (!$4) {
  $6 = _mbedtls_aes_crypt_ecb(22960, 1, $0, $3) | 0; //@line 22747
  if (($1 & 65535) > 15 & ($6 | 0) == 0) {
   $$0 = _mbedtls_aes_crypt_ecb(22960, 1, $0 + 16 | 0, $3 + 16 | 0) | 0; //@line 22755
  } else {
   $$0 = $6; //@line 22757
  }
 } else {
  $$0 = $4; //@line 22760
 }
 _mbedtls_aes_free(22960); //@line 22762
 return $$0 | 0; //@line 22763
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13915
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 13917
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 13923
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13924
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 13925
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 423; //@line 13928
  sp = STACKTOP; //@line 13929
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13932
 return;
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 12697
 } else {
  $$04 = 0; //@line 12699
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 12702
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 12706
   $12 = $7 + 1 | 0; //@line 12707
   HEAP32[$0 >> 2] = $12; //@line 12708
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 12714
    break;
   } else {
    $$04 = $11; //@line 12717
   }
  }
 }
 return $$0$lcssa | 0; //@line 12721
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8932
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 8934
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 8940
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8941
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 8942
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 295; //@line 8945
  sp = STACKTOP; //@line 8946
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8949
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_230($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 7752
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(4) | 0; //@line 7759
 _mbed_assert_internal(13142, 12226, 843); //@line 7760
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 221; //@line 7763
  sp = STACKTOP; //@line 7764
  return;
 }
 ___async_unwind = 0; //@line 7767
 HEAP32[$ReallocAsyncCtx11 >> 2] = 221; //@line 7768
 sp = STACKTOP; //@line 7769
 return;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 38181
 $y_sroa_0_0_extract_trunc = $b$0; //@line 38182
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 38183
 $1$1 = tempRet0; //@line 38184
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 38186
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8858
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 8860
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 8866
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8867
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 8868
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 292; //@line 8871
  sp = STACKTOP; //@line 8872
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8875
 return;
}
function _mbedtls_cipher_update__async_cb_18($0) {
 $0 = $0 | 0;
 var $$1 = 0, $2 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17681
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17683
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17685
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 17688
  $9 = ___async_retval; //@line 17689
  HEAP32[$9 >> 2] = $$1; //@line 17690
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 17695
 $$1 = 0; //@line 17696
 $9 = ___async_retval; //@line 17697
 HEAP32[$9 >> 2] = $$1; //@line 17698
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_219($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 7387
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(4) | 0; //@line 7394
 _mbed_assert_internal(13142, 12226, 737); //@line 7395
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 240; //@line 7398
  sp = STACKTOP; //@line 7399
  return;
 }
 ___async_unwind = 0; //@line 7402
 HEAP32[$ReallocAsyncCtx12 >> 2] = 240; //@line 7403
 sp = STACKTOP; //@line 7404
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_217($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 7319
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 7326
 _mbed_assert_internal(13142, 12226, 715); //@line 7327
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 236; //@line 7330
  sp = STACKTOP; //@line 7331
  return;
 }
 ___async_unwind = 0; //@line 7334
 HEAP32[$ReallocAsyncCtx13 >> 2] = 236; //@line 7335
 sp = STACKTOP; //@line 7336
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_260($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 9172
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 9179
 _mbed_assert_internal(13142, 12226, 821); //@line 9180
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 215; //@line 9183
  sp = STACKTOP; //@line 9184
  return;
 }
 ___async_unwind = 0; //@line 9187
 HEAP32[$ReallocAsyncCtx13 >> 2] = 215; //@line 9188
 sp = STACKTOP; //@line 9189
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_258($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 9111
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(4) | 0; //@line 9118
 _mbed_assert_internal(13142, 12226, 797); //@line 9119
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 211; //@line 9122
  sp = STACKTOP; //@line 9123
  return;
 }
 ___async_unwind = 0; //@line 9126
 HEAP32[$ReallocAsyncCtx14 >> 2] = 211; //@line 9127
 sp = STACKTOP; //@line 9128
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_256($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 9050
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(4) | 0; //@line 9057
 _mbed_assert_internal(13142, 12226, 786); //@line 9058
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 207; //@line 9061
  sp = STACKTOP; //@line 9062
  return;
 }
 ___async_unwind = 0; //@line 9065
 HEAP32[$ReallocAsyncCtx15 >> 2] = 207; //@line 9066
 sp = STACKTOP; //@line 9067
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_338($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 15919
 if (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 15927
 _mbed_assert_internal(14025, 14043, 57); //@line 15928
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 671; //@line 15931
  sp = STACKTOP; //@line 15932
  return;
 }
 ___async_unwind = 0; //@line 15935
 HEAP32[$ReallocAsyncCtx5 >> 2] = 671; //@line 15936
 sp = STACKTOP; //@line 15937
 return;
}
function __ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15091
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15098
 _mbed_assert_internal(13142, 13151, 187); //@line 15099
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 463; //@line 15102
  sp = STACKTOP; //@line 15103
  return;
 }
 ___async_unwind = 0; //@line 15106
 HEAP32[$ReallocAsyncCtx2 >> 2] = 463; //@line 15107
 sp = STACKTOP; //@line 15108
 return;
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11810
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 11812
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 11818
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11819
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 11820
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 379; //@line 11823
  sp = STACKTOP; //@line 11824
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11827
 return;
}
function __ZN12LoRaWANStack17get_lorawan_stackEv() {
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9909
 do {
  if (!(HEAP8[19272] | 0)) {
   if (___cxa_guard_acquire(19272) | 0) {
    $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9917
    __ZN12LoRaWANStackC2Ev(20600); //@line 9918
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 314; //@line 9921
     sp = STACKTOP; //@line 9922
     return 0; //@line 9923
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 9925
     break;
    }
   }
  }
 } while (0);
 return 20600; //@line 9931
}
function _mbedtls_cipher_info_from_type($0) {
 $0 = $0 | 0;
 var $$05 = 0, $$06 = 0, $1 = 0, $9 = 0;
 $1 = HEAP32[2374] | 0; //@line 1775
 L1 : do {
  if (!$1) {
   $$05 = 0; //@line 1779
  } else {
   $$06 = 9492; //@line 1781
   $9 = $1; //@line 1781
   while (1) {
    if ((HEAP32[$$06 >> 2] | 0) == ($0 | 0)) {
     $$05 = $9; //@line 1786
     break L1;
    }
    $9 = HEAP32[$$06 + 12 >> 2] | 0; //@line 1791
    if (!$9) {
     $$05 = 0; //@line 1794
     break;
    } else {
     $$06 = $$06 + 8 | 0; //@line 1797
    }
   }
  }
 } while (0);
 return $$05 | 0; //@line 1802
}
function __ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 37324
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 37331
 _mbed_assert_internal(13142, 13151, 194); //@line 37332
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 509; //@line 37335
  sp = STACKTOP; //@line 37336
  return;
 }
 ___async_unwind = 0; //@line 37339
 HEAP32[$ReallocAsyncCtx2 >> 2] = 509; //@line 37340
 sp = STACKTOP; //@line 37341
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_489($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 36277
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 36284
 _mbed_assert_internal(13142, 13151, 209); //@line 36285
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 515; //@line 36288
  sp = STACKTOP; //@line 36289
  return;
 }
 ___async_unwind = 0; //@line 36292
 HEAP32[$ReallocAsyncCtx3 >> 2] = 515; //@line 36293
 sp = STACKTOP; //@line 36294
 return;
}
function __ZN7LoRaPHY25accept_tx_param_setup_reqEP20tx_param_setup_req_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $17 = 0, $3 = 0, $6 = 0;
 $3 = HEAP8[$0 + 13 >> 0] | 0; //@line 25151
 if (!($3 << 24 >> 24)) {
  $17 = $3 << 24 >> 24 != 0; //@line 25154
  return $17 | 0; //@line 25155
 }
 $6 = $0 + 132 | 0; //@line 25158
 $10 = HEAP8[$6 >> 0] & -2 | HEAP8[$1 >> 0] & 1; //@line 25162
 HEAP8[$6 >> 0] = $10; //@line 25163
 HEAP8[$6 >> 0] = HEAP8[$1 + 1 >> 0] << 1 & 2 | $10 & -3; //@line 25170
 $17 = $3 << 24 >> 24 != 0; //@line 25171
 return $17 | 0; //@line 25172
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_29($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27815
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 27822
 _mbed_assert_internal(13142, 13151, 217); //@line 27823
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 524; //@line 27826
  sp = STACKTOP; //@line 27827
  return;
 }
 ___async_unwind = 0; //@line 27830
 HEAP32[$ReallocAsyncCtx3 >> 2] = 524; //@line 27831
 sp = STACKTOP; //@line 27832
 return;
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 38166
 $2 = $b & 65535; //@line 38167
 $3 = Math_imul($2, $1) | 0; //@line 38168
 $6 = $a >>> 16; //@line 38169
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 38170
 $11 = $b >>> 16; //@line 38171
 $12 = Math_imul($11, $1) | 0; //@line 38172
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 38173
}
function __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $8 = 0, $or$cond$i = 0;
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 17723
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 17725
 $16 = $10 + ($8 & 255) | 0; //@line 17731
 $or$cond$i = $16 >>> 0 < 256 & $16 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0, HEAP8[$0 + 12 >> 0] | 0, (HEAP8[HEAP32[$0 + 8 >> 2] >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 17735
 HEAP32[___async_retval >> 2] = $or$cond$i ? 0 : -1010; //@line 17738
 return;
}
function __ZN16SX1276_LoRaRadio5sleepEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 38100
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 38102
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 38103
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 38104
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 55; //@line 38107
  sp = STACKTOP; //@line 38108
  return;
 }
 ___async_unwind = 0; //@line 38111
 HEAP32[$ReallocAsyncCtx3 >> 2] = 55; //@line 38112
 sp = STACKTOP; //@line 38113
 return;
}
function __ZN7LoRaPHY16set_last_tx_doneEP24set_band_txdone_params_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $16 = 0, $4 = 0, $9 = 0;
 if (!$1) {
  return;
 }
 $4 = HEAP32[$0 + 72 >> 2] | 0; //@line 23838
 $9 = (HEAP8[$1 + 1 >> 0] | 0) == 0; //@line 23843
 $11 = HEAP32[$1 + 4 >> 2] | 0; //@line 23845
 $16 = HEAPU8[(HEAP32[$0 + 112 >> 2] | 0) + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0; //@line 23850
 HEAP32[$4 + ($16 * 24 | 0) + 8 >> 2] = $11; //@line 23852
 if (!$9) {
  return;
 }
 HEAP32[$4 + ($16 * 24 | 0) + 4 >> 2] = $11; //@line 23857
 return;
}
function __ZN7LoRaMac18handle_ack_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 37666
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 37673
 _mbed_assert_internal(13142, 13151, 201); //@line 37674
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 511; //@line 37677
  sp = STACKTOP; //@line 37678
  return;
 }
 ___async_unwind = 0; //@line 37681
 HEAP32[$ReallocAsyncCtx2 >> 2] = 511; //@line 37682
 sp = STACKTOP; //@line 37683
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_121($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 36840
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36842
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36844
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 36845
 __ZN4mbed10TimerEventD2Ev($2); //@line 36846
 if (!___async) {
  ___async_unwind = 0; //@line 36849
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 120; //@line 36851
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 36853
 sp = STACKTOP; //@line 36854
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_120($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 36820
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36822
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36824
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 36825
 __ZN4mbed10TimerEventD2Ev($4); //@line 36826
 if (!___async) {
  ___async_unwind = 0; //@line 36829
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 118; //@line 36831
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 36833
 sp = STACKTOP; //@line 36834
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_119($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 36800
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36802
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36804
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 36805
 __ZN4mbed10TimerEventD2Ev($4); //@line 36806
 if (!___async) {
  ___async_unwind = 0; //@line 36809
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 116; //@line 36811
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 36813
 sp = STACKTOP; //@line 36814
 return;
}
function __ZN7LoRaMac17handle_tx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16923
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 16930
 _mbed_assert_internal(13142, 13151, 162); //@line 16931
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 455; //@line 16934
  sp = STACKTOP; //@line 16935
  return;
 }
 ___async_unwind = 0; //@line 16938
 HEAP32[$ReallocAsyncCtx2 >> 2] = 455; //@line 16939
 sp = STACKTOP; //@line 16940
 return;
}
function __ZN16LoRaWANInterface7connectERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$07 = 0;
 switch (HEAP8[$1 >> 0] | 0) {
 case 0:
  {
   $$07 = __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5936
   break;
  }
 case 1:
  {
   $$07 = __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5942
   break;
  }
 default:
  {
   $$07 = -1003; //@line 5946
  }
 }
 return $$07 | 0; //@line 5949
}
function __ZN7LoRaMac15handle_rx_errorEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10613
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 10620
 _mbed_assert_internal(13142, 13151, 148); //@line 10621
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 436; //@line 10624
  sp = STACKTOP; //@line 10625
  return;
 }
 ___async_unwind = 0; //@line 10628
 HEAP32[$ReallocAsyncCtx2 >> 2] = 436; //@line 10629
 sp = STACKTOP; //@line 10630
 return;
}
function __ZN7LoRaMac14handle_tx_doneEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 36271
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 36278
 _mbed_assert_internal(13142, 13151, 134); //@line 36279
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 362; //@line 36282
  sp = STACKTOP; //@line 36283
  return;
 }
 ___async_unwind = 0; //@line 36286
 HEAP32[$ReallocAsyncCtx2 >> 2] = 362; //@line 36287
 sp = STACKTOP; //@line 36288
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_127($0) {
 $0 = $0 | 0;
 var $3 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 37050
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 52 | 0; //@line 37053
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 37054
 __ZN4mbed11InterruptInD2Ev($3); //@line 37055
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 126; //@line 37058
  sp = STACKTOP; //@line 37059
  return;
 }
 ___async_unwind = 0; //@line 37062
 HEAP32[$ReallocAsyncCtx9 >> 2] = 126; //@line 37063
 sp = STACKTOP; //@line 37064
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 36780
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36782
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 36784
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 36785
 __ZN4mbed10TimerEventD2Ev($4); //@line 36786
 if (!___async) {
  ___async_unwind = 0; //@line 36789
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 114; //@line 36791
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 36793
 sp = STACKTOP; //@line 36794
 return;
}
function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) {
  $$0 = 0; //@line 10402
 } else {
  $3 = Math_imul($1, $0) | 0; //@line 10404
  if (($1 | $0) >>> 0 > 65535) {
   $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; //@line 10411
  } else {
   $$0 = $3; //@line 10413
  }
 }
 $8 = _malloc($$0) | 0; //@line 10416
 if (!$8) {
  return $8 | 0; //@line 10419
 }
 if (!(HEAP32[$8 + -4 >> 2] & 3)) {
  return $8 | 0; //@line 10426
 }
 _memset($8 | 0, 0, $$0 | 0) | 0; //@line 10428
 return $8 | 0; //@line 10429
}
function _ticker_set_handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4767
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 4768
 _initialize($0); //@line 4769
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 701; //@line 4772
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4774
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 4776
  sp = STACKTOP; //@line 4777
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4780
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = $1; //@line 4783
  return;
 }
}
function _mbed_die__async_cb_116($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 36670
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36672
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 36674
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 36675
 _wait_ms(150); //@line 36676
 if (!___async) {
  ___async_unwind = 0; //@line 36679
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 721; //@line 36681
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 36683
 sp = STACKTOP; //@line 36684
 return;
}
function __ZN7LoRaMac17handle_rx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8924
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 8931
 _mbed_assert_internal(13142, 13151, 155); //@line 8932
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 445; //@line 8935
  sp = STACKTOP; //@line 8936
  return;
 }
 ___async_unwind = 0; //@line 8939
 HEAP32[$ReallocAsyncCtx2 >> 2] = 445; //@line 8940
 sp = STACKTOP; //@line 8941
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 36696
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 36705
 _mbed_assert_internal(13142, 13151, 141); //@line 36706
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 390; //@line 36709
  sp = STACKTOP; //@line 36710
  return;
 }
 ___async_unwind = 0; //@line 36713
 HEAP32[$ReallocAsyncCtx3 >> 2] = 390; //@line 36714
 sp = STACKTOP; //@line 36715
 return;
}
function __ZN12LoRaWANStack8shutdownEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10892
 HEAP32[$0 + 1876 >> 2] = 7; //@line 10894
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10895
 $2 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 10896
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 345; //@line 10899
  sp = STACKTOP; //@line 10900
  return 0; //@line 10901
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10903
  return $2 | 0; //@line 10904
 }
 return 0; //@line 10906
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 36300
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36302
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 36304
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 36305
 _wait_ms(150); //@line 36306
 if (!___async) {
  ___async_unwind = 0; //@line 36309
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 720; //@line 36311
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 36313
 sp = STACKTOP; //@line 36314
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_222($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 7464
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(4) | 0; //@line 7465
 _mbed_assert_internal(14804, 12226, 694); //@line 7466
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 228; //@line 7469
  sp = STACKTOP; //@line 7470
  return;
 }
 ___async_unwind = 0; //@line 7473
 HEAP32[$ReallocAsyncCtx14 >> 2] = 228; //@line 7474
 sp = STACKTOP; //@line 7475
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_263($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 9402
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(4) | 0; //@line 9403
 _mbed_assert_internal(14804, 12226, 766); //@line 9404
 if (___async) {
  HEAP32[$ReallocAsyncCtx16 >> 2] = 201; //@line 9407
  sp = STACKTOP; //@line 9408
  return;
 }
 ___async_unwind = 0; //@line 9411
 HEAP32[$ReallocAsyncCtx16 >> 2] = 201; //@line 9412
 sp = STACKTOP; //@line 9413
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10139
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10141
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 10142
 __ZN4mbed10TimerEventD2Ev($2); //@line 10143
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 169; //@line 10146
  sp = STACKTOP; //@line 10147
  return;
 }
 ___async_unwind = 0; //@line 10150
 HEAP32[$ReallocAsyncCtx2 >> 2] = 169; //@line 10151
 sp = STACKTOP; //@line 10152
 return;
}
function __ZN4mbed6TickerD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 37161
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37163
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 37164
 __ZN4mbed10TimerEventD2Ev($2); //@line 37165
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 742; //@line 37168
  sp = STACKTOP; //@line 37169
  return;
 }
 ___async_unwind = 0; //@line 37172
 HEAP32[$ReallocAsyncCtx2 >> 2] = 742; //@line 37173
 sp = STACKTOP; //@line 37174
 return;
}
function ___fflush_unlocked__async_cb_174($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3101
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3103
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3105
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3107
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 3109
 HEAP32[$4 >> 2] = 0; //@line 3110
 HEAP32[$6 >> 2] = 0; //@line 3111
 HEAP32[$8 >> 2] = 0; //@line 3112
 HEAP32[$10 >> 2] = 0; //@line 3113
 HEAP32[___async_retval >> 2] = 0; //@line 3115
 return;
}
function __ZN4mbed6Ticker7handlerEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6500
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 6502
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 >> 2] | 0; //@line 6508
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6509
 FUNCTION_TABLE_vi[$5 & 1023]($0 + 40 | 0); //@line 6510
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 745; //@line 6513
  sp = STACKTOP; //@line 6514
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6517
 return;
}
function __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 | 0) != 0 & $3 << 24 >> 24 != 0)) {
  return;
 }
 $wide$trip$count = $3 & 255; //@line 26465
 $indvars$iv = 0; //@line 26466
 do {
  HEAP16[$1 + ($indvars$iv << 1) >> 1] = HEAP16[$2 + ($indvars$iv << 1) >> 1] | 0; //@line 26471
  $indvars$iv = $indvars$iv + 1 | 0; //@line 26472
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 return;
}
function dynCall_viiiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 a15 = a15 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0, a15 | 0); //@line 568
}
function _handle_lora_downlink($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3396
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3399
 __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5); //@line 3400
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 148; //@line 3403
  sp = STACKTOP; //@line 3404
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3407
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_131($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 37127
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37129
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 37131
 __ZN4mbed11InterruptInD2Ev($2 + 340 | 0); //@line 37132
 if (!___async) {
  ___async_unwind = 0; //@line 37135
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 122; //@line 37137
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 37139
 sp = STACKTOP; //@line 37140
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_130($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 37108
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37110
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 37112
 __ZN4mbed11InterruptInD2Ev($2 + 268 | 0); //@line 37113
 if (!___async) {
  ___async_unwind = 0; //@line 37116
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 123; //@line 37118
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 37120
 sp = STACKTOP; //@line 37121
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_129($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 37089
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37091
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 37093
 __ZN4mbed11InterruptInD2Ev($2 + 196 | 0); //@line 37094
 if (!___async) {
  ___async_unwind = 0; //@line 37097
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 124; //@line 37099
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 37101
 sp = STACKTOP; //@line 37102
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_128($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 37070
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37072
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 37074
 __ZN4mbed11InterruptInD2Ev($2 + 124 | 0); //@line 37075
 if (!___async) {
  ___async_unwind = 0; //@line 37078
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 125; //@line 37080
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 37082
 sp = STACKTOP; //@line 37083
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_122($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 36860
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 36862
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 36864
 __ZN4mbed11InterruptInD2Ev($2 + 412 | 0); //@line 36865
 if (!___async) {
  ___async_unwind = 0; //@line 36868
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 121; //@line 36870
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 36872
 sp = STACKTOP; //@line 36873
 return;
}
function _gcm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2674
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2675
 $3 = _mbedtls_gcm_setkey($0, 2, $1, $2) | 0; //@line 2676
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 687; //@line 2679
  sp = STACKTOP; //@line 2680
  return 0; //@line 2681
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2683
  return $3 | 0; //@line 2684
 }
 return 0; //@line 2686
}
function _ccm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2626
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2627
 $3 = _mbedtls_ccm_setkey($0, 2, $1, $2) | 0; //@line 2628
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 685; //@line 2631
  sp = STACKTOP; //@line 2632
  return 0; //@line 2633
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2635
  return $3 | 0; //@line 2636
 }
 return 0; //@line 2638
}
function __ZN4mbed11InterruptInC2E7PinName($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 668; //@line 3930
 $2 = $0 + 4 | 0; //@line 3931
 $3 = $0 + 28 | 0; //@line 3932
 $4 = $0; //@line 3933
 dest = $2; //@line 3934
 stop = dest + 68 | 0; //@line 3934
 do {
  HEAP32[dest >> 2] = 0; //@line 3934
  dest = dest + 4 | 0; //@line 3934
 } while ((dest | 0) < (stop | 0));
 _gpio_irq_init($3, $1, 21, $4) | 0; //@line 3935
 _gpio_init_in($2, $1); //@line 3936
 return;
}
function _vsprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14520
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14521
 $3 = _vsnprintf($0, 2147483647, $1, $2) | 0; //@line 14522
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 785; //@line 14525
  sp = STACKTOP; //@line 14526
  return 0; //@line 14527
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14529
  return $3 | 0; //@line 14530
 }
 return 0; //@line 14532
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7220
 $2 = HEAP32[$0 >> 2] | 0; //@line 7221
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7222
 FUNCTION_TABLE_vi[$2 & 1023]($1); //@line 7223
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 772; //@line 7226
  sp = STACKTOP; //@line 7227
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7230
  return;
 }
}
function _serial_putc__async_cb_205($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6364
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6366
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 6367
 _fflush($2) | 0; //@line 6368
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 740; //@line 6371
  sp = STACKTOP; //@line 6372
  return;
 }
 ___async_unwind = 0; //@line 6375
 HEAP32[$ReallocAsyncCtx >> 2] = 740; //@line 6376
 sp = STACKTOP; //@line 6377
 return;
}
function _putchar($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14597
 $1 = HEAP32[2570] | 0; //@line 14598
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14599
 $2 = _fputc($0, $1) | 0; //@line 14600
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 787; //@line 14603
  sp = STACKTOP; //@line 14604
  return 0; //@line 14605
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14607
  return $2 | 0; //@line 14608
 }
 return 0; //@line 14610
}
function __ZN4mbed10TimerEventD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4462
 HEAP32[$0 >> 2] = 704; //@line 4463
 $2 = HEAP32[$0 + 24 >> 2] | 0; //@line 4465
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4467
 _ticker_remove_event($2, $0 + 8 | 0); //@line 4468
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 177; //@line 4471
  sp = STACKTOP; //@line 4472
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4475
  return;
 }
}
function __ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb_513($0) {
 $0 = $0 | 0;
 var $$011 = 0;
 switch (HEAP32[___async_retval >> 2] | 0) {
 case 0:
  {
   $$011 = 3; //@line 37712
   break;
  }
 case -1004:
  {
   $$011 = 2; //@line 37716
   break;
  }
 case -1005:
  {
   $$011 = 1; //@line 37720
   break;
  }
 case -1006:
  {
   $$011 = 0; //@line 37724
   break;
  }
 default:
  {
   $$011 = 0; //@line 37728
  }
 }
 HEAP8[___async_retval >> 0] = $$011; //@line 37732
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16986
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16988
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 16989
 __ZN4mbed10TimerEventD2Ev($2); //@line 16990
 if (!___async) {
  ___async_unwind = 0; //@line 16993
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 744; //@line 16995
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 16997
 sp = STACKTOP; //@line 16998
 return;
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_244($0) {
 $0 = $0 | 0;
 var $15 = 0, $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8493
 HEAP32[$4 + 364 >> 2] = 2; //@line 8495
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 8503
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 8508
 $15 = $4 + 944 | 0; //@line 8509
 HEAP8[$15 >> 0] = HEAP8[$15 >> 0] | 32; //@line 8512
 return;
}
function dynCall_viiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0); //@line 561
}
function _main__async_cb_136($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 181
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 183
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 184
 __ZN6events10EventQueue8dispatchEi(23328, -1); //@line 185
 if (!___async) {
  ___async_unwind = 0; //@line 188
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 763; //@line 190
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 192
 sp = STACKTOP; //@line 193
 return;
}
function __ZN4mbed7TimeoutD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3754
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3756
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 3757
 __ZN4mbed10TimerEventD2Ev($2); //@line 3758
 if (!___async) {
  ___async_unwind = 0; //@line 3761
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 171; //@line 3763
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 3765
 sp = STACKTOP; //@line 3766
 return;
}
function _rand() {
 var $0 = 0, $10 = 0, $14 = 0, $6 = 0, $8 = 0, $9 = 0;
 $0 = 20592; //@line 14550
 $6 = ___muldi3(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, 1284865837, 1481765933) | 0; //@line 14556
 $8 = _i64Add($6 | 0, tempRet0 | 0, 1, 0) | 0; //@line 14558
 $9 = tempRet0; //@line 14559
 $10 = 20592; //@line 14560
 HEAP32[$10 >> 2] = $8; //@line 14562
 HEAP32[$10 + 4 >> 2] = $9; //@line 14565
 $14 = _bitshift64Lshr($8 | 0, $9 | 0, 33) | 0; //@line 14566
 return $14 | 0; //@line 14568
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10434
 STACKTOP = STACKTOP + 16 | 0; //@line 10435
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10435
 $vararg_buffer = sp; //@line 10436
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 10440
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 10442
 STACKTOP = sp; //@line 10443
 return $5 | 0; //@line 10443
}
function __ZN16SX1276_LoRaRadioD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2705
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2706
 __ZN16SX1276_LoRaRadioD2Ev($0); //@line 2707
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 127; //@line 2710
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2712
  sp = STACKTOP; //@line 2713
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2716
  __ZdlPv($0); //@line 2717
  return;
 }
}
function __ZN4mbed10TimerEvent3irqEj($0) {
 $0 = $0 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4511
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 4516
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4517
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 4518
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 179; //@line 4521
  sp = STACKTOP; //@line 4522
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4525
  return;
 }
}
function _emscripten_async_resume() {
 ___async = 0; //@line 280
 ___async_unwind = 1; //@line 281
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 287
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 291
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 295
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 297
 }
}
function __ZN7LoRaPHY18verify_rx_datarateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink5 = 0, $$sink6 = 0, $7 = 0;
 if (!(HEAP8[$0 + 132 >> 0] & 2)) {
  $7 = HEAP8[$0 + 28 >> 0] | 0; //@line 26719
  $$sink5 = $7; //@line 26720
  $$sink6 = $7; //@line 26720
 } else {
  $$sink5 = HEAP8[$0 + 28 >> 0] | 0; //@line 26726
  $$sink6 = HEAP8[$0 + 35 >> 0] | 0; //@line 26726
 }
 return ($$sink6 << 24 >> 24 <= $1 << 24 >> 24 ? $$sink5 << 24 >> 24 >= $1 << 24 >> 24 : 0) | 0; //@line 26731
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6588
 $1 = HEAP32[$0 >> 2] | 0; //@line 6589
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6590
 FUNCTION_TABLE_v[$1 & 15](); //@line 6591
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 748; //@line 6594
  sp = STACKTOP; //@line 6595
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6598
  return;
 }
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_280($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10192
 if (HEAP8[$2 + 373 >> 0] | 0) {
  HEAP8[$2 + 377 >> 0] = 1; //@line 10198
  $7 = $2 + 968 | 0; //@line 10199
  HEAP32[$7 >> 2] = HEAP32[$7 >> 2] & -5; //@line 10202
 }
 if ((HEAP32[$2 + 360 >> 2] | 0) != 2) {
  return;
 }
 $13 = $2 + 944 | 0; //@line 10210
 HEAP8[$13 >> 0] = HEAP8[$13 >> 0] | 32; //@line 10213
 return;
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6272
 $2 = HEAP32[5810] | 0; //@line 6273
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6274
 FUNCTION_TABLE_vii[$2 & 31]($0, $1); //@line 6275
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 738; //@line 6278
  sp = STACKTOP; //@line 6279
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6282
  return;
 }
}
function __ZN4mbed5TimerC2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7069
 $6 = ___async_retval; //@line 7071
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 7076
 $12 = HEAP32[$0 + 4 >> 2] | 0; //@line 7077
 HEAP32[$12 >> 2] = HEAP32[$6 >> 2]; //@line 7079
 HEAP32[$12 + 4 >> 2] = $11; //@line 7082
 $16 = $4; //@line 7083
 HEAP32[$16 >> 2] = 0; //@line 7085
 HEAP32[$16 + 4 >> 2] = 0; //@line 7088
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_309($0) {
 $0 = $0 | 0;
 var $12 = 0, $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13177
 HEAP32[$4 + 364 >> 2] = 2; //@line 13179
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 13183
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 13187
 $12 = $4 + 944 | 0; //@line 13188
 HEAP8[$12 >> 0] = HEAP8[$12 >> 0] | 32; //@line 13191
 return;
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 38211
 if ((ret | 0) < 8) return ret | 0; //@line 38212
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 38213
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 38214
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 38215
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 38216
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 38217
}
function _gcm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2701
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2702
 _mbedtls_gcm_free($0); //@line 2703
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 688; //@line 2706
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2708
  sp = STACKTOP; //@line 2709
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2712
  _free($0); //@line 2713
  return;
 }
}
function _ccm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2653
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2654
 _mbedtls_ccm_free($0); //@line 2655
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 686; //@line 2658
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2660
  sp = STACKTOP; //@line 2661
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2664
  _free($0); //@line 2665
  return;
 }
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 222
 STACKTOP = STACKTOP + 16 | 0; //@line 223
 $rem = __stackBase__ | 0; //@line 224
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 225
 STACKTOP = __stackBase__; //@line 226
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 227
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 14895
 STACKTOP = STACKTOP + 16 | 0; //@line 14896
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14896
 if (!(_pthread_once(24160, 8) | 0)) {
  $3 = _pthread_getspecific(HEAP32[6041] | 0) | 0; //@line 14902
  STACKTOP = sp; //@line 14903
  return $3 | 0; //@line 14903
 } else {
  _abort_message(18966, sp); //@line 14905
 }
 return 0; //@line 14908
}
function __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = -1003; //@line 6153
 } else {
  if (!(HEAP32[$1 + 12 >> 2] | 0)) {
   $$0 = -1003; //@line 6159
  } else {
   __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1); //@line 6162
   $$0 = 0; //@line 6163
  }
 }
 return $$0 | 0; //@line 6166
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3009
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3011
 $6 = $2 + 1928 | 0; //@line 3014
 HEAP32[$6 >> 2] = HEAP32[___async_retval >> 2]; //@line 3015
 __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($2 + 1336 | 0, $4); //@line 3017
 HEAP32[___async_retval >> 2] = HEAP32[$6 >> 2]; //@line 3020
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 15063
 }
 return;
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2864
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2865
 __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0); //@line 2866
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 131; //@line 2869
  sp = STACKTOP; //@line 2870
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2873
  return;
 }
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 14479
 $6 = HEAP32[$5 >> 2] | 0; //@line 14480
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 14481
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 14483
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 14485
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 14488
 return $2 | 0; //@line 14489
}
function __ZN6events10EventQueueC2EjPh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 184 | 0; //@line 4535
 HEAP32[$3 >> 2] = 0; //@line 4536
 HEAP32[$3 + 4 >> 2] = 0; //@line 4536
 HEAP32[$3 + 8 >> 2] = 0; //@line 4536
 HEAP32[$3 + 12 >> 2] = 0; //@line 4536
 if (!$2) {
  _equeue_create($0, $1) | 0; //@line 4539
  return;
 } else {
  _equeue_create_inplace($0, $1, $2) | 0; //@line 4542
  return;
 }
}
function __ZN6events10EventQueue8dispatchEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4550
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4551
 _equeue_dispatch($0, $1); //@line 4552
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 180; //@line 4555
  sp = STACKTOP; //@line 4556
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4559
  return;
 }
}
function __ZL25default_terminate_handlerv__async_cb_153($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1393
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1395
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1397
 HEAP32[$2 >> 2] = 18827; //@line 1398
 HEAP32[$2 + 4 >> 2] = $4; //@line 1400
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 1402
 _abort_message(18691, $2); //@line 1403
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16835
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16837
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 16838
 _fputc(10, $2) | 0; //@line 16839
 if (!___async) {
  ___async_unwind = 0; //@line 16842
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 794; //@line 16844
 sp = STACKTOP; //@line 16845
 return;
}
function __ZN6events10EventQueue6cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4581
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4582
 _equeue_cancel($0, $1); //@line 4583
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 181; //@line 4586
  sp = STACKTOP; //@line 4587
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4590
  return;
 }
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_307($0) {
 $0 = $0 | 0;
 var $2 = 0, $9 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13105
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 13109
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 13113
 $9 = $2 + 944 | 0; //@line 13114
 HEAP8[$9 >> 0] = HEAP8[$9 >> 0] | 32; //@line 13117
 return;
}
function __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 880; //@line 26042
 HEAP32[$0 + 4 >> 2] = 0; //@line 26044
 HEAP32[$0 + 8 >> 2] = $1; //@line 26046
 dest = $0 + 12 | 0; //@line 26048
 stop = dest + 124 | 0; //@line 26048
 do {
  HEAP32[dest >> 2] = 0; //@line 26048
  dest = dest + 4 | 0; //@line 26048
 } while ((dest | 0) < (stop | 0));
 return;
}
function _add_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$09 = 0, $3 = 0, $5 = 0, $7 = 0;
 $3 = $1 - $2 | 0; //@line 2175
 if (!$3) {
  return;
 }
 $5 = $3 & 255; //@line 2180
 $$09 = 0; //@line 2181
 $7 = 0; //@line 2181
 do {
  HEAP8[$0 + ($7 + $2) >> 0] = $5; //@line 2185
  $$09 = $$09 + 1 << 24 >> 24; //@line 2186
  $7 = $$09 & 255; //@line 2187
 } while ($3 >>> 0 > $7 >>> 0);
 return;
}
function _gpio_irq_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0;
 if (($1 | 0) == -1) {
  $$0 = -1; //@line 6295
  return $$0 | 0; //@line 6296
 }
 HEAP32[5810] = $2; //@line 6298
 HEAP32[$0 >> 2] = $1; //@line 6299
 HEAP32[$0 + 4 >> 2] = $1; //@line 6301
 _emscripten_asm_const_iii(12, $3 | 0, $1 | 0) | 0; //@line 6302
 $$0 = 0; //@line 6303
 return $$0 | 0; //@line 6304
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 37183
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 37186
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 37191
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 37194
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 15657
 STACKTOP = STACKTOP + 16 | 0; //@line 15658
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15658
 _free($0); //@line 15660
 if (!(_pthread_setspecific(HEAP32[6041] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 15665
  return;
 } else {
  _abort_message(19065, sp); //@line 15667
 }
}
function __ZN4mbed5Timer5startEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3718
 $6 = ___async_retval; //@line 3720
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 3725
 $13 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 3727
 HEAP32[$13 >> 2] = HEAP32[$6 >> 2]; //@line 3729
 HEAP32[$13 + 4 >> 2] = $11; //@line 3732
 HEAP32[$4 >> 2] = 1; //@line 3733
 return;
}
function __ZN16LoRaWANInterface7receiveEhPhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0;
 if (($2 | 0) == 0 | $3 << 16 >> 16 == 0) {
  $$0 = -1003; //@line 6137
  return $$0 | 0; //@line 6138
 }
 $$0 = __ZN12LoRaWANStack9handle_rxEhPhth(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1, $2, $3, $4 & 255) | 0; //@line 6143
 return $$0 | 0; //@line 6144
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3641
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 3652
  $$0 = 1; //@line 3653
 } else {
  $$0 = 0; //@line 3655
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 3659
 return;
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 6335
 HEAP32[$0 >> 2] = $1; //@line 6336
 HEAP32[5811] = 1; //@line 6337
 $4 = $0; //@line 6338
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 6343
 $10 = 23248; //@line 6344
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 6346
 HEAP32[$10 + 4 >> 2] = $9; //@line 6349
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 15139
 }
 return;
}
function __ZN11LoRaMacMcps18reset_confirmationEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 36 | 0; //@line 22823
 HEAP32[$1 >> 2] = 0; //@line 22824
 HEAP32[$1 + 4 >> 2] = 0; //@line 22824
 HEAP32[$1 + 8 >> 2] = 0; //@line 22824
 HEAP32[$1 + 12 >> 2] = 0; //@line 22824
 HEAP32[$1 + 16 >> 2] = 0; //@line 22824
 HEAP32[$1 + 20 >> 2] = 0; //@line 22824
 HEAP32[$0 + 40 >> 2] = 1; //@line 22826
 return;
}
function _equeue_sema_create($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _pthread_mutex_init($0 | 0, 0) | 0; //@line 5803
 if (!$1) {
  $4 = _pthread_cond_init($0 + 28 | 0, 0) | 0; //@line 5807
  if (!$4) {
   HEAP8[$0 + 76 >> 0] = 0; //@line 5811
   $$0 = 0; //@line 5812
  } else {
   $$0 = $4; //@line 5814
  }
 } else {
  $$0 = $1; //@line 5817
 }
 return $$0 | 0; //@line 5819
}
function __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 37148
 $7 = __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($2 + 348 | 0, HEAP32[$0 + 8 >> 2] | 0, $2 + 360 | 0) | 0; //@line 37153
 HEAP32[___async_retval >> 2] = $7; //@line 37155
 return;
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6635
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6636
 _emscripten_sleep($0 | 0); //@line 6637
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 749; //@line 6640
  sp = STACKTOP; //@line 6641
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6644
  return;
 }
}
function _equeue_tick() {
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 5766
 STACKTOP = STACKTOP + 16 | 0; //@line 5767
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5767
 $0 = sp; //@line 5768
 _gettimeofday($0 | 0, 0) | 0; //@line 5769
 STACKTOP = sp; //@line 5776
 return ((HEAP32[$0 + 4 >> 2] | 0) / 1e3 | 0) + ((HEAP32[$0 >> 2] | 0) * 1e3 | 0) | 0; //@line 5776
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 15642
 STACKTOP = STACKTOP + 16 | 0; //@line 15643
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15643
 if (!(_pthread_key_create(24164, 803) | 0)) {
  STACKTOP = sp; //@line 15648
  return;
 } else {
  _abort_message(19015, sp); //@line 15650
 }
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 15203
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 15207
  }
 }
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_34($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28090
 HEAP32[$4 + 988 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) | 0; //@line 28094
 HEAP32[___async_retval >> 2] = 0; //@line 28096
 return;
}
function _mbedtls_gcm_free__async_cb($0) {
 $0 = $0 | 0;
 var $$034$i = 0, $$05$i = 0;
 $$034$i = 400; //@line 7125
 $$05$i = HEAP32[$0 + 4 >> 2] | 0; //@line 7125
 while (1) {
  $$034$i = $$034$i + -1 | 0; //@line 7127
  HEAP8[$$05$i >> 0] = 0; //@line 7129
  if (!$$034$i) {
   break;
  } else {
   $$05$i = $$05$i + 1 | 0; //@line 7134
  }
 }
 return;
}
function _mbedtls_aes_free($0) {
 $0 = $0 | 0;
 var $$02$i = 0, $$031$i = 0;
 if (!$0) {
  return;
 }
 $$02$i = $0; //@line 27390
 $$031$i = 280; //@line 27390
 while (1) {
  $$031$i = $$031$i + -1 | 0; //@line 27392
  HEAP8[$$02$i >> 0] = 0; //@line 27394
  if (!$$031$i) {
   break;
  } else {
   $$02$i = $$02$i + 1 | 0; //@line 27399
  }
 }
 return;
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 256
 HEAP32[new_frame + 4 >> 2] = sp; //@line 258
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 260
 ___async_cur_frame = new_frame; //@line 261
 return ___async_cur_frame + 8 | 0; //@line 262
}
function __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $8 = 0;
 $1 = $0 + 2 | 0; //@line 20849
 $3 = HEAPU8[$1 >> 0] | 0; //@line 20851
 $8 = HEAPU8[$0 + 3 >> 0] | 0; //@line 20856
 _memcpy($0 + 4 + $3 | 0, $0 + 132 | 0, $8 | 0) | 0; //@line 20857
 HEAP8[$1 >> 0] = $3 + $8; //@line 20860
 return;
}
function b284(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 p14 = p14 | 0;
 nullFunc_viiiiiiiiiiiiiii(0); //@line 1379
}
function __ZN16LoRaWANInterface10initializeEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = -1003; //@line 5885
 } else {
  $$0 = __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5889
 }
 return $$0 | 0; //@line 5891
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 7442
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7442
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7442
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 9232
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 9232
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 9232
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 7392
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7392
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7392
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 9898
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 9898
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 9898
 return;
}
function __ZN7LoRaPHY15apply_DR_offsetEaa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $5 = 0;
 $5 = ($1 & 255) - ($2 & 255) | 0; //@line 25763
 if (!($5 & 128)) {
  $$0 = $5 & 255; //@line 25768
  return $$0 | 0; //@line 25769
 }
 $$0 = HEAP8[$0 + 26 >> 0] | 0; //@line 25773
 return $$0 | 0; //@line 25774
}
function _gpio_init_inout($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6258
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6264
 _emscripten_asm_const_iiiiii(11, $0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0; //@line 6265
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35181
 if (!$2) {
  $12 = HEAPU16[HEAP32[$0 + 8 >> 2] >> 1] | 0; //@line 35190
 } else {
  $12 = $2 << 16 >> 16; //@line 35194
 }
 HEAP16[___async_retval >> 1] = $12; //@line 35198
 return;
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 27859
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 27863
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 27866
 return;
}
function b282(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 nullFunc_viiiiiiiiiiiiii(0); //@line 1376
}
function __ZN11LoRaMacMlme18reset_confirmationEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 8 | 0; //@line 23664
 HEAP32[$1 >> 2] = 0; //@line 23665
 HEAP32[$1 + 4 >> 2] = 0; //@line 23665
 HEAP32[$1 + 8 >> 2] = 0; //@line 23665
 HEAP32[$1 + 12 >> 2] = 0; //@line 23665
 HEAP32[$0 + 12 >> 2] = 1; //@line 23667
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_moveINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 14038
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14038
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 14038
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 3143
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 3143
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 3143
 return;
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 245
  return low << bits; //@line 246
 }
 tempRet0 = low << bits - 32; //@line 248
 return 0; //@line 249
}
function __ZN7LoRaPHY26get_next_lower_tx_datarateEa($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink = 0;
 $$sink = HEAP8[((HEAP8[$0 + 132 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 26609
 return ($$sink << 24 >> 24 == $1 << 24 >> 24 ? $$sink : ($1 & 255) + 255 & 255) | 0; //@line 26615
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 11912
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11912
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 11912
 return;
}
function _equeue_dispatch__async_cb_381($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19879
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19881
 HEAP8[HEAP32[$0 + 4 >> 2] >> 0] = 1; //@line 19882
 _equeue_mutex_unlock($4); //@line 19883
 HEAP8[$6 >> 0] = 0; //@line 19884
 return;
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 234
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 235
 }
 tempRet0 = 0; //@line 237
 return high >>> bits - 32 | 0; //@line 238
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_310($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13249
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 13251
 HEAP32[$6 + 16 >> 2] = 0; //@line 13253
 return;
}
function _fflush__async_cb_181($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3547
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 3549
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 3552
 return;
}
function _mbedtls_aes_crypt_ecb($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (($1 | 0) == 1) {
  _mbedtls_internal_aes_encrypt($0, $2, $3) | 0; //@line 1137
 } else {
  _mbedtls_internal_aes_decrypt($0, $2, $3) | 0; //@line 1139
 }
 return 0; //@line 1141
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_247($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8615
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 8617
 _gpio_irq_set($6 + 28 | 0, 2, 1); //@line 8619
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_147($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 734
 HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 364 >> 2] = 2; //@line 736
 HEAP32[___async_retval >> 2] = $6; //@line 738
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_290($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 11312
 __ZN4mbed5TimerD2Ev(HEAP32[$0 + 4 >> 2] | 0); //@line 11313
 HEAP8[___async_retval >> 0] = $6 & 1; //@line 11316
 return;
}
function __GLOBAL__sub_I_main_cpp__async_cb_357($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = 23536; //@line 16829
 stop = dest + 48 | 0; //@line 16829
 do {
  HEAP32[dest >> 2] = 0; //@line 16829
  dest = dest + 4 | 0; //@line 16829
 } while ((dest | 0) < (stop | 0));
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _equeue_post__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 33798
 _equeue_sema_signal((HEAP32[$0 + 4 >> 2] | 0) + 48 | 0); //@line 33800
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 33802
 return;
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 15127
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 15130
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 15133
 return;
}
function _gpio_init_out_ex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6240
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6246
 _emscripten_asm_const_iiii(10, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 6247
 return;
}
function __ZN12LoRaWANStack23set_confirmed_msg_retryEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if ($1 << 24 >> 24 == -1) {
  $$0 = -1003; //@line 10068
 } else {
  HEAP8[$0 + 2284 >> 0] = $1; //@line 10071
  $$0 = 0; //@line 10072
 }
 return $$0 | 0; //@line 10074
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_412($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23422
 HEAP32[___async_retval >> 2] = ($AsyncRetVal | 0) == 0 ? -1016 : $AsyncRetVal; //@line 23426
 return;
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 15704
 } else {
  $$0 = -1; //@line 15706
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 15709
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 505
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 11141
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 11147
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 11151
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb_378($0) {
 $0 = $0 | 0;
 var $7 = 0;
 $7 = (HEAP32[$0 + 4 >> 2] | 0) + 968 | 0; //@line 18592
 HEAP32[$7 >> 2] = HEAP32[$7 >> 2] | 1; //@line 18595
 HEAP32[___async_retval >> 2] = 0; //@line 18597
 return;
}
function _equeue_break($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 128 | 0; //@line 5208
 _equeue_mutex_lock($1); //@line 5209
 HEAP8[$0 + 8 >> 0] = 1; //@line 5211
 _equeue_mutex_unlock($1); //@line 5212
 _equeue_sema_signal($0 + 48 | 0); //@line 5214
 return;
}
function _mbedtls_cipher_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 1860
 stop = dest + 68 | 0; //@line 1860
 do {
  HEAP32[dest >> 2] = 0; //@line 1860
  dest = dest + 4 | 0; //@line 1860
 } while ((dest | 0) < (stop | 0));
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_163($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2054
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 1; //@line 2057
 HEAP32[___async_retval >> 2] = 0; //@line 2059
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_162($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2041
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 1; //@line 2044
 HEAP32[___async_retval >> 2] = 0; //@line 2046
 return;
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 554
}
function _mbedtls_ccm_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 1542
 stop = dest + 68 | 0; //@line 1542
 do {
  HEAP32[dest >> 2] = 0; //@line 1542
  dest = dest + 4 | 0; //@line 1542
 } while ((dest | 0) < (stop | 0));
 return;
}
function __Z15decrypt_payloadPKhtS0_jhjPh($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return __Z15encrypt_payloadPKhtS0_jhjPh($0, $1, $2, $3, $4, $5, $6) | 0; //@line 22611
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12254
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 12255
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 12257
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_418($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23776
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = 6; //@line 23781
 HEAP32[___async_retval >> 2] = $2; //@line 23783
 return;
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8522
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 8523
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 8525
 return;
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 268
 stackRestore(___async_cur_frame | 0); //@line 269
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 270
}
function __ZN7LoRaPHY15get_ack_timeoutEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0;
 $5 = HEAPU16[$0 + 50 >> 1] | 0; //@line 26662
 $6 = HEAPU16[$0 + 52 >> 1] | 0; //@line 26663
 return $5 - $6 + ((_rand() | 0) % ($6 << 1 | 1 | 0) | 0) | 0; //@line 26670
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 14138
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 14138
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 14140
 return $1 | 0; //@line 14141
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 10600
  $$0 = -1; //@line 10601
 } else {
  $$0 = $0; //@line 10603
 }
 return $$0 | 0; //@line 10605
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6224
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6230
 _emscripten_asm_const_iii(9, $0 | 0, $1 | 0) | 0; //@line 6231
 return;
}
function _gpio_init_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6209
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6215
 _emscripten_asm_const_iii(8, $0 | 0, $1 | 0) | 0; //@line 6216
 return;
}
function _equeue_sema_signal($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 5825
 HEAP8[$0 + 76 >> 0] = 1; //@line 5827
 _pthread_cond_signal($0 + 28 | 0) | 0; //@line 5829
 _pthread_mutex_unlock($0 | 0) | 0; //@line 5830
 return;
}
function __ZN16LoRaWANInterface16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 6027
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 38204
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 38205
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 38206
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 498
}
function __ZN4mbed6Ticker5setupEy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0;
 $4 = ___udivdi3($1 | 0, $2 | 0, 1e3, 0) | 0; //@line 6572
 _emscripten_asm_const_iii(16, $0 + 40 | 0, $4 | 0) | 0; //@line 6574
 return;
}
function __ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack12add_channelsERK16lora_channelplan(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 6018
}
function _equeue_enqueue__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32851
 _equeue_mutex_unlock(HEAP32[$0 + 4 >> 2] | 0); //@line 32852
 HEAP32[___async_retval >> 2] = $4; //@line 32854
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_63($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 30632
 HEAP8[___async_retval >> 0] = 1; //@line 30635
 return;
}
function __ZN16LoRaWANInterface22add_link_check_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 4 >> 0] = 1; //@line 5964
 return __ZN12LoRaWANStack22set_link_check_requestEv(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0) | 0; //@line 5967
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 2724
 ___cxa_begin_catch($0 | 0) | 0; //@line 2725
 _emscripten_alloc_async_context(4, sp) | 0; //@line 2726
 __ZSt9terminatev(); //@line 2727
}
function _aes_ctx_alloc() {
 var $$0 = 0, $0 = 0;
 $0 = _calloc(1, 280) | 0; //@line 2760
 if (!$0) {
  $$0 = 0; //@line 2763
 } else {
  _mbedtls_aes_init($0); //@line 2765
  $$0 = $0; //@line 2766
 }
 return $$0 | 0; //@line 2768
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 547
}
function ___cxa_guard_acquire($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP8[$0 >> 0] | 0) == 1) {
  $$0 = 0; //@line 16519
 } else {
  HEAP8[$0 >> 0] = 1; //@line 16521
  $$0 = 1; //@line 16522
 }
 return $$0 | 0; //@line 16524
}
function __ZN16LoRaWANInterface25set_confirmed_msg_retriesEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack23set_confirmed_msg_retryEh(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 6009
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_471($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = HEAP8[$0 + 4 >> 0] | 0; //@line 34443
 HEAP8[___async_retval >> 0] = 1; //@line 34446
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 491
}
function _aes_crypt_cbc_wrap($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) | 0; //@line 2737
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 38196
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 38198
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_243($0) {
 $0 = $0 | 0;
 var $3 = 0;
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 944 | 0; //@line 8480
 HEAP8[$3 >> 0] = HEAP8[$3 >> 0] | 32; //@line 8483
 return;
}
function __ZN16LoRaWANInterface12set_datarateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack21set_channel_data_rateEh(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5984
}
function __ZN16LoRaWANInterface25disable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, 0) | 0; //@line 6000
}
function __ZN16LoRaWANInterface14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack16remove_a_channelEh(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 6044
}
function __ZN7LoRaPHY15get_max_payloadEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return HEAP8[(HEAP32[($2 ? $0 + 104 | 0 : $0 + 96 | 0) >> 2] | 0) + ($1 & 255) >> 0] | 0; //@line 26644
}
function __ZN16LoRaWANInterface24enable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, 1) | 0; //@line 5992
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 540
}
function __ZN7LoRaPHY15verify_tx_powerEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP8[$0 + 22 >> 0] | 0) <= $1 << 24 >> 24 ? (HEAP8[$0 + 21 >> 0] | 0) >= $1 << 24 >> 24 : 0) | 0; //@line 26781
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_210($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 7029
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_419($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 6; //@line 23794
 HEAP32[___async_retval >> 2] = -1014; //@line 23796
 return;
}
function __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb_351($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16565
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 13198
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 13201
 }
 return $$0 | 0; //@line 13203
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_151($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 1261
 return;
}
function __ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = HEAP8[___async_retval >> 0] & 1 ? 3 : 0; //@line 37701
 return;
}
function __ZN7LoRaPHY13mask_bit_testEPKtj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return (1 << ($2 & 15) & (HEAPU16[$1 + ($2 >>> 4 << 1) >> 1] | 0) | 0) != 0 | 0; //@line 26065
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_460($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 33717
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_180($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 3463
 return;
}
function __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb_362($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16964
 return;
}
function __ZN16LoRaWANInterface19remove_channel_planEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack17drop_channel_listEv(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0) | 0; //@line 6035
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 15](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 484
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 10781
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 10785
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_335($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 15647
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_332($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 15575
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_331($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 15567
 return;
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 32497
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_487($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 36169
 return;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 214
}
function __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (__ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0) - $1 | 0; //@line 27120
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 15559
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb_271($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 9797
 return;
}
function b42(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 677
 return 0; //@line 677
}
function b41(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 674
 return 0; //@line 674
}
function _gpio_irq_set($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _emscripten_asm_const_iiii(14, HEAP32[$0 + 4 >> 2] | 0, $1 | 0, $2 | 0) | 0; //@line 6325
 return;
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 275
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 276
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 30985
 return;
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb_341($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16017
 return;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 7](a1 | 0, a2 | 0, a3 | 0); //@line 533
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_505($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 37282
 return;
}
function __ZN5Sht31C2E7PinNameS0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _emscripten_asm_const_iiii(17, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 6654
 return;
}
function __ZN12LoRaWANStack22set_link_check_requestEv__async_cb_379($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 18617
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_314($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 13583
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_250($0) {
 $0 = $0 | 0;
 _gpio_irq_set((HEAP32[$0 + 8 >> 2] | 0) + 28 | 0, 2, 0); //@line 8730
 return;
}
function __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 16555
 return;
}
function __ZN7LoRaPHY23get_minimum_tx_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[((HEAP8[$0 + 132 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 26629
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 7240
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 11277
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 11279
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11set_channelEj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 692 >> 2] = HEAP32[$0 + 8 >> 2]; //@line 15721
 return;
}
function __ZN16LoRaWANInterface10disconnectEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack8shutdownEv(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0) | 0; //@line 5957
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 15742
 __ZdlPv($0); //@line 15743
 return;
}
function _aes_crypt_ecb_wrap($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return _mbedtls_aes_crypt_ecb($0, $1, $2, $3) | 0; //@line 2725
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 15425
 __ZdlPv($0); //@line 15426
 return;
}
function _srand($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = 20592; //@line 14539
 HEAP32[$2 >> 2] = $0 + -1; //@line 14541
 HEAP32[$2 + 4 >> 2] = 0; //@line 14544
 return;
}
function __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 27101
 return;
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb_503($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 688 >> 0] = 0; //@line 37164
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv__async_cb_246($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 8553
 return;
}
function __ZN12LoRaWANStack16remove_a_channelEh__async_cb_303($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 12244
 return;
}
function _gcm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 400) | 0; //@line 2691
 if ($0 | 0) {
  _mbedtls_gcm_init($0); //@line 2694
 }
 return $0 | 0; //@line 2696
}
function _ccm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 68) | 0; //@line 2643
 if ($0 | 0) {
  _mbedtls_ccm_init($0); //@line 2646
 }
 return $0 | 0; //@line 2648
}
function __ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 10231
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14953
 __ZdlPv($0); //@line 14954
 return;
}
function __ZN12LoRaWANStack17send_frame_to_macEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17877
 return;
}
function _ticker_set_handler__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 2] >> 2] = HEAP32[$0 + 8 >> 2]; //@line 36798
 return;
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 12683
 }
 return;
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 18086
 return;
}
function __ZN7LoRaMac21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 30645
 return;
}
function __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 16954
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function b39(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 671
 return 0; //@line 671
}
function b38(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(6); //@line 668
 return 0; //@line 668
}
function b37(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(5); //@line 665
 return 0; //@line 665
}
function b36(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 662
 return 0; //@line 662
}
function __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1e3; //@line 10221
 return;
}
function __ZN7LoRaMac19remove_channel_planEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 36265
 return;
}
function __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 20112
 return;
}
function b280(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 1373
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 31](a1 | 0, a2 | 0) | 0; //@line 477
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_56($0) {
 $0 = $0 | 0;
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 364 >> 2] = 1; //@line 30159
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 6608
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed5TimerD2Ev($0) {
 $0 = $0 | 0;
 if (HEAP32[$0 >> 2] | 0) {
  if (HEAP8[$0 + 28 >> 0] | 0) {}
 }
 HEAP32[$0 >> 2] = 0; //@line 4357
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 15150
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_202($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 6224
 return;
}
function __ZN16LoRaWANInterface7connectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28815
 return;
}
function __ZN7LoRaPHY16get_channel_maskEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return HEAP32[($1 ? $0 + 124 | 0 : $0 + 120 | 0) >> 2] | 0; //@line 26681
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_67($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 30922
 return;
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[2695] | 0; //@line 15732
 HEAP32[2695] = $0 + 0; //@line 15734
 return $0 | 0; //@line 15736
}
function __ZN12LoRaWANStack8shutdownEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 34462
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 9787
 return;
}
function __ZN18LoRaWANTimeHandler16get_current_timeEv($0) {
 $0 = $0 | 0;
 return __ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0; //@line 27110
}
function _gpio_irq_free($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_iii(13, HEAP32[$0 + 4 >> 2] | 0, HEAP32[$0 + 8 >> 2] | 0) | 0; //@line 6314
 return;
}
function _mbedtls_cipher_update__async_cb_19($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17708
 return;
}
function _mbedtls_cipher_setkey__async_cb_43($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28704
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_213($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 7172
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_283($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 10432
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_312($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 13502
 return;
}
function _aes_setkey_enc_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_enc($0, $1, $2) | 0; //@line 2746
}
function _aes_setkey_dec_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_dec($0, $1, $2) | 0; //@line 2755
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 10364
 return;
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 16005
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 31](a1 | 0, a2 | 0); //@line 526
}
function _mbedtls_cipher_update__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17568
 return;
}
function _mbedtls_cipher_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28694
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 16414
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_16($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 17552
 return;
}
function __ZN12LoRaWANStack22set_link_check_requestEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1003; //@line 18605
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_422($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1011; //@line 23826
 return;
}
function __ZN11LoRaMacMlme23activate_mlme_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 23689
 return;
}
function _ccm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 18096
 return;
}
function __ZN16SX1276_LoRaRadio7standbyEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 688 >> 0] = 0; //@line 18285
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1003; //@line 13494
 return;
}
function _mbedtls_ccm_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 33818
 return;
}
function _gcm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 6387
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10LoRaMacMib22activate_mib_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 22866
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b34(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(3); //@line 659
 return 0; //@line 659
}
function b33(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 656
 return 0; //@line 656
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_390($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 4 >> 2] = $1; //@line 26073
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_421($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 23816
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_420($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 23806
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b278(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 1370
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 302
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 3 >> 0] | 0) != 0 | 0; //@line 22185
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_95($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = -1015; //@line 35399
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_94($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = -1003; //@line 35389
 return;
}
function __ZN12LoRaWANStack17get_lorawan_stackEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 20600; //@line 3335
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 8543
 return;
}
function __ZN12LoRaWANStack16remove_a_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 12234
 return;
}
function __ZN7LoRaPHY32is_custom_channel_plan_supportedEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 16 >> 0] | 0) != 0 | 0; //@line 26706
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 13146
}
function _fputc__async_cb_304($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 12267
 return;
}
function _fflush__async_cb_182($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 3562
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _vsprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 7098
 return;
}
function _sprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 37371
 return;
}
function _putchar__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16980
 return;
}
function _putc__async_cb_245($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 8535
 return;
}
function __ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 >> 0] | 0) != 0 | 0; //@line 20884
}
function __ZN7LoRaPHYD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 880; //@line 23737
 HEAP32[$0 + 4 >> 2] = 0; //@line 23739
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_dtorINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function _printf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 3180
 return;
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 3029
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 15](a1 | 0) | 0; //@line 470
}
function __ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 1 >> 0] | 0) != 0 | 0; //@line 20901
}
function __ZN7LoRaMac11schedule_txEv__async_cb_372($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 18142
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_371($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 18130
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEP25loramac_mlme_indication_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function __ZN7LoRaPHY21verify_nb_join_trialsEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($1 & 255) > 11 | 0; //@line 26789
}
function __ZN4mbed11InterruptInD0Ev__async_cb_336($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 15689
 return;
}
function __ZN16LoRaWANInterface25remove_link_check_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 4 >> 0] = 0; //@line 5974
 return;
}
function __ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 3 >> 0] | 0; //@line 20869
}
function __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 >> 0] = 0; //@line 20875
 return;
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(19118, HEAP32[$0 + 4 >> 2] | 0); //@line 16861
}
function __ZN12LoRaPHYEU868D0Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 26949
 __ZdlPv($0); //@line 26950
 return;
}
function __ZN4mbed6Ticker6detachEv($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_ii(15, $0 + 40 | 0) | 0; //@line 6582
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_239($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_235($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_234($0) {
 $0 = $0 | 0;
 return;
}
function b31(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(15); //@line 653
 return 0; //@line 653
}
function b30(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 650
 return 0; //@line 650
}
function __ZN7LoRaPHY29get_maximum_frame_counter_gapEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 48 >> 1] | 0; //@line 26652
}
function __ZN5Sht3115readTemperatureEv($0) {
 $0 = $0 | 0;
 return +(+(_emscripten_asm_const_ii(18, $0 | 0) | 0) / 100.0);
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadioD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 2755
 return;
}
function __ZN4mbed7TimeoutD0Ev__async_cb_185($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 3775
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb_363($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 17007
 return;
}
function __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 1 >> 0] = 0; //@line 20891
 return;
}
function __ZN14LoRaMacCommand20clear_command_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2 >> 0] = 0; //@line 20740
 return;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 1023](a1 | 0); //@line 519
}
function b276(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 1367
}
function b275(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 1364
}
function b274(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(5); //@line 1361
}
function b273(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 1358
}
function __ZN14LoRaMacCommand19clear_repeat_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 3 >> 0] = 0; //@line 20842
 return;
}
function __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 2 >> 0] | 0; //@line 20749
}
function __ZN7LoRaPHY25get_default_rx2_frequencyEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 68 >> 2] | 0; //@line 26587
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_229($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_228($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_227($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_221($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_270($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_269($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_268($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_267($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_delay($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -16 >> 2] = $1; //@line 5752
 return;
}
function __ZN7LoRaPHY24get_default_rx2_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 64 >> 0] | 0; //@line 26595
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_204($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_dtor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -8 >> 2] = $1; //@line 5761
 return;
}
function __ZN7LoRaPHY23get_default_tx_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 30 >> 0] | 0; //@line 26579
}
function __ZN16SX1276_LoRaRadio18check_rf_frequencyEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1; //@line 2271
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_384($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_445($0) {
 $0 = $0 | 0;
 return;
}
function _aes_ctx_free($0) {
 $0 = $0 | 0;
 _mbedtls_aes_free($0); //@line 2774
 _free($0); //@line 2775
 return;
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY20get_default_tx_powerEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 23 >> 0] | 0; //@line 26571
}
function __ZN6events10EventQueue14break_dispatchEv($0) {
 $0 = $0 | 0;
 _equeue_break($0); //@line 4567
 return;
}
function __ZN16SX1276_LoRaRadio10get_statusEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 688 >> 0] | 0; //@line 1406
}
function __ZN7LoRaPHY19get_max_nb_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 20 >> 0] | 0; //@line 26689
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY16get_phy_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 112 >> 2] | 0; //@line 26697
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommand23get_mac_commands_bufferEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 20756
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 14391
}
function __ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _gcm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 3748
 return;
}
function _equeue_mutex_unlock($0) {
 $0 = $0 | 0;
 _pthread_mutex_unlock($0 | 0) | 0; //@line 5796
 return;
}
function _ccm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 3941
 return;
}
function _equeue_mutex_create($0) {
 $0 = $0 | 0;
 return _pthread_mutex_init($0 | 0, 0) | 0; //@line 5783
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_342($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommandC2Ev($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 260) | 0; //@line 20501
 return;
}
function _main__async_cb_140($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 296
 return;
}
function _main__async_cb_138($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 209
 return;
}
function _main__async_cb_137($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 201
 return;
}
function b28(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(31); //@line 647
 return 0; //@line 647
}
function b27(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(30); //@line 644
 return 0; //@line 644
}
function b26(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(29); //@line 641
 return 0; //@line 641
}
function b25(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(28); //@line 638
 return 0; //@line 638
}
function b24(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(27); //@line 635
 return 0; //@line 635
}
function b23(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(26); //@line 632
 return 0; //@line 632
}
function b22(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(25); //@line 629
 return 0; //@line 629
}
function b21(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(24); //@line 626
 return 0; //@line 626
}
function b20(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(23); //@line 623
 return 0; //@line 623
}
function b19(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(22); //@line 620
 return 0; //@line 620
}
function b18(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(21); //@line 617
 return 0; //@line 617
}
function b17(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(20); //@line 614
 return 0; //@line 614
}
function b16(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(19); //@line 611
 return 0; //@line 611
}
function b15(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(18); //@line 608
 return 0; //@line 608
}
function b14(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(17); //@line 605
 return 0; //@line 605
}
function _main__async_cb_141($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 306
 return;
}
function b13(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 602
 return 0; //@line 602
}
function _equeue_mutex_lock($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 5789
 return;
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 7]() | 0; //@line 463
}
function __ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb_328($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaWANTimeHandlerC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 27087
 return;
}
function __ZN18LoRaMacChannelPlanC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 20098
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_353($0) {
 $0 = $0 | 0;
 return;
}
function b271(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(7); //@line 1355
}
function b270(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(6); //@line 1352
}
function b269(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(5); //@line 1349
}
function b268(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0); //@line 1346
}
function __ZN11LoRaMacMcps16get_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 36 | 0; //@line 22834
}
function __ZN6events10EventQueue4tickEv($0) {
 $0 = $0 | 0;
 return _equeue_tick() | 0; //@line 4575
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_340($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlme16get_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 8 | 0; //@line 23675
}
function _mbedtls_aes_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 280) | 0; //@line 27379
 return;
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_gcm_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 400) | 0; //@line 3810
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_427($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlme14get_indicationEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 23682
}
function __ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb_507($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaPHYEU868D2Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 26942
 return;
}
function __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_10($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlmeC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 23651
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_9($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcps14get_indicationEv($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 22840
}
function __ZN10LoRaMacMibC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 22852
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_255($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_455($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_452($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_500($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 15](); //@line 512
}
function __ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 6178
 return;
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 10658
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_490($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh__async_cb_176($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh__async_cb_175($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_30($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_186($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_159($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_158($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_157($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_155($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_350($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_285($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_344($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_84($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_80($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_79($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_78($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_77($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_76($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_75($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_74($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_360($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac18handle_ack_timeoutEv__async_cb_512($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_118($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b11(p0) {
 p0 = p0 | 0;
 nullFunc_ii(15); //@line 599
 return 0; //@line 599
}
function b10(p0) {
 p0 = p0 | 0;
 nullFunc_ii(14); //@line 596
 return 0; //@line 596
}
function __ZN7LoRaMac17handle_tx_timeoutEv__async_cb_361($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_rx_timeoutEv__async_cb_253($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_515($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11radio_resetEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b9(p0) {
 p0 = p0 | 0;
 nullFunc_ii(13); //@line 593
 return 0; //@line 593
}
function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(12); //@line 590
 return 0; //@line 590
}
function b7(p0) {
 p0 = p0 | 0;
 nullFunc_ii(11); //@line 587
 return 0; //@line 587
}
function b6(p0) {
 p0 = p0 | 0;
 nullFunc_ii(10); //@line 584
 return 0; //@line 584
}
function ___ofl_lock() {
 ___lock(24148); //@line 11284
 return 24156; //@line 11285
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_216($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_322($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_320($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_316($0) {
 $0 = $0 | 0;
 return;
}
function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 581
 return 0; //@line 581
}
function b266(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(31); //@line 1343
}
function b265(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(30); //@line 1340
}
function b264(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(29); //@line 1337
}
function b263(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(28); //@line 1334
}
function b262(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(27); //@line 1331
}
function b261(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(26); //@line 1328
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_47($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac15handle_rx_errorEv__async_cb_286($0) {
 $0 = $0 | 0;
 return;
}
function b260(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 1325
}
function _abort_message__async_cb_358($0) {
 $0 = $0 | 0;
 _abort(); //@line 16852
}
function __ZN7LoRaPHYD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 23746
 return;
}
function __ZN7LoRaMac14handle_tx_doneEv__async_cb_101($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue8dispatchEi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 4483
}
function __ZN16SX1276_LoRaRadio9start_cadEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio5sleepEv__async_cb_521($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcps23activate_mcps_subsystemEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_274($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue6cancelEi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function __ZN16SX1276_LoRaRadio4sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptInD2Ev__async_cb_423($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_126($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 683
}
function __ZN14lorawan_timersD2Ev__async_cb_511($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 14312
}
function __ZN4mbed7Timeout7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEvent3irqEj__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 14318
}
function __ZN4mbed6Ticker7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_477($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb_278($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb_279($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventC2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function __ZN4mbed6TickerD2Ev__async_cb_132($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_496($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_495($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_492($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_491($0) {
 $0 = $0 | 0;
 return;
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 14779
 return;
}
function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0; //@line 429
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _handle_lora_downlink__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6unlockEv($0) {
 $0 = $0 | 0;
 return;
}
function _ticker_remove_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0; //@line 425
}
function _handle_interrupt_in__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_unlock() {
 ___unlock(24148); //@line 11290
 return;
}
function __ZN16SX1276_LoRaRadio4lockEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZL12send_messagev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b3() {
 nullFunc_i(7); //@line 578
 return 0; //@line 578
}
function b258(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1023); //@line 1322
}
function b257(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1022); //@line 1319
}
function b256(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1021); //@line 1316
}
function b255(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1020); //@line 1313
}
function b254(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1019); //@line 1310
}
function b253(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1018); //@line 1307
}
function b252(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1017); //@line 1304
}
function b251(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1016); //@line 1301
}
function b250(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1015); //@line 1298
}
function b249(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1014); //@line 1295
}
function b248(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1013); //@line 1292
}
function b247(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1012); //@line 1289
}
function b246(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1011); //@line 1286
}
function b245(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1010); //@line 1283
}
function b244(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1009); //@line 1280
}
function b243(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1008); //@line 1277
}
function b242(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1007); //@line 1274
}
function b241(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1006); //@line 1271
}
function b240(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1005); //@line 1268
}
function b239(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1004); //@line 1265
}
function b238(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1003); //@line 1262
}
function b237(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1002); //@line 1259
}
function b236(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1001); //@line 1256
}
function b2() {
 nullFunc_i(6); //@line 575
 return 0; //@line 575
}
function b1() {
 nullFunc_i(0); //@line 572
 return 0; //@line 572
}
function __ZN18LoRaWANTimeHandlerD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaMacChannelPlanD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b235(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1e3); //@line 1253
}
function b234(p0) {
 p0 = p0 | 0;
 nullFunc_vi(999); //@line 1250
}
function b233(p0) {
 p0 = p0 | 0;
 nullFunc_vi(998); //@line 1247
}
function b232(p0) {
 p0 = p0 | 0;
 nullFunc_vi(997); //@line 1244
}
function b231(p0) {
 p0 = p0 | 0;
 nullFunc_vi(996); //@line 1241
}
function b230(p0) {
 p0 = p0 | 0;
 nullFunc_vi(995); //@line 1238
}
function b229(p0) {
 p0 = p0 | 0;
 nullFunc_vi(994); //@line 1235
}
function b228(p0) {
 p0 = p0 | 0;
 nullFunc_vi(993); //@line 1232
}
function b227(p0) {
 p0 = p0 | 0;
 nullFunc_vi(992); //@line 1229
}
function b226(p0) {
 p0 = p0 | 0;
 nullFunc_vi(991); //@line 1226
}
function b225(p0) {
 p0 = p0 | 0;
 nullFunc_vi(990); //@line 1223
}
function b224(p0) {
 p0 = p0 | 0;
 nullFunc_vi(989); //@line 1220
}
function b223(p0) {
 p0 = p0 | 0;
 nullFunc_vi(988); //@line 1217
}
function b222(p0) {
 p0 = p0 | 0;
 nullFunc_vi(987); //@line 1214
}
function b221(p0) {
 p0 = p0 | 0;
 nullFunc_vi(986); //@line 1211
}
function b220(p0) {
 p0 = p0 | 0;
 nullFunc_vi(985); //@line 1208
}
function b219(p0) {
 p0 = p0 | 0;
 nullFunc_vi(984); //@line 1205
}
function b218(p0) {
 p0 = p0 | 0;
 nullFunc_vi(983); //@line 1202
}
function b217(p0) {
 p0 = p0 | 0;
 nullFunc_vi(982); //@line 1199
}
function b216(p0) {
 p0 = p0 | 0;
 nullFunc_vi(981); //@line 1196
}
function b215(p0) {
 p0 = p0 | 0;
 nullFunc_vi(980); //@line 1193
}
function b214(p0) {
 p0 = p0 | 0;
 nullFunc_vi(979); //@line 1190
}
function b213(p0) {
 p0 = p0 | 0;
 nullFunc_vi(978); //@line 1187
}
function b212(p0) {
 p0 = p0 | 0;
 nullFunc_vi(977); //@line 1184
}
function b211(p0) {
 p0 = p0 | 0;
 nullFunc_vi(976); //@line 1181
}
function b210(p0) {
 p0 = p0 | 0;
 nullFunc_vi(975); //@line 1178
}
function b209(p0) {
 p0 = p0 | 0;
 nullFunc_vi(974); //@line 1175
}
function b208(p0) {
 p0 = p0 | 0;
 nullFunc_vi(973); //@line 1172
}
function b207(p0) {
 p0 = p0 | 0;
 nullFunc_vi(972); //@line 1169
}
function b206(p0) {
 p0 = p0 | 0;
 nullFunc_vi(971); //@line 1166
}
function b205(p0) {
 p0 = p0 | 0;
 nullFunc_vi(970); //@line 1163
}
function b204(p0) {
 p0 = p0 | 0;
 nullFunc_vi(969); //@line 1160
}
function b203(p0) {
 p0 = p0 | 0;
 nullFunc_vi(968); //@line 1157
}
function b202(p0) {
 p0 = p0 | 0;
 nullFunc_vi(967); //@line 1154
}
function b201(p0) {
 p0 = p0 | 0;
 nullFunc_vi(966); //@line 1151
}
function b200(p0) {
 p0 = p0 | 0;
 nullFunc_vi(965); //@line 1148
}
function b199(p0) {
 p0 = p0 | 0;
 nullFunc_vi(964); //@line 1145
}
function b198(p0) {
 p0 = p0 | 0;
 nullFunc_vi(963); //@line 1142
}
function b197(p0) {
 p0 = p0 | 0;
 nullFunc_vi(962); //@line 1139
}
function b196(p0) {
 p0 = p0 | 0;
 nullFunc_vi(961); //@line 1136
}
function b195(p0) {
 p0 = p0 | 0;
 nullFunc_vi(960); //@line 1133
}
function b194(p0) {
 p0 = p0 | 0;
 nullFunc_vi(959); //@line 1130
}
function b193(p0) {
 p0 = p0 | 0;
 nullFunc_vi(958); //@line 1127
}
function b192(p0) {
 p0 = p0 | 0;
 nullFunc_vi(957); //@line 1124
}
function b191(p0) {
 p0 = p0 | 0;
 nullFunc_vi(956); //@line 1121
}
function b190(p0) {
 p0 = p0 | 0;
 nullFunc_vi(955); //@line 1118
}
function b189(p0) {
 p0 = p0 | 0;
 nullFunc_vi(954); //@line 1115
}
function b188(p0) {
 p0 = p0 | 0;
 nullFunc_vi(953); //@line 1112
}
function b187(p0) {
 p0 = p0 | 0;
 nullFunc_vi(952); //@line 1109
}
function b186(p0) {
 p0 = p0 | 0;
 nullFunc_vi(951); //@line 1106
}
function b185(p0) {
 p0 = p0 | 0;
 nullFunc_vi(950); //@line 1103
}
function b184(p0) {
 p0 = p0 | 0;
 nullFunc_vi(949); //@line 1100
}
function b183(p0) {
 p0 = p0 | 0;
 nullFunc_vi(948); //@line 1097
}
function b182(p0) {
 p0 = p0 | 0;
 nullFunc_vi(947); //@line 1094
}
function b181(p0) {
 p0 = p0 | 0;
 nullFunc_vi(946); //@line 1091
}
function b180(p0) {
 p0 = p0 | 0;
 nullFunc_vi(945); //@line 1088
}
function b179(p0) {
 p0 = p0 | 0;
 nullFunc_vi(944); //@line 1085
}
function b178(p0) {
 p0 = p0 | 0;
 nullFunc_vi(943); //@line 1082
}
function b177(p0) {
 p0 = p0 | 0;
 nullFunc_vi(942); //@line 1079
}
function b176(p0) {
 p0 = p0 | 0;
 nullFunc_vi(941); //@line 1076
}
function b175(p0) {
 p0 = p0 | 0;
 nullFunc_vi(940); //@line 1073
}
function b174(p0) {
 p0 = p0 | 0;
 nullFunc_vi(939); //@line 1070
}
function b173(p0) {
 p0 = p0 | 0;
 nullFunc_vi(938); //@line 1067
}
function b172(p0) {
 p0 = p0 | 0;
 nullFunc_vi(937); //@line 1064
}
function b171(p0) {
 p0 = p0 | 0;
 nullFunc_vi(936); //@line 1061
}
function b170(p0) {
 p0 = p0 | 0;
 nullFunc_vi(935); //@line 1058
}
function b169(p0) {
 p0 = p0 | 0;
 nullFunc_vi(934); //@line 1055
}
function b168(p0) {
 p0 = p0 | 0;
 nullFunc_vi(933); //@line 1052
}
function b167(p0) {
 p0 = p0 | 0;
 nullFunc_vi(932); //@line 1049
}
function b166(p0) {
 p0 = p0 | 0;
 nullFunc_vi(931); //@line 1046
}
function b165(p0) {
 p0 = p0 | 0;
 nullFunc_vi(930); //@line 1043
}
function b164(p0) {
 p0 = p0 | 0;
 nullFunc_vi(929); //@line 1040
}
function b163(p0) {
 p0 = p0 | 0;
 nullFunc_vi(928); //@line 1037
}
function b162(p0) {
 p0 = p0 | 0;
 nullFunc_vi(927); //@line 1034
}
function b161(p0) {
 p0 = p0 | 0;
 nullFunc_vi(926); //@line 1031
}
function b160(p0) {
 p0 = p0 | 0;
 nullFunc_vi(925); //@line 1028
}
function b159(p0) {
 p0 = p0 | 0;
 nullFunc_vi(924); //@line 1025
}
function b158(p0) {
 p0 = p0 | 0;
 nullFunc_vi(923); //@line 1022
}
function b157(p0) {
 p0 = p0 | 0;
 nullFunc_vi(922); //@line 1019
}
function b156(p0) {
 p0 = p0 | 0;
 nullFunc_vi(921); //@line 1016
}
function b155(p0) {
 p0 = p0 | 0;
 nullFunc_vi(920); //@line 1013
}
function b154(p0) {
 p0 = p0 | 0;
 nullFunc_vi(919); //@line 1010
}
function b153(p0) {
 p0 = p0 | 0;
 nullFunc_vi(918); //@line 1007
}
function b152(p0) {
 p0 = p0 | 0;
 nullFunc_vi(917); //@line 1004
}
function b151(p0) {
 p0 = p0 | 0;
 nullFunc_vi(916); //@line 1001
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 10616
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 10933
}
function b150(p0) {
 p0 = p0 | 0;
 nullFunc_vi(915); //@line 998
}
function b149(p0) {
 p0 = p0 | 0;
 nullFunc_vi(914); //@line 995
}
function b148(p0) {
 p0 = p0 | 0;
 nullFunc_vi(913); //@line 992
}
function b147(p0) {
 p0 = p0 | 0;
 nullFunc_vi(912); //@line 989
}
function b146(p0) {
 p0 = p0 | 0;
 nullFunc_vi(911); //@line 986
}
function b145(p0) {
 p0 = p0 | 0;
 nullFunc_vi(910); //@line 983
}
function b144(p0) {
 p0 = p0 | 0;
 nullFunc_vi(909); //@line 980
}
function b143(p0) {
 p0 = p0 | 0;
 nullFunc_vi(908); //@line 977
}
function b142(p0) {
 p0 = p0 | 0;
 nullFunc_vi(907); //@line 974
}
function b141(p0) {
 p0 = p0 | 0;
 nullFunc_vi(906); //@line 971
}
function b140(p0) {
 p0 = p0 | 0;
 nullFunc_vi(905); //@line 968
}
function b139(p0) {
 p0 = p0 | 0;
 nullFunc_vi(904); //@line 965
}
function b138(p0) {
 p0 = p0 | 0;
 nullFunc_vi(903); //@line 962
}
function b137(p0) {
 p0 = p0 | 0;
 nullFunc_vi(902); //@line 959
}
function b136(p0) {
 p0 = p0 | 0;
 nullFunc_vi(901); //@line 956
}
function b135(p0) {
 p0 = p0 | 0;
 nullFunc_vi(900); //@line 953
}
function b134(p0) {
 p0 = p0 | 0;
 nullFunc_vi(899); //@line 950
}
function b133(p0) {
 p0 = p0 | 0;
 nullFunc_vi(898); //@line 947
}
function b132(p0) {
 p0 = p0 | 0;
 nullFunc_vi(897); //@line 944
}
function b131(p0) {
 p0 = p0 | 0;
 nullFunc_vi(896); //@line 941
}
function b130(p0) {
 p0 = p0 | 0;
 nullFunc_vi(895); //@line 938
}
function b129(p0) {
 p0 = p0 | 0;
 nullFunc_vi(894); //@line 935
}
function b128(p0) {
 p0 = p0 | 0;
 nullFunc_vi(893); //@line 932
}
function b127(p0) {
 p0 = p0 | 0;
 nullFunc_vi(892); //@line 929
}
function b126(p0) {
 p0 = p0 | 0;
 nullFunc_vi(891); //@line 926
}
function b125(p0) {
 p0 = p0 | 0;
 nullFunc_vi(890); //@line 923
}
function b124(p0) {
 p0 = p0 | 0;
 nullFunc_vi(889); //@line 920
}
function b123(p0) {
 p0 = p0 | 0;
 nullFunc_vi(888); //@line 917
}
function b122(p0) {
 p0 = p0 | 0;
 nullFunc_vi(887); //@line 914
}
function b121(p0) {
 p0 = p0 | 0;
 nullFunc_vi(886); //@line 911
}
function b120(p0) {
 p0 = p0 | 0;
 nullFunc_vi(885); //@line 908
}
function b119(p0) {
 p0 = p0 | 0;
 nullFunc_vi(884); //@line 905
}
function b118(p0) {
 p0 = p0 | 0;
 nullFunc_vi(883); //@line 902
}
function b117(p0) {
 p0 = p0 | 0;
 nullFunc_vi(882); //@line 899
}
function b116(p0) {
 p0 = p0 | 0;
 nullFunc_vi(881); //@line 896
}
function b115(p0) {
 p0 = p0 | 0;
 nullFunc_vi(880); //@line 893
}
function b114(p0) {
 p0 = p0 | 0;
 nullFunc_vi(879); //@line 890
}
function b113(p0) {
 p0 = p0 | 0;
 nullFunc_vi(878); //@line 887
}
function b112(p0) {
 p0 = p0 | 0;
 nullFunc_vi(877); //@line 884
}
function b111(p0) {
 p0 = p0 | 0;
 nullFunc_vi(876); //@line 881
}
function b110(p0) {
 p0 = p0 | 0;
 nullFunc_vi(875); //@line 878
}
function b109(p0) {
 p0 = p0 | 0;
 nullFunc_vi(874); //@line 875
}
function b108(p0) {
 p0 = p0 | 0;
 nullFunc_vi(873); //@line 872
}
function b107(p0) {
 p0 = p0 | 0;
 nullFunc_vi(872); //@line 869
}
function b106(p0) {
 p0 = p0 | 0;
 nullFunc_vi(871); //@line 866
}
function b105(p0) {
 p0 = p0 | 0;
 nullFunc_vi(870); //@line 863
}
function b104(p0) {
 p0 = p0 | 0;
 nullFunc_vi(869); //@line 860
}
function b103(p0) {
 p0 = p0 | 0;
 nullFunc_vi(868); //@line 857
}
function b102(p0) {
 p0 = p0 | 0;
 nullFunc_vi(867); //@line 854
}
function b101(p0) {
 p0 = p0 | 0;
 nullFunc_vi(866); //@line 851
}
function b100(p0) {
 p0 = p0 | 0;
 nullFunc_vi(865); //@line 848
}
function __ZN7LoRaMacD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b99(p0) {
 p0 = p0 | 0;
 nullFunc_vi(864); //@line 845
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_vi(863); //@line 842
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_vi(862); //@line 839
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_vi(861); //@line 836
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_vi(860); //@line 833
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_vi(859); //@line 830
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_vi(858); //@line 827
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(857); //@line 824
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(856); //@line 821
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(855); //@line 818
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(854); //@line 815
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(853); //@line 812
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(852); //@line 809
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(851); //@line 806
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(850); //@line 803
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(849); //@line 800
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(848); //@line 797
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(847); //@line 794
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(846); //@line 791
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(845); //@line 788
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(844); //@line 785
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(843); //@line 782
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(842); //@line 779
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(841); //@line 776
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(840); //@line 773
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(839); //@line 770
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(838); //@line 767
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(837); //@line 764
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(836); //@line 761
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(835); //@line 758
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(834); //@line 755
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(833); //@line 752
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(832); //@line 749
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(831); //@line 746
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(830); //@line 743
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(829); //@line 740
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(828); //@line 737
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_vi(827); //@line 734
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_vi(826); //@line 731
}
function b60(p0) {
 p0 = p0 | 0;
 nullFunc_vi(825); //@line 728
}
function b59(p0) {
 p0 = p0 | 0;
 nullFunc_vi(824); //@line 725
}
function b58(p0) {
 p0 = p0 | 0;
 nullFunc_vi(823); //@line 722
}
function b57(p0) {
 p0 = p0 | 0;
 nullFunc_vi(822); //@line 719
}
function b56(p0) {
 p0 = p0 | 0;
 nullFunc_vi(821); //@line 716
}
function b55(p0) {
 p0 = p0 | 0;
 nullFunc_vi(820); //@line 713
}
function b54(p0) {
 p0 = p0 | 0;
 nullFunc_vi(819); //@line 710
}
function _sleep_manager_unlock_deep_sleep_internal() {
 return;
}
function _initialize__async_cb_481($0) {
 $0 = $0 | 0;
 return;
}
function _us_ticker_set_interrupt($0) {
 $0 = $0 | 0;
 return;
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function __ZN14LoRaMacCommandD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b53(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 707
}
function _sleep_manager_lock_deep_sleep_internal() {
 return;
}
function _us_ticker_get_info() {
 return 10132; //@line 6630
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _get_us_ticker_data() {
 return 10064; //@line 5796
}
function ___errno_location() {
 return 24144; //@line 10610
}
function __ZSt9terminatev__async_cb_212($0) {
 $0 = $0 | 0;
}
function __ZN11LoRaMacMlmeD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcpsD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcpsC2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_release($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10LoRaMacMibD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _pthread_self() {
 return 10412; //@line 10663
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _core_util_critical_section_exit() {
 return;
}
function _us_ticker_read() {
 return 0; //@line 6389
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function _us_ticker_disable_interrupt() {
 return;
}
function _us_ticker_clear_interrupt() {
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function _us_ticker_fire_interrupt() {
 return;
}
function b51() {
 nullFunc_v(15); //@line 704
}
function b50() {
 nullFunc_v(14); //@line 701
}
function b49() {
 nullFunc_v(13); //@line 698
}
function b48() {
 nullFunc_v(12); //@line 695
}
function b47() {
 nullFunc_v(11); //@line 692
}
function b46() {
 nullFunc_v(10); //@line 689
}
function b45() {
 nullFunc_v(9); //@line 686
}
function b44() {
 nullFunc_v(0); //@line 680
}
function _us_ticker_init() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1,_ccm_ctx_alloc,_gcm_ctx_alloc,_aes_ctx_alloc,_us_ticker_read,_us_ticker_get_info,b2,b3];
var FUNCTION_TABLE_ii = [b5,__ZN16SX1276_LoRaRadio6randomEv,__ZN16SX1276_LoRaRadio10get_statusEv,__ZN16LoRaWANInterface7connectEv,__ZN16LoRaWANInterface10disconnectEv,__ZN16LoRaWANInterface22add_link_check_requestEv,__ZN16LoRaWANInterface24enable_adaptive_datarateEv,__ZN16LoRaWANInterface25disable_adaptive_datarateEv,__ZN16LoRaWANInterface19remove_channel_planEv,___stdio_close,b6,b7,b8,b9,b10,b11];
var FUNCTION_TABLE_iii = [b13,__ZN16SX1276_LoRaRadio18check_rf_frequencyEj,__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE,__ZN16LoRaWANInterface7connectERK15lorawan_connect,__ZN16LoRaWANInterface12set_datarateEh,__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh,__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan,__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan,__ZN16LoRaWANInterface14remove_channelEh,__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t,__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s,__ZN7LoRaPHY25accept_tx_param_setup_reqEP20tx_param_setup_req_s,__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s,__ZN7LoRaPHY16get_alternate_DREh,__ZN7LoRaPHY14remove_channelEh,__ZN7LoRaPHY16verify_frequencyEj,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25
,b26,b27,b28];
var FUNCTION_TABLE_iiii = [b30,__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa,__ZN7LoRaPHY11add_channelEP16channel_params_th,__ZN7LoRaPHY15apply_DR_offsetEaa,_ccm_aes_setkey_wrap,_gcm_aes_setkey_wrap,_aes_setkey_enc_wrap,_aes_setkey_dec_wrap,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_get_pkcs_padding,b31];
var FUNCTION_TABLE_iiiii = [b33,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj,_aes_crypt_ecb_wrap,b34];
var FUNCTION_TABLE_iiiiii = [b36,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj,__ZN16LoRaWANInterface4sendEhPKhti,__ZN16LoRaWANInterface7receiveEhPhti,__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_,b37,b38,b39];
var FUNCTION_TABLE_iiiiiii = [b41,__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_,_aes_crypt_cbc_wrap,b42];
var FUNCTION_TABLE_v = [b44,___cxa_pure_virtual__wrapper,_us_ticker_init,_us_ticker_disable_interrupt,_us_ticker_clear_interrupt,_us_ticker_fire_interrupt,__ZL25default_terminate_handlerv,__ZL12send_messagev,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b45,b46,b47,b48,b49,b50,b51];
var FUNCTION_TABLE_vi = [b53,__ZN16SX1276_LoRaRadio11radio_resetEv,__ZN16SX1276_LoRaRadio5sleepEv,__ZN16SX1276_LoRaRadio7standbyEv,__ZN16SX1276_LoRaRadio9start_cadEv,__ZN16SX1276_LoRaRadio4lockEv,__ZN16SX1276_LoRaRadio6unlockEv,__ZN16SX1276_LoRaRadioD2Ev,__ZN16SX1276_LoRaRadioD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv,__ZN4mbed11InterruptInD2Ev,__ZN4mbed11InterruptInD0Ev,__ZN4mbed7TimeoutD2Ev,__ZN4mbed7TimeoutD0Ev,__ZN4mbed7Timeout7handlerEv,__ZN4mbed10TimerEventD2Ev,__ZN4mbed10TimerEventD0Ev,__ZN16LoRaWANInterface25remove_link_check_requestEv,__ZN16LoRaWANInterfaceD2Ev,__ZN16LoRaWANInterfaceD0Ev,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv,__ZN4mbed8CallbackIFvPhtsaEE13function_dtorINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPv,__ZN7LoRaPHYD2Ev
,__ZN7LoRaPHYD0Ev,__ZN7LoRaPHY24restore_default_channelsEv,__ZN12LoRaPHYEU868D2Ev,__ZN12LoRaPHYEU868D0Ev,_ccm_ctx_free,_gcm_ctx_free,_aes_ctx_free,_us_ticker_set_interrupt,__ZN4mbed10TimerEvent3irqEj,__ZN4mbed6TickerD2Ev,__ZN4mbed6TickerD0Ev,__ZN4mbed6Ticker7handlerEv,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv,__ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb_503,__ZN16SX1276_LoRaRadio11radio_resetEv__async_cb,__ZN16SX1276_LoRaRadio5sleepEv__async_cb_520,__ZN16SX1276_LoRaRadio5sleepEv__async_cb,__ZN16SX1276_LoRaRadio5sleepEv__async_cb_521,__ZN16SX1276_LoRaRadio7standbyEv__async_cb_375,__ZN16SX1276_LoRaRadio7standbyEv__async_cb_374,__ZN16SX1276_LoRaRadio7standbyEv__async_cb_376
,__ZN16SX1276_LoRaRadio7standbyEv__async_cb,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_385,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_384,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_447,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_446,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_445,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb,__ZN16SX1276_LoRaRadio4sendEPhh__async_cb,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_325,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_324,__ZN16SX1276_LoRaRadio11rx_done_irqEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_315,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_316,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_317,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_318,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_319,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_323,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_327,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_322,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_321,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_326,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_320,__ZN16SX1276_LoRaRadio11set_channelEj__async_cb,__ZN16SX1276_LoRaRadio6randomEv__async_cb,__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb_251,__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb,__ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb_272
,__ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb,__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb_281,__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_296,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_295,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_294,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_297,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_293,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_302,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_298,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_299,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_301,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_292,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_300,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_291,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_290,__ZN16SX1276_LoRaRadio9start_cadEv__async_cb,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_355,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_352,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_354,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_356,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_353,__ZN16SX1276_LoRaRadioD2Ev__async_cb,__ZN16SX1276_LoRaRadioD2Ev__async_cb_125,__ZN16SX1276_LoRaRadioD2Ev__async_cb_119,__ZN16SX1276_LoRaRadioD2Ev__async_cb_124,__ZN16SX1276_LoRaRadioD2Ev__async_cb_120,__ZN16SX1276_LoRaRadioD2Ev__async_cb_123
,__ZN16SX1276_LoRaRadioD2Ev__async_cb_121,__ZN16SX1276_LoRaRadioD2Ev__async_cb_122,__ZN16SX1276_LoRaRadioD2Ev__async_cb_131,__ZN16SX1276_LoRaRadioD2Ev__async_cb_130,__ZN16SX1276_LoRaRadioD2Ev__async_cb_129,__ZN16SX1276_LoRaRadioD2Ev__async_cb_128,__ZN16SX1276_LoRaRadioD2Ev__async_cb_127,__ZN16SX1276_LoRaRadioD2Ev__async_cb_126,__ZN16SX1276_LoRaRadioD0Ev__async_cb,__ZN16SX1276_LoRaRadio18set_low_power_modeEv__async_cb,__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb_68,__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_11,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_7,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_8,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_9,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_10,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_518,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_517,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_519,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_516,__ZN16SX1276_LoRaRadio11tx_done_irqEv,__ZN16SX1276_LoRaRadio8transmitEj__async_cb,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_514,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_515,__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb,_handle_lora_downlink__async_cb
,__ZN16SX1276_LoRaRadio8rx_frameEPhjjhh__async_cb_177,__ZN16SX1276_LoRaRadio8rx_frameEPhjjhh__async_cb_176,__ZN16SX1276_LoRaRadio8rx_frameEPhjjhh__async_cb_175,__ZN16SX1276_LoRaRadio8rx_frameEPhjjhh__async_cb,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_451,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_450,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_449,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb,__ZN4mbed11InterruptInD2Ev__async_cb,__ZN4mbed11InterruptInD2Ev__async_cb_423,__ZN4mbed11InterruptInD0Ev__async_cb,__ZN4mbed11InterruptInD0Ev__async_cb_336,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_342,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_247,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_248,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_249,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_250,__ZN4mbed7TimeoutD2Ev__async_cb,__ZN4mbed7TimeoutD2Ev__async_cb_279,__ZN4mbed7TimeoutD0Ev__async_cb,__ZN4mbed7TimeoutD0Ev__async_cb_185,__ZN4mbed7Timeout7handlerEv__async_cb_211,__ZN4mbed7Timeout7handlerEv__async_cb,__ZN4mbed5TimerC2Ev__async_cb,__ZN4mbed5Timer5startEv__async_cb,__ZN4mbed5Timer7read_msEv__async_cb,__ZN4mbed10TimerEventD2Ev__async_cb,__ZN4mbed10TimerEventC2Ev__async_cb
,__ZN4mbed10TimerEvent3irqEj__async_cb,__ZN6events10EventQueue8dispatchEi__async_cb,__ZN6events10EventQueue6cancelEi__async_cb,_equeue_post__async_cb,_equeue_enqueue__async_cb,_equeue_cancel__async_cb,_equeue_dispatch__async_cb,_equeue_dispatch__async_cb_382,_equeue_dispatch__async_cb_380,_equeue_dispatch__async_cb_381,_equeue_dispatch__async_cb_383,__ZN16LoRaWANInterface7connectEv__async_cb,__ZN16LoRaWANInterface4sendEhPKhti__async_cb,__ZN16LoRaWANInterface4sendEhPKhti__async_cb_373,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_284,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_285,__ZN12LoRaWANStackC2Ev__async_cb,__ZN12LoRaWANStackC2Ev__async_cb_276,__ZN12LoRaWANStackC2Ev__async_cb_277,__ZN12LoRaWANStackC2Ev__async_cb_278,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_263,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_270,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_262,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_261,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_266,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_256,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_269,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_257
,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_265,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_258,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_268,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_259,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_264,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_260,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_267,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_234,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_233,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_237,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_230,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_239,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_231,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_236,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_232,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_238,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_235,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_222,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_229,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_226,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_221,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_225,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_220,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_224,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_217,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_228,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_218,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_223
,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_219,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_227,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_402,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_411,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_410,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_409,__ZN12LoRaWANStack18lora_state_machineEv__async_cb,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_417,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_391,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_422,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_412,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_392,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_416,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_393,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_421,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_408,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_407,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_406,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_405,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_404,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_394,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_415,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_395,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_420,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_403,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_401,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_396,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_414
,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_397,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_419,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_400,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_398,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_413,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_399,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_418,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_457,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_458,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_461,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_459,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_460,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_484,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_485,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_488,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_486,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_487,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_504,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_1,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_23
,__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_22,__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_21,__ZN12LoRaWANStack17send_frame_to_macEv__async_cb,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_97,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_99,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_96,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_95,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_94,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_98,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_93,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_92,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_100,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN12LoRaWANStack17get_lorawan_stackEv__async_cb,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_179,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_178,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_180,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_206,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_207,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_208,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_209,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_210,__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb,__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb_271,__ZN12LoRaWANStack17drop_channel_listEv__async_cb
,__ZN12LoRaWANStack17drop_channel_listEv__async_cb_246,__ZN12LoRaWANStack16remove_a_channelEh__async_cb,__ZN12LoRaWANStack16remove_a_channelEh__async_cb_303,__ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan__async_cb,__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb,__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb_341,__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_312,__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_313,__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb,__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_314,__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb,__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb_362,__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb,__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb_351,__ZN12LoRaWANStack22set_link_check_requestEv__async_cb,__ZN12LoRaWANStack22set_link_check_requestEv__async_cb_379,__ZN12LoRaWANStack8shutdownEv__async_cb,__ZN7LoRaMacD2Ev__async_cb_497,__ZN7LoRaMacD2Ev__async_cb,__ZN12radio_eventsD2Ev__async_cb,__ZN12radio_eventsD2Ev__async_cb_472,__ZN12radio_eventsD2Ev__async_cb_473,__ZN12radio_eventsD2Ev__async_cb_474,__ZN12radio_eventsD2Ev__async_cb_475,__ZN12radio_eventsD2Ev__async_cb_476,__ZN12radio_eventsD2Ev__async_cb_477,__ZN14lorawan_timersD2Ev__async_cb,__ZN14lorawan_timersD2Ev__async_cb_508,__ZN14lorawan_timersD2Ev__async_cb_509,__ZN14lorawan_timersD2Ev__async_cb_510
,__ZN14lorawan_timersD2Ev__async_cb_511,__ZN7LoRaMac16on_radio_tx_doneEv,__ZN7LoRaMac14handle_tx_doneEv__async_cb,__ZN7LoRaMac14handle_tx_doneEv__async_cb_101,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_46,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_51,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_45,__ZN7LoRaMac25on_rx_window2_timer_eventEv,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_52,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_53,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_50,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_49,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_48,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_47,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_506,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_505,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_24,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_55,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_57,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_54,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_56,__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_117
,__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb,__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_118,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_72,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_85,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_91,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_80,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_83,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_79,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_78,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_82,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_81,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_77,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_76,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_75,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_88,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_71,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_87,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_70,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_86,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_69,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_90,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_89,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_74,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_73,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_84,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_148,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_149,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv
,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_152,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_150,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_151,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb_167,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb,__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa__async_cb,__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv,__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_187,__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_188,__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_186,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_280,__ZN7LoRaMac17on_radio_rx_errorEv,__ZN7LoRaMac15handle_rx_errorEv__async_cb,__ZN7LoRaMac15handle_rx_errorEv__async_cb_286,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_240,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_242,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_244,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_241,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_243,__ZN7LoRaMac19on_radio_rx_timeoutEv,__ZN7LoRaMac17handle_rx_timeoutEv__async_cb,__ZN7LoRaMac17handle_rx_timeoutEv__async_cb_253,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_343,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_346
,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_348,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_345,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_347,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_344,__ZN7LoRaMac19on_radio_tx_timeoutEv,__ZN7LoRaMac17handle_tx_timeoutEv__async_cb,__ZN7LoRaMac17handle_tx_timeoutEv__async_cb_361,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_306,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_307,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_308,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_309,__ZN7LoRaMac30on_mac_state_check_timer_eventEv,__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb,__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb_328,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_435,__ZN7LoRaMac25on_tx_delayed_timer_eventEv,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_434,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_442,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_433,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_441,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_431,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_440,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_424,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_439,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_425,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_429,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_430,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_428
,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_432,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_438,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_437,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_426,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_436,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_427,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_453,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_456,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_454,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_455,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_452,__ZN7LoRaMac11schedule_txEv__async_cb,__ZN7LoRaMac11schedule_txEv__async_cb_364,__ZN7LoRaMac11schedule_txEv__async_cb_370,__ZN7LoRaMac11schedule_txEv__async_cb_365,__ZN7LoRaMac11schedule_txEv__async_cb_366,__ZN7LoRaMac11schedule_txEv__async_cb_367,__ZN7LoRaMac11schedule_txEv__async_cb_369,__ZN7LoRaMac11schedule_txEv__async_cb_372,__ZN7LoRaMac11schedule_txEv__async_cb_368,__ZN7LoRaMac11schedule_txEv__async_cb_371,__ZN7LoRaMac21send_frame_on_channelEh__async_cb_377,__ZN7LoRaMac21send_frame_on_channelEh__async_cb,__ZN7LoRaMac21send_frame_on_channelEh__async_cb_378,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_388,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_386,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_387,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb,__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb
,__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb_507,__ZN7LoRaMac18handle_ack_timeoutEv__async_cb,__ZN7LoRaMac18handle_ack_timeoutEv__async_cb_512,__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb,__ZN7LoRaMac25on_rx_window1_timer_eventEv,__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_489,__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_490,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_499,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_502,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_501,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_498,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_500,__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb,__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_29,__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_30,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_40,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_41,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_42,__ZN7LoRaMac34handle_mac_state_check_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_39,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb,__ZN7LoRaMac29handle_delayed_tx_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_38,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_31,__ZN7LoRaMac22handle_rx1_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_37,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_32,__ZN7LoRaMac22handle_rx2_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_36
,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_33,__ZN7LoRaMac18handle_ack_timeoutEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_35,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_34,__ZN7LoRaMac10disconnectEv__async_cb_6,__ZN7LoRaMac10disconnectEv__async_cb_5,__ZN7LoRaMac10disconnectEv__async_cb_4,__ZN7LoRaMac10disconnectEv__async_cb_3,__ZN7LoRaMac10disconnectEv__async_cb_2,__ZN7LoRaMac10disconnectEv__async_cb,__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb_20,__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb,__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb,__ZN7LoRaMac19remove_channel_planEv__async_cb,__ZN7LoRaMac21remove_single_channelEh__async_cb,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_160,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_161,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_166,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_165,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_163,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_164,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_162,__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb,__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_172,__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_173,__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t__async_cb,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_144,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_145,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb
,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_146,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_147,__ZN7LoRaMac14handle_tx_doneEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_189,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_190,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_191,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_192,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_193,__ZN7LoRaMac15handle_rx_errorEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_194,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_195,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_196,__ZN7LoRaMac17handle_tx_timeoutEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_197,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_198,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_199,__ZN7LoRaMac17handle_rx_timeoutEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_200,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_201,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_202,__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_252,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_213,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_25,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_26,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_27
,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_28,__Z11compute_micPKhtS0_jhjPj__async_cb_15,__Z11compute_micPKhtS0_jhjPj__async_cb_14,__Z11compute_micPKhtS0_jhjPj__async_cb_12,__Z11compute_micPKhtS0_jhjPj__async_cb,__Z11compute_micPKhtS0_jhjPj__async_cb_13,__Z11compute_micPKhtS0_jhjPj__async_cb_16,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_66,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_65,__Z22compute_join_frame_micPKhtS0_Pj__async_cb,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_64,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_67,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_335,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_334,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_332,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_333,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_331,__ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft__async_cb,__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb,__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb_513,__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb,__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb_443,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_464,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_465,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_466,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_467,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_468,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_469
,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_470,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_471,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_58,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_59,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_60,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_61,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_62,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_63,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb,__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s__async_cb,__ZN7LoRaPHY11add_channelEP16channel_params_th__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_203,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_204,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_359,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_360,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_349,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_350,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_254,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_255,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_214,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_215,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_216,__ZN7LoRaPHY13get_radio_rngEv__async_cb,__ZN7LoRaPHY13get_radio_rngEv__async_cb_282
,__ZN7LoRaPHY13get_radio_rngEv__async_cb_283,__ZN7LoRaPHY11handle_sendEPhh__async_cb_275,__ZN7LoRaPHY11handle_sendEPhh__async_cb,__ZN7LoRaPHY11handle_sendEPhh__async_cb_273,__ZN7LoRaPHY11handle_sendEPhh__async_cb_274,__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_310,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_337,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_339,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_338,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_340,__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb,_mbedtls_ccm_setkey__async_cb_463,_mbedtls_ccm_setkey__async_cb_462,_mbedtls_ccm_setkey__async_cb,_mbedtls_ccm_free__async_cb,_mbedtls_cipher_free__async_cb,_mbedtls_cipher_setup__async_cb,_mbedtls_cipher_setkey__async_cb,_mbedtls_cipher_setkey__async_cb_43,_mbedtls_cipher_update__async_cb,_mbedtls_cipher_update__async_cb_19,_mbedtls_cipher_update__async_cb_17,_mbedtls_cipher_update__async_cb_18,_ccm_aes_setkey_wrap__async_cb,_ccm_ctx_free__async_cb,_gcm_aes_setkey_wrap__async_cb,_gcm_ctx_free__async_cb
,_mbedtls_cipher_cmac_starts__async_cb,_mbedtls_cipher_cmac_update__async_cb_330,_mbedtls_cipher_cmac_update__async_cb_329,_mbedtls_cipher_cmac_update__async_cb,_mbedtls_cipher_cmac_finish__async_cb_305,_mbedtls_cipher_cmac_finish__async_cb,_mbedtls_gcm_setkey__async_cb_289,_mbedtls_gcm_setkey__async_cb_288,_mbedtls_gcm_setkey__async_cb_287,_mbedtls_gcm_setkey__async_cb,_mbedtls_gcm_update__async_cb,_mbedtls_gcm_free__async_cb,_ticker_set_handler__async_cb,_initialize__async_cb,_initialize__async_cb_478,_initialize__async_cb_483,_initialize__async_cb_482,_initialize__async_cb_479,_initialize__async_cb_480,_initialize__async_cb_481,_schedule_interrupt__async_cb,_schedule_interrupt__async_cb_491,_schedule_interrupt__async_cb_492,_schedule_interrupt__async_cb_493,_schedule_interrupt__async_cb_494,_schedule_interrupt__async_cb_495,_schedule_interrupt__async_cb_496,_ticker_remove_event__async_cb,_ticker_read_us__async_cb_444,_ticker_read_us__async_cb
,_mbed_assert_internal__async_cb,_mbed_die__async_cb_116,_mbed_die__async_cb_115,_mbed_die__async_cb_114,_mbed_die__async_cb_113,_mbed_die__async_cb_112,_mbed_die__async_cb_111,_mbed_die__async_cb_110,_mbed_die__async_cb_109,_mbed_die__async_cb_108,_mbed_die__async_cb_107,_mbed_die__async_cb_106,_mbed_die__async_cb_105,_mbed_die__async_cb_104,_mbed_die__async_cb_103,_mbed_die__async_cb_102,_mbed_die__async_cb,_mbed_error_printf__async_cb,_mbed_error_printf__async_cb_44,_handle_interrupt_in__async_cb,_serial_putc__async_cb_205,_serial_putc__async_cb,__ZN4mbed6TickerD2Ev__async_cb,__ZN4mbed6TickerD2Ev__async_cb_132,__ZN4mbed6TickerD0Ev__async_cb,__ZN4mbed6TickerD0Ev__async_cb_363,__ZN4mbed6Ticker7handlerEv__async_cb,_invoke_ticker__async_cb_389,_invoke_ticker__async_cb,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb
,_wait_ms__async_cb,__GLOBAL__sub_I_main_cpp__async_cb,__GLOBAL__sub_I_main_cpp__async_cb_357,_main__async_cb_140,_main__async_cb_139,_main__async_cb_138,_main__async_cb_142,_main__async_cb,__ZL18lora_event_handler11lora_events,_main__async_cb_133,_main__async_cb_134,_main__async_cb_135,_main__async_cb_137,_main__async_cb_136,_main__async_cb_141,__ZL12send_messagev__async_cb_143,__ZL12send_messagev__async_cb,__ZL18lora_event_handler11lora_events__async_cb_159,__ZL18lora_event_handler11lora_events__async_cb_158,__ZL18lora_event_handler11lora_events__async_cb_157,__ZL18lora_event_handler11lora_events__async_cb_156,__ZL18lora_event_handler11lora_events__async_cb,__ZL18lora_event_handler11lora_events__async_cb_155,__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb,_putc__async_cb_245,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_182,_fflush__async_cb_181,_fflush__async_cb_183
,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_174,_vfprintf__async_cb,_vsnprintf__async_cb,_sprintf__async_cb,_vsprintf__async_cb,_printf__async_cb,_putchar__async_cb,_fputc__async_cb_304,_fputc__async_cb,_puts__async_cb,__ZL25default_terminate_handlerv__async_cb,__ZL25default_terminate_handlerv__async_cb_153,_abort_message__async_cb,_abort_message__async_cb_358,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_184,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_448,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_390,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_311,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_171,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_170
,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_169,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_168,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_154,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b54,b55,b56,b57,b58,b59,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73
,b74,b75,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99,b100,b101,b102,b103
,b104,b105,b106,b107,b108,b109,b110,b111,b112,b113,b114,b115,b116,b117,b118,b119,b120,b121,b122,b123,b124,b125,b126,b127,b128,b129,b130,b131,b132,b133
,b134,b135,b136,b137,b138,b139,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,b153,b154,b155,b156,b157,b158,b159,b160,b161,b162,b163
,b164,b165,b166,b167,b168,b169,b170,b171,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181,b182,b183,b184,b185,b186,b187,b188,b189,b190,b191,b192,b193
,b194,b195,b196,b197,b198,b199,b200,b201,b202,b203,b204,b205,b206,b207,b208,b209,b210,b211,b212,b213,b214,b215,b216,b217,b218,b219,b220,b221,b222,b223
,b224,b225,b226,b227,b228,b229,b230,b231,b232,b233,b234,b235,b236,b237,b238,b239,b240,b241,b242,b243,b244,b245,b246,b247,b248,b249,b250,b251,b252,b253
,b254,b255,b256,b257,b258];
var FUNCTION_TABLE_vii = [b260,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events,__ZN16SX1276_LoRaRadio7receiveEj,__ZN16SX1276_LoRaRadio11set_channelEj,__ZN16SX1276_LoRaRadio18set_public_networkEb,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvPhtsaEE13function_moveINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPvPKv,__ZN7LoRaPHY16set_last_tx_doneEP24set_band_txdone_params_t,__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t,__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv,__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_,__ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t,__ZN12LoRaWANStack23mlme_indication_handlerEP25loramac_mlme_indication_t,b261,b262,b263
,b264,b265,b266];
var FUNCTION_TABLE_viii = [b268,__ZN16SX1276_LoRaRadio4sendEPhh,__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj,_add_pkcs_padding,b269,b270,b271];
var FUNCTION_TABLE_viiii = [b273,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b274,b275,b276];
var FUNCTION_TABLE_viiiii = [b278,__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa,__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZN7LoRaMac16on_radio_rx_doneEPhtsa,__ZN7LoRaMac14handle_rx_doneEPhtsa];
var FUNCTION_TABLE_viiiiii = [b280,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
var FUNCTION_TABLE_viiiiiiiiiiiiii = [b282,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b284,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb];

  return { __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _handle_lora_downlink: _handle_lora_downlink, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__handle_lora_downlink = asm["_handle_lora_downlink"]; asm["_handle_lora_downlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_lora_downlink.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _handle_lora_downlink = Module["_handle_lora_downlink"] = asm["_handle_lora_downlink"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=lorawan.js.map